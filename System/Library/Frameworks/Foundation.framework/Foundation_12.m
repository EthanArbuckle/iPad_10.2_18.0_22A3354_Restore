float _PlistUnkeyedDecodingContainer.decode(_:)(uint64_t a1)
{
  uint64_t v1;
  float v2;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, __n128);
  int v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  float v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  char *v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v62;
  char *v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t);
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v70 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v69 = (char *)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v7 = swift_getAssociatedTypeWitness();
  v8 = type metadata accessor for Optional();
  v67 = *(_QWORD *)(v8 - 8);
  v68 = v8;
  MEMORY[0x1E0C80A78](v8);
  v73 = (char *)&v64 - v9;
  v74 = *(_QWORD *)(v7 - 8);
  v75 = v7;
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v64 - v11;
  v79 = AssociatedTypeWitness;
  v80 = AssociatedConformanceWitness;
  v13 = swift_getAssociatedTypeWitness();
  v14 = type metadata accessor for Optional();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v64 - v16;
  v18 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v64 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v22);
  v77 = (char *)&v64 - v24;
  v25 = a1;
  v26 = *(int *)(a1 + 40);
  v27 = v1;
  v28 = (char *)(v1 + v26);
  v30 = v29;
  v31 = *(void (**)(char *, __n128))(v15 + 16);
  v71 = v28;
  v31(v17, v23);
  v76 = v18;
  v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1, v13);
  v72 = v30;
  v78 = v15;
  if (v32 == 1)
  {
    v65 = *(void (**)(char *, uint64_t))(v15 + 8);
    v66 = v21;
    v65(v17, v30);
    v33 = v25;
    swift_getAssociatedTypeWitness();
    v34 = swift_getAssociatedConformanceWitness();
    v35 = *(void (**)(uint64_t, uint64_t))(v34 + 16);
    v36 = swift_checkMetadataState();
    v37 = v73;
    v35(v36, v34);
    v39 = v74;
    v38 = v75;
    v40 = v33;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48))(v37, 1, v75) == 1)
    {
      (*(void (**)(char *, uint64_t))(v67 + 8))(v37, v68);
      v42 = v69;
      v41 = v70;
      (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v69, v27, v33);
      type metadata accessor for DecodingError();
      v43 = swift_allocError();
      specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:)(v33, v44);
      (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v33);
      v81 = v43;
      swift_willThrow();
      return v2;
    }
    v54 = *(void (**)(char *, char *, uint64_t))(v39 + 32);
    v64 = v27;
    v55 = v12;
    v54(v12, v37, v38);
    v56 = v80;
    v57 = *(void (**)(char *, uint64_t, uint64_t))(v80 + 80);
    swift_unknownObjectRetain();
    v58 = swift_checkMetadataState();
    v59 = v81;
    v57(v55, v58, v56);
    v27 = v64;
    v81 = v59;
    if (v59)
    {
      (*(void (**)(char *, uint64_t))(v39 + 8))(v55, v38);
      swift_unknownObjectRelease();
      return v2;
    }
    (*(void (**)(char *, uint64_t))(v39 + 8))(v55, v38);
    swift_unknownObjectRelease();
    v62 = v71;
    v65(v71, v72);
    v46 = v76;
    v63 = v66;
    (*(void (**)(char *, char *, uint64_t))(v76 + 16))(v62, v66, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v62, 0, 1, v13);
    v45 = v63;
  }
  else
  {
    v45 = v17;
    v46 = v76;
    v40 = v25;
  }
  v47 = (uint64_t)v77;
  (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v77, v45, v13);
  v49 = v40 + 48;
  v48 = *(int *)(v40 + 48);
  v50 = *(_QWORD *)(v27 + v48);
  v51 = v81;
  specialized _PlistDecoder.unwrapFloatingPoint<A, B>(from:for:_:)(v47, *(_QWORD *)(v27 + *(int *)(v49 + 4)), v50, 0, 0, 2u);
  v81 = v51;
  v53 = v78;
  if (!v51)
  {
    v2 = v52;
    *(_QWORD *)(v27 + v48) = v50 + 1;
    v60 = v71;
    (*(void (**)(char *, uint64_t))(v53 + 8))(v71, v72);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v46 + 56))(v60, 1, 1, v13);
  }
  (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v47, v13);
  return v2;
}

uint64_t _PlistUnkeyedDecodingContainer.decode(_:)(uint64_t a1, uint64_t (*a2)(char *, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t), uint64_t a3)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, __n128);
  int v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  void (*v48)(char *, uint64_t, uint64_t);
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v54)(char *, uint64_t);
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t (*v73)(char *, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t);
  uint64_t v74;
  uint64_t v75;

  v63 = a3;
  v73 = a2;
  v60 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v59 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v7 = swift_getAssociatedTypeWitness();
  v8 = type metadata accessor for Optional();
  v57 = *(_QWORD *)(v8 - 8);
  v58 = v8;
  MEMORY[0x1E0C80A78](v8);
  v64 = (char *)&v54 - v9;
  v67 = *(_QWORD *)(v7 - 8);
  v68 = v7;
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v54 - v11;
  v65 = AssociatedTypeWitness;
  v66 = AssociatedConformanceWitness;
  v13 = swift_getAssociatedTypeWitness();
  v14 = type metadata accessor for Optional();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v54 - v16;
  v18 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v54 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v22);
  v71 = (char *)&v54 - v24;
  v25 = v74;
  v26 = *(void (**)(char *, __n128))(v15 + 16);
  v61 = v74 + *(int *)(a1 + 40);
  v26(v17, v23);
  v69 = v13;
  v70 = v18;
  v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1, v13);
  v62 = v14;
  v72 = v15;
  if (v27 == 1)
  {
    v55 = v12;
    v56 = v21;
    v54 = *(void (**)(char *, uint64_t))(v15 + 8);
    v54(v17, v14);
    v28 = v25;
    v13 = v66;
    swift_getAssociatedTypeWitness();
    v29 = swift_getAssociatedConformanceWitness();
    v30 = *(void (**)(uint64_t, uint64_t))(v29 + 16);
    v31 = swift_checkMetadataState();
    v32 = v64;
    v30(v31, v29);
    v34 = v67;
    v33 = v68;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48))(v32, 1, v68) == 1)
    {
      (*(void (**)(char *, uint64_t))(v57 + 8))(v32, v58);
      v35 = v59;
      v13 = v60;
      (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v59, v25, a1);
      type metadata accessor for DecodingError();
      v36 = swift_allocError();
      ((void (*)(uint64_t))v63)(a1);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v35, a1);
      v75 = v36;
      swift_willThrow();
      return v13;
    }
    v63 = a1;
    v47 = v55;
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v55, v32, v33);
    v48 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 80);
    swift_unknownObjectRetain();
    v49 = swift_checkMetadataState();
    v50 = v56;
    v51 = v75;
    v48(v47, v49, v13);
    v75 = v51;
    if (v51)
    {
      (*(void (**)(char *, uint64_t))(v34 + 8))(v47, v33);
      swift_unknownObjectRelease();
      return v13;
    }
    v40 = v28;
    (*(void (**)(char *, uint64_t))(v34 + 8))(v47, v33);
    swift_unknownObjectRelease();
    v13 = v61;
    v54((char *)v61, v62);
    v38 = v69;
    v39 = v70;
    (*(void (**)(uint64_t, char *, uint64_t))(v70 + 16))(v13, v50, v69);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v39 + 56))(v13, 0, 1, v38);
    v37 = v50;
  }
  else
  {
    v63 = a1;
    v37 = v17;
    v38 = v69;
    v39 = v70;
    v40 = v25;
  }
  v41 = v71;
  (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v71, v37, v38);
  v42 = *(int *)(v63 + 48);
  v43 = *(_QWORD *)(v40 + v42);
  v44 = v75;
  v45 = v73(v41, *(_QWORD *)(v40 + *(int *)(v63 + 52)), v43, 0, 0, 2);
  v75 = v44;
  v46 = v72;
  if (!v44)
  {
    v13 = v45;
    *(_QWORD *)(v40 + v42) = v43 + 1;
    v52 = v61;
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v61, v62);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v39 + 56))(v52, 1, 1, v38);
  }
  (*(void (**)(char *, uint64_t))(v39 + 8))(v41, v38);
  return v13;
}

uint64_t _PlistUnkeyedDecodingContainer.decode<A>(_:)@<X0>(ValueMetadata *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  void (*v29)(char *, __n128);
  int v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t);
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  ValueMetadata *v79;
  uint64_t v80;
  uint64_t v81;

  v78 = a4;
  v79 = a1;
  v80 = a3;
  v77 = a5;
  v66 = *((_QWORD *)a2 - 1);
  MEMORY[0x1E0C80A78](a1);
  v65 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = v5;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v11 = swift_getAssociatedTypeWitness();
  v12 = type metadata accessor for Optional();
  v63 = *(_QWORD *)(v12 - 8);
  v64 = v12;
  MEMORY[0x1E0C80A78](v12);
  v68 = (char *)&v58 - v13;
  v71 = *(_QWORD *)(v11 - 8);
  v72 = v11;
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v58 - v15;
  v69 = AssociatedTypeWitness;
  v70 = AssociatedConformanceWitness;
  v17 = swift_getAssociatedTypeWitness();
  v18 = type metadata accessor for Optional();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v58 - v20;
  v22 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v23);
  v25 = (char *)&v58 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v26);
  v75 = (char *)&v58 - v28;
  v29 = *(void (**)(char *, __n128))(v19 + 16);
  v67 = (char *)(v9 + a2[10]);
  v29(v21, v27);
  v73 = v17;
  v74 = v22;
  v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48))(v21, 1, v17);
  v76 = v19;
  if (v30 == 1)
  {
    v60 = v18;
    v61 = v25;
    v59 = *(void (**)(char *, uint64_t))(v19 + 8);
    v59(v21, v18);
    v62 = v9;
    v31 = v70;
    swift_getAssociatedTypeWitness();
    v32 = swift_getAssociatedConformanceWitness();
    v33 = *(void (**)(uint64_t, uint64_t))(v32 + 16);
    v34 = swift_checkMetadataState();
    v35 = v68;
    v33(v34, v32);
    v37 = v71;
    v36 = v72;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48))(v35, 1, v72) == 1)
    {
      (*(void (**)(char *, uint64_t))(v63 + 8))(v35, v64);
      v39 = v65;
      v38 = v66;
      (*(void (**)(char *, uint64_t, int *))(v66 + 16))(v65, v62, a2);
      type metadata accessor for DecodingError();
      v40 = swift_allocError();
      _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:)((uint64_t)v79, (uint64_t)a2, v80, v41);
      (*(void (**)(char *, int *))(v38 + 8))(v39, a2);
      v81 = v40;
      return swift_willThrow();
    }
    v52 = v16;
    (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v16, v35, v36);
    v53 = v62;
    v54 = *(void (**)(char *, uint64_t, uint64_t))(v31 + 80);
    swift_unknownObjectRetain();
    v55 = swift_checkMetadataState();
    v56 = v81;
    v54(v52, v55, v31);
    v81 = v56;
    if (v56)
    {
      (*(void (**)(char *, uint64_t))(v37 + 8))(v52, v36);
      return swift_unknownObjectRelease();
    }
    v43 = v53;
    (*(void (**)(char *, uint64_t))(v37 + 8))(v52, v36);
    swift_unknownObjectRelease();
    v57 = v67;
    v18 = v60;
    v59(v67, v60);
    v45 = v73;
    v44 = v74;
    v21 = v61;
    (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v57, v61, v73);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v57, 0, 1, v45);
  }
  else
  {
    v43 = v9;
    v45 = v73;
    v44 = v74;
  }
  v46 = (uint64_t)v75;
  (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v75, v21, v45);
  v47 = a2[12];
  v48 = *(_QWORD *)(v43 + v47);
  v49 = v81;
  specialized _PlistDecoder.unwrapGeneric<A, B>(_:as:for:_:)(v46, v79, *(_QWORD *)(v43 + a2[13]), v48, 0, 0, 2, v80, v77, v78);
  v81 = v49;
  v50 = v76;
  if (!v49)
  {
    *(_QWORD *)(v43 + v47) = v48 + 1;
    v51 = v67;
    (*(void (**)(char *, uint64_t))(v50 + 8))(v67, v18);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v44 + 56))(v51, 1, 1, v45);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v44 + 8))(v46, v45);
}

uint64_t _PlistUnkeyedDecodingContainer.nestedContainer<A>(keyedBy:)@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  void (*v38)(_QWORD);
  unsigned int (*v39)(void (*)(_QWORD, _QWORD), uint64_t, uint64_t);
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  _QWORD *v50;
  uint64_t result;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  uint64_t *v54;
  void (*v55)(char *, char *, uint64_t);
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  void (*v80)(char *, uint64_t);
  uint64_t v81;
  void (*v82)(uint64_t, void (*)(_QWORD, _QWORD), uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  void (*v85)(_QWORD, uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(_QWORD, _QWORD);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  void (*v102)(char *, uint64_t);
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  unsigned int (*v115)(void (*)(_QWORD, _QWORD), uint64_t, uint64_t);
  void (*v116)(void (*)(_QWORD, _QWORD), char *, uint64_t);
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  char *v127;
  uint64_t v128;
  char *v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;

  v121 = a5;
  v122 = a1;
  v108 = *((_QWORD *)a2 - 1);
  MEMORY[0x1E0C80A78](a1);
  v107 = (char *)&v102 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v9 + 16);
  v10 = *(_QWORD *)(v9 + 24);
  swift_getAssociatedTypeWitness();
  v119 = v11;
  v120 = v10;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v105 = type metadata accessor for Optional();
  v104 = *(_QWORD *)(v105 - 8);
  MEMORY[0x1E0C80A78](v105);
  v129 = (char *)&v102 - v14;
  v113 = AssociatedTypeWitness;
  v111 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v15);
  v106 = (char *)&v102 - v16;
  v112 = AssociatedConformanceWitness;
  v17 = swift_getAssociatedTypeWitness();
  v18 = type metadata accessor for Optional();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v125 = (char *)&v102 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v117 = (char *)&v102 - v22;
  MEMORY[0x1E0C80A78](v23);
  v25 = (char *)&v102 - v24;
  MEMORY[0x1E0C80A78](v26);
  v114 = (char *)&v102 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28);
  v126 = (char *)&v102 - v29;
  MEMORY[0x1E0C80A78](v30);
  v110 = (char *)&v102 - v31;
  MEMORY[0x1E0C80A78](v32);
  v34 = (char *)&v102 - v33;
  v123 = a3;
  v124 = a4;
  v36 = v35;
  v103 = type metadata accessor for KeyedDecodingContainer();
  v37 = v130;
  v38 = *(void (**)(_QWORD))(v19 + 16);
  v109 = (char *)v130 + a2[10];
  v116 = (void (*)(void (*)(_QWORD, _QWORD), char *, uint64_t))v38;
  v38(v25);
  v39 = *(unsigned int (**)(void (*)(_QWORD, _QWORD), uint64_t, uint64_t))(v36 + 48);
  v132 = v17;
  v115 = v39;
  v40 = v39((void (*)(_QWORD, _QWORD))v25, 1, v17);
  v127 = v34;
  v128 = v18;
  v118 = v19;
  if (v40 == 1)
  {
    v102 = *(void (**)(char *, uint64_t))(v19 + 8);
    v102(v25, v18);
    v41 = v112;
    swift_getAssociatedTypeWitness();
    v42 = swift_getAssociatedConformanceWitness();
    v43 = *(void (**)(uint64_t, uint64_t))(v42 + 16);
    v44 = swift_checkMetadataState();
    v45 = v129;
    v43(v44, v42);
    v46 = v111;
    v47 = v113;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v111 + 48))(v45, 1, v113) == 1)
    {
      (*(void (**)(char *, uint64_t))(v104 + 8))(v129, v105);
      v48 = v108;
      v49 = v107;
      (*(void (**)(char *, uint64_t *, int *))(v108 + 16))(v107, v130, a2);
      type metadata accessor for DecodingError();
      swift_allocError();
      _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:)(v103, (uint64_t)a2, v103, v50);
      (*(void (**)(char *, int *))(v48 + 8))(v49, a2);
      return swift_willThrow();
    }
    v65 = v106;
    (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v106, v129, v47);
    v54 = v130;
    v129 = *(char **)(v41 + 80);
    swift_unknownObjectRetain();
    v66 = swift_checkMetadataState();
    v67 = v131;
    ((void (*)(char *, uint64_t, uint64_t))v129)(v65, v66, v41);
    v53 = v67;
    if (v67)
    {
      (*(void (**)(char *, uint64_t))(v46 + 8))(v65, v47);
      return swift_unknownObjectRelease();
    }
    (*(void (**)(char *, uint64_t))(v46 + 8))(v65, v47);
    swift_unknownObjectRelease();
    v99 = v109;
    v102(v109, v128);
    v100 = v110;
    v101 = v132;
    (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v99, v110, v132);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v99, 0, 1, v101);
    v113 = v36;
    v55 = *(void (**)(char *, char *, uint64_t))(v36 + 32);
    v34 = v127;
    v55(v127, v100, v101);
  }
  else
  {
    v113 = v36;
    v52 = *(void (**)(char *, char *, uint64_t))(v36 + 32);
    v52(v34, v25, v132);
    v53 = v131;
    v54 = v37;
    v55 = v52;
  }
  v56 = *v54;
  v57 = *(uint64_t *)((char *)v54 + a2[13]);
  v110 = (char *)a2[12];
  v58 = *(_QWORD *)&v110[(_QWORD)v54];
  v59 = (char *)swift_allocObject();
  *((_QWORD *)v59 + 5) = &type metadata for _CodingKey;
  *((_QWORD *)v59 + 6) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v60 = swift_allocObject();
  *((_QWORD *)v59 + 2) = v60;
  *(_QWORD *)(v60 + 24) = 0;
  *(_QWORD *)(v60 + 32) = 0;
  *(_QWORD *)(v60 + 16) = v58;
  *(_BYTE *)(v60 + 40) = 2;
  v129 = v59;
  *((_QWORD *)v59 + 7) = v57;
  v61 = v126;
  if (v57 >> 62)
  {
    v62 = 0;
    v63 = v125;
    if (v57 >> 62 != 1)
      goto LABEL_12;
    v64 = (uint64_t *)((v57 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v64 = (uint64_t *)(v57 + 64);
    v63 = v125;
  }
  v62 = *v64;
  swift_retain_n();
LABEL_12:
  if (__OFADD__(v62, 1))
  {
    __break(1u);
    goto LABEL_22;
  }
  v68 = v129;
  *((_QWORD *)v129 + 8) = v62 + 1;
  swift_retain();
  swift_release();
  v125 = *(char **)(v56 + 40);
  *(_QWORD *)(v56 + 40) = v68;
  v58 = v56 + 16;
  v69 = v132;
  v72 = type metadata accessor for _PlistDecodingStorage(0, v132, v70, v71);
  swift_retain();
  v112 = v56 + 16;
  specialized _PlistDecodingStorage.push(container:)((uint64_t)v34, v72);
  v73 = *(_QWORD *)(v56 + 16);
  swift_bridgeObjectRetain_n();
  swift_retain();
  v74 = MEMORY[0x186DA4B68](v73, v69);
  swift_bridgeObjectRelease();
  if (!v74)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v131 = v53;
  v133 = v73;
  v75 = v132;
  v76 = type metadata accessor for Array();
  v77 = MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF20], v76);
  v78 = v117;
  v111 = v77;
  BidirectionalCollection.last.getter();
  v58 = v128;
  v116((void (*)(_QWORD, _QWORD))v63, v78, v128);
  if (v115((void (*)(_QWORD, _QWORD))v63, 1, v75) != 1)
  {
    v79 = (void (*)(_QWORD, uint64_t))v61;
    v55(v61, v63, v132);
    v80 = *(void (**)(char *, uint64_t))(v118 + 8);
    v80(v78, v58);
    swift_bridgeObjectRelease();
    v81 = *(_QWORD *)(v56 + 40);
    v63 = (char *)v79;
    v82 = *(void (**)(uint64_t, void (*)(_QWORD, _QWORD), uint64_t, uint64_t, uint64_t, uint64_t))(v120 + 24);
    swift_retain();
    v83 = v81;
    v84 = v131;
    v82(v122, (char *)v79, v56, v83, v123, v124);
    v131 = v84;
    if (!v84)
    {
      v91 = v113;
      v92 = v79;
      v63 = *(char **)(v113 + 8);
      v93 = v132;
      ((void (*)(_QWORD, uint64_t))v63)(v92, v132);
      swift_release();
      swift_release();
      *(_QWORD *)(v56 + 40) = v125;
      swift_retain();
      swift_release();
      v58 = *(_QWORD *)(v56 + 16);
      v94 = swift_bridgeObjectRetain();
      v95 = MEMORY[0x186DA4B68](v94, v93);
      swift_bridgeObjectRelease();
      if (v95)
      {
        MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF58], v76);
        v96 = v114;
        RangeReplaceableCollection<>.removeLast()();
        v97 = v132;
        ((void (*)(char *, uint64_t))v63)(v96, v132);
        swift_release();
        swift_release();
        swift_release();
        ++*(_QWORD *)&v110[(_QWORD)v130];
        v98 = v109;
        v80(v109, v128);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v91 + 56))(v98, 1, 1, v97);
        return ((uint64_t (*)(char *, uint64_t))v63)(v127, v97);
      }
      goto LABEL_24;
    }
    v85 = *(void (**)(_QWORD, uint64_t))(v113 + 8);
    v86 = v132;
    v85(v63, v132);
    swift_release();
    swift_release();
    *(_QWORD *)(v56 + 40) = v125;
    swift_retain();
    swift_release();
    v58 = *(_QWORD *)(v56 + 16);
    v87 = swift_bridgeObjectRetain();
    v88 = MEMORY[0x186DA4B68](v87, v86);
    swift_bridgeObjectRelease();
    if (v88)
    {
      MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF58], v76);
      v89 = v114;
      RangeReplaceableCollection<>.removeLast()();
      v90 = v132;
      v85(v89, v132);
      swift_release();
      v85(v127, v90);
      swift_release();
      return swift_release();
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
  }
  result = (*(uint64_t (**)(char *, uint64_t))(v118 + 8))(v63, v58);
  __break(1u);
  return result;
}

uint64_t _PlistUnkeyedDecodingContainer.nestedUnkeyedContainer()@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  _QWORD *v24;
  void (*v25)(char *, __n128);
  int v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t result;
  char *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t *v48;
  char *v49;
  void (*v50)(char *, uint64_t, uint64_t);
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  void (*v64)(char *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  void (*v71)(char *, uint64_t);
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(char *, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;

  v92 = a2;
  v85 = *((_QWORD *)a1 - 1);
  MEMORY[0x1E0C80A78](a1);
  v84 = (char *)&v75 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for Optional();
  v80 = *(_QWORD *)(v7 - 8);
  v81 = v7;
  MEMORY[0x1E0C80A78](v7);
  v88 = (char *)&v75 - v8;
  v89 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v90 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](v9);
  v83 = (char *)&v75 - v10;
  v87 = AssociatedConformanceWitness;
  v11 = swift_getAssociatedTypeWitness();
  v12 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v75 - v14;
  v16 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v17);
  v91 = (char *)&v75 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v82 = (char *)&v75 - v20;
  v22 = MEMORY[0x1E0C80A78](v21);
  v93 = (char *)&v75 - v23;
  v24 = v2;
  v25 = *(void (**)(char *, __n128))(v13 + 16);
  v86 = (char *)v2 + a1[10];
  v25(v15, v22);
  v94 = v16;
  v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, v11);
  v79 = v13;
  if (v26 == 1)
  {
    v77 = v11;
    v78 = v12;
    v76 = *(void (**)(char *, uint64_t))(v13 + 8);
    v76(v15, v12);
    v27 = v87;
    swift_getAssociatedTypeWitness();
    v28 = swift_getAssociatedConformanceWitness();
    v29 = *(void (**)(uint64_t, uint64_t))(v28 + 16);
    v30 = swift_checkMetadataState();
    v31 = v88;
    v29(v30, v28);
    v33 = v89;
    v32 = v90;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(v31, 1, v90) == 1)
    {
      (*(void (**)(char *, uint64_t))(v80 + 8))(v31, v81);
      v34 = v84;
      v35 = v85;
      (*(void (**)(char *, _QWORD *, int *))(v85 + 16))(v84, v24, a1);
      type metadata accessor for DecodingError();
      v36 = swift_allocError();
      specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:)((uint64_t)a1, v37);
      (*(void (**)(char *, int *))(v35 + 8))(v34, a1);
      v95 = v36;
      return swift_willThrow();
    }
    v49 = v83;
    (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v83, v31, v32);
    v50 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 80);
    swift_unknownObjectRetain();
    v51 = v49;
    v52 = swift_checkMetadataState();
    v39 = v82;
    v53 = v95;
    v50(v51, v52, v27);
    v95 = v53;
    if (v53)
    {
      (*(void (**)(char *, uint64_t))(v33 + 8))(v51, v32);
      return swift_unknownObjectRelease();
    }
    (*(void (**)(char *, uint64_t))(v33 + 8))(v51, v32);
    swift_unknownObjectRelease();
    v73 = v86;
    v12 = v78;
    v76(v86, v78);
    v74 = v94;
    v11 = v77;
    (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v73, v39, v77);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v73, 0, 1, v11);
  }
  else
  {
    v39 = v15;
  }
  v40 = v24;
  v41 = (uint64_t)v93;
  (*(void (**)(char *, char *, uint64_t))(v94 + 32))(v93, v39, v11);
  v42 = *v24;
  v43 = a1[12];
  v44 = *(_QWORD *)((char *)v40 + a1[13]);
  v90 = (uint64_t)v40;
  v45 = *(_QWORD *)((char *)v40 + v43);
  v46 = (_QWORD *)swift_allocObject();
  v46[5] = &type metadata for _CodingKey;
  v46[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  result = swift_allocObject();
  v46[2] = result;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = v45;
  *(_BYTE *)(result + 40) = 2;
  v46[7] = v44;
  if (v44 >> 62)
  {
    v47 = 0;
    if (v44 >> 62 != 1)
      goto LABEL_12;
    v48 = (uint64_t *)((v44 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v48 = (uint64_t *)(v44 + 64);
  }
  v47 = *v48;
  result = swift_retain_n();
LABEL_12:
  if (__OFADD__(v47, 1))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v89 = v43;
  v46[8] = v47 + 1;
  swift_retain();
  swift_release();
  v54 = *(_QWORD *)(v42 + 40);
  *(_QWORD *)(v42 + 40) = v46;
  v57 = type metadata accessor for _PlistDecodingStorage(0, v11, v55, v56);
  swift_retain();
  specialized _PlistDecodingStorage.push(container:)(v41, v57);
  swift_retain();
  v58 = v95;
  _PlistDecoder.unkeyedContainer()(v92);
  v95 = v58;
  if (v58)
  {
    swift_release();
    *(_QWORD *)(v42 + 40) = v54;
    swift_retain();
    swift_release();
    v59 = swift_bridgeObjectRetain();
    v60 = v11;
    v61 = MEMORY[0x186DA4B68](v59, v11);
    result = swift_bridgeObjectRelease();
    if (v61)
    {
      v62 = type metadata accessor for Array();
      MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF20], v62);
      MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF58], v62);
      v63 = v91;
      RangeReplaceableCollection<>.removeLast()();
      v64 = *(void (**)(char *, uint64_t))(v94 + 8);
      v64(v63, v60);
      swift_release();
      v64((char *)v41, v60);
      swift_release();
      return swift_release();
    }
    goto LABEL_21;
  }
  v78 = v12;
  swift_release();
  *(_QWORD *)(v42 + 40) = v54;
  swift_retain();
  swift_release();
  v65 = swift_bridgeObjectRetain();
  v66 = v11;
  v67 = MEMORY[0x186DA4B68](v65, v11);
  result = swift_bridgeObjectRelease();
  if (!v67)
  {
LABEL_22:
    __break(1u);
    return result;
  }
  v68 = type metadata accessor for Array();
  MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF20], v68);
  MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF58], v68);
  v69 = v91;
  RangeReplaceableCollection<>.removeLast()();
  v70 = v94;
  v71 = *(void (**)(char *, uint64_t))(v94 + 8);
  v71(v69, v66);
  swift_release();
  swift_release();
  swift_release();
  ++*(_QWORD *)(v90 + v89);
  v72 = v86;
  (*(void (**)(char *, uint64_t))(v79 + 8))(v86, v78);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v70 + 56))(v72, 1, 1, v66);
  return ((uint64_t (*)(uint64_t, uint64_t))v71)(v41, v66);
}

uint64_t _PlistUnkeyedDecodingContainer.superDecoder()@<X0>(int *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, __n128);
  int v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char **v46;
  void (*v47)(char *, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v69 = a2;
  v75 = *((_QWORD *)a1 - 1);
  MEMORY[0x1E0C80A78](a1);
  v74 = (char *)&v65 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v4 + 16);
  v5 = *(_QWORD *)(v4 + 24);
  swift_getAssociatedTypeWitness();
  v80 = v6;
  v81 = v5;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = type metadata accessor for Optional();
  v70 = *(_QWORD *)(v9 - 8);
  v71 = v9;
  MEMORY[0x1E0C80A78](v9);
  v77 = (char *)&v65 - v10;
  v78 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v79 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](v11);
  v73 = (char *)&v65 - v12;
  v13 = swift_getAssociatedTypeWitness();
  v14 = type metadata accessor for Optional();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v65 - v16;
  v18 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v19);
  v72 = (char *)&v65 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v21);
  v83 = (uint64_t)&v65 - v23;
  v24 = v84;
  v25 = *(void (**)(char *, __n128))(v15 + 16);
  v76 = (char *)(v84 + a1[10]);
  v25(v17, v22);
  v85 = v18;
  v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1, v13);
  v82 = v13;
  v68 = v15;
  if (v26 != 1)
  {
    v38 = v17;
    v39 = v14;
    goto LABEL_5;
  }
  v66 = *(void (**)(char *, uint64_t))(v15 + 8);
  v67 = v14;
  v66(v17, v14);
  v27 = v24;
  swift_getAssociatedTypeWitness();
  v28 = swift_getAssociatedConformanceWitness();
  v29 = *(void (**)(uint64_t, uint64_t))(v28 + 16);
  v30 = swift_checkMetadataState();
  v31 = v77;
  v29(v30, v28);
  v32 = v78;
  v15 = v79;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v31, 1, v79) == 1)
  {
    (*(void (**)(char *, uint64_t))(v70 + 8))(v31, v71);
    v33 = v74;
    v34 = v75;
    (*(void (**)(char *, uint64_t, int *))(v75 + 16))(v74, v27, a1);
    type metadata accessor for DecodingError();
    v35 = swift_allocError();
    specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:)((uint64_t)a1, v36);
    (*(void (**)(char *, int *))(v34 + 8))(v33, a1);
    v86 = v35;
    return swift_willThrow();
  }
  v39 = v27;
  v43 = v73;
  (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v73, v31, v15);
  v47 = *(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 80);
  swift_unknownObjectRetain();
  v48 = swift_checkMetadataState();
  v38 = v72;
  v49 = v86;
  v47(v43, v48, AssociatedConformanceWitness);
  v86 = v49;
  if (v49)
  {
    (*(void (**)(char *, uint64_t))(v32 + 8))(v43, v15);
    return swift_unknownObjectRelease();
  }
  while (1)
  {
    v24 = v39;
    (*(void (**)(char *, uint64_t))(v32 + 8))(v43, v15);
    swift_unknownObjectRelease();
    v63 = v76;
    v39 = v67;
    v66(v76, v67);
    v64 = v85;
    v13 = v82;
    (*(void (**)(char *, char *, uint64_t))(v85 + 16))(v63, v38, v82);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v63, 0, 1, v13);
LABEL_5:
    (*(void (**)(uint64_t, char *, uint64_t))(v85 + 32))(v83, v38, v13);
    v40 = *(_QWORD *)(*(_QWORD *)v24 + 24);
    v41 = *(_QWORD *)(*(_QWORD *)v24 + 32);
    v32 = a1[12];
    v42 = *(_QWORD *)(v24 + a1[13]);
    v43 = *(char **)(v24 + v32);
    v45 = swift_allocObject();
    *(_QWORD *)(v45 + 16) = v43;
    *(_QWORD *)(v45 + 24) = v42;
    if (v42 >> 62)
      break;
    v46 = (char **)(v42 + 64);
LABEL_11:
    v38 = *v46;
    swift_retain();
    v50 = (uint64_t)(v38 + 1);
    if (!__OFADD__(v38, 1))
      goto LABEL_12;
    __break(1u);
  }
  if (v42 >> 62 == 1)
  {
    v46 = (char **)((v42 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    goto LABEL_11;
  }
  v50 = 1;
LABEL_12:
  *(_QWORD *)(v45 + 32) = v50;
  v51 = type metadata accessor for _PlistDecoder(0, v80, v81, v44);
  v52 = swift_allocObject();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  v53 = v45 | 0x4000000000000000;
  v54 = v86;
  _PlistDecoder.init(referencing:options:codingPathNode:)(v40, v41, v53);
  v86 = v54;
  if (v54)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v85 + 8))(v83, v82);
  v57 = v82;
  v58 = type metadata accessor for _PlistDecodingStorage(0, v82, v55, v56);
  v59 = v83;
  specialized _PlistDecodingStorage.push(container:)(v83, v58);
  *(_QWORD *)(v84 + v32) = v43 + 1;
  v60 = v76;
  (*(void (**)(char *, uint64_t))(v68 + 8))(v76, v39);
  v61 = v85;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v85 + 56))(v60, 1, 1, v57);
  v62 = v69;
  v69[3] = v51;
  v62[4] = MEMORY[0x186DA9D64](&protocol conformance descriptor for _PlistDecoder<A>, v51);
  *v62 = v52;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v61 + 8))(v59, v57);
}

uint64_t protocol witness for UnkeyedDecodingContainer.codingPath.getter in conformance _PlistUnkeyedDecodingContainer<A>(uint64_t a1)
{
  uint64_t v1;

  return _CodingPathNode.path.getter(*(_QWORD *)(v1 + *(int *)(a1 + 52)));
}

uint64_t protocol witness for UnkeyedDecodingContainer.count.getter in conformance _PlistUnkeyedDecodingContainer<A>(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 44));
}

uint64_t protocol witness for UnkeyedDecodingContainer.currentIndex.getter in conformance _PlistUnkeyedDecodingContainer<A>(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 48));
}

BOOL protocol witness for UnkeyedDecodingContainer.decodeNil() in conformance _PlistUnkeyedDecodingContainer<A>()
{
  return _PlistUnkeyedDecodingContainer.decodeNil()();
}

uint64_t protocol witness for UnkeyedDecodingContainer.decode(_:) in conformance _PlistUnkeyedDecodingContainer<A>(uint64_t a1)
{
  return _PlistUnkeyedDecodingContainer.decode(_:)(a1) & 1;
}

{
  return _PlistUnkeyedDecodingContainer.decode(_:)(a1, (uint64_t (*)(char *, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:), (uint64_t)specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:));
}

{
  return _PlistUnkeyedDecodingContainer.decode(_:)(a1, (uint64_t (*)(char *, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:), (uint64_t)specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:));
}

{
  return _PlistUnkeyedDecodingContainer.decode(_:)(a1, (uint64_t (*)(char *, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:), (uint64_t)specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:));
}

{
  return _PlistUnkeyedDecodingContainer.decode(_:)(a1, (uint64_t (*)(char *, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:), (uint64_t)specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:));
}

{
  return _PlistUnkeyedDecodingContainer.decode(_:)(a1, (uint64_t (*)(char *, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:), (uint64_t)specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:));
}

{
  return _PlistUnkeyedDecodingContainer.decode(_:)(a1, (uint64_t (*)(char *, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:), (uint64_t)specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:));
}

{
  return _PlistUnkeyedDecodingContainer.decode(_:)(a1, (uint64_t (*)(char *, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:), (uint64_t)specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:));
}

{
  return _PlistUnkeyedDecodingContainer.decode(_:)(a1, (uint64_t (*)(char *, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:), (uint64_t)specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:));
}

{
  return _PlistUnkeyedDecodingContainer.decode(_:)(a1, (uint64_t (*)(char *, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:), (uint64_t)specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:));
}

{
  return _PlistUnkeyedDecodingContainer.decode(_:)(a1, (uint64_t (*)(char *, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t))specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:), (uint64_t)specialized _PlistUnkeyedDecodingContainer.errorForEndOfContainer<A>(type:));
}

_QWORD *protocol witness for UnkeyedDecodingContainer.decode(_:) in conformance _PlistUnkeyedDecodingContainer<A>(uint64_t a1)
{
  return _PlistUnkeyedDecodingContainer.decode(_:)(a1);
}

double protocol witness for UnkeyedDecodingContainer.decode(_:) in conformance _PlistUnkeyedDecodingContainer<A>(uint64_t a1)
{
  return _PlistUnkeyedDecodingContainer.decode(_:)(a1);
}

float protocol witness for UnkeyedDecodingContainer.decode(_:) in conformance _PlistUnkeyedDecodingContainer<A>(uint64_t a1)
{
  return _PlistUnkeyedDecodingContainer.decode(_:)(a1);
}

uint64_t protocol witness for UnkeyedDecodingContainer.decode<A>(_:) in conformance _PlistUnkeyedDecodingContainer<A>@<X0>(ValueMetadata *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X8>)
{
  return _PlistUnkeyedDecodingContainer.decode<A>(_:)(a1, a4, a2, a3, a5);
}

uint64_t protocol witness for UnkeyedDecodingContainer.nestedContainer<A>(keyedBy:) in conformance _PlistUnkeyedDecodingContainer<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X8>)
{
  return _PlistUnkeyedDecodingContainer.nestedContainer<A>(keyedBy:)(a1, a4, a2, a3, a5);
}

uint64_t protocol witness for UnkeyedDecodingContainer.nestedUnkeyedContainer() in conformance _PlistUnkeyedDecodingContainer<A>@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  return _PlistUnkeyedDecodingContainer.nestedUnkeyedContainer()(a1, a2);
}

uint64_t protocol witness for UnkeyedDecodingContainer.superDecoder() in conformance _PlistUnkeyedDecodingContainer<A>@<X0>(int *a1@<X0>, uint64_t *a2@<X8>)
{
  return _PlistUnkeyedDecodingContainer.superDecoder()(a1, a2);
}

uint64_t specialized _PlistDecoder.unwrapBool<A>(from:for:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t inited;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v22;
  char v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v25 = a3;
  v26 = a4;
  v27 = a5;
  v28 = a6;
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a8 + 40))(a1, a7, a8) & 1) != 0)
  {
    v12 = type metadata accessor for DecodingError();
    swift_allocError();
    v14 = v13;
    *v13 = MEMORY[0x1E0DEAFA0];
    v15 = v28;
    if (v28 == 255)
    {
      _CodingPathNode.path.getter(a2);
    }
    else
    {
      v17 = v26;
      v16 = v27;
      v18 = v25;
      outlined copy of _CodingKey(v25, v26, v27, v28);
      outlined copy of _CodingKey(v25, v26, v27, v28);
      _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      *(_QWORD *)(inited + 56) = &type metadata for _CodingKey;
      *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      v20 = swift_allocObject();
      *(_QWORD *)(inited + 32) = v20;
      *(_QWORD *)(v20 + 16) = v18;
      *(_QWORD *)(v20 + 24) = v17;
      *(_QWORD *)(v20 + 32) = v16;
      *(_BYTE *)(v20 + 40) = v15;
      specialized Array.append<A>(contentsOf:)(inited);
      outlined consume of _CodingKey?(v18, v17, v16, v15);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v14, *MEMORY[0x1E0DEC460], v12);
    v23 = swift_willThrow();
  }
  else
  {
    v21 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a8 + 48);
    v22 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    v23 = v21(a1, a2, &v25, &type metadata for _CodingKey, v22, a7, a8);
  }
  return v23 & 1;
}

uint64_t sub_181DF4B0C()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_181DF4B3C()
{
  uint64_t v0;

  outlined consume of _CodingKey(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  return swift_deallocObject();
}

uint64_t outlined consume of _CodingKey?(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 != -1)
    return outlined consume of _CodingKey(a1, a2, a3, a4);
  return a1;
}

uint64_t destroy for _PlistKeyedDecodingContainer()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

_QWORD *initializeBufferWithCopyOfBuffer for _PlistKeyedDecodingContainer(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for _PlistKeyedDecodingContainer(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for _PlistKeyedDecodingContainer(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  return a1;
}

void type metadata accessor for _PlistKeyedDecodingContainer()
{
  JUMPOUT(0x186DA9CBCLL);
}

uint64_t type metadata completion function for _PlistUnkeyedDecodingContainer()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _PlistUnkeyedDecodingContainer(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  int v15;
  uint64_t v16;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  void *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = v5;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = swift_getAssociatedTypeWitness();
  v9 = a2;
  v10 = v8;
  v11 = *(_QWORD *)(v8 - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v13 = v7 + v12;
  if (*(_DWORD *)(v11 + 84))
    v14 = *(_QWORD *)(v11 + 64);
  else
    v14 = *(_QWORD *)(v11 + 64) + 1;
  v15 = (*(_DWORD *)(v11 + 80) | v5) & 0x100000;
  v16 = *v9;
  *a1 = *v9;
  if ((v12 | (unint64_t)v5) > 7
    || v15 != 0
    || ((((((v13 + ((v5 + 8) & ~(unint64_t)v5)) & ~v12) + v14 + 23) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8)
     + 8 > 0x18)
  {
    v19 = (uint64_t *)(v16
                    + (((v12 | v5) & 0xF8 ^ 0x1F8) & ((v12 | v5) + 16)));
  }
  else
  {
    v20 = ~v12;
    v21 = ((unint64_t)a1 + v6 + 8) & ~v6;
    v22 = ((unint64_t)v9 + v6 + 8) & ~v6;
    v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    swift_retain();
    v23(v21, v22, AssociatedTypeWitness);
    v24 = (void *)((v21 + v13) & v20);
    v25 = (v22 + v13) & v20;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))((v22 + v13) & v20, 1, v10))
    {
      memcpy(v24, (const void *)((v22 + v13) & v20), v14);
    }
    else
    {
      (*(void (**)(void *, uint64_t, uint64_t))(v11 + 16))(v24, (v22 + v13) & v20, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v24, 0, 1, v10);
    }
    v26 = ((unint64_t)v24 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
    v27 = (v25 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
    v28 = *(_QWORD *)v27;
    *(_BYTE *)(v26 + 8) = *(_BYTE *)(v27 + 8);
    *(_QWORD *)v26 = v28;
    v29 = (_QWORD *)(((unint64_t)v24 + v14 + 23) & 0xFFFFFFFFFFFFF8);
    v30 = (_QWORD *)((v25 + v14 + 23) & 0xFFFFFFFFFFFFF8);
    *v29 = *v30;
    *(_QWORD *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFF8);
    v19 = a1;
  }
  swift_retain();
  return v19;
}

uint64_t destroy for _PlistUnkeyedDecodingContainer(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  swift_release();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = (a1 + *(unsigned __int8 *)(v3 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v4, AssociatedTypeWitness);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (v4 + v5 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(v8, 1, v6))
    (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v8, v6);
  return swift_release();
}

_QWORD *initializeWithCopy for _PlistUnkeyedDecodingContainer(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int v17;
  size_t v18;
  size_t v19;
  size_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;

  *a1 = *a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  swift_retain();
  v9(v7, v8, AssociatedTypeWitness);
  v10 = *(_QWORD *)(v5 + 64);
  v11 = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = v10 + v13;
  v15 = (char *)((v10 + v13 + v7) & ~v13);
  v16 = (char *)((v14 + v8) & ~v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v16, 1, v11))
  {
    v17 = *(_DWORD *)(v12 + 84);
    v18 = *(_QWORD *)(v12 + 64);
    if (v17)
      v19 = v18;
    else
      v19 = v18 + 1;
    memcpy(v15, v16, v19);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v16, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v15, 0, 1, v11);
    v17 = *(_DWORD *)(v12 + 84);
    v18 = *(_QWORD *)(v12 + 64);
  }
  if (v17)
    v20 = v18;
  else
    v20 = v18 + 1;
  v21 = &v15[v20];
  v22 = &v16[v20];
  v23 = (unint64_t)(v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = (unint64_t)(v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v25 = *(_QWORD *)v24;
  *(_BYTE *)(v23 + 8) = *(_BYTE *)(v24 + 8);
  *(_QWORD *)v23 = v25;
  v26 = (_QWORD *)((unint64_t)(v21 + 23) & 0xFFFFFFFFFFFFF8);
  v27 = (_QWORD *)((unint64_t)(v22 + 23) & 0xFFFFFFFFFFFFF8);
  *v26 = *v27;
  *(_QWORD *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for _PlistUnkeyedDecodingContainer(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  size_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  _QWORD *v24;
  _QWORD *v25;

  *a1 = *a2;
  swift_retain();
  swift_release();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(v7, v8, AssociatedTypeWitness);
  v9 = *(_QWORD *)(v5 + 64);
  v10 = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (char *)((v9 + v12 + v7) & ~v12);
  v14 = (char *)((v9 + v12 + v8) & ~v12);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  LODWORD(v7) = v15(v13, 1, v10);
  v16 = v15(v14, 1, v10);
  if ((_DWORD)v7)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, v14, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v10);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v13, v14, v10);
      goto LABEL_10;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  if (*(_DWORD *)(v11 + 84))
    v17 = *(_QWORD *)(v11 + 64);
  else
    v17 = *(_QWORD *)(v11 + 64) + 1;
  memcpy(v13, v14, v17);
LABEL_10:
  if (*(_DWORD *)(v11 + 84))
    v18 = *(_QWORD *)(v11 + 64);
  else
    v18 = *(_QWORD *)(v11 + 64) + 1;
  v19 = &v13[v18];
  v20 = &v14[v18];
  v21 = (unint64_t)(v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = (unint64_t)(v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = *(_BYTE *)(v22 + 8);
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *(_BYTE *)(v21 + 8) = v23;
  v24 = (_QWORD *)((unint64_t)(v19 + 23) & 0xFFFFFFFFFFFFF8);
  v25 = (_QWORD *)((unint64_t)(v20 + 23) & 0xFFFFFFFFFFFFF8);
  *v24 = *v25;
  *(_QWORD *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *initializeWithTake for _PlistUnkeyedDecodingContainer(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int v16;
  uint64_t v17;
  size_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;

  *a1 = *a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v7, v8, AssociatedTypeWitness);
  v9 = *(_QWORD *)(v5 + 64);
  v10 = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = v9 + v12;
  v14 = (char *)((v9 + v12 + v7) & ~v12);
  v15 = (char *)((v13 + v8) & ~v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v15, 1, v10))
  {
    v16 = *(_DWORD *)(v11 + 84);
    v17 = *(_QWORD *)(v11 + 64);
    if (v16)
      v18 = *(_QWORD *)(v11 + 64);
    else
      v18 = v17 + 1;
    memcpy(v14, v15, v18);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v15, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v10);
    v16 = *(_DWORD *)(v11 + 84);
    v17 = *(_QWORD *)(v11 + 64);
  }
  if (v16)
    v19 = v17;
  else
    v19 = v17 + 1;
  v20 = &v14[v19];
  v21 = &v15[v19];
  v22 = (unint64_t)(v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = (unint64_t)(v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = *(_QWORD *)v23;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  *(_QWORD *)v22 = v24;
  v25 = (_QWORD *)((unint64_t)(v20 + 23) & 0xFFFFFFFFFFFFF8);
  v26 = (_QWORD *)((unint64_t)(v21 + 23) & 0xFFFFFFFFFFFFF8);
  *v25 = *v26;
  *(_QWORD *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *assignWithTake for _PlistUnkeyedDecodingContainer(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  size_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  _QWORD *v24;
  _QWORD *v25;

  *a1 = *a2;
  swift_release();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(v7, v8, AssociatedTypeWitness);
  v9 = *(_QWORD *)(v5 + 64);
  v10 = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (char *)((v9 + v12 + v7) & ~v12);
  v14 = (char *)((v9 + v12 + v8) & ~v12);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  LODWORD(v7) = v15(v13, 1, v10);
  v16 = v15(v14, 1, v10);
  if ((_DWORD)v7)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v14, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v10);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v13, v14, v10);
      goto LABEL_10;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  if (*(_DWORD *)(v11 + 84))
    v17 = *(_QWORD *)(v11 + 64);
  else
    v17 = *(_QWORD *)(v11 + 64) + 1;
  memcpy(v13, v14, v17);
LABEL_10:
  if (*(_DWORD *)(v11 + 84))
    v18 = *(_QWORD *)(v11 + 64);
  else
    v18 = *(_QWORD *)(v11 + 64) + 1;
  v19 = &v13[v18];
  v20 = &v14[v18];
  v21 = (unint64_t)(v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = (unint64_t)(v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = *(_BYTE *)(v22 + 8);
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *(_BYTE *)(v21 + 8) = v23;
  v24 = (_QWORD *)((unint64_t)(v19 + 23) & 0xFFFFFFFFFFFFF8);
  v25 = (_QWORD *)((unint64_t)(v20 + 23) & 0xFFFFFFFFFFFFF8);
  *v24 = *v25;
  *(_QWORD *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for _PlistUnkeyedDecodingContainer(uint64_t *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  unsigned int v22;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  v7 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (!v8)
    v9 = 0;
  if (v6 <= v9)
    v10 = v9;
  else
    v10 = v6;
  if (v10 <= 0x7FFFFFFF)
    v11 = 0x7FFFFFFF;
  else
    v11 = v10;
  if (v8)
    v12 = 23;
  else
    v12 = 24;
  if (!a2)
    return 0;
  v13 = *(unsigned __int8 *)(v5 + 80);
  v14 = *(_QWORD *)(v5 + 64);
  v15 = *(unsigned __int8 *)(v7 + 80);
  if (v11 < a2)
  {
    if (((((((v12 + *(_QWORD *)(v7 + 64) + ((v14 + v15 + ((v13 + 8) & ~v13)) & ~v15)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
         + 8) & 0xFFFFFFF8) != 0)
      v16 = 2;
    else
      v16 = a2 - v11 + 1;
    if (v16 >= 0x10000)
      v17 = 4;
    else
      v17 = 2;
    if (v16 < 0x100)
      v17 = 1;
    if (v16 >= 2)
      v18 = v17;
    else
      v18 = 0;
    __asm { BR              X0 }
  }
  if ((v10 & 0x80000000) != 0)
  {
    v21 = ((unint64_t)a1 + v13 + 8) & ~v13;
    if ((_DWORD)v6 == v11)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v21, v6, AssociatedTypeWitness);
    if (v8 >= 2)
    {
      v22 = (*(uint64_t (**)(uint64_t))(v7 + 48))((v21 + v14 + v15) & ~v15);
      if (v22 >= 2)
        return v22 - 1;
      else
        return 0;
    }
    return 0;
  }
  v19 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v19) = -1;
  return (v19 + 1);
}

void storeEnumTagSinglePayload for _PlistUnkeyedDecodingContainer(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = 0u;
  v9 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v10 = *(_DWORD *)(v9 + 84);
  v11 = v10 - 1;
  if (!v10)
    v11 = 0;
  if (v7 <= v11)
    v12 = v11;
  else
    v12 = v7;
  if (v12 <= 0x7FFFFFFF)
    v13 = 0x7FFFFFFF;
  else
    v13 = v12;
  v14 = 23;
  if (!v10)
    v14 = 24;
  if (v13 < a3)
  {
    if ((((((_DWORD)v14
           + *(_DWORD *)(v9 + 64)
           + ((*(_DWORD *)(v6 + 64)
             + *(unsigned __int8 *)(v9 + 80)
             + ((*(unsigned __int8 *)(v6 + 80) + 8) & ~*(unsigned __int8 *)(v6 + 80))) & ~*(unsigned __int8 *)(v9 + 80))) & 0xFFFFFFF8)
         + 15) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v15 = a3 - v13 + 1;
    else
      v15 = 2;
    if (v15 >= 0x10000)
      v16 = 4;
    else
      v16 = 2;
    if (v15 < 0x100)
      v16 = 1;
    if (v15 >= 2)
      v8 = v16;
    else
      v8 = 0;
  }
  if (a2 > v13)
  {
    if ((((((_DWORD)v14
           + *(_DWORD *)(v9 + 64)
           + ((*(_DWORD *)(v6 + 64)
             + *(unsigned __int8 *)(v9 + 80)
             + ((*(unsigned __int8 *)(v6 + 80) + 8) & ~*(unsigned __int8 *)(v6 + 80))) & ~*(unsigned __int8 *)(v9 + 80))) & 0xFFFFFFF8)
         + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      v17 = ~v13 + a2;
      bzero(a1, ((((v14+ *(_QWORD *)(v9 + 64)+ ((*(_QWORD *)(v6 + 64)+ *(unsigned __int8 *)(v9 + 80)+ ((*(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 8);
      *a1 = v17;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X0 }
}

void sub_181DF5EC0(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;

  *((_BYTE *)v10 + v14) = 0;
  if ((_DWORD)v11)
  {
    if (v6 < 0)
    {
      v17 = ((unint64_t)v10 + v7 + 8) & v9;
      if ((_DWORD)v13 == v3)
      {
        v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
        v19 = v11;
        a1 = v13;
        a2 = v12;
      }
      else
      {
        if (a1 < 2)
          return;
        v17 = (v17 + v5 + v4) & v8;
        v19 = (v11 + 1);
        v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 56);
      }
      v18(v17, v19, a1, a2);
      return;
    }
    if ((v11 & 0x80000000) != 0)
      v16 = v11 ^ 0x80000000;
    else
      v16 = (v11 - 1);
    *v10 = v16;
  }
}

uint64_t type metadata accessor for _PlistUnkeyedDecodingContainer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _PlistUnkeyedDecodingContainer);
}

uint64_t associated type witness table accessor for KeyedDecodingContainerProtocol.Key : CodingKey in _PlistKeyedDecodingContainer<A, B>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 32);
}

uint64_t sub_181DF5F9C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t specialized _PlistDecoder.unwrapBool<A>(from:for:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  void (*v25)(char *, uint64_t);
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t inited;
  uint64_t v30;
  uint64_t *boxed_opaque_existential_1;
  char *v32;
  void (*v33)(char *, uint64_t);
  _QWORD *v34;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;

  v43 = a3;
  v46 = *MEMORY[0x1E0C80C00];
  v42 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v41 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Optional();
  v40 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v36 - v19;
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(a6 + 40))(a1, a4, a6, v18) & 1) != 0)
  {
    v37 = a7;
    v38 = a2;
    v21 = type metadata accessor for DecodingError();
    swift_allocError();
    v39 = v22;
    *v22 = MEMORY[0x1E0DEAFA0];
    v23 = v40;
    v24 = *(void (**)(char *, uint64_t, uint64_t))(v40 + 16);
    v24(v20, v43, v14);
    v24(v16, (uint64_t)v20, v14);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v16, 1, a5) == 1)
    {
      v25 = *(void (**)(char *, uint64_t))(v23 + 8);
      v25(v16, v14);
      _CodingPathNode.path.getter(v38);
      v25(v20, v14);
    }
    else
    {
      v43 = v21;
      v27 = v42;
      (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v41, v16, a5);
      v28 = _CodingPathNode.path.getter(v38);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      v30 = v37;
      *(_QWORD *)(inited + 56) = a5;
      *(_QWORD *)(inited + 64) = v30;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      v32 = v41;
      (*(void (**)(uint64_t *, char *, uint64_t))(v27 + 16))(boxed_opaque_existential_1, v41, a5);
      v44 = v28;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v20, v14);
      v33 = *(void (**)(char *, uint64_t))(v27 + 8);
      v21 = v43;
      v33(v32, a5);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    v34 = v39;
    v44 = 0;
    v45 = 0xE000000000000000;
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v34, *MEMORY[0x1E0DEC460], v21);
    v26 = swift_willThrow();
  }
  else
  {
    v26 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 48))(a1, a2, v43, a5, a7, a4, a6);
  }
  return v26 & 1;
}

uint64_t protocol witness for SingleValueDecodingContainer.decode<A>(_:) in conformance _PlistDecoder<A>@<X0>(ValueMetadata *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return protocol witness for _PlistDecoderEntryPointProtocol.decode<A>(_:) in conformance _PlistDecoder<A>(a1, a2, a3, a4);
}

uint64_t Date.FormatString.hash(into:)()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t static Date.FormatString.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

Swift::Int Date.FormatString.hashValue.getter()
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatString()
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatString()
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

_QWORD *Date.FormatString.init(stringInterpolation:)@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = result[1];
  *a2 = *result;
  a2[1] = v2;
  return result;
}

uint64_t Date.FormatString.init(stringLiteral:)@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t countAndFlagsBits;
  Swift::String_optional v8;
  void *object;
  char v10;
  Swift::String_optional v11;
  unint64_t v12;
  unint64_t v13;
  Swift::String v14;
  Swift::String v15;

  v3 = a2;
  v4 = result;
  v6 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v6 = result & 0xFFFFFFFFFFFFLL;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v8 = String.Iterator.next()();
    countAndFlagsBits = v8.value._countAndFlagsBits;
    if (v8.value._object)
    {
      object = v8.value._object;
      do
      {
        if (countAndFlagsBits == 39 && object == (void *)0xE100000000000000)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v10 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            lazy protocol witness table accessor for type String and conformance String();
            lazy protocol witness table accessor for type String and conformance String();
            RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)();
            String.append(_:)(v15);
            swift_bridgeObjectRelease();
            v14._countAndFlagsBits = 39;
            v14._object = (void *)0xE100000000000000;
            String.append(_:)(v14);
            result = swift_bridgeObjectRelease();
            v4 = 39;
            v3 = 0xE100000000000000;
            goto LABEL_14;
          }
        }
        v11 = String.Iterator.next()();
        countAndFlagsBits = v11.value._countAndFlagsBits;
        object = v11.value._object;
      }
      while (v11.value._object);
    }
    swift_bridgeObjectRelease();
    result = String.count.getter();
    if (result + 0x4000000000000000 >= 0)
    {
      v4 = MEMORY[0x186DA4928](39, 0xE100000000000000, 2 * result);
      v13 = v12;
      result = swift_bridgeObjectRelease();
      v3 = v13;
      goto LABEL_14;
    }
    __break(1u);
  }
  else
  {
LABEL_14:
    *a3 = v4;
    a3[1] = v3;
  }
  return result;
}

void Date.FormatString.StringInterpolation.init(literalCapacity:interpolationCount:)(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
}

Swift::Void __swiftcall Date.FormatString.StringInterpolation.appendLiteral(_:)(Swift::String a1)
{
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v3;
  uint64_t v4;
  Swift::String_optional v5;
  void *v6;
  char v7;
  Swift::String_optional v8;
  uint64_t v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;

  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  v3 = HIBYTE(a1._object) & 0xF;
  if (((uint64_t)a1._object & 0x2000000000000000) == 0)
    v3 = a1._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (!v3)
  {
    swift_bridgeObjectRetain();
    goto LABEL_15;
  }
  swift_bridgeObjectRetain();
  v5 = String.Iterator.next()();
  v4 = v5.value._countAndFlagsBits;
  if (!v5.value._object)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    v9 = String.count.getter();
    if (v9 + 0x4000000000000000 >= 0)
    {
      countAndFlagsBits = MEMORY[0x186DA4928](39, 0xE100000000000000, 2 * v9);
      object = v10;
      goto LABEL_15;
    }
    __break(1u);
    return;
  }
  v6 = v5.value._object;
  while (1)
  {
    if (v4 == 39 && v6 == (void *)0xE100000000000000)
    {
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) == 0)
      break;
LABEL_7:
    v8 = String.Iterator.next()();
    v4 = v8.value._countAndFlagsBits;
    v6 = v8.value._object;
    if (!v8.value._object)
      goto LABEL_11;
  }
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type String and conformance String();
  lazy protocol witness table accessor for type String and conformance String();
  RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 39;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  countAndFlagsBits = 39;
  object = (void *)0xE100000000000000;
LABEL_15:
  v12._countAndFlagsBits = countAndFlagsBits;
  v12._object = object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
}

void Date.FormatString.StringInterpolation.appendInterpolation(era:)(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_181DF6864()
{
  Swift::String v0;

  v0._countAndFlagsBits = 1195853639;
  v0._object = (void *)0xE400000000000000;
  String.append(_:)(v0);
  return swift_bridgeObjectRelease();
}

uint64_t Date.FormatString.StringInterpolation.appendInterpolation(year:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = *(_QWORD *)result;
  switch(*(_BYTE *)(result + 8))
  {
    case 0:
      if (v1 >= 10)
        v1 = 10;
      if (v1 <= 1)
        v2 = 1;
      else
        v2 = v1;
      v3 = 121;
      goto LABEL_20;
    case 1:
      if (v1 >= 10)
        v1 = 10;
      if (v1 <= 1)
        v2 = 1;
      else
        v2 = v1;
      v3 = 114;
      goto LABEL_20;
    case 2:
      if (v1 >= 10)
        v1 = 10;
      if (v1 <= 1)
        v2 = 1;
      else
        v2 = v1;
      v3 = 117;
LABEL_20:
      v4 = MEMORY[0x186DA4928](v3, 0xE100000000000000, v2);
      v6 = v5;
      goto LABEL_27;
    case 3:
      if (v1)
        v4 = 31097;
      else
        v4 = 121;
      if (v1)
        v6 = 0xE200000000000000;
      else
        v6 = 0xE100000000000000;
LABEL_27:
      v7 = v6;
      String.append(_:)(*(Swift::String *)&v4);
      result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t Date.FormatString.StringInterpolation.appendInterpolation(yearForWeekOfYear:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  if ((*(_BYTE *)(result + 9) & 1) == 0)
  {
    v1 = *(_QWORD *)result;
    if ((*(_BYTE *)(result + 8) & 1) != 0)
    {
      if (v1)
        v3 = 22873;
      else
        v3 = 89;
      if (v1)
        v5 = 0xE200000000000000;
      else
        v5 = 0xE100000000000000;
    }
    else
    {
      if (v1 >= 10)
        v1 = 10;
      if (v1 <= 1)
        v2 = 1;
      else
        v2 = v1;
      v3 = MEMORY[0x186DA4928](89, 0xE100000000000000, v2);
      v5 = v4;
    }
    v6 = v5;
    String.append(_:)(*(Swift::String *)&v3);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void Date.FormatString.StringInterpolation.appendInterpolation(cyclicYear:)(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_181DF6A34()
{
  Swift::String v0;

  v0._countAndFlagsBits = 1431655765;
  v0._object = (void *)0xE400000000000000;
  String.append(_:)(v0);
  return swift_bridgeObjectRelease();
}

void Date.FormatString.StringInterpolation.appendInterpolation(quarter:)(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_181DF6AA0()
{
  Swift::String v0;

  v0._countAndFlagsBits = 20817;
  v0._object = (void *)0xE200000000000000;
  String.append(_:)(v0);
  return swift_bridgeObjectRelease();
}

void Date.FormatString.StringInterpolation.appendInterpolation(standaloneQuarter:)(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_181DF6B30()
{
  Swift::String v0;

  v0._countAndFlagsBits = 29041;
  v0._object = (void *)0xE200000000000000;
  String.append(_:)(v0);
  return swift_bridgeObjectRelease();
}

void Date.FormatString.StringInterpolation.appendInterpolation(month:)(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_181DF6BB4()
{
  Swift::String v0;

  v0._countAndFlagsBits = 19789;
  v0._object = (void *)0xE200000000000000;
  String.append(_:)(v0);
  return swift_bridgeObjectRelease();
}

void Date.FormatString.StringInterpolation.appendInterpolation(standaloneMonth:)(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_181DF6C44()
{
  Swift::String v0;

  v0._countAndFlagsBits = 19532;
  v0._object = (void *)0xE200000000000000;
  String.append(_:)(v0);
  return swift_bridgeObjectRelease();
}

void Date.FormatString.StringInterpolation.appendInterpolation(week:)(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_181DF6CC8()
{
  Swift::String v0;

  v0._countAndFlagsBits = 30583;
  v0._object = (void *)0xE200000000000000;
  String.append(_:)(v0);
  return swift_bridgeObjectRelease();
}

uint64_t Date.FormatString.StringInterpolation.appendInterpolation(day:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  if ((*(_BYTE *)(result + 9) & 1) == 0)
  {
    v1 = *(_QWORD *)result;
    if ((*(_BYTE *)(result + 8) & 1) != 0)
    {
      v6 = 0xE200000000000000;
      v7 = 25700;
      if (v1 != 1)
      {
        v7 = 70;
        v6 = 0xE100000000000000;
      }
      if (v1)
        v3 = v7;
      else
        v3 = 100;
      if (v1)
        v5 = v6;
      else
        v5 = 0xE100000000000000;
    }
    else
    {
      if (v1 >= 10)
        v1 = 10;
      if (v1 <= 1)
        v2 = 1;
      else
        v2 = v1;
      v3 = MEMORY[0x186DA4928](103, 0xE100000000000000, v2);
      v5 = v4;
    }
    v8 = v5;
    String.append(_:)(*(Swift::String *)&v3);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void Date.FormatString.StringInterpolation.appendInterpolation(dayOfYear:)(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_181DF6DC8()
{
  Swift::String v0;

  v0._countAndFlagsBits = 17476;
  v0._object = (void *)0xE200000000000000;
  String.append(_:)(v0);
  return swift_bridgeObjectRelease();
}

void Date.FormatString.StringInterpolation.appendInterpolation(weekday:)(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_181DF6E38()
{
  Swift::String v0;

  v0._countAndFlagsBits = 1162167621;
  v0._object = (void *)0xE400000000000000;
  String.append(_:)(v0);
  return swift_bridgeObjectRelease();
}

void Date.FormatString.StringInterpolation.appendInterpolation(standaloneWeekday:)(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_181DF6ED8()
{
  Swift::String v0;

  v0._countAndFlagsBits = 6513507;
  v0._object = (void *)0xE300000000000000;
  String.append(_:)(v0);
  return swift_bridgeObjectRelease();
}

void Date.FormatString.StringInterpolation.appendInterpolation(dayPeriod:)(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_181DF6F64()
{
  Swift::String v0;

  v0._countAndFlagsBits = 1633771873;
  v0._object = (void *)0xE400000000000000;
  String.append(_:)(v0);
  return swift_bridgeObjectRelease();
}

void Date.FormatString.StringInterpolation.appendInterpolation(hour:)(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_181DF7030()
{
  Swift::String v0;

  v0._countAndFlagsBits = 26728;
  v0._object = (void *)0xE200000000000000;
  String.append(_:)(v0);
  return swift_bridgeObjectRelease();
}

unsigned __int8 *Date.FormatString.StringInterpolation.appendInterpolation(minute:)(unsigned __int8 *result)
{
  int v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = *result;
  if (v1 != 2)
  {
    if ((v1 & 1) != 0)
      v2 = 28013;
    else
      v2 = 109;
    if ((v1 & 1) != 0)
      v3 = 0xE200000000000000;
    else
      v3 = 0xE100000000000000;
    v4 = v3;
    String.append(_:)(*(Swift::String *)&v2);
    return (unsigned __int8 *)swift_bridgeObjectRelease();
  }
  return result;
}

unsigned __int8 *Date.FormatString.StringInterpolation.appendInterpolation(second:)(unsigned __int8 *result)
{
  int v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = *result;
  if (v1 != 2)
  {
    if ((v1 & 1) != 0)
      v2 = 29555;
    else
      v2 = 115;
    if ((v1 & 1) != 0)
      v3 = 0xE200000000000000;
    else
      v3 = 0xE100000000000000;
    v4 = v3;
    String.append(_:)(*(Swift::String *)&v2);
    return (unsigned __int8 *)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t Date.FormatString.StringInterpolation.appendInterpolation(secondFraction:)(uint64_t result)
{
  int v1;
  Swift::String v2;

  v1 = *(unsigned __int8 *)(result + 8);
  if (v1 != 255)
  {
    v2._countAndFlagsBits = Date.FormatStyle.Symbol.SymbolType.SecondFractionOption.rawValue.getter(*(_QWORD *)result, v1 & 1);
    String.append(_:)(v2);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void Date.FormatString.StringInterpolation.appendInterpolation(timeZone:)(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_181DF71B4()
{
  Swift::String v0;

  v0._countAndFlagsBits = 2054847098;
  v0._object = (void *)0xE400000000000000;
  String.append(_:)(v0);
  return swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type Date.FormatString and conformance Date.FormatString()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatString and conformance Date.FormatString;
  if (!lazy protocol witness table cache variable for type Date.FormatString and conformance Date.FormatString)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatString, &type metadata for Date.FormatString);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatString and conformance Date.FormatString);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatString and conformance Date.FormatString;
  if (!lazy protocol witness table cache variable for type Date.FormatString and conformance Date.FormatString)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatString, &type metadata for Date.FormatString);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatString and conformance Date.FormatString);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatString and conformance Date.FormatString;
  if (!lazy protocol witness table cache variable for type Date.FormatString and conformance Date.FormatString)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatString, &type metadata for Date.FormatString);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatString and conformance Date.FormatString);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatString and conformance Date.FormatString;
  if (!lazy protocol witness table cache variable for type Date.FormatString and conformance Date.FormatString)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatString, &type metadata for Date.FormatString);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatString and conformance Date.FormatString);
  }
  return result;
}

void protocol witness for StringInterpolationProtocol.init(literalCapacity:interpolationCount:) in conformance Date.FormatString.StringInterpolation(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
}

void protocol witness for StringInterpolationProtocol.appendLiteral(_:) in conformance Date.FormatString.StringInterpolation(Swift::String *a1)
{
  Date.FormatString.StringInterpolation.appendLiteral(_:)(*a1);
}

unint64_t lazy protocol witness table accessor for type Date.FormatString.StringInterpolation and conformance Date.FormatString.StringInterpolation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatString.StringInterpolation and conformance Date.FormatString.StringInterpolation;
  if (!lazy protocol witness table cache variable for type Date.FormatString.StringInterpolation and conformance Date.FormatString.StringInterpolation)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatString.StringInterpolation, &type metadata for Date.FormatString.StringInterpolation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatString.StringInterpolation and conformance Date.FormatString.StringInterpolation);
  }
  return result;
}

uint64_t protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance Date.FormatString@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return Date.FormatString.init(stringLiteral:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), a2);
}

ValueMetadata *type metadata accessor for Date.FormatString()
{
  return &type metadata for Date.FormatString;
}

ValueMetadata *type metadata accessor for Date.FormatString.StringInterpolation()
{
  return &type metadata for Date.FormatString.StringInterpolation;
}

void base witness table accessor for Equatable in BufferViewIndex<A>()
{
  JUMPOUT(0x186DA9D64);
}

void BufferViewIndex.hash(into:)(int a1, Swift::UInt a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int BufferViewIndex.hashValue.getter(Swift::UInt a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance BufferViewIndex<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for BufferViewIndex<A>, a3);
  return static Strideable.== infix(_:_:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance BufferViewIndex<A>()
{
  Swift::UInt *v0;

  return BufferViewIndex.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance BufferViewIndex<A>(int a1)
{
  Swift::UInt *v1;

  BufferViewIndex.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance BufferViewIndex<A>()
{
  Swift::UInt *v0;
  char v2;

  Hasher.init(_seed:)();
  BufferViewIndex.hash(into:)((int)&v2, *v0);
  return Hasher._finalize()();
}

_QWORD *protocol witness for Strideable.distance(to:) in conformance BufferViewIndex<A>@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 72);
  if (v4)
  {
    v5 = *result - *v3;
    if (v5 != 0x8000000000000000 || v4 != -1)
    {
      *a3 = v5 / v4;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *protocol witness for Strideable.advanced(by:) in conformance BufferViewIndex<A>@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;

  *a3 = *v3 + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 72) * *result;
  return result;
}

uint64_t protocol witness for static Strideable._step(after:from:by:) in conformance BufferViewIndex<A>()
{
  return static Strideable._step(after:from:by:)();
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance BufferViewIndex<A>(_QWORD *a1, _QWORD *a2)
{
  return *a1 < *a2;
}

void base witness table accessor for Comparable in BufferViewIndex<A>()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t type metadata accessor for BufferViewIndex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BufferViewIndex);
}

uint64_t NSGrammaticalPartOfSpeech.morphunValue()(unint64_t a1)
{
  if (a1 < 0xF)
    return qword_182163718[a1];
  if (a1 == 15)
    return 0x6F4E7265706F7270;
  return 0;
}

uint64_t NSGrammaticalCase.morphunValue()(unint64_t a1)
{
  if (a1 < 0xF)
    return qword_182163808[a1];
  if (a1 == 15)
    return 0x656D757274736E69;
  if (a1 == 16)
    return 0x69746174696D6F63;
  return 0;
}

uint64_t NSMorphology.morphunConstraints()()
{
  void *v0;
  char v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v34;
  char v35;
  uint64_t v36;
  _BOOL8 v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  _QWORD *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  unint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  int64_t v63;
  unint64_t v64;
  int64_t v65;
  unint64_t v67;
  uint64_t v68;

  v1 = (char)v0;
  v68 = MEMORY[0x1E0DEE9E0];
  v2 = objc_msgSend(v0, sel_grammaticalGender);
  v3 = 0xE800000000000000;
  v4 = 0x656E696E696D6566;
  switch((unint64_t)v2)
  {
    case 0uLL:
      goto LABEL_7;
    case 1uLL:
      goto LABEL_6;
    case 2uLL:
      v4 = 0x6E696C756373616DLL;
      v3 = 0xE900000000000065;
      goto LABEL_6;
    case 3uLL:
      v3 = 0xE600000000000000;
      v4 = 0x72657475656ELL;
      goto LABEL_6;
    default:
      if (v2 != (id)4)
        goto LABEL_7;
      v3 = 0xE600000000000000;
      v4 = 0x6E6F6D6D6F63;
LABEL_6:
      objc_msgSend(v0, sel_grammaticalGender);
      specialized Dictionary.subscript.setter(v4, v3, 0x7265646E6567, 0xE600000000000000);
LABEL_7:
      v5 = (unint64_t)objc_msgSend(v0, sel_number) - 1;
      if (v5 <= 5 && ((0x3Du >> v5) & 1) != 0)
      {
        v6 = 8 * v5;
        v7 = *(_QWORD *)&aSingularplural[v6];
        v8 = *(_QWORD *)((char *)&unk_182163928 + v6);
        objc_msgSend(v0, sel_number);
        specialized Dictionary.subscript.setter(v7, v8, 0x746E756F63, 0xE500000000000000);
      }
      v9 = NSGrammaticalPartOfSpeech.morphunValue()((unint64_t)objc_msgSend(v0, sel_partOfSpeech));
      if (v10)
      {
        v11 = v9;
        v12 = v10;
        objc_msgSend(v0, sel_partOfSpeech);
        specialized Dictionary.subscript.setter(v11, v12, 7565168, 0xE300000000000000);
      }
      v13 = NSGrammaticalCase.morphunValue()((unint64_t)objc_msgSend(v0, sel_grammaticalCase));
      if (v14)
      {
        v15 = v13;
        v16 = v14;
        objc_msgSend(v0, sel_grammaticalCase);
        specialized Dictionary.subscript.setter(v15, v16, 1702060387, 0xE400000000000000);
      }
      v17 = objc_msgSend(v0, sel_determination);
      if (v17 == (id)1)
      {
        v18 = 0xEB00000000746E65;
        v19 = 0x646E657065646E69;
      }
      else
      {
        if (v17 != (id)2)
          goto LABEL_19;
        v18 = 0xE900000000000074;
        v19 = 0x6E65646E65706564;
      }
      objc_msgSend(v0, sel_determination);
      specialized Dictionary.subscript.setter(v19, v18, 0x6E696D7265746564, 0xED00006E6F697461);
LABEL_19:
      v20 = objc_msgSend(v0, sel_definiteness);
      if (!v20)
        goto LABEL_25;
      v21 = 0x6574696E69666564;
      if (v20 == (id)2)
      {
        v22 = 0xE800000000000000;
      }
      else
      {
        if (v20 != (id)1)
          goto LABEL_82;
        v22 = 0xEA00000000006574;
        v21 = 0x696E696665646E69;
      }
      objc_msgSend(v0, sel_definiteness);
      specialized Dictionary.subscript.setter(v21, v22, 0x6574696E69666564, 0xEC0000007373656ELL);
LABEL_25:
      v23 = (unint64_t)objc_msgSend(v0, sel_grammaticalPerson) - 1;
      if (v23 <= 2)
      {
        v24 = 8 * v23;
        v25 = *(_QWORD *)&aFirst_5[v24];
        v26 = *(_QWORD *)((char *)&unk_182163970 + v24);
        objc_msgSend(v0, sel_grammaticalPerson);
        specialized Dictionary.subscript.setter(v25, v26, 0x6E6F73726570, 0xE600000000000000);
      }
      v27 = (unint64_t)objc_msgSend(v0, sel_pronounType) - 1;
      if (v27 <= 2)
      {
        v28 = 8 * v27;
        v29 = *(_QWORD *)&aPersonalreflex[v28];
        v30 = *(_QWORD *)&aPersonalreflex[v28 + 24];
        objc_msgSend(v0, sel_pronounType);
        specialized Dictionary.subscript.setter(v29, v30, 0x546E756F6E6F7270, 0xEB00000000657079);
      }
      v31 = 0x766973756C636E69;
      v32 = objc_msgSend(v0, sel__clusivity);
      if (v32 == (id)1)
        goto LABEL_32;
      if (v32 == (id)2)
      {
        v31 = 0x766973756C637865;
LABEL_32:
        objc_msgSend(v0, sel__clusivity);
        specialized Dictionary.subscript.setter(v31, 0xE900000000000065, 0x7469766973756C63, 0xE900000000000079);
      }
      if (objc_msgSend(v0, sel__adjectival) != (id)1)
        return v68;
      objc_msgSend(v0, sel__adjectival);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v34 = specialized __RawDictionaryStorage.find<A>(_:)(0x76697463656A6461, 0xEA00000000006C61);
      v36 = *(_QWORD *)(v68 + 16);
      v37 = (v35 & 1) == 0;
      v38 = __OFADD__(v36, v37);
      v39 = v36 + v37;
      if (v38)
      {
        __break(1u);
        goto LABEL_44;
      }
      v1 = v35;
      if (*(_QWORD *)(v68 + 24) >= v39)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v40 = v68;
LABEL_41:
          if ((v1 & 1) != 0)
          {
LABEL_42:
            v42 = (_QWORD *)(*(_QWORD *)(v40 + 56) + 16 * v34);
            swift_bridgeObjectRelease();
            *v42 = 0x7461636964657270;
            v42[1] = 0xEB00000000657669;
LABEL_78:
            swift_bridgeObjectRelease();
            return v40;
          }
LABEL_77:
          specialized _NativeDictionary._insert(at:key:value:)(v34, 0x76697463656A6461, 0xEA00000000006C61, 0x7461636964657270, 0xEB00000000657669, (_QWORD *)v40);
          goto LABEL_78;
        }
LABEL_44:
        v67 = v34;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
        v43 = static _DictionaryStorage.copy(original:)();
        v40 = v43;
        if (*(_QWORD *)(v68 + 16))
        {
          v44 = (void *)(v43 + 64);
          v45 = v68 + 64;
          v46 = (unint64_t)((1 << *(_BYTE *)(v40 + 32)) + 63) >> 6;
          if (v40 != v68 || (unint64_t)v44 >= v45 + 8 * v46)
            memmove(v44, (const void *)(v68 + 64), 8 * v46);
          v47 = 0;
          *(_QWORD *)(v40 + 16) = *(_QWORD *)(v68 + 16);
          v48 = 1 << *(_BYTE *)(v68 + 32);
          v49 = -1;
          if (v48 < 64)
            v49 = ~(-1 << v48);
          v50 = v49 & *(_QWORD *)(v68 + 64);
          v51 = (unint64_t)(v48 + 63) >> 6;
          while (1)
          {
            if (v50)
            {
              v52 = __clz(__rbit64(v50));
              v50 &= v50 - 1;
              v53 = v52 | (v47 << 6);
            }
            else
            {
              v63 = v47 + 1;
              if (__OFADD__(v47, 1))
              {
                __break(1u);
                goto LABEL_81;
              }
              if (v63 >= v51)
                break;
              v64 = *(_QWORD *)(v45 + 8 * v63);
              ++v47;
              if (!v64)
              {
                v47 = v63 + 1;
                if (v63 + 1 >= v51)
                  break;
                v64 = *(_QWORD *)(v45 + 8 * v47);
                if (!v64)
                {
                  v47 = v63 + 2;
                  if (v63 + 2 >= v51)
                    break;
                  v64 = *(_QWORD *)(v45 + 8 * v47);
                  if (!v64)
                  {
                    v47 = v63 + 3;
                    if (v63 + 3 >= v51)
                      break;
                    v64 = *(_QWORD *)(v45 + 8 * v47);
                    if (!v64)
                    {
                      v47 = v63 + 4;
                      if (v63 + 4 >= v51)
                        break;
                      v64 = *(_QWORD *)(v45 + 8 * v47);
                      if (!v64)
                      {
                        v47 = v63 + 5;
                        if (v63 + 5 >= v51)
                          break;
                        v64 = *(_QWORD *)(v45 + 8 * v47);
                        if (!v64)
                        {
                          v47 = v63 + 6;
                          if (v63 + 6 >= v51)
                            break;
                          v64 = *(_QWORD *)(v45 + 8 * v47);
                          if (!v64)
                          {
                            v65 = v63 + 7;
                            if (v65 >= v51)
                              break;
                            v64 = *(_QWORD *)(v45 + 8 * v65);
                            if (!v64)
                            {
                              while (1)
                              {
                                v47 = v65 + 1;
                                if (__OFADD__(v65, 1))
                                  break;
                                if (v47 >= v51)
                                  goto LABEL_76;
                                v64 = *(_QWORD *)(v45 + 8 * v47);
                                ++v65;
                                if (v64)
                                  goto LABEL_75;
                              }
LABEL_81:
                              __break(1u);
LABEL_82:
                              type metadata accessor for NSGrammaticalDefiniteness(0);
                              _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
                              __break(1u);
                              JUMPOUT(0x181DF7EA4);
                            }
                            v47 = v65;
                          }
                        }
                      }
                    }
                  }
                }
              }
LABEL_75:
              v50 = (v64 - 1) & v64;
              v53 = __clz(__rbit64(v64)) + (v47 << 6);
            }
            v54 = 16 * v53;
            v55 = (uint64_t *)(*(_QWORD *)(v68 + 48) + v54);
            v57 = *v55;
            v56 = v55[1];
            v58 = (uint64_t *)(*(_QWORD *)(v68 + 56) + v54);
            v59 = *v58;
            v60 = v58[1];
            v61 = (_QWORD *)(*(_QWORD *)(v40 + 48) + v54);
            *v61 = v57;
            v61[1] = v56;
            v62 = (_QWORD *)(*(_QWORD *)(v40 + 56) + v54);
            *v62 = v59;
            v62[1] = v60;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
        }
LABEL_76:
        swift_bridgeObjectRelease();
        v34 = v67;
        if ((v1 & 1) != 0)
          goto LABEL_42;
        goto LABEL_77;
      }
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v39, isUniquelyReferenced_nonNull_native);
      v40 = v68;
      v34 = specialized __RawDictionaryStorage.find<A>(_:)(0x76697463656A6461, 0xEA00000000006C61);
      if ((v1 & 1) == (v41 & 1))
        goto LABEL_41;
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return v68;
  }
}

uint64_t NSMorphologyPronoun.morphunConstraints()()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  _QWORD *v13;
  int64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 v18;
  _OWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  _OWORD *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  _QWORD *v41;
  char *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  id v66;
  uint64_t v67;
  id v68;
  char *v69;
  _QWORD *v70;
  uint64_t v71;
  int64_t v72;
  int64_t v73;
  uint64_t v74;
  uint64_t v75;
  _OWORD *v76;
  _OWORD *v77;
  __int128 v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _OWORD *v94;
  _OWORD *v95;
  char *v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  unint64_t v128;
  unint64_t v129;
  int64_t v130;
  unint64_t v131;
  int64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  Swift::String v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  __int128 v140;
  char isUniquelyReferenced_nonNull_native;
  char v142;
  unint64_t v143;
  uint64_t v144;
  _BOOL8 v145;
  uint64_t v146;
  char v147;
  unint64_t v148;
  char v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  unint64_t v157;
  int64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  _QWORD *v173;
  int64_t v174;
  unint64_t v175;
  int64_t v176;
  int64_t v177;
  uint64_t result;
  uint64_t v179;
  int64_t v180;
  uint64_t v181;
  int64_t v182;
  void *v183;
  uint64_t v184;
  int64_t v185;
  int64_t v186;
  void *v187;
  uint64_t v188;
  _OWORD v189[2];

  v1 = objc_msgSend(v0, sel_morphology);
  v2 = objc_msgSend(v1, sel__morphunConstraints);

  v3 = MEMORY[0x1E0DEE9B8];
  if (MEMORY[0x1E0DEE9B8] + 8 == MEMORY[0x1E0DEA968])
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRetain();
    v4 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (v4)
      goto LABEL_38;
    v187 = v0;
    v5 = objc_msgSend(v2, sel_count);
    if (v5)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v6 = static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      v6 = MEMORY[0x1E0DEE9E0];
    }
    v9 = *(_QWORD **)(v6 + 48);
    v10 = *(_QWORD *)(v6 + 56);
    v11 = (_QWORD *)v6;
    swift_retain();
    v12 = (int64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v9, v10, v2, (uint64_t)v5);
    if (v12 < 0 || (uint64_t)v5 < v12)
      goto LABEL_152;
    v13 = v11;
    v11[2] = v12;
    if (v12)
    {
      v14 = v12 - 1;
      v15 = v11 + 8;
      while (1)
      {
        if (((*(_QWORD *)((char *)v15 + (((unint64_t)v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
          goto LABEL_14;
        v20 = (uint64_t *)(v13[6] + 16 * v14);
        v22 = *v20;
        v21 = v20[1];
        v23 = v13;
        swift_bridgeObjectRetain();
        v24 = specialized __RawDictionaryStorage.find<A>(_:)(v22, v21);
        LOBYTE(v22) = v25;
        swift_bridgeObjectRelease();
        if ((v22 & 1) != 0)
        {
          swift_arrayDestroy();
          swift_arrayDestroy();
          v26 = v23[2];
          v27 = __OFSUB__(v26, 1);
          v28 = v26 - 1;
          if (v27)
            goto LABEL_148;
          v13 = v23;
          v23[2] = v28;
          goto LABEL_14;
        }
        *(_QWORD *)((char *)v15 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
        if (v14 < (uint64_t)v24)
        {
          v13 = v11;
          *(_OWORD *)(v11[6] + 16 * v24) = *(_OWORD *)(v11[6] + 16 * v14);
          v16 = v11[7];
          v17 = (_OWORD *)(v16 + 32 * v14);
          v18 = v17[1];
          v19 = (_OWORD *)(v16 + 32 * v24);
          *v19 = *v17;
          v19[1] = v18;
LABEL_14:
          if (--v14 < 0)
            goto LABEL_37;
        }
        else
        {
          v13 = v11;
          if (v24 == v14)
            goto LABEL_14;
          v29 = v11[6];
          v30 = (uint64_t *)(v29 + 16 * v24);
          v31 = (uint64_t *)(v29 + 16 * v14);
          v32 = *v30;
          v33 = v30[1];
          v34 = v31[1];
          *v30 = *v31;
          v30[1] = v34;
          *v31 = v32;
          v31[1] = v33;
          v35 = v11[7];
          v36 = (_OWORD *)(v35 + 32 * v24);
          v37 = (_OWORD *)(v35 + 32 * v14);
          outlined init with take of Any(v36, v189);
          outlined init with take of Any(v37, v36);
          outlined init with take of Any(v189, v37);
          v13 = v11;
          if (v14 < 0)
            goto LABEL_37;
        }
      }
    }
    goto LABEL_37;
  }
  swift_unknownObjectRetain();
  v4 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v4)
    goto LABEL_38;
  v187 = v0;
  v7 = (char *)objc_msgSend(v2, sel_count);
  if (v7)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
    v8 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v8 = MEMORY[0x1E0DEE9E0];
  }
  v38 = *(char **)(v8 + 48);
  v39 = *(_QWORD *)(v8 + 56);
  v11 = (_QWORD *)v8;
  swift_retain();
  v40 = specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v38, v39, v2, (uint64_t)v7);
  if (((unint64_t)v40 & 0x8000000000000000) != 0 || (uint64_t)v7 < (uint64_t)v40)
    goto LABEL_153;
  v41 = v11;
  v11[2] = v40;
  if (v40)
  {
    v42 = v40 - 1;
    v43 = v11 + 8;
    while (1)
    {
      if (((*(_QWORD *)((char *)v43 + (((unint64_t)v42 >> 3) & 0xFFFFFFFFFFFFF8)) >> (char)v42) & 1) != 0)
        goto LABEL_29;
      v45 = (uint64_t *)(v41[6] + 16 * (_QWORD)v42);
      v47 = *v45;
      v46 = v45[1];
      v48 = v41;
      swift_bridgeObjectRetain();
      v49 = specialized __RawDictionaryStorage.find<A>(_:)(v47, v46);
      LOBYTE(v47) = v50;
      swift_bridgeObjectRelease();
      if ((v47 & 1) != 0)
      {
        swift_arrayDestroy();
        swift_arrayDestroy();
        v51 = v48[2];
        v27 = __OFSUB__(v51, 1);
        v52 = v51 - 1;
        if (v27)
          goto LABEL_149;
        v41 = v48;
        v48[2] = v52;
        goto LABEL_29;
      }
      *(_QWORD *)((char *)v43 + ((v49 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v49;
      if ((uint64_t)v42 < (uint64_t)v49)
      {
        v41 = v11;
        v44 = 16 * v49;
        *(_OWORD *)(v11[6] + v44) = *(_OWORD *)(v11[6] + 16 * (_QWORD)v42);
        *(_OWORD *)(v11[7] + v44) = *(_OWORD *)(v11[7] + 16 * (_QWORD)v42);
LABEL_29:
        if (((unint64_t)--v42 & 0x8000000000000000) != 0)
          break;
      }
      else
      {
        v41 = v11;
        if ((char *)v49 == v42)
          goto LABEL_29;
        v53 = v11[6];
        v54 = (uint64_t *)(v53 + 16 * v49);
        v55 = (uint64_t *)(v53 + 16 * (_QWORD)v42);
        v56 = *v54;
        v57 = v54[1];
        v58 = v55[1];
        *v54 = *v55;
        v54[1] = v58;
        *v55 = v56;
        v55[1] = v57;
        v59 = v11[7];
        v60 = (uint64_t *)(v59 + 16 * v49);
        v61 = (uint64_t *)(v59 + 16 * (_QWORD)v42);
        v62 = *v60;
        v63 = v60[1];
        v64 = v61[1];
        *v60 = *v61;
        v60[1] = v64;
        *v61 = v62;
        v61[1] = v63;
        if (((unint64_t)v42 & 0x8000000000000000) != 0)
          break;
      }
    }
  }
LABEL_37:
  swift_release();
  v4 = (uint64_t)v11;
  v3 = MEMORY[0x1E0DEE9B8];
  v0 = v187;
LABEL_38:
  v188 = v4;

  v65 = objc_msgSend(v0, sel_dependentMorphology);
  if (!v65)
    return v188;
  v183 = v65;
  v66 = objc_msgSend(v65, sel__morphunConstraints);
  if (v3 + 8 != MEMORY[0x1E0DEA968])
  {
    swift_unknownObjectRetain();
    v67 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (v67)
      goto LABEL_76;
    v69 = (char *)objc_msgSend(v66, sel_count);
    if (v69)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
      v67 = static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      v67 = MEMORY[0x1E0DEE9E0];
    }
    v96 = *(char **)(v67 + 48);
    v97 = *(_QWORD *)(v67 + 56);
    swift_retain();
    v98 = specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v96, v97, v66, (uint64_t)v69);
    if (((unint64_t)v98 & 0x8000000000000000) != 0 || (uint64_t)v69 < (uint64_t)v98)
      goto LABEL_155;
    *(_QWORD *)(v67 + 16) = v98;
    if (!v98)
    {
LABEL_75:
      swift_release();
      goto LABEL_76;
    }
    v99 = v98 - 1;
    v100 = v67 + 64;
    while (1)
    {
      if (((*(_QWORD *)(v100 + (((unint64_t)v99 >> 3) & 0xFFFFFFFFFFFFF8)) >> (char)v99) & 1) != 0)
        goto LABEL_67;
      v102 = (uint64_t *)(*(_QWORD *)(v67 + 48) + 16 * (_QWORD)v99);
      v103 = *v102;
      v104 = v102[1];
      swift_bridgeObjectRetain();
      v105 = specialized __RawDictionaryStorage.find<A>(_:)(v103, v104);
      v107 = v106;
      swift_bridgeObjectRelease();
      if ((v107 & 1) != 0)
      {
        swift_arrayDestroy();
        swift_arrayDestroy();
        v108 = *(_QWORD *)(v67 + 16);
        v27 = __OFSUB__(v108, 1);
        v109 = v108 - 1;
        if (v27)
          goto LABEL_151;
        *(_QWORD *)(v67 + 16) = v109;
        goto LABEL_67;
      }
      *(_QWORD *)(v100 + ((v105 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v105;
      if ((uint64_t)v99 < (uint64_t)v105)
      {
        v101 = 16 * v105;
        *(_OWORD *)(*(_QWORD *)(v67 + 48) + v101) = *(_OWORD *)(*(_QWORD *)(v67 + 48) + 16 * (_QWORD)v99);
        *(_OWORD *)(*(_QWORD *)(v67 + 56) + v101) = *(_OWORD *)(*(_QWORD *)(v67 + 56) + 16 * (_QWORD)v99);
LABEL_67:
        if (((unint64_t)--v99 & 0x8000000000000000) != 0)
          goto LABEL_75;
      }
      else
      {
        if ((char *)v105 == v99)
          goto LABEL_67;
        v110 = *(_QWORD *)(v67 + 48);
        v111 = (uint64_t *)(v110 + 16 * v105);
        v112 = (uint64_t *)(v110 + 16 * (_QWORD)v99);
        v113 = *v111;
        v114 = v111[1];
        v115 = v112[1];
        *v111 = *v112;
        v111[1] = v115;
        *v112 = v113;
        v112[1] = v114;
        v116 = *(_QWORD *)(v67 + 56);
        v117 = (uint64_t *)(v116 + 16 * v105);
        v118 = (uint64_t *)(v116 + 16 * (_QWORD)v99);
        v119 = *v117;
        v120 = v117[1];
        v121 = v118[1];
        *v117 = *v118;
        v117[1] = v121;
        *v118 = v119;
        v118[1] = v120;
        if (((unint64_t)v99 & 0x8000000000000000) != 0)
          goto LABEL_75;
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRetain();
  v67 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (!v67)
  {
    v68 = objc_msgSend(v66, sel_count);
    if (v68)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v67 = static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      v67 = MEMORY[0x1E0DEE9E0];
    }
    v70 = *(_QWORD **)(v67 + 48);
    v71 = *(_QWORD *)(v67 + 56);
    swift_retain();
    v72 = (int64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v70, v71, v66, (uint64_t)v68);
    if (v72 < 0 || (uint64_t)v68 < v72)
      goto LABEL_154;
    *(_QWORD *)(v67 + 16) = v72;
    if (v72)
    {
      v73 = v72 - 1;
      v74 = v67 + 64;
      while (1)
      {
        if (((*(_QWORD *)(v74 + (((unint64_t)v73 >> 3) & 0xFFFFFFFFFFFFF8)) >> v73) & 1) != 0)
          goto LABEL_52;
        v79 = (uint64_t *)(*(_QWORD *)(v67 + 48) + 16 * v73);
        v80 = *v79;
        v81 = v79[1];
        swift_bridgeObjectRetain();
        v82 = specialized __RawDictionaryStorage.find<A>(_:)(v80, v81);
        v84 = v83;
        swift_bridgeObjectRelease();
        if ((v84 & 1) != 0)
        {
          swift_arrayDestroy();
          swift_arrayDestroy();
          v85 = *(_QWORD *)(v67 + 16);
          v27 = __OFSUB__(v85, 1);
          v86 = v85 - 1;
          if (v27)
            goto LABEL_150;
          *(_QWORD *)(v67 + 16) = v86;
          goto LABEL_52;
        }
        *(_QWORD *)(v74 + ((v82 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v82;
        if (v73 < (uint64_t)v82)
        {
          *(_OWORD *)(*(_QWORD *)(v67 + 48) + 16 * v82) = *(_OWORD *)(*(_QWORD *)(v67 + 48) + 16 * v73);
          v75 = *(_QWORD *)(v67 + 56);
          v76 = (_OWORD *)(v75 + 32 * v82);
          v77 = (_OWORD *)(v75 + 32 * v73);
          v78 = v77[1];
          *v76 = *v77;
          v76[1] = v78;
LABEL_52:
          if (--v73 < 0)
            goto LABEL_75;
        }
        else
        {
          if (v82 == v73)
            goto LABEL_52;
          v87 = *(_QWORD *)(v67 + 48);
          v88 = (uint64_t *)(v87 + 16 * v82);
          v89 = (uint64_t *)(v87 + 16 * v73);
          v90 = *v88;
          v91 = v88[1];
          v92 = v89[1];
          *v88 = *v89;
          v88[1] = v92;
          *v89 = v90;
          v89[1] = v91;
          v93 = *(_QWORD *)(v67 + 56);
          v94 = (_OWORD *)(v93 + 32 * v82);
          v95 = (_OWORD *)(v93 + 32 * v73);
          outlined init with take of Any(v94, v189);
          outlined init with take of Any(v95, v94);
          outlined init with take of Any(v189, v95);
          if (v73 < 0)
            goto LABEL_75;
        }
      }
    }
    goto LABEL_75;
  }
LABEL_76:

  v122 = 0;
  v184 = v67 + 64;
  v123 = 1 << *(_BYTE *)(v67 + 32);
  if (v123 < 64)
    v124 = ~(-1 << v123);
  else
    v124 = -1;
  v125 = v124 & *(_QWORD *)(v67 + 64);
  v185 = (unint64_t)(v123 + 63) >> 6;
  v126 = v188;
  while (1)
  {
    v188 = v126;
    if (v125)
    {
      v128 = __clz(__rbit64(v125));
      v125 &= v125 - 1;
      v186 = v122;
      v129 = v128 | (v122 << 6);
    }
    else
    {
      v130 = v122 + 1;
      if (__OFADD__(v122, 1))
        goto LABEL_146;
      if (v130 >= v185)
      {
LABEL_142:

        swift_release();
        return v188;
      }
      v131 = *(_QWORD *)(v184 + 8 * v130);
      v132 = v122 + 1;
      if (!v131)
      {
        v132 = v122 + 2;
        if (v122 + 2 >= v185)
          goto LABEL_142;
        v131 = *(_QWORD *)(v184 + 8 * v132);
        if (!v131)
        {
          v132 = v122 + 3;
          if (v122 + 3 >= v185)
            goto LABEL_142;
          v131 = *(_QWORD *)(v184 + 8 * v132);
          if (!v131)
          {
            v133 = v122 + 4;
            if (v122 + 4 >= v185)
              goto LABEL_142;
            v131 = *(_QWORD *)(v184 + 8 * v133);
            if (!v131)
            {
              while (1)
              {
                v132 = v133 + 1;
                if (__OFADD__(v133, 1))
                  goto LABEL_147;
                if (v132 >= v185)
                  goto LABEL_142;
                v131 = *(_QWORD *)(v184 + 8 * v132);
                ++v133;
                if (v131)
                  goto LABEL_97;
              }
            }
            v132 = v122 + 4;
          }
        }
      }
LABEL_97:
      v125 = (v131 - 1) & v131;
      v186 = v132;
      v129 = __clz(__rbit64(v131)) + (v132 << 6);
    }
    v134 = 16 * v129;
    v135 = v67;
    v136 = *(Swift::String *)(*(_QWORD *)(v67 + 48) + v134);
    v137 = (uint64_t *)(*(_QWORD *)(v67 + 56) + v134);
    v138 = *v137;
    v139 = v137[1];
    *(_QWORD *)&v189[0] = 0x6E65646E65706564;
    *((_QWORD *)&v189[0] + 1) = 0xEB000000003D7963;
    String.append(_:)(v136);
    v140 = v189[0];
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v189[0] = v126;
    v143 = specialized __RawDictionaryStorage.find<A>(_:)(v140, *((uint64_t *)&v140 + 1));
    v144 = *(_QWORD *)(v126 + 16);
    v145 = (v142 & 1) == 0;
    v146 = v144 + v145;
    if (__OFADD__(v144, v145))
      break;
    v147 = v142;
    if (*(_QWORD *)(v126 + 24) >= v146)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v142 & 1) != 0)
          goto LABEL_80;
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
        v153 = static _DictionaryStorage.copy(original:)();
        v154 = v126;
        v126 = v153;
        if (*(_QWORD *)(v188 + 16))
        {
          v155 = (char *)(v153 + 64);
          v156 = (char *)(v188 + 64);
          v157 = (unint64_t)((1 << *(_BYTE *)(v126 + 32)) + 63) >> 6;
          v179 = v188 + 64;
          if (v126 != v188 || v155 >= &v156[8 * v157])
          {
            memmove(v155, v156, 8 * v157);
            v154 = v188;
          }
          v158 = 0;
          *(_QWORD *)(v126 + 16) = *(_QWORD *)(v154 + 16);
          v159 = 1 << *(_BYTE *)(v154 + 32);
          if (v159 < 64)
            v160 = ~(-1 << v159);
          else
            v160 = -1;
          v161 = v160 & *(_QWORD *)(v154 + 64);
          v180 = (unint64_t)(v159 + 63) >> 6;
          while (1)
          {
            if (v161)
            {
              v181 = (v161 - 1) & v161;
              v182 = v158;
              v162 = __clz(__rbit64(v161)) | (v158 << 6);
              v163 = v188;
            }
            else
            {
              v174 = v158 + 1;
              v163 = v188;
              if (__OFADD__(v158, 1))
                goto LABEL_156;
              if (v174 >= v180)
                break;
              v175 = *(_QWORD *)(v179 + 8 * v174);
              v176 = v158 + 1;
              if (!v175)
              {
                v176 = v174 + 1;
                if (v174 + 1 >= v180)
                  break;
                v175 = *(_QWORD *)(v179 + 8 * v176);
                if (!v175)
                {
                  v176 = v174 + 2;
                  if (v174 + 2 >= v180)
                    break;
                  v175 = *(_QWORD *)(v179 + 8 * v176);
                  if (!v175)
                  {
                    v176 = v174 + 3;
                    if (v174 + 3 >= v180)
                      break;
                    v175 = *(_QWORD *)(v179 + 8 * v176);
                    if (!v175)
                    {
                      v176 = v174 + 4;
                      if (v174 + 4 >= v180)
                        break;
                      v175 = *(_QWORD *)(v179 + 8 * v176);
                      if (!v175)
                      {
                        v176 = v174 + 5;
                        if (v174 + 5 >= v180)
                          break;
                        v175 = *(_QWORD *)(v179 + 8 * v176);
                        if (!v175)
                        {
                          v176 = v174 + 6;
                          if (v174 + 6 >= v180)
                            break;
                          v175 = *(_QWORD *)(v179 + 8 * v176);
                          if (!v175)
                          {
                            v177 = v174 + 7;
                            if (v177 >= v180)
                              break;
                            v175 = *(_QWORD *)(v179 + 8 * v177);
                            if (!v175)
                            {
                              while (1)
                              {
                                v176 = v177 + 1;
                                if (__OFADD__(v177, 1))
                                  goto LABEL_157;
                                if (v176 >= v180)
                                  goto LABEL_140;
                                v175 = *(_QWORD *)(v179 + 8 * v176);
                                ++v177;
                                if (v175)
                                  goto LABEL_139;
                              }
                            }
                            v176 = v177;
                          }
                        }
                      }
                    }
                  }
                }
              }
LABEL_139:
              v181 = (v175 - 1) & v175;
              v182 = v176;
              v162 = __clz(__rbit64(v175)) + (v176 << 6);
            }
            v164 = 16 * v162;
            v165 = *(_QWORD *)(v163 + 56);
            v166 = (uint64_t *)(*(_QWORD *)(v163 + 48) + v164);
            v168 = *v166;
            v167 = v166[1];
            v169 = v165 + v164;
            v170 = *(_QWORD *)(v165 + v164);
            v171 = *(_QWORD *)(v169 + 8);
            v172 = (_QWORD *)(*(_QWORD *)(v126 + 48) + v164);
            *v172 = v168;
            v172[1] = v167;
            v173 = (_QWORD *)(*(_QWORD *)(v126 + 56) + v164);
            *v173 = v170;
            v173[1] = v171;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v161 = v181;
            v158 = v182;
          }
        }
LABEL_140:
        swift_bridgeObjectRelease();
        if ((v147 & 1) != 0)
          goto LABEL_80;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v146, isUniquelyReferenced_nonNull_native);
      v126 = *(_QWORD *)&v189[0];
      v148 = specialized __RawDictionaryStorage.find<A>(_:)(v140, *((uint64_t *)&v140 + 1));
      if ((v147 & 1) != (v149 & 1))
        goto LABEL_158;
      v143 = v148;
      if ((v147 & 1) != 0)
      {
LABEL_80:
        v127 = (_QWORD *)(*(_QWORD *)(v126 + 56) + 16 * v143);
        swift_bridgeObjectRelease();
        *v127 = v138;
        v127[1] = v139;
        goto LABEL_81;
      }
    }
    *(_QWORD *)(v126 + 8 * (v143 >> 6) + 64) |= 1 << v143;
    *(_OWORD *)(*(_QWORD *)(v126 + 48) + 16 * v143) = v140;
    v150 = (_QWORD *)(*(_QWORD *)(v126 + 56) + 16 * v143);
    *v150 = v138;
    v150[1] = v139;
    v151 = *(_QWORD *)(v126 + 16);
    v27 = __OFADD__(v151, 1);
    v152 = v151 + 1;
    if (v27)
      goto LABEL_145;
    *(_QWORD *)(v126 + 16) = v152;
    swift_bridgeObjectRetain();
LABEL_81:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v67 = v135;
    v122 = v186;
  }
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

id @objc NSMorphology.morphunConstraints()(void *a1, uint64_t a2, void (*a3)(void))
{
  id v4;

  v4 = a1;
  a3();

  return (id)_NativeDictionary.bridged()();
}

uint64_t PredicateExpressions.Conjunction.lhs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t PredicateExpressions.Conjunction.rhs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

void PredicateExpressions.Conjunction.init(lhs:rhs:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
  type metadata accessor for PredicateExpressions.Conjunction();
}

uint64_t sub_181DF8D60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v3 + *(int *)(a1 + 52), v2, v1);
}

uint64_t PredicateExpressions.Conjunction.evaluate(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_QWORD *)(a2 - 8);
  v6 = (uint64_t *)MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v6;
  v15 = *v6;
  (*(void (**)(char *__return_ptr, uint64_t *, _QWORD))(*(_QWORD *)(v10 + 32) + 16))((char *)&v16 + 1, &v15, *(_QWORD *)(v10 + 16));
  if (!v3)
  {
    v12 = BYTE1(v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2, a2);
    if (v12 == 1)
    {
      v15 = v9;
      (*(void (**)(uint64_t *__return_ptr, uint64_t *, _QWORD))(*(_QWORD *)(a2 + 40) + 16))(&v16, &v15, *(_QWORD *)(a2 + 24));
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a2);
      v11 = v16;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a2);
      v11 = 0;
    }
  }
  return v11 & 1;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.Conjunction<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = PredicateExpressions.Conjunction.evaluate(_:)(a1, a2);
  if (!v3)
    *a3 = result & 1;
  return result;
}

void static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
  type metadata accessor for PredicateExpressions.Conjunction();
}

uint64_t sub_181DF8F30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(v3 + *(int *)(a1 + 52), v2, v1);
}

uint64_t PredicateExpressions.Conjunction.description.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;

  _StringGuts.grow(_:)(29);
  v0._object = (void *)0x800000018230E740;
  v0._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0x203A736872202CLL;
  v1._object = (void *)0xE700000000000000;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._countAndFlagsBits = 41;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t PredicateExpressions.Conjunction<>.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v3[24];
  uint64_t v4;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

void PredicateExpressions.Conjunction<>.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[16];

  v12[5] = a5;
  v12[6] = a4;
  v12[9] = a3;
  v12[4] = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v12[7] = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v12[8] = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12[10] = v8;
  v12[11] = v8;
  v12[12] = v9;
  v12[13] = v10;
  v12[14] = v11;
  type metadata accessor for PredicateExpressions.Conjunction();
}

uint64_t sub_181DF91F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v6 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v17 - v7;
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  v9 = *(_QWORD *)(v4 - 72);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v9)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  *(_QWORD *)(v4 - 200) = v6;
  *(_QWORD *)(v4 - 192) = a1;
  *(_QWORD *)(v4 - 72) = v3;
  *(_QWORD *)(v4 - 184) = v8;
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 120, *(_QWORD *)(v4 - 96));
  v10 = *(_QWORD *)(v4 - 144);
  v11 = *(_QWORD *)(v4 - 128);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  v12 = *(_QWORD *)(v4 - 184);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v12, v10, v11);
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 120, *(_QWORD *)(v4 - 96));
  v13 = *(_QWORD *)(v4 - 152);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  v14 = *(_QWORD *)(v4 - 192);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 176) + 32))(v12 + *(int *)(v14 + 52), v13, v2);
  __swift_destroy_boxed_opaque_existential_1(v4 - 120);
  v15 = *(_QWORD *)(v4 - 200);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v15 + 16))(*(_QWORD *)(v4 - 168), v12, v14);
  __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v4 - 72));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v12, v14);
}

void protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.Conjunction<A, B>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  PredicateExpressions.Conjunction<>.init(from:)(a1, *(_QWORD *)(a2 + 24), *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 24), a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.Conjunction<A, B>(_QWORD *a1)
{
  return PredicateExpressions.Conjunction<>.encode(to:)(a1);
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.Conjunction(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_181DF9548 + 4 * byte_1821639B8[v17 - 1]))();
}

void storeEnumTagSinglePayload for PredicateExpressions.Conjunction(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t BufferViewIterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = *v2;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if (*v2 >= (unint64_t)v2[1])
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, 1, 1, v5);
  if ((*(_BYTE *)(v6 + 82) & 1) != 0)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a2, *v2, v5);
  else
    UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, *v2, v5, a2);
  result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(a2, 0, 1, v5);
  *v2 = v4 + *(_QWORD *)(v6 + 72);
  return result;
}

uint64_t type metadata accessor for BufferViewIterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BufferViewIterator);
}

ValueMetadata *type metadata accessor for _XMLPlistDecodingFormat()
{
  return &type metadata for _XMLPlistDecodingFormat;
}

_UNKNOWN **associated type witness table accessor for PlistDecodingFormat.Map : PlistDecodingMap in _XMLPlistDecodingFormat()
{
  return &protocol witness table for XMLPlistMap;
}

double specialized XMLPlistMap.Value.realValue<A, B>(in:as:for:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __n128 v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void (*v37)(char *, uint64_t, uint64_t, __n128);
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t inited;
  uint64_t v41;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v43;
  double result;
  uint64_t v45[3];
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[11];

  v48 = a1;
  v49 = a2;
  v50[10] = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v16);
  v21 = (char *)v45 - v18;
  if (v19 >> 60 == 6)
  {
    v33 = *(_QWORD *)(v19 + 16);
    v34 = *(_QWORD *)(v19 + 24);
    MEMORY[0x1E0C80A78](v17);
    v45[-4] = a5;
    v45[-3] = a6;
    v45[-2] = v49;
    v45[-1] = a3;
    v35 = *(_QWORD *)(v48 + 24);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v35 + 40));
    v36 = v47;
    specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)((_QWORD *)(v35 + 16), (_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in XMLPlistMap.Value.realValue<A, B>(in:as:for:_:), v33, v34, v50);
    os_unfair_lock_unlock((os_unfair_lock_t)(v35 + 40));
    swift_release();
    if (!v36)
      return *(double *)v50;
  }
  else
  {
    v46 = a6;
    if (v19 >> 60 == 7)
    {
      v45[2] = (uint64_t)v45;
      v22 = *(_QWORD *)(v19 + 24);
      v45[0] = *(_QWORD *)(v19 + 16);
      MEMORY[0x1E0C80A78](v17);
      v45[1] = (uint64_t)v45;
      v45[-6] = a5;
      v45[-5] = a6;
      v23 = v49;
      v45[-4] = v24;
      v45[-3] = v23;
      v45[-2] = a3;
      v25 = *(_QWORD *)(v48 + 24);
      v26 = v24;
      swift_retain();
      os_unfair_lock_lock((os_unfair_lock_t)(v25 + 40));
      v27 = v47;
      specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)((_QWORD *)(v25 + 16), (_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))_s10Foundation11XMLPlistMapC5ValueO07integerD02in2as3for_xAC_xmAA15_CodingPathNodeOq_SgtKs17FixedWidthIntegerRzs0I3KeyR_r0_lFxAA10BufferViewVys5UInt8VG_AStYbKXEfU_A2sekLs6UInt64Vs5Error_pAURszsANR_r0_lIethyyggndzo_TP5TA_0, v45[0], v22, v50);
      os_unfair_lock_unlock((os_unfair_lock_t)(v25 + 40));
      swift_release();
      if (v27)
      {

        v28 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
        v29 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
        MEMORY[0x1E0C80A78](v30);
        v31 = v46;
        v45[-6] = a5;
        v45[-5] = v31;
        v45[-4] = v26;
        v45[-3] = v23;
        v45[-2] = a3;
        v32 = *(_QWORD *)(v48 + 24);
        swift_retain();
        os_unfair_lock_lock((os_unfair_lock_t)(v32 + 40));
        specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)((_QWORD *)(v32 + 16), (_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))_s10Foundation11XMLPlistMapC5ValueO07integerD02in2as3for_xAC_xmAA15_CodingPathNodeOq_SgtKs17FixedWidthIntegerRzs0I3KeyR_r0_lFxAA10BufferViewVys5UInt8VG_AStYbKXEfU_A2sekLs5Int64Vs5Error_pAURszsANR_r0_lIethyyggndzo_TP5TA_0, v28, v29, v50);
        os_unfair_lock_unlock((os_unfair_lock_t)(v32 + 40));
        swift_release();
        return (double)v50[0];
      }
      else
      {
        return (double)v50[0];
      }
    }
    else
    {
      v48 = v19;
      v37 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16);
      v37((char *)v45 - v18, a3, v12, v20);
      ((void (*)(char *, char *, uint64_t))v37)(v15, v21, v12);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v15, 1, a5) == 1)
      {
        v38 = *(void (**)(char *, uint64_t))(v13 + 8);
        v38(v15, v12);
        _CodingPathNode.path.getter(v49);
        v38(v21, v12);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v15, a5);
        v39 = _CodingPathNode.path.getter(v49);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_18205C850;
        v41 = v46;
        *(_QWORD *)(inited + 56) = a5;
        *(_QWORD *)(inited + 64) = v41;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        (*(void (**)(uint64_t *, char *, uint64_t))(v9 + 16))(boxed_opaque_existential_1, v11, a5);
        v50[0] = v39;
        specialized Array.append<A>(contentsOf:)(inited);
        (*(void (**)(char *, uint64_t))(v13 + 8))(v21, v12);
        (*(void (**)(char *, uint64_t))(v9 + 8))(v11, a5);
      }
      type metadata accessor for DecodingError();
      swift_allocError();
      specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)(MEMORY[0x1E0DEB070], v48, v43);
      swift_bridgeObjectRelease();
      swift_willThrow();
    }
  }
  return result;
}

uint64_t static _XMLPlistDecodingFormat.container<A>(keyedBy:for:referencing:codingPathNode:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t result;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;
  unint64_t v17;
  Swift::Int v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  Swift::Int v25;
  unint64_t v26;
  Swift::Int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char isUniquelyReferenced_nonNull_native;
  char v34;
  unint64_t v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  char v41;
  uint64_t *v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  _QWORD *v61;

  v5 = a3;
  if (a2 >> 60 != 2)
  {
    if (a2 >> 60 == 8 && a2 == 0x8000000000000000)
    {
      v7 = type metadata accessor for DecodingError();
      swift_allocError();
      v9 = v8;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      v10 = *(_QWORD *)(v5 + 40);
      swift_retain();
      _CodingPathNode.path.getter(v10);
      swift_release();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v9, *MEMORY[0x1E0DEC460], v7);
      return swift_willThrow();
    }
    else
    {
      v12 = *(_QWORD *)(a3 + 40);
      swift_retain();
      _CodingPathNode.path.getter(v12);
      swift_release();
      v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      type metadata accessor for DecodingError();
      swift_allocError();
      specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)(v13, a2, v14);
      swift_bridgeObjectRelease();
      return swift_willThrow();
    }
  }
  v17 = *(_QWORD *)(a2 + 16);
  v16 = *(_QWORD *)(a2 + 24);
  v61 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v18 = v16 / 2;
  swift_retain();
  swift_retain_n();
  swift_retain_n();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : XMLPlistMap.Value]);
  Dictionary.reserveCapacity(_:)(v18);
  v56 = v61;
  swift_retain();
  XMLPlistMap.loadValue(at:)(v17);
  if ((~v19 & 0xF000000000000007) == 0)
  {
LABEL_7:
    swift_release();
    swift_release_n();
    v58 = v5;
    v59 = v56;
    v60 = a4;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    type metadata accessor for _PlistKeyedDecodingContainer();
  }
  v20 = v19;
  v52 = v5;
  v51 = a4;
  while (1)
  {
    v25 = XMLPlistMap.offset(after:)(v17);
    XMLPlistMap.loadValue(at:)(v25);
    if ((~v26 & 0xF000000000000007) == 0)
      goto LABEL_32;
    v57 = v26;
    v27 = XMLPlistMap.offset(after:)(v25);
    v28 = v20 >> 60;
    if (v20 == 0x8000000000000000 && (_DWORD)v28 == 8)
    {
      v61 = v56;
      v46 = type metadata accessor for DecodingError();
      swift_allocError();
      v48 = v47;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *v48 = MEMORY[0x1E0DEA968];
      _CodingPathNode.path.getter(a4);
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v46 - 8) + 104))(v48, *MEMORY[0x1E0DEC460], v46);
      swift_willThrow();
      v49 = v57;
LABEL_27:
      outlined consume of XMLPlistMap.Value(v49);
      swift_release();
LABEL_29:
      swift_release_n();
      swift_release();
      swift_release_n();
      return swift_bridgeObjectRelease();
    }
    v29 = *(_QWORD *)(v5 + 24);
    if ((_DWORD)v28)
    {
      v61 = v56;
      outlined copy of XMLPlistMap.Value(v20);
      swift_retain();
      _CodingPathNode.path.getter(a4);
      type metadata accessor for DecodingError();
      swift_allocError();
      specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)(MEMORY[0x1E0DEA968], v20, v50);
      swift_bridgeObjectRelease();
      swift_willThrow();
      swift_release();
      outlined consume of XMLPlistMap.Value(v20);
      outlined consume of XMLPlistMap.Value(v57);
      v49 = v20;
      goto LABEL_27;
    }
    v55 = *(_QWORD *)(v20 + 16);
    v53 = v27;
    v54 = *(_QWORD *)(v20 + 24);
    MEMORY[0x1E0C80A78](v27);
    v30 = *(_QWORD *)(v29 + 24);
    outlined copy of XMLPlistMap.Value(v20);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v30 + 40));
    specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)((_QWORD *)(v30 + 16), (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in static _XMLPlistDecodingFormat.unwrapString<A>(from:in:for:_:), v55, v54, &v58);
    if (v4)
    {
      v61 = v56;
      os_unfair_lock_unlock((os_unfair_lock_t)(v30 + 40));
      swift_release();
      swift_release();
      outlined consume of XMLPlistMap.Value(v20);
      outlined consume of XMLPlistMap.Value(v57);
      outlined consume of XMLPlistMap.Value(v20);
      swift_release();
      goto LABEL_29;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(v30 + 40));
    swift_release();
    swift_release();
    v32 = v58;
    v31 = (uint64_t)v59;
    outlined copy of XMLPlistMap.Value(v57);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v35 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v31);
    v36 = v56[2];
    v37 = (v34 & 1) == 0;
    v38 = v36 + v37;
    if (__OFADD__(v36, v37))
      break;
    v39 = v34;
    if (v56[3] >= v38)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        specialized _NativeDictionary.copy()();
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v38, isUniquelyReferenced_nonNull_native);
      v40 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v31);
      if ((v39 & 1) != (v41 & 1))
        goto LABEL_33;
      v35 = v40;
    }
    if ((v39 & 1) != 0)
    {
      v21 = v56[7];
      v22 = 8 * v35;
      outlined consume of XMLPlistMap.Value(*(_QWORD *)(v21 + 8 * v35));
      v23 = v57;
      *(_QWORD *)(v21 + v22) = v57;
    }
    else
    {
      v56[(v35 >> 6) + 8] |= 1 << v35;
      v42 = (uint64_t *)(v56[6] + 16 * v35);
      *v42 = v32;
      v42[1] = v31;
      *(_QWORD *)(v56[7] + 8 * v35) = v57;
      v43 = v56[2];
      v44 = __OFADD__(v43, 1);
      v45 = v43 + 1;
      if (v44)
        goto LABEL_31;
      v23 = v57;
      v56[2] = v45;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of XMLPlistMap.Value(v20);
    outlined consume of XMLPlistMap.Value(v23);
    outlined consume of XMLPlistMap.Value(v20);
    v17 = v53;
    XMLPlistMap.loadValue(at:)(v53);
    v20 = v24;
    a4 = v51;
    v5 = v52;
    if ((~v24 & 0xF000000000000007) == 0)
      goto LABEL_7;
  }
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t static _XMLPlistDecodingFormat.unkeyedContainer(for:referencing:codingPathNode:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (a1 >> 60 == 1)
  {
    v16 = *(_QWORD *)(a1 + 16);
    v17 = *(_QWORD *)(a1 + 24);
    v18 = *(_QWORD *)(a2 + 24);
    a4[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _PlistUnkeyedDecodingContainer<_XMLPlistDecodingFormat>);
    a4[4] = lazy protocol witness table accessor for type _PlistUnkeyedDecodingContainer<_XMLPlistDecodingFormat> and conformance _PlistUnkeyedDecodingContainer<A>();
    v19 = swift_allocObject();
    *a4 = v19;
    *(_QWORD *)(v19 + 32) = v18;
    *(_QWORD *)(v19 + 40) = 0xF000000000000007;
    *(_QWORD *)(v19 + 16) = a2;
    *(_QWORD *)(v19 + 24) = v16;
    *(_QWORD *)(v19 + 64) = 0;
    *(_QWORD *)(v19 + 72) = a3;
    *(_QWORD *)(v19 + 48) = v17;
    *(_BYTE *)(v19 + 56) = 0;
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  else
  {
    if (a1 >> 60 == 8 && a1 == 0x8000000000000000)
    {
      v7 = type metadata accessor for DecodingError();
      swift_allocError();
      v9 = v8;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
      v10 = *(_QWORD *)(a2 + 40);
      swift_retain();
      _CodingPathNode.path.getter(v10);
      swift_release();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v9, *MEMORY[0x1E0DEC460], v7);
    }
    else
    {
      v11 = *(_QWORD *)(a2 + 40);
      swift_retain();
      _CodingPathNode.path.getter(v11);
      swift_release();
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
      type metadata accessor for DecodingError();
      swift_allocError();
      specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)(v12, a1, v13);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
}

uint64_t static _XMLPlistDecodingFormat.unwrapBool<A>(from:for:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __n128 v17;
  char *v18;
  char v19;
  void (*v20)(char *, uint64_t, uint64_t, __n128);
  void (*v21)(char *, uint64_t);
  char *v22;
  uint64_t v23;
  uint64_t inited;
  uint64_t v25;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v27;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v30 = a5;
  v31 = a2;
  v33 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Optional();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v29 - v15;
  if (v16 >> 60 == 5)
  {
    v19 = *(_BYTE *)(v16 + 16);
  }
  else
  {
    v29 = v16;
    v20 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16);
    v20((char *)&v29 - v15, a3, v10, v17);
    ((void (*)(char *, char *, uint64_t))v20)(v13, v18, v10);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v13, 1, a4) == 1)
    {
      v21 = *(void (**)(char *, uint64_t))(v11 + 8);
      v21(v13, v10);
      _CodingPathNode.path.getter(v31);
      v21(v18, v10);
    }
    else
    {
      v22 = v9;
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v13, a4);
      v23 = _CodingPathNode.path.getter(v31);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      v25 = v30;
      *(_QWORD *)(inited + 56) = a4;
      *(_QWORD *)(inited + 64) = v25;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v7 + 16))(boxed_opaque_existential_1, v22, a4);
      v32 = v23;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v22, a4);
    }
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)(MEMORY[0x1E0DEAFA0], v29, v27);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
  return v19 & 1;
}

uint64_t static _XMLPlistDecodingFormat.unwrapDate<A>(from:in:for:_:)@<X0>(uint64_t a1@<X1>, os_unfair_lock_s *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  return XMLPlistMap.Value.dateValue<A>(in:for:_:)(a1, a2, a3, a4, a5, a6);
}

uint64_t static _XMLPlistDecodingFormat.unwrapData<A>(from:in:for:_:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return XMLPlistMap.Value.dataValue<A>(in:for:_:)(a2, a3, a4, a1, a5, a6);
}

uint64_t static _XMLPlistDecodingFormat.unwrapString<A>(from:in:for:_:)(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __n128 v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  void (*v28)(char *, uint64_t, uint64_t, __n128);
  void (*v29)(char *, uint64_t);
  char *v30;
  uint64_t v31;
  uint64_t inited;
  uint64_t v33;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD v40[12];

  v38 = a2;
  v40[11] = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v37 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v16);
  v21 = (char *)&v36 - v18;
  if (v19 >> 60)
  {
    v38 = a3;
    v39 = v19;
    v36 = a6;
    v28 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16);
    v28((char *)&v36 - v18, a4, v12, v20);
    ((void (*)(char *, char *, uint64_t))v28)(v15, v21, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v15, 1, a5) == 1)
    {
      v29 = *(void (**)(char *, uint64_t))(v13 + 8);
      v29(v15, v12);
      _CodingPathNode.path.getter(v38);
      v29(v21, v12);
    }
    else
    {
      v30 = v37;
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v37, v15, a5);
      v31 = _CodingPathNode.path.getter(v38);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      v33 = v36;
      *(_QWORD *)(inited + 56) = a5;
      *(_QWORD *)(inited + 64) = v33;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v10 + 16))(boxed_opaque_existential_1, v30, a5);
      v40[0] = v31;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v21, v12);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v30, a5);
    }
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)(MEMORY[0x1E0DEA968], v39, v35);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  else
  {
    v22 = *(_QWORD *)(v19 + 16);
    v23 = *(_QWORD *)(v19 + 24);
    MEMORY[0x1E0C80A78](v17);
    *(&v36 - 6) = a5;
    *(&v36 - 5) = a6;
    *((_BYTE *)&v36 - 32) = v24;
    *(&v36 - 3) = a3;
    *(&v36 - 2) = a4;
    v25 = *(_QWORD *)(v38 + 24);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v25 + 40));
    v26 = v39;
    specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)((_QWORD *)(v25 + 16), (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))partial apply for closure #1 in static _XMLPlistDecodingFormat.unwrapString<A>(from:in:for:_:), v22, v23, v40);
    os_unfair_lock_unlock((os_unfair_lock_t)(v25 + 40));
    result = swift_release();
    if (!v26)
      return v40[0];
  }
  return result;
}

uint64_t specialized closure #1 in static _XMLPlistDecodingFormat.unwrapString<A>(from:in:for:_:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  unint64_t v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _DWORD *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v41;
  uint64_t v42;
  _WORD *v43;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  Swift::String v49;
  Swift::String v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  Swift::String v65;
  uint64_t v66;
  char v67;
  BOOL v68;
  _BYTE *v69;
  uint64_t v71;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  unint64_t v79;
  __int128 v80;
  __int128 v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;

  if ((a5 & 1) != 0)
  {
    v14 = static String._tryFromUTF8(_:)();
    if (v15)
      return v14;
    v22 = a10;
    v16 = a9;
    *(_QWORD *)&v77 = 0;
    *((_QWORD *)&v77 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(55);
    v49._countAndFlagsBits = 0xD000000000000035;
    v49._object = (void *)0x800000018230E760;
    String.append(_:)(v49);
    v50._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v50);
    swift_bridgeObjectRelease();
    v74 = 0xE000000000000000;
    if (a10 == 0xFF)
    {
      v55 = -1;
      swift_retain();
LABEL_133:
      v61 = type metadata accessor for DecodingError();
      swift_allocError();
      v63 = v62;
      outlined copy of _CodingKey?(a7, a8, a9, v55);
      _CodingPathNode.path.getter(a6);
      swift_bridgeObjectRetain();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v61 - 8) + 104))(v63, *MEMORY[0x1E0DEC458], v61);
      swift_bridgeObjectRelease();
      swift_release();
      swift_willThrow();
      return v16;
    }
    v51 = (_QWORD *)swift_allocObject();
    v51[5] = &type metadata for _CodingKey;
    v51[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    v52 = swift_allocObject();
    v51[2] = v52;
    *(_QWORD *)(v52 + 16) = a7;
    *(_QWORD *)(v52 + 24) = a8;
    *(_QWORD *)(v52 + 32) = a9;
    *(_BYTE *)(v52 + 40) = a10;
    v51[7] = a6;
    if (a6 >> 62)
    {
      if (a6 >> 62 != 1)
      {
        v21 = 1;
LABEL_132:
        v55 = a10;
        v51[8] = v21;
        a6 = (unint64_t)v51;
        goto LABEL_133;
      }
      v53 = (uint64_t *)((a6 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      v53 = (uint64_t *)(a6 + 64);
    }
    v60 = *v53;
    swift_retain();
    v21 = v60 + 1;
    if (__OFADD__(v60, 1))
    {
      __break(1u);
      goto LABEL_136;
    }
    goto LABEL_132;
  }
  v16 = a3;
  v74 = v10;
  v17 = a1 + a2;
  *(_QWORD *)&v77 = a3;
  *((_QWORD *)&v77 + 1) = a4;
  *(_QWORD *)&v78 = a1;
  *((_QWORD *)&v78 + 1) = a1;
  v79 = a1 + a2;
  if (a2 >= 5)
  {
    if (a3 + a4 < a1)
    {
LABEL_188:
      __break(1u);
      goto LABEL_189;
    }
    if ((uint64_t)(a1 - a3) < 0)
    {
LABEL_189:
      __break(1u);
      goto LABEL_190;
    }
    if ((uint64_t)(a3 + a4 - a1) < 0)
    {
LABEL_190:
      __break(1u);
      goto LABEL_191;
    }
    if (*(_DWORD *)a1 == 1819635236 && *(_BYTE *)(a1 + 4) == 108)
      return 0;
    v75 = 0;
    v76 = 0;
  }
  else
  {
    v75 = 0;
    v76 = 0;
    if (a2 < 1)
    {
      a6 = a1;
      goto LABEL_7;
    }
  }
  a6 = a1;
  v73 = a1;
LABEL_23:
  if (v17 < a6)
    goto LABEL_181;
  if ((uint64_t)(a6 - v16) < 0)
    goto LABEL_182;
  v22 = v17 - a6;
  if ((uint64_t)(v17 - a6) < 0)
    goto LABEL_183;
  v23 = v16 + a4;
  if ((uint64_t)(v16 + a4 - v17) < 0)
    goto LABEL_184;
  v24 = *(unsigned __int8 *)a6;
  if (v24 == 38)
  {
    if (v76)
    {
      if (a6 < a1)
      {
LABEL_191:
        __break(1u);
        goto LABEL_192;
      }
      if ((uint64_t)(a1 - v16) < 0)
      {
LABEL_192:
        __break(1u);
        goto LABEL_193;
      }
      if ((uint64_t)(a6 - a1) < 0)
      {
LABEL_193:
        __break(1u);
LABEL_194:
        __break(1u);
LABEL_195:
        __break(1u);
LABEL_196:
        __break(1u);
LABEL_197:
        __break(1u);
LABEL_198:
        __break(1u);
        goto LABEL_199;
      }
      if ((uint64_t)(v23 - a6) < 0)
        goto LABEL_194;
      v22 = a4;
      v28 = static String._tryFromUTF8(_:)();
      if (!v29)
        goto LABEL_129;
      String.append(_:)(*(Swift::String *)&v28);
      swift_bridgeObjectRelease();
    }
    else
    {
      if (a6 < a1)
      {
LABEL_199:
        __break(1u);
        goto LABEL_200;
      }
      if ((uint64_t)(a1 - v16) < 0)
      {
LABEL_200:
        __break(1u);
        goto LABEL_201;
      }
      if ((uint64_t)(a6 - a1) < 0)
      {
LABEL_201:
        __break(1u);
LABEL_202:
        __break(1u);
LABEL_203:
        __break(1u);
LABEL_204:
        __break(1u);
LABEL_205:
        __break(1u);
LABEL_206:
        __break(1u);
        goto LABEL_207;
      }
      if ((uint64_t)(v23 - a6) < 0)
        goto LABEL_202;
      v22 = a4;
      v30 = static String._tryFromUTF8(_:)();
      v32 = v31;
      swift_bridgeObjectRelease();
      v75 = v30;
      v76 = v32;
      if (!v32)
        goto LABEL_129;
    }
    v21 = a6 + 1;
    *((_QWORD *)&v78 + 1) = a6 + 1;
    v33 = v17 - (a6 + 1);
    if ((uint64_t)v33 < 1)
    {
LABEL_118:
      lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
      swift_allocError();
      *(_OWORD *)v54 = 0u;
      *(_OWORD *)(v54 + 16) = 0u;
      *(_BYTE *)(v54 + 32) = 0;
      goto LABEL_175;
    }
    v34 = (_DWORD *)(a6 + 2);
    if (v17 < a6 + 2)
    {
LABEL_138:
      v88 = v16;
      v89 = v22;
      v90 = v78;
      v91 = v21;
      v92 = v17;
      goto LABEL_172;
    }
    if ((uint64_t)(v21 - v16) >= 0)
    {
      switch(*(_BYTE *)v21)
      {
        case 'a':
          if (v33 < 4)
            goto LABEL_118;
          if (v23 < (unint64_t)v34)
            goto LABEL_214;
          if ((uint64_t)v34 - v16 < 0)
            goto LABEL_215;
          v47 = v74;
          if ((uint64_t)(v23 - (_QWORD)v34) < 0)
            goto LABEL_216;
          if (*(_WORD *)v34 == 28781 && *(_BYTE *)(a6 + 4) == 59)
          {
            v35 = a6 + 5;
          }
          else
          {
            if (v33 < 5 || *v34 != 997420912)
            {
              v80 = v77;
              v81 = v78;
              v82 = v79;
              goto LABEL_172;
            }
            v35 = a6 + 6;
          }
LABEL_109:
          *((_QWORD *)&v78 + 1) = v35;
LABEL_110:
          v74 = v47;
          if (v76)
            String.UnicodeScalarView.append(_:)();
          a4 = *((_QWORD *)&v77 + 1);
          v16 = v77;
          a1 = *((_QWORD *)&v78 + 1);
          v17 = v79;
          a6 = *((_QWORD *)&v78 + 1);
          break;
        case 'b':
        case 'c':
        case 'd':
        case 'e':
        case 'f':
        case 'h':
        case 'i':
        case 'j':
        case 'k':
        case 'm':
        case 'n':
        case 'o':
        case 'p':
          goto LABEL_138;
        case 'g':
        case 'l':
          v35 = a6 + 4;
          if (v17 >= a6 + 4 && *(_BYTE *)(a6 + 2) == 116 && *(_BYTE *)(a6 + 3) == 59)
            goto LABEL_108;
          goto LABEL_154;
        case 'q':
          if (v33 < 5)
            goto LABEL_168;
          if (v23 < (unint64_t)v34)
            goto LABEL_217;
          if ((uint64_t)v34 - v16 < 0)
            goto LABEL_218;
          if ((uint64_t)(v23 - (_QWORD)v34) < 0)
            goto LABEL_219;
          if (*v34 != 997486453)
            goto LABEL_168;
          v35 = a6 + 6;
LABEL_108:
          v47 = v74;
          goto LABEL_109;
        default:
          if (*(_BYTE *)v21 != 35)
            goto LABEL_138;
          *((_QWORD *)&v78 + 1) = a6 + 2;
          specialized static XMLPlistScanner.parseNumericEntityReference(reader:string:)((uint64_t *)&v77);
          v47 = v74;
          if (v74)
            goto LABEL_176;
          goto LABEL_110;
      }
      goto LABEL_22;
    }
    goto LABEL_185;
  }
  if (v24 != 60)
  {
    *((_QWORD *)&v78 + 1) = ++a6;
    goto LABEL_22;
  }
  v21 = a6 + 2;
  if (v17 < a6 + 2)
    goto LABEL_121;
  v21 = *(unsigned __int8 *)(a6 + 1);
  if ((_DWORD)v21 != 33)
    goto LABEL_121;
  if (v76)
  {
    if (a6 < a1)
      goto LABEL_195;
    if ((uint64_t)(a1 - v16) < 0)
      goto LABEL_196;
    if ((uint64_t)(a6 - a1) < 0)
      goto LABEL_197;
    if ((uint64_t)(v23 - a6) < 0)
      goto LABEL_198;
    v25 = a4;
    v26 = static String._tryFromUTF8(_:)();
    if (!v27)
      goto LABEL_129;
    String.append(_:)(*(Swift::String *)&v26);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (a6 < a1)
      goto LABEL_203;
    if ((uint64_t)(a1 - v16) < 0)
      goto LABEL_204;
    if ((uint64_t)(a6 - a1) < 0)
      goto LABEL_205;
    if ((uint64_t)(v23 - a6) < 0)
      goto LABEL_206;
    v25 = a4;
    v36 = static String._tryFromUTF8(_:)();
    v38 = v37;
    swift_bridgeObjectRelease();
    v75 = v36;
    v76 = v38;
    if (!v38)
      goto LABEL_129;
  }
  v39 = a6 + 9;
  if (v17 < a6 + 9)
    goto LABEL_118;
  if (v23 < a6)
    goto LABEL_186;
  if ((uint64_t)(v23 - a6) < 0)
    goto LABEL_187;
  if (*(_QWORD *)a6 == 0x41544144435B213CLL && *(_BYTE *)(a6 + 8) == 91)
  {
    a4 = v25;
    if (v39 >= v17 - 2)
      goto LABEL_118;
    v41 = 0;
    v42 = v25 + v16 - a6 - 9;
    while (1)
    {
      v43 = (_WORD *)(a6 + v41 + 9);
      if (v23 < (unint64_t)v43)
        break;
      if ((uint64_t)(a6 - v16 + 9 + v41) < 0)
        goto LABEL_179;
      if (v42 < 0)
        goto LABEL_180;
      if (*v43 == 23901 && *(_BYTE *)(a6 + v41 + 11) == 62)
      {
        if (!v76)
          goto LABEL_87;
        if (v41 >= 0xFFFFFFFFFFFFFFF7)
          goto LABEL_210;
        if ((uint64_t)(v39 - v16) < 0)
          goto LABEL_211;
        v22 = v25;
        v45 = static String._tryFromUTF8(_:)();
        if (!v46)
        {
          lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
          swift_allocError();
          *(_OWORD *)v66 = 0u;
          *(_OWORD *)(v66 + 16) = 0u;
          v67 = 6;
          goto LABEL_170;
        }
        String.append(_:)(*(Swift::String *)&v45);
        swift_bridgeObjectRelease();
        a4 = v25;
LABEL_87:
        a1 = a6 + v41 + 12;
        *((_QWORD *)&v78 + 1) = a1;
        a6 = a1;
LABEL_22:
        v21 = a6 + 1;
        if (v17 < a6 + 1)
        {
LABEL_121:
          if (v76)
          {
            if (a1 >= a6)
              return v75;
            if ((uint64_t)(a1 - v16) >= 0)
            {
              if ((uint64_t)(a6 - a1) >= 0)
              {
                if ((uint64_t)(v16 + a4 - a6) >= 0)
                {
                  v56 = static String._tryFromUTF8(_:)();
                  if (v57)
                  {
                    String.append(_:)(*(Swift::String *)&v56);
                    swift_bridgeObjectRelease();
                    return v75;
                  }
LABEL_129:
                  lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
                  swift_allocError();
                  *(_OWORD *)v58 = 0u;
                  *(_OWORD *)(v58 + 16) = 0u;
                  v59 = 6;
                  goto LABEL_174;
                }
LABEL_224:
                __break(1u);
                JUMPOUT(0x181DFB864);
              }
LABEL_223:
              __break(1u);
              goto LABEL_224;
            }
LABEL_222:
            __break(1u);
            goto LABEL_223;
          }
LABEL_136:
          a1 = v73;
          v17 = v74;
          if (a6 < v73)
          {
            __break(1u);
            goto LABEL_138;
          }
LABEL_7:
          if ((uint64_t)(a1 - v16) >= 0)
          {
            if ((uint64_t)(a6 - a1) >= 0)
            {
              if ((uint64_t)(v16 + a4 - a6) >= 0)
              {
                v18 = static String._tryFromUTF8(_:)();
                if (v19)
                {
                  v16 = v18;
                  swift_bridgeObjectRelease();
                  return v16;
                }
                goto LABEL_129;
              }
              goto LABEL_209;
            }
LABEL_208:
            __break(1u);
LABEL_209:
            __break(1u);
LABEL_210:
            __break(1u);
LABEL_211:
            __break(1u);
LABEL_212:
            __break(1u);
LABEL_213:
            __break(1u);
LABEL_214:
            __break(1u);
LABEL_215:
            __break(1u);
LABEL_216:
            __break(1u);
LABEL_217:
            __break(1u);
LABEL_218:
            __break(1u);
LABEL_219:
            __break(1u);
LABEL_220:
            __break(1u);
LABEL_221:
            __break(1u);
            goto LABEL_222;
          }
LABEL_207:
          __break(1u);
          goto LABEL_208;
        }
        goto LABEL_23;
      }
      ++v41;
      --v42;
      if (v22 - 11 == v41)
        goto LABEL_118;
    }
    __break(1u);
LABEL_179:
    __break(1u);
LABEL_180:
    __break(1u);
LABEL_181:
    __break(1u);
LABEL_182:
    __break(1u);
LABEL_183:
    __break(1u);
LABEL_184:
    __break(1u);
LABEL_185:
    __break(1u);
LABEL_186:
    __break(1u);
LABEL_187:
    __break(1u);
    goto LABEL_188;
  }
  _StringGuts.grow(_:)(45);
  swift_bridgeObjectRelease();
  v64 = (_BYTE *)v78;
  v21 = 1;
  if ((unint64_t)v78 >= a6)
  {
LABEL_140:
    v93 = v21;
    v65._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v65);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *(_QWORD *)v66 = 0xD00000000000002BLL;
    *(_QWORD *)(v66 + 8) = 0x8000000182305B30;
    *(_QWORD *)(v66 + 16) = 0;
    *(_QWORD *)(v66 + 24) = 0;
    v67 = 5;
LABEL_170:
    *(_BYTE *)(v66 + 32) = v67;
    goto LABEL_175;
  }
  while (2)
  {
    while (*v64 == 13)
    {
      v68 = __OFADD__(v21++, 1);
      if (v68)
        goto LABEL_212;
      if ((unint64_t)(v64 + 1) >= a6)
        goto LABEL_141;
      if (v64[1] == 10)
        ++v64;
      if ((unint64_t)++v64 >= a6)
        goto LABEL_140;
    }
    if (v25 < 2)
      goto LABEL_213;
    if (*(_BYTE *)(v16 + 1) != 10 || (v68 = __OFADD__(v21, 1), ++v21, !v68))
    {
LABEL_141:
      if ((unint64_t)++v64 >= a6)
        goto LABEL_140;
      continue;
    }
    break;
  }
  __break(1u);
LABEL_154:
  v69 = (_BYTE *)v78;
  v17 = 1;
  if ((unint64_t)v78 >= v21)
  {
LABEL_155:
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *(_QWORD *)v58 = v17;
    goto LABEL_173;
  }
  while (2)
  {
    if (*v69 == 13)
    {
      v68 = __OFADD__(v17++, 1);
      if (v68)
        goto LABEL_220;
      if ((unint64_t)v69 < a6 && v69[1] == 10)
        ++v69;
LABEL_156:
      if ((unint64_t)v69++ >= a6)
        goto LABEL_155;
      continue;
    }
    break;
  }
  if (v22 < 2)
    goto LABEL_221;
  v21 = *(unsigned __int8 *)(v16 + 1);
  if ((_DWORD)v21 != 10)
    goto LABEL_156;
  v68 = __OFADD__(v17++, 1);
  if (!v68)
    goto LABEL_156;
  __break(1u);
LABEL_168:
  v83 = v16;
  v84 = v22;
  v85 = v78;
  v86 = v21;
  v87 = v17;
LABEL_172:
  v71 = BufferReader.lineNumber.getter();
  lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
  swift_allocError();
  *(_QWORD *)v58 = v71;
LABEL_173:
  *(_QWORD *)(v58 + 8) = 0;
  *(_QWORD *)(v58 + 16) = 0;
  *(_QWORD *)(v58 + 24) = 0;
  v59 = 4;
LABEL_174:
  *(_BYTE *)(v58 + 32) = v59;
LABEL_175:
  swift_willThrow();
LABEL_176:
  swift_bridgeObjectRelease();
  return v16;
}

uint64_t closure #1 in static _XMLPlistDecodingFormat.unwrapString<A>(from:in:for:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, char a5@<W4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10)
{
  uint64_t v10;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  unint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  char *v41;
  uint64_t *v42;
  uint64_t *boxed_opaque_existential_1;
  unint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[3];
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[5];
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;

  v68 = a6;
  v18 = *(_QWORD *)(a8 - 8);
  v55 = a7;
  v56 = v18;
  MEMORY[0x1E0C80A78](a1);
  v54 = (char *)v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)v51 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  if ((a5 & 1) != 0)
  {
    v52 = (char *)v51 - v25;
    v53 = v24;
    v27 = v26;
    result = static String._tryFromUTF8(_:)();
    if (v29)
    {
      *a9 = result;
      a9[1] = v29;
      return result;
    }
    v63 = a3;
    v64 = a4;
    v65 = a1;
    v66 = a1;
    v67 = a1 + a2;
    v58 = 0;
    v59 = 0xE000000000000000;
    _StringGuts.grow(_:)(55);
    v31._object = (void *)0x800000018230E760;
    v31._countAndFlagsBits = 0xD000000000000035;
    String.append(_:)(v31);
    v57[0] = BufferReader.lineNumber.getter();
    v32._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v51[2] = v58;
    v51[1] = v59;
    v33 = v27;
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 16);
    v35 = v52;
    v36 = v53;
    v34(v52, v55, v53);
    v34(v22, (uint64_t)v35, v36);
    v37 = v56;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v22, 1, a8) == 1)
    {
      v38 = *(void (**)(char *, uint64_t))(v33 + 8);
      v38(v35, v36);
      v38(v22, v36);
      v39 = v68;
      swift_retain();
LABEL_14:
      v48 = type metadata accessor for DecodingError();
      swift_allocError();
      v50 = v49;
      _CodingPathNode.path.getter(v39);
      swift_bridgeObjectRetain();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v48 - 8) + 104))(v50, *MEMORY[0x1E0DEC458], v48);
      swift_bridgeObjectRelease();
      swift_release();
      return swift_willThrow();
    }
    v40 = *(void (**)(char *, char *, uint64_t))(v37 + 32);
    v41 = v54;
    v40(v54, v22, a8);
    v42 = (uint64_t *)swift_allocObject();
    v42[5] = a8;
    v42[6] = a10;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v42 + 2);
    v40((char *)boxed_opaque_existential_1, v41, a8);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v35, v36);
    v44 = v68;
    v42[7] = v68;
    if (v44 >> 62)
    {
      if (v44 >> 62 != 1)
      {
        v47 = 1;
LABEL_13:
        v42[8] = v47;
        v39 = (unint64_t)v42;
        goto LABEL_14;
      }
      v45 = (uint64_t *)((v44 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      v45 = (uint64_t *)(v44 + 64);
    }
    v46 = *v45;
    result = swift_retain();
    v47 = v46 + 1;
    if (__OFADD__(v46, 1))
    {
      __break(1u);
      return result;
    }
    goto LABEL_13;
  }
  v58 = a3;
  v59 = a4;
  v60 = a1;
  v61 = a1;
  v62 = a1 + a2;
  result = (uint64_t)specialized static XMLPlistScanner.parseString(with:generate:)(&v58, 1, (uint64_t)v57);
  if (!v10)
  {
    v30 = v57[3];
    *a9 = v57[2];
    a9[1] = v30;
  }
  return result;
}

uint64_t static _XMLPlistDecodingFormat.unwrapFloatingPoint<A, B>(from:in:for:_:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  return XMLPlistMap.Value.realValue<A, B>(in:as:for:_:)(a2, a5, a3, a4, a1, a5, a6, a7, a9, a8);
}

void static _XMLPlistDecodingFormat.unwrapFixedWidthInteger<A, B>(from:in:for:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t, __n128);
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  char *v51;
  uint64_t v52;
  uint64_t inited;
  uint64_t v54;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v56;
  void (*v57)(char *, char *, uint64_t);
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  unint64_t v67;
  uint64_t v68;
  double v69;
  unint64_t v70;
  uint64_t v71;

  v62 = a2;
  v65 = a8;
  v66 = (char *)a4;
  v60 = a9;
  v61 = a7;
  v67 = a3;
  v71 = *MEMORY[0x1E0C80C00];
  v59 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v58 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = v11;
  v12 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v58 - v17;
  v19 = type metadata accessor for Optional();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v58 - v21;
  v64 = (char *)a5;
  v23 = *(_QWORD *)(a5 - 8);
  v27 = MEMORY[0x1E0C80A78](v24);
  v29 = (char *)&v58 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v26 >> 60 == 7)
  {
    v40 = *(_QWORD *)(v26 + 16);
    v41 = *(_QWORD *)(v26 + 24);
    MEMORY[0x1E0C80A78](v25);
    v42 = v68;
    *(&v58 - 8) = v64;
    *(&v58 - 7) = (char *)v42;
    v43 = v65;
    *(&v58 - 6) = v61;
    *(&v58 - 5) = (char *)v43;
    v44 = v67;
    *(&v58 - 4) = v45;
    *(&v58 - 3) = (char *)v44;
    *(&v58 - 2) = v66;
    v46 = *(_QWORD *)(v62 + 24);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v46 + 40));
    closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)((_QWORD *)(v46 + 16), (uint64_t (*)(uint64_t, uint64_t))partial apply for closure #1 in XMLPlistMap.Value.integerValue<A, B>(in:as:for:_:), (uint64_t)(&v58 - 10), v40, v41);
    os_unfair_lock_unlock((os_unfair_lock_t)(v46 + 40));
    swift_release();
    return;
  }
  if (v26 >> 60 == 6)
  {
    v30 = v63;
    v31 = specialized XMLPlistMap.Value.realValue<A, B>(in:as:for:_:)(v62, v67, (uint64_t)v66, v26, v68, v65);
    if (v30)
      return;
    v69 = v31;
    lazy protocol witness table accessor for type Double and conformance Double();
    v32 = (uint64_t)v64;
    dispatch thunk of FloatingPoint.init<A>(_:)();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v22, 1, v32) != 1)
    {
      v57 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
      v57(v29, v22, v32);
      v57(v60, v29, v32);
      return;
    }
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
    v69 = 0.0;
    v70 = 0xE000000000000000;
    _StringGuts.grow(_:)(52);
    v33._countAndFlagsBits = 0xD00000000000001DLL;
    v33._object = (void *)0x800000018230D0E0;
    String.append(_:)(v33);
    Double.write<A>(to:)();
    v34._object = (void *)0x800000018230D100;
    v34._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v34);
    v35._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    v36._countAndFlagsBits = 46;
    v36._object = (void *)0xE100000000000000;
    String.append(_:)(v36);
    v37 = *(_QWORD *)&v69;
    v38 = v70;
    type metadata accessor for DecodingError();
    swift_allocError();
    static DecodingError._dataCorrupted<A>(_:for:_:)(v37, v38, v67, (uint64_t)v66, v68, v65, v39);
  }
  else
  {
    v63 = v26;
    v47 = *(void (**)(char *, char *, uint64_t, __n128))(v13 + 16);
    v47(v18, v66, v12, v27);
    ((void (*)(char *, char *, uint64_t))v47)(v15, v18, v12);
    v48 = v59;
    v49 = v68;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v15, 1, v68) == 1)
    {
      v50 = *(void (**)(char *, uint64_t))(v13 + 8);
      v50(v15, v12);
      _CodingPathNode.path.getter(v67);
      v50(v18, v12);
    }
    else
    {
      v51 = v58;
      (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v58, v15, v49);
      v52 = _CodingPathNode.path.getter(v67);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      v54 = v65;
      *(_QWORD *)(inited + 56) = v49;
      *(_QWORD *)(inited + 64) = v54;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v48 + 16))(boxed_opaque_existential_1, v51, v49);
      v69 = *(double *)&v52;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
      (*(void (**)(char *, uint64_t))(v48 + 8))(v51, v49);
    }
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)((uint64_t)v64, v63, v56);
  }
  swift_bridgeObjectRelease();
  swift_willThrow();
}

uint64_t protocol witness for static PlistDecodingFormat.container<A>(keyedBy:for:referencing:codingPathNode:) in conformance _XMLPlistDecodingFormat(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t a4)
{
  return static _XMLPlistDecodingFormat.container<A>(keyedBy:for:referencing:codingPathNode:)(a1, *a2, a3, a4);
}

uint64_t protocol witness for static PlistDecodingFormat.unkeyedContainer(for:referencing:codingPathNode:) in conformance _XMLPlistDecodingFormat@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return static _XMLPlistDecodingFormat.unkeyedContainer(for:referencing:codingPathNode:)(*a1, a2, a3, a4);
}

BOOL protocol witness for static PlistDecodingFormat.valueIsNull(_:) in conformance _XMLPlistDecodingFormat(_QWORD *a1)
{
  return *a1 == 0x8000000000000000;
}

uint64_t protocol witness for static PlistDecodingFormat.unwrapBool<A>(from:for:_:) in conformance _XMLPlistDecodingFormat(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static _XMLPlistDecodingFormat.unwrapBool<A>(from:for:_:)(*a1, a2, a3, a4, a5) & 1;
}

uint64_t protocol witness for static PlistDecodingFormat.unwrapDate<A>(from:in:for:_:) in conformance _XMLPlistDecodingFormat@<X0>(uint64_t a1@<X1>, os_unfair_lock_s *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  return static _XMLPlistDecodingFormat.unwrapDate<A>(from:in:for:_:)(a1, a2, a3, a4, a5, a6);
}

uint64_t protocol witness for static PlistDecodingFormat.unwrapData<A>(from:in:for:_:) in conformance _XMLPlistDecodingFormat(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static _XMLPlistDecodingFormat.unwrapData<A>(from:in:for:_:)(*a1, a2, a3, a4, a5, a6);
}

uint64_t protocol witness for static PlistDecodingFormat.unwrapString<A>(from:in:for:_:) in conformance _XMLPlistDecodingFormat(uint64_t *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static _XMLPlistDecodingFormat.unwrapString<A>(from:in:for:_:)(*a1, a2, a3, a4, a5, a6);
}

uint64_t protocol witness for static PlistDecodingFormat.unwrapFloatingPoint<A, B>(from:in:for:_:) in conformance _XMLPlistDecodingFormat@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  return static _XMLPlistDecodingFormat.unwrapFloatingPoint<A, B>(from:in:for:_:)(*a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void protocol witness for static PlistDecodingFormat.unwrapFixedWidthInteger<A, B>(from:in:for:_:) in conformance _XMLPlistDecodingFormat(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>)
{
  static _XMLPlistDecodingFormat.unwrapFixedWidthInteger<A, B>(from:in:for:_:)(*a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t partial apply for closure #1 in XMLPlistMap.Value.integerValue<A, B>(in:as:for:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;

  return closure #1 in XMLPlistMap.Value.integerValue<A, B>(in:as:for:_:)(a1, a2, a3, a4, *(_QWORD *)(v5 + 56), *(_QWORD *)(v5 + 64), *(_QWORD *)(v5 + 16), a5, *(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40));
}

_QWORD *specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)@<X0>(_QWORD *result@<X0>, _QWORD *(*a2)(_QWORD *__return_ptr, uint64_t, uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  _QWORD v11[2];

  v8 = result[1];
  v9 = v8 < a4 + a3 || v8 < a4;
  if (v9 || (a4 | a3) < 0 || v8 <= a3)
  {
    __break(1u);
  }
  else
  {
    result = a2(v11, *result + a3, a4);
    if (!v5)
    {
      v10 = v11[1];
      *a5 = v11[0];
      a5[1] = v10;
    }
  }
  return result;
}

uint64_t specialized closure #1 in static _XMLPlistDecodingFormat.unwrapString<A>(from:in:for:_:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;

  result = specialized closure #1 in static _XMLPlistDecodingFormat.unwrapString<A>(from:in:for:_:)(a1, a2, a3, a4, a5, a6, *(_QWORD *)a7, *(_QWORD *)(a7 + 8), *(_QWORD *)(a7 + 16), *(_BYTE *)(a7 + 24));
  if (!v8)
  {
    *a8 = result;
    a8[1] = v11;
  }
  return result;
}

unint64_t specialized closure #1 in XMLPlistMap.Value.integerValue<A, B>(in:as:for:_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, unint64_t *a8@<X8>, uint64_t a9)
{
  uint64_t v9;
  unint64_t result;

  result = specialized closure #1 in XMLPlistMap.Value.integerValue<A, B>(in:as:for:_:)(a1, a2, a3, a4, a5, a6, a7, a9, (uint64_t (*)(unint64_t, unint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:), specialized _parseIntegerDigits<A>(_:isNegative:));
  if (!v9)
    *a8 = result;
  return result;
}

{
  uint64_t v9;
  unint64_t result;

  result = specialized closure #1 in XMLPlistMap.Value.integerValue<A, B>(in:as:for:_:)(a1, a2, a3, a4, a5, a6, a7, a9, (uint64_t (*)(unint64_t, unint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:), (uint64_t (*)(void))specialized _parseIntegerDigits<A>(_:isNegative:));
  if (!v9)
    *a8 = result;
  return result;
}

_QWORD *specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)@<X0>(_QWORD *a1@<X0>, _QWORD *(*a2)(uint64_t *__return_ptr, uint64_t, uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  return specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)(a1, a2, a3, a4, a5);
}

void partial apply for specialized closure #1 in XMLPlistMap.Value.realValue<A, B>(in:as:for:_:)(const char *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  specialized closure #1 in XMLPlistMap.Value.realValue<A, B>(in:as:for:_:)(a1, a2, *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
  if (!v4)
    *a3 = v6;
}

_QWORD *specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)@<X0>(_QWORD *result@<X0>, _QWORD *(*a2)(uint64_t *__return_ptr, uint64_t, uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  v8 = result[1];
  v9 = v8 < a4 + a3 || v8 < a4;
  if (v9 || (a4 | a3) < 0 || v8 <= a3)
  {
    __break(1u);
  }
  else
  {
    result = a2(&v10, *result + a3, a4);
    if (!v5)
      *a5 = v10;
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  v8 = result[1];
  v9 = v8 < a4 + a3 || v8 < a4;
  if (v9 || (a4 | a3) < 0 || v8 <= a3)
  {
    __break(1u);
  }
  else
  {
    result = a2(&v10, *result + a3, a4);
    if (!v5)
      *a5 = v10;
  }
  return result;
}

unint64_t _s10Foundation11XMLPlistMapC5ValueO07integerD02in2as3for_xAC_xmAA15_CodingPathNodeOq_SgtKs17FixedWidthIntegerRzs0I3KeyR_r0_lFxAA10BufferViewVys5UInt8VG_AStYbKXEfU_A2sekLs6UInt64Vs5Error_pAURszsANR_r0_lIethyyggndzo_TP5TA_0@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  return _s10Foundation11XMLPlistMapC5ValueO07integerD02in2as3for_xAC_xmAA15_CodingPathNodeOq_SgtKs17FixedWidthIntegerRzs0I3KeyR_r0_lFxAA10BufferViewVys5UInt8VG_AStYbKXEfU_A2sekLs6UInt64Vs5Error_pAURszsANR_r0_lIethyyggndzo_TP5TATm_0(a1, a2, a3, a4, (uint64_t (*)(unint64_t, unint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:), (uint64_t (*)(void))specialized _parseIntegerDigits<A>(_:isNegative:), a5);
}

unint64_t _s10Foundation11XMLPlistMapC5ValueO07integerD02in2as3for_xAC_xmAA15_CodingPathNodeOq_SgtKs17FixedWidthIntegerRzs0I3KeyR_r0_lFxAA10BufferViewVys5UInt8VG_AStYbKXEfU_A2sekLs5Int64Vs5Error_pAURszsANR_r0_lIethyyggndzo_TP5TA_0@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  return _s10Foundation11XMLPlistMapC5ValueO07integerD02in2as3for_xAC_xmAA15_CodingPathNodeOq_SgtKs17FixedWidthIntegerRzs0I3KeyR_r0_lFxAA10BufferViewVys5UInt8VG_AStYbKXEfU_A2sekLs6UInt64Vs5Error_pAURszsANR_r0_lIethyyggndzo_TP5TATm_0(a1, a2, a3, a4, (uint64_t (*)(unint64_t, unint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:), specialized _parseIntegerDigits<A>(_:isNegative:), a5);
}

unint64_t _s10Foundation11XMLPlistMapC5ValueO07integerD02in2as3for_xAC_xmAA15_CodingPathNodeOq_SgtKs17FixedWidthIntegerRzs0I3KeyR_r0_lFxAA10BufferViewVys5UInt8VG_AStYbKXEfU_A2sekLs6UInt64Vs5Error_pAURszsANR_r0_lIethyyggndzo_TP5TATm_0@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(unint64_t, unint64_t, uint64_t)@<X4>, uint64_t (*a6)(void)@<X5>, unint64_t *a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t result;

  result = specialized closure #1 in XMLPlistMap.Value.integerValue<A, B>(in:as:for:_:)(a1, a2, a3, a4, *(_QWORD *)(v7 + 40), *(_QWORD *)(v7 + 48), *(_QWORD *)(v7 + 16), *(_QWORD *)(v7 + 24), a5, a6);
  if (!v8)
    *a7 = result;
  return result;
}

unint64_t specialized XMLPlistMap.Value._parseXMLPlistInteger<A>(_:)(unint64_t result, uint64_t (*a2)(unint64_t, unint64_t, uint64_t), uint64_t (*a3)(void))
{
  unsigned __int8 *v3;
  unint64_t v4;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;

  v3 = *(unsigned __int8 **)(result + 24);
  v4 = *(_QWORD *)(result + 32);
  if ((unsigned __int8 *)v4 == v3)
    return 0;
  v7 = result;
  v8 = *(_QWORD *)result;
  v9 = *(_QWORD *)(result + 8);
  v10 = v3 + 1;
  if (v4 < (unint64_t)(v3 + 1))
  {
    v11 = 0;
    goto LABEL_11;
  }
  if ((uint64_t)&v3[-v8] < 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (((v4 - (_QWORD)v3) & 0x8000000000000000) != 0)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if ((uint64_t)(v8 + v9 - v4) >= 0)
  {
    v11 = 0;
    v12 = *v3;
    if (v12 != 43)
    {
      if (v12 != 45)
        goto LABEL_11;
      v11 = 1;
    }
    *(_QWORD *)(result + 24) = v10;
    specialized XMLPlistMap.Value._skipIntegerWhitespace(_:)((_QWORD *)result);
LABEL_11:
    result = *(_QWORD *)(v7 + 24);
    if (v4 < result)
    {
      __break(1u);
    }
    else if ((uint64_t)(result - v8) >= 0)
    {
      if ((uint64_t)(v4 - result) >= 0)
      {
        if ((uint64_t)(v8 + v9 - v4) >= 0)
        {
          v13 = result + 2;
          v14 = v4 - (result + 2);
          if (v4 < result + 2 || *(_BYTE *)result != 48 || (*(unsigned __int8 *)(result + 1) | 0x20) != 0x78)
            return a3();
          *(_QWORD *)(v7 + 24) = v13;
          if ((((v13 - v8) | v14) & 0x8000000000000000) == 0)
            return a2(result + 2, v14, v11);
          goto LABEL_29;
        }
        goto LABEL_25;
      }
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    __break(1u);
    goto LABEL_24;
  }
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

unint64_t specialized closure #1 in XMLPlistMap.Value.integerValue<A, B>(in:as:for:_:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(unint64_t, unint64_t, uint64_t), uint64_t (*a10)(void))
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t result;
  char v24;
  unsigned __int8 *v25;
  uint64_t v26;
  BOOL v27;
  unsigned __int8 *v28;
  uint64_t v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  unint64_t v44;
  unsigned __int8 *v45;
  uint64_t v46;

  v37 = a7;
  v38 = a8;
  v35 = a5;
  v36 = a6;
  v14 = type metadata accessor for Unicode.Scalar.Properties();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (unint64_t)&a1[a2];
  v41 = a3;
  v42 = a4;
  v43 = a1;
  v44 = (unint64_t)a1;
  v45 = &a1[a2];
  if (a2 >= 1)
  {
    while (v18 >= (unint64_t)a1)
    {
      if ((uint64_t)&a1[-a3] < 0)
        goto LABEL_65;
      if ((uint64_t)(v18 - (_QWORD)a1) < 0)
        goto LABEL_66;
      if ((uint64_t)(a3 + a4 - v18) < 0)
        goto LABEL_67;
      v19 = *a1;
      if (v19 < 0x21 || (v19 - 127) <= 0x21u)
      {
        ++a1;
      }
      else
      {
        if ((v19 & 0xC0) == 0x80)
          goto LABEL_28;
        if ((v19 & 0x80) != 0)
        {
          v22 = (__clz(v19 ^ 0xFF) - 24);
          if (v18 - (unint64_t)a1 < v22)
            goto LABEL_28;
          switch(v22)
          {
            case 1uLL:
              goto LABEL_28;
            case 2uLL:
              if ((a1[1] & 0xC0) != 0x80)
                goto LABEL_28;
              v20 = 2;
              break;
            case 3uLL:
              if ((a1[1] & 0xC0) != 0x80 || (a1[2] & 0xC0) != 0x80)
                goto LABEL_28;
              v20 = 3;
              break;
            case 4uLL:
              if ((a1[1] & 0xC0) != 0x80 || (a1[2] & 0xC0) != 0x80 || (a1[3] & 0xC0) != 0x80)
                goto LABEL_28;
              v20 = 4;
              break;
            default:
              goto LABEL_72;
          }
        }
        else
        {
          if ((unsigned __int8 *)v18 == a1)
            goto LABEL_44;
          v20 = 1;
        }
        Unicode.Scalar.properties.getter();
        v21 = Unicode.Scalar.Properties.isWhitespace.getter();
        (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
        a1 = (unsigned __int8 *)v44;
        v18 = (unint64_t)v45;
        if ((v21 & 1) == 0)
          goto LABEL_28;
        a1 = (unsigned __int8 *)(v44 + v20);
        a3 = v41;
        a4 = v42;
      }
      v44 = (unint64_t)a1;
      if (v18 < (unint64_t)(a1 + 1))
        goto LABEL_28;
    }
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x181DFCC18);
  }
LABEL_28:
  if ((unsigned __int8 *)v18 == a1)
    goto LABEL_44;
  result = specialized XMLPlistMap.Value._parseXMLPlistInteger<A>(_:)((unint64_t)&v41, a9, a10);
  if ((v24 & 1) == 0)
    return result;
  v39 = 0;
  v40 = 0xE000000000000000;
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v39 = 0xD000000000000020;
  v40 = 0x8000000182305E40;
  v25 = v43;
  if ((unint64_t)v43 >= v44)
  {
    v26 = 1;
LABEL_61:
    v46 = v26;
    goto LABEL_62;
  }
  v26 = 1;
  while (1)
  {
    if (*v25 == 13)
    {
      v27 = __OFADD__(v26++, 1);
      if (v27)
        goto LABEL_70;
      if ((unint64_t)(v25 + 1) < v44 && v25[1] == 10)
        ++v25;
      goto LABEL_32;
    }
    if (v42 < 2)
      goto LABEL_71;
    if (*(_BYTE *)(v41 + 1) == 10)
    {
      v27 = __OFADD__(v26++, 1);
      if (v27)
        break;
    }
LABEL_32:
    if ((unint64_t)++v25 >= v44)
      goto LABEL_61;
  }
  __break(1u);
LABEL_44:
  v39 = 0;
  v40 = 0xE000000000000000;
  _StringGuts.grow(_:)(38);
  swift_bridgeObjectRelease();
  v39 = 0xD000000000000024;
  v40 = 0x8000000182305E70;
  v28 = v43;
  if ((unint64_t)v43 < v18)
  {
    v29 = 1;
    while (1)
    {
      if (*v28 == 13)
      {
        v27 = __OFADD__(v29++, 1);
        if (v27)
          goto LABEL_68;
        if ((unint64_t)(v28 + 1) < v18 && v28[1] == 10)
          ++v28;
      }
      else
      {
        if (v42 < 2)
          goto LABEL_69;
        if (*(_BYTE *)(v41 + 1) == 10)
        {
          v27 = __OFADD__(v29++, 1);
          if (v27)
          {
            __break(1u);
            break;
          }
        }
      }
      if ((unint64_t)++v28 >= v18)
        goto LABEL_59;
    }
  }
  v29 = 1;
LABEL_59:
  v46 = v29;
LABEL_62:
  v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v32 = v39;
  v31 = v40;
  type metadata accessor for DecodingError();
  swift_allocError();
  static DecodingError._dataCorrupted<A>(_:for:_:)(v32, v31, v35, v36, v37, v38, v33);
  swift_bridgeObjectRelease();
  return swift_willThrow();
}

uint64_t specialized closure #1 in static XMLPlistMap.Value.parseSpecialRealValue<A, B>(_:fullSource:for:_:)(const char *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  unsigned int v7;
  Swift::String v13;
  uint64_t v14;
  const char *v15;
  size_t v16;

  if (!a2)
  {
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    type metadata accessor for DecodingError();
    swift_allocError();
    static DecodingError._dataCorrupted<A>(_:for:_:)(0xD000000000000026, 0x8000000182305DF0, a3, a4, a5, a6, v14);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  v6 = *(unsigned __int8 *)a1;
  v7 = v6 & 0xFFFFFFDF;
  if (a2 == 3 && v7 == 78)
  {
    if ((*((unsigned __int8 *)a1 + 1) | 0x20) == 0x61 && (*((unsigned __int8 *)a1 + 2) | 0x20) == 0x6E)
      return 0x7FF8000000000000;
    return 0;
  }
  if (a2 != 9 || v6 != 43)
  {
    if (a2 == 4 && v6 == 43)
    {
      if ((*((unsigned __int8 *)a1 + 1) | 0x20) == 0x69
        && (*((unsigned __int8 *)a1 + 2) | 0x20) == 0x6E
        && (*((unsigned __int8 *)a1 + 3) | 0x20) == 0x66)
      {
        return 0x7FF0000000000000;
      }
      return 0;
    }
    if (a2 == 9 && v6 == 45)
    {
      if (_stringshims_strncasecmp_l(a1, "-infinity", 9uLL, 0))
        return 0;
    }
    else
    {
      if (a2 != 4 || v6 != 45)
      {
        if (a2 != 8 || v7 != 73)
          return 0;
        v15 = "infinity";
        v16 = 8;
        goto LABEL_11;
      }
      if ((*((unsigned __int8 *)a1 + 1) | 0x20) != 0x69
        || (*((unsigned __int8 *)a1 + 2) | 0x20) != 0x6E
        || (*((unsigned __int8 *)a1 + 3) | 0x20) != 0x66)
      {
        return 0;
      }
    }
    return 0xFFF0000000000000;
  }
  v15 = "+infinity";
  v16 = 9;
LABEL_11:
  if (!_stringshims_strncasecmp_l(a1, v15, v16, 0))
    return 0x7FF0000000000000;
  return 0;
}

double specialized closure #1 in closure #1 in XMLPlistMap.Value.realValue<A, B>(in:as:for:_:)(const char *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double v12;
  double v13;
  Swift::String v14;
  uint64_t v15;
  char *v17[2];

  v17[1] = *(char **)MEMORY[0x1E0C80C00];
  v17[0] = 0;
  v12 = _stringshims_strtod_l(a1, v17, 0);
  if (!v17[0])
    __break(1u);
  v13 = v12;
  if (&a1[a2] != v17[0])
  {
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease();
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    type metadata accessor for DecodingError();
    swift_allocError();
    static DecodingError._dataCorrupted<A>(_:for:_:)(0xD000000000000026, 0x8000000182305DF0, a3, a4, a5, a6, v15);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
  return v13;
}

void specialized closure #1 in XMLPlistMap.Value.realValue<A, B>(in:as:for:_:)(const char *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  char v13;
  const char *v14;
  Swift::String v15;
  uint64_t v16;

  specialized closure #1 in static XMLPlistMap.Value.parseSpecialRealValue<A, B>(_:fullSource:for:_:)(a1, a2, a3, a4, a5, a6);
  if (!v6 && (v13 & 1) != 0)
  {
    if (a2 < 1)
    {
LABEL_7:
      specialized closure #1 in closure #1 in XMLPlistMap.Value.realValue<A, B>(in:as:for:_:)(a1, a2, a3, a4, a5, a6);
    }
    else
    {
      v14 = a1;
      while (2)
      {
        switch(*v14)
        {
          case 9:
          case 0xA:
          case 0xD:
          case 0x20:
          case 0x2B:
          case 0x2D:
          case 0x30:
            if (++v14 >= &a1[a2])
              goto LABEL_7;
            continue;
          case 0xB:
          case 0xC:
          case 0xE:
          case 0xF:
          case 0x10:
          case 0x11:
          case 0x12:
          case 0x13:
          case 0x14:
          case 0x15:
          case 0x16:
          case 0x17:
          case 0x18:
          case 0x19:
          case 0x1A:
          case 0x1B:
          case 0x1C:
          case 0x1D:
          case 0x1E:
          case 0x1F:
          case 0x21:
          case 0x22:
          case 0x23:
          case 0x24:
          case 0x25:
          case 0x26:
          case 0x27:
          case 0x28:
          case 0x29:
          case 0x2A:
          case 0x2C:
          case 0x2E:
          case 0x2F:
          case 0x31:
          case 0x32:
          case 0x33:
          case 0x34:
          case 0x35:
          case 0x36:
          case 0x37:
          case 0x38:
          case 0x39:
          case 0x3A:
          case 0x3B:
          case 0x3C:
          case 0x3D:
          case 0x3E:
          case 0x3F:
          case 0x40:
          case 0x41:
          case 0x42:
          case 0x43:
          case 0x44:
          case 0x45:
          case 0x46:
          case 0x47:
          case 0x48:
          case 0x49:
          case 0x4A:
          case 0x4B:
          case 0x4C:
          case 0x4D:
          case 0x4E:
          case 0x4F:
          case 0x50:
          case 0x51:
          case 0x52:
          case 0x53:
          case 0x54:
          case 0x55:
          case 0x56:
          case 0x57:
            goto LABEL_7;
          case 0x58:
            goto LABEL_10;
          default:
            if (*v14 != 120)
              goto LABEL_7;
            break;
        }
        break;
      }
LABEL_10:
      _StringGuts.grow(_:)(40);
      swift_bridgeObjectRelease();
      v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v15);
      swift_bridgeObjectRelease();
      type metadata accessor for DecodingError();
      swift_allocError();
      static DecodingError._dataCorrupted<A>(_:for:_:)(0xD000000000000026, 0x8000000182305DF0, a3, a4, a5, a6, v16);
      swift_bridgeObjectRelease();
      swift_willThrow();
    }
  }
}

uint64_t partial apply for closure #1 in static _XMLPlistDecodingFormat.unwrapString<A>(from:in:for:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;

  return closure #1 in static _XMLPlistDecodingFormat.unwrapString<A>(from:in:for:_:)(a1, a2, a3, a4, *(_BYTE *)(v5 + 32), *(_QWORD *)(v5 + 40), *(_QWORD *)(v5 + 48), *(_QWORD *)(v5 + 16), a5, *(_QWORD *)(v5 + 24));
}

uint64_t sub_181DFD1EC()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type _PlistUnkeyedDecodingContainer<_XMLPlistDecodingFormat> and conformance _PlistUnkeyedDecodingContainer<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _PlistUnkeyedDecodingContainer<_XMLPlistDecodingFormat> and conformance _PlistUnkeyedDecodingContainer<A>;
  if (!lazy protocol witness table cache variable for type _PlistUnkeyedDecodingContainer<_XMLPlistDecodingFormat> and conformance _PlistUnkeyedDecodingContainer<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _PlistUnkeyedDecodingContainer<_XMLPlistDecodingFormat>);
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for _PlistUnkeyedDecodingContainer<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PlistUnkeyedDecodingContainer<_XMLPlistDecodingFormat> and conformance _PlistUnkeyedDecodingContainer<A>);
  }
  return result;
}

uint64_t sub_181DFD268()
{
  uint64_t v0;
  unint64_t v1;

  swift_release();
  swift_release();
  v1 = *(_QWORD *)(v0 + 40);
  if ((~v1 & 0xF000000000000007) != 0)
    outlined consume of XMLPlistMap.Value(v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in static _XMLPlistDecodingFormat.unwrapString<A>(from:in:for:_:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;

  return specialized closure #1 in static _XMLPlistDecodingFormat.unwrapString<A>(from:in:for:_:)(a1, a2, a3, a4, *(_BYTE *)(v5 + 16), *(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32), a5);
}

uint64_t sub_181DFD2D0()
{
  uint64_t v0;

  outlined consume of _CodingKey(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  return swift_deallocObject();
}

uint64_t specialized static AttributedString.parseMarkdown<A>(_:including:options:baseURL:)(_QWORD *a1, uint64_t a2, unint64_t a3, int a4, NSError *a5, NSError *a6, int a7, void *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  unint64_t v24;
  unint64_t v25;
  _QWORD v26[2];
  uint64_t v27;
  char v28;
  int v29;

  v9 = v8;
  swift_bridgeObjectRetain();
  v29 = a7;
  if ((a3 & 0x1000000000000000) != 0)
  {
    a2 = static String._copying(_:)();
    v25 = v24;
    swift_bridgeObjectRelease();
    a3 = v25;
  }
  if ((a3 & 0x2000000000000000) != 0)
  {
    v26[0] = a2;
    v26[1] = a3 & 0xFFFFFFFFFFFFFFLL;
    v22 = specialized static AttributedString._parseMarkdown<A>(markdownData:including:options:baseURL:)(&v27, (uint64_t)v26, (uint64_t)v26 + (HIBYTE(a3) & 0xF), a4 & 0x1FF01, a5, a6, v29 & 1, a8);
    if (!v9)
    {
      v28 = v22 & 1;
      swift_bridgeObjectRelease();
      LOBYTE(v9) = v28;
      goto LABEL_14;
    }
  }
  else
  {
    if ((a2 & 0x1000000000000000) != 0)
    {
      v18 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
      v19 = a2 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v18 = _StringObject.sharedUTF8.getter();
    }
    if (v18)
      v20 = v18 + v19;
    else
      v20 = 0;
    v21 = specialized static AttributedString._parseMarkdown<A>(markdownData:including:options:baseURL:)(&v27, v18, v20, a4 & 0x1FF01, a5, a6, v29 & 1, a8);
    if (!v9)
    {
      LOBYTE(v9) = v21;
      swift_bridgeObjectRelease();
LABEL_14:
      *a1 = v27;
      return v9 & 1;
    }
  }
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t AttributedString.init(markdown:options:baseURL:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned __int8 *a3@<X2>, void **a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  void *v7;
  int v8;
  uint64_t result;
  uint64_t v10;

  v7 = *a4;
  if (a3[2])
    v8 = 0x10000;
  else
    v8 = 0;
  specialized static AttributedString.parseMarkdown<A>(_:including:options:baseURL:)(&v10, a1, a2, *a3 | (a3[1] << 8) | v8, *((NSError **)a3 + 1), *((NSError **)a3 + 2), a3[24], v7);
  swift_bridgeObjectRelease();
  outlined consume of URL?(v7);
  result = swift_bridgeObjectRelease();
  if (!v5)
    *a5 = v10;
  return result;
}

uint64_t specialized _AttributedStringFromMarkdownCreatorConcrete.init(scope:options:)(char a1)
{
  _BYTE *v1;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  objc_super v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v1[direct field offset for _AttributedStringFromMarkdownCreatorConcrete.hasInflectionAttributes] = 0;
  v3 = v1;
  BigString.init()();
  v11 = 0;
  MEMORY[0x186DA9E90](&v11, 8);
  v4 = v11;
  type metadata accessor for AttributedString.Guts();
  v5 = swift_allocObject();
  result = BigString.isEmpty.getter();
  if ((result & 1) != 0)
  {
    v7 = v13;
    *(_OWORD *)(v5 + 16) = v12;
    *(_OWORD *)(v5 + 32) = v7;
    *(_OWORD *)(v5 + 48) = v14;
    *(_QWORD *)(v5 + 64) = 0;
    *(_QWORD *)(v5 + 72) = 0;
    *(_QWORD *)(v5 + 80) = 0;
    *(_QWORD *)(v5 + 88) = v4;
    *(_QWORD *)&v3[direct field offset for _AttributedStringFromMarkdownCreatorConcrete.str] = v5;
    swift_bridgeObjectRelease();
    if ((a1 & 1) != 0)
    {
      specialized static AttributeScope.scopeDescription.getter();
      v8 = v9;
      swift_bridgeObjectRelease();
    }
    else
    {
      v8 = MEMORY[0x1E0DEE9E0];
    }
    *(_QWORD *)&v3[direct field offset for _AttributedStringFromMarkdownCreatorConcrete.attributeTable] = v8;

    v10.receiver = v3;
    v10.super_class = (Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _AttributedStringFromMarkdownCreatorConcrete<AttributeScopes.FoundationAttributes>);
    return (uint64_t)objc_msgSendSuper2(&v10, sel_init);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _AttributedStringFromMarkdownCreatorConcrete.append(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  os_unfair_lock_s *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t countAndFlagsBits;
  Swift::String_optional v23;
  void *object;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  Swift::String_optional v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59[8];
  _OWORD v60[3];
  _OWORD v61[6];
  _OWORD v62[3];
  __int128 v63[3];
  _BYTE v64[40];
  __int128 v65[3];
  _BYTE v66[56];

  v1 = v0;
  v2 = direct field offset for _AttributedStringFromMarkdownCreatorConcrete.str;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = *(_OWORD *)(v3 + 16);
    v5 = *(_OWORD *)(v3 + 48);
    v62[1] = *(_OWORD *)(v3 + 32);
    v62[2] = v5;
    v62[0] = v4;
    v6 = *(_QWORD *)(v3 + 64);
    v7 = *(_QWORD *)(v3 + 72);
    v8 = *(_QWORD *)(v3 + 80);
    v9 = *(_QWORD *)(v3 + 88);
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v62);
    swift_unknownObjectRetain();
    *(_QWORD *)(v1 + v2) = AttributedString.Guts.init(string:runs:)(v62, v6, v7, v8, v9);
    swift_release();
  }
  v45 = v2;
  v10 = *(_OWORD **)(v1 + v2);
  v11 = v10[2];
  v61[3] = v10[1];
  v61[4] = v11;
  v61[5] = v10[3];
  v49 = v10;
  v50 = BigString.startIndex.getter();
  v51 = BigString.endIndex.getter();
  v52 = v12;
  v53 = v13;
  v54 = v14;
  v15 = one-time initialization token for currentIdentity;
  swift_retain();
  if (v15 != -1)
LABEL_14:
    swift_once();
  v16 = (uint64_t *)(static AttributedString.currentIdentity + 16);
  v17 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
  swift_retain();
  os_unfair_lock_lock(v17);
  closure #1 in static AttributedString._nextModifyIdentity.getter(v16, v59);
  os_unfair_lock_unlock(v17);
  swift_release();
  v44 = v59[0];
  v55 = v59[0];
  BigString.init()();
  v59[0] = 0;
  MEMORY[0x186DA9E90](v59, 8);
  v18 = v59[0];
  type metadata accessor for AttributedString.Guts();
  v19 = swift_allocObject();
  result = BigString.isEmpty.getter();
  if ((result & 1) != 0)
  {
    *(_OWORD *)(v19 + 16) = v56;
    *(_OWORD *)(v19 + 32) = v57;
    *(_OWORD *)(v19 + 48) = v58;
    *(_QWORD *)(v19 + 64) = 0;
    *(_QWORD *)(v19 + 72) = 0;
    *(_QWORD *)(v19 + 80) = 0;
    *(_QWORD *)(v19 + 88) = v18;
    v21 = v45;
    *(_QWORD *)(v1 + v45) = v19;
    swift_release();
    v23 = String.Iterator.next()();
    countAndFlagsBits = v23.value._countAndFlagsBits;
    if (v23.value._object)
    {
      object = v23.value._object;
      v43 = v1;
      do
      {
        if (v51 >> 10 < v50 >> 10)
        {
          __break(1u);
          goto LABEL_14;
        }
        v25 = v49[1];
        v26 = v49[3];
        v61[1] = v49[2];
        v61[2] = v26;
        v61[0] = v25;
        v27 = v49[1];
        v63[1] = v49[2];
        v63[2] = v26;
        v63[0] = v27;
        v48 = countAndFlagsBits;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v63, (uint64_t)v64);
        outlined retain of Locale((uint64_t)v64);
        v28 = MEMORY[0x186DA3EC0](v51, v52, v53, v54);
        v1 = v29;
        v46 = v31;
        v47 = v30;
        outlined release of Locale((uint64_t)v61);
        v32 = v49[1];
        v33 = v49[3];
        v60[1] = v49[2];
        v60[2] = v33;
        v60[0] = v32;
        v34 = v49[1];
        v65[1] = v49[2];
        v65[2] = v33;
        v65[0] = v34;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v65, (uint64_t)v66);
        outlined retain of Locale((uint64_t)v66);
        v35 = MEMORY[0x186DA3EC0](v51, v52, v53, v54);
        v37 = v36;
        v39 = v38;
        v41 = v40;
        outlined release of Locale((uint64_t)v60);
        v59[0] = v28;
        v59[1] = v1;
        v59[2] = v47;
        v59[3] = v46;
        v59[4] = v35;
        v59[5] = v37;
        v59[6] = v39;
        v59[7] = v41;
        specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)((unint64_t *)v59, v48, (uint64_t)object);
        swift_bridgeObjectRelease();
        v42 = String.Iterator.next()();
        countAndFlagsBits = v42.value._countAndFlagsBits;
        object = v42.value._object;
      }
      while (v42.value._object);
      swift_bridgeObjectRelease();
      v1 = v43;
      v21 = v45;
      if (v55 == v44)
        goto LABEL_12;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    swift_bridgeObjectRelease();
LABEL_12:
    *(_QWORD *)(v1 + v21) = v49;
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t @objc _AttributedStringFromMarkdownCreatorConcrete.append(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4;

  static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v4 = a1;
  _AttributedStringFromMarkdownCreatorConcrete.append(_:)();

  return swift_bridgeObjectRelease();
}

uint64_t _AttributedStringFromMarkdownCreatorConcrete.lastCharacter()()
{
  uint64_t v0;
  _OWORD *v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD v6[6];

  v1 = *(_OWORD **)(v0 + direct field offset for _AttributedStringFromMarkdownCreatorConcrete.str);
  v2 = v1[2];
  v6[3] = v1[1];
  v6[4] = v2;
  v6[5] = v1[3];
  BigString.utf16.getter();
  v3 = BigString.UTF16View.startIndex.getter();
  if ((BigString.UTF16View.endIndex.getter() ^ (unint64_t)v3) >= 0x400)
  {
    BigString.UTF16View.index(before:)();
    v4 = BigString.UTF16View.subscript.getter();
  }
  else
  {
    v4 = 0;
  }
  outlined release of Locale((uint64_t)v6);
  return v4;
}

uint64_t @objc _AttributedStringFromMarkdownCreatorConcrete.lastCharacter()(void *a1)
{
  id v1;
  unsigned __int16 v2;

  v1 = a1;
  v2 = _AttributedStringFromMarkdownCreatorConcrete.lastCharacter()();

  return v2;
}

uint64_t _AttributedStringFromMarkdownCreatorConcrete.ExtendedAttributesBox.AttributeKey.init(intValue:)()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

void protocol witness for CodingKey.init(stringValue:) in conformance _AttributedStringFromMarkdownCreatorConcrete<A>.ExtendedAttributesBox.AttributeKey(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  _AttributedStringFromMarkdownCreatorConcrete.ExtendedAttributesBox.AttributeKey.init(stringValue:)();
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v5;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance _AttributedStringFromMarkdownCreatorConcrete<A>.ExtendedAttributesBox.AttributeKey@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  char v5;

  result = _AttributedStringFromMarkdownCreatorConcrete.ExtendedAttributesBox.AttributeKey.init(intValue:)();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v5;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _AttributedStringFromMarkdownCreatorConcrete<A>.ExtendedAttributesBox.AttributeKey(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for _AttributedStringFromMarkdownCreatorConcrete<A>.ExtendedAttributesBox.AttributeKey, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _AttributedStringFromMarkdownCreatorConcrete<A>.ExtendedAttributesBox.AttributeKey(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for _AttributedStringFromMarkdownCreatorConcrete<A>.ExtendedAttributesBox.AttributeKey, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t _AttributedStringFromMarkdownCreatorConcrete.ExtendedAttributesBox.init(from:)(_QWORD *a1, Swift::UInt a2, unint64_t a3, uint64_t a4)
{
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t AssociatedTypeWitness;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  Swift::UInt v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  _QWORD v57[5];
  char *v58;

  v7 = (char *)type metadata accessor for _AttributedStringFromMarkdownCreatorConcrete.ExtendedAttributesBox.AttributeKey(255, a2, a3, a4);
  MEMORY[0x186DA9D64](&protocol conformance descriptor for _AttributedStringFromMarkdownCreatorConcrete<A>.ExtendedAttributesBox.AttributeKey, v7);
  v50 = type metadata accessor for KeyedDecodingContainer();
  v38 = *(_QWORD *)(v50 - 8);
  MEMORY[0x1E0C80A78](v50);
  v9 = (char *)&v35 - v8;
  v58 = (char *)MEMORY[0x1E0DEE9E0];
  static AttributeScope.scopeDescription.getter(a2, a3);
  v51 = v10;
  swift_bridgeObjectRelease();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v11 = v52;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v52 = v11;
  if (v11)
    goto LABEL_2;
  v12 = v38;
  v39 = a2;
  v40 = a3;
  v13 = v50;
  v14 = KeyedDecodingContainer.allKeys.getter();
  result = MEMORY[0x186DA4B68](v14, v7);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_14:
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v13);
    v7 = v58;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return (uint64_t)v7;
  }
  v16 = result;
  v41 = v9;
  v36 = a1;
  v17 = 0;
  v35 = v14;
  v18 = (unsigned __int8 *)(v14 + 56);
  v19 = v51;
  v37 = result;
  while (1)
  {
    v20 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      return result;
    }
    if (*(_QWORD *)(v19 + 16))
      break;
LABEL_6:
    v18 += 32;
    ++v17;
    if (v20 == v16)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a1 = v36;
      v13 = v50;
      v12 = v38;
      v9 = v41;
      goto LABEL_14;
    }
  }
  v21 = *((_QWORD *)v18 - 3);
  v22 = *((_QWORD *)v18 - 2);
  v23 = *((_QWORD *)v18 - 1);
  v24 = *v18;
  swift_bridgeObjectRetain_n();
  v25 = specialized __RawDictionaryStorage.find<A>(_:)(v21, v22);
  if ((v26 & 1) == 0)
  {
    result = swift_bridgeObjectRelease_n();
    goto LABEL_6;
  }
  v27 = (uint64_t *)(*(_QWORD *)(v19 + 56) + 16 * v25);
  v49 = v23;
  v48 = v24;
  v28 = *v27;
  v29 = v27[1];
  swift_bridgeObjectRelease();
  v47 = v22;
  v30 = *(_QWORD *)(v29 + 8);
  v44 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 24))(v28, v30);
  v46 = v31;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v45 = &v35;
  v43 = AssociatedTypeWitness;
  v42 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v7 = (char *)&v35 - v33;
  v53 = v21;
  v54 = v47;
  v55 = v49;
  v56 = v48;
  v34 = v52;
  KeyedDecodingContainer.superDecoder(forKey:)();
  if (!v34)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v29 + 16))(v57, v28, v29);
    v52 = 0;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
    v57[0] = v39;
    v57[1] = v28;
    v57[2] = v40;
    v57[3] = v30;
    type metadata accessor for _AttributedStringFromMarkdownCreatorConcrete.DecodedAttributeBox();
  }
  v52 = v34;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v38 + 8))(v41, v50);
  a1 = v36;
LABEL_2:
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return (uint64_t)v7;
}

uint64_t protocol witness for Decodable.init(from:) in conformance _AttributedStringFromMarkdownCreatorConcrete<A>.ExtendedAttributesBox@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;

  result = _AttributedStringFromMarkdownCreatorConcrete.ExtendedAttributesBox.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
  if (!v4)
    *a4 = result;
  return result;
}

id @objc _AttributedStringFromMarkdownCreatorConcrete.parseExtendedAttributes(from:)(_QWORD *a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  id v5;
  _QWORD *v6;
  id v7;
  unint64_t v8;
  unint64_t v9;

  v4 = *MEMORY[0x1E0DEEDD8] & *a1;
  v5 = a3;
  v6 = a1;
  v7 = specialized Data.init(referencing:)(v5);
  v9 = v8;

  specialized _AttributedStringFromMarkdownCreatorConcrete.parseExtendedAttributes(from:)((uint64_t)v7, v9, *(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 88));
  outlined consume of Data._Representation((uint64_t)v7, v9);
  return (id)_NativeDictionary.bridged()();
}

void @objc _AttributedStringFromMarkdownCreatorConcrete.init()()
{
  specialized _AttributedStringFromMarkdownCreatorConcrete.init()();
}

id _AttributedStringFromMarkdownCreatorConcrete.__deallocating_deinit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v5;
  objc_super v7;

  v5 = (objc_class *)type metadata accessor for _AttributedStringFromMarkdownCreatorConcrete(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x58), a4);
  v7.receiver = v4;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, sel_dealloc);
}

uint64_t AttributedString.MarkdownParsingOptions.FailurePolicy.init(rawValue:)@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  if (result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (!result)
    v2 = 0;
  *a2 = v2;
  return result;
}

uint64_t AttributedString.MarkdownParsingOptions.FailurePolicy.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

unint64_t AttributedString.MarkdownParsingOptions.InterpretedSyntax.init(rawValue:)@<X0>(unint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  v2 = 3;
  if (result < 3)
    v2 = result;
  *a2 = v2;
  return result;
}

uint64_t AttributedString.MarkdownParsingOptions.InterpretedSyntax.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AttributedString.MarkdownParsingOptions.InterpretedSyntax@<X0>(unint64_t *a1@<X0>, char *a2@<X8>)
{
  return AttributedString.MarkdownParsingOptions.InterpretedSyntax.init(rawValue:)(*a1, a2);
}

uint64_t AttributedString.MarkdownParsingOptions.allowsExtendedAttributes.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t AttributedString.MarkdownParsingOptions.allowsExtendedAttributes.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*AttributedString.MarkdownParsingOptions.allowsExtendedAttributes.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void AttributedString.MarkdownParsingOptions.interpretedSyntax.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 1);
}

_BYTE *AttributedString.MarkdownParsingOptions.interpretedSyntax.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = *result;
  return result;
}

uint64_t (*AttributedString.MarkdownParsingOptions.interpretedSyntax.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void AttributedString.MarkdownParsingOptions.failurePolicy.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 2);
}

_BYTE *AttributedString.MarkdownParsingOptions.failurePolicy.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 2) = *result;
  return result;
}

uint64_t (*AttributedString.MarkdownParsingOptions.failurePolicy.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t AttributedString.MarkdownParsingOptions.languageCode.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AttributedString.MarkdownParsingOptions.languageCode.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t (*AttributedString.MarkdownParsingOptions.languageCode.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t AttributedString.MarkdownParsingOptions.appliesSourcePositionAttributes.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t AttributedString.MarkdownParsingOptions.appliesSourcePositionAttributes.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 24) = result;
  return result;
}

uint64_t (*AttributedString.MarkdownParsingOptions.appliesSourcePositionAttributes.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t AttributedString.MarkdownParsingOptions.init(allowsExtendedAttributes:interpretedSyntax:failurePolicy:languageCode:appliesSourcePositionAttributes:)@<X0>(uint64_t result@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  char v7;
  char v8;

  v7 = *a2;
  v8 = *a3;
  *(_BYTE *)a7 = result;
  *(_BYTE *)(a7 + 1) = v7;
  *(_BYTE *)(a7 + 2) = v8;
  *(_QWORD *)(a7 + 8) = a4;
  *(_QWORD *)(a7 + 16) = a5;
  *(_BYTE *)(a7 + 24) = a6;
  return result;
}

double one-time initialization function for localizedAttributedString()
{
  id v0;
  double result;
  _BYTE v2[8];
  __int128 v3;
  char v4;

  v0 = objc_msgSend((id)objc_opt_self(), sel__localizedAttributedStringParsingOptions);
  AttributedString.MarkdownParsingOptions.init(_:)(v0, (uint64_t)v2);

  static AttributedString.MarkdownParsingOptions.localizedAttributedString = v2[0];
  byte_1EDC47D01 = v2[1];
  byte_1EDC47D02 = v2[2];
  result = *(double *)&v3;
  *(_OWORD *)&qword_1EDC47D08 = v3;
  byte_1EDC47D18 = v4;
  return result;
}

void static AttributedString.MarkdownParsingOptions._unconditionallyBridgeFromObjectiveC(_:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (a1)
  {
    AttributedString.MarkdownParsingOptions.init(_:)(a1, a2);
  }
  else
  {
    *(_WORD *)a2 = 0;
    *(_BYTE *)(a2 + 2) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_BYTE *)(a2 + 24) = 0;
  }
}

uint64_t AttributedString.MarkdownSourcePosition.startLine.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t AttributedString.MarkdownSourcePosition.startColumn.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t AttributedString.MarkdownSourcePosition.endLine.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t AttributedString.MarkdownSourcePosition.endColumn.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t AttributedString.MarkdownSourcePosition.Offsets.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD v12[2];
  char v13;
  char v14;
  char v15;
  char v16;

  v12[0] = a5;
  v12[1] = a3;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributedString.MarkdownSourcePosition.Offsets.CodingKeys>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AttributedString.MarkdownSourcePosition.Offsets.CodingKeys and conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v16 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v5)
  {
    v15 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v14 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v13 = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181DFE654 + 4 * byte_182163C10[*v0]))(946238581, 0xE400000000000000);
}

uint64_t sub_181DFE654()
{
  return 0x3631667475;
}

unint64_t sub_181DFE668()
{
  return 0xD000000000000011;
}

unint64_t sub_181DFE684()
{
  return 0xD00000000000001BLL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized AttributedString.MarkdownSourcePosition.Offsets.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys()
{
  lazy protocol witness table accessor for type AttributedString.MarkdownSourcePosition.Offsets.CodingKeys and conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys()
{
  lazy protocol witness table accessor for type AttributedString.MarkdownSourcePosition.Offsets.CodingKeys and conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys();
  return CodingKey.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AttributedString.MarkdownSourcePosition.Offsets()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;
  Swift::UInt v4;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AttributedString.MarkdownSourcePosition.Offsets()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;

  v1 = v0[1];
  v2 = v0[2];
  v3 = v0[3];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AttributedString.MarkdownSourcePosition.Offsets()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;
  Swift::UInt v4;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance AttributedString.MarkdownSourcePosition.Offsets@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = specialized AttributedString.MarkdownSourcePosition.Offsets.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AttributedString.MarkdownSourcePosition.Offsets(_QWORD *a1)
{
  uint64_t *v1;

  return AttributedString.MarkdownSourcePosition.Offsets.encode(to:)(a1, *v1, v1[1], v1[2], v1[3]);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AttributedString.MarkdownSourcePosition.Offsets(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

double AttributedString.MarkdownSourcePosition.init(startLine:startColumn:endLine:endColumn:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  double result;

  *(_QWORD *)a5 = a1;
  *(_QWORD *)(a5 + 8) = a2;
  *(_QWORD *)(a5 + 16) = a3;
  *(_QWORD *)(a5 + 24) = a4;
  result = 0.0;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_BYTE *)(a5 + 64) = 1;
  *(_OWORD *)(a5 + 72) = 0u;
  *(_OWORD *)(a5 + 88) = 0u;
  *(_BYTE *)(a5 + 104) = 1;
  return result;
}

void AttributedString.MarkdownSourcePosition.hash(into:)()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;
  Swift::UInt v4;
  Swift::UInt v5;
  Swift::UInt v6;
  Swift::UInt v7;
  int v8;
  int v9;
  Swift::UInt v10;
  Swift::UInt v11;
  Swift::UInt v12;
  Swift::UInt v13;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v5 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 48);
  v6 = *(_QWORD *)(v0 + 56);
  v8 = *(unsigned __int8 *)(v0 + 64);
  v10 = *(_QWORD *)(v0 + 72);
  v11 = *(_QWORD *)(v0 + 80);
  v12 = *(_QWORD *)(v0 + 88);
  v13 = *(_QWORD *)(v0 + 96);
  v9 = *(unsigned __int8 *)(v0 + 104);
  Hasher._combine(_:)(*(_QWORD *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  if (v8 == 1)
  {
    Hasher._combine(_:)(0);
    if (!v9)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v10);
      Hasher._combine(_:)(v11);
      Hasher._combine(_:)(v12);
      Hasher._combine(_:)(v13);
      return;
    }
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5);
    Hasher._combine(_:)(v4);
    Hasher._combine(_:)(v7);
    Hasher._combine(_:)(v6);
    if (!v9)
      goto LABEL_3;
  }
  Hasher._combine(_:)(0);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AttributedString.MarkdownSourcePosition.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181DFEA50 + 4 * byte_182163C14[*v0]))(0x6E694C7472617473, 0xE900000000000065);
}

uint64_t sub_181DFEA50()
{
  return 0x6C6F437472617473;
}

uint64_t sub_181DFEA70()
{
  return 0x656E694C646E65;
}

uint64_t sub_181DFEA88()
{
  return 0x6D756C6F43646E65;
}

uint64_t sub_181DFEAA0()
{
  return 0x66664F7472617473;
}

uint64_t sub_181DFEAC0()
{
  return 0x657366664F646E65;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AttributedString.MarkdownSourcePosition.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized AttributedString.MarkdownSourcePosition.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributedString.MarkdownSourcePosition.CodingKeys()
{
  lazy protocol witness table accessor for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributedString.MarkdownSourcePosition.CodingKeys()
{
  lazy protocol witness table accessor for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t AttributedString.MarkdownSourcePosition.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  int v32;
  char v33;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributedString.MarkdownSourcePosition.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v1 + 8);
  v25 = *(_QWORD *)(v1 + 16);
  v26 = v8;
  v9 = *(_QWORD *)(v1 + 24);
  v23 = *(_QWORD *)(v1 + 32);
  v24 = v9;
  v10 = *(_QWORD *)(v1 + 48);
  v20 = *(_QWORD *)(v1 + 40);
  v21 = v10;
  v22 = *(_QWORD *)(v1 + 56);
  v32 = *(unsigned __int8 *)(v1 + 64);
  v11 = *(_QWORD *)(v1 + 80);
  v15 = *(_QWORD *)(v1 + 72);
  v16 = v11;
  v17 = *(_QWORD *)(v1 + 88);
  v19 = *(_QWORD *)(v1 + 96);
  v18 = *(unsigned __int8 *)(v1 + 104);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v27) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v13 = v23;
    LOBYTE(v27) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v27) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v27) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v27 = v13;
    v28 = v20;
    v29 = v21;
    v30 = v22;
    v31 = v32;
    v33 = 4;
    lazy protocol witness table accessor for type AttributedString.MarkdownSourcePosition.Offsets and conformance AttributedString.MarkdownSourcePosition.Offsets();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v27 = v15;
    v28 = v16;
    v29 = v17;
    v30 = v19;
    v31 = v18;
    v33 = 5;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int AttributedString.MarkdownSourcePosition.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;
  Swift::UInt v4;
  Swift::UInt v5;
  Swift::UInt v6;
  Swift::UInt v7;
  int v8;
  int v9;
  Swift::UInt v11;
  Swift::UInt v12;
  Swift::UInt v13;
  Swift::UInt v14;
  Swift::UInt v15;

  v2 = *(_QWORD *)v0;
  v1 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  v6 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 48);
  v8 = *(unsigned __int8 *)(v0 + 64);
  v11 = *(_QWORD *)(v0 + 56);
  v12 = *(_QWORD *)(v0 + 72);
  v13 = *(_QWORD *)(v0 + 80);
  v14 = *(_QWORD *)(v0 + 88);
  v15 = *(_QWORD *)(v0 + 96);
  v9 = *(unsigned __int8 *)(v0 + 104);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  if (v8 != 1)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6);
    Hasher._combine(_:)(v5);
    Hasher._combine(_:)(v7);
    Hasher._combine(_:)(v11);
    if (!v9)
      goto LABEL_3;
LABEL_5:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(0);
  if (v9)
    goto LABEL_5;
LABEL_3:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v15);
  return Hasher._finalize()();
}

uint64_t AttributedString.MarkdownSourcePosition.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  unsigned __int8 v28;
  int v29;
  char v30;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributedString.MarkdownSourcePosition.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    LOBYTE(v26) = 0;
    v9 = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v26) = 1;
    v10 = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v26) = 2;
    v25 = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v26) = 3;
    v23 = KeyedDecodingContainer.decode(_:forKey:)();
    v30 = 4;
    v24 = lazy protocol witness table accessor for type AttributedString.MarkdownSourcePosition.Offsets and conformance AttributedString.MarkdownSourcePosition.Offsets();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v21 = *((_QWORD *)&v26 + 1);
    v22 = v26;
    v19 = *((_QWORD *)&v27 + 1);
    v20 = v27;
    v29 = v28;
    v30 = 5;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v12 = v28;
    v13 = v26;
    v14 = v27;
    *(_QWORD *)a2 = v9;
    *(_QWORD *)(a2 + 8) = v10;
    v15 = v23;
    *(_QWORD *)(a2 + 16) = v25;
    *(_QWORD *)(a2 + 24) = v15;
    v16 = v21;
    *(_QWORD *)(a2 + 32) = v22;
    *(_QWORD *)(a2 + 40) = v16;
    v17 = v19;
    *(_QWORD *)(a2 + 48) = v20;
    *(_QWORD *)(a2 + 56) = v17;
    *(_BYTE *)(a2 + 64) = v29;
    *(_OWORD *)(a2 + 72) = v13;
    *(_OWORD *)(a2 + 88) = v14;
    *(_BYTE *)(a2 + 104) = v12;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AttributedString.MarkdownSourcePosition()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;
  Swift::UInt v4;
  Swift::UInt v5;
  Swift::UInt v6;
  Swift::UInt v7;
  int v8;
  int v9;
  Swift::UInt v11;
  Swift::UInt v12;
  Swift::UInt v13;
  Swift::UInt v14;
  Swift::UInt v15;

  v2 = *(_QWORD *)v0;
  v1 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  v6 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 48);
  v8 = *(unsigned __int8 *)(v0 + 64);
  v11 = *(_QWORD *)(v0 + 56);
  v12 = *(_QWORD *)(v0 + 72);
  v13 = *(_QWORD *)(v0 + 80);
  v14 = *(_QWORD *)(v0 + 88);
  v15 = *(_QWORD *)(v0 + 96);
  v9 = *(unsigned __int8 *)(v0 + 104);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  if (v8 != 1)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6);
    Hasher._combine(_:)(v5);
    Hasher._combine(_:)(v7);
    Hasher._combine(_:)(v11);
    if (!v9)
      goto LABEL_3;
LABEL_5:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(0);
  if (v9)
    goto LABEL_5;
LABEL_3:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v15);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance AttributedString.MarkdownSourcePosition@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AttributedString.MarkdownSourcePosition.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AttributedString.MarkdownSourcePosition(_QWORD *a1)
{
  return AttributedString.MarkdownSourcePosition.encode(to:)(a1);
}

uint64_t AttributedString.init<A>(markdown:including:options:baseURL:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v8;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  _QWORD v19[3];
  char v20[8];
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  v10 = *(_BYTE *)(a4 + 1);
  v11 = *(_BYTE *)(a4 + 2);
  v12 = *(_QWORD *)(a4 + 8);
  v13 = *(_QWORD *)(a4 + 16);
  v14 = *(_BYTE *)(a4 + 24);
  v15 = *(void **)a5;
  v16 = *(_QWORD *)(a5 + 8);
  v17 = *(_QWORD *)(a5 + 16);
  v20[0] = 1;
  v20[1] = v10;
  v20[2] = v11;
  v21 = v12;
  v22 = v13;
  v23 = v14;
  v19[0] = v15;
  v19[1] = v16;
  v19[2] = v17;
  static AttributedString.parseMarkdown<A>(_:including:options:baseURL:)(&v24, a1, a2, a3, v20, (uint64_t)v19, a6, a7);
  swift_bridgeObjectRelease();
  outlined consume of URL?(v15);
  result = swift_bridgeObjectRelease();
  if (!v8)
    *a8 = v24;
  return result;
}

uint64_t AttributedString.init<A>(markdown:including:options:baseURL:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v6;

  AttributedString.init<A>(_markdownData:including:options:baseURL:)(a1, a2);
  result = swift_release();
  if (!v3)
    *a3 = v6;
  return result;
}

void specialized AttributedString.init<A>(_markdownData:including:options:baseURL:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void *sub_181DFF500(uint64_t a1, uint64_t a2, int a3, uint64_t a4, NSError *a5)
{
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  NSError *v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  void *result;
  uint64_t v13;
  __int16 v14;
  char v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;

  v13 = v10;
  v14 = v9;
  v15 = BYTE2(v9);
  v16 = BYTE3(v9);
  v17 = BYTE4(v9);
  v18 = BYTE5(v9);
  specialized static AttributedString._parseMarkdown<A>(markdownData:including:options:baseURL:)(&v19, (uint64_t)&v13, (uint64_t)&v13 + BYTE6(v9), a3 & 0x1FF01, a5, v8, v11 & 1, v7);
  outlined consume of Data._Representation(v10, v9);
  swift_bridgeObjectRelease();
  result = outlined consume of URL?(v7);
  if (!v6)
    *v5 = v19;
  return result;
}

void AttributedString.init<A>(_markdownData:including:options:baseURL:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X16 }
}

void *sub_181DFF870@<X0>(uint64_t a1@<X6>, uint64_t a2@<X7>, char a3@<W8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *result;
  uint64_t v17;
  __int16 v18;
  char v19;
  char v20;
  char v21;
  char v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;

  v17 = v15;
  v18 = v14;
  v19 = BYTE2(v14);
  v20 = BYTE3(v14);
  v21 = BYTE4(v14);
  v22 = BYTE5(v14);
  v27 = v7;
  v28 = v6;
  v29 = v5;
  v30 = v4;
  v31 = v13;
  v32 = a3;
  v24 = v12;
  v25 = v11;
  v26 = v9;
  static AttributedString._parseMarkdown<A>(markdownData:including:options:baseURL:)(&v23, (uint64_t)&v17, (uint64_t)&v17 + BYTE6(v14), v3, (uint64_t)&v27, &v24, a1, a2);
  outlined consume of Data._Representation(v15, v14);
  swift_bridgeObjectRelease();
  result = outlined consume of URL?(v12);
  if (!v10)
    *v8 = v23;
  return result;
}

void AttributedString.init(markdown:options:baseURL:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;

  specialized AttributedString.init<A>(_markdownData:including:options:baseURL:)(a1, a2);
  if (!v3)
    *a3 = v5;
}

void AttributedString.init<A>(markdown:including:options:baseURL:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;

  AttributedString.init<A>(_markdownData:including:options:baseURL:)(a1, a2);
  if (!v3)
    *a3 = v5;
}

uint64_t specialized static AttributedString._parseMarkdown<A>(markdownData:including:options:baseURL:)(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int a4, NSError *a5, NSError *a6, char a7, void *a8)
{
  uint64_t v8;
  unsigned int v14;
  char v15;
  void *v16;
  char *v17;
  NSAttributedStringMarkdownParsingOptions *v18;
  id v19;
  char v20;
  NSError *v21;
  NSError *v22;
  NSError *v23;
  NSError *v28[3];
  char v29;
  __int128 v30[3];
  uint64_t v31;

  v8 = a2;
  v31 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v14 = a4 >> 8;
    objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _AttributedStringFromMarkdownCreatorConcrete<AttributeScopes.FoundationAttributes>));
    swift_bridgeObjectRetain();
    v15 = a7 & 1;
    v16 = (void *)specialized _AttributedStringFromMarkdownCreatorConcrete.init(scope:options:)(a4 & 1);
    type metadata accessor for NSAttributedStringMarkdownParsingOptions();
    LOBYTE(v28[0]) = a4 & 1;
    BYTE1(v28[0]) = v14;
    BYTE2(v28[0]) = BYTE2(a4) & 1;
    v28[1] = a5;
    v28[2] = a6;
    v29 = v15;
    swift_bridgeObjectRetain();
    v17 = v16;
    v18 = (NSAttributedStringMarkdownParsingOptions *)NSAttributedStringMarkdownParsingOptions.init(_:)((unsigned __int8 *)v28);
    if (a8)
      v19 = a8;
    else
      v19 = 0;
    v28[0] = 0;
    v20 = _NSAttributedStringFromMarkdownWithCreator(v17, v8, a3 - v8, v18, (uint64_t)v19, v28);

    v21 = v28[0];
    if ((v20 & 1) != 0 || !v28[0])
    {
      *a1 = *(_QWORD *)&v17[direct field offset for _AttributedStringFromMarkdownCreatorConcrete.str];
      LOBYTE(v8) = v17[direct field offset for _AttributedStringFromMarkdownCreatorConcrete.hasInflectionAttributes];
      v23 = v21;
      swift_retain();

    }
    else
    {
      v22 = v28[0];
      swift_willThrow();

    }
  }
  else
  {
    BigString.init(_:)();
    AttributedString.init(_:attributes:)(v30, MEMORY[0x1E0DEE9E0], MEMORY[0x1E0DEE9E8], (uint64_t *)v28);
    *a1 = v28[0];
  }
  return v8 & 1;
}

uint64_t AttributedString.init<A>(contentsOf:including:options:baseURL:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, void **a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  char v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;

  v6 = *(void **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v19 = *(_BYTE *)(a2 + 2);
  v20 = *(_BYTE *)(a2 + 1);
  v9 = *(_QWORD *)(a2 + 16);
  v18 = *(_QWORD *)(a2 + 8);
  v17 = *(_BYTE *)(a2 + 24);
  v10 = *a3;
  v21 = *(void **)a1;
  v22 = v7;
  v23 = v8;
  v11 = specialized Data.init(contentsOf:options:)((uint64_t)&v21, 1);
  if (v4)
  {
    swift_bridgeObjectRelease();
    outlined consume of URL?(v10);
    swift_release();

    swift_release();
    return swift_release();
  }
  else
  {
    v15 = a4;
    v16 = v12;
    v14 = (uint64_t)v11;

    swift_release();
    swift_release();
    LOBYTE(v21) = 1;
    BYTE1(v21) = v20;
    BYTE2(v21) = v19;
    v22 = v18;
    v23 = v9;
    v24 = v17;
    AttributedString.init<A>(_markdownData:including:options:baseURL:)(v14, v16);
    result = swift_release();
    *v15 = v25;
  }
  return result;
}

void AttributedString.init<A>(contentsOf:including:options:baseURL:)(uint64_t a1@<X0>, uint64_t a2@<X2>, void **a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  char v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  v6 = *(void **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v18 = *(_BYTE *)(a2 + 2);
  v19 = *(_BYTE *)(a2 + 1);
  v9 = *(_QWORD *)(a2 + 16);
  v17 = *(_QWORD *)(a2 + 8);
  v16 = *(_BYTE *)(a2 + 24);
  v10 = *a3;
  v20 = *(void **)a1;
  v21 = v7;
  v22 = v8;
  v11 = specialized Data.init(contentsOf:options:)((uint64_t)&v20, 1);
  if (v4)
  {
    swift_bridgeObjectRelease();
    outlined consume of URL?(v10);

    swift_release();
    swift_release();
  }
  else
  {
    v14 = a4;
    v15 = v12;
    v13 = (uint64_t)v11;

    swift_release();
    swift_release();
    LOBYTE(v20) = 1;
    BYTE1(v20) = v19;
    BYTE2(v20) = v18;
    v21 = v17;
    v22 = v9;
    v23 = v16;
    AttributedString.init<A>(_markdownData:including:options:baseURL:)(v13, v15);
    *v14 = v24;
  }
}

void AttributedString.init(contentsOf:options:baseURL:)(uint64_t a1@<X0>, void **a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[3];
  void *v13;

  v5 = *(void **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v13 = *a2;
  v12[0] = v5;
  v12[1] = v6;
  v12[2] = v7;
  v8 = specialized Data.init(contentsOf:options:)((uint64_t)v12, 1);
  if (v3)
  {
    swift_bridgeObjectRelease();
    outlined consume of URL?(v13);

    swift_release();
    swift_release();
  }
  else
  {
    v10 = (uint64_t)v8;
    v11 = v9;

    swift_release();
    swift_release();
    specialized AttributedString.init<A>(_markdownData:including:options:baseURL:)(v10, v11);
    *a3 = v12[0];
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance NSInlinePresentationIntent()
{
  lazy protocol witness table accessor for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent(&lazy protocol witness table cache variable for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent, (uint64_t)&protocol conformance descriptor for NSInlinePresentationIntent);
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NSInlinePresentationIntent()
{
  lazy protocol witness table accessor for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent(&lazy protocol witness table cache variable for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent, (uint64_t)&protocol conformance descriptor for NSInlinePresentationIntent);
  return RawRepresentable<>.encode(to:)();
}

void AttributedString.MarkdownParsingOptions.init(_:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v4;
  id v5;
  char v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unsigned __int8 v15;

  v4 = objc_msgSend(a1, sel_allowsExtendedAttributes);
  v5 = objc_msgSend(a1, sel_interpretedSyntax);
  if ((unint64_t)v5 > 2)
    goto LABEL_8;
  v6 = (char)v5;
  v7 = objc_msgSend(a1, sel_failurePolicy);
  if ((unint64_t)v7 > 1)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return;
  }
  v8 = v7;
  v9 = objc_msgSend(a1, sel_languageCode);
  if (v9)
  {
    v10 = v9;
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v13 = v12;

  }
  else
  {
    v11 = 0;
    v13 = 0;
  }
  v14 = v8 != 0;
  swift_bridgeObjectRetain();
  v15 = objc_msgSend(a1, sel_appliesSourcePositionAttributes);
  swift_bridgeObjectRelease();

  *(_BYTE *)a2 = v4;
  *(_BYTE *)(a2 + 1) = v6;
  *(_BYTE *)(a2 + 2) = v14;
  *(_QWORD *)(a2 + 8) = v11;
  *(_QWORD *)(a2 + 16) = v13;
  *(_BYTE *)(a2 + 24) = v15;
}

void __swiftcall AttributedString.MarkdownParsingOptions._bridgeToObjectiveC()(NSAttributedStringMarkdownParsingOptions *__return_ptr retstr)
{
  uint64_t v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unsigned __int8 v8[8];
  uint64_t v9;
  uint64_t v10;
  char v11;

  v2 = *(_BYTE *)v1;
  v3 = *(_BYTE *)(v1 + 1);
  v4 = *(_BYTE *)(v1 + 2);
  v6 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  v7 = *(_BYTE *)(v1 + 24);
  type metadata accessor for NSAttributedStringMarkdownParsingOptions();
  v8[0] = v2;
  v8[1] = v3;
  v8[2] = v4;
  v9 = v6;
  v10 = v5;
  v11 = v7;
  swift_bridgeObjectRetain();
  NSAttributedStringMarkdownParsingOptions.init(_:)(v8);
}

double static AttributedString.MarkdownParsingOptions._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  double result;
  _BYTE v7[8];
  __int128 v8;
  char v9;

  outlined consume of AttributedString.MarkdownParsingOptions?(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16));
  AttributedString.MarkdownParsingOptions.init(_:)(a1, (uint64_t)v7);
  v4 = v9;
  v5 = 0x10000;
  if (!v7[2])
    v5 = 0;
  *(_QWORD *)a2 = v7[0] | ((unint64_t)v7[1] << 8) | v5;
  result = *(double *)&v8;
  *(_OWORD *)(a2 + 8) = v8;
  *(_BYTE *)(a2 + 24) = v4;
  return result;
}

uint64_t static AttributedString.MarkdownParsingOptions._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  _BYTE v7[8];
  __int128 v8;
  char v9;

  outlined consume of AttributedString.MarkdownParsingOptions?(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16));
  AttributedString.MarkdownParsingOptions.init(_:)(a1, (uint64_t)v7);
  v4 = v9;
  v5 = 0x10000;
  if (!v7[2])
    v5 = 0;
  *(_QWORD *)a2 = v7[0] | ((unint64_t)v7[1] << 8) | v5;
  *(_OWORD *)(a2 + 8) = v8;
  *(_BYTE *)(a2 + 24) = v4;
  return 1;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance AttributedString.MarkdownParsingOptions()
{
  uint64_t v0;
  unsigned __int8 v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  unsigned __int8 v8[8];
  uint64_t v9;
  uint64_t v10;
  char v11;

  v1 = *(_BYTE *)v0;
  v2 = *(_BYTE *)(v0 + 1);
  v3 = *(_BYTE *)(v0 + 2);
  v5 = *(_QWORD *)(v0 + 8);
  v4 = *(_QWORD *)(v0 + 16);
  v6 = *(_BYTE *)(v0 + 24);
  type metadata accessor for NSAttributedStringMarkdownParsingOptions();
  v8[0] = v1;
  v8[1] = v2;
  v8[2] = v3;
  v9 = v5;
  v10 = v4;
  v11 = v6;
  swift_bridgeObjectRetain();
  return NSAttributedStringMarkdownParsingOptions.init(_:)(v8);
}

double protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance AttributedString.MarkdownParsingOptions(void *a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  double result;
  _BYTE v7[8];
  __int128 v8;
  char v9;

  outlined consume of AttributedString.MarkdownParsingOptions?(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16));
  AttributedString.MarkdownParsingOptions.init(_:)(a1, (uint64_t)v7);
  v4 = v9;
  v5 = 0x10000;
  if (!v7[2])
    v5 = 0;
  *(_QWORD *)a2 = v7[0] | ((unint64_t)v7[1] << 8) | v5;
  result = *(double *)&v8;
  *(_OWORD *)(a2 + 8) = v8;
  *(_BYTE *)(a2 + 24) = v4;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance AttributedString.MarkdownParsingOptions(void *a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  _BYTE v7[8];
  __int128 v8;
  char v9;

  outlined consume of AttributedString.MarkdownParsingOptions?(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16));
  AttributedString.MarkdownParsingOptions.init(_:)(a1, (uint64_t)v7);
  v4 = v9;
  v5 = 0x10000;
  if (!v7[2])
    v5 = 0;
  *(_QWORD *)a2 = v7[0] | ((unint64_t)v7[1] << 8) | v5;
  *(_OWORD *)(a2 + 8) = v8;
  *(_BYTE *)(a2 + 24) = v4;
  return 1;
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance AttributedString.MarkdownParsingOptions(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (a1)
  {
    AttributedString.MarkdownParsingOptions.init(_:)(a1, a2);
  }
  else
  {
    *(_WORD *)a2 = 0;
    *(_BYTE *)(a2 + 2) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_BYTE *)(a2 + 24) = 0;
  }
}

__n128 AttributedString.MarkdownSourcePosition.init(_:)@<Q0>(void *a1@<X0>, __n128 *a2@<X8>)
{
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  __n128 result;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  __n128 v25;

  objc_msgSend(a1, sel_startOffsets);
  objc_msgSend(a1, sel_endOffsets);

  v4 = 0;
  v5 = 1;
  if (v21 == 0x7FFFFFFFFFFFFFFFLL || v22 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    if (v23 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v5 = v24 == 0x7FFFFFFFFFFFFFFFLL;
      if (v24 == 0x7FFFFFFFFFFFFFFFLL)
        v4 = 0;
      else
        v4 = v21;
      if (v24 == 0x7FFFFFFFFFFFFFFFLL)
        v6 = 0;
      else
        v6 = v22;
      if (v24 == 0x7FFFFFFFFFFFFFFFLL)
        v7 = 0;
      else
        v7 = v23;
      if (v24 == 0x7FFFFFFFFFFFFFFFLL)
        v8 = 0;
      else
        v8 = v24;
    }
  }
  v9 = v24 == 0x7FFFFFFFFFFFFFFFLL;
  if (v24 == 0x7FFFFFFFFFFFFFFFLL)
    v10 = 0;
  else
    v10 = v21;
  if (v24 == 0x7FFFFFFFFFFFFFFFLL)
    v11 = 0;
  else
    v11 = v22;
  if (v24 == 0x7FFFFFFFFFFFFFFFLL)
    v12 = 0;
  else
    v12 = v23;
  if (v24 == 0x7FFFFFFFFFFFFFFFLL)
    v13 = 0;
  else
    v13 = v24;
  if (v23 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v9 = 1;
  }
  if (v22 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 1;
  }
  else
  {
    v14 = v9;
  }
  if (v21 == 0x7FFFFFFFFFFFFFFFLL)
    v15 = 0;
  else
    v15 = v10;
  if (v21 == 0x7FFFFFFFFFFFFFFFLL)
    v16 = 0;
  else
    v16 = v11;
  if (v21 == 0x7FFFFFFFFFFFFFFFLL)
    v17 = 0;
  else
    v17 = v12;
  if (v21 == 0x7FFFFFFFFFFFFFFFLL)
    v18 = 0;
  else
    v18 = v13;
  if (v21 == 0x7FFFFFFFFFFFFFFFLL)
    v19 = 1;
  else
    v19 = v14;
  *a2 = v25;
  result = v25;
  a2[1] = v25;
  a2[2].n128_u64[0] = v4;
  a2[2].n128_u64[1] = v6;
  a2[3].n128_u64[0] = v7;
  a2[3].n128_u64[1] = v8;
  a2[4].n128_u8[0] = v5;
  a2[4].n128_u64[1] = v15;
  a2[5].n128_u64[0] = v16;
  a2[5].n128_u64[1] = v17;
  a2[6].n128_u64[0] = v18;
  a2[6].n128_u8[8] = v19;
  return result;
}

void __swiftcall AttributedString.MarkdownSourcePosition._bridgeToObjectiveC()(NSAttributedStringMarkdownSourcePosition *__return_ptr retstr)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[6];
  _QWORD v15[6];

  if (*((_BYTE *)v1 + 64) == 1)
  {
    v12 = 0x7FFFFFFFFFFFFFFFLL;
    v13 = 0x7FFFFFFFFFFFFFFFLL;
    v2 = 0x7FFFFFFFFFFFFFFFLL;
    v3 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v2 = v1[6];
    v12 = v1[5];
    v13 = v1[4];
    v3 = v1[7];
  }
  v4 = *v1;
  v5 = v1[1];
  v6 = v1[2];
  v7 = v1[3];
  if (*((_BYTE *)v1 + 104))
  {
    v8 = 0x7FFFFFFFFFFFFFFFLL;
    v9 = 0x7FFFFFFFFFFFFFFFLL;
    v10 = 0x7FFFFFFFFFFFFFFFLL;
    v11 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v8 = v1[9];
    v9 = v1[10];
    v10 = v1[11];
    v11 = v1[12];
  }
  v15[0] = v13;
  v15[1] = v12;
  v15[2] = v2;
  v15[3] = v3;
  v15[4] = v4;
  v15[5] = v5;
  v14[0] = v8;
  v14[1] = v9;
  v14[2] = v10;
  v14[3] = v11;
  v14[4] = v6;
  v14[5] = v7;
  objc_msgSend(objc_allocWithZone((Class)NSAttributedStringMarkdownSourcePosition), sel_initWithStart_end_, v15, v14);
}

double static AttributedString.MarkdownSourcePosition._unconditionallyBridgeFromObjectiveC(_:)@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  if (a1)
  {
    *(_QWORD *)&result = AttributedString.MarkdownSourcePosition.init(_:)(a1, (__n128 *)a2).n128_u64[0];
  }
  else
  {
    result = 0.0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_BYTE *)(a2 + 64) = 1;
    *(_OWORD *)(a2 + 72) = 0u;
    *(_OWORD *)(a2 + 88) = 0u;
    *(_BYTE *)(a2 + 104) = 1;
  }
  return result;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance AttributedString.MarkdownSourcePosition()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[6];
  _QWORD v15[6];

  if (*((_BYTE *)v0 + 64) == 1)
  {
    v12 = 0x7FFFFFFFFFFFFFFFLL;
    v13 = 0x7FFFFFFFFFFFFFFFLL;
    v1 = 0x7FFFFFFFFFFFFFFFLL;
    v2 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v1 = v0[6];
    v12 = v0[5];
    v13 = v0[4];
    v2 = v0[7];
  }
  v3 = *v0;
  v4 = v0[1];
  v5 = v0[2];
  v6 = v0[3];
  if (*((_BYTE *)v0 + 104))
  {
    v7 = 0x7FFFFFFFFFFFFFFFLL;
    v8 = 0x7FFFFFFFFFFFFFFFLL;
    v9 = 0x7FFFFFFFFFFFFFFFLL;
    v10 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v7 = v0[9];
    v8 = v0[10];
    v9 = v0[11];
    v10 = v0[12];
  }
  v15[0] = v13;
  v15[1] = v12;
  v15[2] = v1;
  v15[3] = v2;
  v15[4] = v3;
  v15[5] = v4;
  v14[0] = v7;
  v14[1] = v8;
  v14[2] = v9;
  v14[3] = v10;
  v14[4] = v5;
  v14[5] = v6;
  return objc_msgSend(objc_allocWithZone((Class)NSAttributedStringMarkdownSourcePosition), sel_initWithStart_end_, v15, v14);
}

double protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance AttributedString.MarkdownSourcePosition@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  if (a1)
  {
    *(_QWORD *)&result = AttributedString.MarkdownSourcePosition.init(_:)(a1, (__n128 *)a2).n128_u64[0];
  }
  else
  {
    result = 0.0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_BYTE *)(a2 + 64) = 1;
    *(_OWORD *)(a2 + 72) = 0u;
    *(_OWORD *)(a2 + 88) = 0u;
    *(_BYTE *)(a2 + 104) = 1;
  }
  return result;
}

uint64_t AttributedString.MarkdownSourcePosition.calculateOffsets<A>(within:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int isUniquelyReferenced_nonNull_native;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  void *v49;
  unint64_t v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t result;
  _QWORD *v57;
  char v58;
  uint64_t v59;
  uint64_t AssociatedConformanceWitness;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  __int128 v73;
  _BYTE v74[32];
  uint64_t v75;

  v67 = a3;
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v62 = *(_QWORD *)(AssociatedConformanceWitness + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v63 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v8 = (char *)&v59 - v7;
  v9 = swift_checkMetadataState();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v61 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v59 - v13;
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = *v3;
  v68 = v3[1];
  v65 = v3[2];
  v66 = v18;
  v64 = v3[3];
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v19 + 16))((char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2, v16);
  if (!swift_dynamicCast())
  {
    v75 = MEMORY[0x1E0DEE9D8];
    dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
    v37 = dispatch thunk of Collection.count.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
    v38 = v75;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if (!isUniquelyReferenced_nonNull_native || v37 > *(_QWORD *)(v38 + 24) >> 1)
    {
      if (*(_QWORD *)(v38 + 16) <= v37)
        v40 = v37;
      else
        v40 = *(_QWORD *)(v38 + 16);
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v40, 0);
      v38 = v75;
    }
    dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
    dispatch thunk of Sequence.makeIterator()();
    swift_getAssociatedConformanceWitness();
    dispatch thunk of IteratorProtocol.next()();
    if ((BYTE1(v73) & 1) == 0)
    {
      v52 = v73;
      do
      {
        v75 = v38;
        v54 = *(_QWORD *)(v38 + 16);
        v53 = *(_QWORD *)(v38 + 24);
        if (v54 >= v53 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v53 > 1, v54 + 1, 1);
          v38 = v75;
        }
        *(_QWORD *)(v38 + 16) = v54 + 1;
        *(_BYTE *)(v38 + v54 + 32) = v52;
        dispatch thunk of IteratorProtocol.next()();
        v52 = v73;
      }
      while (BYTE1(v73) != 1);
    }
    (*(void (**)(char *, uint64_t))(v63 + 8))(v8, AssociatedTypeWitness);
    v41 = v75;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v41 + 16) + 1, 1);
      v41 = v75;
    }
    v42 = v66;
    v43 = v68;
    v45 = *(_QWORD *)(v41 + 16);
    v44 = *(_QWORD *)(v41 + 24);
    v46 = v45 + 1;
    if (v45 >= v44 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v44 > 1, v45 + 1, 1);
      v41 = v75;
    }
    *(_QWORD *)(v41 + 16) = v46;
    *(_BYTE *)(v41 + 32 + v45) = 0;
    v47 = (void *)objc_opt_self();
    swift_retain();
    v73 = 0u;
    *(_OWORD *)v74 = 0u;
    *(int64x2_t *)&v74[16] = vdupq_n_s64(1uLL);
    objc_msgSend(v47, sel_calculateOffsetsForLine_column_inString_size_withExistingOffsets_, v42, v43, v41 + 32, v45 + 1, &v73);
    v23 = 0;
    if ((_QWORD)v69 == 0x7FFFFFFFFFFFFFFFLL
      || (v48 = *((_QWORD *)&v69 + 1), *((_QWORD *)&v69 + 1) == 0x7FFFFFFFFFFFFFFFLL))
    {
      v68 = 1;
    }
    else
    {
      v68 = 1;
      if (v70 != 0x7FFFFFFFFFFFFFFFLL)
      {
        v49 = v47;
        v50 = v46;
        v51 = 0;
        v31 = 0;
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v35 = 0;
        v36 = 0;
        if ((_QWORD)v71 != 0x7FFFFFFFFFFFFFFFLL)
        {
          v32 = v71;
          v23 = v69;
          v73 = v69;
          v31 = v70;
          *(_QWORD *)v74 = v70;
          *(_OWORD *)&v74[8] = v71;
          *(_QWORD *)&v74[24] = v72;
          objc_msgSend(v49, (SEL)&classRef_NSKeyPathExpression + 1, v65, v64, v41 + 32, v50, &v73);
          v33 = v69;
          if ((_QWORD)v69 == 0x7FFFFFFFFFFFFFFFLL
            || (v34 = *((_QWORD *)&v69 + 1), *((_QWORD *)&v69 + 1) == 0x7FFFFFFFFFFFFFFFLL)
            || (v35 = v70, v70 == 0x7FFFFFFFFFFFFFFFLL)
            || (v36 = v71, (_QWORD)v71 == 0x7FFFFFFFFFFFFFFFLL))
          {
            v23 = 0;
            v51 = 0;
            v31 = 0;
            v32 = 0;
            v33 = 0;
            v34 = 0;
            v35 = 0;
            v36 = 0;
            v68 = 1;
          }
          else
          {
            v68 = 0;
            v51 = v48;
          }
        }
        goto LABEL_42;
      }
    }
    v51 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = 0;
LABEL_42:
    v55 = v51;
    result = swift_release_n();
    goto LABEL_43;
  }
  v20 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v21 = *(_QWORD *)(v20 + 16);
  v22 = (void *)objc_opt_self();
  v73 = 0u;
  *(_OWORD *)v74 = 0u;
  *(int64x2_t *)&v74[16] = vdupq_n_s64(1uLL);
  objc_msgSend(v22, sel_calculateOffsetsForLine_column_inString_size_withExistingOffsets_, v66, v68, v20 + 32, v21, &v73);
  v23 = 0;
  v24 = v69;
  v68 = 1;
  v63 = v20;
  if ((_QWORD)v69 == 0x7FFFFFFFFFFFFFFFLL
    || (v25 = *((_QWORD *)&v69 + 1), *((_QWORD *)&v69 + 1) == 0x7FFFFFFFFFFFFFFFLL)
    || (v26 = v70, v70 == 0x7FFFFFFFFFFFFFFFLL))
  {
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = 0;
  }
  else
  {
    v27 = v22;
    v28 = v21;
    v29 = v20 + 32;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = 0;
    if ((_QWORD)v71 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v32 = v71;
      v73 = v69;
      *(_QWORD *)v74 = v70;
      *(_OWORD *)&v74[8] = v71;
      *(_QWORD *)&v74[24] = v72;
      objc_msgSend(v27, (SEL)&classRef_NSKeyPathExpression + 1, v65, v64, v29, v28, &v73);
      v33 = v69;
      if ((_QWORD)v69 == 0x7FFFFFFFFFFFFFFFLL
        || (v34 = *((_QWORD *)&v69 + 1), *((_QWORD *)&v69 + 1) == 0x7FFFFFFFFFFFFFFFLL)
        || (v35 = v70, v70 == 0x7FFFFFFFFFFFFFFFLL)
        || (v36 = v71, (_QWORD)v71 == 0x7FFFFFFFFFFFFFFFLL))
      {
        v23 = 0;
        v30 = 0;
        v31 = 0;
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v35 = 0;
        v36 = 0;
        v68 = 1;
      }
      else
      {
        v68 = 0;
        v23 = v24;
        v30 = v25;
        v31 = v26;
      }
    }
  }
  v55 = v30;
  result = swift_release();
LABEL_43:
  v57 = v67;
  v58 = v68;
  *v67 = v23;
  v57[1] = v55;
  v57[2] = v31;
  v57[3] = v32;
  v57[4] = v33;
  v57[5] = v34;
  v57[6] = v35;
  v57[7] = v36;
  *((_BYTE *)v57 + 64) = v58;
  return result;
}

uint64_t specialized static AttributedString.MarkdownSourcePosition.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v4;
  int64x2_t v5;
  int64x2_t v6;

  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(*(int64x2_t *)a1, *(int64x2_t *)a2), (int32x4_t)vceqq_s64(*(int64x2_t *)(a1 + 16), *(int64x2_t *)(a2 + 16)))), 0xFuLL))) & 1) == 0)return 0;
  v4 = *(_BYTE *)(a1 + 104);
  v5 = *(int64x2_t *)(a1 + 88);
  v6 = *(int64x2_t *)(a1 + 72);
  if ((*(_BYTE *)(a1 + 64) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 64))
      return 0;
    goto LABEL_9;
  }
  result = 0;
  if ((*(_BYTE *)(a2 + 64) & 1) == 0
    && (~vaddv_s16((int16x4_t)vand_s8((int8x8_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(*(int64x2_t *)(a1 + 32), *(int64x2_t *)(a2 + 32)), (int32x4_t)vceqq_s64(*(int64x2_t *)(a1 + 48), *(int64x2_t *)(a2 + 48)))), 0xFuLL)), (int8x8_t)0x8000400020001)) & 0xF) == 0)
  {
LABEL_9:
    if ((v4 & 1) != 0)
    {
      if ((*(_BYTE *)(a2 + 104) & 1) != 0)
        return 1;
    }
    else if ((*(_BYTE *)(a2 + 104) & 1) == 0
           && (~vaddv_s16((int16x4_t)vand_s8((int8x8_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(v6, *(int64x2_t *)(a2 + 72)), (int32x4_t)vceqq_s64(v5, *(int64x2_t *)(a2 + 88)))), 0xFuLL)), (int8x8_t)0x8000400020001)) & 0xF) == 0)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.MarkdownSourcePosition.CodingKeys, &type metadata for AttributedString.MarkdownSourcePosition.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.MarkdownSourcePosition.CodingKeys, &type metadata for AttributedString.MarkdownSourcePosition.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.MarkdownSourcePosition.CodingKeys, &type metadata for AttributedString.MarkdownSourcePosition.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.MarkdownSourcePosition.CodingKeys, &type metadata for AttributedString.MarkdownSourcePosition.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString.MarkdownSourcePosition.Offsets and conformance AttributedString.MarkdownSourcePosition.Offsets()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets and conformance AttributedString.MarkdownSourcePosition.Offsets;
  if (!lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets and conformance AttributedString.MarkdownSourcePosition.Offsets)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.MarkdownSourcePosition.Offsets, &type metadata for AttributedString.MarkdownSourcePosition.Offsets);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets and conformance AttributedString.MarkdownSourcePosition.Offsets);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets and conformance AttributedString.MarkdownSourcePosition.Offsets;
  if (!lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets and conformance AttributedString.MarkdownSourcePosition.Offsets)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.MarkdownSourcePosition.Offsets, &type metadata for AttributedString.MarkdownSourcePosition.Offsets);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets and conformance AttributedString.MarkdownSourcePosition.Offsets);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets and conformance AttributedString.MarkdownSourcePosition.Offsets;
  if (!lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets and conformance AttributedString.MarkdownSourcePosition.Offsets)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.MarkdownSourcePosition.Offsets, &type metadata for AttributedString.MarkdownSourcePosition.Offsets);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets and conformance AttributedString.MarkdownSourcePosition.Offsets);
  }
  return result;
}

uint64_t specialized AttributedString.MarkdownSourcePosition.Offsets.init(from:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  char v12;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for KeyedDecodingContainer<AttributedString.MarkdownSourcePosition.Offsets.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AttributedString.MarkdownSourcePosition.Offsets.CodingKeys and conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v12 = 0;
  v6 = KeyedDecodingContainer.decode(_:forKey:)();
  v11 = 1;
  KeyedDecodingContainer.decode(_:forKey:)();
  v10 = 2;
  KeyedDecodingContainer.decode(_:forKey:)();
  v9 = 3;
  KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v6;
}

uint64_t outlined consume of AttributedString.MarkdownParsingOptions?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3 != 1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t specialized AttributedString.MarkdownSourcePosition.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E694C7472617473 && a2 == 0xE900000000000065;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C6F437472617473 && a2 == 0xEB000000006E6D75
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656E694C646E65 && a2 == 0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6D756C6F43646E65 && a2 == 0xE90000000000006ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x66664F7472617473 && a2 == 0xEC00000073746573
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x657366664F646E65 && a2 == 0xEA00000000007374)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t specialized AttributedString.MarkdownSourcePosition.Offsets.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 946238581 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x3631667475 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000018230E840
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD00000000000001BLL && a2 == 0x800000018230E860)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t specialized _AttributedStringFromMarkdownCreatorConcrete.parseExtendedAttributes(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  type metadata accessor for JSONDecoder();
  swift_allocObject();
  v9 = JSONDecoder.init()();
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 232))(1);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 256))(1);
  v11 = type metadata accessor for _AttributedStringFromMarkdownCreatorConcrete.ExtendedAttributesBox(0, a3, a4, v10);
  v12 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 320);
  v13 = MEMORY[0x186DA9D64](&protocol conformance descriptor for _AttributedStringFromMarkdownCreatorConcrete<A>.ExtendedAttributesBox, v11);
  v12(&v15, v11, a1, a2, v11, v13);
  result = swift_release();
  if (!v4)
    return v15;
  return result;
}

void specialized _AttributedStringFromMarkdownCreatorConcrete.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

__n128 specialized static AttributedString.MarkdownSourcePosition._forceBridgeFromObjectiveC(_:result:)(void *a1, __n128 *a2)
{
  id v3;
  unint64_t v4;
  _BOOL8 v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __n128 result;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __n128 v19;

  v3 = a1;
  objc_msgSend(v3, sel_startOffsets);
  objc_msgSend(v3, sel_endOffsets);

  v4 = 0;
  v5 = 1;
  if (v15 == 0x7FFFFFFFFFFFFFFFLL || v16 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    if (v17 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v5 = v18 == 0x7FFFFFFFFFFFFFFFLL;
      if (v18 == 0x7FFFFFFFFFFFFFFFLL)
        v4 = 0;
      else
        v4 = v15;
      if (v18 == 0x7FFFFFFFFFFFFFFFLL)
        v6 = 0;
      else
        v6 = v16;
      if (v18 == 0x7FFFFFFFFFFFFFFFLL)
        v7 = 0;
      else
        v7 = v17;
      if (v18 == 0x7FFFFFFFFFFFFFFFLL)
        v8 = 0;
      else
        v8 = v18;
    }
  }
  v9 = 0;
  v10 = 1;
  if (v15 == 0x7FFFFFFFFFFFFFFFLL || v16 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    if (v17 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v10 = v18 == 0x7FFFFFFFFFFFFFFFLL;
      if (v18 == 0x7FFFFFFFFFFFFFFFLL)
        v9 = 0;
      else
        v9 = v15;
      if (v18 == 0x7FFFFFFFFFFFFFFFLL)
        v11 = 0;
      else
        v11 = v16;
      if (v18 == 0x7FFFFFFFFFFFFFFFLL)
        v12 = 0;
      else
        v12 = v17;
      if (v18 == 0x7FFFFFFFFFFFFFFFLL)
        v13 = 0;
      else
        v13 = v18;
    }
  }
  *a2 = v19;
  result = v19;
  a2[1] = v19;
  a2[2].n128_u64[0] = v4;
  a2[2].n128_u64[1] = v6;
  a2[3].n128_u64[0] = v7;
  a2[3].n128_u64[1] = v8;
  a2[4].n128_u64[0] = v5;
  a2[4].n128_u64[1] = v9;
  a2[5].n128_u64[0] = v11;
  a2[5].n128_u64[1] = v12;
  a2[6].n128_u64[0] = v13;
  a2[6].n128_u8[8] = v10;
  a2[6].n128_u8[9] = 0;
  return result;
}

uint64_t specialized static AttributedString.MarkdownSourcePosition._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  v3 = a1;
  objc_msgSend(v3, sel_startOffsets);
  objc_msgSend(v3, sel_endOffsets);

  v4 = 0;
  v5 = 1;
  if (v15 == 0x7FFFFFFFFFFFFFFFLL || v16 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    if (v17 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v5 = v18 == 0x7FFFFFFFFFFFFFFFLL;
      if (v18 == 0x7FFFFFFFFFFFFFFFLL)
        v4 = 0;
      else
        v4 = v15;
      if (v18 == 0x7FFFFFFFFFFFFFFFLL)
        v6 = 0;
      else
        v6 = v16;
      if (v18 == 0x7FFFFFFFFFFFFFFFLL)
        v7 = 0;
      else
        v7 = v17;
      if (v18 == 0x7FFFFFFFFFFFFFFFLL)
        v8 = 0;
      else
        v8 = v18;
    }
  }
  v9 = 0;
  v10 = 1;
  if (v15 == 0x7FFFFFFFFFFFFFFFLL || v16 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    if (v17 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v10 = v18 == 0x7FFFFFFFFFFFFFFFLL;
      if (v18 == 0x7FFFFFFFFFFFFFFFLL)
        v9 = 0;
      else
        v9 = v15;
      if (v18 == 0x7FFFFFFFFFFFFFFFLL)
        v11 = 0;
      else
        v11 = v16;
      if (v18 == 0x7FFFFFFFFFFFFFFFLL)
        v12 = 0;
      else
        v12 = v17;
      if (v18 == 0x7FFFFFFFFFFFFFFFLL)
        v13 = 0;
      else
        v13 = v18;
    }
  }
  *(_OWORD *)a2 = v19;
  *(_OWORD *)(a2 + 16) = v19;
  *(_QWORD *)(a2 + 32) = v4;
  *(_QWORD *)(a2 + 40) = v6;
  *(_QWORD *)(a2 + 48) = v7;
  *(_QWORD *)(a2 + 56) = v8;
  *(_QWORD *)(a2 + 64) = v5;
  *(_QWORD *)(a2 + 72) = v9;
  *(_QWORD *)(a2 + 80) = v11;
  *(_QWORD *)(a2 + 88) = v12;
  *(_QWORD *)(a2 + 96) = v13;
  *(_BYTE *)(a2 + 104) = v10;
  *(_BYTE *)(a2 + 105) = 0;
  return 1;
}

unint64_t lazy protocol witness table accessor for type AttributedString.MarkdownParsingOptions.FailurePolicy and conformance AttributedString.MarkdownParsingOptions.FailurePolicy()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.MarkdownParsingOptions.FailurePolicy and conformance AttributedString.MarkdownParsingOptions.FailurePolicy;
  if (!lazy protocol witness table cache variable for type AttributedString.MarkdownParsingOptions.FailurePolicy and conformance AttributedString.MarkdownParsingOptions.FailurePolicy)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.MarkdownParsingOptions.FailurePolicy, &type metadata for AttributedString.MarkdownParsingOptions.FailurePolicy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.MarkdownParsingOptions.FailurePolicy and conformance AttributedString.MarkdownParsingOptions.FailurePolicy);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString.MarkdownParsingOptions.InterpretedSyntax and conformance AttributedString.MarkdownParsingOptions.InterpretedSyntax()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.MarkdownParsingOptions.InterpretedSyntax and conformance AttributedString.MarkdownParsingOptions.InterpretedSyntax;
  if (!lazy protocol witness table cache variable for type AttributedString.MarkdownParsingOptions.InterpretedSyntax and conformance AttributedString.MarkdownParsingOptions.InterpretedSyntax)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.MarkdownParsingOptions.InterpretedSyntax, &type metadata for AttributedString.MarkdownParsingOptions.InterpretedSyntax);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.MarkdownParsingOptions.InterpretedSyntax and conformance AttributedString.MarkdownParsingOptions.InterpretedSyntax);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString.MarkdownSourcePosition and conformance AttributedString.MarkdownSourcePosition()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition and conformance AttributedString.MarkdownSourcePosition;
  if (!lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition and conformance AttributedString.MarkdownSourcePosition)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.MarkdownSourcePosition, &type metadata for AttributedString.MarkdownSourcePosition);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition and conformance AttributedString.MarkdownSourcePosition);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition and conformance AttributedString.MarkdownSourcePosition;
  if (!lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition and conformance AttributedString.MarkdownSourcePosition)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.MarkdownSourcePosition, &type metadata for AttributedString.MarkdownSourcePosition);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition and conformance AttributedString.MarkdownSourcePosition);
  }
  return result;
}

uint64_t initializeWithCopy for AttributedString.MarkdownParsingOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AttributedString.MarkdownParsingOptions(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for AttributedString.MarkdownParsingOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttributedString.MarkdownParsingOptions(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributedString.MarkdownParsingOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AttributedString.MarkdownParsingOptions.FailurePolicy(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_181E020D0 + 4 * byte_182163C1F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_181E02104 + 4 * byte_182163C1A[v4]))();
}

uint64_t sub_181E02104(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E0210C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181E02114);
  return result;
}

uint64_t sub_181E02120(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181E02128);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_181E0212C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E02134(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for AttributedString.MarkdownParsingOptions.InterpretedSyntax(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_181E0218C + 4 * byte_182163C29[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_181E021C0 + 4 * byte_182163C24[v4]))();
}

uint64_t sub_181E021C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E021C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181E021D0);
  return result;
}

uint64_t sub_181E021DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181E021E4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_181E021E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E021F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTagSinglePayload for AttributedString.MarkdownSourcePosition(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 105))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AttributedString.MarkdownSourcePosition(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 104) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 105) = v3;
  return result;
}

ValueMetadata *type metadata accessor for AttributedString.MarkdownSourcePosition()
{
  return &type metadata for AttributedString.MarkdownSourcePosition;
}

uint64_t storeEnumTagSinglePayload for AttributedString.MarkdownSourcePosition.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_181E022C0 + 4 * byte_182163C33[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_181E022F4 + 4 * byte_182163C2E[v4]))();
}

uint64_t sub_181E022F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E022FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181E02304);
  return result;
}

uint64_t sub_181E02310(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181E02318);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_181E0231C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E02324(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AttributedString.MarkdownSourcePosition.CodingKeys()
{
  return &type metadata for AttributedString.MarkdownSourcePosition.CodingKeys;
}

ValueMetadata *type metadata accessor for AttributedString.MarkdownSourcePosition.Offsets()
{
  return &type metadata for AttributedString.MarkdownSourcePosition.Offsets;
}

unint64_t lazy protocol witness table accessor for type AttributedString.MarkdownSourcePosition.Offsets.CodingKeys and conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets.CodingKeys and conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets.CodingKeys and conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.MarkdownSourcePosition.Offsets.CodingKeys, &unk_1E0F1D3F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets.CodingKeys and conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets.CodingKeys and conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets.CodingKeys and conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.MarkdownSourcePosition.Offsets.CodingKeys, &unk_1E0F1D3F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets.CodingKeys and conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets.CodingKeys and conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets.CodingKeys and conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.MarkdownSourcePosition.Offsets.CodingKeys, &unk_1E0F1D3F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets.CodingKeys and conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets.CodingKeys and conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets.CodingKeys and conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.MarkdownSourcePosition.Offsets.CodingKeys, &unk_1E0F1D3F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.MarkdownSourcePosition.Offsets.CodingKeys and conformance AttributedString.MarkdownSourcePosition.Offsets.CodingKeys);
  }
  return result;
}

uint64_t type metadata accessor for _AttributedStringFromMarkdownCreatorConcrete.ExtendedAttributesBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _AttributedStringFromMarkdownCreatorConcrete.ExtendedAttributesBox);
}

uint64_t *initializeBufferWithCopyOfBuffer for _AttributedStringFromMarkdownCreatorConcrete.DecodedAttributeBox(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if (v6 <= 7 && *(_QWORD *)(v5 + 64) <= 0x18uLL && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  }
  else
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~v6));
    swift_retain();
  }
  return a1;
}

uint64_t destroy for _AttributedStringFromMarkdownCreatorConcrete.DecodedAttributeBox(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

uint64_t initializeWithCopy for _AttributedStringFromMarkdownCreatorConcrete.DecodedAttributeBox(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithCopy for _AttributedStringFromMarkdownCreatorConcrete.DecodedAttributeBox(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 24))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t initializeWithTake for _AttributedStringFromMarkdownCreatorConcrete.DecodedAttributeBox(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithTake for _AttributedStringFromMarkdownCreatorConcrete.DecodedAttributeBox(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 40))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t storeEnumTagSinglePayload for AttributedString.MarkdownSourcePosition.Offsets.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_181E02764 + 4 * byte_182163C4B[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_181E02798 + 4 * byte_182163C46[v4]))();
}

uint64_t sub_181E02798(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E027A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181E027A8);
  return result;
}

uint64_t sub_181E027B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181E027BCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_181E027C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E027C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for AttributedString.MarkdownSourcePosition.Offsets.CodingKeys()
{
  return &unk_1E0F1D3F0;
}

uint64_t type metadata accessor for _AttributedStringFromMarkdownCreatorConcrete.ExtendedAttributesBox.AttributeKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _AttributedStringFromMarkdownCreatorConcrete.ExtendedAttributesBox.AttributeKey);
}

uint64_t assignWithCopy for _AttributedStringFromMarkdownCreatorConcrete.ExtendedAttributesBox.AttributeKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  return a1;
}

uint64_t assignWithTake for _AttributedStringFromMarkdownCreatorConcrete.ExtendedAttributesBox.AttributeKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

void base witness table accessor for CustomDebugStringConvertible in _AttributedStringFromMarkdownCreatorConcrete<A>.ExtendedAttributesBox.AttributeKey()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomStringConvertible in _AttributedStringFromMarkdownCreatorConcrete<A>.ExtendedAttributesBox.AttributeKey()
{
  JUMPOUT(0x186DA9D64);
}

void Date.ParseStrategy.consuming(_:startingAt:in:)(unint64_t a1@<X2>, unint64_t a2@<X4>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;

  if (a1 >> 14 >= a2 >> 14)
    goto LABEL_13;
  v4 = Date.ParseStrategy.formatter.getter();
  if (!v4)
    goto LABEL_13;
  v5 = v4;
  v6 = String.subscript.getter();
  if (!((v6 ^ v7) >> 14)
    || (*(_BYTE *)(v5 + 24) & 1) == 0
    && (Substring.subscript.getter(), v8 = Character.isWhitespace.getter(), swift_bridgeObjectRelease(), (v8 & 1) != 0))
  {
    swift_release();
LABEL_12:
    swift_bridgeObjectRelease();
LABEL_13:
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
    return;
  }
  lazy protocol witness table accessor for type Substring and conformance Substring();
  swift_bridgeObjectRetain();
  v9 = String.init<A>(_:)();
  v11 = v10;
  udat_getCalendar();
  ucal_clone();
  swift_bridgeObjectRetain();
  v17 = specialized _copyCollectionToContiguousArray<A>(_:)(v9, v11);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type String and conformance String();
  v12 = String.Index.utf16Offset<A>(in:)();
  if (v12 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_16;
  }
  v13 = v12;
  if (v12 > 0x7FFFFFFF)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }
  v18 = v12;
  if (v17[2] >> 31)
    goto LABEL_17;
  udat_parseCalendar();
  swift_release();
  if (v13 == v18)
  {
    ucal_close();
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  ucal_getMillis();
  v15 = v14 / 1000.0 + -978307200.0;
  ucal_close();
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type Substring and conformance Substring();
  v16 = String.Index.init<A>(utf16Offset:in:)();
  swift_release();
  *(_QWORD *)a3 = v16;
  *(double *)(a3 + 8) = v15;
  *(_BYTE *)(a3 + 16) = 0;
}

uint64_t Date.ParseStrategy.isLenient.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t Date.ParseStrategy.isLenient.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*Date.ParseStrategy.isLenient.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

double Date.ParseStrategy.twoDigitStartDate.getter@<D0>(double *a1@<X8>)
{
  uint64_t v1;
  double result;

  result = *(double *)(v1 + 8);
  *a1 = result;
  return result;
}

double Date.ParseStrategy.twoDigitStartDate.setter(double *a1)
{
  uint64_t v1;
  double result;

  result = *a1;
  *(double *)(v1 + 8) = *a1;
  return result;
}

uint64_t (*Date.ParseStrategy.twoDigitStartDate.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.ParseStrategy.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_OWORD *)(v1 + 16);
  return swift_unknownObjectRetain();
}

uint64_t Date.ParseStrategy.locale.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  result = swift_unknownObjectRelease();
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)(v1 + 24) = v3;
  return result;
}

uint64_t (*Date.ParseStrategy.locale.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.ParseStrategy.timeZone.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_OWORD *)(v1 + 32);
  return swift_unknownObjectRetain();
}

__n128 Date.ParseStrategy.timeZone.setter(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  swift_unknownObjectRelease();
  result = *a1;
  v1[2] = *a1;
  return result;
}

uint64_t (*Date.ParseStrategy.timeZone.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.ParseStrategy.calendar.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_OWORD *)(v1 + 48);
  return swift_unknownObjectRetain();
}

__n128 Date.ParseStrategy.calendar.setter(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  swift_unknownObjectRelease();
  result = *a1;
  v1[3] = *a1;
  return result;
}

uint64_t (*Date.ParseStrategy.calendar.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.ParseStrategy.format.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

__n128 Date.ParseStrategy.init(format:locale:timeZone:calendar:isLenient:twoDigitStartDate:)@<Q0>(uint64_t *a1@<X0>, _OWORD *a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X3>, char a5@<W4>, uint64_t *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __n128 result;

  v7 = *a1;
  v8 = a1[1];
  v9 = *a6;
  *(_BYTE *)a7 = a5;
  *(_QWORD *)(a7 + 8) = v9;
  v10 = *a3;
  *(_OWORD *)(a7 + 16) = *a2;
  *(_OWORD *)(a7 + 32) = v10;
  result = *a4;
  *(__n128 *)(a7 + 48) = *a4;
  *(_QWORD *)(a7 + 64) = v7;
  *(_QWORD *)(a7 + 72) = v8;
  return result;
}

uint64_t Date.ParseStrategy.formatter.getter()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v25;
  char v26;
  _QWORD v27[4];
  _QWORD v28[3];
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;

  v26 = *v0;
  v1 = *((_QWORD *)v0 + 1);
  v2 = *((_QWORD *)v0 + 5);
  v3 = *((_QWORD *)v0 + 7);
  v4 = *((_QWORD *)v0 + 9);
  v25 = *((_QWORD *)v0 + 8);
  if (*((_QWORD *)v0 + 2))
  {
    v5 = *((_QWORD *)v0 + 3);
    ObjectType = swift_getObjectType();
    v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 64);
    swift_unknownObjectRetain();
    v8 = v7(ObjectType, v5);
    v10 = v9;
    swift_unknownObjectRelease();
  }
  else
  {
    v8 = 0;
    v10 = 0;
  }
  v11 = swift_getObjectType();
  v12 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 32);
  swift_unknownObjectRetain();
  v13 = v12(v11, v2);
  v15 = v14;
  swift_unknownObjectRelease();
  v16 = swift_getObjectType();
  v17 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v3 + 24);
  swift_unknownObjectRetain();
  v17(v28, v16, v3);
  swift_unknownObjectRelease();
  v18 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 56);
  swift_unknownObjectRetain();
  v19 = v18(v16, v3);
  v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 72))(v16, v3);
  swift_unknownObjectRelease();
  if (v10)
    v21 = v8;
  else
    v21 = 0;
  if (v10)
    v22 = v10;
  else
    v22 = 0xE000000000000000;
  v27[0] = v21;
  v27[1] = v22;
  v27[2] = v13;
  v27[3] = v15;
  v28[1] = v19;
  v28[2] = v20;
  v29 = 0;
  v30 = v25;
  v31 = v4;
  v32 = v26;
  v33 = v1;
  swift_bridgeObjectRetain();
  v23 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)v27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v23;
}

__n128 Date.ParseStrategy.init(formatStyle:lenient:twoDigitStartDate:)@<Q0>(__int128 *a1@<X0>, char a2@<W1>, unint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  __n128 result;
  __n128 v38;
  _QWORD v39[2];
  os_unfair_lock_s *v40[2];
  char v41[8];
  uint64_t v42;
  char v43;
  char v44;
  char v45;
  char v46;
  uint64_t v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  uint64_t v56;
  char v57;
  char v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  _BYTE v64[42];

  v7 = a1[2];
  v6 = a1[3];
  v8 = a1[4];
  v9 = a1[6];
  *(_OWORD *)v64 = a1[5];
  *(_OWORD *)&v64[16] = v9;
  *(_OWORD *)&v64[26] = *(__int128 *)((char *)a1 + 106);
  v10 = a1[1];
  v59 = *a1;
  v60 = v10;
  v61 = v7;
  v62 = v6;
  v63 = v8;
  v11 = *a3;
  v12 = v7;
  if ((v7 & 0xFF000000000000) == 0x3000000000000)
  {
    v13 = 0;
    LOBYTE(v14) = 0;
    v15 = 0;
    LOBYTE(v16) = 0;
    LOBYTE(v17) = 0;
    v18 = 0;
    LOBYTE(v19) = 12;
    v20 = -1;
    LOBYTE(v21) = 2;
    LOBYTE(v22) = 9;
    LOBYTE(v23) = 6;
    v12 = 1;
    LOBYTE(v24) = 5;
    v25 = 3;
    v26 = 3;
    LOBYTE(v27) = 3;
    LOBYTE(v28) = 3;
    LOBYTE(v29) = 1;
  }
  else
  {
    v13 = *((_QWORD *)&v59 + 1);
    v26 = v60;
    v24 = (unint64_t)v60 >> 8;
    v18 = *((_QWORD *)&v61 + 1);
    v15 = *((_QWORD *)&v60 + 1);
    v25 = v59;
    v14 = (unint64_t)v60 >> 16;
    v27 = (unint64_t)v60 >> 24;
    v16 = ((unint64_t)v7 >> 8) & 1;
    v28 = (unint64_t)v7 >> 16;
    v23 = (unint64_t)v7 >> 24;
    v22 = DWORD1(v7);
    v17 = (unint64_t)v7 >> 40;
    v29 = WORD3(v7);
    v21 = BYTE7(v7);
    v20 = v62;
    v19 = BYTE1(v62);
  }
  v41[0] = v25;
  v42 = v13;
  v43 = v26;
  v44 = v24;
  v45 = v14;
  v46 = v27;
  v47 = v15;
  v48 = v12;
  v49 = v16;
  v50 = v28;
  v51 = v23;
  v52 = v22;
  v53 = v17;
  v54 = v29;
  v55 = v21;
  v56 = v18;
  v57 = v20;
  v58 = v19;
  v30 = *((_QWORD *)&v63 + 1);
  v31 = *(_QWORD *)v64;
  v40[0] = *((os_unfair_lock_s **)&v63 + 1);
  v40[1] = *(os_unfair_lock_s **)v64;
  v32 = *(_QWORD *)&v64[24];
  v33 = *(_QWORD *)&v64[32];
  v39[0] = *(_QWORD *)&v64[24];
  v39[1] = *(_QWORD *)&v64[32];
  v34 = specialized static ICUPatternGenerator.localizedPattern(symbols:locale:calendar:)((uint64_t)v41, v40, (uint64_t)v39);
  v36 = v35;
  swift_unknownObjectRetain();
  v38 = *(__n128 *)&v64[8];
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  outlined release of Date.FormatStyle((uint64_t)&v59);
  a4->n128_u8[0] = a2 & 1;
  a4->n128_u64[1] = v11;
  a4[1].n128_u64[0] = v30;
  a4[1].n128_u64[1] = v31;
  result = v38;
  a4[2] = v38;
  a4[3].n128_u64[0] = v32;
  a4[3].n128_u64[1] = v33;
  a4[4].n128_u64[0] = v34;
  a4[4].n128_u64[1] = v36;
  return result;
}

uint64_t Date.ParseStrategy.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  Swift::UInt64 v3;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt64 v6;
  uint64_t ObjectType;
  uint64_t (*v8)(uint64_t, uint64_t);
  Swift::UInt8 v9;
  void (*v10)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  Swift::UInt8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  void *v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  void *v41;
  id v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  Swift::UInt v46;
  Swift::UInt v47;
  Swift::UInt8 v48;
  Swift::UInt8 v49;
  Swift::UInt8 v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE v58[144];
  _BYTE v59[8];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  char v74;
  char v75;
  char v76;
  _QWORD v77[18];
  _BYTE v78[144];
  _BYTE v79[152];

  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v56 = *(_QWORD *)(v1 + 56);
  v57 = *(_QWORD *)(v1 + 40);
  Hasher._combine(_:)(*(_BYTE *)v1);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v6 = v3;
  else
    v6 = 0;
  Hasher._combine(_:)(v6);
  if (!v4)
  {
    Hasher._combine(_:)(0);
LABEL_11:
    v11 = v56;
    goto LABEL_12;
  }
  Hasher._combine(_:)(1u);
  ObjectType = swift_getObjectType();
  v8 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain_n();
  if ((v8(ObjectType, v5) & 1) != 0)
  {
    v9 = 1;
LABEL_10:
    Hasher._combine(_:)(v9);
    swift_unknownObjectRelease_n();
    goto LABEL_11;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(ObjectType, v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v10 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v5 + 464);
  swift_unknownObjectRetain();
  v10(v77, ObjectType, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v77, (uint64_t)v78);
  outlined init with take of LocalePreferences?((uint64_t)v78, (uint64_t)v79);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v79) == 1)
  {
    v9 = 0;
    goto LABEL_10;
  }
  outlined init with take of LocalePreferences?((uint64_t)v78, (uint64_t)v59);
  Hasher._combine(_:)(1u);
  if (v59[0] == 2)
  {
    v17 = 0;
  }
  else
  {
    v17 = v59[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v17);
  v18 = v60;
  if (!v60)
  {
    Hasher._combine(_:)(0);
    v23 = v59;
    goto LABEL_27;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v18 + 16));
  v19 = *(_QWORD *)(v18 + 16);
  if (!v19)
  {
    outlined init with take of LocalePreferences?((uint64_t)v78, (uint64_t)v58);
    v23 = v58;
LABEL_27:
    outlined retain of LocalePreferences(v23);
    if (!v61)
      goto LABEL_21;
    goto LABEL_28;
  }
  outlined retain of LocalePreferences?((uint64_t)v78, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v20 = v18 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v20 += 16;
    --v19;
  }
  while (v19);
  swift_bridgeObjectRelease();
  if (!v61)
  {
LABEL_21:
    Hasher._combine(_:)(0);
    if (!v62)
      goto LABEL_22;
    goto LABEL_29;
  }
LABEL_28:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v62)
  {
LABEL_22:
    Hasher._combine(_:)(0);
    v21 = v63;
    if (!v63)
      goto LABEL_23;
LABEL_30:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v21);
    swift_bridgeObjectRelease();
    v22 = v64;
    if (!v64)
      goto LABEL_24;
    goto LABEL_31;
  }
LABEL_29:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v21 = v63;
  if (v63)
    goto LABEL_30;
LABEL_23:
  Hasher._combine(_:)(0);
  v22 = v64;
  if (!v64)
  {
LABEL_24:
    Hasher._combine(_:)(0);
    goto LABEL_32;
  }
LABEL_31:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v22);
  swift_bridgeObjectRelease();
LABEL_32:
  v24 = v66;
  v26 = v67;
  v25 = v68;
  v27 = v69;
  v51 = v69;
  v52 = v65;
  if (v65)
  {
    v28 = v65;
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v29 = v24;
    v30 = v26;
    v31 = v25;
    v32 = v27;
    v33 = v28;
    _CFObject.hash(into:)();
    v53 = v24;
    v54 = v25;
    if (v24)
    {
LABEL_34:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      v34 = v26;
      v35 = v24;
      _CFObject.hash(into:)();

      v26 = v34;
      goto LABEL_37;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    v36 = v27;
    v37 = v24;
    v38 = v26;
    v39 = v25;
    v53 = v24;
    v54 = v25;
    if (v24)
      goto LABEL_34;
  }
  Hasher._combine(_:)(0);
LABEL_37:
  v55 = v26;
  if (v26)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v40 = v26;
    _CFObject.hash(into:)();

    v41 = v54;
    if (v54)
      goto LABEL_39;
LABEL_42:
    Hasher._combine(_:)(0);
    if (v51)
      goto LABEL_40;
    goto LABEL_43;
  }
  Hasher._combine(_:)(0);
  v41 = v54;
  if (!v54)
    goto LABEL_42;
LABEL_39:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  v42 = v41;
  _CFObject.hash(into:)();

  if (v51)
  {
LABEL_40:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v43 = v51;
    _CFObject.hash(into:)();

    goto LABEL_44;
  }
LABEL_43:
  Hasher._combine(_:)(0);
  v43 = 0;
LABEL_44:

  v44 = v70;
  if (v44)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v44);
    swift_bridgeObjectRelease();
    v45 = v71;
    if (v71)
      goto LABEL_46;
LABEL_49:
    Hasher._combine(_:)(0);
    if (v72)
      goto LABEL_47;
LABEL_50:
    Hasher._combine(_:)(0);
    goto LABEL_51;
  }
  Hasher._combine(_:)(0);
  v45 = v71;
  if (!v71)
    goto LABEL_49;
LABEL_46:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v45);
  swift_bridgeObjectRelease();
  if (!v72)
    goto LABEL_50;
LABEL_47:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_51:
  v11 = v56;
  if (v73 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v46 = v73 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v46);
  }
  if (v74 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v47 = v74 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v47);
  }
  if (v75 == 2)
  {
    v48 = 0;
  }
  else
  {
    v48 = v75 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v48);
  if (v76 == 2)
  {
    v49 = 0;
  }
  else
  {
    v50 = v76 & 1;
    Hasher._combine(_:)(1u);
    v49 = v50;
  }
  Hasher._combine(_:)(v49);
  outlined retain of LocalePreferences?((uint64_t)v78, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v78, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease_n();
LABEL_12:
  v12 = swift_getObjectType();
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 112);
  swift_unknownObjectRetain();
  v13(a1, v12, v57);
  swift_unknownObjectRelease();
  v14 = swift_getObjectType();
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 120);
  swift_unknownObjectRetain();
  v15(a1, v14, v11);
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Date.ParseStrategy.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181E03A04 + 4 * byte_1821644B0[*v0]))(0x6E65696E654C7369, 0xE900000000000074);
}

unint64_t sub_181E03A04()
{
  return 0xD000000000000011;
}

uint64_t sub_181E03A20()
{
  return 0x656C61636F6CLL;
}

uint64_t sub_181E03A34()
{
  return 0x656E6F5A656D6974;
}

uint64_t sub_181E03A4C()
{
  return 0x7261646E656C6163;
}

uint64_t sub_181E03A64()
{
  return 0x74616D726F66;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Date.ParseStrategy.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized Date.ParseStrategy.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.ParseStrategy.CodingKeys()
{
  lazy protocol witness table accessor for type Date.ParseStrategy.CodingKeys and conformance Date.ParseStrategy.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.ParseStrategy.CodingKeys()
{
  lazy protocol witness table accessor for type Date.ParseStrategy.CodingKeys and conformance Date.ParseStrategy.CodingKeys();
  return CodingKey.debugDescription.getter();
}

Swift::Int Date.ParseStrategy.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt8 v1;
  Swift::UInt64 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt64 v6;
  uint64_t ObjectType;
  uint64_t (*v8)(uint64_t, uint64_t);
  Swift::UInt8 v9;
  void (*v10)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_BYTE *, uint64_t, uint64_t);
  uint64_t v14;
  void (*v15)(_BYTE *, uint64_t, uint64_t);
  Swift::UInt8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  void *v39;
  id v40;
  void *v41;
  id v42;
  id v43;
  void *v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  Swift::UInt v49;
  Swift::UInt v50;
  Swift::UInt8 v51;
  Swift::UInt8 v52;
  Swift::UInt8 v53;
  void *v54;
  void *v55;
  void *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  _BYTE v60[144];
  _BYTE v61[8];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  char v76;
  char v77;
  char v78;
  _QWORD v79[18];
  _BYTE v80[144];
  _BYTE v81[144];
  _BYTE v82[80];

  v1 = *(_BYTE *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  v5 = *(_QWORD *)(v0 + 40);
  v59 = *(_QWORD *)(v0 + 56);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v6 = v2;
  else
    v6 = 0;
  Hasher._combine(_:)(v6);
  if (!v3)
  {
    Hasher._combine(_:)(0);
LABEL_11:
    v11 = v59;
    goto LABEL_12;
  }
  Hasher._combine(_:)(1u);
  ObjectType = swift_getObjectType();
  v8 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 48);
  swift_unknownObjectRetain_n();
  if ((v8(ObjectType, v4) & 1) != 0)
  {
    v9 = 1;
LABEL_10:
    Hasher._combine(_:)(v9);
    swift_unknownObjectRelease_n();
    goto LABEL_11;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 64))(ObjectType, v4);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v10 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 464);
  swift_unknownObjectRetain();
  v10(v79, ObjectType, v4);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v79, (uint64_t)v80);
  outlined init with take of LocalePreferences?((uint64_t)v80, (uint64_t)v81);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v81) == 1)
  {
    v9 = 0;
    goto LABEL_10;
  }
  outlined init with take of LocalePreferences?((uint64_t)v80, (uint64_t)v61);
  Hasher._combine(_:)(1u);
  if (v61[0] == 2)
  {
    v17 = 0;
  }
  else
  {
    v17 = v61[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v17);
  v18 = v62;
  if (!v62)
  {
    Hasher._combine(_:)(0);
    v22 = v61;
    goto LABEL_26;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v18 + 16));
  v19 = *(_QWORD *)(v18 + 16);
  if (!v19)
  {
    outlined init with take of LocalePreferences?((uint64_t)v80, (uint64_t)v60);
    v22 = v60;
LABEL_26:
    outlined retain of LocalePreferences(v22);
    if (!v63)
      goto LABEL_21;
    goto LABEL_27;
  }
  outlined retain of LocalePreferences?((uint64_t)v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v20 = v18 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v20 += 16;
    --v19;
  }
  while (v19);
  swift_bridgeObjectRelease();
  if (!v63)
  {
LABEL_21:
    Hasher._combine(_:)(0);
    if (!v64)
      goto LABEL_22;
LABEL_28:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v21 = v65;
    if (!v65)
      goto LABEL_23;
    goto LABEL_29;
  }
LABEL_27:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v64)
    goto LABEL_28;
LABEL_22:
  Hasher._combine(_:)(0);
  v21 = v65;
  if (!v65)
  {
LABEL_23:
    Hasher._combine(_:)(0);
    goto LABEL_30;
  }
LABEL_29:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v82, v21);
  swift_bridgeObjectRelease();
LABEL_30:
  v23 = v66;
  if (v66)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v82, v23);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v24 = v68;
  v26 = v69;
  v25 = v70;
  v27 = v71;
  v54 = v71;
  v55 = v67;
  if (v67)
  {
    v57 = v5;
    v28 = v67;
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v29 = v24;
    v30 = v26;
    v31 = v25;
    v32 = v27;
    v33 = v28;
    v5 = v57;
    _CFObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    v34 = v27;
    v35 = v24;
    v36 = v26;
    v37 = v25;
  }
  v58 = v25;
  v38 = v5;
  if (v24)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v39 = v24;
    v40 = v24;
    v41 = v26;
    v42 = v40;
    _CFObject.hash(into:)();

    v26 = v41;
  }
  else
  {
    v39 = 0;
    Hasher._combine(_:)(0);
  }
  v56 = v26;
  if (v26)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v43 = v26;
    _CFObject.hash(into:)();

  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v44 = v39;
  v5 = v38;
  if (v58)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v45 = v58;
    _CFObject.hash(into:)();

    if (v54)
    {
LABEL_44:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      v46 = v54;
      _CFObject.hash(into:)();

      goto LABEL_47;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v54)
      goto LABEL_44;
  }
  Hasher._combine(_:)(0);
  v46 = 0;
LABEL_47:

  v47 = v72;
  if (v47)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v82, v47);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v48 = v73;
  if (!v73)
  {
    Hasher._combine(_:)(0);
    if (v74)
      goto LABEL_52;
LABEL_54:
    Hasher._combine(_:)(0);
    goto LABEL_55;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v82, v48);
  swift_bridgeObjectRelease();
  if (!v74)
    goto LABEL_54;
LABEL_52:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_55:
  v11 = v59;
  if (v75 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v49 = v75 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v49);
  }
  if (v76 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v50 = v76 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v50);
  }
  if (v77 == 2)
  {
    v51 = 0;
  }
  else
  {
    v51 = v77 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v51);
  if (v78 == 2)
  {
    v52 = 0;
  }
  else
  {
    v53 = v78 & 1;
    Hasher._combine(_:)(1u);
    v52 = v53;
  }
  Hasher._combine(_:)(v52);
  outlined retain of LocalePreferences?((uint64_t)v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease_n();
LABEL_12:
  v12 = swift_getObjectType();
  v13 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 112);
  swift_unknownObjectRetain();
  v13(v82, v12, v5);
  swift_unknownObjectRelease();
  v14 = swift_getObjectType();
  v15 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v11 + 120);
  swift_unknownObjectRetain();
  v15(v82, v14, v11);
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.ParseStrategy()
{
  uint64_t v0;
  Swift::UInt8 v1;
  Swift::UInt64 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt64 v6;
  uint64_t ObjectType;
  uint64_t (*v8)(uint64_t, uint64_t);
  Swift::UInt8 v9;
  void (*v10)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_BYTE *, uint64_t, uint64_t);
  uint64_t v14;
  void (*v15)(_BYTE *, uint64_t, uint64_t);
  Swift::UInt8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  void *v38;
  id v39;
  void *v40;
  id v41;
  id v42;
  void *v43;
  id v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  Swift::UInt v48;
  Swift::UInt v49;
  Swift::UInt8 v50;
  Swift::UInt8 v51;
  Swift::UInt8 v52;
  void *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  char v74;
  char v75;
  char v76;
  _QWORD v77[18];
  _BYTE v78[144];
  _BYTE v79[144];
  _BYTE v80[80];

  v1 = *(_BYTE *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  v5 = *(_QWORD *)(v0 + 40);
  v58 = *(_QWORD *)(v0 + 56);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v6 = v2;
  else
    v6 = 0;
  Hasher._combine(_:)(v6);
  if (!v3)
  {
    Hasher._combine(_:)(0);
LABEL_11:
    v11 = v58;
    goto LABEL_12;
  }
  Hasher._combine(_:)(1u);
  ObjectType = swift_getObjectType();
  v8 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 48);
  swift_unknownObjectRetain_n();
  if ((v8(ObjectType, v4) & 1) != 0)
  {
    v9 = 1;
LABEL_10:
    Hasher._combine(_:)(v9);
    swift_unknownObjectRelease_n();
    goto LABEL_11;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 64))(ObjectType, v4);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v10 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 464);
  swift_unknownObjectRetain();
  v10(v77, ObjectType, v4);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v77, (uint64_t)v78);
  outlined init with take of LocalePreferences?((uint64_t)v78, (uint64_t)v79);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v79) == 1)
  {
    v9 = 0;
    goto LABEL_10;
  }
  outlined init with take of LocalePreferences?((uint64_t)v78, (uint64_t)&v59);
  Hasher._combine(_:)(1u);
  if (v59 == 2)
  {
    v17 = 0;
  }
  else
  {
    v17 = v59 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v17);
  v18 = v60;
  if (!v60)
  {
    Hasher._combine(_:)(0);
LABEL_25:
    outlined retain of LocalePreferences(&v59);
    if (!v61)
      goto LABEL_21;
    goto LABEL_26;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v18 + 16));
  v19 = *(_QWORD *)(v18 + 16);
  if (!v19)
    goto LABEL_25;
  outlined retain of LocalePreferences?((uint64_t)v78, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v20 = v18 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v20 += 16;
    --v19;
  }
  while (v19);
  swift_bridgeObjectRelease();
  if (!v61)
  {
LABEL_21:
    Hasher._combine(_:)(0);
    if (!v62)
      goto LABEL_22;
LABEL_27:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v21 = v63;
    if (!v63)
      goto LABEL_23;
    goto LABEL_28;
  }
LABEL_26:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v62)
    goto LABEL_27;
LABEL_22:
  Hasher._combine(_:)(0);
  v21 = v63;
  if (!v63)
  {
LABEL_23:
    Hasher._combine(_:)(0);
    goto LABEL_29;
  }
LABEL_28:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v80, v21);
  swift_bridgeObjectRelease();
LABEL_29:
  v22 = v64;
  if (v64)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v80, v22);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v23 = v66;
  v25 = v67;
  v24 = v68;
  v26 = v69;
  v53 = v69;
  v54 = v65;
  if (v65)
  {
    v56 = v5;
    v27 = v65;
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v28 = v23;
    v29 = v25;
    v30 = v24;
    v31 = v26;
    v32 = v27;
    v5 = v56;
    _CFObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    v33 = v26;
    v34 = v23;
    v35 = v25;
    v36 = v24;
  }
  v57 = v24;
  v37 = v5;
  if (v23)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v38 = v23;
    v39 = v23;
    v40 = v25;
    v41 = v39;
    _CFObject.hash(into:)();

    v25 = v40;
  }
  else
  {
    v38 = 0;
    Hasher._combine(_:)(0);
  }
  v55 = v25;
  if (v25)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v42 = v25;
    _CFObject.hash(into:)();

  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v43 = v38;
  v5 = v37;
  if (v57)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v44 = v57;
    _CFObject.hash(into:)();

    if (v53)
    {
LABEL_43:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      v45 = v53;
      _CFObject.hash(into:)();

      goto LABEL_46;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v53)
      goto LABEL_43;
  }
  Hasher._combine(_:)(0);
  v45 = 0;
LABEL_46:

  v46 = v70;
  if (v46)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v80, v46);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v47 = v71;
  if (!v71)
  {
    Hasher._combine(_:)(0);
    if (v72)
      goto LABEL_51;
LABEL_53:
    Hasher._combine(_:)(0);
    goto LABEL_54;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v80, v47);
  swift_bridgeObjectRelease();
  if (!v72)
    goto LABEL_53;
LABEL_51:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_54:
  v11 = v58;
  if (v73 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v48 = v73 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v48);
  }
  if (v74 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v49 = v74 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v49);
  }
  if (v75 == 2)
  {
    v50 = 0;
  }
  else
  {
    v50 = v75 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v50);
  if (v76 == 2)
  {
    v51 = 0;
  }
  else
  {
    v52 = v76 & 1;
    Hasher._combine(_:)(1u);
    v51 = v52;
  }
  Hasher._combine(_:)(v51);
  outlined retain of LocalePreferences?((uint64_t)v78, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v78, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease_n();
LABEL_12:
  v12 = swift_getObjectType();
  v13 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 112);
  swift_unknownObjectRetain();
  v13(v80, v12, v5);
  swift_unknownObjectRelease();
  v14 = swift_getObjectType();
  v15 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v11 + 120);
  swift_unknownObjectRetain();
  v15(v80, v14, v11);
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Foundation::Date __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Date.ParseStrategy.parse(_:)(Swift::String a1)
{
  double *v1;
  uint64_t v2;
  uint64_t v3;
  void *object;
  __darwin_time_t countAndFlagsBits;
  double *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __darwin_time_t tv_sec;
  uint64_t tv_nsec;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  __darwin_time_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  __darwin_time_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  __darwin_time_t *v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  Swift::String v41;
  __darwin_time_t v42;
  uint64_t v43;
  uint64_t inited;
  uint64_t v45;
  _QWORD *v46;
  __darwin_time_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  __darwin_time_t *v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  id v56;
  id v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  char v63;
  double v64;
  double v65;
  Foundation::Date result;
  uint64_t v67;
  int v68;
  int v69;
  timespec v70;
  _OWORD v71[3];
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  v6 = v1;
  v74 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(v2 + 8);
  v8 = *(_QWORD *)(v2 + 64);
  v9 = *(_QWORD *)(v2 + 72);
  LOBYTE(v70.tv_sec) = *(_BYTE *)v2;
  v70.tv_nsec = v7;
  v10 = *(_OWORD *)(v2 + 32);
  v71[0] = *(_OWORD *)(v2 + 16);
  v71[1] = v10;
  v71[2] = *(_OWORD *)(v2 + 48);
  v72 = v8;
  v73 = v9;
  if (Date.ParseStrategy.formatter.getter())
  {
    v70.tv_sec = countAndFlagsBits;
    v70.tv_nsec = (uint64_t)object;
    udat_getCalendar();
    v69 = 0;
    ucal_clone();
    swift_bridgeObjectRetain();
    v11 = specialized _copyCollectionToContiguousArray<A>(_:)(countAndFlagsBits, (unint64_t)object);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type String and conformance String();
    v12 = String.Index.utf16Offset<A>(in:)();
    if (v12 < (uint64_t)0xFFFFFFFF80000000)
    {
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    v13 = v12;
    if (v12 > 0x7FFFFFFF)
    {
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    v68 = v12;
    if (v11[2] >> 31)
    {
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
    }
    udat_parseCalendar();
    swift_release();
    if (v13 != v68)
    {
      ucal_getMillis();
      v65 = v64 / 1000.0 + -978307200.0;
      ucal_close();
      swift_release();
      *v6 = v65;
      return result;
    }
    ucal_close();
    v70.tv_sec = 0;
    v70.tv_nsec = 0;
    clock_gettime(_CLOCK_REALTIME, &v70);
    v14 = swift_retain_n();
    MEMORY[0x1E0C80A78](v14);
    swift_retain();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)&v67, &v70.tv_sec);
    if (!v3)
    {
      tv_sec = v70.tv_sec;
      tv_nsec = v70.tv_nsec;
      swift_release_n();
      v70.tv_sec = 0;
      v70.tv_nsec = 0xE000000000000000;
      if (tv_nsec)
      {
        _StringGuts.grow(_:)(88);
        v17._countAndFlagsBits = 0x7020746F6E6E6143;
        v17._object = (void *)0xED00002065737261;
        String.append(_:)(v17);
        v18._countAndFlagsBits = countAndFlagsBits;
        v18._object = object;
        String.append(_:)(v18);
        v19._countAndFlagsBits = 0xD000000000000046;
        v19._object = (void *)0x80000001823067D0;
        String.append(_:)(v19);
        v20 = tv_sec;
        v21 = tv_nsec;
      }
      else
      {
        _StringGuts.grow(_:)(16);
        swift_bridgeObjectRelease();
        strcpy((char *)&v70, "Cannot parse ");
        HIWORD(v70.tv_nsec) = -4864;
        v20 = countAndFlagsBits;
        v21 = (uint64_t)object;
      }
      String.append(_:)(*(Swift::String *)&v20);
      v41._countAndFlagsBits = 46;
      v41._object = (void *)0xE100000000000000;
      String.append(_:)(v41);
      v42 = v70.tv_sec;
      v43 = v70.tv_nsec;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
      *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
      *(_QWORD *)(inited + 40) = v45;
      *(_QWORD *)(inited + 48) = v42;
      *(_QWORD *)(inited + 56) = v43;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v46 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
      outlined init with copy of (String, Any)(inited + 32, (uint64_t)&v70);
      v47 = v70.tv_sec;
      v48 = v70.tv_nsec;
      swift_retain();
      v49 = specialized __RawDictionaryStorage.find<A>(_:)(v47, v48);
      if ((v50 & 1) != 0)
      {
        __break(1u);
      }
      else
      {
        v46[(v49 >> 6) + 8] |= 1 << v49;
        v51 = (__darwin_time_t *)(v46[6] + 16 * v49);
        *v51 = v47;
        v51[1] = v48;
        outlined init with take of Any(v71, (_OWORD *)(v46[7] + 32 * v49));
        v52 = v46[2];
        v31 = __OFADD__(v52, 1);
        v53 = v52 + 1;
        if (!v31)
        {
          v46[2] = v53;
          swift_release();
          swift_bridgeObjectRelease();
          static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
          v54 = objc_allocWithZone((Class)NSError);
          v55 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v56 = objc_msgSend(v54, sel_initWithDomain_code_userInfo_, v55, 2048, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v57 = objc_msgSend(v56, sel_domain);
          v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
          v60 = v59;

          if (v58 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v60 == v61)
          {
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
LABEL_22:
            swift_willThrow();
            swift_release();
            return result;
          }
          v62 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v62 & 1) != 0)
            goto LABEL_22;
          goto LABEL_29;
        }
      }
      __break(1u);
      goto LABEL_27;
    }
    swift_release_n();
    swift_willThrow();
    __break(1u);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    v22 = swift_initStackObject();
    *(_OWORD *)(v22 + 16) = xmmword_18205C850;
    *(_QWORD *)(v22 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
    *(_QWORD *)(v22 + 72) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v22 + 40) = v23;
    *(_QWORD *)(v22 + 48) = 0xD000000000000021;
    *(_QWORD *)(v22 + 56) = 0x8000000182309EE0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v24 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    outlined init with copy of (String, Any)(v22 + 32, (uint64_t)&v70);
    v25 = v70.tv_sec;
    v26 = v70.tv_nsec;
    swift_retain();
    v27 = specialized __RawDictionaryStorage.find<A>(_:)(v25, v26);
    if ((v28 & 1) != 0)
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v24[(v27 >> 6) + 8] |= 1 << v27;
    v29 = (__darwin_time_t *)(v24[6] + 16 * v27);
    *v29 = v25;
    v29[1] = v26;
    outlined init with take of Any(v71, (_OWORD *)(v24[7] + 32 * v27));
    v30 = v24[2];
    v31 = __OFADD__(v30, 1);
    v32 = v30 + 1;
    if (v31)
    {
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    v24[2] = v32;
    swift_release();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v33 = objc_allocWithZone((Class)NSError);
    v34 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v35 = objc_msgSend(v33, sel_initWithDomain_code_userInfo_, v34, 2048, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v36 = objc_msgSend(v35, sel_domain);
    v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
    v39 = v38;

    if (v37 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v39 == v40)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v63 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v63 & 1) == 0)
        goto LABEL_33;
    }
    swift_willThrow();
  }
  return result;
}

uint64_t Date.ParseStrategy.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  char v21;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.ParseStrategy.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v1 + 8);
  v9 = *(_QWORD *)(v1 + 16);
  v18 = *(_QWORD *)(v1 + 24);
  v19 = v9;
  v10 = *(_OWORD *)(v1 + 32);
  v15 = *(_OWORD *)(v1 + 48);
  v16 = v10;
  v17 = *(_QWORD *)(v1 + 64);
  v14[1] = *(_QWORD *)(v1 + 72);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.ParseStrategy.CodingKeys and conformance Date.ParseStrategy.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v20) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v11 = v18;
    v12 = v19;
    *(_QWORD *)&v20 = v8;
    v21 = 1;
    lazy protocol witness table accessor for type Date and conformance Date();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(_QWORD *)&v20 = v12;
    *((_QWORD *)&v20 + 1) = v11;
    v21 = 2;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v20 = v16;
    v21 = 3;
    lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v20 = v15;
    v21 = 4;
    lazy protocol witness table accessor for type Calendar and conformance Calendar();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v20) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t Date.ParseStrategy.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  uint64_t v10;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  int v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  char v27;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.ParseStrategy.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.ParseStrategy.CodingKeys and conformance Date.ParseStrategy.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    LOBYTE(v26) = 0;
    v9 = KeyedDecodingContainer.decode(_:forKey:)();
    v27 = 1;
    lazy protocol witness table accessor for type Date and conformance Date();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v10 = v26;
    v27 = 2;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v25 = *((_QWORD *)&v26 + 1);
    v12 = v26;
    v27 = 3;
    lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
    swift_unknownObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v24 = v26;
    v27 = 4;
    lazy protocol witness table accessor for type Calendar and conformance Calendar();
    v23 = v24;
    swift_unknownObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v22 = v9;
    v13 = v26;
    LOBYTE(v26) = 5;
    v21 = v13;
    swift_unknownObjectRetain();
    v14 = KeyedDecodingContainer.decode(_:forKey:)();
    v16 = v15;
    v22 &= 1u;
    v17 = *(void (**)(char *, uint64_t))(v6 + 8);
    v18 = v14;
    v17(v8, v5);
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    *(_BYTE *)a2 = v22;
    *(_QWORD *)(a2 + 8) = v10;
    v19 = v25;
    *(_QWORD *)(a2 + 16) = v12;
    *(_QWORD *)(a2 + 24) = v19;
    v20 = v21;
    *(_OWORD *)(a2 + 32) = v24;
    *(_OWORD *)(a2 + 48) = v20;
    *(_QWORD *)(a2 + 64) = v18;
    *(_QWORD *)(a2 + 72) = v16;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
  return swift_unknownObjectRelease();
}

Foundation::Date protocol witness for ParseStrategy.parse(_:) in conformance Date.ParseStrategy(Swift::String *a1)
{
  return Date.ParseStrategy.parse(_:)(*a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.ParseStrategy@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Date.ParseStrategy.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.ParseStrategy(_QWORD *a1)
{
  return Date.ParseStrategy.encode(to:)(a1);
}

__n128 static ParseStrategy.fixed<>(format:timeZone:locale:)@<Q0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  __n128 result;
  __int128 v13;
  __n128 v14;

  v6 = *a1;
  v5 = a1[1];
  v13 = *a2;
  v7 = *a3;
  v8 = a3[1];
  v9 = one-time initialization token for cache;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  if (v9 != -1)
    swift_once();
  v10 = static CalendarCache.cache + 16;
  v11 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v11);
  closure #1 in CalendarCache.fixed(_:)(v10, 0, &v14);
  os_unfair_lock_unlock(v11);
  swift_release_n();
  result = v14;
  *(_BYTE *)a4 = 1;
  *(_QWORD *)(a4 + 8) = 0xC1CD27E440000000;
  *(_QWORD *)(a4 + 16) = v7;
  *(_QWORD *)(a4 + 24) = v8;
  *(_OWORD *)(a4 + 32) = v13;
  *(__n128 *)(a4 + 48) = result;
  *(_QWORD *)(a4 + 64) = v6;
  *(_QWORD *)(a4 + 72) = v5;
  return result;
}

void protocol witness for CustomConsumingRegexComponent.consuming(_:startingAt:in:) in conformance Date.ParseStrategy(unint64_t a1@<X2>, unint64_t a2@<X4>, uint64_t a3@<X8>)
{
  Date.ParseStrategy.consuming(_:startingAt:in:)(a1, a2, a3);
}

uint64_t protocol witness for RegexComponent.regex.getter in conformance Date.ParseStrategy()
{
  lazy protocol witness table accessor for type Date.ParseStrategy and conformance Date.ParseStrategy();
  return CustomConsumingRegexComponent.regex.getter();
}

uint64_t static RegexComponent<>.date(format:locale:timeZone:calendar:twoDigitStartDate:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  void (*v16)(_QWORD *__return_ptr, uint64_t, uint64_t);
  __int128 v18;
  uint64_t v19[2];
  _QWORD v20[2];

  v8 = *a1;
  v7 = a1[1];
  v10 = *a2;
  v9 = a2[1];
  v18 = *a3;
  v11 = *a4;
  v12 = *a5;
  if (*a4)
  {
    v13 = a4[1];
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    v14 = v11;
  }
  else
  {
    ObjectType = swift_getObjectType();
    v16 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v9 + 192);
    swift_unknownObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    v16(v20, ObjectType, v9);
    v19[0] = v10;
    v19[1] = v9;
    Calendar.locale.setter(v19);
    v14 = v20[0];
    v13 = v20[1];
  }
  *(_BYTE *)a6 = 0;
  *(_QWORD *)(a6 + 8) = v12;
  *(_QWORD *)(a6 + 16) = v10;
  *(_QWORD *)(a6 + 24) = v9;
  *(_OWORD *)(a6 + 32) = v18;
  *(_QWORD *)(a6 + 48) = v14;
  *(_QWORD *)(a6 + 56) = v13;
  *(_QWORD *)(a6 + 64) = v8;
  *(_QWORD *)(a6 + 72) = v7;
  return swift_unknownObjectRetain();
}

double static RegexComponent<>.dateTime(date:time:locale:timeZone:calendar:)@<D0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __int128 *a4@<X3>, uint64_t *a5@<X4>, __n128 *a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  void (*v14)(_QWORD *__return_ptr, uint64_t, uint64_t);
  double result;
  __int128 v16;
  __int128 v17[7];
  char v18;
  __int128 v19;
  __int128 v20;
  _QWORD v21[2];
  __int128 v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;

  v7 = *a2;
  v8 = *a3;
  v9 = a3[1];
  v16 = *a4;
  v10 = *a5;
  v11 = a5[1];
  v25 = *a1;
  v26 = 0;
  *((_QWORD *)&v22 + 1) = v9;
  v23 = v7;
  v24 = 0;
  *(_QWORD *)&v22 = v8;
  if (v10)
  {
    swift_unknownObjectRetain();
    v12 = v10;
  }
  else
  {
    ObjectType = swift_getObjectType();
    v14 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v9 + 192);
    swift_unknownObjectRetain_n();
    v14(v21, ObjectType, v9);
    *(_QWORD *)&v17[0] = v8;
    *((_QWORD *)&v17[0] + 1) = v9;
    Calendar.locale.setter((uint64_t *)v17);
    v12 = v21[0];
    v11 = v21[1];
  }
  *(_QWORD *)&v20 = v12;
  *((_QWORD *)&v20 + 1) = v11;
  v19 = v16;
  v18 = 0;
  Date.FormatStyle.init(date:time:locale:calendar:timeZone:capitalizationContext:)((uint64_t)&v25, &v23, &v22, &v20, &v19, &v18, (uint64_t)v17);
  *(_QWORD *)&v20 = 0xC1CD27E440000000;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  *(_QWORD *)&result = Date.ParseStrategy.init(formatStyle:lenient:twoDigitStartDate:)(v17, 0, (unint64_t *)&v20, a6).n128_u64[0];
  return result;
}

double static RegexComponent<>.date(_:locale:timeZone:calendar:)@<D0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, uint64_t *a4@<X3>, __n128 *a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  void (*v12)(_QWORD *__return_ptr, uint64_t, uint64_t);
  double result;
  __int128 v14;
  __int128 v15[7];
  char v16;
  __int128 v17;
  __int128 v18;
  _QWORD v19[2];
  __int128 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;

  v6 = *a2;
  v7 = a2[1];
  v14 = *a3;
  v8 = *a4;
  v9 = a4[1];
  v23 = *a1;
  v24 = 0;
  *((_QWORD *)&v20 + 1) = v7;
  v21 = 0;
  v22 = 1;
  *(_QWORD *)&v20 = v6;
  if (v8)
  {
    swift_unknownObjectRetain();
    v10 = v8;
  }
  else
  {
    ObjectType = swift_getObjectType();
    v12 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v7 + 192);
    swift_unknownObjectRetain_n();
    v12(v19, ObjectType, v7);
    *(_QWORD *)&v15[0] = v6;
    *((_QWORD *)&v15[0] + 1) = v7;
    Calendar.locale.setter((uint64_t *)v15);
    v10 = v19[0];
    v9 = v19[1];
  }
  *(_QWORD *)&v18 = v10;
  *((_QWORD *)&v18 + 1) = v9;
  v17 = v14;
  v16 = 0;
  Date.FormatStyle.init(date:time:locale:calendar:timeZone:capitalizationContext:)((uint64_t)&v23, &v21, &v20, &v18, &v17, &v16, (uint64_t)v15);
  *(_QWORD *)&v18 = 0xC1CD27E440000000;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  *(_QWORD *)&result = Date.ParseStrategy.init(formatStyle:lenient:twoDigitStartDate:)(v15, 0, (unint64_t *)&v18, a5).n128_u64[0];
  return result;
}

uint64_t specialized static Date.ParseStrategy.== infix(_:_:)(double *a1, double *a2)
{
  uint64_t result;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  result = 0;
  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2 || a1[1] != a2[1])
    return result;
  v4 = *((_OWORD *)a1 + 2);
  v5 = *((_OWORD *)a1 + 3);
  v6 = *((_QWORD *)a1 + 8);
  v7 = *((_QWORD *)a1 + 9);
  v8 = *((_OWORD *)a2 + 1);
  v9 = *((_OWORD *)a2 + 2);
  v10 = *((_OWORD *)a2 + 3);
  v11 = *((_QWORD *)a2 + 8);
  v12 = *((_QWORD *)a2 + 9);
  if (*((_QWORD *)a1 + 2))
  {
    v19 = *((_OWORD *)a1 + 1);
    if ((_QWORD)v8)
    {
      v16 = v10;
      v17 = v5;
      v18 = v8;
      v14 = v9;
      v15 = v4;
      swift_unknownObjectRetain_n();
      v13 = specialized static Locale.== infix(_:_:)((uint64_t)&v19, (uint64_t)&v18);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v9 = v14;
      v4 = v15;
      if ((v13 & 1) != 0)
        goto LABEL_8;
      return 0;
    }
    swift_unknownObjectRetain();
LABEL_14:
    swift_unknownObjectRelease();
    return 0;
  }
  v16 = *((_OWORD *)a2 + 3);
  v17 = *((_OWORD *)a1 + 3);
  if ((_QWORD)v8)
    goto LABEL_14;
LABEL_8:
  v18 = v9;
  v19 = v4;
  if ((specialized static TimeZone.== infix(_:_:)((uint64_t)&v19, (uint64_t)&v18) & 1) == 0)
    return 0;
  v18 = v16;
  v19 = v17;
  if ((specialized static Calendar.== infix(_:_:)((uint64_t)&v19, (uint64_t)&v18) & 1) == 0)
    return 0;
  if (v6 == v11 && v7 == v12)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

unint64_t lazy protocol witness table accessor for type Date.ParseStrategy.CodingKeys and conformance Date.ParseStrategy.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ParseStrategy.CodingKeys and conformance Date.ParseStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ParseStrategy.CodingKeys and conformance Date.ParseStrategy.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ParseStrategy.CodingKeys, &unk_1E0F2D0A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ParseStrategy.CodingKeys and conformance Date.ParseStrategy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ParseStrategy.CodingKeys and conformance Date.ParseStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ParseStrategy.CodingKeys and conformance Date.ParseStrategy.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ParseStrategy.CodingKeys, &unk_1E0F2D0A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ParseStrategy.CodingKeys and conformance Date.ParseStrategy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ParseStrategy.CodingKeys and conformance Date.ParseStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ParseStrategy.CodingKeys and conformance Date.ParseStrategy.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ParseStrategy.CodingKeys, &unk_1E0F2D0A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ParseStrategy.CodingKeys and conformance Date.ParseStrategy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ParseStrategy.CodingKeys and conformance Date.ParseStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ParseStrategy.CodingKeys and conformance Date.ParseStrategy.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ParseStrategy.CodingKeys, &unk_1E0F2D0A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ParseStrategy.CodingKeys and conformance Date.ParseStrategy.CodingKeys);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for Date.ParseStrategy(_QWORD *a1)
{
  unint64_t result;

  a1[1] = lazy protocol witness table accessor for type Date.ParseStrategy and conformance Date.ParseStrategy();
  a1[2] = lazy protocol witness table accessor for type Date.ParseStrategy and conformance Date.ParseStrategy();
  result = lazy protocol witness table accessor for type Date.ParseStrategy and conformance Date.ParseStrategy();
  a1[3] = result;
  return result;
}

uint64_t destroy for Date.ParseStrategy()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Date.ParseStrategy(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v4 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v4;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Date.ParseStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Date.ParseStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v4 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Date.ParseStrategy(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Date.ParseStrategy(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Date.ParseStrategy()
{
  return &type metadata for Date.ParseStrategy;
}

uint64_t storeEnumTagSinglePayload for Date.ParseStrategy.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_181E06378 + 4 * byte_1821644BB[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_181E063AC + 4 * byte_1821644B6[v4]))();
}

uint64_t sub_181E063AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E063B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181E063BCLL);
  return result;
}

uint64_t sub_181E063C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181E063D0);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_181E063D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E063DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Date.ParseStrategy.CodingKeys()
{
  return &unk_1E0F2D0A0;
}

uint64_t specialized Date.ParseStrategy.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E65696E654C7369 && a2 == 0xE900000000000074;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000018230E880
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656E6F5A656D6974 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x7261646E656C6163 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x74616D726F66 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t Array<A>._extend(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;

  v4 = a1;
  v5 = *(_QWORD **)v2;
  v6 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v6)
  {
    v7 = v6 - 1;
    if (v5[2 * v6 + 3] == a1)
    {
      v4 = v5[2 * v7 + 4];
      if (v4 > a2)
      {
        __break(1u);
      }
      else
      {
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) != 0)
        {
LABEL_5:
          v9 = &v5[2 * v7];
          goto LABEL_11;
        }
      }
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
      v5 = (_QWORD *)result;
      goto LABEL_5;
    }
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6 + 1, 1, v5);
    v5 = (_QWORD *)result;
  }
  v11 = v5[2];
  v10 = v5[3];
  if (v11 >= v10 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v5);
    v5 = (_QWORD *)result;
  }
  v5[2] = v11 + 1;
  v9 = &v5[2 * v11];
LABEL_11:
  v9[4] = v4;
  v9[5] = a2;
  *(_QWORD *)v2 = v5;
  return result;
}

_QWORD *specialized Rope.update<A>(at:by:)(_QWORD *result, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[3];
  _OWORD v14[3];

  v4 = a2[3];
  if (*result != v4)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (!*a2)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v8 = result;
  result = (_QWORD *)specialized Rope._Node._prepareModify(at:)(result[1], (uint64_t)v14);
  v9 = *((_QWORD *)&v14[0] + 1);
  v13[0] = v14[0];
  v13[1] = v14[1];
  v13[2] = v14[2];
  if (__OFSUB__(*a3, *((_QWORD *)&v14[0] + 1)))
    goto LABEL_8;
  *a3 -= *((_QWORD *)&v14[0] + 1);
  v10 = __OFADD__(v9, a4);
  v11 = v9 + a4;
  if (v10)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  *((_QWORD *)&v13[0] + 1) = v11;
  a2[3] = v4 + 1;
  *v8 = v4 + 1;
  if (*a2)
  {
    v8[2] = specialized Rope._Node._finalizeModify(_:)(&v12, v13);
    swift_bridgeObjectRelease();
    return (_QWORD *)swift_bridgeObjectRelease();
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t AttributedString.Guts._paragraphExtending(from:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _OWORD *v5;
  __int128 v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23[4];
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[48];
  _QWORD v28[8];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32[3];
  _BYTE v33[48];

  v11 = v5[2];
  v29 = v5[1];
  v30 = v11;
  v31 = v5[3];
  BigString.utf8.getter();
  v32[0] = v29;
  v32[1] = v30;
  v32[2] = v31;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v32, (uint64_t)v33);
  outlined retain of Locale((uint64_t)v33);
  v12 = BigString.index(after:)();
  v14 = v13;
  v16 = v15;
  v18 = v17;
  result = outlined release of Locale((uint64_t)&v29);
  if (a1 >> 10 > v12 >> 10)
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v28[0] = a1;
  v28[1] = a2;
  v28[2] = a3;
  v28[3] = a4;
  v28[4] = v12;
  v28[5] = v14;
  v28[6] = v16;
  v28[7] = v18;
  specialized BidirectionalCollection<>._getBlock(for:in:)(2, v28, v23);
  result = outlined release of Locale((uint64_t)v27);
  v20 = v26;
  if (v26 != 2)
  {
    v21 = v24;
    if (a1 >> 10 <= (unint64_t)v24 >> 10)
    {
      v22 = v25;
      *(_QWORD *)a5 = a1;
      *(_QWORD *)(a5 + 8) = a2;
      *(_QWORD *)(a5 + 16) = a3;
      *(_QWORD *)(a5 + 24) = a4;
      *(_OWORD *)(a5 + 32) = v21;
      *(_QWORD *)(a5 + 48) = v22;
      *(_QWORD *)(a5 + 56) = v20;
      return result;
    }
    goto LABEL_6;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t closure #1 in AttributedString.Guts._characterInvalidatedAttributes(at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  _BYTE v5[72];
  _QWORD v6[2];
  _BYTE v7[72];

  v6[0] = a1;
  v6[1] = a2;
  outlined init with copy of AttributedString._AttributeValue(a3, (uint64_t)v7);
  outlined init with copy of AttributedString._AttributeValue((uint64_t)v7, (uint64_t)v5);
  swift_bridgeObjectRetain();
  v3 = AttributedString._AttributeValue.isInvalidatedOnTextChange.getter();
  outlined destroy of Any?((uint64_t)v6, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
  outlined destroy of AttributedString._AttributeValue((uint64_t)v5);
  return v3 & 1;
}

uint64_t AttributedString.Guts._applyStyle(type:from:to:)(uint64_t result, int64_t a2, uint64_t a3, int64_t a4)
{
  uint64_t v4;
  int64_t v5;
  int64_t v6;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  int64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  int64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  unint64_t v55;
  uint64_t *v56;
  BOOL v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  int64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  int64_t v70;
  uint64_t v71;
  uint64_t v72;
  int64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  int64_t v91;
  uint64_t v92;
  int64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  int64_t *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  int64_t v129;
  int64_t *v130;
  unint64_t v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  int64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  int64_t v140;
  int64_t *v141;
  unint64_t v142;
  uint64_t v143;
  char v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int64_t v154;
  __int128 v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  __int128 v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char v173;
  uint64_t v174;
  char v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  __int128 v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  __int128 v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  char v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  _QWORD *v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  _QWORD *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  char v246;
  char v247;
  _QWORD *v248;
  uint64_t *v249;
  uint64_t v251;
  uint64_t v252;
  int64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  unint64_t v259;
  int64_t v260;
  int64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  _QWORD v270[2];
  int64_t v271;
  __int128 v272;
  _QWORD *v273;
  uint64_t v274;
  uint64_t v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  __int128 v283;
  _QWORD *v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  _OWORD v288[2];

  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_QWORD *)(v4 + 80);
  if (v5)
    v7 = *(_QWORD *)(v4 + 80);
  else
    v7 = 0;
  if (a2 < 0)
    goto LABEL_481;
  v8 = a2;
  if (v7 < a2)
    goto LABEL_481;
  v9 = *(_QWORD *)(result + 8);
  v268 = *(_QWORD *)result;
  v10 = *(_QWORD *)(v4 + 72);
  v11 = *(_QWORD *)(v4 + 88);
  v249 = (uint64_t *)v4;
  v248 = (_QWORD *)(v4 + 64);
  if (v5)
  {
    if (*(_WORD *)(v5 + 16) && v6 > a2)
    {
      v266 = *(_QWORD *)(v4 + 88);
      v267 = *(_QWORD *)(v4 + 72);
      v25 = *(unsigned __int8 *)(v5 + 18);
      if (!*(_BYTE *)(v5 + 18))
      {
        result = swift_unknownObjectRetain_n();
        v15 = v5;
LABEL_61:
        v44 = *(unsigned __int16 *)(v15 + 16);
        if (!*(_WORD *)(v15 + 16))
          goto LABEL_79;
        v45 = *(_QWORD *)(v15 + 24);
        v30 = __OFSUB__(v8, v45);
        v8 -= v45;
        if (v30)
          goto LABEL_497;
        if (__OFADD__(v8, 1))
          goto LABEL_498;
        if (v8 + 1 < 1)
        {
          v44 = 0;
          goto LABEL_427;
        }
        if ((_DWORD)v44 == 1)
        {
LABEL_79:
          if (!v8)
            goto LABEL_427;
          __break(1u);
          goto LABEL_81;
        }
        v46 = (uint64_t *)(v15 + 48);
        v47 = 1;
        while (1)
        {
          v48 = *v46;
          v46 += 3;
          v30 = __OFSUB__(v8, v48);
          v8 -= v48;
          if (v30)
            goto LABEL_484;
          if (__OFADD__(v8, 1))
            goto LABEL_485;
          if (v8 + 1 < 1)
            goto LABEL_426;
          if (v44 == ++v47)
            goto LABEL_79;
        }
      }
      result = swift_unknownObjectRetain_n();
      v4 = 24;
      v36 = v5;
      while (1)
      {
        v38 = *(unsigned __int16 *)(v36 + 16);
        if (!*(_WORD *)(v36 + 16))
          goto LABEL_45;
        v39 = *(_QWORD *)(v36 + 40);
        v30 = __OFSUB__(v8, v39);
        v40 = v8 - v39;
        if (v30)
          goto LABEL_464;
        if (__OFADD__(v40, 1))
          goto LABEL_465;
        if (v40 + 1 < 1)
        {
          v38 = 0;
        }
        else
        {
          if ((_DWORD)v38 == 1)
          {
            v8 = v40;
LABEL_45:
            if (v8)
              goto LABEL_462;
            goto LABEL_46;
          }
          v41 = (uint64_t *)(v36 + 64);
          v42 = 1;
          while (1)
          {
            v43 = *v41;
            v41 += 3;
            v8 = v40 - v43;
            if (__OFSUB__(v40, v43))
              goto LABEL_435;
            if (__OFADD__(v8, 1))
              goto LABEL_436;
            if (v8 + 1 < 1)
              break;
            ++v42;
            v40 = v8;
            if (v38 == v42)
              goto LABEL_45;
          }
          v38 = v42;
          v8 = v40;
        }
LABEL_46:
        v37 = (4 * *(_BYTE *)(v36 + 18) + 8) & 0x3C;
        v25 = ((-15 << v37) - 1) & v25 | (v38 << v37);
        v15 = *(_QWORD *)(v36 + 24 + 24 * v38);
        swift_unknownObjectRetain();
        result = swift_unknownObjectRelease();
        v36 = v15;
        if (!*(_BYTE *)(v15 + 18))
          goto LABEL_61;
      }
    }
  }
  v13 = swift_unknownObjectRetain_n();
  v14 = specialized Rope._endPath.getter(v13);
  swift_unknownObjectRelease();
  v15 = 0;
  if (!v5)
    goto LABEL_14;
LABEL_13:
  swift_unknownObjectRetain();
  specialized Rope._Node.distanceFromStart<A>(to:in:)(v11, v14, v15, v5, v10);
  swift_unknownObjectRelease_n();
LABEL_14:
  v16 = *(_QWORD *)(v4 + 64);
  v17 = *(_QWORD *)(v4 + 72);
  v18 = *(_QWORD *)(v4 + 80);
  v19 = *(_QWORD *)(v4 + 88);
  swift_unknownObjectRetain();
  specialized Rope.subscript.getter(v11, v14, v15, v16, v17, v18, v19);
  v266 = v20;
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  v21 = swift_bridgeObjectRetain();
  v267 = specialized _NativeDictionary.filter(_:)(v21, v268, v9);
  result = swift_bridgeObjectRelease_n();
  v6 = *(_QWORD *)(v4 + 64);
  if (v6)
    v22 = *(_QWORD *)(v4 + 80);
  else
    v22 = 0;
  if (a3 < 0 || v22 < a3)
    goto LABEL_482;
  v23 = *(_QWORD *)(v4 + 72);
  v24 = *(_QWORD *)(v4 + 88);
  if (!v6 || !*(_WORD *)(v6 + 16) || *(_QWORD *)(v4 + 80) <= a3)
  {
    swift_unknownObjectRetain_n();
    swift_retain();
    v35 = specialized Rope._endPath.getter(v6);
    result = swift_unknownObjectRelease();
    v4 = 0;
    v25 = 0;
    if (!v6)
    {
LABEL_91:
      v251 = 0;
      goto LABEL_92;
    }
LABEL_41:
    swift_unknownObjectRetain();
    v251 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v24, v35, v4, v6, v23);
    result = swift_unknownObjectRelease_n();
LABEL_92:
    v54 = a4;
    if (__OFSUB__(a3, v25))
      goto LABEL_483;
    v254 = a3 - v25;
    *(_QWORD *)&v283 = v24;
    *((_QWORD *)&v283 + 1) = v35;
    v55 = v35;
    v265 = v267 + 64;
    v284 = (_QWORD *)v4;
    v56 = v249;
    while (1)
    {
      v10 = v56[8];
      v5 = v56[10];
      v259 = v24;
      if (a3 != v54)
      {
        v68 = swift_unknownObjectRetain();
        specialized Rope._endPath.getter(v68);
        if (v10)
          swift_unknownObjectRelease();
        else
          v5 = 0;
        if (v254 >= v5)
          goto LABEL_419;
        goto LABEL_149;
      }
      v245 = v56[9];
      v255 = v56[11];
      if (v10)
      {
        if (v5 < a3)
          goto LABEL_461;
        if (*(_WORD *)(v10 + 16))
          v57 = v5 <= a3;
        else
          v57 = 1;
        if (!v57)
        {
          v15 = v4;
          v58 = v55;
          v59 = *(unsigned __int8 *)(v10 + 18);
          if (*(_BYTE *)(v10 + 18))
          {
            result = swift_unknownObjectRetain_n();
            v25 = a3;
            v60 = v10;
            while (1)
            {
              v47 = *(unsigned __int16 *)(v60 + 16);
              if (*(_WORD *)(v60 + 16))
              {
                v63 = *(_QWORD *)(v60 + 40);
                v30 = __OFSUB__(v25, v63);
                v64 = v25 - v63;
                if (v30)
                  goto LABEL_433;
                if (__OFADD__(v64, 1))
                {
LABEL_434:
                  __break(1u);
LABEL_435:
                  __break(1u);
LABEL_436:
                  __break(1u);
LABEL_437:
                  __break(1u);
LABEL_438:
                  __break(1u);
                  goto LABEL_439;
                }
                if (v64 + 1 < 1)
                {
                  v47 = 0;
                  goto LABEL_107;
                }
                if ((_DWORD)v47 != 1)
                {
                  v65 = (uint64_t *)(v60 + 64);
                  v66 = 1;
                  while (1)
                  {
                    v67 = *v65;
                    v65 += 3;
                    v25 = v64 - v67;
                    if (__OFSUB__(v64, v67))
                      goto LABEL_424;
                    if (__OFADD__(v25, 1))
                      break;
                    if (v25 + 1 < 1)
                    {
                      v47 = v66;
                      v25 = v64;
                      goto LABEL_107;
                    }
                    ++v66;
                    v64 = v25;
                    if (v47 == v66)
                      goto LABEL_106;
                  }
LABEL_425:
                  __break(1u);
LABEL_426:
                  v44 = v47;
LABEL_427:
                  swift_unknownObjectRelease();
                  swift_unknownObjectRelease();
                  v14 = v25 & 0xFFFFFFFFFFFFF0FFLL | (v44 << 8);
                  v4 = (uint64_t)v249;
                  v11 = v266;
                  if (v5)
                    goto LABEL_13;
                  goto LABEL_14;
                }
                v25 = v64;
              }
LABEL_106:
              if (v25)
                goto LABEL_432;
LABEL_107:
              v61 = (4 * *(_BYTE *)(v60 + 18) + 8) & 0x3C;
              v59 = ((-15 << v61) - 1) & v59 | (v47 << v61);
              v62 = *(_QWORD *)(v60 + 24 + 24 * v47);
              swift_unknownObjectRetain();
              result = swift_unknownObjectRelease();
              v60 = v62;
              if (!*(_BYTE *)(v62 + 18))
                goto LABEL_131;
            }
          }
          result = swift_unknownObjectRetain_n();
          v25 = a3;
          v62 = v10;
LABEL_131:
          v71 = *(unsigned __int16 *)(v62 + 16);
          if (*(_WORD *)(v62 + 16))
          {
            v72 = *(_QWORD *)(v62 + 24);
            v30 = __OFSUB__(v25, v72);
            v73 = v25 - v72;
            v70 = v254;
            if (v30)
              goto LABEL_478;
            if (__OFADD__(v73, 1))
            {
LABEL_479:
              __break(1u);
LABEL_480:
              __break(1u);
LABEL_481:
              __break(1u);
LABEL_482:
              __break(1u);
LABEL_483:
              __break(1u);
LABEL_484:
              __break(1u);
LABEL_485:
              __break(1u);
LABEL_486:
              __break(1u);
LABEL_487:
              __break(1u);
              goto LABEL_488;
            }
            if (v73 + 1 < 1)
            {
              v71 = 0;
              goto LABEL_145;
            }
            if ((_DWORD)v71 != 1)
            {
              v74 = (uint64_t *)(v62 + 48);
              v75 = 1;
              while (1)
              {
                v76 = *v74;
                v74 += 3;
                v25 = v73 - v76;
                if (__OFSUB__(v73, v76))
                  goto LABEL_459;
                if (__OFADD__(v25, 1))
                  break;
                if (v25 + 1 < 1)
                {
                  v71 = v75;
                  v25 = v73;
                  goto LABEL_145;
                }
                ++v75;
                v73 = v25;
                if (v71 == v75)
                  goto LABEL_144;
              }
LABEL_460:
              __break(1u);
LABEL_461:
              __break(1u);
LABEL_462:
              __break(1u);
LABEL_463:
              __break(1u);
LABEL_464:
              __break(1u);
LABEL_465:
              __break(1u);
LABEL_466:
              __break(1u);
LABEL_467:
              __break(1u);
LABEL_468:
              __break(1u);
LABEL_469:
              __break(1u);
              goto LABEL_470;
            }
            v25 = v73;
          }
          else
          {
            v70 = v254;
          }
LABEL_144:
          if (v25)
            goto LABEL_477;
LABEL_145:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v69 = v59 & 0xFFFFFFFFFFFFF0FFLL | (v71 << 8);
          goto LABEL_146;
        }
      }
      else if (a3 > 0)
      {
        goto LABEL_475;
      }
      swift_unknownObjectRetain_n();
      v69 = specialized Rope._endPath.getter(v10);
      result = swift_unknownObjectRelease();
      v25 = 0;
      if (!v10)
      {
        v70 = v254;
        goto LABEL_147;
      }
      v15 = v4;
      v58 = v55;
      v62 = 0;
      v70 = v254;
LABEL_146:
      swift_unknownObjectRetain();
      specialized Rope._Node.distanceFromStart<A>(to:in:)(v255, v69, v62, v10, v245);
      result = swift_unknownObjectRelease_n();
      v55 = v58;
      v4 = v15;
      v24 = v259;
LABEL_147:
      v77 = a3 - v25;
      if (__OFSUB__(a3, v25))
        goto LABEL_457;
      v56 = v249;
      if (v70 >= v77)
      {
LABEL_419:
        swift_bridgeObjectRelease();
        swift_release();
        return swift_release();
      }
LABEL_149:
      v79 = v56[8];
      v78 = v56[9];
      v80 = v56[10];
      v81 = v56[11];
      swift_unknownObjectRetain();
      specialized Rope.subscript.getter(v24, v55, v4, v79, v78, v80, v81);
      v10 = v82;
      v84 = v83;
      swift_unknownObjectRelease();
      v85 = v56[8];
      v86 = v56[9];
      v87 = v56;
      v88 = v56[10];
      v89 = v87[11];
      swift_unknownObjectRetain();
      v90 = specialized Rope.subscript.getter(v24, v55, v4, v85, v86, v88, v89);
      v5 = v91;
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v92 = v254 + v90;
      if (__OFADD__(v254, v90))
        goto LABEL_442;
      v281 = v10;
      v282 = v84;
      if (v254 >= a4)
        v93 = a4;
      else
        v93 = v254;
      if (v254 >= a3)
        v94 = v93;
      else
        v94 = a3;
      if (v92 <= a3)
        v95 = a3;
      else
        v95 = v254 + v90;
      if (v92 > a4)
        v95 = a4;
      if (v94 == v95)
      {
LABEL_443:
        __break(1u);
LABEL_444:
        __break(1u);
LABEL_445:
        __break(1u);
        goto LABEL_446;
      }
      if (v94 != v254 || v95 != v92)
      {
        v243 = v95;
        v244 = v94;
        v257 = v10 + 64;
        v109 = 1 << *(_BYTE *)(v10 + 32);
        if (v109 < 64)
          v110 = ~(-1 << v109);
        else
          v110 = -1;
        v25 = v110 & *(_QWORD *)(v10 + 64);
        v261 = (unint64_t)(v109 + 63) >> 6;
        result = swift_bridgeObjectRetain();
        v247 = 0;
        v15 = 0;
        while (1)
        {
LABEL_204:
          if (v25)
          {
            v111 = __clz(__rbit64(v25));
            v25 &= v25 - 1;
            v112 = v111 | (v15 << 6);
          }
          else
          {
            v30 = __OFADD__(v15++, 1);
            if (v30)
            {
              __break(1u);
LABEL_421:
              __break(1u);
LABEL_422:
              __break(1u);
LABEL_423:
              __break(1u);
LABEL_424:
              __break(1u);
              goto LABEL_425;
            }
            if (v15 >= v261)
              goto LABEL_231;
            v113 = *(_QWORD *)(v257 + 8 * v15);
            if (!v113)
            {
              v114 = v15 + 1;
              if (v15 + 1 >= v261)
                goto LABEL_231;
              v113 = *(_QWORD *)(v257 + 8 * v114);
              if (!v113)
              {
                v114 = v15 + 2;
                if (v15 + 2 >= v261)
                  goto LABEL_231;
                v113 = *(_QWORD *)(v257 + 8 * v114);
                if (!v113)
                {
                  v114 = v15 + 3;
                  if (v15 + 3 >= v261)
                    goto LABEL_231;
                  v113 = *(_QWORD *)(v257 + 8 * v114);
                  if (!v113)
                  {
                    v114 = v15 + 4;
                    if (v15 + 4 >= v261)
                    {
LABEL_231:
                      swift_release();
                      v122 = 1 << *(_BYTE *)(v267 + 32);
                      if (v122 < 64)
                        v123 = ~(-1 << v122);
                      else
                        v123 = -1;
                      v15 = v123 & *(_QWORD *)(v267 + 64);
                      v25 = (unint64_t)(v122 + 63) >> 6;
                      result = swift_retain();
                      v124 = 0;
                      if (v15)
                      {
LABEL_235:
                        v125 = __clz(__rbit64(v15));
                        v15 &= v15 - 1;
                        v126 = v125 | (v124 << 6);
                        goto LABEL_252;
                      }
                      while (1)
                      {
LABEL_239:
                        v30 = __OFADD__(v124++, 1);
                        if (v30)
                          goto LABEL_422;
                        if (v124 >= v25)
                          goto LABEL_291;
                        v128 = *(_QWORD *)(v265 + 8 * v124);
                        if (!v128)
                        {
                          v129 = v124 + 1;
                          if (v124 + 1 >= v25)
                            goto LABEL_291;
                          v128 = *(_QWORD *)(v265 + 8 * v129);
                          if (!v128)
                          {
                            v129 = v124 + 2;
                            if (v124 + 2 >= v25)
                              goto LABEL_291;
                            v128 = *(_QWORD *)(v265 + 8 * v129);
                            if (!v128)
                            {
                              v129 = v124 + 3;
                              if (v124 + 3 >= v25)
                                goto LABEL_291;
                              v128 = *(_QWORD *)(v265 + 8 * v129);
                              if (!v128)
                              {
                                v129 = v124 + 4;
                                if (v124 + 4 >= v25)
                                  goto LABEL_291;
                                v128 = *(_QWORD *)(v265 + 8 * v129);
                                if (!v128)
                                {
                                  while (1)
                                  {
                                    v124 = v129 + 1;
                                    if (__OFADD__(v129, 1))
                                      goto LABEL_449;
                                    if (v124 >= v25)
                                      break;
                                    v128 = *(_QWORD *)(v265 + 8 * v124);
                                    ++v129;
                                    if (v128)
                                      goto LABEL_251;
                                  }
LABEL_291:
                                  result = swift_release();
                                  v56 = v249;
                                  if ((v247 & 1) == 0)
                                  {
                                    v154 = v254;
                                    goto LABEL_347;
                                  }
                                  if (!__OFSUB__(v243, v244))
                                  {
                                    v145 = v281;
                                    v146 = v282;
                                    swift_bridgeObjectRetain();
                                    swift_bridgeObjectRetain();
                                    specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v244, v243, v243 - v244, v145, v146);
                                    swift_bridgeObjectRelease();
                                    result = swift_bridgeObjectRelease();
                                    v147 = v249[8];
                                    if (v147)
                                      v148 = v249[10];
                                    else
                                      v148 = 0;
                                    if ((v254 & 0x8000000000000000) == 0 && v148 >= v254)
                                    {
                                      v149 = v249[9];
                                      v150 = v249[11];
                                      if (!v147 || !*(_WORD *)(v147 + 16) || v254 >= v249[10])
                                      {
                                        v183 = swift_unknownObjectRetain_n();
                                        v184 = specialized Rope._endPath.getter(v183);
                                        swift_unknownObjectRelease();
                                        v176 = 0;
                                        v185 = 0;
                                        v154 = v254;
                                        if (v147)
                                          goto LABEL_330;
                                        v251 = 0;
LABEL_346:
                                        *(_QWORD *)&v283 = v150;
                                        *((_QWORD *)&v283 + 1) = v184;
                                        v284 = (_QWORD *)v176;
                                        goto LABEL_347;
                                      }
                                      v262 = v249[9];
                                      v151 = *(unsigned __int8 *)(v147 + 18);
                                      if (*(_BYTE *)(v147 + 18))
                                      {
                                        result = swift_unknownObjectRetain_n();
                                        v152 = v254;
                                        v153 = v147;
                                        while (1)
                                        {
                                          v177 = *(unsigned __int16 *)(v153 + 16);
                                          if (*(_WORD *)(v153 + 16))
                                          {
                                            v178 = *(_QWORD *)(v153 + 40);
                                            v30 = __OFSUB__(v152, v178);
                                            v179 = v152 - v178;
                                            if (v30)
                                              goto LABEL_455;
                                            if (__OFADD__(v179, 1))
                                            {
LABEL_456:
                                              __break(1u);
LABEL_457:
                                              __break(1u);
LABEL_458:
                                              __break(1u);
LABEL_459:
                                              __break(1u);
                                              goto LABEL_460;
                                            }
                                            if (v179 + 1 < 1)
                                            {
                                              v177 = 0;
                                              goto LABEL_313;
                                            }
                                            if ((_DWORD)v177 != 1)
                                            {
                                              v180 = (uint64_t *)(v153 + 64);
                                              v181 = 1;
                                              while (1)
                                              {
                                                v182 = *v180;
                                                v180 += 3;
                                                v152 = v179 - v182;
                                                if (__OFSUB__(v179, v182))
                                                  break;
                                                if (__OFADD__(v152, 1))
                                                  goto LABEL_431;
                                                if (v152 + 1 < 1)
                                                {
                                                  v177 = v181;
                                                  v152 = v179;
                                                  goto LABEL_313;
                                                }
                                                ++v181;
                                                v179 = v152;
                                                if (v177 == v181)
                                                  goto LABEL_312;
                                              }
                                              __break(1u);
LABEL_431:
                                              __break(1u);
LABEL_432:
                                              __break(1u);
LABEL_433:
                                              __break(1u);
                                              goto LABEL_434;
                                            }
                                            v152 = v179;
                                          }
LABEL_312:
                                          if (v152)
                                            goto LABEL_452;
LABEL_313:
                                          v175 = (4 * *(_BYTE *)(v153 + 18) + 8) & 0x3C;
                                          v151 = ((-15 << v175) - 1) & v151 | (v177 << v175);
                                          v176 = *(_QWORD *)(v153 + 24 + 24 * v177);
                                          swift_unknownObjectRetain();
                                          result = swift_unknownObjectRelease();
                                          v153 = v176;
                                          if (!*(_BYTE *)(v176 + 18))
                                            goto LABEL_343;
                                        }
                                      }
                                      swift_unknownObjectRetain_n();
                                      v152 = v254;
                                      v176 = v147;
LABEL_343:
                                      result = specialized Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)(v152, 0, (_WORD *)(v176 + 16), (uint64_t *)(v176 + 24));
                                      if ((result & 0x8000000000000000) == 0)
                                      {
                                        v213 = result;
                                        v185 = v212;
                                        swift_unknownObjectRelease();
                                        swift_unknownObjectRelease();
                                        v184 = v151 & 0xFFFFFFFFFFFFF0FFLL | (v213 << 8);
                                        v149 = v262;
                                        v154 = v254;
LABEL_330:
                                        swift_unknownObjectRetain();
                                        v251 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v150, v184, v176, v147, v149);
                                        result = swift_unknownObjectRelease_n();
                                        v30 = __OFSUB__(v154, v185);
                                        v154 -= v185;
                                        if (!v30)
                                          goto LABEL_346;
LABEL_473:
                                        __break(1u);
LABEL_474:
                                        __break(1u);
LABEL_475:
                                        __break(1u);
LABEL_476:
                                        __break(1u);
LABEL_477:
                                        __break(1u);
LABEL_478:
                                        __break(1u);
                                        goto LABEL_479;
                                      }
LABEL_488:
                                      __break(1u);
LABEL_489:
                                      __break(1u);
LABEL_490:
                                      __break(1u);
LABEL_491:
                                      __break(1u);
LABEL_492:
                                      __break(1u);
LABEL_493:
                                      __break(1u);
LABEL_494:
                                      __break(1u);
                                      goto LABEL_495;
                                    }
LABEL_471:
                                    __break(1u);
LABEL_472:
                                    __break(1u);
                                    goto LABEL_473;
                                  }
LABEL_470:
                                  __break(1u);
                                  goto LABEL_471;
                                }
                              }
                            }
                          }
                          v124 = v129;
                        }
LABEL_251:
                        v15 = (v128 - 1) & v128;
                        v126 = __clz(__rbit64(v128)) + (v124 << 6);
LABEL_252:
                        v130 = (int64_t *)(*(_QWORD *)(v267 + 48) + 16 * v126);
                        v5 = *v130;
                        v131 = v130[1];
                        swift_bridgeObjectRetain();
                        AttributedString._AttributeStorage.subscript.getter(v5, v131, v267, (uint64_t)&v276);
                        if (!*((_QWORD *)&v277 + 1))
                          break;
                        v127 = *((_QWORD *)&v278 + 1);
                        v10 = v279;
                        outlined copy of AttributedString.AttributeRunBoundaries?(*((uint64_t *)&v278 + 1), v279);
                        outlined destroy of AttributedString._AttributeValue((uint64_t)&v276);
                        if (v10 == 1)
                          goto LABEL_237;
                        *(_QWORD *)&v276 = v127;
                        *((_QWORD *)&v276 + 1) = v10;
                        *(_QWORD *)&v272 = v268;
                        *((_QWORD *)&v272 + 1) = v9;
                        swift_bridgeObjectRetain();
                        outlined copy of AttributedString.AttributeRunBoundaries?(v127, v10);
                        v132 = specialized static AttributedString.AttributeRunBoundaries.== infix(_:_:)(&v276, &v272);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        outlined consume of AttributedString.AttributeRunBoundaries?(v127, v10);
                        if ((v132 & 1) == 0)
                          goto LABEL_238;
                        AttributedString._AttributeStorage.subscript.getter(v5, v131, v267, (uint64_t)&v276);
                        specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v276, v5, v131);
                        result = swift_bridgeObjectRelease();
                        v47 = 1;
                        v247 = 1;
                        if (v15)
                          goto LABEL_235;
                      }
                      outlined destroy of Any?((uint64_t)&v276, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                      v127 = 0;
LABEL_237:
                      swift_bridgeObjectRetain();
                      outlined consume of AttributedString.AttributeRunBoundaries?(v127, 1);
                      outlined consume of AttributedString.AttributeRunBoundaries?(v268, v9);
LABEL_238:
                      result = swift_bridgeObjectRelease();
                      if (v15)
                        goto LABEL_235;
                      goto LABEL_239;
                    }
                    v113 = *(_QWORD *)(v257 + 8 * v114);
                    if (!v113)
                    {
                      while (1)
                      {
                        v15 = v114 + 1;
                        if (__OFADD__(v114, 1))
                          break;
                        if (v15 >= v261)
                          goto LABEL_231;
                        v113 = *(_QWORD *)(v257 + 8 * v15);
                        ++v114;
                        if (v113)
                          goto LABEL_218;
                      }
LABEL_446:
                      __break(1u);
LABEL_447:
                      __break(1u);
                      goto LABEL_448;
                    }
                  }
                }
              }
              v15 = v114;
            }
LABEL_218:
            v25 = (v113 - 1) & v113;
            v112 = __clz(__rbit64(v113)) + (v15 << 6);
          }
          v115 = (int64_t *)(*(_QWORD *)(v10 + 48) + 16 * v112);
          v5 = *v115;
          v116 = v115[1];
          v117 = v281;
          swift_bridgeObjectRetain();
          AttributedString._AttributeStorage.subscript.getter(v5, v116, v117, (uint64_t)&v276);
          if (!*((_QWORD *)&v277 + 1))
            break;
          outlined init with copy of AttributedString._AttributeValue((uint64_t)&v276, (uint64_t)&v272);
          outlined destroy of Any?((uint64_t)&v276, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
          v118 = v274;
          v119 = v275;
          outlined copy of AttributedString.AttributeRunBoundaries?(v274, v275);
          outlined destroy of AttributedString._AttributeValue((uint64_t)&v272);
          if (v119 == 1)
            goto LABEL_225;
          *(_QWORD *)&v276 = v118;
          *((_QWORD *)&v276 + 1) = v119;
          *(_QWORD *)&v272 = v268;
          *((_QWORD *)&v272 + 1) = v9;
          swift_bridgeObjectRetain();
          outlined copy of AttributedString.AttributeRunBoundaries?(v118, v119);
          v120 = specialized static AttributedString.AttributeRunBoundaries.== infix(_:_:)(&v276, &v272);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of AttributedString.AttributeRunBoundaries?(v118, v119);
          if ((v120 & 1) == 0)
            goto LABEL_203;
          AttributedString._AttributeStorage.subscript.getter(v5, v116, v267, (uint64_t)&v276);
          v121 = *((_QWORD *)&v277 + 1);
          outlined destroy of Any?((uint64_t)&v276, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
          if (v121)
            goto LABEL_203;
          v280 = 0;
          v278 = 0u;
          v279 = 0u;
          v277 = 0u;
          v276 = 0u;
          specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v276, v5, v116);
          result = swift_bridgeObjectRelease();
          v47 = 1;
          v247 = 1;
        }
        outlined destroy of Any?((uint64_t)&v276, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        v118 = 0;
LABEL_225:
        swift_bridgeObjectRetain();
        outlined consume of AttributedString.AttributeRunBoundaries?(v118, 1);
        outlined consume of AttributedString.AttributeRunBoundaries?(v268, v9);
LABEL_203:
        result = swift_bridgeObjectRelease();
        goto LABEL_204;
      }
      if (v259 != v249[11])
        goto LABEL_458;
      if (!*v248)
        goto LABEL_503;
      specialized Rope._Node._prepareModify(at:)(v55, (uint64_t)&v285);
      v288[0] = v286;
      v276 = v285;
      v277 = v286;
      v278 = v287;
      outlined release of [String : AttributedString._AttributeValue]((uint64_t)v288);
      result = outlined release of [String : AttributedString._AttributeValue]((uint64_t)v288 + 8);
      v277 = MEMORY[0x1E0DEE9E0];
      v249[11] = v259 + 1;
      *(_QWORD *)&v283 = v259 + 1;
      if (!v249[8])
        goto LABEL_504;
      v284 = specialized Rope._Node._finalizeModify(_:)(&v272, &v276);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v256 = v10 + 64;
      v96 = 1 << *(_BYTE *)(v10 + 32);
      if (v96 < 64)
        v97 = ~(-1 << v96);
      else
        v97 = -1;
      v25 = v97 & *(_QWORD *)(v10 + 64);
      v260 = (unint64_t)(v96 + 63) >> 6;
      result = swift_bridgeObjectRetain();
      v246 = 0;
      v15 = 0;
      while (1)
      {
        if (v25)
        {
          v98 = __clz(__rbit64(v25));
          v25 &= v25 - 1;
          v99 = v98 | (v15 << 6);
          goto LABEL_187;
        }
        v30 = __OFADD__(v15++, 1);
        if (v30)
          goto LABEL_421;
        if (v15 >= v260)
          break;
        v100 = *(_QWORD *)(v256 + 8 * v15);
        if (!v100)
        {
          v101 = v15 + 1;
          if (v15 + 1 >= v260)
            break;
          v100 = *(_QWORD *)(v256 + 8 * v101);
          if (!v100)
          {
            v101 = v15 + 2;
            if (v15 + 2 >= v260)
              break;
            v100 = *(_QWORD *)(v256 + 8 * v101);
            if (!v100)
            {
              v101 = v15 + 3;
              if (v15 + 3 >= v260)
                break;
              v100 = *(_QWORD *)(v256 + 8 * v101);
              if (!v100)
              {
                v101 = v15 + 4;
                if (v15 + 4 >= v260)
                  break;
                v100 = *(_QWORD *)(v256 + 8 * v101);
                if (!v100)
                {
                  while (1)
                  {
                    v15 = v101 + 1;
                    if (__OFADD__(v101, 1))
                      break;
                    if (v15 >= v260)
                      goto LABEL_261;
                    v100 = *(_QWORD *)(v256 + 8 * v15);
                    ++v101;
                    if (v100)
                      goto LABEL_186;
                  }
LABEL_448:
                  __break(1u);
LABEL_449:
                  __break(1u);
                  goto LABEL_450;
                }
              }
            }
          }
          v15 = v101;
        }
LABEL_186:
        v25 = (v100 - 1) & v100;
        v99 = __clz(__rbit64(v100)) + (v15 << 6);
LABEL_187:
        v102 = (unint64_t *)(*(_QWORD *)(v10 + 48) + 16 * v99);
        v103 = *v102;
        v5 = v102[1];
        v104 = v281;
        swift_bridgeObjectRetain();
        AttributedString._AttributeStorage.subscript.getter(v103, v5, v104, (uint64_t)&v276);
        if (!*((_QWORD *)&v277 + 1))
        {
          outlined destroy of Any?((uint64_t)&v276, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
          v105 = 0;
LABEL_193:
          swift_bridgeObjectRetain();
          outlined consume of AttributedString.AttributeRunBoundaries?(v105, 1);
          outlined consume of AttributedString.AttributeRunBoundaries?(v268, v9);
          goto LABEL_171;
        }
        outlined init with copy of AttributedString._AttributeValue((uint64_t)&v276, (uint64_t)&v272);
        outlined destroy of Any?((uint64_t)&v276, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        v105 = v274;
        v106 = v275;
        outlined copy of AttributedString.AttributeRunBoundaries?(v274, v275);
        outlined destroy of AttributedString._AttributeValue((uint64_t)&v272);
        if (v106 == 1)
          goto LABEL_193;
        *(_QWORD *)&v276 = v105;
        *((_QWORD *)&v276 + 1) = v106;
        *(_QWORD *)&v272 = v268;
        *((_QWORD *)&v272 + 1) = v9;
        swift_bridgeObjectRetain();
        outlined copy of AttributedString.AttributeRunBoundaries?(v105, v106);
        v107 = specialized static AttributedString.AttributeRunBoundaries.== infix(_:_:)(&v276, &v272);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of AttributedString.AttributeRunBoundaries?(v105, v106);
        if ((v107 & 1) == 0
          || (AttributedString._AttributeStorage.subscript.getter(v103, v5, v267, (uint64_t)&v276),
              v108 = *((_QWORD *)&v277 + 1),
              outlined destroy of Any?((uint64_t)&v276, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?), v108))
        {
LABEL_171:
          result = swift_bridgeObjectRelease();
        }
        else
        {
          v280 = 0;
          v278 = 0u;
          v279 = 0u;
          v277 = 0u;
          v276 = 0u;
          specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v276, v103, v5);
          result = swift_bridgeObjectRelease();
          v47 = 1;
          v246 = 1;
        }
      }
LABEL_261:
      swift_release();
      v133 = 1 << *(_BYTE *)(v267 + 32);
      if (v133 < 64)
        v134 = ~(-1 << v133);
      else
        v134 = -1;
      v15 = v134 & *(_QWORD *)(v267 + 64);
      v25 = (unint64_t)(v133 + 63) >> 6;
      result = swift_retain();
      v135 = 0;
      if (v15)
      {
LABEL_265:
        v136 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        v137 = v136 | (v135 << 6);
        goto LABEL_282;
      }
      while (1)
      {
        v30 = __OFADD__(v135++, 1);
        if (v30)
          goto LABEL_423;
        if (v135 >= v25)
          goto LABEL_303;
        v139 = *(_QWORD *)(v265 + 8 * v135);
        if (!v139)
          break;
LABEL_281:
        v15 = (v139 - 1) & v139;
        v137 = __clz(__rbit64(v139)) + (v135 << 6);
LABEL_282:
        v141 = (int64_t *)(*(_QWORD *)(v267 + 48) + 16 * v137);
        v5 = *v141;
        v142 = v141[1];
        swift_bridgeObjectRetain();
        AttributedString._AttributeStorage.subscript.getter(v5, v142, v267, (uint64_t)&v276);
        if (!*((_QWORD *)&v277 + 1))
        {
          outlined destroy of Any?((uint64_t)&v276, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
          v138 = 0;
LABEL_267:
          swift_bridgeObjectRetain();
          outlined consume of AttributedString.AttributeRunBoundaries?(v138, 1);
          outlined consume of AttributedString.AttributeRunBoundaries?(v268, v9);
LABEL_268:
          result = swift_bridgeObjectRelease();
          if (v15)
            goto LABEL_265;
          continue;
        }
        v138 = *((_QWORD *)&v278 + 1);
        v143 = v279;
        outlined copy of AttributedString.AttributeRunBoundaries?(*((uint64_t *)&v278 + 1), v279);
        outlined destroy of AttributedString._AttributeValue((uint64_t)&v276);
        if (v143 == 1)
          goto LABEL_267;
        *(_QWORD *)&v276 = v138;
        *((_QWORD *)&v276 + 1) = v143;
        *(_QWORD *)&v272 = v268;
        *((_QWORD *)&v272 + 1) = v9;
        swift_bridgeObjectRetain();
        outlined copy of AttributedString.AttributeRunBoundaries?(v138, v143);
        v144 = specialized static AttributedString.AttributeRunBoundaries.== infix(_:_:)(&v276, &v272);
        v10 = *((_QWORD *)&v276 + 1);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of AttributedString.AttributeRunBoundaries?(v138, v143);
        if ((v144 & 1) == 0)
          goto LABEL_268;
        AttributedString._AttributeStorage.subscript.getter(v5, v142, v267, (uint64_t)&v276);
        specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v276, v5, v142);
        result = swift_bridgeObjectRelease();
        v47 = 1;
        v246 = 1;
        if (v15)
          goto LABEL_265;
      }
      v140 = v135 + 1;
      if (v135 + 1 >= v25)
        goto LABEL_303;
      v139 = *(_QWORD *)(v265 + 8 * v140);
      if (v139)
        goto LABEL_280;
      v140 = v135 + 2;
      if (v135 + 2 >= v25)
        goto LABEL_303;
      v139 = *(_QWORD *)(v265 + 8 * v140);
      if (v139)
        goto LABEL_280;
      v140 = v135 + 3;
      if (v135 + 3 >= v25)
        goto LABEL_303;
      v139 = *(_QWORD *)(v265 + 8 * v140);
      if (v139)
        goto LABEL_280;
      v140 = v135 + 4;
      if (v135 + 4 < v25)
      {
        v139 = *(_QWORD *)(v265 + 8 * v140);
        if (!v139)
        {
          while (1)
          {
            v135 = v140 + 1;
            if (__OFADD__(v140, 1))
              break;
            if (v135 >= v25)
              goto LABEL_303;
            v139 = *(_QWORD *)(v265 + 8 * v135);
            ++v140;
            if (v139)
              goto LABEL_281;
          }
LABEL_450:
          __break(1u);
LABEL_451:
          __break(1u);
LABEL_452:
          __break(1u);
LABEL_453:
          __break(1u);
LABEL_454:
          __break(1u);
LABEL_455:
          __break(1u);
          goto LABEL_456;
        }
LABEL_280:
        v135 = v140;
        goto LABEL_281;
      }
LABEL_303:
      v154 = v254;
      result = swift_release();
      v56 = v249;
      if ((v246 & 1) == 0)
      {
        specialized Rope.update<A>(at:by:)(&v283, v248, &v281);
        goto LABEL_347;
      }
      v271 = v254;
      v155 = v283;
      *((_QWORD *)&v272 + 1) = *((_QWORD *)&v283 + 1);
      if ((_QWORD)v283 != v249[11])
        goto LABEL_472;
      if (!*v248)
        goto LABEL_505;
      specialized Rope._Node._prepareModify(at:)(*((unint64_t *)&v283 + 1), (uint64_t)&v276);
      result = specialized closure #1 in AttributedString._InternalRuns.updateAndCoalesce(at:with:)((uint64_t)&v276 + 8, &v281, v270);
      v249[11] = v155 + 1;
      *(_QWORD *)&v272 = v155 + 1;
      if (!v249[8])
        goto LABEL_506;
      v156 = specialized Rope._Node._finalizeModify(_:)(&v269, &v276);
      v273 = v156;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v157 = v270[0];
      v263 = v270[1];
      v158 = v249[8];
      v159 = v249[9];
      v161 = v249[10];
      v160 = v249[11];
      *(_QWORD *)&v276 = v155 + 1;
      *((_QWORD *)&v276 + 1) = *((_QWORD *)&v155 + 1);
      *(_QWORD *)&v277 = v156;
      swift_unknownObjectRetain();
      specialized Rope.formIndex(after:)(&v276, v158, v159, v161, v160);
      swift_unknownObjectRelease();
      v162 = v276;
      v163 = v277;
      v164 = v249[9];
      v166 = v249[10];
      v165 = v249[11];
      v167 = swift_unknownObjectRetain();
      specialized Rope.endIndex.getter(v167, v164, v166, v165);
      v169 = v168;
      swift_unknownObjectRelease();
      if (*((_QWORD *)&v162 + 1) < v169)
      {
        specialized Rope.subscript.getter(v162, *((unint64_t *)&v162 + 1), v163, v249[8], v249[9], v249[10], v249[11]);
        v171 = v170;
        if ((specialized static Dictionary<>.== infix(_:_:)(v172, v157) & 1) != 0)
        {
          v173 = specialized static Set.== infix(_:_:)(v171, v263);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v173 & 1) != 0)
          {
            v174 = specialized Rope.remove(at:)((uint64_t *)&v272);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            specialized Rope.update<A>(at:by:)(&v272, v248, v174);
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
      }
      v186 = v272;
      v187 = (uint64_t)v273;
      v188 = v249[9];
      v189 = v249[10];
      v190 = v249[11];
      v191 = swift_unknownObjectRetain();
      specialized Rope.startIndex.getter(v191, v188, v189, v190);
      v193 = v192;
      swift_unknownObjectRelease();
      if (v193 < *((_QWORD *)&v186 + 1))
      {
        v194 = v249[8];
        v195 = v249[9];
        v196 = v249[10];
        v197 = v249[11];
        swift_unknownObjectRetain();
        v198 = specialized Rope.index(before:)(v186, *((unint64_t *)&v186 + 1), v187, v194, v195, v196, v197);
        v200 = v199;
        v202 = v201;
        swift_unknownObjectRelease();
        specialized Rope.subscript.getter(v198, v200, v202, v249[8], v249[9], v249[10], v249[11]);
        v204 = v203;
        if ((specialized static Dictionary<>.== infix(_:_:)(v205, v157) & 1) != 0)
        {
          v206 = specialized static Set.== infix(_:_:)(v204, v263);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v206 & 1) == 0)
            goto LABEL_341;
          v207 = specialized Rope.remove(at:)((uint64_t *)&v272);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v208 = v249[8];
          v209 = v249[9];
          v210 = v249[10];
          v211 = v249[11];
          swift_unknownObjectRetain();
          specialized Rope.formIndex(before:)((uint64_t)&v272, v208, v209, v210, v211);
          swift_unknownObjectRelease();
          result = (uint64_t)specialized Rope.update<A>(at:by:)(&v272, v248, &v271, v207);
          if (!__OFSUB__(v251, 1))
          {
            --v251;
            goto LABEL_341;
          }
LABEL_495:
          __break(1u);
LABEL_496:
          __break(1u);
LABEL_497:
          __break(1u);
LABEL_498:
          __break(1u);
LABEL_499:
          __break(1u);
          goto LABEL_500;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_341:
      v154 = v271;
      v283 = v272;
      v284 = v273;
LABEL_347:
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v214 = v283;
      v215 = v56[8];
      v216 = v56[9];
      v218 = v56[10];
      v217 = v56[11];
      v276 = v283;
      *(_QWORD *)&v277 = v284;
      v30 = __OFADD__(v251++, 1);
      if (v30)
        goto LABEL_444;
      if ((_QWORD)v283 != v217)
        goto LABEL_445;
      if (v284)
      {
        v219 = v284[3 * ((*((_QWORD *)&v283 + 1) >> ((4 * *((_BYTE *)v284 + 18) + 8) & 0x3C)) & 0xFLL) + 3];
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        swift_unknownObjectRetain();
        v219 = specialized Rope._Node.subscript.getter(*((unint64_t *)&v214 + 1), v215);
      }
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if (__OFADD__(v154, v219))
        goto LABEL_447;
      swift_unknownObjectRetain();
      specialized Rope.formIndex(after:)(&v276, v215, v216, v218, v214);
      result = swift_unknownObjectRelease_n();
      v54 = a4;
      if ((uint64_t)(v154 + v219) < a4)
      {
        v254 = v154 + v219;
        v55 = *((_QWORD *)&v276 + 1);
        v24 = v276;
        v4 = v277;
        goto LABEL_95;
      }
      v221 = v56[8];
      v220 = v56[9];
      v223 = v56[10];
      v222 = v56[11];
      if (a3 != a4)
      {
        v235 = swift_unknownObjectRetain();
        v254 = v223;
        result = specialized Rope._endPath.getter(v235);
        v55 = result;
        v24 = v222;
        if (v221)
        {
          v251 = v220;
          result = swift_unknownObjectRelease();
          v4 = 0;
        }
        else
        {
          v4 = 0;
          v251 = 0;
          v254 = 0;
        }
        v54 = a4;
        goto LABEL_95;
      }
      v252 = v56[9];
      if (v221)
      {
        if (v223 < a3)
          goto LABEL_476;
        if (*(_WORD *)(v221 + 16) && v223 > a3)
        {
          v224 = *(unsigned __int8 *)(v221 + 18);
          if (*(_BYTE *)(v221 + 18))
          {
            result = swift_unknownObjectRetain_n();
            v225 = a3;
            v226 = v221;
            while (1)
            {
              v228 = *(unsigned __int16 *)(v226 + 16);
              if (!*(_WORD *)(v226 + 16))
                goto LABEL_362;
              v229 = *(_QWORD *)(v226 + 40);
              v230 = v225 - v229;
              if (__OFSUB__(v225, v229))
                goto LABEL_453;
              if (__OFADD__(v230, 1))
                goto LABEL_454;
              if (v230 + 1 <= 0)
              {
                v228 = 0;
              }
              else
              {
                if ((_DWORD)v228 == 1)
                {
                  v225 -= v229;
LABEL_362:
                  if (v225)
                    goto LABEL_451;
                  goto LABEL_363;
                }
                v231 = *(_QWORD *)(v226 + 64);
                v30 = __OFSUB__(v230, v231);
                v232 = v230 - v231;
                if (v30)
                  goto LABEL_468;
                if (__OFADD__(v232, 1))
                  goto LABEL_469;
                if (v232 + 1 >= 1)
                {
                  if ((_DWORD)v228 != 2)
                  {
                    v233 = (_QWORD *)(v226 + 88);
                    v234 = 2;
                    while (v228 != v234)
                    {
                      v225 = v232 - *v233;
                      if (__OFSUB__(v232, *v233))
                        goto LABEL_440;
                      if (__OFADD__(v225, 1))
                        goto LABEL_441;
                      if (v225 + 1 < 1)
                      {
                        v228 = v234;
                        v225 = v232;
                        goto LABEL_363;
                      }
                      ++v234;
                      v233 += 3;
                      v232 = v225;
                      if (v228 == v234)
                        goto LABEL_362;
                    }
LABEL_439:
                    __break(1u);
LABEL_440:
                    __break(1u);
LABEL_441:
                    __break(1u);
LABEL_442:
                    __break(1u);
                    goto LABEL_443;
                  }
                  v225 = v232;
                  goto LABEL_362;
                }
                v228 = 1;
                v225 = v230;
              }
LABEL_363:
              v227 = (4 * *(_BYTE *)(v226 + 18) + 8) & 0x3C;
              v224 = ((-15 << v227) - 1) & v224 | (v228 << v227);
              v4 = *(_QWORD *)(v226 + 24 + 24 * v228);
              swift_unknownObjectRetain();
              result = swift_unknownObjectRelease();
              v226 = v4;
              if (!*(_BYTE *)(v4 + 18))
                goto LABEL_393;
            }
          }
          result = swift_unknownObjectRetain_n();
          v225 = a3;
          v4 = v221;
LABEL_393:
          v236 = *(unsigned __int16 *)(v4 + 16);
          if (*(_WORD *)(v4 + 16))
          {
            v237 = *(_QWORD *)(v4 + 24);
            v238 = v225 - v237;
            if (__OFSUB__(v225, v237))
              goto LABEL_493;
            if (__OFADD__(v238, 1))
              goto LABEL_494;
            if (v238 + 1 <= 0)
            {
              v236 = 0;
            }
            else
            {
              if ((_DWORD)v236 == 1)
              {
                v225 -= v237;
                goto LABEL_413;
              }
              v239 = *(_QWORD *)(v4 + 48);
              v30 = __OFSUB__(v238, v239);
              v240 = v238 - v239;
              if (v30)
                goto LABEL_501;
              if (__OFADD__(v240, 1))
                goto LABEL_502;
              if (v240 + 1 >= 1)
              {
                if ((_DWORD)v236 != 2)
                {
                  v241 = (_QWORD *)(v4 + 72);
                  v242 = 2;
                  while (v236 != v242)
                  {
                    v225 = v240 - *v241;
                    if (__OFSUB__(v240, *v241))
                      goto LABEL_490;
                    if (__OFADD__(v225, 1))
                      goto LABEL_491;
                    if (v225 + 1 < 1)
                    {
                      v236 = v242;
                      v225 = v240;
                      goto LABEL_414;
                    }
                    ++v242;
                    v241 += 3;
                    v240 = v225;
                    if (v236 == v242)
                      goto LABEL_413;
                  }
                  goto LABEL_489;
                }
                v225 = v240;
                goto LABEL_413;
              }
              v236 = 1;
              v225 = v238;
            }
          }
          else
          {
LABEL_413:
            if (v225)
              goto LABEL_492;
          }
LABEL_414:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v55 = v224 & 0xFFFFFFFFFFFFF0FFLL | (v236 << 8);
          goto LABEL_391;
        }
      }
      else if (a3 > 0)
      {
        goto LABEL_480;
      }
      swift_unknownObjectRetain_n();
      v55 = specialized Rope._endPath.getter(v221);
      result = swift_unknownObjectRelease();
      v4 = 0;
      v225 = 0;
      if (!v221)
      {
        v251 = 0;
        goto LABEL_416;
      }
LABEL_391:
      swift_unknownObjectRetain();
      v251 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v222, v55, v4, v221, v252);
      result = swift_unknownObjectRelease_n();
LABEL_416:
      v54 = a4;
      v254 = a3 - v225;
      if (__OFSUB__(a3, v225))
        goto LABEL_474;
      v24 = v222;
LABEL_95:
      *(_QWORD *)&v283 = v24;
      *((_QWORD *)&v283 + 1) = v55;
      v284 = (_QWORD *)v4;
    }
  }
  v258 = *(_QWORD *)(v4 + 88);
  v264 = *(_QWORD *)(v4 + 72);
  v10 = *(unsigned __int8 *)(v6 + 18);
  if (*(_BYTE *)(v6 + 18))
  {
    swift_unknownObjectRetain_n();
    result = swift_retain();
    v25 = a3;
    v26 = v6;
    while (1)
    {
      v28 = *(unsigned __int16 *)(v26 + 16);
      if (!*(_WORD *)(v26 + 16))
        goto LABEL_25;
      v29 = *(_QWORD *)(v26 + 40);
      v30 = __OFSUB__(v25, v29);
      v31 = v25 - v29;
      if (v30)
        goto LABEL_466;
      if (__OFADD__(v31, 1))
        goto LABEL_467;
      if (v31 + 1 < 1)
      {
        v28 = 0;
      }
      else
      {
        if ((_DWORD)v28 == 1)
        {
          v25 = v31;
LABEL_25:
          if (v25)
            goto LABEL_463;
          goto LABEL_26;
        }
        v32 = (uint64_t *)(v26 + 64);
        v33 = 1;
        while (1)
        {
          v34 = *v32;
          v32 += 3;
          v25 = v31 - v34;
          if (__OFSUB__(v31, v34))
            goto LABEL_437;
          if (__OFADD__(v25, 1))
            goto LABEL_438;
          if (v25 + 1 < 1)
            break;
          ++v33;
          v31 = v25;
          if (v28 == v33)
            goto LABEL_25;
        }
        v28 = v33;
        v25 = v31;
      }
LABEL_26:
      v27 = (4 * *(_BYTE *)(v26 + 18) + 8) & 0x3C;
      v10 = ((-15 << v27) - 1) & v10 | (v28 << v27);
      v4 = *(_QWORD *)(v26 + 24 + 24 * v28);
      swift_unknownObjectRetain();
      result = swift_unknownObjectRelease();
      v26 = v4;
      if (!*(_BYTE *)(v4 + 18))
        goto LABEL_73;
    }
  }
  swift_unknownObjectRetain_n();
  result = swift_retain();
  v25 = a3;
  v4 = v6;
LABEL_73:
  v44 = *(unsigned __int16 *)(v4 + 16);
  if (!*(_WORD *)(v4 + 16))
  {
LABEL_81:
    v24 = v258;
    goto LABEL_89;
  }
  v49 = *(_QWORD *)(v4 + 24);
  v30 = __OFSUB__(v25, v49);
  v50 = v25 - v49;
  if (v30)
    goto LABEL_499;
  if (!__OFADD__(v50, 1))
  {
    if (v50 + 1 < 1)
    {
      v44 = 0;
      goto LABEL_90;
    }
    if ((_DWORD)v44 != 1)
    {
      v51 = (uint64_t *)(v4 + 48);
      v52 = 1;
      while (1)
      {
        v53 = *v51;
        v51 += 3;
        v25 = v50 - v53;
        if (__OFSUB__(v50, v53))
          goto LABEL_486;
        if (__OFADD__(v25, 1))
          goto LABEL_487;
        if (v25 + 1 < 1)
          break;
        ++v52;
        v50 = v25;
        if (v44 == v52)
          goto LABEL_89;
      }
      v44 = v52;
      v25 = v50;
      goto LABEL_90;
    }
    v25 = v50;
LABEL_89:
    if (v25)
      goto LABEL_496;
LABEL_90:
    swift_unknownObjectRelease();
    result = swift_unknownObjectRelease();
    v35 = v10 & 0xFFFFFFFFFFFFF0FFLL | (v44 << 8);
    v23 = v264;
    if (!v6)
      goto LABEL_91;
    goto LABEL_41;
  }
LABEL_500:
  __break(1u);
LABEL_501:
  __break(1u);
LABEL_502:
  __break(1u);
LABEL_503:
  __break(1u);
LABEL_504:
  __break(1u);
LABEL_505:
  __break(1u);
LABEL_506:
  __break(1u);
  return result;
}

_QWORD *$defer #1 () in AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:)(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;

  v5 = *a4;
  v4 = a4[1];
  v6 = a4[2];
  v7 = a4[3];
  v8 = a4[4];
  v9 = result[8];
  v10 = result[9];
  v12 = result[10];
  v11 = result[11];
  v47 = *a4;
  v48 = v4;
  v49 = v6;
  v45 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }
  if (v5 != v11)
  {
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }
  v14 = result;
  if (v6)
  {
    v15 = *(_QWORD *)(v6 + 24 * ((v4 >> ((4 * *(_BYTE *)(v6 + 18) + 8) & 0x3C)) & 0xF) + 24);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_unknownObjectRetain();
    v15 = specialized Rope._Node.subscript.getter(v4, v9);
  }
  swift_bridgeObjectRelease();
  result = (_QWORD *)swift_bridgeObjectRelease();
  v16 = __OFADD__(v8, v15);
  v17 = v8 + v15;
  if (v16)
    goto LABEL_81;
  swift_unknownObjectRetain();
  specialized Rope.formIndex(after:)(&v47, v9, v10, v12, v5);
  result = (_QWORD *)swift_unknownObjectRelease_n();
  v18 = a3;
  if (v17 < a3)
  {
    v19 = v47;
    v20 = v48;
    v21 = v49;
    v22 = v45;
    goto LABEL_74;
  }
  v23 = v14[8];
  v22 = v14[9];
  v17 = v14[10];
  v19 = v14[11];
  if (a2 != a3)
  {
    v35 = swift_unknownObjectRetain();
    result = (_QWORD *)specialized Rope._endPath.getter(v35);
    v20 = (unint64_t)result;
    if (v23)
    {
      result = (_QWORD *)swift_unknownObjectRelease();
      v21 = 0;
    }
    else
    {
      v21 = 0;
      v22 = 0;
      v17 = 0;
    }
    goto LABEL_74;
  }
  if (v23)
    v24 = v17;
  else
    v24 = 0;
  if (a3 < 0 || v24 < a3)
    goto LABEL_87;
  if (v23 && *(_WORD *)(v23 + 16) && v17 > a3)
  {
    v25 = *(unsigned __int8 *)(v23 + 18);
    if (*(_BYTE *)(v23 + 18))
    {
      result = (_QWORD *)swift_unknownObjectRetain_n();
      v26 = a3;
      v21 = v23;
      while (1)
      {
        v28 = *(unsigned __int16 *)(v21 + 16);
        if (!*(_WORD *)(v21 + 16))
          goto LABEL_21;
        v29 = *(_QWORD *)(v21 + 40);
        v30 = v26 - v29;
        if (__OFSUB__(v26, v29))
          goto LABEL_83;
        if (__OFADD__(v30, 1))
          goto LABEL_84;
        if (v30 + 1 <= 0)
        {
          v28 = 0;
        }
        else
        {
          if ((_DWORD)v28 == 1)
          {
            v26 -= v29;
LABEL_21:
            if (v26)
              goto LABEL_82;
            goto LABEL_22;
          }
          v31 = *(_QWORD *)(v21 + 64);
          v16 = __OFSUB__(v30, v31);
          v32 = v30 - v31;
          if (v16)
            goto LABEL_85;
          if (__OFADD__(v32, 1))
            goto LABEL_86;
          if (v32 + 1 >= 1)
          {
            if ((_DWORD)v28 != 2)
            {
              v33 = (_QWORD *)(v21 + 88);
              v34 = 2;
              while (v28 != v34)
              {
                v26 = v32 - *v33;
                if (__OFSUB__(v32, *v33))
                  goto LABEL_77;
                if (__OFADD__(v26, 1))
                  goto LABEL_78;
                if (v26 + 1 < 1)
                {
                  v28 = v34;
                  v26 = v32;
                  goto LABEL_22;
                }
                ++v34;
                v33 += 3;
                v32 = v26;
                if (v28 == v34)
                  goto LABEL_21;
              }
              __break(1u);
LABEL_77:
              __break(1u);
LABEL_78:
              __break(1u);
              goto LABEL_79;
            }
            v26 = v32;
            goto LABEL_21;
          }
          v28 = 1;
          v26 = v30;
        }
LABEL_22:
        v27 = (4 * *(_BYTE *)(v21 + 18) + 8) & 0x3C;
        v25 = ((-15 << v27) - 1) & v25 | (v28 << v27);
        v21 = *(_QWORD *)(v21 + 24 + 24 * v28);
        swift_unknownObjectRetain();
        result = (_QWORD *)swift_unknownObjectRelease();
        if (!*(_BYTE *)(v21 + 18))
        {
          v25 &= 0xFFFFFFFFFFFFF0FFLL;
          v18 = a3;
          v37 = *(unsigned __int16 *)(v21 + 16);
          if (*(_WORD *)(v21 + 16))
            goto LABEL_53;
LABEL_71:
          if (!v26)
          {
LABEL_72:
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            v20 = v25 | (v37 << 8);
LABEL_46:
            swift_unknownObjectRetain();
            v22 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v19, v20, v21, v23, v22);
            result = (_QWORD *)swift_unknownObjectRelease_n();
            v17 = v18 - v26;
            if (!__OFSUB__(v18, v26))
              goto LABEL_74;
LABEL_88:
            __break(1u);
LABEL_89:
            __break(1u);
LABEL_90:
            __break(1u);
LABEL_91:
            __break(1u);
          }
          __break(1u);
LABEL_93:
          __break(1u);
          goto LABEL_94;
        }
      }
    }
    result = (_QWORD *)swift_unknownObjectRetain_n();
    v26 = a3;
    v21 = v23;
    v37 = *(unsigned __int16 *)(v23 + 16);
    if (!*(_WORD *)(v23 + 16))
      goto LABEL_71;
LABEL_53:
    v38 = *(_QWORD *)(v21 + 24);
    v39 = v26 - v38;
    if (__OFSUB__(v26, v38))
      goto LABEL_93;
    if (__OFADD__(v39, 1))
    {
LABEL_94:
      __break(1u);
    }
    else
    {
      if (v39 + 1 <= 0)
      {
        v37 = 0;
        goto LABEL_72;
      }
      if ((_DWORD)v37 == 1)
      {
        v26 -= v38;
        goto LABEL_71;
      }
      v40 = *(_QWORD *)(v21 + 48);
      v16 = __OFSUB__(v39, v40);
      v41 = v39 - v40;
      if (!v16)
      {
        if (!__OFADD__(v41, 1))
        {
          if (v41 + 1 < 1)
          {
            v37 = 1;
            v26 = v39;
            goto LABEL_72;
          }
          if ((_DWORD)v37 == 2)
          {
            v26 = v41;
            goto LABEL_71;
          }
          v42 = (_QWORD *)(v21 + 72);
          v43 = 2;
          while (v37 != v43)
          {
            v26 = v41 - *v42;
            if (__OFSUB__(v41, *v42))
              goto LABEL_90;
            if (__OFADD__(v26, 1))
              goto LABEL_91;
            if (v26 + 1 < 1)
            {
              v37 = v43;
              v26 = v41;
              goto LABEL_72;
            }
            ++v43;
            v42 += 3;
            v41 = v26;
            if (v37 == v43)
              goto LABEL_71;
          }
          goto LABEL_89;
        }
        goto LABEL_96;
      }
    }
    __break(1u);
LABEL_96:
    __break(1u);
    return result;
  }
  v36 = swift_unknownObjectRetain_n();
  v20 = specialized Rope._endPath.getter(v36);
  result = (_QWORD *)swift_unknownObjectRelease();
  v21 = 0;
  v26 = 0;
  if (v23)
    goto LABEL_46;
  v22 = 0;
  v17 = a3;
LABEL_74:
  *a4 = v19;
  a4[1] = v20;
  a4[2] = v21;
  a4[3] = v22;
  a4[4] = v17;
  return result;
}

_QWORD *$defer #1 () in AttributedString.Guts.fixScalarConstrainedAttributes(in:)(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  return result;
}

uint64_t specialized closure #1 in closure #1 in AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:)(unint64_t *a1, uint64_t *a2, uint64_t a3, _BYTE *a4, _QWORD *a5, uint64_t a6)
{
  return specialized closure #1 in closure #1 in AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:)(a1, a2, a3, a4, a5, a6) & 1;
}

{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  _OWORD v20[4];
  uint64_t v21;
  _BYTE v22[72];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v11 = *a1;
  v10 = a1[1];
  v12 = *a2;
  if (*(_QWORD *)(*a2 + 16))
  {
    swift_bridgeObjectRetain();
    v13 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v10);
    if ((v14 & 1) != 0)
    {
      outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v12 + 56) + 72 * v13, (uint64_t)&v38);
    }
    else
    {
      v42 = 0;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(a3 + 16))
      goto LABEL_8;
LABEL_5:
    v37 = 0;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    goto LABEL_12;
  }
  v42 = 0;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  if (!*(_QWORD *)(a3 + 16))
    goto LABEL_5;
LABEL_8:
  swift_bridgeObjectRetain();
  v15 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v10);
  if ((v16 & 1) != 0)
  {
    outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(a3 + 56) + 72 * v15, (uint64_t)&v33);
  }
  else
  {
    v37 = 0;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
  }
  swift_bridgeObjectRelease();
LABEL_12:
  outlined init with copy of (Hashable & Sendable)?((uint64_t)&v38, (uint64_t)&v23, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
  outlined init with copy of (Hashable & Sendable)?((uint64_t)&v33, (uint64_t)&v28, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
  if (!*((_QWORD *)&v24 + 1))
  {
    outlined destroy of Any?((uint64_t)&v33, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined destroy of Any?((uint64_t)&v38, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (!*((_QWORD *)&v29 + 1))
    {
      outlined destroy of Any?((uint64_t)&v23, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      goto LABEL_18;
    }
LABEL_20:
    outlined destroy of Any?((uint64_t)&v23, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
    return 0;
  }
  outlined init with copy of (Hashable & Sendable)?((uint64_t)&v23, (uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
  if (!*((_QWORD *)&v29 + 1))
  {
    outlined destroy of Any?((uint64_t)&v33, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined destroy of Any?((uint64_t)&v38, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined destroy of AttributedString._AttributeValue((uint64_t)v22);
    goto LABEL_20;
  }
  v20[2] = v30;
  v20[3] = v31;
  v21 = v32;
  v20[0] = v28;
  v20[1] = v29;
  v17 = specialized static AttributedString._AttributeValue.== infix(_:_:)((uint64_t)v22, (uint64_t)v20);
  outlined destroy of AttributedString._AttributeValue((uint64_t)v20);
  outlined destroy of Any?((uint64_t)&v33, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
  outlined destroy of Any?((uint64_t)&v38, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
  outlined destroy of AttributedString._AttributeValue((uint64_t)v22);
  outlined destroy of Any?((uint64_t)&v23, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
  if ((v17 & 1) == 0)
    return 0;
LABEL_18:
  v18 = 1;
  *a4 = 1;
  v27 = 0;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  swift_bridgeObjectRetain();
  specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v23, v11, v10);
  swift_bridgeObjectRelease();
  *a5 = a6;
  return v18;
}

uint64_t specialized invalidate #1 (_:from:to:) in AttributedString.Guts.fixScalarConstrainedAttributes(in:)(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  char v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t result;
  uint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  int64_t v37;
  unint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;

  v11 = a3 >> 11;
  v12 = a4 >> 11;
  if (a4 >> 11 < a3 >> 11)
  {
    __break(1u);
  }
  else
  {
    v7 = a5;
    v5 = a2;
    v6 = a1;
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v45 = *v7;
    v10 = *v7;
    *v7 = 0x8000000000000000;
    v8 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v5);
    v15 = *(_QWORD *)(v10 + 16);
    v16 = (v14 & 1) == 0;
    v17 = v15 + v16;
    if (!__OFADD__(v15, v16))
    {
      v9 = v14;
      if (*(_QWORD *)(v10 + 24) < v17)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, isUniquelyReferenced_nonNull_native);
        v18 = v45;
        v19 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v5);
        if ((v9 & 1) != (v20 & 1))
          goto LABEL_44;
        v8 = v19;
        goto LABEL_8;
      }
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v18 = v10;
LABEL_8:
        *v7 = v18;
        swift_bridgeObjectRelease();
        if ((v9 & 1) == 0)
        {
          specialized _NativeDictionary._insert(at:key:value:)(v8, v6, v5, MEMORY[0x1E0DEE9D8], (_QWORD *)*v7);
          swift_bridgeObjectRetain();
        }
        Array<A>._extend(with:)(v11, v12);
        return swift_bridgeObjectRelease();
      }
      goto LABEL_13;
    }
  }
  __break(1u);
LABEL_13:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [Range<Int>]>);
  v22 = static _DictionaryStorage.copy(original:)();
  v18 = v22;
  if (!*(_QWORD *)(v10 + 16))
  {
LABEL_41:
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  v23 = (char *)(v22 + 64);
  v24 = (char *)(v10 + 64);
  v25 = (unint64_t)((1 << *(_BYTE *)(v18 + 32)) + 63) >> 6;
  v41 = v10 + 64;
  if (v18 != v10 || v23 >= &v24[8 * v25])
    memmove(v23, v24, 8 * v25);
  v26 = 0;
  *(_QWORD *)(v18 + 16) = *(_QWORD *)(v10 + 16);
  v27 = 1 << *(_BYTE *)(v10 + 32);
  v28 = -1;
  if (v27 < 64)
    v28 = ~(-1 << v27);
  v29 = v28 & *(_QWORD *)(v10 + 64);
  v42 = (unint64_t)(v27 + 63) >> 6;
  while (1)
  {
    if (v29)
    {
      v43 = (v29 - 1) & v29;
      v44 = v26;
      v30 = __clz(__rbit64(v29)) | (v26 << 6);
      goto LABEL_21;
    }
    v37 = v26 + 1;
    if (__OFADD__(v26, 1))
    {
      __break(1u);
      goto LABEL_43;
    }
    if (v37 >= v42)
      goto LABEL_41;
    v38 = *(_QWORD *)(v41 + 8 * v37);
    v39 = v26 + 1;
    if (!v38)
    {
      v39 = v26 + 2;
      if (v26 + 2 >= v42)
        goto LABEL_41;
      v38 = *(_QWORD *)(v41 + 8 * v39);
      if (!v38)
      {
        v39 = v26 + 3;
        if (v26 + 3 >= v42)
          goto LABEL_41;
        v38 = *(_QWORD *)(v41 + 8 * v39);
        if (!v38)
        {
          v39 = v26 + 4;
          if (v26 + 4 >= v42)
            goto LABEL_41;
          v38 = *(_QWORD *)(v41 + 8 * v39);
          if (!v38)
          {
            v39 = v26 + 5;
            if (v26 + 5 >= v42)
              goto LABEL_41;
            v38 = *(_QWORD *)(v41 + 8 * v39);
            if (!v38)
              break;
          }
        }
      }
    }
LABEL_40:
    v43 = (v38 - 1) & v38;
    v44 = v39;
    v30 = __clz(__rbit64(v38)) + (v39 << 6);
LABEL_21:
    v31 = 16 * v30;
    v32 = (_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v30);
    v33 = v32[1];
    v34 = 8 * v30;
    v35 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + v34);
    v36 = (_QWORD *)(*(_QWORD *)(v18 + 48) + v31);
    *v36 = *v32;
    v36[1] = v33;
    *(_QWORD *)(*(_QWORD *)(v18 + 56) + v34) = v35;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v29 = v43;
    v26 = v44;
  }
  v40 = v26 + 6;
  if (v26 + 6 >= v42)
    goto LABEL_41;
  v38 = *(_QWORD *)(v41 + 8 * v40);
  if (v38)
  {
    v39 = v26 + 6;
    goto LABEL_40;
  }
  while (1)
  {
    v39 = v40 + 1;
    if (__OFADD__(v40, 1))
      break;
    if (v39 >= v42)
      goto LABEL_41;
    v38 = *(_QWORD *)(v41 + 8 * v39);
    ++v40;
    if (v38)
      goto LABEL_40;
  }
LABEL_43:
  __break(1u);
LABEL_44:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for AttributedString._AttributeStorage()
{
  return &type metadata for AttributedString._AttributeStorage;
}

uint64_t assignWithCopy for AttributedString._AttributeValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  v4 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(a1 + 48) != 1)
  {
    if (v4 != 1)
    {
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    outlined destroy of AttributedString.AttributeRunBoundaries(a1 + 40);
    goto LABEL_6;
  }
  if (v4 == 1)
  {
LABEL_6:
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    goto LABEL_8;
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
LABEL_8:
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AttributedString._AttributeValue(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _QWORD *v5;
  uint64_t v6;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = (_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 48) != 1)
  {
    v6 = *(_QWORD *)(a2 + 48);
    if (v6 != 1)
    {
      *(_QWORD *)(a1 + 40) = *v5;
      *(_QWORD *)(a1 + 48) = v6;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of AttributedString.AttributeRunBoundaries(a1 + 40);
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)v5;
LABEL_6:
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t AttributedString._AttributeStorage.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  unint64_t v8;
  char v9;

  if (*(_QWORD *)(a3 + 16))
  {
    v7 = result;
    swift_bridgeObjectRetain();
    v8 = specialized __RawDictionaryStorage.find<A>(_:)(v7, a2);
    if ((v9 & 1) != 0)
    {
      outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(a3 + 56) + 72 * v8, a4);
    }
    else
    {
      *(_QWORD *)(a4 + 64) = 0;
      *(_OWORD *)(a4 + 32) = 0u;
      *(_OWORD *)(a4 + 48) = 0u;
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
    }
    return swift_bridgeObjectRelease();
  }
  else
  {
    *(_QWORD *)(a4 + 64) = 0;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  return result;
}

uint64_t AttributedString._AttributeStorage.filterWithoutInvalidatingDependents(_:)(uint64_t (*a1)(uint64_t, uint64_t, __int128 *), uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  swift_bridgeObjectRetain();
  v5 = specialized _NativeDictionary.filter(_:)(a3, a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t AttributedString._AttributeValue.isInvalidatedOnTextChange.getter()
{
  uint64_t v0;
  uint64_t v1;
  Swift::Int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 64);
  if (!v1)
    return 0;
  if (!*(_QWORD *)(v1 + 16))
    return 0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  v2 = Hasher._finalize()();
  v3 = -1 << *(_BYTE *)(v1 + 32);
  v4 = v2 & ~v3;
  if (((*(_QWORD *)(v1 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) == 0)
    return 0;
  v5 = ~v3;
  while (*(_QWORD *)(*(_QWORD *)(v1 + 48) + 16 * v4 + 8))
  {
    v4 = (v4 + 1) & v5;
    if (((*(_QWORD *)(v1 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) == 0)
      return 0;
  }
  swift_bridgeObjectRelease();
  return 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AttributedString._AttributeValue()
{
  _QWORD *v0;

  Hasher.init(_seed:)();
  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttributedString._AttributeValue()
{
  _QWORD *v0;

  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AttributedString._AttributeValue()
{
  _QWORD *v0;

  Hasher.init(_seed:)();
  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributedString._AttributeValue()
{
  uint64_t v0;
  _BYTE v2[40];

  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v0, (uint64_t)v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
  return String.init<A>(describing:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AttributedString._AttributeValue(uint64_t a1, uint64_t a2)
{
  _BYTE v4[40];
  _BYTE v5[40];

  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v5);
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a2, (uint64_t)v4);
  LOBYTE(a2) = specialized static AttributedString._AttributeValue.__equalAttributes(_:_:)((uint64_t)v5, (uint64_t)v4);
  outlined destroy of Any?((uint64_t)v4, &demangling cache variable for type metadata for (Hashable & Sendable)?);
  outlined destroy of Any?((uint64_t)v5, &demangling cache variable for type metadata for (Hashable & Sendable)?);
  return a2 & 1;
}

unint64_t lazy protocol witness table accessor for type AttributedString._AttributeValue and conformance AttributedString._AttributeValue()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString._AttributeValue and conformance AttributedString._AttributeValue;
  if (!lazy protocol witness table cache variable for type AttributedString._AttributeValue and conformance AttributedString._AttributeValue)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString._AttributeValue, &type metadata for AttributedString._AttributeValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString._AttributeValue and conformance AttributedString._AttributeValue);
  }
  return result;
}

uint64_t Dictionary<>._attrStrDescription.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  void *v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  Swift::String v21;
  char v22[40];
  Swift::String v23;
  Swift::String v24;
  _OWORD v25[4];
  uint64_t v26;
  Swift::String v27;
  _OWORD v28[4];
  uint64_t v29;
  Swift::String v30;

  v30._countAndFlagsBits = 0;
  v30._object = (void *)0xE000000000000000;
  v2 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  while (1)
  {
    if (v5)
    {
      v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }
    v18 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v18 >= v6)
      goto LABEL_23;
    v19 = *(_QWORD *)(v2 + 8 * v18);
    ++v8;
    if (!v19)
    {
      v8 = v18 + 1;
      if (v18 + 1 >= v6)
        goto LABEL_23;
      v19 = *(_QWORD *)(v2 + 8 * v8);
      if (!v19)
      {
        v8 = v18 + 2;
        if (v18 + 2 >= v6)
          goto LABEL_23;
        v19 = *(_QWORD *)(v2 + 8 * v8);
        if (!v19)
        {
          v8 = v18 + 3;
          if (v18 + 3 >= v6)
            goto LABEL_23;
          v19 = *(_QWORD *)(v2 + 8 * v8);
          if (!v19)
            break;
        }
      }
    }
LABEL_22:
    v5 = (v19 - 1) & v19;
    v10 = __clz(__rbit64(v19)) + (v8 << 6);
LABEL_5:
    v11 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v10);
    v13 = *v11;
    v12 = (void *)v11[1];
    outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(a1 + 56) + 72 * v10, (uint64_t)v28);
    v27._countAndFlagsBits = v13;
    v27._object = v12;
    v25[1] = v28[1];
    v25[2] = v28[2];
    v25[3] = v28[3];
    v26 = v29;
    v24 = v27;
    v25[0] = v28[0];
    v23._countAndFlagsBits = 9;
    v23._object = (void *)0xE100000000000000;
    v14 = v27;
    swift_bridgeObjectRetain();
    String.append(_:)(v14);
    v15._countAndFlagsBits = 2112800;
    v15._object = (void *)0xE300000000000000;
    String.append(_:)(v15);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v25, (uint64_t)v22);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    v16._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._countAndFlagsBits = 10;
    v17._object = (void *)0xE100000000000000;
    String.append(_:)(v17);
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    result = outlined destroy of Any?((uint64_t)&v24, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
  }
  v20 = v18 + 4;
  if (v20 >= v6)
  {
LABEL_23:
    swift_release();
    v27._countAndFlagsBits = 2683;
    v27._object = (void *)0xE200000000000000;
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    v21._countAndFlagsBits = 125;
    v21._object = (void *)0xE100000000000000;
    String.append(_:)(v21);
    return v27._countAndFlagsBits;
  }
  v19 = *(_QWORD *)(v2 + 8 * v20);
  if (v19)
  {
    v8 = v20;
    goto LABEL_22;
  }
  while (1)
  {
    v8 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v8 >= v6)
      goto LABEL_23;
    v19 = *(_QWORD *)(v2 + 8 * v8);
    ++v20;
    if (v19)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AttributedString._AttributeStorage()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  specialized Dictionary<>.hash(into:)((uint64_t)v4, v1);
  specialized Set.hash(into:)((uint64_t)v4, v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AttributedString._AttributeStorage(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = v1[1];
  specialized Dictionary<>.hash(into:)(a1, v3);
  specialized Set.hash(into:)(a1, v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AttributedString._AttributeStorage()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  specialized Dictionary<>.hash(into:)((uint64_t)v4, v1);
  specialized Set.hash(into:)((uint64_t)v4, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AttributedString._AttributeStorage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v3 = a2[1];
  if ((specialized static Dictionary<>.== infix(_:_:)(*a1, *a2) & 1) != 0)
    return specialized static Set.== infix(_:_:)(v2, v3);
  else
    return 0;
}

unint64_t lazy protocol witness table accessor for type AttributedString._AttributeStorage and conformance AttributedString._AttributeStorage()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString._AttributeStorage and conformance AttributedString._AttributeStorage;
  if (!lazy protocol witness table cache variable for type AttributedString._AttributeStorage and conformance AttributedString._AttributeStorage)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString._AttributeStorage, &type metadata for AttributedString._AttributeStorage);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString._AttributeStorage and conformance AttributedString._AttributeStorage);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributedString._AttributeStorage()
{
  uint64_t *v0;

  return Dictionary<>._attrStrDescription.getter(*v0);
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe, uint64_t (*a2)(uint64_t, uint64_t, __int128 *))
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  size_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  BOOL v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  Swift::Int v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char v57;
  unint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  int64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  int64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  Swift::Int v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char v82;
  unint64_t v83;
  BOOL v84;
  uint64_t v85;
  _QWORD v87[2];
  unint64_t *v88;
  int64_t v89;
  uint64_t v90;
  uint64_t (*v91)(uint64_t, uint64_t, __int128 *);
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;

  v91 = a2;
  v3 = isStackAllocationSafe;
  v103 = *MEMORY[0x1E0C80C00];
  v4 = *(_BYTE *)(isStackAllocationSafe + 32);
  v89 = (unint64_t)((1 << v4) + 63) >> 6;
  v5 = 8 * v89;
  v92 = isStackAllocationSafe;
  if ((v4 & 0x3Fu) > 0xD)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      v88 = (unint64_t *)swift_slowAlloc();
      bzero(v88, v5);
      v90 = 0;
      v21 = 0;
      v22 = v3 + 64;
      v23 = 1 << *(_BYTE *)(v3 + 32);
      if (v23 < 64)
        v24 = ~(-1 << v23);
      else
        v24 = -1;
      v25 = v24 & *(_QWORD *)(v3 + 64);
      v26 = (unint64_t)(v23 + 63) >> 6;
      while (1)
      {
        if (v25)
        {
          v27 = __clz(__rbit64(v25));
          v25 &= v25 - 1;
          v28 = v27 | (v21 << 6);
        }
        else
        {
          v14 = __OFADD__(v21++, 1);
          if (v14)
            goto LABEL_132;
          if (v21 >= v26)
            goto LABEL_60;
          v29 = *(_QWORD *)(v22 + 8 * v21);
          if (!v29)
          {
            v30 = v21 + 1;
            if (v21 + 1 >= v26)
              goto LABEL_60;
            v29 = *(_QWORD *)(v22 + 8 * v30);
            if (!v29)
            {
              v30 = v21 + 2;
              if (v21 + 2 >= v26)
                goto LABEL_60;
              v29 = *(_QWORD *)(v22 + 8 * v30);
              if (!v29)
              {
                v30 = v21 + 3;
                if (v21 + 3 >= v26)
                  goto LABEL_60;
                v29 = *(_QWORD *)(v22 + 8 * v30);
                if (!v29)
                {
                  while (1)
                  {
                    v21 = v30 + 1;
                    if (__OFADD__(v30, 1))
                      goto LABEL_135;
                    if (v21 >= v26)
                      break;
                    v29 = *(_QWORD *)(v22 + 8 * v21);
                    ++v30;
                    if (v29)
                      goto LABEL_48;
                  }
LABEL_60:
                  if (!v90)
                  {
                    v3 = MEMORY[0x1E0DEE9E0];
                    goto LABEL_128;
                  }
                  if (v90 == *(_QWORD *)(v3 + 16))
                  {
                    swift_retain();
                    goto LABEL_128;
                  }
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedString._AttributeValue>);
                  v61 = static _DictionaryStorage.allocate(capacity:)();
                  v62 = 0;
                  v63 = *v88;
                  v64 = v61 + 64;
                  while (1)
                  {
                    if (v63)
                    {
                      v70 = __clz(__rbit64(v63));
                      v63 &= v63 - 1;
                      v71 = v70 | (v62 << 6);
                    }
                    else
                    {
                      v14 = __OFADD__(v62++, 1);
                      if (v14)
                        goto LABEL_137;
                      if (v62 >= v89)
                        goto LABEL_127;
                      v72 = v88[v62];
                      if (!v72)
                      {
                        v73 = v62 + 1;
                        if (v62 + 1 >= v89)
                          goto LABEL_127;
                        v72 = v88[v73];
                        if (!v72)
                        {
                          v73 = v62 + 2;
                          if (v62 + 2 >= v89)
                            goto LABEL_127;
                          v72 = v88[v73];
                          if (!v72)
                          {
                            v73 = v62 + 3;
                            if (v62 + 3 >= v89)
                              goto LABEL_127;
                            v72 = v88[v73];
                            if (!v72)
                            {
                              v73 = v62 + 4;
                              if (v62 + 4 >= v89)
                                goto LABEL_127;
                              v72 = v88[v73];
                              if (!v72)
                              {
                                while (1)
                                {
                                  v62 = v73 + 1;
                                  if (__OFADD__(v73, 1))
                                    goto LABEL_140;
                                  if (v62 >= v89)
                                    break;
                                  v72 = v88[v62];
                                  ++v73;
                                  if (v72)
                                    goto LABEL_113;
                                }
LABEL_127:
                                v3 = v61;
LABEL_128:
                                MEMORY[0x186DA9E78](v88, -1, -1);
                                return v3;
                              }
                            }
                          }
                        }
                        v62 = v73;
                      }
LABEL_113:
                      v63 = (v72 - 1) & v72;
                      v71 = __clz(__rbit64(v72)) + (v62 << 6);
                    }
                    v74 = *(_QWORD *)(v3 + 56);
                    v75 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v71);
                    v77 = *v75;
                    v76 = v75[1];
                    outlined init with copy of AttributedString._AttributeValue(v74 + 72 * v71, (uint64_t)&v98);
                    v95 = v100;
                    v96 = v101;
                    v97 = v102;
                    v93 = v98;
                    v94 = v99;
                    Hasher.init(_seed:)();
                    swift_bridgeObjectRetain();
                    String.hash(into:)();
                    v78 = Hasher._finalize()();
                    v79 = -1 << *(_BYTE *)(v61 + 32);
                    v80 = v78 & ~v79;
                    v81 = v80 >> 6;
                    if (((-1 << v80) & ~*(_QWORD *)(v64 + 8 * (v80 >> 6))) != 0)
                    {
                      v65 = __clz(__rbit64((-1 << v80) & ~*(_QWORD *)(v64 + 8 * (v80 >> 6)))) | v80 & 0x7FFFFFFFFFFFFFC0;
                    }
                    else
                    {
                      v82 = 0;
                      v83 = (unint64_t)(63 - v79) >> 6;
                      do
                      {
                        if (++v81 == v83 && (v82 & 1) != 0)
                          goto LABEL_131;
                        v84 = v81 == v83;
                        if (v81 == v83)
                          v81 = 0;
                        v82 |= v84;
                        v85 = *(_QWORD *)(v64 + 8 * v81);
                      }
                      while (v85 == -1);
                      v65 = __clz(__rbit64(~v85)) + (v81 << 6);
                    }
                    *(_QWORD *)(v64 + ((v65 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v65;
                    v66 = (_QWORD *)(*(_QWORD *)(v61 + 48) + 16 * v65);
                    *v66 = v77;
                    v66[1] = v76;
                    v67 = *(_QWORD *)(v61 + 56) + 72 * v65;
                    v68 = v96;
                    *(_OWORD *)(v67 + 32) = v95;
                    *(_OWORD *)(v67 + 48) = v68;
                    *(_QWORD *)(v67 + 64) = v97;
                    v69 = v94;
                    *(_OWORD *)v67 = v93;
                    *(_OWORD *)(v67 + 16) = v69;
                    ++*(_QWORD *)(v61 + 16);
                    v44 = v90-- == 1;
                    v3 = v92;
                    if (v44)
                      goto LABEL_127;
                  }
                }
              }
            }
            v21 = v30;
          }
LABEL_48:
          v25 = (v29 - 1) & v29;
          v28 = __clz(__rbit64(v29)) + (v21 << 6);
        }
        v31 = *(_QWORD *)(v3 + 56);
        v32 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v28);
        v33 = *v32;
        v3 = v32[1];
        outlined init with copy of AttributedString._AttributeValue(v31 + 72 * v28, (uint64_t)&v98);
        swift_bridgeObjectRetain();
        v34 = v91(v33, v3, &v98);
        outlined destroy of AttributedString._AttributeValue((uint64_t)&v98);
        swift_bridgeObjectRelease();
        if (v2)
          goto LABEL_128;
        v3 = v92;
        if ((v34 & 1) != 0)
        {
          *(unint64_t *)((char *)v88 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
          v14 = __OFADD__(v90++, 1);
          if (v14)
            goto LABEL_138;
        }
      }
    }
  }
  v87[1] = v87;
  MEMORY[0x1E0C80A78](isStackAllocationSafe);
  v88 = (_QWORD *)((char *)v87 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0));
  bzero(v88, v5);
  v90 = 0;
  v6 = 0;
  v7 = v3 + 64;
  v8 = 1 << *(_BYTE *)(v3 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(v3 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v6 << 6);
      goto LABEL_19;
    }
    v14 = __OFADD__(v6++, 1);
    if (v14)
      goto LABEL_130;
    if (v6 >= v11)
      goto LABEL_29;
    v15 = *(_QWORD *)(v7 + 8 * v6);
    if (!v15)
      break;
LABEL_18:
    v10 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v6 << 6);
LABEL_19:
    v17 = *(_QWORD *)(v3 + 56);
    v18 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v13);
    v19 = *v18;
    v3 = v18[1];
    outlined init with copy of AttributedString._AttributeValue(v17 + 72 * v13, (uint64_t)&v98);
    swift_bridgeObjectRetain();
    v20 = v91(v19, v3, &v98);
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v98);
    swift_bridgeObjectRelease();
    if (v2)
    {
      swift_willThrow();
      return v3;
    }
    v3 = v92;
    if ((v20 & 1) != 0)
    {
      *(unint64_t *)((char *)v88 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = __OFADD__(v90++, 1);
      if (v14)
        goto LABEL_136;
    }
  }
  v16 = v6 + 1;
  if (v6 + 1 >= v11)
    goto LABEL_29;
  v15 = *(_QWORD *)(v7 + 8 * v16);
  if (v15)
    goto LABEL_17;
  v16 = v6 + 2;
  if (v6 + 2 >= v11)
    goto LABEL_29;
  v15 = *(_QWORD *)(v7 + 8 * v16);
  if (v15)
    goto LABEL_17;
  v16 = v6 + 3;
  if (v6 + 3 >= v11)
    goto LABEL_29;
  v15 = *(_QWORD *)(v7 + 8 * v16);
  if (v15)
  {
LABEL_17:
    v6 = v16;
    goto LABEL_18;
  }
  while (1)
  {
    v6 = v16 + 1;
    if (__OFADD__(v16, 1))
      goto LABEL_133;
    if (v6 >= v11)
      break;
    v15 = *(_QWORD *)(v7 + 8 * v6);
    ++v16;
    if (v15)
      goto LABEL_18;
  }
LABEL_29:
  if (!v90)
    return MEMORY[0x1E0DEE9E0];
  if (v90 != *(_QWORD *)(v3 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedString._AttributeValue>);
    v35 = static _DictionaryStorage.allocate(capacity:)();
    v36 = 0;
    v37 = *v88;
    v38 = v35 + 64;
    while (1)
    {
      if (v37)
      {
        v45 = __clz(__rbit64(v37));
        v37 &= v37 - 1;
        v46 = v45 | (v36 << 6);
      }
      else
      {
        v14 = __OFADD__(v36++, 1);
        if (v14)
          goto LABEL_134;
        if (v36 >= v89)
          return v35;
        v47 = v88[v36];
        if (!v47)
        {
          v48 = v36 + 1;
          if (v36 + 1 >= v89)
            return v35;
          v47 = v88[v48];
          if (!v47)
          {
            v48 = v36 + 2;
            if (v36 + 2 >= v89)
              return v35;
            v47 = v88[v48];
            if (!v47)
            {
              v48 = v36 + 3;
              if (v36 + 3 >= v89)
                return v35;
              v47 = v88[v48];
              if (!v47)
              {
                v48 = v36 + 4;
                if (v36 + 4 >= v89)
                  return v35;
                v47 = v88[v48];
                if (!v47)
                {
                  while (1)
                  {
                    v36 = v48 + 1;
                    if (__OFADD__(v48, 1))
                      break;
                    if (v36 >= v89)
                      return v35;
                    v47 = v88[v36];
                    ++v48;
                    if (v47)
                      goto LABEL_80;
                  }
LABEL_139:
                  __break(1u);
LABEL_140:
                  __break(1u);
                }
              }
            }
          }
          v36 = v48;
        }
LABEL_80:
        v37 = (v47 - 1) & v47;
        v46 = __clz(__rbit64(v47)) + (v36 << 6);
      }
      v49 = *(_QWORD *)(v3 + 56);
      v50 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v46);
      v52 = *v50;
      v51 = v50[1];
      outlined init with copy of AttributedString._AttributeValue(v49 + 72 * v46, (uint64_t)&v98);
      v95 = v100;
      v96 = v101;
      v97 = v102;
      v93 = v98;
      v94 = v99;
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      v53 = Hasher._finalize()();
      v54 = -1 << *(_BYTE *)(v35 + 32);
      v55 = v53 & ~v54;
      v56 = v55 >> 6;
      if (((-1 << v55) & ~*(_QWORD *)(v38 + 8 * (v55 >> 6))) != 0)
      {
        v39 = __clz(__rbit64((-1 << v55) & ~*(_QWORD *)(v38 + 8 * (v55 >> 6)))) | v55 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_65;
      }
      v57 = 0;
      v58 = (unint64_t)(63 - v54) >> 6;
      do
      {
        if (++v56 == v58 && (v57 & 1) != 0)
        {
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        v59 = v56 == v58;
        if (v56 == v58)
          v56 = 0;
        v57 |= v59;
        v60 = *(_QWORD *)(v38 + 8 * v56);
      }
      while (v60 == -1);
      v39 = __clz(__rbit64(~v60)) + (v56 << 6);
LABEL_65:
      *(_QWORD *)(v38 + ((v39 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v39;
      v40 = (_QWORD *)(*(_QWORD *)(v35 + 48) + 16 * v39);
      *v40 = v52;
      v40[1] = v51;
      v41 = *(_QWORD *)(v35 + 56) + 72 * v39;
      v42 = v96;
      *(_OWORD *)(v41 + 32) = v95;
      *(_OWORD *)(v41 + 48) = v42;
      *(_QWORD *)(v41 + 64) = v97;
      v43 = v94;
      *(_OWORD *)v41 = v93;
      *(_OWORD *)(v41 + 16) = v43;
      ++*(_QWORD *)(v35 + 16);
      v44 = v90-- == 1;
      v3 = v92;
      if (v44)
        return v35;
    }
  }
  swift_retain();
  return v3;
}

unint64_t specialized _NativeSet._delete(at:)(unint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v10 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9)
            goto LABEL_5;
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(v3 + 48);
          v13 = (_OWORD *)(v12 + 16 * v2);
          v14 = (_OWORD *)(v12 + 16 * v6);
          if (v2 != v6 || (v2 = v6, v13 >= v14 + 1))
          {
            *v13 = *v14;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v15 = *(_QWORD *)(v3 + 16);
  v16 = __OFSUB__(v15, 1);
  v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t specialized static AttributedString._AttributeValue.__equalAttributes(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  char v5;
  _BYTE v7[40];
  _QWORD v8[3];
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  outlined init with copy of (Hashable & Sendable)?(a1, (uint64_t)&v10, &demangling cache variable for type metadata for (Hashable & Sendable)?);
  outlined init with copy of (Hashable & Sendable)?(a2, (uint64_t)&v12, &demangling cache variable for type metadata for (Hashable & Sendable)?);
  if (v11)
  {
    if (v13)
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v10, (uint64_t)v8);
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v12, (uint64_t)v7);
      v3 = v9;
      v4 = __swift_project_boxed_opaque_existential_1(v8, v9);
      v5 = openEquatable #1 <A>(_:) in static AttributedString._AttributeValue.__equalAttributes(_:_:)((uint64_t)v4, (uint64_t)v7, v3);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v10);
      v5 = 0;
    }
  }
  else if (v13)
  {
    outlined destroy of Any?((uint64_t)&v12, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    v5 = 0;
  }
  else
  {
    v5 = 1;
  }
  return v5 & 1;
}

uint64_t specialized AttributedString._AttributeStorage.isEqual(to:comparing:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int v22;
  void (*v23)(char *, uint64_t, uint64_t, uint64_t);
  char *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  __int128 *v35;
  uint64_t v36;
  _BYTE v37[40];
  _QWORD v38[3];
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[40];
  _BYTE v46[40];
  _OWORD v47[4];
  uint64_t v48;
  _BYTE v49[72];
  _QWORD v50[9];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;

  v3 = *(_QWORD *)(a2 + 16);
  if (!v3)
    return 1;
  v35 = (__int128 *)&v43;
  swift_bridgeObjectRetain();
  v27 = a2;
  v28 = a1;
  v7 = (uint64_t *)(a2 + 40);
  v29 = a3;
  while (1)
  {
    v9 = *(v7 - 1);
    v10 = *v7;
    if (*(_QWORD *)(a3 + 16))
    {
      swift_bridgeObjectRetain_n();
      v11 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v10);
      if ((v12 & 1) != 0)
      {
        outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(a3 + 56) + 72 * v11, (uint64_t)&v61);
      }
      else
      {
        v65 = 0;
        v63 = 0u;
        v64 = 0u;
        v61 = 0u;
        v62 = 0u;
      }
      swift_bridgeObjectRelease();
      if (!*(_QWORD *)(a1 + 16))
      {
LABEL_11:
        v60 = 0;
        v58 = 0u;
        v59 = 0u;
        v56 = 0u;
        v57 = 0u;
        goto LABEL_18;
      }
    }
    else
    {
      v65 = 0;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      swift_bridgeObjectRetain();
      if (!*(_QWORD *)(a1 + 16))
        goto LABEL_11;
    }
    swift_bridgeObjectRetain();
    v13 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v10);
    if ((v14 & 1) != 0)
    {
      outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(a1 + 56) + 72 * v13, (uint64_t)&v56);
    }
    else
    {
      v60 = 0;
      v58 = 0u;
      v59 = 0u;
      v56 = 0u;
      v57 = 0u;
    }
    swift_bridgeObjectRelease();
LABEL_18:
    swift_bridgeObjectRelease();
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v61, (uint64_t)v50, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v56, (uint64_t)&v51, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (v50[3])
      break;
    outlined destroy of Any?((uint64_t)&v56, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined destroy of Any?((uint64_t)&v61, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (*((_QWORD *)&v52 + 1))
      goto LABEL_34;
    outlined destroy of Any?((uint64_t)v50, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_6:
    v7 += 2;
    if (!--v3)
    {
      v25 = 1;
      goto LABEL_36;
    }
  }
  outlined init with copy of (Hashable & Sendable)?((uint64_t)v50, (uint64_t)v49, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
  if (*((_QWORD *)&v52 + 1))
  {
    v47[2] = v53;
    v47[3] = v54;
    v48 = v55;
    v47[0] = v51;
    v47[1] = v52;
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v49, (uint64_t)v46);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v47, (uint64_t)v45);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)v46, (uint64_t)&v41, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)v45, (uint64_t)v35, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    if (v42)
    {
      if (v44)
      {
        outlined init with take of any PredicateExpression<Self.Output == B1>(&v41, (uint64_t)v38);
        outlined init with take of any PredicateExpression<Self.Output == B1>(v35, (uint64_t)v37);
        v15 = v39;
        v32 = v40;
        v30 = __swift_project_boxed_opaque_existential_1(v38, v39);
        v34 = &v27;
        v16 = *(_QWORD *)(v15 - 8);
        MEMORY[0x1E0C80A78](v30);
        v31 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v37, (uint64_t)&v36);
        v18 = type metadata accessor for Optional();
        v33 = &v27;
        v19 = *(_QWORD *)(v18 - 8);
        MEMORY[0x1E0C80A78](v18);
        v21 = (char *)&v27 - v20;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
        v22 = swift_dynamicCast();
        v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
        if (v22)
        {
          v23(v21, 0, 1, v15);
          v24 = v31;
          (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v31, v21, v15);
          v8 = dispatch thunk of static Equatable.== infix(_:_:)();
          (*(void (**)(char *, uint64_t))(v16 + 8))(v24, v15);
        }
        else
        {
          v23(v21, 1, 1, v15);
          (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
          v8 = 0;
        }
        a1 = v28;
        a3 = v29;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
LABEL_5:
        outlined destroy of Any?((uint64_t)v45, &demangling cache variable for type metadata for (Hashable & Sendable)?);
        outlined destroy of Any?((uint64_t)v46, &demangling cache variable for type metadata for (Hashable & Sendable)?);
        outlined destroy of AttributedString._AttributeValue((uint64_t)v47);
        outlined destroy of Any?((uint64_t)&v56, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined destroy of Any?((uint64_t)&v61, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined destroy of AttributedString._AttributeValue((uint64_t)v49);
        outlined destroy of Any?((uint64_t)v50, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        if ((v8 & 1) == 0)
          goto LABEL_35;
        goto LABEL_6;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v41);
    }
    else
    {
      if (!v44)
      {
        v8 = 1;
        goto LABEL_5;
      }
      outlined destroy of Any?((uint64_t)v35, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    }
    v8 = 0;
    goto LABEL_5;
  }
  outlined destroy of Any?((uint64_t)&v56, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
  outlined destroy of Any?((uint64_t)&v61, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
  outlined destroy of AttributedString._AttributeValue((uint64_t)v49);
LABEL_34:
  outlined destroy of Any?((uint64_t)v50, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
LABEL_35:
  v25 = 0;
LABEL_36:
  swift_bridgeObjectRelease();
  return v25;
}

uint64_t specialized AttributedString._AttributeStorage.matches(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t result;
  char v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int v33;
  void (*v34)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  int64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  int64_t v45;
  __int128 *v46;
  unint64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE v51[40];
  _QWORD v52[3];
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE v59[40];
  _BYTE v60[40];
  _OWORD v61[4];
  uint64_t v62;
  _BYTE v63[72];
  __int128 v64;
  _QWORD v65[6];
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE v69[72];
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  _OWORD v75[4];
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;

  v3 = a1;
  v4 = *(_QWORD *)(a1 + 64);
  v40 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & v4;
  v8 = v65;
  v49 = (uint64_t)&v66 + 8;
  v45 = (unint64_t)(v5 + 63) >> 6;
  v46 = (__int128 *)&v57;
  v36 = v45 - 1;
  result = swift_bridgeObjectRetain();
  v48 = 0;
  v38 = a2;
  v39 = result;
  v37 = v65;
  if (!v7)
    goto LABEL_11;
LABEL_9:
  while (2)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v48 << 6);
LABEL_10:
    v13 = *(_QWORD *)(v3 + 56);
    v14 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v12);
    v15 = v14[1];
    *(_QWORD *)&v64 = *v14;
    *((_QWORD *)&v64 + 1) = v15;
    outlined init with copy of AttributedString._AttributeValue(v13 + 72 * v12, (uint64_t)v8);
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with take of LocalePreferences?((uint64_t)&v64, (uint64_t)&v77, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue)?);
      v19 = v78;
      if (!v78)
        goto LABEL_52;
      v20 = v77;
      v75[2] = v81;
      v75[3] = v82;
      v76 = v83;
      v75[0] = v79;
      v75[1] = v80;
      if (*(_QWORD *)(a2 + 16))
      {
        swift_bridgeObjectRetain();
        v21 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v19);
        if ((v22 & 1) != 0)
        {
          outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(a2 + 56) + 72 * v21, (uint64_t)&v70);
        }
        else
        {
          v74 = 0;
          v72 = 0u;
          v73 = 0u;
          v70 = 0u;
          v71 = 0u;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        v74 = 0;
        v72 = 0u;
        v73 = 0u;
        v70 = 0u;
        v71 = 0u;
      }
      swift_bridgeObjectRelease();
      outlined init with copy of AttributedString._AttributeValue((uint64_t)v75, (uint64_t)v69);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v70, (uint64_t)&v64, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v69, v49, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (v65[1])
        break;
      outlined destroy of Any?((uint64_t)v69, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of Any?((uint64_t)&v70, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v75);
      if (v68)
        goto LABEL_51;
      result = outlined destroy of Any?((uint64_t)&v64, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (v7)
        goto LABEL_9;
LABEL_11:
      v16 = v48 + 1;
      if (__OFADD__(v48, 1))
      {
        __break(1u);
        goto LABEL_54;
      }
      if (v16 < v45)
      {
        v17 = *(_QWORD *)(v40 + 8 * v16);
        if (v17)
          goto LABEL_14;
        v18 = v48 + 2;
        ++v48;
        if (v16 + 1 < v45)
        {
          v17 = *(_QWORD *)(v40 + 8 * v18);
          if (v17)
            goto LABEL_17;
          v48 = v16 + 1;
          if (v16 + 2 < v45)
          {
            v17 = *(_QWORD *)(v40 + 8 * (v16 + 2));
            if (v17)
            {
              v16 += 2;
              goto LABEL_14;
            }
            v18 = v16 + 3;
            v48 = v16 + 2;
            if (v16 + 3 < v45)
            {
              v17 = *(_QWORD *)(v40 + 8 * v18);
              if (v17)
              {
LABEL_17:
                v16 = v18;
LABEL_14:
                v7 = (v17 - 1) & v17;
                v12 = __clz(__rbit64(v17)) + (v16 << 6);
                v48 = v16;
                goto LABEL_10;
              }
              while (1)
              {
                v16 = v18 + 1;
                if (__OFADD__(v18, 1))
                  break;
                if (v16 >= v45)
                {
                  v48 = v36;
                  goto LABEL_28;
                }
                v17 = *(_QWORD *)(v40 + 8 * v16);
                ++v18;
                if (v17)
                  goto LABEL_14;
              }
LABEL_54:
              __break(1u);
              return result;
            }
          }
        }
      }
LABEL_28:
      v7 = 0;
      v67 = 0;
      v66 = 0u;
      memset(v65, 0, sizeof(v65));
      v64 = 0u;
    }
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v64, (uint64_t)v63, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (v68)
    {
      v23 = *(_OWORD *)(v49 + 48);
      v61[2] = *(_OWORD *)(v49 + 32);
      v61[3] = v23;
      v62 = *(_QWORD *)(v49 + 64);
      v24 = *(_OWORD *)(v49 + 16);
      v61[0] = *(_OWORD *)v49;
      v61[1] = v24;
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v63, (uint64_t)v60);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v61, (uint64_t)v59);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v60, (uint64_t)&v55, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v59, (uint64_t)v46, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      v47 = v7;
      if (v56)
      {
        if (v58)
        {
          outlined init with take of any PredicateExpression<Self.Output == B1>(&v55, (uint64_t)v52);
          outlined init with take of any PredicateExpression<Self.Output == B1>(v46, (uint64_t)v51);
          v25 = v53;
          v42 = v54;
          v41 = __swift_project_boxed_opaque_existential_1(v52, v53);
          v44 = &v35;
          v26 = *(_QWORD *)(v25 - 8);
          MEMORY[0x1E0C80A78](v41);
          v28 = (char *)&v35 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v51, (uint64_t)&v50);
          v29 = type metadata accessor for Optional();
          v43 = &v35;
          v30 = *(_QWORD *)(v29 - 8);
          MEMORY[0x1E0C80A78](v29);
          v32 = (char *)&v35 - v31;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
          v33 = swift_dynamicCast();
          v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56);
          if (v33)
          {
            v34(v32, 0, 1, v25);
            (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v28, v32, v25);
            v10 = dispatch thunk of static Equatable.== infix(_:_:)();
            (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v25);
          }
          else
          {
            v34(v32, 1, 1, v25);
            (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v29);
            v10 = 0;
          }
          a2 = v38;
          v3 = v39;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
          v8 = v37;
          goto LABEL_7;
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v55);
      }
      else
      {
        if (!v58)
        {
          v10 = 1;
          goto LABEL_7;
        }
        outlined destroy of Any?((uint64_t)v46, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      }
      v10 = 0;
LABEL_7:
      outlined destroy of Any?((uint64_t)v59, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of Any?((uint64_t)v60, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v61);
      outlined destroy of Any?((uint64_t)v69, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of Any?((uint64_t)&v70, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v75);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v63);
      result = outlined destroy of Any?((uint64_t)&v64, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      v7 = v47;
      if ((v10 & 1) == 0)
        goto LABEL_52;
      if (v47)
        continue;
      goto LABEL_11;
    }
    break;
  }
  outlined destroy of Any?((uint64_t)v69, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
  outlined destroy of Any?((uint64_t)&v70, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
  outlined destroy of AttributedString._AttributeValue((uint64_t)v75);
  outlined destroy of AttributedString._AttributeValue((uint64_t)v63);
LABEL_51:
  outlined destroy of Any?((uint64_t)&v64, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
LABEL_52:
  swift_release();
  return v19 == 0;
}

Swift::String __swiftcall Date.ISO8601FormatStyle.format(_:)(Foundation::Date a1)
{
  uint64_t *v1;
  __int128 *v2;
  uint64_t v3;
  __int128 v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t (*v15)(uint64_t *, uint64_t, uint64_t);
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  Swift::String result;
  uint64_t v22;
  uint64_t v23[2];
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[24];
  _QWORD v28[37];

  v28[36] = *MEMORY[0x1E0C80C00];
  v3 = *v1;
  v4 = v2[1];
  v26 = *v2;
  *(_OWORD *)v27 = v4;
  *(_QWORD *)&v27[16] = *((_QWORD *)v2 + 4);
  v5 = DWORD2(v26);
  if (*((_QWORD *)&v26 + 1))
  {
    if ((BYTE8(v26) & 5) != 1)
    {
      v6 = 0;
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 59;
  }
  v6 = 3;
LABEL_6:
  v7 = v6 & 0xFFFFFFFFFFFFFFFBLL | (4 * (((unint64_t)(v5 & 2) >> 1) & 1));
  if ((v5 & 4) == 0)
  {
    if ((v5 & 2) != 0)
      v8 = v7 | 8;
    else
      v8 = v7 | 0x40000;
    if ((v5 & 8) != 0)
      v7 = v8;
    if ((v5 & 0x10) == 0)
      goto LABEL_21;
LABEL_17:
    v10 = 112;
    if ((~v7 & 0x70) == 0)
      v10 = 0;
    v7 |= v10;
    if ((BYTE1(v26) & ((v7 & 0x2000) == 0)) != 0)
      v7 |= 0x2000uLL;
    goto LABEL_21;
  }
  v9 = 6144;
  if ((~v7 & 0x1800) == 0)
    v9 = 0;
  v7 |= (16 * v5) & 0x80 | v9;
  if ((v5 & 0x10) != 0)
    goto LABEL_17;
LABEL_21:
  v23[0] = v7;
  v24 = v3;
  v25 = *(_OWORD *)(*(_QWORD *)v27 + 96);
  swift_unknownObjectRetain();
  _CalendarGregorian.dateComponents(_:from:in:)(v23, (double *)&v24, (uint64_t *)&v25, v28);
  v11 = swift_unknownObjectRelease();
  if ((v5 & 0x20) != 0)
  {
    v25 = *(_OWORD *)&v27[8];
    v13 = *(_QWORD *)&v27[16];
    ObjectType = swift_getObjectType();
    v23[0] = v3;
    v15 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v13 + 40);
    outlined retain of Locale((uint64_t)&v25);
    v12 = v15(v23, ObjectType, v13);
    v11 = outlined release of Locale((uint64_t)&v25);
  }
  else
  {
    v12 = 0;
  }
  LOBYTE(v24) = 0;
  MEMORY[0x1E0C80A78](v11);
  closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)((uint64_t)&v22, 129, (uint64_t)&v26, (uint64_t)v28, &v24, v12, v16, v23);
  v17 = v23[0];
  v18 = v23[1];
  outlined release of DateComponents((uint64_t)v28);
  v19 = v17;
  v20 = (void *)v18;
  result._object = v20;
  result._countAndFlagsBits = v19;
  return result;
}

uint64_t specialized Substring.withUTF8<A>(_:)@<X0>(_QWORD *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD v18[2];

  v10 = a1[3];
  if ((v10 & 0x1000000000000000) != 0)
  {
    Substring._slowMakeContiguousUTF8()();
    v10 = a1[3];
  }
  v12 = a1[1];
  v11 = a1[2];
  v13 = *a1 >> 16;
  v14 = v12 >> 16;
  if ((v10 & 0x2000000000000000) != 0)
  {
    v18[0] = v11;
    v18[1] = v10 & 0xFFFFFFFFFFFFFFLL;
    v16 = (char *)v18 + v13;
  }
  else
  {
    if ((v11 & 0x1000000000000000) != 0)
    {
      v15 = (v10 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else
    {
      v15 = _StringObject.sharedUTF8.getter();
      if (!v15)
      {
        v16 = 0;
        goto LABEL_8;
      }
    }
    v16 = (char *)(v15 + v13);
  }
LABEL_8:
  swift_bridgeObjectRetain();
  closure #1 in Date.ISO8601FormatStyle.parse(_:in:)(v16, v14 - v13, a2, a3, a4, a5);
  swift_bridgeObjectRelease();
  outlined release of Date.ISO8601FormatStyle((uint64_t)a2);
  return swift_bridgeObjectRelease();
}

uint64_t specialized closure #1 in numericStringRepresentationForBinaryInteger<A>(words:isSigned:)(_QWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned int i;
  double v8;
  char v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t isStackAllocationSafe;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  char *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  int64_t v69;
  uint64_t v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  if (!a1 || !a2)
    goto LABEL_84;
  if (a2 < 0)
  {
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
  v5 = v4;
  v6 = a1;
  *a1 = a3;
  if ((a4 & 1) != 0 && (*a1 & 0x8000000000000000) != 0)
    goto LABEL_40;
  for (i = 0; ; i = 1)
  {
    v8 = COERCE_DOUBLE(specialized Double.init<A>(exactly:)(64));
    if ((v9 & 1) != 0)
      goto LABEL_86;
    v10 = v8 * 0.301029996;
    if ((~COERCE__INT64(v8 * 0.301029996) & 0x7FF0000000000000) == 0)
      goto LABEL_72;
    if (v10 <= -9.22337204e18)
      goto LABEL_73;
    if (v10 >= 9.22337204e18)
      goto LABEL_74;
    v11 = (uint64_t)v10;
    v12 = (uint64_t)v10 + 1;
    if (__OFADD__((uint64_t)v10, 1))
      goto LABEL_75;
    v13 = v12 + i;
    if (__OFADD__(v12, i))
      goto LABEL_76;
    if (v13 < 0)
      goto LABEL_79;
    v67 = v5;
    v68 = v6;
    v65 = i;
    v66 = v12 + i;
    if (v13 < 1025)
    {
      MEMORY[0x1E0C80A78](*(_QWORD *)&v8);
      v16 = (char *)&v62 - v17;
      if (!v13)
      {
        v63 = v15;
        goto LABEL_42;
      }
      if (v13 >= 1)
      {
LABEL_19:
        v63 = v15;
        memset(v16, 48, v13);
LABEL_42:
        v37 = v6 - 1;
        v64 = v6 - 2;
        v38 = v11 + i + 20;
        v39 = 1;
        v40 = v13;
        do
        {
          v69 = v40;
          v70 = v38;
          v41 = v39;
          do
          {
            if (v39 < v41)
            {
              __break(1u);
LABEL_62:
              __break(1u);
              goto LABEL_63;
            }
            v42 = v41 - 1;
            v43 = v41;
            v44 = v37[v41];
            v45 = __udivti3();
            v46 = v44 - 0x8AC7230489E80000 * v45;
            v37[v43] = v45;
            v41 = v42;
          }
          while (v42);
          if (v68[v39 - 1])
          {
            v47 = v39;
            v49 = v69;
            v48 = v70;
          }
          else
          {
            v49 = v69;
            v48 = v70;
            if (v39 == 1)
            {
LABEL_52:
              v47 = 0;
            }
            else
            {
              v50 = v39;
              while (!v64[v50])
              {
                if (--v50 == 1)
                  goto LABEL_52;
              }
              v47 = v50 - 1;
            }
          }
          v51 = v48;
          v41 = v49;
          if (v39 < v47)
            goto LABEL_77;
          do
          {
            if (v51 - 19 < 1)
              goto LABEL_62;
            --v41;
            v16[v51-- - 20] = (v46 % 0xA) | 0x30;
            v34 = v46 > 9;
            v46 /= 0xAuLL;
          }
          while (v34);
          v40 = v49 - 19;
          v38 = v48 - 19;
          v39 = v47;
        }
        while (v47);
        if (v65)
        {
          v52 = v66;
          if (v41)
          {
            v53 = &v16[v41--];
            *(v53 - 1) = 45;
            goto LABEL_64;
          }
LABEL_82:
          __break(1u);
LABEL_83:
          __break(1u);
LABEL_84:
          __break(1u);
LABEL_85:
          __break(1u);
LABEL_86:
          __break(1u);
        }
LABEL_63:
        v52 = v66;
LABEL_64:
        if (v52 >= v41)
        {
          MEMORY[0x1E0C80A78](v52 - v41);
          v60 = v55;
          v61 = v54;
          return String.init(unsafeUninitializedCapacity:initializingUTF8With:)();
        }
        goto LABEL_81;
      }
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
      goto LABEL_82;
    }
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((_DWORD)isStackAllocationSafe)
    {
      MEMORY[0x1E0C80A78](isStackAllocationSafe);
      v16 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
      goto LABEL_19;
    }
    v18 = (char *)swift_slowAlloc();
    memset(v18, 48, v13);
    v19 = v13;
    v20 = v6 - 1;
    v64 = v6 - 2;
    v21 = v11 + i + 20;
    v22 = 1;
    v23 = v19;
LABEL_21:
    v69 = v23;
    v70 = v21;
    v24 = v22;
LABEL_22:
    if (v22 >= v24)
      break;
    __break(1u);
LABEL_40:
    *v6 = -*v6;
  }
  v5 = v24 - 1;
  v25 = v24;
  v6 = (_QWORD *)v20[v24];
  v26 = __udivti3();
  v27 = (unint64_t)&v6[0xEA71B9F6EC30000 * v26];
  v20[v25] = v26;
  v24 = v5;
  if (v5)
    goto LABEL_22;
  if (v68[v22 - 1])
  {
    v28 = v22;
    v30 = v69;
    v29 = v70;
  }
  else
  {
    v30 = v69;
    v29 = v70;
    if (v22 == 1)
    {
LABEL_30:
      v28 = 0;
    }
    else
    {
      v31 = v22;
      while (!v64[v31])
      {
        if (--v31 == 1)
          goto LABEL_30;
      }
      v28 = v31 - 1;
    }
  }
  v32 = v29;
  v33 = v30;
  if (v22 < v28)
    goto LABEL_80;
  while (2)
  {
    if (v32 - 19 < 1)
    {
      __break(1u);
      goto LABEL_67;
    }
    --v33;
    v18[v32-- - 20] = (v27 % 0xA) | 0x30;
    v34 = v27 > 9;
    v27 /= 0xAuLL;
    if (v34)
      continue;
    break;
  }
  v23 = v30 - 19;
  v21 = v29 - 19;
  v22 = v28;
  if (v28)
    goto LABEL_21;
  if (!v65)
  {
LABEL_67:
    v35 = v66;
    goto LABEL_68;
  }
  v35 = v66;
  if (!v33)
    goto LABEL_85;
  v36 = &v18[v33--];
  *(v36 - 1) = 45;
LABEL_68:
  if (v35 < v33)
    goto LABEL_83;
  MEMORY[0x1E0C80A78](v35 - v33);
  v60 = v58;
  v61 = v57;
  v56 = String.init(unsafeUninitializedCapacity:initializingUTF8With:)();
  MEMORY[0x186DA9E78](v18, -1, -1);
  return v56;
}

uint64_t Date.ISO8601Format(_:)()
{
  Foundation::Date *v0;

  return Date.ISO8601FormatStyle.format(_:)(*(Foundation::Date *)&v0->_time)._countAndFlagsBits;
}

uint64_t Date.ISO8601FormatStyle.TimeZoneSeparator.init(rawValue:)@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of Date.ISO8601FormatStyle.TimeZoneSeparator.init(rawValue:);
  return Date.ISO8601FormatStyle.TimeZoneSeparator.init(rawValue:)(a1, v2, a2);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.ISO8601FormatStyle.TimeZoneSeparator(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.ISO8601FormatStyle.TimeZoneSeparator@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  return Date.ISO8601FormatStyle.TimeZoneSeparator.init(rawValue:)(*a1, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.ISO8601FormatStyle.TimeZoneSeparator()
{
  lazy protocol witness table accessor for type Date.ISO8601FormatStyle.TimeZoneSeparator and conformance Date.ISO8601FormatStyle.TimeZoneSeparator();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.ISO8601FormatStyle.TimeZoneSeparator()
{
  lazy protocol witness table accessor for type Date.ISO8601FormatStyle.TimeZoneSeparator and conformance Date.ISO8601FormatStyle.TimeZoneSeparator();
  return RawRepresentable<>.encode(to:)();
}

uint64_t Date.ISO8601FormatStyle.DateSeparator.init(rawValue:)@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of Date.ISO8601FormatStyle.DateSeparator.init(rawValue:);
  return Date.ISO8601FormatStyle.TimeZoneSeparator.init(rawValue:)(a1, v2, a2);
}

uint64_t Date.ISO8601FormatStyle.DateSeparator.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0;
  else
    return 45;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.ISO8601FormatStyle.DateSeparator(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.ISO8601FormatStyle.DateSeparator()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.ISO8601FormatStyle.DateSeparator()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.ISO8601FormatStyle.DateSeparator()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.ISO8601FormatStyle.DateSeparator@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  return Date.ISO8601FormatStyle.DateSeparator.init(rawValue:)(*a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Date.ISO8601FormatStyle.DateSeparator(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 45;
  if (*v1)
    v2 = 0;
  v3 = 0xE100000000000000;
  if (*v1)
    v3 = 0xE000000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.ISO8601FormatStyle.DateSeparator()
{
  lazy protocol witness table accessor for type Date.ISO8601FormatStyle.DateSeparator and conformance Date.ISO8601FormatStyle.DateSeparator();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.ISO8601FormatStyle.DateSeparator()
{
  lazy protocol witness table accessor for type Date.ISO8601FormatStyle.DateSeparator and conformance Date.ISO8601FormatStyle.DateSeparator();
  return RawRepresentable<>.encode(to:)();
}

uint64_t Date.ISO8601FormatStyle.TimeSeparator.init(rawValue:)@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of Date.ISO8601FormatStyle.TimeSeparator.init(rawValue:);
  return Date.ISO8601FormatStyle.TimeZoneSeparator.init(rawValue:)(a1, v2, a2);
}

uint64_t Date.ISO8601FormatStyle.TimeSeparator.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0;
  else
    return 58;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.ISO8601FormatStyle.TimeZoneSeparator()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.ISO8601FormatStyle.TimeZoneSeparator()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.ISO8601FormatStyle.TimeZoneSeparator()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.ISO8601FormatStyle.TimeSeparator@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  return Date.ISO8601FormatStyle.TimeSeparator.init(rawValue:)(*a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Date.ISO8601FormatStyle.TimeSeparator(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 58;
  if (*v1)
    v2 = 0;
  v3 = 0xE100000000000000;
  if (*v1)
    v3 = 0xE000000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.ISO8601FormatStyle.TimeSeparator()
{
  lazy protocol witness table accessor for type Date.ISO8601FormatStyle.TimeSeparator and conformance Date.ISO8601FormatStyle.TimeSeparator();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.ISO8601FormatStyle.TimeSeparator()
{
  lazy protocol witness table accessor for type Date.ISO8601FormatStyle.TimeSeparator and conformance Date.ISO8601FormatStyle.TimeSeparator();
  return RawRepresentable<>.encode(to:)();
}

uint64_t Date.ISO8601FormatStyle.DateTimeSeparator.init(rawValue:)@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of Date.ISO8601FormatStyle.DateTimeSeparator.init(rawValue:);
  return Date.ISO8601FormatStyle.TimeZoneSeparator.init(rawValue:)(a1, v2, a2);
}

uint64_t Date.ISO8601FormatStyle.TimeZoneSeparator.init(rawValue:)@<X0>(Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X2>, char *a3@<X8>)
{
  void *object;
  Swift::String v4;
  Swift::Int v7;
  uint64_t result;
  char v9;

  object = string._object;
  v4._countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  v7 = _findStringSwitchCase(cases:string:)(cases, v4);
  result = swift_bridgeObjectRelease();
  if (v7 == 1)
    v9 = 1;
  else
    v9 = 2;
  if (!v7)
    v9 = 0;
  *a3 = v9;
  return result;
}

uint64_t Date.ISO8601FormatStyle.DateTimeSeparator.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 2577447;
  else
    return 32;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.ISO8601FormatStyle.DateTimeSeparator(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.ISO8601FormatStyle.DateTimeSeparator()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.ISO8601FormatStyle.DateTimeSeparator()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.ISO8601FormatStyle.DateTimeSeparator()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.ISO8601FormatStyle.DateTimeSeparator@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  return Date.ISO8601FormatStyle.DateTimeSeparator.init(rawValue:)(*a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Date.ISO8601FormatStyle.DateTimeSeparator(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 32;
  if (*v1)
    v2 = 2577447;
  v3 = 0xE100000000000000;
  if (*v1)
    v3 = 0xE300000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.ISO8601FormatStyle.DateTimeSeparator()
{
  lazy protocol witness table accessor for type Date.ISO8601FormatStyle.DateTimeSeparator and conformance Date.ISO8601FormatStyle.DateTimeSeparator();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.ISO8601FormatStyle.DateTimeSeparator()
{
  lazy protocol witness table accessor for type Date.ISO8601FormatStyle.DateTimeSeparator and conformance Date.ISO8601FormatStyle.DateTimeSeparator();
  return RawRepresentable<>.encode(to:)();
}

uint64_t Date.ISO8601FormatStyle.Fields.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t Date.ISO8601FormatStyle.Fields.rawValue.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*Date.ISO8601FormatStyle.Fields.rawValue.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.ISO8601FormatStyle.Fields.init(rawValue:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static Date.ISO8601FormatStyle.Fields.year.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static Date.ISO8601FormatStyle.Fields.month.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static Date.ISO8601FormatStyle.Fields.weekOfYear.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

void static Date.ISO8601FormatStyle.Fields.day.getter(_QWORD *a1@<X8>)
{
  *a1 = 8;
}

void static Date.ISO8601FormatStyle.Fields.time.getter(_QWORD *a1@<X8>)
{
  *a1 = 16;
}

void static Date.ISO8601FormatStyle.Fields.timeZone.getter(_QWORD *a1@<X8>)
{
  *a1 = 32;
}

uint64_t Date.ISO8601FormatStyle.Fields.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD v7[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v7, v7[3]);
    v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    *a2 = v5;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t Date.ISO8601FormatStyle.Fields.encode(to:)(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.ISO8601FormatStyle.Fields@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD v7[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v7, v7[3]);
    v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    *a2 = v5;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void Date.ISO8601FormatStyle.timeSeparator.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t Date.ISO8601FormatStyle.includingFractionalSeconds.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1);
}

void Date.ISO8601FormatStyle.timeZoneSeparator.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 2);
}

void Date.ISO8601FormatStyle.dateSeparator.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 3);
}

void Date.ISO8601FormatStyle.dateTimeSeparator.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 4);
}

void Date.ISO8601FormatStyle.formatFields.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    *a1 = v2;
  else
    *a1 = 59;
}

uint64_t Date.ISO8601FormatStyle.CodingKeys.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_181E0CCB8 + 4 * byte_182164890[a1]))(0xD000000000000011, 0x8000000182304390);
}

uint64_t sub_181E0CCB8()
{
  return 0x656E6F5A656D6974;
}

uint64_t sub_181E0CCD0()
{
  return 0x73646C656966;
}

uint64_t sub_181E0CD08()
{
  return 0x6170655365746164;
}

uint64_t Date.ISO8601FormatStyle.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_181E0CD70 + 4 * byte_182164897[a1]))(0xD000000000000011, 0x8000000182304390);
}

uint64_t sub_181E0CD70()
{
  return 0x656E6F5A656D6974;
}

uint64_t sub_181E0CD88()
{
  return 0x73646C656966;
}

uint64_t sub_181E0CDC0()
{
  return 0x6170655365746164;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance Date.ISO8601FormatStyle.CodingKeys(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

void protocol witness for Hashable.hashValue.getter in conformance Date.ISO8601FormatStyle.CodingKeys()
{
  char *v0;

  specialized RawRepresentable<>._rawHashValue(seed:)(0, *v0);
}

void protocol witness for Hashable.hash(into:) in conformance Date.ISO8601FormatStyle.CodingKeys(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance Date.ISO8601FormatStyle.CodingKeys(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.ISO8601FormatStyle.CodingKeys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized Date.ISO8601FormatStyle.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Date.ISO8601FormatStyle.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = Date.ISO8601FormatStyle.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Date.ISO8601FormatStyle.CodingKeys()
{
  unsigned __int8 *v0;

  return Date.ISO8601FormatStyle.CodingKeys.stringValue.getter(*v0);
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance Date.ISO8601FormatStyle.CodingKeys@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized Date.ISO8601FormatStyle.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.ISO8601FormatStyle.CodingKeys()
{
  lazy protocol witness table accessor for type Date.ISO8601FormatStyle.CodingKeys and conformance Date.ISO8601FormatStyle.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.ISO8601FormatStyle.CodingKeys()
{
  lazy protocol witness table accessor for type Date.ISO8601FormatStyle.CodingKeys and conformance Date.ISO8601FormatStyle.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void Date.ISO8601FormatStyle.init(from:)(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  unint64_t v9;
  os_unfair_lock_s *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  char v19;
  _BYTE *v20;
  uint64_t inited;
  _BYTE *v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  unsigned __int128 v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;

  v22 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.ISO8601FormatStyle.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&inited - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for cache != -1)
    swift_once();
  v8 = &inited;
  v9 = static TimeZoneCache.cache + 16;
  v10 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v10);
  closure #1 in TimeZoneCache.offsetFixed(_:)(v9, 0, &v26);
  if (!v2)
  {
    os_unfair_lock_unlock(v10);
    swift_release_n();
    v11 = v26;
    if ((_QWORD)v26)
    {
      __swift_project_boxed_opaque_existential_1(a1, a1[3]);
      lazy protocol witness table accessor for type Date.ISO8601FormatStyle.CodingKeys and conformance Date.ISO8601FormatStyle.CodingKeys();
      dispatch thunk of Decoder.container<A>(keyedBy:)();
      LOBYTE(v25) = 0;
      lazy protocol witness table accessor for type Date.ISO8601FormatStyle.TimeZoneSeparator and conformance Date.ISO8601FormatStyle.TimeZoneSeparator();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v31 = v26;
      LOBYTE(v25) = 1;
      lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      swift_unknownObjectRelease();
      v8 = (uint64_t *)*((_QWORD *)&v26 + 1);
      v11 = v26;
      LOBYTE(v25) = 2;
      lazy protocol witness table accessor for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v10 = (os_unfair_lock_s *)v26;
      LOBYTE(v25) = 3;
      lazy protocol witness table accessor for type Date.ISO8601FormatStyle.DateTimeSeparator and conformance Date.ISO8601FormatStyle.DateTimeSeparator();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v29 = v26;
      LOBYTE(v26) = 4;
      v32 = KeyedDecodingContainer.decode(_:forKey:)() & 1;
      LOBYTE(v25) = 5;
      lazy protocol witness table accessor for type Date.ISO8601FormatStyle.DateSeparator and conformance Date.ISO8601FormatStyle.DateSeparator();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v30 = v26;
      LOBYTE(v25) = 6;
      lazy protocol witness table accessor for type Date.ISO8601FormatStyle.TimeSeparator and conformance Date.ISO8601FormatStyle.TimeSeparator();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v27 = v26;
      v28 = 0;
      v26 = __PAIR128__((unint64_t)v8, v11);
      v12 = one-time initialization token for cache;
      swift_unknownObjectRetain();
      if (v12 == -1)
      {
LABEL_6:
        type metadata accessor for _LocaleUnlocalized();
        swift_retain();
        inited = swift_initStaticObject();
        swift_release();
        v13 = lazy protocol witness table accessor for type _LocaleUnlocalized and conformance _LocaleUnlocalized();
        *(_QWORD *)&v25 = inited;
        *((_QWORD *)&v25 + 1) = v13;
        v23 = 0;
        v24 = 1;
        type metadata accessor for _CalendarGregorian();
        swift_allocObject();
        _CalendarGregorian.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)((uint64_t)&v28, (uint64_t *)&v26, &v25, 2, 0, 4, 0, (uint64_t)&v23);
        v15 = v14;
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        v16 = v32;
        v17 = v31;
        v18 = v30;
        v19 = v29;
        v20 = v22;
        *v22 = v27;
        v20[1] = v16;
        v20[2] = v17;
        v20[3] = v18;
        v20[4] = v19;
        *((_QWORD *)v20 + 1) = v10;
        *((_QWORD *)v20 + 2) = v15;
        *((_QWORD *)v20 + 3) = v11;
        *((_QWORD *)v20 + 4) = v8;
        swift_retain();
        swift_unknownObjectRetain();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
        swift_unknownObjectRelease();
        swift_release();
        return;
      }
    }
    else
    {
      __break(1u);
    }
    swift_once();
    goto LABEL_6;
  }
  os_unfair_lock_unlock(v10);
  __break(1u);
}

uint64_t Date.ISO8601FormatStyle.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unsigned __int8 v8;
  int v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  int v18;
  __int128 v19;
  int v20;
  char v21;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.ISO8601FormatStyle.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  HIDWORD(v14) = *v1;
  v20 = v1[1];
  v8 = v1[2];
  v9 = v1[3];
  v17 = v1[4];
  v18 = v9;
  v15 = *((_QWORD *)v1 + 1);
  v16 = *(_OWORD *)(v1 + 24);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.ISO8601FormatStyle.CodingKeys and conformance Date.ISO8601FormatStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v19) = v8;
  v21 = 0;
  lazy protocol witness table accessor for type Date.ISO8601FormatStyle.TimeZoneSeparator and conformance Date.ISO8601FormatStyle.TimeZoneSeparator();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v10 = v15;
    v11 = v17;
    v12 = v18;
    v19 = v16;
    v21 = 1;
    lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(_QWORD *)&v19 = v10;
    v21 = 2;
    lazy protocol witness table accessor for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v19) = v11;
    v21 = 3;
    lazy protocol witness table accessor for type Date.ISO8601FormatStyle.DateTimeSeparator and conformance Date.ISO8601FormatStyle.DateTimeSeparator();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v19) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v19) = v12;
    v21 = 5;
    lazy protocol witness table accessor for type Date.ISO8601FormatStyle.DateSeparator and conformance Date.ISO8601FormatStyle.DateSeparator();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v19) = BYTE4(v14);
    v21 = 6;
    lazy protocol witness table accessor for type Date.ISO8601FormatStyle.TimeSeparator and conformance Date.ISO8601FormatStyle.TimeSeparator();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t Date.ISO8601FormatStyle.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  Swift::UInt8 v3;
  Swift::UInt v4;
  uint64_t v5;
  uint64_t ObjectType;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v3 = *(_BYTE *)(v1 + 1);
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 32);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  ObjectType = swift_getObjectType();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 112);
  swift_unknownObjectRetain();
  v7(a1, ObjectType, v5);
  swift_unknownObjectRelease();
  Hasher._combine(_:)(v4);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v3);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t Date.ISO8601FormatStyle.timeZone.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_OWORD *)(v1 + 24);
  return swift_unknownObjectRetain();
}

uint64_t key path setter for Date.ISO8601FormatStyle.timeZone : Date.ISO8601FormatStyle(__int128 *a1, uint64_t a2)
{
  __int128 v4;

  v4 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_OWORD *)(a2 + 24) = v4;
  return Date.ISO8601FormatStyle.timeZone.didset();
}

uint64_t Date.ISO8601FormatStyle.timeZone.setter(_OWORD *a1)
{
  uint64_t v1;

  swift_unknownObjectRelease();
  *(_OWORD *)(v1 + 24) = *a1;
  return Date.ISO8601FormatStyle.timeZone.didset();
}

uint64_t Date.ISO8601FormatStyle.timeZone.didset()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t inited;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char v8;
  __int128 v9;
  uint64_t v10[3];
  char v11;

  v1 = v0;
  *(_OWORD *)v10 = *(_OWORD *)(v0 + 24);
  v2 = one-time initialization token for cache;
  swift_unknownObjectRetain();
  if (v2 != -1)
    swift_once();
  type metadata accessor for _LocaleUnlocalized();
  swift_retain();
  inited = swift_initStaticObject();
  swift_release();
  *(_QWORD *)&v9 = inited;
  *((_QWORD *)&v9 + 1) = lazy protocol witness table accessor for type _LocaleUnlocalized and conformance _LocaleUnlocalized();
  v7 = 0;
  v8 = 1;
  type metadata accessor for _CalendarGregorian();
  swift_allocObject();
  _CalendarGregorian.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)((uint64_t)&v11, v10, &v9, 2, 0, 4, 0, (uint64_t)&v7);
  v5 = v4;
  result = swift_release();
  *(_QWORD *)(v1 + 16) = v5;
  return result;
}

uint64_t (*Date.ISO8601FormatStyle.timeZone.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *a1 = v1;
  return Date.ISO8601FormatStyle.timeZone.modify;
}

uint64_t Date.ISO8601FormatStyle.timeZone.modify(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) == 0)
    return Date.ISO8601FormatStyle.timeZone.didset();
  return result;
}

void Date.ISO8601FormatStyle.init(dateSeparator:dateTimeSeparator:timeZone:)(char *a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  os_unfair_lock_s *v10;
  uint64_t inited;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  _BYTE v16[9];
  __int128 v17;

  v5 = *a1;
  v6 = *a2;
  v7 = *a3;
  v8 = a3[1];
  if (one-time initialization token for cache != -1)
    swift_once();
  v9 = static TimeZoneCache.cache + 16;
  v10 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v10);
  closure #1 in TimeZoneCache.offsetFixed(_:)(v9, 0, &v17);
  os_unfair_lock_unlock(v10);
  swift_release_n();
  if ((_QWORD)v17)
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *(_QWORD *)&v17 = v7;
    *((_QWORD *)&v17 + 1) = v8;
    if (one-time initialization token for cache != -1)
      swift_once();
    type metadata accessor for _LocaleUnlocalized();
    swift_retain();
    inited = swift_initStaticObject();
    swift_release();
    *(_QWORD *)&v15 = inited;
    *((_QWORD *)&v15 + 1) = lazy protocol witness table accessor for type _LocaleUnlocalized and conformance _LocaleUnlocalized();
    v13 = 0;
    v14 = 1;
    type metadata accessor for _CalendarGregorian();
    swift_allocObject();
    _CalendarGregorian.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)((uint64_t)v16, (uint64_t *)&v17, &v15, 2, 0, 4, 0, (uint64_t)&v13);
    *(_WORD *)a4 = 0;
    *(_BYTE *)(a4 + 2) = 1;
    *(_BYTE *)(a4 + 3) = v5;
    *(_BYTE *)(a4 + 4) = v6;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = v12;
    *(_QWORD *)(a4 + 24) = v7;
    *(_QWORD *)(a4 + 32) = v8;
  }
  else
  {
    __break(1u);
  }
}

uint64_t Date.ISO8601FormatStyle.year()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_BYTE *)(v1 + 1);
  v3 = *(_BYTE *)(v1 + 2);
  v4 = *(_BYTE *)(v1 + 3);
  v5 = *(_BYTE *)(v1 + 4);
  v7 = *(_QWORD *)(v1 + 8);
  v6 = *(_QWORD *)(v1 + 16);
  *(_BYTE *)a1 = *(_BYTE *)v1;
  *(_BYTE *)(a1 + 1) = v2;
  *(_BYTE *)(a1 + 2) = v3;
  *(_BYTE *)(a1 + 3) = v4;
  *(_BYTE *)(a1 + 4) = v5;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  if ((v7 & 1) == 0)
    *(_QWORD *)(a1 + 8) = v7 | 1;
  swift_retain();
  return swift_unknownObjectRetain();
}

uint64_t Date.ISO8601FormatStyle.weekOfYear()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_BYTE *)(v1 + 1);
  v3 = *(_BYTE *)(v1 + 2);
  v4 = *(_BYTE *)(v1 + 3);
  v5 = *(_BYTE *)(v1 + 4);
  v7 = *(_QWORD *)(v1 + 8);
  v6 = *(_QWORD *)(v1 + 16);
  *(_BYTE *)a1 = *(_BYTE *)v1;
  *(_BYTE *)(a1 + 1) = v2;
  *(_BYTE *)(a1 + 2) = v3;
  *(_BYTE *)(a1 + 3) = v4;
  *(_BYTE *)(a1 + 4) = v5;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  if ((v7 & 4) == 0)
    *(_QWORD *)(a1 + 8) = v7 | 4;
  swift_retain();
  return swift_unknownObjectRetain();
}

uint64_t Date.ISO8601FormatStyle.month()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_BYTE *)(v1 + 1);
  v3 = *(_BYTE *)(v1 + 2);
  v4 = *(_BYTE *)(v1 + 3);
  v5 = *(_BYTE *)(v1 + 4);
  v7 = *(_QWORD *)(v1 + 8);
  v6 = *(_QWORD *)(v1 + 16);
  *(_BYTE *)a1 = *(_BYTE *)v1;
  *(_BYTE *)(a1 + 1) = v2;
  *(_BYTE *)(a1 + 2) = v3;
  *(_BYTE *)(a1 + 3) = v4;
  *(_BYTE *)(a1 + 4) = v5;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  if ((v7 & 2) == 0)
    *(_QWORD *)(a1 + 8) = v7 | 2;
  swift_retain();
  return swift_unknownObjectRetain();
}

uint64_t Date.ISO8601FormatStyle.day()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_BYTE *)(v1 + 1);
  v3 = *(_BYTE *)(v1 + 2);
  v4 = *(_BYTE *)(v1 + 3);
  v5 = *(_BYTE *)(v1 + 4);
  v7 = *(_QWORD *)(v1 + 8);
  v6 = *(_QWORD *)(v1 + 16);
  *(_BYTE *)a1 = *(_BYTE *)v1;
  *(_BYTE *)(a1 + 1) = v2;
  *(_BYTE *)(a1 + 2) = v3;
  *(_BYTE *)(a1 + 3) = v4;
  *(_BYTE *)(a1 + 4) = v5;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  if ((v7 & 8) == 0)
    *(_QWORD *)(a1 + 8) = v7 | 8;
  swift_retain();
  return swift_unknownObjectRetain();
}

uint64_t Date.ISO8601FormatStyle.time(includingFractionalSeconds:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_BYTE *)(v2 + 2);
  v4 = *(_BYTE *)(v2 + 3);
  v5 = *(_BYTE *)(v2 + 4);
  v7 = *(_QWORD *)(v2 + 8);
  v6 = *(_QWORD *)(v2 + 16);
  *(_BYTE *)a2 = *(_BYTE *)v2;
  *(_BYTE *)(a2 + 2) = v3;
  *(_BYTE *)(a2 + 3) = v4;
  *(_BYTE *)(a2 + 4) = v5;
  *(_QWORD *)(a2 + 8) = v7;
  *(_QWORD *)(a2 + 16) = v6;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(v2 + 24);
  if ((v7 & 0x10) == 0)
    *(_QWORD *)(a2 + 8) = v7 | 0x10;
  *(_BYTE *)(a2 + 1) = a1 & 1;
  swift_retain();
  return swift_unknownObjectRetain();
}

uint64_t Date.ISO8601FormatStyle.timeZone(separator:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = *(_BYTE *)(v2 + 1);
  v5 = *(_BYTE *)(v2 + 3);
  v6 = *(_BYTE *)(v2 + 4);
  v8 = *(_QWORD *)(v2 + 8);
  v7 = *(_QWORD *)(v2 + 16);
  *(_BYTE *)a2 = *(_BYTE *)v2;
  *(_BYTE *)(a2 + 1) = v4;
  *(_BYTE *)(a2 + 3) = v5;
  *(_BYTE *)(a2 + 4) = v6;
  *(_QWORD *)(a2 + 8) = v8;
  *(_QWORD *)(a2 + 16) = v7;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(v2 + 24);
  if ((v8 & 0x20) == 0)
    *(_QWORD *)(a2 + 8) = v8 | 0x20;
  *(_BYTE *)(a2 + 2) = v3;
  swift_retain();
  return swift_unknownObjectRetain();
}

uint64_t Date.ISO8601FormatStyle.dateSeparator(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = *(_BYTE *)(v2 + 1);
  v5 = *(_BYTE *)(v2 + 2);
  v6 = *(_BYTE *)(v2 + 4);
  v8 = *(_QWORD *)(v2 + 8);
  v7 = *(_QWORD *)(v2 + 16);
  *(_BYTE *)a2 = *(_BYTE *)v2;
  *(_BYTE *)(a2 + 1) = v4;
  *(_BYTE *)(a2 + 2) = v5;
  *(_BYTE *)(a2 + 3) = v3;
  *(_BYTE *)(a2 + 4) = v6;
  *(_QWORD *)(a2 + 8) = v8;
  *(_QWORD *)(a2 + 16) = v7;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(v2 + 24);
  swift_retain();
  return swift_unknownObjectRetain();
}

uint64_t Date.ISO8601FormatStyle.dateTimeSeparator(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = *(_BYTE *)(v2 + 1);
  v5 = *(_BYTE *)(v2 + 2);
  v6 = *(_BYTE *)(v2 + 3);
  v8 = *(_QWORD *)(v2 + 8);
  v7 = *(_QWORD *)(v2 + 16);
  *(_BYTE *)a2 = *(_BYTE *)v2;
  *(_BYTE *)(a2 + 1) = v4;
  *(_BYTE *)(a2 + 2) = v5;
  *(_BYTE *)(a2 + 3) = v6;
  *(_BYTE *)(a2 + 4) = v3;
  *(_QWORD *)(a2 + 8) = v8;
  *(_QWORD *)(a2 + 16) = v7;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(v2 + 24);
  swift_retain();
  return swift_unknownObjectRetain();
}

uint64_t Date.ISO8601FormatStyle.timeSeparator(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a1;
  v4 = *(_BYTE *)(v2 + 1);
  v5 = *(_BYTE *)(v2 + 2);
  v6 = *(_BYTE *)(v2 + 3);
  v7 = *(_BYTE *)(v2 + 4);
  v9 = *(_QWORD *)(v2 + 8);
  v8 = *(_QWORD *)(v2 + 16);
  *(_BYTE *)a2 = v3;
  *(_BYTE *)(a2 + 1) = v4;
  *(_BYTE *)(a2 + 2) = v5;
  *(_BYTE *)(a2 + 3) = v6;
  *(_BYTE *)(a2 + 4) = v7;
  *(_QWORD *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 16) = v8;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(v2 + 24);
  swift_retain();
  return swift_unknownObjectRetain();
}

uint64_t Date.ISO8601FormatStyle.timeZoneSeparator(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = *(_BYTE *)(v2 + 1);
  v5 = *(_BYTE *)(v2 + 3);
  v6 = *(_BYTE *)(v2 + 4);
  v8 = *(_QWORD *)(v2 + 8);
  v7 = *(_QWORD *)(v2 + 16);
  *(_BYTE *)a2 = *(_BYTE *)v2;
  *(_BYTE *)(a2 + 1) = v4;
  *(_BYTE *)(a2 + 2) = v3;
  *(_BYTE *)(a2 + 3) = v5;
  *(_BYTE *)(a2 + 4) = v6;
  *(_QWORD *)(a2 + 8) = v8;
  *(_QWORD *)(a2 + 16) = v7;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(v2 + 24);
  swift_retain();
  return swift_unknownObjectRetain();
}

uint64_t closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t *a8@<X8>)
{
  _BYTE *v10;
  _BYTE *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  char v41;
  char v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char v63;
  char v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE v72[16];
  _BYTE v73[16];
  _BYTE v74[16];
  _BYTE v75[16];
  _BYTE v76[16];
  _BYTE v77[16];
  _BYTE v78[16];
  _BYTE v79[16];
  _BYTE v80[16];
  _BYTE v81[16];
  unint64_t v82;
  char v83;
  unint64_t v84;
  char v85;
  uint64_t v86;
  char v87;
  unint64_t v88;
  char v89;
  unint64_t v90;
  char v91;
  uint64_t v92;
  char v93;
  unint64_t v94;
  char v95;
  unint64_t v96;
  char v97;
  unint64_t v98;
  char v99;
  uint64_t v100;
  char v101;
  uint64_t v102;

  v102 = a4;
  if (!result)
    goto LABEL_141;
  v10 = (_BYTE *)a3;
  v12 = (_BYTE *)result;
  v69 = result;
  v70 = a2;
  v71 = 0;
  v14 = *(_QWORD *)(a3 + 8);
  if (!v14)
    goto LABEL_8;
  v15 = *(_QWORD *)(a3 + 8);
  if ((v14 & 1) == 0)
    goto LABEL_20;
  if ((v14 & 4) != 0
    && (outlined init with take of Int?(v102 + 272, (uint64_t)v81),
        outlined init with take of Int?((uint64_t)v81, (uint64_t)&v82),
        (v83 & 1) == 0))
  {
    v19 = v82;
  }
  else
  {
LABEL_8:
    v16 = a6;
    v17 = a7;
    v18 = v102;
    outlined init with take of Int?(v102 + 48, (uint64_t)v80);
    result = outlined init with take of Int?((uint64_t)v80, (uint64_t)&v84);
    if ((v85 & 1) != 0)
    {
LABEL_148:
      __break(1u);
      goto LABEL_149;
    }
    v19 = v84;
    outlined init with take of Int?(v18 + 32, (uint64_t)v79);
    result = outlined init with take of Int?((uint64_t)v79, (uint64_t)&v86);
    if ((v87 & 1) == 0)
    {
      a7 = v17;
      a6 = v16;
      if (!v86)
      {
        v20 = __OFSUB__(1, v19);
        v19 = 1 - v19;
        if (v20)
          goto LABEL_129;
      }
      if ((v19 & 0x8000000000000000) == 0)
        goto LABEL_18;
      goto LABEL_16;
    }
    a7 = v17;
    a6 = v16;
    if ((v19 & 0x8000000000000000) != 0)
    {
LABEL_16:
      if (a2 < 1)
      {
LABEL_133:
        __break(1u);
        goto LABEL_134;
      }
      *v12 = 45;
      v71 = 1;
      v20 = __OFSUB__(0, v19);
      v19 = -(uint64_t)v19;
      if (v20)
      {
LABEL_134:
        __break(1u);
        goto LABEL_135;
      }
    }
  }
LABEL_18:
  result = append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)(v19, 4, &v69, 48);
  *a5 = 1;
  LOBYTE(v15) = v14;
  if (!v14)
    LOBYTE(v15) = 59;
LABEL_20:
  v21 = v102;
  if ((v15 & 2) == 0)
    goto LABEL_30;
  if (*a5 == 1)
  {
    if ((v10[3] & 1) != 0)
    {
      v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
      result = swift_bridgeObjectRelease();
      if ((v22 & 1) == 0)
        goto LABEL_28;
    }
    else
    {
      result = swift_bridgeObjectRelease();
    }
    v23 = v71;
    if (v71 >= v70)
    {
LABEL_130:
      __break(1u);
      goto LABEL_131;
    }
    *(_BYTE *)(v69 + v71) = 45;
    v71 = v23 + 1;
  }
LABEL_28:
  outlined init with take of Int?(v21 + 64, (uint64_t)v78);
  result = outlined init with take of Int?((uint64_t)v78, (uint64_t)&v88);
  if ((v89 & 1) != 0)
  {
LABEL_143:
    __break(1u);
    goto LABEL_144;
  }
  result = append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)(v88, 2, &v69, 48);
  *a5 = 1;
LABEL_30:
  if (v14 && (v14 & 4) != 0)
  {
    if (*a5 != 1)
      goto LABEL_46;
    if ((v10[3] & 1) != 0)
    {
      v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
      result = swift_bridgeObjectRelease();
      if ((v26 & 1) == 0)
        goto LABEL_46;
    }
    else
    {
      result = swift_bridgeObjectRelease();
    }
    v27 = v71;
    if (v71 >= v70)
    {
LABEL_131:
      __break(1u);
      goto LABEL_132;
    }
    *(_BYTE *)(v69 + v71) = 45;
    v71 = v27 + 1;
LABEL_46:
    outlined init with take of Int?(v21 + 256, (uint64_t)v77);
    result = outlined init with take of Int?((uint64_t)v77, (uint64_t)&v90);
    if ((v91 & 1) != 0)
    {
LABEL_144:
      __break(1u);
      goto LABEL_145;
    }
    v28 = v71;
    if (v71 >= v70)
    {
LABEL_120:
      __break(1u);
      goto LABEL_121;
    }
    v29 = v90;
    *(_BYTE *)(v69 + v71) = 87;
    v71 = v28 + 1;
    result = append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)(v29, 2, &v69, 48);
    *a5 = 1;
    v24 = v14;
    if (!v14)
      goto LABEL_49;
    goto LABEL_33;
  }
  v24 = v14;
  if (!v14)
    goto LABEL_49;
LABEL_33:
  if ((v24 & 8) == 0)
  {
    v25 = v14;
LABEL_35:
    if ((v25 & 0x10) == 0)
    {
LABEL_36:
      if ((v14 & 0x20) == 0)
        goto LABEL_100;
LABEL_92:
      if ((a7 & 1) != 0 || !a6 || (unint64_t)(a6 - 64800) <= 0xFFFFFFFFFFFE05C0)
      {
        v57 = v71;
        if (v71 >= v70)
        {
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
          goto LABEL_123;
        }
        *(_BYTE *)(v69 + v71) = 90;
        v71 = v57 + 1;
        goto LABEL_100;
      }
      v53 = v70;
      v52 = v71;
      v54 = a6;
      if (a6 < 0)
      {
        if (v71 >= v70)
        {
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
          goto LABEL_143;
        }
        v55 = v10;
        v54 = -v54;
        v56 = 45;
      }
      else
      {
        if (v71 >= v70)
        {
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        v55 = v10;
        v56 = 43;
      }
      v59 = a8;
      v60 = v69;
      *(_BYTE *)(v69 + v71) = v56;
      v61 = (unsigned __int16)v54 % 0xE10u / 0x3C;
      v62 = (unsigned __int16)v54 % 0xE10u % 0x3C;
      v71 = v52 + 1;
      append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)((unsigned __int16)v54 / 0xE10u, 2, &v69, 48);
      v63 = v55[2];
      if ((v63 & 1) != 0)
      {
        v64 = _stringCompareWithSmolCheck(_:_:expecting:)();
        result = swift_bridgeObjectRelease();
        if ((v64 & 1) == 0)
        {
          result = append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)(v61, 2, &v69, 48);
          a8 = v59;
          if (!(_DWORD)v62)
            goto LABEL_100;
          goto LABEL_113;
        }
      }
      else
      {
        result = swift_bridgeObjectRelease();
      }
      v65 = v71;
      if (v71 >= v53)
      {
LABEL_137:
        __break(1u);
        goto LABEL_138;
      }
      *(_BYTE *)(v60 + v71) = 58;
      v71 = v65 + 1;
      result = append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)(v61, 2, &v69, 48);
      a8 = v59;
      if (!(_DWORD)v62)
        goto LABEL_100;
      if ((v63 & 1) == 0)
      {
        result = swift_bridgeObjectRelease();
        goto LABEL_116;
      }
LABEL_113:
      v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
      result = swift_bridgeObjectRelease();
      if ((v66 & 1) == 0)
      {
LABEL_118:
        result = append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)(v62, 2, &v69, 48);
        a8 = v59;
LABEL_100:
        if (v71 < v70)
        {
          *(_BYTE *)(v69 + v71) = 0;
          result = MEMORY[0x186DA4658]();
          if (v58)
          {
            *a8 = result;
            a8[1] = v58;
            return result;
          }
          goto LABEL_142;
        }
        __break(1u);
        goto LABEL_120;
      }
LABEL_116:
      v67 = v71;
      if (v71 >= v53)
      {
LABEL_139:
        __break(1u);
        goto LABEL_140;
      }
      *(_BYTE *)(v60 + v71) = 58;
      v71 = v67 + 1;
      goto LABEL_118;
    }
LABEL_69:
    if (*a5 == 1)
    {
      v34 = v71;
      if ((v10[4] & 1) != 0)
      {
        if (v71 >= v70)
        {
LABEL_135:
          __break(1u);
          goto LABEL_136;
        }
        v35 = 84;
      }
      else
      {
        if (v71 >= v70)
        {
LABEL_136:
          __break(1u);
          goto LABEL_137;
        }
        v35 = 32;
      }
      *(_BYTE *)(v69 + v71) = v35;
      v71 = v34 + 1;
    }
    outlined init with take of Int?(v21 + 112, (uint64_t)v75);
    result = outlined init with take of Int?((uint64_t)v75, (uint64_t)&v94);
    if ((v95 & 1) != 0)
    {
LABEL_145:
      __break(1u);
      goto LABEL_146;
    }
    v36 = v21;
    v37 = v94;
    outlined init with take of Int?(v36 + 128, (uint64_t)v74);
    result = outlined init with take of Int?((uint64_t)v74, (uint64_t)&v96);
    if ((v97 & 1) != 0)
    {
LABEL_146:
      __break(1u);
      goto LABEL_147;
    }
    v38 = v96;
    outlined init with take of Int?(v36 + 144, (uint64_t)v73);
    result = outlined init with take of Int?((uint64_t)v73, (uint64_t)&v98);
    if ((v99 & 1) != 0)
    {
LABEL_147:
      __break(1u);
      goto LABEL_148;
    }
    v39 = v98;
    v40 = *v10;
    result = append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)(v37, 2, &v69, 48);
    if ((v40 & 1) != 0)
    {
      v41 = a7;
      append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)(v38, 2, &v69, 48);
    }
    else
    {
      v42 = a7;
      v43 = a6;
      v44 = v10;
      v46 = v70;
      v45 = v71;
      if (v71 >= v70)
      {
LABEL_123:
        __break(1u);
        goto LABEL_124;
      }
      v47 = v69;
      *(_BYTE *)(v69 + v71) = 58;
      v71 = v45 + 1;
      result = append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)(v38, 2, &v69, 48);
      v48 = v71;
      if (v71 >= v46)
      {
LABEL_124:
        __break(1u);
LABEL_125:
        __break(1u);
        goto LABEL_126;
      }
      *(_BYTE *)(v47 + v71) = 58;
      v71 = v48 + 1;
      v10 = v44;
      a6 = v43;
      v41 = v42;
    }
    v49 = v102;
    result = append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)(v39, 2, &v69, 48);
    if ((v10[1] & 1) != 0)
    {
      outlined init with take of Int?(v49 + 160, (uint64_t)v72);
      result = outlined init with take of Int?((uint64_t)v72, (uint64_t)&v100);
      if ((v101 & 1) != 0)
      {
LABEL_150:
        __break(1u);
        goto LABEL_151;
      }
      v50 = trunc((double)v100 / 1000000.0);
      if ((~*(_QWORD *)&v50 & 0x7FF0000000000000) == 0)
        goto LABEL_125;
      if (v50 <= -9.22337204e18)
      {
LABEL_126:
        __break(1u);
        goto LABEL_127;
      }
      if (v50 >= 9.22337204e18)
      {
LABEL_127:
        __break(1u);
        goto LABEL_128;
      }
      v51 = v71;
      if (v71 >= v70)
      {
LABEL_128:
        __break(1u);
LABEL_129:
        __break(1u);
        goto LABEL_130;
      }
      *(_BYTE *)(v69 + v71) = 46;
      v71 = v51 + 1;
      result = append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)((uint64_t)v50, 3, &v69, 48);
    }
    *a5 = 1;
    a7 = v41;
    if (!v14)
      goto LABEL_92;
    goto LABEL_36;
  }
LABEL_49:
  if (*a5 != 1)
    goto LABEL_56;
  if ((v10[3] & 1) != 0)
  {
    v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    if ((v30 & 1) == 0)
      goto LABEL_56;
  }
  else
  {
    result = swift_bridgeObjectRelease();
  }
  v31 = v71;
  if (v71 >= v70)
  {
LABEL_132:
    __break(1u);
    goto LABEL_133;
  }
  *(_BYTE *)(v69 + v71) = 45;
  v71 = v31 + 1;
LABEL_56:
  if (v14)
  {
    if ((v14 & 4) != 0)
    {
      outlined init with take of Int?(v21 + 176, (uint64_t)v76);
      result = outlined init with take of Int?((uint64_t)v76, (uint64_t)&v92);
      if ((v93 & 1) != 0)
      {
LABEL_149:
        __break(1u);
        goto LABEL_150;
      }
      v33 = v92;
      if (v92 >= 10)
        v33 = 10;
      result = v33 - 1;
      if (__OFSUB__(v33, 1))
        goto LABEL_122;
      goto LABEL_67;
    }
    if ((v14 & 2) == 0)
    {
      outlined init with take of Int?(v21 + 96, (uint64_t)v76);
      result = outlined init with take of Int?((uint64_t)v76, (uint64_t)&v92);
      if ((v93 & 1) != 0)
      {
LABEL_151:
        __break(1u);
        goto LABEL_152;
      }
      result = v92;
      v32 = 3;
LABEL_68:
      result = append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)(result, v32, &v69, 48);
      *a5 = 1;
      v25 = v14;
      if (!v14)
        goto LABEL_69;
      goto LABEL_35;
    }
  }
  outlined init with take of Int?(v21 + 80, (uint64_t)v76);
  result = outlined init with take of Int?((uint64_t)v76, (uint64_t)&v92);
  if ((v93 & 1) == 0)
  {
    result = v92;
LABEL_67:
    v32 = 2;
    goto LABEL_68;
  }
LABEL_152:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.ISO8601FormatStyle.CodingKeys and conformance Date.ISO8601FormatStyle.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.CodingKeys and conformance Date.ISO8601FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.CodingKeys and conformance Date.ISO8601FormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ISO8601FormatStyle.CodingKeys, &type metadata for Date.ISO8601FormatStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.CodingKeys and conformance Date.ISO8601FormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.CodingKeys and conformance Date.ISO8601FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.CodingKeys and conformance Date.ISO8601FormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ISO8601FormatStyle.CodingKeys, &type metadata for Date.ISO8601FormatStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.CodingKeys and conformance Date.ISO8601FormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.CodingKeys and conformance Date.ISO8601FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.CodingKeys and conformance Date.ISO8601FormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ISO8601FormatStyle.CodingKeys, &type metadata for Date.ISO8601FormatStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.CodingKeys and conformance Date.ISO8601FormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.CodingKeys and conformance Date.ISO8601FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.CodingKeys and conformance Date.ISO8601FormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ISO8601FormatStyle.CodingKeys, &type metadata for Date.ISO8601FormatStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.CodingKeys and conformance Date.ISO8601FormatStyle.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.ISO8601FormatStyle.TimeZoneSeparator and conformance Date.ISO8601FormatStyle.TimeZoneSeparator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeZoneSeparator and conformance Date.ISO8601FormatStyle.TimeZoneSeparator;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeZoneSeparator and conformance Date.ISO8601FormatStyle.TimeZoneSeparator)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ISO8601FormatStyle.TimeZoneSeparator, &type metadata for Date.ISO8601FormatStyle.TimeZoneSeparator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeZoneSeparator and conformance Date.ISO8601FormatStyle.TimeZoneSeparator);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeZoneSeparator and conformance Date.ISO8601FormatStyle.TimeZoneSeparator;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeZoneSeparator and conformance Date.ISO8601FormatStyle.TimeZoneSeparator)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ISO8601FormatStyle.TimeZoneSeparator, &type metadata for Date.ISO8601FormatStyle.TimeZoneSeparator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeZoneSeparator and conformance Date.ISO8601FormatStyle.TimeZoneSeparator);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeZoneSeparator and conformance Date.ISO8601FormatStyle.TimeZoneSeparator;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeZoneSeparator and conformance Date.ISO8601FormatStyle.TimeZoneSeparator)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ISO8601FormatStyle.TimeZoneSeparator, &type metadata for Date.ISO8601FormatStyle.TimeZoneSeparator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeZoneSeparator and conformance Date.ISO8601FormatStyle.TimeZoneSeparator);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeZoneSeparator and conformance Date.ISO8601FormatStyle.TimeZoneSeparator;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeZoneSeparator and conformance Date.ISO8601FormatStyle.TimeZoneSeparator)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ISO8601FormatStyle.TimeZoneSeparator, &type metadata for Date.ISO8601FormatStyle.TimeZoneSeparator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeZoneSeparator and conformance Date.ISO8601FormatStyle.TimeZoneSeparator);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ISO8601FormatStyle.Fields, &type metadata for Date.ISO8601FormatStyle.Fields);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ISO8601FormatStyle.Fields, &type metadata for Date.ISO8601FormatStyle.Fields);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ISO8601FormatStyle.Fields, &type metadata for Date.ISO8601FormatStyle.Fields);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ISO8601FormatStyle.Fields, &type metadata for Date.ISO8601FormatStyle.Fields);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ISO8601FormatStyle.Fields, &type metadata for Date.ISO8601FormatStyle.Fields);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ISO8601FormatStyle.Fields, &type metadata for Date.ISO8601FormatStyle.Fields);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.Fields and conformance Date.ISO8601FormatStyle.Fields);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.ISO8601FormatStyle.DateTimeSeparator and conformance Date.ISO8601FormatStyle.DateTimeSeparator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateTimeSeparator and conformance Date.ISO8601FormatStyle.DateTimeSeparator;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateTimeSeparator and conformance Date.ISO8601FormatStyle.DateTimeSeparator)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ISO8601FormatStyle.DateTimeSeparator, &type metadata for Date.ISO8601FormatStyle.DateTimeSeparator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateTimeSeparator and conformance Date.ISO8601FormatStyle.DateTimeSeparator);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateTimeSeparator and conformance Date.ISO8601FormatStyle.DateTimeSeparator;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateTimeSeparator and conformance Date.ISO8601FormatStyle.DateTimeSeparator)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ISO8601FormatStyle.DateTimeSeparator, &type metadata for Date.ISO8601FormatStyle.DateTimeSeparator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateTimeSeparator and conformance Date.ISO8601FormatStyle.DateTimeSeparator);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateTimeSeparator and conformance Date.ISO8601FormatStyle.DateTimeSeparator;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateTimeSeparator and conformance Date.ISO8601FormatStyle.DateTimeSeparator)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ISO8601FormatStyle.DateTimeSeparator, &type metadata for Date.ISO8601FormatStyle.DateTimeSeparator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateTimeSeparator and conformance Date.ISO8601FormatStyle.DateTimeSeparator);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateTimeSeparator and conformance Date.ISO8601FormatStyle.DateTimeSeparator;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateTimeSeparator and conformance Date.ISO8601FormatStyle.DateTimeSeparator)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ISO8601FormatStyle.DateTimeSeparator, &type metadata for Date.ISO8601FormatStyle.DateTimeSeparator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateTimeSeparator and conformance Date.ISO8601FormatStyle.DateTimeSeparator);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.ISO8601FormatStyle.DateSeparator and conformance Date.ISO8601FormatStyle.DateSeparator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateSeparator and conformance Date.ISO8601FormatStyle.DateSeparator;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateSeparator and conformance Date.ISO8601FormatStyle.DateSeparator)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ISO8601FormatStyle.DateSeparator, &type metadata for Date.ISO8601FormatStyle.DateSeparator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateSeparator and conformance Date.ISO8601FormatStyle.DateSeparator);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateSeparator and conformance Date.ISO8601FormatStyle.DateSeparator;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateSeparator and conformance Date.ISO8601FormatStyle.DateSeparator)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ISO8601FormatStyle.DateSeparator, &type metadata for Date.ISO8601FormatStyle.DateSeparator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateSeparator and conformance Date.ISO8601FormatStyle.DateSeparator);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateSeparator and conformance Date.ISO8601FormatStyle.DateSeparator;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateSeparator and conformance Date.ISO8601FormatStyle.DateSeparator)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ISO8601FormatStyle.DateSeparator, &type metadata for Date.ISO8601FormatStyle.DateSeparator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateSeparator and conformance Date.ISO8601FormatStyle.DateSeparator);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateSeparator and conformance Date.ISO8601FormatStyle.DateSeparator;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateSeparator and conformance Date.ISO8601FormatStyle.DateSeparator)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ISO8601FormatStyle.DateSeparator, &type metadata for Date.ISO8601FormatStyle.DateSeparator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.DateSeparator and conformance Date.ISO8601FormatStyle.DateSeparator);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.ISO8601FormatStyle.TimeSeparator and conformance Date.ISO8601FormatStyle.TimeSeparator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeSeparator and conformance Date.ISO8601FormatStyle.TimeSeparator;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeSeparator and conformance Date.ISO8601FormatStyle.TimeSeparator)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ISO8601FormatStyle.TimeSeparator, &type metadata for Date.ISO8601FormatStyle.TimeSeparator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeSeparator and conformance Date.ISO8601FormatStyle.TimeSeparator);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeSeparator and conformance Date.ISO8601FormatStyle.TimeSeparator;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeSeparator and conformance Date.ISO8601FormatStyle.TimeSeparator)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ISO8601FormatStyle.TimeSeparator, &type metadata for Date.ISO8601FormatStyle.TimeSeparator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeSeparator and conformance Date.ISO8601FormatStyle.TimeSeparator);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeSeparator and conformance Date.ISO8601FormatStyle.TimeSeparator;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeSeparator and conformance Date.ISO8601FormatStyle.TimeSeparator)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ISO8601FormatStyle.TimeSeparator, &type metadata for Date.ISO8601FormatStyle.TimeSeparator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeSeparator and conformance Date.ISO8601FormatStyle.TimeSeparator);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeSeparator and conformance Date.ISO8601FormatStyle.TimeSeparator;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeSeparator and conformance Date.ISO8601FormatStyle.TimeSeparator)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ISO8601FormatStyle.TimeSeparator, &type metadata for Date.ISO8601FormatStyle.TimeSeparator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle.TimeSeparator and conformance Date.ISO8601FormatStyle.TimeSeparator);
  }
  return result;
}

unint64_t append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)(unint64_t result, uint64_t a2, _QWORD *a3, char a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int8x16_t v27;
  int8x16_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int8x16_t v43;
  int8x16_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int8x16_t v57;
  int8x16_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  int8x16_t v72;
  int8x16_t *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  __int16 v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  unsigned __int8 v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int v87;
  char v88;
  uint64_t v89;
  int v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  if ((uint64_t)result <= 9)
  {
    if (!__OFSUB__(a2, 1))
    {
      if (a2 - 1 < 1)
        goto LABEL_39;
      v5 = a3[2];
      v6 = *a3;
      if (v5 <= a3[1])
        v7 = a3[1];
      else
        v7 = a3[2];
      v8 = v7 - v5;
      if (a2 - 2 < (unint64_t)(v7 - v5))
        v8 = a2 - 2;
      v9 = v8 + 1;
      if (v9 >= 0x21)
      {
        v26 = v9 & 0x1F;
        if ((v9 & 0x1F) == 0)
          v26 = 32;
        v10 = v9 - v26;
        v11 = v5 + v10;
        v27 = vdupq_n_s8(a4);
        v28 = (int8x16_t *)(v5 + v6 + 16);
        v29 = v10;
        do
        {
          v28[-1] = v27;
          *v28 = v27;
          v28 += 2;
          v29 -= 32;
        }
        while (v29);
      }
      else
      {
        v10 = 0;
        v11 = a3[2];
      }
      v30 = v10 + v5 - v7;
      v31 = ~v10 + a2;
      while (v30)
      {
        *(_BYTE *)(v6 + v11++) = a4;
        ++v30;
        if (!--v31)
        {
          a3[2] = v11;
LABEL_39:
          if ((uint64_t)result >= -128)
          {
            v32 = a4 + (char)result;
            if (v32 == (char)(a4 + result))
            {
              v33 = a3[2];
              if (v33 < a3[1])
              {
                *(_BYTE *)(*a3 + v33) = v32;
                v34 = v33 + 1;
                goto LABEL_99;
              }
LABEL_107:
              __break(1u);
LABEL_108:
              __break(1u);
LABEL_109:
              __break(1u);
              goto LABEL_110;
            }
LABEL_106:
            __break(1u);
            goto LABEL_107;
          }
LABEL_105:
          __break(1u);
          goto LABEL_106;
        }
      }
      __break(1u);
LABEL_101:
      __break(1u);
LABEL_102:
      __break(1u);
LABEL_103:
      __break(1u);
    }
    __break(1u);
    goto LABEL_105;
  }
  if (result > 0x63)
  {
    if (result > 0x3E7)
    {
      if (result >> 4 > 0x270)
      {
        MEMORY[0x1E0C80A78](result);
        v92 = specialized closure #1 in numericStringRepresentationForBinaryInteger<A>(words:isSigned:)(&v91, 1, v54, 1);
        v93 = v55;
        MEMORY[0x1E0C80A78](v92);
        v91 = a3;
        specialized String.withUTF8<A>(_:)((uint64_t (*)(_QWORD *, uint64_t))partial apply for closure #1 in append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:));
        return swift_bridgeObjectRelease();
      }
      if (!__OFSUB__(a2, 4))
      {
        if (a2 - 4 >= 1)
        {
          v35 = a3[2];
          v36 = *a3;
          if (v35 <= a3[1])
            v37 = a3[1];
          else
            v37 = a3[2];
          v38 = v37 - v35;
          if (a2 - 5 < (unint64_t)(v37 - v35))
            v38 = a2 - 5;
          v39 = v38 + 1;
          if (v39 >= 0x21)
          {
            v71 = v39 & 0x1F;
            if ((v39 & 0x1F) == 0)
              v71 = 32;
            v40 = v39 - v71;
            v41 = v35 + v40;
            v72 = vdupq_n_s8(a4);
            v73 = (int8x16_t *)(v35 + v36 + 16);
            v74 = v40;
            do
            {
              v73[-1] = v72;
              *v73 = v72;
              v73 += 2;
              v74 -= 32;
            }
            while (v74);
          }
          else
          {
            v40 = 0;
            v41 = a3[2];
          }
          v75 = v40 + v35 - v37;
          v76 = a2 - v40 - 4;
          do
          {
            if (!v75)
              goto LABEL_103;
            *(_BYTE *)(v36 + v41++) = a4;
            ++v75;
            --v76;
          }
          while (v76);
          a3[2] = v41;
        }
        v77 = a4 + (char)(result / 0x3E8);
        if (v77 == (char)(a4 + result / 0x3E8))
        {
          v79 = a3[1];
          v78 = a3[2];
          if (v78 < v79)
          {
            v80 = result % 0x3E8 / 0x64;
            v81 = *a3;
            *(_BYTE *)(*a3 + v78) = v77;
            v82 = v78 + 1;
            a3[2] = v78 + 1;
            v83 = a4 + (char)v80;
            if (v83 == (char)(a4 + v80))
            {
              if (v82 < v79)
              {
                v84 = result % 0x3E8 % 0x64;
                v85 = v84 / 0xAu;
                *(_BYTE *)(v81 + v82) = v83;
                v86 = v78 + 2;
                a3[2] = v78 + 2;
                v87 = v85 + a4;
                if (v87 == (char)(v85 + a4))
                {
                  if (v86 < v79)
                  {
                    v88 = v84 % 0xAu;
                    *(_BYTE *)(v81 + v86) = v87;
                    v89 = v78 + 3;
                    a3[2] = v78 + 3;
                    v90 = a4 + v88;
                    if (v90 == (char)v90)
                    {
                      if (v89 < v79)
                      {
                        *(_BYTE *)(v81 + v89) = v90;
                        v34 = v78 + 4;
                        goto LABEL_99;
                      }
LABEL_128:
                      __break(1u);
                    }
LABEL_127:
                    __break(1u);
                    goto LABEL_128;
                  }
LABEL_126:
                  __break(1u);
                  goto LABEL_127;
                }
LABEL_125:
                __break(1u);
                goto LABEL_126;
              }
LABEL_124:
              __break(1u);
              goto LABEL_125;
            }
LABEL_123:
            __break(1u);
            goto LABEL_124;
          }
LABEL_122:
          __break(1u);
          goto LABEL_123;
        }
LABEL_121:
        __break(1u);
        goto LABEL_122;
      }
LABEL_120:
      __break(1u);
      goto LABEL_121;
    }
    if (!__OFSUB__(a2, 3))
    {
      if (a2 - 3 >= 1)
      {
        v19 = a3[2];
        v20 = *a3;
        if (v19 <= a3[1])
          v21 = a3[1];
        else
          v21 = a3[2];
        v22 = v21 - v19;
        if (a2 - 4 < (unint64_t)(v21 - v19))
          v22 = a2 - 4;
        v23 = v22 + 1;
        if (v23 >= 0x21)
        {
          v56 = v23 & 0x1F;
          if ((v23 & 0x1F) == 0)
            v56 = 32;
          v24 = v23 - v56;
          v25 = v19 + v24;
          v57 = vdupq_n_s8(a4);
          v58 = (int8x16_t *)(v19 + v20 + 16);
          v59 = v24;
          do
          {
            v58[-1] = v57;
            *v58 = v57;
            v58 += 2;
            v59 -= 32;
          }
          while (v59);
        }
        else
        {
          v24 = 0;
          v25 = a3[2];
        }
        v60 = v24 + v19 - v21;
        v61 = a2 - v24 - 3;
        do
        {
          if (!v60)
            goto LABEL_102;
          *(_BYTE *)(v20 + v25++) = a4;
          ++v60;
          --v61;
        }
        while (v61);
        a3[2] = v25;
      }
      v62 = a4 + (char)(result / 0x64);
      if (v62 == (char)(a4 + result / 0x64))
      {
        v64 = a3[1];
        v63 = a3[2];
        if (v63 < v64)
        {
          v65 = result % 0x64;
          v66 = *a3;
          *(_BYTE *)(*a3 + v63) = v62;
          v67 = v63 + 1;
          a3[2] = v63 + 1;
          v68 = v65 / 0xAu + a4;
          if (v68 == (char)(v65 / 0xAu + a4))
          {
            if (v67 < v64)
            {
              *(_BYTE *)(v66 + v67) = v68;
              v69 = v63 + 2;
              a3[2] = v63 + 2;
              v70 = a4 + v65 % 0xAu;
              if (v70 == (char)v70)
              {
                if (v69 < v64)
                {
                  *(_BYTE *)(v66 + v69) = v70;
                  v34 = v63 + 3;
                  goto LABEL_99;
                }
                goto LABEL_119;
              }
LABEL_118:
              __break(1u);
LABEL_119:
              __break(1u);
              goto LABEL_120;
            }
LABEL_117:
            __break(1u);
            goto LABEL_118;
          }
LABEL_116:
          __break(1u);
          goto LABEL_117;
        }
LABEL_115:
        __break(1u);
        goto LABEL_116;
      }
LABEL_114:
      __break(1u);
      goto LABEL_115;
    }
LABEL_113:
    __break(1u);
    goto LABEL_114;
  }
  if (__OFSUB__(a2, 2))
    goto LABEL_108;
  if (a2 - 2 >= 1)
  {
    v12 = a3[2];
    v13 = *a3;
    if (v12 <= a3[1])
      v14 = a3[1];
    else
      v14 = a3[2];
    v15 = v14 - v12;
    if (a2 - 3 < (unint64_t)(v14 - v12))
      v15 = a2 - 3;
    v16 = v15 + 1;
    if (v16 >= 0x21)
    {
      v42 = v16 & 0x1F;
      if ((v16 & 0x1F) == 0)
        v42 = 32;
      v17 = v16 - v42;
      v18 = v12 + v17;
      v43 = vdupq_n_s8(a4);
      v44 = (int8x16_t *)(v12 + v13 + 16);
      v45 = v17;
      do
      {
        v44[-1] = v43;
        *v44 = v43;
        v44 += 2;
        v45 -= 32;
      }
      while (v45);
    }
    else
    {
      v17 = 0;
      v18 = a3[2];
    }
    v46 = v17 + v12 - v14;
    v47 = a2 - v17 - 2;
    do
    {
      if (!v46)
        goto LABEL_101;
      *(_BYTE *)(v13 + v18++) = a4;
      ++v46;
      --v47;
    }
    while (v47);
    a3[2] = v18;
  }
  v48 = a4 + (char)(result / 0xA);
  if (v48 != (char)(a4 + result / 0xA))
    goto LABEL_109;
  v50 = a3[1];
  v49 = a3[2];
  if (v49 >= v50)
  {
LABEL_110:
    __break(1u);
    goto LABEL_111;
  }
  v51 = *a3;
  *(_BYTE *)(*a3 + v49) = v48;
  v52 = v49 + 1;
  a3[2] = v49 + 1;
  v53 = a4 + result % 0xA;
  if (v53 != (char)v53)
  {
LABEL_111:
    __break(1u);
    goto LABEL_112;
  }
  if (v52 >= v50)
  {
LABEL_112:
    __break(1u);
    goto LABEL_113;
  }
  *(_BYTE *)(v51 + v52) = v53;
  v34 = v49 + 2;
LABEL_99:
  a3[2] = v34;
  return result;
}

char *closure #1 in append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)(char *__src, int64_t __n, _QWORD *a3)
{
  uint64_t v5;
  char *v6;
  char *v7;

  if (__src)
  {
    if (__n)
    {
      v5 = a3[2];
      if (a3[1] - v5 < __n)
      {
        __break(1u);
LABEL_13:
        __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
        __break(1u);
        return __src;
      }
      v6 = __src;
      v7 = (char *)(*a3 + v5);
      if (&v7[__n] > v6 && v7 < &v6[__n])
        goto LABEL_13;
      __src = (char *)memcpy(v7, v6, __n);
    }
    a3[2] += __n;
  }
  return __src;
}

Swift::Int Date.ISO8601FormatStyle.hashValue.getter()
{
  uint64_t v0;
  char v1;
  char v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[80];
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v1 = *(_BYTE *)(v0 + 1);
  v2 = *(_BYTE *)(v0 + 2);
  v3 = *(_BYTE *)(v0 + 3);
  v4 = *(_BYTE *)(v0 + 4);
  v5 = *(_QWORD *)(v0 + 8);
  v6 = *(_QWORD *)(v0 + 32);
  v8[72] = *(_BYTE *)v0;
  v8[73] = v1;
  v8[74] = v2;
  v8[75] = v3;
  v8[76] = v4;
  v9 = v5;
  v10 = *(_OWORD *)(v0 + 16);
  v11 = v6;
  Hasher.init(_seed:)();
  Date.ISO8601FormatStyle.hash(into:)((uint64_t)v8);
  return Hasher._finalize()();
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance Date.ISO8601FormatStyle@<X0>(Swift::String *a1@<X8>, Foundation::Date a2@<D0>)
{
  uint64_t result;
  Swift::String v4;

  v4 = Date.ISO8601FormatStyle.format(_:)(a2);
  result = v4._countAndFlagsBits;
  *a1 = v4;
  return result;
}

void protocol witness for Decodable.init(from:) in conformance Date.ISO8601FormatStyle(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  Date.ISO8601FormatStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.ISO8601FormatStyle(_QWORD *a1)
{
  return Date.ISO8601FormatStyle.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.ISO8601FormatStyle()
{
  uint64_t v0;
  char v1;
  char v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[80];
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v1 = *(_BYTE *)(v0 + 1);
  v2 = *(_BYTE *)(v0 + 2);
  v3 = *(_BYTE *)(v0 + 3);
  v4 = *(_BYTE *)(v0 + 4);
  v5 = *(_QWORD *)(v0 + 8);
  v6 = *(_QWORD *)(v0 + 32);
  v8[72] = *(_BYTE *)v0;
  v8[73] = v1;
  v8[74] = v2;
  v8[75] = v3;
  v8[76] = v4;
  v9 = v5;
  v10 = *(_OWORD *)(v0 + 16);
  v11 = v6;
  Hasher.init(_seed:)();
  Date.ISO8601FormatStyle.hash(into:)((uint64_t)v8);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.ISO8601FormatStyle()
{
  uint64_t v0;
  char v1;
  char v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[80];
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v1 = *(_BYTE *)(v0 + 1);
  v2 = *(_BYTE *)(v0 + 2);
  v3 = *(_BYTE *)(v0 + 3);
  v4 = *(_BYTE *)(v0 + 4);
  v5 = *(_QWORD *)(v0 + 8);
  v6 = *(_QWORD *)(v0 + 32);
  v8[72] = *(_BYTE *)v0;
  v8[73] = v1;
  v8[74] = v2;
  v8[75] = v3;
  v8[76] = v4;
  v9 = v5;
  v10 = *(_OWORD *)(v0 + 16);
  v11 = v6;
  Hasher.init(_seed:)();
  Date.ISO8601FormatStyle.hash(into:)((uint64_t)v8);
  return Hasher._finalize()();
}

void *Date.ISO8601FormatStyle.components(from:in:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  void *v6;
  id v7;
  __int128 v12;
  char userInfo;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t code;
  char *v28;
  char *v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *reserved;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 v39;
  BOOL v40;
  uint64_t v41;
  BOOL v42;
  char v43;
  char v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  Swift::String v48;
  Swift::String v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  id *v53;
  id *v54;
  void *v55;
  uint64_t v56;
  _QWORD *v57;
  __int128 v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  id v65;
  char *v66;
  id v67;
  char *v68;
  char v69;
  char v70;
  uint64_t v71;
  Swift::String v72;
  Swift::String v73;
  Swift::String v74;
  Swift::String v75;
  Swift::String v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  id *v80;
  id *v81;
  void *v82;
  uint64_t v83;
  _QWORD *v84;
  __int128 v85;
  unint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  uint64_t v91;
  id v92;
  char *v93;
  char *v94;
  id v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  char v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  Swift::String v108;
  Swift::String v109;
  Swift::String v110;
  Swift::String v111;
  Swift::String v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  id *v116;
  id *v117;
  void *v118;
  uint64_t v119;
  _QWORD *v120;
  __int128 v121;
  unint64_t v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  id v126;
  uint64_t v127;
  id v128;
  id v129;
  id v130;
  char *v131;
  char *v132;
  id v133;
  char *v134;
  Swift::String v135;
  Swift::String v136;
  Swift::String v137;
  Swift::String v138;
  Swift::String v139;
  __int128 v140;
  uint64_t v141;
  uint64_t v142;
  id *v143;
  id *v144;
  void *v145;
  uint64_t v146;
  _QWORD *v147;
  __int128 v148;
  unint64_t v149;
  char v150;
  uint64_t v151;
  uint64_t v152;
  id v153;
  uint64_t v154;
  id v155;
  char *v156;
  char *v157;
  id v158;
  char *v159;
  char *v160;
  char v161;
  char v162;
  char v163;
  char v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char v170;
  char v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char v177;
  uint64_t v178;
  Swift::String v179;
  Swift::String v180;
  Swift::String v181;
  Swift::String v182;
  Swift::String v183;
  __int128 v184;
  uint64_t v185;
  uint64_t v186;
  id *v187;
  id *v188;
  void *v189;
  uint64_t v190;
  _QWORD *v191;
  __int128 v192;
  unint64_t v193;
  char v194;
  uint64_t v195;
  uint64_t v196;
  id v197;
  uint64_t v198;
  id v199;
  char *v200;
  char *v201;
  id v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char v209;
  _QWORD *v210;
  char *v211;
  void *result;
  char *v213;
  char v214;
  Swift::String v215;
  Swift::String v216;
  Swift::String v217;
  Swift::String v218;
  Swift::String v219;
  __int128 v220;
  uint64_t v221;
  uint64_t v222;
  id *v223;
  id *v224;
  void *v225;
  uint64_t v226;
  _QWORD *v227;
  __int128 v228;
  unint64_t v229;
  char v230;
  uint64_t v231;
  uint64_t v232;
  id v233;
  uint64_t v234;
  id v235;
  char *v236;
  char *v237;
  id v238;
  char *v239;
  char v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  char v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  Swift::String v249;
  Swift::String v250;
  Swift::String v251;
  Swift::String v252;
  Swift::String v253;
  __int128 v254;
  uint64_t v255;
  uint64_t v256;
  id *v257;
  id *v258;
  void *v259;
  uint64_t v260;
  _QWORD *v261;
  __int128 v262;
  unint64_t v263;
  char v264;
  uint64_t v265;
  uint64_t v266;
  id v267;
  uint64_t v268;
  id v269;
  char *v270;
  char *v271;
  id v272;
  char *v273;
  unsigned __int8 *v274;
  int64_t v275;
  uint64_t v276;
  int v277;
  Swift::String v278;
  Swift::String v279;
  Swift::String v280;
  Swift::String v281;
  Swift::String v282;
  __int128 v283;
  uint64_t v284;
  uint64_t v285;
  id *v286;
  id *v287;
  void *v288;
  uint64_t v289;
  _QWORD *v290;
  __int128 v291;
  unint64_t v292;
  char v293;
  uint64_t v294;
  uint64_t v295;
  id v296;
  uint64_t v297;
  id v298;
  char *v299;
  char *v300;
  id v301;
  char *v302;
  uint64_t v303;
  char *v304;
  char v305;
  uint64_t v306;
  __int16 v307;
  int v308;
  char v309;
  __int16 v310;
  __int16 v311;
  __int16 v312;
  __int16 v313;
  int v314;
  Foundation::Date v315;
  Swift::String v316;
  Swift::String v317;
  __darwin_time_t tv_sec;
  uint64_t tv_nsec;
  uint64_t v320;
  uint64_t v321;
  int v322;
  uint64_t v323;
  unsigned __int8 *v324;
  int v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  Foundation::Date v333;
  Swift::String v334;
  Swift::String v335;
  Foundation::CocoaError v337;
  __int128 v338;
  uint64_t v339;
  __int128 __dst[18];
  timespec __tp;
  _QWORD __src[39];

  v7 = v6;
  __src[36] = *MEMORY[0x1E0C80C00];
  v12 = *(_OWORD *)(v5 + 16);
  *(_OWORD *)&v337._nsError._domain = *(_OWORD *)v5;
  v338 = v12;
  v339 = *(_QWORD *)(v5 + 32);
  userInfo = (char)v337._nsError._userInfo;
  if (!v337._nsError._userInfo)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Date.ISO8601FormatStyle.Fields>);
    v14 = swift_allocObject();
    v15 = specialized static Array._adoptStorage(_:count:)(v14, 5);
    *(_OWORD *)v16 = xmmword_18205C850;
    *(_OWORD *)(v16 + 16) = xmmword_182065BA0;
    *(_QWORD *)(v16 + 32) = 32;
    v17 = (_QWORD *)destructiveProjectEnumData for PredicateCodableError(v15, v16);
    v18 = v17[4];
    v19 = v17[5];
    if ((v19 & ~v18) == 0)
      v19 = 0;
    v20 = v19 | v18;
    v21 = v17[6];
    if ((v21 & ~v20) == 0)
      v21 = 0;
    v22 = v21 | v20;
    if ((v17[7] & ~v22) != 0)
      v23 = v17[7];
    else
      v23 = 0;
    v24 = v23 | v22;
    v25 = v17[8];
    outlined retain of Date.ISO8601FormatStyle((uint64_t)&v337._nsError._domain);
    swift_bridgeObjectRelease();
    if ((v25 & ~v24) != 0)
      v26 = v25;
    else
      v26 = 0;
    userInfo = v26 | v24;
    outlined release of Date.ISO8601FormatStyle((uint64_t)&v337._nsError._domain);
  }
  code = (unint64_t)&a3[a4];
  v337._nsError._reserved = a3;
  v337._nsError._code = (int64_t)&a3[a4];
  __dst[0] = 0uLL;
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(__dst, &__tp.tv_sec, 0, 1, 0, 1, 0, 1, (uint64_t)__src, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1);
  if ((userInfo & 1) == 0)
  {
    __src[6] = 1970;
    LOBYTE(__src[7]) = 0;
    if ((userInfo & 2) == 0)
    {
      v28 = a3;
      if ((userInfo & 4) == 0)
      {
        __src[8] = 1;
        LOBYTE(__src[9]) = 0;
        if ((userInfo & 8) == 0)
        {
          v29 = a3;
          if ((userInfo & 0x10) == 0)
            goto LABEL_128;
          goto LABEL_150;
        }
        goto LABEL_99;
      }
      goto LABEL_75;
    }
    goto LABEL_56;
  }
  v30 = BYTE3(v337._nsError._domain);
  if (BYTE3(v337._nsError._domain) == 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v31 & 1) == 0)
    {
      v32 = 10;
      goto LABEL_24;
    }
  }
  v32 = 4;
LABEL_24:
  v33 = 0;
  v34 = 0;
  reserved = v337._nsError._reserved;
  v36 = a3;
  while (1)
  {
    v28 = &a3[v33];
    if ((unint64_t)&a3[v33] >= code || (*v28 - 58) < 0xF6u)
    {
      v337._nsError._reserved = reserved;
      if (v33)
      {
LABEL_32:
        if (v34 == 0x7FFFFFFFFFFFFFFFLL)
          v41 = 0;
        else
          v41 = v34;
        v42 = v34 == 0x7FFFFFFFFFFFFFFFLL;
        if ((userInfo & 4) != 0)
        {
          __src[34] = v41;
          LOBYTE(__src[35]) = v42;
          if ((userInfo & 2) == 0)
          {
            if ((v30 & 1) != 0)
            {
              v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if ((v43 & 1) == 0)
                goto LABEL_75;
              if ((unint64_t)v28 >= code)
                goto LABEL_90;
            }
            else
            {
              swift_bridgeObjectRelease();
              if ((unint64_t)v28 >= code)
                goto LABEL_90;
            }
            v100 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, (uint64_t)v28++);
            v337._nsError._reserved = v28;
            if (v100 != 45)
              goto LABEL_90;
LABEL_75:
            if ((unint64_t)v28 < code)
            {
              v337._nsError._reserved = v28 + 1;
              if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, (uint64_t)v28) == 87)
              {
                v101 = specialized == infix<A>(_:_:)(SBYTE3(v337._nsError._domain), 1);
                v102 = 2;
                if ((v101 & 1) == 0)
                  v102 = 0;
                v103 = digits #1 (maxDigits:nanoseconds:_:) in Date.ISO8601FormatStyle.components(from:in:)(v102, (v101 & 1) == 0, 0, (unint64_t *)&v337._nsError._reserved, 0x30u, 0x39u, a1, a2);
                if (v6)
                  goto LABEL_217;
                v104 = v103;
                LOBYTE(__dst[0]) = 11;
                _CalendarGregorian.maximumRange(of:)((uint64_t)__dst);
                if ((v107 & 1) != 0)
                  goto LABEL_286;
                if (!specialized Range.contains(_:)(v104, v105, v106))
                  goto LABEL_215;
                DateComponents.weekOfYear.setter(v104, 0);
                if ((userInfo & 8) == 0)
                  goto LABEL_127;
LABEL_70:
                if ((BYTE3(v337._nsError._domain) & 1) != 0)
                {
                  v99 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  if ((v99 & 1) == 0)
                  {
LABEL_99:
                    if ((userInfo & 4) == 0)
                    {
                      v162 = specialized == infix<A>(_:_:)(SBYTE3(v337._nsError._domain), 1);
                      v163 = (v162 & 1) == 0;
                      v164 = v163;
                      if ((userInfo & 2) == 0)
                      {
                        if ((v162 & 1) != 0)
                          v165 = 3;
                        else
                          v165 = 0;
                        v166 = digits #1 (maxDigits:nanoseconds:_:) in Date.ISO8601FormatStyle.components(from:in:)(v165, v163, 0, (unint64_t *)&v337._nsError._reserved, 0x30u, 0x39u, a1, a2);
                        if (v7)
                          goto LABEL_217;
                        v167 = v166;
                        LOBYTE(__dst[0]) = 17;
                        _CalendarGregorian.maximumRange(of:)((uint64_t)__dst);
                        if ((v170 & 1) == 0)
                        {
                          if (specialized Range.contains(_:)(v167, v168, v169))
                          {
                            DateComponents.dayOfYear.setter(v167, 0);
                            goto LABEL_127;
                          }
LABEL_215:
                          __dst[0] = *(_OWORD *)&v337._nsError._domain;
                          __dst[1] = v338;
                          *(_QWORD *)&__dst[2] = v339;
                          v315._time = static Date.now.getter((double *)&__tp.tv_sec);
                          v316 = Date.ISO8601FormatStyle.format(_:)(v315);
                          v317._countAndFlagsBits = a1;
                          v317._object = a2;
                          parseError(_:exampleFormattedString:)((Foundation::CocoaError *)&__tp, v317, (Swift::String_optional)v316);
                          swift_bridgeObjectRelease();
                          goto LABEL_216;
                        }
                        goto LABEL_287;
                      }
                      goto LABEL_120;
                    }
                    v171 = specialized == infix<A>(_:_:)(SBYTE3(v337._nsError._domain), 1);
                    v172 = 2;
                    if ((v171 & 1) == 0)
                      v172 = 0;
                    v173 = digits #1 (maxDigits:nanoseconds:_:) in Date.ISO8601FormatStyle.components(from:in:)(v172, (v171 & 1) == 0, 0, (unint64_t *)&v337._nsError._reserved, 0x30u, 0x39u, a1, a2);
                    if (v7)
                      goto LABEL_217;
                    v174 = v173;
                    LOBYTE(__dst[0]) = 7;
                    _CalendarGregorian.maximumRange(of:)((uint64_t)__dst);
                    if ((v177 & 1) == 0)
                    {
                      v178 = v174 % 7 + 1;
                      if (!specialized Range.contains(_:)(v178, v175, v176))
                        goto LABEL_215;
                      DateComponents.weekday.setter(v178, 0);
                      goto LABEL_127;
                    }
                    goto LABEL_285;
                  }
LABEL_97:
                  v160 = (char *)v337._nsError._reserved;
                  if (v337._nsError._reserved < (void *)v337._nsError._code)
                  {
                    v161 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, (uint64_t)v337._nsError._reserved);
                    v337._nsError._reserved = v160 + 1;
                    if (v161 == 45)
                      goto LABEL_99;
                  }
                  __dst[0] = *(_OWORD *)&v337._nsError._domain;
                  __dst[1] = v338;
                  *(_QWORD *)&__dst[2] = v339;
                  __tp.tv_sec = 0;
                  __tp.tv_nsec = 0;
                  clock_gettime(_CLOCK_REALTIME, &__tp);
                  *(double *)&__tp.tv_sec = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
                  v179 = Date.ISO8601FormatStyle.format(_:)((Foundation::Date)__tp.tv_sec);
                  *(_QWORD *)&__dst[0] = 0;
                  *((_QWORD *)&__dst[0] + 1) = 0xE000000000000000;
                  _StringGuts.grow(_:)(88);
                  v180._countAndFlagsBits = 0x7020746F6E6E6143;
                  v180._object = (void *)0xED00002065737261;
                  String.append(_:)(v180);
                  v181._countAndFlagsBits = a1;
                  v181._object = a2;
                  String.append(_:)(v181);
                  v182._object = (void *)0x80000001823067D0;
                  v182._countAndFlagsBits = 0xD000000000000046;
                  String.append(_:)(v182);
                  String.append(_:)(v179);
                  v183._countAndFlagsBits = 46;
                  v183._object = (void *)0xE100000000000000;
                  String.append(_:)(v183);
                  v184 = __dst[0];
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
                  v185 = swift_allocObject();
                  v186 = specialized static Array._adoptStorage(_:count:)(v185, 1);
                  v188 = v187;
                  *v187 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
                  v188[1] = v189;
                  v188[5] = (id)MEMORY[0x1E0DEA968];
                  *((_OWORD *)v188 + 1) = v184;
                  v190 = destructiveProjectEnumData for PredicateCodableError(v186, v189);
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
                  v191 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
                  outlined init with copy of (String, Any)(v190 + 32, (uint64_t)__dst);
                  v192 = __dst[0];
                  swift_retain();
                  v193 = specialized __RawDictionaryStorage.find<A>(_:)(v192, *((uint64_t *)&v192 + 1));
                  if ((v194 & 1) == 0)
                  {
                    v191[(v193 >> 6) + 8] |= 1 << v193;
                    *(_OWORD *)(v191[6] + 16 * v193) = v192;
                    outlined init with take of Any(&__dst[1], (_OWORD *)(v191[7] + 32 * v193));
                    v195 = v191[2];
                    v40 = __OFADD__(v195, 1);
                    v196 = v195 + 1;
                    if (!v40)
                    {
                      v191[2] = v196;
                      swift_release();
                      swift_bridgeObjectRelease();
                      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
                      v197 = objc_allocWithZone((Class)NSError);
                      v198 = String._bridgeToObjectiveCImpl()();
                      swift_bridgeObjectRelease();
                      v7 = objc_msgSend(v197, sel_initWithDomain_code_userInfo_, v198, 2048, _NativeDictionary.bridged()());
                      swift_unknownObjectRelease();
                      swift_unknownObjectRelease();
                      a3 = (char *)objc_msgSend(v7, sel_domain);
                      v199 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
                      v201 = v200;

                      v202 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
                      a2 = v203;
                      if (v199 == v202 && v201 == v203)
                        goto LABEL_176;
                      a1 = _stringCompareWithSmolCheck(_:_:expecting:)();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      if ((a1 & 1) != 0)
                        goto LABEL_216;
                      __break(1u);
LABEL_120:
                      if (v164)
                        v204 = 0;
                      else
                        v204 = 2;
                      v205 = digits #1 (maxDigits:nanoseconds:_:) in Date.ISO8601FormatStyle.components(from:in:)(v204, v163, 0, (unint64_t *)&v337._nsError._reserved, 0x30u, 0x39u, a1, a2);
                      if (v7)
                        goto LABEL_217;
                      v206 = v205;
                      LOBYTE(__dst[0]) = 3;
                      _CalendarGregorian.maximumRange(of:)((uint64_t)__dst);
                      if ((v209 & 1) != 0)
                      {
LABEL_288:
                        __break(1u);
                        JUMPOUT(0x181E12040);
                      }
                      if (!specialized Range.contains(_:)(v206, v207, v208))
                        goto LABEL_215;
                      DateComponents.day.setter(v206, 0);
LABEL_127:
                      if ((userInfo & 0x10) == 0)
                        goto LABEL_128;
                      if (BYTE4(v337._nsError._domain) == 1)
                      {
                        v213 = (char *)v337._nsError._reserved;
                        code = v337._nsError._code;
                        if (v337._nsError._reserved >= (void *)v337._nsError._code
                          || (v214 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, (uint64_t)v337._nsError._reserved), v29 = v213 + 1, v337._nsError._reserved = v213 + 1, v214 != 84))
                        {
                          __dst[0] = *(_OWORD *)&v337._nsError._domain;
                          __dst[1] = v338;
                          *(_QWORD *)&__dst[2] = v339;
                          __tp.tv_sec = 0;
                          __tp.tv_nsec = 0;
                          clock_gettime(_CLOCK_REALTIME, &__tp);
                          *(double *)&__tp.tv_sec = (double)__tp.tv_sec
                                                  + -978307200.0
                                                  + (double)__tp.tv_nsec * 0.000000001;
                          v215 = Date.ISO8601FormatStyle.format(_:)((Foundation::Date)__tp.tv_sec);
                          *(_QWORD *)&__dst[0] = 0;
                          *((_QWORD *)&__dst[0] + 1) = 0xE000000000000000;
                          _StringGuts.grow(_:)(88);
                          v216._countAndFlagsBits = 0x7020746F6E6E6143;
                          v216._object = (void *)0xED00002065737261;
                          String.append(_:)(v216);
                          v217._countAndFlagsBits = a1;
                          v217._object = a2;
                          String.append(_:)(v217);
                          v218._object = (void *)0x80000001823067D0;
                          v218._countAndFlagsBits = 0xD000000000000046;
                          String.append(_:)(v218);
                          String.append(_:)(v215);
                          v219._countAndFlagsBits = 46;
                          v219._object = (void *)0xE100000000000000;
                          String.append(_:)(v219);
                          v220 = __dst[0];
                          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
                          v221 = swift_allocObject();
                          v222 = specialized static Array._adoptStorage(_:count:)(v221, 1);
                          v224 = v223;
                          *v223 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
                          v224[1] = v225;
                          v224[5] = (id)MEMORY[0x1E0DEA968];
                          *((_OWORD *)v224 + 1) = v220;
                          v226 = destructiveProjectEnumData for PredicateCodableError(v222, v225);
                          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
                          v227 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
                          outlined init with copy of (String, Any)(v226 + 32, (uint64_t)__dst);
                          v228 = __dst[0];
                          swift_retain();
                          v229 = specialized __RawDictionaryStorage.find<A>(_:)(v228, *((uint64_t *)&v228 + 1));
                          if ((v230 & 1) == 0)
                          {
                            v227[(v229 >> 6) + 8] |= 1 << v229;
                            *(_OWORD *)(v227[6] + 16 * v229) = v228;
                            outlined init with take of Any(&__dst[1], (_OWORD *)(v227[7] + 32 * v229));
                            v231 = v227[2];
                            v40 = __OFADD__(v231, 1);
                            v232 = v231 + 1;
                            if (!v40)
                            {
                              v227[2] = v232;
                              swift_release();
                              swift_bridgeObjectRelease();
                              static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
                              v233 = objc_allocWithZone((Class)NSError);
                              v234 = String._bridgeToObjectiveCImpl()();
                              swift_bridgeObjectRelease();
                              v7 = objc_msgSend(v233, sel_initWithDomain_code_userInfo_, v234, 2048, _NativeDictionary.bridged()());
                              swift_unknownObjectRelease();
                              swift_unknownObjectRelease();
                              a3 = (char *)objc_msgSend(v7, sel_domain);
                              v235 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
                              v237 = v236;

                              v238 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
                              a2 = v239;
                              if (v235 != v238 || v237 != v239)
                              {
                                a1 = _stringCompareWithSmolCheck(_:_:expecting:)();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                if ((a1 & 1) == 0)
                                {
                                  __break(1u);
                                  goto LABEL_140;
                                }
LABEL_216:
                                swift_willThrow();
                                goto LABEL_217;
                              }
LABEL_176:
                              swift_bridgeObjectRelease_n();
                              swift_bridgeObjectRelease();
                              goto LABEL_216;
                            }
                            goto LABEL_275;
                          }
LABEL_274:
                          __break(1u);
LABEL_275:
                          __break(1u);
                          goto LABEL_276;
                        }
                      }
                      else
                      {
                        if ((specialized BufferViewIterator.next()() & 0x1FF) != 0x20)
                        {
                          __dst[0] = *(_OWORD *)&v337._nsError._domain;
                          __dst[1] = v338;
                          *(_QWORD *)&__dst[2] = v339;
                          __tp.tv_sec = 0;
                          __tp.tv_nsec = 0;
                          clock_gettime(_CLOCK_REALTIME, &__tp);
                          *(double *)&__tp.tv_sec = (double)__tp.tv_sec
                                                  + -978307200.0
                                                  + (double)__tp.tv_nsec * 0.000000001;
                          v278 = Date.ISO8601FormatStyle.format(_:)((Foundation::Date)__tp.tv_sec);
                          *(_QWORD *)&__dst[0] = 0;
                          *((_QWORD *)&__dst[0] + 1) = 0xE000000000000000;
                          _StringGuts.grow(_:)(88);
                          v279._countAndFlagsBits = 0x7020746F6E6E6143;
                          v279._object = (void *)0xED00002065737261;
                          String.append(_:)(v279);
                          v280._countAndFlagsBits = a1;
                          v280._object = a2;
                          String.append(_:)(v280);
                          v281._object = (void *)0x80000001823067D0;
                          v281._countAndFlagsBits = 0xD000000000000046;
                          String.append(_:)(v281);
                          String.append(_:)(v278);
                          v282._countAndFlagsBits = 46;
                          v282._object = (void *)0xE100000000000000;
                          String.append(_:)(v282);
                          v283 = __dst[0];
                          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
                          v284 = swift_allocObject();
                          v285 = specialized static Array._adoptStorage(_:count:)(v284, 1);
                          v287 = v286;
                          *v286 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
                          v287[1] = v288;
                          v287[5] = (id)MEMORY[0x1E0DEA968];
                          *((_OWORD *)v287 + 1) = v283;
                          v289 = destructiveProjectEnumData for PredicateCodableError(v285, v288);
                          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
                          v290 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
                          outlined init with copy of (String, Any)(v289 + 32, (uint64_t)__dst);
                          v291 = __dst[0];
                          swift_retain();
                          v292 = specialized __RawDictionaryStorage.find<A>(_:)(v291, *((uint64_t *)&v291 + 1));
                          if ((v293 & 1) == 0)
                          {
                            v290[(v292 >> 6) + 8] |= 1 << v292;
                            *(_OWORD *)(v290[6] + 16 * v292) = v291;
                            outlined init with take of Any(&__dst[1], (_OWORD *)(v290[7] + 32 * v292));
                            v294 = v290[2];
                            v40 = __OFADD__(v294, 1);
                            v295 = v294 + 1;
                            if (!v40)
                            {
                              v290[2] = v295;
                              swift_release();
                              swift_bridgeObjectRelease();
                              static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
                              v296 = objc_allocWithZone((Class)NSError);
                              v297 = String._bridgeToObjectiveCImpl()();
                              swift_bridgeObjectRelease();
                              v7 = objc_msgSend(v296, sel_initWithDomain_code_userInfo_, v297, 2048, _NativeDictionary.bridged()());
                              swift_unknownObjectRelease();
                              swift_unknownObjectRelease();
                              a3 = (char *)objc_msgSend(v7, sel_domain);
                              v298 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
                              v300 = v299;

                              v301 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
                              a2 = v302;
                              if (v298 != v301 || v300 != v302)
                              {
                                a1 = _stringCompareWithSmolCheck(_:_:expecting:)();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                if ((a1 & 1) == 0)
                                {
                                  __break(1u);
                                  goto LABEL_200;
                                }
                                goto LABEL_216;
                              }
                              goto LABEL_176;
                            }
LABEL_277:
                            __break(1u);
                          }
LABEL_276:
                          __break(1u);
                          goto LABEL_277;
                        }
                        v29 = (char *)v337._nsError._reserved;
                        code = v337._nsError._code;
                        if (v337._nsError._reserved < (void *)v337._nsError._code)
                        {
                          v241 = v337._nsError._code - (unint64_t)v337._nsError._reserved;
                          while (*v29 == 32)
                          {
                            ++v29;
                            if (!--v241)
                            {
                              v29 = (char *)v337._nsError._code;
                              break;
                            }
                          }
                        }
                        v337._nsError._reserved = v29;
                      }
LABEL_150:
                      if (((uint64_t)v337._nsError._domain & 1) != 0)
                      {
                        v242 = digits #1 (maxDigits:nanoseconds:_:) in Date.ISO8601FormatStyle.components(from:in:)(2, 0, 0, (unint64_t *)&v337._nsError._reserved, 0x30u, 0x39u, a1, a2);
                        if (!v7)
                        {
                          DateComponents.hour.setter(v242, 0);
                          v243 = digits #1 (maxDigits:nanoseconds:_:) in Date.ISO8601FormatStyle.components(from:in:)(2, 0, 0, (unint64_t *)&v337._nsError._reserved, 0x30u, 0x39u, a1, a2);
                          DateComponents.minute.setter(v243, 0);
                          v244 = 2;
                          v245 = 0;
LABEL_153:
                          v246 = digits #1 (maxDigits:nanoseconds:_:) in Date.ISO8601FormatStyle.components(from:in:)(v244, v245, 0, (unint64_t *)&v337._nsError._reserved, 0x30u, 0x39u, a1, a2);
                          DateComponents.second.setter(v246, 0);
                          if ((BYTE1(v337._nsError._domain) & 1) != 0)
                          {
                            expectCharacter #1 (_:_:) in Date.ISO8601FormatStyle.components(from:in:)(46, (unsigned __int8 **)&v337._nsError._reserved, a1, a2);
                            v247 = digits #1 (maxDigits:nanoseconds:_:) in Date.ISO8601FormatStyle.components(from:in:)(0, 1, 1, (unint64_t *)&v337._nsError._reserved, 0x30u, 0x39u, a1, a2);
                            v7 = 0;
                            DateComponents.nanosecond.setter(v247, 0);
                          }
LABEL_128:
                          if ((userInfo & 0x20) == 0)
                          {
                            v210 = a5;
                            goto LABEL_130;
                          }
LABEL_140:
                          if ((BYTE4(v337._nsError._domain) & 1) != 0)
                          {
                            v240 = _stringCompareWithSmolCheck(_:_:expecting:)();
                            swift_bridgeObjectRelease();
                            if ((v240 & 1) == 0)
                            {
LABEL_202:
                              v307 = specialized BufferViewIterator.next()();
                              if ((v307 & 0x100) == 0)
                              {
                                v308 = v307;
                                v309 = 1;
                                switch((char)v307)
                                {
                                  case '+':
                                    goto LABEL_224;
                                  case '-':
                                    goto LABEL_223;
                                  case 'G':
                                  case 'g':
                                    v310 = specialized BufferViewIterator.next()();
                                    if ((v310 & 0x100) == 0 && (v310 | 0x20) == 0x6D)
                                    {
                                      v311 = specialized BufferViewIterator.next()();
                                      if ((v311 & 0x100) == 0 && (v311 | 0x20) == 0x74)
                                        goto LABEL_213;
                                    }
                                    if (v308 != 85)
                                      goto LABEL_215;
LABEL_209:
                                    v312 = specialized BufferViewIterator.next()();
                                    if ((v312 & 0x100) != 0)
                                      goto LABEL_215;
                                    if ((v312 | 0x20) != 0x74)
                                      goto LABEL_215;
                                    v313 = specialized BufferViewIterator.next()();
                                    if ((v313 & 0x100) != 0 || (v313 | 0x20) != 0x63)
                                      goto LABEL_215;
LABEL_213:
                                    if (v337._nsError._reserved < (void *)v337._nsError._code)
                                      v314 = *(unsigned __int8 *)v337._nsError._reserved;
                                    else
                                      v314 = 0;
                                    if (v337._nsError._reserved >= (void *)v337._nsError._code)
                                      goto LABEL_260;
                                    if (v314 == 43)
                                      goto LABEL_238;
                                    if (v314 != 45)
                                      goto LABEL_260;
                                    v309 = 0;
LABEL_238:
                                    if (v337._nsError._reserved < (void *)v337._nsError._code)
                                      ++v337._nsError._reserved;
                                    break;
                                  case 'U':
                                  case 'u':
                                    goto LABEL_209;
                                  case 'Z':
                                  case 'z':
                                    static TimeZone.gmt.getter(__dst);
                                    tv_nsec = *((_QWORD *)&__dst[0] + 1);
                                    tv_sec = *(_QWORD *)&__dst[0];
                                    goto LABEL_219;
                                  default:
                                    goto LABEL_215;
                                }
                                goto LABEL_224;
                              }
                              goto LABEL_215;
                            }
                            goto LABEL_166;
                          }
LABEL_165:
                          swift_bridgeObjectRelease();
LABEL_166:
                          v274 = (unsigned __int8 *)v337._nsError._reserved;
                          v275 = v337._nsError._code;
                          if (v337._nsError._reserved >= (void *)v337._nsError._code)
                            goto LABEL_202;
                          if (*(_BYTE *)v337._nsError._reserved != 32)
                            goto LABEL_201;
                          v276 = ~(uint64_t)v337._nsError._reserved + v337._nsError._code;
                          while (v276)
                          {
                            v277 = *++v274;
                            --v276;
                            if (v277 != 32)
                              goto LABEL_201;
                          }
LABEL_200:
                          v274 = (unsigned __int8 *)v275;
LABEL_201:
                          v337._nsError._reserved = v274;
                          goto LABEL_202;
                        }
LABEL_217:
                        memcpy(__dst, __src, 0x11AuLL);
                        return (void *)outlined release of DateComponents((uint64_t)__dst);
                      }
                      v248 = code - (_QWORD)v29;
                      if (code < (unint64_t)v29)
                        v248 = 0;
                      if (code > (unint64_t)v29 && (*v29 - 58) >= 0xF6u)
                      {
                        v303 = (*v29 - 48);
                        v304 = v29 + 1;
                        if (v248 != 1 && (*v304 - 58) >= 0xF6u)
                        {
                          v303 = 10 * (*v29 - 48) + (*v304 - 48);
                          v304 = v29 + 2;
                          if (v248 != 2 && (*v304 - 58) >= 0xF6u)
                          {
                            v303 = 10 * v303 + (*v304 - 48);
                            v304 = v29 + 3;
                            if (v248 != 3 && (*v304 - 58) >= 0xF6u)
                            {
                              v303 = 10 * v303 + (*v304 - 48);
                              v304 = v29 + 4;
                              if (v248 != 4 && (*v304 - 58) >= 0xF6u)
                              {
                                v303 = 10 * v303 + (*v304 - 48);
                                v304 = v29 + 5;
                                if (v248 != 5 && (*v304 - 58) >= 0xF6u)
                                {
                                  v303 = 10 * v303 + (*v304 - 48);
                                  v304 = v29 + 6;
                                  if (v248 != 6 && (*v304 - 58) >= 0xF6u)
                                  {
                                    v303 = 10 * v303 + (*v304 - 48);
                                    v304 = v29 + 7;
                                    if (v248 != 7 && (*v304 - 58) >= 0xF6u)
                                    {
                                      v303 = 10 * v303 + (*v304 - 48);
                                      v304 = v29 + 8;
                                      if (v248 != 8 && (*v304 - 58) >= 0xF6u)
                                      {
                                        v303 = 10 * v303 + (*v304 - 48);
                                        v304 = v29 + 9;
                                        if (v248 != 9)
                                        {
                                          v305 = *v304;
                                          if ((*v304 - 58) >= 0xF6u)
                                          {
                                            v304 = v29 + 10;
                                            v303 = 10 * v303 + (v305 - 48);
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        v337._nsError._reserved = v304;
                        DateComponents.hour.setter(v303, 0);
                        expectCharacter #1 (_:_:) in Date.ISO8601FormatStyle.components(from:in:)(58, (unsigned __int8 **)&v337._nsError._reserved, a1, a2);
                        if (v7)
                          goto LABEL_217;
                        v306 = digits #1 (maxDigits:nanoseconds:_:) in Date.ISO8601FormatStyle.components(from:in:)(0, 1, 0, (unint64_t *)&v337._nsError._reserved, 0x30u, 0x39u, a1, a2);
                        v7 = 0;
                        DateComponents.minute.setter(v306, 0);
                        expectCharacter #1 (_:_:) in Date.ISO8601FormatStyle.components(from:in:)(58, (unsigned __int8 **)&v337._nsError._reserved, a1, a2);
                        v244 = 0;
                        v245 = 1;
                        goto LABEL_153;
                      }
                      v337._nsError._reserved = v29;
                      __dst[0] = *(_OWORD *)&v337._nsError._domain;
                      __dst[1] = v338;
                      *(_QWORD *)&__dst[2] = v339;
                      __tp.tv_sec = 0;
                      __tp.tv_nsec = 0;
                      clock_gettime(_CLOCK_REALTIME, &__tp);
                      *(double *)&__tp.tv_sec = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
                      v249 = Date.ISO8601FormatStyle.format(_:)((Foundation::Date)__tp.tv_sec);
                      *(_QWORD *)&__dst[0] = 0;
                      *((_QWORD *)&__dst[0] + 1) = 0xE000000000000000;
                      _StringGuts.grow(_:)(88);
                      v250._countAndFlagsBits = 0x7020746F6E6E6143;
                      v250._object = (void *)0xED00002065737261;
                      String.append(_:)(v250);
                      v251._countAndFlagsBits = a1;
                      v251._object = a2;
                      String.append(_:)(v251);
                      v252._object = (void *)0x80000001823067D0;
                      v252._countAndFlagsBits = 0xD000000000000046;
                      String.append(_:)(v252);
                      String.append(_:)(v249);
                      v253._countAndFlagsBits = 46;
                      v253._object = (void *)0xE100000000000000;
                      String.append(_:)(v253);
                      v254 = __dst[0];
                      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
                      v255 = swift_allocObject();
                      v256 = specialized static Array._adoptStorage(_:count:)(v255, 1);
                      v258 = v257;
                      *v257 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
                      v258[1] = v259;
                      v258[5] = (id)MEMORY[0x1E0DEA968];
                      *((_OWORD *)v258 + 1) = v254;
                      v260 = destructiveProjectEnumData for PredicateCodableError(v256, v259);
                      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
                      v261 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
                      outlined init with copy of (String, Any)(v260 + 32, (uint64_t)__dst);
                      v262 = __dst[0];
                      swift_retain();
                      v263 = specialized __RawDictionaryStorage.find<A>(_:)(v262, *((uint64_t *)&v262 + 1));
                      if ((v264 & 1) == 0)
                      {
                        v261[(v263 >> 6) + 8] |= 1 << v263;
                        *(_OWORD *)(v261[6] + 16 * v263) = v262;
                        outlined init with take of Any(&__dst[1], (_OWORD *)(v261[7] + 32 * v263));
                        v265 = v261[2];
                        v40 = __OFADD__(v265, 1);
                        v266 = v265 + 1;
                        if (!v40)
                        {
                          v261[2] = v266;
                          swift_release();
                          swift_bridgeObjectRelease();
                          static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
                          v267 = objc_allocWithZone((Class)NSError);
                          v268 = String._bridgeToObjectiveCImpl()();
                          swift_bridgeObjectRelease();
                          v7 = objc_msgSend(v267, sel_initWithDomain_code_userInfo_, v268, 2048, _NativeDictionary.bridged()());
                          swift_unknownObjectRelease();
                          swift_unknownObjectRelease();
                          a3 = (char *)objc_msgSend(v7, sel_domain);
                          v269 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
                          v271 = v270;

                          v272 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
                          a2 = v273;
                          if (v269 != v272 || v271 != v273)
                          {
                            a1 = _stringCompareWithSmolCheck(_:_:expecting:)();
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            if ((a1 & 1) == 0)
                            {
                              __break(1u);
                              goto LABEL_165;
                            }
                            goto LABEL_216;
                          }
                          goto LABEL_176;
                        }
                        goto LABEL_273;
                      }
LABEL_272:
                      __break(1u);
LABEL_273:
                      __break(1u);
                      goto LABEL_274;
                    }
LABEL_271:
                    __break(1u);
                    goto LABEL_272;
                  }
LABEL_270:
                  __break(1u);
                  goto LABEL_271;
                }
LABEL_96:
                swift_bridgeObjectRelease();
                goto LABEL_97;
              }
            }
            __dst[0] = *(_OWORD *)&v337._nsError._domain;
            __dst[1] = v338;
            *(_QWORD *)&__dst[2] = v339;
            __tp.tv_sec = 0;
            __tp.tv_nsec = 0;
            clock_gettime(_CLOCK_REALTIME, &__tp);
            *(double *)&__tp.tv_sec = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
            v108 = Date.ISO8601FormatStyle.format(_:)((Foundation::Date)__tp.tv_sec);
            *(_QWORD *)&__dst[0] = 0;
            *((_QWORD *)&__dst[0] + 1) = 0xE000000000000000;
            _StringGuts.grow(_:)(88);
            v109._countAndFlagsBits = 0x7020746F6E6E6143;
            v109._object = (void *)0xED00002065737261;
            String.append(_:)(v109);
            v110._countAndFlagsBits = a1;
            v110._object = a2;
            String.append(_:)(v110);
            v111._object = (void *)0x80000001823067D0;
            v111._countAndFlagsBits = 0xD000000000000046;
            String.append(_:)(v111);
            String.append(_:)(v108);
            v112._countAndFlagsBits = 46;
            v112._object = (void *)0xE100000000000000;
            String.append(_:)(v112);
            v113 = __dst[0];
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
            v114 = swift_allocObject();
            v115 = specialized static Array._adoptStorage(_:count:)(v114, 1);
            v117 = v116;
            *v116 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
            v117[1] = v118;
            v117[5] = (id)MEMORY[0x1E0DEA968];
            *((_OWORD *)v117 + 1) = v113;
            v119 = destructiveProjectEnumData for PredicateCodableError(v115, v118);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
            v120 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
            outlined init with copy of (String, Any)(v119 + 32, (uint64_t)__dst);
            v121 = __dst[0];
            swift_retain();
            v122 = specialized __RawDictionaryStorage.find<A>(_:)(v121, *((uint64_t *)&v121 + 1));
            if ((v123 & 1) == 0)
            {
              v120[(v122 >> 6) + 8] |= 1 << v122;
              *(_OWORD *)(v120[6] + 16 * v122) = v121;
              outlined init with take of Any(&__dst[1], (_OWORD *)(v120[7] + 32 * v122));
              v124 = v120[2];
              v40 = __OFADD__(v124, 1);
              v125 = v124 + 1;
              if (!v40)
              {
                v120[2] = v125;
                swift_release();
                swift_bridgeObjectRelease();
                static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
                v126 = objc_allocWithZone((Class)NSError);
                v127 = String._bridgeToObjectiveCImpl()();
                swift_bridgeObjectRelease();
                v128 = objc_msgSend(v126, sel_initWithDomain_code_userInfo_, v127, 2048, _NativeDictionary.bridged()());
                swift_unknownObjectRelease();
                swift_unknownObjectRelease();
                v129 = objc_msgSend(v128, sel_domain);
                v130 = static String._unconditionallyBridgeFromObjectiveC(_:)(v129);
                v132 = v131;

                v133 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
                a2 = v134;
                if (v130 == v133 && v132 == v134)
                  goto LABEL_176;
                a1 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if ((a1 & 1) != 0)
                  goto LABEL_216;
                __break(1u);
LABEL_90:
                __dst[0] = *(_OWORD *)&v337._nsError._domain;
                __dst[1] = v338;
                *(_QWORD *)&__dst[2] = v339;
                __tp.tv_sec = 0;
                __tp.tv_nsec = 0;
                clock_gettime(_CLOCK_REALTIME, &__tp);
                *(double *)&__tp.tv_sec = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
                v135 = Date.ISO8601FormatStyle.format(_:)((Foundation::Date)__tp.tv_sec);
                *(_QWORD *)&__dst[0] = 0;
                *((_QWORD *)&__dst[0] + 1) = 0xE000000000000000;
                _StringGuts.grow(_:)(88);
                v136._countAndFlagsBits = 0x7020746F6E6E6143;
                v136._object = (void *)0xED00002065737261;
                String.append(_:)(v136);
                v137._countAndFlagsBits = a1;
                v137._object = a2;
                String.append(_:)(v137);
                v138._object = (void *)0x80000001823067D0;
                v138._countAndFlagsBits = 0xD000000000000046;
                String.append(_:)(v138);
                String.append(_:)(v135);
                v139._countAndFlagsBits = 46;
                v139._object = (void *)0xE100000000000000;
                String.append(_:)(v139);
                v140 = __dst[0];
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
                v141 = swift_allocObject();
                v142 = specialized static Array._adoptStorage(_:count:)(v141, 1);
                v144 = v143;
                *v143 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
                v144[1] = v145;
                v144[5] = (id)MEMORY[0x1E0DEA968];
                *((_OWORD *)v144 + 1) = v140;
                v146 = destructiveProjectEnumData for PredicateCodableError(v142, v145);
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
                v147 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
                outlined init with copy of (String, Any)(v146 + 32, (uint64_t)__dst);
                v148 = __dst[0];
                swift_retain();
                v149 = specialized __RawDictionaryStorage.find<A>(_:)(v148, *((uint64_t *)&v148 + 1));
                if ((v150 & 1) == 0)
                {
                  v147[(v149 >> 6) + 8] |= 1 << v149;
                  *(_OWORD *)(v147[6] + 16 * v149) = v148;
                  outlined init with take of Any(&__dst[1], (_OWORD *)(v147[7] + 32 * v149));
                  v151 = v147[2];
                  v40 = __OFADD__(v151, 1);
                  v152 = v151 + 1;
                  if (!v40)
                  {
                    v147[2] = v152;
                    swift_release();
                    swift_bridgeObjectRelease();
                    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
                    v153 = objc_allocWithZone((Class)NSError);
                    v154 = String._bridgeToObjectiveCImpl()();
                    swift_bridgeObjectRelease();
                    v7 = objc_msgSend(v153, sel_initWithDomain_code_userInfo_, v154, 2048, _NativeDictionary.bridged()());
                    swift_unknownObjectRelease();
                    swift_unknownObjectRelease();
                    a3 = (char *)objc_msgSend(v7, sel_domain);
                    v155 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
                    v157 = v156;

                    v158 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
                    a2 = v159;
                    if (v155 == v158 && v157 == v159)
                      goto LABEL_176;
                    a1 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    if ((a1 & 1) != 0)
                      goto LABEL_216;
                    __break(1u);
                    goto LABEL_96;
                  }
LABEL_269:
                  __break(1u);
                  goto LABEL_270;
                }
LABEL_268:
                __break(1u);
                goto LABEL_269;
              }
              goto LABEL_265;
            }
LABEL_264:
            __break(1u);
LABEL_265:
            __break(1u);
            goto LABEL_266;
          }
        }
        else
        {
          __src[6] = v41;
          LOBYTE(__src[7]) = v42;
          if ((userInfo & 2) == 0)
          {
            __src[8] = 1;
            LOBYTE(__src[9]) = 0;
            if ((userInfo & 8) == 0)
              goto LABEL_127;
            goto LABEL_70;
          }
        }
        if ((v30 & 1) != 0)
        {
          v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v44 & 1) == 0)
          {
LABEL_56:
            if (BYTE3(v337._nsError._domain) == 1)
            {
              swift_bridgeObjectRelease();
LABEL_59:
              v70 = 0;
              v71 = 2;
LABEL_67:
              v97 = digits #1 (maxDigits:nanoseconds:_:) in Date.ISO8601FormatStyle.components(from:in:)(v71, v70, 0, (unint64_t *)&v337._nsError._reserved, 0x30u, 0x39u, a1, a2);
              if (v7)
                goto LABEL_217;
              v98 = v97;
              if (!specialized Range.contains(_:)(v97, 1, 13))
                goto LABEL_215;
              DateComponents.month.setter(v98, 0);
              if ((userInfo & 8) == 0)
                goto LABEL_127;
              goto LABEL_70;
            }
            v69 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v69 & 1) != 0)
              goto LABEL_59;
LABEL_66:
            v71 = 0;
            v70 = 1;
            goto LABEL_67;
          }
          if ((unint64_t)v28 >= code)
            goto LABEL_60;
LABEL_55:
          v337._nsError._reserved = v28 + 1;
          if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, (uint64_t)v28) == 45)
            goto LABEL_56;
LABEL_60:
          __dst[0] = *(_OWORD *)&v337._nsError._domain;
          __dst[1] = v338;
          *(_QWORD *)&__dst[2] = v339;
          __tp.tv_sec = 0;
          __tp.tv_nsec = 0;
          clock_gettime(_CLOCK_REALTIME, &__tp);
          *(double *)&__tp.tv_sec = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
          v72 = Date.ISO8601FormatStyle.format(_:)((Foundation::Date)__tp.tv_sec);
          *(_QWORD *)&__dst[0] = 0;
          *((_QWORD *)&__dst[0] + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(88);
          v73._countAndFlagsBits = 0x7020746F6E6E6143;
          v73._object = (void *)0xED00002065737261;
          String.append(_:)(v73);
          v74._countAndFlagsBits = a1;
          v74._object = a2;
          String.append(_:)(v74);
          v75._object = (void *)0x80000001823067D0;
          v75._countAndFlagsBits = 0xD000000000000046;
          String.append(_:)(v75);
          String.append(_:)(v72);
          v76._countAndFlagsBits = 46;
          v76._object = (void *)0xE100000000000000;
          String.append(_:)(v76);
          v77 = __dst[0];
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
          v78 = swift_allocObject();
          v79 = specialized static Array._adoptStorage(_:count:)(v78, 1);
          v81 = v80;
          *v80 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
          v81[1] = v82;
          v81[5] = (id)MEMORY[0x1E0DEA968];
          *((_OWORD *)v81 + 1) = v77;
          v83 = destructiveProjectEnumData for PredicateCodableError(v79, v82);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
          v84 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
          outlined init with copy of (String, Any)(v83 + 32, (uint64_t)__dst);
          v85 = __dst[0];
          swift_retain();
          v86 = specialized __RawDictionaryStorage.find<A>(_:)(v85, *((uint64_t *)&v85 + 1));
          if ((v87 & 1) != 0)
          {
LABEL_266:
            __break(1u);
            goto LABEL_267;
          }
          v84[(v86 >> 6) + 8] |= 1 << v86;
          *(_OWORD *)(v84[6] + 16 * v86) = v85;
          outlined init with take of Any(&__dst[1], (_OWORD *)(v84[7] + 32 * v86));
          v88 = v84[2];
          v40 = __OFADD__(v88, 1);
          v89 = v88 + 1;
          if (v40)
          {
LABEL_267:
            __break(1u);
            goto LABEL_268;
          }
          v84[2] = v89;
          swift_release();
          swift_bridgeObjectRelease();
          static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
          v90 = objc_allocWithZone((Class)NSError);
          v91 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v7 = objc_msgSend(v90, sel_initWithDomain_code_userInfo_, v91, 2048, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          a3 = (char *)objc_msgSend(v7, sel_domain);
          v92 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
          v94 = v93;

          v95 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
          a2 = v96;
          if (v92 == v95 && v94 == v96)
            goto LABEL_176;
          a1 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((a1 & 1) != 0)
            goto LABEL_216;
          __break(1u);
          goto LABEL_66;
        }
LABEL_54:
        swift_bridgeObjectRelease();
        if ((unint64_t)v28 >= code)
          goto LABEL_60;
        goto LABEL_55;
      }
      __dst[0] = *(_OWORD *)&v337._nsError._domain;
      __dst[1] = v338;
      *(_QWORD *)&__dst[2] = v339;
      __tp.tv_sec = 0;
      __tp.tv_nsec = 0;
      clock_gettime(_CLOCK_REALTIME, &__tp);
      *(double *)&__tp.tv_sec = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
      v45 = Date.ISO8601FormatStyle.format(_:)((Foundation::Date)__tp.tv_sec);
      code = (unint64_t)v45._object;
      *(_QWORD *)&__dst[0] = 0;
      *((_QWORD *)&__dst[0] + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(88);
      v46._countAndFlagsBits = 0x7020746F6E6E6143;
      v46._object = (void *)0xED00002065737261;
      String.append(_:)(v46);
      v47._countAndFlagsBits = a1;
      v47._object = a2;
      String.append(_:)(v47);
      v48._object = (void *)0x80000001823067D0;
      v48._countAndFlagsBits = 0xD000000000000046;
      String.append(_:)(v48);
      String.append(_:)(v45);
      v49._countAndFlagsBits = 46;
      v49._object = (void *)0xE100000000000000;
      String.append(_:)(v49);
      v50 = __dst[0];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      v51 = swift_allocObject();
      v52 = specialized static Array._adoptStorage(_:count:)(v51, 1);
      v54 = v53;
      *v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
      v54[1] = v55;
      v54[5] = (id)MEMORY[0x1E0DEA968];
      *((_OWORD *)v54 + 1) = v50;
      v56 = destructiveProjectEnumData for PredicateCodableError(v52, v55);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v57 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
      outlined init with copy of (String, Any)(v56 + 32, (uint64_t)__dst);
      v58 = __dst[0];
      swift_retain();
      v59 = specialized __RawDictionaryStorage.find<A>(_:)(v58, *((uint64_t *)&v58 + 1));
      if ((v60 & 1) != 0)
      {
        __break(1u);
      }
      else
      {
        v57[(v59 >> 6) + 8] |= 1 << v59;
        *(_OWORD *)(v57[6] + 16 * v59) = v58;
        outlined init with take of Any(&__dst[1], (_OWORD *)(v57[7] + 32 * v59));
        v61 = v57[2];
        v40 = __OFADD__(v61, 1);
        v62 = v61 + 1;
        if (!v40)
        {
          v57[2] = v62;
          swift_release();
          swift_bridgeObjectRelease();
          static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
          v63 = objc_allocWithZone((Class)NSError);
          v64 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v7 = objc_msgSend(v63, sel_initWithDomain_code_userInfo_, v64, 2048, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          a3 = (char *)objc_msgSend(v7, sel_domain);
          v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
          v28 = v66;

          v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
          a2 = v68;
          if (v65 == v67 && v28 == v68)
            goto LABEL_176;
          a1 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((a1 & 1) != 0)
            goto LABEL_216;
          __break(1u);
          goto LABEL_54;
        }
      }
      __break(1u);
      goto LABEL_264;
    }
    v37 = (unsigned __int128)(v34 * (__int128)10) >> 64;
    v38 = 10 * v34;
    if (v37 != v38 >> 63)
      break;
    v39 = *v28 - 48;
    v40 = __OFADD__(v38, v39);
    v34 = v38 + v39;
    if (v40)
      goto LABEL_222;
    reserved = v36 + 1;
    ++v33;
    ++v36;
    if (v32 == v33)
    {
      v28 = &a3[v33];
      v337._nsError._reserved = &a3[v33];
      goto LABEL_32;
    }
  }
  v337._nsError._reserved = reserved;
  __break(1u);
LABEL_222:
  v337._nsError._reserved = reserved;
  __break(1u);
LABEL_223:
  v309 = 0;
LABEL_224:
  v320 = digits #1 (maxDigits:nanoseconds:_:) in Date.ISO8601FormatStyle.components(from:in:)(2, 0, 0, (unint64_t *)&v337._nsError._reserved, 0x30u, 0x39u, a1, a2);
  if (v7)
    goto LABEL_217;
  v321 = v320;
  if (v337._nsError._reserved < (void *)v337._nsError._code)
    v322 = *(unsigned __int8 *)v337._nsError._reserved;
  else
    v322 = 0;
  if (v337._nsError._reserved < (void *)v337._nsError._code && v322 == 58)
    ++v337._nsError._reserved;
  v323 = digits #1 (maxDigits:nanoseconds:_:) in Date.ISO8601FormatStyle.components(from:in:)(2, 0, 0, (unint64_t *)&v337._nsError._reserved, 0x30u, 0x39u, a1, a2);
  v324 = (unsigned __int8 *)v337._nsError._reserved;
  if (v337._nsError._reserved < (void *)v337._nsError._code)
    v325 = *(unsigned __int8 *)v337._nsError._reserved;
  else
    v325 = 0;
  if (v337._nsError._reserved < (void *)v337._nsError._code && v325 == 58)
    v324 = (unsigned __int8 *)++v337._nsError._reserved;
  if ((unint64_t)v324 >= v337._nsError._code || *v324 - 48 > 9)
  {
LABEL_252:
    v331 = 3600 * v321;
    if ((unsigned __int128)(v321 * (__int128)3600) >> 64 == (3600 * v321) >> 63)
    {
      v332 = 60 * v323;
      if ((unsigned __int128)(v323 * (__int128)60) >> 64 == (60 * v323) >> 63)
      {
        v323 = v331 + v332;
        if (!__OFADD__(v331, v332))
          goto LABEL_255;
        goto LABEL_280;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_280:
    __break(1u);
LABEL_281:
    __break(1u);
    goto LABEL_282;
  }
  v326 = v323;
  v327 = digits #1 (maxDigits:nanoseconds:_:) in Date.ISO8601FormatStyle.components(from:in:)(2, 0, 0, (unint64_t *)&v337._nsError._reserved, 0x30u, 0x39u, a1, a2);
  v328 = 3600 * v321;
  if ((unsigned __int128)(v321 * (__int128)3600) >> 64 != (3600 * v321) >> 63)
  {
LABEL_282:
    __break(1u);
    goto LABEL_283;
  }
  v329 = 60 * v326;
  if ((unsigned __int128)(v326 * (__int128)60) >> 64 != (60 * v326) >> 63)
  {
LABEL_283:
    __break(1u);
    goto LABEL_284;
  }
  v40 = __OFADD__(v328, v329);
  v330 = v328 + v329;
  if (v40)
  {
LABEL_284:
    __break(1u);
LABEL_285:
    __break(1u);
LABEL_286:
    __break(1u);
LABEL_287:
    __break(1u);
    goto LABEL_288;
  }
  v40 = __OFADD__(v330, v327);
  v323 = v330 + v327;
  if (v40)
  {
    __break(1u);
    goto LABEL_252;
  }
LABEL_255:
  if (!v323)
  {
LABEL_260:
    v210 = a5;
    static TimeZone.gmt.getter(__dst);
    tv_nsec = *((_QWORD *)&__dst[0] + 1);
    tv_sec = *(_QWORD *)&__dst[0];
    goto LABEL_220;
  }
  if ((v309 & 1) == 0)
  {
    v40 = __OFSUB__(0, v323);
    v323 = -v323;
    if (v40)
      goto LABEL_281;
  }
  TimeZone.init(secondsFromGMT:)(v323, &__tp);
  tv_sec = __tp.tv_sec;
  if (!__tp.tv_sec)
  {
    __dst[0] = *(_OWORD *)&v337._nsError._domain;
    __dst[1] = v338;
    *(_QWORD *)&__dst[2] = v339;
    v333._time = static Date.now.getter((double *)&v337);
    v334 = Date.ISO8601FormatStyle.format(_:)(v333);
    v335._countAndFlagsBits = a1;
    v335._object = a2;
    parseError(_:exampleFormattedString:)(&v337, v335, (Swift::String_optional)v334);
    swift_bridgeObjectRelease();
    goto LABEL_216;
  }
  tv_nsec = __tp.tv_nsec;
LABEL_219:
  v210 = a5;
LABEL_220:
  *(_QWORD *)&__dst[0] = tv_sec;
  *((_QWORD *)&__dst[0] + 1) = tv_nsec;
  DateComponents.timeZone.setter((uint64_t *)__dst);
LABEL_130:
  v211 = (char *)((char *)v337._nsError._reserved - (char *)a3);
  result = memcpy(v210 + 1, __src, 0x11AuLL);
  *v210 = v211;
  return result;
}

uint64_t expectCharacter #1 (_:_:) in Date.ISO8601FormatStyle.components(from:in:)(uint64_t result, unsigned __int8 **a2, uint64_t a3, void *a4)
{
  unsigned __int8 *v6;
  int v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  __darwin_time_t tv_sec;
  uint64_t tv_nsec;
  uint64_t inited;
  uint64_t v16;
  _QWORD *v17;
  __darwin_time_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  __darwin_time_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  timespec __tp;
  __int128 v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  if (*a2 >= a2[1] || (v7 = *v6, *a2 = v6 + 1, v7 != result))
  {
    __tp.tv_sec = 0;
    __tp.tv_nsec = 0;
    clock_gettime(_CLOCK_REALTIME, &__tp);
    *(double *)&__tp.tv_sec = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
    v8 = Date.ISO8601FormatStyle.format(_:)((Foundation::Date)__tp.tv_sec);
    __tp.tv_sec = 0;
    __tp.tv_nsec = 0xE000000000000000;
    _StringGuts.grow(_:)(88);
    v9._countAndFlagsBits = 0x7020746F6E6E6143;
    v9._object = (void *)0xED00002065737261;
    String.append(_:)(v9);
    v10._countAndFlagsBits = a3;
    v10._object = a4;
    String.append(_:)(v10);
    v11._object = (void *)0x80000001823067D0;
    v11._countAndFlagsBits = 0xD000000000000046;
    String.append(_:)(v11);
    String.append(_:)(v8);
    v12._countAndFlagsBits = 46;
    v12._object = (void *)0xE100000000000000;
    String.append(_:)(v12);
    tv_sec = __tp.tv_sec;
    tv_nsec = __tp.tv_nsec;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18205C850;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
    *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(inited + 40) = v16;
    *(_QWORD *)(inited + 48) = tv_sec;
    *(_QWORD *)(inited + 56) = tv_nsec;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v17 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    outlined init with copy of (String, Any)(inited + 32, (uint64_t)&__tp);
    v18 = __tp.tv_sec;
    v19 = __tp.tv_nsec;
    swift_retain();
    v20 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19);
    if ((v21 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      v17[(v20 >> 6) + 8] |= 1 << v20;
      v22 = (__darwin_time_t *)(v17[6] + 16 * v20);
      *v22 = v18;
      v22[1] = v19;
      outlined init with take of Any(&v36, (_OWORD *)(v17[7] + 32 * v20));
      v23 = v17[2];
      v24 = __OFADD__(v23, 1);
      v25 = v23 + 1;
      if (!v24)
      {
        v17[2] = v25;
        swift_release();
        swift_bridgeObjectRelease();
        static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
        v26 = objc_allocWithZone((Class)NSError);
        v27 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v28 = objc_msgSend(v26, sel_initWithDomain_code_userInfo_, v27, 2048, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v29 = objc_msgSend(v28, sel_domain);
        v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
        v32 = v31;

        if (v30 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v32 == v33)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          return swift_willThrow();
        }
        v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v34 & 1) != 0)
          return swift_willThrow();
LABEL_13:
        __break(1u);
      }
    }
    __break(1u);
    goto LABEL_13;
  }
  return result;
}

uint64_t digits #1 (maxDigits:nanoseconds:_:) in Date.ISO8601FormatStyle.components(from:in:)(uint64_t a1, char a2, char a3, unint64_t *a4, unsigned __int8 a5, unsigned __int8 a6, uint64_t a7, void *a8)
{
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  __darwin_time_t tv_sec;
  uint64_t tv_nsec;
  uint64_t inited;
  uint64_t v31;
  _QWORD *v32;
  __darwin_time_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  __darwin_time_t *v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  id v43;
  id v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  Swift::String v50;
  Swift::String v51;
  Swift::String v52;
  Swift::String v53;
  Swift::String v54;
  __darwin_time_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  __darwin_time_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  __darwin_time_t *v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  id v69;
  id v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  timespec __tp;
  _OWORD v84[2];
  uint64_t v85;

  v11 = 0;
  result = 0;
  v85 = *MEMORY[0x1E0C80C00];
  if (a1 >= 10)
    a1 = 10;
  if (a1 <= 1)
    v13 = 1;
  else
    v13 = a1;
  v15 = *a4;
  v14 = a4[1];
  v16 = v14 >= *a4;
  v17 = v14 - *a4;
  if (!v16)
    v17 = 0;
  if ((a2 & 1) != 0)
    v13 = 10;
  while (v17 != v11)
  {
    v18 = *(unsigned __int8 *)(v15 + v11);
    v19 = v18 - a5;
    if (v18 < a5 || v18 > a6)
    {
      v17 = v11;
      break;
    }
    v21 = 10 * result;
    if ((unsigned __int128)(result * (__int128)10) >> 64 != (10 * result) >> 63)
      goto LABEL_53;
    result = v21 + v19;
    if (__OFADD__(v21, v19))
      goto LABEL_54;
    *a4 = v15 + v11++ + 1;
    if (v13 == v11)
      goto LABEL_21;
  }
  v13 = v17;
  if (v17 < 1)
  {
LABEL_25:
    __tp.tv_sec = 0;
    __tp.tv_nsec = 0;
    clock_gettime(_CLOCK_REALTIME, &__tp);
    *(double *)&__tp.tv_sec = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
    v23 = Date.ISO8601FormatStyle.format(_:)((Foundation::Date)__tp.tv_sec);
    __tp.tv_sec = 0;
    __tp.tv_nsec = 0xE000000000000000;
    _StringGuts.grow(_:)(88);
    v24._countAndFlagsBits = 0x7020746F6E6E6143;
    v24._object = (void *)0xED00002065737261;
    String.append(_:)(v24);
    v25._countAndFlagsBits = a7;
    v25._object = a8;
    String.append(_:)(v25);
    v26._object = (void *)0x80000001823067D0;
    v26._countAndFlagsBits = 0xD000000000000046;
    String.append(_:)(v26);
    String.append(_:)(v23);
    v27._countAndFlagsBits = 46;
    v27._object = (void *)0xE100000000000000;
    String.append(_:)(v27);
    tv_sec = __tp.tv_sec;
    tv_nsec = __tp.tv_nsec;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18205C850;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
    *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(inited + 40) = v31;
    *(_QWORD *)(inited + 48) = tv_sec;
    *(_QWORD *)(inited + 56) = tv_nsec;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v32 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    outlined init with copy of (String, Any)(inited + 32, (uint64_t)&__tp);
    v33 = __tp.tv_sec;
    v34 = __tp.tv_nsec;
    swift_retain();
    v35 = specialized __RawDictionaryStorage.find<A>(_:)(v33, v34);
    if ((v36 & 1) != 0)
    {
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    v32[(v35 >> 6) + 8] |= 1 << v35;
    v37 = (__darwin_time_t *)(v32[6] + 16 * v35);
    *v37 = v33;
    v37[1] = v34;
    outlined init with take of Any(v84, (_OWORD *)(v32[7] + 32 * v35));
    v38 = v32[2];
    v39 = __OFADD__(v38, 1);
    v40 = v38 + 1;
    if (v39)
    {
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
    }
    v32[2] = v40;
    swift_release();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v41 = objc_allocWithZone((Class)NSError);
    v42 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v43 = objc_msgSend(v41, sel_initWithDomain_code_userInfo_, v42, 2048, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v44 = objc_msgSend(v43, sel_domain);
    v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
    v47 = v46;

    if (v45 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v47 == v48)
    {
LABEL_29:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v49 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v49 & 1) == 0)
        goto LABEL_57;
    }
    return swift_willThrow();
  }
  else
  {
LABEL_21:
    if ((a3 & 1) != 0)
    {
      switch(v13)
      {
        case 1:
          v22 = (unsigned __int128)(result * (__int128)100000000) >> 64;
          result *= 100000000;
          if (v22 == result >> 63)
            return result;
          __break(1u);
          goto LABEL_25;
        case 2:
          goto LABEL_39;
        case 3:
          goto LABEL_41;
        case 4:
          goto LABEL_43;
        case 5:
          goto LABEL_45;
        case 6:
          goto LABEL_47;
        case 7:
          goto LABEL_49;
        case 8:
          goto LABEL_51;
        case 9:
          return result;
        default:
          __tp.tv_sec = 0;
          __tp.tv_nsec = 0;
          clock_gettime(_CLOCK_REALTIME, &__tp);
          *(double *)&__tp.tv_sec = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
          v50 = Date.ISO8601FormatStyle.format(_:)((Foundation::Date)__tp.tv_sec);
          __tp.tv_sec = 0;
          __tp.tv_nsec = 0xE000000000000000;
          _StringGuts.grow(_:)(88);
          v51._countAndFlagsBits = 0x7020746F6E6E6143;
          v51._object = (void *)0xED00002065737261;
          String.append(_:)(v51);
          v52._countAndFlagsBits = a7;
          v52._object = a8;
          String.append(_:)(v52);
          v53._object = (void *)0x80000001823067D0;
          v53._countAndFlagsBits = 0xD000000000000046;
          String.append(_:)(v53);
          String.append(_:)(v50);
          v54._countAndFlagsBits = 46;
          v54._object = (void *)0xE100000000000000;
          String.append(_:)(v54);
          v55 = __tp.tv_sec;
          v56 = __tp.tv_nsec;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
          v57 = swift_initStackObject();
          *(_OWORD *)(v57 + 16) = xmmword_18205C850;
          *(_QWORD *)(v57 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
          *(_QWORD *)(v57 + 72) = MEMORY[0x1E0DEA968];
          *(_QWORD *)(v57 + 40) = v58;
          *(_QWORD *)(v57 + 48) = v55;
          *(_QWORD *)(v57 + 56) = v56;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
          v59 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
          outlined init with copy of (String, Any)(v57 + 32, (uint64_t)&__tp);
          v60 = __tp.tv_sec;
          v61 = __tp.tv_nsec;
          swift_retain();
          v62 = specialized __RawDictionaryStorage.find<A>(_:)(v60, v61);
          if ((v63 & 1) != 0)
            goto LABEL_58;
          v59[(v62 >> 6) + 8] |= 1 << v62;
          v64 = (__darwin_time_t *)(v59[6] + 16 * v62);
          *v64 = v60;
          v64[1] = v61;
          outlined init with take of Any(v84, (_OWORD *)(v59[7] + 32 * v62));
          v65 = v59[2];
          v39 = __OFADD__(v65, 1);
          v66 = v65 + 1;
          if (v39)
            goto LABEL_59;
          v59[2] = v66;
          swift_release();
          swift_bridgeObjectRelease();
          static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
          v67 = objc_allocWithZone((Class)NSError);
          v68 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v69 = objc_msgSend(v67, sel_initWithDomain_code_userInfo_, v68, 2048, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v70 = objc_msgSend(v69, sel_domain);
          v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(v70);
          v73 = v72;

          if (v71 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v73 == v74)
            goto LABEL_29;
          v75 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          result = swift_bridgeObjectRelease();
          if ((v75 & 1) != 0)
            return swift_willThrow();
          __break(1u);
LABEL_39:
          v76 = (unsigned __int128)(result * (__int128)10000000) >> 64;
          result *= 10000000;
          if (v76 == result >> 63)
            return result;
          __break(1u);
LABEL_41:
          v77 = (unsigned __int128)(result * (__int128)1000000) >> 64;
          result *= 1000000;
          if (v77 == result >> 63)
            return result;
          __break(1u);
LABEL_43:
          v78 = (unsigned __int128)(result * (__int128)100000) >> 64;
          result *= 100000;
          if (v78 == result >> 63)
            return result;
          __break(1u);
LABEL_45:
          v79 = (unsigned __int128)(result * (__int128)10000) >> 64;
          result *= 10000;
          if (v79 == result >> 63)
            return result;
          __break(1u);
LABEL_47:
          v80 = (unsigned __int128)(result * (__int128)1000) >> 64;
          result *= 1000;
          if (v80 == result >> 63)
            return result;
          __break(1u);
LABEL_49:
          v81 = (unsigned __int128)(result * (__int128)100) >> 64;
          result *= 100;
          if (v81 == result >> 63)
            return result;
          __break(1u);
LABEL_51:
          v82 = (unsigned __int128)(result * (__int128)10) >> 64;
          result *= 10;
          if (v82 == result >> 63)
            return result;
          __break(1u);
          break;
      }
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
  }
  return result;
}

Foundation::Date __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Date.ISO8601FormatStyle.parse(_:)(Swift::String a1)
{
  uint64_t *v1;
  uint64_t v2;
  void *object;
  char v4;
  char v5;
  char v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t inited;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Foundation::Date result;
  char v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t countAndFlagsBits;
  uint64_t v42;
  unint64_t v43;
  __int128 v44;
  uint64_t v45;
  timespec __tp;
  char v47;
  uint64_t v48;

  object = a1._object;
  v38 = v1;
  v48 = *MEMORY[0x1E0C80C00];
  v4 = *(_BYTE *)(v2 + 1);
  v5 = *(_BYTE *)(v2 + 2);
  v6 = *(_BYTE *)(v2 + 3);
  v7 = *(_BYTE *)(v2 + 4);
  v8 = *(_QWORD *)(v2 + 8);
  v9 = *(_QWORD *)(v2 + 16);
  v10 = *(_QWORD *)(v2 + 24);
  v11 = *(_QWORD *)(v2 + 32);
  LOBYTE(v42) = *(_BYTE *)v2;
  BYTE1(v42) = v4;
  BYTE2(v42) = v5;
  BYTE3(v42) = v6;
  BYTE4(v42) = v7;
  v43 = v8;
  *(_QWORD *)&v44 = v9;
  v39 = v11;
  v40 = v10;
  *((_QWORD *)&v44 + 1) = v10;
  v45 = v11;
  countAndFlagsBits = a1._countAndFlagsBits;
  Date.ISO8601FormatStyle.parse(_:in:)(a1._countAndFlagsBits, (unint64_t)a1._object, (uint64_t)&__tp);
  if ((v47 & 1) == 0)
  {
    *(Foundation::Date *)&result._time = (Foundation::Date)__tp.tv_nsec;
    *v38 = __tp.tv_nsec;
    return result;
  }
  *(_QWORD *)&v44 = v9;
  *((_QWORD *)&v44 + 1) = v40;
  v45 = v39;
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  *(double *)&__tp.tv_sec = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  v12 = Date.ISO8601FormatStyle.format(_:)((Foundation::Date)__tp.tv_sec);
  v42 = 0;
  v43 = 0xE000000000000000;
  _StringGuts.grow(_:)(88);
  v13._countAndFlagsBits = 0x7020746F6E6E6143;
  v13._object = (void *)0xED00002065737261;
  String.append(_:)(v13);
  v14._countAndFlagsBits = countAndFlagsBits;
  v14._object = object;
  String.append(_:)(v14);
  v15._object = (void *)0x80000001823067D0;
  v15._countAndFlagsBits = 0xD000000000000046;
  String.append(_:)(v15);
  String.append(_:)(v12);
  v16._countAndFlagsBits = 46;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18205C850;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
  *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 40) = v18;
  *(_QWORD *)(inited + 48) = 0;
  *(_QWORD *)(inited + 56) = 0xE000000000000000;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v19 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (String, Any)(inited + 32, (uint64_t)&v42);
  v20 = v42;
  v21 = v43;
  swift_retain();
  v22 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
  if ((v23 & 1) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  v19[(v22 >> 6) + 8] |= 1 << v22;
  v24 = (uint64_t *)(v19[6] + 16 * v22);
  *v24 = v20;
  v24[1] = v21;
  outlined init with take of Any(&v44, (_OWORD *)(v19[7] + 32 * v22));
  v25 = v19[2];
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (v26)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v19[2] = v27;
  swift_release();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v28 = objc_allocWithZone((Class)NSError);
  v29 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v30 = objc_msgSend(v28, sel_initWithDomain_code_userInfo_, v29, 2048, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v31 = objc_msgSend(v30, sel_domain);
  v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
  v34 = v33;

  if (v32 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) || v34 != v35)
  {
    v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v37 & 1) != 0)
      goto LABEL_9;
LABEL_13:
    __break(1u);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
LABEL_9:
  swift_willThrow();
  return result;
}

uint64_t Date.ISO8601FormatStyle.parse(_:in:)@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __int128 v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v19[2];
  char v20;
  _QWORD v21[4];
  __int128 v22[2];
  uint64_t v23;

  v7 = *(_OWORD *)(v3 + 16);
  v22[0] = *(_OWORD *)v3;
  v22[1] = v7;
  v23 = *(_QWORD *)(v3 + 32);
  v21[0] = String.subscript.getter();
  v21[1] = v8;
  v21[2] = v9;
  v21[3] = v10;
  if ((v21[0] ^ v8) < 0x4000
    || (swift_bridgeObjectRetain(),
        outlined retain of Date.ISO8601FormatStyle((uint64_t)v22),
        specialized Substring.withUTF8<A>(_:)(v21, v22, a1, (char *)a2, (uint64_t)v19),
        (v20 & 1) != 0))
  {
    result = swift_bridgeObjectRelease();
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
    return result;
  }
  v12 = v19[0];
  v13 = v19[1];
  v14 = v21[0];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000) == 0)
    LOBYTE(v15) = 1;
  if ((v14 & 0xC) != 4 << v15)
  {
    if ((a2 & 0x1000000000000000) == 0)
      goto LABEL_8;
LABEL_16:
    v18 = MEMORY[0x186DA485C](v14, v12, a1, a2);
    result = swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  v14 = _StringGuts._slowEnsureMatchingEncoding(_:)(v14, a1, a2);
  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_16;
LABEL_8:
  result = swift_bridgeObjectRelease();
  v16 = v12 + (v14 >> 16);
  if (__OFADD__(v12, v14 >> 16))
  {
    __break(1u);
    goto LABEL_18;
  }
  if ((v16 & 0x8000000000000000) != 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v17 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v17 = a1 & 0xFFFFFFFFFFFFLL;
  if (v17 >= v16)
  {
    v18 = (v16 << 16) | 4;
LABEL_14:
    *(_QWORD *)a3 = v18;
    *(_QWORD *)(a3 + 8) = v13;
    *(_BYTE *)(a3 + 16) = 0;
    return result;
  }
LABEL_19:
  __break(1u);
  return result;
}

void closure #1 in Date.ISO8601FormatStyle.parse(_:in:)(char *a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, uint64_t a6@<X8>)
{
  void *v6;
  __int128 v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15[18];
  _QWORD __dst[37];
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  _QWORD __src[37];

  if (!a1)
    goto LABEL_13;
  if (a2 < 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    return;
  }
  v8 = a3[1];
  v17 = *a3;
  v18 = v8;
  v19 = *((_QWORD *)a3 + 4);
  Date.ISO8601FormatStyle.components(from:in:)(a4, a5, a1, a2, __src);
  if (v6)
  {

LABEL_5:
    *(_QWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 0;
    *(_BYTE *)(a6 + 16) = 1;
    return;
  }
  memcpy(__dst, __src, 0x122uLL);
  if (__dst[3])
  {
    memcpy(v15, &__dst[1], 0x11AuLL);
    v11 = __dst[3];
    v12 = __dst[4];
    v10 = 0;
    outlined retain of Date.ISO8601FormatStyle.ComponentsParseResult((uint64_t)__dst);
    swift_unknownObjectRetain();
    _CalendarGregorian.date(from:inTimeZone:dstRepeatedTimePolicy:dstSkippedTimePolicy:)(v15, (uint64_t)&v11, &v10, (uint64_t)&v13);
    outlined release of Date.ISO8601FormatStyle.ComponentsParseResult((uint64_t)__dst);
    swift_unknownObjectRelease();
    outlined release of Date.ISO8601FormatStyle.ComponentsParseResult((uint64_t)__dst);
    if ((v14 & 1) != 0)
      goto LABEL_5;
    v9 = v13;
  }
  else
  {
    memcpy(v15, &__dst[1], 0x11AuLL);
    outlined retain of Date.ISO8601FormatStyle.ComponentsParseResult((uint64_t)__dst);
    _CalendarGregorian.date(from:)(v15, (uint64_t)&v11);
    outlined release of Date.ISO8601FormatStyle.ComponentsParseResult((uint64_t)__dst);
    outlined release of Date.ISO8601FormatStyle.ComponentsParseResult((uint64_t)__dst);
    if ((v12 & 1) != 0)
      goto LABEL_5;
    v9 = v11;
  }
  *(_QWORD *)a6 = __dst[0];
  *(_QWORD *)(a6 + 8) = v9;
  *(_BYTE *)(a6 + 16) = 0;
}

Foundation::Date protocol witness for ParseStrategy.parse(_:) in conformance Date.ISO8601FormatStyle(Swift::String *a1)
{
  return Date.ISO8601FormatStyle.parse(_:)(*a1);
}

uint64_t Date.ISO8601FormatStyle.parseStrategy.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_BYTE *)(v1 + 1);
  v3 = *(_BYTE *)(v1 + 2);
  v4 = *(_BYTE *)(v1 + 3);
  v5 = *(_BYTE *)(v1 + 4);
  v7 = *(_QWORD *)(v1 + 8);
  v6 = *(_QWORD *)(v1 + 16);
  *(_BYTE *)a1 = *(_BYTE *)v1;
  *(_BYTE *)(a1 + 1) = v2;
  *(_BYTE *)(a1 + 2) = v3;
  *(_BYTE *)(a1 + 3) = v4;
  *(_BYTE *)(a1 + 4) = v5;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  swift_retain();
  return swift_unknownObjectRetain();
}

double Date.ISO8601FormatStyle.consuming(_:startingAt:in:)@<D0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X4>, uint64_t a5@<X8>)
{
  double result;
  __int128 v7;
  char v8;

  if (a3 >> 14 >= a4 >> 14 || (Date.ISO8601FormatStyle.parse(_:in:)(a1, a2, (uint64_t)&v7), (v8 & 1) != 0))
  {
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_BYTE *)(a5 + 16) = 1;
  }
  else
  {
    result = *(double *)&v7;
    *(_OWORD *)a5 = v7;
    *(_BYTE *)(a5 + 16) = 0;
  }
  return result;
}

double protocol witness for CustomConsumingRegexComponent.consuming(_:startingAt:in:) in conformance Date.ISO8601FormatStyle@<D0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return Date.ISO8601FormatStyle.consuming(_:startingAt:in:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for RegexComponent.regex.getter in conformance Date.ISO8601FormatStyle()
{
  lazy protocol witness table accessor for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle();
  return CustomConsumingRegexComponent.regex.getter();
}

void static FormatStyle<>.iso8601.getter(uint64_t a1@<X8>)
{
  unint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  _BYTE v12[9];
  __int128 v13;

  if (one-time initialization token for cache != -1)
    swift_once();
  v2 = static TimeZoneCache.cache + 16;
  v3 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in TimeZoneCache.offsetFixed(_:)(v2, 0, &v13);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  v4 = v13;
  if (!(_QWORD)v13)
  {
    __break(1u);
    goto LABEL_9;
  }
  v5 = *((_QWORD *)&v13 + 1);
  v6 = (os_unfair_lock_s *)static TimeZoneCache.cache;
  swift_retain_n();
  os_unfair_lock_lock(v6 + 36);
  closure #1 in TimeZoneCache.offsetFixed(_:)((unint64_t)&v6[4], 0, &v13);
  os_unfair_lock_unlock(v6 + 36);
  swift_release_n();
  if (!(_QWORD)v13)
  {
LABEL_9:
    __break(1u);
    return;
  }
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)&v13 = v4;
  *((_QWORD *)&v13 + 1) = v5;
  if (one-time initialization token for cache != -1)
    swift_once();
  type metadata accessor for _LocaleUnlocalized();
  swift_retain();
  inited = swift_initStaticObject();
  swift_release();
  *(_QWORD *)&v11 = inited;
  *((_QWORD *)&v11 + 1) = lazy protocol witness table accessor for type _LocaleUnlocalized and conformance _LocaleUnlocalized();
  v9 = 0;
  v10 = 1;
  type metadata accessor for _CalendarGregorian();
  swift_allocObject();
  _CalendarGregorian.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)((uint64_t)v12, (uint64_t *)&v13, &v11, 2, 0, 4, 0, (uint64_t)&v9);
  *(_DWORD *)a1 = 0x10000;
  *(_BYTE *)(a1 + 4) = 1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
}

void static RegexComponent<>.iso8601WithTimeZone(includingFractionalSeconds:dateSeparator:dateTimeSeparator:timeSeparator:timeZoneSeparator:)(char a1@<W0>, char *a2@<X1>, char *a3@<X2>, char *a4@<X3>, char *a5@<X4>, uint64_t a6@<X8>)
{
  char v7;
  char v8;
  unint64_t v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  uint64_t inited;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v19;
  char v20;
  __int128 v21;
  _BYTE v22[9];
  __int128 v23;

  v17 = *a2;
  v16 = *a3;
  v7 = *a4;
  v8 = *a5;
  if (one-time initialization token for cache != -1)
    swift_once();
  v9 = static TimeZoneCache.cache + 16;
  v10 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v10);
  closure #1 in TimeZoneCache.offsetFixed(_:)(v9, 0, &v23);
  os_unfair_lock_unlock(v10);
  swift_release_n();
  v11 = v23;
  if (!(_QWORD)v23)
  {
    __break(1u);
    goto LABEL_9;
  }
  v12 = *((_QWORD *)&v23 + 1);
  v13 = (os_unfair_lock_s *)static TimeZoneCache.cache;
  swift_retain_n();
  os_unfair_lock_lock(v13 + 36);
  closure #1 in TimeZoneCache.offsetFixed(_:)((unint64_t)&v13[4], 0, &v23);
  os_unfair_lock_unlock(v13 + 36);
  swift_release_n();
  if (!(_QWORD)v23)
  {
LABEL_9:
    __break(1u);
    return;
  }
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)&v23 = v11;
  *((_QWORD *)&v23 + 1) = v12;
  if (one-time initialization token for cache != -1)
    swift_once();
  type metadata accessor for _LocaleUnlocalized();
  swift_retain();
  inited = swift_initStaticObject();
  swift_release();
  *(_QWORD *)&v21 = inited;
  *((_QWORD *)&v21 + 1) = lazy protocol witness table accessor for type _LocaleUnlocalized and conformance _LocaleUnlocalized();
  v19 = 0;
  v20 = 1;
  type metadata accessor for _CalendarGregorian();
  swift_allocObject();
  _CalendarGregorian.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)((uint64_t)v22, (uint64_t *)&v23, &v21, 2, 0, 4, 0, (uint64_t)&v19);
  *(_BYTE *)a6 = v7;
  *(_BYTE *)(a6 + 1) = a1 & 1;
  *(_BYTE *)(a6 + 2) = v8;
  *(_BYTE *)(a6 + 3) = v17;
  *(_BYTE *)(a6 + 4) = v16;
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = v15;
  *(_QWORD *)(a6 + 24) = v11;
  *(_QWORD *)(a6 + 32) = v12;
}

void static RegexComponent<>.iso8601(timeZone:includingFractionalSeconds:dateSeparator:dateTimeSeparator:timeSeparator:)(uint64_t *a1@<X0>, char a2@<W1>, char *a3@<X2>, char *a4@<X3>, char *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  os_unfair_lock_s *v14;
  uint64_t inited;
  uint64_t v16;
  uint64_t v18;
  char v19;
  __int128 v20;
  _BYTE v21[9];
  __int128 v22;

  v7 = *a1;
  v8 = a1[1];
  v9 = *a3;
  v10 = *a4;
  v11 = *a5;
  v12 = one-time initialization token for cache;
  swift_unknownObjectRetain();
  if (v12 != -1)
    swift_once();
  v13 = static TimeZoneCache.cache + 16;
  v14 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v14);
  closure #1 in TimeZoneCache.offsetFixed(_:)(v13, 0, &v22);
  os_unfair_lock_unlock(v14);
  swift_release_n();
  if ((_QWORD)v22)
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *(_QWORD *)&v22 = v7;
    *((_QWORD *)&v22 + 1) = v8;
    if (one-time initialization token for cache != -1)
      swift_once();
    type metadata accessor for _LocaleUnlocalized();
    swift_retain();
    inited = swift_initStaticObject();
    swift_release();
    *(_QWORD *)&v20 = inited;
    *((_QWORD *)&v20 + 1) = lazy protocol witness table accessor for type _LocaleUnlocalized and conformance _LocaleUnlocalized();
    v18 = 0;
    v19 = 1;
    type metadata accessor for _CalendarGregorian();
    swift_allocObject();
    _CalendarGregorian.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)((uint64_t)v21, (uint64_t *)&v22, &v20, 2, 0, 4, 0, (uint64_t)&v18);
    *(_BYTE *)a6 = v11;
    *(_BYTE *)(a6 + 1) = a2 & 1;
    *(_BYTE *)(a6 + 2) = 1;
    *(_BYTE *)(a6 + 3) = v9;
    *(_BYTE *)(a6 + 4) = v10;
    *(_QWORD *)(a6 + 8) = 27;
    *(_QWORD *)(a6 + 16) = v16;
    *(_QWORD *)(a6 + 24) = v7;
    *(_QWORD *)(a6 + 32) = v8;
  }
  else
  {
    __break(1u);
  }
}

void static RegexComponent<>.iso8601Date(timeZone:dateSeparator:)(uint64_t *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  os_unfair_lock_s *v9;
  uint64_t inited;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  _BYTE v15[9];
  __int128 v16;

  v4 = *a1;
  v5 = a1[1];
  v6 = *a2;
  v7 = one-time initialization token for cache;
  swift_unknownObjectRetain();
  if (v7 != -1)
    swift_once();
  v8 = static TimeZoneCache.cache + 16;
  v9 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v9);
  closure #1 in TimeZoneCache.offsetFixed(_:)(v8, 0, &v16);
  os_unfair_lock_unlock(v9);
  swift_release_n();
  if ((_QWORD)v16)
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    if (one-time initialization token for cache != -1)
      swift_once();
    type metadata accessor for _LocaleUnlocalized();
    swift_retain();
    inited = swift_initStaticObject();
    swift_release();
    *(_QWORD *)&v14 = inited;
    *((_QWORD *)&v14 + 1) = lazy protocol witness table accessor for type _LocaleUnlocalized and conformance _LocaleUnlocalized();
    v12 = 0;
    v13 = 1;
    type metadata accessor for _CalendarGregorian();
    swift_allocObject();
    _CalendarGregorian.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)((uint64_t)v15, (uint64_t *)&v16, &v14, 2, 0, 4, 0, (uint64_t)&v12);
    *(_WORD *)a3 = 0;
    *(_BYTE *)(a3 + 2) = 1;
    *(_BYTE *)(a3 + 3) = v6;
    *(_BYTE *)(a3 + 4) = 1;
    *(_QWORD *)(a3 + 24) = v4;
    *(_QWORD *)(a3 + 32) = v5;
    *(_QWORD *)(a3 + 8) = 11;
    *(_QWORD *)(a3 + 16) = v11;
  }
  else
  {
    __break(1u);
  }
}

unint64_t _StringGuts.validateInclusiveSubscalarIndex(_:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 0xC) == 4 << v5)
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a2, a3);
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 < result >> 16)
    __break(1u);
  return result;
}

Swift::Void __swiftcall Substring._slowMakeContiguousUTF8()()
{
  unint64_t *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;

  v1 = *v0;
  v2 = v0[2];
  v3 = v0[3];
  v4 = _StringGuts.validateInclusiveScalarIndex(_:)(0xFuLL, v2, v3);
  v5 = _StringGuts.validateInclusiveScalarIndex(_:)(v1, v2, v3) >> 14;
  if (v4 >> 14 < v5)
  {
    v6 = 0;
    while (1)
    {
      v7 = v6 + 1;
      if (__OFADD__(v6, 1))
        break;
      if ((v3 & 0x1000000000000000) != 0)
      {
        v4 = String.UnicodeScalarView._foreignIndex(after:)();
      }
      else
      {
        v8 = v4 >> 16;
        if ((v3 & 0x2000000000000000) != 0)
        {
          v72 = v2;
          v73 = v3 & 0xFFFFFFFFFFFFFFLL;
          v10 = *((unsigned __int8 *)&v72 + v8);
        }
        else
        {
          v9 = (v3 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((v2 & 0x1000000000000000) == 0)
            v9 = _StringObject.sharedUTF8.getter();
          v10 = *(unsigned __int8 *)(v9 + v8);
        }
        v11 = (char)v10;
        v12 = __clz(v10 ^ 0xFF) - 24;
        if (v11 >= 0)
          LOBYTE(v12) = 1;
        v4 = ((v8 + v12) << 16) | 5;
      }
      ++v6;
      if (v5 <= v4 >> 14)
        goto LABEL_35;
    }
    __break(1u);
    goto LABEL_148;
  }
  if (v5 < v4 >> 14)
  {
    v7 = 0;
    while (1)
    {
      v13 = __OFSUB__(v7--, 1);
      if (v13)
        goto LABEL_153;
      if ((v3 & 0x1000000000000000) == 0)
        break;
      v4 = String.UnicodeScalarView._foreignIndex(before:)();
LABEL_18:
      if (v5 >= v4 >> 14)
        goto LABEL_35;
    }
    v14 = v4 >> 16;
    if ((v3 & 0x2000000000000000) != 0)
    {
      v72 = v2;
      v73 = v3 & 0xFFFFFFFFFFFFFFLL;
      if ((*((_BYTE *)&v72 + v14 - 1) & 0xC0) == 0x80)
      {
        v16 = 0;
        do
          v18 = *((_BYTE *)&v71 + v14 + v16-- + 6) & 0xC0;
        while (v18 == 128);
        goto LABEL_31;
      }
    }
    else
    {
      v15 = (v3 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((v2 & 0x1000000000000000) == 0)
        v15 = _StringObject.sharedUTF8.getter();
      if ((*(_BYTE *)(v14 + v15 - 1) & 0xC0) == 0x80)
      {
        v16 = 0;
        do
          v17 = *(_BYTE *)(v15 + v14 - 2 + v16--) & 0xC0;
        while (v17 == 128);
LABEL_31:
        v19 = 1 - v16;
LABEL_33:
        v4 = (v4 - (v19 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
        goto LABEL_18;
      }
    }
    v19 = 1;
    goto LABEL_33;
  }
  v7 = 0;
LABEL_35:
  v20 = v71[1];
  v21 = v71[2];
  v22 = v71[3];
  v23 = _StringGuts.validateInclusiveScalarIndex(_:)(*v71, v21, v22);
  v24 = _StringGuts.validateInclusiveScalarIndex(_:)(v20, v21, v22) >> 14;
  if (v23 >> 14 < v24)
  {
    v25 = 0;
    while (1)
    {
      v26 = v25 + 1;
      if (__OFADD__(v25, 1))
        break;
      if ((v22 & 0x1000000000000000) != 0)
      {
        v23 = String.UnicodeScalarView._foreignIndex(after:)();
      }
      else
      {
        v27 = v23 >> 16;
        if ((v22 & 0x2000000000000000) != 0)
        {
          v72 = v21;
          v73 = v22 & 0xFFFFFFFFFFFFFFLL;
          v29 = *((unsigned __int8 *)&v72 + v27);
        }
        else
        {
          v28 = (v22 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((v21 & 0x1000000000000000) == 0)
            v28 = _StringObject.sharedUTF8.getter();
          v29 = *(unsigned __int8 *)(v28 + v27);
        }
        v30 = (char)v29;
        v31 = __clz(v29 ^ 0xFF) - 24;
        if (v30 >= 0)
          LOBYTE(v31) = 1;
        v23 = ((v27 + v31) << 16) | 5;
      }
      ++v25;
      if (v24 <= v23 >> 14)
        goto LABEL_69;
    }
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
    goto LABEL_155;
  }
  if (v24 < v23 >> 14)
  {
    v26 = 0;
    while (1)
    {
      v13 = __OFSUB__(v26--, 1);
      if (v13)
        goto LABEL_154;
      if ((v22 & 0x1000000000000000) == 0)
        break;
      v23 = String.UnicodeScalarView._foreignIndex(before:)();
LABEL_52:
      if (v24 >= v23 >> 14)
        goto LABEL_69;
    }
    if ((v22 & 0x2000000000000000) != 0)
    {
      v72 = v21;
      v73 = v22 & 0xFFFFFFFFFFFFFFLL;
      if ((*((_BYTE *)&v72 + (v23 >> 16) - 1) & 0xC0) == 0x80)
      {
        v33 = 0;
        do
          v35 = *((_BYTE *)&v71 + (v23 >> 16) + v33-- + 6) & 0xC0;
        while (v35 == 128);
        goto LABEL_65;
      }
    }
    else
    {
      v32 = (v22 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((v21 & 0x1000000000000000) == 0)
        v32 = _StringObject.sharedUTF8.getter();
      if ((*(_BYTE *)((v23 >> 16) + v32 - 1) & 0xC0) == 0x80)
      {
        v33 = 0;
        do
          v34 = *(_BYTE *)(v32 + (v23 >> 16) - 2 + v33--) & 0xC0;
        while (v34 == 128);
LABEL_65:
        v36 = 1 - v33;
LABEL_67:
        v23 = (v23 - (v36 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
        goto LABEL_52;
      }
    }
    v36 = 1;
    goto LABEL_67;
  }
  v26 = 0;
LABEL_69:
  swift_bridgeObjectRetain();
  v37 = static String._copying(_:)();
  v39 = v38;
  swift_bridgeObjectRelease();
  v40 = _StringGuts.validateInclusiveScalarIndex(_:)(0xFuLL, v37, v39);
  if (v7 < 0)
  {
    v47 = 0;
    while (1)
    {
      if (v40 < 0x10000)
        goto LABEL_151;
      if ((v39 & 0x1000000000000000) == 0)
        break;
      v40 = String.UnicodeScalarView._foreignIndex(before:)();
LABEL_88:
      if (v7 >= --v47)
        goto LABEL_104;
    }
    v48 = v40 >> 16;
    if ((v39 & 0x2000000000000000) != 0)
    {
      v72 = v37;
      v73 = v39 & 0xFFFFFFFFFFFFFFLL;
      if ((*((_BYTE *)&v72 + v48 - 1) & 0xC0) == 0x80)
      {
        v50 = 0;
        do
          v52 = *((_BYTE *)&v71 + v48 + v50-- + 6) & 0xC0;
        while (v52 == 128);
        goto LABEL_101;
      }
    }
    else
    {
      v49 = (v39 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((v37 & 0x1000000000000000) == 0)
        v49 = _StringObject.sharedUTF8.getter();
      if ((*(_BYTE *)(v48 + v49 - 1) & 0xC0) == 0x80)
      {
        v50 = 0;
        do
          v51 = *(_BYTE *)(v49 + v48 - 2 + v50--) & 0xC0;
        while (v51 == 128);
LABEL_101:
        v53 = 1 - v50;
LABEL_103:
        v40 = ((v48 - v53) << 16) | 5;
        goto LABEL_88;
      }
    }
    v53 = 1;
    goto LABEL_103;
  }
  if (v7)
  {
    if ((v39 & 0x2000000000000000) != 0)
      v41 = HIBYTE(v39) & 0xF;
    else
      v41 = v37 & 0xFFFFFFFFFFFFLL;
    while (1)
    {
      v42 = v40 >> 16;
      if (v40 >> 16 >= v41)
        goto LABEL_149;
      if ((v39 & 0x1000000000000000) != 0)
      {
        v40 = String.UnicodeScalarView._foreignIndex(after:)();
        if (!--v7)
          break;
      }
      else
      {
        if ((v39 & 0x2000000000000000) != 0)
        {
          v72 = v37;
          v73 = v39 & 0xFFFFFFFFFFFFFFLL;
          v44 = *((unsigned __int8 *)&v72 + v42);
        }
        else
        {
          v43 = (v39 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((v37 & 0x1000000000000000) == 0)
            v43 = _StringObject.sharedUTF8.getter();
          v44 = *(unsigned __int8 *)(v43 + v42);
        }
        v45 = (char)v44;
        v46 = __clz(v44 ^ 0xFF) - 24;
        if (v45 >= 0)
          LOBYTE(v46) = 1;
        v40 = ((v42 + v46) << 16) | 5;
        if (!--v7)
          break;
      }
    }
  }
LABEL_104:
  v54 = _StringGuts.validateInclusiveScalarIndex(_:)(v40, v37, v39);
  if (v26 < 0)
  {
    v61 = 0;
    while (1)
    {
      if (v54 < 0x10000)
        goto LABEL_152;
      if ((v39 & 0x1000000000000000) == 0)
        break;
      v54 = String.UnicodeScalarView._foreignIndex(before:)();
LABEL_123:
      if (v26 >= --v61)
        goto LABEL_139;
    }
    v62 = v54 >> 16;
    if ((v39 & 0x2000000000000000) != 0)
    {
      v72 = v37;
      v73 = v39 & 0xFFFFFFFFFFFFFFLL;
      if ((*((_BYTE *)&v72 + v62 - 1) & 0xC0) == 0x80)
      {
        v64 = 0;
        do
          v66 = *((_BYTE *)&v71 + v62 + v64-- + 6) & 0xC0;
        while (v66 == 128);
        goto LABEL_136;
      }
    }
    else
    {
      v63 = (v39 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((v37 & 0x1000000000000000) == 0)
        v63 = _StringObject.sharedUTF8.getter();
      if ((*(_BYTE *)(v62 + v63 - 1) & 0xC0) == 0x80)
      {
        v64 = 0;
        do
          v65 = *(_BYTE *)(v63 + v62 - 2 + v64--) & 0xC0;
        while (v65 == 128);
LABEL_136:
        v67 = 1 - v64;
LABEL_138:
        v54 = ((v62 - v67) << 16) | 5;
        goto LABEL_123;
      }
    }
    v67 = 1;
    goto LABEL_138;
  }
  if (v26)
  {
    if ((v39 & 0x2000000000000000) != 0)
      v55 = HIBYTE(v39) & 0xF;
    else
      v55 = v37 & 0xFFFFFFFFFFFFLL;
    while (1)
    {
      v56 = v54 >> 16;
      if (v54 >> 16 >= v55)
        goto LABEL_150;
      if ((v39 & 0x1000000000000000) != 0)
      {
        v54 = String.UnicodeScalarView._foreignIndex(after:)();
        if (!--v26)
          break;
      }
      else
      {
        if ((v39 & 0x2000000000000000) != 0)
        {
          v72 = v37;
          v73 = v39 & 0xFFFFFFFFFFFFFFLL;
          v58 = *((unsigned __int8 *)&v72 + v56);
        }
        else
        {
          v57 = (v39 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((v37 & 0x1000000000000000) == 0)
            v57 = _StringObject.sharedUTF8.getter();
          v58 = *(unsigned __int8 *)(v57 + v56);
        }
        v59 = (char)v58;
        v60 = __clz(v58 ^ 0xFF) - 24;
        if (v59 >= 0)
          LOBYTE(v60) = 1;
        v54 = ((v56 + v60) << 16) | 5;
        if (!--v26)
          break;
      }
    }
  }
LABEL_139:
  v68 = v71;
  if ((*(_BYTE *)v71 & 2) != 0)
    v69 = v40 | 3;
  else
    v69 = v40;
  if ((v71[1] & 2) != 0)
    v70 = v54 | 3;
  else
    v70 = v54;
  if (v70 >> 14 >= v69 >> 14)
  {
    swift_bridgeObjectRelease();
    *v68 = v69;
    v68[1] = v70;
    v68[2] = v37;
    v68[3] = v39;
    return;
  }
LABEL_155:
  __break(1u);
}

uint64_t specialized static Date.ISO8601FormatStyle.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v32;
  int v33;
  int v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[4];
  v5 = *((_QWORD *)a1 + 1);
  v32 = *a1;
  v33 = *a2;
  v6 = a2[1];
  v34 = a2[3];
  v7 = a2[4];
  v8 = *((_QWORD *)a2 + 1);
  v35 = *(_OWORD *)(a2 + 24);
  v36 = *(_OWORD *)(a1 + 24);
  v9 = a1[2] == 0;
  if (a1[2])
    v10 = 0;
  else
    v10 = 58;
  if (v9)
    v11 = 0xE100000000000000;
  else
    v11 = 0xE000000000000000;
  if (a2[2])
    v12 = 0;
  else
    v12 = 58;
  if (a2[2])
    v13 = 0xE000000000000000;
  else
    v13 = 0xE100000000000000;
  if (v10 == v12 && v11 == v13)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v16 = 0;
    if ((v15 & 1) == 0)
      return v16 & 1;
  }
  v37 = v35;
  v38 = v36;
  v16 = 0;
  if ((specialized static TimeZone.== infix(_:_:)((uint64_t)&v38, (uint64_t)&v37) & 1) != 0 && v5 == v8)
  {
    if (v4)
      v17 = 2577447;
    else
      v17 = 32;
    if (v4)
      v18 = 0xE300000000000000;
    else
      v18 = 0xE100000000000000;
    if (v7)
      v19 = 2577447;
    else
      v19 = 32;
    if (v7)
      v20 = 0xE300000000000000;
    else
      v20 = 0xE100000000000000;
    if (v17 == v19 && v18 == v20)
    {
      swift_bridgeObjectRelease_n();
      if (v2 != v6)
      {
        v16 = 0;
        return v16 & 1;
      }
    }
    else
    {
      v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v16 = 0;
      if ((v21 & 1) == 0 || ((v2 ^ v6) & 1) != 0)
        return v16 & 1;
    }
    if (v3)
      v22 = 0;
    else
      v22 = 45;
    if (v3)
      v23 = 0xE000000000000000;
    else
      v23 = 0xE100000000000000;
    if (v34)
      v24 = 0;
    else
      v24 = 45;
    if (v34)
      v25 = 0xE000000000000000;
    else
      v25 = 0xE100000000000000;
    if (v22 == v24 && v23 == v25)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v16 = 0;
      if ((v26 & 1) == 0)
        return v16 & 1;
    }
    if (v32)
      v27 = 0;
    else
      v27 = 58;
    if (v32)
      v28 = 0xE000000000000000;
    else
      v28 = 0xE100000000000000;
    if (v33)
      v29 = 0;
    else
      v29 = 58;
    if (v33)
      v30 = 0xE000000000000000;
    else
      v30 = 0xE100000000000000;
    if (v27 == v29 && v28 == v30)
      v16 = 1;
    else
      v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v16 & 1;
}

uint64_t outlined retain of Date.ISO8601FormatStyle(uint64_t a1)
{
  swift_retain();
  swift_unknownObjectRetain();
  return a1;
}

unint64_t instantiation function for generic protocol witness table for Date.ISO8601FormatStyle(_QWORD *a1)
{
  unint64_t result;

  a1[1] = lazy protocol witness table accessor for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle();
  a1[2] = lazy protocol witness table accessor for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle();
  result = lazy protocol witness table accessor for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle();
  a1[3] = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Date.ISO8601FormatStyle(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_181E14D5C@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = *(_OWORD *)(a1 + 24);
  return swift_unknownObjectRetain();
}

uint64_t destroy for Date.ISO8601FormatStyle()
{
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for Date.ISO8601FormatStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_retain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Date.ISO8601FormatStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 32) = v4;
  return a1;
}

uint64_t assignWithTake for Date.ISO8601FormatStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  v4 = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 32) = v4;
  return a1;
}

uint64_t getEnumTagSinglePayload for Date.ISO8601FormatStyle(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Date.ISO8601FormatStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for Date.ISO8601FormatStyle.TimeZoneSeparator(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_181E14FF8 + 4 * byte_1821648A3[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_181E1502C + 4 * byte_18216489E[v4]))();
}

uint64_t sub_181E1502C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E15034(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181E1503CLL);
  return result;
}

uint64_t sub_181E15048(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181E15050);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_181E15054(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E1505C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Date.ISO8601FormatStyle.Fields()
{
  return &type metadata for Date.ISO8601FormatStyle.Fields;
}

uint64_t storeEnumTagSinglePayload for Date.ISO8601FormatStyle.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_181E150C4 + 4 * byte_1821648AD[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_181E150F8 + 4 * byte_1821648A8[v4]))();
}

uint64_t sub_181E150F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E15100(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181E15108);
  return result;
}

uint64_t sub_181E15114(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181E1511CLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_181E15120(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181E15128(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Date.ISO8601FormatStyle.CodingKeys()
{
  return &type metadata for Date.ISO8601FormatStyle.CodingKeys;
}

unint64_t specialized Date.ISO8601FormatStyle.CodingKeys.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Date.ISO8601FormatStyle.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 7)
    return 7;
  else
    return v3;
}

uint64_t outlined retain of Date.ISO8601FormatStyle.ComponentsParseResult(uint64_t a1)
{
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t outlined release of Date.ISO8601FormatStyle.ComponentsParseResult(uint64_t a1)
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return a1;
}

char *partial apply for closure #1 in append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)(char *a1, int64_t a2)
{
  uint64_t v2;

  return closure #1 in append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)(a1, a2, *(_QWORD **)(v2 + 16));
}

uint64_t closure #2 in closure #1 in numericStringRepresentationForMutableBinaryInteger(words:isSigned:)partial apply(char *a1, int64_t a2)
{
  return partial apply for closure #2 in closure #1 in numericStringRepresentationForMutableBinaryInteger(words:isSigned:)(a1, a2);
}

unint64_t specialized _parseIntegerDigits<A>(_:isNegative:)(_BYTE *a1, uint64_t a2, char a3)
{
  unint64_t result;
  _BYTE *v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  BOOL v11;
  unint64_t v12;
  char v13;

  if (a2)
  {
    if (a2 < 1)
      return 0;
    result = 0;
    v5 = &a1[a2];
    while (*a1 - 48 <= 9)
    {
      v6 = (*a1 - 48);
      v7 = !is_mul_ok(result, 0xAuLL);
      v8 = 10 * result;
      v9 = 10 * result + v6;
      v10 = __CFADD__(10 * result, v6);
      v11 = v8 >= v6;
      v12 = v8 - v6;
      v13 = !v11;
      if ((a3 & 1) == 0)
        v13 = v10;
      result = 0;
      if (!v7 && (v13 & 1) == 0)
      {
        result = (a3 & 1) != 0 ? v12 : v9;
        if (++a1 < v5)
          continue;
      }
      return result;
    }
  }
  return 0;
}

{
  unsigned int v3;
  _BYTE *v4;
  int v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  BOOL v9;
  int v10;
  BOOL v11;
  unsigned __int8 v12;

  if (a2)
  {
    if (a2 < 1)
    {
      v3 = 0;
      v12 = 0;
      return v3 | ((unint64_t)v12 << 32);
    }
    v3 = 0;
    v4 = &a1[a2];
    while (*a1 - 48 <= 9)
    {
      v5 = (*a1 - 48);
      v6 = 10 * (int)v3;
      v7 = v6 != (int)v6;
      v8 = v6 + v5;
      v9 = __OFADD__((_DWORD)v6, v5);
      v10 = v6 - v5;
      v11 = __OFSUB__((_DWORD)v6, v5);
      if ((a3 & 1) != 0)
        v9 = v11;
      v12 = 1;
      v3 = 0;
      if (!v7 && !v9)
      {
        v12 = 0;
        v3 = (a3 & 1) != 0 ? v10 : v8;
        if (++a1 < v4)
          continue;
      }
      return v3 | ((unint64_t)v12 << 32);
    }
  }
  v3 = 0;
  v12 = 1;
  return v3 | ((unint64_t)v12 << 32);
}

{
  unsigned int v3;
  _BYTE *v4;
  unsigned int v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  BOOL v9;
  int v10;
  BOOL v11;
  unsigned __int8 v12;

  if (a2)
  {
    if (a2 < 1)
    {
      v3 = 0;
      v12 = 0;
      return v3 | ((unint64_t)v12 << 32);
    }
    v3 = 0;
    v4 = &a1[a2];
    while (*a1 - 48 <= 9)
    {
      v5 = (*a1 - 48);
      v6 = 10 * v3;
      v7 = (v6 & 0xFFFFFFFF00000000) != 0;
      v8 = v6 + v5;
      v9 = __CFADD__((_DWORD)v6, v5);
      v10 = v6 - v5;
      v11 = v6 < v5;
      if ((a3 & 1) != 0)
        v9 = v11;
      v12 = 1;
      v3 = 0;
      if (!v7 && !v9)
      {
        v12 = 0;
        v3 = (a3 & 1) != 0 ? v10 : v8;
        if (++a1 < v4)
          continue;
      }
      return v3 | ((unint64_t)v12 << 32);
    }
  }
  v3 = 0;
  v12 = 1;
  return v3 | ((unint64_t)v12 << 32);
}

{
  unint64_t result;
  unint64_t v6;
  _BYTE *v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  unsigned __int128 v13;
  BOOL v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  char v19;

  if (!a2)
    return 0;
  if (a2 < 1)
    return 0;
  result = 0;
  v6 = 0;
  v7 = &a1[a2];
  while (*a1 - 48 < 0xA)
  {
    v8 = (*a1 - 48);
    v9 = !is_mul_ok(v6, 0xAuLL);
    v10 = (__PAIR128__(v6, result) * 0xA) >> 64;
    v11 = __CFADD__((result * (unsigned __int128)0xAuLL) >> 64, 10 * v6) || v9;
    v12 = 10 * result;
    v13 = __PAIR128__(v6, result) * 0xA + (*a1 - 48);
    v14 = __CFADD__(__CFADD__(10 * result, v8), v10);
    v15 = v12 >= v8;
    v16 = v12 - v8;
    v18 = v15;
    v15 = v10 >= !v15;
    v17 = v10 - !v18;
    v19 = !v15;
    if ((a3 & 1) != 0)
      v14 = v19;
    result = 0;
    if ((v11 & 1) == 0 && !v14)
    {
      v6 = (a3 & 1) != 0 ? v17 : *((_QWORD *)&v13 + 1);
      result = (a3 & 1) != 0 ? v16 : v13;
      if (++a1 < v7)
        continue;
    }
    return result;
  }
  return 0;
}

uint64_t specialized _parseIntegerDigits<A>(_:isNegative:)(_BYTE *a1, uint64_t a2, char a3)
{
  uint64_t result;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  uint64_t v12;
  char v13;

  if (a2)
  {
    if (a2 < 1)
      return 0;
    result = 0;
    v5 = &a1[a2];
    while (*a1 - 48 <= 9)
    {
      v6 = (*a1 - 48);
      v7 = 10 * result;
      v8 = (unsigned __int128)(result * (__int128)10) >> 64 != (10 * result) >> 63;
      v9 = 10 * result + v6;
      v10 = __OFADD__(10 * result, v6);
      v11 = __OFSUB__(v7, v6);
      v12 = v7 - v6;
      v13 = v11;
      if ((a3 & 1) == 0)
        v13 = v10;
      result = 0;
      if (!v8 && (v13 & 1) == 0)
      {
        result = (a3 & 1) != 0 ? v12 : v9;
        if (++a1 < v5)
          continue;
      }
      return result;
    }
  }
  return 0;
}

{
  unsigned int v3;
  _BYTE *v4;
  int v5;
  int v6;
  _BOOL4 v7;
  int v8;

  if (a2)
  {
    if (a2 < 1)
    {
      LOWORD(v3) = 0;
      v8 = 0;
    }
    else
    {
      LOWORD(v3) = 0;
      v4 = &a1[a2];
      while (*a1 - 48 <= 9)
      {
        v5 = (*a1 - 48);
        v6 = 10 * (unsigned __int16)v3;
        v7 = (v6 & 0xF0000) != 0;
        if ((a3 & 1) != 0)
        {
          v3 = (unsigned __int16)v6 - v5;
          if (v7 || (v3 & 0xFFFF0000) != 0)
            break;
        }
        else
        {
          v3 = v5 + (unsigned __int16)v6;
          if (((v7 | HIWORD(v3)) & 1) != 0)
            break;
        }
        v8 = 0;
        if (++a1 >= v4)
          return (unsigned __int16)v3 | (v8 << 16);
      }
      LOWORD(v3) = 0;
      v8 = 1;
    }
  }
  else
  {
    LOWORD(v3) = 0;
    v8 = 1;
  }
  return (unsigned __int16)v3 | (v8 << 16);
}

{
  int v3;
  _BYTE *v4;
  int v5;
  int v6;
  BOOL v7;
  int v8;

  if (a2)
  {
    if (a2 < 1)
    {
      LOWORD(v3) = 0;
      v8 = 0;
    }
    else
    {
      LOWORD(v3) = 0;
      v4 = &a1[a2];
      while (*a1 - 48 <= 9)
      {
        v5 = (*a1 - 48);
        v6 = 10 * (__int16)v3;
        v7 = v6 != (__int16)v6;
        v3 = (a3 & 1) != 0 ? (__int16)v6 - v5 : v5 + (__int16)v6;
        if (v7 || v3 != (__int16)v3)
          break;
        v8 = 0;
        if (++a1 >= v4)
          return (unsigned __int16)v3 | (v8 << 16);
      }
      LOWORD(v3) = 0;
      v8 = 1;
    }
  }
  else
  {
    LOWORD(v3) = 0;
    v8 = 1;
  }
  return (unsigned __int16)v3 | (v8 << 16);
}

uint64_t specialized _parseIntegerDigits<A>(_:isNegative:)(unsigned __int8 *a1, uint64_t a2, char a3)
{
  unsigned int v3;
  unsigned __int8 *v4;
  unsigned int v5;
  __int16 v6;
  _BOOL4 v7;
  int v8;

  if (a2)
  {
    if (a2 < 1)
    {
      LOBYTE(v3) = 0;
      v8 = 0;
    }
    else
    {
      LOBYTE(v3) = 0;
      v4 = &a1[a2];
      while (1)
      {
        v5 = *a1 - 48;
        if (v5 > 9)
          break;
        v6 = 10 * v3;
        v7 = (v6 & 0xF00) != 0;
        if ((a3 & 1) != 0)
        {
          v3 = v6 - v5;
          if (v7 || (v3 & 0xFFFFFF00) != 0)
            break;
        }
        else
        {
          v3 = v6 + v5;
          if (((v7 | (v3 >> 8)) & 1) != 0)
            break;
        }
        v8 = 0;
        if (++a1 >= v4)
          return v3 | (v8 << 8);
      }
      LOBYTE(v3) = 0;
      v8 = 1;
    }
  }
  else
  {
    LOBYTE(v3) = 0;
    v8 = 1;
  }
  return v3 | (v8 << 8);
}

{
  int v3;
  unsigned __int8 *v4;
  unsigned int v5;
  int v6;
  BOOL v7;
  int v8;

  if (a2)
  {
    if (a2 < 1)
    {
      LOBYTE(v3) = 0;
      v8 = 0;
    }
    else
    {
      LOBYTE(v3) = 0;
      v4 = &a1[a2];
      while (1)
      {
        v5 = *a1 - 48;
        if (v5 > 9)
          break;
        v6 = 10 * (char)v3;
        v7 = v6 != (char)v6;
        v3 = (a3 & 1) != 0 ? (char)v6 - (char)v5 : (char)v6 + (char)v5;
        if (v7 || v3 != (char)v3)
          break;
        v8 = 0;
        if (++a1 >= v4)
          return v3 | (v8 << 8);
      }
      LOBYTE(v3) = 0;
      v8 = 1;
    }
  }
  else
  {
    LOBYTE(v3) = 0;
    v8 = 1;
  }
  return v3 | (v8 << 8);
}

{
  uint64_t v3;
  unint64_t v4;
  unsigned __int8 *v5;
  unsigned int v6;
  _BOOL4 v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  uint64_t v18;

  if (!a2)
    return 0;
  if (a2 < 1)
    return 0;
  v3 = 0;
  v4 = 0;
  v5 = &a1[a2];
  while (1)
  {
    v6 = *a1 - 48;
    if (v6 >= 0xA)
      return 0;
    if ((v4 & 0x8000000000000000) == 0)
    {
      v7 = !is_mul_ok(v4, 0xAuLL);
      v8 = __CFADD__(((unint64_t)v3 * (unsigned __int128)0xAuLL) >> 64, 10 * v4);
      v9 = (__PAIR128__(v4, v3) * 0xA) >> 64;
      if (v8)
        v7 = 1;
      v10 = 10 * v3;
      if (!v7)
      {
        v11 = v9 >> 63;
        if ((a3 & 1) != 0)
          goto LABEL_17;
        goto LABEL_11;
      }
LABEL_16:
      LOBYTE(v11) = 1;
      if ((a3 & 1) != 0)
        goto LABEL_17;
      goto LABEL_11;
    }
    v8 = v3 == 0;
    v13 = -v3;
    v14 = -(uint64_t)(v4 + !v8);
    v15 = !is_mul_ok(v14, 0xAuLL);
    v8 = __CFADD__(((unint64_t)v13 * (unsigned __int128)0xAuLL) >> 64, 10 * v14);
    v16 = (__PAIR128__(v14, v13) * 0xA) >> 64;
    if (v8)
      v15 = 1;
    v8 = 10 * v13 == 0;
    v10 = -10 * v13;
    v9 = -(v16 + !v8);
    if (v15)
      goto LABEL_16;
    LOBYTE(v11) = v10 != 0;
    if ((a3 & 1) != 0)
    {
LABEL_17:
      v12 = __OFSUB__(__PAIR128__(v9, v10), v6);
      v4 = (__PAIR128__(v9, v10) - v6) >> 64;
      v3 = v10 - v6;
      goto LABEL_18;
    }
LABEL_11:
    v12 = __OFADD__(__CFADD__(v10, v6), v9);
    v4 = (__PAIR128__(v9, v10) + v6) >> 64;
    v3 = v10 + v6;
LABEL_18:
    v17 = v12;
    v18 = 0;
    if ((v11 & 1) != 0 || (v17 & 1) != 0)
      return v18;
    if (++a1 >= v5)
      return v3;
  }
}

unint64_t specialized Double.init<A>(exactly:)(unint64_t result)
{
  double v1;

  v1 = (double)result;
  if ((double)result >= 1.84467441e19)
  {
    *(double *)&result = 0.0;
  }
  else if ((~*(_QWORD *)&v1 & 0x7FF0000000000000) != 0)
  {
    if ((unint64_t)v1 == result)
      *(double *)&result = (double)result;
    else
      *(double *)&result = 0.0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t *specialized String.withUTF8<A>(_:)(uint64_t *result, size_t __n, void *__s1)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  const void *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];

  v5 = *result;
  v6 = result[1];
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_8:
    v14[0] = v5;
    v14[1] = v6 & 0xFFFFFFFFFFFFFFLL;
    if ((HIBYTE(v6) & 0xF) == __n)
    {
      v9 = v14;
      v8 = __s1;
      return (uint64_t *)(memcmp(v8, v9, __n) == 0);
    }
    return 0;
  }
  v10 = result;
  v5 = static String._copying(_:)();
  v12 = v11;
  result = (uint64_t *)swift_bridgeObjectRelease();
  *v10 = v5;
  v10[1] = v12;
  v6 = v12;
  if ((v12 & 0x2000000000000000) != 0)
    goto LABEL_8;
LABEL_3:
  if ((v5 & 0x1000000000000000) == 0)
  {
    result = (uint64_t *)_StringObject.sharedUTF8.getter();
    v7 = result;
    if (v13 == __n)
      goto LABEL_5;
    return 0;
  }
  v7 = (uint64_t *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
  if ((v5 & 0xFFFFFFFFFFFFLL) != __n)
    return 0;
LABEL_5:
  if (v7)
  {
    v8 = __s1;
    v9 = v7;
    return (uint64_t *)(memcmp(v8, v9, __n) == 0);
  }
  __break(1u);
  return result;
}

uint64_t specialized _parseJSON5Integer<A>(_:isHex:)(_BYTE *a1, uint64_t a2, char a3, uint64_t (*a4)(_BYTE *, uint64_t, uint64_t))
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!a2)
    return 0;
  v5 = *a1;
  if (v5 == 43)
  {
    v6 = 0;
  }
  else
  {
    if (v5 != 45)
    {
      v6 = 0;
      if ((a3 & 1) != 0)
      {
        if (a2 > 2)
          goto LABEL_11;
        goto LABEL_14;
      }
      return specialized _parseIntegerDigits<A>(_:isNegative:)(a1, a2, v6);
    }
    v6 = 1;
  }
  if (a2 >= 1)
    v7 = 1;
  else
    v7 = a2;
  a1 += v7;
  a2 -= v7;
  if ((a3 & 1) != 0)
  {
    if (a2 > 2)
    {
LABEL_11:
      v8 = 2;
      return a4(&a1[v8], a2 - v8, v6);
    }
LABEL_14:
    v8 = a2;
    return a4(&a1[v8], a2 - v8, v6);
  }
  return specialized _parseIntegerDigits<A>(_:isNegative:)(a1, a2, v6);
}

uint64_t specialized _parseJSON5Integer<A>(_:isHex:)(unsigned __int8 *a1, uint64_t a2, char a3, uint64_t (*a4)(unsigned __int8 *, uint64_t, uint64_t), uint64_t (*a5)(unsigned __int8 *, uint64_t, uint64_t))
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
    return 0;
  v6 = *a1;
  if (v6 == 43)
  {
    v7 = 0;
  }
  else
  {
    if (v6 != 45)
    {
      v7 = 0;
      if ((a3 & 1) != 0)
      {
        if (a2 > 2)
          goto LABEL_11;
        goto LABEL_14;
      }
      return a5(a1, a2, v7);
    }
    v7 = 1;
  }
  if (a2 >= 1)
    v8 = 1;
  else
    v8 = a2;
  a1 += v8;
  a2 -= v8;
  if ((a3 & 1) != 0)
  {
    if (a2 > 2)
    {
LABEL_11:
      v9 = 2;
      return a4(&a1[v9], a2 - v9, v7);
    }
LABEL_14:
    v9 = a2;
    return a4(&a1[v9], a2 - v9, v7);
  }
  return a5(a1, a2, v7);
}

{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
    return 0;
  v6 = *a1;
  if (v6 == 43)
  {
    v7 = 0;
  }
  else
  {
    if (v6 != 45)
    {
      v7 = 0;
      if ((a3 & 1) != 0)
      {
        if (a2 > 2)
          goto LABEL_11;
        goto LABEL_14;
      }
      return a5(a1, a2, v7);
    }
    v7 = 1;
  }
  if (a2 >= 1)
    v8 = 1;
  else
    v8 = a2;
  a1 += v8;
  a2 -= v8;
  if ((a3 & 1) != 0)
  {
    if (a2 >= 3)
    {
LABEL_11:
      v9 = 2;
      return a4(&a1[v9], a2 - v9, v7);
    }
LABEL_14:
    v9 = a2;
    return a4(&a1[v9], a2 - v9, v7);
  }
  return a5(a1, a2, v7);
}

uint64_t specialized _parseJSON5Integer<A>(_:isHex:)(unsigned __int8 *a1, uint64_t a2, char a3)
{
  int v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;

  if (!a2)
  {
    LOBYTE(v8) = 0;
    v9 = 1;
    return v8 | (v9 << 8);
  }
  v4 = *a1;
  if (v4 == 43)
  {
    v5 = 0;
  }
  else
  {
    if (v4 != 45)
    {
      v5 = 0;
      if ((a3 & 1) != 0)
      {
        if (a2 > 2)
          goto LABEL_11;
LABEL_14:
        v7 = a2;
        goto LABEL_15;
      }
LABEL_16:
      v8 = specialized _parseIntegerDigits<A>(_:isNegative:)(a1, a2, v5);
      goto LABEL_17;
    }
    v5 = 1;
  }
  if (a2 >= 1)
    v6 = 1;
  else
    v6 = a2;
  a1 += v6;
  a2 -= v6;
  if ((a3 & 1) == 0)
    goto LABEL_16;
  if (a2 <= 2)
    goto LABEL_14;
LABEL_11:
  v7 = 2;
LABEL_15:
  v8 = specialized _parseHexIntegerDigits<A>(_:isNegative:)(&a1[v7], a2 - v7, v5);
LABEL_17:
  v9 = (v8 >> 8) & 1;
  return v8 | (v9 << 8);
}

{
  int v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;

  if (!a2)
  {
    LOBYTE(v8) = 0;
    v9 = 1;
    return v8 | (v9 << 8);
  }
  v4 = *a1;
  if (v4 == 43)
  {
    v5 = 0;
  }
  else
  {
    if (v4 != 45)
    {
      v5 = 0;
      if ((a3 & 1) != 0)
      {
        if (a2 > 2)
          goto LABEL_11;
LABEL_14:
        v7 = a2;
        goto LABEL_15;
      }
LABEL_16:
      v8 = specialized _parseIntegerDigits<A>(_:isNegative:)(a1, a2, v5);
      goto LABEL_17;
    }
    v5 = 1;
  }
  if (a2 >= 1)
    v6 = 1;
  else
    v6 = a2;
  a1 += v6;
  a2 -= v6;
  if ((a3 & 1) == 0)
    goto LABEL_16;
  if (a2 < 3)
    goto LABEL_14;
LABEL_11:
  v7 = 2;
LABEL_15:
  v8 = specialized _parseHexIntegerDigits<A>(_:isNegative:)(&a1[v7], a2 - v7, v5);
LABEL_17:
  v9 = (v8 >> 8) & 1;
  return v8 | (v9 << 8);
}

uint64_t specialized _parseJSON5Integer<A>(_:isHex:)(_BYTE *a1, uint64_t a2, char a3)
{
  int v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;

  if (!a2)
  {
    LOWORD(v8) = 0;
    v9 = 1;
    return (unsigned __int16)v8 | (v9 << 16);
  }
  v4 = *a1;
  if (v4 == 43)
  {
    v5 = 0;
  }
  else
  {
    if (v4 != 45)
    {
      v5 = 0;
      if ((a3 & 1) != 0)
      {
        if (a2 > 2)
          goto LABEL_11;
LABEL_14:
        v7 = a2;
        goto LABEL_15;
      }
LABEL_16:
      v8 = specialized _parseIntegerDigits<A>(_:isNegative:)(a1, a2, v5);
      goto LABEL_17;
    }
    v5 = 1;
  }
  if (a2 >= 1)
    v6 = 1;
  else
    v6 = a2;
  a1 += v6;
  a2 -= v6;
  if ((a3 & 1) == 0)
    goto LABEL_16;
  if (a2 <= 2)
    goto LABEL_14;
LABEL_11:
  v7 = 2;
LABEL_15:
  v8 = specialized _parseHexIntegerDigits<A>(_:isNegative:)(&a1[v7], a2 - v7, v5);
LABEL_17:
  v9 = HIWORD(v8) & 1;
  return (unsigned __int16)v8 | (v9 << 16);
}

{
  int v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;

  if (!a2)
  {
    LOWORD(v8) = 0;
    v9 = 1;
    return (unsigned __int16)v8 | (v9 << 16);
  }
  v4 = *a1;
  if (v4 == 43)
  {
    v5 = 0;
  }
  else
  {
    if (v4 != 45)
    {
      v5 = 0;
      if ((a3 & 1) != 0)
      {
        if (a2 > 2)
          goto LABEL_11;
LABEL_14:
        v7 = a2;
        goto LABEL_15;
      }
LABEL_16:
      v8 = specialized _parseIntegerDigits<A>(_:isNegative:)(a1, a2, v5);
      goto LABEL_17;
    }
    v5 = 1;
  }
  if (a2 >= 1)
    v6 = 1;
  else
    v6 = a2;
  a1 += v6;
  a2 -= v6;
  if ((a3 & 1) == 0)
    goto LABEL_16;
  if (a2 < 3)
    goto LABEL_14;
LABEL_11:
  v7 = 2;
LABEL_15:
  v8 = specialized _parseHexIntegerDigits<A>(_:isNegative:)(&a1[v7], a2 - v7, v5);
LABEL_17:
  v9 = HIWORD(v8) & 1;
  return (unsigned __int16)v8 | (v9 << 16);
}

unint64_t specialized _parseJSON5Integer<A>(_:isHex:)(unsigned __int8 *a1, uint64_t a2, char a3, uint64_t (*a4)(unsigned __int8 *, uint64_t, uint64_t), uint64_t (*a5)(unsigned __int8 *, uint64_t, uint64_t))
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (!a2)
  {
    LODWORD(v10) = 0;
    LOBYTE(v11) = 1;
    return v10 | ((unint64_t)v11 << 32);
  }
  v6 = *a1;
  if (v6 == 43)
  {
    v7 = 0;
  }
  else
  {
    if (v6 != 45)
    {
      v7 = 0;
      if ((a3 & 1) != 0)
      {
        if (a2 > 2)
          goto LABEL_11;
LABEL_14:
        v9 = a2;
        goto LABEL_15;
      }
LABEL_16:
      v10 = a5(a1, a2, v7);
      v11 = HIDWORD(v10) & 1;
      return v10 | ((unint64_t)v11 << 32);
    }
    v7 = 1;
  }
  if (a2 >= 1)
    v8 = 1;
  else
    v8 = a2;
  a1 += v8;
  a2 -= v8;
  if ((a3 & 1) == 0)
    goto LABEL_16;
  if (a2 < 3)
    goto LABEL_14;
LABEL_11:
  v9 = 2;
LABEL_15:
  v10 = a4(&a1[v9], a2 - v9, v7);
  v11 = HIDWORD(v10) & 1;
  return v10 | ((unint64_t)v11 << 32);
}

unint64_t specialized NSDecimal.init<A>(exactly:)(unint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v5;
  uint64_t v6;
  _DWORD v7[3];

  if (result)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      v1 = 1;
      if (__ROR8__(0x3333333333333333 * result, 1) <= 0x1999999999999999uLL)
      {
        result = -(uint64_t)result;
        goto LABEL_9;
      }
      v2 = 0;
      result = -(uint64_t)result;
    }
    else
    {
      v1 = 0;
      v2 = 0;
      if (__ROR8__(0xCCCCCCCCCCCCCCCDLL * result, 1) < 0x199999999999999AuLL)
      {
LABEL_9:
        v3 = 0;
        do
        {
          v2 = v3 + 1;
          result /= 0xAuLL;
          if (__ROR8__(0xCCCCCCCCCCCCCCCDLL * result, 1) > 0x1999999999999999uLL)
            break;
        }
        while (v3++ < 0x7E);
      }
    }
    HIDWORD(v6) = result;
    v5 = (79 - __clz(result)) >> 4;
    LOWORD(v7[0]) = WORD2(result);
    HIWORD(v7[0]) = HIWORD(result);
    *(_QWORD *)&v7[1] = 0;
    _So9NSDecimala__exponent_setter(v2, &v6);
    _So9NSDecimala__length_setter(v5, &v6);
    _So9NSDecimala__isNegative_setter(v1, &v6);
    _So9NSDecimala__isCompact_setter_0(1, &v6);
    _So9NSDecimala__reserved_setter(&v6);
    return v6;
  }
  return result;
}

{
  uint64_t v1;
  unsigned int v2;
  unint64_t v4;
  uint64_t v5;
  _DWORD v6[3];

  if (result)
  {
    if (__ROR8__(0xCCCCCCCCCCCCCCCDLL * result, 1) <= 0x1999999999999999uLL)
    {
      v2 = 0;
      do
      {
        v1 = v2 + 1;
        result /= 0xAuLL;
        if (__ROR8__(0xCCCCCCCCCCCCCCCDLL * result, 1) > 0x1999999999999999uLL)
          break;
      }
      while (v2++ < 0x7E);
    }
    else
    {
      v1 = 0;
    }
    HIDWORD(v5) = result;
    v4 = (79 - __clz(result)) >> 4;
    LOWORD(v6[0]) = WORD2(result);
    HIWORD(v6[0]) = HIWORD(result);
    *(_QWORD *)&v6[1] = 0;
    _So9NSDecimala__exponent_setter(v1, &v5);
    _So9NSDecimala__length_setter(v4, &v5);
    _So9NSDecimala__isNegative_setter(0, &v5);
    _So9NSDecimala__isCompact_setter_0(1, &v5);
    _So9NSDecimala__reserved_setter(&v5);
    return v5;
  }
  return result;
}

uint64_t JSONDecoder.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  JSONDecoder.init()();
  return v0;
}

uint64_t JSONDecoder.dateDecodingStrategy.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  char v7;

  v3 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_optionsLock);
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  v4 = v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
  v5 = *(void **)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options);
  v6 = *(_QWORD *)(v4 + 8);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_BYTE *)(v4 + 16);
  *(_BYTE *)(a1 + 16) = v7;
  swift_retain();
  outlined copy of JSONEncoder.DateEncodingStrategy(v5, v6, v7);
  os_unfair_lock_unlock(v3 + 4);
  return swift_release();
}

void (*JSONDecoder.dateDecodingStrategy.modify(_QWORD *a1))(void ***a1)
{
  uint64_t v1;
  _QWORD *v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char v9;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_optionsLock);
  v3[3] = v1;
  v3[4] = v4;
  swift_retain();
  os_unfair_lock_lock(v4 + 4);
  swift_release();
  v5 = OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
  v3[5] = OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
  v6 = v1 + v5;
  v7 = *(void **)v6;
  v8 = *(_QWORD *)(v6 + 8);
  *v3 = *(_QWORD *)v6;
  v3[1] = v8;
  v9 = *(_BYTE *)(v6 + 16);
  *((_BYTE *)v3 + 16) = v9;
  outlined copy of JSONEncoder.DateEncodingStrategy(v7, v8, v9);
  return JSONDecoder.dateDecodingStrategy.modify;
}

void JSONDecoder.dateDecodingStrategy.modify(void ***a1)
{
  void **v1;
  os_unfair_lock_s *v2;
  char *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  char v8;
  char v9;

  v1 = *a1;
  v2 = (os_unfair_lock_s *)(*a1)[4];
  v3 = (char *)(*a1)[5] + (_QWORD)(*a1)[3];
  v4 = **a1;
  v5 = (uint64_t)v1[1];
  v6 = *(void **)v3;
  v7 = *((_QWORD *)v3 + 1);
  v8 = *((_BYTE *)v1 + 16);
  *(_QWORD *)v3 = v4;
  *((_QWORD *)v3 + 1) = v5;
  v9 = v3[16];
  v3[16] = v8;
  outlined copy of JSONEncoder.DateEncodingStrategy(v4, v5, v8);
  outlined consume of JSONEncoder.DateEncodingStrategy(v6, v7, v9);
  swift_retain();
  os_unfair_lock_unlock(v2 + 4);
  swift_release();
  outlined consume of JSONEncoder.DateEncodingStrategy(*v1, (uint64_t)v1[1], *((_BYTE *)v1 + 16));
  free(v1);
}

uint64_t JSONDecoder.dataDecodingStrategy.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_optionsLock);
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  v4 = v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 24);
  v6 = *(_QWORD *)(v4 + 32);
  *a1 = v5;
  a1[1] = v6;
  swift_retain();
  outlined copy of JSONEncoder.KeyEncodingStrategy(v5);
  os_unfair_lock_unlock(v3 + 4);
  return swift_release();
}

void (*JSONDecoder.dataDecodingStrategy.modify(_QWORD *a1))(unint64_t **a1)
{
  uint64_t v1;
  _QWORD *v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v4 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_optionsLock);
  v3[2] = v1;
  v3[3] = v4;
  swift_retain();
  os_unfair_lock_lock(v4 + 4);
  swift_release();
  v5 = OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
  v3[4] = OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
  v6 = v1 + v5;
  v7 = *(_QWORD *)(v6 + 24);
  v8 = *(_QWORD *)(v6 + 32);
  *v3 = v7;
  v3[1] = v8;
  outlined copy of JSONEncoder.KeyEncodingStrategy(v7);
  return JSONDecoder.dataDecodingStrategy.modify;
}

void JSONDecoder.dataDecodingStrategy.modify(unint64_t **a1)
{
  unint64_t *v1;
  os_unfair_lock_s *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v1 = *a1;
  v2 = (os_unfair_lock_s *)(*a1)[3];
  v3 = (*a1)[1];
  v4 = (*a1)[2] + (*a1)[4];
  v5 = **a1;
  v6 = *(_QWORD *)(v4 + 24);
  *(_QWORD *)(v4 + 24) = v5;
  *(_QWORD *)(v4 + 32) = v3;
  outlined copy of JSONEncoder.KeyEncodingStrategy(v5);
  outlined consume of JSONEncoder.KeyEncodingStrategy(v6);
  swift_retain();
  os_unfair_lock_unlock(v2 + 4);
  swift_release();
  outlined consume of JSONEncoder.KeyEncodingStrategy(*v1);
  free(v1);
}

uint64_t key path setter for JSONDecoder.nonConformingFloatDecodingStrategy : JSONDecoder(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t *);
  uint64_t v10[6];

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  v5 = a1[4];
  v6 = a1[5];
  v7 = *a2;
  v10[0] = *a1;
  v10[1] = v2;
  v10[2] = v3;
  v10[3] = v4;
  v10[4] = v5;
  v10[5] = v6;
  v8 = *(uint64_t (**)(uint64_t *))(*(_QWORD *)v7 + 160);
  outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v10[0], v2);
  return v8(v10);
}

uint64_t JSONDecoder.nonConformingFloatDecodingStrategy.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_optionsLock);
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  v4 = (_QWORD *)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options);
  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 40);
  v6 = v4[6];
  v7 = v4[7];
  v8 = v4[8];
  v9 = v4[9];
  v10 = v4[10];
  *a1 = v5;
  a1[1] = v6;
  a1[2] = v7;
  a1[3] = v8;
  a1[4] = v9;
  a1[5] = v10;
  swift_retain();
  outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v5, v6);
  os_unfair_lock_unlock(v3 + 4);
  return swift_release();
}

void (*JSONDecoder.nonConformingFloatDecodingStrategy.modify(_QWORD *a1))(uint64_t **a1)
{
  uint64_t v1;
  _QWORD *v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = malloc(0x48uLL);
  *a1 = v3;
  v4 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_optionsLock);
  v3[6] = v1;
  v3[7] = v4;
  swift_retain();
  os_unfair_lock_lock(v4 + 4);
  swift_release();
  v5 = OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
  v3[8] = OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
  v6 = (_QWORD *)(v1 + v5);
  v7 = v6[5];
  v8 = v6[6];
  v9 = v6[7];
  v10 = v6[8];
  v11 = v6[9];
  v12 = v6[10];
  *v3 = v7;
  v3[1] = v8;
  v3[2] = v9;
  v3[3] = v10;
  v3[4] = v11;
  v3[5] = v12;
  outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v7, v8);
  return JSONDecoder.nonConformingFloatDecodingStrategy.modify;
}

void JSONDecoder.nonConformingFloatDecodingStrategy.modify(uint64_t **a1)
{
  uint64_t *v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *a1;
  v2 = (os_unfair_lock_s *)(*a1)[7];
  v3 = (*a1)[5];
  v4 = (_QWORD *)((*a1)[6] + (*a1)[8]);
  v5 = **a1;
  v6 = v1[1];
  v7 = v1[2];
  v8 = v1[3];
  v9 = v1[4];
  v10 = v4[5];
  v11 = v4[6];
  v4[5] = v5;
  v4[6] = v6;
  v4[7] = v7;
  v4[8] = v8;
  v4[9] = v9;
  v4[10] = v3;
  outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v5, v6);
  outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(v10, v11);
  swift_retain();
  os_unfair_lock_unlock(v2 + 4);
  swift_release();
  outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(*v1, v1[1]);
  free(v1);
}

uint64_t JSONDecoder.keyDecodingStrategy.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_optionsLock);
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  v4 = v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 88);
  v6 = *(_QWORD *)(v4 + 96);
  *a1 = v5;
  a1[1] = v6;
  swift_retain();
  outlined copy of JSONEncoder.KeyEncodingStrategy(v5);
  os_unfair_lock_unlock(v3 + 4);
  return swift_release();
}

void (*JSONDecoder.keyDecodingStrategy.modify(_QWORD *a1))(unint64_t **a1)
{
  uint64_t v1;
  _QWORD *v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v4 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_optionsLock);
  v3[2] = v1;
  v3[3] = v4;
  swift_retain();
  os_unfair_lock_lock(v4 + 4);
  swift_release();
  v5 = OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
  v3[4] = OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
  v6 = v1 + v5;
  v7 = *(_QWORD *)(v6 + 88);
  v8 = *(_QWORD *)(v6 + 96);
  *v3 = v7;
  v3[1] = v8;
  outlined copy of JSONEncoder.KeyEncodingStrategy(v7);
  return JSONDecoder.keyDecodingStrategy.modify;
}

void JSONDecoder.keyDecodingStrategy.modify(unint64_t **a1)
{
  unint64_t *v1;
  os_unfair_lock_s *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v1 = *a1;
  v2 = (os_unfair_lock_s *)(*a1)[3];
  v3 = (*a1)[1];
  v4 = (*a1)[2] + (*a1)[4];
  v5 = **a1;
  v6 = *(_QWORD *)(v4 + 88);
  *(_QWORD *)(v4 + 88) = v5;
  *(_QWORD *)(v4 + 96) = v3;
  outlined copy of JSONEncoder.KeyEncodingStrategy(v5);
  outlined consume of JSONEncoder.KeyEncodingStrategy(v6);
  swift_retain();
  os_unfair_lock_unlock(v2 + 4);
  swift_release();
  outlined consume of JSONEncoder.KeyEncodingStrategy(*v1);
  free(v1);
}

uint64_t JSONDecoder.allowsJSON5.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 112) = result;
  return result;
}

uint64_t (*JSONDecoder.allowsJSON5.modify(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v2 = OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
  *(_QWORD *)a1 = v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(v1 + v2 + 112);
  return JSONDecoder.allowsJSON5.modify;
}

uint64_t JSONDecoder.allowsJSON5.modify(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)result + *(_QWORD *)(result + 8) + 112) = *(_BYTE *)(result + 16);
  return result;
}

uint64_t JSONDecoder.assumesTopLevelDictionary.setter(char a1)
{
  uint64_t v1;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t (*v8)(_BYTE *, _QWORD);
  _BYTE v10[32];
  _BYTE v11[24];
  uint64_t v12;

  v3 = type metadata accessor for CodingUserInfoKey();
  v4 = MEMORY[0x1E0C80A78](v3);
  v6 = &v10[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, __n128))(v7 + 16))(v6, v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_assumesTopLevelDictionaryKey, v4);
  v12 = MEMORY[0x1E0DEAFA0];
  v11[0] = a1;
  v8 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 216))(v10);
  specialized Dictionary.subscript.setter((uint64_t)v11, (uint64_t)v6);
  return v8(v10, 0);
}

void (*JSONDecoder.assumesTopLevelDictionary.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[8] = v1;
  v4 = type metadata accessor for CodingUserInfoKey();
  v3[9] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[10] = v5;
  v3[11] = malloc(*(_QWORD *)(v5 + 64));
  *((_BYTE *)v3 + 96) = JSONDecoder.assumesTopLevelDictionary.getter() & 1;
  return JSONDecoder.assumesTopLevelDictionary.modify;
}

void JSONDecoder.assumesTopLevelDictionary.modify(uint64_t a1, char a2)
{
  _QWORD *v3;
  char v4;
  void *v5;
  uint64_t v6;
  void (*v7)(_QWORD *, _QWORD);
  uint64_t v8;
  void (*v9)(_QWORD *, _QWORD);
  _BYTE v10[24];
  uint64_t v11;

  v3 = *(_QWORD **)a1;
  v4 = *(_BYTE *)(*(_QWORD *)a1 + 96);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 80) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 88), v3[8] + OBJC_IVAR____TtC10Foundation13__JSONDecoder_assumesTopLevelDictionaryKey, v3[9]);
  v5 = (void *)v3[11];
  if ((a2 & 1) != 0)
  {
    v6 = v3[8];
    v11 = MEMORY[0x1E0DEAFA0];
    v10[0] = v4;
    v7 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *))(*(_QWORD *)v6 + 216))(v3);
    specialized Dictionary.subscript.setter((uint64_t)v10, (uint64_t)v5);
    v7(v3, 0);
  }
  else
  {
    v8 = v3[8];
    v11 = MEMORY[0x1E0DEAFA0];
    v10[0] = v4;
    v9 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *))(*(_QWORD *)v8 + 216))(v3 + 4);
    specialized Dictionary.subscript.setter((uint64_t)v10, (uint64_t)v5);
    v9(v3 + 4, 0);
  }
  free(v5);
  free(v3);
}

void specialized JSONDecoderImpl.unwrap<A, B>(_:as:for:_:)(unint64_t a1, uint64_t a2, unsigned __int8 a3, ValueMetadata *a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v14;
  unint64_t v15;
  ValueMetadata *v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v33;
  unsigned __int8 v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v14 = (_QWORD *)a6;
  v15 = a5;
  v51 = a10;
  if (a4 == &type metadata for Date)
  {
    specialized JSONDecoderImpl.unwrapDate<A>(from:for:_:)(a1, a2, a3, a5, a6, a7, a8, a9, &v46);
    if (v11)
      return;
    goto LABEL_14;
  }
  if (a4 == &type metadata for Data)
  {
    v21 = specialized JSONDecoderImpl.unwrapData<A>(from:for:_:)(a1, a2, a3, a5, a6, a7, a8, a9);
    if (v11)
      return;
    v46 = v21;
    v47 = v22;
    goto LABEL_14;
  }
  if (a4 == &type metadata for URL)
  {
    specialized JSONDecoderImpl.unwrapURL<A>(from:for:_:)(a1, a2, a3, a5, a6, a7, a8, a9, (uint64_t)&v46);
    if (v11)
      return;
    goto LABEL_14;
  }
  v43 = v11;
  v45 = v10;
  type metadata accessor for NSDecimal(0);
  if (v19 == a4)
  {
    v23 = specialized JSONDecoderImpl.unwrapDecimal<A>(from:for:_:)(a1, a2, a3, v15, (uint64_t)v14, a7, a8, a9);
    if (v11)
      return;
    v46 = (_QWORD *)v23;
    v47 = v24;
    v48 = v25;
LABEL_14:
    swift_dynamicCast();
    return;
  }
  v42 = a2;
  if (swift_conformsToProtocol2())
    v20 = v51;
  else
    v20 = 0;
  if (v20)
  {
    specialized JSONDecoderImpl.unwrapDictionary<A, B>(from:as:for:_:)(a1, a2, a3, (uint64_t)a4, v15, (uint64_t)v14, a7, a8, a9);
    return;
  }
  if (a9 == -1)
  {
    swift_retain();
    v29 = v10;
    goto LABEL_29;
  }
  v26 = (_QWORD *)swift_allocObject();
  v26[5] = &type metadata for _CodingKey;
  v26[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v27 = swift_allocObject();
  v26[2] = v27;
  *(_QWORD *)(v27 + 16) = v14;
  *(_QWORD *)(v27 + 24) = a7;
  *(_QWORD *)(v27 + 32) = a8;
  *(_BYTE *)(v27 + 40) = a9;
  v26[7] = v15;
  if (v15 >> 62)
  {
    if (v15 >> 62 != 1)
    {
      v30 = 0;
      goto LABEL_27;
    }
    v28 = (uint64_t *)((v15 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v28 = (uint64_t *)(v15 + 64);
  }
  v30 = *v28;
  swift_retain();
LABEL_27:
  if (__OFADD__(v30, 1))
  {
    __break(1u);
    goto LABEL_44;
  }
  v26[8] = v30 + 1;
  v15 = (unint64_t)v26;
  v29 = v45;
LABEL_29:
  v42 = v29[20];
  v29[20] = v15;
  v31 = (_QWORD *)v29[2];
  outlined copy of _CodingKey?((uint64_t)v14, a7, a8, a9);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v33 = v45;
  v45[2] = v31;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31[2] + 1, 1, v31);
    v33 = v45;
    v31 = v40;
    v45[2] = v40;
  }
  v34 = a3;
  v36 = v31[2];
  v35 = v31[3];
  if (v36 >= v35 >> 1)
  {
    v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v35 > 1), v36 + 1, 1, v31);
    v34 = a3;
    v33 = v45;
    v31 = v41;
  }
  v31[2] = v36 + 1;
  v37 = &v31[3 * v36];
  v37[4] = a1;
  v37[5] = a2;
  *((_BYTE *)v37 + 48) = v34;
  v33[2] = v31;
  v14 = v33;
  v49 = type metadata accessor for JSONDecoderImpl();
  v50 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type JSONDecoderImpl and conformance JSONDecoderImpl, (uint64_t (*)(uint64_t))type metadata accessor for JSONDecoderImpl, (uint64_t)&protocol conformance descriptor for JSONDecoderImpl);
  v46 = v14;
  swift_retain();
  dispatch thunk of Decodable.init(from:)();
  if (!v43)
  {
LABEL_38:
    v14[20] = v42;
    swift_retain();
    swift_release();
    v14 = (_QWORD *)v14[2];
    if (v14[2])
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_40;
    }
    else
    {
      __break(1u);
    }
    v14 = specialized _ArrayBuffer._consumeAndCreateNew()(v14);
LABEL_40:
    v38 = v14[2];
    v39 = v45;
    if (!v38)
    {
      __break(1u);
      return;
    }
    goto LABEL_41;
  }
  v14[20] = v42;
  swift_retain();
  swift_release();
  v14 = (_QWORD *)v14[2];
  if (v14[2])
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_36;
    goto LABEL_45;
  }
LABEL_44:
  __break(1u);
LABEL_45:
  v14 = specialized _ArrayBuffer._consumeAndCreateNew()(v14);
LABEL_36:
  v38 = v14[2];
  v39 = v45;
  if (!v38)
  {
    __break(1u);
    goto LABEL_38;
  }
LABEL_41:
  v14[2] = v38 - 1;
  v39[2] = v14;
  swift_release();
  swift_release();
}

void JSONDecoderImpl.unwrap<A, B>(_:as:for:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, ValueMetadata *a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t *v11;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  int64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  ValueMetadata *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void (*v44)(char *, int64_t, uint64_t);
  int64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  unint64_t v50;
  unint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t, _QWORD *);
  char *v56;
  unint64_t v57;
  uint64_t *boxed_opaque_existential_1;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  _QWORD *v62;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[3];
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  v78 = a9;
  v79 = a7;
  v72 = *(_QWORD *)(a8 - 8);
  MEMORY[0x1E0C80A78](a1);
  v71 = (char *)v69 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v20);
  MEMORY[0x1E0C80A78](v21);
  if (a4 == &type metadata for Date)
  {
    v35 = v85;
    JSONDecoderImpl.unwrapDate<A>(from:for:_:)(a1, a2, a3, a5, a6, a8, a11, &v80);
    if (v35)
      return;
    goto LABEL_15;
  }
  v26 = a6;
  v74 = a5;
  v75 = a1;
  v76 = a2;
  LODWORD(v77) = a3;
  v73 = v11;
  if (a4 == &type metadata for Data)
  {
    v36 = v85;
    v37 = JSONDecoderImpl.unwrapData<A>(from:for:_:)(v75, v76, v77, v74, a6, a8, a11);
    if (v36)
      return;
    v80 = (unint64_t)v37;
    v81 = v38;
    goto LABEL_15;
  }
  v27 = (_QWORD *)a8;
  v28 = v26;
  if (a4 == &type metadata for URL)
  {
    v39 = v85;
    JSONDecoderImpl.unwrapURL<A>(from:for:_:)(v75, v76, v77, v74, v26, a8, a11, &v80);
    if (v39)
      return;
    goto LABEL_15;
  }
  v70 = v25;
  v29 = (char *)v69 - v23;
  v30 = v24;
  v31 = v22;
  type metadata accessor for NSDecimal(0);
  if (v32 != a4)
  {
    v33 = v79;
    if (swift_conformsToProtocol2())
      v34 = v33;
    else
      v34 = 0;
    if (v34)
    {
      JSONDecoderImpl.unwrapDictionary<A, B>(from:as:for:_:)(v75, v76, v77, (uint64_t)a4, v74, v28, v33, (uint64_t)v27, v78, a10, a11);
      return;
    }
    v69[1] = a4;
    v69[2] = a10;
    v44 = *(void (**)(char *, int64_t, uint64_t))(v30 + 16);
    v45 = v28;
    v46 = v31;
    v44(v29, v45, v31);
    v47 = v70;
    v44(v70, (int64_t)v29, v31);
    v48 = v72;
    if ((*(unsigned int (**)(char *, uint64_t, _QWORD *))(v72 + 48))(v47, 1, v27) == 1)
    {
      v49 = *(void (**)(char *, uint64_t))(v30 + 8);
      v49(v29, v31);
      v49(v47, v31);
      v50 = v74;
      v51 = v74 & 0x3FFFFFFFFFFFFFFFLL;
      swift_retain();
      v52 = v77;
      v53 = v75;
      v54 = v76;
      goto LABEL_29;
    }
    v55 = *(void (**)(char *, uint64_t, _QWORD *))(v48 + 32);
    v56 = v71;
    v55(v71, (uint64_t)v47, v27);
    v57 = swift_allocObject();
    *(_QWORD *)(v57 + 40) = v27;
    *(_QWORD *)(v57 + 48) = a11;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v57 + 16));
    v55((char *)boxed_opaque_existential_1, (uint64_t)v56, v27);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v29, v46);
    v59 = v74;
    *(_QWORD *)(v57 + 56) = v74;
    if (v59 >> 62)
    {
      v52 = v77;
      v53 = v75;
      v54 = v76;
      if (v59 >> 62 != 1)
      {
        v61 = 0;
        goto LABEL_27;
      }
      v60 = (uint64_t *)((v59 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      v60 = (uint64_t *)(v59 + 64);
      v52 = v77;
      v53 = v75;
      v54 = v76;
    }
    v61 = *v60;
    swift_retain();
LABEL_27:
    if (__OFADD__(v61, 1))
    {
      __break(1u);
      goto LABEL_46;
    }
    *(_QWORD *)(v57 + 64) = v61 + 1;
    v51 = v57 & 0x3FFFFFFFFFFFFFFFLL;
    v50 = v57;
LABEL_29:
    v57 = (unint64_t)v73;
    v27 = (_QWORD *)v73[20];
    v73[20] = v50;
    v62 = *(_QWORD **)(v57 + 16);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v57 + 16) = v62;
    v77 = v51;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v62[2] + 1, 1, v62);
      *(_QWORD *)(v57 + 16) = v62;
    }
    v65 = v62[2];
    v64 = v62[3];
    if (v65 >= v64 >> 1)
      v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v64 > 1), v65 + 1, 1, v62);
    v62[2] = v65 + 1;
    v66 = &v62[3 * v65];
    v66[4] = v53;
    v66[5] = v54;
    *((_BYTE *)v66 + 48) = v52;
    *(_QWORD *)(v57 + 16) = v62;
    v83 = type metadata accessor for JSONDecoderImpl();
    v84 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type JSONDecoderImpl and conformance JSONDecoderImpl, (uint64_t (*)(uint64_t))type metadata accessor for JSONDecoderImpl, (uint64_t)&protocol conformance descriptor for JSONDecoderImpl);
    v80 = v57;
    swift_retain();
    v67 = v85;
    dispatch thunk of Decodable.init(from:)();
    if (!v67)
    {
LABEL_38:
      *(_QWORD *)(v57 + 160) = v27;
      swift_retain();
      swift_release();
      v27 = *(_QWORD **)(v57 + 16);
      if (v27[2])
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v68 = v27[2];
          if (v68)
            goto LABEL_41;
          goto LABEL_48;
        }
LABEL_47:
        v27 = specialized _ArrayBuffer._consumeAndCreateNew()(v27);
        v68 = v27[2];
        if (v68)
          goto LABEL_41;
LABEL_48:
        __break(1u);
        return;
      }
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    *(_QWORD *)(v57 + 160) = v27;
    swift_retain();
    swift_release();
    v27 = *(_QWORD **)(v57 + 16);
    if (v27[2])
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        v68 = v27[2];
        if (v68)
        {
LABEL_41:
          v27[2] = v68 - 1;
          *(_QWORD *)(v57 + 16) = v27;
          swift_release();
          swift_release();
          return;
        }
        goto LABEL_37;
      }
    }
    else
    {
      __break(1u);
    }
    v27 = specialized _ArrayBuffer._consumeAndCreateNew()(v27);
    v68 = v27[2];
    if (v68)
      goto LABEL_41;
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v40 = v85;
  v41 = JSONDecoderImpl.unwrapDecimal<A>(from:for:_:)(v75, v76, v77, v74, v28, (uint64_t)v27, a11);
  if (!v40)
  {
    v80 = v41;
    v81 = v42;
    v82 = v43;
LABEL_15:
    swift_dynamicCast();
  }
}

void JSONDecoder.decode<A>(_:from:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  id v4;
  uint64_t inited;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  id v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  _QWORD v27[2];
  __int128 v28;
  _QWORD *v29;
  _BYTE v30[56];
  _BYTE v31[56];
  id v32;

  static JSONDecoder.withUTF8Representation<A>(of:_:)(a2, a3);
  if (!v3)
    return;
  v32 = v3;
  v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (!swift_dynamicCast())
  {

    swift_willThrow();
    return;
  }

  outlined init with take of JSONError((uint64_t)v30, (uint64_t)v31);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18205C850;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
  *(_QWORD *)(inited + 40) = v6;
  JSONError.debugDescription.getter();
  *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 48) = v7;
  *(_QWORD *)(inited + 56) = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v9 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (Hashable & Sendable)?(inited + 32, (uint64_t)v27, &demangling cache variable for type metadata for (String, Any));
  v10 = v27[0];
  v11 = v27[1];
  swift_retain();
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11);
  if ((v13 & 1) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  v9[(v12 >> 6) + 8] |= 1 << v12;
  v14 = (uint64_t *)(v9[6] + 16 * v12);
  *v14 = v10;
  v14[1] = v11;
  outlined init with take of Any(&v28, (_OWORD *)(v9[7] + 32 * v12));
  v15 = v9[2];
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
  {
LABEL_11:
    __break(1u);
    return;
  }
  v9[2] = v17;
  swift_release();
  swift_bridgeObjectRelease();
  v29 = v9;
  JSONError.sourceLocation.getter();
  if ((v19 & 1) == 0)
  {
    *((_QWORD *)&v28 + 1) = MEMORY[0x1E0DEB418];
    v27[0] = v18;
    specialized Dictionary.subscript.setter((uint64_t)v27, 0xD00000000000001DLL, 0x8000000182306D20);
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v20 = objc_allocWithZone((Class)NSError);
  v21 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v22 = objc_msgSend(v20, sel_initWithDomain_code_userInfo_, v21, 3840, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  outlined release of JSONError((uint64_t)v31);
  v23 = type metadata accessor for DecodingError();
  swift_allocError();
  v25 = v24;
  v26 = v22;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v25, *MEMORY[0x1E0DEC458], v23);
  swift_willThrow();

}

uint64_t specialized JSONDecoderImpl.unwrap<A, B>(_:as:configuration:for:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X7>, uint64_t a9@<X8>, uint64_t a10, unsigned __int8 a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t AssociatedTypeWitness;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(_QWORD *, char *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[5];
  uint64_t v51;

  v15 = v13;
  v45 = a5;
  v46 = a9;
  v49 = a4;
  v43 = a3;
  v40 = a1;
  v41 = a2;
  v47 = a12;
  v48 = a13;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v42 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v21 = (char *)&v39 - v20;
  v51 = v14;
  v44 = v22;
  if (a11 == 255)
  {
    swift_retain();
    v25 = (uint64_t)a8;
    goto LABEL_9;
  }
  v23 = (_QWORD *)swift_allocObject();
  v23[5] = &type metadata for _CodingKey;
  v23[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v24 = swift_allocObject();
  v23[2] = v24;
  *(_QWORD *)(v24 + 16) = a7;
  *(_QWORD *)(v24 + 24) = a8;
  *(_QWORD *)(v24 + 32) = a10;
  *(_BYTE *)(v24 + 40) = a11;
  v23[7] = a6;
  v25 = (uint64_t)a8;
  if (a6 >> 62)
  {
    if (a6 >> 62 != 1)
    {
      v28 = 1;
      goto LABEL_8;
    }
    v26 = (uint64_t *)((a6 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v26 = (uint64_t *)(a6 + 64);
  }
  v27 = *v26;
  swift_retain();
  v25 = (uint64_t)a8;
  v28 = v27 + 1;
  if (!__OFADD__(v27, 1))
  {
LABEL_8:
    v23[8] = v28;
    a6 = (unint64_t)v23;
LABEL_9:
    a8 = *(_QWORD **)(v15 + 160);
    *(_QWORD *)(v15 + 160) = a6;
    v23 = *(_QWORD **)(v15 + 16);
    outlined copy of _CodingKey?(a7, v25, a10, a11);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v15 + 16) = v23;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_10;
    goto LABEL_23;
  }
  __break(1u);
LABEL_23:
  v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23[2] + 1, 1, v23);
  *(_QWORD *)(v15 + 16) = v23;
LABEL_10:
  v31 = v23[2];
  v30 = v23[3];
  if (v31 >= v30 >> 1)
    v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v30 > 1), v31 + 1, 1, v23);
  v23[2] = v31 + 1;
  v32 = &v23[3 * v31];
  v33 = v41;
  v32[4] = v40;
  v32[5] = v33;
  *((_BYTE *)v32 + 48) = v43;
  *(_QWORD *)(v15 + 16) = v23;
  v50[3] = type metadata accessor for JSONDecoderImpl();
  v50[4] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type JSONDecoderImpl and conformance JSONDecoderImpl, (uint64_t (*)(uint64_t))type metadata accessor for JSONDecoderImpl, (uint64_t)&protocol conformance descriptor for JSONDecoderImpl);
  v50[0] = v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v21, v45, v44);
  v34 = v48;
  v35 = *(void (**)(_QWORD *, char *, uint64_t, uint64_t))(v48 + 16);
  swift_retain();
  v36 = v51;
  v35(v50, v21, v47, v34);
  if (v36)
  {
    *(_QWORD *)(v15 + 160) = a8;
    swift_retain();
    swift_release();
    a8 = *(_QWORD **)(v15 + 16);
    if (a8[2])
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        v37 = a8[2];
        if (v37)
        {
LABEL_20:
          a8[2] = v37 - 1;
          *(_QWORD *)(v15 + 16) = a8;
          swift_release();
          return swift_release();
        }
        goto LABEL_16;
      }
    }
    else
    {
      __break(1u);
    }
    a8 = specialized _ArrayBuffer._consumeAndCreateNew()(a8);
    v37 = a8[2];
    if (v37)
      goto LABEL_20;
LABEL_16:
    __break(1u);
  }
  *(_QWORD *)(v15 + 160) = a8;
  swift_retain();
  swift_release();
  a8 = *(_QWORD **)(v15 + 16);
  if (!a8[2])
  {
    __break(1u);
LABEL_28:
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(a8);
    a8 = (_QWORD *)result;
    v37 = *(_QWORD *)(result + 16);
    if (v37)
      goto LABEL_20;
    goto LABEL_29;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
    goto LABEL_28;
  v37 = a8[2];
  if (v37)
    goto LABEL_20;
LABEL_29:
  __break(1u);
  return result;
}

uint64_t JSONDecoder.decode<A, B>(_:from:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v9 = v8;
  v22 = a2;
  v23 = a3;
  v21 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v16 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v18 = (char *)&v20 - v17;
  (*(void (**)(uint64_t, uint64_t, __n128))(a8 + 16))(a6, a8, v16);
  (*(void (**)(uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)v9 + 328))(v21, v22, v23, v18, a5, a7);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, AssociatedTypeWitness);
}

void static JSONDecoder.withUTF8Representation<A>(of:_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_181E18994(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(unsigned __int8 *, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 - 104) = v4;
  *(_WORD *)(v6 - 96) = v5;
  *(_BYTE *)(v6 - 94) = BYTE2(v5);
  *(_BYTE *)(v6 - 93) = BYTE3(v5);
  *(_BYTE *)(v6 - 92) = BYTE4(v5);
  *(_BYTE *)(v6 - 91) = BYTE5(v5);
  return closure #1 in static JSONDecoder.withUTF8Representation<A>(of:_:)((unsigned __int8 *)(v6 - 104), BYTE6(v5), BYTE6(v5), a4);
}

uint64_t JSONDecoder.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_assumesTopLevelDictionaryKey;
  v2 = type metadata accessor for CodingUserInfoKey();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 24);
  v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 40);
  v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 48);
  v6 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 88);
  outlined consume of JSONEncoder.DateEncodingStrategy(*(void **)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options), *(_QWORD *)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 8), *(_BYTE *)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 16));
  outlined consume of JSONEncoder.KeyEncodingStrategy(v3);
  outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(v4, v5);
  outlined consume of JSONEncoder.KeyEncodingStrategy(v6);
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

void specialized JSONDecoderImpl.unwrapDate<A>(from:for:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, _QWORD *a9@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v36;
  unsigned __int8 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  void *v62;
  char v63;
  uint64_t v64;
  uint64_t inited;
  uint64_t v66;
  id v70;
  id v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  _QWORD v76[6];
  uint64_t v77;

  v12 = a7;
  v14 = a1;
  v77 = *MEMORY[0x1E0C80C00];
  v15 = (a3 & 0xE0) == 0xA0 && (a2 | a1) == 0;
  if (!v15 || a3 != 160)
  {
    v16 = *(_QWORD *)(v75 + 40);
    v74 = *(_QWORD *)(v75 + 48);
    if (*(_BYTE *)(v75 + 56))
    {
      if (*(_BYTE *)(v75 + 56) != 1)
        __asm { BR              X9 }
      v70 = *(id *)(v75 + 40);
      v73 = v9;
      if (a8 == -1)
      {
        v19 = (_QWORD *)a4;
        swift_retain();
        v38 = a5;
        v39 = a2;
        goto LABEL_25;
      }
      v16 = a4;
      v19 = (_QWORD *)swift_allocObject();
      v19[5] = &type metadata for _CodingKey;
      v19[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      v20 = swift_allocObject();
      v19[2] = v20;
      *(_QWORD *)(v20 + 16) = a5;
      *(_QWORD *)(v20 + 24) = a6;
      *(_QWORD *)(v20 + 32) = v12;
      *(_BYTE *)(v20 + 40) = a8;
      v19[7] = v16;
      if (v16 >> 62)
      {
        if (v16 >> 62 != 1)
        {
          v38 = a5;
          v48 = 1;
          goto LABEL_24;
        }
        v21 = (uint64_t *)((v16 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      }
      else
      {
        v21 = (uint64_t *)(v16 + 64);
      }
      v47 = *v21;
      swift_retain();
      v38 = a5;
      v48 = v47 + 1;
      if (!__OFADD__(v47, 1))
      {
LABEL_24:
        v39 = a2;
        v19[8] = v48;
LABEL_25:
        v49 = *(_QWORD *)(v75 + 160);
        *(_QWORD *)(v75 + 160) = v19;
        v50 = *(_QWORD **)(v75 + 16);
        outlined copy of _CodingKey?(v38, a6, v12, a8);
        outlined copy of JSONEncoder.DateEncodingStrategy(v70, v74, 1);
        swift_retain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v75 + 16) = v50;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v50[2] + 1, 1, v50);
          *(_QWORD *)(v75 + 16) = v50;
        }
        v53 = v50[2];
        v52 = v50[3];
        if (v53 >= v52 >> 1)
          v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v52 > 1), v53 + 1, 1, v50);
        v50[2] = v53 + 1;
        v54 = &v50[3 * v53];
        v54[4] = a1;
        v54[5] = v39;
        *((_BYTE *)v54 + 48) = a3;
        *(_QWORD *)(v75 + 16) = v50;
        v76[3] = type metadata accessor for JSONDecoderImpl();
        v76[4] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type JSONDecoderImpl and conformance JSONDecoderImpl, (uint64_t (*)(uint64_t))type metadata accessor for JSONDecoderImpl, (uint64_t)&protocol conformance descriptor for JSONDecoderImpl);
        v76[0] = v75;
        swift_retain();
        ((void (*)(_QWORD *))v70)(v76);
        v55 = (uint64_t)v76;
        if (!v73)
        {
LABEL_34:
          __swift_destroy_boxed_opaque_existential_1(v55);
          *(_QWORD *)(v75 + 160) = v49;
          swift_retain();
          swift_release();
          v56 = *(_QWORD **)(v75 + 16);
          if (v56[2])
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            {
              v57 = v56[2];
              if (v57)
                goto LABEL_37;
LABEL_50:
              __break(1u);
              JUMPOUT(0x181E19E20);
            }
          }
          else
          {
            __break(1u);
          }
          v56 = specialized _ArrayBuffer._consumeAndCreateNew()(v56);
          v57 = v56[2];
          if (v57)
            goto LABEL_37;
          goto LABEL_50;
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v76);
        *(_QWORD *)(v75 + 160) = v49;
        swift_retain();
        swift_release();
        v56 = *(_QWORD **)(v75 + 16);
        if (v56[2])
        {
          v55 = swift_isUniquelyReferenced_nonNull_native();
          if ((v55 & 1) != 0)
          {
            v57 = v56[2];
            if (v57)
            {
LABEL_37:
              v56[2] = v57 - 1;
              *(_QWORD *)(v75 + 16) = v56;
              swift_release();
              swift_release();
              v58 = v70;
              v59 = v74;
              v60 = 1;
LABEL_38:
              outlined consume of JSONEncoder.DateEncodingStrategy(v58, v59, v60);
              return;
            }
            goto LABEL_33;
          }
        }
        else
        {
          __break(1u);
        }
        v55 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v56);
        v56 = (_QWORD *)v55;
        v57 = *(_QWORD *)(v55 + 16);
        if (v57)
          goto LABEL_37;
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
      __break(1u);
    }
    else
    {
      v71 = (id)v16;
      v36 = v14;
      v37 = a3;
      v12 = a7;
      v10 = a6;
      LOBYTE(v14) = a8;
      specialized JSONDecoderImpl.unwrapString<A>(from:for:_:)(v36, a2, v37, a4, a5, a6, v12, a8);
      if (v9)
      {
        outlined consume of JSONEncoder.DateEncodingStrategy((void *)v16, v74, 0);
        return;
      }
      v75 = a4;
      v73 = a5;
      v40 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v41 = objc_msgSend(v71, sel_dateFromString_, v40);
      swift_unknownObjectRelease();
      if (v41)
      {
        objc_msgSend(v41, sel_timeIntervalSinceReferenceDate);
        v43 = v42;
        outlined consume of JSONEncoder.DateEncodingStrategy((void *)v16, v74, 0);

        *a9 = v43;
        return;
      }
    }
    v61 = type metadata accessor for DecodingError();
    swift_allocError();
    v72 = v62;
    if ((_BYTE)v14 == 0xFF)
    {
      _CodingPathNode.path.getter(v75);
    }
    else
    {
      v63 = v14;
      outlined copy of _CodingKey(v73, v10, v12, v14);
      v64 = _CodingPathNode.path.getter(v75);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      *(_QWORD *)(inited + 56) = &type metadata for _CodingKey;
      *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      v66 = swift_allocObject();
      *(_QWORD *)(inited + 32) = v66;
      *(_QWORD *)(v66 + 16) = v73;
      *(_QWORD *)(v66 + 24) = v10;
      *(_QWORD *)(v66 + 32) = v12;
      *(_BYTE *)(v66 + 40) = v63;
      v76[0] = v64;
      specialized Array.append<A>(contentsOf:)(inited);
    }
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(id, _QWORD, uint64_t))(*(_QWORD *)(v61 - 8) + 104))(v72, *MEMORY[0x1E0DEC458], v61);
    swift_willThrow();
    v58 = (void *)v16;
    v59 = v74;
    v60 = 0;
    goto LABEL_38;
  }
  v24 = type metadata accessor for DecodingError();
  swift_allocError();
  v26 = v25;
  *v25 = &type metadata for Date;
  if (a8 == -1)
  {
    _CodingPathNode.path.getter(a4);
  }
  else
  {
    outlined copy of _CodingKey(a5, a6, v12, a8);
    v27 = a6;
    v28 = _CodingPathNode.path.getter(a4);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
    v29 = swift_initStackObject();
    *(_OWORD *)(v29 + 16) = xmmword_18205C850;
    *(_QWORD *)(v29 + 56) = &type metadata for _CodingKey;
    *(_QWORD *)(v29 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    v30 = swift_allocObject();
    *(_QWORD *)(v29 + 32) = v30;
    *(_QWORD *)(v30 + 16) = a5;
    *(_QWORD *)(v30 + 24) = v27;
    *(_QWORD *)(v30 + 32) = v12;
    *(_BYTE *)(v30 + 40) = a8;
    v76[0] = v28;
    specialized Array.append<A>(contentsOf:)(v29);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  v76[0] = 0;
  v76[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(55);
  v44._object = (void *)0x800000018230EA40;
  v44._countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v44);
  v45._countAndFlagsBits = 1702125892;
  v45._object = (void *)0xE400000000000000;
  String.append(_:)(v45);
  v46._countAndFlagsBits = 0xD00000000000001CLL;
  v46._object = (void *)0x800000018230EA60;
  String.append(_:)(v46);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v26, *MEMORY[0x1E0DEC460], v24);
  swift_willThrow();
}

void JSONDecoderImpl.unwrapDate<A>(from:for:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  char *v36;
  char *v37;
  _QWORD *v38;
  _QWORD *v39;
  void (*v40)(char *, uint64_t *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t *v46;
  void (*v47)(char *, uint64_t *, uint64_t, __n128);
  char *v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, char *);
  unint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  char v57;
  void (*v58)(char *, char *, uint64_t);
  uint64_t v59;
  uint64_t *boxed_opaque_existential_1;
  void (*v61)(char *, char *);
  unint64_t v62;
  uint64_t *v63;
  void (*v64)(uint64_t, char *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  Swift::String v71;
  Swift::String v72;
  Swift::String v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  char isUniquelyReferenced_nonNull_native;
  uint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  void (*v94)(uint64_t, uint64_t *, uint64_t);
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(uint64_t, uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t inited;
  uint64_t v103;
  uint64_t *v104;
  char *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  char *v110;
  char *v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t *v120;
  uint64_t v121;
  _QWORD *v122;
  __int128 v123;
  _QWORD v124[16];
  uint64_t v125;

  v120 = (uint64_t *)a5;
  v115 = a7;
  v119 = (char *)a4;
  *(_QWORD *)&v123 = a1;
  *((_QWORD *)&v123 + 1) = a2;
  v112 = a8;
  v125 = *MEMORY[0x1E0C80C00];
  v113 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v107 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v111 = (char *)&v107 - v12;
  MEMORY[0x1E0C80A78](v13);
  v110 = (char *)&v107 - v14;
  MEMORY[0x1E0C80A78](v15);
  v116 = (uint64_t)&v107 - v16;
  v118 = v17;
  v114 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v114);
  v19 = (char *)&v107 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v107 - v21;
  MEMORY[0x1E0C80A78](v23);
  MEMORY[0x1E0C80A78](v24);
  MEMORY[0x1E0C80A78](v25);
  MEMORY[0x1E0C80A78](v26);
  MEMORY[0x1E0C80A78](v27);
  v29 = (char *)&v107 - v28;
  v34 = MEMORY[0x1E0C80A78](v30);
  v36 = (char *)&v107 - v35;
  LODWORD(v122) = a3;
  if ((a3 & 0xE0) != 0xA0 || v123 != 0 || v122 != 160)
  {
    v45 = v121;
    v46 = *(uint64_t **)(v121 + 40);
    v116 = *(_QWORD *)(v121 + 48);
    if (*(_BYTE *)(v121 + 56))
    {
      if (*(_BYTE *)(v121 + 56) != 1)
        __asm { BR              X9 }
      v47 = (void (*)(char *, uint64_t *, uint64_t, __n128))*((_QWORD *)v31 + 2);
      v48 = (char *)v114;
      v110 = v31;
      v47(v22, v120, v114, v34);
      ((void (*)(char *, char *, char *))v47)(v19, v22, v48);
      v49 = v113;
      v50 = v118;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v113 + 48))(v19, 1, v118) == 1)
      {
        v51 = (void (*)(char *, char *))*((_QWORD *)v110 + 1);
        swift_retain();
        v51(v22, v48);
        v51(v19, v48);
        v52 = (unint64_t)v119;
        swift_retain();
        goto LABEL_23;
      }
      v120 = v46;
      v58 = *(void (**)(char *, char *, uint64_t))(v49 + 32);
      v58(v10, v19, v50);
      v46 = (uint64_t *)swift_allocObject();
      v59 = v115;
      v46[5] = v50;
      v46[6] = v59;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v46 + 2);
      v58((char *)boxed_opaque_existential_1, v10, v50);
      v61 = (void (*)(char *, char *))*((_QWORD *)v110 + 1);
      swift_retain();
      v61(v22, v48);
      v62 = (unint64_t)v119;
      v46[7] = (uint64_t)v119;
      if (v62 >> 62)
      {
        if (v62 >> 62 != 1)
        {
          v79 = 1;
          goto LABEL_22;
        }
        v63 = (uint64_t *)((v62 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      }
      else
      {
        v63 = (uint64_t *)(v62 + 64);
      }
      v78 = *v63;
      swift_retain();
      v79 = v78 + 1;
      if (!__OFADD__(v78, 1))
      {
LABEL_22:
        v46[8] = v79;
        v52 = (unint64_t)v46;
        v46 = v120;
LABEL_23:
        v80 = *(_QWORD *)(v45 + 160);
        *(_QWORD *)(v45 + 160) = v52;
        v81 = *(_QWORD **)(v45 + 16);
        swift_retain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v45 + 16) = v81;
        v83 = v46;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v81 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v81[2] + 1, 1, v81);
          *(_QWORD *)(v45 + 16) = v81;
        }
        v85 = v81[2];
        v84 = v81[3];
        if (v85 >= v84 >> 1)
          v81 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v84 > 1), v85 + 1, 1, v81);
        v81[2] = v85 + 1;
        v86 = &v81[3 * v85];
        v87 = *((_QWORD *)&v123 + 1);
        v86[4] = v123;
        v86[5] = v87;
        *((_BYTE *)v86 + 48) = (_BYTE)v122;
        v88 = v121;
        *(_QWORD *)(v121 + 16) = v81;
        v124[3] = type metadata accessor for JSONDecoderImpl();
        v124[4] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type JSONDecoderImpl and conformance JSONDecoderImpl, (uint64_t (*)(uint64_t))type metadata accessor for JSONDecoderImpl, (uint64_t)&protocol conformance descriptor for JSONDecoderImpl);
        v124[0] = v88;
        swift_retain();
        v89 = v117;
        ((void (*)(_QWORD *))v83)(v124);
        v90 = (uint64_t)v124;
        if (!v89)
        {
LABEL_32:
          __swift_destroy_boxed_opaque_existential_1(v90);
          *(_QWORD *)(v88 + 160) = v80;
          swift_retain();
          swift_release();
          v91 = *(_QWORD **)(v88 + 16);
          if (v91[2])
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            {
              v92 = v91[2];
              if (v92)
                goto LABEL_35;
LABEL_48:
              __break(1u);
              JUMPOUT(0x181E1B2A4);
            }
          }
          else
          {
            __break(1u);
          }
          v91 = specialized _ArrayBuffer._consumeAndCreateNew()(v91);
          v92 = v91[2];
          if (v92)
            goto LABEL_35;
          goto LABEL_48;
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v124);
        *(_QWORD *)(v88 + 160) = v80;
        swift_retain();
        swift_release();
        v91 = *(_QWORD **)(v88 + 16);
        if (v91[2])
        {
          v90 = swift_isUniquelyReferenced_nonNull_native();
          if ((v90 & 1) != 0)
          {
            v92 = v91[2];
            if (v92)
            {
LABEL_35:
              v91[2] = v92 - 1;
              *(_QWORD *)(v88 + 16) = v91;
              swift_release();
              swift_release();
              v55 = v83;
              v56 = v116;
              v57 = 1;
              goto LABEL_36;
            }
            goto LABEL_31;
          }
        }
        else
        {
          __break(1u);
        }
        v90 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v91);
        v91 = (_QWORD *)v90;
        v92 = *(_QWORD *)(v90 + 16);
        if (v92)
          goto LABEL_35;
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
      __break(1u);
    }
    else
    {
      v108 = v33;
      v109 = v32;
      v48 = v31;
      v53 = v46;
      v22 = v119;
      v54 = v117;
      v50 = v118;
      JSONDecoderImpl.unwrapString<A>(from:for:_:)(v123, *((uint64_t *)&v123 + 1), v122, (unint64_t)v119, (uint64_t)v120, v118, v115);
      if (v54)
      {
LABEL_11:
        v55 = v46;
        v56 = v116;
        v57 = 0;
LABEL_36:
        outlined consume of JSONEncoder.DateEncodingStrategy(v55, v56, v57);
        return;
      }
      v74 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v75 = objc_msgSend(v53, sel_dateFromString_, v74);
      swift_unknownObjectRelease();
      if (v75)
      {
        objc_msgSend(v75, sel_timeIntervalSinceReferenceDate);
        v77 = v76;
        outlined consume of JSONEncoder.DateEncodingStrategy(v46, v116, 0);

        *v112 = v77;
        return;
      }
    }
    *(_QWORD *)&v123 = type metadata accessor for DecodingError();
    *((_QWORD *)&v123 + 1) = swift_allocError();
    v122 = v93;
    v110 = v48;
    v94 = (void (*)(uint64_t, uint64_t *, uint64_t))*((_QWORD *)v48 + 2);
    v95 = v109;
    v96 = v114;
    v94((uint64_t)v109, v120, v114);
    v97 = v108;
    v94(v108, v95, v96);
    v98 = v113;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v113 + 48))(v97, 1, v50) == 1)
    {
      v99 = (void (*)(uint64_t, uint64_t))*((_QWORD *)v110 + 1);
      v99(v97, v96);
      _CodingPathNode.path.getter((unint64_t)v22);
      v99((uint64_t)v95, v96);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v98 + 32))(v111, v97, v50);
      v100 = _CodingPathNode.path.getter((unint64_t)v22);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      v101 = v50;
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      v103 = v115;
      *(_QWORD *)(inited + 56) = v101;
      *(_QWORD *)(inited + 64) = v103;
      v104 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      v105 = v111;
      (*(void (**)(uint64_t *, char *, uint64_t))(v98 + 16))(v104, v111, v101);
      v124[0] = v100;
      specialized Array.append<A>(contentsOf:)(inited);
      (*((void (**)(uint64_t *, uint64_t))v110 + 1))(v95, v96);
      (*(void (**)(char *, uint64_t))(v98 + 8))(v105, v101);
    }
    v106 = v122;
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD))(*(_QWORD *)(v123 - 8) + 104))(v106, *MEMORY[0x1E0DEC458]);
    swift_willThrow();
    goto LABEL_11;
  }
  v37 = v31;
  *(_QWORD *)&v123 = type metadata accessor for DecodingError();
  *((_QWORD *)&v123 + 1) = swift_allocError();
  v39 = v38;
  *v38 = &type metadata for Date;
  v40 = (void (*)(char *, uint64_t *, uint64_t))*((_QWORD *)v37 + 2);
  v41 = v114;
  v40(v36, v120, v114);
  v40(v29, (uint64_t *)v36, v41);
  v42 = v113;
  v43 = v118;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v113 + 48))(v29, 1, v118) == 1)
  {
    v44 = (void (*)(char *, uint64_t))*((_QWORD *)v37 + 1);
    v44(v29, v41);
    _CodingPathNode.path.getter((unint64_t)v119);
    v44(v36, v41);
  }
  else
  {
    v64 = *(void (**)(uint64_t, char *, uint64_t))(v42 + 32);
    v122 = v39;
    v65 = v116;
    v64(v116, v29, v43);
    v66 = _CodingPathNode.path.getter((unint64_t)v119);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
    v67 = swift_initStackObject();
    *(_OWORD *)(v67 + 16) = xmmword_18205C850;
    v68 = v115;
    *(_QWORD *)(v67 + 56) = v43;
    *(_QWORD *)(v67 + 64) = v68;
    v69 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v67 + 32));
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v42 + 16))(v69, v65, v43);
    v124[0] = v66;
    specialized Array.append<A>(contentsOf:)(v67);
    (*((void (**)(char *, uint64_t))v37 + 1))(v36, v41);
    v70 = v65;
    v39 = v122;
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v70, v43);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  v124[0] = 0;
  v124[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(55);
  v71._object = (void *)0x800000018230EA40;
  v71._countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v71);
  v72._countAndFlagsBits = 1702125892;
  v72._object = (void *)0xE400000000000000;
  String.append(_:)(v72);
  v73._countAndFlagsBits = 0xD00000000000001CLL;
  v73._object = (void *)0x800000018230EA60;
  String.append(_:)(v73);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(_QWORD *, _QWORD))(*(_QWORD *)(v123 - 8) + 104))(v39, *MEMORY[0x1E0DEC460]);
  swift_willThrow();
}

unint64_t *specialized JSONDecoderImpl.unwrapData<A>(from:for:_:)(uint64_t a1, uint64_t a2, unsigned __int8 a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;
  unint64_t *v21;
  id v23;
  id v24;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t inited;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  unsigned int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  BOOL v53;
  uint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  __int128 v94;
  _QWORD v95[3];
  void *v96;
  unint64_t v97;
  uint64_t v98;

  v10 = v9;
  v11 = v8;
  v13 = a7;
  v14 = a6;
  v15 = a4;
  LOBYTE(v8) = a3;
  v16 = a2;
  v17 = a1;
  v98 = *MEMORY[0x1E0C80C00];
  v18 = (a3 & 0xE0) == 0xA0 && (a2 | a1) == 0;
  if (v18 && a3 == 160)
  {
    v26 = type metadata accessor for DecodingError();
    swift_allocError();
    v28 = v27;
    *v27 = &type metadata for Data;
    if (a8 == -1)
    {
      _CodingPathNode.path.getter(v15);
    }
    else
    {
      outlined copy of _CodingKey(a5, v14, v13, a8);
      v29 = _CodingPathNode.path.getter(v15);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      *(_QWORD *)(inited + 56) = &type metadata for _CodingKey;
      *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      v31 = swift_allocObject();
      *(_QWORD *)(inited + 32) = v31;
      *(_QWORD *)(v31 + 16) = a5;
      *(_QWORD *)(v31 + 24) = v14;
      *(_QWORD *)(v31 + 32) = v13;
      *(_BYTE *)(v31 + 40) = a8;
      v95[0] = v29;
      specialized Array.append<A>(contentsOf:)(inited);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    v95[0] = 0;
    v95[1] = 0xE000000000000000;
    v21 = v95;
    _StringGuts.grow(_:)(55);
    v38._object = (void *)0x800000018230EA40;
    v38._countAndFlagsBits = 0xD000000000000019;
    String.append(_:)(v38);
    v39._countAndFlagsBits = 1635017028;
    v39._object = (void *)0xE400000000000000;
    String.append(_:)(v39);
    v40._countAndFlagsBits = 0xD00000000000001CLL;
    v40._object = (void *)0x800000018230EA60;
    String.append(_:)(v40);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    v41 = (unsigned int *)MEMORY[0x1E0DEC460];
    goto LABEL_23;
  }
  v19 = *((_QWORD *)v11 + 8);
  if (v19)
  {
    if (v19 == 1)
    {
      v21 = (unint64_t *)v11;
      specialized JSONDecoderImpl.unwrapString<A>(from:for:_:)(a1, a2, a3, a4, a5, a6, a7, a8);
      if (v10)
        return v21;
      v90 = a5;
      v23 = objc_allocWithZone(MEMORY[0x1E0C99D50]);
      v21 = (unint64_t *)String._bridgeToObjectiveCImpl()();
      v24 = objc_msgSend(v23, sel_initWithBase64EncodedString_options_, v21, 0);
      swift_unknownObjectRelease();
      if (v24)
      {
        v21 = (unint64_t *)specialized Data.init(referencing:)(v24);
        swift_bridgeObjectRelease();

        return v21;
      }
      swift_bridgeObjectRelease();
      v26 = type metadata accessor for DecodingError();
      swift_allocError();
      v28 = v81;
      if (a8 == -1)
      {
        _CodingPathNode.path.getter(v15);
      }
      else
      {
        outlined copy of _CodingKey(v90, a6, v13, a8);
        v82 = _CodingPathNode.path.getter(v15);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        v83 = swift_initStackObject();
        *(_OWORD *)(v83 + 16) = xmmword_18205C850;
        *(_QWORD *)(v83 + 56) = &type metadata for _CodingKey;
        *(_QWORD *)(v83 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        v84 = swift_allocObject();
        *(_QWORD *)(v83 + 32) = v84;
        *(_QWORD *)(v84 + 16) = v90;
        *(_QWORD *)(v84 + 24) = a6;
        *(_QWORD *)(v84 + 32) = v13;
        *(_BYTE *)(v84 + 40) = a8;
        v95[0] = v82;
        v21 = v95;
        specialized Array.append<A>(contentsOf:)(v83);
      }
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      v41 = (unsigned int *)MEMORY[0x1E0DEC458];
LABEL_23:
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v28, *v41, v26);
      swift_willThrow();
      return v21;
    }
    v89 = v10;
    v91 = a5;
    v87 = a7;
    if (a8 == -1)
    {
      swift_retain();
      v36 = v91;
      goto LABEL_55;
    }
    v88 = a6;
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 40) = &type metadata for _CodingKey;
    *(_QWORD *)(v13 + 48) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    v35 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = v35;
    v36 = v91;
    *(_QWORD *)(v35 + 16) = v91;
    *(_QWORD *)(v35 + 24) = v88;
    *(_QWORD *)(v35 + 32) = v87;
    *(_BYTE *)(v35 + 40) = a8;
    *(_QWORD *)(v13 + 56) = v15;
    if (v15 >> 62)
    {
      if (v15 >> 62 != 1)
      {
        v70 = 1;
        goto LABEL_54;
      }
      v37 = (uint64_t *)((v15 & 0x3FFFFFFFFFFFFFFFLL) + 32);
LABEL_53:
      v69 = *v37;
      swift_retain();
      v36 = v91;
      v70 = v69 + 1;
      if (!__OFADD__(v69, 1))
      {
LABEL_54:
        *(_QWORD *)(v13 + 64) = v70;
        v15 = v13;
        v14 = v88;
LABEL_55:
        v91 = *((_QWORD *)v11 + 20);
        *((_QWORD *)v11 + 20) = v15;
        v13 = *((_QWORD *)v11 + 2);
        outlined copy of _CodingKey?(v36, v14, v87, a8);
        outlined copy of JSONEncoder.KeyEncodingStrategy(v19);
        swift_retain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *((_QWORD *)v11 + 2) = v13;
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
LABEL_56:
          v73 = *(_QWORD *)(v13 + 16);
          v72 = *(_QWORD *)(v13 + 24);
          if (v73 >= v72 >> 1)
            v13 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v72 > 1), v73 + 1, 1, (_QWORD *)v13);
          *(_QWORD *)(v13 + 16) = v73 + 1;
          v74 = v13 + 24 * v73;
          *(_QWORD *)(v74 + 32) = v17;
          *(_QWORD *)(v74 + 40) = v16;
          *(_BYTE *)(v74 + 48) = (_BYTE)v8;
          *((_QWORD *)v11 + 2) = v13;
          v96 = (void *)type metadata accessor for JSONDecoderImpl();
          v97 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type JSONDecoderImpl and conformance JSONDecoderImpl, (uint64_t (*)(uint64_t))type metadata accessor for JSONDecoderImpl, (uint64_t)&protocol conformance descriptor for JSONDecoderImpl);
          v95[0] = v11;
          swift_retain();
          v75 = ((uint64_t (*)(_QWORD *))v19)(v95);
          if (v89)
          {
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v95);
            *((_QWORD *)v11 + 20) = v91;
            v21 = (unint64_t *)(v91 & 0x3FFFFFFFFFFFFFFFLL);
            swift_retain();
            swift_release();
            v76 = (_QWORD *)*((_QWORD *)v11 + 2);
            if (v76[2])
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
              {
                v77 = v76[2];
                if (v77)
                {
LABEL_62:
                  v76[2] = v77 - 1;
                  *((_QWORD *)v11 + 2) = v76;
                  swift_release();
                  outlined consume of JSONEncoder.KeyEncodingStrategy(v19);
LABEL_84:
                  swift_release();
                  return v21;
                }
LABEL_97:
                __break(1u);
                goto LABEL_98;
              }
LABEL_96:
              v76 = specialized _ArrayBuffer._consumeAndCreateNew()(v76);
              v77 = v76[2];
              if (v77)
                goto LABEL_62;
              goto LABEL_97;
            }
LABEL_95:
            __break(1u);
            goto LABEL_96;
          }
          v21 = (unint64_t *)v75;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v95);
          *((_QWORD *)v11 + 20) = v91;
          swift_retain();
          swift_release();
          v13 = *((_QWORD *)v11 + 2);
          if (!*(_QWORD *)(v13 + 16))
            goto LABEL_99;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            goto LABEL_100;
          v78 = *(_QWORD *)(v13 + 16);
          if (!v78)
            goto LABEL_101;
LABEL_66:
          *(_QWORD *)(v13 + 16) = v78 - 1;
          *((_QWORD *)v11 + 2) = v13;
          swift_release();
          outlined consume of JSONEncoder.KeyEncodingStrategy(v19);
          swift_release();
          return v21;
        }
LABEL_91:
        v13 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v13 + 16) + 1, 1, (_QWORD *)v13);
        *((_QWORD *)v11 + 2) = v13;
        goto LABEL_56;
      }
      __break(1u);
LABEL_69:
      v94 = xmmword_18206AAC0;
LABEL_70:
      __swift_project_boxed_opaque_existential_1(v95, (uint64_t)v96);
      if ((dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter() & 1) != 0)
      {
LABEL_73:
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v95);
        swift_release();
        v21 = (unint64_t *)v94;
        *((_QWORD *)v11 + 20) = v91;
        swift_retain();
        swift_release();
        v19 = *((_QWORD *)v11 + 2);
        if (!*(_QWORD *)(v19 + 16))
          goto LABEL_102;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          goto LABEL_103;
        v80 = *(_QWORD *)(v19 + 16);
        if (!v80)
          goto LABEL_104;
        goto LABEL_76;
      }
      while (1)
      {
        v19 = v97;
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v95, (uint64_t)v96);
        v79 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
        if (v10)
          break;
        LOBYTE(v92) = v79;
        Data._Representation.append(contentsOf:)();
        __swift_project_boxed_opaque_existential_1(v95, (uint64_t)v96);
        if ((dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter() & 1) != 0)
          goto LABEL_73;
      }
LABEL_79:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v95);
      swift_release();
      outlined consume of Data._Representation(v94, *((unint64_t *)&v94 + 1));
LABEL_80:
      *((_QWORD *)v11 + 20) = v91;
      v21 = (unint64_t *)(v91 & 0x3FFFFFFFFFFFFFFFLL);
      swift_retain();
      swift_release();
      v76 = (_QWORD *)*((_QWORD *)v11 + 2);
      if (v76[2])
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v85 = v76[2];
          if (v85)
          {
LABEL_83:
            v76[2] = v85 - 1;
            *((_QWORD *)v11 + 2) = v76;
            swift_release();
            goto LABEL_84;
          }
LABEL_94:
          __break(1u);
          goto LABEL_95;
        }
      }
      else
      {
        __break(1u);
      }
      v76 = specialized _ArrayBuffer._consumeAndCreateNew()(v76);
      v85 = v76[2];
      if (v85)
        goto LABEL_83;
      goto LABEL_94;
    }
LABEL_52:
    v37 = (uint64_t *)(v15 + 64);
    goto LABEL_53;
  }
  v89 = v10;
  v91 = a5;
  if (a8 == -1)
  {
    v42 = a7;
    v43 = a4 & 0x3FFFFFFFFFFFFFFFLL;
    swift_retain();
    v33 = v91;
    goto LABEL_29;
  }
  v88 = a6;
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 40) = &type metadata for _CodingKey;
  *(_QWORD *)(v19 + 48) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v32 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = v32;
  v33 = v91;
  *(_QWORD *)(v32 + 16) = v91;
  *(_QWORD *)(v32 + 24) = v88;
  *(_QWORD *)(v32 + 32) = v13;
  *(_BYTE *)(v32 + 40) = a8;
  *(_QWORD *)(v19 + 56) = v15;
  if (!(v15 >> 62))
  {
    v34 = (uint64_t *)(v15 + 64);
LABEL_27:
    v44 = *v34;
    swift_retain();
    v33 = v91;
    v45 = v44 + 1;
    if (__OFADD__(v44, 1))
    {
      __break(1u);
      goto LABEL_52;
    }
    goto LABEL_28;
  }
  if (v15 >> 62 == 1)
  {
    v34 = (uint64_t *)((v15 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    goto LABEL_27;
  }
  v45 = 1;
LABEL_28:
  v42 = v13;
  *(_QWORD *)(v19 + 64) = v45;
  v43 = v19 & 0x3FFFFFFFFFFFFFFFLL;
  v15 = v19;
  v14 = v88;
LABEL_29:
  v91 = *((_QWORD *)v11 + 20);
  *((_QWORD *)v11 + 20) = v15;
  v19 = *((_QWORD *)v11 + 2);
  outlined copy of _CodingKey?(v33, v14, v42, a8);
  swift_retain();
  v46 = swift_isUniquelyReferenced_nonNull_native();
  *((_QWORD *)v11 + 2) = v19;
  v47 = v43;
  if ((v46 & 1) == 0)
    goto LABEL_89;
  while (1)
  {
    v10 = v89;
    v13 = *(_QWORD *)(v19 + 16);
    v48 = *(_QWORD *)(v19 + 24);
    if (v13 >= v48 >> 1)
      v19 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v48 > 1), v13 + 1, 1, (_QWORD *)v19);
    *(_QWORD *)(v19 + 16) = v13 + 1;
    v49 = v19 + 32 + 24 * v13;
    *(_QWORD *)v49 = v17;
    *(_QWORD *)(v49 + 8) = v16;
    *(_BYTE *)(v49 + 16) = (_BYTE)v8;
    *((_QWORD *)v11 + 2) = v19;
    v50 = *(_QWORD *)(v19 + 16);
    if (!v50)
    {
      __break(1u);
      goto LABEL_91;
    }
    v51 = v19 + 32 + 24 * v50;
    v13 = *(_QWORD *)(v51 - 24);
    v19 = *(_QWORD *)(v51 - 16);
    v52 = *(unsigned __int8 *)(v51 - 8);
    if (v52 >> 5 != 4)
      break;
    v16 = v47;
    v58 = *((_QWORD *)v11 + 20);
    v8 = (__int128 *)*((_QWORD *)v11 + 4);
    v96 = &unk_1E0F1BF30;
    v97 = lazy protocol witness table accessor for type JSONDecoderImpl.UnkeyedContainer and conformance JSONDecoderImpl.UnkeyedContainer();
    v59 = swift_allocObject();
    v95[0] = v59;
    *(_QWORD *)(v59 + 16) = v11;
    *(_QWORD *)(v59 + 24) = v13;
    *(_QWORD *)(v59 + 40) = 0;
    *(_QWORD *)(v59 + 48) = 0;
    *(_QWORD *)(v59 + 32) = v8;
    *(_BYTE *)(v59 + 56) = -2;
    *(_QWORD *)(v59 + 64) = v19;
    *(_BYTE *)(v59 + 72) = 0;
    *(_QWORD *)(v59 + 80) = 0;
    *(_QWORD *)(v59 + 88) = v58;
    v60 = __swift_project_boxed_opaque_existential_1(v95, (uint64_t)&unk_1E0F1BF30);
    swift_retain();
    swift_retain_n();
    swift_retain();
    LOBYTE(v8) = v60;
    v61 = dispatch thunk of UnkeyedDecodingContainer.count.getter();
    if ((v62 & 1) != 0)
      goto LABEL_69;
    v17 = v61;
    *(_QWORD *)&v94 = specialized Data._Representation.init(count:)(v61);
    *((_QWORD *)&v94 + 1) = v63;
    if (v17 < 0)
      goto LABEL_105;
    v47 = v16;
    if (!v17)
      goto LABEL_70;
    v64 = 0;
    while (v17 != v64)
    {
      v19 = (unint64_t)v96;
      v13 = v97;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v95, (uint64_t)v96);
      dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
      if (v89)
        goto LABEL_79;
      v8 = &v94;
      Data._Representation.subscript.setter();
      v19 = ++v64;
      if (v17 == v64)
        goto LABEL_70;
    }
    __break(1u);
LABEL_89:
    v19 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v19 + 16) + 1, 1, (_QWORD *)v19);
    *((_QWORD *)v11 + 2) = v19;
  }
  v53 = v52 >> 5 == 5 && (v19 | v13) == 0;
  if (v53 && v52 == 160)
  {
    v65 = type metadata accessor for DecodingError();
    swift_allocError();
    v67 = v66;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
    v68 = *((_QWORD *)v11 + 20);
    v19 = v68 & 0x3FFFFFFFFFFFFFFFLL;
    swift_retain();
    swift_retain();
    v13 = _CodingPathNode.path.getter(v68);
    swift_release();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v65 - 8) + 104))(v67, *MEMORY[0x1E0DEC460], v65);
    swift_willThrow();
    swift_release();
    goto LABEL_80;
  }
  type metadata accessor for DecodingError();
  swift_allocError();
  *v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
  v55 = *((_QWORD *)v11 + 20);
  swift_retain();
  swift_retain();
  v19 = _CodingPathNode.path.getter(v55);
  swift_release();
  v92 = 0;
  v93 = 0xE000000000000000;
  v21 = &v92;
  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  v92 = 0xD000000000000028;
  v93 = 0x800000018230E9B0;
  v56 = *((_QWORD *)v11 + 2);
  if (*(_QWORD *)(v56 + 16))
    __asm { BR              X10 }
LABEL_98:
  __break(1u);
LABEL_99:
  __break(1u);
LABEL_100:
  v13 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v13);
  v78 = *(_QWORD *)(v13 + 16);
  if (v78)
    goto LABEL_66;
LABEL_101:
  __break(1u);
LABEL_102:
  __break(1u);
LABEL_103:
  v19 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v19);
  v80 = *(_QWORD *)(v19 + 16);
  if (!v80)
  {
LABEL_104:
    __break(1u);
LABEL_105:
    __break(1u);
  }
LABEL_76:
  *(_QWORD *)(v19 + 16) = v80 - 1;
  *((_QWORD *)v11 + 2) = v19;
  swift_release();
  swift_release();
  return v21;
}

char *JSONDecoderImpl.unwrapData<A>(from:for:_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  void (*v46)(char *, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  void (*v57)(char *, uint64_t, uint64_t, __n128);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t);
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t, uint64_t, __n128);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t);
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t inited;
  uint64_t v75;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v77;
  Swift::String v78;
  Swift::String v79;
  void (*v80)(char *, char *, uint64_t);
  uint64_t v81;
  uint64_t *v82;
  unint64_t v83;
  uint64_t *v84;
  void (*v85)(char *, char *, uint64_t);
  uint64_t v86;
  uint64_t *v87;
  void (*v88)(char *, uint64_t);
  unint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  unint64_t v92;
  char v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t *v105;
  _QWORD *v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v122;
  char v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void (*v135)(unint64_t, uint64_t, uint64_t);
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  void (*v140)(uint64_t, uint64_t);
  _QWORD *v141;
  uint64_t v142;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  _QWORD *v150;
  unint64_t v151;
  unint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  _QWORD *v161;
  __int128 v162;
  unint64_t v163;
  unint64_t v164;
  __int128 v165;
  _QWORD v166[2];
  _QWORD *v167;
  unint64_t v168;
  uint64_t v169;

  v154 = a7;
  v158 = a5;
  v160 = a4;
  *((_QWORD *)&v162 + 1) = a2;
  *(_QWORD *)&v162 = a1;
  v169 = *MEMORY[0x1E0C80C00];
  v156 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v151 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v153 = (char *)&v151 - v11;
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v151 - v13;
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v151 - v16;
  v159 = (char *)v18;
  v157 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v157);
  v20 = (char *)&v151 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v151 - v22;
  MEMORY[0x1E0C80A78](v24);
  MEMORY[0x1E0C80A78](v25);
  MEMORY[0x1E0C80A78](v26);
  v28 = (char *)&v151 - v27;
  MEMORY[0x1E0C80A78](v29);
  v31 = (char *)&v151 - v30;
  MEMORY[0x1E0C80A78](v32);
  v34 = (char *)&v151 - v33;
  v39 = MEMORY[0x1E0C80A78](v35);
  v40 = a3;
  v42 = (char *)&v151 - v41;
  if ((v40 & 0xE0) == 0xA0 && v162 == 0 && v40 == 160)
  {
    v43 = v36;
    *((_QWORD *)&v162 + 1) = type metadata accessor for DecodingError();
    swift_allocError();
    v45 = v44;
    *v44 = &type metadata for Data;
    v46 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
    v47 = v157;
    v46(v42, v158, v157);
    v46(v34, (uint64_t)v42, v47);
    v48 = v156;
    v20 = v159;
    if ((*(unsigned int (**)(char *, uint64_t, char *))(v156 + 48))(v34, 1, v159) == 1)
    {
      v49 = *(void (**)(char *, uint64_t))(v43 + 8);
      v49(v34, v47);
      _CodingPathNode.path.getter(v160);
      v49(v42, v47);
    }
    else
    {
      (*(void (**)(char *, char *, char *))(v48 + 32))(v17, v34, v20);
      v72 = v48;
      v73 = _CodingPathNode.path.getter(v160);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      v75 = v154;
      *(_QWORD *)(inited + 56) = v20;
      *(_QWORD *)(inited + 64) = v75;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      (*(void (**)(uint64_t *, char *, char *))(v72 + 16))(boxed_opaque_existential_1, v17, v20);
      v166[0] = v73;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v42, v157);
      (*(void (**)(char *, char *))(v72 + 8))(v17, v20);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    v166[0] = 0;
    v166[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(55);
    v77._object = (void *)0x800000018230EA40;
    v77._countAndFlagsBits = 0xD000000000000019;
    String.append(_:)(v77);
    v78._countAndFlagsBits = 1635017028;
    v78._object = (void *)0xE400000000000000;
    String.append(_:)(v78);
    v79._countAndFlagsBits = 0xD00000000000001CLL;
    v79._object = (void *)0x800000018230EA60;
    String.append(_:)(v79);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD))(*(_QWORD *)(*((_QWORD *)&v162 + 1) - 8) + 104))(v45, *MEMORY[0x1E0DEC460]);
    goto LABEL_17;
  }
  v50 = v161;
  v51 = v161[8];
  if (v51)
  {
    if (v51 == 1)
    {
      v151 = v38;
      v152 = v37;
      v52 = v36;
      v53 = v158;
      v54 = (uint64_t)v159;
      v55 = v155;
      JSONDecoderImpl.unwrapString<A>(from:for:_:)(v162, *((uint64_t *)&v162 + 1), v40, v160, v158, (uint64_t)v159, v154);
      if (v55)
        return v20;
      v56 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D50]), sel_initWithBase64EncodedString_options_, String._bridgeToObjectiveCImpl()(), 0);
      swift_unknownObjectRelease();
      if (v56)
      {
        v20 = (char *)specialized Data.init(referencing:)(v56);
        swift_bridgeObjectRelease();

        return v20;
      }
      swift_bridgeObjectRelease();
      *((_QWORD *)&v162 + 1) = type metadata accessor for DecodingError();
      swift_allocError();
      *(_QWORD *)&v162 = v133;
      v134 = v52;
      v135 = *(void (**)(unint64_t, uint64_t, uint64_t))(v52 + 16);
      v136 = v152;
      v137 = v157;
      v135(v152, v53, v157);
      v138 = v151;
      v135(v151, v136, v137);
      v139 = v156;
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v156 + 48))(v138, 1, v54) == 1)
      {
        v140 = *(void (**)(uint64_t, uint64_t))(v134 + 8);
        v140(v138, v137);
        v20 = (char *)_CodingPathNode.path.getter(v160);
        v140(v136, v137);
      }
      else
      {
        v144 = v153;
        (*(void (**)(char *, unint64_t, uint64_t))(v139 + 32))(v153, v138, v54);
        v145 = _CodingPathNode.path.getter(v160);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        v146 = swift_initStackObject();
        *(_OWORD *)(v146 + 16) = xmmword_18205C850;
        v147 = v154;
        *(_QWORD *)(v146 + 56) = v54;
        *(_QWORD *)(v146 + 64) = v147;
        v148 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v146 + 32));
        (*(void (**)(uint64_t *, char *, uint64_t))(v139 + 16))(v148, v144, v54);
        v166[0] = v145;
        specialized Array.append<A>(contentsOf:)(v146);
        v20 = (char *)v166[0];
        (*(void (**)(unint64_t, uint64_t))(v134 + 8))(v136, v157);
        (*(void (**)(char *, uint64_t))(v139 + 8))(v144, v54);
      }
      v149 = v162;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(*((_QWORD *)&v162 + 1) - 8) + 104))(v149, *MEMORY[0x1E0DEC458]);
LABEL_17:
      swift_willThrow();
      return v20;
    }
    v152 = v161[8];
    LODWORD(v153) = v40;
    v66 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v36 + 16);
    v67 = v157;
    v65 = v36;
    v66(v23, v158, v157, v39);
    ((void (*)(char *, char *, uint64_t))v66)(v20, v23, v67);
    v68 = v156;
    v69 = (uint64_t)v159;
    if ((*(unsigned int (**)(char *, uint64_t, char *))(v156 + 48))(v20, 1, v159) == 1)
    {
      v70 = *(void (**)(char *, uint64_t))(v65 + 8);
      swift_retain();
      v70(v23, v67);
      v70(v20, v67);
      v63 = v160;
      swift_retain();
      v71 = v152;
      goto LABEL_52;
    }
    v85 = *(void (**)(char *, char *, uint64_t))(v68 + 32);
    v85(v9, v20, v69);
    v63 = swift_allocObject();
    v86 = v154;
    *(_QWORD *)(v63 + 40) = v69;
    *(_QWORD *)(v63 + 48) = v86;
    v87 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v63 + 16));
    v85((char *)v87, v9, v69);
    v88 = *(void (**)(char *, uint64_t))(v65 + 8);
    swift_retain();
    v88(v23, v67);
    v89 = v160;
    *(_QWORD *)(v63 + 56) = v160;
    if (v89 >> 62)
    {
      v71 = v152;
      if (v89 >> 62 != 1)
      {
        v130 = 1;
LABEL_51:
        *(_QWORD *)(v63 + 64) = v130;
LABEL_52:
        v95 = v50[20];
        v50[20] = v63;
        v92 = v50[2];
        swift_retain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v50[2] = v92;
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
LABEL_53:
          v108 = *(_QWORD *)(v92 + 16);
          v122 = *(_QWORD *)(v92 + 24);
          v123 = (char)v153;
          if (v108 >= v122 >> 1)
          {
            v150 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v122 > 1), v108 + 1, 1, (_QWORD *)v92);
            v123 = (char)v153;
            v92 = (unint64_t)v150;
          }
          *(_QWORD *)(v92 + 16) = v108 + 1;
          v124 = (_QWORD *)(v92 + 24 * v108);
          v125 = *((_QWORD *)&v162 + 1);
          v124[4] = v162;
          v124[5] = v125;
          *((_BYTE *)v124 + 48) = v123;
          v50[2] = v92;
          v167 = (_QWORD *)type metadata accessor for JSONDecoderImpl();
          v168 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type JSONDecoderImpl and conformance JSONDecoderImpl, (uint64_t (*)(uint64_t))type metadata accessor for JSONDecoderImpl, (uint64_t)&protocol conformance descriptor for JSONDecoderImpl);
          v166[0] = v50;
          swift_retain();
          v126 = v155;
          v127 = ((uint64_t (*)(_QWORD *))v71)(v166);
          if (v126)
          {
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v166);
            v50[20] = v95;
            v20 = (char *)(v95 & 0x3FFFFFFFFFFFFFFFLL);
            swift_retain();
            swift_release();
            v106 = (_QWORD *)v50[2];
            if (v106[2])
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
              {
                v128 = v106[2];
                if (v128)
                {
LABEL_59:
                  v106[2] = v128 - 1;
                  v50[2] = v106;
                  swift_release();
                  outlined consume of JSONEncoder.KeyEncodingStrategy(v71);
LABEL_80:
                  swift_release();
                  return v20;
                }
LABEL_93:
                __break(1u);
                goto LABEL_94;
              }
LABEL_92:
              v106 = specialized _ArrayBuffer._consumeAndCreateNew()(v106);
              v128 = v106[2];
              if (v128)
                goto LABEL_59;
              goto LABEL_93;
            }
LABEL_91:
            __break(1u);
            goto LABEL_92;
          }
          v20 = (char *)v127;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v166);
          v50[20] = v95;
          swift_retain();
          swift_release();
          v108 = v50[2];
          if (!*(_QWORD *)(v108 + 16))
            goto LABEL_95;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            goto LABEL_96;
          v129 = *(_QWORD *)(v108 + 16);
          if (!v129)
            goto LABEL_97;
LABEL_63:
          *(_QWORD *)(v108 + 16) = v129 - 1;
          v50[2] = v108;
          swift_release();
          outlined consume of JSONEncoder.KeyEncodingStrategy(v71);
          swift_release();
          return v20;
        }
LABEL_87:
        v92 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v92 + 16) + 1, 1, (_QWORD *)v92);
        v50[2] = v92;
        goto LABEL_53;
      }
      v90 = (uint64_t *)((v89 & 0x3FFFFFFFFFFFFFFFLL) + 32);
LABEL_50:
      v120 = *v90;
      swift_retain();
      v130 = v120 + 1;
      if (!__OFADD__(v120, 1))
        goto LABEL_51;
      __break(1u);
LABEL_65:
      v165 = xmmword_18206AAC0;
LABEL_66:
      __swift_project_boxed_opaque_existential_1(v166, (uint64_t)v167);
      if ((dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter() & 1) != 0)
      {
LABEL_69:
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v166);
        swift_release();
        v20 = (char *)v165;
        v50[20] = v71;
        swift_retain();
        swift_release();
        v108 = v50[2];
        if (!*(_QWORD *)(v108 + 16))
          goto LABEL_98;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          goto LABEL_99;
        v132 = *(_QWORD *)(v108 + 16);
        if (!v132)
          goto LABEL_100;
        goto LABEL_72;
      }
      while (1)
      {
        v106 = v167;
        v108 = v168;
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v166, (uint64_t)v167);
        v131 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
        if (v65)
          break;
        LOBYTE(v163) = v131;
        Data._Representation.append(contentsOf:)();
        __swift_project_boxed_opaque_existential_1(v166, (uint64_t)v167);
        if ((dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter() & 1) != 0)
          goto LABEL_69;
      }
LABEL_75:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v166);
      swift_release();
      outlined consume of Data._Representation(v165, *((unint64_t *)&v165 + 1));
LABEL_76:
      v50[20] = v71;
      v20 = (char *)(v71 & 0x3FFFFFFFFFFFFFFFLL);
      swift_retain();
      swift_release();
      v141 = (_QWORD *)v50[2];
      if (v141[2])
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v142 = v141[2];
          if (v142)
          {
LABEL_79:
            v141[2] = v142 - 1;
            v50[2] = v141;
            swift_release();
            goto LABEL_80;
          }
LABEL_90:
          __break(1u);
          goto LABEL_91;
        }
      }
      else
      {
        __break(1u);
      }
      v141 = specialized _ArrayBuffer._consumeAndCreateNew()(v141);
      v142 = v141[2];
      if (v142)
        goto LABEL_79;
      goto LABEL_90;
    }
LABEL_49:
    v90 = (uint64_t *)(v89 + 64);
    v71 = v152;
    goto LABEL_50;
  }
  LODWORD(v153) = v40;
  v57 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v36 + 16);
  v58 = v157;
  v59 = v36;
  v57(v31, v158, v157, v39);
  ((void (*)(char *, char *, uint64_t))v57)(v28, v31, v58);
  v60 = v156;
  v61 = (uint64_t)v159;
  if ((*(unsigned int (**)(char *, uint64_t, char *))(v156 + 48))(v28, 1, v159) == 1)
  {
    v62 = *(void (**)(char *, uint64_t))(v59 + 8);
    v62(v31, v58);
    v62(v28, v58);
    v63 = v160;
    v64 = v160 & 0x3FFFFFFFFFFFFFFFLL;
    swift_retain();
    v65 = v155;
    goto LABEL_29;
  }
  v80 = *(void (**)(char *, char *, uint64_t))(v60 + 32);
  v80(v14, v28, v61);
  v63 = swift_allocObject();
  v81 = v154;
  *(_QWORD *)(v63 + 40) = v61;
  *(_QWORD *)(v63 + 48) = v81;
  v82 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v63 + 16));
  v80((char *)v82, v14, v61);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v31, v58);
  v83 = v160;
  *(_QWORD *)(v63 + 56) = v160;
  if (!(v83 >> 62))
  {
    v84 = (uint64_t *)(v83 + 64);
    v65 = v155;
LABEL_27:
    v91 = *v84;
    swift_retain();
    v119 = v91 + 1;
    if (__OFADD__(v91, 1))
    {
      __break(1u);
      goto LABEL_49;
    }
    goto LABEL_28;
  }
  v65 = v155;
  if (v83 >> 62 == 1)
  {
    v84 = (uint64_t *)((v83 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    goto LABEL_27;
  }
  v119 = 1;
LABEL_28:
  *(_QWORD *)(v63 + 64) = v119;
  v64 = v63 & 0x3FFFFFFFFFFFFFFFLL;
LABEL_29:
  v71 = v50[20];
  v50[20] = v63;
  v92 = v50[2];
  swift_retain();
  v93 = swift_isUniquelyReferenced_nonNull_native();
  v50[2] = v92;
  if ((v93 & 1) == 0)
    goto LABEL_85;
  while (1)
  {
    v95 = *(_QWORD *)(v92 + 16);
    v94 = *(_QWORD *)(v92 + 24);
    if (v95 >= v94 >> 1)
      v92 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v94 > 1), v95 + 1, 1, (_QWORD *)v92);
    *(_QWORD *)(v92 + 16) = v95 + 1;
    v96 = v92 + 32 + 24 * v95;
    v97 = *((_QWORD *)&v162 + 1);
    *(_QWORD *)v96 = v162;
    *(_QWORD *)(v96 + 8) = v97;
    *(_BYTE *)(v96 + 16) = (_BYTE)v153;
    v50[2] = v92;
    v98 = *(_QWORD *)(v92 + 16);
    if (!v98)
    {
      __break(1u);
      goto LABEL_87;
    }
    v99 = v92 + 32 + 24 * v98;
    v101 = *(_QWORD *)(v99 - 24);
    v100 = *(_QWORD *)(v99 - 16);
    v102 = *(unsigned __int8 *)(v99 - 8);
    if (v102 >> 5 != 4)
      break;
    v113 = v161[20];
    v114 = v161[4];
    v167 = &unk_1E0F1BF30;
    v168 = lazy protocol witness table accessor for type JSONDecoderImpl.UnkeyedContainer and conformance JSONDecoderImpl.UnkeyedContainer();
    v115 = swift_allocObject();
    v166[0] = v115;
    *(_QWORD *)(v115 + 16) = v161;
    *(_QWORD *)(v115 + 24) = v101;
    *(_QWORD *)(v115 + 40) = 0;
    *(_QWORD *)(v115 + 48) = 0;
    *(_QWORD *)(v115 + 32) = v114;
    *(_BYTE *)(v115 + 56) = -2;
    *(_QWORD *)(v115 + 64) = v100;
    *(_BYTE *)(v115 + 72) = 0;
    *(_QWORD *)(v115 + 80) = 0;
    *(_QWORD *)(v115 + 88) = v113;
    __swift_project_boxed_opaque_existential_1(v166, (uint64_t)&unk_1E0F1BF30);
    v50 = v161;
    swift_retain();
    swift_retain_n();
    swift_retain();
    v116 = dispatch thunk of UnkeyedDecodingContainer.count.getter();
    if ((v117 & 1) != 0)
      goto LABEL_65;
    v92 = v116;
    *(_QWORD *)&v165 = specialized Data._Representation.init(count:)(v116);
    *((_QWORD *)&v165 + 1) = v118;
    if ((v92 & 0x8000000000000000) != 0)
      goto LABEL_101;
    if (!v92)
      goto LABEL_66;
    v106 = 0;
    while ((_QWORD *)v92 != v106)
    {
      v108 = (unint64_t)v167;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v166, (uint64_t)v167);
      dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
      if (v65)
        goto LABEL_75;
      Data._Representation.subscript.setter();
      v106 = (_QWORD *)((char *)v106 + 1);
      if ((_QWORD *)v92 == v106)
        goto LABEL_66;
    }
    __break(1u);
LABEL_85:
    v92 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v92 + 16) + 1, 1, (_QWORD *)v92);
    v50[2] = v92;
  }
  if (v102 >> 5 == 5 && !(v100 | v101) && v102 == 160)
  {
    v103 = type metadata accessor for DecodingError();
    swift_allocError();
    v105 = v104;
    v106 = (uint64_t *)((char *)v104
                     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context))
                              + 48));
    *v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
    v107 = v50[20];
    v108 = v107 & 0x3FFFFFFFFFFFFFFFLL;
    swift_retain();
    swift_retain();
    _CodingPathNode.path.getter(v107);
    swift_release();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v103 - 8) + 104))(v105, *MEMORY[0x1E0DEC460], v103);
    swift_willThrow();
    swift_release();
    goto LABEL_76;
  }
  *((_QWORD *)&v162 + 1) = v64;
  v20 = (char *)type metadata accessor for DecodingError();
  swift_allocError();
  v108 = (unint64_t)v109;
  *v109 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
  v110 = v50[20];
  swift_retain();
  swift_retain();
  _CodingPathNode.path.getter(v110);
  swift_release();
  v163 = 0;
  v164 = 0xE000000000000000;
  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  v163 = 0xD000000000000028;
  v164 = 0x800000018230E9B0;
  v111 = v50[2];
  if (*(_QWORD *)(v111 + 16))
    __asm { BR              X10 }
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  v108 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v108);
  v129 = *(_QWORD *)(v108 + 16);
  if (v129)
    goto LABEL_63;
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
LABEL_99:
  v108 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v108);
  v132 = *(_QWORD *)(v108 + 16);
  if (!v132)
  {
LABEL_100:
    __break(1u);
LABEL_101:
    __break(1u);
  }
LABEL_72:
  *(_QWORD *)(v108 + 16) = v132 - 1;
  v50[2] = v108;
  swift_release();
  swift_release();
  return v20;
}

uint64_t specialized JSONDecoderImpl.unwrapURL<A>(from:for:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>)
{
  uint64_t v9;
  BOOL v16;
  uint64_t result;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t inited;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  unsigned int *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v16 = (a3 & 0xE0) == 0xA0 && (a2 | a1) == 0;
  if (v16 && a3 == 160)
  {
    v20 = type metadata accessor for DecodingError();
    swift_allocError();
    v22 = v21;
    *v21 = &type metadata for URL;
    if (a8 == -1)
    {
      _CodingPathNode.path.getter(a4);
    }
    else
    {
      outlined copy of _CodingKey(a5, a6, a7, a8);
      v23 = _CodingPathNode.path.getter(a4);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      *(_QWORD *)(inited + 56) = &type metadata for _CodingKey;
      *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      v25 = swift_allocObject();
      *(_QWORD *)(inited + 32) = v25;
      *(_QWORD *)(v25 + 16) = a5;
      *(_QWORD *)(v25 + 24) = a6;
      *(_QWORD *)(v25 + 32) = a7;
      *(_BYTE *)(v25 + 40) = a8;
      v34 = v23;
      specialized Array.append<A>(contentsOf:)(inited);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    v34 = 0;
    *(_QWORD *)&v35 = 0xE000000000000000;
    _StringGuts.grow(_:)(55);
    v30._countAndFlagsBits = 0xD000000000000019;
    v30._object = (void *)0x800000018230EA40;
    String.append(_:)(v30);
    v31._countAndFlagsBits = 5001813;
    v31._object = (void *)0xE300000000000000;
    String.append(_:)(v31);
    v32._countAndFlagsBits = 0xD00000000000001CLL;
    v32._object = (void *)0x800000018230EA60;
    String.append(_:)(v32);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    v33 = (unsigned int *)MEMORY[0x1E0DEC460];
  }
  else
  {
    result = specialized JSONDecoderImpl.unwrapString<A>(from:for:_:)(a1, a2, a3, a4, a5, a6, a7, a8);
    if (v9)
      return result;
    URL.init(string:)(result, v18, &v34);
    result = swift_bridgeObjectRelease();
    if (v34)
    {
      v19 = v35;
      *(_QWORD *)a9 = v34;
      *(_OWORD *)(a9 + 8) = v19;
      return result;
    }
    v20 = type metadata accessor for DecodingError();
    swift_allocError();
    v22 = v26;
    if (a8 == -1)
    {
      _CodingPathNode.path.getter(a4);
    }
    else
    {
      outlined copy of _CodingKey(a5, a6, a7, a8);
      v27 = _CodingPathNode.path.getter(a4);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      v28 = swift_initStackObject();
      *(_OWORD *)(v28 + 16) = xmmword_18205C850;
      *(_QWORD *)(v28 + 56) = &type metadata for _CodingKey;
      *(_QWORD *)(v28 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      v29 = swift_allocObject();
      *(_QWORD *)(v28 + 32) = v29;
      *(_QWORD *)(v29 + 16) = a5;
      *(_QWORD *)(v29 + 24) = a6;
      *(_QWORD *)(v29 + 32) = a7;
      *(_BYTE *)(v29 + 40) = a8;
      v34 = v27;
      specialized Array.append<A>(contentsOf:)(v28);
    }
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    v33 = (unsigned int *)MEMORY[0x1E0DEC458];
  }
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v22, *v33, v20);
  return swift_willThrow();
}

uint64_t JSONDecoderImpl.unwrapURL<A>(from:for:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  unint64_t v40;
  __int128 v41;
  _QWORD *v42;
  char *v43;
  uint64_t v44;
  uint64_t inited;
  uint64_t v46;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v48;
  Swift::String v49;
  Swift::String v50;
  Swift::String v51;
  _QWORD *v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  _QWORD *v63;
  char *v64;
  char *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;

  v71 = a7;
  v72 = a4;
  v66 = a8;
  v75 = *MEMORY[0x1E0C80C00];
  v68 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v64 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v65 = (char *)&v64 - v14;
  v16 = v15;
  v69 = type metadata accessor for Optional();
  v67 = *(_QWORD *)(v69 - 8);
  MEMORY[0x1E0C80A78](v69);
  v18 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v64 - v21;
  MEMORY[0x1E0C80A78](v23);
  v26 = (char *)&v64 - v25;
  if ((a3 & 0xE0) == 0xA0 && !(a2 | a1) && a3 == 160)
  {
    v70 = type metadata accessor for DecodingError();
    swift_allocError();
    v66 = v27;
    *v27 = &type metadata for URL;
    v28 = v67;
    v29 = *(void (**)(char *, uint64_t, uint64_t))(v67 + 16);
    v30 = v69;
    v29(v26, a5, v69);
    v29(v22, (uint64_t)v26, v30);
    v31 = v68;
    v32 = v16;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v22, 1, v16) == 1)
    {
      v33 = *(void (**)(char *, uint64_t))(v28 + 8);
      v33(v22, v30);
      _CodingPathNode.path.getter(v72);
      v33(v26, v30);
    }
    else
    {
      v43 = v65;
      (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v65, v22, v16);
      v44 = _CodingPathNode.path.getter(v72);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      v46 = v71;
      *(_QWORD *)(inited + 56) = v32;
      *(_QWORD *)(inited + 64) = v46;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v31 + 16))(boxed_opaque_existential_1, v43, v32);
      v73 = v44;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v28 + 8))(v26, v30);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v43, v32);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    v48 = v66;
    v73 = 0;
    *(_QWORD *)&v74 = 0xE000000000000000;
    _StringGuts.grow(_:)(55);
    v49._countAndFlagsBits = 0xD000000000000019;
    v49._object = (void *)0x800000018230EA40;
    String.append(_:)(v49);
    v50._countAndFlagsBits = 5001813;
    v50._object = (void *)0xE300000000000000;
    String.append(_:)(v50);
    v51._countAndFlagsBits = 0xD00000000000001CLL;
    v51._object = (void *)0x800000018230EA60;
    String.append(_:)(v51);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD))(*(_QWORD *)(v70 - 8) + 104))(v48, *MEMORY[0x1E0DEC460]);
  }
  else
  {
    v34 = v24;
    v35 = a1;
    v36 = v16;
    v37 = v71;
    v38 = v70;
    result = JSONDecoderImpl.unwrapString<A>(from:for:_:)(v35, a2, a3, v72, a5, v16, v71);
    if (v38)
      return result;
    URL.init(string:)(result, v40, &v73);
    result = swift_bridgeObjectRelease();
    if (v73)
    {
      v41 = v74;
      v42 = v66;
      *v66 = v73;
      *(_OWORD *)(v42 + 1) = v41;
      return result;
    }
    v70 = type metadata accessor for DecodingError();
    swift_allocError();
    v66 = v52;
    v53 = v67;
    v54 = *(void (**)(uint64_t, uint64_t, uint64_t))(v67 + 16);
    v55 = v69;
    v54((uint64_t)v34, a5, v69);
    v54((uint64_t)v18, (uint64_t)v34, v55);
    v56 = v68;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v18, 1, v36) == 1)
    {
      v57 = *(void (**)(char *, uint64_t))(v53 + 8);
      v57(v18, v55);
      _CodingPathNode.path.getter(v72);
      v57(v34, v55);
    }
    else
    {
      v58 = v36;
      v59 = v64;
      (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v64, v18, v58);
      v60 = _CodingPathNode.path.getter(v72);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      v61 = swift_initStackObject();
      *(_OWORD *)(v61 + 16) = xmmword_18205C850;
      *(_QWORD *)(v61 + 56) = v58;
      *(_QWORD *)(v61 + 64) = v37;
      v62 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v61 + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v56 + 16))(v62, v59, v58);
      v73 = v60;
      specialized Array.append<A>(contentsOf:)(v61);
      (*(void (**)(char *, uint64_t))(v53 + 8))(v34, v69);
      (*(void (**)(char *, uint64_t))(v56 + 8))(v59, v58);
    }
    v63 = v66;
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD))(*(_QWORD *)(v70 - 8) + 104))(v63, *MEMORY[0x1E0DEC458]);
  }
  return swift_willThrow();
}

uint64_t specialized JSONDecoderImpl.unwrapDecimal<A>(from:for:_:)(uint64_t a1, uint64_t a2, unsigned __int8 a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8;
  uint64_t v9;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t inited;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t result;
  unsigned int *v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  _QWORD v41[23];

  v41[21] = *MEMORY[0x1E0C80C00];
  v15 = a3;
  type metadata accessor for NSDecimal(0);
  v17 = a3 >> 5;
  if (v17 == 1)
  {
    v29 = *(_BYTE *)(v8 + 152);
    v30 = *(_QWORD *)(*(_QWORD *)(v8 + 32) + 24);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v30 + 40));
    v31 = *(_QWORD *)(v30 + 24);
    v32 = v31 < a2 + a1 || v31 < a2;
    if (v32 || (a2 | a1) < 0 || v31 <= a1)
      __break(1u);
    closure #1 in JSONDecoderImpl.unwrapDecimal<A>(from:for:_:)((char *)(*(_QWORD *)(v30 + 16) + a1), a2, *(_QWORD *)(v30 + 16), v31, v29, v15 & 1, (uint64_t)v41);
    os_unfair_lock_unlock((os_unfair_lock_t)(v30 + 40));
    swift_release();
    result = swift_release();
    if (!v9)
      return v41[0];
  }
  else
  {
    v18 = v16;
    if (v17 == 5 && !(a2 | a1) && v15 == 160)
    {
      v19 = type metadata accessor for DecodingError();
      swift_allocError();
      v21 = v20;
      *v20 = v18;
      if (a8 == -1)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        outlined copy of _CodingKey(a5, a6, a7, a8);
        v22 = _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_18205C850;
        *(_QWORD *)(inited + 56) = &type metadata for _CodingKey;
        *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        v24 = swift_allocObject();
        *(_QWORD *)(inited + 32) = v24;
        *(_QWORD *)(v24 + 16) = a5;
        *(_QWORD *)(v24 + 24) = a6;
        *(_QWORD *)(v24 + 32) = a7;
        *(_BYTE *)(v24 + 40) = a8;
        v41[0] = v22;
        specialized Array.append<A>(contentsOf:)(inited);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      v41[0] = 0;
      v41[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(55);
      v35._object = (void *)0x800000018230EA40;
      v35._countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v35);
      v36._countAndFlagsBits = 0x616D69636544534ELL;
      v36._object = (void *)0xE90000000000006CLL;
      String.append(_:)(v36);
      v37._countAndFlagsBits = 0xD00000000000001CLL;
      v37._object = (void *)0x800000018230EA60;
      String.append(_:)(v37);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      v34 = (unsigned int *)MEMORY[0x1E0DEC460];
    }
    else
    {
      v19 = type metadata accessor for DecodingError();
      swift_allocError();
      v21 = v25;
      *v25 = v18;
      if (a8 == -1)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        outlined copy of _CodingKey(a5, a6, a7, a8);
        v26 = _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        v27 = swift_initStackObject();
        *(_OWORD *)(v27 + 16) = xmmword_18205C850;
        *(_QWORD *)(v27 + 56) = &type metadata for _CodingKey;
        *(_QWORD *)(v27 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        v28 = swift_allocObject();
        *(_QWORD *)(v27 + 32) = v28;
        *(_QWORD *)(v28 + 16) = a5;
        *(_QWORD *)(v28 + 24) = a6;
        *(_QWORD *)(v28 + 32) = a7;
        *(_BYTE *)(v28 + 40) = a8;
        v41[0] = v26;
        specialized Array.append<A>(contentsOf:)(v27);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      v34 = (unsigned int *)MEMORY[0x1E0DEC450];
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *v34, v19);
    return swift_willThrow();
  }
  return result;
}

uint64_t JSONDecoderImpl.unwrapDecimal<A>(from:for:_:)(uint64_t a1, uint64_t a2, unsigned __int8 a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t result;
  void (*v54)(char *, char *, uint64_t);
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t inited;
  uint64_t v64;
  uint64_t v65;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v67;
  Swift::String v68;
  Swift::String v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  _QWORD v81[22];

  v8 = v7;
  v73 = a7;
  v75 = a5;
  v80 = a4;
  v81[21] = *MEMORY[0x1E0C80C00];
  LODWORD(v74) = a3;
  v78 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v71 = (char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v70 = (char *)&v70 - v14;
  v76 = v15;
  v79 = type metadata accessor for Optional();
  v77 = *(_QWORD *)(v79 - 8);
  MEMORY[0x1E0C80A78](v79);
  v17 = (char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v70 - v19;
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v70 - v22;
  MEMORY[0x1E0C80A78](v24);
  v26 = (char *)&v70 - v25;
  type metadata accessor for NSDecimal(0);
  v28 = a3 >> 5;
  if (v28 == 1)
  {
    v48 = v72;
    v49 = *(_BYTE *)(v8 + 152);
    v50 = *(_QWORD *)(*(_QWORD *)(v8 + 32) + 24);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v50 + 40));
    v51 = *(_QWORD *)(v50 + 24);
    v52 = v51 < a2 + a1 || v51 < a2;
    if (v52 || (a2 | a1) < 0 || v51 <= a1)
      __break(1u);
    closure #1 in JSONDecoderImpl.unwrapDecimal<A>(from:for:_:)((char *)(*(_QWORD *)(v50 + 16) + a1), a2, *(_QWORD *)(v50 + 16), v51, v49, v74 & 1, (uint64_t)v81);
    os_unfair_lock_unlock((os_unfair_lock_t)(v50 + 40));
    swift_release();
    result = swift_release();
    if (!v48)
      return v81[0];
  }
  else
  {
    v29 = v27;
    if (v28 == 5 && !(a2 | a1) && (_DWORD)v74 == 160)
    {
      v72 = type metadata accessor for DecodingError();
      v74 = swift_allocError();
      v31 = v30;
      *v30 = v29;
      v32 = v77;
      v33 = *(void (**)(char *, uint64_t, uint64_t))(v77 + 16);
      v34 = (unint64_t)v26;
      v35 = v79;
      v33(v26, v75, v79);
      v33(v23, (uint64_t)v26, v35);
      v36 = v78;
      v37 = v76;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v23, 1, v76) == 1)
      {
        v38 = *(void (**)(char *, uint64_t))(v32 + 8);
        v38(v23, v35);
        _CodingPathNode.path.getter(v80);
        v38((char *)v34, v35);
      }
      else
      {
        v61 = v70;
        (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v70, v23, v37);
        v62 = _CodingPathNode.path.getter(v80);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        inited = swift_initStackObject();
        v80 = v34;
        v64 = inited;
        *(_OWORD *)(inited + 16) = xmmword_18205C850;
        v65 = v73;
        *(_QWORD *)(inited + 56) = v37;
        *(_QWORD *)(inited + 64) = v65;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        (*(void (**)(uint64_t *, char *, uint64_t))(v36 + 16))(boxed_opaque_existential_1, v61, v37);
        v81[0] = v62;
        specialized Array.append<A>(contentsOf:)(v64);
        (*(void (**)(unint64_t, uint64_t))(v32 + 8))(v80, v35);
        (*(void (**)(char *, uint64_t))(v36 + 8))(v61, v37);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      v81[0] = 0;
      v81[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(55);
      v67._object = (void *)0x800000018230EA40;
      v67._countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v67);
      v68._countAndFlagsBits = 0x616D69636544534ELL;
      v68._object = (void *)0xE90000000000006CLL;
      String.append(_:)(v68);
      v69._countAndFlagsBits = 0xD00000000000001CLL;
      v69._object = (void *)0x800000018230EA60;
      String.append(_:)(v69);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v72 - 8) + 104))(v31, *MEMORY[0x1E0DEC460], v72);
    }
    else
    {
      v39 = type metadata accessor for DecodingError();
      v74 = swift_allocError();
      v41 = v40;
      *v40 = v29;
      v42 = v77;
      v43 = *(void (**)(char *, uint64_t, uint64_t))(v77 + 16);
      v44 = v79;
      v43(v20, v75, v79);
      v43(v17, (uint64_t)v20, v44);
      v45 = v78;
      v46 = v76;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v17, 1, v76) == 1)
      {
        v47 = *(void (**)(char *, uint64_t))(v42 + 8);
        v47(v17, v44);
        _CodingPathNode.path.getter(v80);
        v47(v20, v44);
      }
      else
      {
        v54 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
        v75 = v39;
        v55 = v71;
        v54(v71, v17, v46);
        v56 = _CodingPathNode.path.getter(v80);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        v57 = swift_initStackObject();
        *(_OWORD *)(v57 + 16) = xmmword_18205C850;
        v58 = v73;
        *(_QWORD *)(v57 + 56) = v46;
        *(_QWORD *)(v57 + 64) = v58;
        v59 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v57 + 32));
        (*(void (**)(uint64_t *, char *, uint64_t))(v45 + 16))(v59, v55, v46);
        v81[0] = v56;
        specialized Array.append<A>(contentsOf:)(v57);
        (*(void (**)(char *, uint64_t))(v42 + 8))(v20, v44);
        v60 = v55;
        v39 = v75;
        (*(void (**)(char *, uint64_t))(v45 + 8))(v60, v46);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v39 - 8) + 104))(v41, *MEMORY[0x1E0DEC450], v39);
    }
    return swift_willThrow();
  }
  return result;
}

uint64_t specialized JSONDecoderImpl.unwrapDictionary<A, B>(from:as:for:_:)(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 v47;
  uint64_t v48;
  unsigned __int8 v49;
  uint64_t v50;
  Swift::Int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t *boxed_opaque_existential_1;
  char isUniquelyReferenced_nonNull_native;
  char v68;
  unint64_t v69;
  uint64_t v70;
  _BOOL8 v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  unint64_t v85;
  int64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  int64_t v96;
  unint64_t v97;
  int64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  int64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  Swift::Int v108;
  uint64_t v110;
  int64_t v111;
  _QWORD *v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  __int128 v117;
  uint64_t v118;
  _OWORD v119[2];
  uint64_t v120[4];
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;

  v10 = v9;
  v125 = *MEMORY[0x1E0C80C00];
  v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  v16 = a3 >> 5;
  if ((_DWORD)v16 != 5)
  {
    v23 = dynamic_cast_existential_2_conditional(a4);
    v106 = v24;
    if (!v23)
      goto LABEL_85;
    if ((_DWORD)v16 != 3)
      goto LABEL_16;
    v114 = MEMORY[0x1E0DEE9E0];
    if (a2 >= 0)
      v25 = a2;
    else
      v25 = a2 + 1;
    Dictionary.reserveCapacity(_:)(v25 >> 1);
    if (a9 == -1)
    {
      swift_retain();
      v29 = a7;
      v28 = a8;
LABEL_26:
      outlined copy of _CodingKey?(a6, v29, v28, a9);
      swift_retain();
      v41 = a1;
      v42 = JSONMap.loadValue(at:)(a1);
      if (v44 > 0xFDu)
      {
LABEL_27:
        swift_release();
        swift_release();
        v121 = v114;
        return swift_dynamicCast();
      }
      v45 = v42;
      v46 = v43;
      v47 = v44;
      while (1)
      {
        v50 = v10;
        v51 = JSONMap.offset(after:)(v41);
        v52 = JSONMap.loadValue(at:)(v51);
        v110 = v54;
        if (v53 > 0xFDu)
          break;
        v55 = v52;
        v56 = v53;
        v108 = JSONMap.offset(after:)(v51);
        v57 = specialized JSONDecoderImpl.unwrapString<A>(from:for:_:)(v45, v46, v47, a5, 0, 0, 0, 255);
        if (v50)
          goto LABEL_87;
        v59 = v57;
        v60 = v58;
        v61 = (*(uint64_t (**)(void))(v106 + 8))();
        v63 = v62;
        v123 = v61;
        v124 = v62;
        __swift_allocate_boxed_opaque_existential_1(&v121);
        swift_bridgeObjectRetain();
        LOBYTE(v100) = 0;
        specialized JSONDecoderImpl.unwrap<A, B>(_:as:for:_:)(v55, v110, v56, v61, a5, v59, v60, 0, v100, v61, v63);
        v10 = 0;
        swift_bridgeObjectRelease();
        v64 = v123;
        v65 = __swift_project_boxed_opaque_existential_1(&v121, v123);
        v120[3] = v64;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v120);
        (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v64 - 8) + 16))(boxed_opaque_existential_1, v65, v64);
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v113 = (_QWORD *)v114;
        swift_bridgeObjectRetain();
        v69 = specialized __RawDictionaryStorage.find<A>(_:)(v59, v60);
        v70 = *(_QWORD *)(v114 + 16);
        v71 = (v68 & 1) == 0;
        v72 = v70 + v71;
        if (__OFADD__(v70, v71))
          goto LABEL_81;
        v73 = v68;
        if (*(_QWORD *)(v114 + 24) >= v72)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            v74 = v114;
          }
          else
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
            v82 = static _DictionaryStorage.copy(original:)();
            v74 = v82;
            if (*(_QWORD *)(v114 + 16))
            {
              v83 = (char *)(v82 + 64);
              v84 = (char *)(v114 + 64);
              v85 = (unint64_t)((1 << *(_BYTE *)(v74 + 32)) + 63) >> 6;
              v101 = v114 + 64;
              if (v74 != v114 || v83 >= &v84[8 * v85])
                memmove(v83, v84, 8 * v85);
              v86 = 0;
              *(_QWORD *)(v74 + 16) = *(_QWORD *)(v114 + 16);
              v87 = 1 << *(_BYTE *)(v114 + 32);
              if (v87 < 64)
                v88 = ~(-1 << v87);
              else
                v88 = -1;
              v89 = v88 & *(_QWORD *)(v114 + 64);
              v102 = (unint64_t)(v87 + 63) >> 6;
              while (1)
              {
                if (v89)
                {
                  v104 = (v89 - 1) & v89;
                  v111 = v86;
                  v90 = __clz(__rbit64(v89)) | (v86 << 6);
                }
                else
                {
                  v96 = v86 + 1;
                  if (__OFADD__(v86, 1))
                    goto LABEL_83;
                  if (v96 >= v102)
                    break;
                  v97 = *(_QWORD *)(v101 + 8 * v96);
                  v98 = v86 + 1;
                  if (!v97)
                  {
                    v98 = v86 + 2;
                    if (v86 + 2 >= v102)
                      break;
                    v97 = *(_QWORD *)(v101 + 8 * v98);
                    if (!v97)
                    {
                      v98 = v86 + 3;
                      if (v86 + 3 >= v102)
                        break;
                      v97 = *(_QWORD *)(v101 + 8 * v98);
                      if (!v97)
                      {
                        v98 = v86 + 4;
                        if (v86 + 4 >= v102)
                          break;
                        v97 = *(_QWORD *)(v101 + 8 * v98);
                        if (!v97)
                        {
                          v99 = v86 + 5;
                          if (v86 + 5 >= v102)
                            break;
                          v97 = *(_QWORD *)(v101 + 8 * v99);
                          if (!v97)
                          {
                            while (1)
                            {
                              v98 = v99 + 1;
                              if (__OFADD__(v99, 1))
                                break;
                              if (v98 >= v102)
                                goto LABEL_78;
                              v97 = *(_QWORD *)(v101 + 8 * v98);
                              ++v99;
                              if (v97)
                                goto LABEL_77;
                            }
LABEL_86:
                            __break(1u);
LABEL_87:
                            swift_unexpectedError();
                            __break(1u);
LABEL_88:
                            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                            __break(1u);
                            JUMPOUT(0x181E1F6DCLL);
                          }
                          v98 = v86 + 5;
                        }
                      }
                    }
                  }
LABEL_77:
                  v104 = (v97 - 1) & v97;
                  v111 = v98;
                  v90 = __clz(__rbit64(v97)) + (v98 << 6);
                }
                v91 = 16 * v90;
                v92 = (uint64_t *)(*(_QWORD *)(v114 + 48) + 16 * v90);
                v93 = v92[1];
                v103 = *v92;
                v94 = 32 * v90;
                outlined init with copy of Any(*(_QWORD *)(v114 + 56) + 32 * v90, (uint64_t)v119);
                v95 = (_QWORD *)(*(_QWORD *)(v74 + 48) + v91);
                *v95 = v103;
                v95[1] = v93;
                outlined init with take of Any(v119, (_OWORD *)(*(_QWORD *)(v74 + 56) + v94));
                swift_bridgeObjectRetain();
                v89 = v104;
                v10 = 0;
                v86 = v111;
              }
            }
LABEL_78:
            swift_bridgeObjectRelease();
            v113 = (_QWORD *)v74;
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v72, isUniquelyReferenced_nonNull_native);
          v74 = v114;
          v75 = specialized __RawDictionaryStorage.find<A>(_:)(v59, v60);
          if ((v73 & 1) != (v76 & 1))
            goto LABEL_88;
          v69 = v75;
        }
        if ((v73 & 1) != 0)
          outlined init with take of Any((_OWORD *)(*(_QWORD *)(v74 + 56) + 32 * v69), v119);
        else
          memset(v119, 0, sizeof(v119));
        outlined init with copy of (Hashable & Sendable)?((uint64_t)v119, (uint64_t)&v117, &demangling cache variable for type metadata for Any?);
        v77 = v118;
        outlined destroy of Any?((uint64_t)&v117, &demangling cache variable for type metadata for Any?);
        if (!v77)
        {
          outlined destroy of Any?((uint64_t)v119, &demangling cache variable for type metadata for Any?);
          outlined init with copy of Any((uint64_t)v120, (uint64_t)v119);
        }
        outlined init with copy of (Hashable & Sendable)?((uint64_t)v119, (uint64_t)&v115, &demangling cache variable for type metadata for Any?);
        if (v116)
        {
          outlined init with take of Any(&v115, &v117);
          if ((v73 & 1) != 0)
          {
            outlined init with take of Any(&v117, (_OWORD *)(v113[7] + 32 * v69));
          }
          else
          {
            v113[(v69 >> 6) + 8] |= 1 << v69;
            v78 = (uint64_t *)(v113[6] + 16 * v69);
            *v78 = v59;
            v78[1] = v60;
            outlined init with take of Any(&v117, (_OWORD *)(v113[7] + 32 * v69));
            v79 = v113[2];
            v80 = __OFADD__(v79, 1);
            v81 = v79 + 1;
            if (v80)
              goto LABEL_82;
            v113[2] = v81;
            swift_bridgeObjectRetain();
          }
          v41 = v108;
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v115, &demangling cache variable for type metadata for Any?);
          v41 = v108;
          if ((v73 & 1) != 0)
          {
            swift_arrayDestroy();
            specialized _NativeDictionary._delete(at:)(v69, (uint64_t)v113);
          }
        }
        outlined destroy of Any?((uint64_t)v119, &demangling cache variable for type metadata for Any?);
        swift_bridgeObjectRelease();
        v114 = (uint64_t)v113;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v120);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v121);
        v45 = JSONMap.loadValue(at:)(v41);
        v46 = v48;
        v47 = v49;
        if (v49 > 0xFDu)
          goto LABEL_27;
      }
LABEL_84:
      __break(1u);
    }
    v26 = (_QWORD *)swift_allocObject();
    v26[5] = &type metadata for _CodingKey;
    v26[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    v27 = swift_allocObject();
    v26[2] = v27;
    v29 = a7;
    v28 = a8;
    *(_QWORD *)(v27 + 16) = a6;
    *(_QWORD *)(v27 + 24) = a7;
    *(_QWORD *)(v27 + 32) = a8;
    *(_BYTE *)(v27 + 40) = a9;
    v26[7] = a5;
    if (a5 >> 62)
    {
      if (a5 >> 62 != 1)
      {
        v40 = 1;
LABEL_25:
        v26[8] = v40;
        a5 = (unint64_t)v26;
        goto LABEL_26;
      }
      v30 = (uint64_t *)((a5 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      v30 = (uint64_t *)(a5 + 64);
    }
    v39 = *v30;
    swift_retain();
    v40 = v39 + 1;
    if (__OFADD__(v39, 1))
    {
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
      goto LABEL_84;
    }
    goto LABEL_25;
  }
  if (a2 | a1 || a3 != 160)
  {
    if (dynamic_cast_existential_2_conditional(a4))
    {
LABEL_16:
      type metadata accessor for DecodingError();
      swift_allocError();
      *v31 = v105;
      if (a9 == -1)
      {
        _CodingPathNode.path.getter(a5);
      }
      else
      {
        outlined copy of _CodingKey(a6, a7, a8, a9);
        v32 = _CodingPathNode.path.getter(a5);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_18205C850;
        *(_QWORD *)(inited + 56) = &type metadata for _CodingKey;
        *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        v34 = swift_allocObject();
        *(_QWORD *)(inited + 32) = v34;
        *(_QWORD *)(v34 + 16) = a6;
        *(_QWORD *)(v34 + 24) = a7;
        *(_QWORD *)(v34 + 32) = a8;
        *(_BYTE *)(v34 + 40) = a9;
        v121 = v32;
        specialized Array.append<A>(contentsOf:)(inited);
      }
      _StringGuts.grow(_:)(43);
      swift_bridgeObjectRelease();
      v121 = 0xD000000000000035;
      v122 = 0x800000018230E9E0;
      __asm { BR              X9 }
    }
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }
  v17 = type metadata accessor for DecodingError();
  swift_allocError();
  v19 = v18;
  *v18 = v105;
  if (a9 == -1)
  {
    _CodingPathNode.path.getter(a5);
  }
  else
  {
    outlined copy of _CodingKey(a6, a7, a8, a9);
    v20 = _CodingPathNode.path.getter(a5);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
    v21 = swift_initStackObject();
    *(_OWORD *)(v21 + 16) = xmmword_18205C850;
    *(_QWORD *)(v21 + 56) = &type metadata for _CodingKey;
    *(_QWORD *)(v21 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    v22 = swift_allocObject();
    *(_QWORD *)(v21 + 32) = v22;
    *(_QWORD *)(v22 + 16) = a6;
    *(_QWORD *)(v22 + 24) = a7;
    *(_QWORD *)(v22 + 32) = a8;
    *(_BYTE *)(v22 + 40) = a9;
    v121 = v20;
    specialized Array.append<A>(contentsOf:)(v21);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  v121 = 0;
  v122 = 0xE000000000000000;
  _StringGuts.grow(_:)(55);
  v35._countAndFlagsBits = 0xD000000000000019;
  v35._object = (void *)0x800000018230EA40;
  String.append(_:)(v35);
  v36._object = (void *)0x800000018230EB40;
  v36._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v36);
  v37._countAndFlagsBits = 0xD00000000000001CLL;
  v37._object = (void *)0x800000018230EA60;
  String.append(_:)(v37);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v19, *MEMORY[0x1E0DEC460], v17);
  return swift_willThrow();
}

uint64_t JSONDecoderImpl.unwrapDictionary<A, B>(from:as:for:_:)@<X0>(Swift::Int a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X3>, unint64_t a5@<X4>, int64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, int64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, int64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  unint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  Swift::Int v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, int64_t, uint64_t);
  char *v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t);
  char *v66;
  uint64_t v67;
  uint64_t inited;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  void (*v73)(Swift::Int, char *, uint64_t);
  Swift::Int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  Swift::Int v80;
  Swift::String v81;
  Swift::String v82;
  Swift::String v83;
  void (*v84)(char *, char *, uint64_t);
  char *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t *v88;
  unint64_t v89;
  uint64_t *v90;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned __int8 v97;
  uint64_t v98;
  uint64_t v99;
  unsigned __int8 v100;
  unint64_t v101;
  uint64_t v102;
  unsigned __int8 v103;
  Swift::Int v104;
  unsigned __int8 v105;
  uint64_t v106;
  unsigned __int8 v107;
  unsigned __int8 v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  ValueMetadata *v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t *boxed_opaque_existential_1;
  unint64_t v119;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v121;
  char v122;
  unint64_t v123;
  uint64_t v124;
  _BOOL8 v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  char v133;
  uint64_t v134;
  char *v135;
  char *v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  int64_t v149;
  unint64_t v150;
  int64_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t *v155;
  uint64_t v156;
  BOOL v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  char *v166;
  unint64_t v167;
  int64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  unint64_t v177;
  uint64_t v178;
  Swift::Int v179;
  unint64_t v180;
  _QWORD *v181;
  unint64_t v182;
  __int128 v183;
  uint64_t v184;
  __int128 v185;
  uint64_t v186;
  _OWORD v187[2];
  uint64_t v188[4];
  uint64_t v189;
  unint64_t v190;
  ValueMetadata *v191;
  uint64_t v192;
  uint64_t v193;

  v177 = a2;
  v162 = a9;
  v163 = a7;
  v168 = a6;
  v178 = a5;
  v165 = a11;
  v193 = *MEMORY[0x1E0C80C00];
  v170 = *(_QWORD *)(a8 - 8);
  MEMORY[0x1E0C80A78](a1);
  v164 = (char *)&v160 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v161 = (char *)&v160 - v16;
  MEMORY[0x1E0C80A78](v17);
  v179 = (Swift::Int)&v160 - v18;
  v175 = v19;
  v171 = type metadata accessor for Optional();
  v169 = *(_QWORD *)(v171 - 8);
  MEMORY[0x1E0C80A78](v171);
  v21 = (char *)&v160 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v166 = (char *)&v160 - v23;
  MEMORY[0x1E0C80A78](v24);
  v26 = (char *)&v160 - v25;
  MEMORY[0x1E0C80A78](v27);
  v29 = (char *)&v160 - v28;
  MEMORY[0x1E0C80A78](v30);
  v32 = (char *)&v160 - v31;
  MEMORY[0x1E0C80A78](v33);
  v35 = (char *)&v160 - v34;
  v172 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  v167 = a3 >> 5;
  if ((_DWORD)v167 != 5)
  {
    v44 = v177;
    v179 = a1;
    v45 = dynamic_cast_existential_2_conditional(a4);
    v173 = v46;
    v174 = v45;
    if (!v45)
      goto LABEL_84;
    if ((_DWORD)v167 != 3)
      goto LABEL_14;
    v182 = MEMORY[0x1E0DEE9E0];
    if (v44 >= 0)
      v47 = v44;
    else
      v47 = v44 + 1;
    Dictionary.reserveCapacity(_:)(v47 >> 1);
    v48 = v169;
    v49 = *(void (**)(char *, int64_t, uint64_t))(v169 + 16);
    v50 = v171;
    v49(v29, v168, v171);
    v49(v26, (int64_t)v29, v50);
    v51 = v170;
    v52 = v175;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v170 + 48))(v26, 1, v175) == 1)
    {
      v53 = *(void (**)(char *, uint64_t))(v48 + 8);
      v53(v29, v50);
      v53(v26, v50);
      swift_retain();
      v54 = v179;
      v55 = v180;
      v56 = v176;
LABEL_26:
      v94 = v56[4];
      swift_retain();
      v175 = v94;
      v95 = JSONMap.loadValue(at:)(v54);
      if (v97 > 0xFDu)
      {
LABEL_27:
        swift_release();
        swift_release();
        v189 = v182;
        return swift_dynamicCast();
      }
      v98 = v95;
      v99 = v96;
      v100 = v97;
      v101 = v55;
      while (1)
      {
        v104 = JSONMap.offset(after:)(v54);
        v180 = JSONMap.loadValue(at:)(v104);
        v177 = v106;
        if (v105 > 0xFDu)
          goto LABEL_83;
        v107 = v105;
        v179 = JSONMap.offset(after:)(v104);
        v108 = v100;
        v109 = v178;
        v110 = specialized JSONDecoderImpl.unwrapString<A>(from:for:_:)(v98, v99, v108, v178, 0, 0, 0, 255);
        if (v101)
          goto LABEL_86;
        v112 = v110;
        v113 = v111;
        v114 = (ValueMetadata *)(*(uint64_t (**)(void))(v173 + 8))();
        v191 = v114;
        v192 = v115;
        __swift_allocate_boxed_opaque_existential_1(&v189);
        swift_bridgeObjectRetain();
        specialized JSONDecoderImpl.unwrap<A, B>(_:as:for:_:)(v180, v177, v107, v114, v109, v112, v113, 0, 0, (uint64_t)v114);
        v180 = 0;
        swift_bridgeObjectRelease();
        v116 = (uint64_t)v191;
        v117 = __swift_project_boxed_opaque_existential_1(&v189, (uint64_t)v191);
        v188[3] = v116;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v188);
        (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v116 - 8) + 16))(boxed_opaque_existential_1, v117, v116);
        swift_bridgeObjectRetain();
        v119 = v182;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v181 = (_QWORD *)v119;
        v182 = 0x8000000000000000;
        swift_bridgeObjectRetain();
        v121 = v113;
        v123 = specialized __RawDictionaryStorage.find<A>(_:)(v112, v113);
        v124 = *(_QWORD *)(v119 + 16);
        v125 = (v122 & 1) == 0;
        v126 = v124 + v125;
        if (__OFADD__(v124, v125))
          goto LABEL_80;
        v127 = v122;
        v128 = v112;
        if (*(_QWORD *)(v119 + 24) < v126)
          break;
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v131 = v121;
          v129 = v119;
          goto LABEL_39;
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
        v134 = static _DictionaryStorage.copy(original:)();
        v129 = v134;
        if (*(_QWORD *)(v119 + 16))
        {
          v135 = (char *)(v134 + 64);
          v136 = (char *)(v119 + 64);
          v137 = (unint64_t)((1 << *(_BYTE *)(v129 + 32)) + 63) >> 6;
          v167 = v119 + 64;
          if (v129 != v119 || v135 >= &v136[8 * v137])
            memmove(v135, v136, 8 * v137);
          v138 = 0;
          *(_QWORD *)(v129 + 16) = *(_QWORD *)(v119 + 16);
          v139 = 1 << *(_BYTE *)(v119 + 32);
          if (v139 < 64)
            v140 = ~(-1 << v139);
          else
            v140 = -1;
          v141 = v140 & *(_QWORD *)(v119 + 64);
          v168 = (unint64_t)(v139 + 63) >> 6;
          v169 = v112;
          while (1)
          {
            if (v141)
            {
              v177 = (v141 - 1) & v141;
              v171 = v138;
              v142 = __clz(__rbit64(v141)) | (v138 << 6);
            }
            else
            {
              v149 = v138 + 1;
              if (__OFADD__(v138, 1))
                goto LABEL_82;
              if (v149 >= v168)
                break;
              v150 = *(_QWORD *)(v167 + 8 * v149);
              v151 = v138 + 1;
              if (!v150)
              {
                v151 = v138 + 2;
                if (v138 + 2 >= v168)
                  break;
                v150 = *(_QWORD *)(v167 + 8 * v151);
                if (!v150)
                {
                  v151 = v138 + 3;
                  if (v138 + 3 >= v168)
                    break;
                  v150 = *(_QWORD *)(v167 + 8 * v151);
                  if (!v150)
                  {
                    v151 = v138 + 4;
                    if (v138 + 4 >= v168)
                      break;
                    v150 = *(_QWORD *)(v167 + 8 * v151);
                    if (!v150)
                    {
                      v152 = v138 + 5;
                      if (v138 + 5 >= v168)
                        break;
                      v150 = *(_QWORD *)(v167 + 8 * v152);
                      if (!v150)
                      {
                        while (1)
                        {
                          v151 = v152 + 1;
                          if (__OFADD__(v152, 1))
                            break;
                          if (v151 >= v168)
                            goto LABEL_68;
                          v150 = *(_QWORD *)(v167 + 8 * v151);
                          ++v152;
                          if (v150)
                            goto LABEL_67;
                        }
LABEL_85:
                        __break(1u);
LABEL_86:
                        swift_unexpectedError();
                        __break(1u);
LABEL_87:
                        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                        __break(1u);
                        JUMPOUT(0x181E205F0);
                      }
                      v151 = v138 + 5;
                    }
                  }
                }
              }
LABEL_67:
              v177 = (v150 - 1) & v150;
              v171 = v151;
              v142 = __clz(__rbit64(v150)) + (v151 << 6);
            }
            v143 = 16 * v142;
            v144 = *(_QWORD *)(v119 + 56);
            v145 = (uint64_t *)(*(_QWORD *)(v119 + 48) + 16 * v142);
            v146 = v145[1];
            v170 = *v145;
            v147 = 32 * v142;
            outlined init with copy of Any(v144 + 32 * v142, (uint64_t)v187);
            v148 = (_QWORD *)(*(_QWORD *)(v129 + 48) + v143);
            *v148 = v170;
            v148[1] = v146;
            outlined init with take of Any(v187, (_OWORD *)(*(_QWORD *)(v129 + 56) + v147));
            swift_bridgeObjectRetain();
            v128 = v169;
            v138 = v171;
            v141 = v177;
          }
        }
LABEL_68:
        swift_bridgeObjectRelease();
        v181 = (_QWORD *)v129;
        v131 = v121;
        if ((v127 & 1) != 0)
        {
LABEL_40:
          outlined init with take of Any((_OWORD *)(*(_QWORD *)(v129 + 56) + 32 * v123), v187);
          goto LABEL_70;
        }
LABEL_69:
        memset(v187, 0, sizeof(v187));
LABEL_70:
        outlined init with copy of (Hashable & Sendable)?((uint64_t)v187, (uint64_t)&v185, &demangling cache variable for type metadata for Any?);
        v153 = v186;
        outlined destroy of Any?((uint64_t)&v185, &demangling cache variable for type metadata for Any?);
        if (!v153)
        {
          outlined destroy of Any?((uint64_t)v187, &demangling cache variable for type metadata for Any?);
          outlined init with copy of Any((uint64_t)v188, (uint64_t)v187);
        }
        outlined init with copy of (Hashable & Sendable)?((uint64_t)v187, (uint64_t)&v183, &demangling cache variable for type metadata for Any?);
        if (v184)
        {
          outlined init with take of Any(&v183, &v185);
          v154 = v181;
          if ((v127 & 1) != 0)
          {
            outlined init with take of Any(&v185, (_OWORD *)(v181[7] + 32 * v123));
          }
          else
          {
            v181[(v123 >> 6) + 8] |= 1 << v123;
            v155 = (uint64_t *)(v154[6] + 16 * v123);
            *v155 = v128;
            v155[1] = v131;
            outlined init with take of Any(&v185, (_OWORD *)(v154[7] + 32 * v123));
            v156 = v154[2];
            v157 = __OFADD__(v156, 1);
            v158 = v156 + 1;
            if (v157)
              goto LABEL_81;
            v154[2] = v158;
            swift_bridgeObjectRetain();
          }
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v183, &demangling cache variable for type metadata for Any?);
          if ((v127 & 1) != 0)
          {
            v159 = (uint64_t)v181;
            swift_arrayDestroy();
            specialized _NativeDictionary._delete(at:)(v123, v159);
          }
        }
        outlined destroy of Any?((uint64_t)v187, &demangling cache variable for type metadata for Any?);
        swift_bridgeObjectRelease();
        v182 = (unint64_t)v181;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v188);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v189);
        v54 = v179;
        v98 = JSONMap.loadValue(at:)(v179);
        v99 = v102;
        v100 = v103;
        v101 = v180;
        if (v103 > 0xFDu)
          goto LABEL_27;
      }
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v126, isUniquelyReferenced_nonNull_native);
      v129 = (uint64_t)v181;
      v130 = v112;
      v131 = v121;
      v132 = specialized __RawDictionaryStorage.find<A>(_:)(v130, v121);
      if ((v127 & 1) != (v133 & 1))
        goto LABEL_87;
      v123 = v132;
LABEL_39:
      if ((v127 & 1) != 0)
        goto LABEL_40;
      goto LABEL_69;
    }
    v84 = *(void (**)(char *, char *, uint64_t))(v51 + 32);
    v85 = v161;
    v84(v161, v26, v52);
    v86 = (uint64_t *)swift_allocObject();
    v87 = v165;
    v86[5] = v52;
    v86[6] = v87;
    v88 = __swift_allocate_boxed_opaque_existential_1(v86 + 2);
    v84((char *)v88, v85, v52);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v29, v50);
    v89 = v178;
    v54 = v179;
    v86[7] = v178;
    v55 = v180;
    v56 = v176;
    if (v89 >> 62)
    {
      if (v89 >> 62 != 1)
      {
        v93 = 1;
LABEL_25:
        v86[8] = v93;
        v178 = (uint64_t)v86;
        goto LABEL_26;
      }
      v90 = (uint64_t *)((v89 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      v90 = (uint64_t *)(v89 + 64);
    }
    v92 = *v90;
    swift_retain();
    v93 = v92 + 1;
    if (__OFADD__(v92, 1))
    {
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
    }
    goto LABEL_25;
  }
  if (v177 | a1 || a3 != 160)
  {
    if (dynamic_cast_existential_2_conditional(a4))
    {
LABEL_14:
      type metadata accessor for DecodingError();
      v180 = swift_allocError();
      v58 = (Swift::Int)v57;
      v59 = v171;
      *v57 = v172;
      v60 = v169;
      v61 = *(void (**)(char *, int64_t, uint64_t))(v169 + 16);
      v62 = v166;
      v61(v166, v168, v59);
      v61(v21, (int64_t)v62, v59);
      v63 = v170;
      v64 = v175;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v170 + 48))(v21, 1, v175) == 1)
      {
        v65 = *(void (**)(char *, uint64_t))(v60 + 8);
        v65(v21, v59);
        _CodingPathNode.path.getter(v178);
        v65(v62, v59);
      }
      else
      {
        v66 = v164;
        (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v164, v21, v64);
        v67 = _CodingPathNode.path.getter(v178);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        inited = swift_initStackObject();
        v179 = v58;
        v69 = v63;
        v70 = inited;
        *(_OWORD *)(inited + 16) = xmmword_18205C850;
        v71 = v165;
        *(_QWORD *)(inited + 56) = v64;
        *(_QWORD *)(inited + 64) = v71;
        v72 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        (*(void (**)(uint64_t *, char *, uint64_t))(v69 + 16))(v72, v66, v64);
        v189 = v67;
        specialized Array.append<A>(contentsOf:)(v70);
        (*(void (**)(char *, uint64_t))(v60 + 8))(v166, v59);
        (*(void (**)(char *, uint64_t))(v69 + 8))(v66, v64);
      }
      v189 = 0;
      v190 = 0xE000000000000000;
      _StringGuts.grow(_:)(43);
      swift_bridgeObjectRelease();
      v189 = 0xD000000000000035;
      v190 = 0x800000018230E9E0;
      __asm { BR              X9 }
    }
LABEL_84:
    __break(1u);
    goto LABEL_85;
  }
  v177 = type metadata accessor for DecodingError();
  v180 = swift_allocError();
  v37 = v36;
  v38 = v171;
  *v36 = v172;
  v39 = v169;
  v40 = *(void (**)(char *, int64_t, uint64_t))(v169 + 16);
  v40(v35, v168, v38);
  v40(v32, (int64_t)v35, v38);
  v41 = v170;
  v42 = v175;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v170 + 48))(v32, 1, v175) == 1)
  {
    v43 = *(void (**)(char *, uint64_t))(v39 + 8);
    v43(v32, v38);
    _CodingPathNode.path.getter(v178);
    v43(v35, v38);
  }
  else
  {
    v73 = *(void (**)(Swift::Int, char *, uint64_t))(v41 + 32);
    v176 = v37;
    v74 = v179;
    v73(v179, v32, v42);
    v75 = _CodingPathNode.path.getter(v178);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
    v76 = v41;
    v77 = swift_initStackObject();
    *(_OWORD *)(v77 + 16) = xmmword_18205C850;
    v78 = v165;
    *(_QWORD *)(v77 + 56) = v42;
    *(_QWORD *)(v77 + 64) = v78;
    v79 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v77 + 32));
    (*(void (**)(uint64_t *, Swift::Int, uint64_t))(v76 + 16))(v79, v74, v42);
    v189 = v75;
    specialized Array.append<A>(contentsOf:)(v77);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v35, v38);
    v80 = v74;
    v37 = v176;
    (*(void (**)(Swift::Int, uint64_t))(v76 + 8))(v80, v42);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  v189 = 0;
  v190 = 0xE000000000000000;
  _StringGuts.grow(_:)(55);
  v81._countAndFlagsBits = 0xD000000000000019;
  v81._object = (void *)0x800000018230EA40;
  String.append(_:)(v81);
  v82._object = (void *)0x800000018230EB40;
  v82._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v82);
  v83._countAndFlagsBits = 0xD00000000000001CLL;
  v83._object = (void *)0x800000018230EA60;
  String.append(_:)(v83);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(uint64_t *, _QWORD))(*(_QWORD *)(v177 - 8) + 104))(v37, *MEMORY[0x1E0DEC460]);
  return swift_willThrow();
}

uint64_t specialized JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(uint64_t a1, uint64_t a2, unsigned __int8 a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t inited;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  _QWORD v48[4];
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  os_unfair_lock_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;

  v10 = v8;
  v62 = *MEMORY[0x1E0C80C00];
  v14 = a3 >> 5;
  if (v14 == 1)
  {
    MEMORY[0x1E0C80A78](a1);
    LOBYTE(v50) = v39;
    BYTE1(v50) = v40;
    v51 = v41;
    v42 = a2;
    v43 = *(_QWORD *)(*(_QWORD *)(v8 + 32) + 24);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v43 + 40));
    specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)((_QWORD *)(v43 + 16), (_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:), a1, v42, &v59);
    os_unfair_lock_unlock((os_unfair_lock_t)(v43 + 40));
    swift_release();
    return swift_release();
  }
  v16 = a7;
  v17 = a6;
  if (v14 == 5 && !(a2 | a1) && a3 == 160)
  {
    v19 = a5;
    v21 = type metadata accessor for DecodingError();
    swift_allocError();
    v23 = v22;
    *v22 = MEMORY[0x1E0DEB070];
    if (a8 == -1)
    {
      _CodingPathNode.path.getter(a4);
    }
    else
    {
      outlined copy of _CodingKey(v19, a6, v16, a8);
      v24 = _CodingPathNode.path.getter(a4);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      *(_QWORD *)(inited + 56) = &type metadata for _CodingKey;
      *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      v26 = swift_allocObject();
      *(_QWORD *)(inited + 32) = v26;
      *(_QWORD *)(v26 + 16) = v19;
      *(_QWORD *)(v26 + 24) = a6;
      *(_QWORD *)(v26 + 32) = v16;
      *(_BYTE *)(v26 + 40) = a8;
      v60 = v24;
      specialized Array.append<A>(contentsOf:)(inited);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    v60 = 0;
    v61 = 0xE000000000000000;
    _StringGuts.grow(_:)(55);
    v45._object = (void *)0x800000018230EA40;
    v45._countAndFlagsBits = 0xD000000000000019;
    String.append(_:)(v45);
    v46._countAndFlagsBits = 0x656C62756F44;
    v46._object = (void *)0xE600000000000000;
    String.append(_:)(v46);
    v47._countAndFlagsBits = 0xD00000000000001CLL;
    v47._object = (void *)0x800000018230EA60;
    String.append(_:)(v47);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v23, *MEMORY[0x1E0DEC460], v21);
    return swift_willThrow();
  }
  if ((a3 & 0xE1) != 1 || !*(_QWORD *)(v10 + 88))
  {
LABEL_12:
    if (a8 == -1)
    {
      _CodingPathNode.path.getter(a4);
    }
    else
    {
      v58 = a5;
      outlined copy of _CodingKey(a5, v17, v16, a8);
      v35 = _CodingPathNode.path.getter(a4);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      v36 = v17;
      v37 = swift_initStackObject();
      *(_OWORD *)(v37 + 16) = xmmword_18205C850;
      *(_QWORD *)(v37 + 56) = &type metadata for _CodingKey;
      *(_QWORD *)(v37 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      v38 = swift_allocObject();
      *(_QWORD *)(v37 + 32) = v38;
      *(_QWORD *)(v38 + 16) = v58;
      *(_QWORD *)(v38 + 24) = v36;
      *(_QWORD *)(v38 + 32) = v16;
      *(_BYTE *)(v38 + 40) = a8;
      v60 = v35;
      specialized Array.append<A>(contentsOf:)(v37);
    }
    type metadata accessor for DecodingError();
    swift_allocError();
    JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E0DEB070], a3, v44);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  v58 = a5;
  v52 = a6;
  v53 = a7;
  v57 = &v52;
  v27 = MEMORY[0x1E0C80A78](a1);
  v55 = v48;
  v48[2] = v29;
  v48[3] = v28;
  v49 = v27;
  v50 = v31;
  v51 = v30;
  v32 = a2;
  v33 = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 24);
  v54 = (_QWORD *)(v33 + 16);
  swift_retain();
  swift_retain();
  v56 = (os_unfair_lock_t)(v33 + 40);
  os_unfair_lock_lock((os_unfair_lock_t)(v33 + 40));
  v55 = (_QWORD *)v32;
  specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)(v54, (_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #2 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:), a1, v32, (uint64_t)&v60);
  if (v9)
  {
    os_unfair_lock_unlock(v56);
    swift_release();
    result = swift_release();
    __break(1u);
  }
  else
  {
    os_unfair_lock_unlock(v56);
    swift_release();
    result = swift_release();
    if ((v61 & 1) != 0)
    {
      v16 = v53;
      v17 = v52;
      a5 = v58;
      goto LABEL_12;
    }
  }
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t inited;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  _QWORD v48[4];
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  os_unfair_lock_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;

  v10 = v8;
  v62 = *MEMORY[0x1E0C80C00];
  v14 = a3 >> 5;
  if (v14 == 1)
  {
    MEMORY[0x1E0C80A78](a1);
    LOBYTE(v50) = v39;
    BYTE1(v50) = v40;
    v51 = v41;
    v42 = a2;
    v43 = *(_QWORD *)(*(_QWORD *)(v8 + 32) + 24);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v43 + 40));
    specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)((_QWORD *)(v43 + 16), (_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:), a1, v42, &v59);
    os_unfair_lock_unlock((os_unfair_lock_t)(v43 + 40));
    swift_release();
    return swift_release();
  }
  v16 = a7;
  v17 = a6;
  if (v14 == 5 && !(a2 | a1) && a3 == 160)
  {
    v19 = a5;
    v21 = type metadata accessor for DecodingError();
    swift_allocError();
    v23 = v22;
    *v22 = MEMORY[0x1E0DEB070];
    if (a8 == -1)
    {
      _CodingPathNode.path.getter(a4);
    }
    else
    {
      outlined copy of _CodingKey(v19, a6, v16, a8);
      v24 = _CodingPathNode.path.getter(a4);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      *(_QWORD *)(inited + 56) = &type metadata for _CodingKey;
      *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      v26 = swift_allocObject();
      *(_QWORD *)(inited + 32) = v26;
      *(_QWORD *)(v26 + 16) = v19;
      *(_QWORD *)(v26 + 24) = a6;
      *(_QWORD *)(v26 + 32) = v16;
      *(_BYTE *)(v26 + 40) = a8;
      v60 = v24;
      specialized Array.append<A>(contentsOf:)(inited);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    v60 = 0;
    v61 = 0xE000000000000000;
    _StringGuts.grow(_:)(55);
    v45._object = (void *)0x800000018230EA40;
    v45._countAndFlagsBits = 0xD000000000000019;
    String.append(_:)(v45);
    v46._countAndFlagsBits = 0x656C62756F44;
    v46._object = (void *)0xE600000000000000;
    String.append(_:)(v46);
    v47._countAndFlagsBits = 0xD00000000000001CLL;
    v47._object = (void *)0x800000018230EA60;
    String.append(_:)(v47);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v23, *MEMORY[0x1E0DEC460], v21);
    return swift_willThrow();
  }
  if ((a3 & 0xE1) != 1 || !*(_QWORD *)(v10 + 88))
  {
LABEL_12:
    if (a8 == -1)
    {
      _CodingPathNode.path.getter(a4);
    }
    else
    {
      v58 = a5;
      outlined copy of _CodingKey(a5, v17, v16, a8);
      v35 = _CodingPathNode.path.getter(a4);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      v36 = v17;
      v37 = swift_initStackObject();
      *(_OWORD *)(v37 + 16) = xmmword_18205C850;
      *(_QWORD *)(v37 + 56) = &type metadata for _CodingKey;
      *(_QWORD *)(v37 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      v38 = swift_allocObject();
      *(_QWORD *)(v37 + 32) = v38;
      *(_QWORD *)(v38 + 16) = v58;
      *(_QWORD *)(v38 + 24) = v36;
      *(_QWORD *)(v38 + 32) = v16;
      *(_BYTE *)(v38 + 40) = a8;
      v60 = v35;
      specialized Array.append<A>(contentsOf:)(v37);
    }
    type metadata accessor for DecodingError();
    swift_allocError();
    JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E0DEB070], a3, v44);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  v58 = a5;
  v52 = a6;
  v53 = a7;
  v57 = &v52;
  v27 = MEMORY[0x1E0C80A78](a1);
  v55 = v48;
  v48[2] = v29;
  v48[3] = v28;
  v49 = v27;
  v50 = v31;
  v51 = v30;
  v32 = a2;
  v33 = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 24);
  v54 = (_QWORD *)(v33 + 16);
  swift_retain();
  swift_retain();
  v56 = (os_unfair_lock_t)(v33 + 40);
  os_unfair_lock_lock((os_unfair_lock_t)(v33 + 40));
  v55 = (_QWORD *)v32;
  specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)(v54, (_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #2 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:), a1, v32, (uint64_t)&v60);
  if (v9)
  {
    os_unfair_lock_unlock(v56);
    swift_release();
    result = swift_release();
    __break(1u);
  }
  else
  {
    os_unfair_lock_unlock(v56);
    swift_release();
    result = swift_release();
    if ((v61 & 1) != 0)
    {
      v16 = v53;
      v17 = v52;
      a5 = v58;
      goto LABEL_12;
    }
  }
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t inited;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  _QWORD v48[4];
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  os_unfair_lock_t v56;
  uint64_t *v57;
  uint64_t v58;
  int v59;
  _QWORD v60[22];

  v10 = v8;
  v60[20] = *MEMORY[0x1E0C80C00];
  v14 = a3 >> 5;
  if (v14 == 1)
  {
    MEMORY[0x1E0C80A78](a1);
    LOBYTE(v50) = v39;
    BYTE1(v50) = v40;
    v51 = v41;
    v42 = a2;
    v43 = *(_QWORD *)(*(_QWORD *)(v8 + 32) + 24);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v43 + 40));
    specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)((_QWORD *)(v43 + 16), (_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:), a1, v42, &v59);
    os_unfair_lock_unlock((os_unfair_lock_t)(v43 + 40));
    swift_release();
    return swift_release();
  }
  v16 = a7;
  v17 = a6;
  if (v14 == 5 && !(a2 | a1) && a3 == 160)
  {
    v19 = a5;
    v21 = type metadata accessor for DecodingError();
    swift_allocError();
    v23 = v22;
    *v22 = MEMORY[0x1E0DEB188];
    if (a8 == -1)
    {
      _CodingPathNode.path.getter(a4);
    }
    else
    {
      outlined copy of _CodingKey(v19, a6, v16, a8);
      v24 = _CodingPathNode.path.getter(a4);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      *(_QWORD *)(inited + 56) = &type metadata for _CodingKey;
      *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      v26 = swift_allocObject();
      *(_QWORD *)(inited + 32) = v26;
      *(_QWORD *)(v26 + 16) = v19;
      *(_QWORD *)(v26 + 24) = a6;
      *(_QWORD *)(v26 + 32) = v16;
      *(_BYTE *)(v26 + 40) = a8;
      v60[0] = v24;
      specialized Array.append<A>(contentsOf:)(inited);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    v60[0] = 0;
    v60[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(55);
    v45._object = (void *)0x800000018230EA40;
    v45._countAndFlagsBits = 0xD000000000000019;
    String.append(_:)(v45);
    v46._countAndFlagsBits = 0x74616F6C46;
    v46._object = (void *)0xE500000000000000;
    String.append(_:)(v46);
    v47._countAndFlagsBits = 0xD00000000000001CLL;
    v47._object = (void *)0x800000018230EA60;
    String.append(_:)(v47);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v23, *MEMORY[0x1E0DEC460], v21);
    return swift_willThrow();
  }
  if ((a3 & 0xE1) != 1 || !*(_QWORD *)(v10 + 88))
  {
LABEL_12:
    if (a8 == -1)
    {
      _CodingPathNode.path.getter(a4);
    }
    else
    {
      v58 = a5;
      outlined copy of _CodingKey(a5, v17, v16, a8);
      v35 = _CodingPathNode.path.getter(a4);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      v36 = v17;
      v37 = swift_initStackObject();
      *(_OWORD *)(v37 + 16) = xmmword_18205C850;
      *(_QWORD *)(v37 + 56) = &type metadata for _CodingKey;
      *(_QWORD *)(v37 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      v38 = swift_allocObject();
      *(_QWORD *)(v37 + 32) = v38;
      *(_QWORD *)(v38 + 16) = v58;
      *(_QWORD *)(v38 + 24) = v36;
      *(_QWORD *)(v38 + 32) = v16;
      *(_BYTE *)(v38 + 40) = a8;
      v60[0] = v35;
      specialized Array.append<A>(contentsOf:)(v37);
    }
    type metadata accessor for DecodingError();
    swift_allocError();
    JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E0DEB188], a3, v44);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  v58 = a5;
  v52 = a6;
  v53 = a7;
  v57 = &v52;
  v27 = MEMORY[0x1E0C80A78](a1);
  v55 = v48;
  v48[2] = v29;
  v48[3] = v28;
  v49 = v27;
  v50 = v31;
  v51 = v30;
  v32 = a2;
  v33 = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 24);
  v54 = (_QWORD *)(v33 + 16);
  swift_retain();
  swift_retain();
  v56 = (os_unfair_lock_t)(v33 + 40);
  os_unfair_lock_lock((os_unfair_lock_t)(v33 + 40));
  v55 = (_QWORD *)v32;
  specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)(v54, (_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #2 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:), a1, v32, (uint64_t)v60);
  if (v9)
  {
    os_unfair_lock_unlock(v56);
    swift_release();
    result = swift_release();
    __break(1u);
  }
  else
  {
    os_unfair_lock_unlock(v56);
    swift_release();
    result = swift_release();
    if ((v60[0] & 0x100000000) != 0)
    {
      v16 = v53;
      v17 = v52;
      a5 = v58;
      goto LABEL_12;
    }
  }
  return result;
}

uint64_t specialized JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t result;
  uint64_t v45;
  void (*v46)(char *, uint64_t, uint64_t, __n128);
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  char v50;
  char v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t inited;
  uint64_t v61;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v63;
  Swift::String v64;
  Swift::String v65;
  Swift::String v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t *v69;
  int v70;
  char *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;

  v8 = v7;
  v77 = a7;
  v73 = a5;
  v76 = a4;
  *((_QWORD *)&v78 + 1) = a2;
  *(_QWORD *)&v78 = a1;
  v82 = *MEMORY[0x1E0C80C00];
  v10 = *v7;
  v75 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v71 = (char *)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v67 - v13;
  v15 = type metadata accessor for Optional();
  v74 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v67 - v19;
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v67 - v22;
  v27 = MEMORY[0x1E0C80A78](v24);
  v29 = (char *)&v67 - v28;
  v30 = v26 >> 5;
  if (v30 == 1)
  {
    MEMORY[0x1E0C80A78](v25);
    v49 = v77;
    *(&v67 - 4) = a6;
    *(&v67 - 3) = v49;
    *((_BYTE *)&v67 - 16) = v50;
    *((_BYTE *)&v67 - 15) = v51;
    *(&v67 - 1) = v10;
    v52 = *(_QWORD *)(v8[4] + 24);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v52 + 40));
    specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)((_QWORD *)(v52 + 16), (_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:), v78, *((uint64_t *)&v78 + 1), &v79);
    os_unfair_lock_unlock((os_unfair_lock_t)(v52 + 40));
    swift_release();
    return swift_release();
  }
  if (v30 == 5 && v78 == 0 && v26 == 160)
  {
    *(_QWORD *)&v78 = type metadata accessor for DecodingError();
    *((_QWORD *)&v78 + 1) = swift_allocError();
    v72 = v31;
    *v31 = MEMORY[0x1E0DEB070];
    v32 = v74;
    v33 = *(void (**)(char *, uint64_t, uint64_t))(v74 + 16);
    v33(v29, v73, v15);
    v33(v23, (uint64_t)v29, v15);
    v34 = v75;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v23, 1, a6) == 1)
    {
      v35 = *(void (**)(char *, uint64_t))(v32 + 8);
      v35(v23, v15);
      _CodingPathNode.path.getter(v76);
      v35(v29, v15);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v14, v23, a6);
      v59 = _CodingPathNode.path.getter(v76);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      v61 = v77;
      *(_QWORD *)(inited + 56) = a6;
      *(_QWORD *)(inited + 64) = v61;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v34 + 16))(boxed_opaque_existential_1, v14, a6);
      v80 = v59;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v29, v15);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v14, a6);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    v63 = v72;
    v80 = 0;
    v81 = 0xE000000000000000;
    _StringGuts.grow(_:)(55);
    v64._object = (void *)0x800000018230EA40;
    v64._countAndFlagsBits = 0xD000000000000019;
    String.append(_:)(v64);
    v65._countAndFlagsBits = 0x656C62756F44;
    v65._object = (void *)0xE600000000000000;
    String.append(_:)(v65);
    v66._countAndFlagsBits = 0xD00000000000001CLL;
    v66._object = (void *)0x800000018230EA60;
    String.append(_:)(v66);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD))(*(_QWORD *)(v78 - 8) + 104))(v63, *MEMORY[0x1E0DEC460]);
    return swift_willThrow();
  }
  v70 = v26;
  if ((v26 & 0xE1) != 1 || !v8[11])
  {
LABEL_11:
    v45 = v74;
    v46 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v74 + 16);
    v46(v20, v73, v15, v27);
    ((void (*)(char *, char *, uint64_t))v46)(v17, v20, v15);
    v47 = v75;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v17, 1, a6) == 1)
    {
      v48 = *(void (**)(char *, uint64_t))(v45 + 8);
      v48(v17, v15);
      _CodingPathNode.path.getter(v76);
      v48(v20, v15);
    }
    else
    {
      v53 = v71;
      (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v71, v17, a6);
      v54 = _CodingPathNode.path.getter(v76);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      v55 = swift_initStackObject();
      *(_OWORD *)(v55 + 16) = xmmword_18205C850;
      v56 = v77;
      *(_QWORD *)(v55 + 56) = a6;
      *(_QWORD *)(v55 + 64) = v56;
      v57 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v55 + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v47 + 16))(v57, v53, a6);
      v80 = v54;
      specialized Array.append<A>(contentsOf:)(v55);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v20, v15);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v53, a6);
    }
    type metadata accessor for DecodingError();
    swift_allocError();
    JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E0DEB070], v70, v58);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  v69 = &v67;
  v36 = MEMORY[0x1E0C80A78](v25);
  v37 = v77;
  *(&v67 - 8) = a6;
  *(&v67 - 7) = v37;
  *(&v67 - 6) = v39;
  *(&v67 - 5) = v38;
  *((__n128 *)&v67 - 2) = v36;
  *(&v67 - 2) = v41;
  *(&v67 - 1) = v40;
  v42 = *(_QWORD *)(v8[4] + 24);
  v68 = (_QWORD *)(v42 + 16);
  swift_retain();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v42 + 40));
  v43 = v72;
  specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)(v68, (_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #2 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:), v78, *((uint64_t *)&v78 + 1), (uint64_t)&v80);
  if (v43)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v42 + 40));
    swift_release();
    result = swift_release();
    __break(1u);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v42 + 40));
    swift_release();
    result = swift_release();
    if ((v81 & 1) != 0)
      goto LABEL_11;
  }
  return result;
}

{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t result;
  uint64_t v45;
  void (*v46)(char *, uint64_t, uint64_t, __n128);
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  char v50;
  char v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t inited;
  uint64_t v61;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v63;
  Swift::String v64;
  Swift::String v65;
  Swift::String v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t *v69;
  int v70;
  char *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  __int128 v78;
  int v79;
  _QWORD v80[21];

  v8 = v7;
  v77 = a7;
  v73 = a5;
  v76 = a4;
  *((_QWORD *)&v78 + 1) = a2;
  *(_QWORD *)&v78 = a1;
  v80[20] = *MEMORY[0x1E0C80C00];
  v10 = *v7;
  v75 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v71 = (char *)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v67 - v13;
  v15 = type metadata accessor for Optional();
  v74 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v67 - v19;
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v67 - v22;
  v27 = MEMORY[0x1E0C80A78](v24);
  v29 = (char *)&v67 - v28;
  v30 = v26 >> 5;
  if (v30 == 1)
  {
    MEMORY[0x1E0C80A78](v25);
    v49 = v77;
    *(&v67 - 4) = a6;
    *(&v67 - 3) = v49;
    *((_BYTE *)&v67 - 16) = v50;
    *((_BYTE *)&v67 - 15) = v51;
    *(&v67 - 1) = v10;
    v52 = *(_QWORD *)(v8[4] + 24);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v52 + 40));
    specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)((_QWORD *)(v52 + 16), (_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:), v78, *((uint64_t *)&v78 + 1), &v79);
    os_unfair_lock_unlock((os_unfair_lock_t)(v52 + 40));
    swift_release();
    return swift_release();
  }
  if (v30 == 5 && v78 == 0 && v26 == 160)
  {
    *(_QWORD *)&v78 = type metadata accessor for DecodingError();
    *((_QWORD *)&v78 + 1) = swift_allocError();
    v72 = v31;
    *v31 = MEMORY[0x1E0DEB188];
    v32 = v74;
    v33 = *(void (**)(char *, uint64_t, uint64_t))(v74 + 16);
    v33(v29, v73, v15);
    v33(v23, (uint64_t)v29, v15);
    v34 = v75;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v23, 1, a6) == 1)
    {
      v35 = *(void (**)(char *, uint64_t))(v32 + 8);
      v35(v23, v15);
      _CodingPathNode.path.getter(v76);
      v35(v29, v15);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v14, v23, a6);
      v59 = _CodingPathNode.path.getter(v76);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      v61 = v77;
      *(_QWORD *)(inited + 56) = a6;
      *(_QWORD *)(inited + 64) = v61;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v34 + 16))(boxed_opaque_existential_1, v14, a6);
      v80[0] = v59;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v29, v15);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v14, a6);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    v63 = v72;
    v80[0] = 0;
    v80[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(55);
    v64._object = (void *)0x800000018230EA40;
    v64._countAndFlagsBits = 0xD000000000000019;
    String.append(_:)(v64);
    v65._countAndFlagsBits = 0x74616F6C46;
    v65._object = (void *)0xE500000000000000;
    String.append(_:)(v65);
    v66._countAndFlagsBits = 0xD00000000000001CLL;
    v66._object = (void *)0x800000018230EA60;
    String.append(_:)(v66);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD))(*(_QWORD *)(v78 - 8) + 104))(v63, *MEMORY[0x1E0DEC460]);
    return swift_willThrow();
  }
  v70 = v26;
  if ((v26 & 0xE1) != 1 || !v8[11])
  {
LABEL_11:
    v45 = v74;
    v46 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v74 + 16);
    v46(v20, v73, v15, v27);
    ((void (*)(char *, char *, uint64_t))v46)(v17, v20, v15);
    v47 = v75;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v17, 1, a6) == 1)
    {
      v48 = *(void (**)(char *, uint64_t))(v45 + 8);
      v48(v17, v15);
      _CodingPathNode.path.getter(v76);
      v48(v20, v15);
    }
    else
    {
      v53 = v71;
      (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v71, v17, a6);
      v54 = _CodingPathNode.path.getter(v76);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      v55 = swift_initStackObject();
      *(_OWORD *)(v55 + 16) = xmmword_18205C850;
      v56 = v77;
      *(_QWORD *)(v55 + 56) = a6;
      *(_QWORD *)(v55 + 64) = v56;
      v57 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v55 + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v47 + 16))(v57, v53, a6);
      v80[0] = v54;
      specialized Array.append<A>(contentsOf:)(v55);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v20, v15);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v53, a6);
    }
    type metadata accessor for DecodingError();
    swift_allocError();
    JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E0DEB188], v70, v58);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  v69 = &v67;
  v36 = MEMORY[0x1E0C80A78](v25);
  v37 = v77;
  *(&v67 - 8) = a6;
  *(&v67 - 7) = v37;
  *(&v67 - 6) = v39;
  *(&v67 - 5) = v38;
  *((__n128 *)&v67 - 2) = v36;
  *(&v67 - 2) = v41;
  *(&v67 - 1) = v40;
  v42 = *(_QWORD *)(v8[4] + 24);
  v68 = (_QWORD *)(v42 + 16);
  swift_retain();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v42 + 40));
  v43 = v72;
  specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)(v68, (_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #2 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:), v78, *((uint64_t *)&v78 + 1), (uint64_t)v80);
  if (v43)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v42 + 40));
    swift_release();
    result = swift_release();
    __break(1u);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v42 + 40));
    swift_release();
    result = swift_release();
    if ((v80[0] & 0x100000000) != 0)
      goto LABEL_11;
  }
  return result;
}

uint64_t specialized JSONDecoderImpl.unwrapString<A>(from:for:_:)(uint64_t a1, uint64_t a2, unsigned __int8 a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t inited;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  uint64_t v34;
  uint64_t *v35;
  _QWORD v36[22];

  v10 = v8;
  v36[20] = *MEMORY[0x1E0C80C00];
  if ((a3 & 0xE0) == 0xA0)
  {
    if (!(a2 | a1) && a3 == 160)
    {
      v19 = type metadata accessor for DecodingError();
      swift_allocError();
      v21 = v20;
      *v20 = MEMORY[0x1E0DEA968];
      if (a8 == -1)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        outlined copy of _CodingKey(a5, a6, a7, a8);
        v22 = _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_18205C850;
        *(_QWORD *)(inited + 56) = &type metadata for _CodingKey;
        *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        v24 = swift_allocObject();
        *(_QWORD *)(inited + 32) = v24;
        *(_QWORD *)(v24 + 16) = a5;
        *(_QWORD *)(v24 + 24) = a6;
        *(_QWORD *)(v24 + 32) = a7;
        *(_BYTE *)(v24 + 40) = a8;
        v36[0] = v22;
        specialized Array.append<A>(contentsOf:)(inited);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      v36[0] = 0;
      v36[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(55);
      v31._object = (void *)0x800000018230EA40;
      v31._countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v31);
      v32._countAndFlagsBits = 0x676E69727453;
      v32._object = (void *)0xE600000000000000;
      String.append(_:)(v32);
      v33._countAndFlagsBits = 0xD00000000000001CLL;
      v33._object = (void *)0x800000018230EA60;
      String.append(_:)(v33);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x1E0DEC460], v19);
      return swift_willThrow();
    }
LABEL_10:
    if (a8 == -1)
    {
      _CodingPathNode.path.getter(a4);
    }
    else
    {
      v35 = (uint64_t *)a7;
      outlined copy of _CodingKey(a5, a6, a7, a8);
      v27 = _CodingPathNode.path.getter(a4);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      v28 = swift_initStackObject();
      *(_OWORD *)(v28 + 16) = xmmword_18205C850;
      *(_QWORD *)(v28 + 56) = &type metadata for _CodingKey;
      *(_QWORD *)(v28 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      v29 = swift_allocObject();
      *(_QWORD *)(v28 + 32) = v29;
      *(_QWORD *)(v29 + 16) = a5;
      *(_QWORD *)(v29 + 24) = a6;
      *(_QWORD *)(v29 + 32) = v35;
      *(_BYTE *)(v29 + 40) = a8;
      v36[0] = v27;
      specialized Array.append<A>(contentsOf:)(v28);
    }
    type metadata accessor for DecodingError();
    swift_allocError();
    JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E0DEA968], a3, v30);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  if (a3 > 0x1Fu)
    goto LABEL_10;
  v35 = &v34;
  MEMORY[0x1E0C80A78](a1);
  v25 = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 24);
  swift_retain();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v25 + 40));
  specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)((_QWORD *)(v25 + 16), (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))partial apply for closure #1 in JSONDecoderImpl.unwrapString<A>(from:for:_:), a1, a2, v36);
  os_unfair_lock_unlock((os_unfair_lock_t)(v25 + 40));
  swift_release();
  result = swift_release();
  if (!v9)
    return v36[0];
  return result;
}

uint64_t JSONDecoderImpl.unwrapString<A>(from:for:_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  void (*v42)(char *, uint64_t, uint64_t, __n128);
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  _QWORD *v50;
  void (*v51)(char *, char *, uint64_t);
  char *v52;
  uint64_t v53;
  uint64_t inited;
  uint64_t v55;
  uint64_t *boxed_opaque_existential_1;
  char *v57;
  Swift::String v58;
  Swift::String v59;
  Swift::String v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD v69[22];

  v63 = a7;
  v65 = a5;
  v64 = a4;
  v69[20] = *MEMORY[0x1E0C80C00];
  v66 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v61 = (char *)&v61 - v13;
  v14 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v61 - v18;
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v61 - v21;
  v27 = MEMORY[0x1E0C80A78](v23);
  v29 = (char *)&v61 - v28;
  v68 = a2;
  if ((v26 & 0xE0) == 0xA0)
  {
    if (!(a2 | a1) && v26 == 160)
    {
      v30 = v25;
      v68 = type metadata accessor for DecodingError();
      swift_allocError();
      v32 = v31;
      *v31 = MEMORY[0x1E0DEA968];
      v33 = *(void (**)(char *, uint64_t, uint64_t))(v30 + 16);
      v33(v29, v65, v14);
      v33(v22, (uint64_t)v29, v14);
      v34 = v66;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v22, 1, a6) == 1)
      {
        v35 = *(void (**)(char *, uint64_t))(v30 + 8);
        v35(v22, v14);
        _CodingPathNode.path.getter(v64);
        v35(v29, v14);
      }
      else
      {
        v51 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
        v67 = v32;
        v52 = v61;
        v51(v61, v22, a6);
        v53 = _CodingPathNode.path.getter(v64);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_18205C850;
        v55 = v63;
        *(_QWORD *)(inited + 56) = a6;
        *(_QWORD *)(inited + 64) = v55;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        (*(void (**)(uint64_t *, char *, uint64_t))(v34 + 16))(boxed_opaque_existential_1, v52, a6);
        v69[0] = v53;
        specialized Array.append<A>(contentsOf:)(inited);
        (*(void (**)(char *, uint64_t))(v30 + 8))(v29, v14);
        v57 = v52;
        v32 = v67;
        (*(void (**)(char *, uint64_t))(v34 + 8))(v57, a6);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      v69[0] = 0;
      v69[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(55);
      v58._object = (void *)0x800000018230EA40;
      v58._countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v58);
      v59._countAndFlagsBits = 0x676E69727453;
      v59._object = (void *)0xE600000000000000;
      String.append(_:)(v59);
      v60._countAndFlagsBits = 0xD00000000000001CLL;
      v60._object = (void *)0x800000018230EA60;
      String.append(_:)(v60);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD))(*(_QWORD *)(v68 - 8) + 104))(v32, *MEMORY[0x1E0DEC460]);
      return swift_willThrow();
    }
LABEL_9:
    LODWORD(v62) = v26;
    v42 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v25 + 16);
    v43 = v25;
    v42(v19, v65, v14, v27);
    ((void (*)(char *, char *, uint64_t))v42)(v16, v19, v14);
    v44 = v66;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v16, 1, a6) == 1)
    {
      v45 = *(void (**)(char *, uint64_t))(v43 + 8);
      v45(v16, v14);
      _CodingPathNode.path.getter(v64);
      v45(v19, v14);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v11, v16, a6);
      v46 = _CodingPathNode.path.getter(v64);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      v47 = swift_initStackObject();
      *(_OWORD *)(v47 + 16) = xmmword_18205C850;
      v48 = v63;
      *(_QWORD *)(v47 + 56) = a6;
      *(_QWORD *)(v47 + 64) = v48;
      v49 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v47 + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v44 + 16))(v49, v11, a6);
      v69[0] = v46;
      specialized Array.append<A>(contentsOf:)(v47);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v19, v14);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v11, a6);
    }
    type metadata accessor for DecodingError();
    swift_allocError();
    JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E0DEA968], v62, v50);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  if (v26 > 0x1Fu)
    goto LABEL_9;
  MEMORY[0x1E0C80A78](v24);
  *((_BYTE *)&v61 - 16) = v36;
  *((_BYTE *)&v61 - 15) = v37;
  v39 = *(_QWORD *)(*(_QWORD *)(v38 + 32) + 24);
  swift_retain();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v39 + 40));
  v40 = v62;
  specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)((_QWORD *)(v39 + 16), (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))closure #1 in JSONDecoderImpl.unwrapString<A>(from:for:_:)partial apply, a1, v68, v69);
  os_unfair_lock_unlock((os_unfair_lock_t)(v39 + 40));
  swift_release();
  result = swift_release();
  if (!v40)
    return v69[0];
  return result;
}

unint64_t closure #1 in JSONDecoderImpl.unwrapDecimal<A>(from:for:_:)@<X0>(char *__s1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  unint64_t result;
  __int16 v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[40];
  _BYTE v41[56];
  _BYTE v42[40];
  _BYTE v43[56];
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;

  if ((a5 & 1) != 0)
  {
    result = specialized static JSON5Scanner.prevalidateJSONNumber(from:fullSource:)(__s1, a2, a3, a4);
    if (v7)
      return result;
    if ((v14 & 1) == 0)
    {
      if ((v14 & 0x100) != 0)
      {
        v38 = 0;
        v39 = 0;
        _So9NSDecimala__exponent_setter(0, &v37);
        _So9NSDecimala__length_setter(0, &v37);
        _So9NSDecimala__isNegative_setter(1, &v37);
        _So9NSDecimala__isCompact_setter_0(0, &v37);
        _So9NSDecimala__reserved_setter(&v37);
        result = v37;
        LOWORD(v25) = v38;
        LOWORD(v26) = WORD1(v38);
        LOWORD(v23) = WORD2(v38);
        LOWORD(v27) = HIWORD(v38);
        LOWORD(v28) = v39;
        LOWORD(v29) = WORD1(v39);
        LOWORD(v24) = WORD2(v39);
        LOWORD(v30) = HIWORD(v39);
      }
      else
      {
        v15 = (char *)result;
        specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)((uint64_t)__s1, a2, 0x2EuLL, 0xE100000000000000, 1, (uint64_t)v40);
        outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v40, (uint64_t)&v44);
        result = v44;
        if (v48 == 1)
        {
          if (!(v46 | v47 | v44 | v45))
          {
            v16 = &__s1[a2] - v15;
            if ((((v15 - __s1) | v16) & 0x8000000000000000) == 0)
            {
              specialized static JSON5Scanner.validateNumber(from:fullSource:)(v15, v16, a3, a4, (uint64_t)v41);
              lazy protocol witness table accessor for type JSONError and conformance JSONError();
              swift_allocError();
              v18 = v41;
LABEL_14:
              outlined init with take of JSONError((uint64_t)v18, v17);
              return swift_willThrow();
            }
            goto LABEL_30;
          }
LABEL_24:
          v33 = static String._fromUTF8Repairing(_:)();
          v35 = v34;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_QWORD *)v36 = v33;
          *(_QWORD *)(v36 + 8) = v35;
          *(_OWORD *)(v36 + 16) = 0u;
          *(_OWORD *)(v36 + 32) = 0u;
          *(_BYTE *)(v36 + 48) = 11;
          return swift_willThrow();
        }
        v26 = HIWORD(v44);
        v25 = HIDWORD(v44);
        LOWORD(v23) = v45;
        LOWORD(v27) = WORD1(v45);
        LOWORD(v28) = WORD2(v45);
        LOWORD(v29) = HIWORD(v45);
        LOWORD(v24) = v46;
        LOWORD(v30) = WORD1(v46);
      }
      goto LABEL_26;
    }
    if (a2)
    {
      if (*__s1 == 45)
      {
        v21 = specialized _parseJSON5Integer<A>(_:isHex:)(__s1, a2, 1, (uint64_t (*)(_BYTE *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:));
        if ((v22 & 1) != 0)
          goto LABEL_24;
        result = specialized NSDecimal.init<A>(exactly:)(v21);
        if ((v24 & 0x100000000) != 0)
          goto LABEL_24;
      }
      else
      {
        v31 = specialized _parseJSON5Integer<A>(_:isHex:)((unsigned __int8 *)__s1, a2, 1, (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:), (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseIntegerDigits<A>(_:isNegative:));
        if ((v32 & 1) != 0)
          goto LABEL_24;
        result = specialized NSDecimal.init<A>(exactly:)(v31);
        if ((v24 & 0x100000000) != 0)
          goto LABEL_24;
      }
      v25 = HIDWORD(result);
      v26 = HIWORD(result);
      v27 = v23 >> 16;
      v28 = HIDWORD(v23);
      v29 = HIWORD(v23);
      v30 = v24 >> 16;
      goto LABEL_26;
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    return result;
  }
  result = (unint64_t)specialized static JSONScanner.prevalidateJSONNumber(from:hasExponent:fullSource:)((unsigned __int8 *)__s1, a2, a6 & 1, a3, a4);
  if (v7)
    return result;
  v19 = (_BYTE *)result;
  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)((uint64_t)__s1, a2, 0x2EuLL, 0xE100000000000000, 1, (uint64_t)v42);
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v42, (uint64_t)&v49);
  result = v49;
  if (v53 == 1)
  {
    if (v51 | v52 | v49 | v50)
      goto LABEL_24;
    v20 = &__s1[a2] - v19;
    if ((((v19 - __s1) | v20) & 0x8000000000000000) == 0)
    {
      specialized static JSONScanner.validateNumber(from:fullSource:)(v19, v20, a3, a4, (uint64_t)v43);
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      v18 = v43;
      goto LABEL_14;
    }
    goto LABEL_29;
  }
  v26 = HIWORD(v49);
  v25 = HIDWORD(v49);
  LOWORD(v23) = v50;
  LOWORD(v27) = WORD1(v50);
  LOWORD(v28) = WORD2(v50);
  LOWORD(v29) = HIWORD(v50);
  LOWORD(v24) = v51;
  LOWORD(v30) = WORD1(v51);
LABEL_26:
  *(_DWORD *)a7 = result;
  *(_WORD *)(a7 + 4) = v25;
  *(_WORD *)(a7 + 6) = v26;
  *(_WORD *)(a7 + 8) = v23;
  *(_WORD *)(a7 + 10) = v27;
  *(_WORD *)(a7 + 12) = v28;
  *(_WORD *)(a7 + 14) = v29;
  *(_WORD *)(a7 + 16) = v24;
  *(_WORD *)(a7 + 18) = v30;
  return result;
}

uint64_t closure #1 in JSONDecoderImpl.unwrapString<A>(from:for:_:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, char a6@<W5>, uint64_t *a7@<X8>)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if ((a5 & 1) != 0)
  {
    result = static String._tryFromUTF8(_:)();
    if (!v13)
    {
      v14 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(a1, a3, a4);
      v16 = v15;
      v18 = v17;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(_QWORD *)v19 = v14;
      *(_QWORD *)(v19 + 8) = v16;
      *(_QWORD *)(v19 + 16) = v18;
      *(_QWORD *)(v19 + 24) = 0;
      *(_QWORD *)(v19 + 32) = 0;
      *(_QWORD *)(v19 + 40) = 0;
      *(_BYTE *)(v19 + 48) = 0;
      return swift_willThrow();
    }
  }
  else if ((a6 & 1) != 0)
  {
    result = static JSON5Scanner.stringValue(from:fullSource:)(a1, a2, a3, a4);
    if (v7)
      return result;
  }
  else
  {
    result = static JSONScanner.stringValue(from:fullSource:)(a1, a2, a3, a4);
    if (v7)
      return result;
  }
  *a7 = result;
  a7[1] = v13;
  return result;
}

uint64_t specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(uint64_t a1, uint64_t a2, unsigned __int8 a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v14;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t inited;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  _QWORD *v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;

  v10 = v8;
  v43 = *MEMORY[0x1E0C80C00];
  v39 = a5;
  v40 = a6;
  v41 = a7;
  v42 = a8;
  v14 = a3 >> 5;
  if (v14 == 1)
  {
    MEMORY[0x1E0C80A78](a1);
    v30 = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 24);
    v32 = v31;
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v30 + 40));
    specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)((_QWORD *)(v30 + 16), (_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:), a1, v32, &v38);
    os_unfair_lock_unlock((os_unfair_lock_t)(v30 + 40));
    swift_release();
    result = swift_release();
    if (!v9)
      return v38;
  }
  else
  {
    if (v14 == 5 && !(a2 | a1) && a3 == 160)
    {
      v19 = type metadata accessor for DecodingError();
      swift_allocError();
      v21 = v20;
      *v20 = MEMORY[0x1E0DEB418];
      v22 = v42;
      if (v42 == 255)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        v24 = v40;
        v23 = v41;
        v25 = v39;
        outlined copy of _CodingKey(v39, v40, v41, v42);
        outlined copy of _CodingKey(v39, v40, v41, v42);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_18205C850;
        *(_QWORD *)(inited + 56) = &type metadata for _CodingKey;
        *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        v27 = swift_allocObject();
        *(_QWORD *)(inited + 32) = v27;
        *(_QWORD *)(v27 + 16) = v25;
        *(_QWORD *)(v27 + 24) = v24;
        *(_QWORD *)(v27 + 32) = v23;
        *(_BYTE *)(v27 + 40) = v22;
        specialized Array.append<A>(contentsOf:)(inited);
        outlined consume of _CodingKey?(v25, v24, v23, v22);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      _StringGuts.grow(_:)(55);
      v35._object = (void *)0x800000018230EA40;
      v35._countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v35);
      v36._countAndFlagsBits = 7630409;
      v36._object = (void *)0xE300000000000000;
      String.append(_:)(v36);
      v37._countAndFlagsBits = 0xD00000000000001CLL;
      v37._object = (void *)0x800000018230EA60;
      String.append(_:)(v37);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x1E0DEC460], v19);
    }
    else
    {
      if (a8 == -1)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        outlined copy of _CodingKey(a5, a6, a7, a8);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        v28 = swift_initStackObject();
        *(_OWORD *)(v28 + 16) = xmmword_18205C850;
        *(_QWORD *)(v28 + 56) = &type metadata for _CodingKey;
        *(_QWORD *)(v28 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        v29 = swift_allocObject();
        *(_QWORD *)(v28 + 32) = v29;
        *(_QWORD *)(v29 + 16) = a5;
        *(_QWORD *)(v29 + 24) = a6;
        *(_QWORD *)(v29 + 32) = a7;
        *(_BYTE *)(v29 + 40) = a8;
        specialized Array.append<A>(contentsOf:)(v28);
      }
      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E0DEB418], a3, v34);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v14;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t inited;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  _QWORD *v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;

  v10 = v8;
  v43 = *MEMORY[0x1E0C80C00];
  v39 = a5;
  v40 = a6;
  v41 = a7;
  v42 = a8;
  v14 = a3 >> 5;
  if (v14 == 1)
  {
    MEMORY[0x1E0C80A78](a1);
    v30 = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 24);
    v32 = v31;
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v30 + 40));
    specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)((_QWORD *)(v30 + 16), (_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:), a1, v32, &v38);
    os_unfair_lock_unlock((os_unfair_lock_t)(v30 + 40));
    swift_release();
    result = swift_release();
    if (!v9)
      return v38;
  }
  else
  {
    if (v14 == 5 && !(a2 | a1) && a3 == 160)
    {
      v19 = type metadata accessor for DecodingError();
      swift_allocError();
      v21 = v20;
      *v20 = MEMORY[0x1E0DEBB98];
      v22 = v42;
      if (v42 == 255)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        v24 = v40;
        v23 = v41;
        v25 = v39;
        outlined copy of _CodingKey(v39, v40, v41, v42);
        outlined copy of _CodingKey(v39, v40, v41, v42);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_18205C850;
        *(_QWORD *)(inited + 56) = &type metadata for _CodingKey;
        *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        v27 = swift_allocObject();
        *(_QWORD *)(inited + 32) = v27;
        *(_QWORD *)(v27 + 16) = v25;
        *(_QWORD *)(v27 + 24) = v24;
        *(_QWORD *)(v27 + 32) = v23;
        *(_BYTE *)(v27 + 40) = v22;
        specialized Array.append<A>(contentsOf:)(inited);
        outlined consume of _CodingKey?(v25, v24, v23, v22);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      _StringGuts.grow(_:)(55);
      v35._object = (void *)0x800000018230EA40;
      v35._countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v35);
      v36._countAndFlagsBits = 1953384789;
      v36._object = (void *)0xE400000000000000;
      String.append(_:)(v36);
      v37._countAndFlagsBits = 0xD00000000000001CLL;
      v37._object = (void *)0x800000018230EA60;
      String.append(_:)(v37);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x1E0DEC460], v19);
    }
    else
    {
      if (a8 == -1)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        outlined copy of _CodingKey(a5, a6, a7, a8);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        v28 = swift_initStackObject();
        *(_OWORD *)(v28 + 16) = xmmword_18205C850;
        *(_QWORD *)(v28 + 56) = &type metadata for _CodingKey;
        *(_QWORD *)(v28 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        v29 = swift_allocObject();
        *(_QWORD *)(v28 + 32) = v29;
        *(_QWORD *)(v29 + 16) = a5;
        *(_QWORD *)(v29 + 24) = a6;
        *(_QWORD *)(v29 + 32) = a7;
        *(_BYTE *)(v29 + 40) = a8;
        specialized Array.append<A>(contentsOf:)(v28);
      }
      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E0DEBB98], a3, v34);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v14;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t inited;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  _QWORD *v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  unsigned __int8 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;

  v10 = v8;
  v43 = *MEMORY[0x1E0C80C00];
  v39 = a5;
  v40 = a6;
  v41 = a7;
  v42 = a8;
  v14 = a3 >> 5;
  if (v14 == 1)
  {
    MEMORY[0x1E0C80A78](a1);
    v30 = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 24);
    v32 = v31;
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v30 + 40));
    specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)((_QWORD *)(v30 + 16), (_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:), a1, v32, &v38);
    os_unfair_lock_unlock((os_unfair_lock_t)(v30 + 40));
    swift_release();
    result = swift_release();
    if (!v9)
      return v38;
  }
  else
  {
    if (v14 == 5 && !(a2 | a1) && a3 == 160)
    {
      v19 = type metadata accessor for DecodingError();
      swift_allocError();
      v21 = v20;
      *v20 = MEMORY[0x1E0DEDE70];
      v22 = v42;
      if (v42 == 255)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        v24 = v40;
        v23 = v41;
        v25 = v39;
        outlined copy of _CodingKey(v39, v40, v41, v42);
        outlined copy of _CodingKey(v39, v40, v41, v42);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_18205C850;
        *(_QWORD *)(inited + 56) = &type metadata for _CodingKey;
        *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        v27 = swift_allocObject();
        *(_QWORD *)(inited + 32) = v27;
        *(_QWORD *)(v27 + 16) = v25;
        *(_QWORD *)(v27 + 24) = v24;
        *(_QWORD *)(v27 + 32) = v23;
        *(_BYTE *)(v27 + 40) = v22;
        specialized Array.append<A>(contentsOf:)(inited);
        outlined consume of _CodingKey?(v25, v24, v23, v22);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      _StringGuts.grow(_:)(55);
      v35._object = (void *)0x800000018230EA40;
      v35._countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v35);
      v36._countAndFlagsBits = 0x38746E4955;
      v36._object = (void *)0xE500000000000000;
      String.append(_:)(v36);
      v37._countAndFlagsBits = 0xD00000000000001CLL;
      v37._object = (void *)0x800000018230EA60;
      String.append(_:)(v37);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x1E0DEC460], v19);
    }
    else
    {
      if (a8 == -1)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        outlined copy of _CodingKey(a5, a6, a7, a8);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        v28 = swift_initStackObject();
        *(_OWORD *)(v28 + 16) = xmmword_18205C850;
        *(_QWORD *)(v28 + 56) = &type metadata for _CodingKey;
        *(_QWORD *)(v28 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        v29 = swift_allocObject();
        *(_QWORD *)(v28 + 32) = v29;
        *(_QWORD *)(v29 + 16) = a5;
        *(_QWORD *)(v29 + 24) = a6;
        *(_QWORD *)(v29 + 32) = a7;
        *(_BYTE *)(v29 + 40) = a8;
        specialized Array.append<A>(contentsOf:)(v28);
      }
      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E0DEDE70], a3, v34);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v14;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t inited;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  _QWORD *v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  unsigned __int16 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;

  v10 = v8;
  v43 = *MEMORY[0x1E0C80C00];
  v39 = a5;
  v40 = a6;
  v41 = a7;
  v42 = a8;
  v14 = a3 >> 5;
  if (v14 == 1)
  {
    MEMORY[0x1E0C80A78](a1);
    v30 = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 24);
    v32 = v31;
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v30 + 40));
    specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)((_QWORD *)(v30 + 16), (_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:), a1, v32, &v38);
    os_unfair_lock_unlock((os_unfair_lock_t)(v30 + 40));
    swift_release();
    result = swift_release();
    if (!v9)
      return v38;
  }
  else
  {
    if (v14 == 5 && !(a2 | a1) && a3 == 160)
    {
      v19 = type metadata accessor for DecodingError();
      swift_allocError();
      v21 = v20;
      *v20 = MEMORY[0x1E0DEE068];
      v22 = v42;
      if (v42 == 255)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        v24 = v40;
        v23 = v41;
        v25 = v39;
        outlined copy of _CodingKey(v39, v40, v41, v42);
        outlined copy of _CodingKey(v39, v40, v41, v42);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_18205C850;
        *(_QWORD *)(inited + 56) = &type metadata for _CodingKey;
        *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        v27 = swift_allocObject();
        *(_QWORD *)(inited + 32) = v27;
        *(_QWORD *)(v27 + 16) = v25;
        *(_QWORD *)(v27 + 24) = v24;
        *(_QWORD *)(v27 + 32) = v23;
        *(_BYTE *)(v27 + 40) = v22;
        specialized Array.append<A>(contentsOf:)(inited);
        outlined consume of _CodingKey?(v25, v24, v23, v22);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      _StringGuts.grow(_:)(55);
      v35._object = (void *)0x800000018230EA40;
      v35._countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v35);
      v36._countAndFlagsBits = 0x3631746E4955;
      v36._object = (void *)0xE600000000000000;
      String.append(_:)(v36);
      v37._countAndFlagsBits = 0xD00000000000001CLL;
      v37._object = (void *)0x800000018230EA60;
      String.append(_:)(v37);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x1E0DEC460], v19);
    }
    else
    {
      if (a8 == -1)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        outlined copy of _CodingKey(a5, a6, a7, a8);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        v28 = swift_initStackObject();
        *(_OWORD *)(v28 + 16) = xmmword_18205C850;
        *(_QWORD *)(v28 + 56) = &type metadata for _CodingKey;
        *(_QWORD *)(v28 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        v29 = swift_allocObject();
        *(_QWORD *)(v28 + 32) = v29;
        *(_QWORD *)(v29 + 16) = a5;
        *(_QWORD *)(v29 + 24) = a6;
        *(_QWORD *)(v29 + 32) = a7;
        *(_BYTE *)(v29 + 40) = a8;
        specialized Array.append<A>(contentsOf:)(v28);
      }
      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E0DEE068], a3, v34);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v14;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t inited;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  _QWORD *v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  unsigned __int8 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;

  v10 = v8;
  v43 = *MEMORY[0x1E0C80C00];
  v39 = a5;
  v40 = a6;
  v41 = a7;
  v42 = a8;
  v14 = a3 >> 5;
  if (v14 == 1)
  {
    MEMORY[0x1E0C80A78](a1);
    v30 = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 24);
    v32 = v31;
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v30 + 40));
    specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)((_QWORD *)(v30 + 16), (_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:), a1, v32, &v38);
    os_unfair_lock_unlock((os_unfair_lock_t)(v30 + 40));
    swift_release();
    result = swift_release();
    if (!v9)
      return v38;
  }
  else
  {
    if (v14 == 5 && !(a2 | a1) && a3 == 160)
    {
      v19 = type metadata accessor for DecodingError();
      swift_allocError();
      v21 = v20;
      *v20 = MEMORY[0x1E0DEDA70];
      v22 = v42;
      if (v42 == 255)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        v24 = v40;
        v23 = v41;
        v25 = v39;
        outlined copy of _CodingKey(v39, v40, v41, v42);
        outlined copy of _CodingKey(v39, v40, v41, v42);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_18205C850;
        *(_QWORD *)(inited + 56) = &type metadata for _CodingKey;
        *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        v27 = swift_allocObject();
        *(_QWORD *)(inited + 32) = v27;
        *(_QWORD *)(v27 + 16) = v25;
        *(_QWORD *)(v27 + 24) = v24;
        *(_QWORD *)(v27 + 32) = v23;
        *(_BYTE *)(v27 + 40) = v22;
        specialized Array.append<A>(contentsOf:)(inited);
        outlined consume of _CodingKey?(v25, v24, v23, v22);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      _StringGuts.grow(_:)(55);
      v35._object = (void *)0x800000018230EA40;
      v35._countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v35);
      v36._countAndFlagsBits = 947154505;
      v36._object = (void *)0xE400000000000000;
      String.append(_:)(v36);
      v37._countAndFlagsBits = 0xD00000000000001CLL;
      v37._object = (void *)0x800000018230EA60;
      String.append(_:)(v37);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x1E0DEC460], v19);
    }
    else
    {
      if (a8 == -1)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        outlined copy of _CodingKey(a5, a6, a7, a8);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        v28 = swift_initStackObject();
        *(_OWORD *)(v28 + 16) = xmmword_18205C850;
        *(_QWORD *)(v28 + 56) = &type metadata for _CodingKey;
        *(_QWORD *)(v28 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        v29 = swift_allocObject();
        *(_QWORD *)(v28 + 32) = v29;
        *(_QWORD *)(v29 + 16) = a5;
        *(_QWORD *)(v29 + 24) = a6;
        *(_QWORD *)(v29 + 32) = a7;
        *(_BYTE *)(v29 + 40) = a8;
        specialized Array.append<A>(contentsOf:)(v28);
      }
      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E0DEDA70], a3, v34);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v14;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t inited;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  _QWORD *v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  unsigned __int16 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;

  v10 = v8;
  v43 = *MEMORY[0x1E0C80C00];
  v39 = a5;
  v40 = a6;
  v41 = a7;
  v42 = a8;
  v14 = a3 >> 5;
  if (v14 == 1)
  {
    MEMORY[0x1E0C80A78](a1);
    v30 = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 24);
    v32 = v31;
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v30 + 40));
    specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)((_QWORD *)(v30 + 16), (_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:), a1, v32, &v38);
    os_unfair_lock_unlock((os_unfair_lock_t)(v30 + 40));
    swift_release();
    result = swift_release();
    if (!v9)
      return v38;
  }
  else
  {
    if (v14 == 5 && !(a2 | a1) && a3 == 160)
    {
      v19 = type metadata accessor for DecodingError();
      swift_allocError();
      v21 = v20;
      *v20 = MEMORY[0x1E0DEDB58];
      v22 = v42;
      if (v42 == 255)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        v24 = v40;
        v23 = v41;
        v25 = v39;
        outlined copy of _CodingKey(v39, v40, v41, v42);
        outlined copy of _CodingKey(v39, v40, v41, v42);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_18205C850;
        *(_QWORD *)(inited + 56) = &type metadata for _CodingKey;
        *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        v27 = swift_allocObject();
        *(_QWORD *)(inited + 32) = v27;
        *(_QWORD *)(v27 + 16) = v25;
        *(_QWORD *)(v27 + 24) = v24;
        *(_QWORD *)(v27 + 32) = v23;
        *(_BYTE *)(v27 + 40) = v22;
        specialized Array.append<A>(contentsOf:)(inited);
        outlined consume of _CodingKey?(v25, v24, v23, v22);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      _StringGuts.grow(_:)(55);
      v35._object = (void *)0x800000018230EA40;
      v35._countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v35);
      v36._countAndFlagsBits = 0x3631746E49;
      v36._object = (void *)0xE500000000000000;
      String.append(_:)(v36);
      v37._countAndFlagsBits = 0xD00000000000001CLL;
      v37._object = (void *)0x800000018230EA60;
      String.append(_:)(v37);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x1E0DEC460], v19);
    }
    else
    {
      if (a8 == -1)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        outlined copy of _CodingKey(a5, a6, a7, a8);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        v28 = swift_initStackObject();
        *(_OWORD *)(v28 + 16) = xmmword_18205C850;
        *(_QWORD *)(v28 + 56) = &type metadata for _CodingKey;
        *(_QWORD *)(v28 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        v29 = swift_allocObject();
        *(_QWORD *)(v28 + 32) = v29;
        *(_QWORD *)(v29 + 16) = a5;
        *(_QWORD *)(v29 + 24) = a6;
        *(_QWORD *)(v29 + 32) = a7;
        *(_BYTE *)(v29 + 40) = a8;
        specialized Array.append<A>(contentsOf:)(v28);
      }
      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E0DEDB58], a3, v34);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v14;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t inited;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  _QWORD *v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;

  v10 = v8;
  v43 = *MEMORY[0x1E0C80C00];
  v39 = a5;
  v40 = a6;
  v41 = a7;
  v42 = a8;
  v14 = a3 >> 5;
  if (v14 == 1)
  {
    MEMORY[0x1E0C80A78](a1);
    v30 = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 24);
    v32 = v31;
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v30 + 40));
    specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)((_QWORD *)(v30 + 16), (_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:), a1, v32, &v38);
    os_unfair_lock_unlock((os_unfair_lock_t)(v30 + 40));
    swift_release();
    result = swift_release();
    if (!v9)
      return v38;
  }
  else
  {
    if (v14 == 5 && !(a2 | a1) && a3 == 160)
    {
      v19 = type metadata accessor for DecodingError();
      swift_allocError();
      v21 = v20;
      *v20 = MEMORY[0x1E0DEDBC8];
      v22 = v42;
      if (v42 == 255)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        v24 = v40;
        v23 = v41;
        v25 = v39;
        outlined copy of _CodingKey(v39, v40, v41, v42);
        outlined copy of _CodingKey(v39, v40, v41, v42);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_18205C850;
        *(_QWORD *)(inited + 56) = &type metadata for _CodingKey;
        *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        v27 = swift_allocObject();
        *(_QWORD *)(inited + 32) = v27;
        *(_QWORD *)(v27 + 16) = v25;
        *(_QWORD *)(v27 + 24) = v24;
        *(_QWORD *)(v27 + 32) = v23;
        *(_BYTE *)(v27 + 40) = v22;
        specialized Array.append<A>(contentsOf:)(inited);
        outlined consume of _CodingKey?(v25, v24, v23, v22);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      _StringGuts.grow(_:)(55);
      v35._object = (void *)0x800000018230EA40;
      v35._countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v35);
      v36._countAndFlagsBits = 0x3233746E49;
      v36._object = (void *)0xE500000000000000;
      String.append(_:)(v36);
      v37._countAndFlagsBits = 0xD00000000000001CLL;
      v37._object = (void *)0x800000018230EA60;
      String.append(_:)(v37);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x1E0DEC460], v19);
    }
    else
    {
      if (a8 == -1)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        outlined copy of _CodingKey(a5, a6, a7, a8);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        v28 = swift_initStackObject();
        *(_OWORD *)(v28 + 16) = xmmword_18205C850;
        *(_QWORD *)(v28 + 56) = &type metadata for _CodingKey;
        *(_QWORD *)(v28 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        v29 = swift_allocObject();
        *(_QWORD *)(v28 + 32) = v29;
        *(_QWORD *)(v29 + 16) = a5;
        *(_QWORD *)(v29 + 24) = a6;
        *(_QWORD *)(v29 + 32) = a7;
        *(_BYTE *)(v29 + 40) = a8;
        specialized Array.append<A>(contentsOf:)(v28);
      }
      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E0DEDBC8], a3, v34);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v14;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t inited;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  _QWORD *v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;

  v10 = v8;
  v43 = *MEMORY[0x1E0C80C00];
  v39 = a5;
  v40 = a6;
  v41 = a7;
  v42 = a8;
  v14 = a3 >> 5;
  if (v14 == 1)
  {
    MEMORY[0x1E0C80A78](a1);
    v30 = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 24);
    v32 = v31;
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v30 + 40));
    specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)((_QWORD *)(v30 + 16), (_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:), a1, v32, &v38);
    os_unfair_lock_unlock((os_unfair_lock_t)(v30 + 40));
    swift_release();
    result = swift_release();
    if (!v9)
      return v38;
  }
  else
  {
    if (v14 == 5 && !(a2 | a1) && a3 == 160)
    {
      v19 = type metadata accessor for DecodingError();
      swift_allocError();
      v21 = v20;
      *v20 = MEMORY[0x1E0DEDC60];
      v22 = v42;
      if (v42 == 255)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        v24 = v40;
        v23 = v41;
        v25 = v39;
        outlined copy of _CodingKey(v39, v40, v41, v42);
        outlined copy of _CodingKey(v39, v40, v41, v42);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_18205C850;
        *(_QWORD *)(inited + 56) = &type metadata for _CodingKey;
        *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        v27 = swift_allocObject();
        *(_QWORD *)(inited + 32) = v27;
        *(_QWORD *)(v27 + 16) = v25;
        *(_QWORD *)(v27 + 24) = v24;
        *(_QWORD *)(v27 + 32) = v23;
        *(_BYTE *)(v27 + 40) = v22;
        specialized Array.append<A>(contentsOf:)(inited);
        outlined consume of _CodingKey?(v25, v24, v23, v22);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      _StringGuts.grow(_:)(55);
      v35._object = (void *)0x800000018230EA40;
      v35._countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v35);
      v36._countAndFlagsBits = 0x3436746E49;
      v36._object = (void *)0xE500000000000000;
      String.append(_:)(v36);
      v37._countAndFlagsBits = 0xD00000000000001CLL;
      v37._object = (void *)0x800000018230EA60;
      String.append(_:)(v37);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x1E0DEC460], v19);
    }
    else
    {
      if (a8 == -1)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        outlined copy of _CodingKey(a5, a6, a7, a8);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        v28 = swift_initStackObject();
        *(_OWORD *)(v28 + 16) = xmmword_18205C850;
        *(_QWORD *)(v28 + 56) = &type metadata for _CodingKey;
        *(_QWORD *)(v28 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        v29 = swift_allocObject();
        *(_QWORD *)(v28 + 32) = v29;
        *(_QWORD *)(v29 + 16) = a5;
        *(_QWORD *)(v29 + 24) = a6;
        *(_QWORD *)(v29 + 32) = a7;
        *(_BYTE *)(v29 + 40) = a8;
        specialized Array.append<A>(contentsOf:)(v28);
      }
      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E0DEDC60], a3, v34);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v14;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t inited;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  _QWORD *v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;

  v10 = v8;
  v43 = *MEMORY[0x1E0C80C00];
  v39 = a5;
  v40 = a6;
  v41 = a7;
  v42 = a8;
  v14 = a3 >> 5;
  if (v14 == 1)
  {
    MEMORY[0x1E0C80A78](a1);
    v30 = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 24);
    v32 = v31;
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v30 + 40));
    specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)((_QWORD *)(v30 + 16), (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:), a1, v32, &v38);
    os_unfair_lock_unlock((os_unfair_lock_t)(v30 + 40));
    swift_release();
    result = swift_release();
    if (!v9)
      return v38;
  }
  else
  {
    if (v14 == 5 && !(a2 | a1) && a3 == 160)
    {
      v19 = type metadata accessor for DecodingError();
      swift_allocError();
      v21 = v20;
      *v20 = MEMORY[0x1E0DEDF68];
      v22 = v42;
      if (v42 == 255)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        v24 = v40;
        v23 = v41;
        v25 = v39;
        outlined copy of _CodingKey(v39, v40, v41, v42);
        outlined copy of _CodingKey(v39, v40, v41, v42);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_18205C850;
        *(_QWORD *)(inited + 56) = &type metadata for _CodingKey;
        *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        v27 = swift_allocObject();
        *(_QWORD *)(inited + 32) = v27;
        *(_QWORD *)(v27 + 16) = v25;
        *(_QWORD *)(v27 + 24) = v24;
        *(_QWORD *)(v27 + 32) = v23;
        *(_BYTE *)(v27 + 40) = v22;
        specialized Array.append<A>(contentsOf:)(inited);
        outlined consume of _CodingKey?(v25, v24, v23, v22);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      _StringGuts.grow(_:)(55);
      v35._object = (void *)0x800000018230EA40;
      v35._countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v35);
      v36._countAndFlagsBits = 0x383231746E49;
      v36._object = (void *)0xE600000000000000;
      String.append(_:)(v36);
      v37._countAndFlagsBits = 0xD00000000000001CLL;
      v37._object = (void *)0x800000018230EA60;
      String.append(_:)(v37);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x1E0DEC460], v19);
    }
    else
    {
      if (a8 == -1)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        outlined copy of _CodingKey(a5, a6, a7, a8);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        v28 = swift_initStackObject();
        *(_OWORD *)(v28 + 16) = xmmword_18205C850;
        *(_QWORD *)(v28 + 56) = &type metadata for _CodingKey;
        *(_QWORD *)(v28 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        v29 = swift_allocObject();
        *(_QWORD *)(v28 + 32) = v29;
        *(_QWORD *)(v29 + 16) = a5;
        *(_QWORD *)(v29 + 24) = a6;
        *(_QWORD *)(v29 + 32) = a7;
        *(_BYTE *)(v29 + 40) = a8;
        specialized Array.append<A>(contentsOf:)(v28);
      }
      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E0DEDF68], a3, v34);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v14;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t inited;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  _QWORD *v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;

  v10 = v8;
  v43 = *MEMORY[0x1E0C80C00];
  v39 = a5;
  v40 = a6;
  v41 = a7;
  v42 = a8;
  v14 = a3 >> 5;
  if (v14 == 1)
  {
    MEMORY[0x1E0C80A78](a1);
    v30 = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 24);
    v32 = v31;
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v30 + 40));
    specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)((_QWORD *)(v30 + 16), (_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:), a1, v32, &v38);
    os_unfair_lock_unlock((os_unfair_lock_t)(v30 + 40));
    swift_release();
    result = swift_release();
    if (!v9)
      return v38;
  }
  else
  {
    if (v14 == 5 && !(a2 | a1) && a3 == 160)
    {
      v19 = type metadata accessor for DecodingError();
      swift_allocError();
      v21 = v20;
      *v20 = MEMORY[0x1E0DEE0F8];
      v22 = v42;
      if (v42 == 255)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        v24 = v40;
        v23 = v41;
        v25 = v39;
        outlined copy of _CodingKey(v39, v40, v41, v42);
        outlined copy of _CodingKey(v39, v40, v41, v42);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_18205C850;
        *(_QWORD *)(inited + 56) = &type metadata for _CodingKey;
        *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        v27 = swift_allocObject();
        *(_QWORD *)(inited + 32) = v27;
        *(_QWORD *)(v27 + 16) = v25;
        *(_QWORD *)(v27 + 24) = v24;
        *(_QWORD *)(v27 + 32) = v23;
        *(_BYTE *)(v27 + 40) = v22;
        specialized Array.append<A>(contentsOf:)(inited);
        outlined consume of _CodingKey?(v25, v24, v23, v22);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      _StringGuts.grow(_:)(55);
      v35._object = (void *)0x800000018230EA40;
      v35._countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v35);
      v36._countAndFlagsBits = 0x3233746E4955;
      v36._object = (void *)0xE600000000000000;
      String.append(_:)(v36);
      v37._countAndFlagsBits = 0xD00000000000001CLL;
      v37._object = (void *)0x800000018230EA60;
      String.append(_:)(v37);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x1E0DEC460], v19);
    }
    else
    {
      if (a8 == -1)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        outlined copy of _CodingKey(a5, a6, a7, a8);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        v28 = swift_initStackObject();
        *(_OWORD *)(v28 + 16) = xmmword_18205C850;
        *(_QWORD *)(v28 + 56) = &type metadata for _CodingKey;
        *(_QWORD *)(v28 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        v29 = swift_allocObject();
        *(_QWORD *)(v28 + 32) = v29;
        *(_QWORD *)(v29 + 16) = a5;
        *(_QWORD *)(v29 + 24) = a6;
        *(_QWORD *)(v29 + 32) = a7;
        *(_BYTE *)(v29 + 40) = a8;
        specialized Array.append<A>(contentsOf:)(v28);
      }
      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E0DEE0F8], a3, v34);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v14;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t inited;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  _QWORD *v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;

  v10 = v8;
  v43 = *MEMORY[0x1E0C80C00];
  v39 = a5;
  v40 = a6;
  v41 = a7;
  v42 = a8;
  v14 = a3 >> 5;
  if (v14 == 1)
  {
    MEMORY[0x1E0C80A78](a1);
    v30 = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 24);
    v32 = v31;
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v30 + 40));
    specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)((_QWORD *)(v30 + 16), (_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:), a1, v32, &v38);
    os_unfair_lock_unlock((os_unfair_lock_t)(v30 + 40));
    swift_release();
    result = swift_release();
    if (!v9)
      return v38;
  }
  else
  {
    if (v14 == 5 && !(a2 | a1) && a3 == 160)
    {
      v19 = type metadata accessor for DecodingError();
      swift_allocError();
      v21 = v20;
      *v20 = MEMORY[0x1E0DEE190];
      v22 = v42;
      if (v42 == 255)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        v24 = v40;
        v23 = v41;
        v25 = v39;
        outlined copy of _CodingKey(v39, v40, v41, v42);
        outlined copy of _CodingKey(v39, v40, v41, v42);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_18205C850;
        *(_QWORD *)(inited + 56) = &type metadata for _CodingKey;
        *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        v27 = swift_allocObject();
        *(_QWORD *)(inited + 32) = v27;
        *(_QWORD *)(v27 + 16) = v25;
        *(_QWORD *)(v27 + 24) = v24;
        *(_QWORD *)(v27 + 32) = v23;
        *(_BYTE *)(v27 + 40) = v22;
        specialized Array.append<A>(contentsOf:)(inited);
        outlined consume of _CodingKey?(v25, v24, v23, v22);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      _StringGuts.grow(_:)(55);
      v35._object = (void *)0x800000018230EA40;
      v35._countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v35);
      v36._countAndFlagsBits = 0x3436746E4955;
      v36._object = (void *)0xE600000000000000;
      String.append(_:)(v36);
      v37._countAndFlagsBits = 0xD00000000000001CLL;
      v37._object = (void *)0x800000018230EA60;
      String.append(_:)(v37);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x1E0DEC460], v19);
    }
    else
    {
      if (a8 == -1)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        outlined copy of _CodingKey(a5, a6, a7, a8);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        v28 = swift_initStackObject();
        *(_OWORD *)(v28 + 16) = xmmword_18205C850;
        *(_QWORD *)(v28 + 56) = &type metadata for _CodingKey;
        *(_QWORD *)(v28 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        v29 = swift_allocObject();
        *(_QWORD *)(v28 + 32) = v29;
        *(_QWORD *)(v29 + 16) = a5;
        *(_QWORD *)(v29 + 24) = a6;
        *(_QWORD *)(v29 + 32) = a7;
        *(_BYTE *)(v29 + 40) = a8;
        specialized Array.append<A>(contentsOf:)(v28);
      }
      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E0DEE190], a3, v34);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v14;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t inited;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  _QWORD *v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;

  v10 = v8;
  v43 = *MEMORY[0x1E0C80C00];
  v39 = a5;
  v40 = a6;
  v41 = a7;
  v42 = a8;
  v14 = a3 >> 5;
  if (v14 == 1)
  {
    MEMORY[0x1E0C80A78](a1);
    v30 = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 24);
    v32 = v31;
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v30 + 40));
    specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)((_QWORD *)(v30 + 16), (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:), a1, v32, &v38);
    os_unfair_lock_unlock((os_unfair_lock_t)(v30 + 40));
    swift_release();
    result = swift_release();
    if (!v9)
      return v38;
  }
  else
  {
    if (v14 == 5 && !(a2 | a1) && a3 == 160)
    {
      v19 = type metadata accessor for DecodingError();
      swift_allocError();
      v21 = v20;
      *v20 = MEMORY[0x1E0DEE2B8];
      v22 = v42;
      if (v42 == 255)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        v24 = v40;
        v23 = v41;
        v25 = v39;
        outlined copy of _CodingKey(v39, v40, v41, v42);
        outlined copy of _CodingKey(v39, v40, v41, v42);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_18205C850;
        *(_QWORD *)(inited + 56) = &type metadata for _CodingKey;
        *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        v27 = swift_allocObject();
        *(_QWORD *)(inited + 32) = v27;
        *(_QWORD *)(v27 + 16) = v25;
        *(_QWORD *)(v27 + 24) = v24;
        *(_QWORD *)(v27 + 32) = v23;
        *(_BYTE *)(v27 + 40) = v22;
        specialized Array.append<A>(contentsOf:)(inited);
        outlined consume of _CodingKey?(v25, v24, v23, v22);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      _StringGuts.grow(_:)(55);
      v35._object = (void *)0x800000018230EA40;
      v35._countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v35);
      v36._countAndFlagsBits = 0x383231746E4955;
      v36._object = (void *)0xE700000000000000;
      String.append(_:)(v36);
      v37._countAndFlagsBits = 0xD00000000000001CLL;
      v37._object = (void *)0x800000018230EA60;
      String.append(_:)(v37);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x1E0DEC460], v19);
    }
    else
    {
      if (a8 == -1)
      {
        _CodingPathNode.path.getter(a4);
      }
      else
      {
        outlined copy of _CodingKey(a5, a6, a7, a8);
        _CodingPathNode.path.getter(a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        v28 = swift_initStackObject();
        *(_OWORD *)(v28 + 16) = xmmword_18205C850;
        *(_QWORD *)(v28 + 56) = &type metadata for _CodingKey;
        *(_QWORD *)(v28 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        v29 = swift_allocObject();
        *(_QWORD *)(v28 + 32) = v29;
        *(_QWORD *)(v29 + 16) = a5;
        *(_QWORD *)(v29 + 24) = a6;
        *(_QWORD *)(v29 + 32) = a7;
        *(_BYTE *)(v29 + 40) = a8;
        specialized Array.append<A>(contentsOf:)(v28);
      }
      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E0DEE2B8], a3, v34);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
  return result;
}

uint64_t specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  int v30;
  uint64_t v31;
  _QWORD *v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  char v36;
  void (*v37)(char *, uint64_t, uint64_t, __n128);
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  char v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t inited;
  uint64_t v55;
  uint64_t v56;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  Swift::String v61;
  Swift::String v62;
  Swift::String v63;
  _QWORD v64[2];
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  unint64_t v71;
  _QWORD v72[21];

  v65 = a7;
  v68 = a5;
  v67 = a4;
  *((_QWORD *)&v69 + 1) = a2;
  *(_QWORD *)&v69 = a1;
  v72[19] = *MEMORY[0x1E0C80C00];
  v9 = *v7;
  v66 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v64[0] = (char *)v64 - v13;
  v14 = type metadata accessor for Optional();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)v64 - v19;
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)v64 - v22;
  v27 = MEMORY[0x1E0C80A78](v24);
  v29 = (char *)v64 - v28;
  v30 = v26 >> 5;
  if (v30 == 1)
  {
    MEMORY[0x1E0C80A78](v25);
    v40 = v65;
    v64[-8] = a6;
    v64[-7] = v40;
    LOBYTE(v64[-6]) = v41;
    BYTE1(v64[-6]) = v42;
    v43 = v67;
    v64[-5] = MEMORY[0x1E0DEB418];
    v64[-4] = v43;
    v64[-3] = v68;
    v64[-2] = v9;
    v45 = *(_QWORD *)(*(_QWORD *)(v44 + 32) + 24);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v45 + 40));
    v46 = v64[1];
    specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)((_QWORD *)(v45 + 16), (_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:), v69, *((uint64_t *)&v69 + 1), v72);
    os_unfair_lock_unlock((os_unfair_lock_t)(v45 + 40));
    swift_release();
    result = swift_release();
    if (!v46)
      return v72[0];
  }
  else
  {
    if (v30 == 5 && v69 == 0 && v26 == 160)
    {
      v31 = type metadata accessor for DecodingError();
      swift_allocError();
      *((_QWORD *)&v69 + 1) = v32;
      *v32 = MEMORY[0x1E0DEB418];
      v33 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
      v33(v29, v68, v14);
      v33(v23, (uint64_t)v29, v14);
      v34 = v66;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v23, 1, a6) == 1)
      {
        v35 = *(void (**)(char *, uint64_t))(v15 + 8);
        v35(v23, v14);
        _CodingPathNode.path.getter(v67);
        v35(v29, v14);
      }
      else
      {
        (*(void (**)(_QWORD, char *, uint64_t))(v34 + 32))(v64[0], v23, a6);
        v53 = _CodingPathNode.path.getter(v67);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        inited = swift_initStackObject();
        *(_QWORD *)&v69 = v31;
        v55 = inited;
        *(_OWORD *)(inited + 16) = xmmword_18205C850;
        v56 = v65;
        *(_QWORD *)(inited + 56) = a6;
        *(_QWORD *)(inited + 64) = v56;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        v58 = v64[0];
        (*(void (**)(uint64_t *, _QWORD, uint64_t))(v34 + 16))(boxed_opaque_existential_1, v64[0], a6);
        v70 = v53;
        v59 = v55;
        v31 = v69;
        specialized Array.append<A>(contentsOf:)(v59);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v29, v14);
        (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v58, a6);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      v60 = *((_QWORD *)&v69 + 1);
      v70 = 0;
      v71 = 0xE000000000000000;
      _StringGuts.grow(_:)(55);
      v61._object = (void *)0x800000018230EA40;
      v61._countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v61);
      v62._countAndFlagsBits = 7630409;
      v62._object = (void *)0xE300000000000000;
      String.append(_:)(v62);
      v63._countAndFlagsBits = 0xD00000000000001CLL;
      v63._object = (void *)0x800000018230EA60;
      String.append(_:)(v63);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v31 - 8) + 104))(v60, *MEMORY[0x1E0DEC460], v31);
    }
    else
    {
      v36 = v26;
      v37 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16);
      v37(v20, v68, v14, v27);
      ((void (*)(char *, char *, uint64_t))v37)(v17, v20, v14);
      v38 = v66;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v17, 1, a6) == 1)
      {
        v39 = *(void (**)(char *, uint64_t))(v15 + 8);
        v39(v17, v14);
        _CodingPathNode.path.getter(v67);
        v39(v20, v14);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v11, v17, a6);
        v48 = _CodingPathNode.path.getter(v67);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        v49 = swift_initStackObject();
        *(_OWORD *)(v49 + 16) = xmmword_18205C850;
        v50 = v65;
        *(_QWORD *)(v49 + 56) = a6;
        *(_QWORD *)(v49 + 64) = v50;
        v51 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v49 + 32));
        (*(void (**)(uint64_t *, char *, uint64_t))(v38 + 16))(v51, v11, a6);
        v70 = v48;
        specialized Array.append<A>(contentsOf:)(v49);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
        (*(void (**)(char *, uint64_t))(v38 + 8))(v11, a6);
      }
      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E0DEB418], v36, v52);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  int v30;
  uint64_t v31;
  _QWORD *v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  char v36;
  void (*v37)(char *, uint64_t, uint64_t, __n128);
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  char v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t inited;
  uint64_t v55;
  uint64_t v56;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  Swift::String v61;
  Swift::String v62;
  Swift::String v63;
  _QWORD v64[2];
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  unint64_t v71;
  unsigned __int8 v72;
  uint64_t v73;

  v65 = a7;
  v68 = a5;
  v67 = a4;
  *((_QWORD *)&v69 + 1) = a2;
  *(_QWORD *)&v69 = a1;
  v73 = *MEMORY[0x1E0C80C00];
  v9 = *v7;
  v66 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v64[0] = (char *)v64 - v13;
  v14 = type metadata accessor for Optional();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)v64 - v19;
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)v64 - v22;
  v27 = MEMORY[0x1E0C80A78](v24);
  v29 = (char *)v64 - v28;
  v30 = v26 >> 5;
  if (v30 == 1)
  {
    MEMORY[0x1E0C80A78](v25);
    v40 = v65;
    v64[-8] = a6;
    v64[-7] = v40;
    LOBYTE(v64[-6]) = v41;
    BYTE1(v64[-6]) = v42;
    v43 = v67;
    v64[-5] = MEMORY[0x1E0DEDA70];
    v64[-4] = v43;
    v64[-3] = v68;
    v64[-2] = v9;
    v45 = *(_QWORD *)(*(_QWORD *)(v44 + 32) + 24);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v45 + 40));
    v46 = v64[1];
    specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)((_QWORD *)(v45 + 16), (_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:), v69, *((uint64_t *)&v69 + 1), &v72);
    os_unfair_lock_unlock((os_unfair_lock_t)(v45 + 40));
    swift_release();
    result = swift_release();
    if (!v46)
      return v72;
  }
  else
  {
    if (v30 == 5 && v69 == 0 && v26 == 160)
    {
      v31 = type metadata accessor for DecodingError();
      swift_allocError();
      *((_QWORD *)&v69 + 1) = v32;
      *v32 = MEMORY[0x1E0DEDA70];
      v33 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
      v33(v29, v68, v14);
      v33(v23, (uint64_t)v29, v14);
      v34 = v66;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v23, 1, a6) == 1)
      {
        v35 = *(void (**)(char *, uint64_t))(v15 + 8);
        v35(v23, v14);
        _CodingPathNode.path.getter(v67);
        v35(v29, v14);
      }
      else
      {
        (*(void (**)(_QWORD, char *, uint64_t))(v34 + 32))(v64[0], v23, a6);
        v53 = _CodingPathNode.path.getter(v67);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        inited = swift_initStackObject();
        *(_QWORD *)&v69 = v31;
        v55 = inited;
        *(_OWORD *)(inited + 16) = xmmword_18205C850;
        v56 = v65;
        *(_QWORD *)(inited + 56) = a6;
        *(_QWORD *)(inited + 64) = v56;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        v58 = v64[0];
        (*(void (**)(uint64_t *, _QWORD, uint64_t))(v34 + 16))(boxed_opaque_existential_1, v64[0], a6);
        v70 = v53;
        v59 = v55;
        v31 = v69;
        specialized Array.append<A>(contentsOf:)(v59);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v29, v14);
        (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v58, a6);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      v60 = *((_QWORD *)&v69 + 1);
      v70 = 0;
      v71 = 0xE000000000000000;
      _StringGuts.grow(_:)(55);
      v61._object = (void *)0x800000018230EA40;
      v61._countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v61);
      v62._countAndFlagsBits = 947154505;
      v62._object = (void *)0xE400000000000000;
      String.append(_:)(v62);
      v63._countAndFlagsBits = 0xD00000000000001CLL;
      v63._object = (void *)0x800000018230EA60;
      String.append(_:)(v63);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v31 - 8) + 104))(v60, *MEMORY[0x1E0DEC460], v31);
    }
    else
    {
      v36 = v26;
      v37 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16);
      v37(v20, v68, v14, v27);
      ((void (*)(char *, char *, uint64_t))v37)(v17, v20, v14);
      v38 = v66;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v17, 1, a6) == 1)
      {
        v39 = *(void (**)(char *, uint64_t))(v15 + 8);
        v39(v17, v14);
        _CodingPathNode.path.getter(v67);
        v39(v20, v14);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v11, v17, a6);
        v48 = _CodingPathNode.path.getter(v67);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        v49 = swift_initStackObject();
        *(_OWORD *)(v49 + 16) = xmmword_18205C850;
        v50 = v65;
        *(_QWORD *)(v49 + 56) = a6;
        *(_QWORD *)(v49 + 64) = v50;
        v51 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v49 + 32));
        (*(void (**)(uint64_t *, char *, uint64_t))(v38 + 16))(v51, v11, a6);
        v70 = v48;
        specialized Array.append<A>(contentsOf:)(v49);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
        (*(void (**)(char *, uint64_t))(v38 + 8))(v11, a6);
      }
      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E0DEDA70], v36, v52);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  int v30;
  uint64_t v31;
  _QWORD *v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  char v36;
  void (*v37)(char *, uint64_t, uint64_t, __n128);
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  char v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t inited;
  uint64_t v55;
  uint64_t v56;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  Swift::String v61;
  Swift::String v62;
  Swift::String v63;
  _QWORD v64[2];
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  unint64_t v71;
  unsigned __int16 v72;
  uint64_t v73;

  v65 = a7;
  v68 = a5;
  v67 = a4;
  *((_QWORD *)&v69 + 1) = a2;
  *(_QWORD *)&v69 = a1;
  v73 = *MEMORY[0x1E0C80C00];
  v9 = *v7;
  v66 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v64[0] = (char *)v64 - v13;
  v14 = type metadata accessor for Optional();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)v64 - v19;
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)v64 - v22;
  v27 = MEMORY[0x1E0C80A78](v24);
  v29 = (char *)v64 - v28;
  v30 = v26 >> 5;
  if (v30 == 1)
  {
    MEMORY[0x1E0C80A78](v25);
    v40 = v65;
    v64[-8] = a6;
    v64[-7] = v40;
    LOBYTE(v64[-6]) = v41;
    BYTE1(v64[-6]) = v42;
    v43 = v67;
    v64[-5] = MEMORY[0x1E0DEDB58];
    v64[-4] = v43;
    v64[-3] = v68;
    v64[-2] = v9;
    v45 = *(_QWORD *)(*(_QWORD *)(v44 + 32) + 24);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v45 + 40));
    v46 = v64[1];
    specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)((_QWORD *)(v45 + 16), (_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:), v69, *((uint64_t *)&v69 + 1), &v72);
    os_unfair_lock_unlock((os_unfair_lock_t)(v45 + 40));
    swift_release();
    result = swift_release();
    if (!v46)
      return v72;
  }
  else
  {
    if (v30 == 5 && v69 == 0 && v26 == 160)
    {
      v31 = type metadata accessor for DecodingError();
      swift_allocError();
      *((_QWORD *)&v69 + 1) = v32;
      *v32 = MEMORY[0x1E0DEDB58];
      v33 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
      v33(v29, v68, v14);
      v33(v23, (uint64_t)v29, v14);
      v34 = v66;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v23, 1, a6) == 1)
      {
        v35 = *(void (**)(char *, uint64_t))(v15 + 8);
        v35(v23, v14);
        _CodingPathNode.path.getter(v67);
        v35(v29, v14);
      }
      else
      {
        (*(void (**)(_QWORD, char *, uint64_t))(v34 + 32))(v64[0], v23, a6);
        v53 = _CodingPathNode.path.getter(v67);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        inited = swift_initStackObject();
        *(_QWORD *)&v69 = v31;
        v55 = inited;
        *(_OWORD *)(inited + 16) = xmmword_18205C850;
        v56 = v65;
        *(_QWORD *)(inited + 56) = a6;
        *(_QWORD *)(inited + 64) = v56;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        v58 = v64[0];
        (*(void (**)(uint64_t *, _QWORD, uint64_t))(v34 + 16))(boxed_opaque_existential_1, v64[0], a6);
        v70 = v53;
        v59 = v55;
        v31 = v69;
        specialized Array.append<A>(contentsOf:)(v59);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v29, v14);
        (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v58, a6);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      v60 = *((_QWORD *)&v69 + 1);
      v70 = 0;
      v71 = 0xE000000000000000;
      _StringGuts.grow(_:)(55);
      v61._object = (void *)0x800000018230EA40;
      v61._countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v61);
      v62._countAndFlagsBits = 0x3631746E49;
      v62._object = (void *)0xE500000000000000;
      String.append(_:)(v62);
      v63._countAndFlagsBits = 0xD00000000000001CLL;
      v63._object = (void *)0x800000018230EA60;
      String.append(_:)(v63);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v31 - 8) + 104))(v60, *MEMORY[0x1E0DEC460], v31);
    }
    else
    {
      v36 = v26;
      v37 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16);
      v37(v20, v68, v14, v27);
      ((void (*)(char *, char *, uint64_t))v37)(v17, v20, v14);
      v38 = v66;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v17, 1, a6) == 1)
      {
        v39 = *(void (**)(char *, uint64_t))(v15 + 8);
        v39(v17, v14);
        _CodingPathNode.path.getter(v67);
        v39(v20, v14);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v11, v17, a6);
        v48 = _CodingPathNode.path.getter(v67);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        v49 = swift_initStackObject();
        *(_OWORD *)(v49 + 16) = xmmword_18205C850;
        v50 = v65;
        *(_QWORD *)(v49 + 56) = a6;
        *(_QWORD *)(v49 + 64) = v50;
        v51 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v49 + 32));
        (*(void (**)(uint64_t *, char *, uint64_t))(v38 + 16))(v51, v11, a6);
        v70 = v48;
        specialized Array.append<A>(contentsOf:)(v49);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
        (*(void (**)(char *, uint64_t))(v38 + 8))(v11, a6);
      }
      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E0DEDB58], v36, v52);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  int v30;
  uint64_t v31;
  _QWORD *v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  char v36;
  void (*v37)(char *, uint64_t, uint64_t, __n128);
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  char v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t inited;
  uint64_t v55;
  uint64_t v56;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  Swift::String v61;
  Swift::String v62;
  Swift::String v63;
  _QWORD v64[2];
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  unint64_t v71;
  unsigned int v72;
  uint64_t v73;

  v65 = a7;
  v68 = a5;
  v67 = a4;
  *((_QWORD *)&v69 + 1) = a2;
  *(_QWORD *)&v69 = a1;
  v73 = *MEMORY[0x1E0C80C00];
  v9 = *v7;
  v66 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v64[0] = (char *)v64 - v13;
  v14 = type metadata accessor for Optional();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)v64 - v19;
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)v64 - v22;
  v27 = MEMORY[0x1E0C80A78](v24);
  v29 = (char *)v64 - v28;
  v30 = v26 >> 5;
  if (v30 == 1)
  {
    MEMORY[0x1E0C80A78](v25);
    v40 = v65;
    v64[-8] = a6;
    v64[-7] = v40;
    LOBYTE(v64[-6]) = v41;
    BYTE1(v64[-6]) = v42;
    v43 = v67;
    v64[-5] = MEMORY[0x1E0DEDBC8];
    v64[-4] = v43;
    v64[-3] = v68;
    v64[-2] = v9;
    v45 = *(_QWORD *)(*(_QWORD *)(v44 + 32) + 24);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v45 + 40));
    v46 = v64[1];
    specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)((_QWORD *)(v45 + 16), (_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:), v69, *((uint64_t *)&v69 + 1), &v72);
    os_unfair_lock_unlock((os_unfair_lock_t)(v45 + 40));
    swift_release();
    result = swift_release();
    if (!v46)
      return v72;
  }
  else
  {
    if (v30 == 5 && v69 == 0 && v26 == 160)
    {
      v31 = type metadata accessor for DecodingError();
      swift_allocError();
      *((_QWORD *)&v69 + 1) = v32;
      *v32 = MEMORY[0x1E0DEDBC8];
      v33 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
      v33(v29, v68, v14);
      v33(v23, (uint64_t)v29, v14);
      v34 = v66;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v23, 1, a6) == 1)
      {
        v35 = *(void (**)(char *, uint64_t))(v15 + 8);
        v35(v23, v14);
        _CodingPathNode.path.getter(v67);
        v35(v29, v14);
      }
      else
      {
        (*(void (**)(_QWORD, char *, uint64_t))(v34 + 32))(v64[0], v23, a6);
        v53 = _CodingPathNode.path.getter(v67);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        inited = swift_initStackObject();
        *(_QWORD *)&v69 = v31;
        v55 = inited;
        *(_OWORD *)(inited + 16) = xmmword_18205C850;
        v56 = v65;
        *(_QWORD *)(inited + 56) = a6;
        *(_QWORD *)(inited + 64) = v56;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        v58 = v64[0];
        (*(void (**)(uint64_t *, _QWORD, uint64_t))(v34 + 16))(boxed_opaque_existential_1, v64[0], a6);
        v70 = v53;
        v59 = v55;
        v31 = v69;
        specialized Array.append<A>(contentsOf:)(v59);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v29, v14);
        (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v58, a6);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      v60 = *((_QWORD *)&v69 + 1);
      v70 = 0;
      v71 = 0xE000000000000000;
      _StringGuts.grow(_:)(55);
      v61._object = (void *)0x800000018230EA40;
      v61._countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v61);
      v62._countAndFlagsBits = 0x3233746E49;
      v62._object = (void *)0xE500000000000000;
      String.append(_:)(v62);
      v63._countAndFlagsBits = 0xD00000000000001CLL;
      v63._object = (void *)0x800000018230EA60;
      String.append(_:)(v63);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v31 - 8) + 104))(v60, *MEMORY[0x1E0DEC460], v31);
    }
    else
    {
      v36 = v26;
      v37 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16);
      v37(v20, v68, v14, v27);
      ((void (*)(char *, char *, uint64_t))v37)(v17, v20, v14);
      v38 = v66;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v17, 1, a6) == 1)
      {
        v39 = *(void (**)(char *, uint64_t))(v15 + 8);
        v39(v17, v14);
        _CodingPathNode.path.getter(v67);
        v39(v20, v14);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v11, v17, a6);
        v48 = _CodingPathNode.path.getter(v67);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        v49 = swift_initStackObject();
        *(_OWORD *)(v49 + 16) = xmmword_18205C850;
        v50 = v65;
        *(_QWORD *)(v49 + 56) = a6;
        *(_QWORD *)(v49 + 64) = v50;
        v51 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v49 + 32));
        (*(void (**)(uint64_t *, char *, uint64_t))(v38 + 16))(v51, v11, a6);
        v70 = v48;
        specialized Array.append<A>(contentsOf:)(v49);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
        (*(void (**)(char *, uint64_t))(v38 + 8))(v11, a6);
      }
      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E0DEDBC8], v36, v52);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  int v30;
  uint64_t v31;
  _QWORD *v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  char v36;
  void (*v37)(char *, uint64_t, uint64_t, __n128);
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  char v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t inited;
  uint64_t v55;
  uint64_t v56;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  Swift::String v61;
  Swift::String v62;
  Swift::String v63;
  _QWORD v64[2];
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  unint64_t v71;
  _QWORD v72[21];

  v65 = a7;
  v68 = a5;
  v67 = a4;
  *((_QWORD *)&v69 + 1) = a2;
  *(_QWORD *)&v69 = a1;
  v72[19] = *MEMORY[0x1E0C80C00];
  v9 = *v7;
  v66 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v64[0] = (char *)v64 - v13;
  v14 = type metadata accessor for Optional();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)v64 - v19;
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)v64 - v22;
  v27 = MEMORY[0x1E0C80A78](v24);
  v29 = (char *)v64 - v28;
  v30 = v26 >> 5;
  if (v30 == 1)
  {
    MEMORY[0x1E0C80A78](v25);
    v40 = v65;
    v64[-8] = a6;
    v64[-7] = v40;
    LOBYTE(v64[-6]) = v41;
    BYTE1(v64[-6]) = v42;
    v43 = v67;
    v64[-5] = MEMORY[0x1E0DEDC60];
    v64[-4] = v43;
    v64[-3] = v68;
    v64[-2] = v9;
    v45 = *(_QWORD *)(*(_QWORD *)(v44 + 32) + 24);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v45 + 40));
    v46 = v64[1];
    specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)((_QWORD *)(v45 + 16), (_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:), v69, *((uint64_t *)&v69 + 1), v72);
    os_unfair_lock_unlock((os_unfair_lock_t)(v45 + 40));
    swift_release();
    result = swift_release();
    if (!v46)
      return v72[0];
  }
  else
  {
    if (v30 == 5 && v69 == 0 && v26 == 160)
    {
      v31 = type metadata accessor for DecodingError();
      swift_allocError();
      *((_QWORD *)&v69 + 1) = v32;
      *v32 = MEMORY[0x1E0DEDC60];
      v33 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
      v33(v29, v68, v14);
      v33(v23, (uint64_t)v29, v14);
      v34 = v66;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v23, 1, a6) == 1)
      {
        v35 = *(void (**)(char *, uint64_t))(v15 + 8);
        v35(v23, v14);
        _CodingPathNode.path.getter(v67);
        v35(v29, v14);
      }
      else
      {
        (*(void (**)(_QWORD, char *, uint64_t))(v34 + 32))(v64[0], v23, a6);
        v53 = _CodingPathNode.path.getter(v67);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        inited = swift_initStackObject();
        *(_QWORD *)&v69 = v31;
        v55 = inited;
        *(_OWORD *)(inited + 16) = xmmword_18205C850;
        v56 = v65;
        *(_QWORD *)(inited + 56) = a6;
        *(_QWORD *)(inited + 64) = v56;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        v58 = v64[0];
        (*(void (**)(uint64_t *, _QWORD, uint64_t))(v34 + 16))(boxed_opaque_existential_1, v64[0], a6);
        v70 = v53;
        v59 = v55;
        v31 = v69;
        specialized Array.append<A>(contentsOf:)(v59);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v29, v14);
        (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v58, a6);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      v60 = *((_QWORD *)&v69 + 1);
      v70 = 0;
      v71 = 0xE000000000000000;
      _StringGuts.grow(_:)(55);
      v61._object = (void *)0x800000018230EA40;
      v61._countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v61);
      v62._countAndFlagsBits = 0x3436746E49;
      v62._object = (void *)0xE500000000000000;
      String.append(_:)(v62);
      v63._countAndFlagsBits = 0xD00000000000001CLL;
      v63._object = (void *)0x800000018230EA60;
      String.append(_:)(v63);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v31 - 8) + 104))(v60, *MEMORY[0x1E0DEC460], v31);
    }
    else
    {
      v36 = v26;
      v37 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16);
      v37(v20, v68, v14, v27);
      ((void (*)(char *, char *, uint64_t))v37)(v17, v20, v14);
      v38 = v66;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v17, 1, a6) == 1)
      {
        v39 = *(void (**)(char *, uint64_t))(v15 + 8);
        v39(v17, v14);
        _CodingPathNode.path.getter(v67);
        v39(v20, v14);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v11, v17, a6);
        v48 = _CodingPathNode.path.getter(v67);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        v49 = swift_initStackObject();
        *(_OWORD *)(v49 + 16) = xmmword_18205C850;
        v50 = v65;
        *(_QWORD *)(v49 + 56) = a6;
        *(_QWORD *)(v49 + 64) = v50;
        v51 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v49 + 32));
        (*(void (**)(uint64_t *, char *, uint64_t))(v38 + 16))(v51, v11, a6);
        v70 = v48;
        specialized Array.append<A>(contentsOf:)(v49);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
        (*(void (**)(char *, uint64_t))(v38 + 8))(v11, a6);
      }
      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E0DEDC60], v36, v52);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  int v30;
  uint64_t v31;
  _QWORD *v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  char v36;
  void (*v37)(char *, uint64_t, uint64_t, __n128);
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  char v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t inited;
  uint64_t v55;
  uint64_t v56;
  uint64_t *boxed_opaque_existential_1;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  Swift::String v61;
  Swift::String v62;
  Swift::String v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  unint64_t v73;
  _QWORD v74[21];

  v67 = a7;
  v70 = a5;
  v69 = a4;
  *((_QWORD *)&v71 + 1) = a2;
  *(_QWORD *)&v71 = a1;
  v74[20] = *MEMORY[0x1E0C80C00];
  v9 = *v7;
  v68 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v65 = (char *)&v64 - v13;
  v14 = type metadata accessor for Optional();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v64 - v19;
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v64 - v22;
  v27 = MEMORY[0x1E0C80A78](v24);
  v29 = (char *)&v64 - v28;
  v30 = v26 >> 5;
  if (v30 == 1)
  {
    MEMORY[0x1E0C80A78](v25);
    v40 = v67;
    *(&v64 - 8) = a6;
    *(&v64 - 7) = v40;
    *((_BYTE *)&v64 - 48) = v41;
    *((_BYTE *)&v64 - 47) = v42;
    v43 = v69;
    *(&v64 - 5) = MEMORY[0x1E0DEDF68];
    *(&v64 - 4) = v43;
    *(&v64 - 3) = v70;
    *(&v64 - 2) = v9;
    v45 = *(_QWORD *)(*(_QWORD *)(v44 + 32) + 24);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v45 + 40));
    v46 = v66;
    specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)((_QWORD *)(v45 + 16), (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:), v71, *((uint64_t *)&v71 + 1), v74);
    os_unfair_lock_unlock((os_unfair_lock_t)(v45 + 40));
    swift_release();
    result = swift_release();
    if (!v46)
      return v74[0];
  }
  else
  {
    if (v30 == 5 && v71 == 0 && v26 == 160)
    {
      v31 = type metadata accessor for DecodingError();
      swift_allocError();
      *((_QWORD *)&v71 + 1) = v32;
      *v32 = MEMORY[0x1E0DEDF68];
      v33 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
      v33(v29, v70, v14);
      v33(v23, (uint64_t)v29, v14);
      v34 = v68;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v23, 1, a6) == 1)
      {
        v35 = *(void (**)(char *, uint64_t))(v15 + 8);
        v35(v23, v14);
        _CodingPathNode.path.getter(v69);
        v35(v29, v14);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v65, v23, a6);
        v53 = _CodingPathNode.path.getter(v69);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        inited = swift_initStackObject();
        *(_QWORD *)&v71 = v31;
        v55 = inited;
        *(_OWORD *)(inited + 16) = xmmword_18205C850;
        v56 = v67;
        *(_QWORD *)(inited + 56) = a6;
        *(_QWORD *)(inited + 64) = v56;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        v58 = v65;
        (*(void (**)(uint64_t *, char *, uint64_t))(v34 + 16))(boxed_opaque_existential_1, v65, a6);
        v72 = v53;
        v59 = v55;
        v31 = v71;
        specialized Array.append<A>(contentsOf:)(v59);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v29, v14);
        (*(void (**)(char *, uint64_t))(v34 + 8))(v58, a6);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      v60 = *((_QWORD *)&v71 + 1);
      v72 = 0;
      v73 = 0xE000000000000000;
      _StringGuts.grow(_:)(55);
      v61._object = (void *)0x800000018230EA40;
      v61._countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v61);
      v62._countAndFlagsBits = 0x383231746E49;
      v62._object = (void *)0xE600000000000000;
      String.append(_:)(v62);
      v63._countAndFlagsBits = 0xD00000000000001CLL;
      v63._object = (void *)0x800000018230EA60;
      String.append(_:)(v63);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v31 - 8) + 104))(v60, *MEMORY[0x1E0DEC460], v31);
    }
    else
    {
      v36 = v26;
      v37 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16);
      v37(v20, v70, v14, v27);
      ((void (*)(char *, char *, uint64_t))v37)(v17, v20, v14);
      v38 = v68;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v17, 1, a6) == 1)
      {
        v39 = *(void (**)(char *, uint64_t))(v15 + 8);
        v39(v17, v14);
        _CodingPathNode.path.getter(v69);
        v39(v20, v14);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v11, v17, a6);
        v48 = _CodingPathNode.path.getter(v69);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        v49 = swift_initStackObject();
        *(_OWORD *)(v49 + 16) = xmmword_18205C850;
        v50 = v67;
        *(_QWORD *)(v49 + 56) = a6;
        *(_QWORD *)(v49 + 64) = v50;
        v51 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v49 + 32));
        (*(void (**)(uint64_t *, char *, uint64_t))(v38 + 16))(v51, v11, a6);
        v72 = v48;
        specialized Array.append<A>(contentsOf:)(v49);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
        (*(void (**)(char *, uint64_t))(v38 + 8))(v11, a6);
      }
      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E0DEDF68], v36, v52);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  int v30;
  uint64_t v31;
  _QWORD *v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  char v36;
  void (*v37)(char *, uint64_t, uint64_t, __n128);
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  char v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t inited;
  uint64_t v55;
  uint64_t v56;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  Swift::String v61;
  Swift::String v62;
  Swift::String v63;
  _QWORD v64[2];
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  unint64_t v71;
  _QWORD v72[21];

  v65 = a7;
  v68 = a5;
  v67 = a4;
  *((_QWORD *)&v69 + 1) = a2;
  *(_QWORD *)&v69 = a1;
  v72[19] = *MEMORY[0x1E0C80C00];
  v9 = *v7;
  v66 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v64[0] = (char *)v64 - v13;
  v14 = type metadata accessor for Optional();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)v64 - v19;
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)v64 - v22;
  v27 = MEMORY[0x1E0C80A78](v24);
  v29 = (char *)v64 - v28;
  v30 = v26 >> 5;
  if (v30 == 1)
  {
    MEMORY[0x1E0C80A78](v25);
    v40 = v65;
    v64[-8] = a6;
    v64[-7] = v40;
    LOBYTE(v64[-6]) = v41;
    BYTE1(v64[-6]) = v42;
    v43 = v67;
    v64[-5] = MEMORY[0x1E0DEBB98];
    v64[-4] = v43;
    v64[-3] = v68;
    v64[-2] = v9;
    v45 = *(_QWORD *)(*(_QWORD *)(v44 + 32) + 24);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v45 + 40));
    v46 = v64[1];
    specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)((_QWORD *)(v45 + 16), (_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:), v69, *((uint64_t *)&v69 + 1), v72);
    os_unfair_lock_unlock((os_unfair_lock_t)(v45 + 40));
    swift_release();
    result = swift_release();
    if (!v46)
      return v72[0];
  }
  else
  {
    if (v30 == 5 && v69 == 0 && v26 == 160)
    {
      v31 = type metadata accessor for DecodingError();
      swift_allocError();
      *((_QWORD *)&v69 + 1) = v32;
      *v32 = MEMORY[0x1E0DEBB98];
      v33 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
      v33(v29, v68, v14);
      v33(v23, (uint64_t)v29, v14);
      v34 = v66;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v23, 1, a6) == 1)
      {
        v35 = *(void (**)(char *, uint64_t))(v15 + 8);
        v35(v23, v14);
        _CodingPathNode.path.getter(v67);
        v35(v29, v14);
      }
      else
      {
        (*(void (**)(_QWORD, char *, uint64_t))(v34 + 32))(v64[0], v23, a6);
        v53 = _CodingPathNode.path.getter(v67);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        inited = swift_initStackObject();
        *(_QWORD *)&v69 = v31;
        v55 = inited;
        *(_OWORD *)(inited + 16) = xmmword_18205C850;
        v56 = v65;
        *(_QWORD *)(inited + 56) = a6;
        *(_QWORD *)(inited + 64) = v56;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        v58 = v64[0];
        (*(void (**)(uint64_t *, _QWORD, uint64_t))(v34 + 16))(boxed_opaque_existential_1, v64[0], a6);
        v70 = v53;
        v59 = v55;
        v31 = v69;
        specialized Array.append<A>(contentsOf:)(v59);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v29, v14);
        (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v58, a6);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      v60 = *((_QWORD *)&v69 + 1);
      v70 = 0;
      v71 = 0xE000000000000000;
      _StringGuts.grow(_:)(55);
      v61._object = (void *)0x800000018230EA40;
      v61._countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v61);
      v62._countAndFlagsBits = 1953384789;
      v62._object = (void *)0xE400000000000000;
      String.append(_:)(v62);
      v63._countAndFlagsBits = 0xD00000000000001CLL;
      v63._object = (void *)0x800000018230EA60;
      String.append(_:)(v63);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v31 - 8) + 104))(v60, *MEMORY[0x1E0DEC460], v31);
    }
    else
    {
      v36 = v26;
      v37 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16);
      v37(v20, v68, v14, v27);
      ((void (*)(char *, char *, uint64_t))v37)(v17, v20, v14);
      v38 = v66;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v17, 1, a6) == 1)
      {
        v39 = *(void (**)(char *, uint64_t))(v15 + 8);
        v39(v17, v14);
        _CodingPathNode.path.getter(v67);
        v39(v20, v14);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v11, v17, a6);
        v48 = _CodingPathNode.path.getter(v67);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        v49 = swift_initStackObject();
        *(_OWORD *)(v49 + 16) = xmmword_18205C850;
        v50 = v65;
        *(_QWORD *)(v49 + 56) = a6;
        *(_QWORD *)(v49 + 64) = v50;
        v51 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v49 + 32));
        (*(void (**)(uint64_t *, char *, uint64_t))(v38 + 16))(v51, v11, a6);
        v70 = v48;
        specialized Array.append<A>(contentsOf:)(v49);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
        (*(void (**)(char *, uint64_t))(v38 + 8))(v11, a6);
      }
      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E0DEBB98], v36, v52);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  int v30;
  uint64_t v31;
  _QWORD *v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  char v36;
  void (*v37)(char *, uint64_t, uint64_t, __n128);
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  char v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t inited;
  uint64_t v55;
  uint64_t v56;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  Swift::String v61;
  Swift::String v62;
  Swift::String v63;
  _QWORD v64[2];
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  unint64_t v71;
  unsigned __int8 v72;
  uint64_t v73;

  v65 = a7;
  v68 = a5;
  v67 = a4;
  *((_QWORD *)&v69 + 1) = a2;
  *(_QWORD *)&v69 = a1;
  v73 = *MEMORY[0x1E0C80C00];
  v9 = *v7;
  v66 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v64[0] = (char *)v64 - v13;
  v14 = type metadata accessor for Optional();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)v64 - v19;
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)v64 - v22;
  v27 = MEMORY[0x1E0C80A78](v24);
  v29 = (char *)v64 - v28;
  v30 = v26 >> 5;
  if (v30 == 1)
  {
    MEMORY[0x1E0C80A78](v25);
    v40 = v65;
    v64[-8] = a6;
    v64[-7] = v40;
    LOBYTE(v64[-6]) = v41;
    BYTE1(v64[-6]) = v42;
    v43 = v67;
    v64[-5] = MEMORY[0x1E0DEDE70];
    v64[-4] = v43;
    v64[-3] = v68;
    v64[-2] = v9;
    v45 = *(_QWORD *)(*(_QWORD *)(v44 + 32) + 24);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v45 + 40));
    v46 = v64[1];
    specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)((_QWORD *)(v45 + 16), (_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:), v69, *((uint64_t *)&v69 + 1), &v72);
    os_unfair_lock_unlock((os_unfair_lock_t)(v45 + 40));
    swift_release();
    result = swift_release();
    if (!v46)
      return v72;
  }
  else
  {
    if (v30 == 5 && v69 == 0 && v26 == 160)
    {
      v31 = type metadata accessor for DecodingError();
      swift_allocError();
      *((_QWORD *)&v69 + 1) = v32;
      *v32 = MEMORY[0x1E0DEDE70];
      v33 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
      v33(v29, v68, v14);
      v33(v23, (uint64_t)v29, v14);
      v34 = v66;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v23, 1, a6) == 1)
      {
        v35 = *(void (**)(char *, uint64_t))(v15 + 8);
        v35(v23, v14);
        _CodingPathNode.path.getter(v67);
        v35(v29, v14);
      }
      else
      {
        (*(void (**)(_QWORD, char *, uint64_t))(v34 + 32))(v64[0], v23, a6);
        v53 = _CodingPathNode.path.getter(v67);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        inited = swift_initStackObject();
        *(_QWORD *)&v69 = v31;
        v55 = inited;
        *(_OWORD *)(inited + 16) = xmmword_18205C850;
        v56 = v65;
        *(_QWORD *)(inited + 56) = a6;
        *(_QWORD *)(inited + 64) = v56;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        v58 = v64[0];
        (*(void (**)(uint64_t *, _QWORD, uint64_t))(v34 + 16))(boxed_opaque_existential_1, v64[0], a6);
        v70 = v53;
        v59 = v55;
        v31 = v69;
        specialized Array.append<A>(contentsOf:)(v59);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v29, v14);
        (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v58, a6);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      v60 = *((_QWORD *)&v69 + 1);
      v70 = 0;
      v71 = 0xE000000000000000;
      _StringGuts.grow(_:)(55);
      v61._object = (void *)0x800000018230EA40;
      v61._countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v61);
      v62._countAndFlagsBits = 0x38746E4955;
      v62._object = (void *)0xE500000000000000;
      String.append(_:)(v62);
      v63._countAndFlagsBits = 0xD00000000000001CLL;
      v63._object = (void *)0x800000018230EA60;
      String.append(_:)(v63);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v31 - 8) + 104))(v60, *MEMORY[0x1E0DEC460], v31);
    }
    else
    {
      v36 = v26;
      v37 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16);
      v37(v20, v68, v14, v27);
      ((void (*)(char *, char *, uint64_t))v37)(v17, v20, v14);
      v38 = v66;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v17, 1, a6) == 1)
      {
        v39 = *(void (**)(char *, uint64_t))(v15 + 8);
        v39(v17, v14);
        _CodingPathNode.path.getter(v67);
        v39(v20, v14);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v11, v17, a6);
        v48 = _CodingPathNode.path.getter(v67);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        v49 = swift_initStackObject();
        *(_OWORD *)(v49 + 16) = xmmword_18205C850;
        v50 = v65;
        *(_QWORD *)(v49 + 56) = a6;
        *(_QWORD *)(v49 + 64) = v50;
        v51 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v49 + 32));
        (*(void (**)(uint64_t *, char *, uint64_t))(v38 + 16))(v51, v11, a6);
        v70 = v48;
        specialized Array.append<A>(contentsOf:)(v49);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
        (*(void (**)(char *, uint64_t))(v38 + 8))(v11, a6);
      }
      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E0DEDE70], v36, v52);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  int v30;
  uint64_t v31;
  _QWORD *v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  char v36;
  void (*v37)(char *, uint64_t, uint64_t, __n128);
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  char v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t inited;
  uint64_t v55;
  uint64_t v56;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  Swift::String v61;
  Swift::String v62;
  Swift::String v63;
  _QWORD v64[2];
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  unint64_t v71;
  unsigned __int16 v72;
  uint64_t v73;

  v65 = a7;
  v68 = a5;
  v67 = a4;
  *((_QWORD *)&v69 + 1) = a2;
  *(_QWORD *)&v69 = a1;
  v73 = *MEMORY[0x1E0C80C00];
  v9 = *v7;
  v66 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v64[0] = (char *)v64 - v13;
  v14 = type metadata accessor for Optional();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)v64 - v19;
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)v64 - v22;
  v27 = MEMORY[0x1E0C80A78](v24);
  v29 = (char *)v64 - v28;
  v30 = v26 >> 5;
  if (v30 == 1)
  {
    MEMORY[0x1E0C80A78](v25);
    v40 = v65;
    v64[-8] = a6;
    v64[-7] = v40;
    LOBYTE(v64[-6]) = v41;
    BYTE1(v64[-6]) = v42;
    v43 = v67;
    v64[-5] = MEMORY[0x1E0DEE068];
    v64[-4] = v43;
    v64[-3] = v68;
    v64[-2] = v9;
    v45 = *(_QWORD *)(*(_QWORD *)(v44 + 32) + 24);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v45 + 40));
    v46 = v64[1];
    specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)((_QWORD *)(v45 + 16), (_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:), v69, *((uint64_t *)&v69 + 1), &v72);
    os_unfair_lock_unlock((os_unfair_lock_t)(v45 + 40));
    swift_release();
    result = swift_release();
    if (!v46)
      return v72;
  }
  else
  {
    if (v30 == 5 && v69 == 0 && v26 == 160)
    {
      v31 = type metadata accessor for DecodingError();
      swift_allocError();
      *((_QWORD *)&v69 + 1) = v32;
      *v32 = MEMORY[0x1E0DEE068];
      v33 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
      v33(v29, v68, v14);
      v33(v23, (uint64_t)v29, v14);
      v34 = v66;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v23, 1, a6) == 1)
      {
        v35 = *(void (**)(char *, uint64_t))(v15 + 8);
        v35(v23, v14);
        _CodingPathNode.path.getter(v67);
        v35(v29, v14);
      }
      else
      {
        (*(void (**)(_QWORD, char *, uint64_t))(v34 + 32))(v64[0], v23, a6);
        v53 = _CodingPathNode.path.getter(v67);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        inited = swift_initStackObject();
        *(_QWORD *)&v69 = v31;
        v55 = inited;
        *(_OWORD *)(inited + 16) = xmmword_18205C850;
        v56 = v65;
        *(_QWORD *)(inited + 56) = a6;
        *(_QWORD *)(inited + 64) = v56;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        v58 = v64[0];
        (*(void (**)(uint64_t *, _QWORD, uint64_t))(v34 + 16))(boxed_opaque_existential_1, v64[0], a6);
        v70 = v53;
        v59 = v55;
        v31 = v69;
        specialized Array.append<A>(contentsOf:)(v59);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v29, v14);
        (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v58, a6);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      v60 = *((_QWORD *)&v69 + 1);
      v70 = 0;
      v71 = 0xE000000000000000;
      _StringGuts.grow(_:)(55);
      v61._object = (void *)0x800000018230EA40;
      v61._countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v61);
      v62._countAndFlagsBits = 0x3631746E4955;
      v62._object = (void *)0xE600000000000000;
      String.append(_:)(v62);
      v63._countAndFlagsBits = 0xD00000000000001CLL;
      v63._object = (void *)0x800000018230EA60;
      String.append(_:)(v63);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v31 - 8) + 104))(v60, *MEMORY[0x1E0DEC460], v31);
    }
    else
    {
      v36 = v26;
      v37 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16);
      v37(v20, v68, v14, v27);
      ((void (*)(char *, char *, uint64_t))v37)(v17, v20, v14);
      v38 = v66;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v17, 1, a6) == 1)
      {
        v39 = *(void (**)(char *, uint64_t))(v15 + 8);
        v39(v17, v14);
        _CodingPathNode.path.getter(v67);
        v39(v20, v14);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v11, v17, a6);
        v48 = _CodingPathNode.path.getter(v67);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        v49 = swift_initStackObject();
        *(_OWORD *)(v49 + 16) = xmmword_18205C850;
        v50 = v65;
        *(_QWORD *)(v49 + 56) = a6;
        *(_QWORD *)(v49 + 64) = v50;
        v51 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v49 + 32));
        (*(void (**)(uint64_t *, char *, uint64_t))(v38 + 16))(v51, v11, a6);
        v70 = v48;
        specialized Array.append<A>(contentsOf:)(v49);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
        (*(void (**)(char *, uint64_t))(v38 + 8))(v11, a6);
      }
      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E0DEE068], v36, v52);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  int v30;
  uint64_t v31;
  _QWORD *v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  char v36;
  void (*v37)(char *, uint64_t, uint64_t, __n128);
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  char v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t inited;
  uint64_t v55;
  uint64_t v56;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  Swift::String v61;
  Swift::String v62;
  Swift::String v63;
  _QWORD v64[2];
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  unint64_t v71;
  unsigned int v72;
  uint64_t v73;

  v65 = a7;
  v68 = a5;
  v67 = a4;
  *((_QWORD *)&v69 + 1) = a2;
  *(_QWORD *)&v69 = a1;
  v73 = *MEMORY[0x1E0C80C00];
  v9 = *v7;
  v66 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v64[0] = (char *)v64 - v13;
  v14 = type metadata accessor for Optional();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)v64 - v19;
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)v64 - v22;
  v27 = MEMORY[0x1E0C80A78](v24);
  v29 = (char *)v64 - v28;
  v30 = v26 >> 5;
  if (v30 == 1)
  {
    MEMORY[0x1E0C80A78](v25);
    v40 = v65;
    v64[-8] = a6;
    v64[-7] = v40;
    LOBYTE(v64[-6]) = v41;
    BYTE1(v64[-6]) = v42;
    v43 = v67;
    v64[-5] = MEMORY[0x1E0DEE0F8];
    v64[-4] = v43;
    v64[-3] = v68;
    v64[-2] = v9;
    v45 = *(_QWORD *)(*(_QWORD *)(v44 + 32) + 24);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v45 + 40));
    v46 = v64[1];
    specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)((_QWORD *)(v45 + 16), (_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:), v69, *((uint64_t *)&v69 + 1), &v72);
    os_unfair_lock_unlock((os_unfair_lock_t)(v45 + 40));
    swift_release();
    result = swift_release();
    if (!v46)
      return v72;
  }
  else
  {
    if (v30 == 5 && v69 == 0 && v26 == 160)
    {
      v31 = type metadata accessor for DecodingError();
      swift_allocError();
      *((_QWORD *)&v69 + 1) = v32;
      *v32 = MEMORY[0x1E0DEE0F8];
      v33 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
      v33(v29, v68, v14);
      v33(v23, (uint64_t)v29, v14);
      v34 = v66;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v23, 1, a6) == 1)
      {
        v35 = *(void (**)(char *, uint64_t))(v15 + 8);
        v35(v23, v14);
        _CodingPathNode.path.getter(v67);
        v35(v29, v14);
      }
      else
      {
        (*(void (**)(_QWORD, char *, uint64_t))(v34 + 32))(v64[0], v23, a6);
        v53 = _CodingPathNode.path.getter(v67);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        inited = swift_initStackObject();
        *(_QWORD *)&v69 = v31;
        v55 = inited;
        *(_OWORD *)(inited + 16) = xmmword_18205C850;
        v56 = v65;
        *(_QWORD *)(inited + 56) = a6;
        *(_QWORD *)(inited + 64) = v56;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        v58 = v64[0];
        (*(void (**)(uint64_t *, _QWORD, uint64_t))(v34 + 16))(boxed_opaque_existential_1, v64[0], a6);
        v70 = v53;
        v59 = v55;
        v31 = v69;
        specialized Array.append<A>(contentsOf:)(v59);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v29, v14);
        (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v58, a6);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      v60 = *((_QWORD *)&v69 + 1);
      v70 = 0;
      v71 = 0xE000000000000000;
      _StringGuts.grow(_:)(55);
      v61._object = (void *)0x800000018230EA40;
      v61._countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v61);
      v62._countAndFlagsBits = 0x3233746E4955;
      v62._object = (void *)0xE600000000000000;
      String.append(_:)(v62);
      v63._countAndFlagsBits = 0xD00000000000001CLL;
      v63._object = (void *)0x800000018230EA60;
      String.append(_:)(v63);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v31 - 8) + 104))(v60, *MEMORY[0x1E0DEC460], v31);
    }
    else
    {
      v36 = v26;
      v37 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16);
      v37(v20, v68, v14, v27);
      ((void (*)(char *, char *, uint64_t))v37)(v17, v20, v14);
      v38 = v66;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v17, 1, a6) == 1)
      {
        v39 = *(void (**)(char *, uint64_t))(v15 + 8);
        v39(v17, v14);
        _CodingPathNode.path.getter(v67);
        v39(v20, v14);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v11, v17, a6);
        v48 = _CodingPathNode.path.getter(v67);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        v49 = swift_initStackObject();
        *(_OWORD *)(v49 + 16) = xmmword_18205C850;
        v50 = v65;
        *(_QWORD *)(v49 + 56) = a6;
        *(_QWORD *)(v49 + 64) = v50;
        v51 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v49 + 32));
        (*(void (**)(uint64_t *, char *, uint64_t))(v38 + 16))(v51, v11, a6);
        v70 = v48;
        specialized Array.append<A>(contentsOf:)(v49);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
        (*(void (**)(char *, uint64_t))(v38 + 8))(v11, a6);
      }
      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E0DEE0F8], v36, v52);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  int v30;
  uint64_t v31;
  _QWORD *v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  char v36;
  void (*v37)(char *, uint64_t, uint64_t, __n128);
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  char v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t inited;
  uint64_t v55;
  uint64_t v56;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  Swift::String v61;
  Swift::String v62;
  Swift::String v63;
  _QWORD v64[2];
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  unint64_t v71;
  _QWORD v72[21];

  v65 = a7;
  v68 = a5;
  v67 = a4;
  *((_QWORD *)&v69 + 1) = a2;
  *(_QWORD *)&v69 = a1;
  v72[19] = *MEMORY[0x1E0C80C00];
  v9 = *v7;
  v66 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v64[0] = (char *)v64 - v13;
  v14 = type metadata accessor for Optional();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)v64 - v19;
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)v64 - v22;
  v27 = MEMORY[0x1E0C80A78](v24);
  v29 = (char *)v64 - v28;
  v30 = v26 >> 5;
  if (v30 == 1)
  {
    MEMORY[0x1E0C80A78](v25);
    v40 = v65;
    v64[-8] = a6;
    v64[-7] = v40;
    LOBYTE(v64[-6]) = v41;
    BYTE1(v64[-6]) = v42;
    v43 = v67;
    v64[-5] = MEMORY[0x1E0DEE190];
    v64[-4] = v43;
    v64[-3] = v68;
    v64[-2] = v9;
    v45 = *(_QWORD *)(*(_QWORD *)(v44 + 32) + 24);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v45 + 40));
    v46 = v64[1];
    specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)((_QWORD *)(v45 + 16), (_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:), v69, *((uint64_t *)&v69 + 1), v72);
    os_unfair_lock_unlock((os_unfair_lock_t)(v45 + 40));
    swift_release();
    result = swift_release();
    if (!v46)
      return v72[0];
  }
  else
  {
    if (v30 == 5 && v69 == 0 && v26 == 160)
    {
      v31 = type metadata accessor for DecodingError();
      swift_allocError();
      *((_QWORD *)&v69 + 1) = v32;
      *v32 = MEMORY[0x1E0DEE190];
      v33 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
      v33(v29, v68, v14);
      v33(v23, (uint64_t)v29, v14);
      v34 = v66;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v23, 1, a6) == 1)
      {
        v35 = *(void (**)(char *, uint64_t))(v15 + 8);
        v35(v23, v14);
        _CodingPathNode.path.getter(v67);
        v35(v29, v14);
      }
      else
      {
        (*(void (**)(_QWORD, char *, uint64_t))(v34 + 32))(v64[0], v23, a6);
        v53 = _CodingPathNode.path.getter(v67);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        inited = swift_initStackObject();
        *(_QWORD *)&v69 = v31;
        v55 = inited;
        *(_OWORD *)(inited + 16) = xmmword_18205C850;
        v56 = v65;
        *(_QWORD *)(inited + 56) = a6;
        *(_QWORD *)(inited + 64) = v56;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        v58 = v64[0];
        (*(void (**)(uint64_t *, _QWORD, uint64_t))(v34 + 16))(boxed_opaque_existential_1, v64[0], a6);
        v70 = v53;
        v59 = v55;
        v31 = v69;
        specialized Array.append<A>(contentsOf:)(v59);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v29, v14);
        (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v58, a6);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      v60 = *((_QWORD *)&v69 + 1);
      v70 = 0;
      v71 = 0xE000000000000000;
      _StringGuts.grow(_:)(55);
      v61._object = (void *)0x800000018230EA40;
      v61._countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v61);
      v62._countAndFlagsBits = 0x3436746E4955;
      v62._object = (void *)0xE600000000000000;
      String.append(_:)(v62);
      v63._countAndFlagsBits = 0xD00000000000001CLL;
      v63._object = (void *)0x800000018230EA60;
      String.append(_:)(v63);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v31 - 8) + 104))(v60, *MEMORY[0x1E0DEC460], v31);
    }
    else
    {
      v36 = v26;
      v37 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16);
      v37(v20, v68, v14, v27);
      ((void (*)(char *, char *, uint64_t))v37)(v17, v20, v14);
      v38 = v66;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v17, 1, a6) == 1)
      {
        v39 = *(void (**)(char *, uint64_t))(v15 + 8);
        v39(v17, v14);
        _CodingPathNode.path.getter(v67);
        v39(v20, v14);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v11, v17, a6);
        v48 = _CodingPathNode.path.getter(v67);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        v49 = swift_initStackObject();
        *(_OWORD *)(v49 + 16) = xmmword_18205C850;
        v50 = v65;
        *(_QWORD *)(v49 + 56) = a6;
        *(_QWORD *)(v49 + 64) = v50;
        v51 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v49 + 32));
        (*(void (**)(uint64_t *, char *, uint64_t))(v38 + 16))(v51, v11, a6);
        v70 = v48;
        specialized Array.append<A>(contentsOf:)(v49);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
        (*(void (**)(char *, uint64_t))(v38 + 8))(v11, a6);
      }
      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E0DEE190], v36, v52);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  int v30;
  uint64_t v31;
  _QWORD *v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  char v36;
  void (*v37)(char *, uint64_t, uint64_t, __n128);
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  char v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t inited;
  uint64_t v55;
  uint64_t v56;
  uint64_t *boxed_opaque_existential_1;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  Swift::String v61;
  Swift::String v62;
  Swift::String v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  unint64_t v73;
  _QWORD v74[21];

  v67 = a7;
  v70 = a5;
  v69 = a4;
  *((_QWORD *)&v71 + 1) = a2;
  *(_QWORD *)&v71 = a1;
  v74[20] = *MEMORY[0x1E0C80C00];
  v9 = *v7;
  v68 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v65 = (char *)&v64 - v13;
  v14 = type metadata accessor for Optional();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v64 - v19;
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v64 - v22;
  v27 = MEMORY[0x1E0C80A78](v24);
  v29 = (char *)&v64 - v28;
  v30 = v26 >> 5;
  if (v30 == 1)
  {
    MEMORY[0x1E0C80A78](v25);
    v40 = v67;
    *(&v64 - 8) = a6;
    *(&v64 - 7) = v40;
    *((_BYTE *)&v64 - 48) = v41;
    *((_BYTE *)&v64 - 47) = v42;
    v43 = v69;
    *(&v64 - 5) = MEMORY[0x1E0DEE2B8];
    *(&v64 - 4) = v43;
    *(&v64 - 3) = v70;
    *(&v64 - 2) = v9;
    v45 = *(_QWORD *)(*(_QWORD *)(v44 + 32) + 24);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v45 + 40));
    v46 = v66;
    specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)((_QWORD *)(v45 + 16), (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:), v71, *((uint64_t *)&v71 + 1), v74);
    os_unfair_lock_unlock((os_unfair_lock_t)(v45 + 40));
    swift_release();
    result = swift_release();
    if (!v46)
      return v74[0];
  }
  else
  {
    if (v30 == 5 && v71 == 0 && v26 == 160)
    {
      v31 = type metadata accessor for DecodingError();
      swift_allocError();
      *((_QWORD *)&v71 + 1) = v32;
      *v32 = MEMORY[0x1E0DEE2B8];
      v33 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
      v33(v29, v70, v14);
      v33(v23, (uint64_t)v29, v14);
      v34 = v68;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v23, 1, a6) == 1)
      {
        v35 = *(void (**)(char *, uint64_t))(v15 + 8);
        v35(v23, v14);
        _CodingPathNode.path.getter(v69);
        v35(v29, v14);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v65, v23, a6);
        v53 = _CodingPathNode.path.getter(v69);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        inited = swift_initStackObject();
        *(_QWORD *)&v71 = v31;
        v55 = inited;
        *(_OWORD *)(inited + 16) = xmmword_18205C850;
        v56 = v67;
        *(_QWORD *)(inited + 56) = a6;
        *(_QWORD *)(inited + 64) = v56;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        v58 = v65;
        (*(void (**)(uint64_t *, char *, uint64_t))(v34 + 16))(boxed_opaque_existential_1, v65, a6);
        v72 = v53;
        v59 = v55;
        v31 = v71;
        specialized Array.append<A>(contentsOf:)(v59);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v29, v14);
        (*(void (**)(char *, uint64_t))(v34 + 8))(v58, a6);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      v60 = *((_QWORD *)&v71 + 1);
      v72 = 0;
      v73 = 0xE000000000000000;
      _StringGuts.grow(_:)(55);
      v61._object = (void *)0x800000018230EA40;
      v61._countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v61);
      v62._countAndFlagsBits = 0x383231746E4955;
      v62._object = (void *)0xE700000000000000;
      String.append(_:)(v62);
      v63._countAndFlagsBits = 0xD00000000000001CLL;
      v63._object = (void *)0x800000018230EA60;
      String.append(_:)(v63);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v31 - 8) + 104))(v60, *MEMORY[0x1E0DEC460], v31);
    }
    else
    {
      v36 = v26;
      v37 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16);
      v37(v20, v70, v14, v27);
      ((void (*)(char *, char *, uint64_t))v37)(v17, v20, v14);
      v38 = v68;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v17, 1, a6) == 1)
      {
        v39 = *(void (**)(char *, uint64_t))(v15 + 8);
        v39(v17, v14);
        _CodingPathNode.path.getter(v69);
        v39(v20, v14);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v11, v17, a6);
        v48 = _CodingPathNode.path.getter(v69);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        v49 = swift_initStackObject();
        *(_OWORD *)(v49 + 16) = xmmword_18205C850;
        v50 = v67;
        *(_QWORD *)(v49 + 56) = a6;
        *(_QWORD *)(v49 + 64) = v50;
        v51 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v49 + 32));
        (*(void (**)(uint64_t *, char *, uint64_t))(v38 + 16))(v51, v11, a6);
        v72 = v48;
        specialized Array.append<A>(contentsOf:)(v49);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
        (*(void (**)(char *, uint64_t))(v38 + 8))(v11, a6);
      }
      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E0DEE2B8], v36, v52);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
  return result;
}

uint64_t specialized FixedWidthInteger.init(_:)(unint64_t a1, unint64_t a2, unsigned int a3)
{
  unsigned __int16 v3;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int isNegative_getter;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  unsigned __int8 v21;
  int v22;
  unint64_t i;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  int v33;
  Swift::String v34;
  Swift::String v35;
  int v36;
  _QWORD v37[2];
  unsigned int v38;

  v3 = a3;
  v5 = a1;
  v37[0] = a1;
  v6 = HIDWORD(a1);
  v7 = HIWORD(a1);
  v8 = a2 >> 16;
  v37[1] = a2;
  v9 = HIDWORD(a2);
  v10 = HIWORD(a2);
  v11 = HIWORD(a3);
  v38 = a3;
  isNegative_getter = _So9NSDecimala__isNegative_getter(v37);
  LODWORD(v37[0]) = v5;
  WORD2(v37[0]) = v6;
  HIWORD(v37[0]) = v7;
  LOWORD(v37[1]) = a2;
  WORD1(v37[1]) = v8;
  WORD2(v37[1]) = v9;
  HIWORD(v37[1]) = v10;
  LOWORD(v38) = v3;
  HIWORD(v38) = v11;
  if (!_So9NSDecimala__length_getter(v37) && isNegative_getter)
    goto LABEL_21;
  v36 = isNegative_getter;
  v13 = (unsigned __int16)a2;
  LODWORD(v37[0]) = v5;
  v14 = WORD1(a2);
  WORD2(v37[0]) = v6;
  v15 = WORD2(a2);
  v16 = v3;
  HIWORD(v37[0]) = v7;
  LOWORD(v37[1]) = v13;
  WORD1(v37[1]) = v14;
  WORD2(v37[1]) = v15;
  HIWORD(v37[1]) = v10;
  LOWORD(v38) = v3;
  HIWORD(v38) = v11;
  v17 = _So9NSDecimala__length_getter(v37);
  if (!v17)
    goto LABEL_50;
  v18 = 0;
  v19 = v17 - 1;
  if (v17 != 1)
  {
    while (2)
    {
      v20 = v7;
      switch(v19)
      {
        case 1:
          goto LABEL_15;
        case 2:
          v20 = v13;
          if (HIWORD(v18))
            goto LABEL_21;
          goto LABEL_16;
        case 3:
          v20 = v14;
          if (HIWORD(v18))
            goto LABEL_21;
          goto LABEL_16;
        case 4:
          v20 = v15;
          if (HIWORD(v18))
            goto LABEL_21;
          goto LABEL_16;
        case 5:
          v20 = v10;
          if (HIWORD(v18))
            goto LABEL_21;
          goto LABEL_16;
        case 6:
          v20 = v16;
LABEL_15:
          if (!HIWORD(v18))
            goto LABEL_16;
          goto LABEL_21;
        case 7:
          v20 = v11;
          if (HIWORD(v18))
            goto LABEL_21;
LABEL_16:
          v18 = v20 | (v18 << 16);
          if (!--v19)
            break;
          continue;
        default:
          goto LABEL_53;
      }
      break;
    }
  }
  if (HIWORD(v18))
  {
LABEL_21:
    v21 = 0;
    v22 = 1;
  }
  else
  {
    for (i = (unsigned __int16)v6 | (v18 << 16); ; i = 0)
    {
      LODWORD(v37[0]) = v5;
      WORD2(v37[0]) = v6;
      HIWORD(v37[0]) = v7;
      LOWORD(v37[1]) = v13;
      WORD1(v37[1]) = v14;
      WORD2(v37[1]) = v15;
      HIWORD(v37[1]) = v10;
      LOWORD(v38) = v16;
      HIWORD(v38) = v11;
      if ((_So9NSDecimala__exponent_getter((char *)v37) & 0x80000000) == 0)
        break;
      LODWORD(v37[0]) = v5;
      WORD2(v37[0]) = v6;
      HIWORD(v37[0]) = v7;
      LOWORD(v37[1]) = v13;
      WORD1(v37[1]) = v14;
      WORD2(v37[1]) = v15;
      HIWORD(v37[1]) = v10;
      LOWORD(v38) = v16;
      HIWORD(v38) = v11;
      v29 = _So9NSDecimala__exponent_getter((char *)v37);
      if (v29 > 0)
        goto LABEL_52;
      v26 = v36;
      if (!v29)
        goto LABEL_40;
      v30 = -v29 & ~(-v29 >> 31);
      v31 = ~v29;
      while (v30 > v31)
      {
        i /= 0xAuLL;
        if (__CFADD__(v29++, 1))
          goto LABEL_40;
      }
      __break(1u);
LABEL_50:
      ;
    }
    LODWORD(v37[0]) = v5;
    WORD2(v37[0]) = v6;
    HIWORD(v37[0]) = v7;
    LOWORD(v37[1]) = v13;
    WORD1(v37[1]) = v14;
    WORD2(v37[1]) = v15;
    HIWORD(v37[1]) = v10;
    LOWORD(v38) = v16;
    HIWORD(v38) = v11;
    v25 = _So9NSDecimala__exponent_getter((char *)v37);
    if (v25 < 0)
    {
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      v37[0] = 0;
      v37[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(30);
      swift_bridgeObjectRelease();
      strcpy((char *)v37, "Invalid index ");
      HIBYTE(v37[1]) = -18;
      v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v34);
      swift_bridgeObjectRelease();
      v35._countAndFlagsBits = 0x616D5F20726F6620;
      v35._object = (void *)0xEE0061737369746ELL;
      String.append(_:)(v35);
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x181E2C090);
    }
    v26 = v36;
    if (v25)
    {
      if (!is_mul_ok(i, 0xAuLL))
        goto LABEL_21;
      i *= 10;
      v27 = v25 - 1;
      if (v25 != 1)
      {
        if (!is_mul_ok(i, 0xAuLL))
          goto LABEL_21;
        i *= 10;
        while (--v27)
        {
          v21 = 0;
          v28 = (i * (unsigned __int128)0xAuLL) >> 64;
          i *= 10;
          v22 = 1;
          if (v28)
            return v21 | (v22 << 8);
        }
      }
    }
LABEL_40:
    v22 = i > 0x7F;
    if (i < 0x80)
      v33 = -(int)i;
    else
      LOBYTE(v33) = 0;
    if (i <= 0x7F)
      v21 = i;
    else
      v21 = 0;
    if (v26)
    {
      v21 = v33;
      v22 = i >= 0x80;
    }
  }
  return v21 | (v22 << 8);
}

{
  unsigned __int16 v3;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int isNegative_getter;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  unsigned __int16 v21;
  int v22;
  unint64_t i;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  int v33;
  Swift::String v34;
  Swift::String v35;
  int v36;
  _QWORD v37[2];
  unsigned int v38;

  v3 = a3;
  v5 = a1;
  v37[0] = a1;
  v6 = HIDWORD(a1);
  v7 = HIWORD(a1);
  v8 = a2 >> 16;
  v37[1] = a2;
  v9 = HIDWORD(a2);
  v10 = HIWORD(a2);
  v11 = HIWORD(a3);
  v38 = a3;
  isNegative_getter = _So9NSDecimala__isNegative_getter(v37);
  LODWORD(v37[0]) = v5;
  WORD2(v37[0]) = v6;
  HIWORD(v37[0]) = v7;
  LOWORD(v37[1]) = a2;
  WORD1(v37[1]) = v8;
  WORD2(v37[1]) = v9;
  HIWORD(v37[1]) = v10;
  LOWORD(v38) = v3;
  HIWORD(v38) = v11;
  if (!_So9NSDecimala__length_getter(v37) && isNegative_getter)
    goto LABEL_21;
  v36 = isNegative_getter;
  v13 = (unsigned __int16)a2;
  LODWORD(v37[0]) = v5;
  v14 = WORD1(a2);
  WORD2(v37[0]) = v6;
  v15 = WORD2(a2);
  v16 = v3;
  HIWORD(v37[0]) = v7;
  LOWORD(v37[1]) = v13;
  WORD1(v37[1]) = v14;
  WORD2(v37[1]) = v15;
  HIWORD(v37[1]) = v10;
  LOWORD(v38) = v3;
  HIWORD(v38) = v11;
  v17 = _So9NSDecimala__length_getter(v37);
  if (!v17)
    goto LABEL_50;
  v18 = 0;
  v19 = v17 - 1;
  if (v17 != 1)
  {
    while (2)
    {
      v20 = v7;
      switch(v19)
      {
        case 1:
          goto LABEL_15;
        case 2:
          v20 = v13;
          if (HIWORD(v18))
            goto LABEL_21;
          goto LABEL_16;
        case 3:
          v20 = v14;
          if (HIWORD(v18))
            goto LABEL_21;
          goto LABEL_16;
        case 4:
          v20 = v15;
          if (HIWORD(v18))
            goto LABEL_21;
          goto LABEL_16;
        case 5:
          v20 = v10;
          if (HIWORD(v18))
            goto LABEL_21;
          goto LABEL_16;
        case 6:
          v20 = v16;
LABEL_15:
          if (!HIWORD(v18))
            goto LABEL_16;
          goto LABEL_21;
        case 7:
          v20 = v11;
          if (HIWORD(v18))
            goto LABEL_21;
LABEL_16:
          v18 = v20 | (v18 << 16);
          if (!--v19)
            break;
          continue;
        default:
          goto LABEL_53;
      }
      break;
    }
  }
  if (HIWORD(v18))
  {
LABEL_21:
    v21 = 0;
    v22 = 1;
  }
  else
  {
    for (i = (unsigned __int16)v6 | (v18 << 16); ; i = 0)
    {
      LODWORD(v37[0]) = v5;
      WORD2(v37[0]) = v6;
      HIWORD(v37[0]) = v7;
      LOWORD(v37[1]) = v13;
      WORD1(v37[1]) = v14;
      WORD2(v37[1]) = v15;
      HIWORD(v37[1]) = v10;
      LOWORD(v38) = v16;
      HIWORD(v38) = v11;
      if ((_So9NSDecimala__exponent_getter((char *)v37) & 0x80000000) == 0)
        break;
      LODWORD(v37[0]) = v5;
      WORD2(v37[0]) = v6;
      HIWORD(v37[0]) = v7;
      LOWORD(v37[1]) = v13;
      WORD1(v37[1]) = v14;
      WORD2(v37[1]) = v15;
      HIWORD(v37[1]) = v10;
      LOWORD(v38) = v16;
      HIWORD(v38) = v11;
      v29 = _So9NSDecimala__exponent_getter((char *)v37);
      if (v29 > 0)
        goto LABEL_52;
      v26 = v36;
      if (!v29)
        goto LABEL_40;
      v30 = -v29 & ~(-v29 >> 31);
      v31 = ~v29;
      while (v30 > v31)
      {
        i /= 0xAuLL;
        if (__CFADD__(v29++, 1))
          goto LABEL_40;
      }
      __break(1u);
LABEL_50:
      ;
    }
    LODWORD(v37[0]) = v5;
    WORD2(v37[0]) = v6;
    HIWORD(v37[0]) = v7;
    LOWORD(v37[1]) = v13;
    WORD1(v37[1]) = v14;
    WORD2(v37[1]) = v15;
    HIWORD(v37[1]) = v10;
    LOWORD(v38) = v16;
    HIWORD(v38) = v11;
    v25 = _So9NSDecimala__exponent_getter((char *)v37);
    if (v25 < 0)
    {
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      v37[0] = 0;
      v37[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(30);
      swift_bridgeObjectRelease();
      strcpy((char *)v37, "Invalid index ");
      HIBYTE(v37[1]) = -18;
      v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v34);
      swift_bridgeObjectRelease();
      v35._countAndFlagsBits = 0x616D5F20726F6620;
      v35._object = (void *)0xEE0061737369746ELL;
      String.append(_:)(v35);
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x181E2C4C4);
    }
    v26 = v36;
    if (v25)
    {
      if (!is_mul_ok(i, 0xAuLL))
        goto LABEL_21;
      i *= 10;
      v27 = v25 - 1;
      if (v25 != 1)
      {
        if (!is_mul_ok(i, 0xAuLL))
          goto LABEL_21;
        i *= 10;
        while (--v27)
        {
          v21 = 0;
          v28 = (i * (unsigned __int128)0xAuLL) >> 64;
          i *= 10;
          v22 = 1;
          if (v28)
            return v21 | (v22 << 16);
        }
      }
    }
LABEL_40:
    v22 = (i & 0xFFFFFFFFFFFF8000) != 0;
    if (i < 0x8000)
      v33 = -(int)i;
    else
      LOWORD(v33) = 0;
    if (i >> 15)
      v21 = 0;
    else
      v21 = i;
    if (v26)
    {
      v21 = v33;
      v22 = i >= 0x8000;
    }
  }
  return v21 | (v22 << 16);
}

{
  unint64_t i;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 v10;
  int v11;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  Swift::String v26;
  Swift::String v27;
  _QWORD v28[2];
  unsigned int v29;

  LOWORD(i) = a3;
  v4 = a2;
  v5 = a1;
  v28[0] = a1;
  v6 = HIDWORD(a1);
  v7 = HIWORD(a1);
  v28[1] = a2;
  v8 = HIWORD(a2);
  v9 = HIWORD(a3);
  v29 = a3;
  if (_So9NSDecimala__isNegative_getter(v28))
    goto LABEL_2;
  v13 = (unsigned __int16)v4;
  LODWORD(v28[0]) = v5;
  v14 = WORD1(v4);
  WORD2(v28[0]) = v6;
  HIWORD(v28[0]) = v7;
  LODWORD(v28[1]) = v4;
  WORD2(v28[1]) = WORD2(v4);
  HIWORD(v28[1]) = v8;
  LOWORD(v29) = i;
  HIWORD(v29) = v9;
  v15 = _So9NSDecimala__length_getter(v28);
  if (!v15)
    goto LABEL_37;
  v16 = 0;
  v17 = v15 - 1;
  if (v15 != 1)
  {
    while (2)
    {
      v18 = v7;
      switch(v17)
      {
        case 1:
          goto LABEL_13;
        case 2:
          v18 = v13;
          goto LABEL_13;
        case 3:
          v18 = v14;
          goto LABEL_13;
        case 4:
          v18 = WORD2(v4);
          goto LABEL_13;
        case 5:
          v18 = v8;
          goto LABEL_13;
        case 6:
          v18 = (unsigned __int16)i;
          goto LABEL_13;
        case 7:
          v18 = v9;
LABEL_13:
          if (HIWORD(v16))
            goto LABEL_2;
          v16 = v18 | (v16 << 16);
          if (!--v17)
            break;
          continue;
        default:
          goto LABEL_40;
      }
      break;
    }
  }
  if (HIWORD(v16))
  {
LABEL_2:
    v10 = 0;
    v11 = 1;
  }
  else
  {
    LOWORD(v4) = i;
    for (i = (unsigned __int16)v6 | (v16 << 16); ; i = 0)
    {
      LODWORD(v28[0]) = v5;
      WORD2(v28[0]) = v6;
      HIWORD(v28[0]) = v7;
      LOWORD(v28[1]) = v13;
      WORD1(v28[1]) = v14;
      WORD2(v28[1]) = WORD2(v4);
      HIWORD(v28[1]) = v8;
      LOWORD(v29) = v4;
      HIWORD(v29) = v9;
      if ((_So9NSDecimala__exponent_getter((char *)v28) & 0x80000000) == 0)
        break;
      LODWORD(v28[0]) = v5;
      WORD2(v28[0]) = v6;
      HIWORD(v28[0]) = v7;
      LOWORD(v28[1]) = v13;
      WORD1(v28[1]) = v14;
      WORD2(v28[1]) = WORD2(v4);
      HIWORD(v28[1]) = v8;
      LOWORD(v29) = v4;
      HIWORD(v29) = v9;
      v22 = _So9NSDecimala__exponent_getter((char *)v28);
      if (v22 > 0)
        goto LABEL_39;
      if (!v22)
        goto LABEL_33;
      v23 = -v22 & ~(-v22 >> 31);
      v24 = ~v22;
      while (v23 > v24)
      {
        i /= 0xAuLL;
        if (__CFADD__(v22++, 1))
          goto LABEL_33;
      }
      __break(1u);
LABEL_37:
      LOWORD(v4) = i;
    }
    LODWORD(v28[0]) = v5;
    WORD2(v28[0]) = v6;
    HIWORD(v28[0]) = v7;
    LOWORD(v28[1]) = v13;
    WORD1(v28[1]) = v14;
    WORD2(v28[1]) = WORD2(v4);
    HIWORD(v28[1]) = v8;
    LOWORD(v29) = v4;
    HIWORD(v29) = v9;
    v19 = _So9NSDecimala__exponent_getter((char *)v28);
    if (v19 < 0)
    {
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      v28[0] = 0;
      v28[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(30);
      swift_bridgeObjectRelease();
      strcpy((char *)v28, "Invalid index ");
      HIBYTE(v28[1]) = -18;
      v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      v27._countAndFlagsBits = 0x616D5F20726F6620;
      v27._object = (void *)0xEE0061737369746ELL;
      String.append(_:)(v27);
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x181E2D4D0);
    }
    if (v19)
    {
      if (!is_mul_ok(i, 0xAuLL))
        goto LABEL_2;
      i *= 10;
      v20 = v19 - 1;
      if (v19 != 1)
      {
        if (!is_mul_ok(i, 0xAuLL))
          goto LABEL_2;
        i *= 10;
        while (--v20)
        {
          v10 = 0;
          v21 = (i * (unsigned __int128)0xAuLL) >> 64;
          i *= 10;
          v11 = 1;
          if (v21)
            return v10 | (v11 << 8);
        }
      }
    }
LABEL_33:
    v11 = i > 0xFF;
    if (i <= 0xFF)
      v10 = i;
    else
      v10 = 0;
  }
  return v10 | (v11 << 8);
}

{
  unint64_t i;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  Swift::String v26;
  Swift::String v27;
  _QWORD v28[2];
  unsigned int v29;

  LOWORD(i) = a3;
  v4 = a2;
  v5 = a1;
  v28[0] = a1;
  v6 = HIDWORD(a1);
  v7 = HIWORD(a1);
  v28[1] = a2;
  v8 = HIWORD(a2);
  v9 = HIWORD(a3);
  v29 = a3;
  if (_So9NSDecimala__isNegative_getter(v28))
    goto LABEL_2;
  v13 = (unsigned __int16)v4;
  LODWORD(v28[0]) = v5;
  v14 = WORD1(v4);
  WORD2(v28[0]) = v6;
  HIWORD(v28[0]) = v7;
  LODWORD(v28[1]) = v4;
  WORD2(v28[1]) = WORD2(v4);
  HIWORD(v28[1]) = v8;
  LOWORD(v29) = i;
  HIWORD(v29) = v9;
  v15 = _So9NSDecimala__length_getter(v28);
  if (!v15)
    goto LABEL_37;
  v16 = 0;
  v17 = v15 - 1;
  if (v15 != 1)
  {
    while (2)
    {
      v18 = v7;
      switch(v17)
      {
        case 1:
          goto LABEL_13;
        case 2:
          v18 = v13;
          goto LABEL_13;
        case 3:
          v18 = v14;
          goto LABEL_13;
        case 4:
          v18 = WORD2(v4);
          goto LABEL_13;
        case 5:
          v18 = v8;
          goto LABEL_13;
        case 6:
          v18 = (unsigned __int16)i;
          goto LABEL_13;
        case 7:
          v18 = v9;
LABEL_13:
          if (HIWORD(v16))
            goto LABEL_2;
          v16 = v18 | (v16 << 16);
          if (!--v17)
            break;
          continue;
        default:
          goto LABEL_40;
      }
      break;
    }
  }
  if (HIWORD(v16))
  {
LABEL_2:
    v10 = 0;
    v11 = 1;
  }
  else
  {
    LOWORD(v4) = i;
    for (i = (unsigned __int16)v6 | (v16 << 16); ; i = 0)
    {
      LODWORD(v28[0]) = v5;
      WORD2(v28[0]) = v6;
      HIWORD(v28[0]) = v7;
      LOWORD(v28[1]) = v13;
      WORD1(v28[1]) = v14;
      WORD2(v28[1]) = WORD2(v4);
      HIWORD(v28[1]) = v8;
      LOWORD(v29) = v4;
      HIWORD(v29) = v9;
      if ((_So9NSDecimala__exponent_getter((char *)v28) & 0x80000000) == 0)
        break;
      LODWORD(v28[0]) = v5;
      WORD2(v28[0]) = v6;
      HIWORD(v28[0]) = v7;
      LOWORD(v28[1]) = v13;
      WORD1(v28[1]) = v14;
      WORD2(v28[1]) = WORD2(v4);
      HIWORD(v28[1]) = v8;
      LOWORD(v29) = v4;
      HIWORD(v29) = v9;
      v22 = _So9NSDecimala__exponent_getter((char *)v28);
      if (v22 > 0)
        goto LABEL_39;
      if (!v22)
        goto LABEL_33;
      v23 = -v22 & ~(-v22 >> 31);
      v24 = ~v22;
      while (v23 > v24)
      {
        i /= 0xAuLL;
        if (__CFADD__(v22++, 1))
          goto LABEL_33;
      }
      __break(1u);
LABEL_37:
      LOWORD(v4) = i;
    }
    LODWORD(v28[0]) = v5;
    WORD2(v28[0]) = v6;
    HIWORD(v28[0]) = v7;
    LOWORD(v28[1]) = v13;
    WORD1(v28[1]) = v14;
    WORD2(v28[1]) = WORD2(v4);
    HIWORD(v28[1]) = v8;
    LOWORD(v29) = v4;
    HIWORD(v29) = v9;
    v19 = _So9NSDecimala__exponent_getter((char *)v28);
    if (v19 < 0)
    {
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      v28[0] = 0;
      v28[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(30);
      swift_bridgeObjectRelease();
      strcpy((char *)v28, "Invalid index ");
      HIBYTE(v28[1]) = -18;
      v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      v27._countAndFlagsBits = 0x616D5F20726F6620;
      v27._object = (void *)0xEE0061737369746ELL;
      String.append(_:)(v27);
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x181E2D880);
    }
    if (v19)
    {
      if (!is_mul_ok(i, 0xAuLL))
        goto LABEL_2;
      i *= 10;
      v20 = v19 - 1;
      if (v19 != 1)
      {
        if (!is_mul_ok(i, 0xAuLL))
          goto LABEL_2;
        i *= 10;
        while (--v20)
        {
          v10 = 0;
          v21 = (i * (unsigned __int128)0xAuLL) >> 64;
          i *= 10;
          v11 = 1;
          if (v21)
            return v10 | (v11 << 16);
        }
      }
    }
LABEL_33:
    v11 = i >> 16 != 0;
    v10 = (unsigned __int16)i;
    if (i >> 16)
      v10 = 0;
  }
  return v10 | (v11 << 16);
}

{
  unsigned __int16 v3;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t i;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  Swift::String v28;
  Swift::String v29;
  _QWORD v30[2];
  unsigned int v31;

  v3 = a3;
  v5 = a1;
  v30[0] = a1;
  v6 = HIDWORD(a1);
  v7 = HIWORD(a1);
  v30[1] = a2;
  v8 = HIWORD(a2);
  v9 = HIWORD(a3);
  v31 = a3;
  if (_So9NSDecimala__isNegative_getter(v30))
    return 0;
  v12 = (unsigned __int16)a2;
  LODWORD(v30[0]) = v5;
  v13 = WORD1(a2);
  WORD2(v30[0]) = v6;
  v14 = WORD2(a2);
  v15 = v3;
  HIWORD(v30[0]) = v7;
  LOWORD(v30[1]) = v12;
  WORD1(v30[1]) = v13;
  WORD2(v30[1]) = v14;
  HIWORD(v30[1]) = v8;
  LOWORD(v31) = v3;
  HIWORD(v31) = v9;
  v16 = _So9NSDecimala__length_getter(v30);
  if (!v16)
    goto LABEL_37;
  v17 = 0;
  v18 = v16 - 1;
  if (v16 != 1)
  {
    while (2)
    {
      v19 = v7;
      switch(v18)
      {
        case 1:
          goto LABEL_13;
        case 2:
          v19 = v12;
          goto LABEL_13;
        case 3:
          v19 = v13;
          goto LABEL_13;
        case 4:
          v19 = v14;
          goto LABEL_13;
        case 5:
          v19 = v8;
          goto LABEL_13;
        case 6:
          v19 = v15;
          goto LABEL_13;
        case 7:
          v19 = v9;
LABEL_13:
          if (HIWORD(v17))
            return 0;
          v17 = v19 | (v17 << 16);
          if (!--v18)
            break;
          continue;
        default:
          goto LABEL_40;
      }
      break;
    }
  }
  if (HIWORD(v17))
    return 0;
  for (i = (unsigned __int16)v6 | (v17 << 16); ; i = 0)
  {
    LODWORD(v30[0]) = v5;
    WORD2(v30[0]) = v6;
    HIWORD(v30[0]) = v7;
    LOWORD(v30[1]) = v12;
    WORD1(v30[1]) = v13;
    WORD2(v30[1]) = v14;
    HIWORD(v30[1]) = v8;
    LOWORD(v31) = v15;
    HIWORD(v31) = v9;
    if ((_So9NSDecimala__exponent_getter((char *)v30) & 0x80000000) == 0)
      break;
    LODWORD(v30[0]) = v5;
    WORD2(v30[0]) = v6;
    HIWORD(v30[0]) = v7;
    LOWORD(v30[1]) = v12;
    WORD1(v30[1]) = v13;
    WORD2(v30[1]) = v14;
    HIWORD(v30[1]) = v8;
    LOWORD(v31) = v15;
    HIWORD(v31) = v9;
    v24 = _So9NSDecimala__exponent_getter((char *)v30);
    if (v24 > 0)
      goto LABEL_39;
    if (!v24)
      return i;
    v25 = -v24 & ~(-v24 >> 31);
    v26 = ~v24;
    while (v25 > v26)
    {
      i /= 0xAuLL;
      if (__CFADD__(v24++, 1))
        return i;
    }
    __break(1u);
LABEL_37:
    ;
  }
  LODWORD(v30[0]) = v5;
  WORD2(v30[0]) = v6;
  HIWORD(v30[0]) = v7;
  LOWORD(v30[1]) = v12;
  WORD1(v30[1]) = v13;
  WORD2(v30[1]) = v14;
  HIWORD(v30[1]) = v8;
  LOWORD(v31) = v15;
  HIWORD(v31) = v9;
  v20 = _So9NSDecimala__exponent_getter((char *)v30);
  if (v20 < 0)
  {
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    v30[0] = 0;
    v30[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease();
    strcpy((char *)v30, "Invalid index ");
    HIBYTE(v30[1]) = -18;
    v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29._countAndFlagsBits = 0x616D5F20726F6620;
    v29._object = (void *)0xEE0061737369746ELL;
    String.append(_:)(v29);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x181E2DFE0);
  }
  if (v20)
  {
    if (is_mul_ok(i, 0xAuLL))
    {
      i *= 10;
      v21 = v20 - 1;
      if (v20 == 1)
        return i;
      if (is_mul_ok(i, 0xAuLL))
      {
        v22 = 10 * i;
        while (--v21)
        {
          i = 0;
          v23 = ((unint64_t)v22 * (unsigned __int128)0xAuLL) >> 64;
          v22 *= 10;
          if (v23)
            return i;
        }
        return v22;
      }
    }
    return 0;
  }
  return i;
}

{
  unsigned __int16 v3;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t i;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  Swift::String v28;
  Swift::String v29;
  _QWORD v30[2];
  unsigned int v31;

  v3 = a3;
  v5 = a1;
  v30[0] = a1;
  v6 = HIDWORD(a1);
  v7 = HIWORD(a1);
  v30[1] = a2;
  v8 = HIWORD(a2);
  v9 = HIWORD(a3);
  v31 = a3;
  if (_So9NSDecimala__isNegative_getter(v30))
    return 0;
  v12 = (unsigned __int16)a2;
  LODWORD(v30[0]) = v5;
  v13 = WORD1(a2);
  WORD2(v30[0]) = v6;
  v14 = WORD2(a2);
  v15 = v3;
  HIWORD(v30[0]) = v7;
  LOWORD(v30[1]) = v12;
  WORD1(v30[1]) = v13;
  WORD2(v30[1]) = v14;
  HIWORD(v30[1]) = v8;
  LOWORD(v31) = v3;
  HIWORD(v31) = v9;
  v16 = _So9NSDecimala__length_getter(v30);
  if (!v16)
    goto LABEL_37;
  v17 = 0;
  v18 = v16 - 1;
  if (v16 != 1)
  {
    while (2)
    {
      v19 = v7;
      switch(v18)
      {
        case 1:
          goto LABEL_13;
        case 2:
          v19 = v12;
          goto LABEL_13;
        case 3:
          v19 = v13;
          goto LABEL_13;
        case 4:
          v19 = v14;
          goto LABEL_13;
        case 5:
          v19 = v8;
          goto LABEL_13;
        case 6:
          v19 = v15;
          goto LABEL_13;
        case 7:
          v19 = v9;
LABEL_13:
          if (HIWORD(v17))
            return 0;
          v17 = v19 | (v17 << 16);
          if (!--v18)
            break;
          continue;
        default:
          goto LABEL_40;
      }
      break;
    }
  }
  if (HIWORD(v17))
    return 0;
  for (i = (unsigned __int16)v6 | (v17 << 16); ; i = 0)
  {
    LODWORD(v30[0]) = v5;
    WORD2(v30[0]) = v6;
    HIWORD(v30[0]) = v7;
    LOWORD(v30[1]) = v12;
    WORD1(v30[1]) = v13;
    WORD2(v30[1]) = v14;
    HIWORD(v30[1]) = v8;
    LOWORD(v31) = v15;
    HIWORD(v31) = v9;
    if ((_So9NSDecimala__exponent_getter((char *)v30) & 0x80000000) == 0)
      break;
    LODWORD(v30[0]) = v5;
    WORD2(v30[0]) = v6;
    HIWORD(v30[0]) = v7;
    LOWORD(v30[1]) = v12;
    WORD1(v30[1]) = v13;
    WORD2(v30[1]) = v14;
    HIWORD(v30[1]) = v8;
    LOWORD(v31) = v15;
    HIWORD(v31) = v9;
    v24 = _So9NSDecimala__exponent_getter((char *)v30);
    if (v24 > 0)
      goto LABEL_39;
    if (!v24)
      return i;
    v25 = -v24 & ~(-v24 >> 31);
    v26 = ~v24;
    while (v25 > v26)
    {
      i /= 0xAuLL;
      if (__CFADD__(v24++, 1))
        return i;
    }
    __break(1u);
LABEL_37:
    ;
  }
  LODWORD(v30[0]) = v5;
  WORD2(v30[0]) = v6;
  HIWORD(v30[0]) = v7;
  LOWORD(v30[1]) = v12;
  WORD1(v30[1]) = v13;
  WORD2(v30[1]) = v14;
  HIWORD(v30[1]) = v8;
  LOWORD(v31) = v15;
  HIWORD(v31) = v9;
  v20 = _So9NSDecimala__exponent_getter((char *)v30);
  if (v20 < 0)
  {
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    v30[0] = 0;
    v30[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease();
    strcpy((char *)v30, "Invalid index ");
    HIBYTE(v30[1]) = -18;
    v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29._countAndFlagsBits = 0x616D5F20726F6620;
    v29._object = (void *)0xEE0061737369746ELL;
    String.append(_:)(v29);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x181E2E38CLL);
  }
  if (v20)
  {
    if (is_mul_ok(i, 0xAuLL))
    {
      i *= 10;
      v21 = v20 - 1;
      if (v20 == 1)
        return i;
      if (is_mul_ok(i, 0xAuLL))
      {
        v22 = 10 * i;
        while (--v21)
        {
          i = 0;
          v23 = ((unint64_t)v22 * (unsigned __int128)0xAuLL) >> 64;
          v22 *= 10;
          if (v23)
            return i;
        }
        return v22;
      }
    }
    return 0;
  }
  return i;
}

unint64_t specialized FixedWidthInteger.init(_:)(unint64_t a1, unint64_t a2, unsigned int a3)
{
  unsigned __int16 v3;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int isNegative_getter;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t i;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  int v33;
  Swift::String v34;
  Swift::String v35;
  int v36;
  _QWORD v37[2];
  unsigned int v38;

  v3 = a3;
  v5 = a1;
  v37[0] = a1;
  v6 = HIDWORD(a1);
  v7 = HIWORD(a1);
  v8 = a2 >> 16;
  v37[1] = a2;
  v9 = HIDWORD(a2);
  v10 = HIWORD(a2);
  v11 = HIWORD(a3);
  v38 = a3;
  isNegative_getter = _So9NSDecimala__isNegative_getter(v37);
  LODWORD(v37[0]) = v5;
  WORD2(v37[0]) = v6;
  HIWORD(v37[0]) = v7;
  LOWORD(v37[1]) = a2;
  WORD1(v37[1]) = v8;
  WORD2(v37[1]) = v9;
  HIWORD(v37[1]) = v10;
  LOWORD(v38) = v3;
  HIWORD(v38) = v11;
  if (!_So9NSDecimala__length_getter(v37) && isNegative_getter)
    goto LABEL_21;
  v36 = isNegative_getter;
  v13 = (unsigned __int16)a2;
  LODWORD(v37[0]) = v5;
  v14 = WORD1(a2);
  WORD2(v37[0]) = v6;
  v15 = WORD2(a2);
  v16 = v3;
  HIWORD(v37[0]) = v7;
  LOWORD(v37[1]) = v13;
  WORD1(v37[1]) = v14;
  WORD2(v37[1]) = v15;
  HIWORD(v37[1]) = v10;
  LOWORD(v38) = v3;
  HIWORD(v38) = v11;
  v17 = _So9NSDecimala__length_getter(v37);
  if (!v17)
    goto LABEL_50;
  v18 = 0;
  v19 = v17 - 1;
  if (v17 != 1)
  {
    while (2)
    {
      v20 = v7;
      switch(v19)
      {
        case 1:
          goto LABEL_15;
        case 2:
          v20 = v13;
          if (HIWORD(v18))
            goto LABEL_21;
          goto LABEL_16;
        case 3:
          v20 = v14;
          if (HIWORD(v18))
            goto LABEL_21;
          goto LABEL_16;
        case 4:
          v20 = v15;
          if (HIWORD(v18))
            goto LABEL_21;
          goto LABEL_16;
        case 5:
          v20 = v10;
          if (HIWORD(v18))
            goto LABEL_21;
          goto LABEL_16;
        case 6:
          v20 = v16;
LABEL_15:
          if (!HIWORD(v18))
            goto LABEL_16;
          goto LABEL_21;
        case 7:
          v20 = v11;
          if (HIWORD(v18))
            goto LABEL_21;
LABEL_16:
          v18 = v20 | (v18 << 16);
          if (!--v19)
            break;
          continue;
        default:
          goto LABEL_53;
      }
      break;
    }
  }
  if (HIWORD(v18))
  {
LABEL_21:
    LODWORD(v21) = 0;
    v22 = 1;
  }
  else
  {
    for (i = (unsigned __int16)v6 | (v18 << 16); ; i = 0)
    {
      LODWORD(v37[0]) = v5;
      WORD2(v37[0]) = v6;
      HIWORD(v37[0]) = v7;
      LOWORD(v37[1]) = v13;
      WORD1(v37[1]) = v14;
      WORD2(v37[1]) = v15;
      HIWORD(v37[1]) = v10;
      LOWORD(v38) = v16;
      HIWORD(v38) = v11;
      if ((_So9NSDecimala__exponent_getter((char *)v37) & 0x80000000) == 0)
        break;
      LODWORD(v37[0]) = v5;
      WORD2(v37[0]) = v6;
      HIWORD(v37[0]) = v7;
      LOWORD(v37[1]) = v13;
      WORD1(v37[1]) = v14;
      WORD2(v37[1]) = v15;
      HIWORD(v37[1]) = v10;
      LOWORD(v38) = v16;
      HIWORD(v38) = v11;
      v29 = _So9NSDecimala__exponent_getter((char *)v37);
      if (v29 > 0)
        goto LABEL_52;
      v26 = v36;
      if (!v29)
        goto LABEL_40;
      v30 = -v29 & ~(-v29 >> 31);
      v31 = ~v29;
      while (v30 > v31)
      {
        i /= 0xAuLL;
        if (__CFADD__(v29++, 1))
          goto LABEL_40;
      }
      __break(1u);
LABEL_50:
      ;
    }
    LODWORD(v37[0]) = v5;
    WORD2(v37[0]) = v6;
    HIWORD(v37[0]) = v7;
    LOWORD(v37[1]) = v13;
    WORD1(v37[1]) = v14;
    WORD2(v37[1]) = v15;
    HIWORD(v37[1]) = v10;
    LOWORD(v38) = v16;
    HIWORD(v38) = v11;
    v25 = _So9NSDecimala__exponent_getter((char *)v37);
    if (v25 < 0)
    {
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      v37[0] = 0;
      v37[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(30);
      swift_bridgeObjectRelease();
      strcpy((char *)v37, "Invalid index ");
      HIBYTE(v37[1]) = -18;
      v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v34);
      swift_bridgeObjectRelease();
      v35._countAndFlagsBits = 0x616D5F20726F6620;
      v35._object = (void *)0xEE0061737369746ELL;
      String.append(_:)(v35);
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x181E2C8F0);
    }
    v26 = v36;
    if (v25)
    {
      if (!is_mul_ok(i, 0xAuLL))
        goto LABEL_21;
      i *= 10;
      v27 = v25 - 1;
      if (v25 != 1)
      {
        if (!is_mul_ok(i, 0xAuLL))
          goto LABEL_21;
        i *= 10;
        while (--v27)
        {
          LODWORD(v21) = 0;
          v28 = (i * (unsigned __int128)0xAuLL) >> 64;
          i *= 10;
          v22 = 1;
          if (v28)
            goto LABEL_22;
        }
      }
    }
LABEL_40:
    v22 = (i & 0xFFFFFFFF80000000) != 0;
    if (i >> 31)
      LODWORD(v21) = 0;
    else
      v21 = -(uint64_t)i;
    if (i >> 31)
      v33 = 0;
    else
      v33 = i;
    if (!v26)
      LODWORD(v21) = v33;
  }
LABEL_22:
  LOBYTE(v37[0]) = v22;
  return v21 | ((unint64_t)v22 << 32);
}

{
  unint64_t i;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  Swift::String v26;
  Swift::String v27;
  int isNegative_getter;
  _QWORD v29[2];
  unsigned int v30;

  LOWORD(i) = a3;
  v4 = a2;
  v5 = a1;
  v29[0] = a1;
  v6 = HIDWORD(a1);
  v7 = HIWORD(a1);
  v8 = a2 >> 16;
  v29[1] = a2;
  v9 = HIDWORD(a2);
  v10 = HIWORD(a2);
  v11 = HIWORD(a3);
  v30 = a3;
  isNegative_getter = _So9NSDecimala__isNegative_getter(v29);
  LODWORD(v29[0]) = v5;
  WORD2(v29[0]) = v6;
  HIWORD(v29[0]) = v7;
  LOWORD(v29[1]) = v4;
  WORD1(v29[1]) = v8;
  WORD2(v29[1]) = v9;
  HIWORD(v29[1]) = v10;
  LOWORD(v30) = i;
  HIWORD(v30) = v11;
  if (_So9NSDecimala__length_getter(v29) || !isNegative_getter)
  {
    v12 = (unsigned __int16)v4;
    LODWORD(v29[0]) = v5;
    v13 = WORD1(v4);
    WORD2(v29[0]) = v6;
    HIWORD(v29[0]) = v7;
    LODWORD(v29[1]) = v4;
    WORD2(v29[1]) = WORD2(v4);
    HIWORD(v29[1]) = v10;
    LOWORD(v30) = i;
    HIWORD(v30) = v11;
    v14 = _So9NSDecimala__length_getter(v29);
    if (!v14)
      goto LABEL_46;
    v15 = 0;
    v16 = v14 - 1;
    if (v14 != 1)
    {
      while (2)
      {
        v17 = v7;
        switch(v16)
        {
          case 1:
            goto LABEL_15;
          case 2:
            v17 = v12;
            if (HIWORD(v15))
              return 0;
            goto LABEL_16;
          case 3:
            v17 = v13;
            if (HIWORD(v15))
              return 0;
            goto LABEL_16;
          case 4:
            v17 = WORD2(v4);
            if (HIWORD(v15))
              return 0;
            goto LABEL_16;
          case 5:
            v17 = v10;
            if (HIWORD(v15))
              return 0;
            goto LABEL_16;
          case 6:
            v17 = (unsigned __int16)i;
LABEL_15:
            if (!HIWORD(v15))
              goto LABEL_16;
            return 0;
          case 7:
            v17 = v11;
            if (HIWORD(v15))
              return 0;
LABEL_16:
            v15 = v17 | (v15 << 16);
            if (!--v16)
              break;
            continue;
          default:
            goto LABEL_49;
        }
        break;
      }
    }
    if (!HIWORD(v15))
    {
      LOWORD(v4) = i;
      for (i = (unsigned __int16)v6 | (v15 << 16); ; i = 0)
      {
        LODWORD(v29[0]) = v5;
        WORD2(v29[0]) = v6;
        HIWORD(v29[0]) = v7;
        LOWORD(v29[1]) = v12;
        WORD1(v29[1]) = v13;
        WORD2(v29[1]) = WORD2(v4);
        HIWORD(v29[1]) = v10;
        LOWORD(v30) = v4;
        HIWORD(v30) = v11;
        if ((_So9NSDecimala__exponent_getter((char *)v29) & 0x80000000) == 0)
          break;
        LODWORD(v29[0]) = v5;
        WORD2(v29[0]) = v6;
        HIWORD(v29[0]) = v7;
        LOWORD(v29[1]) = v12;
        WORD1(v29[1]) = v13;
        WORD2(v29[1]) = WORD2(v4);
        HIWORD(v29[1]) = v10;
        LOWORD(v30) = v4;
        HIWORD(v30) = v11;
        v22 = _So9NSDecimala__exponent_getter((char *)v29);
        if (v22 > 0)
          goto LABEL_48;
        if (!v22)
          goto LABEL_40;
        v23 = -v22 & ~(-v22 >> 31);
        v24 = ~v22;
        while (v23 > v24)
        {
          i /= 0xAuLL;
          if (__CFADD__(v22++, 1))
            goto LABEL_40;
        }
        __break(1u);
LABEL_46:
        LOWORD(v4) = i;
      }
      LODWORD(v29[0]) = v5;
      WORD2(v29[0]) = v6;
      HIWORD(v29[0]) = v7;
      LOWORD(v29[1]) = v12;
      WORD1(v29[1]) = v13;
      WORD2(v29[1]) = WORD2(v4);
      HIWORD(v29[1]) = v10;
      LOWORD(v30) = v4;
      HIWORD(v30) = v11;
      v19 = _So9NSDecimala__exponent_getter((char *)v29);
      if (v19 < 0)
      {
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        v29[0] = 0;
        v29[1] = 0xE000000000000000;
        _StringGuts.grow(_:)(30);
        swift_bridgeObjectRelease();
        strcpy((char *)v29, "Invalid index ");
        HIBYTE(v29[1]) = -18;
        v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v26);
        swift_bridgeObjectRelease();
        v27._countAndFlagsBits = 0x616D5F20726F6620;
        v27._object = (void *)0xEE0061737369746ELL;
        String.append(_:)(v27);
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x181E2CD08);
      }
      if (v19)
      {
        if (!is_mul_ok(i, 0xAuLL))
          return 0;
        i *= 10;
        v20 = v19 - 1;
        if (v19 != 1)
        {
          if (!is_mul_ok(i, 0xAuLL))
            return 0;
          i *= 10;
          while (--v20)
          {
            v21 = (i * (unsigned __int128)0xAuLL) >> 64;
            i *= 10;
            if (v21)
              return 0;
          }
        }
      }
LABEL_40:
      if (isNegative_getter)
      {
        if ((i & 0x8000000000000000) == 0)
          return -(uint64_t)i;
      }
      else if ((i & 0x8000000000000000) == 0)
      {
        return i;
      }
    }
  }
  return 0;
}

{
  unsigned __int16 v3;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int isNegative_getter;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t result;
  unint64_t i;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  Swift::String v31;
  Swift::String v32;
  int v33;
  _QWORD v34[2];
  unsigned int v35;

  v3 = a3;
  v5 = a1;
  v34[0] = a1;
  v6 = HIDWORD(a1);
  v7 = HIWORD(a1);
  v8 = a2 >> 16;
  v34[1] = a2;
  v9 = HIDWORD(a2);
  v10 = HIWORD(a2);
  v11 = HIWORD(a3);
  v35 = a3;
  isNegative_getter = _So9NSDecimala__isNegative_getter(v34);
  LODWORD(v34[0]) = v5;
  WORD2(v34[0]) = v6;
  HIWORD(v34[0]) = v7;
  LOWORD(v34[1]) = a2;
  WORD1(v34[1]) = v8;
  WORD2(v34[1]) = v9;
  HIWORD(v34[1]) = v10;
  LOWORD(v35) = v3;
  HIWORD(v35) = v11;
  if (!_So9NSDecimala__length_getter(v34) && isNegative_getter)
    return 0;
  v33 = isNegative_getter;
  v13 = (unsigned __int16)a2;
  LODWORD(v34[0]) = v5;
  v14 = WORD1(a2);
  WORD2(v34[0]) = v6;
  v15 = WORD2(a2);
  v16 = v3;
  HIWORD(v34[0]) = v7;
  LOWORD(v34[1]) = v13;
  WORD1(v34[1]) = v14;
  WORD2(v34[1]) = v15;
  HIWORD(v34[1]) = v10;
  LOWORD(v35) = v3;
  HIWORD(v35) = v11;
  v17 = _So9NSDecimala__length_getter(v34);
  if (!v17)
    goto LABEL_43;
  v18 = 0;
  v19 = v17 - 1;
  if (v17 != 1)
  {
    while (2)
    {
      v20 = v7;
      switch(v19)
      {
        case 1:
          goto LABEL_15;
        case 2:
          v20 = v13;
          if (HIWORD(v18))
            return 0;
          goto LABEL_16;
        case 3:
          v20 = v14;
          if (HIWORD(v18))
            return 0;
          goto LABEL_16;
        case 4:
          v20 = v15;
          if (HIWORD(v18))
            return 0;
          goto LABEL_16;
        case 5:
          v20 = v10;
          if (HIWORD(v18))
            return 0;
          goto LABEL_16;
        case 6:
          v20 = v16;
LABEL_15:
          if (!HIWORD(v18))
            goto LABEL_16;
          return 0;
        case 7:
          v20 = v11;
          if (HIWORD(v18))
            return 0;
LABEL_16:
          v18 = v20 | (v18 << 16);
          if (!--v19)
            break;
          continue;
        default:
          goto LABEL_46;
      }
      break;
    }
  }
  if (HIWORD(v18))
    return 0;
  for (i = (unsigned __int16)v6 | (v18 << 16); ; i = 0)
  {
    LODWORD(v34[0]) = v5;
    WORD2(v34[0]) = v6;
    HIWORD(v34[0]) = v7;
    LOWORD(v34[1]) = v13;
    WORD1(v34[1]) = v14;
    WORD2(v34[1]) = v15;
    HIWORD(v34[1]) = v10;
    LOWORD(v35) = v16;
    HIWORD(v35) = v11;
    if ((_So9NSDecimala__exponent_getter((char *)v34) & 0x80000000) == 0)
      break;
    LODWORD(v34[0]) = v5;
    WORD2(v34[0]) = v6;
    HIWORD(v34[0]) = v7;
    LOWORD(v34[1]) = v13;
    WORD1(v34[1]) = v14;
    WORD2(v34[1]) = v15;
    HIWORD(v34[1]) = v10;
    LOWORD(v35) = v16;
    HIWORD(v35) = v11;
    v27 = _So9NSDecimala__exponent_getter((char *)v34);
    if (v27 > 0)
      goto LABEL_45;
    v24 = v33;
    if (!v27)
      goto LABEL_39;
    v28 = -v27 & ~(-v27 >> 31);
    v29 = ~v27;
    while (v28 > v29)
    {
      i /= 0xAuLL;
      if (__CFADD__(v27++, 1))
        goto LABEL_39;
    }
    __break(1u);
LABEL_43:
    ;
  }
  LODWORD(v34[0]) = v5;
  WORD2(v34[0]) = v6;
  HIWORD(v34[0]) = v7;
  LOWORD(v34[1]) = v13;
  WORD1(v34[1]) = v14;
  WORD2(v34[1]) = v15;
  HIWORD(v34[1]) = v10;
  LOWORD(v35) = v16;
  HIWORD(v35) = v11;
  v23 = _So9NSDecimala__exponent_getter((char *)v34);
  if (v23 < 0)
  {
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    v34[0] = 0;
    v34[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease();
    strcpy((char *)v34, "Invalid index ");
    HIBYTE(v34[1]) = -18;
    v31._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32._countAndFlagsBits = 0x616D5F20726F6620;
    v32._object = (void *)0xEE0061737369746ELL;
    String.append(_:)(v32);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x181E2D124);
  }
  v24 = v33;
  if (v23)
  {
    if (!is_mul_ok(i, 0xAuLL))
      return 0;
    i *= 10;
    v25 = v23 - 1;
    if (v23 != 1)
    {
      if (!is_mul_ok(i, 0xAuLL))
        return 0;
      i *= 10;
      while (--v25)
      {
        result = 0;
        v26 = (i * (unsigned __int128)0xAuLL) >> 64;
        i *= 10;
        if (v26)
          return result;
      }
    }
  }
LABEL_39:
  if (v24)
    return -(uint64_t)i;
  else
    return i;
}

{
  unint64_t i;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  Swift::String v26;
  Swift::String v27;
  _QWORD v28[2];
  unsigned int v29;

  LOWORD(i) = a3;
  v4 = a2;
  v5 = a1;
  v28[0] = a1;
  v6 = HIDWORD(a1);
  v7 = HIWORD(a1);
  v28[1] = a2;
  v8 = HIWORD(a2);
  v9 = HIWORD(a3);
  v29 = a3;
  if (_So9NSDecimala__isNegative_getter(v28))
    goto LABEL_2;
  v13 = (unsigned __int16)v4;
  LODWORD(v28[0]) = v5;
  v14 = WORD1(v4);
  WORD2(v28[0]) = v6;
  HIWORD(v28[0]) = v7;
  LODWORD(v28[1]) = v4;
  WORD2(v28[1]) = WORD2(v4);
  HIWORD(v28[1]) = v8;
  LOWORD(v29) = i;
  HIWORD(v29) = v9;
  v15 = _So9NSDecimala__length_getter(v28);
  if (!v15)
    goto LABEL_37;
  v16 = 0;
  v17 = v15 - 1;
  if (v15 != 1)
  {
    while (2)
    {
      v18 = v7;
      switch(v17)
      {
        case 1:
          goto LABEL_13;
        case 2:
          v18 = v13;
          goto LABEL_13;
        case 3:
          v18 = v14;
          goto LABEL_13;
        case 4:
          v18 = WORD2(v4);
          goto LABEL_13;
        case 5:
          v18 = v8;
          goto LABEL_13;
        case 6:
          v18 = (unsigned __int16)i;
          goto LABEL_13;
        case 7:
          v18 = v9;
LABEL_13:
          if (HIWORD(v16))
            goto LABEL_2;
          v16 = v18 | (v16 << 16);
          if (!--v17)
            break;
          continue;
        default:
          goto LABEL_40;
      }
      break;
    }
  }
  if (HIWORD(v16))
  {
LABEL_2:
    v10 = 0;
    v11 = 1;
  }
  else
  {
    LOWORD(v4) = i;
    for (i = (unsigned __int16)v6 | (v16 << 16); ; i = 0)
    {
      LODWORD(v28[0]) = v5;
      WORD2(v28[0]) = v6;
      HIWORD(v28[0]) = v7;
      LOWORD(v28[1]) = v13;
      WORD1(v28[1]) = v14;
      WORD2(v28[1]) = WORD2(v4);
      HIWORD(v28[1]) = v8;
      LOWORD(v29) = v4;
      HIWORD(v29) = v9;
      if ((_So9NSDecimala__exponent_getter((char *)v28) & 0x80000000) == 0)
        break;
      LODWORD(v28[0]) = v5;
      WORD2(v28[0]) = v6;
      HIWORD(v28[0]) = v7;
      LOWORD(v28[1]) = v13;
      WORD1(v28[1]) = v14;
      WORD2(v28[1]) = WORD2(v4);
      HIWORD(v28[1]) = v8;
      LOWORD(v29) = v4;
      HIWORD(v29) = v9;
      v22 = _So9NSDecimala__exponent_getter((char *)v28);
      if (v22 > 0)
        goto LABEL_39;
      if (!v22)
        goto LABEL_33;
      v23 = -v22 & ~(-v22 >> 31);
      v24 = ~v22;
      while (v23 > v24)
      {
        i /= 0xAuLL;
        if (__CFADD__(v22++, 1))
          goto LABEL_33;
      }
      __break(1u);
LABEL_37:
      LOWORD(v4) = i;
    }
    LODWORD(v28[0]) = v5;
    WORD2(v28[0]) = v6;
    HIWORD(v28[0]) = v7;
    LOWORD(v28[1]) = v13;
    WORD1(v28[1]) = v14;
    WORD2(v28[1]) = WORD2(v4);
    HIWORD(v28[1]) = v8;
    LOWORD(v29) = v4;
    HIWORD(v29) = v9;
    v19 = _So9NSDecimala__exponent_getter((char *)v28);
    if (v19 < 0)
    {
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      v28[0] = 0;
      v28[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(30);
      swift_bridgeObjectRelease();
      strcpy((char *)v28, "Invalid index ");
      HIBYTE(v28[1]) = -18;
      v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      v27._countAndFlagsBits = 0x616D5F20726F6620;
      v27._object = (void *)0xEE0061737369746ELL;
      String.append(_:)(v27);
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x181E2DC38);
    }
    if (v19)
    {
      if (!is_mul_ok(i, 0xAuLL))
        goto LABEL_2;
      i *= 10;
      v20 = v19 - 1;
      if (v19 != 1)
      {
        if (!is_mul_ok(i, 0xAuLL))
          goto LABEL_2;
        i *= 10;
        while (--v20)
        {
          v10 = 0;
          v21 = (i * (unsigned __int128)0xAuLL) >> 64;
          i *= 10;
          v11 = 1;
          if (v21)
            goto LABEL_3;
        }
      }
    }
LABEL_33:
    v11 = HIDWORD(i) != 0;
    v10 = i;
    if (HIDWORD(i))
      v10 = 0;
  }
LABEL_3:
  LOBYTE(v28[0]) = v11;
  return v10 | ((unint64_t)v11 << 32);
}

uint64_t static JSONDecoderImpl.KeyedContainer.stringify(objectRegion:using:codingPathNode:keyDecodingStrategy:)(Swift::Int a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  unsigned __int8 v27;
  Swift::Int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  Swift::Int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  Swift::String *v89;
  Swift::String v90;
  uint64_t v91;
  int64_t v92;
  uint64_t v93;
  ValueMetadata **v94;
  uint64_t v95;
  ValueMetadata *v96;
  Swift::String v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  void *v110;
  Swift::String v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char v117;
  char v118;
  unint64_t v119;
  uint64_t v120;
  _BOOL8 v121;
  uint64_t v122;
  char v123;
  unint64_t v124;
  unint64_t v125;
  char v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  BOOL v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  unint64_t v134;
  unint64_t v135;
  int64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  int64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char v149;
  _QWORD *v150;
  __int128 v151;
  uint64_t v152;
  int64_t v153;
  unint64_t v154;
  int64_t v155;
  uint64_t v156;
  uint64_t v157;
  unsigned __int8 v158;
  uint64_t v159;
  unsigned __int8 v160;
  Swift::Int v161;
  uint64_t v162;
  uint64_t v163;
  unsigned __int8 v164;
  unsigned __int8 v165;
  Swift::Int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char isUniquelyReferenced_nonNull_native;
  char v172;
  unint64_t v173;
  uint64_t v174;
  _BOOL8 v175;
  uint64_t v176;
  char v177;
  unint64_t v178;
  char v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  char *v186;
  unint64_t v187;
  int64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char v200;
  _QWORD *v201;
  __int128 v202;
  uint64_t v203;
  int64_t v204;
  unint64_t v205;
  int64_t v206;
  uint64_t v207;
  uint64_t v208;
  unsigned __int8 v209;
  uint64_t v210;
  unsigned __int8 v211;
  Swift::Int v212;
  uint64_t v213;
  unsigned __int8 v214;
  uint64_t v215;
  unsigned __int8 v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  _QWORD *v221;
  unint64_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  char v229;
  char v230;
  unint64_t v231;
  uint64_t v232;
  _BOOL8 v233;
  uint64_t v234;
  char v235;
  unint64_t v236;
  unint64_t v237;
  char v238;
  uint64_t *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  char *v245;
  unint64_t v246;
  int64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  unint64_t v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  char v259;
  _QWORD *v260;
  __int128 v261;
  uint64_t v262;
  int64_t v263;
  unint64_t v264;
  int64_t v265;
  unint64_t v266;
  uint64_t v267;
  unsigned __int8 v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  _QWORD *v275;
  int64_t v276;
  void (*v278)(__int128 *__return_ptr, _QWORD *);
  uint64_t v279;
  uint64_t v280;
  _QWORD *v281;
  unint64_t v282;
  unint64_t v283;
  int64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  __int128 v292;
  uint64_t v293;
  ValueMetadata *v294;
  unint64_t v295;
  unint64_t v296;

  v6 = v5;
  v8 = *a5;
  v296 = MEMORY[0x1E0DEE9E0];
  if (a2 >= 0)
    v9 = a2;
  else
    v9 = a2 + 1;
  v10 = v9 >> 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : JSONMap.Value]);
  Dictionary.reserveCapacity(_:)(v10);
  if (!v8)
  {
    v279 = v5;
    v14 = v296;
    swift_retain();
    v15 = JSONMap.loadValue(at:)(a1);
    if (v17 > 0xFDu)
    {
      v18 = v296;
LABEL_10:
      v296 = v18;
      swift_release();
      return v296;
    }
    v156 = v15;
    v157 = v16;
    v158 = v17;
    while (1)
    {
      v161 = JSONMap.offset(after:)(a1);
      v162 = JSONMap.loadValue(at:)(v161);
      if (v164 > 0xFDu)
        goto LABEL_236;
      v165 = v164;
      v286 = v163;
      v289 = v162;
      v166 = JSONMap.offset(after:)(v161);
      v167 = specialized JSONDecoderImpl.unwrapString<A>(from:for:_:)(v156, v157, v158, a4, 0, 0, 0, 255);
      if (v279)
        goto LABEL_245;
      v169 = v167;
      v170 = v168;
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v292 = v14;
      swift_bridgeObjectRetain();
      v173 = specialized __RawDictionaryStorage.find<A>(_:)(v169, v170);
      v174 = *(_QWORD *)(v14 + 16);
      v175 = (v172 & 1) == 0;
      v176 = v174 + v175;
      if (__OFADD__(v174, v175))
      {
        __break(1u);
LABEL_224:
        __break(1u);
LABEL_225:
        __break(1u);
LABEL_226:
        __break(1u);
LABEL_227:
        __break(1u);
LABEL_228:
        __break(1u);
LABEL_229:
        __break(1u);
LABEL_230:
        __break(1u);
LABEL_231:
        __break(1u);
LABEL_232:
        __break(1u);
LABEL_233:
        __break(1u);
LABEL_234:
        __break(1u);
LABEL_235:
        __break(1u);
LABEL_236:
        __break(1u);
LABEL_237:
        __break(1u);
LABEL_238:
        __break(1u);
        goto LABEL_239;
      }
      v177 = v172;
      if (*(_QWORD *)(v14 + 24) >= v176)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v18 = v14;
          if ((v172 & 1) != 0)
            goto LABEL_134;
        }
        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONMap.Value>);
          v184 = static _DictionaryStorage.copy(original:)();
          v18 = v184;
          if (*(_QWORD *)(v14 + 16))
          {
            v185 = (char *)(v184 + 64);
            v186 = (char *)(v14 + 64);
            v187 = (unint64_t)((1 << *(_BYTE *)(v18 + 32)) + 63) >> 6;
            v282 = v14 + 64;
            if (v18 != v14 || v185 >= &v186[8 * v187])
              memmove(v185, v186, 8 * v187);
            v188 = 0;
            *(_QWORD *)(v18 + 16) = *(_QWORD *)(v14 + 16);
            v189 = 1 << *(_BYTE *)(v14 + 32);
            if (v189 < 64)
              v190 = ~(-1 << v189);
            else
              v190 = -1;
            v191 = v190 & *(_QWORD *)(v14 + 64);
            v284 = (unint64_t)(v189 + 63) >> 6;
            while (1)
            {
              if (v191)
              {
                v192 = __clz(__rbit64(v191));
                v191 &= v191 - 1;
                v193 = v192 | (v188 << 6);
              }
              else
              {
                v204 = v188 + 1;
                if (__OFADD__(v188, 1))
                  goto LABEL_233;
                if (v204 >= v284)
                  break;
                v205 = *(_QWORD *)(v282 + 8 * v204);
                ++v188;
                if (!v205)
                {
                  v188 = v204 + 1;
                  if (v204 + 1 >= v284)
                    break;
                  v205 = *(_QWORD *)(v282 + 8 * v188);
                  if (!v205)
                  {
                    v188 = v204 + 2;
                    if (v204 + 2 >= v284)
                      break;
                    v205 = *(_QWORD *)(v282 + 8 * v188);
                    if (!v205)
                    {
                      v188 = v204 + 3;
                      if (v204 + 3 >= v284)
                        break;
                      v205 = *(_QWORD *)(v282 + 8 * v188);
                      if (!v205)
                      {
                        v206 = v204 + 4;
                        if (v206 >= v284)
                          break;
                        v205 = *(_QWORD *)(v282 + 8 * v206);
                        if (!v205)
                        {
                          while (1)
                          {
                            v188 = v206 + 1;
                            if (__OFADD__(v206, 1))
                              break;
                            if (v188 >= v284)
                              goto LABEL_174;
                            v205 = *(_QWORD *)(v282 + 8 * v188);
                            ++v206;
                            if (v205)
                              goto LABEL_173;
                          }
LABEL_239:
                          __break(1u);
                          goto LABEL_240;
                        }
                        v188 = v206;
                      }
                    }
                  }
                }
LABEL_173:
                v191 = (v205 - 1) & v205;
                v193 = __clz(__rbit64(v205)) + (v188 << 6);
              }
              v194 = 16 * v193;
              v195 = (uint64_t *)(*(_QWORD *)(v14 + 48) + 16 * v193);
              v197 = *v195;
              v196 = v195[1];
              v198 = 24 * v193;
              v199 = *(_QWORD *)(v14 + 56) + v198;
              v200 = *(_BYTE *)(v199 + 16);
              v201 = (_QWORD *)(*(_QWORD *)(v18 + 48) + v194);
              v202 = *(_OWORD *)v199;
              *v201 = v197;
              v201[1] = v196;
              v203 = *(_QWORD *)(v18 + 56) + v198;
              *(_OWORD *)v203 = v202;
              *(_BYTE *)(v203 + 16) = v200;
              swift_bridgeObjectRetain();
            }
          }
LABEL_174:
          swift_bridgeObjectRelease();
          if ((v177 & 1) != 0)
          {
LABEL_134:
            swift_bridgeObjectRelease();
            goto LABEL_135;
          }
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v176, isUniquelyReferenced_nonNull_native);
        v18 = v292;
        v178 = specialized __RawDictionaryStorage.find<A>(_:)(v169, v170);
        if ((v177 & 1) != (v179 & 1))
          goto LABEL_242;
        v173 = v178;
        if ((v177 & 1) != 0)
          goto LABEL_134;
      }
      *(_QWORD *)(v18 + 8 * (v173 >> 6) + 64) |= 1 << v173;
      v180 = (uint64_t *)(*(_QWORD *)(v18 + 48) + 16 * v173);
      *v180 = v169;
      v180[1] = v170;
      v181 = *(_QWORD *)(v18 + 56) + 24 * v173;
      *(_QWORD *)v181 = v289;
      *(_QWORD *)(v181 + 8) = v286;
      *(_BYTE *)(v181 + 16) = v165;
      v182 = *(_QWORD *)(v18 + 16);
      v130 = __OFADD__(v182, 1);
      v183 = v182 + 1;
      if (v130)
        goto LABEL_226;
      *(_QWORD *)(v18 + 16) = v183;
LABEL_135:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a1 = v166;
      v156 = JSONMap.loadValue(at:)(v166);
      v157 = v159;
      v158 = v160;
      v14 = v18;
      if (v160 > 0xFDu)
        goto LABEL_10;
    }
  }
  if (v8 != 1)
  {
    swift_retain();
    v278 = (void (*)(__int128 *__return_ptr, _QWORD *))v8;
    outlined copy of JSONEncoder.KeyEncodingStrategy(v8);
    v281 = (_QWORD *)_CodingPathNode.path.getter(a4);
    v19 = JSONMap.loadValue(at:)(a1);
    if (v21 > 0xFDu)
    {
LABEL_12:
      swift_bridgeObjectRelease();
      swift_release();
      outlined consume of JSONEncoder.KeyEncodingStrategy((unint64_t)v278);
      return v296;
    }
    v207 = v19;
    v208 = v20;
    v209 = v21;
    while (1)
    {
      v212 = JSONMap.offset(after:)(a1);
      v213 = JSONMap.loadValue(at:)(v212);
      v287 = v215;
      v290 = v213;
      if (v214 > 0xFDu)
        goto LABEL_237;
      v216 = v214;
      a1 = JSONMap.offset(after:)(v212);
      v217 = specialized JSONDecoderImpl.unwrapString<A>(from:for:_:)(v207, v208, v209, a4, 0, 0, 0, 255);
      if (v6)
        goto LABEL_246;
      v219 = v217;
      v220 = v218;
      v221 = v281;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v221 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v281[2] + 1, 1, v281);
      v223 = v221[2];
      v222 = v221[3];
      if (v223 >= v222 >> 1)
        v221 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v222 > 1), v223 + 1, 1, v221);
      v294 = &type metadata for _CodingKey;
      v295 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      v224 = swift_allocObject();
      *(_QWORD *)&v292 = v224;
      *(_QWORD *)(v224 + 16) = v219;
      *(_QWORD *)(v224 + 24) = v220;
      *(_QWORD *)(v224 + 32) = 0;
      *(_BYTE *)(v224 + 40) = 0;
      v221[2] = v223 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v292, (uint64_t)&v221[5 * v223 + 4]);
      v278(&v292, v221);
      swift_bridgeObjectRelease();
      __swift_project_boxed_opaque_existential_1(&v292, (uint64_t)v294);
      v225 = dispatch thunk of CodingKey.stringValue.getter();
      v227 = v226;
      v228 = v296;
      v229 = swift_isUniquelyReferenced_nonNull_native();
      v296 = 0x8000000000000000;
      swift_bridgeObjectRetain();
      v231 = specialized __RawDictionaryStorage.find<A>(_:)(v225, v227);
      v232 = *(_QWORD *)(v228 + 16);
      v233 = (v230 & 1) == 0;
      v234 = v232 + v233;
      if (__OFADD__(v232, v233))
        goto LABEL_224;
      v235 = v230;
      if (*(_QWORD *)(v228 + 24) >= v234)
      {
        if ((v229 & 1) != 0)
        {
          v236 = v228;
          v6 = 0;
          if ((v230 & 1) != 0)
            goto LABEL_177;
        }
        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONMap.Value>);
          v243 = static _DictionaryStorage.copy(original:)();
          v236 = v243;
          if (*(_QWORD *)(v228 + 16))
          {
            v244 = (char *)(v243 + 64);
            v245 = (char *)(v228 + 64);
            v246 = (unint64_t)((1 << *(_BYTE *)(v236 + 32)) + 63) >> 6;
            v274 = v228 + 64;
            if (v236 != v228 || v244 >= &v245[8 * v246])
              memmove(v244, v245, 8 * v246);
            v247 = 0;
            *(_QWORD *)(v236 + 16) = *(_QWORD *)(v228 + 16);
            v248 = 1 << *(_BYTE *)(v228 + 32);
            if (v248 < 64)
              v249 = ~(-1 << v248);
            else
              v249 = -1;
            v250 = v249 & *(_QWORD *)(v228 + 64);
            v276 = (unint64_t)(v248 + 63) >> 6;
            while (1)
            {
              if (v250)
              {
                v251 = __clz(__rbit64(v250));
                v250 &= v250 - 1;
                v252 = v251 | (v247 << 6);
              }
              else
              {
                v263 = v247 + 1;
                if (__OFADD__(v247, 1))
                  goto LABEL_234;
                if (v263 >= v276)
                  break;
                v264 = *(_QWORD *)(v274 + 8 * v263);
                ++v247;
                if (!v264)
                {
                  v247 = v263 + 1;
                  if (v263 + 1 >= v276)
                    break;
                  v264 = *(_QWORD *)(v274 + 8 * v247);
                  if (!v264)
                  {
                    v247 = v263 + 2;
                    if (v263 + 2 >= v276)
                      break;
                    v264 = *(_QWORD *)(v274 + 8 * v247);
                    if (!v264)
                    {
                      v247 = v263 + 3;
                      if (v263 + 3 >= v276)
                        break;
                      v264 = *(_QWORD *)(v274 + 8 * v247);
                      if (!v264)
                      {
                        v265 = v263 + 4;
                        if (v265 >= v276)
                          break;
                        v264 = *(_QWORD *)(v274 + 8 * v265);
                        if (!v264)
                        {
                          while (1)
                          {
                            v247 = v265 + 1;
                            if (__OFADD__(v265, 1))
                              break;
                            if (v247 >= v276)
                              goto LABEL_221;
                            v264 = *(_QWORD *)(v274 + 8 * v247);
                            ++v265;
                            if (v264)
                              goto LABEL_220;
                          }
LABEL_240:
                          __break(1u);
                          goto LABEL_241;
                        }
                        v247 = v265;
                      }
                    }
                  }
                }
LABEL_220:
                v250 = (v264 - 1) & v264;
                v252 = __clz(__rbit64(v264)) + (v247 << 6);
              }
              v253 = 16 * v252;
              v254 = (uint64_t *)(*(_QWORD *)(v228 + 48) + 16 * v252);
              v256 = *v254;
              v255 = v254[1];
              v257 = 24 * v252;
              v258 = *(_QWORD *)(v228 + 56) + v257;
              v259 = *(_BYTE *)(v258 + 16);
              v260 = (_QWORD *)(*(_QWORD *)(v236 + 48) + v253);
              v261 = *(_OWORD *)v258;
              *v260 = v256;
              v260[1] = v255;
              v262 = *(_QWORD *)(v236 + 56) + v257;
              *(_OWORD *)v262 = v261;
              *(_BYTE *)(v262 + 16) = v259;
              swift_bridgeObjectRetain();
            }
          }
LABEL_221:
          swift_bridgeObjectRelease();
          v6 = 0;
          if ((v235 & 1) != 0)
          {
LABEL_177:
            swift_bridgeObjectRelease();
            goto LABEL_178;
          }
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v234, v229);
        v236 = v228;
        v237 = specialized __RawDictionaryStorage.find<A>(_:)(v225, v227);
        if ((v235 & 1) != (v238 & 1))
          goto LABEL_242;
        v231 = v237;
        v6 = 0;
        if ((v235 & 1) != 0)
          goto LABEL_177;
      }
      *(_QWORD *)(v236 + 8 * (v231 >> 6) + 64) |= 1 << v231;
      v239 = (uint64_t *)(*(_QWORD *)(v236 + 48) + 16 * v231);
      *v239 = v225;
      v239[1] = v227;
      v240 = *(_QWORD *)(v236 + 56) + 24 * v231;
      *(_QWORD *)v240 = v290;
      *(_QWORD *)(v240 + 8) = v287;
      *(_BYTE *)(v240 + 16) = v216;
      v241 = *(_QWORD *)(v236 + 16);
      v130 = __OFADD__(v241, 1);
      v242 = v241 + 1;
      if (v130)
        goto LABEL_227;
      *(_QWORD *)(v236 + 16) = v242;
LABEL_178:
      v296 = v236;
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v292);
      v207 = JSONMap.loadValue(at:)(a1);
      v208 = v210;
      v209 = v211;
      if (v211 > 0xFDu)
        goto LABEL_12;
    }
  }
  swift_retain();
  v11 = JSONMap.loadValue(at:)(a1);
  if (v13 > 0xFDu)
  {
LABEL_7:
    swift_release();
    return v296;
  }
  v23 = v11;
  v24 = v12;
  v25 = v13;
  while (2)
  {
    v28 = JSONMap.offset(after:)(a1);
    v29 = JSONMap.loadValue(at:)(v28);
    v269 = v30;
    v268 = v31;
    if (v31 > 0xFDu)
      goto LABEL_238;
    v32 = v29;
    v33 = JSONMap.offset(after:)(v28);
    v34 = specialized JSONDecoderImpl.unwrapString<A>(from:for:_:)(v23, v24, v25, a4, 0, 0, 0, 255);
    if (v6)
      goto LABEL_244;
    if ((v35 & 0x2000000000000000) != 0)
      v36 = HIBYTE(v35) & 0xF;
    else
      v36 = v34 & 0xFFFFFFFFFFFFLL;
    v270 = v33;
    v267 = v32;
    if (!v36)
    {
      v41 = v34;
      v42 = v35;
      goto LABEL_95;
    }
    v37 = 0;
    v283 = 4 * v36;
    v285 = v35;
    v38 = 15;
    v288 = v34;
    while (1)
    {
      if (String.subscript.getter() == 95 && v40 == 0xE100000000000000)
      {
        swift_bridgeObjectRelease();
        goto LABEL_25;
      }
      v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v39 & 1) == 0)
        break;
LABEL_25:
      v38 = String.index(after:)();
      v37 = v38 >> 14;
      if (v38 >> 14 == v283)
      {
        v41 = v288;
        v42 = v285;
LABEL_94:
        v6 = 0;
        goto LABEL_95;
      }
    }
    v43 = (unint64_t)String.index(before:)() >> 14;
    if (v37 >= v43)
      goto LABEL_50;
    if (String.subscript.getter() == 95 && v44 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v46 & 1) == 0)
        goto LABEL_50;
    }
    v43 = (unint64_t)String.index(before:)() >> 14;
    if (v37 < v43)
    {
      if (String.subscript.getter() == 95 && v47 == 0xE100000000000000)
        goto LABEL_44;
      v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v48 & 1) != 0)
      {
        while (1)
        {
          v43 = (unint64_t)String.index(before:)() >> 14;
          if (v37 >= v43)
            break;
          if (String.subscript.getter() == 95 && v49 == 0xE100000000000000)
          {
LABEL_44:
            swift_bridgeObjectRelease();
          }
          else
          {
            v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v50 & 1) == 0)
              break;
          }
        }
      }
    }
LABEL_50:
    if (v43 < v37)
      goto LABEL_229;
    v51 = String.index(after:)();
    if (v283 < v51 >> 14)
      goto LABEL_230;
    v266 = v51 >> 14;
    swift_bridgeObjectRetain();
    String.index(after:)();
    v52 = String.subscript.getter();
    v54 = v53;
    swift_bridgeObjectRelease();
    v55 = v54 >> 14;
    v56 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    if (v54 >> 14 == v52 >> 14)
      goto LABEL_75;
    swift_bridgeObjectRetain();
    v57 = v52;
    v58 = v52;
    v59 = v52;
    v275 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    while (2)
    {
      while (Substring.subscript.getter() != 95 || v61 != 0xE100000000000000)
      {
        v62 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v62 & 1) != 0)
          goto LABEL_60;
        v57 = Substring.index(after:)();
        if (v55 == v57 >> 14)
          goto LABEL_67;
      }
      swift_bridgeObjectRelease();
LABEL_60:
      if (v57 >> 14 != v59 >> 14)
      {
        if (v57 >> 14 < v58 >> 14)
          goto LABEL_243;
        v63 = Substring.subscript.getter();
        v272 = v65;
        v273 = v64;
        v271 = v66;
        v67 = v275;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v67 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v275[2] + 1, 1, v275);
        v69 = v67[2];
        v68 = v67[3];
        if (v69 >= v68 >> 1)
          v67 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v68 > 1), v69 + 1, 1, v67);
        v67[2] = v69 + 1;
        v275 = v67;
        v60 = &v67[4 * v69];
        v60[4] = v63;
        v60[5] = v273;
        v60[6] = v272;
        v60[7] = v271;
      }
      v57 = Substring.index(after:)();
      v58 = v57;
      v59 = v57;
      if (v55 != v57 >> 14)
        continue;
      break;
    }
LABEL_67:
    if (v55 == v59 >> 14)
    {
      swift_bridgeObjectRelease();
      v56 = v275;
    }
    else
    {
      v56 = v275;
      if (v55 < v58 >> 14)
        goto LABEL_243;
      v70 = Substring.subscript.getter();
      v72 = v71;
      v74 = v73;
      v76 = v75;
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v275[2] + 1, 1, v275);
      v78 = v56[2];
      v77 = v56[3];
      if (v78 >= v77 >> 1)
        v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v77 > 1), v78 + 1, 1, v56);
      v56[2] = v78 + 1;
      v79 = &v56[4 * v78];
      v79[4] = v70;
      v79[5] = v72;
      v79[6] = v74;
      v79[7] = v76;
    }
LABEL_75:
    swift_bridgeObjectRelease();
    if (v56[2] == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.index(after:)();
      v80 = String.subscript.getter();
      v82 = v81;
      v84 = v83;
      v86 = v85;
      swift_bridgeObjectRelease();
      v41 = MEMORY[0x186DA4634](v80, v82, v84, v86);
      v42 = v87;
      goto LABEL_87;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v88 = swift_allocObject();
    *(_OWORD *)(v88 + 16) = xmmword_18205C850;
    if (!v56[2])
      goto LABEL_231;
    v89 = (Swift::String *)v88;
    swift_bridgeObjectRetain();
    v90 = Substring.lowercased()();
    swift_bridgeObjectRelease();
    v89[2] = v90;
    v91 = v56[2];
    if (!v91)
      goto LABEL_232;
    v92 = v91 - 1;
    if (v91 == 1)
    {
      swift_bridgeObjectRelease();
      v93 = MEMORY[0x1E0DEE9D8];
    }
    else
    {
      v291 = MEMORY[0x1E0DEE9D8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v92, 0);
      v93 = v291;
      lazy protocol witness table accessor for type Substring and conformance Substring();
      v94 = (ValueMetadata **)(v56 + 11);
      do
      {
        v95 = (uint64_t)*(v94 - 1);
        v96 = *v94;
        v292 = *(_OWORD *)(v94 - 3);
        v293 = v95;
        v294 = v96;
        swift_bridgeObjectRetain_n();
        String.init<A>(_:)();
        v97 = String._capitalized()();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        v99 = *(_QWORD *)(v291 + 16);
        v98 = *(_QWORD *)(v291 + 24);
        if (v99 >= v98 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v98 > 1, v99 + 1, 1);
        *(_QWORD *)(v291 + 16) = v99 + 1;
        *(Swift::String *)(v291 + 16 * v99 + 32) = v97;
        v94 += 4;
        --v92;
      }
      while (v92);
      swift_bridgeObjectRelease();
    }
    specialized Array.append<A>(contentsOf:)(v93);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    v41 = BidirectionalCollection<>.joined(separator:)();
    v42 = v100;
LABEL_87:
    swift_bridgeObjectRelease();
    if (v38 >> 14)
    {
      v101 = String.subscript.getter();
      v102 = MEMORY[0x186DA4634](v101);
      v104 = v103;
      swift_bridgeObjectRelease();
      *(_QWORD *)&v292 = v102;
      *((_QWORD *)&v292 + 1) = v104;
      swift_bridgeObjectRetain();
      v105 = v41;
      v106 = v42;
      if (v266 != v283)
      {
        String.append(_:)(*(Swift::String *)&v105);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v112 = String.subscript.getter();
        v113 = MEMORY[0x186DA4634](v112);
        v115 = v114;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v105 = v113;
        v106 = v115;
      }
      String.append(_:)(*(Swift::String *)&v105);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v42 = *((_QWORD *)&v292 + 1);
      v41 = v292;
      goto LABEL_94;
    }
    v6 = 0;
    if (v266 != v283)
    {
      v107 = String.subscript.getter();
      v108 = MEMORY[0x186DA4634](v107);
      v110 = v109;
      swift_bridgeObjectRelease();
      *(_QWORD *)&v292 = v41;
      *((_QWORD *)&v292 + 1) = v42;
      swift_bridgeObjectRetain();
      v111._countAndFlagsBits = v108;
      v111._object = v110;
      String.append(_:)(v111);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
LABEL_95:
    swift_bridgeObjectRetain();
    v116 = v296;
    v117 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v292 = v296;
    v296 = 0x8000000000000000;
    swift_bridgeObjectRetain();
    v119 = specialized __RawDictionaryStorage.find<A>(_:)(v41, v42);
    v120 = *(_QWORD *)(v292 + 16);
    v121 = (v118 & 1) == 0;
    v122 = v120 + v121;
    if (__OFADD__(v120, v121))
      goto LABEL_225;
    v123 = v118;
    if (*(_QWORD *)(v116 + 24) < v122)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v122, v117);
      v124 = v292;
      v125 = specialized __RawDictionaryStorage.find<A>(_:)(v41, v42);
      if ((v123 & 1) != (v126 & 1))
        goto LABEL_242;
      v119 = v125;
      if ((v123 & 1) != 0)
        goto LABEL_15;
LABEL_102:
      *(_QWORD *)(v124 + 8 * (v119 >> 6) + 64) |= 1 << v119;
      v127 = (uint64_t *)(*(_QWORD *)(v124 + 48) + 16 * v119);
      *v127 = v41;
      v127[1] = v42;
      v128 = *(_QWORD *)(v124 + 56) + 24 * v119;
      *(_QWORD *)v128 = v267;
      *(_QWORD *)(v128 + 8) = v269;
      *(_BYTE *)(v128 + 16) = v268;
      v129 = *(_QWORD *)(v124 + 16);
      v130 = __OFADD__(v129, 1);
      v131 = v129 + 1;
      if (v130)
        goto LABEL_228;
      *(_QWORD *)(v124 + 16) = v131;
LABEL_16:
      v296 = v124;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a1 = v270;
      v23 = JSONMap.loadValue(at:)(v270);
      v24 = v26;
      v25 = v27;
      if (v27 > 0xFDu)
        goto LABEL_7;
      continue;
    }
    break;
  }
  if ((v117 & 1) != 0)
  {
    v124 = v116;
    if ((v118 & 1) == 0)
      goto LABEL_102;
LABEL_15:
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONMap.Value>);
  v132 = static _DictionaryStorage.copy(original:)();
  v124 = v132;
  if (!*(_QWORD *)(v116 + 16))
  {
LABEL_131:
    swift_bridgeObjectRelease();
    if ((v123 & 1) == 0)
      goto LABEL_102;
    goto LABEL_15;
  }
  v280 = v6;
  v133 = (void *)(v132 + 64);
  v134 = v116 + 64;
  v135 = (unint64_t)((1 << *(_BYTE *)(v124 + 32)) + 63) >> 6;
  if (v124 != v116 || (unint64_t)v133 >= v134 + 8 * v135)
    memmove(v133, (const void *)(v116 + 64), 8 * v135);
  v136 = 0;
  *(_QWORD *)(v124 + 16) = *(_QWORD *)(v116 + 16);
  v137 = 1 << *(_BYTE *)(v116 + 32);
  if (v137 < 64)
    v138 = ~(-1 << v137);
  else
    v138 = -1;
  v139 = v138 & *(_QWORD *)(v116 + 64);
  v140 = (unint64_t)(v137 + 63) >> 6;
  while (2)
  {
    if (v139)
    {
      v141 = __clz(__rbit64(v139));
      v139 &= v139 - 1;
      v142 = v141 | (v136 << 6);
LABEL_113:
      v143 = 16 * v142;
      v144 = (uint64_t *)(*(_QWORD *)(v116 + 48) + 16 * v142);
      v146 = *v144;
      v145 = v144[1];
      v147 = 24 * v142;
      v148 = *(_QWORD *)(v116 + 56) + v147;
      v149 = *(_BYTE *)(v148 + 16);
      v150 = (_QWORD *)(*(_QWORD *)(v124 + 48) + v143);
      v151 = *(_OWORD *)v148;
      *v150 = v146;
      v150[1] = v145;
      v152 = *(_QWORD *)(v124 + 56) + v147;
      *(_OWORD *)v152 = v151;
      *(_BYTE *)(v152 + 16) = v149;
      swift_bridgeObjectRetain();
      continue;
    }
    break;
  }
  v153 = v136 + 1;
  if (__OFADD__(v136, 1))
    goto LABEL_235;
  v6 = v280;
  if (v153 >= v140)
    goto LABEL_131;
  v154 = *(_QWORD *)(v134 + 8 * v153);
  ++v136;
  if (v154)
    goto LABEL_130;
  v136 = v153 + 1;
  if (v153 + 1 >= v140)
    goto LABEL_131;
  v154 = *(_QWORD *)(v134 + 8 * v136);
  if (v154)
    goto LABEL_130;
  v136 = v153 + 2;
  if (v153 + 2 >= v140)
    goto LABEL_131;
  v154 = *(_QWORD *)(v134 + 8 * v136);
  if (v154)
    goto LABEL_130;
  v136 = v153 + 3;
  if (v153 + 3 >= v140)
    goto LABEL_131;
  v154 = *(_QWORD *)(v134 + 8 * v136);
  if (v154)
  {
LABEL_130:
    v139 = (v154 - 1) & v154;
    v142 = __clz(__rbit64(v154)) + (v136 << 6);
    goto LABEL_113;
  }
  v155 = v153 + 4;
  if (v155 >= v140)
    goto LABEL_131;
  v154 = *(_QWORD *)(v134 + 8 * v155);
  if (v154)
  {
    v136 = v155;
    goto LABEL_130;
  }
  while (1)
  {
    v136 = v155 + 1;
    if (__OFADD__(v155, 1))
      break;
    if (v136 >= v140)
      goto LABEL_131;
    v154 = *(_QWORD *)(v134 + 8 * v136);
    ++v155;
    if (v154)
      goto LABEL_130;
  }
LABEL_241:
  __break(1u);
LABEL_242:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_243:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_244:
  swift_unexpectedError();
  __break(1u);
LABEL_245:
  swift_unexpectedError();
  __break(1u);
LABEL_246:
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t JSONDecoderImpl.KeyedContainer.codingPath.getter(uint64_t a1, unint64_t a2)
{
  return _CodingPathNode.path.getter(a2);
}

uint64_t specialized JSONDecoderImpl.KeyedContainer.decoderForKeyNoThrow<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int64_t *v30;
  int64_t v31;
  _QWORD *v32;
  unint64_t v33;
  void *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  _QWORD *v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v10 = a4;
  v11 = a3;
  v59 = a1;
  v58 = a2;
  _CodingKey.stringValue.getter(a1, a2, a3, a4);
  if (*(_QWORD *)(a7 + 16) && (v14 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v13), (v15 & 1) != 0))
  {
    v16 = *(_QWORD *)(a7 + 56) + 24 * v14;
    v18 = *(_QWORD *)v16;
    v17 = *(_QWORD *)(v16 + 8);
    v53 = *(_BYTE *)(v16 + 16);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v19 = type metadata accessor for DecodingError();
    v56 = (void *)swift_allocError();
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context));
    v21[3] = (uint64_t)&type metadata for _CodingKey;
    v21[4] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    v22 = swift_allocObject();
    *v21 = v22;
    v11 = a3;
    *(_QWORD *)(v22 + 16) = a1;
    *(_QWORD *)(v22 + 24) = a2;
    *(_QWORD *)(v22 + 32) = a3;
    *(_BYTE *)(v22 + 40) = a4;
    outlined copy of _CodingKey(a1, a2, a3, a4);
    _CodingPathNode.path.getter(a6);
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._countAndFlagsBits = 2238496;
    v24._object = (void *)0xE300000000000000;
    String.append(_:)(v24);
    v59 = a1;
    v58 = a2;
    _CodingKey.stringValue.getter(a1, a2, a3, a4);
    String.append(_:)(v25);
    v10 = a4;
    swift_bridgeObjectRelease();
    v26._countAndFlagsBits = 3025186;
    v26._object = (void *)0xE300000000000000;
    String.append(_:)(v26);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x1E0DEC448], v19);
    swift_willThrow();

    v18 = 0;
    v17 = 0;
    v53 = -96;
  }
  v27 = *(_QWORD *)(a5 + 24);
  v55 = *(_QWORD *)(a5 + 32);
  v28 = (_QWORD *)swift_allocObject();
  v28[5] = &type metadata for _CodingKey;
  v28[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v29 = swift_allocObject();
  v28[2] = v29;
  *(_QWORD *)(v29 + 16) = v59;
  *(_QWORD *)(v29 + 24) = v58;
  *(_QWORD *)(v29 + 32) = v11;
  *(_BYTE *)(v29 + 40) = v10;
  v28[7] = a6;
  v54 = v17;
  if (a6 >> 62)
  {
    if (a6 >> 62 != 1)
    {
      v33 = 1;
      goto LABEL_10;
    }
    v30 = (int64_t *)((a6 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v30 = (int64_t *)(a6 + 64);
  }
  v31 = *v30;
  swift_retain();
  v33 = v31 + 1;
  if (__OFADD__(v31, 1))
  {
    __break(1u);
    goto LABEL_14;
  }
LABEL_10:
  v52 = v18;
  v28[8] = v33;
  v34 = *(void **)(a5 + 40);
  v51 = v10;
  v35 = *(_QWORD *)(a5 + 64);
  v36 = *(_QWORD *)(a5 + 80);
  v37 = *(_QWORD *)(a5 + 88);
  v45 = *(_QWORD *)(a5 + 72);
  v43 = *(_QWORD *)(a5 + 48);
  v44 = *(_QWORD *)(a5 + 104);
  v57 = *(_QWORD *)(a5 + 112);
  v38 = *(_QWORD *)(a5 + 128);
  v46 = *(_QWORD *)(a5 + 120);
  v47 = *(_QWORD *)(a5 + 96);
  v39 = *(_QWORD *)(a5 + 144);
  v48 = *(_QWORD *)(a5 + 136);
  v49 = *(_BYTE *)(a5 + 152);
  v50 = v11;
  v40 = *(_BYTE *)(a5 + 56);
  type metadata accessor for JSONDecoderImpl();
  a5 = swift_allocObject();
  *(_QWORD *)(a5 + 160) = v28;
  *(_QWORD *)(a5 + 24) = v27;
  *(_QWORD *)(a5 + 32) = v55;
  *(_QWORD *)(a5 + 40) = v34;
  *(_QWORD *)(a5 + 48) = v43;
  *(_BYTE *)(a5 + 56) = v40;
  *(_QWORD *)(a5 + 64) = v35;
  *(_QWORD *)(a5 + 72) = v45;
  *(_QWORD *)(a5 + 80) = v36;
  *(_QWORD *)(a5 + 88) = v37;
  *(_QWORD *)(a5 + 96) = v47;
  *(_QWORD *)(a5 + 104) = v44;
  *(_QWORD *)(a5 + 112) = v57;
  *(_QWORD *)(a5 + 120) = v46;
  *(_QWORD *)(a5 + 128) = v38;
  *(_QWORD *)(a5 + 136) = v48;
  *(_QWORD *)(a5 + 144) = v39;
  *(_BYTE *)(a5 + 152) = v49;
  outlined copy of _CodingKey(v59, v58, v50, v51);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of JSONEncoder.DateEncodingStrategy(v34, v43, v40);
  outlined copy of JSONEncoder.KeyEncodingStrategy(v35);
  outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v36, v37);
  outlined copy of JSONEncoder.KeyEncodingStrategy(v38);
  swift_bridgeObjectRetain();
  v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v27 = v32[2];
  v33 = v32[3];
  v31 = v27 + 1;
  if (v27 >= v33 >> 1)
LABEL_14:
    v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v33 > 1), v31, 1, v32);
  v32[2] = v31;
  v41 = &v32[3 * v27];
  v41[4] = v52;
  v41[5] = v54;
  *((_BYTE *)v41 + 48) = v53;
  *(_QWORD *)(a5 + 16) = v32;
  return a5;
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.codingPath.getter in conformance JSONDecoderImpl.KeyedContainer<A>(uint64_t a1, uint64_t a2)
{
  return protocol witness for KeyedDecodingContainerProtocol.codingPath.getter in conformance JSONDecoderImpl.KeyedContainer<A>(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))JSONDecoderImpl.KeyedContainer.codingPath.getter);
}

uint64_t JSONDecoderImpl.UnkeyedContainer.decodeNil()()
{
  uint64_t v0;
  uint64_t v1;
  unsigned int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  __int128 v22;
  ValueMetadata *v23;
  unint64_t v24;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(unsigned __int8 *)(v0 + 40);
  if (v2 < 0xFE)
  {
    v17 = *(_QWORD *)(v0 + 32);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 8);
    v4 = JSONMap.loadValue(at:)(v3);
    if (v6 > 0xFDu)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
      v7 = MEMORY[0x1E0DEDCE8];
      v8 = (_QWORD *)_CodingPathNode.path.getter(*(_QWORD *)(v0 + 72));
      v9 = *(_QWORD *)(v0 + 64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
      v11 = v8[2];
      v10 = v8[3];
      if (v11 >= v10 >> 1)
        v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v8);
      v23 = &type metadata for _CodingKey;
      v24 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      v12 = swift_allocObject();
      *(_QWORD *)&v22 = v12;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0;
      *(_QWORD *)(v12 + 16) = v9;
      *(_BYTE *)(v12 + 40) = 2;
      v8[2] = v11 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v22, (uint64_t)&v8[5 * v11 + 4]);
      v13 = type metadata accessor for DecodingError();
      swift_allocError();
      v15 = v14;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *v15 = v7;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v15, *MEMORY[0x1E0DEC460], v13);
      swift_willThrow();
      return v16 & 1;
    }
    v1 = v4;
    v17 = v5;
    LOBYTE(v2) = v6;
    *(_QWORD *)(v0 + 8) = JSONMap.offset(after:)(v3);
    *(_QWORD *)(v0 + 24) = v1;
    *(_QWORD *)(v0 + 32) = v17;
    *(_BYTE *)(v0 + 40) = v2;
  }
  if ((v2 & 0xE0) == 0xA0)
  {
    v16 = 0;
    if (!(v17 | v1) && v2 == 160)
    {
      v18 = *(_QWORD *)(v0 + 64);
      v19 = __OFADD__(v18, 1);
      v20 = v18 + 1;
      if (v19)
      {
        __break(1u);
        JUMPOUT(0x181E3067CLL);
      }
      *(_QWORD *)(v0 + 64) = v20;
      *(_QWORD *)(v0 + 24) = 0;
      *(_QWORD *)(v0 + 32) = 0;
      *(_BYTE *)(v0 + 40) = -2;
      v16 = 1;
    }
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t JSONDecoderImpl.UnkeyedContainer.nestedUnkeyedContainer()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD *v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v32;
  uint64_t *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  ValueMetadata *v43;
  unint64_t v44;
  uint64_t v45;

  v3 = v2;
  v4 = v1;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
  v7 = v1 + 3;
  v8 = *((unsigned __int8 *)v1 + 40);
  if (v8 < 0xFE)
  {
    v45 = v1[3];
    v41 = v1[4];
  }
  else
  {
    v9 = v6;
    v10 = v1[1];
    v11 = JSONMap.loadValue(at:)(v10);
    if (v13 > 0xFDu)
    {
      if (v9 == __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder))
        swift_bridgeObjectRelease();
      v14 = _CodingPathNode.path.getter(v1[9]);
      v15 = v1[8];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_6;
      goto LABEL_35;
    }
    v23 = v11;
    LOBYTE(v8) = v13;
    v24 = v12;
    v1[1] = JSONMap.offset(after:)(v10);
    v45 = v23;
    v1[3] = v23;
    v1[4] = v24;
    v41 = v24;
    *((_BYTE *)v1 + 40) = v8;
  }
  v25 = *v1;
  v27 = v4[8];
  v26 = v4[9];
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v27;
  *(_QWORD *)(v9 + 24) = v26;
  if (v26 >> 62)
  {
    if (v26 >> 62 != 1)
    {
      v30 = 1;
LABEL_16:
      v39 = a1;
      v40 = v3;
      *(_QWORD *)(v9 + 32) = v30;
      swift_retain();
      swift_release();
      v3 = *(_QWORD *)(v25 + 160);
      *(_QWORD *)(v25 + 160) = v9 | 0x4000000000000000;
      a1 = *(uint64_t **)(v25 + 16);
      swift_retain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v25 + 16) = a1;
      v38 = v27;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        goto LABEL_17;
      goto LABEL_31;
    }
    v28 = (uint64_t *)((v26 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v28 = (uint64_t *)(v26 + 64);
  }
  v29 = *v28;
  swift_retain_n();
  v30 = v29 + 1;
  if (!__OFADD__(v29, 1))
    goto LABEL_16;
  __break(1u);
LABEL_31:
  a1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2] + 1, 1, a1);
  *(_QWORD *)(v25 + 16) = a1;
LABEL_17:
  v14 = a1[2];
  v32 = a1[3];
  if (v14 >= v32 >> 1)
    a1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v32 > 1), v14 + 1, 1, a1);
  a1[2] = v14 + 1;
  v33 = &a1[3 * v14];
  v33[4] = v45;
  v33[5] = v41;
  *((_BYTE *)v33 + 48) = v8;
  *(_QWORD *)(v25 + 16) = a1;
  swift_retain();
  JSONDecoderImpl.unkeyedContainer()(v39);
  v15 = v40;
  if (!v40)
  {
    swift_release();
    *(_QWORD *)(v25 + 160) = v3;
    swift_retain();
    swift_release();
    v36 = *(_QWORD **)(v25 + 16);
    if (v36[2])
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
      {
        v37 = v36[2];
        if (v37)
          goto LABEL_27;
        goto LABEL_38;
      }
    }
    else
    {
      __break(1u);
    }
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v36);
    v36 = (_QWORD *)result;
    v37 = *(_QWORD *)(result + 16);
    if (v37)
    {
LABEL_27:
      v36[2] = v37 - 1;
      *(_QWORD *)(v25 + 16) = v36;
      swift_release();
      swift_release();
      result = swift_release();
      if (!__OFADD__(v38, 1))
      {
        v4[8] = v38 + 1;
        *v7 = 0;
        v7[1] = 0;
        *((_BYTE *)v4 + 40) = -2;
        return result;
      }
      goto LABEL_39;
    }
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
    return result;
  }
  swift_release();
  *(_QWORD *)(v25 + 160) = v3;
  swift_retain();
  swift_release();
  v34 = *(_QWORD **)(v25 + 16);
  if (!v34[2])
  {
    __break(1u);
LABEL_33:
    v34 = specialized _ArrayBuffer._consumeAndCreateNew()(v34);
    v35 = v34[2];
    if (v35)
      goto LABEL_23;
    goto LABEL_34;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_33;
  v35 = v34[2];
  if (v35)
  {
LABEL_23:
    v34[2] = v35 - 1;
    *(_QWORD *)(v25 + 16) = v34;
    swift_release();
    swift_release();
    return swift_release();
  }
LABEL_34:
  __break(1u);
LABEL_35:
  v14 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v14 + 16) + 1, 1, (_QWORD *)v14);
LABEL_6:
  v17 = *(_QWORD *)(v14 + 16);
  v16 = *(_QWORD *)(v14 + 24);
  if (v17 >= v16 >> 1)
    v14 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v16 > 1), v17 + 1, 1, (_QWORD *)v14);
  v43 = &type metadata for _CodingKey;
  v44 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v18 = swift_allocObject();
  *(_QWORD *)&v42 = v18;
  *(_QWORD *)(v18 + 24) = 0;
  *(_QWORD *)(v18 + 32) = 0;
  *(_QWORD *)(v18 + 16) = v15;
  *(_BYTE *)(v18 + 40) = 2;
  *(_QWORD *)(v14 + 16) = v17 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v42, v14 + 40 * v17 + 32);
  v19 = type metadata accessor for DecodingError();
  swift_allocError();
  v21 = v20;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *v21 = v9;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x1E0DEC460], v19);
  return swift_willThrow();
}

uint64_t protocol witness for UnkeyedDecodingContainer.codingPath.getter in conformance JSONDecoderImpl.UnkeyedContainer()
{
  uint64_t v0;

  return _CodingPathNode.path.getter(*(_QWORD *)(v0 + 72));
}

uint64_t protocol witness for UnkeyedDecodingContainer.currentIndex.getter in conformance JSONDecoderImpl.UnkeyedContainer()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64);
}

uint64_t protocol witness for UnkeyedDecodingContainer.decodeNil() in conformance JSONDecoderImpl.UnkeyedContainer()
{
  return JSONDecoderImpl.UnkeyedContainer.decodeNil()() & 1;
}

uint64_t protocol witness for UnkeyedDecodingContainer.nestedUnkeyedContainer() in conformance JSONDecoderImpl.UnkeyedContainer@<X0>(uint64_t *a1@<X8>)
{
  return JSONDecoderImpl.UnkeyedContainer.nestedUnkeyedContainer()(a1);
}

unint64_t specialized Float.init<A>(exactly:)(unint64_t result)
{
  float v1;
  uint64_t v2;
  BOOL v3;

  v1 = (float)result;
  if ((float)result >= 1.8447e19)
  {
    v2 = 0;
    v3 = 1;
    return v2 | ((unint64_t)v3 << 32);
  }
  v2 = LODWORD(v1);
  if ((~LODWORD(v1) & 0x7F800000) != 0)
  {
    v3 = (unint64_t)v1 != result;
    if ((unint64_t)v1 != result)
      v2 = 0;
    return v2 | ((unint64_t)v3 << 32);
  }
  __break(1u);
  return result;
}

uint64_t specialized Float.init<A>(exactly:)(uint64_t result)
{
  float v1;
  uint64_t v2;
  BOOL v3;

  v1 = (float)result;
  if ((float)result >= 9.2234e18)
  {
    v2 = 0;
    v3 = 1;
    return v2 | ((unint64_t)v3 << 32);
  }
  v2 = LODWORD(v1);
  if ((~LODWORD(v1) & 0x7F800000) != 0)
  {
    if (v1 > -9.2234e18)
    {
      v3 = (uint64_t)v1 != result;
      if ((uint64_t)v1 != result)
        v2 = 0;
      return v2 | ((unint64_t)v3 << 32);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL specialized static FixedWidthInteger._convert<A>(from:)(uint64_t a1, double a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v4 = (*(_QWORD *)&a2 >> 52) & 0x7FFLL;
  v5 = *(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL;
  v6 = v4 | *(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL;
  if (!v6)
  {
    v12 = 0;
    result = 1;
    goto LABEL_25;
  }
  if (v4 == 2047)
    goto LABEL_28;
  v7 = Double.exponent.getter();
  if (v7 > 63)
    goto LABEL_28;
  v8 = v7;
  v9 = Double.significandWidth.getter();
  result = v8 >= v9;
  v11 = v9 + __clz(__rbit64(v5));
  v12 = v8 - v11;
  if (__OFSUB__(v8, v11))
  {
    __break(1u);
LABEL_27:
    if (a2 < 0.0)
    {
LABEL_36:
      LOBYTE(v6) = 0;
      v12 = 0x8000000000000000;
      goto LABEL_25;
    }
LABEL_28:
    v12 = 0;
    result = 0;
    LOBYTE(v6) = 1;
    goto LABEL_25;
  }
  if (v11 > 63)
  {
    if (v12 < -64 || v12 > 64)
      goto LABEL_11;
  }
  else if (v12 < -64 || v12 > 64)
  {
    goto LABEL_11;
  }
  if (v12 < 0)
    goto LABEL_32;
  if ((unint64_t)v12 < 0x40)
  {
    v14 = v5 << v12;
    if (v8 != 63)
      goto LABEL_17;
LABEL_34:
    if (a2 < 0.0 && !v14)
      goto LABEL_36;
    goto LABEL_28;
  }
LABEL_11:
  if (v8 == 63)
    goto LABEL_27;
  v13 = 0;
  v14 = 0;
  if (v8 < 0)
    goto LABEL_20;
LABEL_19:
  v13 = 1 << v8;
LABEL_20:
  while (1)
  {
    v12 = v14 | v13;
    if (a2 >= 0.0)
      break;
    if ((v12 & 0x8000000000000000) == 0)
    {
      LOBYTE(v6) = 0;
      v12 = -v12;
      goto LABEL_25;
    }
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    if ((unint64_t)v12 <= 0xFFFFFFFFFFFFFFC0)
      goto LABEL_11;
    v14 = v5 >> -(char)v12;
    if (v8 == 63)
      goto LABEL_34;
LABEL_17:
    if ((v8 & 0x8000000000000000) == 0)
      goto LABEL_19;
    v13 = 0;
  }
  if (v12 < 0)
    goto LABEL_31;
  LOBYTE(v6) = 0;
LABEL_25:
  *(_QWORD *)a1 = v12;
  *(_BYTE *)(a1 + 8) = v6;
  return result;
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _BOOL8 result;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v3 = (*(_QWORD *)&a2 >> 52) & 0x7FFLL;
  v4 = *(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL;
  v5 = v3 | *(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL;
  if (v5)
  {
    result = 0;
    v5 = 0;
    v7 = 1;
    if (v3 != 2047 && a2 > -1.0)
    {
      v8 = Double.exponent.getter();
      if (v8 <= 63)
      {
        v9 = v8;
        v10 = Double.significandWidth.getter();
        v11 = v10 + __clz(__rbit64(v4));
        v12 = v9 - v11;
        if (__OFSUB__(v9, v11))
        {
          __break(1u);
        }
        else
        {
          if (v11 > 63)
          {
            if (v12 < -64 || v12 > 64)
              goto LABEL_12;
          }
          else if (v12 < -64 || v12 > 64)
          {
            goto LABEL_12;
          }
          if ((v12 & 0x8000000000000000) == 0)
          {
            if ((unint64_t)v12 < 0x40)
            {
              v13 = v4 << v12;
              if (v9 < 0)
              {
LABEL_17:
                v14 = 0;
                goto LABEL_24;
              }
LABEL_23:
              v14 = 1 << v9;
              goto LABEL_24;
            }
            goto LABEL_12;
          }
        }
        if ((unint64_t)v12 > 0xFFFFFFFFFFFFFFC0)
        {
          v13 = v4 >> (v11 - v9);
          if (v9 < 0)
            goto LABEL_17;
          goto LABEL_23;
        }
LABEL_12:
        v13 = 0;
        v14 = 0;
        if (v9 < 0)
        {
LABEL_24:
          v7 = 0;
          v5 = v13 | v14;
          result = v9 >= v10;
          goto LABEL_25;
        }
        goto LABEL_23;
      }
      v5 = 0;
      result = 0;
      v7 = 1;
    }
  }
  else
  {
    v7 = 0;
    result = 1;
  }
LABEL_25:
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v7;
  return result;
}

{
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  _BOOL8 result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  v3 = LODWORD(a2);
  v4 = (*(_QWORD *)&a2 >> 52) & 0x7FFLL;
  v5 = *(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL;
  v6 = v4 | *(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL;
  if (!v6)
  {
    v7 = 0;
    result = 1;
    goto LABEL_25;
  }
  LOWORD(v6) = 0;
  v7 = 1;
  if (v4 == 2047)
  {
    result = 0;
  }
  else
  {
    result = 0;
    if (a2 > -1.0)
    {
      v9 = Double.exponent.getter();
      if (v9 > 15)
      {
        LOWORD(v6) = 0;
        result = 0;
        v7 = 1;
        goto LABEL_25;
      }
      v10 = v9;
      v11 = Double.significandWidth.getter();
      v12 = v11 + __clz(__rbit64(v5));
      v6 = v10 - v12;
      if (__OFSUB__(v10, v12))
      {
        __break(1u);
      }
      else
      {
        if (v12 <= 15)
        {
          if (v6 < -16 || v6 > 16)
          {
LABEL_9:
            LOWORD(v6) = 0;
            LOWORD(v13) = 0;
            if ((v10 & 0x8000000000000000) == 0)
              goto LABEL_23;
            goto LABEL_24;
          }
          if (v6 < 0)
          {
            if ((unint64_t)v6 <= 0xFFFFFFFFFFFFFFF0)
              goto LABEL_9;
            LODWORD(v6) = (unsigned __int16)v3 >> (v12 - v10);
          }
          else
          {
            if ((unint64_t)v6 >= 0x10)
              goto LABEL_9;
            LODWORD(v6) = v3 << v6;
          }
LABEL_21:
          if ((v10 & 0x8000000000000000) == 0)
          {
LABEL_23:
            v13 = 1 << v10;
            goto LABEL_24;
          }
          LOWORD(v13) = 0;
LABEL_24:
          v7 = 0;
          LOWORD(v6) = v6 | v13;
          result = v10 >= v11;
          goto LABEL_25;
        }
        if ((unint64_t)(v6 - 65) < 0xFFFFFFFFFFFFFF7FLL)
        {
          LOWORD(v6) = 0;
          goto LABEL_21;
        }
        if ((v6 & 0x8000000000000000) == 0)
        {
          if ((unint64_t)v6 >= 0x40)
            LOWORD(v6) = 0;
          else
            v6 = v5 << v6;
          goto LABEL_21;
        }
      }
      if ((unint64_t)v6 <= 0xFFFFFFFFFFFFFFC0)
        LOWORD(v6) = 0;
      else
        v6 = v5 >> (v12 - v10);
      goto LABEL_21;
    }
  }
LABEL_25:
  *(_WORD *)a1 = v6;
  *(_BYTE *)(a1 + 2) = v7;
  return result;
}

{
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;

  v4 = LODWORD(a2);
  v5 = (*(_QWORD *)&a2 >> 52) & 0x7FFLL;
  v6 = *(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL;
  v7 = v5 | *(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL;
  if (!v7)
  {
    LOWORD(v15) = 0;
    result = 1;
    goto LABEL_29;
  }
  if (v5 == 2047 || (v8 = Double.exponent.getter(), v8 > 15))
  {
LABEL_38:
    LOWORD(v15) = 0;
    result = 0;
    LOBYTE(v7) = 1;
    goto LABEL_29;
  }
  v9 = v8;
  v10 = Double.significandWidth.getter();
  result = v9 >= v10;
  v12 = v10 + __clz(__rbit64(v6));
  v13 = v9 - v12;
  if (__OFSUB__(v9, v12))
  {
    __break(1u);
    goto LABEL_31;
  }
  if (v12 > 15)
  {
    if ((unint64_t)(v13 - 65) >= 0xFFFFFFFFFFFFFF7FLL)
    {
      if (v13 < 0)
      {
        if ((unint64_t)v13 <= 0xFFFFFFFFFFFFFFC0)
          LOWORD(v13) = 0;
        else
          v13 = v6 >> (v12 - v9);
      }
      else if ((unint64_t)v13 >= 0x40)
      {
        LOWORD(v13) = 0;
      }
      else
      {
        v13 = v6 << v13;
      }
    }
    else
    {
      LOWORD(v13) = 0;
    }
LABEL_20:
    if (v9 != 15)
    {
      if (v9 < 0)
      {
        LOWORD(v14) = 0;
        goto LABEL_24;
      }
      goto LABEL_23;
    }
LABEL_31:
    if (a2 >= 0.0 || (_WORD)v13)
      goto LABEL_38;
    goto LABEL_33;
  }
  if (v13 >= -16 && v13 <= 16)
  {
    if (v13 < 0)
    {
      if ((unint64_t)v13 <= 0xFFFFFFFFFFFFFFF0)
        goto LABEL_8;
      LODWORD(v13) = (unsigned __int16)v4 >> (v12 - v9);
    }
    else
    {
      if ((unint64_t)v13 >= 0x10)
        goto LABEL_8;
      LODWORD(v13) = v4 << v13;
    }
    goto LABEL_20;
  }
LABEL_8:
  if (v9 == 15)
    goto LABEL_37;
  LOWORD(v14) = 0;
  LOWORD(v13) = 0;
  if ((v9 & 0x8000000000000000) == 0)
LABEL_23:
    v14 = 1 << v9;
LABEL_24:
  v15 = (__int16)(v13 | v14);
  if (a2 >= 0.0)
  {
    if ((v15 & 0x80000000) == 0)
    {
      LOBYTE(v7) = 0;
      goto LABEL_29;
    }
    goto LABEL_36;
  }
  if (v15 < 0)
  {
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    if (a2 >= 0.0)
      goto LABEL_38;
LABEL_33:
    LOBYTE(v7) = 0;
    LOWORD(v15) = 0x8000;
    goto LABEL_29;
  }
  LOBYTE(v7) = 0;
  v15 = -v15;
LABEL_29:
  *(_WORD *)a1 = v15;
  *(_BYTE *)(a1 + 2) = v7;
  return result;
}

{
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;

  v4 = LODWORD(a2);
  v5 = (*(_QWORD *)&a2 >> 52) & 0x7FFLL;
  v6 = *(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL;
  v7 = v5 | *(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL;
  if (!v7)
  {
    v15 = 0;
    result = 1;
    goto LABEL_29;
  }
  if (v5 == 2047 || (v8 = Double.exponent.getter(), v8 > 31))
  {
LABEL_38:
    v15 = 0;
    result = 0;
    LOBYTE(v7) = 1;
    goto LABEL_29;
  }
  v9 = v8;
  v10 = Double.significandWidth.getter();
  result = v9 >= v10;
  v12 = v10 + __clz(__rbit64(v6));
  v13 = v9 - v12;
  if (__OFSUB__(v9, v12))
  {
    __break(1u);
    goto LABEL_31;
  }
  if (v12 > 31)
  {
    if ((unint64_t)(v13 - 65) >= 0xFFFFFFFFFFFFFF7FLL)
    {
      if (v13 < 0)
      {
        if ((unint64_t)v13 <= 0xFFFFFFFFFFFFFFC0)
          LODWORD(v13) = 0;
        else
          v13 = v6 >> (v12 - v9);
      }
      else if ((unint64_t)v13 >= 0x40)
      {
        LODWORD(v13) = 0;
      }
      else
      {
        v13 = v6 << v13;
      }
    }
    else
    {
      LODWORD(v13) = 0;
    }
LABEL_20:
    if (v9 != 31)
    {
      if (v9 < 0)
      {
        v14 = 0;
        goto LABEL_24;
      }
      goto LABEL_23;
    }
LABEL_31:
    if (a2 >= 0.0 || (_DWORD)v13)
      goto LABEL_38;
    goto LABEL_33;
  }
  if (v13 >= -32 && v13 <= 32)
  {
    if (v13 < 0)
    {
      if ((unint64_t)v13 <= 0xFFFFFFFFFFFFFFE0)
        goto LABEL_8;
      LODWORD(v13) = v4 >> (v12 - v9);
    }
    else
    {
      if ((unint64_t)v13 >= 0x20)
        goto LABEL_8;
      LODWORD(v13) = v4 << v13;
    }
    goto LABEL_20;
  }
LABEL_8:
  if (v9 == 31)
    goto LABEL_37;
  v14 = 0;
  LODWORD(v13) = 0;
  if ((v9 & 0x8000000000000000) == 0)
LABEL_23:
    v14 = 1 << v9;
LABEL_24:
  v15 = v13 | v14;
  if (a2 >= 0.0)
  {
    if ((v15 & 0x80000000) == 0)
    {
      LOBYTE(v7) = 0;
      goto LABEL_29;
    }
    goto LABEL_36;
  }
  if (v15 < 0)
  {
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    if (a2 >= 0.0)
      goto LABEL_38;
LABEL_33:
    LOBYTE(v7) = 0;
    v15 = 0x80000000;
    goto LABEL_29;
  }
  LOBYTE(v7) = 0;
  v15 = -v15;
LABEL_29:
  *(_DWORD *)a1 = v15;
  *(_BYTE *)(a1 + 4) = v7;
  return result;
}

{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  _BOOL8 result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  v3 = LODWORD(a2);
  v4 = (*(_QWORD *)&a2 >> 52) & 0x7FFLL;
  v5 = *(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL;
  v6 = v4 | *(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL;
  if (!v6)
  {
    v7 = 0;
    result = 1;
    goto LABEL_25;
  }
  LODWORD(v6) = 0;
  v7 = 1;
  if (v4 == 2047)
  {
    result = 0;
  }
  else
  {
    result = 0;
    if (a2 > -1.0)
    {
      v9 = Double.exponent.getter();
      if (v9 > 31)
      {
        LODWORD(v6) = 0;
        result = 0;
        v7 = 1;
        goto LABEL_25;
      }
      v10 = v9;
      v11 = Double.significandWidth.getter();
      v12 = v11 + __clz(__rbit64(v5));
      v6 = v10 - v12;
      if (__OFSUB__(v10, v12))
      {
        __break(1u);
      }
      else
      {
        if (v12 <= 31)
        {
          if (v6 < -32 || v6 > 32)
          {
LABEL_9:
            LODWORD(v6) = 0;
            v13 = 0;
            if ((v10 & 0x8000000000000000) == 0)
              goto LABEL_23;
            goto LABEL_24;
          }
          if (v6 < 0)
          {
            if ((unint64_t)v6 <= 0xFFFFFFFFFFFFFFE0)
              goto LABEL_9;
            LODWORD(v6) = v3 >> (v12 - v10);
          }
          else
          {
            if ((unint64_t)v6 >= 0x20)
              goto LABEL_9;
            LODWORD(v6) = v3 << v6;
          }
LABEL_21:
          if ((v10 & 0x8000000000000000) == 0)
          {
LABEL_23:
            v13 = 1 << v10;
            goto LABEL_24;
          }
          v13 = 0;
LABEL_24:
          v7 = 0;
          LODWORD(v6) = v6 | v13;
          result = v10 >= v11;
          goto LABEL_25;
        }
        if ((unint64_t)(v6 - 65) < 0xFFFFFFFFFFFFFF7FLL)
        {
          LODWORD(v6) = 0;
          goto LABEL_21;
        }
        if ((v6 & 0x8000000000000000) == 0)
        {
          if ((unint64_t)v6 >= 0x40)
            LODWORD(v6) = 0;
          else
            v6 = v5 << v6;
          goto LABEL_21;
        }
      }
      if ((unint64_t)v6 <= 0xFFFFFFFFFFFFFFC0)
        LODWORD(v6) = 0;
      else
        v6 = v5 >> (v12 - v10);
      goto LABEL_21;
    }
  }
LABEL_25:
  *(_DWORD *)a1 = v6;
  *(_BYTE *)(a1 + 4) = v7;
  return result;
}

BOOL specialized static FixedWidthInteger._convert<A>(from:)(_BYTE *a1, double a2)
{
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  _BOOL8 result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  v3 = LODWORD(a2);
  v4 = (*(_QWORD *)&a2 >> 52) & 0x7FFLL;
  v5 = *(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL;
  v6 = v4 | *(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL;
  if (!v6)
  {
    v7 = 0;
    result = 1;
    goto LABEL_25;
  }
  LOBYTE(v6) = 0;
  v7 = 1;
  if (v4 == 2047)
  {
    result = 0;
  }
  else
  {
    result = 0;
    if (a2 > -1.0)
    {
      v9 = Double.exponent.getter();
      if (v9 > 7)
      {
        LOBYTE(v6) = 0;
        result = 0;
        v7 = 1;
        goto LABEL_25;
      }
      v10 = v9;
      v11 = Double.significandWidth.getter();
      v12 = v11 + __clz(__rbit64(v5));
      v6 = v10 - v12;
      if (__OFSUB__(v10, v12))
      {
        __break(1u);
      }
      else
      {
        if (v12 <= 7)
        {
          if (v6 < -8 || v6 > 8)
          {
LABEL_9:
            LOBYTE(v6) = 0;
            LOBYTE(v13) = 0;
            if ((v10 & 0x8000000000000000) == 0)
              goto LABEL_23;
            goto LABEL_24;
          }
          if (v6 < 0)
          {
            if ((unint64_t)v6 <= 0xFFFFFFFFFFFFFFF8)
              goto LABEL_9;
            LODWORD(v6) = v3 >> (v12 - v10);
          }
          else
          {
            if ((unint64_t)v6 >= 8)
              goto LABEL_9;
            LODWORD(v6) = v3 << v6;
          }
LABEL_21:
          if ((v10 & 0x8000000000000000) == 0)
          {
LABEL_23:
            v13 = 1 << v10;
            goto LABEL_24;
          }
          LOBYTE(v13) = 0;
LABEL_24:
          v7 = 0;
          LOBYTE(v6) = v6 | v13;
          result = v10 >= v11;
          goto LABEL_25;
        }
        if ((unint64_t)(v6 - 65) < 0xFFFFFFFFFFFFFF7FLL)
        {
          LOBYTE(v6) = 0;
          goto LABEL_21;
        }
        if ((v6 & 0x8000000000000000) == 0)
        {
          if ((unint64_t)v6 >= 0x40)
            LOBYTE(v6) = 0;
          else
            v6 = v5 << v6;
          goto LABEL_21;
        }
      }
      if ((unint64_t)v6 <= 0xFFFFFFFFFFFFFFC0)
        LOBYTE(v6) = 0;
      else
        v6 = v5 >> (v12 - v10);
      goto LABEL_21;
    }
  }
LABEL_25:
  *a1 = v6;
  a1[1] = v7;
  return result;
}

{
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;

  v4 = LODWORD(a2);
  v5 = (*(_QWORD *)&a2 >> 52) & 0x7FFLL;
  v6 = *(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL;
  v7 = v5 | *(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL;
  if (!v7)
  {
    LOBYTE(v15) = 0;
    result = 1;
    goto LABEL_29;
  }
  if (v5 == 2047 || (v8 = Double.exponent.getter(), v8 > 7))
  {
LABEL_38:
    LOBYTE(v15) = 0;
    result = 0;
    LOBYTE(v7) = 1;
    goto LABEL_29;
  }
  v9 = v8;
  v10 = Double.significandWidth.getter();
  result = v9 >= v10;
  v12 = v10 + __clz(__rbit64(v6));
  v13 = v9 - v12;
  if (__OFSUB__(v9, v12))
  {
    __break(1u);
    goto LABEL_31;
  }
  if (v12 > 7)
  {
    if ((unint64_t)(v13 - 65) >= 0xFFFFFFFFFFFFFF7FLL)
    {
      if (v13 < 0)
      {
        if ((unint64_t)v13 <= 0xFFFFFFFFFFFFFFC0)
          LOBYTE(v13) = 0;
        else
          v13 = v6 >> (v12 - v9);
      }
      else if ((unint64_t)v13 >= 0x40)
      {
        LOBYTE(v13) = 0;
      }
      else
      {
        v13 = v6 << v13;
      }
    }
    else
    {
      LOBYTE(v13) = 0;
    }
LABEL_20:
    if (v9 != 7)
    {
      if (v9 < 0)
      {
        LOBYTE(v14) = 0;
        goto LABEL_24;
      }
      goto LABEL_23;
    }
LABEL_31:
    if (a2 >= 0.0 || (_BYTE)v13)
      goto LABEL_38;
    goto LABEL_33;
  }
  if (v13 >= -8 && v13 <= 8)
  {
    if (v13 < 0)
    {
      if ((unint64_t)v13 <= 0xFFFFFFFFFFFFFFF8)
        goto LABEL_8;
      LODWORD(v13) = v4 >> (v12 - v9);
    }
    else
    {
      if ((unint64_t)v13 >= 8)
        goto LABEL_8;
      LODWORD(v13) = v4 << v13;
    }
    goto LABEL_20;
  }
LABEL_8:
  if (v9 == 7)
    goto LABEL_37;
  LOBYTE(v14) = 0;
  LOBYTE(v13) = 0;
  if ((v9 & 0x8000000000000000) == 0)
LABEL_23:
    v14 = 1 << v9;
LABEL_24:
  v15 = (char)(v13 | v14);
  if (a2 >= 0.0)
  {
    if ((v15 & 0x80000000) == 0)
    {
      LOBYTE(v7) = 0;
      goto LABEL_29;
    }
    goto LABEL_36;
  }
  if (v15 < 0)
  {
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    if (a2 >= 0.0)
      goto LABEL_38;
LABEL_33:
    LOBYTE(v7) = 0;
    LOBYTE(v15) = 0x80;
    goto LABEL_29;
  }
  LOBYTE(v7) = 0;
  v15 = -v15;
LABEL_29:
  *a1 = v15;
  a1[1] = v7;
  return result;
}

uint64_t partial apply for closure #1 in JSONDecoder.decode<A>(_:from:configuration:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t v6;

  return specialized JSONDecoderImpl.unwrap<A, B>(_:as:configuration:for:_:)(a1, a2, a3, v4[4], v4[5], 0x8000000000000000, 0, 0, a4, 0, 0xFFu, v4[2], v6);
}

double sub_181E31A24@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v3;
  double result;
  __int128 v5;
  char v6;

  (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)a1 + 104))(&v5);
  v3 = v6;
  result = *(double *)&v5;
  *(_OWORD *)a2 = v5;
  *(_BYTE *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_181E31A6C(uint64_t a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  char v4;
  uint64_t (*v5)(id *);
  id v7[2];
  char v8;

  v2 = *(void **)(a1 + 8);
  v3 = *a2;
  v4 = *(_BYTE *)(a1 + 16);
  v7[0] = *(id *)a1;
  v7[1] = v2;
  v8 = v4;
  v5 = *(uint64_t (**)(id *))(*(_QWORD *)v3 + 112);
  outlined copy of JSONEncoder.DateEncodingStrategy(v7[0], (uint64_t)v2, v4);
  return v5(v7);
}

double sub_181E31ABC@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)a1 + 128))(&v4);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t sub_181E31AFC(unint64_t *a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(unint64_t *);
  unint64_t v6[2];

  v2 = a1[1];
  v3 = *a2;
  v6[0] = *a1;
  v6[1] = v2;
  v4 = *(uint64_t (**)(unint64_t *))(*(_QWORD *)v3 + 136);
  outlined copy of JSONEncoder.KeyEncodingStrategy(v6[0]);
  return v4(v6);
}

double sub_181E31B44@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v3;
  double result;
  _OWORD v5[2];
  __int128 v6;

  (*(void (**)(_OWORD *__return_ptr))(**(_QWORD **)a1 + 152))(v5);
  v3 = v5[1];
  *a2 = v5[0];
  a2[1] = v3;
  result = *(double *)&v6;
  a2[2] = v6;
  return result;
}

double sub_181E31B90@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)a1 + 176))(&v4);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t sub_181E31BD0(unint64_t *a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(unint64_t *);
  unint64_t v6[2];

  v2 = a1[1];
  v3 = *a2;
  v6[0] = *a1;
  v6[1] = v2;
  v4 = *(uint64_t (**)(unint64_t *))(*(_QWORD *)v3 + 184);
  outlined copy of JSONEncoder.KeyEncodingStrategy(v6[0]);
  return v4(v6);
}

uint64_t sub_181E31C18@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 200))();
  *a2 = result;
  return result;
}

uint64_t sub_181E31C48(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 208);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_181E31C78@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 224))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_181E31CAC(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 232))(*a1);
}

uint64_t sub_181E31CD8@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 248))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_181E31D0C(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 256))(*a1);
}

uint64_t ObjC metadata update function for JSONDecoder()
{
  return type metadata accessor for JSONDecoder();
}

uint64_t method lookup function for JSONDecoder()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of JSONDecoder.dateDecodingStrategy.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of JSONDecoder.dateDecodingStrategy.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of JSONDecoder.dataDecodingStrategy.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of JSONDecoder.dataDecodingStrategy.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of JSONDecoder.nonConformingFloatDecodingStrategy.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of JSONDecoder.nonConformingFloatDecodingStrategy.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of JSONDecoder.keyDecodingStrategy.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of JSONDecoder.keyDecodingStrategy.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of JSONDecoder.allowsJSON5.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of JSONDecoder.allowsJSON5.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of JSONDecoder.allowsJSON5.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of JSONDecoder.assumesTopLevelDictionary.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of JSONDecoder.assumesTopLevelDictionary.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of JSONDecoder.assumesTopLevelDictionary.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of JSONDecoder.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 296))();
}

uint64_t dispatch thunk of JSONDecoder.decode<A>(_:from:configuration:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 328))();
}

uint64_t dispatch thunk of JSONDecoder.decode<A, B>(_:from:configuration:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 336))();
}

uint64_t initializeBufferWithCopyOfBuffer for JSONDecoder.DateDecodingStrategy(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  char v5;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of JSONEncoder.DateEncodingStrategy(*(id *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for JSONDecoder.DateDecodingStrategy(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  char v5;
  void *v6;
  uint64_t v7;
  char v8;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of JSONEncoder.DateEncodingStrategy(*(id *)a2, v4, v5);
  v6 = *(void **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of JSONEncoder.DateEncodingStrategy(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for JSONDecoder.DateDecodingStrategy(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(void **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of JSONEncoder.DateEncodingStrategy(v4, v5, v6);
  return a1;
}

uint64_t destroy for JSONDecoder._Options(uint64_t a1)
{
  outlined consume of JSONEncoder.DateEncodingStrategy(*(void **)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  if (*(_QWORD *)(a1 + 24) >= 2uLL)
    swift_release();
  if (*(_QWORD *)(a1 + 48))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(a1 + 88) >= 2uLL)
    swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for JSONDecoder._Options(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  unint64_t v13;
  uint64_t v14;

  v4 = *(id *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  outlined copy of JSONEncoder.DateEncodingStrategy(*(id *)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  if (v7 >= 2)
  {
    v11 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = v11;
    swift_retain();
    v8 = *(_QWORD *)(a2 + 48);
    if (v8)
      goto LABEL_3;
  }
  else
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    v8 = *(_QWORD *)(a2 + 48);
    if (v8)
    {
LABEL_3:
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = v8;
      v9 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = v9;
      v10 = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = v10;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_6;
    }
  }
  v12 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v12;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
LABEL_6:
  v13 = *(_QWORD *)(a2 + 88);
  if (v13 >= 2)
  {
    v14 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 88) = v13;
    *(_QWORD *)(a1 + 96) = v14;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  }
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for JSONDecoder._Options(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  char v6;
  void *v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = *(id *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  outlined copy of JSONEncoder.DateEncodingStrategy(*(id *)a2, v5, v6);
  v7 = *(void **)a1;
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v9 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v6;
  outlined consume of JSONEncoder.DateEncodingStrategy(v7, v8, v9);
  v10 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 24) < 2uLL)
  {
    if (v10 >= 2)
    {
      v11 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 24) = v10;
      *(_QWORD *)(a1 + 32) = v11;
      swift_retain();
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v10 < 2)
  {
    swift_release();
LABEL_6:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    goto LABEL_8;
  }
  v12 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 32) = v12;
  swift_retain();
  swift_release();
LABEL_8:
  v13 = (_OWORD *)(a1 + 40);
  v14 = (_OWORD *)(a2 + 40);
  v15 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(a1 + 48))
  {
    if (v15)
    {
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Any?(a1 + 40, &demangling cache variable for type metadata for (positiveInfinity: String, negativeInfinity: String, nan: String));
      v17 = *(_OWORD *)(a2 + 56);
      v16 = *(_OWORD *)(a2 + 72);
      *v13 = *v14;
      *(_OWORD *)(a1 + 56) = v17;
      *(_OWORD *)(a1 + 72) = v16;
    }
  }
  else if (v15)
  {
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v18 = *v14;
    v19 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v19;
    *v13 = v18;
  }
  v20 = *(_QWORD *)(a2 + 88);
  if (*(_QWORD *)(a1 + 88) >= 2uLL)
  {
    if (v20 >= 2)
    {
      v22 = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 88) = v20;
      *(_QWORD *)(a1 + 96) = v22;
      swift_retain();
      swift_release();
      goto LABEL_22;
    }
    swift_release();
    goto LABEL_20;
  }
  if (v20 < 2)
  {
LABEL_20:
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    goto LABEL_22;
  }
  v21 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = v20;
  *(_QWORD *)(a1 + 96) = v21;
  swift_retain();
LABEL_22:
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  return a1;
}

uint64_t assignWithTake for JSONDecoder._Options(uint64_t a1, uint64_t a2)
{
  char v4;
  void *v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(void **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v7 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v4;
  outlined consume of JSONEncoder.DateEncodingStrategy(v5, v6, v7);
  v8 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 24) < 2uLL)
  {
    if (v8 >= 2)
    {
      v9 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 24) = v8;
      *(_QWORD *)(a1 + 32) = v9;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v8 < 2)
  {
    swift_release();
LABEL_6:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v10;
  swift_release();
LABEL_8:
  if (*(_QWORD *)(a1 + 48))
  {
    v11 = *(_QWORD *)(a2 + 48);
    if (v11)
    {
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = v11;
      swift_bridgeObjectRelease();
      v12 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = v12;
      swift_bridgeObjectRelease();
      v13 = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = v13;
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    outlined destroy of Any?(a1 + 40, &demangling cache variable for type metadata for (positiveInfinity: String, negativeInfinity: String, nan: String));
  }
  v14 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v14;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
LABEL_13:
  v15 = *(_QWORD *)(a2 + 88);
  if (*(_QWORD *)(a1 + 88) >= 2uLL)
  {
    if (v15 >= 2)
    {
      v17 = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 88) = v15;
      *(_QWORD *)(a1 + 96) = v17;
      swift_release();
      goto LABEL_20;
    }
    swift_release();
    goto LABEL_18;
  }
  if (v15 < 2)
  {
LABEL_18:
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    goto LABEL_20;
  }
  v16 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = v15;
  *(_QWORD *)(a1 + 96) = v16;
LABEL_20:
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for JSONDecoder._Options(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 113))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 104);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for JSONDecoder._Options(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 112) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 113) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 104) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 113) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for JSONDecoder._Options()
{
  return &unk_1E0F16BA8;
}

uint64_t sub_181E32514()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_181E3254C()
{
  uint64_t v0;

  outlined consume of _CodingKey(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in JSONDecoderImpl.unwrapString<A>(from:for:_:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;

  return closure #1 in JSONDecoderImpl.unwrapString<A>(from:for:_:)(a1, a2, a3, a4, *(_BYTE *)(v5 + 16), *(_BYTE *)(v5 + 17), a5);
}

_QWORD *specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)@<X0>(_QWORD *result@<X0>, _QWORD *(*a2)(uint64_t *__return_ptr, uint64_t, uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  BOOL v9;
  char v10;
  uint64_t v11;
  char v12;

  v8 = result[1];
  v9 = v8 < a4 + a3 || v8 < a4;
  if (v9 || (a4 | a3) < 0 || v8 <= a3)
  {
    __break(1u);
  }
  else
  {
    result = a2(&v11, *result + a3, a4);
    if (!v5)
    {
      v10 = v12;
      *(_QWORD *)a5 = v11;
      *(_BYTE *)(a5 + 8) = v10;
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v8;
  BOOL v9;
  char v10;
  uint64_t v11;

  v8 = result[1];
  v9 = v8 < a4 + a3 || v8 < a4;
  if (v9 || (a4 | a3) < 0 || v8 <= a3)
  {
    __break(1u);
  }
  else
  {
    result = a2(&v11, *result + a3, a4);
    if (!v5)
    {
      v10 = BYTE4(v11);
      *(_DWORD *)a5 = v11;
      *(_BYTE *)(a5 + 4) = v10;
    }
  }
  return result;
}

_QWORD *specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)@<X0>(_QWORD *result@<X0>, _QWORD *(*a2)(uint64_t *__return_ptr, uint64_t, uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, _DWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  v8 = result[1];
  v9 = v8 < a4 + a3 || v8 < a4;
  if (v9 || (a4 | a3) < 0 || v8 <= a3)
  {
    __break(1u);
  }
  else
  {
    result = a2(&v10, *result + a3, a4);
    if (!v5)
      *a5 = v10;
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  v8 = result[1];
  v9 = v8 < a4 + a3 || v8 < a4;
  if (v9 || (a4 | a3) < 0 || v8 <= a3)
  {
    __break(1u);
  }
  else
  {
    result = a2(&v10, *result + a3, a4);
    if (!v5)
      *a5 = v10;
  }
  return result;
}

_QWORD *specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)@<X0>(_QWORD *result@<X0>, _QWORD *(*a2)(uint64_t *__return_ptr, uint64_t, uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, _WORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  v8 = result[1];
  v9 = v8 < a4 + a3 || v8 < a4;
  if (v9 || (a4 | a3) < 0 || v8 <= a3)
  {
    __break(1u);
  }
  else
  {
    result = a2(&v10, *result + a3, a4);
    if (!v5)
      *a5 = v10;
  }
  return result;
}

uint64_t specialized Int128.init<A>(exactly:)(double a1)
{
  double v2;
  double v4;
  uint64_t v5;
  char v6;

  v2 = fabs(a1);
  if (v2 >= 1.84467441e19)
  {
    v4 = floor(a1 * 5.42101086e-20);
    if (specialized static FixedWidthInteger._convert<A>(from:)((uint64_t)&v5, v4)
      && v6 != 1
      && specialized static FixedWidthInteger._convert<A>(from:)((uint64_t)&v5, a1 + v4 * -1.84467441e19)
      && v6 != 1)
    {
      return v5;
    }
    return 0;
  }
  if (!specialized static FixedWidthInteger._convert<A>(from:)((uint64_t)&v5, v2) || v6 == 1)
    return 0;
  if (a1 < 0.0)
    return -v5;
  else
    return v5;
}

uint64_t specialized UInt128.init<A>(exactly:)(double a1)
{
  double v2;
  double v3;
  uint64_t v5;
  char v6;

  v2 = trunc(a1 * 5.42101086e-20);
  if (!specialized static FixedWidthInteger._convert<A>(from:)((uint64_t)&v5, v2) || v6 == 1)
    return 0;
  v3 = v2 * 1.84467441e19;
  if (!v5)
    v3 = 0.0;
  if (specialized static FixedWidthInteger._convert<A>(from:)((uint64_t)&v5, a1 - v3) && v6 != 1)
    return v5;
  else
    return 0;
}

uint64_t sub_181E32E7C()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  return swift_deallocObject();
}

unint64_t partial apply for specialized closure #2 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)@<X0>(void *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X8>)
{
  return partial apply for specialized closure #2 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(a1, a2, a3);
}

{
  uint64_t *v3;
  uint64_t v4;
  unint64_t result;
  char v7;

  result = specialized closure #2 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(a1, a2, v3[2], v3[3], v3[4], v3[5], v3[6], v3[7]);
  if (!v4)
  {
    *(_QWORD *)a3 = result;
    *(_BYTE *)(a3 + 8) = v7 & 1;
  }
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;
  unint64_t result;
  char v7;

  result = specialized closure #2 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(a1, a2, v3[4], v3[5], v3[6], v3[7], v3[8], v3[9]);
  if (!v4)
  {
    *(_QWORD *)a3 = result;
    *(_BYTE *)(a3 + 8) = v7 & 1;
  }
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;
  unint64_t result;

  result = specialized closure #2 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(a1, a2, v3[2], v3[3], v3[4], v3[5], v3[6], v3[7]);
  if (!v4)
  {
    *(_DWORD *)a3 = result;
    *(_BYTE *)(a3 + 4) = BYTE4(result) & 1;
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:), a5);
}

{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:), a5);
}

BOOL specialized static JSONDecoderImpl.isTrueZero(_:)(unsigned __int8 *a1, uint64_t a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  int v7;
  int v8;

  if (a2 >= 4)
  {
    do
    {
      v5 = *a1;
      if ((v5 - 58) > 0xFFFFFFF6)
        return 0;
      if ((v5 | 0x20) == 0x65)
        return 1;
      v6 = a1[1];
      if ((v6 - 58) > 0xFFFFFFF6)
        return 0;
      if ((v6 | 0x20) == 0x65)
        return 1;
      v7 = a1[2];
      if ((v7 - 58) > 0xFFFFFFF6)
        return 0;
      if ((v7 | 0x20) == 0x65)
        return 1;
      v8 = a1[3];
      if ((v8 - 58) > 0xFFFFFFF6)
        return 0;
      if ((v8 | 0x20) == 0x65)
        return 1;
      a1 += 4;
      a2 -= 4;
    }
    while (a2 > 3);
  }
  if (a2 != 1)
  {
    if (a2 == 2)
      goto LABEL_7;
    if (a2 == 3)
    {
      v2 = a1[2];
      if ((v2 - 58) > 0xFFFFFFF6)
        return 0;
      if ((v2 | 0x20) != 0x65)
      {
LABEL_7:
        v3 = a1[1];
        if ((v3 - 58) <= 0xFFFFFFF6)
        {
          if ((v3 | 0x20) == 0x65)
            return 1;
          return *a1 - 58 < 0xFFFFFFF7;
        }
        return 0;
      }
    }
    return 1;
  }
  return *a1 - 58 < 0xFFFFFFF7;
}

double specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5, char a6)
{
  unint64_t v6;
  double v7;
  unint64_t v8;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  char v18;
  unsigned __int8 v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  char v25;
  uint64_t v26;
  unint64_t v27;
  unsigned __int8 v28;
  unsigned int v29;
  BOOL v30;
  uint64_t v31;
  unsigned __int8 v32;
  __int16 v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned __int8 v41;
  unsigned __int8 *v42;
  uint64_t v43;
  unsigned __int8 *v44;
  char v45;
  unsigned __int8 v46;
  unsigned __int8 *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unsigned __int8 v53;
  __int16 v54;
  uint64_t v55;
  unsigned __int8 v56;
  unsigned __int8 v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  int v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  __int16 v77;
  unsigned __int8 v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  BOOL v82;
  unsigned __int8 v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned __int8 v87;
  unsigned __int8 v88;
  unsigned __int8 v89;
  unsigned __int8 v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int16 v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  unsigned __int8 v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unsigned __int8 v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  const char *v113;
  uint64_t v114;
  __int16 v115;
  unint64_t v116;
  unsigned __int8 v117;
  char v118;
  char v119;
  unsigned int v120;
  char v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned __int8 v127;
  uint64_t v128;
  uint64_t v129;
  unsigned __int8 *v130;
  uint64_t v131;
  uint64_t v132;
  unsigned __int8 v133;
  unsigned __int8 v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  int v140;
  uint64_t v141;
  double v142;
  char v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  const char *v153;
  size_t v154;
  __int16 v155;
  unsigned __int8 v156;
  char v157;
  char v158;
  char v159;
  unsigned int v160;
  uint64_t v161;
  unsigned __int8 v162;
  unsigned __int8 v163;
  unsigned __int8 v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unsigned __int8 v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unsigned __int8 v179;
  uint64_t v180;
  uint64_t v181;
  unsigned __int8 v182;
  unsigned __int8 v183;
  unsigned __int8 v184;
  unsigned __int8 v185;
  uint64_t v186;
  unint64_t v187;
  char v188;
  char v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unsigned __int8 *v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  Swift::String v200;
  unsigned __int8 v201;
  unsigned int v202;
  Swift::String v203;
  Swift::String v204;
  double v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unsigned __int8 v211;
  uint64_t v212;
  unsigned __int8 v213;
  uint64_t v214;
  uint64_t v215;
  char v216;
  unint64_t v217;
  char v218;
  char v219;
  uint64_t v220;
  char v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  uint64_t v225;
  double v226;
  unint64_t v227;

  v8 = v6;
  v11 = a2;
  v12 = a1;
  if ((a5 & 1) == 0)
  {
    if (!a2)
    {
LABEL_291:
      __break(1u);
LABEL_292:
      __break(1u);
LABEL_293:
      __break(1u);
LABEL_294:
      __break(1u);
LABEL_295:
      __break(1u);
LABEL_296:
      __break(1u);
LABEL_297:
      __break(1u);
LABEL_298:
      __break(1u);
LABEL_299:
      __break(1u);
      goto LABEL_300;
    }
    v25 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a1);
    v222 = a3;
    if (v25 == 48)
    {
      if (v11 >= 1)
        v26 = 1;
      else
        v26 = v11;
      v27 = v12 + v26;
      if (!specialized Collection.isEmpty.getter(v12 + v26, v11 - v26))
      {
        v28 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v27);
        v29 = v28;
        v30 = v28 - 46 > 0x37 || ((1 << (v28 - 46)) & 0x80000000800001) == 0;
        v31 = v12;
        if (v30)
        {
          v32 = v28;
          v33 = _asciiNumbers.getter();
          v34 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v27, v222, a4);
          v36 = v35;
          v38 = v37;
          if (v29 < v33 || HIBYTE(v33) < v32)
          {
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_OWORD *)v39 = xmmword_18206BE50;
            *(_QWORD *)(v39 + 16) = v32;
            *(_QWORD *)(v39 + 24) = v34;
            *(_QWORD *)(v39 + 32) = v36;
            *(_QWORD *)(v39 + 40) = v38;
            goto LABEL_247;
          }
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_QWORD *)v39 = v34;
          *(_QWORD *)(v39 + 8) = v36;
          *(_QWORD *)(v39 + 16) = v38;
LABEL_110:
          *(_QWORD *)(v39 + 24) = 0;
          *(_QWORD *)(v39 + 32) = 0;
          *(_QWORD *)(v39 + 40) = 0;
          v104 = 10;
          goto LABEL_248;
        }
        goto LABEL_46;
      }
    }
    else if ((v25 - 58) < 0xF7u)
    {
      if (v25 != 45)
      {
LABEL_300:
        __break(1u);
        goto LABEL_301;
      }
      if (v11 < 2)
      {
        v93 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v12, a3, a4);
        v95 = v94;
        v97 = v96;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_QWORD *)v39 = 0xD000000000000010;
        *(_QWORD *)(v39 + 8) = 0x80000001823071F0;
        *(_QWORD *)(v39 + 16) = 45;
        goto LABEL_246;
      }
      v31 = v12 + 1;
      v46 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 1);
      if (v46 == 48)
      {
        v47 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2, v12, v11);
        specialized static JSONScanner.validateLeadingZero(in:fullSource:)(v47, v48, a3, a4);
        if (v6)
          return v7;
      }
      else
      {
        v109 = v46;
        if ((v46 - 49) >= 9u)
        {
          v93 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v12 + 1, a3, a4);
          v95 = v110;
          v97 = v111;
          v11 = v109;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          v112 = 0xD000000000000013;
          v113 = "after '-' in number";
LABEL_146:
          *(_QWORD *)v39 = v112;
          *(_QWORD *)(v39 + 8) = (unint64_t)(v113 - 32) | 0x8000000000000000;
LABEL_238:
          *(_QWORD *)(v39 + 16) = v11;
          goto LABEL_246;
        }
      }
      goto LABEL_46;
    }
    v31 = v12;
LABEL_46:
    v215 = a4;
    if ((a6 & 1) != 0 && v31 + 1 < v12 + v11)
    {
      v49 = v31 - v12 + 1;
      v50 = v31;
      while (1)
      {
        v51 = v50 + 1;
        if ((specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v50 + 1) | 0x20) == 0x65)
          break;
        v52 = v50 + 2;
        ++v49;
        ++v50;
        if (v52 >= v12 + v11)
          goto LABEL_54;
      }
      v53 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v50);
      v54 = _asciiNumbers.getter();
      if (v53 < v54 || HIBYTE(v54) < v53)
      {
        if (v49 < 0 || v11 - v49 < 1)
          goto LABEL_313;
        v105 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v51);
        v106 = v51;
        v107 = v222;
        v108 = a4;
        goto LABEL_236;
      }
    }
LABEL_54:
    v55 = v12 + v11 - 1;
    v56 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v55);
    if ((v56 - 58) > 0xF5u)
    {
      closure #1 in Double.init(prevalidatedBuffer:)((const char *)v12, v11, (uint64_t)&v226);
      if ((v227 & 1) == 0)
      {
        if ((~*(_QWORD *)&v226 & 0x7FF0000000000000) == 0)
          goto LABEL_179;
        v7 = v226;
        if (v226 != 0.0)
          return v7;
        v85 = v11;
        v86 = v12;
        if (v11 >= 4)
        {
          v85 = v11;
          v86 = v12;
          do
          {
            v87 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v86);
            if ((v87 - 49) < 9u)
              goto LABEL_179;
            if ((v87 | 0x20) == 0x65)
              return v7;
            v88 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v86 + 1);
            if ((v88 - 49) < 9u)
              goto LABEL_179;
            if ((v88 | 0x20) == 0x65)
              return v7;
            v89 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v86 + 2);
            if ((v89 - 49) < 9u)
              goto LABEL_179;
            if ((v89 | 0x20) == 0x65)
              return v7;
            v90 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v86 + 3);
            if ((v90 - 49) < 9u)
              goto LABEL_179;
            if ((v90 | 0x20) == 0x65)
              return v7;
            v86 = specialized BufferView.dropFirst(_:)(4, v86, v85);
            v85 = v91;
          }
          while (v91 >= 4);
        }
        goto LABEL_215;
      }
      v73 = specialized BufferView.suffix(from:)(v31, v12, v11);
      v11 = v73;
      v75 = v74;
      v76 = v73 + v74;
      if (v74 <= 0)
      {
        v84 = v73;
      }
      else
      {
        v77 = _asciiNumbers.getter();
        v78 = v77;
        v79 = 0;
        v80 = HIBYTE(v77);
        v81 = v75;
        while (1)
        {
          if (v79 < 0)
            goto LABEL_289;
          v82 = v81-- < 1;
          if (v82)
            goto LABEL_289;
          v83 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v11 + v79);
          if (v83 < v78 || v80 < v83)
            break;
          ++v79;
          v84 = v11 + v79;
          if (v11 + v79 >= v76)
            goto LABEL_118;
        }
        v84 = v11 + v79;
      }
LABEL_118:
      if (v84 < v76)
      {
        v114 = v84 - v11;
        v115 = _asciiNumbers.getter();
        v117 = v115;
        v118 = 0;
        v212 = v75 + v11;
        v209 = -v11;
        v119 = 1;
        v120 = HIBYTE(v115);
        v121 = 1;
        while (1)
        {
          v219 = v118;
          v216 = v119;
          v122 = v212 - v84;
          v123 = v209 + v84;
          while (1)
          {
            if ((v123 & 0x8000000000000000) != 0 || (v82 = v122 < 1, --v122, v82))
            {
              __break(1u);
LABEL_241:
              __break(1u);
LABEL_242:
              __break(1u);
LABEL_243:
              v93 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v11 + v76, v116, v215);
              v95 = v176;
              v97 = v177;
LABEL_244:
              v172 = 0xE900000000000072;
              v173 = 0x65626D756E206E69;
LABEL_245:
              lazy protocol witness table accessor for type JSONError and conformance JSONError();
              swift_allocError();
              *(_QWORD *)v39 = v173;
              *(_QWORD *)(v39 + 8) = v172;
              *(_QWORD *)(v39 + 16) = v84;
LABEL_246:
              *(_QWORD *)(v39 + 24) = v93;
              *(_QWORD *)(v39 + 32) = v95;
              *(_QWORD *)(v39 + 40) = v97;
LABEL_247:
              v104 = 1;
              goto LABEL_248;
            }
            v124 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v84);
            v11 = v124;
            if (v124 < v117 || v120 < v124)
              break;
            if (__OFADD__(v114, 1))
              goto LABEL_241;
            ++v84;
            ++v114;
            ++v123;
            if (v84 >= v76)
              goto LABEL_242;
          }
          switch((char)v124)
          {
            case '+':
            case '-':
              if (v114 != 0 || (v219 & 1) == 0)
                goto LABEL_139;
              v114 = 0;
              v118 = 0;
              v119 = 0;
              v121 = 0;
              if (++v84 >= v76)
                goto LABEL_292;
              continue;
            case ',':
            case '/':
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case ':':
            case ';':
            case '<':
            case '=':
            case '>':
            case '?':
            case '@':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
              goto LABEL_139;
            case '.':
              if (v114 < 1 || (v121 & 1) == 0)
                goto LABEL_139;
              v114 = 0;
              v118 = 0;
              v121 = 0;
              ++v84;
              v119 = 1;
              if (v84 < v76)
                continue;
              __break(1u);
              goto LABEL_139;
            case 'E':
              goto LABEL_133;
            default:
              if (v124 != 101)
                goto LABEL_139;
LABEL_133:
              if (v114 < 1 || (v216 & 1) == 0)
              {
LABEL_139:
                v93 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v84, v222, v215);
                v95 = v125;
                v97 = v126;
                v11 = v11;
                goto LABEL_237;
              }
              v114 = 0;
              v119 = 0;
              v121 = 0;
              ++v84;
              v118 = 1;
              if (v84 >= v76)
                goto LABEL_293;
              break;
          }
        }
      }
LABEL_303:
      __break(1u);
LABEL_304:
      __break(1u);
      goto LABEL_305;
    }
    v57 = v56;
    v58 = v222;
    if (!specialized static Comparable.<= infix(_:_:)(v222, v12 + v11 - 1))
      goto LABEL_296;
    if (!specialized static Comparable.<= infix(_:_:)(v12 + v11 - 1, v222 + a4))
      goto LABEL_297;
    v59 = specialized min<A>(_:_:)(v12 + v11, v222 + a4);
    if (v59 <= v222)
    {
      v70 = 0;
      v63 = 1;
      goto LABEL_103;
    }
    v60 = v59;
    v211 = v57;
    v61 = a4 + v222;
    v62 = -(uint64_t)v222;
    v63 = 1;
    v64 = v222;
LABEL_59:
    v65 = 0;
    v66 = 0;
    v67 = v61 - v64;
    v68 = v62 + v64;
    while ((uint64_t)(v68 + v66) >= 0 && (uint64_t)(v67 + v65) >= 1)
    {
      v69 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v64 + v66);
      if (v69 == 10)
      {
        v71 = __OFADD__(v63++, 1);
        if (!v71)
        {
          v64 += v66 + 1;
          goto LABEL_76;
        }
        goto LABEL_304;
      }
      if (v69 == 13)
      {
        v72 = v64 + v66;
        if (!specialized static Comparable.<= infix(_:_:)(v64 + v66 + 1, v55))
          goto LABEL_74;
        if (((v64 - v222 + v66 + 1) & 0x8000000000000000) == 0 && (uint64_t)(~v66 + v67) >= 1)
        {
          if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v64 + v66 + 1) == 10)
            v72 = v64 + v66 + 1;
LABEL_74:
          v71 = __OFADD__(v63++, 1);
          if (!v71)
          {
            v64 = v72 + 1;
LABEL_76:
            v61 = v215 + v222;
            v62 = -(uint64_t)v222;
            if (v64 >= v60)
            {
              v70 = 0;
LABEL_78:
              v58 = v222;
              v57 = v211;
LABEL_103:
              lazy protocol witness table accessor for type JSONError and conformance JSONError();
              swift_allocError();
              *(_QWORD *)v92 = 0xD000000000000010;
              *(_QWORD *)(v92 + 8) = 0x80000001823071F0;
              *(_QWORD *)(v92 + 16) = v57;
              *(_QWORD *)(v92 + 24) = v63;
              *(_QWORD *)(v92 + 32) = v70;
              *(_QWORD *)(v92 + 40) = v55 - v58;
              *(_BYTE *)(v92 + 48) = 1;
              goto LABEL_249;
            }
            goto LABEL_59;
          }
LABEL_305:
          __break(1u);
LABEL_306:
          __break(1u);
LABEL_307:
          __break(1u);
LABEL_308:
          __break(1u);
LABEL_309:
          __break(1u);
LABEL_310:
          __break(1u);
        }
        __break(1u);
LABEL_312:
        __break(1u);
LABEL_313:
        __break(1u);
LABEL_314:
        __break(1u);
LABEL_315:
        __break(1u);
LABEL_316:
        __break(1u);
        JUMPOUT(0x181E34618);
      }
      v70 = v66 + 1;
      if (__OFADD__(v66, 1))
        goto LABEL_288;
      ++v66;
      --v65;
      if (v64 + v66 >= v60)
        goto LABEL_78;
    }
    __break(1u);
LABEL_288:
    __break(1u);
LABEL_289:
    __break(1u);
    goto LABEL_290;
  }
  if (!a2)
  {
LABEL_290:
    __break(1u);
    goto LABEL_291;
  }
  v13 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a1);
  if (v13 == 48)
  {
    v215 = a4;
    if (v11 >= 1)
      v14 = 1;
    else
      v14 = v11;
    v15 = v12 + v14;
    v16 = v11 - v14;
    if (!specialized Collection.isEmpty.getter(v12 + v14, v11 - v14))
    {
      v17 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v15);
      v18 = 0;
      if (v17 <= 0x57u)
      {
        v40 = v12;
        if (v17 == 46 || v17 == 69)
          goto LABEL_151;
LABEL_107:
        v98 = _asciiNumbers.getter();
        v99 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v15, a3, v215);
        v101 = v100;
        v103 = v102;
        if (v17 < v98 || HIBYTE(v98) < v17)
        {
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_OWORD *)v39 = xmmword_18206BE50;
          *(_QWORD *)(v39 + 16) = v17;
          *(_QWORD *)(v39 + 24) = v99;
          *(_QWORD *)(v39 + 32) = v101;
          *(_QWORD *)(v39 + 40) = v103;
          goto LABEL_247;
        }
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_QWORD *)v39 = v99;
        *(_QWORD *)(v39 + 8) = v101;
        *(_QWORD *)(v39 + 16) = v103;
        goto LABEL_110;
      }
      if (v17 == 120)
      {
LABEL_12:
        if (specialized static Comparable.<= infix(_:_:)(v15 + 1, v12 + v11))
        {
          v19 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v15 + 1);
          if (UInt8.isValidHexDigit.getter(v19))
            goto LABEL_14;
          v93 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v15 + 1, a3, v215);
          v95 = v180;
          v97 = v181;
          v11 = v19;
          goto LABEL_237;
        }
        if (v16 < 1)
          goto LABEL_316;
        v105 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v15);
        v106 = v15;
        v107 = a3;
        v108 = v215;
LABEL_236:
        v93 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v106, v107, v108);
        v95 = v174;
        v97 = v175;
        v11 = v105;
LABEL_237:
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_OWORD *)v39 = xmmword_18206BE50;
        goto LABEL_238;
      }
      if (v17 != 101)
      {
        if (v17 == 88)
          goto LABEL_12;
        goto LABEL_107;
      }
LABEL_150:
      v40 = v12;
      goto LABEL_151;
    }
LABEL_149:
    v18 = 0;
    goto LABEL_150;
  }
  if ((v13 - 58) >= 0xF7u)
  {
LABEL_148:
    v215 = a4;
    goto LABEL_149;
  }
  switch(v13)
  {
    case '+':
    case '-':
      if (v11 < 2)
      {
        if (v11 != 1)
          goto LABEL_315;
        v127 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12);
        v93 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v12, a3, a4);
        v95 = v128;
        v97 = v129;
        v11 = v127;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        v112 = 0xD000000000000010;
        v113 = "at end of number";
        goto LABEL_146;
      }
      v40 = v12 + 1;
      v41 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 1);
      if (v41 == 48)
      {
        v42 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2, v12, v11);
        v44 = specialized static JSON5Scanner.validateLeadingZero(in:zero:fullSource:)(v42, v43, (unsigned __int8 *)(v12 + 1), a3, a4);
        if (v6)
          return v7;
        v40 = (unint64_t)v44;
        v215 = a4;
        if ((v45 & 1) == 0)
        {
          v18 = 0;
          goto LABEL_151;
        }
LABEL_14:
        if (*(_BYTE *)v12 != 45)
          goto LABEL_269;
        v20 = specialized _parseJSON5Integer<A>(_:isHex:)((_BYTE *)v12, v11, 1, (uint64_t (*)(_BYTE *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:));
        if ((v21 & 1) == 0)
        {
          *(double *)&v22 = COERCE_DOUBLE(specialized Double.init<A>(exactly:)(v20));
          if ((v23 & 1) == 0)
            return *(double *)&v22;
        }
        goto LABEL_179;
      }
      v179 = v41;
      if ((v41 - 49) < 9u)
        goto LABEL_252;
      if (v41 == 46)
        goto LABEL_280;
      if (v41 == 78)
      {
        v197 = a4;
        v18 = 1;
        v198 = (char *)specialized BufferView.dropFirst(_:)(1, v12, v11);
        specialized static JSON5Scanner.validateNaN(from:fullSource:)(v198, v199, a3, v197);
        if (v6)
          return v7;
        v215 = v197;
        goto LABEL_151;
      }
      if (v41 != 73)
      {
        v226 = 0.0;
        v227 = 0xE000000000000000;
        _StringGuts.grow(_:)(20);
        v200._countAndFlagsBits = 0x27207265746661;
        v200._object = (void *)0xE700000000000000;
        DefaultStringInterpolation.appendLiteral(_:)(v200);
        v201 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12);
        v202 = (v201 + 1);
        if ((v201 & 0x80) != 0)
          v202 = (((v201 & 0x3F) << 8) | (v201 >> 6)) + 33217;
        v225 = (v202 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v202) >> 3)) & 7)));
        v203._countAndFlagsBits = MEMORY[0x186DA46D0](&v225);
        specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v203);
        swift_bridgeObjectRelease();
        v204._countAndFlagsBits = 0x6D756E206E692027;
        v204._object = (void *)0xEB00000000726562;
        DefaultStringInterpolation.appendLiteral(_:)(v204);
        v205 = v226;
        v206 = v227;
        v93 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v40, a3, a4);
        v95 = v207;
        v97 = v208;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(double *)v39 = v205;
        *(_QWORD *)(v39 + 8) = v206;
        *(_QWORD *)(v39 + 16) = v179;
        goto LABEL_246;
      }
      v190 = a4;
      v18 = 1;
      v191 = (char *)specialized BufferView.dropFirst(_:)(1, v12, v11);
      specialized static JSON5Scanner.validateInfinity(from:fullSource:)(v191, v192, a3, v190);
      if (v6)
        return v7;
      v215 = v190;
LABEL_151:
      v132 = v12 + v11 - 1;
      v133 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v132);
      if ((v133 | 0x20) != 0x65)
      {
        specialized BufferView.withUnsafePointer<A>(_:)((const char *)v12);
        if ((v143 & 1) == 0)
        {
          v7 = v142;
          if ((~*(_QWORD *)&v142 & 0x7FF0000000000000) == 0)
          {
            if ((v18 & 1) != 0)
              return v7;
            goto LABEL_179;
          }
          goto LABEL_213;
        }
        v148 = specialized BufferView.suffix(from:)(v40, v12, v11);
        if (v149 < 1)
          goto LABEL_306;
        v150 = v148;
        v151 = v149;
        v12 = v148 + v149;
        v152 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v148);
        if (v152 == 45 || (v11 = v150, v152 == 43))
          v11 = v150 + 1;
        v224 = a3;
        if (!specialized static Comparable.<= infix(_:_:)(v11, v12))
          goto LABEL_307;
        if (v11 - v150 < 0)
          goto LABEL_308;
        if ((uint64_t)(v12 - v11) < 0)
          goto LABEL_309;
        v153 = (const char *)specialized BufferView.prefix(_:)(2, v11);
        if (specialized BufferView.withUnsafePointer<A>(_:)(v153, v154))
        {
          if (v11 < v12)
          {
            v155 = _asciiNumbers.getter();
            v156 = v155;
            v157 = 0;
            v158 = 0;
            v214 = v151 + v150;
            v210 = -v150;
            v159 = 1;
            v160 = HIBYTE(v155);
            while (1)
            {
              v218 = v159;
              v221 = v157;
              v76 = 0;
              v161 = v214 - v11;
              while (1)
              {
                if ((uint64_t)(v210 + v11 + v76) < 0 || (v82 = v161 < 1, --v161, v82))
                {
                  __break(1u);
LABEL_267:
                  __break(1u);
LABEL_268:
                  __break(1u);
LABEL_269:
                  v187 = specialized _parseJSON5Integer<A>(_:isHex:)((unsigned __int8 *)v12, v11, 1, (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:), (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseIntegerDigits<A>(_:isNegative:));
                  if ((v188 & 1) == 0)
                  {
                    *(double *)&v22 = COERCE_DOUBLE(specialized Double.init<A>(exactly:)(v187));
                    if ((v189 & 1) == 0)
                      return *(double *)&v22;
                  }
LABEL_179:
                  v144 = static String._fromUTF8Repairing(_:)();
                  v146 = v145;
                  lazy protocol witness table accessor for type JSONError and conformance JSONError();
                  swift_allocError();
                  *(_QWORD *)v39 = v144;
                  *(_QWORD *)(v39 + 8) = v146;
                  *(_OWORD *)(v39 + 16) = 0u;
                  *(_OWORD *)(v39 + 32) = 0u;
                  v104 = 11;
LABEL_248:
                  *(_BYTE *)(v39 + 48) = v104;
                  goto LABEL_249;
                }
                v162 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v11 + v76);
                LOBYTE(v84) = v162;
                if (v162 < v156 || v160 < v162)
                  break;
                if (__OFADD__(v76, 1))
                  goto LABEL_267;
                ++v76;
                if (v11 + v76 >= v12)
                  goto LABEL_268;
              }
              v116 = a3;
              switch(v162)
              {
                case '+':
                case '-':
                  if (v76 != 0 || (v221 & 1) == 0)
                    goto LABEL_243;
                  v157 = 0;
                  v159 = 0;
                  v11 += v76 + 1;
                  v158 = 3;
                  if (v11 >= v12)
                    goto LABEL_299;
                  continue;
                case ',':
                case '/':
                case '0':
                case '1':
                case '2':
                case '3':
                case '4':
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                case ':':
                case ';':
                case '<':
                case '=':
                case '>':
                case '?':
                case '@':
                case 'A':
                case 'B':
                case 'C':
                case 'D':
                  goto LABEL_243;
                case '.':
                  if ((v218 & 1) == 0)
                  {
                    v93 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v11 + v76, a3, v215);
                    v95 = v193;
                    v97 = v194;
                    LOBYTE(v84) = 46;
                    goto LABEL_244;
                  }
                  v157 = 0;
                  v159 = 0;
                  v11 += v76 + 1;
                  v158 = 1;
                  if (v11 >= v12)
                  {
                    __break(1u);
LABEL_213:
                    if (v7 != 0.0)
                      return v7;
                    v85 = v11;
                    v86 = v12;
                    if (v11 >= 4)
                    {
                      v85 = v11;
                      v86 = v12;
                      do
                      {
                        v182 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v86);
                        if ((v182 - 49) < 9u)
                          goto LABEL_179;
                        if ((v182 | 0x20) == 0x65)
                          return v7;
                        v183 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v86 + 1);
                        if ((v183 - 49) < 9u)
                          goto LABEL_179;
                        if ((v183 | 0x20) == 0x65)
                          return v7;
                        v184 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v86 + 2);
                        if ((v184 - 49) < 9u)
                          goto LABEL_179;
                        if ((v184 | 0x20) == 0x65)
                          return v7;
                        v185 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v86 + 3);
                        if ((v185 - 49) < 9u)
                          goto LABEL_179;
                        if ((v185 | 0x20) == 0x65)
                          return v7;
                        v86 = specialized BufferView.dropFirst(_:)(4, v86, v85);
                        v85 = v186;
                      }
                      while (v186 >= 4);
                    }
LABEL_215:
                    if (v85 != 1)
                    {
                      if (v85 != 2)
                      {
                        if (v85 != 3)
                          return v7;
                        v163 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v86 + 2);
                        if ((v163 - 49) < 9u)
                          goto LABEL_179;
                        if ((v163 | 0x20) == 0x65)
                          return v7;
                      }
                      v164 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v86 + 1);
                      if ((v164 - 49) < 9u)
                        goto LABEL_179;
                      if ((v164 | 0x20) == 0x65)
                        return v7;
                    }
                    if ((specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v86)
                                         - 49) >= 9u)
                      return v7;
                    goto LABEL_179;
                  }
                  break;
                case 'E':
                  goto LABEL_206;
                default:
                  v116 = a3;
                  if (v162 != 101)
                    goto LABEL_243;
LABEL_206:
                  if (v158 != 1 && (v158 || (uint64_t)v76 < 1))
                    goto LABEL_243;
                  v159 = 0;
                  v11 += v76 + 1;
                  v158 = 2;
                  v157 = 1;
                  if (v11 < v12)
                    continue;
                  goto LABEL_298;
              }
            }
          }
          goto LABEL_312;
        }
        v165 = v11 + 2;
        if ((uint64_t)(v12 - (v11 + 2)) < 1 || v165 >= v12 || ((v165 - v150) & 0x8000000000000000) != 0)
        {
LABEL_232:
          __break(1u);
        }
        else
        {
          v166 = v151 + v150 - v11 - 3;
          v167 = v11 - v150 + 3;
          while (1)
          {
            v168 = v167;
            v169 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v165);
            if (!UInt8.isValidHexDigit.getter(v169))
              break;
            v82 = v166-- < 1;
            if (!v82 && ++v165 < v12)
            {
              v167 = v168 + 1;
              if ((v168 & 0x8000000000000000) == 0)
                continue;
            }
            goto LABEL_232;
          }
        }
        LOBYTE(v84) = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v165);
        v93 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v165, v224, v215);
        v95 = v170;
        v97 = v171;
        v172 = 0xED00007265626D75;
        v173 = 0x6E20786568206E69;
        goto LABEL_245;
      }
      v134 = v133;
      if (!specialized static Comparable.<= infix(_:_:)(a3, v12 + v11 - 1))
        goto LABEL_294;
      a4 = v215;
      if (!specialized static Comparable.<= infix(_:_:)(v12 + v11 - 1, a3 + v215))
        goto LABEL_295;
      v135 = specialized min<A>(_:_:)(v12 + v11, a3 + v215);
      if (v135 <= a3)
      {
        a4 = 0;
        v11 = 1;
        goto LABEL_181;
      }
      v8 = v135;
      v213 = v134;
      v136 = v215 + a3;
      v137 = -(uint64_t)a3;
      v11 = 1;
      v220 = -(uint64_t)a3;
      v223 = a3;
      v138 = a3;
      v217 = v215 + a3;
      do
      {
        v40 = 0;
        v12 = 0;
        a3 = v136 - v138;
        v139 = v137 + v138;
        while (1)
        {
          if ((uint64_t)(v139 + v12) < 0 || (uint64_t)(a3 + v40) < 1)
          {
            __break(1u);
LABEL_279:
            __break(1u);
LABEL_280:
            v195 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2, v12, v11);
            specialized static JSON5Scanner.validateLeadingDecimal(from:fullSource:)(v195, v196, a3, a4);
            if (v8)
              return v7;
LABEL_252:
            v215 = a4;
            v18 = 0;
            goto LABEL_151;
          }
          v140 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v138 + v12);
          if (v140 == 10)
          {
            v71 = __OFADD__(v11++, 1);
            v137 = v220;
            if (!v71)
            {
              v138 += v12 + 1;
              goto LABEL_173;
            }
LABEL_301:
            __break(1u);
LABEL_302:
            __break(1u);
            goto LABEL_303;
          }
          if (v140 == 13)
            break;
          a4 = v12 + 1;
          if (__OFADD__(v12, 1))
            goto LABEL_279;
          ++v12;
          --v40;
          if (v138 + v12 >= v8)
            goto LABEL_175;
        }
        v141 = v138 + v12;
        a4 = v138 + v12 + 1;
        v137 = v220;
        if (!specialized static Comparable.<= infix(_:_:)(a4, v132))
          goto LABEL_171;
        if (((v220 + v138 + v12 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v12 + a3) < 1)
          goto LABEL_310;
        if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v138 + v12 + 1) == 10)
          v141 = v138 + v12 + 1;
LABEL_171:
        v71 = __OFADD__(v11++, 1);
        if (v71)
          goto LABEL_302;
        v138 = v141 + 1;
LABEL_173:
        v136 = v217;
      }
      while (v138 < v8);
      a4 = 0;
LABEL_175:
      a3 = v223;
      v134 = v213;
LABEL_181:
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(_QWORD *)v147 = 0xD000000000000010;
      *(_QWORD *)(v147 + 8) = 0x80000001823071F0;
      *(_QWORD *)(v147 + 16) = v134;
      *(_QWORD *)(v147 + 24) = v11;
      *(_QWORD *)(v147 + 32) = a4;
      *(_QWORD *)(v147 + 40) = v132 - a3;
      *(_BYTE *)(v147 + 48) = 1;
LABEL_249:
      swift_willThrow();
      return v7;
    case '.':
      v130 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(1, v12, v11);
      specialized static JSON5Scanner.validateLeadingDecimal(from:fullSource:)(v130, v131, a3, a4);
      if (!v6)
        goto LABEL_148;
      return v7;
    case 'I':
      specialized static JSON5Scanner.validateInfinity(from:fullSource:)((char *)v12, v11, a3, a4);
      goto LABEL_142;
    case 'N':
      specialized static JSON5Scanner.validateNaN(from:fullSource:)((char *)v12, v11, a3, a4);
LABEL_142:
      if (v6)
        return v7;
      v215 = a4;
      v18 = 1;
      goto LABEL_150;
    default:
      goto LABEL_314;
  }
}

{
  unint64_t v6;
  double v7;
  unint64_t v8;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  char v18;
  unsigned __int8 v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  char v25;
  uint64_t v26;
  unint64_t v27;
  unsigned __int8 v28;
  unsigned int v29;
  BOOL v30;
  uint64_t v31;
  unsigned __int8 v32;
  __int16 v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned __int8 v41;
  unsigned __int8 *v42;
  uint64_t v43;
  unsigned __int8 *v44;
  char v45;
  unsigned __int8 v46;
  unsigned __int8 *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unsigned __int8 v53;
  __int16 v54;
  uint64_t v55;
  unsigned __int8 v56;
  unsigned __int8 v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  int v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  __int16 v77;
  unsigned __int8 v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  BOOL v82;
  unsigned __int8 v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned __int8 v87;
  unsigned __int8 v88;
  unsigned __int8 v89;
  unsigned __int8 v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int16 v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  unsigned __int8 v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unsigned __int8 v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  const char *v113;
  uint64_t v114;
  __int16 v115;
  unint64_t v116;
  unsigned __int8 v117;
  char v118;
  char v119;
  unsigned int v120;
  char v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned __int8 v127;
  uint64_t v128;
  uint64_t v129;
  unsigned __int8 *v130;
  uint64_t v131;
  uint64_t v132;
  unsigned __int8 v133;
  unsigned __int8 v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  int v140;
  uint64_t v141;
  double v142;
  char v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  const char *v153;
  size_t v154;
  __int16 v155;
  unsigned __int8 v156;
  char v157;
  char v158;
  char v159;
  unsigned int v160;
  uint64_t v161;
  unsigned __int8 v162;
  unsigned __int8 v163;
  unsigned __int8 v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unsigned __int8 v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unsigned __int8 v179;
  uint64_t v180;
  uint64_t v181;
  unsigned __int8 v182;
  unsigned __int8 v183;
  unsigned __int8 v184;
  unsigned __int8 v185;
  uint64_t v186;
  unint64_t v187;
  char v188;
  char v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unsigned __int8 *v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  Swift::String v200;
  unsigned __int8 v201;
  unsigned int v202;
  Swift::String v203;
  Swift::String v204;
  double v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unsigned __int8 v211;
  uint64_t v212;
  unsigned __int8 v213;
  uint64_t v214;
  uint64_t v215;
  char v216;
  unint64_t v217;
  char v218;
  char v219;
  uint64_t v220;
  char v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  uint64_t v225;
  double v226;
  unint64_t v227;

  v8 = v6;
  v11 = a2;
  v12 = a1;
  if ((a5 & 1) == 0)
  {
    if (!a2)
    {
LABEL_292:
      __break(1u);
LABEL_293:
      __break(1u);
LABEL_294:
      __break(1u);
LABEL_295:
      __break(1u);
LABEL_296:
      __break(1u);
LABEL_297:
      __break(1u);
LABEL_298:
      __break(1u);
LABEL_299:
      __break(1u);
LABEL_300:
      __break(1u);
      goto LABEL_301;
    }
    v25 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a1);
    v222 = a3;
    if (v25 == 48)
    {
      if (v11 >= 1)
        v26 = 1;
      else
        v26 = v11;
      v27 = v12 + v26;
      if (!specialized Collection.isEmpty.getter(v12 + v26, v11 - v26))
      {
        v28 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v27);
        v29 = v28;
        v30 = v28 - 46 > 0x37 || ((1 << (v28 - 46)) & 0x80000000800001) == 0;
        v31 = v12;
        if (v30)
        {
          v32 = v28;
          v33 = _asciiNumbers.getter();
          v34 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v27, v222, a4);
          v36 = v35;
          v38 = v37;
          if (v29 < v33 || HIBYTE(v33) < v32)
          {
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_OWORD *)v39 = xmmword_18206BE50;
            *(_QWORD *)(v39 + 16) = v32;
            *(_QWORD *)(v39 + 24) = v34;
            *(_QWORD *)(v39 + 32) = v36;
            *(_QWORD *)(v39 + 40) = v38;
            goto LABEL_247;
          }
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_QWORD *)v39 = v34;
          *(_QWORD *)(v39 + 8) = v36;
          *(_QWORD *)(v39 + 16) = v38;
LABEL_110:
          *(_QWORD *)(v39 + 24) = 0;
          *(_QWORD *)(v39 + 32) = 0;
          *(_QWORD *)(v39 + 40) = 0;
          v104 = 10;
          goto LABEL_248;
        }
        goto LABEL_46;
      }
    }
    else if ((v25 - 58) < 0xF7u)
    {
      if (v25 != 45)
      {
LABEL_301:
        __break(1u);
        goto LABEL_302;
      }
      if (v11 < 2)
      {
        v93 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v12, a3, a4);
        v95 = v94;
        v97 = v96;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_QWORD *)v39 = 0xD000000000000010;
        *(_QWORD *)(v39 + 8) = 0x80000001823071F0;
        *(_QWORD *)(v39 + 16) = 45;
        goto LABEL_246;
      }
      v31 = v12 + 1;
      v46 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 1);
      if (v46 == 48)
      {
        v47 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2, v12, v11);
        specialized static JSONScanner.validateLeadingZero(in:fullSource:)(v47, v48, a3, a4);
        if (v6)
          return v7;
      }
      else
      {
        v109 = v46;
        if ((v46 - 49) >= 9u)
        {
          v93 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v12 + 1, a3, a4);
          v95 = v110;
          v97 = v111;
          v11 = v109;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          v112 = 0xD000000000000013;
          v113 = "after '-' in number";
LABEL_146:
          *(_QWORD *)v39 = v112;
          *(_QWORD *)(v39 + 8) = (unint64_t)(v113 - 32) | 0x8000000000000000;
LABEL_238:
          *(_QWORD *)(v39 + 16) = v11;
          goto LABEL_246;
        }
      }
      goto LABEL_46;
    }
    v31 = v12;
LABEL_46:
    v215 = a4;
    if ((a6 & 1) != 0 && v31 + 1 < v12 + v11)
    {
      v49 = v31 - v12 + 1;
      v50 = v31;
      while (1)
      {
        v51 = v50 + 1;
        if ((specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v50 + 1) | 0x20) == 0x65)
          break;
        v52 = v50 + 2;
        ++v49;
        ++v50;
        if (v52 >= v12 + v11)
          goto LABEL_54;
      }
      v53 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v50);
      v54 = _asciiNumbers.getter();
      if (v53 < v54 || HIBYTE(v54) < v53)
      {
        if (v49 < 0 || v11 - v49 < 1)
          goto LABEL_314;
        v105 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v51);
        v106 = v51;
        v107 = v222;
        v108 = a4;
        goto LABEL_236;
      }
    }
LABEL_54:
    v55 = v12 + v11 - 1;
    v56 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v55);
    if ((v56 - 58) >= 0xF6u)
    {
      closure #1 in Double.init(prevalidatedBuffer:)((const char *)v12, v11, (uint64_t)&v226);
      if ((v227 & 1) == 0)
      {
        if ((~*(_QWORD *)&v226 & 0x7FF0000000000000) == 0)
          goto LABEL_179;
        v7 = v226;
        if (v226 != 0.0)
          return v7;
        v85 = v11;
        v86 = v12;
        if (v11 >= 4)
        {
          v85 = v11;
          v86 = v12;
          do
          {
            v87 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v86);
            if ((v87 - 49) < 9u)
              goto LABEL_179;
            if ((v87 | 0x20) == 0x65)
              return v7;
            v88 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v86 + 1);
            if ((v88 - 49) < 9u)
              goto LABEL_179;
            if ((v88 | 0x20) == 0x65)
              return v7;
            v89 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v86 + 2);
            if ((v89 - 49) < 9u)
              goto LABEL_179;
            if ((v89 | 0x20) == 0x65)
              return v7;
            v90 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v86 + 3);
            if ((v90 - 49) < 9u)
              goto LABEL_179;
            if ((v90 | 0x20) == 0x65)
              return v7;
            v86 = specialized BufferView.dropFirst(_:)(4, v86, v85);
            v85 = v91;
          }
          while (v91 >= 4);
        }
        goto LABEL_215;
      }
      v73 = specialized BufferView.suffix(from:)(v31, v12, v11);
      v11 = v73;
      v75 = v74;
      v76 = v73 + v74;
      if (v74 <= 0)
      {
        v84 = v73;
      }
      else
      {
        v77 = _asciiNumbers.getter();
        v78 = v77;
        v79 = 0;
        v80 = HIBYTE(v77);
        v81 = v75;
        while (1)
        {
          if (v79 < 0)
            goto LABEL_290;
          v82 = v81-- < 1;
          if (v82)
            goto LABEL_290;
          v83 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v11 + v79);
          if (v83 < v78 || v80 < v83)
            break;
          ++v79;
          v84 = v11 + v79;
          if (v11 + v79 >= v76)
            goto LABEL_118;
        }
        v84 = v11 + v79;
      }
LABEL_118:
      if (v84 < v76)
      {
        v114 = v84 - v11;
        v115 = _asciiNumbers.getter();
        v117 = v115;
        v118 = 0;
        v212 = v75 + v11;
        v209 = -v11;
        v119 = 1;
        v120 = HIBYTE(v115);
        v121 = 1;
        while (1)
        {
          v219 = v118;
          v216 = v119;
          v122 = v212 - v84;
          v123 = v209 + v84;
          while (1)
          {
            if ((v123 & 0x8000000000000000) != 0 || (v82 = v122 < 1, --v122, v82))
            {
              __break(1u);
LABEL_241:
              __break(1u);
LABEL_242:
              __break(1u);
LABEL_243:
              v93 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v11 + v76, v116, v215);
              v95 = v176;
              v97 = v177;
LABEL_244:
              v172 = 0xE900000000000072;
              v173 = 0x65626D756E206E69;
LABEL_245:
              lazy protocol witness table accessor for type JSONError and conformance JSONError();
              swift_allocError();
              *(_QWORD *)v39 = v173;
              *(_QWORD *)(v39 + 8) = v172;
              *(_QWORD *)(v39 + 16) = v84;
LABEL_246:
              *(_QWORD *)(v39 + 24) = v93;
              *(_QWORD *)(v39 + 32) = v95;
              *(_QWORD *)(v39 + 40) = v97;
LABEL_247:
              v104 = 1;
              goto LABEL_248;
            }
            v124 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v84);
            v11 = v124;
            if (v124 < v117 || v120 < v124)
              break;
            if (__OFADD__(v114, 1))
              goto LABEL_241;
            ++v84;
            ++v114;
            ++v123;
            if (v84 >= v76)
              goto LABEL_242;
          }
          switch((char)v124)
          {
            case '+':
            case '-':
              if (v114 != 0 || (v219 & 1) == 0)
                goto LABEL_139;
              v114 = 0;
              v118 = 0;
              v119 = 0;
              v121 = 0;
              if (++v84 >= v76)
                goto LABEL_293;
              continue;
            case ',':
            case '/':
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case ':':
            case ';':
            case '<':
            case '=':
            case '>':
            case '?':
            case '@':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
              goto LABEL_139;
            case '.':
              if (v114 < 1 || (v121 & 1) == 0)
                goto LABEL_139;
              v114 = 0;
              v118 = 0;
              v121 = 0;
              ++v84;
              v119 = 1;
              if (v84 < v76)
                continue;
              __break(1u);
              goto LABEL_139;
            case 'E':
              goto LABEL_133;
            default:
              if (v124 != 101)
                goto LABEL_139;
LABEL_133:
              if (v114 < 1 || (v216 & 1) == 0)
              {
LABEL_139:
                v93 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v84, v222, v215);
                v95 = v125;
                v97 = v126;
                v11 = v11;
                goto LABEL_237;
              }
              v114 = 0;
              v119 = 0;
              v121 = 0;
              ++v84;
              v118 = 1;
              if (v84 >= v76)
                goto LABEL_294;
              break;
          }
        }
      }
LABEL_304:
      __break(1u);
LABEL_305:
      __break(1u);
      goto LABEL_306;
    }
    v57 = v56;
    v58 = v222;
    if (!specialized static Comparable.<= infix(_:_:)(v222, v12 + v11 - 1))
      goto LABEL_297;
    if (!specialized static Comparable.<= infix(_:_:)(v12 + v11 - 1, v222 + a4))
      goto LABEL_298;
    v59 = specialized min<A>(_:_:)(v12 + v11, v222 + a4);
    if (v59 <= v222)
    {
      v70 = 0;
      v63 = 1;
      goto LABEL_103;
    }
    v60 = v59;
    v211 = v57;
    v61 = a4 + v222;
    v62 = -(uint64_t)v222;
    v63 = 1;
    v64 = v222;
LABEL_59:
    v65 = 0;
    v66 = 0;
    v67 = v61 - v64;
    v68 = v62 + v64;
    while ((uint64_t)(v68 + v66) >= 0 && (uint64_t)(v67 + v65) >= 1)
    {
      v69 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v64 + v66);
      if (v69 == 10)
      {
        v71 = __OFADD__(v63++, 1);
        if (!v71)
        {
          v64 += v66 + 1;
          goto LABEL_76;
        }
        goto LABEL_305;
      }
      if (v69 == 13)
      {
        v72 = v64 + v66;
        if (!specialized static Comparable.<= infix(_:_:)(v64 + v66 + 1, v55))
          goto LABEL_74;
        if (((v64 - v222 + v66 + 1) & 0x8000000000000000) == 0 && (uint64_t)(~v66 + v67) >= 1)
        {
          if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v64 + v66 + 1) == 10)
            v72 = v64 + v66 + 1;
LABEL_74:
          v71 = __OFADD__(v63++, 1);
          if (!v71)
          {
            v64 = v72 + 1;
LABEL_76:
            v61 = v215 + v222;
            v62 = -(uint64_t)v222;
            if (v64 >= v60)
            {
              v70 = 0;
LABEL_78:
              v58 = v222;
              v57 = v211;
LABEL_103:
              lazy protocol witness table accessor for type JSONError and conformance JSONError();
              swift_allocError();
              *(_QWORD *)v92 = 0xD000000000000010;
              *(_QWORD *)(v92 + 8) = 0x80000001823071F0;
              *(_QWORD *)(v92 + 16) = v57;
              *(_QWORD *)(v92 + 24) = v63;
              *(_QWORD *)(v92 + 32) = v70;
              *(_QWORD *)(v92 + 40) = v55 - v58;
              *(_BYTE *)(v92 + 48) = 1;
              goto LABEL_249;
            }
            goto LABEL_59;
          }
LABEL_306:
          __break(1u);
LABEL_307:
          __break(1u);
LABEL_308:
          __break(1u);
LABEL_309:
          __break(1u);
LABEL_310:
          __break(1u);
LABEL_311:
          __break(1u);
        }
        __break(1u);
LABEL_313:
        __break(1u);
LABEL_314:
        __break(1u);
LABEL_315:
        __break(1u);
LABEL_316:
        __break(1u);
LABEL_317:
        __break(1u);
        JUMPOUT(0x181E35DACLL);
      }
      v70 = v66 + 1;
      if (__OFADD__(v66, 1))
        goto LABEL_289;
      ++v66;
      --v65;
      if (v64 + v66 >= v60)
        goto LABEL_78;
    }
    __break(1u);
LABEL_289:
    __break(1u);
LABEL_290:
    __break(1u);
    goto LABEL_291;
  }
  if (!a2)
  {
LABEL_291:
    __break(1u);
    goto LABEL_292;
  }
  v13 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a1);
  if (v13 == 48)
  {
    v215 = a4;
    if (v11 >= 1)
      v14 = 1;
    else
      v14 = v11;
    v15 = v12 + v14;
    v16 = v11 - v14;
    if (!specialized Collection.isEmpty.getter(v12 + v14, v11 - v14))
    {
      v17 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v15);
      v18 = 0;
      if (v17 <= 0x57u)
      {
        v40 = v12;
        if (v17 == 46 || v17 == 69)
          goto LABEL_151;
LABEL_107:
        v98 = _asciiNumbers.getter();
        v99 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v15, a3, v215);
        v101 = v100;
        v103 = v102;
        if (v17 < v98 || HIBYTE(v98) < v17)
        {
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_OWORD *)v39 = xmmword_18206BE50;
          *(_QWORD *)(v39 + 16) = v17;
          *(_QWORD *)(v39 + 24) = v99;
          *(_QWORD *)(v39 + 32) = v101;
          *(_QWORD *)(v39 + 40) = v103;
          goto LABEL_247;
        }
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_QWORD *)v39 = v99;
        *(_QWORD *)(v39 + 8) = v101;
        *(_QWORD *)(v39 + 16) = v103;
        goto LABEL_110;
      }
      if (v17 == 120)
      {
LABEL_12:
        if (specialized static Comparable.<= infix(_:_:)(v15 + 1, v12 + v11))
        {
          v19 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v15 + 1);
          if (UInt8.isValidHexDigit.getter(v19))
            goto LABEL_14;
          v93 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v15 + 1, a3, v215);
          v95 = v180;
          v97 = v181;
          v11 = v19;
          goto LABEL_237;
        }
        if (v16 < 1)
          goto LABEL_317;
        v105 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v15);
        v106 = v15;
        v107 = a3;
        v108 = v215;
LABEL_236:
        v93 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v106, v107, v108);
        v95 = v174;
        v97 = v175;
        v11 = v105;
LABEL_237:
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_OWORD *)v39 = xmmword_18206BE50;
        goto LABEL_238;
      }
      if (v17 != 101)
      {
        if (v17 == 88)
          goto LABEL_12;
        goto LABEL_107;
      }
LABEL_150:
      v40 = v12;
      goto LABEL_151;
    }
LABEL_149:
    v18 = 0;
    goto LABEL_150;
  }
  if ((v13 - 58) >= 0xF7u)
  {
LABEL_148:
    v215 = a4;
    goto LABEL_149;
  }
  switch(v13)
  {
    case '+':
    case '-':
      if (v11 < 2)
      {
        if (v11 != 1)
          goto LABEL_316;
        v127 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12);
        v93 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v12, a3, a4);
        v95 = v128;
        v97 = v129;
        v11 = v127;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        v112 = 0xD000000000000010;
        v113 = "at end of number";
        goto LABEL_146;
      }
      v40 = v12 + 1;
      v41 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 1);
      if (v41 == 48)
      {
        v42 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2, v12, v11);
        v44 = specialized static JSON5Scanner.validateLeadingZero(in:zero:fullSource:)(v42, v43, (unsigned __int8 *)(v12 + 1), a3, a4);
        if (v6)
          return v7;
        v40 = (unint64_t)v44;
        v215 = a4;
        if ((v45 & 1) == 0)
          goto LABEL_253;
LABEL_14:
        if (*(_BYTE *)v12 != 45)
          goto LABEL_270;
        v20 = specialized _parseJSON5Integer<A>(_:isHex:)((_BYTE *)v12, v11, 1, (uint64_t (*)(_BYTE *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:));
        if ((v21 & 1) == 0)
        {
          *(double *)&v22 = COERCE_DOUBLE(specialized Double.init<A>(exactly:)(v20));
          if ((v23 & 1) == 0)
            return *(double *)&v22;
        }
        goto LABEL_179;
      }
      v179 = v41;
      if ((v41 - 49) < 9u)
        goto LABEL_252;
      if (v41 == 46)
        goto LABEL_281;
      if (v41 == 78)
      {
        v197 = a4;
        v18 = 1;
        v198 = (char *)specialized BufferView.dropFirst(_:)(1, v12, v11);
        specialized static JSON5Scanner.validateNaN(from:fullSource:)(v198, v199, a3, v197);
        if (v6)
          return v7;
        v215 = v197;
        goto LABEL_151;
      }
      if (v41 != 73)
      {
        v226 = 0.0;
        v227 = 0xE000000000000000;
        _StringGuts.grow(_:)(20);
        v200._countAndFlagsBits = 0x27207265746661;
        v200._object = (void *)0xE700000000000000;
        DefaultStringInterpolation.appendLiteral(_:)(v200);
        v201 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12);
        v202 = (v201 + 1);
        if ((v201 & 0x80) != 0)
          v202 = (((v201 & 0x3F) << 8) | (v201 >> 6)) + 33217;
        v225 = (v202 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v202) >> 3)) & 7)));
        v203._countAndFlagsBits = MEMORY[0x186DA46D0](&v225);
        specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v203);
        swift_bridgeObjectRelease();
        v204._countAndFlagsBits = 0x6D756E206E692027;
        v204._object = (void *)0xEB00000000726562;
        DefaultStringInterpolation.appendLiteral(_:)(v204);
        v205 = v226;
        v206 = v227;
        v93 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v40, a3, a4);
        v95 = v207;
        v97 = v208;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(double *)v39 = v205;
        *(_QWORD *)(v39 + 8) = v206;
        *(_QWORD *)(v39 + 16) = v179;
        goto LABEL_246;
      }
      v190 = a4;
      v18 = 1;
      v191 = (char *)specialized BufferView.dropFirst(_:)(1, v12, v11);
      specialized static JSON5Scanner.validateInfinity(from:fullSource:)(v191, v192, a3, v190);
      if (v6)
        return v7;
      v215 = v190;
LABEL_151:
      v132 = v12 + v11 - 1;
      v133 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v132);
      if ((v133 | 0x20) != 0x65)
      {
        specialized BufferView.withUnsafePointer<A>(_:)((const char *)v12);
        if ((v143 & 1) == 0)
        {
          v7 = v142;
          if ((~*(_QWORD *)&v142 & 0x7FF0000000000000) == 0)
          {
            if ((v18 & 1) != 0)
              return v7;
            goto LABEL_179;
          }
          goto LABEL_213;
        }
        v148 = specialized BufferView.suffix(from:)(v40, v12, v11);
        if (v149 < 1)
          goto LABEL_307;
        v150 = v148;
        v151 = v149;
        v12 = v148 + v149;
        v152 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v148);
        if (v152 == 45 || (v11 = v150, v152 == 43))
          v11 = v150 + 1;
        v224 = a3;
        if (!specialized static Comparable.<= infix(_:_:)(v11, v12))
          goto LABEL_308;
        if (v11 - v150 < 0)
          goto LABEL_309;
        if ((uint64_t)(v12 - v11) < 0)
          goto LABEL_310;
        v153 = (const char *)specialized BufferView.prefix(_:)(2, v11);
        if (specialized BufferView.withUnsafePointer<A>(_:)(v153, v154))
        {
          if (v11 < v12)
          {
            v155 = _asciiNumbers.getter();
            v156 = v155;
            v157 = 0;
            v158 = 0;
            v214 = v151 + v150;
            v210 = -v150;
            v159 = 1;
            v160 = HIBYTE(v155);
            while (1)
            {
              v218 = v159;
              v221 = v157;
              v76 = 0;
              v161 = v214 - v11;
              while (1)
              {
                if ((uint64_t)(v210 + v11 + v76) < 0 || (v82 = v161 < 1, --v161, v82))
                {
                  __break(1u);
LABEL_268:
                  __break(1u);
LABEL_269:
                  __break(1u);
LABEL_270:
                  v187 = specialized _parseJSON5Integer<A>(_:isHex:)((unsigned __int8 *)v12, v11, 1, (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:), (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseIntegerDigits<A>(_:isNegative:));
                  if ((v188 & 1) == 0)
                  {
                    *(double *)&v22 = COERCE_DOUBLE(specialized Double.init<A>(exactly:)(v187));
                    if ((v189 & 1) == 0)
                      return *(double *)&v22;
                  }
LABEL_179:
                  v144 = static String._fromUTF8Repairing(_:)();
                  v146 = v145;
                  lazy protocol witness table accessor for type JSONError and conformance JSONError();
                  swift_allocError();
                  *(_QWORD *)v39 = v144;
                  *(_QWORD *)(v39 + 8) = v146;
                  *(_OWORD *)(v39 + 16) = 0u;
                  *(_OWORD *)(v39 + 32) = 0u;
                  v104 = 11;
LABEL_248:
                  *(_BYTE *)(v39 + 48) = v104;
                  goto LABEL_249;
                }
                v162 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v11 + v76);
                LOBYTE(v84) = v162;
                if (v162 < v156 || v160 < v162)
                  break;
                if (__OFADD__(v76, 1))
                  goto LABEL_268;
                ++v76;
                if (v11 + v76 >= v12)
                  goto LABEL_269;
              }
              v116 = a3;
              switch(v162)
              {
                case '+':
                case '-':
                  if (v76 != 0 || (v221 & 1) == 0)
                    goto LABEL_243;
                  v157 = 0;
                  v159 = 0;
                  v11 += v76 + 1;
                  v158 = 3;
                  if (v11 >= v12)
                    goto LABEL_300;
                  continue;
                case ',':
                case '/':
                case '0':
                case '1':
                case '2':
                case '3':
                case '4':
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                case ':':
                case ';':
                case '<':
                case '=':
                case '>':
                case '?':
                case '@':
                case 'A':
                case 'B':
                case 'C':
                case 'D':
                  goto LABEL_243;
                case '.':
                  if ((v218 & 1) == 0)
                  {
                    v93 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v11 + v76, a3, v215);
                    v95 = v193;
                    v97 = v194;
                    LOBYTE(v84) = 46;
                    goto LABEL_244;
                  }
                  v157 = 0;
                  v159 = 0;
                  v11 += v76 + 1;
                  v158 = 1;
                  if (v11 >= v12)
                  {
                    __break(1u);
LABEL_213:
                    if (v7 != 0.0)
                      return v7;
                    v85 = v11;
                    v86 = v12;
                    if (v11 >= 4)
                    {
                      v85 = v11;
                      v86 = v12;
                      do
                      {
                        v182 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v86);
                        if ((v182 - 49) < 9u)
                          goto LABEL_179;
                        if ((v182 | 0x20) == 0x65)
                          return v7;
                        v183 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v86 + 1);
                        if ((v183 - 49) < 9u)
                          goto LABEL_179;
                        if ((v183 | 0x20) == 0x65)
                          return v7;
                        v184 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v86 + 2);
                        if ((v184 - 49) < 9u)
                          goto LABEL_179;
                        if ((v184 | 0x20) == 0x65)
                          return v7;
                        v185 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v86 + 3);
                        if ((v185 - 49) < 9u)
                          goto LABEL_179;
                        if ((v185 | 0x20) == 0x65)
                          return v7;
                        v86 = specialized BufferView.dropFirst(_:)(4, v86, v85);
                        v85 = v186;
                      }
                      while (v186 >= 4);
                    }
LABEL_215:
                    if (v85 != 1)
                    {
                      if (v85 != 2)
                      {
                        if (v85 != 3)
                          return v7;
                        v163 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v86 + 2);
                        if ((v163 - 49) < 9u)
                          goto LABEL_179;
                        if ((v163 | 0x20) == 0x65)
                          return v7;
                      }
                      v164 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v86 + 1);
                      if ((v164 - 49) < 9u)
                        goto LABEL_179;
                      if ((v164 | 0x20) == 0x65)
                        return v7;
                    }
                    if ((specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v86)
                                         - 49) > 8u)
                      return v7;
                    goto LABEL_179;
                  }
                  break;
                case 'E':
                  goto LABEL_206;
                default:
                  v116 = a3;
                  if (v162 != 101)
                    goto LABEL_243;
LABEL_206:
                  if (v158 != 1 && (v158 || (uint64_t)v76 < 1))
                    goto LABEL_243;
                  v159 = 0;
                  v11 += v76 + 1;
                  v158 = 2;
                  v157 = 1;
                  if (v11 < v12)
                    continue;
                  goto LABEL_299;
              }
            }
          }
          goto LABEL_313;
        }
        v165 = v11 + 2;
        if ((uint64_t)(v12 - (v11 + 2)) < 1 || v165 >= v12 || ((v165 - v150) & 0x8000000000000000) != 0)
        {
LABEL_232:
          __break(1u);
        }
        else
        {
          v166 = v151 + v150 - v11 - 3;
          v167 = v11 - v150 + 3;
          while (1)
          {
            v168 = v167;
            v169 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v165);
            if (!UInt8.isValidHexDigit.getter(v169))
              break;
            v82 = v166-- < 1;
            if (!v82 && ++v165 < v12)
            {
              v167 = v168 + 1;
              if ((v168 & 0x8000000000000000) == 0)
                continue;
            }
            goto LABEL_232;
          }
        }
        LOBYTE(v84) = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v165);
        v93 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v165, v224, v215);
        v95 = v170;
        v97 = v171;
        v172 = 0xED00007265626D75;
        v173 = 0x6E20786568206E69;
        goto LABEL_245;
      }
      v134 = v133;
      if (!specialized static Comparable.<= infix(_:_:)(a3, v12 + v11 - 1))
        goto LABEL_295;
      a4 = v215;
      if (!specialized static Comparable.<= infix(_:_:)(v12 + v11 - 1, a3 + v215))
        goto LABEL_296;
      v135 = specialized min<A>(_:_:)(v12 + v11, a3 + v215);
      if (v135 <= a3)
      {
        a4 = 0;
        v11 = 1;
        goto LABEL_181;
      }
      v8 = v135;
      v213 = v134;
      v136 = v215 + a3;
      v137 = -(uint64_t)a3;
      v11 = 1;
      v220 = -(uint64_t)a3;
      v223 = a3;
      v138 = a3;
      v217 = v215 + a3;
      do
      {
        v40 = 0;
        v12 = 0;
        a3 = v136 - v138;
        v139 = v137 + v138;
        while (1)
        {
          if ((uint64_t)(v139 + v12) < 0 || (uint64_t)(a3 + v40) < 1)
          {
            __break(1u);
LABEL_280:
            __break(1u);
LABEL_281:
            v195 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2, v12, v11);
            specialized static JSON5Scanner.validateLeadingDecimal(from:fullSource:)(v195, v196, a3, a4);
            if (v8)
              return v7;
LABEL_252:
            v215 = a4;
LABEL_253:
            v18 = 0;
            goto LABEL_151;
          }
          v140 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v138 + v12);
          if (v140 == 10)
          {
            v71 = __OFADD__(v11++, 1);
            v137 = v220;
            if (!v71)
            {
              v138 += v12 + 1;
              goto LABEL_173;
            }
LABEL_302:
            __break(1u);
LABEL_303:
            __break(1u);
            goto LABEL_304;
          }
          if (v140 == 13)
            break;
          a4 = v12 + 1;
          if (__OFADD__(v12, 1))
            goto LABEL_280;
          ++v12;
          --v40;
          if (v138 + v12 >= v8)
            goto LABEL_175;
        }
        v141 = v138 + v12;
        a4 = v138 + v12 + 1;
        v137 = v220;
        if (!specialized static Comparable.<= infix(_:_:)(a4, v132))
          goto LABEL_171;
        if (((v220 + v138 + v12 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v12 + a3) < 1)
          goto LABEL_311;
        if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v138 + v12 + 1) == 10)
          v141 = v138 + v12 + 1;
LABEL_171:
        v71 = __OFADD__(v11++, 1);
        if (v71)
          goto LABEL_303;
        v138 = v141 + 1;
LABEL_173:
        v136 = v217;
      }
      while (v138 < v8);
      a4 = 0;
LABEL_175:
      a3 = v223;
      v134 = v213;
LABEL_181:
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(_QWORD *)v147 = 0xD000000000000010;
      *(_QWORD *)(v147 + 8) = 0x80000001823071F0;
      *(_QWORD *)(v147 + 16) = v134;
      *(_QWORD *)(v147 + 24) = v11;
      *(_QWORD *)(v147 + 32) = a4;
      *(_QWORD *)(v147 + 40) = v132 - a3;
      *(_BYTE *)(v147 + 48) = 1;
LABEL_249:
      swift_willThrow();
      return v7;
    case '.':
      v130 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(1, v12, v11);
      specialized static JSON5Scanner.validateLeadingDecimal(from:fullSource:)(v130, v131, a3, a4);
      if (!v6)
        goto LABEL_148;
      return v7;
    case 'I':
      specialized static JSON5Scanner.validateInfinity(from:fullSource:)((char *)v12, v11, a3, a4);
      goto LABEL_142;
    case 'N':
      specialized static JSON5Scanner.validateNaN(from:fullSource:)((char *)v12, v11, a3, a4);
LABEL_142:
      if (v6)
        return v7;
      v215 = a4;
      v18 = 1;
      goto LABEL_150;
    default:
      goto LABEL_315;
  }
}

{
  unint64_t v6;
  double v7;
  unint64_t v8;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  char v18;
  unsigned __int8 v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  char v25;
  uint64_t v26;
  unint64_t v27;
  unsigned __int8 v28;
  unsigned int v29;
  BOOL v30;
  uint64_t v31;
  unsigned __int8 v32;
  __int16 v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned __int8 v41;
  unsigned __int8 *v42;
  uint64_t v43;
  unsigned __int8 *v44;
  char v45;
  unsigned __int8 v46;
  unsigned __int8 *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unsigned __int8 v53;
  __int16 v54;
  uint64_t v55;
  unsigned __int8 v56;
  unsigned __int8 v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  int v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  double v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  unsigned __int8 v77;
  unsigned __int8 v78;
  unsigned __int8 v79;
  unsigned __int8 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  __int16 v86;
  unsigned __int8 v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  BOOL v91;
  unsigned __int8 v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int16 v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  unsigned __int8 v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unsigned __int8 v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  const char *v115;
  uint64_t v116;
  __int16 v117;
  unint64_t v118;
  unsigned __int8 v119;
  char v120;
  char v121;
  unsigned int v122;
  char v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned __int8 v129;
  uint64_t v130;
  uint64_t v131;
  unsigned __int8 *v132;
  uint64_t v133;
  uint64_t v134;
  unsigned __int8 v135;
  unsigned __int8 v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  int v142;
  uint64_t v143;
  double v144;
  char v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  const char *v155;
  size_t v156;
  __int16 v157;
  unsigned __int8 v158;
  char v159;
  char v160;
  char v161;
  unsigned int v162;
  uint64_t v163;
  unsigned __int8 v164;
  unsigned __int8 v165;
  unsigned __int8 v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unsigned __int8 v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unsigned __int8 v181;
  uint64_t v182;
  uint64_t v183;
  unsigned __int8 v184;
  unsigned __int8 v185;
  unsigned __int8 v186;
  unsigned __int8 v187;
  uint64_t v188;
  unint64_t v189;
  char v190;
  char v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unsigned __int8 *v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  Swift::String v202;
  unsigned __int8 v203;
  unsigned int v204;
  Swift::String v205;
  Swift::String v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unsigned __int8 v213;
  uint64_t v214;
  unsigned __int8 v215;
  uint64_t v216;
  uint64_t v217;
  char v218;
  unint64_t v219;
  char v220;
  char v221;
  uint64_t v222;
  char v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;

  v8 = v6;
  v11 = a2;
  v12 = a1;
  if ((a5 & 1) == 0)
  {
    if (!a2)
    {
LABEL_291:
      __break(1u);
LABEL_292:
      __break(1u);
LABEL_293:
      __break(1u);
LABEL_294:
      __break(1u);
LABEL_295:
      __break(1u);
LABEL_296:
      __break(1u);
LABEL_297:
      __break(1u);
LABEL_298:
      __break(1u);
LABEL_299:
      __break(1u);
      goto LABEL_300;
    }
    v25 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a1);
    v224 = a3;
    if (v25 == 48)
    {
      if (v11 >= 1)
        v26 = 1;
      else
        v26 = v11;
      v27 = v12 + v26;
      if (!specialized Collection.isEmpty.getter(v12 + v26, v11 - v26))
      {
        v28 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v27);
        v29 = v28;
        v30 = v28 - 46 > 0x37 || ((1 << (v28 - 46)) & 0x80000000800001) == 0;
        v31 = v12;
        if (v30)
        {
          v32 = v28;
          v33 = _asciiNumbers.getter();
          v34 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v27, v224, a4);
          v36 = v35;
          v38 = v37;
          if (v29 < v33 || HIBYTE(v33) < v32)
          {
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_OWORD *)v39 = xmmword_18206BE50;
            *(_QWORD *)(v39 + 16) = v32;
            *(_QWORD *)(v39 + 24) = v34;
            *(_QWORD *)(v39 + 32) = v36;
            *(_QWORD *)(v39 + 40) = v38;
            goto LABEL_247;
          }
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_QWORD *)v39 = v34;
          *(_QWORD *)(v39 + 8) = v36;
          *(_QWORD *)(v39 + 16) = v38;
LABEL_110:
          *(_QWORD *)(v39 + 24) = 0;
          *(_QWORD *)(v39 + 32) = 0;
          *(_QWORD *)(v39 + 40) = 0;
          v106 = 10;
          goto LABEL_248;
        }
        goto LABEL_46;
      }
    }
    else if ((v25 - 58) < 0xF7u)
    {
      if (v25 != 45)
      {
LABEL_300:
        __break(1u);
        goto LABEL_301;
      }
      if (v11 < 2)
      {
        v95 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v12, a3, a4);
        v97 = v96;
        v99 = v98;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_QWORD *)v39 = 0xD000000000000010;
        *(_QWORD *)(v39 + 8) = 0x80000001823071F0;
        *(_QWORD *)(v39 + 16) = 45;
        goto LABEL_246;
      }
      v31 = v12 + 1;
      v46 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 1);
      if (v46 == 48)
      {
        v47 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2, v12, v11);
        specialized static JSONScanner.validateLeadingZero(in:fullSource:)(v47, v48, a3, a4);
        if (v6)
          return v7;
      }
      else
      {
        v111 = v46;
        if ((v46 - 49) >= 9u)
        {
          v95 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v12 + 1, a3, a4);
          v97 = v112;
          v99 = v113;
          v11 = v111;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          v114 = 0xD000000000000013;
          v115 = "after '-' in number";
LABEL_146:
          *(_QWORD *)v39 = v114;
          *(_QWORD *)(v39 + 8) = (unint64_t)(v115 - 32) | 0x8000000000000000;
LABEL_238:
          *(_QWORD *)(v39 + 16) = v11;
          goto LABEL_246;
        }
      }
      goto LABEL_46;
    }
    v31 = v12;
LABEL_46:
    v217 = a4;
    if ((a6 & 1) != 0 && v31 + 1 < v12 + v11)
    {
      v49 = v31 - v12 + 1;
      v50 = v31;
      while (1)
      {
        v51 = v50 + 1;
        if ((specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v50 + 1) | 0x20) == 0x65)
          break;
        v52 = v50 + 2;
        ++v49;
        ++v50;
        if (v52 >= v12 + v11)
          goto LABEL_54;
      }
      v53 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v50);
      v54 = _asciiNumbers.getter();
      if (v53 < v54 || HIBYTE(v54) < v53)
      {
        if (v49 < 0 || v11 - v49 < 1)
          goto LABEL_313;
        v107 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v51);
        v108 = v51;
        v109 = v224;
        v110 = a4;
        goto LABEL_236;
      }
    }
LABEL_54:
    v55 = v12 + v11 - 1;
    v56 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v55);
    if ((v56 - 58) > 0xF5u)
    {
      specialized BufferView.withUnsafePointer<A>(_:)((const char *)v12);
      if ((v74 & 1) == 0)
      {
        if ((~*(_QWORD *)&v73 & 0x7FF0000000000000) == 0)
          goto LABEL_179;
        v7 = v73;
        if (v73 != 0.0)
          return v7;
        v75 = v11;
        v76 = v12;
        if (v11 >= 4)
        {
          v75 = v11;
          v76 = v12;
          do
          {
            v77 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v76);
            if ((v77 - 49) < 9u)
              goto LABEL_179;
            if ((v77 | 0x20) == 0x65)
              return v7;
            v78 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v76 + 1);
            if ((v78 - 49) < 9u)
              goto LABEL_179;
            if ((v78 | 0x20) == 0x65)
              return v7;
            v79 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v76 + 2);
            if ((v79 - 49) < 9u)
              goto LABEL_179;
            if ((v79 | 0x20) == 0x65)
              return v7;
            v80 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v76 + 3);
            if ((v80 - 49) < 9u)
              goto LABEL_179;
            if ((v80 | 0x20) == 0x65)
              return v7;
            v76 = specialized BufferView.dropFirst(_:)(4, v76, v75);
            v75 = v81;
          }
          while (v81 >= 4);
        }
        goto LABEL_215;
      }
      v82 = specialized BufferView.suffix(from:)(v31, v12, v11);
      v11 = v82;
      v84 = v83;
      v85 = v82 + v83;
      if (v83 <= 0)
      {
        v93 = v82;
      }
      else
      {
        v86 = _asciiNumbers.getter();
        v87 = v86;
        v88 = 0;
        v89 = HIBYTE(v86);
        v90 = v84;
        while (1)
        {
          if (v88 < 0)
            goto LABEL_289;
          v91 = v90-- < 1;
          if (v91)
            goto LABEL_289;
          v92 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v11 + v88);
          if (v92 < v87 || v89 < v92)
            break;
          ++v88;
          v93 = v11 + v88;
          if (v11 + v88 >= v85)
            goto LABEL_118;
        }
        v93 = v11 + v88;
      }
LABEL_118:
      if (v93 < v85)
      {
        v116 = v93 - v11;
        v117 = _asciiNumbers.getter();
        v119 = v117;
        v120 = 0;
        v214 = v84 + v11;
        v211 = -v11;
        v121 = 1;
        v122 = HIBYTE(v117);
        v123 = 1;
        while (1)
        {
          v221 = v120;
          v218 = v121;
          v124 = v214 - v93;
          v125 = v211 + v93;
          while (1)
          {
            if ((v125 & 0x8000000000000000) != 0 || (v91 = v124 < 1, --v124, v91))
            {
              __break(1u);
LABEL_241:
              __break(1u);
LABEL_242:
              __break(1u);
LABEL_243:
              v95 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v11 + v85, v118, v217);
              v97 = v178;
              v99 = v179;
LABEL_244:
              v174 = 0xE900000000000072;
              v175 = 0x65626D756E206E69;
LABEL_245:
              lazy protocol witness table accessor for type JSONError and conformance JSONError();
              swift_allocError();
              *(_QWORD *)v39 = v175;
              *(_QWORD *)(v39 + 8) = v174;
              *(_QWORD *)(v39 + 16) = v93;
LABEL_246:
              *(_QWORD *)(v39 + 24) = v95;
              *(_QWORD *)(v39 + 32) = v97;
              *(_QWORD *)(v39 + 40) = v99;
LABEL_247:
              v106 = 1;
              goto LABEL_248;
            }
            v126 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v93);
            v11 = v126;
            if (v126 < v119 || v122 < v126)
              break;
            if (__OFADD__(v116, 1))
              goto LABEL_241;
            ++v93;
            ++v116;
            ++v125;
            if (v93 >= v85)
              goto LABEL_242;
          }
          switch((char)v126)
          {
            case '+':
            case '-':
              if (v116 != 0 || (v221 & 1) == 0)
                goto LABEL_139;
              v116 = 0;
              v120 = 0;
              v121 = 0;
              v123 = 0;
              if (++v93 >= v85)
                goto LABEL_292;
              continue;
            case ',':
            case '/':
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case ':':
            case ';':
            case '<':
            case '=':
            case '>':
            case '?':
            case '@':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
              goto LABEL_139;
            case '.':
              if (v116 < 1 || (v123 & 1) == 0)
                goto LABEL_139;
              v116 = 0;
              v120 = 0;
              v123 = 0;
              ++v93;
              v121 = 1;
              if (v93 < v85)
                continue;
              __break(1u);
              goto LABEL_139;
            case 'E':
              goto LABEL_133;
            default:
              if (v126 != 101)
                goto LABEL_139;
LABEL_133:
              if (v116 < 1 || (v218 & 1) == 0)
              {
LABEL_139:
                v95 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v93, v224, v217);
                v97 = v127;
                v99 = v128;
                v11 = v11;
                goto LABEL_237;
              }
              v116 = 0;
              v121 = 0;
              v123 = 0;
              ++v93;
              v120 = 1;
              if (v93 >= v85)
                goto LABEL_293;
              break;
          }
        }
      }
LABEL_303:
      __break(1u);
LABEL_304:
      __break(1u);
      goto LABEL_305;
    }
    v57 = v56;
    v58 = v224;
    if (!specialized static Comparable.<= infix(_:_:)(v224, v12 + v11 - 1))
      goto LABEL_296;
    if (!specialized static Comparable.<= infix(_:_:)(v12 + v11 - 1, v224 + a4))
      goto LABEL_297;
    v59 = specialized min<A>(_:_:)(v12 + v11, v224 + a4);
    if (v59 <= v224)
    {
      v70 = 0;
      v63 = 1;
      goto LABEL_103;
    }
    v60 = v59;
    v213 = v57;
    v61 = a4 + v224;
    v62 = -(uint64_t)v224;
    v63 = 1;
    v64 = v224;
LABEL_59:
    v65 = 0;
    v66 = 0;
    v67 = v61 - v64;
    v68 = v62 + v64;
    while ((uint64_t)(v68 + v66) >= 0 && (uint64_t)(v67 + v65) >= 1)
    {
      v69 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v64 + v66);
      if (v69 == 10)
      {
        v71 = __OFADD__(v63++, 1);
        if (!v71)
        {
          v64 += v66 + 1;
          goto LABEL_76;
        }
        goto LABEL_304;
      }
      if (v69 == 13)
      {
        v72 = v64 + v66;
        if (!specialized static Comparable.<= infix(_:_:)(v64 + v66 + 1, v55))
          goto LABEL_74;
        if (((v64 - v224 + v66 + 1) & 0x8000000000000000) == 0 && (uint64_t)(~v66 + v67) >= 1)
        {
          if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v64 + v66 + 1) == 10)
            v72 = v64 + v66 + 1;
LABEL_74:
          v71 = __OFADD__(v63++, 1);
          if (!v71)
          {
            v64 = v72 + 1;
LABEL_76:
            v61 = v217 + v224;
            v62 = -(uint64_t)v224;
            if (v64 >= v60)
            {
              v70 = 0;
LABEL_78:
              v58 = v224;
              v57 = v213;
LABEL_103:
              lazy protocol witness table accessor for type JSONError and conformance JSONError();
              swift_allocError();
              *(_QWORD *)v94 = 0xD000000000000010;
              *(_QWORD *)(v94 + 8) = 0x80000001823071F0;
              *(_QWORD *)(v94 + 16) = v57;
              *(_QWORD *)(v94 + 24) = v63;
              *(_QWORD *)(v94 + 32) = v70;
              *(_QWORD *)(v94 + 40) = v55 - v58;
              *(_BYTE *)(v94 + 48) = 1;
              goto LABEL_249;
            }
            goto LABEL_59;
          }
LABEL_305:
          __break(1u);
LABEL_306:
          __break(1u);
LABEL_307:
          __break(1u);
LABEL_308:
          __break(1u);
LABEL_309:
          __break(1u);
LABEL_310:
          __break(1u);
        }
        __break(1u);
LABEL_312:
        __break(1u);
LABEL_313:
        __break(1u);
LABEL_314:
        __break(1u);
LABEL_315:
        __break(1u);
LABEL_316:
        __break(1u);
        JUMPOUT(0x181E37538);
      }
      v70 = v66 + 1;
      if (__OFADD__(v66, 1))
        goto LABEL_288;
      ++v66;
      --v65;
      if (v64 + v66 >= v60)
        goto LABEL_78;
    }
    __break(1u);
LABEL_288:
    __break(1u);
LABEL_289:
    __break(1u);
    goto LABEL_290;
  }
  if (!a2)
  {
LABEL_290:
    __break(1u);
    goto LABEL_291;
  }
  v13 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a1);
  if (v13 == 48)
  {
    v217 = a4;
    if (v11 >= 1)
      v14 = 1;
    else
      v14 = v11;
    v15 = v12 + v14;
    v16 = v11 - v14;
    if (!specialized Collection.isEmpty.getter(v12 + v14, v11 - v14))
    {
      v17 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v15);
      v18 = 0;
      if (v17 <= 0x57u)
      {
        v40 = v12;
        if (v17 == 46 || v17 == 69)
          goto LABEL_151;
LABEL_107:
        v100 = _asciiNumbers.getter();
        v101 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v15, a3, v217);
        v103 = v102;
        v105 = v104;
        if (v17 < v100 || HIBYTE(v100) < v17)
        {
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_OWORD *)v39 = xmmword_18206BE50;
          *(_QWORD *)(v39 + 16) = v17;
          *(_QWORD *)(v39 + 24) = v101;
          *(_QWORD *)(v39 + 32) = v103;
          *(_QWORD *)(v39 + 40) = v105;
          goto LABEL_247;
        }
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_QWORD *)v39 = v101;
        *(_QWORD *)(v39 + 8) = v103;
        *(_QWORD *)(v39 + 16) = v105;
        goto LABEL_110;
      }
      if (v17 == 120)
      {
LABEL_12:
        if (specialized static Comparable.<= infix(_:_:)(v15 + 1, v12 + v11))
        {
          v19 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v15 + 1);
          if (UInt8.isValidHexDigit.getter(v19))
            goto LABEL_14;
          v95 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v15 + 1, a3, v217);
          v97 = v182;
          v99 = v183;
          v11 = v19;
          goto LABEL_237;
        }
        if (v16 < 1)
          goto LABEL_316;
        v107 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v15);
        v108 = v15;
        v109 = a3;
        v110 = v217;
LABEL_236:
        v95 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v108, v109, v110);
        v97 = v176;
        v99 = v177;
        v11 = v107;
LABEL_237:
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_OWORD *)v39 = xmmword_18206BE50;
        goto LABEL_238;
      }
      if (v17 != 101)
      {
        if (v17 == 88)
          goto LABEL_12;
        goto LABEL_107;
      }
LABEL_150:
      v40 = v12;
      goto LABEL_151;
    }
LABEL_149:
    v18 = 0;
    goto LABEL_150;
  }
  if ((v13 - 58) >= 0xF7u)
  {
LABEL_148:
    v217 = a4;
    goto LABEL_149;
  }
  switch(v13)
  {
    case '+':
    case '-':
      if (v11 < 2)
      {
        if (v11 != 1)
          goto LABEL_315;
        v129 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12);
        v95 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v12, a3, a4);
        v97 = v130;
        v99 = v131;
        v11 = v129;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        v114 = 0xD000000000000010;
        v115 = "at end of number";
        goto LABEL_146;
      }
      v40 = v12 + 1;
      v41 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 1);
      if (v41 == 48)
      {
        v42 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2, v12, v11);
        v44 = specialized static JSON5Scanner.validateLeadingZero(in:zero:fullSource:)(v42, v43, (unsigned __int8 *)(v12 + 1), a3, a4);
        if (v6)
          return v7;
        v40 = (unint64_t)v44;
        v217 = a4;
        if ((v45 & 1) == 0)
        {
          v18 = 0;
          goto LABEL_151;
        }
LABEL_14:
        if (*(_BYTE *)v12 != 45)
          goto LABEL_269;
        v20 = specialized _parseJSON5Integer<A>(_:isHex:)((_BYTE *)v12, v11, 1, (uint64_t (*)(_BYTE *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:));
        if ((v21 & 1) == 0)
        {
          *(double *)&v22 = COERCE_DOUBLE(specialized Double.init<A>(exactly:)(v20));
          if ((v23 & 1) == 0)
            return *(double *)&v22;
        }
        goto LABEL_179;
      }
      v181 = v41;
      if ((v41 - 49) < 9u)
        goto LABEL_252;
      if (v41 == 46)
        goto LABEL_280;
      if (v41 == 78)
      {
        v199 = a4;
        v18 = 1;
        v200 = (char *)specialized BufferView.dropFirst(_:)(1, v12, v11);
        specialized static JSON5Scanner.validateNaN(from:fullSource:)(v200, v201, a3, v199);
        if (v6)
          return v7;
        v217 = v199;
        goto LABEL_151;
      }
      if (v41 != 73)
      {
        v228 = 0;
        v229 = 0xE000000000000000;
        _StringGuts.grow(_:)(20);
        v202._countAndFlagsBits = 0x27207265746661;
        v202._object = (void *)0xE700000000000000;
        DefaultStringInterpolation.appendLiteral(_:)(v202);
        v203 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12);
        v204 = (v203 + 1);
        if ((v203 & 0x80) != 0)
          v204 = (((v203 & 0x3F) << 8) | (v203 >> 6)) + 33217;
        v227 = (v204 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v204) >> 3)) & 7)));
        v205._countAndFlagsBits = MEMORY[0x186DA46D0](&v227);
        specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v205);
        swift_bridgeObjectRelease();
        v206._countAndFlagsBits = 0x6D756E206E692027;
        v206._object = (void *)0xEB00000000726562;
        DefaultStringInterpolation.appendLiteral(_:)(v206);
        v207 = v228;
        v208 = v229;
        v95 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v40, a3, a4);
        v97 = v209;
        v99 = v210;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_QWORD *)v39 = v207;
        *(_QWORD *)(v39 + 8) = v208;
        *(_QWORD *)(v39 + 16) = v181;
        goto LABEL_246;
      }
      v192 = a4;
      v18 = 1;
      v193 = (char *)specialized BufferView.dropFirst(_:)(1, v12, v11);
      specialized static JSON5Scanner.validateInfinity(from:fullSource:)(v193, v194, a3, v192);
      if (v6)
        return v7;
      v217 = v192;
LABEL_151:
      v134 = v12 + v11 - 1;
      v135 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v134);
      if ((v135 | 0x20) != 0x65)
      {
        specialized BufferView.withUnsafePointer<A>(_:)((const char *)v12);
        if ((v145 & 1) == 0)
        {
          v7 = v144;
          if ((~*(_QWORD *)&v144 & 0x7FF0000000000000) == 0)
          {
            if ((v18 & 1) != 0)
              return v7;
            goto LABEL_179;
          }
          goto LABEL_213;
        }
        v150 = specialized BufferView.suffix(from:)(v40, v12, v11);
        if (v151 < 1)
          goto LABEL_306;
        v152 = v150;
        v153 = v151;
        v12 = v150 + v151;
        v154 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v150);
        if (v154 == 45 || (v11 = v152, v154 == 43))
          v11 = v152 + 1;
        v226 = a3;
        if (!specialized static Comparable.<= infix(_:_:)(v11, v12))
          goto LABEL_307;
        if (v11 - v152 < 0)
          goto LABEL_308;
        if ((uint64_t)(v12 - v11) < 0)
          goto LABEL_309;
        v155 = (const char *)specialized BufferView.prefix(_:)(2, v11);
        if (specialized BufferView.withUnsafePointer<A>(_:)(v155, v156))
        {
          if (v11 < v12)
          {
            v157 = _asciiNumbers.getter();
            v158 = v157;
            v159 = 0;
            v160 = 0;
            v216 = v153 + v152;
            v212 = -v152;
            v161 = 1;
            v162 = HIBYTE(v157);
            while (1)
            {
              v220 = v161;
              v223 = v159;
              v85 = 0;
              v163 = v216 - v11;
              while (1)
              {
                if ((uint64_t)(v212 + v11 + v85) < 0 || (v91 = v163 < 1, --v163, v91))
                {
                  __break(1u);
LABEL_267:
                  __break(1u);
LABEL_268:
                  __break(1u);
LABEL_269:
                  v189 = specialized _parseJSON5Integer<A>(_:isHex:)((unsigned __int8 *)v12, v11, 1, (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:), (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseIntegerDigits<A>(_:isNegative:));
                  if ((v190 & 1) == 0)
                  {
                    *(double *)&v22 = COERCE_DOUBLE(specialized Double.init<A>(exactly:)(v189));
                    if ((v191 & 1) == 0)
                      return *(double *)&v22;
                  }
LABEL_179:
                  v146 = static String._fromUTF8Repairing(_:)();
                  v148 = v147;
                  lazy protocol witness table accessor for type JSONError and conformance JSONError();
                  swift_allocError();
                  *(_QWORD *)v39 = v146;
                  *(_QWORD *)(v39 + 8) = v148;
                  *(_OWORD *)(v39 + 16) = 0u;
                  *(_OWORD *)(v39 + 32) = 0u;
                  v106 = 11;
LABEL_248:
                  *(_BYTE *)(v39 + 48) = v106;
                  goto LABEL_249;
                }
                v164 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v11 + v85);
                LOBYTE(v93) = v164;
                if (v164 < v158 || v162 < v164)
                  break;
                if (__OFADD__(v85, 1))
                  goto LABEL_267;
                ++v85;
                if (v11 + v85 >= v12)
                  goto LABEL_268;
              }
              v118 = a3;
              switch(v164)
              {
                case '+':
                case '-':
                  if (v85 != 0 || (v223 & 1) == 0)
                    goto LABEL_243;
                  v159 = 0;
                  v161 = 0;
                  v11 += v85 + 1;
                  v160 = 3;
                  if (v11 >= v12)
                    goto LABEL_299;
                  continue;
                case ',':
                case '/':
                case '0':
                case '1':
                case '2':
                case '3':
                case '4':
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                case ':':
                case ';':
                case '<':
                case '=':
                case '>':
                case '?':
                case '@':
                case 'A':
                case 'B':
                case 'C':
                case 'D':
                  goto LABEL_243;
                case '.':
                  if ((v220 & 1) == 0)
                  {
                    v95 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v11 + v85, a3, v217);
                    v97 = v195;
                    v99 = v196;
                    LOBYTE(v93) = 46;
                    goto LABEL_244;
                  }
                  v159 = 0;
                  v161 = 0;
                  v11 += v85 + 1;
                  v160 = 1;
                  if (v11 >= v12)
                  {
                    __break(1u);
LABEL_213:
                    if (v7 != 0.0)
                      return v7;
                    v75 = v11;
                    v76 = v12;
                    if (v11 >= 4)
                    {
                      v75 = v11;
                      v76 = v12;
                      do
                      {
                        v184 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v76);
                        if ((v184 - 49) < 9u)
                          goto LABEL_179;
                        if ((v184 | 0x20) == 0x65)
                          return v7;
                        v185 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v76 + 1);
                        if ((v185 - 49) < 9u)
                          goto LABEL_179;
                        if ((v185 | 0x20) == 0x65)
                          return v7;
                        v186 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v76 + 2);
                        if ((v186 - 49) < 9u)
                          goto LABEL_179;
                        if ((v186 | 0x20) == 0x65)
                          return v7;
                        v187 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v76 + 3);
                        if ((v187 - 49) < 9u)
                          goto LABEL_179;
                        if ((v187 | 0x20) == 0x65)
                          return v7;
                        v76 = specialized BufferView.dropFirst(_:)(4, v76, v75);
                        v75 = v188;
                      }
                      while (v188 >= 4);
                    }
LABEL_215:
                    if (v75 != 1)
                    {
                      if (v75 != 2)
                      {
                        if (v75 != 3)
                          return v7;
                        v165 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v76 + 2);
                        if ((v165 - 49) < 9u)
                          goto LABEL_179;
                        if ((v165 | 0x20) == 0x65)
                          return v7;
                      }
                      v166 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v76 + 1);
                      if ((v166 - 49) < 9u)
                        goto LABEL_179;
                      if ((v166 | 0x20) == 0x65)
                        return v7;
                    }
                    if ((specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v76)
                                         - 49) >= 9u)
                      return v7;
                    goto LABEL_179;
                  }
                  break;
                case 'E':
                  goto LABEL_206;
                default:
                  v118 = a3;
                  if (v164 != 101)
                    goto LABEL_243;
LABEL_206:
                  if (v160 != 1 && (v160 || (uint64_t)v85 < 1))
                    goto LABEL_243;
                  v161 = 0;
                  v11 += v85 + 1;
                  v160 = 2;
                  v159 = 1;
                  if (v11 < v12)
                    continue;
                  goto LABEL_298;
              }
            }
          }
          goto LABEL_312;
        }
        v167 = v11 + 2;
        if ((uint64_t)(v12 - (v11 + 2)) < 1 || v167 >= v12 || ((v167 - v152) & 0x8000000000000000) != 0)
        {
LABEL_232:
          __break(1u);
        }
        else
        {
          v168 = v153 + v152 - v11 - 3;
          v169 = v11 - v152 + 3;
          while (1)
          {
            v170 = v169;
            v171 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v167);
            if (!UInt8.isValidHexDigit.getter(v171))
              break;
            v91 = v168-- < 1;
            if (!v91 && ++v167 < v12)
            {
              v169 = v170 + 1;
              if ((v170 & 0x8000000000000000) == 0)
                continue;
            }
            goto LABEL_232;
          }
        }
        LOBYTE(v93) = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v167);
        v95 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v167, v226, v217);
        v97 = v172;
        v99 = v173;
        v174 = 0xED00007265626D75;
        v175 = 0x6E20786568206E69;
        goto LABEL_245;
      }
      v136 = v135;
      if (!specialized static Comparable.<= infix(_:_:)(a3, v12 + v11 - 1))
        goto LABEL_294;
      a4 = v217;
      if (!specialized static Comparable.<= infix(_:_:)(v12 + v11 - 1, a3 + v217))
        goto LABEL_295;
      v137 = specialized min<A>(_:_:)(v12 + v11, a3 + v217);
      if (v137 <= a3)
      {
        a4 = 0;
        v11 = 1;
        goto LABEL_181;
      }
      v8 = v137;
      v215 = v136;
      v138 = v217 + a3;
      v139 = -(uint64_t)a3;
      v11 = 1;
      v222 = -(uint64_t)a3;
      v225 = a3;
      v140 = a3;
      v219 = v217 + a3;
      do
      {
        v40 = 0;
        v12 = 0;
        a3 = v138 - v140;
        v141 = v139 + v140;
        while (1)
        {
          if ((uint64_t)(v141 + v12) < 0 || (uint64_t)(a3 + v40) < 1)
          {
            __break(1u);
LABEL_279:
            __break(1u);
LABEL_280:
            v197 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2, v12, v11);
            specialized static JSON5Scanner.validateLeadingDecimal(from:fullSource:)(v197, v198, a3, a4);
            if (v8)
              return v7;
LABEL_252:
            v217 = a4;
            v18 = 0;
            goto LABEL_151;
          }
          v142 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v140 + v12);
          if (v142 == 10)
          {
            v71 = __OFADD__(v11++, 1);
            v139 = v222;
            if (!v71)
            {
              v140 += v12 + 1;
              goto LABEL_173;
            }
LABEL_301:
            __break(1u);
LABEL_302:
            __break(1u);
            goto LABEL_303;
          }
          if (v142 == 13)
            break;
          a4 = v12 + 1;
          if (__OFADD__(v12, 1))
            goto LABEL_279;
          ++v12;
          --v40;
          if (v140 + v12 >= v8)
            goto LABEL_175;
        }
        v143 = v140 + v12;
        a4 = v140 + v12 + 1;
        v139 = v222;
        if (!specialized static Comparable.<= infix(_:_:)(a4, v134))
          goto LABEL_171;
        if (((v222 + v140 + v12 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v12 + a3) < 1)
          goto LABEL_310;
        if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v140 + v12 + 1) == 10)
          v143 = v140 + v12 + 1;
LABEL_171:
        v71 = __OFADD__(v11++, 1);
        if (v71)
          goto LABEL_302;
        v140 = v143 + 1;
LABEL_173:
        v138 = v219;
      }
      while (v140 < v8);
      a4 = 0;
LABEL_175:
      a3 = v225;
      v136 = v215;
LABEL_181:
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(_QWORD *)v149 = 0xD000000000000010;
      *(_QWORD *)(v149 + 8) = 0x80000001823071F0;
      *(_QWORD *)(v149 + 16) = v136;
      *(_QWORD *)(v149 + 24) = v11;
      *(_QWORD *)(v149 + 32) = a4;
      *(_QWORD *)(v149 + 40) = v134 - a3;
      *(_BYTE *)(v149 + 48) = 1;
LABEL_249:
      swift_willThrow();
      return v7;
    case '.':
      v132 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(1, v12, v11);
      specialized static JSON5Scanner.validateLeadingDecimal(from:fullSource:)(v132, v133, a3, a4);
      if (!v6)
        goto LABEL_148;
      return v7;
    case 'I':
      specialized static JSON5Scanner.validateInfinity(from:fullSource:)((char *)v12, v11, a3, a4);
      goto LABEL_142;
    case 'N':
      specialized static JSON5Scanner.validateNaN(from:fullSource:)((char *)v12, v11, a3, a4);
LABEL_142:
      if (v6)
        return v7;
      v217 = a4;
      v18 = 1;
      goto LABEL_150;
    default:
      goto LABEL_314;
  }
}

float specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5, char a6)
{
  unint64_t v6;
  float v7;
  unint64_t v8;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  char v18;
  unsigned __int8 v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char v24;
  uint64_t v25;
  unint64_t v26;
  unsigned __int8 v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  unsigned __int8 v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unsigned __int8 *v35;
  char v36;
  unsigned __int8 v37;
  unsigned __int8 *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unsigned __int8 v44;
  __int16 v45;
  unsigned __int8 v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int16 v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 v62;
  __int16 v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  unsigned __int8 v70;
  uint64_t v71;
  unsigned __int8 v72;
  unsigned __int8 v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  int v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  float v88;
  uint64_t v89;
  uint64_t v90;
  unsigned __int8 v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  __int16 v100;
  unsigned __int8 v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  BOOL v105;
  unsigned __int8 v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int16 v110;
  unsigned __int8 v111;
  char v112;
  char v113;
  unsigned int v114;
  char v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned __int8 v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  const char *v125;
  unsigned __int8 *v126;
  uint64_t v127;
  uint64_t v128;
  unsigned __int8 v129;
  unsigned __int8 v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  int v136;
  uint64_t v137;
  float v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  const char *v148;
  size_t v149;
  __int16 v150;
  unsigned __int8 v151;
  char v152;
  char v153;
  char v154;
  unsigned int v155;
  uint64_t v156;
  unsigned __int8 v157;
  unsigned __int8 v158;
  unsigned __int8 v159;
  unsigned __int8 v160;
  unsigned __int8 v161;
  unsigned __int8 v162;
  unsigned __int8 v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unsigned __int8 v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unsigned __int8 v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  char v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unsigned __int8 *v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  Swift::String v196;
  unsigned __int8 v197;
  unsigned int v198;
  Swift::String v199;
  Swift::String v200;
  char *v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unsigned __int8 v209;
  char v210;
  unsigned __int8 v211;
  char v212;
  unint64_t v213;
  unint64_t v214;
  char v215;
  unint64_t v216;
  char v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  unint64_t v222;
  uint64_t v223;

  v8 = v6;
  v11 = a2;
  v12 = a1;
  v223 = *MEMORY[0x1E0C80C00];
  if ((a5 & 1) == 0)
  {
    if (!a2)
    {
LABEL_293:
      __break(1u);
LABEL_294:
      __break(1u);
LABEL_295:
      __break(1u);
LABEL_296:
      __break(1u);
LABEL_297:
      __break(1u);
LABEL_298:
      __break(1u);
      goto LABEL_299;
    }
    v24 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a1);
    if (v24 == 48)
    {
      v218 = a4;
      if (v11 >= 1)
        v25 = 1;
      else
        v25 = v11;
      v26 = v12 + v25;
      if (!specialized Collection.isEmpty.getter(v12 + v25, v11 - v25))
      {
        v27 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v26);
        v28 = v27;
        v29 = v27 - 46 > 0x37 || ((1 << (v27 - 46)) & 0x80000000800001) == 0;
        v30 = v12;
        if (v29)
        {
          v62 = v27;
          v63 = _asciiNumbers.getter();
          v64 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v26, a3, v218);
          v66 = v65;
          v68 = v67;
          if (v28 < v63 || HIBYTE(v63) < v62)
          {
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_OWORD *)v55 = xmmword_18206BE50;
            *(_QWORD *)(v55 + 16) = v62;
            *(_QWORD *)(v55 + 24) = v64;
            *(_QWORD *)(v55 + 32) = v66;
            *(_QWORD *)(v55 + 40) = v68;
            goto LABEL_260;
          }
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_QWORD *)v55 = v64;
          *(_QWORD *)(v55 + 8) = v66;
          *(_QWORD *)(v55 + 16) = v68;
LABEL_64:
          *(_QWORD *)(v55 + 24) = 0;
          *(_QWORD *)(v55 + 32) = 0;
          *(_QWORD *)(v55 + 40) = 0;
          v69 = 10;
          goto LABEL_261;
        }
        v213 = a3;
        if ((a6 & 1) == 0)
          goto LABEL_67;
        goto LABEL_45;
      }
    }
    else
    {
      if ((v24 - 58) < 0xF7u)
      {
        if (v24 != 45)
        {
LABEL_302:
          __break(1u);
          goto LABEL_303;
        }
        if (v11 < 2)
        {
          v50 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v12, a3, a4);
          v52 = v51;
          v54 = v53;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_QWORD *)v55 = 0xD000000000000010;
          *(_QWORD *)(v55 + 8) = 0x80000001823071F0;
          *(_QWORD *)(v55 + 16) = 45;
          goto LABEL_259;
        }
        v30 = v12 + 1;
        v37 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 1);
        if (v37 == 48)
        {
          v38 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2, v12, v11);
          specialized static JSONScanner.validateLeadingZero(in:fullSource:)(v38, v39, a3, a4);
          if (v6)
            return v7;
        }
        else
        {
          v70 = v37;
          if ((v37 - 49) >= 9u)
          {
            v50 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v12 + 1, a3, a4);
            v52 = v176;
            v54 = v177;
            v11 = v70;
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            v124 = 0xD000000000000013;
            v125 = "after '-' in number";
LABEL_251:
            *(_QWORD *)v55 = v124;
            *(_QWORD *)(v55 + 8) = (unint64_t)(v125 - 32) | 0x8000000000000000;
            goto LABEL_252;
          }
        }
        v218 = a4;
        v213 = a3;
        if ((a6 & 1) == 0)
          goto LABEL_67;
        goto LABEL_45;
      }
      v218 = a4;
    }
    v30 = v12;
    v213 = a3;
    if ((a6 & 1) == 0)
    {
LABEL_67:
      v71 = v12 + v11 - 1;
      v72 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v71);
      if ((v72 - 58) > 0xF5u)
      {
        v221 = 0;
        v88 = _stringshims_strtof_l((const char *)v12, &v221, 0);
        if (v221 && (char *)(v12 + v11) == v221)
        {
          v7 = v88;
          if ((~LODWORD(v88) & 0x7F800000) == 0)
            goto LABEL_180;
          if (v88 != 0.0)
            return v7;
          v89 = v11;
          v90 = v12;
          if (v11 >= 4)
          {
            do
            {
              v91 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v90);
              if ((v91 - 49) < 9u)
                goto LABEL_180;
              if ((v91 | 0x20) == 0x65)
                return v7;
              v92 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v90 + 1);
              if ((v92 - 49) < 9u)
                goto LABEL_180;
              if ((v92 | 0x20) == 0x65)
                return v7;
              v93 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v90 + 2);
              if ((v93 - 49) < 9u)
                goto LABEL_180;
              if ((v93 | 0x20) == 0x65)
                return v7;
              v94 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v90 + 3);
              if ((v94 - 49) < 9u)
                goto LABEL_180;
              if ((v94 | 0x20) == 0x65)
                return v7;
              v90 = specialized BufferView.dropFirst(_:)(4, v90, v89);
              v89 = v95;
            }
            while (v95 >= 4);
          }
          goto LABEL_216;
        }
        v96 = specialized BufferView.suffix(from:)(v30, v12, v11);
        v11 = v96;
        v98 = v97;
        v99 = v96 + v97;
        if (v97 <= 0)
        {
          v107 = v96;
        }
        else
        {
          v100 = _asciiNumbers.getter();
          v101 = v100;
          v102 = 0;
          v103 = HIBYTE(v100);
          v104 = v98;
          while (1)
          {
            if (v102 < 0)
              goto LABEL_291;
            v105 = v104-- < 1;
            if (v105)
              goto LABEL_291;
            v106 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v11 + v102);
            if (v106 < v101 || v103 < v106)
              break;
            ++v102;
            v107 = v11 + v102;
            if (v11 + v102 >= v99)
              goto LABEL_119;
          }
          v107 = v11 + v102;
        }
LABEL_119:
        if (v107 < v99)
        {
          v109 = v107 - v11;
          v110 = _asciiNumbers.getter();
          v111 = v110;
          v112 = 0;
          v207 = v98 + v11;
          v205 = -v11;
          v113 = 1;
          v114 = HIBYTE(v110);
          v115 = 1;
          while (1)
          {
            v210 = v115;
            v215 = v113;
            v116 = v207 - v107;
            v117 = v205 + v107;
            while (1)
            {
              if ((v117 & 0x8000000000000000) != 0 || (v105 = v116 < 1, --v116, v105))
              {
                __break(1u);
LABEL_254:
                __break(1u);
LABEL_255:
                __break(1u);
LABEL_256:
                v50 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v11 + v109, v213, v218);
                v52 = v178;
                v54 = v179;
LABEL_257:
                v172 = 0xE900000000000072;
                v173 = 0x65626D756E206E69;
LABEL_258:
                lazy protocol witness table accessor for type JSONError and conformance JSONError();
                swift_allocError();
                *(_QWORD *)v55 = v173;
                *(_QWORD *)(v55 + 8) = v172;
                *(_QWORD *)(v55 + 16) = v107;
LABEL_259:
                *(_QWORD *)(v55 + 24) = v50;
                *(_QWORD *)(v55 + 32) = v52;
                *(_QWORD *)(v55 + 40) = v54;
LABEL_260:
                v69 = 1;
                goto LABEL_261;
              }
              v118 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v107);
              v11 = v118;
              if (v118 < v111 || v114 < v118)
                break;
              if (__OFADD__(v109, 1))
                goto LABEL_254;
              ++v107;
              ++v109;
              ++v117;
              if (v107 >= v99)
                goto LABEL_255;
            }
            switch((char)v118)
            {
              case '+':
              case '-':
                if (v109 != 0 || (v112 & 1) == 0)
                  goto LABEL_140;
                v109 = 0;
                v112 = 0;
                v113 = 0;
                v115 = 0;
                if (++v107 >= v99)
                  goto LABEL_294;
                continue;
              case ',':
              case '/':
              case '0':
              case '1':
              case '2':
              case '3':
              case '4':
              case '5':
              case '6':
              case '7':
              case '8':
              case '9':
              case ':':
              case ';':
              case '<':
              case '=':
              case '>':
              case '?':
              case '@':
              case 'A':
              case 'B':
              case 'C':
              case 'D':
                goto LABEL_140;
              case '.':
                if (v109 < 1 || (v210 & 1) == 0)
                  goto LABEL_140;
                v109 = 0;
                v112 = 0;
                v115 = 0;
                ++v107;
                v113 = 1;
                if (v107 < v99)
                  continue;
                __break(1u);
                goto LABEL_140;
              case 'E':
                goto LABEL_134;
              default:
                if (v118 != 101)
                  goto LABEL_140;
LABEL_134:
                if (v109 < 1 || (v215 & 1) == 0)
                {
LABEL_140:
                  v50 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v107, v213, v218);
                  v52 = v119;
                  v54 = v120;
                  v11 = v11;
                  goto LABEL_248;
                }
                v109 = 0;
                v113 = 0;
                v115 = 0;
                ++v107;
                v112 = 1;
                if (v107 >= v99)
                  goto LABEL_295;
                break;
            }
          }
        }
LABEL_305:
        __break(1u);
LABEL_306:
        __break(1u);
        goto LABEL_307;
      }
      v73 = v72;
      if (!specialized static Comparable.<= infix(_:_:)(v213, v12 + v11 - 1))
        goto LABEL_298;
      if (!specialized static Comparable.<= infix(_:_:)(v12 + v11 - 1, v213 + v218))
      {
LABEL_299:
        __break(1u);
LABEL_300:
        __break(1u);
LABEL_301:
        __break(1u);
        goto LABEL_302;
      }
      v74 = specialized min<A>(_:_:)(v12 + v11, v213 + v218);
      if (v74 <= v213)
      {
        v85 = 0;
        v78 = 1;
        goto LABEL_116;
      }
      v75 = v74;
      v209 = v73;
      v76 = v218 + v213;
      v77 = -(uint64_t)v213;
      v78 = 1;
      v79 = v213;
LABEL_72:
      v80 = 0;
      v81 = 0;
      v82 = v76 - v79;
      v83 = v77 + v79;
      while ((uint64_t)(v83 + v81) >= 0 && (uint64_t)(v82 + v80) >= 1)
      {
        v84 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v79 + v81);
        if (v84 == 10)
        {
          v86 = __OFADD__(v78++, 1);
          if (!v86)
          {
            v79 += v81 + 1;
            goto LABEL_89;
          }
          goto LABEL_306;
        }
        if (v84 == 13)
        {
          v87 = v79 + v81;
          if (!specialized static Comparable.<= infix(_:_:)(v79 + v81 + 1, v71))
            goto LABEL_87;
          if (((v79 - v213 + v81 + 1) & 0x8000000000000000) == 0 && (uint64_t)(~v81 + v82) >= 1)
          {
            if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v79 + v81 + 1) == 10)
              v87 = v79 + v81 + 1;
LABEL_87:
            v86 = __OFADD__(v78++, 1);
            if (!v86)
            {
              v79 = v87 + 1;
LABEL_89:
              v76 = v218 + v213;
              v77 = -(uint64_t)v213;
              if (v79 >= v75)
              {
                v85 = 0;
LABEL_91:
                v73 = v209;
LABEL_116:
                lazy protocol witness table accessor for type JSONError and conformance JSONError();
                swift_allocError();
                *(_QWORD *)v108 = 0xD000000000000010;
                *(_QWORD *)(v108 + 8) = 0x80000001823071F0;
                *(_QWORD *)(v108 + 16) = v73;
                *(_QWORD *)(v108 + 24) = v78;
                *(_QWORD *)(v108 + 32) = v85;
                *(_QWORD *)(v108 + 40) = v71 - v213;
                *(_BYTE *)(v108 + 48) = 1;
                goto LABEL_262;
              }
              goto LABEL_72;
            }
LABEL_307:
            __break(1u);
LABEL_308:
            __break(1u);
LABEL_309:
            __break(1u);
LABEL_310:
            __break(1u);
LABEL_311:
            __break(1u);
LABEL_312:
            __break(1u);
          }
          __break(1u);
LABEL_314:
          __break(1u);
LABEL_315:
          __break(1u);
LABEL_316:
          __break(1u);
LABEL_317:
          __break(1u);
LABEL_318:
          __break(1u);
        }
        v85 = v81 + 1;
        if (__OFADD__(v81, 1))
          goto LABEL_290;
        ++v81;
        --v80;
        if (v79 + v81 >= v75)
          goto LABEL_91;
      }
      __break(1u);
LABEL_290:
      __break(1u);
LABEL_291:
      __break(1u);
      goto LABEL_292;
    }
LABEL_45:
    if (v30 + 1 < v12 + v11)
    {
      v40 = v30 - v12 + 1;
      v41 = v30;
      while (1)
      {
        v42 = v41 + 1;
        if ((specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v41 + 1) | 0x20) == 0x65)
          break;
        v43 = v41 + 2;
        ++v40;
        ++v41;
        if (v43 >= v12 + v11)
          goto LABEL_67;
      }
      v44 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v41);
      v45 = _asciiNumbers.getter();
      if (v44 < v45 || HIBYTE(v45) < v44)
      {
        if (v40 < 0 || v11 - v40 < 1)
          goto LABEL_315;
        v46 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v42);
        v47 = v42;
        v48 = v213;
        v49 = v218;
        goto LABEL_247;
      }
    }
    goto LABEL_67;
  }
  if (!a2)
  {
LABEL_292:
    __break(1u);
    goto LABEL_293;
  }
  v13 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a1);
  if (v13 == 48)
  {
    v218 = a4;
    if (v11 >= 1)
      v14 = 1;
    else
      v14 = v11;
    v15 = v12 + v14;
    v16 = v11 - v14;
    if (!specialized Collection.isEmpty.getter(v12 + v14, v11 - v14))
    {
      v17 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v15);
      v18 = 0;
      if (v17 <= 0x57u)
      {
        v31 = v12;
        if (v17 == 46 || v17 == 69)
          goto LABEL_151;
LABEL_58:
        v56 = _asciiNumbers.getter();
        v57 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v15, a3, v218);
        v59 = v58;
        v61 = v60;
        if (v17 < v56 || HIBYTE(v56) < v17)
        {
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_OWORD *)v55 = xmmword_18206BE50;
          *(_QWORD *)(v55 + 16) = v17;
          *(_QWORD *)(v55 + 24) = v57;
          *(_QWORD *)(v55 + 32) = v59;
          *(_QWORD *)(v55 + 40) = v61;
          goto LABEL_260;
        }
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_QWORD *)v55 = v57;
        *(_QWORD *)(v55 + 8) = v59;
        *(_QWORD *)(v55 + 16) = v61;
        goto LABEL_64;
      }
      if (v17 == 120)
      {
LABEL_12:
        if (specialized static Comparable.<= infix(_:_:)(v15 + 1, v12 + v11))
        {
          v19 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v15 + 1);
          if (UInt8.isValidHexDigit.getter(v19))
            goto LABEL_14;
          v50 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v15 + 1, a3, v218);
          v52 = v182;
          v54 = v183;
          v11 = v19;
          goto LABEL_248;
        }
        if (v16 < 1)
          goto LABEL_318;
        v46 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v15);
        v47 = v15;
        v48 = a3;
        v49 = v218;
LABEL_247:
        v50 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v47, v48, v49);
        v52 = v174;
        v54 = v175;
        v11 = v46;
LABEL_248:
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_OWORD *)v55 = xmmword_18206BE50;
LABEL_252:
        *(_QWORD *)(v55 + 16) = v11;
        goto LABEL_259;
      }
      if (v17 != 101)
      {
        if (v17 == 88)
          goto LABEL_12;
        goto LABEL_58;
      }
LABEL_150:
      v31 = v12;
      goto LABEL_151;
    }
LABEL_149:
    v18 = 0;
    goto LABEL_150;
  }
  if ((v13 - 58) >= 0xF7u)
  {
LABEL_148:
    v218 = a4;
    goto LABEL_149;
  }
  switch(v13)
  {
    case '+':
    case '-':
      if (v11 < 2)
      {
        if (v11 != 1)
          goto LABEL_317;
        v121 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12);
        v50 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v12, a3, a4);
        v52 = v122;
        v54 = v123;
        v11 = v121;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        v124 = 0xD000000000000010;
        v125 = "at end of number";
        goto LABEL_251;
      }
      v31 = v12 + 1;
      v32 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 1);
      if (v32 == 48)
      {
        v33 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2, v12, v11);
        v35 = specialized static JSON5Scanner.validateLeadingZero(in:zero:fullSource:)(v33, v34, (unsigned __int8 *)(v12 + 1), a3, a4);
        if (v6)
          return v7;
        v31 = (unint64_t)v35;
        v218 = a4;
        if ((v36 & 1) == 0)
        {
          v18 = 0;
          goto LABEL_151;
        }
LABEL_14:
        if (*(_BYTE *)v12 != 45)
          goto LABEL_271;
        v20 = specialized _parseJSON5Integer<A>(_:isHex:)((_BYTE *)v12, v11, 1, (uint64_t (*)(_BYTE *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:));
        if ((v21 & 1) == 0)
        {
          v22 = specialized Float.init<A>(exactly:)(v20);
          if ((v22 & 0x100000000) == 0)
            return *(float *)&v22;
        }
        goto LABEL_180;
      }
      v181 = v32;
      if ((v32 - 49) < 9u)
        goto LABEL_265;
      if (v32 == 46)
        goto LABEL_282;
      if (v32 == 78)
      {
        v193 = a4;
        v18 = 1;
        v194 = (char *)specialized BufferView.dropFirst(_:)(1, v12, v11);
        specialized static JSON5Scanner.validateNaN(from:fullSource:)(v194, v195, a3, v193);
        if (v6)
          return v7;
        v218 = v193;
        goto LABEL_151;
      }
      if (v32 != 73)
      {
        v221 = 0;
        v222 = 0xE000000000000000;
        _StringGuts.grow(_:)(20);
        v196._countAndFlagsBits = 0x27207265746661;
        v196._object = (void *)0xE700000000000000;
        DefaultStringInterpolation.appendLiteral(_:)(v196);
        v197 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12);
        v198 = (v197 + 1);
        if ((v197 & 0x80) != 0)
          v198 = (((v197 & 0x3F) << 8) | (v197 >> 6)) + 33217;
        v220 = (v198 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v198) >> 3)) & 7)));
        v199._countAndFlagsBits = MEMORY[0x186DA46D0](&v220);
        specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v199);
        swift_bridgeObjectRelease();
        v200._countAndFlagsBits = 0x6D756E206E692027;
        v200._object = (void *)0xEB00000000726562;
        DefaultStringInterpolation.appendLiteral(_:)(v200);
        v201 = v221;
        v202 = v222;
        v50 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v31, a3, a4);
        v52 = v203;
        v54 = v204;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_QWORD *)v55 = v201;
        *(_QWORD *)(v55 + 8) = v202;
        *(_QWORD *)(v55 + 16) = v181;
        goto LABEL_259;
      }
      v186 = a4;
      v18 = 1;
      v187 = (char *)specialized BufferView.dropFirst(_:)(1, v12, v11);
      specialized static JSON5Scanner.validateInfinity(from:fullSource:)(v187, v188, a3, v186);
      if (v6)
        return v7;
      v218 = v186;
LABEL_151:
      v128 = v12 + v11 - 1;
      v129 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v128);
      if ((v129 | 0x20) != 0x65)
      {
        v221 = 0;
        v138 = _stringshims_strtof_l((const char *)v12, &v221, 0);
        if (v221 && (char *)(v12 + v11) == v221)
        {
          v7 = v138;
          if ((~LODWORD(v138) & 0x7F800000) == 0)
          {
            if ((v18 & 1) != 0)
              return v7;
            goto LABEL_180;
          }
          goto LABEL_214;
        }
        v143 = specialized BufferView.suffix(from:)(v31, v12, v11);
        if (v144 < 1)
          goto LABEL_308;
        v145 = v143;
        v146 = v144;
        v12 = v143 + v144;
        v147 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v143);
        if (v147 == 45 || (v11 = v145, v147 == 43))
          v11 = v145 + 1;
        if (!specialized static Comparable.<= infix(_:_:)(v11, v12))
          goto LABEL_309;
        if (v11 - v145 < 0)
          goto LABEL_310;
        if ((uint64_t)(v12 - v11) < 0)
          goto LABEL_311;
        v148 = (const char *)specialized BufferView.prefix(_:)(2, v11);
        if (specialized BufferView.withUnsafePointer<A>(_:)(v148, v149))
        {
          v213 = a3;
          if (v11 < v12)
          {
            v150 = _asciiNumbers.getter();
            v151 = v150;
            v152 = 0;
            v153 = 0;
            v208 = v146 + v145;
            v206 = -v145;
            v154 = 1;
            v155 = HIBYTE(v150);
            while (1)
            {
              v212 = v154;
              v217 = v152;
              v109 = 0;
              v156 = v208 - v11;
              while (1)
              {
                if (v206 + v11 + v109 < 0 || (v105 = v156 < 1, --v156, v105))
                {
                  __break(1u);
LABEL_269:
                  __break(1u);
LABEL_270:
                  __break(1u);
LABEL_271:
                  v184 = specialized _parseJSON5Integer<A>(_:isHex:)((unsigned __int8 *)v12, v11, 1, (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:), (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseIntegerDigits<A>(_:isNegative:));
                  if ((v185 & 1) == 0)
                  {
                    v22 = specialized Float.init<A>(exactly:)(v184);
                    if ((v22 & 0x100000000) == 0)
                      return *(float *)&v22;
                  }
LABEL_180:
                  v139 = static String._fromUTF8Repairing(_:)();
                  v141 = v140;
                  lazy protocol witness table accessor for type JSONError and conformance JSONError();
                  swift_allocError();
                  *(_QWORD *)v55 = v139;
                  *(_QWORD *)(v55 + 8) = v141;
                  *(_OWORD *)(v55 + 16) = 0u;
                  *(_OWORD *)(v55 + 32) = 0u;
                  v69 = 11;
LABEL_261:
                  *(_BYTE *)(v55 + 48) = v69;
                  goto LABEL_262;
                }
                v157 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v11 + v109);
                LOBYTE(v107) = v157;
                if (v157 < v151 || v155 < v157)
                  break;
                if (__OFADD__(v109, 1))
                  goto LABEL_269;
                ++v109;
                if (v11 + v109 >= v12)
                  goto LABEL_270;
              }
              switch(v157)
              {
                case '+':
                case '-':
                  if (v109 != 0 || (v217 & 1) == 0)
                    goto LABEL_256;
                  v152 = 0;
                  v154 = 0;
                  v11 += v109 + 1;
                  v153 = 3;
                  if (v11 >= v12)
                    goto LABEL_300;
                  continue;
                case ',':
                case '/':
                case '0':
                case '1':
                case '2':
                case '3':
                case '4':
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                case ':':
                case ';':
                case '<':
                case '=':
                case '>':
                case '?':
                case '@':
                case 'A':
                case 'B':
                case 'C':
                case 'D':
                  goto LABEL_256;
                case '.':
                  if ((v212 & 1) == 0)
                  {
                    v50 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v11 + v109, v213, v218);
                    v52 = v189;
                    v54 = v190;
                    LOBYTE(v107) = 46;
                    goto LABEL_257;
                  }
                  v152 = 0;
                  v154 = 0;
                  v11 += v109 + 1;
                  v153 = 1;
                  if (v11 >= v12)
                  {
                    __break(1u);
LABEL_214:
                    if (v7 != 0.0)
                      return v7;
                    v89 = v11;
                    v90 = v12;
                    if (v11 >= 4)
                    {
                      do
                      {
                        v160 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v90);
                        if ((v160 - 49) < 9u)
                          goto LABEL_180;
                        if ((v160 | 0x20) == 0x65)
                          return v7;
                        v161 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v90 + 1);
                        if ((v161 - 49) < 9u)
                          goto LABEL_180;
                        if ((v161 | 0x20) == 0x65)
                          return v7;
                        v162 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v90 + 2);
                        if ((v162 - 49) < 9u)
                          goto LABEL_180;
                        if ((v162 | 0x20) == 0x65)
                          return v7;
                        v163 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v90 + 3);
                        if ((v163 - 49) < 9u)
                          goto LABEL_180;
                        if ((v163 | 0x20) == 0x65)
                          return v7;
                        v90 = specialized BufferView.dropFirst(_:)(4, v90, v89);
                        v89 = v164;
                      }
                      while (v164 >= 4);
                    }
LABEL_216:
                    if (v89 != 1)
                    {
                      if (v89 != 2)
                      {
                        if (v89 != 3)
                          return v7;
                        v158 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v90 + 2);
                        if ((v158 - 49) < 9u)
                          goto LABEL_180;
                        if ((v158 | 0x20) == 0x65)
                          return v7;
                      }
                      v159 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v90 + 1);
                      if ((v159 - 49) < 9u)
                        goto LABEL_180;
                      if ((v159 | 0x20) == 0x65)
                        return v7;
                    }
                    if ((specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v90)
                                         - 49) >= 9u)
                      return v7;
                    goto LABEL_180;
                  }
                  break;
                case 'E':
                  goto LABEL_207;
                default:
                  if (v157 != 101)
                    goto LABEL_256;
LABEL_207:
                  if (v153 != 1 && (v153 || v109 < 1))
                    goto LABEL_256;
                  v154 = 0;
                  v11 += v109 + 1;
                  v153 = 2;
                  v152 = 1;
                  if (v11 < v12)
                    continue;
                  goto LABEL_301;
              }
            }
          }
          goto LABEL_314;
        }
        v165 = v11 + 2;
        if ((uint64_t)(v12 - (v11 + 2)) < 1 || v165 >= v12 || ((v165 - v145) & 0x8000000000000000) != 0)
        {
LABEL_243:
          __break(1u);
        }
        else
        {
          v166 = v146 + v145 - v11 - 3;
          v167 = v11 - v145 + 3;
          while (1)
          {
            v168 = v167;
            v169 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v165);
            if (!UInt8.isValidHexDigit.getter(v169))
              break;
            v105 = v166-- < 1;
            if (!v105 && ++v165 < v12)
            {
              v167 = v168 + 1;
              if ((v168 & 0x8000000000000000) == 0)
                continue;
            }
            goto LABEL_243;
          }
        }
        LOBYTE(v107) = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v165);
        v50 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v165, a3, v218);
        v52 = v170;
        v54 = v171;
        v172 = 0xED00007265626D75;
        v173 = 0x6E20786568206E69;
        goto LABEL_258;
      }
      v130 = v129;
      if (!specialized static Comparable.<= infix(_:_:)(a3, v12 + v11 - 1))
        goto LABEL_296;
      if (!specialized static Comparable.<= infix(_:_:)(v12 + v11 - 1, a3 + v218))
        goto LABEL_297;
      v131 = specialized min<A>(_:_:)(v12 + v11, a3 + v218);
      v214 = a3;
      if (v131 <= a3)
      {
        a3 = 0;
        v11 = 1;
        goto LABEL_182;
      }
      v8 = v131;
      v211 = v130;
      v132 = v218 + a3;
      v133 = -(uint64_t)a3;
      v11 = 1;
      v134 = a3;
      v216 = v218 + a3;
      v219 = -(uint64_t)a3;
      do
      {
        v31 = 0;
        v12 = 0;
        a4 = v132 - v134;
        v135 = v133 + v134;
        while (1)
        {
          if ((uint64_t)(v135 + v12) < 0 || (uint64_t)(a4 + v31) < 1)
          {
            __break(1u);
LABEL_281:
            __break(1u);
LABEL_282:
            v191 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2, v12, v11);
            specialized static JSON5Scanner.validateLeadingDecimal(from:fullSource:)(v191, v192, a3, a4);
            if (v8)
              return v7;
LABEL_265:
            v218 = a4;
            v18 = 0;
            goto LABEL_151;
          }
          v136 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v134 + v12);
          if (v136 == 10)
          {
            v86 = __OFADD__(v11++, 1);
            v133 = v219;
            if (!v86)
            {
              v134 += v12 + 1;
              goto LABEL_173;
            }
LABEL_303:
            __break(1u);
LABEL_304:
            __break(1u);
            goto LABEL_305;
          }
          if (v136 == 13)
            break;
          a3 = v12 + 1;
          if (__OFADD__(v12, 1))
            goto LABEL_281;
          ++v12;
          --v31;
          if (v134 + v12 >= v8)
            goto LABEL_175;
        }
        v137 = v134 + v12;
        a3 = v134 + v12 + 1;
        v133 = v219;
        if (!specialized static Comparable.<= infix(_:_:)(a3, v128))
          goto LABEL_171;
        if (((v219 + v134 + v12 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v12 + a4) < 1)
          goto LABEL_312;
        if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v134 + v12 + 1) == 10)
          v137 = v134 + v12 + 1;
LABEL_171:
        v86 = __OFADD__(v11++, 1);
        if (v86)
          goto LABEL_304;
        v134 = v137 + 1;
LABEL_173:
        v132 = v216;
      }
      while (v134 < v8);
      a3 = 0;
LABEL_175:
      v130 = v211;
LABEL_182:
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(_QWORD *)v142 = 0xD000000000000010;
      *(_QWORD *)(v142 + 8) = 0x80000001823071F0;
      *(_QWORD *)(v142 + 16) = v130;
      *(_QWORD *)(v142 + 24) = v11;
      *(_QWORD *)(v142 + 32) = a3;
      *(_QWORD *)(v142 + 40) = v128 - v214;
      *(_BYTE *)(v142 + 48) = 1;
LABEL_262:
      swift_willThrow();
      return v7;
    case '.':
      v126 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(1, v12, v11);
      specialized static JSON5Scanner.validateLeadingDecimal(from:fullSource:)(v126, v127, a3, a4);
      if (!v6)
        goto LABEL_148;
      return v7;
    case 'I':
      specialized static JSON5Scanner.validateInfinity(from:fullSource:)((char *)v12, v11, a3, a4);
      goto LABEL_143;
    case 'N':
      specialized static JSON5Scanner.validateNaN(from:fullSource:)((char *)v12, v11, a3, a4);
LABEL_143:
      if (v6)
        return v7;
      v218 = a4;
      v18 = 1;
      goto LABEL_150;
    default:
      goto LABEL_316;
  }
}

float specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(char *__s1, uint64_t a2, unint64_t a3, uint64_t a4, char a5, char a6)
{
  uint64_t v6;
  float v7;
  unint64_t v12;
  __int16 v13;
  __int16 v14;
  char *v15;
  float v16;
  char *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  float v20;
  char *v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v34;
  _BYTE v35[56];
  _BYTE v36[56];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if ((a5 & 1) != 0)
  {
    v12 = specialized static JSON5Scanner.prevalidateJSONNumber(from:fullSource:)(__s1, a2, a3, a4);
    if (v6)
      return v7;
    v14 = v13;
    if ((v13 & 1) != 0)
    {
      if (a2 && *__s1 == 45)
      {
        v22 = specialized _parseJSON5Integer<A>(_:isHex:)(__s1, a2, 1, (uint64_t (*)(_BYTE *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:));
        if ((v23 & 1) != 0)
          goto LABEL_26;
        v24 = specialized Float.init<A>(exactly:)(v22);
        if ((v24 & 0x100000000) != 0)
          goto LABEL_26;
      }
      else
      {
        v27 = specialized _parseJSON5Integer<A>(_:isHex:)((unsigned __int8 *)__s1, a2, 1, (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:), (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseIntegerDigits<A>(_:isNegative:));
        if ((v28 & 1) != 0)
          goto LABEL_26;
        v24 = specialized Float.init<A>(exactly:)(v27);
        if ((v24 & 0x100000000) != 0)
          goto LABEL_26;
      }
      return *(float *)&v24;
    }
    v15 = (char *)v12;
    v34 = 0;
    v16 = _stringshims_strtof_l(__s1, &v34, 0);
    v17 = &__s1[a2];
    if (v34 && v17 == v34)
    {
      v7 = v16;
      if ((~LODWORD(v16) & 0x7F800000) == 0)
      {
        if ((v14 & 0x100) != 0)
          return v7;
        goto LABEL_26;
      }
      goto LABEL_13;
    }
    if ((((v15 - __s1) | (v17 - v15)) & 0x8000000000000000) == 0)
    {
      specialized static JSON5Scanner.validateNumber(from:fullSource:)(v15, v17 - v15, a3, a4, (uint64_t)v35);
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      v26 = v35;
      goto LABEL_29;
    }
    goto LABEL_33;
  }
  v18 = specialized static JSONScanner.prevalidateJSONNumber(from:hasExponent:fullSource:)((unsigned __int8 *)__s1, a2, a6 & 1, a3, a4);
  if (v6)
    return v7;
  v19 = v18;
  v34 = 0;
  v20 = _stringshims_strtof_l(__s1, &v34, 0);
  v21 = &__s1[a2];
  if (!v34 || v21 != v34)
  {
    if ((((v19 - (unsigned __int8 *)__s1) | (v21 - (char *)v19)) & 0x8000000000000000) == 0)
    {
      specialized static JSONScanner.validateNumber(from:fullSource:)(v19, v21 - (char *)v19, a3, a4, (uint64_t)v36);
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      v26 = v36;
LABEL_29:
      outlined init with take of JSONError((uint64_t)v26, v25);
      goto LABEL_30;
    }
    __break(1u);
LABEL_33:
    __break(1u);
  }
  v7 = v20;
  if ((~LODWORD(v20) & 0x7F800000) == 0)
  {
LABEL_26:
    v29 = static String._fromUTF8Repairing(_:)();
    v31 = v30;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_QWORD *)v32 = v29;
    *(_QWORD *)(v32 + 8) = v31;
    *(_OWORD *)(v32 + 16) = 0u;
    *(_OWORD *)(v32 + 32) = 0u;
    *(_BYTE *)(v32 + 48) = 11;
LABEL_30:
    swift_willThrow();
    return v7;
  }
LABEL_13:
  if (v7 == 0.0 && !specialized static JSONDecoderImpl.isTrueZero(_:)((unsigned __int8 *)__s1, a2))
    goto LABEL_26;
  return v7;
}

unint64_t specialized closure #2 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(void *a1, size_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v12[2];
  uint64_t v13[2];
  uint64_t v14[2];

  v14[0] = a3;
  v14[1] = a4;
  v13[0] = a5;
  v13[1] = a6;
  v12[0] = a7;
  v12[1] = a8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((specialized String.withUTF8<A>(_:)(v14, a2, a1) & 1) != 0)
  {
    v10 = 0x7FF0000000000000;
  }
  else if ((specialized String.withUTF8<A>(_:)(v13, a2, a1) & 1) != 0)
  {
    v10 = 0xFFF0000000000000;
  }
  else if ((specialized String.withUTF8<A>(_:)(v12, a2, a1) & 1) != 0)
  {
    v10 = 0x7FF8000000000000;
  }
  else
  {
    v10 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v14[2];
  uint64_t v15[2];
  uint64_t v16[2];

  v16[0] = a3;
  v16[1] = a4;
  v15[0] = a5;
  v15[1] = a6;
  v14[0] = a7;
  v14[1] = a8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((specialized String.withUTF8<A>(_:)(v16, a2, a1) & 1) != 0)
  {
    v10 = 0;
    v11 = 2139095040;
  }
  else if ((specialized String.withUTF8<A>(_:)(v15, a2, a1) & 1) != 0)
  {
    v10 = 0;
    v11 = 4286578688;
  }
  else
  {
    v12 = specialized String.withUTF8<A>(_:)(v14, a2, a1);
    v10 = v12 ^ 1;
    if ((v12 & 1) != 0)
      v11 = 2143289344;
    else
      v11 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11 | ((unint64_t)(v10 & 1) << 32);
}

uint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD)@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v10;

  result = a5(a1, a2, a3, a4, *(unsigned __int8 *)(v6 + 16), *(unsigned __int8 *)(v6 + 17));
  if (!v7)
    *a6 = v10;
  return result;
}

void partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, double *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  double v8;

  v8 = specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(a1, a2, a3, a4, *(_BYTE *)(v5 + 32), *(_BYTE *)(v5 + 33));
  if (!v6)
    *a5 = v8;
}

unint64_t specialized closure #2 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(const void *a1, size_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8)
{
  unint64_t result;
  uint64_t v17;
  const void *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  const void *v22;
  _QWORD *v23;
  BOOL v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  const void *v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRetain();
  if ((a4 & 0x1000000000000000) != 0)
  {
    a3 = static String._copying(_:)();
    v39 = v20;
    result = swift_bridgeObjectRelease();
    a4 = v39;
    if ((v39 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_8:
    v37 = a3;
    v38 = a4 & 0xFFFFFFFFFFFFFFLL;
    if ((HIBYTE(a4) & 0xF) != a2)
      goto LABEL_11;
    v19 = &v37;
    v18 = a1;
    goto LABEL_10;
  }
  if ((a4 & 0x2000000000000000) != 0)
    goto LABEL_8;
LABEL_3:
  if ((a3 & 0x1000000000000000) != 0)
  {
    v17 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    if ((a3 & 0xFFFFFFFFFFFFLL) != a2)
      goto LABEL_11;
  }
  else
  {
    result = _StringObject.sharedUTF8.getter();
    v17 = result;
    if (v34 != a2)
      goto LABEL_11;
  }
  if (!v17)
  {
    __break(1u);
    goto LABEL_43;
  }
  v18 = a1;
  v19 = (_QWORD *)v17;
LABEL_10:
  result = memcmp(v18, v19, a2);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v24 = 0;
    v25 = 2139095040;
    goto LABEL_41;
  }
LABEL_11:
  if ((a6 & 0x1000000000000000) == 0)
  {
    if ((a6 & 0x2000000000000000) == 0)
      goto LABEL_13;
LABEL_19:
    v37 = a5;
    v38 = a6 & 0xFFFFFFFFFFFFFFLL;
    if ((HIBYTE(a6) & 0xF) != a2)
      goto LABEL_22;
    v23 = &v37;
    v22 = a1;
    goto LABEL_21;
  }
  a5 = static String._copying(_:)();
  v27 = v26;
  result = swift_bridgeObjectRelease();
  a6 = v27;
  if ((v27 & 0x2000000000000000) != 0)
    goto LABEL_19;
LABEL_13:
  if ((a5 & 0x1000000000000000) != 0)
  {
    v21 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    if ((a5 & 0xFFFFFFFFFFFFLL) != a2)
      goto LABEL_22;
LABEL_15:
    if (v21)
    {
      v22 = a1;
      v23 = (_QWORD *)v21;
LABEL_21:
      result = memcmp(v22, v23, a2);
      if ((_DWORD)result)
        goto LABEL_22;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v24 = 0;
      v25 = 4286578688;
LABEL_41:
      LOBYTE(v37) = v24;
      return v25 | ((unint64_t)v24 << 32);
    }
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  result = _StringObject.sharedUTF8.getter();
  v21 = result;
  if (v35 == a2)
    goto LABEL_15;
LABEL_22:
  if ((a8 & 0x1000000000000000) == 0)
  {
    if ((a8 & 0x2000000000000000) == 0)
      goto LABEL_24;
LABEL_30:
    v37 = a7;
    v38 = a8 & 0xFFFFFFFFFFFFFFLL;
    if ((HIBYTE(a8) & 0xF) == a2)
    {
      v30 = &v37;
      v29 = a1;
      goto LABEL_32;
    }
    goto LABEL_38;
  }
  a7 = static String._copying(_:)();
  v32 = v31;
  result = swift_bridgeObjectRelease();
  a8 = v32;
  if ((v32 & 0x2000000000000000) != 0)
    goto LABEL_30;
LABEL_24:
  if ((a7 & 0x1000000000000000) != 0)
  {
    v28 = (a8 & 0xFFFFFFFFFFFFFFFLL) + 32;
    if ((a7 & 0xFFFFFFFFFFFFLL) == a2)
      goto LABEL_26;
LABEL_38:
    v33 = 0;
LABEL_39:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v24 = !v33;
    v25 = 2143289344;
    if (!v33)
      v25 = 0;
    goto LABEL_41;
  }
  result = _StringObject.sharedUTF8.getter();
  v28 = result;
  if (v36 != a2)
    goto LABEL_38;
LABEL_26:
  if (v28)
  {
    v29 = a1;
    v30 = (_QWORD *)v28;
LABEL_32:
    v33 = memcmp(v29, v30, a2) == 0;
    goto LABEL_39;
  }
LABEL_44:
  __break(1u);
  return result;
}

char *specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5, char a6, uint64_t (*a7)(unsigned __int8 *, uint64_t, uint64_t), unint64_t a8, uint64_t (*a9)(unint64_t, uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;
  char v18;
  uint64_t v19;
  unint64_t v20;
  unsigned __int8 v21;
  char v22;
  unint64_t v23;
  unsigned __int8 v24;
  char v25;
  char v26;
  char v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned __int8 v32;
  unsigned int v33;
  unsigned __int8 v35;
  __int16 v36;
  unint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 v44;
  unint64_t v45;
  unsigned __int8 v46;
  unint64_t v47;
  uint64_t (*v48)(unsigned __int8 *, uint64_t, uint64_t);
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  BOOL v53;
  uint64_t v54;
  char *result;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  __int16 v75;
  uint64_t v76;
  uint64_t v77;
  unsigned __int8 v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned __int8 v93;
  unint64_t v94;
  unsigned __int8 v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned __int8 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned __int8 v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unsigned __int8 v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  int v135;
  uint64_t v136;
  char v137;
  uint64_t v138;
  unsigned __int8 v139;
  char *v140;
  uint64_t v141;
  __int16 v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unsigned __int8 v151;
  uint64_t v152;
  uint64_t v153;
  __int16 v154;
  uint64_t v155;
  uint64_t v156;
  unsigned __int8 *v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  Swift::String v161;
  unsigned __int8 v162;
  unsigned int v163;
  Swift::String v164;
  Swift::String v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t (*v170)(unsigned __int8 *, uint64_t, uint64_t);
  unsigned __int8 v171;
  unsigned __int8 v172;
  unsigned __int8 v173;
  uint64_t (*v174)(unsigned __int8 *, uint64_t, uint64_t);
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unsigned __int8 v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;

  v10 = v9;
  LOBYTE(v11) = a5;
  v13 = a2;
  v14 = a1;
  v184 = a4;
  if ((a5 & 1) == 0)
  {
    if (!a2)
    {
LABEL_268:
      __break(1u);
LABEL_269:
      __break(1u);
LABEL_270:
      __break(1u);
LABEL_271:
      __break(1u);
LABEL_272:
      __break(1u);
LABEL_273:
      __break(1u);
LABEL_274:
      __break(1u);
      goto LABEL_275;
    }
    v28 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a1);
    if (v28 == 48)
    {
      if (v13 >= 1)
        v29 = 1;
      else
        v29 = v13;
      v30 = v14;
      if (v13 < 2)
        goto LABEL_175;
      v31 = v14 + v29;
      v32 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v14 + v29);
      v33 = v32;
      if (v32 - 46 <= 0x37 && ((1 << (v32 - 46)) & 0x80000000800001) != 0)
        goto LABEL_175;
    }
    else
    {
      v30 = v14;
      if ((v28 - 58) >= 0xF7u)
        goto LABEL_175;
      if (v28 != 45)
      {
LABEL_275:
        __break(1u);
        goto LABEL_276;
      }
      if (v13 < 2)
      {
        v63 = v14 - a3;
        if (v14 < a3 || a3 + v184 < v14)
          goto LABEL_280;
        if (a3 + v184 >= v14 + 1)
          v64 = v14 + 1;
        else
          v64 = a3 + v184;
        if (v64 <= a3)
        {
          v73 = 0;
          v67 = 1;
        }
        else
        {
          v65 = v184 + a3;
          v66 = -(uint64_t)a3;
          v67 = 1;
          v176 = v14 - a3;
          v181 = v184 + a3;
          v185 = -(uint64_t)a3;
          do
          {
            v68 = 0;
            v69 = 0;
            v70 = v65 - a3;
            v71 = v66 + a3;
            while (1)
            {
              if ((uint64_t)(v71 + v69) < 0 || (uint64_t)(v70 + v68) < 1)
                goto LABEL_265;
              v72 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v69);
              if (v72 == 10)
              {
                v53 = __OFADD__(v67++, 1);
                v66 = v185;
                if (v53)
                  goto LABEL_284;
                a3 += v69 + 1;
                goto LABEL_104;
              }
              if (v72 == 13)
                break;
              v73 = v69 + 1;
              if (__OFADD__(v69, 1))
                goto LABEL_266;
              ++v69;
              --v68;
              if (a3 + v69 >= v64)
                goto LABEL_106;
            }
            v74 = a3 + v69;
            v66 = v185;
            if (!specialized static Comparable.<= infix(_:_:)(a3 + v69 + 1, v14))
              goto LABEL_102;
            if (((v185 + a3 + v69 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v69 + v70) < 1)
              goto LABEL_293;
            if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v69 + 1) == 10)
              v74 = a3 + v69 + 1;
LABEL_102:
            v53 = __OFADD__(v67++, 1);
            if (v53)
              goto LABEL_285;
            a3 = v74 + 1;
LABEL_104:
            v65 = v181;
          }
          while (a3 < v64);
          v73 = 0;
LABEL_106:
          v63 = v176;
        }
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_QWORD *)v92 = 0xD000000000000010;
        *(_QWORD *)(v92 + 8) = 0x80000001823071F0;
        *(_QWORD *)(v92 + 16) = 45;
        *(_QWORD *)(v92 + 24) = v67;
        *(_QWORD *)(v92 + 32) = v73;
        *(_QWORD *)(v92 + 40) = v63;
        *(_BYTE *)(v92 + 48) = 1;
        return (char *)swift_willThrow();
      }
      v45 = v14 + 1;
      v46 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v14 + 1);
      if (v46 != 48)
      {
        v78 = v46;
        if ((v46 - 58) < 0xF7u)
        {
          if (!specialized static Comparable.<= infix(_:_:)(a3, v14 + 1))
            goto LABEL_291;
          if (!specialized static Comparable.<= infix(_:_:)(v14 + 1, a3 + v184))
          {
LABEL_292:
            __break(1u);
LABEL_293:
            __break(1u);
LABEL_294:
            __break(1u);
            goto LABEL_295;
          }
          v79 = specialized min<A>(_:_:)(v14 + 2, a3 + v184);
          if (v79 <= a3)
          {
            v90 = 0;
            v83 = 1;
            goto LABEL_234;
          }
          v80 = v79;
          v81 = v184 + a3;
          v82 = -(uint64_t)a3;
          v83 = 1;
          v84 = a3;
          v171 = v78;
          v177 = v184 + a3;
          while (1)
          {
LABEL_117:
            v186 = v83;
            v85 = 0;
            v86 = 0;
            v87 = v81 - v84;
            v88 = v82 + v84;
            while (1)
            {
              if ((uint64_t)(v88 + v86) < 0 || (uint64_t)(v87 + v85) < 1)
                goto LABEL_271;
              v89 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v84 + v86);
              if (v89 == 10)
                break;
              if (v89 == 13)
              {
                v91 = v84 + v86;
                if (specialized static Comparable.<= infix(_:_:)(v84 + v86 + 1, v45))
                {
                  if (((v84 - a3 + v86 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v86 + v87) < 1)
                    goto LABEL_299;
                  if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v84 + v86 + 1) == 10)v91 = v84 + v86 + 1;
                }
                v83 = v186 + 1;
                if (__OFADD__(v186, 1))
                  goto LABEL_297;
                v84 = v91 + 1;
                v81 = v177;
                v82 = -(uint64_t)a3;
                if (v91 + 1 >= v80)
                  goto LABEL_135;
                goto LABEL_117;
              }
              v90 = v86 + 1;
              if (__OFADD__(v86, 1))
                goto LABEL_273;
              ++v86;
              --v85;
              if (v84 + v86 >= v80)
              {
                v78 = v171;
                v83 = v186;
LABEL_234:
                lazy protocol witness table accessor for type JSONError and conformance JSONError();
                swift_allocError();
                *(_QWORD *)v150 = 0xD000000000000013;
                *(_QWORD *)(v150 + 8) = 0x80000001823072E0;
                *(_QWORD *)(v150 + 16) = v78;
                *(_QWORD *)(v150 + 24) = v83;
                *(_QWORD *)(v150 + 32) = v90;
                *(_QWORD *)(v150 + 40) = v45 - a3;
                *(_BYTE *)(v150 + 48) = 1;
                return (char *)swift_willThrow();
              }
            }
            v82 = -(uint64_t)a3;
            v83 = v186 + 1;
            if (__OFADD__(v186, 1))
              goto LABEL_296;
            v84 += v86 + 1;
            v81 = v177;
            if (v84 >= v80)
            {
LABEL_135:
              v90 = 0;
              v78 = v171;
              goto LABEL_234;
            }
          }
        }
        ++v14;
        goto LABEL_175;
      }
      ++v14;
      v31 = v30 + 2;
      if (specialized Collection.isEmpty.getter(v30 + 2, v13 - 2)
        || (v32 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v31),
            v33 = v32,
            v32 - 46 <= 0x37)
        && ((1 << (v32 - 46)) & 0x80000000800001) != 0)
      {
LABEL_175:
        v23 = v14;
        v14 = v30;
        if ((a6 & 1) != 0 && v23 + 1 < v30 + v13)
        {
          v117 = 0;
          while (1)
          {
            v118 = v23 + v117;
            if ((*(unsigned __int8 *)(v23 + v117 + 1) | 0x20) == 0x65)
              break;
            if (~v23 + v13 + v14 == ++v117)
              goto LABEL_186;
          }
          if ((specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v23 + v117) - 58) <= 0xF5u)
          {
            if (((v23 - v14 + v117 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v23 + v13 + v14 - v117) < 1)
              goto LABEL_283;
            v119 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v118 + 1);
            v120 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v118 + 1, a3, v184);
            v122 = v121;
            v124 = v123;
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_OWORD *)v60 = xmmword_18206BE50;
            *(_QWORD *)(v60 + 16) = v119;
            *(_QWORD *)(v60 + 24) = v120;
            *(_QWORD *)(v60 + 32) = v122;
            goto LABEL_185;
          }
        }
LABEL_186:
        v125 = v14 + v13;
        v126 = v14 + v13 - 1;
        v127 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v126);
        if ((v127 - 58) > 0xF5u)
        {
          result = (char *)a9(v14, v13);
          if ((v137 & 1) == 0)
            return result;
          return specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(v11 & 1, (char *)v14, v13, a3, v184, v23);
        }
        v48 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))(v126 - a3);
        if (v126 < a3 || a3 + v184 < v126)
          goto LABEL_274;
        if (a3 + v184 >= v125)
          v128 = v125;
        else
          v128 = a3 + v184;
        if (v128 <= a3)
        {
          v23 = 0;
          v13 = 1;
          goto LABEL_217;
        }
        v173 = v127;
        v179 = v126 - a3;
        v129 = v184 + a3;
        v130 = -(uint64_t)a3;
        v13 = 1;
        v183 = v184 + a3;
        v188 = -(uint64_t)a3;
LABEL_194:
        v131 = 0;
        v132 = 0;
        v133 = v129 - a3;
        v134 = v130 + a3;
        while ((uint64_t)(v134 + v132) >= 0 && (uint64_t)(v133 + v131) >= 1)
        {
          v135 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v132);
          if (v135 == 10)
          {
            v53 = __OFADD__(v13++, 1);
            v130 = v188;
            if (!v53)
            {
              a3 += v132 + 1;
              goto LABEL_211;
            }
            goto LABEL_278;
          }
          if (v135 == 13)
          {
            v136 = a3 + v132;
            v130 = v188;
            if (!specialized static Comparable.<= infix(_:_:)(a3 + v132 + 1, v126))
              goto LABEL_209;
            if (((v188 + a3 + v132 + 1) & 0x8000000000000000) == 0 && (uint64_t)(~v132 + v133) >= 1)
            {
              if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v132 + 1) == 10)v136 = a3 + v132 + 1;
LABEL_209:
              v53 = __OFADD__(v13++, 1);
              if (!v53)
              {
                a3 = v136 + 1;
LABEL_211:
                v129 = v183;
                if (a3 >= v128)
                {
                  v23 = 0;
LABEL_213:
                  v127 = v173;
                  v48 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))v179;
LABEL_217:
                  v62 = v127;
                  goto LABEL_218;
                }
                goto LABEL_194;
              }
LABEL_279:
              __break(1u);
LABEL_280:
              __break(1u);
LABEL_281:
              __break(1u);
            }
            __break(1u);
LABEL_283:
            __break(1u);
LABEL_284:
            __break(1u);
LABEL_285:
            __break(1u);
LABEL_286:
            __break(1u);
LABEL_287:
            __break(1u);
LABEL_288:
            __break(1u);
LABEL_289:
            __break(1u);
LABEL_290:
            __break(1u);
LABEL_291:
            __break(1u);
            goto LABEL_292;
          }
          v23 = v132 + 1;
          if (__OFADD__(v132, 1))
            goto LABEL_264;
          ++v132;
          --v131;
          if (a3 + v132 >= v128)
            goto LABEL_213;
        }
        __break(1u);
LABEL_264:
        __break(1u);
LABEL_265:
        __break(1u);
LABEL_266:
        __break(1u);
        goto LABEL_267;
      }
    }
    v35 = v32;
    v36 = _asciiNumbers.getter();
    v37 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v31, a3, v184);
    v38 = v35;
    v40 = v39;
    v42 = v41;
    if (v33 >= v36 && HIBYTE(v36) >= v38)
      goto LABEL_111;
    v43 = v38;
LABEL_232:
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_OWORD *)v60 = xmmword_18206BE50;
    *(_QWORD *)(v60 + 16) = v43;
    *(_QWORD *)(v60 + 24) = v37;
    *(_QWORD *)(v60 + 32) = v40;
    *(_QWORD *)(v60 + 40) = v42;
    goto LABEL_245;
  }
  if (!a2)
  {
LABEL_267:
    __break(1u);
    goto LABEL_268;
  }
  v18 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a1);
  if (v18 == 48)
  {
    v170 = a7;
    v174 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
    if (v13 >= 1)
      v19 = 1;
    else
      v19 = v13;
    if (v13 >= 2)
    {
      v20 = v14 + v19;
      v21 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v14 + v19);
      v22 = 0;
      if (v21 <= 0x57u)
      {
        v23 = v14;
        if (v21 == 46 || v21 == 69)
          goto LABEL_46;
LABEL_109:
        v75 = _asciiNumbers.getter();
        v37 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v14 + v19, a3, v184);
        v40 = v76;
        v42 = v77;
        if (v21 >= v75 && HIBYTE(v75) >= v21)
          goto LABEL_111;
        v43 = v21;
        goto LABEL_232;
      }
      if (v21 == 120)
      {
LABEL_12:
        v23 = v20 + 1;
        if (specialized static Comparable.<= infix(_:_:)(v20 + 1, v14 + v13))
        {
LABEL_13:
          v24 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v23);
          v25 = 1;
          if (!UInt8.isValidHexDigit.getter(v24))
          {
            v144 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v23, a3, v184);
            v146 = v145;
            v148 = v147;
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_OWORD *)v149 = xmmword_18206BE50;
            *(_QWORD *)(v149 + 16) = v24;
            *(_QWORD *)(v149 + 24) = v144;
            *(_QWORD *)(v149 + 32) = v146;
            *(_QWORD *)(v149 + 40) = v148;
            *(_BYTE *)(v149 + 48) = 1;
            return (char *)swift_willThrow();
          }
          v26 = 0;
LABEL_75:
          result = (char *)specialized _parseJSON5Integer<A>(_:isHex:)((unsigned __int8 *)v14, v13, v25, v170, v174);
          if ((v56 & 1) == 0)
            return result;
          if ((v26 & 1) != 0)
          {
            v57 = static String._fromUTF8Repairing(_:)();
            v59 = v58;
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_QWORD *)v60 = v57;
            *(_QWORD *)(v60 + 8) = v59;
            *(_OWORD *)(v60 + 16) = 0u;
            *(_OWORD *)(v60 + 32) = 0u;
            v61 = 11;
LABEL_246:
            *(_BYTE *)(v60 + 48) = v61;
            return (char *)swift_willThrow();
          }
          return specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(v11 & 1, (char *)v14, v13, a3, v184, v23);
        }
        if (v13 - v19 < 1)
          goto LABEL_290;
        goto LABEL_173;
      }
      if (v21 != 101)
      {
        if (v21 == 88)
          goto LABEL_12;
        goto LABEL_109;
      }
LABEL_45:
      v23 = v14;
      goto LABEL_46;
    }
LABEL_44:
    v22 = 0;
    goto LABEL_45;
  }
  if ((v18 - 58) >= 0xF7u)
  {
    v170 = a7;
    v174 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
    goto LABEL_44;
  }
  switch(v18)
  {
    case '+':
    case '-':
      if (v13 < 2)
      {
        if (v13 != 1)
          goto LABEL_287;
        v93 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v14);
        v94 = v14 - a3;
        if (v14 < a3)
          goto LABEL_288;
        v95 = v93;
        if (!specialized static Comparable.<= infix(_:_:)(v14, a3 + a4))
          goto LABEL_289;
        v96 = specialized min<A>(_:_:)(v14 + 1, a3 + a4);
        if (v96 <= a3)
        {
          v106 = 0;
          v100 = 1;
          goto LABEL_229;
        }
        v97 = v96;
        v172 = v95;
        v178 = v14 - a3;
        v98 = a4 + a3;
        v99 = -(uint64_t)a3;
        v100 = 1;
        v182 = a4 + a3;
        v187 = -(uint64_t)a3;
LABEL_147:
        v101 = 0;
        v102 = 0;
        v103 = v98 - a3;
        v104 = v99 + a3;
        while (1)
        {
          if ((uint64_t)(v104 + v102) < 0 || (uint64_t)(v103 + v101) < 1)
            goto LABEL_269;
          v105 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v102);
          if (v105 == 10)
            break;
          if (v105 == 13)
          {
            v107 = a3 + v102;
            if (!specialized static Comparable.<= infix(_:_:)(a3 + v102 + 1, v14))
              goto LABEL_162;
            if (((v187 + a3 + v102 + 1) & 0x8000000000000000) == 0 && (uint64_t)(~v102 + v103) >= 1)
            {
              if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v102 + 1) == 10)v107 = a3 + v102 + 1;
LABEL_162:
              v53 = __OFADD__(v100++, 1);
              if (!v53)
              {
                a3 = v107 + 1;
LABEL_164:
                v98 = v182;
                v99 = v187;
                if (a3 >= v97)
                {
                  v106 = 0;
LABEL_166:
                  v95 = v172;
                  v94 = v178;
LABEL_229:
                  lazy protocol witness table accessor for type JSONError and conformance JSONError();
                  swift_allocError();
                  *(_QWORD *)v143 = 0xD000000000000010;
                  *(_QWORD *)(v143 + 8) = 0x80000001823071F0;
                  *(_QWORD *)(v143 + 16) = v95;
                  *(_QWORD *)(v143 + 24) = v100;
                  *(_QWORD *)(v143 + 32) = v106;
                  *(_QWORD *)(v143 + 40) = v94;
                  *(_BYTE *)(v143 + 48) = 1;
                  return (char *)swift_willThrow();
                }
                goto LABEL_147;
              }
LABEL_295:
              __break(1u);
LABEL_296:
              __break(1u);
LABEL_297:
              __break(1u);
            }
            __break(1u);
LABEL_299:
            __break(1u);
            JUMPOUT(0x181E3AAA0);
          }
          v106 = v102 + 1;
          if (__OFADD__(v102, 1))
            goto LABEL_270;
          ++v102;
          --v101;
          if (a3 + v102 >= v97)
            goto LABEL_166;
        }
        v53 = __OFADD__(v100++, 1);
        if (!v53)
        {
          a3 += v102 + 1;
          goto LABEL_164;
        }
        goto LABEL_294;
      }
      v170 = a7;
      v23 = v14 + 1;
      v44 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v14 + 1);
      if (v44 == 48)
      {
        v174 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
        v20 = v14 + 2;
        if (specialized Collection.isEmpty.getter(v14 + 2, v13 - 2))
        {
          v22 = 0;
          goto LABEL_46;
        }
        v151 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v20);
        v22 = 0;
        if (v151 <= 0x57u)
        {
          if (v151 == 46 || v151 == 69)
            goto LABEL_46;
        }
        else
        {
          switch(v151)
          {
            case 'x':
              goto LABEL_239;
            case 'e':
              goto LABEL_46;
            case 'X':
LABEL_239:
              v23 = v14 + 3;
              if (specialized static Comparable.<= infix(_:_:)(v14 + 3, v14 + v13))
                goto LABEL_13;
              if (v13 - 2 < 1)
              {
                __break(1u);
LABEL_242:
                v109 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v20, a3, v184);
                v111 = v152;
                v113 = v153;
                v23 = v23;
                lazy protocol witness table accessor for type JSONError and conformance JSONError();
                swift_allocError();
                *(_QWORD *)v60 = 0xD000000000000013;
                *(_QWORD *)(v60 + 8) = 0x80000001823071D0;
LABEL_243:
                *(_QWORD *)(v60 + 16) = v23;
                goto LABEL_244;
              }
LABEL_173:
              v114 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v20);
              v109 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v20, a3, v184);
              v111 = v115;
              v113 = v116;
              v23 = v114;
              lazy protocol witness table accessor for type JSONError and conformance JSONError();
              swift_allocError();
              *(_OWORD *)v60 = xmmword_18206BE50;
              goto LABEL_243;
          }
        }
        v154 = _asciiNumbers.getter();
        v37 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v20, a3, v184);
        v40 = v155;
        v42 = v156;
        if (v151 >= v154 && HIBYTE(v154) >= v151)
        {
LABEL_111:
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_QWORD *)v60 = v37;
          *(_QWORD *)(v60 + 8) = v40;
          *(_QWORD *)(v60 + 16) = v42;
          *(_QWORD *)(v60 + 24) = 0;
          *(_QWORD *)(v60 + 32) = 0;
          *(_QWORD *)(v60 + 40) = 0;
          v61 = 10;
          goto LABEL_246;
        }
        v43 = v151;
        goto LABEL_232;
      }
      v139 = v44;
      if ((v44 - 58) >= 0xF7u)
        goto LABEL_257;
      if (v44 == 46)
        goto LABEL_256;
      if (v44 != 78)
      {
        if (v44 == 73)
        {
          v140 = (char *)specialized BufferView.dropFirst(_:)(1, v14, v13);
          result = (char *)specialized static JSON5Scanner.validateInfinity(from:fullSource:)(v140, v141, a3, v184);
          if (v9)
            return result;
          v174 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
          v22 = 1;
          goto LABEL_46;
        }
        _StringGuts.grow(_:)(20);
        v161._countAndFlagsBits = 0x27207265746661;
        v161._object = (void *)0xE700000000000000;
        DefaultStringInterpolation.appendLiteral(_:)(v161);
        v162 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v14);
        v163 = (v162 + 1);
        if ((v162 & 0x80) != 0)
          v163 = (((v162 & 0x3F) << 8) | (v162 >> 6)) + 33217;
        v189 = (v163 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v163) >> 3)) & 7)));
        v164._countAndFlagsBits = MEMORY[0x186DA46D0](&v189);
        specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v164);
        swift_bridgeObjectRelease();
        v165._countAndFlagsBits = 0x6D756E206E692027;
        v165._object = (void *)0xEB00000000726562;
        DefaultStringInterpolation.appendLiteral(_:)(v165);
        v166 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v23, a3, v184);
        v168 = v167;
        v124 = v169;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_QWORD *)v60 = 0;
        *(_QWORD *)(v60 + 8) = 0xE000000000000000;
        *(_QWORD *)(v60 + 16) = v139;
        *(_QWORD *)(v60 + 24) = v166;
        *(_QWORD *)(v60 + 32) = v168;
LABEL_185:
        *(_QWORD *)(v60 + 40) = v124;
LABEL_245:
        v61 = 1;
        goto LABEL_246;
      }
      v159 = (char *)specialized BufferView.dropFirst(_:)(1, v14, v13);
      result = (char *)specialized static JSON5Scanner.validateNaN(from:fullSource:)(v159, v160, a3, v184);
      if (v9)
        return result;
      v174 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
      v22 = 1;
LABEL_46:
      v26 = v22;
      v47 = v14 + v13;
      a8 = v14 + v13 - 1;
      v180 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a8);
      if ((v180 | 0x20) != 0x65)
      {
        v25 = 0;
        goto LABEL_75;
      }
      v48 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))(a8 - a3);
      if (a8 < a3 || a3 + v184 < a8)
        goto LABEL_272;
      if (a3 + v184 >= v47)
        v11 = v47;
      else
        v11 = a3 + v184;
      if (v11 <= a3)
      {
        v23 = 0;
        v13 = 1;
        goto LABEL_79;
      }
      v49 = v184 + a3;
      v23 = -(uint64_t)a3;
      v13 = 1;
      v170 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))(a8 - a3);
      v175 = v184 + a3;
      v184 = -(uint64_t)a3;
      do
      {
        v10 = 0;
        v14 = 0;
        v50 = v49 - a3;
        v51 = v23 + a3;
        while (1)
        {
          if ((uint64_t)(v51 + v14) < 0 || (uint64_t)(v50 + v10) < 1)
          {
            __break(1u);
LABEL_255:
            __break(1u);
LABEL_256:
            v157 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2, v14, v13);
            result = (char *)specialized static JSON5Scanner.validateLeadingDecimal(from:fullSource:)(v157, v158, a3, v184);
            if (v10)
              return result;
LABEL_257:
            v174 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
            v22 = 0;
            goto LABEL_46;
          }
          v52 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v14);
          if (v52 == 10)
          {
            v53 = __OFADD__(v13++, 1);
            v23 = v184;
            if (!v53)
            {
              a3 += v14 + 1;
              goto LABEL_71;
            }
LABEL_276:
            __break(1u);
LABEL_277:
            __break(1u);
LABEL_278:
            __break(1u);
            goto LABEL_279;
          }
          if (v52 == 13)
            break;
          v23 = v14 + 1;
          if (__OFADD__(v14, 1))
            goto LABEL_255;
          ++v14;
          --v10;
          if (a3 + v14 >= v11)
            goto LABEL_73;
        }
        v54 = a3 + v14;
        v23 = v184;
        if (!specialized static Comparable.<= infix(_:_:)(a3 + v14 + 1, a8))
          goto LABEL_69;
        if (((v184 + a3 + v14 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v14 + v50) < 1)
          goto LABEL_281;
        if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v14 + 1) == 10)
          v54 = a3 + v14 + 1;
LABEL_69:
        v53 = __OFADD__(v13++, 1);
        if (v53)
          goto LABEL_277;
        a3 = v54 + 1;
LABEL_71:
        v49 = v175;
      }
      while (a3 < v11);
      v23 = 0;
LABEL_73:
      v48 = v170;
LABEL_79:
      v62 = v180;
LABEL_218:
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(_QWORD *)v138 = 0xD000000000000010;
      *(_QWORD *)(v138 + 8) = 0x80000001823071F0;
      *(_QWORD *)(v138 + 16) = v62;
      *(_QWORD *)(v138 + 24) = v13;
      *(_QWORD *)(v138 + 32) = v23;
      *(_QWORD *)(v138 + 40) = v48;
      *(_BYTE *)(v138 + 48) = 1;
      return (char *)swift_willThrow();
    case '.':
      if (v13 >= 1)
        v108 = 1;
      else
        v108 = v13;
      v20 = v14 + v108;
      if (specialized Collection.isEmpty.getter(v14 + v108, v13 - v108))
      {
        v109 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v20, a3, a4);
        v111 = v110;
        v113 = v112;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_QWORD *)v60 = 0;
        *(_QWORD *)(v60 + 8) = 0;
        *(_QWORD *)(v60 + 16) = 46;
LABEL_244:
        *(_QWORD *)(v60 + 24) = v109;
        *(_QWORD *)(v60 + 32) = v111;
        *(_QWORD *)(v60 + 40) = v113;
        goto LABEL_245;
      }
      v174 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
      LOBYTE(v23) = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v20);
      v142 = _asciiNumbers.getter();
      if (v23 >= v142
        && HIBYTE(v142) >= v23)
      {
        v170 = a7;
        v22 = 0;
        v23 = v14;
        goto LABEL_46;
      }
      goto LABEL_242;
    case 'I':
      result = (char *)closure #1 in static JSON5Scanner.validateInfinity(from:fullSource:)((const char *)v14, v13, v14, v13, a3, a4);
      goto LABEL_140;
    case 'N':
      result = (char *)specialized BufferView.withUnsafeRawPointer<A>(_:)((const char *)v14, v13, v14, v13, a3, a4);
LABEL_140:
      if (v9)
        return result;
      v170 = a7;
      v174 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
      v22 = 1;
      goto LABEL_45;
    default:
      goto LABEL_286;
  }
}

unint64_t specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(__int16 a1, char *a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  int v6;
  unint64_t v7;
  const char *v8;
  unint64_t v14;
  double v15;
  BOOL v16;
  const char *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  size_t v23;
  char v24;
  char v25;
  const char *v26;
  char v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  int v48;
  __int16 v49;
  __int16 v50;
  unint64_t v51;
  unsigned __int8 *v52;
  unint64_t v53;
  unint64_t v54;
  char v56;
  unint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  unsigned int v90;
  unsigned int v91;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  int v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  int v109;
  uint64_t v110;
  Swift::String v111;
  Swift::String v112;
  unint64_t v113;
  unint64_t v114;
  char *v115[2];
  __int16 v116;
  __int16 v117;
  _BYTE v118[40];
  char *v119;
  char *v120;
  unsigned __int16 v121;
  unsigned __int16 v122;
  char v123;
  uint64_t v124;

  LODWORD(v8) = v6;
  LOWORD(v14) = a1;
  v124 = *MEMORY[0x1E0C80C00];
  v115[0] = 0;
  v15 = _stringshims_strtod_l(a2, v115, 0);
  if (v115[0])
    v16 = &a2[a3] == v115[0];
  else
    v16 = 0;
  if (v16)
  {
    v28 = v15;
    if (!specialized static FixedWidthInteger._convert<A>(from:)(v115, v15) || (BYTE1(v115[0]) & 1) != 0)
      goto LABEL_44;
    if (fabs(v28) < 9.00719925e15)
      return LOBYTE(v115[0]);
  }
  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)((uint64_t)a2, a3, 0x2EuLL, 0xE100000000000000, 1, (uint64_t)v118);
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v118, (uint64_t)&v119);
  if (v123 != 1)
    goto LABEL_43;
  v17 = (const char *)specialized BufferView.suffix(from:)(a6, (uint64_t)a2, a3);
  v19 = (unsigned __int8 *)v17;
  v20 = v18;
  v21 = (unint64_t)&v17[v18];
  if ((v14 & 1) == 0)
  {
    if (v18 <= 0)
    {
      v45 = (unint64_t)v17;
LABEL_84:
      if (v45 >= v21)
        goto LABEL_259;
      v56 = 0;
      v57 = v45 - (_QWORD)v19;
      v58 = 1;
      v59 = 1;
      while (2)
      {
        v60 = 0;
        v61 = (uint64_t)&v19[v20 - v45];
        while (1)
        {
          if ((uint64_t)(v45 - (_QWORD)v19 + v60) < 0 || (v31 = v61 < 1, --v61, v31))
          {
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            v80 = v45 + v60;
            if (v45 + v60 < a4)
              goto LABEL_266;
            v81 = a4 + a5;
            if (a4 + a5 < v80)
              goto LABEL_266;
            if (v81 >= v45 + v60 + 1)
              v81 = v45 + v60 + 1;
            if (v81 <= a4)
            {
              a3 = 0;
              a5 = 1;
            }
            else
            {
              v82 = a5 + a4;
              a5 = 1;
              v83 = a4;
              do
              {
                v84 = 0;
                v85 = 0;
                v86 = v82 - v83;
                while (1)
                {
                  if ((uint64_t)(v83 - a4 + v85) < 0 || (uint64_t)(v86 + v84) < 1)
                    goto LABEL_250;
                  v87 = *(unsigned __int8 *)(v83 + v85);
                  if (v87 == 10)
                  {
                    v74 = __OFADD__(a5++, 1);
                    if (v74)
                      goto LABEL_271;
                    v83 += v85 + 1;
                    goto LABEL_171;
                  }
                  if (v87 == 13)
                    break;
                  a3 = v85 + 1;
                  if (__OFADD__(v85, 1))
                    goto LABEL_251;
                  ++v85;
                  --v84;
                  if (v83 + v85 >= v81)
                    goto LABEL_212;
                }
                v88 = v83 + v85;
                if (v80 >= v83 + v85 + 1)
                {
                  if (((v83 - a4 + v85 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v85 + v86) < 1)
                    goto LABEL_277;
                  if (*(_BYTE *)(v88 + 1) == 10)
                    v88 = v83 + v85 + 1;
                }
                v74 = __OFADD__(a5++, 1);
                if (v74)
                  goto LABEL_272;
                v83 = v88 + 1;
LABEL_171:
                ;
              }
              while (v83 < v81);
              a3 = 0;
            }
LABEL_212:
            a4 = v45 - a4 + v60;
LABEL_240:
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_OWORD *)v40 = xmmword_18206BE50;
            *(_QWORD *)(v40 + 16) = v8;
            *(_QWORD *)(v40 + 24) = a5;
            *(_QWORD *)(v40 + 32) = a3;
            *(_QWORD *)(v40 + 40) = a4;
            v41 = 1;
            goto LABEL_45;
          }
          LODWORD(v8) = *(unsigned __int8 *)(v45 + v60);
          if (((_DWORD)v8 - 58) < 0xFFFFFFF6)
            break;
          if (__OFADD__(v57 + v60, 1))
            goto LABEL_146;
          ++v60;
          if (v45 + v60 >= v21)
            goto LABEL_147;
        }
        v62 = v57 + v60;
        switch(*(_BYTE *)(v45 + v60))
        {
          case '+':
          case '-':
            if (v62 != 0 || (v56 & 1) == 0)
              goto LABEL_142;
            v57 = 0;
            v56 = 0;
            v58 = 0;
            v59 = 0;
            v45 += v60 + 1;
            if (v45 >= v21)
              goto LABEL_244;
            continue;
          case ',':
          case '/':
          case '0':
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
          case ':':
          case ';':
          case '<':
          case '=':
          case '>':
          case '?':
          case '@':
          case 'A':
          case 'B':
          case 'C':
          case 'D':
            goto LABEL_142;
          case '.':
            if (v62 < 1 || (v59 & 1) == 0)
            {
              v93 = v45 + v60;
              if (v45 + v60 < a4)
                goto LABEL_270;
              v94 = a4 + a5;
              if (a4 + a5 < v93)
                goto LABEL_270;
              if (v94 >= v45 + v60 + 1)
                v94 = v45 + v60 + 1;
              if (v94 <= a4)
              {
                a3 = 0;
                a5 = 1;
              }
              else
              {
                v95 = a5 + a4;
                a5 = 1;
                v96 = a4;
                do
                {
                  v97 = 0;
                  v98 = 0;
                  v99 = v95 - v96;
                  while (1)
                  {
                    if ((uint64_t)(v96 - a4 + v98) < 0 || (uint64_t)(v99 + v97) < 1)
                      goto LABEL_253;
                    v100 = *(unsigned __int8 *)(v96 + v98);
                    if (v100 == 10)
                    {
                      v74 = __OFADD__(a5++, 1);
                      if (v74)
                        goto LABEL_275;
                      v96 += v98 + 1;
                      goto LABEL_209;
                    }
                    if (v100 == 13)
                      break;
                    a3 = v98 + 1;
                    if (__OFADD__(v98, 1))
                      goto LABEL_254;
                    ++v98;
                    --v97;
                    if (v96 + v98 >= v94)
                      goto LABEL_239;
                  }
                  v101 = v96 + v98;
                  if (v93 >= v96 + v98 + 1)
                  {
                    if (((v96 - a4 + v98 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v98 + v99) < 1)
                      goto LABEL_280;
                    if (*(_BYTE *)(v101 + 1) == 10)
                      v101 = v96 + v98 + 1;
                  }
                  v74 = __OFADD__(a5++, 1);
                  if (v74)
                    goto LABEL_276;
                  v96 = v101 + 1;
LABEL_209:
                  ;
                }
                while (v96 < v94);
                a3 = 0;
              }
LABEL_239:
              a4 = v45 - a4 + v60;
              LODWORD(v8) = 46;
              goto LABEL_240;
            }
            v57 = 0;
            v56 = 0;
            v59 = 0;
            v45 += v60 + 1;
            v58 = 1;
            if (v45 < v21)
              continue;
            __break(1u);
            break;
          case 'E':
            goto LABEL_98;
          default:
            if ((_DWORD)v8 != 101)
            {
LABEL_142:
              a5 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v45 + v60, a4, a5);
              a3 = v76;
              a4 = v77;
              goto LABEL_240;
            }
LABEL_98:
            if (v62 < 1 || (v58 & 1) == 0)
              goto LABEL_148;
            v57 = 0;
            v58 = 0;
            v59 = 0;
            v45 += v60 + 1;
            v56 = 1;
            if (v45 >= v21)
              goto LABEL_245;
            continue;
        }
        goto LABEL_104;
      }
    }
    v43 = 0;
    v44 = v18;
    while (1)
    {
      if (v43 < 0 || (v31 = v44 < 1, --v44, v31))
      {
        __break(1u);
LABEL_244:
        __break(1u);
LABEL_245:
        __break(1u);
LABEL_246:
        __break(1u);
LABEL_247:
        __break(1u);
LABEL_248:
        __break(1u);
LABEL_249:
        __break(1u);
LABEL_250:
        __break(1u);
LABEL_251:
        __break(1u);
        goto LABEL_252;
      }
      if (v17[v43] - 58 < 0xFFFFFFF6)
        break;
      v45 = (unint64_t)&v17[++v43];
      if ((unint64_t)&v17[v43] >= v21)
        goto LABEL_84;
    }
LABEL_83:
    v45 = (unint64_t)&v19[v43];
    goto LABEL_84;
  }
  if (v18 < 1)
    goto LABEL_255;
  v22 = *(unsigned __int8 *)v17;
  if (v22 == 45 || (v8 = v17, v22 == 43))
    v8 = v17 + 1;
  if (v21 < (unint64_t)v8)
    goto LABEL_256;
  v14 = v8 - v17;
  if (v8 - v17 < 0)
    goto LABEL_257;
  if ((uint64_t)(v21 - (_QWORD)v8) < 0)
    goto LABEL_258;
  if ((uint64_t)(v21 - (_QWORD)v8) >= 2)
    v23 = 2;
  else
    v23 = v21 - (_QWORD)v8;
  if (!_stringshims_strncasecmp_l(v8, "0x", v23, 0))
  {
    v52 = (unsigned __int8 *)(v8 + 2);
    v43 = v21 - (_QWORD)(v8 + 2);
    if (v43 >= 1 && (unint64_t)v52 < v21)
    {
      v43 = v52 - v19;
      if (((v52 - v19) & 0x8000000000000000) == 0)
      {
        a3 = (uint64_t)&v8[-a4 + 2];
        v43 = &v19[v20] - (unsigned __int8 *)v8 - 3;
        v53 = v14 + 3;
        do
        {
          v54 = v53;
          v20 = *v52;
          if ((v20 - 58) <= 0xF5u
            && (*v52 - 65 > 0x25 || ((1 << (v20 - 65)) & 0x3F0000003FLL) == 0))
          {
            if ((unint64_t)v52 < a4)
              goto LABEL_264;
            v66 = a4 + a5;
            if (a4 + a5 < (unint64_t)v52)
              goto LABEL_264;
            if (v66 >= (unint64_t)(v52 + 1))
              v66 = (unint64_t)(v52 + 1);
            if (v66 <= a4)
            {
              v73 = 0;
              v14 = 0xED00007265626D75;
              v21 = 0x6E20786568206E69;
              a5 = 1;
              goto LABEL_174;
            }
            v67 = -(uint64_t)a4;
            v68 = a5 + a4;
            a5 = 1;
            while (1)
            {
              v69 = 0;
              v70 = 0;
              v71 = v68 - a4;
              while (1)
              {
                if ((uint64_t)(v67 + a4 + v70) < 0 || (uint64_t)(v71 + v69) < 1)
                  goto LABEL_246;
                v72 = *(unsigned __int8 *)(a4 + v70);
                if (v72 == 10)
                  break;
                if (v72 == 13)
                {
                  v75 = a4 + v70;
                  if ((unint64_t)v52 >= a4 + v70 + 1)
                  {
                    if (((v67 + a4 + v70 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v70 + v71) < 1)
                      goto LABEL_273;
                    if (*(_BYTE *)(v75 + 1) == 10)
                      v75 = a4 + v70 + 1;
                  }
                  v74 = __OFADD__(a5++, 1);
                  if (v74)
                    goto LABEL_268;
                  a4 = v75 + 1;
                  goto LABEL_140;
                }
                v73 = v70 + 1;
                if (__OFADD__(v70, 1))
                  goto LABEL_247;
                ++v70;
                --v69;
                if (a4 + v70 >= v66)
                {
                  v14 = 0xED00007265626D75;
                  v21 = 0x6E20786568206E69;
LABEL_174:
                  a4 = v20;
                  lazy protocol witness table accessor for type JSONError and conformance JSONError();
                  swift_allocError();
                  *(_QWORD *)v40 = v21;
                  *(_QWORD *)(v40 + 8) = v14;
                  *(_QWORD *)(v40 + 16) = v20;
                  *(_QWORD *)(v40 + 24) = a5;
                  *(_QWORD *)(v40 + 32) = v73;
                  *(_QWORD *)(v40 + 40) = a3;
                  v41 = 1;
                  goto LABEL_45;
                }
              }
              v74 = __OFADD__(a5++, 1);
              if (v74)
                goto LABEL_267;
              a4 += v70 + 1;
LABEL_140:
              v14 = 0xED00007265626D75;
              v21 = 0x6E20786568206E69;
              if (a4 >= v66)
              {
                v73 = 0;
                goto LABEL_174;
              }
            }
          }
          v31 = v43-- < 1;
          if (v31)
            break;
          if ((unint64_t)++v52 >= v21)
            break;
          ++a3;
          ++v53;
        }
        while ((v54 & 0x8000000000000000) == 0);
      }
    }
    __break(1u);
    goto LABEL_83;
  }
  if ((unint64_t)v8 >= v21)
    goto LABEL_263;
  v24 = 0;
  v25 = 0;
  v26 = (const char *)&v19[v20];
  v27 = 1;
LABEL_24:
  v29 = 0;
  v30 = v26 - v8;
  while (v8 - (const char *)v19 + v29 >= 0)
  {
    v31 = v30-- < 1;
    if (v31)
      break;
    LODWORD(v20) = v8[v29];
    if ((v20 - 58) <= 0xF5u)
    {
      switch(v8[v29])
      {
        case '+':
        case '-':
          if (v29 != 0 || (v24 & 1) == 0)
            goto LABEL_143;
          v24 = 0;
          v27 = 0;
          v8 += v29 + 1;
          v25 = 3;
          if ((unint64_t)v8 >= v21)
            goto LABEL_248;
          goto LABEL_24;
        case ',':
        case '/':
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        case ':':
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case '@':
        case 'A':
        case 'B':
        case 'C':
        case 'D':
          goto LABEL_143;
        case '.':
          if ((v27 & 1) == 0)
          {
            v102 = (unint64_t)&v8[v29];
            if ((unint64_t)&v8[v29] < a4)
              goto LABEL_274;
            v103 = a4 + a5;
            if (a4 + a5 < v102)
              goto LABEL_274;
            if (v103 >= (unint64_t)&v8[v29 + 1])
              v103 = (unint64_t)&v8[v29 + 1];
            if (v103 > a4)
            {
              v104 = a5 + a4;
              a5 = 1;
              v105 = a4;
              while (1)
              {
                v106 = 0;
                v107 = 0;
                v108 = v104 - v105;
                while (1)
                {
                  if ((uint64_t)(v105 - a4 + v107) < 0 || (uint64_t)(v108 + v106) < 1)
                  {
                    __break(1u);
LABEL_262:
                    __break(1u);
LABEL_263:
                    __break(1u);
LABEL_264:
                    __break(1u);
LABEL_265:
                    __break(1u);
LABEL_266:
                    __break(1u);
LABEL_267:
                    __break(1u);
LABEL_268:
                    __break(1u);
LABEL_269:
                    __break(1u);
LABEL_270:
                    __break(1u);
LABEL_271:
                    __break(1u);
LABEL_272:
                    __break(1u);
LABEL_273:
                    __break(1u);
LABEL_274:
                    __break(1u);
LABEL_275:
                    __break(1u);
LABEL_276:
                    __break(1u);
LABEL_277:
                    __break(1u);
LABEL_278:
                    __break(1u);
LABEL_279:
                    __break(1u);
LABEL_280:
                    __break(1u);
                  }
                  v109 = *(unsigned __int8 *)(v105 + v107);
                  if (v109 == 10)
                  {
                    v74 = __OFADD__(a5++, 1);
                    if (!v74)
                    {
                      v105 += v107 + 1;
                      goto LABEL_236;
                    }
                    goto LABEL_278;
                  }
                  if (v109 == 13)
                    break;
                  v73 = v107 + 1;
                  if (__OFADD__(v107, 1))
                    goto LABEL_262;
                  ++v107;
                  --v106;
                  if (v105 + v107 >= v103)
                    goto LABEL_242;
                }
                v110 = v105 + v107;
                if (v102 >= v105 + v107 + 1)
                {
                  if (((v105 - a4 + v107 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v107 + v108) < 1)
                  {
                    __break(1u);
LABEL_282:
                    v115[0] = 0;
                    v115[1] = (char *)0xE000000000000000;
                    _StringGuts.grow(_:)(30);
                    swift_bridgeObjectRelease();
                    strcpy((char *)v115, "Invalid index ");
                    HIBYTE(v115[1]) = -18;
                    v111._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                    String.append(_:)(v111);
                    swift_bridgeObjectRelease();
                    v112._countAndFlagsBits = 0x616D5F20726F6620;
                    v112._object = (void *)0xEE0061737369746ELL;
                    String.append(_:)(v112);
                    _assertionFailure(_:_:file:line:flags:)();
                    __break(1u);
                    JUMPOUT(0x181E3B9F4);
                  }
                  if (*(_BYTE *)(v110 + 1) == 10)
                    v110 = v105 + v107 + 1;
                }
                v74 = __OFADD__(a5++, 1);
                if (v74)
                  goto LABEL_279;
                v105 = v110 + 1;
LABEL_236:
                if (v105 >= v103)
                {
                  v73 = 0;
                  goto LABEL_242;
                }
              }
            }
            v73 = 0;
            a5 = 1;
LABEL_242:
            a3 = (uint64_t)&v8[v29 - a4];
            LOBYTE(v20) = 46;
LABEL_144:
            v14 = 0xE900000000000072;
            v21 = 0x65626D756E206E69;
            goto LABEL_174;
          }
          v24 = 0;
          v27 = 0;
          v8 += v29 + 1;
          v25 = 1;
          if ((unint64_t)v8 < v21)
            goto LABEL_24;
          __break(1u);
          break;
        case 'E':
          goto LABEL_36;
        default:
          if ((_DWORD)v20 != 101)
            goto LABEL_143;
LABEL_36:
          if (v25 != 1 && (v25 || v29 < 1))
          {
LABEL_143:
            a5 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)&v8[v29], a4, a5);
            v73 = v78;
            a3 = v79;
            goto LABEL_144;
          }
          v27 = 0;
          v8 += v29 + 1;
          v25 = 2;
          v24 = 1;
          if ((unint64_t)v8 >= v21)
            goto LABEL_249;
          goto LABEL_24;
      }
LABEL_43:
      LODWORD(v8) = (_DWORD)v119;
      v32 = (unint64_t)v119 >> 48;
      v20 = (unsigned __int16)v120;
      a3 = (unint64_t)v119 >> 32;
      v33 = WORD1(v120);
      v34 = WORD2(v120);
      v35 = HIWORD(v120);
      v36 = v121;
      v37 = v122;
      v115[0] = v119;
      v115[1] = v120;
      v116 = v121;
      v117 = v122;
      if (_So9NSDecimala__isNegative_getter(v115))
        goto LABEL_44;
      v46 = v36;
      v21 = v35;
      v7 = v34;
      a5 = v33;
      v14 = v20;
      LOWORD(v20) = v32;
      LODWORD(v115[0]) = (_DWORD)v8;
      WORD2(v115[0]) = a3;
      HIWORD(v115[0]) = v32;
      LOWORD(v115[1]) = v14;
      WORD1(v115[1]) = a5;
      WORD2(v115[1]) = v7;
      HIWORD(v115[1]) = v21;
      v113 = v37;
      v114 = v46;
      v116 = v46;
      v117 = v37;
      v47 = _So9NSDecimala__length_getter(v115);
      if (!v47)
        goto LABEL_260;
      v45 = 0;
      v48 = v47 - 1;
      if (v47 != 1)
      {
        v49 = v113;
        v50 = v114;
        while (2)
        {
          v51 = v32;
          switch(v48)
          {
            case 1:
              goto LABEL_66;
            case 2:
              v51 = v14;
              goto LABEL_66;
            case 3:
              v51 = a5;
              goto LABEL_66;
            case 4:
              v51 = v7;
              goto LABEL_66;
            case 5:
              v51 = v21;
              goto LABEL_66;
            case 6:
              v51 = v114;
              goto LABEL_66;
            case 7:
              v51 = v113;
LABEL_66:
              if (HIWORD(v45))
                goto LABEL_44;
              v45 = v51 | (v45 << 16);
              if (!--v48)
                goto LABEL_105;
              continue;
            default:
              goto LABEL_282;
          }
        }
      }
LABEL_104:
      v49 = v113;
      v50 = v114;
LABEL_105:
      if (!HIWORD(v45))
      {
        a4 = (unsigned __int16)a3 | (v45 << 16);
        goto LABEL_107;
      }
      goto LABEL_44;
    }
    if (__OFADD__(v29, 1))
      goto LABEL_176;
    if ((unint64_t)&v8[++v29] >= v21)
      goto LABEL_177;
  }
  __break(1u);
LABEL_176:
  __break(1u);
LABEL_177:
  __break(1u);
  do
  {
    LODWORD(v115[0]) = (_DWORD)v8;
    WORD2(v115[0]) = a3;
    HIWORD(v115[0]) = v20;
    LOWORD(v115[1]) = v14;
    WORD1(v115[1]) = a5;
    WORD2(v115[1]) = v7;
    HIWORD(v115[1]) = v21;
    v116 = v114;
    v117 = (__int16)v19;
    v89 = _So9NSDecimala__exponent_getter((char *)v115);
    if (v89 > 0)
      goto LABEL_269;
    if (!v89)
      goto LABEL_184;
    v90 = -v89 & ~(-v89 >> 31);
    v91 = ~v89;
    while (v90 > v91)
    {
      a4 /= 0xAuLL;
      if (__CFADD__(v89++, 1))
        goto LABEL_184;
    }
LABEL_252:
    __break(1u);
LABEL_253:
    __break(1u);
LABEL_254:
    __break(1u);
LABEL_255:
    __break(1u);
LABEL_256:
    __break(1u);
LABEL_257:
    __break(1u);
LABEL_258:
    __break(1u);
LABEL_259:
    __break(1u);
LABEL_260:
    a4 = 0;
    v49 = v113;
    v50 = v114;
LABEL_107:
    LODWORD(v115[0]) = (_DWORD)v8;
    WORD2(v115[0]) = a3;
    HIWORD(v115[0]) = v20;
    LOWORD(v115[1]) = v14;
    WORD1(v115[1]) = a5;
    WORD2(v115[1]) = v7;
    HIWORD(v115[1]) = v21;
    v116 = v50;
    v117 = v49;
    LOWORD(v19) = v49;
  }
  while ((_So9NSDecimala__exponent_getter((char *)v115) & 0x80000000) != 0);
  LODWORD(v115[0]) = (_DWORD)v8;
  WORD2(v115[0]) = a3;
  HIWORD(v115[0]) = v20;
  LOWORD(v115[1]) = v14;
  WORD1(v115[1]) = a5;
  WORD2(v115[1]) = v7;
  HIWORD(v115[1]) = v21;
  v116 = v114;
  v117 = (__int16)v19;
  v63 = _So9NSDecimala__exponent_getter((char *)v115);
  if (v63 < 0)
    goto LABEL_265;
  if (v63)
  {
    if (is_mul_ok(a4, 0xAuLL))
    {
      a4 *= 10;
      v64 = v63 - 1;
      if (v63 == 1)
        goto LABEL_184;
      if (is_mul_ok(a4, 0xAuLL))
      {
        a4 *= 10;
        while (--v64)
        {
          v65 = (a4 * (unsigned __int128)0xAuLL) >> 64;
          a4 *= 10;
          if (v65)
            goto LABEL_44;
        }
        goto LABEL_184;
      }
    }
LABEL_44:
    a4 = static String._fromUTF8Repairing(_:)();
    v39 = v38;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_QWORD *)v40 = a4;
    *(_QWORD *)(v40 + 8) = v39;
    *(_OWORD *)(v40 + 16) = 0u;
    *(_OWORD *)(v40 + 32) = 0u;
    v41 = 11;
LABEL_45:
    *(_BYTE *)(v40 + 48) = v41;
    swift_willThrow();
  }
  else
  {
LABEL_184:
    if (a4 > 0xFF)
      goto LABEL_44;
  }
  return a4;
}

{
  int v6;
  unint64_t v7;
  const char *v8;
  unint64_t v14;
  double v15;
  BOOL v16;
  const char *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  size_t v23;
  char v24;
  char v25;
  const char *v26;
  char v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  int v48;
  __int16 v49;
  __int16 v50;
  unint64_t v51;
  unsigned __int8 *v52;
  unint64_t v53;
  unint64_t v54;
  char v56;
  unint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  unsigned int v90;
  unsigned int v91;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  int v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  int v109;
  uint64_t v110;
  Swift::String v111;
  Swift::String v112;
  unint64_t v113;
  unint64_t v114;
  char *v115[2];
  __int16 v116;
  __int16 v117;
  _BYTE v118[40];
  char *v119;
  char *v120;
  unsigned __int16 v121;
  unsigned __int16 v122;
  char v123;
  uint64_t v124;

  LODWORD(v8) = v6;
  LOWORD(v14) = a1;
  v124 = *MEMORY[0x1E0C80C00];
  v115[0] = 0;
  v15 = _stringshims_strtod_l(a2, v115, 0);
  if (v115[0])
    v16 = &a2[a3] == v115[0];
  else
    v16 = 0;
  if (v16)
  {
    v28 = v15;
    if (!specialized static FixedWidthInteger._convert<A>(from:)((uint64_t)v115, v15) || (BYTE2(v115[0]) & 1) != 0)
      goto LABEL_44;
    if (fabs(v28) < 9.00719925e15)
      return LOWORD(v115[0]);
  }
  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)((uint64_t)a2, a3, 0x2EuLL, 0xE100000000000000, 1, (uint64_t)v118);
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v118, (uint64_t)&v119);
  if (v123 != 1)
    goto LABEL_43;
  v17 = (const char *)specialized BufferView.suffix(from:)(a6, (uint64_t)a2, a3);
  v19 = (unsigned __int8 *)v17;
  v20 = v18;
  v21 = (unint64_t)&v17[v18];
  if ((v14 & 1) == 0)
  {
    if (v18 <= 0)
    {
      v45 = (unint64_t)v17;
LABEL_84:
      if (v45 >= v21)
        goto LABEL_259;
      v56 = 0;
      v57 = v45 - (_QWORD)v19;
      v58 = 1;
      v59 = 1;
      while (2)
      {
        v60 = 0;
        v61 = (uint64_t)&v19[v20 - v45];
        while (1)
        {
          if ((uint64_t)(v45 - (_QWORD)v19 + v60) < 0 || (v31 = v61 < 1, --v61, v31))
          {
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            v80 = v45 + v60;
            if (v45 + v60 < a4)
              goto LABEL_266;
            v81 = a4 + a5;
            if (a4 + a5 < v80)
              goto LABEL_266;
            if (v81 >= v45 + v60 + 1)
              v81 = v45 + v60 + 1;
            if (v81 <= a4)
            {
              a3 = 0;
              a5 = 1;
            }
            else
            {
              v82 = a5 + a4;
              a5 = 1;
              v83 = a4;
              do
              {
                v84 = 0;
                v85 = 0;
                v86 = v82 - v83;
                while (1)
                {
                  if ((uint64_t)(v83 - a4 + v85) < 0 || (uint64_t)(v86 + v84) < 1)
                    goto LABEL_250;
                  v87 = *(unsigned __int8 *)(v83 + v85);
                  if (v87 == 10)
                  {
                    v74 = __OFADD__(a5++, 1);
                    if (v74)
                      goto LABEL_271;
                    v83 += v85 + 1;
                    goto LABEL_171;
                  }
                  if (v87 == 13)
                    break;
                  a3 = v85 + 1;
                  if (__OFADD__(v85, 1))
                    goto LABEL_251;
                  ++v85;
                  --v84;
                  if (v83 + v85 >= v81)
                    goto LABEL_212;
                }
                v88 = v83 + v85;
                if (v80 >= v83 + v85 + 1)
                {
                  if (((v83 - a4 + v85 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v85 + v86) < 1)
                    goto LABEL_277;
                  if (*(_BYTE *)(v88 + 1) == 10)
                    v88 = v83 + v85 + 1;
                }
                v74 = __OFADD__(a5++, 1);
                if (v74)
                  goto LABEL_272;
                v83 = v88 + 1;
LABEL_171:
                ;
              }
              while (v83 < v81);
              a3 = 0;
            }
LABEL_212:
            a4 = v45 - a4 + v60;
LABEL_240:
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_OWORD *)v40 = xmmword_18206BE50;
            *(_QWORD *)(v40 + 16) = v8;
            *(_QWORD *)(v40 + 24) = a5;
            *(_QWORD *)(v40 + 32) = a3;
            *(_QWORD *)(v40 + 40) = a4;
            v41 = 1;
            goto LABEL_45;
          }
          LODWORD(v8) = *(unsigned __int8 *)(v45 + v60);
          if (((_DWORD)v8 - 58) < 0xFFFFFFF6)
            break;
          if (__OFADD__(v57 + v60, 1))
            goto LABEL_146;
          ++v60;
          if (v45 + v60 >= v21)
            goto LABEL_147;
        }
        v62 = v57 + v60;
        switch(*(_BYTE *)(v45 + v60))
        {
          case '+':
          case '-':
            if (v62 != 0 || (v56 & 1) == 0)
              goto LABEL_142;
            v57 = 0;
            v56 = 0;
            v58 = 0;
            v59 = 0;
            v45 += v60 + 1;
            if (v45 >= v21)
              goto LABEL_244;
            continue;
          case ',':
          case '/':
          case '0':
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
          case ':':
          case ';':
          case '<':
          case '=':
          case '>':
          case '?':
          case '@':
          case 'A':
          case 'B':
          case 'C':
          case 'D':
            goto LABEL_142;
          case '.':
            if (v62 < 1 || (v59 & 1) == 0)
            {
              v93 = v45 + v60;
              if (v45 + v60 < a4)
                goto LABEL_270;
              v94 = a4 + a5;
              if (a4 + a5 < v93)
                goto LABEL_270;
              if (v94 >= v45 + v60 + 1)
                v94 = v45 + v60 + 1;
              if (v94 <= a4)
              {
                a3 = 0;
                a5 = 1;
              }
              else
              {
                v95 = a5 + a4;
                a5 = 1;
                v96 = a4;
                do
                {
                  v97 = 0;
                  v98 = 0;
                  v99 = v95 - v96;
                  while (1)
                  {
                    if ((uint64_t)(v96 - a4 + v98) < 0 || (uint64_t)(v99 + v97) < 1)
                      goto LABEL_253;
                    v100 = *(unsigned __int8 *)(v96 + v98);
                    if (v100 == 10)
                    {
                      v74 = __OFADD__(a5++, 1);
                      if (v74)
                        goto LABEL_275;
                      v96 += v98 + 1;
                      goto LABEL_209;
                    }
                    if (v100 == 13)
                      break;
                    a3 = v98 + 1;
                    if (__OFADD__(v98, 1))
                      goto LABEL_254;
                    ++v98;
                    --v97;
                    if (v96 + v98 >= v94)
                      goto LABEL_239;
                  }
                  v101 = v96 + v98;
                  if (v93 >= v96 + v98 + 1)
                  {
                    if (((v96 - a4 + v98 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v98 + v99) < 1)
                      goto LABEL_280;
                    if (*(_BYTE *)(v101 + 1) == 10)
                      v101 = v96 + v98 + 1;
                  }
                  v74 = __OFADD__(a5++, 1);
                  if (v74)
                    goto LABEL_276;
                  v96 = v101 + 1;
LABEL_209:
                  ;
                }
                while (v96 < v94);
                a3 = 0;
              }
LABEL_239:
              a4 = v45 - a4 + v60;
              LODWORD(v8) = 46;
              goto LABEL_240;
            }
            v57 = 0;
            v56 = 0;
            v59 = 0;
            v45 += v60 + 1;
            v58 = 1;
            if (v45 < v21)
              continue;
            __break(1u);
            break;
          case 'E':
            goto LABEL_98;
          default:
            if ((_DWORD)v8 != 101)
            {
LABEL_142:
              a5 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v45 + v60, a4, a5);
              a3 = v76;
              a4 = v77;
              goto LABEL_240;
            }
LABEL_98:
            if (v62 < 1 || (v58 & 1) == 0)
              goto LABEL_148;
            v57 = 0;
            v58 = 0;
            v59 = 0;
            v45 += v60 + 1;
            v56 = 1;
            if (v45 >= v21)
              goto LABEL_245;
            continue;
        }
        goto LABEL_104;
      }
    }
    v43 = 0;
    v44 = v18;
    while (1)
    {
      if (v43 < 0 || (v31 = v44 < 1, --v44, v31))
      {
        __break(1u);
LABEL_244:
        __break(1u);
LABEL_245:
        __break(1u);
LABEL_246:
        __break(1u);
LABEL_247:
        __break(1u);
LABEL_248:
        __break(1u);
LABEL_249:
        __break(1u);
LABEL_250:
        __break(1u);
LABEL_251:
        __break(1u);
        goto LABEL_252;
      }
      if (v17[v43] - 58 < 0xFFFFFFF6)
        break;
      v45 = (unint64_t)&v17[++v43];
      if ((unint64_t)&v17[v43] >= v21)
        goto LABEL_84;
    }
LABEL_83:
    v45 = (unint64_t)&v19[v43];
    goto LABEL_84;
  }
  if (v18 < 1)
    goto LABEL_255;
  v22 = *(unsigned __int8 *)v17;
  if (v22 == 45 || (v8 = v17, v22 == 43))
    v8 = v17 + 1;
  if (v21 < (unint64_t)v8)
    goto LABEL_256;
  v14 = v8 - v17;
  if (v8 - v17 < 0)
    goto LABEL_257;
  if ((uint64_t)(v21 - (_QWORD)v8) < 0)
    goto LABEL_258;
  if ((uint64_t)(v21 - (_QWORD)v8) >= 2)
    v23 = 2;
  else
    v23 = v21 - (_QWORD)v8;
  if (!_stringshims_strncasecmp_l(v8, "0x", v23, 0))
  {
    v52 = (unsigned __int8 *)(v8 + 2);
    v43 = v21 - (_QWORD)(v8 + 2);
    if (v43 >= 1 && (unint64_t)v52 < v21)
    {
      v43 = v52 - v19;
      if (((v52 - v19) & 0x8000000000000000) == 0)
      {
        a3 = (uint64_t)&v8[-a4 + 2];
        v43 = &v19[v20] - (unsigned __int8 *)v8 - 3;
        v53 = v14 + 3;
        do
        {
          v54 = v53;
          v20 = *v52;
          if ((v20 - 58) <= 0xF5u
            && (*v52 - 65 > 0x25 || ((1 << (v20 - 65)) & 0x3F0000003FLL) == 0))
          {
            if ((unint64_t)v52 < a4)
              goto LABEL_264;
            v66 = a4 + a5;
            if (a4 + a5 < (unint64_t)v52)
              goto LABEL_264;
            if (v66 >= (unint64_t)(v52 + 1))
              v66 = (unint64_t)(v52 + 1);
            if (v66 <= a4)
            {
              v73 = 0;
              v14 = 0xED00007265626D75;
              v21 = 0x6E20786568206E69;
              a5 = 1;
              goto LABEL_174;
            }
            v67 = -(uint64_t)a4;
            v68 = a5 + a4;
            a5 = 1;
            while (1)
            {
              v69 = 0;
              v70 = 0;
              v71 = v68 - a4;
              while (1)
              {
                if ((uint64_t)(v67 + a4 + v70) < 0 || (uint64_t)(v71 + v69) < 1)
                  goto LABEL_246;
                v72 = *(unsigned __int8 *)(a4 + v70);
                if (v72 == 10)
                  break;
                if (v72 == 13)
                {
                  v75 = a4 + v70;
                  if ((unint64_t)v52 >= a4 + v70 + 1)
                  {
                    if (((v67 + a4 + v70 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v70 + v71) < 1)
                      goto LABEL_273;
                    if (*(_BYTE *)(v75 + 1) == 10)
                      v75 = a4 + v70 + 1;
                  }
                  v74 = __OFADD__(a5++, 1);
                  if (v74)
                    goto LABEL_268;
                  a4 = v75 + 1;
                  goto LABEL_140;
                }
                v73 = v70 + 1;
                if (__OFADD__(v70, 1))
                  goto LABEL_247;
                ++v70;
                --v69;
                if (a4 + v70 >= v66)
                {
                  v14 = 0xED00007265626D75;
                  v21 = 0x6E20786568206E69;
LABEL_174:
                  a4 = v20;
                  lazy protocol witness table accessor for type JSONError and conformance JSONError();
                  swift_allocError();
                  *(_QWORD *)v40 = v21;
                  *(_QWORD *)(v40 + 8) = v14;
                  *(_QWORD *)(v40 + 16) = v20;
                  *(_QWORD *)(v40 + 24) = a5;
                  *(_QWORD *)(v40 + 32) = v73;
                  *(_QWORD *)(v40 + 40) = a3;
                  v41 = 1;
                  goto LABEL_45;
                }
              }
              v74 = __OFADD__(a5++, 1);
              if (v74)
                goto LABEL_267;
              a4 += v70 + 1;
LABEL_140:
              v14 = 0xED00007265626D75;
              v21 = 0x6E20786568206E69;
              if (a4 >= v66)
              {
                v73 = 0;
                goto LABEL_174;
              }
            }
          }
          v31 = v43-- < 1;
          if (v31)
            break;
          if ((unint64_t)++v52 >= v21)
            break;
          ++a3;
          ++v53;
        }
        while ((v54 & 0x8000000000000000) == 0);
      }
    }
    __break(1u);
    goto LABEL_83;
  }
  if ((unint64_t)v8 >= v21)
    goto LABEL_263;
  v24 = 0;
  v25 = 0;
  v26 = (const char *)&v19[v20];
  v27 = 1;
LABEL_24:
  v29 = 0;
  v30 = v26 - v8;
  while (v8 - (const char *)v19 + v29 >= 0)
  {
    v31 = v30-- < 1;
    if (v31)
      break;
    LODWORD(v20) = v8[v29];
    if ((v20 - 58) <= 0xF5u)
    {
      switch(v8[v29])
      {
        case '+':
        case '-':
          if (v29 != 0 || (v24 & 1) == 0)
            goto LABEL_143;
          v24 = 0;
          v27 = 0;
          v8 += v29 + 1;
          v25 = 3;
          if ((unint64_t)v8 >= v21)
            goto LABEL_248;
          goto LABEL_24;
        case ',':
        case '/':
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        case ':':
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case '@':
        case 'A':
        case 'B':
        case 'C':
        case 'D':
          goto LABEL_143;
        case '.':
          if ((v27 & 1) == 0)
          {
            v102 = (unint64_t)&v8[v29];
            if ((unint64_t)&v8[v29] < a4)
              goto LABEL_274;
            v103 = a4 + a5;
            if (a4 + a5 < v102)
              goto LABEL_274;
            if (v103 >= (unint64_t)&v8[v29 + 1])
              v103 = (unint64_t)&v8[v29 + 1];
            if (v103 > a4)
            {
              v104 = a5 + a4;
              a5 = 1;
              v105 = a4;
              while (1)
              {
                v106 = 0;
                v107 = 0;
                v108 = v104 - v105;
                while (1)
                {
                  if ((uint64_t)(v105 - a4 + v107) < 0 || (uint64_t)(v108 + v106) < 1)
                  {
                    __break(1u);
LABEL_262:
                    __break(1u);
LABEL_263:
                    __break(1u);
LABEL_264:
                    __break(1u);
LABEL_265:
                    __break(1u);
LABEL_266:
                    __break(1u);
LABEL_267:
                    __break(1u);
LABEL_268:
                    __break(1u);
LABEL_269:
                    __break(1u);
LABEL_270:
                    __break(1u);
LABEL_271:
                    __break(1u);
LABEL_272:
                    __break(1u);
LABEL_273:
                    __break(1u);
LABEL_274:
                    __break(1u);
LABEL_275:
                    __break(1u);
LABEL_276:
                    __break(1u);
LABEL_277:
                    __break(1u);
LABEL_278:
                    __break(1u);
LABEL_279:
                    __break(1u);
LABEL_280:
                    __break(1u);
                  }
                  v109 = *(unsigned __int8 *)(v105 + v107);
                  if (v109 == 10)
                  {
                    v74 = __OFADD__(a5++, 1);
                    if (!v74)
                    {
                      v105 += v107 + 1;
                      goto LABEL_236;
                    }
                    goto LABEL_278;
                  }
                  if (v109 == 13)
                    break;
                  v73 = v107 + 1;
                  if (__OFADD__(v107, 1))
                    goto LABEL_262;
                  ++v107;
                  --v106;
                  if (v105 + v107 >= v103)
                    goto LABEL_242;
                }
                v110 = v105 + v107;
                if (v102 >= v105 + v107 + 1)
                {
                  if (((v105 - a4 + v107 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v107 + v108) < 1)
                  {
                    __break(1u);
LABEL_282:
                    v115[0] = 0;
                    v115[1] = (char *)0xE000000000000000;
                    _StringGuts.grow(_:)(30);
                    swift_bridgeObjectRelease();
                    strcpy((char *)v115, "Invalid index ");
                    HIBYTE(v115[1]) = -18;
                    v111._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                    String.append(_:)(v111);
                    swift_bridgeObjectRelease();
                    v112._countAndFlagsBits = 0x616D5F20726F6620;
                    v112._object = (void *)0xEE0061737369746ELL;
                    String.append(_:)(v112);
                    _assertionFailure(_:_:file:line:flags:)();
                    __break(1u);
                    JUMPOUT(0x181E3C9ACLL);
                  }
                  if (*(_BYTE *)(v110 + 1) == 10)
                    v110 = v105 + v107 + 1;
                }
                v74 = __OFADD__(a5++, 1);
                if (v74)
                  goto LABEL_279;
                v105 = v110 + 1;
LABEL_236:
                if (v105 >= v103)
                {
                  v73 = 0;
                  goto LABEL_242;
                }
              }
            }
            v73 = 0;
            a5 = 1;
LABEL_242:
            a3 = (uint64_t)&v8[v29 - a4];
            LOBYTE(v20) = 46;
LABEL_144:
            v14 = 0xE900000000000072;
            v21 = 0x65626D756E206E69;
            goto LABEL_174;
          }
          v24 = 0;
          v27 = 0;
          v8 += v29 + 1;
          v25 = 1;
          if ((unint64_t)v8 < v21)
            goto LABEL_24;
          __break(1u);
          break;
        case 'E':
          goto LABEL_36;
        default:
          if ((_DWORD)v20 != 101)
            goto LABEL_143;
LABEL_36:
          if (v25 != 1 && (v25 || v29 < 1))
          {
LABEL_143:
            a5 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)&v8[v29], a4, a5);
            v73 = v78;
            a3 = v79;
            goto LABEL_144;
          }
          v27 = 0;
          v8 += v29 + 1;
          v25 = 2;
          v24 = 1;
          if ((unint64_t)v8 >= v21)
            goto LABEL_249;
          goto LABEL_24;
      }
LABEL_43:
      LODWORD(v8) = (_DWORD)v119;
      v32 = (unint64_t)v119 >> 48;
      v20 = (unsigned __int16)v120;
      a3 = (unint64_t)v119 >> 32;
      v33 = WORD1(v120);
      v34 = WORD2(v120);
      v35 = HIWORD(v120);
      v36 = v121;
      v37 = v122;
      v115[0] = v119;
      v115[1] = v120;
      v116 = v121;
      v117 = v122;
      if (_So9NSDecimala__isNegative_getter(v115))
        goto LABEL_44;
      v46 = v36;
      v21 = v35;
      v7 = v34;
      a5 = v33;
      v14 = v20;
      LOWORD(v20) = v32;
      LODWORD(v115[0]) = (_DWORD)v8;
      WORD2(v115[0]) = a3;
      HIWORD(v115[0]) = v32;
      LOWORD(v115[1]) = v14;
      WORD1(v115[1]) = a5;
      WORD2(v115[1]) = v7;
      HIWORD(v115[1]) = v21;
      v113 = v37;
      v114 = v46;
      v116 = v46;
      v117 = v37;
      v47 = _So9NSDecimala__length_getter(v115);
      if (!v47)
        goto LABEL_260;
      v45 = 0;
      v48 = v47 - 1;
      if (v47 != 1)
      {
        v49 = v113;
        v50 = v114;
        while (2)
        {
          v51 = v32;
          switch(v48)
          {
            case 1:
              goto LABEL_66;
            case 2:
              v51 = v14;
              goto LABEL_66;
            case 3:
              v51 = a5;
              goto LABEL_66;
            case 4:
              v51 = v7;
              goto LABEL_66;
            case 5:
              v51 = v21;
              goto LABEL_66;
            case 6:
              v51 = v114;
              goto LABEL_66;
            case 7:
              v51 = v113;
LABEL_66:
              if (HIWORD(v45))
                goto LABEL_44;
              v45 = v51 | (v45 << 16);
              if (!--v48)
                goto LABEL_105;
              continue;
            default:
              goto LABEL_282;
          }
        }
      }
LABEL_104:
      v49 = v113;
      v50 = v114;
LABEL_105:
      if (!HIWORD(v45))
      {
        a4 = (unsigned __int16)a3 | (v45 << 16);
        goto LABEL_107;
      }
      goto LABEL_44;
    }
    if (__OFADD__(v29, 1))
      goto LABEL_176;
    if ((unint64_t)&v8[++v29] >= v21)
      goto LABEL_177;
  }
  __break(1u);
LABEL_176:
  __break(1u);
LABEL_177:
  __break(1u);
  do
  {
    LODWORD(v115[0]) = (_DWORD)v8;
    WORD2(v115[0]) = a3;
    HIWORD(v115[0]) = v20;
    LOWORD(v115[1]) = v14;
    WORD1(v115[1]) = a5;
    WORD2(v115[1]) = v7;
    HIWORD(v115[1]) = v21;
    v116 = v114;
    v117 = (__int16)v19;
    v89 = _So9NSDecimala__exponent_getter((char *)v115);
    if (v89 > 0)
      goto LABEL_269;
    if (!v89)
      goto LABEL_184;
    v90 = -v89 & ~(-v89 >> 31);
    v91 = ~v89;
    while (v90 > v91)
    {
      a4 /= 0xAuLL;
      if (__CFADD__(v89++, 1))
        goto LABEL_184;
    }
LABEL_252:
    __break(1u);
LABEL_253:
    __break(1u);
LABEL_254:
    __break(1u);
LABEL_255:
    __break(1u);
LABEL_256:
    __break(1u);
LABEL_257:
    __break(1u);
LABEL_258:
    __break(1u);
LABEL_259:
    __break(1u);
LABEL_260:
    a4 = 0;
    v49 = v113;
    v50 = v114;
LABEL_107:
    LODWORD(v115[0]) = (_DWORD)v8;
    WORD2(v115[0]) = a3;
    HIWORD(v115[0]) = v20;
    LOWORD(v115[1]) = v14;
    WORD1(v115[1]) = a5;
    WORD2(v115[1]) = v7;
    HIWORD(v115[1]) = v21;
    v116 = v50;
    v117 = v49;
    LOWORD(v19) = v49;
  }
  while ((_So9NSDecimala__exponent_getter((char *)v115) & 0x80000000) != 0);
  LODWORD(v115[0]) = (_DWORD)v8;
  WORD2(v115[0]) = a3;
  HIWORD(v115[0]) = v20;
  LOWORD(v115[1]) = v14;
  WORD1(v115[1]) = a5;
  WORD2(v115[1]) = v7;
  HIWORD(v115[1]) = v21;
  v116 = v114;
  v117 = (__int16)v19;
  v63 = _So9NSDecimala__exponent_getter((char *)v115);
  if (v63 < 0)
    goto LABEL_265;
  if (v63)
  {
    if (is_mul_ok(a4, 0xAuLL))
    {
      a4 *= 10;
      v64 = v63 - 1;
      if (v63 == 1)
        goto LABEL_184;
      if (is_mul_ok(a4, 0xAuLL))
      {
        a4 *= 10;
        while (--v64)
        {
          v65 = (a4 * (unsigned __int128)0xAuLL) >> 64;
          a4 *= 10;
          if (v65)
            goto LABEL_44;
        }
        goto LABEL_184;
      }
    }
LABEL_44:
    a4 = static String._fromUTF8Repairing(_:)();
    v39 = v38;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_QWORD *)v40 = a4;
    *(_QWORD *)(v40 + 8) = v39;
    *(_OWORD *)(v40 + 16) = 0u;
    *(_OWORD *)(v40 + 32) = 0u;
    v41 = 11;
LABEL_45:
    *(_BYTE *)(v40 + 48) = v41;
    swift_willThrow();
  }
  else
  {
LABEL_184:
    if (a4 >> 16)
      goto LABEL_44;
  }
  return a4;
}

{
  int v6;
  unint64_t v7;
  const char *v8;
  unint64_t v14;
  double v15;
  BOOL v16;
  const char *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  size_t v23;
  char v24;
  char v25;
  const char *v26;
  char v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  int v48;
  __int16 v49;
  __int16 v50;
  unint64_t v51;
  unsigned __int8 *v52;
  unint64_t v53;
  unint64_t v54;
  char v56;
  unint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  unsigned int v90;
  unsigned int v91;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  int v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  int v109;
  uint64_t v110;
  Swift::String v111;
  Swift::String v112;
  unint64_t v113;
  unint64_t v114;
  char *v115[2];
  __int16 v116;
  __int16 v117;
  _BYTE v118[40];
  char *v119;
  char *v120;
  unsigned __int16 v121;
  unsigned __int16 v122;
  char v123;
  uint64_t v124;

  LODWORD(v8) = v6;
  LOWORD(v14) = a1;
  v124 = *MEMORY[0x1E0C80C00];
  v115[0] = 0;
  v15 = _stringshims_strtod_l(a2, v115, 0);
  if (v115[0])
    v16 = &a2[a3] == v115[0];
  else
    v16 = 0;
  if (v16)
  {
    v28 = v15;
    if (!specialized static FixedWidthInteger._convert<A>(from:)((uint64_t)v115, v15) || (BYTE4(v115[0]) & 1) != 0)
      goto LABEL_44;
    if (fabs(v28) < 9.00719925e15)
      return LODWORD(v115[0]);
  }
  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)((uint64_t)a2, a3, 0x2EuLL, 0xE100000000000000, 1, (uint64_t)v118);
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v118, (uint64_t)&v119);
  if (v123 != 1)
    goto LABEL_43;
  v17 = (const char *)specialized BufferView.suffix(from:)(a6, (uint64_t)a2, a3);
  v19 = (unsigned __int8 *)v17;
  v20 = v18;
  v21 = (unint64_t)&v17[v18];
  if ((v14 & 1) == 0)
  {
    if (v18 <= 0)
    {
      v45 = (unint64_t)v17;
LABEL_84:
      if (v45 >= v21)
        goto LABEL_259;
      v56 = 0;
      v57 = v45 - (_QWORD)v19;
      v58 = 1;
      v59 = 1;
      while (2)
      {
        v60 = 0;
        v61 = (uint64_t)&v19[v20 - v45];
        while (1)
        {
          if ((uint64_t)(v45 - (_QWORD)v19 + v60) < 0 || (v31 = v61 < 1, --v61, v31))
          {
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            v80 = v45 + v60;
            if (v45 + v60 < a4)
              goto LABEL_266;
            v81 = a4 + a5;
            if (a4 + a5 < v80)
              goto LABEL_266;
            if (v81 >= v45 + v60 + 1)
              v81 = v45 + v60 + 1;
            if (v81 <= a4)
            {
              a3 = 0;
              a5 = 1;
            }
            else
            {
              v82 = a5 + a4;
              a5 = 1;
              v83 = a4;
              do
              {
                v84 = 0;
                v85 = 0;
                v86 = v82 - v83;
                while (1)
                {
                  if ((uint64_t)(v83 - a4 + v85) < 0 || (uint64_t)(v86 + v84) < 1)
                    goto LABEL_250;
                  v87 = *(unsigned __int8 *)(v83 + v85);
                  if (v87 == 10)
                  {
                    v74 = __OFADD__(a5++, 1);
                    if (v74)
                      goto LABEL_271;
                    v83 += v85 + 1;
                    goto LABEL_171;
                  }
                  if (v87 == 13)
                    break;
                  a3 = v85 + 1;
                  if (__OFADD__(v85, 1))
                    goto LABEL_251;
                  ++v85;
                  --v84;
                  if (v83 + v85 >= v81)
                    goto LABEL_212;
                }
                v88 = v83 + v85;
                if (v80 >= v83 + v85 + 1)
                {
                  if (((v83 - a4 + v85 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v85 + v86) < 1)
                    goto LABEL_277;
                  if (*(_BYTE *)(v88 + 1) == 10)
                    v88 = v83 + v85 + 1;
                }
                v74 = __OFADD__(a5++, 1);
                if (v74)
                  goto LABEL_272;
                v83 = v88 + 1;
LABEL_171:
                ;
              }
              while (v83 < v81);
              a3 = 0;
            }
LABEL_212:
            a4 = v45 - a4 + v60;
LABEL_240:
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_OWORD *)v40 = xmmword_18206BE50;
            *(_QWORD *)(v40 + 16) = v8;
            *(_QWORD *)(v40 + 24) = a5;
            *(_QWORD *)(v40 + 32) = a3;
            *(_QWORD *)(v40 + 40) = a4;
            v41 = 1;
            goto LABEL_45;
          }
          LODWORD(v8) = *(unsigned __int8 *)(v45 + v60);
          if (((_DWORD)v8 - 58) < 0xFFFFFFF6)
            break;
          if (__OFADD__(v57 + v60, 1))
            goto LABEL_146;
          ++v60;
          if (v45 + v60 >= v21)
            goto LABEL_147;
        }
        v62 = v57 + v60;
        switch(*(_BYTE *)(v45 + v60))
        {
          case '+':
          case '-':
            if (v62 != 0 || (v56 & 1) == 0)
              goto LABEL_142;
            v57 = 0;
            v56 = 0;
            v58 = 0;
            v59 = 0;
            v45 += v60 + 1;
            if (v45 >= v21)
              goto LABEL_244;
            continue;
          case ',':
          case '/':
          case '0':
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
          case ':':
          case ';':
          case '<':
          case '=':
          case '>':
          case '?':
          case '@':
          case 'A':
          case 'B':
          case 'C':
          case 'D':
            goto LABEL_142;
          case '.':
            if (v62 < 1 || (v59 & 1) == 0)
            {
              v93 = v45 + v60;
              if (v45 + v60 < a4)
                goto LABEL_270;
              v94 = a4 + a5;
              if (a4 + a5 < v93)
                goto LABEL_270;
              if (v94 >= v45 + v60 + 1)
                v94 = v45 + v60 + 1;
              if (v94 <= a4)
              {
                a3 = 0;
                a5 = 1;
              }
              else
              {
                v95 = a5 + a4;
                a5 = 1;
                v96 = a4;
                do
                {
                  v97 = 0;
                  v98 = 0;
                  v99 = v95 - v96;
                  while (1)
                  {
                    if ((uint64_t)(v96 - a4 + v98) < 0 || (uint64_t)(v99 + v97) < 1)
                      goto LABEL_253;
                    v100 = *(unsigned __int8 *)(v96 + v98);
                    if (v100 == 10)
                    {
                      v74 = __OFADD__(a5++, 1);
                      if (v74)
                        goto LABEL_275;
                      v96 += v98 + 1;
                      goto LABEL_209;
                    }
                    if (v100 == 13)
                      break;
                    a3 = v98 + 1;
                    if (__OFADD__(v98, 1))
                      goto LABEL_254;
                    ++v98;
                    --v97;
                    if (v96 + v98 >= v94)
                      goto LABEL_239;
                  }
                  v101 = v96 + v98;
                  if (v93 >= v96 + v98 + 1)
                  {
                    if (((v96 - a4 + v98 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v98 + v99) < 1)
                      goto LABEL_280;
                    if (*(_BYTE *)(v101 + 1) == 10)
                      v101 = v96 + v98 + 1;
                  }
                  v74 = __OFADD__(a5++, 1);
                  if (v74)
                    goto LABEL_276;
                  v96 = v101 + 1;
LABEL_209:
                  ;
                }
                while (v96 < v94);
                a3 = 0;
              }
LABEL_239:
              a4 = v45 - a4 + v60;
              LODWORD(v8) = 46;
              goto LABEL_240;
            }
            v57 = 0;
            v56 = 0;
            v59 = 0;
            v45 += v60 + 1;
            v58 = 1;
            if (v45 < v21)
              continue;
            __break(1u);
            break;
          case 'E':
            goto LABEL_98;
          default:
            if ((_DWORD)v8 != 101)
            {
LABEL_142:
              a5 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v45 + v60, a4, a5);
              a3 = v76;
              a4 = v77;
              goto LABEL_240;
            }
LABEL_98:
            if (v62 < 1 || (v58 & 1) == 0)
              goto LABEL_148;
            v57 = 0;
            v58 = 0;
            v59 = 0;
            v45 += v60 + 1;
            v56 = 1;
            if (v45 >= v21)
              goto LABEL_245;
            continue;
        }
        goto LABEL_104;
      }
    }
    v43 = 0;
    v44 = v18;
    while (1)
    {
      if (v43 < 0 || (v31 = v44 < 1, --v44, v31))
      {
        __break(1u);
LABEL_244:
        __break(1u);
LABEL_245:
        __break(1u);
LABEL_246:
        __break(1u);
LABEL_247:
        __break(1u);
LABEL_248:
        __break(1u);
LABEL_249:
        __break(1u);
LABEL_250:
        __break(1u);
LABEL_251:
        __break(1u);
        goto LABEL_252;
      }
      if (v17[v43] - 58 < 0xFFFFFFF6)
        break;
      v45 = (unint64_t)&v17[++v43];
      if ((unint64_t)&v17[v43] >= v21)
        goto LABEL_84;
    }
LABEL_83:
    v45 = (unint64_t)&v19[v43];
    goto LABEL_84;
  }
  if (v18 < 1)
    goto LABEL_255;
  v22 = *(unsigned __int8 *)v17;
  if (v22 == 45 || (v8 = v17, v22 == 43))
    v8 = v17 + 1;
  if (v21 < (unint64_t)v8)
    goto LABEL_256;
  v14 = v8 - v17;
  if (v8 - v17 < 0)
    goto LABEL_257;
  if ((uint64_t)(v21 - (_QWORD)v8) < 0)
    goto LABEL_258;
  if ((uint64_t)(v21 - (_QWORD)v8) >= 2)
    v23 = 2;
  else
    v23 = v21 - (_QWORD)v8;
  if (!_stringshims_strncasecmp_l(v8, "0x", v23, 0))
  {
    v52 = (unsigned __int8 *)(v8 + 2);
    v43 = v21 - (_QWORD)(v8 + 2);
    if (v43 >= 1 && (unint64_t)v52 < v21)
    {
      v43 = v52 - v19;
      if (((v52 - v19) & 0x8000000000000000) == 0)
      {
        a3 = (uint64_t)&v8[-a4 + 2];
        v43 = &v19[v20] - (unsigned __int8 *)v8 - 3;
        v53 = v14 + 3;
        do
        {
          v54 = v53;
          v20 = *v52;
          if ((v20 - 58) <= 0xF5u
            && (*v52 - 65 > 0x25 || ((1 << (v20 - 65)) & 0x3F0000003FLL) == 0))
          {
            if ((unint64_t)v52 < a4)
              goto LABEL_264;
            v66 = a4 + a5;
            if (a4 + a5 < (unint64_t)v52)
              goto LABEL_264;
            if (v66 >= (unint64_t)(v52 + 1))
              v66 = (unint64_t)(v52 + 1);
            if (v66 <= a4)
            {
              v73 = 0;
              v14 = 0xED00007265626D75;
              v21 = 0x6E20786568206E69;
              a5 = 1;
              goto LABEL_174;
            }
            v67 = -(uint64_t)a4;
            v68 = a5 + a4;
            a5 = 1;
            while (1)
            {
              v69 = 0;
              v70 = 0;
              v71 = v68 - a4;
              while (1)
              {
                if ((uint64_t)(v67 + a4 + v70) < 0 || (uint64_t)(v71 + v69) < 1)
                  goto LABEL_246;
                v72 = *(unsigned __int8 *)(a4 + v70);
                if (v72 == 10)
                  break;
                if (v72 == 13)
                {
                  v75 = a4 + v70;
                  if ((unint64_t)v52 >= a4 + v70 + 1)
                  {
                    if (((v67 + a4 + v70 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v70 + v71) < 1)
                      goto LABEL_273;
                    if (*(_BYTE *)(v75 + 1) == 10)
                      v75 = a4 + v70 + 1;
                  }
                  v74 = __OFADD__(a5++, 1);
                  if (v74)
                    goto LABEL_268;
                  a4 = v75 + 1;
                  goto LABEL_140;
                }
                v73 = v70 + 1;
                if (__OFADD__(v70, 1))
                  goto LABEL_247;
                ++v70;
                --v69;
                if (a4 + v70 >= v66)
                {
                  v14 = 0xED00007265626D75;
                  v21 = 0x6E20786568206E69;
LABEL_174:
                  a4 = v20;
                  lazy protocol witness table accessor for type JSONError and conformance JSONError();
                  swift_allocError();
                  *(_QWORD *)v40 = v21;
                  *(_QWORD *)(v40 + 8) = v14;
                  *(_QWORD *)(v40 + 16) = v20;
                  *(_QWORD *)(v40 + 24) = a5;
                  *(_QWORD *)(v40 + 32) = v73;
                  *(_QWORD *)(v40 + 40) = a3;
                  v41 = 1;
                  goto LABEL_45;
                }
              }
              v74 = __OFADD__(a5++, 1);
              if (v74)
                goto LABEL_267;
              a4 += v70 + 1;
LABEL_140:
              v14 = 0xED00007265626D75;
              v21 = 0x6E20786568206E69;
              if (a4 >= v66)
              {
                v73 = 0;
                goto LABEL_174;
              }
            }
          }
          v31 = v43-- < 1;
          if (v31)
            break;
          if ((unint64_t)++v52 >= v21)
            break;
          ++a3;
          ++v53;
        }
        while ((v54 & 0x8000000000000000) == 0);
      }
    }
    __break(1u);
    goto LABEL_83;
  }
  if ((unint64_t)v8 >= v21)
    goto LABEL_263;
  v24 = 0;
  v25 = 0;
  v26 = (const char *)&v19[v20];
  v27 = 1;
LABEL_24:
  v29 = 0;
  v30 = v26 - v8;
  while (v8 - (const char *)v19 + v29 >= 0)
  {
    v31 = v30-- < 1;
    if (v31)
      break;
    LODWORD(v20) = v8[v29];
    if ((v20 - 58) <= 0xF5u)
    {
      switch(v8[v29])
      {
        case '+':
        case '-':
          if (v29 != 0 || (v24 & 1) == 0)
            goto LABEL_143;
          v24 = 0;
          v27 = 0;
          v8 += v29 + 1;
          v25 = 3;
          if ((unint64_t)v8 >= v21)
            goto LABEL_248;
          goto LABEL_24;
        case ',':
        case '/':
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        case ':':
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case '@':
        case 'A':
        case 'B':
        case 'C':
        case 'D':
          goto LABEL_143;
        case '.':
          if ((v27 & 1) == 0)
          {
            v102 = (unint64_t)&v8[v29];
            if ((unint64_t)&v8[v29] < a4)
              goto LABEL_274;
            v103 = a4 + a5;
            if (a4 + a5 < v102)
              goto LABEL_274;
            if (v103 >= (unint64_t)&v8[v29 + 1])
              v103 = (unint64_t)&v8[v29 + 1];
            if (v103 > a4)
            {
              v104 = a5 + a4;
              a5 = 1;
              v105 = a4;
              while (1)
              {
                v106 = 0;
                v107 = 0;
                v108 = v104 - v105;
                while (1)
                {
                  if ((uint64_t)(v105 - a4 + v107) < 0 || (uint64_t)(v108 + v106) < 1)
                  {
                    __break(1u);
LABEL_262:
                    __break(1u);
LABEL_263:
                    __break(1u);
LABEL_264:
                    __break(1u);
LABEL_265:
                    __break(1u);
LABEL_266:
                    __break(1u);
LABEL_267:
                    __break(1u);
LABEL_268:
                    __break(1u);
LABEL_269:
                    __break(1u);
LABEL_270:
                    __break(1u);
LABEL_271:
                    __break(1u);
LABEL_272:
                    __break(1u);
LABEL_273:
                    __break(1u);
LABEL_274:
                    __break(1u);
LABEL_275:
                    __break(1u);
LABEL_276:
                    __break(1u);
LABEL_277:
                    __break(1u);
LABEL_278:
                    __break(1u);
LABEL_279:
                    __break(1u);
LABEL_280:
                    __break(1u);
                  }
                  v109 = *(unsigned __int8 *)(v105 + v107);
                  if (v109 == 10)
                  {
                    v74 = __OFADD__(a5++, 1);
                    if (!v74)
                    {
                      v105 += v107 + 1;
                      goto LABEL_236;
                    }
                    goto LABEL_278;
                  }
                  if (v109 == 13)
                    break;
                  v73 = v107 + 1;
                  if (__OFADD__(v107, 1))
                    goto LABEL_262;
                  ++v107;
                  --v106;
                  if (v105 + v107 >= v103)
                    goto LABEL_242;
                }
                v110 = v105 + v107;
                if (v102 >= v105 + v107 + 1)
                {
                  if (((v105 - a4 + v107 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v107 + v108) < 1)
                  {
                    __break(1u);
LABEL_282:
                    v115[0] = 0;
                    v115[1] = (char *)0xE000000000000000;
                    _StringGuts.grow(_:)(30);
                    swift_bridgeObjectRelease();
                    strcpy((char *)v115, "Invalid index ");
                    HIBYTE(v115[1]) = -18;
                    v111._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                    String.append(_:)(v111);
                    swift_bridgeObjectRelease();
                    v112._countAndFlagsBits = 0x616D5F20726F6620;
                    v112._object = (void *)0xEE0061737369746ELL;
                    String.append(_:)(v112);
                    _assertionFailure(_:_:file:line:flags:)();
                    __break(1u);
                    JUMPOUT(0x181E465F4);
                  }
                  if (*(_BYTE *)(v110 + 1) == 10)
                    v110 = v105 + v107 + 1;
                }
                v74 = __OFADD__(a5++, 1);
                if (v74)
                  goto LABEL_279;
                v105 = v110 + 1;
LABEL_236:
                if (v105 >= v103)
                {
                  v73 = 0;
                  goto LABEL_242;
                }
              }
            }
            v73 = 0;
            a5 = 1;
LABEL_242:
            a3 = (uint64_t)&v8[v29 - a4];
            LOBYTE(v20) = 46;
LABEL_144:
            v14 = 0xE900000000000072;
            v21 = 0x65626D756E206E69;
            goto LABEL_174;
          }
          v24 = 0;
          v27 = 0;
          v8 += v29 + 1;
          v25 = 1;
          if ((unint64_t)v8 < v21)
            goto LABEL_24;
          __break(1u);
          break;
        case 'E':
          goto LABEL_36;
        default:
          if ((_DWORD)v20 != 101)
            goto LABEL_143;
LABEL_36:
          if (v25 != 1 && (v25 || v29 < 1))
          {
LABEL_143:
            a5 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)&v8[v29], a4, a5);
            v73 = v78;
            a3 = v79;
            goto LABEL_144;
          }
          v27 = 0;
          v8 += v29 + 1;
          v25 = 2;
          v24 = 1;
          if ((unint64_t)v8 >= v21)
            goto LABEL_249;
          goto LABEL_24;
      }
LABEL_43:
      LODWORD(v8) = (_DWORD)v119;
      v32 = (unint64_t)v119 >> 48;
      v20 = (unsigned __int16)v120;
      a3 = (unint64_t)v119 >> 32;
      v33 = WORD1(v120);
      v34 = WORD2(v120);
      v35 = HIWORD(v120);
      v36 = v121;
      v37 = v122;
      v115[0] = v119;
      v115[1] = v120;
      v116 = v121;
      v117 = v122;
      if (_So9NSDecimala__isNegative_getter(v115))
        goto LABEL_44;
      v46 = v36;
      v21 = v35;
      v7 = v34;
      a5 = v33;
      v14 = v20;
      LOWORD(v20) = v32;
      LODWORD(v115[0]) = (_DWORD)v8;
      WORD2(v115[0]) = a3;
      HIWORD(v115[0]) = v32;
      LOWORD(v115[1]) = v14;
      WORD1(v115[1]) = a5;
      WORD2(v115[1]) = v7;
      HIWORD(v115[1]) = v21;
      v113 = v37;
      v114 = v46;
      v116 = v46;
      v117 = v37;
      v47 = _So9NSDecimala__length_getter(v115);
      if (!v47)
        goto LABEL_260;
      v45 = 0;
      v48 = v47 - 1;
      if (v47 != 1)
      {
        v49 = v113;
        v50 = v114;
        while (2)
        {
          v51 = v32;
          switch(v48)
          {
            case 1:
              goto LABEL_66;
            case 2:
              v51 = v14;
              goto LABEL_66;
            case 3:
              v51 = a5;
              goto LABEL_66;
            case 4:
              v51 = v7;
              goto LABEL_66;
            case 5:
              v51 = v21;
              goto LABEL_66;
            case 6:
              v51 = v114;
              goto LABEL_66;
            case 7:
              v51 = v113;
LABEL_66:
              if (HIWORD(v45))
                goto LABEL_44;
              v45 = v51 | (v45 << 16);
              if (!--v48)
                goto LABEL_105;
              continue;
            default:
              goto LABEL_282;
          }
        }
      }
LABEL_104:
      v49 = v113;
      v50 = v114;
LABEL_105:
      if (!HIWORD(v45))
      {
        a4 = (unsigned __int16)a3 | (v45 << 16);
        goto LABEL_107;
      }
      goto LABEL_44;
    }
    if (__OFADD__(v29, 1))
      goto LABEL_176;
    if ((unint64_t)&v8[++v29] >= v21)
      goto LABEL_177;
  }
  __break(1u);
LABEL_176:
  __break(1u);
LABEL_177:
  __break(1u);
  do
  {
    LODWORD(v115[0]) = (_DWORD)v8;
    WORD2(v115[0]) = a3;
    HIWORD(v115[0]) = v20;
    LOWORD(v115[1]) = v14;
    WORD1(v115[1]) = a5;
    WORD2(v115[1]) = v7;
    HIWORD(v115[1]) = v21;
    v116 = v114;
    v117 = (__int16)v19;
    v89 = _So9NSDecimala__exponent_getter((char *)v115);
    if (v89 > 0)
      goto LABEL_269;
    if (!v89)
      goto LABEL_184;
    v90 = -v89 & ~(-v89 >> 31);
    v91 = ~v89;
    while (v90 > v91)
    {
      a4 /= 0xAuLL;
      if (__CFADD__(v89++, 1))
        goto LABEL_184;
    }
LABEL_252:
    __break(1u);
LABEL_253:
    __break(1u);
LABEL_254:
    __break(1u);
LABEL_255:
    __break(1u);
LABEL_256:
    __break(1u);
LABEL_257:
    __break(1u);
LABEL_258:
    __break(1u);
LABEL_259:
    __break(1u);
LABEL_260:
    a4 = 0;
    v49 = v113;
    v50 = v114;
LABEL_107:
    LODWORD(v115[0]) = (_DWORD)v8;
    WORD2(v115[0]) = a3;
    HIWORD(v115[0]) = v20;
    LOWORD(v115[1]) = v14;
    WORD1(v115[1]) = a5;
    WORD2(v115[1]) = v7;
    HIWORD(v115[1]) = v21;
    v116 = v50;
    v117 = v49;
    LOWORD(v19) = v49;
  }
  while ((_So9NSDecimala__exponent_getter((char *)v115) & 0x80000000) != 0);
  LODWORD(v115[0]) = (_DWORD)v8;
  WORD2(v115[0]) = a3;
  HIWORD(v115[0]) = v20;
  LOWORD(v115[1]) = v14;
  WORD1(v115[1]) = a5;
  WORD2(v115[1]) = v7;
  HIWORD(v115[1]) = v21;
  v116 = v114;
  v117 = (__int16)v19;
  v63 = _So9NSDecimala__exponent_getter((char *)v115);
  if (v63 < 0)
    goto LABEL_265;
  if (v63)
  {
    if (is_mul_ok(a4, 0xAuLL))
    {
      a4 *= 10;
      v64 = v63 - 1;
      if (v63 == 1)
        goto LABEL_184;
      if (is_mul_ok(a4, 0xAuLL))
      {
        a4 *= 10;
        while (--v64)
        {
          v65 = (a4 * (unsigned __int128)0xAuLL) >> 64;
          a4 *= 10;
          if (v65)
            goto LABEL_44;
        }
        goto LABEL_184;
      }
    }
LABEL_44:
    a4 = static String._fromUTF8Repairing(_:)();
    v39 = v38;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_QWORD *)v40 = a4;
    *(_QWORD *)(v40 + 8) = v39;
    *(_OWORD *)(v40 + 16) = 0u;
    *(_OWORD *)(v40 + 32) = 0u;
    v41 = 11;
LABEL_45:
    *(_BYTE *)(v40 + 48) = v41;
    swift_willThrow();
  }
  else
  {
LABEL_184:
    if (HIDWORD(a4))
      goto LABEL_44;
  }
  return a4;
}

unint64_t specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(__int16 a1, char *a2, uint64_t a3, unint64_t a4, unint64_t i, uint64_t a6)
{
  int v6;
  const char *v7;
  unint64_t v13;
  double v14;
  BOOL v15;
  const char *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  size_t v22;
  char v23;
  char v24;
  const char *v25;
  char v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  unint64_t v37;
  int v38;
  unint64_t v39;
  int v40;
  __int16 v41;
  __int16 v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  __int16 v47;
  __int16 v48;
  int v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char v55;
  unsigned __int8 *v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int8 *v73;
  unsigned __int8 *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  int v84;
  uint64_t v85;
  int v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v90;
  char v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  int v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  int v111;
  uint64_t v112;
  Swift::String v113;
  Swift::String v114;
  unint64_t v115;
  unint64_t v116;
  int isNegative_getter;
  char *v118[2];
  __int16 v119;
  __int16 v120;
  _BYTE v121[40];
  char *v122;
  char *v123;
  unsigned __int16 v124;
  unsigned __int16 v125;
  char v126;
  uint64_t v127;

  LODWORD(v7) = v6;
  LOWORD(v13) = a1;
  v127 = *MEMORY[0x1E0C80C00];
  v118[0] = 0;
  v14 = _stringshims_strtod_l(a2, v118, 0);
  if (v118[0])
    v15 = &a2[a3] == v118[0];
  else
    v15 = 0;
  if (v15)
  {
    v27 = v14;
    if (!specialized static FixedWidthInteger._convert<A>(from:)(v118, v14) || (BYTE1(v118[0]) & 1) != 0)
      goto LABEL_186;
    if (fabs(v27) < 9.00719925e15)
      return LOBYTE(v118[0]);
  }
  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)((uint64_t)a2, a3, 0x2EuLL, 0xE100000000000000, 1, (uint64_t)v121);
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v121, (uint64_t)&v122);
  if (v126 != 1)
  {
LABEL_43:
    LODWORD(v20) = (_DWORD)v122;
    v19 = (unint64_t)v122 >> 48;
    a3 = (unsigned __int16)v123;
    v31 = (unint64_t)v122 >> 32;
    v32 = WORD1(v123);
    v33 = WORD2(v123);
    v34 = HIWORD(v123);
    v35 = v124;
    i = v125;
    v118[0] = v122;
    v118[1] = v123;
    v119 = v124;
    v120 = v125;
    isNegative_getter = _So9NSDecimala__isNegative_getter(v118);
    LODWORD(v118[0]) = v20;
    WORD2(v118[0]) = v31;
    HIWORD(v118[0]) = v19;
    LOWORD(v118[1]) = a3;
    WORD1(v118[1]) = v32;
    WORD2(v118[1]) = v33;
    HIWORD(v118[1]) = v34;
    v119 = v35;
    v120 = i;
    v36 = _So9NSDecimala__length_getter(v118);
    v37 = v34;
    a4 = v33;
    v13 = v32;
    v7 = (const char *)a3;
    LOWORD(a3) = v31;
    if (!v36 && isNegative_getter)
      goto LABEL_186;
    LODWORD(v118[0]) = v20;
    WORD2(v118[0]) = v31;
    HIWORD(v118[0]) = v19;
    LOWORD(v118[1]) = (_WORD)v7;
    WORD1(v118[1]) = v13;
    WORD2(v118[1]) = a4;
    v116 = v37;
    HIWORD(v118[1]) = v37;
    v115 = v35;
    v119 = v35;
    v120 = i;
    v38 = _So9NSDecimala__length_getter(v118);
    if (!v38)
      goto LABEL_260;
    v39 = 0;
    v40 = v38 - 1;
    if (v38 != 1)
    {
      v41 = v115;
      v42 = v116;
      while (2)
      {
        v43 = v19;
        switch(v40)
        {
          case 1:
            goto LABEL_55;
          case 2:
            v43 = (unint64_t)v7;
            goto LABEL_55;
          case 3:
            v43 = v13;
            goto LABEL_55;
          case 4:
            v43 = a4;
            goto LABEL_55;
          case 5:
            v43 = v116;
            goto LABEL_55;
          case 6:
            v43 = v115;
            goto LABEL_55;
          case 7:
            v43 = i;
LABEL_55:
            if (HIWORD(v39))
              goto LABEL_186;
            v39 = v43 | (v39 << 16);
            if (--v40)
              continue;
            if (HIWORD(v39))
              goto LABEL_186;
            goto LABEL_70;
          default:
            goto LABEL_286;
        }
      }
    }
    v41 = v115;
    v42 = v116;
LABEL_70:
    v47 = i;
    for (i = (unsigned __int16)v31 | (v39 << 16); ; i = 0)
    {
      LODWORD(v118[0]) = v20;
      WORD2(v118[0]) = a3;
      HIWORD(v118[0]) = v19;
      LOWORD(v118[1]) = (_WORD)v7;
      WORD1(v118[1]) = v13;
      WORD2(v118[1]) = a4;
      HIWORD(v118[1]) = v42;
      v119 = v41;
      v120 = v47;
      v48 = v41;
      if ((_So9NSDecimala__exponent_getter((char *)v118) & 0x80000000) == 0)
        break;
      LODWORD(v118[0]) = v20;
      WORD2(v118[0]) = a3;
      HIWORD(v118[0]) = v19;
      LOWORD(v118[1]) = (_WORD)v7;
      WORD1(v118[1]) = v13;
      WORD2(v118[1]) = a4;
      HIWORD(v118[1]) = v116;
      v119 = v48;
      v120 = v47;
      v86 = _So9NSDecimala__exponent_getter((char *)v118);
      if (v86 > 0)
        goto LABEL_271;
      if (!v86)
        goto LABEL_178;
      v87 = -v86 & ~(-v86 >> 31);
      v88 = ~v86;
      while (v87 > v88)
      {
        i /= 0xAuLL;
        if (__CFADD__(v86++, 1))
          goto LABEL_178;
      }
LABEL_254:
      __break(1u);
LABEL_255:
      __break(1u);
LABEL_256:
      __break(1u);
LABEL_257:
      __break(1u);
LABEL_258:
      __break(1u);
LABEL_259:
      __break(1u);
LABEL_260:
      v47 = i;
      v41 = v115;
      v42 = v116;
    }
    LODWORD(v118[0]) = v20;
    WORD2(v118[0]) = a3;
    HIWORD(v118[0]) = v19;
    LOWORD(v118[1]) = (_WORD)v7;
    WORD1(v118[1]) = v13;
    WORD2(v118[1]) = a4;
    HIWORD(v118[1]) = v116;
    v119 = v48;
    v120 = v47;
    v49 = _So9NSDecimala__exponent_getter((char *)v118);
    if ((v49 & 0x80000000) == 0)
    {
      if (v49)
      {
        if (!is_mul_ok(i, 0xAuLL))
          goto LABEL_186;
        i *= 10;
        v50 = v49 - 1;
        if (v49 != 1)
        {
          if (!is_mul_ok(i, 0xAuLL))
            goto LABEL_186;
          i *= 10;
          while (--v50)
          {
            v51 = (i * (unsigned __int128)0xAuLL) >> 64;
            i *= 10;
            if (v51)
              goto LABEL_186;
          }
        }
      }
LABEL_178:
      if (!isNegative_getter)
        goto LABEL_185;
      if (i <= 0x7F)
        return -(int)i;
LABEL_186:
      v92 = static String._fromUTF8Repairing(_:)();
      i = v93;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(_QWORD *)v90 = v92;
      *(_QWORD *)(v90 + 8) = i;
      *(_OWORD *)(v90 + 16) = 0u;
      *(_OWORD *)(v90 + 32) = 0u;
      v91 = 11;
      goto LABEL_187;
    }
LABEL_269:
    __break(1u);
    goto LABEL_270;
  }
  v16 = (const char *)specialized BufferView.suffix(from:)(a6, (uint64_t)a2, a3);
  v18 = (unsigned __int8 *)v16;
  v19 = v17;
  v20 = (unint64_t)&v16[v17];
  if ((v13 & 1) == 0)
  {
    if (v17 <= 0)
    {
      v46 = (unsigned __int8 *)v16;
      goto LABEL_95;
    }
    v44 = 0;
    v45 = v17;
    while (1)
    {
      if (v44 < 0 || (v30 = v45 < 1, --v45, v30))
      {
        __break(1u);
LABEL_248:
        __break(1u);
LABEL_249:
        __break(1u);
LABEL_250:
        __break(1u);
LABEL_251:
        __break(1u);
LABEL_252:
        __break(1u);
LABEL_253:
        __break(1u);
        goto LABEL_254;
      }
      if (v16[v44] - 58 < 0xFFFFFFF6)
        break;
      v46 = (unsigned __int8 *)&v16[++v44];
      if ((unint64_t)&v16[v44] >= v20)
        goto LABEL_95;
    }
LABEL_94:
    v46 = &v18[v44];
LABEL_95:
    if ((unint64_t)v46 < v20)
    {
      v55 = 0;
      v56 = (unsigned __int8 *)(v46 - v18);
      v57 = 1;
      v58 = 1;
      while (1)
      {
        v59 = 0;
        v60 = &v18[v19] - v46;
        while (1)
        {
          if (v46 - v18 + v59 < 0 || (v30 = v60 < 1, --v60, v30))
          {
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            v77 = (unint64_t)&v46[v59];
            if ((unint64_t)&v46[v59] >= a4)
            {
              v78 = a4 + i;
              if (a4 + i >= v77)
              {
                if (v78 >= (unint64_t)&v46[v59 + 1])
                  v78 = (unint64_t)&v46[v59 + 1];
                if (v78 > a4)
                {
                  v79 = i + a4;
                  i = 1;
                  v80 = a4;
                  while (1)
                  {
                    v81 = 0;
                    v82 = 0;
                    v83 = v79 - v80;
                    while (1)
                    {
                      if ((uint64_t)(v80 - a4 + v82) < 0 || (uint64_t)(v83 + v81) < 1)
                        goto LABEL_255;
                      v84 = *(unsigned __int8 *)(v80 + v82);
                      if (v84 == 10)
                      {
                        v70 = __OFADD__(i++, 1);
                        if (!v70)
                        {
                          v80 += v82 + 1;
                          goto LABEL_169;
                        }
                        goto LABEL_275;
                      }
                      if (v84 == 13)
                        break;
                      a3 = v82 + 1;
                      if (__OFADD__(v82, 1))
                        goto LABEL_256;
                      ++v82;
                      --v81;
                      if (v80 + v82 >= v78)
                        goto LABEL_216;
                    }
                    v85 = v80 + v82;
                    if (v77 < v80 + v82 + 1)
                      goto LABEL_167;
                    if (((v80 - a4 + v82 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v82 + v83) < 1)
                      goto LABEL_281;
                    if (*(_BYTE *)(v85 + 1) == 10)
                      v85 = v80 + v82 + 1;
LABEL_167:
                    v70 = __OFADD__(i++, 1);
                    if (v70)
                      goto LABEL_276;
                    v80 = v85 + 1;
LABEL_169:
                    if (v80 >= v78)
                    {
                      a3 = 0;
                      goto LABEL_216;
                    }
                  }
                }
                a3 = 0;
                i = 1;
LABEL_216:
                v74 = &v46[v59 - a4];
                goto LABEL_244;
              }
            }
LABEL_270:
            __break(1u);
LABEL_271:
            __break(1u);
LABEL_272:
            __break(1u);
LABEL_273:
            __break(1u);
LABEL_274:
            __break(1u);
LABEL_275:
            __break(1u);
LABEL_276:
            __break(1u);
LABEL_277:
            __break(1u);
LABEL_278:
            __break(1u);
LABEL_279:
            __break(1u);
            goto LABEL_280;
          }
          LODWORD(v7) = v46[v59];
          if (((_DWORD)v7 - 58) < 0xFFFFFFF6)
            break;
          if (__OFADD__(&v56[v59], 1))
            goto LABEL_144;
          if ((unint64_t)&v46[++v59] >= v20)
            goto LABEL_145;
        }
        v61 = (uint64_t)&v56[v59];
        switch(v46[v59])
        {
          case '+':
          case '-':
            if (v61 != 0 || (v55 & 1) == 0)
              goto LABEL_140;
            v56 = 0;
            v55 = 0;
            v57 = 0;
            v58 = 0;
            v46 += v59 + 1;
            if ((unint64_t)v46 >= v20)
              goto LABEL_248;
            continue;
          case ',':
          case '/':
          case '0':
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
          case ':':
          case ';':
          case '<':
          case '=':
          case '>':
          case '?':
          case '@':
          case 'A':
          case 'B':
          case 'C':
          case 'D':
            goto LABEL_140;
          case '.':
            if (v61 < 1 || (v58 & 1) == 0)
            {
              v95 = (unint64_t)&v46[v59];
              if ((unint64_t)&v46[v59] < a4)
                goto LABEL_274;
              v96 = a4 + i;
              if (a4 + i < v95)
                goto LABEL_274;
              if (v96 >= (unint64_t)&v46[v59 + 1])
                v96 = (unint64_t)&v46[v59 + 1];
              if (v96 <= a4)
              {
                a3 = 0;
                i = 1;
              }
              else
              {
                v97 = i + a4;
                i = 1;
                v98 = a4;
                do
                {
                  v99 = 0;
                  v100 = 0;
                  v101 = v97 - v98;
                  while (1)
                  {
                    if ((uint64_t)(v98 - a4 + v100) < 0 || (uint64_t)(v101 + v99) < 1)
                      goto LABEL_257;
                    v102 = *(unsigned __int8 *)(v98 + v100);
                    if (v102 == 10)
                      break;
                    if (v102 == 13)
                    {
                      v103 = v98 + v100;
                      if (v95 < v98 + v100 + 1)
                        goto LABEL_209;
                      if (((v98 - a4 + v100 + 1) & 0x8000000000000000) == 0 && (uint64_t)(~v100 + v101) >= 1)
                      {
                        if (*(_BYTE *)(v103 + 1) == 10)
                          v103 = v98 + v100 + 1;
LABEL_209:
                        v70 = __OFADD__(i++, 1);
                        if (!v70)
                        {
                          v98 = v103 + 1;
                          goto LABEL_213;
                        }
LABEL_280:
                        __break(1u);
LABEL_281:
                        __break(1u);
LABEL_282:
                        __break(1u);
LABEL_283:
                        __break(1u);
                      }
                      __break(1u);
                    }
                    a3 = v100 + 1;
                    if (__OFADD__(v100, 1))
                      goto LABEL_258;
                    ++v100;
                    --v99;
                    if (v98 + v100 >= v96)
                      goto LABEL_243;
                  }
                  v70 = __OFADD__(i++, 1);
                  if (v70)
                    goto LABEL_279;
                  v98 += v100 + 1;
LABEL_213:
                  ;
                }
                while (v98 < v96);
                a3 = 0;
              }
LABEL_243:
              v74 = &v46[v59 - a4];
              LODWORD(v7) = 46;
LABEL_244:
              lazy protocol witness table accessor for type JSONError and conformance JSONError();
              swift_allocError();
              *(_OWORD *)v90 = xmmword_18206BE50;
              *(_QWORD *)(v90 + 16) = v7;
              *(_QWORD *)(v90 + 24) = i;
              *(_QWORD *)(v90 + 32) = a3;
              *(_QWORD *)(v90 + 40) = v74;
              v91 = 1;
LABEL_187:
              *(_BYTE *)(v90 + 48) = v91;
              swift_willThrow();
              return i;
            }
            v56 = 0;
            v55 = 0;
            v58 = 0;
            v46 += v59 + 1;
            v57 = 1;
            if ((unint64_t)v46 >= v20)
            {
              __break(1u);
              goto LABEL_115;
            }
            break;
          case 'E':
            goto LABEL_109;
          default:
            if ((_DWORD)v7 != 101)
            {
LABEL_140:
              i = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)&v46[v59], a4, i);
              a3 = v72;
              v74 = v73;
              goto LABEL_244;
            }
LABEL_109:
            if (v61 < 1 || (v57 & 1) == 0)
              goto LABEL_146;
            v56 = 0;
            v57 = 0;
            v58 = 0;
            v46 += v59 + 1;
            v55 = 1;
            if ((unint64_t)v46 >= v20)
              goto LABEL_249;
            continue;
        }
      }
    }
    goto LABEL_264;
  }
  if (v17 < 1)
    goto LABEL_259;
  v21 = *(unsigned __int8 *)v16;
  if (v21 == 45 || (v7 = v16, v21 == 43))
    v7 = v16 + 1;
  if (v20 < (unint64_t)v7)
  {
    __break(1u);
    goto LABEL_262;
  }
  v13 = v7 - v16;
  if (v7 - v16 < 0)
  {
LABEL_262:
    __break(1u);
    goto LABEL_263;
  }
  if ((uint64_t)(v20 - (_QWORD)v7) < 0)
  {
LABEL_263:
    __break(1u);
LABEL_264:
    __break(1u);
LABEL_265:
    __break(1u);
LABEL_266:
    __break(1u);
    goto LABEL_267;
  }
  if ((uint64_t)(v20 - (_QWORD)v7) >= 2)
    v22 = 2;
  else
    v22 = v20 - (_QWORD)v7;
  if (!_stringshims_strncasecmp_l(v7, "0x", v22, 0))
  {
    v46 = (unsigned __int8 *)(v7 + 2);
    v44 = v20 - (_QWORD)(v7 + 2);
    if (v44 >= 1 && (unint64_t)v46 < v20)
    {
      v44 = v46 - v18;
      if (((v46 - v18) & 0x8000000000000000) == 0)
      {
        a3 = (uint64_t)&v7[-a4 + 2];
        v44 = &v18[v19] - (unsigned __int8 *)v7 - 3;
        v52 = v13 + 3;
        while (1)
        {
          v53 = v52;
          v19 = *v46;
          if ((v19 - 58) <= 0xF5u
            && (*v46 - 65 > 0x25 || ((1 << (v19 - 65)) & 0x3F0000003FLL) == 0))
          {
            break;
          }
          v30 = v44-- < 1;
          if (!v30 && (unint64_t)++v46 < v20)
          {
            ++a3;
            ++v52;
            if ((v53 & 0x8000000000000000) == 0)
              continue;
          }
          goto LABEL_93;
        }
LABEL_115:
        if ((unint64_t)v46 >= a4)
        {
          v62 = a4 + i;
          if (a4 + i >= (unint64_t)v46)
          {
            if (v62 >= (unint64_t)(v46 + 1))
              v62 = (unint64_t)(v46 + 1);
            if (v62 > a4)
            {
              v63 = -(uint64_t)a4;
              v64 = i + a4;
              i = 1;
              while (1)
              {
                v65 = 0;
                v66 = 0;
                v67 = v64 - a4;
                while (1)
                {
                  if ((uint64_t)(v63 + a4 + v66) < 0 || (uint64_t)(v67 + v65) < 1)
                    goto LABEL_250;
                  v68 = *(unsigned __int8 *)(a4 + v66);
                  if (v68 == 10)
                  {
                    v70 = __OFADD__(i++, 1);
                    if (!v70)
                    {
                      a4 += v66 + 1;
                      goto LABEL_138;
                    }
                    goto LABEL_272;
                  }
                  if (v68 == 13)
                    break;
                  v69 = v66 + 1;
                  if (__OFADD__(v66, 1))
                    goto LABEL_251;
                  ++v66;
                  --v65;
                  if (a4 + v66 >= v62)
                  {
                    v13 = 0xED00007265626D75;
                    v20 = 0x6E20786568206E69;
                    goto LABEL_181;
                  }
                }
                v71 = a4 + v66;
                if ((unint64_t)v46 < a4 + v66 + 1)
                  goto LABEL_136;
                if (((v63 + a4 + v66 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v66 + v67) < 1)
                  goto LABEL_277;
                if (*(_BYTE *)(v71 + 1) == 10)
                  v71 = a4 + v66 + 1;
LABEL_136:
                v70 = __OFADD__(i++, 1);
                if (v70)
                  goto LABEL_273;
                a4 = v71 + 1;
LABEL_138:
                v13 = 0xED00007265626D75;
                v20 = 0x6E20786568206E69;
                if (a4 >= v62)
                {
                  v69 = 0;
                  goto LABEL_181;
                }
              }
            }
            v69 = 0;
            v13 = 0xED00007265626D75;
            v20 = 0x6E20786568206E69;
            i = 1;
LABEL_181:
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_QWORD *)v90 = v20;
            *(_QWORD *)(v90 + 8) = v13;
            *(_QWORD *)(v90 + 16) = v19;
            *(_QWORD *)(v90 + 24) = i;
            *(_QWORD *)(v90 + 32) = v69;
            *(_QWORD *)(v90 + 40) = a3;
            v91 = 1;
            goto LABEL_187;
          }
        }
LABEL_268:
        __break(1u);
        goto LABEL_269;
      }
    }
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  if ((unint64_t)v7 >= v20)
  {
LABEL_267:
    __break(1u);
    goto LABEL_268;
  }
  v23 = 0;
  v24 = 0;
  v25 = (const char *)&v18[v19];
  v26 = 1;
LABEL_24:
  v28 = 0;
  v29 = v25 - v7;
  while (v7 - (const char *)v18 + v28 >= 0)
  {
    v30 = v29-- < 1;
    if (v30)
      break;
    LODWORD(v19) = v7[v28];
    if ((v19 - 58) <= 0xF5u)
    {
      switch(v7[v28])
      {
        case '+':
        case '-':
          if (v28 != 0 || (v23 & 1) == 0)
            goto LABEL_141;
          v23 = 0;
          v26 = 0;
          v7 += v28 + 1;
          v24 = 3;
          if ((unint64_t)v7 >= v20)
            goto LABEL_252;
          goto LABEL_24;
        case ',':
        case '/':
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        case ':':
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case '@':
        case 'A':
        case 'B':
        case 'C':
        case 'D':
          goto LABEL_141;
        case '.':
          if ((v26 & 1) == 0)
          {
            v104 = (unint64_t)&v7[v28];
            if ((unint64_t)&v7[v28] < a4)
              goto LABEL_278;
            v105 = a4 + i;
            if (a4 + i < v104)
              goto LABEL_278;
            if (v105 >= (unint64_t)&v7[v28 + 1])
              v105 = (unint64_t)&v7[v28 + 1];
            if (v105 > a4)
            {
              v106 = i + a4;
              i = 1;
              v107 = a4;
              while (1)
              {
                v108 = 0;
                v109 = 0;
                v110 = v106 - v107;
                while (1)
                {
                  if ((uint64_t)(v107 - a4 + v109) < 0 || (uint64_t)(v110 + v108) < 1)
                    goto LABEL_265;
                  v111 = *(unsigned __int8 *)(v107 + v109);
                  if (v111 == 10)
                  {
                    v70 = __OFADD__(i++, 1);
                    if (!v70)
                    {
                      v107 += v109 + 1;
                      goto LABEL_240;
                    }
                    goto LABEL_282;
                  }
                  if (v111 == 13)
                    break;
                  v69 = v109 + 1;
                  if (__OFADD__(v109, 1))
                    goto LABEL_266;
                  ++v109;
                  --v108;
                  if (v107 + v109 >= v105)
                    goto LABEL_246;
                }
                v112 = v107 + v109;
                if (v104 >= v107 + v109 + 1)
                {
                  if (((v107 - a4 + v109 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v109 + v110) < 1)
                  {
                    __break(1u);
LABEL_286:
                    v118[0] = 0;
                    v118[1] = (char *)0xE000000000000000;
                    _StringGuts.grow(_:)(30);
                    swift_bridgeObjectRelease();
                    strcpy((char *)v118, "Invalid index ");
                    HIBYTE(v118[1]) = -18;
                    v113._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                    String.append(_:)(v113);
                    swift_bridgeObjectRelease();
                    v114._countAndFlagsBits = 0x616D5F20726F6620;
                    v114._object = (void *)0xEE0061737369746ELL;
                    String.append(_:)(v114);
                    _assertionFailure(_:_:file:line:flags:)();
                    __break(1u);
                    JUMPOUT(0x181E3D9D0);
                  }
                  if (*(_BYTE *)(v112 + 1) == 10)
                    v112 = v107 + v109 + 1;
                }
                v70 = __OFADD__(i++, 1);
                if (v70)
                  goto LABEL_283;
                v107 = v112 + 1;
LABEL_240:
                if (v107 >= v105)
                {
                  v69 = 0;
                  goto LABEL_246;
                }
              }
            }
            v69 = 0;
            i = 1;
LABEL_246:
            a3 = (uint64_t)&v7[v28 - a4];
            LOBYTE(v19) = 46;
LABEL_142:
            v13 = 0xE900000000000072;
            v20 = 0x65626D756E206E69;
            goto LABEL_181;
          }
          v23 = 0;
          v26 = 0;
          v7 += v28 + 1;
          v24 = 1;
          if ((unint64_t)v7 >= v20)
          {
            __break(1u);
            goto LABEL_43;
          }
          break;
        case 'E':
          goto LABEL_36;
        default:
          if ((_DWORD)v19 != 101)
            goto LABEL_141;
LABEL_36:
          if (v24 != 1 && (v24 || v28 < 1))
          {
LABEL_141:
            i = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)&v7[v28], a4, i);
            v69 = v75;
            a3 = v76;
            goto LABEL_142;
          }
          v26 = 0;
          v7 += v28 + 1;
          v24 = 2;
          v23 = 1;
          if ((unint64_t)v7 >= v20)
            goto LABEL_253;
          goto LABEL_24;
      }
      goto LABEL_24;
    }
    if (__OFADD__(v28, 1))
      goto LABEL_183;
    if ((unint64_t)&v7[++v28] >= v20)
      goto LABEL_184;
  }
  __break(1u);
LABEL_183:
  __break(1u);
LABEL_184:
  __break(1u);
LABEL_185:
  if (i > 0x7F)
    goto LABEL_186;
  return i;
}

{
  int v6;
  const char *v7;
  unint64_t v13;
  double v14;
  BOOL v15;
  const char *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  size_t v22;
  char v23;
  char v24;
  const char *v25;
  char v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  unint64_t v37;
  int v38;
  unint64_t v39;
  int v40;
  __int16 v41;
  __int16 v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  __int16 v47;
  __int16 v48;
  int v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char v55;
  unsigned __int8 *v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int8 *v73;
  unsigned __int8 *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  int v84;
  uint64_t v85;
  int v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v90;
  char v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  int v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  int v111;
  uint64_t v112;
  Swift::String v113;
  Swift::String v114;
  unint64_t v115;
  unint64_t v116;
  int isNegative_getter;
  char *v118[2];
  __int16 v119;
  __int16 v120;
  _BYTE v121[40];
  char *v122;
  char *v123;
  unsigned __int16 v124;
  unsigned __int16 v125;
  char v126;
  uint64_t v127;

  LODWORD(v7) = v6;
  LOWORD(v13) = a1;
  v127 = *MEMORY[0x1E0C80C00];
  v118[0] = 0;
  v14 = _stringshims_strtod_l(a2, v118, 0);
  if (v118[0])
    v15 = &a2[a3] == v118[0];
  else
    v15 = 0;
  if (v15)
  {
    v27 = v14;
    if (!specialized static FixedWidthInteger._convert<A>(from:)((uint64_t)v118, v14) || (BYTE2(v118[0]) & 1) != 0)
      goto LABEL_186;
    if (fabs(v27) < 9.00719925e15)
      return LOWORD(v118[0]);
  }
  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)((uint64_t)a2, a3, 0x2EuLL, 0xE100000000000000, 1, (uint64_t)v121);
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v121, (uint64_t)&v122);
  if (v126 != 1)
  {
LABEL_43:
    LODWORD(v20) = (_DWORD)v122;
    v19 = (unint64_t)v122 >> 48;
    a3 = (unsigned __int16)v123;
    v31 = (unint64_t)v122 >> 32;
    v32 = WORD1(v123);
    v33 = WORD2(v123);
    v34 = HIWORD(v123);
    v35 = v124;
    i = v125;
    v118[0] = v122;
    v118[1] = v123;
    v119 = v124;
    v120 = v125;
    isNegative_getter = _So9NSDecimala__isNegative_getter(v118);
    LODWORD(v118[0]) = v20;
    WORD2(v118[0]) = v31;
    HIWORD(v118[0]) = v19;
    LOWORD(v118[1]) = a3;
    WORD1(v118[1]) = v32;
    WORD2(v118[1]) = v33;
    HIWORD(v118[1]) = v34;
    v119 = v35;
    v120 = i;
    v36 = _So9NSDecimala__length_getter(v118);
    v37 = v34;
    a4 = v33;
    v13 = v32;
    v7 = (const char *)a3;
    LOWORD(a3) = v31;
    if (!v36 && isNegative_getter)
      goto LABEL_186;
    LODWORD(v118[0]) = v20;
    WORD2(v118[0]) = v31;
    HIWORD(v118[0]) = v19;
    LOWORD(v118[1]) = (_WORD)v7;
    WORD1(v118[1]) = v13;
    WORD2(v118[1]) = a4;
    v116 = v37;
    HIWORD(v118[1]) = v37;
    v115 = v35;
    v119 = v35;
    v120 = i;
    v38 = _So9NSDecimala__length_getter(v118);
    if (!v38)
      goto LABEL_260;
    v39 = 0;
    v40 = v38 - 1;
    if (v38 != 1)
    {
      v41 = v115;
      v42 = v116;
      while (2)
      {
        v43 = v19;
        switch(v40)
        {
          case 1:
            goto LABEL_55;
          case 2:
            v43 = (unint64_t)v7;
            goto LABEL_55;
          case 3:
            v43 = v13;
            goto LABEL_55;
          case 4:
            v43 = a4;
            goto LABEL_55;
          case 5:
            v43 = v116;
            goto LABEL_55;
          case 6:
            v43 = v115;
            goto LABEL_55;
          case 7:
            v43 = i;
LABEL_55:
            if (HIWORD(v39))
              goto LABEL_186;
            v39 = v43 | (v39 << 16);
            if (--v40)
              continue;
            if (HIWORD(v39))
              goto LABEL_186;
            goto LABEL_70;
          default:
            goto LABEL_286;
        }
      }
    }
    v41 = v115;
    v42 = v116;
LABEL_70:
    v47 = i;
    for (i = (unsigned __int16)v31 | (v39 << 16); ; i = 0)
    {
      LODWORD(v118[0]) = v20;
      WORD2(v118[0]) = a3;
      HIWORD(v118[0]) = v19;
      LOWORD(v118[1]) = (_WORD)v7;
      WORD1(v118[1]) = v13;
      WORD2(v118[1]) = a4;
      HIWORD(v118[1]) = v42;
      v119 = v41;
      v120 = v47;
      v48 = v41;
      if ((_So9NSDecimala__exponent_getter((char *)v118) & 0x80000000) == 0)
        break;
      LODWORD(v118[0]) = v20;
      WORD2(v118[0]) = a3;
      HIWORD(v118[0]) = v19;
      LOWORD(v118[1]) = (_WORD)v7;
      WORD1(v118[1]) = v13;
      WORD2(v118[1]) = a4;
      HIWORD(v118[1]) = v116;
      v119 = v48;
      v120 = v47;
      v86 = _So9NSDecimala__exponent_getter((char *)v118);
      if (v86 > 0)
        goto LABEL_271;
      if (!v86)
        goto LABEL_178;
      v87 = -v86 & ~(-v86 >> 31);
      v88 = ~v86;
      while (v87 > v88)
      {
        i /= 0xAuLL;
        if (__CFADD__(v86++, 1))
          goto LABEL_178;
      }
LABEL_254:
      __break(1u);
LABEL_255:
      __break(1u);
LABEL_256:
      __break(1u);
LABEL_257:
      __break(1u);
LABEL_258:
      __break(1u);
LABEL_259:
      __break(1u);
LABEL_260:
      v47 = i;
      v41 = v115;
      v42 = v116;
    }
    LODWORD(v118[0]) = v20;
    WORD2(v118[0]) = a3;
    HIWORD(v118[0]) = v19;
    LOWORD(v118[1]) = (_WORD)v7;
    WORD1(v118[1]) = v13;
    WORD2(v118[1]) = a4;
    HIWORD(v118[1]) = v116;
    v119 = v48;
    v120 = v47;
    v49 = _So9NSDecimala__exponent_getter((char *)v118);
    if ((v49 & 0x80000000) == 0)
    {
      if (v49)
      {
        if (!is_mul_ok(i, 0xAuLL))
          goto LABEL_186;
        i *= 10;
        v50 = v49 - 1;
        if (v49 != 1)
        {
          if (!is_mul_ok(i, 0xAuLL))
            goto LABEL_186;
          i *= 10;
          while (--v50)
          {
            v51 = (i * (unsigned __int128)0xAuLL) >> 64;
            i *= 10;
            if (v51)
              goto LABEL_186;
          }
        }
      }
LABEL_178:
      if (!isNegative_getter)
        goto LABEL_185;
      if (!(i >> 15))
        return -(int)i;
LABEL_186:
      v92 = static String._fromUTF8Repairing(_:)();
      i = v93;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(_QWORD *)v90 = v92;
      *(_QWORD *)(v90 + 8) = i;
      *(_OWORD *)(v90 + 16) = 0u;
      *(_OWORD *)(v90 + 32) = 0u;
      v91 = 11;
      goto LABEL_187;
    }
LABEL_269:
    __break(1u);
    goto LABEL_270;
  }
  v16 = (const char *)specialized BufferView.suffix(from:)(a6, (uint64_t)a2, a3);
  v18 = (unsigned __int8 *)v16;
  v19 = v17;
  v20 = (unint64_t)&v16[v17];
  if ((v13 & 1) == 0)
  {
    if (v17 <= 0)
    {
      v46 = (unsigned __int8 *)v16;
      goto LABEL_95;
    }
    v44 = 0;
    v45 = v17;
    while (1)
    {
      if (v44 < 0 || (v30 = v45 < 1, --v45, v30))
      {
        __break(1u);
LABEL_248:
        __break(1u);
LABEL_249:
        __break(1u);
LABEL_250:
        __break(1u);
LABEL_251:
        __break(1u);
LABEL_252:
        __break(1u);
LABEL_253:
        __break(1u);
        goto LABEL_254;
      }
      if (v16[v44] - 58 < 0xFFFFFFF6)
        break;
      v46 = (unsigned __int8 *)&v16[++v44];
      if ((unint64_t)&v16[v44] >= v20)
        goto LABEL_95;
    }
LABEL_94:
    v46 = &v18[v44];
LABEL_95:
    if ((unint64_t)v46 < v20)
    {
      v55 = 0;
      v56 = (unsigned __int8 *)(v46 - v18);
      v57 = 1;
      v58 = 1;
      while (1)
      {
        v59 = 0;
        v60 = &v18[v19] - v46;
        while (1)
        {
          if (v46 - v18 + v59 < 0 || (v30 = v60 < 1, --v60, v30))
          {
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            v77 = (unint64_t)&v46[v59];
            if ((unint64_t)&v46[v59] >= a4)
            {
              v78 = a4 + i;
              if (a4 + i >= v77)
              {
                if (v78 >= (unint64_t)&v46[v59 + 1])
                  v78 = (unint64_t)&v46[v59 + 1];
                if (v78 > a4)
                {
                  v79 = i + a4;
                  i = 1;
                  v80 = a4;
                  while (1)
                  {
                    v81 = 0;
                    v82 = 0;
                    v83 = v79 - v80;
                    while (1)
                    {
                      if ((uint64_t)(v80 - a4 + v82) < 0 || (uint64_t)(v83 + v81) < 1)
                        goto LABEL_255;
                      v84 = *(unsigned __int8 *)(v80 + v82);
                      if (v84 == 10)
                      {
                        v70 = __OFADD__(i++, 1);
                        if (!v70)
                        {
                          v80 += v82 + 1;
                          goto LABEL_169;
                        }
                        goto LABEL_275;
                      }
                      if (v84 == 13)
                        break;
                      a3 = v82 + 1;
                      if (__OFADD__(v82, 1))
                        goto LABEL_256;
                      ++v82;
                      --v81;
                      if (v80 + v82 >= v78)
                        goto LABEL_216;
                    }
                    v85 = v80 + v82;
                    if (v77 < v80 + v82 + 1)
                      goto LABEL_167;
                    if (((v80 - a4 + v82 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v82 + v83) < 1)
                      goto LABEL_281;
                    if (*(_BYTE *)(v85 + 1) == 10)
                      v85 = v80 + v82 + 1;
LABEL_167:
                    v70 = __OFADD__(i++, 1);
                    if (v70)
                      goto LABEL_276;
                    v80 = v85 + 1;
LABEL_169:
                    if (v80 >= v78)
                    {
                      a3 = 0;
                      goto LABEL_216;
                    }
                  }
                }
                a3 = 0;
                i = 1;
LABEL_216:
                v74 = &v46[v59 - a4];
                goto LABEL_244;
              }
            }
LABEL_270:
            __break(1u);
LABEL_271:
            __break(1u);
LABEL_272:
            __break(1u);
LABEL_273:
            __break(1u);
LABEL_274:
            __break(1u);
LABEL_275:
            __break(1u);
LABEL_276:
            __break(1u);
LABEL_277:
            __break(1u);
LABEL_278:
            __break(1u);
LABEL_279:
            __break(1u);
            goto LABEL_280;
          }
          LODWORD(v7) = v46[v59];
          if (((_DWORD)v7 - 58) < 0xFFFFFFF6)
            break;
          if (__OFADD__(&v56[v59], 1))
            goto LABEL_144;
          if ((unint64_t)&v46[++v59] >= v20)
            goto LABEL_145;
        }
        v61 = (uint64_t)&v56[v59];
        switch(v46[v59])
        {
          case '+':
          case '-':
            if (v61 != 0 || (v55 & 1) == 0)
              goto LABEL_140;
            v56 = 0;
            v55 = 0;
            v57 = 0;
            v58 = 0;
            v46 += v59 + 1;
            if ((unint64_t)v46 >= v20)
              goto LABEL_248;
            continue;
          case ',':
          case '/':
          case '0':
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
          case ':':
          case ';':
          case '<':
          case '=':
          case '>':
          case '?':
          case '@':
          case 'A':
          case 'B':
          case 'C':
          case 'D':
            goto LABEL_140;
          case '.':
            if (v61 < 1 || (v58 & 1) == 0)
            {
              v95 = (unint64_t)&v46[v59];
              if ((unint64_t)&v46[v59] < a4)
                goto LABEL_274;
              v96 = a4 + i;
              if (a4 + i < v95)
                goto LABEL_274;
              if (v96 >= (unint64_t)&v46[v59 + 1])
                v96 = (unint64_t)&v46[v59 + 1];
              if (v96 <= a4)
              {
                a3 = 0;
                i = 1;
              }
              else
              {
                v97 = i + a4;
                i = 1;
                v98 = a4;
                do
                {
                  v99 = 0;
                  v100 = 0;
                  v101 = v97 - v98;
                  while (1)
                  {
                    if ((uint64_t)(v98 - a4 + v100) < 0 || (uint64_t)(v101 + v99) < 1)
                      goto LABEL_257;
                    v102 = *(unsigned __int8 *)(v98 + v100);
                    if (v102 == 10)
                      break;
                    if (v102 == 13)
                    {
                      v103 = v98 + v100;
                      if (v95 < v98 + v100 + 1)
                        goto LABEL_209;
                      if (((v98 - a4 + v100 + 1) & 0x8000000000000000) == 0 && (uint64_t)(~v100 + v101) >= 1)
                      {
                        if (*(_BYTE *)(v103 + 1) == 10)
                          v103 = v98 + v100 + 1;
LABEL_209:
                        v70 = __OFADD__(i++, 1);
                        if (!v70)
                        {
                          v98 = v103 + 1;
                          goto LABEL_213;
                        }
LABEL_280:
                        __break(1u);
LABEL_281:
                        __break(1u);
LABEL_282:
                        __break(1u);
LABEL_283:
                        __break(1u);
                      }
                      __break(1u);
                    }
                    a3 = v100 + 1;
                    if (__OFADD__(v100, 1))
                      goto LABEL_258;
                    ++v100;
                    --v99;
                    if (v98 + v100 >= v96)
                      goto LABEL_243;
                  }
                  v70 = __OFADD__(i++, 1);
                  if (v70)
                    goto LABEL_279;
                  v98 += v100 + 1;
LABEL_213:
                  ;
                }
                while (v98 < v96);
                a3 = 0;
              }
LABEL_243:
              v74 = &v46[v59 - a4];
              LODWORD(v7) = 46;
LABEL_244:
              lazy protocol witness table accessor for type JSONError and conformance JSONError();
              swift_allocError();
              *(_OWORD *)v90 = xmmword_18206BE50;
              *(_QWORD *)(v90 + 16) = v7;
              *(_QWORD *)(v90 + 24) = i;
              *(_QWORD *)(v90 + 32) = a3;
              *(_QWORD *)(v90 + 40) = v74;
              v91 = 1;
LABEL_187:
              *(_BYTE *)(v90 + 48) = v91;
              swift_willThrow();
              return i;
            }
            v56 = 0;
            v55 = 0;
            v58 = 0;
            v46 += v59 + 1;
            v57 = 1;
            if ((unint64_t)v46 >= v20)
            {
              __break(1u);
              goto LABEL_115;
            }
            break;
          case 'E':
            goto LABEL_109;
          default:
            if ((_DWORD)v7 != 101)
            {
LABEL_140:
              i = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)&v46[v59], a4, i);
              a3 = v72;
              v74 = v73;
              goto LABEL_244;
            }
LABEL_109:
            if (v61 < 1 || (v57 & 1) == 0)
              goto LABEL_146;
            v56 = 0;
            v57 = 0;
            v58 = 0;
            v46 += v59 + 1;
            v55 = 1;
            if ((unint64_t)v46 >= v20)
              goto LABEL_249;
            continue;
        }
      }
    }
    goto LABEL_264;
  }
  if (v17 < 1)
    goto LABEL_259;
  v21 = *(unsigned __int8 *)v16;
  if (v21 == 45 || (v7 = v16, v21 == 43))
    v7 = v16 + 1;
  if (v20 < (unint64_t)v7)
  {
    __break(1u);
    goto LABEL_262;
  }
  v13 = v7 - v16;
  if (v7 - v16 < 0)
  {
LABEL_262:
    __break(1u);
    goto LABEL_263;
  }
  if ((uint64_t)(v20 - (_QWORD)v7) < 0)
  {
LABEL_263:
    __break(1u);
LABEL_264:
    __break(1u);
LABEL_265:
    __break(1u);
LABEL_266:
    __break(1u);
    goto LABEL_267;
  }
  if ((uint64_t)(v20 - (_QWORD)v7) >= 2)
    v22 = 2;
  else
    v22 = v20 - (_QWORD)v7;
  if (!_stringshims_strncasecmp_l(v7, "0x", v22, 0))
  {
    v46 = (unsigned __int8 *)(v7 + 2);
    v44 = v20 - (_QWORD)(v7 + 2);
    if (v44 >= 1 && (unint64_t)v46 < v20)
    {
      v44 = v46 - v18;
      if (((v46 - v18) & 0x8000000000000000) == 0)
      {
        a3 = (uint64_t)&v7[-a4 + 2];
        v44 = &v18[v19] - (unsigned __int8 *)v7 - 3;
        v52 = v13 + 3;
        while (1)
        {
          v53 = v52;
          v19 = *v46;
          if ((v19 - 58) <= 0xF5u
            && (*v46 - 65 > 0x25 || ((1 << (v19 - 65)) & 0x3F0000003FLL) == 0))
          {
            break;
          }
          v30 = v44-- < 1;
          if (!v30 && (unint64_t)++v46 < v20)
          {
            ++a3;
            ++v52;
            if ((v53 & 0x8000000000000000) == 0)
              continue;
          }
          goto LABEL_93;
        }
LABEL_115:
        if ((unint64_t)v46 >= a4)
        {
          v62 = a4 + i;
          if (a4 + i >= (unint64_t)v46)
          {
            if (v62 >= (unint64_t)(v46 + 1))
              v62 = (unint64_t)(v46 + 1);
            if (v62 > a4)
            {
              v63 = -(uint64_t)a4;
              v64 = i + a4;
              i = 1;
              while (1)
              {
                v65 = 0;
                v66 = 0;
                v67 = v64 - a4;
                while (1)
                {
                  if ((uint64_t)(v63 + a4 + v66) < 0 || (uint64_t)(v67 + v65) < 1)
                    goto LABEL_250;
                  v68 = *(unsigned __int8 *)(a4 + v66);
                  if (v68 == 10)
                  {
                    v70 = __OFADD__(i++, 1);
                    if (!v70)
                    {
                      a4 += v66 + 1;
                      goto LABEL_138;
                    }
                    goto LABEL_272;
                  }
                  if (v68 == 13)
                    break;
                  v69 = v66 + 1;
                  if (__OFADD__(v66, 1))
                    goto LABEL_251;
                  ++v66;
                  --v65;
                  if (a4 + v66 >= v62)
                  {
                    v13 = 0xED00007265626D75;
                    v20 = 0x6E20786568206E69;
                    goto LABEL_181;
                  }
                }
                v71 = a4 + v66;
                if ((unint64_t)v46 < a4 + v66 + 1)
                  goto LABEL_136;
                if (((v63 + a4 + v66 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v66 + v67) < 1)
                  goto LABEL_277;
                if (*(_BYTE *)(v71 + 1) == 10)
                  v71 = a4 + v66 + 1;
LABEL_136:
                v70 = __OFADD__(i++, 1);
                if (v70)
                  goto LABEL_273;
                a4 = v71 + 1;
LABEL_138:
                v13 = 0xED00007265626D75;
                v20 = 0x6E20786568206E69;
                if (a4 >= v62)
                {
                  v69 = 0;
                  goto LABEL_181;
                }
              }
            }
            v69 = 0;
            v13 = 0xED00007265626D75;
            v20 = 0x6E20786568206E69;
            i = 1;
LABEL_181:
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_QWORD *)v90 = v20;
            *(_QWORD *)(v90 + 8) = v13;
            *(_QWORD *)(v90 + 16) = v19;
            *(_QWORD *)(v90 + 24) = i;
            *(_QWORD *)(v90 + 32) = v69;
            *(_QWORD *)(v90 + 40) = a3;
            v91 = 1;
            goto LABEL_187;
          }
        }
LABEL_268:
        __break(1u);
        goto LABEL_269;
      }
    }
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  if ((unint64_t)v7 >= v20)
  {
LABEL_267:
    __break(1u);
    goto LABEL_268;
  }
  v23 = 0;
  v24 = 0;
  v25 = (const char *)&v18[v19];
  v26 = 1;
LABEL_24:
  v28 = 0;
  v29 = v25 - v7;
  while (v7 - (const char *)v18 + v28 >= 0)
  {
    v30 = v29-- < 1;
    if (v30)
      break;
    LODWORD(v19) = v7[v28];
    if ((v19 - 58) <= 0xF5u)
    {
      switch(v7[v28])
      {
        case '+':
        case '-':
          if (v28 != 0 || (v23 & 1) == 0)
            goto LABEL_141;
          v23 = 0;
          v26 = 0;
          v7 += v28 + 1;
          v24 = 3;
          if ((unint64_t)v7 >= v20)
            goto LABEL_252;
          goto LABEL_24;
        case ',':
        case '/':
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        case ':':
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case '@':
        case 'A':
        case 'B':
        case 'C':
        case 'D':
          goto LABEL_141;
        case '.':
          if ((v26 & 1) == 0)
          {
            v104 = (unint64_t)&v7[v28];
            if ((unint64_t)&v7[v28] < a4)
              goto LABEL_278;
            v105 = a4 + i;
            if (a4 + i < v104)
              goto LABEL_278;
            if (v105 >= (unint64_t)&v7[v28 + 1])
              v105 = (unint64_t)&v7[v28 + 1];
            if (v105 > a4)
            {
              v106 = i + a4;
              i = 1;
              v107 = a4;
              while (1)
              {
                v108 = 0;
                v109 = 0;
                v110 = v106 - v107;
                while (1)
                {
                  if ((uint64_t)(v107 - a4 + v109) < 0 || (uint64_t)(v110 + v108) < 1)
                    goto LABEL_265;
                  v111 = *(unsigned __int8 *)(v107 + v109);
                  if (v111 == 10)
                  {
                    v70 = __OFADD__(i++, 1);
                    if (!v70)
                    {
                      v107 += v109 + 1;
                      goto LABEL_240;
                    }
                    goto LABEL_282;
                  }
                  if (v111 == 13)
                    break;
                  v69 = v109 + 1;
                  if (__OFADD__(v109, 1))
                    goto LABEL_266;
                  ++v109;
                  --v108;
                  if (v107 + v109 >= v105)
                    goto LABEL_246;
                }
                v112 = v107 + v109;
                if (v104 >= v107 + v109 + 1)
                {
                  if (((v107 - a4 + v109 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v109 + v110) < 1)
                  {
                    __break(1u);
LABEL_286:
                    v118[0] = 0;
                    v118[1] = (char *)0xE000000000000000;
                    _StringGuts.grow(_:)(30);
                    swift_bridgeObjectRelease();
                    strcpy((char *)v118, "Invalid index ");
                    HIBYTE(v118[1]) = -18;
                    v113._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                    String.append(_:)(v113);
                    swift_bridgeObjectRelease();
                    v114._countAndFlagsBits = 0x616D5F20726F6620;
                    v114._object = (void *)0xEE0061737369746ELL;
                    String.append(_:)(v114);
                    _assertionFailure(_:_:file:line:flags:)();
                    __break(1u);
                    JUMPOUT(0x181E3FDF4);
                  }
                  if (*(_BYTE *)(v112 + 1) == 10)
                    v112 = v107 + v109 + 1;
                }
                v70 = __OFADD__(i++, 1);
                if (v70)
                  goto LABEL_283;
                v107 = v112 + 1;
LABEL_240:
                if (v107 >= v105)
                {
                  v69 = 0;
                  goto LABEL_246;
                }
              }
            }
            v69 = 0;
            i = 1;
LABEL_246:
            a3 = (uint64_t)&v7[v28 - a4];
            LOBYTE(v19) = 46;
LABEL_142:
            v13 = 0xE900000000000072;
            v20 = 0x65626D756E206E69;
            goto LABEL_181;
          }
          v23 = 0;
          v26 = 0;
          v7 += v28 + 1;
          v24 = 1;
          if ((unint64_t)v7 >= v20)
          {
            __break(1u);
            goto LABEL_43;
          }
          break;
        case 'E':
          goto LABEL_36;
        default:
          if ((_DWORD)v19 != 101)
            goto LABEL_141;
LABEL_36:
          if (v24 != 1 && (v24 || v28 < 1))
          {
LABEL_141:
            i = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)&v7[v28], a4, i);
            v69 = v75;
            a3 = v76;
            goto LABEL_142;
          }
          v26 = 0;
          v7 += v28 + 1;
          v24 = 2;
          v23 = 1;
          if ((unint64_t)v7 >= v20)
            goto LABEL_253;
          goto LABEL_24;
      }
      goto LABEL_24;
    }
    if (__OFADD__(v28, 1))
      goto LABEL_183;
    if ((unint64_t)&v7[++v28] >= v20)
      goto LABEL_184;
  }
  __break(1u);
LABEL_183:
  __break(1u);
LABEL_184:
  __break(1u);
LABEL_185:
  if (i >> 15)
    goto LABEL_186;
  return i;
}

{
  int v6;
  const char *v7;
  unint64_t v13;
  double v14;
  BOOL v15;
  const char *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  size_t v22;
  char v23;
  char v24;
  const char *v25;
  char v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  unint64_t v37;
  int v38;
  unint64_t v39;
  int v40;
  __int16 v41;
  __int16 v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  __int16 v47;
  __int16 v48;
  int v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char v55;
  unsigned __int8 *v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int8 *v73;
  unsigned __int8 *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  int v84;
  uint64_t v85;
  int v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v90;
  char v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  int v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  int v111;
  uint64_t v112;
  Swift::String v113;
  Swift::String v114;
  unint64_t v115;
  unint64_t v116;
  int isNegative_getter;
  char *v118[2];
  __int16 v119;
  __int16 v120;
  _BYTE v121[40];
  char *v122;
  char *v123;
  unsigned __int16 v124;
  unsigned __int16 v125;
  char v126;
  uint64_t v127;

  LODWORD(v7) = v6;
  LOWORD(v13) = a1;
  v127 = *MEMORY[0x1E0C80C00];
  v118[0] = 0;
  v14 = _stringshims_strtod_l(a2, v118, 0);
  if (v118[0])
    v15 = &a2[a3] == v118[0];
  else
    v15 = 0;
  if (v15)
  {
    v27 = v14;
    if (!specialized static FixedWidthInteger._convert<A>(from:)((uint64_t)v118, v14) || (BYTE4(v118[0]) & 1) != 0)
      goto LABEL_186;
    if (fabs(v27) < 9.00719925e15)
      return LODWORD(v118[0]);
  }
  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)((uint64_t)a2, a3, 0x2EuLL, 0xE100000000000000, 1, (uint64_t)v121);
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v121, (uint64_t)&v122);
  if (v126 != 1)
  {
LABEL_43:
    LODWORD(v20) = (_DWORD)v122;
    v19 = (unint64_t)v122 >> 48;
    a3 = (unsigned __int16)v123;
    v31 = (unint64_t)v122 >> 32;
    v32 = WORD1(v123);
    v33 = WORD2(v123);
    v34 = HIWORD(v123);
    v35 = v124;
    i = v125;
    v118[0] = v122;
    v118[1] = v123;
    v119 = v124;
    v120 = v125;
    isNegative_getter = _So9NSDecimala__isNegative_getter(v118);
    LODWORD(v118[0]) = v20;
    WORD2(v118[0]) = v31;
    HIWORD(v118[0]) = v19;
    LOWORD(v118[1]) = a3;
    WORD1(v118[1]) = v32;
    WORD2(v118[1]) = v33;
    HIWORD(v118[1]) = v34;
    v119 = v35;
    v120 = i;
    v36 = _So9NSDecimala__length_getter(v118);
    v37 = v34;
    a4 = v33;
    v13 = v32;
    v7 = (const char *)a3;
    LOWORD(a3) = v31;
    if (!v36 && isNegative_getter)
      goto LABEL_186;
    LODWORD(v118[0]) = v20;
    WORD2(v118[0]) = v31;
    HIWORD(v118[0]) = v19;
    LOWORD(v118[1]) = (_WORD)v7;
    WORD1(v118[1]) = v13;
    WORD2(v118[1]) = a4;
    v116 = v37;
    HIWORD(v118[1]) = v37;
    v115 = v35;
    v119 = v35;
    v120 = i;
    v38 = _So9NSDecimala__length_getter(v118);
    if (!v38)
      goto LABEL_260;
    v39 = 0;
    v40 = v38 - 1;
    if (v38 != 1)
    {
      v41 = v115;
      v42 = v116;
      while (2)
      {
        v43 = v19;
        switch(v40)
        {
          case 1:
            goto LABEL_55;
          case 2:
            v43 = (unint64_t)v7;
            goto LABEL_55;
          case 3:
            v43 = v13;
            goto LABEL_55;
          case 4:
            v43 = a4;
            goto LABEL_55;
          case 5:
            v43 = v116;
            goto LABEL_55;
          case 6:
            v43 = v115;
            goto LABEL_55;
          case 7:
            v43 = i;
LABEL_55:
            if (HIWORD(v39))
              goto LABEL_186;
            v39 = v43 | (v39 << 16);
            if (--v40)
              continue;
            if (HIWORD(v39))
              goto LABEL_186;
            goto LABEL_70;
          default:
            goto LABEL_286;
        }
      }
    }
    v41 = v115;
    v42 = v116;
LABEL_70:
    v47 = i;
    for (i = (unsigned __int16)v31 | (v39 << 16); ; i = 0)
    {
      LODWORD(v118[0]) = v20;
      WORD2(v118[0]) = a3;
      HIWORD(v118[0]) = v19;
      LOWORD(v118[1]) = (_WORD)v7;
      WORD1(v118[1]) = v13;
      WORD2(v118[1]) = a4;
      HIWORD(v118[1]) = v42;
      v119 = v41;
      v120 = v47;
      v48 = v41;
      if ((_So9NSDecimala__exponent_getter((char *)v118) & 0x80000000) == 0)
        break;
      LODWORD(v118[0]) = v20;
      WORD2(v118[0]) = a3;
      HIWORD(v118[0]) = v19;
      LOWORD(v118[1]) = (_WORD)v7;
      WORD1(v118[1]) = v13;
      WORD2(v118[1]) = a4;
      HIWORD(v118[1]) = v116;
      v119 = v48;
      v120 = v47;
      v86 = _So9NSDecimala__exponent_getter((char *)v118);
      if (v86 > 0)
        goto LABEL_271;
      if (!v86)
        goto LABEL_178;
      v87 = -v86 & ~(-v86 >> 31);
      v88 = ~v86;
      while (v87 > v88)
      {
        i /= 0xAuLL;
        if (__CFADD__(v86++, 1))
          goto LABEL_178;
      }
LABEL_254:
      __break(1u);
LABEL_255:
      __break(1u);
LABEL_256:
      __break(1u);
LABEL_257:
      __break(1u);
LABEL_258:
      __break(1u);
LABEL_259:
      __break(1u);
LABEL_260:
      v47 = i;
      v41 = v115;
      v42 = v116;
    }
    LODWORD(v118[0]) = v20;
    WORD2(v118[0]) = a3;
    HIWORD(v118[0]) = v19;
    LOWORD(v118[1]) = (_WORD)v7;
    WORD1(v118[1]) = v13;
    WORD2(v118[1]) = a4;
    HIWORD(v118[1]) = v116;
    v119 = v48;
    v120 = v47;
    v49 = _So9NSDecimala__exponent_getter((char *)v118);
    if ((v49 & 0x80000000) == 0)
    {
      if (v49)
      {
        if (!is_mul_ok(i, 0xAuLL))
          goto LABEL_186;
        i *= 10;
        v50 = v49 - 1;
        if (v49 != 1)
        {
          if (!is_mul_ok(i, 0xAuLL))
            goto LABEL_186;
          i *= 10;
          while (--v50)
          {
            v51 = (i * (unsigned __int128)0xAuLL) >> 64;
            i *= 10;
            if (v51)
              goto LABEL_186;
          }
        }
      }
LABEL_178:
      if (!isNegative_getter)
        goto LABEL_185;
      if (!(i >> 31))
        return -(int)i;
LABEL_186:
      v92 = static String._fromUTF8Repairing(_:)();
      i = v93;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(_QWORD *)v90 = v92;
      *(_QWORD *)(v90 + 8) = i;
      *(_OWORD *)(v90 + 16) = 0u;
      *(_OWORD *)(v90 + 32) = 0u;
      v91 = 11;
      goto LABEL_187;
    }
LABEL_269:
    __break(1u);
    goto LABEL_270;
  }
  v16 = (const char *)specialized BufferView.suffix(from:)(a6, (uint64_t)a2, a3);
  v18 = (unsigned __int8 *)v16;
  v19 = v17;
  v20 = (unint64_t)&v16[v17];
  if ((v13 & 1) == 0)
  {
    if (v17 <= 0)
    {
      v46 = (unsigned __int8 *)v16;
      goto LABEL_95;
    }
    v44 = 0;
    v45 = v17;
    while (1)
    {
      if (v44 < 0 || (v30 = v45 < 1, --v45, v30))
      {
        __break(1u);
LABEL_248:
        __break(1u);
LABEL_249:
        __break(1u);
LABEL_250:
        __break(1u);
LABEL_251:
        __break(1u);
LABEL_252:
        __break(1u);
LABEL_253:
        __break(1u);
        goto LABEL_254;
      }
      if (v16[v44] - 58 < 0xFFFFFFF6)
        break;
      v46 = (unsigned __int8 *)&v16[++v44];
      if ((unint64_t)&v16[v44] >= v20)
        goto LABEL_95;
    }
LABEL_94:
    v46 = &v18[v44];
LABEL_95:
    if ((unint64_t)v46 < v20)
    {
      v55 = 0;
      v56 = (unsigned __int8 *)(v46 - v18);
      v57 = 1;
      v58 = 1;
      while (1)
      {
        v59 = 0;
        v60 = &v18[v19] - v46;
        while (1)
        {
          if (v46 - v18 + v59 < 0 || (v30 = v60 < 1, --v60, v30))
          {
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            v77 = (unint64_t)&v46[v59];
            if ((unint64_t)&v46[v59] >= a4)
            {
              v78 = a4 + i;
              if (a4 + i >= v77)
              {
                if (v78 >= (unint64_t)&v46[v59 + 1])
                  v78 = (unint64_t)&v46[v59 + 1];
                if (v78 > a4)
                {
                  v79 = i + a4;
                  i = 1;
                  v80 = a4;
                  while (1)
                  {
                    v81 = 0;
                    v82 = 0;
                    v83 = v79 - v80;
                    while (1)
                    {
                      if ((uint64_t)(v80 - a4 + v82) < 0 || (uint64_t)(v83 + v81) < 1)
                        goto LABEL_255;
                      v84 = *(unsigned __int8 *)(v80 + v82);
                      if (v84 == 10)
                      {
                        v70 = __OFADD__(i++, 1);
                        if (!v70)
                        {
                          v80 += v82 + 1;
                          goto LABEL_169;
                        }
                        goto LABEL_275;
                      }
                      if (v84 == 13)
                        break;
                      a3 = v82 + 1;
                      if (__OFADD__(v82, 1))
                        goto LABEL_256;
                      ++v82;
                      --v81;
                      if (v80 + v82 >= v78)
                        goto LABEL_216;
                    }
                    v85 = v80 + v82;
                    if (v77 < v80 + v82 + 1)
                      goto LABEL_167;
                    if (((v80 - a4 + v82 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v82 + v83) < 1)
                      goto LABEL_281;
                    if (*(_BYTE *)(v85 + 1) == 10)
                      v85 = v80 + v82 + 1;
LABEL_167:
                    v70 = __OFADD__(i++, 1);
                    if (v70)
                      goto LABEL_276;
                    v80 = v85 + 1;
LABEL_169:
                    if (v80 >= v78)
                    {
                      a3 = 0;
                      goto LABEL_216;
                    }
                  }
                }
                a3 = 0;
                i = 1;
LABEL_216:
                v74 = &v46[v59 - a4];
                goto LABEL_244;
              }
            }
LABEL_270:
            __break(1u);
LABEL_271:
            __break(1u);
LABEL_272:
            __break(1u);
LABEL_273:
            __break(1u);
LABEL_274:
            __break(1u);
LABEL_275:
            __break(1u);
LABEL_276:
            __break(1u);
LABEL_277:
            __break(1u);
LABEL_278:
            __break(1u);
LABEL_279:
            __break(1u);
            goto LABEL_280;
          }
          LODWORD(v7) = v46[v59];
          if (((_DWORD)v7 - 58) < 0xFFFFFFF6)
            break;
          if (__OFADD__(&v56[v59], 1))
            goto LABEL_144;
          if ((unint64_t)&v46[++v59] >= v20)
            goto LABEL_145;
        }
        v61 = (uint64_t)&v56[v59];
        switch(v46[v59])
        {
          case '+':
          case '-':
            if (v61 != 0 || (v55 & 1) == 0)
              goto LABEL_140;
            v56 = 0;
            v55 = 0;
            v57 = 0;
            v58 = 0;
            v46 += v59 + 1;
            if ((unint64_t)v46 >= v20)
              goto LABEL_248;
            continue;
          case ',':
          case '/':
          case '0':
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
          case ':':
          case ';':
          case '<':
          case '=':
          case '>':
          case '?':
          case '@':
          case 'A':
          case 'B':
          case 'C':
          case 'D':
            goto LABEL_140;
          case '.':
            if (v61 < 1 || (v58 & 1) == 0)
            {
              v95 = (unint64_t)&v46[v59];
              if ((unint64_t)&v46[v59] < a4)
                goto LABEL_274;
              v96 = a4 + i;
              if (a4 + i < v95)
                goto LABEL_274;
              if (v96 >= (unint64_t)&v46[v59 + 1])
                v96 = (unint64_t)&v46[v59 + 1];
              if (v96 <= a4)
              {
                a3 = 0;
                i = 1;
              }
              else
              {
                v97 = i + a4;
                i = 1;
                v98 = a4;
                do
                {
                  v99 = 0;
                  v100 = 0;
                  v101 = v97 - v98;
                  while (1)
                  {
                    if ((uint64_t)(v98 - a4 + v100) < 0 || (uint64_t)(v101 + v99) < 1)
                      goto LABEL_257;
                    v102 = *(unsigned __int8 *)(v98 + v100);
                    if (v102 == 10)
                      break;
                    if (v102 == 13)
                    {
                      v103 = v98 + v100;
                      if (v95 < v98 + v100 + 1)
                        goto LABEL_209;
                      if (((v98 - a4 + v100 + 1) & 0x8000000000000000) == 0 && (uint64_t)(~v100 + v101) >= 1)
                      {
                        if (*(_BYTE *)(v103 + 1) == 10)
                          v103 = v98 + v100 + 1;
LABEL_209:
                        v70 = __OFADD__(i++, 1);
                        if (!v70)
                        {
                          v98 = v103 + 1;
                          goto LABEL_213;
                        }
LABEL_280:
                        __break(1u);
LABEL_281:
                        __break(1u);
LABEL_282:
                        __break(1u);
LABEL_283:
                        __break(1u);
                      }
                      __break(1u);
                    }
                    a3 = v100 + 1;
                    if (__OFADD__(v100, 1))
                      goto LABEL_258;
                    ++v100;
                    --v99;
                    if (v98 + v100 >= v96)
                      goto LABEL_243;
                  }
                  v70 = __OFADD__(i++, 1);
                  if (v70)
                    goto LABEL_279;
                  v98 += v100 + 1;
LABEL_213:
                  ;
                }
                while (v98 < v96);
                a3 = 0;
              }
LABEL_243:
              v74 = &v46[v59 - a4];
              LODWORD(v7) = 46;
LABEL_244:
              lazy protocol witness table accessor for type JSONError and conformance JSONError();
              swift_allocError();
              *(_OWORD *)v90 = xmmword_18206BE50;
              *(_QWORD *)(v90 + 16) = v7;
              *(_QWORD *)(v90 + 24) = i;
              *(_QWORD *)(v90 + 32) = a3;
              *(_QWORD *)(v90 + 40) = v74;
              v91 = 1;
LABEL_187:
              *(_BYTE *)(v90 + 48) = v91;
              swift_willThrow();
              return i;
            }
            v56 = 0;
            v55 = 0;
            v58 = 0;
            v46 += v59 + 1;
            v57 = 1;
            if ((unint64_t)v46 >= v20)
            {
              __break(1u);
              goto LABEL_115;
            }
            break;
          case 'E':
            goto LABEL_109;
          default:
            if ((_DWORD)v7 != 101)
            {
LABEL_140:
              i = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)&v46[v59], a4, i);
              a3 = v72;
              v74 = v73;
              goto LABEL_244;
            }
LABEL_109:
            if (v61 < 1 || (v57 & 1) == 0)
              goto LABEL_146;
            v56 = 0;
            v57 = 0;
            v58 = 0;
            v46 += v59 + 1;
            v55 = 1;
            if ((unint64_t)v46 >= v20)
              goto LABEL_249;
            continue;
        }
      }
    }
    goto LABEL_264;
  }
  if (v17 < 1)
    goto LABEL_259;
  v21 = *(unsigned __int8 *)v16;
  if (v21 == 45 || (v7 = v16, v21 == 43))
    v7 = v16 + 1;
  if (v20 < (unint64_t)v7)
  {
    __break(1u);
    goto LABEL_262;
  }
  v13 = v7 - v16;
  if (v7 - v16 < 0)
  {
LABEL_262:
    __break(1u);
    goto LABEL_263;
  }
  if ((uint64_t)(v20 - (_QWORD)v7) < 0)
  {
LABEL_263:
    __break(1u);
LABEL_264:
    __break(1u);
LABEL_265:
    __break(1u);
LABEL_266:
    __break(1u);
    goto LABEL_267;
  }
  if ((uint64_t)(v20 - (_QWORD)v7) >= 2)
    v22 = 2;
  else
    v22 = v20 - (_QWORD)v7;
  if (!_stringshims_strncasecmp_l(v7, "0x", v22, 0))
  {
    v46 = (unsigned __int8 *)(v7 + 2);
    v44 = v20 - (_QWORD)(v7 + 2);
    if (v44 >= 1 && (unint64_t)v46 < v20)
    {
      v44 = v46 - v18;
      if (((v46 - v18) & 0x8000000000000000) == 0)
      {
        a3 = (uint64_t)&v7[-a4 + 2];
        v44 = &v18[v19] - (unsigned __int8 *)v7 - 3;
        v52 = v13 + 3;
        while (1)
        {
          v53 = v52;
          v19 = *v46;
          if ((v19 - 58) <= 0xF5u
            && (*v46 - 65 > 0x25 || ((1 << (v19 - 65)) & 0x3F0000003FLL) == 0))
          {
            break;
          }
          v30 = v44-- < 1;
          if (!v30 && (unint64_t)++v46 < v20)
          {
            ++a3;
            ++v52;
            if ((v53 & 0x8000000000000000) == 0)
              continue;
          }
          goto LABEL_93;
        }
LABEL_115:
        if ((unint64_t)v46 >= a4)
        {
          v62 = a4 + i;
          if (a4 + i >= (unint64_t)v46)
          {
            if (v62 >= (unint64_t)(v46 + 1))
              v62 = (unint64_t)(v46 + 1);
            if (v62 > a4)
            {
              v63 = -(uint64_t)a4;
              v64 = i + a4;
              i = 1;
              while (1)
              {
                v65 = 0;
                v66 = 0;
                v67 = v64 - a4;
                while (1)
                {
                  if ((uint64_t)(v63 + a4 + v66) < 0 || (uint64_t)(v67 + v65) < 1)
                    goto LABEL_250;
                  v68 = *(unsigned __int8 *)(a4 + v66);
                  if (v68 == 10)
                  {
                    v70 = __OFADD__(i++, 1);
                    if (!v70)
                    {
                      a4 += v66 + 1;
                      goto LABEL_138;
                    }
                    goto LABEL_272;
                  }
                  if (v68 == 13)
                    break;
                  v69 = v66 + 1;
                  if (__OFADD__(v66, 1))
                    goto LABEL_251;
                  ++v66;
                  --v65;
                  if (a4 + v66 >= v62)
                  {
                    v13 = 0xED00007265626D75;
                    v20 = 0x6E20786568206E69;
                    goto LABEL_181;
                  }
                }
                v71 = a4 + v66;
                if ((unint64_t)v46 < a4 + v66 + 1)
                  goto LABEL_136;
                if (((v63 + a4 + v66 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v66 + v67) < 1)
                  goto LABEL_277;
                if (*(_BYTE *)(v71 + 1) == 10)
                  v71 = a4 + v66 + 1;
LABEL_136:
                v70 = __OFADD__(i++, 1);
                if (v70)
                  goto LABEL_273;
                a4 = v71 + 1;
LABEL_138:
                v13 = 0xED00007265626D75;
                v20 = 0x6E20786568206E69;
                if (a4 >= v62)
                {
                  v69 = 0;
                  goto LABEL_181;
                }
              }
            }
            v69 = 0;
            v13 = 0xED00007265626D75;
            v20 = 0x6E20786568206E69;
            i = 1;
LABEL_181:
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_QWORD *)v90 = v20;
            *(_QWORD *)(v90 + 8) = v13;
            *(_QWORD *)(v90 + 16) = v19;
            *(_QWORD *)(v90 + 24) = i;
            *(_QWORD *)(v90 + 32) = v69;
            *(_QWORD *)(v90 + 40) = a3;
            v91 = 1;
            goto LABEL_187;
          }
        }
LABEL_268:
        __break(1u);
        goto LABEL_269;
      }
    }
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  if ((unint64_t)v7 >= v20)
  {
LABEL_267:
    __break(1u);
    goto LABEL_268;
  }
  v23 = 0;
  v24 = 0;
  v25 = (const char *)&v18[v19];
  v26 = 1;
LABEL_24:
  v28 = 0;
  v29 = v25 - v7;
  while (v7 - (const char *)v18 + v28 >= 0)
  {
    v30 = v29-- < 1;
    if (v30)
      break;
    LODWORD(v19) = v7[v28];
    if ((v19 - 58) <= 0xF5u)
    {
      switch(v7[v28])
      {
        case '+':
        case '-':
          if (v28 != 0 || (v23 & 1) == 0)
            goto LABEL_141;
          v23 = 0;
          v26 = 0;
          v7 += v28 + 1;
          v24 = 3;
          if ((unint64_t)v7 >= v20)
            goto LABEL_252;
          goto LABEL_24;
        case ',':
        case '/':
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        case ':':
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case '@':
        case 'A':
        case 'B':
        case 'C':
        case 'D':
          goto LABEL_141;
        case '.':
          if ((v26 & 1) == 0)
          {
            v104 = (unint64_t)&v7[v28];
            if ((unint64_t)&v7[v28] < a4)
              goto LABEL_278;
            v105 = a4 + i;
            if (a4 + i < v104)
              goto LABEL_278;
            if (v105 >= (unint64_t)&v7[v28 + 1])
              v105 = (unint64_t)&v7[v28 + 1];
            if (v105 > a4)
            {
              v106 = i + a4;
              i = 1;
              v107 = a4;
              while (1)
              {
                v108 = 0;
                v109 = 0;
                v110 = v106 - v107;
                while (1)
                {
                  if ((uint64_t)(v107 - a4 + v109) < 0 || (uint64_t)(v110 + v108) < 1)
                    goto LABEL_265;
                  v111 = *(unsigned __int8 *)(v107 + v109);
                  if (v111 == 10)
                  {
                    v70 = __OFADD__(i++, 1);
                    if (!v70)
                    {
                      v107 += v109 + 1;
                      goto LABEL_240;
                    }
                    goto LABEL_282;
                  }
                  if (v111 == 13)
                    break;
                  v69 = v109 + 1;
                  if (__OFADD__(v109, 1))
                    goto LABEL_266;
                  ++v109;
                  --v108;
                  if (v107 + v109 >= v105)
                    goto LABEL_246;
                }
                v112 = v107 + v109;
                if (v104 >= v107 + v109 + 1)
                {
                  if (((v107 - a4 + v109 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v109 + v110) < 1)
                  {
                    __break(1u);
LABEL_286:
                    v118[0] = 0;
                    v118[1] = (char *)0xE000000000000000;
                    _StringGuts.grow(_:)(30);
                    swift_bridgeObjectRelease();
                    strcpy((char *)v118, "Invalid index ");
                    HIBYTE(v118[1]) = -18;
                    v113._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                    String.append(_:)(v113);
                    swift_bridgeObjectRelease();
                    v114._countAndFlagsBits = 0x616D5F20726F6620;
                    v114._object = (void *)0xEE0061737369746ELL;
                    String.append(_:)(v114);
                    _assertionFailure(_:_:file:line:flags:)();
                    __break(1u);
                    JUMPOUT(0x181E42218);
                  }
                  if (*(_BYTE *)(v112 + 1) == 10)
                    v112 = v107 + v109 + 1;
                }
                v70 = __OFADD__(i++, 1);
                if (v70)
                  goto LABEL_283;
                v107 = v112 + 1;
LABEL_240:
                if (v107 >= v105)
                {
                  v69 = 0;
                  goto LABEL_246;
                }
              }
            }
            v69 = 0;
            i = 1;
LABEL_246:
            a3 = (uint64_t)&v7[v28 - a4];
            LOBYTE(v19) = 46;
LABEL_142:
            v13 = 0xE900000000000072;
            v20 = 0x65626D756E206E69;
            goto LABEL_181;
          }
          v23 = 0;
          v26 = 0;
          v7 += v28 + 1;
          v24 = 1;
          if ((unint64_t)v7 >= v20)
          {
            __break(1u);
            goto LABEL_43;
          }
          break;
        case 'E':
          goto LABEL_36;
        default:
          if ((_DWORD)v19 != 101)
            goto LABEL_141;
LABEL_36:
          if (v24 != 1 && (v24 || v28 < 1))
          {
LABEL_141:
            i = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)&v7[v28], a4, i);
            v69 = v75;
            a3 = v76;
            goto LABEL_142;
          }
          v26 = 0;
          v7 += v28 + 1;
          v24 = 2;
          v23 = 1;
          if ((unint64_t)v7 >= v20)
            goto LABEL_253;
          goto LABEL_24;
      }
      goto LABEL_24;
    }
    if (__OFADD__(v28, 1))
      goto LABEL_183;
    if ((unint64_t)&v7[++v28] >= v20)
      goto LABEL_184;
  }
  __break(1u);
LABEL_183:
  __break(1u);
LABEL_184:
  __break(1u);
LABEL_185:
  if (i >> 31)
    goto LABEL_186;
  return i;
}

uint64_t specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5, char a6, uint64_t (*a7)(unint64_t, uint64_t, uint64_t), uint64_t a8, uint64_t (*a9)(unint64_t, uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;
  char v16;
  uint64_t v17;
  unint64_t v18;
  unsigned __int8 v19;
  char v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  char v24;
  char v27;
  uint64_t v28;
  unint64_t v29;
  unsigned __int8 v30;
  unsigned int v31;
  BOOL v32;
  __int16 v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  unint64_t v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  unsigned int v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  BOOL v58;
  uint64_t result;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  __int16 v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int8 v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned __int8 v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unsigned __int8 v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned __int8 v117;
  unint64_t v118;
  unsigned __int8 v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unsigned __int8 v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unsigned __int8 v143;
  char *v144;
  uint64_t v145;
  __int16 v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unsigned __int8 v157;
  int v158;
  __int16 v159;
  uint64_t v160;
  uint64_t v161;
  unsigned __int8 *v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  Swift::String v166;
  unsigned __int8 v167;
  unsigned int v168;
  Swift::String v169;
  Swift::String v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t (*v177)(unint64_t, uint64_t, uint64_t);
  unint64_t v178;
  unsigned __int8 v179;
  unsigned __int8 v180;
  unsigned __int8 v181;
  unsigned __int8 v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;

  v10 = v9;
  v11 = a4;
  v13 = a2;
  v14 = a1;
  LOBYTE(v187) = a5;
  if ((a5 & 1) == 0)
  {
    if (!a2)
    {
LABEL_268:
      __break(1u);
LABEL_269:
      __break(1u);
LABEL_270:
      __break(1u);
LABEL_271:
      __break(1u);
LABEL_272:
      __break(1u);
LABEL_273:
      __break(1u);
      goto LABEL_274;
    }
    v27 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a1);
    if (v27 == 48)
    {
      if (v13 >= 1)
        v28 = 1;
      else
        v28 = v13;
      v21 = v14;
      if (v13 >= 2)
      {
        v29 = v14 + v28;
        v30 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v14 + v28);
        v31 = v30;
        v32 = v30 - 46 > 0x37 || ((1 << (v30 - 46)) & 0x80000000800001) == 0;
        v21 = v14;
        if (v32)
        {
          v19 = v30;
          v33 = _asciiNumbers.getter();
          v34 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v29, a3, a4);
          v36 = v35;
          v38 = v37;
          if (v31 >= v33)
          {
            v39 = HIBYTE(v33);
            goto LABEL_112;
          }
LABEL_184:
          v49 = v19;
LABEL_185:
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_OWORD *)v63 = xmmword_18206BE50;
          *(_QWORD *)(v63 + 16) = v49;
          *(_QWORD *)(v63 + 24) = v34;
          *(_QWORD *)(v63 + 32) = v36;
          *(_QWORD *)(v63 + 40) = v38;
          goto LABEL_233;
        }
      }
    }
    else
    {
      v21 = v14;
      if ((v27 - 58) < 0xF7u)
      {
        if (v27 != 45)
        {
LABEL_275:
          __break(1u);
          goto LABEL_276;
        }
        if (v13 < 2)
        {
          v66 = v14 - a3;
          if (v14 < a3 || a3 + a4 < v14)
            goto LABEL_280;
          if (a3 + a4 >= v14 + 1)
            v67 = v14 + 1;
          else
            v67 = a3 + v11;
          if (v67 <= a3)
          {
            v76 = 0;
            v70 = 1;
          }
          else
          {
            v68 = a4 + a3;
            v69 = -(uint64_t)a3;
            v70 = 1;
            v183 = v14 - a3;
            v188 = a4 + a3;
            v192 = -(uint64_t)a3;
            do
            {
              v71 = 0;
              v72 = 0;
              v73 = v68 - a3;
              v74 = v69 + a3;
              while (1)
              {
                if ((uint64_t)(v74 + v72) < 0 || (uint64_t)(v73 + v71) < 1)
                  goto LABEL_265;
                v75 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v72);
                if (v75 == 10)
                {
                  v58 = __OFADD__(v70++, 1);
                  v69 = v192;
                  if (v58)
                    goto LABEL_284;
                  a3 += v72 + 1;
                  goto LABEL_105;
                }
                if (v75 == 13)
                  break;
                v76 = v72 + 1;
                if (__OFADD__(v72, 1))
                  goto LABEL_266;
                ++v72;
                --v71;
                if (a3 + v72 >= v67)
                  goto LABEL_107;
              }
              v77 = a3 + v72;
              v69 = v192;
              if (!specialized static Comparable.<= infix(_:_:)(a3 + v72 + 1, v14))
                goto LABEL_103;
              if (((v192 + a3 + v72 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v72 + v73) < 1)
                goto LABEL_293;
              if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v72 + 1) == 10)
                v77 = a3 + v72 + 1;
LABEL_103:
              v58 = __OFADD__(v70++, 1);
              if (v58)
                goto LABEL_285;
              a3 = v77 + 1;
LABEL_105:
              v68 = v188;
            }
            while (a3 < v67);
            v76 = 0;
LABEL_107:
            v66 = v183;
          }
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_QWORD *)v116 = 0xD000000000000010;
          *(_QWORD *)(v116 + 8) = 0x80000001823071F0;
          *(_QWORD *)(v116 + 16) = 45;
          *(_QWORD *)(v116 + 24) = v70;
          *(_QWORD *)(v116 + 32) = v76;
          *(_QWORD *)(v116 + 40) = v66;
          *(_BYTE *)(v116 + 48) = 1;
          return swift_willThrow();
        }
        v21 = v14 + 1;
        v41 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v14 + 1);
        if (v41 == 48)
        {
          v42 = v14 + 2;
          if (!specialized Collection.isEmpty.getter(v14 + 2, v13 - 2))
          {
            v43 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v42);
            v44 = v43;
            v45 = v43;
            if (v43 - 46 > 0x37 || ((1 << (v43 - 46)) & 0x80000000800001) == 0)
            {
              v46 = _asciiNumbers.getter();
              v34 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v42, a3, a4);
              v36 = v47;
              v38 = v48;
              if (v45 >= v46 && HIBYTE(v46) >= v44)
                goto LABEL_113;
              v49 = v44;
              goto LABEL_185;
            }
          }
        }
        else
        {
          v81 = v41;
          if ((v41 - 58) < 0xF7u)
          {
            if (!specialized static Comparable.<= infix(_:_:)(a3, v14 + 1))
              goto LABEL_291;
            if (specialized static Comparable.<= infix(_:_:)(v14 + 1, a3 + a4))
            {
              v82 = specialized min<A>(_:_:)(v14 + 2, a3 + a4);
              if (v82 <= a3)
              {
                v93 = 0;
                v86 = 1;
                goto LABEL_241;
              }
              v83 = v82;
              v84 = v11 + a3;
              v85 = -(uint64_t)a3;
              v86 = 1;
              v87 = a3;
              v179 = v81;
              v184 = v84;
              while (1)
              {
                v193 = v86;
                v88 = 0;
                v89 = 0;
                v90 = v84 - v87;
                v91 = v85 + v87;
                while (1)
                {
                  if ((uint64_t)(v91 + v89) < 0 || (uint64_t)(v90 + v88) < 1)
                    goto LABEL_271;
                  v92 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v87 + v89);
                  if (v92 == 10)
                    break;
                  if (v92 == 13)
                  {
                    v94 = v87 + v89;
                    v85 = -(uint64_t)a3;
                    if (specialized static Comparable.<= infix(_:_:)(v87 + v89 + 1, v21))
                    {
                      if (((v87 - a3 + v89 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v89 + v90) < 1)
                        goto LABEL_299;
                      if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v87 + v89 + 1) == 10)v94 = v87 + v89 + 1;
                    }
                    v86 = v193 + 1;
                    if (__OFADD__(v193, 1))
                      goto LABEL_297;
                    v87 = v94 + 1;
                    goto LABEL_136;
                  }
                  v93 = v89 + 1;
                  if (__OFADD__(v89, 1))
                    goto LABEL_273;
                  ++v89;
                  --v88;
                  if (v87 + v89 >= v83)
                  {
                    v81 = v179;
                    v86 = v193;
LABEL_241:
                    lazy protocol witness table accessor for type JSONError and conformance JSONError();
                    swift_allocError();
                    *(_QWORD *)v156 = 0xD000000000000013;
                    *(_QWORD *)(v156 + 8) = 0x80000001823072E0;
                    *(_QWORD *)(v156 + 16) = v81;
                    *(_QWORD *)(v156 + 24) = v86;
                    *(_QWORD *)(v156 + 32) = v93;
                    *(_QWORD *)(v156 + 40) = v21 - a3;
                    *(_BYTE *)(v156 + 48) = 1;
                    return swift_willThrow();
                  }
                }
                v85 = -(uint64_t)a3;
                v86 = v193 + 1;
                if (__OFADD__(v193, 1))
                  goto LABEL_296;
                v87 += v89 + 1;
LABEL_136:
                v84 = v184;
                if (v87 >= v83)
                {
                  v93 = 0;
                  v81 = v179;
                  goto LABEL_241;
                }
              }
            }
LABEL_292:
            __break(1u);
LABEL_293:
            __break(1u);
LABEL_294:
            __break(1u);
            goto LABEL_295;
          }
        }
      }
    }
    v11 = a4;
    if ((a6 & 1) != 0 && v21 + 1 < v14 + v13)
    {
      v95 = 0;
      while (1)
      {
        v96 = v21 + v95;
        if ((*(unsigned __int8 *)(v21 + v95 + 1) | 0x20) == 0x65)
          break;
        if (~v21 + v13 + v14 == ++v95)
          goto LABEL_149;
      }
      if ((specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v21 + v95) - 58) <= 0xF5u)
      {
        if (((v21 - v14 + v95 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v21 + v13 + v14 - v95) < 1)
          goto LABEL_283;
        v97 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v96 + 1);
        v98 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v96 + 1, a3, a4);
        v100 = v99;
        v102 = v101;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_OWORD *)v63 = xmmword_18206BE50;
        *(_QWORD *)(v63 + 16) = v97;
        *(_QWORD *)(v63 + 24) = v98;
        *(_QWORD *)(v63 + 32) = v100;
        goto LABEL_148;
      }
    }
LABEL_149:
    v103 = v14 + v13;
    v104 = v14 + v13 - 1;
    v105 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v104);
    if ((v105 - 58) > 0xF5u)
    {
      result = a9(v14, v13);
      if ((result & 0x100) == 0)
        return result;
      return ((uint64_t (*)(unint64_t, unint64_t, uint64_t, unint64_t, unint64_t, uint64_t))a8)(v187 & 1, v14, v13, a3, v11, v21);
    }
    v52 = v104 - a3;
    if (v104 < a3 || a3 + a4 < v104)
    {
LABEL_274:
      __break(1u);
      goto LABEL_275;
    }
    if (a3 + a4 >= v103)
      v106 = v103;
    else
      v106 = a3 + a4;
    if (v106 <= a3)
    {
      v21 = 0;
      v13 = 1;
      goto LABEL_180;
    }
    v180 = v105;
    v185 = v104 - a3;
    v107 = a4 + a3;
    v108 = -(uint64_t)a3;
    v13 = 1;
    v189 = a4 + a3;
    v194 = -(uint64_t)a3;
LABEL_157:
    v109 = 0;
    v110 = 0;
    v111 = v107 - a3;
    v112 = v108 + a3;
    while ((uint64_t)(v112 + v110) >= 0 && (uint64_t)(v111 + v109) >= 1)
    {
      v113 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v110);
      if (v113 == 10)
      {
        v58 = __OFADD__(v13++, 1);
        v108 = v194;
        if (!v58)
        {
          a3 += v110 + 1;
          goto LABEL_174;
        }
        goto LABEL_278;
      }
      if (v113 == 13)
      {
        v114 = a3 + v110;
        v108 = v194;
        if (!specialized static Comparable.<= infix(_:_:)(a3 + v110 + 1, v104))
          goto LABEL_172;
        if (((v194 + a3 + v110 + 1) & 0x8000000000000000) == 0 && (uint64_t)(~v110 + v111) >= 1)
        {
          if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v110 + 1) == 10)
            v114 = a3 + v110 + 1;
LABEL_172:
          v58 = __OFADD__(v13++, 1);
          if (!v58)
          {
            a3 = v114 + 1;
LABEL_174:
            v107 = v189;
            if (a3 >= v106)
            {
              v21 = 0;
LABEL_176:
              v105 = v180;
              v52 = v185;
LABEL_180:
              v65 = v105;
              goto LABEL_181;
            }
            goto LABEL_157;
          }
LABEL_279:
          __break(1u);
LABEL_280:
          __break(1u);
LABEL_281:
          __break(1u);
        }
        __break(1u);
LABEL_283:
        __break(1u);
LABEL_284:
        __break(1u);
LABEL_285:
        __break(1u);
LABEL_286:
        __break(1u);
LABEL_287:
        __break(1u);
LABEL_288:
        __break(1u);
LABEL_289:
        __break(1u);
LABEL_290:
        __break(1u);
LABEL_291:
        __break(1u);
        goto LABEL_292;
      }
      v21 = v110 + 1;
      if (__OFADD__(v110, 1))
        goto LABEL_264;
      ++v110;
      --v109;
      if (a3 + v110 >= v106)
        goto LABEL_176;
    }
    __break(1u);
LABEL_264:
    __break(1u);
LABEL_265:
    __break(1u);
LABEL_266:
    __break(1u);
LABEL_267:
    __break(1u);
    goto LABEL_268;
  }
  if (!a2)
    goto LABEL_267;
  v16 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a1);
  if (v16 == 48)
  {
    v177 = a7;
    if (v13 >= 1)
      v17 = 1;
    else
      v17 = v13;
    if (v13 >= 2)
    {
      v18 = v14 + v17;
      v19 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v14 + v17);
      v20 = 0;
      if (v19 <= 0x57u)
      {
        v21 = v14;
        if (v19 == 46 || v19 == 69)
          goto LABEL_47;
        goto LABEL_110;
      }
      if (v19 == 120)
      {
LABEL_12:
        v21 = v18 + 1;
        if (specialized static Comparable.<= infix(_:_:)(v18 + 1, v14 + v13))
        {
LABEL_13:
          v22 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v21);
          v23 = 1;
          if (!UInt8.isValidHexDigit.getter(v22))
          {
            v150 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v21, a3, v11);
            v152 = v151;
            v154 = v153;
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_OWORD *)v155 = xmmword_18206BE50;
            *(_QWORD *)(v155 + 16) = v22;
            *(_QWORD *)(v155 + 24) = v150;
            *(_QWORD *)(v155 + 32) = v152;
            *(_QWORD *)(v155 + 40) = v154;
            *(_BYTE *)(v155 + 48) = 1;
            return swift_willThrow();
          }
          v24 = 0;
LABEL_76:
          result = v177(v14, v13, v23);
          if ((result & 0x100) == 0)
            return result;
          if ((v24 & 1) != 0)
          {
            v60 = static String._fromUTF8Repairing(_:)();
            v62 = v61;
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_QWORD *)v63 = v60;
            *(_QWORD *)(v63 + 8) = v62;
            *(_OWORD *)(v63 + 16) = 0u;
            *(_OWORD *)(v63 + 32) = 0u;
            v64 = 11;
LABEL_234:
            *(_BYTE *)(v63 + 48) = v64;
            return swift_willThrow();
          }
          return ((uint64_t (*)(unint64_t, unint64_t, uint64_t, unint64_t, unint64_t, uint64_t))a8)(v187 & 1, v14, v13, a3, v11, v21);
        }
        if (v13 - v17 < 1)
          goto LABEL_290;
        goto LABEL_221;
      }
      if (v19 != 101)
      {
        if (v19 == 88)
          goto LABEL_12;
LABEL_110:
        v78 = _asciiNumbers.getter();
        v34 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v14 + v17, a3, v11);
        v36 = v79;
        v38 = v80;
        if (v19 >= v78)
        {
          v39 = HIBYTE(v78);
LABEL_112:
          if (v39 >= v19)
          {
LABEL_113:
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_QWORD *)v63 = v34;
            *(_QWORD *)(v63 + 8) = v36;
            *(_QWORD *)(v63 + 16) = v38;
            *(_QWORD *)(v63 + 24) = 0;
            *(_QWORD *)(v63 + 32) = 0;
            *(_QWORD *)(v63 + 40) = 0;
            v64 = 10;
            goto LABEL_234;
          }
          goto LABEL_184;
        }
        goto LABEL_184;
      }
LABEL_46:
      v21 = v14;
      goto LABEL_47;
    }
LABEL_45:
    v20 = 0;
    goto LABEL_46;
  }
  if ((v16 - 58) >= 0xF7u)
  {
    v177 = a7;
    goto LABEL_45;
  }
  switch(v16)
  {
    case '+':
    case '-':
      if (v13 < 2)
      {
        if (v13 != 1)
          goto LABEL_287;
        v117 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v14);
        v118 = v14 - a3;
        if (v14 < a3)
          goto LABEL_288;
        v119 = v117;
        if (!specialized static Comparable.<= infix(_:_:)(v14, a3 + v11))
          goto LABEL_289;
        v120 = specialized min<A>(_:_:)(v14 + 1, a3 + v11);
        if (v120 <= a3)
        {
          v130 = 0;
          v124 = 1;
          goto LABEL_238;
        }
        v121 = v120;
        v181 = v119;
        v186 = v14 - a3;
        v122 = v11 + a3;
        v123 = -(uint64_t)a3;
        v124 = 1;
        v190 = v122;
        v195 = -(uint64_t)a3;
LABEL_195:
        v125 = 0;
        v126 = 0;
        v127 = v122 - a3;
        v128 = v123 + a3;
        while (1)
        {
          if ((uint64_t)(v128 + v126) < 0 || (uint64_t)(v127 + v125) < 1)
            goto LABEL_269;
          v129 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v126);
          if (v129 == 10)
            break;
          if (v129 == 13)
          {
            v131 = a3 + v126;
            if (!specialized static Comparable.<= infix(_:_:)(a3 + v126 + 1, v14))
              goto LABEL_210;
            if (((v195 + a3 + v126 + 1) & 0x8000000000000000) == 0 && (uint64_t)(~v126 + v127) >= 1)
            {
              if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v126 + 1) == 10)v131 = a3 + v126 + 1;
LABEL_210:
              v58 = __OFADD__(v124++, 1);
              if (!v58)
              {
                a3 = v131 + 1;
LABEL_212:
                v122 = v190;
                v123 = v195;
                if (a3 >= v121)
                {
                  v130 = 0;
LABEL_214:
                  v119 = v181;
                  v118 = v186;
LABEL_238:
                  lazy protocol witness table accessor for type JSONError and conformance JSONError();
                  swift_allocError();
                  *(_QWORD *)v149 = 0xD000000000000010;
                  *(_QWORD *)(v149 + 8) = 0x80000001823071F0;
                  *(_QWORD *)(v149 + 16) = v119;
                  *(_QWORD *)(v149 + 24) = v124;
                  *(_QWORD *)(v149 + 32) = v130;
                  *(_QWORD *)(v149 + 40) = v118;
                  *(_BYTE *)(v149 + 48) = 1;
                  return swift_willThrow();
                }
                goto LABEL_195;
              }
LABEL_295:
              __break(1u);
LABEL_296:
              __break(1u);
LABEL_297:
              __break(1u);
            }
            __break(1u);
LABEL_299:
            __break(1u);
            JUMPOUT(0x181E3EE34);
          }
          v130 = v126 + 1;
          if (__OFADD__(v126, 1))
            goto LABEL_270;
          ++v126;
          --v125;
          if (a3 + v126 >= v121)
            goto LABEL_214;
        }
        v58 = __OFADD__(v124++, 1);
        if (!v58)
        {
          a3 += v126 + 1;
          goto LABEL_212;
        }
        goto LABEL_294;
      }
      v21 = v14 + 1;
      v40 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v14 + 1);
      if (v40 == 48)
      {
        v177 = a7;
        v18 = v14 + 2;
        if (specialized Collection.isEmpty.getter(v14 + 2, v13 - 2))
        {
          v20 = 0;
          goto LABEL_47;
        }
        v157 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v18);
        v20 = 0;
        v158 = v157;
        if (v157 > 0x57u)
        {
          if (v157 != 120)
          {
            if (v157 == 101)
              goto LABEL_47;
            if (v157 != 88)
            {
LABEL_251:
              v159 = _asciiNumbers.getter();
              v34 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v18, a3, v11);
              v36 = v160;
              v38 = v161;
              if (v157 >= v159 && HIBYTE(v159) >= v157)
                goto LABEL_113;
              v49 = v157;
              goto LABEL_185;
            }
          }
          v21 = v14 + 3;
          if (specialized static Comparable.<= infix(_:_:)(v14 + 3, v14 + v13))
            goto LABEL_13;
          if (v13 - 2 >= 1)
          {
LABEL_221:
            v139 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v18);
            v134 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v18, a3, v11);
            v136 = v140;
            v138 = v141;
            v142 = v139;
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_OWORD *)v63 = xmmword_18206BE50;
LABEL_231:
            *(_QWORD *)(v63 + 16) = v142;
            goto LABEL_232;
          }
          __break(1u);
        }
        if (v158 == 46 || v158 == 69)
          goto LABEL_47;
        goto LABEL_251;
      }
      v143 = v40;
      if ((v40 - 58) >= 0xF7u)
        goto LABEL_257;
      if (v40 == 46)
        goto LABEL_256;
      if (v40 != 78)
      {
        if (v40 == 73)
        {
          v144 = (char *)specialized BufferView.dropFirst(_:)(1, v14, v13);
          result = specialized static JSON5Scanner.validateInfinity(from:fullSource:)(v144, v145, a3, v11);
          if (v9)
            return result;
          v177 = a7;
          v20 = 1;
          goto LABEL_47;
        }
        v197 = 0;
        v198 = 0xE000000000000000;
        _StringGuts.grow(_:)(20);
        v166._countAndFlagsBits = 0x27207265746661;
        v166._object = (void *)0xE700000000000000;
        DefaultStringInterpolation.appendLiteral(_:)(v166);
        v167 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v14);
        v168 = (v167 + 1);
        if ((v167 & 0x80) != 0)
          v168 = (((v167 & 0x3F) << 8) | (v167 >> 6)) + 33217;
        v196 = (v168 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v168) >> 3)) & 7)));
        v169._countAndFlagsBits = MEMORY[0x186DA46D0](&v196);
        specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v169);
        swift_bridgeObjectRelease();
        v170._countAndFlagsBits = 0x6D756E206E692027;
        v170._object = (void *)0xEB00000000726562;
        DefaultStringInterpolation.appendLiteral(_:)(v170);
        v171 = v197;
        v172 = v198;
        v173 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v21, a3, v11);
        v175 = v174;
        v102 = v176;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_QWORD *)v63 = v171;
        *(_QWORD *)(v63 + 8) = v172;
        *(_QWORD *)(v63 + 16) = v143;
        *(_QWORD *)(v63 + 24) = v173;
        *(_QWORD *)(v63 + 32) = v175;
LABEL_148:
        *(_QWORD *)(v63 + 40) = v102;
LABEL_233:
        v64 = 1;
        goto LABEL_234;
      }
      v164 = (char *)specialized BufferView.dropFirst(_:)(1, v14, v13);
      result = specialized static JSON5Scanner.validateNaN(from:fullSource:)(v164, v165, a3, v11);
      if (v9)
        return result;
      v177 = a7;
      v20 = 1;
LABEL_47:
      v24 = v20;
      v50 = v14 + v13;
      v51 = v14 + v13 - 1;
      v182 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v51);
      if ((v182 | 0x20) != 0x65)
      {
        v23 = 0;
        goto LABEL_76;
      }
      v52 = v51 - a3;
      if (v51 < a3 || a3 + v11 < v51)
        goto LABEL_272;
      v53 = v11;
      if (a3 + v11 >= v50)
        v11 = v50;
      else
        v11 += a3;
      if (v11 <= a3)
      {
        v21 = 0;
        v13 = 1;
        goto LABEL_80;
      }
      v178 = v51 - a3;
      v54 = v53 + a3;
      v55 = -(uint64_t)a3;
      v13 = 1;
      v187 = v53 + a3;
      a8 = -(uint64_t)a3;
      do
      {
        v10 = 0;
        v14 = 0;
        v56 = v54 - a3;
        a7 = (uint64_t (*)(unint64_t, uint64_t, uint64_t))(v55 + a3);
        while (1)
        {
          if ((uint64_t)((uint64_t)a7 + v14) < 0 || (uint64_t)(v56 + v10) < 1)
          {
            __break(1u);
LABEL_255:
            __break(1u);
LABEL_256:
            v162 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2, v14, v13);
            result = (uint64_t)specialized static JSON5Scanner.validateLeadingDecimal(from:fullSource:)(v162, v163, a3, v11);
            if (v10)
              return result;
LABEL_257:
            v177 = a7;
            v20 = 0;
            goto LABEL_47;
          }
          v57 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v14);
          if (v57 == 10)
          {
            v58 = __OFADD__(v13++, 1);
            v55 = a8;
            if (!v58)
            {
              a3 += v14 + 1;
              goto LABEL_72;
            }
LABEL_276:
            __break(1u);
LABEL_277:
            __break(1u);
LABEL_278:
            __break(1u);
            goto LABEL_279;
          }
          if (v57 == 13)
            break;
          v21 = v14 + 1;
          if (__OFADD__(v14, 1))
            goto LABEL_255;
          ++v14;
          --v10;
          if (a3 + v14 >= v11)
            goto LABEL_74;
        }
        v21 = a3 + v14;
        v55 = a8;
        if (!specialized static Comparable.<= infix(_:_:)(a3 + v14 + 1, v51))
          goto LABEL_70;
        if (((a8 + a3 + v14 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v14 + v56) < 1)
          goto LABEL_281;
        if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v14 + 1) == 10)
          v21 = a3 + v14 + 1;
LABEL_70:
        v58 = __OFADD__(v13++, 1);
        if (v58)
          goto LABEL_277;
        a3 = v21 + 1;
LABEL_72:
        v54 = v187;
      }
      while (a3 < v11);
      v21 = 0;
LABEL_74:
      v52 = v178;
LABEL_80:
      v65 = v182;
LABEL_181:
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(_QWORD *)v115 = 0xD000000000000010;
      *(_QWORD *)(v115 + 8) = 0x80000001823071F0;
      *(_QWORD *)(v115 + 16) = v65;
      *(_QWORD *)(v115 + 24) = v13;
      *(_QWORD *)(v115 + 32) = v21;
      *(_QWORD *)(v115 + 40) = v52;
      *(_BYTE *)(v115 + 48) = 1;
      return swift_willThrow();
    case '.':
      if (v13 >= 1)
        v132 = 1;
      else
        v132 = v13;
      v133 = v14 + v132;
      if (specialized Collection.isEmpty.getter(v14 + v132, v13 - v132))
      {
        v134 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v133, a3, v11);
        v136 = v135;
        v138 = v137;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_QWORD *)v63 = 0;
        *(_QWORD *)(v63 + 8) = 0;
        *(_QWORD *)(v63 + 16) = 46;
LABEL_232:
        *(_QWORD *)(v63 + 24) = v134;
        *(_QWORD *)(v63 + 32) = v136;
        *(_QWORD *)(v63 + 40) = v138;
        goto LABEL_233;
      }
      v177 = a7;
      LOBYTE(v142) = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v133);
      v146 = _asciiNumbers.getter();
      if (v142 >= v146
        && HIBYTE(v146) >= v142)
      {
        goto LABEL_45;
      }
      v134 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v133, a3, v11);
      v136 = v147;
      v138 = v148;
      v142 = v142;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(_QWORD *)v63 = 0xD000000000000013;
      *(_QWORD *)(v63 + 8) = 0x80000001823071D0;
      goto LABEL_231;
    case 'I':
      result = closure #1 in static JSON5Scanner.validateInfinity(from:fullSource:)((const char *)v14, v13, v14, v13, a3, v11);
      goto LABEL_188;
    case 'N':
      result = specialized BufferView.withUnsafeRawPointer<A>(_:)((const char *)v14, v13, v14, v13, a3, v11);
LABEL_188:
      if (v9)
        return result;
      v177 = a7;
      v20 = 1;
      goto LABEL_46;
    default:
      goto LABEL_286;
  }
}

{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;
  char v16;
  uint64_t v17;
  unint64_t v18;
  unsigned __int8 v19;
  char v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  char v24;
  char v27;
  uint64_t v28;
  unint64_t v29;
  unsigned __int8 v30;
  unsigned int v31;
  BOOL v32;
  __int16 v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  unint64_t v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  unsigned int v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  BOOL v58;
  uint64_t result;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  __int16 v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int8 v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned __int8 v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unsigned __int8 v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned __int8 v117;
  unint64_t v118;
  unsigned __int8 v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unsigned __int8 v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unsigned __int8 v143;
  char *v144;
  uint64_t v145;
  __int16 v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unsigned __int8 v157;
  int v158;
  __int16 v159;
  uint64_t v160;
  uint64_t v161;
  unsigned __int8 *v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  Swift::String v166;
  unsigned __int8 v167;
  unsigned int v168;
  Swift::String v169;
  Swift::String v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t (*v177)(unint64_t, uint64_t, uint64_t);
  unint64_t v178;
  unsigned __int8 v179;
  unsigned __int8 v180;
  unsigned __int8 v181;
  unsigned __int8 v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;

  v10 = v9;
  v11 = a4;
  v13 = a2;
  v14 = a1;
  LOBYTE(v187) = a5;
  if ((a5 & 1) == 0)
  {
    if (!a2)
    {
LABEL_268:
      __break(1u);
LABEL_269:
      __break(1u);
LABEL_270:
      __break(1u);
LABEL_271:
      __break(1u);
LABEL_272:
      __break(1u);
LABEL_273:
      __break(1u);
      goto LABEL_274;
    }
    v27 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a1);
    if (v27 == 48)
    {
      if (v13 >= 1)
        v28 = 1;
      else
        v28 = v13;
      v21 = v14;
      if (v13 >= 2)
      {
        v29 = v14 + v28;
        v30 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v14 + v28);
        v31 = v30;
        v32 = v30 - 46 > 0x37 || ((1 << (v30 - 46)) & 0x80000000800001) == 0;
        v21 = v14;
        if (v32)
        {
          v19 = v30;
          v33 = _asciiNumbers.getter();
          v34 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v29, a3, a4);
          v36 = v35;
          v38 = v37;
          if (v31 >= v33)
          {
            v39 = HIBYTE(v33);
            goto LABEL_112;
          }
LABEL_184:
          v49 = v19;
LABEL_185:
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_OWORD *)v63 = xmmword_18206BE50;
          *(_QWORD *)(v63 + 16) = v49;
          *(_QWORD *)(v63 + 24) = v34;
          *(_QWORD *)(v63 + 32) = v36;
          *(_QWORD *)(v63 + 40) = v38;
          goto LABEL_233;
        }
      }
    }
    else
    {
      v21 = v14;
      if ((v27 - 58) < 0xF7u)
      {
        if (v27 != 45)
        {
LABEL_275:
          __break(1u);
          goto LABEL_276;
        }
        if (v13 < 2)
        {
          v66 = v14 - a3;
          if (v14 < a3 || a3 + a4 < v14)
            goto LABEL_280;
          if (a3 + a4 >= v14 + 1)
            v67 = v14 + 1;
          else
            v67 = a3 + v11;
          if (v67 <= a3)
          {
            v76 = 0;
            v70 = 1;
          }
          else
          {
            v68 = a4 + a3;
            v69 = -(uint64_t)a3;
            v70 = 1;
            v183 = v14 - a3;
            v188 = a4 + a3;
            v192 = -(uint64_t)a3;
            do
            {
              v71 = 0;
              v72 = 0;
              v73 = v68 - a3;
              v74 = v69 + a3;
              while (1)
              {
                if ((uint64_t)(v74 + v72) < 0 || (uint64_t)(v73 + v71) < 1)
                  goto LABEL_265;
                v75 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v72);
                if (v75 == 10)
                {
                  v58 = __OFADD__(v70++, 1);
                  v69 = v192;
                  if (v58)
                    goto LABEL_284;
                  a3 += v72 + 1;
                  goto LABEL_105;
                }
                if (v75 == 13)
                  break;
                v76 = v72 + 1;
                if (__OFADD__(v72, 1))
                  goto LABEL_266;
                ++v72;
                --v71;
                if (a3 + v72 >= v67)
                  goto LABEL_107;
              }
              v77 = a3 + v72;
              v69 = v192;
              if (!specialized static Comparable.<= infix(_:_:)(a3 + v72 + 1, v14))
                goto LABEL_103;
              if (((v192 + a3 + v72 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v72 + v73) < 1)
                goto LABEL_293;
              if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v72 + 1) == 10)
                v77 = a3 + v72 + 1;
LABEL_103:
              v58 = __OFADD__(v70++, 1);
              if (v58)
                goto LABEL_285;
              a3 = v77 + 1;
LABEL_105:
              v68 = v188;
            }
            while (a3 < v67);
            v76 = 0;
LABEL_107:
            v66 = v183;
          }
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_QWORD *)v116 = 0xD000000000000010;
          *(_QWORD *)(v116 + 8) = 0x80000001823071F0;
          *(_QWORD *)(v116 + 16) = 45;
          *(_QWORD *)(v116 + 24) = v70;
          *(_QWORD *)(v116 + 32) = v76;
          *(_QWORD *)(v116 + 40) = v66;
          *(_BYTE *)(v116 + 48) = 1;
          return swift_willThrow();
        }
        v21 = v14 + 1;
        v41 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v14 + 1);
        if (v41 == 48)
        {
          v42 = v14 + 2;
          if (!specialized Collection.isEmpty.getter(v14 + 2, v13 - 2))
          {
            v43 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v42);
            v44 = v43;
            v45 = v43;
            if (v43 - 46 > 0x37 || ((1 << (v43 - 46)) & 0x80000000800001) == 0)
            {
              v46 = _asciiNumbers.getter();
              v34 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v42, a3, a4);
              v36 = v47;
              v38 = v48;
              if (v45 >= v46 && HIBYTE(v46) >= v44)
                goto LABEL_113;
              v49 = v44;
              goto LABEL_185;
            }
          }
        }
        else
        {
          v81 = v41;
          if ((v41 - 58) < 0xF7u)
          {
            if (!specialized static Comparable.<= infix(_:_:)(a3, v14 + 1))
              goto LABEL_291;
            if (specialized static Comparable.<= infix(_:_:)(v14 + 1, a3 + a4))
            {
              v82 = specialized min<A>(_:_:)(v14 + 2, a3 + a4);
              if (v82 <= a3)
              {
                v93 = 0;
                v86 = 1;
                goto LABEL_241;
              }
              v83 = v82;
              v84 = v11 + a3;
              v85 = -(uint64_t)a3;
              v86 = 1;
              v87 = a3;
              v179 = v81;
              v184 = v84;
              while (1)
              {
                v193 = v86;
                v88 = 0;
                v89 = 0;
                v90 = v84 - v87;
                v91 = v85 + v87;
                while (1)
                {
                  if ((uint64_t)(v91 + v89) < 0 || (uint64_t)(v90 + v88) < 1)
                    goto LABEL_271;
                  v92 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v87 + v89);
                  if (v92 == 10)
                    break;
                  if (v92 == 13)
                  {
                    v94 = v87 + v89;
                    v85 = -(uint64_t)a3;
                    if (specialized static Comparable.<= infix(_:_:)(v87 + v89 + 1, v21))
                    {
                      if (((v87 - a3 + v89 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v89 + v90) < 1)
                        goto LABEL_299;
                      if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v87 + v89 + 1) == 10)v94 = v87 + v89 + 1;
                    }
                    v86 = v193 + 1;
                    if (__OFADD__(v193, 1))
                      goto LABEL_297;
                    v87 = v94 + 1;
                    goto LABEL_136;
                  }
                  v93 = v89 + 1;
                  if (__OFADD__(v89, 1))
                    goto LABEL_273;
                  ++v89;
                  --v88;
                  if (v87 + v89 >= v83)
                  {
                    v81 = v179;
                    v86 = v193;
LABEL_241:
                    lazy protocol witness table accessor for type JSONError and conformance JSONError();
                    swift_allocError();
                    *(_QWORD *)v156 = 0xD000000000000013;
                    *(_QWORD *)(v156 + 8) = 0x80000001823072E0;
                    *(_QWORD *)(v156 + 16) = v81;
                    *(_QWORD *)(v156 + 24) = v86;
                    *(_QWORD *)(v156 + 32) = v93;
                    *(_QWORD *)(v156 + 40) = v21 - a3;
                    *(_BYTE *)(v156 + 48) = 1;
                    return swift_willThrow();
                  }
                }
                v85 = -(uint64_t)a3;
                v86 = v193 + 1;
                if (__OFADD__(v193, 1))
                  goto LABEL_296;
                v87 += v89 + 1;
LABEL_136:
                v84 = v184;
                if (v87 >= v83)
                {
                  v93 = 0;
                  v81 = v179;
                  goto LABEL_241;
                }
              }
            }
LABEL_292:
            __break(1u);
LABEL_293:
            __break(1u);
LABEL_294:
            __break(1u);
            goto LABEL_295;
          }
        }
      }
    }
    v11 = a4;
    if ((a6 & 1) != 0 && v21 + 1 < v14 + v13)
    {
      v95 = 0;
      while (1)
      {
        v96 = v21 + v95;
        if ((*(unsigned __int8 *)(v21 + v95 + 1) | 0x20) == 0x65)
          break;
        if (~v21 + v13 + v14 == ++v95)
          goto LABEL_149;
      }
      if ((specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v21 + v95) - 58) <= 0xF5u)
      {
        if (((v21 - v14 + v95 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v21 + v13 + v14 - v95) < 1)
          goto LABEL_283;
        v97 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v96 + 1);
        v98 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v96 + 1, a3, a4);
        v100 = v99;
        v102 = v101;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_OWORD *)v63 = xmmword_18206BE50;
        *(_QWORD *)(v63 + 16) = v97;
        *(_QWORD *)(v63 + 24) = v98;
        *(_QWORD *)(v63 + 32) = v100;
        goto LABEL_148;
      }
    }
LABEL_149:
    v103 = v14 + v13;
    v104 = v14 + v13 - 1;
    v105 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v104);
    if ((v105 - 58) > 0xF5u)
    {
      result = a9(v14, v13);
      if ((result & 0x10000) == 0)
        return result;
      return ((uint64_t (*)(unint64_t, unint64_t, uint64_t, unint64_t, unint64_t, uint64_t))a8)(v187 & 1, v14, v13, a3, v11, v21);
    }
    v52 = v104 - a3;
    if (v104 < a3 || a3 + a4 < v104)
    {
LABEL_274:
      __break(1u);
      goto LABEL_275;
    }
    if (a3 + a4 >= v103)
      v106 = v103;
    else
      v106 = a3 + a4;
    if (v106 <= a3)
    {
      v21 = 0;
      v13 = 1;
      goto LABEL_180;
    }
    v180 = v105;
    v185 = v104 - a3;
    v107 = a4 + a3;
    v108 = -(uint64_t)a3;
    v13 = 1;
    v189 = a4 + a3;
    v194 = -(uint64_t)a3;
LABEL_157:
    v109 = 0;
    v110 = 0;
    v111 = v107 - a3;
    v112 = v108 + a3;
    while ((uint64_t)(v112 + v110) >= 0 && (uint64_t)(v111 + v109) >= 1)
    {
      v113 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v110);
      if (v113 == 10)
      {
        v58 = __OFADD__(v13++, 1);
        v108 = v194;
        if (!v58)
        {
          a3 += v110 + 1;
          goto LABEL_174;
        }
        goto LABEL_278;
      }
      if (v113 == 13)
      {
        v114 = a3 + v110;
        v108 = v194;
        if (!specialized static Comparable.<= infix(_:_:)(a3 + v110 + 1, v104))
          goto LABEL_172;
        if (((v194 + a3 + v110 + 1) & 0x8000000000000000) == 0 && (uint64_t)(~v110 + v111) >= 1)
        {
          if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v110 + 1) == 10)
            v114 = a3 + v110 + 1;
LABEL_172:
          v58 = __OFADD__(v13++, 1);
          if (!v58)
          {
            a3 = v114 + 1;
LABEL_174:
            v107 = v189;
            if (a3 >= v106)
            {
              v21 = 0;
LABEL_176:
              v105 = v180;
              v52 = v185;
LABEL_180:
              v65 = v105;
              goto LABEL_181;
            }
            goto LABEL_157;
          }
LABEL_279:
          __break(1u);
LABEL_280:
          __break(1u);
LABEL_281:
          __break(1u);
        }
        __break(1u);
LABEL_283:
        __break(1u);
LABEL_284:
        __break(1u);
LABEL_285:
        __break(1u);
LABEL_286:
        __break(1u);
LABEL_287:
        __break(1u);
LABEL_288:
        __break(1u);
LABEL_289:
        __break(1u);
LABEL_290:
        __break(1u);
LABEL_291:
        __break(1u);
        goto LABEL_292;
      }
      v21 = v110 + 1;
      if (__OFADD__(v110, 1))
        goto LABEL_264;
      ++v110;
      --v109;
      if (a3 + v110 >= v106)
        goto LABEL_176;
    }
    __break(1u);
LABEL_264:
    __break(1u);
LABEL_265:
    __break(1u);
LABEL_266:
    __break(1u);
LABEL_267:
    __break(1u);
    goto LABEL_268;
  }
  if (!a2)
    goto LABEL_267;
  v16 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a1);
  if (v16 == 48)
  {
    v177 = a7;
    if (v13 >= 1)
      v17 = 1;
    else
      v17 = v13;
    if (v13 >= 2)
    {
      v18 = v14 + v17;
      v19 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v14 + v17);
      v20 = 0;
      if (v19 <= 0x57u)
      {
        v21 = v14;
        if (v19 == 46 || v19 == 69)
          goto LABEL_47;
        goto LABEL_110;
      }
      if (v19 == 120)
      {
LABEL_12:
        v21 = v18 + 1;
        if (specialized static Comparable.<= infix(_:_:)(v18 + 1, v14 + v13))
        {
LABEL_13:
          v22 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v21);
          v23 = 1;
          if (!UInt8.isValidHexDigit.getter(v22))
          {
            v150 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v21, a3, v11);
            v152 = v151;
            v154 = v153;
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_OWORD *)v155 = xmmword_18206BE50;
            *(_QWORD *)(v155 + 16) = v22;
            *(_QWORD *)(v155 + 24) = v150;
            *(_QWORD *)(v155 + 32) = v152;
            *(_QWORD *)(v155 + 40) = v154;
            *(_BYTE *)(v155 + 48) = 1;
            return swift_willThrow();
          }
          v24 = 0;
LABEL_76:
          result = v177(v14, v13, v23);
          if ((result & 0x10000) == 0)
            return result;
          if ((v24 & 1) != 0)
          {
            v60 = static String._fromUTF8Repairing(_:)();
            v62 = v61;
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_QWORD *)v63 = v60;
            *(_QWORD *)(v63 + 8) = v62;
            *(_OWORD *)(v63 + 16) = 0u;
            *(_OWORD *)(v63 + 32) = 0u;
            v64 = 11;
LABEL_234:
            *(_BYTE *)(v63 + 48) = v64;
            return swift_willThrow();
          }
          return ((uint64_t (*)(unint64_t, unint64_t, uint64_t, unint64_t, unint64_t, uint64_t))a8)(v187 & 1, v14, v13, a3, v11, v21);
        }
        if (v13 - v17 < 1)
          goto LABEL_290;
        goto LABEL_221;
      }
      if (v19 != 101)
      {
        if (v19 == 88)
          goto LABEL_12;
LABEL_110:
        v78 = _asciiNumbers.getter();
        v34 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v14 + v17, a3, v11);
        v36 = v79;
        v38 = v80;
        if (v19 >= v78)
        {
          v39 = HIBYTE(v78);
LABEL_112:
          if (v39 >= v19)
          {
LABEL_113:
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_QWORD *)v63 = v34;
            *(_QWORD *)(v63 + 8) = v36;
            *(_QWORD *)(v63 + 16) = v38;
            *(_QWORD *)(v63 + 24) = 0;
            *(_QWORD *)(v63 + 32) = 0;
            *(_QWORD *)(v63 + 40) = 0;
            v64 = 10;
            goto LABEL_234;
          }
          goto LABEL_184;
        }
        goto LABEL_184;
      }
LABEL_46:
      v21 = v14;
      goto LABEL_47;
    }
LABEL_45:
    v20 = 0;
    goto LABEL_46;
  }
  if ((v16 - 58) >= 0xF7u)
  {
    v177 = a7;
    goto LABEL_45;
  }
  switch(v16)
  {
    case '+':
    case '-':
      if (v13 < 2)
      {
        if (v13 != 1)
          goto LABEL_287;
        v117 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v14);
        v118 = v14 - a3;
        if (v14 < a3)
          goto LABEL_288;
        v119 = v117;
        if (!specialized static Comparable.<= infix(_:_:)(v14, a3 + v11))
          goto LABEL_289;
        v120 = specialized min<A>(_:_:)(v14 + 1, a3 + v11);
        if (v120 <= a3)
        {
          v130 = 0;
          v124 = 1;
          goto LABEL_238;
        }
        v121 = v120;
        v181 = v119;
        v186 = v14 - a3;
        v122 = v11 + a3;
        v123 = -(uint64_t)a3;
        v124 = 1;
        v190 = v122;
        v195 = -(uint64_t)a3;
LABEL_195:
        v125 = 0;
        v126 = 0;
        v127 = v122 - a3;
        v128 = v123 + a3;
        while (1)
        {
          if ((uint64_t)(v128 + v126) < 0 || (uint64_t)(v127 + v125) < 1)
            goto LABEL_269;
          v129 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v126);
          if (v129 == 10)
            break;
          if (v129 == 13)
          {
            v131 = a3 + v126;
            if (!specialized static Comparable.<= infix(_:_:)(a3 + v126 + 1, v14))
              goto LABEL_210;
            if (((v195 + a3 + v126 + 1) & 0x8000000000000000) == 0 && (uint64_t)(~v126 + v127) >= 1)
            {
              if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v126 + 1) == 10)v131 = a3 + v126 + 1;
LABEL_210:
              v58 = __OFADD__(v124++, 1);
              if (!v58)
              {
                a3 = v131 + 1;
LABEL_212:
                v122 = v190;
                v123 = v195;
                if (a3 >= v121)
                {
                  v130 = 0;
LABEL_214:
                  v119 = v181;
                  v118 = v186;
LABEL_238:
                  lazy protocol witness table accessor for type JSONError and conformance JSONError();
                  swift_allocError();
                  *(_QWORD *)v149 = 0xD000000000000010;
                  *(_QWORD *)(v149 + 8) = 0x80000001823071F0;
                  *(_QWORD *)(v149 + 16) = v119;
                  *(_QWORD *)(v149 + 24) = v124;
                  *(_QWORD *)(v149 + 32) = v130;
                  *(_QWORD *)(v149 + 40) = v118;
                  *(_BYTE *)(v149 + 48) = 1;
                  return swift_willThrow();
                }
                goto LABEL_195;
              }
LABEL_295:
              __break(1u);
LABEL_296:
              __break(1u);
LABEL_297:
              __break(1u);
            }
            __break(1u);
LABEL_299:
            __break(1u);
            JUMPOUT(0x181E41258);
          }
          v130 = v126 + 1;
          if (__OFADD__(v126, 1))
            goto LABEL_270;
          ++v126;
          --v125;
          if (a3 + v126 >= v121)
            goto LABEL_214;
        }
        v58 = __OFADD__(v124++, 1);
        if (!v58)
        {
          a3 += v126 + 1;
          goto LABEL_212;
        }
        goto LABEL_294;
      }
      v21 = v14 + 1;
      v40 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v14 + 1);
      if (v40 == 48)
      {
        v177 = a7;
        v18 = v14 + 2;
        if (specialized Collection.isEmpty.getter(v14 + 2, v13 - 2))
        {
          v20 = 0;
          goto LABEL_47;
        }
        v157 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v18);
        v20 = 0;
        v158 = v157;
        if (v157 > 0x57u)
        {
          if (v157 != 120)
          {
            if (v157 == 101)
              goto LABEL_47;
            if (v157 != 88)
            {
LABEL_251:
              v159 = _asciiNumbers.getter();
              v34 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v18, a3, v11);
              v36 = v160;
              v38 = v161;
              if (v157 >= v159 && HIBYTE(v159) >= v157)
                goto LABEL_113;
              v49 = v157;
              goto LABEL_185;
            }
          }
          v21 = v14 + 3;
          if (specialized static Comparable.<= infix(_:_:)(v14 + 3, v14 + v13))
            goto LABEL_13;
          if (v13 - 2 >= 1)
          {
LABEL_221:
            v139 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v18);
            v134 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v18, a3, v11);
            v136 = v140;
            v138 = v141;
            v142 = v139;
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_OWORD *)v63 = xmmword_18206BE50;
LABEL_231:
            *(_QWORD *)(v63 + 16) = v142;
            goto LABEL_232;
          }
          __break(1u);
        }
        if (v158 == 46 || v158 == 69)
          goto LABEL_47;
        goto LABEL_251;
      }
      v143 = v40;
      if ((v40 - 58) >= 0xF7u)
        goto LABEL_257;
      if (v40 == 46)
        goto LABEL_256;
      if (v40 != 78)
      {
        if (v40 == 73)
        {
          v144 = (char *)specialized BufferView.dropFirst(_:)(1, v14, v13);
          result = specialized static JSON5Scanner.validateInfinity(from:fullSource:)(v144, v145, a3, v11);
          if (v9)
            return result;
          v177 = a7;
          v20 = 1;
          goto LABEL_47;
        }
        v197 = 0;
        v198 = 0xE000000000000000;
        _StringGuts.grow(_:)(20);
        v166._countAndFlagsBits = 0x27207265746661;
        v166._object = (void *)0xE700000000000000;
        DefaultStringInterpolation.appendLiteral(_:)(v166);
        v167 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v14);
        v168 = (v167 + 1);
        if ((v167 & 0x80) != 0)
          v168 = (((v167 & 0x3F) << 8) | (v167 >> 6)) + 33217;
        v196 = (v168 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v168) >> 3)) & 7)));
        v169._countAndFlagsBits = MEMORY[0x186DA46D0](&v196);
        specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v169);
        swift_bridgeObjectRelease();
        v170._countAndFlagsBits = 0x6D756E206E692027;
        v170._object = (void *)0xEB00000000726562;
        DefaultStringInterpolation.appendLiteral(_:)(v170);
        v171 = v197;
        v172 = v198;
        v173 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v21, a3, v11);
        v175 = v174;
        v102 = v176;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_QWORD *)v63 = v171;
        *(_QWORD *)(v63 + 8) = v172;
        *(_QWORD *)(v63 + 16) = v143;
        *(_QWORD *)(v63 + 24) = v173;
        *(_QWORD *)(v63 + 32) = v175;
LABEL_148:
        *(_QWORD *)(v63 + 40) = v102;
LABEL_233:
        v64 = 1;
        goto LABEL_234;
      }
      v164 = (char *)specialized BufferView.dropFirst(_:)(1, v14, v13);
      result = specialized static JSON5Scanner.validateNaN(from:fullSource:)(v164, v165, a3, v11);
      if (v9)
        return result;
      v177 = a7;
      v20 = 1;
LABEL_47:
      v24 = v20;
      v50 = v14 + v13;
      v51 = v14 + v13 - 1;
      v182 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v51);
      if ((v182 | 0x20) != 0x65)
      {
        v23 = 0;
        goto LABEL_76;
      }
      v52 = v51 - a3;
      if (v51 < a3 || a3 + v11 < v51)
        goto LABEL_272;
      v53 = v11;
      if (a3 + v11 >= v50)
        v11 = v50;
      else
        v11 += a3;
      if (v11 <= a3)
      {
        v21 = 0;
        v13 = 1;
        goto LABEL_80;
      }
      v178 = v51 - a3;
      v54 = v53 + a3;
      v55 = -(uint64_t)a3;
      v13 = 1;
      v187 = v53 + a3;
      a8 = -(uint64_t)a3;
      do
      {
        v10 = 0;
        v14 = 0;
        v56 = v54 - a3;
        a7 = (uint64_t (*)(unint64_t, uint64_t, uint64_t))(v55 + a3);
        while (1)
        {
          if ((uint64_t)((uint64_t)a7 + v14) < 0 || (uint64_t)(v56 + v10) < 1)
          {
            __break(1u);
LABEL_255:
            __break(1u);
LABEL_256:
            v162 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2, v14, v13);
            result = (uint64_t)specialized static JSON5Scanner.validateLeadingDecimal(from:fullSource:)(v162, v163, a3, v11);
            if (v10)
              return result;
LABEL_257:
            v177 = a7;
            v20 = 0;
            goto LABEL_47;
          }
          v57 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v14);
          if (v57 == 10)
          {
            v58 = __OFADD__(v13++, 1);
            v55 = a8;
            if (!v58)
            {
              a3 += v14 + 1;
              goto LABEL_72;
            }
LABEL_276:
            __break(1u);
LABEL_277:
            __break(1u);
LABEL_278:
            __break(1u);
            goto LABEL_279;
          }
          if (v57 == 13)
            break;
          v21 = v14 + 1;
          if (__OFADD__(v14, 1))
            goto LABEL_255;
          ++v14;
          --v10;
          if (a3 + v14 >= v11)
            goto LABEL_74;
        }
        v21 = a3 + v14;
        v55 = a8;
        if (!specialized static Comparable.<= infix(_:_:)(a3 + v14 + 1, v51))
          goto LABEL_70;
        if (((a8 + a3 + v14 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v14 + v56) < 1)
          goto LABEL_281;
        if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v14 + 1) == 10)
          v21 = a3 + v14 + 1;
LABEL_70:
        v58 = __OFADD__(v13++, 1);
        if (v58)
          goto LABEL_277;
        a3 = v21 + 1;
LABEL_72:
        v54 = v187;
      }
      while (a3 < v11);
      v21 = 0;
LABEL_74:
      v52 = v178;
LABEL_80:
      v65 = v182;
LABEL_181:
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(_QWORD *)v115 = 0xD000000000000010;
      *(_QWORD *)(v115 + 8) = 0x80000001823071F0;
      *(_QWORD *)(v115 + 16) = v65;
      *(_QWORD *)(v115 + 24) = v13;
      *(_QWORD *)(v115 + 32) = v21;
      *(_QWORD *)(v115 + 40) = v52;
      *(_BYTE *)(v115 + 48) = 1;
      return swift_willThrow();
    case '.':
      if (v13 >= 1)
        v132 = 1;
      else
        v132 = v13;
      v133 = v14 + v132;
      if (specialized Collection.isEmpty.getter(v14 + v132, v13 - v132))
      {
        v134 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v133, a3, v11);
        v136 = v135;
        v138 = v137;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_QWORD *)v63 = 0;
        *(_QWORD *)(v63 + 8) = 0;
        *(_QWORD *)(v63 + 16) = 46;
LABEL_232:
        *(_QWORD *)(v63 + 24) = v134;
        *(_QWORD *)(v63 + 32) = v136;
        *(_QWORD *)(v63 + 40) = v138;
        goto LABEL_233;
      }
      v177 = a7;
      LOBYTE(v142) = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v133);
      v146 = _asciiNumbers.getter();
      if (v142 >= v146
        && HIBYTE(v146) >= v142)
      {
        goto LABEL_45;
      }
      v134 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v133, a3, v11);
      v136 = v147;
      v138 = v148;
      v142 = v142;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(_QWORD *)v63 = 0xD000000000000013;
      *(_QWORD *)(v63 + 8) = 0x80000001823071D0;
      goto LABEL_231;
    case 'I':
      result = closure #1 in static JSON5Scanner.validateInfinity(from:fullSource:)((const char *)v14, v13, v14, v13, a3, v11);
      goto LABEL_188;
    case 'N':
      result = specialized BufferView.withUnsafeRawPointer<A>(_:)((const char *)v14, v13, v14, v13, a3, v11);
LABEL_188:
      if (v9)
        return result;
      v177 = a7;
      v20 = 1;
      goto LABEL_46;
    default:
      goto LABEL_286;
  }
}

char *specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(__int16 a1, char *a2, uint64_t a3, unint64_t a4, unint64_t i, uint64_t a6, uint64_t (*a7)(char **))
{
  int v7;
  const char *v9;
  unint64_t v15;
  double v16;
  BOOL v17;
  const char *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  size_t v24;
  char v25;
  char v26;
  const char *v27;
  char v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  unint64_t v39;
  int v40;
  unint64_t v41;
  int v42;
  __int16 v43;
  __int16 v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  __int16 v49;
  __int16 v50;
  int v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char v57;
  unsigned __int8 *v58;
  char v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  int v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  unsigned __int8 *v75;
  unsigned __int8 *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v92;
  char v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  int v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  int v113;
  uint64_t v114;
  Swift::String v115;
  Swift::String v116;
  unint64_t v117;
  unint64_t v118;
  int isNegative_getter;
  char *v120[2];
  __int16 v121;
  __int16 v122;
  _BYTE v123[40];
  char *v124;
  char *v125;
  unsigned __int16 v126;
  unsigned __int16 v127;
  char v128;
  uint64_t v129;

  LODWORD(v9) = v7;
  LOWORD(v15) = a1;
  v129 = *MEMORY[0x1E0C80C00];
  v120[0] = 0;
  v16 = _stringshims_strtod_l(a2, v120, 0);
  if (v120[0])
    v17 = &a2[a3] == v120[0];
  else
    v17 = 0;
  if (v17)
  {
    v29 = v16;
    if ((a7(v120) & 1) == 0 || ((uint64_t)v120[1] & 1) != 0)
      goto LABEL_186;
    if (fabs(v29) < 9.00719925e15)
      return v120[0];
  }
  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)((uint64_t)a2, a3, 0x2EuLL, 0xE100000000000000, 1, (uint64_t)v123);
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v123, (uint64_t)&v124);
  if (v128 != 1)
  {
LABEL_43:
    LODWORD(v22) = (_DWORD)v124;
    v21 = (unint64_t)v124 >> 48;
    a3 = (unsigned __int16)v125;
    v33 = (unint64_t)v124 >> 32;
    v34 = WORD1(v125);
    v35 = WORD2(v125);
    v36 = HIWORD(v125);
    v37 = v126;
    i = v127;
    v120[0] = v124;
    v120[1] = v125;
    v121 = v126;
    v122 = v127;
    isNegative_getter = _So9NSDecimala__isNegative_getter(v120);
    LODWORD(v120[0]) = v22;
    WORD2(v120[0]) = v33;
    HIWORD(v120[0]) = v21;
    LOWORD(v120[1]) = a3;
    WORD1(v120[1]) = v34;
    WORD2(v120[1]) = v35;
    HIWORD(v120[1]) = v36;
    v121 = v37;
    v122 = i;
    v38 = _So9NSDecimala__length_getter(v120);
    v39 = v36;
    a4 = v35;
    v15 = v34;
    v9 = (const char *)a3;
    LOWORD(a3) = v33;
    if (!v38 && isNegative_getter)
      goto LABEL_186;
    LODWORD(v120[0]) = v22;
    WORD2(v120[0]) = v33;
    HIWORD(v120[0]) = v21;
    LOWORD(v120[1]) = (_WORD)v9;
    WORD1(v120[1]) = v15;
    WORD2(v120[1]) = a4;
    v117 = v37;
    v118 = v39;
    HIWORD(v120[1]) = v39;
    v121 = v37;
    v122 = i;
    v40 = _So9NSDecimala__length_getter(v120);
    if (!v40)
      goto LABEL_259;
    v41 = 0;
    v42 = v40 - 1;
    if (v40 != 1)
    {
      v43 = v117;
      v44 = v118;
      while (2)
      {
        v45 = v21;
        switch(v42)
        {
          case 1:
            goto LABEL_55;
          case 2:
            v45 = (unint64_t)v9;
            goto LABEL_55;
          case 3:
            v45 = v15;
            goto LABEL_55;
          case 4:
            v45 = a4;
            goto LABEL_55;
          case 5:
            v45 = v118;
            goto LABEL_55;
          case 6:
            v45 = v117;
            goto LABEL_55;
          case 7:
            v45 = i;
LABEL_55:
            if (HIWORD(v41))
              goto LABEL_186;
            v41 = v45 | (v41 << 16);
            if (--v42)
              continue;
            if (HIWORD(v41))
              goto LABEL_186;
            goto LABEL_70;
          default:
            goto LABEL_285;
        }
      }
    }
    v43 = v117;
    v44 = v118;
LABEL_70:
    v49 = i;
    for (i = (unsigned __int16)v33 | (v41 << 16); ; i = 0)
    {
      LODWORD(v120[0]) = v22;
      WORD2(v120[0]) = a3;
      HIWORD(v120[0]) = v21;
      LOWORD(v120[1]) = (_WORD)v9;
      WORD1(v120[1]) = v15;
      WORD2(v120[1]) = a4;
      HIWORD(v120[1]) = v44;
      v121 = v43;
      v122 = v49;
      v50 = v43;
      if ((_So9NSDecimala__exponent_getter((char *)v120) & 0x80000000) == 0)
        break;
      LODWORD(v120[0]) = v22;
      WORD2(v120[0]) = a3;
      HIWORD(v120[0]) = v21;
      LOWORD(v120[1]) = (_WORD)v9;
      WORD1(v120[1]) = v15;
      WORD2(v120[1]) = a4;
      HIWORD(v120[1]) = v118;
      v121 = v50;
      v122 = v49;
      v88 = _So9NSDecimala__exponent_getter((char *)v120);
      if (v88 > 0)
        goto LABEL_270;
      if (!v88)
        goto LABEL_178;
      v89 = -v88 & ~(-v88 >> 31);
      v90 = ~v88;
      while (v89 > v90)
      {
        i /= 0xAuLL;
        if (__CFADD__(v88++, 1))
          goto LABEL_178;
      }
LABEL_253:
      __break(1u);
LABEL_254:
      __break(1u);
LABEL_255:
      __break(1u);
LABEL_256:
      __break(1u);
LABEL_257:
      __break(1u);
LABEL_258:
      __break(1u);
LABEL_259:
      v49 = i;
      v43 = v117;
      v44 = v118;
    }
    LODWORD(v120[0]) = v22;
    WORD2(v120[0]) = a3;
    HIWORD(v120[0]) = v21;
    LOWORD(v120[1]) = (_WORD)v9;
    WORD1(v120[1]) = v15;
    WORD2(v120[1]) = a4;
    HIWORD(v120[1]) = v118;
    v121 = v50;
    v122 = v49;
    v51 = _So9NSDecimala__exponent_getter((char *)v120);
    if ((v51 & 0x80000000) == 0)
    {
      if (v51)
      {
        if (!is_mul_ok(i, 0xAuLL))
          goto LABEL_186;
        i *= 10;
        v52 = v51 - 1;
        if (v51 != 1)
        {
          if (!is_mul_ok(i, 0xAuLL))
            goto LABEL_186;
          i *= 10;
          while (--v52)
          {
            v53 = (i * (unsigned __int128)0xAuLL) >> 64;
            i *= 10;
            if (v53)
              goto LABEL_186;
          }
        }
      }
LABEL_178:
      if (!isNegative_getter)
        goto LABEL_185;
      if ((i & 0x8000000000000000) == 0)
        return (char *)-(uint64_t)i;
LABEL_186:
      v94 = static String._fromUTF8Repairing(_:)();
      i = v95;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(_QWORD *)v92 = v94;
      *(_QWORD *)(v92 + 8) = i;
      *(_OWORD *)(v92 + 16) = 0u;
      *(_OWORD *)(v92 + 32) = 0u;
      v93 = 11;
      goto LABEL_187;
    }
LABEL_268:
    __break(1u);
    goto LABEL_269;
  }
  v18 = (const char *)specialized BufferView.suffix(from:)(a6, (uint64_t)a2, a3);
  v20 = (unsigned __int8 *)v18;
  v21 = v19;
  v22 = (unint64_t)&v18[v19];
  if ((v15 & 1) == 0)
  {
    if (v19 <= 0)
    {
      v48 = (unsigned __int8 *)v18;
      goto LABEL_95;
    }
    v46 = 0;
    v47 = v19;
    while (1)
    {
      if (v46 < 0 || (v32 = v47 < 1, --v47, v32))
      {
        __break(1u);
LABEL_247:
        __break(1u);
LABEL_248:
        __break(1u);
LABEL_249:
        __break(1u);
LABEL_250:
        __break(1u);
LABEL_251:
        __break(1u);
LABEL_252:
        __break(1u);
        goto LABEL_253;
      }
      if (v18[v46] - 58 < 0xFFFFFFF6)
        break;
      v48 = (unsigned __int8 *)&v18[++v46];
      if ((unint64_t)&v18[v46] >= v22)
        goto LABEL_95;
    }
LABEL_94:
    v48 = &v20[v46];
LABEL_95:
    if ((unint64_t)v48 < v22)
    {
      v57 = 0;
      v58 = (unsigned __int8 *)(v48 - v20);
      v59 = 1;
      v60 = 1;
      while (1)
      {
        v61 = 0;
        v62 = &v20[v21] - v48;
        while (1)
        {
          if (v48 - v20 + v61 < 0 || (v32 = v62 < 1, --v62, v32))
          {
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            v79 = (unint64_t)&v48[v61];
            if ((unint64_t)&v48[v61] >= a4)
            {
              v80 = a4 + i;
              if (a4 + i >= v79)
              {
                if (v80 >= (unint64_t)&v48[v61 + 1])
                  v80 = (unint64_t)&v48[v61 + 1];
                if (v80 > a4)
                {
                  v81 = i + a4;
                  i = 1;
                  v82 = a4;
                  while (1)
                  {
                    v83 = 0;
                    v84 = 0;
                    v85 = v81 - v82;
                    while (1)
                    {
                      if ((uint64_t)(v82 - a4 + v84) < 0 || (uint64_t)(v85 + v83) < 1)
                        goto LABEL_254;
                      v86 = *(unsigned __int8 *)(v82 + v84);
                      if (v86 == 10)
                      {
                        v72 = __OFADD__(i++, 1);
                        if (!v72)
                        {
                          v82 += v84 + 1;
                          goto LABEL_169;
                        }
                        goto LABEL_274;
                      }
                      if (v86 == 13)
                        break;
                      a3 = v84 + 1;
                      if (__OFADD__(v84, 1))
                        goto LABEL_255;
                      ++v84;
                      --v83;
                      if (v82 + v84 >= v80)
                        goto LABEL_215;
                    }
                    v87 = v82 + v84;
                    if (v79 < v82 + v84 + 1)
                      goto LABEL_167;
                    if (((v82 - a4 + v84 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v84 + v85) < 1)
                      goto LABEL_280;
                    if (*(_BYTE *)(v87 + 1) == 10)
                      v87 = v82 + v84 + 1;
LABEL_167:
                    v72 = __OFADD__(i++, 1);
                    if (v72)
                      goto LABEL_275;
                    v82 = v87 + 1;
LABEL_169:
                    if (v82 >= v80)
                    {
                      a3 = 0;
                      goto LABEL_215;
                    }
                  }
                }
                a3 = 0;
                i = 1;
LABEL_215:
                v76 = &v48[v61 - a4];
                goto LABEL_243;
              }
            }
LABEL_269:
            __break(1u);
LABEL_270:
            __break(1u);
LABEL_271:
            __break(1u);
LABEL_272:
            __break(1u);
LABEL_273:
            __break(1u);
LABEL_274:
            __break(1u);
LABEL_275:
            __break(1u);
LABEL_276:
            __break(1u);
LABEL_277:
            __break(1u);
LABEL_278:
            __break(1u);
            goto LABEL_279;
          }
          LODWORD(v9) = v48[v61];
          if (((_DWORD)v9 - 58) < 0xFFFFFFF6)
            break;
          if (__OFADD__(&v58[v61], 1))
            goto LABEL_144;
          if ((unint64_t)&v48[++v61] >= v22)
            goto LABEL_145;
        }
        v63 = (uint64_t)&v58[v61];
        switch(v48[v61])
        {
          case '+':
          case '-':
            if (v63 != 0 || (v57 & 1) == 0)
              goto LABEL_140;
            v58 = 0;
            v57 = 0;
            v59 = 0;
            v60 = 0;
            v48 += v61 + 1;
            if ((unint64_t)v48 >= v22)
              goto LABEL_247;
            continue;
          case ',':
          case '/':
          case '0':
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
          case ':':
          case ';':
          case '<':
          case '=':
          case '>':
          case '?':
          case '@':
          case 'A':
          case 'B':
          case 'C':
          case 'D':
            goto LABEL_140;
          case '.':
            if (v63 < 1 || (v60 & 1) == 0)
            {
              v97 = (unint64_t)&v48[v61];
              if ((unint64_t)&v48[v61] < a4)
                goto LABEL_273;
              v98 = a4 + i;
              if (a4 + i < v97)
                goto LABEL_273;
              if (v98 >= (unint64_t)&v48[v61 + 1])
                v98 = (unint64_t)&v48[v61 + 1];
              if (v98 <= a4)
              {
                a3 = 0;
                i = 1;
              }
              else
              {
                v99 = i + a4;
                i = 1;
                v100 = a4;
                do
                {
                  v101 = 0;
                  v102 = 0;
                  v103 = v99 - v100;
                  while (1)
                  {
                    if ((uint64_t)(v100 - a4 + v102) < 0 || (uint64_t)(v103 + v101) < 1)
                      goto LABEL_256;
                    v104 = *(unsigned __int8 *)(v100 + v102);
                    if (v104 == 10)
                      break;
                    if (v104 == 13)
                    {
                      v105 = v100 + v102;
                      if (v97 < v100 + v102 + 1)
                        goto LABEL_208;
                      if (((v100 - a4 + v102 + 1) & 0x8000000000000000) == 0 && (uint64_t)(~v102 + v103) >= 1)
                      {
                        if (*(_BYTE *)(v105 + 1) == 10)
                          v105 = v100 + v102 + 1;
LABEL_208:
                        v72 = __OFADD__(i++, 1);
                        if (!v72)
                        {
                          v100 = v105 + 1;
                          goto LABEL_212;
                        }
LABEL_279:
                        __break(1u);
LABEL_280:
                        __break(1u);
LABEL_281:
                        __break(1u);
LABEL_282:
                        __break(1u);
                      }
                      __break(1u);
                    }
                    a3 = v102 + 1;
                    if (__OFADD__(v102, 1))
                      goto LABEL_257;
                    ++v102;
                    --v101;
                    if (v100 + v102 >= v98)
                      goto LABEL_242;
                  }
                  v72 = __OFADD__(i++, 1);
                  if (v72)
                    goto LABEL_278;
                  v100 += v102 + 1;
LABEL_212:
                  ;
                }
                while (v100 < v98);
                a3 = 0;
              }
LABEL_242:
              v76 = &v48[v61 - a4];
              LODWORD(v9) = 46;
LABEL_243:
              lazy protocol witness table accessor for type JSONError and conformance JSONError();
              swift_allocError();
              *(_OWORD *)v92 = xmmword_18206BE50;
              *(_QWORD *)(v92 + 16) = v9;
              *(_QWORD *)(v92 + 24) = i;
              *(_QWORD *)(v92 + 32) = a3;
              *(_QWORD *)(v92 + 40) = v76;
              v93 = 1;
LABEL_187:
              *(_BYTE *)(v92 + 48) = v93;
              swift_willThrow();
              return (char *)i;
            }
            v58 = 0;
            v57 = 0;
            v60 = 0;
            v48 += v61 + 1;
            v59 = 1;
            if ((unint64_t)v48 >= v22)
            {
              __break(1u);
              goto LABEL_115;
            }
            break;
          case 'E':
            goto LABEL_109;
          default:
            if ((_DWORD)v9 != 101)
            {
LABEL_140:
              i = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)&v48[v61], a4, i);
              a3 = v74;
              v76 = v75;
              goto LABEL_243;
            }
LABEL_109:
            if (v63 < 1 || (v59 & 1) == 0)
              goto LABEL_146;
            v58 = 0;
            v59 = 0;
            v60 = 0;
            v48 += v61 + 1;
            v57 = 1;
            if ((unint64_t)v48 >= v22)
              goto LABEL_248;
            continue;
        }
      }
    }
    goto LABEL_263;
  }
  if (v19 < 1)
    goto LABEL_258;
  v23 = *(unsigned __int8 *)v18;
  if (v23 == 45 || (v9 = v18, v23 == 43))
    v9 = v18 + 1;
  if (v22 < (unint64_t)v9)
  {
    __break(1u);
    goto LABEL_261;
  }
  v15 = v9 - v18;
  if (v9 - v18 < 0)
  {
LABEL_261:
    __break(1u);
    goto LABEL_262;
  }
  if ((uint64_t)(v22 - (_QWORD)v9) < 0)
  {
LABEL_262:
    __break(1u);
LABEL_263:
    __break(1u);
LABEL_264:
    __break(1u);
LABEL_265:
    __break(1u);
    goto LABEL_266;
  }
  if ((uint64_t)(v22 - (_QWORD)v9) >= 2)
    v24 = 2;
  else
    v24 = v22 - (_QWORD)v9;
  if (!_stringshims_strncasecmp_l(v9, "0x", v24, 0))
  {
    v48 = (unsigned __int8 *)(v9 + 2);
    v46 = v22 - (_QWORD)(v9 + 2);
    if (v46 >= 1 && (unint64_t)v48 < v22)
    {
      v46 = v48 - v20;
      if (((v48 - v20) & 0x8000000000000000) == 0)
      {
        a3 = (uint64_t)&v9[-a4 + 2];
        v46 = &v20[v21] - (unsigned __int8 *)v9 - 3;
        v54 = v15 + 3;
        while (1)
        {
          v55 = v54;
          v21 = *v48;
          if ((v21 - 58) <= 0xF5u
            && (*v48 - 65 > 0x25 || ((1 << (v21 - 65)) & 0x3F0000003FLL) == 0))
          {
            break;
          }
          v32 = v46-- < 1;
          if (!v32 && (unint64_t)++v48 < v22)
          {
            ++a3;
            ++v54;
            if ((v55 & 0x8000000000000000) == 0)
              continue;
          }
          goto LABEL_93;
        }
LABEL_115:
        if ((unint64_t)v48 >= a4)
        {
          v64 = a4 + i;
          if (a4 + i >= (unint64_t)v48)
          {
            if (v64 >= (unint64_t)(v48 + 1))
              v64 = (unint64_t)(v48 + 1);
            if (v64 > a4)
            {
              v65 = -(uint64_t)a4;
              v66 = i + a4;
              i = 1;
              while (1)
              {
                v67 = 0;
                v68 = 0;
                v69 = v66 - a4;
                while (1)
                {
                  if ((uint64_t)(v65 + a4 + v68) < 0 || (uint64_t)(v69 + v67) < 1)
                    goto LABEL_249;
                  v70 = *(unsigned __int8 *)(a4 + v68);
                  if (v70 == 10)
                  {
                    v72 = __OFADD__(i++, 1);
                    if (!v72)
                    {
                      a4 += v68 + 1;
                      goto LABEL_138;
                    }
                    goto LABEL_271;
                  }
                  if (v70 == 13)
                    break;
                  v71 = v68 + 1;
                  if (__OFADD__(v68, 1))
                    goto LABEL_250;
                  ++v68;
                  --v67;
                  if (a4 + v68 >= v64)
                  {
                    v15 = 0xED00007265626D75;
                    v22 = 0x6E20786568206E69;
                    goto LABEL_181;
                  }
                }
                v73 = a4 + v68;
                if ((unint64_t)v48 < a4 + v68 + 1)
                  goto LABEL_136;
                if (((v65 + a4 + v68 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v68 + v69) < 1)
                  goto LABEL_276;
                if (*(_BYTE *)(v73 + 1) == 10)
                  v73 = a4 + v68 + 1;
LABEL_136:
                v72 = __OFADD__(i++, 1);
                if (v72)
                  goto LABEL_272;
                a4 = v73 + 1;
LABEL_138:
                v15 = 0xED00007265626D75;
                v22 = 0x6E20786568206E69;
                if (a4 >= v64)
                {
                  v71 = 0;
                  goto LABEL_181;
                }
              }
            }
            v71 = 0;
            v15 = 0xED00007265626D75;
            v22 = 0x6E20786568206E69;
            i = 1;
LABEL_181:
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_QWORD *)v92 = v22;
            *(_QWORD *)(v92 + 8) = v15;
            *(_QWORD *)(v92 + 16) = v21;
            *(_QWORD *)(v92 + 24) = i;
            *(_QWORD *)(v92 + 32) = v71;
            *(_QWORD *)(v92 + 40) = a3;
            v93 = 1;
            goto LABEL_187;
          }
        }
LABEL_267:
        __break(1u);
        goto LABEL_268;
      }
    }
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  if ((unint64_t)v9 >= v22)
  {
LABEL_266:
    __break(1u);
    goto LABEL_267;
  }
  v25 = 0;
  v26 = 0;
  v27 = (const char *)&v20[v21];
  v28 = 1;
LABEL_24:
  v30 = 0;
  v31 = v27 - v9;
  while (v9 - (const char *)v20 + v30 >= 0)
  {
    v32 = v31-- < 1;
    if (v32)
      break;
    LODWORD(v21) = v9[v30];
    if ((v21 - 58) <= 0xF5u)
    {
      switch(v9[v30])
      {
        case '+':
        case '-':
          if (v30 != 0 || (v25 & 1) == 0)
            goto LABEL_141;
          v25 = 0;
          v28 = 0;
          v9 += v30 + 1;
          v26 = 3;
          if ((unint64_t)v9 >= v22)
            goto LABEL_251;
          goto LABEL_24;
        case ',':
        case '/':
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        case ':':
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case '@':
        case 'A':
        case 'B':
        case 'C':
        case 'D':
          goto LABEL_141;
        case '.':
          if ((v28 & 1) == 0)
          {
            v106 = (unint64_t)&v9[v30];
            if ((unint64_t)&v9[v30] < a4)
              goto LABEL_277;
            v107 = a4 + i;
            if (a4 + i < v106)
              goto LABEL_277;
            if (v107 >= (unint64_t)&v9[v30 + 1])
              v107 = (unint64_t)&v9[v30 + 1];
            if (v107 > a4)
            {
              v108 = i + a4;
              i = 1;
              v109 = a4;
              while (1)
              {
                v110 = 0;
                v111 = 0;
                v112 = v108 - v109;
                while (1)
                {
                  if ((uint64_t)(v109 - a4 + v111) < 0 || (uint64_t)(v112 + v110) < 1)
                    goto LABEL_264;
                  v113 = *(unsigned __int8 *)(v109 + v111);
                  if (v113 == 10)
                  {
                    v72 = __OFADD__(i++, 1);
                    if (!v72)
                    {
                      v109 += v111 + 1;
                      goto LABEL_239;
                    }
                    goto LABEL_281;
                  }
                  if (v113 == 13)
                    break;
                  v71 = v111 + 1;
                  if (__OFADD__(v111, 1))
                    goto LABEL_265;
                  ++v111;
                  --v110;
                  if (v109 + v111 >= v107)
                    goto LABEL_245;
                }
                v114 = v109 + v111;
                if (v106 >= v109 + v111 + 1)
                {
                  if (((v109 - a4 + v111 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v111 + v112) < 1)
                  {
                    __break(1u);
LABEL_285:
                    v120[0] = 0;
                    v120[1] = (char *)0xE000000000000000;
                    _StringGuts.grow(_:)(30);
                    swift_bridgeObjectRelease();
                    strcpy((char *)v120, "Invalid index ");
                    HIBYTE(v120[1]) = -18;
                    v115._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                    String.append(_:)(v115);
                    swift_bridgeObjectRelease();
                    v116._countAndFlagsBits = 0x616D5F20726F6620;
                    v116._object = (void *)0xEE0061737369746ELL;
                    String.append(_:)(v116);
                    _assertionFailure(_:_:file:line:flags:)();
                    __break(1u);
                    JUMPOUT(0x181E4322CLL);
                  }
                  if (*(_BYTE *)(v114 + 1) == 10)
                    v114 = v109 + v111 + 1;
                }
                v72 = __OFADD__(i++, 1);
                if (v72)
                  goto LABEL_282;
                v109 = v114 + 1;
LABEL_239:
                if (v109 >= v107)
                {
                  v71 = 0;
                  goto LABEL_245;
                }
              }
            }
            v71 = 0;
            i = 1;
LABEL_245:
            a3 = (uint64_t)&v9[v30 - a4];
            LOBYTE(v21) = 46;
LABEL_142:
            v15 = 0xE900000000000072;
            v22 = 0x65626D756E206E69;
            goto LABEL_181;
          }
          v25 = 0;
          v28 = 0;
          v9 += v30 + 1;
          v26 = 1;
          if ((unint64_t)v9 >= v22)
          {
            __break(1u);
            goto LABEL_43;
          }
          break;
        case 'E':
          goto LABEL_36;
        default:
          if ((_DWORD)v21 != 101)
            goto LABEL_141;
LABEL_36:
          if (v26 != 1 && (v26 || v30 < 1))
          {
LABEL_141:
            i = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)&v9[v30], a4, i);
            v71 = v77;
            a3 = v78;
            goto LABEL_142;
          }
          v28 = 0;
          v9 += v30 + 1;
          v26 = 2;
          v25 = 1;
          if ((unint64_t)v9 >= v22)
            goto LABEL_252;
          goto LABEL_24;
      }
      goto LABEL_24;
    }
    if (__OFADD__(v30, 1))
      goto LABEL_183;
    if ((unint64_t)&v9[++v30] >= v22)
      goto LABEL_184;
  }
  __break(1u);
LABEL_183:
  __break(1u);
LABEL_184:
  __break(1u);
LABEL_185:
  if ((i & 0x8000000000000000) != 0)
    goto LABEL_186;
  return (char *)i;
}

char *specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5, char a6, uint64_t (*a7)(_BYTE *, uint64_t, uint64_t), uint64_t a8, uint64_t (*a9)(unint64_t, uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;
  char v16;
  uint64_t v17;
  unint64_t v18;
  unsigned __int8 v19;
  char v20;
  uint64_t v21;
  unsigned __int8 v22;
  char v23;
  char v24;
  char v27;
  uint64_t v28;
  unint64_t v29;
  unsigned __int8 v30;
  unsigned int v31;
  BOOL v32;
  __int16 v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  unint64_t v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  unsigned int v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  BOOL v58;
  char *result;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  __int16 v79;
  uint64_t v80;
  uint64_t v81;
  unsigned __int8 v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned __int8 v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unsigned __int8 v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  int v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  unsigned __int8 v119;
  unint64_t v120;
  unsigned __int8 v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unsigned __int8 v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unsigned __int8 v145;
  char *v146;
  uint64_t v147;
  __int16 v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unsigned __int8 v159;
  int v160;
  __int16 v161;
  uint64_t v162;
  uint64_t v163;
  unsigned __int8 *v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  Swift::String v168;
  unsigned __int8 v169;
  unsigned int v170;
  Swift::String v171;
  Swift::String v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t (*v177)(_BYTE *, uint64_t, uint64_t);
  unint64_t v178;
  unsigned __int8 v179;
  unsigned __int8 v180;
  unsigned __int8 v181;
  unsigned __int8 v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;

  v10 = v9;
  v11 = a4;
  v13 = a2;
  v14 = a1;
  LOBYTE(v187) = a5;
  if ((a5 & 1) == 0)
  {
    if (!a2)
    {
LABEL_268:
      __break(1u);
LABEL_269:
      __break(1u);
LABEL_270:
      __break(1u);
LABEL_271:
      __break(1u);
LABEL_272:
      __break(1u);
LABEL_273:
      __break(1u);
      goto LABEL_274;
    }
    v27 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a1);
    if (v27 == 48)
    {
      if (v13 >= 1)
        v28 = 1;
      else
        v28 = v13;
      v21 = v14;
      if (v13 >= 2)
      {
        v29 = v14 + v28;
        v30 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v14 + v28);
        v31 = v30;
        v32 = v30 - 46 > 0x37 || ((1 << (v30 - 46)) & 0x80000000800001) == 0;
        v21 = v14;
        if (v32)
        {
          v19 = v30;
          v33 = _asciiNumbers.getter();
          v34 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v29, a3, a4);
          v36 = v35;
          v38 = v37;
          if (v31 >= v33)
          {
            v39 = HIBYTE(v33);
            goto LABEL_112;
          }
LABEL_184:
          v49 = v19;
LABEL_185:
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_OWORD *)v64 = xmmword_18206BE50;
          *(_QWORD *)(v64 + 16) = v49;
          *(_QWORD *)(v64 + 24) = v34;
          *(_QWORD *)(v64 + 32) = v36;
          *(_QWORD *)(v64 + 40) = v38;
          goto LABEL_233;
        }
      }
    }
    else
    {
      v21 = v14;
      if ((v27 - 58) < 0xF7u)
      {
        if (v27 != 45)
        {
LABEL_275:
          __break(1u);
          goto LABEL_276;
        }
        if (v13 < 2)
        {
          v67 = v14 - a3;
          if (v14 < a3 || a3 + a4 < v14)
            goto LABEL_280;
          if (a3 + a4 >= v14 + 1)
            v68 = v14 + 1;
          else
            v68 = a3 + v11;
          if (v68 <= a3)
          {
            v77 = 0;
            v71 = 1;
          }
          else
          {
            v69 = a4 + a3;
            v70 = -(uint64_t)a3;
            v71 = 1;
            v183 = v14 - a3;
            v188 = a4 + a3;
            v192 = -(uint64_t)a3;
            do
            {
              v72 = 0;
              v73 = 0;
              v74 = v69 - a3;
              v75 = v70 + a3;
              while (1)
              {
                if ((uint64_t)(v75 + v73) < 0 || (uint64_t)(v74 + v72) < 1)
                  goto LABEL_265;
                v76 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v73);
                if (v76 == 10)
                {
                  v58 = __OFADD__(v71++, 1);
                  v70 = v192;
                  if (v58)
                    goto LABEL_284;
                  a3 += v73 + 1;
                  goto LABEL_105;
                }
                if (v76 == 13)
                  break;
                v77 = v73 + 1;
                if (__OFADD__(v73, 1))
                  goto LABEL_266;
                ++v73;
                --v72;
                if (a3 + v73 >= v68)
                  goto LABEL_107;
              }
              v78 = a3 + v73;
              v70 = v192;
              if (!specialized static Comparable.<= infix(_:_:)(a3 + v73 + 1, v14))
                goto LABEL_103;
              if (((v192 + a3 + v73 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v73 + v74) < 1)
                goto LABEL_293;
              if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v73 + 1) == 10)
                v78 = a3 + v73 + 1;
LABEL_103:
              v58 = __OFADD__(v71++, 1);
              if (v58)
                goto LABEL_285;
              a3 = v78 + 1;
LABEL_105:
              v69 = v188;
            }
            while (a3 < v68);
            v77 = 0;
LABEL_107:
            v67 = v183;
          }
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_QWORD *)v118 = 0xD000000000000010;
          *(_QWORD *)(v118 + 8) = 0x80000001823071F0;
          *(_QWORD *)(v118 + 16) = 45;
          *(_QWORD *)(v118 + 24) = v71;
          *(_QWORD *)(v118 + 32) = v77;
          *(_QWORD *)(v118 + 40) = v67;
          *(_BYTE *)(v118 + 48) = 1;
          return (char *)swift_willThrow();
        }
        v21 = v14 + 1;
        v41 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v14 + 1);
        if (v41 == 48)
        {
          v42 = v14 + 2;
          if (!specialized Collection.isEmpty.getter(v14 + 2, v13 - 2))
          {
            v43 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v42);
            v44 = v43;
            v45 = v43;
            if (v43 - 46 > 0x37 || ((1 << (v43 - 46)) & 0x80000000800001) == 0)
            {
              v46 = _asciiNumbers.getter();
              v34 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v42, a3, a4);
              v36 = v47;
              v38 = v48;
              if (v45 >= v46 && HIBYTE(v46) >= v44)
                goto LABEL_113;
              v49 = v44;
              goto LABEL_185;
            }
          }
        }
        else
        {
          v82 = v41;
          if ((v41 - 58) < 0xF7u)
          {
            if (!specialized static Comparable.<= infix(_:_:)(a3, v14 + 1))
              goto LABEL_291;
            if (specialized static Comparable.<= infix(_:_:)(v14 + 1, a3 + a4))
            {
              v83 = specialized min<A>(_:_:)(v14 + 2, a3 + a4);
              if (v83 <= a3)
              {
                v94 = 0;
                v87 = 1;
                goto LABEL_241;
              }
              v84 = v83;
              v85 = v11 + a3;
              v86 = -(uint64_t)a3;
              v87 = 1;
              v88 = a3;
              v179 = v82;
              v184 = v85;
              while (1)
              {
                v193 = v87;
                v89 = 0;
                v90 = 0;
                v91 = v85 - v88;
                v92 = v86 + v88;
                while (1)
                {
                  if ((uint64_t)(v92 + v90) < 0 || (uint64_t)(v91 + v89) < 1)
                    goto LABEL_271;
                  v93 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v88 + v90);
                  if (v93 == 10)
                    break;
                  if (v93 == 13)
                  {
                    v95 = v88 + v90;
                    v86 = -(uint64_t)a3;
                    if (specialized static Comparable.<= infix(_:_:)(v88 + v90 + 1, v21))
                    {
                      if (((v88 - a3 + v90 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v90 + v91) < 1)
                        goto LABEL_299;
                      if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v88 + v90 + 1) == 10)v95 = v88 + v90 + 1;
                    }
                    v87 = v193 + 1;
                    if (__OFADD__(v193, 1))
                      goto LABEL_297;
                    v88 = v95 + 1;
                    goto LABEL_136;
                  }
                  v94 = v90 + 1;
                  if (__OFADD__(v90, 1))
                    goto LABEL_273;
                  ++v90;
                  --v89;
                  if (v88 + v90 >= v84)
                  {
                    v82 = v179;
                    v87 = v193;
LABEL_241:
                    lazy protocol witness table accessor for type JSONError and conformance JSONError();
                    swift_allocError();
                    *(_QWORD *)v158 = 0xD000000000000013;
                    *(_QWORD *)(v158 + 8) = 0x80000001823072E0;
                    *(_QWORD *)(v158 + 16) = v82;
                    *(_QWORD *)(v158 + 24) = v87;
                    *(_QWORD *)(v158 + 32) = v94;
                    *(_QWORD *)(v158 + 40) = v21 - a3;
                    *(_BYTE *)(v158 + 48) = 1;
                    return (char *)swift_willThrow();
                  }
                }
                v86 = -(uint64_t)a3;
                v87 = v193 + 1;
                if (__OFADD__(v193, 1))
                  goto LABEL_296;
                v88 += v90 + 1;
LABEL_136:
                v85 = v184;
                if (v88 >= v84)
                {
                  v94 = 0;
                  v82 = v179;
                  goto LABEL_241;
                }
              }
            }
LABEL_292:
            __break(1u);
LABEL_293:
            __break(1u);
LABEL_294:
            __break(1u);
            goto LABEL_295;
          }
        }
      }
    }
    v11 = a4;
    if ((a6 & 1) != 0 && v21 + 1 < v14 + v13)
    {
      v96 = 0;
      while (1)
      {
        v97 = v21 + v96;
        if ((*(unsigned __int8 *)(v21 + v96 + 1) | 0x20) == 0x65)
          break;
        if (~v21 + v13 + v14 == ++v96)
          goto LABEL_149;
      }
      if ((specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v21 + v96) - 58) <= 0xF5u)
      {
        if (((v21 - v14 + v96 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v21 + v13 + v14 - v96) < 1)
          goto LABEL_283;
        v98 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v97 + 1);
        v99 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v97 + 1, a3, a4);
        v101 = v100;
        v103 = v102;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_OWORD *)v64 = xmmword_18206BE50;
        *(_QWORD *)(v64 + 16) = v98;
        *(_QWORD *)(v64 + 24) = v99;
        *(_QWORD *)(v64 + 32) = v101;
        goto LABEL_148;
      }
    }
LABEL_149:
    v104 = v14 + v13;
    v105 = v14 + v13 - 1;
    v106 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v105);
    if ((v106 - 58) > 0xF5u)
    {
      result = (char *)a9(v14, v13);
      if ((v116 & 1) == 0)
        return result;
      return specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(v187 & 1, (char *)v14, v13, a3, v11, v21, (uint64_t (*)(char **))a8);
    }
    v52 = v105 - a3;
    if (v105 < a3 || a3 + a4 < v105)
    {
LABEL_274:
      __break(1u);
      goto LABEL_275;
    }
    if (a3 + a4 >= v104)
      v107 = v104;
    else
      v107 = a3 + a4;
    if (v107 <= a3)
    {
      v21 = 0;
      v13 = 1;
      goto LABEL_180;
    }
    v180 = v106;
    v185 = v105 - a3;
    v108 = a4 + a3;
    v109 = -(uint64_t)a3;
    v13 = 1;
    v189 = a4 + a3;
    v194 = -(uint64_t)a3;
LABEL_157:
    v110 = 0;
    v111 = 0;
    v112 = v108 - a3;
    v113 = v109 + a3;
    while ((uint64_t)(v113 + v111) >= 0 && (uint64_t)(v112 + v110) >= 1)
    {
      v114 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v111);
      if (v114 == 10)
      {
        v58 = __OFADD__(v13++, 1);
        v109 = v194;
        if (!v58)
        {
          a3 += v111 + 1;
          goto LABEL_174;
        }
        goto LABEL_278;
      }
      if (v114 == 13)
      {
        v115 = a3 + v111;
        v109 = v194;
        if (!specialized static Comparable.<= infix(_:_:)(a3 + v111 + 1, v105))
          goto LABEL_172;
        if (((v194 + a3 + v111 + 1) & 0x8000000000000000) == 0 && (uint64_t)(~v111 + v112) >= 1)
        {
          if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v111 + 1) == 10)
            v115 = a3 + v111 + 1;
LABEL_172:
          v58 = __OFADD__(v13++, 1);
          if (!v58)
          {
            a3 = v115 + 1;
LABEL_174:
            v108 = v189;
            if (a3 >= v107)
            {
              v21 = 0;
LABEL_176:
              v106 = v180;
              v52 = v185;
LABEL_180:
              v66 = v106;
              goto LABEL_181;
            }
            goto LABEL_157;
          }
LABEL_279:
          __break(1u);
LABEL_280:
          __break(1u);
LABEL_281:
          __break(1u);
        }
        __break(1u);
LABEL_283:
        __break(1u);
LABEL_284:
        __break(1u);
LABEL_285:
        __break(1u);
LABEL_286:
        __break(1u);
LABEL_287:
        __break(1u);
LABEL_288:
        __break(1u);
LABEL_289:
        __break(1u);
LABEL_290:
        __break(1u);
LABEL_291:
        __break(1u);
        goto LABEL_292;
      }
      v21 = v111 + 1;
      if (__OFADD__(v111, 1))
        goto LABEL_264;
      ++v111;
      --v110;
      if (a3 + v111 >= v107)
        goto LABEL_176;
    }
    __break(1u);
LABEL_264:
    __break(1u);
LABEL_265:
    __break(1u);
LABEL_266:
    __break(1u);
LABEL_267:
    __break(1u);
    goto LABEL_268;
  }
  if (!a2)
    goto LABEL_267;
  v16 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a1);
  if (v16 == 48)
  {
    v177 = a7;
    if (v13 >= 1)
      v17 = 1;
    else
      v17 = v13;
    if (v13 >= 2)
    {
      v18 = v14 + v17;
      v19 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v14 + v17);
      v20 = 0;
      if (v19 <= 0x57u)
      {
        v21 = v14;
        if (v19 == 46 || v19 == 69)
          goto LABEL_47;
        goto LABEL_110;
      }
      if (v19 == 120)
      {
LABEL_12:
        v21 = v18 + 1;
        if (specialized static Comparable.<= infix(_:_:)(v18 + 1, v14 + v13))
        {
LABEL_13:
          v22 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v21);
          v23 = 1;
          if (!UInt8.isValidHexDigit.getter(v22))
          {
            v152 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v21, a3, v11);
            v154 = v153;
            v156 = v155;
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_OWORD *)v157 = xmmword_18206BE50;
            *(_QWORD *)(v157 + 16) = v22;
            *(_QWORD *)(v157 + 24) = v152;
            *(_QWORD *)(v157 + 32) = v154;
            *(_QWORD *)(v157 + 40) = v156;
            *(_BYTE *)(v157 + 48) = 1;
            return (char *)swift_willThrow();
          }
          v24 = 0;
LABEL_76:
          result = (char *)specialized _parseJSON5Integer<A>(_:isHex:)((_BYTE *)v14, v13, v23, v177);
          if ((v60 & 1) == 0)
            return result;
          if ((v24 & 1) != 0)
          {
            v61 = static String._fromUTF8Repairing(_:)();
            v63 = v62;
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_QWORD *)v64 = v61;
            *(_QWORD *)(v64 + 8) = v63;
            *(_OWORD *)(v64 + 16) = 0u;
            *(_OWORD *)(v64 + 32) = 0u;
            v65 = 11;
LABEL_234:
            *(_BYTE *)(v64 + 48) = v65;
            return (char *)swift_willThrow();
          }
          return specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(v187 & 1, (char *)v14, v13, a3, v11, v21, (uint64_t (*)(char **))a8);
        }
        if (v13 - v17 < 1)
          goto LABEL_290;
        goto LABEL_221;
      }
      if (v19 != 101)
      {
        if (v19 == 88)
          goto LABEL_12;
LABEL_110:
        v79 = _asciiNumbers.getter();
        v34 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v14 + v17, a3, v11);
        v36 = v80;
        v38 = v81;
        if (v19 >= v79)
        {
          v39 = HIBYTE(v79);
LABEL_112:
          if (v39 >= v19)
          {
LABEL_113:
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_QWORD *)v64 = v34;
            *(_QWORD *)(v64 + 8) = v36;
            *(_QWORD *)(v64 + 16) = v38;
            *(_QWORD *)(v64 + 24) = 0;
            *(_QWORD *)(v64 + 32) = 0;
            *(_QWORD *)(v64 + 40) = 0;
            v65 = 10;
            goto LABEL_234;
          }
          goto LABEL_184;
        }
        goto LABEL_184;
      }
LABEL_46:
      v21 = v14;
      goto LABEL_47;
    }
LABEL_45:
    v20 = 0;
    goto LABEL_46;
  }
  if ((v16 - 58) >= 0xF7u)
  {
    v177 = a7;
    goto LABEL_45;
  }
  switch(v16)
  {
    case '+':
    case '-':
      if (v13 < 2)
      {
        if (v13 != 1)
          goto LABEL_287;
        v119 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v14);
        v120 = v14 - a3;
        if (v14 < a3)
          goto LABEL_288;
        v121 = v119;
        if (!specialized static Comparable.<= infix(_:_:)(v14, a3 + v11))
          goto LABEL_289;
        v122 = specialized min<A>(_:_:)(v14 + 1, a3 + v11);
        if (v122 <= a3)
        {
          v132 = 0;
          v126 = 1;
          goto LABEL_238;
        }
        v123 = v122;
        v181 = v121;
        v186 = v14 - a3;
        v124 = v11 + a3;
        v125 = -(uint64_t)a3;
        v126 = 1;
        v190 = v124;
        v195 = -(uint64_t)a3;
LABEL_195:
        v127 = 0;
        v128 = 0;
        v129 = v124 - a3;
        v130 = v125 + a3;
        while (1)
        {
          if ((uint64_t)(v130 + v128) < 0 || (uint64_t)(v129 + v127) < 1)
            goto LABEL_269;
          v131 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v128);
          if (v131 == 10)
            break;
          if (v131 == 13)
          {
            v133 = a3 + v128;
            if (!specialized static Comparable.<= infix(_:_:)(a3 + v128 + 1, v14))
              goto LABEL_210;
            if (((v195 + a3 + v128 + 1) & 0x8000000000000000) == 0 && (uint64_t)(~v128 + v129) >= 1)
            {
              if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v128 + 1) == 10)v133 = a3 + v128 + 1;
LABEL_210:
              v58 = __OFADD__(v126++, 1);
              if (!v58)
              {
                a3 = v133 + 1;
LABEL_212:
                v124 = v190;
                v125 = v195;
                if (a3 >= v123)
                {
                  v132 = 0;
LABEL_214:
                  v121 = v181;
                  v120 = v186;
LABEL_238:
                  lazy protocol witness table accessor for type JSONError and conformance JSONError();
                  swift_allocError();
                  *(_QWORD *)v151 = 0xD000000000000010;
                  *(_QWORD *)(v151 + 8) = 0x80000001823071F0;
                  *(_QWORD *)(v151 + 16) = v121;
                  *(_QWORD *)(v151 + 24) = v126;
                  *(_QWORD *)(v151 + 32) = v132;
                  *(_QWORD *)(v151 + 40) = v120;
                  *(_BYTE *)(v151 + 48) = 1;
                  return (char *)swift_willThrow();
                }
                goto LABEL_195;
              }
LABEL_295:
              __break(1u);
LABEL_296:
              __break(1u);
LABEL_297:
              __break(1u);
            }
            __break(1u);
LABEL_299:
            __break(1u);
            JUMPOUT(0x181E44698);
          }
          v132 = v128 + 1;
          if (__OFADD__(v128, 1))
            goto LABEL_270;
          ++v128;
          --v127;
          if (a3 + v128 >= v123)
            goto LABEL_214;
        }
        v58 = __OFADD__(v126++, 1);
        if (!v58)
        {
          a3 += v128 + 1;
          goto LABEL_212;
        }
        goto LABEL_294;
      }
      v21 = v14 + 1;
      v40 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v14 + 1);
      if (v40 == 48)
      {
        v177 = a7;
        v18 = v14 + 2;
        if (specialized Collection.isEmpty.getter(v14 + 2, v13 - 2))
        {
          v20 = 0;
          goto LABEL_47;
        }
        v159 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v18);
        v20 = 0;
        v160 = v159;
        if (v159 > 0x57u)
        {
          if (v159 != 120)
          {
            if (v159 == 101)
              goto LABEL_47;
            if (v159 != 88)
            {
LABEL_251:
              v161 = _asciiNumbers.getter();
              v34 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v18, a3, v11);
              v36 = v162;
              v38 = v163;
              if (v159 >= v161 && HIBYTE(v161) >= v159)
                goto LABEL_113;
              v49 = v159;
              goto LABEL_185;
            }
          }
          v21 = v14 + 3;
          if (specialized static Comparable.<= infix(_:_:)(v14 + 3, v14 + v13))
            goto LABEL_13;
          if (v13 - 2 >= 1)
          {
LABEL_221:
            v141 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v18);
            v136 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v18, a3, v11);
            v138 = v142;
            v140 = v143;
            v144 = v141;
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_OWORD *)v64 = xmmword_18206BE50;
LABEL_231:
            *(_QWORD *)(v64 + 16) = v144;
            goto LABEL_232;
          }
          __break(1u);
        }
        if (v160 == 46 || v160 == 69)
          goto LABEL_47;
        goto LABEL_251;
      }
      v145 = v40;
      if ((v40 - 58) >= 0xF7u)
        goto LABEL_257;
      if (v40 == 46)
        goto LABEL_256;
      if (v40 != 78)
      {
        if (v40 == 73)
        {
          v146 = (char *)specialized BufferView.dropFirst(_:)(1, v14, v13);
          result = (char *)specialized static JSON5Scanner.validateInfinity(from:fullSource:)(v146, v147, a3, v11);
          if (v9)
            return result;
          v177 = a7;
          v20 = 1;
          goto LABEL_47;
        }
        _StringGuts.grow(_:)(20);
        v168._countAndFlagsBits = 0x27207265746661;
        v168._object = (void *)0xE700000000000000;
        DefaultStringInterpolation.appendLiteral(_:)(v168);
        v169 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v14);
        v170 = (v169 + 1);
        if ((v169 & 0x80) != 0)
          v170 = (((v169 & 0x3F) << 8) | (v169 >> 6)) + 33217;
        v196 = (v170 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v170) >> 3)) & 7)));
        v171._countAndFlagsBits = MEMORY[0x186DA46D0](&v196);
        specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v171);
        swift_bridgeObjectRelease();
        v172._countAndFlagsBits = 0x6D756E206E692027;
        v172._object = (void *)0xEB00000000726562;
        DefaultStringInterpolation.appendLiteral(_:)(v172);
        v173 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v21, a3, v11);
        v175 = v174;
        v103 = v176;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_QWORD *)v64 = 0;
        *(_QWORD *)(v64 + 8) = 0xE000000000000000;
        *(_QWORD *)(v64 + 16) = v145;
        *(_QWORD *)(v64 + 24) = v173;
        *(_QWORD *)(v64 + 32) = v175;
LABEL_148:
        *(_QWORD *)(v64 + 40) = v103;
LABEL_233:
        v65 = 1;
        goto LABEL_234;
      }
      v166 = (char *)specialized BufferView.dropFirst(_:)(1, v14, v13);
      result = (char *)specialized static JSON5Scanner.validateNaN(from:fullSource:)(v166, v167, a3, v11);
      if (v9)
        return result;
      v177 = a7;
      v20 = 1;
LABEL_47:
      v24 = v20;
      v50 = v14 + v13;
      v51 = v14 + v13 - 1;
      v182 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v51);
      if ((v182 | 0x20) != 0x65)
      {
        v23 = 0;
        goto LABEL_76;
      }
      v52 = v51 - a3;
      if (v51 < a3 || a3 + v11 < v51)
        goto LABEL_272;
      v53 = v11;
      if (a3 + v11 >= v50)
        v11 = v50;
      else
        v11 += a3;
      if (v11 <= a3)
      {
        v21 = 0;
        v13 = 1;
        goto LABEL_80;
      }
      v178 = v51 - a3;
      v54 = v53 + a3;
      v55 = -(uint64_t)a3;
      v13 = 1;
      v187 = v53 + a3;
      a8 = -(uint64_t)a3;
      do
      {
        v10 = 0;
        v14 = 0;
        v56 = v54 - a3;
        a7 = (uint64_t (*)(_BYTE *, uint64_t, uint64_t))(v55 + a3);
        while (1)
        {
          if ((uint64_t)((uint64_t)a7 + v14) < 0 || (uint64_t)(v56 + v10) < 1)
          {
            __break(1u);
LABEL_255:
            __break(1u);
LABEL_256:
            v164 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2, v14, v13);
            result = (char *)specialized static JSON5Scanner.validateLeadingDecimal(from:fullSource:)(v164, v165, a3, v11);
            if (v10)
              return result;
LABEL_257:
            v177 = a7;
            v20 = 0;
            goto LABEL_47;
          }
          v57 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v14);
          if (v57 == 10)
          {
            v58 = __OFADD__(v13++, 1);
            v55 = a8;
            if (!v58)
            {
              a3 += v14 + 1;
              goto LABEL_72;
            }
LABEL_276:
            __break(1u);
LABEL_277:
            __break(1u);
LABEL_278:
            __break(1u);
            goto LABEL_279;
          }
          if (v57 == 13)
            break;
          v21 = v14 + 1;
          if (__OFADD__(v14, 1))
            goto LABEL_255;
          ++v14;
          --v10;
          if (a3 + v14 >= v11)
            goto LABEL_74;
        }
        v21 = a3 + v14;
        v55 = a8;
        if (!specialized static Comparable.<= infix(_:_:)(a3 + v14 + 1, v51))
          goto LABEL_70;
        if (((a8 + a3 + v14 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v14 + v56) < 1)
          goto LABEL_281;
        if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v14 + 1) == 10)
          v21 = a3 + v14 + 1;
LABEL_70:
        v58 = __OFADD__(v13++, 1);
        if (v58)
          goto LABEL_277;
        a3 = v21 + 1;
LABEL_72:
        v54 = v187;
      }
      while (a3 < v11);
      v21 = 0;
LABEL_74:
      v52 = v178;
LABEL_80:
      v66 = v182;
LABEL_181:
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(_QWORD *)v117 = 0xD000000000000010;
      *(_QWORD *)(v117 + 8) = 0x80000001823071F0;
      *(_QWORD *)(v117 + 16) = v66;
      *(_QWORD *)(v117 + 24) = v13;
      *(_QWORD *)(v117 + 32) = v21;
      *(_QWORD *)(v117 + 40) = v52;
      *(_BYTE *)(v117 + 48) = 1;
      return (char *)swift_willThrow();
    case '.':
      if (v13 >= 1)
        v134 = 1;
      else
        v134 = v13;
      v135 = v14 + v134;
      if (specialized Collection.isEmpty.getter(v14 + v134, v13 - v134))
      {
        v136 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v135, a3, v11);
        v138 = v137;
        v140 = v139;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_QWORD *)v64 = 0;
        *(_QWORD *)(v64 + 8) = 0;
        *(_QWORD *)(v64 + 16) = 46;
LABEL_232:
        *(_QWORD *)(v64 + 24) = v136;
        *(_QWORD *)(v64 + 32) = v138;
        *(_QWORD *)(v64 + 40) = v140;
        goto LABEL_233;
      }
      v177 = a7;
      LOBYTE(v144) = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v135);
      v148 = _asciiNumbers.getter();
      if (v144 >= v148
        && HIBYTE(v148) >= v144)
      {
        goto LABEL_45;
      }
      v136 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v135, a3, v11);
      v138 = v149;
      v140 = v150;
      v144 = v144;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(_QWORD *)v64 = 0xD000000000000013;
      *(_QWORD *)(v64 + 8) = 0x80000001823071D0;
      goto LABEL_231;
    case 'I':
      result = (char *)closure #1 in static JSON5Scanner.validateInfinity(from:fullSource:)((const char *)v14, v13, v14, v13, a3, v11);
      goto LABEL_188;
    case 'N':
      result = (char *)specialized BufferView.withUnsafeRawPointer<A>(_:)((const char *)v14, v13, v14, v13, a3, v11);
LABEL_188:
      if (v9)
        return result;
      v177 = a7;
      v20 = 1;
      goto LABEL_46;
    default:
      goto LABEL_286;
  }
}

unint64_t specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(__int16 a1, char *a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  __int16 v6;
  unint64_t v7;
  unsigned __int8 *v8;
  char *v13;
  uint64_t v14;
  double v15;
  BOOL v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unint64_t i;
  int v21;
  size_t v22;
  char v23;
  char v24;
  unsigned __int8 *v25;
  char v26;
  double v27;
  unint64_t result;
  char v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  unint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  unint64_t v39;
  int v40;
  unint64_t v41;
  int v42;
  __int16 v43;
  __int16 v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  __int16 v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  char v61;
  unsigned __int8 *v62;
  char v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  int v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  char *v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  uint64_t v81;
  char *v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  int v90;
  uint64_t v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  int v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  int v112;
  uint64_t v113;
  Swift::String v114;
  Swift::String v115;
  unint64_t v116;
  __int16 v117;
  unint64_t v118;
  int isNegative_getter;
  char *v120[2];
  __int16 v121;
  __int16 v122;
  _BYTE v123[40];
  char *v124;
  char *v125;
  unsigned __int16 v126;
  unsigned __int16 v127;
  char v128;
  uint64_t v129;

  LOWORD(v8) = v6;
  v13 = a2;
  LOWORD(v14) = a1;
  v129 = *MEMORY[0x1E0C80C00];
  v120[0] = 0;
  v15 = _stringshims_strtod_l(a2, v120, 0);
  if (v120[0])
    v16 = &v13[a3] == v120[0];
  else
    v16 = 0;
  if (v16)
  {
    v27 = v15;
    result = specialized Int128.init<A>(exactly:)(v15);
    if ((v29 & 1) != 0)
      goto LABEL_79;
    if (fabs(v27) < 9.00719925e15)
      return result;
  }
  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)((uint64_t)v13, a3, 0x2EuLL, 0xE100000000000000, 1, (uint64_t)v123);
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v123, (uint64_t)&v124);
  if (v128 != 1)
  {
LABEL_43:
    v117 = (__int16)v8;
    LODWORD(a5) = (_DWORD)v124;
    a4 = (unint64_t)v124 >> 48;
    v33 = (unsigned __int16)v125;
    v13 = (char *)((unint64_t)v124 >> 32);
    a3 = WORD1(v125);
    v34 = (unsigned __int8 *)WORD2(v125);
    v35 = HIWORD(v125);
    v36 = v126;
    v37 = v127;
    v120[0] = v124;
    v120[1] = v125;
    v121 = v126;
    v122 = v127;
    isNegative_getter = _So9NSDecimala__isNegative_getter(v120);
    LODWORD(v120[0]) = a5;
    WORD2(v120[0]) = (_WORD)v13;
    HIWORD(v120[0]) = a4;
    LOWORD(v120[1]) = v33;
    WORD1(v120[1]) = a3;
    WORD2(v120[1]) = (_WORD)v34;
    HIWORD(v120[1]) = v35;
    v121 = v36;
    v122 = v37;
    v38 = _So9NSDecimala__length_getter(v120);
    v39 = v36;
    v14 = v35;
    v8 = v34;
    v7 = a3;
    LOWORD(a3) = v33;
    if (v38 || !isNegative_getter)
    {
      LODWORD(v120[0]) = a5;
      WORD2(v120[0]) = (_WORD)v13;
      HIWORD(v120[0]) = a4;
      LOWORD(v120[1]) = v33;
      WORD1(v120[1]) = v7;
      WORD2(v120[1]) = (_WORD)v8;
      HIWORD(v120[1]) = v14;
      v118 = v39;
      v121 = v39;
      v116 = v37;
      v122 = v37;
      v40 = _So9NSDecimala__length_getter(v120);
      if (!v40)
        goto LABEL_256;
      v41 = 0;
      v42 = v40 - 1;
      if (v40 == 1)
      {
        v43 = v116;
        v44 = v118;
      }
      else
      {
        v43 = v116;
        v44 = v118;
        do
        {
          v45 = a4;
          switch(v42)
          {
            case 1:
              break;
            case 2:
              v45 = v33;
              break;
            case 3:
              v45 = v7;
              break;
            case 4:
              v45 = (unint64_t)v8;
              break;
            case 5:
              v45 = v14;
              break;
            case 6:
              v45 = v118;
              break;
            case 7:
              v45 = v116;
              break;
            default:
              v120[0] = 0;
              v120[1] = (char *)0xE000000000000000;
              _StringGuts.grow(_:)(30);
              swift_bridgeObjectRelease();
              strcpy((char *)v120, "Invalid index ");
              HIBYTE(v120[1]) = -18;
              v114._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
              String.append(_:)(v114);
              swift_bridgeObjectRelease();
              v115._countAndFlagsBits = 0x616D5F20726F6620;
              v115._object = (void *)0xEE0061737369746ELL;
              String.append(_:)(v115);
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
              JUMPOUT(0x181E4563CLL);
          }
          if (HIWORD(v41))
            goto LABEL_79;
          v41 = v45 | (v41 << 16);
          --v42;
        }
        while (v42);
        if (HIWORD(v41))
          goto LABEL_79;
      }
      for (i = (unsigned __int16)v13 | (v41 << 16); ; i = 0)
      {
        LODWORD(v120[0]) = a5;
        WORD2(v120[0]) = (_WORD)v13;
        HIWORD(v120[0]) = a4;
        LOWORD(v120[1]) = a3;
        WORD1(v120[1]) = v7;
        WORD2(v120[1]) = (_WORD)v8;
        HIWORD(v120[1]) = v14;
        v121 = v44;
        v122 = v43;
        v49 = v43;
        if ((_So9NSDecimala__exponent_getter((char *)v120) & 0x80000000) == 0)
          break;
        LODWORD(v120[0]) = a5;
        WORD2(v120[0]) = (_WORD)v13;
        HIWORD(v120[0]) = a4;
        LOWORD(v120[1]) = a3;
        WORD1(v120[1]) = v7;
        WORD2(v120[1]) = (_WORD)v8;
        HIWORD(v120[1]) = v14;
        v121 = v118;
        v122 = v49;
        v92 = _So9NSDecimala__exponent_getter((char *)v120);
        if (v92 > 0)
          goto LABEL_267;
        LOWORD(v8) = v117;
        if (!v92)
          goto LABEL_183;
        v93 = -v92 & ~(-v92 >> 31);
        v94 = ~v92;
        while (v93 > v94)
        {
          i /= 0xAuLL;
          if (__CFADD__(v92++, 1))
            goto LABEL_183;
        }
LABEL_250:
        __break(1u);
LABEL_251:
        __break(1u);
LABEL_252:
        __break(1u);
LABEL_253:
        __break(1u);
LABEL_254:
        __break(1u);
LABEL_255:
        __break(1u);
LABEL_256:
        v43 = v116;
        v44 = v118;
      }
      LODWORD(v120[0]) = a5;
      WORD2(v120[0]) = (_WORD)v13;
      HIWORD(v120[0]) = a4;
      LOWORD(v120[1]) = a3;
      WORD1(v120[1]) = v7;
      WORD2(v120[1]) = (_WORD)v8;
      HIWORD(v120[1]) = v14;
      v121 = v118;
      v122 = v49;
      v50 = _So9NSDecimala__exponent_getter((char *)v120);
      if ((v50 & 0x80000000) == 0)
      {
        if (!v50)
          goto LABEL_183;
        if (is_mul_ok(i, 0xAuLL))
        {
          i *= 10;
          v51 = v50 - 1;
          if (v50 == 1)
            goto LABEL_183;
          if (is_mul_ok(i, 0xAuLL))
          {
            i *= 10;
            while (--v51)
            {
              v52 = (i * (unsigned __int128)0xAuLL) >> 64;
              i *= 10;
              if (v52)
                goto LABEL_79;
            }
            goto LABEL_183;
          }
        }
        goto LABEL_79;
      }
LABEL_265:
      __break(1u);
      goto LABEL_266;
    }
LABEL_79:
    v53 = static String._fromUTF8Repairing(_:)();
    v55 = v54;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_QWORD *)v56 = v53;
    *(_QWORD *)(v56 + 8) = v55;
    *(_OWORD *)(v56 + 16) = 0u;
    *(_OWORD *)(v56 + 32) = 0u;
    v57 = 11;
    goto LABEL_80;
  }
  v17 = (unsigned __int8 *)specialized BufferView.suffix(from:)(a6, (uint64_t)v13, a3);
  v19 = v17;
  i = v18;
  v8 = &v17[v18];
  if ((v14 & 1) == 0)
  {
    if (v18 <= 0)
    {
      v48 = v17;
      goto LABEL_95;
    }
    v46 = 0;
    v47 = v18;
    while (1)
    {
      if (v46 < 0 || (v32 = v47 < 1, --v47, v32))
      {
        __break(1u);
LABEL_244:
        __break(1u);
LABEL_245:
        __break(1u);
LABEL_246:
        __break(1u);
LABEL_247:
        __break(1u);
LABEL_248:
        __break(1u);
LABEL_249:
        __break(1u);
        goto LABEL_250;
      }
      if (v17[v46] - 58 < 0xFFFFFFF6)
        break;
      v48 = &v17[++v46];
      if (&v17[v46] >= v8)
        goto LABEL_95;
    }
LABEL_94:
    v48 = &v19[v46];
LABEL_95:
    if (v48 < v8)
    {
      v61 = 0;
      v62 = (unsigned __int8 *)(v48 - v19);
      v63 = 1;
      v64 = 1;
      while (1)
      {
        v65 = 0;
        v66 = &v19[i] - v48;
        while (1)
        {
          if (v48 - v19 + v65 < 0 || (v32 = v66 < 1, --v66, v32))
          {
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            v83 = (unint64_t)&v48[v65];
            if ((unint64_t)&v48[v65] >= a4)
            {
              v84 = a4 + a5;
              if (a4 + a5 >= v83)
              {
                if (v84 >= (unint64_t)&v48[v65 + 1])
                  v84 = (unint64_t)&v48[v65 + 1];
                if (v84 > a4)
                {
                  v85 = a5 + a4;
                  a5 = 1;
                  v86 = a4;
                  while (1)
                  {
                    v87 = 0;
                    v88 = 0;
                    v89 = v85 - v86;
                    while (1)
                    {
                      if ((uint64_t)(v86 - a4 + v88) < 0 || (uint64_t)(v89 + v87) < 1)
                        goto LABEL_251;
                      v90 = *(unsigned __int8 *)(v86 + v88);
                      if (v90 == 10)
                      {
                        v76 = __OFADD__(a5++, 1);
                        if (!v76)
                        {
                          v86 += v88 + 1;
                          goto LABEL_169;
                        }
                        goto LABEL_271;
                      }
                      if (v90 == 13)
                        break;
                      v13 = (char *)(v88 + 1);
                      if (__OFADD__(v88, 1))
                        goto LABEL_252;
                      ++v88;
                      --v87;
                      if (v86 + v88 >= v84)
                        goto LABEL_212;
                    }
                    v91 = v86 + v88;
                    if (v83 < v86 + v88 + 1)
                      goto LABEL_167;
                    if (((v86 - a4 + v88 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v88 + v89) < 1)
                      goto LABEL_277;
                    if (*(_BYTE *)(v91 + 1) == 10)
                      v91 = v86 + v88 + 1;
LABEL_167:
                    v76 = __OFADD__(a5++, 1);
                    if (v76)
                      goto LABEL_272;
                    v86 = v91 + 1;
LABEL_169:
                    if (v86 >= v84)
                    {
                      v13 = 0;
                      goto LABEL_212;
                    }
                  }
                }
                v13 = 0;
                a5 = 1;
LABEL_212:
                v80 = &v48[v65 - a4];
                goto LABEL_240;
              }
            }
LABEL_266:
            __break(1u);
LABEL_267:
            __break(1u);
LABEL_268:
            __break(1u);
LABEL_269:
            __break(1u);
LABEL_270:
            __break(1u);
LABEL_271:
            __break(1u);
LABEL_272:
            __break(1u);
LABEL_273:
            __break(1u);
LABEL_274:
            __break(1u);
LABEL_275:
            __break(1u);
            goto LABEL_276;
          }
          LODWORD(a3) = v48[v65];
          if ((a3 - 58) < 0xFFFFFFF6)
            break;
          if (__OFADD__(&v62[v65], 1))
            goto LABEL_144;
          if (&v48[++v65] >= v8)
            goto LABEL_145;
        }
        v67 = (uint64_t)&v62[v65];
        switch(v48[v65])
        {
          case '+':
          case '-':
            if (v67 != 0 || (v61 & 1) == 0)
              goto LABEL_140;
            v62 = 0;
            v61 = 0;
            v63 = 0;
            v64 = 0;
            v48 += v65 + 1;
            if (v48 >= v8)
              goto LABEL_244;
            continue;
          case ',':
          case '/':
          case '0':
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
          case ':':
          case ';':
          case '<':
          case '=':
          case '>':
          case '?':
          case '@':
          case 'A':
          case 'B':
          case 'C':
          case 'D':
            goto LABEL_140;
          case '.':
            if (v67 < 1 || (v64 & 1) == 0)
            {
              v96 = (unint64_t)&v48[v65];
              if ((unint64_t)&v48[v65] < a4)
                goto LABEL_270;
              v97 = a4 + a5;
              if (a4 + a5 < v96)
                goto LABEL_270;
              if (v97 >= (unint64_t)&v48[v65 + 1])
                v97 = (unint64_t)&v48[v65 + 1];
              if (v97 <= a4)
              {
                v13 = 0;
                a5 = 1;
              }
              else
              {
                v98 = a5 + a4;
                a5 = 1;
                v99 = a4;
                do
                {
                  v100 = 0;
                  v101 = 0;
                  v102 = v98 - v99;
                  while (1)
                  {
                    if ((uint64_t)(v99 - a4 + v101) < 0 || (uint64_t)(v102 + v100) < 1)
                      goto LABEL_253;
                    v103 = *(unsigned __int8 *)(v99 + v101);
                    if (v103 == 10)
                      break;
                    if (v103 == 13)
                    {
                      v104 = v99 + v101;
                      if (v96 < v99 + v101 + 1)
                        goto LABEL_205;
                      if (((v99 - a4 + v101 + 1) & 0x8000000000000000) == 0 && (uint64_t)(~v101 + v102) >= 1)
                      {
                        if (*(_BYTE *)(v104 + 1) == 10)
                          v104 = v99 + v101 + 1;
LABEL_205:
                        v76 = __OFADD__(a5++, 1);
                        if (!v76)
                        {
                          v99 = v104 + 1;
                          goto LABEL_209;
                        }
LABEL_276:
                        __break(1u);
LABEL_277:
                        __break(1u);
LABEL_278:
                        __break(1u);
LABEL_279:
                        __break(1u);
                      }
                      __break(1u);
LABEL_281:
                      __break(1u);
                    }
                    v13 = (char *)(v101 + 1);
                    if (__OFADD__(v101, 1))
                      goto LABEL_254;
                    ++v101;
                    --v100;
                    if (v99 + v101 >= v97)
                      goto LABEL_239;
                  }
                  v76 = __OFADD__(a5++, 1);
                  if (v76)
                    goto LABEL_275;
                  v99 += v101 + 1;
LABEL_209:
                  ;
                }
                while (v99 < v97);
                v13 = 0;
              }
LABEL_239:
              v80 = &v48[v65 - a4];
              LODWORD(a3) = 46;
LABEL_240:
              lazy protocol witness table accessor for type JSONError and conformance JSONError();
              swift_allocError();
              *(_OWORD *)v56 = xmmword_18206BE50;
              *(_QWORD *)(v56 + 16) = a3;
              *(_QWORD *)(v56 + 24) = a5;
              *(_QWORD *)(v56 + 32) = v13;
              *(_QWORD *)(v56 + 40) = v80;
              v57 = 1;
LABEL_80:
              *(_BYTE *)(v56 + 48) = v57;
              return swift_willThrow();
            }
            v62 = 0;
            v61 = 0;
            v64 = 0;
            v48 += v65 + 1;
            v63 = 1;
            if (v48 >= v8)
            {
              __break(1u);
              goto LABEL_115;
            }
            break;
          case 'E':
            goto LABEL_109;
          default:
            if ((_DWORD)a3 != 101)
            {
LABEL_140:
              a5 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)&v48[v65], a4, a5);
              v13 = v78;
              v80 = v79;
              goto LABEL_240;
            }
LABEL_109:
            if (v67 < 1 || (v63 & 1) == 0)
              goto LABEL_146;
            v62 = 0;
            v63 = 0;
            v64 = 0;
            v48 += v65 + 1;
            v61 = 1;
            if (v48 >= v8)
              goto LABEL_245;
            continue;
        }
      }
    }
    goto LABEL_260;
  }
  if (v18 < 1)
    goto LABEL_255;
  v21 = *v17;
  if (v21 == 45 || (a3 = (unint64_t)v17, v21 == 43))
    a3 = (unint64_t)(v17 + 1);
  if ((unint64_t)v8 < a3)
  {
    __break(1u);
    goto LABEL_258;
  }
  v14 = a3 - (_QWORD)v17;
  if ((uint64_t)(a3 - (_QWORD)v17) < 0)
  {
LABEL_258:
    __break(1u);
    goto LABEL_259;
  }
  if ((uint64_t)&v8[-a3] < 0)
  {
LABEL_259:
    __break(1u);
LABEL_260:
    __break(1u);
LABEL_261:
    __break(1u);
LABEL_262:
    __break(1u);
    goto LABEL_263;
  }
  if ((uint64_t)&v8[-a3] >= 2)
    v22 = 2;
  else
    v22 = (size_t)&v8[-a3];
  if (!_stringshims_strncasecmp_l((const char *)a3, "0x", v22, 0))
  {
    v48 = (unsigned __int8 *)(a3 + 2);
    v46 = (uint64_t)&v8[-a3 - 2];
    if (v46 >= 1 && v48 < v8)
    {
      v46 = v48 - v19;
      if (((v48 - v19) & 0x8000000000000000) == 0)
      {
        v13 = (char *)(a3 - a4 + 2);
        v46 = (uint64_t)&v19[i - a3 - 3];
        v58 = v14 + 3;
        while (1)
        {
          v59 = v58;
          i = *v48;
          if ((i - 58) <= 0xF5u
            && (*v48 - 65 > 0x25 || ((1 << (i - 65)) & 0x3F0000003FLL) == 0))
          {
            break;
          }
          v32 = v46-- < 1;
          if (!v32 && ++v48 < v8)
          {
            ++v13;
            ++v58;
            if ((v59 & 0x8000000000000000) == 0)
              continue;
          }
          goto LABEL_93;
        }
LABEL_115:
        if ((unint64_t)v48 >= a4)
        {
          v68 = a4 + a5;
          if (a4 + a5 >= (unint64_t)v48)
          {
            if (v68 >= (unint64_t)(v48 + 1))
              v68 = (unint64_t)(v48 + 1);
            if (v68 > a4)
            {
              v69 = -(uint64_t)a4;
              v70 = a5 + a4;
              a5 = 1;
              while (1)
              {
                v71 = 0;
                v72 = 0;
                v73 = v70 - a4;
                while (1)
                {
                  if ((uint64_t)(v69 + a4 + v72) < 0 || (uint64_t)(v73 + v71) < 1)
                    goto LABEL_246;
                  v74 = *(unsigned __int8 *)(a4 + v72);
                  if (v74 == 10)
                  {
                    v76 = __OFADD__(a5++, 1);
                    if (!v76)
                    {
                      a4 += v72 + 1;
                      goto LABEL_138;
                    }
                    goto LABEL_268;
                  }
                  if (v74 == 13)
                    break;
                  v75 = v72 + 1;
                  if (__OFADD__(v72, 1))
                    goto LABEL_247;
                  ++v72;
                  --v71;
                  if (a4 + v72 >= v68)
                  {
                    a3 = 0xED00007265626D75;
                    v14 = 0x6E20786568206E69;
                    goto LABEL_179;
                  }
                }
                v77 = a4 + v72;
                if ((unint64_t)v48 < a4 + v72 + 1)
                  goto LABEL_136;
                if (((v69 + a4 + v72 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v72 + v73) < 1)
                  goto LABEL_273;
                if (*(_BYTE *)(v77 + 1) == 10)
                  v77 = a4 + v72 + 1;
LABEL_136:
                v76 = __OFADD__(a5++, 1);
                if (v76)
                  goto LABEL_269;
                a4 = v77 + 1;
LABEL_138:
                a3 = 0xED00007265626D75;
                v14 = 0x6E20786568206E69;
                if (a4 >= v68)
                {
                  v75 = 0;
                  goto LABEL_179;
                }
              }
            }
            v75 = 0;
            a3 = 0xED00007265626D75;
            v14 = 0x6E20786568206E69;
            a5 = 1;
LABEL_179:
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_QWORD *)v56 = v14;
            *(_QWORD *)(v56 + 8) = a3;
            *(_QWORD *)(v56 + 16) = i;
            *(_QWORD *)(v56 + 24) = a5;
            *(_QWORD *)(v56 + 32) = v75;
            *(_QWORD *)(v56 + 40) = v13;
            v57 = 1;
            goto LABEL_80;
          }
        }
LABEL_264:
        __break(1u);
        goto LABEL_265;
      }
    }
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  if (a3 >= (unint64_t)v8)
  {
LABEL_263:
    __break(1u);
    goto LABEL_264;
  }
  v23 = 0;
  v24 = 0;
  v25 = &v19[i];
  v26 = 1;
LABEL_24:
  v30 = 0;
  v31 = (uint64_t)&v25[-a3];
  while ((uint64_t)(a3 - (_QWORD)v19 + v30) >= 0)
  {
    v32 = v31-- < 1;
    if (v32)
      break;
    i = *(unsigned __int8 *)(a3 + v30);
    if ((i - 58) <= 0xF5u)
    {
      switch(*(_BYTE *)(a3 + v30))
      {
        case '+':
        case '-':
          if (v30 != 0 || (v23 & 1) == 0)
            goto LABEL_141;
          v23 = 0;
          v26 = 0;
          a3 += v30 + 1;
          v24 = 3;
          if (a3 >= (unint64_t)v8)
            goto LABEL_248;
          goto LABEL_24;
        case ',':
        case '/':
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        case ':':
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case '@':
        case 'A':
        case 'B':
        case 'C':
        case 'D':
          goto LABEL_141;
        case '.':
          if ((v26 & 1) == 0)
          {
            v105 = a3 + v30;
            if (a3 + v30 < a4)
              goto LABEL_274;
            v106 = a4 + a5;
            if (a4 + a5 < v105)
              goto LABEL_274;
            if (v106 >= a3 + v30 + 1)
              v106 = a3 + v30 + 1;
            if (v106 > a4)
            {
              v107 = a5 + a4;
              a5 = 1;
              v108 = a4;
              while (1)
              {
                v109 = 0;
                v110 = 0;
                v111 = v107 - v108;
                while (1)
                {
                  if ((uint64_t)(v108 - a4 + v110) < 0 || (uint64_t)(v111 + v109) < 1)
                    goto LABEL_261;
                  v112 = *(unsigned __int8 *)(v108 + v110);
                  if (v112 == 10)
                  {
                    v76 = __OFADD__(a5++, 1);
                    if (!v76)
                    {
                      v108 += v110 + 1;
                      goto LABEL_236;
                    }
                    goto LABEL_278;
                  }
                  if (v112 == 13)
                    break;
                  v75 = v110 + 1;
                  if (__OFADD__(v110, 1))
                    goto LABEL_262;
                  ++v110;
                  --v109;
                  if (v108 + v110 >= v106)
                    goto LABEL_242;
                }
                v113 = v108 + v110;
                if (v105 < v108 + v110 + 1)
                  goto LABEL_234;
                if (((v108 - a4 + v110 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v110 + v111) < 1)
                  goto LABEL_281;
                if (*(_BYTE *)(v113 + 1) == 10)
                  v113 = v108 + v110 + 1;
LABEL_234:
                v76 = __OFADD__(a5++, 1);
                if (v76)
                  goto LABEL_279;
                v108 = v113 + 1;
LABEL_236:
                if (v108 >= v106)
                {
                  v75 = 0;
                  goto LABEL_242;
                }
              }
            }
            v75 = 0;
            a5 = 1;
LABEL_242:
            v13 = (char *)(a3 - a4 + v30);
            LOBYTE(i) = 46;
LABEL_142:
            a3 = 0xE900000000000072;
            v14 = 0x65626D756E206E69;
            goto LABEL_179;
          }
          v23 = 0;
          v26 = 0;
          a3 += v30 + 1;
          v24 = 1;
          if (a3 >= (unint64_t)v8)
          {
            __break(1u);
            goto LABEL_43;
          }
          break;
        case 'E':
          goto LABEL_36;
        default:
          if ((_DWORD)i != 101)
            goto LABEL_141;
LABEL_36:
          if (v24 != 1 && (v24 || v30 < 1))
          {
LABEL_141:
            a5 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(a3 + v30, a4, a5);
            v75 = v81;
            v13 = v82;
            goto LABEL_142;
          }
          v26 = 0;
          a3 += v30 + 1;
          v24 = 2;
          v23 = 1;
          if (a3 >= (unint64_t)v8)
            goto LABEL_249;
          goto LABEL_24;
      }
      goto LABEL_24;
    }
    if (__OFADD__(v30, 1))
      goto LABEL_181;
    ++v30;
    if (a3 + v30 >= (unint64_t)v8)
      goto LABEL_182;
  }
  __break(1u);
LABEL_181:
  __break(1u);
LABEL_182:
  __break(1u);
LABEL_183:
  if (isNegative_getter)
    return -(uint64_t)i;
  else
    return i;
}

uint64_t specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5, char a6, uint64_t (*a7)(unsigned __int8 *, uint64_t, uint64_t), unint64_t a8, uint64_t (*a9)(unint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t), uint64_t (*a10)(unint64_t, uint64_t))
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  unint64_t v15;
  char v19;
  uint64_t v20;
  unint64_t v21;
  unsigned __int8 v22;
  char v23;
  unint64_t v24;
  unsigned __int8 v25;
  char v26;
  char v27;
  char v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned __int8 v33;
  unsigned int v34;
  unsigned __int8 v36;
  __int16 v37;
  unint64_t v38;
  unsigned __int8 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 v45;
  unint64_t v46;
  unsigned __int8 v47;
  unint64_t v48;
  uint64_t (*v49)(unsigned __int8 *, uint64_t, uint64_t);
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  int v53;
  BOOL v54;
  uint64_t v55;
  uint64_t result;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  __int16 v75;
  uint64_t v76;
  uint64_t v77;
  unsigned __int8 v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned __int8 v93;
  unint64_t v94;
  unsigned __int8 v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned __int8 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned __int8 v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unsigned __int8 v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  unsigned __int8 v138;
  char *v139;
  uint64_t v140;
  __int16 v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unsigned __int8 v150;
  uint64_t v151;
  uint64_t v152;
  __int16 v153;
  uint64_t v154;
  uint64_t v155;
  unsigned __int8 *v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  Swift::String v160;
  unsigned __int8 v161;
  unsigned int v162;
  Swift::String v163;
  Swift::String v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t (*v169)(unsigned __int8 *, uint64_t, uint64_t);
  unsigned __int8 v170;
  unsigned __int8 v171;
  unsigned __int8 v172;
  uint64_t (*v173)(unsigned __int8 *, uint64_t, uint64_t);
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unsigned __int8 v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;

  v11 = v10;
  LOBYTE(v12) = a5;
  v14 = a2;
  v15 = a1;
  v183 = a4;
  if ((a5 & 1) == 0)
  {
    if (!a2)
    {
LABEL_268:
      __break(1u);
LABEL_269:
      __break(1u);
LABEL_270:
      __break(1u);
LABEL_271:
      __break(1u);
LABEL_272:
      __break(1u);
LABEL_273:
      __break(1u);
LABEL_274:
      __break(1u);
      goto LABEL_275;
    }
    v29 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a1);
    if (v29 == 48)
    {
      if (v14 >= 1)
        v30 = 1;
      else
        v30 = v14;
      v31 = v15;
      if (v14 < 2)
        goto LABEL_175;
      v32 = v15 + v30;
      v33 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v15 + v30);
      v34 = v33;
      if (v33 - 46 <= 0x37 && ((1 << (v33 - 46)) & 0x80000000800001) != 0)
        goto LABEL_175;
    }
    else
    {
      v31 = v15;
      if ((v29 - 58) >= 0xF7u)
        goto LABEL_175;
      if (v29 != 45)
      {
LABEL_275:
        __break(1u);
        goto LABEL_276;
      }
      if (v14 < 2)
      {
        v63 = v15 - a3;
        if (v15 < a3 || a3 + v183 < v15)
          goto LABEL_280;
        if (a3 + v183 >= v15 + 1)
          v64 = v15 + 1;
        else
          v64 = a3 + v183;
        if (v64 <= a3)
        {
          v73 = 0;
          v67 = 1;
        }
        else
        {
          v65 = v183 + a3;
          v66 = -(uint64_t)a3;
          v67 = 1;
          v175 = v15 - a3;
          v180 = v183 + a3;
          v184 = -(uint64_t)a3;
          do
          {
            v68 = 0;
            v69 = 0;
            v70 = v65 - a3;
            v71 = v66 + a3;
            while (1)
            {
              if ((uint64_t)(v71 + v69) < 0 || (uint64_t)(v70 + v68) < 1)
                goto LABEL_265;
              v72 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v69);
              if (v72 == 10)
              {
                v54 = __OFADD__(v67++, 1);
                v66 = v184;
                if (v54)
                  goto LABEL_284;
                a3 += v69 + 1;
                goto LABEL_104;
              }
              if (v72 == 13)
                break;
              v73 = v69 + 1;
              if (__OFADD__(v69, 1))
                goto LABEL_266;
              ++v69;
              --v68;
              if (a3 + v69 >= v64)
                goto LABEL_106;
            }
            v74 = a3 + v69;
            v66 = v184;
            if (!specialized static Comparable.<= infix(_:_:)(a3 + v69 + 1, v15))
              goto LABEL_102;
            if (((v184 + a3 + v69 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v69 + v70) < 1)
              goto LABEL_293;
            if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v69 + 1) == 10)
              v74 = a3 + v69 + 1;
LABEL_102:
            v54 = __OFADD__(v67++, 1);
            if (v54)
              goto LABEL_285;
            a3 = v74 + 1;
LABEL_104:
            v65 = v180;
          }
          while (a3 < v64);
          v73 = 0;
LABEL_106:
          v63 = v175;
        }
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_QWORD *)v92 = 0xD000000000000010;
        *(_QWORD *)(v92 + 8) = 0x80000001823071F0;
        *(_QWORD *)(v92 + 16) = 45;
        *(_QWORD *)(v92 + 24) = v67;
        *(_QWORD *)(v92 + 32) = v73;
        *(_QWORD *)(v92 + 40) = v63;
        *(_BYTE *)(v92 + 48) = 1;
        return swift_willThrow();
      }
      v46 = v15 + 1;
      v47 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v15 + 1);
      if (v47 != 48)
      {
        v78 = v47;
        if ((v47 - 58) < 0xF7u)
        {
          if (!specialized static Comparable.<= infix(_:_:)(a3, v15 + 1))
            goto LABEL_291;
          if (!specialized static Comparable.<= infix(_:_:)(v15 + 1, a3 + v183))
          {
LABEL_292:
            __break(1u);
LABEL_293:
            __break(1u);
LABEL_294:
            __break(1u);
            goto LABEL_295;
          }
          v79 = specialized min<A>(_:_:)(v15 + 2, a3 + v183);
          if (v79 <= a3)
          {
            v90 = 0;
            v83 = 1;
            goto LABEL_234;
          }
          v80 = v79;
          v81 = v183 + a3;
          v82 = -(uint64_t)a3;
          v83 = 1;
          v84 = a3;
          v170 = v78;
          v176 = v183 + a3;
          while (1)
          {
LABEL_117:
            v185 = v83;
            v85 = 0;
            v86 = 0;
            v87 = v81 - v84;
            v88 = v82 + v84;
            while (1)
            {
              if ((uint64_t)(v88 + v86) < 0 || (uint64_t)(v87 + v85) < 1)
                goto LABEL_271;
              v89 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v84 + v86);
              if (v89 == 10)
                break;
              if (v89 == 13)
              {
                v91 = v84 + v86;
                if (specialized static Comparable.<= infix(_:_:)(v84 + v86 + 1, v46))
                {
                  if (((v84 - a3 + v86 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v86 + v87) < 1)
                    goto LABEL_299;
                  if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v84 + v86 + 1) == 10)v91 = v84 + v86 + 1;
                }
                v83 = v185 + 1;
                if (__OFADD__(v185, 1))
                  goto LABEL_297;
                v84 = v91 + 1;
                v81 = v176;
                v82 = -(uint64_t)a3;
                if (v91 + 1 >= v80)
                  goto LABEL_135;
                goto LABEL_117;
              }
              v90 = v86 + 1;
              if (__OFADD__(v86, 1))
                goto LABEL_273;
              ++v86;
              --v85;
              if (v84 + v86 >= v80)
              {
                v78 = v170;
                v83 = v185;
LABEL_234:
                lazy protocol witness table accessor for type JSONError and conformance JSONError();
                swift_allocError();
                *(_QWORD *)v149 = 0xD000000000000013;
                *(_QWORD *)(v149 + 8) = 0x80000001823072E0;
                *(_QWORD *)(v149 + 16) = v78;
                *(_QWORD *)(v149 + 24) = v83;
                *(_QWORD *)(v149 + 32) = v90;
                *(_QWORD *)(v149 + 40) = v46 - a3;
                *(_BYTE *)(v149 + 48) = 1;
                return swift_willThrow();
              }
            }
            v82 = -(uint64_t)a3;
            v83 = v185 + 1;
            if (__OFADD__(v185, 1))
              goto LABEL_296;
            v84 += v86 + 1;
            v81 = v176;
            if (v84 >= v80)
            {
LABEL_135:
              v90 = 0;
              v78 = v170;
              goto LABEL_234;
            }
          }
        }
        ++v15;
        goto LABEL_175;
      }
      ++v15;
      v32 = v31 + 2;
      if (specialized Collection.isEmpty.getter(v31 + 2, v14 - 2)
        || (v33 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v32),
            v34 = v33,
            v33 - 46 <= 0x37)
        && ((1 << (v33 - 46)) & 0x80000000800001) != 0)
      {
LABEL_175:
        v24 = v15;
        v15 = v31;
        if ((a6 & 1) != 0 && v24 + 1 < v31 + v14)
        {
          v117 = 0;
          while (1)
          {
            v118 = v24 + v117;
            if ((*(unsigned __int8 *)(v24 + v117 + 1) | 0x20) == 0x65)
              break;
            if (~v24 + v14 + v15 == ++v117)
              goto LABEL_186;
          }
          if ((specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v24 + v117) - 58) <= 0xF5u)
          {
            if (((v24 - v15 + v117 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v24 + v14 + v15 - v117) < 1)
              goto LABEL_283;
            v119 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v118 + 1);
            v120 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v118 + 1, a3, v183);
            v122 = v121;
            v124 = v123;
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_OWORD *)v60 = xmmword_18206BE50;
            *(_QWORD *)(v60 + 16) = v119;
            *(_QWORD *)(v60 + 24) = v120;
            *(_QWORD *)(v60 + 32) = v122;
            goto LABEL_185;
          }
        }
LABEL_186:
        v125 = v15 + v14;
        v126 = v15 + v14 - 1;
        v127 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v126);
        if ((v127 - 58) > 0xF5u)
        {
          result = a10(v15, v14);
          if ((result & 0x100000000) == 0)
            return result;
          return a9(v12 & 1, v15, v14, a3, v183, v24);
        }
        v49 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))(v126 - a3);
        if (v126 < a3 || a3 + v183 < v126)
          goto LABEL_274;
        if (a3 + v183 >= v125)
          v128 = v125;
        else
          v128 = a3 + v183;
        if (v128 <= a3)
        {
          v24 = 0;
          v14 = 1;
          goto LABEL_217;
        }
        v172 = v127;
        v178 = v126 - a3;
        v129 = v183 + a3;
        v130 = -(uint64_t)a3;
        v14 = 1;
        v182 = v183 + a3;
        v187 = -(uint64_t)a3;
LABEL_194:
        v131 = 0;
        v132 = 0;
        v133 = v129 - a3;
        v134 = v130 + a3;
        while ((uint64_t)(v134 + v132) >= 0 && (uint64_t)(v133 + v131) >= 1)
        {
          v135 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v132);
          if (v135 == 10)
          {
            v54 = __OFADD__(v14++, 1);
            v130 = v187;
            if (!v54)
            {
              a3 += v132 + 1;
              goto LABEL_211;
            }
            goto LABEL_278;
          }
          if (v135 == 13)
          {
            v136 = a3 + v132;
            v130 = v187;
            if (!specialized static Comparable.<= infix(_:_:)(a3 + v132 + 1, v126))
              goto LABEL_209;
            if (((v187 + a3 + v132 + 1) & 0x8000000000000000) == 0 && (uint64_t)(~v132 + v133) >= 1)
            {
              if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v132 + 1) == 10)v136 = a3 + v132 + 1;
LABEL_209:
              v54 = __OFADD__(v14++, 1);
              if (!v54)
              {
                a3 = v136 + 1;
LABEL_211:
                v129 = v182;
                if (a3 >= v128)
                {
                  v24 = 0;
LABEL_213:
                  v127 = v172;
                  v49 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))v178;
LABEL_217:
                  v62 = v127;
                  goto LABEL_218;
                }
                goto LABEL_194;
              }
LABEL_279:
              __break(1u);
LABEL_280:
              __break(1u);
LABEL_281:
              __break(1u);
            }
            __break(1u);
LABEL_283:
            __break(1u);
LABEL_284:
            __break(1u);
LABEL_285:
            __break(1u);
LABEL_286:
            __break(1u);
LABEL_287:
            __break(1u);
LABEL_288:
            __break(1u);
LABEL_289:
            __break(1u);
LABEL_290:
            __break(1u);
LABEL_291:
            __break(1u);
            goto LABEL_292;
          }
          v24 = v132 + 1;
          if (__OFADD__(v132, 1))
            goto LABEL_264;
          ++v132;
          --v131;
          if (a3 + v132 >= v128)
            goto LABEL_213;
        }
        __break(1u);
LABEL_264:
        __break(1u);
LABEL_265:
        __break(1u);
LABEL_266:
        __break(1u);
        goto LABEL_267;
      }
    }
    v36 = v33;
    v37 = _asciiNumbers.getter();
    v38 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v32, a3, v183);
    v39 = v36;
    v41 = v40;
    v43 = v42;
    if (v34 >= v37 && HIBYTE(v37) >= v39)
      goto LABEL_111;
    v44 = v39;
LABEL_232:
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_OWORD *)v60 = xmmword_18206BE50;
    *(_QWORD *)(v60 + 16) = v44;
    *(_QWORD *)(v60 + 24) = v38;
    *(_QWORD *)(v60 + 32) = v41;
    *(_QWORD *)(v60 + 40) = v43;
    goto LABEL_245;
  }
  if (!a2)
  {
LABEL_267:
    __break(1u);
    goto LABEL_268;
  }
  v19 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a1);
  if (v19 == 48)
  {
    v169 = a7;
    v173 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
    if (v14 >= 1)
      v20 = 1;
    else
      v20 = v14;
    if (v14 >= 2)
    {
      v21 = v15 + v20;
      v22 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v15 + v20);
      v23 = 0;
      if (v22 <= 0x57u)
      {
        v24 = v15;
        if (v22 == 46 || v22 == 69)
          goto LABEL_46;
LABEL_109:
        v75 = _asciiNumbers.getter();
        v38 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v15 + v20, a3, v183);
        v41 = v76;
        v43 = v77;
        if (v22 >= v75 && HIBYTE(v75) >= v22)
          goto LABEL_111;
        v44 = v22;
        goto LABEL_232;
      }
      if (v22 == 120)
      {
LABEL_12:
        v24 = v21 + 1;
        if (specialized static Comparable.<= infix(_:_:)(v21 + 1, v15 + v14))
        {
LABEL_13:
          v25 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v24);
          v26 = 1;
          if (!UInt8.isValidHexDigit.getter(v25))
          {
            v143 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v24, a3, v183);
            v145 = v144;
            v147 = v146;
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_OWORD *)v148 = xmmword_18206BE50;
            *(_QWORD *)(v148 + 16) = v25;
            *(_QWORD *)(v148 + 24) = v143;
            *(_QWORD *)(v148 + 32) = v145;
            *(_QWORD *)(v148 + 40) = v147;
            *(_BYTE *)(v148 + 48) = 1;
            return swift_willThrow();
          }
          v27 = 0;
LABEL_75:
          result = specialized _parseJSON5Integer<A>(_:isHex:)((unsigned __int8 *)v15, v14, v26, v169, v173);
          if ((result & 0x100000000) == 0)
            return result;
          if ((v27 & 1) != 0)
          {
            v57 = static String._fromUTF8Repairing(_:)();
            v59 = v58;
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_QWORD *)v60 = v57;
            *(_QWORD *)(v60 + 8) = v59;
            *(_OWORD *)(v60 + 16) = 0u;
            *(_OWORD *)(v60 + 32) = 0u;
            v61 = 11;
LABEL_246:
            *(_BYTE *)(v60 + 48) = v61;
            return swift_willThrow();
          }
          return a9(v12 & 1, v15, v14, a3, v183, v24);
        }
        if (v14 - v20 < 1)
          goto LABEL_290;
        goto LABEL_173;
      }
      if (v22 != 101)
      {
        if (v22 == 88)
          goto LABEL_12;
        goto LABEL_109;
      }
LABEL_45:
      v24 = v15;
      goto LABEL_46;
    }
LABEL_44:
    v23 = 0;
    goto LABEL_45;
  }
  if ((v19 - 58) >= 0xF7u)
  {
    v169 = a7;
    v173 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
    goto LABEL_44;
  }
  switch(v19)
  {
    case '+':
    case '-':
      if (v14 < 2)
      {
        if (v14 != 1)
          goto LABEL_287;
        v93 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v15);
        v94 = v15 - a3;
        if (v15 < a3)
          goto LABEL_288;
        v95 = v93;
        if (!specialized static Comparable.<= infix(_:_:)(v15, a3 + a4))
          goto LABEL_289;
        v96 = specialized min<A>(_:_:)(v15 + 1, a3 + a4);
        if (v96 <= a3)
        {
          v106 = 0;
          v100 = 1;
          goto LABEL_229;
        }
        v97 = v96;
        v171 = v95;
        v177 = v15 - a3;
        v98 = a4 + a3;
        v99 = -(uint64_t)a3;
        v100 = 1;
        v181 = a4 + a3;
        v186 = -(uint64_t)a3;
LABEL_147:
        v101 = 0;
        v102 = 0;
        v103 = v98 - a3;
        v104 = v99 + a3;
        while (1)
        {
          if ((uint64_t)(v104 + v102) < 0 || (uint64_t)(v103 + v101) < 1)
            goto LABEL_269;
          v105 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v102);
          if (v105 == 10)
            break;
          if (v105 == 13)
          {
            v107 = a3 + v102;
            if (!specialized static Comparable.<= infix(_:_:)(a3 + v102 + 1, v15))
              goto LABEL_162;
            if (((v186 + a3 + v102 + 1) & 0x8000000000000000) == 0 && (uint64_t)(~v102 + v103) >= 1)
            {
              if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v102 + 1) == 10)v107 = a3 + v102 + 1;
LABEL_162:
              v54 = __OFADD__(v100++, 1);
              if (!v54)
              {
                a3 = v107 + 1;
LABEL_164:
                v98 = v181;
                v99 = v186;
                if (a3 >= v97)
                {
                  v106 = 0;
LABEL_166:
                  v95 = v171;
                  v94 = v177;
LABEL_229:
                  lazy protocol witness table accessor for type JSONError and conformance JSONError();
                  swift_allocError();
                  *(_QWORD *)v142 = 0xD000000000000010;
                  *(_QWORD *)(v142 + 8) = 0x80000001823071F0;
                  *(_QWORD *)(v142 + 16) = v95;
                  *(_QWORD *)(v142 + 24) = v100;
                  *(_QWORD *)(v142 + 32) = v106;
                  *(_QWORD *)(v142 + 40) = v94;
                  *(_BYTE *)(v142 + 48) = 1;
                  return swift_willThrow();
                }
                goto LABEL_147;
              }
LABEL_295:
              __break(1u);
LABEL_296:
              __break(1u);
LABEL_297:
              __break(1u);
            }
            __break(1u);
LABEL_299:
            __break(1u);
            JUMPOUT(0x181E47A80);
          }
          v106 = v102 + 1;
          if (__OFADD__(v102, 1))
            goto LABEL_270;
          ++v102;
          --v101;
          if (a3 + v102 >= v97)
            goto LABEL_166;
        }
        v54 = __OFADD__(v100++, 1);
        if (!v54)
        {
          a3 += v102 + 1;
          goto LABEL_164;
        }
        goto LABEL_294;
      }
      v169 = a7;
      v24 = v15 + 1;
      v45 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v15 + 1);
      if (v45 == 48)
      {
        v173 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
        v21 = v15 + 2;
        if (specialized Collection.isEmpty.getter(v15 + 2, v14 - 2))
        {
          v23 = 0;
          goto LABEL_46;
        }
        v150 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v21);
        v23 = 0;
        if (v150 <= 0x57u)
        {
          if (v150 == 46 || v150 == 69)
            goto LABEL_46;
        }
        else
        {
          switch(v150)
          {
            case 'x':
              goto LABEL_239;
            case 'e':
              goto LABEL_46;
            case 'X':
LABEL_239:
              v24 = v15 + 3;
              if (specialized static Comparable.<= infix(_:_:)(v15 + 3, v15 + v14))
                goto LABEL_13;
              if (v14 - 2 < 1)
              {
                __break(1u);
LABEL_242:
                v109 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v21, a3, v183);
                v111 = v151;
                v113 = v152;
                v24 = v24;
                lazy protocol witness table accessor for type JSONError and conformance JSONError();
                swift_allocError();
                *(_QWORD *)v60 = 0xD000000000000013;
                *(_QWORD *)(v60 + 8) = 0x80000001823071D0;
LABEL_243:
                *(_QWORD *)(v60 + 16) = v24;
                goto LABEL_244;
              }
LABEL_173:
              v114 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v21);
              v109 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v21, a3, v183);
              v111 = v115;
              v113 = v116;
              v24 = v114;
              lazy protocol witness table accessor for type JSONError and conformance JSONError();
              swift_allocError();
              *(_OWORD *)v60 = xmmword_18206BE50;
              goto LABEL_243;
          }
        }
        v153 = _asciiNumbers.getter();
        v38 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v21, a3, v183);
        v41 = v154;
        v43 = v155;
        if (v150 >= v153 && HIBYTE(v153) >= v150)
        {
LABEL_111:
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_QWORD *)v60 = v38;
          *(_QWORD *)(v60 + 8) = v41;
          *(_QWORD *)(v60 + 16) = v43;
          *(_QWORD *)(v60 + 24) = 0;
          *(_QWORD *)(v60 + 32) = 0;
          *(_QWORD *)(v60 + 40) = 0;
          v61 = 10;
          goto LABEL_246;
        }
        v44 = v150;
        goto LABEL_232;
      }
      v138 = v45;
      if ((v45 - 58) >= 0xF7u)
        goto LABEL_257;
      if (v45 == 46)
        goto LABEL_256;
      if (v45 != 78)
      {
        if (v45 == 73)
        {
          v139 = (char *)specialized BufferView.dropFirst(_:)(1, v15, v14);
          result = specialized static JSON5Scanner.validateInfinity(from:fullSource:)(v139, v140, a3, v183);
          if (v10)
            return result;
          v173 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
          v23 = 1;
          goto LABEL_46;
        }
        _StringGuts.grow(_:)(20);
        v160._countAndFlagsBits = 0x27207265746661;
        v160._object = (void *)0xE700000000000000;
        DefaultStringInterpolation.appendLiteral(_:)(v160);
        v161 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v15);
        v162 = (v161 + 1);
        if ((v161 & 0x80) != 0)
          v162 = (((v161 & 0x3F) << 8) | (v161 >> 6)) + 33217;
        v188 = (v162 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v162) >> 3)) & 7)));
        v163._countAndFlagsBits = MEMORY[0x186DA46D0](&v188);
        specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v163);
        swift_bridgeObjectRelease();
        v164._countAndFlagsBits = 0x6D756E206E692027;
        v164._object = (void *)0xEB00000000726562;
        DefaultStringInterpolation.appendLiteral(_:)(v164);
        v165 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v24, a3, v183);
        v167 = v166;
        v124 = v168;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_QWORD *)v60 = 0;
        *(_QWORD *)(v60 + 8) = 0xE000000000000000;
        *(_QWORD *)(v60 + 16) = v138;
        *(_QWORD *)(v60 + 24) = v165;
        *(_QWORD *)(v60 + 32) = v167;
LABEL_185:
        *(_QWORD *)(v60 + 40) = v124;
LABEL_245:
        v61 = 1;
        goto LABEL_246;
      }
      v158 = (char *)specialized BufferView.dropFirst(_:)(1, v15, v14);
      result = specialized static JSON5Scanner.validateNaN(from:fullSource:)(v158, v159, a3, v183);
      if (v10)
        return result;
      v173 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
      v23 = 1;
LABEL_46:
      v27 = v23;
      v48 = v15 + v14;
      a8 = v15 + v14 - 1;
      v179 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a8);
      if ((v179 | 0x20) != 0x65)
      {
        v26 = 0;
        goto LABEL_75;
      }
      v49 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))(a8 - a3);
      if (a8 < a3 || a3 + v183 < a8)
        goto LABEL_272;
      if (a3 + v183 >= v48)
        v12 = v48;
      else
        v12 = a3 + v183;
      if (v12 <= a3)
      {
        v24 = 0;
        v14 = 1;
        goto LABEL_79;
      }
      v50 = v183 + a3;
      v24 = -(uint64_t)a3;
      v14 = 1;
      v169 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))(a8 - a3);
      v174 = v183 + a3;
      v183 = -(uint64_t)a3;
      do
      {
        v11 = 0;
        v15 = 0;
        v51 = v50 - a3;
        v52 = v24 + a3;
        while (1)
        {
          if ((uint64_t)(v52 + v15) < 0 || (uint64_t)(v51 + v11) < 1)
          {
            __break(1u);
LABEL_255:
            __break(1u);
LABEL_256:
            v156 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2, v15, v14);
            result = (uint64_t)specialized static JSON5Scanner.validateLeadingDecimal(from:fullSource:)(v156, v157, a3, v183);
            if (v11)
              return result;
LABEL_257:
            v173 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
            v23 = 0;
            goto LABEL_46;
          }
          v53 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v15);
          if (v53 == 10)
          {
            v54 = __OFADD__(v14++, 1);
            v24 = v183;
            if (!v54)
            {
              a3 += v15 + 1;
              goto LABEL_71;
            }
LABEL_276:
            __break(1u);
LABEL_277:
            __break(1u);
LABEL_278:
            __break(1u);
            goto LABEL_279;
          }
          if (v53 == 13)
            break;
          v24 = v15 + 1;
          if (__OFADD__(v15, 1))
            goto LABEL_255;
          ++v15;
          --v11;
          if (a3 + v15 >= v12)
            goto LABEL_73;
        }
        v55 = a3 + v15;
        v24 = v183;
        if (!specialized static Comparable.<= infix(_:_:)(a3 + v15 + 1, a8))
          goto LABEL_69;
        if (((v183 + a3 + v15 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v15 + v51) < 1)
          goto LABEL_281;
        if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v15 + 1) == 10)
          v55 = a3 + v15 + 1;
LABEL_69:
        v54 = __OFADD__(v14++, 1);
        if (v54)
          goto LABEL_277;
        a3 = v55 + 1;
LABEL_71:
        v50 = v174;
      }
      while (a3 < v12);
      v24 = 0;
LABEL_73:
      v49 = v169;
LABEL_79:
      v62 = v179;
LABEL_218:
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(_QWORD *)v137 = 0xD000000000000010;
      *(_QWORD *)(v137 + 8) = 0x80000001823071F0;
      *(_QWORD *)(v137 + 16) = v62;
      *(_QWORD *)(v137 + 24) = v14;
      *(_QWORD *)(v137 + 32) = v24;
      *(_QWORD *)(v137 + 40) = v49;
      *(_BYTE *)(v137 + 48) = 1;
      return swift_willThrow();
    case '.':
      if (v14 >= 1)
        v108 = 1;
      else
        v108 = v14;
      v21 = v15 + v108;
      if (specialized Collection.isEmpty.getter(v15 + v108, v14 - v108))
      {
        v109 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v21, a3, a4);
        v111 = v110;
        v113 = v112;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_QWORD *)v60 = 0;
        *(_QWORD *)(v60 + 8) = 0;
        *(_QWORD *)(v60 + 16) = 46;
LABEL_244:
        *(_QWORD *)(v60 + 24) = v109;
        *(_QWORD *)(v60 + 32) = v111;
        *(_QWORD *)(v60 + 40) = v113;
        goto LABEL_245;
      }
      v173 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
      LOBYTE(v24) = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v21);
      v141 = _asciiNumbers.getter();
      if (v24 >= v141
        && HIBYTE(v141) >= v24)
      {
        v169 = a7;
        v23 = 0;
        v24 = v15;
        goto LABEL_46;
      }
      goto LABEL_242;
    case 'I':
      result = closure #1 in static JSON5Scanner.validateInfinity(from:fullSource:)((const char *)v15, v14, v15, v14, a3, a4);
      goto LABEL_140;
    case 'N':
      result = specialized BufferView.withUnsafeRawPointer<A>(_:)((const char *)v15, v14, v15, v14, a3, a4);
LABEL_140:
      if (v10)
        return result;
      v169 = a7;
      v173 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
      v23 = 1;
      goto LABEL_45;
    default:
      goto LABEL_286;
  }
}

{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  unint64_t v15;
  char v19;
  uint64_t v20;
  unint64_t v21;
  unsigned __int8 v22;
  char v23;
  unint64_t v24;
  unsigned __int8 v25;
  char v26;
  char v27;
  char v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned __int8 v33;
  unsigned int v34;
  unsigned __int8 v36;
  __int16 v37;
  unint64_t v38;
  unsigned __int8 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 v45;
  unint64_t v46;
  unsigned __int8 v47;
  unint64_t v48;
  uint64_t (*v49)(unsigned __int8 *, uint64_t, uint64_t);
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  int v53;
  BOOL v54;
  uint64_t v55;
  uint64_t result;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  uint64_t v78;
  unsigned __int8 v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned __int8 v94;
  unint64_t v95;
  unsigned __int8 v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned __int8 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned __int8 v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unsigned __int8 v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  int v136;
  uint64_t v137;
  char v138;
  uint64_t v139;
  unsigned __int8 v140;
  char *v141;
  uint64_t v142;
  __int16 v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unsigned __int8 v152;
  uint64_t v153;
  uint64_t v154;
  __int16 v155;
  uint64_t v156;
  uint64_t v157;
  unsigned __int8 *v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  Swift::String v162;
  unsigned __int8 v163;
  unsigned int v164;
  Swift::String v165;
  Swift::String v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t (*v171)(unsigned __int8 *, uint64_t, uint64_t);
  unsigned __int8 v172;
  unsigned __int8 v173;
  unsigned __int8 v174;
  uint64_t (*v175)(unsigned __int8 *, uint64_t, uint64_t);
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unsigned __int8 v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;

  v11 = v10;
  LOBYTE(v12) = a5;
  v14 = a2;
  v15 = a1;
  v185 = a4;
  if ((a5 & 1) == 0)
  {
    if (!a2)
    {
LABEL_268:
      __break(1u);
LABEL_269:
      __break(1u);
LABEL_270:
      __break(1u);
LABEL_271:
      __break(1u);
LABEL_272:
      __break(1u);
LABEL_273:
      __break(1u);
LABEL_274:
      __break(1u);
      goto LABEL_275;
    }
    v29 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a1);
    if (v29 == 48)
    {
      if (v14 >= 1)
        v30 = 1;
      else
        v30 = v14;
      v31 = v15;
      if (v14 < 2)
        goto LABEL_175;
      v32 = v15 + v30;
      v33 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v15 + v30);
      v34 = v33;
      if (v33 - 46 <= 0x37 && ((1 << (v33 - 46)) & 0x80000000800001) != 0)
        goto LABEL_175;
    }
    else
    {
      v31 = v15;
      if ((v29 - 58) >= 0xF7u)
        goto LABEL_175;
      if (v29 != 45)
      {
LABEL_275:
        __break(1u);
        goto LABEL_276;
      }
      if (v14 < 2)
      {
        v64 = v15 - a3;
        if (v15 < a3 || a3 + v185 < v15)
          goto LABEL_280;
        if (a3 + v185 >= v15 + 1)
          v65 = v15 + 1;
        else
          v65 = a3 + v185;
        if (v65 <= a3)
        {
          v74 = 0;
          v68 = 1;
        }
        else
        {
          v66 = v185 + a3;
          v67 = -(uint64_t)a3;
          v68 = 1;
          v177 = v15 - a3;
          v182 = v185 + a3;
          v186 = -(uint64_t)a3;
          do
          {
            v69 = 0;
            v70 = 0;
            v71 = v66 - a3;
            v72 = v67 + a3;
            while (1)
            {
              if ((uint64_t)(v72 + v70) < 0 || (uint64_t)(v71 + v69) < 1)
                goto LABEL_265;
              v73 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v70);
              if (v73 == 10)
              {
                v54 = __OFADD__(v68++, 1);
                v67 = v186;
                if (v54)
                  goto LABEL_284;
                a3 += v70 + 1;
                goto LABEL_104;
              }
              if (v73 == 13)
                break;
              v74 = v70 + 1;
              if (__OFADD__(v70, 1))
                goto LABEL_266;
              ++v70;
              --v69;
              if (a3 + v70 >= v65)
                goto LABEL_106;
            }
            v75 = a3 + v70;
            v67 = v186;
            if (!specialized static Comparable.<= infix(_:_:)(a3 + v70 + 1, v15))
              goto LABEL_102;
            if (((v186 + a3 + v70 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v70 + v71) < 1)
              goto LABEL_293;
            if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v70 + 1) == 10)
              v75 = a3 + v70 + 1;
LABEL_102:
            v54 = __OFADD__(v68++, 1);
            if (v54)
              goto LABEL_285;
            a3 = v75 + 1;
LABEL_104:
            v66 = v182;
          }
          while (a3 < v65);
          v74 = 0;
LABEL_106:
          v64 = v177;
        }
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_QWORD *)v93 = 0xD000000000000010;
        *(_QWORD *)(v93 + 8) = 0x80000001823071F0;
        *(_QWORD *)(v93 + 16) = 45;
        *(_QWORD *)(v93 + 24) = v68;
        *(_QWORD *)(v93 + 32) = v74;
        *(_QWORD *)(v93 + 40) = v64;
        *(_BYTE *)(v93 + 48) = 1;
        return swift_willThrow();
      }
      v46 = v15 + 1;
      v47 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v15 + 1);
      if (v47 != 48)
      {
        v79 = v47;
        if ((v47 - 58) < 0xF7u)
        {
          if (!specialized static Comparable.<= infix(_:_:)(a3, v15 + 1))
            goto LABEL_291;
          if (!specialized static Comparable.<= infix(_:_:)(v15 + 1, a3 + v185))
          {
LABEL_292:
            __break(1u);
LABEL_293:
            __break(1u);
LABEL_294:
            __break(1u);
            goto LABEL_295;
          }
          v80 = specialized min<A>(_:_:)(v15 + 2, a3 + v185);
          if (v80 <= a3)
          {
            v91 = 0;
            v84 = 1;
            goto LABEL_234;
          }
          v81 = v80;
          v82 = v185 + a3;
          v83 = -(uint64_t)a3;
          v84 = 1;
          v85 = a3;
          v172 = v79;
          v178 = v185 + a3;
          while (1)
          {
LABEL_117:
            v187 = v84;
            v86 = 0;
            v87 = 0;
            v88 = v82 - v85;
            v89 = v83 + v85;
            while (1)
            {
              if ((uint64_t)(v89 + v87) < 0 || (uint64_t)(v88 + v86) < 1)
                goto LABEL_271;
              v90 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v85 + v87);
              if (v90 == 10)
                break;
              if (v90 == 13)
              {
                v92 = v85 + v87;
                if (specialized static Comparable.<= infix(_:_:)(v85 + v87 + 1, v46))
                {
                  if (((v85 - a3 + v87 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v87 + v88) < 1)
                    goto LABEL_299;
                  if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v85 + v87 + 1) == 10)v92 = v85 + v87 + 1;
                }
                v84 = v187 + 1;
                if (__OFADD__(v187, 1))
                  goto LABEL_297;
                v85 = v92 + 1;
                v82 = v178;
                v83 = -(uint64_t)a3;
                if (v92 + 1 >= v81)
                  goto LABEL_135;
                goto LABEL_117;
              }
              v91 = v87 + 1;
              if (__OFADD__(v87, 1))
                goto LABEL_273;
              ++v87;
              --v86;
              if (v85 + v87 >= v81)
              {
                v79 = v172;
                v84 = v187;
LABEL_234:
                lazy protocol witness table accessor for type JSONError and conformance JSONError();
                swift_allocError();
                *(_QWORD *)v151 = 0xD000000000000013;
                *(_QWORD *)(v151 + 8) = 0x80000001823072E0;
                *(_QWORD *)(v151 + 16) = v79;
                *(_QWORD *)(v151 + 24) = v84;
                *(_QWORD *)(v151 + 32) = v91;
                *(_QWORD *)(v151 + 40) = v46 - a3;
                *(_BYTE *)(v151 + 48) = 1;
                return swift_willThrow();
              }
            }
            v83 = -(uint64_t)a3;
            v84 = v187 + 1;
            if (__OFADD__(v187, 1))
              goto LABEL_296;
            v85 += v87 + 1;
            v82 = v178;
            if (v85 >= v81)
            {
LABEL_135:
              v91 = 0;
              v79 = v172;
              goto LABEL_234;
            }
          }
        }
        ++v15;
        goto LABEL_175;
      }
      ++v15;
      v32 = v31 + 2;
      if (specialized Collection.isEmpty.getter(v31 + 2, v14 - 2)
        || (v33 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v32),
            v34 = v33,
            v33 - 46 <= 0x37)
        && ((1 << (v33 - 46)) & 0x80000000800001) != 0)
      {
LABEL_175:
        v24 = v15;
        v15 = v31;
        if ((a6 & 1) != 0 && v24 + 1 < v31 + v14)
        {
          v118 = 0;
          while (1)
          {
            v119 = v24 + v118;
            if ((*(unsigned __int8 *)(v24 + v118 + 1) | 0x20) == 0x65)
              break;
            if (~v24 + v14 + v15 == ++v118)
              goto LABEL_186;
          }
          if ((specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v24 + v118) - 58) <= 0xF5u)
          {
            if (((v24 - v15 + v118 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v24 + v14 + v15 - v118) < 1)
              goto LABEL_283;
            v120 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v119 + 1);
            v121 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v119 + 1, a3, v185);
            v123 = v122;
            v125 = v124;
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_OWORD *)v61 = xmmword_18206BE50;
            *(_QWORD *)(v61 + 16) = v120;
            *(_QWORD *)(v61 + 24) = v121;
            *(_QWORD *)(v61 + 32) = v123;
            goto LABEL_185;
          }
        }
LABEL_186:
        v126 = v15 + v14;
        v127 = v15 + v14 - 1;
        v128 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v127);
        if ((v128 - 58) > 0xF5u)
        {
          result = a10(v15, v14);
          if ((v138 & 1) == 0)
            return result;
          return a9(v12 & 1, v15, v14, a3, v185, v24);
        }
        v49 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))(v127 - a3);
        if (v127 < a3 || a3 + v185 < v127)
          goto LABEL_274;
        if (a3 + v185 >= v126)
          v129 = v126;
        else
          v129 = a3 + v185;
        if (v129 <= a3)
        {
          v24 = 0;
          v14 = 1;
          goto LABEL_217;
        }
        v174 = v128;
        v180 = v127 - a3;
        v130 = v185 + a3;
        v131 = -(uint64_t)a3;
        v14 = 1;
        v184 = v185 + a3;
        v189 = -(uint64_t)a3;
LABEL_194:
        v132 = 0;
        v133 = 0;
        v134 = v130 - a3;
        v135 = v131 + a3;
        while ((uint64_t)(v135 + v133) >= 0 && (uint64_t)(v134 + v132) >= 1)
        {
          v136 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v133);
          if (v136 == 10)
          {
            v54 = __OFADD__(v14++, 1);
            v131 = v189;
            if (!v54)
            {
              a3 += v133 + 1;
              goto LABEL_211;
            }
            goto LABEL_278;
          }
          if (v136 == 13)
          {
            v137 = a3 + v133;
            v131 = v189;
            if (!specialized static Comparable.<= infix(_:_:)(a3 + v133 + 1, v127))
              goto LABEL_209;
            if (((v189 + a3 + v133 + 1) & 0x8000000000000000) == 0 && (uint64_t)(~v133 + v134) >= 1)
            {
              if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v133 + 1) == 10)v137 = a3 + v133 + 1;
LABEL_209:
              v54 = __OFADD__(v14++, 1);
              if (!v54)
              {
                a3 = v137 + 1;
LABEL_211:
                v130 = v184;
                if (a3 >= v129)
                {
                  v24 = 0;
LABEL_213:
                  v128 = v174;
                  v49 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))v180;
LABEL_217:
                  v63 = v128;
                  goto LABEL_218;
                }
                goto LABEL_194;
              }
LABEL_279:
              __break(1u);
LABEL_280:
              __break(1u);
LABEL_281:
              __break(1u);
            }
            __break(1u);
LABEL_283:
            __break(1u);
LABEL_284:
            __break(1u);
LABEL_285:
            __break(1u);
LABEL_286:
            __break(1u);
LABEL_287:
            __break(1u);
LABEL_288:
            __break(1u);
LABEL_289:
            __break(1u);
LABEL_290:
            __break(1u);
LABEL_291:
            __break(1u);
            goto LABEL_292;
          }
          v24 = v133 + 1;
          if (__OFADD__(v133, 1))
            goto LABEL_264;
          ++v133;
          --v132;
          if (a3 + v133 >= v129)
            goto LABEL_213;
        }
        __break(1u);
LABEL_264:
        __break(1u);
LABEL_265:
        __break(1u);
LABEL_266:
        __break(1u);
        goto LABEL_267;
      }
    }
    v36 = v33;
    v37 = _asciiNumbers.getter();
    v38 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v32, a3, v185);
    v39 = v36;
    v41 = v40;
    v43 = v42;
    if (v34 >= v37 && HIBYTE(v37) >= v39)
      goto LABEL_111;
    v44 = v39;
LABEL_232:
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_OWORD *)v61 = xmmword_18206BE50;
    *(_QWORD *)(v61 + 16) = v44;
    *(_QWORD *)(v61 + 24) = v38;
    *(_QWORD *)(v61 + 32) = v41;
    *(_QWORD *)(v61 + 40) = v43;
    goto LABEL_245;
  }
  if (!a2)
  {
LABEL_267:
    __break(1u);
    goto LABEL_268;
  }
  v19 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a1);
  if (v19 == 48)
  {
    v171 = a7;
    v175 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
    if (v14 >= 1)
      v20 = 1;
    else
      v20 = v14;
    if (v14 >= 2)
    {
      v21 = v15 + v20;
      v22 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v15 + v20);
      v23 = 0;
      if (v22 <= 0x57u)
      {
        v24 = v15;
        if (v22 == 46 || v22 == 69)
          goto LABEL_46;
LABEL_109:
        v76 = _asciiNumbers.getter();
        v38 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v15 + v20, a3, v185);
        v41 = v77;
        v43 = v78;
        if (v22 >= v76 && HIBYTE(v76) >= v22)
          goto LABEL_111;
        v44 = v22;
        goto LABEL_232;
      }
      if (v22 == 120)
      {
LABEL_12:
        v24 = v21 + 1;
        if (specialized static Comparable.<= infix(_:_:)(v21 + 1, v15 + v14))
        {
LABEL_13:
          v25 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v24);
          v26 = 1;
          if (!UInt8.isValidHexDigit.getter(v25))
          {
            v145 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v24, a3, v185);
            v147 = v146;
            v149 = v148;
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_OWORD *)v150 = xmmword_18206BE50;
            *(_QWORD *)(v150 + 16) = v25;
            *(_QWORD *)(v150 + 24) = v145;
            *(_QWORD *)(v150 + 32) = v147;
            *(_QWORD *)(v150 + 40) = v149;
            *(_BYTE *)(v150 + 48) = 1;
            return swift_willThrow();
          }
          v27 = 0;
LABEL_75:
          result = specialized _parseJSON5Integer<A>(_:isHex:)((unsigned __int8 *)v15, v14, v26, v171, v175);
          if ((v57 & 1) == 0)
            return result;
          if ((v27 & 1) != 0)
          {
            v58 = static String._fromUTF8Repairing(_:)();
            v60 = v59;
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_QWORD *)v61 = v58;
            *(_QWORD *)(v61 + 8) = v60;
            *(_OWORD *)(v61 + 16) = 0u;
            *(_OWORD *)(v61 + 32) = 0u;
            v62 = 11;
LABEL_246:
            *(_BYTE *)(v61 + 48) = v62;
            return swift_willThrow();
          }
          return a9(v12 & 1, v15, v14, a3, v185, v24);
        }
        if (v14 - v20 < 1)
          goto LABEL_290;
        goto LABEL_173;
      }
      if (v22 != 101)
      {
        if (v22 == 88)
          goto LABEL_12;
        goto LABEL_109;
      }
LABEL_45:
      v24 = v15;
      goto LABEL_46;
    }
LABEL_44:
    v23 = 0;
    goto LABEL_45;
  }
  if ((v19 - 58) >= 0xF7u)
  {
    v171 = a7;
    v175 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
    goto LABEL_44;
  }
  switch(v19)
  {
    case '+':
    case '-':
      if (v14 < 2)
      {
        if (v14 != 1)
          goto LABEL_287;
        v94 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v15);
        v95 = v15 - a3;
        if (v15 < a3)
          goto LABEL_288;
        v96 = v94;
        if (!specialized static Comparable.<= infix(_:_:)(v15, a3 + a4))
          goto LABEL_289;
        v97 = specialized min<A>(_:_:)(v15 + 1, a3 + a4);
        if (v97 <= a3)
        {
          v107 = 0;
          v101 = 1;
          goto LABEL_229;
        }
        v98 = v97;
        v173 = v96;
        v179 = v15 - a3;
        v99 = a4 + a3;
        v100 = -(uint64_t)a3;
        v101 = 1;
        v183 = a4 + a3;
        v188 = -(uint64_t)a3;
LABEL_147:
        v102 = 0;
        v103 = 0;
        v104 = v99 - a3;
        v105 = v100 + a3;
        while (1)
        {
          if ((uint64_t)(v105 + v103) < 0 || (uint64_t)(v104 + v102) < 1)
            goto LABEL_269;
          v106 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v103);
          if (v106 == 10)
            break;
          if (v106 == 13)
          {
            v108 = a3 + v103;
            if (!specialized static Comparable.<= infix(_:_:)(a3 + v103 + 1, v15))
              goto LABEL_162;
            if (((v188 + a3 + v103 + 1) & 0x8000000000000000) == 0 && (uint64_t)(~v103 + v104) >= 1)
            {
              if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v103 + 1) == 10)v108 = a3 + v103 + 1;
LABEL_162:
              v54 = __OFADD__(v101++, 1);
              if (!v54)
              {
                a3 = v108 + 1;
LABEL_164:
                v99 = v183;
                v100 = v188;
                if (a3 >= v98)
                {
                  v107 = 0;
LABEL_166:
                  v96 = v173;
                  v95 = v179;
LABEL_229:
                  lazy protocol witness table accessor for type JSONError and conformance JSONError();
                  swift_allocError();
                  *(_QWORD *)v144 = 0xD000000000000010;
                  *(_QWORD *)(v144 + 8) = 0x80000001823071F0;
                  *(_QWORD *)(v144 + 16) = v96;
                  *(_QWORD *)(v144 + 24) = v101;
                  *(_QWORD *)(v144 + 32) = v107;
                  *(_QWORD *)(v144 + 40) = v95;
                  *(_BYTE *)(v144 + 48) = 1;
                  return swift_willThrow();
                }
                goto LABEL_147;
              }
LABEL_295:
              __break(1u);
LABEL_296:
              __break(1u);
LABEL_297:
              __break(1u);
            }
            __break(1u);
LABEL_299:
            __break(1u);
            JUMPOUT(0x181E4AE00);
          }
          v107 = v103 + 1;
          if (__OFADD__(v103, 1))
            goto LABEL_270;
          ++v103;
          --v102;
          if (a3 + v103 >= v98)
            goto LABEL_166;
        }
        v54 = __OFADD__(v101++, 1);
        if (!v54)
        {
          a3 += v103 + 1;
          goto LABEL_164;
        }
        goto LABEL_294;
      }
      v171 = a7;
      v24 = v15 + 1;
      v45 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v15 + 1);
      if (v45 == 48)
      {
        v175 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
        v21 = v15 + 2;
        if (specialized Collection.isEmpty.getter(v15 + 2, v14 - 2))
        {
          v23 = 0;
          goto LABEL_46;
        }
        v152 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v21);
        v23 = 0;
        if (v152 <= 0x57u)
        {
          if (v152 == 46 || v152 == 69)
            goto LABEL_46;
        }
        else
        {
          switch(v152)
          {
            case 'x':
              goto LABEL_239;
            case 'e':
              goto LABEL_46;
            case 'X':
LABEL_239:
              v24 = v15 + 3;
              if (specialized static Comparable.<= infix(_:_:)(v15 + 3, v15 + v14))
                goto LABEL_13;
              if (v14 - 2 < 1)
              {
                __break(1u);
LABEL_242:
                v110 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v21, a3, v185);
                v112 = v153;
                v114 = v154;
                v24 = v24;
                lazy protocol witness table accessor for type JSONError and conformance JSONError();
                swift_allocError();
                *(_QWORD *)v61 = 0xD000000000000013;
                *(_QWORD *)(v61 + 8) = 0x80000001823071D0;
LABEL_243:
                *(_QWORD *)(v61 + 16) = v24;
                goto LABEL_244;
              }
LABEL_173:
              v115 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v21);
              v110 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v21, a3, v185);
              v112 = v116;
              v114 = v117;
              v24 = v115;
              lazy protocol witness table accessor for type JSONError and conformance JSONError();
              swift_allocError();
              *(_OWORD *)v61 = xmmword_18206BE50;
              goto LABEL_243;
          }
        }
        v155 = _asciiNumbers.getter();
        v38 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v21, a3, v185);
        v41 = v156;
        v43 = v157;
        if (v152 >= v155 && HIBYTE(v155) >= v152)
        {
LABEL_111:
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_QWORD *)v61 = v38;
          *(_QWORD *)(v61 + 8) = v41;
          *(_QWORD *)(v61 + 16) = v43;
          *(_QWORD *)(v61 + 24) = 0;
          *(_QWORD *)(v61 + 32) = 0;
          *(_QWORD *)(v61 + 40) = 0;
          v62 = 10;
          goto LABEL_246;
        }
        v44 = v152;
        goto LABEL_232;
      }
      v140 = v45;
      if ((v45 - 58) >= 0xF7u)
        goto LABEL_257;
      if (v45 == 46)
        goto LABEL_256;
      if (v45 != 78)
      {
        if (v45 == 73)
        {
          v141 = (char *)specialized BufferView.dropFirst(_:)(1, v15, v14);
          result = specialized static JSON5Scanner.validateInfinity(from:fullSource:)(v141, v142, a3, v185);
          if (v10)
            return result;
          v175 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
          v23 = 1;
          goto LABEL_46;
        }
        _StringGuts.grow(_:)(20);
        v162._countAndFlagsBits = 0x27207265746661;
        v162._object = (void *)0xE700000000000000;
        DefaultStringInterpolation.appendLiteral(_:)(v162);
        v163 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v15);
        v164 = (v163 + 1);
        if ((v163 & 0x80) != 0)
          v164 = (((v163 & 0x3F) << 8) | (v163 >> 6)) + 33217;
        v190 = (v164 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v164) >> 3)) & 7)));
        v165._countAndFlagsBits = MEMORY[0x186DA46D0](&v190);
        specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v165);
        swift_bridgeObjectRelease();
        v166._countAndFlagsBits = 0x6D756E206E692027;
        v166._object = (void *)0xEB00000000726562;
        DefaultStringInterpolation.appendLiteral(_:)(v166);
        v167 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v24, a3, v185);
        v169 = v168;
        v125 = v170;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_QWORD *)v61 = 0;
        *(_QWORD *)(v61 + 8) = 0xE000000000000000;
        *(_QWORD *)(v61 + 16) = v140;
        *(_QWORD *)(v61 + 24) = v167;
        *(_QWORD *)(v61 + 32) = v169;
LABEL_185:
        *(_QWORD *)(v61 + 40) = v125;
LABEL_245:
        v62 = 1;
        goto LABEL_246;
      }
      v160 = (char *)specialized BufferView.dropFirst(_:)(1, v15, v14);
      result = specialized static JSON5Scanner.validateNaN(from:fullSource:)(v160, v161, a3, v185);
      if (v10)
        return result;
      v175 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
      v23 = 1;
LABEL_46:
      v27 = v23;
      v48 = v15 + v14;
      a8 = v15 + v14 - 1;
      v181 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a8);
      if ((v181 | 0x20) != 0x65)
      {
        v26 = 0;
        goto LABEL_75;
      }
      v49 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))(a8 - a3);
      if (a8 < a3 || a3 + v185 < a8)
        goto LABEL_272;
      if (a3 + v185 >= v48)
        v12 = v48;
      else
        v12 = a3 + v185;
      if (v12 <= a3)
      {
        v24 = 0;
        v14 = 1;
        goto LABEL_79;
      }
      v50 = v185 + a3;
      v24 = -(uint64_t)a3;
      v14 = 1;
      v171 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))(a8 - a3);
      v176 = v185 + a3;
      v185 = -(uint64_t)a3;
      do
      {
        v11 = 0;
        v15 = 0;
        v51 = v50 - a3;
        v52 = v24 + a3;
        while (1)
        {
          if ((uint64_t)(v52 + v15) < 0 || (uint64_t)(v51 + v11) < 1)
          {
            __break(1u);
LABEL_255:
            __break(1u);
LABEL_256:
            v158 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2, v15, v14);
            result = (uint64_t)specialized static JSON5Scanner.validateLeadingDecimal(from:fullSource:)(v158, v159, a3, v185);
            if (v11)
              return result;
LABEL_257:
            v175 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
            v23 = 0;
            goto LABEL_46;
          }
          v53 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v15);
          if (v53 == 10)
          {
            v54 = __OFADD__(v14++, 1);
            v24 = v185;
            if (!v54)
            {
              a3 += v15 + 1;
              goto LABEL_71;
            }
LABEL_276:
            __break(1u);
LABEL_277:
            __break(1u);
LABEL_278:
            __break(1u);
            goto LABEL_279;
          }
          if (v53 == 13)
            break;
          v24 = v15 + 1;
          if (__OFADD__(v15, 1))
            goto LABEL_255;
          ++v15;
          --v11;
          if (a3 + v15 >= v12)
            goto LABEL_73;
        }
        v55 = a3 + v15;
        v24 = v185;
        if (!specialized static Comparable.<= infix(_:_:)(a3 + v15 + 1, a8))
          goto LABEL_69;
        if (((v185 + a3 + v15 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v15 + v51) < 1)
          goto LABEL_281;
        if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v15 + 1) == 10)
          v55 = a3 + v15 + 1;
LABEL_69:
        v54 = __OFADD__(v14++, 1);
        if (v54)
          goto LABEL_277;
        a3 = v55 + 1;
LABEL_71:
        v50 = v176;
      }
      while (a3 < v12);
      v24 = 0;
LABEL_73:
      v49 = v171;
LABEL_79:
      v63 = v181;
LABEL_218:
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(_QWORD *)v139 = 0xD000000000000010;
      *(_QWORD *)(v139 + 8) = 0x80000001823071F0;
      *(_QWORD *)(v139 + 16) = v63;
      *(_QWORD *)(v139 + 24) = v14;
      *(_QWORD *)(v139 + 32) = v24;
      *(_QWORD *)(v139 + 40) = v49;
      *(_BYTE *)(v139 + 48) = 1;
      return swift_willThrow();
    case '.':
      if (v14 >= 1)
        v109 = 1;
      else
        v109 = v14;
      v21 = v15 + v109;
      if (specialized Collection.isEmpty.getter(v15 + v109, v14 - v109))
      {
        v110 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v21, a3, a4);
        v112 = v111;
        v114 = v113;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_QWORD *)v61 = 0;
        *(_QWORD *)(v61 + 8) = 0;
        *(_QWORD *)(v61 + 16) = 46;
LABEL_244:
        *(_QWORD *)(v61 + 24) = v110;
        *(_QWORD *)(v61 + 32) = v112;
        *(_QWORD *)(v61 + 40) = v114;
        goto LABEL_245;
      }
      v175 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
      LOBYTE(v24) = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v21);
      v143 = _asciiNumbers.getter();
      if (v24 >= v143
        && HIBYTE(v143) >= v24)
      {
        v171 = a7;
        v23 = 0;
        v24 = v15;
        goto LABEL_46;
      }
      goto LABEL_242;
    case 'I':
      result = closure #1 in static JSON5Scanner.validateInfinity(from:fullSource:)((const char *)v15, v14, v15, v14, a3, a4);
      goto LABEL_140;
    case 'N':
      result = specialized BufferView.withUnsafeRawPointer<A>(_:)((const char *)v15, v14, v15, v14, a3, a4);
LABEL_140:
      if (v10)
        return result;
      v171 = a7;
      v175 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
      v23 = 1;
      goto LABEL_45;
    default:
      goto LABEL_286;
  }
}

char *specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(__int16 a1, char *a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  int v6;
  unint64_t v7;
  const char *v8;
  unint64_t v14;
  double v15;
  BOOL v16;
  const char *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  size_t v23;
  char v24;
  char v25;
  const char *v26;
  char v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  int v48;
  __int16 v49;
  __int16 v50;
  unint64_t v51;
  unsigned __int8 *v52;
  unint64_t v53;
  unint64_t v54;
  char v56;
  unint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  unsigned int v90;
  unsigned int v91;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  int v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  int v109;
  uint64_t v110;
  Swift::String v111;
  Swift::String v112;
  unint64_t v113;
  unint64_t v114;
  int v115;
  char *v116[2];
  __int16 v117;
  __int16 v118;
  _BYTE v119[40];
  char *v120;
  char *v121;
  unsigned __int16 v122;
  unsigned __int16 v123;
  char v124;
  uint64_t v125;

  LODWORD(v8) = v6;
  LOWORD(v14) = a1;
  v125 = *MEMORY[0x1E0C80C00];
  v116[0] = 0;
  v15 = _stringshims_strtod_l(a2, v116, 0);
  if (v116[0])
    v16 = &a2[a3] == v116[0];
  else
    v16 = 0;
  if (v16)
  {
    v28 = v15;
    if (!specialized static FixedWidthInteger._convert<A>(from:)((uint64_t)v116, v15) || ((uint64_t)v116[1] & 1) != 0)
      goto LABEL_44;
    if (fabs(v28) < 9.00719925e15)
      return v116[0];
  }
  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)((uint64_t)a2, a3, 0x2EuLL, 0xE100000000000000, 1, (uint64_t)v119);
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v119, (uint64_t)&v120);
  if (v124 != 1)
    goto LABEL_43;
  v17 = (const char *)specialized BufferView.suffix(from:)(a6, (uint64_t)a2, a3);
  v19 = (unsigned __int8 *)v17;
  v20 = v18;
  v21 = (unint64_t)&v17[v18];
  if ((v14 & 1) == 0)
  {
    if (v18 <= 0)
    {
      v45 = (unint64_t)v17;
LABEL_84:
      if (v45 >= v21)
        goto LABEL_259;
      v56 = 0;
      v57 = v45 - (_QWORD)v19;
      v58 = 1;
      v59 = 1;
      while (2)
      {
        v60 = 0;
        v61 = (uint64_t)&v19[v20 - v45];
        while (1)
        {
          if ((uint64_t)(v45 - (_QWORD)v19 + v60) < 0 || (v31 = v61 < 1, --v61, v31))
          {
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            v80 = v45 + v60;
            if (v45 + v60 < a4)
              goto LABEL_266;
            v81 = a4 + a5;
            if (a4 + a5 < v80)
              goto LABEL_266;
            if (v81 >= v45 + v60 + 1)
              v81 = v45 + v60 + 1;
            if (v81 <= a4)
            {
              a3 = 0;
              a5 = 1;
            }
            else
            {
              v82 = a5 + a4;
              a5 = 1;
              v83 = a4;
              do
              {
                v84 = 0;
                v85 = 0;
                v86 = v82 - v83;
                while (1)
                {
                  if ((uint64_t)(v83 - a4 + v85) < 0 || (uint64_t)(v86 + v84) < 1)
                    goto LABEL_250;
                  v87 = *(unsigned __int8 *)(v83 + v85);
                  if (v87 == 10)
                  {
                    v74 = __OFADD__(a5++, 1);
                    if (v74)
                      goto LABEL_271;
                    v83 += v85 + 1;
                    goto LABEL_171;
                  }
                  if (v87 == 13)
                    break;
                  a3 = v85 + 1;
                  if (__OFADD__(v85, 1))
                    goto LABEL_251;
                  ++v85;
                  --v84;
                  if (v83 + v85 >= v81)
                    goto LABEL_211;
                }
                v88 = v83 + v85;
                if (v80 >= v83 + v85 + 1)
                {
                  if (((v83 - a4 + v85 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v85 + v86) < 1)
                    goto LABEL_277;
                  if (*(_BYTE *)(v88 + 1) == 10)
                    v88 = v83 + v85 + 1;
                }
                v74 = __OFADD__(a5++, 1);
                if (v74)
                  goto LABEL_272;
                v83 = v88 + 1;
LABEL_171:
                ;
              }
              while (v83 < v81);
              a3 = 0;
            }
LABEL_211:
            a4 = v45 - a4 + v60;
LABEL_240:
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_OWORD *)v40 = xmmword_18206BE50;
            *(_QWORD *)(v40 + 16) = v8;
            *(_QWORD *)(v40 + 24) = a5;
            *(_QWORD *)(v40 + 32) = a3;
            *(_QWORD *)(v40 + 40) = a4;
            v41 = 1;
            goto LABEL_45;
          }
          LODWORD(v8) = *(unsigned __int8 *)(v45 + v60);
          if (((_DWORD)v8 - 58) < 0xFFFFFFF6)
            break;
          if (__OFADD__(v57 + v60, 1))
            goto LABEL_146;
          ++v60;
          if (v45 + v60 >= v21)
            goto LABEL_147;
        }
        v62 = v57 + v60;
        switch(*(_BYTE *)(v45 + v60))
        {
          case '+':
          case '-':
            if (v62 != 0 || (v56 & 1) == 0)
              goto LABEL_142;
            v57 = 0;
            v56 = 0;
            v58 = 0;
            v59 = 0;
            v45 += v60 + 1;
            if (v45 >= v21)
              goto LABEL_244;
            continue;
          case ',':
          case '/':
          case '0':
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
          case ':':
          case ';':
          case '<':
          case '=':
          case '>':
          case '?':
          case '@':
          case 'A':
          case 'B':
          case 'C':
          case 'D':
            goto LABEL_142;
          case '.':
            if (v62 < 1 || (v59 & 1) == 0)
            {
              v93 = v45 + v60;
              if (v45 + v60 < a4)
                goto LABEL_270;
              v94 = a4 + a5;
              if (a4 + a5 < v93)
                goto LABEL_270;
              if (v94 >= v45 + v60 + 1)
                v94 = v45 + v60 + 1;
              if (v94 <= a4)
              {
                a3 = 0;
                a5 = 1;
              }
              else
              {
                v95 = a5 + a4;
                a5 = 1;
                v96 = a4;
                do
                {
                  v97 = 0;
                  v98 = 0;
                  v99 = v95 - v96;
                  while (1)
                  {
                    if ((uint64_t)(v96 - a4 + v98) < 0 || (uint64_t)(v99 + v97) < 1)
                      goto LABEL_253;
                    v100 = *(unsigned __int8 *)(v96 + v98);
                    if (v100 == 10)
                    {
                      v74 = __OFADD__(a5++, 1);
                      if (v74)
                        goto LABEL_275;
                      v96 += v98 + 1;
                      goto LABEL_208;
                    }
                    if (v100 == 13)
                      break;
                    a3 = v98 + 1;
                    if (__OFADD__(v98, 1))
                      goto LABEL_254;
                    ++v98;
                    --v97;
                    if (v96 + v98 >= v94)
                      goto LABEL_239;
                  }
                  v101 = v96 + v98;
                  if (v93 >= v96 + v98 + 1)
                  {
                    if (((v96 - a4 + v98 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v98 + v99) < 1)
                      goto LABEL_280;
                    if (*(_BYTE *)(v101 + 1) == 10)
                      v101 = v96 + v98 + 1;
                  }
                  v74 = __OFADD__(a5++, 1);
                  if (v74)
                    goto LABEL_276;
                  v96 = v101 + 1;
LABEL_208:
                  ;
                }
                while (v96 < v94);
                a3 = 0;
              }
LABEL_239:
              a4 = v45 - a4 + v60;
              LODWORD(v8) = 46;
              goto LABEL_240;
            }
            v57 = 0;
            v56 = 0;
            v59 = 0;
            v45 += v60 + 1;
            v58 = 1;
            if (v45 < v21)
              continue;
            __break(1u);
            break;
          case 'E':
            goto LABEL_98;
          default:
            if ((_DWORD)v8 != 101)
            {
LABEL_142:
              a5 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v45 + v60, a4, a5);
              a3 = v76;
              a4 = v77;
              goto LABEL_240;
            }
LABEL_98:
            if (v62 < 1 || (v58 & 1) == 0)
              goto LABEL_148;
            v57 = 0;
            v58 = 0;
            v59 = 0;
            v45 += v60 + 1;
            v56 = 1;
            if (v45 >= v21)
              goto LABEL_245;
            continue;
        }
        goto LABEL_104;
      }
    }
    v43 = 0;
    v44 = v18;
    while (1)
    {
      if (v43 < 0 || (v31 = v44 < 1, --v44, v31))
      {
        __break(1u);
LABEL_244:
        __break(1u);
LABEL_245:
        __break(1u);
LABEL_246:
        __break(1u);
LABEL_247:
        __break(1u);
LABEL_248:
        __break(1u);
LABEL_249:
        __break(1u);
LABEL_250:
        __break(1u);
LABEL_251:
        __break(1u);
        goto LABEL_252;
      }
      if (v17[v43] - 58 < 0xFFFFFFF6)
        break;
      v45 = (unint64_t)&v17[++v43];
      if ((unint64_t)&v17[v43] >= v21)
        goto LABEL_84;
    }
LABEL_83:
    v45 = (unint64_t)&v19[v43];
    goto LABEL_84;
  }
  if (v18 < 1)
    goto LABEL_255;
  v22 = *(unsigned __int8 *)v17;
  if (v22 == 45 || (v8 = v17, v22 == 43))
    v8 = v17 + 1;
  if (v21 < (unint64_t)v8)
    goto LABEL_256;
  v14 = v8 - v17;
  if (v8 - v17 < 0)
    goto LABEL_257;
  if ((uint64_t)(v21 - (_QWORD)v8) < 0)
    goto LABEL_258;
  if ((uint64_t)(v21 - (_QWORD)v8) >= 2)
    v23 = 2;
  else
    v23 = v21 - (_QWORD)v8;
  if (!_stringshims_strncasecmp_l(v8, "0x", v23, 0))
  {
    v52 = (unsigned __int8 *)(v8 + 2);
    v43 = v21 - (_QWORD)(v8 + 2);
    if (v43 >= 1 && (unint64_t)v52 < v21)
    {
      v43 = v52 - v19;
      if (((v52 - v19) & 0x8000000000000000) == 0)
      {
        a3 = (uint64_t)&v8[-a4 + 2];
        v43 = &v19[v20] - (unsigned __int8 *)v8 - 3;
        v53 = v14 + 3;
        do
        {
          v54 = v53;
          v20 = *v52;
          if ((v20 - 58) <= 0xF5u
            && (*v52 - 65 > 0x25 || ((1 << (v20 - 65)) & 0x3F0000003FLL) == 0))
          {
            if ((unint64_t)v52 < a4)
              goto LABEL_264;
            v66 = a4 + a5;
            if (a4 + a5 < (unint64_t)v52)
              goto LABEL_264;
            if (v66 >= (unint64_t)(v52 + 1))
              v66 = (unint64_t)(v52 + 1);
            if (v66 <= a4)
            {
              v73 = 0;
              v14 = 0xED00007265626D75;
              v21 = 0x6E20786568206E69;
              a5 = 1;
              goto LABEL_174;
            }
            v67 = -(uint64_t)a4;
            v68 = a5 + a4;
            a5 = 1;
            while (1)
            {
              v69 = 0;
              v70 = 0;
              v71 = v68 - a4;
              while (1)
              {
                if ((uint64_t)(v67 + a4 + v70) < 0 || (uint64_t)(v71 + v69) < 1)
                  goto LABEL_246;
                v72 = *(unsigned __int8 *)(a4 + v70);
                if (v72 == 10)
                  break;
                if (v72 == 13)
                {
                  v75 = a4 + v70;
                  if ((unint64_t)v52 >= a4 + v70 + 1)
                  {
                    if (((v67 + a4 + v70 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v70 + v71) < 1)
                      goto LABEL_273;
                    if (*(_BYTE *)(v75 + 1) == 10)
                      v75 = a4 + v70 + 1;
                  }
                  v74 = __OFADD__(a5++, 1);
                  if (v74)
                    goto LABEL_268;
                  a4 = v75 + 1;
                  goto LABEL_140;
                }
                v73 = v70 + 1;
                if (__OFADD__(v70, 1))
                  goto LABEL_247;
                ++v70;
                --v69;
                if (a4 + v70 >= v66)
                {
                  v14 = 0xED00007265626D75;
                  v21 = 0x6E20786568206E69;
LABEL_174:
                  a4 = v20;
                  lazy protocol witness table accessor for type JSONError and conformance JSONError();
                  swift_allocError();
                  *(_QWORD *)v40 = v21;
                  *(_QWORD *)(v40 + 8) = v14;
                  *(_QWORD *)(v40 + 16) = v20;
                  *(_QWORD *)(v40 + 24) = a5;
                  *(_QWORD *)(v40 + 32) = v73;
                  *(_QWORD *)(v40 + 40) = a3;
                  v41 = 1;
                  goto LABEL_45;
                }
              }
              v74 = __OFADD__(a5++, 1);
              if (v74)
                goto LABEL_267;
              a4 += v70 + 1;
LABEL_140:
              v14 = 0xED00007265626D75;
              v21 = 0x6E20786568206E69;
              if (a4 >= v66)
              {
                v73 = 0;
                goto LABEL_174;
              }
            }
          }
          v31 = v43-- < 1;
          if (v31)
            break;
          if ((unint64_t)++v52 >= v21)
            break;
          ++a3;
          ++v53;
        }
        while ((v54 & 0x8000000000000000) == 0);
      }
    }
    __break(1u);
    goto LABEL_83;
  }
  if ((unint64_t)v8 >= v21)
    goto LABEL_263;
  v24 = 0;
  v25 = 0;
  v26 = (const char *)&v19[v20];
  v27 = 1;
LABEL_24:
  v29 = 0;
  v30 = v26 - v8;
  while (v8 - (const char *)v19 + v29 >= 0)
  {
    v31 = v30-- < 1;
    if (v31)
      break;
    LODWORD(v20) = v8[v29];
    if ((v20 - 58) <= 0xF5u)
    {
      switch(v8[v29])
      {
        case '+':
        case '-':
          if (v29 != 0 || (v24 & 1) == 0)
            goto LABEL_143;
          v24 = 0;
          v27 = 0;
          v8 += v29 + 1;
          v25 = 3;
          if ((unint64_t)v8 >= v21)
            goto LABEL_248;
          goto LABEL_24;
        case ',':
        case '/':
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        case ':':
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case '@':
        case 'A':
        case 'B':
        case 'C':
        case 'D':
          goto LABEL_143;
        case '.':
          if ((v27 & 1) == 0)
          {
            v102 = (unint64_t)&v8[v29];
            if ((unint64_t)&v8[v29] < a4)
              goto LABEL_274;
            v103 = a4 + a5;
            if (a4 + a5 < v102)
              goto LABEL_274;
            if (v103 >= (unint64_t)&v8[v29 + 1])
              v103 = (unint64_t)&v8[v29 + 1];
            if (v103 > a4)
            {
              v104 = a5 + a4;
              a5 = 1;
              v105 = a4;
              while (1)
              {
                v106 = 0;
                v107 = 0;
                v108 = v104 - v105;
                while (1)
                {
                  if ((uint64_t)(v105 - a4 + v107) < 0 || (uint64_t)(v108 + v106) < 1)
                  {
                    __break(1u);
LABEL_262:
                    __break(1u);
LABEL_263:
                    __break(1u);
LABEL_264:
                    __break(1u);
LABEL_265:
                    __break(1u);
LABEL_266:
                    __break(1u);
LABEL_267:
                    __break(1u);
LABEL_268:
                    __break(1u);
LABEL_269:
                    __break(1u);
LABEL_270:
                    __break(1u);
LABEL_271:
                    __break(1u);
LABEL_272:
                    __break(1u);
LABEL_273:
                    __break(1u);
LABEL_274:
                    __break(1u);
LABEL_275:
                    __break(1u);
LABEL_276:
                    __break(1u);
LABEL_277:
                    __break(1u);
LABEL_278:
                    __break(1u);
LABEL_279:
                    __break(1u);
LABEL_280:
                    __break(1u);
                  }
                  v109 = *(unsigned __int8 *)(v105 + v107);
                  if (v109 == 10)
                  {
                    v74 = __OFADD__(a5++, 1);
                    if (!v74)
                    {
                      v105 += v107 + 1;
                      goto LABEL_236;
                    }
                    goto LABEL_278;
                  }
                  if (v109 == 13)
                    break;
                  v73 = v107 + 1;
                  if (__OFADD__(v107, 1))
                    goto LABEL_262;
                  ++v107;
                  --v106;
                  if (v105 + v107 >= v103)
                    goto LABEL_242;
                }
                v110 = v105 + v107;
                if (v102 >= v105 + v107 + 1)
                {
                  if (((v105 - a4 + v107 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v107 + v108) < 1)
                  {
                    __break(1u);
LABEL_282:
                    v116[0] = 0;
                    v116[1] = (char *)0xE000000000000000;
                    _StringGuts.grow(_:)(30);
                    swift_bridgeObjectRelease();
                    strcpy((char *)v116, "Invalid index ");
                    HIBYTE(v116[1]) = -18;
                    v111._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                    String.append(_:)(v111);
                    swift_bridgeObjectRelease();
                    v112._countAndFlagsBits = 0x616D5F20726F6620;
                    v112._object = (void *)0xEE0061737369746ELL;
                    String.append(_:)(v112);
                    _assertionFailure(_:_:file:line:flags:)();
                    __break(1u);
                    JUMPOUT(0x181E489D8);
                  }
                  if (*(_BYTE *)(v110 + 1) == 10)
                    v110 = v105 + v107 + 1;
                }
                v74 = __OFADD__(a5++, 1);
                if (v74)
                  goto LABEL_279;
                v105 = v110 + 1;
LABEL_236:
                if (v105 >= v103)
                {
                  v73 = 0;
                  goto LABEL_242;
                }
              }
            }
            v73 = 0;
            a5 = 1;
LABEL_242:
            a3 = (uint64_t)&v8[v29 - a4];
            LOBYTE(v20) = 46;
LABEL_144:
            v14 = 0xE900000000000072;
            v21 = 0x65626D756E206E69;
            goto LABEL_174;
          }
          v24 = 0;
          v27 = 0;
          v8 += v29 + 1;
          v25 = 1;
          if ((unint64_t)v8 < v21)
            goto LABEL_24;
          __break(1u);
          break;
        case 'E':
          goto LABEL_36;
        default:
          if ((_DWORD)v20 != 101)
            goto LABEL_143;
LABEL_36:
          if (v25 != 1 && (v25 || v29 < 1))
          {
LABEL_143:
            a5 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)&v8[v29], a4, a5);
            v73 = v78;
            a3 = v79;
            goto LABEL_144;
          }
          v27 = 0;
          v8 += v29 + 1;
          v25 = 2;
          v24 = 1;
          if ((unint64_t)v8 >= v21)
            goto LABEL_249;
          goto LABEL_24;
      }
LABEL_43:
      v115 = (int)v8;
      LODWORD(v8) = (_DWORD)v120;
      v32 = (unint64_t)v120 >> 48;
      v20 = (unsigned __int16)v121;
      a3 = (unint64_t)v120 >> 32;
      v33 = WORD1(v121);
      v34 = WORD2(v121);
      v35 = HIWORD(v121);
      v36 = v122;
      v37 = v123;
      v116[0] = v120;
      v116[1] = v121;
      v117 = v122;
      v118 = v123;
      if (_So9NSDecimala__isNegative_getter(v116))
        goto LABEL_44;
      v46 = v36;
      v21 = v35;
      v7 = v34;
      a5 = v33;
      v14 = v20;
      LOWORD(v20) = v32;
      LODWORD(v116[0]) = (_DWORD)v8;
      WORD2(v116[0]) = a3;
      HIWORD(v116[0]) = v32;
      LOWORD(v116[1]) = v14;
      WORD1(v116[1]) = a5;
      WORD2(v116[1]) = v7;
      HIWORD(v116[1]) = v21;
      v113 = v37;
      v114 = v46;
      v117 = v46;
      v118 = v37;
      v47 = _So9NSDecimala__length_getter(v116);
      if (!v47)
        goto LABEL_260;
      v45 = 0;
      v48 = v47 - 1;
      if (v47 != 1)
      {
        v49 = v113;
        v50 = v114;
        while (2)
        {
          v51 = v32;
          switch(v48)
          {
            case 1:
              goto LABEL_66;
            case 2:
              v51 = v14;
              goto LABEL_66;
            case 3:
              v51 = a5;
              goto LABEL_66;
            case 4:
              v51 = v7;
              goto LABEL_66;
            case 5:
              v51 = v21;
              goto LABEL_66;
            case 6:
              v51 = v114;
              goto LABEL_66;
            case 7:
              v51 = v113;
LABEL_66:
              if (HIWORD(v45))
                goto LABEL_44;
              v45 = v51 | (v45 << 16);
              if (!--v48)
                goto LABEL_105;
              continue;
            default:
              goto LABEL_282;
          }
        }
      }
LABEL_104:
      v49 = v113;
      v50 = v114;
LABEL_105:
      if (!HIWORD(v45))
      {
        a4 = (unsigned __int16)a3 | (v45 << 16);
        goto LABEL_107;
      }
      goto LABEL_44;
    }
    if (__OFADD__(v29, 1))
      goto LABEL_176;
    if ((unint64_t)&v8[++v29] >= v21)
      goto LABEL_177;
  }
  __break(1u);
LABEL_176:
  __break(1u);
LABEL_177:
  __break(1u);
  do
  {
    LODWORD(v116[0]) = (_DWORD)v8;
    WORD2(v116[0]) = a3;
    HIWORD(v116[0]) = v20;
    LOWORD(v116[1]) = v14;
    WORD1(v116[1]) = a5;
    WORD2(v116[1]) = v7;
    HIWORD(v116[1]) = v21;
    v117 = v114;
    v118 = (__int16)v19;
    v89 = _So9NSDecimala__exponent_getter((char *)v116);
    if (v89 > 0)
      goto LABEL_269;
    LODWORD(v8) = v115;
    if (!v89)
      return (char *)a4;
    v90 = -v89 & ~(-v89 >> 31);
    v91 = ~v89;
    while (v90 > v91)
    {
      a4 /= 0xAuLL;
      if (__CFADD__(v89++, 1))
        return (char *)a4;
    }
LABEL_252:
    __break(1u);
LABEL_253:
    __break(1u);
LABEL_254:
    __break(1u);
LABEL_255:
    __break(1u);
LABEL_256:
    __break(1u);
LABEL_257:
    __break(1u);
LABEL_258:
    __break(1u);
LABEL_259:
    __break(1u);
LABEL_260:
    a4 = 0;
    v49 = v113;
    v50 = v114;
LABEL_107:
    LODWORD(v116[0]) = (_DWORD)v8;
    WORD2(v116[0]) = a3;
    HIWORD(v116[0]) = v20;
    LOWORD(v116[1]) = v14;
    WORD1(v116[1]) = a5;
    WORD2(v116[1]) = v7;
    HIWORD(v116[1]) = v21;
    v117 = v50;
    v118 = v49;
    LOWORD(v19) = v49;
  }
  while ((_So9NSDecimala__exponent_getter((char *)v116) & 0x80000000) != 0);
  LODWORD(v116[0]) = (_DWORD)v8;
  WORD2(v116[0]) = a3;
  HIWORD(v116[0]) = v20;
  LOWORD(v116[1]) = v14;
  WORD1(v116[1]) = a5;
  WORD2(v116[1]) = v7;
  HIWORD(v116[1]) = v21;
  v117 = v114;
  v118 = (__int16)v19;
  v63 = _So9NSDecimala__exponent_getter((char *)v116);
  if (v63 < 0)
    goto LABEL_265;
  if (v63)
  {
    if (is_mul_ok(a4, 0xAuLL))
    {
      a4 *= 10;
      v64 = v63 - 1;
      if (v63 == 1)
        return (char *)a4;
      if (is_mul_ok(a4, 0xAuLL))
      {
        a4 *= 10;
        while (--v64)
        {
          v65 = (a4 * (unsigned __int128)0xAuLL) >> 64;
          a4 *= 10;
          if (v65)
            goto LABEL_44;
        }
        return (char *)a4;
      }
    }
LABEL_44:
    a4 = static String._fromUTF8Repairing(_:)();
    v39 = v38;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_QWORD *)v40 = a4;
    *(_QWORD *)(v40 + 8) = v39;
    *(_OWORD *)(v40 + 16) = 0u;
    *(_OWORD *)(v40 + 32) = 0u;
    v41 = 11;
LABEL_45:
    *(_BYTE *)(v40 + 48) = v41;
    swift_willThrow();
  }
  return (char *)a4;
}

uint64_t specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(int a1, char *a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v15;
  double v16;
  BOOL v17;
  const char *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unint64_t v21;
  int v22;
  size_t v23;
  char v24;
  char v25;
  const char *v26;
  char v27;
  double v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  __int16 v50;
  __int16 v51;
  unint64_t v52;
  unsigned __int8 *v53;
  unint64_t v54;
  unint64_t v55;
  char v57;
  unint64_t v58;
  char v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  int v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  int v89;
  uint64_t v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  int v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  int v111;
  uint64_t v112;
  Swift::String v113;
  Swift::String v114;
  unint64_t v115;
  unint64_t v116;
  __int16 v117;
  char *v118[2];
  __int16 v119;
  __int16 v120;
  _BYTE v121[40];
  char *v122;
  char *v123;
  unsigned __int16 v124;
  unsigned __int16 v125;
  char v126;
  uint64_t v127;

  LODWORD(v9) = v6;
  LODWORD(v15) = a1;
  v127 = *MEMORY[0x1E0C80C00];
  v118[0] = 0;
  v16 = _stringshims_strtod_l(a2, v118, 0);
  if (v118[0])
    v17 = &a2[a3] == v118[0];
  else
    v17 = 0;
  if (v17)
  {
    v28 = v16;
    v29 = specialized UInt128.init<A>(exactly:)(v16);
    if ((v30 & 1) != 0)
      goto LABEL_44;
    if (fabs(v28) < 9.00719925e15)
      return v29;
  }
  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)((uint64_t)a2, a3, 0x2EuLL, 0xE100000000000000, 1, (uint64_t)v121);
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v121, (uint64_t)&v122);
  if (v126 != 1)
    goto LABEL_43;
  v18 = (const char *)specialized BufferView.suffix(from:)(a6, (uint64_t)a2, a3);
  v20 = (unsigned __int8 *)v18;
  v7 = v19;
  v21 = (unint64_t)&v18[v19];
  if ((v15 & 1) == 0)
  {
    if (v19 <= 0)
    {
      v47 = (unint64_t)v18;
LABEL_82:
      if (v47 >= v21)
        goto LABEL_257;
      v57 = 0;
      v58 = v47 - (_QWORD)v20;
      v59 = 1;
      v60 = 1;
      while (2)
      {
        v61 = 0;
        v62 = (uint64_t)&v20[v7 - v47];
        while (1)
        {
          if ((uint64_t)(v47 - (_QWORD)v20 + v61) < 0 || (v33 = v62 < 1, --v62, v33))
          {
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            v82 = v47 + v61;
            if (v47 + v61 < a4)
              goto LABEL_264;
            v83 = a4 + a5;
            if (a4 + a5 < v82)
              goto LABEL_264;
            if (v83 >= v47 + v61 + 1)
              v83 = v47 + v61 + 1;
            if (v83 <= a4)
            {
              a3 = 0;
              a5 = 1;
            }
            else
            {
              v84 = a5 + a4;
              a5 = 1;
              v85 = a4;
              do
              {
                v86 = 0;
                v87 = 0;
                v88 = v84 - v85;
                while (1)
                {
                  if ((uint64_t)(v85 - a4 + v87) < 0 || (uint64_t)(v88 + v86) < 1)
                    goto LABEL_248;
                  v89 = *(unsigned __int8 *)(v85 + v87);
                  if (v89 == 10)
                  {
                    v75 = __OFADD__(a5++, 1);
                    if (v75)
                      goto LABEL_269;
                    v85 += v87 + 1;
                    goto LABEL_169;
                  }
                  if (v89 == 13)
                    break;
                  a3 = v87 + 1;
                  if (__OFADD__(v87, 1))
                    goto LABEL_249;
                  ++v87;
                  --v86;
                  if (v85 + v87 >= v83)
                    goto LABEL_209;
                }
                v90 = v85 + v87;
                if (v82 >= v85 + v87 + 1)
                {
                  if (((v85 - a4 + v87 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v87 + v88) < 1)
                    goto LABEL_275;
                  if (*(_BYTE *)(v90 + 1) == 10)
                    v90 = v85 + v87 + 1;
                }
                v75 = __OFADD__(a5++, 1);
                if (v75)
                  goto LABEL_270;
                v85 = v90 + 1;
LABEL_169:
                ;
              }
              while (v85 < v83);
              a3 = 0;
            }
LABEL_209:
            v79 = v47 - a4 + v61;
LABEL_238:
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_OWORD *)v42 = xmmword_18206BE50;
            *(_QWORD *)(v42 + 16) = v9;
            *(_QWORD *)(v42 + 24) = a5;
            *(_QWORD *)(v42 + 32) = a3;
            *(_QWORD *)(v42 + 40) = v79;
            v43 = 1;
            goto LABEL_45;
          }
          LODWORD(v9) = *(unsigned __int8 *)(v47 + v61);
          if (((_DWORD)v9 - 58) < 0xFFFFFFF6)
            break;
          if (__OFADD__(v58 + v61, 1))
            goto LABEL_144;
          ++v61;
          if (v47 + v61 >= v21)
            goto LABEL_145;
        }
        v63 = v58 + v61;
        switch(*(_BYTE *)(v47 + v61))
        {
          case '+':
          case '-':
            if (v63 != 0 || (v57 & 1) == 0)
              goto LABEL_140;
            v58 = 0;
            v57 = 0;
            v59 = 0;
            v60 = 0;
            v47 += v61 + 1;
            if (v47 >= v21)
              goto LABEL_242;
            continue;
          case ',':
          case '/':
          case '0':
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
          case ':':
          case ';':
          case '<':
          case '=':
          case '>':
          case '?':
          case '@':
          case 'A':
          case 'B':
          case 'C':
          case 'D':
            goto LABEL_140;
          case '.':
            if (v63 < 1 || (v60 & 1) == 0)
            {
              v95 = v47 + v61;
              if (v47 + v61 < a4)
                goto LABEL_268;
              v96 = a4 + a5;
              if (a4 + a5 < v95)
                goto LABEL_268;
              if (v96 >= v47 + v61 + 1)
                v96 = v47 + v61 + 1;
              if (v96 <= a4)
              {
                a3 = 0;
                a5 = 1;
              }
              else
              {
                v97 = a5 + a4;
                a5 = 1;
                v98 = a4;
                do
                {
                  v99 = 0;
                  v100 = 0;
                  v101 = v97 - v98;
                  while (1)
                  {
                    if ((uint64_t)(v98 - a4 + v100) < 0 || (uint64_t)(v101 + v99) < 1)
                      goto LABEL_251;
                    v102 = *(unsigned __int8 *)(v98 + v100);
                    if (v102 == 10)
                    {
                      v75 = __OFADD__(a5++, 1);
                      if (v75)
                        goto LABEL_273;
                      v98 += v100 + 1;
                      goto LABEL_206;
                    }
                    if (v102 == 13)
                      break;
                    a3 = v100 + 1;
                    if (__OFADD__(v100, 1))
                      goto LABEL_252;
                    ++v100;
                    --v99;
                    if (v98 + v100 >= v96)
                      goto LABEL_237;
                  }
                  v103 = v98 + v100;
                  if (v95 >= v98 + v100 + 1)
                  {
                    if (((v98 - a4 + v100 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v100 + v101) < 1)
                      goto LABEL_278;
                    if (*(_BYTE *)(v103 + 1) == 10)
                      v103 = v98 + v100 + 1;
                  }
                  v75 = __OFADD__(a5++, 1);
                  if (v75)
                    goto LABEL_274;
                  v98 = v103 + 1;
LABEL_206:
                  ;
                }
                while (v98 < v96);
                a3 = 0;
              }
LABEL_237:
              v79 = v47 - a4 + v61;
              LODWORD(v9) = 46;
              goto LABEL_238;
            }
            v58 = 0;
            v57 = 0;
            v60 = 0;
            v47 += v61 + 1;
            v59 = 1;
            if (v47 < v21)
              continue;
            __break(1u);
            break;
          case 'E':
            goto LABEL_96;
          default:
            if ((_DWORD)v9 != 101)
            {
LABEL_140:
              a5 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v47 + v61, a4, a5);
              a3 = v77;
              v79 = v78;
              goto LABEL_238;
            }
LABEL_96:
            if (v63 < 1 || (v59 & 1) == 0)
              goto LABEL_146;
            v58 = 0;
            v59 = 0;
            v60 = 0;
            v47 += v61 + 1;
            v57 = 1;
            if (v47 >= v21)
              goto LABEL_243;
            continue;
        }
        goto LABEL_102;
      }
    }
    v45 = 0;
    v46 = v19;
    while (1)
    {
      if (v45 < 0 || (v33 = v46 < 1, --v46, v33))
      {
        __break(1u);
LABEL_242:
        __break(1u);
LABEL_243:
        __break(1u);
LABEL_244:
        __break(1u);
LABEL_245:
        __break(1u);
LABEL_246:
        __break(1u);
LABEL_247:
        __break(1u);
LABEL_248:
        __break(1u);
LABEL_249:
        __break(1u);
        goto LABEL_250;
      }
      if (v18[v45] - 58 < 0xFFFFFFF6)
        break;
      v47 = (unint64_t)&v18[++v45];
      if ((unint64_t)&v18[v45] >= v21)
        goto LABEL_82;
    }
LABEL_81:
    v47 = (unint64_t)&v20[v45];
    goto LABEL_82;
  }
  if (v19 < 1)
    goto LABEL_253;
  v22 = *(unsigned __int8 *)v18;
  if (v22 == 45 || (v9 = v18, v22 == 43))
    v9 = v18 + 1;
  if (v21 < (unint64_t)v9)
    goto LABEL_254;
  v15 = v9 - v18;
  if (v9 - v18 < 0)
    goto LABEL_255;
  if ((uint64_t)(v21 - (_QWORD)v9) < 0)
    goto LABEL_256;
  if ((uint64_t)(v21 - (_QWORD)v9) >= 2)
    v23 = 2;
  else
    v23 = v21 - (_QWORD)v9;
  if (!_stringshims_strncasecmp_l(v9, "0x", v23, 0))
  {
    v53 = (unsigned __int8 *)(v9 + 2);
    v45 = v21 - (_QWORD)(v9 + 2);
    if (v45 >= 1 && (unint64_t)v53 < v21)
    {
      v45 = v53 - v20;
      if (((v53 - v20) & 0x8000000000000000) == 0)
      {
        a3 = (uint64_t)&v9[-a4 + 2];
        v45 = &v20[v7] - (unsigned __int8 *)v9 - 3;
        v54 = v15 + 3;
        do
        {
          v55 = v54;
          v7 = *v53;
          if ((v7 - 58) <= 0xF5u
            && (*v53 - 65 > 0x25 || ((1 << (v7 - 65)) & 0x3F0000003FLL) == 0))
          {
            if ((unint64_t)v53 < a4)
              goto LABEL_262;
            v67 = a4 + a5;
            if (a4 + a5 < (unint64_t)v53)
              goto LABEL_262;
            if (v67 >= (unint64_t)(v53 + 1))
              v67 = (unint64_t)(v53 + 1);
            if (v67 <= a4)
            {
              v74 = 0;
              v15 = 0xED00007265626D75;
              v21 = 0x6E20786568206E69;
              a5 = 1;
              goto LABEL_172;
            }
            v68 = -(uint64_t)a4;
            v69 = a5 + a4;
            a5 = 1;
            while (1)
            {
              v70 = 0;
              v71 = 0;
              v72 = v69 - a4;
              while (1)
              {
                if ((uint64_t)(v68 + a4 + v71) < 0 || (uint64_t)(v72 + v70) < 1)
                  goto LABEL_244;
                v73 = *(unsigned __int8 *)(a4 + v71);
                if (v73 == 10)
                  break;
                if (v73 == 13)
                {
                  v76 = a4 + v71;
                  if ((unint64_t)v53 >= a4 + v71 + 1)
                  {
                    if (((v68 + a4 + v71 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v71 + v72) < 1)
                      goto LABEL_271;
                    if (*(_BYTE *)(v76 + 1) == 10)
                      v76 = a4 + v71 + 1;
                  }
                  v75 = __OFADD__(a5++, 1);
                  if (v75)
                    goto LABEL_266;
                  a4 = v76 + 1;
                  goto LABEL_138;
                }
                v74 = v71 + 1;
                if (__OFADD__(v71, 1))
                  goto LABEL_245;
                ++v71;
                --v70;
                if (a4 + v71 >= v67)
                {
                  v15 = 0xED00007265626D75;
                  v21 = 0x6E20786568206E69;
LABEL_172:
                  lazy protocol witness table accessor for type JSONError and conformance JSONError();
                  swift_allocError();
                  *(_QWORD *)v42 = v21;
                  *(_QWORD *)(v42 + 8) = v15;
                  *(_QWORD *)(v42 + 16) = v7;
                  *(_QWORD *)(v42 + 24) = a5;
                  *(_QWORD *)(v42 + 32) = v74;
                  *(_QWORD *)(v42 + 40) = a3;
                  v43 = 1;
                  goto LABEL_45;
                }
              }
              v75 = __OFADD__(a5++, 1);
              if (v75)
                goto LABEL_265;
              a4 += v71 + 1;
LABEL_138:
              v15 = 0xED00007265626D75;
              v21 = 0x6E20786568206E69;
              if (a4 >= v67)
              {
                v74 = 0;
                goto LABEL_172;
              }
            }
          }
          v33 = v45-- < 1;
          if (v33)
            break;
          if ((unint64_t)++v53 >= v21)
            break;
          ++a3;
          ++v54;
        }
        while ((v55 & 0x8000000000000000) == 0);
      }
    }
    __break(1u);
    goto LABEL_81;
  }
  if ((unint64_t)v9 >= v21)
    goto LABEL_261;
  v24 = 0;
  v25 = 0;
  v26 = (const char *)&v20[v7];
  v27 = 1;
LABEL_24:
  v31 = 0;
  v32 = v26 - v9;
  while (v9 - (const char *)v20 + v31 >= 0)
  {
    v33 = v32-- < 1;
    if (v33)
      break;
    v7 = v9[v31];
    if ((v7 - 58) <= 0xF5u)
    {
      switch(v9[v31])
      {
        case '+':
        case '-':
          if (v31 != 0 || (v24 & 1) == 0)
            goto LABEL_141;
          v24 = 0;
          v27 = 0;
          v9 += v31 + 1;
          v25 = 3;
          if ((unint64_t)v9 >= v21)
            goto LABEL_246;
          goto LABEL_24;
        case ',':
        case '/':
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        case ':':
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case '@':
        case 'A':
        case 'B':
        case 'C':
        case 'D':
          goto LABEL_141;
        case '.':
          if ((v27 & 1) == 0)
          {
            v104 = (unint64_t)&v9[v31];
            if ((unint64_t)&v9[v31] < a4)
              goto LABEL_272;
            v105 = a4 + a5;
            if (a4 + a5 < v104)
              goto LABEL_272;
            if (v105 >= (unint64_t)&v9[v31 + 1])
              v105 = (unint64_t)&v9[v31 + 1];
            if (v105 > a4)
            {
              v106 = a5 + a4;
              a5 = 1;
              v107 = a4;
              while (1)
              {
                v108 = 0;
                v109 = 0;
                v110 = v106 - v107;
                while (1)
                {
                  if ((uint64_t)(v107 - a4 + v109) < 0 || (uint64_t)(v110 + v108) < 1)
                  {
                    __break(1u);
LABEL_260:
                    __break(1u);
LABEL_261:
                    __break(1u);
LABEL_262:
                    __break(1u);
LABEL_263:
                    __break(1u);
LABEL_264:
                    __break(1u);
LABEL_265:
                    __break(1u);
LABEL_266:
                    __break(1u);
LABEL_267:
                    __break(1u);
LABEL_268:
                    __break(1u);
LABEL_269:
                    __break(1u);
LABEL_270:
                    __break(1u);
LABEL_271:
                    __break(1u);
LABEL_272:
                    __break(1u);
LABEL_273:
                    __break(1u);
LABEL_274:
                    __break(1u);
LABEL_275:
                    __break(1u);
LABEL_276:
                    __break(1u);
LABEL_277:
                    __break(1u);
LABEL_278:
                    __break(1u);
LABEL_279:
                    __break(1u);
                  }
                  v111 = *(unsigned __int8 *)(v107 + v109);
                  if (v111 == 10)
                  {
                    v75 = __OFADD__(a5++, 1);
                    if (!v75)
                    {
                      v107 += v109 + 1;
                      goto LABEL_234;
                    }
                    goto LABEL_276;
                  }
                  if (v111 == 13)
                    break;
                  v74 = v109 + 1;
                  if (__OFADD__(v109, 1))
                    goto LABEL_260;
                  ++v109;
                  --v108;
                  if (v107 + v109 >= v105)
                    goto LABEL_240;
                }
                v112 = v107 + v109;
                if (v104 < v107 + v109 + 1)
                  goto LABEL_232;
                if (((v107 - a4 + v109 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v109 + v110) < 1)
                  goto LABEL_279;
                if (*(_BYTE *)(v112 + 1) == 10)
                  v112 = v107 + v109 + 1;
LABEL_232:
                v75 = __OFADD__(a5++, 1);
                if (v75)
                  goto LABEL_277;
                v107 = v112 + 1;
LABEL_234:
                if (v107 >= v105)
                {
                  v74 = 0;
                  goto LABEL_240;
                }
              }
            }
            v74 = 0;
            a5 = 1;
LABEL_240:
            a3 = (uint64_t)&v9[v31 - a4];
            v7 = 46;
LABEL_142:
            v15 = 0xE900000000000072;
            v21 = 0x65626D756E206E69;
            goto LABEL_172;
          }
          v24 = 0;
          v27 = 0;
          v9 += v31 + 1;
          v25 = 1;
          if ((unint64_t)v9 < v21)
            goto LABEL_24;
          __break(1u);
          break;
        case 'E':
          goto LABEL_36;
        default:
          if ((_DWORD)v7 != 101)
            goto LABEL_141;
LABEL_36:
          if (v25 != 1 && (v25 || v31 < 1))
          {
LABEL_141:
            a5 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)&v9[v31], a4, a5);
            v74 = v80;
            a3 = v81;
            goto LABEL_142;
          }
          v27 = 0;
          v9 += v31 + 1;
          v25 = 2;
          v24 = 1;
          if ((unint64_t)v9 >= v21)
            goto LABEL_247;
          goto LABEL_24;
      }
LABEL_43:
      v117 = (__int16)v9;
      LODWORD(v15) = (_DWORD)v122;
      v34 = (unint64_t)v122 >> 48;
      a5 = (unsigned __int16)v123;
      a3 = (unint64_t)v122 >> 32;
      v35 = WORD1(v123);
      v36 = WORD2(v123);
      v37 = HIWORD(v123);
      v38 = v124;
      v7 = v125;
      v118[0] = v122;
      v118[1] = v123;
      v119 = v124;
      v120 = v125;
      if (_So9NSDecimala__isNegative_getter(v118))
        goto LABEL_44;
      v48 = v38;
      v21 = v37;
      v8 = v36;
      a4 = v35;
      v9 = (const char *)a5;
      LOWORD(a5) = v34;
      LODWORD(v118[0]) = v15;
      WORD2(v118[0]) = a3;
      HIWORD(v118[0]) = v34;
      LOWORD(v118[1]) = (_WORD)v9;
      WORD1(v118[1]) = a4;
      WORD2(v118[1]) = v8;
      HIWORD(v118[1]) = v21;
      v115 = v7;
      v116 = v48;
      v119 = v48;
      v120 = v7;
      v49 = _So9NSDecimala__length_getter(v118);
      if (!v49)
        goto LABEL_258;
      v47 = 0;
      v7 = (v49 - 1);
      if (v49 != 1)
      {
        v50 = v115;
        v51 = v116;
        while (1)
        {
          v52 = v34;
          switch((int)v7)
          {
            case 1:
              break;
            case 2:
              v52 = (unint64_t)v9;
              break;
            case 3:
              v52 = a4;
              break;
            case 4:
              v52 = v8;
              break;
            case 5:
              v52 = v21;
              break;
            case 6:
              v52 = v116;
              break;
            case 7:
              v52 = v115;
              break;
            default:
              v118[0] = 0;
              v118[1] = (char *)0xE000000000000000;
              _StringGuts.grow(_:)(30);
              swift_bridgeObjectRelease();
              strcpy((char *)v118, "Invalid index ");
              HIBYTE(v118[1]) = -18;
              v113._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
              String.append(_:)(v113);
              swift_bridgeObjectRelease();
              v114._countAndFlagsBits = 0x616D5F20726F6620;
              v114._object = (void *)0xEE0061737369746ELL;
              String.append(_:)(v114);
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
              JUMPOUT(0x181E4998CLL);
          }
          if (HIWORD(v47))
            goto LABEL_44;
          v47 = v52 | (v47 << 16);
          v7 = (v7 - 1);
          if (!(_DWORD)v7)
            goto LABEL_103;
        }
      }
LABEL_102:
      v50 = v115;
      v51 = v116;
LABEL_103:
      if (!HIWORD(v47))
      {
        v7 = (unsigned __int16)a3 | (v47 << 16);
        goto LABEL_105;
      }
      goto LABEL_44;
    }
    if (__OFADD__(v31, 1))
      goto LABEL_174;
    if ((unint64_t)&v9[++v31] >= v21)
      goto LABEL_175;
  }
  __break(1u);
LABEL_174:
  __break(1u);
LABEL_175:
  __break(1u);
  do
  {
    LODWORD(v118[0]) = v15;
    WORD2(v118[0]) = a3;
    HIWORD(v118[0]) = a5;
    LOWORD(v118[1]) = (_WORD)v9;
    WORD1(v118[1]) = a4;
    WORD2(v118[1]) = v8;
    HIWORD(v118[1]) = v21;
    v119 = v116;
    v120 = (__int16)v20;
    v91 = _So9NSDecimala__exponent_getter((char *)v118);
    if (v91 > 0)
      goto LABEL_267;
    LOWORD(v9) = v117;
    if (!v91)
      return v7;
    v92 = -v91 & ~(-v91 >> 31);
    v93 = ~v91;
    while (v92 > v93)
    {
      v7 /= 0xAuLL;
      if (__CFADD__(v91++, 1))
        return v7;
    }
LABEL_250:
    __break(1u);
LABEL_251:
    __break(1u);
LABEL_252:
    __break(1u);
LABEL_253:
    __break(1u);
LABEL_254:
    __break(1u);
LABEL_255:
    __break(1u);
LABEL_256:
    __break(1u);
LABEL_257:
    __break(1u);
LABEL_258:
    v7 = 0;
    v50 = v115;
    v51 = v116;
LABEL_105:
    LODWORD(v118[0]) = v15;
    WORD2(v118[0]) = a3;
    HIWORD(v118[0]) = a5;
    LOWORD(v118[1]) = (_WORD)v9;
    WORD1(v118[1]) = a4;
    WORD2(v118[1]) = v8;
    HIWORD(v118[1]) = v21;
    v119 = v51;
    v120 = v50;
    LOWORD(v20) = v50;
  }
  while ((_So9NSDecimala__exponent_getter((char *)v118) & 0x80000000) != 0);
  LODWORD(v118[0]) = v15;
  WORD2(v118[0]) = a3;
  HIWORD(v118[0]) = a5;
  LOWORD(v118[1]) = (_WORD)v9;
  WORD1(v118[1]) = a4;
  WORD2(v118[1]) = v8;
  HIWORD(v118[1]) = v21;
  v119 = v116;
  v120 = (__int16)v20;
  v64 = _So9NSDecimala__exponent_getter((char *)v118);
  if (v64 < 0)
    goto LABEL_263;
  if (v64)
  {
    if (is_mul_ok(v7, 0xAuLL))
    {
      v7 *= 10;
      v65 = v64 - 1;
      if (v64 == 1)
        return v7;
      if (is_mul_ok(v7, 0xAuLL))
      {
        v7 *= 10;
        while (--v65)
        {
          v66 = (v7 * (unsigned __int128)0xAuLL) >> 64;
          v7 *= 10;
          if (v66)
            goto LABEL_44;
        }
        return v7;
      }
    }
LABEL_44:
    v39 = static String._fromUTF8Repairing(_:)();
    v41 = v40;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_QWORD *)v42 = v39;
    *(_QWORD *)(v42 + 8) = v41;
    *(_OWORD *)(v42 + 16) = 0u;
    *(_OWORD *)(v42 + 32) = 0u;
    v43 = 11;
LABEL_45:
    *(_BYTE *)(v42 + 48) = v43;
    swift_willThrow();
  }
  return v7;
}

uint64_t specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(char *__s1, uint64_t a2, unint64_t a3, uint64_t a4, char a5, char a6)
{
  uint64_t v6;
  uint64_t result;
  __int16 v13;
  char *v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if ((a5 & 1) != 0)
  {
    result = specialized static JSON5Scanner.prevalidateJSONNumber(from:fullSource:)(__s1, a2, a3, a4);
    if (!v6)
    {
      v14 = (char *)result;
      v15 = v13;
      result = specialized _parseJSON5Integer<A>(_:isHex:)((unsigned __int8 *)__s1, a2, v13 & 1, (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:), (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseIntegerDigits<A>(_:isNegative:));
      if ((result & 0x100000000) != 0)
      {
        if ((v15 & 0x100) != 0)
        {
          v16 = static String._fromUTF8Repairing(_:)();
          v18 = v17;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_QWORD *)v19 = v16;
          *(_QWORD *)(v19 + 8) = v18;
          *(_OWORD *)(v19 + 16) = 0u;
          *(_OWORD *)(v19 + 32) = 0u;
          *(_BYTE *)(v19 + 48) = 11;
          return swift_willThrow();
        }
        return specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(a5 & 1, __s1, a2, a3, a4, v14, (uint64_t (*)(char **))specialized static FixedWidthInteger._convert<A>(from:), (uint64_t (*)(_QWORD, _QWORD, _QWORD))specialized FixedWidthInteger.init(_:));
      }
    }
  }
  else
  {
    result = (uint64_t)specialized static JSONScanner.prevalidateJSONNumber(from:hasExponent:fullSource:)((unsigned __int8 *)__s1, a2, a6 & 1, a3, a4);
    if (!v6)
    {
      v14 = (char *)result;
      result = specialized _parseInteger<A>(_:)((unsigned __int8 *)__s1, a2);
      if ((result & 0x100000000) != 0)
        return specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(a5 & 1, __s1, a2, a3, a4, v14, (uint64_t (*)(char **))specialized static FixedWidthInteger._convert<A>(from:), (uint64_t (*)(_QWORD, _QWORD, _QWORD))specialized FixedWidthInteger.init(_:));
    }
  }
  return result;
}

{
  uint64_t v6;
  uint64_t result;
  __int16 v13;
  char *v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if ((a5 & 1) != 0)
  {
    result = specialized static JSON5Scanner.prevalidateJSONNumber(from:fullSource:)(__s1, a2, a3, a4);
    if (!v6)
    {
      v14 = (char *)result;
      v15 = v13;
      result = specialized _parseJSON5Integer<A>(_:isHex:)((unsigned __int8 *)__s1, a2, v13 & 1, (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:), (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseIntegerDigits<A>(_:isNegative:));
      if ((result & 0x100000000) != 0)
      {
        if ((v15 & 0x100) != 0)
        {
          v16 = static String._fromUTF8Repairing(_:)();
          v18 = v17;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_QWORD *)v19 = v16;
          *(_QWORD *)(v19 + 8) = v18;
          *(_OWORD *)(v19 + 16) = 0u;
          *(_OWORD *)(v19 + 32) = 0u;
          *(_BYTE *)(v19 + 48) = 11;
          return swift_willThrow();
        }
        return specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(a5 & 1, __s1, a2, a3, a4, v14, (uint64_t (*)(char **))specialized static FixedWidthInteger._convert<A>(from:), (uint64_t (*)(_QWORD, _QWORD, _QWORD))specialized FixedWidthInteger.init(_:));
      }
    }
  }
  else
  {
    result = (uint64_t)specialized static JSONScanner.prevalidateJSONNumber(from:hasExponent:fullSource:)((unsigned __int8 *)__s1, a2, a6 & 1, a3, a4);
    if (!v6)
    {
      v14 = (char *)result;
      result = specialized _parseInteger<A>(_:)((unsigned __int8 *)__s1, a2);
      if ((result & 0x100000000) != 0)
        return specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(a5 & 1, __s1, a2, a3, a4, v14, (uint64_t (*)(char **))specialized static FixedWidthInteger._convert<A>(from:), (uint64_t (*)(_QWORD, _QWORD, _QWORD))specialized FixedWidthInteger.init(_:));
    }
  }
  return result;
}

char *specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(char a1, char *a2, uint64_t a3, unint64_t a4, uint64_t a5, char *a6, uint64_t (*a7)(char **))
{
  double v14;
  char *v15;
  BOOL v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  _BYTE *v20;
  double v21;
  char *result;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char v29;
  _BYTE v30[40];
  _BYTE v31[56];
  _BYTE v32[56];
  unint64_t v33[2];
  unsigned int v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v28 = 0;
  v14 = _stringshims_strtod_l(a2, &v28, 0);
  v15 = &a2[a3];
  if (v28)
    v16 = v15 == v28;
  else
    v16 = 0;
  if (v16)
  {
    v21 = v14;
    if ((a7(&v28) & 1) == 0 || (v29 & 1) != 0)
      goto LABEL_14;
    if (fabs(v21) < 9.00719925e15)
      return v28;
  }
  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)((uint64_t)a2, a3, 0x2EuLL, 0xE100000000000000, 1, (uint64_t)v30);
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v30, (uint64_t)v33);
  if (v35 == 1)
  {
    v17 = v15 - a6;
    v18 = (a6 - a2) | (v15 - a6);
    if ((a1 & 1) != 0)
    {
      if ((v18 & 0x8000000000000000) == 0)
      {
        specialized static JSON5Scanner.validateNumber(from:fullSource:)(a6, v17, a4, a5, (uint64_t)v31);
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        v20 = v31;
LABEL_17:
        outlined init with take of JSONError((uint64_t)v20, v19);
        return (char *)swift_willThrow();
      }
      __break(1u);
    }
    else if ((v18 & 0x8000000000000000) == 0)
    {
      specialized static JSONScanner.validateNumber(from:fullSource:)(a6, v17, a4, a5, (uint64_t)v32);
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      v20 = v32;
      goto LABEL_17;
    }
    __break(1u);
  }
  result = (char *)specialized FixedWidthInteger.init(_:)(v33[0], v33[1], v34);
  if ((v23 & 1) == 0)
    return result;
LABEL_14:
  v24 = static String._fromUTF8Repairing(_:)();
  v26 = v25;
  lazy protocol witness table accessor for type JSONError and conformance JSONError();
  swift_allocError();
  *(_QWORD *)v27 = v24;
  *(_QWORD *)(v27 + 8) = v26;
  *(_OWORD *)(v27 + 16) = 0u;
  *(_OWORD *)(v27 + 32) = 0u;
  *(_BYTE *)(v27 + 48) = 11;
  return (char *)swift_willThrow();
}

char *specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(char *__s1, uint64_t a2, unint64_t a3, uint64_t a4, char a5, char a6, uint64_t (*a7)(_BYTE *, uint64_t, uint64_t), uint64_t (*a8)(char *, uint64_t), uint64_t (*a9)(char **))
{
  uint64_t v9;
  char *result;
  __int16 v17;
  char *v18;
  __int16 v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v26;

  if ((a5 & 1) != 0)
  {
    result = (char *)specialized static JSON5Scanner.prevalidateJSONNumber(from:fullSource:)(__s1, a2, a3, a4);
    if (!v9)
    {
      v18 = result;
      v19 = v17;
      result = (char *)specialized _parseJSON5Integer<A>(_:isHex:)(__s1, a2, v17 & 1, a7);
      if ((v20 & 1) != 0)
      {
        if ((v19 & 0x100) != 0)
        {
          v21 = static String._fromUTF8Repairing(_:)();
          v23 = v22;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_QWORD *)v24 = v21;
          *(_QWORD *)(v24 + 8) = v23;
          *(_OWORD *)(v24 + 16) = 0u;
          *(_OWORD *)(v24 + 32) = 0u;
          *(_BYTE *)(v24 + 48) = 11;
          return (char *)swift_willThrow();
        }
        return specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(a5 & 1, __s1, a2, a3, a4, v18, a9);
      }
    }
  }
  else
  {
    result = (char *)specialized static JSONScanner.prevalidateJSONNumber(from:hasExponent:fullSource:)((unsigned __int8 *)__s1, a2, a6 & 1, a3, a4);
    if (!v9)
    {
      v18 = result;
      result = (char *)a8(__s1, a2);
      if ((v26 & 1) != 0)
        return specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(a5 & 1, __s1, a2, a3, a4, v18, a9);
    }
  }
  return result;
}

char *specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(char *__s1, uint64_t a2, unint64_t a3, uint64_t a4, char a5, char a6)
{
  uint64_t v6;
  char *result;
  __int16 v13;
  char *v14;
  __int16 v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  if ((a5 & 1) != 0)
  {
    result = (char *)specialized static JSON5Scanner.prevalidateJSONNumber(from:fullSource:)(__s1, a2, a3, a4);
    if (!v6)
    {
      v14 = result;
      v15 = v13;
      result = (char *)specialized _parseJSON5Integer<A>(_:isHex:)((unsigned __int8 *)__s1, a2, v13 & 1, (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:), (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseIntegerDigits<A>(_:isNegative:));
      if ((v16 & 1) != 0)
      {
        if ((v15 & 0x100) != 0)
        {
          v17 = static String._fromUTF8Repairing(_:)();
          v19 = v18;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_QWORD *)v20 = v17;
          *(_QWORD *)(v20 + 8) = v19;
          *(_OWORD *)(v20 + 16) = 0u;
          *(_OWORD *)(v20 + 32) = 0u;
          *(_BYTE *)(v20 + 48) = 11;
          return (char *)swift_willThrow();
        }
        return (char *)specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(a5 & 1, __s1, a2, a3, a4, v14, (uint64_t (*)(uint64_t))specialized Int128.init<A>(exactly:), (uint64_t (*)(_QWORD, _QWORD, _QWORD))specialized FixedWidthInteger.init(_:));
      }
    }
  }
  else
  {
    result = (char *)specialized static JSONScanner.prevalidateJSONNumber(from:hasExponent:fullSource:)((unsigned __int8 *)__s1, a2, a6 & 1, a3, a4);
    if (!v6)
    {
      v14 = result;
      result = (char *)specialized _parseInteger<A>(_:)((unsigned __int8 *)__s1, a2);
      if ((v21 & 1) != 0)
        return (char *)specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(a5 & 1, __s1, a2, a3, a4, v14, (uint64_t (*)(uint64_t))specialized Int128.init<A>(exactly:), (uint64_t (*)(_QWORD, _QWORD, _QWORD))specialized FixedWidthInteger.init(_:));
    }
  }
  return result;
}

{
  uint64_t v6;
  char *result;
  __int16 v13;
  char *v14;
  __int16 v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  if ((a5 & 1) != 0)
  {
    result = (char *)specialized static JSON5Scanner.prevalidateJSONNumber(from:fullSource:)(__s1, a2, a3, a4);
    if (!v6)
    {
      v14 = result;
      v15 = v13;
      result = (char *)specialized _parseJSON5Integer<A>(_:isHex:)((unsigned __int8 *)__s1, a2, v13 & 1, (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:), (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseIntegerDigits<A>(_:isNegative:));
      if ((v16 & 1) != 0)
      {
        if ((v15 & 0x100) != 0)
        {
          v17 = static String._fromUTF8Repairing(_:)();
          v19 = v18;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_QWORD *)v20 = v17;
          *(_QWORD *)(v20 + 8) = v19;
          *(_OWORD *)(v20 + 16) = 0u;
          *(_OWORD *)(v20 + 32) = 0u;
          *(_BYTE *)(v20 + 48) = 11;
          return (char *)swift_willThrow();
        }
        return (char *)specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(a5 & 1, __s1, a2, a3, a4, v14, (uint64_t (*)(uint64_t))specialized UInt128.init<A>(exactly:), (uint64_t (*)(_QWORD, _QWORD, _QWORD))specialized FixedWidthInteger.init(_:));
      }
    }
  }
  else
  {
    result = (char *)specialized static JSONScanner.prevalidateJSONNumber(from:hasExponent:fullSource:)((unsigned __int8 *)__s1, a2, a6 & 1, a3, a4);
    if (!v6)
    {
      v14 = result;
      result = (char *)specialized _parseInteger<A>(_:)((unsigned __int8 *)__s1, a2);
      if ((v21 & 1) != 0)
        return (char *)specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(a5 & 1, __s1, a2, a3, a4, v14, (uint64_t (*)(uint64_t))specialized UInt128.init<A>(exactly:), (uint64_t (*)(_QWORD, _QWORD, _QWORD))specialized FixedWidthInteger.init(_:));
    }
  }
  return result;
}

char *specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(char a1, char *a2, uint64_t a3, unint64_t a4, uint64_t a5, char *a6)
{
  double v12;
  char *v13;
  BOOL v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  _BYTE *v18;
  double v19;
  char *result;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char v27;
  _BYTE v28[40];
  _BYTE v29[56];
  _BYTE v30[56];
  unint64_t v31[2];
  unsigned int v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v26 = 0;
  v12 = _stringshims_strtod_l(a2, &v26, 0);
  v13 = &a2[a3];
  if (v26)
    v14 = v13 == v26;
  else
    v14 = 0;
  if (v14)
  {
    v19 = v12;
    if (!specialized static FixedWidthInteger._convert<A>(from:)((uint64_t)&v26, v12) || (v27 & 1) != 0)
      goto LABEL_14;
    if (fabs(v19) < 9.00719925e15)
      return v26;
  }
  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)((uint64_t)a2, a3, 0x2EuLL, 0xE100000000000000, 1, (uint64_t)v28);
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v28, (uint64_t)v31);
  if (v33 == 1)
  {
    v15 = v13 - a6;
    v16 = (a6 - a2) | (v13 - a6);
    if ((a1 & 1) != 0)
    {
      if ((v16 & 0x8000000000000000) == 0)
      {
        specialized static JSON5Scanner.validateNumber(from:fullSource:)(a6, v15, a4, a5, (uint64_t)v29);
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        v18 = v29;
LABEL_17:
        outlined init with take of JSONError((uint64_t)v18, v17);
        return (char *)swift_willThrow();
      }
      __break(1u);
    }
    else if ((v16 & 0x8000000000000000) == 0)
    {
      specialized static JSONScanner.validateNumber(from:fullSource:)(a6, v15, a4, a5, (uint64_t)v30);
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      v18 = v30;
      goto LABEL_17;
    }
    __break(1u);
  }
  result = (char *)specialized FixedWidthInteger.init(_:)(v31[0], v31[1], v32);
  if ((v21 & 1) == 0)
    return result;
LABEL_14:
  v22 = static String._fromUTF8Repairing(_:)();
  v24 = v23;
  lazy protocol witness table accessor for type JSONError and conformance JSONError();
  swift_allocError();
  *(_QWORD *)v25 = v22;
  *(_QWORD *)(v25 + 8) = v24;
  *(_OWORD *)(v25 + 16) = 0u;
  *(_OWORD *)(v25 + 32) = 0u;
  *(_BYTE *)(v25 + 48) = 11;
  return (char *)swift_willThrow();
}

uint64_t specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(char a1, char *a2, uint64_t a3, unint64_t a4, uint64_t a5, char *a6, uint64_t (*a7)(char **), uint64_t (*a8)(_QWORD, _QWORD, _QWORD))
{
  double v15;
  char *v16;
  BOOL v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  _BYTE *v21;
  double v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v29;
  _BYTE v30[40];
  _BYTE v31[56];
  _BYTE v32[56];
  _QWORD v33[2];
  unsigned int v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v29 = 0;
  v15 = _stringshims_strtod_l(a2, &v29, 0);
  v16 = &a2[a3];
  if (v29)
    v17 = v16 == v29;
  else
    v17 = 0;
  if (v17)
  {
    v22 = v15;
    if ((a7(&v29) & 1) == 0 || (BYTE1(v29) & 1) != 0)
      goto LABEL_14;
    if (fabs(v22) < 9.00719925e15)
      return v29;
  }
  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)((uint64_t)a2, a3, 0x2EuLL, 0xE100000000000000, 1, (uint64_t)v30);
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v30, (uint64_t)v33);
  if (v35 == 1)
  {
    v18 = v16 - a6;
    v19 = (a6 - a2) | (v16 - a6);
    if ((a1 & 1) != 0)
    {
      if ((v19 & 0x8000000000000000) == 0)
      {
        specialized static JSON5Scanner.validateNumber(from:fullSource:)(a6, v18, a4, a5, (uint64_t)v31);
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        v21 = v31;
LABEL_17:
        outlined init with take of JSONError((uint64_t)v21, v20);
        return swift_willThrow();
      }
      __break(1u);
    }
    else if ((v19 & 0x8000000000000000) == 0)
    {
      specialized static JSONScanner.validateNumber(from:fullSource:)(a6, v18, a4, a5, (uint64_t)v32);
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      v21 = v32;
      goto LABEL_17;
    }
    __break(1u);
  }
  result = a8(v33[0], v33[1], v34);
  if ((result & 0x100) == 0)
    return result;
LABEL_14:
  v24 = static String._fromUTF8Repairing(_:)();
  v26 = v25;
  lazy protocol witness table accessor for type JSONError and conformance JSONError();
  swift_allocError();
  *(_QWORD *)v27 = v24;
  *(_QWORD *)(v27 + 8) = v26;
  *(_OWORD *)(v27 + 16) = 0u;
  *(_OWORD *)(v27 + 32) = 0u;
  *(_BYTE *)(v27 + 48) = 11;
  return swift_willThrow();
}

{
  double v15;
  char *v16;
  BOOL v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  _BYTE *v21;
  double v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v29;
  _BYTE v30[40];
  _BYTE v31[56];
  _BYTE v32[56];
  _QWORD v33[2];
  unsigned int v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v29 = 0;
  v15 = _stringshims_strtod_l(a2, &v29, 0);
  v16 = &a2[a3];
  if (v29)
    v17 = v16 == v29;
  else
    v17 = 0;
  if (v17)
  {
    v22 = v15;
    if ((a7(&v29) & 1) == 0 || (BYTE2(v29) & 1) != 0)
      goto LABEL_14;
    if (fabs(v22) < 9.00719925e15)
      return (unsigned __int16)v29;
  }
  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)((uint64_t)a2, a3, 0x2EuLL, 0xE100000000000000, 1, (uint64_t)v30);
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v30, (uint64_t)v33);
  if (v35 == 1)
  {
    v18 = v16 - a6;
    v19 = (a6 - a2) | (v16 - a6);
    if ((a1 & 1) != 0)
    {
      if ((v19 & 0x8000000000000000) == 0)
      {
        specialized static JSON5Scanner.validateNumber(from:fullSource:)(a6, v18, a4, a5, (uint64_t)v31);
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        v21 = v31;
LABEL_17:
        outlined init with take of JSONError((uint64_t)v21, v20);
        return swift_willThrow();
      }
      __break(1u);
    }
    else if ((v19 & 0x8000000000000000) == 0)
    {
      specialized static JSONScanner.validateNumber(from:fullSource:)(a6, v18, a4, a5, (uint64_t)v32);
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      v21 = v32;
      goto LABEL_17;
    }
    __break(1u);
  }
  result = a8(v33[0], v33[1], v34);
  if ((result & 0x10000) == 0)
    return result;
LABEL_14:
  v24 = static String._fromUTF8Repairing(_:)();
  v26 = v25;
  lazy protocol witness table accessor for type JSONError and conformance JSONError();
  swift_allocError();
  *(_QWORD *)v27 = v24;
  *(_QWORD *)(v27 + 8) = v26;
  *(_OWORD *)(v27 + 16) = 0u;
  *(_OWORD *)(v27 + 32) = 0u;
  *(_BYTE *)(v27 + 48) = 11;
  return swift_willThrow();
}

{
  double v15;
  char *v16;
  BOOL v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  _BYTE *v21;
  double v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v29;
  _BYTE v30[40];
  _BYTE v31[56];
  _BYTE v32[56];
  _QWORD v33[2];
  unsigned int v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v29 = 0;
  v15 = _stringshims_strtod_l(a2, &v29, 0);
  v16 = &a2[a3];
  if (v29)
    v17 = v16 == v29;
  else
    v17 = 0;
  if (v17)
  {
    v22 = v15;
    if ((a7(&v29) & 1) == 0 || (BYTE4(v29) & 1) != 0)
      goto LABEL_14;
    if (fabs(v22) < 9.00719925e15)
      return v29;
  }
  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)((uint64_t)a2, a3, 0x2EuLL, 0xE100000000000000, 1, (uint64_t)v30);
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v30, (uint64_t)v33);
  if (v35 == 1)
  {
    v18 = v16 - a6;
    v19 = (a6 - a2) | (v16 - a6);
    if ((a1 & 1) != 0)
    {
      if ((v19 & 0x8000000000000000) == 0)
      {
        specialized static JSON5Scanner.validateNumber(from:fullSource:)(a6, v18, a4, a5, (uint64_t)v31);
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        v21 = v31;
LABEL_17:
        outlined init with take of JSONError((uint64_t)v21, v20);
        return swift_willThrow();
      }
      __break(1u);
    }
    else if ((v19 & 0x8000000000000000) == 0)
    {
      specialized static JSONScanner.validateNumber(from:fullSource:)(a6, v18, a4, a5, (uint64_t)v32);
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      v21 = v32;
      goto LABEL_17;
    }
    __break(1u);
  }
  result = a8(v33[0], v33[1], v34);
  if ((result & 0x100000000) == 0)
    return result;
LABEL_14:
  v24 = static String._fromUTF8Repairing(_:)();
  v26 = v25;
  lazy protocol witness table accessor for type JSONError and conformance JSONError();
  swift_allocError();
  *(_QWORD *)v27 = v24;
  *(_QWORD *)(v27 + 8) = v26;
  *(_OWORD *)(v27 + 16) = 0u;
  *(_OWORD *)(v27 + 32) = 0u;
  *(_BYTE *)(v27 + 48) = 11;
  return swift_willThrow();
}

uint64_t specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(char *__s1, uint64_t a2, unint64_t a3, uint64_t a4, char a5, char a6, uint64_t (*a7)(char *, uint64_t, _QWORD), uint64_t (*a8)(char *, uint64_t), uint64_t (*a9)(char **), uint64_t (*a10)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v10;
  uint64_t result;
  __int16 v18;
  char *v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if ((a5 & 1) != 0)
  {
    result = specialized static JSON5Scanner.prevalidateJSONNumber(from:fullSource:)(__s1, a2, a3, a4);
    if (!v10)
    {
      v19 = (char *)result;
      v20 = v18;
      result = a7(__s1, a2, v18 & 1);
      if ((result & 0x100) != 0)
      {
        if ((v20 & 0x100) != 0)
        {
          v21 = static String._fromUTF8Repairing(_:)();
          v23 = v22;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_QWORD *)v24 = v21;
          *(_QWORD *)(v24 + 8) = v23;
          *(_OWORD *)(v24 + 16) = 0u;
          *(_OWORD *)(v24 + 32) = 0u;
          *(_BYTE *)(v24 + 48) = 11;
          return swift_willThrow();
        }
        return specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(a5 & 1, __s1, a2, a3, a4, v19, a9, a10);
      }
    }
  }
  else
  {
    result = (uint64_t)specialized static JSONScanner.prevalidateJSONNumber(from:hasExponent:fullSource:)((unsigned __int8 *)__s1, a2, a6 & 1, a3, a4);
    if (!v10)
    {
      v19 = (char *)result;
      result = a8(__s1, a2);
      if ((result & 0x100) != 0)
        return specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(a5 & 1, __s1, a2, a3, a4, v19, a9, a10);
    }
  }
  return result;
}

{
  uint64_t v10;
  uint64_t result;
  __int16 v18;
  char *v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if ((a5 & 1) != 0)
  {
    result = specialized static JSON5Scanner.prevalidateJSONNumber(from:fullSource:)(__s1, a2, a3, a4);
    if (!v10)
    {
      v19 = (char *)result;
      v20 = v18;
      result = a7(__s1, a2, v18 & 1);
      if ((result & 0x10000) != 0)
      {
        if ((v20 & 0x100) != 0)
        {
          v21 = static String._fromUTF8Repairing(_:)();
          v23 = v22;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_QWORD *)v24 = v21;
          *(_QWORD *)(v24 + 8) = v23;
          *(_OWORD *)(v24 + 16) = 0u;
          *(_OWORD *)(v24 + 32) = 0u;
          *(_BYTE *)(v24 + 48) = 11;
          return swift_willThrow();
        }
        return specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(a5 & 1, __s1, a2, a3, a4, v19, a9, a10);
      }
    }
  }
  else
  {
    result = (uint64_t)specialized static JSONScanner.prevalidateJSONNumber(from:hasExponent:fullSource:)((unsigned __int8 *)__s1, a2, a6 & 1, a3, a4);
    if (!v10)
    {
      v19 = (char *)result;
      result = a8(__s1, a2);
      if ((result & 0x10000) != 0)
        return specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(a5 & 1, __s1, a2, a3, a4, v19, a9, a10);
    }
  }
  return result;
}

char *specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(char *__s1, uint64_t a2, unint64_t a3, uint64_t a4, char a5, char a6, uint64_t (*a7)(unsigned __int8 *, uint64_t, uint64_t), uint64_t (*a8)(unsigned __int8 *, uint64_t, uint64_t), uint64_t (*a9)(char *, uint64_t))
{
  uint64_t v9;
  char *result;
  __int16 v18;
  __int16 v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char *v26;

  if ((a5 & 1) != 0)
  {
    result = (char *)specialized static JSON5Scanner.prevalidateJSONNumber(from:fullSource:)(__s1, a2, a3, a4);
    if (!v9)
    {
      v19 = v18;
      v26 = result;
      result = (char *)specialized _parseJSON5Integer<A>(_:isHex:)((unsigned __int8 *)__s1, a2, v18 & 1, a7, a8);
      if ((v20 & 1) != 0)
      {
        if ((v19 & 0x100) != 0)
        {
          v21 = static String._fromUTF8Repairing(_:)();
          v23 = v22;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_QWORD *)v24 = v21;
          *(_QWORD *)(v24 + 8) = v23;
          *(_OWORD *)(v24 + 16) = 0u;
          *(_OWORD *)(v24 + 32) = 0u;
          *(_BYTE *)(v24 + 48) = 11;
          return (char *)swift_willThrow();
        }
        return specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(a5 & 1, __s1, a2, a3, a4, v26);
      }
    }
  }
  else
  {
    result = (char *)specialized static JSONScanner.prevalidateJSONNumber(from:hasExponent:fullSource:)((unsigned __int8 *)__s1, a2, a6 & 1, a3, a4);
    if (!v9)
    {
      v26 = result;
      result = (char *)a9(__s1, a2);
      if ((v25 & 1) != 0)
        return specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(a5 & 1, __s1, a2, a3, a4, v26);
    }
  }
  return result;
}

uint64_t specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(char a1, char *a2, uint64_t a3, unint64_t a4, uint64_t a5, char *a6, uint64_t (*a7)(uint64_t), uint64_t (*a8)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v15;
  double v16;
  char *v17;
  BOOL v18;
  double v19;
  uint64_t result;
  char v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  _BYTE *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v32;
  _BYTE v33[40];
  _BYTE v34[56];
  _BYTE v35[56];
  _QWORD v36[2];
  unsigned int v37;
  char v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v32 = 0;
  v16 = _stringshims_strtod_l(a2, &v32, 0);
  v17 = &a2[a3];
  if (v32)
    v18 = v17 == v32;
  else
    v18 = 0;
  if (v18)
  {
    v19 = v16;
    result = a7(v15);
    if ((v21 & 1) != 0)
      goto LABEL_13;
    if (fabs(v19) < 9.00719925e15)
      return result;
  }
  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)((uint64_t)a2, a3, 0x2EuLL, 0xE100000000000000, 1, (uint64_t)v33);
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v33, (uint64_t)v36);
  if (v38 == 1)
  {
    v22 = v17 - a6;
    v23 = (a6 - a2) | (v17 - a6);
    if ((a1 & 1) != 0)
    {
      if ((v23 & 0x8000000000000000) == 0)
      {
        specialized static JSON5Scanner.validateNumber(from:fullSource:)(a6, v22, a4, a5, (uint64_t)v34);
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        v25 = v34;
LABEL_16:
        outlined init with take of JSONError((uint64_t)v25, v24);
        return swift_willThrow();
      }
      __break(1u);
    }
    else if ((v23 & 0x8000000000000000) == 0)
    {
      specialized static JSONScanner.validateNumber(from:fullSource:)(a6, v22, a4, a5, (uint64_t)v35);
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      v25 = v35;
      goto LABEL_16;
    }
    __break(1u);
  }
  result = a8(v36[0], v36[1], v37);
  if ((v26 & 1) == 0)
    return result;
LABEL_13:
  v27 = static String._fromUTF8Repairing(_:)();
  v29 = v28;
  lazy protocol witness table accessor for type JSONError and conformance JSONError();
  swift_allocError();
  *(_QWORD *)v30 = v27;
  *(_QWORD *)(v30 + 8) = v29;
  *(_OWORD *)(v30 + 16) = 0u;
  *(_OWORD *)(v30 + 32) = 0u;
  *(_BYTE *)(v30 + 48) = 11;
  return swift_willThrow();
}

uint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(a1, a2, a3, a4, (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:), (unint64_t)specialized _parseIntegerDigits<A>(_:isNegative:), (uint64_t (*)(unint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t))specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:), (uint64_t (*)(unint64_t, uint64_t))specialized _parseInteger<A>(_:), a5);
}

{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(a1, a2, a3, a4, (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:), (unint64_t)specialized _parseIntegerDigits<A>(_:isNegative:), (uint64_t (*)(unint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t))specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:), (uint64_t (*)(unint64_t, uint64_t))specialized _parseInteger<A>(_:), a5);
}

uint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(a1, a2, a3, a4, (uint64_t)specialized _parseHexIntegerDigits<A>(_:isNegative:), (uint64_t)specialized _parseIntegerDigits<A>(_:isNegative:), (uint64_t)specialized _parseInteger<A>(_:), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:), a5);
}

{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(a1, a2, a3, a4, (uint64_t)specialized _parseHexIntegerDigits<A>(_:isNegative:), (uint64_t)specialized static FixedWidthInteger._convert<A>(from:), (uint64_t)specialized _parseInteger<A>(_:), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:), a5);
}

{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:), a5);
}

{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(a1, a2, a3, a4, (uint64_t)specialized _parseHexIntegerDigits<A>(_:isNegative:), (uint64_t)specialized _parseIntegerDigits<A>(_:isNegative:), (uint64_t)specialized _parseInteger<A>(_:), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:), a5);
}

{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:), a5);
}

{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(a1, a2, a3, a4, (uint64_t)specialized _parseHexIntegerDigits<A>(_:isNegative:), (uint64_t)specialized _parseInteger<A>(_:), (uint64_t)specialized static FixedWidthInteger._convert<A>(from:), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:), a5);
}

uint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, _DWORD *a5@<X8>)
{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(a1, a2, a3, a4, (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:), (unint64_t)specialized _parseIntegerDigits<A>(_:isNegative:), (uint64_t (*)(unint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t))specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:), (uint64_t (*)(unint64_t, uint64_t))specialized _parseInteger<A>(_:), a5);
}

{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(a1, a2, a3, a4, (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:), (unint64_t)specialized _parseIntegerDigits<A>(_:isNegative:), (uint64_t (*)(unint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t))specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:), (uint64_t (*)(unint64_t, uint64_t))specialized _parseInteger<A>(_:), a5);
}

uint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, _WORD *a5@<X8>)
{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(a1, a2, a3, a4, (uint64_t (*)(unint64_t, uint64_t, uint64_t))specialized _parseJSON5Integer<A>(_:isHex:), (uint64_t)specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:), (uint64_t (*)(unint64_t, uint64_t))specialized _parseInteger<A>(_:), a5);
}

{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(a1, a2, a3, a4, (uint64_t (*)(unint64_t, uint64_t, uint64_t))specialized _parseJSON5Integer<A>(_:isHex:), (uint64_t)specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:), (uint64_t (*)(unint64_t, uint64_t))specialized _parseInteger<A>(_:), a5);
}

uint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(a1, a2, a3, a4, (uint64_t (*)(unint64_t, uint64_t, uint64_t))specialized _parseJSON5Integer<A>(_:isHex:), (uint64_t)specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:), (uint64_t (*)(unint64_t, uint64_t))specialized _parseInteger<A>(_:), a5);
}

{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(a1, a2, a3, a4, (uint64_t (*)(unint64_t, uint64_t, uint64_t))specialized _parseJSON5Integer<A>(_:isHex:), (uint64_t)specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:), (uint64_t (*)(unint64_t, uint64_t))specialized _parseInteger<A>(_:), a5);
}

uint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t (*a8)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t)@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  result = a8(a1, a2, a3, a4, *(unsigned __int8 *)(v9 + 16), *(unsigned __int8 *)(v9 + 17), a5, a6, a7);
  if (!v10)
    *a9 = result;
  return result;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  result = a8(a1, a2, a3, a4, *(unsigned __int8 *)(v9 + 32), *(unsigned __int8 *)(v9 + 33), a5, a6, a7);
  if (!v10)
    *a9 = result;
  return result;
}

uint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(unsigned __int8 *, uint64_t, uint64_t)@<X4>, unint64_t a6@<X5>, uint64_t (*a7)(unint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t)@<X6>, uint64_t (*a8)(unint64_t, uint64_t)@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v13;

  result = specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(a1, a2, a3, a4, *(_BYTE *)(v9 + 16), *(_BYTE *)(v9 + 17), a5, a6, a7, a8);
  if (!v10)
  {
    *a9 = result;
    a9[1] = v13;
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(unsigned __int8 *, uint64_t, uint64_t)@<X4>, unint64_t a6@<X5>, uint64_t (*a7)(unint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t)@<X6>, uint64_t (*a8)(unint64_t, uint64_t)@<X7>, _DWORD *a9@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  result = specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(a1, a2, a3, a4, *(_BYTE *)(v9 + 16), *(_BYTE *)(v9 + 17), a5, a6, a7, a8);
  if (!v10)
    *a9 = result;
  return result;
}

uint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(unint64_t, uint64_t, uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(unint64_t, uint64_t)@<X6>, _WORD *a8@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  result = specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(a1, a2, a3, a4, *(_BYTE *)(v8 + 16), *(_BYTE *)(v8 + 17), a5, a6, a7);
  if (!v9)
    *a8 = result;
  return result;
}

uint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(unint64_t, uint64_t, uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(unint64_t, uint64_t)@<X6>, _BYTE *a8@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  result = specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(a1, a2, a3, a4, *(_BYTE *)(v8 + 16), *(_BYTE *)(v8 + 17), a5, a6, a7);
  if (!v9)
    *a8 = result;
  return result;
}

void partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, float *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  float v8;

  v8 = specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(a1, a2, a3, a4, *(_BYTE *)(v5 + 16), *(_BYTE *)(v5 + 17));
  if (!v6)
    *a5 = v8;
}

uint64_t partial apply for closure #1 in closure #1 in static JSONDecoder.withUTF8Representation<A>(of:_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (result)
  {
    if ((a2 & 0x8000000000000000) == 0)
      return (*(uint64_t (**)(void))(v2 + 24))();
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *assignWithCopy for JSONDecoderImpl.KeyedContainer(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for JSONDecoderImpl.KeyedContainer(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t destroy for JSONDecoderImpl.UnkeyedContainer()
{
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for JSONDecoderImpl.UnkeyedContainer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v4 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v4;
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for JSONDecoderImpl.UnkeyedContainer(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  v4 = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for JSONDecoderImpl.UnkeyedContainer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release();
  return a1;
}

void *type metadata accessor for JSONDecoderImpl.UnkeyedContainer()
{
  return &unk_1E0F1BF30;
}

uint64_t sub_181E4CD58()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _DWORD *a5@<X8>)
{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:), a5);
}

{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:), a5);
}

uint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, _WORD *a5@<X8>)
{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(a1, a2, a3, a4, (uint64_t (*)(char *, uint64_t, _QWORD))specialized _parseJSON5Integer<A>(_:isHex:), (uint64_t (*)(char *, uint64_t))specialized _parseInteger<A>(_:), (uint64_t (*)(char **))specialized static FixedWidthInteger._convert<A>(from:), (uint64_t (*)(_QWORD, _QWORD, _QWORD))specialized FixedWidthInteger.init(_:), a5);
}

{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(a1, a2, a3, a4, (uint64_t (*)(char *, uint64_t, _QWORD))specialized _parseJSON5Integer<A>(_:isHex:), (uint64_t (*)(char *, uint64_t))specialized _parseInteger<A>(_:), (uint64_t (*)(char **))specialized static FixedWidthInteger._convert<A>(from:), (uint64_t (*)(_QWORD, _QWORD, _QWORD))specialized FixedWidthInteger.init(_:), a5);
}

uint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(a1, a2, a3, a4, (uint64_t (*)(char *, uint64_t, _QWORD))specialized _parseJSON5Integer<A>(_:isHex:), (uint64_t (*)(char *, uint64_t))specialized _parseInteger<A>(_:), (uint64_t (*)(char **))specialized static FixedWidthInteger._convert<A>(from:), (uint64_t (*)(_QWORD, _QWORD, _QWORD))specialized FixedWidthInteger.init(_:), a5);
}

{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(a1, a2, a3, a4, (uint64_t (*)(char *, uint64_t, _QWORD))specialized _parseJSON5Integer<A>(_:isHex:), (uint64_t (*)(char *, uint64_t))specialized _parseInteger<A>(_:), (uint64_t (*)(char **))specialized static FixedWidthInteger._convert<A>(from:), (uint64_t (*)(_QWORD, _QWORD, _QWORD))specialized FixedWidthInteger.init(_:), a5);
}

uint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD)@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v10;

  result = a5(a1, a2, a3, a4, *(unsigned __int8 *)(v6 + 32), *(unsigned __int8 *)(v6 + 33));
  if (!v7)
  {
    *a6 = result;
    a6[1] = v10;
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD)@<X4>, _DWORD *a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  result = a5(a1, a2, a3, a4, *(unsigned __int8 *)(v6 + 32), *(unsigned __int8 *)(v6 + 33));
  if (!v7)
    *a6 = result;
  return result;
}

uint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(char *, uint64_t, _QWORD)@<X4>, uint64_t (*a6)(char *, uint64_t)@<X5>, uint64_t (*a7)(char **)@<X6>, uint64_t (*a8)(_QWORD, _QWORD, _QWORD)@<X7>, _WORD *a9@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  result = specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(a1, a2, a3, a4, *(_BYTE *)(v9 + 32), *(_BYTE *)(v9 + 33), a5, a6, a7, a8);
  if (!v10)
    *a9 = result;
  return result;
}

uint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(char *, uint64_t, _QWORD)@<X4>, uint64_t (*a6)(char *, uint64_t)@<X5>, uint64_t (*a7)(char **)@<X6>, uint64_t (*a8)(_QWORD, _QWORD, _QWORD)@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  result = specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(a1, a2, a3, a4, *(_BYTE *)(v9 + 32), *(_BYTE *)(v9 + 33), a5, a6, a7, a8);
  if (!v10)
    *a9 = result;
  return result;
}

unint64_t partial apply for specialized closure #2 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)@<X0>(const void *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;

  result = specialized closure #2 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(a1, a2, *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 64), *(_QWORD *)(v3 + 72));
  if (!v4)
  {
    *(_DWORD *)a3 = result;
    *(_BYTE *)(a3 + 4) = BYTE4(result) & 1;
  }
  return result;
}

void partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(char *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, float *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  float v8;

  v8 = specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(a1, a2, a3, a4, *(_BYTE *)(v5 + 32), *(_BYTE *)(v5 + 33));
  if (!v6)
    *a5 = v8;
}

uint64_t closure #1 in JSONDecoder._decode<A>(_:from:)partial apply(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in JSONDecoder._decode<A>(_:from:)(a1, a2);
}

uint64_t closure #1 in JSONDecoderImpl.unwrapString<A>(from:for:_:)partial apply@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  return partial apply for closure #1 in JSONDecoderImpl.unwrapString<A>(from:for:_:)(a1, a2, a3, a4, a5);
}

id Date.description(with:)(uint64_t *a1)
{
  double *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t ObjectType;
  uint64_t v6;
  id v7;
  id v8;

  v3 = *a1;
  v2 = a1[1];
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D68]), sel_initWithTimeIntervalSinceReferenceDate_, *v1);
  if (v3)
  {
    ObjectType = swift_getObjectType();
    v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 496))(ObjectType, v2);
  }
  else
  {
    v6 = 0;
  }
  v7 = objc_msgSend(v4, sel_descriptionWithLocale_, v6);

  swift_unknownObjectRelease();
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);

  return v8;
}

void specialized Collection.firstIndex(where:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X9 }
}

uint64_t sub_181E4F090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  unint64_t v23;
  unint64_t v24;
  int v25;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t))((char *)&loc_181E4F104 + dword_181E4F2CC[v25]))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a23, v23 >> 40, HIDWORD(v23), v23 >> 24, v23 >> 16, v23 >> 8, HIBYTE(v24));
}

uint64_t sub_181E4F118()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;

  if (v3 == v29)
    return 0;
  if (v5)
  {
    if (v5 != 1)
    {
      if (v3 >= *(_QWORD *)(v2 + 16))
      {
        if (v3 >= *(_QWORD *)(v2 + 24))
        {
LABEL_26:
          __break(1u);
          goto LABEL_27;
        }
        v8 = *(_QWORD *)(v4 + 16);
        if (v8)
        {
          v13 = *(_QWORD *)(v4 + 40);
          v10 = __OFSUB__(v3, v13);
          v11 = v3 - v13;
          if (!v10)
          {
LABEL_16:
            v12 = *(_BYTE *)(v8 + v11);
            goto LABEL_17;
          }
LABEL_27:
          __break(1u);
          JUMPOUT(0x181E4F2ACLL);
        }
        goto LABEL_29;
      }
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    if (v3 >= v28 && v3 < v29)
    {
      v8 = *(_QWORD *)(v4 + 16);
      if (v8)
      {
        v9 = *(_QWORD *)(v4 + 40);
        v10 = __OFSUB__(v3, v9);
        v11 = v3 - v9;
        if (!v10)
          goto LABEL_16;
        goto LABEL_25;
      }
      __break(1u);
LABEL_29:
      __break(1u);
    }
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v3 >= v6)
    goto LABEL_23;
  *(_BYTE *)(v7 - 102) = v2;
  *(_BYTE *)(v7 - 101) = v27;
  *(_BYTE *)(v7 - 100) = v26;
  *(_BYTE *)(v7 - 99) = v25;
  *(_BYTE *)(v7 - 98) = v24;
  *(_BYTE *)(v7 - 97) = v23;
  *(_BYTE *)(v7 - 96) = v22;
  *(_BYTE *)(v7 - 95) = v21;
  *(_BYTE *)(v7 - 94) = v0;
  *(_BYTE *)(v7 - 93) = v20;
  *(_BYTE *)(v7 - 92) = v19;
  *(_BYTE *)(v7 - 91) = v18;
  *(_BYTE *)(v7 - 90) = v17;
  *(_BYTE *)(v7 - 89) = v16;
  v12 = *(_BYTE *)(v7 - 102 + v3);
LABEL_17:
  *(_BYTE *)(v7 - 102) = v12;
  v14 = (*(uint64_t (**)(uint64_t))(v7 - 112))(v7 - 102);
  if (!v1 && (v14 & 1) == 0)
    JUMPOUT(0x181E4F0FCLL);
  return v3;
}

uint64_t specialized MutableCollection.swapAt(_:_:)(uint64_t result, uint64_t a2)
{
  if (result != a2)
    __asm { BR              X12 }
  return result;
}

uint64_t Data.init()()
{
  return 0;
}

void Data.append(_:count:)(uint64_t a1, uint64_t a2)
{
  if (a2)
    Data._Representation.append(contentsOf:)();
}

void specialized RangeReplaceableCollection.append(_:)()
{
  __asm { BR              X12 }
}

uint64_t sub_181E4F5C4()
{
  char v0;
  _QWORD v2[3];
  uint64_t v3;
  _UNKNOWN **v4;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionOfOne<UInt8>);
  v4 = &protocol witness table for <A> CollectionOfOne<A>;
  LOBYTE(v2[0]) = v0;
  __swift_project_boxed_opaque_existential_1(v2, v3);
  Data._Representation.replaceSubrange(_:with:count:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

id Data.init(contentsOf:options:)(uint64_t a1, uint64_t a2)
{
  return specialized Data.init(contentsOf:options:)(a1, a2);
}

uint64_t Data.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _BYTE v6[40];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  specialized Data._Representation.withUnsafeBytes<A>(_:)(a2, a3);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
}

uint64_t specialized UnsafeMutableBufferPointer.initialize<A>(fromContentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD v18[11];
  char v19;

  v10 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v12 = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v18[0] = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v15 = (char *)v18 - v14;
  v18[4] = a4;
  v18[5] = a5;
  v18[6] = a2;
  v18[7] = a3;
  v18[1] = a3;
  dispatch thunk of Sequence.withContiguousStorageIfAvailable<A>(_:)();
  if (v19 != 1)
    return v18[10];
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a4);
  v16 = dispatch thunk of Sequence._copyContents(initializing:)();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  (*(void (**)(char *, uint64_t))(v18[0] + 8))(v15, AssociatedTypeWitness);
  if (v19 != 1)
  {
    __break(1u);
    return v18[10];
  }
  return v16;
}

uint64_t specialized UnsafeMutableBufferPointer.initialize<A>(fromContentsOf:)(uint64_t a1, unint64_t a2, char *__dst, int64_t a4)
{
  char *v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v11;
  char v12;
  _QWORD __src[2];

  if ((a2 & 0x1000000000000000) != 0)
  {
    if (__dst)
    {
      swift_bridgeObjectRetain();
      v11 = _StringGuts.copyUTF8(into:)();
      if ((v12 & 1) == 0)
      {
        v9 = v11;
        swift_bridgeObjectRelease();
        return v9;
      }
      goto LABEL_19;
    }
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if ((a2 & 0x2000000000000000) != 0)
  {
    v9 = HIBYTE(a2) & 0xF;
    __src[0] = a1;
    __src[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (!v9)
      return v9;
    if (v9 <= a4)
    {
      if (!__dst)
        return v9;
      if (__src >= (_QWORD *)&__dst[v9] || (char *)__src + v9 <= __dst)
      {
        memcpy(__dst, __src, HIBYTE(a2) & 0xF);
        return v9;
      }
LABEL_20:
      _fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x181E4F9E4);
    }
    __break(1u);
    goto LABEL_18;
  }
  if ((a1 & 0x1000000000000000) != 0)
  {
    v7 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v8 = a1 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v7 = (char *)_StringObject.sharedUTF8.getter();
  }
  return specialized closure #1 in UnsafeMutableBufferPointer.initialize<A>(fromContentsOf:)(v7, v8, __dst, a4);
}

void specialized RangeReplaceableCollection.remove(at:)()
{
  __asm { BR              X12 }
}

uint64_t sub_181E4FA48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  __int16 v6;
  char v7;
  char v8;
  char v9;
  char v10;

  if (!BYTE6(a2))
  {
    __break(1u);
    JUMPOUT(0x181E4FB7CLL);
  }
  if (BYTE6(a2) <= a1)
  {
    __break(1u);
    JUMPOUT(0x181E4FB88);
  }
  v5 = v2;
  v6 = a2;
  v7 = BYTE2(a2);
  v8 = BYTE3(a2);
  v9 = BYTE4(a2);
  v10 = BYTE5(a2);
  v3 = *((unsigned __int8 *)&v5 + a1);
  Data._Representation.replaceSubrange(_:with:count:)();
  return v3;
}

unint64_t specialized RangeReplaceableCollection.remove(at:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[48];
  _BYTE v28[48];
  _QWORD v29[8];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  v5 = v4[1] >> 10;
  v6 = v4[5] >> 10;
  if (v5 == v6)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v7 = result;
  v8 = result >> 10;
  if (result >> 10 < v5 || v8 >= v6)
    goto LABEL_10;
  v13 = (_OWORD *)*v4;
  v14 = *(_OWORD *)(*v4 + 32);
  v33 = *(_OWORD *)(*v4 + 16);
  v34 = v14;
  v35 = v13[3];
  BigString.unicodeScalars.getter();
  v24 = BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v27);
  v15 = v13[2];
  v30 = v13[1];
  v31 = v15;
  v32 = v13[3];
  BigString.unicodeScalars.getter();
  swift_retain();
  v16 = a2;
  v25 = a4;
  v26 = a3;
  v17 = BigString.UnicodeScalarView.index(after:)();
  v19 = v18;
  v21 = v20;
  v23 = v22;
  outlined release of Locale((uint64_t)v28);
  result = swift_release();
  if (v6 < v17 >> 10)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v17 >> 10 >= v8)
  {
    v29[0] = v7;
    v29[1] = v16;
    v29[2] = v26;
    v29[3] = v25;
    v29[4] = v17;
    v29[5] = v19;
    v29[6] = v21;
    v29[7] = v23;
    specialized AttributedString.UnicodeScalarView.replaceSubrange<A>(_:with:)(v29);
    return v24;
  }
LABEL_12:
  __break(1u);
  return result;
}

{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30[8];
  _OWORD v31[3];
  _OWORD v32[3];
  __int128 v33[3];
  _BYTE v34[48];

  v5 = v4[1] >> 10;
  v6 = v4[5] >> 10;
  if (v5 == v6)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v7 = result;
  v8 = result >> 10;
  if (result >> 10 < v5 || v8 >= v6)
    goto LABEL_10;
  v13 = (_OWORD *)*v4;
  v14 = *(_OWORD *)(*v4 + 16);
  v15 = *(_OWORD *)(*v4 + 48);
  v32[1] = *(_OWORD *)(*v4 + 32);
  v32[2] = v15;
  v32[0] = v14;
  v16 = v13[1];
  v33[1] = v13[2];
  v33[2] = v15;
  v33[0] = v16;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v33, (uint64_t)v34);
  outlined retain of Locale((uint64_t)v34);
  v28 = BigString.subscript.getter();
  outlined release of Locale((uint64_t)v32);
  v17 = v13[1];
  v18 = v13[3];
  v31[1] = v13[2];
  v31[2] = v18;
  v31[0] = v17;
  swift_retain();
  outlined retain of Locale((uint64_t)v31);
  v19 = a2;
  v20 = a3;
  v29 = a4;
  v21 = BigString.index(after:)();
  v23 = v22;
  v25 = v24;
  v27 = v26;
  outlined release of Locale((uint64_t)v31);
  result = swift_release();
  if (v6 < v21 >> 10)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v21 >> 10 >= v8)
  {
    v30[0] = v7;
    v30[1] = v19;
    v30[2] = v20;
    v30[3] = v29;
    v30[4] = v21;
    v30[5] = v23;
    v30[6] = v25;
    v30[7] = v27;
    specialized AttributedString.CharacterView.replaceSubrange<A>(_:with:)(v30);
    return v28;
  }
LABEL_12:
  __break(1u);
  return result;
}

double specialized RangeReplaceableCollection.removeAll(keepingCapacity:)(char a1)
{
  uint64_t v1;
  double result;

  if ((a1 & 1) != 0)
    __asm { BR              X12 }
  outlined consume of Data._Representation(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  result = 0.0;
  *(_OWORD *)v1 = xmmword_18206AAC0;
  return result;
}

void sub_181E4FF08(uint64_t a1@<X8>)
{
  if (a1 >> 32 < (int)a1)
  {
    __break(1u);
    JUMPOUT(0x181E4FF34);
  }
  JUMPOUT(0x181E4FF20);
}

void Data.withUnsafeMutableBytes<A>(_:)()
{
  Data._Representation.withUnsafeMutableBytes<A>(_:)();
}

void specialized Data.InlineData.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2)
{
  specialized Data.InlineData.withUnsafeBytes<A>(_:)(a1, a2);
}

{
  uint64_t v2;
  __int16 v3;
  char v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = a1;
  v3 = a2;
  v4 = BYTE2(a2);
  v5 = BYTE3(a2);
  v6 = BYTE4(a2);
  v7 = BYTE5(a2);
  _BPlistEncodingFormat.Writer.write(_:)((uint64_t)&v2, BYTE6(a2));
}

uint64_t _s10Foundation4DataV06InlineB0V15withUnsafeBytesyxxSWKXEKlFyt_Tg5015_s10Foundation4B58V14withBufferViewyxxAA0dE0Vys5UInt8VGKXEKlFxSWKXEfU_yt_Tg5AA0J4ViewVys0O0VGxs5Error_pRi_zRi0_zlyytIsgyrzo_Tf1ncn_n(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t *, _QWORD))
{
  uint64_t v4;
  __int16 v5;
  char v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = a1;
  v5 = a2;
  v6 = BYTE2(a2);
  v7 = BYTE3(a2);
  v8 = BYTE4(a2);
  v9 = BYTE5(a2);
  return a3(&v4, BYTE6(a2));
}

uint64_t specialized Data.InlineData.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, int a3)
{
  size_t v4;
  uint64_t v5;
  uint64_t value;
  __int16 v8;
  char v9;
  char v10;
  char v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  value = a1;
  v8 = a2;
  v9 = BYTE2(a2);
  v10 = BYTE3(a2);
  v4 = BYTE6(a2);
  v11 = BYTE4(a2);
  v12 = BYTE5(a2);
  v5 = String.utf8CString.getter();
  fsetxattr(a3, (const char *)(v5 + 32), &value, v4, 0, 0);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t Data.InlineData.withUnsafeBytes<A>(_:)(uint64_t (*a1)(uint64_t *, char *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  __int16 v6;
  char v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = a4;
  v7 = BYTE2(a4);
  v8 = BYTE3(a4);
  v9 = BYTE4(a4);
  v10 = BYTE5(a4);
  return a1(&v5, (char *)&v5 + BYTE6(a4));
}

uint64_t Data.InlineSlice.range.getter(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  result = (int)result;
  if (v1 >> 32 < (int)result)
    __break(1u);
  return result;
}

uint64_t Data.LargeSlice.range.getter(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void Data.append<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    if (a1
      && (unsigned __int128)(a2 * (__int128)*(uint64_t *)(*(_QWORD *)(a3 - 8) + 72)) >> 64 != (a2
                                                                                              * *(_QWORD *)(*(_QWORD *)(a3 - 8) + 72)) >> 63)
    {
      __break(1u);
    }
    else
    {
      Data._Representation.append(contentsOf:)();
    }
  }
}

_QWORD *_sSw17withMemoryRebound2to_q0_xm_q0_SryxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_s5NeverOs16IndexingIteratorVySS8UTF8ViewVG_SitTgm5(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  if (a3)
  {
    result = a1(&v6, a3, a4 - a3);
    if (v4)
      return result;
    return (_QWORD *)v6;
  }
  result = a1(&v6, 0, 0);
  if (!v4)
    return (_QWORD *)v6;
  return result;
}

uint64_t Data.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  __n128 v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[16];
  __int128 v29[2];
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v6 = v5;
  v12 = MEMORY[0x1E0C80A78](a1);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v14 + 16))(&v28[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)], v15, v16, v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousBytes);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(v29, (uint64_t)&v31);
    v17 = v33;
    v18 = __swift_project_boxed_opaque_existential_1(&v31, *((uint64_t *)&v32 + 1));
    v19 = MEMORY[0x1E0C80A78](v18);
    *(_QWORD *)&v28[-32] = v6;
    *(_QWORD *)&v28[-24] = a1;
    v27 = a2;
    (*(void (**)(void (*)(), __n128))(v17 + 8))(_s10Foundation4DataV15replaceSubrange_4withySnySiG_xtSlRzs5UInt8V7ElementRtzlFySWXEfU_TA_0, v19);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v31);
  }
  v30 = 0;
  memset(v29, 0, sizeof(v29));
  v21 = outlined destroy of ContiguousBytes?((uint64_t)v29);
  MEMORY[0x1E0C80A78](v21);
  *(_QWORD *)&v28[-32] = v6;
  *(_QWORD *)&v28[-24] = a1;
  v27 = a2;
  result = dispatch thunk of Sequence.withContiguousStorageIfAvailable<A>(_:)();
  if (v31 == 1)
  {
    v22 = dispatch thunk of Collection.count.getter();
    v23 = v22;
    if (v22 < 1)
    {
      v27 = a5;
      v25 = 0;
      v26 = 0;
    }
    else
    {
      if ((unint64_t)v22 > 0x20)
      {
        v24 = swift_slowAlloc();
        v27 = a5;
        closure #3 in Data.replaceSubrange<A>(_:with:)(v24, v23, a3, v6, a1, a2, v23, a4);
        return MEMORY[0x186DA9E78](v24, -1, -1);
      }
      v31 = 0u;
      v32 = 0u;
      v27 = a5;
      v25 = &v31;
      v26 = v23;
    }
    return closure #3 in Data.replaceSubrange<A>(_:with:)((uint64_t)v25, v26, a3, v6, a1, a2, v23, a4);
  }
  return result;
}

uint64_t Data.append<A>(contentsOf:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t TupleTypeMetadata2;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  __n128 v15;
  uint64_t result;
  uint64_t v17;
  char *v18;
  _QWORD v19[4];
  __int128 v20[2];
  uint64_t v21;
  _QWORD v22[6];

  v22[5] = *MEMORY[0x1E0C80C00];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v8);
  v10 = MEMORY[0x1E0C80A78](v9);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16))((char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2, v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousBytes);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(v20, (uint64_t)v22);
    v13 = v22[4];
    v14 = __swift_project_boxed_opaque_existential_1(v22, v22[3]);
    v15 = MEMORY[0x1E0C80A78](v14);
    v19[-2] = v2;
    (*(void (**)(void (*)(), __n128))(v13 + 8))(partial apply for closure #1 in Data.append<A>(contentsOf:), v15);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  }
  else
  {
    v19[0] = TupleTypeMetadata2;
    v19[2] = v7;
    v21 = 0;
    memset(v20, 0, sizeof(v20));
    v17 = outlined destroy of ContiguousBytes?((uint64_t)v20);
    MEMORY[0x1E0C80A78](v17);
    v19[-2] = v2;
    result = dispatch thunk of Sequence.withContiguousStorageIfAvailable<A>(_:)();
    if (LOBYTE(v22[0]) == 1)
    {
      dispatch thunk of Sequence.underestimatedCount.getter();
      v18 = (char *)&loc_181E508C4 + *((int *)qword_181E50BD0 + (*(_QWORD *)(v2 + 8) >> 62));
      v19[1] = 0;
      __asm { BR              X12 }
    }
  }
  return result;
}

_QWORD *Data.init(from:)(_QWORD *a1)
{
  return specialized Data.init(from:)(a1);
}

uint64_t __DataInvokeDeallocatorVirtualMemory(_:_:)(mach_vm_address_t a1, mach_vm_size_t a2)
{
  vm_map_t v4;
  uint64_t result;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;

  v4 = _platform_mach_task_self();
  if ((a2 & 0x8000000000000000) != 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_5;
  }
  result = mach_vm_deallocate(v4, a1, a2);
  if ((_DWORD)result)
  {
LABEL_5:
    _StringGuts.grow(_:)(55);
    v6._object = (void *)0x800000018230EC70;
    v6._countAndFlagsBits = 0xD000000000000029;
    String.append(_:)(v6);
    _print_unlocked<A, B>(_:_:)();
    v7._countAndFlagsBits = 8236;
    v7._object = (void *)0xE200000000000000;
    String.append(_:)(v7);
    v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = 0x64656C6961662029;
    v9._object = (void *)0xE800000000000000;
    String.append(_:)(v9);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t _withStackOrHeapBuffer(capacity:_:)(uint64_t a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  _OWORD v8[2];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (a1 < 1)
  {
    v5 = 0;
    v6 = 0;
  }
  else
  {
    if ((unint64_t)a1 > 0x20)
    {
      v4 = swift_slowAlloc();
      a2(v4, a1);
      JUMPOUT(0x186DA9E78);
    }
    memset(v8, 0, sizeof(v8));
    v5 = v8;
    v6 = a1;
  }
  return ((uint64_t (*)(_OWORD *, uint64_t))a2)(v5, v6);
}

uint64_t static __DataStorage.maxSize.getter()
{
  return 0x3FFFFFFFFFFFFFFFLL;
}

uint64_t static __DataStorage.vmOpsThreshold.getter()
{
  if (one-time initialization token for vmOpsThreshold != -1)
    swift_once();
  return static __DataStorage.vmOpsThreshold;
}

BOOL static __DataStorage.shouldAllocateCleared(_:)(uint64_t a1)
{
  return a1 > 0x20000;
}

uint64_t __DataStorage._bytes.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*__DataStorage._bytes.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t __DataStorage._length.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*__DataStorage._length.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t __DataStorage._capacity.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t __DataStorage._capacity.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = result;
  return result;
}

uint64_t (*__DataStorage._capacity.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t __DataStorage._offset.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = result;
  return result;
}

uint64_t (*__DataStorage._offset.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t key path getter for __DataStorage._deallocator : __DataStorage@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD *, _QWORD *);

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 48);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  if (v3)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer, @unowned Int) -> ();
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  *a2 = v6;
  a2[1] = v5;
  return outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v3);
}

uint64_t key path setter for __DataStorage._deallocator : __DataStorage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed UnsafeMutableRawPointer, @in_guaranteed Int) -> (@out ());
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *a2;
  v8 = *(_QWORD *)(*a2 + 48);
  *(_QWORD *)(v7 + 48) = v6;
  *(_QWORD *)(v7 + 56) = v5;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v3);
  return outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v8);
}

uint64_t __DataStorage._deallocator.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v1);
  return v1;
}

uint64_t __DataStorage._deallocator.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v2 + 48);
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  return outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v3);
}

uint64_t (*__DataStorage._deallocator.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t __DataStorage._needToZero.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t __DataStorage._needToZero.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 64) = result;
  return result;
}

uint64_t (*__DataStorage._needToZero.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(_QWORD *)(a3 + 16))
  {
    if (!__OFSUB__(a2, a1))
    {
LABEL_6:
      Data._Representation.replaceSubrange(_:with:count:)();
      return;
    }
    goto LABEL_7;
  }
  if (!__OFSUB__(a1, *(_QWORD *)(a3 + 40)))
  {
    if (!__OFSUB__(a2, a1))
      goto LABEL_6;
LABEL_7:
    __break(1u);
  }
  __break(1u);
}

{
  if (!*(_QWORD *)(a3 + 16))
  {
    if (!__OFSUB__(a2, a1))
    {
LABEL_6:
      Data._Representation.append(contentsOf:)();
      return;
    }
    goto LABEL_7;
  }
  if (!__OFSUB__(a1, *(_QWORD *)(a3 + 40)))
  {
    if (!__OFSUB__(a2, a1))
      goto LABEL_6;
LABEL_7:
    __break(1u);
  }
  __break(1u);
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!*(_QWORD *)(a3 + 16))
  {
    if (!__OFSUB__(a2, result))
    {
LABEL_6:
      __swift_mutable_project_boxed_opaque_existential_1(a4, *(_QWORD *)(a4 + 24));
      return dispatch thunk of UnkeyedEncodingContainer.encode<A>(contentsOf:)();
    }
    goto LABEL_7;
  }
  if (!__OFSUB__(result, *(_QWORD *)(a3 + 40)))
  {
    if (!__OFSUB__(a2, result))
      goto LABEL_6;
LABEL_7:
    __break(1u);
  }
  __break(1u);
  return result;
}

void specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(a1, a2, a3);
}

{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a3[2];
  if (!v3)
  {
    if (!__OFSUB__(a2, a1))
      return;
    goto LABEL_10;
  }
  v4 = a3[5];
  v5 = __OFSUB__(a1, v4);
  v6 = a1 - v4;
  if (v5)
  {
LABEL_11:
    __break(1u);
    return;
  }
  if (__OFSUB__(a2, a1))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (a3[3] >= a2 - a1)
    v7 = a2 - a1;
  else
    v7 = a3[3];
  _BPlistEncodingFormat.Writer.write(_:)(v3 + v6, v7);
}

uint64_t _s10Foundation13__DataStorageC15withUnsafeBytes2in5applyxSnySiG_xSWKXEtKlFyt_Tg5015_s10Foundation4B58V14withBufferViewyxxAA0dE0Vys5UInt8VGKXEKlFxSWKXEfU_yt_Tg5AA0L4ViewVys0Q0VGxs5Error_pRi_zRi0_zlyytIsgyrzo_Tf1nncn_n(uint64_t result, uint64_t a2, _QWORD *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v4 = a3[2];
  if (!v4)
    goto LABEL_11;
  v5 = a3[5];
  v6 = __OFSUB__(result, v5);
  v7 = result - v5;
  if (v6)
  {
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    if (!__OFSUB__(a2, result))
      __break(1u);
    goto LABEL_13;
  }
  if (!__OFSUB__(a2, result))
  {
    if (a3[3] >= a2 - result)
      a2 -= result;
    else
      a2 = a3[3];
    if ((a2 & 0x8000000000000000) == 0)
      return a4(v4 + v7);
    goto LABEL_10;
  }
LABEL_13:
  __break(1u);
  return result;
}

void specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, _QWORD *a3, void *a4)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;

  v5 = a3[2];
  if (!v5)
  {
    if (!__OFSUB__(a2, a1))
    {
      v10 = 0;
      v12 = 0;
LABEL_9:
      closure #1 in NSFileHandle.write<A>(contentsOf:)(v10, v12, a4);

      return;
    }
    goto LABEL_10;
  }
  v6 = a3[5];
  v7 = __OFSUB__(a1, v6);
  v8 = a1 - v6;
  if (!v7)
  {
    v9 = a2 - a1;
    if (!__OFSUB__(a2, a1))
    {
      v10 = (_BYTE *)(v5 + v8);
      v11 = a3[3];
      if (v11 >= v9)
        v11 = v9;
      v12 = &v10[v11];
      goto LABEL_9;
    }
LABEL_10:
    __break(1u);
  }
  __break(1u);
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t result, uint64_t a2, _QWORD *a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  const void *v9;
  size_t v10;
  uint64_t v11;

  v4 = a3[2];
  if (!v4)
  {
LABEL_9:
    if (!__OFSUB__(a2, result))
      __break(1u);
    goto LABEL_11;
  }
  v5 = a3[5];
  v6 = __OFSUB__(result, v5);
  v7 = result - v5;
  if (v6)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (__OFSUB__(a2, result))
  {
LABEL_11:
    __break(1u);
    return result;
  }
  v9 = (const void *)(v4 + v7);
  if (a3[3] >= a2 - result)
    v10 = a2 - result;
  else
    v10 = a3[3];
  v11 = String.utf8CString.getter();
  fsetxattr(a4, (const char *)(v11 + 32), v9, v10, 0, 0);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t result, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a3[2];
  if (!v4)
  {
    if (!__OFSUB__(a2, result))
    {
      v9 = 0;
      v11 = 0;
      return closure #1 in Data.customMirror.getter(v9, v11, a4);
    }
    goto LABEL_10;
  }
  v5 = a3[5];
  v6 = __OFSUB__(result, v5);
  v7 = result - v5;
  if (!v6)
  {
    v8 = a2 - result;
    if (!__OFSUB__(a2, result))
    {
      v9 = v4 + v7;
      v10 = a3[3];
      if (v10 >= v8)
        v10 = v8;
      v11 = v9 + v10;
      return closure #1 in Data.customMirror.getter(v9, v11, a4);
    }
LABEL_10:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t result, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = v3[2];
  if (!v4)
  {
    if (!__OFSUB__(a2, result))
    {
      v9 = 0;
      v11 = 0;
      return a3(v9, v11);
    }
    goto LABEL_10;
  }
  v5 = v3[5];
  v6 = __OFSUB__(result, v5);
  v7 = result - v5;
  if (!v6)
  {
    v8 = a2 - result;
    if (!__OFSUB__(a2, result))
    {
      v9 = v4 + v7;
      v10 = v3[3];
      if (v10 >= v8)
        v10 = v8;
      v11 = v9 + v10;
      return a3(v9, v11);
    }
LABEL_10:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t __DataStorage.withUnsafeMutableBytes<A>(in:apply:)(uint64_t result, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;

  v4 = v3[2];
  if (!v4)
    goto LABEL_9;
  v5 = v3[5];
  v6 = __OFSUB__(result, v5);
  v7 = result - v5;
  if (v6)
  {
    __break(1u);
    goto LABEL_8;
  }
  v8 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_8:
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
  if (v3[3] < v8)
    v8 = v3[3];
  return a3(v4 + v7, v4 + v7 + v8);
}

uint64_t __DataStorage.bytes.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 16);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v0 + 40);
  v3 = __OFSUB__(0, v2);
  v4 = -v2;
  if (!v3)
    return v1 + v4;
  __break(1u);
  return result;
}

uint64_t __DataStorage.capacity.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t __DataStorage.length.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

void __DataStorage.length.setter(Swift::Int growingTo)
{
  uint64_t v1;
  uint64_t v3;
  Swift::Int v4;

  if (*(_QWORD *)(v1 + 32) < growingTo || (v3 = *(_QWORD *)(v1 + 16)) == 0)
  {
    __DataStorage.ensureUniqueBufferReference(growingTo:clear:)(growingTo, 1);
    goto LABEL_8;
  }
  v4 = *(_QWORD *)(v1 + 24);
  if (v4 >= growingTo || *(_BYTE *)(v1 + 64) != 1)
  {
    if (v4 > growingTo)
      *(_BYTE *)(v1 + 64) = 1;
    goto LABEL_8;
  }
  if (!__OFSUB__(growingTo, v4))
  {
    bzero((void *)(v3 + v4), growingTo - v4);
LABEL_8:
    *(_QWORD *)(v1 + 24) = growingTo;
    return;
  }
  __break(1u);
}

void (*__DataStorage.length.modify(_QWORD *a1))(Swift::Int *a1, char a2)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 24);
  a1[1] = v1;
  return __DataStorage.length.modify;
}

void __DataStorage.length.modify(Swift::Int *a1, char a2)
{
  Swift::Int v2;
  Swift::Int v3;
  uint64_t v4;
  Swift::Int v5;

  v2 = *a1;
  v3 = a1[1];
  if ((a2 & 1) != 0)
  {
    __DataStorage.setLength(_:)(*a1);
    return;
  }
  if (*(_QWORD *)(v3 + 32) < v2 || (v4 = *(_QWORD *)(v3 + 16)) == 0)
  {
    __DataStorage.ensureUniqueBufferReference(growingTo:clear:)(*a1, 1);
    goto LABEL_10;
  }
  v5 = *(_QWORD *)(v3 + 24);
  if (v5 >= v2 || *(_BYTE *)(v3 + 64) != 1)
  {
    if (v2 < v5)
      *(_BYTE *)(v3 + 64) = 1;
    goto LABEL_10;
  }
  if (!__OFSUB__(v2, v5))
  {
    bzero((void *)(v4 + v5), v2 - v5);
LABEL_10:
    *(_QWORD *)(v3 + 24) = v2;
    return;
  }
  __break(1u);
}

BOOL __DataStorage.isExternallyOwned.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32) == 0;
}

Swift::Void __swiftcall __DataStorage._freeBytes()()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  void (*v3)(void *, uint64_t);
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = (void *)v0[2];
  if (v2)
  {
    v3 = (void (*)(void *, uint64_t))v1[6];
    if (v3)
    {
      v4 = v1[3];
      swift_retain();
      v3(v2, v4);
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v3);
    }
    else
    {
      free(v2);
    }
  }
  v5 = v1[6];
  v1[6] = 0;
  v1[7] = 0;
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v5);
}

uint64_t __DataStorage.enumerateBytes(in:_:)(uint64_t result, uint64_t a2, uint64_t (*a3)(void))
{
  if (!__OFSUB__(a2, result))
    return a3();
  __break(1u);
  return result;
}

void __DataStorage.append(_:length:)(unint64_t __src, int64_t __len)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  if (__len < 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  v4 = v2[3];
  v5 = v4 + __len;
  if (__OFADD__(v4, __len))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v2[4] >= v5)
  {
    v7 = v2[2];
    if (v7)
    {
      v2[3] = v5;
LABEL_7:
      specialized static __DataStorage.move(_:_:_:)(v7 + v4, __src, __len);
      return;
    }
  }
  __DataStorage.ensureUniqueBufferReference(growingTo:clear:)(v4 + __len, 0);
  v7 = v2[2];
  v2[3] = v5;
  if (v7)
    goto LABEL_7;
LABEL_10:
  __break(1u);
}

Swift::UInt8 __swiftcall __DataStorage.get(_:)(Swift::Int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  Swift::Int v5;

  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    goto LABEL_5;
  v3 = *(_QWORD *)(v1 + 40);
  v4 = __OFSUB__(a1, v3);
  v5 = a1 - v3;
  if (v4)
  {
    __break(1u);
LABEL_5:
    __break(1u);
    return a1;
  }
  LOBYTE(a1) = *(_BYTE *)(v2 + v5);
  return a1;
}

Swift::Void __swiftcall __DataStorage.set(_:to:)(Swift::Int _, Swift::UInt8 to)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  Swift::Int v8;

  __DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0, 0);
  v5 = *(_QWORD *)(v2 + 16);
  if (v5)
  {
    v6 = *(_QWORD *)(v2 + 40);
    v7 = __OFSUB__(_, v6);
    v8 = _ - v6;
    if (!v7)
    {
      *(_BYTE *)(v5 + v8) = to;
      return;
    }
    __break(1u);
  }
  __break(1u);
}

uint64_t __DataStorage.__allocating_init(length:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  __DataStorage.init(length:)(a1);
  return v2;
}

uint64_t __DataStorage.__allocating_init(capacity:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  __DataStorage.init(capacity:)(a1);
  return v2;
}

uint64_t __DataStorage.__allocating_init(bytes:length:)(unint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  __DataStorage.init(bytes:length:)(a1, a2);
  return v4;
}

uint64_t __DataStorage.__allocating_init(bytes:length:copy:deallocator:offset:)(unint64_t a1, uint64_t a2, char a3, void (*a4)(unint64_t, uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v12;

  v12 = swift_allocObject();
  __DataStorage.init(bytes:length:copy:deallocator:offset:)(a1, a2, a3, a4, a5, a6);
  return v12;
}

uint64_t __DataStorage.__allocating_init(offset:bytes:capacity:needToZero:length:deallocator:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 32) = a3;
  *(_QWORD *)(result + 40) = a1;
  *(_BYTE *)(result + 64) = a4;
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = a5;
  *(_QWORD *)(result + 48) = a6;
  *(_QWORD *)(result + 56) = a7;
  return result;
}

uint64_t __DataStorage.init(offset:bytes:capacity:needToZero:length:deallocator:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;

  *(_QWORD *)(v7 + 32) = a3;
  *(_QWORD *)(v7 + 40) = a1;
  *(_BYTE *)(v7 + 64) = a4;
  *(_QWORD *)(v7 + 16) = a2;
  *(_QWORD *)(v7 + 24) = a5;
  *(_QWORD *)(v7 + 48) = a6;
  *(_QWORD *)(v7 + 56) = a7;
  return v7;
}

_QWORD *__DataStorage.deinit()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  void (*v3)(void *, uint64_t);
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = (void *)v0[2];
  if (v2)
  {
    v3 = (void (*)(void *, uint64_t))v1[6];
    if (v3)
    {
      v4 = v1[3];
      swift_retain();
      v3(v2, v4);
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v3);
    }
    else
    {
      free(v2);
    }
  }
  v5 = v1[6];
  v1[6] = 0;
  v1[7] = 0;
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v5);
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v1[6]);
  return v1;
}

uint64_t __DataStorage.mutableCopy(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = *v2;
  v5 = v2[2];
  if (!v5)
  {
    v9 = 0;
    v10 = a2 - a1;
    if (!__OFSUB__(a2, a1))
      goto LABEL_4;
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v6 = v2[5];
  v7 = __OFSUB__(a1, v6);
  v8 = a1 - v6;
  if (!v7)
  {
    v9 = v5 + v8;
    v10 = a2 - a1;
    if (!__OFSUB__(a2, a1))
    {
LABEL_4:
      v11 = swift_allocObject();
      __DataStorage.init(bytes:length:copy:deallocator:offset:)(v9, v10, 1, 0, 0, a1);
      return v11;
    }
    goto LABEL_7;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t Data.InlineData.bytes.setter(uint64_t result, char a2, char a3, char a4, char a5, char a6, char a7, char a8, uint64_t a9)
{
  uint64_t v9;

  *(_BYTE *)v9 = result;
  *(_BYTE *)(v9 + 1) = a2;
  *(_BYTE *)(v9 + 2) = a3;
  *(_BYTE *)(v9 + 3) = a4;
  *(_BYTE *)(v9 + 4) = a5;
  *(_BYTE *)(v9 + 5) = a6;
  *(_BYTE *)(v9 + 6) = a7;
  *(_BYTE *)(v9 + 7) = a8;
  *(_WORD *)(v9 + 8) = a9;
  *(_DWORD *)(v9 + 10) = *(_DWORD *)((char *)&a9 + 2);
  return result;
}

uint64_t (*Data.InlineData.bytes.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

unint64_t Data.InlineData.length.getter(uint64_t a1, unint64_t a2)
{
  return HIWORD(a2);
}

uint64_t Data.InlineData.length.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 14) = result;
  return result;
}

uint64_t (*Data.InlineData.length.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

BOOL static Data.InlineData.canStore(count:)(uint64_t a1)
{
  return a1 < 15;
}

uint64_t Data.InlineData.init(count:)(unint64_t a1)
{
  uint64_t result;

  if ((a1 & 0x8000000000000000) == 0 && a1 < 0x100)
    return 0;
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t Data.InlineData.init(_:count:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;

  v3 = specialized Data.InlineData.init(_:count:)(a1, a2, a3);
  swift_release();
  return v3;
}

{
  uint64_t v3;

  v3 = specialized Data.InlineData.init(_:count:)(a1, a2, a3);
  swift_release();
  swift_release();
  return v3;
}

uint64_t _s10Foundation4DataV10LargeSliceV15withUnsafeBytesyxxSWKXEKlFAA23LocalizedStringResourceV_Tg5015_s10Foundation4b56V14withBufferViewyxxAA0dE0Vys5UInt8VGKXEKlFxSWKXEfU_AA23hiJ5V_Tg5AA0N4ViewVys0S0VGxs5Error_pRi_zRi0_zlyAHIsgyrzo_Tf1ncn_n(uint64_t result, _QWORD *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(result + 16);
  v4 = *(_QWORD *)(result + 24);
  v5 = a2[2];
  if (!v5)
    goto LABEL_11;
  v6 = a2[5];
  v7 = __OFSUB__(v3, v6);
  v8 = v3 - v6;
  if (v7)
  {
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    if (!__OFSUB__(v4, v3))
      __break(1u);
    goto LABEL_13;
  }
  v7 = __OFSUB__(v4, v3);
  v3 = v4 - v3;
  if (!v7)
  {
    v4 = a2[3];
    if (v4 >= v3)
      v9 = v3;
    else
      v9 = a2[3];
    if ((v9 & 0x8000000000000000) == 0)
      return a3(v5 + v8);
    goto LABEL_10;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t Data.LargeSlice.withUnsafeBytes<A>(_:)(uint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = (uint64_t (*)(uint64_t, uint64_t))result;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(a3 + 24);
  v7 = a4[2];
  if (!v7)
  {
    if (!__OFSUB__(v6, v5))
    {
      v12 = 0;
      v14 = 0;
      return v4(v12, v14);
    }
    goto LABEL_10;
  }
  v8 = a4[5];
  v9 = __OFSUB__(v5, v8);
  v10 = v5 - v8;
  if (!v9)
  {
    v9 = __OFSUB__(v6, v5);
    v11 = v6 - v5;
    if (!v9)
    {
      v12 = v7 + v10;
      v13 = a4[3];
      if (v13 >= v11)
        v13 = v11;
      v14 = v12 + v13;
      return v4(v12, v14);
    }
LABEL_10:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t Data.InlineData.capacity.getter()
{
  return 14;
}

uint64_t Data.InlineData.count.getter(uint64_t a1, uint64_t a2)
{
  return BYTE6(a2);
}

void Data.InlineData.count.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(v1 + 14);
  if (v3 >= a1)
  {
    if (a1 < 0)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    else
    {
      *(_BYTE *)(v1 + 14) = a1;
    }
  }
  else
  {
    Data.InlineData.resetBytes(in:)(v3, a1);
  }
}

void Data.InlineData.resetBytes(in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  size_t v5;

  v3 = *(unsigned __int8 *)(v2 + 14);
  if (v3 < a1)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v3 >= a2)
  {
LABEL_5:
    v4 = __OFSUB__(a2, a1);
    v5 = a2 - a1;
    if (!v4)
    {
      bzero((void *)(v2 + a1), v5);
      return;
    }
    goto LABEL_8;
  }
  if (a2 < 256)
  {
    *(_BYTE *)(v2 + 14) = a2;
    goto LABEL_5;
  }
LABEL_9:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void (*Data.InlineData.count.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  *a1 = *(unsigned __int8 *)(v1 + 14);
  a1[1] = v1;
  return Data.InlineData.count.modify;
}

void Data.InlineData.count.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = a1[1];
  if ((a2 & 1) != 0)
  {
    Data.InlineData.count.setter(*a1);
  }
  else
  {
    v4 = *(unsigned __int8 *)(v3 + 14);
    if (v2 <= v4)
    {
      if (v2 < 0)
      {
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      else
      {
        *(_BYTE *)(v3 + 14) = v2;
      }
    }
    else
    {
      Data.InlineData.resetBytes(in:)(v4, v2);
    }
  }
}

uint64_t Data.InlineData.startIndex.getter()
{
  return 0;
}

uint64_t Data.InlineData.endIndex.getter(uint64_t a1, uint64_t a2)
{
  return BYTE6(a2);
}

uint64_t Data.InlineData.withUnsafeMutableBytes<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t))
{
  uint64_t v1;

  return a1(v1, v1 + *(unsigned __int8 *)(v1 + 14));
}

Swift::Void __swiftcall Data.InlineData.append(byte:)(Swift::UInt8 byte)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(v1 + 14);
  if (v2 >= 0xE)
  {
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *(_BYTE *)(v1 + v2) = byte;
    *(_BYTE *)(v1 + 14) = v2 + 1;
  }
}

_BYTE *Data.InlineData.append(contentsOf:)(_BYTE *__src, _BYTE *a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  unsigned int v5;

  if (__src)
  {
    v3 = a2 - __src;
    if (a2 != __src)
    {
      v4 = *(unsigned __int8 *)(v2 + 14);
      __src = memmove((void *)(v2 + v4), __src, v3);
      if (v3 < 256)
      {
        v5 = v4 + v3;
        if (((v5 >> 8) & 1) == 0)
        {
          *(_BYTE *)(v2 + 14) = v5;
          return __src;
        }
        __break(1u);
      }
      __src = (_BYTE *)_assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  return __src;
}

uint64_t Data.InlineData.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  __int16 v5;
  char v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (a1 >= BYTE6(a3))
    __break(1u);
  v4 = a2;
  v5 = a3;
  v6 = BYTE2(a3);
  v7 = BYTE3(a3);
  v8 = BYTE4(a3);
  v9 = BYTE5(a3);
  return *((unsigned __int8 *)&v4 + a1);
}

double key path getter for Data.InlineData.subscript(_:) : Data.InlineData@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  __int16 v4;
  double result;
  double v6;
  int v7;
  __int16 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  if (*a2 >= *(unsigned __int8 *)(a1 + 14))
    __break(1u);
  v4 = *(_WORD *)(a1 + 12);
  result = *(double *)a1;
  v6 = *(double *)a1;
  v7 = *(_DWORD *)(a1 + 8);
  v8 = v4;
  *a3 = *((_BYTE *)&v6 + v3);
  return result;
}

_BYTE *key path setter for Data.InlineData.subscript(_:) : Data.InlineData(_BYTE *result, uint64_t a2, unint64_t *a3)
{
  unint64_t v3;

  v3 = *a3;
  if ((uint64_t)*a3 >= *(unsigned __int8 *)(a2 + 14))
  {
    __break(1u);
  }
  else if ((v3 & 0x8000000000000000) == 0 && v3 <= 0xD)
  {
    *(_BYTE *)(a2 + v3) = *result;
    return result;
  }
  result = (_BYTE *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t Data.InlineData.subscript.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (*(unsigned __int8 *)(v2 + 14) <= a2)
  {
    __break(1u);
  }
  else if ((a2 & 0x8000000000000000) == 0 && (unint64_t)a2 < 0xE)
  {
    *(_BYTE *)(v2 + a2) = result;
    return result;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t (*Data.InlineData.subscript.modify(uint64_t a1, uint64_t a2))(uint64_t a1, char a2)
{
  uint64_t *v2;
  __int16 v3;
  uint64_t v5;
  int v6;
  __int16 v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v2;
  if (*((unsigned __int8 *)v2 + 14) <= a2)
    __break(1u);
  v3 = *((_WORD *)v2 + 6);
  v5 = *v2;
  v6 = *((_DWORD *)v2 + 2);
  v7 = v3;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)&v5 + a2);
  return Data.InlineData.subscript.modify;
}

uint64_t Data.InlineData.subscript.modify(uint64_t a1, char a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  char v5;
  char v6;
  int64_t v7;

  v3 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  result = a1 + 16;
  v5 = v6;
  v7 = *(unsigned __int8 *)(v2 + 14);
  if ((a2 & 1) == 0)
  {
    if ((uint64_t)v3 >= v7)
      goto LABEL_11;
    if ((v3 & 0x8000000000000000) != 0 || v3 >= 0xE)
      goto LABEL_12;
LABEL_10:
    *(_BYTE *)(v2 + v3) = v5;
    return result;
  }
  if ((uint64_t)v3 < v7)
  {
    if ((v3 & 0x8000000000000000) != 0 || v3 > 0xD)
      goto LABEL_12;
    goto LABEL_10;
  }
  __break(1u);
LABEL_11:
  __break(1u);
LABEL_12:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t Data.InlineSlice.slice.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*Data.InlineSlice.slice.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Data.InlineSlice.storage.getter()
{
  return swift_retain();
}

uint64_t (*Data.InlineSlice.storage.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

BOOL static Data.InlineSlice.canStore(count:)(uint64_t a1)
{
  return a1 < 0x7FFFFFFF;
}

uint64_t Data.InlineSlice.init(_:count:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if ((a2 & 0x80000000) == 0)
    return a2 << 32;
LABEL_7:
  __break(1u);
  return result;
}

uint64_t Data.InlineSlice.init(capacity:)(uint64_t a1)
{
  type metadata accessor for __DataStorage();
  swift_allocObject();
  __DataStorage.init(capacity:)(a1);
  return 0;
}

uint64_t Data.InlineSlice.init(count:)(uint64_t a1)
{
  uint64_t result;

  type metadata accessor for __DataStorage();
  swift_allocObject();
  result = __DataStorage.init(length:)(a1);
  if (a1 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a1 > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if ((a1 & 0x80000000) == 0)
    return a1 << 32;
LABEL_7:
  __break(1u);
  return result;
}

uint64_t Data.InlineSlice.init(_:)(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;
  __int16 v6;
  char v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v2 = a2 >> 16;
  v6 = a2;
  v7 = BYTE2(a2);
  v8 = BYTE3(a2);
  v3 = BYTE6(a2);
  v9 = BYTE4(a2);
  v10 = BYTE5(a2);
  type metadata accessor for __DataStorage();
  swift_allocObject();
  __DataStorage.init(bytes:length:)((unint64_t)&v5, v3);
  return v2 & 0xFF00000000;
}

unint64_t Data.InlineSlice.init(_:range:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized Data.InlineSlice.init(_:range:)(a1, a2 & 0xFFFFFFFFFFFFFFLL, a3, a4);
}

{
  unsigned int v4;
  unsigned int v5;
  unint64_t result;

  if (a3 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v4 = a3;
  if (a3 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_8;
  v5 = a4;
  if (a4 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_8;
  if (a4 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((int)a4 >= (int)a3)
  {
    swift_release();
    return v4 | ((unint64_t)v5 << 32);
  }
LABEL_10:
  __break(1u);
  return result;
}

unint64_t Data.InlineSlice.init(_:range:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result;

  if (a2 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (a2 < (uint64_t)0xFFFFFFFF80000000 || a3 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_8;
  if (a3 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((int)a3 >= (int)a2)
    return a2 | ((unint64_t)a3 << 32);
LABEL_10:
  __break(1u);
  return result;
}

unint64_t Data.InlineSlice.init(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t result;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  result = swift_release();
  if (v1 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v1 < (uint64_t)0xFFFFFFFF80000000 || v2 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_10;
  if (v2 > 0x7FFFFFFF)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((int)v2 >= (int)v1)
    return v1 | ((unint64_t)v2 << 32);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t Data.InlineSlice.startIndex.getter(uint64_t result)
{
  return (int)result;
}

uint64_t Data.InlineSlice.endIndex.getter(uint64_t a1)
{
  return a1 >> 32;
}

uint64_t Data.InlineSlice.capacity.getter(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 32);
}

Swift::Void __swiftcall Data.InlineSlice.reserveCapacity(_:)(Swift::Int a1)
{
  int *v1;
  int *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  Swift::Int v16;

  v2 = v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = *v1;
    v4 = v2[1];
    if ((int)v4 < (int)v5)
    {
LABEL_14:
      __break(1u);
      goto LABEL_15;
    }
    v6 = *((_QWORD *)v2 + 1);
    v7 = *(_QWORD *)(v6 + 16);
    if (v7)
    {
      v8 = *(_QWORD *)(v6 + 40);
      v9 = __OFSUB__(v5, v8);
      v10 = v5 - v8;
      if (v9)
      {
LABEL_15:
        __break(1u);
        return;
      }
      v11 = v7 + v10;
    }
    else
    {
      v11 = 0;
    }
    v12 = v4 - v5;
    type metadata accessor for __DataStorage();
    v13 = swift_allocObject();
    __DataStorage.init(bytes:length:copy:deallocator:offset:)(v11, v12, 1, 0, 0, v5);
    *((_QWORD *)v2 + 1) = v13;
    swift_release();
  }
  v14 = v2[1];
  v15 = v14 - *v2;
  if (__OFSUB__(v14, *v2))
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v15 <= a1)
    v16 = a1;
  else
    v16 = v15;
  __DataStorage.ensureUniqueBufferReference(growingTo:clear:)(v16, 0);
}

uint64_t Data.InlineSlice.count.getter(uint64_t result)
{
  if (!__OFSUB__(HIDWORD(result), (_DWORD)result))
    return HIDWORD(result) - (int)result;
  __break(1u);
  return result;
}

void (*Data.InlineSlice.count.modify(void (*result)(uint64_t *a1)))(uint64_t *a1)
{
  _DWORD *v1;
  int v2;

  *((_QWORD *)result + 1) = v1;
  v2 = v1[1];
  if (__OFSUB__(v2, *v1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)result = v2 - *v1;
    return Data.InlineSlice.count.modify;
  }
  return result;
}

void Data.InlineSlice.count.modify(uint64_t *a1)
{
  Data.InlineSlice.count.setter(*a1);
}

int64_t *key path setter for Data.InlineSlice.range : Data.InlineSlice(int64_t *result, _DWORD *a2)
{
  int64_t v2;
  uint64_t v3;

  v2 = *result;
  if (*result > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v3 = result[1];
  if (v2 < (uint64_t)0xFFFFFFFF80000000 || v3 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_10;
  if (v3 > 0x7FFFFFFF)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((int)v3 >= (int)v2)
  {
    *a2 = v2;
    a2[1] = v3;
    return result;
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t Data.InlineSlice.range.setter(uint64_t result, uint64_t a2)
{
  _DWORD *v2;

  if (result > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (result < (uint64_t)0xFFFFFFFF80000000 || a2 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_8;
  if (a2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((int)a2 >= (int)result)
  {
    *v2 = result;
    v2[1] = a2;
    return result;
  }
LABEL_10:
  __break(1u);
  return result;
}

int64_t *(*Data.InlineSlice.range.modify(int64_t *(*result)(int64_t *result, char a2)))(int64_t *result, char a2)
{
  int *v1;
  uint64_t v2;
  uint64_t v3;

  *((_QWORD *)result + 2) = v1;
  v2 = *v1;
  v3 = v1[1];
  if ((int)v3 < (int)v2)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)result = v2;
    *((_QWORD *)result + 1) = v3;
    return Data.InlineSlice.range.modify;
  }
  return result;
}

int64_t *Data.InlineSlice.range.modify(int64_t *result, char a2)
{
  int64_t v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v7;

  v2 = *result;
  v3 = result[1];
  v4 = *result <= 0x7FFFFFFF;
  if ((a2 & 1) != 0)
  {
    if (*result > 0x7FFFFFFF)
    {
      __break(1u);
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
    if (v2 < (uint64_t)0xFFFFFFFF80000000 || v3 < (uint64_t)0xFFFFFFFF80000000)
      goto LABEL_20;
    if (v3 > 0x7FFFFFFF)
    {
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    v4 = (int)v3 <= (int)v2;
    if ((int)v3 >= (int)v2)
    {
LABEL_19:
      v7 = (_DWORD *)result[2];
      *v7 = v2;
      v7[1] = v3;
      return result;
    }
    __break(1u);
  }
  if (!v4)
    goto LABEL_22;
  if (v2 < (uint64_t)0xFFFFFFFF80000000 || v3 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_23;
  if (v3 > 0x7FFFFFFF)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if ((int)v3 >= (int)v2)
    goto LABEL_19;
LABEL_25:
  __break(1u);
  return result;
}

uint64_t specialized Data.InlineSlice.withUnsafeMutableBytes<A>(_:)(int *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    v6 = *a1;
    v5 = a1[1];
    if ((int)v5 < (int)v6)
    {
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
    v7 = *((_QWORD *)a1 + 1);
    v8 = *(_QWORD *)(v7 + 16);
    if (v8)
    {
      v9 = *(_QWORD *)(v7 + 40);
      v10 = __OFSUB__(v6, v9);
      v11 = v6 - v9;
      if (v10)
      {
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      v12 = v8 + v11;
    }
    else
    {
      v12 = 0;
    }
    v13 = v5 - v6;
    type metadata accessor for __DataStorage();
    v14 = swift_allocObject();
    __DataStorage.init(bytes:length:copy:deallocator:offset:)(v12, v13, 1, 0, 0, v6);
    *((_QWORD *)a1 + 1) = v14;
    result = swift_release();
  }
  v15 = *a1;
  v16 = a1[1];
  if ((int)v16 < (int)v15)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v17 = (_QWORD *)*((_QWORD *)a1 + 1);
  v18 = v17[2];
  if (!v18)
  {
LABEL_18:
    __break(1u);
    return result;
  }
  v19 = v17[5];
  v10 = __OFSUB__(v15, v19);
  v20 = v15 - v19;
  if (v10)
    goto LABEL_15;
  v21 = v16 - v15;
  if (v17[3] < v21)
    v21 = v17[3];
  *(_QWORD *)(a2 + 8) = v18 + v20;
  *(_QWORD *)(a2 + 16) = v18 + v20 + v21;
  return result;
}

uint64_t Data.InlineSlice.subscript.getter(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  if (result >= a2 >> 32 || (int)a2 > result)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v3 = *(_QWORD *)(a3 + 16);
  if (v3)
  {
    v4 = *(_QWORD *)(a3 + 40);
    v5 = __OFSUB__(result, v4);
    v6 = result - v4;
    if (!v5)
      return *(unsigned __int8 *)(v3 + v6);
    goto LABEL_7;
  }
LABEL_8:
  __break(1u);
  return result;
}

int *key path getter for Data.InlineSlice.subscript(_:) : Data.InlineSlice@<X0>(int *result@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = result[1];
  v4 = *a2;
  if (*a2 >= *result)
  {
    v6 = __OFSUB__(v4, v3);
    v5 = v4 - v3 < 0;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  if (v5 == v6)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v7 = *((_QWORD *)result + 1);
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v9 = *(_QWORD *)(v7 + 40);
    v6 = __OFSUB__(v4, v9);
    v10 = v4 - v9;
    if (!v6)
    {
      *a3 = *(_BYTE *)(v8 + v10);
      return result;
    }
    goto LABEL_9;
  }
LABEL_10:
  __break(1u);
  return result;
}

void Data.InlineSlice.subscript.setter(char a1, uint64_t a2)
{
  int *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  if (*v2 > a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v2[1] <= a2)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  Data.InlineSlice.ensureUniqueReference()();
  v5 = *((_QWORD *)v2 + 1);
  __DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0, 0);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = *(_QWORD *)(v5 + 40);
    v8 = __OFSUB__(a2, v7);
    v9 = a2 - v7;
    if (!v8)
    {
      *(_BYTE *)(v6 + v9) = a1;
      return;
    }
    goto LABEL_8;
  }
LABEL_9:
  __break(1u);
}

void (*Data.InlineSlice.subscript.modify(void (*result)(uint64_t a1), uint64_t a2))(uint64_t a1)
{
  int *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  *(_QWORD *)result = a2;
  *((_QWORD *)result + 1) = v2;
  if (*v2 > a2 || v2[1] <= a2)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v4 = *((_QWORD *)v2 + 1);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = *(_QWORD *)(v4 + 40);
    v7 = __OFSUB__(a2, v6);
    v8 = a2 - v6;
    if (!v7)
    {
      *((_BYTE *)result + 16) = *(_BYTE *)(v5 + v8);
      return Data.InlineSlice.subscript.modify;
    }
    goto LABEL_9;
  }
LABEL_10:
  __break(1u);
  return result;
}

void Data.InlineSlice.subscript.modify(uint64_t a1)
{
  Data.InlineSlice.subscript.setter(*(_BYTE *)(a1 + 16), *(_QWORD *)a1);
}

void Data.InlineSlice.resetBytes(in:)(uint64_t a1, uint64_t a2)
{
  int *v2;
  int *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (v2[1] < a1)
  {
    __break(1u);
    goto LABEL_15;
  }
  v3 = v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    goto LABEL_9;
  v7 = *v2;
  v6 = v3[1];
  if ((int)v6 < (int)v7)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v8 = *((_QWORD *)v3 + 1);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v10 = *(_QWORD *)(v8 + 40);
    v11 = __OFSUB__(v7, v10);
    v12 = v7 - v10;
    if (v11)
    {
LABEL_18:
      __break(1u);
      return;
    }
    v13 = v9 + v12;
  }
  else
  {
    v13 = 0;
  }
  v14 = v6 - v7;
  type metadata accessor for __DataStorage();
  v15 = swift_allocObject();
  __DataStorage.init(bytes:length:copy:deallocator:offset:)(v13, v14, 1, 0, 0, v7);
  *((_QWORD *)v3 + 1) = v15;
  swift_release();
LABEL_9:
  __DataStorage.resetBytes(in:)(a1, a2);
  if (v3[1] >= a2)
    return;
  if (a2 > 0x7FFFFFFF)
    goto LABEL_16;
  if (*v3 > (int)a2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v3[1] = a2;
}

uint64_t Data.InlineSlice.copyBytes(to:from:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >> 32 >= a3 && (int)a4 <= a3 && a4 >> 32 >= a2 && (int)a4 <= a2)
    return __DataStorage.copyBytes(to:from:)(result, a2, a3);
  __break(1u);
  return result;
}

uint64_t Data.RangeReference.range.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t Data.RangeReference.range.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = result;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*Data.RangeReference.range.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Data.RangeReference.count.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  result = v1 - v2;
  if (__OFSUB__(v1, v2))
    __break(1u);
  return result;
}

uint64_t Data.RangeReference.__allocating_init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t Data.RangeReference.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return v2;
}

uint64_t Data.RangeReference.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t Data.RangeReference.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t Data.LargeSlice.slice.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*Data.LargeSlice.slice.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Data.LargeSlice.storage.getter()
{
  return swift_retain();
}

uint64_t Data.LargeSlice.storage.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*Data.LargeSlice.storage.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Data.LargeSlice.init(_:count:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for Data.RangeReference();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

uint64_t Data.LargeSlice.init(capacity:)(uint64_t a1)
{
  uint64_t result;

  type metadata accessor for __DataStorage();
  swift_allocObject();
  __DataStorage.init(capacity:)(a1);
  type metadata accessor for Data.RangeReference();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t Data.LargeSlice.init(count:)(uint64_t a1)
{
  uint64_t result;

  type metadata accessor for __DataStorage();
  swift_allocObject();
  result = __DataStorage.init(length:)(a1);
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for Data.RangeReference();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = a1;
  }
  return result;
}

uint64_t Data.LargeSlice.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  __int16 v5;
  char v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = a1;
  v5 = a2;
  v6 = BYTE2(a2);
  v7 = BYTE3(a2);
  v2 = BYTE6(a2);
  v8 = BYTE4(a2);
  v9 = BYTE5(a2);
  type metadata accessor for __DataStorage();
  swift_allocObject();
  __DataStorage.init(bytes:length:)((unint64_t)&v4, v2);
  type metadata accessor for Data.RangeReference();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = v2;
  return result;
}

uint64_t Data.LargeSlice.init(_:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = (int)result;
  v2 = result >> 32;
  if (result >> 32 < (int)result)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for Data.RangeReference();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v1;
    *(_QWORD *)(result + 24) = v2;
  }
  return result;
}

Swift::Void __swiftcall Data.LargeSlice.ensureUniqueReference()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = v0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    goto LABEL_6;
  v2 = v0[1];
  v4 = *(_QWORD *)(*v0 + 16);
  v3 = *(_QWORD *)(*v1 + 24);
  v5 = *(_QWORD *)(v2 + 16);
  if (!v5)
  {
    v9 = 0;
    v10 = v3 - v4;
    if (!__OFSUB__(v3, v4))
      goto LABEL_5;
    goto LABEL_10;
  }
  v6 = *(_QWORD *)(v2 + 40);
  v7 = __OFSUB__(v4, v6);
  v8 = v4 - v6;
  if (v7)
  {
LABEL_11:
    __break(1u);
    return;
  }
  v9 = v5 + v8;
  v10 = v3 - v4;
  if (__OFSUB__(v3, v4))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
LABEL_5:
  type metadata accessor for __DataStorage();
  v11 = swift_allocObject();
  __DataStorage.init(bytes:length:copy:deallocator:offset:)(v9, v10, 1, 0, 0, v4);
  v1[1] = v11;
  swift_release();
LABEL_6:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v12 = *(_QWORD *)(*v1 + 16);
    v13 = *(_QWORD *)(*v1 + 24);
    type metadata accessor for Data.RangeReference();
    v14 = swift_allocObject();
    *(_QWORD *)(v14 + 16) = v12;
    *(_QWORD *)(v14 + 24) = v13;
    *v1 = v14;
    swift_release();
  }
}

uint64_t Data.LargeSlice.startIndex.getter(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t Data.LargeSlice.endIndex.getter(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t Data.LargeSlice.capacity.getter(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 32);
}

Swift::Void __swiftcall Data.LargeSlice.reserveCapacity(_:)(Swift::Int a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  Swift::Int v20;

  v2 = v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v4 = v1[1];
    v6 = *(_QWORD *)(*v1 + 16);
    v5 = *(_QWORD *)(*v2 + 24);
    v7 = *(_QWORD *)(v4 + 16);
    if (v7)
    {
      v8 = *(_QWORD *)(v4 + 40);
      v9 = __OFSUB__(v6, v8);
      v10 = v6 - v8;
      if (v9)
      {
LABEL_17:
        __break(1u);
        return;
      }
      v11 = v7 + v10;
      v12 = v5 - v6;
      if (!__OFSUB__(v5, v6))
        goto LABEL_5;
    }
    else
    {
      v11 = 0;
      v12 = v5 - v6;
      if (!__OFSUB__(v5, v6))
      {
LABEL_5:
        type metadata accessor for __DataStorage();
        v13 = swift_allocObject();
        __DataStorage.init(bytes:length:copy:deallocator:offset:)(v11, v12, 1, 0, 0, v6);
        v2[1] = v13;
        swift_release();
        goto LABEL_6;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
LABEL_6:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v14 = *(_QWORD *)(*v2 + 16);
    v15 = *(_QWORD *)(*v2 + 24);
    type metadata accessor for Data.RangeReference();
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = v14;
    *(_QWORD *)(v16 + 24) = v15;
    *v2 = v16;
    swift_release();
  }
  v17 = *(_QWORD *)(*v2 + 16);
  v18 = *(_QWORD *)(*v2 + 24);
  v9 = __OFSUB__(v18, v17);
  v19 = v18 - v17;
  if (v9)
    goto LABEL_16;
  if (v19 <= a1)
    v20 = a1;
  else
    v20 = v19;
  __DataStorage.ensureUniqueBufferReference(growingTo:clear:)(v20, 0);
}

uint64_t Data.LargeSlice.count.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v1 = *(_QWORD *)(a1 + 24);
  result = v1 - v2;
  if (__OFSUB__(v1, v2))
    __break(1u);
  return result;
}

void Data.LargeSlice.count.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  Data.LargeSlice.ensureUniqueReference()();
  v3 = *v1;
  v5 = *(_QWORD *)(*v1 + 16);
  v4 = *(_QWORD *)(*v1 + 24);
  v6 = __OFSUB__(v4, v5);
  v7 = v4 - v5;
  if (v6)
  {
    __break(1u);
    goto LABEL_13;
  }
  v6 = __OFSUB__(a1, v7);
  v8 = a1 - v7;
  if (v6)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v8 >= 1)
  {
    v9 = v4 + v8;
    if (__OFADD__(v4, v8))
    {
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
    if (v9 < v4)
    {
LABEL_17:
      __break(1u);
      goto LABEL_18;
    }
    __DataStorage.resetBytes(in:)(v4, v9);
LABEL_9:
    v11 = *(_QWORD *)(v3 + 16);
    v12 = v11 + a1;
    if (!__OFADD__(v11, a1))
    {
      if (v12 >= v11)
      {
        *(_QWORD *)(v3 + 24) = v12;
        return;
      }
      goto LABEL_15;
    }
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v10 = *(_QWORD *)(v1[1] + 24);
  if (!__OFADD__(v10, v8))
  {
    __DataStorage.setLength(_:)(v10 + v8);
    goto LABEL_9;
  }
LABEL_18:
  __break(1u);
}

void (*Data.LargeSlice.count.modify(void (*result)(uint64_t *a1)))(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;

  *((_QWORD *)result + 1) = v1;
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  v4 = __OFSUB__(v3, v2);
  v5 = v3 - v2;
  if (v4)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)result = v5;
    return Data.LargeSlice.count.modify;
  }
  return result;
}

void Data.LargeSlice.count.modify(uint64_t *a1)
{
  Data.LargeSlice.count.setter(*a1);
}

uint64_t specialized Data.LargeSlice.withUnsafeMutableBytes<A>(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    v5 = a1[1];
    v7 = *(_QWORD *)(*a1 + 16);
    v6 = *(_QWORD *)(*a1 + 24);
    v8 = *(_QWORD *)(v5 + 16);
    if (v8)
    {
      v9 = *(_QWORD *)(v5 + 40);
      v10 = __OFSUB__(v7, v9);
      v11 = v7 - v9;
      if (v10)
      {
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
        return result;
      }
      v12 = v8 + v11;
      v13 = v6 - v7;
      if (!__OFSUB__(v6, v7))
        goto LABEL_5;
    }
    else
    {
      v12 = 0;
      v13 = v6 - v7;
      if (!__OFSUB__(v6, v7))
      {
LABEL_5:
        type metadata accessor for __DataStorage();
        v14 = swift_allocObject();
        __DataStorage.init(bytes:length:copy:deallocator:offset:)(v12, v13, 1, 0, 0, v7);
        a1[1] = v14;
        swift_release();
        goto LABEL_6;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_6:
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    v15 = *(_QWORD *)(*a1 + 16);
    v16 = *(_QWORD *)(*a1 + 24);
    type metadata accessor for Data.RangeReference();
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 16) = v15;
    *(_QWORD *)(v17 + 24) = v16;
    *a1 = v17;
    result = swift_release();
  }
  v18 = (_QWORD *)a1[1];
  v19 = v18[2];
  if (!v19)
    goto LABEL_20;
  v20 = *(_QWORD *)(*a1 + 16);
  v21 = v18[5];
  v10 = __OFSUB__(v20, v21);
  v22 = v20 - v21;
  if (v10)
    goto LABEL_17;
  v23 = *(_QWORD *)(*a1 + 24);
  v10 = __OFSUB__(v23, v20);
  v24 = v23 - v20;
  if (v10)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v25 = v18[3];
  if (v25 >= v24)
    v25 = v24;
  v26 = v19 + v22;
  *(_QWORD *)(a2 + 8) = v26;
  *(_QWORD *)(a2 + 16) = v26 + v25;
  return result;
}

uint64_t Data.LargeSlice.withUnsafeMutableBytes<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t))
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = v1;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    v5 = v1[1];
    v7 = *(_QWORD *)(*v1 + 16);
    v6 = *(_QWORD *)(*v2 + 24);
    v8 = *(_QWORD *)(v5 + 16);
    if (v8)
    {
      v9 = *(_QWORD *)(v5 + 40);
      v10 = __OFSUB__(v7, v9);
      v11 = v7 - v9;
      if (v10)
      {
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
        return result;
      }
      v12 = v8 + v11;
      v13 = v6 - v7;
      if (!__OFSUB__(v6, v7))
        goto LABEL_5;
    }
    else
    {
      v12 = 0;
      v13 = v6 - v7;
      if (!__OFSUB__(v6, v7))
      {
LABEL_5:
        type metadata accessor for __DataStorage();
        v14 = swift_allocObject();
        __DataStorage.init(bytes:length:copy:deallocator:offset:)(v12, v13, 1, 0, 0, v7);
        v2[1] = v14;
        swift_release();
        goto LABEL_6;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_6:
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    v15 = *(_QWORD *)(*v2 + 16);
    v16 = *(_QWORD *)(*v2 + 24);
    type metadata accessor for Data.RangeReference();
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 16) = v15;
    *(_QWORD *)(v17 + 24) = v16;
    *v2 = v17;
    result = swift_release();
  }
  v18 = (_QWORD *)v2[1];
  v19 = v18[2];
  if (!v19)
    goto LABEL_20;
  v20 = *(_QWORD *)(*v2 + 16);
  v21 = v18[5];
  v10 = __OFSUB__(v20, v21);
  v22 = v20 - v21;
  if (v10)
    goto LABEL_17;
  v23 = *(_QWORD *)(*v2 + 24);
  v10 = __OFSUB__(v23, v20);
  v24 = v23 - v20;
  if (v10)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v25 = v18[3];
  if (v25 >= v24)
    v25 = v24;
  return a1(v19 + v22, v19 + v22 + v25);
}

void Data.LargeSlice.append(contentsOf:)(const void *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v3 = v2;
  Data.LargeSlice.ensureUniqueReference()();
  v6 = v2[1];
  v7 = *(_QWORD *)(v6 + 24);
  v8 = *(_QWORD *)(v6 + 40);
  v9 = v7 + v8;
  if (__OFADD__(v7, v8))
  {
    __break(1u);
    goto LABEL_10;
  }
  v10 = *v3;
  v11 = *(_QWORD *)(v10 + 24);
  if (v9 < v11)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (a1)
    v12 = a2 - (_QWORD)a1;
  else
    v12 = 0;
  __DataStorage.replaceBytes(in:with:length:)(v11, v9, a1, v12);
  v13 = *(_QWORD *)(v10 + 24);
  v14 = __OFADD__(v13, v12);
  v15 = v13 + v12;
  if (v14)
    goto LABEL_11;
  if (v15 >= *(_QWORD *)(v10 + 16))
  {
    *(_QWORD *)(v10 + 24) = v15;
    return;
  }
LABEL_12:
  __break(1u);
}

uint64_t Data.LargeSlice.subscript.getter(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  if (*(_QWORD *)(a2 + 16) > result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (*(_QWORD *)(a2 + 24) <= result)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v3 = *(_QWORD *)(a3 + 16);
  if (v3)
  {
    v4 = *(_QWORD *)(a3 + 40);
    v5 = __OFSUB__(result, v4);
    v6 = result - v4;
    if (!v5)
      return *(unsigned __int8 *)(v3 + v6);
    goto LABEL_8;
  }
LABEL_9:
  __break(1u);
  return result;
}

_QWORD *key path getter for Data.LargeSlice.subscript(_:) : Data.LargeSlice@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  v3 = *a2;
  if (*a2 < *(_QWORD *)(*result + 16))
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v3 >= *(_QWORD *)(*result + 24))
  {
LABEL_7:
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v4 = result[1];
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = *(_QWORD *)(v4 + 40);
    v7 = __OFSUB__(v3, v6);
    v8 = v3 - v6;
    if (!v7)
    {
      *a3 = *(_BYTE *)(v5 + v8);
      return result;
    }
    goto LABEL_8;
  }
LABEL_9:
  __break(1u);
  return result;
}

void Data.LargeSlice.subscript.setter(char a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  if (*(_QWORD *)(*v2 + 16) > a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (*(_QWORD *)(*v2 + 24) <= a2)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  Data.LargeSlice.ensureUniqueReference()();
  v5 = v2[1];
  __DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0, 0);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = *(_QWORD *)(v5 + 40);
    v8 = __OFSUB__(a2, v7);
    v9 = a2 - v7;
    if (!v8)
    {
      *(_BYTE *)(v6 + v9) = a1;
      return;
    }
    goto LABEL_8;
  }
LABEL_9:
  __break(1u);
}

void (*Data.LargeSlice.subscript.modify(void (*result)(uint64_t a1), uint64_t a2))(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  *(_QWORD *)result = a2;
  *((_QWORD *)result + 1) = v2;
  if (*(_QWORD *)(*v2 + 16) > a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (*(_QWORD *)(*v2 + 24) <= a2)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v3 = v2[1];
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(v3 + 40);
    v6 = __OFSUB__(a2, v5);
    v7 = a2 - v5;
    if (!v6)
    {
      *((_BYTE *)result + 16) = *(_BYTE *)(v4 + v7);
      return Data.LargeSlice.subscript.modify;
    }
    goto LABEL_8;
  }
LABEL_9:
  __break(1u);
  return result;
}

void Data.LargeSlice.subscript.modify(uint64_t a1)
{
  Data.LargeSlice.subscript.setter(*(_BYTE *)(a1 + 16), *(_QWORD *)a1);
}

void Data.LargeSlice.resetBytes(in:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (*(_QWORD *)(*v2 + 24) < a1)
    goto LABEL_16;
  v3 = v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    goto LABEL_7;
  v6 = v2[1];
  v8 = *(_QWORD *)(*v2 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  v9 = *(_QWORD *)(v6 + 16);
  if (v9)
  {
    v10 = *(_QWORD *)(v6 + 40);
    v11 = __OFSUB__(v8, v10);
    v12 = v8 - v10;
    if (v11)
    {
LABEL_18:
      __break(1u);
      return;
    }
    v13 = v9 + v12;
    v14 = v7 - v8;
    if (!__OFSUB__(v7, v8))
      goto LABEL_6;
    goto LABEL_15;
  }
  v13 = 0;
  v14 = v7 - v8;
  if (__OFSUB__(v7, v8))
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_6:
  type metadata accessor for __DataStorage();
  v15 = swift_allocObject();
  __DataStorage.init(bytes:length:copy:deallocator:offset:)(v13, v14, 1, 0, 0, v8);
  v3[1] = v15;
  swift_release();
LABEL_7:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v16 = *(_QWORD *)(*v3 + 16);
    v17 = *(_QWORD *)(*v3 + 24);
    type metadata accessor for Data.RangeReference();
    v18 = swift_allocObject();
    *(_QWORD *)(v18 + 16) = v16;
    *(_QWORD *)(v18 + 24) = v17;
    *v3 = v18;
    swift_release();
  }
  __DataStorage.resetBytes(in:)(a1, a2);
  v19 = *v3;
  if (*(_QWORD *)(*v3 + 24) < a2)
  {
    if (*(_QWORD *)(v19 + 16) <= a2)
    {
      *(_QWORD *)(v19 + 24) = a2;
      return;
    }
    goto LABEL_17;
  }
}

void Data.LargeSlice.replaceSubrange(_:with:count:)(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t *v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v5 = *(_QWORD *)(*v4 + 16);
  if (v5 > a1)
    goto LABEL_24;
  v8 = *(_QWORD *)(*v4 + 24);
  if (v8 < a2 || v5 > a2 || v8 < a1)
    goto LABEL_25;
  v11 = v4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    goto LABEL_14;
  v14 = v4[1];
  v16 = *(_QWORD *)(*v4 + 16);
  v15 = *(_QWORD *)(*v11 + 24);
  v17 = *(_QWORD *)(v14 + 16);
  if (!v17)
  {
    v21 = 0;
    v22 = v15 - v16;
    if (!__OFSUB__(v15, v16))
      goto LABEL_13;
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v18 = *(_QWORD *)(v14 + 40);
  v19 = __OFSUB__(v16, v18);
  v20 = v16 - v18;
  if (!v19)
  {
    v21 = v17 + v20;
    v22 = v15 - v16;
    if (!__OFSUB__(v15, v16))
    {
LABEL_13:
      type metadata accessor for __DataStorage();
      v23 = swift_allocObject();
      __DataStorage.init(bytes:length:copy:deallocator:offset:)(v21, v22, 1, 0, 0, v16);
      v11[1] = v23;
      swift_release();
LABEL_14:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v24 = *(_QWORD *)(*v11 + 16);
        v25 = *(_QWORD *)(*v11 + 24);
        type metadata accessor for Data.RangeReference();
        v26 = swift_allocObject();
        *(_QWORD *)(v26 + 16) = v24;
        *(_QWORD *)(v26 + 24) = v25;
        *v11 = v26;
        swift_release();
      }
      v27 = *(_QWORD *)(*v11 + 24);
      __DataStorage.replaceBytes(in:with:length:)(a1, a2, a3, a4);
      v28 = a2 - a1;
      if (!__OFSUB__(a2, a1))
      {
        v19 = __OFSUB__(v27, v28);
        v29 = v27 - v28;
        if (!v19)
        {
          v19 = __OFADD__(v29, a4);
          v30 = v29 + a4;
          if (!v19)
          {
            if (v30 >= *(_QWORD *)(*v11 + 16))
            {
              *(_QWORD *)(*v11 + 24) = v30;
              return;
            }
            goto LABEL_29;
          }
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
          goto LABEL_30;
        }
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    goto LABEL_23;
  }
LABEL_30:
  __break(1u);
}

uint64_t Data.LargeSlice.copyBytes(to:from:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a4 + 16);
  if (v4 > a2)
  {
    __break(1u);
  }
  else
  {
    v5 = *(_QWORD *)(a4 + 24);
    if (v5 >= a3 && v4 <= a3 && v5 >= a2)
      return __DataStorage.copyBytes(to:from:)(result, a2, a3);
  }
  __break(1u);
  return result;
}

_QWORD *Data._Representation.init(_:owner:)(_BYTE *__src, _BYTE *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;

  v4 = __src;
  if (!__src)
  {
    swift_unknownObjectRelease();
    return v4;
  }
  v5 = a2 - __src;
  if (a2 == __src)
  {
    swift_unknownObjectRelease();
    return 0;
  }
  if (v5 <= 14)
  {
    v4 = (_QWORD *)specialized Data.InlineData.init(_:)(__src, a2);
    swift_unknownObjectRelease();
    return v4;
  }
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a3;
  type metadata accessor for __DataStorage();
  result = (_QWORD *)swift_allocObject();
  if ((unint64_t)v5 < 0x3FFFFFFFFFFFFFFFLL)
  {
    result[4] = v5;
    result[5] = 0;
    *((_BYTE *)result + 64) = 0;
    result[2] = v4;
    result[3] = v5;
    result[6] = destructiveProjectEnumData for PredicateCodableError;
    result[7] = v6;
    if ((unint64_t)v5 <= 0x7FFFFFFE)
      return (_QWORD *)(v5 << 32);
    type metadata accessor for Data.RangeReference();
    v4 = (_QWORD *)swift_allocObject();
    v4[2] = 0;
    v4[3] = v5;
    return v4;
  }
  __break(1u);
  return result;
}

uint64_t Data._Representation.init(capacity:)(uint64_t result)
{
  unint64_t v1;

  if (result)
  {
    v1 = result;
    if (result < 15)
    {
      return 0;
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      __DataStorage.init(capacity:)(v1);
      if (v1 > 0x7FFFFFFE)
      {
        type metadata accessor for Data.RangeReference();
        result = swift_allocObject();
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = 0;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

Swift::Void __swiftcall Data._Representation.reserveCapacity(_:)(Swift::Int a1)
{
  if (a1 >= 1)
    __asm { BR              X10 }
}

uint64_t Data._Representation.count.getter(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(_QWORD))((char *)&loc_181E54378 + dword_181E543BC[a2 >> 62]))(0);
}

uint64_t sub_181E54388(uint64_t a1, uint64_t a2)
{
  return BYTE6(a2);
}

uint64_t Data._Representation.count.modify(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 8) = v1;
  return ((uint64_t (*)(uint64_t, uint64_t))((char *)&loc_181E543F8
                                                   + *((int *)qword_181E54448 + (*(_QWORD *)(v1 + 8) >> 62))))(a1, a1);
}

void (*sub_181E54408(uint64_t a1, _QWORD *a2))()
{
  uint64_t v2;

  *a2 = BYTE6(v2);
  return Data._Representation.count.modify;
}

void Data._Representation.count.modify()
{
  Data._Representation.count.setter();
}

void specialized Data._Representation.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

{
  specialized Data._Representation.withUnsafeBytes<A>(_:)(a1, a2);
}

{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

void sub_181E544E0()
{
  Data._Representation.replaceSubrange(_:with:count:)();
}

uint64_t sub_181E546D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __int16 v5;
  char v6;
  char v7;
  char v8;
  char v9;
  uint64_t *v10;
  char *v11;

  v4 = v0;
  v5 = v2;
  v6 = BYTE2(v2);
  v7 = BYTE3(v2);
  v8 = BYTE4(v2);
  v9 = BYTE5(v2);
  v10 = &v4;
  v11 = (char *)&v4 + BYTE6(v2);
  __swift_mutable_project_boxed_opaque_existential_1(v1, *(_QWORD *)(v1 + 24));
  return dispatch thunk of UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

void sub_181E548DC()
{
  Data._Representation.append(contentsOf:)();
}

void sub_181E54AF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  char v4;
  char v5;
  char v6;
  char v7;

  v2 = v0;
  v3 = v1;
  v4 = BYTE2(v1);
  v5 = BYTE3(v1);
  v6 = BYTE4(v1);
  v7 = BYTE5(v1);
  _BPlistEncodingFormat.Writer.write(_:)((uint64_t)&v2, BYTE6(v1));
}

void sub_181E54CC4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  char v5;
  char v6;
  char v7;
  char v8;

  v3 = v1;
  v4 = v2;
  v5 = BYTE2(v2);
  v6 = BYTE3(v2);
  v7 = BYTE4(v2);
  v8 = BYTE5(v2);
  closure #1 in NSFileHandle.write<A>(contentsOf:)(&v3, (_BYTE *)&v3 + BYTE6(v2), v0);

}

uint64_t sub_181E54ED0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, uint64_t value, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  int v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  const char *v29;
  uint64_t v31;
  __int16 v32;
  char v33;
  char v34;
  char v35;
  char v36;

  v31 = v26;
  v32 = v27;
  v33 = BYTE2(v27);
  v34 = BYTE3(v27);
  v35 = BYTE4(v27);
  v28 = BYTE6(v27);
  v36 = BYTE5(v27);
  v29 = (const char *)(String.utf8CString.getter() + 32);
  swift_bridgeObjectRetain_n();
  fsetxattr(v25, v29, &v31, v28, 0, 0);
  swift_bridgeObjectRelease_n();
  return swift_release();
}

uint64_t sub_181E55158()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __int16 v5;
  char v6;
  char v7;
  char v8;
  char v9;

  v4 = v1;
  v5 = v2;
  v6 = BYTE2(v2);
  v7 = BYTE3(v2);
  v8 = BYTE4(v2);
  v9 = BYTE5(v2);
  return closure #1 in Data.customMirror.getter((uint64_t)&v4, (uint64_t)&v4 + BYTE6(v2), v0);
}

uint64_t sub_181E55330()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;

  v8 = v3;
  v9 = v4;
  v10 = BYTE2(v4);
  v11 = BYTE3(v4);
  v12 = BYTE4(v4);
  v13 = BYTE5(v4);
  closure #1 in static Data.== infix(_:_:)((uint64_t)&v8, (uint64_t)&v8 + BYTE6(v4), v1, v0);
  outlined consume of Data._Representation(v1, v0);
  if (!v2)
    v5 = v7;
  return v5 & 1;
}

void Data._Representation.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_181E55554()
{
  uint64_t (*v0)(uint64_t *, char *);
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __int16 v5;
  char v6;
  char v7;
  char v8;
  char v9;

  v4 = v1;
  v5 = v2;
  v6 = BYTE2(v2);
  v7 = BYTE3(v2);
  v8 = BYTE4(v2);
  v9 = BYTE5(v2);
  return v0(&v4, (char *)&v4 + BYTE6(v2));
}

void specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(uint64_t a1)
{
  __asm { BR              X12 }
}

{
  __asm { BR              X13 }
}

uint64_t sub_181E5572C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>, uint64_t a3, uint64_t __dst, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  unsigned int v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 v34;

  v30 = v18;
  LOWORD(v31) = a2;
  BYTE2(v31) = BYTE2(a2);
  HIBYTE(v31) = BYTE3(a2);
  v32 = BYTE4(a2);
  v33 = BYTE5(a2);
  v22 = BYTE6(a2);
  v34 = BYTE6(a2);
  specialized UnsafeMutableBufferPointer.initialize<A>(fromContentsOf:)(a1, v19, (char *)&v30, BYTE6(a2));
  if (v21 == 2)
    v23 = _allASCII(_:)((char *)&v30, v22);
  else
    v23 = v21 & 1;
  v24 = v30;
  v25 = v31;
  v26 = v32;
  v27 = v33;
  v28 = v34;
  swift_bridgeObjectRelease();
  *v20 = v24;
  v20[1] = v25 | (v26 << 32) | (v27 << 40) | (v28 << 48);
  return v23 & 1;
}

void sub_181E55978(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _BYTE v5[56];

  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = &v5[BYTE6(v3)];
  *v4 = v2;
  v4[1] = v3;
}

void Data._Representation.enumerateBytes(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_181E55A74()
{
  uint64_t (*v0)(uint64_t *, _QWORD, _QWORD, char *);
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  __int16 v6;
  char v7;
  char v8;
  char v9;
  char v10;

  v5 = v1;
  v6 = v2;
  v7 = BYTE2(v2);
  v8 = BYTE3(v2);
  v9 = BYTE4(v2);
  v10 = BYTE5(v2);
  v4 = 0;
  return v0(&v5, BYTE6(v2), 0, &v4);
}

uint64_t Data._Representation.endIndex.getter(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(_QWORD))((char *)sub_181E55C90 + 4 * byte_1821657E8[a2 >> 62]))(0);
}

uint64_t sub_181E55C90(uint64_t a1, uint64_t a2)
{
  return BYTE6(a2);
}

uint64_t sub_181E55C98@<X0>(uint64_t a1@<X8>)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t sub_181E55CA0@<X0>(uint64_t a1@<X8>)
{
  return a1 >> 32;
}

uint64_t Data._Representation.startIndex.getter(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(_QWORD))((char *)nullsub_12 + 4 * byte_1821657EC[a2 >> 62]))(0);
}

uint64_t sub_181E55CD0@<X0>(int a1@<W8>)
{
  return a1;
}

uint64_t sub_181E55CD8@<X0>(uint64_t a1@<X8>)
{
  return *(_QWORD *)(a1 + 16);
}

char *closure #1 in closure #1 in Data._Representation.replaceSubrange(_:with:count:)(char *__src, int a2, int64_t a3, uint64_t a4, char *__dst, uint64_t a6, uint64_t a7)
{
  char *v10;
  size_t v11;

  v10 = __src;
  if (a3 >= 1 && __dst)
  {
    if (!__src)
      goto LABEL_13;
    __src = (char *)memmove(__dst, __src, a3);
  }
  if (a4 < a7 && __dst)
  {
    if (!v10)
    {
LABEL_14:
      __break(1u);
LABEL_15:
      __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
      return __src;
    }
    v11 = a7 - a4;
    if (!__OFSUB__(a7, a4))
    {
      if ((v11 & 0x8000000000000000) == 0)
        return (char *)memmove(&__dst[a4], &v10[a4], v11);
      goto LABEL_15;
    }
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  return __src;
}

void Data._Representation.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

void (*Data._Representation.subscript.modify(uint64_t a1, uint64_t a2))()
{
  uint64_t *v2;
  char v4;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v2;
  Data._Representation.subscript.getter(a2, *v2, v2[1]);
  *(_BYTE *)(a1 + 16) = v4;
  return Data._Representation.subscript.modify;
}

void Data._Representation.subscript.modify()
{
  Data._Representation.subscript.setter();
}

void Data._Representation.copyBytes(to:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __asm { BR              X10 }
}

uint64_t Data._representation.getter(uint64_t a1, unint64_t a2)
{
  outlined copy of Data._Representation(a1, a2);
  return a1;
}

uint64_t Data._representation.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of Data._Representation(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  *(_QWORD *)v2 = a1;
  *(_QWORD *)(v2 + 8) = a2;
  return result;
}

uint64_t (*Data._representation.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

unint64_t Data.init<A>(buffer:)(unint64_t __src, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  if (__src)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 72);
    v4 = a2 * v3;
    if ((unsigned __int128)(a2 * (__int128)v3) >> 64 == (a2 * v3) >> 63)
    {
      if (v4)
      {
        v5 = __src;
        if (v4 <= 14)
        {
          return specialized Data.InlineData.init(_:)((_BYTE *)__src, (_BYTE *)(__src + v4));
        }
        else
        {
          type metadata accessor for __DataStorage();
          swift_allocObject();
          __DataStorage.init(bytes:length:)(v5, v4);
          if ((unint64_t)v4 >= 0x7FFFFFFF)
          {
            type metadata accessor for Data.RangeReference();
            __src = swift_allocObject();
            *(_QWORD *)(__src + 16) = 0;
            *(_QWORD *)(__src + 24) = v4;
          }
          else
          {
            return v4 << 32;
          }
        }
      }
      else
      {
        return 0;
      }
    }
    else
    {
      __break(1u);
    }
  }
  return __src;
}

uint64_t Data.init(capacity:)(uint64_t result)
{
  unint64_t v1;

  if (result)
  {
    v1 = result;
    if (result <= 14)
    {
      return 0;
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      __DataStorage.init(capacity:)(v1);
      if (v1 > 0x7FFFFFFE)
      {
        type metadata accessor for Data.RangeReference();
        result = swift_allocObject();
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = 0;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t Data.init<A>(bytes:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v6 = *(_QWORD *)(a2 - 8);
  v7 = MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))(v9, a1, a2, v7);
  v10 = Data.init<A>(_:)((uint64_t)v9, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  return v10;
}

_BYTE *Data.init(bytes:)(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  _BYTE *v5;
  _QWORD v7[3];
  uint64_t v8;
  _UNKNOWN **v9;

  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [UInt8]);
  v9 = &protocol witness table for <A> [A];
  v7[0] = a1;
  v2 = __swift_project_boxed_opaque_existential_1(v7, v8);
  v3 = (_BYTE *)(*v2 + 32);
  v4 = &v3[*(_QWORD *)(*v2 + 16)];
  swift_bridgeObjectRetain();
  v5 = specialized Data._Representation.init(_:)(v3, v4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  swift_bridgeObjectRelease();
  return v5;
}

_QWORD *Data.init(bytes:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4 = specialized Data.init<A>(_:)(a1, a2, a3, a4);
  swift_unknownObjectRelease();
  return v4;
}

uint64_t key path getter for Data._Representation.count : Data._Representation(uint64_t a1)
{
  return ((uint64_t (*)(void))((char *)&loc_181E565AC + dword_181E565FC[*(_QWORD *)(a1 + 8) >> 62]))();
}

void sub_181E565BC(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = BYTE6(v1);
}

void Data.count.setter(uint64_t a1)
{
  if (a1 < 0)
    __break(1u);
  else
    Data._Representation.count.setter();
}

uint64_t Data.count.modify(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 8) = v1;
  return ((uint64_t (*)(uint64_t, uint64_t))((char *)&loc_181E56634 + dword_181E56684[*(_QWORD *)(v1 + 8) >> 62]))(a1, a1);
}

void (*sub_181E56644(uint64_t a1, _QWORD *a2))(uint64_t *a1, char a2)
{
  uint64_t v2;

  *a2 = BYTE6(v2);
  return Data.count.modify;
}

void Data.count.modify(uint64_t *a1, char a2)
{
  uint64_t v2;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    if ((v2 & 0x8000000000000000) == 0)
    {
LABEL_5:
      Data._Representation.count.setter();
      return;
    }
    __break(1u);
  }
  if ((v2 & 0x8000000000000000) == 0)
    goto LABEL_5;
  __break(1u);
}

uint64_t Data.regions.getter(uint64_t a1, unint64_t a2)
{
  outlined copy of Data._Representation(a1, a2);
  return a1;
}

void Data.withUnsafeBytes<A, B>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_181E56758()
{
  uint64_t (*v0)(uint64_t *);
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __int16 v5;
  char v6;
  char v7;
  char v8;
  char v9;

  v4 = v1;
  v5 = v2;
  v6 = BYTE2(v2);
  v7 = BYTE3(v2);
  v8 = BYTE4(v2);
  v9 = BYTE5(v2);
  return v0(&v4);
}

void specialized Data.withContiguousStorageIfAvailable<A>(_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

{
  specialized Data.withContiguousStorageIfAvailable<A>(_:)(a1, a2);
}

{
  specialized Data.withContiguousStorageIfAvailable<A>(_:)(a1, a2);
}

{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

void (*sub_181E56944())(_BYTE *, _QWORD)
{
  uint64_t v0;
  uint64_t v1;
  void (*result)(_BYTE *, _QWORD);
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  char v6;
  char v7;
  char v8;
  char v9;

  v4 = v0;
  v5 = v1;
  v6 = BYTE2(v1);
  v7 = BYTE3(v1);
  v8 = BYTE4(v1);
  v9 = BYTE5(v1);
  result = (void (*)(_BYTE *, _QWORD))static String._tryFromUTF8(_:)();
  if (!v3)
    return specialized String.init<A, B>(_validating:as:)((unsigned __int8 *)&v4, BYTE6(v1));
  return result;
}

uint64_t sub_181E56BF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  __int16 v4;
  char v5;
  char v6;
  char v7;
  char v8;

  v3 = v0;
  v4 = v1;
  v5 = BYTE2(v1);
  v6 = BYTE3(v1);
  v7 = BYTE4(v1);
  v8 = BYTE5(v1);
  return specialized String.init<A, B>(_validating:as:)((char *)&v3, BYTE6(v1));
}

uint64_t sub_181E56EE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, _QWORD, uint64_t);
  uint64_t v5;
  uint64_t result;

  *(_QWORD *)(v5 - 112) = v0;
  *(_WORD *)(v5 - 104) = v3;
  *(_BYTE *)(v5 - 102) = BYTE2(v3);
  *(_BYTE *)(v5 - 101) = BYTE3(v3);
  *(_BYTE *)(v5 - 100) = BYTE4(v3);
  *(_BYTE *)(v5 - 99) = BYTE5(v3);
  result = v4(v5 - 112, BYTE6(v3), v2);
  if (!v1)
    return *(_QWORD *)(v5 - 96);
  return result;
}

id sub_181E57288()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  void *v4;
  id v5;
  uint64_t v7;
  __int16 v8;
  char v9;
  char v10;
  char v11;
  char v12;

  v7 = v0;
  v8 = v2;
  v9 = BYTE2(v2);
  v10 = BYTE3(v2);
  v11 = BYTE4(v2);
  v12 = BYTE5(v2);
  v3 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithBytes_length_encoding_, &v7, BYTE6(v2), v1);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

  return v5;
}

void Data.withContiguousStorageIfAvailable<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_181E57604()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t *, _QWORD);
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  __int16 v8;
  char v9;
  char v10;
  char v11;
  char v12;

  v7 = v2;
  v8 = v5;
  v9 = BYTE2(v5);
  v10 = BYTE3(v5);
  v11 = BYTE4(v5);
  v12 = BYTE5(v5);
  result = v3(&v7, BYTE6(v5));
  if (!v4)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 56))(v1, 0, 1, v0);
  return result;
}

void Data.withUnsafeMutableBytes<A, B>(_:)()
{
  Data._Representation.withUnsafeMutableBytes<A>(_:)();
}

uint64_t Data.startIndex.getter(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(_QWORD))((char *)nullsub_13 + 4 * byte_1821657F0[a2 >> 62]))(0);
}

uint64_t sub_181E578E4@<X0>(int a1@<W8>)
{
  return a1;
}

uint64_t sub_181E578EC@<X0>(uint64_t a1@<X8>)
{
  return *(_QWORD *)(a1 + 16);
}

void Data.copyBytes(to:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2 != a3)
    Data._Representation.copyBytes(to:from:)(a1, a2, a3, a4, a5);
}

void Data.copyBytes<A>(to:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  __asm { BR              X11 }
}

uint64_t sub_181E57934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v10 = BYTE6(a7);
  if (!BYTE6(a7))
    return 0;
  if ((a5 & 1) != 0)
    goto LABEL_11;
  if (v9 != a4)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(a8 - 8) + 72);
    v10 = a2 * v11;
    if ((unsigned __int128)(a2 * (__int128)v11) >> 64 != (a2 * v11) >> 63)
    {
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    v8 = a4 - v9;
    if (__OFSUB__(a4, v9))
    {
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    if (v8 < v10)
      v10 = a4 - v9;
    v12 = v9 + v10;
    if (__OFADD__(v9, v10))
      goto LABEL_32;
    if (v12 >= v9)
      goto LABEL_21;
    __break(1u);
LABEL_11:
    if ((_DWORD)v8)
    {
      if ((_DWORD)v8 == 1)
        v9 = (int)a6;
      else
        v9 = *(_QWORD *)(a6 + 16);
    }
    else
    {
      v9 = 0;
    }
    v13 = *(_QWORD *)(*(_QWORD *)(a8 - 8) + 72);
    if ((unsigned __int128)(a2 * (__int128)v13) >> 64 == (a2 * v13) >> 63)
    {
      if (v10 >= a2 * v13)
        v10 = a2 * v13;
      v12 = v9 + v10;
      if (!__OFADD__(v9, v10))
      {
        if (v12 >= v9)
        {
LABEL_21:
          if (v9 == v12)
            return 0;
          if (!a1)
          {
LABEL_33:
            __break(1u);
            JUMPOUT(0x181E57A64);
          }
          Data._Representation.copyBytes(to:from:)(a1, v9, v12, a6, a7);
          v14 = v12 - v9;
          if (!__OFSUB__(v12, v9))
            return v14;
          goto LABEL_29;
        }
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_28;
  }
  return 0;
}

void Data.enumerateBytes(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_181E57AC8()
{
  uint64_t (*v0)(uint64_t *, _QWORD, _QWORD, char *);
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  __int16 v6;
  char v7;
  char v8;
  char v9;
  char v10;

  v5 = v1;
  v6 = v2;
  v7 = BYTE2(v2);
  v8 = BYTE3(v2);
  v9 = BYTE4(v2);
  v10 = BYTE5(v2);
  v4 = 0;
  return v0(&v5, BYTE6(v2), 0, &v4);
}

void Data._append<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    if (a1
      && (unsigned __int128)(a2 * (__int128)*(uint64_t *)(*(_QWORD *)(a3 - 8) + 72)) >> 64 != (a2
                                                                                              * *(_QWORD *)(*(_QWORD *)(a3 - 8) + 72)) >> 63)
    {
      __break(1u);
      JUMPOUT(0x181E57CD8);
    }
    Data._Representation.append(contentsOf:)();
  }
}

Swift::Void __swiftcall Data.append(contentsOf:)(Swift::OpaquePointer contentsOf)
{
  if (*((_QWORD *)contentsOf._rawValue + 2))
    Data._Representation.append(contentsOf:)();
}

uint64_t Data.endIndex.getter(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(_QWORD))((char *)sub_181E57D24 + 4 * byte_1821657F4[a2 >> 62]))(0);
}

uint64_t sub_181E57D24(uint64_t a1, uint64_t a2)
{
  return BYTE6(a2);
}

uint64_t sub_181E57D2C@<X0>(uint64_t a1@<X8>)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t sub_181E57D34@<X0>(uint64_t a1@<X8>)
{
  return a1 >> 32;
}

void Data.resetBytes(in:)(uint64_t a1, uint64_t a2)
{
  if ((a2 | a1) < 0)
    __break(1u);
  else
    Data._Representation.resetBytes(in:)();
}

void closure #3 in Data.append<A>(contentsOf:)(uint64_t a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v7 = *(_QWORD *)(a2 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v13 = MEMORY[0x1E0C80A78](a1);
  v14 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v9)
  {
    if (__OFSUB__(v10 - v9, v11))
    {
      __break(1u);
      return;
    }
    v15 = v9 + v11;
    v20 = v10;
  }
  else
  {
    v20 = 0;
    v15 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16))((char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v12, a2, v13);
  v16 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = a2;
  *(_QWORD *)(v17 + 24) = a3;
  v18 = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))(v17 + v16, v14, a2);
  MEMORY[0x1E0C80A78](v18);
  *(&v19 - 4) = a2;
  *(&v19 - 3) = a3;
  *(&v19 - 2) = (uint64_t)partial apply for implicit closure #3 in implicit closure #2 in closure #3 in Data.append<A>(contentsOf:);
  *(&v19 - 1) = v17;
  if (v15)
    partial apply for thunk for @callee_guaranteed (@unowned UnsafeMutableBufferPointer<UInt8>) -> (@out A.Sequence.Iterator, @unowned Int)(v15, v20 - v15, a4);
  else
    partial apply for thunk for @callee_guaranteed (@unowned UnsafeMutableBufferPointer<UInt8>) -> (@out A.Sequence.Iterator, @unowned Int)(0, 0, a4);
  swift_release();
}

uint64_t implicit closure #3 in implicit closure #2 in closure #3 in Data.append<A>(contentsOf:)(uint64_t a1)
{
  __n128 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16))((char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v4, v5, v1);
  return dispatch thunk of Sequence._copyContents(initializing:)();
}

void Data.replaceSubrange(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  specialized Data._Representation.withUnsafeBytes<A>(_:)(a3, a4);
}

void Data.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a4)
  {
    if (a3)
    {
      if ((unsigned __int128)(a4 * (__int128)*(uint64_t *)(*(_QWORD *)(a5 - 8) + 72)) >> 64 == (a4
                                                                                                * *(_QWORD *)(*(_QWORD *)(a5 - 8) + 72)) >> 63)
      {
        Data._Representation.replaceSubrange(_:with:count:)();
        return;
      }
      __break(1u);
    }
    __break(1u);
  }
}

void closure #1 in Data.replaceSubrange<A>(_:with:)()
{
  Data._Representation.replaceSubrange(_:with:count:)();
}

uint64_t closure #3 in Data.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  _QWORD v20[5];
  char v21;

  v20[3] = a4;
  v20[4] = a7;
  v20[1] = a5;
  v20[2] = a6;
  v11 = *(_QWORD *)(a8 - 8);
  MEMORY[0x1E0C80A78](a1);
  v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v16 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v18 = (char *)v20 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16))(v13, a3, a8, v16);
  if (dispatch thunk of Sequence._copyContents(initializing:)() != a2)
  {
    __break(1u);
    goto LABEL_5;
  }
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  if (v21 != 1)
  {
LABEL_5:
    __break(1u);
    JUMPOUT(0x181E58184);
  }
  Data._Representation.replaceSubrange(_:with:count:)();
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, AssociatedTypeWitness);
}

void Data.advanced(by:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000) == 0)
    __asm { BR              X9 }
  __break(1u);
  JUMPOUT(0x181E582C8);
}

void Data.subscript.getter(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  _QWORD v48[4];
  uint64_t AssociatedTypeWitness;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t TupleTypeMetadata2;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t AssociatedConformanceWitness;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;

  v72 = a2;
  v61 = a6;
  v62 = a1;
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a6 + 8) + 24) + 16);
  swift_getAssociatedTypeWitness();
  v50 = v9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v48[3] = (char *)v48 - v10;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  MEMORY[0x1E0C80A78](v11);
  v63 = a4;
  v64 = a5;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v65 = type metadata accessor for Range();
  v60 = *(_QWORD *)(v65 - 8);
  MEMORY[0x1E0C80A78](v65);
  v57 = (char *)v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v59 = (char *)v48 - v14;
  MEMORY[0x1E0C80A78](v15);
  v74 = (char *)v48 - v16;
  MEMORY[0x1E0C80A78](v17);
  MEMORY[0x1E0C80A78](v18);
  v67 = (char *)v48 - v19;
  MEMORY[0x1E0C80A78](v20);
  MEMORY[0x1E0C80A78](v21);
  MEMORY[0x1E0C80A78](v22);
  MEMORY[0x1E0C80A78](v23);
  v51 = (char *)v48 - v24;
  MEMORY[0x1E0C80A78](v25);
  MEMORY[0x1E0C80A78](v26);
  v68 = (char *)v48 - v27;
  MEMORY[0x1E0C80A78](v28);
  v53 = (char *)v48 - v29;
  MEMORY[0x1E0C80A78](v30);
  v66 = (char *)v48 - v31;
  MEMORY[0x1E0C80A78](v32);
  v54 = (char *)v48 - v33;
  MEMORY[0x1E0C80A78](v34);
  v52 = (char *)v48 - v35;
  MEMORY[0x1E0C80A78](v36);
  v56 = (char *)v48 - v37;
  MEMORY[0x1E0C80A78](v38);
  v73 = (char *)v48 - v39;
  MEMORY[0x1E0C80A78](v40);
  v71 = (char *)v48 - v41;
  MEMORY[0x1E0C80A78](v42);
  v48[2] = v43;
  v55 = v44;
  v48[1] = v45;
  v46 = (char *)&loc_181E58710 + *((int *)qword_181E594F8 + (a3 >> 62));
  v70 = (char *)v48 - v47;
  __asm { BR              X9 }
}

uint64_t sub_181E58724()
{
  unsigned int v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 - 96) = 0;
  *(_QWORD *)(v1 - 176) = lazy protocol witness table accessor for type Int and conformance Int();
  v2 = dispatch thunk of BinaryFloatingPoint.init<A>(exactly:)();
  return ((uint64_t (*)(uint64_t))((char *)&loc_181E58764 + *((int *)qword_181E59508 + v0)))(v2);
}

uint64_t sub_181E58778()
{
  uint64_t v0;
  char *v1;
  char *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  char *v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  char *v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t AssociatedConformanceWitness;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  char *v31;
  char *v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  char *v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t i;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(uint64_t, uint64_t);
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;

  *(_QWORD *)(v8 - 200) = v5;
  *(_QWORD *)(v8 - 96) = BYTE6(v7);
  v9 = *(_QWORD *)(v8 - 152);
  v10 = v0;
  dispatch thunk of BinaryFloatingPoint.init<A>(exactly:)();
  v11 = v3;
  v12 = *(_QWORD *)(v8 - 160);
  if ((dispatch thunk of static Comparable.<= infix(_:_:)() & 1) == 0)
  {
    __break(1u);
    goto LABEL_70;
  }
  *(_QWORD *)(v8 - 352) = v6;
  *(_QWORD *)(v8 - 312) = v7;
  v13 = *(_QWORD *)(v8 - 272);
  v14 = &v1[*(int *)(v13 + 48)];
  v15 = v9;
  v16 = (void (*)(char *, uint64_t, uint64_t))v4[2];
  v16(v1, v12, v0);
  v16(v14, v15, v0);
  v17 = &v2[*(int *)(v13 + 48)];
  v16(v2, (uint64_t)v1, v0);
  v16(v17, (uint64_t)v14, v0);
  v18 = (void (*)(uint64_t, uint64_t, uint64_t))v4[4];
  *(_QWORD *)(v8 - 304) = v11;
  v19 = v1;
  v20 = *(_QWORD *)(v8 - 280);
  v18(v20, (uint64_t)v2, v0);
  v21 = (void (*)(uint64_t, uint64_t))v4[1];
  v21((uint64_t)v17, v0);
  v22 = &v2[*(int *)(v13 + 48)];
  v18((uint64_t)v2, (uint64_t)v19, v0);
  v18((uint64_t)v22, (uint64_t)v14, v0);
  v23 = *(_QWORD *)(v8 - 216);
  v24 = v20 + *(int *)(v23 + 36);
  *(_QWORD *)(v8 - 272) = v18;
  v18(v24, (uint64_t)v22, v0);
  v21((uint64_t)v2, v0);
  v25 = *(_QWORD *)(v8 - 256);
  v26 = *(_QWORD *)(v8 - 264);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 32))(v26, v20, v23);
  v27 = *(_QWORD *)(*(_QWORD *)(v8 - 304) + 32);
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v8 - 112) = v27;
  *(_QWORD *)(v8 - 104) = AssociatedConformanceWitness;
  MEMORY[0x186DA9D64](MEMORY[0x1E0DEB8C0], v23, v8 - 112);
  v29 = *(_QWORD *)(v8 - 128);
  dispatch thunk of RangeExpression.relative<A>(to:)();
  v30 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
  *(_QWORD *)(v8 - 224) = v30;
  v30(v26, v23);
  v31 = *(char **)(v8 - 136);
  v16(v31, v29, v0);
  LOBYTE(v27) = dispatch thunk of static BinaryInteger.isSigned.getter();
  v32 = *(char **)(v8 - 288);
  v16(v32, (uint64_t)v31, v0);
  v33 = v21;
  if ((v27 & 1) == 0)
  {
    v21((uint64_t)v32, v0);
    v35 = *(char **)(v8 - 184);
    v36 = *(_QWORD *)(v8 - 136);
    v37 = *(void (**)(uint64_t, uint64_t))(v8 - 208);
    goto LABEL_8;
  }
  v34 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v21((uint64_t)v32, v0);
  v35 = *(char **)(v8 - 184);
  v36 = *(_QWORD *)(v8 - 136);
  v37 = *(void (**)(uint64_t, uint64_t))(v8 - 208);
  if (v34 <= 64)
    goto LABEL_8;
  v1 = *(char **)(v8 - 336);
  v16(v1, *(_QWORD *)(v8 - 136), v0);
  *(_QWORD *)(v8 - 96) = 0x8000000000000000;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0)
  {
    v75 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v76 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v75 & 1) == 0)
    {
      if (v76 >= 64)
      {
        v33(*(_QWORD *)(v8 - 336), v0);
        goto LABEL_8;
      }
      v1 = *(char **)(v8 - 336);
      goto LABEL_53;
    }
    if (v76 <= 64)
    {
      v90 = *(_QWORD *)(v8 - 368);
      v91 = swift_getAssociatedConformanceWitness();
      MEMORY[0x186DA5E34](&unk_18206D478, 256, v90, v91);
      v92 = *(_QWORD *)(v8 - 320);
      dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
      v93 = *(_QWORD *)(v8 - 336);
      *(_DWORD *)(v8 - 232) = dispatch thunk of static Comparable.< infix(_:_:)();
      v94 = v92;
      v1 = (char *)v33;
      v33(v94, v0);
      v10 = *(_QWORD *)(v8 - 384);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 - 272))(v10, v93, v0);
      if ((*(_DWORD *)(v8 - 232) & 1) != 0)
      {
LABEL_71:
        ((void (*)(uint64_t, uint64_t))v1)(v10, v0);
        __break(1u);
        goto LABEL_72;
      }
      *(_QWORD *)(v8 - 232) = *(_QWORD *)(v8 - 96);
      v95 = dispatch thunk of BinaryInteger._lowWord.getter();
      v33(v10, v0);
      v89 = v95 < *(_QWORD *)(v8 - 232);
      v37 = *(void (**)(uint64_t, uint64_t))(v8 - 208);
      if (v89)
        goto LABEL_54;
      goto LABEL_8;
    }
LABEL_44:
    v77 = *(_QWORD *)(v8 - 320);
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v78 = dispatch thunk of static Comparable.< infix(_:_:)();
    v79 = v77;
    v1 = (char *)v33;
    v33(v79, v0);
    v33(*(_QWORD *)(v8 - 336), v0);
    if ((v78 & 1) != 0)
      goto LABEL_54;
    goto LABEL_8;
  }
  if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64)
    goto LABEL_44;
LABEL_53:
  v84 = dispatch thunk of BinaryInteger._lowWord.getter();
  v33((uint64_t)v1, v0);
  if (v84 < *(_QWORD *)(v8 - 96))
  {
LABEL_54:
    __break(1u);
LABEL_55:
    v85 = *(_QWORD *)(v8 - 320);
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    *(_DWORD *)(v8 - 136) = dispatch thunk of static Comparable.< infix(_:_:)();
    v86 = v85;
    v56 = *(char **)(v8 - 200);
    v87 = v37;
    v37 = v33;
    v33(v86, v0);
    v33((uint64_t)v87, v0);
    if ((*(_DWORD *)(v8 - 136) & 1) == 0)
      goto LABEL_27;
    goto LABEL_67;
  }
LABEL_8:
  v38 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v16((char *)v37, v36, v0);
  if (v38 < 65)
  {
    v39 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v40 = v37;
    v41 = (char *)v33;
    v33((uint64_t)v40, v0);
    if (v39 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
      goto LABEL_20;
  }
  else
  {
    v33((uint64_t)v37, v0);
  }
  v41 = *(char **)(v8 - 328);
  v16(v41, v36, v0);
  *(_QWORD *)(v8 - 96) = 0x7FFFFFFFFFFFFFFFLL;
  v42 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v43 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v42 & 1) == 0)
  {
    if (v43 > 63)
      goto LABEL_18;
LABEL_16:
    v49 = dispatch thunk of BinaryInteger._lowWord.getter();
    v50 = v41;
    v41 = (char *)v33;
    v33((uint64_t)v50, v0);
    if (*(_QWORD *)(v8 - 96) < v49)
      goto LABEL_17;
    goto LABEL_20;
  }
  if (v43 <= 64)
    goto LABEL_16;
  v44 = *(_QWORD *)(v8 - 320);
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  v45 = dispatch thunk of static Comparable.< infix(_:_:)();
  v46 = v44;
  v47 = v41;
  v41 = (char *)v33;
  v33(v46, v0);
  v48 = v47;
  while (1)
  {
    v33((uint64_t)v48, v0);
    if ((v45 & 1) == 0)
      break;
LABEL_17:
    __break(1u);
LABEL_18:
    *(_QWORD *)(v8 - 120) = 0x7FFFFFFFFFFFFFFFLL;
    v51 = *(char **)(v8 - 320);
    (*(void (**)(char *, char *, uint64_t))(v8 - 272))(v51, v41, v0);
    v52 = *(_QWORD *)(v8 - 344);
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v45 = dispatch thunk of static Comparable.< infix(_:_:)();
    v41 = (char *)v33;
    v33(v52, v0);
    v48 = v51;
    v36 = *(_QWORD *)(v8 - 136);
  }
LABEL_20:
  v1 = (char *)dispatch thunk of BinaryInteger._lowWord.getter();
  ((void (*)(uint64_t, uint64_t))v41)(v36, v0);
  v16(v35, *(_QWORD *)(v8 - 128) + *(int *)(v23 + 36), v0);
  v53 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v54 = *(char **)(v8 - 296);
  v16(v54, (uint64_t)v35, v0);
  if ((v53 & 1) == 0)
  {
    ((void (*)(char *, uint64_t))v41)(v54, v0);
    v56 = *(char **)(v8 - 200);
    goto LABEL_27;
  }
  v55 = dispatch thunk of BinaryInteger.bitWidth.getter();
  ((void (*)(char *, uint64_t))v41)(v54, v0);
  v89 = v55 <= 64;
  v56 = *(char **)(v8 - 200);
  if (v89)
    goto LABEL_27;
  v37 = *(void (**)(uint64_t, uint64_t))(v8 - 352);
  v16((char *)v37, (uint64_t)v35, v0);
  *(_QWORD *)(v8 - 96) = 0x8000000000000000;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64)
      goto LABEL_55;
    v57 = dispatch thunk of BinaryInteger._lowWord.getter();
    v33((uint64_t)v37, v0);
    if (v57 >= *(_QWORD *)(v8 - 96))
      goto LABEL_27;
    goto LABEL_67;
  }
  v80 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v81 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v80 & 1) != 0)
  {
    if (v81 > 64)
    {
      v82 = *(_QWORD *)(v8 - 320);
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      v83 = dispatch thunk of static Comparable.< infix(_:_:)();
      v33(v82, v0);
      v33((uint64_t)v37, v0);
      v35 = *(char **)(v8 - 184);
      if ((v83 & 1) == 0)
        goto LABEL_27;
      goto LABEL_67;
    }
    v96 = *(_QWORD *)(v8 - 368);
    v97 = swift_getAssociatedConformanceWitness();
    MEMORY[0x186DA5E34](&unk_18206D478, 256, v96, v97);
    v98 = *(_QWORD *)(v8 - 320);
    dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
    v99 = *(_QWORD *)(v8 - 352);
    *(_DWORD *)(v8 - 208) = dispatch thunk of static Comparable.< infix(_:_:)();
    *(_QWORD *)(v8 - 136) = v33;
    v33(v98, v0);
    v10 = *(_QWORD *)(v8 - 392);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 - 272))(v10, v99, v0);
    if ((*(_DWORD *)(v8 - 208) & 1) != 0)
    {
LABEL_72:
      (*(void (**)(uint64_t, uint64_t))(v8 - 136))(v10, v0);
      __break(1u);
      JUMPOUT(0x181E594F8);
    }
    v37 = *(void (**)(uint64_t, uint64_t))(v8 - 96);
    v100 = dispatch thunk of BinaryInteger._lowWord.getter();
    (*(void (**)(uint64_t, uint64_t))(v8 - 136))(v10, v0);
    v89 = v100 < (uint64_t)v37;
  }
  else
  {
    if (v81 >= 64)
    {
LABEL_68:
      v33((uint64_t)v37, v0);
      v35 = *(char **)(v8 - 184);
      goto LABEL_27;
    }
    v88 = dispatch thunk of BinaryInteger._lowWord.getter();
    v33((uint64_t)v37, v0);
    v89 = v88 < *(_QWORD *)(v8 - 96);
  }
  v35 = *(char **)(v8 - 184);
  if (v89)
  {
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
LABEL_27:
  v58 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v16(v56, (uint64_t)v35, v0);
  if (v58 < 65)
  {
    v66 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v67 = v56;
    v61 = v33;
    v33((uint64_t)v67, v0);
    if (v66 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
      goto LABEL_40;
  }
  else
  {
    v33((uint64_t)v56, v0);
  }
  v16(*(char **)(v8 - 192), (uint64_t)v35, v0);
  *(_QWORD *)(v8 - 96) = 0x7FFFFFFFFFFFFFFFLL;
  v59 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v60 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v59 & 1) == 0)
  {
    v61 = v33;
    if (v60 > 63)
      goto LABEL_38;
LABEL_36:
    v68 = *(_QWORD *)(v8 - 192);
    v69 = dispatch thunk of BinaryInteger._lowWord.getter();
    v61(v68, v0);
    v35 = *(char **)(v8 - 184);
    if (*(_QWORD *)(v8 - 96) < v69)
      goto LABEL_37;
    goto LABEL_40;
  }
  v61 = v33;
  if (v60 <= 64)
    goto LABEL_36;
  v62 = *(_QWORD *)(v8 - 320);
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  v63 = *(_QWORD *)(v8 - 192);
  v64 = dispatch thunk of static Comparable.< infix(_:_:)();
  v33(v62, v0);
  for (i = v63; ; i = v70)
  {
    v61(i, v0);
    v35 = *(char **)(v8 - 184);
    if ((v64 & 1) == 0)
      break;
LABEL_37:
    __break(1u);
LABEL_38:
    *(_QWORD *)(v8 - 120) = 0x7FFFFFFFFFFFFFFFLL;
    v70 = *(_QWORD *)(v8 - 320);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v8 - 272))(v70, *(_QWORD *)(v8 - 192), v0);
    v71 = *(_QWORD *)(v8 - 344);
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v64 = dispatch thunk of static Comparable.< infix(_:_:)();
    v61(v71, v0);
  }
LABEL_40:
  v10 = dispatch thunk of BinaryInteger._lowWord.getter();
  v61((uint64_t)v35, v0);
  if (v10 < (uint64_t)v1)
  {
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  Data._Representation.subscript.getter((uint64_t)v1, v10, *(_QWORD *)(v8 - 144), *(_QWORD *)(v8 - 312));
  v73 = v72;
  (*(void (**)(_QWORD, uint64_t))(v8 - 224))(*(_QWORD *)(v8 - 128), v23);
  v61(*(_QWORD *)(v8 - 152), v0);
  v61(*(_QWORD *)(v8 - 160), v0);
  return v73;
}

void (*Data.subscript.modify(uint64_t a1, uint64_t a2))()
{
  uint64_t *v2;
  char v4;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v2;
  Data.subscript.getter(a2, *v2, v2[1]);
  *(_BYTE *)(a1 + 16) = v4;
  return Data._Representation.subscript.modify;
}

uint64_t key path setter for Data.subscript(_:) : Data(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  outlined copy of Data._Representation(*a1, v2);
  specialized Data._Representation.withUnsafeBytes<A>(_:)(v1, v2);
  return outlined consume of Data._Representation(v1, v2);
}

uint64_t Data.subscript.setter(uint64_t a1, unint64_t a2)
{
  specialized Data._Representation.withUnsafeBytes<A>(_:)(a1, a2);
  return outlined consume of Data._Representation(a1, a2);
}

void (*Data.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t *v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[3] = a3;
  v7[4] = v3;
  v7[2] = a2;
  Data._Representation.subscript.getter(a2, a3, *v3, v3[1]);
  *v7 = v8;
  v7[1] = v9;
  return Data.subscript.modify;
}

void Data.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = *a1;
  v3 = **a1;
  v4 = (*a1)[1];
  if ((a2 & 1) != 0)
  {
    outlined copy of Data._Representation(v3, v4);
    specialized Data._Representation.withUnsafeBytes<A>(_:)(v3, v4);
    outlined consume of Data._Representation(v3, v4);
    v5 = *v2;
    v6 = v2[1];
  }
  else
  {
    specialized Data._Representation.withUnsafeBytes<A>(_:)(v3, v4);
    v5 = v3;
    v6 = v4;
  }
  outlined consume of Data._Representation(v5, v6);
  free(v2);
}

{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v2 = *a1;
  v3 = **a1;
  v4 = (*a1)[1];
  v6 = (*a1)[6];
  v5 = (void *)(*a1)[7];
  v7 = (*a1)[4];
  v8 = (*a1)[2];
  v9 = (*a1)[3];
  if ((a2 & 1) != 0)
  {
    outlined copy of Data._Representation(v3, v4);
    specialized Data.subscript.setter(v3, v4, (uint64_t)v5, v8, v9, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v5, v8);
    outlined consume of Data._Representation(v3, v4);
    v10 = *v2;
    v11 = v2[1];
  }
  else
  {
    specialized Data.subscript.setter(v3, v4, (uint64_t)v5, v8, v9, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v5, v8);
    v10 = v3;
    v11 = v4;
  }
  outlined consume of Data._Representation(v10, v11);
  free(v5);
  free(v2);
}

uint64_t key path setter for Data.subscript<A>(_:) : <A>DataA(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v5 = *(_QWORD *)(a4 + a3 - 24);
  v6 = *(_QWORD *)(a4 + a3 - 16);
  v7 = *(_QWORD *)(a4 + a3 - 8);
  v8 = *a1;
  v9 = a1[1];
  outlined copy of Data._Representation(*a1, v9);
  specialized Data.subscript.setter(v8, v9, a3, v5, v6, v7);
  return outlined consume of Data._Representation(v8, v9);
}

uint64_t Data.subscript.setter(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  specialized Data.subscript.setter(a1, a2, a3, a4, a5, a6);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(a3, a4);
  return outlined consume of Data._Representation(a1, a2);
}

void (*Data.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t **a1, char a2)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v11 = malloc(0x40uLL);
  *a1 = v11;
  v11[4] = a5;
  v11[5] = v5;
  v11[2] = a3;
  v11[3] = a4;
  v12 = *(_QWORD *)(a3 - 8);
  v11[6] = v12;
  v11[7] = malloc(*(_QWORD *)(v12 + 64));
  (*(void (**)(void))(v12 + 16))();
  Data.subscript.getter(a2, *(_QWORD *)v5, *(_QWORD *)(v5 + 8), a3, a4, a5);
  *v11 = v13;
  v11[1] = v14;
  return Data.subscript.modify;
}

Swift::Int __swiftcall Data.index(before:)(Swift::Int before)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFSUB__(before, 1);
  result = before - 1;
  if (v1)
    __break(1u);
  return result;
}

Swift::Int __swiftcall Data.index(after:)(Swift::Int after)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFADD__(after, 1);
  result = after + 1;
  if (v1)
    __break(1u);
  return result;
}

uint64_t Data.indices.getter(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(_QWORD, _QWORD))((char *)&loc_181E599B4 + dword_181E599F4[a2 >> 62]))(0, 0);
}

uint64_t sub_181E599C8()
{
  return 0;
}

uint64_t sub_181E599D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = (int)a1;
  if (a1 >> 32 < (int)a1)
  {
    __break(1u);
    JUMPOUT(0x181E599F4);
  }
  return result;
}

uint64_t Data.Iterator._data.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  outlined copy of Data._Representation(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t Data.Iterator._buffer.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t Data.Iterator._buffer.setter(uint64_t result, char a2, char a3, char a4, char a5, char a6, char a7, char a8, uint64_t a9, __int128 a10)
{
  uint64_t v10;

  *(_BYTE *)(v10 + 16) = result;
  *(_BYTE *)(v10 + 17) = a2;
  *(_BYTE *)(v10 + 18) = a3;
  *(_BYTE *)(v10 + 19) = a4;
  *(_BYTE *)(v10 + 20) = a5;
  *(_BYTE *)(v10 + 21) = a6;
  *(_BYTE *)(v10 + 22) = a7;
  *(_BYTE *)(v10 + 23) = a8;
  *(_QWORD *)(v10 + 24) = a9;
  *(_OWORD *)(v10 + 32) = a10;
  return result;
}

uint64_t (*Data.Iterator._buffer.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Data.Iterator._idx.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t Data.Iterator._idx.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = result;
  return result;
}

uint64_t (*Data.Iterator._idx.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Data.Iterator._endIdx.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 56);
}

void Data.range(of:options:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, unint64_t a8)
{
  unint64_t v8;

  v8 = a8 >> 62;
  if ((a6 & 1) == 0)
    __asm { BR              X11 }
  __asm { BR              X10 }
}

uint64_t sub_181E59B80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, __int16 a12, __int16 a13, char a14, char a15, char a16, char a17, char a18, char a19, __int16 a20,char a21,char a22,char a23,char a24)
{
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  a13 = v24;
  a14 = BYTE2(v24);
  a15 = BYTE3(v24);
  a16 = BYTE4(v24);
  a17 = BYTE5(v24);
  a18 = BYTE6(v24);
  a19 = HIBYTE(v24);
  a20 = v26;
  a21 = BYTE2(v26);
  a22 = BYTE3(v26);
  a23 = BYTE4(v26);
  a24 = BYTE5(v26);
  v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D50]), sel_initWithBytesNoCopy_length_freeWhenDone_, &a13, BYTE6(v26), 0);
  return ((uint64_t (*)(id, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_181E59C58
                                                                         + *((int *)qword_181E5A6E8 + (v25 >> 62))))(v27, v28, v29, v30, v31);
}

uint64_t sub_181E59C68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v10;
  __int16 v11;
  char v12;
  char v13;
  char v14;
  char v15;

  v10 = v3;
  v11 = v4;
  v12 = BYTE2(v4);
  v13 = BYTE3(v4);
  v14 = BYTE4(v4);
  v15 = BYTE5(v4);
  v7 = objc_msgSend(objc_allocWithZone(*(Class *)(v0 + 3408)), sel_initWithBytes_length_, &v10, BYTE6(v4));
  v8 = objc_msgSend(v5, sel_rangeOfData_options_range_, v7, v6, v1, v2);

  if (v8 != (id)0x7FFFFFFFFFFFFFFFLL)
    __asm { BR              X12 }
  return 0;
}

Swift::Int Data.hashValue.getter(uint64_t a1, uint64_t a2)
{
  _BYTE v5[72];

  Hasher.init(_seed:)();
  Data.hash(into:)((uint64_t)v5, a1, a2);
  return Hasher._finalize()();
}

void protocol witness for static Equatable.== infix(_:_:) in conformance Data(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_181E5A7A0()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_181E5A7D4 + dword_181E5A894[v0 >> 62]))();
}

uint64_t sub_181E5A7E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;

  if (a1 == BYTE6(v4))
  {
    if (a1 <= 0)
    {
      v5 = 1;
    }
    else
    {
      outlined copy of Data._Representation(v3, v4);
      specialized Data._Representation.withUnsafeBytes<A>(_:)(v1, v2);
    }
  }
  else
  {
    v5 = 0;
  }
  return v5 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Data()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  Data.hash(into:)((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Data(uint64_t a1)
{
  uint64_t *v1;

  Data.hash(into:)(a1, *v1, v1[1]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Data()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  Data.hash(into:)((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

void protocol witness for MutableCollection.subscript.setter in conformance Data()
{
  Data._Representation.subscript.setter();
}

void (*protocol witness for MutableCollection.subscript.modify in conformance Data(uint64_t a1, uint64_t *a2))()
{
  uint64_t *v2;
  uint64_t v4;
  char v5;

  v4 = *a2;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v4;
  Data.subscript.getter(v4, *v2, v2[1]);
  *(_BYTE *)(a1 + 16) = v5;
  return protocol witness for MutableCollection.subscript.modify in conformance Data;
}

void protocol witness for MutableCollection.subscript.modify in conformance Data()
{
  Data._Representation.subscript.setter();
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance Data(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  specialized Data._Representation.withUnsafeBytes<A>(_:)(*a1, v2);
  return outlined consume of Data._Representation(v1, v2);
}

void (*protocol witness for MutableCollection.subscript.modify in conformance Data(_QWORD *a1, uint64_t *a2))(uint64_t **a1, char a2)
{
  uint64_t *v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = malloc(0x28uLL);
  *a1 = v5;
  v6 = *a2;
  v7 = a2[1];
  v5[2] = v2;
  v5[3] = v6;
  v5[4] = v7;
  Data._Representation.subscript.getter(v6, v7, *v2, v2[1]);
  *v5 = v8;
  v5[1] = v9;
  return protocol witness for MutableCollection.subscript.modify in conformance Data;
}

void protocol witness for MutableCollection.subscript.modify in conformance Data(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = *a1;
  v3 = **a1;
  v4 = (*a1)[1];
  if ((a2 & 1) != 0)
  {
    outlined copy of Data._Representation(v3, v4);
    specialized Data._Representation.withUnsafeBytes<A>(_:)(v3, v4);
    outlined consume of Data._Representation(v3, v4);
    v5 = *v2;
    v6 = v2[1];
  }
  else
  {
    specialized Data._Representation.withUnsafeBytes<A>(_:)(v3, v4);
    v5 = v3;
    v6 = v4;
  }
  outlined consume of Data._Representation(v5, v6);
  free(v2);
}

void protocol witness for MutableCollection.partition(by:) in conformance Data(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  specialized MutableCollection<>._partitionImpl(by:)();
  if (!v1)
    *a1 = v3;
}

uint64_t protocol witness for MutableCollection.swapAt(_:_:) in conformance Data(uint64_t *a1, uint64_t *a2)
{
  return specialized MutableCollection.swapAt(_:_:)(*a1, *a2);
}

double protocol witness for RangeReplaceableCollection.init() in conformance Data@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = xmmword_18206AAC0;
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.replaceSubrange<A>(_:with:) in conformance Data(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Data.replaceSubrange<A>(_:with:)(*a1, a1[1], a2, a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a2, a3);
}

void protocol witness for RangeReplaceableCollection.init(repeating:count:) in conformance Data(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  specialized Data.init(repeating:count:)(*a1, a2);
  *a3 = v4;
  a3[1] = v5;
}

uint64_t protocol witness for RangeReplaceableCollection.init<A>(_:) in conformance Data@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;
  uint64_t v6;

  result = Data.init<A>(_:)(a1, a2, a3);
  *a4 = result;
  a4[1] = v6;
  return result;
}

void protocol witness for RangeReplaceableCollection.append(_:) in conformance Data()
{
  specialized RangeReplaceableCollection.append(_:)();
}

uint64_t protocol witness for RangeReplaceableCollection.append<A>(contentsOf:) in conformance Data(uint64_t a1, uint64_t a2)
{
  Data.append<A>(contentsOf:)(a1, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
}

uint64_t protocol witness for RangeReplaceableCollection.insert(_:at:) in conformance Data(char *a1)
{
  char v1;
  _QWORD v3[3];
  uint64_t v4;
  _UNKNOWN **v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v1 = *a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionOfOne<UInt8>);
  v5 = &protocol witness table for <A> CollectionOfOne<A>;
  LOBYTE(v3[0]) = v1;
  __swift_project_boxed_opaque_existential_1(v3, v4);
  Data._Representation.replaceSubrange(_:with:count:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t protocol witness for RangeReplaceableCollection.insert<A>(contentsOf:at:) in conformance Data(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  specialized RangeReplaceableCollection.insert<A>(contentsOf:at:)(a1, *a2, a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
}

void protocol witness for RangeReplaceableCollection.remove(at:) in conformance Data(_BYTE *a1@<X8>)
{
  char v2;

  specialized RangeReplaceableCollection.remove(at:)();
  *a1 = v2;
}

void protocol witness for RangeReplaceableCollection.removeSubrange(_:) in conformance Data()
{
  Data._Representation.replaceSubrange(_:with:count:)();
}

void protocol witness for RangeReplaceableCollection._customRemoveLast() in conformance Data(_BYTE *a1@<X8>)
{
  char v2;
  char v3;

  specialized RangeReplaceableCollection<>._customRemoveLast()();
  *a1 = v2;
  a1[1] = v3 & 1;
}

void specialized RangeReplaceableCollection<>._customRemoveLast()()
{
  uint64_t *v0;
  uint64_t v1;
  __int16 v2;

  v1 = v0[1];
  specialized BidirectionalCollection.last.getter(*v0, v1);
  if ((v2 & 0x100) == 0)
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x181E5AE70);
}

void specialized RangeReplaceableCollection<>._customRemoveLast(_:)()
{
  __asm { BR              X9 }
}

void protocol witness for RangeReplaceableCollection.removeFirst() in conformance Data(_BYTE *a1@<X8>)
{
  char v2;

  specialized RangeReplaceableCollection<>.removeFirst()();
  *a1 = v2;
}

void specialized RangeReplaceableCollection<>.removeFirst()()
{
  __asm { BR              X9 }
}

uint64_t sub_181E5B350()
{
  uint64_t v0;
  _QWORD *v1;
  unint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (!BYTE6(v2))
    goto LABEL_13;
  specialized Collection.first.getter(v0, v2);
  if ((v4 & 0x100) != 0)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v5 = v4;
  if (!v3)
  {
    v7 = BYTE6(v2);
    v6 = 1;
    goto LABEL_9;
  }
  if (v3 == 1)
  {
    v6 = (int)v0 + 1;
    v7 = v0 >> 32;
    goto LABEL_9;
  }
  v8 = *(_QWORD *)(v0 + 16);
  v6 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_12;
  }
  v7 = *(_QWORD *)(v0 + 24);
LABEL_9:
  if (v7 < v6)
  {
LABEL_14:
    __break(1u);
    JUMPOUT(0x181E5B414);
  }
  Data._Representation.subscript.getter(v6, v7, v0, v2);
  v10 = v9;
  v12 = v11;
  outlined consume of Data._Representation(v0, v2);
  *v1 = v10;
  v1[1] = v12;
  return v5;
}

uint64_t specialized RangeReplaceableCollection<>.removeFirst(_:)(uint64_t result)
{
  if (result)
  {
    if ((result & 0x8000000000000000) == 0)
      __asm { BR              X9 }
    __break(1u);
    JUMPOUT(0x181E5B534);
  }
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.removeAll(where:) in conformance Data(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  result = specialized MutableCollection._halfStablePartition(isSuffixElement:)(a1, a2);
  if (!v3)
    __asm { BR              X12 }
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance Data@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  char v12;

  v7 = *a1;
  v8 = *v4;
  v9 = v4[1];
  v10 = specialized RandomAccessCollection<>.distance(from:to:)(*a1, *a3, *v4, v9);
  if (a2 < 1)
  {
    if (v10 <= 0 && v10 > a2)
      goto LABEL_4;
LABEL_10:
    result = specialized RandomAccessCollection<>.index(_:offsetBy:)(v7, a2, v8, v9);
    v12 = 0;
    goto LABEL_11;
  }
  if (v10 < 0 || v10 >= (unint64_t)a2)
    goto LABEL_10;
LABEL_4:
  result = 0;
  v12 = 1;
LABEL_11:
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v12;
  return result;
}

uint64_t protocol witness for Collection.endIndex.getter in conformance Data()
{
  uint64_t v0;

  return ((uint64_t (*)(void))((char *)sub_181E5B6A4 + 4 * byte_182165800[*(_QWORD *)(v0 + 8) >> 62]))();
}

void sub_181E5B6A4(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = BYTE6(v1);
}

void sub_181E5B6B0(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 24);
}

void sub_181E5B6BC(uint64_t *a1@<X8>)
{
  uint64_t v1;

  *a1 = v1 >> 32;
}

void protocol witness for Collection.subscript.read in conformance Data()
{
  __asm { BR              X11 }
}

uint64_t protocol witness for Collection.indices.getter in conformance Data()
{
  uint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_181E5B83C + dword_181E5B884[*(_QWORD *)(v0 + 8) >> 62]))();
}

void sub_181E5B850(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0;
  a1[1] = BYTE6(v1);
}

void sub_181E5B860(_QWORD *a1@<X8>)
{
  uint64_t v1;

  if (v1 >> 32 < (int)v1)
  {
    __break(1u);
    JUMPOUT(0x181E5B884);
  }
  *a1 = (int)v1;
  a1[1] = v1 >> 32;
}

uint64_t protocol witness for Collection.isEmpty.getter in conformance Data()
{
  uint64_t v0;

  return ((uint64_t (*)(void))((char *)sub_181E5B8BC + 4 * byte_182165804[*(_QWORD *)(v0 + 8) >> 62]))();
}

BOOL sub_181E5B8BC()
{
  uint64_t v0;

  return BYTE6(v0) == 0;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance Data(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *v3;
  v5 = v3[1];
  Data._copyContents(initializing:)(a1, a2, a3, v4, v5);
  v7 = v6;
  outlined consume of Data._Representation(v4, v5);
  return v7;
}

void Data.customMirror.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1E0C80A78](v3);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v4);
  __asm { BR              X9 }
}

uint64_t sub_181E5BA04()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v8 - 192) = v0;
  *(_QWORD *)(v8 - 96) = MEMORY[0x1E0DEB418];
  *(_QWORD *)(v8 - 120) = BYTE6(v2);
  *(_OWORD *)(v8 - 176) = xmmword_182165E10;
  outlined init with take of Any((_OWORD *)(v8 - 120), (_OWORD *)(v8 - 160));
  v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v11 = v9[2];
  v10 = v9[3];
  if (v11 >= v10 >> 1)
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v9);
  v9[2] = v11 + 1;
  v12 = &v9[6 * v11];
  v13 = *(_OWORD *)(v8 - 176);
  v14 = *(_OWORD *)(v8 - 144);
  v12[3] = *(_OWORD *)(v8 - 160);
  v12[4] = v14;
  v12[2] = v13;
  *(_QWORD *)(v8 - 88) = v9;
  specialized Data._Representation.withUnsafeBytes<A>(_:)(v3, v2);
  if (BYTE6(v2) < 0x40uLL)
    __asm { BR              X11 }
  v15 = *(_QWORD *)(v8 - 88);
  *(_QWORD *)(v8 - 176) = v3;
  *(_QWORD *)(v8 - 168) = v2;
  *(_QWORD *)(v8 - 120) = v15;
  v16 = *MEMORY[0x1E0DEDFB8];
  v17 = type metadata accessor for Mirror.DisplayStyle();
  v18 = *(_QWORD *)(v17 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 104))(v4, v16, v17);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v18 + 56))(v4, 0, 1, v17);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(v1, *MEMORY[0x1E0DEDFE8], v5);
  outlined copy of Data._Representation(v3, v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [(label: String?, value: Any)] and conformance [A], &demangling cache variable for type metadata for [(label: String?, value: Any)], MEMORY[0x1E0DEAF50]);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t closure #1 in Data.customMirror.getter(uint64_t result, uint64_t a2, uint64_t *a3)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  __int128 v8;
  _OWORD v9[2];
  __int128 v10;
  uint64_t v11;

  if (result)
  {
    v11 = MEMORY[0x1E0DEABD0];
    *(_QWORD *)&v10 = result;
    outlined init with take of Any(&v10, v9);
    v4 = (_QWORD *)*a3;
    result = swift_isUniquelyReferenced_nonNull_native();
    *a3 = (uint64_t)v4;
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
      v4 = (_QWORD *)result;
      *a3 = result;
    }
    v6 = v4[2];
    v5 = v4[3];
    if (v6 >= v5 >> 1)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v5 > 1), v6 + 1, 1, v4);
      v4 = (_QWORD *)result;
      *a3 = result;
    }
    v4[2] = v6 + 1;
    v7 = &v4[6 * v6];
    v8 = v9[1];
    v7[3] = v9[0];
    v7[4] = v8;
    v7[2] = xmmword_182165E30;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void protocol witness for CustomReflectable.customMirror.getter in conformance Data()
{
  uint64_t *v0;

  Data.customMirror.getter(*v0, v0[1]);
}

_QWORD *protocol witness for Decodable.init(from:) in conformance Data@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = specialized Data.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Data(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[40];

  v2 = *v1;
  v3 = v1[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  specialized Data._Representation.withUnsafeBytes<A>(_:)(v2, v3);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
}

id @nonobjc NSData.init(contentsOf:options:)(void **a1, uint64_t a2)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v9[2];

  v3 = v2;
  v9[1] = *(id *)MEMORY[0x1E0C80C00];
  v4 = *a1;
  v9[0] = 0;
  v5 = objc_msgSend(v3, sel_initWithContentsOfURL_options_error_, v4, a2, v9);
  if (v5)
  {
    v6 = v9[0];
  }
  else
  {
    if (v9[0])
    {
      v9[0];
    }
    else
    {
      if (one-time initialization token for _nilObjCError != -1)
        swift_once();
      v7 = (id)_nilObjCError;
    }
    swift_willThrow();
  }

  swift_release();
  swift_release();
  return v5;
}

uint64_t specialized closure #1 in UnsafeMutableBufferPointer.initialize<A>(fromContentsOf:)(char *__src, int64_t __n, char *__dst, int64_t a4)
{
  int64_t v4;
  uint64_t result;

  if (!__src)
    return 0;
  v4 = __n;
  if (!__n)
    return v4;
  if (a4 < __n)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (!__dst)
    return v4;
  if ((__n & 0x8000000000000000) == 0 && (&__dst[__n] <= __src || &__src[__n] <= __dst))
  {
    memcpy(__dst, __src, __n);
    return v4;
  }
LABEL_12:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized MutableCollection<>._partitionImpl(by:)()
{
  __asm { BR              X9 }
}

{
  __asm { BR              X10 }
}

uint64_t sub_181E5C14C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_181E5C184 + 16))(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_181E5C194()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_QWORD *);
  char v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _QWORD v12[14];

  if (v1)
  {
    __break(1u);
    JUMPOUT(0x181E5C350);
  }
  v12[0] = v5;
  v6 = v3(v12);
  if (!v0)
  {
    if ((v6 & 1) != 0)
    {
      if (v2 - 1 <= 0)
        return v1;
      while (1)
      {
        v7 = v2 - 1;
        if (v4)
        {
          if (v4 == 1)
          {
            if (v7 > 1)
              goto LABEL_25;
            v8 = v11;
            if (v2 == 1)
              v8 = v5;
          }
          else
          {
            if ((v7 & 0x8000000000000000) != 0)
            {
              __break(1u);
LABEL_25:
              __break(1u);
LABEL_26:
              __break(1u);
LABEL_27:
              __break(1u);
              JUMPOUT(0x181E5C348);
            }
            if (v7 >= *(_QWORD *)(v5 + 16))
              goto LABEL_27;
            v8 = *(_QWORD *)(v5 + 24 + 8 * v2);
          }
        }
        else
        {
          v8 = v5;
          if (v2 != 1)
            goto LABEL_26;
        }
        v12[0] = v8;
        if ((v3(v12) & 1) == 0)
          break;
        v9 = v2 - 2;
        --v2;
        if (v9 <= 0)
          return v1;
      }
      if (v2 == 1)
        return 1;
      IndexPath.Storage.subscript.getter(0, v5, v11, v4);
      IndexPath.Storage.subscript.getter(v7, v5, v11, v4);
      IndexPath.Storage.subscript.setter();
      IndexPath.Storage.subscript.setter();
      --v2;
    }
    v1 = 1;
    if (v2 > 1)
      JUMPOUT(0x181E5C178);
  }
  return v1;
}

void sub_181E5C354()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._object = (void *)0x8000000182306840;
  v1._countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  JUMPOUT(0x181E5C40CLL);
}

uint64_t sub_181E5C490()
{
  uint64_t v0;
  unint64_t v2;

  outlined consume of Data._Representation(v0, v2);
  outlined consume of Data._Representation(v0, v2);
  if (BYTE6(v2))
    __asm { BR              X8 }
  return 0;
}

uint64_t specialized MutableCollection._halfStablePartition(isSuffixElement:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v13;
  char v14;

  v5 = v2;
  v9 = *v2;
  v8 = v2[1];
  outlined copy of Data._Representation(v9, v8);
  specialized Collection.firstIndex(where:)(a1, a2, v9, v8);
  if (!v3)
  {
    v13 = v10;
    v14 = v11;
    outlined consume of Data._Representation(v9, v8);
    if ((v14 & 1) == 0)
    {
      if (!__OFADD__(v13, 1))
        __asm { BR              X8 }
      __break(1u);
      JUMPOUT(0x181E5C958);
    }
    __asm { BR              X10 }
  }
  outlined consume of Data._Representation(v9, v8);
  return v4;
}

unint64_t specialized Data.InlineSlice.init(_:range:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v8 = a1;
  v9 = a2;
  v10 = BYTE2(a2);
  v11 = BYTE3(a2);
  v6 = BYTE6(a2);
  v12 = BYTE4(a2);
  v13 = BYTE5(a2);
  type metadata accessor for __DataStorage();
  swift_allocObject();
  __DataStorage.init(bytes:length:)((unint64_t)&v8, v6);
  if (a3 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (a3 < (uint64_t)0xFFFFFFFF80000000 || a4 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_8;
  if (a4 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
  }
  if ((int)a4 < (int)a3)
    goto LABEL_10;
  return a3 | ((unint64_t)a4 << 32);
}

uint64_t specialized Data.LargeSlice.init(_:)(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  if (a1)
    v3 = a2 - a1;
  else
    v3 = 0;
  type metadata accessor for __DataStorage();
  swift_allocObject();
  result = (uint64_t)__DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < 0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for Data.RangeReference();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = v3;
  }
  return result;
}

_QWORD *specialized Data.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return v3;
  }
  __swift_project_boxed_opaque_existential_1(v10, v11);
  v4 = dispatch thunk of UnkeyedDecodingContainer.count.getter();
  if ((v5 & 1) != 0)
  {
    v12 = xmmword_18206AAC0;
  }
  else
  {
    v6 = v4;
    *(_QWORD *)&v12 = specialized Data.init(count:)(v4);
    *((_QWORD *)&v12 + 1) = v7;
    if (v6 < 0)
      goto LABEL_16;
    if (v6)
    {
      v8 = 0;
      while (v6 != v8)
      {
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v10, v11);
        dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
        Data._Representation.subscript.setter();
        if (v6 == ++v8)
          goto LABEL_11;
      }
      __break(1u);
LABEL_16:
      __break(1u);
    }
  }
LABEL_11:
  __swift_project_boxed_opaque_existential_1(v10, v11);
  while ((dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter() & 1) == 0)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v10, v11);
    dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    Data._Representation.append(contentsOf:)();
    __swift_project_boxed_opaque_existential_1(v10, v11);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  v3 = (_QWORD *)v12;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v3;
}

uint64_t specialized Data.init(bytesNoCopy:count:deallocator:)(unint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v5;
  uint64_t v6;
  void (*v7)(unint64_t, uint64_t);
  _QWORD *v8;
  uint64_t v9;
  uint64_t (*v10)();

  v5 = *a3;
  if (*a3 >= 4)
  {
    v7 = (void (*)(unint64_t, uint64_t))*a3;
    v6 = a3[1];
    if (a2)
      goto LABEL_3;
  }
  else
  {
    v6 = 0;
    v7 = (void (*)(unint64_t, uint64_t))off_1E0F49B58[v5];
    if (a2)
    {
LABEL_3:
      type metadata accessor for __DataStorage();
      v8 = (_QWORD *)swift_allocObject();
      outlined copy of Data.Deallocator(v5);
      swift_retain();
      __DataStorage.init(bytes:length:copy:deallocator:offset:)(a1, a2, 0, v7, v6, 0);
      v9 = specialized Data._Representation.init(_:count:)(v8, a2);
      swift_release();
      goto LABEL_9;
    }
  }
  if (v5 >= 4)
    v10 = (uint64_t (*)())*a3;
  else
    v10 = off_1E0F49B58[v5];
  outlined copy of Data.Deallocator(*a3);
  outlined copy of Data.Deallocator(v5);
  ((void (*)(unint64_t, _QWORD))v10)(a1, 0);
  swift_release();
  swift_release();
  v9 = 0;
LABEL_9:
  outlined consume of Data.Deallocator(v5);
  return v9;
}

uint64_t specialized Data.InlineSlice.withUnsafeMutableBytes<A>(_:)(int *a1, uint64_t a2, unint64_t a3, unsigned __int8 a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int64_t v26;
  int64_t v27;
  char *v28;
  char v29;

  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    v10 = *a1;
    v9 = a1[1];
    if ((int)v9 < (int)v10)
    {
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
    v11 = *((_QWORD *)a1 + 1);
    v12 = *(_QWORD *)(v11 + 16);
    if (v12)
    {
      v13 = *(_QWORD *)(v11 + 40);
      v14 = __OFSUB__(v10, v13);
      v15 = v10 - v13;
      if (v14)
      {
LABEL_21:
        __break(1u);
        goto LABEL_22;
      }
      v16 = v12 + v15;
    }
    else
    {
      v16 = 0;
    }
    v17 = v9 - v10;
    type metadata accessor for __DataStorage();
    v18 = swift_allocObject();
    __DataStorage.init(bytes:length:copy:deallocator:offset:)(v16, v17, 1, 0, 0, v10);
    *((_QWORD *)a1 + 1) = v18;
    result = swift_release();
  }
  v19 = *a1;
  v20 = a1[1];
  if ((int)v20 < (int)v19)
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v21 = (_QWORD *)*((_QWORD *)a1 + 1);
  v22 = v21[2];
  if (!v22)
  {
LABEL_22:
    __break(1u);
    return result;
  }
  v23 = v21[5];
  v14 = __OFSUB__(v19, v23);
  v24 = v19 - v23;
  if (v14)
    goto LABEL_19;
  v25 = a4;
  v26 = v20 - v19;
  if (v21[3] >= v26)
    v27 = v26;
  else
    v27 = v21[3];
  v28 = (char *)(v22 + v24);
  swift_bridgeObjectRetain();
  specialized UnsafeMutableBufferPointer.initialize<A>(fromContentsOf:)(a2, a3, v28, v27);
  if (v25 == 2)
    v29 = _allASCII(_:)(v28, v27);
  else
    v29 = v25 & 1;
  swift_bridgeObjectRelease();
  return v29 & 1;
}

uint64_t specialized Data.LargeSlice.withUnsafeMutableBytes<A>(_:)(uint64_t *a1, uint64_t a2, unint64_t a3, unsigned __int8 a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  int v29;
  int64_t v30;
  int64_t v31;
  char *v32;
  char v33;

  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    v9 = a1[1];
    v11 = *(_QWORD *)(*a1 + 16);
    v10 = *(_QWORD *)(*a1 + 24);
    v12 = *(_QWORD *)(v9 + 16);
    if (v12)
    {
      v13 = *(_QWORD *)(v9 + 40);
      v14 = __OFSUB__(v11, v13);
      v15 = v11 - v13;
      if (v14)
      {
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        return result;
      }
      v16 = v12 + v15;
      v17 = v10 - v11;
      if (!__OFSUB__(v10, v11))
        goto LABEL_5;
    }
    else
    {
      v16 = 0;
      v17 = v10 - v11;
      if (!__OFSUB__(v10, v11))
      {
LABEL_5:
        type metadata accessor for __DataStorage();
        v18 = swift_allocObject();
        __DataStorage.init(bytes:length:copy:deallocator:offset:)(v16, v17, 1, 0, 0, v11);
        a1[1] = v18;
        swift_release();
        goto LABEL_6;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
LABEL_6:
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    v19 = *(_QWORD *)(*a1 + 16);
    v20 = *(_QWORD *)(*a1 + 24);
    type metadata accessor for Data.RangeReference();
    v21 = swift_allocObject();
    *(_QWORD *)(v21 + 16) = v19;
    *(_QWORD *)(v21 + 24) = v20;
    *a1 = v21;
    result = swift_release();
  }
  v22 = (_QWORD *)a1[1];
  v23 = v22[2];
  if (!v23)
    goto LABEL_24;
  v24 = *(_QWORD *)(*a1 + 16);
  v25 = v22[5];
  v14 = __OFSUB__(v24, v25);
  v26 = v24 - v25;
  if (v14)
    goto LABEL_21;
  v27 = *(_QWORD *)(*a1 + 24);
  v14 = __OFSUB__(v27, v24);
  v28 = v27 - v24;
  if (v14)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v29 = a4;
  v30 = v22[3];
  if (v30 >= v28)
    v31 = v28;
  else
    v31 = v30;
  v32 = (char *)(v23 + v26);
  swift_bridgeObjectRetain();
  specialized UnsafeMutableBufferPointer.initialize<A>(fromContentsOf:)(a2, a3, v32, v31);
  if (v29 == 2)
    v33 = _allASCII(_:)(v32, v31);
  else
    v33 = v29 & 1;
  swift_bridgeObjectRelease();
  return v33 & 1;
}

uint64_t specialized RangeReplaceableCollection.insert<A>(contentsOf:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return specialized RangeReplaceableCollection.insert<A>(contentsOf:at:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))AttributedString.UnicodeScalarView.replaceSubrange<A>(_:with:));
}

{
  return specialized RangeReplaceableCollection.insert<A>(contentsOf:at:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))AttributedString.CharacterView.replaceSubrange<A>(_:with:));
}

uint64_t specialized RangeReplaceableCollection.insert<A>(contentsOf:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(_QWORD *, uint64_t, uint64_t, uint64_t))
{
  _QWORD v9[8];

  v9[0] = a2;
  v9[1] = a3;
  v9[2] = a4;
  v9[3] = a5;
  v9[4] = a2;
  v9[5] = a3;
  v9[6] = a4;
  v9[7] = a5;
  return a8(v9, a1, a6, a7);
}

uint64_t specialized RangeReplaceableCollection.insert<A>(contentsOf:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Data.replaceSubrange<A>(_:with:)(a2, a2, a1, a3, a4);
}

id specialized Data.init(contentsOf:options:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  Swift::String v10;
  unsigned __int8 v11;
  char v12;
  id v13;
  id v14;
  id v16;
  id v17;
  void *v18;
  id v19;
  __int128 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v3 = v2;
  v5 = *(void **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  swift_retain();
  v8 = v5;
  swift_retain();
  if (_foundation_swift_url_feature_enabled())
  {
    *(_QWORD *)&v20 = v8;
    *((_QWORD *)&v20 + 1) = v6;
    v21 = v7;
    URL.scheme.getter();
    if (v9)
    {
      v10 = String.lowercased()();
      swift_bridgeObjectRelease();
      if (v10._countAndFlagsBits == 1701603686 && v10._object == (void *)0xE400000000000000)
      {
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        goto LABEL_10;
      }
      v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      if ((v12 & 1) != 0)
      {
LABEL_10:
        v23 = MEMORY[0x1E0DEE9E0];
        *(_QWORD *)&v20 = v8;
        *((_QWORD *)&v20 + 1) = v6;
        v21 = v7;
        v22 = 1;
        v13 = v8;
        swift_retain();
        swift_retain();
        v14 = (id)readDataFromFile(path:reportProgress:maxLength:options:attributesToRead:attributes:)(&v20, 1, 0, 1, a2, MEMORY[0x1E0DEE9D8], &v23);
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        if (!v3)
          return v14;
        return v14;
      }
    }
    else
    {
      swift_release();
      swift_release();

    }
  }
  else
  {
    v11 = objc_msgSend(v8, sel_isFileURL);
    swift_release();
    swift_release();

    if ((v11 & 1) != 0)
      goto LABEL_10;
  }
  *(_QWORD *)&v20 = v8;
  *((_QWORD *)&v20 + 1) = v6;
  v21 = v7;
  v14 = objc_allocWithZone(MEMORY[0x1E0C99D50]);
  v16 = v8;
  swift_retain();
  swift_retain();
  v17 = @nonobjc NSData.init(contentsOf:options:)((void **)&v20, a2);
  if (v3)
    return v14;
  v18 = v17;
  v19 = specialized Data.init(referencing:)(v17);

  return v19;
}

uint64_t type metadata accessor for Data.RangeReference()
{
  return objc_opt_self();
}

void partial apply for closure #2 in Data.replaceSubrange<A>(_:with:)()
{
  Data._Representation.replaceSubrange(_:with:count:)();
}

void _s10Foundation4DataV15replaceSubrange_4withySnySiG_xtSlRzs5UInt8V7ElementRtzlFySWXEfU_TA_0()
{
  Data._Representation.replaceSubrange(_:with:count:)();
}

void partial apply for closure #2 in Data.append<A>(contentsOf:)()
{
  Data._Representation.append(contentsOf:)();
}

void partial apply for closure #3 in Data.append<A>(contentsOf:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  closure #3 in Data.append<A>(contentsOf:)(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

void partial apply for closure #1 in Data.append<A>(contentsOf:)()
{
  Data._Representation.append(contentsOf:)();
}

uint64_t sub_181E5D8DC()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

void specialized Data.init(repeating:count:)(uint64_t a1, uint64_t a2)
{
  specialized Data.init(count:)(a2);
  __asm { BR              X10 }
}

uint64_t sub_181E5D958(int a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __b, int a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;
  int v26;
  _QWORD v28[13];

  v28[0] = v25;
  memset(v28, v26, BYTE6(a2));
  return v28[0];
}

uint64_t partial apply for closure #1 in Data.withUnsafeMutableBytes<A, B>(_:)(uint64_t a1)
{
  uint64_t v1;

  if (!a1)
    a1 = 47824;
  return (*(uint64_t (**)(uint64_t))(v1 + 32))(a1);
}

void specialized Data.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[3];
  uint64_t AssociatedTypeWitness;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t TupleTypeMetadata2;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t AssociatedConformanceWitness;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;

  v64 = a3;
  v56 = a2;
  v55 = a1;
  v63 = a6;
  v75 = *(_QWORD *)(a6 + 8);
  v9 = *(_QWORD *)(*(_QWORD *)(v75 + 24) + 16);
  swift_getAssociatedTypeWitness();
  v50 = v9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v48[2] = (char *)v48 - v10;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  MEMORY[0x1E0C80A78](v11);
  v69 = a5;
  v65 = a4;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v76 = type metadata accessor for Range();
  v62 = *(_QWORD *)(v76 - 8);
  MEMORY[0x1E0C80A78](v76);
  MEMORY[0x1E0C80A78](v12);
  v61 = (char *)v48 - v13;
  MEMORY[0x1E0C80A78](v14);
  v72 = (char *)v48 - v15;
  MEMORY[0x1E0C80A78](v16);
  MEMORY[0x1E0C80A78](v17);
  v70 = (char *)v48 - v18;
  MEMORY[0x1E0C80A78](v19);
  v68 = (char *)v48 - v20;
  MEMORY[0x1E0C80A78](v21);
  v51 = (char *)v48 - v22;
  MEMORY[0x1E0C80A78](v23);
  v48[1] = (char *)v48 - v24;
  MEMORY[0x1E0C80A78](v25);
  v52 = (char *)v48 - v26;
  MEMORY[0x1E0C80A78](v27);
  MEMORY[0x1E0C80A78](v28);
  v66 = (char *)v48 - v29;
  MEMORY[0x1E0C80A78](v30);
  v71 = (char *)v48 - v31;
  MEMORY[0x1E0C80A78](v32);
  v58 = (char *)v48 - v33;
  MEMORY[0x1E0C80A78](v34);
  v54 = (char *)v48 - v35;
  MEMORY[0x1E0C80A78](v36);
  v53 = (char *)v48 - v37;
  MEMORY[0x1E0C80A78](v38);
  v59 = (char *)v48 - v39;
  MEMORY[0x1E0C80A78](v40);
  v67 = (char *)v48 - v41;
  MEMORY[0x1E0C80A78](v42);
  v74 = (char *)v48 - v43;
  MEMORY[0x1E0C80A78](v44);
  v77 = (char *)v48 - v45;
  v46 = *(_QWORD *)(v6 + 8);
  v57 = v6;
  v48[0] = v47;
  __asm { BR              X9 }
}

uint64_t sub_181E5E090()
{
  unsigned int v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 - 96) = 0;
  *(_QWORD *)(v1 - 176) = lazy protocol witness table accessor for type Int and conformance Int();
  v2 = dispatch thunk of BinaryFloatingPoint.init<A>(exactly:)();
  return ((uint64_t (*)(uint64_t))((char *)&loc_181E5E0D0 + *((int *)qword_181E5EE90 + v0)))(v2);
}

uint64_t sub_181E5E0E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t AssociatedConformanceWitness;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  char v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  BOOL v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;

  *(_QWORD *)(v7 - 96) = BYTE6(v4);
  v8 = *(void (**)(uint64_t, uint64_t))(v7 - 160);
  v9 = v1;
  dispatch thunk of BinaryFloatingPoint.init<A>(exactly:)();
  v10 = *(_QWORD *)(v7 - 136);
  if ((dispatch thunk of static Comparable.<= infix(_:_:)() & 1) == 0)
  {
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    v8(v9, v1);
    __break(1u);
LABEL_72:
    v8(v9, v1);
    __break(1u);
    JUMPOUT(0x181E5EE80);
  }
  *(_QWORD *)(v7 - 304) = v5;
  v11 = v0;
  v12 = *(_QWORD *)(v7 - 280);
  v13 = v2 + *(int *)(v12 + 48);
  v14 = v10;
  v15 = (void (*)(uint64_t, uint64_t, uint64_t))v6[2];
  v15(v2, v14, v1);
  v15(v13, (uint64_t)v8, v1);
  v16 = v3 + *(int *)(v12 + 48);
  v15(v3, v2, v1);
  v15(v16, v13, v1);
  v17 = (void (*)(uint64_t, uint64_t, uint64_t))v6[4];
  v17(v11, v3, v1);
  v18 = (void (*)(uint64_t, uint64_t))v6[1];
  v18(v16, v1);
  v19 = v3 + *(int *)(v12 + 48);
  v17(v3, v2, v1);
  v17(v19, v13, v1);
  v20 = *(_QWORD *)(v7 - 144);
  v21 = v11 + *(int *)(v20 + 36);
  v22 = v19;
  v8 = v18;
  *(_QWORD *)(v7 - 280) = v17;
  v17(v21, v22, v1);
  v18(v3, v1);
  v23 = *(_QWORD *)(v7 - 264);
  v24 = *(_QWORD *)(v7 - 272);
  v25 = v11;
  v26 = *(_QWORD *)(v7 - 152);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 32))(v24, v25, v20);
  v27 = *(_QWORD *)(v26 + 32);
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v7 - 112) = v27;
  *(_QWORD *)(v7 - 104) = AssociatedConformanceWitness;
  MEMORY[0x186DA9D64](MEMORY[0x1E0DEB8C0], v20, v7 - 112);
  v29 = *(_QWORD *)(v7 - 184);
  dispatch thunk of RangeExpression.relative<A>(to:)();
  v30 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
  *(_QWORD *)(v7 - 240) = v30;
  v30(v24, v20);
  v31 = *(_QWORD *)(v7 - 224);
  v15(v31, v29, v1);
  LOBYTE(v27) = dispatch thunk of static BinaryInteger.isSigned.getter();
  v32 = *(_QWORD *)(v7 - 288);
  v15(v32, v31, v1);
  *(_QWORD *)(v7 - 208) = v8;
  if ((v27 & 1) != 0)
  {
    v33 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v8(v32, v1);
    v34 = *(_QWORD *)(v7 - 232);
    v35 = *(void (**)(uint64_t, uint64_t))(v7 - 216);
    if (v33 > 64)
    {
      v36 = *(_QWORD *)(v7 - 344);
      v15(v36, v31, v1);
      *(_QWORD *)(v7 - 96) = 0x8000000000000000;
      if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0)
        goto LABEL_41;
      if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
      {
        v37 = dispatch thunk of BinaryInteger._lowWord.getter();
        v38 = v36;
        v39 = v37;
        v40 = v38;
        goto LABEL_53;
      }
      v83 = *(_QWORD *)(v7 - 336);
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      v84 = v36;
      v39 = dispatch thunk of static Comparable.< infix(_:_:)();
      v85 = v83;
      v8 = *(void (**)(uint64_t, uint64_t))(v7 - 208);
      v8(v85, v1);
      v8(v84, v1);
      if ((v39 & 1) != 0)
        goto LABEL_54;
    }
  }
  else
  {
    v8(v32, v1);
    v34 = *(_QWORD *)(v7 - 232);
    v35 = *(void (**)(uint64_t, uint64_t))(v7 - 216);
  }
LABEL_8:
  v41 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v42 = *(_QWORD *)(v7 - 296);
  v15(v42, v31, v1);
  if (v41 < 65)
  {
    v43 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v8(v42, v1);
    if (v43 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
      goto LABEL_20;
  }
  else
  {
    v8(v42, v1);
  }
  v15(*(_QWORD *)(v7 - 192), v31, v1);
  *(_QWORD *)(v7 - 96) = 0x7FFFFFFFFFFFFFFFLL;
  v44 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v45 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v44 & 1) != 0)
  {
    if (v45 > 64)
    {
      v46 = *(_QWORD *)(v7 - 336);
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      v47 = *(_QWORD *)(v7 - 192);
      v48 = dispatch thunk of static Comparable.< infix(_:_:)();
      v49 = v46;
      v8 = *(void (**)(uint64_t, uint64_t))(v7 - 208);
      v8(v49, v1);
      v50 = v47;
      goto LABEL_19;
    }
  }
  else if (v45 > 63)
  {
    goto LABEL_18;
  }
  v51 = *(_QWORD *)(v7 - 192);
  v52 = dispatch thunk of BinaryInteger._lowWord.getter();
  v8(v51, v1);
  v29 = *(_QWORD *)(v7 - 184);
  if (*(_QWORD *)(v7 - 96) < v52)
  {
    do
    {
      __break(1u);
LABEL_18:
      *(_QWORD *)(v7 - 128) = 0x7FFFFFFFFFFFFFFFLL;
      v53 = *(_QWORD *)(v7 - 336);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 - 280))(v53, *(_QWORD *)(v7 - 192), v1);
      v54 = *(_QWORD *)(v7 - 352);
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      v48 = dispatch thunk of static Comparable.< infix(_:_:)();
      v55 = v54;
      v8 = *(void (**)(uint64_t, uint64_t))(v7 - 208);
      v8(v55, v1);
      v50 = v53;
      v35 = *(void (**)(uint64_t, uint64_t))(v7 - 216);
LABEL_19:
      v8(v50, v1);
      v29 = *(_QWORD *)(v7 - 184);
    }
    while ((v48 & 1) != 0);
  }
LABEL_20:
  v39 = dispatch thunk of BinaryInteger._lowWord.getter();
  v8(v31, v1);
  v15(v34, v29 + *(int *)(*(_QWORD *)(v7 - 144) + 36), v1);
  v31 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v56 = *(_QWORD *)(v7 - 304);
  v15(v56, v34, v1);
  if ((v31 & 1) == 0)
  {
    v8(v56, v1);
    goto LABEL_26;
  }
  v31 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v8(v56, v1);
  if (v31 <= 64)
    goto LABEL_26;
  v31 = *(_QWORD *)(v7 - 360);
  v15(v31, v34, v1);
  *(_QWORD *)(v7 - 96) = 0x8000000000000000;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64)
      goto LABEL_55;
    v57 = dispatch thunk of BinaryInteger._lowWord.getter();
    v58 = v31;
    v59 = v1;
    goto LABEL_60;
  }
  v81 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v82 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v81 & 1) == 0)
  {
    if (v82 >= 64)
    {
      v8 = *(void (**)(uint64_t, uint64_t))(v7 - 208);
      v8(v31, v1);
      goto LABEL_26;
    }
    v57 = dispatch thunk of BinaryInteger._lowWord.getter();
    v58 = v31;
    v59 = v1;
    v8 = *(void (**)(uint64_t, uint64_t))(v7 - 208);
LABEL_60:
    v8(v58, v59);
    if (v57 >= *(_QWORD *)(v7 - 96))
      goto LABEL_26;
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  if (v82 <= 64)
  {
    v98 = *(_QWORD *)(v7 - 376);
    v99 = swift_getAssociatedConformanceWitness();
    MEMORY[0x186DA5E34](&unk_18206D478, 256, v98, v99);
    v100 = *(_QWORD *)(v7 - 336);
    dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
    v101 = *(_QWORD *)(v7 - 360);
    *(_DWORD *)(v7 - 192) = dispatch thunk of static Comparable.< infix(_:_:)();
    v102 = v100;
    v8 = *(void (**)(uint64_t, uint64_t))(v7 - 208);
    v8(v102, v1);
    v9 = *(_QWORD *)(v7 - 400);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 - 280))(v9, v101, v1);
    if ((*(_DWORD *)(v7 - 192) & 1) != 0)
      goto LABEL_72;
    *(_QWORD *)(v7 - 192) = *(_QWORD *)(v7 - 96);
    v31 = dispatch thunk of BinaryInteger._lowWord.getter();
    v8(v9, v1);
    if (v31 < *(_QWORD *)(v7 - 192))
      goto LABEL_61;
    goto LABEL_26;
  }
  while (1)
  {
LABEL_55:
    v87 = *(_QWORD *)(v7 - 336);
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v88 = dispatch thunk of static Comparable.< infix(_:_:)();
    v89 = v87;
    v8 = *(void (**)(uint64_t, uint64_t))(v7 - 208);
    v8(v89, v1);
    v8(v31, v1);
    if ((v88 & 1) != 0)
      goto LABEL_61;
LABEL_26:
    v60 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v15((uint64_t)v35, v34, v1);
    if (v60 >= 65)
    {
      v8((uint64_t)v35, v1);
      goto LABEL_28;
    }
    v68 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v8((uint64_t)v35, v1);
    if (v68 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
      break;
LABEL_28:
    v35 = *(void (**)(uint64_t, uint64_t))(v7 - 200);
    v15((uint64_t)v35, v34, v1);
    *(_QWORD *)(v7 - 96) = 0x7FFFFFFFFFFFFFFFLL;
    v61 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v62 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v61 & 1) != 0)
    {
      if (v62 > 64)
      {
        v63 = *(_QWORD *)(v7 - 336);
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        v64 = *(_QWORD *)(v7 - 200);
        v65 = dispatch thunk of static Comparable.< infix(_:_:)();
        v66 = v63;
        v35 = *(void (**)(uint64_t, uint64_t))(v7 - 208);
        v35(v66, v1);
        v67 = v64;
        v8 = v35;
        v35(v67, v1);
        if ((v65 & 1) == 0)
          break;
        goto LABEL_40;
      }
LABEL_36:
      v69 = *(_QWORD *)(v7 - 200);
      v70 = dispatch thunk of BinaryInteger._lowWord.getter();
      v71 = v69;
      v8 = *(void (**)(uint64_t, uint64_t))(v7 - 208);
      v8(v71, v1);
      if (*(_QWORD *)(v7 - 96) >= v70)
        break;
      goto LABEL_40;
    }
    if (v62 <= 63)
      goto LABEL_36;
    *(_QWORD *)(v7 - 128) = 0x7FFFFFFFFFFFFFFFLL;
    v35 = *(void (**)(uint64_t, uint64_t))(v7 - 336);
    (*(void (**)(void (*)(uint64_t, uint64_t), _QWORD, uint64_t))(v7 - 280))(v35, *(_QWORD *)(v7 - 200), v1);
    v73 = *(_QWORD *)(v7 - 352);
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v74 = dispatch thunk of static Comparable.< infix(_:_:)();
    v75 = v73;
    v8 = *(void (**)(uint64_t, uint64_t))(v7 - 208);
    v8(v75, v1);
    v8((uint64_t)v35, v1);
    if ((v74 & 1) == 0)
      break;
LABEL_40:
    __break(1u);
LABEL_41:
    v76 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v77 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v76 & 1) == 0)
    {
      if (v77 < 64)
      {
        v86 = *(_QWORD *)(v7 - 344);
        v39 = dispatch thunk of BinaryInteger._lowWord.getter();
        v40 = v86;
LABEL_53:
        v8(v40, v1);
        if (v39 < *(_QWORD *)(v7 - 96))
          goto LABEL_54;
      }
      else
      {
        v8(*(_QWORD *)(v7 - 344), v1);
      }
      goto LABEL_8;
    }
    if (v77 > 64)
    {
      v78 = *(_QWORD *)(v7 - 336);
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      v39 = *(_QWORD *)(v7 - 344);
      v79 = dispatch thunk of static Comparable.< infix(_:_:)();
      v80 = v78;
      v8 = *(void (**)(uint64_t, uint64_t))(v7 - 208);
      v8(v80, v1);
      v8(v39, v1);
      if ((v79 & 1) != 0)
        goto LABEL_54;
      goto LABEL_8;
    }
LABEL_62:
    v90 = *(_QWORD *)(v7 - 376);
    v91 = swift_getAssociatedConformanceWitness();
    MEMORY[0x186DA5E34](&unk_18206D478, 256, v90, v91);
    v92 = *(_QWORD *)(v7 - 336);
    dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
    v93 = *(_QWORD *)(v7 - 344);
    v94 = dispatch thunk of static Comparable.< infix(_:_:)();
    v95 = v92;
    v8 = *(void (**)(uint64_t, uint64_t))(v7 - 208);
    v8(v95, v1);
    v9 = *(_QWORD *)(v7 - 392);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 - 280))(v9, v93, v1);
    if ((v94 & 1) != 0)
      goto LABEL_71;
    v96 = *(_QWORD *)(v7 - 96);
    v39 = dispatch thunk of BinaryInteger._lowWord.getter();
    v8(v9, v1);
    v97 = v39 < v96;
    v31 = *(_QWORD *)(v7 - 224);
    if (!v97)
      goto LABEL_8;
LABEL_54:
    __break(1u);
  }
  v9 = dispatch thunk of BinaryInteger._lowWord.getter();
  v8(v34, v1);
  if (v9 < v39)
    goto LABEL_70;
  specialized Data._Representation.withUnsafeBytes<A>(_:)(*(_QWORD *)(v7 - 328), *(_QWORD *)(v7 - 320));
  (*(void (**)(uint64_t, _QWORD))(v7 - 240))(v29, *(_QWORD *)(v7 - 144));
  v8(*(_QWORD *)(v7 - 160), v1);
  return ((uint64_t (*)(_QWORD, uint64_t))v8)(*(_QWORD *)(v7 - 136), v1);
}

unint64_t lazy protocol witness table accessor for type Data.Iterator and conformance Data.Iterator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data.Iterator and conformance Data.Iterator;
  if (!lazy protocol witness table cache variable for type Data.Iterator and conformance Data.Iterator)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Data.Iterator, &type metadata for Data.Iterator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data.Iterator and conformance Data.Iterator);
  }
  return result;
}

uint64_t sub_181E5EFB8@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(*(_QWORD *)result + 24);
  return result;
}

void sub_181E5EFC8(Swift::Int *a1)
{
  __DataStorage.setLength(_:)(*a1);
}

uint64_t sub_181E5EFEC@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(unsigned __int8 *)(result + 14);
  return result;
}

void sub_181E5EFF8(uint64_t *a1)
{
  Data.InlineData.count.setter(*a1);
}

double sub_181E5F01C@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X8>)
{
  return key path getter for Data.InlineData.subscript(_:) : Data.InlineData(a1, a2, a3);
}

uint64_t sub_181E5F064()
{
  return 0;
}

_DWORD *sub_181E5F074@<X0>(_DWORD *result@<X0>, _QWORD *a2@<X8>)
{
  int v2;

  v2 = result[1];
  if (__OFSUB__(v2, *result))
    __break(1u);
  else
    *a2 = v2 - *result;
  return result;
}

void sub_181E5F090(uint64_t *a1)
{
  Data.InlineSlice.count.setter(*a1);
}

int *sub_181E5F0B4@<X0>(int *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *result;
  v3 = result[1];
  if ((int)v3 < (int)v2)
  {
    __break(1u);
  }
  else
  {
    *a2 = v2;
    a2[1] = v3;
  }
  return result;
}

void sub_181E5F0D4(char *a1, uint64_t a2, uint64_t *a3)
{
  Data.InlineSlice.subscript.setter(*a1, *a3);
}

uint64_t sub_181E5F0FC()
{
  return 0;
}

uint64_t sub_181E5F10C@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)result + 16);
  v3 = *(_QWORD *)(*(_QWORD *)result + 24);
  v4 = __OFSUB__(v3, v2);
  v5 = v3 - v2;
  if (v4)
    __break(1u);
  else
    *a2 = v5;
  return result;
}

void sub_181E5F128(uint64_t *a1)
{
  Data.LargeSlice.count.setter(*a1);
}

void sub_181E5F150(char *a1, uint64_t a2, uint64_t *a3)
{
  Data.LargeSlice.subscript.setter(*a1, *a3);
}

uint64_t sub_181E5F178()
{
  return 0;
}

uint64_t sub_181E5F188(uint64_t a1)
{
  return key path getter for Data._Representation.count : Data._Representation(a1);
}

void sub_181E5F19C()
{
  Data._Representation.count.setter();
}

void sub_181E5F1C0(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X8>)
{
  char v4;

  Data._Representation.subscript.getter(*a2, *a1, a1[1]);
  *a3 = v4;
}

void sub_181E5F1F0()
{
  Data._Representation.subscript.setter();
}

uint64_t sub_181E5F218()
{
  return 0;
}

uint64_t sub_181E5F228(uint64_t a1)
{
  return key path getter for Data._Representation.count : Data._Representation(a1);
}

void sub_181E5F23C(_QWORD *a1)
{
  if ((*a1 & 0x8000000000000000) != 0)
    __break(1u);
  else
    Data._Representation.count.setter();
}

void sub_181E5F268(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X8>)
{
  char v4;

  Data.subscript.getter(*a2, *a1, a1[1]);
  *a3 = v4;
}

void sub_181E5F298()
{
  Data._Representation.subscript.setter();
}

uint64_t sub_181E5F2C0()
{
  return 0;
}

void sub_181E5F2D0(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  Data._Representation.subscript.getter(*a2, a2[1], *a1, a1[1]);
  *a3 = v4;
  a3[1] = v5;
}

uint64_t sub_181E5F300()
{
  return 0;
}

void sub_181E5F310(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  Data.subscript.getter(a2, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a3 + a2 - 24), *(_QWORD *)(a3 + a2 - 16), *(_QWORD *)(a3 + a2 - 8));
  *a4 = v5;
  a4[1] = v6;
}

uint64_t sub_181E5F350()
{
  return 24;
}

__n128 sub_181E5F35C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t method lookup function for __DataStorage()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of __DataStorage.__allocating_init(length:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of __DataStorage.__allocating_init(capacity:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of __DataStorage.__allocating_init(bytes:length:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of __DataStorage.__allocating_init(bytes:length:copy:deallocator:offset:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of __DataStorage.__allocating_init(offset:bytes:capacity:needToZero:length:deallocator:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

_QWORD *__swift_memcpy15_1(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_QWORD *)((char *)result + 7) = *(uint64_t *)((char *)a2 + 7);
  *result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for Data.InlineData(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 15))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Data.InlineData(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 14) = 0;
    *(_WORD *)(result + 12) = 0;
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 15) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Data.InlineData()
{
  return &type metadata for Data.InlineData;
}

uint64_t assignWithCopy for Data.InlineSlice(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for Data.InlineSlice(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for Data.InlineSlice()
{
  return &type metadata for Data.InlineSlice;
}

uint64_t method lookup function for Data.RangeReference()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Data.RangeReference.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t destroy for Data.LargeSlice()
{
  swift_release();
  return swift_release();
}

_QWORD *initializeBufferWithCopyOfBuffer for Data.LargeSlice(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for Data.LargeSlice(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for Data.LargeSlice(_OWORD *a1, _OWORD *a2)
{
  swift_release();
  *a1 = *a2;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for Data.LargeSlice()
{
  return &type metadata for Data.LargeSlice;
}

uint64_t *assignWithCopy for Data(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  outlined copy of Data._Representation(*a2, v4);
  v5 = *a1;
  v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  outlined consume of Data._Representation(v5, v6);
  return a1;
}

uint64_t getEnumTag for Data._Representation(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8) >> 62;
  if ((_DWORD)v1 == 3)
    return (*(_DWORD *)a1 + 3);
  else
    return v1;
}

uint64_t destructiveProjectEnumData for Data._Representation(uint64_t result)
{
  *(_QWORD *)(result + 8) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

_QWORD *destructiveInjectEnumTag for Data._Representation(_QWORD *result, uint64_t a2)
{
  if (a2 < 3)
  {
    result[1] = result[1] & 0xFFFFFFFFFFFFFFFLL | (a2 << 62);
  }
  else
  {
    *result = (a2 - 3);
    result[1] = 0xC000000000000000;
  }
  return result;
}

ValueMetadata *type metadata accessor for Data._Representation()
{
  return &type metadata for Data._Representation;
}

uint64_t getEnumTagSinglePayload for Data.Deallocator(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFC && *((_BYTE *)a1 + 16))
    return (*(_DWORD *)a1 + 2147483644);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 3;
  if (v4 >= 5)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Data.Deallocator(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFB)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483644;
    if (a3 >= 0x7FFFFFFC)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFC)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 3;
  }
  return result;
}

uint64_t initializeWithCopy for Data.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  outlined copy of Data._Representation(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  return a1;
}

uint64_t assignWithCopy for Data.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  outlined copy of Data._Representation(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  outlined consume of Data._Representation(v6, v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(a1 + 19) = *(_BYTE *)(a2 + 19);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_BYTE *)(a1 + 21) = *(_BYTE *)(a2 + 21);
  *(_BYTE *)(a1 + 22) = *(_BYTE *)(a2 + 22);
  *(_BYTE *)(a1 + 23) = *(_BYTE *)(a2 + 23);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(_BYTE *)(a1 + 27) = *(_BYTE *)(a2 + 27);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_BYTE *)(a1 + 29) = *(_BYTE *)(a2 + 29);
  *(_BYTE *)(a1 + 30) = *(_BYTE *)(a2 + 30);
  *(_BYTE *)(a1 + 31) = *(_BYTE *)(a2 + 31);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(_BYTE *)(a1 + 35) = *(_BYTE *)(a2 + 35);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_BYTE *)(a1 + 37) = *(_BYTE *)(a2 + 37);
  *(_BYTE *)(a1 + 38) = *(_BYTE *)(a2 + 38);
  *(_BYTE *)(a1 + 39) = *(_BYTE *)(a2 + 39);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  *(_BYTE *)(a1 + 43) = *(_BYTE *)(a2 + 43);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  *(_BYTE *)(a1 + 45) = *(_BYTE *)(a2 + 45);
  *(_BYTE *)(a1 + 46) = *(_BYTE *)(a2 + 46);
  *(_BYTE *)(a1 + 47) = *(_BYTE *)(a2 + 47);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for Data.Iterator(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  outlined consume of Data._Representation(v4, v5);
  v6 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = a2[3];
  return a1;
}

uint64_t getEnumTagSinglePayload for Data.Iterator(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for Data.Iterator(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 64) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

uint64_t sub_181E5F9C8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed UnsafeMutableRawPointer, @in_guaranteed Int) -> (@out ())(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *, uint64_t *);
  uint64_t v5;
  uint64_t v6;

  v3 = *(uint64_t (**)(uint64_t *, uint64_t *))(v2 + 16);
  v5 = a2;
  v6 = a1;
  return v3(&v6, &v5);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer, @unowned Int) -> ()(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v2 + 16))(*a1, *a2);
}

uint64_t sub_181E5FA48()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #3 in implicit closure #2 in closure #3 in Data.append<A>(contentsOf:)(uint64_t a1)
{
  return implicit closure #3 in implicit closure #2 in closure #3 in Data.append<A>(contentsOf:)(a1);
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned UnsafeMutableBufferPointer<UInt8>) -> (@out A.Sequence.Iterator, @unowned Int)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t result;

  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32);
  swift_getAssociatedTypeWitness();
  v8 = *(int *)(swift_getTupleTypeMetadata2() + 48);
  result = v7(a3, a1, a2);
  *(_QWORD *)(a3 + v8) = result;
  return result;
}

uint64_t partial apply for specialized closure #1 in UnsafeMutableBufferPointer.initialize<A>(fromContentsOf:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = specialized closure #1 in UnsafeMutableBufferPointer.initialize<A>(fromContentsOf:)(a1, a2, *(char **)(v3 + 32), *(_QWORD *)(v3 + 40));
  if (!v4)
    *a3 = result;
  return result;
}

uint64_t specialized closure #1 in UnsafeMutableBufferPointer.initialize<A>(fromContentsOf:)(char *__src, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;

  if (!__src)
    return 0;
  v4 = a2;
  if (!a2)
    return v4;
  if (a4 < a2)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (!__dst)
    return v4;
  if ((a2 & 0x8000000000000000) == 0 && (&__dst[8 * a2] <= __src || &__src[8 * a2] <= __dst))
  {
    memcpy(__dst, __src, 8 * a2);
    return v4;
  }
LABEL_12:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t static NSTimer.publish(every:tolerance:on:in:options:)(double a1, uint64_t a2, uint64_t a3, void *a4, void *a5, char *a6)
{
  char v9;
  uint64_t v10;
  id v11;
  id v12;
  _DWORD *v13;

  v9 = *a6;
  type metadata accessor for NSTimer.TimerPublisher();
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 64) = MEMORY[0x1E0DEE9E0];
  v11 = a4;
  v12 = a5;
  v13 = (_DWORD *)swift_slowAlloc();
  *v13 = 0;
  *(_QWORD *)(v10 + 72) = v13;
  *(double *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = 0;
  *(_BYTE *)(v10 + 32) = 1;
  *(_QWORD *)(v10 + 40) = v11;
  *(_QWORD *)(v10 + 48) = v12;
  *(_BYTE *)(v10 + 56) = v9;
  return v10;
}

uint64_t NSTimer.TimerPublisher.__allocating_init(interval:tolerance:runLoop:mode:options:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, _BYTE *a5, double a6)
{
  uint64_t v12;
  _DWORD *v13;

  v12 = swift_allocObject();
  LOBYTE(a5) = *a5;
  *(_QWORD *)(v12 + 64) = MEMORY[0x1E0DEE9E0];
  v13 = (_DWORD *)swift_slowAlloc();
  *v13 = 0;
  *(_QWORD *)(v12 + 72) = v13;
  *(double *)(v12 + 16) = a6;
  *(_QWORD *)(v12 + 24) = a1;
  *(_BYTE *)(v12 + 32) = a2 & 1;
  *(_QWORD *)(v12 + 40) = a3;
  *(_QWORD *)(v12 + 48) = a4;
  *(_BYTE *)(v12 + 56) = (_BYTE)a5;
  return v12;
}

double NSTimer.TimerPublisher.interval.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

uint64_t NSTimer.TimerPublisher.tolerance.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

id NSTimer.TimerPublisher.runLoop.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 40);
}

id NSTimer.TimerPublisher.mode.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 48);
}

void NSTimer.TimerPublisher.options.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 56);
}

Swift::Void __swiftcall NSTimer.TimerPublisher.Inner.send(_:)(Foundation::Date a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  _QWORD v27[2];

  v3 = v2;
  v4 = v1;
  v5 = *v2;
  v6 = *(_QWORD *)(*v2 + 80);
  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v27 - v9;
  v11 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *v4;
  v16 = *(os_unfair_lock_s **)((char *)v3 + *(_QWORD *)(v5 + 120));
  os_unfair_lock_lock(v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, (uint64_t)v3 + *(_QWORD *)(*v3 + 96), v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v6) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
LABEL_12:
    os_unfair_lock_unlock(v16);
    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v10, v6);
  v17 = *(_QWORD *)(*v3 + 104);
  v18 = *(uint64_t *)((char *)v3 + v17);
  v19 = static Subscribers.Demand.none.getter();
  static Subscribers.Demand.unlimited.getter();
  if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0
    && (static Subscribers.Demand.unlimited.getter(), (static Subscribers.Demand.== infix(_:_:)() & 1) != 0)
    || (static Subscribers.Demand.unlimited.getter(), (static Subscribers.Demand.== infix(_:_:)() & 1) == 0)
    && ((static Subscribers.Demand.unlimited.getter(), (static Subscribers.Demand.== infix(_:_:)() & 1) != 0)
     || v19 >= v18))
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v6);
    goto LABEL_12;
  }
  v20 = *(uint64_t *)((char *)v3 + v17);
  static Subscribers.Demand.unlimited.getter();
  if ((static Subscribers.Demand.== infix(_:_:)() & 1) == 0)
  {
    static Subscribers.Demand.unlimited.getter();
    if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0)
    {
      v21 = static Subscribers.Demand.unlimited.getter();
LABEL_16:
      *(uint64_t *)((char *)v3 + v17) = v21;
      goto LABEL_17;
    }
    if (v20 < 0)
    {
      __break(1u);
    }
    else if (v20)
    {
      v21 = v20 - 1;
      goto LABEL_16;
    }
    __break(1u);
    goto LABEL_35;
  }
LABEL_17:
  os_unfair_lock_unlock(v16);
  v27[1] = v15;
  v22 = dispatch thunk of Subscriber.receive(_:)();
  v23 = static Subscribers.Demand.none.getter();
  static Subscribers.Demand.unlimited.getter();
  if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0)
  {
    static Subscribers.Demand.unlimited.getter();
    if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0)
      goto LABEL_32;
  }
  static Subscribers.Demand.unlimited.getter();
  if ((static Subscribers.Demand.== infix(_:_:)() & 1) == 0)
  {
    static Subscribers.Demand.unlimited.getter();
    if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0 || v23 >= v22)
      goto LABEL_32;
  }
  os_unfair_lock_lock(v16);
  v24 = *(uint64_t *)((char *)v3 + v17);
  static Subscribers.Demand.unlimited.getter();
  if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0)
  {
LABEL_31:
    os_unfair_lock_unlock(v16);
LABEL_32:
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v6);
    return;
  }
  static Subscribers.Demand.unlimited.getter();
  v25 = static Subscribers.Demand.== infix(_:_:)();
  v26 = static Subscribers.Demand.unlimited.getter();
  if ((v25 & 1) != 0)
  {
LABEL_30:
    *(uint64_t *)((char *)v3 + v17) = v26;
    goto LABEL_31;
  }
  if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0)
  {
LABEL_28:
    v26 = static Subscribers.Demand.unlimited.getter();
    goto LABEL_30;
  }
  if (((v24 | v22) & 0x8000000000000000) != 0)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v26 = v24 + v22;
  if (__OFADD__(v24, v22))
    goto LABEL_28;
  if ((v26 & 0x8000000000000000) == 0)
    goto LABEL_30;
LABEL_36:
  __break(1u);
}

uint64_t NSTimer.TimerPublisher.init(interval:tolerance:runLoop:mode:options:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char *a5, double a6)
{
  uint64_t v6;
  char v12;
  _DWORD *v13;

  v12 = *a5;
  *(_QWORD *)(v6 + 64) = MEMORY[0x1E0DEE9E0];
  v13 = (_DWORD *)swift_slowAlloc();
  *v13 = 0;
  *(_QWORD *)(v6 + 72) = v13;
  *(double *)(v6 + 16) = a6;
  *(_QWORD *)(v6 + 24) = a1;
  *(_BYTE *)(v6 + 32) = a2 & 1;
  *(_QWORD *)(v6 + 40) = a3;
  *(_QWORD *)(v6 + 48) = a4;
  *(_BYTE *)(v6 + 56) = v12;
  return v6;
}

uint64_t NSTimer.TimerPublisher.deinit()
{
  uint64_t v0;

  MEMORY[0x186DA9E78](*(_QWORD *)(v0 + 72), -1, -1);

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t NSTimer.TimerPublisher.__deallocating_deinit()
{
  uint64_t v0;

  MEMORY[0x186DA9E78](*(_QWORD *)(v0 + 72), -1, -1);

  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

unint64_t NSTimer.TimerPublisher.connect()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  double v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  unint64_t result;
  _QWORD v9[6];

  v3 = *(double *)(v1 + 16);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = partial apply for implicit closure #2 in implicit closure #1 in NSTimer.TimerPublisher.connect();
  *(_QWORD *)(v4 + 24) = v1;
  v9[4] = partial apply for closure #1 in NSRunLoop.schedule(options:_:);
  v9[5] = v4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 1107296256;
  v9[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ();
  v9[3] = &block_descriptor_20;
  v5 = _Block_copy(v9);
  v6 = (void *)objc_opt_self();
  swift_retain_n();
  v7 = objc_msgSend(v6, sel_timerWithTimeInterval_repeats_block_, 1, v5, v3);
  _Block_release(v5);
  swift_release();
  objc_msgSend(*(id *)(v1 + 40), sel_addTimer_forMode_, v7, *(_QWORD *)(v1 + 48));
  a1[3] = &unk_1E0F36210;
  result = lazy protocol witness table accessor for type CancellableTimer #1 in NSTimer.TimerPublisher.connect() and conformance CancellableTimer #1 in NSTimer.TimerPublisher.connect()();
  a1[4] = result;
  *a1 = v7;
  a1[1] = v1;
  return result;
}

uint64_t sub_181E602FC()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type CancellableTimer #1 in NSTimer.TimerPublisher.connect() and conformance CancellableTimer #1 in NSTimer.TimerPublisher.connect()()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CancellableTimer #1 in NSTimer.TimerPublisher.connect() and conformance CancellableTimer #1 in NSTimer.TimerPublisher.connect();
  if (!lazy protocol witness table cache variable for type CancellableTimer #1 in NSTimer.TimerPublisher.connect() and conformance CancellableTimer #1 in NSTimer.TimerPublisher.connect())
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for CancellableTimer #1 in NSTimer.TimerPublisher.connect(), &unk_1E0F36210);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CancellableTimer #1 in NSTimer.TimerPublisher.connect() and conformance CancellableTimer #1 in NSTimer.TimerPublisher.connect());
  }
  return result;
}

uint64_t NSTimer.TimerPublisher.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, __n128);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  void (**v33)(Foundation::Date *);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  unint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, char *, uint64_t);
  uint64_t v50;
  int64_t v51;
  unint64_t v52;
  int64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t result;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  unint64_t v60;
  __int128 v61;
  uint64_t v62;
  int64_t v63;
  char *v64;
  os_unfair_lock_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD v70[6];

  v5 = v3;
  v9 = type metadata accessor for CombineIdentifier();
  v68 = *(_QWORD *)(v9 - 8);
  v69 = v9;
  MEMORY[0x1E0C80A78](v9);
  v64 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v57 - v12;
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v18 + 16);
  v66 = a1;
  v19(v17, a1, a2, v15);
  v67 = a3;
  v21 = type metadata accessor for NSTimer.TimerPublisher.Inner(0, a2, a3, v20);
  swift_allocObject();
  swift_retain();
  v22 = specialized NSTimer.TimerPublisher.Inner.init(_:parent:)((uint64_t)v17);
  swift_release();
  v65 = *(os_unfair_lock_t *)(v5 + 72);
  os_unfair_lock_lock(v65);
  MEMORY[0x186DA9D64](&protocol conformance descriptor for NSTimer.TimerPublisher.Inner<A>, v21);
  CustomCombineIdentifierConvertible<>.combineIdentifier.getter();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v70[0] = *(_QWORD *)(v5 + 64);
  v24 = v70[0];
  *(_QWORD *)(v5 + 64) = 0x8000000000000000;
  v26 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v13);
  v27 = *(_QWORD *)(v24 + 16);
  v28 = (v25 & 1) == 0;
  v29 = v27 + v28;
  if (__OFADD__(v27, v28))
  {
    __break(1u);
  }
  else
  {
    v4 = v25;
    if (*(_QWORD *)(v24 + 24) < v29)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v29, isUniquelyReferenced_nonNull_native);
      v30 = v70[0];
      v31 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v13);
      if ((v4 & 1) != (v32 & 1))
        goto LABEL_47;
      v26 = v31;
      if ((v4 & 1) == 0)
        goto LABEL_43;
LABEL_8:
      v33 = (void (**)(Foundation::Date *))(*(_QWORD *)(v30 + 56) + 16 * v26);
      swift_release();
      *v33 = partial apply for implicit closure #2 in implicit closure #1 in NSTimer.TimerPublisher.Side.init<A>(_:);
      v33[1] = (void (*)(Foundation::Date *))v22;
      v34 = v68;
      v35 = v69;
LABEL_44:
      *(_QWORD *)(v5 + 64) = v30;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v34 + 8))(v13, v35);
      os_unfair_lock_unlock(v65);
      v70[3] = v21;
      v70[4] = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSTimer.TimerPublisher.Inner<A>, v21);
      v70[0] = v22;
      dispatch thunk of Subscriber.receive(subscription:)();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v70);
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v30 = v24;
      if ((v25 & 1) != 0)
        goto LABEL_8;
LABEL_43:
      v34 = v68;
      v35 = v69;
      v55 = (uint64_t)v64;
      (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v64, v13, v69);
      specialized _NativeDictionary._insert(at:key:value:)(v26, v55, (uint64_t)partial apply for implicit closure #2 in implicit closure #1 in NSTimer.TimerPublisher.Side.init<A>(_:), v22, (_QWORD *)v30);
      goto LABEL_44;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<CombineIdentifier, NSTimer.TimerPublisher.Side>);
  v36 = static _DictionaryStorage.copy(original:)();
  v30 = v36;
  if (!*(_QWORD *)(v24 + 16))
  {
LABEL_42:
    swift_bridgeObjectRelease();
    if ((v4 & 1) != 0)
      goto LABEL_8;
    goto LABEL_43;
  }
  v37 = (char *)(v36 + 64);
  v38 = (char *)(v24 + 64);
  v39 = (unint64_t)((1 << *(_BYTE *)(v30 + 32)) + 63) >> 6;
  v58 = v24 + 64;
  if (v30 != v24 || v37 >= &v38[8 * v39])
    memmove(v37, v38, 8 * v39);
  v40 = 0;
  *(_QWORD *)(v30 + 16) = *(_QWORD *)(v24 + 16);
  v41 = 1 << *(_BYTE *)(v24 + 32);
  v42 = -1;
  if (v41 < 64)
    v42 = ~(-1 << v41);
  v43 = v42 & *(_QWORD *)(v24 + 64);
  v59 = (unint64_t)(v41 + 63) >> 6;
  while (1)
  {
    if (v43)
    {
      v62 = (v43 - 1) & v43;
      v63 = v40;
      v44 = __clz(__rbit64(v43)) | (v40 << 6);
      goto LABEL_18;
    }
    v51 = v40 + 1;
    if (__OFADD__(v40, 1))
    {
      __break(1u);
      goto LABEL_46;
    }
    if (v51 >= v59)
      goto LABEL_42;
    v52 = *(_QWORD *)(v58 + 8 * v51);
    v53 = v40 + 1;
    if (!v52)
    {
      v53 = v40 + 2;
      if (v40 + 2 >= v59)
        goto LABEL_42;
      v52 = *(_QWORD *)(v58 + 8 * v53);
      if (!v52)
      {
        v53 = v40 + 3;
        if (v40 + 3 >= v59)
          goto LABEL_42;
        v52 = *(_QWORD *)(v58 + 8 * v53);
        if (!v52)
        {
          v53 = v40 + 4;
          if (v40 + 4 >= v59)
            goto LABEL_42;
          v52 = *(_QWORD *)(v58 + 8 * v53);
          if (!v52)
          {
            v53 = v40 + 5;
            if (v40 + 5 >= v59)
              goto LABEL_42;
            v52 = *(_QWORD *)(v58 + 8 * v53);
            if (!v52)
            {
              v53 = v40 + 6;
              if (v40 + 6 >= v59)
                goto LABEL_42;
              v52 = *(_QWORD *)(v58 + 8 * v53);
              if (!v52)
              {
                v53 = v40 + 7;
                if (v40 + 7 >= v59)
                  goto LABEL_42;
                v52 = *(_QWORD *)(v58 + 8 * v53);
                if (!v52)
                  break;
              }
            }
          }
        }
      }
    }
LABEL_41:
    v62 = (v52 - 1) & v52;
    v63 = v53;
    v44 = __clz(__rbit64(v52)) + (v53 << 6);
LABEL_18:
    v45 = *(_QWORD *)(v24 + 48);
    v46 = v68;
    v47 = *(_QWORD *)(v68 + 72) * v44;
    v60 = v44;
    *(_QWORD *)&v61 = v47;
    (*(void (**)(char *, unint64_t, uint64_t))(v68 + 16))(v64, v45 + v47, v69);
    v48 = *(_QWORD *)(v30 + 48) + v61;
    v49 = *(void (**)(uint64_t, char *, uint64_t))(v46 + 32);
    v61 = *(_OWORD *)(*(_QWORD *)(v24 + 56) + 16 * v60);
    v50 = 16 * v60;
    v49(v48, v64, v69);
    *(_OWORD *)(*(_QWORD *)(v30 + 56) + v50) = v61;
    swift_retain();
    v43 = v62;
    v40 = v63;
  }
  v54 = v40 + 8;
  if (v40 + 8 >= v59)
    goto LABEL_42;
  v52 = *(_QWORD *)(v58 + 8 * v54);
  if (v52)
  {
    v53 = v40 + 8;
    goto LABEL_41;
  }
  while (1)
  {
    v53 = v54 + 1;
    if (__OFADD__(v54, 1))
      break;
    if (v53 >= v59)
      goto LABEL_42;
    v52 = *(_QWORD *)(v58 + 8 * v53);
    ++v54;
    if (v52)
      goto LABEL_41;
  }
LABEL_46:
  __break(1u);
LABEL_47:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for NSTimer.TimerPublisher.Inner(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NSTimer.TimerPublisher.Inner);
}

uint64_t NSTimer.TimerPublisher.Inner.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x186DA9E78](*(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 120)), -1, -1);
  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 96);
  v2 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_weakDestroy();
  return swift_deallocClassInstance();
}

void NSTimer.TimerPublisher.Inner.request(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  os_unfair_lock_s *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 80);
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v14 - v7;
  v9 = *(os_unfair_lock_s **)((char *)v1 + *(_QWORD *)(v3 + 120));
  os_unfair_lock_lock(v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, (uint64_t)v1 + *(_QWORD *)(*v1 + 96), v5);
  LODWORD(v4) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v8, 1, v4);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if ((_DWORD)v4 == 1)
    goto LABEL_11;
  v10 = *(_QWORD *)(*v1 + 104);
  v11 = *(uint64_t *)((char *)v1 + v10);
  static Subscribers.Demand.unlimited.getter();
  if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0)
    goto LABEL_11;
  static Subscribers.Demand.unlimited.getter();
  v12 = static Subscribers.Demand.== infix(_:_:)();
  v13 = static Subscribers.Demand.unlimited.getter();
  if ((v12 & 1) != 0)
  {
LABEL_10:
    *(uint64_t *)((char *)v1 + v10) = v13;
LABEL_11:
    os_unfair_lock_unlock(v9);
    return;
  }
  if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0)
    goto LABEL_8;
  if ((v11 | a1) < 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  v13 = v11 + a1;
  if (__OFADD__(v11, a1))
  {
LABEL_8:
    v13 = static Subscribers.Demand.unlimited.getter();
    goto LABEL_10;
  }
  if ((v13 & 0x8000000000000000) == 0)
    goto LABEL_10;
LABEL_13:
  __break(1u);
}

Swift::Void __swiftcall NSTimer.TimerPublisher.Inner.cancel()()
{
  unint64_t *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  os_unfair_lock_s *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t Strong;
  char *v22;
  uint64_t v23;
  os_unfair_lock_s *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(unint64_t, uint64_t);
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  void (*v53)(unint64_t, char *, uint64_t);
  int64_t v54;
  unint64_t v55;
  int64_t v56;
  int64_t v57;
  uint64_t v58;
  int64_t v59;
  char *v60;
  char *v61;
  _QWORD *v62;
  int64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;

  v1 = *v0;
  v2 = type metadata accessor for CombineIdentifier();
  v69 = *(_QWORD *)(v2 - 8);
  v70 = v2;
  MEMORY[0x1E0C80A78](v2);
  v67 = (char *)&v58 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v71 = (char *)&v58 - v5;
  v6 = *(_QWORD *)(v1 + 80);
  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v58 - v12;
  v68 = v1;
  v14 = *(os_unfair_lock_s **)((char *)v0 + *(_QWORD *)(v1 + 120));
  os_unfair_lock_lock(v14);
  v15 = (char *)v0 + *(_QWORD *)(*v0 + 96);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v13, v15, v7);
  v16 = *(_QWORD *)(v6 - 8);
  LODWORD(v1) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v13, 1, v6);
  v17 = v13;
  v18 = v7;
  v19 = v7;
  v20 = *(void (**)(char *, uint64_t))(v8 + 8);
  v20(v17, v19);
  if ((_DWORD)v1 == 1)
  {
    os_unfair_lock_unlock(v14);
    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v15, v18);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v15, 1, 1, v6);
  os_unfair_lock_unlock(v14);
  Strong = swift_weakLoadStrong();
  v22 = v10;
  if (!Strong)
    goto LABEL_9;
  v23 = Strong;
  v24 = *(os_unfair_lock_s **)(Strong + 72);
  os_unfair_lock_lock(v24);
  v25 = *(_QWORD *)(v23 + 64);
  swift_bridgeObjectRetain();
  MEMORY[0x186DA9D64](&protocol conformance descriptor for NSTimer.TimerPublisher.Inner<A>, v68);
  v26 = (uint64_t)v71;
  CustomCombineIdentifierConvertible<>.combineIdentifier.getter();
  swift_bridgeObjectRetain();
  v27 = specialized __RawDictionaryStorage.find<A>(_:)(v26);
  LOBYTE(v26) = v28;
  swift_bridgeObjectRelease();
  v65 = v25;
  v66 = v18;
  if ((v26 & 1) == 0)
  {
    v33 = 0;
    v31 = v70;
    v32 = *(void (**)(unint64_t, uint64_t))(v69 + 8);
    goto LABEL_8;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v30 = *(_QWORD *)(v23 + 64);
  *(_QWORD *)(v23 + 64) = 0x8000000000000000;
  v31 = v70;
  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
LABEL_6:
    v32 = *(void (**)(unint64_t, uint64_t))(v69 + 8);
    v32(*(_QWORD *)(v30 + 48) + *(_QWORD *)(v69 + 72) * v27, v31);
    v33 = *(_QWORD *)(*(_QWORD *)(v30 + 56) + 16 * v27);
    specialized _NativeDictionary._delete(at:)(v27, v30);
    *(_QWORD *)(v23 + 64) = v30;
    swift_bridgeObjectRelease();
LABEL_8:
    v32((unint64_t)v71, v31);
    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v33);
    os_unfair_lock_unlock(v24);
    swift_release();
    swift_bridgeObjectRelease();
    v18 = v66;
LABEL_9:
    v20(v22, v18);
    return;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<CombineIdentifier, NSTimer.TimerPublisher.Side>);
  v34 = (_QWORD *)v30;
  v35 = static _DictionaryStorage.copy(original:)();
  v30 = v35;
  v62 = v34;
  if (!v34[2])
  {
LABEL_43:
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  v36 = (char *)(v35 + 64);
  v37 = 1 << *(_BYTE *)(v30 + 32);
  v60 = (char *)(v62 + 8);
  v61 = v22;
  v38 = (unint64_t)(v37 + 63) >> 6;
  if ((_QWORD *)v30 != v62 || v36 >= &v60[8 * v38])
    memmove(v36, v60, 8 * v38);
  v63 = 0;
  v39 = v62;
  *(_QWORD *)(v30 + 16) = v62[2];
  v40 = 1 << *((_BYTE *)v39 + 32);
  v41 = v39[8];
  v42 = -1;
  if (v40 < 64)
    v42 = ~(-1 << v40);
  v68 = v42 & v41;
  v59 = (unint64_t)(v40 + 63) >> 6;
  v44 = v69;
  v43 = v70;
  v45 = v67;
  while (1)
  {
    v22 = v61;
    if (v68)
    {
      v46 = __clz(__rbit64(v68));
      v68 &= v68 - 1;
      v47 = v46 | (v63 << 6);
      goto LABEL_19;
    }
    v54 = v63 + 1;
    if (__OFADD__(v63, 1))
    {
      __break(1u);
      goto LABEL_45;
    }
    v31 = v70;
    if (v54 >= v59)
      goto LABEL_43;
    v55 = *(_QWORD *)&v60[8 * v54];
    v56 = v63 + 1;
    if (!v55)
    {
      v56 = v63 + 2;
      if (v63 + 2 >= v59)
        goto LABEL_43;
      v55 = *(_QWORD *)&v60[8 * v56];
      if (!v55)
      {
        v56 = v63 + 3;
        if (v63 + 3 >= v59)
          goto LABEL_43;
        v55 = *(_QWORD *)&v60[8 * v56];
        if (!v55)
        {
          v56 = v63 + 4;
          if (v63 + 4 >= v59)
            goto LABEL_43;
          v55 = *(_QWORD *)&v60[8 * v56];
          if (!v55)
          {
            v56 = v63 + 5;
            if (v63 + 5 >= v59)
              goto LABEL_43;
            v55 = *(_QWORD *)&v60[8 * v56];
            if (!v55)
            {
              v56 = v63 + 6;
              if (v63 + 6 >= v59)
                goto LABEL_43;
              v55 = *(_QWORD *)&v60[8 * v56];
              if (!v55)
              {
                v56 = v63 + 7;
                if (v63 + 7 >= v59)
                  goto LABEL_43;
                v55 = *(_QWORD *)&v60[8 * v56];
                if (!v55)
                  break;
              }
            }
          }
        }
      }
    }
LABEL_42:
    v68 = (v55 - 1) & v55;
    v63 = v56;
    v47 = __clz(__rbit64(v55)) + (v56 << 6);
LABEL_19:
    *(_QWORD *)&v64 = v47;
    v48 = v62;
    v49 = *(_QWORD *)(v44 + 72) * v47;
    (*(void (**)(char *, unint64_t, uint64_t))(v44 + 16))(v45, v62[6] + v49, v43);
    v50 = v48[7];
    v51 = 16 * v64;
    v52 = *(_QWORD *)(v30 + 48) + v49;
    v53 = *(void (**)(unint64_t, char *, uint64_t))(v44 + 32);
    v64 = *(_OWORD *)(v50 + 16 * v64);
    v53(v52, v45, v43);
    *(_OWORD *)(*(_QWORD *)(v30 + 56) + v51) = v64;
    swift_retain();
  }
  v57 = v63 + 8;
  if (v63 + 8 >= v59)
    goto LABEL_43;
  v55 = *(_QWORD *)&v60[8 * v57];
  if (v55)
  {
    v56 = v63 + 8;
    goto LABEL_42;
  }
  while (1)
  {
    v56 = v57 + 1;
    if (__OFADD__(v57, 1))
      break;
    v31 = v70;
    v22 = v61;
    if (v56 >= v59)
      goto LABEL_43;
    v55 = *(_QWORD *)&v60[8 * v56];
    ++v57;
    if (v55)
      goto LABEL_42;
  }
LABEL_45:
  __break(1u);
}

void protocol witness for Subscription.request(_:) in conformance NSTimer.TimerPublisher.Inner<A>(uint64_t a1)
{
  NSTimer.TimerPublisher.Inner.request(_:)(a1);
}

void protocol witness for Cancellable.cancel() in conformance NSTimer.TimerPublisher.Inner<A>()
{
  NSTimer.TimerPublisher.Inner.cancel()();
}

unint64_t protocol witness for ConnectablePublisher.connect() in conformance NSTimer.TimerPublisher@<X0>(_QWORD *a1@<X8>)
{
  return NSTimer.TimerPublisher.connect()(a1);
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance NSTimer.TimerPublisher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NSTimer.TimerPublisher.receive<A>(subscriber:)(a1, a2, a3);
}

uint64_t protocol witness for Cancellable.cancel() in conformance CancellableTimer #1 in NSTimer.TimerPublisher.connect()()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  os_unfair_lock_s *v3;

  v1 = *(void **)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(os_unfair_lock_s **)(v2 + 72);
  os_unfair_lock_lock(v3);
  *(_QWORD *)(v2 + 64) = MEMORY[0x1E0DEE9E0];
  os_unfair_lock_unlock(v3);
  objc_msgSend(v1, sel_invalidate);
  return swift_bridgeObjectRelease();
}

uint64_t specialized NSTimer.TimerPublisher.fire(_:)()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  void (*v12)(timespec *);
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  timespec __tp;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = *(os_unfair_lock_s **)(v0 + 72);
  os_unfair_lock_lock(v1);
  v2 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v1);
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  v3 = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  v4 = v2 + 64;
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(v2 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain();
  v9 = 0;
  while (1)
  {
    if (v7)
    {
      v10 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }
    v13 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v13 >= v8)
      goto LABEL_23;
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v9;
    if (!v14)
    {
      v9 = v13 + 1;
      if (v13 + 1 >= v8)
        goto LABEL_23;
      v14 = *(_QWORD *)(v4 + 8 * v9);
      if (!v14)
      {
        v9 = v13 + 2;
        if (v13 + 2 >= v8)
          goto LABEL_23;
        v14 = *(_QWORD *)(v4 + 8 * v9);
        if (!v14)
        {
          v9 = v13 + 3;
          if (v13 + 3 >= v8)
            goto LABEL_23;
          v14 = *(_QWORD *)(v4 + 8 * v9);
          if (!v14)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v14 - 1) & v14;
    v11 = __clz(__rbit64(v14)) + (v9 << 6);
LABEL_5:
    v12 = *(void (**)(timespec *))(*(_QWORD *)(v2 + 56) + 16 * v11);
    *(double *)&__tp.tv_sec = v3;
    swift_retain();
    v12(&__tp);
    swift_release();
  }
  v15 = v13 + 4;
  if (v15 < v8)
  {
    v14 = *(_QWORD *)(v4 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        v9 = v15 + 1;
        if (__OFADD__(v15, 1))
          break;
        if (v9 >= v8)
          goto LABEL_23;
        v14 = *(_QWORD *)(v4 + 8 * v9);
        ++v15;
        if (v14)
          goto LABEL_22;
      }
LABEL_25:
      __break(1u);
    }
    v9 = v15;
    goto LABEL_22;
  }
LABEL_23:
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t specialized NSTimer.TimerPublisher.Inner.init(_:parent:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v5(v1 + *(_QWORD *)(*(_QWORD *)v1 + 96), 1, 1, v3);
  v6 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  *(_QWORD *)(v1 + v6) = static Subscribers.Demand.none.getter();
  swift_weakInit();
  v7 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  v8 = (_DWORD *)swift_slowAlloc();
  *v8 = 0;
  *(_QWORD *)(v1 + v7) = v8;
  v9 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 96);
  v10 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v9, a1, v3);
  v5(v9, 0, 1, v3);
  swift_weakAssign();
  return v1;
}

void partial apply for implicit closure #2 in implicit closure #1 in NSTimer.TimerPublisher.Side.init<A>(_:)(Foundation::Date *a1)
{
  NSTimer.TimerPublisher.Inner.send(_:)(*(Foundation::Date *)&a1->_time);
}

uint64_t method lookup function for NSTimer.TimerPublisher()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NSTimer.TimerPublisher.__allocating_init(interval:tolerance:runLoop:mode:options:)(uint64_t a1, char a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v2 + 136))(a1, a2 & 1);
}

uint64_t type metadata completion function for NSTimer.TimerPublisher.Inner()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

_QWORD *assignWithCopy for NSTimer.TimerPublisher.Side(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for NSTimer.TimerPublisher.Side(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for NSTimer.TimerPublisher.Side()
{
  return &type metadata for NSTimer.TimerPublisher.Side;
}

_QWORD *initializeBufferWithCopyOfBuffer for CancellableTimer #1 in NSTimer.TimerPublisher.connect()(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CancellableTimer #1 in NSTimer.TimerPublisher.connect()(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  return a1;
}

id *assignWithTake for CancellableTimer #1 in NSTimer.TimerPublisher.connect()(id *a1, _OWORD *a2)
{

  *(_OWORD *)a1 = *a2;
  swift_release();
  return a1;
}

void *type metadata accessor for CancellableTimer #1 in NSTimer.TimerPublisher.connect()()
{
  return &unk_1E0F36210;
}

void base witness table accessor for Cancellable in NSTimer.TimerPublisher.Inner<A>()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomCombineIdentifierConvertible in NSTimer.TimerPublisher.Inner<A>()
{
  JUMPOUT(0x186DA9D64);
}

void NSURL.customPlaygroundQuickLook.getter(uint64_t a1@<X8>)
{
  void *v1;
  id v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char v8;

  v3 = objc_msgSend(v1, sel_absoluteString);
  if (v3)
  {
    v4 = v3;
    v5 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

    v8 = 17;
  }
  else
  {
    v8 = 0;
    v7 = 0xEB000000004C5255;
    v5 = 0x206E776F6E6B6E55;
  }
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 32) = v8;
}

void protocol witness for _CustomPlaygroundQuickLookable.customPlaygroundQuickLook.getter in conformance NSURL(uint64_t a1@<X8>)
{
  id *v1;
  id v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char v8;

  v3 = objc_msgSend(*v1, sel_absoluteString);
  if (v3)
  {
    v4 = v3;
    v5 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

    v8 = 17;
  }
  else
  {
    v8 = 0;
    v7 = 0xEB000000004C5255;
    v5 = 0x206E776F6E6B6E55;
  }
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 32) = v8;
}

uint64_t PredicateExpressions.PredicateEvaluate.predicate.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2);
}

uint64_t PredicateExpressions.PredicateEvaluate.input.getter@<X0>(uint64_t TupleTypeMetadata@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  __int128 *v11;
  _OWORD *v12;
  unint64_t v13;
  __int128 v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t result;
  uint64_t *v25;
  int *v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = TupleTypeMetadata;
  v5 = *(_QWORD *)(TupleTypeMetadata + 16);
  if (v5 == 1)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(TupleTypeMetadata + 32) & 0xFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x1E0C80A78](TupleTypeMetadata);
    v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v5)
    {
      v9 = 0;
      v10 = *(_QWORD *)(v3 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v5 < 4)
        goto LABEL_9;
      if ((unint64_t)&v8[-v10] < 0x20)
        goto LABEL_9;
      v9 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      v11 = (__int128 *)(v10 + 16);
      v12 = v8 + 16;
      v13 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v14 = *v11;
        *(v12 - 1) = *(v11 - 1);
        *v12 = v14;
        v11 += 2;
        v12 += 2;
        v13 -= 4;
      }
      while (v13);
      if (v5 != v9)
      {
LABEL_9:
        v15 = v5 - v9;
        v16 = 8 * v9;
        v17 = &v8[8 * v9];
        v18 = (uint64_t *)(v10 + v16);
        do
        {
          v19 = *v18++;
          *(_QWORD *)v17 = v19;
          v17 += 8;
          --v15;
        }
        while (v15);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    v6 = TupleTypeMetadata;
  }
  v20 = MEMORY[0x1E0C80A78](TupleTypeMetadata);
  v22 = (char *)&v32 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v23 + 16))(v22, v2 + *(int *)(v3 + 60), v6, v20);
  if (v5)
  {
    v25 = (uint64_t *)(*(_QWORD *)(v3 + 32) & 0xFFFFFFFFFFFFFFFELL);
    v26 = (int *)(v6 + 32);
    v27 = v5;
    do
    {
      if (v5 == 1)
        v28 = 0;
      else
        v28 = *v26;
      v30 = *v25++;
      v29 = v30;
      v31 = *a2++;
      result = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)(v29 - 8) + 32))(v31, &v22[v28]);
      v26 += 4;
      --v27;
    }
    while (v27);
  }
  return result;
}

void PredicateExpressions.PredicateEvaluate.init(predicate:input:)(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t TupleTypeMetadata;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  __int128 *v18;
  _OWORD *v19;
  unint64_t v20;
  __int128 v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD v27[14];

  v27[5] = a8;
  v27[6] = a5 & 0xFFFFFFFFFFFFFFFELL;
  v27[7] = a2;
  if (a3 == 1)
  {
    TupleTypeMetadata = *(_QWORD *)(a5 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x1E0C80A78](a1);
    v16 = (char *)v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (a3)
    {
      v17 = 0;
      if (a3 < 4)
        goto LABEL_9;
      if ((unint64_t)&v16[-v14] < 0x20)
        goto LABEL_9;
      v17 = a3 & 0xFFFFFFFFFFFFFFFCLL;
      v18 = (__int128 *)(v14 + 16);
      v19 = v16 + 16;
      v20 = a3 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v21 = *v18;
        *(v19 - 1) = *(v18 - 1);
        *v19 = v21;
        v18 += 2;
        v19 += 2;
        v20 -= 4;
      }
      while (v20);
      if (v17 != a3)
      {
LABEL_9:
        v22 = a3 - v17;
        v23 = 8 * v17;
        v24 = &v16[8 * v17];
        v25 = (uint64_t *)(v14 + v23);
        do
        {
          v26 = *v25++;
          *(_QWORD *)v24 = v26;
          v24 += 8;
          --v22;
        }
        while (v22);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  v27[8] = TupleTypeMetadata;
  v27[1] = *(_QWORD *)(TupleTypeMetadata - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata);
  v27[9] = a3;
  v27[10] = a4;
  v27[11] = a5;
  v27[12] = a6;
  v27[13] = a7;
  type metadata accessor for PredicateExpressions.PredicateEvaluate();
}

uint64_t PredicateExpressions.PredicateEvaluate.evaluate(_:)(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  __int128 *v11;
  _OWORD *v12;
  unint64_t v13;
  __int128 v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t TupleTypeMetadata;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __n128 v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char **v64;
  uint64_t v65;
  uint64_t v66;
  char **v67;
  char **v68;
  char **v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  unint64_t v74;
  uint64_t *v75;
  char *v76;
  char *v77;
  unint64_t v78;
  uint64_t v79;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = 8 * v3;
  v78 = v3;
  v73 = a1;
  if (v3 == 1)
  {
    v67 = &v61;
    v71 = *(_QWORD *)(*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL);
    v66 = *(_QWORD *)(v71 - 8);
    MEMORY[0x1E0C80A78](a1);
    v77 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  }
  else
  {
    MEMORY[0x1E0C80A78](a1);
    v7 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
    v8 = (char *)&v61 - v7;
    if (v3)
    {
      v9 = 0;
      v10 = *(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v3 < 4)
        goto LABEL_9;
      if ((unint64_t)&v8[-v10] < 0x20)
        goto LABEL_9;
      v9 = v3 & 0xFFFFFFFFFFFFFFFCLL;
      v11 = (__int128 *)(v10 + 16);
      v12 = v8 + 16;
      v13 = v3 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v14 = *v11;
        *(v12 - 1) = *(v11 - 1);
        *v12 = v14;
        v11 += 2;
        v12 += 2;
        v13 -= 4;
      }
      while (v13);
      if (v3 != v9)
      {
LABEL_9:
        v15 = v3 - v9;
        v16 = 8 * v9;
        v17 = &v8[8 * v9];
        v18 = (uint64_t *)(v10 + v16);
        do
        {
          v19 = *v18++;
          *(_QWORD *)v17 = v19;
          v17 += 8;
          --v15;
        }
        while (v15);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    v67 = &v61;
    v71 = TupleTypeMetadata;
    v66 = *(_QWORD *)(TupleTypeMetadata - 8);
    MEMORY[0x1E0C80A78](TupleTypeMetadata);
    v77 = (char *)&v61 - v21;
    v76 = (char *)&v61;
    MEMORY[0x1E0C80A78](v22);
    if (v3)
    {
      v23 = *(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL;
      v24 = *(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL;
      v25 = (uint64_t *)((char *)&v61 - v7);
      v26 = v78;
      do
      {
        v23 += 8;
        v24 += 8;
        *v25++ = swift_getAssociatedTypeWitness();
        --v26;
      }
      while (v26);
    }
    v3 = v78;
    AssociatedTypeWitness = swift_getTupleTypeMetadata();
  }
  v69 = &v61;
  v70 = AssociatedTypeWitness;
  v65 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v76 = (char *)&v61 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = &v61;
  MEMORY[0x1E0C80A78](v28);
  if (v3)
  {
    v30 = *(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL;
    v31 = *(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL;
    v32 = (uint64_t *)((char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
    v33 = v78;
    do
    {
      v30 += 8;
      v31 += 8;
      *v32++ = swift_getAssociatedTypeWitness();
      --v33;
    }
    while (v33);
  }
  v34 = v78;
  v35 = type metadata accessor for Predicate(0, v78, (uint64_t)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v29);
  v36 = *(_QWORD *)(v35 - 8);
  v37 = MEMORY[0x1E0C80A78](v35);
  v39 = (char *)&v61 - v38;
  v40 = v74;
  v41 = *v73;
  v79 = *v73;
  v42 = v75;
  v43 = (*(uint64_t (**)(uint64_t *, _QWORD, __n128))(*(_QWORD *)(a2 + 40) + 16))(&v79, *(_QWORD *)(a2 + 24), v37);
  if (!v42)
  {
    v61 = v39;
    v62 = v36;
    v63 = v35;
    v64 = &v61;
    v44 = MEMORY[0x1E0C80A78](v43);
    v75 = (uint64_t *)((char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
    v45 = (*(uint64_t (**)(char *, unint64_t, uint64_t, __n128))(v66 + 16))(v77, v40 + *(int *)(a2 + 60), v71, v44);
    if (v34)
    {
      v48 = 0;
      v49 = *(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL;
      v73 = (uint64_t *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL);
      v74 = v49;
      v50 = 32;
      v72 = v41;
      do
      {
        if (v34 == 1)
          v51 = (uint64_t)v76;
        else
          v51 = (uint64_t)&v76[*(int *)(v70 + v50)];
        v52 = *(_QWORD *)(v74 + 8 * v48);
        v53 = v73[v48];
        v54 = *(_QWORD *)(v52 - 8);
        v55 = MEMORY[0x1E0C80A78](v45);
        v57 = (char *)&v61 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *, __n128))(v54 + 16))(v57, v55);
        v79 = v72;
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(v53 + 16))(&v79, v52, v53);
        v45 = (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v57, v52);
        v75[v48++] = v51;
        v50 += 16;
        v34 = v78;
      }
      while (v78 != v48);
    }
    v58 = v63;
    v59 = v61;
    LOBYTE(v34) = Predicate.evaluate(_:)(v75, v63, v46, v47);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v59, v58);
    (*(void (**)(char *, uint64_t))(v65 + 8))(v76, v70);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v77, v71);
  }
  return v34 & 1;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.PredicateEvaluate<A, Pack{repeat B}>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = PredicateExpressions.PredicateEvaluate.evaluate(_:)(a1, a2);
  if (!v3)
    *a3 = result & 1;
  return result;
}

void static PredicateExpressions.build_evaluate<A, B>(_:_:)(uint64_t TupleTypeMetadata@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  __int128 *v17;
  _OWORD *v18;
  unint64_t v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t (*v33)(char *, uint64_t, uint64_t, __n128);
  uint64_t v34;
  char *v35;
  int *v36;
  char **v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  _QWORD v44[3];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v48 = a6;
  v49 = a7;
  v11 = TupleTypeMetadata;
  v45 = a8;
  v47 = a5;
  v12 = (uint64_t *)(a5 & 0xFFFFFFFFFFFFFFFELL);
  v13 = 8 * a3;
  if (a3 == 1)
  {
    v14 = *v12;
  }
  else
  {
    MEMORY[0x1E0C80A78](TupleTypeMetadata);
    v15 = (char *)v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (a3)
    {
      v16 = 0;
      if (a3 < 4)
        goto LABEL_9;
      if ((unint64_t)(v15 - (char *)v12) < 0x20)
        goto LABEL_9;
      v16 = a3 & 0xFFFFFFFFFFFFFFFCLL;
      v17 = (__int128 *)(v12 + 2);
      v18 = v15 + 16;
      v19 = a3 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v20 = *v17;
        *(v18 - 1) = *(v17 - 1);
        *v18 = v20;
        v17 += 2;
        v18 += 2;
        v19 -= 4;
      }
      while (v19);
      if (v16 != a3)
      {
LABEL_9:
        v21 = a3 - v16;
        v22 = v16;
        v23 = &v15[8 * v16];
        v24 = &v12[v22];
        do
        {
          v25 = *v24++;
          *(_QWORD *)v23 = v25;
          v23 += 8;
          --v21;
        }
        while (v21);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    v14 = TupleTypeMetadata;
  }
  MEMORY[0x1E0C80A78](TupleTypeMetadata);
  v27 = (char *)v44 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44[2] = v44;
  v29 = MEMORY[0x1E0C80A78](v28);
  v31 = (char *)v44 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v32 + 16);
  v46 = a4;
  v34 = v33(v31, v11, a4, v29);
  v44[1] = v44;
  MEMORY[0x1E0C80A78](v34);
  v35 = (char *)v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    v36 = (int *)(v14 + 32);
    v37 = (char **)((char *)v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
    v38 = a3;
    do
    {
      if (a3 == 1)
        v39 = 0;
      else
        v39 = *v36;
      v41 = *v12++;
      v40 = v41;
      v42 = &v27[v39];
      v43 = *a2++;
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v42, v43);
      *v37++ = v42;
      v36 += 4;
      --v38;
    }
    while (v38);
  }
  PredicateExpressions.PredicateEvaluate.init(predicate:input:)((uint64_t)v31, (uint64_t)v35, a3, v46, v47, v48, v49, v45);
}

uint64_t PredicateExpressions.PredicateEvaluate.description.getter(uint64_t a1)
{
  Swift::String v2;
  Swift::String v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  __int128 *v10;
  _OWORD *v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  Swift::String v19;
  _QWORD v21[2];

  v21[0] = 0;
  v21[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(43);
  v2._object = (void *)0x800000018230ED10;
  v2._countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v2);
  _print_unlocked<A, B>(_:_:)();
  v3._countAndFlagsBits = 0x3A7475706E69202CLL;
  v3._object = (void *)0xE900000000000020;
  String.append(_:)(v3);
  if (*(_QWORD *)(a1 + 16) != 1)
  {
    MEMORY[0x1E0C80A78](v4);
    v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v5)
    {
      v8 = 0;
      v9 = *(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v5 < 4)
        goto LABEL_8;
      if ((unint64_t)&v7[-v9] < 0x20)
        goto LABEL_8;
      v8 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      v10 = (__int128 *)(v9 + 16);
      v11 = v7 + 16;
      v12 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v13 = *v10;
        *(v11 - 1) = *(v10 - 1);
        *v11 = v13;
        v10 += 2;
        v11 += 2;
        v12 -= 4;
      }
      while (v12);
      if (v5 != v8)
      {
LABEL_8:
        v14 = v5 - v8;
        v15 = 8 * v8;
        v16 = &v7[8 * v8];
        v17 = (uint64_t *)(v9 + v15);
        do
        {
          v18 = *v17++;
          *(_QWORD *)v16 = v18;
          v16 += 8;
          --v14;
        }
        while (v14);
      }
    }
    swift_getTupleTypeMetadata();
  }
  _print_unlocked<A, B>(_:_:)();
  v19._countAndFlagsBits = 41;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  return v21[0];
}

uint64_t PredicateExpressions.PredicateEvaluate<>.encode(to:)(uint64_t TupleTypeMetadata, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  __int128 *v15;
  _OWORD *v16;
  unint64_t v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  _BYTE v48[24];
  uint64_t v49;
  uint64_t v50;

  v47 = a4;
  v7 = (_QWORD *)TupleTypeMetadata;
  v8 = *(_QWORD *)(a2 + 16);
  v44 = a6;
  v45 = v8;
  if (v8 == 1)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x1E0C80A78](TupleTypeMetadata);
    v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v10)
    {
      v13 = 0;
      v14 = *(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v10 < 4)
        goto LABEL_9;
      if ((unint64_t)&v12[-v14] < 0x20)
        goto LABEL_9;
      v13 = v10 & 0xFFFFFFFFFFFFFFFCLL;
      v15 = (__int128 *)(v14 + 16);
      v16 = v12 + 16;
      v17 = v10 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v18 = *v15;
        *(v16 - 1) = *(v15 - 1);
        *v16 = v18;
        v15 += 2;
        v16 += 2;
        v17 -= 4;
      }
      while (v17);
      if (v10 != v13)
      {
LABEL_9:
        v19 = v10 - v13;
        v20 = 8 * v13;
        v21 = &v12[8 * v13];
        v22 = (uint64_t *)(v14 + v20);
        do
        {
          v23 = *v22++;
          *(_QWORD *)v21 = v23;
          v21 += 8;
          --v19;
        }
        while (v19);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    v9 = TupleTypeMetadata;
  }
  v24 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata);
  v26 = (char *)&v41 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(v7, v7[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v48, v49);
  v27 = v46;
  v28 = v50;
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (v28)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
  v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 16))(v26, v27 + *(int *)(a2 + 60), v9);
  v41 = (uint64_t)&v41;
  v42 = v9;
  if (v45)
  {
    v31 = (uint64_t *)(*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL);
    v32 = v45;
    v33 = v44 & 0xFFFFFFFFFFFFFFFELL;
    v34 = 32;
    v43 = v26;
    v44 = v24;
    while (1)
    {
      v46 = v32;
      v50 = 0;
      v47 = &v41;
      v35 = *v31;
      v36 = *(_QWORD *)(*v31 - 8);
      v37 = MEMORY[0x1E0C80A78](v30);
      v39 = (char *)&v41 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, __n128))(v36 + 16))(v39, v37);
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v48, v49);
      v40 = v50;
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
      if (v40)
        break;
      v30 = (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v39, v35);
      v34 += 16;
      v33 += 8;
      ++v31;
      v32 = v46 - 1;
      v26 = v43;
      v24 = v44;
      if (v46 == 1)
        goto LABEL_18;
    }
    (*(void (**)(char *, uint64_t))(v36 + 8))(v39, v35);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v43, v42);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
  }
LABEL_18:
  (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v42);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
}

void PredicateExpressions.PredicateEvaluate<>.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v11;
  uint64_t TupleTypeMetadata;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  __int128 *v19;
  _OWORD *v20;
  unint64_t v21;
  __int128 v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[24];

  v32[8] = a6;
  v11 = a3;
  v32[4] = a8;
  v32[23] = a2;
  if (a2 == 1)
  {
    TupleTypeMetadata = *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x1E0C80A78](a1);
    v17 = (char *)v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v14)
    {
      v18 = 0;
      if (v14 < 4)
        goto LABEL_9;
      if ((unint64_t)&v17[-v15] < 0x20)
        goto LABEL_9;
      v18 = v14 & 0xFFFFFFFFFFFFFFFCLL;
      v19 = (__int128 *)(v15 + 16);
      v20 = v17 + 16;
      v21 = v14 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v22 = *v19;
        *(v20 - 1) = *(v19 - 1);
        *v20 = v22;
        v19 += 2;
        v20 += 2;
        v21 -= 4;
      }
      while (v21);
      if (v18 != v14)
      {
LABEL_9:
        v23 = v14 - v18;
        v24 = 8 * v18;
        v25 = &v17[8 * v18];
        v26 = (uint64_t *)(v15 + v24);
        do
        {
          v27 = *v26++;
          *(_QWORD *)v25 = v27;
          v25 += 8;
          --v23;
        }
        while (v23);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    v11 = a3;
  }
  v32[12] = v32;
  v32[5] = *(_QWORD *)(TupleTypeMetadata - 8);
  v32[6] = TupleTypeMetadata;
  MEMORY[0x1E0C80A78](TupleTypeMetadata);
  v32[15] = (char *)v32 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32[11] = v32;
  MEMORY[0x1E0C80A78](v29);
  v32[7] = (char *)v32 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32[16] = v31;
  v32[17] = v11;
  v32[18] = a4;
  v32[19] = a5;
  v32[20] = a7;
  type metadata accessor for PredicateExpressions.PredicateEvaluate();
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.PredicateEvaluate<A, Pack{repeat B}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  _QWORD v21[4];
  _QWORD v22[4];

  v5 = *(_QWORD *)(*(_QWORD *)a3 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)a3 + 24);
  v7 = MEMORY[0x1E0C80A78](a1);
  v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v9)
  {
    v12 = 0;
    v13 = *(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      *(_QWORD *)&v11[8 * v12] = *(_QWORD *)(*(_QWORD *)(v13 + 8 * v12) + 16);
      ++v12;
    }
    while (v9 != v12);
    MEMORY[0x1E0C80A78](v7);
    v17 = (char *)v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    v18 = 0;
    do
    {
      *(_QWORD *)&v17[8 * v18] = *(_QWORD *)(*(_QWORD *)(v15 + 8 * v18) + 24);
      ++v18;
    }
    while (v14 != v18);
  }
  else
  {
    MEMORY[0x1E0C80A78](v7);
    v17 = (char *)v21 - v19;
  }
  v22[0] = v5;
  v22[1] = v6;
  v22[2] = v11;
  v22[3] = v17;
  *(_QWORD *)(a1 + 16) = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> PredicateExpressions.PredicateEvaluate<A, Pack{repeat B}>, a2, v22);
  v21[0] = v5;
  v21[1] = v6;
  v21[2] = v11;
  v21[3] = v17;
  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> PredicateExpressions.PredicateEvaluate<A, Pack{repeat B}>, a2, v21);
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

void protocol witness for Decodable.init(from:) in conformance PredicateExpressions.PredicateEvaluate<A, Pack{repeat B}>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  PredicateExpressions.PredicateEvaluate<>.init(from:)(a1, a2[2], a2[3], a2[4], a2[5], *(_QWORD *)(a3 - 8), a2[6], a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PredicateExpressions.PredicateEvaluate<A, Pack{repeat B}>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return PredicateExpressions.PredicateEvaluate<>.encode(to:)(a1, a2, a3, *(uint64_t **)(a3 - 16), a5, *(_QWORD *)(a3 - 32));
}

uint64_t *initializeBufferWithCopyOfBuffer for PredicateExpressions.PredicateEvaluate(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t TupleTypeMetadata;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  __int128 *v18;
  _OWORD *v19;
  unint64_t v20;
  __int128 v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v28;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = (*(uint64_t (**)(uint64_t *, uint64_t *))(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 16))(a1, a2);
    v8 = *(int *)(a3 + 60);
    v9 = (char *)v4 + v8;
    v10 = (char *)a2 + v8;
    if (*(_QWORD *)(a3 + 16) == 1)
    {
      TupleTypeMetadata = *(_QWORD *)(*(_QWORD *)(a3 + 32) & 0xFFFFFFFFFFFFFELL);
    }
    else
    {
      MEMORY[0x1E0C80A78](v7);
      v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
      if (v13)
      {
        v16 = 0;
        v17 = *(_QWORD *)(a3 + 32) & 0xFFFFFFFFFFFFFFFELL;
        if (v13 < 4)
          goto LABEL_11;
        if ((unint64_t)&v15[-v17] < 0x20)
          goto LABEL_11;
        v16 = v13 & 0xFFFFFFFFFFFFFFFCLL;
        v18 = (__int128 *)(v17 + 16);
        v19 = v15 + 16;
        v20 = v13 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          v21 = *v18;
          *(v19 - 1) = *(v18 - 1);
          *v19 = v21;
          v18 += 2;
          v19 += 2;
          v20 -= 4;
        }
        while (v20);
        if (v13 != v16)
        {
LABEL_11:
          v22 = v13 - v16;
          v23 = 8 * v16;
          v24 = &v15[8 * v16];
          v25 = (uint64_t *)(v17 + v23);
          do
          {
            v26 = *v25++;
            *(_QWORD *)v24 = v26;
            v24 += 8;
            --v22;
          }
          while (v22);
        }
      }
      TupleTypeMetadata = swift_getTupleTypeMetadata();
    }
    (*(void (**)(char *, char *))(*(_QWORD *)(TupleTypeMetadata - 8) + 16))(v9, v10);
  }
  return v4;
}

uint64_t destroy for PredicateExpressions.PredicateEvaluate(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t TupleTypeMetadata;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v22;

  v4 = (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))();
  v5 = *(int *)(a2 + 60);
  if (*(_QWORD *)(a2 + 16) == 1)
  {
    TupleTypeMetadata = *(_QWORD *)(*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x1E0C80A78](v4);
    v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v7)
    {
      v10 = 0;
      v11 = *(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v7 < 4)
        goto LABEL_9;
      if ((unint64_t)&v9[-v11] < 0x20)
        goto LABEL_9;
      v10 = v7 & 0xFFFFFFFFFFFFFFFCLL;
      v12 = (__int128 *)(v11 + 16);
      v13 = v9 + 16;
      v14 = v7 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v15 = *v12;
        *(v13 - 1) = *(v12 - 1);
        *v13 = v15;
        v12 += 2;
        v13 += 2;
        v14 -= 4;
      }
      while (v14);
      if (v7 != v10)
      {
LABEL_9:
        v16 = v7 - v10;
        v17 = 8 * v10;
        v18 = &v9[8 * v10];
        v19 = (uint64_t *)(v11 + v17);
        do
        {
          v20 = *v19++;
          *(_QWORD *)v18 = v20;
          v18 += 8;
          --v16;
        }
        while (v16);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(TupleTypeMetadata - 8) + 8))(a1 + v5);
}

uint64_t initializeWithCopy for PredicateExpressions.PredicateEvaluate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t TupleTypeMetadata;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  __int128 *v14;
  _OWORD *v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v24;

  v6 = (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 16))();
  v7 = *(int *)(a3 + 60);
  if (*(_QWORD *)(a3 + 16) == 1)
  {
    TupleTypeMetadata = *(_QWORD *)(*(_QWORD *)(a3 + 32) & 0xFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x1E0C80A78](v6);
    v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v9)
    {
      v12 = 0;
      v13 = *(_QWORD *)(a3 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v9 < 4)
        goto LABEL_9;
      if ((unint64_t)&v11[-v13] < 0x20)
        goto LABEL_9;
      v12 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      v14 = (__int128 *)(v13 + 16);
      v15 = v11 + 16;
      v16 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        *v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v9 != v12)
      {
LABEL_9:
        v18 = v9 - v12;
        v19 = 8 * v12;
        v20 = &v11[8 * v12];
        v21 = (uint64_t *)(v13 + v19);
        do
        {
          v22 = *v21++;
          *(_QWORD *)v20 = v22;
          v20 += 8;
          --v18;
        }
        while (v18);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata - 8) + 16))(a1 + v7, a2 + v7);
  return a1;
}

uint64_t assignWithCopy for PredicateExpressions.PredicateEvaluate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t TupleTypeMetadata;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  __int128 *v14;
  _OWORD *v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v24;

  v6 = (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 24))();
  v7 = *(int *)(a3 + 60);
  if (*(_QWORD *)(a3 + 16) == 1)
  {
    TupleTypeMetadata = *(_QWORD *)(*(_QWORD *)(a3 + 32) & 0xFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x1E0C80A78](v6);
    v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v9)
    {
      v12 = 0;
      v13 = *(_QWORD *)(a3 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v9 < 4)
        goto LABEL_9;
      if ((unint64_t)&v11[-v13] < 0x20)
        goto LABEL_9;
      v12 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      v14 = (__int128 *)(v13 + 16);
      v15 = v11 + 16;
      v16 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        *v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v9 != v12)
      {
LABEL_9:
        v18 = v9 - v12;
        v19 = 8 * v12;
        v20 = &v11[8 * v12];
        v21 = (uint64_t *)(v13 + v19);
        do
        {
          v22 = *v21++;
          *(_QWORD *)v20 = v22;
          v20 += 8;
          --v18;
        }
        while (v18);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata - 8) + 24))(a1 + v7, a2 + v7);
  return a1;
}

uint64_t initializeWithTake for PredicateExpressions.PredicateEvaluate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t TupleTypeMetadata;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  __int128 *v14;
  _OWORD *v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v24;

  v6 = (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 32))();
  v7 = *(int *)(a3 + 60);
  if (*(_QWORD *)(a3 + 16) == 1)
  {
    TupleTypeMetadata = *(_QWORD *)(*(_QWORD *)(a3 + 32) & 0xFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x1E0C80A78](v6);
    v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v9)
    {
      v12 = 0;
      v13 = *(_QWORD *)(a3 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v9 < 4)
        goto LABEL_9;
      if ((unint64_t)&v11[-v13] < 0x20)
        goto LABEL_9;
      v12 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      v14 = (__int128 *)(v13 + 16);
      v15 = v11 + 16;
      v16 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        *v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v9 != v12)
      {
LABEL_9:
        v18 = v9 - v12;
        v19 = 8 * v12;
        v20 = &v11[8 * v12];
        v21 = (uint64_t *)(v13 + v19);
        do
        {
          v22 = *v21++;
          *(_QWORD *)v20 = v22;
          v20 += 8;
          --v18;
        }
        while (v18);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata - 8) + 32))(a1 + v7, a2 + v7);
  return a1;
}

uint64_t assignWithTake for PredicateExpressions.PredicateEvaluate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t TupleTypeMetadata;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  __int128 *v14;
  _OWORD *v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v24;

  v6 = (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 40))();
  v7 = *(int *)(a3 + 60);
  if (*(_QWORD *)(a3 + 16) == 1)
  {
    TupleTypeMetadata = *(_QWORD *)(*(_QWORD *)(a3 + 32) & 0xFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x1E0C80A78](v6);
    v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v9)
    {
      v12 = 0;
      v13 = *(_QWORD *)(a3 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v9 < 4)
        goto LABEL_9;
      if ((unint64_t)&v11[-v13] < 0x20)
        goto LABEL_9;
      v12 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      v14 = (__int128 *)(v13 + 16);
      v15 = v11 + 16;
      v16 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        *v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v9 != v12)
      {
LABEL_9:
        v18 = v9 - v12;
        v19 = 8 * v12;
        v20 = &v11[8 * v12];
        v21 = (uint64_t *)(v13 + v19);
        do
        {
          v22 = *v21++;
          *(_QWORD *)v20 = v22;
          v20 += 8;
          --v18;
        }
        while (v18);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata - 8) + 40))(a1 + v7, a2 + v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.PredicateEvaluate()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_181E63694(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t TupleTypeMetadata;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  __int128 *v14;
  _OWORD *v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 48))(a1, a2);
  if (*(_QWORD *)(a3 + 16) == 1)
  {
    TupleTypeMetadata = *(_QWORD *)(*(_QWORD *)(a3 + 32) & 0xFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x1E0C80A78](a1);
    v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v9)
    {
      v12 = 0;
      v13 = *(_QWORD *)(a3 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v9 < 4)
        goto LABEL_11;
      if ((unint64_t)&v11[-v13] < 0x20)
        goto LABEL_11;
      v12 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      v14 = (__int128 *)(v13 + 16);
      v15 = v11 + 16;
      v16 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        *v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v9 != v12)
      {
LABEL_11:
        v18 = v9 - v12;
        v19 = 8 * v12;
        v20 = &v11[8 * v12];
        v21 = (uint64_t *)(v13 + v19);
        do
        {
          v22 = *v21++;
          *(_QWORD *)v20 = v22;
          v20 += 8;
          --v18;
        }
        while (v18);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata - 8) + 48))(a1 + *(int *)(a3 + 60), a2);
}

uint64_t storeEnumTagSinglePayload for PredicateExpressions.PredicateEvaluate()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_181E637F0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t TupleTypeMetadata;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  __int128 *v15;
  _OWORD *v16;
  unint64_t v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v7 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 56))(a1, a2, a2);
  if (*(_QWORD *)(a4 + 16) == 1)
  {
    TupleTypeMetadata = *(_QWORD *)(*(_QWORD *)(a4 + 32) & 0xFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x1E0C80A78](a1);
    v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v10)
    {
      v13 = 0;
      v14 = *(_QWORD *)(a4 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v10 < 4)
        goto LABEL_11;
      if ((unint64_t)&v12[-v14] < 0x20)
        goto LABEL_11;
      v13 = v10 & 0xFFFFFFFFFFFFFFFCLL;
      v15 = (__int128 *)(v14 + 16);
      v16 = v12 + 16;
      v17 = v10 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v18 = *v15;
        *(v16 - 1) = *(v15 - 1);
        *v16 = v18;
        v15 += 2;
        v16 += 2;
        v17 -= 4;
      }
      while (v17);
      if (v10 != v13)
      {
LABEL_11:
        v19 = v10 - v13;
        v20 = 8 * v13;
        v21 = &v12[8 * v13];
        v22 = (uint64_t *)(v14 + v20);
        do
        {
          v23 = *v22++;
          *(_QWORD *)v21 = v23;
          v21 += 8;
          --v19;
        }
        while (v19);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata - 8) + 56))(a1 + *(int *)(a4 + 60), a2, a2);
}

BOOL static AttributeContainer.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v3 = a2[1];
  return (specialized static Dictionary<>.== infix(_:_:)(*a1, *a2) & 1) != 0
      && (specialized static Set.== infix(_:_:)(v2, v3) & 1) != 0;
}

uint64_t AttributeContainer.Builder.callAsFunction(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _BYTE v28[72];

  v26 = a1;
  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v25 - v14;
  v17 = *v3;
  v16 = v3[1];
  v27 = a3;
  *a3 = v17;
  a3[1] = v16;
  v18 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v18 + 16))((char *)&v25 - v14, v26, AssociatedTypeWitness, v13);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, AssociatedTypeWitness);
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, v15, v8);
  v19 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v20 = v19(v6, v5);
  v22 = v21;
  static AttributedString._AttributeValue.wrapIfPresent<A>(_:for:)((uint64_t)v11, v6, v5, (uint64_t)v28);
  specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)v28, v20, v22);
  swift_bridgeObjectRelease();
  v23 = *(void (**)(char *, uint64_t))(v9 + 8);
  v23(v11, v8);
  return ((uint64_t (*)(char *, uint64_t))v23)(v15, v8);
}

unint64_t specialized static Dictionary<>.== infix(_:_:)(unint64_t result, uint64_t a2)
{
  unint64_t v3;
  int64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  char v16;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v12 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return 1;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return 1;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
          break;
      }
    }
LABEL_21:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    v15 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v11);
    result = specialized __RawDictionaryStorage.find<A>(_:)(*(_DWORD *)(*(_QWORD *)(v3 + 48) + 4 * v11));
    if ((v16 & 1) == 0 || *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * result) != v15)
      return 0;
  }
  v14 = v12 + 3;
  if (v14 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_21;
  }
LABEL_27:
  __break(1u);
  return result;
}

Swift::Int specialized static Set.== infix(_:_:)(Swift::Int result, uint64_t a2)
{
  Swift::Int v3;
  int64_t v4;
  Swift::Int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  Swift::UInt v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 56;
  v6 = 1 << *(_BYTE *)(result + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(result + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  v10 = a2 + 56;
  do
  {
LABEL_7:
    if (v8)
    {
      v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v12 = v11 | (v4 << 6);
      goto LABEL_23;
    }
    v13 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
LABEL_33:
      __break(1u);
      return result;
    }
    if (v13 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v13);
    ++v4;
    if (v14)
      goto LABEL_22;
    v4 = v13 + 1;
    if (v13 + 1 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    if (v14)
      goto LABEL_22;
    v4 = v13 + 2;
    if (v13 + 2 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    if (v14)
      goto LABEL_22;
    v15 = v13 + 3;
    if (v15 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        v4 = v15 + 1;
        if (__OFADD__(v15, 1))
          goto LABEL_33;
        if (v4 >= v9)
          return 1;
        v14 = *(_QWORD *)(v5 + 8 * v4);
        ++v15;
        if (v14)
          goto LABEL_22;
      }
    }
    v4 = v15;
LABEL_22:
    v8 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v4 << 6);
LABEL_23:
    v16 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v12);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v16);
    result = Hasher._finalize()();
    v17 = -1 << *(_BYTE *)(a2 + 32);
    v18 = result & ~v17;
    if (((*(_QWORD *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
      return 0;
    v19 = *(_QWORD *)(a2 + 48);
  }
  while (*(unsigned __int8 *)(v19 + v18) == (_DWORD)v16);
  v20 = ~v17;
  while (1)
  {
    v18 = (v18 + 1) & v20;
    if (((*(_QWORD *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
      return 0;
    if (*(unsigned __int8 *)(v19 + v18) == (_DWORD)v16)
      goto LABEL_7;
  }
}

uint64_t AttributeContainer.subscript.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;

  v6 = *v3;
  v7 = *(_QWORD *)(*MEMORY[0x1E0DEE2A8] + *a1 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  AttributedString._AttributeStorage.subscript.getter(v6, v7, a2, a3);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void static AttributeContainer.subscript.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0DEE9E8];
  *a1 = MEMORY[0x1E0DEE9E0];
  a1[1] = v1;
}

uint64_t AttributeContainer.subscript.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t *v3;

  return AttributedString._AttributeStorage.subscript.getter(*v3, a1, a2, a3);
}

uint64_t AttributeContainer.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  _BYTE v18[72];

  swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = &v18[-v10 - 8];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v8 + 16))(&v18[-v10 - 8], a1, v7, v9);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4);
  v14 = v13;
  static AttributedString._AttributeValue.wrapIfPresent<A>(_:for:)((uint64_t)v11, a3, a4, (uint64_t)v18);
  specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)v18, v12, v14);
  swift_bridgeObjectRelease();
  v15 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
  v15((uint64_t)v11, v7);
  return v15(a1, v7);
}

void (*AttributeContainer.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t *v4;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  void *v12;

  v8 = malloc(0x40uLL);
  *a1 = v8;
  v8[1] = a4;
  v8[2] = v4;
  *v8 = a3;
  swift_getAssociatedTypeWitness();
  v9 = type metadata accessor for Optional();
  v8[3] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[4] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v8[5] = malloc(v11);
  v8[6] = malloc(v11);
  v12 = malloc(v11);
  v8[7] = v12;
  AttributedString._AttributeStorage.subscript.getter(*v4, a3, a4, (uint64_t)v12);
  return AttributeContainer.subscript.modify;
}

void AttributeContainer.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t *v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void (*v14)(void *, uint64_t);
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE v19[72];

  v3 = *a1;
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t))((*a1)[4] + 16);
  v4((*a1)[6], v3[7], v3[3]);
  v5 = (void *)v3[6];
  v6 = (void *)v3[7];
  v7 = (void *)v3[5];
  v18 = v3[4];
  v8 = v3[3];
  v9 = *v3;
  v10 = v3[1];
  if ((a2 & 1) != 0)
  {
    v4((uint64_t)v7, (uint64_t)v5, v3[3]);
    v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 24))(v9, v10);
    v13 = v12;
    static AttributedString._AttributeValue.wrapIfPresent<A>(_:for:)((uint64_t)v7, v9, v10, (uint64_t)v19);
    specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)v19, v11, v13);
    swift_bridgeObjectRelease();
    v14 = *(void (**)(void *, uint64_t))(v18 + 8);
    v14(v7, v8);
  }
  else
  {
    v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 24))(*v3, v3[1]);
    v17 = v16;
    static AttributedString._AttributeValue.wrapIfPresent<A>(_:for:)((uint64_t)v5, v9, v10, (uint64_t)v19);
    specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)v19, v15, v17);
    swift_bridgeObjectRelease();
    v14 = *(void (**)(void *, uint64_t))(v18 + 8);
  }
  v14(v5, v8);
  v14(v6, v8);
  free(v6);
  free(v5);
  free(v7);
  free(v3);
}

uint64_t key path getter for AttributeContainer.subscript<A>(dynamicMember:) : <A>AttributeContainerA@<X0>(_QWORD **a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;

  v4 = *(uint64_t *)((char *)a1 + a2 - 8);
  v5 = *a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  AttributeContainer.subscript.getter(v5, v4, a3);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*AttributeContainer.subscript.modify(_QWORD *a1, _QWORD *a2, uint64_t a3))(uint64_t a1, char a2)
{
  uint64_t *v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  void *v12;
  uint64_t v13;

  v7 = malloc(0x50uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *v7 = a2;
  v8 = *(_QWORD *)(*MEMORY[0x1E0DEE2A8] + *a2 + 8);
  v7[3] = v8;
  swift_getAssociatedTypeWitness();
  v9 = type metadata accessor for Optional();
  v7[4] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v7[5] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v7[6] = malloc(v11);
  v7[7] = malloc(v11);
  v7[8] = malloc(v11);
  v12 = malloc(v11);
  v7[9] = v12;
  v13 = *v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  AttributedString._AttributeStorage.subscript.getter(v13, v8, a3, (uint64_t)v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return AttributeContainer.subscript.modify;
}

void AttributeContainer.subscript.modify(uint64_t a1, char a2)
{
  _QWORD *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void (*v7)(void *, void *, uint64_t);
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void (*v17)(void *, uint64_t);
  void *v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  _BYTE v26[72];

  v3 = *(_QWORD **)a1;
  v4 = *(void **)(*(_QWORD *)a1 + 64);
  v5 = *(void **)(*(_QWORD *)a1 + 56);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v7 = *(void (**)(void *, void *, uint64_t))(*(_QWORD *)(*(_QWORD *)a1 + 40) + 16);
  v7(v4, *(void **)(*(_QWORD *)a1 + 72), v6);
  v7(v5, v4, v6);
  v8 = (void *)v3[7];
  v24 = (void *)v3[9];
  v25 = (void *)v3[8];
  v9 = (void *)v3[6];
  v23 = v3[5];
  v10 = v3[3];
  v11 = v3[4];
  v12 = v3[1];
  if ((a2 & 1) != 0)
  {
    v7(v9, v8, v3[4]);
    v13 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 24);
    swift_retain();
    v14 = v13(v10, v12);
    v16 = v15;
    static AttributedString._AttributeValue.wrapIfPresent<A>(_:for:)((uint64_t)v9, v10, v12, (uint64_t)v26);
    specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)v26, v14, v16);
    swift_bridgeObjectRelease();
    v17 = *(void (**)(void *, uint64_t))(v23 + 8);
    v17(v9, v11);
    v17(v8, v11);
    swift_release();
    v18 = v25;
    v17(v25, v11);
  }
  else
  {
    v19 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 24);
    swift_retain();
    v20 = v19(v10, v12);
    v22 = v21;
    static AttributedString._AttributeValue.wrapIfPresent<A>(_:for:)((uint64_t)v8, v10, v12, (uint64_t)v26);
    specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)v26, v20, v22);
    swift_bridgeObjectRelease();
    v17 = *(void (**)(void *, uint64_t))(v23 + 8);
    v17(v8, v11);
    v18 = v25;
    v17(v25, v11);
    swift_release();
  }
  v17(v24, v11);
  free(v24);
  free(v18);
  free(v8);
  free(v9);
  free(v3);
}

double key path getter for AttributeContainer.subscript<A>(dynamicMember:) : <A>AttributeContainerA@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;
  _OWORD v4[2];

  AttributeContainer.subscript.getter(v4);
  result = *(double *)v4;
  v3 = v4[1];
  *a1 = v4[0];
  a1[1] = v3;
  return result;
}

uint64_t key path setter for AttributeContainer.subscript<A>(dynamicMember:) : <A>AttributeContainerA(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t **);
  _QWORD *v6;
  _QWORD v8[4];

  v1 = *a1;
  v2 = a1[1];
  v4 = a1[2];
  v3 = a1[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = AttributeContainer.subscript.modify(v8);
  *v6 = v1;
  v6[1] = v2;
  v6[2] = v4;
  v6[3] = v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(_QWORD *, _QWORD))v5)(v8, 0);
}

uint64_t AttributeContainer.subscript.setter(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  _OWORD v5[4];
  uint64_t v6;

  v1 = *a1;
  v3 = a1[2];
  v2 = a1[3];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v2)
  {
    v6 = 0;
    memset(v5, 0, sizeof(v5));
    swift_bridgeObjectRetain();
    specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)v5, v3, v2);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    LOBYTE(v5[0]) = 0;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized AttributedString._AttributeStorage.mergeIn(_:mergePolicy:)(v1, (char *)v5);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
  }
  return swift_bridgeObjectRelease_n();
}

uint64_t AttributeContainer.merge(_:mergePolicy:)(uint64_t *a1, char *a2)
{
  uint64_t v2;
  char v4;

  v2 = *a1;
  v4 = *a2;
  return specialized AttributedString._AttributeStorage.mergeIn(_:mergePolicy:)(v2, &v4);
}

uint64_t AttributeContainer.merging(_:mergePolicy:)@<X0>(uint64_t *a1@<X0>, char *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v10;

  v5 = *a1;
  v6 = *a2;
  v7 = *v3;
  v8 = v3[1];
  *a3 = v7;
  a3[1] = v8;
  v10 = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return specialized AttributedString._AttributeStorage.mergeIn(_:mergePolicy:)(v5, &v10);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AttributeContainer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v3 = a2[1];
  return (specialized static Dictionary<>.== infix(_:_:)(*a1, *a2) & 1) != 0
      && (specialized static Set.== infix(_:_:)(v2, v3) & 1) != 0;
}

uint64_t AttributeContainer.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v4 = *v1;
  v3 = v1[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v4);
  specialized Set.hash(into:)(a1, v3);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

Swift::Int AttributeContainer.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v4, v1);
  specialized Set.hash(into:)((uint64_t)v4, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AttributeContainer()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v4, v1);
  specialized Set.hash(into:)((uint64_t)v4, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttributeContainer(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v4 = *v1;
  v3 = v1[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v4);
  specialized Set.hash(into:)(a1, v3);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AttributeContainer()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v4, v1);
  specialized Set.hash(into:)((uint64_t)v4, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t AttributeContainer.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  void *v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  Swift::String v21;
  char v22[40];
  Swift::String v23;
  Swift::String v24;
  _OWORD v25[4];
  uint64_t v26;
  Swift::String v27;
  _OWORD v28[4];
  uint64_t v29;
  Swift::String v30;

  v1 = *v0;
  v30._countAndFlagsBits = 0;
  v30._object = (void *)0xE000000000000000;
  v2 = v1 + 64;
  v3 = 1 << *(_BYTE *)(v1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  while (1)
  {
    if (v5)
    {
      v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }
    v18 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v18 >= v6)
      goto LABEL_23;
    v19 = *(_QWORD *)(v2 + 8 * v18);
    ++v8;
    if (!v19)
    {
      v8 = v18 + 1;
      if (v18 + 1 >= v6)
        goto LABEL_23;
      v19 = *(_QWORD *)(v2 + 8 * v8);
      if (!v19)
      {
        v8 = v18 + 2;
        if (v18 + 2 >= v6)
          goto LABEL_23;
        v19 = *(_QWORD *)(v2 + 8 * v8);
        if (!v19)
        {
          v8 = v18 + 3;
          if (v18 + 3 >= v6)
            goto LABEL_23;
          v19 = *(_QWORD *)(v2 + 8 * v8);
          if (!v19)
            break;
        }
      }
    }
LABEL_22:
    v5 = (v19 - 1) & v19;
    v10 = __clz(__rbit64(v19)) + (v8 << 6);
LABEL_5:
    v11 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v10);
    v13 = *v11;
    v12 = (void *)v11[1];
    outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v1 + 56) + 72 * v10, (uint64_t)v28);
    v27._countAndFlagsBits = v13;
    v27._object = v12;
    v25[1] = v28[1];
    v25[2] = v28[2];
    v25[3] = v28[3];
    v26 = v29;
    v24 = v27;
    v25[0] = v28[0];
    v23._countAndFlagsBits = 9;
    v23._object = (void *)0xE100000000000000;
    v14 = v27;
    swift_bridgeObjectRetain();
    String.append(_:)(v14);
    v15._countAndFlagsBits = 2112800;
    v15._object = (void *)0xE300000000000000;
    String.append(_:)(v15);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v25, (uint64_t)v22);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    v16._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._countAndFlagsBits = 10;
    v17._object = (void *)0xE100000000000000;
    String.append(_:)(v17);
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    result = outlined destroy of Any?((uint64_t)&v24, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
  }
  v20 = v18 + 4;
  if (v20 >= v6)
  {
LABEL_23:
    swift_release();
    v27._countAndFlagsBits = 2683;
    v27._object = (void *)0xE200000000000000;
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    v21._countAndFlagsBits = 125;
    v21._object = (void *)0xE100000000000000;
    String.append(_:)(v21);
    return v27._countAndFlagsBits;
  }
  v19 = *(_QWORD *)(v2 + 8 * v20);
  if (v19)
  {
    v8 = v20;
    goto LABEL_22;
  }
  while (1)
  {
    v8 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v8 >= v6)
      goto LABEL_23;
    v19 = *(_QWORD *)(v2 + 8 * v8);
    ++v20;
    if (v19)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeContainer and conformance AttributeContainer()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeContainer and conformance AttributeContainer;
  if (!lazy protocol witness table cache variable for type AttributeContainer and conformance AttributeContainer)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeContainer, &type metadata for AttributeContainer);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeContainer and conformance AttributeContainer);
  }
  return result;
}

uint64_t sub_181E65C40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized AttributeContainer.subscript.setter(a1, *(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8));
}

uint64_t sub_181E65C68()
{
  return 16;
}

__n128 sub_181E65C74(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_181E65C88()
{
  return 16;
}

__n128 sub_181E65C94(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata accessor for AttributeContainer.Builder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AttributeContainer.Builder);
}

uint64_t PredicateExpressions.Negation.wrapped.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t PredicateExpressions.Negation.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t PredicateExpressions.Negation.evaluate(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t v5;
  uint64_t var1;

  v5 = *a1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t *, _QWORD))(*(_QWORD *)(a2 + 24) + 16))(&var1, &v5, *(_QWORD *)(a2 + 16));
  if (!v2)
    v3 = var1 ^ 1;
  return v3 & 1;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.Negation<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = PredicateExpressions.Negation.evaluate(_:)(a1, a2);
  if (!v3)
    *a3 = result & 1;
  return result;
}

uint64_t static PredicateExpressions.build_Negation<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
}

uint64_t PredicateExpressions.Negation.description.getter()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(21);
  v0._object = (void *)0x800000018230ED30;
  v0._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 41;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t PredicateExpressions.Negation<>.encode(to:)(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t PredicateExpressions.Negation<>.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[4];
  char *v27;

  v23 = a4;
  v24 = *(_QWORD *)(a2 - 8);
  v25 = a3;
  MEMORY[0x1E0C80A78](a1);
  v27 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PredicateExpressions.Negation(0, v8, v9, v10);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v19 - v13;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v4)
  {
    v20 = v14;
    v21 = v12;
    v22 = v11;
    v15 = v24;
    __swift_project_boxed_opaque_existential_1(v26, v26[3]);
    v16 = v27;
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    v17 = v20;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v20, v16, a2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
    (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(v23, v17, v22);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.Negation<A>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return PredicateExpressions.Negation<>.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8), a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.Negation<A>(_QWORD *a1)
{
  return PredicateExpressions.Negation<>.encode(to:)(a1);
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.Negation(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_181E66190 + 4 * byte_182166310[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for PredicateExpressions.Negation(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t AsyncUnicodeScalarSequence.AsyncIterator.next()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t AsyncUnicodeScalarSequence.AsyncIterator.next()()
{
  _QWORD *v0;
  char *v1;
  _QWORD *v2;
  char v4;
  uint64_t v5;

  v1 = (char *)(v0[3] + *(int *)(v0[2] + 36));
  if ((v1[1] & 1) != 0)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    v2 = (_QWORD *)swift_task_alloc();
    v0[5] = v2;
    *v2 = v0;
    v2[1] = AsyncUnicodeScalarSequence.AsyncIterator.next();
    return dispatch thunk of AsyncIteratorProtocol.next()();
  }
  else
  {
    v4 = *v1;
    *(_WORD *)v1 = 256;
    v5 = swift_task_alloc();
    v0[4] = v5;
    *(_QWORD *)v5 = v0;
    *(_QWORD *)(v5 + 8) = AsyncUnicodeScalarSequence.AsyncIterator.next();
    *(_OWORD *)(v5 + 16) = *((_OWORD *)v0 + 1);
    *(_BYTE *)(v5 + 86) = v4;
    return swift_task_switch();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 48) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v4;

  if ((*(_BYTE *)(v0 + 65) & 1) != 0)
  {
    v1 = 0;
    return (*(uint64_t (**)(unint64_t))(v0 + 8))(v1 | ((unint64_t)*(unsigned __int8 *)(v0 + 65) << 32));
  }
  v1 = *(unsigned __int8 *)(v0 + 64);
  v2 = v1;
  if (((char)v1 & 0x80000000) == 0)
    return (*(uint64_t (**)(unint64_t))(v0 + 8))(v1 | ((unint64_t)*(unsigned __int8 *)(v0 + 65) << 32));
  v4 = swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v4;
  *(_QWORD *)v4 = v0;
  *(_QWORD *)(v4 + 8) = AsyncUnicodeScalarSequence.AsyncIterator.next();
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(v0 + 16);
  *(_BYTE *)(v4 + 86) = v2;
  return swift_task_switch();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AsyncUnicodeScalarSequence.AsyncIterator.next()(unint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v4 + 8))();
  else
    return (*(uint64_t (**)(unint64_t))(v4 + 8))(a1 | ((HIDWORD(a1) & 1) << 32));
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v4 + 8))();
  else
    return (*(uint64_t (**)(unint64_t))(v4 + 8))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t AsyncUnicodeScalarSequence.makeAsyncIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, __n128))(v7 + 16))((char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  v8 = *(_QWORD *)(a1 + 24);
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  result = type metadata accessor for AsyncUnicodeScalarSequence.AsyncIterator(0, v4, v8, v9);
  *(_WORD *)(a2 + *(int *)(result + 36)) = 256;
  return result;
}

uint64_t AsyncUnicodeScalarSequence.AsyncIterator._base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, v1, AssociatedTypeWitness);
}

uint64_t AsyncUnicodeScalarSequence.AsyncIterator._base.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 40))(v1, a1, AssociatedTypeWitness);
}

uint64_t (*AsyncUnicodeScalarSequence.AsyncIterator._base.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t AsyncUnicodeScalarSequence.AsyncIterator._leftover.getter(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 36)) | (*(unsigned __int8 *)(v1 + *(int *)(a1 + 36) + 1) << 8);
}

uint64_t AsyncUnicodeScalarSequence.AsyncIterator._leftover.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _BYTE *v3;

  v3 = (_BYTE *)(v2 + *(int *)(a2 + 36));
  *v3 = result;
  v3[1] = BYTE1(result) & 1;
  return result;
}

uint64_t (*AsyncUnicodeScalarSequence.AsyncIterator._leftover.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

Swift::Int_optional __swiftcall AsyncUnicodeScalarSequence.AsyncIterator._expectedContinuationCountForByte(_:)(Swift::UInt8 a1)
{
  int v1;
  int v2;
  BOOL v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  Swift::Int v7;
  Swift::Bool v8;
  Swift::Int_optional result;

  v1 = a1 & 0xE0;
  v2 = a1 & 0xF0;
  v3 = (a1 & 0x80u) != 0;
  v4 = 3;
  if ((a1 & 0xF8) == 0xF0)
    v3 = 0;
  else
    v4 = 0;
  v5 = v2 == 224;
  if (v2 == 224)
    v6 = 2;
  else
    v6 = v4;
  if (v5)
    v3 = 0;
  if (v1 == 192)
    v7 = 1;
  else
    v7 = v6;
  v8 = v1 != 192 && v3;
  result.value = v7;
  result.is_nil = v8;
  return result;
}

uint64_t AsyncUnicodeScalarSequence.AsyncIterator._nextComplexScalar(_:)(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + 16) = a2;
  *(_QWORD *)(v3 + 24) = v2;
  *(_BYTE *)(v3 + 86) = a1;
  return swift_task_switch();
}

uint64_t AsyncUnicodeScalarSequence.AsyncIterator._nextComplexScalar(_:)()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_BYTE *)(v0 + 86);
  if ((v1 & 0xE0) == 0xC0)
  {
    v2 = 1;
LABEL_7:
    *(_QWORD *)(v0 + 32) = v2;
    v3 = *(_QWORD *)(v0 + 16);
    *(_BYTE *)(v0 + 80) = v1;
    *(_WORD *)(v0 + 81) = 0;
    *(_BYTE *)(v0 + 83) = 0;
    *(_QWORD *)(v0 + 40) = *(_QWORD *)(v3 + 24);
    *(_QWORD *)(v0 + 48) = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v0 + 56) = 0;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 64) = v4;
    *v4 = v0;
    v4[1] = AsyncUnicodeScalarSequence.AsyncIterator._nextComplexScalar(_:);
    return dispatch thunk of AsyncIteratorProtocol.next()();
  }
  if ((v1 & 0xF0) == 0xE0)
  {
    v2 = 2;
    goto LABEL_7;
  }
  if ((v1 & 0xF8) == 0xF0)
  {
    v2 = 3;
    goto LABEL_7;
  }
  if ((*(_BYTE *)(v0 + 86) & 0x80) != 0)
  {
    LOBYTE(v9) = 0;
    v10 = 65533;
  }
  else
  {
    *(_BYTE *)(v0 + 80) = v1;
    *(_WORD *)(v0 + 81) = 0;
    *(_BYTE *)(v0 + 83) = 0;
    v6 = static String._fromUTF8Repairing(_:)();
    v8 = specialized Collection.first.getter(v6, v7);
    swift_bridgeObjectRelease();
    v9 = HIDWORD(v8) & 1;
    v10 = v8;
  }
  return (*(uint64_t (**)(unint64_t))(v0 + 8))(v10 | ((unint64_t)v9 << 32));
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _BYTE *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v1 = *(_BYTE *)(v0 + 84);
  if ((*(_BYTE *)(v0 + 85) & 1) == 0)
  {
    if ((v1 & 0xC0) == 0x80)
    {
      v2 = *(_QWORD *)(v0 + 32);
      v3 = *(_QWORD *)(v0 + 56) + 1;
      *(_BYTE *)(v0 + 80 + v3) = v1;
      if (v3 != v2)
      {
        *(_QWORD *)(v0 + 56) = v3;
        swift_getAssociatedTypeWitness();
        swift_getAssociatedConformanceWitness();
        v4 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 64) = v4;
        *v4 = v0;
        v4[1] = AsyncUnicodeScalarSequence.AsyncIterator._nextComplexScalar(_:);
        return dispatch thunk of AsyncIteratorProtocol.next()();
      }
    }
    else
    {
      v6 = (_BYTE *)(*(_QWORD *)(v0 + 24) + *(int *)(*(_QWORD *)(v0 + 16) + 36));
      *v6 = v1;
      v6[1] = 0;
    }
  }
  v7 = static String._fromUTF8Repairing(_:)();
  v9 = specialized Collection.first.getter(v7, v8);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(unint64_t))(v0 + 8))(v9 | ((HIDWORD(v9) & 1) << 32));
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for AsyncUnicodeScalarSequence.AsyncIterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncUnicodeScalarSequence.AsyncIterator);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncUnicodeScalarSequence<A>.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = v2;
  v3[4] = a2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncUnicodeScalarSequence<A>.AsyncIterator()
{
  uint64_t v0;
  __int8 *v1;
  _QWORD *v2;
  __int8 v4;
  int8x16_t *v5;

  v1 = (__int8 *)(*(_QWORD *)(v0 + 24) + *(int *)(*(_QWORD *)(v0 + 32) + 36));
  if ((v1[1] & 1) != 0)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 48) = v2;
    *v2 = v0;
    v2[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncUnicodeScalarSequence<A>.AsyncIterator;
    return dispatch thunk of AsyncIteratorProtocol.next()();
  }
  else
  {
    v4 = *v1;
    *(_WORD *)v1 = 256;
    v5 = (int8x16_t *)swift_task_alloc();
    *(_QWORD *)(v0 + 40) = v5;
    v5->i64[0] = v0;
    v5->i64[1] = (uint64_t)protocol witness for AsyncIteratorProtocol.next() in conformance AsyncUnicodeScalarSequence<A>.AsyncIterator;
    v5[1] = vextq_s8(*(int8x16_t *)(v0 + 24), *(int8x16_t *)(v0 + 24), 8uLL);
    v5[5].i8[6] = v4;
    return swift_task_switch();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  int v1;
  int v2;
  __int8 v3;
  uint64_t v4;
  int8x16_t *v6;

  v1 = *(unsigned __int8 *)(v0 + 73);
  if (v1 == 1)
  {
    v2 = 0;
LABEL_4:
    v4 = *(_QWORD *)(v0 + 16);
    *(_DWORD *)v4 = v2;
    *(_BYTE *)(v4 + 4) = v1;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v2 = *(unsigned __int8 *)(v0 + 72);
  v3 = v2;
  if (((char)v2 & 0x80000000) == 0)
    goto LABEL_4;
  v6 = (int8x16_t *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v6;
  v6->i64[0] = v0;
  v6->i64[1] = (uint64_t)protocol witness for AsyncIteratorProtocol.next() in conformance AsyncUnicodeScalarSequence<A>.AsyncIterator;
  v6[1] = vextq_s8(*(int8x16_t *)(v0 + 24), *(int8x16_t *)(v0 + 24), 8uLL);
  v6[5].i8[6] = v3;
  return swift_task_switch();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncUnicodeScalarSequence<A>.AsyncIterator(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (!v1)
  {
    v6 = *(_QWORD *)(v4 + 16);
    *(_DWORD *)v6 = a1;
    *(_BYTE *)(v6 + 4) = BYTE4(a1) & 1;
  }
  return (*(uint64_t (**)(void))(v5 + 8))();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (!v1)
  {
    v6 = *(_QWORD *)(v4 + 16);
    *(_DWORD *)v6 = a1;
    *(_BYTE *)(v6 + 4) = BYTE4(a1) & 1;
  }
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance AsyncUnicodeScalarSequence<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  AsyncUnicodeScalarSequence.makeAsyncIterator()(a1, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v2, a1);
}

uint64_t AsyncSequence<>.unicodeScalars.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2);
}

void associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in AsyncUnicodeScalarSequence<A>()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t getEnumTagSinglePayload for AsyncUnicodeScalarSequence(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_181E671E0 + 4 * byte_182166430[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for AsyncUnicodeScalarSequence(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for AsyncUnicodeScalarSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncUnicodeScalarSequence);
}

uint64_t type metadata completion function for AsyncUnicodeScalarSequence.AsyncIterator()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AsyncUnicodeScalarSequence.AsyncIterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if (v7 <= 7 && (unint64_t)(v6 + 2) <= 0x18 && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    *(_WORD *)((char *)a1 + v6) = *(_WORD *)((char *)a2 + v6);
  }
  else
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return a1;
}

uint64_t destroy for AsyncUnicodeScalarSequence.AsyncIterator(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

uint64_t initializeWithCopy for AsyncUnicodeScalarSequence.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  *(_WORD *)(*(_QWORD *)(v5 + 64) + a1) = *(_WORD *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t assignWithCopy for AsyncUnicodeScalarSequence.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
  *(_WORD *)(*(_QWORD *)(v5 + 64) + a1) = *(_WORD *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t initializeWithTake for AsyncUnicodeScalarSequence.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
  *(_WORD *)(*(_QWORD *)(v5 + 64) + a1) = *(_WORD *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t assignWithTake for AsyncUnicodeScalarSequence.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
  *(_WORD *)(*(_QWORD *)(v5 + 64) + a1) = *(_WORD *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncUnicodeScalarSequence.AsyncIterator(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (!a2)
    return 0;
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (a2 <= v6)
    goto LABEL_18;
  v7 = *(_QWORD *)(v5 + 64) + 2;
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((a2 - v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if ((_DWORD)v6)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, v6, AssociatedTypeWitness);
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if ((_DWORD)v7)
  {
    if (v7 > 3)
      LODWORD(v7) = 4;
    __asm { BR              X11 }
  }
  return (v6 + v11 + 1);
}

void storeEnumTagSinglePayload for AsyncUnicodeScalarSequence.AsyncIterator(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64) + 2;
  if (a3 <= v7)
  {
    v9 = 0u;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if (*(_DWORD *)(v6 + 64) != -2)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *(_WORD *)a1 = v12;
        }
        else
        {
          *a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t specialized closure #1 in static AttributeScope.scopeDescription.getter(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 16);
  if (!*(_QWORD *)(v1 + 16))
    return 0;
  v2 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)&type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes);
  if ((v3 & 1) == 0)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 16 * v2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v4;
}

{
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 16);
  if (!*(_QWORD *)(v1 + 16))
    return 0;
  v2 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)&type metadata for AttributeScopes.FoundationAttributes);
  if ((v3 & 1) == 0)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 16 * v2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v4;
}

{
  uint64_t v1;
  Swift::UInt v2;
  unint64_t v3;
  char v4;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 16);
  if (!*(_QWORD *)(v1 + 16))
    return 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _FoundationPlusScope<AttributeScopes.FoundationAttributes>);
  v3 = specialized __RawDictionaryStorage.find<A>(_:)(v2);
  if ((v4 & 1) == 0)
    return 0;
  v5 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 16 * v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t specialized closure #2 in static AttributeScope.scopeDescription.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  char isUniquelyReferenced_nonNull_native;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t result;
  char *v35;
  int64_t v36;
  uint64_t v37;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v37 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0x8000000000000000;
  v9 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)&type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes);
  v10 = *(_QWORD *)(v37 + 16);
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v3 = v8;
    if (*(_QWORD *)(v37 + 24) < v12)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, isUniquelyReferenced_nonNull_native);
      v13 = v37;
      v14 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)&type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes);
      if ((v3 & 1) != (v15 & 1))
        goto LABEL_47;
      v9 = v14;
      if ((v3 & 1) == 0)
        goto LABEL_43;
LABEL_8:
      v16 = (uint64_t *)(*(_QWORD *)(v13 + 56) + 16 * v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *v16 = a2;
      v16[1] = a3;
LABEL_44:
      *(_QWORD *)(a1 + 16) = v13;
      return swift_bridgeObjectRelease();
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v13 = v37;
      if ((v8 & 1) != 0)
        goto LABEL_8;
LABEL_43:
      specialized _NativeDictionary._insert(at:key:value:)(v9, (uint64_t)&type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes, a2, a3, (_QWORD *)v13);
      goto LABEL_44;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Type, ScopeDescription>);
  v17 = static _DictionaryStorage.copy(original:)();
  v13 = v17;
  if (!*(_QWORD *)(v37 + 16))
  {
LABEL_42:
    swift_bridgeObjectRelease();
    if ((v3 & 1) != 0)
      goto LABEL_8;
    goto LABEL_43;
  }
  v18 = (char *)(v17 + 64);
  v19 = (char *)(v37 + 64);
  v20 = (unint64_t)((1 << *(_BYTE *)(v13 + 32)) + 63) >> 6;
  if (v13 != v37 || v18 >= &v19[8 * v20])
  {
    memmove(v18, v19, 8 * v20);
    v19 = (char *)(v37 + 64);
  }
  v21 = 0;
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(v37 + 16);
  v22 = 1 << *(_BYTE *)(v37 + 32);
  v23 = -1;
  if (v22 < 64)
    v23 = ~(-1 << v22);
  v24 = v23 & *(_QWORD *)(v37 + 64);
  v35 = v19;
  v36 = (unint64_t)(v22 + 63) >> 6;
  while (1)
  {
    if (v24)
    {
      v25 = __clz(__rbit64(v24));
      v24 &= v24 - 1;
      v26 = v25 | (v21 << 6);
      goto LABEL_18;
    }
    v31 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
      __break(1u);
      goto LABEL_46;
    }
    if (v31 >= v36)
      goto LABEL_42;
    v32 = *(_QWORD *)&v35[8 * v31];
    ++v21;
    if (!v32)
    {
      v21 = v31 + 1;
      if (v31 + 1 >= v36)
        goto LABEL_42;
      v32 = *(_QWORD *)&v35[8 * v21];
      if (!v32)
      {
        v21 = v31 + 2;
        if (v31 + 2 >= v36)
          goto LABEL_42;
        v32 = *(_QWORD *)&v35[8 * v21];
        if (!v32)
        {
          v21 = v31 + 3;
          if (v31 + 3 >= v36)
            goto LABEL_42;
          v32 = *(_QWORD *)&v35[8 * v21];
          if (!v32)
          {
            v21 = v31 + 4;
            if (v31 + 4 >= v36)
              goto LABEL_42;
            v32 = *(_QWORD *)&v35[8 * v21];
            if (!v32)
            {
              v21 = v31 + 5;
              if (v31 + 5 >= v36)
                goto LABEL_42;
              v32 = *(_QWORD *)&v35[8 * v21];
              if (!v32)
              {
                v21 = v31 + 6;
                if (v31 + 6 >= v36)
                  goto LABEL_42;
                v32 = *(_QWORD *)&v35[8 * v21];
                if (!v32)
                  break;
              }
            }
          }
        }
      }
    }
LABEL_41:
    v24 = (v32 - 1) & v32;
    v26 = __clz(__rbit64(v32)) + (v21 << 6);
LABEL_18:
    v27 = 8 * v26;
    v28 = *(_QWORD *)(*(_QWORD *)(v37 + 48) + 8 * v26);
    v29 = 16 * v26;
    v30 = *(_OWORD *)(*(_QWORD *)(v37 + 56) + v29);
    *(_QWORD *)(*(_QWORD *)(v13 + 48) + v27) = v28;
    *(_OWORD *)(*(_QWORD *)(v13 + 56) + v29) = v30;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v33 = v31 + 7;
  if (v33 >= v36)
    goto LABEL_42;
  v32 = *(_QWORD *)&v35[8 * v33];
  if (v32)
  {
    v21 = v33;
    goto LABEL_41;
  }
  while (1)
  {
    v21 = v33 + 1;
    if (__OFADD__(v33, 1))
      break;
    if (v21 >= v36)
      goto LABEL_42;
    v32 = *(_QWORD *)&v35[8 * v21];
    ++v33;
    if (v32)
      goto LABEL_41;
  }
LABEL_46:
  __break(1u);
LABEL_47:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  char v3;
  char isUniquelyReferenced_nonNull_native;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t result;
  char *v35;
  int64_t v36;
  uint64_t v37;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v37 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0x8000000000000000;
  v9 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)&type metadata for AttributeScopes.FoundationAttributes);
  v10 = *(_QWORD *)(v37 + 16);
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v3 = v8;
    if (*(_QWORD *)(v37 + 24) < v12)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, isUniquelyReferenced_nonNull_native);
      v13 = v37;
      v14 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)&type metadata for AttributeScopes.FoundationAttributes);
      if ((v3 & 1) != (v15 & 1))
        goto LABEL_47;
      v9 = v14;
      if ((v3 & 1) == 0)
        goto LABEL_43;
LABEL_8:
      v16 = (uint64_t *)(*(_QWORD *)(v13 + 56) + 16 * v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *v16 = a2;
      v16[1] = a3;
LABEL_44:
      *(_QWORD *)(a1 + 16) = v13;
      return swift_bridgeObjectRelease();
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v13 = v37;
      if ((v8 & 1) != 0)
        goto LABEL_8;
LABEL_43:
      specialized _NativeDictionary._insert(at:key:value:)(v9, (uint64_t)&type metadata for AttributeScopes.FoundationAttributes, a2, a3, (_QWORD *)v13);
      goto LABEL_44;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Type, ScopeDescription>);
  v17 = static _DictionaryStorage.copy(original:)();
  v13 = v17;
  if (!*(_QWORD *)(v37 + 16))
  {
LABEL_42:
    swift_bridgeObjectRelease();
    if ((v3 & 1) != 0)
      goto LABEL_8;
    goto LABEL_43;
  }
  v18 = (char *)(v17 + 64);
  v19 = (char *)(v37 + 64);
  v20 = (unint64_t)((1 << *(_BYTE *)(v13 + 32)) + 63) >> 6;
  if (v13 != v37 || v18 >= &v19[8 * v20])
  {
    memmove(v18, v19, 8 * v20);
    v19 = (char *)(v37 + 64);
  }
  v21 = 0;
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(v37 + 16);
  v22 = 1 << *(_BYTE *)(v37 + 32);
  v23 = -1;
  if (v22 < 64)
    v23 = ~(-1 << v22);
  v24 = v23 & *(_QWORD *)(v37 + 64);
  v35 = v19;
  v36 = (unint64_t)(v22 + 63) >> 6;
  while (1)
  {
    if (v24)
    {
      v25 = __clz(__rbit64(v24));
      v24 &= v24 - 1;
      v26 = v25 | (v21 << 6);
      goto LABEL_18;
    }
    v31 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
      __break(1u);
      goto LABEL_46;
    }
    if (v31 >= v36)
      goto LABEL_42;
    v32 = *(_QWORD *)&v35[8 * v31];
    ++v21;
    if (!v32)
    {
      v21 = v31 + 1;
      if (v31 + 1 >= v36)
        goto LABEL_42;
      v32 = *(_QWORD *)&v35[8 * v21];
      if (!v32)
      {
        v21 = v31 + 2;
        if (v31 + 2 >= v36)
          goto LABEL_42;
        v32 = *(_QWORD *)&v35[8 * v21];
        if (!v32)
        {
          v21 = v31 + 3;
          if (v31 + 3 >= v36)
            goto LABEL_42;
          v32 = *(_QWORD *)&v35[8 * v21];
          if (!v32)
          {
            v21 = v31 + 4;
            if (v31 + 4 >= v36)
              goto LABEL_42;
            v32 = *(_QWORD *)&v35[8 * v21];
            if (!v32)
            {
              v21 = v31 + 5;
              if (v31 + 5 >= v36)
                goto LABEL_42;
              v32 = *(_QWORD *)&v35[8 * v21];
              if (!v32)
              {
                v21 = v31 + 6;
                if (v31 + 6 >= v36)
                  goto LABEL_42;
                v32 = *(_QWORD *)&v35[8 * v21];
                if (!v32)
                  break;
              }
            }
          }
        }
      }
    }
LABEL_41:
    v24 = (v32 - 1) & v32;
    v26 = __clz(__rbit64(v32)) + (v21 << 6);
LABEL_18:
    v27 = 8 * v26;
    v28 = *(_QWORD *)(*(_QWORD *)(v37 + 48) + 8 * v26);
    v29 = 16 * v26;
    v30 = *(_OWORD *)(*(_QWORD *)(v37 + 56) + v29);
    *(_QWORD *)(*(_QWORD *)(v13 + 48) + v27) = v28;
    *(_OWORD *)(*(_QWORD *)(v13 + 56) + v29) = v30;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v33 = v31 + 7;
  if (v33 >= v36)
    goto LABEL_42;
  v32 = *(_QWORD *)&v35[8 * v33];
  if (v32)
  {
    v21 = v33;
    goto LABEL_41;
  }
  while (1)
  {
    v21 = v33 + 1;
    if (__OFADD__(v33, 1))
      break;
    if (v21 >= v36)
      goto LABEL_42;
    v32 = *(_QWORD *)&v35[8 * v21];
    ++v33;
    if (v32)
      goto LABEL_41;
  }
LABEL_46:
  __break(1u);
LABEL_47:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  char v3;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  uint64_t result;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _FoundationPlusScope<AttributeScopes.FoundationAttributes>);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v38 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0x8000000000000000;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
  v11 = *(_QWORD *)(v38 + 16);
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v3 = v9;
    if (*(_QWORD *)(v38 + 24) < v13)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, isUniquelyReferenced_nonNull_native);
      v14 = v38;
      v15 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
      if ((v3 & 1) != (v16 & 1))
        goto LABEL_47;
      v10 = v15;
      if ((v3 & 1) == 0)
        goto LABEL_43;
LABEL_8:
      v17 = (uint64_t *)(*(_QWORD *)(v14 + 56) + 16 * v10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *v17 = a2;
      v17[1] = a3;
LABEL_44:
      *(_QWORD *)(a1 + 16) = v14;
      return swift_bridgeObjectRelease();
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v14 = v38;
      if ((v9 & 1) != 0)
        goto LABEL_8;
LABEL_43:
      specialized _NativeDictionary._insert(at:key:value:)(v10, v7, a2, a3, (_QWORD *)v14);
      goto LABEL_44;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Type, ScopeDescription>);
  v18 = static _DictionaryStorage.copy(original:)();
  v14 = v18;
  if (!*(_QWORD *)(v38 + 16))
  {
LABEL_42:
    swift_bridgeObjectRelease();
    if ((v3 & 1) != 0)
      goto LABEL_8;
    goto LABEL_43;
  }
  v19 = (char *)(v18 + 64);
  v20 = (char *)(v38 + 64);
  v21 = (unint64_t)((1 << *(_BYTE *)(v14 + 32)) + 63) >> 6;
  v36 = v38 + 64;
  if (v14 != v38 || v19 >= &v20[8 * v21])
    memmove(v19, v20, 8 * v21);
  v22 = 0;
  *(_QWORD *)(v14 + 16) = *(_QWORD *)(v38 + 16);
  v23 = 1 << *(_BYTE *)(v38 + 32);
  v24 = -1;
  if (v23 < 64)
    v24 = ~(-1 << v23);
  v25 = v24 & *(_QWORD *)(v38 + 64);
  v37 = (unint64_t)(v23 + 63) >> 6;
  while (1)
  {
    if (v25)
    {
      v26 = __clz(__rbit64(v25));
      v25 &= v25 - 1;
      v27 = v26 | (v22 << 6);
      goto LABEL_18;
    }
    v32 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_46;
    }
    if (v32 >= v37)
      goto LABEL_42;
    v33 = *(_QWORD *)(v36 + 8 * v32);
    ++v22;
    if (!v33)
    {
      v22 = v32 + 1;
      if (v32 + 1 >= v37)
        goto LABEL_42;
      v33 = *(_QWORD *)(v36 + 8 * v22);
      if (!v33)
      {
        v22 = v32 + 2;
        if (v32 + 2 >= v37)
          goto LABEL_42;
        v33 = *(_QWORD *)(v36 + 8 * v22);
        if (!v33)
        {
          v22 = v32 + 3;
          if (v32 + 3 >= v37)
            goto LABEL_42;
          v33 = *(_QWORD *)(v36 + 8 * v22);
          if (!v33)
          {
            v22 = v32 + 4;
            if (v32 + 4 >= v37)
              goto LABEL_42;
            v33 = *(_QWORD *)(v36 + 8 * v22);
            if (!v33)
            {
              v22 = v32 + 5;
              if (v32 + 5 >= v37)
                goto LABEL_42;
              v33 = *(_QWORD *)(v36 + 8 * v22);
              if (!v33)
              {
                v22 = v32 + 6;
                if (v32 + 6 >= v37)
                  goto LABEL_42;
                v33 = *(_QWORD *)(v36 + 8 * v22);
                if (!v33)
                  break;
              }
            }
          }
        }
      }
    }
LABEL_41:
    v25 = (v33 - 1) & v33;
    v27 = __clz(__rbit64(v33)) + (v22 << 6);
LABEL_18:
    v28 = 8 * v27;
    v29 = *(_QWORD *)(*(_QWORD *)(v38 + 48) + 8 * v27);
    v30 = 16 * v27;
    v31 = *(_OWORD *)(*(_QWORD *)(v38 + 56) + v30);
    *(_QWORD *)(*(_QWORD *)(v14 + 48) + v28) = v29;
    *(_OWORD *)(*(_QWORD *)(v14 + 56) + v30) = v31;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v34 = v32 + 7;
  if (v34 >= v37)
    goto LABEL_42;
  v33 = *(_QWORD *)(v36 + 8 * v34);
  if (v33)
  {
    v22 = v34;
    goto LABEL_41;
  }
  while (1)
  {
    v22 = v34 + 1;
    if (__OFADD__(v34, 1))
      break;
    if (v22 >= v37)
      goto LABEL_42;
    v33 = *(_QWORD *)(v36 + 8 * v22);
    ++v34;
    if (v33)
      goto LABEL_41;
  }
LABEL_46:
  __break(1u);
LABEL_47:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t static AttributeScopes.FoundationAttributes.LinkAttribute.name.getter()
{
  return 0x6B6E694C534ELL;
}

uint64_t static AttributeScopes.FoundationAttributes.LinkAttribute.name.setter()
{
  return swift_bridgeObjectRelease();
}

uint64_t (*static AttributeScopes.FoundationAttributes.LinkAttribute.name.modify(_QWORD *a1))()
{
  *a1 = 0x6B6E694C534ELL;
  a1[1] = 0xE600000000000000;
  return destroy for PropertyListEncoder._Options;
}

uint64_t static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name.getter()
{
  return static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name.getter(&one-time initialization token for name, &static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name);
}

uint64_t static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.markdownName.getter()
{
  return 0x746E657265666572;
}

uint64_t static AttributeScopes.FoundationAttributes.AgreementConceptAttribute.name.getter()
{
  return static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name.getter(&one-time initialization token for name, &static AttributeScopes.FoundationAttributes.AgreementConceptAttribute.name);
}

unint64_t static AttributeScopes.FoundationAttributes.AgreementConceptAttribute.markdownName.getter()
{
  return 0xD000000000000010;
}

uint64_t static AttributeScopes.FoundationAttributes.AgreementArgumentAttribute.name.getter()
{
  return static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name.getter(&one-time initialization token for name, &static AttributeScopes.FoundationAttributes.AgreementArgumentAttribute.name);
}

unint64_t static AttributeScopes.FoundationAttributes.AgreementArgumentAttribute.markdownName.getter()
{
  return 0xD000000000000011;
}

uint64_t static AttributeScopes.FoundationAttributes.MorphologyAttribute.name.getter()
{
  return static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name.getter(&one-time initialization token for name, &static AttributeScopes.FoundationAttributes.MorphologyAttribute.name);
}

uint64_t static AttributeScopes.FoundationAttributes.MorphologyAttribute.markdownName.getter()
{
  return 0x6F6C6F6870726F6DLL;
}

uint64_t static AttributeScopes.FoundationAttributes.InflectionRuleAttribute.name.getter()
{
  return static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name.getter(&one-time initialization token for name, &static AttributeScopes.FoundationAttributes.InflectionRuleAttribute.name);
}

uint64_t static AttributeScopes.FoundationAttributes.InflectionRuleAttribute.markdownName.getter()
{
  return 0x7463656C666E69;
}

uint64_t static AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute.name.getter()
{
  return static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name.getter(&one-time initialization token for name, &static AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute.name);
}

unint64_t static AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute.markdownName.getter()
{
  return 0xD000000000000019;
}

uint64_t AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  char v3;
  _QWORD v5[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v1)
  {
    __swift_project_boxed_opaque_existential_1(v5, v5[3]);
    v3 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    if ((v3 & 1) == 0)
    {
      type metadata accessor for DecodingError();
      swift_allocError();
      static DecodingError.dataCorruptedError(in:debugDescription:)();
      swift_willThrow();
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.encode(to:)()
{
  return Bool.encode(to:)();
}

uint64_t static AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.== infix(_:_:)()
{
  return 1;
}

void AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value(_QWORD *a1)
{
  return AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.init(from:)(a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value()
{
  return Bool.encode(to:)();
}

uint64_t static AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.name.getter()
{
  return static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name.getter(&one-time initialization token for name, &static AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.name);
}

uint64_t static AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.markdownName.getter()
{
  return 0x754E74616D726F66;
}

uint64_t protocol witness for static MarkdownDecodableAttributedStringKey.markdownName.getter in conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute()
{
  return 0x754E74616D726F66;
}

uint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute(uint64_t a1, uint64_t a2)
{
  return protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute(a1, a2, &one-time initialization token for name, &static AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.name);
}

uint64_t static AttributeScopes.FoundationAttributes.LanguageIdentifierAttribute.name.getter()
{
  return 0x6175676E614C534ELL;
}

unint64_t static AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.name.getter()
{
  return 0xD000000000000018;
}

uint64_t AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component.init(rawValue:)@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  unint64_t v5;
  uint64_t result;
  char v7;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component.init(rawValue:), v3);
  result = swift_bridgeObjectRelease();
  v7 = 7;
  if (v5 < 7)
    v7 = v5;
  *a2 = v7;
  return result;
}

uint64_t AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181E6B000 + 4 * byte_182166560[*v0]))(0x6D614E6E65766967, 0xE900000000000065);
}

uint64_t sub_181E6B000()
{
  return 0x614E796C696D6166;
}

uint64_t sub_181E6B02C()
{
  return 0x66657250656D616ELL;
}

uint64_t sub_181E6B05C()
{
  return 0x656D616E6B63696ELL;
}

uint64_t sub_181E6B074()
{
  return 0x6574696D696C6564;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

void protocol witness for Hashable.hashValue.getter in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component()
{
  char *v0;

  specialized RawRepresentable<>._rawHashValue(seed:)(0, *v0);
}

void protocol witness for Hashable.hash(into:) in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component()
{
  __asm { BR              X10 }
}

uint64_t sub_181E6B0E4()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  return AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component.init(rawValue:)(*a1, a2);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_181E6B1CC + 4 * byte_18216656E[*v0]))();
}

void sub_181E6B1CC(_QWORD *a1@<X8>)
{
  *a1 = 0x614E796C696D6166;
  a1[1] = 0xEA0000000000656DLL;
}

void sub_181E6B1EC(_QWORD *a1@<X8>)
{
  *a1 = 0x614E656C6464696DLL;
  a1[1] = 0xEA0000000000656DLL;
}

void sub_181E6B238(_QWORD *a1@<X8>)
{
  *a1 = 0x656D616E6B63696ELL;
  a1[1] = 0xE800000000000000;
}

void sub_181E6B254(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x6574696D696C6564;
  a1[1] = v1 + 13;
}

uint64_t protocol witness for Decodable.init(from:) in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component();
  return RawRepresentable<>.encode(to:)();
}

uint64_t protocol witness for Decodable.init(from:) in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart();
  return RawRepresentable<>.encode(to:)();
}

unint64_t static AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.name.getter()
{
  return 0xD00000000000001BLL;
}

unint64_t AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol.init(rawValue:)@<X0>(unint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  v2 = 5;
  if (result < 5)
    v2 = result;
  *a2 = v2;
  return result;
}

uint64_t AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol@<X0>(unint64_t *a1@<X0>, char *a2@<X8>)
{
  return AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol.init(rawValue:)(*a1, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol();
  return RawRepresentable<>.encode(to:)();
}

unint64_t static AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.name.getter()
{
  return 0xD00000000000001DLL;
}

uint64_t AttributeScopes.FoundationAttributes.DateFieldAttribute.Field.rawValue.getter()
{
  char *v0;

  return qword_182168FB8[*v0];
}

unint64_t AttributeScopes.FoundationAttributes.DateFieldAttribute.Field.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t result;
  char v14;
  uint64_t *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  void *v19;
  unint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  Swift::String v29;
  uint64_t v30;
  _QWORD v31[4];
  void *v32;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v31, v31[3]);
    v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    v7 = v6;
    v30 = v5;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributeScopes.FoundationAttributes.DateFieldAttribute.Field>);
    v8 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    v32 = (void *)v7;
    swift_bridgeObjectRetain();
    for (i = 0; i != 888; i += 24)
    {
      v10 = *(_QWORD *)((char *)&outlined read-only object #0 of AttributeScopes.FoundationAttributes.DateFieldAttribute.Field.init(from:)
                      + i
                      + 32);
      v11 = *(_QWORD *)((char *)&outlined read-only object #0 of AttributeScopes.FoundationAttributes.DateFieldAttribute.Field.init(from:)
                      + i
                      + 40);
      v12 = *((_BYTE *)&outlined read-only object #0 of AttributeScopes.FoundationAttributes.DateFieldAttribute.Field.init(from:)
            + i
            + 48);
      swift_bridgeObjectRetain();
      result = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11);
      if ((v14 & 1) != 0)
      {
        __break(1u);
LABEL_12:
        __break(1u);
        return result;
      }
      *(_QWORD *)((char *)v8 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v15 = (uint64_t *)(v8[6] + 16 * result);
      *v15 = v10;
      v15[1] = v11;
      *(_BYTE *)(v8[7] + result) = v12;
      v16 = v8[2];
      v17 = __OFADD__(v16, 1);
      v18 = v16 + 1;
      if (v17)
        goto LABEL_12;
      v8[2] = v18;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, AttributeScopes.FoundationAttributes.DateFieldAttribute.Field));
    swift_arrayDestroy();
    v19 = v32;
    if (v8[2])
    {
      v20 = specialized __RawDictionaryStorage.find<A>(_:)(v30, (uint64_t)v32);
      if ((v21 & 1) != 0)
      {
        v22 = *(_BYTE *)(v8[7] + v20);
        swift_bridgeObjectRelease_n();
        swift_release();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
        *a2 = v22;
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      }
    }
    swift_bridgeObjectRelease();
    swift_release();
    v23 = type metadata accessor for DecodingError();
    swift_allocError();
    v25 = v24;
    v26 = a1[3];
    v27 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v26);
    MEMORY[0x186DA5FB4](v26, v27);
    _StringGuts.grow(_:)(27);
    swift_bridgeObjectRelease();
    v28._countAndFlagsBits = v30;
    v28._object = v19;
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29._countAndFlagsBits = 11838;
    v29._object = (void *)0xE200000000000000;
    String.append(_:)(v29);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v25, *MEMORY[0x1E0DEC458], v23);
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t AttributeScopes.FoundationAttributes.DateFieldAttribute.Field.encode(to:)(_QWORD *a1)
{
  char *v1;
  char v2;
  _BYTE v4[24];
  uint64_t v5;
  char v6;

  v2 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  v6 = v2;
  AttributeScopes.FoundationAttributes.DateFieldAttribute.Field.rawValue.getter();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v4, v5);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
}

unint64_t protocol witness for Decodable.init(from:) in conformance AttributeScopes.FoundationAttributes.DateFieldAttribute.Field@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return AttributeScopes.FoundationAttributes.DateFieldAttribute.Field.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AttributeScopes.FoundationAttributes.DateFieldAttribute.Field(_QWORD *a1)
{
  char *v1;
  char v2;
  _BYTE v4[24];
  uint64_t v5;
  char v6;

  v2 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  v6 = v2;
  AttributeScopes.FoundationAttributes.DateFieldAttribute.Field.rawValue.getter();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v4, v5);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
}

unint64_t static AttributeScopes.FoundationAttributes.DateFieldAttribute.name.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t static AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute.name.getter()
{
  return static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name.getter(&one-time initialization token for name, &static AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute.name);
}

unint64_t static AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute.markdownName.getter()
{
  return 0xD000000000000015;
}

uint64_t static AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute.decodeMarkdown(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  _QWORD v7[4];
  uint64_t v8;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  result = dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v7, v7[3]);
    v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    specialized static AttributedString.parseMarkdown<A>(_:including:options:baseURL:)(&v8, v5, v6, 512, 0, 0, 0, 0);
    swift_bridgeObjectRelease();
    *a2 = v8;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }
  return result;
}

uint64_t static AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute.objectiveCValue(for:)()
{
  uint64_t v0;

  v0 = swift_retain();
  return specialized NSAttributedString.init<A>(_:including:)(v0);
}

unint64_t static AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute.value(for:)@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  uint64_t v21;

  objc_opt_self();
  v5 = swift_dynamicCastObjCClass();
  if (!v5)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v11 = objc_allocWithZone((Class)NSError);
    v12 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v13 = objc_msgSend(v11, sel_initWithDomain_code_userInfo_, v12, 4866, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v14 = objc_msgSend(v13, sel_domain);
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v17 = v16;

    if (v15 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) || v17 != v18)
    {
      v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v20 & 1) != 0)
        return swift_willThrow();
      __break(1u);
    }
    swift_bridgeObjectRelease_n();
    return swift_willThrow();
  }
  v6 = (void *)v5;
  v7 = a1;
  specialized static AttributeScope.scopeDescription.getter();
  v9 = v8;
  swift_bridgeObjectRelease();
  result = AttributedString.init(_:attributeTable:options:)(v6, v9, 0, &v21);
  if (!v2)
    *a2 = v21;
  return result;
}

uint64_t protocol witness for static MarkdownDecodableAttributedStringKey.decodeMarkdown(from:) in conformance AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return static AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute.decodeMarkdown(from:)(a1, a2);
}

uint64_t protocol witness for static ObjectiveCConvertibleAttributedStringKey.objectiveCValue(for:) in conformance AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute()
{
  uint64_t v0;

  v0 = swift_retain();
  return specialized NSAttributedString.init<A>(_:including:)(v0);
}

unint64_t protocol witness for static ObjectiveCConvertibleAttributedStringKey.value(for:) in conformance AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  return static AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute.value(for:)(a1, a2);
}

uint64_t static AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute.name.getter()
{
  return static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name.getter(&one-time initialization token for name, &static AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute.name);
}

id static AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute.objectiveCValue(for:)(uint64_t a1)
{
  return objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedInteger_, a1);
}

id static AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute.value(for:)(void *a1)
{
  return objc_msgSend(a1, sel_unsignedIntegerValue);
}

id protocol witness for static ObjectiveCConvertibleAttributedStringKey.value(for:) in conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(a1, sel_unsignedIntegerValue);
  *a2 = result;
  return result;
}

uint64_t static AttributeScopes.FoundationAttributes.PresentationIntentAttribute.name.getter()
{
  return static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name.getter(&one-time initialization token for name, &static AttributeScopes.FoundationAttributes.PresentationIntentAttribute.name);
}

uint64_t static AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute.name.getter()
{
  return static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name.getter(&one-time initialization token for name, &static AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute.name);
}

