void sub_181891CDC(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_181891CFC(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x181891CBCLL);
}

uint64_t _NSXPCDistantObjectSimpleMessageSend3(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id *v9;

  v9 = a1;
  objc_msgSend(v9[1], "_sendSelector:withProxy:arg1:arg2:arg3:", a2, v9, a3, a4, a5);

  return 0;
}

void sub_181891DE8(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_181891E08(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x181891DC0);
}

uint64_t _NSXPCDistantObjectSimpleMessageSend1(void *a1, uint64_t a2, uint64_t a3)
{
  id *v5;
  id *v6;

  v5 = a1;
  v6 = v5;
  if (v5)
    objc_msgSend(v5[1], "_sendSelector:withProxy:arg1:", a2, v5, a3);

  return 0;
}

void sub_181891E74(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x181891E50);
}

void sub_181891E80(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t _NSXPCDistantObjectSimpleMessageSend2(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id *v7;
  id *v8;

  v7 = a1;
  v8 = v7;
  if (v7)
    objc_msgSend(v7[1], "_sendSelector:withProxy:arg1:arg2:", a2, v7, a3, a4);

  return 0;
}

void sub_181892034(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x181892010);
}

void sub_181892040(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t methodSignatureForSelectorInProtocol(SEL aSel, Protocol *p)
{
  char *types;
  objc_method_description MethodDescription;
  objc_method_description v6;

  if (aSel
    && p
    && ((MethodDescription = protocol_getMethodDescription(p, aSel, 1, 1),
         types = MethodDescription.types,
         MethodDescription.name)
     || (v6 = protocol_getMethodDescription(p, aSel, 0, 1), types = v6.types, v6.name)))
  {
    return objc_msgSend(MEMORY[0x1E0C99DD8], "signatureWithObjCTypes:", types);
  }
  else
  {
    return 0;
  }
}

id NSSortDescriptor.init<A, B>(keyPath:ascending:)(void *a1, char a2)
{
  id v4;
  uint64_t v5;
  id v6;
  id v7;

  v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  _bridgeKeyPathToString(_:)();
  v5 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v6 = objc_msgSend(v4, sel_initWithKey_ascending_, v5, a2 & 1);
  swift_unknownObjectRelease();
  v7 = v6;
  objc_setAssociatedObject(v7, v7, a1, (void *)0x301);

  swift_release();
  return v7;
}

uint64_t _decodeBool(uint64_t a1, const void *a2, BOOL *a3)
{
  unint64_t v6;
  const __CFArray *v7;
  CFIndex Count;
  const __CFArray *ValueAtIndex;
  void *Value;
  id v11;
  uint64_t result;
  int v13;
  BOOL v14;
  id v15;

  v6 = atomic_load((unint64_t *)(a1 + 16));
  atomic_store(v6 | 8, (unint64_t *)(a1 + 16));
  v7 = *(const __CFArray **)(a1 + 80);
  if (!v7)
  {
    result = __CFBinaryPlistGetOffsetForValueFromDictionary3();
    if (!(_DWORD)result)
    {
      v14 = 0;
      goto LABEL_17;
    }
    v13 = **(unsigned __int8 **)(a1 + 104);
    if (v13 == 8)
    {
      v14 = 0;
      goto LABEL_16;
    }
    if (v13 == 9)
    {
      v14 = 1;
LABEL_16:
      result = 1;
      goto LABEL_17;
    }
    goto LABEL_12;
  }
  Count = CFArrayGetCount(v7);
  ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 80), Count - 1);
  if (CFGetTypeID(ValueAtIndex) == 19)
  {
    Value = (void *)CFArrayGetValueAtIndex(ValueAtIndex, 0);
    v11 = Value;
    CFArrayRemoveValueAtIndex(ValueAtIndex, 0);
    if (!Value)
      goto LABEL_13;
LABEL_10:
    if (CFGetTypeID(Value) == 21)
    {
      v14 = CFBooleanGetValue((CFBooleanRef)Value) != 0;
      goto LABEL_16;
    }
LABEL_12:
    objc_msgSend((id)a1, "__failWithExceptionName:errorCode:format:", CFSTR("NSInvalidUnarchiveOperationException"), 4864, CFSTR("%@: value for key (%@) is not a BOOLean"), _NSMethodExceptionProem((objc_class *)a1, sel_decodeBoolForKey_), a2);
    goto LABEL_13;
  }
  Value = (void *)CFDictionaryGetValue(ValueAtIndex, a2);
  v15 = Value;
  if (Value)
    goto LABEL_10;
LABEL_13:
  v14 = 0;
  result = 0;
LABEL_17:
  *a3 = v14;
  return result;
}

void _qfqp2_InitializedGlobalData()
{
  if ((_qfqp2_InitializedGlobals & 1) == 0)
  {
    _MergedGlobals_136 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1);
    qword_1ECD0A380 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 0);
    _qfqp2_ReservedWords = (uint64_t)objc_retain((id)objc_msgSend(MEMORY[0x1E0C99E60], "setWithObjects:", CFSTR("AND"), CFSTR("OR"), CFSTR("IN"), CFSTR("NOT"), CFSTR("ALL"), CFSTR("ANY"), CFSTR("SOME"), CFSTR("NONE"), CFSTR("LIKE"), CFSTR("MATCHES"), CFSTR("TOKENMATCHES"), CFSTR("CONTAINS"), CFSTR("BETWEEN"), CFSTR("BEGINSWITH"), CFSTR("ENDSWITH"), CFSTR("UTI-EQUALS"), CFSTR("UTI-CONFORMS-TO"),
                                                      CFSTR("NULL"),
                                                      CFSTR("NIL"),
                                                      CFSTR("SELF"),
                                                      CFSTR("TRUEPREDICATE"),
                                                      CFSTR("FALSEPREDICATE"),
                                                      CFSTR("TRUE"),
                                                      CFSTR("YES"),
                                                      CFSTR("FALSE"),
                                                      CFSTR("NO"),
                                                      CFSTR("FIRST"),
                                                      CFSTR("LAST"),
                                                      CFSTR("SIZE"),
                                                      CFSTR("SUBQUERY"),
                                                      CFSTR("ANYKEY"),
                                                      CFSTR("CAST"),
                                                      CFSTR("UNION"),
                                                      CFSTR("INTERSECTION"),
                                                      CFSTR("MINUS"),
                                                      CFSTR("APPLY"),
                                                      CFSTR("FUNCTION"),
                                                      0));
    _qfqp2_InitializedGlobals = 1;
  }
}

id __setProtocolMetadataWithSignature_block_invoke()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id result;

  v0 = (void *)MEMORY[0x1E0C99E60];
  v1 = objc_opt_class();
  v2 = objc_opt_class();
  v3 = objc_opt_class();
  v4 = objc_opt_class();
  v5 = objc_opt_class();
  v6 = objc_opt_class();
  v7 = objc_opt_class();
  v8 = objc_opt_class();
  qword_1ECD0A900 = (uint64_t)(id)objc_msgSend(v0, "setWithObjects:", v1, v2, v3, v4, v5, v6, v7, v8, objc_opt_class(), 0);
  v9 = (void *)MEMORY[0x1E0C99E60];
  v10 = objc_opt_class();
  v11 = objc_opt_class();
  v12 = objc_opt_class();
  result = (id)objc_msgSend(v9, "setWithObjects:", v10, v11, v12, objc_opt_class(), 0);
  qword_1ECD0A908 = (uint64_t)result;
  return result;
}

void static NSKeyedUnarchiver.unarchivedObject(ofClasses:from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
  _ContiguousArrayBuffer._asCocoaArray()();
  __asm { BR              X10 }
}

void sub_181894BA4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10[16];

  v10[0] = v2;
  LOWORD(v10[1]) = v3;
  BYTE2(v10[1]) = BYTE2(v3);
  BYTE3(v10[1]) = BYTE3(v3);
  BYTE4(v10[1]) = BYTE4(v3);
  BYTE5(v10[1]) = BYTE5(v3);
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D50]), sel_initWithBytes_length_, v10, BYTE6(v3));
  v10[0] = 0;
  v5 = __NSKeyedUnarchiverSecureUnarchiveObjectOfClasses(v1, (uint64_t)v4, (uint64_t)v10);
  swift_unknownObjectRelease();

  v6 = v10[0];
  if (v5)
  {
    v7 = v10[0];
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, 32);
    v8 = v6;
  }
  outlined init with take of Any?((uint64_t)v10, v0);
  if (v6)
  {
    v9 = v6;
    swift_willThrow();
    outlined destroy of Any?(v0, &demangling cache variable for type metadata for Any?);

  }
}

id __NSKeyedUnarchiverSecureUnarchiveObjectOfClasses(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClasses:fromData:error:", objc_msgSend(MEMORY[0x1E0C99E60], "setWithArray:", a1), a2, a3);
}

void sub_181895080(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t __NSThread__start__(_QWORD *a1)
{
  __CFRunLoop *Current;
  uint64_t v3;
  const __CFAllocator *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  const __CFString *v11;
  __CFRunLoopSource *v12;
  uint64_t v13;
  void *v14;
  id obj;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CFRunLoopSourceContext context;
  _BYTE v21[128];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  _CFSetTSD();
  _CFSetTSD();
  atomic_store(0xEu, (unsigned __int8 *)(a1[1] + 55));
  objc_sync_enter(a1);
  Current = CFRunLoopGetCurrent();
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  obj = *(id *)(a1[1] + 56);
  v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v27, v26, 16);
  if (v3)
  {
    v17 = *(_QWORD *)v28;
    v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE30];
    do
    {
      v5 = 0;
      v18 = v3;
      do
      {
        if (*(_QWORD *)v28 != v17)
          objc_enumerationMutation(obj);
        v6 = *(_QWORD *)(*((_QWORD *)&v27 + 1) + 8 * v5);
        if (!*(_QWORD *)(a1[1] + 64))
          *(_QWORD *)(a1[1] + 64) = objc_opt_new();
        v24 = 0u;
        v25 = 0u;
        v22 = 0u;
        v23 = 0u;
        if (v6)
          v7 = *(void **)(v6 + 32);
        else
          v7 = 0;
        v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v22, v21, 16);
        v19 = v5;
        if (v8)
        {
          v9 = *(_QWORD *)v23;
          do
          {
            for (i = 0; i != v8; ++i)
            {
              if (*(_QWORD *)v23 != v9)
                objc_enumerationMutation(v7);
              v11 = *(const __CFString **)(*((_QWORD *)&v22 + 1) + 8 * i);
              v12 = (__CFRunLoopSource *)objc_msgSend(*(id *)(a1[1] + 64), "objectForKey:", v11);
              if (!v12)
              {
                memset(&context, 0, 72);
                context.perform = (void (__cdecl *)(void *))__NSThreadPerformPerform;
                context.info = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
                v12 = CFRunLoopSourceCreate(v4, 0, &context);
                *(_QWORD *)context.info = v12;
                CFRunLoopAddSource(Current, v12, v11);
                objc_msgSend(*(id *)(a1[1] + 64), "setObject:forKey:", v12, v11);
                CFRelease(v12);
              }
              CFRunLoopSourceSignal(v12);
            }
            v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v22, v21, 16);
          }
          while (v8);
        }
        v5 = v19 + 1;
      }
      while (v19 + 1 != v18);
      v13 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v27, v26, 16);
      v3 = v13;
    }
    while (v13);
  }
  objc_sync_exit(a1);
  _CFAutoreleasePoolPush();
  v14 = (void *)objc_msgSend(a1, "name");
  if (v14)
    pthread_setname_np((const char *)objc_msgSend(v14, "UTF8String"));
  -[NSNotificationCenter postNotificationName:object:userInfo:](+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"), "postNotificationName:object:userInfo:", CFSTR("_NSThreadDidStartNotification"), a1, 0);
  _CFAutoreleasePoolPop();
  if (!*(_BYTE *)(a1[1] + 54))
    objc_msgSend(a1, "main");
  return +[NSThread exit](NSThread, "exit");
}

void sub_1818954F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_181895C04(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1818965D8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void _sortedObjectsUsingDescriptors(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  objc_class *v23;
  void *MethodImplementation;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;

  v8 = malloc_type_malloc(8 * a2, 0x100004000313F17uLL);
  v9 = objc_msgSend(MEMORY[0x1E0C99E38], "null");
  v10 = v9;
  v11 = 0;
  do
  {
    if (*(_QWORD *)(a1 + 8 * v11) == v9)
      *(_QWORD *)(a1 + 8 * v11) = 0;
    ++v11;
  }
  while (a2 != v11);
  v12 = objc_msgSend(a3, "count");
  v13 = malloc_type_calloc(1uLL, 0x28uLL, 0x10A00404BF391D6uLL);
  *v13 = malloc_type_calloc(v12, 0x30uLL, 0x10A004036D404F5uLL);
  if (v12)
  {
    v14 = 0;
    v15 = 8;
    do
    {
      v16 = objc_msgSend(a3, "objectAtIndex:", v14);
      v17 = (char *)*v13;
      if ((*(_BYTE *)(v16 + 8) & 4) != 0)
      {
        free(v17);
        free(v13);
        objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], CFSTR("Sort descriptor was decoded from a secure archive and local evaluation is not enabled."), 0));
      }
      *(_QWORD *)&v17[v15] = v16;
      ++v14;
      v15 += 48;
    }
    while (v12 != v14);
  }
  v31 = a3;
  v13[3] = 0;
  v13[4] = v12;
  v13[1] = a1;
  v13[2] = a2;
  _NSInitializeCacheLine(0, v13);
  v18 = (char *)*v13;
  if (!*(_QWORD *)(*v13 + 16))
  {
    v19 = 0;
    v20 = (uint64_t *)(*(_QWORD *)v18 + 8);
    do
    {
      v21 = v13[1];
      v22 = *(_QWORD *)(v21 + 8 * v19);
      if (*((_QWORD *)v18 + 3))
        v22 = objc_msgSend(*(id *)(v21 + 8 * v19), "valueForKeyPath:");
      if (v22 == objc_msgSend(MEMORY[0x1E0C99E38], "null"))
        v22 = 0;
      if (v22)
      {
        if (*((_QWORD *)v18 + 5))
        {
          v23 = (objc_class *)objc_opt_class();
          MethodImplementation = class_getMethodImplementation(v23, *((SEL *)v18 + 5));
        }
        else
        {
          MethodImplementation = *(void **)(*((_QWORD *)v18 + 1) + 32);
        }
      }
      else
      {
        MethodImplementation = _NSNullCompare;
      }
      *(v20 - 1) = (uint64_t)MethodImplementation;
      *v20 = v22;
      ++v19;
      v20 += 2;
    }
    while (a2 != v19);
  }
  v25 = 0;
  do
  {
    v8[v25] = v25;
    ++v25;
  }
  while (a2 != v25);
  objc_msgSend(v31, "count");
  CFMergeSortArray();
  v26 = 0;
  do
  {
    v27 = *(_QWORD *)(a1 + 8 * v8[v26]);
    if (!v27)
      v27 = v10;
    *(_QWORD *)(a4 + 8 * v26++) = v27;
  }
  while (a2 != v26);
  v28 = v13[3];
  v29 = (_QWORD *)*v13;
  if (v28)
  {
    v30 = v29 + 2;
    do
    {
      if (!*v30)
        free((void *)*(v30 - 2));
      v30 += 6;
      --v28;
    }
    while (v28);
  }
  free(v29);
  free(v13);
  free(v8);
}

void sub_1818975E4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void *NSAllocateObjectArray(unint64_t a1)
{
  size_t v1;
  NSString *v3;

  if (a1 >> 61)
  {
    v3 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("*** attempt to allocate id buffer with too large of a count (%lu) -- possibly data is corrupt"), a1);
    objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v3, 0));
  }
  v1 = malloc_good_size(8 * a1);
  return malloc_type_calloc(1uLL, v1, 0xBC19A329uLL);
}

void *_NSInitializeCacheLine(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  objc_class *v7;
  IMP MethodImplementation;
  IMP *v9;
  IMP v10;
  void *result;

  v4 = *a2;
  v5 = *a2 + 48 * a1;
  v6 = *(void **)(v5 + 8);
  *(_BYTE *)(v5 + 32) = objc_msgSend(v6, "ascending");
  *(_BYTE *)(v5 + 33) = objc_msgSend(v6, "reverseNullOrder");
  *(_QWORD *)(v5 + 40) = objc_msgSend(v6, "selector");
  *(_QWORD *)(v5 + 24) = objc_msgSend(v6, "key");
  v7 = (objc_class *)objc_opt_class();
  MethodImplementation = class_getMethodImplementation(v7, sel_compareObject_toObject_);
  v9 = (IMP *)(v5 + 16);
  if (MethodImplementation == (IMP)_NSInternalCompareObject)
  {
    *v9 = 0;
    result = malloc_type_calloc(a2[2], 0x10uLL, 0x80040803F642BuLL);
  }
  else
  {
    v10 = MethodImplementation;
    result = 0;
    *v9 = v10;
  }
  *(_QWORD *)(v4 + 48 * a1) = result;
  ++a2[3];
  return result;
}

Swift::String __swiftcall NSLocalizedString(_:tableName:bundle:value:comment:)(Swift::String _, Swift::String_optional tableName, NSBundle *bundle, Swift::String value, Swift::String comment)
{
  void *object;
  uint64_t v7;
  uint64_t v8;
  NSString *v9;
  id v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  Swift::String result;

  object = tableName.value._object;
  v7 = String._bridgeToObjectiveCImpl()();
  v8 = String._bridgeToObjectiveCImpl()();
  if (object)
    object = (void *)String._bridgeToObjectiveCImpl()();
  v9 = -[NSBundle localizedStringForKey:value:table:](bundle, sel_localizedStringForKey_value_table_, v7, v8, object);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v12 = v11;

  v13 = (uint64_t)v10;
  v14 = v12;
  result._object = v14;
  result._countAndFlagsBits = v13;
  return result;
}

double protocol witness for _CalendarProtocol.dateInterval(of:for:) in conformance _CalendarAutoupdating(Foundation::Calendar::Component a1, double a2)
{
  double result;

  *(_QWORD *)&result = (unint64_t)_CalendarAutoupdating.dateInterval(of:for:)(a1, *(Foundation::Date *)&a2);
  return result;
}

Foundation::DateInterval_optional __swiftcall _CalendarAutoupdating.dateInterval(of:for:)(Foundation::Calendar::Component of, Foundation::Date a2)
{
  uint64_t *v2;
  char v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t ObjectType;
  char v8;
  Swift::Double v9;
  double v10;
  _BYTE v11[9];
  uint64_t v12[2];
  Foundation::DateInterval_optional result;

  v3 = *(_BYTE *)of;
  v4 = *v2;
  if (one-time initialization token for cache != -1)
    swift_once();
  v5 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v5);
  closure #1 in CalendarCache.current.getter(v12);
  os_unfair_lock_unlock(v5);
  swift_release_n();
  v6 = v12[1];
  ObjectType = swift_getObjectType();
  v11[0] = v3;
  v12[0] = v4;
  (*(void (**)(_BYTE *, uint64_t *, uint64_t, uint64_t))(v6 + 160))(v11, v12, ObjectType, v6);
  v8 = swift_unknownObjectRelease();
  result.value.duration = v10;
  result.value.start._time = v9;
  result.is_nil = v8;
  return result;
}

uint64_t _CalendarICU.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:)()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  uint64_t v4;

  v1 = *(os_unfair_lock_s **)(v0 + 16);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for closure #1 in _CalendarICU.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:)(&v4);
  v2 = v4;
  os_unfair_lock_unlock(v1 + 4);
  swift_release();
  return v2;
}

uint64_t _NSSwiftCalendar.range(of:start:interval:for:)(uint64_t a1, _QWORD *a2, double *a3, double *a4)
{
  uint64_t v4;
  double v7;
  char v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t ObjectType;
  double v16;
  id v17;
  id v18;
  double v19;
  char v20;
  double v21[2];
  char v22;

  v7 = *a4;
  _fromNSCalendarUnit(_:)(a1, (char *)v21);
  v8 = LOBYTE(v21[0]);
  if (LOBYTE(v21[0]) == 18)
    return 0;
  v9 = *(_QWORD *)(v4 + OBJC_IVAR____NSSwiftCalendar__lock);
  v10 = (os_unfair_lock_s *)(v9 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)(v9 + 32));
  v11 = *(_QWORD *)(v9 + 24);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock(v10);
  v20 = v8;
  v12 = 1.59271755e13;
  if (v7 <= 1.59271755e13)
    v12 = v7;
  v13 = fmax(v12, -2.11845067e11);
  ObjectType = swift_getObjectType();
  v19 = v13;
  (*(void (**)(double *__return_ptr, char *, double *, uint64_t, uint64_t))(v11 + 160))(v21, &v20, &v19, ObjectType, v11);
  swift_unknownObjectRelease();
  if ((v22 & 1) != 0)
    return 0;
  v16 = v21[1];
  if (a2)
  {
    v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D68]), sel_initWithTimeIntervalSinceReferenceDate_, v21[0]);
    v18 = v17;
    *a2 = v17;
  }
  if (a3)
    *a3 = v16;
  return 1;
}

NSLocale_optional __swiftcall _NSSwiftLocale._localeWithNewCalendarIdentifier(_:)(Swift::String_optional a1)
{
  char *v1;
  void *v2;
  Swift::Bool v3;
  char v4;
  char *v5;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  objc_class *v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  objc_class *v16;
  objc_super v17;
  char v18;
  NSLocale_optional result;

  if (a1.value._object)
  {
    v2 = (void *)String._bridgeToObjectiveCImpl()();
    static Calendar._fromNSCalendarIdentifier(_:)(v2, &v18);
    swift_unknownObjectRelease();
    v4 = v18;
    if (v18 == 16)
    {
      v1 = 0;
    }
    else
    {
      v6 = *(_QWORD *)&v1[OBJC_IVAR____NSSwiftLocale_locale + 8];
      ObjectType = swift_getObjectType();
      v18 = v4;
      v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 40);
      swift_unknownObjectRetain();
      v9 = v8(&v18, ObjectType, v6);
      v11 = v10;
      swift_unknownObjectRelease();
      v12 = (objc_class *)type metadata accessor for _NSSwiftLocale();
      v13 = (char *)objc_allocWithZone(v12);
      v14 = (uint64_t *)&v13[OBJC_IVAR____NSSwiftLocale_locale];
      *v14 = v9;
      v14[1] = v11;
      v15 = String._bridgeToObjectiveCImpl()();
      v17.receiver = v13;
      v17.super_class = v12;
      swift_unknownObjectRetain();
      v1 = (char *)objc_msgSendSuper2(&v17, sel_initWithLocaleIdentifier_, v15);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
    }
  }
  else
  {
    v5 = v1;
  }
  v16 = (objc_class *)v1;
  result.value.super.isa = v16;
  result.is_nil = v3;
  return result;
}

id _NSSwiftCalendar.init(checkedCalendarIdentifier:)(void *a1)
{
  void *v1;
  char *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  __int128 v10;
  objc_super v11;
  __int128 v12;

  v3 = v1;
  static Calendar._fromNSCalendarIdentifier(_:)(a1, (char *)&v12);
  v4 = v12;
  if (v12 == 16)
  {

    type metadata accessor for _NSSwiftCalendar();
    swift_deallocPartialClassInstance();
    return 0;
  }
  else
  {
    if (one-time initialization token for cache != -1)
      swift_once();
    v6 = static CalendarCache.cache + 16;
    v7 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
    swift_retain_n();
    os_unfair_lock_lock(v7);
    closure #1 in CalendarCache.fixed(_:)(v6, v4, &v12);
    os_unfair_lock_unlock(v7);
    swift_release_n();
    v10 = v12;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<Calendar, os_unfair_lock_s>);
    v8 = swift_allocObject();
    *(_DWORD *)(v8 + 32) = 0;
    *(_OWORD *)(v8 + 16) = v10;
    *(_QWORD *)&v3[OBJC_IVAR____NSSwiftCalendar__lock] = v8;

    v11.receiver = v3;
    v11.super_class = (Class)type metadata accessor for _NSSwiftCalendar();
    v5 = objc_msgSendSuper2(&v11, sel_initWithCheckedCalendarIdentifier_, a1);

  }
  return v5;
}

uint64_t static Calendar._fromNSCalendarIdentifier(_:)@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  uint64_t result;
  char v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C996C8]);
  v6 = v5;
  if (v4 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v6 == v7)
  {
    v11 = 0;
LABEL_13:
    result = swift_bridgeObjectRelease_n();
    goto LABEL_14;
  }
  v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v11 = 0;
  if ((v9 & 1) != 0)
    goto LABEL_14;
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C99698]);
  v14 = v13;
  if (v12 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v14 == v15)
  {
    v11 = 1;
    goto LABEL_13;
  }
  v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v17 & 1) != 0)
  {
    v11 = 1;
    goto LABEL_14;
  }
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C996A0]);
  v20 = v19;
  if (v18 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v20 == v21)
  {
    v11 = 2;
    goto LABEL_13;
  }
  v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v22 & 1) != 0)
  {
    v11 = 2;
    goto LABEL_14;
  }
  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C996A8]);
  v25 = v24;
  if (v23 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v25 == v26)
  {
    v11 = 3;
    goto LABEL_13;
  }
  v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v27 & 1) != 0)
  {
    v11 = 3;
    goto LABEL_14;
  }
  v28 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C996B8]);
  v30 = v29;
  if (v28 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v30 == v31)
  {
    v11 = 4;
    goto LABEL_13;
  }
  v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v32 & 1) != 0)
  {
    v11 = 4;
    goto LABEL_14;
  }
  v33 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C996B0]);
  v35 = v34;
  if (v33 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v35 == v36)
  {
    v11 = 5;
    goto LABEL_13;
  }
  v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v37 & 1) != 0)
  {
    v11 = 5;
    goto LABEL_14;
  }
  v38 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C996D0]);
  v40 = v39;
  if (v38 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v40 == v41)
  {
    v11 = 6;
    goto LABEL_13;
  }
  v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v42 & 1) != 0)
  {
    v11 = 6;
    goto LABEL_14;
  }
  v43 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C996D8]);
  v45 = v44;
  if (v43 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v45 == v46)
  {
    v11 = 7;
    goto LABEL_13;
  }
  v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v47 & 1) != 0)
  {
    v11 = 7;
    goto LABEL_14;
  }
  v48 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C996E0]);
  v50 = v49;
  if (v48 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v50 == v51)
  {
    v11 = 8;
    goto LABEL_13;
  }
  v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v52 & 1) != 0)
  {
    v11 = 8;
    goto LABEL_14;
  }
  v53 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C996E8]);
  v55 = v54;
  if (v53 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v55 == v56)
  {
    v11 = 9;
    goto LABEL_13;
  }
  v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v57 & 1) != 0)
  {
    v11 = 9;
    goto LABEL_14;
  }
  v58 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C996F0]);
  v60 = v59;
  if (v58 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v60 == v61)
  {
    v11 = 10;
    goto LABEL_13;
  }
  v62 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v62 & 1) != 0)
  {
    v11 = 10;
    goto LABEL_14;
  }
  v63 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C99708]);
  v65 = v64;
  if (v63 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v65 == v66)
  {
    v11 = 11;
    goto LABEL_13;
  }
  v67 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v67 & 1) != 0)
  {
    v11 = 11;
    goto LABEL_14;
  }
  v68 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C99710]);
  v70 = v69;
  if (v68 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v70 == v71)
  {
    v11 = 12;
    goto LABEL_13;
  }
  v72 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v72 & 1) != 0)
  {
    v11 = 12;
    goto LABEL_14;
  }
  v73 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C99718]);
  v75 = v74;
  if (v73 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v75 == v76)
  {
    v11 = 13;
    goto LABEL_13;
  }
  v77 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v77 & 1) != 0)
  {
    v11 = 13;
    goto LABEL_14;
  }
  v78 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C996F8]);
  v80 = v79;
  if (v78 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v80 == v81)
  {
    v11 = 14;
    goto LABEL_13;
  }
  v82 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v82 & 1) != 0)
  {
    v11 = 14;
    goto LABEL_14;
  }
  v83 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C99700]);
  v85 = v84;
  if (v83 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v85 == v86)
  {
    v11 = 15;
    goto LABEL_13;
  }
  v87 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v87 & 1) != 0)
    v11 = 15;
  else
    v11 = 16;
LABEL_14:
  *a2 = v11;
  return result;
}

uint64_t closure #1 in CalendarCache.fixed(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  char v3;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t result;
  __int128 v11;
  uint64_t v12;
  uint64_t (*v13)();
  unint64_t *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t *v28;
  uint64_t v29;
  void *v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  __int128 v38;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  uint64_t *v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  void *__src;
  int64_t v47;
  __int128 v48;
  _OWORD *v49;
  uint64_t v50;
  char v51;
  _QWORD v52[2];
  _QWORD v53[2];
  char v54;

  CalendarCache.State.check()();
  v7 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(v7 + 16))
  {
    v8 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v9 & 1) != 0)
    {
      v48 = *(_OWORD *)(*(_QWORD *)(v7 + 56) + 16 * v8);
      result = swift_unknownObjectRetain();
      v11 = v48;
LABEL_54:
      *a3 = v11;
      return result;
    }
  }
  v49 = a3;
  if ((_BYTE)a2)
  {
    v12 = type metadata accessor for _CalendarICU();
    v13 = type metadata accessor for _CalendarICU;
    v14 = (unint64_t *)&lazy protocol witness table cache variable for type _CalendarICU and conformance _CalendarICU;
    v15 = &protocol conformance descriptor for _CalendarICU;
  }
  else
  {
    v12 = type metadata accessor for _CalendarGregorian();
    v13 = type metadata accessor for _CalendarGregorian;
    v14 = (unint64_t *)&lazy protocol witness table cache variable for type _CalendarGregorian and conformance _CalendarGregorian;
    v15 = &protocol conformance descriptor for _CalendarGregorian;
  }
  v16 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(v14, (uint64_t (*)(uint64_t))v13, (uint64_t)v15);
  v54 = a2;
  v53[0] = 0;
  v53[1] = 0;
  v52[0] = 0;
  v52[1] = 0;
  v50 = 0;
  v51 = 1;
  v17 = (*(uint64_t (**)(char *, _QWORD *, _QWORD *, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t *, uint64_t, uint64_t))(v16 + 16))(&v54, v53, v52, 0, 1, 0, 1, &v50, v12, v16);
  swift_unknownObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v53[0] = *(_QWORD *)(a1 + 24);
  v19 = v53[0];
  *(_QWORD *)(a1 + 24) = 0x8000000000000000;
  v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v22 = *(_QWORD *)(v19 + 16);
  v23 = (v20 & 1) == 0;
  v24 = v22 + v23;
  if (__OFADD__(v22, v23))
  {
    __break(1u);
    goto LABEL_16;
  }
  v3 = v20;
  if (*(_QWORD *)(v19 + 24) >= v24)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v25 = v19;
      if ((v20 & 1) == 0)
        goto LABEL_51;
LABEL_14:
      v28 = (uint64_t *)(*(_QWORD *)(v25 + 56) + 16 * v21);
      swift_unknownObjectRelease();
      *v28 = v17;
      v28[1] = v16;
LABEL_53:
      *(_QWORD *)(a1 + 24) = v25;
      result = swift_bridgeObjectRelease();
      *(_QWORD *)&v11 = v17;
      *((_QWORD *)&v11 + 1) = v16;
      a3 = v49;
      goto LABEL_54;
    }
LABEL_16:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Calendar.Identifier, _CalendarProtocol>);
    v29 = static _DictionaryStorage.copy(original:)();
    v25 = v29;
    if (*(_QWORD *)(v19 + 16))
    {
      v30 = (void *)(v29 + 64);
      v31 = (unint64_t)((1 << *(_BYTE *)(v25 + 32)) + 63) >> 6;
      __src = (void *)(v19 + 64);
      if (v25 != v19 || (unint64_t)v30 >= v19 + 64 + 8 * v31)
        memmove(v30, __src, 8 * v31);
      v32 = 0;
      *(_QWORD *)(v25 + 16) = *(_QWORD *)(v19 + 16);
      v33 = 1 << *(_BYTE *)(v19 + 32);
      v34 = -1;
      if (v33 < 64)
        v34 = ~(-1 << v33);
      v35 = v34 & *(_QWORD *)(v19 + 64);
      v47 = (unint64_t)(v33 + 63) >> 6;
      while (1)
      {
        if (v35)
        {
          v36 = __clz(__rbit64(v35));
          v35 &= v35 - 1;
          v37 = v36 | (v32 << 6);
        }
        else
        {
          v39 = v32 + 1;
          if (__OFADD__(v32, 1))
            goto LABEL_56;
          if (v39 >= v47)
            break;
          v40 = *((_QWORD *)__src + v39);
          ++v32;
          if (!v40)
          {
            v32 = v39 + 1;
            if (v39 + 1 >= v47)
              break;
            v40 = *((_QWORD *)__src + v32);
            if (!v40)
            {
              v32 = v39 + 2;
              if (v39 + 2 >= v47)
                break;
              v40 = *((_QWORD *)__src + v32);
              if (!v40)
              {
                v32 = v39 + 3;
                if (v39 + 3 >= v47)
                  break;
                v40 = *((_QWORD *)__src + v32);
                if (!v40)
                {
                  v32 = v39 + 4;
                  if (v39 + 4 >= v47)
                    break;
                  v40 = *((_QWORD *)__src + v32);
                  if (!v40)
                  {
                    v32 = v39 + 5;
                    if (v39 + 5 >= v47)
                      break;
                    v40 = *((_QWORD *)__src + v32);
                    if (!v40)
                    {
                      v32 = v39 + 6;
                      if (v39 + 6 >= v47)
                        break;
                      v40 = *((_QWORD *)__src + v32);
                      if (!v40)
                      {
                        v32 = v39 + 7;
                        if (v39 + 7 >= v47)
                          break;
                        v40 = *((_QWORD *)__src + v32);
                        if (!v40)
                        {
                          v41 = v39 + 8;
                          if (v41 >= v47)
                            break;
                          v40 = *((_QWORD *)__src + v41);
                          if (!v40)
                          {
                            while (1)
                            {
                              v32 = v41 + 1;
                              if (__OFADD__(v41, 1))
                                goto LABEL_57;
                              if (v32 >= v47)
                                goto LABEL_50;
                              v40 = *((_QWORD *)__src + v32);
                              ++v41;
                              if (v40)
                                goto LABEL_49;
                            }
                          }
                          v32 = v41;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_49:
          v35 = (v40 - 1) & v40;
          v37 = __clz(__rbit64(v40)) + (v32 << 6);
        }
        v38 = *(_OWORD *)(*(_QWORD *)(v19 + 56) + 16 * v37);
        *(_BYTE *)(*(_QWORD *)(v25 + 48) + v37) = *(_BYTE *)(*(_QWORD *)(v19 + 48) + v37);
        *(_OWORD *)(*(_QWORD *)(v25 + 56) + 16 * v37) = v38;
        swift_unknownObjectRetain();
      }
    }
LABEL_50:
    swift_bridgeObjectRelease();
    if ((v3 & 1) == 0)
      goto LABEL_51;
    goto LABEL_14;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v24, isUniquelyReferenced_nonNull_native);
  v25 = v53[0];
  v26 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v3 & 1) != (v27 & 1))
    goto LABEL_58;
  v21 = v26;
  if ((v3 & 1) != 0)
    goto LABEL_14;
LABEL_51:
  *(_QWORD *)(v25 + 8 * (v21 >> 6) + 64) |= 1 << v21;
  *(_BYTE *)(*(_QWORD *)(v25 + 48) + v21) = a2;
  v42 = (uint64_t *)(*(_QWORD *)(v25 + 56) + 16 * v21);
  *v42 = v17;
  v42[1] = v16;
  v43 = *(_QWORD *)(v25 + 16);
  v44 = __OFADD__(v43, 1);
  v45 = v43 + 1;
  if (!v44)
  {
    *(_QWORD *)(v25 + 16) = v45;
    goto LABEL_53;
  }
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

id @objc _NSSwiftCalendar.date(byAdding:value:to:options:)(void *a1, int a2, uint64_t a3, uint64_t a4, id a5, uint64_t a6, void (*a7)(double *__return_ptr, uint64_t, uint64_t, uint64_t *, uint64_t))
{
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v16;
  double v17;
  char v18;

  objc_msgSend(a5, sel_timeIntervalSinceReferenceDate);
  v16 = v12;
  v13 = a1;
  a7(&v17, a3, a4, &v16, a6);

  if ((v18 & 1) != 0)
    v14 = 0;
  else
    v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D68]), sel_initWithTimeIntervalSinceReferenceDate_, v17);
  return v14;
}

Foundation::Date_optional __swiftcall _NSSwiftCalendar.date(byAdding:value:to:options:)(NSCalendarUnit byAdding, Swift::Int value, Foundation::Date to, NSCalendarOptions options)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v10;
  double v11;
  char v12;
  Swift::Double v13;
  char v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t ObjectType;
  void (*v22)(uint64_t *, double *, uint64_t, uint64_t, uint64_t);
  double v23;
  uint64_t v24[36];
  __int128 __dst[18];
  char __src[288];
  Swift::Int_optional v27;
  Foundation::Date_optional result;

  v7 = v6;
  v8 = v4;
  v10 = v5;
  v11 = *(double *)options;
  v12 = _fromNSCalendarUnit(_:)(byAdding, __src);
  v14 = __src[0];
  if (__src[0] == 18)
  {
    *(_QWORD *)v10 = 0;
    *(_BYTE *)(v10 + 8) = 1;
  }
  else
  {
    __dst[0] = 0uLL;
    v24[0] = 0;
    v24[1] = 0;
    DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(__dst, v24, 0, 1, 0, 1, 0, 1, (uint64_t)__src, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1);
    LOBYTE(__dst[0]) = v14;
    v27.value = value;
    v27.is_nil = 0;
    DateComponents.setValue(_:for:)(v27, (Foundation::Calendar::Component)__dst);
    v15 = *(_QWORD *)(v7 + OBJC_IVAR____NSSwiftCalendar__lock);
    v16 = (os_unfair_lock_s *)(v15 + 32);
    os_unfair_lock_lock((os_unfair_lock_t)(v15 + 32));
    v17 = *(_QWORD *)(v15 + 24);
    swift_unknownObjectRetain();
    os_unfair_lock_unlock(v16);
    memcpy(__dst, __src, 0x11AuLL);
    v18 = v8 & 1;
    memcpy(v24, __src, 0x11AuLL);
    v19 = 1.59271755e13;
    if (v11 <= 1.59271755e13)
      v19 = v11;
    v20 = fmax(v19, -2.11845067e11);
    ObjectType = swift_getObjectType();
    v23 = v20;
    v22 = *(void (**)(uint64_t *, double *, uint64_t, uint64_t, uint64_t))(v17 + 200);
    outlined retain of DateComponents((uint64_t)__dst);
    v22(v24, &v23, v18, ObjectType, v17);
    outlined release of DateComponents((uint64_t)__dst);
    swift_unknownObjectRelease();
    v12 = outlined release of DateComponents((uint64_t)__dst);
  }
  result.value = *(Foundation::Date *)&v13;
  result.is_nil = v12;
  return result;
}

Swift::Int __swiftcall _NSSwiftCalendar.component(_:from:)(NSCalendarUnit _, Foundation::Date from)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  char v12[288];

  v4 = *v2;
  _fromNSCalendarUnit(_:)(_, v12);
  v5 = v12[0];
  if (v12[0] != 18)
  {
    v7 = *(_QWORD *)(v3 + OBJC_IVAR____NSSwiftCalendar__lock);
    os_unfair_lock_lock((os_unfair_lock_t)(v7 + 32));
    v8 = *(_OWORD *)(v7 + 16);
    swift_unknownObjectRetain();
    os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 32));
    v11 = v8;
    v10 = qword_1820DCED8[v5];
    v9 = v4;
    Calendar._dateComponents(_:from:)(&v10, (double *)&v9, v12);
    outlined release of DateComponents((uint64_t)v12);
    swift_unknownObjectRelease();
    __asm { BR              X10 }
  }
  return 0x7FFFFFFFFFFFFFFFLL;
}

void sub_181899704(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if ((a20 & 1) == 0)
    JUMPOUT(0x1818996E8);
  JUMPOUT(0x1818996E4);
}

void sub_181899714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if ((a22 & 1) == 0)
    JUMPOUT(0x1818996E8);
  JUMPOUT(0x1818996E4);
}

void sub_181899724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if ((a24 & 1) == 0)
    JUMPOUT(0x1818996E8);
  JUMPOUT(0x1818996E4);
}

void sub_181899734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if ((a26 & 1) == 0)
    JUMPOUT(0x1818996E8);
  JUMPOUT(0x1818996E4);
}

void sub_181899744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  if ((a30 & 1) == 0)
    JUMPOUT(0x1818996E8);
  JUMPOUT(0x1818996E4);
}

void sub_181899754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  if ((a32 & 1) == 0)
    JUMPOUT(0x1818996E8);
  JUMPOUT(0x1818996E4);
}

void sub_181899764(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  if ((a34 & 1) == 0)
    JUMPOUT(0x1818996E8);
  JUMPOUT(0x1818996E4);
}

void sub_181899774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  if ((a38 & 1) == 0)
    JUMPOUT(0x1818996E8);
  JUMPOUT(0x1818996E4);
}

void sub_181899784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  if ((a40 & 1) == 0)
    JUMPOUT(0x1818996E8);
  JUMPOUT(0x1818996E4);
}

void sub_181899794(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  if ((a42 & 1) == 0)
    JUMPOUT(0x1818996E8);
  JUMPOUT(0x1818996E4);
}

void sub_1818997A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  if ((a46 & 1) == 0)
    JUMPOUT(0x1818996E8);
  JUMPOUT(0x1818996E4);
}

void sub_1818997B4()
{
  _BYTE *v0;

  if ((*v0 & 1) == 0)
    JUMPOUT(0x1818996E8);
  JUMPOUT(0x1818996E4);
}

void sub_1818997C4()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 16) & 1) == 0)
    JUMPOUT(0x1818996E8);
  JUMPOUT(0x1818996E4);
}

void sub_1818997D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  if ((a36 & 1) == 0)
    JUMPOUT(0x1818996E8);
  JUMPOUT(0x1818996E4);
}

void sub_1818997E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if ((a28 & 1) == 0)
    JUMPOUT(0x1818996E8);
  JUMPOUT(0x1818996E4);
}

uint64_t _fromNSCalendarUnit(_:)@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  if (result > 1023)
  {
    if (result >= 0x4000)
    {
      if (result < 0x10000)
      {
        if (result == 0x4000)
        {
          *a2 = 12;
          return result;
        }
        if (result == 0x8000)
        {
          *a2 = 13;
          return result;
        }
      }
      else
      {
        switch(result)
        {
          case 0x10000:
            *a2 = 17;
            return result;
          case 0x100000:
            *a2 = 14;
            return result;
          case 0x200000:
            *a2 = 15;
            return result;
        }
      }
      goto LABEL_37;
    }
    if (result <= 4095)
    {
      if (result == 1024)
      {
        *a2 = 8;
        return result;
      }
      if (result == 2048)
      {
        *a2 = 9;
        return result;
      }
      goto LABEL_37;
    }
    if (result == 4096)
    {
      *a2 = 10;
      return result;
    }
    if (result != 0x2000)
      goto LABEL_37;
    goto LABEL_27;
  }
  if (result <= 63)
  {
    v2 = 0;
    switch(result)
    {
      case 2:
        goto LABEL_38;
      case 4:
        *a2 = 1;
        break;
      case 8:
        *a2 = 2;
        break;
      case 16:
        *a2 = 3;
        break;
      case 32:
        *a2 = 4;
        break;
      default:
        goto LABEL_37;
    }
    return result;
  }
  if (result <= 255)
  {
    if (result == 64)
    {
      *a2 = 5;
      return result;
    }
    if (result == 128)
    {
      *a2 = 6;
      return result;
    }
    goto LABEL_37;
  }
  if (result == 256)
  {
LABEL_27:
    *a2 = 11;
    return result;
  }
  if (result == 512)
  {
    *a2 = 7;
    return result;
  }
LABEL_37:
  v2 = 18;
LABEL_38:
  *a2 = v2;
  return result;
}

id @objc static NSCalendar._current.getter()
{
  return specialized static NSCalendar._current.getter();
}

id specialized static NSCalendar._current.getter()
{
  os_unfair_lock_s *v0;
  objc_class *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  __int128 v6;
  objc_super v7;
  __int128 v8;

  if (one-time initialization token for cache != -1)
    swift_once();
  v0 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v0);
  closure #1 in CalendarCache.current.getter((uint64_t *)&v8);
  os_unfair_lock_unlock(v0);
  swift_release_n();
  v1 = (objc_class *)type metadata accessor for _NSSwiftCalendar();
  v6 = v8;
  v2 = (char *)objc_allocWithZone(v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<Calendar, os_unfair_lock_s>);
  v3 = swift_allocObject();
  *(_DWORD *)(v3 + 32) = 0;
  *(_OWORD *)(v3 + 16) = v6;
  *(_QWORD *)&v2[OBJC_IVAR____NSSwiftCalendar__lock] = v3;
  v4 = *MEMORY[0x1E0C996C8];
  v7.receiver = v2;
  v7.super_class = v1;
  result = objc_msgSendSuper2(&v7, sel_initWithCheckedCalendarIdentifier_, v4);
  if (!result)
    __break(1u);
  return result;
}

uint64_t Calendar.date(from:)(void *__src)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  _BYTE v5[288];

  memcpy(v5, __src, 0x11AuLL);
  v2 = *(_QWORD *)(v1 + 8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v2 + 176))(v5, ObjectType, v2);
}

Foundation::Date_optional __swiftcall Calendar.date(byAdding:value:to:wrappingComponents:)(Foundation::Calendar::Component byAdding, Swift::Int value, Foundation::Date to, Swift::Bool wrappingComponents)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int v11;
  Swift::Double v12;
  uint64_t ObjectType;
  double v14;
  _BYTE __dst[288];
  uint64_t v16[36];
  uint64_t __src[36];
  Foundation::Date_optional result;

  v7 = v4;
  v8 = v5;
  v9 = *(double *)wrappingComponents;
  v10 = *(_QWORD *)(v6 + 8);
  LOBYTE(__src[0]) = *(_BYTE *)byAdding;
  DateComponents.init(component:value:)(*(Swift::Int_optional *)&value, (unsigned __int8 *)__src, (uint64_t)__dst);
  outlined init with take of DateComponents?((uint64_t)__dst, (uint64_t)v16);
  outlined init with take of DateComponents?((uint64_t)v16, (uint64_t)__src);
  v11 = _s10Foundation13URLComponentsV01_B0VSgWOg(__src);
  if (v11 == 1)
  {
    *(_QWORD *)v8 = 0;
    *(_BYTE *)(v8 + 8) = 1;
  }
  else
  {
    if (v9 > 1.59271755e13)
      v9 = 1.59271755e13;
    memcpy(__dst, __src, 0x11AuLL);
    ObjectType = swift_getObjectType();
    v14 = fmax(v9, -2.11845067e11);
    (*(void (**)(_BYTE *, double *, _QWORD, uint64_t, uint64_t))(v10 + 200))(__dst, &v14, v7 & 1, ObjectType, v10);
    LOBYTE(v11) = outlined release of DateComponents?(v16);
  }
  result.value = *(Foundation::Date *)&v12;
  result.is_nil = v11;
  return result;
}

uint64_t _NSSwiftCalendar.date(byAdding:to:options:)(void *__src, double *a2, char a3)
{
  uint64_t v3;
  double v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t ObjectType;
  double v15;
  _BYTE __dst[288];

  memcpy(__dst, __src, 0x11AuLL);
  v6 = *a2;
  v7 = *(_QWORD *)(v3 + OBJC_IVAR____NSSwiftCalendar__lock);
  v8 = (os_unfair_lock_s *)(v7 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)(v7 + 32));
  v9 = *(_QWORD *)(v7 + 24);
  v10 = a3 & 1;
  swift_unknownObjectRetain();
  os_unfair_lock_unlock(v8);
  v11 = 1.59271755e13;
  if (v6 <= 1.59271755e13)
    v11 = v6;
  v12 = fmax(v11, -2.11845067e11);
  ObjectType = swift_getObjectType();
  v15 = v12;
  (*(void (**)(_BYTE *, double *, uint64_t, uint64_t, uint64_t))(v9 + 200))(__dst, &v15, v10, ObjectType, v9);
  return swift_unknownObjectRelease();
}

uint64_t _NSSwiftCalendar._date(from:)(void *__src)
{
  uint64_t v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t ObjectType;
  _BYTE v7[288];

  memcpy(v7, __src, 0x11AuLL);
  v2 = *(_QWORD *)(v1 + OBJC_IVAR____NSSwiftCalendar__lock);
  v3 = (os_unfair_lock_s *)(v2 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 32));
  v4 = *(_QWORD *)(v2 + 24);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock(v3);
  ObjectType = swift_getObjectType();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 176))(v7, ObjectType, v4);
  return swift_unknownObjectRelease();
}

uint64_t _CalendarICU.date(from:)@<X0>(void *__src@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  void *v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  void (*v17)(_BYTE *, uint64_t, uint64_t);
  os_unfair_lock_s *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t ObjectType;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  _BYTE v53[288];
  uint64_t v54[37];
  _QWORD v55[37];

  v4 = memcpy(v55, __src, 0x11AuLL);
  v5 = v55[2];
  if (v55[2])
  {
    v50 = a2;
    v51 = &v20;
    v6 = *(os_unfair_lock_s **)(v2 + 16);
    MEMORY[0x1E0C80A78](v4);
    swift_unknownObjectRetain_n();
    swift_retain();
    os_unfair_lock_lock(v6 + 4);
    partial apply for closure #1 in _CalendarICU.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:)(v54);
    v52 = v54[0];
    v48 = &v54[33];
    v49 = v54[1];
    os_unfair_lock_unlock(v6 + 4);
    swift_unknownObjectRelease();
    swift_release();
    outlined retain of DateComponents((uint64_t)v55);
    swift_unknownObjectRelease();
    v46 = LOBYTE(v55[35]);
    v47 = BYTE1(v55[35]);
    v44 = v55[32];
    v45 = v55[34];
    v43 = LOBYTE(v55[33]);
    v41 = v55[30];
    v40 = LOBYTE(v55[31]);
    v39 = v55[28];
    v38 = LOBYTE(v55[29]);
    v37 = v55[26];
    v36 = LOBYTE(v55[27]);
    v34 = v55[24];
    v33 = LOBYTE(v55[25]);
    v32 = v55[22];
    v31 = LOBYTE(v55[23]);
    v30 = v55[20];
    v29 = LOBYTE(v55[21]);
    v28 = v55[18];
    v27 = LOBYTE(v55[19]);
    v26 = v55[16];
    v25 = LOBYTE(v55[17]);
    v24 = v55[14];
    v23 = LOBYTE(v55[15]);
    v22 = v55[12];
    v21 = LOBYTE(v55[13]);
    v20 = v55[10];
    LOBYTE(v6) = v55[11];
    v7 = v55[8];
    v8 = v55[9];
    v9 = v55[6];
    v10 = v55[7];
    v11 = v55[4];
    v12 = v55[5];
    v42 = v5;
    v13 = v55[0];
    v14 = v55[1];
    ObjectType = swift_getObjectType();
    v54[0] = v13;
    v54[1] = v14;
    v54[4] = v11;
    LOBYTE(v54[5]) = v12;
    v54[6] = v9;
    LOBYTE(v54[7]) = v10;
    v54[3] = 0;
    v54[2] = 0;
    v54[8] = v7;
    LOBYTE(v54[9]) = v8;
    v54[10] = v20;
    LOBYTE(v54[11]) = (_BYTE)v6;
    v54[12] = v22;
    LOBYTE(v54[13]) = v21;
    v54[14] = v24;
    LOBYTE(v54[15]) = v23;
    v54[16] = v26;
    LOBYTE(v54[17]) = v25;
    v54[18] = v28;
    LOBYTE(v54[19]) = v27;
    v54[20] = v30;
    LOBYTE(v54[21]) = v29;
    v54[22] = v32;
    LOBYTE(v54[23]) = v31;
    v54[24] = v34;
    LOBYTE(v54[25]) = v33;
    v54[26] = v37;
    LOBYTE(v54[27]) = v36;
    v54[28] = v39;
    LOBYTE(v54[29]) = v38;
    v54[30] = v41;
    LOBYTE(v54[31]) = v40;
    v15 = v48;
    *(_BYTE *)v48 = v43;
    v54[32] = v44;
    v54[34] = v45;
    *((_BYTE *)v15 + 16) = v46;
    BYTE1(v54[35]) = v47;
    memcpy(v53, v54, 0x11AuLL);
    v16 = v49;
    v17 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v49 + 176);
    outlined retain of DateComponents((uint64_t)v54);
    v17(v53, ObjectType, v16);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    outlined release of DateComponents((uint64_t)v54);
    return outlined release of DateComponents((uint64_t)v54);
  }
  else
  {
    v19 = *(os_unfair_lock_s **)(v2 + 16);
    swift_retain();
    os_unfair_lock_lock(v19 + 4);
    closure #1 in _CalendarICU.date(from:)(v2, (uint64_t)v55, a2);
    os_unfair_lock_unlock(v19 + 4);
    return swift_release();
  }
}

uint64_t protocol witness for _CalendarProtocol.date(byAdding:to:wrappingComponents:) in conformance _CalendarICU(void *__src)
{
  uint64_t v1;
  os_unfair_lock_s *v2;
  _BYTE __dst[282];

  memcpy(__dst, __src, sizeof(__dst));
  v2 = *(os_unfair_lock_s **)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  partial apply for specialized closure #1 in LockedState<A>.withLock<A>(_:)();
  os_unfair_lock_unlock(v2 + 4);
  return swift_release();
}

uint64_t partial apply for closure #1 in _CalendarICU.date(byAdding:to:wrappingComponents:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in _CalendarICU.date(byAdding:to:wrappingComponents:)(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_BYTE *)(v1 + 40), a1, *(double *)(v1 + 16));
}

uint64_t protocol witness for _CalendarProtocol.date(byAdding:to:wrappingComponents:) in conformance _CalendarAutoupdating(const void *a1, uint64_t *a2, char a3)
{
  return _CalendarAutoupdating.date(byAdding:to:wrappingComponents:)(a1, a2, a3);
}

uint64_t _CalendarAutoupdating.date(byAdding:to:wrappingComponents:)(const void *a1, uint64_t *a2, char a3)
{
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t v10;
  uint64_t __dst[37];

  v5 = *a2;
  if (one-time initialization token for cache != -1)
    swift_once();
  v6 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  closure #1 in CalendarCache.current.getter(__dst);
  os_unfair_lock_unlock(v6);
  swift_release_n();
  v7 = __dst[1];
  ObjectType = swift_getObjectType();
  memcpy(__dst, a1, 0x11AuLL);
  v10 = v5;
  (*(void (**)(uint64_t *, uint64_t *, _QWORD, uint64_t, uint64_t))(v7 + 200))(__dst, &v10, a3 & 1, ObjectType, v7);
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for _CalendarProtocol.dateComponents(_:from:) in conformance _CalendarAutoupdating(uint64_t *a1, uint64_t *a2)
{
  return _CalendarAutoupdating.dateComponents(_:from:)(a1, a2);
}

uint64_t _CalendarAutoupdating.dateComponents(_:from:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t v8;
  uint64_t v9[2];

  v2 = *a1;
  v3 = *a2;
  if (one-time initialization token for cache != -1)
    swift_once();
  v4 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v4);
  closure #1 in CalendarCache.current.getter(v9);
  os_unfair_lock_unlock(v4);
  swift_release_n();
  v5 = v9[1];
  ObjectType = swift_getObjectType();
  v9[0] = v2;
  v8 = v3;
  (*(void (**)(uint64_t *, uint64_t *, uint64_t, uint64_t))(v5 + 192))(v9, &v8, ObjectType, v5);
  return swift_unknownObjectRelease();
}

double static Calendar.current.getter@<D0>(_OWORD *a1@<X8>)
{
  os_unfair_lock_s *v2;
  double result;
  __int128 v4;

  if (one-time initialization token for cache != -1)
    swift_once();
  v2 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v2);
  closure #1 in CalendarCache.current.getter((uint64_t *)&v4);
  os_unfair_lock_unlock(v2);
  swift_release_n();
  result = *(double *)&v4;
  *a1 = v4;
  return result;
}

uint64_t closure #1 in CalendarCache.current.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = CalendarCache.State.current()();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t CalendarCache.State.current()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  char v6;
  uint64_t v7;
  uint64_t (*v8)();
  unint64_t *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;
  _QWORD v16[2];
  _QWORD v17[2];
  char v18;

  v1 = v0;
  CalendarCache.State.check()();
  if (*v0)
  {
    v2 = *v0;
  }
  else
  {
    if (one-time initialization token for cache != -1)
      swift_once();
    v17[0] = static LocaleCache.cache;
    LocaleCache.current.getter();
    v4 = v3;
    ObjectType = swift_getObjectType();
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 200))(v17, ObjectType, v4);
    swift_unknownObjectRelease();
    v6 = v17[0];
    if (LOBYTE(v17[0]))
    {
      v7 = type metadata accessor for _CalendarICU();
      v8 = type metadata accessor for _CalendarICU;
      v9 = &lazy protocol witness table cache variable for type _CalendarICU and conformance _CalendarICU;
      v10 = &protocol conformance descriptor for _CalendarICU;
    }
    else
    {
      v7 = type metadata accessor for _CalendarGregorian();
      v8 = type metadata accessor for _CalendarGregorian;
      v9 = (unint64_t *)&lazy protocol witness table cache variable for type _CalendarGregorian and conformance _CalendarGregorian;
      v10 = &protocol conformance descriptor for _CalendarGregorian;
    }
    v11 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(v9, (uint64_t (*)(uint64_t))v8, (uint64_t)v10);
    v18 = v6;
    v17[0] = 0;
    v17[1] = 0;
    v16[0] = LocaleCache.current.getter();
    v16[1] = v12;
    v14 = 0;
    v15 = 1;
    v2 = (*(uint64_t (**)(char *, _QWORD *, _QWORD *, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t *, uint64_t, uint64_t))(v11 + 16))(&v18, v17, v16, 0, 1, 0, 1, &v14, v7, v11);
    *v1 = v2;
    v1[1] = v11;
    swift_unknownObjectRetain();
  }
  swift_unknownObjectRetain();
  return v2;
}

Swift::Void __swiftcall CalendarCache.State.check()()
{
  uint64_t v0;
  uint64_t NoteCount;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t MidnightNoteCount;
  uint64_t v6;

  NoteCount = _CFLocaleGetNoteCount();
  v2 = _CFTimeZoneGetNoteCount();
  v3 = __OFADD__(NoteCount, v2);
  v4 = NoteCount + v2;
  if (v3)
  {
    __break(1u);
    goto LABEL_8;
  }
  MidnightNoteCount = _CFCalendarGetMidnightNoteCount();
  v3 = __OFADD__(v4, MidnightNoteCount);
  v6 = v4 + MidnightNoteCount;
  if (v3)
  {
LABEL_8:
    __break(1u);
    return;
  }
  if (v6 != *(_QWORD *)(v0 + 32) || *(_BYTE *)(v0 + 40) == 1)
  {
    swift_unknownObjectRelease();
    *(_QWORD *)v0 = 0;
    *(_QWORD *)(v0 + 8) = 0;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 24) = MEMORY[0x1E0DEE9E0];
    *(_QWORD *)(v0 + 32) = v6;
    *(_BYTE *)(v0 + 40) = 0;
  }
}

uint64_t outlined retain of DateComponents(uint64_t a1)
{
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t partial apply for closure #1 in _CalendarICU.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in _CalendarICU.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:)(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_BYTE *)(v1 + 64), *(_QWORD *)(v1 + 72), a1, *(_BYTE *)(v1 + 80));
}

Swift::Void __swiftcall DateComponents.setValue(_:for:)(Swift::Int_optional _, Foundation::Calendar::Component a2)
{
  ((void (*)(Swift::Int, _QWORD))((char *)nullsub_1 + 4 * byte_182064DB0[*(unsigned __int8 *)a2]))(_.value, *(_QWORD *)&_.is_nil);
}

uint64_t sub_18189A908(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;

  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = result;
  *(_QWORD *)(v2 + 32) = v3;
  *(_BYTE *)(v2 + 40) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t sub_18189A938(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;

  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = result;
  *(_QWORD *)(v2 + 48) = v3;
  *(_BYTE *)(v2 + 56) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t sub_18189A968(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;

  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = result;
  *(_QWORD *)(v2 + 64) = v3;
  *(_BYTE *)(v2 + 72) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t sub_18189A998(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;

  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = result;
  *(_QWORD *)(v2 + 80) = v3;
  *(_BYTE *)(v2 + 88) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t sub_18189A9C8(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;

  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = result;
  *(_QWORD *)(v2 + 112) = v3;
  *(_BYTE *)(v2 + 120) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t sub_18189A9F8(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;

  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = result;
  *(_QWORD *)(v2 + 128) = v3;
  *(_BYTE *)(v2 + 136) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t sub_18189AA28(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;

  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = result;
  *(_QWORD *)(v2 + 144) = v3;
  *(_BYTE *)(v2 + 152) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t sub_18189AA58(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;

  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = result;
  *(_QWORD *)(v2 + 176) = v3;
  *(_BYTE *)(v2 + 184) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t sub_18189AA88(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;

  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = result;
  *(_QWORD *)(v2 + 192) = v3;
  *(_BYTE *)(v2 + 200) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t sub_18189AAB8(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;

  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = result;
  *(_QWORD *)(v2 + 208) = v3;
  *(_BYTE *)(v2 + 216) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t sub_18189AAE8(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;

  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = result;
  *(_QWORD *)(v2 + 240) = v3;
  *(_BYTE *)(v2 + 248) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t sub_18189AB18@<X0>(uint64_t result@<X0>, char a2@<W1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL)
    v4 = 0;
  else
    v4 = result;
  *(_QWORD *)(v3 + 256) = v4;
  *a3 = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t sub_18189AB48@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL)
    v4 = 0;
  else
    v4 = result;
  *(_QWORD *)(v3 + 272) = v4;
  *(_BYTE *)(a3 + 16) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t sub_18189AB78(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;

  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = result;
  *(_QWORD *)(v2 + 160) = v3;
  *(_BYTE *)(v2 + 168) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t sub_18189ABA8(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;

  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = result;
  *(_QWORD *)(v2 + 96) = v3;
  *(_BYTE *)(v2 + 104) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t protocol witness for _LocaleProtocol.copy(newCalendarIdentifier:) in conformance _LocaleAutoupdating(char *a1)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t v5;
  char v7;
  uint64_t v8;

  v1 = *a1;
  if (one-time initialization token for cache != -1)
    swift_once();
  v8 = static LocaleCache.cache;
  LocaleCache.current.getter();
  v3 = v2;
  ObjectType = swift_getObjectType();
  v7 = v1;
  v5 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 40))(&v7, ObjectType, v3);
  swift_unknownObjectRelease();
  return v5;
}

void static MeasurementFormatUnitUsage<>.weather.getter(_BYTE *a1@<X8>)
{
  *a1 = 11;
}

void protocol witness for SetAlgebra.init() in conformance NSKeyValueObservingOptions(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void static NSKeyedUnarchiver.unarchiveTopLevelObjectWithData(_:)(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSKeyedUnarchiver.Type);
  _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  __asm { BR              X10 }
}

void sub_18189B000()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  char *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10[5];
  _BYTE v11[120];

  v10[0] = v2;
  LOWORD(v10[1]) = v3;
  BYTE2(v10[1]) = BYTE2(v3);
  BYTE3(v10[1]) = BYTE3(v3);
  BYTE4(v10[1]) = BYTE4(v3);
  BYTE5(v10[1]) = BYTE5(v3);
  v4 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D50]), sel_initWithBytes_length_, v10, BYTE6(v3));
  v10[0] = 0;
  v5 = (id)__NSKeyedUnarchiverUnarchiveObject(v1, v4, (uint64_t)v10);
  swift_unknownObjectRelease();

  v6 = v10[0];
  if (v5)
  {
    v7 = v10[0];
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, 32);
    v8 = v6;
  }
  outlined init with take of Any?((uint64_t)v10, (uint64_t)v11);
  if (!v6)
    goto LABEL_7;
  v9 = v6;
  if (objc_msgSend(v9, sel_code) == (id)4865)
  {

LABEL_7:
    outlined init with take of Any?((uint64_t)v11, v0);

    return;
  }
  swift_willThrow();
  outlined destroy of Any?((uint64_t)v11, &demangling cache variable for type metadata for Any?);

}

uint64_t __NSKeyedUnarchiverUnarchiveObject(void *a1, const char *a2, uint64_t a3)
{
  if (a3)
    return objc_msgSend(a1, "unarchiveTopLevelObjectWithData:error:", a2, a3);
  else
    return objc_msgSend(a1, "unarchiveObjectWithData:", a2);
}

void sub_18189B494(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18189B580(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18189B5A0(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18189B54CLL);
}

BOOL decodingCyclesIsAllowedForCoder(uint64_t a1)
{
  unint64_t v1;
  char v2;
  int v3;
  int TrustRestrictions;

  v1 = atomic_load((unint64_t *)(a1 + 16));
  v2 = atomic_load((unint64_t *)(a1 + 16));
  v3 = atomic_load((unint64_t *)(a1 + 16));
  TrustRestrictions = _NSCoderGetTrustRestrictions();
  if ((v2 & 0x20) != 0)
    return 0;
  return ((v3 << 16) & 0x1000000 | (v1 >> 2) & 1) != 1 || TrustRestrictions != 0;
}

uint64_t _NSCoderGetTrustRestrictions()
{
  if (qword_1ECD09B60 != -1)
    dispatch_once(&qword_1ECD09B60, &__block_literal_global_5);
  return dword_1ECD09B5C;
}

void Data.write(to:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  Swift::String v13;
  uint64_t v14;
  unsigned __int8 v15;
  char v16;
  id v17;
  id v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v27;
  _QWORD v28[5];
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  if ((~(_BYTE)a2 & 3) != 0)
  {
    v6 = v4;
    v37 = a4;
    v9 = *(void **)a1;
    v8 = *(_QWORD *)(a1 + 8);
    v10 = *(_QWORD *)(a1 + 16);
    swift_retain();
    v11 = v9;
    swift_retain();
    if (_foundation_swift_url_feature_enabled())
    {
      v34 = v11;
      v35 = v8;
      v36 = v10;
      URL.scheme.getter();
      if (v12)
      {
        v33 = v6;
        v13 = String.lowercased()();
        swift_bridgeObjectRelease();
        if (v13._countAndFlagsBits == 1701603686 && v13._object == (void *)0xE400000000000000)
        {
          swift_release();
          swift_release();

          v14 = swift_bridgeObjectRelease();
LABEL_11:
          MEMORY[0x1E0C80A78](v14);
          v28[2] = v11;
          v28[3] = v8;
          v28[4] = v10;
          v29 = 1;
          v30 = a2;
          v31 = MEMORY[0x1E0DEE9E0];
          LOBYTE(v32) = 1;
          v17 = v11;
          swift_retain();
          swift_retain();
          specialized Data._Representation.withUnsafeBytes<A>(_:)((uint64_t)partial apply for closure #1 in writeToFile(path:data:options:attributes:reportProgress:), (uint64_t)v28, a3, v37);
          swift_release();
          swift_release();

          return;
        }
        v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_release();
        swift_release();

        v14 = swift_bridgeObjectRelease();
        if ((v16 & 1) != 0)
          goto LABEL_11;
      }
      else
      {
        swift_release();
        swift_release();

      }
    }
    else
    {
      v15 = objc_msgSend(v11, sel_isFileURL);
      swift_release();
      swift_release();

      if ((v15 & 1) != 0)
        goto LABEL_11;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v18 = objc_allocWithZone((Class)NSError);
    v19 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v20 = objc_msgSend(v18, sel_initWithDomain_code_userInfo_, v19, 518, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v21 = objc_msgSend(v20, sel_domain);
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v24 = v23;

    if (v22 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) || v24 != v25)
    {
      v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v27 & 1) != 0)
      {
LABEL_19:
        swift_willThrow();
        return;
      }
      __break(1u);
    }
    swift_bridgeObjectRelease_n();
    goto LABEL_19;
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::String __swiftcall Data.base64EncodedString(options:)(NSDataBase64EncodingOptions options)
{
  Swift::String result;

  __asm { BR              X10 }
  return result;
}

id sub_18189C068()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  id v5;
  uint64_t v7;
  __int16 v8;
  char v9;
  char v10;
  char v11;
  char v12;

  v7 = v0;
  v8 = v2;
  v9 = BYTE2(v2);
  v10 = BYTE3(v2);
  v11 = BYTE4(v2);
  v12 = BYTE5(v2);
  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D50]), sel_initWithBytesNoCopy_length_freeWhenDone_, &v7, BYTE6(v2), 0);
  v4 = objc_msgSend(v3, sel_base64EncodedStringWithOptions_, v1);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);

  return v5;
}

void NSDataDeallocatorFree_block_invoke(int a1, void *a2)
{
  free(a2);
}

uint64_t destructiveInjectEnumTag for JSONEncoder.DateEncodingStrategy(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

uint64_t IndexPath.init(arrayLiteral:)@<X0>(uint64_t result@<X0>, __n128 *a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v4;
  __n128 v5;
  char v6;
  __n128 v7;
  __n128 v8;

  v4 = *(_QWORD *)(result + 16);
  if (v4 == 2)
  {
    v7 = *(__n128 *)(result + 32);
    result = swift_bridgeObjectRelease();
    v5 = v7;
    v6 = 1;
  }
  else if (v4 == 1)
  {
    a3.n128_u64[0] = *(_QWORD *)(result + 32);
    v8 = a3;
    result = swift_bridgeObjectRelease();
    v5 = v8;
    v6 = 0;
  }
  else if (v4)
  {
    v5 = (__n128)(unint64_t)result;
    v6 = 2;
  }
  else
  {
    result = swift_bridgeObjectRelease();
    v5 = 0uLL;
    v6 = 3;
  }
  *a2 = v5;
  a2[1].n128_u8[0] = v6;
  return result;
}

_QWORD *partial apply for closure #1 in _NSSwiftCalendar.locale.setter()
{
  uint64_t v0;
  __int128 v2;

  v2 = *(_OWORD *)(v0 + 16);
  swift_unknownObjectRetain();
  return Calendar.locale.setter((uint64_t *)&v2);
}

id static Locale._unconditionallyBridgeFromObjectiveC(_:)@<X0>(id result@<X0>, uint64_t *a2@<X8>)
{
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v2 = result;
    type metadata accessor for _NSSwiftLocale();
    v4 = swift_dynamicCastClass();
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + OBJC_IVAR____NSSwiftLocale_locale);
      v6 = *(_QWORD *)(v4 + OBJC_IVAR____NSSwiftLocale_locale + 8);
      result = (id)swift_unknownObjectRetain();
    }
    else
    {
      type metadata accessor for _LocaleBridged();
      v5 = swift_allocObject();
      *(_QWORD *)(v5 + 16) = v2;
      v6 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type _LocaleBridged and conformance _LocaleBridged, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleBridged, (uint64_t)&protocol conformance descriptor for _LocaleBridged);
      result = v2;
    }
    *a2 = v5;
    a2[1] = v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Locale(_QWORD *a1)
{
  return Locale.init(from:)(a1);
}

uint64_t Locale.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Locale.CodingKeys>);
  MEMORY[0x1E0C80A78](v3);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Locale.CodingKeys and conformance Locale.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    lazy protocol witness table accessor for type Locale.Current and conformance Locale.Current();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    __asm { BR              X10 }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t lazy protocol witness table accessor for type Locale.Current and conformance Locale.Current()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Current and conformance Locale.Current;
  if (!lazy protocol witness table cache variable for type Locale.Current and conformance Locale.Current)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Current, &unk_1E0F2FAD8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Current and conformance Locale.Current);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Current and conformance Locale.Current;
  if (!lazy protocol witness table cache variable for type Locale.Current and conformance Locale.Current)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Current, &unk_1E0F2FAD8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Current and conformance Locale.Current);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Current and conformance Locale.Current;
  if (!lazy protocol witness table cache variable for type Locale.Current and conformance Locale.Current)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Current, &unk_1E0F2FAD8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Current and conformance Locale.Current);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Current and conformance Locale.Current;
  if (!lazy protocol witness table cache variable for type Locale.Current and conformance Locale.Current)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Current, &unk_1E0F2FAD8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Current and conformance Locale.Current);
  }
  return result;
}

void protocol witness for Encodable.encode(to:) in conformance Locale(_QWORD *a1)
{
  Locale.encode(to:)(a1);
}

uint64_t static Locale.autoupdatingCurrent.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (one-time initialization token for cache != -1)
    swift_once();
  v2 = static LocaleCache.cache + 16;
  v3 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v2, &v6);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  v4 = v6;
  result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating, (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  *a1 = v4;
  a1[1] = result;
  return result;
}

uint64_t Locale.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 64))(ObjectType, v1);
}

uint64_t @objc static NSLocale._newLocaleWithIdentifier(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v6;

  v3 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  if (one-time initialization token for cache != -1)
    v3 = swift_once();
  v4 = (os_unfair_lock_s *)static LocaleCache.cache;
  MEMORY[0x1E0C80A78](v3);
  swift_retain_n();
  os_unfair_lock_lock(v4 + 31);
  partial apply for closure #1 in LocaleCache.fixedNSLocale(identifier:)(&v6);
  os_unfair_lock_unlock(v4 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  return v6;
}

uint64_t partial apply for closure #1 in LocaleCache.fixedNSLocale(identifier:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in LocaleCache.fixedNSLocale(identifier:)(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t closure #1 in LocaleCache.fixedNSLocale(identifier:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = LocaleCache.State.fixedNSLocale(identifier:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t LocaleCache.State.fixedNSLocale(identifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  char v9;
  id v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  _BOOL8 v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  _QWORD *v42;
  int64_t v43;
  unint64_t v44;
  int64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  objc_class *v51;
  char *v52;
  uint64_t v53;
  id v54;
  id v55;
  char v56;
  uint64_t v57;
  char v58;
  unint64_t v59;
  uint64_t v60;
  _BOOL8 v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  unint64_t v69;
  int64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  _QWORD *v80;
  id v81;
  int64_t v82;
  unint64_t v83;
  int64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  int64_t v88;
  int64_t v89;
  char *__src;
  void *__srca;
  __int128 v92;
  int64_t v93;
  objc_super v94;
  _QWORD v95[18];
  _OWORD v96[9];

  v4 = v2;
  v7 = *(_QWORD *)(v2 + 72);
  if (*(_QWORD *)(v7 + 16))
  {
    swift_bridgeObjectRetain();
    v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if ((v9 & 1) != 0)
    {
      v10 = *(id *)(*(_QWORD *)(v7 + 56) + 8 * v8);
      swift_bridgeObjectRelease();
      return (uint64_t)v10;
    }
    swift_bridgeObjectRelease();
  }
  v12 = *(_QWORD *)(v4 + 32);
  if (*(_QWORD *)(v12 + 16))
  {
    swift_bridgeObjectRetain();
    v13 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if ((v14 & 1) != 0)
    {
      v92 = *(_OWORD *)(*(_QWORD *)(v12 + 56) + 16 * v13);
      swift_unknownObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_56;
    }
    swift_bridgeObjectRelease();
  }
  type metadata accessor for _LocaleICU();
  v15 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type _LocaleICU and conformance _LocaleICU, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleICU, (uint64_t)&protocol conformance descriptor for _LocaleICU);
  _s10Foundation17LocalePreferencesVSgWOi0_(v96);
  outlined init with take of LocalePreferences?((uint64_t)v96, (uint64_t)v95);
  swift_allocObject();
  swift_bridgeObjectRetain();
  v16 = _LocaleICU.init(identifier:prefs:)(a1, a2, (uint64_t)v95);
  swift_bridgeObjectRetain();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v95[0] = *(_QWORD *)(v4 + 32);
  v18 = v95[0];
  *(_QWORD *)(v4 + 32) = 0x8000000000000000;
  v19 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  v21 = *(_QWORD *)(v18 + 16);
  v22 = (v20 & 1) == 0;
  v23 = __OFADD__(v21, v22);
  v24 = v21 + v22;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v3) = v20;
    if (*(_QWORD *)(v18 + 24) < v24)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v24, isUniquelyReferenced_nonNull_native);
      v25 = v95[0];
      v19 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
      if ((v3 & 1) != (v26 & 1))
        goto LABEL_106;
LABEL_15:
      if ((v3 & 1) == 0)
        goto LABEL_53;
      goto LABEL_16;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v25 = v18;
      goto LABEL_15;
    }
  }
  v86 = v19;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, _LocaleProtocol>);
  v28 = static _DictionaryStorage.copy(original:)();
  v25 = v28;
  if (!*(_QWORD *)(v18 + 16))
    goto LABEL_52;
  v29 = (char *)(v28 + 64);
  __src = (char *)(v18 + 64);
  v30 = (unint64_t)((1 << *(_BYTE *)(v25 + 32)) + 63) >> 6;
  if (v25 != v18 || v29 >= &__src[8 * v30])
    memmove(v29, __src, 8 * v30);
  v31 = 0;
  *(_QWORD *)(v25 + 16) = *(_QWORD *)(v18 + 16);
  v32 = 1 << *(_BYTE *)(v18 + 32);
  v33 = -1;
  if (v32 < 64)
    v33 = ~(-1 << v32);
  v34 = v33 & *(_QWORD *)(v18 + 64);
  v88 = (unint64_t)(v32 + 63) >> 6;
  while (1)
  {
    if (v34)
    {
      v35 = __clz(__rbit64(v34));
      v34 &= v34 - 1;
      v36 = v35 | (v31 << 6);
      goto LABEL_26;
    }
    v43 = v31 + 1;
    if (__OFADD__(v31, 1))
      goto LABEL_103;
    if (v43 >= v88)
      goto LABEL_52;
    v44 = *(_QWORD *)&__src[8 * v43];
    ++v31;
    if (!v44)
    {
      v31 = v43 + 1;
      if (v43 + 1 >= v88)
        goto LABEL_52;
      v44 = *(_QWORD *)&__src[8 * v31];
      if (!v44)
      {
        v31 = v43 + 2;
        if (v43 + 2 >= v88)
          goto LABEL_52;
        v44 = *(_QWORD *)&__src[8 * v31];
        if (!v44)
        {
          v31 = v43 + 3;
          if (v43 + 3 >= v88)
            goto LABEL_52;
          v44 = *(_QWORD *)&__src[8 * v31];
          if (!v44)
          {
            v31 = v43 + 4;
            if (v43 + 4 >= v88)
              goto LABEL_52;
            v44 = *(_QWORD *)&__src[8 * v31];
            if (!v44)
            {
              v31 = v43 + 5;
              if (v43 + 5 >= v88)
                goto LABEL_52;
              v44 = *(_QWORD *)&__src[8 * v31];
              if (!v44)
              {
                v31 = v43 + 6;
                if (v43 + 6 >= v88)
                  goto LABEL_52;
                v44 = *(_QWORD *)&__src[8 * v31];
                if (!v44)
                {
                  v31 = v43 + 7;
                  if (v43 + 7 >= v88)
                    goto LABEL_52;
                  v44 = *(_QWORD *)&__src[8 * v31];
                  if (!v44)
                    break;
                }
              }
            }
          }
        }
      }
    }
LABEL_51:
    v34 = (v44 - 1) & v44;
    v36 = __clz(__rbit64(v44)) + (v31 << 6);
LABEL_26:
    v37 = 16 * v36;
    v38 = (uint64_t *)(*(_QWORD *)(v18 + 48) + v37);
    v40 = *v38;
    v39 = v38[1];
    v41 = *(_OWORD *)(*(_QWORD *)(v18 + 56) + v37);
    v42 = (_QWORD *)(*(_QWORD *)(v25 + 48) + v37);
    *v42 = v40;
    v42[1] = v39;
    *(_OWORD *)(*(_QWORD *)(v25 + 56) + v37) = v41;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
  }
  v45 = v43 + 8;
  if (v45 >= v88)
    goto LABEL_52;
  v44 = *(_QWORD *)&__src[8 * v45];
  if (v44)
  {
    v31 = v45;
    goto LABEL_51;
  }
  while (1)
  {
    v31 = v45 + 1;
    if (__OFADD__(v45, 1))
      goto LABEL_105;
    if (v31 >= v88)
      break;
    v44 = *(_QWORD *)&__src[8 * v31];
    ++v45;
    if (v44)
      goto LABEL_51;
  }
LABEL_52:
  swift_bridgeObjectRelease();
  v19 = v86;
  if ((v3 & 1) != 0)
  {
LABEL_16:
    v27 = (uint64_t *)(*(_QWORD *)(v25 + 56) + 16 * v19);
    swift_unknownObjectRelease();
    *v27 = v16;
    v27[1] = v15;
    goto LABEL_55;
  }
LABEL_53:
  *(_QWORD *)(v25 + 8 * (v19 >> 6) + 64) |= 1 << v19;
  v46 = (uint64_t *)(*(_QWORD *)(v25 + 48) + 16 * v19);
  *v46 = a1;
  v46[1] = a2;
  v47 = (uint64_t *)(*(_QWORD *)(v25 + 56) + 16 * v19);
  *v47 = v16;
  v47[1] = v15;
  v48 = *(_QWORD *)(v25 + 16);
  v23 = __OFADD__(v48, 1);
  v49 = v48 + 1;
  if (v23)
  {
    __break(1u);
LABEL_102:
    __break(1u);
LABEL_103:
    __break(1u);
    goto LABEL_104;
  }
  *(_QWORD *)(v25 + 16) = v49;
  swift_bridgeObjectRetain();
LABEL_55:
  v3 = *(_QWORD *)(v4 + 32);
  *(_QWORD *)(v4 + 32) = v25;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v50 = v16;
  *((_QWORD *)&v50 + 1) = v15;
  v92 = v50;
LABEL_56:
  v51 = (objc_class *)type metadata accessor for _NSSwiftLocale();
  v52 = (char *)objc_allocWithZone(v51);
  *(_OWORD *)&v52[OBJC_IVAR____NSSwiftLocale_locale] = v92;
  v53 = String._bridgeToObjectiveCImpl()();
  v94.receiver = v52;
  v94.super_class = v51;
  swift_unknownObjectRetain();
  v54 = objc_msgSendSuper2(&v94, sel_initWithLocaleIdentifier_, v53);
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  v55 = v54;
  v56 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v96[0] = *(_QWORD *)(v4 + 72);
  v57 = *(_QWORD *)&v96[0];
  *(_QWORD *)(v4 + 72) = 0x8000000000000000;
  v59 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  v60 = *(_QWORD *)(v57 + 16);
  v61 = (v58 & 1) == 0;
  v62 = v60 + v61;
  if (__OFADD__(v60, v61))
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v3) = v58;
    if (*(_QWORD *)(v57 + 24) < v62)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v62, v56);
      v63 = *(_QWORD *)&v96[0];
      v64 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
      if ((v3 & 1) != (v65 & 1))
        goto LABEL_106;
      v59 = v64;
      if ((v3 & 1) == 0)
      {
LABEL_98:
        specialized _NativeDictionary._insert(at:key:value:)(v59, a1, a2, v55, v63);
        swift_bridgeObjectRetain();
        goto LABEL_99;
      }
LABEL_63:
      v66 = *(_QWORD *)(v63 + 56);

      *(_QWORD *)(v66 + 8 * v59) = v55;
LABEL_99:
      *(_QWORD *)(v4 + 72) = v63;
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v55;
    }
    if ((v56 & 1) != 0)
    {
      v63 = v57;
      if ((v58 & 1) == 0)
        goto LABEL_98;
      goto LABEL_63;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, _NSSwiftLocale>);
  v67 = static _DictionaryStorage.copy(original:)();
  v63 = v67;
  if (!*(_QWORD *)(v57 + 16))
  {
LABEL_97:
    swift_bridgeObjectRelease();
    if ((v3 & 1) == 0)
      goto LABEL_98;
    goto LABEL_63;
  }
  v68 = (void *)(v67 + 64);
  v69 = (unint64_t)((1 << *(_BYTE *)(v63 + 32)) + 63) >> 6;
  if (v63 != v57 || (unint64_t)v68 >= v57 + 64 + 8 * v69)
    memmove(v68, (const void *)(v57 + 64), 8 * v69);
  v70 = 0;
  *(_QWORD *)(v63 + 16) = *(_QWORD *)(v57 + 16);
  v71 = 1 << *(_BYTE *)(v57 + 32);
  v72 = -1;
  if (v71 < 64)
    v72 = ~(-1 << v71);
  v73 = v72 & *(_QWORD *)(v57 + 64);
  v87 = v57 + 64;
  v89 = (unint64_t)(v71 + 63) >> 6;
  while (2)
  {
    if (v73)
    {
      __srca = (void *)((v73 - 1) & v73);
      v93 = v70;
      v74 = __clz(__rbit64(v73)) | (v70 << 6);
LABEL_73:
      v75 = 16 * v74;
      v76 = (_QWORD *)(*(_QWORD *)(v57 + 48) + 16 * v74);
      v77 = v76[1];
      v78 = 8 * v74;
      v79 = *(void **)(*(_QWORD *)(v57 + 56) + v78);
      v80 = (_QWORD *)(*(_QWORD *)(v63 + 48) + v75);
      *v80 = *v76;
      v80[1] = v77;
      *(_QWORD *)(*(_QWORD *)(v63 + 56) + v78) = v79;
      swift_bridgeObjectRetain();
      v81 = v79;
      v73 = (unint64_t)__srca;
      v70 = v93;
      continue;
    }
    break;
  }
  v82 = v70 + 1;
  if (__OFADD__(v70, 1))
    goto LABEL_102;
  if (v82 >= v89)
    goto LABEL_97;
  v83 = *(_QWORD *)(v87 + 8 * v82);
  v84 = v70 + 1;
  if (v83)
    goto LABEL_96;
  v84 = v70 + 2;
  if (v70 + 2 >= v89)
    goto LABEL_97;
  v83 = *(_QWORD *)(v87 + 8 * v84);
  if (v83)
    goto LABEL_96;
  v84 = v70 + 3;
  if (v70 + 3 >= v89)
    goto LABEL_97;
  v83 = *(_QWORD *)(v87 + 8 * v84);
  if (v83)
    goto LABEL_96;
  v84 = v70 + 4;
  if (v70 + 4 >= v89)
    goto LABEL_97;
  v83 = *(_QWORD *)(v87 + 8 * v84);
  if (v83)
    goto LABEL_96;
  v84 = v70 + 5;
  if (v70 + 5 >= v89)
    goto LABEL_97;
  v83 = *(_QWORD *)(v87 + 8 * v84);
  if (v83)
    goto LABEL_96;
  v84 = v70 + 6;
  if (v70 + 6 >= v89)
    goto LABEL_97;
  v83 = *(_QWORD *)(v87 + 8 * v84);
  if (v83)
    goto LABEL_96;
  v84 = v70 + 7;
  if (v70 + 7 >= v89)
    goto LABEL_97;
  v83 = *(_QWORD *)(v87 + 8 * v84);
  if (v83)
  {
LABEL_96:
    __srca = (void *)((v83 - 1) & v83);
    v93 = v84;
    v74 = __clz(__rbit64(v83)) + (v84 << 6);
    goto LABEL_73;
  }
  v85 = v70 + 8;
  if (v70 + 8 >= v89)
    goto LABEL_97;
  v83 = *(_QWORD *)(v87 + 8 * v85);
  if (v83)
  {
    v84 = v70 + 8;
    goto LABEL_96;
  }
  while (1)
  {
    v84 = v85 + 1;
    if (__OFADD__(v85, 1))
      break;
    if (v84 >= v89)
      goto LABEL_97;
    v83 = *(_QWORD *)(v87 + 8 * v84);
    ++v85;
    if (v83)
      goto LABEL_96;
  }
LABEL_104:
  __break(1u);
LABEL_105:
  __break(1u);
LABEL_106:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for _NSSwiftLocale()
{
  return objc_opt_self();
}

void Locale.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Locale.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Locale.CodingKeys and conformance Locale.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  ObjectType = swift_getObjectType();
  v10 = *(void (**)(uint64_t, uint64_t))(v8 + 64);
  swift_unknownObjectRetain();
  v10(ObjectType, v8);
  swift_unknownObjectRelease();
  LOBYTE(v24) = 0;
  v11 = v26;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v11)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    v21 = v6;
    v26 = v4;
    swift_bridgeObjectRelease();
    v24 = v7;
    v25 = v8;
    if (one-time initialization token for cache != -1)
      swift_once();
    v12 = static LocaleCache.cache + 16;
    v13 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
    swift_retain_n();
    os_unfair_lock_lock(v13);
    closure #1 in LocaleCache.autoupdatingCurrent.getter(v12, &v22);
    os_unfair_lock_unlock(v13);
    swift_release_n();
    v14 = v22;
    v15 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating, (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
    v22 = v14;
    v23 = v15;
    v16 = specialized static Locale.== infix(_:_:)((uint64_t)&v24, (uint64_t)&v22);
    swift_release();
    if ((v16 & 1) != 0)
    {
      LOBYTE(v24) = 2;
    }
    else
    {
      v24 = v7;
      v25 = v8;
      v22 = static LocaleCache.cache;
      v22 = LocaleCache.current.getter();
      v23 = v17;
      v18 = specialized static Locale.== infix(_:_:)((uint64_t)&v24, (uint64_t)&v22);
      swift_unknownObjectRelease();
      LOBYTE(v24) = (v18 & 1) != 0;
    }
    LOBYTE(v22) = 1;
    lazy protocol witness table accessor for type Locale.Current and conformance Locale.Current();
    v19 = v21;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v19, v3);
  }
}

uint64_t closure #1 in _CalendarICU.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, char a10)
{
  uint64_t v11;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v33;
  char v34;
  uint64_t v35[2];
  uint64_t v36[2];
  unsigned __int8 v37;

  v11 = a6;
  v15 = *(_QWORD *)(a1 + 40);
  v16 = *(_QWORD *)(a1 + 48);
  v17 = a2;
  if (a2)
  {
    v18 = a4;
    if (a4)
      goto LABEL_3;
  }
  else
  {
    v31 = *(_QWORD *)(a1 + 48);
    v17 = *(_QWORD *)(a1 + 104);
    v23 = *(_QWORD *)(a1 + 112);
    v25 = a8;
    swift_unknownObjectRetain();
    a3 = v23;
    v16 = v31;
    a8 = v25;
    v11 = a6;
    v18 = a4;
    if (a4)
    {
LABEL_3:
      v19 = a10;
      if ((a7 & 1) == 0)
        goto LABEL_4;
LABEL_8:
      v11 = *(_QWORD *)(a1 + 56);
      v20 = *(_BYTE *)(a1 + 64);
      if ((v19 & 1) != 0)
        goto LABEL_5;
LABEL_9:
      v22 = 0;
      v21 = a8;
      goto LABEL_10;
    }
  }
  v26 = v11;
  v27 = a8;
  v28 = a3;
  swift_unknownObjectRetain();
  a3 = v28;
  a8 = v27;
  v11 = v26;
  v18 = v15;
  a5 = v16;
  v19 = a10;
  if ((a7 & 1) != 0)
    goto LABEL_8;
LABEL_4:
  v20 = 0;
  if ((v19 & 1) == 0)
    goto LABEL_9;
LABEL_5:
  v21 = *(_QWORD *)(a1 + 72);
  v22 = *(_BYTE *)(a1 + 80);
LABEL_10:
  v37 = *(_BYTE *)(a1 + 24);
  v36[0] = v18;
  v36[1] = a5;
  v35[0] = v17;
  v35[1] = a3;
  v33 = 0;
  v34 = 1;
  type metadata accessor for _CalendarICU();
  v29 = swift_allocObject();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  _CalendarICU.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)(&v37, v36, v35, v11, v20, v21, v22, &v33);
  result = lazy protocol witness table accessor for type _CalendarICU and conformance _CalendarICU(&lazy protocol witness table cache variable for type _CalendarICU and conformance _CalendarICU, (uint64_t)&protocol conformance descriptor for _CalendarICU);
  *a9 = v29;
  a9[1] = result;
  return result;
}

uint64_t _CalendarICU.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)(unsigned __int8 *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  os_unfair_lock_s *v21;
  uint64_t v22;
  uint64_t v23;
  os_unfair_lock_s *v24;
  uint64_t v25;
  uint64_t v27;
  int v28;
  int v29;
  __int128 v31;
  unsigned __int8 v32[9];
  uint64_t v33;
  uint64_t v34;

  v9 = v8;
  v11 = *a1;
  v12 = *a2;
  v13 = a2[1];
  v28 = a5 & 1;
  v29 = a7 & 1;
  v15 = *a3;
  v14 = a3[1];
  v16 = *a8;
  v17 = *((_BYTE *)a8 + 8);
  *(_QWORD *)(v9 + 56) = 0;
  *(_BYTE *)(v9 + 64) = 1;
  *(_QWORD *)(v9 + 72) = 0;
  *(_BYTE *)(v9 + 80) = 1;
  *(_BYTE *)(v9 + 24) = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<()>._Buffer);
  v18 = swift_allocObject();
  *(_DWORD *)(v18 + 16) = 0;
  *(_QWORD *)(v9 + 16) = v18;
  *(_QWORD *)(v9 + 104) = v15;
  *(_QWORD *)(v9 + 112) = v14;
  if (v12)
  {
    swift_unknownObjectRetain();
  }
  else
  {
    v27 = a6;
    v19 = one-time initialization token for cache;
    swift_unknownObjectRetain();
    if (v19 != -1)
      swift_once();
    v20 = (uint64_t *)(static TimeZoneCache.cache + 16);
    v21 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
    swift_retain_n();
    os_unfair_lock_lock(v21);
    closure #1 in TimeZoneCache.default.getter(v20, &v33);
    os_unfair_lock_unlock(v21);
    swift_release_n();
    v12 = v33;
    v13 = v34;
    a6 = v27;
  }
  *(_QWORD *)(v9 + 40) = v12;
  *(_QWORD *)(v9 + 48) = v13;
  *(_QWORD *)(v9 + 56) = a4;
  *(_BYTE *)(v9 + 64) = v28 != 0;
  *(_QWORD *)(v9 + 72) = a6;
  *(_BYTE *)(v9 + 80) = v29 != 0;
  *(_QWORD *)(v9 + 88) = v16;
  *(_BYTE *)(v9 + 96) = v17;
  v32[0] = v11;
  v33 = v12;
  v34 = v13;
  if (v15)
  {
    swift_unknownObjectRetain();
  }
  else
  {
    v22 = one-time initialization token for cache;
    swift_unknownObjectRetain();
    if (v22 != -1)
      swift_once();
    v23 = static LocaleCache.cache + 16;
    v24 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
    swift_retain_n();
    os_unfair_lock_lock(v24);
    closure #1 in LocaleCache.fixed(_:)(v23, 0, 0xE000000000000000, &v31);
    os_unfair_lock_unlock(v24);
    swift_release_n();
    v14 = *((_QWORD *)&v31 + 1);
    v15 = v31;
  }
  *(_QWORD *)&v31 = v15;
  *((_QWORD *)&v31 + 1) = v14;
  v25 = specialized static _CalendarICU.icuCalendar(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)(v32, &v33, (uint64_t)&v31, a4, v28, a6, v29);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  *(_QWORD *)(v9 + 32) = v25;
  return v9;
}

uint64_t specialized static Locale.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t ObjectType;
  uint64_t (*v5)(uint64_t, _QWORD *);
  uint64_t v6;
  uint64_t (*v7)(uint64_t, _QWORD *);
  char v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, _QWORD *);
  char v11;
  uint64_t (*v13)(uint64_t, _QWORD *);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, _QWORD *);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v22;
  uint64_t v23;
  void (*v24)(_QWORD *__return_ptr, uint64_t, _QWORD *);
  void (*v25)(_QWORD *__return_ptr, uint64_t, _QWORD *);
  char v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  int v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  void *v43;
  id v44;
  void *v45;
  id v46;
  id v47;
  void *v48;
  id v49;
  void *v50;
  id v51;
  char v52;
  char v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[28];
  uint64_t v74;
  _QWORD *v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned __int8 v89;
  unsigned __int8 v90;
  unsigned __int8 v91;
  unsigned __int8 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  _BYTE v100[28];
  _BYTE v101[144];
  uint64_t v102;
  _QWORD v103[18];
  _QWORD v104[18];
  _BYTE v105[144];
  _BYTE v106[144];
  _BYTE v107[152];

  v2 = *(_QWORD **)(a1 + 8);
  v3 = *(_QWORD **)(a2 + 8);
  ObjectType = swift_getObjectType();
  v5 = (uint64_t (*)(uint64_t, _QWORD *))v2[6];
  if ((v5(ObjectType, v2) & 1) != 0
    || (v6 = swift_getObjectType(),
        v7 = (uint64_t (*)(uint64_t, _QWORD *))v3[6],
        swift_unknownObjectRetain(),
        v8 = v7(v6, v3),
        swift_unknownObjectRelease(),
        (v8 & 1) != 0))
  {
    if ((v5(ObjectType, v2) & 1) != 0)
    {
      v9 = swift_getObjectType();
      v10 = (uint64_t (*)(uint64_t, _QWORD *))v3[6];
      swift_unknownObjectRetain();
      v11 = v10(v9, v3);
      swift_unknownObjectRelease();
      return v11 & 1;
    }
    return 0;
  }
  v13 = (uint64_t (*)(uint64_t, _QWORD *))v2[8];
  swift_unknownObjectRetain();
  v14 = v13(ObjectType, v2);
  v16 = v15;
  swift_unknownObjectRelease();
  v17 = (uint64_t (*)(uint64_t, _QWORD *))v3[8];
  swift_unknownObjectRetain();
  v18 = v17(v6, v3);
  v20 = v19;
  swift_unknownObjectRelease();
  if (v14 == v18 && v16 == v20)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v23 = 0;
    if ((v22 & 1) == 0)
      return v23;
  }
  v24 = (void (*)(_QWORD *__return_ptr, uint64_t, _QWORD *))v2[58];
  swift_unknownObjectRetain();
  v24(v104, ObjectType, v2);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v104, (uint64_t)v105);
  v25 = (void (*)(_QWORD *__return_ptr, uint64_t, _QWORD *))v3[58];
  swift_unknownObjectRetain();
  v25(v103, v6, v3);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v103, (uint64_t)v106);
  outlined init with take of LocalePreferences?((uint64_t)v105, (uint64_t)v107);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v107) != 1)
  {
    outlined init with take of LocalePreferences?((uint64_t)v105, (uint64_t)&v93);
    outlined init with take of LocalePreferences?((uint64_t)v106, (uint64_t)v101);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v101) == 1)
    {
      v72 = v99;
      *(_OWORD *)v73 = *(_OWORD *)v100;
      *(_OWORD *)&v73[12] = *(_OWORD *)&v100[12];
      v68 = v95;
      v69 = v96;
      v70 = v97;
      v71 = v98;
      v66 = v93;
      v67 = v94;
      outlined init with take of LocalePreferences?((uint64_t)v105, (uint64_t)&v74);
      outlined retain of LocalePreferences(&v74);
      outlined release of LocalePreferences(&v66);
      goto LABEL_17;
    }
    outlined init with take of LocalePreferences?((uint64_t)v106, (uint64_t)&v74);
    v26 = v93;
    v27 = *((_QWORD *)&v93 + 1);
    v28 = v94;
    v29 = v95;
    v30 = v96;
    v64 = (void *)*((_QWORD *)&v97 + 1);
    v65 = (void *)v97;
    v62 = (void *)*((_QWORD *)&v98 + 1);
    v63 = (void *)v98;
    v60 = *((_QWORD *)&v99 + 1);
    v61 = (void *)v99;
    v58 = *(_QWORD *)&v100[8];
    v59 = *(_QWORD *)v100;
    v31 = *(_QWORD *)&v100[16];
    v56 = v100[25];
    v57 = v100[24];
    v54 = v100[27];
    v55 = v100[26];
    if (v93 == 2)
    {
      if (v74 != 2)
        goto LABEL_57;
    }
    else if (v74 == 2 || ((((v93 & 1) == 0) ^ v74) & 1) == 0)
    {
      goto LABEL_57;
    }
    if (*((_QWORD *)&v93 + 1))
    {
      if (!v75 || (specialized static Array<A>.== infix(_:_:)(*((_QWORD **)&v93 + 1), v75) & 1) == 0)
        goto LABEL_57;
    }
    else if (v75)
    {
      goto LABEL_57;
    }
    if (*((_QWORD *)&v28 + 1))
    {
      if (!*((_QWORD *)&v76 + 1) || v28 != v76 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        goto LABEL_57;
    }
    else if (*((_QWORD *)&v76 + 1))
    {
      goto LABEL_57;
    }
    if (*((_QWORD *)&v29 + 1))
    {
      if (!*((_QWORD *)&v77 + 1) || v29 != v77 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        goto LABEL_57;
    }
    else if (*((_QWORD *)&v77 + 1))
    {
      goto LABEL_57;
    }
    if ((_QWORD)v30)
    {
      if (!v78 || (specialized static Dictionary<>.== infix(_:_:)(v30, v78) & 1) == 0)
        goto LABEL_57;
    }
    else if (v78)
    {
      goto LABEL_57;
    }
    if (*((_QWORD *)&v30 + 1))
    {
      if (!v79 || (specialized static Dictionary<>.== infix(_:_:)(*((uint64_t *)&v30 + 1), v79) & 1) == 0)
        goto LABEL_57;
    }
    else if (v79)
    {
      goto LABEL_57;
    }
    v23 = v80;
    v48 = v82;
    v50 = v81;
    v43 = v84;
    v45 = v83;
    if (v65)
    {
      if (!v80)
      {
        outlined retain of LocalePreferences?((uint64_t)v105, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
        goto LABEL_62;
      }
      type metadata accessor for CFDictionaryRef(0);
      outlined retain of LocalePreferences?((uint64_t)v105, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v39 = (id)v23;
      v38 = v65;
      v32 = static _CFObject.== infix(_:_:)();

      if ((v32 & 1) == 0)
      {
LABEL_58:
        outlined retain of LocalePreferences?((uint64_t)v106, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
LABEL_59:
        v23 = 0;
LABEL_60:
        LOBYTE(v66) = v26;
        *((_QWORD *)&v66 + 1) = v27;
        v67 = v28;
        v68 = v29;
        v69 = v30;
        *(_QWORD *)&v70 = v65;
        *((_QWORD *)&v70 + 1) = v64;
        *(_QWORD *)&v71 = v63;
        *((_QWORD *)&v71 + 1) = v62;
        *(_QWORD *)&v72 = v61;
        *((_QWORD *)&v72 + 1) = v60;
        *(_QWORD *)v73 = v59;
        *(_QWORD *)&v73[8] = v58;
        *(_QWORD *)&v73[16] = v31;
        v73[24] = v57;
        v73[25] = v56;
        v73[26] = v55;
        v73[27] = v54;
        outlined release of LocalePreferences(&v66);
        outlined retain of LocalePreferences?((uint64_t)v105, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
        return v23;
      }
LABEL_64:
      if (v64)
      {
        if (!v50)
          goto LABEL_58;
        type metadata accessor for CFDictionaryRef(0);
        lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
        v51 = v50;
        v40 = v64;
        v33 = static _CFObject.== infix(_:_:)();

        if ((v33 & 1) == 0)
          goto LABEL_58;
      }
      else if (v50)
      {
        goto LABEL_58;
      }
      if (v63)
      {
        if (!v48)
          goto LABEL_58;
        type metadata accessor for CFDictionaryRef(0);
        lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
        v49 = v48;
        v41 = v63;
        v34 = static _CFObject.== infix(_:_:)();

        if ((v34 & 1) == 0)
          goto LABEL_58;
      }
      else if (v48)
      {
        goto LABEL_58;
      }
      if (v62)
      {
        if (!v45)
          goto LABEL_58;
        type metadata accessor for CFDictionaryRef(0);
        lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
        v46 = v45;
        v42 = v62;
        v35 = static _CFObject.== infix(_:_:)();

        if ((v35 & 1) == 0)
          goto LABEL_58;
      }
      else if (v45)
      {
        goto LABEL_58;
      }
      if (v61)
      {
        if (!v43)
          goto LABEL_58;
        type metadata accessor for CFDictionaryRef(0);
        lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
        v47 = v43;
        v44 = v61;
        v36 = static _CFObject.== infix(_:_:)();

        if ((v36 & 1) == 0)
          goto LABEL_58;
      }
      else if (v43)
      {
        goto LABEL_58;
      }
      v23 = v85;
      if (v60)
      {
        if (!v85)
          goto LABEL_62;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v52 = specialized static Dictionary<>.== infix(_:_:)(v60, v23);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v52 & 1) == 0)
          goto LABEL_58;
      }
      else if (v85)
      {
        goto LABEL_58;
      }
      v23 = v86;
      if (!v59)
      {
        if (v86)
          goto LABEL_58;
        goto LABEL_94;
      }
      if (v86)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v53 = specialized static Dictionary<>.== infix(_:_:)(v59, v23);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v53 & 1) == 0)
          goto LABEL_58;
LABEL_94:
        if (v31)
        {
          if (!v88 || (v58 != v87 || v31 != v88) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            goto LABEL_58;
        }
        else if (v88)
        {
          goto LABEL_58;
        }
        if (v57 == 2)
        {
          if (v89 != 2)
            goto LABEL_58;
        }
        else if (v89 == 2 || ((v89 ^ v57) & 1) != 0)
        {
          goto LABEL_58;
        }
        v37 = v90;
        if (v56 == 2)
        {
          outlined retain of LocalePreferences?((uint64_t)v106, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
          if (v37 != 2)
            goto LABEL_59;
        }
        else
        {
          outlined retain of LocalePreferences?((uint64_t)v106, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
          if (v37 == 2 || ((v37 ^ v56) & 1) != 0)
            goto LABEL_59;
        }
        if (v55 == 2)
        {
          if (v91 != 2)
            goto LABEL_59;
        }
        else
        {
          v23 = 0;
          if (v91 == 2 || ((((v55 & 1) == 0) ^ v91) & 1) == 0)
            goto LABEL_60;
        }
        if (v54 == 2)
        {
          if (v92 != 2)
            goto LABEL_59;
        }
        else if (v92 == 2 || ((((v54 & 1) == 0) ^ v92) & 1) == 0)
        {
          goto LABEL_59;
        }
        v23 = 1;
        goto LABEL_60;
      }
LABEL_62:
      outlined retain of LocalePreferences?((uint64_t)v106, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
      goto LABEL_60;
    }
    if (!v80)
    {
      outlined init with take of LocalePreferences?((uint64_t)v105, (uint64_t)&v66);
      outlined retain of LocalePreferences(&v66);
      goto LABEL_64;
    }
LABEL_57:
    outlined retain of LocalePreferences?((uint64_t)v105, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
    goto LABEL_58;
  }
  outlined init with take of LocalePreferences?((uint64_t)v106, (uint64_t)v101);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v101) != 1)
  {
LABEL_17:
    outlined init with take of LocalePreferences?((uint64_t)v105, (uint64_t)v101);
    outlined init with take of LocalePreferences?((uint64_t)v106, (uint64_t)&v102);
    outlined release of (LocalePreferences?, LocalePreferences?)((uint64_t)v101);
    return 0;
  }
  return 1;
}

uint64_t LocalePreferences.locale.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for _LocaleProtocol.prefs.getter in conformance _LocaleICU@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _BYTE v4[144];

  outlined init with take of LocalePreferences?(v1 + 40, (uint64_t)v4);
  outlined init with take of LocalePreferences?((uint64_t)v4, a1);
  return outlined retain of LocalePreferences?((uint64_t)v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
}

uint64_t protocol witness for _LocaleProtocol.init(identifier:prefs:) in conformance _LocaleICU(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  _LocaleICU.init(identifier:prefs:)(a1, a2, a3);
  return v6;
}

uint64_t _LocaleICU.init(identifier:prefs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  const __CFAllocator *v4;
  const __CFString *v5;
  __CFString *CanonicalLocaleIdentifierFromString;
  id v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[7];
  int v15;
  __int16 v16;
  int v17;
  __int16 v18;
  _BYTE v19[7];
  _BYTE v20[7];
  _BYTE v21[144];

  outlined init with take of LocalePreferences?(a3, (uint64_t)v21);
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE30];
  v5 = (const __CFString *)String._bridgeToObjectiveCImpl()();
  CanonicalLocaleIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLocaleIdentifierFromString(v4, v5);
  swift_unknownObjectRelease();
  if (CanonicalLocaleIdentifierFromString)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLocaleIdentifierFromString);
    v9 = v8;
    swift_bridgeObjectRelease();

  }
  else
  {
    swift_bridgeObjectRelease();
    v7 = 0;
    v9 = 0xE000000000000000;
  }
  *(_QWORD *)(v3 + 16) = v7;
  *(_QWORD *)(v3 + 24) = v9;
  swift_bridgeObjectRetain();
  v10 = specialized static Locale.identifierDoesNotRequireSpecialCaseHandling(_:)();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v3 + 32) = v10 & 1;
  outlined init with take of LocalePreferences?((uint64_t)v21, v3 + 40);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<_LocaleICU.State>._Buffer);
  v11 = swift_allocObject();
  *(_DWORD *)(v11 + 560) = 0;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_BYTE *)(v11 + 112) = 16;
  *(_DWORD *)(v11 + 113) = *(_DWORD *)v20;
  *(_DWORD *)(v11 + 116) = *(_DWORD *)&v20[3];
  *(_OWORD *)(v11 + 120) = 0u;
  *(_OWORD *)(v11 + 136) = 0u;
  *(_QWORD *)(v11 + 152) = 0;
  *(_QWORD *)(v11 + 160) = 1;
  *(_QWORD *)(v11 + 216) = 0;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 184) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_BYTE *)(v11 + 224) = 7;
  *(_DWORD *)(v11 + 225) = *(_DWORD *)v19;
  *(_DWORD *)(v11 + 228) = *(_DWORD *)&v19[3];
  *(_OWORD *)(v11 + 232) = 0u;
  *(_OWORD *)(v11 + 248) = 0u;
  *(_BYTE *)(v11 + 280) = 0;
  *(_BYTE *)(v11 + 281) = 1;
  *(_WORD *)(v11 + 286) = v18;
  *(_QWORD *)(v11 + 288) = 0;
  *(_BYTE *)(v11 + 296) = 1;
  *(_BYTE *)(v11 + 297) = 4;
  *(_WORD *)(v11 + 302) = v16;
  *(_OWORD *)(v11 + 304) = 0u;
  *(_OWORD *)(v11 + 320) = 0u;
  *(_BYTE *)(v11 + 336) = 2;
  *(_DWORD *)(v11 + 340) = *(_DWORD *)&v14[3];
  *(_QWORD *)(v11 + 344) = 0;
  *(_QWORD *)(v11 + 352) = 1;
  *(_QWORD *)(v11 + 360) = 0;
  *(_QWORD *)(v11 + 368) = 0;
  *(_QWORD *)(v11 + 376) = 0;
  *(_QWORD *)(v11 + 384) = 1;
  *(_QWORD *)(v11 + 392) = 0;
  *(_QWORD *)(v11 + 400) = 0;
  v12 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v11 + 472) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v11 + 480) = v12;
  *(_QWORD *)(v11 + 488) = v12;
  *(_QWORD *)(v11 + 496) = v12;
  *(_QWORD *)(v11 + 504) = v12;
  *(_QWORD *)(v11 + 512) = v12;
  *(_QWORD *)(v11 + 520) = v12;
  *(_QWORD *)(v11 + 528) = v12;
  *(_QWORD *)(v11 + 536) = v12;
  *(_QWORD *)(v11 + 544) = v12;
  *(_QWORD *)(v11 + 552) = v12;
  *(_QWORD *)(v11 + 424) = 0;
  *(_QWORD *)(v11 + 432) = 1;
  *(_QWORD *)(v11 + 408) = 1;
  *(_QWORD *)(v11 + 416) = 0;
  *(_QWORD *)(v3 + 184) = v11;
  *(_OWORD *)(v11 + 16) = xmmword_18205FD60;
  *(_OWORD *)(v11 + 264) = 0u;
  *(_DWORD *)(v11 + 282) = v17;
  *(_DWORD *)(v11 + 298) = v15;
  *(_DWORD *)(v11 + 337) = *(_DWORD *)v14;
  *(_OWORD *)(v11 + 440) = 0u;
  *(_OWORD *)(v11 + 456) = 0u;
  return v3;
}

uint64_t outlined init with take of LocalePreferences?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalePreferences?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t specialized static Locale.identifierDoesNotRequireSpecialCaseHandling(_:)()
{
  char v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  if (String.count.getter() >= 2)
  {
    swift_bridgeObjectRetain();
    v1 = specialized Collection.prefix(_:)(2);
    v3 = v2;
    v5 = v4;
    v7 = v6;
    swift_bridgeObjectRelease();
    if ((specialized static StringProtocol.== infix<A>(_:_:)(31329, 0xE200000000000000, v1, v3, v5, v7) & 1) != 0
      || (specialized static StringProtocol.== infix<A>(_:_:)(29804, 0xE200000000000000, v1, v3, v5, v7) & 1) != 0
      || (specialized static StringProtocol.== infix<A>(_:_:)(29300, 0xE200000000000000, v1, v3, v5, v7) & 1) != 0
      || (specialized static StringProtocol.== infix<A>(_:_:)(27758, 0xE200000000000000, v1, v3, v5, v7) & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v0 = 0;
    }
    else
    {
      v9 = specialized static StringProtocol.== infix<A>(_:_:)(27749, 0xE200000000000000, v1, v3, v5, v7);
      swift_bridgeObjectRelease();
      v0 = v9 ^ 1;
    }
  }
  else
  {
    v0 = 1;
  }
  return v0 & 1;
}

uint64_t specialized static StringProtocol.== infix<A>(_:_:)(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;

  if ((a2 & 0x2000000000000000) != 0)
    v7 = HIBYTE(a2) & 0xF;
  else
    v7 = a1 & 0xFFFFFFFFFFFFLL;
  if (a1 == a5 && a2 == a6 && !(a3 >> 16) && v7 == a4 >> 16)
    return 1;
  else
    return _stringCompareInternal(_:_:_:_:expecting:)() & 1;
}

uint64_t specialized Collection.prefix(_:)(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    String.index(_:offsetBy:limitedBy:)();
    return String.subscript.getter();
  }
  return result;
}

void Locale.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t ObjectType;
  Swift::UInt8 v5;
  void (*v6)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  Swift::UInt v34;
  Swift::UInt v35;
  Swift::UInt8 v36;
  Swift::UInt8 v37;
  Swift::UInt8 v38;
  _BYTE v39[144];
  _BYTE v40[8];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  char v56;
  char v57;
  _QWORD v58[18];
  _BYTE v59[144];
  _BYTE v60[144];

  v3 = *(_QWORD *)(v1 + 8);
  ObjectType = swift_getObjectType();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v3 + 48))(ObjectType, v3) & 1) != 0)
  {
    v5 = 1;
LABEL_5:
    Hasher._combine(_:)(v5);
    return;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v3 + 64))(ObjectType, v3);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v6 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v3 + 464);
  swift_unknownObjectRetain();
  v6(v58, ObjectType, v3);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v58, (uint64_t)v59);
  outlined init with take of LocalePreferences?((uint64_t)v59, (uint64_t)v60);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v60) == 1)
  {
    v5 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v59, (uint64_t)v40);
  Hasher._combine(_:)(1u);
  if (v40[0] == 2)
  {
    v7 = 0;
  }
  else
  {
    v7 = v40[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v7);
  v8 = v41;
  if (!v41)
  {
    Hasher._combine(_:)(0);
    v13 = v40;
    goto LABEL_20;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v8 + 16));
  v9 = *(_QWORD *)(v8 + 16);
  if (!v9)
  {
    outlined init with take of LocalePreferences?((uint64_t)v59, (uint64_t)v39);
    v13 = v39;
LABEL_20:
    outlined retain of LocalePreferences(v13);
    if (!v42)
      goto LABEL_14;
    goto LABEL_21;
  }
  outlined retain of LocalePreferences?((uint64_t)v59, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v10 = v8 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v10 += 16;
    --v9;
  }
  while (v9);
  swift_bridgeObjectRelease();
  if (!v42)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v43)
      goto LABEL_15;
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v43)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    v11 = v44;
    if (!v44)
      goto LABEL_16;
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v11);
    swift_bridgeObjectRelease();
    v12 = v45;
    if (!v45)
      goto LABEL_17;
    goto LABEL_24;
  }
LABEL_22:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v11 = v44;
  if (v44)
    goto LABEL_23;
LABEL_16:
  Hasher._combine(_:)(0);
  v12 = v45;
  if (!v45)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v12);
  swift_bridgeObjectRelease();
LABEL_25:
  v15 = v46;
  v14 = v47;
  v17 = v48;
  v16 = v49;
  v18 = v50;
  if (v46)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v19 = v14;
    v20 = v17;
    v21 = v16;
    v22 = v18;
    v23 = v15;
    _CFObject.hash(into:)();
    if (v14)
      goto LABEL_27;
  }
  else
  {
    Hasher._combine(_:)(0);
    v28 = v18;
    v29 = v14;
    v30 = v17;
    v31 = v16;
    if (v14)
    {
LABEL_27:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v24 = v14;
      _CFObject.hash(into:)();

      if (v17)
        goto LABEL_28;
      goto LABEL_33;
    }
  }
  Hasher._combine(_:)(0);
  if (v17)
  {
LABEL_28:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v25 = v17;
    _CFObject.hash(into:)();

    if (v16)
      goto LABEL_29;
LABEL_34:
    Hasher._combine(_:)(0);
    if (v18)
      goto LABEL_30;
    goto LABEL_35;
  }
LABEL_33:
  Hasher._combine(_:)(0);
  if (!v16)
    goto LABEL_34;
LABEL_29:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v26 = v16;
  _CFObject.hash(into:)();

  if (v18)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v27 = v18;
    _CFObject.hash(into:)();

    goto LABEL_36;
  }
LABEL_35:
  Hasher._combine(_:)(0);
  v27 = 0;
LABEL_36:

  v32 = v51;
  if (v32)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v32);
    swift_bridgeObjectRelease();
    v33 = v52;
    if (v52)
      goto LABEL_38;
LABEL_41:
    Hasher._combine(_:)(0);
    if (v53)
      goto LABEL_39;
LABEL_42:
    Hasher._combine(_:)(0);
    goto LABEL_43;
  }
  Hasher._combine(_:)(0);
  v33 = v52;
  if (!v52)
    goto LABEL_41;
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v33);
  swift_bridgeObjectRelease();
  if (!v53)
    goto LABEL_42;
LABEL_39:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_43:
  if (v54 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v34 = v54 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v34);
  }
  if (v55 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v35 = v55 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v35);
  }
  if (v56 == 2)
  {
    v36 = 0;
  }
  else
  {
    v36 = v56 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v36);
  if (v57 == 2)
  {
    v37 = 0;
  }
  else
  {
    v38 = v57 & 1;
    Hasher._combine(_:)(1u);
    v37 = v38;
  }
  Hasher._combine(_:)(v37);
  outlined retain of LocalePreferences?((uint64_t)v59, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v59, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
}

uint64_t type metadata accessor for _CalendarICU()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type Locale.CodingKeys and conformance Locale.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.CodingKeys and conformance Locale.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.CodingKeys and conformance Locale.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.CodingKeys, &unk_1E0F2F110);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.CodingKeys and conformance Locale.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.CodingKeys and conformance Locale.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.CodingKeys and conformance Locale.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.CodingKeys, &unk_1E0F2F110);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.CodingKeys and conformance Locale.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.CodingKeys and conformance Locale.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.CodingKeys and conformance Locale.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.CodingKeys, &unk_1E0F2F110);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.CodingKeys and conformance Locale.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.CodingKeys and conformance Locale.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.CodingKeys and conformance Locale.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.CodingKeys, &unk_1E0F2F110);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.CodingKeys and conformance Locale.CodingKeys);
  }
  return result;
}

uint64_t closure #1 in LocaleCache.autoupdatingCurrent.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 88);
  if (v4)
  {
    v5 = v4;
  }
  else
  {
    type metadata accessor for _LocaleAutoupdating();
    v5 = swift_allocObject();
    *(_QWORD *)(a1 + 88) = v5;
    swift_retain();
  }
  *a2 = v5;
  return swift_retain();
}

uint64_t specialized static Array<A>.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  BOOL v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *i;
  BOOL v11;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (v6 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v6 & 1) != 0))
  {
    v8 = v2 - 1;
    if (!v8)
      return 1;
    v9 = a2 + 7;
    for (i = a1 + 7; ; i += 2)
    {
      v11 = *(i - 1) == *(v9 - 1) && *i == *v9;
      if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        break;
      v9 += 2;
      if (!--v8)
        return 1;
    }
    return 0;
  }
  return result;
}

uint64_t closure #1 in TimeZoneCache.default.getter@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  TimeZoneCache.State.check()();
  v4 = a1[3];
  if (v4)
  {
    v5 = a1[4];
    *a2 = v4;
    a2[1] = v5;
    return swift_unknownObjectRetain();
  }
  result = *a1;
  if (*a1)
  {
    v7 = a1[1];
    *a2 = result;
    a2[1] = v7;
    swift_unknownObjectRetain();
    return swift_unknownObjectRetain();
  }
  __break(1u);
  return result;
}

uint64_t getEnumTagSinglePayload for NSNotificationCenter.Notifications.State(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t destroy for NSNotificationCenter.Publisher(id *a1)
{

  return swift_unknownObjectRelease();
}

uint64_t static CharacterSet.urlPathAllowed.getter@<X0>(uint64_t *a1@<X8>)
{
  return static CharacterSet.urlUserAllowed.getter(MEMORY[0x1E0C9A5E8], a1);
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance UInt(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Int64(a1, a2, a3, a4, (SEL *)&selRef_unsignedIntegerValue, (SEL *)&selRef_initWithUnsignedInteger_);
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Double()
{
  double *v0;

  return objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithDouble_, *v0);
}

uint64_t @objc static NSLocale._characterDirection(forLanguage:)(uint64_t a1, uint64_t a2, void *a3)
{
  return @objc static NSLocale._characterDirection(forLanguage:)(a1, a2, a3, Locale.Language.characterDirection.getter);
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance Date(double *a1, double *a2)
{
  return *a2 >= *a1;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IndexPath()
{
  Hasher.init(_seed:)();
  IndexPath.hash(into:)();
  return Hasher._finalize()();
}

uint64_t DateComponents.hour.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 112);
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance CFErrorRef()
{
  return swift_unknownObjectRetain();
}

uint64_t AttributeContainer.subscript.setter(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  specialized AttributeContainer.subscript.setter(a1, *(_QWORD *)(*MEMORY[0x1E0DEE2A8] + *a2 + 8), a3);
  swift_release();
  swift_getAssociatedTypeWitness();
  v4 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
}

uint64_t AttributedString._AttributeStorage.subscript.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  _BYTE v13[40];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  if (*(_QWORD *)(a1 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7), (v9 & 1) != 0))
  {
    outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(a1 + 56) + 72 * v8, (uint64_t)&v14);
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&v15 + 1))
    {
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v14, (uint64_t)v13);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      swift_dynamicCast();
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v14);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a4, 0, 1, AssociatedTypeWitness);
    }
  }
  else
  {
    v18 = 0;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    swift_bridgeObjectRelease();
  }
  outlined destroy of Any?((uint64_t)&v14, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
  v12 = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a4, 1, 1, v12);
}

void AttributeContainer.subscript.modify(uint64_t **a1)
{
  uint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _OWORD v5[4];
  uint64_t v6;

  v1 = *a1;
  v2 = (*a1)[3];
  if (v2)
  {
    v3 = v1[2];
    v6 = 0;
    memset(v5, 0, sizeof(v5));
    swift_bridgeObjectRetain();
    specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)v5, v3, v2);
  }
  else
  {
    v4 = *v1;
    LOBYTE(v5[0]) = 0;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized AttributedString._AttributeStorage.mergeIn(_:mergePolicy:)(v4, (char *)v5);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  free(v1);
}

uint64_t specialized AttributeContainer.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  _BYTE *v13;
  void (*v14)(_BYTE *, uint64_t, uint64_t, __n128);
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void (*v18)(_BYTE *, uint64_t);
  _BYTE v21[72];

  swift_getAssociatedTypeWitness();
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = &v21[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = &v21[-v12 - 8];
  v14 = *(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v7 + 16);
  v14(&v21[-v12 - 8], a1, v6, v11);
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v14)(v9, v13, v6);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  v17 = v16;
  static AttributedString._AttributeValue.wrapIfPresent<A>(_:for:)((uint64_t)v9, a2, a3, (uint64_t)v21);
  specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)v21, v15, v17);
  swift_bridgeObjectRelease();
  v18 = *(void (**)(_BYTE *, uint64_t))(v7 + 8);
  v18(v9, v6);
  return ((uint64_t (*)(_BYTE *, uint64_t))v18)(v13, v6);
}

uint64_t ScopedAttributeContainer.subscript.setter(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  _QWORD *v26;
  _BYTE v27[72];

  v5 = v4;
  v26 = a2;
  v8 = *(_QWORD *)(*MEMORY[0x1E0DEE2A8] + *a2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = type metadata accessor for Optional();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v24 - v13;
  (*(void (**)(char *, char *, uint64_t, __n128))(v11 + 16))((char *)&v24 - v13, a1, v10, v12);
  v24 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 24);
  v15 = v24(v8, a4);
  v17 = v16;
  static AttributedString._AttributeValue.wrapIfPresent<A>(_:for:)((uint64_t)v14, v8, a4, (uint64_t)v27);
  v25 = v5;
  specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)v27, v15, v17);
  swift_bridgeObjectRelease();
  v18 = *(void (**)(char *, uint64_t))(v11 + 8);
  v18(v14, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 48))(a1, 1, AssociatedTypeWitness) == 1)
  {
    v19 = v24(v8, a4);
    v21 = v20;
    swift_release();
    v18(a1, v10);
    v22 = v25;
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(v22 + 16) = v19;
    *(_QWORD *)(v22 + 24) = v21;
  }
  else
  {
    swift_release();
    return ((uint64_t (*)(char *, uint64_t))v18)(a1, v10);
  }
  return result;
}

uint64_t static AttributedString._AttributeValue.wrapIfPresent<A>(_:for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  uint64_t result;
  void (*v21)(char *, char *, uint64_t);
  uint64_t *boxed_opaque_existential_1;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[32];

  v28 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v27 - v10;
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v27 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))(v11, v28, v8, v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, AssociatedTypeWitness) == 1)
  {
    result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    *(_QWORD *)(a4 + 64) = 0;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v19, v11, AssociatedTypeWitness);
    v21 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
    v21(v15, v19, AssociatedTypeWitness);
    *((_QWORD *)&v31 + 1) = AssociatedTypeWitness;
    *(_QWORD *)v32 = swift_getAssociatedConformanceWitness();
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v30);
    v21((char *)boxed_opaque_existential_1, v15, AssociatedTypeWitness);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(a3 + 32))(&v29, a2, a3);
    *(_OWORD *)&v32[8] = v29;
    v32[24] = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3) & 1;
    v23 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 48))(a2, a3);
    v24 = *(void (**)(char *, uint64_t))(v12 + 8);
    v24(v15, AssociatedTypeWitness);
    *(_QWORD *)(a4 + 64) = v23;
    v25 = *(_OWORD *)&v32[16];
    *(_OWORD *)(a4 + 32) = *(_OWORD *)v32;
    *(_OWORD *)(a4 + 48) = v25;
    v26 = v31;
    *(_OWORD *)a4 = v30;
    *(_OWORD *)(a4 + 16) = v26;
    return ((uint64_t (*)(char *, uint64_t))v24)(v19, AssociatedTypeWitness);
  }
  return result;
}

uint64_t specialized AttributedString._AttributeStorage.mergeIn(_:mergePolicy:)(uint64_t a1, char *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  int64_t v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  char v21;
  char v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  _BYTE v26[72];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v3 = *a2;
  v23 = a1 + 64;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v24 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  v9 = (uint64_t *)&demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue)?;
  while (1)
  {
    if (v6)
    {
      v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v11 = v10 | (v8 << 6);
LABEL_7:
      v12 = *(_QWORD *)(a1 + 56);
      v13 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v11);
      v14 = v13[1];
      *(_QWORD *)&v27 = *v13;
      *((_QWORD *)&v27 + 1) = v14;
      outlined init with copy of AttributedString._AttributeValue(v12 + 72 * v11, (uint64_t)&v28);
      swift_bridgeObjectRetain();
      goto LABEL_26;
    }
    v15 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v15 < v24)
    {
      v16 = *(_QWORD *)(v23 + 8 * v15);
      if (v16)
        goto LABEL_11;
      v17 = v8 + 2;
      ++v8;
      if (v15 + 1 < v24)
      {
        v16 = *(_QWORD *)(v23 + 8 * v17);
        if (v16)
          goto LABEL_14;
        v8 = v15 + 1;
        if (v15 + 2 < v24)
        {
          v16 = *(_QWORD *)(v23 + 8 * (v15 + 2));
          if (v16)
          {
            v15 += 2;
            goto LABEL_11;
          }
          v17 = v15 + 3;
          v8 = v15 + 2;
          if (v15 + 3 < v24)
            break;
        }
      }
    }
LABEL_25:
    v6 = 0;
    v32 = 0;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v27 = 0u;
LABEL_26:
    outlined init with take of LocalePreferences?((uint64_t)&v27, (uint64_t)&v33, v9);
    v18 = v34;
    if (!v34)
      return swift_release();
    v19 = v33;
    v29 = v37;
    v30 = v38;
    *(_QWORD *)&v31 = v39;
    v27 = v35;
    v28 = v36;
    if ((v3 & 1) != 0)
    {
      v20 = v9;
      if (*(_QWORD *)(*(_QWORD *)v25 + 16)
        && (swift_bridgeObjectRetain(),
            specialized __RawDictionaryStorage.find<A>(_:)(v19, v18),
            v22 = v21,
            swift_bridgeObjectRelease(),
            (v22 & 1) != 0))
      {
        outlined destroy of AttributedString._AttributeValue((uint64_t)&v27);
        result = swift_bridgeObjectRelease();
        v9 = v20;
      }
      else
      {
        outlined init with copy of AttributedString._AttributeValue((uint64_t)&v27, (uint64_t)v26);
        specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)v26, v19, v18);
        swift_bridgeObjectRelease();
        result = outlined destroy of AttributedString._AttributeValue((uint64_t)&v27);
        v9 = v20;
      }
    }
    else
    {
      outlined init with copy of AttributedString._AttributeValue((uint64_t)&v27, (uint64_t)v26);
      specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)v26, v19, v18);
      swift_bridgeObjectRelease();
      result = outlined destroy of AttributedString._AttributeValue((uint64_t)&v27);
    }
  }
  v16 = *(_QWORD *)(v23 + 8 * v17);
  if (v16)
  {
LABEL_14:
    v15 = v17;
LABEL_11:
    v6 = (v16 - 1) & v16;
    v11 = __clz(__rbit64(v16)) + (v15 << 6);
    v8 = v15;
    goto LABEL_7;
  }
  while (1)
  {
    v15 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v15 >= v24)
    {
      v8 = v24 - 1;
      goto LABEL_25;
    }
    v16 = *(_QWORD *)(v23 + 8 * v15);
    ++v17;
    if (v16)
      goto LABEL_11;
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t outlined init with copy of AttributedString._AttributeValue(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AttributedString._AttributeValue(a2, a1);
  return a2;
}

uint64_t initializeWithCopy for AttributedString._AttributeValue(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _OWORD *v5;
  uint64_t v6;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = (_OWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  if (v6 == 1)
  {
    *(_OWORD *)(a1 + 40) = *v5;
  }
  else
  {
    *(_QWORD *)(a1 + 40) = *(_QWORD *)v5;
    *(_QWORD *)(a1 + 48) = v6;
    swift_bridgeObjectRetain();
  }
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t specialized AttributedString._AttributeStorage.subscript.setter(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  char v4;
  uint64_t *v5;
  char v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  char v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  void *v37;
  unint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  int64_t v52;
  unint64_t v53;
  int64_t v54;
  uint64_t v55;
  uint64_t result;
  uint64_t v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  int64_t v73;
  unint64_t v74;
  int64_t v75;
  int64_t v76;
  uint64_t v77;
  int64_t v78;
  int64_t v79;
  void *__srca;
  char *__src;
  uint64_t v82;
  int64_t v83;
  uint64_t v84;
  uint64_t v85;
  int64_t v86;
  unint64_t v87;
  uint64_t v88;
  _OWORD v89[4];
  uint64_t v90;
  _OWORD v91[4];
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;

  v5 = v3;
  outlined init with copy of (Hashable & Sendable)?(a1, (uint64_t)&v93, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
  if (!*((_QWORD *)&v94 + 1))
  {
    outlined destroy of Any?((uint64_t)&v93, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    swift_bridgeObjectRetain();
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    v21 = v20;
    swift_bridgeObjectRelease();
    if ((v21 & 1) != 0)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v23 = *v3;
      *v3 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v24 = v23;
        goto LABEL_10;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedString._AttributeValue>);
      v57 = static _DictionaryStorage.copy(original:)();
      v24 = v57;
      if (!*(_QWORD *)(v23 + 16))
        goto LABEL_80;
      v58 = (char *)(v57 + 64);
      __src = (char *)(v23 + 64);
      v59 = (unint64_t)((1 << *(_BYTE *)(v24 + 32)) + 63) >> 6;
      if (v24 != v23 || v58 >= &__src[8 * v59])
        memmove(v58, __src, 8 * v59);
      v83 = 0;
      *(_QWORD *)(v24 + 16) = *(_QWORD *)(v23 + 16);
      v60 = 1 << *(_BYTE *)(v23 + 32);
      v61 = -1;
      if (v60 < 64)
        v61 = ~(-1 << v60);
      v87 = v61 & *(_QWORD *)(v23 + 64);
      v79 = (unint64_t)(v60 + 63) >> 6;
      while (1)
      {
        if (v87)
        {
          v62 = __clz(__rbit64(v87));
          v87 &= v87 - 1;
          v63 = v62 | (v83 << 6);
        }
        else
        {
          v73 = v83 + 1;
          if (__OFADD__(v83, 1))
          {
LABEL_82:
            __break(1u);
            goto LABEL_83;
          }
          if (v73 >= v79)
            goto LABEL_80;
          v74 = *(_QWORD *)&__src[8 * v73];
          v75 = v83 + 1;
          if (!v74)
          {
            v75 = v83 + 2;
            if (v83 + 2 >= v79)
              goto LABEL_80;
            v74 = *(_QWORD *)&__src[8 * v75];
            if (!v74)
            {
              v75 = v83 + 3;
              if (v83 + 3 >= v79)
                goto LABEL_80;
              v74 = *(_QWORD *)&__src[8 * v75];
              if (!v74)
              {
                v75 = v83 + 4;
                if (v83 + 4 >= v79)
                  goto LABEL_80;
                v74 = *(_QWORD *)&__src[8 * v75];
                if (!v74)
                {
                  v75 = v83 + 5;
                  if (v83 + 5 >= v79)
                    goto LABEL_80;
                  v74 = *(_QWORD *)&__src[8 * v75];
                  if (!v74)
                  {
                    v75 = v83 + 6;
                    if (v83 + 6 >= v79)
                      goto LABEL_80;
                    v74 = *(_QWORD *)&__src[8 * v75];
                    if (!v74)
                    {
                      v76 = v83 + 7;
                      if (v83 + 7 >= v79)
                        goto LABEL_80;
                      v74 = *(_QWORD *)&__src[8 * v76];
                      if (!v74)
                      {
                        while (1)
                        {
                          v75 = v76 + 1;
                          if (__OFADD__(v76, 1))
                            goto LABEL_84;
                          if (v75 >= v79)
                            break;
                          v74 = *(_QWORD *)&__src[8 * v75];
                          ++v76;
                          if (v74)
                            goto LABEL_79;
                        }
LABEL_80:
                        swift_bridgeObjectRelease();
LABEL_10:
                        swift_bridgeObjectRelease();
                        v25 = *(_QWORD *)(v24 + 56) + 72 * v19;
                        v93 = *(_OWORD *)v25;
                        v27 = *(_OWORD *)(v25 + 32);
                        v26 = *(_OWORD *)(v25 + 48);
                        v28 = *(_QWORD *)(v25 + 64);
                        v94 = *(_OWORD *)(v25 + 16);
                        v95 = v27;
                        v97 = v28;
                        v96 = v26;
                        specialized _NativeDictionary._delete(at:)(v19, v24);
                        *v5 = v24;
                        swift_bridgeObjectRelease();
LABEL_49:
                        AttributedString._AttributeStorage._attributeModified(_:old:new:)(a2, a3, (uint64_t)&v93, a1);
                        outlined destroy of Any?(a1, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                        return outlined destroy of Any?((uint64_t)&v93, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                      }
                      v75 = v83 + 7;
                    }
                  }
                }
              }
            }
          }
LABEL_79:
          v87 = (v74 - 1) & v74;
          v83 = v75;
          v63 = __clz(__rbit64(v74)) + (v75 << 6);
        }
        v64 = 16 * v63;
        v65 = (uint64_t *)(*(_QWORD *)(v23 + 48) + 16 * v63);
        v66 = v65[1];
        v85 = *v65;
        v67 = 72 * v63;
        outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v23 + 56) + 72 * v63, (uint64_t)&v93);
        v68 = (_QWORD *)(*(_QWORD *)(v24 + 48) + v64);
        *v68 = v85;
        v68[1] = v66;
        v69 = *(_QWORD *)(v24 + 56) + v67;
        *(_OWORD *)v69 = v93;
        v70 = v94;
        v71 = v95;
        v72 = v96;
        *(_QWORD *)(v69 + 64) = v97;
        *(_OWORD *)(v69 + 32) = v71;
        *(_OWORD *)(v69 + 48) = v72;
        *(_OWORD *)(v69 + 16) = v70;
        swift_bridgeObjectRetain();
      }
    }
    v97 = 0;
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    goto LABEL_49;
  }
  v91[2] = v95;
  v91[3] = v96;
  v92 = v97;
  v91[0] = v93;
  v91[1] = v94;
  outlined init with copy of AttributedString._AttributeValue((uint64_t)v91, (uint64_t)v89);
  v9 = swift_isUniquelyReferenced_nonNull_native();
  v88 = *v3;
  v10 = *v3;
  *v3 = 0x8000000000000000;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v4 = v11;
    if (*(_QWORD *)(v10 + 24) < v15)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, v9);
      v16 = v88;
      v17 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
      if ((v4 & 1) != (v18 & 1))
        goto LABEL_85;
      v12 = v17;
      if ((v4 & 1) == 0)
        goto LABEL_47;
LABEL_13:
      v29 = *(_QWORD *)(v16 + 56) + 72 * v12;
      v93 = *(_OWORD *)v29;
      v30 = *(_OWORD *)(v29 + 16);
      v31 = *(_OWORD *)(v29 + 32);
      v32 = *(_OWORD *)(v29 + 48);
      v97 = *(_QWORD *)(v29 + 64);
      v95 = v31;
      v96 = v32;
      v94 = v30;
      v33 = v89[1];
      v34 = v89[2];
      v35 = v89[3];
      *(_QWORD *)(v29 + 64) = v90;
      *(_OWORD *)(v29 + 32) = v34;
      *(_OWORD *)(v29 + 48) = v35;
      *(_OWORD *)v29 = v89[0];
      *(_OWORD *)(v29 + 16) = v33;
LABEL_48:
      *v5 = v16;
      swift_bridgeObjectRelease();
      outlined destroy of AttributedString._AttributeValue((uint64_t)v91);
      goto LABEL_49;
    }
    if ((v9 & 1) != 0)
    {
      v16 = v10;
      if ((v11 & 1) != 0)
        goto LABEL_13;
LABEL_47:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, (uint64_t)v89, (_QWORD *)v16);
      v97 = 0;
      v95 = 0u;
      v96 = 0u;
      v93 = 0u;
      v94 = 0u;
      swift_bridgeObjectRetain();
      goto LABEL_48;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedString._AttributeValue>);
  v36 = static _DictionaryStorage.copy(original:)();
  v16 = v36;
  if (!*(_QWORD *)(v10 + 16))
  {
LABEL_46:
    swift_bridgeObjectRelease();
    if ((v4 & 1) != 0)
      goto LABEL_13;
    goto LABEL_47;
  }
  v37 = (void *)(v36 + 64);
  v38 = (unint64_t)((1 << *(_BYTE *)(v16 + 32)) + 63) >> 6;
  if (v16 != v10 || (unint64_t)v37 >= v10 + 64 + 8 * v38)
    memmove(v37, (const void *)(v10 + 64), 8 * v38);
  v39 = 0;
  *(_QWORD *)(v16 + 16) = *(_QWORD *)(v10 + 16);
  v40 = 1 << *(_BYTE *)(v10 + 32);
  v41 = -1;
  if (v40 < 64)
    v41 = ~(-1 << v40);
  v42 = v41 & *(_QWORD *)(v10 + 64);
  v77 = v10 + 64;
  v78 = (unint64_t)(v40 + 63) >> 6;
  while (1)
  {
    if (v42)
    {
      v84 = (v42 - 1) & v42;
      v86 = v39;
      v43 = __clz(__rbit64(v42)) | (v39 << 6);
      goto LABEL_24;
    }
    v52 = v39 + 1;
    if (__OFADD__(v39, 1))
    {
      __break(1u);
      goto LABEL_82;
    }
    if (v52 >= v78)
      goto LABEL_46;
    v53 = *(_QWORD *)(v77 + 8 * v52);
    v54 = v39 + 1;
    if (!v53)
    {
      v54 = v39 + 2;
      if (v39 + 2 >= v78)
        goto LABEL_46;
      v53 = *(_QWORD *)(v77 + 8 * v54);
      if (!v53)
      {
        v54 = v39 + 3;
        if (v39 + 3 >= v78)
          goto LABEL_46;
        v53 = *(_QWORD *)(v77 + 8 * v54);
        if (!v53)
        {
          v54 = v39 + 4;
          if (v39 + 4 >= v78)
            goto LABEL_46;
          v53 = *(_QWORD *)(v77 + 8 * v54);
          if (!v53)
          {
            v54 = v39 + 5;
            if (v39 + 5 >= v78)
              goto LABEL_46;
            v53 = *(_QWORD *)(v77 + 8 * v54);
            if (!v53)
            {
              v54 = v39 + 6;
              if (v39 + 6 >= v78)
                goto LABEL_46;
              v53 = *(_QWORD *)(v77 + 8 * v54);
              if (!v53)
                break;
            }
          }
        }
      }
    }
LABEL_45:
    v84 = (v53 - 1) & v53;
    v86 = v54;
    v43 = __clz(__rbit64(v53)) + (v54 << 6);
LABEL_24:
    v44 = 16 * v43;
    v45 = (uint64_t *)(*(_QWORD *)(v10 + 48) + 16 * v43);
    __srca = (void *)v45[1];
    v82 = *v45;
    v46 = 72 * v43;
    outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v10 + 56) + 72 * v43, (uint64_t)&v93);
    v47 = (_QWORD *)(*(_QWORD *)(v16 + 48) + v44);
    *v47 = v82;
    v47[1] = __srca;
    v48 = *(_QWORD *)(v16 + 56) + v46;
    *(_OWORD *)v48 = v93;
    v49 = v94;
    v50 = v95;
    v51 = v96;
    *(_QWORD *)(v48 + 64) = v97;
    *(_OWORD *)(v48 + 32) = v50;
    *(_OWORD *)(v48 + 48) = v51;
    *(_OWORD *)(v48 + 16) = v49;
    swift_bridgeObjectRetain();
    v42 = v84;
    v39 = v86;
  }
  v55 = v39 + 7;
  if (v39 + 7 >= v78)
    goto LABEL_46;
  v53 = *(_QWORD *)(v77 + 8 * v55);
  if (v53)
  {
    v54 = v39 + 7;
    goto LABEL_45;
  }
  while (1)
  {
    v54 = v55 + 1;
    if (__OFADD__(v55, 1))
      break;
    if (v54 >= v78)
      goto LABEL_46;
    v53 = *(_QWORD *)(v77 + 8 * v54);
    ++v55;
    if (v53)
      goto LABEL_45;
  }
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t AttributedString._AttributeStorage._attributeModified(_:old:new:)(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  _QWORD *v22;
  BOOL v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  uint64_t *v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int64_t v45;
  unint64_t v46;
  unint64_t v47;
  int64_t v48;
  unint64_t v49;
  int64_t v50;
  _QWORD *v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  uint64_t v57;
  _BOOL8 v58;
  BOOL v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  char v63;
  unint64_t v64;
  char v65;
  char v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t *v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  int64_t v108;
  unint64_t v109;
  int64_t v110;
  int64_t v111;
  uint64_t v112;
  char *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  uint64_t v134;
  unint64_t v135;
  int64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  int64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  _QWORD *v146;
  int64_t v147;
  unint64_t v148;
  int64_t v149;
  unint64_t v150;
  int64_t v151;
  unint64_t v152;
  char *__src;
  void *__srca;
  char v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  int64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  int64_t v166;
  uint64_t v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  uint64_t v173;
  _OWORD v174[4];
  uint64_t v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  uint64_t v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  uint64_t v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  uint64_t v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  uint64_t v195;
  _BYTE v196[24];
  uint64_t v197;

  v6 = v4;
  v7 = a4;
  v8 = a3;
  v10 = *(_QWORD *)(a3 + 24);
  outlined init with copy of (Hashable & Sendable)?(a4, (uint64_t)v196, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
  v11 = v10 | v197;
  result = outlined destroy of Any?((uint64_t)v196, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
  if (!v11)
    return result;
  outlined init with copy of (Hashable & Sendable)?(v7, (uint64_t)&v186, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
  v164 = v4;
  if (*((_QWORD *)&v187 + 1))
  {
    v13 = AttributedString._AttributeValue.isInvalidatedOnAttributeChange.getter();
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v186);
    if ((v13 & 1) != 0)
    {
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)((unint64_t *)&v186, a1, a2);
      goto LABEL_22;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v186, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
  }
  v5 = v6[1];
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  v14 = Hasher._finalize()();
  v15 = -1 << *(_BYTE *)(v5 + 32);
  v16 = v14 & ~v15;
  if (((*(_QWORD *)(v5 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v17 = *(_QWORD *)(v5 + 48);
    v18 = (_QWORD *)(v17 + 16 * v16);
    v19 = *v18 == a1 && v18[1] == a2;
    if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_12:
      swift_bridgeObjectRelease();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v5 = v6[1];
      *(_QWORD *)&v186 = v5;
      v6[1] = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        goto LABEL_180;
      v21 = v5;
LABEL_14:
      v5 = *(_QWORD *)(*(_QWORD *)(v21 + 48) + 16 * v16 + 8);
      specialized _NativeSet._delete(at:)(v16);
      v6[1] = v186;
      swift_bridgeObjectRelease();
    }
    else
    {
      while (1)
      {
        v16 = (v16 + 1) & ~v15;
        if (((*(_QWORD *)(v5 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
          break;
        v22 = (_QWORD *)(v17 + 16 * v16);
        v23 = *v22 == a1 && v22[1] == a2;
        if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          goto LABEL_12;
      }
    }
  }
LABEL_22:
  swift_bridgeObjectRelease();
  outlined init with copy of (Hashable & Sendable)?(v8, (uint64_t)&v186, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
  outlined init with copy of (Hashable & Sendable)?(v7, (uint64_t)&v191, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
  if (*((_QWORD *)&v187 + 1))
  {
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v186, (uint64_t)&v181, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (*((_QWORD *)&v192 + 1))
    {
      v7 = (uint64_t)v174;
      v178 = v193;
      v179 = v194;
      v180 = v195;
      v176 = v191;
      v177 = v192;
      v24 = specialized static AttributedString._AttributeValue.== infix(_:_:)((uint64_t)&v181, (uint64_t)&v176);
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v176);
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v181);
      result = outlined destroy of Any?((uint64_t)&v186, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if ((v24 & 1) != 0)
        return result;
      goto LABEL_30;
    }
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v181);
    v7 = (uint64_t)v174;
  }
  else
  {
    v7 = (uint64_t)v174;
    if (!*((_QWORD *)&v192 + 1))
      return outlined destroy of Any?((uint64_t)&v186, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
  }
  outlined destroy of Any?((uint64_t)&v186, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
LABEL_30:
  v8 = v6[1];
  v25 = v8 + 56;
  v26 = 1 << *(_BYTE *)(v8 + 32);
  if (v26 < 64)
    v27 = ~(-1 << v26);
  else
    v27 = -1;
  v28 = v27 & *(_QWORD *)(v8 + 56);
  v166 = (unint64_t)(v26 + 63) >> 6;
  swift_bridgeObjectRetain();
  v16 = 0;
  v29 = a1;
  v163 = v8;
  v165 = v8 + 56;
  while (1)
  {
    if (v28)
    {
      v30 = __clz(__rbit64(v28));
      v28 &= v28 - 1;
      v31 = v30 | (v16 << 6);
      goto LABEL_54;
    }
    v32 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
LABEL_176:
      __break(1u);
      goto LABEL_177;
    }
    if (v32 >= v166)
      return swift_release();
    v33 = *(_QWORD *)(v25 + 8 * v32);
    ++v16;
    if (v33)
      goto LABEL_53;
    v16 = v32 + 1;
    if (v32 + 1 >= v166)
      return swift_release();
    v33 = *(_QWORD *)(v25 + 8 * v16);
    if (v33)
      goto LABEL_53;
    v16 = v32 + 2;
    if (v32 + 2 >= v166)
      return swift_release();
    v33 = *(_QWORD *)(v25 + 8 * v16);
    if (v33)
      goto LABEL_53;
    v34 = v32 + 3;
    if (v34 >= v166)
      return swift_release();
    v33 = *(_QWORD *)(v25 + 8 * v34);
    if (!v33)
    {
      while (1)
      {
        v16 = v34 + 1;
        if (__OFADD__(v34, 1))
          break;
        if ((uint64_t)v16 >= v166)
          return swift_release();
        v33 = *(_QWORD *)(v25 + 8 * v16);
        ++v34;
        if (v33)
          goto LABEL_53;
      }
LABEL_177:
      __break(1u);
      goto LABEL_178;
    }
    v16 = v34;
LABEL_53:
    v28 = (v33 - 1) & v33;
    v31 = __clz(__rbit64(v33)) + (v16 << 6);
LABEL_54:
    v35 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v31);
    v36 = *v35;
    v5 = v35[1];
    v37 = *v35 == v29 && v5 == a2;
    if (v37 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      continue;
    v38 = *v6;
    if (!*(_QWORD *)(*v6 + 16))
      goto LABEL_37;
    swift_bridgeObjectRetain();
    v39 = specialized __RawDictionaryStorage.find<A>(_:)(v36, v5);
    if ((v40 & 1) == 0)
      goto LABEL_36;
    outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v38 + 56) + 72 * v39, (uint64_t)&v181);
    v41 = v185;
    v190 = v185;
    v188 = v183;
    v189 = v184;
    v186 = v181;
    v187 = v182;
    if (!v185)
    {
LABEL_35:
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v186);
LABEL_36:
      swift_bridgeObjectRelease();
LABEL_37:
      v25 = v165;
      continue;
    }
    v8 = v185 + 56;
    v42 = 1 << *(_BYTE *)(v185 + 32);
    v43 = v42 < 64 ? ~(-1 << v42) : -1;
    v44 = v43 & *(_QWORD *)(v185 + 56);
    v45 = (unint64_t)(v42 + 63) >> 6;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v7 = 0;
    do
    {
      while (1)
      {
        if (v44)
        {
          v46 = __clz(__rbit64(v44));
          v44 &= v44 - 1;
          v47 = v46 | (v7 << 6);
        }
        else
        {
          v48 = v7 + 1;
          if (__OFADD__(v7, 1))
            goto LABEL_176;
          if (v48 >= v45)
          {
LABEL_34:
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            v8 = v163;
            v6 = v164;
            v29 = a1;
            v7 = (uint64_t)v174;
            goto LABEL_35;
          }
          v49 = *(_QWORD *)(v8 + 8 * v48);
          ++v7;
          if (!v49)
          {
            v7 = v48 + 1;
            if (v48 + 1 >= v45)
              goto LABEL_34;
            v49 = *(_QWORD *)(v8 + 8 * v7);
            if (!v49)
            {
              v7 = v48 + 2;
              if (v48 + 2 >= v45)
                goto LABEL_34;
              v49 = *(_QWORD *)(v8 + 8 * v7);
              if (!v49)
              {
                v7 = v48 + 3;
                if (v48 + 3 >= v45)
                  goto LABEL_34;
                v49 = *(_QWORD *)(v8 + 8 * v7);
                if (!v49)
                {
                  v50 = v48 + 4;
                  if (v50 >= v45)
                    goto LABEL_34;
                  v49 = *(_QWORD *)(v8 + 8 * v50);
                  if (!v49)
                  {
                    while (1)
                    {
                      v7 = v50 + 1;
                      if (__OFADD__(v50, 1))
                        break;
                      if (v7 >= v45)
                        goto LABEL_34;
                      v49 = *(_QWORD *)(v8 + 8 * v7);
                      ++v50;
                      if (v49)
                        goto LABEL_84;
                    }
LABEL_178:
                    __break(1u);
LABEL_179:
                    __break(1u);
LABEL_180:
                    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<String>);
                    v132 = static _SetStorage.copy(original:)();
                    v21 = v132;
                    if (*(_QWORD *)(v5 + 16))
                    {
                      v133 = (void *)(v132 + 56);
                      v134 = v5 + 56;
                      v135 = (unint64_t)((1 << *(_BYTE *)(v21 + 32)) + 63) >> 6;
                      if (v21 != v5 || (unint64_t)v133 >= v134 + 8 * v135)
                        memmove(v133, (const void *)(v5 + 56), 8 * v135);
                      v136 = 0;
                      *(_QWORD *)(v21 + 16) = *(_QWORD *)(v5 + 16);
                      v137 = 1 << *(_BYTE *)(v5 + 32);
                      v138 = -1;
                      if (v137 < 64)
                        v138 = ~(-1 << v137);
                      v139 = v138 & *(_QWORD *)(v5 + 56);
                      v140 = (unint64_t)(v137 + 63) >> 6;
                      while (1)
                      {
                        if (v139)
                        {
                          v141 = __clz(__rbit64(v139));
                          v139 &= v139 - 1;
                          v142 = v141 | (v136 << 6);
                        }
                        else
                        {
                          v147 = v136 + 1;
                          if (__OFADD__(v136, 1))
                            goto LABEL_212;
                          if (v147 >= v140)
                            break;
                          v148 = *(_QWORD *)(v134 + 8 * v147);
                          ++v136;
                          if (!v148)
                          {
                            v136 = v147 + 1;
                            if (v147 + 1 >= v140)
                              break;
                            v148 = *(_QWORD *)(v134 + 8 * v136);
                            if (!v148)
                            {
                              v136 = v147 + 2;
                              if (v147 + 2 >= v140)
                                break;
                              v148 = *(_QWORD *)(v134 + 8 * v136);
                              if (!v148)
                              {
                                v136 = v147 + 3;
                                if (v147 + 3 >= v140)
                                  break;
                                v148 = *(_QWORD *)(v134 + 8 * v136);
                                if (!v148)
                                {
                                  v136 = v147 + 4;
                                  if (v147 + 4 >= v140)
                                    break;
                                  v148 = *(_QWORD *)(v134 + 8 * v136);
                                  if (!v148)
                                  {
                                    v136 = v147 + 5;
                                    if (v147 + 5 >= v140)
                                      break;
                                    v148 = *(_QWORD *)(v134 + 8 * v136);
                                    if (!v148)
                                    {
                                      v149 = v147 + 6;
                                      if (v149 >= v140)
                                        break;
                                      v148 = *(_QWORD *)(v134 + 8 * v149);
                                      if (!v148)
                                      {
                                        while (1)
                                        {
                                          v136 = v149 + 1;
                                          if (__OFADD__(v149, 1))
                                            break;
                                          if (v136 >= v140)
                                            goto LABEL_210;
                                          v148 = *(_QWORD *)(v134 + 8 * v136);
                                          ++v149;
                                          if (v148)
                                            goto LABEL_209;
                                        }
LABEL_215:
                                        __break(1u);
                                        goto LABEL_216;
                                      }
                                      v136 = v149;
                                    }
                                  }
                                }
                              }
                            }
                          }
LABEL_209:
                          v139 = (v148 - 1) & v148;
                          v142 = __clz(__rbit64(v148)) + (v136 << 6);
                        }
                        v143 = 16 * v142;
                        v144 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v143);
                        v145 = v144[1];
                        v146 = (_QWORD *)(*(_QWORD *)(v21 + 48) + v143);
                        *v146 = *v144;
                        v146[1] = v145;
                        swift_bridgeObjectRetain();
                      }
                    }
LABEL_210:
                    swift_bridgeObjectRelease();
                    *(_QWORD *)&v186 = v21;
                    v6 = v164;
                    goto LABEL_14;
                  }
                  v7 = v50;
                }
              }
            }
          }
LABEL_84:
          v44 = (v49 - 1) & v49;
          v47 = __clz(__rbit64(v49)) + (v7 << 6);
        }
        v51 = (_QWORD *)(*(_QWORD *)(v41 + 48) + 16 * v47);
        v52 = v51[1];
        if (v52)
          break;
        swift_bridgeObjectRelease();
      }
      v53 = *v51 == a1 && v52 == a2;
    }
    while (!v53 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v185 = 0;
    v183 = 0u;
    v184 = 0u;
    v181 = 0u;
    v182 = 0u;
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v181, (uint64_t)&v176, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (*((_QWORD *)&v177 + 1))
      break;
    outlined destroy of Any?((uint64_t)&v176, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    v7 = (uint64_t)v164;
    swift_bridgeObjectRetain();
    v64 = specialized __RawDictionaryStorage.find<A>(_:)(v36, v5);
    v66 = v65;
    swift_bridgeObjectRelease();
    if ((v66 & 1) == 0)
    {
      v180 = 0;
      v178 = 0u;
      v179 = 0u;
      v176 = 0u;
      v177 = 0u;
      v29 = a1;
      v8 = v163;
      goto LABEL_108;
    }
    v67 = swift_isUniquelyReferenced_nonNull_native();
    v68 = *v164;
    *v164 = 0x8000000000000000;
    if ((v67 & 1) != 0)
    {
      v69 = v68;
      goto LABEL_99;
    }
    v152 = v64;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedString._AttributeValue>);
    v112 = static _DictionaryStorage.copy(original:)();
    v69 = v112;
    if (!*(_QWORD *)(v68 + 16))
      goto LABEL_172;
    v113 = (char *)(v112 + 64);
    v156 = (char *)(v68 + 64);
    v114 = (unint64_t)((1 << *(_BYTE *)(v69 + 32)) + 63) >> 6;
    if (v69 != v68 || v113 >= &v156[8 * v114])
      memmove(v113, v156, 8 * v114);
    v158 = 0;
    *(_QWORD *)(v69 + 16) = *(_QWORD *)(v68 + 16);
    v115 = 1 << *(_BYTE *)(v68 + 32);
    if (v115 < 64)
      v116 = ~(-1 << v115);
    else
      v116 = -1;
    v162 = v116 & *(_QWORD *)(v68 + 64);
    __srca = (void *)((unint64_t)(v115 + 63) >> 6);
    while (1)
    {
      if (v162)
      {
        v117 = __clz(__rbit64(v162));
        v162 &= v162 - 1;
        v118 = v117 | (v158 << 6);
        goto LABEL_150;
      }
      v128 = v158 + 1;
      if (__OFADD__(v158, 1))
        goto LABEL_214;
      if (v128 >= (uint64_t)__srca)
        goto LABEL_172;
      v129 = *(_QWORD *)&v156[8 * v128];
      v130 = v158 + 1;
      if (!v129)
      {
        v130 = v158 + 2;
        if (v158 + 2 >= (uint64_t)__srca)
          goto LABEL_172;
        v129 = *(_QWORD *)&v156[8 * v130];
        if (!v129)
        {
          v130 = v158 + 3;
          if (v158 + 3 >= (uint64_t)__srca)
            goto LABEL_172;
          v129 = *(_QWORD *)&v156[8 * v130];
          if (!v129)
          {
            v130 = v158 + 4;
            if (v158 + 4 >= (uint64_t)__srca)
              goto LABEL_172;
            v129 = *(_QWORD *)&v156[8 * v130];
            if (!v129)
            {
              v130 = v158 + 5;
              if (v158 + 5 >= (uint64_t)__srca)
                goto LABEL_172;
              v129 = *(_QWORD *)&v156[8 * v130];
              if (!v129)
              {
                v130 = v158 + 6;
                if (v158 + 6 >= (uint64_t)__srca)
                  goto LABEL_172;
                v129 = *(_QWORD *)&v156[8 * v130];
                if (!v129)
                  break;
              }
            }
          }
        }
      }
LABEL_171:
      v162 = (v129 - 1) & v129;
      v158 = v130;
      v118 = __clz(__rbit64(v129)) + (v130 << 6);
LABEL_150:
      v119 = 16 * v118;
      v120 = (uint64_t *)(*(_QWORD *)(v68 + 48) + 16 * v118);
      v121 = v120[1];
      v160 = *v120;
      v122 = 72 * v118;
      outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v68 + 56) + 72 * v118, (uint64_t)&v176);
      v123 = (_QWORD *)(*(_QWORD *)(v69 + 48) + v119);
      *v123 = v160;
      v123[1] = v121;
      v124 = *(_QWORD *)(v69 + 56) + v122;
      *(_OWORD *)v124 = v176;
      v125 = v177;
      v126 = v178;
      v127 = v179;
      *(_QWORD *)(v124 + 64) = v180;
      *(_OWORD *)(v124 + 32) = v126;
      *(_OWORD *)(v124 + 48) = v127;
      *(_OWORD *)(v124 + 16) = v125;
      swift_bridgeObjectRetain();
    }
    v131 = v158 + 7;
    if (v158 + 7 >= (uint64_t)__srca)
      goto LABEL_172;
    v129 = *(_QWORD *)&v156[8 * v131];
    if (v129)
    {
      v130 = v158 + 7;
      goto LABEL_171;
    }
    while (1)
    {
      v130 = v131 + 1;
      if (__OFADD__(v131, 1))
        goto LABEL_217;
      if (v130 >= (uint64_t)__srca)
        break;
      v129 = *(_QWORD *)&v156[8 * v130];
      ++v131;
      if (v129)
        goto LABEL_171;
    }
LABEL_172:
    swift_bridgeObjectRelease();
    v7 = (uint64_t)v164;
    v64 = v152;
LABEL_99:
    swift_bridgeObjectRelease();
    v70 = *(_QWORD *)(v69 + 56) + 72 * v64;
    v176 = *(_OWORD *)v70;
    v72 = *(_OWORD *)(v70 + 32);
    v71 = *(_OWORD *)(v70 + 48);
    v73 = *(_QWORD *)(v70 + 64);
    v177 = *(_OWORD *)(v70 + 16);
    v178 = v72;
    v180 = v73;
    v179 = v71;
    specialized _NativeDictionary._delete(at:)(v64, v69);
    *(_QWORD *)v7 = v69;
    swift_bridgeObjectRelease();
    v29 = a1;
    v8 = v163;
LABEL_108:
    AttributedString._AttributeStorage._attributeModified(_:old:new:)(v36, v5, &v176, &v181);
    swift_bridgeObjectRelease();
    outlined destroy of Any?((uint64_t)&v181, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined destroy of Any?((uint64_t)&v176, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v186);
    v25 = v165;
    v6 = (_QWORD *)v7;
    v7 = (uint64_t)v174;
  }
  v174[3] = v179;
  v175 = v180;
  v174[1] = v177;
  v174[2] = v178;
  v174[0] = v176;
  outlined init with copy of AttributedString._AttributeValue((uint64_t)v174, (uint64_t)&v176);
  v7 = (uint64_t)v164;
  v8 = swift_isUniquelyReferenced_nonNull_native();
  v168 = *v164;
  v54 = *v164;
  *v164 = 0x8000000000000000;
  v55 = specialized __RawDictionaryStorage.find<A>(_:)(v36, v5);
  v57 = *(_QWORD *)(v54 + 16);
  v58 = (v56 & 1) == 0;
  v59 = __OFADD__(v57, v58);
  v60 = v57 + v58;
  if (v59)
    goto LABEL_179;
  v61 = v56;
  if (*(_QWORD *)(v54 + 24) < v60)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v60, v8);
    v62 = v168;
    v55 = specialized __RawDictionaryStorage.find<A>(_:)(v36, v5);
    if ((v61 & 1) != (v63 & 1))
      goto LABEL_218;
    goto LABEL_102;
  }
  if ((v8 & 1) != 0)
  {
    v62 = v54;
LABEL_102:
    v29 = a1;
    v8 = v163;
    if ((v61 & 1) != 0)
    {
      v74 = *(_QWORD *)(v62 + 56) + 72 * v55;
      v76 = *(_OWORD *)(v74 + 16);
      v75 = *(_OWORD *)(v74 + 32);
      v77 = *(_OWORD *)(v74 + 48);
      v173 = *(_QWORD *)(v74 + 64);
      v172 = v77;
      v169 = *(_OWORD *)v74;
      v170 = v76;
      v171 = v75;
      v78 = *(_QWORD *)(v62 + 56) + 72 * v55;
      v79 = v177;
      v80 = v178;
      v81 = v179;
      *(_QWORD *)(v78 + 64) = v180;
      *(_OWORD *)(v78 + 32) = v80;
      *(_OWORD *)(v78 + 48) = v81;
      *(_OWORD *)(v78 + 16) = v79;
      *(_OWORD *)v78 = v176;
    }
    else
    {
      *(_QWORD *)(v62 + 8 * (v55 >> 6) + 64) |= 1 << v55;
      v82 = (uint64_t *)(*(_QWORD *)(v62 + 48) + 16 * v55);
      *v82 = v36;
      v82[1] = v5;
      v83 = *(_QWORD *)(v62 + 56) + 72 * v55;
      *(_OWORD *)v83 = v176;
      v84 = v177;
      v85 = v178;
      v86 = v179;
      *(_QWORD *)(v83 + 64) = v180;
      *(_OWORD *)(v83 + 32) = v85;
      *(_OWORD *)(v83 + 48) = v86;
      *(_OWORD *)(v83 + 16) = v84;
      v87 = *(_QWORD *)(v62 + 16);
      v59 = __OFADD__(v87, 1);
      v88 = v87 + 1;
      if (v59)
      {
        __break(1u);
LABEL_212:
        __break(1u);
LABEL_213:
        __break(1u);
LABEL_214:
        __break(1u);
        goto LABEL_215;
      }
      *(_QWORD *)(v62 + 16) = v88;
      v173 = 0;
      v171 = 0u;
      v172 = 0u;
      v169 = 0u;
      v170 = 0u;
      swift_bridgeObjectRetain();
    }
    *(_QWORD *)v7 = v62;
    swift_bridgeObjectRelease();
    outlined destroy of AttributedString._AttributeValue((uint64_t)v174);
    outlined init with take of LocalePreferences?((uint64_t)&v169, (uint64_t)&v176, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    goto LABEL_108;
  }
  v150 = v55;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedString._AttributeValue>);
  v89 = static _DictionaryStorage.copy(original:)();
  v62 = v89;
  if (!*(_QWORD *)(v54 + 16))
  {
LABEL_140:
    swift_bridgeObjectRelease();
    v55 = v150;
    goto LABEL_102;
  }
  v155 = v61;
  v90 = (char *)(v89 + 64);
  __src = (char *)(v54 + 64);
  v91 = (unint64_t)((1 << *(_BYTE *)(v62 + 32)) + 63) >> 6;
  v157 = v54;
  if (v62 != v54 || v90 >= &__src[8 * v91])
    memmove(v90, __src, 8 * v91);
  *(_QWORD *)(v62 + 16) = *(_QWORD *)(v54 + 16);
  v92 = 1 << *(_BYTE *)(v54 + 32);
  if (v92 < 64)
    v93 = ~(-1 << v92);
  else
    v93 = -1;
  v159 = 0;
  v161 = v93 & *(_QWORD *)(v54 + 64);
  v151 = (unint64_t)(v92 + 63) >> 6;
  while (2)
  {
    v7 = (uint64_t)v164;
    v61 = v155;
    if (v161)
    {
      v94 = __clz(__rbit64(v161));
      v161 &= v161 - 1;
      v95 = v94 | (v159 << 6);
      v96 = v157;
LABEL_118:
      v97 = 16 * v95;
      v98 = *(_QWORD *)(v96 + 56);
      v99 = (uint64_t *)(*(_QWORD *)(v96 + 48) + 16 * v95);
      v101 = *v99;
      v100 = v99[1];
      v102 = 72 * v95;
      outlined init with copy of AttributedString._AttributeValue(v98 + 72 * v95, (uint64_t)&v169);
      v103 = (_QWORD *)(*(_QWORD *)(v62 + 48) + v97);
      *v103 = v101;
      v103[1] = v100;
      v104 = *(_QWORD *)(v62 + 56) + v102;
      *(_OWORD *)v104 = v169;
      v105 = v170;
      v106 = v171;
      v107 = v172;
      *(_QWORD *)(v104 + 64) = v173;
      *(_OWORD *)(v104 + 32) = v106;
      *(_OWORD *)(v104 + 48) = v107;
      *(_OWORD *)(v104 + 16) = v105;
      swift_bridgeObjectRetain();
      continue;
    }
    break;
  }
  v108 = v159 + 1;
  v96 = v157;
  if (__OFADD__(v159, 1))
    goto LABEL_213;
  if (v108 >= v151)
    goto LABEL_140;
  v109 = *(_QWORD *)&__src[8 * v108];
  v110 = v159 + 1;
  if (v109)
    goto LABEL_139;
  v110 = v159 + 2;
  if (v159 + 2 >= v151)
    goto LABEL_140;
  v109 = *(_QWORD *)&__src[8 * v110];
  if (v109)
    goto LABEL_139;
  v110 = v159 + 3;
  if (v159 + 3 >= v151)
    goto LABEL_140;
  v109 = *(_QWORD *)&__src[8 * v110];
  if (v109)
    goto LABEL_139;
  v110 = v159 + 4;
  if (v159 + 4 >= v151)
    goto LABEL_140;
  v109 = *(_QWORD *)&__src[8 * v110];
  if (v109)
    goto LABEL_139;
  v110 = v159 + 5;
  if (v159 + 5 >= v151)
    goto LABEL_140;
  v109 = *(_QWORD *)&__src[8 * v110];
  if (v109)
    goto LABEL_139;
  v110 = v159 + 6;
  if (v159 + 6 >= v151)
    goto LABEL_140;
  v109 = *(_QWORD *)&__src[8 * v110];
  if (v109)
  {
LABEL_139:
    v159 = v110;
    v161 = (v109 - 1) & v109;
    v95 = __clz(__rbit64(v109)) + (v110 << 6);
    goto LABEL_118;
  }
  v111 = v159 + 7;
  if (v159 + 7 >= v151)
    goto LABEL_140;
  v109 = *(_QWORD *)&__src[8 * v111];
  if (v109)
  {
    v110 = v159 + 7;
    v96 = v157;
    goto LABEL_139;
  }
  while (1)
  {
    v110 = v111 + 1;
    if (__OFADD__(v111, 1))
      break;
    v7 = (uint64_t)v164;
    v61 = v155;
    v96 = v157;
    if (v110 >= v151)
      goto LABEL_140;
    v109 = *(_QWORD *)&__src[8 * v110];
    ++v111;
    if (v109)
      goto LABEL_139;
  }
LABEL_216:
  __break(1u);
LABEL_217:
  __break(1u);
LABEL_218:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t outlined destroy of AttributedString._AttributeValue(uint64_t a1)
{
  destroy for AttributedString._AttributeValue(a1);
  return a1;
}

uint64_t AttributedString._AttributeValue.isInvalidatedOnAttributeChange.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 64);
  if (!v1)
    return 0;
  v2 = v1 + 56;
  v3 = 1 << *(_BYTE *)(v1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(v1 + 56);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain_n();
  v8 = 0;
  if (!v5)
    goto LABEL_6;
LABEL_5:
  v9 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (i = v9 | (v8 << 6); ; i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    if (*(_QWORD *)(*(_QWORD *)(v1 + 48) + 16 * i + 8))
    {
      v14 = 1;
LABEL_30:
      swift_release();
      swift_bridgeObjectRelease();
      return v14;
    }
    result = swift_bridgeObjectRelease();
    if (v5)
      goto LABEL_5;
LABEL_6:
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v11 >= v6)
      goto LABEL_29;
    v12 = *(_QWORD *)(v2 + 8 * v11);
    ++v8;
    if (!v12)
    {
      v8 = v11 + 1;
      if (v11 + 1 >= v6)
        goto LABEL_29;
      v12 = *(_QWORD *)(v2 + 8 * v8);
      if (!v12)
      {
        v8 = v11 + 2;
        if (v11 + 2 >= v6)
          goto LABEL_29;
        v12 = *(_QWORD *)(v2 + 8 * v8);
        if (!v12)
        {
          v8 = v11 + 3;
          if (v11 + 3 >= v6)
            goto LABEL_29;
          v12 = *(_QWORD *)(v2 + 8 * v8);
          if (!v12)
          {
            v8 = v11 + 4;
            if (v11 + 4 >= v6)
              goto LABEL_29;
            v12 = *(_QWORD *)(v2 + 8 * v8);
            if (!v12)
              break;
          }
        }
      }
    }
LABEL_23:
    v5 = (v12 - 1) & v12;
  }
  v13 = v11 + 5;
  if (v13 >= v6)
  {
LABEL_29:
    v14 = 0;
    goto LABEL_30;
  }
  v12 = *(_QWORD *)(v2 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_23;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v6)
      goto LABEL_29;
    v12 = *(_QWORD *)(v2 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_23;
  }
LABEL_33:
  __break(1u);
  return result;
}

double static AttributedStringKey.runBoundaries.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = xmmword_18205FD60;
  return result;
}

{
  return static AttributedStringKey.runBoundaries.getter(a1);
}

uint64_t static AttributedStringKey.invalidationConditions.getter()
{
  return 0;
}

uint64_t static AttributedStringKey.inheritedByAddedText.getter()
{
  return 1;
}

uint64_t specialized static AttributedString._AttributeValue.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  char v5;
  _BYTE v7[40];
  _QWORD v8[3];
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  _BYTE v14[40];
  _BYTE v15[40];

  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v15);
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a2, (uint64_t)v14);
  outlined init with copy of (Hashable & Sendable)?((uint64_t)v15, (uint64_t)&v10, &demangling cache variable for type metadata for (Hashable & Sendable)?);
  outlined init with copy of (Hashable & Sendable)?((uint64_t)v14, (uint64_t)&v12, &demangling cache variable for type metadata for (Hashable & Sendable)?);
  if (!v11)
  {
    if (!v13)
    {
      v5 = 1;
      goto LABEL_9;
    }
    outlined destroy of Any?((uint64_t)&v12, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    goto LABEL_7;
  }
  if (!v13)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v10);
LABEL_7:
    v5 = 0;
    goto LABEL_9;
  }
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v10, (uint64_t)v8);
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v12, (uint64_t)v7);
  v3 = v9;
  v4 = __swift_project_boxed_opaque_existential_1(v8, v9);
  v5 = openEquatable #1 <A>(_:) in static AttributedString._AttributeValue.__equalAttributes(_:_:)((uint64_t)v4, (uint64_t)v7, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
LABEL_9:
  outlined destroy of Any?((uint64_t)v14, &demangling cache variable for type metadata for (Hashable & Sendable)?);
  outlined destroy of Any?((uint64_t)v15, &demangling cache variable for type metadata for (Hashable & Sendable)?);
  return v5 & 1;
}

uint64_t specialized static Dictionary<>.== infix(_:_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __int128 *v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  int v29;
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  __int128 *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _OWORD *v40;
  uint64_t *v41;
  int64_t v42;
  uint64_t v43;
  _BYTE v44[40];
  _QWORD v45[3];
  uint64_t v46;
  uint64_t v47;
  _BYTE v48[40];
  _BYTE v49[40];
  _BYTE v50[72];
  _OWORD v51[4];
  uint64_t v52;
  __int128 v53;
  _QWORD v54[6];
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;

  if (result == a2)
    return 1;
  v2 = a2;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v42 = 0;
  v4 = *(_QWORD *)(result + 64);
  v33 = result + 64;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & v4;
  v40 = v54;
  v8 = (__int128 *)&v54[3];
  v34 = (unint64_t)(v5 + 63) >> 6;
  v35 = result;
  v32 = v34 - 1;
  v36 = (__int128 *)&v54[3];
  v37 = a2;
  if ((v6 & v4) == 0)
    goto LABEL_12;
LABEL_10:
  while (2)
  {
    v10 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v11 = v10 | (v42 << 6);
LABEL_11:
    v12 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v11);
    v13 = *v12;
    v14 = v12[1];
    outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v3 + 56) + 72 * v11, (uint64_t)v40);
    *(_QWORD *)&v53 = v13;
    *((_QWORD *)&v53 + 1) = v14;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with take of (key: String, value: AttributedString._AttributeValue)?((uint64_t)&v53, (uint64_t)&v57);
      if (!v58)
        return 1;
      v51[2] = v61;
      v51[3] = v62;
      v52 = v63;
      v51[0] = v59;
      v51[1] = v60;
      v18 = specialized __RawDictionaryStorage.find<A>(_:)(v57, v58);
      v20 = v19;
      swift_bridgeObjectRelease();
      if ((v20 & 1) == 0)
        goto LABEL_43;
      outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v2 + 56) + 72 * v18, (uint64_t)v50);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v50, (uint64_t)v49);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v51, (uint64_t)v48);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v49, (uint64_t)&v53);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v48, (uint64_t)v8);
      if (v54[1])
        break;
      if ((_QWORD)v55)
      {
        outlined destroy of Any?((uint64_t)v8, &demangling cache variable for type metadata for (Hashable & Sendable)?);
        goto LABEL_42;
      }
      outlined destroy of Any?((uint64_t)v48, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of Any?((uint64_t)v49, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v50);
      result = outlined destroy of AttributedString._AttributeValue((uint64_t)v51);
      if (v7)
        goto LABEL_10;
LABEL_12:
      v15 = v42 + 1;
      if (__OFADD__(v42, 1))
      {
        __break(1u);
        goto LABEL_46;
      }
      if (v15 < v34)
      {
        v16 = *(_QWORD *)(v33 + 8 * v15);
        if (v16)
          goto LABEL_15;
        v17 = v42 + 2;
        ++v42;
        if (v15 + 1 < v34)
        {
          v16 = *(_QWORD *)(v33 + 8 * v17);
          if (v16)
            goto LABEL_18;
          v42 = v15 + 1;
          if (v15 + 2 < v34)
          {
            v16 = *(_QWORD *)(v33 + 8 * (v15 + 2));
            if (v16)
            {
              v15 += 2;
              goto LABEL_15;
            }
            v17 = v15 + 3;
            v42 = v15 + 2;
            if (v15 + 3 < v34)
            {
              v16 = *(_QWORD *)(v33 + 8 * v17);
              if (v16)
              {
LABEL_18:
                v15 = v17;
LABEL_15:
                v7 = (v16 - 1) & v16;
                v11 = __clz(__rbit64(v16)) + (v15 << 6);
                v42 = v15;
                goto LABEL_11;
              }
              while (1)
              {
                v15 = v17 + 1;
                if (__OFADD__(v17, 1))
                  break;
                if (v15 >= v34)
                {
                  v42 = v32;
                  goto LABEL_29;
                }
                v16 = *(_QWORD *)(v33 + 8 * v15);
                ++v17;
                if (v16)
                  goto LABEL_15;
              }
LABEL_46:
              __break(1u);
              return result;
            }
          }
        }
      }
LABEL_29:
      v7 = 0;
      v56 = 0;
      v55 = 0u;
      memset(v54, 0, sizeof(v54));
      v53 = 0u;
    }
    if ((_QWORD)v55)
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v53, (uint64_t)v45);
      outlined init with take of any PredicateExpression<Self.Output == B1>(v8, (uint64_t)v44);
      v21 = v46;
      v39 = v47;
      v38 = __swift_project_boxed_opaque_existential_1(v45, v46);
      v41 = &v31;
      v22 = *(_QWORD *)(v21 - 8);
      MEMORY[0x1E0C80A78](v38);
      v24 = (char *)&v31 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v44, (uint64_t)&v43);
      v25 = type metadata accessor for Optional();
      v26 = *(_QWORD *)(v25 - 8);
      MEMORY[0x1E0C80A78](v25);
      v28 = (char *)&v31 - v27;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
      v29 = swift_dynamicCast();
      v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56);
      if (v29)
      {
        v30(v28, 0, 1, v21);
        (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v24, v28, v21);
        v9 = dispatch thunk of static Equatable.== infix(_:_:)();
        (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
      }
      else
      {
        v30(v28, 1, 1, v21);
        (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v25);
        v9 = 0;
      }
      v3 = v35;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
      outlined destroy of Any?((uint64_t)v48, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of Any?((uint64_t)v49, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v50);
      result = outlined destroy of AttributedString._AttributeValue((uint64_t)v51);
      v8 = v36;
      v2 = v37;
      if ((v9 & 1) == 0)
        return 0;
      if (v7)
        continue;
      goto LABEL_12;
    }
    break;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v53);
LABEL_42:
  outlined destroy of Any?((uint64_t)v48, &demangling cache variable for type metadata for (Hashable & Sendable)?);
  outlined destroy of Any?((uint64_t)v49, &demangling cache variable for type metadata for (Hashable & Sendable)?);
  outlined destroy of AttributedString._AttributeValue((uint64_t)v50);
LABEL_43:
  outlined destroy of AttributedString._AttributeValue((uint64_t)v51);
  return 0;
}

{
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v44;
  char v45;
  BOOL v46;
  char v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  if (result == a2)
    return 1;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v51 = result;
  v2 = 0;
  v49 = result + 64;
  v3 = 1 << *(_BYTE *)(result + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(result + 64);
  v50 = (unint64_t)(v3 + 63) >> 6;
  while (1)
  {
    if (v5)
    {
      v56 = (v5 - 1) & v5;
      v57 = v2;
      v6 = __clz(__rbit64(v5)) | (v2 << 6);
      goto LABEL_24;
    }
    v7 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_73;
    }
    if (v7 >= v50)
      return 1;
    v8 = *(_QWORD *)(v49 + 8 * v7);
    v9 = v2 + 1;
    if (!v8)
    {
      v9 = v2 + 2;
      if (v2 + 2 >= v50)
        return 1;
      v8 = *(_QWORD *)(v49 + 8 * v9);
      if (!v8)
      {
        v9 = v2 + 3;
        if (v2 + 3 >= v50)
          return 1;
        v8 = *(_QWORD *)(v49 + 8 * v9);
        if (!v8)
          break;
      }
    }
LABEL_23:
    v56 = (v8 - 1) & v8;
    v57 = v9;
    v6 = __clz(__rbit64(v8)) + (v9 << 6);
LABEL_24:
    v11 = (uint64_t *)(*(_QWORD *)(result + 48) + 16 * v6);
    v12 = *v11;
    v13 = v11[1];
    v14 = (uint64_t *)(*(_QWORD *)(result + 56) + 80 * v6);
    v15 = *v14;
    v16 = v14[1];
    v17 = v14[2];
    v18 = v14[3];
    v19 = v14[5];
    v20 = v14[7];
    v54 = v14[6];
    v55 = v14[4];
    v21 = v14[8];
    v59 = v14[9];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v22 = v18;
    swift_bridgeObjectRetain();
    v60 = v19;
    swift_bridgeObjectRetain();
    v58 = v20;
    swift_bridgeObjectRetain();
    v23 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v13);
    LOBYTE(v18) = v24;
    swift_bridgeObjectRelease();
    if ((v18 & 1) == 0)
      goto LABEL_70;
    v61 = v16;
    v25 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 80 * v23);
    v26 = v25[1];
    v27 = v25[2];
    v29 = v25[3];
    v28 = v25[4];
    v30 = v25[5];
    v31 = v25[6];
    v32 = v25[7];
    v33 = v25[9];
    v53 = v25[8];
    if (v26)
    {
      if (!v61
        || (*v25 == v15 ? (v34 = v26 == v61) : (v34 = 0),
            !v34
         && (v35 = v25[7],
             v36 = v25[4],
             v37 = _stringCompareWithSmolCheck(_:_:expecting:)(),
             v28 = v36,
             v32 = v35,
             (v37 & 1) == 0)))
      {
LABEL_70:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 0;
      }
    }
    else if (v61)
    {
      goto LABEL_70;
    }
    if (v29)
    {
      if (!v22)
        goto LABEL_70;
      if (v27 != v17 || v29 != v22)
      {
        v39 = v32;
        v40 = v28;
        v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
        v28 = v40;
        v32 = v39;
        if ((v41 & 1) == 0)
          goto LABEL_70;
      }
    }
    else if (v22)
    {
      goto LABEL_70;
    }
    if (v30)
    {
      v42 = v59;
      if (!v60)
        goto LABEL_70;
      if (v28 != v55 || v30 != v60)
      {
        v44 = v32;
        v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
        v32 = v44;
        if ((v45 & 1) == 0)
          goto LABEL_70;
      }
    }
    else
    {
      v42 = v59;
      if (v60)
        goto LABEL_70;
    }
    if (v32)
    {
      if (!v58)
        goto LABEL_70;
      v46 = v31 == v54 && v32 == v58;
      if (!v46 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        goto LABEL_70;
    }
    else if (v58)
    {
      goto LABEL_70;
    }
    if (!v33)
    {
      if (v42)
        goto LABEL_70;
      goto LABEL_7;
    }
    if (!v42)
      goto LABEL_70;
    if (v53 == v21 && v33 == v42)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = v51;
      v5 = v56;
      v2 = v57;
    }
    else
    {
      v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = v51;
      v5 = v56;
      v2 = v57;
      if ((v48 & 1) == 0)
        return 0;
    }
  }
  v10 = v2 + 4;
  if (v2 + 4 >= v50)
    return 1;
  v8 = *(_QWORD *)(v49 + 8 * v10);
  if (v8)
  {
    v9 = v2 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    v9 = v10 + 1;
    if (__OFADD__(v10, 1))
      break;
    if (v9 >= v50)
      return 1;
    v8 = *(_QWORD *)(v49 + 8 * v9);
    ++v10;
    if (v8)
      goto LABEL_23;
  }
LABEL_73:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  char v16;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v12 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return 1;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return 1;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
          break;
      }
    }
LABEL_21:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    v15 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v11);
    result = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v11));
    if ((v16 & 1) == 0 || *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * result) != v15)
      return 0;
  }
  v14 = v12 + 3;
  if (v14 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_21;
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t *v21;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v12 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return 1;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return 1;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
          break;
      }
    }
LABEL_21:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    v15 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v11);
    v16 = (uint64_t *)(*(_QWORD *)(v3 + 56) + 16 * v11);
    v17 = *v16;
    v18 = v16[1];
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(v15);
    if ((v20 & 1) != 0)
    {
      v21 = (uint64_t *)(*(_QWORD *)(a2 + 56) + 16 * v19);
      result = *v21;
      if (*v21 == v17 && v21[1] == v18)
        continue;
      result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) != 0)
        continue;
    }
    return 0;
  }
  v14 = v12 + 3;
  if (v14 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_21;
  }
LABEL_31:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t *v21;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v12 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return 1;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return 1;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
          break;
      }
    }
LABEL_21:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    v15 = *(_DWORD *)(*(_QWORD *)(v3 + 48) + 4 * v11);
    v16 = (uint64_t *)(*(_QWORD *)(v3 + 56) + 16 * v11);
    v17 = *v16;
    v18 = v16[1];
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(v15);
    if ((v20 & 1) != 0)
    {
      v21 = (uint64_t *)(*(_QWORD *)(a2 + 56) + 16 * v19);
      result = *v21;
      if (*v21 == v17 && v21[1] == v18)
        continue;
      result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) != 0)
        continue;
    }
    return 0;
  }
  v14 = v12 + 3;
  if (v14 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_21;
  }
LABEL_31:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  _QWORD *v24;
  uint64_t v25;
  char v27;
  int64_t v28;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v28 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v10 = v9 | (v4 << 6);
      goto LABEL_23;
    }
    v11 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v11 >= v28)
      return 1;
    v12 = *(_QWORD *)(v5 + 8 * v11);
    ++v4;
    if (!v12)
    {
      v4 = v11 + 1;
      if (v11 + 1 >= v28)
        return 1;
      v12 = *(_QWORD *)(v5 + 8 * v4);
      if (!v12)
      {
        v4 = v11 + 2;
        if (v11 + 2 >= v28)
          return 1;
        v12 = *(_QWORD *)(v5 + 8 * v4);
        if (!v12)
          break;
      }
    }
LABEL_22:
    v8 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v4 << 6);
LABEL_23:
    v14 = 16 * v10;
    v15 = (uint64_t *)(*(_QWORD *)(v3 + 48) + v14);
    v16 = *v15;
    v17 = v15[1];
    v18 = (uint64_t *)(*(_QWORD *)(v3 + 56) + v14);
    v20 = *v18;
    v19 = v18[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17);
    v23 = v22;
    result = swift_bridgeObjectRelease();
    if ((v23 & 1) == 0)
    {
LABEL_34:
      swift_bridgeObjectRelease();
      return 0;
    }
    v24 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 16 * v21);
    v25 = v24[1];
    if (v25)
    {
      if (!v19)
        return 0;
      if (*v24 == v20 && v25 == v19)
      {
        result = swift_bridgeObjectRelease();
      }
      else
      {
        v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
        result = swift_bridgeObjectRelease();
        if ((v27 & 1) == 0)
          return 0;
      }
    }
    else if (v19)
    {
      goto LABEL_34;
    }
  }
  v13 = v11 + 3;
  if (v13 >= v28)
    return 1;
  v12 = *(_QWORD *)(v5 + 8 * v13);
  if (v12)
  {
    v4 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    v4 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v4 >= v28)
      return 1;
    v12 = *(_QWORD *)(v5 + 8 * v4);
    ++v13;
    if (v12)
      goto LABEL_22;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t *v20;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v12 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return 1;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return 1;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
          break;
      }
    }
LABEL_21:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    v15 = (uint64_t *)(*(_QWORD *)(v3 + 56) + 16 * v11);
    v16 = *v15;
    v17 = v15[1];
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v11));
    if ((v19 & 1) != 0)
    {
      v20 = (uint64_t *)(*(_QWORD *)(a2 + 56) + 16 * v18);
      result = *v20;
      if (*v20 == v16 && v20[1] == v17)
        continue;
      result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) != 0)
        continue;
    }
    return 0;
  }
  v14 = v12 + 3;
  if (v14 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_21;
  }
LABEL_31:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t *v19;
  uint64_t v20;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    v10 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v11 = v10 | (v4 << 6);
LABEL_23:
    v15 = (uint64_t *)(*(_QWORD *)(v3 + 56) + 16 * v11);
    v17 = *v15;
    v16 = v15[1];
    result = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v11));
    if ((v18 & 1) == 0)
      return 0;
    v19 = (uint64_t *)(*(_QWORD *)(a2 + 56) + 16 * result);
    v20 = v19[1];
    if (v20)
    {
      if (!v16)
        return 0;
      result = *v19;
      if (*v19 != v17 || v20 != v16)
      {
        result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0)
          return 0;
      }
    }
    else if (v16)
    {
      return 0;
    }
  }
  v12 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_34;
  }
  if (v12 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v12);
  ++v4;
  if (v13)
    goto LABEL_22;
  v4 = v12 + 1;
  if (v12 + 1 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v4);
  if (v13)
    goto LABEL_22;
  v4 = v12 + 2;
  if (v12 + 2 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v4);
  if (v13)
  {
LABEL_22:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
    goto LABEL_23;
  }
  v14 = v12 + 3;
  if (v14 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_22;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_22;
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t outlined init with copy of (Hashable & Sendable)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Hashable & Sendable)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of (key: String, value: AttributedString._AttributeValue)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t openEquatable #1 <A>(_:) in static AttributedString._AttributeValue.__equalAttributes(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int v13;
  void (*v14)(char *, uint64_t, uint64_t, uint64_t);
  char v15;
  _BYTE v18[40];

  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = &v18[-v7 - 8];
  v9 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v10);
  v12 = &v18[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a2, (uint64_t)v18);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
  v13 = swift_dynamicCast();
  v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  if (v13)
  {
    v14(v8, 0, 1, a3);
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v8, a3);
    v15 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, a3);
  }
  else
  {
    v14(v8, 1, 1, a3);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v15 = 0;
  }
  return v15 & 1;
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  const void *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v9 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          result = v14 + 72 * v3;
          v15 = (const void *)(v14 + 72 * v6);
          if (v3 != v6 || (v3 = v6, result >= (unint64_t)v15 + 72))
          {
            result = (unint64_t)memmove((void *)result, v15, 0x48uLL);
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v16 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v17 = *v16;
    v18 = (-1 << v3) - 1;
  }
  else
  {
    v16 = (uint64_t *)(v4 + 8 * (result >> 6));
    v18 = *v16;
    v17 = (-1 << result) - 1;
  }
  *v16 = v18 & v17;
  v19 = *(_QWORD *)(a2 + 16);
  v20 = __OFSUB__(v19, 1);
  v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v21;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v9 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v9 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (16 * v3 != 16 * v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  Swift::Int v11;
  unint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  unint64_t v17;
  __int128 *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v11 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v12 = v11 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8)
            goto LABEL_5;
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          v13 = *(_QWORD *)(a2 + 48);
          v14 = (_OWORD *)(v13 + 16 * v3);
          v15 = (_OWORD *)(v13 + 16 * v6);
          if (v3 != v6 || v14 >= v15 + 1)
            *v14 = *v15;
          v16 = *(_QWORD *)(a2 + 56);
          v17 = v16 + 40 * v3;
          v18 = (__int128 *)(v16 + 40 * v6);
          if (v3 != v6 || (v3 = v6, v17 >= (unint64_t)v18 + 40))
          {
            v9 = *v18;
            v10 = v18[1];
            *(_QWORD *)(v17 + 32) = *((_QWORD *)v18 + 4);
            *(_OWORD *)v17 = v9;
            *(_OWORD *)(v17 + 16) = v10;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v20 = *v19;
    v21 = (-1 << v3) - 1;
  }
  else
  {
    v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    v21 = *v19;
    v20 = (-1 << result) - 1;
  }
  *v19 = v21 & v20;
  v22 = *(_QWORD *)(a2 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 48);
        v10 = (_QWORD *)(v9 + 8 * v6);
        result = static Hasher._hash(seed:_:)();
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            v14 = (_QWORD *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1)
              *v14 = *v10;
            v15 = *(_QWORD *)(a2 + 56);
            v16 = (_QWORD *)(v15 + 8 * v3);
            v17 = (_QWORD *)(v15 + 8 * v6);
            if (v3 != v6 || (v3 = v6, v16 >= v17 + 1))
            {
              *v16 = *v17;
              v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt v9;
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v9);
        result = Hasher._finalize()();
        v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_BYTE *)(v11 + v3);
          v13 = (_BYTE *)(v11 + v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_QWORD *)(v14 + 8 * v3);
          v16 = (_QWORD *)(v14 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  Swift::Int v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v10 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8)
            goto LABEL_5;
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(a2 + 48);
          v13 = (_OWORD *)(v12 + 16 * v3);
          v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1)
            *v13 = *v14;
          v15 = *(_QWORD *)(a2 + 56);
          v16 = (_OWORD *)(v15 + 32 * v3);
          v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v16 >= v17 + 2))
          {
            v9 = v17[1];
            *v16 = *v17;
            v16[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  Swift::Int v11;
  unint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v11 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v12 = v11 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8)
            goto LABEL_5;
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          v13 = *(_QWORD *)(a2 + 48);
          v14 = (_OWORD *)(v13 + 16 * v3);
          v15 = (_OWORD *)(v13 + 16 * v6);
          if (v3 != v6 || v14 >= v15 + 1)
            *v14 = *v15;
          v16 = *(_QWORD *)(a2 + 56);
          v17 = (__int128 *)(v16 + 48 * v3);
          v18 = (__int128 *)(v16 + 48 * v6);
          if (48 * v3 < (uint64_t)(48 * v6) || v17 >= v18 + 3 || (v19 = v3 == v6, v3 = v6, !v19))
          {
            v9 = *v18;
            v10 = v18[2];
            v17[1] = v18[1];
            v17[2] = v10;
            *v17 = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 48);
        v10 = (_QWORD *)(v9 + 8 * v6);
        result = static Hasher._hash(seed:_:)();
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            v14 = (_QWORD *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1)
              *v14 = *v10;
            v15 = *(_QWORD *)(a2 + 56);
            v16 = (_OWORD *)(v15 + 16 * v3);
            v17 = (_OWORD *)(v15 + 16 * v6);
            if (v3 != v6 || (v3 = v6, v16 >= v17 + 1))
            {
              *v16 = *v17;
              v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  const void *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v9 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          result = v14 + 80 * v3;
          v15 = (const void *)(v14 + 80 * v6);
          if (v3 != v6 || (v3 = v6, result >= (unint64_t)v15 + 80))
          {
            result = (unint64_t)memmove((void *)result, v15, 0x50uLL);
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v16 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v17 = *v16;
    v18 = (-1 << v3) - 1;
  }
  else
  {
    v16 = (uint64_t *)(v4 + 8 * (result >> 6));
    v18 = *v16;
    v17 = (-1 << result) - 1;
  }
  *v16 = v18 & v17;
  v19 = *(_QWORD *)(a2 + 16);
  v20 = __OFSUB__(v19, 1);
  v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v21;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v9);
        result = Hasher._finalize()();
        v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_QWORD *)(v11 + 8 * v3);
          v13 = (_QWORD *)(v11 + 8 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_QWORD *)(v14 + 8 * v3);
          v16 = (_QWORD *)(v14 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  void *v10;
  id v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = *(void **)(*(_QWORD *)(a2 + 48) + 8 * v6);
        static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
        Hasher.init(_seed:)();
        v11 = v10;
        String.hash(into:)();
        v12 = Hasher._finalize()();

        result = swift_bridgeObjectRelease();
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_QWORD *)(v14 + 8 * v3);
          v16 = (_QWORD *)(v14 + 8 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (_OWORD *)(v17 + 32 * v3);
          v19 = (_OWORD *)(v17 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 2))
          {
            v9 = v19[1];
            *v18 = *v19;
            v18[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  Swift::UInt8 v10;
  Swift::Int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  int64_t v20;
  unint64_t v21;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      while (1)
      {
        v9 = 24 * v6;
        v10 = *(_BYTE *)(*(_QWORD *)(a2 + 48) + 24 * v6 + 16);
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Hasher._combine(_:)(v10);
        v11 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v12 = v11 & v7;
        if (v3 >= (uint64_t)v8)
          break;
        if (v12 < v8)
          goto LABEL_11;
LABEL_12:
        v13 = *(_QWORD *)(a2 + 48);
        v14 = v13 + 24 * v3;
        v15 = (__int128 *)(v13 + v9);
        if (24 * v3 < v9 || v14 >= (unint64_t)v15 + 24 || v3 != v6)
        {
          v16 = *v15;
          *(_QWORD *)(v14 + 16) = *((_QWORD *)v15 + 2);
          *(_OWORD *)v14 = v16;
        }
        v17 = *(_QWORD *)(a2 + 56);
        v18 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>)
                                    - 8)
                        + 72);
        v19 = v18 * v3;
        result = v17 + v18 * v3;
        v20 = v18 * v6;
        v21 = v17 + v18 * v6 + v18;
        if (v19 < v20 || result >= v21)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v3 = v6;
          if (v19 == v20)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_22;
      }
      if (v12 < v8)
        goto LABEL_6;
LABEL_11:
      if (v3 < (uint64_t)v12)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_22:
    v23 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v24 = *v23;
    v25 = (-1 << v3) - 1;
  }
  else
  {
    v23 = (uint64_t *)(v4 + 8 * (result >> 6));
    v25 = *v23;
    v24 = (-1 << result) - 1;
  }
  *v23 = v25 & v24;
  v26 = *(_QWORD *)(a2 + 16);
  v27 = __OFSUB__(v26, 1);
  v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v28;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t URLQueryItem.init(name:value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  *a5 = a1;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

NSFunctionExpression *CreateFunctionExpression(NSString *a1, void *a2)
{
  NSString *p_super;
  uint64_t v4;
  uint64_t v5;
  int v6;
  NSMutableString *v7;
  const __CFString *v8;
  const char *v9;
  unint64_t v10;
  NSObject *v11;
  NSString *v13;
  void *v14;
  uint64_t v15;
  const __CFString *v16;
  uint8_t buf[4];
  NSString *v18;
  uint64_t v19;

  p_super = a1;
  v19 = *MEMORY[0x1E0C80C00];
  v4 = objc_msgSend(CFSTR("tokenize"), "compare:options:", a1, 1);
  v5 = objc_msgSend(a2, "count");
  if (v4)
  {
    if (v5 != 1 || -[NSString hasSuffix:](p_super, "hasSuffix:", CFSTR(":")))
    {
      v6 = 0;
      goto LABEL_9;
    }
    v7 = -[NSString initWithString:]([NSMutableString alloc], "initWithString:", p_super);
    p_super = &v7->super;
    v8 = CFSTR(":");
  }
  else
  {
    if (v5 != 2)
    {
      v14 = (void *)MEMORY[0x1E0C99DA0];
      v15 = *MEMORY[0x1E0C99778];
      v16 = CFSTR("Invalid number of parameters to tokenize");
      goto LABEL_22;
    }
    v7 = -[NSString initWithString:]([NSMutableString alloc], "initWithString:", p_super);
    p_super = &v7->super;
    v8 = CFSTR(":using:");
  }
  -[NSMutableString appendString:](v7, "appendString:", v8);
  v6 = 1;
LABEL_9:
  v9 = NSSelectorFromString(p_super);
  objc_opt_self();
  if (objc_msgSend(*(id *)_CFPredicatePolicyData(), "objectForKey:", p_super))
  {
    LOBYTE(v10) = 0;
    if (!v9)
      goto LABEL_19;
  }
  else
  {
    objc_opt_self();
    v11 = _NSOSLog();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 138543362;
      v18 = p_super;
      _os_log_fault_impl(&dword_1817D9000, v11, OS_LOG_TYPE_FAULT, "NSPredicate: Use of '%{public}@' as an NSExpression function is forbidden.", buf, 0xCu);
    }
    objc_opt_self();
    v10 = ((unint64_t)_CFPredicatePolicyData_getFlags() >> 3) & 1;
    if (!v9)
      goto LABEL_19;
  }
  if (v10 & 1 | ((objc_opt_respondsToSelector() & 1) == 0))
  {
LABEL_19:
    v13 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Unable to parse function name '%@' into supported selector (%s) "), p_super, sel_getName(v9));
    if (v6)

    v14 = (void *)MEMORY[0x1E0C99DA0];
    v15 = *MEMORY[0x1E0C99778];
    v16 = (const __CFString *)v13;
LABEL_22:
    objc_exception_throw((id)objc_msgSend(v14, "exceptionWithName:reason:userInfo:", v15, v16, 0));
  }
  if (v6)

  return -[NSFunctionExpression initWithSelector:argumentArray:]([NSFunctionExpression alloc], "initWithSelector:argumentArray:", v9, a2);
}

uint64_t String.Encoding.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

void Measurement.value.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

_OWORD *assignWithTake for Locale(_OWORD *a1, _OWORD *a2)
{
  swift_unknownObjectRelease();
  *a1 = *a2;
  return a1;
}

double protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return JSONDecoderImpl.KeyedContainer.decode(_:forKey:)(a1, *(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 16), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

double JSONDecoderImpl.KeyedContainer.decode(_:forKey:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  double v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;

  v37 = a3;
  v35 = a2;
  v11 = type metadata accessor for Optional();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v34 - v13;
  v15 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(_QWORD *)(a4 + 16) && (v17 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16), (v18 & 1) != 0))
  {
    v19 = *(_QWORD *)(a4 + 56) + 24 * v17;
    v20 = *(_QWORD *)v19;
    v21 = *(_QWORD *)(v19 + 8);
    HIDWORD(v34) = *(unsigned __int8 *)(v19 + 16);
    swift_bridgeObjectRelease();
    v22 = *(_QWORD *)(a5 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v14, a1, a5);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v14, 0, 1, a5);
    v23 = v36;
    specialized JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(v20, v21, HIDWORD(v34), v37, (uint64_t)v14, a5, a6);
    if (!v23)
      v6 = v24;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  else
  {
    swift_bridgeObjectRelease();
    v25 = type metadata accessor for DecodingError();
    swift_allocError();
    v27 = v26;
    v36 = (char *)v26
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context))
                 + 48);
    v27[3] = a5;
    v27[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v27);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 16))(boxed_opaque_existential_1, a1, a5);
    _CodingPathNode.path.getter(v37);
    v38 = 0;
    v39 = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    v38 = 0xD00000000000001DLL;
    v39 = 0x800000018230D870;
    v29._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    v30._countAndFlagsBits = 2238496;
    v30._object = (void *)0xE300000000000000;
    String.append(_:)(v30);
    v31._countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32._countAndFlagsBits = 3025186;
    v32._object = (void *)0xE300000000000000;
    String.append(_:)(v32);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v27, *MEMORY[0x1E0DEC448], v25);
    swift_willThrow();
  }
  return v6;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance DateInterval.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x6E6F697461727564;
  else
    return 0x7472617473;
}

uint64_t storeEnumTagSinglePayload for DateInterval.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1818A4F1C + 4 * byte_18206C405[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1818A4F50 + 4 * byte_18206C400[v4]))();
}

uint64_t sub_1818A4F50(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1818A4F58(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1818A4F60);
  return result;
}

uint64_t sub_1818A4F6C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1818A4F74);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1818A4F78(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1818A4F80(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned UnsafeRawPointer, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32))(a2, a3, a4, a5);
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return thunk for @callee_guaranteed (@unowned UnsafeRawPointer, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(a1, a2, a3, a4, *(uint64_t (**)(void))(v4 + 16));
}

uint64_t partial apply for closure #1 in NSData.subscript.getter(uint64_t result, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;

  v5 = (_QWORD *)v4[2];
  v6 = *v5 - a2;
  if (__OFSUB__(*v5, a2))
  {
    __break(1u);
    goto LABEL_8;
  }
  v8 = v4[3];
  v7 = (_BYTE *)v4[4];
  *v5 = v6;
  if (v8 < a2)
    return result;
  if (__OFSUB__(v8, a2))
  {
LABEL_8:
    __break(1u);
    return result;
  }
  if (v8 - a2 < a3)
  {
    *v7 = *(_BYTE *)(result + v6);
    *a4 = 1;
  }
  return result;
}

uint64_t _sSo6NSDataC10FoundationEys5UInt8VSicigySV_So8_NSRangeVSpy10ObjectiveC8ObjCBoolVGtXEfU_TA_0(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v4;

  return closure #1 in NSData.subscript.getter(a1, a2, a3, a4, *(_QWORD **)(v4 + 16), *(_QWORD *)(v4 + 24), *(_BYTE **)(v4 + 32));
}

uint64_t protocol witness for UnkeyedDecodingContainer.count.getter in conformance JSONDecoderImpl.UnkeyedContainer()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for NSNotificationCenter.Publisher(_QWORD *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  a1[2] = *(_QWORD *)(a2 + 16);
  v5 = v3;
  v6 = v4;
  swift_unknownObjectRetain();
  return a1;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Locale.Current()
{
  lazy protocol witness table accessor for type Locale.Current and conformance Locale.Current();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Locale.Current()
{
  lazy protocol witness table accessor for type Locale.Current and conformance Locale.Current();
  return RawRepresentable<>.encode(to:)();
}

CFCharacterSetRef static CharacterSet.decimalDigits.getter@<X0>(CFCharacterSetRef *a1@<X8>)
{
  CFCharacterSetRef result;
  CFCharacterSetRef v3;

  result = CFCharacterSetGetPredefined(kCFCharacterSetDecimalDigit);
  if (result)
  {
    v3 = result;
    type metadata accessor for __CharacterSetStorage();
    result = (CFCharacterSetRef)swift_allocObject();
    *((_QWORD *)result + 2) = v3;
    *((_BYTE *)result + 24) = 0;
    *a1 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void (*URLComponents.path.getter())(char *, _QWORD)
{
  return URLComponents._URLComponents.path.getter();
}

uint64_t DateComponents.year.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t partial apply for closure #2 in String.serializedForJSON(withoutEscapingSlashes:)(void *a1, int64_t a2)
{
  uint64_t v2;

  return closure #2 in String.serializedForJSON(withoutEscapingSlashes:)(a1, a2, *(uint64_t **)(v2 + 16));
}

uint64_t closure #2 in String.serializedForJSON(withoutEscapingSlashes:)(void *a1, int64_t a2, uint64_t *a3)
{
  uint64_t v4;
  int64_t v5;
  uint64_t result;

  v4 = *a3;
  v5 = *(_QWORD *)(*a3 + 16);
  if (!v5)
    return 0;
  if (a1)
  {
    if (v5 <= a2)
    {
      if (v4 + 32 >= (unint64_t)a1 + v5 || v4 + 32 + v5 <= (unint64_t)a1)
      {
        memcpy(a1, (const void *)(v4 + 32), v5);
        return *(_QWORD *)(*a3 + 16);
      }
      goto LABEL_12;
    }
    __break(1u);
  }
  __break(1u);
LABEL_12:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

Foundation::DateInterval __swiftcall DateInterval.init(start:end:)(Foundation::Date start, Foundation::Date end)
{
  double *v2;
  double *v3;
  double *v4;
  double v5;
  double v6;
  Foundation::DateInterval result;

  v5 = *v2;
  v6 = *v3;
  if (*v3 < *v2)
  {
    __break(1u);
  }
  else
  {
    v6 = v6 - v5;
    *v4 = v5;
    v4[1] = v6;
  }
  result.duration = v6;
  result.start = *(Foundation::Date *)&v5;
  return result;
}

void _NSXPCSerializationAddFloat(uint64_t a1, float a2)
{
  _reserveSpace(a1, 1);
  *(_BYTE *)(*(_QWORD *)(a1 + 8216) + (*(_QWORD *)(a1 + 8200))++) = 34;
  _reserveSpace(a1, 4);
  *(float *)(*(_QWORD *)(a1 + 8216) + *(_QWORD *)(a1 + 8200)) = a2;
  *(_QWORD *)(a1 + 8200) += 4;
}

uint64_t URL.scheme.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  id v6;
  id v7;
  void *v8;

  v1 = *(void **)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  result = _foundation_swift_url_feature_enabled();
  if (!(_DWORD)result)
  {
    v7 = objc_msgSend(v1, sel_scheme);
    if (v7)
    {
      v8 = v7;
      v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);

      return (uint64_t)v6;
    }
    return 0;
  }
  if (v2)
  {
    if (*(_BYTE *)(v2 + 48) != 1)
      goto LABEL_6;
    if (!v3)
      return 0;
    if ((*(_BYTE *)(v3 + 48) & 1) == 0)
    {
LABEL_6:
      v5 = String.subscript.getter();
      v6 = (id)MEMORY[0x186DA4634](v5);
      swift_bridgeObjectRelease();
      return (uint64_t)v6;
    }
    return 0;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for JSONDecoder()
{
  uint64_t result;

  result = type metadata singleton initialization cache for JSONDecoder;
  if (!type metadata singleton initialization cache for JSONDecoder)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t static Set._unconditionallyBridgeFromObjectiveC(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  unint64_t result;
  unint64_t v4;

  if (!a1)
    return MEMORY[0x1E0DEE9E8];
  v4 = 0;
  static Set._forceBridgeFromObjectiveC(_:result:)(a1, &v4, a2, a3);
  result = v4;
  if (!v4)
    __break(1u);
  return result;
}

unint64_t static Set._forceBridgeFromObjectiveC(_:result:)(void *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v9;
  id v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  char isEscapingClosureAtFileLocation;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t);
  void *v26;
  uint64_t (*v27)();
  uint64_t v28;
  uint64_t v29;
  id v30;

  swift_bridgeObjectRelease();
  swift_unknownObjectRetain();
  result = static Set._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (result)
  {
    *a2 = result;
    return result;
  }
  if ((_swift_isClassOrObjCExistentialType() & 1) != 0)
  {
    result = (unint64_t)objc_msgSend(a1, sel_copyWithZone_, 0);
    *a2 = ~(result >> 1) & 0x4000000000000000 | result;
    return result;
  }
  v9 = MEMORY[0x1E0DEA968];
  if (a3 != MEMORY[0x1E0DEA968])
  {
    v10 = objc_msgSend(a1, sel_count);
    if (v10)
    {
      type metadata accessor for _SetStorage();
      v11 = static _SetStorage.allocate(capacity:)();
    }
    else
    {
      v11 = MEMORY[0x1E0DEE9E8];
    }
    v29 = v11;
    v30 = v10;
    v17 = (_QWORD *)swift_allocObject();
    v17[2] = a3;
    v17[3] = a4;
    v17[4] = &v29;
    v18 = swift_allocObject();
    *(_QWORD *)(v18 + 16) = partial apply for closure #2 in static Set._forceBridgeFromObjectiveC(_:result:);
    *(_QWORD *)(v18 + 24) = v17;
    v27 = partial apply for closure #1 in NSRunLoop.schedule(options:_:);
    v28 = v18;
    v23 = MEMORY[0x1E0C809B0];
    v24 = 1107296256;
    v25 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
    v26 = &block_descriptor_4;
    v19 = _Block_copy(&v23);
    swift_retain();
    swift_release();
    objc_msgSend(a1, sel_enumerateObjectsUsingBlock_, v19);
    _Block_release(v19);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    result = swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      v16 = v29;
      v21 = v30;
      v22 = *(id *)(v29 + 16);
      result = swift_release();
      if (v22 == v21)
        goto LABEL_13;
    }
    __break(1u);
LABEL_17:
    __break(1u);
    return result;
  }
  objc_msgSend(a1, sel_count);
  v29 = Set.init(minimumCapacity:)();
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = v9;
  v12[3] = a4;
  v12[4] = &v29;
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = partial apply for closure #1 in static Set._forceBridgeFromObjectiveC(_:result:);
  *(_QWORD *)(v13 + 24) = v12;
  v27 = closure #1 in NSRunLoop.schedule(options:_:)partial apply;
  v28 = v13;
  v23 = MEMORY[0x1E0C809B0];
  v24 = 1107296256;
  v25 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  v26 = &block_descriptor_13;
  v14 = _Block_copy(&v23);
  swift_retain();
  swift_release();
  objc_msgSend(a1, sel_enumerateObjectsUsingBlock_, v14);
  _Block_release(v14);
  v15 = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v15 & 1) != 0)
    goto LABEL_17;
  v16 = v29;
  result = swift_release();
LABEL_13:
  *a2 = v16;
  return result;
}

uint64_t _CalendarICU.__deallocating_deinit()
{
  ucal_close();
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

NSDateInterval __swiftcall DateInterval._bridgeToObjectiveC()()
{
  double *v0;
  double v1;
  double v2;
  id v3;
  id v4;
  id v5;

  v1 = *v0;
  v2 = v0[1];
  v3 = objc_allocWithZone((Class)NSDateInterval);
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D68]), sel_initWithTimeIntervalSinceReferenceDate_, v1);
  v5 = objc_msgSend(v3, sel_initWithStartDate_duration_, v4, v2);

  return (NSDateInterval)v5;
}

uint64_t PropertyListDecoder.init()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 16) = MEMORY[0x1E0DEE9E0];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<()>._Buffer);
  v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v0 + 24) = v1;
  return v0;
}

void CharacterSet.formUnion(_:)(uint64_t *a1)
{
  CharacterSet.formUnion(_:)(a1, (void (*)(void *, id))MEMORY[0x1E0C98348]);
}

uint64_t _endElementNs(uint64_t result, void *key, char *__s, void *a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  int v10;
  const __CFString *Value;
  size_t v12;
  const __CFString *v13;
  const __CFString *v14;
  const __CFString *v15;
  const __CFString *v16;
  const __CFString *v17;
  void *v18;
  uint64_t v19;
  const __CFString *v20;

  v7 = result;
  if (result && *(_BYTE *)(result + 120))
    return result;
  v8 = *(void **)(result + 8);
  v9 = *(_QWORD *)(result + 40);
  if (__s)
  {
    v10 = strlen(__s);
    if (v10)
    {
      Value = 0;
      if (key)
      {
        if ((v9 & 4) != 0)
        {
          Value = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(v7 + 64), key);
          if (!Value)
            Value = (const __CFString *)__SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(v7 + 64), (char *)key);
        }
      }
      v12 = strlen((const char *)key);
      v13 = (const __CFString *)_cachedColonSeparatedStringFromPrefixAndSuffix(__s, v10, key, v12, v7);
LABEL_13:
      v14 = v13;
      goto LABEL_15;
    }
  }
  if (key)
  {
    Value = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(v7 + 64), key);
    v14 = Value;
    if (Value)
      goto LABEL_15;
    v13 = (const __CFString *)__SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(v7 + 64), (char *)key);
    Value = v13;
    goto LABEL_13;
  }
  Value = 0;
  v14 = 0;
LABEL_15:
  v15 = 0;
  if (a4)
  {
    if ((v9 & 4) != 0)
    {
      v15 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(v7 + 64), a4);
      if (!v15)
        v15 = (const __CFString *)__SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(v7 + 64), (char *)a4);
    }
  }
  if ((*(_BYTE *)(v7 + 43) & 0x40) != 0)
  {
    if ((v9 & 4) != 0)
    {
      if (v15)
        v16 = v15;
      else
        v16 = &stru_1E0F56070;
      if (v14)
        v17 = v14;
      else
        v17 = &stru_1E0F56070;
      v18 = v8;
      v19 = v7;
      v20 = Value;
    }
    else
    {
      v18 = v8;
      v19 = v7;
      v20 = v14;
      v16 = 0;
      v17 = 0;
    }
    objc_msgSend(v18, "parser:didEndElement:namespaceURI:qualifiedName:", v19, v20, v16, v17);
  }
  return objc_msgSend((id)v7, "_popNamespaces");
}

void _startElementNs(uint64_t a1, void *key, char *__s, void *a4, int a5, uint64_t a6, int a7, int a8, uint64_t a9)
{
  size_t v16;
  size_t v17;
  size_t v18;
  const __CFString *v19;
  char v20;
  const __CFString *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  const __CFString *v31;
  const __CFString *v32;
  size_t v33;
  uint64_t v34;
  char *v35;
  const __CFString *v36;
  const __CFString *v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  const void *v42;
  size_t v43;
  size_t v44;
  size_t v45;
  void *v46;
  const void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  size_t v52;
  uint64_t v53;
  char *v54;
  const __CFString *v55;
  const __CFString *v56;
  id v57;
  void *v58;
  id v59;
  id v60;
  const __CFString *v61;
  const __CFString *v62;
  const __CFString *v63;
  uint64_t v64;
  uint64_t v65;
  CFStringRef v66;
  void *v67;
  const __CFString *v68;
  const __CFString *v69;
  id v70;
  const __CFString *Value;
  const __CFString **v72;
  void *v73;
  uint64_t v74;
  id v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  if (a1 && *(_BYTE *)(a1 + 120))
    return;
  v70 = *(id *)(a1 + 8);
  v74 = *(_QWORD *)(a1 + 40);
  if (__s)
  {
    v16 = strlen(__s);
    if (v16)
    {
      v17 = v16;
      Value = 0;
      if (key)
      {
        if ((v74 & 4) != 0)
        {
          Value = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), key);
          if (!Value)
            Value = (const __CFString *)__SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(a1 + 64), (char *)key);
        }
      }
      v18 = strlen((const char *)key);
      v19 = (const __CFString *)_cachedColonSeparatedStringFromPrefixAndSuffix(__s, v17, key, v18, a1);
      goto LABEL_14;
    }
  }
  if (!key)
  {
    Value = 0;
    v19 = 0;
LABEL_14:
    v20 = v74;
    goto LABEL_15;
  }
  v19 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), key);
  v20 = v74;
  Value = v19;
  if (!v19)
  {
    v19 = (const __CFString *)__SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(a1 + 64), (char *)key);
    Value = v19;
  }
LABEL_15:
  v69 = v19;
  v21 = 0;
  if (a4)
  {
    if ((v20 & 4) != 0)
    {
      v21 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), a4);
      if (!v21)
        v21 = (const __CFString *)__SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(a1 + 64), (char *)a4);
    }
  }
  v68 = v21;
  v22 = a7 + a5;
  if (a7 + a5 < 0)
  {
    v66 = CFStringCreateWithFormat(0, 0, CFSTR("*** attempt to create a temporary id buffer which is too large or with a negative count (%lu) -- possibly data is corrupt"), 2 * v22);
    v67 = (void *)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v66, 0);
    CFRelease(v66);
    objc_exception_throw(v67);
  }
  v72 = &v68;
  if (v22)
    v23 = 2 * v22;
  else
    v23 = 1;
  MEMORY[0x1E0C80A78](v23);
  v25 = (char *)&v68 - v24;
  v78 = 0;
  if (v26 >= 0x101)
  {
    v25 = (char *)_CFCreateArrayStorage();
    v73 = v25;
  }
  else
  {
    v73 = 0;
  }
  v76 = &v25[8 * v22];
  v77 = v25;
  if (!v22)
  {
    v75 = 0;
    goto LABEL_55;
  }
  if ((v20 & 8) != 0)
    v75 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", a5);
  else
    v75 = 0;
  if (!a5)
  {
LABEL_55:
    v28 = 0;
    if ((v20 & 8) == 0)
      goto LABEL_57;
    goto LABEL_56;
  }
  v27 = 0;
  v28 = 0;
  v29 = 2 * a5;
  do
  {
    v30 = *(char **)(a6 + 8 * v27);
    if (v30)
    {
      if ((v20 & 8) != 0)
      {
        v31 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), *(const void **)(a6 + 8 * v27));
        if (!v31)
          v31 = (const __CFString *)__SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(a1 + 64), v30);
      }
      else
      {
        v31 = 0;
      }
      v33 = strlen(*(const char **)(a6 + 8 * v27));
      v32 = (const __CFString *)_cachedColonSeparatedStringFromPrefixAndSuffix("xmlns", 5uLL, *(const void **)(a6 + 8 * v27), v33, a1);
    }
    else
    {
      v31 = &stru_1E0F56070;
      v32 = CFSTR("xmlns");
    }
    v34 = a6 + 8 * v27;
    v35 = *(char **)(v34 + 8);
    if (!v35)
    {
      v37 = &stru_1E0F56070;
      if ((v20 & 8) == 0)
        goto LABEL_50;
LABEL_49:
      objc_msgSend(v75, "setObject:forKey:", v37, v31, v68);
      goto LABEL_50;
    }
    v36 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), *(const void **)(v34 + 8));
    if (!v36)
      v36 = (const __CFString *)__SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(a1 + 64), v35);
    if (v36)
      v37 = v36;
    else
      v37 = &stru_1E0F56070;
    if ((v20 & 8) != 0)
      goto LABEL_49;
LABEL_50:
    if ((v20 & 4) == 0)
    {
      *(_QWORD *)&v77[8 * v28] = v32;
      *(_QWORD *)&v76[8 * v28++] = v37;
    }
    v27 += 2;
  }
  while (v27 < v29);
  if ((v20 & 8) != 0)
LABEL_56:
    objc_msgSend((id)a1, "_pushNamespaces:", v75, v68);
LABEL_57:

  if (a7)
  {
    v38 = 0;
    v39 = 5 * a7;
    while (1)
    {
      v40 = *(char **)(a9 + 8 * v38);
      if (v40)
        break;
LABEL_81:
      v38 += 5;
      if (v38 >= v39)
        goto LABEL_82;
    }
    v41 = a9 + 8 * v38;
    v42 = *(const void **)(v41 + 8);
    if (v42)
    {
      v43 = strlen(*(const char **)(v41 + 8));
      if (v43)
      {
        v44 = v43;
        v45 = strlen(v40);
        v46 = _cachedColonSeparatedStringFromPrefixAndSuffix(v42, v44, v40, v45, a1);
        goto LABEL_65;
      }
    }
    v47 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), v40);
    if (!v47)
    {
      v46 = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(a1 + 64), v40);
LABEL_65:
      v47 = v46;
    }
    v48 = a9 + 8 * v38;
    v49 = *(_QWORD *)(v48 + 24);
    if (v49 && (v50 = *(_QWORD *)(v48 + 32)) != 0 && (v51 = v50 - v49, v50 != v49))
    {
      MEMORY[0x1E0C80A78](v51 + 1);
      v54 = (char *)&v68 - v53;
      if (v51 >= 128)
        v54 = (char *)malloc_type_malloc(v52, 0x14204A73uLL);
      strncpy(v54, *(const char **)(v48 + 24), v51);
      v54[v51] = 0;
      v55 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), v54);
      if (!v55)
        v55 = (const __CFString *)__SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(a1 + 64), v54);
      if (v55)
        v56 = v55;
      else
        v56 = &stru_1E0F56070;
      if (v51 >= 128)
        free(v54);
      v20 = v74;
    }
    else
    {
      v56 = &stru_1E0F56070;
    }
    *(_QWORD *)&v77[8 * v28] = v47;
    *(_QWORD *)&v76[8 * v28++] = v56;
    goto LABEL_81;
  }
LABEL_82:
  if (v28)
  {
    v57 = objc_alloc(MEMORY[0x1E0C99D80]);
    v58 = (void *)objc_msgSend(v57, "initWithObjects:forKeys:count:", v76, v77, v28);
  }
  else
  {
    v58 = 0;
  }
  if ((*(_BYTE *)(a1 + 43) & 0x20) != 0)
  {
    if (qword_1ECD0A2A8 != -1)
      dispatch_once(&qword_1ECD0A2A8, &__block_literal_global_168);
    if (_MergedGlobals_130)
    {
      if (v58)
      {
        v59 = v58;
        v60 = (id)objc_msgSend(v58, "mutableCopy");
      }
      else
      {
        v60 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      }
      v58 = v60;
    }
    if ((v20 & 4) != 0)
    {
      if (Value)
        v61 = Value;
      else
        v61 = &stru_1E0F56070;
      if (v68)
        v62 = v68;
      else
        v62 = &stru_1E0F56070;
      if (v69)
        v63 = v69;
      else
        v63 = &stru_1E0F56070;
      v64 = (uint64_t)v58;
      if (!v58)
        v64 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionary");
      objc_msgSend(v70, "parser:didStartElement:namespaceURI:qualifiedName:attributes:", a1, v61, v62, v63, v64, v68);
    }
    else
    {
      v65 = (uint64_t)v58;
      if (!v58)
        v65 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionary");
      objc_msgSend(v70, "parser:didStartElement:namespaceURI:qualifiedName:attributes:", a1, v69, 0, 0, v65, v68);
    }
  }

  free(v73);
}

void sub_1818A6778(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

NSString *__SlowPathNSXMLParserNSStringFromBytes(__CFDictionary *a1, char *__s)
{
  NSString *v4;
  NSString *v5;
  const char *CStringPtr;
  const char *v7;

  v4 = -[NSString initWithBytes:length:encoding:]([NSString alloc], "initWithBytes:length:encoding:", __s, strlen(__s), 4);
  v5 = v4;
  if (((unint64_t)v4 & 0x8000000000000000) == 0)
  {
    CStringPtr = CFStringGetCStringPtr((CFStringRef)v4, 0x8000100u);
    if (!CStringPtr)
      return v5;
    v7 = CStringPtr;
    if (strcmp(__s, CStringPtr))
      return v5;
    CFDictionaryAddValue(a1, v7, v5);

  }
  return v5;
}

uint64_t dispatch thunk of JSONEncoder.dateEncodingStrategy.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

id protocol witness for CustomStringConvertible.description.getter in conformance NSObject(uint64_t a1, uint64_t a2)
{
  return protocol witness for CustomStringConvertible.description.getter in conformance NSObject(a1, a2, (SEL *)&selRef_description);
}

id protocol witness for _BridgedStoredNSError._nsError.getter in conformance MachError()
{
  id *v0;

  return *v0;
}

ValueMetadata *type metadata accessor for Calendar.RepeatedTimePolicy()
{
  return &type metadata for Calendar.RepeatedTimePolicy;
}

ValueMetadata *type metadata accessor for Calendar.SearchDirection()
{
  return &type metadata for Calendar.SearchDirection;
}

ValueMetadata *type metadata accessor for Calendar.MatchingPolicy()
{
  return &type metadata for Calendar.MatchingPolicy;
}

void protocol witness for Cancellable.cancel() in conformance Notification.Subscription<A>()
{
  Notification.Subscription.cancel()();
}

void Notification.Subscription.cancel()()
{
  _QWORD *v0;
  os_unfair_lock_s *v1;
  void *v2;
  uint64_t v3;

  v1 = (os_unfair_lock_s *)v0[2];
  os_unfair_lock_lock(v1);
  v2 = (void *)v0[5];
  if (v2 && (v3 = v0[8]) != 0)
  {
    v0[5] = 0;
    v0[7] = 0;
    v0[8] = 0;
    swift_unknownObjectRelease();
    os_unfair_lock_unlock(v1);
    objc_msgSend(v2, sel_removeObserver_, v3);

    swift_unknownObjectRelease();
  }
  else
  {
    os_unfair_lock_unlock(v1);
  }
}

uint64_t UUID.uuid.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

NSObject __swiftcall AnyHashable._bridgeToObjectiveC()()
{
  uint64_t v0;
  _QWORD v2[4];

  AnyHashable.base.getter();
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  v0 = _bridgeAnythingToObjectiveC<A>(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  return (NSObject)v0;
}

void static Date.distantFuture.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x422D63C37F000000;
}

BOOL NSIsEmptyRect(NSRect aRect)
{
  return aRect.size.height <= 0.0 || aRect.size.width <= 0.0;
}

ValueMetadata *type metadata accessor for FormatStyleCapitalizationContext()
{
  return &type metadata for FormatStyleCapitalizationContext;
}

BOOL NSMapMember(NSMapTable *table, const void *key, void **originalKey, void **value)
{
  if (!table)
    NSLog((NSString *)CFSTR("%s: map table argument is NULL"), "BOOL NSMapMember(NSMapTable * _Nonnull, const void * _Nonnull, void ** _Nullable, void ** _Nullable)");
  return -[NSMapTable mapMember:originalKey:value:](table, "mapMember:originalKey:value:", key, originalKey, value);
}

uint64_t Locale.Language.lineLayoutDirection.getter(uint64_t (*a1)(uint64_t, int *))
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  Swift::String v16;
  uint64_t v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v2 = *v1;
  v3 = v1[1];
  v5 = v1[2];
  v4 = (void *)v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = (void *)v1[7];
  v11 = v1[8];
  v10 = v1[9];
  v12 = v1[10];
  v13 = (void *)v1[11];
  v30 = 0;
  v27 = v6;
  v28 = v2;
  v26 = v3;
  if (v3)
  {
    v14 = v5;
    v15 = v4;
    outlined copy of Locale.LanguageCode?(v2, v3);
    outlined copy of Locale.LanguageCode?(v6, v7);
    outlined copy of Locale.LanguageCode?(v11, v10);
    v16._countAndFlagsBits = v14;
    v16._object = v15;
    String.append(_:)(v16);
    v17 = v12;
    if (!v7)
      goto LABEL_4;
    goto LABEL_3;
  }
  outlined copy of Locale.LanguageCode?(v2, 0);
  outlined copy of Locale.LanguageCode?(v6, v7);
  outlined copy of Locale.LanguageCode?(v11, v10);
  v17 = v12;
  if (v7)
  {
LABEL_3:
    v18._countAndFlagsBits = 45;
    v18._object = (void *)0xE100000000000000;
    String.append(_:)(v18);
    v19._countAndFlagsBits = v9;
    v19._object = v8;
    String.append(_:)(v19);
  }
LABEL_4:
  if (v10)
  {
    v20._countAndFlagsBits = 95;
    v20._object = (void *)0xE100000000000000;
    String.append(_:)(v20);
    v21._countAndFlagsBits = v17;
    v21._object = v13;
    String.append(_:)(v21);
  }
  outlined consume of Locale.LanguageCode?(v28, v26);
  outlined consume of Locale.LanguageCode?(v27, v7);
  outlined consume of Locale.LanguageCode?(v11, v10);
  v22 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v23 = a1(v22 + 32, &v30);
  swift_release();
  if (v23 < 4 && v30 < 1)
    return v23 + 1;
  else
    return 0;
}

uint64_t *Locale.Components.init(identifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  int Language;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  int Script;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  int Country;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  Swift::String v18;
  void *v19;
  Swift::String v20;
  Swift::String v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int Variant;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  int v50;
  int countAndFlagsBits_low;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  void *v61;
  void *v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  int KeywordValue;
  uint64_t v72;
  void *v73;
  Swift::String v74;
  uint64_t v75;
  uint64_t v76;
  Swift::String v77;
  uint64_t v78;
  uint64_t v79;
  Swift::String v80;
  uint64_t v81;
  uint64_t v82;
  Swift::String v83;
  Swift::String v84;
  Swift::Int v85;
  Swift::Int v86;
  void *v87;
  void *v88;
  uint64_t v89;
  void *v90;
  Swift::String v91;
  uint64_t v92;
  void *v93;
  void *v94;
  Swift::String v95;
  uint64_t v96;
  Swift::String v97;
  void *v98;
  uint64_t v99;
  Swift::String v100;
  char v101;
  os_unfair_lock_s *v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  void *v106;
  _BYTE v107[160];
  _BYTE v108[112];
  uint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  void *v115;
  void *v116;
  void *v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  void *v125;
  Swift::String v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  uint64_t v134;
  void *v135;
  void *v136;
  uint64_t v137;
  void *v138;
  void *v139;
  uint64_t v140;
  void *v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  void *object;
  void *v150;
  void *v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t countAndFlagsBits;
  uint64_t v157;
  int v158;
  _BYTE v159[258];
  Swift::String v160[22];
  Swift::String v161;
  uint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  char v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  void *v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  void *v183;
  void *v184;
  char v185;
  char v186;
  uint64_t v187;
  void *v188;
  uint64_t v189;
  void *v190;
  uint64_t v191;
  void *v192;
  uint64_t v193;
  void *v194;
  uint64_t v195;
  uint64_t v196;
  Swift::String v197;
  uint64_t v198;
  void *v199;
  uint64_t v200;
  void *v201;
  uint64_t v202;
  void *v203;
  uint64_t v204;
  Swift::String v205;

  v113 = a3;
  v204 = *MEMORY[0x1E0C80C00];
  swift_bridgeObjectRetain();
  LODWORD(v161._countAndFlagsBits) = 0;
  String.utf8CString.getter();
  Language = uloc_getLanguage();
  v6 = swift_release();
  v7 = 0;
  v8 = 0;
  if (Language > 0)
  {
    v159[Language] = 0;
    v6 = MEMORY[0x186DA4658](v159, 0);
    v7 = v6;
  }
  v150 = v8;
  MEMORY[0x1E0C80A78](v6);
  LODWORD(v161._countAndFlagsBits) = 0;
  String.utf8CString.getter();
  Script = uloc_getScript();
  v10 = swift_release();
  v11 = 0;
  v12 = 0;
  if (SLODWORD(v161._countAndFlagsBits) <= 0 && Script > 0)
  {
    v107[Script] = 0;
    v10 = MEMORY[0x186DA4658](v107);
    v11 = v10;
    v12 = v13;
  }
  MEMORY[0x1E0C80A78](v10);
  LODWORD(v161._countAndFlagsBits) = 0;
  String.utf8CString.getter();
  Country = uloc_getCountry();
  swift_release();
  v15 = 0;
  if (SLODWORD(v161._countAndFlagsBits) > 0)
  {
    v151 = 0;
  }
  else
  {
    v151 = 0;
    if (Country > 0)
    {
      v107[Country] = 0;
      v15 = MEMORY[0x186DA4658](v107);
      v151 = v16;
    }
  }
  v157 = v15;
  swift_bridgeObjectRelease();
  v17 = (uint64_t)v150;
  if (v150)
  {
    v18 = String.lowercased()();
    countAndFlagsBits = v18._countAndFlagsBits;
    object = v18._object;
    v19 = v151;
    if (v12)
    {
LABEL_12:
      v161._countAndFlagsBits = v11;
      v161._object = v12;
      swift_bridgeObjectRetain_n();
      String.init<A>(_:)();
      v20 = String._capitalized()();
      v155 = v20._countAndFlagsBits;
      v148 = v20._object;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
  }
  else
  {
    v7 = 0;
    countAndFlagsBits = 0;
    object = 0;
    v19 = v151;
    if (v12)
      goto LABEL_12;
  }
  v11 = 0;
  v155 = 0;
  v148 = 0;
LABEL_15:
  v145 = a2;
  v120 = a1;
  v151 = v19;
  if (v19)
  {
    v21 = String.uppercased()();
    v154 = v21._countAndFlagsBits;
    v22 = v21._object;
  }
  else
  {
    v157 = 0;
    v154 = 0;
    v22 = 0;
  }
  v121 = v22;
  outlined copy of Locale.LanguageCode?(v7, v17);
  outlined copy of Locale.LanguageCode?(v11, (uint64_t)v12);
  v23 = v157;
  v24 = (uint64_t)v151;
  outlined copy of Locale.LanguageCode?(v157, (uint64_t)v151);
  outlined consume of Locale.LanguageCode?(v7, v17);
  outlined consume of Locale.LanguageCode?(v11, (uint64_t)v12);
  outlined consume of Locale.LanguageCode?(v23, v24);
  v143 = v7;
  outlined copy of Locale.LanguageCode?(v7, (uint64_t)v150);
  v114 = v11;
  v142 = v12;
  outlined copy of Locale.LanguageCode?(v11, (uint64_t)v12);
  v25 = outlined copy of Locale.LanguageCode?(v23, v24);
  MEMORY[0x1E0C80A78](v25);
  LODWORD(v161._countAndFlagsBits) = 0;
  String.utf8CString.getter();
  Variant = uloc_getVariant();
  swift_release();
  if (SLODWORD(v161._countAndFlagsBits) <= 0
    && Variant > 0
    && (v107[Variant] = 0, v27 = MEMORY[0x186DA4658](v107), v28))
  {
    v29 = v27;
    v125 = v28;
    v30 = String.lowercased()();
    v123 = v30._object;
    v124 = v30._countAndFlagsBits;
    outlined consume of Locale.LanguageCode?(0, 0);
  }
  else
  {
    v29 = 0;
    v124 = 0;
    v125 = 0;
    v123 = 0;
  }
  v31 = v114;
  v33 = v142;
  v32 = v143;
  v158 = 0;
  String.utf8CString.getter();
  v34 = uloc_openKeywords();
  swift_release();
  v122 = v29;
  if (v158 > 0 || !v34)
  {
    v35 = v121;
    swift_bridgeObjectRelease();
    v36 = 0;
    v139 = 0;
    v140 = 0;
    v141 = 0;
    v37 = 0;
    v136 = 0;
    v137 = 0;
    v138 = 0;
    v38 = 0;
    v133 = 0;
    v134 = 0;
    v135 = 0;
    v152 = 0;
    v153 = 0;
    v131 = 0;
    v132 = 0;
    v146 = 0;
    v147 = 0;
    v127 = 0;
    v128 = 0;
    v129 = 0;
    v130 = 0;
    v39 = 0;
    v40 = 0;
    v126._countAndFlagsBits = 0;
    v126._object = 0;
    LODWORD(v145) = 4;
    v41 = 7;
    v42 = 16;
    goto LABEL_30;
  }
  type metadata accessor for ICU.Enumerator();
  v118 = 7;
  v43 = swift_allocObject();
  *(_QWORD *)(v43 + 16) = v34;
  swift_retain();
  LODWORD(v161._countAndFlagsBits) = 0;
  LODWORD(v160[0]._countAndFlagsBits) = 0;
  v44 = uenum_next();
  if (SLODWORD(v161._countAndFlagsBits) <= 0)
  {
    v49 = 0;
    v48 = 0;
    v126._countAndFlagsBits = 0;
    v126._object = 0;
    v115 = 0;
    v116 = 0;
    v47 = 0;
    v129 = 0;
    v130 = 0;
    v127 = 0;
    v128 = 0;
    v131 = 0;
    v132 = 0;
    v46 = 0;
    v45 = 0;
    v134 = 0;
    v135 = 0;
    v133 = 0;
    v137 = 0;
    v138 = 0;
    v136 = 0;
    v140 = 0;
    v141 = 0;
    v139 = 0;
    v119 = 0;
    v109 = 0;
    countAndFlagsBits_low = 16;
    v117 = 0;
    v118 = 7;
    v50 = 4;
    v112 = v43;
    while (1)
    {
      v39 = v47;
      v153 = v49;
      if (!v44)
        goto LABEL_29;
      v152 = v45;
      v66 = String.init(cString:)();
      static Locale.legacyKey(forKey:)(v66, v67, &v161._countAndFlagsBits);
      v68 = swift_bridgeObjectRelease();
      v69 = v161._object;
      if (v161._object)
      {
        v146 = v48;
        v147 = v46;
        v144 = v47;
        v70 = v161._countAndFlagsBits;
        MEMORY[0x1E0C80A78](v68);
        LODWORD(v161._countAndFlagsBits) = 0;
        String.utf8CString.getter();
        String.utf8CString.getter();
        KeywordValue = uloc_getKeywordValue();
        swift_release();
        swift_release();
        if (SLODWORD(v161._countAndFlagsBits) > 0 || KeywordValue <= 0)
          goto LABEL_44;
        v108[KeywordValue] = 0;
        v72 = MEMORY[0x186DA4658](v108);
        v46 = v147;
        if (!v73)
        {
          swift_bridgeObjectRelease();
          v47 = v144;
          v65 = v146;
          goto LABEL_49;
        }
        v110 = v73;
        v111 = v72;
        v65 = v146;
        if (v70 == 0x7261646E656C6163 && v69 == (void *)0xE800000000000000
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v74._object = v110;
          v74._countAndFlagsBits = v111;
          Calendar.Identifier.init(identifierString:)(v74);
          countAndFlagsBits_low = LOBYTE(v161._countAndFlagsBits);
        }
        else if (v70 == 0x6F6974616C6C6F63 && v69 == (void *)0xE90000000000006ELL
               || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v75 = (uint64_t)v110;
          v76 = v111;
          v77 = String.lowercased()();
          outlined consume of Locale.LanguageCode?((uint64_t)v119, v140);
          v119 = (void *)v76;
          v46 = v147;
          v139 = (void *)v77._countAndFlagsBits;
          v140 = v75;
          v141 = v77._object;
        }
        else
        {
          if ((v70 != 0x79636E6572727563 || v69 != (void *)0xE800000000000000)
            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            if (v70 == 0x737265626D756ELL && v69 == (void *)0xE700000000000000
              || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              v81 = (uint64_t)v110;
              v82 = v111;
              v83 = String.lowercased()();
              outlined consume of Locale.LanguageCode?((uint64_t)v116, v134);
              v116 = (void *)v82;
              v133 = (void *)v83._countAndFlagsBits;
              v134 = v81;
              v135 = v83._object;
LABEL_62:
              v45 = v152;
              v47 = v144;
              v46 = v147;
              goto LABEL_33;
            }
            if (v70 == 30566 && v69 == (void *)0xE200000000000000
              || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              v205._object = v110;
              v205._countAndFlagsBits = v111;
              Locale.Weekday.init(rawValue:)(v205, (char *)&v161);
              v118 = LOBYTE(v161._countAndFlagsBits);
              goto LABEL_62;
            }
            if (v70 == 0x7372756F68 && v69 == (void *)0xE500000000000000
              || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              v84._countAndFlagsBits = v111;
              v84._object = v110;
              v85 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Locale.Components.init(identifier:), v84);
              swift_bridgeObjectRelease();
              v86 = v85;
              v46 = v147;
              v50 = 0;
              v45 = v152;
              v47 = v144;
              switch(v86)
              {
                case 0:
                  goto LABEL_33;
                case 1:
                  v50 = 1;
                  break;
                case 2:
                  v50 = 2;
                  break;
                case 3:
                  v50 = 3;
                  break;
                default:
                  v50 = 4;
                  goto LABEL_43;
              }
              goto LABEL_33;
            }
            if (v70 == 0x6572757361656DLL && v69 == (void *)0xE700000000000000
              || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              v87 = v110;
              if (v111 == 0x6C61697265706D69 && v110 == (void *)0xE800000000000000
                || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                if (one-time initialization token for uk != -1)
                  swift_once();
                v89 = static Locale.MeasurementSystem.uk;
                v88 = *(void **)algn_1EDC3A1D8;
                v90 = (void *)*((_QWORD *)&xmmword_1EDC3A1E0 + 1);
                v46 = xmmword_1EDC3A1E0;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                outlined consume of Locale.LanguageCode?(v152, (uint64_t)v131);
                v131 = v88;
                v132 = v90;
                v47 = v144;
                v65 = v146;
                v45 = v89;
              }
              else
              {
                v96 = v111;
                v97 = String.lowercased()();
                outlined consume of Locale.LanguageCode?(v152, (uint64_t)v131);
                v131 = v87;
                v132 = v97._object;
                v46 = v97._countAndFlagsBits;
                v47 = v144;
                v65 = v146;
                v45 = v96;
              }
              goto LABEL_33;
            }
            if (v70 == 26482 && v69 == (void *)0xE200000000000000
              || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              if (String.count.getter() >= 3)
              {
                specialized Collection.prefix(_:)(2);
                swift_bridgeObjectRelease();
                v91 = Substring.uppercased()();
                swift_bridgeObjectRelease();
                v161 = v91;
                v92 = String.init<A>(_:)();
                v94 = v93;
                v95 = String.uppercased()();
                outlined consume of Locale.LanguageCode?(v127, (uint64_t)v129);
                v127 = v92;
                v128 = v95._countAndFlagsBits;
                v129 = v94;
                v130 = v95._object;
LABEL_45:
                v47 = v144;
LABEL_46:
                v65 = v146;
LABEL_47:
                v46 = v147;
LABEL_49:
                v45 = v152;
                goto LABEL_33;
              }
LABEL_44:
              swift_bridgeObjectRelease();
              goto LABEL_45;
            }
            if (v70 == 25715 && v69 == (void *)0xE200000000000000
              || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              v98 = v110;
              v99 = v111;
              v100 = String.lowercased()();
              outlined consume of Locale.LanguageCode?(v144, (uint64_t)v115);
              v115 = v98;
              v126 = v100;
              v47 = v99;
              goto LABEL_46;
            }
            if (v70 == 0x656E6F7A656D6974 && v69 == (void *)0xE800000000000000)
            {
              swift_bridgeObjectRelease();
            }
            else
            {
              v101 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if ((v101 & 1) == 0)
                goto LABEL_44;
            }
            if (one-time initialization token for cache != -1)
              swift_once();
            v102 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
            swift_retain_n();
            os_unfair_lock_lock(v102);
            v103 = v109;
            closure #1 in TimeZoneCache.fixed(_:)(v111, (unint64_t)v110, &v161._countAndFlagsBits);
            v109 = v103;
            os_unfair_lock_unlock(v102);
            swift_release_n();
            v104 = v161._countAndFlagsBits;
            v105 = v161._object;
            swift_bridgeObjectRelease();
            if (v104)
              v106 = v105;
            else
              v106 = 0;
            v153 = v106;
            swift_unknownObjectRelease();
            v65 = v104;
            v47 = v144;
            goto LABEL_47;
          }
          swift_bridgeObjectRelease();
          v78 = (uint64_t)v110;
          v79 = v111;
          v80 = String.lowercased()();
          outlined consume of Locale.LanguageCode?((uint64_t)v117, v137);
          v117 = (void *)v79;
          v46 = v147;
          v136 = (void *)v80._countAndFlagsBits;
          v137 = v78;
          v138 = v80._object;
        }
LABEL_43:
        v45 = v152;
        v47 = v144;
      }
      else
      {
        v45 = v152;
        v65 = v48;
      }
LABEL_33:
      v48 = v65;
      LODWORD(v161._countAndFlagsBits) = 0;
      LODWORD(v160[0]._countAndFlagsBits) = 0;
      v44 = uenum_next();
      v49 = v153;
      if (SLODWORD(v161._countAndFlagsBits) > 0)
        goto LABEL_28;
    }
  }
  v119 = 0;
  v139 = 0;
  v140 = 0;
  v141 = 0;
  v116 = 0;
  v117 = 0;
  v136 = 0;
  v137 = 0;
  v138 = 0;
  v133 = 0;
  v134 = 0;
  v135 = 0;
  v45 = 0;
  v131 = 0;
  v132 = 0;
  v46 = 0;
  v127 = 0;
  v128 = 0;
  v129 = 0;
  v130 = 0;
  v47 = 0;
  v115 = 0;
  v126._countAndFlagsBits = 0;
  v126._object = 0;
  v48 = 0;
  v49 = 0;
  v50 = 4;
  countAndFlagsBits_low = 16;
LABEL_28:
  v39 = v47;
  v153 = v49;
LABEL_29:
  swift_bridgeObjectRelease();
  swift_release();
  v146 = v48;
  v147 = v46;
  LODWORD(v145) = v50;
  v152 = v45;
  v35 = v121;
  swift_setDeallocating();
  uenum_close();
  swift_deallocClassInstance();
  v41 = v118;
  v36 = v119;
  v38 = v116;
  v37 = v117;
  v31 = v114;
  v40 = v115;
  v42 = countAndFlagsBits_low;
  v33 = v142;
  v32 = v143;
LABEL_30:
  v118 = v41;
  v119 = v36;
  v116 = v38;
  v117 = v37;
  v115 = v40;
  v144 = v39;
  v160[0]._countAndFlagsBits = v32;
  v160[0]._object = v150;
  v52 = v157;
  v160[1]._countAndFlagsBits = countAndFlagsBits;
  v160[1]._object = object;
  v160[2]._countAndFlagsBits = v31;
  v160[2]._object = v33;
  v53 = v31;
  v160[3]._countAndFlagsBits = v155;
  v160[3]._object = v148;
  v160[4]._countAndFlagsBits = v157;
  v54 = (uint64_t)v151;
  v160[4]._object = v151;
  v160[5]._countAndFlagsBits = v154;
  v160[5]._object = v35;
  LODWORD(v120) = v42;
  LOBYTE(v160[6]._countAndFlagsBits) = v42;
  v160[6]._object = v36;
  v160[7]._countAndFlagsBits = v140;
  v160[7]._object = v139;
  v160[8]._countAndFlagsBits = (uint64_t)v141;
  v160[8]._object = v37;
  v160[9]._countAndFlagsBits = v137;
  v160[9]._object = v136;
  v160[10]._countAndFlagsBits = (uint64_t)v138;
  v160[10]._object = v38;
  v160[11]._countAndFlagsBits = v134;
  v160[11]._object = v133;
  v160[12]._countAndFlagsBits = (uint64_t)v135;
  LOBYTE(v160[12]._object) = v41;
  BYTE1(v160[12]._object) = v145;
  v160[13]._countAndFlagsBits = v152;
  v160[13]._object = v131;
  v160[14]._countAndFlagsBits = v147;
  v160[14]._object = v132;
  v160[15]._countAndFlagsBits = v127;
  v160[15]._object = v129;
  v160[16]._countAndFlagsBits = v128;
  v160[16]._object = v130;
  v160[17]._countAndFlagsBits = v39;
  v160[17]._object = v40;
  v160[18] = v126;
  v160[19]._countAndFlagsBits = v146;
  v160[19]._object = v153;
  v160[20]._countAndFlagsBits = v122;
  v160[20]._object = v125;
  v160[21]._countAndFlagsBits = v124;
  v160[21]._object = v123;
  outlined retain of Locale.Components(&v160[0]._countAndFlagsBits);
  v55 = v54;
  outlined consume of Locale.LanguageCode?(v52, v54);
  v56 = v31;
  v57 = (uint64_t)v142;
  v58 = v155;
  v59 = v148;
  outlined consume of Locale.LanguageCode?(v56, (uint64_t)v142);
  v60 = v143;
  v62 = object;
  v61 = v150;
  v63 = countAndFlagsBits;
  outlined consume of Locale.LanguageCode?(v143, (uint64_t)v150);
  memcpy(v113, v160, 0x160uLL);
  v161._countAndFlagsBits = v60;
  v161._object = v61;
  v162 = v63;
  v163 = v62;
  v164 = v53;
  v165 = v57;
  v166 = v58;
  v167 = v59;
  v168 = v157;
  v169 = v55;
  v170 = v154;
  v171 = v121;
  v172 = v120;
  v173 = (uint64_t)v119;
  v174 = v140;
  v175 = v139;
  v176 = v141;
  v177 = (uint64_t)v117;
  v178 = v137;
  v179 = v136;
  v180 = v138;
  v181 = (uint64_t)v116;
  v182 = v134;
  v183 = v133;
  v184 = v135;
  v185 = v118;
  v186 = v145;
  v187 = v152;
  v188 = v131;
  v189 = v147;
  v190 = v132;
  v191 = v127;
  v192 = v129;
  v193 = v128;
  v194 = v130;
  v195 = v144;
  v196 = (uint64_t)v115;
  v197 = v126;
  v198 = v146;
  v199 = v153;
  v200 = v122;
  v201 = v125;
  v202 = v124;
  v203 = v123;
  return outlined release of Locale.Components(&v161._countAndFlagsBits);
}

uint64_t outlined consume of Locale.LanguageCode?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined copy of Locale.LanguageCode?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

void Locale.Components.icuIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  uint64_t *v18;
  char v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t *v43;
  char v44;
  char v45;
  unint64_t v46;
  uint64_t v47;
  _BOOL8 v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  uint64_t *v54;
  uint64_t v55;
  void *v56;
  unint64_t v57;
  int64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  int64_t v74;
  unint64_t v75;
  int64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  unint64_t v80;
  int64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  int64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  int64_t v97;
  unint64_t v98;
  int64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  unint64_t v104;
  int64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  int64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  int64_t v121;
  unint64_t v122;
  int64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  unint64_t v129;
  int64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  _QWORD *v147;
  BOOL v148;
  int64_t v149;
  unint64_t v150;
  int64_t v151;
  int64_t v152;
  uint64_t v153;
  int64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 144);
  v158 = *(_QWORD *)(v0 + 152);
  v159 = *(_QWORD *)(v0 + 120);
  v160 = *(_QWORD *)(v0 + 160);
  v162 = *(_QWORD *)(v0 + 176);
  v157 = *(_QWORD *)(v0 + 184);
  v163 = *(_QWORD *)(v0 + 192);
  v161 = *(unsigned __int8 *)(v0 + 200);
  v5 = MEMORY[0x1E0DEE9E0];
  if (*(_BYTE *)(v0 + 96) == 16)
    goto LABEL_11;
  v155 = *(_QWORD *)(v0 + 64);
  v6 = Calendar.Identifier.cldrIdentifier.getter();
  v8 = v7;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(0x7261646E656C6163, 0xE800000000000000);
  v12 = *(_QWORD *)(v5 + 16);
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
    goto LABEL_46;
  v15 = v10;
  if (*(_QWORD *)(v5 + 24) < v14)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, isUniquelyReferenced_nonNull_native);
    v16 = specialized __RawDictionaryStorage.find<A>(_:)(0x7261646E656C6163, 0xE800000000000000);
    if ((v15 & 1) != (v17 & 1))
      goto LABEL_192;
    v11 = v16;
    if ((v15 & 1) == 0)
      goto LABEL_6;
    goto LABEL_9;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    if ((v10 & 1) == 0)
      goto LABEL_6;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICULegacyKey, String>);
  v125 = static _DictionaryStorage.copy(original:)();
  v126 = MEMORY[0x1E0DEE9E0];
  v5 = v125;
  v127 = *(_QWORD *)(MEMORY[0x1E0DEE9E0] + 16);
  if (!v127)
    goto LABEL_182;
  v128 = (void *)(v125 + 64);
  v129 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != MEMORY[0x1E0DEE9E0] || (unint64_t)v128 >= MEMORY[0x1E0DEE9E0] + 8 * v129 + 64)
  {
    memmove(v128, (const void *)(MEMORY[0x1E0DEE9E0] + 64), 8 * v129);
    v126 = MEMORY[0x1E0DEE9E0];
  }
  v130 = 0;
  *(_QWORD *)(v5 + 16) = v127;
  v131 = 1 << *(_BYTE *)(v126 + 32);
  v132 = *(_QWORD *)(v126 + 64);
  v133 = -1;
  if (v131 < 64)
    v133 = ~(-1 << v131);
  v134 = v133 & v132;
  v152 = (unint64_t)(v131 + 63) >> 6;
  while (1)
  {
    if (v134)
    {
      v135 = __clz(__rbit64(v134));
      v134 &= v134 - 1;
      v154 = v130;
      v136 = v135 | (v130 << 6);
      v137 = MEMORY[0x1E0DEE9E0];
    }
    else
    {
      v148 = __OFADD__(v130, 1);
      v149 = v130 + 1;
      v137 = MEMORY[0x1E0DEE9E0];
      if (v148)
        goto LABEL_187;
      if (v149 >= v152)
        goto LABEL_182;
      v150 = *(_QWORD *)(MEMORY[0x1E0DEE9E0] + 8 * v149 + 64);
      if (!v150)
      {
        v151 = v149 + 1;
        if (v149 + 1 >= v152)
          goto LABEL_182;
        v150 = *(_QWORD *)(MEMORY[0x1E0DEE9E0] + 8 * v151 + 64);
        if (!v150)
        {
          v151 = v149 + 2;
          if (v149 + 2 >= v152)
            goto LABEL_182;
          v150 = *(_QWORD *)(MEMORY[0x1E0DEE9E0] + 8 * v151 + 64);
          if (!v150)
          {
            v151 = v149 + 3;
            if (v149 + 3 >= v152)
              goto LABEL_182;
            v150 = *(_QWORD *)(MEMORY[0x1E0DEE9E0] + 8 * v151 + 64);
            if (!v150)
            {
              v151 = v149 + 4;
              if (v149 + 4 >= v152)
                goto LABEL_182;
              v150 = *(_QWORD *)(MEMORY[0x1E0DEE9E0] + 8 * v151 + 64);
              if (!v150)
              {
                v151 = v149 + 5;
                if (v149 + 5 >= v152)
                  goto LABEL_182;
                v150 = *(_QWORD *)(MEMORY[0x1E0DEE9E0] + 8 * v151 + 64);
                if (!v150)
                {
                  v151 = v149 + 6;
                  if (v149 + 6 >= v152)
                    goto LABEL_182;
                  v150 = *(_QWORD *)(MEMORY[0x1E0DEE9E0] + 8 * v151 + 64);
                  if (!v150)
                  {
                    v151 = v149 + 7;
                    if (v149 + 7 >= v152)
                      goto LABEL_182;
                    v150 = *(_QWORD *)(MEMORY[0x1E0DEE9E0] + 8 * v151 + 64);
                    if (!v150)
                    {
                      while (1)
                      {
                        v149 = v151 + 1;
                        if (__OFADD__(v151, 1))
                          goto LABEL_191;
                        v137 = MEMORY[0x1E0DEE9E0];
                        if (v149 >= v152)
                          break;
                        v150 = *(_QWORD *)(MEMORY[0x1E0DEE9E0] + 8 * v149 + 64);
                        ++v151;
                        if (v150)
                          goto LABEL_177;
                      }
LABEL_182:
                      swift_bridgeObjectRelease();
                      if ((v15 & 1) == 0)
                      {
LABEL_6:
                        specialized _NativeDictionary._insert(at:key:value:)(v11, 0x7261646E656C6163, 0xE800000000000000, v6, v8, (_QWORD *)v5);
                        goto LABEL_10;
                      }
LABEL_9:
                      v18 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v11);
                      *v18 = v6;
                      v18[1] = v8;
                      swift_bridgeObjectRelease();
LABEL_10:
                      swift_bridgeObjectRelease();
                      v1 = v155;
LABEL_11:
                      if (!v2)
                      {
                        v26 = v5;
                        if (v4)
                          goto LABEL_24;
                        goto LABEL_18;
                      }
                      swift_bridgeObjectRetain();
                      v19 = swift_isUniquelyReferenced_nonNull_native();
                      v21 = specialized __RawDictionaryStorage.find<A>(_:)(0x6F6974616C6C6F63, 0xE90000000000006ELL);
                      v22 = *(_QWORD *)(v5 + 16);
                      v23 = (v20 & 1) == 0;
                      v24 = v22 + v23;
                      if (__OFADD__(v22, v23))
                      {
                        __break(1u);
                        goto LABEL_44;
                      }
                      v25 = v20;
                      if (*(_QWORD *)(v5 + 24) < v24)
                      {
                        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v24, v19);
                        v26 = v5;
                        v27 = specialized __RawDictionaryStorage.find<A>(_:)(0x6F6974616C6C6F63, 0xE90000000000006ELL);
                        if ((v25 & 1) != (v28 & 1))
                          goto LABEL_192;
                        v21 = v27;
                        if ((v25 & 1) == 0)
                          goto LABEL_22;
                        goto LABEL_16;
                      }
                      if ((v19 & 1) != 0)
                      {
                        v26 = v5;
                        if ((v20 & 1) == 0)
                          goto LABEL_22;
                        goto LABEL_16;
                      }
                      v156 = v1;
                      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICULegacyKey, String>);
                      v55 = static _DictionaryStorage.copy(original:)();
                      v26 = v55;
                      if (!*(_QWORD *)(v5 + 16))
                        goto LABEL_143;
                      v56 = (void *)(v55 + 64);
                      v57 = (unint64_t)((1 << *(_BYTE *)(v26 + 32)) + 63) >> 6;
                      if (v26 != v5 || (unint64_t)v56 >= v5 + 64 + 8 * v57)
                        memmove(v56, (const void *)(v5 + 64), 8 * v57);
                      v153 = v5 + 64;
                      v58 = 0;
                      *(_QWORD *)(v26 + 16) = *(_QWORD *)(v5 + 16);
                      v59 = 1 << *(_BYTE *)(v5 + 32);
                      v60 = -1;
                      if (v59 < 64)
                        v60 = ~(-1 << v59);
                      v61 = v60 & *(_QWORD *)(v5 + 64);
                      v62 = (unint64_t)(v59 + 63) >> 6;
                      while (1)
                      {
                        if (v61)
                        {
                          v63 = __clz(__rbit64(v61));
                          v61 &= v61 - 1;
                          v64 = v63 | (v58 << 6);
                        }
                        else
                        {
                          v74 = v58 + 1;
                          if (__OFADD__(v58, 1))
                          {
                            __break(1u);
LABEL_185:
                            __break(1u);
LABEL_186:
                            __break(1u);
LABEL_187:
                            __break(1u);
                            JUMPOUT(0x1818A99D8);
                          }
                          if (v74 >= v62)
                            goto LABEL_143;
                          v75 = *(_QWORD *)(v153 + 8 * v74);
                          ++v58;
                          if (!v75)
                          {
                            v58 = v74 + 1;
                            if (v74 + 1 >= v62)
                              goto LABEL_143;
                            v75 = *(_QWORD *)(v153 + 8 * v58);
                            if (!v75)
                            {
                              v58 = v74 + 2;
                              if (v74 + 2 >= v62)
                                goto LABEL_143;
                              v75 = *(_QWORD *)(v153 + 8 * v58);
                              if (!v75)
                              {
                                v58 = v74 + 3;
                                if (v74 + 3 >= v62)
                                  goto LABEL_143;
                                v75 = *(_QWORD *)(v153 + 8 * v58);
                                if (!v75)
                                {
                                  v58 = v74 + 4;
                                  if (v74 + 4 >= v62)
                                    goto LABEL_143;
                                  v75 = *(_QWORD *)(v153 + 8 * v58);
                                  if (!v75)
                                  {
                                    v58 = v74 + 5;
                                    if (v74 + 5 >= v62)
                                      goto LABEL_143;
                                    v75 = *(_QWORD *)(v153 + 8 * v58);
                                    if (!v75)
                                    {
                                      v58 = v74 + 6;
                                      if (v74 + 6 >= v62)
                                        goto LABEL_143;
                                      v75 = *(_QWORD *)(v153 + 8 * v58);
                                      if (!v75)
                                      {
                                        v76 = v74 + 7;
                                        if (v76 >= v62)
                                          goto LABEL_143;
                                        v75 = *(_QWORD *)(v153 + 8 * v76);
                                        if (!v75)
                                        {
                                          while (1)
                                          {
                                            v58 = v76 + 1;
                                            if (__OFADD__(v76, 1))
                                            {
                                              __break(1u);
                                              goto LABEL_189;
                                            }
                                            if (v58 >= v62)
                                              break;
                                            v75 = *(_QWORD *)(v153 + 8 * v58);
                                            ++v76;
                                            if (v75)
                                              goto LABEL_78;
                                          }
LABEL_143:
                                          swift_bridgeObjectRelease();
                                          v1 = v156;
                                          if ((v25 & 1) == 0)
                                          {
LABEL_22:
                                            specialized _NativeDictionary._insert(at:key:value:)(v21, 0x6F6974616C6C6F63, 0xE90000000000006ELL, v159, v3, (_QWORD *)v26);
LABEL_23:
                                            swift_bridgeObjectRelease();
                                            if (v4)
                                            {
LABEL_24:
                                              v32 = v160;
                                              swift_bridgeObjectRetain();
                                              v33 = swift_isUniquelyReferenced_nonNull_native();
                                              v35 = specialized __RawDictionaryStorage.find<A>(_:)(0x79636E6572727563, 0xE800000000000000);
                                              v36 = *(_QWORD *)(v26 + 16);
                                              v37 = (v34 & 1) == 0;
                                              v38 = v36 + v37;
                                              if (!__OFADD__(v36, v37))
                                              {
                                                v39 = v34;
                                                if (*(_QWORD *)(v26 + 24) >= v38)
                                                {
                                                  if ((v33 & 1) != 0)
                                                  {
                                                    v30 = v26;
                                                    v42 = v162;
                                                    if ((v34 & 1) != 0)
                                                      goto LABEL_28;
                                                    goto LABEL_31;
                                                  }
                                                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICULegacyKey, String>);
                                                  v77 = static _DictionaryStorage.copy(original:)();
                                                  v30 = v77;
                                                  if (*(_QWORD *)(v26 + 16))
                                                  {
                                                    v78 = (void *)(v77 + 64);
                                                    v79 = v26 + 64;
                                                    v80 = (unint64_t)((1 << *(_BYTE *)(v30 + 32)) + 63) >> 6;
                                                    if (v30 != v26 || (unint64_t)v78 >= v79 + 8 * v80)
                                                      memmove(v78, (const void *)(v26 + 64), 8 * v80);
                                                    v81 = 0;
                                                    *(_QWORD *)(v30 + 16) = *(_QWORD *)(v26 + 16);
                                                    v82 = 1 << *(_BYTE *)(v26 + 32);
                                                    v83 = -1;
                                                    if (v82 < 64)
                                                      v83 = ~(-1 << v82);
                                                    v84 = v83 & *(_QWORD *)(v26 + 64);
                                                    v85 = (unint64_t)(v82 + 63) >> 6;
                                                    while (1)
                                                    {
                                                      if (v84)
                                                      {
                                                        v86 = __clz(__rbit64(v84));
                                                        v84 &= v84 - 1;
                                                        v87 = v86 | (v81 << 6);
                                                      }
                                                      else
                                                      {
                                                        v97 = v81 + 1;
                                                        if (__OFADD__(v81, 1))
                                                          goto LABEL_185;
                                                        if (v97 >= v85)
                                                          break;
                                                        v98 = *(_QWORD *)(v79 + 8 * v97);
                                                        ++v81;
                                                        if (!v98)
                                                        {
                                                          v81 = v97 + 1;
                                                          if (v97 + 1 >= v85)
                                                            break;
                                                          v98 = *(_QWORD *)(v79 + 8 * v81);
                                                          if (!v98)
                                                          {
                                                            v81 = v97 + 2;
                                                            if (v97 + 2 >= v85)
                                                              break;
                                                            v98 = *(_QWORD *)(v79 + 8 * v81);
                                                            if (!v98)
                                                            {
                                                              v81 = v97 + 3;
                                                              if (v97 + 3 >= v85)
                                                                break;
                                                              v98 = *(_QWORD *)(v79 + 8 * v81);
                                                              if (!v98)
                                                              {
                                                                v81 = v97 + 4;
                                                                if (v97 + 4 >= v85)
                                                                  break;
                                                                v98 = *(_QWORD *)(v79 + 8 * v81);
                                                                if (!v98)
                                                                {
                                                                  v81 = v97 + 5;
                                                                  if (v97 + 5 >= v85)
                                                                    break;
                                                                  v98 = *(_QWORD *)(v79 + 8 * v81);
                                                                  if (!v98)
                                                                  {
                                                                    v81 = v97 + 6;
                                                                    if (v97 + 6 >= v85)
                                                                      break;
                                                                    v98 = *(_QWORD *)(v79 + 8 * v81);
                                                                    if (!v98)
                                                                    {
                                                                      v99 = v97 + 7;
                                                                      if (v99 >= v85)
                                                                        break;
                                                                      v100 = v1;
                                                                      v98 = *(_QWORD *)(v79 + 8 * v99);
                                                                      if (!v98)
                                                                      {
                                                                        while (1)
                                                                        {
                                                                          v81 = v99 + 1;
                                                                          if (__OFADD__(v99, 1))
                                                                            break;
                                                                          v1 = v100;
                                                                          if (v81 >= v85)
                                                                            goto LABEL_145;
                                                                          v98 = *(_QWORD *)(v79 + 8 * v81);
                                                                          ++v99;
                                                                          if (v98)
                                                                            goto LABEL_110;
                                                                        }
LABEL_189:
                                                                        __break(1u);
                                                                        goto LABEL_190;
                                                                      }
                                                                      v81 = v99;
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
LABEL_110:
                                                        v84 = (v98 - 1) & v98;
                                                        v87 = __clz(__rbit64(v98)) + (v81 << 6);
                                                      }
                                                      v88 = 16 * v87;
                                                      v89 = (uint64_t *)(*(_QWORD *)(v26 + 48) + v88);
                                                      v91 = *v89;
                                                      v90 = v89[1];
                                                      v92 = (uint64_t *)(*(_QWORD *)(v26 + 56) + v88);
                                                      v93 = *v92;
                                                      v94 = v92[1];
                                                      v95 = (_QWORD *)(*(_QWORD *)(v30 + 48) + v88);
                                                      *v95 = v91;
                                                      v95[1] = v90;
                                                      v96 = (_QWORD *)(*(_QWORD *)(v30 + 56) + v88);
                                                      *v96 = v93;
                                                      v96[1] = v94;
                                                      swift_bridgeObjectRetain();
                                                      swift_bridgeObjectRetain();
                                                    }
                                                  }
LABEL_145:
                                                  swift_bridgeObjectRelease();
                                                  v42 = v162;
                                                  v32 = v160;
                                                  if ((v39 & 1) == 0)
                                                    goto LABEL_31;
LABEL_28:
                                                  v43 = (uint64_t *)(*(_QWORD *)(v30 + 56) + 16 * v35);
                                                  *v43 = v158;
                                                  v43[1] = v32;
                                                  swift_bridgeObjectRelease();
                                                }
                                                else
                                                {
                                                  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v38, v33);
                                                  v30 = v26;
                                                  v40 = specialized __RawDictionaryStorage.find<A>(_:)(0x79636E6572727563, 0xE800000000000000);
                                                  if ((v39 & 1) != (v41 & 1))
                                                    goto LABEL_192;
                                                  v35 = v40;
                                                  v42 = v162;
                                                  if ((v39 & 1) != 0)
                                                    goto LABEL_28;
LABEL_31:
                                                  specialized _NativeDictionary._insert(at:key:value:)(v35, 0x79636E6572727563, 0xE800000000000000, v158, v32, (_QWORD *)v30);
                                                }
                                                swift_bridgeObjectRelease();
                                                if (v42)
                                                {
LABEL_33:
                                                  swift_bridgeObjectRetain();
                                                  v44 = swift_isUniquelyReferenced_nonNull_native();
                                                  v46 = specialized __RawDictionaryStorage.find<A>(_:)(0x737265626D756ELL, 0xE700000000000000);
                                                  v47 = *(_QWORD *)(v30 + 16);
                                                  v48 = (v45 & 1) == 0;
                                                  v49 = v47 + v48;
                                                  if (!__OFADD__(v47, v48))
                                                  {
                                                    v50 = v45;
                                                    if (*(_QWORD *)(v30 + 24) >= v49)
                                                    {
                                                      if ((v44 & 1) != 0)
                                                      {
                                                        v51 = v30;
                                                        v31 = v161;
                                                        if ((v45 & 1) != 0)
                                                          goto LABEL_37;
                                                        goto LABEL_40;
                                                      }
                                                      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICULegacyKey, String>);
                                                      v101 = static _DictionaryStorage.copy(original:)();
                                                      v51 = v101;
                                                      if (*(_QWORD *)(v30 + 16))
                                                      {
                                                        v102 = (void *)(v101 + 64);
                                                        v103 = v30 + 64;
                                                        v104 = (unint64_t)((1 << *(_BYTE *)(v51 + 32)) + 63) >> 6;
                                                        if (v51 != v30 || (unint64_t)v102 >= v103 + 8 * v104)
                                                          memmove(v102, (const void *)(v30 + 64), 8 * v104);
                                                        v105 = 0;
                                                        *(_QWORD *)(v51 + 16) = *(_QWORD *)(v30 + 16);
                                                        v106 = 1 << *(_BYTE *)(v30 + 32);
                                                        v107 = -1;
                                                        if (v106 < 64)
                                                          v107 = ~(-1 << v106);
                                                        v108 = v107 & *(_QWORD *)(v30 + 64);
                                                        v109 = (unint64_t)(v106 + 63) >> 6;
                                                        while (1)
                                                        {
                                                          if (v108)
                                                          {
                                                            v110 = __clz(__rbit64(v108));
                                                            v108 &= v108 - 1;
                                                            v111 = v110 | (v105 << 6);
                                                          }
                                                          else
                                                          {
                                                            v121 = v105 + 1;
                                                            if (__OFADD__(v105, 1))
                                                              goto LABEL_186;
                                                            if (v121 >= v109)
                                                              break;
                                                            v122 = *(_QWORD *)(v103 + 8 * v121);
                                                            ++v105;
                                                            if (!v122)
                                                            {
                                                              v105 = v121 + 1;
                                                              if (v121 + 1 >= v109)
                                                                break;
                                                              v122 = *(_QWORD *)(v103 + 8 * v105);
                                                              if (!v122)
                                                              {
                                                                v105 = v121 + 2;
                                                                if (v121 + 2 >= v109)
                                                                  break;
                                                                v122 = *(_QWORD *)(v103 + 8 * v105);
                                                                if (!v122)
                                                                {
                                                                  v105 = v121 + 3;
                                                                  if (v121 + 3 >= v109)
                                                                    break;
                                                                  v122 = *(_QWORD *)(v103 + 8 * v105);
                                                                  if (!v122)
                                                                  {
                                                                    v105 = v121 + 4;
                                                                    if (v121 + 4 >= v109)
                                                                      break;
                                                                    v122 = *(_QWORD *)(v103 + 8 * v105);
                                                                    if (!v122)
                                                                    {
                                                                      v105 = v121 + 5;
                                                                      if (v121 + 5 >= v109)
                                                                        break;
                                                                      v122 = *(_QWORD *)(v103 + 8 * v105);
                                                                      if (!v122)
                                                                      {
                                                                        v105 = v121 + 6;
                                                                        if (v121 + 6 >= v109)
                                                                          break;
                                                                        v122 = *(_QWORD *)(v103 + 8 * v105);
                                                                        if (!v122)
                                                                        {
                                                                          v123 = v121 + 7;
                                                                          if (v123 >= v109)
                                                                            break;
                                                                          v124 = v1;
                                                                          v122 = *(_QWORD *)(v103 + 8 * v123);
                                                                          if (!v122)
                                                                          {
                                                                            while (1)
                                                                            {
                                                                              v105 = v123 + 1;
                                                                              if (__OFADD__(v123, 1))
                                                                                break;
                                                                              v1 = v124;
                                                                              if (v105 >= v109)
                                                                                goto LABEL_147;
                                                                              v122 = *(_QWORD *)(v103 + 8 * v105);
                                                                              ++v123;
                                                                              if (v122)
                                                                                goto LABEL_142;
                                                                            }
LABEL_190:
                                                                            __break(1u);
LABEL_191:
                                                                            __break(1u);
LABEL_192:
                                                                            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                                                                            __break(1u);
LABEL_193:
                                                                            JUMPOUT(0x1818A8D40);
                                                                          }
                                                                          v105 = v123;
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
LABEL_142:
                                                            v108 = (v122 - 1) & v122;
                                                            v111 = __clz(__rbit64(v122)) + (v105 << 6);
                                                          }
                                                          v112 = 16 * v111;
                                                          v113 = (uint64_t *)(*(_QWORD *)(v30 + 48) + v112);
                                                          v115 = *v113;
                                                          v114 = v113[1];
                                                          v116 = (uint64_t *)(*(_QWORD *)(v30 + 56) + v112);
                                                          v117 = *v116;
                                                          v118 = v116[1];
                                                          v119 = (_QWORD *)(*(_QWORD *)(v51 + 48) + v112);
                                                          *v119 = v115;
                                                          v119[1] = v114;
                                                          v120 = (_QWORD *)(*(_QWORD *)(v51 + 56) + v112);
                                                          *v120 = v117;
                                                          v120[1] = v118;
                                                          swift_bridgeObjectRetain();
                                                          swift_bridgeObjectRetain();
                                                        }
                                                      }
LABEL_147:
                                                      swift_bridgeObjectRelease();
                                                      v31 = v161;
                                                      if ((v50 & 1) == 0)
                                                        goto LABEL_40;
LABEL_37:
                                                      v54 = (uint64_t *)(*(_QWORD *)(v51 + 56) + 16 * v46);
                                                      *v54 = v157;
                                                      v54[1] = v163;
                                                      swift_bridgeObjectRelease();
                                                    }
                                                    else
                                                    {
                                                      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v49, v44);
                                                      v51 = v30;
                                                      v52 = specialized __RawDictionaryStorage.find<A>(_:)(0x737265626D756ELL, 0xE700000000000000);
                                                      if ((v50 & 1) != (v53 & 1))
                                                        goto LABEL_192;
                                                      v46 = v52;
                                                      v31 = v161;
                                                      if ((v50 & 1) != 0)
                                                        goto LABEL_37;
LABEL_40:
                                                      specialized _NativeDictionary._insert(at:key:value:)(v46, 0x737265626D756ELL, 0xE700000000000000, v157, v163, (_QWORD *)v51);
                                                    }
                                                    swift_bridgeObjectRelease();
LABEL_42:
                                                    __asm { BR              X9 }
                                                  }
LABEL_45:
                                                  __break(1u);
LABEL_46:
                                                  __break(1u);
                                                  goto LABEL_193;
                                                }
LABEL_19:
                                                v31 = v161;
                                                goto LABEL_42;
                                              }
LABEL_44:
                                              __break(1u);
                                              goto LABEL_45;
                                            }
LABEL_18:
                                            v30 = v26;
                                            if (v162)
                                              goto LABEL_33;
                                            goto LABEL_19;
                                          }
LABEL_16:
                                          v29 = (uint64_t *)(*(_QWORD *)(v26 + 56) + 16 * v21);
                                          *v29 = v159;
                                          v29[1] = v3;
                                          swift_bridgeObjectRelease();
                                          goto LABEL_23;
                                        }
                                        v58 = v76;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
LABEL_78:
                          v61 = (v75 - 1) & v75;
                          v64 = __clz(__rbit64(v75)) + (v58 << 6);
                        }
                        v65 = 16 * v64;
                        v66 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v65);
                        v68 = *v66;
                        v67 = v66[1];
                        v69 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v65);
                        v70 = *v69;
                        v71 = v69[1];
                        v72 = (_QWORD *)(*(_QWORD *)(v26 + 48) + v65);
                        *v72 = v68;
                        v72[1] = v67;
                        v73 = (_QWORD *)(*(_QWORD *)(v26 + 56) + v65);
                        *v73 = v70;
                        v73[1] = v71;
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v149 = v151;
      }
LABEL_177:
      v134 = (v150 - 1) & v150;
      v154 = v149;
      v136 = __clz(__rbit64(v150)) + (v149 << 6);
    }
    v138 = 16 * v136;
    v139 = *(_QWORD *)(v137 + 56);
    v140 = (uint64_t *)(*(_QWORD *)(v137 + 48) + v138);
    v142 = *v140;
    v141 = v140[1];
    v143 = v139 + v138;
    v144 = *(_QWORD *)(v139 + v138);
    v145 = *(_QWORD *)(v143 + 8);
    v146 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v138);
    *v146 = v142;
    v146[1] = v141;
    v147 = (_QWORD *)(*(_QWORD *)(v5 + 56) + v138);
    *v147 = v144;
    v147[1] = v145;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v130 = v154;
  }
}

uint64_t Locale.Language.Components.identifier.getter()
{
  Swift::String *v0;
  uint64_t countAndFlagsBits;
  void *object;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;

  object = v0[2]._object;
  countAndFlagsBits = v0[3]._countAndFlagsBits;
  v3 = v0[3]._object;
  v5 = v0[4]._object;
  v4 = v0[5]._countAndFlagsBits;
  v6 = v0[5]._object;
  if (v0->_object)
    String.append(_:)(v0[1]);
  if (object)
  {
    v7._countAndFlagsBits = 45;
    v7._object = (void *)0xE100000000000000;
    String.append(_:)(v7);
    v8._countAndFlagsBits = countAndFlagsBits;
    v8._object = v3;
    String.append(_:)(v8);
  }
  if (v5)
  {
    v9._countAndFlagsBits = 95;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    v10._countAndFlagsBits = v4;
    v10._object = v6;
    String.append(_:)(v10);
  }
  return 0;
}

uint64_t specialized static Locale.identifierWithKeywordValue(_:key:value:)(uint64_t a1)
{
  uint64_t v2;
  int v3;
  char __dst[158];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  swift_bridgeObjectRetain();
  v2 = String.utf8CString.getter();
  strlcpy(__dst, (const char *)(v2 + 32), 0x9DuLL);
  swift_release();
  String.utf8CString.getter();
  String.utf8CString.getter();
  v3 = uloc_setKeywordValue();
  swift_release();
  swift_release();
  if (v3 < 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
  }
  else
  {
    __dst[v3] = 0;
    a1 = String.init(cString:)();
    swift_bridgeObjectRelease();
  }
  return a1;
}

uint64_t Calendar.Identifier.cldrIdentifier.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1818A9F3C + 4 * byte_1820F8CA0[*v0]))(0x6169726F67657267, 0xE90000000000006ELL);
}

uint64_t sub_1818A9F3C()
{
  return 0x7473696864647562;
}

uint64_t sub_1818A9F54()
{
  return 0x6573656E696863;
}

uint64_t sub_1818A9F6C()
{
  return 0x636974706F63;
}

uint64_t sub_1818A9F80()
{
  return 0x6369706F69687465;
}

uint64_t sub_1818A9F98()
{
  return 0x61616F69687465;
}

uint64_t sub_1818A9FB0()
{
  return 0x776572626568;
}

uint64_t sub_1818A9FC4()
{
  return 0x313036386F7369;
}

uint64_t sub_1818A9FDC()
{
  return 0x6E6169646E69;
}

uint64_t sub_1818A9FF0()
{
  return 0x63696D616C7369;
}

uint64_t sub_1818AA008()
{
  return 0x2D63696D616C7369;
}

unint64_t sub_1818AA07C()
{
  return 0xD000000000000010;
}

uint64_t type metadata accessor for ICU.Enumerator()
{
  return objc_opt_self();
}

void type metadata accessor for CFErrorRef(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, &lazy cache variable for type metadata for CFErrorRef);
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance URL()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t result;

  v1 = *(void **)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  Hasher.init(_seed:)();
  v4 = v1;
  NSObject.hash(into:)();

  result = _foundation_swift_url_feature_enabled();
  if (!(_DWORD)result)
    return Hasher._finalize()();
  if (v2)
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v3)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    return Hasher._finalize()();
  }
  __break(1u);
  return result;
}

uint64_t destroy for PredicateCodableConfiguration()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t DateComponents.day.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 80);
}

BOOL IndexSet.isEmpty.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), sel_count) == 0;
}

uint64_t _MutableHandle.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

unint64_t URLComponents.queryItems.getter()
{
  return (unint64_t)URLComponents._URLComponents.queryItems(percentEncoded:)(0);
}

void NSMapRemove(NSMapTable *table, const void *key)
{
  if (!table)
    NSLog((NSString *)CFSTR("%s: map table argument is NULL"), "void NSMapRemove(NSMapTable * _Nonnull, const void * _Nullable)");
  -[NSMapTable removeObjectForKey:](table, "removeObjectForKey:", key);
}

void __message_handler_error_block_invoke(uint64_t a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x186DA8F78]();
  CFRelease(*(CFTypeRef *)(a1 + 32));
  objc_autoreleasePoolPop(v2);
}

CFCharacterSetRef static CharacterSet.newlines.getter@<X0>(CFCharacterSetRef *a1@<X8>)
{
  CFCharacterSetRef result;
  CFCharacterSetRef v3;

  result = CFCharacterSetGetPredefined(kCFCharacterSetNewline);
  if (result)
  {
    v3 = result;
    type metadata accessor for __CharacterSetStorage();
    result = (CFCharacterSetRef)swift_allocObject();
    *((_QWORD *)result + 2) = v3;
    *((_BYTE *)result + 24) = 0;
    *a1 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t CharacterSet.init(charactersIn:)@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  int v3;
  uint64_t v4;
  CFRange v5;

  v3 = HIDWORD(result) - result;
  if (HIDWORD(result) < result)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v3 == -1)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v5.location = result;
  v5.length = (v3 + 1);
  result = (uint64_t)CFCharacterSetCreateWithCharactersInRange(0, v5);
  if (result)
  {
    v4 = result;
    type metadata accessor for __CharacterSetStorage();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
    *(_BYTE *)(result + 24) = 0;
    *a2 = result;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  CFRange v4;

  if (HIDWORD(result) < result)
  {
    __break(1u);
  }
  else
  {
    v4.location = result;
    v4.length = (HIDWORD(result) - result);
    result = (uint64_t)CFCharacterSetCreateWithCharactersInRange(0, v4);
    if (result)
    {
      v3 = result;
      type metadata accessor for __CharacterSetStorage();
      result = swift_allocObject();
      *(_QWORD *)(result + 16) = v3;
      *(_BYTE *)(result + 24) = 0;
      *a2 = result;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for SetAlgebra.init() in conformance CharacterSet@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)CFCharacterSetCreateMutable(0);
  if (result)
  {
    v3 = result;
    type metadata accessor for __CharacterSetStorage();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
    *(_BYTE *)(result + 24) = 1;
    *a1 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t CharacterSet.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)CFCharacterSetCreateMutable(0);
  if (result)
  {
    v3 = result;
    type metadata accessor for __CharacterSetStorage();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
    *(_BYTE *)(result + 24) = 1;
    *a1 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t CharacterSet.init(charactersIn:)@<X0>(uint64_t *a1@<X8>)
{
  const __CFString *v2;
  CFCharacterSetRef v3;
  uint64_t result;

  v2 = (const __CFString *)String._bridgeToObjectiveCImpl()();
  v3 = CFCharacterSetCreateWithCharactersInString(0, v2);
  result = swift_unknownObjectRelease();
  if (v3)
  {
    type metadata accessor for __CharacterSetStorage();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
    *(_BYTE *)(result + 24) = 0;
    *a1 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance CharacterSet(void *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v6;

  swift_release();
  objc_msgSend(a1, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for CFCharacterSetRef(0);
  swift_dynamicCast();
  type metadata accessor for __CharacterSetStorage();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v6;
  *(_BYTE *)(v4 + 24) = 0;
  *a2 = v4;
  return 1;
}

void static CharacterSet._unconditionallyBridgeFromObjectiveC(_:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  uint64_t v4;
  CFMutableCharacterSetRef Mutable;
  CFMutableCharacterSetRef v6;
  uint64_t v7;

  if (a1)
  {
    v3 = a1;
    objc_msgSend(v3, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for CFCharacterSetRef(0);
    swift_dynamicCast();
    type metadata accessor for __CharacterSetStorage();
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = v7;
    *(_BYTE *)(v4 + 24) = 0;

LABEL_5:
    *a2 = v4;
    return;
  }
  Mutable = CFCharacterSetCreateMutable(0);
  if (Mutable)
  {
    v6 = Mutable;
    type metadata accessor for __CharacterSetStorage();
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = v6;
    *(_BYTE *)(v4 + 24) = 1;
    goto LABEL_5;
  }
  __break(1u);
}

void type metadata accessor for CFCharacterSetRef(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, &lazy cache variable for type metadata for CFCharacterSetRef);
}

uint64_t static CharacterSet.urlUserAllowed.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  uint64_t result;

  v3 = (id)a1();
  type metadata accessor for __CharacterSetStorage();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v3;
  *(_BYTE *)(result + 24) = 0;
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for __CharacterSetStorage()
{
  return objc_opt_self();
}

id partial apply for implicit closure #2 in implicit closure #1 in NSRunLoop.schedule(after:interval:tolerance:options:_:)()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_invalidate);
}

uint64_t destroy for ExpressionStructure()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

__n128 LocalizedStringResource.init(nsLocalizedStringResource:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  __n128 result;
  __n128 v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  id v22;
  char v23[32];

  outlined init with copy of Any(a1, (uint64_t)v23);
  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for _NSLocalizedStringResource);
  swift_dynamicCast();
  v4 = objc_msgSend(v22, sel_resource);

  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1);
  type metadata accessor for _NSLocalizedStringResourceSwiftWrapper();
  swift_dynamicCast();
  v5 = &v21[OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped];
  v6 = *(_QWORD *)&v21[OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 8];
  v7 = *(_QWORD *)&v21[OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 16];
  v18 = *(_QWORD *)&v21[OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 24];
  v19 = *(_QWORD *)&v21[OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped];
  v8 = *(_QWORD *)&v21[OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 32];
  v9 = *(_QWORD *)&v21[OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 48];
  v10 = *(_QWORD *)&v21[OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 80];
  v16 = *(void **)&v21[OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 72];
  v17 = *(_QWORD *)&v21[OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 40];
  v11 = *(_QWORD *)&v21[OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 88];
  v20 = *(_QWORD *)&v21[OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 96];
  v12 = *(_QWORD *)&v21[OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 104];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15 = *(__n128 *)(v5 + 56);
  swift_unknownObjectRetain();
  v13 = v16;
  swift_retain();
  swift_retain();

  *(_QWORD *)a2 = v19;
  *(_QWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 16) = v7;
  *(_QWORD *)(a2 + 24) = v18;
  *(_QWORD *)(a2 + 32) = v8;
  *(_QWORD *)(a2 + 40) = v17;
  *(_QWORD *)(a2 + 48) = v9;
  result = v15;
  *(__n128 *)(a2 + 56) = v15;
  *(_QWORD *)(a2 + 72) = v13;
  *(_QWORD *)(a2 + 80) = v10;
  *(_QWORD *)(a2 + 88) = v11;
  *(_QWORD *)(a2 + 96) = v20;
  *(_QWORD *)(a2 + 104) = v12;
  return result;
}

uint64_t LocalizedStringResource.nsLocalizedStringResource.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  objc_class *v10;
  char *v11;
  char *v12;
  id v13;
  id v14;
  id v15;
  uint64_t result;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v22;
  objc_super v23;

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  v6 = v1[4];
  v5 = v1[5];
  v7 = v1[6];
  v17 = v1[3];
  v18 = (void *)v1[9];
  v8 = v1[11];
  v9 = v1[13];
  v19 = v1[10];
  v20 = v1[12];
  v10 = (objc_class *)type metadata accessor for _NSLocalizedStringResourceSwiftWrapper();
  v22 = *(_OWORD *)(v1 + 7);
  v11 = (char *)objc_allocWithZone(v10);
  v12 = &v11[OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped];
  *(_QWORD *)v12 = v2;
  *((_QWORD *)v12 + 1) = v3;
  *((_QWORD *)v12 + 2) = v4;
  *((_QWORD *)v12 + 3) = v17;
  *((_QWORD *)v12 + 4) = v6;
  *((_QWORD *)v12 + 5) = v5;
  *((_QWORD *)v12 + 6) = v7;
  *(_OWORD *)(v12 + 56) = v22;
  *((_QWORD *)v12 + 9) = v18;
  *((_QWORD *)v12 + 10) = v19;
  *((_QWORD *)v12 + 11) = v8;
  *((_QWORD *)v12 + 12) = v20;
  *((_QWORD *)v12 + 13) = v9;
  v23.receiver = v11;
  v23.super_class = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  v13 = v18;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v14 = objc_msgSendSuper2(&v23, sel_init);
  v15 = objc_msgSend(objc_allocWithZone((Class)_NSLocalizedStringResource), sel_initWithResource_, v14);

  result = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for _NSLocalizedStringResource);
  a1[3] = result;
  *a1 = v15;
  return result;
}

uint64_t type metadata accessor for _NSLocalizedStringResourceSwiftWrapper()
{
  return objc_opt_self();
}

void static Date.distantPast.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xC22D63C8C5000000;
}

id protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance Date(void *a1, uint64_t a2)
{
  id result;
  uint64_t v4;

  result = objc_msgSend(a1, sel_timeIntervalSinceReferenceDate);
  *(_QWORD *)a2 = v4;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

NSString *_NSFullMethodName(objc_class *a1, const char *a2)
{
  objc_class *v4;
  uint64_t v5;
  const char *Name;
  const char *v7;
  NSString *v8;
  char *v10[2];

  v10[1] = *(char **)MEMORY[0x1E0C80C00];
  v4 = (objc_class *)objc_opt_class();
  v10[0] = 0;
  if (v4 == a1)
    v5 = 43;
  else
    v5 = 45;
  if (v4)
    Name = class_getName(v4);
  else
    Name = "nil";
  v7 = sel_getName(a2);
  asprintf(v10, "%c[%s %s]", v5, Name, v7);
  if (!v10[0])
    return 0;
  v8 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
  free(v10[0]);
  return v8;
}

uint64_t KeyPathComparator.init<A>(_:order:)@<X0>(_QWORD *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  void (*v17)(uint64_t@<X0>, char@<W1>, uint64_t *@<X8>);
  ValueMetadata *v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32[2];
  _QWORD *v33;

  v7 = *a1;
  v33 = a1;
  v8 = (uint64_t *)(v7 + *MEMORY[0x1E0DEE2A8]);
  v9 = v8[1];
  v31 = *v8;
  type metadata accessor for KeyPath();
  swift_retain();
  swift_dynamicCast();
  v10 = *(_QWORD *)&v32[0];
  *(_QWORD *)a4 = *(_QWORD *)&v32[0];
  v30 = a3;
  if (swift_dynamicCastMetatype())
  {
    v12 = lazy protocol witness table accessor for type String.StandardComparator and conformance String.StandardComparator();
    v13 = 0;
    v14 = 0;
    v15 = 0;
    *(_QWORD *)(a4 + 8) = 833;
    *(_WORD *)(a4 + 16) = 1;
    v16 = specialized closure #3 in AnySortComparator.init<A>(_:);
    v17 = (void (*)(uint64_t@<X0>, char@<W1>, uint64_t *@<X8>))specialized thunk for @escaping @callee_guaranteed @Sendable (@inout Hashable & Sendable, @unowned SortOrder) -> (@out AnyHashable);
    v18 = &type metadata for String.StandardComparator;
    v19 = specialized closure #1 in AnySortComparator.init<A>(_:);
  }
  else
  {
    v18 = (ValueMetadata *)type metadata accessor for ComparableComparator(0, v9, a3, v11);
    v28 = MEMORY[0x186DA9D64](&protocol conformance descriptor for ComparableComparator<A>, v18);
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = v18;
    v29 = a2;
    v20 = MEMORY[0x186DA9D64](&protocol conformance descriptor for ComparableComparator<A>, v18);
    *(_QWORD *)(v13 + 24) = v20;
    v21 = swift_allocObject();
    *(_QWORD *)(v21 + 16) = v18;
    *(_QWORD *)(v21 + 24) = v20;
    v14 = swift_allocObject();
    *(_QWORD *)(v14 + 16) = partial apply for closure #2 in AnySortComparator.init<A>(_:);
    *(_QWORD *)(v14 + 24) = v21;
    v15 = swift_allocObject();
    v12 = v28;
    *(_QWORD *)(v15 + 16) = v18;
    *(_QWORD *)(v15 + 24) = v20;
    a2 = v29;
    *(_BYTE *)(a4 + 8) = 0;
    v16 = partial apply for closure #3 in AnySortComparator.init<A>(_:);
    v17 = (void (*)(uint64_t@<X0>, char@<W1>, uint64_t *@<X8>))partial apply for thunk for @escaping @callee_guaranteed @Sendable (@inout Hashable & Sendable, @unowned SortOrder) -> (@out AnyHashable);
    v19 = partial apply for closure #1 in AnySortComparator.init<A>(_:);
  }
  *(_QWORD *)(a4 + 32) = v18;
  *(_QWORD *)(a4 + 40) = v12;
  *(_QWORD *)(a4 + 48) = v19;
  *(_QWORD *)(a4 + 56) = v13;
  *(_QWORD *)(a4 + 64) = v17;
  *(_QWORD *)(a4 + 72) = v14;
  v22 = a2 & 1;
  *(_QWORD *)(a4 + 80) = v16;
  *(_QWORD *)(a4 + 88) = v15;
  swift_retain();
  v23 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  v25 = v24;
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = v31;
  *(_QWORD *)(v26 + 24) = v9;
  *(_QWORD *)(v26 + 32) = v30;
  *(_QWORD *)(v26 + 40) = v23;
  *(_BYTE *)(v26 + 48) = v25 & 1;
  *(_QWORD *)(v26 + 56) = v10;
  *(_QWORD *)(a4 + 96) = partial apply for closure #1 in KeyPathComparator.init<A>(_:order:);
  *(_QWORD *)(a4 + 104) = v26;
  swift_retain();
  swift_retain();
  v17(a4 + 8, v22, (uint64_t *)v32);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a4 + 8);
  outlined init with take of any PredicateExpression<Self.Output == B1>(v32, a4 + 8);
  swift_release();
  return swift_release();
}

{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  void (*v19)(uint64_t@<X0>, char@<W1>, uint64_t *@<X8>);
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37[2];
  _QWORD *v38;

  v7 = *a1;
  v38 = a1;
  v8 = (uint64_t *)(v7 + *MEMORY[0x1E0DEE2A8]);
  v9 = v8[1];
  v36 = *v8;
  type metadata accessor for KeyPath();
  swift_retain();
  swift_dynamicCast();
  v10 = *(_QWORD *)&v37[0];
  *(_QWORD *)a4 = *(_QWORD *)&v37[0];
  v11 = *(_QWORD *)(v9 + 16);
  v34 = a3;
  v35 = v11;
  if (swift_dynamicCastMetatype())
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptionalComparator<String.StandardComparator>);
    v14 = lazy protocol witness table accessor for type OptionalComparator<String.StandardComparator> and conformance OptionalComparator<A>();
    v15 = 0;
    v16 = 0;
    v17 = 0;
    *(_QWORD *)(a4 + 8) = 833;
    *(_WORD *)(a4 + 16) = 1;
    v18 = specialized closure #3 in AnySortComparator.init<A>(_:);
    v19 = (void (*)(uint64_t@<X0>, char@<W1>, uint64_t *@<X8>))specialized thunk for @escaping @callee_guaranteed @Sendable (@inout Hashable & Sendable, @unowned SortOrder) -> (@out AnyHashable);
    v20 = specialized closure #1 in AnySortComparator.init<A>(_:);
  }
  else
  {
    v21 = type metadata accessor for ComparableComparator(255, v11, a3, v12);
    v22 = MEMORY[0x186DA9D64](&protocol conformance descriptor for ComparableComparator<A>, v21);
    v13 = type metadata accessor for OptionalComparator(0, v21, v22, v23);
    v33 = MEMORY[0x186DA9D64](&protocol conformance descriptor for OptionalComparator<A>, v13);
    v15 = swift_allocObject();
    *(_QWORD *)(v15 + 16) = v13;
    v24 = a2;
    v25 = MEMORY[0x186DA9D64](&protocol conformance descriptor for OptionalComparator<A>, v13);
    *(_QWORD *)(v15 + 24) = v25;
    v26 = swift_allocObject();
    *(_QWORD *)(v26 + 16) = v13;
    *(_QWORD *)(v26 + 24) = v25;
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = closure #2 in AnySortComparator.init<A>(_:)partial apply;
    *(_QWORD *)(v16 + 24) = v26;
    v17 = swift_allocObject();
    v14 = v33;
    *(_QWORD *)(v17 + 16) = v13;
    *(_QWORD *)(v17 + 24) = v25;
    a2 = v24;
    *(_BYTE *)(a4 + 8) = 0;
    v18 = (uint64_t (*)(uint64_t))closure #3 in AnySortComparator.init<A>(_:)partial apply;
    v19 = (void (*)(uint64_t@<X0>, char@<W1>, uint64_t *@<X8>))partial apply for thunk for @escaping @callee_guaranteed @Sendable (@inout Hashable & Sendable, @unowned SortOrder) -> (@out AnyHashable);
    v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in AnySortComparator.init<A>(_:)partial apply;
  }
  *(_QWORD *)(a4 + 32) = v13;
  *(_QWORD *)(a4 + 40) = v14;
  *(_QWORD *)(a4 + 48) = v20;
  *(_QWORD *)(a4 + 56) = v15;
  *(_QWORD *)(a4 + 64) = v19;
  *(_QWORD *)(a4 + 72) = v16;
  v27 = a2 & 1;
  *(_QWORD *)(a4 + 80) = v18;
  *(_QWORD *)(a4 + 88) = v17;
  swift_retain();
  v28 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  v30 = v29;
  v31 = swift_allocObject();
  *(_QWORD *)(v31 + 16) = v36;
  *(_QWORD *)(v31 + 24) = v35;
  *(_QWORD *)(v31 + 32) = v34;
  *(_QWORD *)(v31 + 40) = v28;
  *(_BYTE *)(v31 + 48) = v30 & 1;
  *(_QWORD *)(v31 + 56) = v10;
  *(_QWORD *)(a4 + 96) = partial apply for closure #1 in KeyPathComparator.init<A>(_:order:);
  *(_QWORD *)(a4 + 104) = v31;
  swift_retain();
  swift_retain();
  v19(a4 + 8, v27, (uint64_t *)v37);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a4 + 8);
  outlined init with take of any PredicateExpression<Self.Output == B1>(v37, a4 + 8);
  swift_release();
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type String.StandardComparator and conformance String.StandardComparator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.StandardComparator and conformance String.StandardComparator;
  if (!lazy protocol witness table cache variable for type String.StandardComparator and conformance String.StandardComparator)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.StandardComparator, &type metadata for String.StandardComparator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.StandardComparator and conformance String.StandardComparator);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.StandardComparator and conformance String.StandardComparator;
  if (!lazy protocol witness table cache variable for type String.StandardComparator and conformance String.StandardComparator)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.StandardComparator, &type metadata for String.StandardComparator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.StandardComparator and conformance String.StandardComparator);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.StandardComparator and conformance String.StandardComparator;
  if (!lazy protocol witness table cache variable for type String.StandardComparator and conformance String.StandardComparator)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.StandardComparator, &type metadata for String.StandardComparator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.StandardComparator and conformance String.StandardComparator);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.StandardComparator and conformance String.StandardComparator;
  if (!lazy protocol witness table cache variable for type String.StandardComparator and conformance String.StandardComparator)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.StandardComparator, &type metadata for String.StandardComparator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.StandardComparator and conformance String.StandardComparator);
  }
  return result;
}

unint64_t NSCoder.decodeDictionary<A, B>(withKeyClass:objectClass:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  void *v7;
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v7 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_18205C850;
  *(_QWORD *)(v12 + 32) = a1;
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18205C850;
  *(_QWORD *)(inited + 32) = a2;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
  v14 = _ContiguousArrayBuffer._asCocoaArray()();
  specialized _arrayForceCast<A, B>(_:)(inited);
  v15 = _ContiguousArrayBuffer._asCocoaArray()();
  v16 = String._bridgeToObjectiveCImpl()();
  v17 = (id)__NSCoderDecodeDictionaryWithKeysOfClassesObjectsOfClassesForKey(v7, v14, v15, v16);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if (v17)
  {
    v18 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v17);

    swift_setDeallocating();
    swift_bridgeObjectRelease();
    v19 = MEMORY[0x186DA9D64](MEMORY[0x1E0DEFCF8], a5);
    v20 = specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(v18, a5, a6, v19);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_setDeallocating();
    swift_bridgeObjectRelease();
    return 0;
  }
  return v20;
}

uint64_t NSCoder.decodeArrayOfObjects<A>(ofClass:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_18205C850;
  *(_QWORD *)(v7 + 32) = a1;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
  v8 = _ContiguousArrayBuffer._asCocoaArray()();
  v9 = String._bridgeToObjectiveCImpl()();
  v10 = (id)__NSCoderDecodeArrayOfObjectsOfClassesForKey(v4, v8, v9);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if (v10)
  {
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();

    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    v11 = swift_dynamicCastClass();
    if (v11)
    {
      v12 = v11;
      swift_bridgeObjectRelease();

    }
    else
    {
      swift_unknownObjectRelease();
      objc_msgSend(v10, sel_copy);
      v14 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      v12 = specialized _arrayForceCast<A, B>(_:)(v14);
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
    }
    v15 = specialized _arrayConditionalCast<A, B>(_:)(v12, a4);
    swift_bridgeObjectRelease();
    return v15;
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
}

void sub_1818ABA14(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x1818AB974);
  }
  _Unwind_Resume(exc_buf);
}

void sub_1818ABAB0(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  objc_begin_catch(a1);
  *(_QWORD *)(v1 + v2) = 0;
  objc_exception_rethrow();
}

void sub_1818ABAC0(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t __NSCoderDecodeArrayOfObjectsOfClassesForKey(void *a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(a1, "decodeArrayOfObjectsOfClasses:forKey:", objc_msgSend(MEMORY[0x1E0C99E60], "setWithArray:", a2), a3);
}

uint64_t __NSCoderDecodeDictionaryWithKeysOfClassesObjectsOfClassesForKey(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = objc_msgSend(MEMORY[0x1E0C99E60], "setWithArray:", a2);
  return objc_msgSend(a1, "decodeDictionaryWithKeysOfClasses:objectsOfClasses:forKey:", v7, objc_msgSend(MEMORY[0x1E0C99E60], "setWithArray:", a3), a4);
}

unint64_t specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t result;
  uint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  void (*v67)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v68)(uint64_t, uint64_t, uint64_t);
  char *v69;
  char v70;
  uint64_t v71;
  void (*v72)(char *, uint64_t, uint64_t, uint64_t);
  char *v73;
  void (*v74)(char *, char *, uint64_t);
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  _QWORD *v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char v94;
  unint64_t v95;
  BOOL v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  char *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  int v109;
  _QWORD *v110;
  void (*v111)(char *, uint64_t, uint64_t, uint64_t);
  void (*v112)(char *, char *, uint64_t);
  char v113;
  void (*v114)(char *, uint64_t, uint64_t, uint64_t);
  void (*v115)(char *, char *, uint64_t);
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  char *v129;
  char *v130;
  unint64_t v131;
  char v132;
  _QWORD *v133;
  uint64_t v134;
  BOOL v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *i;
  char *v144;
  char *v145;
  char *v146;
  char *v147;
  char *v148;
  char *v149;
  char *v150;
  char *v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t TupleTypeMetadata2;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  char *v164;
  char *v165;
  char *v166;
  _QWORD *v167;
  uint64_t v168;
  _QWORD *v169;
  char v170[8];
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  uint64_t v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  uint64_t v180;

  v139 = type metadata accessor for Optional();
  v138 = *(_QWORD *)(v139 - 8);
  MEMORY[0x1E0C80A78](v139);
  v155 = (char *)&v137 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v137 - v10;
  v141 = type metadata accessor for Optional();
  v140 = *(_QWORD *)(v141 - 8);
  MEMORY[0x1E0C80A78](v141);
  v156 = (uint64_t)&v137 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v162 = (char *)&v137 - v14;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v153 = (char *)&v137 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v154 = (char *)&v137 - v17;
  v159 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](v159);
  v152 = (char *)&v137 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v148 = (char *)&v137 - v20;
  v21 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v22);
  v166 = (char *)&v137 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24);
  v151 = (char *)&v137 - v25;
  MEMORY[0x1E0C80A78](v26);
  v150 = (char *)&v137 - v27;
  MEMORY[0x1E0C80A78](v28);
  v30 = (char *)&v137 - v29;
  MEMORY[0x1E0C80A78](v31);
  v147 = (char *)&v137 - v32;
  MEMORY[0x1E0C80A78](v33);
  v146 = (char *)&v137 - v34;
  v35 = *(_QWORD **)(a2 - 8);
  MEMORY[0x1E0C80A78](v36);
  v165 = (char *)&v137 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v38);
  v157 = (uint64_t)&v137 - v39;
  MEMORY[0x1E0C80A78](v40);
  v149 = (char *)&v137 - v41;
  MEMORY[0x1E0C80A78](v42);
  v145 = (char *)&v137 - v43;
  MEMORY[0x1E0C80A78](v44);
  v164 = (char *)&v137 - v45;
  MEMORY[0x1E0C80A78](v46);
  v144 = (char *)&v137 - v47;
  v48 = *(_QWORD *)(a1 + 16);
  v161 = a4;
  if (v48)
  {
    type metadata accessor for _DictionaryStorage();
    v169 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v169 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  v49 = *(_QWORD *)(a1 + 64);
  v158 = a1 + 64;
  v50 = -1 << *(_BYTE *)(a1 + 32);
  v142 = ~v50;
  if (-v50 < 64)
    v51 = ~(-1 << -(char)v50);
  else
    v51 = -1;
  v52 = v51 & v49;
  v163 = a1;
  v168 = v21;
  v167 = v35;
  v53 = v157;
  if (a2 == MEMORY[0x1E0DEA968])
  {
    v153 = v30;
    v152 = (char *)((unint64_t)(63 - v50) >> 6);
    v157 = (uint64_t)&v178 + 8;
    v156 = (uint64_t)&v173 + 8;
    v151 = (char *)(v169 + 8);
    result = swift_bridgeObjectRetain();
    v98 = 0;
    v99 = MEMORY[0x1E0DEA968];
    v155 = (char *)(MEMORY[0x1E0DEE9B8] + 8);
    for (i = v11; ; v11 = i)
    {
      v101 = v164;
      if (v52)
      {
        v166 = (char *)((v52 - 1) & v52);
        v102 = __clz(__rbit64(v52)) | (v98 << 6);
        v103 = v98;
      }
      else
      {
        v104 = v98 + 1;
        if (__OFADD__(v98, 1))
          goto LABEL_79;
        if (v104 >= (uint64_t)v152)
          goto LABEL_74;
        v105 = *(_QWORD *)(v158 + 8 * v104);
        v103 = v98 + 1;
        if (!v105)
        {
          v103 = v98 + 2;
          if (v98 + 2 >= (uint64_t)v152)
            goto LABEL_74;
          v105 = *(_QWORD *)(v158 + 8 * v103);
          if (!v105)
          {
            v103 = v98 + 3;
            if (v98 + 3 >= (uint64_t)v152)
              goto LABEL_74;
            v105 = *(_QWORD *)(v158 + 8 * v103);
            if (!v105)
            {
              v103 = v98 + 4;
              if (v98 + 4 >= (uint64_t)v152)
                goto LABEL_74;
              v105 = *(_QWORD *)(v158 + 8 * v103);
              if (!v105)
              {
                v106 = (char *)(v98 + 5);
                if (v98 + 5 >= (uint64_t)v152)
                  goto LABEL_74;
                v105 = *(_QWORD *)(v158 + 8 * (_QWORD)v106);
                if (!v105)
                {
                  while (1)
                  {
                    v103 = (uint64_t)(v106 + 1);
                    if (__OFADD__(v106, 1))
                      goto LABEL_81;
                    if (v103 >= (uint64_t)v152)
                      break;
                    v105 = *(_QWORD *)(v158 + 8 * v103);
                    ++v106;
                    if (v105)
                      goto LABEL_60;
                  }
LABEL_74:
                  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
                  return (unint64_t)v169;
                }
                v103 = v98 + 5;
              }
            }
          }
        }
LABEL_60:
        v166 = (char *)((v105 - 1) & v105);
        v102 = __clz(__rbit64(v105)) + (v103 << 6);
      }
      v107 = v163;
      outlined init with copy of AnyHashable(*(_QWORD *)(v163 + 48) + 40 * v102, (uint64_t)&v176);
      outlined init with copy of Any(*(_QWORD *)(v107 + 56) + 32 * v102, v157);
      v173 = v178;
      v174 = v179;
      v175 = v180;
      v171 = v176;
      v172 = v177;
      outlined init with copy of AnyHashable((uint64_t)&v171, (uint64_t)v170);
      v108 = v162;
      v109 = swift_dynamicCast();
      v110 = v167;
      v111 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v167[7];
      if (!v109)
        break;
      v111(v108, 0, 1, v99);
      v112 = (void (*)(char *, char *, uint64_t))v110[4];
      v112(v101, v108, v99);
      outlined init with copy of Any(v156, (uint64_t)v170);
      outlined destroy of Any?((uint64_t)&v171, &demangling cache variable for type metadata for (key: AnyHashable, value: Any));
      v113 = swift_dynamicCast();
      v114 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56);
      if ((v113 & 1) == 0)
      {
        v114(v11, 1, 1, a3);
        ((void (*)(char *, _QWORD))v167[1])(v101, MEMORY[0x1E0DEA968]);
        (*(void (**)(char *, uint64_t))(v138 + 8))(v11, v139);
        goto LABEL_73;
      }
      v165 = (char *)v103;
      v114(v11, 0, 1, a3);
      v115 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
      v116 = v101;
      v117 = v147;
      v115(v147, v11, a3);
      v118 = v99;
      v119 = (uint64_t)v154;
      v120 = &v154[*(int *)(TupleTypeMetadata2 + 48)];
      v112(v154, v116, v118);
      v115(v120, v117, a3);
      v121 = v21;
      v122 = v159;
      v123 = (uint64_t)v148;
      v124 = &v148[*(int *)(v159 + 48)];
      v112(v148, (char *)v119, v118);
      v115(v124, v120, a3);
      v125 = v123 + *(int *)(v122 + 48);
      v126 = v144;
      v112(v144, (char *)v123, v118);
      v127 = v146;
      v115(v146, (char *)v125, a3);
      v128 = (uint64_t)v145;
      v112(v145, v126, v118);
      v129 = v153;
      v130 = v127;
      v99 = v118;
      v115(v153, v130, a3);
      result = __RawDictionaryStorage.find<A>(_:)(v128, v118, v161);
      v131 = result;
      if ((v132 & 1) != 0)
      {
        v100 = v169;
        ((void (*)(unint64_t, uint64_t, uint64_t))v167[5])(v169[6] + v167[9] * result, v128, v118);
        result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v121 + 40))(v100[7] + *(_QWORD *)(v121 + 72) * v131, v129, a3);
        v98 = (uint64_t)v165;
        v52 = (unint64_t)v166;
        v21 = v121;
      }
      else
      {
        if (v169[2] >= v169[3])
        {
LABEL_77:
          __break(1u);
LABEL_78:
          __break(1u);
LABEL_79:
          __break(1u);
          goto LABEL_80;
        }
        *(_QWORD *)&v151[(result >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << result;
        v133 = v169;
        v112((char *)(v169[6] + v167[9] * result), (char *)v128, v99);
        v21 = v168;
        result = ((uint64_t (*)(unint64_t, char *, uint64_t))v115)(v133[7] + *(_QWORD *)(v168 + 72) * v131, v129, a3);
        v134 = v133[2];
        v135 = __OFADD__(v134, 1);
        v136 = v134 + 1;
        if (v135)
          goto LABEL_78;
        v169[2] = v136;
        v98 = (uint64_t)v165;
        v52 = (unint64_t)v166;
      }
    }
    v111(v108, 1, 1, MEMORY[0x1E0DEA968]);
    outlined destroy of Any?((uint64_t)&v171, &demangling cache variable for type metadata for (key: AnyHashable, value: Any));
    (*(void (**)(char *, uint64_t))(v140 + 8))(v108, v141);
LABEL_73:
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();
    swift_release();
    return 0;
  }
  v145 = (char *)((unint64_t)(63 - v50) >> 6);
  v154 = (char *)&v178 + 8;
  v148 = (char *)&v173 + 8;
  v54 = v169;
  swift_bridgeObjectRetain();
  result = swift_retain();
  v56 = 0;
  v147 = (char *)(MEMORY[0x1E0DEE9B8] + 8);
  v146 = (char *)(v54 + 8);
  while (1)
  {
    if (v52)
    {
      v164 = (char *)((v52 - 1) & v52);
      v59 = __clz(__rbit64(v52)) | (v56 << 6);
      v60 = v56;
      goto LABEL_29;
    }
    v61 = v56 + 1;
    if (__OFADD__(v56, 1))
    {
LABEL_76:
      __break(1u);
      goto LABEL_77;
    }
    if (v61 >= (uint64_t)v145)
      goto LABEL_70;
    v62 = *(_QWORD *)(v158 + 8 * v61);
    v60 = v56 + 1;
    if (!v62)
    {
      v60 = v56 + 2;
      if (v56 + 2 >= (uint64_t)v145)
        goto LABEL_70;
      v62 = *(_QWORD *)(v158 + 8 * v60);
      if (!v62)
      {
        v60 = v56 + 3;
        if (v56 + 3 >= (uint64_t)v145)
          goto LABEL_70;
        v62 = *(_QWORD *)(v158 + 8 * v60);
        if (!v62)
        {
          v60 = v56 + 4;
          if (v56 + 4 >= (uint64_t)v145)
            goto LABEL_70;
          v62 = *(_QWORD *)(v158 + 8 * v60);
          if (!v62)
            break;
        }
      }
    }
LABEL_28:
    v164 = (char *)((v62 - 1) & v62);
    v59 = __clz(__rbit64(v62)) + (v60 << 6);
LABEL_29:
    v64 = v163;
    outlined init with copy of AnyHashable(*(_QWORD *)(v163 + 48) + 40 * v59, (uint64_t)&v176);
    outlined init with copy of Any(*(_QWORD *)(v64 + 56) + 32 * v59, (uint64_t)v154);
    v173 = v178;
    v174 = v179;
    v175 = v180;
    v171 = v176;
    v172 = v177;
    outlined init with copy of AnyHashable((uint64_t)&v171, (uint64_t)v170);
    v65 = v156;
    v66 = swift_dynamicCast();
    v67 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v35[7];
    if (!v66)
    {
      v67(v65, 1, 1, a2);
      outlined destroy of Any?((uint64_t)&v171, &demangling cache variable for type metadata for (key: AnyHashable, value: Any));
      (*(void (**)(uint64_t, uint64_t))(v140 + 8))(v65, v141);
LABEL_69:
      swift_release();
      goto LABEL_73;
    }
    v67(v65, 0, 1, a2);
    v68 = (void (*)(uint64_t, uint64_t, uint64_t))v35[4];
    v68(v53, v65, a2);
    outlined init with copy of Any((uint64_t)v148, (uint64_t)v170);
    outlined destroy of Any?((uint64_t)&v171, &demangling cache variable for type metadata for (key: AnyHashable, value: Any));
    v69 = v155;
    v70 = swift_dynamicCast();
    v71 = v168;
    v72 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v168 + 56);
    if ((v70 & 1) == 0)
    {
      v72(v69, 1, 1, a3);
      ((void (*)(uint64_t, uint64_t))v167[1])(v53, a2);
      (*(void (**)(char *, uint64_t))(v138 + 8))(v69, v139);
      goto LABEL_69;
    }
    v162 = (char *)v60;
    v72(v69, 0, 1, a3);
    v73 = v69;
    v74 = *(void (**)(char *, char *, uint64_t))(v71 + 32);
    v75 = v151;
    v74(v151, v73, a3);
    v76 = v153;
    v77 = &v153[*(int *)(TupleTypeMetadata2 + 48)];
    v68((uint64_t)v153, v53, a2);
    v74(v77, v75, a3);
    v78 = v159;
    v79 = a2;
    v80 = a3;
    v81 = v152;
    v82 = &v152[*(int *)(v159 + 48)];
    v83 = v76;
    v84 = v169;
    v68((uint64_t)v152, (uint64_t)v83, v79);
    v74(v82, v77, v80);
    v85 = &v81[*(int *)(v78 + 48)];
    v86 = v149;
    v87 = v81;
    a3 = v80;
    a2 = v79;
    v68((uint64_t)v149, (uint64_t)v87, v79);
    v88 = v150;
    v74(v150, v85, a3);
    v89 = v86;
    v90 = v146;
    v68((uint64_t)v165, (uint64_t)v89, v79);
    v74(v166, v88, a3);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v91 = -1 << *((_BYTE *)v84 + 32);
    v92 = result & ~v91;
    v93 = v92 >> 6;
    if (((-1 << v92) & ~*(_QWORD *)&v90[8 * (v92 >> 6)]) != 0)
    {
      v57 = __clz(__rbit64((-1 << v92) & ~*(_QWORD *)&v90[8 * (v92 >> 6)])) | v92 & 0x7FFFFFFFFFFFFFC0;
      v35 = v167;
      v53 = v157;
    }
    else
    {
      v94 = 0;
      v95 = (unint64_t)(63 - v91) >> 6;
      v35 = v167;
      v53 = v157;
      do
      {
        if (++v93 == v95 && (v94 & 1) != 0)
        {
          __break(1u);
          goto LABEL_76;
        }
        v96 = v93 == v95;
        if (v93 == v95)
          v93 = 0;
        v94 |= v96;
        v97 = *(_QWORD *)&v90[8 * v93];
      }
      while (v97 == -1);
      v57 = __clz(__rbit64(~v97)) + (v93 << 6);
    }
    *(_QWORD *)&v90[(v57 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v57;
    v58 = v169;
    v68(v169[6] + v35[9] * v57, (uint64_t)v165, a2);
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v74)(v58[7] + *(_QWORD *)(v168 + 72) * v57, v166, a3);
    ++v58[2];
    v56 = (uint64_t)v162;
    v52 = (unint64_t)v164;
  }
  v63 = (char *)(v56 + 5);
  if (v56 + 5 >= (uint64_t)v145)
  {
LABEL_70:
    swift_release();
    goto LABEL_74;
  }
  v62 = *(_QWORD *)(v158 + 8 * (_QWORD)v63);
  if (v62)
  {
    v60 = v56 + 5;
    goto LABEL_28;
  }
  while (1)
  {
    v60 = (uint64_t)(v63 + 1);
    if (__OFADD__(v63, 1))
      break;
    if (v60 >= (uint64_t)v145)
      goto LABEL_70;
    v62 = *(_QWORD *)(v158 + 8 * v60);
    ++v63;
    if (v62)
      goto LABEL_28;
  }
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
  return result;
}

uint64_t specialized _arrayConditionalCast<A, B>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  void (*v19)(char *, char *, uint64_t);
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  _BYTE v28[32];
  uint64_t v29;

  v4 = type metadata accessor for Optional();
  v23 = *(_QWORD *)(v4 - 8);
  v24 = v4;
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v23 - v5;
  v7 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v23 - v12;
  v14 = *(_QWORD *)(a1 + 16);
  v29 = MEMORY[0x1E0DEE9D8];
  v25 = type metadata accessor for ContiguousArray();
  ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 0);
  v15 = v29;
  if (v14)
  {
    v16 = a1 + 32;
    v26 = v10;
    v27 = MEMORY[0x1E0DEE9B8] + 8;
    while (1)
    {
      outlined init with copy of Any(v16, (uint64_t)v28);
      v17 = swift_dynamicCast();
      v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
      if (!v17)
        break;
      v18(v6, 0, 1, a2);
      v19 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
      v19(v13, v6, a2);
      v19(v10, v13, a2);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v15 + 16) + 1, 1);
        v15 = v29;
      }
      v21 = *(_QWORD *)(v15 + 16);
      v20 = *(_QWORD *)(v15 + 24);
      if (v21 >= v20 >> 1)
      {
        ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
        v15 = v29;
      }
      *(_QWORD *)(v15 + 16) = v21 + 1;
      v10 = v26;
      v19((char *)(v15+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v21), v26, a2);
      v16 += 32;
      if (!--v14)
        return v15;
    }
    v18(v6, 1, 1, a2);
    swift_release();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v6, v24);
    return 0;
  }
  return v15;
}

uint64_t specialized _arrayForceCast<A, B>(_:)(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v8;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v4 = a1 + 32;
    v2 = v9;
    do
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1);
        v2 = v9;
      }
      v6 = *(_QWORD *)(v2 + 16);
      v5 = *(_QWORD *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1);
        v2 = v9;
      }
      *(_QWORD *)(v2 + 16) = v6 + 1;
      outlined init with take of Any(&v8, (_OWORD *)(v2 + 32 * v6 + 32));
      v4 += 8;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t Notification.init(name:object:userInfo:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;

  *(_QWORD *)(a4 + 40) = 0;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 8) = 0u;
  *(_QWORD *)a4 = a1;
  outlined assign with take of Any?(a2, a4 + 8);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a4 + 40) = a3;
  return result;
}

uint64_t removeNotificationsFromQueue(void *a1, void *a2, int a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  void *v16;
  void *v17;

  v4 = 0;
  if (!a1)
    return v4;
  v5 = a4;
  if (!a4)
    return v4;
  if (!objc_msgSend(a1, "count"))
    return 0;
  if ((v5 & 1) != 0)
  {
    v9 = (void *)objc_msgSend(a2, "name");
    if ((v5 & 2) == 0)
      goto LABEL_6;
  }
  else
  {
    v9 = 0;
    if ((v5 & 2) == 0)
    {
LABEL_6:
      v10 = 0;
      goto LABEL_9;
    }
  }
  v10 = objc_msgSend(a2, "object");
LABEL_9:
  v11 = objc_msgSend(a1, "count");
  if (v11 < 1)
    return 0;
  v12 = v11;
  v4 = 0;
  v13 = 0;
  v14 = 0;
  v15 = a3 ^ 1;
  do
  {
    v16 = (void *)objc_msgSend(a1, "objectAtIndex:", v13);
    v17 = v16;
    if (((v5 & 2) == 0 || v10 == objc_msgSend(v16, "object"))
      && ((v5 & 1) == 0 || objc_msgSend(v9, "isEqual:", objc_msgSend(v17, "name"))))
    {
      if (((v15 | v14) & 1) != 0)
      {
        objc_msgSend(a1, "removeObjectAtIndex:", v13 + 1);
        objc_msgSend(a1, "removeObjectAtIndex:", v13);
        v13 -= 2;
        v12 -= 2;
      }
      else
      {
        v14 = 1;
      }
      ++v4;
    }
    v13 += 2;
  }
  while (v13 < v12);
  return v4;
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ()(uint64_t a1, void *a2)
{
  void (*v2)(_OWORD *);
  _OWORD v4[3];

  v2 = *(void (**)(_OWORD *))(a1 + 32);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)(a2, v4);
  swift_retain();
  v2(v4);
  swift_release();
  return outlined destroy of Notification((uint64_t)v4);
}

void static Notification._unconditionallyBridgeFromObjectiveC(_:)(void *a1@<X0>, _OWORD *a2@<X8>)
{
  id v3;
  id v4;
  __int128 v5;
  id v6;
  void *v7;
  uint64_t v8;
  __int128 v9;
  _BYTE v10[48];
  __int128 v11;
  __int128 v12;

  if (a1)
  {
    v3 = a1;
    v4 = objc_msgSend(v3, sel_name);
    if (objc_msgSend(v3, sel_object))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      v11 = 0u;
      v12 = 0u;
    }
    v6 = objc_msgSend(v3, sel_userInfo);
    if (v6)
    {
      v7 = v6;
      v8 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v6);

    }
    else
    {
      v8 = 0;
    }
    memset(&v10[8], 0, 40);
    *(_QWORD *)v10 = v4;
    outlined assign with take of Any?((uint64_t)&v11, (uint64_t)&v10[8]);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v10[40] = v8;
    v9 = *(_OWORD *)&v10[16];
    *a2 = *(_OWORD *)v10;
    a2[1] = v9;
    a2[2] = *(_OWORD *)&v10[32];

  }
  else
  {
    v11 = 0u;
    v12 = 0u;
    memset(&v10[8], 0, 40);
    *(_QWORD *)v10 = String._bridgeToObjectiveCImpl()();
    outlined assign with take of Any?((uint64_t)&v11, (uint64_t)&v10[8]);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v10[40] = 0;
    v5 = *(_OWORD *)&v10[16];
    *a2 = *(_OWORD *)v10;
    a2[1] = v5;
    a2[2] = *(_OWORD *)&v10[32];
  }
}

uint64_t outlined assign with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  uint64_t v2;
  id v3;
  char *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  __int128 v17;
  Swift::Int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  __int128 *v28;
  __int128 *v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  _OWORD *v36;
  _OWORD *v37;
  _OWORD v38[2];

  if (!a1)
    return MEMORY[0x1E0DEE9E0];
  swift_unknownObjectRetain();
  v2 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v2)
    return v2;
  v3 = objc_msgSend(a1, sel_count);
  if (v3)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    v2 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v2 = MEMORY[0x1E0DEE9E0];
  }
  v4 = *(char **)(v2 + 48);
  v5 = *(_QWORD *)(v2 + 56);
  swift_retain();
  result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v4, v5, a1, (uint64_t)v3);
  if ((result & 0x8000000000000000) == 0 && (uint64_t)v3 >= result)
  {
    *(_QWORD *)(v2 + 16) = result;
    if (result)
    {
      v7 = result - 1;
      v8 = v2 + 64;
      while (1)
      {
        if (((*(_QWORD *)(v8 + (((unint64_t)v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
          goto LABEL_12;
        outlined init with copy of AnyHashable(*(_QWORD *)(v2 + 48) + 40 * v7, (uint64_t)v38);
        v18 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
        result = outlined destroy of AnyHashable((uint64_t)v38);
        v19 = -1 << *(_BYTE *)(v2 + 32);
        v20 = v18 & ~v19;
        v21 = v20 >> 6;
        if (((-1 << v20) & ~*(_QWORD *)(v8 + 8 * (v20 >> 6))) != 0)
        {
          v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v8 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v23 = 0;
          v24 = (unint64_t)(63 - v19) >> 6;
          do
          {
            if (++v21 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              goto LABEL_29;
            }
            v25 = v21 == v24;
            if (v21 == v24)
              v21 = 0;
            v23 |= v25;
            v26 = *(_QWORD *)(v8 + 8 * v21);
          }
          while (v26 == -1);
          v22 = __clz(__rbit64(~v26)) + (v21 << 6);
        }
        *(_QWORD *)(v8 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
        if (v7 < (uint64_t)v22)
        {
          v9 = *(_QWORD *)(v2 + 48);
          v10 = v9 + 40 * v22;
          v11 = (__int128 *)(v9 + 40 * v7);
          v12 = *v11;
          v13 = v11[1];
          *(_QWORD *)(v10 + 32) = *((_QWORD *)v11 + 4);
          *(_OWORD *)v10 = v12;
          *(_OWORD *)(v10 + 16) = v13;
          v14 = *(_QWORD *)(v2 + 56);
          v15 = (_OWORD *)(v14 + 32 * v22);
          v16 = (_OWORD *)(v14 + 32 * v7);
          v17 = v16[1];
          *v15 = *v16;
          v15[1] = v17;
LABEL_12:
          if (--v7 < 0)
            break;
        }
        else
        {
          if (v22 == v7)
            goto LABEL_12;
          v27 = *(_QWORD *)(v2 + 48);
          v28 = (__int128 *)(v27 + 40 * v22);
          v29 = (__int128 *)(v27 + 40 * v7);
          v30 = *v28;
          v31 = v28[1];
          v32 = *((_QWORD *)v28 + 4);
          v33 = *((_QWORD *)v29 + 4);
          v34 = v29[1];
          *v28 = *v29;
          v28[1] = v34;
          *((_QWORD *)v28 + 4) = v33;
          *((_QWORD *)v29 + 4) = v32;
          *v29 = v30;
          v29[1] = v31;
          v35 = *(_QWORD *)(v2 + 56);
          v36 = (_OWORD *)(v35 + 32 * v22);
          v37 = (_OWORD *)(v35 + 32 * v7);
          outlined init with take of Any(v36, v38);
          outlined init with take of Any(v37, v36);
          outlined init with take of Any(v38, v37);
          if (v7 < 0)
            break;
        }
      }
    }
    swift_release();
    return v2;
  }
LABEL_29:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v3;
  id v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;
  _OWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  _OWORD *v31;
  _OWORD v32[2];

  if (!a1)
    return MEMORY[0x1E0DEE9E0];
  swift_unknownObjectRetain();
  v2 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v2)
    return v2;
  v4 = objc_msgSend(a1, sel_count);
  if (v4)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  v5 = (_QWORD *)v3[6];
  v6 = v3[7];
  swift_retain();
  result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v5, v6, a1, (uint64_t)v4);
  if ((result & 0x8000000000000000) == 0 && (uint64_t)v4 >= result)
  {
    v3[2] = result;
    if (!result)
    {
LABEL_21:
      swift_release();
      return (uint64_t)v3;
    }
    v8 = result - 1;
    v9 = v3 + 8;
    while (1)
    {
      while (1)
      {
        if (((*(_QWORD *)((char *)v9 + (((unint64_t)v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
          goto LABEL_13;
        v14 = (uint64_t *)(v3[6] + 16 * v8);
        v15 = *v14;
        v16 = v14[1];
        swift_bridgeObjectRetain();
        v17 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
        v19 = v18;
        swift_bridgeObjectRelease();
        if ((v19 & 1) == 0)
          break;
        swift_arrayDestroy();
        result = swift_arrayDestroy();
        v20 = v3[2];
        v21 = __OFSUB__(v20, 1);
        v22 = v20 - 1;
        if (v21)
        {
          __break(1u);
          goto LABEL_24;
        }
        v3[2] = v22;
LABEL_13:
        if (--v8 < 0)
          goto LABEL_21;
      }
      *(_QWORD *)((char *)v9 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      if (v8 < (uint64_t)v17)
      {
        *(_OWORD *)(v3[6] + 16 * v17) = *(_OWORD *)(v3[6] + 16 * v8);
        v10 = v3[7];
        v11 = (_OWORD *)(v10 + 32 * v8);
        v12 = v11[1];
        v13 = (_OWORD *)(v10 + 32 * v17);
        *v13 = *v11;
        v13[1] = v12;
        goto LABEL_13;
      }
      if (v17 == v8)
        goto LABEL_13;
      v23 = v3[6];
      v24 = (uint64_t *)(v23 + 16 * v17);
      v25 = (uint64_t *)(v23 + 16 * v8);
      v26 = *v24;
      v27 = v24[1];
      v28 = v25[1];
      *v24 = *v25;
      v24[1] = v28;
      *v25 = v26;
      v25[1] = v27;
      v29 = v3[7];
      v30 = (_OWORD *)(v29 + 32 * v17);
      v31 = (_OWORD *)(v29 + 32 * v8);
      outlined init with take of Any(v30, v32);
      outlined init with take of Any(v31, v30);
      outlined init with take of Any(v32, v31);
      if (v8 < 0)
        goto LABEL_21;
    }
  }
LABEL_24:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  _OWORD *v14;
  void *v15;
  id v16;
  Swift::Int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  _OWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  __int128 v37;
  _OWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _OWORD *v55;
  _OWORD *v56;
  _OWORD v57[4];

  if (!a1)
    return MEMORY[0x1E0DEE9E0];
  type metadata accessor for NSURLResourceKey(0);
  if (v2 == MEMORY[0x1E0DEA968])
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRetain();
    v3 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (v3)
      return v3;
    v5 = objc_msgSend(a1, sel_count);
    if (v5)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v3 = static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      v3 = MEMORY[0x1E0DEE9E0];
    }
    v31 = *(_QWORD **)(v3 + 48);
    v32 = *(_QWORD *)(v3 + 56);
    swift_retain();
    result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v31, v32, a1, (uint64_t)v5);
    if (result < 0 || (uint64_t)v5 < result)
      goto LABEL_50;
    *(_QWORD *)(v3 + 16) = result;
    if (!result)
    {
LABEL_46:
      swift_release();
      return v3;
    }
    v33 = result - 1;
    v34 = v3 + 64;
    while (1)
    {
      while (1)
      {
        if (((*(_QWORD *)(v34 + (((unint64_t)v33 >> 3) & 0xFFFFFFFFFFFFF8)) >> v33) & 1) != 0)
          goto LABEL_38;
        v39 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v33);
        v40 = *v39;
        v41 = v39[1];
        swift_bridgeObjectRetain();
        v42 = specialized __RawDictionaryStorage.find<A>(_:)(v40, v41);
        v44 = v43;
        swift_bridgeObjectRelease();
        if ((v44 & 1) == 0)
          break;
        swift_arrayDestroy();
        result = swift_arrayDestroy();
        v45 = *(_QWORD *)(v3 + 16);
        v46 = __OFSUB__(v45, 1);
        v47 = v45 - 1;
        if (v46)
        {
LABEL_48:
          __break(1u);
          goto LABEL_49;
        }
        *(_QWORD *)(v3 + 16) = v47;
LABEL_38:
        if (--v33 < 0)
          goto LABEL_46;
      }
      *(_QWORD *)(v34 + ((v42 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v42;
      if (v33 < (uint64_t)v42)
      {
        *(_OWORD *)(*(_QWORD *)(v3 + 48) + 16 * v42) = *(_OWORD *)(*(_QWORD *)(v3 + 48) + 16 * v33);
        v35 = *(_QWORD *)(v3 + 56);
        v36 = (_OWORD *)(v35 + 32 * v33);
        v37 = v36[1];
        v38 = (_OWORD *)(v35 + 32 * v42);
        *v38 = *v36;
        v38[1] = v37;
        goto LABEL_38;
      }
      if (v42 == v33)
        goto LABEL_38;
      v48 = *(_QWORD *)(v3 + 48);
      v49 = (uint64_t *)(v48 + 16 * v42);
      v50 = (uint64_t *)(v48 + 16 * v33);
      v51 = *v49;
      v52 = v49[1];
      v53 = v50[1];
      *v49 = *v50;
      v49[1] = v53;
      *v50 = v51;
      v50[1] = v52;
      v54 = *(_QWORD *)(v3 + 56);
      v55 = (_OWORD *)(v54 + 32 * v42);
      v56 = (_OWORD *)(v54 + 32 * v33);
      outlined init with take of Any(v55, v57);
      outlined init with take of Any(v56, v55);
      outlined init with take of Any(v57, v56);
      if (v33 < 0)
        goto LABEL_46;
    }
  }
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, (uint64_t (*)(uint64_t))type metadata accessor for NSURLResourceKey, (uint64_t)&protocol conformance descriptor for NSURLResourceKey);
  swift_unknownObjectRetain();
  v3 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v3)
    return v3;
  v4 = objc_msgSend(a1, sel_count);
  if (v4)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSURLResourceKey, Any>);
    v3 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v3 = MEMORY[0x1E0DEE9E0];
  }
  v6 = *(char **)(v3 + 48);
  v7 = *(_QWORD *)(v3 + 56);
  swift_retain();
  result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v6, v7, a1, (uint64_t)v4);
  if ((result & 0x8000000000000000) == 0 && (uint64_t)v4 >= result)
  {
    *(_QWORD *)(v3 + 16) = result;
    if (result)
    {
      v9 = result - 1;
      v10 = v3 + 64;
      while (1)
      {
        if (((*(_QWORD *)(v10 + (((unint64_t)v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
          goto LABEL_16;
        v15 = *(void **)(*(_QWORD *)(v3 + 48) + 8 * v9);
        static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
        Hasher.init(_seed:)();
        v16 = v15;
        String.hash(into:)();
        v17 = Hasher._finalize()();

        result = swift_bridgeObjectRelease();
        v18 = -1 << *(_BYTE *)(v3 + 32);
        v19 = v17 & ~v18;
        v20 = v19 >> 6;
        if (((-1 << v19) & ~*(_QWORD *)(v10 + 8 * (v19 >> 6))) != 0)
        {
          v21 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)(v10 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v22 = 0;
          v23 = (unint64_t)(63 - v18) >> 6;
          do
          {
            if (++v20 == v23 && (v22 & 1) != 0)
            {
              __break(1u);
              goto LABEL_48;
            }
            v24 = v20 == v23;
            if (v20 == v23)
              v20 = 0;
            v22 |= v24;
            v25 = *(_QWORD *)(v10 + 8 * v20);
          }
          while (v25 == -1);
          v21 = __clz(__rbit64(~v25)) + (v20 << 6);
        }
        *(_QWORD *)(v10 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
        if (v9 < (uint64_t)v21)
        {
          *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v21) = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v9);
          v11 = *(_QWORD *)(v3 + 56);
          v12 = (_OWORD *)(v11 + 32 * v9);
          v13 = v12[1];
          v14 = (_OWORD *)(v11 + 32 * v21);
          *v14 = *v12;
          v14[1] = v13;
LABEL_16:
          if (--v9 < 0)
            goto LABEL_46;
        }
        else
        {
          if (v21 == v9)
            goto LABEL_16;
          v26 = *(_QWORD *)(v3 + 48);
          v27 = *(_QWORD *)(v26 + 8 * v21);
          *(_QWORD *)(v26 + 8 * v21) = *(_QWORD *)(v26 + 8 * v9);
          *(_QWORD *)(v26 + 8 * v9) = v27;
          v28 = *(_QWORD *)(v3 + 56);
          v29 = (_OWORD *)(v28 + 32 * v21);
          v30 = (_OWORD *)(v28 + 32 * v9);
          outlined init with take of Any(v29, v57);
          outlined init with take of Any(v30, v29);
          outlined init with take of Any(v57, v30);
          if (v9 < 0)
            goto LABEL_46;
        }
      }
    }
    goto LABEL_46;
  }
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  _OWORD *v14;
  void *v15;
  id v16;
  Swift::Int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  _OWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  __int128 v37;
  _OWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _OWORD *v55;
  _OWORD *v56;
  _OWORD v57[4];

  if (!a1)
    return MEMORY[0x1E0DEE9E0];
  type metadata accessor for NSFileAttributeKey(0);
  if (v2 == MEMORY[0x1E0DEA968])
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRetain();
    v3 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (v3)
      return v3;
    v5 = objc_msgSend(a1, sel_count);
    if (v5)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v3 = static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      v3 = MEMORY[0x1E0DEE9E0];
    }
    v31 = *(_QWORD **)(v3 + 48);
    v32 = *(_QWORD *)(v3 + 56);
    swift_retain();
    result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v31, v32, a1, (uint64_t)v5);
    if (result < 0 || (uint64_t)v5 < result)
      goto LABEL_50;
    *(_QWORD *)(v3 + 16) = result;
    if (!result)
    {
LABEL_46:
      swift_release();
      return v3;
    }
    v33 = result - 1;
    v34 = v3 + 64;
    while (1)
    {
      while (1)
      {
        if (((*(_QWORD *)(v34 + (((unint64_t)v33 >> 3) & 0xFFFFFFFFFFFFF8)) >> v33) & 1) != 0)
          goto LABEL_38;
        v39 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v33);
        v40 = *v39;
        v41 = v39[1];
        swift_bridgeObjectRetain();
        v42 = specialized __RawDictionaryStorage.find<A>(_:)(v40, v41);
        v44 = v43;
        swift_bridgeObjectRelease();
        if ((v44 & 1) == 0)
          break;
        swift_arrayDestroy();
        result = swift_arrayDestroy();
        v45 = *(_QWORD *)(v3 + 16);
        v46 = __OFSUB__(v45, 1);
        v47 = v45 - 1;
        if (v46)
        {
LABEL_48:
          __break(1u);
          goto LABEL_49;
        }
        *(_QWORD *)(v3 + 16) = v47;
LABEL_38:
        if (--v33 < 0)
          goto LABEL_46;
      }
      *(_QWORD *)(v34 + ((v42 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v42;
      if (v33 < (uint64_t)v42)
      {
        *(_OWORD *)(*(_QWORD *)(v3 + 48) + 16 * v42) = *(_OWORD *)(*(_QWORD *)(v3 + 48) + 16 * v33);
        v35 = *(_QWORD *)(v3 + 56);
        v36 = (_OWORD *)(v35 + 32 * v33);
        v37 = v36[1];
        v38 = (_OWORD *)(v35 + 32 * v42);
        *v38 = *v36;
        v38[1] = v37;
        goto LABEL_38;
      }
      if (v42 == v33)
        goto LABEL_38;
      v48 = *(_QWORD *)(v3 + 48);
      v49 = (uint64_t *)(v48 + 16 * v42);
      v50 = (uint64_t *)(v48 + 16 * v33);
      v51 = *v49;
      v52 = v49[1];
      v53 = v50[1];
      *v49 = *v50;
      v49[1] = v53;
      *v50 = v51;
      v50[1] = v52;
      v54 = *(_QWORD *)(v3 + 56);
      v55 = (_OWORD *)(v54 + 32 * v42);
      v56 = (_OWORD *)(v54 + 32 * v33);
      outlined init with take of Any(v55, v57);
      outlined init with take of Any(v56, v55);
      outlined init with take of Any(v57, v56);
      if (v33 < 0)
        goto LABEL_46;
    }
  }
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type NSFileAttributeKey and conformance NSFileAttributeKey, (uint64_t (*)(uint64_t))type metadata accessor for NSFileAttributeKey, (uint64_t)&protocol conformance descriptor for NSFileAttributeKey);
  swift_unknownObjectRetain();
  v3 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v3)
    return v3;
  v4 = objc_msgSend(a1, sel_count);
  if (v4)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSFileAttributeKey, Any>);
    v3 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v3 = MEMORY[0x1E0DEE9E0];
  }
  v6 = *(char **)(v3 + 48);
  v7 = *(_QWORD *)(v3 + 56);
  swift_retain();
  result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v6, v7, a1, (uint64_t)v4);
  if ((result & 0x8000000000000000) == 0 && (uint64_t)v4 >= result)
  {
    *(_QWORD *)(v3 + 16) = result;
    if (result)
    {
      v9 = result - 1;
      v10 = v3 + 64;
      while (1)
      {
        if (((*(_QWORD *)(v10 + (((unint64_t)v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
          goto LABEL_16;
        v15 = *(void **)(*(_QWORD *)(v3 + 48) + 8 * v9);
        static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
        Hasher.init(_seed:)();
        v16 = v15;
        String.hash(into:)();
        v17 = Hasher._finalize()();

        result = swift_bridgeObjectRelease();
        v18 = -1 << *(_BYTE *)(v3 + 32);
        v19 = v17 & ~v18;
        v20 = v19 >> 6;
        if (((-1 << v19) & ~*(_QWORD *)(v10 + 8 * (v19 >> 6))) != 0)
        {
          v21 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)(v10 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v22 = 0;
          v23 = (unint64_t)(63 - v18) >> 6;
          do
          {
            if (++v20 == v23 && (v22 & 1) != 0)
            {
              __break(1u);
              goto LABEL_48;
            }
            v24 = v20 == v23;
            if (v20 == v23)
              v20 = 0;
            v22 |= v24;
            v25 = *(_QWORD *)(v10 + 8 * v20);
          }
          while (v25 == -1);
          v21 = __clz(__rbit64(~v25)) + (v20 << 6);
        }
        *(_QWORD *)(v10 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
        if (v9 < (uint64_t)v21)
        {
          *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v21) = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v9);
          v11 = *(_QWORD *)(v3 + 56);
          v12 = (_OWORD *)(v11 + 32 * v9);
          v13 = v12[1];
          v14 = (_OWORD *)(v11 + 32 * v21);
          *v14 = *v12;
          v14[1] = v13;
LABEL_16:
          if (--v9 < 0)
            goto LABEL_46;
        }
        else
        {
          if (v21 == v9)
            goto LABEL_16;
          v26 = *(_QWORD *)(v3 + 48);
          v27 = *(_QWORD *)(v26 + 8 * v21);
          *(_QWORD *)(v26 + 8 * v21) = *(_QWORD *)(v26 + 8 * v9);
          *(_QWORD *)(v26 + 8 * v9) = v27;
          v28 = *(_QWORD *)(v3 + 56);
          v29 = (_OWORD *)(v28 + 32 * v21);
          v30 = (_OWORD *)(v28 + 32 * v9);
          outlined init with take of Any(v29, v57);
          outlined init with take of Any(v30, v29);
          outlined init with take of Any(v57, v30);
          if (v9 < 0)
            goto LABEL_46;
        }
      }
    }
    goto LABEL_46;
  }
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  id v3;
  char *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (!a1)
    return MEMORY[0x1E0DEE9E0];
  swift_unknownObjectRetain();
  v2 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v2)
    return v2;
  v3 = objc_msgSend(a1, sel_count);
  if (v3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, String>);
    v2 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v2 = MEMORY[0x1E0DEE9E0];
  }
  v4 = *(char **)(v2 + 48);
  v5 = *(_QWORD *)(v2 + 56);
  swift_retain();
  result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v4, v5, a1, (uint64_t)v3);
  if ((result & 0x8000000000000000) == 0 && (uint64_t)v3 >= result)
  {
    *(_QWORD *)(v2 + 16) = result;
    if (result)
    {
      v7 = result - 1;
      v8 = v2 + 64;
      while (1)
      {
        if (((*(_QWORD *)(v8 + (((unint64_t)v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
          goto LABEL_12;
        result = static Hasher._hash(seed:_:)();
        v9 = -1 << *(_BYTE *)(v2 + 32);
        v10 = result & ~v9;
        v11 = v10 >> 6;
        if (((-1 << v10) & ~*(_QWORD *)(v8 + 8 * (v10 >> 6))) != 0)
        {
          v12 = __clz(__rbit64((-1 << v10) & ~*(_QWORD *)(v8 + 8 * (v10 >> 6)))) | v10 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v13 = 0;
          v14 = (unint64_t)(63 - v9) >> 6;
          do
          {
            if (++v11 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              goto LABEL_29;
            }
            v15 = v11 == v14;
            if (v11 == v14)
              v11 = 0;
            v13 |= v15;
            v16 = *(_QWORD *)(v8 + 8 * v11);
          }
          while (v16 == -1);
          v12 = __clz(__rbit64(~v16)) + (v11 << 6);
        }
        *(_QWORD *)(v8 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
        if (v7 < (uint64_t)v12)
        {
          *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v12) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v7);
          *(_OWORD *)(*(_QWORD *)(v2 + 56) + 16 * v12) = *(_OWORD *)(*(_QWORD *)(v2 + 56) + 16 * v7);
LABEL_12:
          if (--v7 < 0)
            break;
        }
        else
        {
          if (v12 == v7)
            goto LABEL_12;
          v17 = *(_QWORD *)(v2 + 48);
          v18 = *(_QWORD *)(v17 + 8 * v12);
          *(_QWORD *)(v17 + 8 * v12) = *(_QWORD *)(v17 + 8 * v7);
          *(_QWORD *)(v17 + 8 * v7) = v18;
          v19 = *(_QWORD *)(v2 + 56);
          v20 = (uint64_t *)(v19 + 16 * v12);
          v21 = (uint64_t *)(v19 + 16 * v7);
          v22 = *v20;
          v23 = v20[1];
          v24 = v21[1];
          *v20 = *v21;
          v20[1] = v24;
          *v21 = v22;
          v21[1] = v23;
          if (v7 < 0)
            break;
        }
      }
    }
    swift_release();
    return v2;
  }
LABEL_29:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  id v3;
  id v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;
  _OWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  _OWORD *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _OWORD v57[2];

  if (!a1)
    return MEMORY[0x1E0DEE9E0];
  if (MEMORY[0x1E0DEE9B8] + 8 != MEMORY[0x1E0DEA968])
  {
    swift_unknownObjectRetain();
    v2 = (_QWORD *)static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (v2)
      return (uint64_t)v2;
    v4 = objc_msgSend(a1, sel_count);
    if (v4)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
      v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    }
    v32 = (char *)v2[6];
    v33 = v2[7];
    swift_retain();
    result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v32, v33, a1, (uint64_t)v4);
    if (result < 0 || (uint64_t)v4 < result)
      goto LABEL_44;
    v2[2] = result;
    if (!result)
      goto LABEL_39;
    v34 = result - 1;
    v35 = v2 + 8;
    while (1)
    {
      if (((*(_QWORD *)((char *)v35 + (((unint64_t)v34 >> 3) & 0xFFFFFFFFFFFFF8)) >> v34) & 1) != 0)
        goto LABEL_31;
      v37 = (uint64_t *)(v2[6] + 16 * v34);
      v38 = *v37;
      v39 = v37[1];
      swift_bridgeObjectRetain();
      v40 = specialized __RawDictionaryStorage.find<A>(_:)(v38, v39);
      v42 = v41;
      swift_bridgeObjectRelease();
      if ((v42 & 1) != 0)
      {
        swift_arrayDestroy();
        result = swift_arrayDestroy();
        v43 = v2[2];
        v21 = __OFSUB__(v43, 1);
        v44 = v43 - 1;
        if (v21)
          goto LABEL_42;
        v2[2] = v44;
        goto LABEL_31;
      }
      *(_QWORD *)((char *)v35 + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v40;
      if (v34 < (uint64_t)v40)
      {
        v36 = 16 * v40;
        *(_OWORD *)(v2[6] + v36) = *(_OWORD *)(v2[6] + 16 * v34);
        *(_OWORD *)(v2[7] + v36) = *(_OWORD *)(v2[7] + 16 * v34);
LABEL_31:
        if (--v34 < 0)
          goto LABEL_39;
      }
      else
      {
        if (v40 == v34)
          goto LABEL_31;
        v45 = v2[6];
        v46 = (uint64_t *)(v45 + 16 * v40);
        v47 = (uint64_t *)(v45 + 16 * v34);
        v48 = *v46;
        v49 = v46[1];
        v50 = v47[1];
        *v46 = *v47;
        v46[1] = v50;
        *v47 = v48;
        v47[1] = v49;
        v51 = v2[7];
        v52 = (uint64_t *)(v51 + 16 * v40);
        v53 = (uint64_t *)(v51 + 16 * v34);
        v54 = *v52;
        v55 = v52[1];
        v56 = v53[1];
        *v52 = *v53;
        v52[1] = v56;
        *v53 = v54;
        v53[1] = v55;
        if (v34 < 0)
          goto LABEL_39;
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRetain();
  v2 = (_QWORD *)static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v2)
    return (uint64_t)v2;
  v3 = objc_msgSend(a1, sel_count);
  if (v3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  v5 = (_QWORD *)v2[6];
  v6 = v2[7];
  swift_retain();
  result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v5, v6, a1, (uint64_t)v3);
  if (result < 0 || (uint64_t)v3 < result)
    goto LABEL_43;
  v2[2] = result;
  if (!result)
  {
LABEL_39:
    swift_release();
    return (uint64_t)v2;
  }
  v8 = result - 1;
  v9 = v2 + 8;
  while (1)
  {
    if (((*(_QWORD *)((char *)v9 + (((unint64_t)v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
      goto LABEL_16;
    v14 = (uint64_t *)(v2[6] + 16 * v8);
    v15 = *v14;
    v16 = v14[1];
    swift_bridgeObjectRetain();
    v17 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    v19 = v18;
    swift_bridgeObjectRelease();
    if ((v19 & 1) != 0)
      break;
    *(_QWORD *)((char *)v9 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    if (v8 < (uint64_t)v17)
    {
      *(_OWORD *)(v2[6] + 16 * v17) = *(_OWORD *)(v2[6] + 16 * v8);
      v10 = v2[7];
      v11 = (_OWORD *)(v10 + 32 * v8);
      v12 = v11[1];
      v13 = (_OWORD *)(v10 + 32 * v17);
      *v13 = *v11;
      v13[1] = v12;
LABEL_16:
      if (--v8 < 0)
        goto LABEL_39;
    }
    else
    {
      if (v17 == v8)
        goto LABEL_16;
      v23 = v2[6];
      v24 = (uint64_t *)(v23 + 16 * v17);
      v25 = (uint64_t *)(v23 + 16 * v8);
      v26 = *v24;
      v27 = v24[1];
      v28 = v25[1];
      *v24 = *v25;
      v24[1] = v28;
      *v25 = v26;
      v25[1] = v27;
      v29 = v2[7];
      v30 = (_OWORD *)(v29 + 32 * v17);
      v31 = (_OWORD *)(v29 + 32 * v8);
      outlined init with take of Any(v30, v57);
      outlined init with take of Any(v31, v30);
      outlined init with take of Any(v57, v31);
      if (v8 < 0)
        goto LABEL_39;
    }
  }
  swift_arrayDestroy();
  result = swift_arrayDestroy();
  v20 = v2[2];
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (!v21)
  {
    v2[2] = v22;
    goto LABEL_16;
  }
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
  return result;
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0DEC198] - 8) + 8))();
  return a1;
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x1E0DEC198] - 8) + 16))(a2, a1);
  return a2;
}

char *specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(char *result, uint64_t a2, id a3, uint64_t a4)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;

  if (!result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (a2)
  {
    v6 = result;
    result = (char *)objc_msgSend(a3, sel__getObjects_andKeys_count_, a2, result, a4);
    if ((a4 & 0x8000000000000000) == 0)
    {
      if (!a4)
        return (char *)a4;
      v7 = 40 * a4;
      v8 = a4;
      do
      {
        if (v8 > a4)
        {
          __break(1u);
          goto LABEL_13;
        }
        v9 = v8 - 1;
        swift_unknownObjectRetain();
        result = (char *)swift_dynamicCast();
        v10 = &v6[v7 - 40];
        v11 = v16[0];
        v12 = v16[1];
        *((_QWORD *)v10 + 4) = v17;
        *(_OWORD *)v10 = v11;
        *((_OWORD *)v10 + 1) = v12;
        v7 -= 40;
        v8 = v9;
      }
      while (v9);
      v13 = 32 * a4;
      v14 = a4;
      while (v14 <= a4)
      {
        v15 = v14 - 1;
        swift_unknownObjectRetain();
        swift_dynamicCast();
        result = (char *)outlined init with take of Any(v16, (_OWORD *)(a2 - 32 + v13));
        v13 -= 32;
        v14 = v15;
        if (!v15)
          return (char *)a4;
      }
LABEL_13:
      __break(1u);
    }
    __break(1u);
    goto LABEL_15;
  }
LABEL_16:
  __break(1u);
  return result;
}

{
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (a2)
  {
    v6 = result;
    result = (char *)objc_msgSend(a3, sel__getObjects_andKeys_count_, a2, result, a4);
    if ((a4 & 0x8000000000000000) == 0)
    {
      if (!a4)
        return (char *)a4;
      v7 = 0;
      v8 = &v6[16 * a4 - 8];
      do
      {
        if (a4 + v7 > a4)
        {
          __break(1u);
          goto LABEL_13;
        }
        swift_unknownObjectRetain();
        result = (char *)swift_dynamicCast();
        *((_QWORD *)v8 - 1) = v13;
        *(_QWORD *)v8 = v14;
        --v7;
        v8 -= 16;
      }
      while (a4 + v7);
      v9 = 16 * a4;
      v10 = a4;
      while (v10 <= a4)
      {
        v11 = v10 - 1;
        swift_unknownObjectRetain();
        result = (char *)swift_dynamicCast();
        v12 = a2 + v9;
        *(_QWORD *)(v12 - 16) = v13;
        *(_QWORD *)(v12 - 8) = v14;
        v9 -= 16;
        v10 = v11;
        if (!v11)
          return (char *)a4;
      }
LABEL_13:
      __break(1u);
    }
    __break(1u);
    goto LABEL_15;
  }
LABEL_16:
  __break(1u);
  return result;
}

{
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (a2)
  {
    v6 = result;
    result = (char *)objc_msgSend(a3, sel__getObjects_andKeys_count_, a2, result, a4);
    if ((a4 & 0x8000000000000000) == 0)
    {
      if (!a4)
        return (char *)a4;
      v7 = &v6[8 * a4 - 8];
      v8 = a4;
      do
      {
        if (v8 > a4)
        {
          __break(1u);
          goto LABEL_13;
        }
        --v8;
        swift_unknownObjectRetain();
        result = (char *)swift_dynamicCast();
        *(_QWORD *)v7 = v13;
        v7 -= 8;
      }
      while (v8);
      v9 = 16 * a4;
      v10 = a4;
      while (v10 <= a4)
      {
        v11 = v10 - 1;
        swift_unknownObjectRetain();
        result = (char *)swift_dynamicCast();
        v12 = a2 + v9;
        *(_QWORD *)(v12 - 16) = v13;
        *(_QWORD *)(v12 - 8) = v14;
        v9 -= 16;
        v10 = v11;
        if (!v11)
          return (char *)a4;
      }
LABEL_13:
      __break(1u);
    }
    __break(1u);
    goto LABEL_15;
  }
LABEL_16:
  __break(1u);
  return result;
}

{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  if (!result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (a2)
  {
    v6 = result;
    result = (char *)objc_msgSend(a3, sel__getObjects_andKeys_count_, a2, result, a4);
    if ((a4 & 0x8000000000000000) == 0)
    {
      if (!a4)
        return (char *)a4;
      v7 = 40 * a4;
      v8 = a4;
      do
      {
        if (v8 > a4)
        {
          __break(1u);
          goto LABEL_13;
        }
        v9 = v8 - 1;
        swift_unknownObjectRetain();
        result = (char *)swift_dynamicCast();
        v10 = &v6[v7 - 40];
        *((_QWORD *)v10 + 4) = v17;
        *(_OWORD *)v10 = v15;
        *((_OWORD *)v10 + 1) = v16;
        v7 -= 40;
        v8 = v9;
      }
      while (v9);
      v11 = 40 * a4;
      v12 = a4;
      while (v12 <= a4)
      {
        v13 = v12 - 1;
        swift_unknownObjectRetain();
        result = (char *)swift_dynamicCast();
        v14 = a2 - 40 + v11;
        *(_QWORD *)(v14 + 32) = v17;
        *(_OWORD *)v14 = v15;
        *(_OWORD *)(v14 + 16) = v16;
        v11 -= 40;
        v12 = v13;
        if (!v13)
          return (char *)a4;
      }
LABEL_13:
      __break(1u);
    }
    __break(1u);
    goto LABEL_15;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in Notification.Subscription.init(_:_:_:_:)()
{
  return closure #1 in Notification.Subscription.init(_:_:_:_:)();
}

uint64_t closure #1 in Notification.Subscription.init(_:_:_:_:)()
{
  uint64_t result;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    v2 = *(os_unfair_lock_s **)(result + 16);
    os_unfair_lock_lock(v2);
    if (!*(_QWORD *)(v1 + 64))
      goto LABEL_29;
    v3 = *(_QWORD *)(v1 + 32);
    static Subscribers.Demand.unlimited.getter();
    result = static Subscribers.Demand.== infix(_:_:)();
    if ((result & 1) != 0)
      goto LABEL_6;
    if (v3 < 0)
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v3)
    {
LABEL_6:
      v4 = *(_QWORD *)(v1 + 32);
      static Subscribers.Demand.unlimited.getter();
      if ((static Subscribers.Demand.== infix(_:_:)() & 1) == 0)
      {
        static Subscribers.Demand.unlimited.getter();
        result = static Subscribers.Demand.== infix(_:_:)();
        if ((result & 1) != 0)
        {
          v5 = static Subscribers.Demand.unlimited.getter();
        }
        else
        {
          if (v4 < 0)
          {
LABEL_34:
            __break(1u);
            goto LABEL_35;
          }
          if (!v4)
          {
LABEL_35:
            __break(1u);
            goto LABEL_36;
          }
          v5 = v4 - 1;
        }
        *(_QWORD *)(v1 + 32) = v5;
      }
    }
    os_unfair_lock_unlock(v2);
    static Subscribers.Demand.unlimited.getter();
    result = static Subscribers.Demand.== infix(_:_:)();
    if ((result & 1) != 0)
      goto LABEL_17;
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (!v3)
        return swift_release();
LABEL_17:
      os_unfair_recursive_lock_lock_with_options();
      v6 = dispatch thunk of Subscriber.receive(_:)();
      os_unfair_recursive_lock_unlock();
      static Subscribers.Demand.unlimited.getter();
      result = static Subscribers.Demand.== infix(_:_:)();
      if ((result & 1) != 0)
        goto LABEL_20;
      if ((v6 & 0x8000000000000000) == 0)
      {
        if (v6)
        {
LABEL_20:
          os_unfair_lock_lock(v2);
          v7 = *(_QWORD *)(v1 + 32);
          static Subscribers.Demand.unlimited.getter();
          if ((static Subscribers.Demand.== infix(_:_:)() & 1) == 0)
          {
            static Subscribers.Demand.unlimited.getter();
            v8 = static Subscribers.Demand.== infix(_:_:)();
            v9 = static Subscribers.Demand.unlimited.getter();
            if ((v8 & 1) != 0)
            {
LABEL_28:
              *(_QWORD *)(v1 + 32) = v9;
              goto LABEL_29;
            }
            result = static Subscribers.Demand.== infix(_:_:)();
            if ((result & 1) != 0)
            {
LABEL_26:
              v9 = static Subscribers.Demand.unlimited.getter();
              goto LABEL_28;
            }
            if (((v7 | v6) & 0x8000000000000000) == 0)
            {
              v9 = v7 + v6;
              if (!__OFADD__(v7, v6))
              {
                if ((v9 & 0x8000000000000000) == 0)
                  goto LABEL_28;
                goto LABEL_37;
              }
              goto LABEL_26;
            }
LABEL_36:
            __break(1u);
LABEL_37:
            __break(1u);
            return result;
          }
LABEL_29:
          os_unfair_lock_unlock(v2);
        }
        return swift_release();
      }
      goto LABEL_33;
    }
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  return result;
}

NSString *_NSMethodExceptionProem(objc_class *a1, const char *a2)
{
  objc_class *v4;
  uint64_t v5;
  const char *Name;
  const char *v7;
  NSString *v8;
  char *v10[2];

  v10[1] = *(char **)MEMORY[0x1E0C80C00];
  v4 = (objc_class *)objc_opt_class();
  v10[0] = 0;
  if (v4 == a1)
    v5 = 43;
  else
    v5 = 45;
  if (v4)
    Name = class_getName(v4);
  else
    Name = "nil";
  v7 = sel_getName(a2);
  asprintf(v10, "*** %c[%s %s]", v5, Name, v7);
  if (!v10[0])
    return 0;
  v8 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
  free(v10[0]);
  return v8;
}

void sub_1818AE594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t Notification.object.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Any?(v1 + 8, a1);
}

unsigned int *_timerRelease(unsigned int *result)
{
  id *v1;
  unsigned int v2;
  BOOL v3;
  signed int v4;

  v1 = (id *)result;
  do
  {
    v2 = __ldxr(result);
    v3 = __OFSUB__(v2, 1);
    v4 = v2 - 1;
  }
  while (__stxr(v4, result));
  if ((v4 < 0) ^ v3 | (v4 == 0))
  {
    _CFAutoreleasePoolPush();

    free(v1);
    return (unsigned int *)_CFAutoreleasePoolPop();
  }
  return result;
}

ValueMetadata *type metadata accessor for JSONDecoder.DateDecodingStrategy()
{
  return &type metadata for JSONDecoder.DateDecodingStrategy;
}

id @objc static NSLocale._preferredLanguagesForCurrentUser(_:)(uint64_t a1, uint64_t a2, char a3)
{
  if (one-time initialization token for cache != -1)
    swift_once();
  LocaleCache.preferredLanguages(forCurrentUser:)(a3);
  return (id)_ContiguousArrayBuffer._asCocoaArray()();
}

id @objc static NSLocale._preferredLanguages.getter()
{
  if (one-time initialization token for cache != -1)
    swift_once();
  LocaleCache.preferredLanguages(forCurrentUser:)(0);
  return (id)_ContiguousArrayBuffer._asCocoaArray()();
}

BOOL StringProtocol.localizedCaseInsensitiveContains<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v10;
  char v11;
  char v12;
  _QWORD v14[2];

  if (one-time initialization token for cache != -1)
    swift_once();
  LocaleCache.current.getter();
  v14[0] = LocaleCache.current.getter();
  v14[1] = v10;
  StringProtocol.range<A>(of:options:range:locale:)(a1, 1uLL, 0, 0, 1, (uint64_t)v14, a2, a3, a4, a5);
  v12 = v11;
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return (v12 & 1) == 0;
}

uint64_t StringProtocol.range<A>(of:options:range:locale:)(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, void *a10)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  void *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  __int16 v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t ObjectType;
  id v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t, uint64_t, uint64_t);
  void (*v71)(char *, uint64_t, uint64_t, uint64_t);
  char *v72;
  uint64_t v73;
  uint64_t result;
  uint64_t v75;
  id v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  unint64_t v97;
  unint64_t v98;
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  id v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;

  v118 = a1;
  LODWORD(v120) = a5;
  v111 = a4;
  v112 = a3;
  v119 = a10;
  v115 = a2;
  v116 = a9;
  v114 = *(_QWORD *)(a7 - 8);
  MEMORY[0x1E0C80A78](a1);
  v113 = (char *)&v94 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Regex<AnyRegexOutput>.Match?);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v94 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v94 - v16;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>.Match);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v94 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v24 = (char *)&v94 - v23;
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>?);
  MEMORY[0x1E0C80A78](v25);
  v27 = (char *)&v94 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  MEMORY[0x1E0C80A78](v28);
  MEMORY[0x1E0C80A78](v29);
  v37 = (char *)&v94 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = *(void **)v35;
  if (*(_QWORD *)v35)
  {
    v110 = *(uint64_t **)(v35 + 8);
    StringProtocol._ephemeralString.getter();
    v40 = v116;
    v39 = v117;
    StringProtocol._ephemeralString.getter();
    v119 = (id)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v41 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v42 = v113;
    v43 = v114;
    LOBYTE(v44) = v39;
    (*(void (**)(char *, uint64_t, uint64_t))(v114 + 16))(v113, v39, a7);
    if ((v120 & 1) != 0)
    {
      v45 = v40;
      v37 = *(char **)(*(_QWORD *)(v40 + 8) + 8);
      dispatch thunk of Collection.startIndex.getter();
      v51 = v121;
      dispatch thunk of Collection.endIndex.getter();
      (*(void (**)(char *, uint64_t))(v43 + 8))(v42, a7);
      if (v125 >> 14 < v51 >> 14)
      {
LABEL_47:
        __break(1u);
        goto LABEL_48;
      }
    }
    else
    {
      v45 = v40;
      (*(void (**)(char *, uint64_t))(v43 + 8))(v42, a7);
    }
    v40 = v45;
    v52 = StringProtocol._toUTF16Offsets(_:)();
    v37 = (char *)(v53 - v52);
    if (__OFSUB__(v53, v52))
    {
      __break(1u);
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    v54 = v52;
    ObjectType = swift_getObjectType();
    v38 = (void *)((uint64_t (*)(uint64_t))v110[62])(ObjectType);
    v56 = objc_msgSend(v119, sel_rangeOfString_options_range_locale_, v41, v115, v54, v37, v38);
    v43 = v57;
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

LABEL_28:
    if (v56 == (id)0x7FFFFFFFFFFFFFFFLL)
      return 0;
    if (!__OFADD__(v56, v43))
      return StringProtocol._toUTF16Indices(_:)();
    goto LABEL_46;
  }
  v110 = v31;
  v108 = v27;
  v99 = v24;
  v113 = v34;
  v100 = v21;
  v101 = v17;
  v102 = v14;
  v105 = v33;
  v106 = v30;
  v107 = v32;
  v104 = v19;
  v103 = v18;
  v114 = a7;
  v46 = v117;
  if ((v120 & 1) != 0)
  {
    v40 = v116;
    v38 = *(void **)(*(_QWORD *)(v116 + 8) + 8);
    dispatch thunk of Collection.startIndex.getter();
    v43 = v121;
    dispatch thunk of Collection.endIndex.getter();
    v48 = v125;
    LOBYTE(v44) = (_BYTE)v119;
    if (v125 >> 14 < v43 >> 14)
    {
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }
    v49 = v118;
  }
  else
  {
    v40 = v116;
    v43 = BidirectionalCollection<>._checkRange(_:)(v112, v111);
    v48 = v47;
    v49 = v118;
    if ((v50 & 1) != 0)
      return v43;
  }
  v58 = StringProtocol._asContiguousUTF8Substring(from:)(v43, v48, v114);
  v109 = v61;
  if (v61)
  {
    v62 = v58;
    v97 = v60;
    v98 = v59;
    ((void (*)(char *, uint64_t, char *))v110[2])(v37, v49, v113);
    v63 = Substring.init<A>(_:)();
    v37 = (char *)v63;
    v40 = v64;
    v43 = v65;
    v38 = (void *)v66;
    v44 = v115;
    if ((v115 & 0x400) == 0)
    {
      v67 = v98;
      if ((v62 ^ v98) >= 0x4000 && (v63 ^ v64) >> 14)
      {
        if ((v115 & 2) != 0)
        {
          v88 = v109;
          v120 = (v115 >> 3) & 1;
          LODWORD(v119) = v115 & 1;
          swift_bridgeObjectRetain();
          v43 = specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)((unint64_t)v37, v40, v43, (unint64_t)v38, HIBYTE(v44) & 1, (v44 & 0x80) != 0, (char)v119, v120, (v44 & 4) != 0, v62, v67, v97, v88);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
        }
        else
        {
          v43 = specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v63, v64, v65, v66, (v115 >> 8) & 1, (v115 >> 7) & 1, v115 & 1, (v115 >> 3) & 1, (v115 & 4) != 0, v62, v98, v97, v109);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        return v43;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return 0;
    }
    v95 = v62;
    if (one-time initialization token for cache == -1)
    {
LABEL_18:
      v68 = static RegexPatternCache.cache;
      swift_retain();
      v69 = MEMORY[0x186DA4634](v37, v40, v43, v38);
      v71 = v70;
      v96 = v38;
      v110 = &v94;
      swift_retain();
      os_unfair_lock_lock((os_unfair_lock_t)(v68 + 24));
      v72 = v108;
      closure #1 in RegexPatternCache.regex(for:caseInsensitive:)((uint64_t *)(v68 + 16), v69, (uint64_t)v71, v44 & 1, v69, v71, v44 & 1, v108);
      os_unfair_lock_unlock((os_unfair_lock_t)(v68 + 24));
      swift_bridgeObjectRelease();
      swift_release_n();
      v80 = v106;
      v79 = v107;
      v81 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v107 + 48))(v72, 1, v106);
      if (v81 == 1)
      {
        v82 = &demangling cache variable for type metadata for Regex<AnyRegexOutput>?;
        v83 = (uint64_t)v72;
LABEL_41:
        outlined destroy of Any?(v83, v82);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 0;
      }
      v84 = v105;
      (*(void (**)(uint64_t, char *, uint64_t))(v79 + 32))(v105, v72, v80);
      if ((v44 & 8) != 0)
      {
        v121 = v95;
        v122 = v98;
        v123 = v97;
        v124 = v109;
        lazy protocol witness table accessor for type Substring and conformance Substring();
        lazy protocol witness table accessor for type Regex<AnyRegexOutput> and conformance Regex<A>();
        v89 = (uint64_t)v101;
        BidirectionalCollection<>.prefixMatch<A>(of:)();
        v90 = v104;
        v91 = v103;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v104 + 48))(v89, 1, v103) == 1)
        {
          (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v84, v80);
          v82 = (uint64_t *)&demangling cache variable for type metadata for Regex<AnyRegexOutput>.Match?;
          v83 = v89;
          goto LABEL_41;
        }
        v93 = v99;
        (*(void (**)(char *, uint64_t, uint64_t))(v90 + 32))(v99, v89, v91);
        v43 = Regex.Match.range.getter();
        (*(void (**)(char *, uint64_t))(v90 + 8))(v93, v91);
      }
      else
      {
        v121 = v95;
        v122 = v98;
        v123 = v97;
        v124 = v109;
        type metadata accessor for AnyRegexOutput();
        lazy protocol witness table accessor for type Substring and conformance Substring();
        lazy protocol witness table accessor for type Regex<AnyRegexOutput> and conformance Regex<A>();
        v85 = (uint64_t)v102;
        BidirectionalCollection<>.firstMatch<A, B>(of:)();
        v86 = v104;
        v87 = v103;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v104 + 48))(v85, 1, v103) == 1)
        {
          (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v84, v80);
          v82 = (uint64_t *)&demangling cache variable for type metadata for Regex<AnyRegexOutput>.Match?;
          v83 = v85;
          goto LABEL_41;
        }
        v92 = v100;
        (*(void (**)(char *, uint64_t, uint64_t))(v86 + 32))(v100, v85, v87);
        v43 = Regex.Match.range.getter();
        (*(void (**)(char *, uint64_t))(v86 + 8))(v92, v87);
      }
      (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v84, v80);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v43;
    }
LABEL_49:
    swift_once();
    goto LABEL_18;
  }
  StringProtocol._ephemeralString.getter();
  if ((v120 & 1) != 0)
  {
    LOBYTE(v44) = v46;
    StringProtocol._ephemeralString.getter();
    v38 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v78 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    if (v115)
      v76 = objc_msgSend(v38, sel_rangeOfString_options_, v78);
    else
      v76 = objc_msgSend(v38, sel_rangeOfString_, v78);
    goto LABEL_27;
  }
  LOBYTE(v44) = v46;
  StringProtocol._ephemeralString.getter();
  v38 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v73 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  result = StringProtocol._toUTF16Offsets(_:)();
  if (!__OFSUB__(v75, result))
  {
    v76 = objc_msgSend(v38, sel_rangeOfString_options_range_, v73, v115, result, v75 - result);
LABEL_27:
    v56 = v76;
    v43 = v77;
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    goto LABEL_28;
  }
  __break(1u);
  return result;
}

_QWORD *StringProtocol.components<A>(separatedBy:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  char v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  void *v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;

  v7 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8);
  dispatch thunk of Collection.startIndex.getter();
  v12 = v71;
  dispatch thunk of Collection.endIndex.getter();
  if (v70 >> 14 < v12 >> 14)
    goto LABEL_46;
  v67 = a1;
  v13 = StringProtocol._asContiguousUTF8Substring(from:)(v12, v70, a2);
  v68 = v15;
  v69 = v16;
  if (v16)
  {
    v17 = v13;
    v11 = v14;
    v18 = v67;
    v66 = specialized static StringProtocol.== infix<A>(_:_:)(v67, 10, 0xE100000000000000, a3);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v18, a3);
    v19 = Substring.init<A>(_:)();
    v65 = v21;
    v67 = v22;
    v23 = v11 >> 14;
    a2 = v17;
    v24 = v11;
    if (v17 >> 14 >= v11 >> 14)
    {
      v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      if (v23 >= v17 >> 14)
      {
LABEL_36:
        v54 = Substring.subscript.getter();
        v11 = MEMORY[0x186DA4634](v54);
        a2 = v55;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
LABEL_37:
          v57 = v3[2];
          v56 = v3[3];
          if (v57 >= v56 >> 1)
            v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v56 > 1), v57 + 1, 1, v3);
          v3[2] = v57 + 1;
          v58 = &v3[2 * v57];
          v58[4] = v11;
          v58[5] = a2;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_40;
        }
LABEL_47:
        v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
        goto LABEL_37;
      }
    }
    else
    {
      v61 = v20;
      v62 = v19;
      v63 = v19 ^ v20;
      v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v60 = v17 >> 14;
      v25 = v17 >> 14;
      v64 = v11 >> 14;
      while (1)
      {
        if (v23 < v25)
          goto LABEL_44;
        swift_bridgeObjectRetain();
        v11 = a2;
        v26 = v24;
        v27 = Substring.subscript.getter();
        v29 = v28;
        v31 = v30;
        v33 = v32;
        swift_bridgeObjectRelease();
        if ((v27 ^ v29) < 0x4000 || v63 < 0x4000)
        {
          if ((v27 ^ v29) < 0x4000)
          {
            v41 = v25;
          }
          else
          {
            v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            v41 = v60;
          }
          a2 = v11;
          swift_bridgeObjectRelease();
          goto LABEL_34;
        }
        if ((v66 & 1) != 0)
        {
          swift_bridgeObjectRetain();
          v34 = v67;
          swift_bridgeObjectRetain();
          a2 = specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v62, v61, v65, v34, 0, 0, 0, 0, 0, v27, v29, v31, v33);
          v36 = v35;
          v38 = v37;
          swift_bridgeObjectRelease_n();
        }
        else
        {
          a2 = specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v62, v61, v65, v67, 0, 0, 0, 0, 0, v27, v29, v31, v33);
          v36 = v39;
          v38 = v40;
        }
        swift_bridgeObjectRelease();
        if ((v38 & 1) != 0)
        {
          v41 = v25;
          a2 = v11;
LABEL_34:
          v23 = v64;
LABEL_35:
          if (v23 < v41)
            goto LABEL_43;
          goto LABEL_36;
        }
        v41 = v36 >> 14;
        if (a2 >> 14 == v36 >> 14)
          break;
        if (a2 >> 14 < v25)
          goto LABEL_45;
        v42 = Substring.subscript.getter();
        v43 = MEMORY[0x186DA4634](v42);
        v45 = v44;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
        v47 = v3[2];
        v46 = v3[3];
        if (v47 >= v46 >> 1)
          v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v46 > 1), v47 + 1, 1, v3);
        v3[2] = v47 + 1;
        v48 = &v3[2 * v47];
        v48[4] = v43;
        v48[5] = v45;
        swift_bridgeObjectRelease();
        v25 = v36 >> 14;
        v23 = v64;
        a2 = v11;
        v24 = v26;
        if (v41 >= v64)
          goto LABEL_35;
      }
      a2 = v11;
      if (v64 >= v25)
        goto LABEL_36;
    }
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  StringProtocol._ephemeralString.getter();
  v49 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  StringProtocol._ephemeralString.getter();
  v50 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v51 = objc_msgSend(v49, sel_componentsSeparatedByString_, v50);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if (!v51)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  type metadata accessor for __SwiftDeferredNSArray();
  swift_unknownObjectRetain();
  if (swift_dynamicCastClass())
  {
    swift_retain();

  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v52 = swift_dynamicCastClass();
  if (!v52)
  {
    swift_unknownObjectRelease();
    objc_msgSend(v51, sel_copy);
    v53 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    v3 = (_QWORD *)specialized _arrayForceCast<A, B>(_:)(v53);

LABEL_40:
    swift_bridgeObjectRelease();
    return v3;
  }
  v3 = (_QWORD *)v52;

  return v3;
}

uint64_t StringProtocol.contains<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[2];
  unint64_t v33;
  unint64_t v34;

  v32[1] = a5;
  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v10 = (char *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of Collection.startIndex.getter();
  v11 = v34;
  result = dispatch thunk of Collection.endIndex.getter();
  if (v33 >> 14 < v11 >> 14)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  v13 = StringProtocol._asContiguousUTF8Substring(from:)(v11, v33, a2);
  if (v16)
  {
    v17 = v13;
    v18 = v14;
    v19 = v16;
    v20 = v15;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a3);
    v21 = Substring.init<A>(_:)();
    if ((v17 ^ v18) < 0x4000 || (v21 ^ v22) < 0x4000)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v21, v22, v23, v24, 0, 0, 0, 0, 0, v17, v18, v20, v19);
      v26 = v25;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v26 & 1) == 0)
        return 1;
    }
    return 0;
  }
  StringProtocol._ephemeralString.getter();
  StringProtocol._ephemeralString.getter();
  v27 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v28 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v29 = objc_msgSend(v27, sel_rangeOfString_, v28);
  v31 = v30;
  swift_unknownObjectRelease();
  result = swift_unknownObjectRelease();
  if (v29 != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    if (!__OFADD__(v29, v31))
    {
      StringProtocol._toUTF16Indices(_:)();
      return 1;
    }
    goto LABEL_14;
  }
  return 0;
}

unint64_t specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, char a9, unint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t result;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t countAndFlagsBits;
  char v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  Swift::String v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v83;
  int v84;
  int v85;
  int v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char v106;
  unint64_t v107;
  Swift::String v108;
  unint64_t object;
  unint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  unsigned int v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v127;
  int v128;
  int v129;
  int v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char v139;
  int v140;
  uint64_t v141;
  char v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  int v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  int v171;
  uint64_t v172;
  _BOOL4 v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  int v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  _QWORD v193[2];

  v153 = a8;
  v186 = a7;
  v162 = a4;
  v161 = a3;
  v163 = a2;
  v165 = a1;
  v169 = a12;
  v15 = a10;
  v16 = a11;
  v193[1] = *MEMORY[0x1E0C80C00];
  v17 = type metadata accessor for Unicode.Scalar.Properties();
  v183 = *(_QWORD *)(v17 - 8);
  v184 = v17;
  MEMORY[0x1E0C80A78](v17);
  v182 = (char *)&v152 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v159 = a10;
  v160 = a13;
  v185 = a6;
  v187 = a5;
  if ((a5 & 1) == 0 && (a6 & 1) == 0)
  {
    if ((v186 & 1) == 0)
    {
      v151 = a13;
      v150 = v169;
      return specialized BidirectionalCollection._range<A>(of:anchored:backwards:)(v165, v163, v161, v162, v153 & 1, a9 & 1, a10, a11);
    }
LABEL_6:
    if ((a9 & 1) == 0)
    {
      if ((v153 & 1) == 0)
        goto LABEL_22;
      goto LABEL_13;
    }
    goto LABEL_11;
  }
  if ((v186 & 1) != 0)
    goto LABEL_6;
  if ((a9 & 1) != 0)
  {
    if ((a6 & 1) == 0)
    {
      v22 = v165 >> 14;
      v23 = a11;
      if (v165 >> 14 < v163 >> 14)
      {
        v24 = a10 >> 14;
        if (a10 >> 14 >= a11 >> 14)
          return 0;
        v25 = Substring.index(before:)();
        v26 = Substring.index(before:)();
        v23 = v26;
        if (v22 < v25 >> 14)
        {
          if (v24 >= v26 >> 14)
            return 0;
          while (1)
          {
            v27 = Substring.index(before:)();
            v23 = Substring.index(before:)();
            if (v22 >= v27 >> 14)
              break;
            result = 0;
            if (v24 >= v23 >> 14)
              return result;
          }
        }
        v15 = v159;
      }
      v152 = 0;
      if ((v153 & 1) != 0)
        v21 = v23;
      else
        v21 = v15;
      v20 = v23;
      goto LABEL_37;
    }
LABEL_11:
    v20 = Substring.index(_:offsetBy:)();
    v152 = 0;
    v21 = a10;
    goto LABEL_37;
  }
  if ((v153 & 1) != 0)
  {
LABEL_13:
    v152 = 1;
    v21 = a10;
    v20 = a10;
    goto LABEL_37;
  }
  if ((a6 & 1) != 0)
  {
LABEL_22:
    v21 = Substring.index(_:offsetBy:)();
    v152 = 1;
    v20 = a10;
    goto LABEL_37;
  }
  v28 = v165 >> 14;
  if (v165 >> 14 >= v163 >> 14)
  {
    v152 = 1;
    v21 = a11;
  }
  else
  {
    v29 = a10 >> 14;
    if (a10 >> 14 >= a11 >> 14)
      return 0;
    v30 = Substring.index(before:)();
    v31 = Substring.index(before:)();
    v21 = v31;
    if (v28 >= v30 >> 14)
    {
      v152 = 1;
      v20 = a10;
      v15 = a10;
      goto LABEL_37;
    }
    if (v29 >= v31 >> 14)
      return 0;
    while (1)
    {
      v32 = Substring.index(before:)();
      v21 = Substring.index(before:)();
      if (v28 >= v32 >> 14)
        break;
      result = 0;
      if (v29 >= v21 >> 14)
        return result;
    }
    v152 = 1;
    v15 = v159;
  }
  v20 = v15;
LABEL_37:
  v156 = v21 >> 14;
  v33 = -1;
  if (v21 >> 14 >= v20 >> 14)
    v33 = 1;
  v155 = v33;
  v168 = v163 >> 14;
  v158 = v165 >> 14;
  v170 = a11;
  v34 = v20;
  while (2)
  {
    v192 = 15;
    v193[0] = v34;
    result = v34;
    if (v158 >= v168)
    {
      if (v158 == v168)
        goto LABEL_281;
      if (v156 == v34 >> 14)
        return 0;
      v35 = 0;
      goto LABEL_250;
    }
    v154 = v34;
    v35 = 0;
    v36 = 0;
    v176 = 0;
    v37 = 0;
    v38 = 0xE000000000000000;
    v174 = 15;
    v39 = 0xE000000000000000;
    v40 = v165;
    v41 = v158;
    v42 = v181;
LABEL_42:
    v173 = 0;
    v164 = v40;
    v166 = v40 >> 14;
    v172 = v37;
    v177 = v39;
    v43 = v16;
    v44 = v170;
    while (1)
    {
      v167 = v41;
      v171 = v36;
      if ((v36 & 1) != 0)
      {
        v47 = String.subscript.getter();
        v16 = v48;
        if ((v35 & 1) != 0)
          swift_bridgeObjectRelease();
        v192 = String.index(after:)();
        if (v173)
          goto LABEL_48;
      }
      else
      {
        if ((v193[0] ^ v44) < 0x4000)
        {
          if (v41 == v168)
            goto LABEL_288;
          if (v156 == v154 >> 14)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v35 & 1) != 0)
            {
LABEL_300:
              swift_bridgeObjectRelease();
              goto LABEL_301;
            }
            return 0;
          }
          goto LABEL_249;
        }
        v47 = Substring.subscript.getter();
        v16 = v52;
        if ((v35 & 1) != 0)
          swift_bridgeObjectRelease();
        if (v173)
        {
LABEL_48:
          v180 = String.subscript.getter();
          v50 = v49;
          if ((v35 & 1) != 0)
            swift_bridgeObjectRelease();
          v51 = String.index(after:)();
          goto LABEL_58;
        }
      }
      v180 = Substring.subscript.getter();
      v50 = v53;
      if ((v35 & 1) != 0)
        swift_bridgeObjectRelease();
      v51 = v174;
LABEL_58:
      countAndFlagsBits = v180;
      v55 = v185;
      if (v47 == v180 && v16 == v50)
      {
        v42 = v16;
        goto LABEL_63;
      }
      v174 = v51;
      v181 = v50;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        break;
LABEL_62:
      v42 = v181;
      v51 = v174;
LABEL_63:
      v175 = v177;
      v56 = v172;
      if ((v171 & 1) != 0)
        goto LABEL_64;
LABEL_206:
      if (!v173)
      {
        v141 = v56;
        v174 = v51;
        v181 = v42;
        goto LABEL_221;
      }
LABEL_207:
      v36 = 0;
      if ((v38 & 0x2000000000000000) == 0)
      {
LABEL_208:
        v97 = v176 & 0xFFFFFFFFFFFFLL;
        goto LABEL_209;
      }
LABEL_133:
      v97 = HIBYTE(v38) & 0xF;
LABEL_209:
      v172 = v56;
      v177 = v175;
      v43 = v16;
      v44 = v170;
      v174 = v51;
      if (v51 >> 14 == 4 * v97)
      {
        if ((v36 & 1) != 0)
        {
          v140 = 1;
          v141 = v172;
          v175 = v177;
          v181 = v42;
          goto LABEL_222;
        }
        v141 = v172;
        v175 = v177;
        v181 = v42;
        goto LABEL_221;
      }
      if ((v36 & 1) != 0)
      {
        v35 = 1;
        v173 = 1;
        v41 = v166;
        if (v166 >= v168)
        {
          if (v166 != v168)
            goto LABEL_248;
          if ((v185 & 1) == 0)
          {
            v142 = 0;
            v144 = v177;
            v181 = v42;
            v37 = v172;
            v143 = v154;
            if ((v177 & 0x2000000000000000) != 0)
              goto LABEL_232;
            goto LABEL_244;
          }
          v37 = v172;
          v175 = v177;
          v181 = v42;
          goto LABEL_243;
        }
      }
      else
      {
        v45 = v36;
        v46 = Substring.index(after:)();
        v36 = v45;
        v193[0] = v46;
        v35 = 1;
        v173 = 1;
        v41 = v166;
        if (v166 >= v168)
        {
          if (v166 == v168)
          {
LABEL_288:
            if ((v185 & 1) != 0)
            {
LABEL_284:
              if (v193[0] >> 14 < v44 >> 14)
                specialized _StringCompareOptionsIterable._consumeExtendCharacters(from:)((unint64_t)v193, v15, v44);
              goto LABEL_289;
            }
            goto LABEL_289;
          }
LABEL_248:
          if (v156 == v154 >> 14)
            goto LABEL_299;
LABEL_249:
          v181 = v42;
          v16 = v43;
          goto LABEL_250;
        }
      }
    }
    if ((v171 & 1) != 0)
    {
      if (v173)
      {
        v56 = v172;
        v57 = v177;
        v51 = v174;
        goto LABEL_123;
      }
      v57 = v177;
      v64 = v181;
      if (v47 != countAndFlagsBits)
      {
LABEL_147:
        v106 = _stringCompareWithSmolCheck(_:_:expecting:)();
        v105 = v181;
        if ((v106 & 1) != 0)
        {
LABEL_148:
          v58 = 0;
          v51 = v174;
          v56 = v172;
          if ((v57 & 0x2000000000000000) == 0)
            goto LABEL_127;
LABEL_70:
          v59 = HIBYTE(v57) & 0xF;
LABEL_128:
          v175 = v57;
          if (v192 >> 14 == 4 * v59)
          {
            v42 = v181;
            if ((v58 & 1) == 0)
            {
              v141 = v56;
              v174 = v51;
LABEL_221:
              v140 = 0;
              v193[0] = Substring.index(after:)();
              goto LABEL_222;
            }
            goto LABEL_207;
          }
          v42 = v181;
          if ((v58 & 1) != 0)
          {
            v36 = 1;
            if ((v38 & 0x2000000000000000) == 0)
              goto LABEL_208;
            goto LABEL_133;
          }
          v141 = v56;
          v174 = v51;
          v140 = 1;
LABEL_222:
          v40 = Substring.index(after:)();
          v41 = v40 >> 14;
          v35 = 1;
          v42 = v181;
          v39 = v175;
          v37 = v141;
          v36 = v140;
          if (v40 >> 14 >= v168)
          {
            if (v40 >> 14 == v168)
            {
              v143 = v154;
              if (v140)
              {
                if ((v185 & 1) == 0)
                {
                  v142 = 0;
                  goto LABEL_231;
                }
                goto LABEL_243;
              }
              if ((v185 & 1) != 0)
              {
                v177 = v175;
                goto LABEL_283;
              }
LABEL_289:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v148 = v152 | ~(_BYTE)v153;
              goto LABEL_290;
            }
            if (v156 == v154 >> 14)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
LABEL_301:
              swift_bridgeObjectRelease();
              return 0;
            }
LABEL_250:
            v34 = Substring.index(_:offsetBy:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v35 & 1) != 0)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            continue;
          }
          goto LABEL_42;
        }
        v175 = v57;
        v171 = 1;
LABEL_151:
        v107 = v105;
        if ((Character.asciiValue.getter() & 0x100) == 0)
        {
          if ((v186 & 1) != 0)
          {
            v108 = String.lowercased()();
            countAndFlagsBits = v108._countAndFlagsBits;
            object = (unint64_t)v108._object;
          }
          else
          {
            object = v181;
            swift_bridgeObjectRetain();
          }
          goto LABEL_198;
        }
        v110 = 0xE000000000000000;
        v190 = 0;
        v191 = 0xE000000000000000;
        v178 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
        v179 = HIBYTE(v107) & 0xF;
        if ((v107 & 0x2000000000000000) != 0)
          v15 = HIBYTE(v107) & 0xF;
        else
          v15 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
        if (v15)
        {
          v157 = v38;
          v177 = v107 & 0xFFFFFFFFFFFFFFLL;
          swift_bridgeObjectRetain();
          v111 = 0;
          while (1)
          {
            if ((v181 & 0x1000000000000000) != 0)
            {
              v118 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
            }
            else
            {
              if ((v181 & 0x2000000000000000) != 0)
              {
                v188 = countAndFlagsBits;
                v189 = v177;
              }
              else if ((countAndFlagsBits & 0x1000000000000000) == 0)
              {
                _StringObject.sharedUTF8.getter();
              }
              v118 = _decodeScalar(_:startingAt:)();
            }
            v120 = v118;
            v121 = v119;
            if ((v187 & 1) != 0 && v118 >> 8 >= 0xFF && v118 < 0xFFEF)
            {
              LODWORD(v188) = v118;
              result = CFUniCharCompatibilityDecompose();
              v122 = v188;
              if (v188 >> 11 == 27)
                goto LABEL_280;
              if (v188 > 0x10FFFF)
                goto LABEL_279;
              if ((v55 & 1) == 0)
                goto LABEL_186;
            }
            else
            {
              v122 = v118;
              if ((v55 & 1) == 0)
                goto LABEL_186;
            }
            v123 = BuiltInUnicodeScalarSet._bitmapPtrForPlane(_:)(BYTE2(v120), 5);
            if (!v123 || ((*(unsigned __int8 *)(v123 + ((unsigned __int16)v120 >> 3)) >> (v120 & 7)) & 1) == 0)
            {
              v124 = BuiltInUnicodeScalarSet._bitmapPtrForPlane(_:)(BYTE2(v122), 2);
              if (v124 && ((*(unsigned __int8 *)(v124 + ((unsigned __int16)v122 >> 3)) >> (v122 & 7)) & 1) != 0)
              {
                MEMORY[0x1E0C80A78](v124);
                v125 = CFUniCharDecomposeCharacter();
                v55 = v185;
                if (*(&v152 - 64) < 0x510 && v125 > 0)
                  v122 = *(&v152 - 64);
              }
LABEL_186:
              if ((v186 & 1) != 0)
              {
                v112 = v182;
                Unicode.Scalar.properties.getter();
                v113 = Unicode.Scalar.Properties._caseFolded.getter();
                v115 = v114;
                (*(void (**)(char *, uint64_t))(v183 + 8))(v112, v184);
                v116 = v113;
                v55 = v185;
                v117 = v115;
              }
              else
              {
                if (v122 >= 0x80)
                {
                  v128 = (v122 & 0x3F) << 8;
                  if (v122 >= 0x800)
                  {
                    v129 = (v128 | (v122 >> 6) & 0x3F) << 8;
                    v130 = (((v129 | (v122 >> 12) & 0x3F) << 8) | (v122 >> 18)) - 2122219023;
                    v127 = (v129 | (v122 >> 12)) + 8487393;
                    if (HIWORD(v122))
                      v127 = v130;
                  }
                  else
                  {
                    v127 = (v128 | (v122 >> 6)) + 33217;
                  }
                }
                else
                {
                  v127 = v122 + 1;
                }
                v188 = (v127 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v127) >> 3))));
                v116 = MEMORY[0x186DA46D0](&v188);
              }
              String.append(_:)(*(Swift::String *)&v116);
              swift_bridgeObjectRelease();
            }
            v111 += v121;
            countAndFlagsBits = v180;
            if (v111 >= v15)
            {
              swift_bridgeObjectRelease();
              v131 = v190;
              v110 = v191;
              v38 = v157;
              goto LABEL_196;
            }
          }
        }
        v131 = 0;
LABEL_196:
        v188 = v131;
        v189 = v110;
        countAndFlagsBits = String.init<A>(_:)();
        object = v132;
        v15 = v159;
LABEL_198:
        v133 = v38;
        v134 = HIBYTE(object) & 0xF;
        if ((object & 0x2000000000000000) == 0)
          v134 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
        v173 = v134 != 0;
        if (v134)
        {
          String.subscript.getter();
          v136 = v135;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v174 = String.index(after:)();
          swift_bridgeObjectRelease();
          v176 = countAndFlagsBits;
          v133 = object;
          v181 = v136;
        }
        swift_bridgeObjectRetain();
        v137 = specialized Collection.first.getter(countAndFlagsBits, object);
        if (v138)
        {
          if (v47 == v137 && v138 == v16)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v38 = v133;
            v42 = v181;
            v51 = v174;
            v56 = v172;
            if ((v171 & 1) == 0)
              goto LABEL_206;
LABEL_64:
            v181 = v42;
            if (v173)
            {
              v57 = v175;
              goto LABEL_123;
            }
            v58 = 0;
            v57 = v175;
            if ((v175 & 0x2000000000000000) != 0)
              goto LABEL_70;
LABEL_127:
            v59 = v56 & 0xFFFFFFFFFFFFLL;
            goto LABEL_128;
          }
          v139 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v139 & 1) != 0)
          {
            v177 = v175;
            v38 = v133;
            goto LABEL_62;
          }
          v143 = v154;
          v37 = v172;
          if (v167 == v168)
          {
            if (v171)
            {
              if ((v55 & 1) == 0)
              {
                v142 = 0;
LABEL_231:
                v144 = v175;
                if ((v175 & 0x2000000000000000) != 0)
                {
LABEL_232:
                  v145 = v144;
                  v146 = HIBYTE(v144) & 0xF;
LABEL_245:
                  if (v192 >> 14 != 4 * v146)
                  {
                    if (v156 == v143 >> 14)
                      goto LABEL_299;
                    v35 = 1;
                    goto LABEL_250;
                  }
                  v193[0] = Substring.index(after:)();
                  if ((v142 & 1) == 0)
                  {
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    v35 = 1;
                    result = v154;
                    if (v152 & 1 | ((v153 & 1) == 0))
                      goto LABEL_292;
                    goto LABEL_291;
                  }
                  v35 = 1;
                  v177 = v145;
                  goto LABEL_283;
                }
LABEL_244:
                v145 = v144;
                v146 = v37 & 0xFFFFFFFFFFFFLL;
                goto LABEL_245;
              }
LABEL_243:
              v144 = v175;
              v147 = v37;
              specialized _StringCompareOptionsIterable._consumeExtendCharacters(from:)((unint64_t)&v192, v37, v175);
              v37 = v147;
              v142 = 1;
              v143 = v154;
              if ((v144 & 0x2000000000000000) != 0)
                goto LABEL_232;
              goto LABEL_244;
            }
LABEL_313:
            if ((v55 & 1) != 0)
            {
              v35 = 1;
              v177 = v175;
              goto LABEL_283;
            }
            goto LABEL_318;
          }
          if (v156 == v154 >> 14)
          {
LABEL_299:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_300;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v167 == v168)
          {
            if (!v171)
              goto LABEL_313;
            if ((v55 & 1) == 0)
            {
              v142 = 0;
              v143 = v154;
              v144 = v175;
              v37 = v172;
              if ((v175 & 0x2000000000000000) != 0)
                goto LABEL_232;
              goto LABEL_244;
            }
            v37 = v172;
            goto LABEL_243;
          }
          if (v156 == v154 >> 14)
            goto LABEL_299;
        }
LABEL_237:
        v35 = 1;
        goto LABEL_250;
      }
      goto LABEL_146;
    }
    break;
  }
  v60 = Character.asciiValue.getter();
  v157 = v38;
  if ((v60 & 0x100) == 0)
  {
    if ((v186 & 1) != 0)
    {
      v62 = String.lowercased()();
      v61 = v62._countAndFlagsBits;
      v63 = (unint64_t)v62._object;
    }
    else
    {
      swift_bridgeObjectRetain();
      v61 = v47;
      v63 = v16;
    }
    goto LABEL_120;
  }
  v65 = 0xE000000000000000;
  v190 = 0;
  v191 = 0xE000000000000000;
  v178 = v47 & 0xFFFFFFFFFFFFLL;
  v179 = HIBYTE(v16) & 0xF;
  if ((v16 & 0x2000000000000000) != 0)
    v66 = HIBYTE(v16) & 0xF;
  else
    v66 = v47 & 0xFFFFFFFFFFFFLL;
  if (!v66)
  {
    v87 = 0;
    goto LABEL_118;
  }
  v15 = (v16 & 0xFFFFFFFFFFFFFFFLL) + 32;
  swift_bridgeObjectRetain();
  v67 = 0;
  while (2)
  {
    if ((v16 & 0x1000000000000000) != 0)
    {
      v74 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((v16 & 0x2000000000000000) != 0)
      {
        v188 = v47;
        v189 = v16 & 0xFFFFFFFFFFFFFFLL;
      }
      else if ((v47 & 0x1000000000000000) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }
      v74 = _decodeScalar(_:startingAt:)();
    }
    v76 = v74;
    v77 = v75;
    if ((v187 & 1) == 0 || v74 >> 8 < 0xFF || v74 >= 0xFFEF)
    {
      v78 = v74;
      if ((v55 & 1) == 0)
        goto LABEL_108;
      goto LABEL_99;
    }
    LODWORD(v188) = v74;
    result = CFUniCharCompatibilityDecompose();
    v78 = v188;
    if (v188 >> 11 == 27)
      goto LABEL_278;
    if (v188 <= 0x10FFFF)
    {
      if ((v55 & 1) == 0)
        goto LABEL_108;
LABEL_99:
      v79 = BuiltInUnicodeScalarSet._bitmapPtrForPlane(_:)(BYTE2(v76), 5);
      if (!v79 || ((*(unsigned __int8 *)(v79 + ((unsigned __int16)v76 >> 3)) >> (v76 & 7)) & 1) == 0)
      {
        v80 = BuiltInUnicodeScalarSet._bitmapPtrForPlane(_:)(BYTE2(v78), 2);
        if (v80 && ((*(unsigned __int8 *)(v80 + ((unsigned __int16)v78 >> 3)) >> (v78 & 7)) & 1) != 0)
        {
          MEMORY[0x1E0C80A78](v80);
          v81 = CFUniCharDecomposeCharacter();
          v55 = v185;
          if (*(&v152 - 64) < 0x510 && v81 > 0)
            v78 = *(&v152 - 64);
        }
LABEL_108:
        if ((v186 & 1) != 0)
        {
          v68 = v182;
          Unicode.Scalar.properties.getter();
          v69 = Unicode.Scalar.Properties._caseFolded.getter();
          v71 = v70;
          (*(void (**)(char *, uint64_t))(v183 + 8))(v68, v184);
          v72 = v69;
          v55 = v185;
          v73 = v71;
        }
        else
        {
          if (v78 >= 0x80)
          {
            v84 = (v78 & 0x3F) << 8;
            if (v78 >= 0x800)
            {
              v85 = (v84 | (v78 >> 6) & 0x3F) << 8;
              v86 = (((v85 | (v78 >> 12) & 0x3F) << 8) | (v78 >> 18)) - 2122219023;
              v83 = (v85 | (v78 >> 12)) + 8487393;
              if (HIWORD(v78))
                v83 = v86;
            }
            else
            {
              v83 = (v84 | (v78 >> 6)) + 33217;
            }
          }
          else
          {
            v83 = v78 + 1;
          }
          v188 = (v83 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v83) >> 3))));
          v72 = MEMORY[0x186DA46D0](&v188);
        }
        String.append(_:)(*(Swift::String *)&v72);
        swift_bridgeObjectRelease();
      }
      v67 += v77;
      if (v67 >= v66)
      {
        swift_bridgeObjectRelease();
        v87 = v190;
        v65 = v191;
        v15 = v159;
LABEL_118:
        v188 = v87;
        v189 = v65;
        v61 = String.init<A>(_:)();
        v63 = v88;
LABEL_120:
        v89 = v61;
        v90 = specialized Collection.first.getter(v61, v63);
        if (!v91)
        {
          swift_bridgeObjectRelease();
          v38 = v157;
          if (!v173)
          {
            v171 = 0;
            v175 = v177;
            countAndFlagsBits = v180;
            v105 = v181;
            goto LABEL_151;
          }
          if (v167 != v168)
          {
            if (v156 == v154 >> 14)
              goto LABEL_299;
            v35 = 1;
            goto LABEL_250;
          }
          if ((v55 & 1) != 0)
          {
            v35 = 1;
LABEL_283:
            v44 = v170;
            goto LABEL_284;
          }
LABEL_318:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v148 = v152 | ~(_BYTE)v153;
          v35 = 1;
LABEL_290:
          result = v154;
          if ((v148 & 1) != 0)
            goto LABEL_292;
          goto LABEL_291;
        }
        v92 = v90;
        v93 = v91;
        swift_bridgeObjectRelease();
        v16 = v93;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v192 = 15;
        v172 = v89;
        v94 = String.index(after:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v192 = v94;
        if (v173)
        {
          v38 = v157;
          v51 = v174;
          v57 = v63;
          v56 = v172;
LABEL_123:
          v95 = HIBYTE(v57) & 0xF;
          if ((v57 & 0x2000000000000000) == 0)
            v95 = v56 & 0xFFFFFFFFFFFFLL;
          v96 = 4 * v95;
          if (4 * v95 != v192 >> 14)
          {
            v98 = HIBYTE(v38) & 0xF;
            if ((v38 & 0x2000000000000000) == 0)
              v98 = v176 & 0xFFFFFFFFFFFFLL;
            v180 = 4 * v98;
            v175 = v57;
            while (v180 != v51 >> 14)
            {
              v100 = v56;
              v101 = String.subscript.getter();
              v103 = v102;
              if (v101 == String.subscript.getter() && v103 == v104)
              {
                swift_bridgeObjectRelease_n();
              }
              else
              {
                v99 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if ((v99 & 1) == 0)
                {
                  if (v167 == v168)
                  {
                    v37 = v100;
                    v15 = v159;
                    if ((v55 & 1) != 0)
                      goto LABEL_243;
                    v142 = 0;
                    v143 = v154;
                    goto LABEL_231;
                  }
                  v15 = v159;
                  if (v156 == v154 >> 14)
                    goto LABEL_299;
                  goto LABEL_237;
                }
              }
              v57 = v175;
              v192 = String.index(after:)();
              v51 = String.index(after:)();
              v56 = v100;
              if (v96 == v192 >> 14)
                break;
            }
          }
          v58 = 1;
          v15 = v159;
          if ((v57 & 0x2000000000000000) != 0)
            goto LABEL_70;
          goto LABEL_127;
        }
        v47 = v92;
        v38 = v157;
        v57 = v63;
        countAndFlagsBits = v180;
        v64 = v181;
        if (v47 != v180)
          goto LABEL_147;
LABEL_146:
        if (v16 == v64)
          goto LABEL_148;
        goto LABEL_147;
      }
      continue;
    }
    break;
  }
  __break(1u);
LABEL_278:
  __break(1u);
LABEL_279:
  __break(1u);
LABEL_280:
  __break(1u);
LABEL_281:
  if ((v185 & 1) != 0)
  {
    v154 = result;
    v35 = 0;
    v177 = 0xE000000000000000;
    goto LABEL_283;
  }
  v35 = 0;
  if (v152 & 1 | ((v153 & 1) == 0))
  {
LABEL_292:
    if (v193[0] >> 14 < result >> 14)
      __break(1u);
    if ((v35 & 1) == 0)
      return result;
LABEL_296:
    v149 = result;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v149;
  }
LABEL_291:
  if (!((v193[0] ^ v170) >> 14))
    goto LABEL_292;
  result = 0;
  if ((v35 & 1) != 0)
    goto LABEL_296;
  return result;
}

uint64_t specialized Collection.first.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
    return String.subscript.getter();
  else
    return 0;
}

{
  uint64_t v3;
  unsigned __int8 v4;

  if ((a2 & 0x2000000000000000) != 0)
    v3 = HIBYTE(a2) & 0xF;
  else
    v3 = a1 & 0xFFFFFFFFFFFFLL;
  if (v3)
  {
    v4 = a1;
    if ((a2 & 0x1000000000000000) != 0)
    {
      v4 = String.UTF8View._foreignSubscript(position:)();
    }
    else if ((a2 & 0x2000000000000000) == 0)
    {
      if ((a1 & 0x1000000000000000) != 0)
        v4 = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
      else
        v4 = *(_BYTE *)_StringObject.sharedUTF8.getter();
    }
  }
  else
  {
    v4 = 0;
  }
  return v4 | ((v3 == 0) << 8);
}

{
  uint64_t v2;
  unsigned int v3;

  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v2)
    goto LABEL_9;
  if ((a2 & 0x1000000000000000) != 0)
  {
    LOWORD(v3) = String.UTF16View._foreignSubscript(position:)();
    return (unsigned __int16)v3 | ((v2 == 0) << 16);
  }
  v3 = _StringGuts.fastUTF8Scalar(startingAt:)();
  if (HIWORD(v3))
  {
    v3 = (unsigned __int16)((v3 + 67043328) >> 10) + 55296;
    if ((v3 & 0x10000) != 0)
    {
      __break(1u);
LABEL_9:
      LOWORD(v3) = 0;
    }
  }
  return (unsigned __int16)v3 | ((v2 == 0) << 16);
}

unint64_t specialized BidirectionalCollection._range<A>(of:anchored:backwards:)(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6, unint64_t a7, unint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t result;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v36;
  unint64_t v38;
  unint64_t v39;

  if ((a6 & 1) != 0)
  {
    v9 = a8;
    v33 = a1 >> 14;
    v38 = a2 >> 14;
    if (a1 >> 14 >= a2 >> 14)
    {
LABEL_9:
      if ((a5 & 1) != 0)
        v12 = v9;
      else
        v12 = a7;
      goto LABEL_12;
    }
    if (a7 >> 14 < a8 >> 14)
    {
      while (1)
      {
        v10 = Substring.index(before:)();
        v11 = Substring.index(before:)();
        v9 = v11;
        if (v33 >= v10 >> 14)
          break;
        if (a7 >> 14 >= v11 >> 14)
          return 0;
      }
      goto LABEL_9;
    }
    return 0;
  }
  if ((a5 & 1) == 0)
  {
    v33 = a1 >> 14;
    v38 = a2 >> 14;
    if (a1 >> 14 >= a2 >> 14)
    {
      v13 = a8;
      v12 = a8;
      v9 = a7;
      goto LABEL_13;
    }
    if (a7 >> 14 < a8 >> 14)
    {
      while (1)
      {
        v30 = Substring.index(before:)();
        v31 = Substring.index(before:)();
        v12 = v31;
        if (v33 >= v30 >> 14)
          break;
        if (a7 >> 14 >= v31 >> 14)
          return 0;
      }
      v9 = a7;
      goto LABEL_12;
    }
    return 0;
  }
  v38 = a2 >> 14;
  v33 = a1 >> 14;
  v12 = a7;
  v9 = a7;
LABEL_12:
  v13 = a8;
LABEL_13:
  v32 = v12 >> 14;
  v36 = v13 >> 14;
  while (1)
  {
    v34 = v9 >> 14;
    v14 = v9;
    v15 = v33;
    if (v33 < v38)
    {
      v14 = v9;
      v15 = v33;
      if (v34 < v36)
      {
        v16 = Substring.subscript.getter();
        v18 = v17;
        if (v16 != Substring.subscript.getter() || v18 != v19)
        {
          v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v14 = v9;
          v15 = v33;
          if ((v20 & 1) == 0)
            goto LABEL_29;
          goto LABEL_22;
        }
LABEL_20:
        swift_bridgeObjectRelease_n();
LABEL_22:
        do
        {
          v22 = Substring.index(after:)();
          v23 = Substring.index(after:)();
          v14 = v22;
          v15 = v23 >> 14;
          if (v23 >> 14 >= v38 || v14 >> 14 >= v36)
            break;
          v39 = v14;
          v25 = Substring.subscript.getter();
          v27 = v26;
          if (v25 == Substring.subscript.getter() && v27 == v28)
            goto LABEL_20;
          v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v14 = v39;
        }
        while ((v21 & 1) != 0);
      }
    }
LABEL_29:
    if (v15 == v38)
      break;
    if (v34 == v32)
      return 0;
    v9 = Substring.index(_:offsetBy:)();
  }
  result = v9;
  if (v34 > v14 >> 14)
    __break(1u);
  return result;
}

uint64_t StringProtocol._asContiguousUTF8Substring(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t, uint64_t, __n128);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[4];

  v7 = MEMORY[0x1E0C80A78](a1);
  if (v8 != MEMORY[0x1E0DEA968])
  {
    v9 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16);
    if (a3 == MEMORY[0x1E0DEBAF0])
    {
      v9((char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v4, MEMORY[0x1E0DEBAF0], v7);
      swift_dynamicCast();
      if ((v14[3] & 0x1000000000000000) == 0)
      {
LABEL_8:
        v11 = Substring.subscript.getter();
        goto LABEL_9;
      }
    }
    else
    {
      v9((char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v4, a3, v7);
      Substring.init<A>(_:)();
      if ((v10 & 0x1000000000000000) == 0)
        goto LABEL_8;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    return 0;
  }
  (*(void (**)(char *, uint64_t, _QWORD, __n128))(v6 + 16))((char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v4, MEMORY[0x1E0DEA968], v7);
  swift_dynamicCast();
  if ((v14[1] & 0x1000000000000000) != 0)
    goto LABEL_11;
  v11 = String.subscript.getter();
LABEL_9:
  v12 = v11;
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t specialized static StringProtocol.== infix<A>(_:_:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, __n128);
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  _QWORD v26[4];

  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)v26 - v11;
  v16 = MEMORY[0x1E0C80A78](v13);
  if (v17 == MEMORY[0x1E0DEA968])
    return specialized static StringProtocol.== infix<A>(_:_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), a2, a3);
  if (a4 == MEMORY[0x1E0DEBAF0])
    return specialized static StringProtocol.== infix<A>(_:_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2, a3);
  v18 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v14 + 16);
  v18((char *)v26 - v15, a1, a4, v16);
  if (swift_dynamicCast())
  {
    v20 = v26[0];
    v19 = v26[1];
  }
  else
  {
    ((void (*)(char *, uint64_t, uint64_t))v18)(v12, a1, a4);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v20 = v26[2];
      v19 = v26[3];
    }
    else
    {
      ((void (*)(char *, uint64_t, uint64_t))v18)(v9, a1, a4);
      v20 = String.init<A>(_:)();
      v19 = v22;
    }
  }
  dispatch thunk of Collection.startIndex.getter();
  v23 = v26[0];
  dispatch thunk of Collection.endIndex.getter();
  if ((a3 & 0x2000000000000000) != 0)
    v24 = HIBYTE(a3) & 0xF;
  else
    v24 = a2 & 0xFFFFFFFFFFFFLL;
  if (v20 == a2 && v19 == a3 && !(v23 >> 16) && v26[0] >> 16 == v24)
  {
    swift_bridgeObjectRelease();
    v25 = 1;
  }
  else
  {
    v25 = _stringCompareInternal(_:_:_:_:expecting:)();
    swift_bridgeObjectRelease();
  }
  return v25 & 1;
}

uint64_t specialized static StringProtocol.== infix<A>(_:_:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  if ((a2 & 0x2000000000000000) != 0)
    v5 = HIBYTE(a2) & 0xF;
  else
    v5 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a4 & 0x2000000000000000) != 0)
    v6 = HIBYTE(a4) & 0xF;
  else
    v6 = a3 & 0xFFFFFFFFFFFFLL;
  if (a1 == a3 && a2 == a4 && v5 == v6)
    return 1;
  else
    return _stringCompareInternal(_:_:_:_:expecting:)() & 1;
}

float _NSXPCSerializationFloatForObject(_QWORD *a1, unint64_t *a2)
{
  unint64_t v2;
  int FloatAtMarker;
  float result;
  float v5;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  if (!*a2)
    return 0.0;
  v5 = 0.0;
  FloatAtMarker = _getFloatAtMarker(a1, &v5, v2, v6);
  result = v5;
  if (!FloatAtMarker)
    return 0.0;
  return result;
}

uint64_t _getFloatAtMarker(_QWORD *a1, _DWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1[1] <= a3 || *(_BYTE *)(*a1 + a3) != 34)
    return 0;
  v4 = 0;
  v5 = a3 >= 0xFFFFFFFFFFFFFFFCLL;
  v6 = v5 << 63 >> 63;
  *a4 = a3 + 4;
  if (v6 == v5 && (v6 & 0x8000000000000000) == 0)
  {
    if (a1[1] > a3 + 4)
    {
      *a2 = *(_DWORD *)(a3 + *a1 + 1);
      return 1;
    }
    return 0;
  }
  return v4;
}

uint64_t Data.InlineData.init(_:)(_BYTE *a1, _BYTE *a2)
{
  return specialized Data.InlineData.init(_:)(a1, a2);
}

void NSKVODeallocate(void *a1, const char *a2)
{
  objc_class *Class;
  _BOOL4 v5;
  Class *IndexedIvars;
  Method InstanceMethod;
  Method v8;
  int v9;
  unsigned int program_sdk_version;
  BOOL v11;
  char v12;
  char v13;
  int v14;
  char v15;
  uint64_t v16;
  NSString *v17;
  Boolean keyExistsAndHasValidFormat;
  _QWORD v19[6];
  uint64_t v20;
  id v21;
  uint64_t v22;
  _QWORD v23[7];

  v23[6] = *MEMORY[0x1E0C80C00];
  Class = object_getClass(a1);
  v5 = _NSKVOUsesBaseClassObservationInfoImplementationForClass(Class);
  IndexedIvars = (Class *)object_getIndexedIvars(Class);
  InstanceMethod = class_getInstanceMethod(*IndexedIvars, a2);
  v8 = InstanceMethod;
  if (v5)
  {
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3221225472;
    v23[2] = __NSKVODeallocate_block_invoke;
    v23[3] = &unk_1E0F4EE20;
    v23[4] = a1;
    v23[5] = InstanceMethod;
    _NSKVOPerformWithDeallocatingObservable(a1, (uint64_t)v23);
  }
  else
  {
    v20 = (uint64_t)a1;
    v21 = _NSKeyValueRetainedObservationInfoForObject(a1, 0);
    v22 = 0;
    _NSKeyValueAddObservationInfoWatcher((uint64_t)&v20);
    v9 = objc_msgSend(objc_getAssociatedObject(a1, &_NSKeyValueObservingObservationInfoOverriderMayThrowOnDealloc), "isEqual:", MEMORY[0x1E0C9AAB0]);
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 3221225472;
    v19[2] = __NSKVODeallocate_block_invoke_2;
    v19[3] = &unk_1E0F4EE20;
    v19[4] = a1;
    v19[5] = v8;
    _NSKVOPerformWithDeallocatingObservable(a1, (uint64_t)v19);
    if (v21)
    {
      program_sdk_version = dyld_get_program_sdk_version();
      if (v9)
        v9 = objc_msgSend(v21, "containsOnlyInternalObservationHelpers") ^ 1;
      keyExistsAndHasValidFormat = 0;
      if (CFPreferencesGetAppBooleanValue(CFSTR("NSKVODeallocateCleansUpBeforeThrowing"), (CFStringRef)*MEMORY[0x1E0C9B248], &keyExistsAndHasValidFormat))
      {
        v11 = keyExistsAndHasValidFormat == 0;
      }
      else
      {
        v11 = 1;
      }
      v12 = v11;
      if (program_sdk_version < 0x80000)
        v13 = v12;
      else
        v13 = 0;
      if ((v13 & 1) == 0 && ((v9 ^ 1) & 1) == 0)
      {
        v15 = v12;
        v16 = objc_msgSend(v21, "description");
        if ((v15 & 1) == 0)
          _NSKeyValueRemoveObservationInfoForObject(v20);
        v17 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("An instance %p of class %@ was deallocated while key value observers were still registered with it. Current observation info: %@"), a1, *IndexedIvars, v16);
        objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v17, 0));
      }
      if (program_sdk_version < 0x80000)
        v14 = 1;
      else
        v14 = v9;
      if (v14 == 1)
      {
        NSLog((NSString *)CFSTR("An instance %p of class %@ was deallocated while key value observers were still registered with it. Observation info was leaked, and may even become mistakenly attached to some other object. Set a breakpoint on NSKVODeallocateBreak to stop here in the debugger. Here's the current observation info:\n%@"), a1, *IndexedIvars, v21);
        NSKVODeallocateBreak((uint64_t)a1);
      }
    }
    _NSKeyValueRemoveObservationInfoWatcher((uint64_t)&v20);

  }
}

void sub_1818B2964(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x1818B28B4);
  }
  _Unwind_Resume(exception_object);
}

void _NSKVOPerformWithDeallocatingObservable(const void *a1, uint64_t a2)
{
  uint64_t v4;
  malloc_zone_t *v5;
  __CFArray *v6;
  __CFArray *Mutable;

  v4 = _CFGetTSD();
  if (!v4)
  {
    v5 = malloc_default_zone();
    v4 = (uint64_t)malloc_type_zone_calloc(v5, 1uLL, 0x58uLL, 0xC2E5A2B2uLL);
    _CFSetTSD();
  }
  v6 = *(__CFArray **)(v4 + 80);
  Mutable = v6;
  if (!v6)
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE30], 1, 0);
    *(_QWORD *)(v4 + 80) = Mutable;
  }
  CFArrayInsertValueAtIndex(Mutable, 0, a1);
  (*(void (**)(uint64_t))(a2 + 16))(a2);
  CFArrayRemoveValueAtIndex(Mutable, 0);
  if (!v6)
  {
    if (CFArrayGetCount(Mutable))
      __assert_rtn("_NSKVOPerformWithDeallocatingObservable", "NSKeyValueObserving.m", 2832, "CFArrayGetCount(stack) == 0");
    CFRelease(Mutable);
    *(_QWORD *)(v4 + 80) = 0;
  }
}

void sub_1818B2AD0(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void _NSKeyValueRemoveObservationInfoWatcher(uint64_t a1)
{
  uint64_t v2;
  malloc_zone_t *v3;
  uint64_t v4;

  v2 = _CFGetTSD();
  if (!v2)
  {
    v3 = malloc_default_zone();
    v2 = (uint64_t)malloc_type_zone_calloc(v3, 1uLL, 0x58uLL, 0xC2E5A2B2uLL);
    _CFSetTSD();
  }
  v4 = *(_QWORD *)(v2 + 8);
  if (v4 != a1)
    NSLog((NSString *)CFSTR("_NSKeyValueRemoveObservationInfoWatcher() was called in a surprising way."));
  if (v4)
    *(_QWORD *)(v2 + 8) = *(_QWORD *)(v4 + 16);
}

uint64_t _NSKeyValueAddObservationInfoWatcher(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  malloc_zone_t *v4;

  result = _CFGetTSD();
  v3 = (_QWORD *)result;
  if (!result)
  {
    v4 = malloc_default_zone();
    v3 = malloc_type_zone_calloc(v4, 1uLL, 0x58uLL, 0xC2E5A2B2uLL);
    result = _CFSetTSD();
  }
  *(_QWORD *)(a1 + 16) = v3[1];
  v3[1] = a1;
  return result;
}

void URLComponents.path.modify(uint64_t a1, char a2)
{
  void *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = *(void **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 160);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 168);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    URLComponents._URLComponents.path.setter(v3, v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    URLComponents._URLComponents.path.setter(*(_QWORD *)(*(_QWORD *)a1 + 160), v4);
  }
  free(v2);
}

uint64_t Locale.Language.languageCode.getter@<X0>(uint64_t *a1@<X8>)
{
  __int128 *v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v11;
  Swift::String v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v3 = v1[1];
  v14 = *v1;
  v15 = v3;
  v4 = v1[3];
  v16 = v1[2];
  v17 = v4;
  v5 = v1[5];
  v18 = v1[4];
  v19 = v5;
  v6 = v14;
  v8 = *((_QWORD *)&v14 + 1);
  v7 = v14;
  object = (void *)*((_QWORD *)&v15 + 1);
  countAndFlagsBits = v15;
  if (!*((_QWORD *)&v14 + 1))
  {
    outlined retain of Locale.Language((uint64_t *)&v14, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
    v7 = specialized _withFixedCharBuffer(size:_:)(257, (uint64_t *)&v14);
    v8 = v11;
    outlined retain of Locale.Language((uint64_t *)&v14, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
    if (v8)
    {
      v12 = String.lowercased()();
      object = v12._object;
      countAndFlagsBits = v12._countAndFlagsBits;
    }
    else
    {
      v7 = 0;
      countAndFlagsBits = 0;
      object = 0;
    }
  }
  *a1 = v7;
  a1[1] = v8;
  a1[2] = countAndFlagsBits;
  a1[3] = (uint64_t)object;
  return outlined copy of Locale.LanguageCode?(v6, *((uint64_t *)&v6 + 1));
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CFStringRef(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for CFStringRef, a1);
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance UInt64(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Int64(a1, a2, a3, a4, (SEL *)&selRef_unsignedLongLongValue, (SEL *)&selRef_initWithUnsignedLongLong_);
}

uint64_t XMLPlistMap.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 24);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 40));
  result = *(_QWORD *)(v1 + 32);
  if (!result)
    goto LABEL_4;
  if (result == *(_QWORD *)(v1 + 16))
  {
    MEMORY[0x186DA9E78]();
LABEL_4:
    os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 40));
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_deallocClassInstance();
  }
  __break(1u);
  return result;
}

uint64_t AttributedString.Guts.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t dispatch thunk of JSONDecoder.userInfo.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t type metadata completion function for LockedState._Buffer()
{
  return swift_initClassMetadata2();
}

BOOL specialized static Double._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  _BOOL8 result;

  objc_msgSend(a1, sel_doubleValue);
  if ((~v4 & 0x7FF0000000000000) != 0 || (v4 & 0xFFFFFFFFFFFFFLL) == 0)
  {
    v6 = specialized Double.init(exactly:)(a1);
    v9 = v7 & 1;
    result = (v7 & 1) == 0;
    v8 = v6;
  }
  else
  {
    objc_msgSend(a1, sel_doubleValue);
    v9 = 0;
    result = 1;
  }
  *(_QWORD *)a2 = v8;
  *(_BYTE *)(a2 + 8) = v9 & 1;
  return result;
}

uint64_t specialized static CGFloat._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  uint64_t v4;
  char v6;
  uint64_t v8;
  uint64_t v9;

  objc_msgSend(a1, sel_doubleValue);
  if ((~v4 & 0x7FF0000000000000) != 0 || (v4 & 0xFFFFFFFFFFFFFLL) == 0)
  {
    v9 = specialized Double.init(exactly:)(a1);
    if ((v6 & 1) != 0)
      return 0;
  }
  else
  {
    objc_msgSend(a1, sel_doubleValue);
    v9 = v8;
  }
  *(_QWORD *)a2 = v9;
  *(_BYTE *)(a2 + 8) = 0;
  return 1;
}

uint64_t specialized Double.init(exactly:)(void *a1)
{
  id v1;
  int v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;

  v1 = objc_retainAutorelease(a1);
  v2 = *(unsigned __int8 *)objc_msgSend(v1, sel_objCType);
  if (v2 != 113)
  {
    if (v2 != 81)
    {
      objc_msgSend(v1, sel_doubleValue);
      return v6;
    }
    v3 = specialized Double.init<A>(exactly:)(objc_msgSend(v1, sel_unsignedLongLongValue));
    if ((v4 & 1) != 0)
      return 0;
    return v3;
  }
  v3 = specialized Double.init<A>(exactly:)((uint64_t)objc_msgSend(v1, sel_longLongValue));
  if ((v5 & 1) == 0)
    return v3;
  return 0;
}

uint64_t specialized Double.init<A>(exactly:)(uint64_t result)
{
  double v1;

  v1 = (double)result;
  if ((double)result >= 9.22337204e18)
  {
    *(double *)&result = 0.0;
    return result;
  }
  if ((~*(_QWORD *)&v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v1 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  if ((uint64_t)v1 == result)
    *(double *)&result = (double)result;
  else
    *(double *)&result = 0.0;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CFStringRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for CFStringRef, a3);
  return static _CFObject.== infix(_:_:)();
}

ValueMetadata *type metadata accessor for Data.Iterator()
{
  return &type metadata for Data.Iterator;
}

double protocol witness for Strideable.advanced(by:) in conformance Date@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double *v2;
  double result;

  result = *a1 + *v2;
  *a2 = result;
  return result;
}

NSNumber __swiftcall CGFloat._bridgeToObjectiveC()()
{
  double v0;

  return (NSNumber)objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithDouble_, v0);
}

uint64_t storeEnumTagSinglePayload for URLQueryItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void URL.appendingPathComponent(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  __int128 v11;
  Swift::String v12;
  Swift::Bool v13;
  id v14;
  uint64_t v15;
  Swift::String v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  unsigned __int8 v20;
  void *v21;
  id v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  id v35;
  void *v36;
  uint64_t v37;
  id v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  unsigned __int8 v48;
  char v49;
  char v50;
  char v51;
  char v52;
  unint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  Swift::String v57;
  id v58;
  Swift::String v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  char v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  void *v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char v84;
  _BYTE v85[72];
  char v86;
  uint64_t v87;
  unint64_t v88;
  __int128 v89;
  __int128 v90;
  char v91;
  char v92;
  _BYTE v93[160];
  _BYTE v94[160];
  uint64_t v95[20];
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  _OWORD v104[2];
  _BYTE v105[96];
  __int128 v106;
  _BYTE v107[42];
  _BYTE v108[32];

  v8 = *(void **)v3;
  v7 = *(_QWORD *)(v3 + 8);
  v9 = *(_QWORD *)(v3 + 16);
  if (_foundation_swift_url_feature_enabled())
  {
    if (_foundation_swift_url_feature_enabled())
    {
      specialized URL.appending<A>(path:directoryHint:encodingSlashes:)(a1, a2, 2, 0, (uint64_t)v8, v7);
      return;
    }
    v12._countAndFlagsBits = 47;
    v12._object = (void *)0xE100000000000000;
    v13 = String.hasSuffix(_:)(v12);
    swift_retain();
    v14 = v8;
    swift_retain();
    if ((_foundation_swift_url_feature_enabled() & 1) != 0)
    {
      *(_QWORD *)v105 = v14;
      *(_QWORD *)&v105[8] = v7;
      *(_QWORD *)&v105[16] = v9;
      URL.scheme.getter();
      if (v15)
      {
        v16 = String.lowercased()();
        swift_bridgeObjectRelease();
        if (v16._countAndFlagsBits == 1701603686 && v16._object == (void *)0xE400000000000000)
        {
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
          goto LABEL_21;
        }
        v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        if ((v28 & 1) != 0)
        {
LABEL_21:
          *(_QWORD *)v105 = a1;
          *(_QWORD *)&v105[8] = a2;
          swift_bridgeObjectRetain();
          String.init<A>(_:)();
          v29 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v10 = objc_msgSend(v14, sel_URLByAppendingPathComponent_, v29);
          swift_unknownObjectRelease();
          if (!v10)
          {
            v30 = v14;
            LODWORD(v31) = 2;
LABEL_25:
            *(_QWORD *)v105 = v30;
            *(_QWORD *)&v105[8] = v7;
            *(_QWORD *)&v105[16] = v9;
            v33 = URL.absoluteString.getter();
            specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(v33, v34, 1, (uint64_t)v95);
            outlined init with take of LocalePreferences?((uint64_t)v95, (uint64_t)v94, &demangling cache variable for type metadata for URLComponents._URLComponents?);
            outlined init with take of LocalePreferences?((uint64_t)v95, (uint64_t)&v96, &demangling cache variable for type metadata for URLComponents._URLComponents?);
            if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)&v96) == 1)
            {
              *a3 = v30;
              a3[1] = v7;
              a3[2] = v9;
              v35 = v30;
              swift_retain();
              goto LABEL_27;
            }
            v78 = v30;
            v106 = v102;
            *(_OWORD *)v107 = v103;
            *(_OWORD *)&v107[16] = v104[0];
            *(_OWORD *)&v107[26] = *(_OWORD *)((char *)v104 + 10);
            *(_OWORD *)&v105[32] = v98;
            *(_OWORD *)&v105[48] = v99;
            *(_OWORD *)&v105[64] = v100;
            *(_OWORD *)&v105[80] = v101;
            *(_OWORD *)v105 = v96;
            *(_OWORD *)&v105[16] = v97;
            outlined init with take of LocalePreferences?((uint64_t)v94, (uint64_t)v93, &demangling cache variable for type metadata for URLComponents._URLComponents?);
            outlined retain of URLComponents((uint64_t)v93);
            URLComponents._URLComponents.path.getter();
            outlined release of URLComponents?(v95);
            v36 = (void *)String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            v82 = a1;
            v83 = a2;
            swift_bridgeObjectRetain();
            String.init<A>(_:)();
            v37 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            v38 = objc_msgSend(v36, sel_stringByAppendingPathComponent_, v37);
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            v39 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
            v41 = v40;

            if ((v41 & 0x2000000000000000) != 0)
              v42 = HIBYTE(v41) & 0xF;
            else
              v42 = v39 & 0xFFFFFFFFFFFFLL;
            outlined init with take of LocalePreferences?((uint64_t)&v106 + 8, (uint64_t)v108, &demangling cache variable for type metadata for String?);
            if (v42)
            {
              swift_bridgeObjectRetain();
              v42 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v39, v41);
              v44 = v43;
              swift_bridgeObjectRelease();
            }
            else
            {
              v44 = 0xE000000000000000;
            }
            outlined release of String((uint64_t)v108);
            if (!(_DWORD)v31
              || (_DWORD)v31 == 2
              || (v57._countAndFlagsBits = 47, v57._object = (void *)0xE100000000000000, String.hasSuffix(_:)(v57)))
            {
              swift_bridgeObjectRelease();
            }
            else
            {
              v82 = v39;
              v83 = v41;
              swift_bridgeObjectRetain();
              v59._countAndFlagsBits = 47;
              v59._object = (void *)0xE100000000000000;
              String.append(_:)(v59);
              swift_bridgeObjectRelease();
              v60 = HIBYTE(v41) & 0xF;
              if ((v41 & 0x2000000000000000) == 0)
                v60 = v82 & 0xFFFFFFFFFFFFLL;
              if (v60)
              {
                v42 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v82, v83);
                v62 = v61;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v44 = v62;
              }
              else
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v42 = 0;
                v44 = 0xE000000000000000;
              }
            }
            v82 = *(_QWORD *)v105;
            LOBYTE(v83) = 0;
            *(_DWORD *)((char *)&v83 + 1) = *(_DWORD *)&v105[9];
            *(_WORD *)((char *)&v83 + 5) = v105[13];
            HIBYTE(v83) = v105[15];
            v84 = v105[16];
            *(_OWORD *)v85 = *(_OWORD *)&v105[24];
            *(_OWORD *)&v85[16] = *(_OWORD *)&v105[40];
            *(_OWORD *)&v85[32] = *(_OWORD *)&v105[56];
            *(_OWORD *)&v85[48] = *(_OWORD *)&v105[72];
            *(_QWORD *)&v85[64] = *(_QWORD *)&v105[88];
            v86 = v106;
            v87 = v42;
            v88 = v44;
            v89 = *(_OWORD *)&v107[8];
            v90 = *(_OWORD *)&v107[24];
            v91 = v107[40];
            v92 = v107[41];
            URLComponents.url.getter((uint64_t *)&v79);
            outlined release of URLComponents((uint64_t)&v82);
            v58 = v79;
            if (v79)
            {
              v7 = v80;
              v9 = v81;
            }
            else
            {
              v58 = v78;
              swift_retain();
              swift_retain();
            }
            *a3 = v58;
            a3[1] = v7;
            a3[2] = v9;
            return;
          }
          goto LABEL_5;
        }
      }
      else
      {
        swift_release();
        swift_release();

      }
    }
    else
    {
      v20 = objc_msgSend(v14, sel_isFileURL);
      swift_release();
      swift_release();

      if ((v20 & 1) != 0)
        goto LABEL_21;
    }
    v31 = v13;
    *(_QWORD *)v105 = a1;
    *(_QWORD *)&v105[8] = a2;
    swift_bridgeObjectRetain();
    String.init<A>(_:)();
    v32 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v10 = objc_msgSend(v14, sel_URLByAppendingPathComponent_isDirectory_, v32, v31);
    swift_unknownObjectRelease();
    if (!v10)
    {
      v30 = v14;
      goto LABEL_25;
    }
LABEL_5:
    URL.init(reference:)(v10, v105);

    v11 = *(_OWORD *)&v105[8];
    *a3 = *(_QWORD *)v105;
    *(_OWORD *)(a3 + 1) = v11;
    return;
  }
  v10 = objc_msgSend(v8, sel_URLByAppendingPathComponent_, String._bridgeToObjectiveCImpl()());
  swift_unknownObjectRelease();
  if (v10)
    goto LABEL_5;
  *(_QWORD *)v105 = v8;
  *(_QWORD *)&v105[8] = v7;
  *(_QWORD *)&v105[16] = v9;
  v17 = URL.absoluteString.getter();
  specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(v17, v18, 1, (uint64_t)v95);
  outlined init with take of LocalePreferences?((uint64_t)v95, (uint64_t)v94, &demangling cache variable for type metadata for URLComponents._URLComponents?);
  outlined init with take of LocalePreferences?((uint64_t)v95, (uint64_t)&v96, &demangling cache variable for type metadata for URLComponents._URLComponents?);
  if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)&v96) == 1)
  {
    *a3 = v8;
    a3[1] = v7;
    a3[2] = v9;
    swift_retain();
    v19 = v8;
LABEL_27:
    swift_retain();
    return;
  }
  v106 = v102;
  *(_OWORD *)v107 = v103;
  *(_OWORD *)&v107[16] = v104[0];
  *(_OWORD *)&v107[26] = *(_OWORD *)((char *)v104 + 10);
  *(_OWORD *)&v105[32] = v98;
  *(_OWORD *)&v105[48] = v99;
  *(_OWORD *)&v105[64] = v100;
  *(_OWORD *)&v105[80] = v101;
  *(_OWORD *)v105 = v96;
  *(_OWORD *)&v105[16] = v97;
  outlined init with take of LocalePreferences?((uint64_t)v94, (uint64_t)v93, &demangling cache variable for type metadata for URLComponents._URLComponents?);
  outlined retain of URLComponents((uint64_t)v93);
  URLComponents._URLComponents.path.getter();
  outlined release of URLComponents?(v95);
  v21 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v22 = objc_msgSend(v21, sel_stringByAppendingPathComponent_, String._bridgeToObjectiveCImpl()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v23 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  v25 = v24;

  v26 = HIBYTE(v25) & 0xF;
  if ((v25 & 0x2000000000000000) == 0)
    v26 = v23 & 0xFFFFFFFFFFFFLL;
  v76 = a3;
  v63 = v9;
  if (v26)
  {
    v77 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v23, v25);
    v75 = v27;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v77 = 0;
    v75 = 0xE000000000000000;
  }
  v73 = v107[40];
  v74 = v107[41];
  v71 = *(_QWORD *)&v107[32];
  v72 = *(_QWORD *)&v107[24];
  v69 = *(_QWORD *)&v107[16];
  v70 = *(_QWORD *)&v107[8];
  v68 = v106;
  v67 = *(_OWORD *)&v105[80];
  v66 = *(_OWORD *)&v105[64];
  v65 = *(_OWORD *)&v105[48];
  v45 = *(_QWORD *)&v105[24];
  v64 = *(_OWORD *)&v105[32];
  v46 = v105[16];
  v47 = v105[15];
  v48 = v105[13];
  v49 = v105[12];
  v50 = v105[11];
  v51 = v105[10];
  v52 = v105[9];
  v53 = *(_QWORD *)v105;
  outlined init with take of LocalePreferences?((uint64_t)&v106 + 8, (uint64_t)v108, &demangling cache variable for type metadata for String?);
  outlined release of String((uint64_t)v108);
  v82 = v53;
  LOBYTE(v83) = 0;
  BYTE1(v83) = v52;
  BYTE2(v83) = v51;
  BYTE3(v83) = v50;
  BYTE4(v83) = v49;
  *(_WORD *)((char *)&v83 + 5) = v48;
  HIBYTE(v83) = v47;
  v84 = v46;
  *(_QWORD *)v85 = v45;
  *(_OWORD *)&v85[8] = v64;
  *(_OWORD *)&v85[24] = v65;
  *(_OWORD *)&v85[40] = v66;
  *(_OWORD *)&v85[56] = v67;
  v86 = v68;
  v87 = v77;
  v88 = v75;
  *(_QWORD *)&v89 = v70;
  *((_QWORD *)&v89 + 1) = v69;
  *(_QWORD *)&v90 = v72;
  *((_QWORD *)&v90 + 1) = v71;
  v91 = v73;
  v92 = v74;
  URLComponents.url.getter((uint64_t *)&v79);
  outlined release of URLComponents((uint64_t)&v82);
  v54 = v79;
  if (v79)
  {
    v55 = v80;
    v56 = v81;
  }
  else
  {
    v56 = v63;
    swift_retain();
    v54 = v8;
    v55 = swift_retain();
  }
  *v76 = v54;
  v76[1] = v55;
  v76[2] = v56;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance UUID(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  UUID.uuidString.getter();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

id @objc NSDictionary.subscript.getter(void *a1)
{
  id v2;
  id v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  void *v10;
  _OWORD v12[2];
  _QWORD v13[4];
  _QWORD v14[3];
  uint64_t v15;

  swift_unknownObjectRetain();
  v2 = a1;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  __swift_project_boxed_opaque_existential_1(v13, v13[3]);
  v3 = objc_msgSend(v2, sel_objectForKey_, _bridgeAnythingToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();
  if (v3)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v12, 0, sizeof(v12));
  }
  outlined init with take of Any?((uint64_t)v12, (uint64_t)v14);

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  v4 = v15;
  if (!v15)
    return 0;
  v5 = __swift_project_boxed_opaque_existential_1(v14, v15);
  v6 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v6 + 16))(v9, v7);
  v10 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  return v10;
}

void @objc NSMutableDictionary.subscript.setter(void *a1, uint64_t a2, uint64_t a3)
{
  id v3;
  id v4;
  _QWORD v6[4];
  _OWORD v7[2];

  if (a3)
  {
    swift_unknownObjectRetain();
    v3 = a1;
    swift_unknownObjectRetain();
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v7, 0, sizeof(v7));
    swift_unknownObjectRetain();
    v4 = a1;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  NSMutableDictionary.subscript.setter((uint64_t)v7, v6);

}

id _NSGetBoolValueWithMethod(uint64_t a1, uint64_t a2, objc_method *a3)
{
  id v5;
  IMP Implementation;
  SEL Name;

  v5 = objc_allocWithZone((Class)NSNumber);
  Implementation = method_getImplementation(a3);
  Name = method_getName(a3);
  return (id)objc_msgSend(v5, "initWithBool:", ((uint64_t (*)(uint64_t, SEL))Implementation)(a1, Name));
}

void URL.appendingPathExtension(_:)(unint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  Swift::String v13;
  Swift::Int countAndFlagsBits;
  unint64_t object;
  id v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v26;
  Swift::String v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  Swift::String v36;
  Swift::String v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  Swift::String v55;
  id v56;
  void *v57;
  unint64_t v58;
  void *v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  id v63;
  __int128 v64;
  id v65;
  uint64_t v66;
  _QWORD v67[2];
  id v68;
  unint64_t v69;
  void *v70;
  uint64_t *v71;
  _QWORD v72[3];
  uint64_t v73[3];
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  _OWORD v82[2];
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  __int128 v86;
  _BYTE v87[72];
  uint64_t v88;
  __int128 v89;
  _BYTE v90[42];
  _OWORD v91[8];
  _OWORD v92[2];
  char v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  char v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int16 v105;

  v8 = *(void **)v3;
  v7 = *(_QWORD *)(v3 + 8);
  v9 = *(_QWORD *)(v3 + 16);
  if (!_foundation_swift_url_feature_enabled())
  {
    swift_retain();
    v11 = v8;
    swift_retain();
    v70 = a2;
    if (!_foundation_swift_url_feature_enabled())
    {
      v16 = objc_msgSend(v11, sel__parameterString);
      if (v16)
      {
        v17 = v16;
        v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
        v20 = v19;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (v21 = objc_msgSend(v11, sel_path)) != 0)
        {
          v22 = v21;
          v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
          v25 = v24;

          v94 = (uint64_t)v23;
          *(_QWORD *)&v95 = v25;
          swift_bridgeObjectRetain();
          v26._countAndFlagsBits = 59;
          v26._object = (void *)0xE100000000000000;
          String.append(_:)(v26);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v27._countAndFlagsBits = (uint64_t)v18;
          v27._object = v20;
          String.append(_:)(v27);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
        }
        else
        {
          v94 = 59;
          *(_QWORD *)&v95 = 0xE100000000000000;
          v55._countAndFlagsBits = (uint64_t)v18;
          v55._object = v20;
          String.append(_:)(v55);
          swift_release();
          swift_release();

        }
        swift_bridgeObjectRelease();
        v47 = v94;
        v49 = v95;
      }
      else
      {
        v56 = objc_msgSend(v11, sel_path);
        if (v56)
        {
          v57 = v56;
          v47 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
          v49 = v58;
          swift_release();
          swift_release();

        }
        else
        {
          swift_release();
          swift_release();

          v47 = 0;
          v49 = 0xE000000000000000;
        }
      }
      goto LABEL_50;
    }
    v69 = a1;
    v71 = a3;
    v94 = (uint64_t)v11;
    *(_QWORD *)&v95 = v7;
    *((_QWORD *)&v95 + 1) = v9;
    v12 = v11;
    swift_retain();
    swift_retain();
    v13 = URL.path(percentEncoded:)(1);
    countAndFlagsBits = v13._countAndFlagsBits;
    v91[0] = v13;
    swift_bridgeObjectRetain();
    v68 = v12;
    if (String.count.getter() <= 1)
    {
      object = (unint64_t)v13._object;
    }
    else
    {
      object = (unint64_t)v13._object;
      if ((specialized BidirectionalCollection.last.getter(v13._countAndFlagsBits, (unint64_t)v13._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        object = *((_QWORD *)&v91[0] + 1);
        countAndFlagsBits = *(_QWORD *)&v91[0];
      }
    }
    v94 = Set.init(minimumCapacity:)();
    specialized Set._Variant.insert(_:)(&v86, 0x2FuLL);
    v43 = v94;
    v44 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if ((object & 0x2000000000000000) != 0)
      v45 = HIBYTE(object) & 0xF;
    else
      v45 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (v45)
    {
      v67[1] = v67;
      swift_bridgeObjectRetain();
      if ((object & 0x1000000000000000) != 0)
      {
        v47 = 0;
        v49 = 1;
      }
      else if ((object & 0x2000000000000000) != 0)
      {
        v94 = countAndFlagsBits;
        *(_QWORD *)&v95 = object & 0xFFFFFFFFFFFFFFLL;
        v47 = specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)((uint64_t)&v94, HIBYTE(object) & 0xF, v43, (uint64_t (*)(_QWORD))specialized StringProtocol.hexToAscii(_:));
        v49 = v60;
      }
      else
      {
        if ((countAndFlagsBits & 0x1000000000000000) != 0)
        {
          v46 = (object & 0xFFFFFFFFFFFFFFFLL) + 32;
        }
        else
        {
          v46 = _StringObject.sharedUTF8.getter();
          v44 = v66;
        }
        v47 = specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)(v46, v44, v43, (uint64_t (*)(_QWORD))specialized StringProtocol.hexToAscii(_:));
        v49 = v48;
      }
      v59 = v68;
      if (v49 == 1)
      {
        swift_bridgeObjectRetain();
        v47 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(countAndFlagsBits, object, v43);
        v49 = v61;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        if (v49)
          goto LABEL_46;
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v49)
          goto LABEL_46;
      }
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v47 = 0;
      v49 = 0xE000000000000000;
      goto LABEL_49;
    }
    swift_bridgeObjectRelease();
    v47 = 0;
    v49 = 0xE000000000000000;
    v59 = v68;
LABEL_46:
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_49:
    swift_release();
    swift_release();

    a3 = v71;
LABEL_50:
    swift_bridgeObjectRelease();
    v62 = HIBYTE(v49) & 0xF;
    if ((v49 & 0x2000000000000000) == 0)
      v62 = v47 & 0xFFFFFFFFFFFFLL;
    if (v62
      && (v63 = objc_msgSend(v11, sel_URLByAppendingPathExtension_, String._bridgeToObjectiveCImpl()()),
          swift_unknownObjectRelease(),
          v63))
    {
      URL.init(reference:)(v63, &v94);

      v64 = v95;
      *a3 = v94;
      *(_OWORD *)(a3 + 1) = v64;
    }
    else
    {
      *a3 = (uint64_t)v11;
      a3[1] = v7;
      a3[2] = v9;
      v65 = v11;
      swift_retain();
      swift_retain();
    }
    return;
  }
  if (v7)
  {
    if ((*(_BYTE *)(v7 + 168) & 1) != 0)
      v10 = MEMORY[0x186DA5030](0, 0xE000000000000000);
    else
      v10 = String.subscript.getter();
    v28 = MEMORY[0x186DA4634](v10);
    v30 = v29;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v31 = HIBYTE(v30) & 0xF;
    if ((v30 & 0x2000000000000000) == 0)
      v31 = v28 & 0xFFFFFFFFFFFFLL;
    if (!v31)
    {
      *a3 = (uint64_t)v8;
      a3[1] = v7;
      a3[2] = v9;
      swift_retain();
      v42 = v8;
      swift_retain();
      return;
    }
    v69 = v9;
    v71 = a3;
    v32 = *(_BYTE *)(v7 + 218);
    v93 = 1;
    v94 = v7;
    *(_QWORD *)&v95 = 0x101010101010101;
    BYTE8(v95) = 1;
    v96 = 0u;
    v97 = 0u;
    v98 = 0u;
    v99 = 0u;
    v100 = 0;
    v101 = 1;
    v102 = 0u;
    v103 = 0u;
    v104 = 0u;
    v105 = v32;
    swift_retain();
    v33 = (unint64_t)URLComponents._URLComponents.path.getter();
    v35 = v34;
    if ((specialized String.validatePathExtension(_:)(a1, (unint64_t)a2) & 1) != 0)
    {
      *(_QWORD *)&v91[0] = 46;
      *((_QWORD *)&v91[0] + 1) = 0xE100000000000000;
      v36._countAndFlagsBits = a1;
      v36._object = a2;
      String.append(_:)(v36);
      v37 = (Swift::String)v91[0];
      *(_QWORD *)&v91[0] = v33;
      *((_QWORD *)&v91[0] + 1) = v35;
      swift_bridgeObjectRetain();
      String.append(_:)(v37);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    v38 = HIBYTE(v35) & 0xF;
    if ((v35 & 0x2000000000000000) == 0)
      v38 = v33 & 0xFFFFFFFFFFFFLL;
    if (v38)
    {
      v39 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v33, v35);
      v41 = v40;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v39 = 0;
      v41 = 0xE000000000000000;
    }
    *(_QWORD *)&v86 = v7;
    BYTE8(v86) = 0;
    *(_DWORD *)((char *)&v86 + 9) = 16843009;
    BYTE13(v86) = 1;
    HIWORD(v86) = 256;
    v87[0] = 1;
    memset(&v87[8], 0, 64);
    v88 = 0;
    LOBYTE(v89) = 1;
    *((_QWORD *)&v89 + 1) = v39;
    *(_QWORD *)v90 = v41;
    memset(&v90[8], 0, 32);
    v90[40] = v32;
    v90[41] = 0;
    v91[6] = v89;
    v91[7] = *(_OWORD *)v90;
    v92[0] = *(_OWORD *)&v90[16];
    v91[2] = *(_OWORD *)&v87[16];
    v91[3] = *(_OWORD *)&v87[32];
    v91[4] = *(_OWORD *)&v87[48];
    v91[5] = 0uLL;
    v91[0] = v86;
    v91[1] = *(_OWORD *)v87;
    *(_OWORD *)((char *)v92 + 10) = *(_OWORD *)&v90[26];
    v80 = v89;
    v81 = *(_OWORD *)v90;
    v82[0] = *(_OWORD *)&v90[16];
    *(_OWORD *)((char *)v82 + 10) = *(_OWORD *)&v90[26];
    v76 = *(_OWORD *)&v87[16];
    v77 = *(_OWORD *)&v87[32];
    v78 = *(_OWORD *)&v87[48];
    v79 = 0uLL;
    v74 = v86;
    v75 = *(_OWORD *)v87;
    v83 = (uint64_t)v8;
    v84 = v7;
    v85 = v69;
    outlined retain of URLComponents((uint64_t)v91);
    URL.baseURL.getter(v73);
    v50 = (void *)v73[0];
    v72[0] = v73[0];
    v72[1] = v73[1];
    v72[2] = v73[2];
    URLComponents.url(relativeTo:)((uint64_t)v72, &v83);
    outlined consume of URL?(v50);
    outlined release of URLComponents((uint64_t)&v86);
    v51 = v83;
    if (v83)
    {
      v53 = v84;
      v52 = v85;
      outlined release of URLComponents((uint64_t)&v86);
      v54 = v71;
      *v71 = v51;
      v54[1] = v53;
      v54[2] = v52;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t URL.path.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;
  Swift::String v5;
  Swift::Int countAndFlagsBits;
  unint64_t object;
  id v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  Swift::String v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  char v35;
  Swift::String v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v2 = *(void **)v0;
  v1 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  if (_foundation_swift_url_feature_enabled())
  {
    v37 = (uint64_t)v2;
    v38 = v1;
    v39 = v3;
    swift_retain();
    v4 = v2;
    swift_retain();
    v5 = URL.path(percentEncoded:)(1);
    countAndFlagsBits = v5._countAndFlagsBits;
    v36 = v5;
    swift_bridgeObjectRetain();
    if (String.count.getter() < 2)
    {
      object = (unint64_t)v5._object;
    }
    else
    {
      object = (unint64_t)v5._object;
      if ((specialized BidirectionalCollection.last.getter(v5._countAndFlagsBits, (unint64_t)v5._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        countAndFlagsBits = v36._countAndFlagsBits;
        object = (unint64_t)v36._object;
      }
    }
    v37 = Set.init(minimumCapacity:)();
    specialized Set._Variant.insert(_:)(&v35, 0x2FuLL);
    v20 = v37;
    v21 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if ((object & 0x2000000000000000) != 0)
      v22 = HIBYTE(object) & 0xF;
    else
      v22 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (!v22)
    {
      swift_bridgeObjectRelease();
      v26 = 0;
LABEL_28:
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v26;
    }
    swift_bridgeObjectRetain();
    if ((object & 0x1000000000000000) != 0)
    {
      v26 = 0;
      v30 = 1;
    }
    else
    {
      if ((object & 0x2000000000000000) != 0)
      {
        v37 = countAndFlagsBits;
        v38 = object & 0xFFFFFFFFFFFFFFLL;
        v23 = &v37;
        v24 = HIBYTE(object) & 0xF;
      }
      else
      {
        if ((countAndFlagsBits & 0x1000000000000000) != 0)
        {
          v23 = (uint64_t *)((object & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          v23 = (uint64_t *)_StringObject.sharedUTF8.getter();
          v21 = v34;
        }
        v24 = v21;
      }
      v26 = specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)((uint64_t)v23, v24, v20, (uint64_t (*)(_QWORD))specialized StringProtocol.hexToAscii(_:));
      v30 = v29;
    }
    if (v30 == 1)
    {
      swift_bridgeObjectRetain();
      v26 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(countAndFlagsBits, object, v20);
      v32 = v31;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      if (v32)
        goto LABEL_28;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v30)
        goto LABEL_28;
    }
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  v8 = objc_msgSend(v2, sel__parameterString);
  if (v8)
  {
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v12 = v11;

    if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
      && (v13 = objc_msgSend(v2, sel_path)) != 0)
    {
      v14 = v13;
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v17 = v16;

      v37 = (uint64_t)v15;
      v38 = v17;
      swift_bridgeObjectRetain();
      v18._countAndFlagsBits = 59;
      v18._object = (void *)0xE100000000000000;
      String.append(_:)(v18);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v19._countAndFlagsBits = (uint64_t)v10;
      v19._object = v12;
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
    }
    else
    {
      v37 = 59;
      v38 = 0xE100000000000000;
      v25._countAndFlagsBits = (uint64_t)v10;
      v25._object = v12;
      String.append(_:)(v25);
    }
    swift_bridgeObjectRelease();
    return v37;
  }
  else
  {
    v27 = objc_msgSend(v2, sel_path);
    if (!v27)
      return 0;
    v28 = v27;
    v26 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v27);

  }
  return v26;
}

uint64_t DateComponents.minute.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 128);
}

NSComparisonPredicate *HandleStringAggregatePredicate(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  unsigned int v8;
  uint64_t v9;
  id v10;
  NSComparisonPredicate *v11;

  if (a3)
  {
    v8 = objc_msgSend(a3, "rangeOfString:options:", CFSTR("c"), 1) != 0x7FFFFFFFFFFFFFFFLL;
    if (objc_msgSend(a3, "rangeOfString:options:", CFSTR("d"), 1) != 0x7FFFFFFFFFFFFFFFLL)
      v8 |= 2u;
    if (objc_msgSend(a3, "rangeOfString:options:", CFSTR("n"), 1) != 0x7FFFFFFFFFFFFFFFLL)
      v8 |= 4u;
    if (objc_msgSend(a3, "rangeOfString:options:", CFSTR("l"), 1) != 0x7FFFFFFFFFFFFFFFLL)
      v8 |= 8u;
    if (objc_msgSend(a3, "rangeOfString:options:", CFSTR("w"), 1) == 0x7FFFFFFFFFFFFFFFLL)
      v9 = v8;
    else
      v9 = v8 | 0x10;
  }
  else
  {
    v9 = 0;
  }
  v10 = +[NSPredicateOperator _newOperatorWithType:modifier:options:](NSPredicateOperator, "_newOperatorWithType:modifier:options:", a2, 0, v9);
  v11 = -[NSComparisonPredicate initWithPredicateOperator:leftExpression:rightExpression:]([NSComparisonPredicate alloc], "initWithPredicateOperator:leftExpression:rightExpression:", v10, a1, a4);

  return v11;
}

id CopyBasicOperatorAddOptions(void *a1, void *a2)
{
  void *v2;
  unint64_t v4;

  v2 = a2;
  if (a2)
  {
    v4 = objc_msgSend(a2, "rangeOfString:options:", CFSTR("c"), 1) != 0x7FFFFFFFFFFFFFFFLL;
    if (objc_msgSend(v2, "rangeOfString:options:", CFSTR("d"), 1) != 0x7FFFFFFFFFFFFFFFLL)
      v4 |= 2uLL;
    if (objc_msgSend(v2, "rangeOfString:options:", CFSTR("n"), 1) != 0x7FFFFFFFFFFFFFFFLL)
      v4 |= 4uLL;
    if (objc_msgSend(v2, "rangeOfString:options:", CFSTR("l"), 1) == 0x7FFFFFFFFFFFFFFFLL)
      v2 = (void *)v4;
    else
      v2 = (void *)(v4 | 8);
  }
  return +[NSPredicateOperator _newOperatorWithType:modifier:options:](NSPredicateOperator, "_newOperatorWithType:modifier:options:", objc_msgSend(a1, "operatorType"), objc_msgSend(a1, "modifier"), v2);
}

void _NSFileHandlePerformSourceContextRelease(void *a1)
{
  unsigned int v1;
  unsigned int v2;

  do
  {
    v1 = __ldaxr((unsigned int *)a1);
    v2 = v1 - 1;
  }
  while (__stlxr(v2, (unsigned int *)a1));
  if (!v2)
    free(a1);
}

Swift::Bool __swiftcall _NSSwiftCalendar.isDate(_:equalTo:toUnitGranularity:)(Foundation::Date _, Foundation::Date equalTo, NSCalendarUnit toUnitGranularity)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  Foundation::Date v8;
  NSComparisonResult v9;
  Foundation::Date _a[2];
  uint64_t v11;
  __int128 v12;

  v5 = *(_QWORD *)toUnitGranularity;
  _fromNSCalendarUnit(_:)(v3, (char *)&v12);
  if (v12 == 18)
    return 0;
  v7 = *(_QWORD *)(v4 + OBJC_IVAR____NSSwiftCalendar__lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v7 + 32));
  *(_OWORD *)&_a[0]._time = *(_OWORD *)(v7 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 32));
  v12 = *(_OWORD *)&_a[0]._time;
  v11 = v5;
  v9 = Calendar.compare(_:to:toGranularity:)(_a[0], v8, (Foundation::Calendar::Component)&v11);
  swift_unknownObjectRelease();
  return v9 == NSOrderedSame;
}

Swift::Bool __swiftcall _NSSwiftCalendar.isDate(_:inSameDayAs:)(Foundation::Date _, Foundation::Date inSameDayAs)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Foundation::Date v6;
  NSComparisonResult v7;
  Foundation::Date _a[2];
  uint64_t v10;
  __int128 v11;

  v4 = *v2;
  v5 = *(_QWORD *)(v3 + OBJC_IVAR____NSSwiftCalendar__lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 32));
  *(_OWORD *)&_a[0]._time = *(_OWORD *)(v5 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 32));
  v11 = *(_OWORD *)&_a[0]._time;
  v10 = v4;
  v7 = Calendar.compare(_:to:toGranularity:)(_a[0], v6, (Foundation::Calendar::Component)&v10);
  swift_unknownObjectRelease();
  return v7 == NSOrderedSame;
}

NSComparisonResult __swiftcall _NSSwiftCalendar.compare(_:to:toUnitGranularity:)(Foundation::Date _, Foundation::Date to, NSCalendarUnit toUnitGranularity)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSComparisonResult v6;
  uint64_t v7;
  Foundation::Date v8;
  Foundation::Date _a[2];
  uint64_t v11;
  __int128 v12;

  v5 = *(_QWORD *)toUnitGranularity;
  _fromNSCalendarUnit(_:)(v3, (char *)&v12);
  if (v12 == 18)
    return 0;
  v7 = *(_QWORD *)(v4 + OBJC_IVAR____NSSwiftCalendar__lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v7 + 32));
  *(_OWORD *)&_a[0]._time = *(_OWORD *)(v7 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 32));
  v12 = *(_OWORD *)&_a[0]._time;
  v11 = v5;
  v6 = Calendar.compare(_:to:toGranularity:)(_a[0], v8, (Foundation::Calendar::Component)&v11);
  swift_unknownObjectRelease();
  return v6;
}

Swift::Bool __swiftcall Calendar.isDate(_:inSameDayAs:)(Foundation::Date _, Foundation::Date inSameDayAs)
{
  _QWORD *v2;
  _QWORD *v3;
  __int128 *v4;
  Foundation::Date v5;
  Foundation::Date v6;
  Swift::Double time;
  __int128 v9;

  *(Foundation::Date *)&v5._time = (Foundation::Date)*v2;
  *(Foundation::Date *)&v6._time = (Foundation::Date)*v3;
  v9 = *v4;
  time = v5._time;
  return Calendar.compare(_:to:toGranularity:)(v5, v6, (Foundation::Calendar::Component)&time) == NSOrderedSame;
}

Swift::Bool __swiftcall Calendar.isDate(_:equalTo:toGranularity:)(Foundation::Date _, Foundation::Date equalTo, Foundation::Calendar::Component toGranularity)
{
  _QWORD *v3;
  __int128 *v4;
  Foundation::Date v5;
  Foundation::Date v6;
  Swift::Double time;
  __int128 v9;

  *(Foundation::Date *)&v5._time = *(Foundation::Date *)toGranularity;
  *(Foundation::Date *)&v6._time = (Foundation::Date)*v3;
  v9 = *v4;
  time = v5._time;
  return Calendar.compare(_:to:toGranularity:)(v5, v6, (Foundation::Calendar::Component)&time) == NSOrderedSame;
}

uint64_t @objc _NSSwiftCalendar.isDateInYesterday(_:)(void *a1, int a2, id a3, uint64_t (*a4)(uint64_t *))
{
  uint64_t v6;
  id v7;
  uint64_t v9;

  objc_msgSend(a3, sel_timeIntervalSinceReferenceDate);
  v9 = v6;
  v7 = a1;
  LOBYTE(a4) = _NSSwiftCalendar.isDateInToday(_:)(&v9, a4);

  return a4 & 1;
}

uint64_t _NSSwiftCalendar.isDateInToday(_:)(uint64_t *a1, uint64_t (*a2)(uint64_t *))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;
  __int128 v9;

  v4 = *a1;
  v5 = *(_QWORD *)(v2 + OBJC_IVAR____NSSwiftCalendar__lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 32));
  v7 = *(_OWORD *)(v5 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 32));
  v9 = v7;
  v8 = v4;
  LOBYTE(a2) = a2(&v8);
  swift_unknownObjectRelease();
  return a2 & 1;
}

Swift::Bool __swiftcall Calendar.isDateInYesterday(_:)(Foundation::Date a1)
{
  __darwin_time_t *v1;
  double *v2;
  __darwin_time_t v3;
  double v4;
  double v5;
  double v6;
  __darwin_time_t v7;
  uint64_t ObjectType;
  Foundation::Date v10;
  Foundation::Date v11;
  timespec __tp;
  double v13[2];
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = *v1;
  v5 = *v2;
  v4 = v2[1];
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  v6 = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  LOBYTE(v11._time) = 3;
  if (v6 > 1.59271755e13)
    v6 = 1.59271755e13;
  *(double *)&v7 = fmax(v6, -2.11845067e11);
  ObjectType = swift_getObjectType();
  __tp.tv_sec = v7;
  (*(void (**)(double *__return_ptr, Foundation::Date *, timespec *, uint64_t, double))(*(_QWORD *)&v4 + 160))(v13, &v11, &__tp, ObjectType, COERCE_DOUBLE(*(_QWORD *)&v4));
  if ((v14 & 1) != 0)
    return 0;
  v10._time = v13[0] + -60.0;
  v13[0] = v5;
  v13[1] = v4;
  v11._time = v10._time;
  __tp.tv_sec = v3;
  return Calendar.compare(_:to:toGranularity:)(v10, (Foundation::Date)0xC04E000000000000, (Foundation::Calendar::Component)&__tp) == NSOrderedSame;
}

id @objc static NSTimeZone._current()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  id v3;

  if (one-time initialization token for cache != -1)
    swift_once();
  v0 = static TimeZoneCache.cache + 16;
  v1 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in TimeZoneCache.bridgedCurrent.getter(v0, &v3);
  os_unfair_lock_unlock(v1);
  swift_release_n();
  return v3;
}

void closure #1 in TimeZoneCache.bridgedCurrent.getter(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  id v5;

  TimeZoneCache.State.check()();
  v4 = *(void **)(a1 + 80);
  if (v4)
  {
    *a2 = v4;
    v5 = v4;
  }
  else
  {
    __break(1u);
  }
}

Swift::Bool __swiftcall Calendar.isDateInTomorrow(_:)(Foundation::Date a1)
{
  __darwin_time_t *v1;
  double *v2;
  __darwin_time_t v3;
  double v4;
  double v5;
  double v6;
  __darwin_time_t v7;
  uint64_t ObjectType;
  Foundation::Date v10;
  Foundation::Date v11;
  timespec __tp;
  double v13;
  double v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = *v1;
  v5 = *v2;
  v4 = v2[1];
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  v6 = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  LOBYTE(v11._time) = 3;
  if (v6 > 1.59271755e13)
    v6 = 1.59271755e13;
  *(double *)&v7 = fmax(v6, -2.11845067e11);
  ObjectType = swift_getObjectType();
  __tp.tv_sec = v7;
  (*(void (**)(double *__return_ptr, Foundation::Date *, timespec *, uint64_t, double))(*(_QWORD *)&v4 + 160))(&v13, &v11, &__tp, ObjectType, COERCE_DOUBLE(*(_QWORD *)&v4));
  if ((v15 & 1) != 0)
    return 0;
  v10._time = v14 + v13 + 60.0;
  v13 = v5;
  v14 = v4;
  v11._time = v10._time;
  __tp.tv_sec = v3;
  return Calendar.compare(_:to:toGranularity:)(v10, (Foundation::Date)0x404E000000000000, (Foundation::Calendar::Component)&__tp) == NSOrderedSame;
}

Swift::Int __swiftcall TimeZone.secondsFromGMT(for:)(Foundation::Date a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v7;

  v3 = *v1;
  v4 = *(_QWORD *)(v2 + 8);
  ObjectType = swift_getObjectType();
  v7 = v3;
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 + 40))(&v7, ObjectType, v4);
}

double static TimeZone.current.getter@<D0>(_OWORD *a1@<X8>)
{
  uint64_t *v2;
  os_unfair_lock_s *v3;
  double result;
  __int128 v5;

  if (one-time initialization token for cache != -1)
    swift_once();
  v2 = (uint64_t *)(static TimeZoneCache.cache + 16);
  v3 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in TimeZoneCache.current.getter(v2, (uint64_t *)&v5);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  result = *(double *)&v5;
  *a1 = v5;
  return result;
}

double *Calendar.dateAfterMatchingHour(startingAt:originalStartDate:components:direction:findLastMatch:isStrictMatching:matchingPolicy:)@<X0>(double *result@<X0>, double *a2@<X1>, uint64_t a3@<X2>, unsigned __int8 *a4@<X3>, unsigned __int8 a5@<W4>, char a6@<W5>, unsigned __int8 *a7@<X6>, uint64_t a8@<X8>)
{
  double *v8;
  double v10;
  double v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  double v15;
  double v16;
  double v17;
  uint64_t ObjectType;
  void (*v19)(double *__return_ptr, uint64_t *, double *, uint64_t, _QWORD *);
  uint64_t v20;
  uint64_t v21;
  double *(*v22)(double *__return_ptr, double *, _QWORD *, uint64_t, _QWORD *);
  double v23;
  double v24;
  uint64_t v25;
  double *(*v26)(double *__return_ptr, double *, _QWORD *, uint64_t, _QWORD *);
  double v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  double v32;
  double v33;
  Foundation::Date v34;
  uint64_t v35;
  BOOL v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  double v41;
  Foundation::Date v42;
  double v43;
  uint64_t v44;
  double v45;
  double v46;
  _QWORD *(*v47)(double *__return_ptr, double *, _QWORD *, _QWORD, uint64_t, _QWORD *);
  uint64_t v48;
  double v49;
  double v50;
  double v51;
  int v52;
  char v55;
  uint64_t v56;
  double v57;
  double v58;
  _QWORD *v59;
  double v60;
  char v61;
  double v62[36];
  uint64_t v63;
  _QWORD v64[36];
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;
  _QWORD v74[36];
  uint64_t v75;
  double v76[36];
  _QWORD v77[36];
  uint64_t v78;
  double v79[37];
  _QWORD __dst[36];
  uint64_t v81;
  _QWORD __src[38];

  if ((*(_BYTE *)(a3 + 120) & 1) != 0)
  {
    *(_QWORD *)a8 = 0;
    *(_BYTE *)(a8 + 8) = 1;
    return result;
  }
  v10 = *result;
  v11 = *a2;
  v12 = *(_QWORD *)(a3 + 112);
  v52 = *a4;
  v13 = *a7;
  v15 = *v8;
  v14 = (_QWORD *)*((_QWORD *)v8 + 1);
  v81 = 16;
  if (v10 <= 1.59271755e13)
    v16 = v10;
  else
    v16 = 1.59271755e13;
  v17 = fmax(v16, -2.11845067e11);
  ObjectType = swift_getObjectType();
  v79[0] = v17;
  v19 = (void (*)(double *__return_ptr, uint64_t *, double *, uint64_t, _QWORD *))v14[24];
  v19((double *)__src, &v81, v79, ObjectType, v14);
  memcpy(__dst, __src, 0x11AuLL);
  outlined release of DateComponents((uint64_t)__dst);
  v56 = v12;
  if ((__dst[15] & 1) != 0)
  {
    if (v12)
    {
      v20 = 0;
      goto LABEL_34;
    }
    if ((a6 & 1) != 0)
      goto LABEL_14;
    v20 = 0;
  }
  else
  {
    v21 = v12;
    v20 = __dst[14];
    if (v21 || (a6 & 1) != 0)
    {
      if (v56 == __dst[14])
      {
LABEL_14:
        if ((a5 & 1) != 0)
        {
          v55 = 0;
          v22 = (double *(*)(double *__return_ptr, double *, _QWORD *, uint64_t, _QWORD *))v14[20];
          goto LABEL_87;
        }
        goto LABEL_33;
      }
      goto LABEL_34;
    }
  }
  LOBYTE(v76[0]) = 3;
  *(double *)v77 = v17;
  v22 = (double *(*)(double *__return_ptr, double *, _QWORD *, uint64_t, _QWORD *))v14[20];
  v22(v79, v76, v77, ObjectType, v14);
  if ((LOBYTE(v79[2]) & 1) == 0)
  {
    v23 = v79[0];
    *(_QWORD *)&v76[0] = 16;
    v24 = v79[0] <= 1.59271755e13 ? v79[0] : 1.59271755e13;
    v74[0] = fmax(v24, -2.11845067e11);
    v19(v79, (uint64_t *)v76, (double *)v74, ObjectType, v14);
    memcpy(v77, v79, 0x11AuLL);
    result = (double *)outlined release of DateComponents((uint64_t)v77);
    if ((v77[15] & 1) == 0)
    {
      if (v77[14])
      {
        if (v20 == v77[14])
        {
          if (!v13)
            v10 = v23;
          if ((a5 & 1) != 0)
            goto LABEL_86;
LABEL_27:
          v25 = a8;
          goto LABEL_110;
        }
        if (v56 != v20)
          goto LABEL_34;
        if ((a5 & 1) == 0)
        {
LABEL_33:
          v25 = a8;
          goto LABEL_105;
        }
LABEL_30:
        v55 = 0;
        goto LABEL_87;
      }
    }
  }
  if (v56 == v20)
  {
    if ((a5 & 1) == 0)
      goto LABEL_33;
    goto LABEL_30;
  }
LABEL_34:
  v26 = (double *(*)(double *__return_ptr, double *, _QWORD *, uint64_t, _QWORD *))v14[20];
  LOBYTE(v76[0]) = 4;
  *(double *)v77 = v17;
  v26(v79, v76, v77, ObjectType, v14);
  if ((LOBYTE(v79[2]) & 1) != 0)
  {
    v27 = v10;
LABEL_64:
    lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
    swift_allocError();
    *(_QWORD *)v38 = 4;
    *(double *)(v38 + 8) = v27;
    *(_BYTE *)(v38 + 16) = 0;
    return (double *)swift_willThrow();
  }
  while (1)
  {
    v28 = v79[1];
    v27 = v79[0];
    v29 = v79[1] + v79[0];
    v78 = 16;
    if (v79[1] + v79[0] <= 1.59271755e13)
      v30 = v79[1] + v79[0];
    else
      v30 = 1.59271755e13;
    v76[0] = fmax(v30, -2.11845067e11);
    v19(v79, &v78, v76, ObjectType, v14);
    memcpy(v77, v79, 0x11AuLL);
    outlined release of DateComponents((uint64_t)v77);
    if (LOBYTE(v77[15]))
      v31 = 0;
    else
      v31 = v77[14];
    v32 = v27 + v28 + v28;
    v75 = 16;
    if (v32 <= 1.59271755e13)
      v33 = v32;
    else
      v33 = 1.59271755e13;
    v64[0] = fmax(v33, -2.11845067e11);
    v19(v76, &v75, (double *)v64, ObjectType, v14);
    memcpy(v74, v76, 0x11AuLL);
    result = (double *)outlined release of DateComponents((uint64_t)v74);
    v35 = v74[14];
    if (LOBYTE(v74[15]))
      v35 = 0;
    if (__OFSUB__(v31, v20))
    {
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
      goto LABEL_114;
    }
    if (v31 - v20 != 2 && (v20 != 23 || v31 != 1))
    {
      if (((v35 == v31) & a5) != 0)
        v27 = v32;
      else
        v27 = v29;
      if (v27 != v10)
        goto LABEL_59;
LABEL_58:
      if (v20 == v31)
      {
        lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
        swift_allocError();
        *(double *)v39 = v27;
        *(double *)(v39 + 8) = v10;
        *(_BYTE *)(v39 + 16) = 1;
        return (double *)swift_willThrow();
      }
      goto LABEL_59;
    }
    v36 = __OFSUB__(v31--, 1);
    if (v36)
      goto LABEL_112;
    if (v27 == v10)
      goto LABEL_58;
LABEL_59:
    if (v56 == v31)
      break;
    LOBYTE(v76[0]) = 4;
    if (v27 <= 1.59271755e13)
      v37 = v27;
    else
      v37 = 1.59271755e13;
    v77[0] = fmax(v37, -2.11845067e11);
    v26(v79, v76, v77, ObjectType, v14);
    v10 = v27;
    v20 = v31;
    if ((LOBYTE(v79[2]) & 1) != 0)
      goto LABEL_64;
  }
  v40 = v52;
  if (v11 >= v27)
    v40 = 0;
  if (v40 != 1)
  {
LABEL_80:
    v10 = v27;
    v22 = v26;
    goto LABEL_85;
  }
  *(double *)v64 = v15;
  v64[1] = v14;
  LOBYTE(v60) = 3;
  v58 = v27;
  *(Foundation::Date_optional *)(&result - 1) = Calendar.date(byAdding:value:to:wrappingComponents:)((Foundation::Calendar::Component)&v60, -1, v34, (Swift::Bool)&v58);
  if ((LOBYTE(v62[1]) & 1) != 0)
    goto LABEL_116;
  v22 = v26;
  v10 = v62[0];
  v63 = 16;
  if (v62[0] <= 1.59271755e13)
    v41 = v62[0];
  else
    v41 = 1.59271755e13;
  v58 = fmax(v41, -2.11845067e11);
  v19((double *)v64, &v63, &v58, ObjectType, v14);
  memcpy(v62, v64, 0x11AuLL);
  result = (double *)outlined release of DateComponents((uint64_t)v62);
  v43 = v62[14];
  if (LOBYTE(v62[15]))
    v43 = 0.0;
  if (__OFSUB__(*(_QWORD *)&v43, v56))
    goto LABEL_113;
  if (*(_QWORD *)&v43 - v56 == 1)
  {
    v58 = v15;
    v59 = v14;
    v73 = 4;
    v57 = v10;
    *(Foundation::Date_optional *)(&result - 1) = Calendar.date(byAdding:value:to:wrappingComponents:)((Foundation::Calendar::Component)&v73, -1, v42, (Swift::Bool)&v57);
    if ((v61 & 1) != 0)
    {
      __break(1u);
      goto LABEL_80;
    }
LABEL_84:
    v10 = v60;
    goto LABEL_85;
  }
  v36 = __OFSUB__(v56, *(_QWORD *)&v43);
  v44 = v56 - *(_QWORD *)&v43;
  if (v36)
  {
LABEL_114:
    __break(1u);
    goto LABEL_115;
  }
  if (v44 == 1)
  {
    v58 = v15;
    v59 = v14;
    v73 = 4;
    v57 = v10;
    *(Foundation::Date_optional *)(&result - 1) = Calendar.date(byAdding:value:to:wrappingComponents:)((Foundation::Calendar::Component)&v73, 1, v42, (Swift::Bool)&v57);
    if ((v61 & 1) != 0)
      goto LABEL_117;
    goto LABEL_84;
  }
LABEL_85:
  if ((a5 & 1) == 0)
    goto LABEL_27;
LABEL_86:
  v55 = 1;
LABEL_87:
  LOBYTE(v76[0]) = 4;
  if (v10 <= 1.59271755e13)
    v45 = v10;
  else
    v45 = 1.59271755e13;
  v77[0] = fmax(v45, -2.11845067e11);
  result = v22(v79, v76, v77, ObjectType, v14);
  if ((LOBYTE(v79[2]) & 1) != 0)
  {
LABEL_104:
    v25 = a8;
    if ((v55 & 1) != 0)
    {
LABEL_110:
      *(double *)v25 = v10;
      *(_BYTE *)(v25 + 8) = 0;
      return result;
    }
LABEL_105:
    LOBYTE(v76[0]) = 4;
    if (v10 <= 1.59271755e13)
      v51 = v10;
    else
      v51 = 1.59271755e13;
    v77[0] = fmax(v51, -2.11845067e11);
    result = (double *)((double *(*)(double *__return_ptr, double *, _QWORD *, uint64_t, _QWORD *))v14[20])(v79, v76, v77, ObjectType, v14);
    if ((LOBYTE(v79[2]) & 1) == 0)
      v10 = v79[0];
    goto LABEL_110;
  }
  v46 = v79[0];
  v47 = (_QWORD *(*)(double *__return_ptr, double *, _QWORD *, _QWORD, uint64_t, _QWORD *))v14[25];
  if (v52)
    v48 = -1;
  else
    v48 = 1;
  while (1)
  {
    v10 = v46;
    LOBYTE(v62[0]) = 1;
    LOBYTE(v58) = 1;
    LOBYTE(v60) = 1;
    LOBYTE(v78) = 1;
    LOBYTE(v75) = 1;
    LOBYTE(v63) = 0;
    LOBYTE(v57) = 1;
    v73 = 1;
    v72 = 1;
    v71 = 1;
    v70 = 1;
    v69 = 1;
    v68 = 1;
    v67 = 1;
    v66 = 1;
    v65 = 1;
    v49 = v46 <= 1.59271755e13 ? v46 : 1.59271755e13;
    memset(v79, 0, 40);
    LOBYTE(v79[5]) = LOBYTE(v62[0]);
    v79[6] = 0.0;
    LOBYTE(v79[7]) = LOBYTE(v58);
    v79[8] = 0.0;
    LOBYTE(v79[9]) = LOBYTE(v60);
    v79[10] = 0.0;
    LOBYTE(v79[11]) = v78;
    v79[12] = 0.0;
    LOBYTE(v79[13]) = v75;
    *(_QWORD *)&v79[14] = v48;
    LOBYTE(v79[15]) = v63;
    v79[16] = 0.0;
    LOBYTE(v79[17]) = LOBYTE(v57);
    v79[18] = 0.0;
    LOBYTE(v79[19]) = v73;
    v79[20] = 0.0;
    LOBYTE(v79[21]) = v72;
    v79[22] = 0.0;
    LOBYTE(v79[23]) = v71;
    v79[24] = 0.0;
    LOBYTE(v79[25]) = v70;
    v79[26] = 0.0;
    LOBYTE(v79[27]) = v69;
    v79[28] = 0.0;
    LOBYTE(v79[29]) = v68;
    v79[30] = 0.0;
    LOBYTE(v79[31]) = v67;
    v79[32] = 0.0;
    LOBYTE(v79[33]) = v66;
    v79[34] = 0.0;
    LOBYTE(v79[35]) = v65;
    BYTE1(v79[35]) = 2;
    v77[0] = fmax(v49, -2.11845067e11);
    result = (double *)v47(v76, v79, v77, 0, ObjectType, v14);
    if ((LOBYTE(v76[1]) & 1) != 0)
      break;
    v46 = v76[0];
    v74[0] = 16;
    if (v76[0] <= 1.59271755e13)
      v50 = v76[0];
    else
      v50 = 1.59271755e13;
    v64[0] = fmax(v50, -2.11845067e11);
    v19(v79, v74, (double *)v64, ObjectType, v14);
    memcpy(v77, v79, 0x11AuLL);
    result = (double *)outlined release of DateComponents((uint64_t)v77);
    if (LOBYTE(v77[15]) == 1)
    {
      if (v56)
        goto LABEL_104;
    }
    else if (v77[14] != v56)
    {
      goto LABEL_104;
    }
  }
LABEL_115:
  __break(1u);
LABEL_116:
  __break(1u);
LABEL_117:
  __break(1u);
  return result;
}

Swift::Bool __swiftcall Calendar.isDateInToday(_:)(Foundation::Date a1)
{
  uint64_t *v1;
  __int128 *v2;
  uint64_t v3;
  timespec __tp;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = *v1;
  v7 = *v2;
  v6 = v3;
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  return Calendar.compare(_:to:toGranularity:)(COERCE_FOUNDATION_DATE((double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001), COERCE_FOUNDATION_DATE((double)__tp.tv_nsec * 0.000000001), (Foundation::Calendar::Component)&v6) == NSOrderedSame;
}

NSComparisonResult __swiftcall Calendar.compare(_:to:toGranularity:)(Foundation::Date _, Foundation::Date to, Foundation::Calendar::Component toGranularity)
{
  double *v3;
  _BYTE *v4;
  uint64_t *v5;
  double v6;
  double v7;
  uint64_t v8;
  NSComparisonResult v9;
  uint64_t v10;
  uint64_t v11;
  NSComparisonResult result;
  char *v13;
  double v14;
  uint64_t ObjectType;
  double v16;
  double v17;
  double v18;
  double v19;
  NSComparisonResult v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  double v30;
  double v31;
  BOOL v32;
  NSComparisonResult v33;
  double v34;
  double v35[4];
  uint64_t v36;
  _QWORD v37[2];
  double v38;
  double v39;
  char v40;
  uint64_t v41;
  _QWORD v42[3];

  v6 = *(double *)toGranularity;
  v7 = *v3;
  v8 = -1;
  if (*v3 < *(double *)toGranularity)
    v8 = 1;
  if (v6 == v7)
    v9 = NSOrderedSame;
  else
    v9 = v8;
  if (v6 < -2.11845067e11 || v6 > 1.59271755e13 || v7 < -2.11845067e11 || v7 > 1.59271755e13)
    return v9;
  v11 = *v5;
  v10 = v5[1];
  result = NSOrderedSame;
  v13 = (char *)&outlined read-only object #0 of Calendar.compare(_:to:toGranularity:);
  switch(*v4)
  {
    case 3:
    case 4:
      LOBYTE(v42[0]) = *v4;
      v14 = fmax(v6, -2.11845067e11);
      ObjectType = swift_getObjectType();
      v35[0] = v14;
      (*(void (**)(double *__return_ptr, _QWORD *, double *, uint64_t, uint64_t))(v10 + 160))(&v38, v42, v35, ObjectType, v10);
      if ((v40 & 1) != 0)
        return v9;
      if (v39 + v38 < v38)
      {
        __break(1u);
        goto LABEL_51;
      }
      if (v7 < v39 + v38)
        v33 = NSOrderedSame;
      else
        v33 = NSOrderedAscending;
      if (v7 >= v38)
        return v33;
      else
        return 1;
    case 5:
      v16 = floor(floor(v6) / 60.0);
      v17 = floor(floor(v7) / 60.0);
      goto LABEL_37;
    case 6:
      v18 = floor(v6);
      v19 = floor(v7);
      v20 = NSOrderedAscending;
      if (v19 < v18)
        v20 = NSOrderedDescending;
      if (v18 == v19)
        return 0;
      else
        return v20;
    case 7:
    case 0xA:
      v13 = (char *)&outlined read-only object #2 of Calendar.compare(_:to:toGranularity:);
      goto LABEL_22;
    case 8:
      v13 = (char *)&outlined read-only object #1 of Calendar.compare(_:to:toGranularity:);
      goto LABEL_22;
    case 0xB:
    case 0xC:
      goto LABEL_22;
    case 0xD:
      v30 = trunc(v6);
      v31 = trunc(v7);
      if (v30 == v31)
      {
        v14 = (v6 - v30) * 1000000000.0;
        v7 = (v7 - v31) * 1000000000.0;
        if (one-time initialization token for compatibility1 != -1)
LABEL_51:
          swift_once();
        v16 = trunc(v14);
        v17 = trunc(v7);
        if (static Calendar.compatibility1 == 1)
        {
          if (v16 != v17)
            return (unint64_t)(v16 < v17);
          return 0;
        }
LABEL_37:
        if (v16 == v17)
          return 0;
        v32 = v17 < v16;
      }
      else
      {
        v32 = v31 < v30;
      }
      if (v32)
        return 1;
      else
        return -1;
    case 0xE:
    case 0xF:
    case 0x10:
      return result;
    default:
      v13 = (char *)&outlined read-only object #3 of Calendar.compare(_:to:toGranularity:);
LABEL_22:
      v21 = *((_QWORD *)v13 + 2);
      lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component();
      v38 = COERCE_DOUBLE(Set.init(minimumCapacity:)());
      if (v21)
      {
        v22 = (unsigned __int8 *)(v13 + 32);
        v23 = v21;
        do
        {
          v24 = *v22++;
          specialized Set._Variant.insert(_:)(v35, v24);
          --v23;
        }
        while (v23);
      }
      v42[0] = v11;
      v42[1] = v10;
      v25 = swift_bridgeObjectRetain();
      Calendar.ComponentSet.init(_:)(v25, &v41);
      v35[0] = fmax(v6, -2.11845067e11);
      Calendar._dateComponents(_:from:)(&v41, v35, &v38);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v35[0] = Set.init(minimumCapacity:)();
      if (v21)
      {
        v26 = (unsigned __int8 *)(v13 + 32);
        v27 = v21;
        do
        {
          v28 = *v26++;
          specialized Set._Variant.insert(_:)(v37, v28);
          --v27;
        }
        while (v27);
      }
      v37[0] = v11;
      v37[1] = v10;
      v29 = swift_bridgeObjectRetain();
      Calendar.ComponentSet.init(_:)(v29, &v36);
      v34 = fmax(v7, -2.11845067e11);
      Calendar._dateComponents(_:from:)(&v36, &v34, v35);
      swift_bridgeObjectRelease();
      if (v21)
        __asm { BR              X8 }
      swift_bridgeObjectRelease();
      outlined release of DateComponents((uint64_t)v35);
      outlined release of DateComponents((uint64_t)&v38);
      return 0;
  }
}

uint64_t protocol witness for _CalendarProtocol.dateInterval(of:for:) in conformance _CalendarICU()
{
  uint64_t v0;
  os_unfair_lock_s *v1;

  v1 = *(os_unfair_lock_s **)(v0 + 16);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in LockedState<A>.withLock<A>(_:)();
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

double partial apply for closure #1 in _CalendarICU.dateInterval(of:for:)()
{
  uint64_t v0;
  double result;
  char v2;

  v2 = *(_BYTE *)(v0 + 24);
  _CalendarICU._locked_dateInterval(of:at:)((uint64_t)&v2);
  return result;
}

void _CalendarICU._locked_dateInterval(of:at:)(uint64_t a1)
{
  __asm { BR              X9 }
}

void sub_1818B7E70()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  int v7;
  double v8;
  double v9;
  double v10;
  double v11;
  int v12;
  uint64_t v13;
  double v14;
  char v15;

  LOBYTE(v11) = v1;
  v13 = v2;
  _CalendarICU._locked_setToFirstInstant(of:at:)((unsigned __int8 *)&v11);
  v12 = 0;
  ucal_getMillis();
  v4 = v3;
  v5 = v3 / 1000.0 + -978307200.0;
  switch(v1)
  {
    case 0:
      ucal_add();
      ucal_getMillis();
      if (v6 != v4)
        goto LABEL_8;
      *(double *)v0 = v5;
      *(_QWORD *)(v0 + 8) = 0x4290000000000000;
      *(_BYTE *)(v0 + 16) = 0;
      return;
    case 1:
    case 2:
    case 3:
    case 10:
    case 11:
    case 12:
    case 17:
      ucal_add();
      goto LABEL_8;
    case 9:
      ucal_add();
      if (ucal_get() == 12)
      {
        ucal_add();
        v7 = ucal_get();
        if (v7 != ucal_getLimit())
          ucal_set();
      }
      goto LABEL_8;
    default:
LABEL_8:
      ucal_getLimit();
      ucal_set();
      ucal_getLimit();
      ucal_set();
      ucal_getLimit();
      ucal_set();
      ucal_set();
      v12 = 0;
      ucal_getMillis();
      v9 = v8 / 1000.0 + -978307200.0;
      v11 = v9;
      _CalendarICU._locked_timeZoneTransitionInterval(at:)(&v11, (uint64_t)&v13);
      if ((v15 & 1) == 0)
      {
        if (v9 - v14 >= v5)
        {
          v10 = v9 - v14 - v5;
          goto LABEL_14;
        }
        __break(1u);
LABEL_17:
        __break(1u);
      }
      if (v5 < v9)
      {
        if (v9 >= v5)
        {
          v10 = v9 - v5;
LABEL_14:
          *(double *)v0 = v5;
          *(double *)(v0 + 8) = v10;
          *(_BYTE *)(v0 + 16) = 0;
          return;
        }
        goto LABEL_17;
      }
      *(_QWORD *)v0 = 0;
      *(_QWORD *)(v0 + 8) = 0;
      *(_BYTE *)(v0 + 16) = 1;
      return;
  }
}

void _CalendarICU._locked_setToFirstInstant(of:at:)(unsigned __int8 *a1)
{
  unsigned int v1;
  int v3;
  double v4;
  double v5;
  int v6;
  _BYTE v7[24];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v1 = *a1;
  v6 = 0;
  ucal_setMillis();
  ucal_getLimit();
  ucal_set();
  ucal_set();
  ucal_getLimit();
  ucal_set();
  ucal_getLimit();
  ucal_set();
  ucal_getLimit();
  ucal_set();
  ucal_getLimit();
  ucal_set();
  ucal_set();
  if (v1 <= 8 && ((1 << v1) & 0x188) != 0)
  {
    v3 = ucal_get();
    do
    {
      ucal_getMillis();
      ucal_add();
    }
    while (v3 == ucal_get());
    ucal_setMillis();
  }
  ucal_getMillis();
  v5 = v4 / 1000.0 + -978307200.0;
  _CalendarICU._locked_timeZoneTransitionInterval(at:)(&v5, (uint64_t)v7);
  if ((v7[16] & 1) == 0)
    ucal_setMillis();
}

uint64_t _NSSwiftTimeZone.secondsFromGMT.getter()
{
  uint64_t v0;
  uint64_t v1;
  __darwin_time_t v2;
  uint64_t ObjectType;
  uint64_t v4;
  timespec __tp;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(v0 + OBJC_IVAR____NSSwiftTimeZone_timeZone + 8);
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  swift_unknownObjectRetain();
  clock_gettime(_CLOCK_REALTIME, &__tp);
  *(double *)&v2 = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  ObjectType = swift_getObjectType();
  __tp.tv_sec = v2;
  v4 = (*(uint64_t (**)(timespec *, uint64_t, uint64_t))(v1 + 40))(&__tp, ObjectType, v1);
  swift_unknownObjectRelease();
  return v4;
}

uint64_t protocol witness for _TimeZoneProtocol.secondsFromGMT(for:) in conformance _TimeZoneICU()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 24));
  partial apply for closure #1 in _TimeZoneICU.secondsFromGMT(for:)((uint64_t *)(v1 + 16), &v3);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 24));
  swift_release();
  return v3;
}

uint64_t partial apply for closure #1 in _TimeZoneICU.secondsFromGMT(for:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in _TimeZoneICU.secondsFromGMT(for:)(a1, *(_QWORD *)(v2 + 24), a2);
}

uint64_t closure #1 in _TimeZoneICU.secondsFromGMT(for:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int v4;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (*a1)
  {
LABEL_2:
    ucal_setMillis();
    v4 = ucal_get();
    result = ucal_get();
    if (!__OFADD__(v4, (_DWORD)result))
    {
      *a3 = (v4 + (int)result) / 1000;
      return result;
    }
LABEL_10:
    __break(1u);
  }
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  if (specialized _copyCollectionToContiguousArray<A>(_:)(v7, v8)[2] >> 31)
  {
    __break(1u);
    goto LABEL_10;
  }
  v9 = ucal_open();
  swift_release();
  result = swift_bridgeObjectRelease();
  if (v9)
  {
    *a1 = v9;
    goto LABEL_2;
  }
  *a3 = 0;
  return result;
}

Foundation::Date __swiftcall _NSSwiftCalendar.startOfDay(for:)(Foundation::Date a1)
{
  uint64_t v1;
  uint64_t v2;
  Foundation::Date result;
  Foundation::Date fora[2];

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____NSSwiftCalendar__lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 32));
  *(_OWORD *)&fora[0]._time = *(_OWORD *)(v2 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 32));
  Calendar.startOfDay(for:)(fora[0]);
  swift_unknownObjectRelease();
  return result;
}

Foundation::Date __swiftcall Calendar.startOfDay(for:)(Foundation::Date a1)
{
  double *v1;
  double *v2;
  uint64_t v3;
  double *v4;
  double v5;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t ObjectType;
  Foundation::Date result;
  double v11;
  char v12;
  Swift::Double v13[2];
  char v14;

  v4 = v2;
  v5 = *v1;
  v6 = *(_QWORD *)(v3 + 8);
  v12 = 3;
  v7 = 1.59271755e13;
  if (v5 <= 1.59271755e13)
    v7 = v5;
  v8 = fmax(v7, -2.11845067e11);
  ObjectType = swift_getObjectType();
  v11 = v8;
  (*(void (**)(Swift::Double *__return_ptr, char *, double *, uint64_t, uint64_t))(v6 + 160))(v13, &v12, &v11, ObjectType, v6);
  if ((v14 & 1) != 0)
    result._time = v5 + -1.0;
  else
    result._time = v13[0];
  *v4 = result._time;
  return result;
}

uint64_t closure #1 in TimeZoneCache.current.getter@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  TimeZoneCache.State.check()();
  result = *a1;
  if (*a1)
  {
    v5 = a1[1];
    *a2 = result;
    a2[1] = v5;
    return swift_unknownObjectRetain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

id @objc static NSTimeZone._default()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  id v3;

  if (one-time initialization token for cache != -1)
    swift_once();
  v0 = static TimeZoneCache.cache + 16;
  v1 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in TimeZoneCache.bridgedDefault.getter(v0, &v3);
  os_unfair_lock_unlock(v1);
  swift_release_n();
  return v3;
}

void closure #1 in TimeZoneCache.bridgedDefault.getter(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  id v5;
  void *v6;
  id v7;

  TimeZoneCache.State.check()();
  v4 = *(void **)(a1 + 96);
  if (v4)
  {
    v5 = *(id *)(a1 + 96);
LABEL_5:
    *a2 = v5;
    v7 = v4;
    return;
  }
  v6 = *(void **)(a1 + 80);
  if (v6)
  {
    v5 = v6;
    v4 = 0;
    goto LABEL_5;
  }
  __break(1u);
}

Swift::Void __swiftcall TimeZoneCache.State.check()()
{
  uint64_t v0;
  uint64_t NoteCount;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t MidnightNoteCount;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  objc_class *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  id v13;
  objc_super v14;
  _QWORD v15[2];

  NoteCount = _CFLocaleGetNoteCount();
  v2 = _CFTimeZoneGetNoteCount();
  v3 = __OFADD__(NoteCount, v2);
  v4 = NoteCount + v2;
  if (v3)
  {
    __break(1u);
    goto LABEL_8;
  }
  MidnightNoteCount = _CFCalendarGetMidnightNoteCount();
  v6 = v4 + MidnightNoteCount;
  if (__OFADD__(v4, MidnightNoteCount))
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v6 == *(_QWORD *)(v0 + 56))
    return;
  TimeZoneCache.State.findCurrentTimeZone()((int64_t)v15);
  v7 = v15[0];
  v8 = v15[1];
  swift_unknownObjectRelease();
  *(_QWORD *)v0 = v7;
  *(_QWORD *)(v0 + 8) = v8;
  *(_QWORD *)(v0 + 56) = v6;
  v9 = (objc_class *)type metadata accessor for _NSSwiftTimeZone();
  v10 = (char *)objc_allocWithZone(v9);
  v11 = &v10[OBJC_IVAR____NSSwiftTimeZone_timeZone];
  *(_QWORD *)v11 = v7;
  *((_QWORD *)v11 + 1) = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<_NSSwiftTimeZone.State>._Buffer);
  v12 = swift_allocObject();
  *(_DWORD *)(v12 + 32) = 0;
  *(_OWORD *)(v12 + 16) = xmmword_1820E9CE0;
  *(_QWORD *)&v10[OBJC_IVAR____NSSwiftTimeZone_lock] = v12;
  v14.receiver = v10;
  v14.super_class = v9;
  swift_unknownObjectRetain();
  v13 = objc_msgSendSuper2(&v14, sel_init);

  *(_QWORD *)(v0 + 80) = v13;
  if (!*MEMORY[0x1E0C9B370])
  {
LABEL_9:
    __break(1u);
    return;
  }
  _CFNotificationCenterInitializeDependentNotificationIfNecessary();
}

uint64_t protocol witness for _TimeZoneProtocol.secondsFromGMT(for:) in conformance _TimeZoneGMTICU()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

unint64_t lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component;
  if (!lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Component, &type metadata for Calendar.Component);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component;
  if (!lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Component, &type metadata for Calendar.Component);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component);
  }
  return result;
}

void *TimeZoneCache.State.findCurrentTimeZone()@<X0>(int64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  id v4;
  id v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  __int128 v29;
  _OWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  _OWORD *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *result;
  id v74;
  _QWORD *v75;
  id v76;
  uint64_t v77;
  char *v78;
  _QWORD *v79;
  uint64_t v80;
  int64_t v81;
  _QWORD *v82;
  uint64_t v83;
  _OWORD *v84;
  _OWORD *v85;
  __int128 v86;
  uint64_t *v87;
  uint64_t v88;
  char v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _OWORD *v100;
  _OWORD *v101;
  char *v102;
  uint64_t v103;
  char *v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  char v126;
  uint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  ssize_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  char v141;
  uint64_t *v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char v149;
  unint64_t v150;
  unint64_t v151;
  char v152;
  char v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  char v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char isUniquelyReferenced_nonNull_native;
  char v175;
  uint64_t v176;
  _BOOL8 v177;
  uint64_t v178;
  unint64_t v179;
  char v180;
  int64_t v181;
  _QWORD *v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  int64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  int64_t v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  __int128 v196;
  int64_t v197;
  unint64_t v198;
  int64_t v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  int64_t v204;
  int64_t v205;
  int64_t v206;
  _QWORD *v207;
  __int128 v208;
  _OWORD v209[2];

  v2 = v1;
  v4 = (id)objc_opt_self();
  v5 = objc_msgSend(v4, sel_processInfo);
  v6 = objc_msgSend(v5, sel_environment);

  v7 = MEMORY[0x1E0DEE9B8];
  v207 = v2;
  if (!v6)
  {
    v8 = MEMORY[0x1E0DEA968];
    v9 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    if (!*(_QWORD *)(MEMORY[0x1E0DEE9E0] + 16))
      goto LABEL_48;
LABEL_45:
    v64 = specialized __RawDictionaryStorage.find<A>(_:)(0x454C49465A54, 0xE600000000000000);
    if ((v65 & 1) != 0)
    {
      v66 = (uint64_t *)(v9[7] + 16 * v64);
      v67 = v7;
      v68 = *v66;
      v69 = v66[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v70 = TimeZoneCache.State.fixed(_:)(v68, v69);
      v72 = v71;
      v7 = v67;
      result = (void *)swift_bridgeObjectRelease();
      if (v70)
      {
LABEL_109:
        *(_QWORD *)a1 = v70;
        *(_QWORD *)(a1 + 8) = v72;
        return result;
      }
      goto LABEL_49;
    }
LABEL_48:
    swift_bridgeObjectRelease();
LABEL_49:
    v74 = objc_msgSend(v4, sel_processInfo);
    v4 = objc_msgSend(v74, sel_environment);

    if (!v4)
    {
      v75 = (_QWORD *)MEMORY[0x1E0DEE9E0];
      if (!*(_QWORD *)(MEMORY[0x1E0DEE9E0] + 16))
        goto LABEL_96;
LABEL_92:
      v125 = specialized __RawDictionaryStorage.find<A>(_:)(23124, 0xE200000000000000);
      if ((v126 & 1) != 0)
      {
        v127 = (uint64_t *)(v75[7] + 16 * v125);
        v129 = *v127;
        v128 = v127[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v130 = v2[9];
        if (v130)
        {
          if (!*(_QWORD *)(v130 + 16))
            goto LABEL_108;
        }
        else
        {
          v130 = v2[15];
          v2[9] = v130;
          swift_bridgeObjectRetain();
          if (!*(_QWORD *)(v130 + 16))
            goto LABEL_108;
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v140 = specialized __RawDictionaryStorage.find<A>(_:)(v129, v128);
        if ((v141 & 1) != 0)
        {
          v142 = (uint64_t *)(*(_QWORD *)(v130 + 56) + 16 * v140);
          v143 = *v142;
          v144 = v142[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v145 = TimeZoneCache.State.fixed(_:)(v143, v144);
          v147 = v146;
          swift_bridgeObjectRelease();
          if (v145)
          {
            result = (void *)swift_bridgeObjectRelease();
            *(_QWORD *)a1 = v145;
            *(_QWORD *)(a1 + 8) = v147;
            return result;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
LABEL_108:
        v70 = TimeZoneCache.State.fixed(_:)(v129, v128);
        v72 = v148;
        result = (void *)swift_bridgeObjectRelease();
        if (v70)
          goto LABEL_109;
        goto LABEL_97;
      }
LABEL_96:
      swift_bridgeObjectRelease();
LABEL_97:
      v4 = (id)swift_slowAlloc();
      bzero(v4, 0x401uLL);
      v131 = readlink("/var/db/timezone/localtime", (char *)v4, 0x400uLL);
      if (v131 < 0)
        goto LABEL_117;
      *((_BYTE *)v4 + v131) = 0;
      v132 = MEMORY[0x186DA4658](v4);
      if (!v133)
        goto LABEL_117;
      v134 = v132;
      v135 = v133;
      v136 = 0xD000000000000019;
      v137 = specialized BidirectionalCollection.last.getter(0xD000000000000019, 0x800000018230C840);
      if (!v138)
        goto LABEL_112;
      if (v137 == 47 && v138 == 0xE100000000000000)
      {
        swift_bridgeObjectRelease();
        v139 = 0x800000018230C840;
        goto LABEL_113;
      }
      v149 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v149 & 1) != 0)
      {
        v139 = 0x800000018230C840;
      }
      else
      {
LABEL_112:
        v136 = 0xD00000000000001ALL;
        v139 = 0x800000018230A990;
      }
LABEL_113:
      specialized BidirectionalCollection._range<A>(of:anchored:backwards:)(v136, v139, 0, 0, v134, v135);
      v151 = v150;
      v153 = v152;
      swift_bridgeObjectRelease();
      if ((v153 & 1) != 0)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v154 = specialized Collection.suffix(from:)(v151, v134, v135);
        v156 = v155;
        v158 = v157;
        v160 = v159;
        swift_bridgeObjectRelease();
        v161 = MEMORY[0x186DA4634](v154, v156, v158, v160);
        v163 = v162;
        swift_bridgeObjectRelease();
        v164 = TimeZoneCache.State.fixed(_:)(v161, v163);
        v166 = v165;
        swift_bridgeObjectRelease();
        if (v164)
        {
          *(_QWORD *)a1 = v164;
          *(_QWORD *)(a1 + 8) = v166;
          return (void *)MEMORY[0x186DA9E78](v4, -1, -1);
        }
      }
LABEL_117:
      v167 = v2[6];
      if (*(_QWORD *)(v167 + 16))
      {
        v168 = specialized __RawDictionaryStorage.find<A>(_:)(0);
        if ((v169 & 1) != 0)
        {
          v208 = *(_OWORD *)(*(_QWORD *)(v167 + 56) + 16 * v168);
          swift_unknownObjectRetain();
          v170 = v208;
LABEL_172:
          *(_OWORD *)a1 = v170;
          return (void *)MEMORY[0x186DA9E78](v4, -1, -1);
        }
      }
      type metadata accessor for _TimeZoneGMTICU();
      v6 = (_QWORD *)swift_allocObject();
      v171 = specialized static TimeZone.nameForSecondsFromGMT(_:)(0);
      if (!v172)
      {
LABEL_180:
        result = (void *)swift_deallocPartialClassInstance();
        __break(1u);
        goto LABEL_181;
      }
      v16 = v171;
      v173 = v172;
      v15 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type _TimeZoneGMTICU and conformance _TimeZoneGMTICU, (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneGMTICU, (uint64_t)&protocol conformance descriptor for _TimeZoneGMTICU);
      v6[3] = v16;
      v6[4] = v173;
      v6[2] = 0;
      swift_retain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v209[0] = v2[6];
      v20 = *(_QWORD *)&v209[0];
      v2[6] = 0x8000000000000000;
      v23 = specialized __RawDictionaryStorage.find<A>(_:)(0);
      v176 = *(_QWORD *)(v20 + 16);
      v177 = (v175 & 1) == 0;
      v25 = __OFADD__(v176, v177);
      v178 = v176 + v177;
      if (v25)
        goto LABEL_131;
      LOBYTE(v16) = v175;
      if (*(_QWORD *)(v20 + 24) < v178)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v178, isUniquelyReferenced_nonNull_native);
        v179 = *(_QWORD *)&v209[0];
        v23 = specialized __RawDictionaryStorage.find<A>(_:)(0);
        if ((v16 & 1) == (v180 & 1))
          goto LABEL_127;
        v23 = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
      }
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        goto LABEL_134;
      v179 = v20;
LABEL_127:
      if ((v16 & 1) == 0)
      {
LABEL_169:
        *(_QWORD *)(v179 + 8 * (v23 >> 6) + 64) |= 1 << v23;
        *(_QWORD *)(*(_QWORD *)(v179 + 48) + 8 * v23) = 0;
        v200 = (_QWORD *)(*(_QWORD *)(v179 + 56) + 16 * v23);
        *v200 = v6;
        v200[1] = v15;
        v201 = *(_QWORD *)(v179 + 16);
        v25 = __OFADD__(v201, 1);
        v202 = v201 + 1;
        if (!v25)
        {
          *(_QWORD *)(v179 + 16) = v202;
          goto LABEL_171;
        }
        __break(1u);
        goto LABEL_175;
      }
LABEL_128:
      v181 = a1;
      v182 = (_QWORD *)(*(_QWORD *)(v179 + 56) + 16 * v23);
      swift_unknownObjectRelease();
      *v182 = v6;
      v182[1] = v15;
      a1 = v181;
LABEL_171:
      v2[6] = v179;
      swift_bridgeObjectRelease();
      *(_QWORD *)&v170 = v6;
      *((_QWORD *)&v170 + 1) = v15;
      goto LABEL_172;
    }
    if (v7 + 8 == v8)
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRetain();
      v75 = (_QWORD *)static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
      if (!v75)
      {
        v76 = objc_msgSend(v4, sel_count);
        v77 = v7;
        if (v76)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
          v75 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
        }
        else
        {
          v75 = (_QWORD *)MEMORY[0x1E0DEE9E0];
        }
        v79 = (_QWORD *)v75[6];
        v80 = v75[7];
        swift_retain();
        v81 = (int64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v79, v80, v4, (uint64_t)v76);
        if (v81 < 0 || (uint64_t)v76 < v81)
          goto LABEL_177;
        v75[2] = v81;
        if (v81)
        {
          v205 = a1;
          a1 = v81 - 1;
          v82 = v75 + 8;
          v6 = (_QWORD *)MEMORY[0x1E0DEA968];
          v15 = v77 + 8;
          while (1)
          {
            while (1)
            {
              if (((*(_QWORD *)((char *)v82 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8)) >> a1) & 1) != 0)
                goto LABEL_65;
              v87 = (uint64_t *)(v75[6] + 16 * a1);
              v88 = *v87;
              v20 = v87[1];
              swift_bridgeObjectRetain();
              v16 = specialized __RawDictionaryStorage.find<A>(_:)(v88, v20);
              v90 = v89;
              swift_bridgeObjectRelease();
              if ((v90 & 1) == 0)
                break;
              swift_arrayDestroy();
              v23 = swift_arrayDestroy();
              v91 = v75[2];
              v25 = __OFSUB__(v91, 1);
              v92 = v91 - 1;
              if (v25)
                goto LABEL_132;
              v75[2] = v92;
LABEL_65:
              if (--a1 < 0)
                goto LABEL_88;
            }
            *(_QWORD *)((char *)v82 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
            if (a1 < (uint64_t)v16)
            {
              *(_OWORD *)(v75[6] + 16 * v16) = *(_OWORD *)(v75[6] + 16 * a1);
              v83 = v75[7];
              v84 = (_OWORD *)(v83 + 32 * v16);
              v85 = (_OWORD *)(v83 + 32 * a1);
              v86 = v85[1];
              *v84 = *v85;
              v84[1] = v86;
              goto LABEL_65;
            }
            if (v16 == a1)
              goto LABEL_65;
            v93 = v75[6];
            v94 = (uint64_t *)(v93 + 16 * v16);
            v95 = (uint64_t *)(v93 + 16 * a1);
            v96 = *v94;
            v97 = v94[1];
            v98 = v95[1];
            *v94 = *v95;
            v94[1] = v98;
            *v95 = v96;
            v95[1] = v97;
            v99 = v75[7];
            v100 = (_OWORD *)(v99 + 32 * v16);
            v101 = (_OWORD *)(v99 + 32 * a1);
            outlined init with take of Any(v100, v209);
            outlined init with take of Any(v101, v100);
            outlined init with take of Any(v209, v101);
            if (a1 < 0)
              goto LABEL_88;
          }
        }
        v2 = v207;
LABEL_90:
        swift_release();
      }
LABEL_91:

      if (!v75[2])
        goto LABEL_96;
      goto LABEL_92;
    }
    swift_unknownObjectRetain();
    v75 = (_QWORD *)static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (v75)
      goto LABEL_91;
    v78 = (char *)objc_msgSend(v4, sel_count);
    if (v78)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
      v75 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      v75 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    }
    v102 = (char *)v75[6];
    v103 = v75[7];
    swift_retain();
    v104 = specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v102, v103, v4, (uint64_t)v78);
    if (((unint64_t)v104 & 0x8000000000000000) != 0 || (uint64_t)v78 < (uint64_t)v104)
    {
LABEL_178:
      __break(1u);
LABEL_179:
      __break(1u);
      goto LABEL_180;
    }
    v75[2] = v104;
    if (!v104)
      goto LABEL_90;
    v205 = a1;
    a1 = (int64_t)(v104 - 1);
    v105 = v75 + 8;
    v6 = (_QWORD *)MEMORY[0x1E0DEA968];
    while (1)
    {
      while (1)
      {
        if (((*(_QWORD *)((char *)v105 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8)) >> a1) & 1) != 0)
          goto LABEL_80;
        v107 = (uint64_t *)(v75[6] + 16 * a1);
        v108 = *v107;
        v16 = v107[1];
        swift_bridgeObjectRetain();
        v109 = specialized __RawDictionaryStorage.find<A>(_:)(v108, v16);
        v20 = v110;
        swift_bridgeObjectRelease();
        if ((v20 & 1) == 0)
          break;
        v15 = 16 * a1;
        swift_arrayDestroy();
        v23 = swift_arrayDestroy();
        v111 = v75[2];
        v25 = __OFSUB__(v111, 1);
        v112 = v111 - 1;
        if (v25)
          goto LABEL_133;
        v75[2] = v112;
LABEL_80:
        if (--a1 < 0)
          goto LABEL_88;
      }
      *(_QWORD *)((char *)v105 + ((v109 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v109;
      if (a1 < (uint64_t)v109)
      {
        v106 = 16 * v109;
        *(_OWORD *)(v75[6] + v106) = *(_OWORD *)(v75[6] + 16 * a1);
        *(_OWORD *)(v75[7] + v106) = *(_OWORD *)(v75[7] + 16 * a1);
        goto LABEL_80;
      }
      if (v109 == a1)
        goto LABEL_80;
      v113 = v75[6];
      v114 = (uint64_t *)(v113 + 16 * v109);
      v115 = (uint64_t *)(v113 + 16 * a1);
      v116 = *v114;
      v117 = v114[1];
      v118 = v115[1];
      *v114 = *v115;
      v114[1] = v118;
      *v115 = v116;
      v115[1] = v117;
      v119 = v75[7];
      v120 = (uint64_t *)(v119 + 16 * v109);
      v121 = (uint64_t *)(v119 + 16 * a1);
      v122 = *v120;
      v123 = v120[1];
      v124 = v121[1];
      *v120 = *v121;
      v120[1] = v124;
      *v121 = v122;
      v121[1] = v123;
      if (a1 < 0)
      {
LABEL_88:
        a1 = v205;
        v2 = v207;
        goto LABEL_90;
      }
    }
  }
  v8 = MEMORY[0x1E0DEA968];
  if (MEMORY[0x1E0DEE9B8] + 8 != MEMORY[0x1E0DEA968])
  {
    swift_unknownObjectRetain();
    v9 = (_QWORD *)static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (v9)
      goto LABEL_44;
    v11 = (char *)objc_msgSend(v6, sel_count);
    if (v11)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
      v9 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      v9 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    }
    v204 = a1;
    v40 = (char *)v9[6];
    v41 = v9[7];
    swift_retain();
    v42 = specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v40, v41, v6, (uint64_t)v11);
    if (((unint64_t)v42 & 0x8000000000000000) != 0 || (uint64_t)v11 < (uint64_t)v42)
      goto LABEL_176;
    v9[2] = v42;
    if (!v42)
    {
LABEL_42:
      swift_release();
      v2 = v207;
      goto LABEL_43;
    }
    a1 = (int64_t)(v42 - 1);
    v43 = v9 + 8;
    v15 = MEMORY[0x1E0DEA968];
    while (1)
    {
      if (((*(_QWORD *)((char *)v43 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8)) >> a1) & 1) != 0)
        goto LABEL_34;
      v45 = (uint64_t *)(v9[6] + 16 * a1);
      v46 = *v45;
      v20 = v45[1];
      swift_bridgeObjectRetain();
      v47 = specialized __RawDictionaryStorage.find<A>(_:)(v46, v20);
      v49 = v48;
      swift_bridgeObjectRelease();
      if ((v49 & 1) != 0)
      {
        LOBYTE(v16) = 16 * a1;
        swift_arrayDestroy();
        v23 = swift_arrayDestroy();
        v50 = v9[2];
        v25 = __OFSUB__(v50, 1);
        v51 = v50 - 1;
        if (v25)
          goto LABEL_130;
        v9[2] = v51;
        goto LABEL_34;
      }
      *(_QWORD *)((char *)v43 + ((v47 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v47;
      if (a1 < (uint64_t)v47)
      {
        v44 = 16 * v47;
        *(_OWORD *)(v9[6] + v44) = *(_OWORD *)(v9[6] + 16 * a1);
        *(_OWORD *)(v9[7] + v44) = *(_OWORD *)(v9[7] + 16 * a1);
LABEL_34:
        if (--a1 < 0)
          goto LABEL_42;
      }
      else
      {
        if (v47 == a1)
          goto LABEL_34;
        v52 = v9[6];
        v53 = (uint64_t *)(v52 + 16 * v47);
        v54 = (uint64_t *)(v52 + 16 * a1);
        v55 = *v53;
        v56 = v53[1];
        v57 = v54[1];
        *v53 = *v54;
        v53[1] = v57;
        *v54 = v55;
        v54[1] = v56;
        v58 = v9[7];
        v59 = (uint64_t *)(v58 + 16 * v47);
        v60 = (uint64_t *)(v58 + 16 * a1);
        v61 = *v59;
        v62 = v59[1];
        v63 = v60[1];
        *v59 = *v60;
        v59[1] = v63;
        *v60 = v61;
        v60[1] = v62;
        if (a1 < 0)
          goto LABEL_42;
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRetain();
  v9 = (_QWORD *)static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v9)
    goto LABEL_44;
  v10 = objc_msgSend(v6, sel_count);
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v9 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v9 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  v204 = a1;
  v12 = (_QWORD *)v9[6];
  v13 = v9[7];
  swift_retain();
  v14 = (int64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v12, v13, v6, (uint64_t)v10);
  if (v14 < 0 || (uint64_t)v10 < v14)
  {
LABEL_175:
    __break(1u);
LABEL_176:
    __break(1u);
LABEL_177:
    __break(1u);
    goto LABEL_178;
  }
  v9[2] = v14;
  if (!v14)
  {
LABEL_27:
    swift_release();
LABEL_43:
    a1 = v204;
    v7 = MEMORY[0x1E0DEE9B8];
LABEL_44:

    if (!v9[2])
      goto LABEL_48;
    goto LABEL_45;
  }
  v15 = v14 - 1;
  a1 = (int64_t)(v9 + 8);
  LOBYTE(v16) = MEMORY[0x1E0DEE9B8] + 8;
  while (1)
  {
    while (1)
    {
      if (((*(_QWORD *)(a1 + (((unint64_t)v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
        goto LABEL_16;
      v17 = (uint64_t *)(v9[6] + 16 * v15);
      v18 = *v17;
      v19 = v17[1];
      swift_bridgeObjectRetain();
      v20 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19);
      v22 = v21;
      swift_bridgeObjectRelease();
      if ((v22 & 1) != 0)
        break;
      *(_QWORD *)(a1 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      if (v15 < (uint64_t)v20)
      {
        *(_OWORD *)(v9[6] + 16 * v20) = *(_OWORD *)(v9[6] + 16 * v15);
        v27 = v9[7];
        v28 = (_OWORD *)(v27 + 32 * v15);
        v29 = v28[1];
        v30 = (_OWORD *)(v27 + 32 * v20);
        *v30 = *v28;
        v30[1] = v29;
        goto LABEL_23;
      }
      v2 = v207;
      if (v20 == v15)
      {
LABEL_16:
        if (--v15 < 0)
          goto LABEL_27;
      }
      else
      {
        v31 = v9[6];
        v32 = (uint64_t *)(v31 + 16 * v20);
        v33 = (uint64_t *)(v31 + 16 * v15);
        v34 = *v32;
        v35 = v32[1];
        v36 = v33[1];
        *v32 = *v33;
        v32[1] = v36;
        *v33 = v34;
        v33[1] = v35;
        v37 = v9[7];
        v38 = (_OWORD *)(v37 + 32 * v20);
        v39 = (_OWORD *)(v37 + 32 * v15);
        outlined init with take of Any(v38, v209);
        outlined init with take of Any(v39, v38);
        outlined init with take of Any(v209, v39);
        if (v15 < 0)
          goto LABEL_27;
      }
    }
    swift_arrayDestroy();
    v23 = swift_arrayDestroy();
    v24 = v9[2];
    v25 = __OFSUB__(v24, 1);
    v26 = v24 - 1;
    if (v25)
      break;
    v9[2] = v26;
LABEL_23:
    --v15;
    v2 = v207;
    if (v15 < 0)
      goto LABEL_27;
  }
  __break(1u);
LABEL_130:
  __break(1u);
LABEL_131:
  __break(1u);
LABEL_132:
  __break(1u);
LABEL_133:
  __break(1u);
LABEL_134:
  v203 = v23;
  v206 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, _TimeZoneProtocol>);
  v183 = static _DictionaryStorage.copy(original:)();
  v179 = v183;
  if (!*(_QWORD *)(v20 + 16))
  {
LABEL_168:
    swift_bridgeObjectRelease();
    v23 = v203;
    a1 = v206;
    v2 = v207;
    if ((v16 & 1) == 0)
      goto LABEL_169;
    goto LABEL_128;
  }
  result = (void *)(v183 + 64);
  v184 = v20 + 64;
  v185 = (unint64_t)((1 << *(_BYTE *)(v179 + 32)) + 63) >> 6;
  if (v179 != v20 || (unint64_t)result >= v184 + 8 * v185)
    result = memmove(result, (const void *)(v20 + 64), 8 * v185);
  v186 = 0;
  *(_QWORD *)(v179 + 16) = *(_QWORD *)(v20 + 16);
  v187 = 1 << *(_BYTE *)(v20 + 32);
  v188 = -1;
  if (v187 < 64)
    v188 = ~(-1 << v187);
  v189 = v188 & *(_QWORD *)(v20 + 64);
  v190 = (unint64_t)(v187 + 63) >> 6;
  while (2)
  {
    if (v189)
    {
      v191 = __clz(__rbit64(v189));
      v189 &= v189 - 1;
      v192 = v191 | (v186 << 6);
LABEL_142:
      v193 = 8 * v192;
      v194 = *(_QWORD *)(*(_QWORD *)(v20 + 48) + 8 * v192);
      v195 = 16 * v192;
      v196 = *(_OWORD *)(*(_QWORD *)(v20 + 56) + v195);
      *(_QWORD *)(*(_QWORD *)(v179 + 48) + v193) = v194;
      *(_OWORD *)(*(_QWORD *)(v179 + 56) + v195) = v196;
      result = (void *)swift_unknownObjectRetain();
      continue;
    }
    break;
  }
  v197 = v186 + 1;
  if (__OFADD__(v186, 1))
    goto LABEL_179;
  if (v197 >= v190)
    goto LABEL_168;
  v198 = *(_QWORD *)(v184 + 8 * v197);
  ++v186;
  if (v198)
    goto LABEL_167;
  v186 = v197 + 1;
  if (v197 + 1 >= v190)
    goto LABEL_168;
  v198 = *(_QWORD *)(v184 + 8 * v186);
  if (v198)
    goto LABEL_167;
  v186 = v197 + 2;
  if (v197 + 2 >= v190)
    goto LABEL_168;
  v198 = *(_QWORD *)(v184 + 8 * v186);
  if (v198)
    goto LABEL_167;
  v186 = v197 + 3;
  if (v197 + 3 >= v190)
    goto LABEL_168;
  v198 = *(_QWORD *)(v184 + 8 * v186);
  if (v198)
    goto LABEL_167;
  v186 = v197 + 4;
  if (v197 + 4 >= v190)
    goto LABEL_168;
  v198 = *(_QWORD *)(v184 + 8 * v186);
  if (v198)
    goto LABEL_167;
  v186 = v197 + 5;
  if (v197 + 5 >= v190)
    goto LABEL_168;
  v198 = *(_QWORD *)(v184 + 8 * v186);
  if (v198)
    goto LABEL_167;
  v186 = v197 + 6;
  if (v197 + 6 >= v190)
    goto LABEL_168;
  v198 = *(_QWORD *)(v184 + 8 * v186);
  if (v198)
    goto LABEL_167;
  v186 = v197 + 7;
  if (v197 + 7 >= v190)
    goto LABEL_168;
  v198 = *(_QWORD *)(v184 + 8 * v186);
  if (v198)
  {
LABEL_167:
    v189 = (v198 - 1) & v198;
    v192 = __clz(__rbit64(v198)) + (v186 << 6);
    goto LABEL_142;
  }
  v199 = v197 + 8;
  if (v199 >= v190)
    goto LABEL_168;
  v198 = *(_QWORD *)(v184 + 8 * v199);
  if (v198)
  {
    v186 = v199;
    goto LABEL_167;
  }
  while (1)
  {
    v186 = v199 + 1;
    if (__OFADD__(v199, 1))
      break;
    if (v186 >= v190)
      goto LABEL_168;
    v198 = *(_QWORD *)(v184 + 8 * v186);
    ++v199;
    if (v198)
      goto LABEL_167;
  }
LABEL_181:
  __break(1u);
  return result;
}

unint64_t specialized Collection.suffix(from:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;

  v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v3 = a2 & 0xFFFFFFFFFFFFLL;
  if (4 * v3 >= result >> 14)
    return String.subscript.getter();
  __break(1u);
  return result;
}

unint64_t specialized BidirectionalCollection._range<A>(of:anchored:backwards:)(uint64_t a1, unint64_t a2, char a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t result;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;

  v10 = HIBYTE(a6) & 0xF;
  v11 = a5 & 0xFFFFFFFFFFFFLL;
  if ((a4 & 1) == 0)
  {
    if ((a3 & 1) != 0)
    {
      v14 = 15;
    }
    else
    {
      if ((a6 & 0x2000000000000000) != 0)
        v17 = HIBYTE(a6) & 0xF;
      else
        v17 = a5 & 0xFFFFFFFFFFFFLL;
      v18 = 7;
      if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0)
        v18 = 11;
      v14 = specialized BidirectionalCollection._index<A>(_:backwardsOffsetByCountOf:)(v18 | (v17 << 16), a1, a2);
      if ((v19 & 1) != 0)
        return 0;
    }
    v16 = 15;
    goto LABEL_20;
  }
  if ((a6 & 0x2000000000000000) != 0)
    v12 = HIBYTE(a6) & 0xF;
  else
    v12 = a5 & 0xFFFFFFFFFFFFLL;
  v13 = 7;
  if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0)
    v13 = 11;
  v14 = specialized BidirectionalCollection._index<A>(_:backwardsOffsetByCountOf:)(v13 | (v12 << 16), a1, a2);
  if ((v15 & 1) != 0)
    return 0;
  v16 = v14;
  if ((a3 & 1) == 0)
    v14 = 15;
LABEL_20:
  v31 = v14 >> 14;
  if ((a6 & 0x2000000000000000) != 0)
    v20 = v10;
  else
    v20 = v11;
  v21 = 4 * v20;
  v22 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v22 = a1 & 0xFFFFFFFFFFFFLL;
  v32 = v22;
  v34 = v21;
  v35 = 4 * v22;
  while (1)
  {
    v23 = 0;
    v33 = v16;
    if (v32)
    {
      v24 = v16;
      if (v16 >> 14 < v34)
      {
        v23 = 0;
        v24 = v16;
        do
        {
          v25 = String.subscript.getter();
          v27 = v26;
          if (v25 == String.subscript.getter() && v27 == v28)
          {
            swift_bridgeObjectRelease_n();
          }
          else
          {
            v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v29 & 1) == 0)
              break;
          }
          v24 = String.index(after:)();
          v23 = (unint64_t)String.index(after:)() >> 14;
        }
        while (v23 < v35 && v24 >> 14 < v34);
      }
    }
    else
    {
      v24 = v16;
    }
    if (v23 == v35)
      break;
    if (v31 == v33 >> 14)
      return 0;
    v16 = String.index(_:offsetBy:)();
  }
  result = v33;
  if (v24 >> 14 < v33 >> 14)
    __break(1u);
  return result;
}

unint64_t specialized BidirectionalCollection._index<A>(_:backwardsOffsetByCountOf:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = a1;
  v4 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v4 = a2 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    if (a1 >= 0x4000)
    {
      while (1)
      {
        v5 = String.index(before:)();
        v6 = String.index(before:)();
        v3 = v6;
        if (v5 < 0x4000)
          break;
        if (!(v6 >> 14))
          return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance [A](void *a1, uint64_t *a2, uint64_t a3)
{
  return static Array._forceBridgeFromObjectiveC(_:result:)(a1, a2, *(_QWORD *)(a3 + 16));
}

ValueMetadata *type metadata accessor for JSONDecoder.NonConformingFloatDecodingStrategy()
{
  return &type metadata for JSONDecoder.NonConformingFloatDecodingStrategy;
}

ValueMetadata *type metadata accessor for JSONDecoder.DataDecodingStrategy()
{
  return &type metadata for JSONDecoder.DataDecodingStrategy;
}

double static Date.now.getter@<D0>(double *a1@<X8>)
{
  double result;
  timespec __tp;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  result = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  *a1 = result;
  return result;
}

uint64_t static String._copying(_:)()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v0 = String.subscript.getter();
  v4 = static String._copying(_:)(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t static String._copying(_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  if ((a4 & 0x1000000000000000) != 0)
  {
    v9 = specialized Collection.count.getter(a1, a2, a3, a4);
    if (v9)
    {
      v10 = v9;
      v11 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v9, 0);
      v12 = specialized Sequence._copySequenceContents(initializing:)((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
        goto LABEL_9;
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    v13 = MEMORY[0x186DA46D0](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
LABEL_12:
        JUMPOUT(0x186DA46D0);
LABEL_9:
      _StringObject.sharedUTF8.getter();
      goto LABEL_12;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x186DA46D0]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

_QWORD *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  int64_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt16>);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 31;
  v4[2] = a1;
  v4[3] = v6 & 0xFFFFFFFFFFFFFFFELL;
  return v4;
}

{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Unicode.Scalar>);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 29;
  v4[2] = a1;
  v4[3] = 2 * (v6 >> 2);
  return v4;
}

unint64_t specialized Collection.count.getter(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)();
  }
  __break(1u);
  return result;
}

unint64_t specialized Sequence._copySequenceContents(initializing:)(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = _StringObject.sharedUTF8.getter();
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = String.UTF8View._foreignIndex(after:)();
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

Swift::Void __swiftcall CharacterSet.insert(charactersIn:)(Swift::String charactersIn)
{
  CharacterSet.insert(charactersIn:)(charactersIn._countAndFlagsBits, (uint64_t)charactersIn._object, (void (*)(void))MEMORY[0x1E0C982A8]);
}

uint64_t NSDictionary.Iterator.__deallocating_deinit()
{
  _OWORD *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[12];
  _OWORD v9[2];

  v1 = v0[12];
  v8[10] = v0[11];
  v8[11] = v1;
  v9[0] = v0[13];
  *(_OWORD *)((char *)v9 + 9) = *(_OWORD *)((char *)v0 + 217);
  v2 = v0[8];
  v8[6] = v0[7];
  v8[7] = v2;
  v3 = v0[10];
  v8[8] = v0[9];
  v8[9] = v3;
  v4 = v0[4];
  v8[2] = v0[3];
  v8[3] = v4;
  v5 = v0[6];
  v8[4] = v0[5];
  v8[5] = v5;
  v6 = v0[2];
  v8[0] = v0[1];
  v8[1] = v6;
  outlined release of Locale((uint64_t)v8);
  return swift_deallocClassInstance();
}

uint64_t __delayedPerformCleanup(id *a1)
{
  _CFAutoreleasePoolPush();

  free(a1);
  return _CFAutoreleasePoolPop();
}

uint64_t URLComponents.init(string:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _OWORD v8[8];
  _OWORD v9[2];
  _BYTE v10[160];
  _OWORD v11[8];
  _OWORD v12[2];

  swift_bridgeObjectRetain();
  specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(a1, a2, 1, (uint64_t)v10);
  outlined init with take of LocalePreferences?((uint64_t)v10, (uint64_t)v11, &demangling cache variable for type metadata for URLComponents._URLComponents?);
  if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)v11) == 1)
  {
    _s10Foundation13URLComponentsV01_B0VSgWOi0_((uint64_t)v8);
  }
  else
  {
    v8[6] = v11[6];
    v8[7] = v11[7];
    v9[0] = v12[0];
    *(_OWORD *)((char *)v9 + 10) = *(_OWORD *)((char *)v12 + 10);
    v8[2] = v11[2];
    v8[3] = v11[3];
    v8[4] = v11[4];
    v8[5] = v11[5];
    v8[0] = v11[0];
    v8[1] = v11[1];
    destructiveProjectEnumData for PredicateCodableError(v8, v6);
  }
  return outlined init with take of LocalePreferences?((uint64_t)v8, a3, &demangling cache variable for type metadata for URLComponents?);
}

uint64_t DateComponents.weekOfYear.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 256);
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Int32(uint64_t a1, uint64_t a2, SEL *a3)
{
  unsigned int *v3;

  return objc_msgSend(objc_allocWithZone((Class)NSNumber), *a3, *v3);
}

id UInt32.init(truncating:)(void *a1)
{
  return objc_msgSend(a1, sel_unsignedIntValue);
}

uint64_t TimeZone.debugDescription.getter()
{
  swift_getObjectType();
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _TimeZoneICU()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _TimeZoneGMTICU()
{
  Swift::String v0;
  Swift::String v1;

  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 41;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0x2820544D47;
}

ValueMetadata *type metadata accessor for LocaleCache.State()
{
  return &type metadata for LocaleCache.State;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Int32(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Int32(a1, a2, (SEL *)&selRef_initWithInt_);
}

BOOL valueEqual(const void *a1, const void *a2, uint64_t (*a3)(void))
{
  size_t v6;

  v6 = a3();
  return v6 == ((uint64_t (*)(const void *))a3)(a2) && memcmp(a1, a2, v6) == 0;
}

size_t cStringSize(const char *a1)
{
  return strlen(a1) + 1;
}

NSCompoundPredicate *invertPredicate(void *a1)
{
  void *v2;
  NSCompoundPredicate *v3;

  if ((objc_opt_isKindOfClass() & 1) != 0 && !objc_msgSend(a1, "compoundPredicateType"))
    return (NSCompoundPredicate *)(id)objc_msgSend((id)objc_msgSend(a1, "subpredicates"), "objectAtIndex:", 0);
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", a1, 0);
  v3 = -[NSCompoundPredicate initWithType:subpredicates:]([NSCompoundPredicate alloc], "initWithType:subpredicates:", 0, v2);

  return v3;
}

NSCompoundPredicate *buildORPredicate(void *a1, void *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  NSCompoundPredicate *v7;

  if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend(a1, "compoundPredicateType") == 2)
  {
    if ((objc_opt_isKindOfClass() & 1) == 0 || objc_msgSend(a2, "compoundPredicateType") != 2)
    {
      v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithArray:", objc_msgSend(a1, "subpredicates"));
      objc_msgSend(v5, "addObject:", a2);
      goto LABEL_13;
    }
    v4 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithArray:", objc_msgSend(a1, "subpredicates"));
  }
  else
  {
    if ((objc_opt_isKindOfClass() & 1) == 0 || objc_msgSend(a2, "compoundPredicateType") != 2)
    {
      v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", a1, a2, 0);
      goto LABEL_13;
    }
    v4 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithObjects:", a1, 0);
  }
  v5 = (void *)v4;
  v6 = objc_msgSend(a2, "subpredicates");
  if (v6)
    objc_msgSend(v5, "addObjectsFromArray:", v6);
LABEL_13:
  v7 = -[NSCompoundPredicate initWithType:subpredicates:]([NSCompoundPredicate alloc], "initWithType:subpredicates:", 2, v5);

  return v7;
}

NSCompoundPredicate *buildANDPredicate(void *a1, void *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  NSCompoundPredicate *v7;

  if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend(a1, "compoundPredicateType") == 1)
  {
    if ((objc_opt_isKindOfClass() & 1) == 0 || objc_msgSend(a2, "compoundPredicateType") != 1)
    {
      v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithArray:", objc_msgSend(a1, "subpredicates"));
      objc_msgSend(v5, "addObject:", a2);
      goto LABEL_13;
    }
    v4 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithArray:", objc_msgSend(a1, "subpredicates"));
  }
  else
  {
    if ((objc_opt_isKindOfClass() & 1) == 0 || objc_msgSend(a2, "compoundPredicateType") != 1)
    {
      v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", a1, a2, 0);
      goto LABEL_13;
    }
    v4 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithObjects:", a1, 0);
  }
  v5 = (void *)v4;
  v6 = objc_msgSend(a2, "subpredicates");
  if (v6)
    objc_msgSend(v5, "addObjectsFromArray:", v6);
LABEL_13:
  v7 = -[NSCompoundPredicate initWithType:subpredicates:]([NSCompoundPredicate alloc], "initWithType:subpredicates:", 1, v5);

  return v7;
}

uint64_t ICUNumberFormatterBase.FormatResult.__deallocating_deinit()
{
  unumf_closeResult();
  return swift_deallocClassInstance();
}

uint64_t Array.subscript.readspecialized ()
{
  return swift_release();
}

ValueMetadata *type metadata accessor for AttributeDynamicLookup()
{
  return &type metadata for AttributeDynamicLookup;
}

void destroy for NSURLSession.CancelState.State(uint64_t a1)
{

}

ValueMetadata *type metadata accessor for LocalePreferences()
{
  return &type metadata for LocalePreferences;
}

ValueMetadata *type metadata accessor for _LocaleICU.State()
{
  return &type metadata for _LocaleICU.State;
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __JSONEncoder()
{
  return __JSONEncoder.encode(_:)();
}

{
  return __JSONEncoder.encode(_:)();
}

{
  return __JSONEncoder.encode(_:)();
}

{
  return __JSONEncoder.encode(_:)();
}

{
  return __JSONEncoder.encode(_:)();
}

{
  return __JSONEncoder.encode(_:)();
}

{
  return __JSONEncoder.encode(_:)();
}

{
  return __JSONEncoder.encode(_:)();
}

{
  return __JSONEncoder.encode(_:)();
}

{
  return __JSONEncoder.encode(_:)();
}

{
  return __JSONEncoder.encode(_:)();
}

{
  return __JSONEncoder.encode(_:)();
}

{
  return __JSONEncoder.encode(_:)();
}

uint64_t __JSONEncoder.encode(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0;
  if (((*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))() & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  v2 = dispatch thunk of CustomStringConvertible.description.getter();
  v4 = v3;
  type metadata accessor for JSONReference();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v2;
  *(_QWORD *)(v5 + 24) = v4;
  *(_BYTE *)(v5 + 32) = 1;
  v6 = swift_retain();
  MEMORY[0x186DA4AFC](v6);
  if (*(_QWORD *)((*(_QWORD *)(v1 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v1 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
LABEL_5:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return swift_release();
}

{
  _QWORD *v0;
  uint64_t v1;

  if (((*(uint64_t (**)(void))(*v0 + 208))() & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  type metadata accessor for JSONReference();
  swift_initStaticObject();
  v1 = swift_retain_n();
  MEMORY[0x186DA4AFC](v1);
  if (*(_QWORD *)((v0[2] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v0[2] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
LABEL_5:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0;
  if (((*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))() & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  v2 = dispatch thunk of CustomStringConvertible.description.getter();
  v4 = v3;
  type metadata accessor for JSONReference();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v2;
  *(_QWORD *)(v5 + 24) = v4;
  *(_BYTE *)(v5 + 32) = 1;
  v6 = swift_retain();
  MEMORY[0x186DA4AFC](v6);
  if (*(_QWORD *)((*(_QWORD *)(v1 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v1 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
LABEL_5:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0;
  if (((*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))() & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  v2 = dispatch thunk of CustomStringConvertible.description.getter();
  v4 = v3;
  type metadata accessor for JSONReference();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v2;
  *(_QWORD *)(v5 + 24) = v4;
  *(_BYTE *)(v5 + 32) = 1;
  v6 = swift_retain();
  MEMORY[0x186DA4AFC](v6);
  if (*(_QWORD *)((*(_QWORD *)(v1 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v1 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
LABEL_5:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0;
  if (((*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))() & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  v2 = dispatch thunk of CustomStringConvertible.description.getter();
  v4 = v3;
  type metadata accessor for JSONReference();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v2;
  *(_QWORD *)(v5 + 24) = v4;
  *(_BYTE *)(v5 + 32) = 1;
  v6 = swift_retain();
  MEMORY[0x186DA4AFC](v6);
  if (*(_QWORD *)((*(_QWORD *)(v1 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v1 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
LABEL_5:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0;
  if (((*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))() & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  v2 = dispatch thunk of CustomStringConvertible.description.getter();
  v4 = v3;
  type metadata accessor for JSONReference();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v2;
  *(_QWORD *)(v5 + 24) = v4;
  *(_BYTE *)(v5 + 32) = 1;
  v6 = swift_retain();
  MEMORY[0x186DA4AFC](v6);
  if (*(_QWORD *)((*(_QWORD *)(v1 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v1 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
LABEL_5:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return swift_release();
}

uint64_t _NSReadMutableAttributedStringWithCoder(void *a1, void *a2)
{
  int v4;
  char v5;
  uint64_t v6;
  __CFString *v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  _BOOL8 v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  BOOL v33;
  unsigned __int8 *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v44;
  _OWORD __src[10];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v4 = objc_msgSend(a1, "allowsKeyedCoding");
  v5 = v4;
  if (v4)
    v6 = objc_msgSend(a1, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("NSString"));
  else
    v6 = objc_msgSend(a1, "decodeObject");
  if (v6)
    v7 = (__CFString *)v6;
  else
    v7 = &stru_1E0F56070;
  v8 = -[__CFString length](v7, "length");
  objc_msgSend(a2, "replaceCharactersInRange:withString:", 0, 0, v7);
  if (!v8)
    return 1;
  if ((v5 & 1) == 0)
  {
    v10 = 0;
    v11 = 20;
    v12 = (char *)__src;
    memset(__src, 0, sizeof(__src));
    while (1)
    {
      v44 = 0;
      objc_msgSend(a1, "decodeValuesOfObjCTypes:", "iI", (char *)&v44 + 4, &v44);
      if (SHIDWORD(v44) < 1)
      {
LABEL_30:
        v17 = v10 >= v8;
        if (v12 && v12 != (char *)__src)
          free(v12);
        return v17;
      }
      if (v11 <= HIDWORD(v44))
        break;
      v13 = *(_QWORD *)&v12[8 * HIDWORD(v44)];
      if (!v13)
        goto LABEL_28;
LABEL_29:
      objc_msgSend(a2, "setAttributes:range:", v13, v10, v44);
      v10 += v44;
      if (v10 >= v8)
        goto LABEL_30;
    }
    if (2 * v11 <= (unint64_t)HIDWORD(v44))
      v14 = (HIDWORD(v44) + 1);
    else
      v14 = 2 * v11;
    if (v12 == (char *)__src)
    {
      v16 = (char *)NSAllocateObjectArray(v14);
      v12 = v16;
      if (!v16)
        goto LABEL_30;
      memmove(v16, __src, 8 * v11);
    }
    else
    {
      v15 = NSReallocateObjectArray(v12, v14);
      v12 = v15;
      if (!v15)
        goto LABEL_30;
      bzero(&v15[8 * v11], 8 * (v14 - v11));
    }
    v11 = v14;
LABEL_28:
    v13 = objc_msgSend(a1, "decodeObject");
    *(_QWORD *)&v12[8 * SHIDWORD(v44)] = v13;
    goto LABEL_29;
  }
  if (qword_1ECD09410 != -1)
    dispatch_once(&qword_1ECD09410, &__block_literal_global_194);
  if ((objc_opt_isKindOfClass() & 1) != 0 && (objc_msgSend(a1, "_strictSecureDecodingEnabled") & 1) != 0)
    v9 = &qword_1ECD09400;
  else
    v9 = &qword_1ECD09408;
  v18 = (void *)objc_msgSend(a1, "decodeObjectOfClasses:forKey:", objc_msgSend((id)objc_msgSend(a1, "allowedClasses"), "setByAddingObjectsFromSet:", *v9), CFSTR("NSAttributes"));
  v19 = objc_msgSend(a1, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("NSAttributeInfo"));
  if (!v18)
    return 1;
  v20 = (void *)v19;
  if (!v19 && _NSIsNSDictionary())
  {
    objc_msgSend(a2, "setAttributes:range:", v18, 0, v8);
    return 1;
  }
  v21 = objc_msgSend(v20, "bytes");
  v22 = objc_msgSend(v20, "length");
  v23 = 0;
  v24 = (unsigned __int8 *)(v21 + v22);
LABEL_40:
  if ((unsigned __int8 *)v21 != v24)
  {
    v25 = 0;
    v26 = 1;
    v27 = (unsigned __int8 *)v21;
    do
    {
      v29 = *v27++;
      v28 = v29;
      v30 = (char)v29;
      v31 = v29 - 128;
      if ((v29 & 0x80u) != 0)
        v28 = v31;
      v32 = v26 * v28;
      v33 = __CFADD__(v32, v25);
      v25 += v32;
      if (v33)
        break;
      if ((v30 & 0x80000000) == 0)
      {
        v34 = (unsigned __int8 *)(v21 + 1);
        if (v34 != v24)
        {
          v35 = 0;
          v36 = 1;
          v37 = v34;
          while (1)
          {
            v39 = *v37++;
            v38 = v39;
            v40 = (char)v39;
            v41 = v39 - 128;
            if ((v39 & 0x80u) != 0)
              v38 = v41;
            v42 = v36 * v38;
            v33 = __CFADD__(v42, v35);
            v35 += v42;
            if (v33)
              break;
            if ((v40 & 0x80000000) == 0)
            {
              objc_msgSend(a2, "setAttributes:range:", objc_msgSend(v18, "objectAtIndex:", v35), v23, v25);
              v23 += v25;
              v21 = (uint64_t)(v34 + 1);
              v17 = 1;
              if (v23 < v8)
                goto LABEL_40;
              return v17;
            }
            v17 = 0;
            v36 <<= 7;
            v34 = v37;
            if (v37 == v24)
              return v17;
          }
        }
        return 0;
      }
      v26 <<= 7;
      v21 = (uint64_t)v27;
    }
    while (v27 != v24);
  }
  return 0;
}

uint64_t _compatDecodeValueOfObjCType(uint64_t a1, NSString *a2, BOOL *a3, const char *a4)
{
  void *v7;
  uint64_t v8;
  NSString *v9;
  uint64_t v10;
  NSString *v11;
  uint64_t v12;
  NSString *v13;
  uint64_t v14;
  NSString *v15;
  uint64_t result;
  uint64_t v17;
  NSString *v18;
  const __CFString *v19;
  const __CFString *v20;
  void *v21;
  const __CFString *v22;
  uint64_t v23;
  NSString *v24;
  uint64_t v25;
  NSString *v26;
  int v27;
  BOOL v28;
  uint64_t v29;
  NSString *v30;
  uint64_t v31;
  NSString *v32;
  void *v33;
  uint64_t v34;
  NSString *v35;
  NSString *v36;
  void *v37;
  uint64_t v38;
  NSString *v39;
  NSString *v40;
  void *v41;
  int v42;
  __int16 v43;
  NSString *v44;
  id v45;
  NSString *v46;
  void *v47;
  Class v48;
  NSString *v49;
  NSString *v50;
  unsigned int v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  if ((int)a2 <= 80)
  {
    if ((int)a2 > 57)
    {
      switch((int)a2)
      {
        case ':':
          v7 = (void *)objc_msgSend(CFSTR("$"), "mutableCopy");
          v8 = *(int *)(a1 + 64);
          *(_DWORD *)(a1 + 64) = v8 + 1;
          if (v8 > 0x27)
            v9 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("$%ld"), v8);
          else
            v9 = (NSString *)generic_keys[v8];
          objc_msgSend(v7, "appendString:", v9);
          v44 = (NSString *)objc_msgSend((id)a1, "decodeObjectOfClass:forKey:", objc_opt_class(), v7);

          if (_NSIsNSString())
          {
            v41 = (void *)NSSelectorFromString(v44);
            goto LABEL_58;
          }
          *(_QWORD *)a3 = 0;
          if (!v44)
            return 0;
          v49 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeObject);
          v50 = v44;
          v22 = CFSTR("NSInvalidUnarchiveOperationException");
          v20 = CFSTR("%@: Found non-string object (%@) where expecting SEL name");
          break;
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case 'A':
          goto LABEL_25;
        case '@':
          v23 = *(int *)(a1 + 64);
          *(_DWORD *)(a1 + 64) = v23 + 1;
          if (v23 > 0x27)
            v24 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("$%ld"), v23);
          else
            v24 = (NSString *)generic_keys[v23];
          result = _decodeObject((unint64_t *)a1, v24, a3);
          if (!(_DWORD)result)
            return result;
          v45 = *(id *)a3;
          return 1;
        case 'B':
          v25 = *(int *)(a1 + 64);
          *(_DWORD *)(a1 + 64) = v25 + 1;
          if (v25 > 0x27)
            v26 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("$%ld"), v25);
          else
            v26 = (NSString *)generic_keys[v25];
          return _decodeBool(a1, v26, a3);
        case 'C':
          goto LABEL_7;
        default:
          if ((_DWORD)a2 == 73 || (_DWORD)a2 == 76)
            goto LABEL_19;
          goto LABEL_25;
      }
      goto LABEL_79;
    }
    if ((_DWORD)a2 == 35)
    {
      v33 = (void *)objc_msgSend(CFSTR("$"), "mutableCopy");
      v34 = *(int *)(a1 + 64);
      *(_DWORD *)(a1 + 64) = v34 + 1;
      if (v34 > 0x27)
        v35 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("$%ld"), v34);
      else
        v35 = (NSString *)generic_keys[v34];
      objc_msgSend(v33, "appendString:", v35);
      v46 = (NSString *)objc_msgSend((id)a1, "decodeObjectOfClass:forKey:", objc_opt_class(), v33);

      if (_NSIsNSString())
      {
        v47 = *(void **)(a1 + 120);
        v48 = NSClassFromString(v46);
        if (!objc_msgSend(v47, "classNameAllowed:", v48))
        {
          v19 = (const __CFString *)*MEMORY[0x1E0C99778];
          v49 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeObject);
          v50 = v46;
          v20 = CFSTR("%@: data to unarchive contains class (%@) which has not been allowed");
          goto LABEL_26;
        }
        _NSCoderCheckPotentiallyMangledClassNameAndWarn((uint64_t)v48, 0);
        *(_QWORD *)a3 = v48;
        return 1;
      }
      *(_QWORD *)a3 = 0;
      if (v46)
      {
        v49 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeObject);
        v50 = v46;
        v22 = CFSTR("NSInvalidUnarchiveOperationException");
        v20 = CFSTR("%@: Found non-string object (%@) where expecting class name");
        goto LABEL_79;
      }
    }
    else
    {
      if ((_DWORD)a2 == 37)
      {
        v36 = _NSMethodExceptionProem((objc_class *)a1, a4);
        NSLog((NSString *)CFSTR("%@: warning: NXAtom being decoded -- will not be uniqued"), v36);
      }
      else if ((_DWORD)a2 != 42)
      {
LABEL_25:
        v19 = (const __CFString *)*MEMORY[0x1E0C99778];
        v49 = _NSMethodExceptionProem((objc_class *)a1, a4);
        v50 = a2;
        v20 = CFSTR("%@: unknown type encoding ('%c')");
LABEL_26:
        v21 = (void *)a1;
        v22 = v19;
LABEL_80:
        objc_msgSend(v21, "__failWithExceptionName:errorCode:format:", v22, 4864, v20, v49, v50);
        return 0;
      }
      v37 = (void *)objc_msgSend(CFSTR("$"), "mutableCopy");
      v38 = *(int *)(a1 + 64);
      *(_DWORD *)(a1 + 64) = v38 + 1;
      if (v38 > 0x27)
        v39 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("$%ld"), v38);
      else
        v39 = (NSString *)generic_keys[v38];
      objc_msgSend(v37, "appendString:", v39);
      v40 = (NSString *)objc_msgSend((id)a1, "decodeObjectOfClass:forKey:", objc_opt_class(), v37);

      if (_NSIsNSString())
      {
        v41 = strdup(-[NSString cString](v40, "cString"));
LABEL_58:
        *(_QWORD *)a3 = v41;
        return 1;
      }
      *(_QWORD *)a3 = 0;
      if (v40)
      {
        v49 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeObject);
        v50 = v40;
        v22 = CFSTR("NSInvalidUnarchiveOperationException");
        v20 = CFSTR("%@: Found non-string object (%@) where expecting C string");
LABEL_79:
        v21 = (void *)a1;
        goto LABEL_80;
      }
    }
    return 0;
  }
  switch((int)a2)
  {
    case 'c':
LABEL_7:
      v10 = *(int *)(a1 + 64);
      *(_DWORD *)(a1 + 64) = v10 + 1;
      if (v10 > 0x27)
        v11 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("$%ld"), v10);
      else
        v11 = (NSString *)generic_keys[v10];
      v51 = 0;
      v27 = _decodeInt32((void *)a1, v11, &v51);
      result = 0;
      v28 = v51;
      if (v27)
      {
        if (v51 == (char)v51)
        {
          result = 1;
        }
        else
        {
          objc_msgSend((id)a1, "__failWithExceptionName:errorCode:format:", *MEMORY[0x1E0C99858], 4864, CFSTR("%@: value (%d) for key (%@) too large to fit in a char"), _NSMethodExceptionProem((objc_class *)a1, sel_decodeInt32ForKey_), v51, v11);
          result = 0;
        }
      }
      *a3 = v28;
      return result;
    case 'd':
      v29 = *(int *)(a1 + 64);
      *(_DWORD *)(a1 + 64) = v29 + 1;
      if (v29 > 0x27)
        v30 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("$%ld"), v29);
      else
        v30 = (NSString *)generic_keys[v29];
      return _decodeDouble(a1, v30, (double *)a3);
    case 'e':
    case 'g':
    case 'h':
    case 'j':
    case 'k':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'r':
      goto LABEL_25;
    case 'f':
      v31 = *(int *)(a1 + 64);
      *(_DWORD *)(a1 + 64) = v31 + 1;
      if (v31 > 0x27)
        v32 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("$%ld"), v31);
      else
        v32 = (NSString *)generic_keys[v31];
      return _decodeFloat((void *)a1, v32, (float *)a3);
    case 'i':
    case 'l':
LABEL_19:
      v14 = *(int *)(a1 + 64);
      *(_DWORD *)(a1 + 64) = v14 + 1;
      if (v14 > 0x27)
        v15 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("$%ld"), v14);
      else
        v15 = (NSString *)generic_keys[v14];
      return _decodeInt32((void *)a1, v15, a3);
    case 'q':
      goto LABEL_23;
    case 's':
      goto LABEL_15;
    default:
      if ((_DWORD)a2 == 81)
      {
LABEL_23:
        v17 = *(int *)(a1 + 64);
        *(_DWORD *)(a1 + 64) = v17 + 1;
        if (v17 > 0x27)
          v18 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("$%ld"), v17);
        else
          v18 = (NSString *)generic_keys[v17];
        result = _decodeInt64(a1, v18, (unint64_t *)a3);
      }
      else
      {
        if ((_DWORD)a2 != 83)
          goto LABEL_25;
LABEL_15:
        v12 = *(int *)(a1 + 64);
        *(_DWORD *)(a1 + 64) = v12 + 1;
        if (v12 > 0x27)
          v13 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("$%ld"), v12);
        else
          v13 = (NSString *)generic_keys[v12];
        v51 = 0;
        v42 = _decodeInt32((void *)a1, v13, &v51);
        result = 0;
        v43 = v51;
        if (v42)
        {
          if (v51 == (__int16)v51)
          {
            result = 1;
          }
          else
          {
            objc_msgSend((id)a1, "__failWithExceptionName:errorCode:format:", *MEMORY[0x1E0C99858], 4864, CFSTR("%@: value (%d) for key (%@) too large to fit in a short"), _NSMethodExceptionProem((objc_class *)a1, sel_decodeInt32ForKey_), v51, v13);
            result = 0;
          }
        }
        *(_WORD *)a3 = v43;
      }
      break;
  }
  return result;
}

uint64_t checkExpected(uint64_t __s, char *__s2)
{
  const char *v3;
  int v4;
  int v5;
  char *v6;
  const char *v7;
  int v8;
  int v9;
  int v10;
  NSString *v11;
  uint64_t v12;

  if ((char *)__s != __s2)
  {
    v3 = (const char *)__s;
    if (!__s)
    {
      v11 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("*** file inconsistency: read type is null, expecting '%s'"), __s2, v12);
      goto LABEL_31;
    }
    v4 = *(unsigned __int8 *)__s;
    v5 = *__s2;
    if (v4 != v5 || strlen((const char *)__s) != 1 || (__s = strlen(__s2), __s != 1))
    {
      __s = strcmp(v3, __s2);
      if ((_DWORD)__s)
      {
        if (!v4)
        {
LABEL_28:
          if (!v5)
            return __s;
LABEL_30:
          v11 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("*** file inconsistency: read '%s', expecting '%s'"), v3, __s2);
LABEL_31:
          objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", CFSTR("NSArchiverArchiveInconsistency"), v11, 0));
        }
        if (v4 != 108 || v5 != 105)
        {
          v6 = __s2;
          v7 = v3;
          do
          {
            v8 = *v6;
            if (!*v6)
              goto LABEL_30;
            if (v4 == v8 || v4 == 108 && v8 == 105)
            {
              ++v7;
              ++v6;
            }
            else if (v4 == 63)
            {
              ++v7;
              if (*v6)
              {
                do
                {
                  if (v8 == 61)
                    break;
                  v9 = *++v6;
                  v8 = v9;
                }
                while (v9);
              }
            }
            else
            {
              if (v8 != 63)
                goto LABEL_30;
              ++v6;
              if (v4)
              {
                do
                {
                  if (v4 == 61)
                    break;
                  v10 = *(unsigned __int8 *)++v7;
                  v4 = v10;
                }
                while (v10);
              }
            }
            v4 = *(unsigned __int8 *)v7;
          }
          while (*v7);
          v5 = *v6;
          goto LABEL_28;
        }
      }
    }
  }
  return __s;
}

const char *_decodeValueOfObjCType(uint64_t a1, char *a2, NSUInteger *a3)
{
  int v6;
  const char *v7;
  char v8;
  const char *v9;
  void *Name;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  const char *v16;
  NSUInteger v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  int v26;
  NSUInteger v27;
  unsigned int v28;
  uint64_t v29;
  _QWORD *v30;
  int v31;
  int v32;
  unsigned int v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  void *v37;
  NSUInteger v38;
  id v39;
  uint64_t v40;
  _QWORD *v41;
  int v42;
  uint64_t v43;
  double v44;
  double v45;
  uint64_t v46;
  _QWORD *v47;
  int v48;
  uint64_t v49;
  float v50;
  float v51;
  const char *v52;
  const char *v53;
  char *v54;
  NSUInteger v55;
  const char *v56;
  _BYTE *v57;
  int v58;
  unint64_t v59;
  unsigned int v60;
  NSString *v62;
  const __CFString *v63;
  void *v64;
  const __CFString *v65;
  int v66;
  const char *v67;
  NSUInteger alignp;
  NSUInteger sizep[2];

  sizep[1] = *MEMORY[0x1E0C80C00];
  v7 = a2 + 1;
  v6 = *a2;
  v8 = *a2;
  if (v6 <= 80)
  {
    if (v6 > 57)
    {
      switch(*a2)
      {
        case ':':
          v9 = _decodeReusedCStringUsingTable(*(_QWORD *)(a1 + 8), *(unint64_t **)(a1 + 56), (_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 41) != 0);
          Name = (void *)sel_registerName(v9);
          goto LABEL_83;
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case 'A':
          goto LABEL_90;
        case '@':
          v37 = (void *)_decodeObject_old(a1);
          v38 = (NSUInteger)v37;
          if (v37)
            v39 = v37;
          *a3 = v38;
          return v7;
        case 'B':
          *(_BYTE *)a3 = _decodeCharAtCursor(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16), (_QWORD *)(a1 + 16)) != 0;
          return v7;
        case 'C':
          goto LABEL_7;
        default:
          if (v6 == 73 || v6 == 76)
            goto LABEL_24;
          goto LABEL_90;
      }
    }
    switch(*a2)
    {
      case '!':
        return v7;
      case '#':
        Name = _decodeClass(a1);
        goto LABEL_83;
      case '%':
        v52 = _decodeReusedCStringUsingTable(*(_QWORD *)(a1 + 8), *(unint64_t **)(a1 + 56), (_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 41) != 0);
        v53 = sel_registerName(v52);
        Name = (void *)sel_getName(v53);
        goto LABEL_83;
      case '(':
        sizep[0] = 0;
        v54 = skipAggregateName(a2 + 1);
        v7 = NSGetSizeAndAlignment(v54 - 1, sizep, 0);
        if (sizep[0])
        {
          v55 = 0;
          do
            _decodeValueOfObjCType(a1, "C", (char *)a3 + v55++);
          while (v55 < sizep[0]);
        }
        return v7;
      case '*':
        alignp = 0;
        sizep[0] = 0;
        if (_decodeNewPtr(*(_QWORD *)(a1 + 8), &alignp, (uint64_t *)sizep, *(const __CFDictionary **)(a1 + 48), (uint64_t *)(a1 + 72), (_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 41) != 0))
        {
          v56 = _decodeReusedCStringUsingTable(*(_QWORD *)(a1 + 8), *(unint64_t **)(a1 + 56), (_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 41) != 0);
          v57 = malloc_type_calloc(1uLL, 0x10uLL, 0x108004022EE8E53uLL);
          if (v57)
          {
            *(_QWORD *)v57 = v56;
            v57[8] = 0;
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 48), (const void *)(sizep[0] + 110), v57);
LABEL_79:
            if (((unint64_t)v56 & 0x8000000000000000) == 0)
            {
              if (v56)
              {
                Name = strdup(v56);
LABEL_83:
                *a3 = (NSUInteger)Name;
                return v7;
              }
LABEL_82:
              Name = 0;
              goto LABEL_83;
            }
            v66 = v8;
            v67 = "invalid string";
LABEL_92:
            typeDescriptorError(v66, (uint64_t)a2, (uint64_t)v67);
          }
          v64 = (void *)MEMORY[0x1E0C99DA0];
          v65 = (const __CFString *)*MEMORY[0x1E0C99850];
          v63 = CFSTR("*** memory allocation failed");
        }
        else
        {
          if (!alignp)
            goto LABEL_82;
          if (!*(_BYTE *)(alignp + 8))
          {
            v56 = *(const char **)alignp;
            goto LABEL_79;
          }
          v64 = (void *)MEMORY[0x1E0C99DA0];
          v65 = CFSTR("NSArchiverArchiveInconsistency");
          v63 = CFSTR("*** reuse label points to invalid type");
        }
        break;
      default:
        goto LABEL_90;
    }
LABEL_88:
    objc_exception_throw((id)objc_msgSend(v64, "exceptionWithName:reason:userInfo:", v65, v63, 0));
  }
  if (v6 <= 98)
  {
    switch(v6)
    {
      case 'Q':
LABEL_25:
        v23 = *(_QWORD *)(a1 + 8);
        v24 = (_QWORD *)(a1 + 16);
        v25 = *(unsigned __int8 *)(a1 + 41);
        v26 = _decodeCharAtCursor(*(_QWORD *)(v23 + 8), *(_QWORD *)(v23 + 16), (_QWORD *)(a1 + 16));
        switch(v26)
        {
          case -121:
            sizep[0] = 0;
            _deserializeBytes(sizep, *(_QWORD *)(v23 + 8), *(_QWORD *)(v23 + 16), v24, 8);
            v27 = sizep[0];
            v59 = bswap64(sizep[0]);
            if (v25)
              v27 = v59;
            break;
          case -126:
            LODWORD(sizep[0]) = 0;
            _deserializeBytes(sizep, *(_QWORD *)(v23 + 8), *(_QWORD *)(v23 + 16), v24, 4);
            LODWORD(v27) = sizep[0];
            v60 = bswap32(sizep[0]);
            if (v25)
              LODWORD(v27) = v60;
            v27 = (int)v27;
            break;
          case -127:
            LOWORD(sizep[0]) = 0;
            _deserializeBytes(sizep, *(_QWORD *)(v23 + 8), *(_QWORD *)(v23 + 16), v24, 2);
            LOWORD(v27) = sizep[0];
            v28 = bswap32(LOWORD(sizep[0])) >> 16;
            if (v25)
              LOWORD(v27) = v28;
            v27 = (__int16)v27;
            break;
          default:
            v27 = v26;
            break;
        }
        *a3 = v27;
        break;
      case 'S':
LABEL_31:
        v29 = *(_QWORD *)(a1 + 8);
        v30 = (_QWORD *)(a1 + 16);
        v31 = *(unsigned __int8 *)(a1 + 41);
        v32 = _decodeCharAtCursor(*(_QWORD *)(v29 + 8), *(_QWORD *)(v29 + 16), (_QWORD *)(a1 + 16));
        if (v32 == -127)
        {
          LOWORD(sizep[0]) = 0;
          _deserializeBytes(sizep, *(_QWORD *)(v29 + 8), *(_QWORD *)(v29 + 16), v30, 2);
          v33 = bswap32(LOWORD(sizep[0])) >> 16;
          if (v31)
            LOWORD(v32) = v33;
          else
            LOWORD(v32) = sizep[0];
        }
        *(_WORD *)a3 = v32;
        break;
      case '[':
        sizep[0] = 0;
        v11 = *(unsigned __int8 *)v7;
        if (v11 - 48 > 9)
        {
          v16 = NSGetSizeAndAlignment(v7, sizep, 0);
        }
        else
        {
          v12 = 0;
          do
          {
            v13 = v12;
            if (v12 >= 0xCCCCCCCCCCCCCCDLL)
            {
              v62 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("*** value %lu too large (may have wrapped)"), v12);
              goto LABEL_87;
            }
            v14 = v11;
            v15 = *(unsigned __int8 *)++v7;
            v11 = v15;
            v12 = 10 * v12 + v14 - 48;
          }
          while (v15 - 48 < 0xA);
          v16 = NSGetSizeAndAlignment(v7, sizep, 0);
          if (v12)
          {
            v17 = 0;
            v18 = 10 * v13 + v14 - 48;
            while (v17 <= 0x7FFFFFFFFFFFFFFFLL / sizep[0])
            {
              _decodeValueOfObjCType(a1, v7, (char *)a3 + sizep[0] * v17++);
              if (v18 == v17)
                goto LABEL_62;
            }
            v62 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("*** value %lu too large (may have wrapped)"), v17);
LABEL_87:
            v63 = (const __CFString *)v62;
            v64 = (void *)MEMORY[0x1E0C99DA0];
            v65 = (const __CFString *)*MEMORY[0x1E0C99750];
            goto LABEL_88;
          }
        }
LABEL_62:
        v58 = *(unsigned __int8 *)v16;
        if (v58 != 93)
        {
          v66 = (char)v58;
          v67 = "missing ']' in type descriptor";
          goto LABEL_92;
        }
        return v16 + 1;
      default:
LABEL_90:
        v66 = v8;
        v67 = "unknown type descriptor";
        goto LABEL_92;
    }
  }
  else
  {
    switch(*a2)
    {
      case 'c':
LABEL_7:
        *(_BYTE *)a3 = _decodeCharAtCursor(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16), (_QWORD *)(a1 + 16));
        return v7;
      case 'd':
        v40 = *(_QWORD *)(a1 + 8);
        v41 = (_QWORD *)(a1 + 16);
        v42 = *(unsigned __int8 *)(a1 + 41);
        v43 = _decodeCharAtCursor(*(_QWORD *)(v40 + 8), *(_QWORD *)(v40 + 16), (_QWORD *)(a1 + 16));
        if ((_DWORD)v43 == -125)
        {
          sizep[0] = 0;
          _deserializeBytes(sizep, *(_QWORD *)(v40 + 8), *(_QWORD *)(v40 + 16), v41, 8);
          v44 = *(double *)sizep;
          v45 = COERCE_DOUBLE(bswap64(sizep[0]));
          if (v42)
            v44 = v45;
        }
        else
        {
          v44 = (double)(int)_decodeIntStartingWithChar(v40, v43, v41, v42 != 0);
        }
        *(double *)a3 = v44;
        return v7;
      case 'e':
      case 'g':
      case 'h':
      case 'j':
      case 'k':
      case 'm':
      case 'n':
      case 'o':
      case 'p':
      case 'r':
        goto LABEL_90;
      case 'f':
        v46 = *(_QWORD *)(a1 + 8);
        v47 = (_QWORD *)(a1 + 16);
        v48 = *(unsigned __int8 *)(a1 + 41);
        v49 = _decodeCharAtCursor(*(_QWORD *)(v46 + 8), *(_QWORD *)(v46 + 16), (_QWORD *)(a1 + 16));
        if ((_DWORD)v49 == -125)
        {
          LODWORD(sizep[0]) = 0;
          _deserializeBytes(sizep, *(_QWORD *)(v46 + 8), *(_QWORD *)(v46 + 16), v47, 4);
          v50 = *(float *)sizep;
          v51 = COERCE_FLOAT(bswap32(sizep[0]));
          if (v48)
            v50 = v51;
        }
        else
        {
          v50 = (float)(int)_decodeIntStartingWithChar(v46, v49, v47, v48 != 0);
        }
        *(float *)a3 = v50;
        return v7;
      case 'i':
      case 'l':
LABEL_24:
        v19 = *(_QWORD *)(a1 + 8);
        v20 = (_QWORD *)(a1 + 16);
        v21 = *(_BYTE *)(a1 + 41) != 0;
        v22 = _decodeCharAtCursor(*(_QWORD *)(v19 + 8), *(_QWORD *)(v19 + 16), (_QWORD *)(a1 + 16));
        *(_DWORD *)a3 = _decodeIntStartingWithChar(v19, v22, v20, v21);
        return v7;
      case 'q':
        goto LABEL_25;
      case 's':
        goto LABEL_31;
      default:
        if (v6 != 123)
          goto LABEL_90;
        v34 = skipAggregateName(a2 + 1);
        if (*v34 != 125)
        {
          v35 = 0;
          do
          {
            alignp = 0;
            sizep[0] = 0;
            NSGetSizeAndAlignment(v34, sizep, &alignp);
            v36 = roundUp(v35, alignp);
            v34 = (char *)_decodeValueOfObjCType(a1, v34, (char *)a3 + v36);
            v35 = sizep[0] + v36;
          }
          while (*v34 != 125);
        }
        v7 = v34 + 1;
        break;
    }
  }
  return v7;
}

uint64_t _decodeObject_old(uint64_t a1)
{
  Class v2;
  uint64_t v3;
  _BOOL4 v4;
  uint64_t v5;
  objc_class *v6;
  _BYTE *v7;
  const void *v8;
  uint64_t v9;
  _BYTE *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  NSString *v17;
  void *v19;
  const __CFString *v20;
  NSString *v21;
  const NSExceptionName *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v24 = 0;
  v25[0] = 0;
  if (!_decodeNewPtr(*(_QWORD *)(a1 + 8), v25, &v24, *(const __CFDictionary **)(a1 + 48), (uint64_t *)(a1 + 72), (_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 41) != 0))
  {
    if (!v25[0])
      return 0;
    if (*(_BYTE *)(v25[0] + 8) != 2)
    {
      v19 = (void *)MEMORY[0x1E0C99DA0];
      v20 = CFSTR("NSArchiverArchiveInconsistency");
      v21 = (NSString *)CFSTR("*** reuse label points to invalid type");
LABEL_25:
      objc_exception_throw((id)objc_msgSend(v19, "exceptionWithName:reason:userInfo:", v20, v21, 0));
    }
    return *(_QWORD *)v25[0];
  }
  v2 = _decodeClass(a1);
  if (*(_BYTE *)(a1 + 40) == 3)
  {
    v3 = *(_QWORD *)(a1 + 8);
    v4 = *(_BYTE *)(a1 + 41) != 0;
    v5 = _decodeCharAtCursor(*(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16), (_QWORD *)(a1 + 16));
    _decodeIntStartingWithChar(v3, v5, (_QWORD *)(a1 + 16), v4);
  }
  if (!v2)
  {
    v17 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("*** class error for '%@': %@"), CFSTR("NULL"), CFSTR("found null class"));
    goto LABEL_22;
  }
  v6 = -[objc_class allocWithZone:](v2, "allocWithZone:", *(_QWORD *)(a1 + 24));
  v7 = malloc_type_calloc(1uLL, 0x10uLL, 0x108004022EE8E53uLL);
  if (!v7)
    goto LABEL_20;
  *(_QWORD *)v7 = v6;
  v7[8] = 2;
  v8 = (const void *)(v24 + 110);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 48), (const void *)(v24 + 110), v7);
  v9 = -[objc_class awakeAfterUsingCoder:](-[objc_class initWithCoder:](v6, "initWithCoder:", a1), "awakeAfterUsingCoder:", a1);
  v10 = malloc_type_calloc(1uLL, 0x10uLL, 0x108004022EE8E53uLL);
  if (!v10)
    goto LABEL_20;
  *(_QWORD *)v10 = v9;
  v10[8] = 2;
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 48), v8, v10);
  if (!v9)
    goto LABEL_13;
  v11 = *(unint64_t **)(a1 + 88);
  v13 = *v11;
  v12 = v11[1];
  v14 = (char *)v11[2];
  if (v12 <= *v11)
  {
    v15 = v12 + 512;
    if ((v12 + 512) >> 60)
    {
      v21 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("*** value %lu too large (may have wrapped)"), v12 + 512);
      v19 = (void *)MEMORY[0x1E0C99DA0];
      v22 = (const NSExceptionName *)MEMORY[0x1E0C99750];
      goto LABEL_23;
    }
    v14 = NSReallocateObjectArray(v14, v12 + 512);
    if (v14)
    {
      v16 = *(_QWORD *)(a1 + 88);
      *(_QWORD *)(v16 + 8) = v15;
      *(_QWORD *)(v16 + 16) = v14;
      goto LABEL_12;
    }
LABEL_20:
    v19 = (void *)MEMORY[0x1E0C99DA0];
    v20 = (const __CFString *)*MEMORY[0x1E0C99850];
    v21 = (NSString *)CFSTR("*** memory allocation failed");
    goto LABEL_25;
  }
LABEL_12:
  *(_QWORD *)&v14[8 * v13] = v9;
  ++**(_QWORD **)(a1 + 88);
LABEL_13:
  if (_decodeCharAtCursor(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16), (_QWORD *)(a1 + 16)) != -122)
  {
    v17 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("*** NSUnarchiver: inconsistency between written and read data for object %p"), v9, v23);
LABEL_22:
    v21 = v17;
    v19 = (void *)MEMORY[0x1E0C99DA0];
    v22 = &NSInconsistentArchiveException;
LABEL_23:
    v20 = (const __CFString *)*v22;
    goto LABEL_25;
  }
  return v9;
}

Class _decodeClass(uint64_t a1)
{
  _BYTE *v2;
  _BYTE *v3;
  NSString *v4;
  NSString *v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t v8;
  int v9;
  const __CFDictionary *v10;
  NSString *Value;
  NSString *v12;
  void *v13;
  Class v14;
  Class v15;
  _BYTE *v16;
  void *v18;
  const __CFString *v19;
  NSString *v20;
  const NSExceptionName *v21;
  uint64_t v22;
  _QWORD v23[2];

  v23[1] = *MEMORY[0x1E0C80C00];
  v22 = 0;
  v23[0] = 0;
  if (!_decodeNewPtr(*(_QWORD *)(a1 + 8), v23, &v22, *(const __CFDictionary **)(a1 + 48), (uint64_t *)(a1 + 72), (_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 41) != 0))
  {
    if (!v23[0])
      return 0;
    if (*(_BYTE *)(v23[0] + 8) == 1)
      return *(Class *)v23[0];
    v18 = (void *)MEMORY[0x1E0C99DA0];
    v19 = CFSTR("NSArchiverArchiveInconsistency");
    v20 = (NSString *)CFSTR("*** reuse label points to invalid type");
LABEL_30:
    objc_exception_throw((id)objc_msgSend(v18, "exceptionWithName:reason:userInfo:", v19, v20, 0));
  }
  v2 = _decodeReusedCStringUsingTable(*(_QWORD *)(a1 + 8), *(unint64_t **)(a1 + 56), (_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 41) != 0);
  if (!v2)
  {
    v18 = (void *)MEMORY[0x1E0C99DA0];
    v19 = CFSTR("NSArchiverArchiveInconsistency");
    v20 = (NSString *)CFSTR("*** class name is null");
    goto LABEL_30;
  }
  if (*v2 == 37)
    v3 = v2 + 1;
  else
    v3 = v2;
  v4 = -[NSString initWithCString:encoding:]([NSString alloc], "initWithCString:encoding:", v3, CFStringConvertEncodingToNSStringEncoding(0x600u));
  if (!v4)
    goto LABEL_24;
  v5 = v4;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 41) != 0;
  v8 = _decodeCharAtCursor(*(_QWORD *)(v6 + 8), *(_QWORD *)(v6 + 16), (_QWORD *)(a1 + 16));
  v9 = _decodeIntStartingWithChar(v6, v8, (_QWORD *)(a1 + 16), v7);
  v10 = *(const __CFDictionary **)(a1 + 80);
  if (!v10 || (Value = (NSString *)CFDictionaryGetValue(v10, v5)) == 0)
  {
    Value = (NSString *)decodingMap;
    if (decodingMap)
      Value = (NSString *)CFDictionaryGetValue((CFDictionaryRef)decodingMap, v5);
  }
  if (Value)
    v12 = Value;
  else
    v12 = v5;
  v13 = *(void **)(a1 + 96);
  if (v13 && (objc_msgSend(v13, "containsObject:", v12) & 1) == 0)
  {
    v20 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("*** data to unarchive contains class (%@) which has not been allowed"), v12);
    v18 = (void *)MEMORY[0x1E0C99DA0];
    v21 = (const NSExceptionName *)MEMORY[0x1E0C99778];
    goto LABEL_28;
  }
  v14 = NSClassFromString(v12);
  if (!v14)
  {
    v20 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("*** class error for '%@': %@"), v12, CFSTR("class not loaded"));
    v18 = (void *)MEMORY[0x1E0C99DA0];
    v21 = &NSInconsistentArchiveException;
LABEL_28:
    v19 = (const __CFString *)*v21;
    goto LABEL_30;
  }
  v15 = v14;
  _NSCoderCheckPotentiallyMangledClassNameAndWarn((uint64_t)v14, 0);
  objc_opt_self();
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 64), v12, (const void *)v9);
  v16 = malloc_type_calloc(1uLL, 0x10uLL, 0x108004022EE8E53uLL);
  if (!v16)
  {
LABEL_24:
    v18 = (void *)MEMORY[0x1E0C99DA0];
    v19 = (const __CFString *)*MEMORY[0x1E0C99850];
    v20 = (NSString *)CFSTR("*** memory allocation failed");
    goto LABEL_30;
  }
  *(_QWORD *)v16 = v15;
  v16[8] = 1;
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 48), (const void *)(v22 + 110), v16);
  _decodeClass(a1);

  return v15;
}

uint64_t _decodeNewPtr(uint64_t a1, _QWORD *a2, uint64_t *a3, const __CFDictionary *a4, uint64_t *a5, _QWORD *a6, int a7)
{
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  int v17;
  const void *Value;

  v14 = _decodeCharAtCursor(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), a6);
  if ((_DWORD)v14 == -124)
  {
    v16 = *a5 + 1;
    *a5 = v16;
    *a3 = v16;
    return 1;
  }
  else if (v14 == 133)
  {
    result = 0;
    *a2 = 0;
  }
  else
  {
    v17 = _decodeIntStartingWithChar(a1, v14, a6, a7);
    *a3 = v17;
    Value = CFDictionaryGetValue(a4, (const void *)(v17 + 110));
    result = 0;
    *a2 = Value;
  }
  return result;
}

_BYTE *_decodeReusedCStringUsingTable(uint64_t a1, unint64_t *a2, _QWORD *a3, int a4)
{
  uint64_t v8;
  _BYTE *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  void *v15;
  const __CFString *v16;
  NSString *v17;

  v8 = _decodeCharAtCursor(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), a3);
  if ((_DWORD)v8 == -123)
    return 0;
  if (v8 == 132)
  {
    v9 = _decodeCStringAtCursor(a1, a3, a4);
    v10 = *a2;
    if (*a2 != a2[2])
    {
      v12 = a2[3];
      goto LABEL_12;
    }
    v11 = a2[1] + v10;
    a2[1] = v10;
    a2[2] = v11;
    if (!(v11 >> 60))
    {
      v12 = MEMORY[0x186DA80E4](a2[3], 8 * v11, 0x10040436913F5, &__block_literal_global_0);
      a2[3] = v12;
      v10 = *a2;
LABEL_12:
      *a2 = v10 + 1;
      *(_QWORD *)(v12 + 8 * v10) = v9;
      return v9;
    }
    v17 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("*** value %lu too large (may have wrapped)"), v11);
    v15 = (void *)MEMORY[0x1E0C99DA0];
    v16 = (const __CFString *)*MEMORY[0x1E0C99750];
LABEL_16:
    objc_exception_throw((id)objc_msgSend(v15, "exceptionWithName:reason:userInfo:", v16, v17, 0));
  }
  v13 = _decodeIntStartingWithChar(a1, v8, a3, a4);
  if (v13 <= -111)
  {
    v15 = (void *)MEMORY[0x1E0C99DA0];
    v16 = CFSTR("NSArchiverArchiveInconsistency");
    v17 = (NSString *)CFSTR("*** Incorrect archive: invalid length");
    goto LABEL_16;
  }
  v14 = (v13 + 110);
  if (*a2 <= v14 || (v9 = *(_BYTE **)(a2[3] + 8 * v14)) == 0)
  {
    v15 = (void *)MEMORY[0x1E0C99DA0];
    v16 = CFSTR("NSArchiverArchiveInconsistency");
    v17 = (NSString *)CFSTR("*** Incorrect archive: unexpected byte");
    goto LABEL_16;
  }
  return v9;
}

uint64_t _decodeCharAtCursor(unint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  BOOL v5;
  char *v6;
  uint64_t result;
  NSString *v8;

  v3 = *a3;
  v5 = __CFADD__(*a3, a1) && v3 > 0;
  if (v3 == 0x8000000000000000
    || v5
    || v3 < 0 && a1 < -v3
    || !a2
    || -a2 < a1 && a2 != 1
    || (v6 = (char *)(v3 + a1), v3 + a1 < a1)
    || a2 - 1 + a1 < (unint64_t)v6)
  {
    v8 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("*** End of archive encountered prematurely at %ld"), *a3);
    objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", CFSTR("NSArchiverArchiveInconsistency"), v8, 0));
  }
  result = *v6;
  *a3 = v3 + 1;
  return result;
}

uint64_t _decodeIntStartingWithChar(uint64_t a1, uint64_t a2, _QWORD *a3, int a4)
{
  unsigned __int16 v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v9;
  unsigned __int16 v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  switch((_DWORD)a2)
  {
    case 0xFFFFFF81:
      v10 = 0;
      _deserializeBytes(&v10, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), a3, 2);
      v5 = v10;
      v6 = bswap32(v10) >> 16;
      if (a4)
        v5 = v6;
      return (__int16)v5;
    case 0xFFFFFF82:
      v9 = 0;
      _deserializeBytes(&v9, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), a3, 4);
      v7 = bswap32(v9);
      if (a4)
        return v7;
      else
        return v9;
    case 0xFFFFFF87:
      objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99858], CFSTR("more data than room"), 0));
  }
  return a2;
}

_BYTE *_decodeCStringAtCursor(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  _BYTE *v10;
  void *v12;
  const __CFString *v13;
  const __CFString *v14;

  v6 = _decodeCharAtCursor(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), a2);
  if ((_DWORD)v6 != -123)
  {
    v8 = _decodeIntStartingWithChar(a1, v6, a2, a3);
    if ((v8 & 0x80000000) != 0)
    {
      v12 = (void *)MEMORY[0x1E0C99DA0];
      v13 = CFSTR("NSArchiverArchiveInconsistency");
      v14 = CFSTR("*** Incorrect archive: invalid length");
    }
    else
    {
      v9 = v8;
      v10 = malloc_type_malloc(v8 + 1, 0x4645BE22uLL);
      if (v10)
      {
        v7 = v10;
        _deserializeBytes(v10, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), a2, v9);
        v7[v9] = 0;
        return v7;
      }
      v12 = (void *)MEMORY[0x1E0C99DA0];
      v13 = (const __CFString *)*MEMORY[0x1E0C99850];
      v14 = CFSTR("*** memory allocation failed");
    }
    objc_exception_throw((id)objc_msgSend(v12, "exceptionWithName:reason:userInfo:", v13, v14, 0));
  }
  return 0;
}

void *_deserializeBytes(void *a1, size_t a2, uint64_t a3, _QWORD *a4, int64_t __len)
{
  uint64_t v5;
  BOOL v7;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  void *result;
  NSString *v14;

  v5 = *a4;
  v7 = __CFADD__(*a4, a2) && v5 > 0;
  if (v5 == 0x8000000000000000
    || v7
    || v5 < 0 && a2 < -v5
    || !a3
    || -a3 < a2 && a3 != 1
    || (v10 = v5 + a2, v5 + a2 < a2)
    || (v11 = a3 - 1 + a2, v11 < v10)
    || __len && (__len != 1 && v10 > -__len || (v12 = __len + v10 - 1, v12 < a2) || v11 < v12))
  {
    v14 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("*** End of archive encountered prematurely at %ld"), *a4);
    objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", CFSTR("NSArchiverArchiveInconsistency"), v14, 0));
  }
  result = memmove(a1, (const void *)(v5 + a2), __len);
  *a4 += __len;
  return result;
}

NSPlaceholderNumber *newDecodedNumber(void *a1)
{
  char *v2;
  int v3;
  char v4;
  NSUInteger v5;
  unsigned __int8 *v6;
  NSPlaceholderNumber *v7;
  double v8;
  NSString *v9;
  char *typePtr;
  NSUInteger sizep[129];

  sizep[128] = *MEMORY[0x1E0C80C00];
  typePtr = 0;
  objc_msgSend(a1, "decodeValueOfObjCType:at:size:", "*", &typePtr, 8);
  v2 = typePtr;
  if (!typePtr)
    return 0;
  v3 = *typePtr;
  if (!*typePtr || typePtr[1])
    goto LABEL_17;
  if (v3 == 108)
  {
    v4 = 105;
  }
  else
  {
    if (v3 != 76)
      goto LABEL_9;
    v4 = 73;
  }
  *typePtr = v4;
  v2 = typePtr;
LABEL_9:
  sizep[0] = 0;
  NSGetSizeAndAlignment(v2, sizep, 0);
  v5 = sizep[0];
  if (sizep[0] < 0x401)
  {
    v6 = (unsigned __int8 *)sizep;
LABEL_13:
    objc_msgSend(a1, "decodeValueOfObjCType:at:size:", typePtr, v6, v5);
    v7 = newNumber(*typePtr, v6, v8);
    if (v6 != (unsigned __int8 *)sizep)
      free(v6);
    if (v7)
      goto LABEL_16;
LABEL_17:
    v9 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("*** -[NSNumber initWithCoder:] bad objCType: \"%@\""), +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:"));
    free(typePtr);
    objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v9, 0));
  }
  v6 = (unsigned __int8 *)malloc_type_malloc(sizep[0], 0x50DA473AuLL);
  if (v6)
    goto LABEL_13;
  v7 = 0;
LABEL_16:
  free(typePtr);
  return v7;
}

NSPlaceholderNumber *newNumber(char a1, unsigned __int8 *a2, double a3)
{
  NSPlaceholderNumber *result;

  if (a1 <= 80)
  {
    if (a1 > 72)
    {
      if (a1 == 73)
        return -[NSPlaceholderNumber initWithUnsignedInt:](&__placeholderNumber, "initWithUnsignedInt:", *(unsigned int *)a2);
      if (a1 == 76)
        return -[NSPlaceholderNumber initWithUnsignedLong:](&__placeholderNumber, "initWithUnsignedLong:", *(_QWORD *)a2);
    }
    else
    {
      if (a1 == 66)
        return -[NSPlaceholderNumber initWithBool:](&__placeholderNumber, "initWithBool:", *a2);
      if (a1 == 67)
        return -[NSPlaceholderNumber initWithUnsignedChar:](&__placeholderNumber, "initWithUnsignedChar:", *a2);
    }
    return 0;
  }
  else
  {
    switch(a1)
    {
      case 'c':
        return -[NSPlaceholderNumber initWithChar:](&__placeholderNumber, "initWithChar:", (char)*a2);
      case 'd':
        return -[NSPlaceholderNumber initWithDouble:](&__placeholderNumber, "initWithDouble:", *(double *)a2);
      case 'e':
      case 'g':
      case 'h':
      case 'j':
      case 'k':
      case 'm':
      case 'n':
      case 'o':
      case 'p':
      case 'r':
        return 0;
      case 'f':
        LODWORD(a3) = *(_DWORD *)a2;
        return -[NSPlaceholderNumber initWithFloat:](&__placeholderNumber, "initWithFloat:", a3);
      case 'i':
        return -[NSPlaceholderNumber initWithInt:](&__placeholderNumber, "initWithInt:", *(unsigned int *)a2);
      case 'l':
        return -[NSPlaceholderNumber initWithLong:](&__placeholderNumber, "initWithLong:", *(_QWORD *)a2);
      case 'q':
        return -[NSPlaceholderNumber initWithLongLong:](&__placeholderNumber, "initWithLongLong:", *(_QWORD *)a2);
      case 's':
        return -[NSPlaceholderNumber initWithShort:](&__placeholderNumber, "initWithShort:", *(__int16 *)a2);
      default:
        if (a1 == 81)
        {
          result = -[NSPlaceholderNumber initWithUnsignedLongLong:](&__placeholderNumber, "initWithUnsignedLongLong:", *(_QWORD *)a2);
        }
        else
        {
          if (a1 != 83)
            return 0;
          result = -[NSPlaceholderNumber initWithUnsignedShort:](&__placeholderNumber, "initWithUnsignedShort:", *(unsigned __int16 *)a2);
        }
        break;
    }
  }
  return result;
}

uint64_t _NSUnarchiverPointerTableEntryRetain(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  uint64_t result;

  v2 = (*(_BYTE *)(a2 + 9))++ + 1;
  if ((v2 & 0x100) == 0)
    return a2;
  __break(1u);
  return result;
}

void iop_addDependency(unsigned __int8 *a1, void *a2, void *a3)
{
  id v6;
  id v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  __CFString *v15;
  int v16;
  char v17;
  unsigned __int8 *v18;
  char v19;
  char v20;
  _QWORD v21[2];
  void (*v22)(_QWORD *);
  void *v23;
  void *v24;
  void *v25;
  unsigned __int8 *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v7 = a3;
  v8 = 0;
  v9 = 0;
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 3221225472;
  v22 = __iop_addDependency_block_invoke;
  v23 = &unk_1E0F4FC28;
  v25 = a3;
  v26 = a1;
  v24 = a2;
  LOBYTE(v10) = 1;
  v11 = 1;
  do
  {
    while (1)
    {
      while (1)
      {
        v12 = v8;
        v13 = v11;
        v14 = v10;
        v15 = _NSOperationDependenciesAndReadyKeys[v9];
        if (v15 != CFSTR("isReady"))
          break;
        v11 = 0;
        v16 = atomic_load(a1 + 236);
        v17 = v8 | (v16 != 0);
        v8 = 1;
        v10 = v13;
        v9 = 1;
        if ((v17 & 1) != 0)
          goto LABEL_14;
      }
      if (v15 != CFSTR("isFinished"))
        break;
      v11 = 0;
      v18 = a1 + 235;
LABEL_13:
      v16 = atomic_load(v18);
      v19 = v8 | (v16 != 0);
      v9 = 1;
      v10 = v13;
      v8 = 1;
      if ((v19 & 1) != 0)
      {
LABEL_14:
        if (v16)
          v20 = v14;
        else
          v20 = v13;
        if ((v20 & 1) != 0)
          goto LABEL_18;
        goto LABEL_20;
      }
    }
    if (v15 == CFSTR("isExecuting"))
    {
      v11 = 0;
      v18 = a1 + 234;
      goto LABEL_13;
    }
    if (v15 == CFSTR("isCancelled"))
    {
      v11 = 0;
      v18 = a1 + 237;
      goto LABEL_13;
    }
    v11 = 0;
    v9 = 1;
    v10 = v13;
    v8 = 1;
  }
  while ((v12 & 1) == 0);
  if ((v13 & 1) != 0)
  {
LABEL_18:
    objc_msgSend(a3, "_changeValueForKeys:count:maybeOldValuesDict:maybeNewValuesDict:usingBlock:", _NSOperationDependenciesAndReadyKeys, 2, 0, 0, v21);
    goto LABEL_21;
  }
LABEL_20:
  ((void (*)(_QWORD *, uint64_t))v22)(v21, v10);
  +[__NSOperationInternalObserver _observeValueForKeyPath:ofObject:changeKind:oldValue:newValue:indexes:context:](__NSOperationInternalObserver, "_observeValueForKeyPath:ofObject:changeKind:oldValue:newValue:indexes:context:", CFSTR("isReady"), a3, 0, 0, 0, 0, 0);
LABEL_21:

}

void __iop_addDependency_block_invoke(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  int v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSHashTable *v13;

  os_unfair_lock_lock((os_unfair_lock_t)(a1[6] + 224));
  v2 = *(void **)(a1[6] + 32);
  if (v2)
  {
    v3 = objc_msgSend(v2, "indexOfObjectIdenticalTo:", a1[4]);
    v4 = a1[6];
    if (v3 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v7 = (os_unfair_lock_s *)(v4 + 224);
      goto LABEL_13;
    }
    v5 = *(void **)(v4 + 32);
  }
  else
  {
    v5 = (void *)objc_opt_new();
    *(_QWORD *)(a1[6] + 32) = v5;
  }
  objc_msgSend(v5, "addObject:", a1[4]);
  v6 = a1[4];
  os_unfair_lock_unlock((os_unfair_lock_t)(a1[6] + 224));
  v7 = (os_unfair_lock_s *)(v6 + 232);
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 232));
  os_unfair_lock_lock((os_unfair_lock_t)(a1[6] + 224));
  v8 = atomic_load((unsigned __int8 *)(v6 + 237));
  if (v8 != 244)
  {
    v9 = atomic_load((unsigned __int8 *)(a1[6] + 232));
    if ((v9 & 1) == 0)
    {
      v10 = a1[6];
      v11 = *(_QWORD *)(v10 + 48);
      if (v11 < 0)
        __assert_rtn("iop_addDependency_block_invoke", "NSOperation.m", 795, "iop->__unfinished_deps >= 0");
      *(_QWORD *)(v10 + 48) = v11 + 1;
      v12 = a1[5];
      v13 = *(NSHashTable **)(v6 + 48);
      if (!v13)
      {
        v13 = +[NSHashTable hashTableWithOptions:](NSHashTable, "hashTableWithOptions:", 5);
        *(_QWORD *)(v6 + 48) = v13;
      }
      -[NSHashTable addObject:](v13, "addObject:", v12);
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1[6] + 224));
LABEL_13:
  os_unfair_lock_unlock(v7);
}

uint64_t appendNodeText(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, NSError **a10)
{
  const char *literal;
  NSString *v19;
  NSString *v20;
  uint64_t start_column;
  uint64_t end_line;
  NSAttributedStringMarkdownSourcePosition *v23;
  NSError *v24;
  uint64_t result;
  uint64_t start_line;
  NSAttributedStringMarkdownSourcePosition *v27;

  literal = (const char *)_NS_cmark_node_get_literal(a3);
  if (!literal)
    return 1;
  v19 = -[NSString initWithBytesNoCopy:length:encoding:freeWhenDone:]([NSString alloc], "initWithBytesNoCopy:length:encoding:freeWhenDone:", literal, strlen(literal), 4, 0);
  if (v19)
  {
    v20 = v19;
    if (objc_msgSend(a2, "appliesSourcePositionAttributes"))
    {
      v27 = [NSAttributedStringMarkdownSourcePosition alloc];
      start_line = (int)_NS_cmark_node_get_start_line(a3);
      start_column = (int)_NS_cmark_node_get_start_column(a3);
      end_line = (int)_NS_cmark_node_get_end_line(a3);
      v23 = -[NSAttributedStringMarkdownSourcePosition initWithStartLine:startColumn:endLine:endColumn:](v27, "initWithStartLine:startColumn:endLine:endColumn:", start_line, start_column, end_line, (int)_NS_cmark_node_get_end_column(a3));
      -[NSAttributedStringMarkdownSourcePosition setOffsetsFromUTF8:size:usingCache:](v23, "setOffsetsFromUTF8:size:usingCache:", a7, a8, a9);
    }
    else
    {
      v23 = 0;
    }
    appendStringWithSourcePosition(a1, (uint64_t)v20, a4, a5, a6, (uint64_t)v23);

    return 1;
  }
  if (objc_msgSend(a2, "failurePolicy"))
    return 1;
  if (!a10)
    return 0;
  v24 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 259, 0);
  result = 0;
  *a10 = v24;
  return result;
}

void appendStringWithSourcePosition(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  id v11;

  if (a6)
  {
    v11 = (id)objc_msgSend(a5, "mutableCopy");
    objc_msgSend(v11, "setObject:forKey:", a6, CFSTR("NSMarkdownSourcePosition"));
    objc_msgSend(a1, "appendString:with:", a2, attributesForIntents(a3, a4, v11));

  }
  else
  {
    objc_msgSend(a1, "appendString:with:", a2, attributesForIntents(a3, a4, a5));
  }
}

id attributesForIntents(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  NSNumber **v6;
  const __CFString **v7;
  uint64_t v8;
  void *v9;
  void *v10;
  const __CFString *v12;
  NSNumber *v13;
  const __CFString *v14;
  uint64_t v15;
  _QWORD v16[2];
  _QWORD v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  if (a1 && a2)
  {
    v16[0] = CFSTR("NSInlinePresentationIntent");
    v16[1] = CFSTR("NSPresentationIntent");
    v17[0] = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a1);
    v17[1] = a2;
    v5 = (void *)MEMORY[0x1E0C99D80];
    v6 = (NSNumber **)v17;
    v7 = (const __CFString **)v16;
    v8 = 2;
    goto LABEL_9;
  }
  if (a2)
  {
    v14 = CFSTR("NSPresentationIntent");
    v15 = a2;
    v5 = (void *)MEMORY[0x1E0C99D80];
    v6 = (NSNumber **)&v15;
    v7 = &v14;
LABEL_8:
    v8 = 1;
LABEL_9:
    v9 = (void *)objc_msgSend(v5, "dictionaryWithObjects:forKeys:count:", v6, v7, v8);
    if (!a3)
      return v9;
    goto LABEL_10;
  }
  if (a1)
  {
    v12 = CFSTR("NSInlinePresentationIntent");
    v13 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a1);
    v5 = (void *)MEMORY[0x1E0C99D80];
    v6 = &v13;
    v7 = &v12;
    goto LABEL_8;
  }
  v9 = (void *)MEMORY[0x1E0C9AA70];
  if (!a3)
    return v9;
LABEL_10:
  if (objc_msgSend(a3, "count"))
  {
    v10 = (void *)objc_msgSend(v9, "mutableCopy");
    objc_msgSend(v10, "addEntriesFromDictionary:", a3);
    return v10;
  }
  return v9;
}

NSMutableAttributedString *_NSStringCreateByParsingMarkdownAndOptionallyInflecting(void *a1, __CFBundle *MainBundle, void *a3, void *a4, int a5)
{
  NSMutableAttributedString *v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t i;
  void *v18;
  const __CFArray *v19;
  CFArrayRef v20;
  void *v21;
  uint64_t v22;
  int v23;
  NSMutableAttributedString *v24;
  NSAttributedStringMarkdownParsingOptions *v25;
  NSAttributedString *v26;
  id v28;
  int v29;
  _BYTE v30[128];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v10 = (NSMutableAttributedString *)objc_msgSend((id)objc_msgSend(a1, "__baseAttributedString"), "mutableCopy");
  if (v10)
    return v10;
  v11 = (id)_NSAttributedStringMarkdownParsingLocalizedStringOptions();
  if (!a3)
    goto LABEL_14;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v12 = (void *)objc_msgSend((id)objc_msgSend(a3, "pathComponents"), "reverseObjectEnumerator");
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v31, v30, 16);
  if (!v13)
    goto LABEL_14;
  v14 = v13;
  v28 = v11;
  v29 = a5;
  v15 = 0;
  v16 = *(_QWORD *)v32;
  do
  {
    for (i = 0; i != v14; ++i)
    {
      if (*(_QWORD *)v32 != v16)
        objc_enumerationMutation(v12);
      v18 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * i);
      if (objc_msgSend(v18, "hasSuffix:", CFSTR(".lproj"), v28)
        && (unint64_t)objc_msgSend(v18, "length") >= 7)
      {
        v15 = (id)objc_msgSend(v18, "substringToIndex:", objc_msgSend(v18, "length") - 6);
      }
    }
    v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v31, v30, 16);
  }
  while (v14);
  a5 = v29;
  v11 = v28;
  if (!v15)
  {
LABEL_14:
    if (!MainBundle)
      MainBundle = CFBundleGetMainBundle();
    v19 = CFBundleCopyBundleLocalizations(MainBundle);
    v20 = CFBundleCopyPreferredLocalizationsFromArray(v19);
    CFRelease(v19);
    v15 = (id)objc_msgSend((id)-[__CFArray firstObject](v20, "firstObject"), "copy");
    CFRelease(v20);
  }
  v21 = (void *)objc_msgSend(v11, "copy");
  objc_msgSend(v21, "setLanguageCode:", v15);

  if (a4)
    v22 = objc_msgSend(a4, "objectForKeyedSubscript:", CFSTR("NSStringInflectableLocalizationKey"));
  else
    v22 = 0;
  v23 = _NSIsNSString();
  v24 = [NSMutableAttributedString alloc];
  if (v23)
  {
    v10 = -[NSAttributedString initWithMarkdownString:options:baseURL:error:](v24, "initWithMarkdownString:options:baseURL:error:", v22, v21, 0, 0);
    v25 = objc_alloc_init(NSAttributedStringMarkdownParsingOptions);
    -[NSAttributedStringMarkdownParsingOptions setInterpretedSyntax:](v25, "setInterpretedSyntax:", 2);
    v26 = -[NSAttributedString initWithMarkdownString:options:baseURL:error:]([NSAttributedString alloc], "initWithMarkdownString:options:baseURL:error:", a1, v25, 0, 0);

    if (v26)
    {
      -[NSMutableAttributedString addAttribute:value:range:](v10, "addAttribute:value:range:", CFSTR("NSInflectionAlternative"), v26, 0, -[NSAttributedString length](v10, "length"));

    }
    if (!a5)
      goto LABEL_25;
  }
  else
  {
    v10 = -[NSAttributedString initWithMarkdownString:options:baseURL:error:](v24, "initWithMarkdownString:options:baseURL:error:", a1, v21, 0, 0);
    if (!a5)
      goto LABEL_25;
  }
  -[NSMutableAttributedString _inflectWithLocale:replacements:concepts:preflight:](v10, "_inflectWithLocale:replacements:concepts:preflight:", 0, MEMORY[0x1E0C9AA60], MEMORY[0x1E0C9AA60], 1);
LABEL_25:
  if (a4)
    -[NSMutableAttributedString addAttribute:value:range:](v10, "addAttribute:value:range:", 0x1E0F61A70, a4, 0, -[NSAttributedString length](v10, "length"));

  return v10;
}

uint64_t _NSAttributedStringMarkdownParsingLocalizedStringOptions()
{
  if (qword_1ECD09B48 != -1)
    dispatch_once(&qword_1ECD09B48, &__block_literal_global_46);
  return qword_1ECD09B40;
}

uint64_t _NSAttributedStringFromMarkdownWithCreator(void *a1, uint64_t a2, uint64_t a3, NSAttributedStringMarkdownParsingOptions *a4, uint64_t a5, NSError **a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t syntax_extension;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v26;
  NSPresentationIntent *v27;
  uint64_t node;
  int type;
  uint64_t v30;
  NSPresentationIntent *v31;
  int v32;
  char appended;
  int list_type;
  unint64_t v35;
  uint64_t v36;
  _BYTE *fence_info;
  NSError **v38;
  void *v39;
  NSString *v40;
  uint64_t v41;
  NSPresentationIntent *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  BOOL v46;
  uint64_t v47;
  NSPresentationIntent *v48;
  const char *url;
  NSString *v50;
  unint64_t v51;
  uint64_t v52;
  NSString *v53;
  NSString *v54;
  NSString *v55;
  uint64_t v56;
  void *v57;
  const __CFString *v58;
  const char *title;
  NSString *v60;
  int v61;
  int start_line;
  unint64_t v63;
  const char *attributes;
  void *v65;
  uint64_t v66;
  void *v67;
  unsigned int table_columns;
  uint64_t table_alignments;
  unsigned __int8 *v70;
  void *v71;
  uint64_t v72;
  int v73;
  int v74;
  __objc2_class **v75;
  __objc2_class **v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  const char *literal;
  NSString *v81;
  NSMutableString *v82;
  uint64_t v83;
  void *v84;
  NSPresentationIntent *v85;
  NSAttributedStringMarkdownSourcePosition *v86;
  void *v87;
  NSError **v88;
  NSError **v89;
  NSMutableString *v90;
  void *v91;
  int start_column;
  NSString *v93;
  int end_line;
  uint64_t v95;
  uint64_t v96;
  NSAttributedStringMarkdownParsingOptions *v97;
  NSString *v98;
  int end_column;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  NSError *v108;
  _OWORD v109[3];
  _OWORD v110[5];
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  if (_NSAttributedStringLoadCMarkIfNeeded_onceToken != -1)
    dispatch_once(&_NSAttributedStringLoadCMarkIfNeeded_onceToken, &__block_literal_global_31);
  if ((_NSAttributedStringLoadCMarkIfNeeded_cmarkLoaded & 1) == 0)
  {
    if (a6)
    {
      v24 = 3328;
LABEL_27:
      v22 = 0;
      *a6 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), v24, 0);
      return v22;
    }
    return 0;
  }
  v104 = a1;
  v12 = -[NSAttributedStringMarkdownParsingOptions interpretedSyntax](a4, "interpretedSyntax");
  if (v12 == 2)
    v13 = 786432;
  else
    v13 = (v12 == 1) << 18;
  v14 = _NS_cmark_parser_new(v13);
  syntax_extension = _NS_cmark_find_syntax_extension("table");
  if (syntax_extension)
    _NS_cmark_parser_attach_syntax_extension(v14, syntax_extension);
  v16 = _NS_cmark_find_syntax_extension("autolink");
  if (v16)
    _NS_cmark_parser_attach_syntax_extension(v14, v16);
  v17 = _NS_cmark_find_syntax_extension("strikethrough");
  if (v17)
    _NS_cmark_parser_attach_syntax_extension(v14, v17);
  v18 = _NS_cmark_find_syntax_extension("extended-attrs");
  if (v18)
    _NS_cmark_parser_attach_syntax_extension(v14, v18);
  _NS_cmark_parser_feed(v14, a2, a3);
  v19 = _NS_cmark_parser_finish(v14);
  if (!v19)
  {
    if (a6)
    {
      v24 = 259;
      goto LABEL_27;
    }
    return 0;
  }
  v102 = a2;
  v103 = a3;
  v101 = v19;
  v20 = _NS_cmark_iter_new();
  if (!a4)
    a4 = objc_alloc_init(NSAttributedStringMarkdownParsingOptions);
  v106 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithObject:", MEMORY[0x1E0C9AA70]);
  memset(v109, 0, 32);
  v109[2] = vdupq_n_s64(1uLL);
  v110[2] = xmmword_1822B5670;
  v110[3] = unk_1822B5680;
  v110[4] = xmmword_1822B5690;
  v110[0] = xmmword_1822B5650;
  v110[1] = unk_1822B5660;
  v21 = _NS_cmark_iter_next(v20);
  if (v21 == 1)
  {
LABEL_19:
    if ((objc_opt_respondsToSelector() & 1) != 0)
      objc_msgSend(a1, "finalizeWithLanguageIdentifier:", -[NSAttributedStringMarkdownParsingOptions languageCode](a4, "languageCode"));
    v22 = 1;
    v23 = v101;
    goto LABEL_22;
  }
  v26 = v21;
  v27 = 0;
  v107 = 0;
  v100 = 0;
  v95 = 0;
  v96 = 0;
  v105 = 1;
  while (1)
  {
    node = _NS_cmark_iter_get_node(v20);
    type = _NS_cmark_node_get_type();
    if ((type - 32775) > 1)
      break;
    if (-[NSAttributedStringMarkdownParsingOptions interpretedSyntax](a4, "interpretedSyntax") == NSAttributedStringMarkdownInterpretedSyntaxFull)
    {
      if (v26 == 3)
        goto LABEL_114;
      if (v26 == 2)
      {
        v30 = v105 + 1;
        v31 = +[NSPresentationIntent paragraphIntentWithIdentity:nestedInsideIntent:](NSPresentationIntent, "paragraphIntentWithIdentity:nestedInsideIntent:");
LABEL_60:
        v27 = v31;
LABEL_61:
        v105 = v30;
        a1 = v104;
      }
    }
LABEL_115:
    v26 = _NS_cmark_iter_next(v20);
    if (v26 == 1)
      goto LABEL_19;
  }
  v32 = type;
  switch(type)
  {
    case 49153:
    case 49158:
      appended = appendNodeText(a1, a4, node, v107, (uint64_t)v27, (void *)objc_msgSend(v106, "lastObject"), v102, v103, (uint64_t)v109, a6);
      goto LABEL_68;
    case 49154:
      objc_msgSend(a1, "appendString:with:", CFSTR(" "), attributesForIntents(v107 | 0x40, (uint64_t)v27, (void *)objc_msgSend(v106, "lastObject")));
      v43 = v107 & 0xFFFFFFFFFFFFFFBFLL;
      goto LABEL_64;
    case 49155:
      objc_msgSend(a1, "appendString:with:", CFSTR("\n"), attributesForIntents(v107 | 0x80, (uint64_t)v27, (void *)objc_msgSend(v106, "lastObject")));
      v43 = v107 & 0xFFFFFFFFFFFFFF7FLL;
LABEL_64:
      v107 = v43;
      goto LABEL_115;
    case 49156:
      v41 = v107 | 4;
      goto LABEL_67;
    case 49157:
      v41 = v107 | 0x100;
LABEL_67:
      appended = appendNodeText(a1, a4, node, v41, (uint64_t)v27, (void *)objc_msgSend(v106, "lastObject"), v102, v103, (uint64_t)v109, a6);
LABEL_68:
      if ((appended & 1) == 0)
        goto LABEL_186;
      goto LABEL_115;
    case 49159:
      v44 = v107;
      v45 = v107 & 0xFFFFFFFFFFFFFFFELL;
      v46 = v26 == 2;
      v47 = v107 | 1;
      goto LABEL_72;
    case 49160:
      v44 = v107;
      v45 = v107 & 0xFFFFFFFFFFFFFFFDLL;
      v46 = v26 == 2;
      v47 = v107 | 2;
LABEL_72:
      if (!v46)
        v47 = v44;
      if (v26 != 3)
        v45 = v47;
      goto LABEL_76;
    default:
      switch(type)
      {
        case 32770:
          if (v26 == 3)
            goto LABEL_114;
          if (v26 != 2)
            goto LABEL_115;
          v30 = v105 + 1;
          v31 = +[NSPresentationIntent blockQuoteIntentWithIdentity:nestedInsideIntent:](NSPresentationIntent, "blockQuoteIntentWithIdentity:nestedInsideIntent:");
          goto LABEL_60;
        case 32771:
          if (v26 == 3)
          {
            v63 = v100 - 1;
            if (!v100)
              v63 = 0;
            v100 = v63;
            goto LABEL_114;
          }
          if (v26 != 2)
            goto LABEL_115;
          list_type = _NS_cmark_node_get_list_type(node);
          v35 = v100;
          if (v100 <= 8)
          {
            v35 = v100 + 1;
            if (list_type == 2)
            {
              ++v100;
              *((_QWORD *)v110 + v35) = (int)_NS_cmark_node_get_list_start(node);
              v36 = v105;
LABEL_145:
              v30 = v36 + 1;
              v31 = +[NSPresentationIntent orderedListIntentWithIdentity:nestedInsideIntent:](NSPresentationIntent, "orderedListIntentWithIdentity:nestedInsideIntent:");
              goto LABEL_60;
            }
            *((_QWORD *)v110 + v35) = 1;
          }
          v36 = v105;
          v100 = v35;
          if (list_type == 2)
            goto LABEL_145;
          if (list_type != 1)
            goto LABEL_115;
          v30 = v105 + 1;
          v31 = +[NSPresentationIntent unorderedListIntentWithIdentity:nestedInsideIntent:](NSPresentationIntent, "unorderedListIntentWithIdentity:nestedInsideIntent:");
          goto LABEL_60;
        case 32772:
          if (v26 == 3)
          {
            v27 = -[NSPresentationIntent parentIntent](v27, "parentIntent");
            ++*((_QWORD *)v110 + v100);
            goto LABEL_115;
          }
          if (v26 != 2)
            goto LABEL_115;
          v30 = v105 + 1;
          v31 = +[NSPresentationIntent listItemIntentWithIdentity:ordinal:nestedInsideIntent:](NSPresentationIntent, "listItemIntentWithIdentity:ordinal:nestedInsideIntent:");
          goto LABEL_60;
        case 32773:
          v97 = a4;
          fence_info = (_BYTE *)_NS_cmark_node_get_fence_info(node);
          if (fence_info)
          {
            v38 = a6;
            if (*fence_info)
            {
              v39 = a1;
              v40 = -[NSString initWithUTF8String:]([NSString alloc], "initWithUTF8String:", fence_info);
              goto LABEL_83;
            }
          }
          else
          {
            v38 = a6;
          }
          v39 = a1;
          v40 = 0;
LABEL_83:
          v48 = +[NSPresentationIntent codeBlockIntentWithIdentity:languageHint:nestedInsideIntent:](NSPresentationIntent, "codeBlockIntentWithIdentity:languageHint:nestedInsideIntent:", v105, v40, v27);

          if (!appendNodeText(v39, v97, node, v107, (uint64_t)v48, (void *)objc_msgSend(v106, "lastObject"), v102, v103, (uint64_t)v109, v38))goto LABEL_186;
          ++v105;
          v27 = -[NSPresentationIntent parentIntent](v48, "parentIntent");
          a1 = v39;
          a6 = v38;
          a4 = v97;
          goto LABEL_115;
        case 32774:
          v41 = v107 | 0x200;
          goto LABEL_67;
        case 32777:
          if (_NS_cmark_node_get_heading_level(node) - 1 > 5)
            goto LABEL_115;
          if (v26 == 3)
            goto LABEL_114;
          if (v26 != 2)
            goto LABEL_115;
          v30 = v105 + 1;
          v31 = +[NSPresentationIntent headerIntentWithIdentity:level:nestedInsideIntent:](NSPresentationIntent, "headerIntentWithIdentity:level:nestedInsideIntent:");
          goto LABEL_60;
        case 32778:
          v30 = v105 + 1;
          v42 = +[NSPresentationIntent thematicBreakIntentWithIdentity:nestedInsideIntent:](NSPresentationIntent, "thematicBreakIntentWithIdentity:nestedInsideIntent:");
          objc_msgSend(v104, "appendString:with:", CFSTR("⸻"), attributesForIntents(v107, (uint64_t)v42, (void *)objc_msgSend(v106, "lastObject")));
          v31 = -[NSPresentationIntent parentIntent](v42, "parentIntent");
          goto LABEL_60;
        default:
          if (type == *(_DWORD *)_NS_CMARK_NODE_STRIKETHROUGH)
          {
            if (v26 == 3)
            {
              v45 = v107 & 0xFFFFFFFFFFFFFFDFLL;
            }
            else
            {
              if (v26 != 2)
                goto LABEL_115;
              v45 = v107 | 0x20;
            }
LABEL_76:
            v107 = v45;
            goto LABEL_115;
          }
          if ((type - 49161) <= 1)
          {
            if (v26 != 2)
              goto LABEL_115;
            v88 = a6;
            v91 = (void *)objc_msgSend((id)objc_msgSend(v106, "lastObject"), "mutableCopy");
            url = (const char *)_NS_cmark_node_get_url(node);
            if (url)
            {
              v50 = -[NSString initWithBytesNoCopy:length:encoding:freeWhenDone:]([NSString alloc], "initWithBytesNoCopy:length:encoding:freeWhenDone:", url, strlen(url), 4, 0);
              if (-[NSString length](v50, "length"))
              {
                v98 = v50;
                if (!-[NSString length](v50, "length"))
                  goto LABEL_97;
                v93 = 0;
                v51 = 0;
                v52 = 0;
                do
                {
                  if (u_hasBinaryProperty(-[NSString characterAtIndex:](v50, "characterAtIndex:", v51), UCHAR_BIDI_CONTROL))
                  {
                    v53 = v93;
                    if (!v93)
                      v53 = (NSString *)-[NSString mutableCopy](v98, "mutableCopy");
                    v93 = v53;
                    -[NSString replaceCharactersInRange:withString:](v53, "replaceCharactersInRange:withString:", v51 - v52++, 1, &stru_1E0F56070);
                  }
                  ++v51;
                  v50 = v98;
                }
                while (v51 < -[NSString length](v98, "length"));
                a1 = v104;
                v54 = v93;
                if (!v93)
LABEL_97:
                  v54 = v98;
                v55 = v54;
                v56 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99E98]), "initWithString:relativeToURL:", v54, a5);
                if (v56)
                {
                  v57 = (void *)v56;
                  if (v32 == 49162)
                    v58 = CFSTR("NSImageURL");
                  else
                    v58 = CFSTR("NSLink");
                  objc_msgSend(v91, "setObject:forKey:", v56, v58);

                }
                v50 = v98;
              }

            }
            title = (const char *)_NS_cmark_node_get_title(node);
            if (title)
            {
              v60 = -[NSString initWithBytes:length:encoding:]([NSString alloc], "initWithBytes:length:encoding:", title, strlen(title), 4);
              if (-[NSString length](v60, "length"))
                objc_msgSend(v91, "setObject:forKey:", v60, CFSTR("NSAlternateDescription"));

            }
            objc_msgSend(v106, "addObject:", v91);

            v90 = objc_alloc_init(NSMutableString);
            _NS_cmark_node_set_user_data(node, 1);
            v61 = _NS_cmark_iter_next(v20);
            if (v61 == 1)
            {
              end_line = -1;
              end_column = -1;
              start_line = -1;
              start_column = -1;
            }
            else
            {
              v77 = v61;
              end_column = -1;
              end_line = -1;
              start_column = -1;
              start_line = -1;
              do
              {
                v78 = _NS_cmark_iter_get_node(v20);
                v79 = v78;
                if (start_line == -1)
                {
                  start_line = _NS_cmark_node_get_start_line(v78);
                  start_column = _NS_cmark_node_get_start_column(v79);
                }
                if (_NS_cmark_node_get_user_data(v79) == 1)
                  break;
                end_line = _NS_cmark_node_get_end_line(v79);
                end_column = _NS_cmark_node_get_end_column(v79);
                if (v77 != 3)
                {
                  literal = (const char *)_NS_cmark_node_get_literal(v79);
                  if (literal)
                  {
                    v81 = -[NSString initWithBytesNoCopy:length:encoding:freeWhenDone:]([NSString alloc], "initWithBytesNoCopy:length:encoding:freeWhenDone:", literal, strlen(literal), 4, 0);
                    if (-[NSString length](v81, "length"))
                      -[NSMutableString appendString:](v90, "appendString:", v81);

                  }
                }
                v77 = _NS_cmark_iter_next(v20);
              }
              while (v77 != 1);
            }
            v82 = v90;
            v83 = -[NSString length](v90, "length");
            if (v32 != 49162 || v83)
            {
              a6 = v88;
              if (-[NSAttributedStringMarkdownParsingOptions appliesSourcePositionAttributes](a4, "appliesSourcePositionAttributes")&& start_line >= 1&& start_column >= 1&& end_line >= 1&& end_column >= 1)
              {
                v86 = -[NSAttributedStringMarkdownSourcePosition initWithStartLine:startColumn:endLine:endColumn:]([NSAttributedStringMarkdownSourcePosition alloc], "initWithStartLine:startColumn:endLine:endColumn:", start_line, start_column, end_line, end_column);
                -[NSAttributedStringMarkdownSourcePosition setOffsetsFromUTF8:size:usingCache:](v86, "setOffsetsFromUTF8:size:usingCache:", v102, v103, v109);
                appendStringWithSourcePosition(a1, (uint64_t)v90, v107, (uint64_t)v27, (void *)objc_msgSend(v106, "lastObject"), (uint64_t)v86);

                v84 = v106;
                v82 = v90;
              }
              else
              {
                v84 = v106;
                objc_msgSend(a1, "appendString:with:", v90, attributesForIntents(v107, (uint64_t)v27, (void *)objc_msgSend(v106, "lastObject")));
              }
            }
            else
            {
              v84 = v106;
              objc_msgSend(a1, "appendString:with:", CFSTR("\uFFFC"), attributesForIntents(v107, (uint64_t)v27, (void *)objc_msgSend(v106, "lastObject")));
              a6 = v88;
            }

            v87 = v84;
LABEL_176:
            objc_msgSend(v87, "removeLastObject");
            goto LABEL_115;
          }
          if (type != 49164)
          {
            if (type == *(_DWORD *)_NS_CMARK_NODE_TABLE)
            {
              if (v26 == 3)
                goto LABEL_114;
              if (v26 != 2)
                goto LABEL_115;
              v89 = a6;
              table_columns = _NS_cmark_gfm_extensions_get_table_columns(node);
              table_alignments = _NS_cmark_gfm_extensions_get_table_alignments(node);
              if (table_alignments && table_columns)
              {
                v70 = (unsigned __int8 *)table_alignments;
                v71 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
                v72 = table_columns;
                do
                {
                  v74 = *v70++;
                  v73 = v74;
                  if (v74 == 114)
                    v75 = &off_1E0FBDF50;
                  else
                    v75 = &off_1E0FBDF68;
                  if (v73 == 108)
                    v75 = &off_1E0FBDF68;
                  if (v73 == 99)
                    v76 = &off_1E0FBDF38;
                  else
                    v76 = v75;
                  objc_msgSend(v71, "addObject:", v76);
                  --v72;
                }
                while (v72);
                a6 = v89;
              }
              else
              {
                a6 = v89;
              }
              v30 = v105 + 1;
              v27 = +[NSPresentationIntent tableIntentWithIdentity:columnCount:alignments:nestedInsideIntent:](NSPresentationIntent, "tableIntentWithIdentity:columnCount:alignments:nestedInsideIntent:");
              v96 = 0;
            }
            else
            {
              if (type == *(_DWORD *)_NS_CMARK_NODE_TABLE_ROW)
              {
                if (v26 != 3)
                {
                  if (v26 == 2)
                  {
                    if (_NS_cmark_gfm_extensions_get_table_row_is_header(node))
                      v85 = +[NSPresentationIntent tableHeaderRowIntentWithIdentity:nestedInsideIntent:](NSPresentationIntent, "tableHeaderRowIntentWithIdentity:nestedInsideIntent:", v105, v27);
                    else
                      v85 = +[NSPresentationIntent tableRowIntentWithIdentity:row:nestedInsideIntent:](NSPresentationIntent, "tableRowIntentWithIdentity:row:nestedInsideIntent:", v105, v96, v27);
                    v27 = v85;
                    ++v105;
                    v95 = 0;
                    ++v96;
                  }
                  goto LABEL_115;
                }
LABEL_114:
                v27 = -[NSPresentationIntent parentIntent](v27, "parentIntent");
                goto LABEL_115;
              }
              if (type != *(_DWORD *)_NS_CMARK_NODE_TABLE_CELL)
                goto LABEL_115;
              if (v26 == 3)
                goto LABEL_114;
              if (v26 != 2)
                goto LABEL_115;
              v30 = v105 + 1;
              v27 = +[NSPresentationIntent tableCellIntentWithIdentity:column:nestedInsideIntent:](NSPresentationIntent, "tableCellIntentWithIdentity:column:nestedInsideIntent:");
              ++v95;
            }
            goto LABEL_61;
          }
          if (!-[NSAttributedStringMarkdownParsingOptions allowsExtendedAttributes](a4, "allowsExtendedAttributes"))
            goto LABEL_115;
          if (v26 == 3)
          {
            v87 = v106;
            goto LABEL_176;
          }
          if (v26 != 2)
            goto LABEL_115;
          attributes = (const char *)_NS_cmark_node_get_attributes(node);
          v65 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytesNoCopy:length:freeWhenDone:", attributes, strlen(attributes), 0);
          v108 = 0;
          v66 = objc_msgSend(a1, "parseExtendedAttributesFromData:error:", v65, &v108);

          if (v66)
          {
            v67 = (void *)objc_msgSend((id)objc_msgSend(v106, "lastObject"), "mutableCopy");
            objc_msgSend(v67, "addEntriesFromDictionary:", v66);
            objc_msgSend(v106, "addObject:", v67);

            goto LABEL_115;
          }
          if (-[NSAttributedStringMarkdownParsingOptions failurePolicy](a4, "failurePolicy"))
          {
            objc_msgSend(v106, "addObject:", objc_msgSend(v106, "lastObject"));
            goto LABEL_115;
          }
          if (a6)
            *a6 = v108;
LABEL_186:
          v22 = 0;
          v23 = v101;
LABEL_22:
          _NS_cmark_iter_free(v20);
          _NS_cmark_node_free(v23);
          _NS_cmark_parser_free(v14);
          return v22;
      }
  }
}

void _NSInflect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v30[9];
  _QWORD v31[9];
  _QWORD v32[17];
  char v33;
  _QWORD v34[5];
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  void (*v39)(uint64_t);
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  if (+[NSThread isMainThread](NSThread, "isMainThread"))
    v22 = _NSInflectionObserver;
  else
    v22 = 0;
  v35 = 0;
  v36 = &v35;
  v37 = 0x3052000000;
  v38 = __Block_byref_object_copy__7;
  v39 = __Block_byref_object_dispose__7;
  v40 = 0;
  v34[0] = MEMORY[0x1E0C809B0];
  v34[1] = 3221225472;
  v34[2] = ___NSInflect_block_invoke;
  v34[3] = &unk_1E0F4E898;
  v34[4] = &v35;
  v23 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v24 = (*(uint64_t (**)(uint64_t))(a5 + 16))(a5);
  v32[0] = MEMORY[0x1E0C809B0];
  v32[1] = 3221225472;
  v32[2] = ___NSInflect_block_invoke_2;
  v32[3] = &unk_1E0F4E960;
  v33 = a6;
  v32[15] = a15;
  v32[16] = v24;
  v32[4] = a2;
  v32[5] = v22;
  v32[10] = a13;
  v32[11] = a12;
  v32[6] = v23;
  v32[7] = a4;
  v32[8] = a3;
  v32[9] = a11;
  v32[12] = a10;
  v32[13] = v34;
  v32[14] = a14;
  (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD *))(a8 + 16))(a8, 0, v24, v32);
  v25 = (*(uint64_t (**)(uint64_t))(a5 + 16))(a5);
  v31[0] = MEMORY[0x1E0C809B0];
  v31[1] = 3221225472;
  v31[2] = ___NSInflect_block_invoke_37;
  v31[3] = &unk_1E0F4E988;
  v31[4] = v23;
  v31[5] = a2;
  v31[6] = a10;
  v31[7] = a17;
  v31[8] = a15;
  (*(void (**)(uint64_t, const __CFString *, _QWORD, uint64_t, _QWORD *))(a7 + 16))(a7, CFSTR("NSInflectionAlternative"), 0, v25, v31);
  v26 = (*(uint64_t (**)(uint64_t))(a5 + 16))(a5);
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = ___NSInflect_block_invoke_2_39;
  v30[3] = &unk_1E0F4E9B0;
  v30[4] = a1;
  v30[5] = a12;
  v30[6] = a13;
  v30[7] = a16;
  v30[8] = a15;
  (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD *))(a9 + 16))(a9, 0, v26, v30);

  _Block_object_dispose(&v35, 8);
}

void sub_1818C27AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1818C298C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1818C29A8(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x1818C29B4);
}

void sub_1818C33EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 72), 8);
  _Unwind_Resume(a1);
}

id newAttributedStringFromMarkdown(uint64_t a1, uint64_t a2, NSAttributedStringMarkdownParsingOptions *a3, uint64_t a4, NSError **a5)
{
  _NSAttributedStringFromMarkdownCreatorConcrete *v10;
  id v11;

  v10 = objc_alloc_init(_NSAttributedStringFromMarkdownCreatorConcrete);
  if (_NSAttributedStringFromMarkdownWithCreator(v10, a1, a2, a3, a4, a5))
    v11 = -[_NSAttributedStringFromMarkdownCreatorConcrete result](v10, "result");
  else
    v11 = 0;

  return v11;
}

unint64_t closure #2 in Data.init<A>(_:)@<X0>(unint64_t __src@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!__src)
    goto LABEL_7;
  if (!a2)
  {
    __src = 0;
LABEL_7:
    v7 = 0xC000000000000000;
    goto LABEL_10;
  }
  v5 = __src;
  if (a2 <= 14)
  {
    __src = specialized Data.InlineData.init(_:)((_BYTE *)__src, (_BYTE *)(__src + a2));
    v7 = v8 & 0xFFFFFFFFFFFFFFLL;
  }
  else
  {
    type metadata accessor for __DataStorage();
    v6 = swift_allocObject();
    __DataStorage.init(bytes:length:)(v5, a2);
    if ((unint64_t)a2 >= 0x7FFFFFFF)
    {
      type metadata accessor for Data.RangeReference();
      __src = swift_allocObject();
      *(_QWORD *)(__src + 16) = 0;
      *(_QWORD *)(__src + 24) = a2;
      v7 = v6 | 0x8000000000000000;
    }
    else
    {
      __src = a2 << 32;
      v7 = v6 | 0x4000000000000000;
    }
  }
LABEL_10:
  *a3 = __src;
  a3[1] = v7;
  return __src;
}

uint64_t StringProtocol.localizedUppercase.getter(uint64_t a1, uint64_t a2)
{
  return StringProtocol.localizedLowercase.getter(a1, a2, (uint64_t (*)(uint64_t, uint64_t))ICU.CaseMap.uppercase(_:), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEA628]);
}

unint64_t URL.lastPathComponent.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;
  Swift::String v5;
  Swift::Int countAndFlagsBits;
  unint64_t object;
  id v8;
  void *v9;
  unint64_t Path;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  char v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = *(void **)v0;
  v1 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  if (_foundation_swift_url_feature_enabled())
  {
    v24 = (uint64_t)v2;
    v25 = v1;
    v26 = v3;
    swift_retain();
    v4 = v2;
    swift_retain();
    v5 = URL.path(percentEncoded:)(1);
    countAndFlagsBits = v5._countAndFlagsBits;
    v23 = v5;
    swift_bridgeObjectRetain();
    if (String.count.getter() < 2)
    {
      object = (unint64_t)v5._object;
    }
    else
    {
      object = (unint64_t)v5._object;
      if ((specialized BidirectionalCollection.last.getter(v5._countAndFlagsBits, (unint64_t)v5._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        countAndFlagsBits = v23._countAndFlagsBits;
        object = (unint64_t)v23._object;
      }
    }
    v24 = Set.init(minimumCapacity:)();
    specialized Set._Variant.insert(_:)(&v22, 0x2FuLL);
    v11 = v24;
    v12 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if ((object & 0x2000000000000000) != 0)
      v13 = HIBYTE(object) & 0xF;
    else
      v13 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (v13)
    {
      swift_bridgeObjectRetain();
      if ((object & 0x1000000000000000) != 0)
      {
        v16 = 0;
        v17 = 1;
      }
      else
      {
        if ((object & 0x2000000000000000) != 0)
        {
          v24 = countAndFlagsBits;
          v25 = object & 0xFFFFFFFFFFFFFFLL;
          v14 = &v24;
          v15 = HIBYTE(object) & 0xF;
        }
        else
        {
          if ((countAndFlagsBits & 0x1000000000000000) != 0)
          {
            v14 = (uint64_t *)((object & 0xFFFFFFFFFFFFFFFLL) + 32);
          }
          else
          {
            v14 = (uint64_t *)_StringObject.sharedUTF8.getter();
            v12 = v21;
          }
          v15 = v12;
        }
        v16 = specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)((uint64_t)v14, v15, v11, (uint64_t (*)(_QWORD))specialized StringProtocol.hexToAscii(_:));
        v17 = v18;
      }
      if (v17 == 1)
      {
        swift_bridgeObjectRetain();
        v16 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(countAndFlagsBits, object, v11);
        v17 = v19;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        if (v17)
          goto LABEL_23;
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v17)
          goto LABEL_23;
      }
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v16 = 0;
      v17 = 0xE000000000000000;
      goto LABEL_26;
    }
    swift_bridgeObjectRelease();
    v16 = 0;
    v17 = 0xE000000000000000;
LABEL_23:
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_26:
    swift_bridgeObjectRetain();
    Path = String._lastPathComponent.getter(v16, v17);
    swift_bridgeObjectRelease_n();
    return Path;
  }
  v8 = objc_msgSend(v2, sel_lastPathComponent);
  if (!v8)
    return 0;
  v9 = v8;
  Path = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v8);

  return Path;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CFStringRef()
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for CFStringRef);
  return _CFObject.hash(into:)();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance String._BlockSearchingOptions(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance UInt(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Int64(a1, a2, (SEL *)&selRef_initWithUnsignedInteger_);
}

CFCharacterSetRef static CharacterSet.punctuationCharacters.getter@<X0>(CFCharacterSetRef *a1@<X8>)
{
  CFCharacterSetRef result;
  CFCharacterSetRef v3;

  result = CFCharacterSetGetPredefined(kCFCharacterSetPunctuation);
  if (result)
  {
    v3 = result;
    type metadata accessor for __CharacterSetStorage();
    result = (CFCharacterSetRef)swift_allocObject();
    *((_QWORD *)result + 2) = v3;
    *((_BYTE *)result + 24) = 0;
    *a1 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for _LocaleProtocol.pref(for:) in conformance _LocaleAutoupdating(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;

  if (one-time initialization token for cache != -1)
    swift_once();
  LocaleCache.current.getter();
  v5 = v4;
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 488))(a1, a2, ObjectType, v5);
  return swift_unknownObjectRelease();
}

uint64_t _LocaleICU.pref(for:)@<X0>(unint64_t a1@<X0>, int64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  unint64_t v9;
  int v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  id v32;
  _BYTE v33[144];
  _BYTE v34[48];
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  unsigned __int8 v44;
  unsigned __int8 v45;

  outlined init with take of LocalePreferences?(v3 + 40, (uint64_t)v33);
  outlined init with take of LocalePreferences?((uint64_t)v33, (uint64_t)v34);
  result = _s10Foundation17LocalePreferencesVSgWOg((uint64_t)v34);
  if ((_DWORD)result == 1)
    goto LABEL_7;
  v9 = 0xD000000000000010;
  if (a1 != 0xD000000000000010 || a2 != 0x800000018230BBD0)
  {
    result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if ((result & 1) == 0)
    {
      v11 = 0xD000000000000015;
      if (a1 == 0xD000000000000015 && a2 == 0x800000018230BBF0
        || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        if (v42 == 2)
          goto LABEL_7;
        v12 = (v42 & 1) == 0;
        v13 = 0x736568636E49;
        if ((v42 & 1) == 0)
          v13 = 0x74656D69746E6543;
        v14 = 0xE600000000000000;
        v15 = 0xEB00000000737265;
        goto LABEL_16;
      }
      result = 0xD000000000000014;
      if (a1 == 0xD000000000000014 && a2 == 0x800000018230BC10
        || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        if (v43 == 2)
          goto LABEL_7;
        v12 = (v43 & 1) == 0;
        v13 = 0x737569736C6543;
        if ((v43 & 1) == 0)
          v13 = 0x65686E6572686146;
        v14 = 0xE700000000000000;
        v15 = 0xEA00000000007469;
LABEL_16:
        *(_QWORD *)(a3 + 24) = MEMORY[0x1E0DEA968];
        if (v12)
          v14 = v15;
        *(_QWORD *)a3 = v13;
        *(_QWORD *)(a3 + 8) = v14;
        return result;
      }
      result = 0xD000000000000011;
      if (a1 != 0xD000000000000011 || a2 != 0x800000018230BC30)
      {
        result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0)
        {
          if (a1 != 0xD000000000000017 || a2 != 0x800000018230BC50)
          {
            result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0)
            {
              if (a1 == 0xD000000000000017 && a2 == 0x800000018230BC70
                || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
              {
                result = (uint64_t)v37;
                if (!v37)
                  goto LABEL_7;
                v32 = v37;
                goto LABEL_78;
              }
              if (a1 == 0xD000000000000017 && a2 == 0x800000018230BC90
                || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
              {
                v10 = v44;
                goto LABEL_6;
              }
              v9 = a1;
              v4 = 0xD000000000000017;
              if (a1 == 0xD000000000000017 && a2 == 0x800000018230BCB0
                || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
              {
                v10 = v45;
                goto LABEL_6;
              }
LABEL_88:
              v25 = v4 + 2;
              if (v9 == v4 + 2 && a2 == 0x800000018230BCD0
                || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                result = v38;
                goto LABEL_92;
              }
LABEL_95:
              if (v9 == v25 && a2 == 0x800000018230BCF0 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                result = v39;
              }
              else if (v9 == v4 + 4 && a2 == 0x800000018230BD10
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                result = v40;
              }
              else
              {
                if (v9 != v11 || a2 != 0x800000018230BD30)
                {
                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                  if ((result & 1) == 0)
                    goto LABEL_7;
                }
                result = v41;
              }
LABEL_92:
              v32 = (id)result;
              if (!result)
                goto LABEL_7;
LABEL_78:
              type metadata accessor for CFDictionaryRef(0);
              *(_QWORD *)(a3 + 24) = v29;
              *(_QWORD *)a3 = v32;
              return (uint64_t)v32;
            }
          }
          v23 = v36;
          if (!v36)
            goto LABEL_7;
          v31 = (_QWORD *)(v36 + 64);
          v11 = 1 << *(_BYTE *)(v36 + 32);
          if (v11 < 64)
            v24 = ~(-1 << v11);
          else
            v24 = -1;
          v25 = v24 & *(_QWORD *)(v36 + 64);
          outlined retain of LocalePreferences?((uint64_t)v33, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
          swift_bridgeObjectRetain();
          v19 = MEMORY[0x1E0DEE9E0];
          if (v25)
          {
            v26 = __clz(__rbit64(v25));
          }
          else
          {
            if ((unint64_t)(v11 + 63) >> 6 <= 1)
              goto LABEL_72;
            v27 = v31[1];
            a2 = 1;
            if (!v27)
            {
              a2 = 2;
              if ((unint64_t)(v11 + 63) >> 6 <= 2)
                goto LABEL_72;
              v27 = v31[2];
              if (!v27)
              {
                a2 = 3;
                if ((unint64_t)(v11 + 63) >> 6 <= 3)
                  goto LABEL_72;
                v27 = v31[3];
                if (!v27)
                {
                  v28 = 4;
                  if ((unint64_t)(v11 + 63) >> 6 <= 4)
                    goto LABEL_72;
                  v27 = v31[4];
                  if (!v27)
                  {
                    while (1)
                    {
                      a2 = v28 + 1;
                      if (__OFADD__(v28, 1))
                        break;
                      if (a2 >= (uint64_t)((unint64_t)(v11 + 63) >> 6))
                        goto LABEL_72;
                      v27 = v31[a2];
                      ++v28;
                      if (v27)
                        goto LABEL_70;
                    }
                    __break(1u);
                    goto LABEL_95;
                  }
                  a2 = 4;
                }
              }
            }
LABEL_70:
            v26 = __clz(__rbit64(v27)) + (a2 << 6);
          }
          __asm { BR              X8 }
        }
      }
      v16 = v35;
      if (!v35)
        goto LABEL_7;
      v30 = (_QWORD *)(v35 + 64);
      v11 = 1 << *(_BYTE *)(v35 + 32);
      if (v11 < 64)
        v17 = ~(-1 << v11);
      else
        v17 = -1;
      v18 = v17 & *(_QWORD *)(v35 + 64);
      outlined retain of LocalePreferences?((uint64_t)v33, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
      swift_bridgeObjectRetain();
      v19 = MEMORY[0x1E0DEE9E0];
      if (v18)
      {
        v20 = __clz(__rbit64(v18));
        goto LABEL_48;
      }
      if ((unint64_t)(v11 + 63) >> 6 > 1)
      {
        v21 = v30[1];
        a2 = 1;
        if (v21)
          goto LABEL_47;
        a2 = 2;
        if ((unint64_t)(v11 + 63) >> 6 <= 2)
          goto LABEL_72;
        v21 = v30[2];
        if (v21)
          goto LABEL_47;
        a2 = 3;
        if ((unint64_t)(v11 + 63) >> 6 <= 3)
          goto LABEL_72;
        v21 = v30[3];
        if (v21)
        {
LABEL_47:
          v20 = __clz(__rbit64(v21)) + (a2 << 6);
LABEL_48:
          __asm { BR              X8 }
        }
        v22 = 4;
        if ((unint64_t)(v11 + 63) >> 6 > 4)
        {
          v21 = v30[4];
          if (v21)
          {
            a2 = 4;
            goto LABEL_47;
          }
          while (1)
          {
            a2 = v22 + 1;
            if (__OFADD__(v22, 1))
              break;
            if (a2 >= (uint64_t)((unint64_t)(v11 + 63) >> 6))
              goto LABEL_72;
            v21 = v30[a2];
            ++v22;
            if (v21)
              goto LABEL_47;
          }
          __break(1u);
          __break(1u);
          goto LABEL_88;
        }
      }
LABEL_72:
      swift_release();
      *(_QWORD *)(a3 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Int]);
      result = outlined retain of LocalePreferences?((uint64_t)v33, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
      *(_QWORD *)a3 = v19;
      return result;
    }
  }
  v10 = v34[0];
LABEL_6:
  if (v10 == 2)
  {
LABEL_7:
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return result;
  }
  *(_QWORD *)(a3 + 24) = MEMORY[0x1E0DEAFA0];
  *(_BYTE *)a3 = v10 & 1;
  return result;
}

uint64_t dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Int32(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5, SEL *a6)
{
  id v8;
  id v9;
  char v10;

  v8 = objc_msgSend(a1, *a5);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  v9 = objc_msgSend(objc_allocWithZone((Class)NSNumber), *a6, v8);
  v10 = static NSObject.== infix(_:_:)();

  if ((v10 & 1) != 0)
  {
    *(_DWORD *)a2 = (_DWORD)v8;
    *(_BYTE *)(a2 + 4) = 0;
  }
  return v10 & 1;
}

id _NSGetUnsignedIntValueWithMethod(uint64_t a1, uint64_t a2, objc_method *a3)
{
  id v5;
  IMP Implementation;
  SEL Name;

  v5 = objc_allocWithZone((Class)NSNumber);
  Implementation = method_getImplementation(a3);
  Name = method_getName(a3);
  return (id)objc_msgSend(v5, "initWithUnsignedInt:", ((uint64_t (*)(uint64_t, SEL))Implementation)(a1, Name));
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance Date(double *a1, double *a2)
{
  return *a2 < *a1;
}

id Double.init(truncating:)(void *a1)
{
  return objc_msgSend(a1, sel_doubleValue);
}

id protocol witness for CustomStringConvertible.description.getter in conformance NSObject(uint64_t a1, uint64_t a2, SEL *a3)
{
  id *v3;
  id v4;
  id v5;

  v4 = objc_msgSend(*v3, *a3);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);

  return v5;
}

void *static AttributeScope.scopeDescription.getter(Swift::UInt a1, unint64_t a2)
{
  void *v4;
  unint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  unint64_t v52;
  uint64_t v53;
  _BOOL8 v54;
  char v55;
  char v56;
  uint64_t *v57;
  _QWORD *v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  unint64_t v65;
  int64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  _QWORD *v76;
  unint64_t v77;
  int64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char isUniquelyReferenced_nonNull_native;
  char v89;
  unint64_t v90;
  uint64_t v91;
  _BOOL8 v92;
  uint64_t v93;
  unint64_t v94;
  char v95;
  int v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  unint64_t v118;
  uint64_t v119;
  _BOOL8 v120;
  Swift::UInt v121;
  char v122;
  char v123;
  uint64_t *v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  unint64_t v130;
  int64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  __int128 v140;
  _QWORD *v141;
  unint64_t v142;
  int64_t v143;
  uint64_t v144;
  uint64_t v145;
  void *result;
  uint64_t v147;
  unint64_t v148;
  int64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  __int128 v159;
  _QWORD *v160;
  unint64_t v161;
  int64_t v162;
  int64_t v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char v174;
  char v175;
  unint64_t v176;
  uint64_t v177;
  _BOOL8 v178;
  uint64_t v179;
  unint64_t v180;
  char v181;
  uint64_t *v182;
  uint64_t *v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  int64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  int64_t v194;
  unint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  __int128 v201;
  _QWORD *v202;
  unint64_t v203;
  int64_t v204;
  os_unfair_lock_s *v205;
  uint64_t v206;
  Swift::UInt v207;
  int64_t v208;
  Swift::UInt v209;
  Swift::UInt v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  _QWORD *v215;
  uint64_t v216;
  int64_t v217;
  uint64_t v218;
  char v219;
  char v220;
  uint64_t v221;
  uint64_t v222;
  char v223;
  char v224;
  uint64_t v225;
  int64_t v226;
  __int128 v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t (*v231)();
  uint64_t v232;
  _QWORD *v233;

  if (one-time initialization token for _loadedScopeCache != -1)
    goto LABEL_257;
  while (1)
  {
    v4 = &unk_1EDC3E000;
    v5 = _loadedScopeCache + 16;
    v6 = (os_unfair_lock_s *)(_loadedScopeCache + 40);
    swift_retain();
    os_unfair_lock_lock(v6);
    closure #1 in static AttributeScope.scopeDescription.getter(v5, a1, &v227);
    os_unfair_lock_unlock(v6);
    swift_release();
    v7 = v227;
    if ((_QWORD)v227)
      return (void *)v7;
    v8 = 0;
    v7 = MEMORY[0x1E0DEE9E0];
    v225 = MEMORY[0x1E0DEE9E0];
LABEL_4:
    v9 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 > 0x7FFuLL)
    {
LABEL_7:
      swift_getKeyPath();
      v10 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
      swift_release();
      v11 = (unsigned int *)(*(_QWORD *)(a1 + v10) + 36);
LABEL_8:
      v12 = *v11;
LABEL_9:
      if (v8 == v12)
        goto LABEL_250;
      goto LABEL_10;
    }
    if (v9 == 512)
    {
      swift_getKeyPath();
      v79 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
      swift_release();
      v11 = (unsigned int *)(*(_QWORD *)(a1 + v79) + 20);
      goto LABEL_8;
    }
    if (!v9)
      goto LABEL_7;
    v80 = static Metadata.Kind.tuple.getter();
    if (v80 <= 0x7FF && v80 == v9)
    {
      MEMORY[0x186DA3B9C](a1);
      v12 = TupleMetadata.Elements.endIndex.getter();
      if (TupleMetadata.Elements.endIndex.getter() < 0)
      {
        __break(1u);
LABEL_259:
        __break(1u);
LABEL_260:
        __break(1u);
LABEL_261:
        __break(1u);
LABEL_262:
        __break(1u);
LABEL_263:
        __break(1u);
LABEL_264:
        __break(1u);
LABEL_265:
        __break(1u);
LABEL_266:
        __break(1u);
LABEL_267:
        __break(1u);
LABEL_268:
        __break(1u);
        goto LABEL_269;
      }
      v81 = TupleMetadata.Elements.endIndex.getter();
      if (v12 < 0 || v81 < v12)
        goto LABEL_259;
      goto LABEL_9;
    }
    if (!v8)
    {
LABEL_250:
      v205 = (os_unfair_lock_s *)*((_QWORD *)v4 + 179);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      os_unfair_lock_lock(v205 + 10);
      closure #2 in static AttributeScope.scopeDescription.getter((uint64_t)&v205[4], v7, v225, a1);
      os_unfair_lock_unlock(v205 + 10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return (void *)v7;
    }
LABEL_10:
    v13 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 > 0x7FFuLL)
      goto LABEL_13;
    if (v13 == 512)
    {
      swift_getKeyPath();
      v82 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
      swift_release();
      v15 = (unsigned int *)(*(_QWORD *)(a1 + v82) + 20);
      goto LABEL_14;
    }
    if (!v13)
    {
LABEL_13:
      swift_getKeyPath();
      v14 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
      swift_release();
      v15 = (unsigned int *)(*(_QWORD *)(a1 + v14) + 36);
LABEL_14:
      v16 = *v15;
      goto LABEL_15;
    }
    v83 = static Metadata.Kind.tuple.getter();
    v16 = 0;
    if (v83 <= 0x7FF && v83 == v13)
    {
      MEMORY[0x186DA3B9C](a1);
      v16 = TupleMetadata.Elements.endIndex.getter();
      if (TupleMetadata.Elements.endIndex.getter() < 0)
        goto LABEL_260;
      v84 = TupleMetadata.Elements.endIndex.getter();
      if (v16 < 0 || v84 < v16)
        goto LABEL_261;
    }
LABEL_15:
    if (v8 < v16)
      break;
    __break(1u);
LABEL_253:
    __break(1u);
LABEL_254:
    __break(1u);
LABEL_255:
    __break(1u);
LABEL_256:
    __break(1u);
LABEL_257:
    swift_once();
  }
  v17 = *(_QWORD *)a1;
  v18 = static Metadata.Kind.tuple.getter();
  if (v17 >= 0x800)
  {
    if (v18 - 2048 >= 0xFFFFFFFFFFFFF801)
      goto LABEL_23;
    goto LABEL_21;
  }
  if (v18 >= 0x800)
  {
    if (v17)
      goto LABEL_23;
    goto LABEL_21;
  }
  if (v17 == v18)
  {
LABEL_21:
    MEMORY[0x186DA3B9C](a1);
    v19 = v8;
    TupleMetadata.Elements.subscript.getter();
    v20 = TupleMetadata.Elements.Element.metadata.getter();
    goto LABEL_26;
  }
LABEL_23:
  v21 = TypeMetadata.descriptor.getter();
  swift_getKeyPath();
  dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  v22 = *(_DWORD *)(v21 + 16);
  v227 = *(_OWORD *)v21;
  LODWORD(v228) = v22;
  swift_getAtKeyPath();
  swift_release();
  v23 = FieldDescriptor.subscript.getter();
  swift_getKeyPath();
  dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  v24 = *(_DWORD *)(v23 + 8);
  *(_QWORD *)&v227 = *(_QWORD *)v23;
  DWORD2(v227) = v24;
  swift_getAtKeyPath();
  swift_release();
  v20 = MangledTypeReference.standardSubstitution.getter();
  if (!v20)
    v20 = TypeMetadata._resolve(_:)();
  v19 = v8;
LABEL_26:
  v25 = swift_conformsToProtocol2();
  if (v25)
    v26 = v25;
  else
    v26 = 0;
  if (v25)
    v27 = v20;
  else
    v27 = 0;
  if (v27)
  {
    v85 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 24))(v27, v26);
    v87 = v86;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v227 = v7;
    v222 = v85;
    v90 = specialized __RawDictionaryStorage.find<A>(_:)(v85, v87);
    v91 = *(_QWORD *)(v7 + 16);
    v92 = (v89 & 1) == 0;
    v93 = v91 + v92;
    if (__OFADD__(v91, v92))
      goto LABEL_262;
    if (*(_QWORD *)(v7 + 24) < v93)
    {
      v219 = v89;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v93, isUniquelyReferenced_nonNull_native);
      v7 = v227;
      v94 = specialized __RawDictionaryStorage.find<A>(_:)(v85, v87);
      v96 = v95 & 1;
      v89 = v219;
      if ((v219 & 1) != v96)
        goto LABEL_272;
      v90 = v94;
LABEL_106:
      if ((v89 & 1) == 0)
        goto LABEL_196;
LABEL_107:
      v97 = (uint64_t *)(*(_QWORD *)(v7 + 56) + 16 * v90);
      *v97 = v27;
      v97[1] = v26;
      goto LABEL_198;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_106;
    v220 = v89;
    v210 = a1;
    v212 = a2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedStringKey.Type>);
    v144 = static _DictionaryStorage.copy(original:)();
    v145 = v144;
    if (!*(_QWORD *)(v7 + 16))
      goto LABEL_195;
    result = (void *)(v144 + 64);
    v147 = v7 + 64;
    v148 = (unint64_t)((1 << *(_BYTE *)(v145 + 32)) + 63) >> 6;
    if (v145 != v7 || (unint64_t)result >= v147 + 8 * v148)
      result = memmove(result, (const void *)(v7 + 64), 8 * v148);
    v149 = 0;
    *(_QWORD *)(v145 + 16) = *(_QWORD *)(v7 + 16);
    v150 = 1 << *(_BYTE *)(v7 + 32);
    if (v150 < 64)
      v151 = ~(-1 << v150);
    else
      v151 = -1;
    v152 = v151 & *(_QWORD *)(v7 + 64);
    v217 = (unint64_t)(v150 + 63) >> 6;
    while (1)
    {
      if (v152)
      {
        v153 = __clz(__rbit64(v152));
        v152 &= v152 - 1;
        v154 = v153 | (v149 << 6);
      }
      else
      {
        v60 = __OFADD__(v149++, 1);
        if (v60)
          goto LABEL_268;
        if (v149 >= v217)
          goto LABEL_195;
        v161 = *(_QWORD *)(v147 + 8 * v149);
        if (!v161)
        {
          v162 = v149 + 1;
          if (v149 + 1 >= v217)
            goto LABEL_195;
          v161 = *(_QWORD *)(v147 + 8 * v162);
          if (v161)
            goto LABEL_178;
          v162 = v149 + 2;
          if (v149 + 2 >= v217)
            goto LABEL_195;
          v161 = *(_QWORD *)(v147 + 8 * v162);
          if (v161)
          {
LABEL_178:
            v149 = v162;
          }
          else
          {
            v163 = v149 + 3;
            if (v149 + 3 >= v217)
              goto LABEL_195;
            v164 = v147;
            v161 = *(_QWORD *)(v147 + 8 * v163);
            if (!v161)
            {
              v163 = v149 + 4;
              if (v149 + 4 >= v217)
                goto LABEL_195;
              v161 = *(_QWORD *)(v147 + 8 * v163);
              if (!v161)
              {
                v163 = v149 + 5;
                if (v149 + 5 >= v217)
                  goto LABEL_195;
                v161 = *(_QWORD *)(v147 + 8 * v163);
                if (!v161)
                {
                  v163 = v149 + 6;
                  if (v149 + 6 >= v217)
                    goto LABEL_195;
                  v161 = *(_QWORD *)(v147 + 8 * v163);
                  if (!v161)
                  {
                    v163 = v149 + 7;
                    if (v149 + 7 >= v217)
                      goto LABEL_195;
                    v161 = *(_QWORD *)(v147 + 8 * v163);
                    if (!v161)
                    {
                      while (1)
                      {
                        v149 = v163 + 1;
                        if (__OFADD__(v163, 1))
                          goto LABEL_273;
                        if (v149 >= v217)
                          break;
                        v147 = v164;
                        v161 = *(_QWORD *)(v164 + 8 * v149);
                        ++v163;
                        if (v161)
                          goto LABEL_179;
                      }
LABEL_195:
                      swift_bridgeObjectRelease();
                      a1 = v210;
                      a2 = v212;
                      v7 = v145;
                      if ((v220 & 1) != 0)
                        goto LABEL_107;
LABEL_196:
                      *(_QWORD *)(v7 + 8 * (v90 >> 6) + 64) |= 1 << v90;
                      v165 = (uint64_t *)(*(_QWORD *)(v7 + 48) + 16 * v90);
                      *v165 = v222;
                      v165[1] = v87;
                      v166 = (uint64_t *)(*(_QWORD *)(v7 + 56) + 16 * v90);
                      *v166 = v27;
                      v166[1] = v26;
                      v167 = *(_QWORD *)(v7 + 16);
                      v60 = __OFADD__(v167, 1);
                      v168 = v167 + 1;
                      if (v60)
                        goto LABEL_263;
                      *(_QWORD *)(v7 + 16) = v168;
                      swift_bridgeObjectRetain();
LABEL_198:
                      v4 = &unk_1EDC3E000;
                      v8 = v19 + 1;
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      v169 = swift_conformsToProtocol2();
                      if (v169)
                        v170 = v169;
                      else
                        v170 = 0;
                      if (!v169)
                        v27 = 0;
                      if (v27)
                      {
                        v216 = v7;
                        v214 = v19;
                        v171 = (*(uint64_t (**)(uint64_t, uint64_t))(v170 + 24))(v27, v170);
                        v173 = v172;
                        v174 = swift_isUniquelyReferenced_nonNull_native();
                        *(_QWORD *)&v227 = v225;
                        v176 = specialized __RawDictionaryStorage.find<A>(_:)(v171, v173);
                        v177 = *(_QWORD *)(v225 + 16);
                        v178 = (v175 & 1) == 0;
                        v179 = v177 + v178;
                        if (__OFADD__(v177, v178))
                          goto LABEL_266;
                        if (*(_QWORD *)(v225 + 24) < v179)
                        {
                          v223 = v175;
                          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v179, v174);
                          v121 = v227;
                          v180 = specialized __RawDictionaryStorage.find<A>(_:)(v171, v173);
                          if ((v223 & 1) != (v181 & 1))
                            goto LABEL_272;
                          v176 = v180;
                          if ((v223 & 1) == 0)
                            goto LABEL_211;
                          goto LABEL_208;
                        }
                        if ((v174 & 1) != 0)
                        {
                          v121 = v225;
                          if ((v175 & 1) == 0)
                            goto LABEL_211;
                          goto LABEL_208;
                        }
                        v224 = v175;
                        v221 = v171;
                        v213 = a2;
                        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, MarkdownDecodableAttributedStringKey.Type>);
                        v187 = static _DictionaryStorage.copy(original:)();
                        v121 = v187;
                        if (!*(_QWORD *)(v225 + 16))
                          goto LABEL_248;
                        result = (void *)(v187 + 64);
                        v188 = v225 + 64;
                        v189 = (unint64_t)((1 << *(_BYTE *)(v121 + 32)) + 63) >> 6;
                        if (v121 != v225 || (unint64_t)result >= v188 + 8 * v189)
                          result = memmove(result, (const void *)(v225 + 64), 8 * v189);
                        v190 = 0;
                        *(_QWORD *)(v121 + 16) = *(_QWORD *)(v225 + 16);
                        v191 = 1 << *(_BYTE *)(v225 + 32);
                        if (v191 < 64)
                          v192 = ~(-1 << v191);
                        else
                          v192 = -1;
                        v193 = v192 & *(_QWORD *)(v225 + 64);
                        v194 = (unint64_t)(v191 + 63) >> 6;
                        while (2)
                        {
                          if (v193)
                          {
                            v195 = __clz(__rbit64(v193));
                            v193 &= v193 - 1;
                            v196 = v195 | (v190 << 6);
LABEL_223:
                            v197 = 16 * v196;
                            v198 = (uint64_t *)(*(_QWORD *)(v225 + 48) + v197);
                            v200 = *v198;
                            v199 = v198[1];
                            v201 = *(_OWORD *)(*(_QWORD *)(v225 + 56) + v197);
                            v202 = (_QWORD *)(*(_QWORD *)(v121 + 48) + v197);
                            *v202 = v200;
                            v202[1] = v199;
                            *(_OWORD *)(*(_QWORD *)(v121 + 56) + v197) = v201;
                            result = (void *)swift_bridgeObjectRetain();
                            continue;
                          }
                          break;
                        }
                        v60 = __OFADD__(v190++, 1);
                        if (v60)
                          goto LABEL_271;
                        if (v190 >= v194)
                          goto LABEL_248;
                        v203 = *(_QWORD *)(v188 + 8 * v190);
                        if (v203)
                        {
LABEL_243:
                          v193 = (v203 - 1) & v203;
                          v196 = __clz(__rbit64(v203)) + (v190 << 6);
                          goto LABEL_223;
                        }
                        v204 = v190 + 1;
                        if (v190 + 1 >= v194)
                          goto LABEL_248;
                        v203 = *(_QWORD *)(v188 + 8 * v204);
                        if (v203)
                          goto LABEL_242;
                        v204 = v190 + 2;
                        if (v190 + 2 >= v194)
                          goto LABEL_248;
                        v203 = *(_QWORD *)(v188 + 8 * v204);
                        if (v203)
                          goto LABEL_242;
                        v204 = v190 + 3;
                        if (v190 + 3 >= v194)
                          goto LABEL_248;
                        v203 = *(_QWORD *)(v188 + 8 * v204);
                        if (v203)
                          goto LABEL_242;
                        v204 = v190 + 4;
                        if (v190 + 4 >= v194)
                          goto LABEL_248;
                        v203 = *(_QWORD *)(v188 + 8 * v204);
                        if (v203)
                          goto LABEL_242;
                        v204 = v190 + 5;
                        if (v190 + 5 >= v194)
                          goto LABEL_248;
                        v203 = *(_QWORD *)(v188 + 8 * v204);
                        if (v203)
                          goto LABEL_242;
                        v204 = v190 + 6;
                        if (v190 + 6 >= v194)
                          goto LABEL_248;
                        v203 = *(_QWORD *)(v188 + 8 * v204);
                        if (v203)
                          goto LABEL_242;
                        v204 = v190 + 7;
                        if (v190 + 7 >= v194)
                          goto LABEL_248;
                        v203 = *(_QWORD *)(v188 + 8 * v204);
                        if (v203)
                        {
LABEL_242:
                          v190 = v204;
                          goto LABEL_243;
                        }
                        while (1)
                        {
                          v190 = v204 + 1;
                          if (__OFADD__(v204, 1))
                            goto LABEL_274;
                          if (v190 >= v194)
                            break;
                          v203 = *(_QWORD *)(v188 + 8 * v190);
                          ++v204;
                          if (v203)
                            goto LABEL_243;
                        }
LABEL_248:
                        swift_bridgeObjectRelease();
                        a2 = v213;
                        v171 = v221;
                        if ((v224 & 1) != 0)
                        {
LABEL_208:
                          v182 = (uint64_t *)(*(_QWORD *)(v121 + 56) + 16 * v176);
                          *v182 = v27;
                          v182[1] = v170;
                          goto LABEL_213;
                        }
LABEL_211:
                        *(_QWORD *)(v121 + 8 * (v176 >> 6) + 64) |= 1 << v176;
                        v183 = (uint64_t *)(*(_QWORD *)(v121 + 48) + 16 * v176);
                        *v183 = v171;
                        v183[1] = v173;
                        v184 = (uint64_t *)(*(_QWORD *)(v121 + 56) + 16 * v176);
                        *v184 = v27;
                        v184[1] = v170;
                        v185 = *(_QWORD *)(v121 + 16);
                        v60 = __OFADD__(v185, 1);
                        v186 = v185 + 1;
                        if (v60)
                          goto LABEL_267;
                        *(_QWORD *)(v121 + 16) = v186;
                        swift_bridgeObjectRetain();
LABEL_213:
                        v4 = &unk_1EDC3E000;
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
LABEL_159:
                        v8 = v214 + 1;
                        v225 = v121;
                        v7 = v216;
                      }
                      goto LABEL_4;
                    }
                  }
                }
              }
            }
            v149 = v163;
          }
        }
LABEL_179:
        v152 = (v161 - 1) & v161;
        v154 = __clz(__rbit64(v161)) + (v149 << 6);
      }
      v155 = 16 * v154;
      v156 = (uint64_t *)(*(_QWORD *)(v7 + 48) + v155);
      v158 = *v156;
      v157 = v156[1];
      v159 = *(_OWORD *)(*(_QWORD *)(v7 + 56) + v155);
      v160 = (_QWORD *)(*(_QWORD *)(v145 + 48) + v155);
      *v160 = v158;
      v160[1] = v157;
      *(_OWORD *)(*(_QWORD *)(v145 + 56) + v155) = v159;
      result = (void *)swift_bridgeObjectRetain();
    }
  }
  if (swift_conformsToProtocol2())
    v28 = v20;
  else
    v28 = 0;
  v8 = v19 + 1;
  if (!v28)
    goto LABEL_4;
  v211 = a2;
  v214 = v19;
  v29 = static AttributeScope.scopeDescription.getter();
  v218 = v30;
  swift_bridgeObjectRetain();
  a2 = swift_isUniquelyReferenced_nonNull_native();
  v233 = (_QWORD *)v7;
  v31 = -1 << *(_BYTE *)(v29 + 32);
  v32 = ~v31;
  v33 = *(_QWORD *)(v29 + 64);
  v34 = -v31;
  if (v34 < 64)
    v35 = ~(-1 << v34);
  else
    v35 = -1;
  *(_QWORD *)&v227 = v29;
  *((_QWORD *)&v227 + 1) = v29 + 64;
  v228 = v32;
  v229 = 0;
  v230 = v35 & v33;
  v231 = specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B);
  v232 = 0;
  v36 = swift_bridgeObjectRetain();
  v37 = specialized LazyMapSequence.Iterator.next()(v36);
  if (v38)
  {
    v41 = v37;
    v42 = v38;
    v43 = v39;
    v44 = v40;
    while (1)
    {
      v52 = specialized __RawDictionaryStorage.find<A>(_:)(v41, v42);
      v53 = *(_QWORD *)(v7 + 16);
      v54 = (v51 & 1) == 0;
      v45 = v53 + v54;
      if (__OFADD__(v53, v54))
        goto LABEL_253;
      v55 = v51;
      if (*(_QWORD *)(v7 + 24) >= v45)
      {
        if ((a2 & 1) != 0)
        {
          if ((v51 & 1) != 0)
            goto LABEL_42;
        }
        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedStringKey.Type>);
          v62 = static _DictionaryStorage.copy(original:)();
          v215 = (_QWORD *)v62;
          if (*(_QWORD *)(v7 + 16))
          {
            v63 = v62;
            v64 = (void *)(v62 + 64);
            v65 = (unint64_t)((1 << *(_BYTE *)(v63 + 32)) + 63) >> 6;
            if (v63 != v7 || (unint64_t)v64 >= v7 + 64 + 8 * v65)
              memmove(v64, (const void *)(v7 + 64), 8 * v65);
            v206 = v7 + 64;
            v66 = 0;
            v215[2] = *(_QWORD *)(v7 + 16);
            v67 = 1 << *(_BYTE *)(v7 + 32);
            if (v67 < 64)
              v68 = ~(-1 << v67);
            else
              v68 = -1;
            a2 = v68 & *(_QWORD *)(v7 + 64);
            v208 = (unint64_t)(v67 + 63) >> 6;
            while (1)
            {
              if (a2)
              {
                v69 = __clz(__rbit64(a2));
                a2 &= a2 - 1;
                v70 = v69 | (v66 << 6);
              }
              else
              {
                v60 = __OFADD__(v66++, 1);
                if (v60)
                  goto LABEL_264;
                if (v66 >= v208)
                  break;
                v77 = *(_QWORD *)(v206 + 8 * v66);
                if (!v77)
                {
                  v78 = v66 + 1;
                  if (v66 + 1 >= v208)
                    break;
                  v77 = *(_QWORD *)(v206 + 8 * v78);
                  if (!v77)
                  {
                    v78 = v66 + 2;
                    if (v66 + 2 >= v208)
                      break;
                    v77 = *(_QWORD *)(v206 + 8 * v78);
                    if (!v77)
                    {
                      v78 = v66 + 3;
                      if (v66 + 3 >= v208)
                        break;
                      v77 = *(_QWORD *)(v206 + 8 * v78);
                      if (!v77)
                      {
                        v78 = v66 + 4;
                        if (v66 + 4 >= v208)
                          break;
                        v77 = *(_QWORD *)(v206 + 8 * v78);
                        if (!v77)
                        {
                          v78 = v66 + 5;
                          if (v66 + 5 >= v208)
                            break;
                          v77 = *(_QWORD *)(v206 + 8 * v78);
                          if (!v77)
                          {
                            while (1)
                            {
                              v66 = v78 + 1;
                              if (__OFADD__(v78, 1))
                                break;
                              if (v66 >= v208)
                                goto LABEL_83;
                              v77 = *(_QWORD *)(v206 + 8 * v66);
                              ++v78;
                              if (v77)
                                goto LABEL_78;
                            }
LABEL_269:
                            __break(1u);
                            goto LABEL_270;
                          }
                        }
                      }
                    }
                  }
                  v66 = v78;
                }
LABEL_78:
                a2 = (v77 - 1) & v77;
                v70 = __clz(__rbit64(v77)) + (v66 << 6);
              }
              v71 = 16 * v70;
              v72 = (uint64_t *)(*(_QWORD *)(v7 + 48) + v71);
              v74 = *v72;
              v73 = v72[1];
              v75 = *(_OWORD *)(*(_QWORD *)(v7 + 56) + v71);
              v76 = (_QWORD *)(v215[6] + v71);
              *v76 = v74;
              v76[1] = v73;
              *(_OWORD *)(v215[7] + v71) = v75;
              swift_bridgeObjectRetain();
            }
          }
LABEL_83:
          v45 = swift_release();
          v7 = (uint64_t)v215;
          v233 = v215;
          if ((v55 & 1) != 0)
          {
LABEL_42:
            v45 = swift_bridgeObjectRelease();
            v46 = (_QWORD *)(*(_QWORD *)(v7 + 56) + 16 * v52);
            *v46 = v43;
            v46[1] = v44;
            goto LABEL_43;
          }
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v45, a2 & 1);
        v7 = (uint64_t)v233;
        v45 = specialized __RawDictionaryStorage.find<A>(_:)(v41, v42);
        if ((v55 & 1) != (v56 & 1))
          goto LABEL_272;
        v52 = v45;
        if ((v55 & 1) != 0)
          goto LABEL_42;
      }
      *(_QWORD *)(v7 + 8 * (v52 >> 6) + 64) |= 1 << v52;
      v57 = (uint64_t *)(*(_QWORD *)(v7 + 48) + 16 * v52);
      *v57 = v41;
      v57[1] = v42;
      v58 = (_QWORD *)(*(_QWORD *)(v7 + 56) + 16 * v52);
      *v58 = v43;
      v58[1] = v44;
      v59 = *(_QWORD *)(v7 + 16);
      v60 = __OFADD__(v59, 1);
      v61 = v59 + 1;
      if (v60)
        goto LABEL_255;
      *(_QWORD *)(v7 + 16) = v61;
LABEL_43:
      v41 = specialized LazyMapSequence.Iterator.next()(v45);
      v42 = v47;
      v43 = v48;
      v44 = v49;
      a2 = 1;
      v50 = v7;
      if (!v47)
        goto LABEL_109;
    }
  }
  v50 = v7;
LABEL_109:
  v216 = v50;
  v209 = a1;
  swift_bridgeObjectRelease();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  a1 = v225;
  a2 = swift_isUniquelyReferenced_nonNull_native();
  v233 = (_QWORD *)v225;
  v98 = -1 << *(_BYTE *)(v218 + 32);
  v99 = ~v98;
  v100 = *(_QWORD *)(v218 + 64);
  v101 = -v98;
  if (v101 < 64)
    v102 = ~(-1 << v101);
  else
    v102 = -1;
  *(_QWORD *)&v227 = v218;
  *((_QWORD *)&v227 + 1) = v218 + 64;
  v228 = v99;
  v229 = 0;
  v230 = v102 & v100;
  v231 = specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B);
  v232 = 0;
  v103 = swift_bridgeObjectRetain();
  v104 = specialized LazyMapSequence.Iterator.next()(v103);
  if (!v105)
  {
    v121 = v225;
LABEL_158:
    swift_bridgeObjectRelease();
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a1 = v209;
    a2 = v211;
    v4 = &unk_1EDC3E000;
    goto LABEL_159;
  }
  v108 = v104;
  v109 = v105;
  v110 = v106;
  v111 = v107;
  while (2)
  {
    v118 = specialized __RawDictionaryStorage.find<A>(_:)(v108, v109);
    v119 = *(_QWORD *)(a1 + 16);
    v120 = (v117 & 1) == 0;
    v112 = v119 + v120;
    if (__OFADD__(v119, v120))
      goto LABEL_254;
    v121 = a1;
    v122 = v117;
    if (*(_QWORD *)(a1 + 24) < v112)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v112, a2 & 1);
      v121 = (Swift::UInt)v233;
      v112 = specialized __RawDictionaryStorage.find<A>(_:)(v108, v109);
      if ((v122 & 1) != (v123 & 1))
        goto LABEL_272;
      v118 = v112;
      if ((v122 & 1) == 0)
      {
LABEL_123:
        *(_QWORD *)(v121 + 8 * (v118 >> 6) + 64) |= 1 << v118;
        v124 = (uint64_t *)(*(_QWORD *)(v121 + 48) + 16 * v118);
        *v124 = v108;
        v124[1] = v109;
        v125 = (_QWORD *)(*(_QWORD *)(v121 + 56) + 16 * v118);
        *v125 = v110;
        v125[1] = v111;
        v126 = *(_QWORD *)(v121 + 16);
        v60 = __OFADD__(v126, 1);
        v127 = v126 + 1;
        if (v60)
          goto LABEL_256;
        *(_QWORD *)(v121 + 16) = v127;
        goto LABEL_115;
      }
LABEL_114:
      v112 = swift_bridgeObjectRelease();
      v113 = (_QWORD *)(*(_QWORD *)(v121 + 56) + 16 * v118);
      *v113 = v110;
      v113[1] = v111;
LABEL_115:
      v108 = specialized LazyMapSequence.Iterator.next()(v112);
      v109 = v114;
      v110 = v115;
      v111 = v116;
      a2 = 1;
      a1 = v121;
      if (!v114)
        goto LABEL_158;
      continue;
    }
    break;
  }
  if ((a2 & 1) != 0)
  {
    if ((v117 & 1) == 0)
      goto LABEL_123;
    goto LABEL_114;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, MarkdownDecodableAttributedStringKey.Type>);
  v128 = static _DictionaryStorage.copy(original:)();
  v121 = v128;
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_155:
    v112 = swift_release();
    v233 = (_QWORD *)v121;
    if ((v122 & 1) == 0)
      goto LABEL_123;
    goto LABEL_114;
  }
  v129 = (void *)(v128 + 64);
  v130 = (unint64_t)((1 << *(_BYTE *)(v121 + 32)) + 63) >> 6;
  if (v121 != a1 || (unint64_t)v129 >= a1 + 64 + 8 * v130)
    memmove(v129, (const void *)(a1 + 64), 8 * v130);
  v207 = a1 + 64;
  v131 = 0;
  *(_QWORD *)(v121 + 16) = *(_QWORD *)(a1 + 16);
  v132 = 1 << *(_BYTE *)(a1 + 32);
  if (v132 < 64)
    v133 = ~(-1 << v132);
  else
    v133 = -1;
  a2 = v133 & *(_QWORD *)(a1 + 64);
  v226 = (unint64_t)(v132 + 63) >> 6;
  while (2)
  {
    if (a2)
    {
      v134 = __clz(__rbit64(a2));
      a2 &= a2 - 1;
      v135 = v134 | (v131 << 6);
LABEL_134:
      v136 = 16 * v135;
      v137 = (uint64_t *)(*(_QWORD *)(a1 + 48) + v136);
      v139 = *v137;
      v138 = v137[1];
      v140 = *(_OWORD *)(*(_QWORD *)(a1 + 56) + v136);
      v141 = (_QWORD *)(*(_QWORD *)(v121 + 48) + v136);
      *v141 = v139;
      v141[1] = v138;
      *(_OWORD *)(*(_QWORD *)(v121 + 56) + v136) = v140;
      swift_bridgeObjectRetain();
      continue;
    }
    break;
  }
  v60 = __OFADD__(v131++, 1);
  if (v60)
    goto LABEL_265;
  if (v131 >= v226)
    goto LABEL_155;
  v142 = *(_QWORD *)(v207 + 8 * v131);
  if (v142)
  {
LABEL_150:
    a2 = (v142 - 1) & v142;
    v135 = __clz(__rbit64(v142)) + (v131 << 6);
    goto LABEL_134;
  }
  v143 = v131 + 1;
  if (v131 + 1 >= v226)
    goto LABEL_155;
  v142 = *(_QWORD *)(v207 + 8 * v143);
  if (v142)
    goto LABEL_149;
  v143 = v131 + 2;
  if (v131 + 2 >= v226)
    goto LABEL_155;
  v142 = *(_QWORD *)(v207 + 8 * v143);
  if (v142)
    goto LABEL_149;
  v143 = v131 + 3;
  if (v131 + 3 >= v226)
    goto LABEL_155;
  v142 = *(_QWORD *)(v207 + 8 * v143);
  if (v142)
    goto LABEL_149;
  v143 = v131 + 4;
  if (v131 + 4 >= v226)
    goto LABEL_155;
  v142 = *(_QWORD *)(v207 + 8 * v143);
  if (v142)
    goto LABEL_149;
  v143 = v131 + 5;
  if (v131 + 5 >= v226)
    goto LABEL_155;
  v142 = *(_QWORD *)(v207 + 8 * v143);
  if (v142)
  {
LABEL_149:
    v131 = v143;
    goto LABEL_150;
  }
  while (1)
  {
    v131 = v143 + 1;
    if (__OFADD__(v143, 1))
      break;
    if (v131 >= v226)
      goto LABEL_155;
    v142 = *(_QWORD *)(v207 + 8 * v131);
    ++v143;
    if (v142)
      goto LABEL_150;
  }
LABEL_270:
  __break(1u);
LABEL_271:
  __break(1u);
LABEL_272:
  result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_273:
  __break(1u);
LABEL_274:
  __break(1u);
  return result;
}

unint64_t closure #1 in static AttributeScope.scopeDescription.getter@<X0>(unint64_t result@<X0>, Swift::UInt a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4;
  __int128 v5;
  char v6;
  __int128 v7;

  v4 = *(_QWORD *)(result + 16);
  v5 = 0uLL;
  if (*(_QWORD *)(v4 + 16))
  {
    result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    v5 = 0uLL;
    if ((v6 & 1) != 0)
    {
      v7 = *(_OWORD *)(*(_QWORD *)(v4 + 56) + 16 * result);
      swift_bridgeObjectRetain();
      result = swift_bridgeObjectRetain();
      v5 = v7;
    }
  }
  *a3 = v5;
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt a1)
{
  Swift::Int v2;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

void type metadata accessor for NSAttributedStringKey(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, &lazy cache variable for type metadata for NSAttributedStringKey);
}

unint64_t specialized Rope._Node.subscript.getter(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (((result >> ((4 * *(_BYTE *)(a2 + 18) + 8) & 0x3C)) & 0xF) >= *(unsigned __int16 *)(a2 + 16))
  {
    __break(1u);
  }
  else
  {
    v2 = a2 + 24;
    if (*(_BYTE *)(a2 + 18))
    {
      v3 = result;
      v4 = (uint64_t *)(v2 + 24 * ((result >> ((4 * *(_BYTE *)(a2 + 18) + 8) & 0x3C)) & 0xF));
      v6 = *v4;
      v5 = v4[1];
      v7 = v4[2];
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      v8 = specialized Rope._Node.subscript.getter(v3, v6, v5, v7);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
    }
    else
    {
      v8 = *(_QWORD *)(v2 + 24 * ((result >> ((4 * *(_BYTE *)(a2 + 18) + 8) & 0x3C)) & 0xF));
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    return v8;
  }
  return result;
}

uint64_t specialized Rope.formIndex(after:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  char v13;
  unint64_t v14;
  char v15;
  unint64_t v16;

  if (*a1 != a5)
  {
    __break(1u);
    goto LABEL_11;
  }
  v8 = a1[1];
  swift_unknownObjectRetain();
  if (!a2)
  {
LABEL_11:
    result = swift_unknownObjectRelease();
    goto LABEL_12;
  }
  v9 = *(unsigned __int8 *)(a2 + 18);
  v10 = *(unsigned __int16 *)(a2 + 16);
  result = swift_unknownObjectRelease();
  if (v8 >= (((-15 << ((4 * v9 + 8) & 0x3C)) - 1) & v9 | (unint64_t)(v10 << ((4 * v9 + 8) & 0x3C))))
  {
LABEL_12:
    __break(1u);
    return result;
  }
  v12 = a1[2];
  if (v12
    && (v13 = (4 * *(_BYTE *)(v12 + 18) + 8) & 0x3C, v14 = ((v8 >> v13) & 0xF) + 1,
                                                     v14 < *(unsigned __int16 *)(v12 + 16)))
  {
    a1[1] = (v14 << v13) | ((-15 << v13) - 1) & v8;
  }
  else
  {
    swift_unknownObjectRetain();
    v15 = specialized Rope._Node.formSuccessor(of:)((uint64_t)a1, a2);
    result = swift_unknownObjectRelease();
    if ((v15 & 1) == 0)
    {
      v16 = ((-15 << ((4 * *(_BYTE *)(a2 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(a2 + 18) | ((unint64_t)*(unsigned __int16 *)(a2 + 16) << ((4 * *(_BYTE *)(a2 + 18) + 8) & 0x3C));
      *a1 = a5;
      a1[1] = v16;
      a1[2] = 0;
    }
  }
  return result;
}

unint64_t specialized Rope._endPath.getter(unint64_t result)
{
  if (result)
    return ((-15 << ((4 * *(_BYTE *)(result + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(result + 18) | ((unint64_t)*(unsigned __int16 *)(result + 16) << ((4 * *(_BYTE *)(result + 18) + 8) & 0x3C));
  return result;
}

uint64_t specialized Rope._Node.formSuccessor(of:)(uint64_t a1, uint64_t a2)
{
  int v4;
  unint64_t v5;
  char v6;
  char v7;
  unint64_t v8;
  unint64_t v10;

  v4 = *(unsigned __int8 *)(a2 + 18);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (4 * v4 + 8) & 0x3C;
  v10 = (v5 >> v6) & 0xF;
  if (v4)
  {
    swift_unknownObjectRetain();
    v7 = specialized closure #1 in Rope._Node.formSuccessor(of:)(a2 + 24, (uint64_t *)&v10, a1, a2, v4);
    swift_unknownObjectRelease();
  }
  else
  {
    v8 = ((v5 >> v6) & 0xF) + 1;
    if (v8 >= *(unsigned __int16 *)(a2 + 16))
    {
      v7 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 8) = (v8 << v6) | ((-15 << v6) - 1) & v5;
      *(_QWORD *)(a1 + 16) = a2;
      v7 = 1;
    }
  }
  return v7 & 1;
}

uint64_t specialized Dictionary<>.init(_:attributeTable:options:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t AssociatedTypeWitness;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  void *v46;
  uint64_t v47;
  uint64_t isClassOrObjCExistentialType;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  char *v53;
  uint64_t *v54;
  uint64_t result;
  _QWORD v56[2];
  uint64_t v57;
  int64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  void *v64;
  _QWORD *v65;
  void *v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  char v70[40];
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  _QWORD v76[4];
  uint64_t v77;

  v4 = v3;
  v57 = a3;
  v6 = *a1;
  v56[1] = a1[1];
  v77 = MEMORY[0x1E0DEE9E0];
  swift_bridgeObjectRetain();
  v7 = 0;
  v8 = v6 + 64;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v6 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v61 = v6;
  v60 = a2;
  v59 = v6 + 64;
  v58 = v12;
  while (1)
  {
    while (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v7 << 6);
      if (*(_QWORD *)(a2 + 16))
      {
LABEL_21:
        v18 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v14);
        v19 = *v18;
        v20 = v18[1];
        swift_bridgeObjectRetain();
        v21 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v20);
        if ((v22 & 1) != 0)
        {
          v66 = v4;
          v23 = (uint64_t *)(*(_QWORD *)(a2 + 56) + 16 * v21);
          v24 = v6;
          v25 = *v23;
          v26 = v23[1];
          v27 = (void *)String._bridgeToObjectiveCImpl()();
          AssociatedTypeWitness = swift_getAssociatedTypeWitness();
          v65 = v56;
          v69 = AssociatedTypeWitness;
          v67 = *(_QWORD *)(AssociatedTypeWitness - 8);
          v29 = *(_QWORD *)(v67 + 64);
          v30 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
          v68 = (_QWORD *)((char *)v56 - v31);
          v32 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v26 + 24))(v25, v26, v30);
          if (*(_QWORD *)(v24 + 16) && (v34 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v33), (v35 & 1) != 0))
          {
            outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v24 + 56) + 72 * v34, (uint64_t)&v71);
          }
          else
          {
            v75 = 0;
            v73 = 0u;
            v74 = 0u;
            v71 = 0u;
            v72 = 0u;
          }
          v36 = v69;
          swift_bridgeObjectRelease();
          if (!*((_QWORD *)&v72 + 1))
            goto LABEL_53;
          v64 = v27;
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v71, (uint64_t)v70);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
          v37 = v68;
          swift_dynamicCast();
          outlined destroy of AttributedString._AttributeValue((uint64_t)&v71);
          v38 = swift_conformsToProtocol2();
          if (v38)
            v39 = v38;
          else
            v39 = 0;
          if (v38)
            v40 = v25;
          else
            v40 = 0;
          if (!v40)
          {
            v4 = v66;
            isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
            if ((isClassOrObjCExistentialType & 1) != 0)
            {
              if (v29 != 8)
                goto LABEL_51;
              v49 = v68;
              v50 = *v68;
              swift_unknownObjectRetain();
              v51 = v67;
            }
            else
            {
              v52 = MEMORY[0x1E0C80A78](isClassOrObjCExistentialType);
              v53 = (char *)v56 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
              v51 = v67;
              v54 = v68;
              (*(void (**)(char *, uint64_t *, uint64_t, __n128))(v67 + 16))(v53, v68, v69, v52);
              v49 = v54;
              v50 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
              v36 = v69;
            }
            goto LABEL_41;
          }
          v63 = v56;
          v41 = MEMORY[0x1E0C80A78](v38);
          (*(void (**)(char *, uint64_t *, uint64_t, __n128))(v67 + 16))((char *)v56 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0), v37, v69, v41);
          v42 = swift_getAssociatedTypeWitness();
          v62 = v56;
          v43 = *(_QWORD *)(v42 - 8);
          MEMORY[0x1E0C80A78](v42);
          v45 = (char *)v56 - v44;
          v36 = v69;
          swift_dynamicCast();
          v46 = v66;
          v47 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v39 + 24))(v45, v40, v39);
          v4 = v46;
          if (!v46)
          {
            v50 = v47;
            (*(void (**)(char *, uint64_t))(v43 + 8))(v45, v42);
            v51 = v67;
            v49 = v68;
LABEL_41:
            (*(void (**)(uint64_t *, uint64_t))(v51 + 8))(v49, v36);
            v76[3] = swift_getObjectType();
            v76[0] = v50;
            specialized Dictionary.subscript.setter((uint64_t)v76, v64);
            swift_bridgeObjectRelease();
            goto LABEL_42;
          }
          (*(void (**)(char *, uint64_t))(v43 + 8))(v45, v42);
          swift_unknownObjectRelease();
          (*(void (**)(uint64_t *, uint64_t))(v67 + 8))(v68, v36);
          swift_bridgeObjectRelease();
          if ((v57 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_willThrow();
            return swift_release();
          }

          v4 = 0;
LABEL_42:
          v6 = v61;
          a2 = v60;
          v8 = v59;
          v12 = v58;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
      }
    }
    if (__OFADD__(v7++, 1))
    {
      __break(1u);
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
    if (v7 >= v12)
      goto LABEL_48;
    v16 = *(_QWORD *)(v8 + 8 * v7);
    if (!v16)
      break;
LABEL_20:
    v11 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v7 << 6);
    if (*(_QWORD *)(a2 + 16))
      goto LABEL_21;
  }
  v17 = v7 + 1;
  if (v7 + 1 >= v12)
    goto LABEL_48;
  v16 = *(_QWORD *)(v8 + 8 * v17);
  if (v16)
    goto LABEL_19;
  v17 = v7 + 2;
  if (v7 + 2 >= v12)
    goto LABEL_48;
  v16 = *(_QWORD *)(v8 + 8 * v17);
  if (v16)
    goto LABEL_19;
  v17 = v7 + 3;
  if (v7 + 3 >= v12)
    goto LABEL_48;
  v16 = *(_QWORD *)(v8 + 8 * v17);
  if (v16)
    goto LABEL_19;
  v17 = v7 + 4;
  if (v7 + 4 >= v12)
  {
LABEL_48:
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v77;
  }
  v16 = *(_QWORD *)(v8 + 8 * v17);
  if (v16)
  {
LABEL_19:
    v7 = v17;
    goto LABEL_20;
  }
  while (1)
  {
    v7 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v7 >= v12)
      goto LABEL_48;
    v16 = *(_QWORD *)(v8 + 8 * v7);
    ++v17;
    if (v16)
      goto LABEL_20;
  }
LABEL_52:
  __break(1u);
LABEL_53:
  result = outlined destroy of AttributedString._AttributeValue?((uint64_t)&v71);
  __break(1u);
  return result;
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, void *a2)
{
  uint64_t *v2;
  char v3;
  uint64_t *v4;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  char v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t result;
  uint64_t v24;
  void *v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  id v36;
  int64_t v37;
  unint64_t v38;
  int64_t v39;
  char *v40;
  id v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  id v54;
  int64_t v55;
  unint64_t v56;
  int64_t v57;
  uint64_t v58;
  int64_t v59;
  int64_t v60;
  char *__src;
  char *__srca;
  _OWORD v63[2];
  uint64_t v64;
  _OWORD v65[2];

  v4 = v2;
  if (!*(_QWORD *)(a1 + 24))
  {
    outlined destroy of Any?(a1, &demangling cache variable for type metadata for Any?);
    swift_bridgeObjectRetain();
    v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    v18 = v17;
    swift_bridgeObjectRelease();
    if ((v18 & 1) != 0)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v20 = *v2;
      *v2 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v21 = v20;
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSAttributedStringKey, Any>);
        v42 = static _DictionaryStorage.copy(original:)();
        v21 = v42;
        if (*(_QWORD *)(v20 + 16))
        {
          v43 = (char *)(v42 + 64);
          __srca = (char *)(v20 + 64);
          v44 = (unint64_t)((1 << *(_BYTE *)(v21 + 32)) + 63) >> 6;
          if (v21 != v20 || v43 >= &__srca[8 * v44])
            memmove(v43, __srca, 8 * v44);
          v45 = 0;
          *(_QWORD *)(v21 + 16) = *(_QWORD *)(v20 + 16);
          v46 = 1 << *(_BYTE *)(v20 + 32);
          v47 = -1;
          if (v46 < 64)
            v47 = ~(-1 << v46);
          v48 = v47 & *(_QWORD *)(v20 + 64);
          v60 = (unint64_t)(v46 + 63) >> 6;
          while (1)
          {
            if (v48)
            {
              v49 = __clz(__rbit64(v48));
              v48 &= v48 - 1;
              v50 = v49 | (v45 << 6);
            }
            else
            {
              v55 = v45 + 1;
              if (__OFADD__(v45, 1))
              {
LABEL_81:
                __break(1u);
                goto LABEL_82;
              }
              if (v55 >= v60)
                break;
              v56 = *(_QWORD *)&__srca[8 * v55];
              ++v45;
              if (!v56)
              {
                v45 = v55 + 1;
                if (v55 + 1 >= v60)
                  break;
                v56 = *(_QWORD *)&__srca[8 * v45];
                if (!v56)
                {
                  v45 = v55 + 2;
                  if (v55 + 2 >= v60)
                    break;
                  v56 = *(_QWORD *)&__srca[8 * v45];
                  if (!v56)
                  {
                    v45 = v55 + 3;
                    if (v55 + 3 >= v60)
                      break;
                    v56 = *(_QWORD *)&__srca[8 * v45];
                    if (!v56)
                    {
                      v45 = v55 + 4;
                      if (v55 + 4 >= v60)
                        break;
                      v56 = *(_QWORD *)&__srca[8 * v45];
                      if (!v56)
                      {
                        v57 = v55 + 5;
                        if (v57 >= v60)
                          break;
                        v56 = *(_QWORD *)&__srca[8 * v57];
                        if (!v56)
                        {
                          while (1)
                          {
                            v45 = v57 + 1;
                            if (__OFADD__(v57, 1))
                              break;
                            if (v45 >= v60)
                              goto LABEL_79;
                            v56 = *(_QWORD *)&__srca[8 * v45];
                            ++v57;
                            if (v56)
                              goto LABEL_78;
                          }
LABEL_82:
                          __break(1u);
                          goto LABEL_83;
                        }
                        v45 = v57;
                      }
                    }
                  }
                }
              }
LABEL_78:
              v48 = (v56 - 1) & v56;
              v50 = __clz(__rbit64(v56)) + (v45 << 6);
            }
            v51 = 8 * v50;
            v52 = *(void **)(*(_QWORD *)(v20 + 48) + 8 * v50);
            v53 = 32 * v50;
            outlined init with copy of Any(*(_QWORD *)(v20 + 56) + 32 * v50, (uint64_t)v65);
            *(_QWORD *)(*(_QWORD *)(v21 + 48) + v51) = v52;
            outlined init with take of Any(v65, (_OWORD *)(*(_QWORD *)(v21 + 56) + v53));
            v54 = v52;
          }
        }
LABEL_79:
        swift_bridgeObjectRelease();
      }

      outlined init with take of Any((_OWORD *)(*(_QWORD *)(v21 + 56) + 32 * v16), v65);
      specialized _NativeDictionary._delete(at:)(v16, v21);
      *v4 = v21;

      swift_bridgeObjectRelease();
    }
    else
    {
      memset(v65, 0, sizeof(v65));

    }
    return outlined destroy of Any?((uint64_t)v65, &demangling cache variable for type metadata for Any?);
  }
  outlined init with take of Any((_OWORD *)a1, v65);
  v6 = swift_isUniquelyReferenced_nonNull_native();
  v64 = *v2;
  v7 = v64;
  *v2 = 0x8000000000000000;
  v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v3 = v8;
    if (*(_QWORD *)(v7 + 24) < v12)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, v6);
      v13 = v64;
      v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
      if ((v3 & 1) != (v15 & 1))
        goto LABEL_84;
      v9 = v14;
      if ((v3 & 1) == 0)
        goto LABEL_48;
LABEL_13:
      v22 = (_OWORD *)(*(_QWORD *)(v13 + 56) + 32 * v9);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
      outlined init with take of Any(v65, v22);
LABEL_49:
      *v4 = v13;

      return swift_bridgeObjectRelease();
    }
    if ((v6 & 1) != 0)
    {
      v13 = v7;
      if ((v8 & 1) != 0)
        goto LABEL_13;
LABEL_48:
      specialized _NativeDictionary._insert(at:key:value:)(v9, a2, v65, v13);
      v41 = a2;
      goto LABEL_49;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSAttributedStringKey, Any>);
  v24 = static _DictionaryStorage.copy(original:)();
  v13 = v24;
  if (!*(_QWORD *)(v7 + 16))
  {
LABEL_47:
    swift_bridgeObjectRelease();
    if ((v3 & 1) != 0)
      goto LABEL_13;
    goto LABEL_48;
  }
  v25 = (void *)(v24 + 64);
  v26 = (unint64_t)((1 << *(_BYTE *)(v13 + 32)) + 63) >> 6;
  if (v13 != v7 || (unint64_t)v25 >= v7 + 64 + 8 * v26)
    memmove(v25, (const void *)(v7 + 64), 8 * v26);
  v27 = 0;
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(v7 + 16);
  v28 = 1 << *(_BYTE *)(v7 + 32);
  v29 = -1;
  if (v28 < 64)
    v29 = ~(-1 << v28);
  v30 = v29 & *(_QWORD *)(v7 + 64);
  v58 = v7 + 64;
  v59 = (unint64_t)(v28 + 63) >> 6;
  while (1)
  {
    if (v30)
    {
      v31 = __clz(__rbit64(v30));
      v30 &= v30 - 1;
      __src = v27;
      v32 = v31 | ((_QWORD)v27 << 6);
      goto LABEL_25;
    }
    v37 = (int64_t)(v27 + 1);
    if (__OFADD__(v27, 1))
    {
      __break(1u);
      goto LABEL_81;
    }
    if (v37 >= v59)
      goto LABEL_47;
    v38 = *(_QWORD *)(v58 + 8 * v37);
    v39 = (int64_t)(v27 + 1);
    if (!v38)
    {
      v39 = (int64_t)(v27 + 2);
      if ((uint64_t)(v27 + 2) >= v59)
        goto LABEL_47;
      v38 = *(_QWORD *)(v58 + 8 * v39);
      if (!v38)
      {
        v39 = (int64_t)(v27 + 3);
        if ((uint64_t)(v27 + 3) >= v59)
          goto LABEL_47;
        v38 = *(_QWORD *)(v58 + 8 * v39);
        if (!v38)
        {
          v39 = (int64_t)(v27 + 4);
          if ((uint64_t)(v27 + 4) >= v59)
            goto LABEL_47;
          v38 = *(_QWORD *)(v58 + 8 * v39);
          if (!v38)
          {
            v39 = (int64_t)(v27 + 5);
            if ((uint64_t)(v27 + 5) >= v59)
              goto LABEL_47;
            v38 = *(_QWORD *)(v58 + 8 * v39);
            if (!v38)
            {
              v39 = (int64_t)(v27 + 6);
              if ((uint64_t)(v27 + 6) >= v59)
                goto LABEL_47;
              v38 = *(_QWORD *)(v58 + 8 * v39);
              if (!v38)
                break;
            }
          }
        }
      }
    }
LABEL_46:
    v30 = (v38 - 1) & v38;
    __src = (char *)v39;
    v32 = __clz(__rbit64(v38)) + (v39 << 6);
LABEL_25:
    v33 = 8 * v32;
    v34 = *(void **)(*(_QWORD *)(v7 + 48) + 8 * v32);
    v35 = 32 * v32;
    outlined init with copy of Any(*(_QWORD *)(v7 + 56) + 32 * v32, (uint64_t)v63);
    *(_QWORD *)(*(_QWORD *)(v13 + 48) + v33) = v34;
    outlined init with take of Any(v63, (_OWORD *)(*(_QWORD *)(v13 + 56) + v35));
    v36 = v34;
    v27 = __src;
  }
  v40 = v27 + 7;
  if ((uint64_t)(v27 + 7) >= v59)
    goto LABEL_47;
  v38 = *(_QWORD *)(v58 + 8 * (_QWORD)v40);
  if (v38)
  {
    v39 = (int64_t)(v27 + 7);
    goto LABEL_46;
  }
  while (1)
  {
    v39 = (int64_t)(v40 + 1);
    if (__OFADD__(v40, 1))
      break;
    if (v39 >= v59)
      goto LABEL_47;
    v38 = *(_QWORD *)(v58 + 8 * v39);
    ++v40;
    if (v38)
      goto LABEL_46;
  }
LABEL_83:
  __break(1u);
LABEL_84:
  type metadata accessor for NSAttributedStringKey(0);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v2;
  char v3;
  uint64_t *v4;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  char v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t result;
  uint64_t v24;
  void *v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  id v36;
  int64_t v37;
  unint64_t v38;
  int64_t v39;
  char *v40;
  id v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  id v54;
  int64_t v55;
  unint64_t v56;
  int64_t v57;
  uint64_t v58;
  int64_t v59;
  int64_t v60;
  char *__src;
  char *__srca;
  _OWORD v63[2];
  uint64_t v64;
  _OWORD v65[2];

  v4 = v2;
  if (!*(_QWORD *)(a1 + 24))
  {
    outlined destroy of Any?(a1, &demangling cache variable for type metadata for Any?);
    swift_bridgeObjectRetain();
    v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    v18 = v17;
    swift_bridgeObjectRelease();
    if ((v18 & 1) != 0)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v20 = *v2;
      *v2 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v21 = v20;
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSURLResourceKey, Any>);
        v42 = static _DictionaryStorage.copy(original:)();
        v21 = v42;
        if (*(_QWORD *)(v20 + 16))
        {
          v43 = (char *)(v42 + 64);
          __srca = (char *)(v20 + 64);
          v44 = (unint64_t)((1 << *(_BYTE *)(v21 + 32)) + 63) >> 6;
          if (v21 != v20 || v43 >= &__srca[8 * v44])
            memmove(v43, __srca, 8 * v44);
          v45 = 0;
          *(_QWORD *)(v21 + 16) = *(_QWORD *)(v20 + 16);
          v46 = 1 << *(_BYTE *)(v20 + 32);
          v47 = -1;
          if (v46 < 64)
            v47 = ~(-1 << v46);
          v48 = v47 & *(_QWORD *)(v20 + 64);
          v60 = (unint64_t)(v46 + 63) >> 6;
          while (1)
          {
            if (v48)
            {
              v49 = __clz(__rbit64(v48));
              v48 &= v48 - 1;
              v50 = v49 | (v45 << 6);
            }
            else
            {
              v55 = v45 + 1;
              if (__OFADD__(v45, 1))
              {
LABEL_81:
                __break(1u);
                goto LABEL_82;
              }
              if (v55 >= v60)
                break;
              v56 = *(_QWORD *)&__srca[8 * v55];
              ++v45;
              if (!v56)
              {
                v45 = v55 + 1;
                if (v55 + 1 >= v60)
                  break;
                v56 = *(_QWORD *)&__srca[8 * v45];
                if (!v56)
                {
                  v45 = v55 + 2;
                  if (v55 + 2 >= v60)
                    break;
                  v56 = *(_QWORD *)&__srca[8 * v45];
                  if (!v56)
                  {
                    v45 = v55 + 3;
                    if (v55 + 3 >= v60)
                      break;
                    v56 = *(_QWORD *)&__srca[8 * v45];
                    if (!v56)
                    {
                      v45 = v55 + 4;
                      if (v55 + 4 >= v60)
                        break;
                      v56 = *(_QWORD *)&__srca[8 * v45];
                      if (!v56)
                      {
                        v57 = v55 + 5;
                        if (v57 >= v60)
                          break;
                        v56 = *(_QWORD *)&__srca[8 * v57];
                        if (!v56)
                        {
                          while (1)
                          {
                            v45 = v57 + 1;
                            if (__OFADD__(v57, 1))
                              break;
                            if (v45 >= v60)
                              goto LABEL_79;
                            v56 = *(_QWORD *)&__srca[8 * v45];
                            ++v57;
                            if (v56)
                              goto LABEL_78;
                          }
LABEL_82:
                          __break(1u);
                          goto LABEL_83;
                        }
                        v45 = v57;
                      }
                    }
                  }
                }
              }
LABEL_78:
              v48 = (v56 - 1) & v56;
              v50 = __clz(__rbit64(v56)) + (v45 << 6);
            }
            v51 = 8 * v50;
            v52 = *(void **)(*(_QWORD *)(v20 + 48) + 8 * v50);
            v53 = 32 * v50;
            outlined init with copy of Any(*(_QWORD *)(v20 + 56) + 32 * v50, (uint64_t)v65);
            *(_QWORD *)(*(_QWORD *)(v21 + 48) + v51) = v52;
            outlined init with take of Any(v65, (_OWORD *)(*(_QWORD *)(v21 + 56) + v53));
            v54 = v52;
          }
        }
LABEL_79:
        swift_bridgeObjectRelease();
      }

      outlined init with take of Any((_OWORD *)(*(_QWORD *)(v21 + 56) + 32 * v16), v65);
      specialized _NativeDictionary._delete(at:)(v16, v21);
      *v4 = v21;

      swift_bridgeObjectRelease();
    }
    else
    {
      memset(v65, 0, sizeof(v65));

    }
    return outlined destroy of Any?((uint64_t)v65, &demangling cache variable for type metadata for Any?);
  }
  outlined init with take of Any((_OWORD *)a1, v65);
  v6 = swift_isUniquelyReferenced_nonNull_native();
  v64 = *v2;
  v7 = v64;
  *v2 = 0x8000000000000000;
  v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v3 = v8;
    if (*(_QWORD *)(v7 + 24) < v12)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, v6);
      v13 = v64;
      v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
      if ((v3 & 1) != (v15 & 1))
        goto LABEL_84;
      v9 = v14;
      if ((v3 & 1) == 0)
        goto LABEL_48;
LABEL_13:
      v22 = (_OWORD *)(*(_QWORD *)(v13 + 56) + 32 * v9);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
      outlined init with take of Any(v65, v22);
LABEL_49:
      *v4 = v13;

      return swift_bridgeObjectRelease();
    }
    if ((v6 & 1) != 0)
    {
      v13 = v7;
      if ((v8 & 1) != 0)
        goto LABEL_13;
LABEL_48:
      specialized _NativeDictionary._insert(at:key:value:)(v9, a2, v65, v13);
      v41 = a2;
      goto LABEL_49;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSURLResourceKey, Any>);
  v24 = static _DictionaryStorage.copy(original:)();
  v13 = v24;
  if (!*(_QWORD *)(v7 + 16))
  {
LABEL_47:
    swift_bridgeObjectRelease();
    if ((v3 & 1) != 0)
      goto LABEL_13;
    goto LABEL_48;
  }
  v25 = (void *)(v24 + 64);
  v26 = (unint64_t)((1 << *(_BYTE *)(v13 + 32)) + 63) >> 6;
  if (v13 != v7 || (unint64_t)v25 >= v7 + 64 + 8 * v26)
    memmove(v25, (const void *)(v7 + 64), 8 * v26);
  v27 = 0;
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(v7 + 16);
  v28 = 1 << *(_BYTE *)(v7 + 32);
  v29 = -1;
  if (v28 < 64)
    v29 = ~(-1 << v28);
  v30 = v29 & *(_QWORD *)(v7 + 64);
  v58 = v7 + 64;
  v59 = (unint64_t)(v28 + 63) >> 6;
  while (1)
  {
    if (v30)
    {
      v31 = __clz(__rbit64(v30));
      v30 &= v30 - 1;
      __src = v27;
      v32 = v31 | ((_QWORD)v27 << 6);
      goto LABEL_25;
    }
    v37 = (int64_t)(v27 + 1);
    if (__OFADD__(v27, 1))
    {
      __break(1u);
      goto LABEL_81;
    }
    if (v37 >= v59)
      goto LABEL_47;
    v38 = *(_QWORD *)(v58 + 8 * v37);
    v39 = (int64_t)(v27 + 1);
    if (!v38)
    {
      v39 = (int64_t)(v27 + 2);
      if ((uint64_t)(v27 + 2) >= v59)
        goto LABEL_47;
      v38 = *(_QWORD *)(v58 + 8 * v39);
      if (!v38)
      {
        v39 = (int64_t)(v27 + 3);
        if ((uint64_t)(v27 + 3) >= v59)
          goto LABEL_47;
        v38 = *(_QWORD *)(v58 + 8 * v39);
        if (!v38)
        {
          v39 = (int64_t)(v27 + 4);
          if ((uint64_t)(v27 + 4) >= v59)
            goto LABEL_47;
          v38 = *(_QWORD *)(v58 + 8 * v39);
          if (!v38)
          {
            v39 = (int64_t)(v27 + 5);
            if ((uint64_t)(v27 + 5) >= v59)
              goto LABEL_47;
            v38 = *(_QWORD *)(v58 + 8 * v39);
            if (!v38)
            {
              v39 = (int64_t)(v27 + 6);
              if ((uint64_t)(v27 + 6) >= v59)
                goto LABEL_47;
              v38 = *(_QWORD *)(v58 + 8 * v39);
              if (!v38)
                break;
            }
          }
        }
      }
    }
LABEL_46:
    v30 = (v38 - 1) & v38;
    __src = (char *)v39;
    v32 = __clz(__rbit64(v38)) + (v39 << 6);
LABEL_25:
    v33 = 8 * v32;
    v34 = *(void **)(*(_QWORD *)(v7 + 48) + 8 * v32);
    v35 = 32 * v32;
    outlined init with copy of Any(*(_QWORD *)(v7 + 56) + 32 * v32, (uint64_t)v63);
    *(_QWORD *)(*(_QWORD *)(v13 + 48) + v33) = v34;
    outlined init with take of Any(v63, (_OWORD *)(*(_QWORD *)(v13 + 56) + v35));
    v36 = v34;
    v27 = __src;
  }
  v40 = v27 + 7;
  if ((uint64_t)(v27 + 7) >= v59)
    goto LABEL_47;
  v38 = *(_QWORD *)(v58 + 8 * (_QWORD)v40);
  if (v38)
  {
    v39 = (int64_t)(v27 + 7);
    goto LABEL_46;
  }
  while (1)
  {
    v39 = (int64_t)(v40 + 1);
    if (__OFADD__(v40, 1))
      break;
    if (v39 >= v59)
      goto LABEL_47;
    v38 = *(_QWORD *)(v58 + 8 * v39);
    ++v40;
    if (v38)
      goto LABEL_46;
  }
LABEL_83:
  __break(1u);
LABEL_84:
  type metadata accessor for NSURLResourceKey(0);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v2;
  char v3;
  uint64_t *v4;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  char v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t result;
  uint64_t v24;
  void *v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  id v36;
  int64_t v37;
  unint64_t v38;
  int64_t v39;
  char *v40;
  id v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  id v54;
  int64_t v55;
  unint64_t v56;
  int64_t v57;
  uint64_t v58;
  int64_t v59;
  int64_t v60;
  char *__src;
  char *__srca;
  _OWORD v63[2];
  uint64_t v64;
  _OWORD v65[2];

  v4 = v2;
  if (!*(_QWORD *)(a1 + 24))
  {
    outlined destroy of Any?(a1, &demangling cache variable for type metadata for Any?);
    swift_bridgeObjectRetain();
    v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    v18 = v17;
    swift_bridgeObjectRelease();
    if ((v18 & 1) != 0)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v20 = *v2;
      *v2 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v21 = v20;
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSFileAttributeKey, Any>);
        v42 = static _DictionaryStorage.copy(original:)();
        v21 = v42;
        if (*(_QWORD *)(v20 + 16))
        {
          v43 = (char *)(v42 + 64);
          __srca = (char *)(v20 + 64);
          v44 = (unint64_t)((1 << *(_BYTE *)(v21 + 32)) + 63) >> 6;
          if (v21 != v20 || v43 >= &__srca[8 * v44])
            memmove(v43, __srca, 8 * v44);
          v45 = 0;
          *(_QWORD *)(v21 + 16) = *(_QWORD *)(v20 + 16);
          v46 = 1 << *(_BYTE *)(v20 + 32);
          v47 = -1;
          if (v46 < 64)
            v47 = ~(-1 << v46);
          v48 = v47 & *(_QWORD *)(v20 + 64);
          v60 = (unint64_t)(v46 + 63) >> 6;
          while (1)
          {
            if (v48)
            {
              v49 = __clz(__rbit64(v48));
              v48 &= v48 - 1;
              v50 = v49 | (v45 << 6);
            }
            else
            {
              v55 = v45 + 1;
              if (__OFADD__(v45, 1))
              {
LABEL_81:
                __break(1u);
                goto LABEL_82;
              }
              if (v55 >= v60)
                break;
              v56 = *(_QWORD *)&__srca[8 * v55];
              ++v45;
              if (!v56)
              {
                v45 = v55 + 1;
                if (v55 + 1 >= v60)
                  break;
                v56 = *(_QWORD *)&__srca[8 * v45];
                if (!v56)
                {
                  v45 = v55 + 2;
                  if (v55 + 2 >= v60)
                    break;
                  v56 = *(_QWORD *)&__srca[8 * v45];
                  if (!v56)
                  {
                    v45 = v55 + 3;
                    if (v55 + 3 >= v60)
                      break;
                    v56 = *(_QWORD *)&__srca[8 * v45];
                    if (!v56)
                    {
                      v45 = v55 + 4;
                      if (v55 + 4 >= v60)
                        break;
                      v56 = *(_QWORD *)&__srca[8 * v45];
                      if (!v56)
                      {
                        v57 = v55 + 5;
                        if (v57 >= v60)
                          break;
                        v56 = *(_QWORD *)&__srca[8 * v57];
                        if (!v56)
                        {
                          while (1)
                          {
                            v45 = v57 + 1;
                            if (__OFADD__(v57, 1))
                              break;
                            if (v45 >= v60)
                              goto LABEL_79;
                            v56 = *(_QWORD *)&__srca[8 * v45];
                            ++v57;
                            if (v56)
                              goto LABEL_78;
                          }
LABEL_82:
                          __break(1u);
                          goto LABEL_83;
                        }
                        v45 = v57;
                      }
                    }
                  }
                }
              }
LABEL_78:
              v48 = (v56 - 1) & v56;
              v50 = __clz(__rbit64(v56)) + (v45 << 6);
            }
            v51 = 8 * v50;
            v52 = *(void **)(*(_QWORD *)(v20 + 48) + 8 * v50);
            v53 = 32 * v50;
            outlined init with copy of Any(*(_QWORD *)(v20 + 56) + 32 * v50, (uint64_t)v65);
            *(_QWORD *)(*(_QWORD *)(v21 + 48) + v51) = v52;
            outlined init with take of Any(v65, (_OWORD *)(*(_QWORD *)(v21 + 56) + v53));
            v54 = v52;
          }
        }
LABEL_79:
        swift_bridgeObjectRelease();
      }

      outlined init with take of Any((_OWORD *)(*(_QWORD *)(v21 + 56) + 32 * v16), v65);
      specialized _NativeDictionary._delete(at:)(v16, v21);
      *v4 = v21;

      swift_bridgeObjectRelease();
    }
    else
    {
      memset(v65, 0, sizeof(v65));

    }
    return outlined destroy of Any?((uint64_t)v65, &demangling cache variable for type metadata for Any?);
  }
  outlined init with take of Any((_OWORD *)a1, v65);
  v6 = swift_isUniquelyReferenced_nonNull_native();
  v64 = *v2;
  v7 = v64;
  *v2 = 0x8000000000000000;
  v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v3 = v8;
    if (*(_QWORD *)(v7 + 24) < v12)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, v6);
      v13 = v64;
      v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
      if ((v3 & 1) != (v15 & 1))
        goto LABEL_84;
      v9 = v14;
      if ((v3 & 1) == 0)
        goto LABEL_48;
LABEL_13:
      v22 = (_OWORD *)(*(_QWORD *)(v13 + 56) + 32 * v9);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
      outlined init with take of Any(v65, v22);
LABEL_49:
      *v4 = v13;

      return swift_bridgeObjectRelease();
    }
    if ((v6 & 1) != 0)
    {
      v13 = v7;
      if ((v8 & 1) != 0)
        goto LABEL_13;
LABEL_48:
      specialized _NativeDictionary._insert(at:key:value:)(v9, a2, v65, v13);
      v41 = a2;
      goto LABEL_49;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSFileAttributeKey, Any>);
  v24 = static _DictionaryStorage.copy(original:)();
  v13 = v24;
  if (!*(_QWORD *)(v7 + 16))
  {
LABEL_47:
    swift_bridgeObjectRelease();
    if ((v3 & 1) != 0)
      goto LABEL_13;
    goto LABEL_48;
  }
  v25 = (void *)(v24 + 64);
  v26 = (unint64_t)((1 << *(_BYTE *)(v13 + 32)) + 63) >> 6;
  if (v13 != v7 || (unint64_t)v25 >= v7 + 64 + 8 * v26)
    memmove(v25, (const void *)(v7 + 64), 8 * v26);
  v27 = 0;
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(v7 + 16);
  v28 = 1 << *(_BYTE *)(v7 + 32);
  v29 = -1;
  if (v28 < 64)
    v29 = ~(-1 << v28);
  v30 = v29 & *(_QWORD *)(v7 + 64);
  v58 = v7 + 64;
  v59 = (unint64_t)(v28 + 63) >> 6;
  while (1)
  {
    if (v30)
    {
      v31 = __clz(__rbit64(v30));
      v30 &= v30 - 1;
      __src = v27;
      v32 = v31 | ((_QWORD)v27 << 6);
      goto LABEL_25;
    }
    v37 = (int64_t)(v27 + 1);
    if (__OFADD__(v27, 1))
    {
      __break(1u);
      goto LABEL_81;
    }
    if (v37 >= v59)
      goto LABEL_47;
    v38 = *(_QWORD *)(v58 + 8 * v37);
    v39 = (int64_t)(v27 + 1);
    if (!v38)
    {
      v39 = (int64_t)(v27 + 2);
      if ((uint64_t)(v27 + 2) >= v59)
        goto LABEL_47;
      v38 = *(_QWORD *)(v58 + 8 * v39);
      if (!v38)
      {
        v39 = (int64_t)(v27 + 3);
        if ((uint64_t)(v27 + 3) >= v59)
          goto LABEL_47;
        v38 = *(_QWORD *)(v58 + 8 * v39);
        if (!v38)
        {
          v39 = (int64_t)(v27 + 4);
          if ((uint64_t)(v27 + 4) >= v59)
            goto LABEL_47;
          v38 = *(_QWORD *)(v58 + 8 * v39);
          if (!v38)
          {
            v39 = (int64_t)(v27 + 5);
            if ((uint64_t)(v27 + 5) >= v59)
              goto LABEL_47;
            v38 = *(_QWORD *)(v58 + 8 * v39);
            if (!v38)
            {
              v39 = (int64_t)(v27 + 6);
              if ((uint64_t)(v27 + 6) >= v59)
                goto LABEL_47;
              v38 = *(_QWORD *)(v58 + 8 * v39);
              if (!v38)
                break;
            }
          }
        }
      }
    }
LABEL_46:
    v30 = (v38 - 1) & v38;
    __src = (char *)v39;
    v32 = __clz(__rbit64(v38)) + (v39 << 6);
LABEL_25:
    v33 = 8 * v32;
    v34 = *(void **)(*(_QWORD *)(v7 + 48) + 8 * v32);
    v35 = 32 * v32;
    outlined init with copy of Any(*(_QWORD *)(v7 + 56) + 32 * v32, (uint64_t)v63);
    *(_QWORD *)(*(_QWORD *)(v13 + 48) + v33) = v34;
    outlined init with take of Any(v63, (_OWORD *)(*(_QWORD *)(v13 + 56) + v35));
    v36 = v34;
    v27 = __src;
  }
  v40 = v27 + 7;
  if ((uint64_t)(v27 + 7) >= v59)
    goto LABEL_47;
  v38 = *(_QWORD *)(v58 + 8 * (_QWORD)v40);
  if (v38)
  {
    v39 = (int64_t)(v27 + 7);
    goto LABEL_46;
  }
  while (1)
  {
    v39 = (int64_t)(v40 + 1);
    if (__OFADD__(v40, 1))
      break;
    if (v39 >= v59)
      goto LABEL_47;
    v38 = *(_QWORD *)(v58 + 8 * v39);
    ++v40;
    if (v38)
      goto LABEL_46;
  }
LABEL_83:
  __break(1u);
LABEL_84:
  type metadata accessor for NSFileAttributeKey(0);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey;
  if (!lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey)
  {
    type metadata accessor for NSAttributedStringKey(255);
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSAttributedStringKey, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey);
  }
  return result;
}

uint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v5;

  if (*a3 != -1)
    swift_once();
  v5 = *a4;
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute(uint64_t a1, uint64_t a2)
{
  return protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute(a1, a2, &one-time initialization token for name, &static AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute.name);
}

uint64_t closure #2 in static AttributeScope.scopeDescription.getter(uint64_t a1, uint64_t a2, uint64_t a3, Swift::UInt a4)
{
  char v4;
  char isUniquelyReferenced_nonNull_native;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t result;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v39 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0x8000000000000000;
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(a4);
  v12 = *(_QWORD *)(v39 + 16);
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    v4 = v10;
    if (*(_QWORD *)(v39 + 24) < v14)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, isUniquelyReferenced_nonNull_native);
      v15 = v39;
      v16 = specialized __RawDictionaryStorage.find<A>(_:)(a4);
      if ((v4 & 1) != (v17 & 1))
        goto LABEL_47;
      v11 = v16;
      if ((v4 & 1) == 0)
        goto LABEL_43;
LABEL_8:
      v18 = (uint64_t *)(*(_QWORD *)(v15 + 56) + 16 * v11);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *v18 = a2;
      v18[1] = a3;
LABEL_44:
      *(_QWORD *)(a1 + 16) = v15;
      return swift_bridgeObjectRelease();
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v15 = v39;
      if ((v10 & 1) != 0)
        goto LABEL_8;
LABEL_43:
      specialized _NativeDictionary._insert(at:key:value:)(v11, a4, a2, a3, (_QWORD *)v15);
      goto LABEL_44;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Type, ScopeDescription>);
  v19 = static _DictionaryStorage.copy(original:)();
  v15 = v19;
  if (!*(_QWORD *)(v39 + 16))
  {
LABEL_42:
    swift_bridgeObjectRelease();
    if ((v4 & 1) != 0)
      goto LABEL_8;
    goto LABEL_43;
  }
  v20 = (char *)(v19 + 64);
  v21 = (char *)(v39 + 64);
  v22 = (unint64_t)((1 << *(_BYTE *)(v15 + 32)) + 63) >> 6;
  v37 = v39 + 64;
  if (v15 != v39 || v20 >= &v21[8 * v22])
    memmove(v20, v21, 8 * v22);
  v23 = 0;
  *(_QWORD *)(v15 + 16) = *(_QWORD *)(v39 + 16);
  v24 = 1 << *(_BYTE *)(v39 + 32);
  v25 = -1;
  if (v24 < 64)
    v25 = ~(-1 << v24);
  v26 = v25 & *(_QWORD *)(v39 + 64);
  v38 = (unint64_t)(v24 + 63) >> 6;
  while (1)
  {
    if (v26)
    {
      v27 = __clz(__rbit64(v26));
      v26 &= v26 - 1;
      v28 = v27 | (v23 << 6);
      goto LABEL_18;
    }
    v33 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
      goto LABEL_46;
    }
    if (v33 >= v38)
      goto LABEL_42;
    v34 = *(_QWORD *)(v37 + 8 * v33);
    ++v23;
    if (!v34)
    {
      v23 = v33 + 1;
      if (v33 + 1 >= v38)
        goto LABEL_42;
      v34 = *(_QWORD *)(v37 + 8 * v23);
      if (!v34)
      {
        v23 = v33 + 2;
        if (v33 + 2 >= v38)
          goto LABEL_42;
        v34 = *(_QWORD *)(v37 + 8 * v23);
        if (!v34)
        {
          v23 = v33 + 3;
          if (v33 + 3 >= v38)
            goto LABEL_42;
          v34 = *(_QWORD *)(v37 + 8 * v23);
          if (!v34)
          {
            v23 = v33 + 4;
            if (v33 + 4 >= v38)
              goto LABEL_42;
            v34 = *(_QWORD *)(v37 + 8 * v23);
            if (!v34)
            {
              v23 = v33 + 5;
              if (v33 + 5 >= v38)
                goto LABEL_42;
              v34 = *(_QWORD *)(v37 + 8 * v23);
              if (!v34)
              {
                v23 = v33 + 6;
                if (v33 + 6 >= v38)
                  goto LABEL_42;
                v34 = *(_QWORD *)(v37 + 8 * v23);
                if (!v34)
                  break;
              }
            }
          }
        }
      }
    }
LABEL_41:
    v26 = (v34 - 1) & v34;
    v28 = __clz(__rbit64(v34)) + (v23 << 6);
LABEL_18:
    v29 = 8 * v28;
    v30 = *(_QWORD *)(*(_QWORD *)(v39 + 48) + 8 * v28);
    v31 = 16 * v28;
    v32 = *(_OWORD *)(*(_QWORD *)(v39 + 56) + v31);
    *(_QWORD *)(*(_QWORD *)(v15 + 48) + v29) = v30;
    *(_OWORD *)(*(_QWORD *)(v15 + 56) + v31) = v32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v35 = v33 + 7;
  if (v35 >= v38)
    goto LABEL_42;
  v34 = *(_QWORD *)(v37 + 8 * v35);
  if (v34)
  {
    v23 = v35;
    goto LABEL_41;
  }
  while (1)
  {
    v23 = v35 + 1;
    if (__OFADD__(v35, 1))
      break;
    if (v23 >= v38)
      goto LABEL_42;
    v34 = *(_QWORD *)(v37 + 8 * v23);
    ++v35;
    if (v34)
      goto LABEL_41;
  }
LABEL_46:
  __break(1u);
LABEL_47:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

id protocol witness for static ObjectiveCConvertibleAttributedStringKey.objectiveCValue(for:) in conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute(_QWORD *a1)
{
  return objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedInteger_, *a1);
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute()
{
  return 0xD00000000000001BLL;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute()
{
  return 0xD00000000000001DLL;
}

NSData protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Data()
{
  return Data._bridgeToObjectiveC()();
}

uint64_t DateComponents.month.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64);
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v10;
  uint64_t result;
  id v12;
  id v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 v22;
  _OWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  _OWORD *v41;
  id v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  void *v46;
  char isEscapingClosureAtFileLocation;
  _QWORD v48[8];
  __int128 aBlock;
  uint64_t (*v50)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v51;
  uint64_t (*v52)();
  uint64_t v53;
  _QWORD *v54;
  id v55;

  if (!a1)
    return MEMORY[0x1E0DEE9E0];
  v7 = MEMORY[0x1E0DEA968];
  if (a2 == MEMORY[0x1E0DEA968] && a3 == MEMORY[0x1E0DEE9B8] + 8)
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRetain();
    v10 = (_QWORD *)static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (v10)
      return (uint64_t)v10;
    v12 = objc_msgSend(a1, sel_count);
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v10 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    }
    v16 = (_QWORD *)v10[6];
    v17 = v10[7];
    swift_retain();
    result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v16, v17, a1, (uint64_t)v12);
    if (result < 0 || (uint64_t)v12 < result)
    {
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    v10[2] = result;
    if (!result)
      goto LABEL_39;
    v18 = result - 1;
    v19 = v10 + 8;
    while (1)
    {
      while (1)
      {
        if (((*(_QWORD *)((char *)v19 + (((unint64_t)v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) != 0)
          goto LABEL_27;
        v24 = (uint64_t *)(v10[6] + 16 * v18);
        v25 = *v24;
        v26 = v24[1];
        swift_bridgeObjectRetain();
        v27 = specialized __RawDictionaryStorage.find<A>(_:)(v25, v26);
        v29 = v28;
        swift_bridgeObjectRelease();
        if ((v29 & 1) == 0)
          break;
        swift_arrayDestroy();
        result = swift_arrayDestroy();
        v30 = v10[2];
        v31 = __OFSUB__(v30, 1);
        v32 = v30 - 1;
        if (v31)
        {
          __break(1u);
          goto LABEL_43;
        }
        v10[2] = v32;
LABEL_27:
        if (--v18 < 0)
          goto LABEL_39;
      }
      *(_QWORD *)((char *)v19 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
      if (v18 < (uint64_t)v27)
      {
        *(_OWORD *)(v10[6] + 16 * v27) = *(_OWORD *)(v10[6] + 16 * v18);
        v20 = v10[7];
        v21 = (_OWORD *)(v20 + 32 * v18);
        v22 = v21[1];
        v23 = (_OWORD *)(v20 + 32 * v27);
        *v23 = *v21;
        v23[1] = v22;
        goto LABEL_27;
      }
      if (v27 == v18)
        goto LABEL_27;
      v33 = v10[6];
      v34 = (uint64_t *)(v33 + 16 * v27);
      v35 = (uint64_t *)(v33 + 16 * v18);
      v36 = *v34;
      v37 = v34[1];
      v38 = v35[1];
      *v34 = *v35;
      v34[1] = v38;
      *v35 = v36;
      v35[1] = v37;
      v39 = v10[7];
      v40 = (_OWORD *)(v39 + 32 * v27);
      v41 = (_OWORD *)(v39 + 32 * v18);
      outlined init with take of Any(v40, &aBlock);
      outlined init with take of Any(v41, v40);
      outlined init with take of Any(&aBlock, v41);
      if (v18 < 0)
        goto LABEL_39;
    }
  }
  swift_unknownObjectRetain();
  v10 = (_QWORD *)static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v10)
    return (uint64_t)v10;
  if ((_swift_isClassOrObjCExistentialType() & 1) != 0 && (_swift_isClassOrObjCExistentialType() & 1) != 0)
  {
    result = (uint64_t)objc_msgSend(a1, sel_copyWithZone_, 0);
    v10 = (_QWORD *)(~((unint64_t)result >> 1) & 0x4000000000000000 | result);
    goto LABEL_40;
  }
  if (*(uint64_t *)(*(_QWORD *)(a2 - 8) + 72) >= 8 && *(_QWORD *)(*(_QWORD *)(a3 - 8) + 72) > 7)
  {
    v42 = objc_msgSend(a1, sel_count);
    MEMORY[0x1E0C80A78](v42);
    v48[2] = a2;
    v48[3] = a3;
    v48[4] = a4;
    v48[5] = a1;
    v48[6] = v43;
    result = _NativeDictionary.init(_unsafeUninitializedCapacity:allowingDuplicates:initializingWith:)(v43, a2 == v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))partial apply for closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:), (uint64_t)v48, a2, a3);
    v10 = (_QWORD *)result;
    goto LABEL_40;
  }
  v14 = objc_msgSend(a1, sel_count);
  if (v14)
  {
    type metadata accessor for _DictionaryStorage();
    v15 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v15 = MEMORY[0x1E0DEE9E0];
  }
  v54 = (_QWORD *)v15;
  v55 = v14;
  v44 = (_QWORD *)swift_allocObject();
  v44[2] = a2;
  v44[3] = a3;
  v44[4] = a4;
  v44[5] = &v54;
  v45 = swift_allocObject();
  *(_QWORD *)(v45 + 16) = partial apply for closure #1 in static Dictionary._forceBridgeFromObjectiveC(_:result:);
  *(_QWORD *)(v45 + 24) = v44;
  v52 = partial apply for closure #1 in NSRunLoop.schedule(options:_:);
  v53 = v45;
  *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
  *((_QWORD *)&aBlock + 1) = 1107296256;
  v50 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any, @in_guaranteed Any, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  v51 = &block_descriptor_16;
  v46 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(a1, sel_enumerateKeysAndObjectsUsingBlock_, v46);
  _Block_release(v46);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    goto LABEL_44;
  v10 = v54;
  if ((id)v54[2] != v55)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
LABEL_39:
  result = swift_release();
LABEL_40:
  if (v10)
    return (uint64_t)v10;
LABEL_46:
  __break(1u);
  return result;
}

uint64_t _NativeDictionary.init(_unsafeUninitializedCapacity:allowingDuplicates:initializingWith:)(uint64_t a1, int a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v48;
  char *v49;
  char *v50;
  void (*v51)(char *, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  void (*v56)(char *, uint64_t, uint64_t);
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;

  v72 = a2;
  v71 = *(_QWORD *)(a6 - 8);
  v9 = MEMORY[0x1E0C80A78](a1);
  v68 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v9);
  v15 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = v16;
  v70 = v17;
  if (v13)
  {
    type metadata accessor for _DictionaryStorage();
    v18 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v18 = MEMORY[0x1E0DEE9E0];
  }
  v19 = *(_QWORD *)(v18 + 48);
  v20 = *(_QWORD *)(v18 + 56);
  swift_retain();
  result = a3(v19, a1, v20, a1);
  if (result < 0 || result > a1)
  {
LABEL_47:
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v18 + 16) = result;
    if (result)
    {
      v22 = result - 1;
      v23 = v18 + 64;
      v24 = v70;
      v67 = v15;
      while (1)
      {
        if (((*(_QWORD *)(v23 + (((unint64_t)v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) != 0)
          goto LABEL_9;
        v25 = *(_QWORD *)(v12 + 72);
        v26 = v25 * v22;
        (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, *(_QWORD *)(v18 + 48) + v25 * v22, a5);
        if ((v72 & 1) == 0)
          break;
        v27 = __RawDictionaryStorage.find<A>(_:)((uint64_t)v15, a5, v24);
        v29 = v28;
        (*(void (**)(char *, uint64_t))(v12 + 8))(v15, a5);
        if ((v29 & 1) == 0)
        {
          v37 = (uint64_t *)(v23 + 8 * (v27 >> 6));
          v38 = 1 << v27;
          v39 = *v37;
          v24 = v70;
          goto LABEL_28;
        }
        swift_arrayDestroy();
        result = swift_arrayDestroy();
        v30 = *(_QWORD *)(v18 + 16);
        v31 = __OFSUB__(v30, 1);
        v32 = v30 - 1;
        if (v31)
        {
LABEL_46:
          __break(1u);
          goto LABEL_47;
        }
        *(_QWORD *)(v18 + 16) = v32;
        --v22;
        v24 = v70;
LABEL_10:
        if (v22 < 0)
          goto LABEL_45;
      }
      v33 = dispatch thunk of Hashable._rawHashValue(seed:)();
      result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, a5);
      v34 = -1 << *(_BYTE *)(v18 + 32);
      v35 = v33 & ~v34;
      v36 = v35 >> 6;
      if (((-1 << v35) & ~*(_QWORD *)(v23 + 8 * (v35 >> 6))) != 0)
      {
        v27 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)(v23 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v40 = 0;
        v41 = (unint64_t)(63 - v34) >> 6;
        do
        {
          if (++v36 == v41 && (v40 & 1) != 0)
          {
            __break(1u);
            goto LABEL_46;
          }
          v42 = v36 == v41;
          if (v36 == v41)
            v36 = 0;
          v40 |= v42;
          v43 = *(_QWORD *)(v23 + 8 * v36);
        }
        while (v43 == -1);
        v27 = __clz(__rbit64(~v43)) + (v36 << 6);
      }
      v37 = (uint64_t *)(v23 + 8 * (v27 >> 6));
      v39 = 1 << v27;
      v38 = *v37;
LABEL_28:
      *v37 = v39 | v38;
      if (v22 >= (uint64_t)v27)
      {
        if (v27 != v22)
        {
          v48 = *(_QWORD *)(v18 + 48);
          v49 = (char *)(v48 + v25 * v27);
          v50 = (char *)(v48 + v26);
          v51 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 32);
          v51(v15, (uint64_t)v49, a5);
          v51(v49, (uint64_t)v50, a5);
          v51(v50, (uint64_t)v15, a5);
          v52 = *(_QWORD *)(v18 + 56);
          v53 = *(_QWORD *)(v71 + 72);
          v54 = (char *)(v52 + v53 * v27);
          v55 = (char *)(v52 + v53 * v22);
          v56 = *(void (**)(char *, uint64_t, uint64_t))(v71 + 32);
          v57 = v12;
          v58 = v68;
          v59 = v69;
          v56(v68, (uint64_t)v54, v69);
          v56(v54, (uint64_t)v55, v59);
          v60 = v55;
          v24 = v70;
          v61 = v58;
          v12 = v57;
          v15 = v67;
          v56(v60, (uint64_t)v61, v59);
          goto LABEL_10;
        }
      }
      else
      {
        v44 = *(_QWORD *)(v18 + 48);
        v45 = v44 + v25 * v27;
        v46 = v44 + v26 + v25;
        if ((uint64_t)(v25 * v27) < v26 || v45 >= v46)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v25 * v27 != v26)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        v62 = *(_QWORD *)(v18 + 56);
        v63 = *(_QWORD *)(v71 + 72);
        v64 = v62 + v63 * v27;
        v65 = v62 + v63 * v22 + v63;
        if ((uint64_t)(v63 * v27) < v63 * v22 || v64 >= v65)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v63 * v27 != v63 * v22)
        {
          swift_arrayInitWithTakeBackToFront();
        }
      }
LABEL_9:
      --v22;
      goto LABEL_10;
    }
LABEL_45:
    swift_release();
    return v18;
  }
  return result;
}

unint64_t __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, unint64_t, uint64_t);
  char v16;
  _QWORD v18[2];

  v5 = v4;
  v18[0] = a1;
  v18[1] = a4;
  v7 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = -1 << *(_BYTE *)(v5 + 32);
  v12 = v11 & ~v10;
  if (((*(_QWORD *)(v5 + 64 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
  {
    v13 = ~v10;
    v14 = *(_QWORD *)(v7 + 72);
    v15 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v15(v9, *(_QWORD *)(v5 + 48) + v14 * v12, a3);
      v16 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a3);
      if ((v16 & 1) != 0)
        break;
      v12 = (v12 + 1) & v13;
    }
    while (((*(_QWORD *)(v5 + 64 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0);
  }
  return v12;
}

unint64_t __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v6, a2, a3);
}

void partial apply for closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(a1, a2, a3, a4, v4[5], v4[6], v4[2], v4[3]);
}

void closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char isClassOrObjCExistentialType;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v12 = *(_QWORD *)(a8 - 8);
  MEMORY[0x1E0C80A78](a1);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v15 - 8);
  *(_QWORD *)&v20 = MEMORY[0x1E0C80A78](v17).n128_u64[0];
  v22 = (char *)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!v23)
    goto LABEL_32;
  if (!a3)
  {
LABEL_33:
    __break(1u);
    return;
  }
  v36 = v19;
  objc_msgSend(v18, sel__getObjects_andKeys_count_, a3, a1, a6, v20);
  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
  v35 = a3;
  if ((isClassOrObjCExistentialType & 1) != 0)
  {
    if (a6 < 0)
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    if (a6)
    {
      v25 = 0;
      do
      {
        v37 = *(_QWORD *)(a1 + 8 * v25);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a1 + *(_QWORD *)(v16 + 72) * v25++, v22, a7);
      }
      while (a6 != v25);
    }
  }
  else
  {
    if (a6 < 0)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    if (a6)
    {
      v26 = a6;
      while (v26 <= a6)
      {
        v27 = v26 - 1;
        v37 = *(_QWORD *)(a1 - 8 + 8 * v26);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a1 + *(_QWORD *)(v16 + 72) * v27, v22, a7);
        v26 = v27;
        if (!v27)
          goto LABEL_14;
      }
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
  }
LABEL_14:
  v28 = v36;
  if ((_swift_isClassOrObjCExistentialType() & 1) == 0)
  {
    v31 = v35;
    if (a6 < 0)
    {
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    if (!a6)
      return;
    v32 = a6;
    while (v32 <= a6)
    {
      v33 = v32 - 1;
      v37 = *(_QWORD *)(v31 - 8 + 8 * v32);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v31 + *(_QWORD *)(v12 + 72) * v33, v14, v28);
      v32 = v33;
      if (!v33)
        return;
    }
    goto LABEL_27;
  }
  v29 = v35;
  if (a6 < 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (a6)
  {
    v30 = 0;
    do
    {
      v37 = *(_QWORD *)(v29 + 8 * v30);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v29 + *(_QWORD *)(v12 + 72) * v30++, v14, v28);
    }
    while (a6 != v30);
  }
}

id @objc static NSLocale._localeIdentifier(fromComponents:)(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v3;
  void *v4;

  v3 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a3);
  specialized static Locale.identifier(fromAnyComponents:)(v3);
  swift_bridgeObjectRelease();
  v4 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  return v4;
}

_QWORD *specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(_QWORD *result, uint64_t a2, id a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  if (!result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (a2)
  {
    v6 = result;
    result = objc_msgSend(a3, sel__getObjects_andKeys_count_, a2, result, a4);
    if ((a4 & 0x8000000000000000) == 0)
    {
      if (!a4)
        return (_QWORD *)a4;
      v7 = 0;
      v8 = &v6[2 * a4 - 1];
      do
      {
        if (a4 + v7 > a4)
        {
          __break(1u);
          goto LABEL_13;
        }
        v15 = v6[a4 - 1 + v7];
        swift_unknownObjectRetain();
        result = (_QWORD *)swift_dynamicCast();
        v9 = *((_QWORD *)&v14 + 1);
        *(v8 - 1) = v14;
        *v8 = v9;
        --v7;
        v8 -= 2;
      }
      while (a4 + v7);
      v10 = a2 - 32;
      v11 = 32 * a4;
      v12 = a4;
      while (v12 <= a4)
      {
        v13 = v12 - 1;
        v15 = *(_QWORD *)(v10 + 8 * v12 + 24);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        result = outlined init with take of Any(&v14, (_OWORD *)(v10 + v11));
        v11 -= 32;
        v12 = v13;
        if (!v13)
          return (_QWORD *)a4;
      }
LABEL_13:
      __break(1u);
    }
    __break(1u);
    goto LABEL_15;
  }
LABEL_16:
  __break(1u);
  return result;
}

{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  if (!result)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (a2)
  {
    v6 = result;
    result = objc_msgSend(a3, sel__getObjects_andKeys_count_, a2, result, a4);
    if ((a4 & 0x8000000000000000) == 0)
    {
      if (!a4)
        return (_QWORD *)a4;
      type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
      v7 = a4;
      do
      {
        *(_QWORD *)&v12 = *v6;
        swift_unknownObjectRetain();
        result = (_QWORD *)swift_dynamicCast();
        *v6++ = v13;
        --v7;
      }
      while (v7);
      v8 = a2 - 32;
      v9 = 32 * a4;
      v10 = a4;
      while (1)
      {
        v11 = v10 - 1;
        if (v10 < 1)
          break;
        v13 = *(_QWORD *)(v8 + 8 * v10 + 24);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        result = outlined init with take of Any(&v12, (_OWORD *)(v8 + v9));
        v9 -= 32;
        v10 = v11;
        if (!v11)
          return (_QWORD *)a4;
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_13;
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t specialized static Locale.identifier(fromAnyComponents:)(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t ObjectType;
  void (*v6)(__int128 *__return_ptr, uint64_t);
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  char v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  _BOOL8 v26;
  BOOL v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  void *v38;
  unint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  int64_t v53;
  unint64_t v54;
  int64_t v55;
  void *v56;
  id v57;
  Swift::String v58;
  Swift::String v59;
  unint64_t v60;
  uint64_t v61;
  id v62;
  _QWORD *v63;
  __int128 v64;
  __int128 v65;
  unint64_t v66;

  v1 = a1;
  v66 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v2)
  {
    v3 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000014, 0x8000000182306A70);
    if ((v4 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v1 + 56) + 32 * v3, (uint64_t)&v64);
      if ((swift_dynamicCast() & 1) != 0)
      {
        ObjectType = swift_getObjectType();
        v6 = *(void (**)(__int128 *__return_ptr, uint64_t))(v61 + 24);
        swift_unknownObjectRetain();
        v6(&v64, ObjectType);
        swift_unknownObjectRelease();
        v7 = Calendar.Identifier.cfCalendarIdentifier.getter();
        *((_QWORD *)&v65 + 1) = MEMORY[0x1E0DEA968];
        *(_QWORD *)&v64 = v7;
        *((_QWORD *)&v64 + 1) = v8;
        specialized Dictionary.subscript.setter((uint64_t)&v64, 0x7261646E656C6163, 0xE800000000000000);
        swift_unknownObjectRelease();
        v1 = v66;
      }
    }
  }
  swift_bridgeObjectRetain();
  v9 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000014, 0x8000000182306A70);
  v11 = v10;
  swift_bridgeObjectRelease();
  if ((v11 & 1) == 0)
  {
    v64 = 0u;
    v65 = 0u;
    goto LABEL_10;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v66 = 0x8000000000000000;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_26;
  v13 = v1;
  while (1)
  {
    swift_bridgeObjectRelease();
    outlined init with take of Any((_OWORD *)(*(_QWORD *)(v13 + 56) + 32 * v9), &v64);
    specialized _NativeDictionary._delete(at:)(v9, v13);
    v66 = v13;
    swift_bridgeObjectRelease();
LABEL_10:
    outlined destroy of Any?((uint64_t)&v64, &demangling cache variable for type metadata for Any?);
    v14 = swift_bridgeObjectRetain();
    v15 = specialized Sequence.compactMap<A>(_:)(v14);
    swift_bridgeObjectRelease_n();
    v1 = *(_QWORD *)(v15 + 16);
    if (!v1)
    {
      v16 = (_QWORD *)MEMORY[0x1E0DEE9E0];
      goto LABEL_22;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
    v16 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    v17 = *(_QWORD *)(v15 + 16);
    v63 = v16;
    if (!v17)
    {
LABEL_22:
      swift_bridgeObjectRelease();
      v35 = specialized static Locale.identifier(fromComponents:)((uint64_t)v16);
      swift_release();
      return v35;
    }
    swift_bridgeObjectRetain_n();
    v18 = 0;
    v19 = (unint64_t *)(v15 + 56);
    while (1)
    {
      v9 = v18 + 1;
      if (__OFADD__(v18, 1))
        break;
      v21 = *(v19 - 2);
      v22 = *(v19 - 1);
      v1 = *v19;
      *(_QWORD *)&v64 = *(v19 - 3);
      v20 = v64;
      *((_QWORD *)&v64 + 1) = v21;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v23 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
      v25 = v16[2];
      v26 = (v24 & 1) == 0;
      v27 = __OFADD__(v25, v26);
      v28 = v25 + v26;
      if (v27)
        goto LABEL_24;
      v29 = v24;
      if (v16[3] < v28)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v28, 1);
        v16 = v63;
        v23 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
        if ((v29 & 1) != (v30 & 1))
        {
LABEL_61:
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          goto LABEL_62;
        }
      }
      if ((v29 & 1) != 0)
        goto LABEL_59;
      v16[(v23 >> 6) + 8] |= 1 << v23;
      v31 = (uint64_t *)(v16[6] + 16 * v23);
      *v31 = v20;
      v31[1] = v21;
      v32 = (_QWORD *)(v16[7] + 16 * v23);
      *v32 = v22;
      v32[1] = v1;
      v33 = v16[2];
      v27 = __OFADD__(v33, 1);
      v34 = v33 + 1;
      if (v27)
        goto LABEL_25;
      v19 += 4;
      v16[2] = v34;
      ++v18;
      if (v9 == v17)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_22;
      }
    }
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v37 = static _DictionaryStorage.copy(original:)();
    v13 = v37;
    if (*(_QWORD *)(v1 + 16))
      break;
LABEL_56:
    swift_bridgeObjectRelease();
  }
  v38 = (void *)(v37 + 64);
  v39 = (unint64_t)((1 << *(_BYTE *)(v13 + 32)) + 63) >> 6;
  if (v13 != v1 || (unint64_t)v38 >= v1 + 64 + 8 * v39)
    memmove(v38, (const void *)(v1 + 64), 8 * v39);
  v60 = v1 + 64;
  v40 = 0;
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(v1 + 16);
  v41 = 1 << *(_BYTE *)(v1 + 32);
  v42 = -1;
  if (v41 < 64)
    v42 = ~(-1 << v41);
  v43 = v42 & *(_QWORD *)(v1 + 64);
  v44 = (unint64_t)(v41 + 63) >> 6;
  while (1)
  {
    if (v43)
    {
      v45 = __clz(__rbit64(v43));
      v43 &= v43 - 1;
      v46 = v45 | (v40 << 6);
      goto LABEL_34;
    }
    v53 = v40 + 1;
    if (__OFADD__(v40, 1))
    {
      __break(1u);
      goto LABEL_58;
    }
    if (v53 >= v44)
      goto LABEL_56;
    v54 = *(_QWORD *)(v60 + 8 * v53);
    ++v40;
    if (!v54)
    {
      v40 = v53 + 1;
      if (v53 + 1 >= v44)
        goto LABEL_56;
      v54 = *(_QWORD *)(v60 + 8 * v40);
      if (!v54)
      {
        v40 = v53 + 2;
        if (v53 + 2 >= v44)
          goto LABEL_56;
        v54 = *(_QWORD *)(v60 + 8 * v40);
        if (!v54)
        {
          v40 = v53 + 3;
          if (v53 + 3 >= v44)
            goto LABEL_56;
          v54 = *(_QWORD *)(v60 + 8 * v40);
          if (!v54)
          {
            v40 = v53 + 4;
            if (v53 + 4 >= v44)
              goto LABEL_56;
            v54 = *(_QWORD *)(v60 + 8 * v40);
            if (!v54)
            {
              v40 = v53 + 5;
              if (v53 + 5 >= v44)
                goto LABEL_56;
              v54 = *(_QWORD *)(v60 + 8 * v40);
              if (!v54)
                break;
            }
          }
        }
      }
    }
LABEL_55:
    v43 = (v54 - 1) & v54;
    v46 = __clz(__rbit64(v54)) + (v40 << 6);
LABEL_34:
    v47 = 16 * v46;
    v48 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v46);
    v50 = *v48;
    v49 = v48[1];
    v51 = 32 * v46;
    outlined init with copy of Any(*(_QWORD *)(v1 + 56) + 32 * v46, (uint64_t)&v64);
    v52 = (_QWORD *)(*(_QWORD *)(v13 + 48) + v47);
    *v52 = v50;
    v52[1] = v49;
    outlined init with take of Any(&v64, (_OWORD *)(*(_QWORD *)(v13 + 56) + v51));
    swift_bridgeObjectRetain();
  }
  v55 = v53 + 6;
  if (v55 >= v44)
    goto LABEL_56;
  v54 = *(_QWORD *)(v60 + 8 * v55);
  if (v54)
  {
    v40 = v55;
    goto LABEL_55;
  }
  while (1)
  {
    v40 = v55 + 1;
    if (__OFADD__(v55, 1))
      break;
    if (v40 >= v44)
      goto LABEL_56;
    v54 = *(_QWORD *)(v60 + 8 * v40);
    ++v55;
    if (v54)
      goto LABEL_55;
  }
LABEL_58:
  __break(1u);
LABEL_59:
  v56 = (void *)swift_allocError();
  swift_willThrow();
  v62 = v56;
  v57 = v56;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) != 0)
  {
    _StringGuts.grow(_:)(30);
    v58._countAndFlagsBits = 0xD00000000000001BLL;
    v58._object = (void *)0x80000001823049D0;
    String.append(_:)(v58);
    _print_unlocked<A, B>(_:_:)();
    v59._countAndFlagsBits = 39;
    v59._object = (void *)0xE100000000000000;
    String.append(_:)(v59);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_61;
  }
LABEL_62:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t specialized static Locale.identifier(fromComponents:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;
  Swift::String v10;
  _QWORD *v11;
  char v12;
  char v13;
  unint64_t v14;
  char v15;
  Swift::String v16;
  unint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  void *v24;
  unint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  void *v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  unint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  Swift::String v37;
  unint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BOOL8 v53;
  BOOL v54;
  uint64_t v55;
  char v56;
  uint64_t *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  Swift::String v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  Swift::String v67;
  uint64_t countAndFlagsBits;
  void *object;
  unint64_t v70;
  char v71;
  void **v72;
  uint64_t v73;
  uint64_t *v74;
  void *v75;
  Swift::String v76;
  Swift::String v77;
  void *v78;
  uint64_t v79;
  Swift::String v80;
  char v81;
  uint64_t result;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  int64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  int64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  int64_t v104;
  unint64_t v105;
  int64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  unint64_t v111;
  int64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  int64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  _QWORD *v127;
  int64_t v128;
  unint64_t v129;
  int64_t v130;
  uint64_t v131;
  char *v132;
  unint64_t v133;
  int64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  int64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  _QWORD *v147;
  _QWORD *v148;
  int64_t v149;
  unint64_t v150;
  int64_t v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  int64_t v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  _QWORD *v171;
  int64_t v172;
  unint64_t v173;
  int64_t v174;
  void *v175;
  id v176;
  Swift::String v177;
  Swift::String v178;
  void *__src;
  char *__srca;
  char *__srcb;
  id v182;
  Swift::String v183;
  _QWORD *v184;
  uint64_t v185;
  unint64_t v186;

  v2 = a1;
  v185 = 0;
  v186 = 0xE000000000000000;
  v3 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (!v3)
    goto LABEL_32;
  v1 = 0xD000000000000017;
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000018, 0x8000000182306A90);
  v5 = v2;
  if ((v6 & 1) != 0)
  {
    v7 = (uint64_t *)(*(_QWORD *)(v2 + 56) + 16 * v4);
    v8 = *v7;
    v9 = (void *)v7[1];
    swift_bridgeObjectRetain();
    v10._countAndFlagsBits = v8;
    v10._object = v9;
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v11 = (_QWORD *)specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000018, 0x8000000182306A90);
    v13 = v12;
    swift_bridgeObjectRelease();
    v5 = v2;
    if ((v13 & 1) != 0)
    {
      v5 = v2;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        goto LABEL_62;
LABEL_5:
      swift_bridgeObjectRelease();
      specialized _NativeDictionary._delete(at:)((unint64_t)v11, v5);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_31;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(v1 - 1, 0x8000000182306AB0);
  if ((v15 & 1) == 0)
    goto LABEL_12;
  v16 = *(Swift::String *)(*(_QWORD *)(v2 + 56) + 16 * v14);
  v183._countAndFlagsBits = 95;
  v183._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  String.append(_:)(v183);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v17 = specialized __RawDictionaryStorage.find<A>(_:)(v1 - 1, 0x8000000182306AB0);
  v19 = v18;
  swift_bridgeObjectRelease();
  if ((v19 & 1) == 0)
    goto LABEL_12;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    v20 = v5;
    goto LABEL_11;
  }
  v107 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  v108 = static _DictionaryStorage.copy(original:)();
  v20 = v108;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_123;
  v109 = (void *)(v108 + 64);
  v110 = v5 + 64;
  v111 = (unint64_t)((1 << *(_BYTE *)(v20 + 32)) + 63) >> 6;
  v1 = v20;
  if (v20 != v5 || (unint64_t)v109 >= v110 + 8 * v111)
    memmove(v109, (const void *)(v5 + 64), 8 * v111);
  v112 = 0;
  *(_QWORD *)(v20 + 16) = *(_QWORD *)(v5 + 16);
  v113 = 1 << *(_BYTE *)(v5 + 32);
  v114 = -1;
  if (v113 < 64)
    v114 = ~(-1 << v113);
  v115 = v114 & *(_QWORD *)(v5 + 64);
  v116 = (unint64_t)(v113 + 63) >> 6;
  while (1)
  {
    if (v115)
    {
      v117 = __clz(__rbit64(v115));
      v115 &= v115 - 1;
      v118 = v117 | (v112 << 6);
      goto LABEL_101;
    }
    v128 = v112 + 1;
    if (__OFADD__(v112, 1))
    {
LABEL_187:
      __break(1u);
LABEL_188:
      __break(1u);
LABEL_189:
      __break(1u);
      goto LABEL_190;
    }
    if (v128 >= v116)
      goto LABEL_123;
    v129 = *(_QWORD *)(v110 + 8 * v128);
    ++v112;
    if (!v129)
    {
      v112 = v128 + 1;
      if (v128 + 1 >= v116)
        goto LABEL_123;
      v129 = *(_QWORD *)(v110 + 8 * v112);
      if (!v129)
      {
        v112 = v128 + 2;
        if (v128 + 2 >= v116)
          goto LABEL_123;
        v129 = *(_QWORD *)(v110 + 8 * v112);
        if (!v129)
        {
          v112 = v128 + 3;
          if (v128 + 3 >= v116)
            goto LABEL_123;
          v129 = *(_QWORD *)(v110 + 8 * v112);
          if (!v129)
          {
            v112 = v128 + 4;
            if (v128 + 4 >= v116)
              goto LABEL_123;
            v129 = *(_QWORD *)(v110 + 8 * v112);
            if (!v129)
            {
              v112 = v128 + 5;
              if (v128 + 5 >= v116)
                goto LABEL_123;
              v129 = *(_QWORD *)(v110 + 8 * v112);
              if (!v129)
                break;
            }
          }
        }
      }
    }
LABEL_122:
    v115 = (v129 - 1) & v129;
    v118 = __clz(__rbit64(v129)) + (v112 << 6);
LABEL_101:
    v119 = 16 * v118;
    v120 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v119);
    v122 = *v120;
    v121 = v120[1];
    v123 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v119);
    v124 = *v123;
    v125 = v123[1];
    v126 = (_QWORD *)(*(_QWORD *)(v20 + 48) + v119);
    *v126 = v122;
    v126[1] = v121;
    v127 = (_QWORD *)(*(_QWORD *)(v20 + 56) + v119);
    *v127 = v124;
    v127[1] = v125;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v130 = v128 + 6;
  if (v130 >= v116)
    goto LABEL_123;
  v129 = *(_QWORD *)(v110 + 8 * v130);
  if (v129)
  {
    v112 = v130;
    v20 = v1;
    goto LABEL_122;
  }
  while (1)
  {
    v112 = v130 + 1;
    if (__OFADD__(v130, 1))
      goto LABEL_193;
    v20 = v1;
    if (v112 >= v116)
      break;
    v129 = *(_QWORD *)(v110 + 8 * v112);
    ++v130;
    if (v129)
      goto LABEL_122;
  }
LABEL_123:
  swift_bridgeObjectRelease();
  v5 = v20;
  v2 = v107;
LABEL_11:
  swift_bridgeObjectRelease();
  specialized _NativeDictionary._delete(at:)(v17, v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_12:
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_31:
    v2 = v5;
    goto LABEL_32;
  }
  v21 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000017, 0x8000000182306AD0);
  if ((v22 & 1) != 0)
  {
    v23 = (uint64_t *)(*(_QWORD *)(v2 + 56) + 16 * v21);
    v1 = *v23;
    v24 = (void *)v23[1];
    swift_bridgeObjectRetain();
  }
  else
  {
    v1 = 0;
    v24 = 0;
  }
  if (*(_QWORD *)(v2 + 16)
    && (v25 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000017, 0x8000000182306AF0), (v26 & 1) != 0))
  {
    v27 = (uint64_t *)(*(_QWORD *)(v2 + 56) + 16 * v25);
    v28 = *v27;
    v29 = (void *)v27[1];
    swift_bridgeObjectRetain();
    if (!v24)
    {
LABEL_19:
      if (v29)
      {
        v30._countAndFlagsBits = 95;
        v30._object = (void *)0xE100000000000000;
        String.append(_:)(v30);
        goto LABEL_27;
      }
      goto LABEL_31;
    }
  }
  else
  {
    v28 = 0;
    v29 = 0;
    if (!v24)
      goto LABEL_19;
  }
  v31._countAndFlagsBits = 95;
  v31._object = (void *)0xE100000000000000;
  String.append(_:)(v31);
  v32._countAndFlagsBits = v1;
  v32._object = v24;
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v33 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000017, 0x8000000182306AD0);
  v35 = v34;
  swift_bridgeObjectRelease();
  if ((v35 & 1) == 0)
    goto LABEL_26;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    v36 = v5;
    goto LABEL_25;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  v131 = static _DictionaryStorage.copy(original:)();
  v36 = v131;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_184;
  v132 = (char *)(v131 + 64);
  __srcb = (char *)(v5 + 64);
  v133 = (unint64_t)((1 << *(_BYTE *)(v36 + 32)) + 63) >> 6;
  if (v36 != v5 || v132 >= &__srcb[8 * v133])
    memmove(v132, __srcb, 8 * v133);
  v134 = 0;
  *(_QWORD *)(v36 + 16) = *(_QWORD *)(v5 + 16);
  v135 = 1 << *(_BYTE *)(v5 + 32);
  v136 = -1;
  if (v135 < 64)
    v136 = ~(-1 << v135);
  v137 = v136 & *(_QWORD *)(v5 + 64);
  v138 = (unint64_t)(v135 + 63) >> 6;
  while (2)
  {
    if (v137)
    {
      v139 = __clz(__rbit64(v137));
      v137 &= v137 - 1;
      v140 = v139 | (v134 << 6);
LABEL_132:
      v141 = 16 * v140;
      v142 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v141);
      v144 = *v142;
      v143 = v142[1];
      v145 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v141);
      v146 = *v145;
      v1 = v145[1];
      v147 = (_QWORD *)(*(_QWORD *)(v36 + 48) + v141);
      *v147 = v144;
      v147[1] = v143;
      v148 = (_QWORD *)(*(_QWORD *)(v36 + 56) + v141);
      *v148 = v146;
      v148[1] = v1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      continue;
    }
    break;
  }
  v149 = v134 + 1;
  if (__OFADD__(v134, 1))
    goto LABEL_188;
  if (v149 >= v138)
    goto LABEL_184;
  v150 = *(_QWORD *)&__srcb[8 * v149];
  ++v134;
  if (v150)
    goto LABEL_153;
  v134 = v149 + 1;
  if (v149 + 1 >= v138)
    goto LABEL_184;
  v150 = *(_QWORD *)&__srcb[8 * v134];
  if (v150)
    goto LABEL_153;
  v134 = v149 + 2;
  if (v149 + 2 >= v138)
    goto LABEL_184;
  v150 = *(_QWORD *)&__srcb[8 * v134];
  if (v150)
    goto LABEL_153;
  v134 = v149 + 3;
  if (v149 + 3 >= v138)
    goto LABEL_184;
  v150 = *(_QWORD *)&__srcb[8 * v134];
  if (v150)
    goto LABEL_153;
  v134 = v149 + 4;
  if (v149 + 4 >= v138)
    goto LABEL_184;
  v150 = *(_QWORD *)&__srcb[8 * v134];
  if (v150)
    goto LABEL_153;
  v134 = v149 + 5;
  if (v149 + 5 >= v138)
    goto LABEL_184;
  v150 = *(_QWORD *)&__srcb[8 * v134];
  if (v150)
  {
LABEL_153:
    v137 = (v150 - 1) & v150;
    v140 = __clz(__rbit64(v150)) + (v134 << 6);
    goto LABEL_132;
  }
  v151 = v149 + 6;
  if (v151 >= v138)
    goto LABEL_184;
  v150 = *(_QWORD *)&__srcb[8 * v151];
  if (v150)
  {
    v134 = v151;
    goto LABEL_153;
  }
  while (1)
  {
    v134 = v151 + 1;
    if (__OFADD__(v151, 1))
      goto LABEL_194;
    if (v134 >= v138)
      break;
    v150 = *(_QWORD *)&__srcb[8 * v134];
    ++v151;
    if (v150)
      goto LABEL_153;
  }
LABEL_184:
  swift_bridgeObjectRelease();
  v5 = v36;
LABEL_25:
  swift_bridgeObjectRelease();
  specialized _NativeDictionary._delete(at:)(v33, v36);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_26:
  v2 = v5;
  if (!v29)
    goto LABEL_32;
LABEL_27:
  v183._countAndFlagsBits = 95;
  v183._object = (void *)0xE100000000000000;
  v37._countAndFlagsBits = v28;
  v37._object = v29;
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  String.append(_:)(v183);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v38 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000017, 0x8000000182306AF0);
  v40 = v39;
  swift_bridgeObjectRelease();
  if ((v40 & 1) == 0)
    goto LABEL_31;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    v2 = v5;
    goto LABEL_30;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  v152 = static _DictionaryStorage.copy(original:)();
  v2 = v152;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_185;
  v153 = (void *)(v152 + 64);
  v154 = v5 + 64;
  v155 = (unint64_t)((1 << *(_BYTE *)(v2 + 32)) + 63) >> 6;
  v156 = v2;
  if (v2 != v5 || (unint64_t)v153 >= v154 + 8 * v155)
    memmove(v153, (const void *)(v5 + 64), 8 * v155);
  v1 = 0;
  *(_QWORD *)(v2 + 16) = *(_QWORD *)(v5 + 16);
  v157 = 1 << *(_BYTE *)(v5 + 32);
  v158 = -1;
  if (v157 < 64)
    v158 = ~(-1 << v157);
  v159 = v158 & *(_QWORD *)(v5 + 64);
  v160 = (unint64_t)(v157 + 63) >> 6;
  while (2)
  {
    if (v159)
    {
      v161 = __clz(__rbit64(v159));
      v159 &= v159 - 1;
      v162 = v161 | (v1 << 6);
LABEL_162:
      v163 = 16 * v162;
      v164 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v163);
      v166 = *v164;
      v165 = v164[1];
      v167 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v163);
      v168 = *v167;
      v169 = v167[1];
      v170 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v163);
      *v170 = v166;
      v170[1] = v165;
      v171 = (_QWORD *)(*(_QWORD *)(v2 + 56) + v163);
      *v171 = v168;
      v171[1] = v169;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      continue;
    }
    break;
  }
  v172 = v1 + 1;
  if (__OFADD__(v1, 1))
    goto LABEL_189;
  if (v172 >= v160)
    goto LABEL_185;
  v173 = *(_QWORD *)(v154 + 8 * v172);
  ++v1;
  if (v173)
    goto LABEL_183;
  v1 = v172 + 1;
  if (v172 + 1 >= v160)
    goto LABEL_185;
  v173 = *(_QWORD *)(v154 + 8 * v1);
  if (v173)
    goto LABEL_183;
  v1 = v172 + 2;
  if (v172 + 2 >= v160)
    goto LABEL_185;
  v173 = *(_QWORD *)(v154 + 8 * v1);
  if (v173)
    goto LABEL_183;
  v1 = v172 + 3;
  if (v172 + 3 >= v160)
    goto LABEL_185;
  v173 = *(_QWORD *)(v154 + 8 * v1);
  if (v173)
    goto LABEL_183;
  v1 = v172 + 4;
  if (v172 + 4 >= v160)
    goto LABEL_185;
  v173 = *(_QWORD *)(v154 + 8 * v1);
  if (v173)
    goto LABEL_183;
  v1 = v172 + 5;
  if (v172 + 5 >= v160)
    goto LABEL_185;
  v173 = *(_QWORD *)(v154 + 8 * v1);
  if (v173)
  {
LABEL_183:
    v159 = (v173 - 1) & v173;
    v162 = __clz(__rbit64(v173)) + (v1 << 6);
    goto LABEL_162;
  }
  v174 = v172 + 6;
  if (v174 >= v160)
    goto LABEL_185;
  v173 = *(_QWORD *)(v154 + 8 * v174);
  if (v173)
  {
    v1 = v174;
    v2 = v156;
    goto LABEL_183;
  }
  while (1)
  {
    v1 = v174 + 1;
    if (__OFADD__(v174, 1))
      goto LABEL_195;
    v2 = v156;
    if (v1 >= v160)
      break;
    v173 = *(_QWORD *)(v154 + 8 * v1);
    ++v174;
    if (v173)
      goto LABEL_183;
  }
LABEL_185:
  swift_bridgeObjectRelease();
LABEL_30:
  swift_bridgeObjectRelease();
  specialized _NativeDictionary._delete(at:)(v38, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_32:
  v41 = swift_bridgeObjectRetain();
  v42 = specialized Sequence.compactMap<A>(_:)(v41);
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v42 + 16))
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9E0];
LABEL_44:
    swift_bridgeObjectRelease();
    if (v11[2])
    {
      v61._countAndFlagsBits = 64;
      v61._object = (void *)0xE100000000000000;
      String.append(_:)(v61);
      swift_retain();
      v62 = swift_bridgeObjectRetain();
      v63 = specialized _copyCollectionToContiguousArray<A>(_:)(v62);
      swift_release();
      v183._countAndFlagsBits = (uint64_t)v63;
      specialized MutableCollection<>.sort(by:)(&v183._countAndFlagsBits);
      swift_release();
      __srca = (char *)v183._countAndFlagsBits;
      v64 = *(_QWORD *)(v183._countAndFlagsBits + 16);
      if (v64)
      {
        v66 = *(_QWORD *)(v183._countAndFlagsBits + 32);
        v65 = *(void **)(v183._countAndFlagsBits + 40);
        v183._countAndFlagsBits = v66;
        v183._object = v65;
        swift_bridgeObjectRetain_n();
        v67._countAndFlagsBits = 61;
        v67._object = (void *)0xE100000000000000;
        String.append(_:)(v67);
        if (v11[2]
          && (countAndFlagsBits = v183._countAndFlagsBits,
              object = v183._object,
              v70 = specialized __RawDictionaryStorage.find<A>(_:)(v66, (uint64_t)v65),
              (v71 & 1) != 0))
        {
          v2 = 0;
          v72 = (void **)(__srca + 56);
          v73 = v64 - 1;
          while (1)
          {
            v74 = (uint64_t *)(v11[7] + 16 * v70);
            v1 = *v74;
            v75 = (void *)v74[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            v183._countAndFlagsBits = countAndFlagsBits;
            v183._object = object;
            swift_bridgeObjectRetain();
            v76._countAndFlagsBits = v1;
            v76._object = v75;
            String.append(_:)(v76);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            v77._countAndFlagsBits = 59;
            v77._object = (void *)0xE100000000000000;
            String.append(_:)(v77);
            swift_bridgeObjectRelease();
            String.append(_:)(v183);
            swift_bridgeObjectRelease();
            if (v73 == v2)
              break;
            if ((unint64_t)++v2 >= *((_QWORD *)__srca + 2))
              goto LABEL_61;
            v79 = (uint64_t)*(v72 - 1);
            v78 = *v72;
            v183._countAndFlagsBits = v79;
            v183._object = v78;
            swift_bridgeObjectRetain_n();
            v80._countAndFlagsBits = 61;
            v80._object = (void *)0xE100000000000000;
            String.append(_:)(v80);
            if (v11[2])
            {
              v72 += 2;
              countAndFlagsBits = v183._countAndFlagsBits;
              object = v183._object;
              v70 = specialized __RawDictionaryStorage.find<A>(_:)(v79, (uint64_t)v78);
              if ((v81 & 1) != 0)
                continue;
            }
            goto LABEL_54;
          }
        }
        else
        {
LABEL_54:
          swift_bridgeObjectRelease();
          __break(1u);
        }
      }
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      specialized RangeReplaceableCollection<>.popLast()();
    }
    else
    {
      swift_release();
    }
    swift_bridgeObjectRelease();
    return v185;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  v11 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v43 = *(void **)(v42 + 16);
  v184 = v11;
  __src = v43;
  if (!v43)
    goto LABEL_44;
  swift_bridgeObjectRetain_n();
  v44 = 0;
  v45 = (uint64_t *)(v42 + 56);
  while (1)
  {
    v46 = (void *)(v44 + 1);
    if (__OFADD__(v44, 1))
      break;
    v1 = *(v45 - 2);
    v48 = *(v45 - 1);
    v49 = *v45;
    v183._countAndFlagsBits = *(v45 - 3);
    v47 = v183._countAndFlagsBits;
    v183._object = (void *)v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v50 = specialized __RawDictionaryStorage.find<A>(_:)(v47, v1);
    v52 = v11[2];
    v53 = (v51 & 1) == 0;
    v54 = __OFADD__(v52, v53);
    v55 = v52 + v53;
    if (v54)
      goto LABEL_59;
    v2 = v51;
    if (v11[3] < v55)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v55, 1);
      v11 = v184;
      v50 = specialized __RawDictionaryStorage.find<A>(_:)(v47, v1);
      if ((v2 & 1) != (v56 & 1))
        goto LABEL_196;
    }
    if ((v2 & 1) != 0)
      goto LABEL_191;
    v11[(v50 >> 6) + 8] |= 1 << v50;
    v57 = (uint64_t *)(v11[6] + 16 * v50);
    *v57 = v47;
    v57[1] = v1;
    v58 = (_QWORD *)(v11[7] + 16 * v50);
    *v58 = v48;
    v58[1] = v49;
    v59 = v11[2];
    v54 = __OFADD__(v59, 1);
    v60 = v59 + 1;
    if (v54)
      goto LABEL_60;
    v45 += 4;
    v11[2] = v60;
    ++v44;
    if (v46 == __src)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_44;
    }
  }
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  v83 = static _DictionaryStorage.copy(original:)();
  v5 = v83;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_92:
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  v84 = (void *)(v83 + 64);
  v85 = v2 + 64;
  v86 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  v87 = v2;
  if (v5 != v2 || (unint64_t)v84 >= v85 + 8 * v86)
    memmove(v84, (const void *)(v2 + 64), 8 * v86);
  v88 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v2 + 16);
  v89 = 1 << *(_BYTE *)(v2 + 32);
  v90 = -1;
  if (v89 < 64)
    v90 = ~(-1 << v89);
  v91 = v90 & *(_QWORD *)(v2 + 64);
  v92 = (unint64_t)(v89 + 63) >> 6;
  while (2)
  {
    if (v91)
    {
      v93 = __clz(__rbit64(v91));
      v91 &= v91 - 1;
      v94 = v93 | (v88 << 6);
LABEL_70:
      v95 = 16 * v94;
      v96 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v95);
      v98 = *v96;
      v97 = v96[1];
      v99 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v95);
      v100 = *v99;
      v101 = v99[1];
      v102 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v95);
      *v102 = v98;
      v102[1] = v97;
      v103 = (_QWORD *)(*(_QWORD *)(v5 + 56) + v95);
      *v103 = v100;
      v103[1] = v101;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      continue;
    }
    break;
  }
  v104 = v88 + 1;
  if (__OFADD__(v88, 1))
  {
    __break(1u);
    goto LABEL_187;
  }
  if (v104 >= v92)
    goto LABEL_92;
  v105 = *(_QWORD *)(v85 + 8 * v104);
  ++v88;
  if (v105)
    goto LABEL_91;
  v88 = v104 + 1;
  if (v104 + 1 >= v92)
    goto LABEL_92;
  v105 = *(_QWORD *)(v85 + 8 * v88);
  if (v105)
    goto LABEL_91;
  v88 = v104 + 2;
  if (v104 + 2 >= v92)
    goto LABEL_92;
  v105 = *(_QWORD *)(v85 + 8 * v88);
  if (v105)
    goto LABEL_91;
  v88 = v104 + 3;
  if (v104 + 3 >= v92)
    goto LABEL_92;
  v105 = *(_QWORD *)(v85 + 8 * v88);
  if (v105)
    goto LABEL_91;
  v88 = v104 + 4;
  if (v104 + 4 >= v92)
    goto LABEL_92;
  v105 = *(_QWORD *)(v85 + 8 * v88);
  if (v105)
    goto LABEL_91;
  v88 = v104 + 5;
  if (v104 + 5 >= v92)
    goto LABEL_92;
  v105 = *(_QWORD *)(v85 + 8 * v88);
  if (v105)
  {
LABEL_91:
    v91 = (v105 - 1) & v105;
    v94 = __clz(__rbit64(v105)) + (v88 << 6);
    goto LABEL_70;
  }
  v106 = v104 + 6;
  if (v106 >= v92)
    goto LABEL_92;
  v105 = *(_QWORD *)(v85 + 8 * v106);
  if (v105)
  {
    v88 = v106;
    v2 = v87;
    goto LABEL_91;
  }
  while (1)
  {
    v88 = v106 + 1;
    if (__OFADD__(v106, 1))
      break;
    v2 = v87;
    if (v88 >= v92)
      goto LABEL_92;
    v105 = *(_QWORD *)(v85 + 8 * v88);
    ++v106;
    if (v105)
      goto LABEL_91;
  }
LABEL_190:
  __break(1u);
LABEL_191:
  v175 = (void *)swift_allocError();
  swift_willThrow();
  v182 = v175;
  v176 = v175;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) != 0)
  {
    _StringGuts.grow(_:)(30);
    v177._countAndFlagsBits = 0xD00000000000001BLL;
    v177._object = (void *)0x80000001823049D0;
    String.append(_:)(v177);
    _print_unlocked<A, B>(_:_:)();
    v178._countAndFlagsBits = 39;
    v178._object = (void *)0xE100000000000000;
    String.append(_:)(v178);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_193:
    __break(1u);
LABEL_194:
    __break(1u);
LABEL_195:
    __break(1u);
LABEL_196:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();

  swift_unexpectedError();
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2, a3, a4, *(char **)(v4 + 40), *(_QWORD *)(v4 + 48), *(_BYTE **)(v4 + 56), *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24));
}

uint64_t closure #1 in static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, char *a5, uint64_t a6, _BYTE *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t result;
  uint64_t v37;
  char *v38;
  void *v39;
  int v40;
  void (*v41)(char *, uint64_t, uint64_t, uint64_t);
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  int v47;
  void (*v48)(char *, uint64_t, uint64_t, uint64_t);
  void (*v49)(char *, char *, uint64_t);
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  int v54;
  void (*v55)(char *, char *, uint64_t);
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  char *v62;
  void (*v63)(char *, char *, uint64_t);
  char *v64;
  uint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  _BYTE *v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;

  v77 = a7;
  v75 = a5;
  v13 = type metadata accessor for Optional();
  v71 = *(_QWORD *)(v13 - 8);
  v72 = v13;
  v14 = MEMORY[0x1E0C80A78](v13);
  v70 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v68 = (char *)&v67 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v80 = (char *)&v67 - v19;
  v81 = *(_QWORD *)(a9 - 8);
  v20 = MEMORY[0x1E0C80A78](v18);
  v78 = (char *)&v67 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v79 = (char *)&v67 - v22;
  v23 = type metadata accessor for Optional();
  v73 = *(_QWORD *)(v23 - 8);
  v74 = v23;
  v24 = MEMORY[0x1E0C80A78](v23);
  v26 = (char *)&v67 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v24);
  v69 = (char *)&v67 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v31 = (char *)&v67 - v30;
  v32 = *(_QWORD *)(a8 - 8);
  v33 = MEMORY[0x1E0C80A78](v29);
  v35 = (char *)&v67 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0C80A78](v33);
  v38 = (char *)&v67 - v37;
  if (!a1)
    goto LABEL_45;
  if (!a3)
  {
LABEL_46:
    __break(1u);
    return result;
  }
  v39 = v75;
  v75 = a3;
  objc_msgSend(v39, sel__getObjects_andKeys_count_, a3, a1, a6);
  result = _swift_isClassOrObjCExistentialType();
  v76 = a6;
  if ((result & 1) != 0)
  {
    if (a6 >= 1)
    {
      while (1)
      {
        v82 = *(_QWORD *)(a1 - 8 + 8 * a6);
        swift_unknownObjectRetain();
        v40 = swift_dynamicCast();
        v41 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56);
        if (!v40)
          break;
        --a6;
        v41(v26, 0, 1, a8);
        v42 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
        v42(v35, v26, a8);
        v42((char *)(a1 + *(_QWORD *)(v32 + 72) * a6), v35, a8);
        if ((unint64_t)(a6 + 1) <= 1)
          goto LABEL_7;
      }
      v41(v26, 1, 1, a8);
      result = (*(uint64_t (**)(char *, uint64_t))(v73 + 8))(v26, v74);
LABEL_24:
      v56 = v76;
      goto LABEL_25;
    }
    goto LABEL_20;
  }
  if (a6 < 1)
  {
LABEL_20:
    v56 = a6;
    if (a6)
    {
LABEL_25:
      if (!__OFSUB__(v56, a6))
      {
        swift_arrayDestroy();
        result = 0;
        *v77 = 0;
        return result;
      }
      __break(1u);
      goto LABEL_44;
    }
    *v77 = 1;
    _swift_isClassOrObjCExistentialType();
LABEL_36:
    result = v76;
    *v77 = 1;
    return result;
  }
  do
  {
    v53 = *(_QWORD *)(a1 - 8 + 8 * a6);
    swift_unknownObjectRetain();
    if ((_swift_isClassOrObjCExistentialType() & 1) != 0)
    {
      v82 = v53;
      swift_unknownObjectRetain();
      v54 = swift_dynamicCast();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v31, v54 ^ 1u, 1, a8);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56))(v69, 1, 1, a8);
      _bridgeNonVerbatimFromObjectiveCConditional<A>(_:_:_:)();
      (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v31, v69, v74);
    }
    swift_unknownObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v31, 1, a8) == 1)
    {
      result = (*(uint64_t (**)(char *, uint64_t))(v73 + 8))(v31, v74);
      goto LABEL_24;
    }
    --a6;
    v55 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
    v55(v38, v31, a8);
    v55((char *)(a1 + *(_QWORD *)(v32 + 72) * a6), v38, a8);
  }
  while ((unint64_t)(a6 + 1) > 1);
LABEL_7:
  *v77 = 1;
  result = _swift_isClassOrObjCExistentialType();
  if ((result & 1) != 0)
  {
    v44 = v75;
    v43 = v76;
    if (v76 >= 1)
    {
      v80 = v75 - 8;
      v45 = (_QWORD *)v81;
      v46 = v70;
      while (1)
      {
        v82 = *(_QWORD *)&v80[8 * v43];
        swift_unknownObjectRetain();
        v47 = swift_dynamicCast();
        v48 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v45[7];
        if (!v47)
          break;
        --v43;
        v48(v46, 0, 1, a9);
        v49 = (void (*)(char *, char *, uint64_t))v45[4];
        v50 = v44;
        v51 = v78;
        v49(v78, v46, a9);
        v52 = v51;
        v44 = v50;
        v49(&v50[v45[9] * v43], v52, a9);
        if ((unint64_t)(v43 + 1) <= 1)
          goto LABEL_36;
      }
      v48(v46, 1, 1, a9);
LABEL_38:
      result = (*(uint64_t (**)(char *, uint64_t))(v71 + 8))(v46, v72);
      goto LABEL_39;
    }
  }
  else
  {
    v57 = v75;
    v43 = v76;
    if (v76 >= 1)
    {
      v58 = v75 - 8;
      while (1)
      {
        v59 = *(_QWORD *)&v58[8 * v43];
        swift_unknownObjectRetain();
        if ((_swift_isClassOrObjCExistentialType() & 1) != 0)
        {
          v82 = v59;
          swift_unknownObjectRetain();
          v46 = v80;
          v60 = swift_dynamicCast();
          v61 = v81;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v81 + 56))(v46, v60 ^ 1u, 1, a9);
        }
        else
        {
          v61 = v81;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v81 + 56))(v68, 1, 1, a9);
          _bridgeNonVerbatimFromObjectiveCConditional<A>(_:_:_:)();
          v46 = v80;
          (*(void (**)(char *, char *, uint64_t))(v71 + 32))(v80, v68, v72);
        }
        swift_unknownObjectRelease();
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v46, 1, a9) == 1)
          goto LABEL_38;
        --v43;
        v62 = v46;
        v63 = *(void (**)(char *, char *, uint64_t))(v61 + 32);
        v64 = v79;
        v63(v79, v62, a9);
        v63(&v57[*(_QWORD *)(v61 + 72) * v43], v64, a9);
        if ((unint64_t)(v43 + 1) <= 1)
          goto LABEL_36;
      }
    }
  }
  if (!v43)
    goto LABEL_36;
LABEL_39:
  v65 = v76;
  if (__OFSUB__(v76, v43))
  {
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  swift_arrayDestroy();
  v66 = v77;
  *v77 = 0;
  swift_arrayDestroy();
  if (*v66)
    return v65;
  else
    return 0;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CFDictionaryRef(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Hasher.init(_seed:)();
  MEMORY[0x186DA9D64](a4, a2);
  _CFObject.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CFStringRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance CFDictionaryRef(a1, a2, a3, (uint64_t)&protocol conformance descriptor for CFStringRef);
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 17;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  v6 = specialized Sequence._copyContents(initializing:)((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  if (v6 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSURLResourceKey>);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 25;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 3);
  v6 = specialized Sequence._copyContents(initializing:)(&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  if (v6 != (_QWORD *)v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  _QWORD *v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: String, value: Encodable)>);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 56);
  v5 = specialized Sequence._copyContents(initializing:)(&v7, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  if (v5 != (_QWORD *)v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  _QWORD *v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: _XMLPlistEncodingFormat.Reference, value: _XMLPlistEncodingFormat.Reference)>);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 48);
  v5 = specialized Sequence._copyContents(initializing:)(&v7, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  if (v5 != (_QWORD *)v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: String, value: JSONReference)>);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 24);
  v5 = specialized Sequence._copyContents(initializing:)((uint64_t)&v7, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  if (v5 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Locale.NumberingSystem>);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 1;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 5);
  v6 = specialized Sequence._copyContents(initializing:)((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  if (v6 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 17;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  v6 = specialized Sequence._copyContents(initializing:)((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  if (v6 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

uint64_t specialized Sequence._copyContents(initializing:)(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_39:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  v23 = -1 << *(_BYTE *)(a4 + 32);
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    v22 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * v16);
    *v11 = *v20;
    v11[1] = v21;
    v11[2] = v22;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      swift_retain();
      goto LABEL_38;
    }
    v11 += 3;
    swift_bridgeObjectRetain();
    result = swift_retain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
    {
      v12 += 2;
      if (v17 + 1 >= v14)
      {
        v9 = 0;
        v12 = v17;
      }
      else
      {
        v18 = *(_QWORD *)(v6 + 8 * v12);
        if (v18)
          goto LABEL_14;
        v19 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_33;
        v18 = *(_QWORD *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_17:
          v17 = v19;
          goto LABEL_18;
        }
        v12 = v17 + 3;
        if (v17 + 3 < v14)
        {
          v18 = *(_QWORD *)(v6 + 8 * v12);
          if (v18)
          {
LABEL_14:
            v17 = v12;
            goto LABEL_18;
          }
          v19 = v17 + 4;
          if (v17 + 4 >= v14)
          {
LABEL_33:
            v9 = 0;
            goto LABEL_37;
          }
          v18 = *(_QWORD *)(v6 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              v17 = v19 + 1;
              if (__OFADD__(v19, 1))
                goto LABEL_42;
              if (v17 >= v14)
              {
                v9 = 0;
                v12 = v14 - 1;
                goto LABEL_37;
              }
              v18 = *(_QWORD *)(v6 + 8 * v17);
              ++v19;
              if (v18)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v9 = 0;
        v12 = v17 + 2;
      }
LABEL_37:
      v10 = v13;
LABEL_38:
      v7 = v23;
      goto LABEL_39;
    }
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_39:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  v24 = -1 << *(_BYTE *)(a4 + 32);
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 32 * v16);
    v21 = v20[1];
    v22 = v20[2];
    v23 = v20[3];
    *v11 = *v20;
    v11[1] = v21;
    v11[2] = v22;
    v11[3] = v23;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 4;
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
    {
      v12 += 2;
      if (v17 + 1 >= v14)
      {
        v9 = 0;
        v12 = v17;
      }
      else
      {
        v18 = *(_QWORD *)(v6 + 8 * v12);
        if (v18)
          goto LABEL_14;
        v19 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_33;
        v18 = *(_QWORD *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_17:
          v17 = v19;
          goto LABEL_18;
        }
        v12 = v17 + 3;
        if (v17 + 3 < v14)
        {
          v18 = *(_QWORD *)(v6 + 8 * v12);
          if (v18)
          {
LABEL_14:
            v17 = v12;
            goto LABEL_18;
          }
          v19 = v17 + 4;
          if (v17 + 4 >= v14)
          {
LABEL_33:
            v9 = 0;
            goto LABEL_37;
          }
          v18 = *(_QWORD *)(v6 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              v17 = v19 + 1;
              if (__OFADD__(v19, 1))
                goto LABEL_42;
              if (v17 >= v14)
              {
                v9 = 0;
                v12 = v14 - 1;
                goto LABEL_37;
              }
              v18 = *(_QWORD *)(v6 + 8 * v17);
              ++v19;
              if (v18)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v9 = 0;
        v12 = v17 + 2;
      }
LABEL_37:
      v10 = v13;
LABEL_38:
      v7 = v24;
      goto LABEL_39;
    }
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t DateComponents.weekday.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 176);
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance CGPoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 *v3;
  __int128 v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v5 = *v3;
  return objc_msgSend(objc_allocWithZone((Class)NSValue), sel_initWithBytes_objCType_, &v5, a3);
}

double static Date.+ infix(_:_:)@<D0>(double *a1@<X0>, double *a2@<X8>, double a3@<D0>)
{
  double result;

  result = *a1 + a3;
  *a2 = result;
  return result;
}

void sub_1818CCEF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1818CD018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1818CD1A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  _Unwind_Resume(exception_object);
}

uint64_t _NSWriteToFileDescriptorWithProgress(int a1, char *a2, unint64_t a3, int a4)
{
  NSProgress *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  ssize_t v13;
  unint64_t v14;
  int v16;
  NSObject *v17;
  int v18;
  int *v19;
  char *v20;
  _DWORD v21[2];
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (a4 && +[NSProgress currentProgress](NSProgress, "currentProgress"))
  {
    v7 = +[NSProgress progressWithTotalUnitCount:](NSProgress, "progressWithTotalUnitCount:", a3);
    if (v7)
    {
      v8 = _NSPreferredChunkSizeForFileDescriptor(a1);
      if (v8 == -1)
        v9 = a3;
      else
        v9 = v8;
      goto LABEL_9;
    }
  }
  else
  {
    v7 = 0;
  }
  v9 = a3;
LABEL_9:
  v10 = a3;
LABEL_10:
  if (!v10)
    return a3 - v10;
  if (!-[NSProgress isCancelled](v7, "isCancelled"))
  {
    if (v9 >= v10)
      v11 = v10;
    else
      v11 = v9;
    if (v11 >= 0x7FFFFFFF)
      v12 = 0x7FFFFFFFLL;
    else
      v12 = v11;
    while (!-[NSProgress isCancelled](v7, "isCancelled"))
    {
      v13 = write(a1, a2, v12);
      if ((v13 & 0x8000000000000000) == 0)
      {
        v14 = v13;
        if (v13)
        {
          v10 -= v13;
          -[NSProgress setCompletedUnitCount:](v7, "setCompletedUnitCount:", a3 - v10);
          a2 += v14;
          if (v14 >= v12)
            goto LABEL_10;
        }
        return a3 - v10;
      }
      if (*__error() != 4)
      {
        v16 = *__error();
        if (qword_1ECD09F80 != -1)
          dispatch_once(&qword_1ECD09F80, &__block_literal_global_34);
        v17 = _MergedGlobals_111;
        if (os_log_type_enabled((os_log_t)_MergedGlobals_111, OS_LOG_TYPE_ERROR))
        {
          v18 = *__error();
          v19 = __error();
          v20 = strerror(*v19);
          v21[0] = 67109378;
          v21[1] = v18;
          v22 = 2080;
          v23 = v20;
          _os_log_error_impl(&dword_1817D9000, v17, OS_LOG_TYPE_ERROR, "Encountered write failure %d %s", (uint8_t *)v21, 0x12u);
        }
        *__error() = v16;
        return -1;
      }
    }
  }
  *__error() = 89;
  return -1;
}

void sub_1818CDBAC(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x1818CDB70);
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Date()
{
  double *v0;

  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D68]), sel_initWithTimeIntervalSinceReferenceDate_, *v0);
}

uint64_t URL.withUnsafeFileSystemRepresentation<A>(_:)@<X0>(uint64_t (*a1)(id)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  Swift::Int countAndFlagsBits;
  unint64_t object;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t (*v34)(id);
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;

  v6 = v5;
  v11 = *(void **)v4;
  v12 = *(_QWORD *)(v4 + 8);
  v13 = *(_QWORD *)(v4 + 16);
  if (!_foundation_swift_url_feature_enabled())
    return a1(objc_msgSend(objc_retainAutorelease(v11), sel_fileSystemRepresentation));
  v30 = a3;
  v31 = a4;
  v36 = (uint64_t)v11;
  v37 = v12;
  v38 = v13;
  swift_retain();
  v32 = v11;
  swift_retain();
  v14 = URL.path(percentEncoded:)(1);
  countAndFlagsBits = v14._countAndFlagsBits;
  v35 = v14;
  swift_bridgeObjectRetain();
  v33 = a2;
  v34 = a1;
  if (String.count.getter() < 2)
  {
    object = (unint64_t)v14._object;
  }
  else
  {
    object = (unint64_t)v14._object;
    if ((specialized BidirectionalCollection.last.getter(v14._countAndFlagsBits, (unint64_t)v14._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
      countAndFlagsBits = v35._countAndFlagsBits;
      object = (unint64_t)v35._object;
    }
  }
  v36 = Set.init(minimumCapacity:)();
  specialized Set._Variant.insert(_:)(&v39, 0x2FuLL);
  v18 = v36;
  v19 = HIBYTE(object) & 0xF;
  v20 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if ((object & 0x2000000000000000) != 0)
    v21 = HIBYTE(object) & 0xF;
  else
    v21 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (v21)
  {
    v29[1] = v29;
    swift_bridgeObjectRetain();
    if ((object & 0x1000000000000000) != 0)
    {
      a1 = 0;
      v19 = 1;
    }
    else
    {
      if ((object & 0x2000000000000000) != 0)
      {
        v36 = countAndFlagsBits;
        v37 = object & 0xFFFFFFFFFFFFFFLL;
        v22 = &v36;
        v23 = HIBYTE(object) & 0xF;
      }
      else
      {
        if ((countAndFlagsBits & 0x1000000000000000) != 0)
        {
          v22 = (uint64_t *)((object & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          v22 = (uint64_t *)_StringObject.sharedUTF8.getter();
          v20 = v28;
        }
        v23 = v20;
      }
      v24 = specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)((uint64_t)v22, v23, v18, (uint64_t (*)(_QWORD))specialized StringProtocol.hexToAscii(_:));
      if (!v6)
      {
        a1 = (uint64_t (*)(id))v24;
        v19 = v25;
      }
    }
    if (v19 == 1)
    {
      swift_bridgeObjectRetain();
      a1 = (uint64_t (*)(id))specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(countAndFlagsBits, object, v18);
      v19 = v26;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      if (v19)
        goto LABEL_22;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v19)
        goto LABEL_22;
    }
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    v27 = swift_bridgeObjectRelease();
    a1 = 0;
    v19 = 0xE000000000000000;
    goto LABEL_25;
  }
  swift_bridgeObjectRelease();
  a1 = 0;
  v19 = 0xE000000000000000;
LABEL_22:
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  v27 = swift_bridgeObjectRelease();
LABEL_25:
  MEMORY[0x1E0C80A78](v27);
  String.withFileSystemRepresentation<A>(_:)((void (*)(char *))partial apply for closure #1 in URL.withUnsafeFileSystemRepresentation<A>(_:), (uint64_t)a1, v19, v30, v31);
  return swift_bridgeObjectRelease();
}

uint64_t _NSFileProtectionValueForPath(const char *a1)
{
  uint64_t v2;
  _QWORD v3[4];

  v3[3] = *MEMORY[0x1E0C80C00];
  v2 = 0;
  v3[1] = 0;
  v3[2] = 0;
  v3[0] = 0x4000000000000005;
  if (getattrlist(a1, v3, &v2, 8uLL, 1u))
    return 0xFFFFFFFFLL;
  else
    return HIDWORD(v2);
}

void URL.init(fileURLWithFileSystemRepresentation:isDirectory:relativeTo:)(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  __int128 v14;
  id v15;
  _QWORD v16[3];
  BOOL v17;
  _QWORD *v18;
  __int128 v19;

  v7 = *(void **)a3;
  v8 = *(_QWORD *)(a3 + 8);
  v9 = *(_QWORD *)(a3 + 16);
  if (_foundation_swift_url_feature_enabled())
  {
    v10 = String.init(cString:)();
    v12 = v11;
    v17 = (a2 & 1) == 0;
    v16[0] = v7;
    v16[1] = v8;
    v16[2] = v9;
    outlined copy of URL?((uint64_t)v7);
    URL.init(filePath:directoryHint:relativeTo:)(v10, v12, (unsigned __int8 *)&v17, (uint64_t)v16, (uint64_t *)&v18);
    v13 = v18;
    v14 = v19;
  }
  else
  {
    if (v7)
    {
      outlined copy of URL?((uint64_t)v7);
      swift_release();
      swift_release();
    }
    v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99E98]), sel_initFileURLWithFileSystemRepresentation_isDirectory_relativeToURL_, a1, a2 & 1, v7);

    v13 = static URL._converted(from:)(v15);
    v14 = 0uLL;
  }
  *(_QWORD *)a4 = v13;
  *(_OWORD *)(a4 + 8) = v14;
}

uint64_t _NSOpenFileDescriptor(const char *a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  stat v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = open(a1, a2, a3);
  if ((v3 & 0x80000000) != 0)
    return 0xFFFFFFFFLL;
  v4 = v3;
  memset(&v6, 0, sizeof(v6));
  if (fstat(v3, &v6) < 0 || (v6.st_mode & 0xF000) == 0x4000)
  {
    close(v4);
    return 0xFFFFFFFFLL;
  }
  return v4;
}

void sub_1818D1170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  id v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t result;
  uint64_t v24;
  id v25;
  id v26[3];
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  unint64_t v33;

  v31 = a6;
  v26[1] = a5;
  v26[2] = a4;
  v30 = a3;
  v28 = *(_QWORD *)(a7 - 8);
  MEMORY[0x1E0C80A78](a1);
  v27 = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  StringProtocol._ephemeralString.getter();
  StringProtocol._ephemeralString.getter();
  v29 = a10;
  v13 = v10;
  StringProtocol._ephemeralString.getter();
  v14 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v15 = String._bridgeToObjectiveCImpl()();
  v16 = v30;
  swift_bridgeObjectRelease();
  v17 = String._bridgeToObjectiveCImpl()();
  v18 = v31;
  swift_bridgeObjectRelease();
  if ((v18 & 1) != 0 && !v16)
  {
    v19 = objc_msgSend(v14, sel_stringByReplacingOccurrencesOfString_withString_, v15, v17);
LABEL_10:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);

    return (uint64_t)v25;
  }
  v26[0] = v14;
  v20 = v27;
  v21 = v28;
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v27, v13, a7);
  if ((v18 & 1) != 0)
  {
    dispatch thunk of Collection.startIndex.getter();
    v22 = v33;
    dispatch thunk of Collection.endIndex.getter();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v20, a7);
    if (v32 >> 14 >= v22 >> 14)
      goto LABEL_8;
    __break(1u);
  }
  (*(void (**)(char *, uint64_t))(v21 + 8))(v20, a7);
LABEL_8:
  result = StringProtocol._toUTF16Offsets(_:)();
  if (!__OFSUB__(v24, result))
  {
    v19 = objc_msgSend(v26[0], sel_stringByReplacingOccurrencesOfString_withString_options_range_, v15, v17, v16, result, v24 - result);
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t NSOrthographyScriptIndexForCharacters(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v9;
  int16x4_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v17;

  if (a2)
  {
    v3 = 0;
    v4 = 0;
    while (1)
    {
      v5 = *(unsigned __int16 *)(a1 + 2 * v4);
      if ((unsigned __int16)((v5 & 0xFFDF) - 65) >= 0x1Au)
      {
        v6 = 0;
        v7 = v5 > 0x2E || ((1 << v5) & 0x708000000000) == 0;
        if (!v7 || v5 == 173)
          goto LABEL_9;
        if (v5 - 48 < 0xA
          || (unsigned __int16)(v5 - 188) < 3u
          || v5 < 0x20
          || (unsigned __int16)(v5 - 127) < 0x21u
          || v5 < 0xC0
          || (v5 & 0xFFDF) == 0xD7)
        {
          goto LABEL_69;
        }
        if (v5 >= 0x2B0)
        {
          if (v5 < 0x370)
            goto LABEL_30;
          if (v5 < 0x400)
            goto LABEL_32;
          if (v5 < 0x530 || v5 == 7467)
          {
            v6 = 8;
            goto LABEL_9;
          }
          if (v5 < 0x590 || (unsigned __int16)(v5 + 1261) < 5u)
          {
            v6 = 9;
            goto LABEL_9;
          }
          if (v5 < 0x600 || (unsigned __int16)(v5 + 1251) < 0x33u)
          {
            v6 = 10;
            goto LABEL_9;
          }
          if ((unsigned __int16)(v5 + 400) < 0x8Fu || v5 < 0x700 || (unsigned __int16)(v5 + 1200) < 0x2B0u)
          {
            v6 = 11;
            goto LABEL_9;
          }
          if (v5 - 2304 <= 0x5FF)
          {
            if ((v5 & 0xFFFE) != 0x964)
            {
              v6 = ((v5 - 2304) >> 7) + 12;
              goto LABEL_9;
            }
LABEL_30:
            v6 = 0;
            goto LABEL_9;
          }
          v10 = vdup_n_s16(v5);
          if ((vmaxv_u16(vcgt_u16((uint16x4_t)0x40005000602C00, (uint16x4_t)vadd_s16(v10, (int16x4_t)0x602850CED05400))) & 1) != 0|| (v11 = v5 & 0xFF00, v11 == 4352)|| (v5 & 0xFFE0) == 0xA960)
          {
            v6 = 3;
            goto LABEL_9;
          }
          if ((vmaxv_u16(vcgt_u16((uint16x4_t)0xFC006071800200, (uint16x4_t)vadd_s16(v10, (int16x4_t)0x10001F0D1800700))) & 1) != 0)
          {
            v6 = 2;
            goto LABEL_9;
          }
          v17 = v5 & 0xFFE0;
          v6 = 0;
          if (v5 - 8204 < 6)
            goto LABEL_9;
          if (v5 == 8217)
            goto LABEL_9;
          v6 = 0;
          if (v5 - 8234 < 5)
            goto LABEL_9;
          if ((v5 & 0xFFF0) == 0x2060)
            goto LABEL_9;
          v6 = 0;
          if (v5 == 65279 || (v5 & 0xFFF0) == 0xFE00)
            goto LABEL_9;
          if ((vmaxv_u16(vcgt_u16((uint16x4_t)0x700E000260030, (uint16x4_t)vadd_s16(v10, (int16x4_t)0x50058E0E300E295))) & 1) == 0&& v11 != 7680&& v17 != 11360)
          {
            if (v5 - 7462 >= 5 && v11 != 7936)
            {
              v6 = 0;
              if ((vmaxv_u16(vcgt_u16((uint16x4_t)0x300030003F0065, (uint16x4_t)vadd_s16(v10, (int16x4_t)0xDF30DF90E2D4E265))) & 1) != 0|| v17 == 42752)
              {
                goto LABEL_9;
              }
              if (v5 - 0x2000 >= 0xC00 && v5 <= 0xFFFB && (v5 & 0xFF80) != 0x2E00)
              {
                if (v11 == 3840)
                {
                  v6 = 24;
                  goto LABEL_9;
                }
                if (v5 - 4096 < 0xA0)
                {
                  v6 = 25;
                  goto LABEL_9;
                }
                if (v5 - 4256 < 0x60)
                {
                  v6 = 26;
                  goto LABEL_9;
                }
                if (v5 - 4608 < 0x1A0)
                {
                  v6 = 27;
                  goto LABEL_9;
                }
                if (v5 - 5024 < 0x60)
                {
                  v6 = 28;
                  goto LABEL_9;
                }
                if (v5 - 5120 < 0x280)
                {
                  v6 = 29;
                  goto LABEL_9;
                }
                if ((v5 & 0xFF80) == 0x1780)
                {
                  v6 = 30;
                  goto LABEL_9;
                }
                if (v5 - 6144 < 0xB0)
                {
                  v6 = 31;
                  goto LABEL_9;
                }
                if (v5 >> 10 == 54)
                {
                  v12 = v4 + 1;
                  if (v4 + 1 < a2 && (*(_WORD *)(a1 + 2 * v12) & 0xFC00) == 0xDC00)
                  {
                    v13 = 1025 * v5 - 56744960;
                    v14 = (1025 * v5 - 56613888) & 0xFFFF0000;
                    if (v13 >= 0x10000 || v14 == 0x10000)
                      v6 = 1;
                    else
                      v6 = 2;
                    v4 = v12;
                    goto LABEL_9;
                  }
                }
              }
LABEL_69:
              v6 = 1;
              goto LABEL_9;
            }
LABEL_32:
            v6 = 7;
            goto LABEL_9;
          }
        }
      }
      v6 = 6;
LABEL_9:
      if (a3)
        ++*(_QWORD *)(a3 + 8 * v6);
      if (v3 == v6 || v3 == 0)
        v9 = v6;
      else
        v9 = 1;
      if (v6)
        v3 = v9;
      if (++v4 >= a2)
        goto LABEL_99;
    }
  }
  v3 = 0;
LABEL_99:
  if (v3 <= 1)
    return 1;
  else
    return v3;
}

void sub_1818D2214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _convertErrorToNSError(_:)(void *a1)
{
  id v1;

  v1 = a1;
  return _swift_stdlib_bridgeErrorToNSError();
}

uint64_t Locale.LanguageCode.init(stringLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return Locale.Variant.init(_:)(a1, a2, MEMORY[0x1E0DEA610], a3);
}

uint64_t protocol witness for UnkeyedDecodingContainer.decode(_:) in conformance JSONDecoderImpl.UnkeyedContainer()
{
  return specialized JSONDecoderImpl.UnkeyedContainer.decode(_:)();
}

{
  return specialized JSONDecoderImpl.UnkeyedContainer.decode(_:)();
}

{
  return specialized JSONDecoderImpl.UnkeyedContainer.decode(_:)() & 1;
}

{
  return specialized JSONDecoderImpl.UnkeyedContainer.decode(_:)();
}

{
  return specialized JSONDecoderImpl.UnkeyedContainer.decode(_:)();
}

{
  return specialized JSONDecoderImpl.UnkeyedContainer.decode(_:)();
}

{
  return specialized JSONDecoderImpl.UnkeyedContainer.decode(_:)();
}

{
  return specialized JSONDecoderImpl.UnkeyedContainer.decode(_:)();
}

{
  return specialized JSONDecoderImpl.UnkeyedContainer.decode(_:)();
}

{
  return specialized JSONDecoderImpl.UnkeyedContainer.decode(_:)();
}

{
  return specialized JSONDecoderImpl.UnkeyedContainer.decode(_:)();
}

{
  return specialized JSONDecoderImpl.UnkeyedContainer.decode(_:)();
}

{
  return specialized JSONDecoderImpl.UnkeyedContainer.decode(_:)();
}

{
  return specialized JSONDecoderImpl.UnkeyedContainer.decode(_:)();
}

{
  return specialized JSONDecoderImpl.UnkeyedContainer.decode(_:)();
}

{
  return specialized JSONDecoderImpl.UnkeyedContainer.decode(_:)();
}

uint64_t specialized JSONDecoderImpl.UnkeyedContainer.decode(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  ValueMetadata *v21;
  unint64_t v22;

  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(unsigned __int8 *)(v0 + 40);
  if (v3 < 0xFE)
  {
    v18 = *(_QWORD *)(v0 + 32);
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 8);
    v5 = JSONMap.loadValue(at:)(v4);
    if (v7 > 0xFDu)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
      v8 = MEMORY[0x1E0DEB418];
      v9 = (_QWORD *)_CodingPathNode.path.getter(*(_QWORD *)(v0 + 72));
      v10 = *(_QWORD *)(v0 + 64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      v12 = v9[2];
      v11 = v9[3];
      if (v12 >= v11 >> 1)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v9);
      v21 = &type metadata for _CodingKey;
      v22 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      v13 = swift_allocObject();
      *(_QWORD *)&v20 = v13;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0;
      *(_QWORD *)(v13 + 16) = v10;
      *(_BYTE *)(v13 + 40) = 2;
      v9[2] = v12 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v20, (uint64_t)&v9[5 * v12 + 4]);
      v14 = type metadata accessor for DecodingError();
      swift_allocError();
      v16 = v15;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *v16 = v8;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v16, *MEMORY[0x1E0DEC460], v14);
      return swift_willThrow();
    }
    v2 = v5;
    v18 = v6;
    LOBYTE(v3) = v7;
    *(_QWORD *)(v0 + 8) = JSONMap.offset(after:)(v4);
    *(_QWORD *)(v0 + 24) = v2;
    *(_QWORD *)(v0 + 32) = v18;
    *(_BYTE *)(v0 + 40) = v3;
  }
  v19 = *(_QWORD *)(v0 + 64);
  result = specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(v2, v18, v3, *(_QWORD *)(v0 + 72), v19, 0, 0, 2);
  if (!v1)
  {
    if (__OFADD__(v19, 1))
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)(v0 + 64) = v19 + 1;
      *(_QWORD *)(v0 + 24) = 0;
      *(_QWORD *)(v0 + 32) = 0;
      *(_BYTE *)(v0 + 40) = -2;
    }
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  ValueMetadata *v21;
  unint64_t v22;

  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(unsigned __int8 *)(v0 + 40);
  if (v3 < 0xFE)
  {
    v18 = *(_QWORD *)(v0 + 32);
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 8);
    v5 = JSONMap.loadValue(at:)(v4);
    if (v7 > 0xFDu)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
      v8 = MEMORY[0x1E0DEA968];
      v9 = (_QWORD *)_CodingPathNode.path.getter(*(_QWORD *)(v0 + 72));
      v10 = *(_QWORD *)(v0 + 64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      v12 = v9[2];
      v11 = v9[3];
      if (v12 >= v11 >> 1)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v9);
      v21 = &type metadata for _CodingKey;
      v22 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      v13 = swift_allocObject();
      *(_QWORD *)&v20 = v13;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0;
      *(_QWORD *)(v13 + 16) = v10;
      *(_BYTE *)(v13 + 40) = 2;
      v9[2] = v12 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v20, (uint64_t)&v9[5 * v12 + 4]);
      v14 = type metadata accessor for DecodingError();
      swift_allocError();
      v16 = v15;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *v16 = v8;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v16, *MEMORY[0x1E0DEC460], v14);
      return swift_willThrow();
    }
    v2 = v5;
    v18 = v6;
    LOBYTE(v3) = v7;
    *(_QWORD *)(v0 + 8) = JSONMap.offset(after:)(v4);
    *(_QWORD *)(v0 + 24) = v2;
    *(_QWORD *)(v0 + 32) = v18;
    *(_BYTE *)(v0 + 40) = v3;
  }
  v19 = *(_QWORD *)(v0 + 64);
  result = specialized JSONDecoderImpl.unwrapString<A>(from:for:_:)(v2, v18, v3, *(_QWORD *)(v0 + 72), v19, 0, 0, 2);
  if (!v1)
  {
    if (__OFADD__(v19, 1))
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)(v0 + 64) = v19 + 1;
      *(_QWORD *)(v0 + 24) = 0;
      *(_QWORD *)(v0 + 32) = 0;
      *(_BYTE *)(v0 + 40) = -2;
    }
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  ValueMetadata *v21;
  unint64_t v22;

  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(unsigned __int8 *)(v0 + 40);
  if (v3 < 0xFE)
  {
    v18 = *(_QWORD *)(v0 + 32);
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 8);
    v5 = JSONMap.loadValue(at:)(v4);
    if (v7 > 0xFDu)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
      v8 = MEMORY[0x1E0DEDE70];
      v9 = (_QWORD *)_CodingPathNode.path.getter(*(_QWORD *)(v0 + 72));
      v10 = *(_QWORD *)(v0 + 64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      v12 = v9[2];
      v11 = v9[3];
      if (v12 >= v11 >> 1)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v9);
      v21 = &type metadata for _CodingKey;
      v22 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      v13 = swift_allocObject();
      *(_QWORD *)&v20 = v13;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0;
      *(_QWORD *)(v13 + 16) = v10;
      *(_BYTE *)(v13 + 40) = 2;
      v9[2] = v12 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v20, (uint64_t)&v9[5 * v12 + 4]);
      v14 = type metadata accessor for DecodingError();
      swift_allocError();
      v16 = v15;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *v16 = v8;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v16, *MEMORY[0x1E0DEC460], v14);
      return swift_willThrow();
    }
    v2 = v5;
    v18 = v6;
    LOBYTE(v3) = v7;
    *(_QWORD *)(v0 + 8) = JSONMap.offset(after:)(v4);
    *(_QWORD *)(v0 + 24) = v2;
    *(_QWORD *)(v0 + 32) = v18;
    *(_BYTE *)(v0 + 40) = v3;
  }
  v19 = *(_QWORD *)(v0 + 64);
  result = specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(v2, v18, v3, *(_QWORD *)(v0 + 72), v19, 0, 0, 2);
  if (!v1)
  {
    if (__OFADD__(v19, 1))
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)(v0 + 64) = v19 + 1;
      *(_QWORD *)(v0 + 24) = 0;
      *(_QWORD *)(v0 + 32) = 0;
      *(_BYTE *)(v0 + 40) = -2;
    }
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  ValueMetadata *v21;
  unint64_t v22;

  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(unsigned __int8 *)(v0 + 40);
  if (v3 < 0xFE)
  {
    v18 = *(_QWORD *)(v0 + 32);
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 8);
    v5 = JSONMap.loadValue(at:)(v4);
    if (v7 > 0xFDu)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
      v8 = MEMORY[0x1E0DEE068];
      v9 = (_QWORD *)_CodingPathNode.path.getter(*(_QWORD *)(v0 + 72));
      v10 = *(_QWORD *)(v0 + 64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      v12 = v9[2];
      v11 = v9[3];
      if (v12 >= v11 >> 1)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v9);
      v21 = &type metadata for _CodingKey;
      v22 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      v13 = swift_allocObject();
      *(_QWORD *)&v20 = v13;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0;
      *(_QWORD *)(v13 + 16) = v10;
      *(_BYTE *)(v13 + 40) = 2;
      v9[2] = v12 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v20, (uint64_t)&v9[5 * v12 + 4]);
      v14 = type metadata accessor for DecodingError();
      swift_allocError();
      v16 = v15;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *v16 = v8;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v16, *MEMORY[0x1E0DEC460], v14);
      return swift_willThrow();
    }
    v2 = v5;
    v18 = v6;
    LOBYTE(v3) = v7;
    *(_QWORD *)(v0 + 8) = JSONMap.offset(after:)(v4);
    *(_QWORD *)(v0 + 24) = v2;
    *(_QWORD *)(v0 + 32) = v18;
    *(_BYTE *)(v0 + 40) = v3;
  }
  v19 = *(_QWORD *)(v0 + 64);
  result = specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(v2, v18, v3, *(_QWORD *)(v0 + 72), v19, 0, 0, 2);
  if (!v1)
  {
    if (__OFADD__(v19, 1))
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)(v0 + 64) = v19 + 1;
      *(_QWORD *)(v0 + 24) = 0;
      *(_QWORD *)(v0 + 32) = 0;
      *(_BYTE *)(v0 + 40) = -2;
    }
  }
  return result;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t inited;
  uint64_t v21;
  _QWORD *v22;
  __int128 v24;
  ValueMetadata *v25;
  unint64_t v26;
  uint64_t v27;

  v2 = v0;
  v27 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(unsigned __int8 *)(v0 + 40);
  if (v4 < 0xFE)
  {
    v8 = *(_QWORD *)(v0 + 32);
  }
  else
  {
    v1 = *(_QWORD *)(v0 + 8);
    v5 = JSONMap.loadValue(at:)(v1);
    if (v7 > 0xFDu)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
      v1 = MEMORY[0x1E0DEAFA0];
      v4 = _CodingPathNode.path.getter(*(_QWORD *)(v0 + 72));
      v8 = *(_QWORD *)(v0 + 64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
LABEL_4:
        v10 = *(_QWORD *)(v4 + 16);
        v9 = *(_QWORD *)(v4 + 24);
        if (v10 >= v9 >> 1)
          v4 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, (_QWORD *)v4);
        v25 = &type metadata for _CodingKey;
        v26 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        v11 = swift_allocObject();
        *(_QWORD *)&v24 = v11;
        *(_QWORD *)(v11 + 24) = 0;
        *(_QWORD *)(v11 + 32) = 0;
        *(_QWORD *)(v11 + 16) = v8;
        *(_BYTE *)(v11 + 40) = 2;
        *(_QWORD *)(v4 + 16) = v10 + 1;
        outlined init with take of any PredicateExpression<Self.Output == B1>(&v24, v4 + 40 * v10 + 32);
        v12 = type metadata accessor for DecodingError();
        swift_allocError();
        v14 = v13;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
        *v14 = v1;
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(unint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v14, *MEMORY[0x1E0DEC460], v12);
        goto LABEL_13;
      }
LABEL_16:
      v4 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v4 + 16) + 1, 1, (_QWORD *)v4);
      goto LABEL_4;
    }
    v3 = v5;
    v8 = v6;
    v4 = v7;
    *(_QWORD *)(v0 + 8) = JSONMap.offset(after:)(v1);
    *(_QWORD *)(v0 + 24) = v3;
    *(_QWORD *)(v0 + 32) = v8;
    *(_BYTE *)(v0 + 40) = v4;
  }
  if ((v4 & 0xE0) != 0x40)
  {
    v18 = *(_QWORD *)(v0 + 64);
    v19 = _CodingPathNode.path.getter(*(_QWORD *)(v2 + 72));
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18205C850;
    *(_QWORD *)(inited + 56) = &type metadata for _CodingKey;
    *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    v21 = swift_allocObject();
    *(_QWORD *)(inited + 32) = v21;
    *(_QWORD *)(v21 + 16) = v18;
    *(_QWORD *)(v21 + 24) = 0;
    *(_QWORD *)(v21 + 32) = 0;
    *(_BYTE *)(v21 + 40) = 2;
    *(_QWORD *)&v24 = v19;
    specialized Array.append<A>(contentsOf:)(inited);
    type metadata accessor for DecodingError();
    swift_allocError();
    JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E0DEAFA0], v4, v22);
    swift_bridgeObjectRelease();
LABEL_13:
    swift_willThrow();
    return v17 & 1;
  }
  v15 = *(_QWORD *)(v0 + 64);
  v16 = v15 + 1;
  if (__OFADD__(v15, 1))
  {
    __break(1u);
    goto LABEL_16;
  }
  v17 = v3 & 1;
  *(_QWORD *)(v0 + 64) = v16;
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_BYTE *)(v0 + 40) = -2;
  return v17 & 1;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  ValueMetadata *v21;
  unint64_t v22;

  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(unsigned __int8 *)(v0 + 40);
  if (v3 < 0xFE)
  {
    v18 = *(_QWORD *)(v0 + 32);
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 8);
    v5 = JSONMap.loadValue(at:)(v4);
    if (v7 > 0xFDu)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
      v8 = MEMORY[0x1E0DEB070];
      v9 = (_QWORD *)_CodingPathNode.path.getter(*(_QWORD *)(v0 + 72));
      v10 = *(_QWORD *)(v0 + 64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      v12 = v9[2];
      v11 = v9[3];
      if (v12 >= v11 >> 1)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v9);
      v21 = &type metadata for _CodingKey;
      v22 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      v13 = swift_allocObject();
      *(_QWORD *)&v20 = v13;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0;
      *(_QWORD *)(v13 + 16) = v10;
      *(_BYTE *)(v13 + 40) = 2;
      v9[2] = v12 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v20, (uint64_t)&v9[5 * v12 + 4]);
      v14 = type metadata accessor for DecodingError();
      swift_allocError();
      v16 = v15;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *v16 = v8;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v16, *MEMORY[0x1E0DEC460], v14);
      return swift_willThrow();
    }
    v2 = v5;
    v18 = v6;
    LOBYTE(v3) = v7;
    *(_QWORD *)(v0 + 8) = JSONMap.offset(after:)(v4);
    *(_QWORD *)(v0 + 24) = v2;
    *(_QWORD *)(v0 + 32) = v18;
    *(_BYTE *)(v0 + 40) = v3;
  }
  v19 = *(_QWORD *)(v0 + 64);
  result = specialized JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(v2, v18, v3, *(_QWORD *)(v0 + 72), v19, 0, 0, 2);
  if (!v1)
  {
    if (__OFADD__(v19, 1))
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)(v0 + 64) = v19 + 1;
      *(_QWORD *)(v0 + 24) = 0;
      *(_QWORD *)(v0 + 32) = 0;
      *(_BYTE *)(v0 + 40) = -2;
    }
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  ValueMetadata *v21;
  unint64_t v22;

  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(unsigned __int8 *)(v0 + 40);
  if (v3 < 0xFE)
  {
    v18 = *(_QWORD *)(v0 + 32);
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 8);
    v5 = JSONMap.loadValue(at:)(v4);
    if (v7 > 0xFDu)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
      v8 = MEMORY[0x1E0DEB188];
      v9 = (_QWORD *)_CodingPathNode.path.getter(*(_QWORD *)(v0 + 72));
      v10 = *(_QWORD *)(v0 + 64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      v12 = v9[2];
      v11 = v9[3];
      if (v12 >= v11 >> 1)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v9);
      v21 = &type metadata for _CodingKey;
      v22 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      v13 = swift_allocObject();
      *(_QWORD *)&v20 = v13;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0;
      *(_QWORD *)(v13 + 16) = v10;
      *(_BYTE *)(v13 + 40) = 2;
      v9[2] = v12 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v20, (uint64_t)&v9[5 * v12 + 4]);
      v14 = type metadata accessor for DecodingError();
      swift_allocError();
      v16 = v15;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *v16 = v8;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v16, *MEMORY[0x1E0DEC460], v14);
      return swift_willThrow();
    }
    v2 = v5;
    v18 = v6;
    LOBYTE(v3) = v7;
    *(_QWORD *)(v0 + 8) = JSONMap.offset(after:)(v4);
    *(_QWORD *)(v0 + 24) = v2;
    *(_QWORD *)(v0 + 32) = v18;
    *(_BYTE *)(v0 + 40) = v3;
  }
  v19 = *(_QWORD *)(v0 + 64);
  result = specialized JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(v2, v18, v3, *(_QWORD *)(v0 + 72), v19, 0, 0, 2);
  if (!v1)
  {
    if (__OFADD__(v19, 1))
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)(v0 + 64) = v19 + 1;
      *(_QWORD *)(v0 + 24) = 0;
      *(_QWORD *)(v0 + 32) = 0;
      *(_BYTE *)(v0 + 40) = -2;
    }
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  ValueMetadata *v21;
  unint64_t v22;

  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(unsigned __int8 *)(v0 + 40);
  if (v3 < 0xFE)
  {
    v18 = *(_QWORD *)(v0 + 32);
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 8);
    v5 = JSONMap.loadValue(at:)(v4);
    if (v7 > 0xFDu)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
      v8 = MEMORY[0x1E0DEDA70];
      v9 = (_QWORD *)_CodingPathNode.path.getter(*(_QWORD *)(v0 + 72));
      v10 = *(_QWORD *)(v0 + 64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      v12 = v9[2];
      v11 = v9[3];
      if (v12 >= v11 >> 1)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v9);
      v21 = &type metadata for _CodingKey;
      v22 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      v13 = swift_allocObject();
      *(_QWORD *)&v20 = v13;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0;
      *(_QWORD *)(v13 + 16) = v10;
      *(_BYTE *)(v13 + 40) = 2;
      v9[2] = v12 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v20, (uint64_t)&v9[5 * v12 + 4]);
      v14 = type metadata accessor for DecodingError();
      swift_allocError();
      v16 = v15;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *v16 = v8;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v16, *MEMORY[0x1E0DEC460], v14);
      return swift_willThrow();
    }
    v2 = v5;
    v18 = v6;
    LOBYTE(v3) = v7;
    *(_QWORD *)(v0 + 8) = JSONMap.offset(after:)(v4);
    *(_QWORD *)(v0 + 24) = v2;
    *(_QWORD *)(v0 + 32) = v18;
    *(_BYTE *)(v0 + 40) = v3;
  }
  v19 = *(_QWORD *)(v0 + 64);
  result = specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(v2, v18, v3, *(_QWORD *)(v0 + 72), v19, 0, 0, 2);
  if (!v1)
  {
    if (__OFADD__(v19, 1))
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)(v0 + 64) = v19 + 1;
      *(_QWORD *)(v0 + 24) = 0;
      *(_QWORD *)(v0 + 32) = 0;
      *(_BYTE *)(v0 + 40) = -2;
    }
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  ValueMetadata *v21;
  unint64_t v22;

  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(unsigned __int8 *)(v0 + 40);
  if (v3 < 0xFE)
  {
    v18 = *(_QWORD *)(v0 + 32);
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 8);
    v5 = JSONMap.loadValue(at:)(v4);
    if (v7 > 0xFDu)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
      v8 = MEMORY[0x1E0DEDB58];
      v9 = (_QWORD *)_CodingPathNode.path.getter(*(_QWORD *)(v0 + 72));
      v10 = *(_QWORD *)(v0 + 64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      v12 = v9[2];
      v11 = v9[3];
      if (v12 >= v11 >> 1)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v9);
      v21 = &type metadata for _CodingKey;
      v22 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      v13 = swift_allocObject();
      *(_QWORD *)&v20 = v13;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0;
      *(_QWORD *)(v13 + 16) = v10;
      *(_BYTE *)(v13 + 40) = 2;
      v9[2] = v12 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v20, (uint64_t)&v9[5 * v12 + 4]);
      v14 = type metadata accessor for DecodingError();
      swift_allocError();
      v16 = v15;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *v16 = v8;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v16, *MEMORY[0x1E0DEC460], v14);
      return swift_willThrow();
    }
    v2 = v5;
    v18 = v6;
    LOBYTE(v3) = v7;
    *(_QWORD *)(v0 + 8) = JSONMap.offset(after:)(v4);
    *(_QWORD *)(v0 + 24) = v2;
    *(_QWORD *)(v0 + 32) = v18;
    *(_BYTE *)(v0 + 40) = v3;
  }
  v19 = *(_QWORD *)(v0 + 64);
  result = specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(v2, v18, v3, *(_QWORD *)(v0 + 72), v19, 0, 0, 2);
  if (!v1)
  {
    if (__OFADD__(v19, 1))
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)(v0 + 64) = v19 + 1;
      *(_QWORD *)(v0 + 24) = 0;
      *(_QWORD *)(v0 + 32) = 0;
      *(_BYTE *)(v0 + 40) = -2;
    }
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  ValueMetadata *v21;
  unint64_t v22;

  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(unsigned __int8 *)(v0 + 40);
  if (v3 < 0xFE)
  {
    v18 = *(_QWORD *)(v0 + 32);
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 8);
    v5 = JSONMap.loadValue(at:)(v4);
    if (v7 > 0xFDu)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
      v8 = MEMORY[0x1E0DEDBC8];
      v9 = (_QWORD *)_CodingPathNode.path.getter(*(_QWORD *)(v0 + 72));
      v10 = *(_QWORD *)(v0 + 64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      v12 = v9[2];
      v11 = v9[3];
      if (v12 >= v11 >> 1)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v9);
      v21 = &type metadata for _CodingKey;
      v22 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      v13 = swift_allocObject();
      *(_QWORD *)&v20 = v13;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0;
      *(_QWORD *)(v13 + 16) = v10;
      *(_BYTE *)(v13 + 40) = 2;
      v9[2] = v12 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v20, (uint64_t)&v9[5 * v12 + 4]);
      v14 = type metadata accessor for DecodingError();
      swift_allocError();
      v16 = v15;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *v16 = v8;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v16, *MEMORY[0x1E0DEC460], v14);
      return swift_willThrow();
    }
    v2 = v5;
    v18 = v6;
    LOBYTE(v3) = v7;
    *(_QWORD *)(v0 + 8) = JSONMap.offset(after:)(v4);
    *(_QWORD *)(v0 + 24) = v2;
    *(_QWORD *)(v0 + 32) = v18;
    *(_BYTE *)(v0 + 40) = v3;
  }
  v19 = *(_QWORD *)(v0 + 64);
  result = specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(v2, v18, v3, *(_QWORD *)(v0 + 72), v19, 0, 0, 2);
  if (!v1)
  {
    if (__OFADD__(v19, 1))
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)(v0 + 64) = v19 + 1;
      *(_QWORD *)(v0 + 24) = 0;
      *(_QWORD *)(v0 + 32) = 0;
      *(_BYTE *)(v0 + 40) = -2;
    }
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  ValueMetadata *v21;
  unint64_t v22;

  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(unsigned __int8 *)(v0 + 40);
  if (v3 < 0xFE)
  {
    v18 = *(_QWORD *)(v0 + 32);
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 8);
    v5 = JSONMap.loadValue(at:)(v4);
    if (v7 > 0xFDu)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
      v8 = MEMORY[0x1E0DEDC60];
      v9 = (_QWORD *)_CodingPathNode.path.getter(*(_QWORD *)(v0 + 72));
      v10 = *(_QWORD *)(v0 + 64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      v12 = v9[2];
      v11 = v9[3];
      if (v12 >= v11 >> 1)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v9);
      v21 = &type metadata for _CodingKey;
      v22 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      v13 = swift_allocObject();
      *(_QWORD *)&v20 = v13;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0;
      *(_QWORD *)(v13 + 16) = v10;
      *(_BYTE *)(v13 + 40) = 2;
      v9[2] = v12 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v20, (uint64_t)&v9[5 * v12 + 4]);
      v14 = type metadata accessor for DecodingError();
      swift_allocError();
      v16 = v15;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *v16 = v8;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v16, *MEMORY[0x1E0DEC460], v14);
      return swift_willThrow();
    }
    v2 = v5;
    v18 = v6;
    LOBYTE(v3) = v7;
    *(_QWORD *)(v0 + 8) = JSONMap.offset(after:)(v4);
    *(_QWORD *)(v0 + 24) = v2;
    *(_QWORD *)(v0 + 32) = v18;
    *(_BYTE *)(v0 + 40) = v3;
  }
  v19 = *(_QWORD *)(v0 + 64);
  result = specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(v2, v18, v3, *(_QWORD *)(v0 + 72), v19, 0, 0, 2);
  if (!v1)
  {
    if (__OFADD__(v19, 1))
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)(v0 + 64) = v19 + 1;
      *(_QWORD *)(v0 + 24) = 0;
      *(_QWORD *)(v0 + 32) = 0;
      *(_BYTE *)(v0 + 40) = -2;
    }
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  ValueMetadata *v21;
  unint64_t v22;

  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(unsigned __int8 *)(v0 + 40);
  if (v3 < 0xFE)
  {
    v18 = *(_QWORD *)(v0 + 32);
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 8);
    v5 = JSONMap.loadValue(at:)(v4);
    if (v7 > 0xFDu)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
      v8 = MEMORY[0x1E0DEDF68];
      v9 = (_QWORD *)_CodingPathNode.path.getter(*(_QWORD *)(v0 + 72));
      v10 = *(_QWORD *)(v0 + 64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      v12 = v9[2];
      v11 = v9[3];
      if (v12 >= v11 >> 1)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v9);
      v21 = &type metadata for _CodingKey;
      v22 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      v13 = swift_allocObject();
      *(_QWORD *)&v20 = v13;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0;
      *(_QWORD *)(v13 + 16) = v10;
      *(_BYTE *)(v13 + 40) = 2;
      v9[2] = v12 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v20, (uint64_t)&v9[5 * v12 + 4]);
      v14 = type metadata accessor for DecodingError();
      swift_allocError();
      v16 = v15;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *v16 = v8;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v16, *MEMORY[0x1E0DEC460], v14);
      return swift_willThrow();
    }
    v2 = v5;
    v18 = v6;
    LOBYTE(v3) = v7;
    *(_QWORD *)(v0 + 8) = JSONMap.offset(after:)(v4);
    *(_QWORD *)(v0 + 24) = v2;
    *(_QWORD *)(v0 + 32) = v18;
    *(_BYTE *)(v0 + 40) = v3;
  }
  v19 = *(_QWORD *)(v0 + 64);
  result = specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(v2, v18, v3, *(_QWORD *)(v0 + 72), v19, 0, 0, 2);
  if (!v1)
  {
    if (__OFADD__(v19, 1))
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)(v0 + 64) = v19 + 1;
      *(_QWORD *)(v0 + 24) = 0;
      *(_QWORD *)(v0 + 32) = 0;
      *(_BYTE *)(v0 + 40) = -2;
    }
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  ValueMetadata *v21;
  unint64_t v22;

  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(unsigned __int8 *)(v0 + 40);
  if (v3 < 0xFE)
  {
    v18 = *(_QWORD *)(v0 + 32);
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 8);
    v5 = JSONMap.loadValue(at:)(v4);
    if (v7 > 0xFDu)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
      v8 = MEMORY[0x1E0DEBB98];
      v9 = (_QWORD *)_CodingPathNode.path.getter(*(_QWORD *)(v0 + 72));
      v10 = *(_QWORD *)(v0 + 64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      v12 = v9[2];
      v11 = v9[3];
      if (v12 >= v11 >> 1)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v9);
      v21 = &type metadata for _CodingKey;
      v22 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      v13 = swift_allocObject();
      *(_QWORD *)&v20 = v13;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0;
      *(_QWORD *)(v13 + 16) = v10;
      *(_BYTE *)(v13 + 40) = 2;
      v9[2] = v12 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v20, (uint64_t)&v9[5 * v12 + 4]);
      v14 = type metadata accessor for DecodingError();
      swift_allocError();
      v16 = v15;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *v16 = v8;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v16, *MEMORY[0x1E0DEC460], v14);
      return swift_willThrow();
    }
    v2 = v5;
    v18 = v6;
    LOBYTE(v3) = v7;
    *(_QWORD *)(v0 + 8) = JSONMap.offset(after:)(v4);
    *(_QWORD *)(v0 + 24) = v2;
    *(_QWORD *)(v0 + 32) = v18;
    *(_BYTE *)(v0 + 40) = v3;
  }
  v19 = *(_QWORD *)(v0 + 64);
  result = specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(v2, v18, v3, *(_QWORD *)(v0 + 72), v19, 0, 0, 2);
  if (!v1)
  {
    if (__OFADD__(v19, 1))
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)(v0 + 64) = v19 + 1;
      *(_QWORD *)(v0 + 24) = 0;
      *(_QWORD *)(v0 + 32) = 0;
      *(_BYTE *)(v0 + 40) = -2;
    }
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  ValueMetadata *v21;
  unint64_t v22;

  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(unsigned __int8 *)(v0 + 40);
  if (v3 < 0xFE)
  {
    v18 = *(_QWORD *)(v0 + 32);
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 8);
    v5 = JSONMap.loadValue(at:)(v4);
    if (v7 > 0xFDu)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
      v8 = MEMORY[0x1E0DEE0F8];
      v9 = (_QWORD *)_CodingPathNode.path.getter(*(_QWORD *)(v0 + 72));
      v10 = *(_QWORD *)(v0 + 64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      v12 = v9[2];
      v11 = v9[3];
      if (v12 >= v11 >> 1)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v9);
      v21 = &type metadata for _CodingKey;
      v22 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      v13 = swift_allocObject();
      *(_QWORD *)&v20 = v13;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0;
      *(_QWORD *)(v13 + 16) = v10;
      *(_BYTE *)(v13 + 40) = 2;
      v9[2] = v12 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v20, (uint64_t)&v9[5 * v12 + 4]);
      v14 = type metadata accessor for DecodingError();
      swift_allocError();
      v16 = v15;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *v16 = v8;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v16, *MEMORY[0x1E0DEC460], v14);
      return swift_willThrow();
    }
    v2 = v5;
    v18 = v6;
    LOBYTE(v3) = v7;
    *(_QWORD *)(v0 + 8) = JSONMap.offset(after:)(v4);
    *(_QWORD *)(v0 + 24) = v2;
    *(_QWORD *)(v0 + 32) = v18;
    *(_BYTE *)(v0 + 40) = v3;
  }
  v19 = *(_QWORD *)(v0 + 64);
  result = specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(v2, v18, v3, *(_QWORD *)(v0 + 72), v19, 0, 0, 2);
  if (!v1)
  {
    if (__OFADD__(v19, 1))
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)(v0 + 64) = v19 + 1;
      *(_QWORD *)(v0 + 24) = 0;
      *(_QWORD *)(v0 + 32) = 0;
      *(_BYTE *)(v0 + 40) = -2;
    }
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  ValueMetadata *v21;
  unint64_t v22;

  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(unsigned __int8 *)(v0 + 40);
  if (v3 < 0xFE)
  {
    v18 = *(_QWORD *)(v0 + 32);
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 8);
    v5 = JSONMap.loadValue(at:)(v4);
    if (v7 > 0xFDu)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
      v8 = MEMORY[0x1E0DEE190];
      v9 = (_QWORD *)_CodingPathNode.path.getter(*(_QWORD *)(v0 + 72));
      v10 = *(_QWORD *)(v0 + 64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      v12 = v9[2];
      v11 = v9[3];
      if (v12 >= v11 >> 1)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v9);
      v21 = &type metadata for _CodingKey;
      v22 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      v13 = swift_allocObject();
      *(_QWORD *)&v20 = v13;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0;
      *(_QWORD *)(v13 + 16) = v10;
      *(_BYTE *)(v13 + 40) = 2;
      v9[2] = v12 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v20, (uint64_t)&v9[5 * v12 + 4]);
      v14 = type metadata accessor for DecodingError();
      swift_allocError();
      v16 = v15;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *v16 = v8;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v16, *MEMORY[0x1E0DEC460], v14);
      return swift_willThrow();
    }
    v2 = v5;
    v18 = v6;
    LOBYTE(v3) = v7;
    *(_QWORD *)(v0 + 8) = JSONMap.offset(after:)(v4);
    *(_QWORD *)(v0 + 24) = v2;
    *(_QWORD *)(v0 + 32) = v18;
    *(_BYTE *)(v0 + 40) = v3;
  }
  v19 = *(_QWORD *)(v0 + 64);
  result = specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(v2, v18, v3, *(_QWORD *)(v0 + 72), v19, 0, 0, 2);
  if (!v1)
  {
    if (__OFADD__(v19, 1))
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)(v0 + 64) = v19 + 1;
      *(_QWORD *)(v0 + 24) = 0;
      *(_QWORD *)(v0 + 32) = 0;
      *(_BYTE *)(v0 + 40) = -2;
    }
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  ValueMetadata *v21;
  unint64_t v22;

  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(unsigned __int8 *)(v0 + 40);
  if (v3 < 0xFE)
  {
    v18 = *(_QWORD *)(v0 + 32);
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 8);
    v5 = JSONMap.loadValue(at:)(v4);
    if (v7 > 0xFDu)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
      v8 = MEMORY[0x1E0DEE2B8];
      v9 = (_QWORD *)_CodingPathNode.path.getter(*(_QWORD *)(v0 + 72));
      v10 = *(_QWORD *)(v0 + 64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      v12 = v9[2];
      v11 = v9[3];
      if (v12 >= v11 >> 1)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v9);
      v21 = &type metadata for _CodingKey;
      v22 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      v13 = swift_allocObject();
      *(_QWORD *)&v20 = v13;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0;
      *(_QWORD *)(v13 + 16) = v10;
      *(_BYTE *)(v13 + 40) = 2;
      v9[2] = v12 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v20, (uint64_t)&v9[5 * v12 + 4]);
      v14 = type metadata accessor for DecodingError();
      swift_allocError();
      v16 = v15;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *v16 = v8;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v16, *MEMORY[0x1E0DEC460], v14);
      return swift_willThrow();
    }
    v2 = v5;
    v18 = v6;
    LOBYTE(v3) = v7;
    *(_QWORD *)(v0 + 8) = JSONMap.offset(after:)(v4);
    *(_QWORD *)(v0 + 24) = v2;
    *(_QWORD *)(v0 + 32) = v18;
    *(_BYTE *)(v0 + 40) = v3;
  }
  v19 = *(_QWORD *)(v0 + 64);
  result = specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(v2, v18, v3, *(_QWORD *)(v0 + 72), v19, 0, 0, 2);
  if (!v1)
  {
    if (__OFADD__(v19, 1))
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)(v0 + 64) = v19 + 1;
      *(_QWORD *)(v0 + 24) = 0;
      *(_QWORD *)(v0 + 32) = 0;
      *(_BYTE *)(v0 + 40) = -2;
    }
  }
  return result;
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;

  return JSONDecoderImpl.KeyedContainer.decode(_:forKey:)(a1, *(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_QWORD *)(v4 + 16), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
}

{
  uint64_t v4;

  return JSONDecoderImpl.KeyedContainer.decode(_:forKey:)(a1, *(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_QWORD *)(v4 + 16), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
}

uint64_t JSONDecoderImpl.KeyedContainer.decode(_:forKey:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t object, uint64_t *a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;

  v37 = a7;
  v40 = a3;
  v35 = a2;
  v11 = type metadata accessor for Optional();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v34 - v13;
  v15 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(_QWORD *)(a4 + 16) && (v17 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16), (v18 & 1) != 0))
  {
    v19 = *(_QWORD *)(a4 + 56) + 24 * v17;
    v20 = *(_QWORD *)v19;
    v21 = *(_QWORD *)(v19 + 8);
    HIDWORD(v34) = *(unsigned __int8 *)(v19 + 16);
    swift_bridgeObjectRelease();
    v22 = *(_QWORD *)(a5 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v14, a1, a5);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v14, 0, 1, a5);
    v23 = v36;
    v24 = ((uint64_t (*)(uint64_t, uint64_t, _QWORD, unint64_t, char *, uint64_t, uint64_t))v37)(v20, v21, HIDWORD(v34), v40, v14, a5, object);
    if (!v23)
      object = v24;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  else
  {
    swift_bridgeObjectRelease();
    v25 = type metadata accessor for DecodingError();
    swift_allocError();
    v27 = v26;
    v37 = (uint64_t *)((char *)v26
                    + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context))
                             + 48));
    v27[3] = a5;
    v27[4] = object;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v27);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 16))(boxed_opaque_existential_1, a1, a5);
    _CodingPathNode.path.getter(v40);
    v38 = 0;
    v39 = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    v38 = 0xD00000000000001DLL;
    v39 = 0x800000018230D870;
    v29._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    v30._countAndFlagsBits = 2238496;
    v30._object = (void *)0xE300000000000000;
    String.append(_:)(v30);
    v31._countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    object = (uint64_t)v31._object;
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32._countAndFlagsBits = 3025186;
    v32._object = (void *)0xE300000000000000;
    String.append(_:)(v32);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v27, *MEMORY[0x1E0DEC448], v25);
    swift_willThrow();
  }
  return object;
}

{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;

  v37 = a7;
  v40 = a3;
  v35 = a2;
  v11 = type metadata accessor for Optional();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v34 - v13;
  v15 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(_QWORD *)(a4 + 16) && (v17 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16), (v18 & 1) != 0))
  {
    v19 = *(_QWORD *)(a4 + 56) + 24 * v17;
    v20 = *(_QWORD *)v19;
    v21 = *(_QWORD *)(v19 + 8);
    HIDWORD(v34) = *(unsigned __int8 *)(v19 + 16);
    swift_bridgeObjectRelease();
    v22 = *(_QWORD *)(a5 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v14, a1, a5);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v14, 0, 1, a5);
    v23 = v36;
    v24 = ((uint64_t (*)(uint64_t, uint64_t, _QWORD, unint64_t, char *, uint64_t, uint64_t))v37)(v20, v21, HIDWORD(v34), v40, v14, a5, object);
    if (!v23)
      object = v24;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  else
  {
    swift_bridgeObjectRelease();
    v25 = type metadata accessor for DecodingError();
    swift_allocError();
    v27 = v26;
    v37 = (uint64_t *)((char *)v26
                    + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context))
                             + 48));
    v27[3] = a5;
    v27[4] = object;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v27);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 16))(boxed_opaque_existential_1, a1, a5);
    _CodingPathNode.path.getter(v40);
    v38 = 0;
    v39 = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    v38 = 0xD00000000000001DLL;
    v39 = 0x800000018230D870;
    v29._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    v30._countAndFlagsBits = 2238496;
    v30._object = (void *)0xE300000000000000;
    String.append(_:)(v30);
    v31._countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    object = (uint64_t)v31._object;
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32._countAndFlagsBits = 3025186;
    v32._object = (void *)0xE300000000000000;
    String.append(_:)(v32);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v27, *MEMORY[0x1E0DEC448], v25);
    swift_willThrow();
  }
  return object;
}

uint64_t (*protocol witness for SingleValueDecodingContainer.decode(_:) in conformance JSONDecoderImpl())(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t)
{
  return specialized JSONDecoderImpl.decode(_:)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return specialized JSONDecoderImpl.decode(_:)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return specialized JSONDecoderImpl.decode(_:)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return specialized JSONDecoderImpl.decode(_:)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return specialized JSONDecoderImpl.decode(_:)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return specialized JSONDecoderImpl.decode(_:)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return specialized JSONDecoderImpl.decode(_:)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return specialized JSONDecoderImpl.decode(_:)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return specialized JSONDecoderImpl.decode(_:)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return specialized JSONDecoderImpl.decode(_:)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return specialized JSONDecoderImpl.decode(_:)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return specialized JSONDecoderImpl.decode(_:)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

uint64_t (*specialized JSONDecoderImpl.decode(_:)(uint64_t (*result)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t)))(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v4 = result;
    v5 = v2 + 24 * v3;
    v6 = *(_QWORD *)(v5 + 8);
    v7 = *(_QWORD *)(v5 + 16);
    v8 = *(_QWORD *)(v1 + 160);
    v9 = *(unsigned __int8 *)(v5 + 24);
    swift_retain();
    v10 = v4(v6, v7, v9, v8, 0, 0, 0, 255);
    swift_release();
    return (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v4 = result;
    v5 = v2 + 24 * v3;
    v6 = *(_QWORD *)(v5 + 8);
    v7 = *(_QWORD *)(v5 + 16);
    v8 = *(_QWORD *)(v1 + 160);
    v9 = *(unsigned __int8 *)(v5 + 24);
    swift_retain();
    v10 = v4(v6, v7, v9, v8, 0, 0, 0, 255);
    swift_release();
    return (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized _parseInteger<A>(_:)(unsigned __int8 *a1, uint64_t a2)
{
  unsigned __int8 *v2;
  int v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned int v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  char v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  char v28;

  if (a2)
  {
    v2 = a1;
    v3 = *a1;
    if (v3 == 43)
    {
      if (a2 >= 2)
      {
        v14 = 0;
        v15 = &a1[a2];
        v16 = a1 + 1;
        while (1)
        {
          v17 = *v16 - 48;
          if (v17 > 9)
            break;
          result = 0;
          v18 = (unsigned __int128)(v14 * (__int128)10) >> 64;
          v19 = 10 * v14;
          v20 = v18 != v19 >> 63;
          v12 = __OFADD__(v19, v17);
          v14 = v19 + v17;
          v21 = v12;
          if (!v20 && (v21 & 1) == 0)
          {
            ++v16;
            result = v14;
            if (v16 < v15)
              continue;
          }
          return result;
        }
      }
    }
    else if (v3 == 45)
    {
      if (a2 >= 2)
      {
        v4 = 0;
        v5 = &a1[a2];
        v6 = a1 + 1;
        while (1)
        {
          v7 = *v6 - 48;
          if (v7 > 9)
            break;
          result = 0;
          v9 = (unsigned __int128)(v4 * (__int128)10) >> 64;
          v10 = 10 * v4;
          v11 = v9 != v10 >> 63;
          v12 = __OFSUB__(v10, v7);
          v4 = v10 - v7;
          v13 = v12;
          if (!v11 && (v13 & 1) == 0)
          {
            ++v6;
            result = v4;
            if (v6 < v5)
              continue;
          }
          return result;
        }
      }
    }
    else
    {
      if (a2 < 1)
        return 0;
      v22 = 0;
      v23 = &a1[a2];
      while (1)
      {
        v24 = *v2 - 48;
        if (v24 > 9)
          break;
        result = 0;
        v25 = (unsigned __int128)(v22 * (__int128)10) >> 64;
        v26 = 10 * v22;
        v27 = v25 != v26 >> 63;
        v12 = __OFADD__(v26, v24);
        v22 = v26 + v24;
        v28 = v12;
        if (!v27 && (v28 & 1) == 0)
        {
          ++v2;
          result = v22;
          if (v2 < v23)
            continue;
        }
        return result;
      }
    }
  }
  return 0;
}

{
  int v2;
  int v3;
  unsigned __int8 *v4;
  unsigned int v5;
  unsigned __int16 v6;
  int v7;
  int v8;
  int v9;
  unsigned __int8 *v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned __int8 *v14;
  unsigned int v15;
  int v16;

  if (!a2)
  {
    v6 = 0;
    v8 = 1;
    return v6 | (v8 << 16);
  }
  v2 = *a1;
  if (v2 == 43)
  {
    if (a2 >= 2)
    {
      LOWORD(v9) = 0;
      v10 = a1 + 1;
      while (1)
      {
        v11 = *v10 - 48;
        if (v11 > 9)
          break;
        v6 = 0;
        v12 = 10 * (unsigned __int16)v9;
        v8 = 1;
        if ((v12 & 0xF0000) == 0)
        {
          v9 = (v12 & 0xFFFE) + v11;
          if ((v9 & 0x10000) == 0)
          {
            v8 = 0;
            ++v10;
            v6 = v9;
            if (v10 < &a1[a2])
              continue;
          }
        }
        return v6 | (v8 << 16);
      }
    }
  }
  else if (v2 == 45)
  {
    if (a2 >= 2)
    {
      LOWORD(v3) = 0;
      v4 = a1 + 1;
      while (1)
      {
        v5 = *v4 - 48;
        if (v5 > 9)
          break;
        v6 = 0;
        v7 = 10 * (unsigned __int16)v3;
        v3 = (unsigned __int16)(10 * v3) - v5;
        v8 = 1;
        if ((v7 & 0xF0000) == 0 && (v3 & 0xFFFF0000) == 0)
        {
          v8 = 0;
          ++v4;
          v6 = v3;
          if (v4 < &a1[a2])
            continue;
        }
        return v6 | (v8 << 16);
      }
    }
  }
  else
  {
    if (a2 < 1)
    {
      v6 = 0;
      v8 = 0;
      return v6 | (v8 << 16);
    }
    LOWORD(v13) = 0;
    v14 = &a1[a2];
    while (1)
    {
      v15 = *a1 - 48;
      if (v15 > 9)
        break;
      v6 = 0;
      v16 = 10 * (unsigned __int16)v13;
      v8 = 1;
      if ((v16 & 0xF0000) == 0)
      {
        v13 = (v16 & 0xFFFE) + v15;
        if ((v13 & 0x10000) == 0)
        {
          v8 = 0;
          ++a1;
          v6 = v13;
          if (a1 < v14)
            continue;
        }
      }
      return v6 | (v8 << 16);
    }
  }
  v6 = 0;
  v8 = 1;
  return v6 | (v8 << 16);
}

{
  int v2;
  int v3;
  unsigned __int8 *v4;
  unsigned int v5;
  unsigned __int16 v6;
  int v7;
  int v8;
  BOOL v9;
  int v10;
  int v11;
  unsigned __int8 *v12;
  unsigned int v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  unsigned __int8 *v18;
  unsigned int v19;
  int v20;
  int v21;
  BOOL v22;

  if (!a2)
  {
    v6 = 0;
    v10 = 1;
    return v6 | (v10 << 16);
  }
  v2 = *a1;
  if (v2 == 43)
  {
    if (a2 >= 2)
    {
      LOWORD(v11) = 0;
      v12 = a1 + 1;
      while (1)
      {
        v13 = *v12 - 48;
        if (v13 > 9)
          break;
        v6 = 0;
        v14 = 10 * (__int16)v11;
        v15 = (__int16)(10 * v11);
        v11 = v15 + v13;
        v16 = v11 != (__int16)(v15 + v13);
        v10 = 1;
        if (v15 == v14 && !v16)
        {
          v10 = 0;
          ++v12;
          v6 = v11;
          if (v12 < &a1[a2])
            continue;
        }
        return v6 | (v10 << 16);
      }
    }
  }
  else if (v2 == 45)
  {
    if (a2 >= 2)
    {
      LOWORD(v3) = 0;
      v4 = a1 + 1;
      while (1)
      {
        v5 = *v4 - 48;
        if (v5 > 9)
          break;
        v6 = 0;
        v7 = 10 * (__int16)v3;
        v8 = (__int16)(10 * v3);
        v3 = v8 - v5;
        v9 = v3 != (__int16)(v8 - v5);
        v10 = 1;
        if (v8 == v7 && !v9)
        {
          v10 = 0;
          ++v4;
          v6 = v3;
          if (v4 < &a1[a2])
            continue;
        }
        return v6 | (v10 << 16);
      }
    }
  }
  else
  {
    if (a2 < 1)
    {
      v6 = 0;
      v10 = 0;
      return v6 | (v10 << 16);
    }
    LOWORD(v17) = 0;
    v18 = &a1[a2];
    while (1)
    {
      v19 = *a1 - 48;
      if (v19 > 9)
        break;
      v6 = 0;
      v20 = 10 * (__int16)v17;
      v21 = (__int16)(10 * v17);
      v17 = v21 + v19;
      v22 = v17 != (__int16)(v21 + v19);
      v10 = 1;
      if (v21 == v20 && !v22)
      {
        v10 = 0;
        ++a1;
        v6 = v17;
        if (a1 < v18)
          continue;
      }
      return v6 | (v10 << 16);
    }
  }
  v6 = 0;
  v10 = 1;
  return v6 | (v10 << 16);
}

{
  int v2;
  int v3;
  unsigned __int8 *v4;
  unsigned int v5;
  unsigned __int8 v6;
  __int16 v7;
  int v8;
  unsigned int v9;
  unsigned __int8 *v10;
  unsigned int v11;
  __int16 v12;
  unsigned int v13;
  unsigned __int8 *v14;
  unsigned int v15;
  __int16 v16;

  if (!a2)
  {
    v6 = 0;
    v8 = 1;
    return v6 | (v8 << 8);
  }
  v2 = *a1;
  if (v2 == 43)
  {
    if (a2 >= 2)
    {
      LOBYTE(v9) = 0;
      v10 = a1 + 1;
      while (1)
      {
        v11 = *v10 - 48;
        if (v11 > 9)
          break;
        v6 = 0;
        v12 = 10 * v9;
        v8 = 1;
        if ((v12 & 0xF00) == 0)
        {
          v9 = (v12 & 0xFE) + v11;
          if (((v9 >> 8) & 1) == 0)
          {
            v8 = 0;
            ++v10;
            v6 = v9;
            if (v10 < &a1[a2])
              continue;
          }
        }
        return v6 | (v8 << 8);
      }
    }
  }
  else if (v2 == 45)
  {
    if (a2 >= 2)
    {
      LOBYTE(v3) = 0;
      v4 = a1 + 1;
      while (1)
      {
        v5 = *v4 - 48;
        if (v5 > 9)
          break;
        v6 = 0;
        v7 = 10 * v3;
        v3 = (10 * v3) - v5;
        v8 = 1;
        if ((v7 & 0xF00) == 0 && (v3 & 0xFFFFFF00) == 0)
        {
          v8 = 0;
          ++v4;
          v6 = v3;
          if (v4 < &a1[a2])
            continue;
        }
        return v6 | (v8 << 8);
      }
    }
  }
  else
  {
    if (a2 < 1)
    {
      v6 = 0;
      v8 = 0;
      return v6 | (v8 << 8);
    }
    LOBYTE(v13) = 0;
    v14 = &a1[a2];
    while (1)
    {
      v15 = *a1 - 48;
      if (v15 > 9)
        break;
      v6 = 0;
      v16 = 10 * v13;
      v8 = 1;
      if ((v16 & 0xF00) == 0)
      {
        v13 = (v16 & 0xFE) + v15;
        if (((v13 >> 8) & 1) == 0)
        {
          v8 = 0;
          ++a1;
          v6 = v13;
          if (a1 < v14)
            continue;
        }
      }
      return v6 | (v8 << 8);
    }
  }
  v6 = 0;
  v8 = 1;
  return v6 | (v8 << 8);
}

{
  int v2;
  int v3;
  unsigned __int8 *v4;
  unsigned int v5;
  unsigned __int8 v6;
  int v7;
  int v8;
  BOOL v9;
  int v10;
  int v11;
  unsigned __int8 *v12;
  unsigned int v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  unsigned __int8 *v18;
  unsigned int v19;
  int v20;
  int v21;
  BOOL v22;

  if (!a2)
  {
    v6 = 0;
    v10 = 1;
    return v6 | (v10 << 8);
  }
  v2 = *a1;
  if (v2 == 43)
  {
    if (a2 >= 2)
    {
      LOBYTE(v11) = 0;
      v12 = a1 + 1;
      while (1)
      {
        v13 = *v12 - 48;
        if (v13 > 9)
          break;
        v6 = 0;
        v14 = 10 * (char)v11;
        v15 = (char)(10 * v11);
        v11 = v15 + (char)v13;
        v16 = v11 != (char)(v15 + v13);
        v10 = 1;
        if (v15 == v14 && !v16)
        {
          v10 = 0;
          ++v12;
          v6 = v11;
          if (v12 < &a1[a2])
            continue;
        }
        return v6 | (v10 << 8);
      }
    }
  }
  else if (v2 == 45)
  {
    if (a2 >= 2)
    {
      LOBYTE(v3) = 0;
      v4 = a1 + 1;
      while (1)
      {
        v5 = *v4 - 48;
        if (v5 > 9)
          break;
        v6 = 0;
        v7 = 10 * (char)v3;
        v8 = (char)(10 * v3);
        v3 = v8 - (char)v5;
        v9 = v3 != (char)(v8 - v5);
        v10 = 1;
        if (v8 == v7 && !v9)
        {
          v10 = 0;
          ++v4;
          v6 = v3;
          if (v4 < &a1[a2])
            continue;
        }
        return v6 | (v10 << 8);
      }
    }
  }
  else
  {
    if (a2 < 1)
    {
      v6 = 0;
      v10 = 0;
      return v6 | (v10 << 8);
    }
    LOBYTE(v17) = 0;
    v18 = &a1[a2];
    while (1)
    {
      v19 = *a1 - 48;
      if (v19 > 9)
        break;
      v6 = 0;
      v20 = 10 * (char)v17;
      v21 = (char)(10 * v17);
      v17 = v21 + (char)v19;
      v22 = v17 != (char)(v21 + v19);
      v10 = 1;
      if (v21 == v20 && !v22)
      {
        v10 = 0;
        ++a1;
        v6 = v17;
        if (a1 < v18)
          continue;
      }
      return v6 | (v10 << 8);
    }
  }
  v6 = 0;
  v10 = 1;
  return v6 | (v10 << 8);
}

{
  unsigned __int8 *v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned int v8;
  BOOL v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  BOOL v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unsigned int v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  unsigned __int8 *v39;
  unsigned int v40;
  BOOL v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  char v50;

  if (!a2)
    return 0;
  v2 = a1;
  v3 = *a1;
  if (v3 == 43)
  {
    if (a2 >= 2)
    {
      v23 = 0;
      v24 = 0;
      v25 = &a1[a2];
      v26 = a1 + 1;
      while (1)
      {
        v27 = *v26 - 48;
        if (v27 > 9)
          break;
        if ((v24 & 0x8000000000000000) != 0)
        {
          v10 = v23 == 0;
          v32 = -v23;
          v33 = -(uint64_t)(v24 + !v10);
          v34 = !is_mul_ok(v33, 0xAuLL);
          v10 = __CFADD__(((unint64_t)v32 * (unsigned __int128)0xAuLL) >> 64, 10 * v33);
          v35 = (__PAIR128__(v33, v32) * 0xA) >> 64;
          if (v10)
            v34 = 1;
          if (v34)
            return 0;
          v36 = 10 * v32;
          v10 = v36 == 0;
          v30 = -v36;
          v29 = -(v35 + !v10);
          LOBYTE(v31) = v30 != 0;
        }
        else
        {
          v28 = !is_mul_ok(v24, 0xAuLL);
          v10 = __CFADD__(((unint64_t)v23 * (unsigned __int128)0xAuLL) >> 64, 10 * v24);
          v29 = (__PAIR128__(v24, v23) * 0xA) >> 64;
          if (v10)
            v28 = 1;
          if (v28)
            return 0;
          v30 = 10 * v23;
          v31 = v29 >> 63;
        }
        result = 0;
        v21 = __OFADD__(__CFADD__(v30, v27), v29);
        v24 = (__PAIR128__(v29, v30) + v27) >> 64;
        v23 = v30 + v27;
        v37 = v21;
        if ((v31 & 1) != 0 || (v37 & 1) != 0)
          return result;
        if (++v26 >= v25)
          return v23;
      }
    }
  }
  else if (v3 == 45)
  {
    if (a2 >= 2)
    {
      v4 = 0;
      v5 = 0;
      v6 = &a1[a2];
      v7 = a1 + 1;
      while (1)
      {
        v8 = *v7 - 48;
        if (v8 > 9)
          break;
        if ((v5 & 0x8000000000000000) != 0)
        {
          v10 = v4 == 0;
          v14 = -v4;
          v15 = -(uint64_t)(v5 + !v10);
          v16 = !is_mul_ok(v15, 0xAuLL);
          v10 = __CFADD__((v14 * (unsigned __int128)0xAuLL) >> 64, 10 * v15);
          v17 = (__PAIR128__(v15, v14) * 0xA) >> 64;
          if (v10)
            v16 = 1;
          if (v16)
            return 0;
          v18 = 10 * v14;
          v10 = v18 == 0;
          v12 = -v18;
          v11 = -(v17 + !v10);
          LOBYTE(v13) = v12 != 0;
        }
        else
        {
          v9 = !is_mul_ok(v5, 0xAuLL);
          v10 = __CFADD__(((unint64_t)v4 * (unsigned __int128)0xAuLL) >> 64, 10 * v5);
          v11 = (__PAIR128__(v5, v4) * 0xA) >> 64;
          if (v10)
            v9 = 1;
          if (v9)
            return 0;
          v12 = 10 * v4;
          v13 = v11 >> 63;
        }
        result = 0;
        v21 = __OFSUB__(__PAIR128__(v11, v12), v8);
        v20 = v12 - v8;
        v5 = (__PAIR128__(v11, v12) - v8) >> 64;
        v4 = v20;
        v22 = v21;
        if ((v13 & 1) != 0 || (v22 & 1) != 0)
          return result;
        if (++v7 >= v6)
          return v20;
      }
    }
  }
  else
  {
    if (a2 < 1)
      return 0;
    v23 = 0;
    v38 = 0;
    v39 = &a1[a2];
    while (1)
    {
      v40 = *v2 - 48;
      if (v40 > 9)
        break;
      if ((v38 & 0x8000000000000000) != 0)
      {
        v10 = v23 == 0;
        v45 = -v23;
        v46 = -(uint64_t)(v38 + !v10);
        v47 = !is_mul_ok(v46, 0xAuLL);
        v10 = __CFADD__(((unint64_t)v45 * (unsigned __int128)0xAuLL) >> 64, 10 * v46);
        v48 = (__PAIR128__(v46, v45) * 0xA) >> 64;
        if (v10)
          v47 = 1;
        if (v47)
          return 0;
        v49 = 10 * v45;
        v10 = v49 == 0;
        v43 = -v49;
        v42 = -(v48 + !v10);
        LOBYTE(v44) = v43 != 0;
      }
      else
      {
        v41 = !is_mul_ok(v38, 0xAuLL);
        v10 = __CFADD__(((unint64_t)v23 * (unsigned __int128)0xAuLL) >> 64, 10 * v38);
        v42 = (__PAIR128__(v38, v23) * 0xA) >> 64;
        if (v10)
          v41 = 1;
        if (v41)
          return 0;
        v43 = 10 * v23;
        v44 = v42 >> 63;
      }
      result = 0;
      v21 = __OFADD__(__CFADD__(v43, v40), v42);
      v38 = (__PAIR128__(v42, v43) + v40) >> 64;
      v23 = v43 + v40;
      v50 = v21;
      if ((v44 & 1) != 0 || (v50 & 1) != 0)
        return result;
      if (++v2 >= v39)
        return v23;
    }
  }
  return 0;
}

{
  unsigned __int8 *v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned int v8;
  uint64_t result;
  BOOL v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  char v15;
  unint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  char v24;
  unint64_t v25;
  unsigned __int8 *v26;
  unsigned int v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL8 v31;
  char v32;

  if (!a2)
    return 0;
  v2 = a1;
  v3 = *a1;
  if (v3 == 43)
  {
    if (a2 >= 2)
    {
      v4 = 0;
      v16 = 0;
      v17 = &a1[a2];
      v18 = a1 + 1;
      while (1)
      {
        v19 = *v18 - 48;
        if (v19 > 9)
          break;
        result = 0;
        v20 = !is_mul_ok(v16, 0xAuLL);
        v11 = __CFADD__(((unint64_t)v4 * (unsigned __int128)0xAuLL) >> 64, 10 * v16);
        v21 = (__PAIR128__(v16, v4) * 0xA) >> 64;
        if (v11)
          v20 = 1;
        v22 = 10 * v4;
        v11 = __CFADD__(v22, v19);
        v4 = v22 + v19;
        v23 = v11;
        v11 = __CFADD__(v11, v21);
        v16 = v23 + v21;
        v24 = v11;
        if (v20 || (v24 & 1) != 0)
          return result;
        if (++v18 >= v17)
          return v4;
      }
    }
  }
  else if (v3 == 45)
  {
    if (a2 >= 2)
    {
      v4 = 0;
      v5 = 0;
      v6 = &a1[a2];
      v7 = a1 + 1;
      while (1)
      {
        v8 = *v7 - 48;
        if (v8 > 9)
          break;
        result = 0;
        v10 = !is_mul_ok(v5, 0xAuLL);
        v11 = __CFADD__(((unint64_t)v4 * (unsigned __int128)0xAuLL) >> 64, 10 * v5);
        v12 = (__PAIR128__(v5, v4) * 0xA) >> 64;
        if (v11)
          v10 = 1;
        v13 = 10 * v4;
        v11 = v13 >= v8;
        v4 = v13 - v8;
        v14 = v11;
        v11 = v12 >= !v11;
        v5 = v12 - !v14;
        v15 = !v11;
        if (v10 || (v15 & 1) != 0)
          return result;
        if (++v7 >= v6)
          return v4;
      }
    }
  }
  else
  {
    if (a2 < 1)
      return 0;
    v4 = 0;
    v25 = 0;
    v26 = &a1[a2];
    while (1)
    {
      v27 = *v2 - 48;
      if (v27 > 9)
        break;
      result = 0;
      v28 = !is_mul_ok(v25, 0xAuLL);
      v11 = __CFADD__(((unint64_t)v4 * (unsigned __int128)0xAuLL) >> 64, 10 * v25);
      v29 = (__PAIR128__(v25, v4) * 0xA) >> 64;
      if (v11)
        v28 = 1;
      v30 = 10 * v4;
      v11 = __CFADD__(v30, v27);
      v4 = v30 + v27;
      v31 = v11;
      v11 = __CFADD__(v11, v29);
      v25 = v31 + v29;
      v32 = v11;
      if (v28 || (v32 & 1) != 0)
        return result;
      if (++v2 >= v26)
        return v4;
    }
  }
  return 0;
}

char *specialized withVaList<A>(_:_:)(uint64_t a1)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *result;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  va_list v22;
  NSString *v23;
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;

  type metadata accessor for __VaListBuilder();
  v2 = (_QWORD *)swift_allocObject();
  v2[2] = 8;
  v2[3] = 0;
  v3 = v2 + 3;
  v2[4] = 0;
  v2[5] = 0;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_25:
    v22 = (va_list)__VaListBuilder.va_list()();
    v23 = (NSString *)String._bridgeToObjectiveCImpl()();
    NSLogv(v23, v22);
    swift_bridgeObjectRelease();
    swift_release();
    return (char *)swift_unknownObjectRelease();
  }
  v5 = 0;
  v6 = a1 + 32;
  while (1)
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v6 + 40 * v5, (uint64_t)v24);
    v7 = v25;
    v8 = v26;
    __swift_project_boxed_opaque_existential_1(v24, v25);
    result = (char *)MEMORY[0x186DA5FA8](v7, v8);
    v10 = *v3;
    v11 = *((_QWORD *)result + 2);
    v12 = __OFADD__(*v3, v11);
    v13 = *v3 + v11;
    if (v12)
      break;
    v14 = result;
    v15 = v2[4];
    if (v15 >= v13)
      goto LABEL_18;
    if (v15 + 0x4000000000000000 < 0)
      goto LABEL_28;
    v16 = (char *)v2[5];
    if (2 * v15 > v13)
      v13 = 2 * v15;
    v2[4] = v13;
    if ((unint64_t)(v13 - 0x1000000000000000) >> 61 != 7)
      goto LABEL_29;
    result = (char *)swift_slowAlloc();
    v2[5] = result;
    if (v16)
    {
      if (result != v16 || result >= &v16[8 * v10])
        memmove(result, v16, 8 * v10);
      __VaListBuilder.deallocStorage(wordCount:storage:)();
LABEL_18:
      result = (char *)v2[5];
    }
    if (!result)
      goto LABEL_30;
    v18 = *((_QWORD *)v14 + 2);
    if (v18)
    {
      v19 = (uint64_t *)(v14 + 32);
      v20 = *v3;
      while (1)
      {
        v21 = *v19++;
        *(_QWORD *)&result[8 * v20] = v21;
        v20 = *v3 + 1;
        if (__OFADD__(*v3, 1))
          break;
        *v3 = v20;
        if (!--v18)
          goto LABEL_3;
      }
      __break(1u);
      break;
    }
LABEL_3:
    ++v5;
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    if (v5 == v4)
      goto LABEL_25;
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

void NSLog(NSString *format, ...)
{
  _NSLogv();
}

uint64_t _NSLogv()
{
  _CFAutoreleasePoolPush();
  _CFLogvEx3();
  return _CFAutoreleasePoolPop();
}

void NSLogv(NSString *format, va_list args)
{
  _NSLogv();
}

void IndexSet.insert(integersIn:)(uint64_t a1, uint64_t a2)
{
  IndexSet.insert(integersIn:)(a1, a2, (SEL *)&selRef_addIndexesInRange_);
}

void _NSUnarchiverPointerTableEntryFree(int a1, _BYTE *a2)
{
  int v2;

  v2 = a2[9];
  a2[9] = v2 - 1;
  if ((_BYTE)v2 == 1)
  {
    free(a2);
  }
  else if (!v2)
  {
    __break(1u);
  }
}

void URL.init(fileURLWithPath:)(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  __int128 v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  id v11;
  _QWORD v12[3];
  unsigned __int8 v13;
  _QWORD *v14;
  __int128 v15;

  if (_foundation_swift_url_feature_enabled())
  {
    v13 = 2;
    memset(v12, 0, sizeof(v12));
    swift_bridgeObjectRetain();
    URL.init(filePath:directoryHint:relativeTo:)(a1, a2, &v13, (uint64_t)v12, (uint64_t *)&v14);
    v6 = v14;
    v7 = v15;
  }
  else
  {
    v8 = HIBYTE(a2) & 0xF;
    if ((a2 & 0x2000000000000000) == 0)
      v8 = a1 & 0xFFFFFFFFFFFFLL;
    if (v8)
      swift_bridgeObjectRetain();
    v9 = objc_allocWithZone(MEMORY[0x1E0C99E98]);
    v10 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v11 = objc_msgSend(v9, sel_initFileURLWithPath_, v10);
    swift_unknownObjectRelease();
    v6 = static URL._converted(from:)(v11);

    v7 = 0uLL;
  }
  *(_QWORD *)a3 = v6;
  *(_OWORD *)(a3 + 8) = v7;
}

uint64_t JSONEncoder.keyEncodingStrategy.setter(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  unint64_t v5;

  v2 = *a1;
  v3 = a1[1];
  v4 = (os_unfair_lock_s *)v1[17];
  swift_retain();
  os_unfair_lock_lock(v4 + 4);
  swift_release();
  v5 = v1[14];
  v1[14] = v2;
  v1[15] = v3;
  outlined consume of JSONEncoder.KeyEncodingStrategy(v5);
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  return swift_release();
}

uint64_t __JSONReferencingEncoder.__deallocating_deinit(unint64_t a1)
{
  __JSONReferencingEncoder.deinit(a1);
  return swift_deallocClassInstance();
}

uint64_t __JSONReferencingEncoder.deinit(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char isUniquelyReferenced_nonNull_native;
  char v18;
  uint64_t v19;
  _BOOL8 v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  int64_t v42;
  unint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t result;
  unint64_t v52;
  int64_t v53;
  char *__src;
  void *__srca;
  uint64_t v56;
  uint64_t v57;

  v6 = v1;
  v9 = *(_QWORD *)(v1 + 16);
  v7 = (uint64_t *)(v1 + 16);
  v8 = v9;
  if (!(v9 >> 62))
  {
    v10 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v10 == 1)
      goto LABEL_3;
LABEL_7:
    if (v10)
      goto LABEL_72;
    type metadata accessor for JSONReference();
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = MEMORY[0x1E0DEE9E0];
    *(_QWORD *)(v11 + 24) = 0;
    *(_BYTE *)(v11 + 32) = 4;
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  v10 = _CocoaArrayWrapper.endIndex.getter();
  a1 = swift_bridgeObjectRelease();
  if (v10 != 1)
    goto LABEL_7;
LABEL_3:
  v11 = *v7;
  if ((unint64_t)*v7 >> 62)
    goto LABEL_27;
  v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v12)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  while (1)
  {
    v11 = specialized RangeReplaceableCollection<>.popLast()();
LABEL_9:
    v4 = *(_QWORD *)(v6 + 168);
    v2 = *(_QWORD *)(v6 + 176);
    v12 = *(_QWORD *)(v6 + 184);
    if (v4 < 0)
      break;
    v13 = *(_QWORD *)(v4 + 16);
    if (*(_BYTE *)(v4 + 32) != 3)
    {
      __break(1u);
LABEL_69:
      __break(1u);
      goto LABEL_70;
    }
    v3 = *(_QWORD *)(v4 + 24);
    v57 = *(_QWORD *)(v4 + 16);
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)(v4 + 24) = 0;
    *(_BYTE *)(v4 + 32) = 7;
    if (v13 >> 62)
    {
      outlined copy of __JSONReferencingEncoder.Reference(v4);
      swift_retain();
      outlined copy of JSONReference.Backing(v13, v3, 3);
      v5 = _CocoaArrayWrapper.endIndex.getter();
      outlined consume of JSONReference.Backing(v13, v3, 3);
      if (v5 < v2)
      {
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
    }
    else
    {
      v5 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
      outlined copy of __JSONReferencingEncoder.Reference(v4);
      swift_retain();
      if (v5 < v2)
        goto LABEL_25;
    }
    if ((v2 & 0x8000000000000000) == 0)
    {
      specialized Array.replaceSubrange<A>(_:with:)(v2, v2, v11);
      v14 = *(_QWORD *)(v4 + 16);
      v15 = *(_QWORD *)(v4 + 24);
      *(_QWORD *)(v4 + 16) = v57;
      *(_QWORD *)(v4 + 24) = 0;
      v16 = *(_BYTE *)(v4 + 32);
      *(_BYTE *)(v4 + 32) = 3;
      outlined consume of JSONReference.Backing(v14, v15, v16);
      swift_release();
      outlined consume of __JSONReferencingEncoder.Reference(v4);
LABEL_67:
      swift_bridgeObjectRelease();
      v48 = *(_QWORD *)(v6 + 56);
      v49 = *(_QWORD *)(v6 + 72);
      v50 = *(_QWORD *)(v6 + 80);
      __srca = *(void **)(v6 + 120);
      outlined consume of JSONEncoder.DateEncodingStrategy(*(void **)(v6 + 32), *(_QWORD *)(v6 + 40), *(_BYTE *)(v6 + 48));
      outlined consume of JSONEncoder.KeyEncodingStrategy(v48);
      outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(v49, v50);
      outlined consume of JSONEncoder.KeyEncodingStrategy((unint64_t)__srca);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      outlined consume of __JSONReferencingEncoder.Reference(*(_QWORD *)(v6 + 168));
      return v6;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    v12 = _CocoaArrayWrapper.endIndex.getter();
    a1 = swift_bridgeObjectRelease();
    if (!v12)
      goto LABEL_28;
  }
  if (*(_BYTE *)(v4 + 32) != 4)
  {
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  v3 = v4 & 0x7FFFFFFFFFFFFFFFLL;
  v5 = *(_QWORD *)((v4 & 0x7FFFFFFFFFFFFFFFLL) + 0x10);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_BYTE *)(v3 + 32) = 7;
  outlined copy of __JSONReferencingEncoder.Reference(v4);
  swift_retain();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  a1 = specialized __RawDictionaryStorage.find<A>(_:)(v2, v12);
  v19 = *(_QWORD *)(v5 + 16);
  v20 = (v18 & 1) == 0;
  v21 = __OFADD__(v19, v20);
  v22 = v19 + v20;
  if (v21)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  LOBYTE(v4) = v18;
  if (*(_QWORD *)(v5 + 24) >= v22)
    goto LABEL_20;
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v22, isUniquelyReferenced_nonNull_native);
  v23 = v5;
  a1 = specialized __RawDictionaryStorage.find<A>(_:)(v2, v12);
  if ((v4 & 1) == (v24 & 1))
  {
LABEL_22:
    if ((v4 & 1) == 0)
    {
LABEL_65:
      specialized _NativeDictionary._insert(at:key:value:)(a1, v2, v12, v11, v23);
      swift_bridgeObjectRetain();
      goto LABEL_66;
    }
LABEL_23:
    v25 = *(_QWORD *)(v23 + 56);
    v26 = 8 * a1;
    swift_release();
    *(_QWORD *)(v25 + v26) = v11;
LABEL_66:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v45 = *(_QWORD *)(v3 + 16);
    v46 = *(_QWORD *)(v3 + 24);
    *(_QWORD *)(v3 + 16) = v23;
    *(_QWORD *)(v3 + 24) = 0;
    v47 = *(_BYTE *)(v3 + 32);
    *(_BYTE *)(v3 + 32) = 4;
    outlined consume of JSONReference.Backing(v45, v46, v47);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    goto LABEL_67;
  }
  a1 = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_20:
  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    v23 = v5;
    goto LABEL_22;
  }
LABEL_30:
  v52 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONReference>);
  v27 = static _DictionaryStorage.copy(original:)();
  v23 = v27;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_64:
    swift_bridgeObjectRelease();
    a1 = v52;
    if ((v4 & 1) == 0)
      goto LABEL_65;
    goto LABEL_23;
  }
  v28 = (char *)(v27 + 64);
  __src = (char *)(v5 + 64);
  v56 = v6;
  v29 = (unint64_t)((1 << *(_BYTE *)(v23 + 32)) + 63) >> 6;
  if (v23 != v5 || v28 >= &__src[8 * v29])
    memmove(v28, __src, 8 * v29);
  v30 = 0;
  *(_QWORD *)(v23 + 16) = *(_QWORD *)(v5 + 16);
  v31 = 1 << *(_BYTE *)(v5 + 32);
  v32 = -1;
  if (v31 < 64)
    v32 = ~(-1 << v31);
  v33 = v32 & *(_QWORD *)(v5 + 64);
  v53 = (unint64_t)(v31 + 63) >> 6;
  while (2)
  {
    v6 = v56;
    if (v33)
    {
      v34 = __clz(__rbit64(v33));
      v33 &= v33 - 1;
      v35 = v34 | (v30 << 6);
LABEL_38:
      v36 = 16 * v35;
      v37 = (_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v35);
      v38 = v37[1];
      v39 = 8 * v35;
      v40 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v39);
      v41 = (_QWORD *)(*(_QWORD *)(v23 + 48) + v36);
      *v41 = *v37;
      v41[1] = v38;
      *(_QWORD *)(*(_QWORD *)(v23 + 56) + v39) = v40;
      swift_bridgeObjectRetain();
      swift_retain();
      continue;
    }
    break;
  }
  v42 = v30 + 1;
  if (__OFADD__(v30, 1))
    goto LABEL_69;
  if (v42 >= v53)
    goto LABEL_64;
  v43 = *(_QWORD *)&__src[8 * v42];
  ++v30;
  if (v43)
    goto LABEL_63;
  v30 = v42 + 1;
  if (v42 + 1 >= v53)
    goto LABEL_64;
  v43 = *(_QWORD *)&__src[8 * v30];
  if (v43)
    goto LABEL_63;
  v30 = v42 + 2;
  if (v42 + 2 >= v53)
    goto LABEL_64;
  v43 = *(_QWORD *)&__src[8 * v30];
  if (v43)
    goto LABEL_63;
  v30 = v42 + 3;
  if (v42 + 3 >= v53)
    goto LABEL_64;
  v43 = *(_QWORD *)&__src[8 * v30];
  if (v43)
    goto LABEL_63;
  v30 = v42 + 4;
  if (v42 + 4 >= v53)
    goto LABEL_64;
  v43 = *(_QWORD *)&__src[8 * v30];
  if (v43)
    goto LABEL_63;
  v30 = v42 + 5;
  if (v42 + 5 >= v53)
    goto LABEL_64;
  v43 = *(_QWORD *)&__src[8 * v30];
  if (v43)
    goto LABEL_63;
  v30 = v42 + 6;
  if (v42 + 6 >= v53)
    goto LABEL_64;
  v43 = *(_QWORD *)&__src[8 * v30];
  if (v43)
    goto LABEL_63;
  v30 = v42 + 7;
  if (v42 + 7 >= v53)
    goto LABEL_64;
  v43 = *(_QWORD *)&__src[8 * v30];
  if (v43)
  {
LABEL_63:
    v33 = (v43 - 1) & v43;
    v35 = __clz(__rbit64(v43)) + (v30 << 6);
    goto LABEL_38;
  }
  v44 = v42 + 8;
  if (v44 >= v53)
    goto LABEL_64;
  v43 = *(_QWORD *)&__src[8 * v44];
  if (v43)
  {
    v30 = v44;
    goto LABEL_63;
  }
  while (1)
  {
    v30 = v44 + 1;
    if (__OFADD__(v44, 1))
      break;
    v6 = v56;
    if (v30 >= v53)
      goto LABEL_64;
    v43 = *(_QWORD *)&__src[8 * v30];
    ++v44;
    if (v43)
      goto LABEL_63;
  }
LABEL_71:
  __break(1u);
LABEL_72:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t JSONEncoder.dateEncodingStrategy.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  os_unfair_lock_s *v5;
  void *v6;
  uint64_t v7;
  char v8;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_BYTE *)a1 + 16);
  v5 = *(os_unfair_lock_s **)(v1 + 136);
  swift_retain();
  os_unfair_lock_lock(v5 + 4);
  swift_release();
  v6 = *(void **)(v1 + 24);
  v7 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 24) = v2;
  *(_QWORD *)(v1 + 32) = v3;
  v8 = *(_BYTE *)(v1 + 40);
  *(_BYTE *)(v1 + 40) = v4;
  outlined consume of JSONEncoder.DateEncodingStrategy(v6, v7, v8);
  swift_retain();
  os_unfair_lock_unlock(v5 + 4);
  return swift_release();
}

uint64_t __JSONEncoder.__deallocating_deinit()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  swift_bridgeObjectRelease();
  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 120);
  outlined consume of JSONEncoder.DateEncodingStrategy(*(void **)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  outlined consume of JSONEncoder.KeyEncodingStrategy(v1);
  outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(v2, v3);
  outlined consume of JSONEncoder.KeyEncodingStrategy(v4);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t JSONEncoder.__deallocating_deinit()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 112);
  outlined consume of JSONEncoder.DateEncodingStrategy(*(void **)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  outlined consume of JSONEncoder.KeyEncodingStrategy(v1);
  outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(v2, v3);
  outlined consume of JSONEncoder.KeyEncodingStrategy(v4);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t outlined consume of __JSONReferencingEncoder.Reference(uint64_t a1)
{
  if ((a1 & 0x8000000000000000) == 0)
    return swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = a3;
    v5 = a2;
    v6 = a1;
    v7 = *v4;
    if (!(*v4 >> 62))
    {
      if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10) >= a2)
        goto LABEL_4;
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
  }
  swift_bridgeObjectRetain();
  v24 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v24 < v5)
    goto LABEL_32;
LABEL_4:
  v9 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v8 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_34:
    __break(1u);
LABEL_35:
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v11 = v10 + v8;
    if (!__OFADD__(v10, v8))
      goto LABEL_8;
LABEL_37:
    __break(1u);
LABEL_38:
    swift_bridgeObjectRetain();
    v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  v7 = *v4;
  if (*v4 >> 62)
    goto LABEL_35;
  v10 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  v11 = v10 + v8;
  if (__OFADD__(v10, v8))
    goto LABEL_37;
LABEL_8:
  v7 = *v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v4 = v7;
  v10 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000) == 0 && (v7 & 0x4000000000000000) == 0)
  {
    v13 = v7 & 0xFFFFFFFFFFFFFF8;
    if (v11 <= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_19;
    v10 = 1;
  }
  if (v7 >> 62)
    goto LABEL_38;
  v14 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v14 <= v11)
    v15 = v11;
  else
    v15 = v14;
  v7 = MEMORY[0x186DA53B4](v10, v15, 1, v7);
  *v4 = v7;
  v13 = v7 & 0xFFFFFFFFFFFFFF8;
LABEL_19:
  v16 = (_QWORD *)(v13 + 32 + 8 * v6);
  type metadata accessor for JSONReference();
  swift_arrayDestroy();
  if (!v8)
  {
LABEL_29:
    *v16 = v3;
    return specialized Array._endMutation()();
  }
  if (!(v7 >> 62))
  {
    v17 = *(_QWORD *)(v13 + 16);
    v18 = v17 - v5;
    if (!__OFSUB__(v17, v5))
      goto LABEL_22;
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  swift_bridgeObjectRetain();
  v25 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v18 = v25 - v5;
  if (__OFSUB__(v25, v5))
    goto LABEL_41;
LABEL_22:
  if ((v18 & 0x8000000000000000) == 0)
  {
    v19 = (char *)(v16 + 1);
    v20 = (char *)(v13 + 32 + 8 * v5);
    if (v16 + 1 != (_QWORD *)v20 || v19 >= &v20[8 * v18])
      memmove(v19, v20, 8 * v18);
    if (!(v7 >> 62))
    {
      v21 = *(_QWORD *)(v13 + 16);
      v22 = v21 + v8;
      if (!__OFADD__(v21, v8))
      {
LABEL_28:
        *(_QWORD *)(v13 + 16) = v22;
        goto LABEL_29;
      }
      goto LABEL_44;
    }
LABEL_42:
    swift_bridgeObjectRetain();
    v26 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v22 = v26 + v8;
    if (!__OFADD__(v26, v8))
      goto LABEL_28;
LABEL_44:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _LocaleICU.__deallocating_deinit()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  _BYTE v3[144];

  v1 = *(os_unfair_lock_s **)(v0 + 184);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  _LocaleICU.State.NumberFormattersBox.cleanup()();
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?(v0 + 40, (uint64_t)v3);
  outlined retain of LocalePreferences?((uint64_t)v3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t closure #1 in LocaleCache.fixedNSLocale(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  char v3;
  char v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  id v14;
  uint64_t result;
  uint64_t v16;
  objc_class *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  id v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  unint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _OWORD *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  void *v49;
  id v50;
  int64_t v51;
  unint64_t v52;
  int64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  _OWORD v60[8];
  _BYTE v61[28];
  objc_super v62;
  _OWORD v63[8];
  _OWORD v64[2];
  _BYTE v65[144];
  __int128 v66;
  _OWORD v67[7];
  _OWORD v68[2];
  uint64_t v69;

  v4 = v3;
  v9 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  outlined init with take of LocalePreferences?(a2 + 40, (uint64_t)v65);
  *(_QWORD *)&v66 = v9;
  *((_QWORD *)&v66 + 1) = v8;
  outlined init with take of LocalePreferences?((uint64_t)v65, (uint64_t)v67);
  v63[6] = v67[5];
  v63[7] = v67[6];
  v64[0] = v68[0];
  *(_OWORD *)((char *)v64 + 12) = *(_OWORD *)((char *)v68 + 12);
  v63[2] = v67[1];
  v63[3] = v67[2];
  v63[4] = v67[3];
  v63[5] = v67[4];
  v63[0] = v66;
  v63[1] = v67[0];
  v10 = *(_QWORD *)(a1 + 80);
  v11 = *(_QWORD *)(v10 + 16);
  swift_bridgeObjectRetain();
  outlined retain of LocalePreferences?((uint64_t)v65, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  if (v11)
  {
    outlined retain of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v66);
    v12 = specialized __RawDictionaryStorage.find<A>(_:)((unint64_t *)v63);
    if ((v13 & 1) != 0)
    {
      v14 = *(id *)(*(_QWORD *)(v10 + 56) + 8 * v12);
      outlined release of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v66);
      result = outlined release of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v66);
LABEL_51:
      *a3 = v14;
      return result;
    }
    outlined release of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v66);
  }
  v16 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type _LocaleICU and conformance _LocaleICU, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleICU, (uint64_t)&protocol conformance descriptor for _LocaleICU);
  v17 = (objc_class *)type metadata accessor for _NSSwiftLocale();
  v18 = (char *)objc_allocWithZone(v17);
  v19 = &v18[OBJC_IVAR____NSSwiftLocale_locale];
  *(_QWORD *)v19 = a2;
  *((_QWORD *)v19 + 1) = v16;
  v20 = String._bridgeToObjectiveCImpl()();
  v62.receiver = v18;
  v62.super_class = v17;
  swift_retain_n();
  v21 = objc_msgSendSuper2(&v62, sel_initWithLocaleIdentifier_, v20);
  swift_unknownObjectRelease();
  outlined retain of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v66);
  v14 = v21;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v69 = *(_QWORD *)(a1 + 80);
  v23 = v69;
  *(_QWORD *)(a1 + 80) = 0x8000000000000000;
  v25 = specialized __RawDictionaryStorage.find<A>(_:)((unint64_t *)v63);
  v26 = *(_QWORD *)(v23 + 16);
  v27 = (v24 & 1) == 0;
  v28 = v26 + v27;
  if (__OFADD__(v26, v27))
  {
    __break(1u);
  }
  else
  {
    v4 = v24;
    if (*(_QWORD *)(v23 + 24) < v28)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v28, isUniquelyReferenced_nonNull_native);
      v29 = v69;
      v30 = specialized __RawDictionaryStorage.find<A>(_:)((unint64_t *)v63);
      if ((v4 & 1) != (v31 & 1))
        goto LABEL_54;
      v25 = v30;
      if ((v4 & 1) == 0)
        goto LABEL_49;
LABEL_12:
      v32 = *(_QWORD *)(v29 + 56);

      *(_QWORD *)(v32 + 8 * v25) = v14;
LABEL_50:
      *(_QWORD *)(a1 + 80) = v29;
      swift_bridgeObjectRelease();
      outlined release of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v66);
      outlined release of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v66);
      result = swift_release();
      goto LABEL_51;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v29 = v23;
      if ((v24 & 1) != 0)
        goto LABEL_12;
LABEL_49:
      specialized _NativeDictionary._insert(at:key:value:)(v25, v63, (uint64_t)v14, (_QWORD *)v29);
      outlined retain of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v66);
      goto LABEL_50;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<LocaleCache.State.IdentifierAndPrefs, _NSSwiftLocale>);
  v33 = static _DictionaryStorage.copy(original:)();
  v29 = v33;
  if (!*(_QWORD *)(v23 + 16))
  {
LABEL_48:
    swift_bridgeObjectRelease();
    if ((v4 & 1) != 0)
      goto LABEL_12;
    goto LABEL_49;
  }
  v34 = (void *)(v33 + 64);
  v35 = (unint64_t)((1 << *(_BYTE *)(v29 + 32)) + 63) >> 6;
  if (v29 != v23 || (unint64_t)v34 >= v23 + 64 + 8 * v35)
    memmove(v34, (const void *)(v23 + 64), 8 * v35);
  v36 = 0;
  *(_QWORD *)(v29 + 16) = *(_QWORD *)(v23 + 16);
  v37 = 1 << *(_BYTE *)(v23 + 32);
  v38 = -1;
  if (v37 < 64)
    v38 = ~(-1 << v37);
  v39 = v38 & *(_QWORD *)(v23 + 64);
  v55 = v23 + 64;
  v56 = (unint64_t)(v37 + 63) >> 6;
  while (1)
  {
    if (v39)
    {
      v58 = (v39 - 1) & v39;
      v59 = v36;
      v40 = __clz(__rbit64(v39)) | (v36 << 6);
      goto LABEL_22;
    }
    v51 = v36 + 1;
    if (__OFADD__(v36, 1))
    {
      __break(1u);
      goto LABEL_53;
    }
    if (v51 >= v56)
      goto LABEL_48;
    v52 = *(_QWORD *)(v55 + 8 * v51);
    v53 = v36 + 1;
    if (!v52)
    {
      v53 = v36 + 2;
      if (v36 + 2 >= v56)
        goto LABEL_48;
      v52 = *(_QWORD *)(v55 + 8 * v53);
      if (!v52)
      {
        v53 = v36 + 3;
        if (v36 + 3 >= v56)
          goto LABEL_48;
        v52 = *(_QWORD *)(v55 + 8 * v53);
        if (!v52)
        {
          v53 = v36 + 4;
          if (v36 + 4 >= v56)
            goto LABEL_48;
          v52 = *(_QWORD *)(v55 + 8 * v53);
          if (!v52)
          {
            v53 = v36 + 5;
            if (v36 + 5 >= v56)
              goto LABEL_48;
            v52 = *(_QWORD *)(v55 + 8 * v53);
            if (!v52)
            {
              v53 = v36 + 6;
              if (v36 + 6 >= v56)
                goto LABEL_48;
              v52 = *(_QWORD *)(v55 + 8 * v53);
              if (!v52)
              {
                v53 = v36 + 7;
                if (v36 + 7 >= v56)
                  goto LABEL_48;
                v52 = *(_QWORD *)(v55 + 8 * v53);
                if (!v52)
                {
                  v53 = v36 + 8;
                  if (v36 + 8 >= v56)
                    goto LABEL_48;
                  v52 = *(_QWORD *)(v55 + 8 * v53);
                  if (!v52)
                    break;
                }
              }
            }
          }
        }
      }
    }
LABEL_47:
    v58 = (v52 - 1) & v52;
    v59 = v53;
    v40 = __clz(__rbit64(v52)) + (v53 << 6);
LABEL_22:
    v41 = (_OWORD *)(*(_QWORD *)(v23 + 48) + 160 * v40);
    v42 = v41[2];
    v43 = v41[3];
    v44 = v41[5];
    v60[4] = v41[4];
    v60[5] = v44;
    v60[3] = v43;
    v45 = v41[6];
    v46 = v41[7];
    v47 = v41[8];
    *(_OWORD *)&v61[12] = *(_OWORD *)((char *)v41 + 140);
    v60[7] = v46;
    *(_OWORD *)v61 = v47;
    v60[6] = v45;
    v48 = v41[1];
    v60[0] = *v41;
    v60[1] = v48;
    v60[2] = v42;
    v57 = 8 * v40;
    v49 = *(void **)(*(_QWORD *)(v23 + 56) + 8 * v40);
    memmove((void *)(*(_QWORD *)(v29 + 48) + 160 * v40), v41, 0x9CuLL);
    *(_QWORD *)(*(_QWORD *)(v29 + 56) + v57) = v49;
    outlined retain of LocaleCache.State.IdentifierAndPrefs((uint64_t)v60);
    v50 = v49;
    v39 = v58;
    v36 = v59;
  }
  v54 = v36 + 9;
  if (v36 + 9 >= v56)
    goto LABEL_48;
  v52 = *(_QWORD *)(v55 + 8 * v54);
  if (v52)
  {
    v53 = v36 + 9;
    goto LABEL_47;
  }
  while (1)
  {
    v53 = v54 + 1;
    if (__OFADD__(v54, 1))
      break;
    if (v53 >= v56)
      goto LABEL_48;
    v52 = *(_QWORD *)(v55 + 8 * v53);
    ++v54;
    if (v52)
      goto LABEL_47;
  }
LABEL_53:
  __break(1u);
LABEL_54:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t outlined retain of LocalePreferences?(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_DWORD *)(a1 + 136));
  return a1;
}

uint64_t outlined consume of LocalePreferences?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined copy of LocalePreferences?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13)
{
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13 = a9;
    v14 = a10;
    v15 = a11;
    v16 = a12;
    v17 = a13;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

void specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  void *v38;
  Swift::UInt8 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 *v45;
  Swift::UInt v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  Swift::UInt v56;
  Swift::UInt v57;
  int64_t v58;
  unint64_t v59;
  int64_t v60;
  Swift::UInt v61;
  int64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  int64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  Swift::UInt v71;
  Swift::UInt v72;
  int64_t v73;
  unint64_t v74;
  int64_t v75;
  __int128 v76;
  __int128 v77;
  void *v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  Swift::UInt v94;
  Swift::UInt v95;
  Swift::UInt8 v96;
  Swift::UInt8 v97;
  Swift::UInt8 v98;
  Swift::Int v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  char v103;
  unint64_t v104;
  BOOL v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  int64_t v112;
  char v113;
  uint64_t v114;
  id v115;
  uint64_t v116;
  int64_t v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  _BYTE v137[144];
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  _OWORD v146[2];
  _BYTE v147[160];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<LocaleCache.State.IdentifierAndPrefs, _NSSwiftLocale>);
  v113 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_134;
  v108 = v2;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v109 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v112 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  swift_retain();
  v12 = 0;
  v110 = v7;
  v111 = v5;
  while (1)
  {
    if (v10)
    {
      v116 = (v10 - 1) & v10;
      v23 = __clz(__rbit64(v10)) | (v12 << 6);
    }
    else
    {
      v24 = v12 + 1;
      if (__OFADD__(v12, 1))
        goto LABEL_139;
      if (v24 >= v112)
        goto LABEL_129;
      v25 = v109[v24];
      ++v12;
      if (!v25)
      {
        v12 = v24 + 1;
        if (v24 + 1 >= v112)
          goto LABEL_129;
        v25 = v109[v12];
        if (!v25)
        {
          v26 = v24 + 2;
          if (v26 >= v112)
            goto LABEL_129;
          v25 = v109[v26];
          if (!v25)
          {
            while (1)
            {
              v12 = v26 + 1;
              if (__OFADD__(v26, 1))
                goto LABEL_140;
              if (v12 >= v112)
                break;
              v25 = v109[v12];
              ++v26;
              if (v25)
                goto LABEL_21;
            }
LABEL_129:
            swift_release();
            v3 = v108;
            if ((v113 & 1) != 0)
            {
              v107 = 1 << *(_BYTE *)(v5 + 32);
              if (v107 >= 64)
                bzero(v109, ((unint64_t)(v107 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v109 = -1 << v107;
              *(_QWORD *)(v5 + 16) = 0;
            }
LABEL_134:
            swift_release();
            *v3 = v7;
            return;
          }
          v12 = v26;
        }
      }
LABEL_21:
      v116 = (v25 - 1) & v25;
      v23 = __clz(__rbit64(v25)) + (v12 << 6);
    }
    v117 = v12;
    v27 = *(_QWORD *)(v5 + 48) + 160 * v23;
    if ((v113 & 1) != 0)
    {
      v28 = *(_QWORD *)v27;
      v29 = *(_QWORD *)(v27 + 8);
      outlined init with take of LocalePreferences?(v27 + 16, (uint64_t)&v138, &demangling cache variable for type metadata for LocalePreferences?);
      v115 = *(id *)(*(_QWORD *)(v5 + 56) + 8 * v23);
      v30 = &v138;
    }
    else
    {
      v31 = *(_OWORD *)(v27 + 32);
      v32 = *(_OWORD *)(v27 + 48);
      v33 = *(_OWORD *)(v27 + 80);
      v142 = *(_OWORD *)(v27 + 64);
      v143 = v33;
      v141 = v32;
      v34 = *(_OWORD *)(v27 + 96);
      v35 = *(_OWORD *)(v27 + 112);
      v36 = *(_OWORD *)(v27 + 128);
      *(_OWORD *)((char *)v146 + 12) = *(_OWORD *)(v27 + 140);
      v145 = v35;
      v146[0] = v36;
      v144 = v34;
      v37 = *(_OWORD *)(v27 + 16);
      v138 = *(_OWORD *)v27;
      v139 = v37;
      v140 = v31;
      v38 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v23);
      v29 = *((_QWORD *)&v138 + 1);
      v28 = v138;
      outlined retain of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v138);
      v115 = v38;
      v30 = &v139;
    }
    outlined init with take of LocalePreferences?((uint64_t)v30, (uint64_t)v147, &demangling cache variable for type metadata for LocalePreferences?);
    Hasher.init(_seed:)();
    v114 = v29;
    String.hash(into:)();
    outlined init with take of LocalePreferences?((uint64_t)v147, (uint64_t)v137, &demangling cache variable for type metadata for LocalePreferences?);
    v118 = v28;
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v137) == 1)
    {
      Hasher._combine(_:)(0);
      goto LABEL_120;
    }
    outlined init with take of LocalePreferences?((uint64_t)v147, (uint64_t)&v138, &demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v138 == 2)
    {
      v39 = 0;
    }
    else
    {
      v39 = v138 & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v39);
    v40 = *((_QWORD *)&v138 + 1);
    if (!*((_QWORD *)&v138 + 1))
    {
      Hasher._combine(_:)(0);
      v45 = &v138;
      goto LABEL_41;
    }
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(*(_QWORD *)(v40 + 16));
    v41 = *(_QWORD *)(v40 + 16);
    if (v41)
      break;
    outlined init with take of LocalePreferences?((uint64_t)v147, (uint64_t)&v127, &demangling cache variable for type metadata for LocalePreferences?);
    v45 = &v127;
LABEL_41:
    outlined retain of LocalePreferences(v45);
    if (*((_QWORD *)&v139 + 1))
      goto LABEL_42;
LABEL_35:
    Hasher._combine(_:)(0);
    if (*((_QWORD *)&v140 + 1))
      goto LABEL_43;
LABEL_36:
    Hasher._combine(_:)(0);
    v43 = v141;
    if ((_QWORD)v141)
      goto LABEL_44;
LABEL_37:
    Hasher._combine(_:)(0);
    v44 = *((_QWORD *)&v141 + 1);
    if (*((_QWORD *)&v141 + 1))
      goto LABEL_66;
LABEL_38:
    Hasher._combine(_:)(0);
LABEL_88:
    v76 = v142;
    v77 = v143;
    v78 = (void *)v144;
    if ((_QWORD)v142)
    {
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v79 = *((id *)&v76 + 1);
      v80 = (id)v77;
      v81 = *((id *)&v77 + 1);
      v82 = v78;
      v83 = (id)v76;
      _CFObject.hash(into:)();
      if (*((_QWORD *)&v76 + 1))
        goto LABEL_90;
    }
    else
    {
      Hasher._combine(_:)(0);
      v88 = v78;
      v89 = *((id *)&v76 + 1);
      v90 = (id)v77;
      v91 = *((id *)&v77 + 1);
      if (*((_QWORD *)&v76 + 1))
      {
LABEL_90:
        Hasher._combine(_:)(1u);
        type metadata accessor for CFDictionaryRef(0);
        lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
        v84 = *((id *)&v76 + 1);
        _CFObject.hash(into:)();

        if ((_QWORD)v77)
          goto LABEL_91;
        goto LABEL_96;
      }
    }
    Hasher._combine(_:)(0);
    if ((_QWORD)v77)
    {
LABEL_91:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v85 = (id)v77;
      _CFObject.hash(into:)();

      if (*((_QWORD *)&v77 + 1))
        goto LABEL_92;
      goto LABEL_97;
    }
LABEL_96:
    Hasher._combine(_:)(0);
    if (*((_QWORD *)&v77 + 1))
    {
LABEL_92:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v86 = *((id *)&v77 + 1);
      _CFObject.hash(into:)();

      if (v78)
        goto LABEL_93;
      goto LABEL_98;
    }
LABEL_97:
    Hasher._combine(_:)(0);
    if (v78)
    {
LABEL_93:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v87 = v78;
      _CFObject.hash(into:)();

      goto LABEL_99;
    }
LABEL_98:
    Hasher._combine(_:)(0);
    v87 = 0;
LABEL_99:

    v92 = *((_QWORD *)&v144 + 1);
    if (v92)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      specialized Dictionary<>.hash(into:)((uint64_t)&v132, v92);
      swift_bridgeObjectRelease();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    v93 = v145;
    if ((_QWORD)v145)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      specialized Dictionary<>.hash(into:)((uint64_t)&v132, v93);
      swift_bridgeObjectRelease();
      if (!*(_QWORD *)&v146[0])
        goto LABEL_106;
    }
    else
    {
      Hasher._combine(_:)(0);
      if (!*(_QWORD *)&v146[0])
      {
LABEL_106:
        Hasher._combine(_:)(0);
        goto LABEL_107;
      }
    }
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
LABEL_107:
    if (BYTE8(v146[0]) == 2)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      v94 = BYTE8(v146[0]) & 1;
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v94);
    }
    if (BYTE9(v146[0]) == 2)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      v95 = BYTE9(v146[0]) & 1;
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v95);
    }
    if (BYTE10(v146[0]) == 2)
    {
      v96 = 0;
    }
    else
    {
      v96 = BYTE10(v146[0]) & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v96);
    if (BYTE11(v146[0]) == 2)
    {
      v97 = 0;
    }
    else
    {
      v98 = BYTE11(v146[0]) & 1;
      Hasher._combine(_:)(1u);
      v97 = v98;
    }
    Hasher._combine(_:)(v97);
    outlined retain of LocalePreferences?((uint64_t)v147, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
    v7 = v110;
    v5 = v111;
LABEL_120:
    v99 = Hasher._finalize()();
    v100 = -1 << *(_BYTE *)(v7 + 32);
    v101 = v99 & ~v100;
    v102 = v101 >> 6;
    if (((-1 << v101) & ~*(_QWORD *)(v11 + 8 * (v101 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v101) & ~*(_QWORD *)(v11 + 8 * (v101 >> 6)))) | v101 & 0x7FFFFFFFFFFFFFC0;
      v14 = v118;
    }
    else
    {
      v103 = 0;
      v104 = (unint64_t)(63 - v100) >> 6;
      v14 = v118;
      do
      {
        if (++v102 == v104 && (v103 & 1) != 0)
        {
          __break(1u);
          goto LABEL_135;
        }
        v105 = v102 == v104;
        if (v102 == v104)
          v102 = 0;
        v103 |= v105;
        v106 = *(_QWORD *)(v11 + 8 * v102);
      }
      while (v106 == -1);
      v13 = __clz(__rbit64(~v106)) + (v102 << 6);
    }
    *(_QWORD *)&v138 = v14;
    *((_QWORD *)&v138 + 1) = v114;
    outlined init with take of LocalePreferences?((uint64_t)v147, (uint64_t)&v139, &demangling cache variable for type metadata for LocalePreferences?);
    *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v15 = (_OWORD *)(*(_QWORD *)(v7 + 48) + 160 * v13);
    v16 = v139;
    *v15 = v138;
    v15[1] = v16;
    v17 = v143;
    v19 = v140;
    v18 = v141;
    v15[4] = v142;
    v15[5] = v17;
    v15[2] = v19;
    v15[3] = v18;
    v20 = v144;
    v21 = v145;
    v22 = v146[0];
    *(_OWORD *)((char *)v15 + 140) = *(_OWORD *)((char *)v146 + 12);
    v15[7] = v21;
    v15[8] = v22;
    v15[6] = v20;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v13) = v115;
    ++*(_QWORD *)(v7 + 16);
    v10 = v116;
    v12 = v117;
  }
  outlined retain of LocalePreferences?((uint64_t)v147, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v42 = v40 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v42 += 16;
    --v41;
  }
  while (v41);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v139 + 1))
    goto LABEL_35;
LABEL_42:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v140 + 1))
    goto LABEL_36;
LABEL_43:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v43 = v141;
  if (!(_QWORD)v141)
    goto LABEL_37;
LABEL_44:
  Hasher._combine(_:)(1u);
  v46 = 0;
  v47 = 0;
  v48 = v43 + 64;
  v49 = 1 << *(_BYTE *)(v43 + 32);
  if (v49 < 64)
    v50 = ~(-1 << v49);
  else
    v50 = -1;
  v51 = v50 & *(_QWORD *)(v43 + 64);
  v52 = (unint64_t)(v49 + 63) >> 6;
  v123 = v133;
  v125 = v132;
  v119 = v135;
  v121 = v134;
  v53 = v136;
  while (2)
  {
    if (v51)
    {
      v54 = __clz(__rbit64(v51));
      v51 &= v51 - 1;
      v55 = v54 | (v47 << 6);
LABEL_49:
      v56 = *(unsigned __int8 *)(*(_QWORD *)(v43 + 48) + v55);
      v57 = *(_QWORD *)(*(_QWORD *)(v43 + 56) + 8 * v55);
      v127 = v125;
      v128 = v123;
      v129 = v121;
      v130 = v119;
      v131 = v53;
      Hasher._combine(_:)(v56);
      Hasher._combine(_:)(v57);
      v46 ^= Hasher._finalize()();
      continue;
    }
    break;
  }
  v58 = v47 + 1;
  if (__OFADD__(v47, 1))
  {
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
    goto LABEL_137;
  }
  if (v58 >= v52)
    goto LABEL_65;
  v59 = *(_QWORD *)(v48 + 8 * v58);
  ++v47;
  if (v59)
    goto LABEL_64;
  v47 = v58 + 1;
  if (v58 + 1 >= v52)
    goto LABEL_65;
  v59 = *(_QWORD *)(v48 + 8 * v47);
  if (v59)
    goto LABEL_64;
  v47 = v58 + 2;
  if (v58 + 2 >= v52)
    goto LABEL_65;
  v59 = *(_QWORD *)(v48 + 8 * v47);
  if (v59)
  {
LABEL_64:
    v51 = (v59 - 1) & v59;
    v55 = __clz(__rbit64(v59)) + (v47 << 6);
    goto LABEL_49;
  }
  v60 = v58 + 3;
  if (v60 < v52)
  {
    v59 = *(_QWORD *)(v48 + 8 * v60);
    if (!v59)
    {
      while (1)
      {
        v47 = v60 + 1;
        if (__OFADD__(v60, 1))
          break;
        if (v47 >= v52)
          goto LABEL_65;
        v59 = *(_QWORD *)(v48 + 8 * v47);
        ++v60;
        if (v59)
          goto LABEL_64;
      }
LABEL_137:
      __break(1u);
      goto LABEL_138;
    }
    v47 = v60;
    goto LABEL_64;
  }
LABEL_65:
  swift_bridgeObjectRetain();
  Hasher._combine(_:)(v46);
  swift_bridgeObjectRelease();
  v44 = *((_QWORD *)&v141 + 1);
  if (!*((_QWORD *)&v141 + 1))
    goto LABEL_38;
LABEL_66:
  Hasher._combine(_:)(1u);
  v61 = 0;
  v62 = 0;
  v63 = v44 + 64;
  v64 = 1 << *(_BYTE *)(v44 + 32);
  if (v64 < 64)
    v65 = ~(-1 << v64);
  else
    v65 = -1;
  v66 = v65 & *(_QWORD *)(v44 + 64);
  v67 = (unint64_t)(v64 + 63) >> 6;
  v124 = v133;
  v126 = v132;
  v120 = v135;
  v122 = v134;
  v68 = v136;
  while (2)
  {
    if (v66)
    {
      v69 = __clz(__rbit64(v66));
      v66 &= v66 - 1;
      v70 = v69 | (v62 << 6);
LABEL_71:
      v71 = *(unsigned __int8 *)(*(_QWORD *)(v44 + 48) + v70);
      v72 = *(_QWORD *)(*(_QWORD *)(v44 + 56) + 8 * v70);
      v127 = v126;
      v128 = v124;
      v129 = v122;
      v130 = v120;
      v131 = v68;
      Hasher._combine(_:)(v71);
      Hasher._combine(_:)(v72);
      v61 ^= Hasher._finalize()();
      continue;
    }
    break;
  }
  v73 = v62 + 1;
  if (__OFADD__(v62, 1))
    goto LABEL_136;
  if (v73 >= v67)
  {
LABEL_87:
    swift_bridgeObjectRetain();
    Hasher._combine(_:)(v61);
    swift_bridgeObjectRelease();
    goto LABEL_88;
  }
  v74 = *(_QWORD *)(v63 + 8 * v73);
  ++v62;
  if (v74)
    goto LABEL_86;
  v62 = v73 + 1;
  if (v73 + 1 >= v67)
    goto LABEL_87;
  v74 = *(_QWORD *)(v63 + 8 * v62);
  if (v74)
    goto LABEL_86;
  v62 = v73 + 2;
  if (v73 + 2 >= v67)
    goto LABEL_87;
  v74 = *(_QWORD *)(v63 + 8 * v62);
  if (v74)
  {
LABEL_86:
    v66 = (v74 - 1) & v74;
    v70 = __clz(__rbit64(v74)) + (v62 << 6);
    goto LABEL_71;
  }
  v75 = v73 + 3;
  if (v75 >= v67)
    goto LABEL_87;
  v74 = *(_QWORD *)(v63 + 8 * v75);
  if (v74)
  {
    v62 = v75;
    goto LABEL_86;
  }
  while (1)
  {
    v62 = v75 + 1;
    if (__OFADD__(v75, 1))
      break;
    if (v62 >= v67)
      goto LABEL_87;
    v74 = *(_QWORD *)(v63 + 8 * v62);
    ++v75;
    if (v74)
      goto LABEL_86;
  }
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
}

{
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<ICUMeasurementNumberFormatter.Signature, ICUMeasurementNumberFormatter?>);
}

{
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<ICUByteCountNumberFormatter.Signature, ICUByteCountNumberFormatter?>);
}

{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  void *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  unsigned __int8 *v23;
  Swift::UInt v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t ObjectType;
  void (*v30)(__int128 *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t);
  Swift::UInt8 v33;
  void (*v34)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 *v41;
  Swift::UInt v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  Swift::UInt v52;
  Swift::UInt v53;
  int64_t v54;
  unint64_t v55;
  int64_t v56;
  Swift::UInt v57;
  int64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  int64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  Swift::UInt v67;
  Swift::UInt v68;
  int64_t v69;
  unint64_t v70;
  int64_t v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  Swift::UInt v92;
  Swift::UInt v93;
  Swift::UInt8 v94;
  Swift::UInt8 v95;
  Swift::UInt8 v96;
  Swift::Int v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  char v101;
  unint64_t v102;
  BOOL v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  int64_t v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  int64_t v116;
  char v117;
  void *v118;
  Swift::UInt8 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  char v136[8];
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  void *v143;
  void *v144;
  void *v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char v150;
  char v151;
  char v152;
  char v153;
  _QWORD v154[18];
  _BYTE v155[144];
  _BYTE v156[144];
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  uint64_t v161;

  v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Date.ComponentsFormatStyle, NSDateComponentsFormatter>);
  v5 = static _DictionaryStorage.resize(original:capacity:move:)();
  v6 = v5;
  if (!*(_QWORD *)(v4 + 16))
  {
    swift_release();
    v105 = v107;
    goto LABEL_141;
  }
  v112 = a2;
  v7 = 1 << *(_BYTE *)(v4 + 32);
  v110 = (_QWORD *)(v4 + 64);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v4 + 64);
  v111 = (unint64_t)(v7 + 63) >> 6;
  v10 = v5 + 64;
  swift_retain();
  v11 = 0;
  v108 = v6;
  v109 = v4;
  while (1)
  {
    if (v9)
    {
      v17 = __clz(__rbit64(v9));
      v18 = (v9 - 1) & v9;
      v19 = v17 | (v11 << 6);
    }
    else
    {
      v20 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_146;
      if (v20 >= v111)
        goto LABEL_134;
      v21 = v110[v20];
      ++v11;
      if (!v21)
      {
        v11 = v20 + 1;
        if (v20 + 1 >= v111)
          goto LABEL_134;
        v21 = v110[v11];
        if (!v21)
        {
          v22 = v20 + 2;
          if (v22 >= v111)
            goto LABEL_134;
          v21 = v110[v22];
          if (!v21)
          {
            while (1)
            {
              v11 = v22 + 1;
              if (__OFADD__(v22, 1))
                goto LABEL_147;
              if (v11 >= v111)
                break;
              v21 = v110[v11];
              ++v22;
              if (v21)
                goto LABEL_21;
            }
LABEL_134:
            swift_release();
            v105 = v107;
            if ((v112 & 1) != 0)
            {
              v106 = 1 << *(_BYTE *)(v4 + 32);
              if (v106 >= 64)
                bzero(v110, ((unint64_t)(v106 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v110 = -1 << v106;
              *(_QWORD *)(v4 + 16) = 0;
            }
            swift_release();
LABEL_141:
            *v105 = v6;
            return;
          }
          v11 = v22;
        }
      }
LABEL_21:
      v18 = (v21 - 1) & v21;
      v19 = __clz(__rbit64(v21)) + (v11 << 6);
    }
    v23 = (unsigned __int8 *)(*(_QWORD *)(v4 + 48) + 56 * v19);
    v24 = *v23;
    v25 = *((_QWORD *)v23 + 1);
    v121 = *((_QWORD *)v23 + 2);
    v26 = *((_QWORD *)v23 + 3);
    v122 = *((_QWORD *)v23 + 4);
    v120 = *((_QWORD *)v23 + 5);
    v119 = v23[48];
    v27 = *(void **)(*(_QWORD *)(v4 + 56) + 8 * v19);
    if ((v112 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      v28 = v27;
    }
    v118 = v27;
    Hasher.init(_seed:)();
    v117 = v24;
    Hasher._combine(_:)(v24);
    v115 = v18;
    v116 = v11;
    v113 = v25;
    if (v25)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      specialized Set.hash(into:)(&v157, v25);
      swift_bridgeObjectRelease();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    ObjectType = swift_getObjectType();
    v30 = *(void (**)(__int128 *, uint64_t, uint64_t))(v26 + 120);
    swift_unknownObjectRetain();
    v114 = v26;
    v30(&v157, ObjectType, v26);
    swift_unknownObjectRelease();
    v31 = swift_getObjectType();
    v32 = *(uint64_t (**)(uint64_t, uint64_t))(v120 + 48);
    swift_unknownObjectRetain();
    if ((v32(v31, v120) & 1) != 0)
    {
      v33 = 1;
LABEL_31:
      Hasher._combine(_:)(v33);
      swift_unknownObjectRelease();
      v9 = v115;
      v11 = v116;
      goto LABEL_125;
    }
    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v120 + 64))(v31, v120);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v34 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v120 + 464);
    swift_unknownObjectRetain();
    v34(v154, v31, v120);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v154, (uint64_t)v155, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v155, (uint64_t)v156, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v156) == 1)
    {
      v33 = 0;
      goto LABEL_31;
    }
    outlined init with take of LocalePreferences?((uint64_t)v155, (uint64_t)v136, &demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v136[0] == 2)
    {
      v35 = 0;
    }
    else
    {
      v35 = v136[0] & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v35);
    v36 = v137;
    if (!v137)
    {
      Hasher._combine(_:)(0);
      v41 = (__int128 *)v136;
      goto LABEL_46;
    }
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(*(_QWORD *)(v36 + 16));
    v37 = *(_QWORD *)(v36 + 16);
    if (v37)
      break;
    outlined init with take of LocalePreferences?((uint64_t)v155, (uint64_t)&v131, &demangling cache variable for type metadata for LocalePreferences?);
    v41 = &v131;
LABEL_46:
    outlined retain of LocalePreferences(v41);
    if (v138)
      goto LABEL_47;
LABEL_40:
    Hasher._combine(_:)(0);
    if (v139)
      goto LABEL_48;
LABEL_41:
    Hasher._combine(_:)(0);
    v39 = v140;
    if (v140)
      goto LABEL_49;
LABEL_42:
    Hasher._combine(_:)(0);
    v40 = v141;
    if (v141)
      goto LABEL_71;
LABEL_43:
    Hasher._combine(_:)(0);
LABEL_93:
    v73 = v142;
    v72 = v143;
    v75 = v144;
    v74 = v145;
    v76 = v146;
    if (v142)
    {
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v77 = v72;
      v78 = v75;
      v79 = v74;
      v80 = v76;
      v81 = v73;
      _CFObject.hash(into:)();
      if (v72)
        goto LABEL_95;
    }
    else
    {
      Hasher._combine(_:)(0);
      v86 = v76;
      v87 = v72;
      v88 = v75;
      v89 = v74;
      if (v72)
      {
LABEL_95:
        Hasher._combine(_:)(1u);
        type metadata accessor for CFDictionaryRef(0);
        lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
        v82 = v72;
        _CFObject.hash(into:)();

        if (v75)
          goto LABEL_96;
        goto LABEL_101;
      }
    }
    Hasher._combine(_:)(0);
    if (v75)
    {
LABEL_96:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v83 = v75;
      _CFObject.hash(into:)();

      if (v74)
        goto LABEL_97;
      goto LABEL_102;
    }
LABEL_101:
    Hasher._combine(_:)(0);
    if (v74)
    {
LABEL_97:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v84 = v74;
      _CFObject.hash(into:)();

      if (v76)
        goto LABEL_98;
      goto LABEL_103;
    }
LABEL_102:
    Hasher._combine(_:)(0);
    if (v76)
    {
LABEL_98:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v85 = v76;
      _CFObject.hash(into:)();

      goto LABEL_104;
    }
LABEL_103:
    Hasher._combine(_:)(0);
    v85 = 0;
LABEL_104:

    v90 = v147;
    if (v90)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      specialized Dictionary<>.hash(into:)((uint64_t)&v157, v90);
      swift_bridgeObjectRelease();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    v6 = v108;
    v4 = v109;
    v9 = v115;
    v91 = v148;
    if (v148)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      specialized Dictionary<>.hash(into:)((uint64_t)&v157, v91);
      swift_bridgeObjectRelease();
      if (!v149)
        goto LABEL_111;
    }
    else
    {
      Hasher._combine(_:)(0);
      if (!v149)
      {
LABEL_111:
        Hasher._combine(_:)(0);
        goto LABEL_112;
      }
    }
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
LABEL_112:
    v26 = v114;
    if (v150 == 2)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      v92 = v150 & 1;
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v92);
    }
    if (v151 == 2)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      v93 = v151 & 1;
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v93);
    }
    if (v152 == 2)
    {
      v94 = 0;
    }
    else
    {
      v94 = v152 & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v94);
    if (v153 == 2)
    {
      v95 = 0;
    }
    else
    {
      v96 = v153 & 1;
      Hasher._combine(_:)(1u);
      v95 = v96;
    }
    Hasher._combine(_:)(v95);
    outlined retain of LocalePreferences?((uint64_t)v155, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
    outlined retain of LocalePreferences?((uint64_t)v155, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
    swift_unknownObjectRelease();
    v11 = v116;
LABEL_125:
    Hasher._combine(_:)(v119);
    v97 = Hasher._finalize()();
    v98 = -1 << *(_BYTE *)(v6 + 32);
    v99 = v97 & ~v98;
    v100 = v99 >> 6;
    if (((-1 << v99) & ~*(_QWORD *)(v10 + 8 * (v99 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v99) & ~*(_QWORD *)(v10 + 8 * (v99 >> 6)))) | v99 & 0x7FFFFFFFFFFFFFC0;
      v14 = v117;
      v13 = v118;
      v15 = v120;
    }
    else
    {
      v101 = 0;
      v102 = (unint64_t)(63 - v98) >> 6;
      v14 = v117;
      v13 = v118;
      v15 = v120;
      do
      {
        if (++v100 == v102 && (v101 & 1) != 0)
        {
          __break(1u);
          goto LABEL_142;
        }
        v103 = v100 == v102;
        if (v100 == v102)
          v100 = 0;
        v101 |= v103;
        v104 = *(_QWORD *)(v10 + 8 * v100);
      }
      while (v104 == -1);
      v12 = __clz(__rbit64(~v104)) + (v100 << 6);
    }
    *(_QWORD *)(v10 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v16 = *(_QWORD *)(v6 + 48) + 56 * v12;
    *(_BYTE *)v16 = v14;
    *(_QWORD *)(v16 + 8) = v113;
    *(_QWORD *)(v16 + 16) = v121;
    *(_QWORD *)(v16 + 24) = v26;
    *(_QWORD *)(v16 + 32) = v122;
    *(_QWORD *)(v16 + 40) = v15;
    *(_BYTE *)(v16 + 48) = v119;
    *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v12) = v13;
    ++*(_QWORD *)(v6 + 16);
  }
  outlined retain of LocalePreferences?((uint64_t)v155, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v38 = v36 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v38 += 16;
    --v37;
  }
  while (v37);
  swift_bridgeObjectRelease();
  if (!v138)
    goto LABEL_40;
LABEL_47:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v139)
    goto LABEL_41;
LABEL_48:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v39 = v140;
  if (!v140)
    goto LABEL_42;
LABEL_49:
  Hasher._combine(_:)(1u);
  v42 = 0;
  v43 = 0;
  v44 = v39 + 64;
  v45 = 1 << *(_BYTE *)(v39 + 32);
  if (v45 < 64)
    v46 = ~(-1 << v45);
  else
    v46 = -1;
  v47 = v46 & *(_QWORD *)(v39 + 64);
  v48 = (unint64_t)(v45 + 63) >> 6;
  v127 = v158;
  v129 = v157;
  v123 = v160;
  v125 = v159;
  v49 = v161;
  while (2)
  {
    if (v47)
    {
      v50 = __clz(__rbit64(v47));
      v47 &= v47 - 1;
      v51 = v50 | (v43 << 6);
LABEL_54:
      v52 = *(unsigned __int8 *)(*(_QWORD *)(v39 + 48) + v51);
      v53 = *(_QWORD *)(*(_QWORD *)(v39 + 56) + 8 * v51);
      v131 = v129;
      v132 = v127;
      v133 = v125;
      v134 = v123;
      v135 = v49;
      Hasher._combine(_:)(v52);
      Hasher._combine(_:)(v53);
      v42 ^= Hasher._finalize()();
      continue;
    }
    break;
  }
  v54 = v43 + 1;
  if (__OFADD__(v43, 1))
  {
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
    goto LABEL_144;
  }
  if (v54 >= v48)
    goto LABEL_70;
  v55 = *(_QWORD *)(v44 + 8 * v54);
  ++v43;
  if (v55)
    goto LABEL_69;
  v43 = v54 + 1;
  if (v54 + 1 >= v48)
    goto LABEL_70;
  v55 = *(_QWORD *)(v44 + 8 * v43);
  if (v55)
    goto LABEL_69;
  v43 = v54 + 2;
  if (v54 + 2 >= v48)
    goto LABEL_70;
  v55 = *(_QWORD *)(v44 + 8 * v43);
  if (v55)
  {
LABEL_69:
    v47 = (v55 - 1) & v55;
    v51 = __clz(__rbit64(v55)) + (v43 << 6);
    goto LABEL_54;
  }
  v56 = v54 + 3;
  if (v56 < v48)
  {
    v55 = *(_QWORD *)(v44 + 8 * v56);
    if (!v55)
    {
      while (1)
      {
        v43 = v56 + 1;
        if (__OFADD__(v56, 1))
          break;
        if (v43 >= v48)
          goto LABEL_70;
        v55 = *(_QWORD *)(v44 + 8 * v43);
        ++v56;
        if (v55)
          goto LABEL_69;
      }
LABEL_144:
      __break(1u);
      goto LABEL_145;
    }
    v43 = v56;
    goto LABEL_69;
  }
LABEL_70:
  swift_bridgeObjectRetain();
  Hasher._combine(_:)(v42);
  swift_bridgeObjectRelease();
  v40 = v141;
  if (!v141)
    goto LABEL_43;
LABEL_71:
  Hasher._combine(_:)(1u);
  v57 = 0;
  v58 = 0;
  v59 = v40 + 64;
  v60 = 1 << *(_BYTE *)(v40 + 32);
  if (v60 < 64)
    v61 = ~(-1 << v60);
  else
    v61 = -1;
  v62 = v61 & *(_QWORD *)(v40 + 64);
  v63 = (unint64_t)(v60 + 63) >> 6;
  v128 = v158;
  v130 = v157;
  v124 = v160;
  v126 = v159;
  v64 = v161;
  while (2)
  {
    if (v62)
    {
      v65 = __clz(__rbit64(v62));
      v62 &= v62 - 1;
      v66 = v65 | (v58 << 6);
LABEL_76:
      v67 = *(unsigned __int8 *)(*(_QWORD *)(v40 + 48) + v66);
      v68 = *(_QWORD *)(*(_QWORD *)(v40 + 56) + 8 * v66);
      v131 = v130;
      v132 = v128;
      v133 = v126;
      v134 = v124;
      v135 = v64;
      Hasher._combine(_:)(v67);
      Hasher._combine(_:)(v68);
      v57 ^= Hasher._finalize()();
      continue;
    }
    break;
  }
  v69 = v58 + 1;
  if (__OFADD__(v58, 1))
    goto LABEL_143;
  if (v69 >= v63)
  {
LABEL_92:
    swift_bridgeObjectRetain();
    Hasher._combine(_:)(v57);
    swift_bridgeObjectRelease();
    goto LABEL_93;
  }
  v70 = *(_QWORD *)(v59 + 8 * v69);
  ++v58;
  if (v70)
    goto LABEL_91;
  v58 = v69 + 1;
  if (v69 + 1 >= v63)
    goto LABEL_92;
  v70 = *(_QWORD *)(v59 + 8 * v58);
  if (v70)
    goto LABEL_91;
  v58 = v69 + 2;
  if (v69 + 2 >= v63)
    goto LABEL_92;
  v70 = *(_QWORD *)(v59 + 8 * v58);
  if (v70)
  {
LABEL_91:
    v62 = (v70 - 1) & v70;
    v66 = __clz(__rbit64(v70)) + (v58 << 6);
    goto LABEL_76;
  }
  v71 = v69 + 3;
  if (v71 >= v63)
    goto LABEL_92;
  v70 = *(_QWORD *)(v59 + 8 * v71);
  if (v70)
  {
    v58 = v71;
    goto LABEL_91;
  }
  while (1)
  {
    v58 = v71 + 1;
    if (__OFADD__(v71, 1))
      break;
    if (v58 >= v63)
      goto LABEL_92;
    v70 = *(_QWORD *)(v59 + 8 * v58);
    ++v71;
    if (v70)
      goto LABEL_91;
  }
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
}

uint64_t dispatch thunk of JSONDecoder.dateDecodingStrategy.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void ___setupListenerConnection_block_invoke(uint64_t a1, id a2)
{
  Class Class;
  void *v5;
  NSObject *v6;
  int v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  Class = object_getClass(a2);
  if (Class == (Class)MEMORY[0x1E0C812E0])
  {
    service_connection_handler_make_connection(*(void **)(a1 + 32), (_xpc_connection_s *)a2);
  }
  else if (Class != (Class)MEMORY[0x1E0C81310])
  {
    v5 = (void *)MEMORY[0x186DAAD0C](a2);
    v6 = _NSXPCLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
    {
      v7 = 136446210;
      v8 = v5;
      _os_log_fault_impl(&dword_1817D9000, v6, OS_LOG_TYPE_FAULT, "NSXPCListener: received error or other non-connection type in handler for listener: %{public}s", (uint8_t *)&v7, 0xCu);
    }
    free(v5);
  }
}

_QWORD *destructiveInjectEnumTag for JSONEncoder.KeyEncodingStrategy(_QWORD *result, int a2)
{
  uint64_t v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else
  {
    if (!a2)
      return result;
    v2 = (a2 - 1);
  }
  *result = v2;
  return result;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Float()
{
  int *v0;
  int v1;
  id v2;
  double v3;

  v1 = *v0;
  v2 = objc_allocWithZone((Class)NSNumber);
  LODWORD(v3) = v1;
  return objc_msgSend(v2, sel_initWithFloat_, v3);
}

id _NSGetUnsignedCharValueWithMethod(uint64_t a1, uint64_t a2, objc_method *a3)
{
  id v5;
  IMP Implementation;
  SEL Name;

  v5 = objc_allocWithZone((Class)NSNumber);
  Implementation = method_getImplementation(a3);
  Name = method_getName(a3);
  return (id)objc_msgSend(v5, "initWithUnsignedChar:", ((uint64_t (*)(uint64_t, SEL))Implementation)(a1, Name));
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Int8(void *a1, _BYTE *a2)
{
  id v3;
  id v4;
  char v5;

  v3 = objc_msgSend(a1, sel_charValue);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithChar_, v3);
  v5 = static NSObject.== infix(_:_:)();

  if ((v5 & 1) != 0)
  {
    *a2 = (_BYTE)v3;
    a2[1] = 0;
  }
  return v5 & 1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance UInt8(void *a1, _BYTE *a2)
{
  id v3;
  id v4;
  char v5;

  v3 = objc_msgSend(a1, sel_unsignedCharValue);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedChar_, v3);
  v5 = static NSObject.== infix(_:_:)();

  if ((v5 & 1) != 0)
  {
    *a2 = (_BYTE)v3;
    a2[1] = 0;
  }
  return v5 & 1;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance UInt64(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Int64(a1, a2, (SEL *)&selRef_initWithUnsignedLongLong_);
}

uint64_t URLComponents.init(url:resolvingAgainstBaseURL:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t result;
  id v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD v15[8];
  _OWORD v16[2];
  _BYTE v17[160];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[2];

  v5 = *(void **)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  if ((a2 & 1) != 0)
  {
    *(_QWORD *)&v18 = *(_QWORD *)a1;
    *((_QWORD *)&v18 + 1) = v4;
    *(_QWORD *)&v19 = v6;
    v7 = URL.absoluteString.getter();
    v9 = v8;
  }
  else
  {
    swift_retain();
    v10 = v5;
    swift_retain();
    result = _foundation_swift_url_feature_enabled();
    if ((_DWORD)result)
    {
      if (!v4)
      {
        __break(1u);
        return result;
      }
      v7 = *(_QWORD *)(v4 + 16);
      v9 = *(_QWORD *)(v4 + 24);
      swift_bridgeObjectRetain();
      swift_release();
      swift_release();

    }
    else
    {
      v12 = objc_msgSend(v10, sel_relativeString);
      v7 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v9 = v13;
      swift_release();
      swift_release();

    }
  }
  specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(v7, v9, 1, (uint64_t)v17);
  outlined init with take of LocalePreferences?((uint64_t)v17, (uint64_t)&v18, &demangling cache variable for type metadata for URLComponents._URLComponents?);
  if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)&v18) == 1)
  {
    _s10Foundation13URLComponentsV01_B0VSgWOi0_((uint64_t)v15);
  }
  else
  {
    v15[6] = v24;
    v15[7] = v25;
    v16[0] = v26[0];
    *(_OWORD *)((char *)v16 + 10) = *(_OWORD *)((char *)v26 + 10);
    v15[2] = v20;
    v15[3] = v21;
    v15[4] = v22;
    v15[5] = v23;
    v15[0] = v18;
    v15[1] = v19;
    destructiveProjectEnumData for PredicateCodableError(v15, v14);
  }
  return outlined init with take of LocalePreferences?((uint64_t)v15, a3, &demangling cache variable for type metadata for URLComponents?);
}

double DateInterval.duration.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = v1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t StringProtocol.uppercased(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return StringProtocol.lowercased(with:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))ICU.CaseMap.uppercase(_:), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEA628]);
}

void protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance URLQueryItem(void *a1, uint64_t *a2)
{
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;

  outlined consume of Locale.LanguageCode?(*a2, a2[1]);
  v4 = objc_msgSend(a1, sel_name);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  v8 = objc_msgSend(a1, sel_value);
  if (v8)
  {
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v12 = v11;

  }
  else
  {
    v10 = 0;
    v12 = 0;
  }
  *a2 = (uint64_t)v5;
  a2[1] = v7;
  a2[2] = (uint64_t)v10;
  a2[3] = v12;
}

uint64_t protocol witness for SetAlgebra.formIntersection(_:) in conformance IndexSet(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4[2];
  uint64_t v5;

  v2 = *v1;
  v4[0] = *a1;
  v4[1] = v2;
  IndexSet.intersection(_:)(v4, (uint64_t)&v5);
  result = swift_release();
  *v1 = v5;
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance IndexSet@<Q0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  __n128 result;
  __int128 v6;
  _OWORD v7[2];
  uint64_t v8;
  uint64_t v9;

  v9 = *v1;
  v3 = v9;
  IndexSet.startIndex.getter((uint64_t *)v7);
  v4 = v8;
  result = (__n128)v7[0];
  v6 = v7[1];
  *(_QWORD *)a1 = v3;
  *(__n128 *)(a1 + 8) = result;
  *(_OWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 40) = v4;
  return result;
}

id IndexSet.contains(integersIn:)(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  void *v7;

  v2 = *(void **)(*(_QWORD *)v1 + 16);
  v3 = *(void **)(*(_QWORD *)a1 + 16);
  v4 = v2;
  objc_msgSend(v3, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSIndexSet);
  swift_dynamicCast();
  v5 = objc_msgSend(v2, sel_containsIndexes_, v7);

  return v5;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance IndexSet.RangeView()
{
  uint64_t *v0;

  return specialized Collection.count.getter(*v0, v0[1]);
}

uint64_t protocol witness for SetAlgebra.union(_:) in conformance IndexSet(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4();
  swift_release();
  return swift_release();
}

char *IndexSet.symmetricDifference(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  char *result;
  char v11;
  uint64_t v12;
  char *v13;
  BOOL v14;
  char *v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  uint64_t v19;
  char *v20;
  BOOL v21;
  char *v22;
  int v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char *v44;
  BOOL v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  BOOL v49;
  BOOL v50;
  char v51;
  uint64_t v52;
  char *v53;
  BOOL v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t *v58;
  id v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;

  v4 = *a1;
  v5 = *v2;
  v6 = objc_msgSend(objc_allocWithZone((Class)NSIndexSet), sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = v6;
  *(_BYTE *)(v7 + 24) = 0;
  v73 = v7;
  v8 = *(void **)(v5 + 16);
  swift_retain();
  swift_retain();
  v9 = objc_msgSend(v8, sel_rangeCount);
  v71 = v4;
  result = (char *)objc_msgSend(*(id *)(v4 + 16), sel_rangeCount);
  v72 = v9 == 0;
  v60 = result;
  if (!v9)
    goto LABEL_9;
  v11 = *(_BYTE *)(v5 + 24);
  result = (char *)objc_msgSend(*(id *)(v5 + 16), sel_rangeAtIndex_, 0);
  v69 = (uint64_t)result;
  v13 = &result[v12];
  v14 = __OFADD__(result, v12);
  if ((v11 & 1) != 0)
  {
    if (v14)
      goto LABEL_155;
    v15 = result;
    if ((uint64_t)v13 < (uint64_t)result)
    {
      __break(1u);
LABEL_9:
      v69 = 0;
      v13 = 0;
      v16 = 0;
      goto LABEL_14;
    }
  }
  else
  {
    if (v14)
      goto LABEL_156;
    v15 = result;
    if ((uint64_t)v13 < (uint64_t)result)
    {
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
      goto LABEL_159;
    }
  }
  if ((uint64_t)v13 < (uint64_t)v15)
    goto LABEL_153;
  v16 = 1;
  result = v60;
LABEL_14:
  v17 = result == 0;
  v58 = a2;
  v59 = v9;
  v62 = v16;
  v64 = (uint64_t)v13;
  if (!result)
  {
LABEL_22:
    v66 = 0;
    v22 = 0;
LABEL_27:
    v61 = 0;
    LOBYTE(v23) = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v67 = v22;
    v68 = (uint64_t)result;
    v63 = (uint64_t)result;
    v65 = v22;
    v70 = v17;
LABEL_31:
    v29 = v23;
    while (1)
    {
      if (v72)
      {
        v30 = v5;
        if ((v70 & 1) != 0)
        {
          swift_release();
          result = (char *)swift_release();
          *v58 = v73;
          return result;
        }
        if ((v26 & 1) != 0)
        {
          v31 = (uint64_t)v65;
          if (v65 == (char *)0x7FFFFFFFFFFFFFFFLL)
          {
            v32 = v66;
            v31 = 0x7FFFFFFFFFFFFFFFLL;
            if ((v25 & 1) == 0)
            {
              v34 = v69;
              goto LABEL_81;
            }
            v24 = 1;
            v33 = v62;
            if ((id)v62 == v59)
            {
              v34 = 0;
              v35 = 0;
              v36 = (uint64_t)v59;
              goto LABEL_110;
            }
            v17 = 0;
            v41 = 0x7FFFFFFFFFFFFFFFLL;
            v68 = v63;
            v46 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_95:
            v67 = (char *)v46;
            goto LABEL_96;
          }
          goto LABEL_52;
        }
        v31 = v63;
        if (v63 == 0x7FFFFFFFFFFFFFFFLL)
        {
          v17 = 0;
          if ((v25 & 1) == 0)
          {
            v70 = 0;
            v39 = 0;
            v38 = 1;
            v31 = 0x7FFFFFFFFFFFFFFFLL;
            v26 = 1;
            v67 = v65;
            v68 = 0x7FFFFFFFFFFFFFFFLL;
            v63 = 0x7FFFFFFFFFFFFFFFLL;
            v72 = 1;
            goto LABEL_128;
          }
          v31 = 0x7FFFFFFFFFFFFFFFLL;
          v33 = v62;
          if ((id)v62 == v59)
          {
            v38 = 1;
            v62 = (uint64_t)v59;
            v26 = 1;
            v68 = 0x7FFFFFFFFFFFFFFFLL;
            v69 = 0;
            v67 = v65;
            v63 = 0x7FFFFFFFFFFFFFFFLL;
            v64 = 0;
            v70 = 0;
            v72 = 1;
            v39 = 1;
            goto LABEL_128;
          }
          v41 = 0x7FFFFFFFFFFFFFFFLL;
          v24 = 0;
          v68 = 0x7FFFFFFFFFFFFFFFLL;
          v46 = (uint64_t)v65;
          goto LABEL_95;
        }
        v17 = 0;
        v70 = 0;
        v67 = v65;
        v68 = v63;
      }
      else
      {
        v30 = v5;
        if (v17)
        {
          if ((v27 & 1) != 0)
          {
            v31 = 0x7FFFFFFFFFFFFFFFLL;
            v33 = v62;
            if ((id)v62 != v59)
            {
              v17 = 1;
              v41 = v64;
              goto LABEL_96;
            }
            v34 = 0;
            v72 = 1;
            v37 = 0;
            v36 = (uint64_t)v59;
            v17 = 1;
            if (v64 == 0x7FFFFFFFFFFFFFFFLL)
              goto LABEL_108;
            v31 = v64;
            v38 = v24;
            v62 = (uint64_t)v59;
            v69 = 0;
            v64 = 0;
            v39 = 1;
            goto LABEL_128;
          }
          v31 = v69;
          if (v69 != 0x7FFFFFFFFFFFFFFFLL)
          {
            v72 = 0;
            v39 = 0;
            v17 = 1;
            v38 = v24;
            goto LABEL_128;
          }
          if ((v24 & 1) == 0)
          {
            v72 = 0;
            v39 = 0;
            v38 = 1;
            v31 = 0x7FFFFFFFFFFFFFFFLL;
            v26 = 1;
            v17 = 1;
            v69 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_128;
          }
          v38 = 0;
          v31 = 0x7FFFFFFFFFFFFFFFLL;
          v32 = v66;
          if ((char *)v66 == v60)
          {
            v67 = 0;
            v68 = 0;
            v63 = 0;
            v65 = 0;
            v66 = (uint64_t)v60;
            v17 = 1;
            v26 = 0;
            v70 = 1;
            v69 = 0x7FFFFFFFFFFFFFFFLL;
            v72 = 0;
            v39 = 0;
            goto LABEL_128;
          }
          v34 = 0x7FFFFFFFFFFFFFFFLL;
          v72 = 0;
          goto LABEL_115;
        }
        v40 = v64;
        if ((v27 & 1) == 0)
          v40 = v69;
        if ((v26 & 1) != 0)
          v31 = (uint64_t)v67;
        else
          v31 = v68;
        if (v31 >= v40)
        {
          if ((v27 & 1) != 0)
          {
            v17 = 0;
            v33 = v62;
            if ((id)v62 == v59)
            {
              v34 = 0;
              v37 = 0;
              v72 = 1;
              v36 = (uint64_t)v59;
              v24 = v26;
              v41 = v64;
              if (v64 != v31)
                goto LABEL_65;
LABEL_108:
              if ((v24 & 1) == 0)
              {
                v69 = v34;
                v62 = v36;
                v38 = 1;
                v26 = 1;
                v64 = (uint64_t)v37;
                v39 = 1;
                goto LABEL_128;
              }
              v35 = v37;
              LOBYTE(v24) = v72;
LABEL_110:
              v17 = 1;
              v62 = v36;
              if ((char *)v66 == v60)
              {
                v68 = 0;
                v69 = v34;
                v63 = 0;
                v64 = (uint64_t)v35;
                v38 = 0;
                v26 = 0;
                v66 = (uint64_t)v60;
                v67 = 0;
                v65 = 0;
                v70 = 1;
                v72 = v24;
                v39 = 1;
                goto LABEL_128;
              }
              v72 = v24;
              v39 = 1;
              v32 = v66;
LABEL_116:
              v51 = *(_BYTE *)(v71 + 24);
              result = (char *)objc_msgSend(*(id *)(v71 + 16), sel_rangeAtIndex_, v32, v58);
              v53 = &result[v52];
              v54 = __OFADD__(result, v52);
              if ((v51 & 1) != 0)
              {
                if (v54)
                  goto LABEL_145;
                if ((uint64_t)v53 < (uint64_t)result)
                  goto LABEL_146;
              }
              else
              {
                if (v54)
                  goto LABEL_147;
                if ((uint64_t)v53 < (uint64_t)result)
                  goto LABEL_148;
              }
              if ((uint64_t)v53 < (uint64_t)result)
                goto LABEL_137;
              v50 = __OFADD__(v32, 1);
              v55 = v32 + 1;
              if (v50)
                goto LABEL_138;
              v68 = (uint64_t)result;
              v69 = v34;
              v66 = v55;
              v67 = &result[v52];
              v63 = (uint64_t)result;
              v64 = (uint64_t)v35;
              v38 = 0;
              v26 = 0;
              v17 = 0;
              v70 = 0;
              v65 = &result[v52];
              goto LABEL_128;
            }
            v24 = v26;
            v41 = v64;
LABEL_96:
            v47 = *(_BYTE *)(v30 + 24);
            result = (char *)objc_msgSend(*(id *)(v30 + 16), sel_rangeAtIndex_, v33, v58);
            v34 = (uint64_t)result;
            v37 = &result[v48];
            v49 = __OFADD__(result, v48);
            if ((v47 & 1) != 0)
            {
              if (v49)
                goto LABEL_141;
              if ((uint64_t)v37 < (uint64_t)result)
                goto LABEL_142;
            }
            else
            {
              if (v49)
                goto LABEL_143;
              if ((uint64_t)v37 < (uint64_t)result)
                goto LABEL_144;
            }
            if ((uint64_t)v37 < (uint64_t)result)
              goto LABEL_135;
            v50 = __OFADD__(v33, 1);
            v36 = v33 + 1;
            if (v50)
              goto LABEL_136;
            v72 = 0;
            if (v41 == v31)
              goto LABEL_108;
LABEL_65:
            v69 = v34;
            v62 = v36;
            v39 = 1;
            v31 = v41;
            v38 = v24;
            v64 = (uint64_t)v37;
LABEL_128:
            v25 = v39 ^ 1;
            v24 = v38;
            v27 = v39 ^ 1;
            goto LABEL_129;
          }
          v34 = v69;
          if (v69 != v31)
          {
            v17 = 0;
            v72 = 0;
            v39 = 0;
            v31 = v69;
            v38 = v26;
            goto LABEL_128;
          }
          v31 = v69;
          v32 = v66;
          if ((v26 & 1) == 0)
          {
            v17 = 0;
            v72 = 0;
            v39 = 0;
            v38 = 1;
            v31 = v69;
            v26 = 1;
            goto LABEL_128;
          }
LABEL_81:
          v38 = 0;
          if ((char *)v32 == v60)
          {
            v67 = 0;
            v68 = 0;
            v63 = 0;
            v65 = 0;
            v66 = (uint64_t)v60;
            v17 = 1;
            v26 = 0;
            v70 = 1;
            v39 = 0;
            goto LABEL_128;
          }
LABEL_115:
          v39 = 0;
          v35 = (char *)v64;
          goto LABEL_116;
        }
        if ((v26 & 1) != 0)
        {
          v31 = (uint64_t)v67;
          v25 = v27;
LABEL_52:
          if ((char *)v66 == v60)
          {
            v67 = 0;
            v68 = 0;
            v63 = 0;
            v65 = 0;
            v66 = (uint64_t)v60;
            v17 = 1;
            v70 = 1;
          }
          else
          {
            v42 = *(_BYTE *)(v71 + 24);
            result = (char *)objc_msgSend(*(id *)(v71 + 16), sel_rangeAtIndex_, v66);
            v44 = &result[v43];
            v45 = __OFADD__(result, v43);
            if ((v42 & 1) != 0)
            {
              if (v45)
                goto LABEL_149;
              if ((uint64_t)v44 < (uint64_t)result)
                goto LABEL_150;
            }
            else
            {
              if (v45)
                goto LABEL_151;
              if ((uint64_t)v44 < (uint64_t)result)
                goto LABEL_152;
            }
            if ((uint64_t)v44 < (uint64_t)result)
              goto LABEL_139;
            if (__OFADD__(v66, 1))
              goto LABEL_140;
            ++v66;
            v67 = &result[v43];
            v17 = 0;
            v70 = 0;
            v68 = (uint64_t)result;
            v63 = (uint64_t)result;
            v65 = &result[v43];
          }
          goto LABEL_89;
        }
        v17 = 0;
        v31 = v68;
        v25 = v27;
      }
LABEL_89:
      v24 = v26 ^ 1;
      v26 = v24;
LABEL_129:
      v5 = v30;
      v56 = objc_msgSend(*(id *)(v30 + 16), sel_containsIndex_, v31, v58);
      v57 = objc_msgSend(*(id *)(v71 + 16), sel_containsIndex_, v31);
      v23 = v56 ^ v57;
      if ((v29 & 1) == 0)
      {
        v28 = v61;
        if (v23)
          v28 = v31;
        v61 = v28;
        goto LABEL_31;
      }
      v29 = v56 ^ v57;
      if ((v23 & 1) == 0)
      {
        result = (char *)v61;
        if (v31 >= v61)
        {
          IndexSet.insert(integersIn:)(v61, v31);
          goto LABEL_31;
        }
        __break(1u);
LABEL_135:
        __break(1u);
LABEL_136:
        __break(1u);
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
LABEL_141:
        __break(1u);
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        __break(1u);
LABEL_145:
        __break(1u);
LABEL_146:
        __break(1u);
LABEL_147:
        __break(1u);
LABEL_148:
        __break(1u);
LABEL_149:
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
LABEL_153:
        __break(1u);
LABEL_154:
        __break(1u);
LABEL_155:
        __break(1u);
LABEL_156:
        __break(1u);
        goto LABEL_157;
      }
    }
  }
  v18 = *(_BYTE *)(v4 + 24);
  result = (char *)objc_msgSend(*(id *)(v4 + 16), sel_rangeAtIndex_, 0);
  v20 = &result[v19];
  v21 = __OFADD__(result, v19);
  if ((v18 & 1) != 0)
  {
    if (!v21)
    {
      if ((uint64_t)v20 < (uint64_t)result)
      {
        __break(1u);
        goto LABEL_22;
      }
LABEL_25:
      if ((uint64_t)v20 < (uint64_t)result)
        goto LABEL_154;
      v66 = 1;
      v22 = &result[v19];
      goto LABEL_27;
    }
    goto LABEL_158;
  }
  if (v21)
  {
LABEL_159:
    __break(1u);
    goto LABEL_160;
  }
  if ((uint64_t)v20 >= (uint64_t)result)
    goto LABEL_25;
LABEL_160:
  __break(1u);
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance IndexSet.RangeView(char **a1, uint64_t *a2))(_QWORD, _QWORD)
{
  char *v3;

  *a1 = IndexSet.RangeView.subscript.getter(*a2);
  a1[1] = v3;
  return destructiveProjectEnumData for PredicateCodableError;
}

char *IndexSet.RangeView.subscript.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  char *result;
  uint64_t v5;
  BOOL v6;
  char *v7;
  char v8;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_BYTE *)(v2 + 24);
  result = (char *)objc_msgSend(*(id *)(v2 + 16), sel_rangeAtIndex_, a1);
  v6 = __OFADD__(result, v5);
  v7 = &result[v5];
  v8 = v6;
  if ((v3 & 1) != 0)
  {
    if ((v8 & 1) != 0)
    {
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
    if ((uint64_t)v7 >= (uint64_t)result)
    {
LABEL_10:
      if ((uint64_t)v7 >= (uint64_t)result)
        return result;
      __break(1u);
      goto LABEL_12;
    }
    __break(1u);
  }
  if ((v8 & 1) != 0)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if ((uint64_t)v7 >= (uint64_t)result)
    goto LABEL_10;
LABEL_14:
  __break(1u);
  return result;
}

id IndexSet.rangeView.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  void *v4;
  id result;

  v3 = *v1;
  v4 = *(void **)(v3 + 16);
  swift_retain();
  result = objc_msgSend(v4, sel_rangeCount);
  *a1 = 0;
  a1[1] = result;
  a1[2] = v3;
  return result;
}

__n128 IndexSet.makeIterator()@<Q0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  __n128 result;
  __int128 v6;
  _OWORD v7[2];
  uint64_t v8;
  uint64_t v9;

  v9 = *v1;
  v3 = v9;
  swift_retain();
  IndexSet.startIndex.getter((uint64_t *)v7);
  v4 = v8;
  result = (__n128)v7[0];
  v6 = v7[1];
  *(_QWORD *)a1 = v3;
  *(__n128 *)(a1 + 8) = result;
  *(_OWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 40) = v4;
  return result;
}

char *IndexSet.union(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  char *result;
  char *v15;
  uint64_t v16;
  id v17;
  char v18;
  char *v19;
  uint64_t v20;
  char *v21;
  BOOL v22;
  id v23;
  char isUniquelyReferenced_nonNull_native;
  void *v26;

  v3 = *a1;
  v4 = *v2;
  v5 = *(void **)(v4 + 16);
  swift_retain();
  v6 = specialized Collection.count.getter(0, (uint64_t)objc_msgSend(v5, sel_rangeCount));
  swift_release();
  v7 = *(void **)(v3 + 16);
  swift_retain();
  v8 = specialized Collection.count.getter(0, (uint64_t)objc_msgSend(v7, sel_rangeCount));
  swift_release();
  if (v8 >= v6)
    v9 = v3;
  else
    v9 = v4;
  if (v8 < v6)
    v4 = v3;
  swift_retain();
  v10 = *(void **)(v4 + 16);
  swift_retain();
  v11 = objc_msgSend(v10, sel_rangeCount);
  if (!v11)
  {
    result = (char *)swift_release();
LABEL_33:
    *a2 = v9;
    return result;
  }
  v12 = v11;
  swift_retain();
  v13 = 0;
  while (1)
  {
    v18 = *(_BYTE *)(v4 + 24);
    result = (char *)objc_msgSend(*(id *)(v4 + 16), sel_rangeAtIndex_, v13);
    v19 = result;
    v21 = &result[v20];
    v22 = __OFADD__(result, v20);
    if ((v18 & 1) != 0)
    {
      if (v22)
        goto LABEL_37;
      if ((uint64_t)v21 < (uint64_t)result)
        goto LABEL_38;
    }
    else
    {
      if (v22)
        goto LABEL_39;
      if ((uint64_t)v21 < (uint64_t)result)
        goto LABEL_40;
    }
    if ((uint64_t)v21 < (uint64_t)result)
      break;
    v23 = (id)(v13 + 1);
    if (__OFADD__(v13, 1))
      goto LABEL_35;
    if ((*(_BYTE *)(v9 + 24) & 1) == 0)
    {
      result = *(char **)(v9 + 16);
LABEL_9:
      v15 = result;
      objc_msgSend(v15, sel_mutableCopy);
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableIndexSet);
      swift_dynamicCast();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
      v16 = swift_allocObject();
      *(_QWORD *)(v16 + 16) = v26;
      *(_BYTE *)(v16 + 24) = 1;
      v17 = v26;
      result = (char *)swift_release();
      if (__OFSUB__(v21, v19))
        goto LABEL_36;
LABEL_10:
      objc_msgSend(v17, sel_addIndexesInRange_, v19);

      v9 = v16;
      goto LABEL_11;
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    result = *(char **)(v9 + 16);
    if ((*(_BYTE *)(v9 + 24) & 1) == 0)
      goto LABEL_9;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v15 = result;
      objc_msgSend(v15, sel_mutableCopy);
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableIndexSet);
      swift_dynamicCast();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
      v16 = swift_allocObject();
      *(_QWORD *)(v16 + 16) = v26;
      *(_BYTE *)(v16 + 24) = 1;
      v17 = v26;
      swift_release();
      if (__OFSUB__(v21, v19))
      {
        __break(1u);
LABEL_31:
        result = (char *)swift_release_n();
        goto LABEL_33;
      }
      goto LABEL_10;
    }
    if (__OFSUB__(v21, v19))
      goto LABEL_41;
    objc_msgSend(result, sel_addIndexesInRange_, v19, v21 - v19);
LABEL_11:
    ++v13;
    if (v23 == v12)
      goto LABEL_31;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t IndexSet.startIndex.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  v3 = *v1;
  result = (uint64_t)objc_msgSend(*(id *)(*v1 + 16), sel_rangeCount);
  if (result < 1)
    goto LABEL_9;
  v5 = *(_BYTE *)(v3 + 24);
  result = (uint64_t)objc_msgSend(*(id *)(v3 + 16), sel_rangeAtIndex_, 0);
  v6 = result;
  v8 = result + v7;
  v9 = __OFADD__(result, v7);
  if ((v5 & 1) != 0)
  {
    if (!v9)
    {
      if (v8 < result)
      {
        __break(1u);
LABEL_9:
        *a1 = 0;
        a1[1] = 0;
        a1[2] = 0;
        a1[3] = -1;
LABEL_13:
        a1[4] = result;
        return result;
      }
LABEL_12:
      result = (uint64_t)objc_msgSend(*(id *)(v3 + 16), sel_rangeCount);
      *a1 = v6;
      a1[1] = v6;
      a1[2] = v8;
      a1[3] = 0;
      goto LABEL_13;
    }
    __break(1u);
    goto LABEL_15;
  }
  if (v9)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v8 >= result)
    goto LABEL_12;
LABEL_16:
  __break(1u);
  return result;
}

uint64_t IndexSet.endIndex.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  char v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  void *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;

  v3 = *v1;
  v4 = *(_BYTE *)(*v1 + 24);
  result = (uint64_t)objc_msgSend(*(id *)(*v1 + 16), sel_rangeCount);
  v6 = result;
  v7 = result - 1;
  v8 = __OFSUB__(result, 1);
  if ((v4 & 1) != 0)
  {
    if (!v8)
    {
      v9 = result - 1;
      if (result < 1)
        goto LABEL_18;
      goto LABEL_11;
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v8)
    goto LABEL_23;
  if (result <= 0)
    goto LABEL_18;
  v9 = result - 1;
LABEL_11:
  v10 = *(void **)(v3 + 16);
  v11 = *(_BYTE *)(v3 + 24);
  result = (uint64_t)objc_msgSend(v10, sel_rangeAtIndex_, v9);
  v13 = result + v12;
  v14 = __OFADD__(result, v12);
  if ((v11 & 1) != 0)
  {
    if (!v14)
    {
      if (v13 >= result)
      {
LABEL_21:
        *a1 = v13;
        a1[1] = result;
        a1[2] = v13;
        a1[3] = v7;
        a1[4] = v6;
        return result;
      }
      __break(1u);
LABEL_18:
      v13 = 0;
      result = 0;
      goto LABEL_21;
    }
    goto LABEL_24;
  }
  if (v14)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v13 >= result)
    goto LABEL_21;
LABEL_26:
  __break(1u);
  return result;
}

uint64_t specialized Collection.count.getter(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v4 = a2 - a1;
  v3 = a2 < a1;
  if (a2 <= a1)
  {
    result = 0;
    if (!v3)
      return result;
    v7 = ~a2 + a1;
    v8 = a1 ^ 0x8000000000000000;
    if (v7 >= v8)
      v7 = v8;
    v9 = 0x8000000000000000;
    if (v7 < 0x8000000000000000)
      v9 = v7;
    while ((v7 & 0x8000000000000000) == 0)
    {
      if (v8 == v9)
        goto LABEL_18;
      if (v4 == --result)
        return result;
    }
  }
  else
  {
    result = 0;
    v6 = ~a1 + a2;
    while (v6 <= 0x7FFFFFFFFFFFFFFELL)
    {
      if (v4 == ++result)
        return result;
    }
    __break(1u);
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t IndexSet.init(integersIn:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  id v4;

  if (__OFSUB__(a2, result))
  {
    __break(1u);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)NSIndexSet), sel_initWithIndexesInRange_, result, a2 - result);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
    *(_BYTE *)(result + 24) = 0;
    *a3 = result;
  }
  return result;
}

Swift::Void __swiftcall IndexSet.removeAll()()
{
  uint64_t v0;
  char isUniquelyReferenced_nonNull_native;
  void *v2;
  id v3;
  uint64_t v4;
  id v5;
  void *v6;

  if (*(_BYTE *)(*(_QWORD *)v0 + 24) == 1)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v2 = *(void **)(*(_QWORD *)v0 + 16);
    if ((*(_BYTE *)(*(_QWORD *)v0 + 24) & 1) != 0 && (isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      objc_msgSend(v2, sel_removeAllIndexes);
      return;
    }
  }
  else
  {
    v2 = *(void **)(*(_QWORD *)v0 + 16);
  }
  v3 = v2;
  objc_msgSend(v3, sel_mutableCopy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableIndexSet);
  swift_dynamicCast();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v6;
  *(_BYTE *)(v4 + 24) = 1;
  *(_QWORD *)v0 = v4;
  v5 = v6;
  swift_release();
  objc_msgSend(v5, sel_removeAllIndexes);

}

uint64_t IndexSet.formUnion(_:)(_QWORD *a1, void (*a2)(uint64_t *__return_ptr, _QWORD *))
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD v5[2];
  uint64_t v6;

  v3 = *v2;
  v5[0] = *a1;
  v5[1] = v3;
  a2(&v6, v5);
  result = swift_release();
  *v2 = v6;
  return result;
}

uint64_t IndexSet.intersection(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  char *v8;
  char v9;
  char *v10;
  char v11;
  char *v12;
  char *v13;
  char v14;
  char v15;
  char *v16;
  char v17;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  id v20;
  void *v21;
  id v22;
  char v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27[4];
  void *v28;
  _BYTE v29[16];

  v4 = *a1;
  v5 = *v2;
  v6 = objc_msgSend(objc_allocWithZone((Class)NSIndexSet), sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = v6;
  *(_BYTE *)(v7 + 24) = 0;
  v27[0] = v5;
  v28 = (void *)v4;
  swift_retain();
  swift_retain();
  IndexSetBoundaryIterator.init(_:_:)(v27, (uint64_t *)&v28, (uint64_t)v29);
  v8 = IndexSetBoundaryIterator.next()();
  if ((v9 & 1) != 0)
  {
LABEL_30:
    swift_release();
    result = swift_release();
    *(_QWORD *)a2 = v7;
    return result;
  }
  v10 = v8;
  v11 = 0;
  v12 = 0;
  v25 = MEMORY[0x1E0DEE9B8] + 8;
  v26 = a2;
  while (1)
  {
    if ((v11 & 1) == 0)
    {
      if (!objc_msgSend(*(id *)(v5 + 16), sel_containsIndex_, v10)
        || (objc_msgSend(*(id *)(v4 + 16), sel_containsIndex_, v10) & 1) == 0)
      {
        v13 = IndexSetBoundaryIterator.next()();
        if ((v14 & 1) != 0)
          goto LABEL_30;
        v10 = v13;
        while (!objc_msgSend(*(id *)(v5 + 16), sel_containsIndex_, v10, v25)
             || (objc_msgSend(*(id *)(v4 + 16), sel_containsIndex_, v10) & 1) == 0)
        {
          v10 = IndexSetBoundaryIterator.next()();
          if ((v15 & 1) != 0)
            goto LABEL_30;
        }
      }
      v16 = IndexSetBoundaryIterator.next()();
      if ((v17 & 1) != 0)
        goto LABEL_30;
      v12 = v10;
      v10 = v16;
    }
    result = (uint64_t)objc_msgSend(*(id *)(v5 + 16), sel_containsIndex_, v10, v25);
    if ((_DWORD)result)
    {
      result = (uint64_t)objc_msgSend(*(id *)(v4 + 16), sel_containsIndex_, v10);
      if ((result & 1) != 0)
      {
        v11 = 1;
        goto LABEL_25;
      }
    }
    if ((uint64_t)v10 < (uint64_t)v12)
      break;
    if ((*(_BYTE *)(v7 + 24) & 1) == 0)
    {
      result = *(_QWORD *)(v7 + 16);
LABEL_23:
      v20 = (id)result;
      objc_msgSend(v20, sel_mutableCopy);
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableIndexSet);
      swift_dynamicCast();
      v21 = v28;
      a2 = swift_allocObject();
      *(_QWORD *)(a2 + 16) = v21;
      *(_BYTE *)(a2 + 24) = 1;
      v22 = v21;
      result = swift_release();
      if (__OFSUB__(v10, v12))
        goto LABEL_32;
LABEL_24:
      objc_msgSend(v22, sel_addIndexesInRange_, v12);

      v11 = 0;
      v7 = a2;
      a2 = v26;
      goto LABEL_25;
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    result = *(_QWORD *)(v7 + 16);
    if ((*(_BYTE *)(v7 + 24) & 1) == 0)
      goto LABEL_23;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v20 = (id)result;
      objc_msgSend(v20, sel_mutableCopy);
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableIndexSet);
      swift_dynamicCast();
      v24 = v28;
      a2 = swift_allocObject();
      *(_QWORD *)(a2 + 16) = v24;
      *(_BYTE *)(a2 + 24) = 1;
      v22 = v24;
      swift_release();
      if (__OFSUB__(v10, v12))
      {
        __break(1u);
        goto LABEL_30;
      }
      goto LABEL_24;
    }
    if (__OFSUB__(v10, v12))
      goto LABEL_33;
    objc_msgSend((id)result, sel_addIndexesInRange_, v12, v10 - v12);
    v11 = 0;
LABEL_25:
    v10 = IndexSetBoundaryIterator.next()();
    if ((v23 & 1) != 0)
      goto LABEL_30;
  }
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t specialized SetAlgebra.init<A>(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  char *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_native;
  void *v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  void *v18;
  uint64_t v19;
  char v20;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v4 = (char *)&v15 - v3;
  v5 = objc_msgSend(objc_allocWithZone((Class)NSIndexSet), sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v5;
  *(_BYTE *)(v6 + 24) = 0;
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  v17 = a1;
  if ((v20 & 1) == 0)
  {
    v15 = MEMORY[0x1E0DEE9B8] + 8;
    while (1)
    {
      v9 = v19;
      if ((*(_BYTE *)(v6 + 24) & 1) == 0)
        break;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v11 = *(void **)(v6 + 16);
      if ((*(_BYTE *)(v6 + 24) & 1) != 0)
      {
        if (!isUniquelyReferenced_nonNull_native)
        {
          v12 = v11;
          objc_msgSend(v12, sel_mutableCopy);
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
          type metadata accessor for NSMutableIndexSet();
          goto LABEL_13;
        }
        objc_msgSend(v11, sel_addIndex_, v9);
        dispatch thunk of IteratorProtocol.next()();
        if ((v20 & 1) != 0)
          goto LABEL_2;
      }
      else
      {
LABEL_11:
        v12 = v11;
        objc_msgSend(v12, sel_mutableCopy, v15);
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
        type metadata accessor for NSMutableIndexSet();
LABEL_13:
        swift_dynamicCast();
        v13 = v18;
        v7 = swift_allocObject();
        *(_QWORD *)(v7 + 16) = v13;
        *(_BYTE *)(v7 + 24) = 1;
        v14 = v13;
        swift_release();
        objc_msgSend(v14, sel_addIndex_, v9);

        dispatch thunk of IteratorProtocol.next()();
        v6 = v7;
        if (v20 == 1)
          goto LABEL_3;
      }
    }
    v11 = *(void **)(v6 + 16);
    goto LABEL_11;
  }
LABEL_2:
  v7 = v6;
LABEL_3:
  result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v4, AssociatedTypeWitness);
  *v17 = v7;
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v5 = (char *)&v8 - v4;
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  if ((v9 & 1) == 0)
  {
    v6 = 0xFFFFLL;
    while (1)
    {
      if ((v8 & v6) != 0)
      {
        if ((v8 & v6) != v8)
          goto LABEL_9;
LABEL_6:
        dispatch thunk of IteratorProtocol.next()();
        if (v9 == 1)
          goto LABEL_3;
      }
      else
      {
        if (v8 == 0xFFFF)
          goto LABEL_6;
LABEL_9:
        v6 |= v8;
        dispatch thunk of IteratorProtocol.next()();
        if ((v9 & 1) != 0)
          goto LABEL_3;
      }
    }
  }
  v6 = 0xFFFFLL;
LABEL_3:
  result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, AssociatedTypeWitness);
  *a1 = v6;
  return result;
}

uint64_t protocol witness for SetAlgebra.init() in conformance IndexSet@<X0>(uint64_t *a1@<X8>)
{
  id v2;
  uint64_t result;

  v2 = objc_msgSend(objc_allocWithZone((Class)NSIndexSet), sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v2;
  *(_BYTE *)(result + 24) = 0;
  *a1 = result;
  return result;
}

uint64_t IndexSet.init()@<X0>(uint64_t *a1@<X8>)
{
  id v2;
  uint64_t result;

  v2 = objc_msgSend(objc_allocWithZone((Class)NSIndexSet), sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v2;
  *(_BYTE *)(result + 24) = 0;
  *a1 = result;
  return result;
}

unint64_t type metadata accessor for NSMutableIndexSet()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSMutableIndexSet;
  if (!lazy cache variable for type metadata for NSMutableIndexSet)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSMutableIndexSet);
  }
  return result;
}

char *IndexSetBoundaryIterator.init(_:_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  char v8;
  char *result;
  char *v10;
  uint64_t v11;
  char *v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  BOOL v19;

  v4 = *a1;
  v5 = *a2;
  v6 = objc_msgSend(*(id *)(*a1 + 16), sel_rangeCount);
  v7 = objc_msgSend(*(id *)(v5 + 16), sel_rangeCount);
  if (!v6)
  {
LABEL_9:
    v10 = 0;
    v12 = 0;
    v14 = 0;
    if (!v7)
    {
LABEL_10:
      result = 0;
      v15 = 0;
      v16 = 0;
LABEL_26:
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = v6;
      *(_QWORD *)(a3 + 16) = v4;
      *(_QWORD *)(a3 + 24) = v14;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = v7;
      *(_QWORD *)(a3 + 48) = v5;
      *(_QWORD *)(a3 + 56) = v16;
      *(_QWORD *)(a3 + 64) = v10;
      *(_QWORD *)(a3 + 72) = v12;
      *(_BYTE *)(a3 + 80) = v6 == 0;
      *(_QWORD *)(a3 + 88) = result;
      *(_QWORD *)(a3 + 96) = v15;
      *(_BYTE *)(a3 + 104) = v7 == 0;
      *(_WORD *)(a3 + 105) = 0;
      return result;
    }
    goto LABEL_15;
  }
  v8 = *(_BYTE *)(v4 + 24);
  result = (char *)objc_msgSend(*(id *)(v4 + 16), sel_rangeAtIndex_, 0);
  v10 = result;
  v12 = &result[v11];
  v13 = __OFADD__(result, v11);
  if ((v8 & 1) != 0)
  {
    if (v13)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    if ((uint64_t)v12 < (uint64_t)result)
    {
      __break(1u);
      goto LABEL_9;
    }
  }
  else
  {
    if (v13)
    {
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    if ((uint64_t)v12 < (uint64_t)result)
    {
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
  }
  if ((uint64_t)v12 < (uint64_t)result)
  {
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v14 = 1;
  if (!v7)
    goto LABEL_10;
LABEL_15:
  v17 = *(_BYTE *)(v5 + 24);
  result = (char *)objc_msgSend(*(id *)(v5 + 16), sel_rangeAtIndex_, 0);
  v15 = &result[v18];
  v19 = __OFADD__(result, v18);
  if ((v17 & 1) != 0)
  {
    if (v19)
    {
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    if ((uint64_t)v15 >= (uint64_t)result)
      goto LABEL_24;
    __break(1u);
  }
  if (v19)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if ((uint64_t)v15 >= (uint64_t)result)
  {
LABEL_24:
    if ((uint64_t)v15 >= (uint64_t)result)
    {
      v16 = 1;
      goto LABEL_26;
    }
    goto LABEL_28;
  }
LABEL_34:
  __break(1u);
  return result;
}

void static IndexSet._unconditionallyBridgeFromObjectiveC(_:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;

  if (a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
    v4 = swift_allocObject();
    v5 = a1;
    objc_msgSend(v5, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSIndexSet);
    swift_dynamicCast();
    *(_QWORD *)(v4 + 16) = v7;
    *(_BYTE *)(v4 + 24) = 0;

  }
  else
  {
    v6 = objc_msgSend(objc_allocWithZone((Class)NSIndexSet), sel_init);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = v6;
    *(_BYTE *)(v4 + 24) = 0;
  }
  *a2 = v4;
}

uint64_t protocol witness for SetAlgebra.insert(_:) in conformance IndexSet(Swift::Int *a1, Swift::Int *a2)
{
  *a1 = IndexSet.insert(_:)(*a2).memberAfterInsert;
  return 1;
}

void __swiftcall IndexSet._bridgeToObjectiveC()(NSIndexSet *__return_ptr retstr)
{
  uint64_t v1;

  objc_msgSend(*(id *)(*(_QWORD *)v1 + 16), sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSIndexSet);
  swift_dynamicCast();
}

void IndexSet.insert(integersIn:)(uint64_t a1, uint64_t a2, SEL *a3)
{
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;

  if (*(_BYTE *)(*(_QWORD *)v3 + 24) != 1)
  {
    v8 = *(void **)(*(_QWORD *)v3 + 16);
LABEL_7:
    v9 = v8;
    objc_msgSend(v9, sel_mutableCopy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableIndexSet);
    swift_dynamicCast();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
    v10 = swift_allocObject();
    *(_QWORD *)(v10 + 16) = v13;
    *(_BYTE *)(v10 + 24) = 1;
    *(_QWORD *)v3 = v10;
    v11 = v13;
    swift_release();
    if (!__OFSUB__(a2, a1))
      goto LABEL_8;
    goto LABEL_12;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = *(void **)(*(_QWORD *)v3 + 16);
  if ((*(_BYTE *)(*(_QWORD *)v3 + 24) & 1) == 0)
    goto LABEL_7;
  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    if (!__OFSUB__(a2, a1))
    {
      objc_msgSend(v8, *a3, a1, a2 - a1);
      return;
    }
    goto LABEL_13;
  }
  v9 = v8;
  objc_msgSend(v9, sel_mutableCopy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableIndexSet);
  swift_dynamicCast();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v13;
  *(_BYTE *)(v12 + 24) = 1;
  *(_QWORD *)v3 = v12;
  v11 = v13;
  swift_release();
  if (!__OFSUB__(a2, a1))
  {
LABEL_8:
    objc_msgSend(v11, *a3, a1);

    return;
  }
  __break(1u);
LABEL_12:
  __break(1u);
LABEL_13:
  __break(1u);
}

Swift::tuple_inserted_Bool_memberAfterInsert_Int __swiftcall IndexSet.insert(_:)(Swift::Int a1)
{
  uint64_t v1;
  char isUniquelyReferenced_nonNull_native;
  void *v4;
  id v5;
  uint64_t v6;
  id v7;
  Swift::Bool v8;
  Swift::Int v9;
  void *v10;
  Swift::tuple_inserted_Bool_memberAfterInsert_Int result;

  if (*(_BYTE *)(*(_QWORD *)v1 + 24) != 1)
  {
    v4 = *(void **)(*(_QWORD *)v1 + 16);
LABEL_6:
    v5 = v4;
    objc_msgSend(v5, sel_mutableCopy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableIndexSet);
    swift_dynamicCast();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v10;
    *(_BYTE *)(v6 + 24) = 1;
    *(_QWORD *)v1 = v6;
    v7 = v10;
    swift_release();
    objc_msgSend(v7, sel_addIndex_, a1);

    goto LABEL_7;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4 = *(void **)(*(_QWORD *)v1 + 16);
  if ((*(_BYTE *)(*(_QWORD *)v1 + 24) & 1) == 0 || (isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_6;
  objc_msgSend(v4, sel_addIndex_, a1);
LABEL_7:
  v8 = 1;
  v9 = a1;
  result.memberAfterInsert = v9;
  result.inserted = v8;
  return result;
}

void sub_1818D95F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 88), 8);
  _Unwind_Resume(a1);
}

void specialized static Data.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1818D9A64()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_1818D9A98 + *((int *)qword_181E5CBA0 + (v0 >> 62))))();
}

uint64_t sub_1818D9AA8@<X0>(uint64_t a1@<X8>)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  if (a1 == BYTE6(v1))
  {
    if (a1 < 1)
    {
      v5 = 1;
    }
    else
    {
      outlined copy of Data._Representation(v2, v1);
      specialized Data._Representation.withUnsafeBytes<A>(_:)(v4, v3);
    }
  }
  else
  {
    v5 = 0;
  }
  return v5 & 1;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;

  v6 = a3[2];
  if (v6)
  {
    v7 = a3[5];
    v8 = __OFSUB__(result, v7);
    v9 = result - v7;
    if (v8)
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v10 = a2 - result;
    if (!__OFSUB__(a2, result))
    {
      v11 = v6 + v9;
      v12 = a3[3];
      if (v12 >= v10)
        v12 = v10;
      v13 = v11 + v12;
      goto LABEL_9;
    }
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (__OFSUB__(a2, result))
    goto LABEL_12;
  v11 = 0;
  v13 = 0;
LABEL_9:
  closure #1 in static Data.== infix(_:_:)(v11, v13, a4, a5);
  if (!v5)
    v14 = v15;
  return v14 & 1;
}

void closure #1 in static Data.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_1818D9C10(const void *a1, int a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  BOOL *v29;
  uint64_t result;
  uint64_t v31;
  __int16 v32;
  char v33;
  char v34;
  char v35;
  char v36;

  v31 = a3;
  v32 = a4;
  v33 = BYTE2(a4);
  v34 = BYTE3(a4);
  v35 = BYTE4(a4);
  v36 = BYTE5(a4);
  if (!a1)
  {
    __break(1u);
    JUMPOUT(0x1818D9D5CLL);
  }
  result = memcmp(a1, &v31, BYTE6(a4));
  *v29 = (_DWORD)result == 0;
  return result;
}

ValueMetadata *type metadata accessor for Data.Deallocator()
{
  return &type metadata for Data.Deallocator;
}

void static CollectionDifference._unconditionallyBridgeFromObjectiveC(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(_BYTE *, _BYTE *, uint64_t);
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[4];
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37[4];
  _OWORD v38[12];
  _OWORD v39[2];
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _OWORD v54[2];
  _OWORD v55[12];
  _OWORD v56[3];

  v6 = type metadata accessor for CollectionDifference.Change();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = &v30[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v10);
  v12 = &v30[-v11];
  MEMORY[0x1E0C80A78](v13);
  v15 = &v30[-v14];
  v16 = type metadata accessor for CollectionDifference();
  v17 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v17);
  v35 = &v30[-v18];
  if (a1)
  {
    v33 = v16;
    v34 = a2;
    v32 = a3;
    v19 = swift_unknownObjectRetain();
    NSFastEnumerationIterator.init(_:)(v19, (uint64_t)v55);
    v52 = v55[10];
    v53 = v55[11];
    v54[0] = v56[0];
    *(_OWORD *)((char *)v54 + 9) = *(_OWORD *)((char *)v56 + 9);
    v48 = v55[6];
    v49 = v55[7];
    v50 = v55[8];
    v51 = v55[9];
    v44 = v55[2];
    v45 = v55[3];
    v46 = v55[4];
    v47 = v55[5];
    v42 = v55[0];
    v43 = v55[1];
    outlined retain of Locale((uint64_t)v55);
    NSFastEnumerationIterator.next()((uint64_t)&v40);
    if (v41)
    {
      v20 = MEMORY[0x1E0DEE9D8];
      v36 = MEMORY[0x1E0DEE9B8] + 8;
      do
      {
        outlined init with take of Any(&v40, v38);
        outlined init with copy of Any((uint64_t)v38, (uint64_t)v37);
        swift_dynamicCast();
        v21 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 32);
        v21(v15, v12, v6);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 16))(v9, v15, v6);
        if (!swift_isUniquelyReferenced_nonNull_native())
        {
          v24 = MEMORY[0x186DA4B5C](v20, v6);
          v20 = _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24 + 1, 1, v20, v6);
        }
        v23 = *(_QWORD *)(v20 + 16);
        v22 = *(_QWORD *)(v20 + 24);
        if (v23 >= v22 >> 1)
        {
          v31 = v22 > 1;
          v25 = type metadata accessor for Array();
          v20 = _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v31, v23 + 1, 1, v20, *(_QWORD *)(v25 + 16));
        }
        *(_QWORD *)(v20 + 16) = v23 + 1;
        v21((_BYTE *)(v20+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v23), v9, v6);
        (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v15, v6);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
        NSFastEnumerationIterator.next()((uint64_t)&v40);
      }
      while (v41);
    }
    else
    {
      v20 = MEMORY[0x1E0DEE9D8];
    }
    v38[10] = v52;
    v38[11] = v53;
    v39[0] = v54[0];
    *(_OWORD *)((char *)v39 + 9) = *(_OWORD *)((char *)v54 + 9);
    v38[6] = v48;
    v38[7] = v49;
    v38[8] = v50;
    v38[9] = v51;
    v38[2] = v44;
    v38[3] = v45;
    v38[4] = v46;
    v38[5] = v47;
    v38[0] = v42;
    v38[1] = v43;
    outlined release of Locale((uint64_t)v38);
    v37[0] = v20;
    v26 = type metadata accessor for Array();
    MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF50], v26);
    v27 = v35;
    CollectionDifference.init<A>(_:)();
    outlined release of Locale((uint64_t)v55);
    v28 = v33;
    v29 = *(_QWORD *)(v33 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v33) != 1)
    {
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(v29 + 32))(v32, v27, v28);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

_OWORD *NSDictionary.Iterator.next()@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  _QWORD *v3;
  _OWORD *result;
  void *v5;
  id v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  v3 = (_QWORD *)(v1 + 16);
  NSFastEnumerationIterator.next()((uint64_t)&v7);
  if (v8)
  {
    outlined init with take of Any(&v7, &v9);
    result = (_OWORD *)outlined init with copy of Any((uint64_t)&v9, (uint64_t)a1);
    if (*v3)
    {
      objc_opt_self();
      v5 = (void *)swift_dynamicCastObjCClassUnconditional();
      __swift_project_boxed_opaque_existential_1(&v9, v10);
      swift_unknownObjectRetain();
      v6 = objc_msgSend(v5, sel_objectForKey_, _bridgeAnythingToObjectiveC<A>(_:)());
      swift_unknownObjectRelease();
      result = (_OWORD *)swift_unknownObjectRelease();
      if (v6)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v9);
        return outlined init with take of Any(&v7, a1 + 2);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    result = (_OWORD *)outlined destroy of Any?((uint64_t)&v7, &demangling cache variable for type metadata for Any?);
    a1[2] = 0u;
    a1[3] = 0u;
    *a1 = 0u;
    a1[1] = 0u;
  }
  return result;
}

void NSFastEnumerationIterator.next()(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  id v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  BOOL v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[48];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(v1 + 200);
  v4 = (id)(v3 + 1);
  if (__OFADD__(v3, 1))
    __break(1u);
  if (*(_QWORD *)(v1 + 208) < (uint64_t)v4)
  {
    *(_QWORD *)(v1 + 200) = 0;
    if (!*(_QWORD *)v1)
      goto LABEL_18;
    v5 = *(_QWORD *)(v1 + 192);
    v31 = *(_OWORD *)(v1 + 136);
    v6 = *(_OWORD *)(v1 + 176);
    *(_OWORD *)&v32[8] = *(_OWORD *)(v1 + 160);
    *(_OWORD *)&v32[24] = v6;
    v7 = *(_OWORD *)(v1 + 24);
    v23 = *(_OWORD *)(v1 + 8);
    v24 = v7;
    v8 = *(_OWORD *)(v1 + 56);
    v25 = *(_OWORD *)(v1 + 40);
    v26 = v8;
    v9 = *(_OWORD *)(v1 + 88);
    v27 = *(_OWORD *)(v1 + 72);
    v28 = v9;
    v10 = *(_OWORD *)(v1 + 120);
    v29 = *(_OWORD *)(v1 + 104);
    v30 = v10;
    v22 = 0;
    *(_QWORD *)&v32[40] = v5;
    *(_QWORD *)v32 = &v22;
    v4 = objc_msgSend((id)swift_unknownObjectRetain(), sel_countByEnumeratingWithState_objects_count_, &v31, &v23, 16);
    v11 = (__int128 *)*((_QWORD *)&v31 + 1);
    swift_unknownObjectRelease();
    v12 = *(_OWORD *)&v32[16];
    *(_OWORD *)(v1 + 152) = *(_OWORD *)v32;
    *(_OWORD *)(v1 + 168) = v12;
    *(_OWORD *)(v1 + 184) = *(_OWORD *)&v32[32];
    v13 = v23;
    *(_OWORD *)(v1 + 24) = v24;
    v14 = v26;
    *(_OWORD *)(v1 + 40) = v25;
    *(_OWORD *)(v1 + 56) = v14;
    v15 = v28;
    *(_OWORD *)(v1 + 72) = v27;
    *(_OWORD *)(v1 + 88) = v15;
    v16 = v30;
    *(_OWORD *)(v1 + 104) = v29;
    v17 = v11 && &v23 == v11;
    v18 = v17;
    *(_QWORD *)(v1 + 208) = v4;
    *(_BYTE *)(v1 + 216) = v18;
    *(_QWORD *)(v1 + 136) = v31;
    *(_QWORD *)(v1 + 144) = v11;
    *(_OWORD *)(v1 + 8) = v13;
    *(_OWORD *)(v1 + 120) = v16;
    if (!v4)
    {
LABEL_18:
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      return;
    }
    v19 = v13;
    if (v18)
    {
      if ((_QWORD)v13)
      {
LABEL_13:
        swift_unknownObjectRetain();
        *(_QWORD *)(a1 + 24) = swift_getObjectType();
        *(_QWORD *)a1 = v19;
        *(_QWORD *)(v1 + 200) = 1;
        return;
      }
LABEL_17:
      __break(1u);
      goto LABEL_18;
    }
    v3 = 0;
    if (!v11)
      goto LABEL_25;
LABEL_20:
    v20 = *((_QWORD *)v11 + v3);
    if (v20)
    {
      swift_unknownObjectRetain();
      *(_QWORD *)(a1 + 24) = swift_getObjectType();
      *(_QWORD *)a1 = v20;
    }
    else
    {
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
    }
    *(_QWORD *)(v1 + 200) = v3 + 1;
    return;
  }
  if ((*(_BYTE *)(v1 + 216) & 1) != 0)
  {
    switch(v3)
    {
      case 0:
        v19 = *(_QWORD *)(v1 + 8);
        if (!v19)
          goto LABEL_17;
        goto LABEL_13;
      case 1:
        goto LABEL_38;
      case 2:
        goto LABEL_32;
      case 3:
        goto LABEL_40;
      case 4:
        goto LABEL_28;
      case 5:
        goto LABEL_46;
      case 6:
        goto LABEL_48;
      case 7:
        goto LABEL_42;
      case 8:
        goto LABEL_50;
      case 9:
        goto LABEL_34;
      case 10:
        goto LABEL_52;
      case 11:
        goto LABEL_30;
      case 12:
        goto LABEL_36;
      case 13:
        goto LABEL_54;
      case 14:
        goto LABEL_26;
      case 15:
        goto LABEL_44;
      default:
        goto LABEL_59;
    }
  }
  v11 = *(__int128 **)(v1 + 144);
  if (v11)
    goto LABEL_20;
LABEL_25:
  __break(1u);
LABEL_26:
  v21 = *(_QWORD *)(v1 + 120);
  if (v21)
    goto LABEL_55;
  __break(1u);
LABEL_28:
  v21 = *(_QWORD *)(v1 + 40);
  if (v21)
    goto LABEL_55;
  __break(1u);
LABEL_30:
  v21 = *(_QWORD *)(v1 + 96);
  if (v21)
    goto LABEL_55;
  __break(1u);
LABEL_32:
  v21 = *(_QWORD *)(v1 + 24);
  if (v21)
    goto LABEL_55;
  __break(1u);
LABEL_34:
  v21 = *(_QWORD *)(v1 + 80);
  if (v21)
    goto LABEL_55;
  __break(1u);
LABEL_36:
  v21 = *(_QWORD *)(v1 + 104);
  if (v21)
    goto LABEL_55;
  __break(1u);
LABEL_38:
  v21 = *(_QWORD *)(v1 + 16);
  if (v21)
    goto LABEL_55;
  __break(1u);
LABEL_40:
  v21 = *(_QWORD *)(v1 + 32);
  if (v21)
    goto LABEL_55;
  __break(1u);
LABEL_42:
  v21 = *(_QWORD *)(v1 + 64);
  if (v21)
    goto LABEL_55;
  __break(1u);
LABEL_44:
  v21 = *(_QWORD *)(v1 + 128);
  if (v21)
    goto LABEL_55;
  __break(1u);
LABEL_46:
  v21 = *(_QWORD *)(v1 + 48);
  if (v21)
    goto LABEL_55;
  __break(1u);
LABEL_48:
  v21 = *(_QWORD *)(v1 + 56);
  if (v21)
    goto LABEL_55;
  __break(1u);
LABEL_50:
  v21 = *(_QWORD *)(v1 + 72);
  if (v21)
    goto LABEL_55;
  __break(1u);
LABEL_52:
  v21 = *(_QWORD *)(v1 + 88);
  if (v21)
    goto LABEL_55;
  __break(1u);
LABEL_54:
  v21 = *(_QWORD *)(v1 + 112);
  if (v21)
  {
LABEL_55:
    swift_unknownObjectRetain();
    *(_QWORD *)(a1 + 24) = swift_getObjectType();
    *(_QWORD *)a1 = v21;
    *(_QWORD *)(v1 + 200) = v4;
  }
  else
  {
    __break(1u);
LABEL_59:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

_OWORD *NSDictionary.makeIterator()()
{
  _OWORD *v0;
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v9[12];
  _OWORD v10[2];

  type metadata accessor for NSDictionary.Iterator();
  v0 = (_OWORD *)swift_allocObject();
  v1 = swift_unknownObjectRetain();
  NSFastEnumerationIterator.init(_:)(v1, (uint64_t)v9);
  v2 = v9[11];
  v0[11] = v9[10];
  v0[12] = v2;
  v0[13] = v10[0];
  *(_OWORD *)((char *)v0 + 217) = *(_OWORD *)((char *)v10 + 9);
  v3 = v9[7];
  v0[7] = v9[6];
  v0[8] = v3;
  v4 = v9[9];
  v0[9] = v9[8];
  v0[10] = v4;
  v5 = v9[3];
  v0[3] = v9[2];
  v0[4] = v5;
  v6 = v9[5];
  v0[5] = v9[4];
  v0[6] = v6;
  v7 = v9[1];
  v0[1] = v9[0];
  v0[2] = v7;
  return v0;
}

double NSFastEnumerationIterator.init(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)a2 = a1;
  result = 0.0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 152) = 0u;
  *(_OWORD *)(a2 + 168) = 0u;
  *(_OWORD *)(a2 + 184) = 0u;
  *(_OWORD *)(a2 + 200) = 0u;
  *(_BYTE *)(a2 + 216) = 0;
  return result;
}

uint64_t type metadata accessor for NSDictionary.Iterator()
{
  return objc_opt_self();
}

void sub_1818DA950(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, char a15)
{
  uint64_t v15;

  objc_begin_catch(a1);
  os_unfair_recursive_lock_unlock();
  *(_QWORD *)(v15 + 32) = a9;
  *(_QWORD *)(v15 + 40) = a10;
  *(_QWORD *)(v15 + 48) = a11;
  *(_QWORD *)(v15 + 56) = a12;
  *(_QWORD *)(v15 + 64) = a13;
  *(_BYTE *)(v15 + 72) = a15;
  objc_exception_rethrow();
}

void sub_1818DA994(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1818DAF94(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_recursive_lock_unlock();
  objc_exception_rethrow();
}

void sub_1818DAFB8(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

id NSKeyValueObservation.__deallocating_deinit()
{
  char *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  objc_super v5;

  v1 = v0;
  v2 = MEMORY[0x186DA9F5C](&v0[OBJC_IVAR____NSKeyValueObservation_helper]);
  if (v2)
  {
    v3 = (void *)v2;
    NSKeyValueObservation.Helper.invalidate()();

  }
  swift_unknownObjectWeakAssign();
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for NSKeyValueObservation();
  return objc_msgSendSuper2(&v5, sel_dealloc);
}

Swift::Void __swiftcall NSKeyValueObservation.invalidate()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = MEMORY[0x186DA9F5C](v0 + OBJC_IVAR____NSKeyValueObservation_helper);
  if (v1)
  {
    v2 = (void *)v1;
    NSKeyValueObservation.Helper.invalidate()();

  }
  swift_unknownObjectWeakAssign();
}

void closure #1 in NSKeyValueObservation.Helper.invalidate()(char *a1, void *a2)
{
  swift_unknownObjectWeakAssign();
  *(_QWORD *)&a1[OBJC_IVAR____TtCC10Foundation21NSKeyValueObservationP33_6DA0945A07226B3278459E9368612FF46Helper_unsafeUnretainedObject] = 0;
  objc_msgSend(a2, sel_removeObserver_forKeyPath_context_, a1, String._bridgeToObjectiveCImpl()(), 0);
  swift_unknownObjectRelease();
  objc_setAssociatedObject(a2, a1, 0, 0);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)&a1[OBJC_IVAR____TtCC10Foundation21NSKeyValueObservationP33_6DA0945A07226B3278459E9368612FF46Helper_lock]);
}

id NSKeyValueObservation.Helper.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  NSKeyValueObservation.Helper.invalidate()();
  MEMORY[0x186DA9E78](*(_QWORD *)&v0[OBJC_IVAR____TtCC10Foundation21NSKeyValueObservationP33_6DA0945A07226B3278459E9368612FF46Helper_lock], -1, -1);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NSKeyValueObservation.Helper();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void sub_1818DB7D0(void *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,int a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  NSString *v30;

  if (a2 == 2)
  {
    if (objc_msgSend((id)objc_msgSend(objc_begin_catch(exc_buf), "name"), "isEqualToString:", *MEMORY[0x1E0C99858]))
    {
      objc_opt_class();
      objc_msgSend(v24, "keyPath");
      objc_opt_class();
      objc_opt_class();
      v30 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Cannot remove an observer <%@ %p> for the key path \"%@\" from <%@ %p>, most likely because the value for the key \"%@\" has changed without an appropriate KVO notification being sent. Check the KVO-compliance of the %@ class."));
      objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v30, 0));
    }
    objc_exception_rethrow();
  }
  objc_begin_catch(exc_buf);
  *(_QWORD *)v22 = v23;
  *(_QWORD *)(v22 + 8) = v26;
  *(_QWORD *)(v22 + 16) = v25;
  *(_QWORD *)(v22 + 24) = v29;
  *(_QWORD *)(v22 + 32) = v27;
  *(_BYTE *)(v22 + 40) = v28;
  os_unfair_recursive_lock_lock_with_options();
  objc_exception_rethrow();
}

void sub_1818DB8F4(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1818DBAB0(void *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSString *v30;

  if (a2 == 2)
  {
    if (objc_msgSend((id)objc_msgSend(objc_begin_catch(exc_buf), "name"), "isEqualToString:", *MEMORY[0x1E0C99858]))
    {
      objc_opt_class();
      *(_QWORD *)(v29 - 88) = *(_QWORD *)(*(_QWORD *)(v29 - 88) + 8);
      *(_QWORD *)(v29 - 104) = objc_msgSend(v26, "keyPath");
      objc_opt_class();
      objc_opt_class();
      v30 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Cannot update for observer <%@ %p> for the key path \"%@\" from <%@ %p>, most likely because the value for the key \"%@\" has changed without an appropriate KVO notification being sent. Check the KVO-compliance of the %@ class."));
      objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v30, 0));
    }
    objc_exception_rethrow();
  }
  objc_begin_catch(exc_buf);
  *(_QWORD *)v24 = a18;
  *(_QWORD *)(v24 + 8) = v25;
  *(_QWORD *)(v24 + 16) = a19;
  *(_QWORD *)(v24 + 24) = v27;
  *(_QWORD *)(v24 + 32) = v28;
  *(_BYTE *)(v24 + 40) = a21;
  objc_exception_rethrow();
}

void sub_1818DBBC4(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1818DBBD0(void *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  objc_begin_catch(a1);
  *v1 = v2;
  v1[1] = v3;
  objc_exception_rethrow();
}

void sub_1818DBBE0()
{
  objc_end_catch();
  JUMPOUT(0x1818DBBE8);
}

void sub_1818DBD74(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1818DBD94(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x1818DBCE0);
}

uint64_t NSKeyValueGetImplicitObservanceAdditionInfo()
{
  uint64_t v0;
  malloc_zone_t *v1;

  v0 = _CFGetTSD();
  if (!v0)
  {
    v1 = malloc_default_zone();
    v0 = (uint64_t)malloc_type_zone_calloc(v1, 1uLL, 0x58uLL, 0xC2E5A2B2uLL);
    _CFSetTSD();
  }
  return v0 + 16;
}

void sub_1818DBEF4(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  objc_begin_catch(a1);
  *(_QWORD *)(v2 + 32) = v1;
  *(_QWORD *)(v2 + 40) = v7;
  *(_QWORD *)(v2 + 48) = v6;
  *(_QWORD *)(v2 + 56) = v5;
  *(_QWORD *)(v2 + 64) = v4;
  *(_BYTE *)(v2 + 72) = v3;
  objc_exception_rethrow();
}

void sub_1818DBF10(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1818DBFC0(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_recursive_lock_unlock();
  objc_exception_rethrow();
}

void sub_1818DBFD8(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1818DC264(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1818DC26C(_Unwind_Exception *exc_buf, int a2)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;

  if (a2)
  {
    objc_begin_catch(exc_buf);
    v5 = _NSKeyValueRetainedObservationInfoForObject(v2, *(_QWORD *)(v3 + 8));
    _NSKeyValueReplaceObservationInfoForObject(v2, *(_QWORD *)(v3 + 8), v5, v4);
    if (v5)

    objc_exception_rethrow();
  }
  _Unwind_Resume(exc_buf);
}

void sub_1818DC2B0(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    objc_begin_catch(a1);
    JUMPOUT(0x1818DC190);
  }
  _Unwind_Resume(a1);
}

void sub_1818DC2D0(_Unwind_Exception *a1)
{
  char v1;

  if ((v1 & 1) != 0)
    JUMPOUT(0x1818DC2D8);
  _Unwind_Resume(a1);
}

void sub_1818DC2E0(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x1818DC2ECLL);
}

_BYTE *_NSKeyValueObservationInfoCreateByRemoving(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, char *a7, NSKeyValueObservance **a8)
{
  unint64_t Count;
  size_t v17;
  char *v18;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSPointerFunctions *v26;
  NSKeyValueShareableObservationInfoKey *v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  char v33;
  char *v34;
  _BYTE *v36;
  void *v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  CFRange v42;

  v41 = *MEMORY[0x1E0C80C00];
  *a7 = 0;
  *a8 = 0;
  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 8));
  v17 = 8 * Count;
  v39 = a7;
  v40 = 8 * Count;
  if (8 * Count < 0x81)
  {
    if (Count)
    {
      MEMORY[0x1E0C80A78](v17);
      v18 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
      bzero(v18, v20);
    }
    else
    {
      v18 = 0;
    }
  }
  else
  {
    v18 = (char *)malloc_type_malloc(v17, 0x80040B8603338uLL);
  }
  v42.location = 0;
  v42.length = Count;
  CFArrayGetValues(*(CFArrayRef *)(a1 + 8), v42, (const void **)v18);
  if ((uint64_t)(Count - 1) < 0)
  {
LABEL_22:
    if (!*a8)
    {
      v31 = 0;
      goto LABEL_37;
    }
    v21 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v21 = Count - 1;
    while (1)
    {
      v22 = *(_QWORD *)&v18[8 * v21];
      if (*(_QWORD *)(v22 + 16) == a3)
      {
        v23 = (*(_BYTE *)(v22 + 40) & 0x20) != 0 ? 8 : 32;
        if (*(_QWORD *)(v22 + v23) == a2 && (*(_QWORD *)(v22 + 24) == a4 || (a5 & 1) == 0))
        {
          v24 = (*(_BYTE *)(v22 + 40) & 0x20) != 0 ? *(_QWORD *)(v22 + 32) : 0;
          if (!a6 || v24 == a6)
            break;
        }
      }
      if (v21-- <= 0)
        goto LABEL_22;
    }
    *a8 = (NSKeyValueObservance *)v22;
  }
  if (Count >= 2)
  {
    os_unfair_lock_lock_with_options();
    if (!qword_1ECD09C20)
    {
      v26 = -[NSPointerFunctions initWithOptions:]([NSPointerFunctions alloc], "initWithOptions:", 5);
      -[NSPointerFunctions setHashFunction:](v26, "setHashFunction:", NSKeyValueShareableObservationInfoNSHTHash);
      -[NSPointerFunctions setIsEqualFunction:](v26, "setIsEqualFunction:", NSKeyValueShareableObservationInfoNSHTIsEqual);
      qword_1ECD09C20 = -[NSHashTable initWithPointerFunctions:capacity:]([NSHashTable alloc], "initWithPointerFunctions:capacity:", v26, 0);

    }
    if (!qword_1ECD09C28)
      qword_1ECD09C28 = objc_opt_self();
    v27 = (NSKeyValueShareableObservationInfoKey *)qword_1ECD09C48;
    if (!qword_1ECD09C48)
    {
      v27 = objc_alloc_init(NSKeyValueShareableObservationInfoKey);
      qword_1ECD09C48 = (uint64_t)v27;
    }
    v27->_addingNotRemoving = 0;
    v27->_baseObservationInfo = (NSKeyValueObservationInfo *)a1;
    v27->_removalObservance = *a8;
    v27->_removalObservanceIndex = v21;
    *(_QWORD *)(qword_1ECD09C48 + 80) = NSKeyValueShareableObservationInfoNSHTHash((uint64_t)v27);
    v28 = (_BYTE *)objc_msgSend((id)qword_1ECD09C20, "member:");
    v29 = qword_1ECD09C48;
    *(_QWORD *)(qword_1ECD09C48 + 64) = 0;
    *(_QWORD *)(v29 + 16) = 0;
    v30 = *(_QWORD *)(v29 + 80);
    *(_QWORD *)(v29 + 80) = 0;
    if (v28)
    {
      v31 = v28;
      v32 = v28;
      v33 = 1;
    }
    else
    {
      memmove(&v18[8 * v21], &v18[8 * v21 + 8], 8 * Count - (8 * v21 + 8));
      v36 = -[NSKeyValueObservationInfo _initWithObservances:count:hashValue:]([NSKeyValueObservationInfo alloc], "_initWithObservances:count:hashValue:", v18, Count - 1, v30);
      v31 = v36;
      if (v36)
      {
        v33 = v36[24];
        v34 = v39;
        if (v33)
        {
          v37 = (void *)MEMORY[0x186DA8F78]();
          objc_msgSend((id)qword_1ECD09C20, "addObject:", v31);
          objc_autoreleasePoolPop(v37);
          v33 = 0;
        }
        goto LABEL_34;
      }
      v33 = 0;
    }
    v34 = v39;
LABEL_34:
    *v34 = v33;
    os_unfair_lock_unlock((os_unfair_lock_t)&_MergedGlobals_100);
    goto LABEL_37;
  }
  v31 = 0;
  *v39 = 1;
LABEL_37:
  if (v40 >= 0x81)
    free(v18);
  return v31;
}

void sub_1818DC88C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  os_unfair_lock_s *v9;

  if (a2)
  {
    if (a2 == 2)
    {
      objc_begin_catch(exception_object);
      NSLog((NSString *)CFSTR("THIS SHOULD NOT HAVE HAPPENED: %@"));
      objc_exception_rethrow();
    }
    objc_begin_catch(exception_object);
    os_unfair_lock_unlock(v9);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t NSKeyValueGetImplicitObservanceRemovalInfo()
{
  uint64_t v0;
  malloc_zone_t *v1;

  v0 = _CFGetTSD();
  if (!v0)
  {
    v1 = malloc_default_zone();
    v0 = (uint64_t)malloc_type_zone_calloc(v1, 1uLL, 0x58uLL, 0xC2E5A2B2uLL);
    _CFSetTSD();
  }
  return v0 + 32;
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

uint64_t _JSONKeyedEncodingContainer.encode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  char v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  int64_t v42;
  unint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t result;
  uint64_t v50;
  int64_t v51;
  int64_t v52;
  uint64_t v53[5];

  v6 = v3[1];
  type metadata accessor for JSONReference();
  inited = swift_initStaticObject();
  v8 = *v3;
  v9 = v3[2];
  v11 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(a3 + 24);
  v53[3] = v11;
  v53[4] = v10;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v53);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(boxed_opaque_existential_1, a2, v11);
  swift_retain();
  v13 = _JSONKeyedEncodingContainer._converted(_:)(v53, v8, v6, v9);
  v15 = v14;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
  if (*(_BYTE *)(v6 + 32) != 4)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v16 = *(_QWORD *)(v6 + 16);
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_BYTE *)(v6 + 32) = 7;
  swift_retain();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v53[0] = v16;
  v19 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v15);
  v20 = *(_QWORD *)(v16 + 16);
  v21 = (v18 & 1) == 0;
  v22 = v20 + v21;
  if (__OFADD__(v20, v21))
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v11) = v18;
    if (*(_QWORD *)(v16 + 24) < v22)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v22, isUniquelyReferenced_nonNull_native);
      v23 = v53[0];
      v24 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v15);
      if ((v11 & 1) != (v25 & 1))
        goto LABEL_51;
      v19 = v24;
      if ((v11 & 1) == 0)
        goto LABEL_46;
LABEL_9:
      v26 = *(_QWORD *)(v23 + 56);
      swift_release();
      *(_QWORD *)(v26 + 8 * v19) = inited;
LABEL_47:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v46 = *(_QWORD *)(v6 + 16);
      v47 = *(_QWORD *)(v6 + 24);
      *(_QWORD *)(v6 + 16) = v23;
      *(_QWORD *)(v6 + 24) = 0;
      v48 = *(_BYTE *)(v6 + 32);
      *(_BYTE *)(v6 + 32) = 4;
      outlined consume of JSONReference.Backing(v46, v47, v48);
      swift_release();
      return swift_bridgeObjectRelease();
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v23 = v16;
      if ((v18 & 1) != 0)
        goto LABEL_9;
LABEL_46:
      specialized _NativeDictionary._insert(at:key:value:)(v19, v13, v15, inited, v23);
      swift_bridgeObjectRetain();
      goto LABEL_47;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONReference>);
  v27 = static _DictionaryStorage.copy(original:)();
  v23 = v27;
  if (!*(_QWORD *)(v16 + 16))
  {
LABEL_45:
    swift_bridgeObjectRelease();
    if ((v11 & 1) != 0)
      goto LABEL_9;
    goto LABEL_46;
  }
  v28 = (void *)(v27 + 64);
  v29 = (unint64_t)((1 << *(_BYTE *)(v23 + 32)) + 63) >> 6;
  if (v23 != v16 || (unint64_t)v28 >= v16 + 64 + 8 * v29)
    memmove(v28, (const void *)(v16 + 64), 8 * v29);
  v50 = v16 + 64;
  v30 = 0;
  *(_QWORD *)(v23 + 16) = *(_QWORD *)(v16 + 16);
  v31 = 1 << *(_BYTE *)(v16 + 32);
  v32 = -1;
  if (v31 < 64)
    v32 = ~(-1 << v31);
  v33 = v32 & *(_QWORD *)(v16 + 64);
  v51 = (unint64_t)(v31 + 63) >> 6;
  while (1)
  {
    if (v33)
    {
      v34 = __clz(__rbit64(v33));
      v33 &= v33 - 1;
      v52 = v30;
      v35 = v34 | (v30 << 6);
      goto LABEL_19;
    }
    v42 = v30 + 1;
    if (__OFADD__(v30, 1))
    {
      __break(1u);
      goto LABEL_49;
    }
    if (v42 >= v51)
      goto LABEL_45;
    v43 = *(_QWORD *)(v50 + 8 * v42);
    v44 = v30 + 1;
    if (!v43)
    {
      v44 = v30 + 2;
      if (v30 + 2 >= v51)
        goto LABEL_45;
      v43 = *(_QWORD *)(v50 + 8 * v44);
      if (!v43)
      {
        v44 = v30 + 3;
        if (v30 + 3 >= v51)
          goto LABEL_45;
        v43 = *(_QWORD *)(v50 + 8 * v44);
        if (!v43)
        {
          v44 = v30 + 4;
          if (v30 + 4 >= v51)
            goto LABEL_45;
          v43 = *(_QWORD *)(v50 + 8 * v44);
          if (!v43)
          {
            v44 = v30 + 5;
            if (v30 + 5 >= v51)
              goto LABEL_45;
            v43 = *(_QWORD *)(v50 + 8 * v44);
            if (!v43)
            {
              v44 = v30 + 6;
              if (v30 + 6 >= v51)
                goto LABEL_45;
              v43 = *(_QWORD *)(v50 + 8 * v44);
              if (!v43)
              {
                v44 = v30 + 7;
                if (v30 + 7 >= v51)
                  goto LABEL_45;
                v43 = *(_QWORD *)(v50 + 8 * v44);
                if (!v43)
                {
                  v44 = v30 + 8;
                  if (v30 + 8 >= v51)
                    goto LABEL_45;
                  v43 = *(_QWORD *)(v50 + 8 * v44);
                  if (!v43)
                    break;
                }
              }
            }
          }
        }
      }
    }
LABEL_44:
    v33 = (v43 - 1) & v43;
    v52 = v44;
    v35 = __clz(__rbit64(v43)) + (v44 << 6);
LABEL_19:
    v36 = 16 * v35;
    v37 = (_QWORD *)(*(_QWORD *)(v16 + 48) + 16 * v35);
    v38 = v37[1];
    v39 = 8 * v35;
    v40 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + v39);
    v41 = (_QWORD *)(*(_QWORD *)(v23 + 48) + v36);
    *v41 = *v37;
    v41[1] = v38;
    *(_QWORD *)(*(_QWORD *)(v23 + 56) + v39) = v40;
    swift_bridgeObjectRetain();
    swift_retain();
    v30 = v52;
  }
  v45 = v30 + 9;
  if (v30 + 9 >= v51)
    goto LABEL_45;
  v43 = *(_QWORD *)(v50 + 8 * v45);
  if (v43)
  {
    v44 = v30 + 9;
    goto LABEL_44;
  }
  while (1)
  {
    v44 = v45 + 1;
    if (__OFADD__(v45, 1))
      break;
    if (v44 >= v51)
      goto LABEL_45;
    v43 = *(_QWORD *)(v50 + 8 * v44);
    ++v45;
    if (v43)
      goto LABEL_44;
  }
LABEL_50:
  __break(1u);
LABEL_51:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  char v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  unint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  int64_t v46;
  unint64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t result;
  uint64_t v54;
  int64_t v55;
  int64_t v56;
  uint64_t v57[5];

  v4 = v3;
  v7 = v3[1];
  v57[0] = a1;
  v8 = dispatch thunk of CustomStringConvertible.description.getter();
  v10 = v9;
  type metadata accessor for JSONReference();
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v8;
  *(_QWORD *)(v11 + 24) = v10;
  *(_BYTE *)(v11 + 32) = 1;
  v12 = *v4;
  v13 = v4[2];
  v15 = *(_QWORD *)(a3 + 16);
  v14 = *(_QWORD *)(a3 + 24);
  v57[3] = v15;
  v57[4] = v14;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v57);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(boxed_opaque_existential_1, a2, v15);
  v17 = _JSONKeyedEncodingContainer._converted(_:)(v57, v12, v7, v13);
  v19 = v18;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
  if (*(_BYTE *)(v7 + 32) != 4)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v20 = *(_QWORD *)(v7 + 16);
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = 0;
  *(_BYTE *)(v7 + 32) = 7;
  swift_bridgeObjectRetain();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v57[0] = v20;
  v23 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v19);
  v24 = *(_QWORD *)(v20 + 16);
  v25 = (v22 & 1) == 0;
  v26 = v24 + v25;
  if (__OFADD__(v24, v25))
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v15) = v22;
    if (*(_QWORD *)(v20 + 24) < v26)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v26, isUniquelyReferenced_nonNull_native);
      v27 = v57[0];
      v28 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v19);
      if ((v15 & 1) != (v29 & 1))
        goto LABEL_51;
      v23 = v28;
      if ((v15 & 1) == 0)
        goto LABEL_46;
LABEL_9:
      v30 = *(_QWORD *)(v27 + 56);
      swift_release();
      *(_QWORD *)(v30 + 8 * v23) = v11;
LABEL_47:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v50 = *(_QWORD *)(v7 + 16);
      v51 = *(_QWORD *)(v7 + 24);
      *(_QWORD *)(v7 + 16) = v27;
      *(_QWORD *)(v7 + 24) = 0;
      v52 = *(_BYTE *)(v7 + 32);
      *(_BYTE *)(v7 + 32) = 4;
      outlined consume of JSONReference.Backing(v50, v51, v52);
      swift_release();
      return swift_bridgeObjectRelease();
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v27 = v20;
      if ((v22 & 1) != 0)
        goto LABEL_9;
LABEL_46:
      specialized _NativeDictionary._insert(at:key:value:)(v23, v17, v19, v11, v27);
      swift_bridgeObjectRetain();
      goto LABEL_47;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONReference>);
  v31 = static _DictionaryStorage.copy(original:)();
  v27 = v31;
  if (!*(_QWORD *)(v20 + 16))
  {
LABEL_45:
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0)
      goto LABEL_9;
    goto LABEL_46;
  }
  v32 = (void *)(v31 + 64);
  v33 = (unint64_t)((1 << *(_BYTE *)(v27 + 32)) + 63) >> 6;
  if (v27 != v20 || (unint64_t)v32 >= v20 + 64 + 8 * v33)
    memmove(v32, (const void *)(v20 + 64), 8 * v33);
  v54 = v20 + 64;
  v34 = 0;
  *(_QWORD *)(v27 + 16) = *(_QWORD *)(v20 + 16);
  v35 = 1 << *(_BYTE *)(v20 + 32);
  v36 = -1;
  if (v35 < 64)
    v36 = ~(-1 << v35);
  v37 = v36 & *(_QWORD *)(v20 + 64);
  v55 = (unint64_t)(v35 + 63) >> 6;
  while (1)
  {
    if (v37)
    {
      v38 = __clz(__rbit64(v37));
      v37 &= v37 - 1;
      v56 = v34;
      v39 = v38 | (v34 << 6);
      goto LABEL_19;
    }
    v46 = v34 + 1;
    if (__OFADD__(v34, 1))
    {
      __break(1u);
      goto LABEL_49;
    }
    if (v46 >= v55)
      goto LABEL_45;
    v47 = *(_QWORD *)(v54 + 8 * v46);
    v48 = v34 + 1;
    if (!v47)
    {
      v48 = v34 + 2;
      if (v34 + 2 >= v55)
        goto LABEL_45;
      v47 = *(_QWORD *)(v54 + 8 * v48);
      if (!v47)
      {
        v48 = v34 + 3;
        if (v34 + 3 >= v55)
          goto LABEL_45;
        v47 = *(_QWORD *)(v54 + 8 * v48);
        if (!v47)
        {
          v48 = v34 + 4;
          if (v34 + 4 >= v55)
            goto LABEL_45;
          v47 = *(_QWORD *)(v54 + 8 * v48);
          if (!v47)
          {
            v48 = v34 + 5;
            if (v34 + 5 >= v55)
              goto LABEL_45;
            v47 = *(_QWORD *)(v54 + 8 * v48);
            if (!v47)
            {
              v48 = v34 + 6;
              if (v34 + 6 >= v55)
                goto LABEL_45;
              v47 = *(_QWORD *)(v54 + 8 * v48);
              if (!v47)
              {
                v48 = v34 + 7;
                if (v34 + 7 >= v55)
                  goto LABEL_45;
                v47 = *(_QWORD *)(v54 + 8 * v48);
                if (!v47)
                {
                  v48 = v34 + 8;
                  if (v34 + 8 >= v55)
                    goto LABEL_45;
                  v47 = *(_QWORD *)(v54 + 8 * v48);
                  if (!v47)
                    break;
                }
              }
            }
          }
        }
      }
    }
LABEL_44:
    v37 = (v47 - 1) & v47;
    v56 = v48;
    v39 = __clz(__rbit64(v47)) + (v48 << 6);
LABEL_19:
    v40 = 16 * v39;
    v41 = (_QWORD *)(*(_QWORD *)(v20 + 48) + 16 * v39);
    v42 = v41[1];
    v43 = 8 * v39;
    v44 = *(_QWORD *)(*(_QWORD *)(v20 + 56) + v43);
    v45 = (_QWORD *)(*(_QWORD *)(v27 + 48) + v40);
    *v45 = *v41;
    v45[1] = v42;
    *(_QWORD *)(*(_QWORD *)(v27 + 56) + v43) = v44;
    swift_bridgeObjectRetain();
    swift_retain();
    v34 = v56;
  }
  v49 = v34 + 9;
  if (v34 + 9 >= v55)
    goto LABEL_45;
  v47 = *(_QWORD *)(v54 + 8 * v49);
  if (v47)
  {
    v48 = v34 + 9;
    goto LABEL_44;
  }
  while (1)
  {
    v48 = v49 + 1;
    if (__OFADD__(v49, 1))
      break;
    if (v48 >= v55)
      goto LABEL_45;
    v47 = *(_QWORD *)(v54 + 8 * v48);
    ++v49;
    if (v47)
      goto LABEL_44;
  }
LABEL_50:
  __break(1u);
LABEL_51:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t dispatch thunk of JSONDecoder.nonConformingFloatDecodingStrategy.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of JSONDecoder.dataDecodingStrategy.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t type metadata instantiation function for Measurement()
{
  return swift_allocateGenericValueMetadata();
}

id StringProtocol.removingPercentEncoding.getter()
{
  void *v0;
  id v1;
  id v2;

  StringProtocol._ephemeralString.getter();
  v0 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v1 = objc_msgSend(v0, sel_stringByRemovingPercentEncoding);
  swift_unknownObjectRelease();
  if (!v1)
    return 0;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

ValueMetadata *type metadata accessor for AttributedString._AttributeValue()
{
  return &type metadata for AttributedString._AttributeValue;
}

double URLComponents.init()@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = 1;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_WORD *)(a1 + 152) = 0;
  return result;
}

uint64_t destroy for IndexSet.RangeView()
{
  return swift_release();
}

uint64_t __NSComparatorTranslator(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))a3)(*a1, *a2, *(_QWORD *)(a3 + 8));
}

uint64_t protocol witness for Encodable.encode(to:) in conformance _NSRange(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v3[24];
  uint64_t v4;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Predicate<Pack{repeat A}>(_QWORD *a1, uint64_t a2)
{
  return Predicate.encode(to:)(a1, a2);
}

unint64_t _JSONKeyedEncodingContainer.nestedUnkeyedContainer(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char isUniquelyReferenced_nonNull_native;
  int v31;
  unint64_t v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  unint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  int64_t v57;
  unint64_t v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t);
  void (*v69)(char *, uint64_t, uint64_t);
  char *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t *v73;
  void (*v74)(char *, uint64_t);
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  unint64_t result;
  uint64_t v80;
  unint64_t v81;
  int v82;
  uint64_t v83;
  int64_t v84;
  uint64_t v85;
  int64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t *v89;
  void (*v90)(uint64_t *, uint64_t, uint64_t);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96[6];

  v4 = v3;
  v89 = a3;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](a1);
  v88 = (char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Optional();
  v92 = *(_QWORD *)(v10 - 8);
  v93 = v10;
  MEMORY[0x1E0C80A78](v10);
  v94 = (char *)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v80 - v13;
  v15 = *v4;
  v16 = v4[1];
  v17 = v4[2];
  v18 = *(_QWORD *)(a2 + 24);
  v96[3] = v7;
  v96[4] = v18;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v96);
  v90 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v8 + 16);
  v91 = a1;
  v90(boxed_opaque_existential_1, a1, v7);
  v87 = v18;
  v95 = _JSONKeyedEncodingContainer._converted(_:)(v96, v15, v16, v17);
  v21 = v20;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v96);
  v22 = v4[1];
  if (*(_BYTE *)(v22 + 32) != 4)
  {
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  v23 = *(_QWORD *)(v22 + 16);
  if (*(_QWORD *)(v23 + 16))
  {
    v24 = *(_QWORD *)(v22 + 24);
    outlined copy of JSONReference.Backing(*(_QWORD *)(v22 + 16), v24, 4);
    swift_bridgeObjectRetain();
    v25 = specialized __RawDictionaryStorage.find<A>(_:)(v95, v21);
    if ((v26 & 1) != 0)
    {
      v27 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v25);
      swift_retain();
      outlined consume of JSONReference.Backing(v23, v24, 4);
      swift_bridgeObjectRelease_n();
      v24 = (uint64_t)v94;
      if (*(_BYTE *)(v27 + 32) == 3)
      {
LABEL_54:
        v64 = *v4;
        v65 = v4[2];
        v90((uint64_t *)v14, v91, v7);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v14, 0, 1, v7);
        v67 = v92;
        v66 = v93;
        (*(void (**)(uint64_t, char *, uint64_t))(v92 + 16))(v24, v14, v93);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v24, 1, v7) == 1)
        {
          v68 = *(void (**)(char *, uint64_t))(v67 + 8);
          swift_retain();
          v68(v14, v66);
          v68((char *)v24, v66);
          swift_retain();
LABEL_62:
          v78 = v89;
          v89[3] = (uint64_t)&unk_1E0F27BD0;
          result = lazy protocol witness table accessor for type _JSONUnkeyedEncodingContainer and conformance _JSONUnkeyedEncodingContainer();
          v78[4] = result;
          *v78 = v64;
          v78[1] = v27;
          v78[2] = v65;
          return result;
        }
        v69 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 32);
        v70 = v88;
        v69(v88, v24, v7);
        v71 = (uint64_t *)swift_allocObject();
        v72 = v87;
        v71[5] = v7;
        v71[6] = v72;
        v73 = __swift_allocate_boxed_opaque_existential_1(v71 + 2);
        v69((char *)v73, (uint64_t)v70, v7);
        v74 = *(void (**)(char *, uint64_t))(v67 + 8);
        swift_retain();
        v74(v14, v66);
        v71[7] = v65;
        if (v65 >> 62)
        {
          if (v65 >> 62 != 1)
          {
            v77 = 1;
            goto LABEL_61;
          }
          v75 = (uint64_t *)((v65 & 0x3FFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          v75 = (uint64_t *)(v65 + 64);
        }
        v76 = *v75;
        swift_retain();
        v77 = v76 + 1;
        if (!__OFADD__(v76, 1))
        {
LABEL_61:
          v71[8] = v77;
          v65 = (unint64_t)v71;
          goto LABEL_62;
        }
        __break(1u);
LABEL_65:
        __break(1u);
        goto LABEL_66;
      }
      __break(1u);
    }
    outlined consume of JSONReference.Backing(v23, v24, 4);
    swift_bridgeObjectRelease();
  }
  type metadata accessor for JSONReference();
  v28 = swift_allocObject();
  *(_QWORD *)(v28 + 16) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v28 + 24) = 0;
  *(_BYTE *)(v28 + 32) = 3;
  if (*(_BYTE *)(v22 + 32) != 4)
  {
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  v27 = v28;
  v29 = *(_QWORD *)(v22 + 16);
  *(_QWORD *)(v22 + 16) = 0;
  *(_QWORD *)(v22 + 24) = 0;
  *(_BYTE *)(v22 + 32) = 7;
  swift_retain_n();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v96[0] = v29;
  v32 = specialized __RawDictionaryStorage.find<A>(_:)(v95, v21);
  v33 = *(_QWORD *)(v29 + 16);
  v34 = (v31 & 1) == 0;
  v35 = v33 + v34;
  if (__OFADD__(v33, v34))
  {
    __break(1u);
  }
  else
  {
    if (*(_QWORD *)(v29 + 24) < v35)
    {
      v36 = v31;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v35, isUniquelyReferenced_nonNull_native);
      v37 = v96[0];
      v38 = specialized __RawDictionaryStorage.find<A>(_:)(v95, v21);
      if ((v36 & 1) != (v39 & 1))
        goto LABEL_69;
      v32 = v38;
      if ((v36 & 1) == 0)
        goto LABEL_52;
LABEL_15:
      v40 = *(_QWORD *)(v37 + 56);
      v41 = 8 * v32;
      swift_release();
      *(_QWORD *)(v40 + v41) = v27;
LABEL_53:
      v24 = (uint64_t)v94;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v61 = *(_QWORD *)(v22 + 16);
      v62 = *(_QWORD *)(v22 + 24);
      *(_QWORD *)(v22 + 16) = v37;
      *(_QWORD *)(v22 + 24) = 0;
      v63 = *(_BYTE *)(v22 + 32);
      *(_BYTE *)(v22 + 32) = 4;
      outlined consume of JSONReference.Backing(v61, v62, v63);
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_54;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v37 = v29;
      if ((v31 & 1) != 0)
        goto LABEL_15;
LABEL_52:
      specialized _NativeDictionary._insert(at:key:value:)(v32, v95, v21, v27, v37);
      swift_bridgeObjectRetain();
      goto LABEL_53;
    }
  }
  v81 = v32;
  v82 = v31;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONReference>);
  v42 = static _DictionaryStorage.copy(original:)();
  v37 = v42;
  v43 = *(_QWORD *)(v29 + 16);
  if (!v43)
  {
LABEL_51:
    swift_bridgeObjectRelease();
    v32 = v81;
    if ((v82 & 1) != 0)
      goto LABEL_15;
    goto LABEL_52;
  }
  v44 = (void *)(v42 + 64);
  v45 = (unint64_t)((1 << *(_BYTE *)(v37 + 32)) + 63) >> 6;
  if (v37 != v29 || (unint64_t)v44 >= v29 + 64 + 8 * v45)
  {
    memmove(v44, (const void *)(v29 + 64), 8 * v45);
    v43 = *(_QWORD *)(v29 + 16);
  }
  v46 = 0;
  *(_QWORD *)(v37 + 16) = v43;
  v47 = 1 << *(_BYTE *)(v29 + 32);
  v48 = -1;
  if (v47 < 64)
    v48 = ~(-1 << v47);
  v49 = v48 & *(_QWORD *)(v29 + 64);
  v83 = v29 + 64;
  v84 = (unint64_t)(v47 + 63) >> 6;
  while (1)
  {
    if (v49)
    {
      v85 = (v49 - 1) & v49;
      v86 = v46;
      v50 = __clz(__rbit64(v49)) | (v46 << 6);
      goto LABEL_25;
    }
    v57 = v46 + 1;
    if (__OFADD__(v46, 1))
      goto LABEL_65;
    if (v57 >= v84)
      goto LABEL_51;
    v58 = *(_QWORD *)(v83 + 8 * v57);
    v59 = v46 + 1;
    if (!v58)
    {
      v59 = v46 + 2;
      if (v46 + 2 >= v84)
        goto LABEL_51;
      v58 = *(_QWORD *)(v83 + 8 * v59);
      if (!v58)
      {
        v59 = v46 + 3;
        if (v46 + 3 >= v84)
          goto LABEL_51;
        v58 = *(_QWORD *)(v83 + 8 * v59);
        if (!v58)
        {
          v59 = v46 + 4;
          if (v46 + 4 >= v84)
            goto LABEL_51;
          v58 = *(_QWORD *)(v83 + 8 * v59);
          if (!v58)
          {
            v59 = v46 + 5;
            if (v46 + 5 >= v84)
              goto LABEL_51;
            v58 = *(_QWORD *)(v83 + 8 * v59);
            if (!v58)
            {
              v59 = v46 + 6;
              if (v46 + 6 >= v84)
                goto LABEL_51;
              v58 = *(_QWORD *)(v83 + 8 * v59);
              if (!v58)
              {
                v59 = v46 + 7;
                if (v46 + 7 >= v84)
                  goto LABEL_51;
                v58 = *(_QWORD *)(v83 + 8 * v59);
                if (!v58)
                {
                  v59 = v46 + 8;
                  if (v46 + 8 >= v84)
                    goto LABEL_51;
                  v58 = *(_QWORD *)(v83 + 8 * v59);
                  if (!v58)
                    break;
                }
              }
            }
          }
        }
      }
    }
LABEL_50:
    v85 = (v58 - 1) & v58;
    v86 = v59;
    v50 = __clz(__rbit64(v58)) + (v59 << 6);
LABEL_25:
    v51 = 16 * v50;
    v52 = (_QWORD *)(*(_QWORD *)(v29 + 48) + 16 * v50);
    v53 = v52[1];
    v54 = 8 * v50;
    v55 = *(_QWORD *)(*(_QWORD *)(v29 + 56) + v54);
    v56 = (_QWORD *)(*(_QWORD *)(v37 + 48) + v51);
    *v56 = *v52;
    v56[1] = v53;
    *(_QWORD *)(*(_QWORD *)(v37 + 56) + v54) = v55;
    swift_bridgeObjectRetain();
    swift_retain();
    v49 = v85;
    v46 = v86;
  }
  v60 = v46 + 9;
  if (v46 + 9 >= v84)
    goto LABEL_51;
  v58 = *(_QWORD *)(v83 + 8 * v60);
  if (v58)
  {
    v59 = v46 + 9;
    goto LABEL_50;
  }
  while (1)
  {
    v59 = v60 + 1;
    if (__OFADD__(v60, 1))
      break;
    if (v59 >= v84)
      goto LABEL_51;
    v58 = *(_QWORD *)(v83 + 8 * v59);
    ++v60;
    if (v58)
      goto LABEL_50;
  }
LABEL_68:
  __break(1u);
LABEL_69:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t JSONDecoderImpl.KeyedContainer.nestedUnkeyedContainer(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  void (*v26)(_BYTE *, _QWORD *);
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  uint64_t result;
  void (*v39)(uint64_t *, _BYTE *, uint64_t);
  _BYTE *v40;
  uint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[4];
  int v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;

  v58 = a7;
  v65 = (_QWORD *)a3;
  v61 = a2;
  v11 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v57 = &v54[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v60 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v60 - 8);
  MEMORY[0x1E0C80A78](v60);
  v15 = &v54[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v16);
  v18 = &v54[-v17];
  v62 = a6;
  v19 = dispatch thunk of CodingKey.stringValue.getter();
  if (!*(_QWORD *)(a4 + 16) || (v21 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v20), (v22 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    v29 = type metadata accessor for DecodingError();
    v61 = swift_allocError();
    v31 = v30;
    v60 = (uint64_t)v30
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context))
                 + 48);
    v32 = v62;
    v31[3] = a5;
    v31[4] = v32;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v31);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v11 + 16))(boxed_opaque_existential_1, a1, a5);
    _CodingPathNode.path.getter((unint64_t)v65);
    v63 = 0;
    v64 = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    v63 = 0xD00000000000001DLL;
    v64 = 0x800000018230D870;
    v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35._countAndFlagsBits = 2238496;
    v35._object = (void *)0xE300000000000000;
    String.append(_:)(v35);
    v36._countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    v37._countAndFlagsBits = 3025186;
    v37._object = (void *)0xE300000000000000;
    String.append(_:)(v37);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v29 - 8) + 104))(v31, *MEMORY[0x1E0DEC448], v29);
    return swift_willThrow();
  }
  v23 = *(_QWORD *)(a4 + 56) + 24 * v21;
  v24 = *(_QWORD *)v23;
  v56 = *(_QWORD *)(v23 + 8);
  v55 = *(unsigned __int8 *)(v23 + 16);
  swift_bridgeObjectRelease();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v11 + 16))(v18, a1, a5);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v18, 0, 1, a5);
  v25 = (_QWORD *)v60;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v13 + 16))(v15, v18, v60);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v15, 1, a5) == 1)
  {
    v26 = *(void (**)(_BYTE *, _QWORD *))(v13 + 8);
    v26(v18, v25);
    v26(v15, v25);
    v27 = v65;
    swift_retain();
    v28 = v61;
    goto LABEL_12;
  }
  v39 = *(void (**)(uint64_t *, _BYTE *, uint64_t))(v11 + 32);
  v40 = v57;
  v39((uint64_t *)v57, v15, a5);
  v27 = (_QWORD *)swift_allocObject();
  v41 = v62;
  v27[5] = a5;
  v27[6] = v41;
  v42 = __swift_allocate_boxed_opaque_existential_1(v27 + 2);
  v39(v42, v40, a5);
  (*(void (**)(_BYTE *, _QWORD *))(v13 + 8))(v18, v25);
  v43 = (unint64_t)v65;
  v27[7] = v65;
  if (v43 >> 62)
  {
    if (v43 >> 62 != 1)
    {
      v28 = v61;
      v46 = 1;
      goto LABEL_11;
    }
    v44 = (uint64_t *)((v43 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v44 = (uint64_t *)(v43 + 64);
  }
  v28 = v61;
  v45 = *v44;
  swift_retain();
  v46 = v45 + 1;
  if (!__OFADD__(v45, 1))
  {
LABEL_11:
    v27[8] = v46;
LABEL_12:
    v25 = *(_QWORD **)(v28 + 160);
    *(_QWORD *)(v28 + 160) = v27;
    v27 = *(_QWORD **)(v28 + 16);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v28 + 16) = v27;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_13;
    goto LABEL_26;
  }
  __break(1u);
LABEL_26:
  v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27[2] + 1, 1, v27);
  *(_QWORD *)(v28 + 16) = v27;
LABEL_13:
  v49 = v27[2];
  v48 = v27[3];
  if (v49 >= v48 >> 1)
    v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v48 > 1), v49 + 1, 1, v27);
  v27[2] = v49 + 1;
  v50 = &v27[3 * v49];
  v51 = v56;
  v50[4] = v24;
  v50[5] = v51;
  *((_BYTE *)v50 + 48) = v55;
  *(_QWORD *)(v28 + 16) = v27;
  v52 = v59;
  JSONDecoderImpl.unkeyedContainer()(v58);
  if (v52)
  {
    *(_QWORD *)(v28 + 160) = v25;
    swift_retain();
    swift_release();
    v25 = *(_QWORD **)(v28 + 16);
    if (v25[2])
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        v53 = v25[2];
        if (v53)
        {
LABEL_23:
          v25[2] = v53 - 1;
          *(_QWORD *)(v28 + 16) = v25;
          swift_release();
          return swift_release();
        }
        goto LABEL_19;
      }
    }
    else
    {
      __break(1u);
    }
    v25 = specialized _ArrayBuffer._consumeAndCreateNew()(v25);
    v53 = v25[2];
    if (v53)
      goto LABEL_23;
LABEL_19:
    __break(1u);
  }
  *(_QWORD *)(v28 + 160) = v25;
  swift_retain();
  swift_release();
  v25 = *(_QWORD **)(v28 + 16);
  if (!v25[2])
  {
    __break(1u);
LABEL_31:
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v25);
    v25 = (_QWORD *)result;
    v53 = *(_QWORD *)(result + 16);
    if (v53)
      goto LABEL_23;
    goto LABEL_32;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
    goto LABEL_31;
  v53 = v25[2];
  if (v53)
    goto LABEL_23;
LABEL_32:
  __break(1u);
  return result;
}

void protocol witness for Decoder.unkeyedContainer() in conformance JSONDecoderImpl(uint64_t *a1@<X8>)
{
  JSONDecoderImpl.unkeyedContainer()(a1);
}

void JSONDecoderImpl.unkeyedContainer()(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  unint64_t v21;

  v2 = v1;
  v4 = v2[2];
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = v4 + 24 * v5;
    v8 = *(_QWORD *)(v6 + 8);
    v7 = *(_QWORD *)(v6 + 16);
    v9 = *(unsigned __int8 *)(v6 + 24);
    if (v9 >> 5 == 4)
    {
      v15 = v2[20];
      v16 = v2[4];
      a1[3] = (uint64_t)&unk_1E0F1BF30;
      a1[4] = lazy protocol witness table accessor for type JSONDecoderImpl.UnkeyedContainer and conformance JSONDecoderImpl.UnkeyedContainer();
      v17 = swift_allocObject();
      *a1 = v17;
      *(_QWORD *)(v17 + 16) = v2;
      *(_QWORD *)(v17 + 24) = v8;
      *(_QWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 32) = v16;
      *(_BYTE *)(v17 + 56) = -2;
      *(_QWORD *)(v17 + 64) = v7;
      *(_BYTE *)(v17 + 72) = 0;
      *(_QWORD *)(v17 + 80) = 0;
      *(_QWORD *)(v17 + 88) = v15;
      swift_retain();
      swift_retain();
      swift_retain();
      return;
    }
    v10 = v9 >> 5 == 5 && (v7 | v8) == 0;
    if (v10 && v9 == 160)
    {
      v18 = type metadata accessor for DecodingError();
      swift_allocError();
      v20 = v19;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
      v21 = v2[20];
      swift_retain();
      _CodingPathNode.path.getter(v21);
      swift_release();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v20, *MEMORY[0x1E0DEC460], v18);
      swift_willThrow();
      return;
    }
    type metadata accessor for DecodingError();
    swift_allocError();
    *v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
    v12 = v2[20];
    swift_retain();
    _CodingPathNode.path.getter(v12);
    swift_release();
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease();
    v13 = v2[2];
    if (*(_QWORD *)(v13 + 16))
      __asm { BR              X10 }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type JSONDecoderImpl.UnkeyedContainer and conformance JSONDecoderImpl.UnkeyedContainer()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type JSONDecoderImpl.UnkeyedContainer and conformance JSONDecoderImpl.UnkeyedContainer;
  if (!lazy protocol witness table cache variable for type JSONDecoderImpl.UnkeyedContainer and conformance JSONDecoderImpl.UnkeyedContainer)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for JSONDecoderImpl.UnkeyedContainer, &unk_1E0F1BF30);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JSONDecoderImpl.UnkeyedContainer and conformance JSONDecoderImpl.UnkeyedContainer);
  }
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PredicateExpressionCodingKeys()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6973736572707865;
  if (*v0 != 1)
    v1 = 0x7275746375727473;
  if (*v0)
    return v1;
  else
    return 0x656C626169726176;
}

uint64_t storeEnumTagSinglePayload for PredicateExpressionCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1818DE85C + 4 * byte_18205EC59[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1818DE890 + 4 * byte_18205EC54[v4]))();
}

uint64_t sub_1818DE890(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1818DE898(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1818DE8A0);
  return result;
}

uint64_t sub_1818DE8AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1818DE8B4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1818DE8B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1818DE8C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.Equal<A, B>(_QWORD *a1)
{
  return PredicateExpressions.Equal<>.encode(to:)(a1);
}

uint64_t PredicateExpressions.Equal<>.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v3[24];
  uint64_t v4;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t protocol witness for Encoder.unkeyedContainer() in conformance __JSONEncoder@<X0>(_QWORD *a1@<X8>)
{
  return __JSONEncoder.unkeyedContainer()(a1);
}

uint64_t __JSONEncoder.unkeyedContainer()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;

  v2 = v1;
  v4 = v1 + 2;
  if (((*(uint64_t (**)(void))(*v1 + 208))() & 1) != 0)
  {
    type metadata accessor for JSONReference();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(v5 + 24) = 0;
    *(_BYTE *)(v5 + 32) = 3;
    v6 = swift_retain();
    MEMORY[0x186DA4AFC](v6);
    if (*(_QWORD *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    goto LABEL_13;
  }
  v7 = *v4;
  if (!((unint64_t)*v4 >> 62))
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_7;
LABEL_15:
    v9 = swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_16;
  }
  swift_bridgeObjectRetain();
  v8 = _CocoaArrayWrapper.endIndex.getter();
  if (!v8)
    goto LABEL_15;
LABEL_7:
  v9 = v8 - 1;
  if (__OFSUB__(v8, 1))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if ((v7 & 0xC000000000000001) == 0)
  {
    if ((v9 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v9 < *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v5 = *(_QWORD *)(v7 + 8 * v9 + 32);
      swift_retain();
      goto LABEL_12;
    }
    __break(1u);
    goto LABEL_20;
  }
LABEL_17:
  v5 = MEMORY[0x186DA53A8](v9, v7);
LABEL_12:
  swift_bridgeObjectRelease();
  if (*(_BYTE *)(v5 + 32) == 3)
  {
LABEL_13:
    v10 = v2[18];
    a1[3] = &unk_1E0F27BD0;
    a1[4] = lazy protocol witness table accessor for type _JSONUnkeyedEncodingContainer and conformance _JSONUnkeyedEncodingContainer();
    *a1 = v2;
    a1[1] = v5;
    a1[2] = v10;
    swift_retain();
    return swift_retain();
  }
LABEL_20:
  result = swift_release();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type _JSONUnkeyedEncodingContainer and conformance _JSONUnkeyedEncodingContainer()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _JSONUnkeyedEncodingContainer and conformance _JSONUnkeyedEncodingContainer;
  if (!lazy protocol witness table cache variable for type _JSONUnkeyedEncodingContainer and conformance _JSONUnkeyedEncodingContainer)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for _JSONUnkeyedEncodingContainer, &unk_1E0F27BD0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _JSONUnkeyedEncodingContainer and conformance _JSONUnkeyedEncodingContainer);
  }
  return result;
}

uint64_t Predicate.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t MetatypeMetadata;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t TupleTypeMetadata;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD **v41;
  uint64_t v42;
  _QWORD *v43;
  int *v44;
  char **v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t **v51;
  uint64_t v52;
  int *v53;
  _QWORD *v54;
  uint64_t v55;
  int v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t *v61;
  int *v62;
  _QWORD *v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *DynamicType;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  Swift::String v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t *v113;
  uint64_t *v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  unint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unsigned __int8 v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unsigned __int8 v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char v142[8];
  uint64_t v143;
  uint64_t v144;

  v4 = *(_QWORD *)(a2 + 16);
  v128 = 8 * v4;
  v130 = a2;
  if (v4 == 1)
  {
    MetatypeMetadata = swift_getMetatypeMetadata();
  }
  else
  {
    MEMORY[0x1E0C80A78](a1);
    if (v4)
    {
      v7 = *(_QWORD *)(v130 + 24) & 0xFFFFFFFFFFFFFFFELL;
      v8 = (uint64_t *)((char *)&v109 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
      v9 = v4;
      do
      {
        v7 += 8;
        *v8++ = swift_getMetatypeMetadata();
        --v9;
      }
      while (v9);
    }
    MetatypeMetadata = swift_getTupleTypeMetadata();
  }
  v118 = &v109;
  v111 = MetatypeMetadata;
  MEMORY[0x1E0C80A78](MetatypeMetadata);
  v11 = (char *)&v109 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PredicateExpressionCodingKeys>);
  v117 = &v109;
  v125 = v12;
  v116 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v129 = (char *)&v109 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = v2;
  if (v4 == 1)
  {
    TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable(0, *(_QWORD *)(*(_QWORD *)(v130 + 24) & 0xFFFFFFFFFFFFFELL), v14, v15);
  }
  else
  {
    MEMORY[0x1E0C80A78](v13);
    if (v4)
    {
      v21 = (uint64_t *)(*(_QWORD *)(v130 + 24) & 0xFFFFFFFFFFFFFFFELL);
      v22 = (uint64_t *)((char *)&v109 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
      v23 = v4;
      do
      {
        v24 = *v21++;
        *v22++ = type metadata accessor for PredicateExpressions.Variable(255, v24, v18, v19);
        --v23;
      }
      while (v23);
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  v126 = (_QWORD *)TupleTypeMetadata;
  v119 = *(_QWORD *)(TupleTypeMetadata - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata);
  v26 = (char *)&v109 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27);
  v29 = (char *)&v109 - v28;
  v113 = &v109;
  MEMORY[0x1E0C80A78](v30);
  v32 = (char *)&v109 - v31;
  if (one-time initialization token for predicateArchivingState != -1)
    swift_once();
  v33 = pthread_getspecific(static _ThreadLocal.Key<A>.predicateArchivingState);
  v115 = &v109;
  v114 = &v109;
  if (v33)
  {
    LODWORD(v120) = 0;
    v34 = (uint64_t *)(*v33 + 16);
    v35 = (uint64_t *)(*v33 + 24);
  }
  else
  {
    if (one-time initialization token for standardConfiguration != -1)
      swift_once();
    v34 = &static PredicateCodableConfiguration.standardConfiguration;
    v35 = &qword_1EDC3C640;
    LODWORD(v120) = byte_1EDC3C648;
  }
  v36 = *v35;
  v124 = *v34;
  swift_bridgeObjectRetain();
  v127 = v36;
  swift_bridgeObjectRetain();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  v37 = (uint64_t)v121;
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v121, (uint64_t)&v139);
  v110 = v141;
  v122 = v140;
  v123 = __swift_project_boxed_opaque_existential_1(&v139, v140);
  v112 = &v109;
  v38 = MEMORY[0x1E0C80A78](v123);
  v40 = (v39 + 15) & 0xFFFFFFFFFFFFFFF0;
  v41 = (_QWORD **)((char *)&v109 - v40);
  v42 = v37 + *(int *)(v130 + 36);
  v43 = v126;
  (*(void (**)(char *, uint64_t, _QWORD *, __n128))(v119 + 16))(v29, v42, v126, v38);
  if (v4)
  {
    v44 = (int *)(v43 + 4);
    v45 = (char **)((char *)&v109 - v40);
    v46 = v4;
    do
    {
      if (v4 == 1)
      {
        LODWORD(v47) = 0;
        v48 = v32;
      }
      else
      {
        v47 = *v44;
        v48 = &v32[v47];
      }
      *(_QWORD *)v48 = *(_QWORD *)&v29[(int)v47];
      *v45++ = v48;
      v44 += 4;
      --v46;
    }
    while (v46);
  }
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v142, v143);
  lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys();
  v49 = dispatch thunk of UnkeyedEncodingContainer.nestedContainer<A>(keyedBy:)();
  MEMORY[0x1E0C80A78](v49);
  v51 = (uint64_t **)((char *)&v109 - v40);
  v52 = v124;
  if (v4)
  {
    v53 = (int *)(v126 + 4);
    v54 = (uint64_t *)((char *)&v109 - v40);
    v55 = v4;
    do
    {
      if (v4 == 1)
        v56 = 0;
      else
        v56 = *v53;
      v57 = *v41++;
      *(_QWORD *)&v26[v56] = *v57;
      *v54++ = &v26[v56];
      v53 += 4;
      --v55;
    }
    while (v55);
  }
  v136 = v52;
  v137 = v127;
  v138 = v120;
  MEMORY[0x1E0C80A78](v50);
  v60 = (char *)&v109 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v4)
  {
    v61 = (uint64_t *)(*(_QWORD *)(v58 + 24) & 0xFFFFFFFFFFFFFFFELL);
    v62 = (int *)(v111 + 32);
    v63 = (uint64_t *)((char *)&v109 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0));
    v64 = v4;
    do
    {
      if (v4 == 1)
        v65 = 0;
      else
        v65 = *v62;
      v66 = *v61++;
      *(_QWORD *)&v11[v65] = v66;
      *v63++ = &v11[v65];
      v62 += 4;
      --v64;
    }
    while (v64);
  }
  v67 = *(_QWORD *)(v58 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v128 = v67;
  PredicateCodableConfiguration.allowInputs<each A>(_:)((uint64_t)v60, v4, v67);
  v68 = v122;
  v135 = v122;
  v69 = __swift_allocate_boxed_opaque_existential_1(&v132);
  (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v68 - 8) + 16))(v69, v123, v68);
  __swift_project_boxed_opaque_existential_1(&v132, v135);
  DynamicType = (uint64_t *)swift_getDynamicType();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v132);
  v71 = v136;
  v72 = v137;
  v132 = v136;
  v133 = v137;
  LODWORD(v130) = v138;
  v134 = v138;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v73 = PredicateCodableConfiguration._identifier(for:)(DynamicType);
  v126 = &v109;
  if (!v74)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v85 = _typeName(_:qualified:)();
    v87 = v86;
    v132 = 47;
    v133 = 0xE100000000000000;
    v144 = MEMORY[0x1E0DEE9D8];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], MEMORY[0x1E0DEAF20]);
    v88._countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
    String.append(_:)(v88);
    swift_bridgeObjectRelease();
    v89 = v132;
    v90 = v133;
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    swift_allocError();
    *(_QWORD *)v91 = v85;
    *(_QWORD *)(v91 + 8) = v87;
    *(_QWORD *)(v91 + 16) = v89;
    *(_QWORD *)(v91 + 24) = v90;
    *(_BYTE *)(v91 + 32) = 0;
    swift_willThrow();
    goto LABEL_43;
  }
  v76 = v74;
  v121 = v73;
  if ((v75 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v109 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v77 = Type.genericArguments2.getter();
    v79 = v78;
    v81 = v80;
    swift_bridgeObjectRetain();
    LOBYTE(v108) = 0;
    v82 = v77;
    v83 = v131;
    v84 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF18ReflectionInternal17GenericArguments2V_10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOsAE_pTg5016_s10Foundation19i12Structure33_klmnopqrs18LLV_4with4pathAD18d63Internal4TypeV_AA29PredicateCodableConfigurationVSaySSGtKcfcAD8t5OAG07F9U0OKXEfU_AI29PredicateCodableConfigurationVSaySSGSS10identifier_Sb10isConcretetTf1cn_nTf4nggg_n(v82, v79, v81, v71, v72, v130, MEMORY[0x1E0DEE9D8], (uint64_t)v121, v76);
    if (v83)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
LABEL_43:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v92 = v116;
      goto LABEL_54;
    }
    v109 = v84;
    v131 = 0;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v111 = v76;
  v119 = v72;
  v120 = v71;
  LOBYTE(v144) = 0;
  v93 = KeyedEncodingContainer.nestedUnkeyedContainer(forKey:)();
  if (v4)
  {
    v94 = (uint64_t *)(v128 & 0xFFFFFFFFFFFFFFFELL);
    v95 = v4;
    while (1)
    {
      v96 = *v94;
      v144 = **v51;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v132, v135);
      v99 = type metadata accessor for PredicateExpressions.Variable(0, v96, v97, v98);
      MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.Variable<A>, v99);
      v100 = v131;
      v93 = dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
      v131 = v100;
      if (v100)
        break;
      ++v51;
      ++v94;
      if (!--v95)
        goto LABEL_50;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v132);
  }
  else
  {
LABEL_50:
    MEMORY[0x1E0C80A78](v93);
    v101 = v122;
    *(&v109 - 10) = v4;
    *(&v109 - 9) = v101;
    *(&v109 - 8) = v128;
    v102 = v110;
    *(&v109 - 7) = *(_QWORD *)(v110 + 8);
    v103 = v129;
    *(&v109 - 6) = *(_QWORD *)(v102 + 24);
    *(&v109 - 5) = (uint64_t)v103;
    v104 = v111;
    *(&v109 - 4) = (uint64_t)v121;
    *(&v109 - 3) = v104;
    v107 = v109;
    v108 = v123;
    v105 = v131;
    specialized _withPredicateArchivingState<A>(_:_:)(v120, v119, v130, (void (*)(uint64_t))partial apply for closure #1 in KeyedEncodingContainer<>._encode<A, B>(_:variable:predicateConfiguration:));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v132);
    if (!v105)
    {
      (*(void (**)(char *, uint64_t))(v116 + 8))(v103, v125);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v139);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v142);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  v92 = v116;
LABEL_54:
  (*(void (**)(char *, uint64_t))(v92 + 8))(v129, v125);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v139);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v142);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t destroy for _JSONKeyedEncodingContainer()
{
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t *PredicateCodableConfiguration._identifier(for:)(uint64_t *result)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  uint64_t v30;

  v2 = 0;
  v3 = *(_QWORD *)(v1 + 8);
  v4 = 1 << *(_BYTE *)(v3 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v3 + 64;
  v7 = v5 & *(_QWORD *)(v3 + 64);
  v8 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v2 << 6);
      goto LABEL_24;
    }
    v11 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
LABEL_64:
      __break(1u);
      goto LABEL_65;
    }
    if (v11 >= v8)
      goto LABEL_27;
    v12 = *(_QWORD *)(v6 + 8 * v11);
    ++v2;
    if (!v12)
    {
      v2 = v11 + 1;
      if (v11 + 1 >= v8)
        goto LABEL_27;
      v12 = *(_QWORD *)(v6 + 8 * v2);
      if (!v12)
      {
        v2 = v11 + 2;
        if (v11 + 2 >= v8)
          goto LABEL_27;
        v12 = *(_QWORD *)(v6 + 8 * v2);
        if (!v12)
        {
          v2 = v11 + 3;
          if (v11 + 3 >= v8)
            goto LABEL_27;
          v12 = *(_QWORD *)(v6 + 8 * v2);
          if (!v12)
          {
            v2 = v11 + 4;
            if (v11 + 4 >= v8)
              goto LABEL_27;
            v12 = *(_QWORD *)(v6 + 8 * v2);
            if (!v12)
              break;
          }
        }
      }
    }
LABEL_23:
    v14 = __clz(__rbit64(v12));
    v7 = (v12 - 1) & v12;
    v10 = v14 + (v2 << 6);
LABEL_24:
    v15 = *(_QWORD *)(v3 + 56) + 16 * v10;
    if ((*(_BYTE *)(v15 + 8) & 1) == 0 && *(uint64_t **)v15 == result)
    {
LABEL_60:
      v30 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v10);
      swift_bridgeObjectRetain();
      return (uint64_t *)v30;
    }
  }
  v13 = v11 + 5;
  if (v13 < v8)
  {
    v12 = *(_QWORD *)(v6 + 8 * v13);
    if (!v12)
    {
      while (1)
      {
        v2 = v13 + 1;
        if (__OFADD__(v13, 1))
          break;
        if (v2 >= v8)
          goto LABEL_27;
        v12 = *(_QWORD *)(v6 + 8 * v2);
        ++v13;
        if (v12)
          goto LABEL_23;
      }
LABEL_65:
      __break(1u);
      goto LABEL_66;
    }
    v2 = v13;
    goto LABEL_23;
  }
LABEL_27:
  v16 = *result;
  if ((unint64_t)*result <= 0x7FF && (unint64_t)(v16 - 512) >= 3 && v16 != 0)
    return 0;
  result = (uint64_t *)TypeMetadata.descriptor.getter();
  v18 = 0;
  v19 = 1 << *(_BYTE *)(v3 + 32);
  v20 = -1;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  v21 = v20 & *(_QWORD *)(v3 + 64);
  v22 = (unint64_t)(v19 + 63) >> 6;
  while (2)
  {
    if (v21)
    {
      v23 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      v10 = v23 | (v18 << 6);
      goto LABEL_37;
    }
    v26 = v18 + 1;
    if (__OFADD__(v18, 1))
      goto LABEL_64;
    if (v26 >= v22)
      return 0;
    v27 = *(_QWORD *)(v6 + 8 * v26);
    ++v18;
    if (v27)
      goto LABEL_59;
    v18 = v26 + 1;
    if (v26 + 1 >= v22)
      return 0;
    v27 = *(_QWORD *)(v6 + 8 * v18);
    if (v27)
      goto LABEL_59;
    v18 = v26 + 2;
    if (v26 + 2 >= v22)
      return 0;
    v27 = *(_QWORD *)(v6 + 8 * v18);
    if (v27)
      goto LABEL_59;
    v18 = v26 + 3;
    if (v26 + 3 >= v22)
      return 0;
    v27 = *(_QWORD *)(v6 + 8 * v18);
    if (v27)
      goto LABEL_59;
    v18 = v26 + 4;
    if (v26 + 4 >= v22)
      return 0;
    v27 = *(_QWORD *)(v6 + 8 * v18);
    if (v27)
    {
LABEL_59:
      v29 = __clz(__rbit64(v27));
      v21 = (v27 - 1) & v27;
      v10 = v29 + (v18 << 6);
LABEL_37:
      v24 = *(_QWORD *)(v3 + 56) + 16 * v10;
      if (*(_BYTE *)(v24 + 8) == 1 && result == *(uint64_t **)v24)
        goto LABEL_60;
      continue;
    }
    break;
  }
  v28 = v26 + 5;
  if (v28 >= v22)
    return 0;
  v27 = *(_QWORD *)(v6 + 8 * v28);
  if (v27)
  {
    v18 = v28;
    goto LABEL_59;
  }
  while (1)
  {
    v18 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v18 >= v22)
      return 0;
    v27 = *(_QWORD *)(v6 + 8 * v18);
    ++v28;
    if (v27)
      goto LABEL_59;
  }
LABEL_66:
  __break(1u);
  return result;
}

void _JSONUnkeyedEncodingContainer.nestedContainer<A>(keyedBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v3;
  unint64_t *v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = v3;
  v7 = v3[1];
  v9 = v7 + 16;
  v8 = *(_QWORD *)(v7 + 16);
  v10 = *(unsigned __int8 *)(v7 + 32);
  if (v10 == 4)
  {
    v11 = *(_QWORD *)(v8 + 16);
    goto LABEL_6;
  }
  if (v10 != 3)
    goto LABEL_19;
  if (v8 >> 62)
    goto LABEL_17;
  v11 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_6:
  while (1)
  {
    type metadata accessor for JSONReference();
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = MEMORY[0x1E0DEE9E0];
    *(_QWORD *)(v12 + 24) = 0;
    *(_BYTE *)(v12 + 32) = 4;
    if (*(_BYTE *)(v7 + 32) != 3)
      break;
    v23 = *(_QWORD *)(v7 + 16);
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(_BYTE *)(v7 + 32) = 7;
    v13 = swift_retain();
    MEMORY[0x186DA4AFC](v13);
    if (*(_QWORD *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    v14 = *(_QWORD *)(v7 + 16);
    v15 = *(_QWORD *)(v7 + 24);
    *(_QWORD *)(v7 + 16) = v23;
    *(_QWORD *)(v7 + 24) = 0;
    v16 = *(_BYTE *)(v7 + 32);
    *(_BYTE *)(v7 + 32) = 3;
    outlined consume of JSONReference.Backing(v14, v15, v16);
    v8 = *v4;
    v9 = v4[2];
    v4 = (unint64_t *)swift_allocObject();
    v4[5] = (unint64_t)&type metadata for _CodingKey;
    v4[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    v17 = swift_allocObject();
    v4[2] = v17;
    *(_QWORD *)(v17 + 24) = 0;
    *(_QWORD *)(v17 + 32) = 0;
    *(_QWORD *)(v17 + 16) = v11;
    *(_BYTE *)(v17 + 40) = 2;
    v4[7] = v9;
    if (v9 >> 62)
    {
      v19 = 0;
      if (v9 >> 62 != 1)
        goto LABEL_14;
      v20 = (uint64_t *)((v9 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      v20 = (uint64_t *)(v9 + 64);
    }
    v19 = *v20;
    swift_retain();
LABEL_14:
    if (!__OFADD__(v19, 1))
    {
      v4[8] = v19 + 1;
      v21 = type metadata accessor for _JSONKeyedEncodingContainer(0, a2, a3, v18);
      swift_retain();
      MEMORY[0x186DA9D64](&protocol conformance descriptor for _JSONKeyedEncodingContainer<A>, v21);
      KeyedEncodingContainer.init<A>(_:)();
      return;
    }
    __break(1u);
LABEL_17:
    v22 = *(_QWORD *)(v7 + 24);
    swift_bridgeObjectRetain();
    v11 = _CocoaArrayWrapper.endIndex.getter();
    outlined consume of JSONReference.Backing(v8, v22, 3);
  }
  __break(1u);
LABEL_19:
  __break(1u);
}

void static MeasurementFormatUnitUsage<>.wind.getter(_BYTE *a1@<X8>)
{
  *a1 = 10;
}

uint64_t NSKeyValueProxyIsEqual(void *a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;

  v3 = objc_msgSend(a1, "_proxyLocator");
  v5 = v4;
  if (v3 != objc_msgSend(a2, "_proxyLocator"))
    return 0;
  if (v5 == v6)
    return 1;
  return objc_msgSend(v5, "isEqual:", v6);
}

uint64_t NSKeyValueProxyHash(void *a1)
{
  uint64_t v1;
  id v2;

  v1 = objc_msgSend(a1, "_proxyLocator");
  return v1 ^ objc_msgSend(v2, "hash");
}

NSNumber __swiftcall Bool._bridgeToObjectiveC()()
{
  char v0;

  return (NSNumber)objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithBool_, v0 & 1);
}

void Data.append(_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

ValueMetadata *type metadata accessor for String.LocalizationValue.StringInterpolation()
{
  return &type metadata for String.LocalizationValue.StringInterpolation;
}

id localizedDescriptionForError(void *a1, uint64_t a2)
{
  id result;

  if (objc_msgSend(a1, "isEqualToString:", CFSTR("NSURLErrorDomain")))
    return (id)_CFNetworkErrorCopyLocalizedDescriptionWithHostname();
  pthread_once(&initControl, WebNSErrorExtrasInit);
  result = (id)objc_msgSend((id)descriptions, "objectForKey:", a1);
  if (result)
    return (id)objc_msgSend(result, "objectForKey:", +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a2));
  return result;
}

uint64_t static Measurement.== infix<A, B>(_:_:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  double v3;
  void *v4;
  double v5;
  uint64_t result;
  void *v7;
  void *v8;
  void *ObjCClassFromObject;
  id v10;
  id v11;
  id v12;
  id v13;
  char v14;
  id v15;
  double v16;
  id v17;
  double v18;

  v2 = *(void **)a1;
  v3 = *(double *)(a1 + 8);
  v4 = *(void **)a2;
  v5 = *(double *)(a2 + 8);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  if ((static NSObject.== infix(_:_:)() & 1) != 0)
    return v3 == v5;
  objc_opt_self();
  result = swift_dynamicCastObjCClass();
  if (result)
  {
    v7 = (void *)result;
    objc_opt_self();
    result = swift_dynamicCastObjCClass();
    if (result)
    {
      v8 = (void *)result;
      ObjCClassFromObject = (void *)swift_getObjCClassFromObject();
      v10 = v2;
      v11 = v4;
      v12 = objc_msgSend(ObjCClassFromObject, sel_baseUnit);
      v13 = objc_msgSend((id)swift_getObjCClassFromObject(), sel_baseUnit);
      v14 = static NSObject.== infix(_:_:)();

      if ((v14 & 1) != 0)
      {
        v15 = objc_msgSend(v7, sel_converter);
        objc_msgSend(v15, sel_baseUnitValueFromValue_, v3);
        v3 = v16;

        v17 = objc_msgSend(v8, sel_converter);
        objc_msgSend(v17, sel_baseUnitValueFromValue_, v5);
        v5 = v18;

        return v3 == v5;
      }

      return 0;
    }
  }
  return result;
}

id _NSKeyValueGetterForClassAndKey(const void *(__cdecl *a1)(CFAllocatorRef, const void *), const void *a2, void *a3)
{
  const __CFSet *v6;
  __int128 v7;
  CFHashCode v8;
  id Value;
  CFSetCallBacks v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_lock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
  v6 = (const __CFSet *)_MergedGlobals_98;
  if (!_MergedGlobals_98)
  {
    v7 = *(_OWORD *)(MEMORY[0x1E0C9B3B0] + 16);
    *(_OWORD *)&v11.version = *MEMORY[0x1E0C9B3B0];
    *(_OWORD *)&v11.release = v7;
    v11.equal = (CFSetEqualCallBack)NSKeyValueAccessorIsEqual;
    v11.hash = (CFSetHashCallBack)NSKeyValueAccessorHash;
    v6 = CFSetCreateMutable(0, 0, &v11);
    _MergedGlobals_98 = (uint64_t)v6;
  }
  v11.version = 0;
  v11.retain = a1;
  *(_OWORD *)&v11.release = (unint64_t)a2;
  if (a2)
  {
    v8 = CFHash(a2);
    v6 = (const __CFSet *)_MergedGlobals_98;
  }
  else
  {
    v8 = 0;
  }
  v11.copyDescription = (CFSetCopyDescriptionCallBack)(v8 ^ (unint64_t)a1);
  Value = (id)CFSetGetValue(v6, &v11);
  if (!Value)
  {
    Value = objc_msgSend(a3, sel__createValueGetterWithContainerClassID_key_, a1, a2, *(_OWORD *)&v11.version, v11.release);
    CFSetAddValue((CFMutableSetRef)_MergedGlobals_98, Value);

  }
  os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
  return Value;
}

void sub_1818E06CC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

ValueMetadata *type metadata accessor for JSONMap.Value()
{
  return &type metadata for JSONMap.Value;
}

id NSNotificationCenter.publisher(for:object:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  void *v3;
  id v4;

  *a3 = v3;
  a3[1] = a1;
  a3[2] = a2;
  swift_unknownObjectRetain();
  v4 = v3;
  return a1;
}

void *protocol witness for Encodable.encode(to:) in conformance URL(_QWORD *a1)
{
  return URL.encode(to:)(a1);
}

void *URL.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *result;
  id v11;
  uint64_t v12;
  void *v13;
  _QWORD v14[2];
  id v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<URL.CodingKeys>);
  v19 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(void **)v1;
  v7 = *(_QWORD *)(v1 + 8);
  v8 = *(_QWORD *)(v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type URL.CodingKeys and conformance URL.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  swift_retain();
  v9 = v6;
  swift_retain();
  result = (void *)_foundation_swift_url_feature_enabled();
  if ((_DWORD)result)
  {
    if (!v7)
    {
      __break(1u);
      return result;
    }
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();

  }
  else
  {
    v11 = objc_msgSend(v9, sel_relativeString);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    swift_release();
    swift_release();

  }
  v12 = v14[1];
  LOBYTE(v18) = 1;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v12)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v5, v3);
    return (void *)swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v15 = v9;
    v16 = v7;
    v17 = v8;
    URL.baseURL.getter((uint64_t *)&v18);
    v13 = v18;
    if (v18)
    {
      LOBYTE(v15) = 0;
      lazy protocol witness table accessor for type URL and conformance URL();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v5, v3);
      return outlined consume of URL?(v13);
    }
    else
    {
      return (void *)(*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v5, v3);
    }
  }
}

id _NSLocalizedStringResourceSwiftWrapper.init(coder:)(void *a1)
{
  void *v1;
  objc_class *ObjectType;
  char *v4;
  uint64_t v5;
  void *v6;
  uint64_t inited;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char *v21;
  id v22;
  objc_super v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;

  ObjectType = (objc_class *)swift_getObjectType();
  v4 = v1;
  if (objc_msgSend(a1, sel_allowsKeyedCoding)
    && (v5 = specialized NSCoder.decodeObject<A>(of:forKey:)(0xD000000000000020, 0x800000018230C000, (unint64_t *)&lazy cache variable for type metadata for NSData)) != 0)
  {
    v6 = (void *)v5;
    type metadata accessor for PropertyListDecoder();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = MEMORY[0x1E0DEE9E0];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<()>._Buffer);
    v8 = swift_allocObject();
    *(_DWORD *)(v8 + 16) = 0;
    *(_QWORD *)(inited + 24) = v8;
    v9 = specialized Data.init(referencing:)(v6);
    v11 = v10;
    specialized PropertyListDecoder.decode<A>(_:from:format:)((uint64_t)v9, v10);
    swift_release();

    outlined consume of Data._Representation((uint64_t)v9, v11);
    v13 = v26;
    v14 = v27;
    v15 = v30;
    v16 = v25;
    v17 = v29;
    v18 = v28;
    v19 = v31;
    v20 = v32;
    v21 = &v4[OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped];
    *(_QWORD *)v21 = v24;
    *(_OWORD *)(v21 + 8) = v16;
    *((_QWORD *)v21 + 3) = v13;
    *((_QWORD *)v21 + 4) = v14;
    *(_OWORD *)(v21 + 40) = v18;
    *(_OWORD *)(v21 + 56) = v17;
    *((_QWORD *)v21 + 9) = v15;
    *((_OWORD *)v21 + 5) = v19;
    *((_OWORD *)v21 + 6) = v20;

    v23.receiver = v4;
    v23.super_class = ObjectType;
    v22 = objc_msgSendSuper2(&v23, sel_init);

  }
  else
  {

    swift_deallocPartialClassInstance();
    return 0;
  }
  return v22;
}

uint64_t type metadata accessor for PropertyListDecoder()
{
  return objc_opt_self();
}

uint64_t dispatch thunk of PropertyListDecoder.decode<A>(_:from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t PropertyListDecoder.decode<A>(_:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;

  v7 = 200;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v5 + 160))(a1, a2, a3, &v7, a4, a5);
}

void specialized PropertyListDecoder.decode<A>(_:from:format:)(uint64_t a1, uint64_t a2)
{
  specialized static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)(a1, a2);
}

void PropertyListDecoder.decode<A>(_:from:format:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)(a2, a3);
}

uint64_t PropertyListDecoder.decode<A>(_:fromTopLevel:)@<X0>(ValueMetadata *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  ValueMetadata **v17;
  ValueMetadata **v18;
  _BYTE v20[32];
  uint64_t v21;

  v21 = a4;
  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = &v20[-v11];
  outlined init with copy of Any((uint64_t)a2, (uint64_t)v20);
  v13 = *(_QWORD *)(v4 + 16);
  type metadata accessor for __PlistDictionaryDecoder();
  swift_allocObject();
  swift_bridgeObjectRetain();
  __PlistDictionaryDecoder.init(referencing:at:options:)((uint64_t)v20, MEMORY[0x1E0DEE9D8], v13);
  __PlistDictionaryDecoder.unbox<A>(_:as:)(a2, a1, a3, (uint64_t)v12);
  if (v5)
    return swift_release();
  v14 = v21;
  v15 = *(_QWORD *)(a3 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v15 + 48))(v12, 1, a3) == 1)
  {
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
    v16 = type metadata accessor for DecodingError();
    swift_allocError();
    v18 = v17;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v18 = a1;
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(ValueMetadata **, _QWORD, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v18, *MEMORY[0x1E0DEC460], v16);
    swift_willThrow();
    return swift_release();
  }
  swift_release();
  return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v15 + 32))(v14, v12, a3);
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue and conformance String.LocalizationValue()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue and conformance String.LocalizationValue;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue and conformance String.LocalizationValue)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue, &type metadata for String.LocalizationValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue and conformance String.LocalizationValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue and conformance String.LocalizationValue;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue and conformance String.LocalizationValue)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue, &type metadata for String.LocalizationValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue and conformance String.LocalizationValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue and conformance String.LocalizationValue;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue and conformance String.LocalizationValue)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue, &type metadata for String.LocalizationValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue and conformance String.LocalizationValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue and conformance String.LocalizationValue;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue and conformance String.LocalizationValue)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue, &type metadata for String.LocalizationValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue and conformance String.LocalizationValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue and conformance String.LocalizationValue;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue and conformance String.LocalizationValue)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue, &type metadata for String.LocalizationValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue and conformance String.LocalizationValue);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale and conformance Locale()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale and conformance Locale;
  if (!lazy protocol witness table cache variable for type Locale and conformance Locale)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale, &type metadata for Locale);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale and conformance Locale);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale and conformance Locale;
  if (!lazy protocol witness table cache variable for type Locale and conformance Locale)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale, &type metadata for Locale);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale and conformance Locale);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale and conformance Locale;
  if (!lazy protocol witness table cache variable for type Locale and conformance Locale)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale, &type metadata for Locale);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale and conformance Locale);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale and conformance Locale;
  if (!lazy protocol witness table cache variable for type Locale and conformance Locale)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale, &type metadata for Locale);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale and conformance Locale);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale and conformance Locale;
  if (!lazy protocol witness table cache variable for type Locale and conformance Locale)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale, &type metadata for Locale);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale and conformance Locale);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale and conformance Locale;
  if (!lazy protocol witness table cache variable for type Locale and conformance Locale)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale, &type metadata for Locale);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale and conformance Locale);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale and conformance Locale;
  if (!lazy protocol witness table cache variable for type Locale and conformance Locale)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale, &type metadata for Locale);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale and conformance Locale);
  }
  return result;
}

void protocol witness for Decodable.init(from:) in conformance URL(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  URL.init(from:)(a1, a2);
}

void URL.init(from:)(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25[3];
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<URL.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type URL.CodingKeys and conformance URL.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    goto LABEL_3;
  LOBYTE(v26) = 1;
  v9 = KeyedDecodingContainer.decode(_:forKey:)();
  v11 = v10;
  LOBYTE(v25[0]) = 0;
  lazy protocol witness table accessor for type URL and conformance URL();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v29 = v26;
  v24 = v27;
  v25[0] = v26;
  v25[1] = v27;
  v25[2] = v28;
  v23 = v28;
  URL.init(string:relativeTo:)(v9, v11, v25, (uint64_t *)&v26);
  swift_bridgeObjectRelease();
  v12 = v26;
  if (!v26)
  {
    v16 = type metadata accessor for DecodingError();
    swift_allocError();
    v22 = v17;
    v19 = a1[3];
    v18 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v19);
    MEMORY[0x186DA5FB4](v19, v18);
    v20 = v22;
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v20, *MEMORY[0x1E0DEC458], v16);
    swift_willThrow();
    outlined consume of URL?(v29);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
LABEL_3:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return;
  }
  v14 = v27;
  v13 = v28;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  outlined consume of URL?(v29);
  *a2 = v12;
  a2[1] = v14;
  a2[2] = v13;
  swift_retain();
  v15 = v12;
  swift_retain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_release();
  swift_release();

}

unint64_t lazy protocol witness table accessor for type URL and conformance URL()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL and conformance URL;
  if (!lazy protocol witness table cache variable for type URL and conformance URL)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL, &type metadata for URL);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL and conformance URL;
  if (!lazy protocol witness table cache variable for type URL and conformance URL)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL, &type metadata for URL);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL and conformance URL;
  if (!lazy protocol witness table cache variable for type URL and conformance URL)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL, &type metadata for URL);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL and conformance URL;
  if (!lazy protocol witness table cache variable for type URL and conformance URL)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL, &type metadata for URL);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL and conformance URL;
  if (!lazy protocol witness table cache variable for type URL and conformance URL)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL, &type metadata for URL);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL and conformance URL;
  if (!lazy protocol witness table cache variable for type URL and conformance URL)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL, &type metadata for URL);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL and conformance URL;
  if (!lazy protocol witness table cache variable for type URL and conformance URL)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL, &type metadata for URL);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type URL.CodingKeys and conformance URL.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.CodingKeys and conformance URL.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.CodingKeys and conformance URL.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.CodingKeys, &type metadata for URL.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.CodingKeys and conformance URL.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.CodingKeys and conformance URL.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.CodingKeys and conformance URL.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.CodingKeys, &type metadata for URL.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.CodingKeys and conformance URL.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.CodingKeys and conformance URL.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.CodingKeys and conformance URL.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.CodingKeys, &type metadata for URL.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.CodingKeys and conformance URL.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URL.CodingKeys and conformance URL.CodingKeys;
  if (!lazy protocol witness table cache variable for type URL.CodingKeys and conformance URL.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URL.CodingKeys, &type metadata for URL.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.CodingKeys and conformance URL.CodingKeys);
  }
  return result;
}

void URL.init(string:relativeTo:)(uint64_t a1@<X0>, unint64_t a2@<X1>, id *a3@<X2>, uint64_t *a4@<X8>)
{
  id v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17[2];

  v7 = *a3;
  if (_foundation_swift_url_feature_enabled())
  {
    v8 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(a1, a2, 1);
    if (v8)
    {
      v9 = v8;
      if ((*(_BYTE *)(v8 + 48) & 1) != 0)
      {
        if (v7)
        {
          swift_retain_n();
          URL.absoluteURL.getter(v17);
          v7 = v17[1];

          swift_release();
          if (v7)
          {
            v10 = swift_retain();
            v11 = (void *)specialized static URL._cfURL(from:baseURL:)(v10);
LABEL_18:
            v16 = v11;
            v15 = specialized static URL._cfURL(from:baseURL:)(v9);
            swift_release_n();

            swift_release();
            goto LABEL_19;
          }
        }
        else
        {
          swift_retain_n();
        }
        v11 = 0;
        goto LABEL_18;
      }
      swift_retain_n();
      String.subscript.getter();
      swift_bridgeObjectRelease();
      v11 = 0;
      v7 = 0;
      goto LABEL_18;
    }
LABEL_14:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  v12 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v12 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v12)
    goto LABEL_14;
  v13 = String._bridgeToObjectiveCImpl()();
  if (v7)
  {
    outlined copy of URL?((uint64_t)v7);
    swift_release();
    swift_release();
  }
  v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99E98]), sel_initWithString_relativeToURL_, v13, v7);
  swift_unknownObjectRelease();

  if (!v14)
    goto LABEL_14;
  v15 = (uint64_t)static URL._converted(from:)(v14);

  v7 = 0;
  v9 = 0;
LABEL_19:
  *a4 = v15;
  a4[1] = v9;
  a4[2] = (uint64_t)v7;
}

uint64_t JSONDecoder.userInfo.setter(uint64_t a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;

  v3 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_optionsLock);
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  *(_QWORD *)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 104) = a1;
  swift_bridgeObjectRelease();
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);
  return swift_release();
}

ValueMetadata *type metadata accessor for IndexSet.Index()
{
  return &type metadata for IndexSet.Index;
}

uint64_t storeEnumTagSinglePayload for NSNotificationCenter.Notifications.State(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance UInt32(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Int32(a1, a2, a3, a4, (SEL *)&selRef_unsignedIntValue, (SEL *)&selRef_initWithUnsignedInt_);
}

id StringProtocol.hash.getter()
{
  void *v0;
  id v1;

  StringProtocol._ephemeralString.getter();
  v0 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v1 = objc_msgSend(v0, sel_hash);
  swift_unknownObjectRelease();
  return v1;
}

uint64_t PropertyListEncoder.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance UUID()
{
  return UUID.uuidString.getter();
}

uint64_t protocol witness for _CalendarProtocol.dateComponents(_:from:to:) in conformance _CalendarAutoupdating(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  return _CalendarAutoupdating.dateComponents(_:from:to:)(a1, a2, a3);
}

uint64_t _CalendarAutoupdating.dateComponents(_:from:to:)(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12[2];

  v3 = *a1;
  v4 = *a2;
  v5 = *a3;
  if (one-time initialization token for cache != -1)
    swift_once();
  v6 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  closure #1 in CalendarCache.current.getter(v12);
  os_unfair_lock_unlock(v6);
  swift_release_n();
  v7 = v12[1];
  ObjectType = swift_getObjectType();
  v12[0] = v3;
  v10 = v5;
  v11 = v4;
  (*(void (**)(uint64_t *, uint64_t *, uint64_t *, uint64_t, uint64_t))(v7 + 208))(v12, &v11, &v10, ObjectType, v7);
  return swift_unknownObjectRelease();
}

void *_NSSwiftCalendar.components(_:from:to:options:)@<X0>(int a1@<W0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  char *v4;
  void *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  _OWORD __src[18];

  v5 = v4;
  v8 = *a2;
  v9 = *a3;
  v10 = _fromNSCalendarUnits(_:)(a1);
  v11 = *(_QWORD *)&v4[OBJC_IVAR____NSSwiftCalendar__lock];
  os_unfair_lock_lock((os_unfair_lock_t)(v11 + 32));
  v20 = *(_OWORD *)(v11 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 32));
  v23 = v20;
  v21 = v9;
  v22 = v8;
  Calendar.dateComponents(_:from:to:)(v10, (double *)&v22, (double *)&v21, __src);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  if ((a1 & 0x100000) != 0)
  {
    type metadata accessor for _NSSwiftCalendar();
    v12 = swift_dynamicCastClass();
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + OBJC_IVAR____NSSwiftCalendar__lock);
      v14 = (os_unfair_lock_s *)(v13 + 32);
      v15 = v4;
      os_unfair_lock_lock((os_unfair_lock_t)(v13 + 32));
      v16 = *(_QWORD *)(v13 + 16);
      v17 = *(_QWORD *)(v13 + 24);
      swift_unknownObjectRetain();
      os_unfair_lock_unlock(v14);

    }
    else
    {
      type metadata accessor for _CalendarBridged();
      v16 = swift_allocObject();
      *(_QWORD *)(v16 + 16) = v5;
      v17 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type _CalendarBridged and conformance _CalendarBridged, (uint64_t (*)(uint64_t))type metadata accessor for _CalendarBridged, (uint64_t)&protocol conformance descriptor for _CalendarBridged);
      v18 = v5;
    }
    swift_unknownObjectRelease();
    *(_QWORD *)&__src[0] = v16;
    *((_QWORD *)&__src[0] + 1) = v17;
    if (*(_QWORD *)&__src[1])
    {
      v23 = __src[1];
      swift_unknownObjectRetain();
      Calendar.timeZone.setter((uint64_t *)&v23);
    }
  }
  if ((a1 & 0x100) != 0)
  {
    *(_QWORD *)&__src[14] = *(_QWORD *)&__src[16];
    BYTE8(__src[14]) = BYTE8(__src[16]);
  }
  return memcpy(a4, __src, 0x11AuLL);
}

void *Calendar.dateComponents(_:from:to:)@<X0>(uint64_t a1@<X0>, double *a2@<X1>, double *a3@<X2>, void *a4@<X8>)
{
  uint64_t *v4;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  uint64_t ObjectType;
  uint64_t v17[2];
  double v18;
  double v19;
  _QWORD __src[36];

  v7 = *a2;
  v8 = *a3;
  v10 = *v4;
  v9 = v4[1];
  v11 = swift_bridgeObjectRetain();
  Calendar.ComponentSet.init(_:)(v11, v17);
  v12 = 1.59271755e13;
  if (v7 <= 1.59271755e13)
    v13 = v7;
  else
    v13 = 1.59271755e13;
  v19 = fmax(v13, -2.11845067e11);
  if (v8 <= 1.59271755e13)
    v12 = v8;
  v14 = fmax(v12, -2.11845067e11);
  ObjectType = swift_getObjectType();
  v18 = v14;
  (*(void (**)(_QWORD *__return_ptr, uint64_t *, double *, double *, uint64_t, uint64_t))(v9 + 208))(__src, v17, &v19, &v18, ObjectType, v9);
  if (specialized Set.contains(_:)(0xEu, a1))
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    __src[0] = v10;
    __src[1] = v9;
    if (__src[2])
    {
      v17[0] = __src[2];
      v17[1] = __src[3];
      swift_unknownObjectRetain();
      Calendar.timeZone.setter(v17);
    }
  }
  return memcpy(a4, __src, 0x11AuLL);
}

uint64_t protocol witness for _CalendarProtocol.dateComponents(_:from:to:) in conformance _CalendarICU()
{
  uint64_t v0;
  os_unfair_lock_s *v1;

  v1 = *(os_unfair_lock_s **)(v0 + 16);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in LockedState<A>.withLock<A>(_:)();
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

uint64_t static Locale.LanguageCode.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16) && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24))
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

__n128 protocol witness for Collection.endIndex.getter in conformance AttributedString.UnicodeScalarView@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 40);
  v3 = *(_OWORD *)(v1 + 56);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Int32(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Int32(a1, a2, a3, a4, (SEL *)&selRef_intValue, (SEL *)&selRef_initWithInt_);
}

double destructiveInjectEnumTag for JSONEncoder.NonConformingFloatEncodingStrategy(uint64_t a1, int a2)
{
  double result;

  if (a2 < 0)
  {
    *(_QWORD *)(a1 + 40) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    *(_QWORD *)(a1 + 8) = (a2 - 1);
  }
  return result;
}

uint64_t static CharacterSet.urlQueryAllowed.getter@<X0>(uint64_t *a1@<X8>)
{
  return static CharacterSet.urlUserAllowed.getter(MEMORY[0x1E0C9A5F0], a1);
}

NSArray *__cdecl NSAllMapTableKeys(NSMapTable *table)
{
  if (!table)
    NSLog((NSString *)CFSTR("%s: map table argument is NULL"), "NSArray * _Nonnull NSAllMapTableKeys(NSMapTable * _Nonnull)");
  return (NSArray *)-[NSMapTable allKeys](table, "allKeys");
}

uint64_t DateComponents.second.setter(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;

  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = result;
  *(_QWORD *)(v2 + 144) = v3;
  *(_BYTE *)(v2 + 152) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t DateComponents.minute.setter(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;

  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = result;
  *(_QWORD *)(v2 + 128) = v3;
  *(_BYTE *)(v2 + 136) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

void _NSSetFloatValueAndNotify(void *a1, const void *a2, float a3)
{
  objc_class *Class;
  double v7;
  CFDictionaryRef *IndexedIvars;
  CFDictionaryRef *v9;
  void *v10;
  IMP MethodImplementation;
  _QWORD v12[7];
  float v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0)
  {
    v9 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    v10 = (void *)objc_msgSend((id)CFDictionaryGetValue(v9[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((_BYTE *)v9 + 40))
    {
      objc_msgSend(a1, "willChangeValueForKey:", v10);
      MethodImplementation = class_getMethodImplementation(*v9, (SEL)a2);
      ((void (*)(void *, const void *, float))MethodImplementation)(a1, a2, a3);
      objc_msgSend(a1, "didChangeValueForKey:", v10);
    }
    else
    {
      v12[0] = MEMORY[0x1E0C809B0];
      v12[1] = 3221225472;
      v12[2] = ___NSSetFloatValueAndNotify_block_invoke;
      v12[3] = &unk_1E0F4DB90;
      v12[5] = v9;
      v12[6] = a2;
      v12[4] = a1;
      v13 = a3;
      objc_msgSend(a1, "_changeValueForKey:key:key:usingBlock:", v10, 0, 0, v12);
    }

  }
  else
  {
    *(float *)&v7 = a3;
    objc_msgSend(a1, (SEL)a2, v7);
  }
}

void _NSSetUnsignedLongLongValueAndNotify(void *a1, const void *a2, uint64_t a3)
{
  objc_class *Class;
  CFDictionaryRef *IndexedIvars;
  CFDictionaryRef *v8;
  void *v9;
  IMP MethodImplementation;
  _QWORD v11[9];

  v11[8] = *MEMORY[0x1E0C80C00];
  Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0)
  {
    v8 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    v9 = (void *)objc_msgSend((id)CFDictionaryGetValue(v8[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((_BYTE *)v8 + 40))
    {
      objc_msgSend(a1, "willChangeValueForKey:", v9);
      MethodImplementation = class_getMethodImplementation(*v8, (SEL)a2);
      ((void (*)(void *, const void *, uint64_t))MethodImplementation)(a1, a2, a3);
      objc_msgSend(a1, "didChangeValueForKey:", v9);
    }
    else
    {
      v11[0] = MEMORY[0x1E0C809B0];
      v11[1] = 3221225472;
      v11[2] = ___NSSetUnsignedLongLongValueAndNotify_block_invoke;
      v11[3] = &unk_1E0F4EE98;
      v11[4] = a1;
      v11[5] = v8;
      v11[6] = a2;
      v11[7] = a3;
      objc_msgSend(a1, "_changeValueForKey:key:key:usingBlock:", v9, 0, 0, v11);
    }

  }
  else
  {
    objc_msgSend(a1, (SEL)a2, a3);
  }
}

void _NSSetRectValueAndNotify(void *a1, const void *a2, double a3, double a4, double a5, double a6)
{
  objc_class *Class;
  CFDictionaryRef *IndexedIvars;
  CFDictionaryRef *v14;
  void *v15;
  IMP MethodImplementation;
  _QWORD v17[12];

  v17[11] = *MEMORY[0x1E0C80C00];
  Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0)
  {
    v14 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    v15 = (void *)objc_msgSend((id)CFDictionaryGetValue(v14[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((_BYTE *)v14 + 40))
    {
      objc_msgSend(a1, "willChangeValueForKey:", v15);
      MethodImplementation = class_getMethodImplementation(*v14, (SEL)a2);
      ((void (*)(void *, const void *, double, double, double, double))MethodImplementation)(a1, a2, a3, a4, a5, a6);
      objc_msgSend(a1, "didChangeValueForKey:", v15);
    }
    else
    {
      v17[0] = MEMORY[0x1E0C809B0];
      v17[1] = 3221225472;
      v17[2] = ___NSSetRectValueAndNotify_block_invoke;
      v17[3] = &unk_1E0F4EF10;
      v17[5] = v14;
      v17[6] = a2;
      v17[4] = a1;
      *(double *)&v17[7] = a3;
      *(double *)&v17[8] = a4;
      *(double *)&v17[9] = a5;
      *(double *)&v17[10] = a6;
      objc_msgSend(a1, "_changeValueForKey:key:key:usingBlock:", v15, 0, 0, v17);
    }

  }
  else
  {
    objc_msgSend(a1, (SEL)a2, a3, a4, a5, a6);
  }
}

void _NSSetLongLongValueAndNotify(void *a1, const void *a2, uint64_t a3)
{
  objc_class *Class;
  CFDictionaryRef *IndexedIvars;
  CFDictionaryRef *v8;
  void *v9;
  IMP MethodImplementation;
  _QWORD v11[9];

  v11[8] = *MEMORY[0x1E0C80C00];
  Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0)
  {
    v8 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    v9 = (void *)objc_msgSend((id)CFDictionaryGetValue(v8[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((_BYTE *)v8 + 40))
    {
      objc_msgSend(a1, "willChangeValueForKey:", v9);
      MethodImplementation = class_getMethodImplementation(*v8, (SEL)a2);
      ((void (*)(void *, const void *, uint64_t))MethodImplementation)(a1, a2, a3);
      objc_msgSend(a1, "didChangeValueForKey:", v9);
    }
    else
    {
      v11[0] = MEMORY[0x1E0C809B0];
      v11[1] = 3221225472;
      v11[2] = ___NSSetLongLongValueAndNotify_block_invoke;
      v11[3] = &unk_1E0F4EE98;
      v11[4] = a1;
      v11[5] = v8;
      v11[6] = a2;
      v11[7] = a3;
      objc_msgSend(a1, "_changeValueForKey:key:key:usingBlock:", v9, 0, 0, v11);
    }

  }
  else
  {
    objc_msgSend(a1, (SEL)a2, a3);
  }
}

void _NSSetDoubleValueAndNotify(void *a1, const void *a2, double a3)
{
  objc_class *Class;
  CFDictionaryRef *IndexedIvars;
  CFDictionaryRef *v8;
  void *v9;
  IMP MethodImplementation;
  _QWORD v11[9];

  v11[8] = *MEMORY[0x1E0C80C00];
  Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0)
  {
    v8 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    v9 = (void *)objc_msgSend((id)CFDictionaryGetValue(v8[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((_BYTE *)v8 + 40))
    {
      objc_msgSend(a1, "willChangeValueForKey:", v9);
      MethodImplementation = class_getMethodImplementation(*v8, (SEL)a2);
      ((void (*)(void *, const void *, double))MethodImplementation)(a1, a2, a3);
      objc_msgSend(a1, "didChangeValueForKey:", v9);
    }
    else
    {
      v11[0] = MEMORY[0x1E0C809B0];
      v11[1] = 3221225472;
      v11[2] = ___NSSetDoubleValueAndNotify_block_invoke;
      v11[3] = &unk_1E0F4EE98;
      v11[5] = v8;
      v11[6] = a2;
      v11[4] = a1;
      *(double *)&v11[7] = a3;
      objc_msgSend(a1, "_changeValueForKey:key:key:usingBlock:", v9, 0, 0, v11);
    }

  }
  else
  {
    objc_msgSend(a1, (SEL)a2, a3);
  }
}

void _NSSetSizeValueAndNotify(void *a1, const void *a2, double a3, double a4)
{
  objc_class *Class;
  CFDictionaryRef *IndexedIvars;
  CFDictionaryRef *v10;
  void *v11;
  IMP MethodImplementation;
  _QWORD v13[10];

  v13[9] = *MEMORY[0x1E0C80C00];
  Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0)
  {
    v10 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    v11 = (void *)objc_msgSend((id)CFDictionaryGetValue(v10[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((_BYTE *)v10 + 40))
    {
      objc_msgSend(a1, "willChangeValueForKey:", v11);
      MethodImplementation = class_getMethodImplementation(*v10, (SEL)a2);
      ((void (*)(void *, const void *, double, double))MethodImplementation)(a1, a2, a3, a4);
      objc_msgSend(a1, "didChangeValueForKey:", v11);
    }
    else
    {
      v13[0] = MEMORY[0x1E0C809B0];
      v13[1] = 3221225472;
      v13[2] = ___NSSetSizeValueAndNotify_block_invoke;
      v13[3] = &unk_1E0F4EEE8;
      v13[5] = v10;
      v13[6] = a2;
      v13[4] = a1;
      *(double *)&v13[7] = a3;
      *(double *)&v13[8] = a4;
      objc_msgSend(a1, "_changeValueForKey:key:key:usingBlock:", v11, 0, 0, v13);
    }

  }
  else
  {
    objc_msgSend(a1, (SEL)a2, a3, a4);
  }
}

void _NSSetObjectValueAndNotify(void *a1, const void *a2, uint64_t a3)
{
  objc_class *Class;
  CFDictionaryRef *IndexedIvars;
  CFDictionaryRef *v8;
  void *v9;
  IMP MethodImplementation;
  _QWORD v11[9];

  v11[8] = *MEMORY[0x1E0C80C00];
  Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0)
  {
    v8 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    v9 = (void *)objc_msgSend((id)CFDictionaryGetValue(v8[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((_BYTE *)v8 + 40))
    {
      objc_msgSend(a1, "willChangeValueForKey:", v9);
      MethodImplementation = class_getMethodImplementation(*v8, (SEL)a2);
      ((void (*)(void *, const void *, uint64_t))MethodImplementation)(a1, a2, a3);
      objc_msgSend(a1, "didChangeValueForKey:", v9);
    }
    else
    {
      v11[0] = MEMORY[0x1E0C809B0];
      v11[1] = 3221225472;
      v11[2] = ___NSSetObjectValueAndNotify_block_invoke;
      v11[3] = &unk_1E0F4EE48;
      v11[6] = v8;
      v11[7] = a2;
      v11[4] = a1;
      v11[5] = a3;
      objc_msgSend(a1, "_changeValueForKey:key:key:usingBlock:", v9, 0, 0, v11);
    }

  }
  else
  {
    objc_msgSend(a1, (SEL)a2, a3);
  }
}

void _NSSetPointValueAndNotify(void *a1, const void *a2, double a3, double a4)
{
  objc_class *Class;
  CFDictionaryRef *IndexedIvars;
  CFDictionaryRef *v10;
  void *v11;
  IMP MethodImplementation;
  _QWORD v13[10];

  v13[9] = *MEMORY[0x1E0C80C00];
  Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0)
  {
    v10 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    v11 = (void *)objc_msgSend((id)CFDictionaryGetValue(v10[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((_BYTE *)v10 + 40))
    {
      objc_msgSend(a1, "willChangeValueForKey:", v11);
      MethodImplementation = class_getMethodImplementation(*v10, (SEL)a2);
      ((void (*)(void *, const void *, double, double))MethodImplementation)(a1, a2, a3, a4);
      objc_msgSend(a1, "didChangeValueForKey:", v11);
    }
    else
    {
      v13[0] = MEMORY[0x1E0C809B0];
      v13[1] = 3221225472;
      v13[2] = ___NSSetPointValueAndNotify_block_invoke;
      v13[3] = &unk_1E0F4EEE8;
      v13[5] = v10;
      v13[6] = a2;
      v13[4] = a1;
      *(double *)&v13[7] = a3;
      *(double *)&v13[8] = a4;
      objc_msgSend(a1, "_changeValueForKey:key:key:usingBlock:", v11, 0, 0, v13);
    }

  }
  else
  {
    objc_msgSend(a1, (SEL)a2, a3, a4);
  }
}

void _NSSetBoolValueAndNotify(void *a1, const void *a2, uint64_t a3)
{
  objc_class *Class;
  CFDictionaryRef *IndexedIvars;
  CFDictionaryRef *v8;
  void *v9;
  IMP MethodImplementation;
  _QWORD v11[7];
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0)
  {
    v8 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    v9 = (void *)objc_msgSend((id)CFDictionaryGetValue(v8[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((_BYTE *)v8 + 40))
    {
      objc_msgSend(a1, "willChangeValueForKey:", v9);
      MethodImplementation = class_getMethodImplementation(*v8, (SEL)a2);
      ((void (*)(void *, const void *, uint64_t))MethodImplementation)(a1, a2, a3);
      objc_msgSend(a1, "didChangeValueForKey:", v9);
    }
    else
    {
      v11[0] = MEMORY[0x1E0C809B0];
      v11[1] = 3221225472;
      v11[2] = ___NSSetBoolValueAndNotify_block_invoke;
      v11[3] = &unk_1E0F4EE70;
      v11[5] = v8;
      v11[6] = a2;
      v11[4] = a1;
      v12 = a3;
      objc_msgSend(a1, "_changeValueForKey:key:key:usingBlock:", v9, 0, 0, v11);
    }

  }
  else
  {
    objc_msgSend(a1, (SEL)a2, a3);
  }
}

void sub_1818E3BC4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void __iop_setCompletionBlock_block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;

  v2 = (void *)objc_msgSend(*(id *)(a1 + 32), "copy");
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 40) + 224));
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(void **)(v3 + 56);
  if (*(void **)(a1 + 32) == v4)
  {

    v5 = 0;
    v3 = *(_QWORD *)(a1 + 40);
  }
  else
  {
    *(_QWORD *)(v3 + 56) = v2;
    v5 = v4;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 224));

}

void oq_set_property_qos(uint64_t a1, uint64_t a2)
{
  int v2;
  unsigned __int8 *v3;
  int v4;
  NSObject *v5;

  if (a2 > 16)
  {
    switch(a2)
    {
      case 17:
        v2 = 17;
        goto LABEL_15;
      case 33:
        v2 = 33;
        goto LABEL_15;
      case 25:
        v2 = 25;
        goto LABEL_15;
    }
LABEL_14:
    v2 = 0;
    goto LABEL_15;
  }
  if (a2 == -1)
  {
    v2 = 21;
    goto LABEL_15;
  }
  if (a2 == 5)
  {
    v2 = 5;
    goto LABEL_15;
  }
  if (a2 != 9)
    goto LABEL_14;
  v2 = 9;
LABEL_15:
  v3 = (unsigned __int8 *)(a1 + 502);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v2, v3));
  if (v2 != v4)
  {
    v5 = *(NSObject **)(a1 + 184);
    *(_QWORD *)(a1 + 184) = 0;
    *(_BYTE *)(a1 + 200) = 0;
    if (v5)
      dispatch_release(v5);
  }
}

void __iop_setQueuePriority_block_invoke(uint64_t a1)
{
  uint64_t v1;
  int v2;
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  int v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  os_unfair_lock_s *v9;
  uint64_t v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  os_unfair_lock_s *v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  uint64_t *v16;
  int property_qos;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(unsigned __int8 *)(a1 + 40);
  v3 = (os_unfair_lock_s *)(v1 + 232);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 232));
  v4 = *(os_unfair_lock_s **)(v1 + 32);
  if (!v4)
  {
    *(_BYTE *)(v1 + 238) = v2;
LABEL_18:
    os_unfair_lock_unlock(v3);
    return;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 232));
  v3 = v4 + 2;
  os_unfair_lock_lock(v4 + 2);
  v5 = *(unsigned __int8 *)(v1 + 238);
  if (v5 != 255)
    goto LABEL_5;
  if (v4[42]._os_unfair_lock_opaque == 1)
  {
    v5 = 0;
    goto LABEL_5;
  }
  property_qos = op_get_property_qos(v1);
  v5 = 0;
  if (property_qos > 16)
  {
    if (property_qos > 24)
    {
      if (property_qos == 25)
      {
        v5 = 4;
      }
      else
      {
        if (property_qos != 33)
          goto LABEL_33;
        v5 = 8;
      }
    }
    else if (property_qos == 17)
    {
      v5 = 252;
    }
    else if (property_qos != 21)
    {
      goto LABEL_33;
    }
LABEL_5:
    if (v5 != v2)
    {
      v6 = 0;
      *(_BYTE *)(v1 + 238) = v2;
      v7 = ((uint64_t)(char)(v5 + (((char)v5 >> 13) & 3)) >> 2) + 2;
      v8 = &v3[2 * v7];
      v11 = *(_QWORD *)&v8[6]._os_unfair_lock_opaque;
      v9 = v8 + 6;
      v10 = v11;
      while (v10)
      {
        v12 = v6;
        v6 = (os_unfair_lock_s *)v10;
        v10 = *(_QWORD *)(v10 + 24);
        if (v6 == (os_unfair_lock_s *)v1)
        {
          v13 = v12 + 6;
          if (!v12)
            v13 = v9;
          *(_QWORD *)&v13->_os_unfair_lock_opaque = v10;
          if (!v10)
            *(_QWORD *)&v3[2 * v7 + 18]._os_unfair_lock_opaque = v12;
          *(_QWORD *)(v1 + 24) = 0;
          v14 = &v3[2 * ((int)((v2 + (((char)v2 >> 13) & 3)) << 24) >> 26)];
          v15 = *(_QWORD *)&v14[22]._os_unfair_lock_opaque;
          if (v15)
            v16 = (uint64_t *)(v15 + 24);
          else
            v16 = (uint64_t *)&v14[10];
          *v16 = v1;
          *(_QWORD *)&v14[22]._os_unfair_lock_opaque = v1;
          goto LABEL_18;
        }
      }
    }
    goto LABEL_18;
  }
  if ((property_qos + 1) < 2)
    goto LABEL_5;
  if (property_qos == 5 || property_qos == 9)
  {
    v5 = 248;
    goto LABEL_5;
  }
LABEL_33:
  __break(1u);
}

char *__iop_setName_block_invoke(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  char *result;

  v1 = *(void **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  free(*(void **)(v2 + 88));
  if (v1)
    result = strdup((const char *)objc_msgSend(v1, "UTF8String"));
  else
    result = 0;
  *(_QWORD *)(v2 + 88) = result;
  return result;
}

double __iop_setThreadPriority_block_invoke(uint64_t a1)
{
  double result;

  result = *(double *)(a1 + 40);
  *(double *)(*(_QWORD *)(a1 + 32) + 80) = result;
  return result;
}

NSNumber __swiftcall NSNumber.init(integerLiteral:)(Swift::Int integerLiteral)
{
  return (NSNumber)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithInteger_, integerLiteral);
}

id specialized static IndexPath._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  void *v7;
  id result;
  char v9;
  char v10;

  outlined consume of IndexPath?(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16));
  v4 = (unint64_t)objc_msgSend(a1, sel_length);
  if (v4 == 2)
  {
    v6 = objc_msgSend(a1, sel_indexAtPosition_, 0);
    v10 = 1;
    result = objc_msgSend(a1, sel_indexAtPosition_, 1);
    goto LABEL_9;
  }
  v5 = v4;
  if (v4 == 1)
  {
    v6 = objc_msgSend(a1, sel_indexAtPosition_, 0);
    result = 0;
    v10 = 0;
    goto LABEL_9;
  }
  if (!v4)
  {
    v6 = (_QWORD *)specialized IndexPath.Storage.init(arrayLiteral:)(MEMORY[0x1E0DEE9D8]);
    result = v7;
    v10 = v9;
LABEL_9:
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = result;
    *(_BYTE *)(a2 + 16) = v10;
    return result;
  }
  if ((v4 & 0x8000000000000000) == 0)
  {
    v6 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)();
    v6[2] = v5;
    objc_msgSend(a1, sel_getIndexes_range_, v6 + 4, 0, v5);
    result = 0;
    v6[2] = v5;
    v10 = 2;
    goto LABEL_9;
  }
  result = (id)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined consume of IndexPath?(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 != -1)
    return outlined consume of IndexPath.Storage(a1, a2, a3);
  return a1;
}

ValueMetadata *type metadata accessor for Locale.MeasurementSystem()
{
  return &type metadata for Locale.MeasurementSystem;
}

uint64_t storeEnumTagSinglePayload for Locale.Language(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 96) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PredicateCodableConfiguration()
{
  return &type metadata for PredicateCodableConfiguration;
}

uint64_t URL.deletingLastPathComponent()@<X0>(Swift::Int countAndFlagsBits@<X8>)
{
  unint64_t *v1;
  uint64_t v3;
  unint64_t object;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t Path;
  id v9;
  Swift::String v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  Swift::String v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  Swift::String v50;
  id v51;
  void *v52;
  unint64_t v53;
  void *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  id v58;
  void *v59;
  id v60;
  __int128 v61;
  id v62;
  void *v63;
  unsigned __int16 *v64;
  id v65;
  void *v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t *v72;
  id v73;
  Swift::Int v74;
  _QWORD v75[3];
  uint64_t v76[3];
  _OWORD v77[8];
  _OWORD v78[2];
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  Swift::String v82;
  _BYTE v83[72];
  uint64_t v84;
  __int128 v85;
  _BYTE v86[42];
  _BYTE v87[32];
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  _OWORD v94[2];
  uint64_t v95;
  unint64_t v96;
  char v97;
  char v98;
  char v99;
  char v100;
  char v101;
  char v102;
  char v103;
  char v104;
  char v105;
  char v106;
  char v107;
  char v108;
  char v109;

  object = *v1;
  v3 = v1[1];
  v5 = v1[2];
  result = _foundation_swift_url_feature_enabled();
  if ((_DWORD)result)
  {
    if (!v3)
    {
      __break(1u);
LABEL_73:
      __break(1u);
      return result;
    }
    if ((*(_BYTE *)(v3 + 168) & 1) != 0)
      v7 = MEMORY[0x186DA5030](0, 0xE000000000000000);
    else
      v7 = String.subscript.getter();
    v23 = MEMORY[0x186DA4634](v7);
    v25 = v24;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v26 = HIBYTE(v25) & 0xF;
    if ((v25 & 0x2000000000000000) == 0)
      v26 = v23 & 0xFFFFFFFFFFFFLL;
    if (!v26)
    {
      *(_QWORD *)countAndFlagsBits = object;
      *(_QWORD *)(countAndFlagsBits + 8) = v3;
      *(_QWORD *)(countAndFlagsBits + 16) = v5;
      swift_retain();
      v29 = (id)object;
      return swift_retain();
    }
    v27 = *(_BYTE *)(v3 + 218);
    v109 = 1;
    v108 = 1;
    v107 = 1;
    v106 = 1;
    v105 = 1;
    v104 = 1;
    v103 = 1;
    v102 = 1;
    v101 = 1;
    v100 = 1;
    v99 = 1;
    v98 = v27;
    v97 = 0;
    if ((*(_BYTE *)(v3 + 168) & 1) != 0)
    {
      swift_retain();
      v28 = MEMORY[0x186DA5030](0, 0xE000000000000000);
    }
    else
    {
      swift_retain();
      v28 = String.subscript.getter();
    }
    v30 = MEMORY[0x186DA4634](v28);
    v32 = v31;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    Path = String._deletingLastPathComponent()(v30, v32);
    v34 = v33;
    swift_bridgeObjectRelease_n();
    v95 = Path;
    v96 = v34;
    v35 = HIBYTE(v34) & 0xF;
    if ((v34 & 0x2000000000000000) == 0)
      v35 = Path & 0xFFFFFFFFFFFFLL;
    if (v35 && (specialized BidirectionalCollection.last.getter(Path, v34) & 0x1FF) != 0x2F)
    {
      v36._countAndFlagsBits = 47;
      v36._object = (void *)0xE100000000000000;
      String.append(_:)(v36);
      Path = v95;
      v34 = v96;
    }
    v108 = 0;
    v102 = 0;
    if ((v34 & 0x1000000000000000) != 0)
    {
      *(_QWORD *)v87 = Path;
      *(_QWORD *)&v87[8] = v34;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      StringProtocol._ephemeralString.getter();
      v63 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v64 = (unsigned __int16 *)objc_msgSend(v63, sel__fastCharacterContents);
      v65 = v63;
      if (v64)
      {
        *(_QWORD *)v87 = Path;
        *(_QWORD *)&v87[8] = v34;
        StringProtocol._ephemeralString.getter();
        v66 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v67 = objc_msgSend(v66, sel_length);
        swift_unknownObjectRelease();
        v68 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v64, (uint64_t)v67, 0x10u, 1);
      }
      else
      {
        v68 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(Path, v34, 0x10u, 1);
      }
      v39 = v68;
      swift_bridgeObjectRelease_n();
      if ((v39 & 1) != 0)
      {
LABEL_32:
        swift_bridgeObjectRelease();
        v82._countAndFlagsBits = v3;
        LOBYTE(v82._object) = v108;
        BYTE1(v82._object) = v107;
        BYTE2(v82._object) = v106;
        BYTE3(v82._object) = v105;
        BYTE4(v82._object) = v104;
        BYTE5(v82._object) = v103;
        BYTE6(v82._object) = v102;
        HIBYTE(v82._object) = v101;
        v83[0] = v100;
        memset(&v83[8], 0, 64);
        v84 = 0;
        LOBYTE(v85) = v99;
        *((_QWORD *)&v85 + 1) = Path;
        *(_QWORD *)v86 = v34;
        memset(&v86[8], 0, 32);
        v86[40] = v98;
        v86[41] = v97;
        *(Swift::String *)v87 = v82;
        *(_OWORD *)&v87[16] = *(_OWORD *)v83;
        v90 = *(_OWORD *)&v83[48];
        v91 = 0uLL;
        v88 = *(_OWORD *)&v83[16];
        v89 = *(_OWORD *)&v83[32];
        *(_OWORD *)((char *)v94 + 10) = *(_OWORD *)&v86[26];
        v93 = *(_OWORD *)v86;
        v94[0] = *(_OWORD *)&v86[16];
        v92 = v85;
        v77[6] = v85;
        v77[7] = *(_OWORD *)v86;
        v78[0] = *(_OWORD *)&v86[16];
        *(_OWORD *)((char *)v78 + 10) = *(_OWORD *)&v86[26];
        v77[2] = *(_OWORD *)&v83[16];
        v77[3] = *(_OWORD *)&v83[32];
        v77[4] = *(_OWORD *)&v83[48];
        v77[5] = 0uLL;
        v77[0] = v82;
        v77[1] = *(_OWORD *)v83;
        v79 = object;
        v80 = v3;
        v81 = v5;
        outlined retain of URLComponents((uint64_t)v87);
        URL.baseURL.getter(v76);
        v40 = (void *)v76[0];
        v75[0] = v76[0];
        v75[1] = v76[1];
        v75[2] = v76[2];
        URLComponents.url(relativeTo:)((uint64_t)v75, (uint64_t *)&v79);
        outlined consume of URL?(v40);
        result = outlined release of URLComponents((uint64_t)&v82);
        v41 = v79;
        if (v79)
        {
          v43 = v80;
          v42 = v81;
          swift_bridgeObjectRelease();
          result = outlined release of URLComponents((uint64_t)&v82);
          *(_QWORD *)countAndFlagsBits = v41;
          *(_QWORD *)(countAndFlagsBits + 8) = v43;
          *(_QWORD *)(countAndFlagsBits + 16) = v42;
          return result;
        }
        goto LABEL_73;
      }
    }
    else
    {
      if ((v34 & 0x2000000000000000) != 0)
      {
        v38 = HIBYTE(v34) & 0xF;
        *(_QWORD *)v87 = Path;
        *(_QWORD *)&v87[8] = v34 & 0xFFFFFFFFFFFFFFLL;
        v37 = v87;
      }
      else if ((Path & 0x1000000000000000) != 0)
      {
        v37 = (char *)((v34 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v38 = Path & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v37 = (char *)_StringObject.sharedUTF8.getter();
      }
      v39 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v37, v38, 0x10u, 1);
      swift_bridgeObjectRetain();
      if ((v39 & 1) != 0)
        goto LABEL_32;
    }
    swift_bridgeObjectRelease();
    v71 = 0;
    v70 = 897;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_71;
  }
  swift_retain();
  Path = (uint64_t)(id)object;
  swift_retain();
  if (_foundation_swift_url_feature_enabled())
  {
    v74 = countAndFlagsBits;
    *(_QWORD *)v87 = Path;
    *(_QWORD *)&v87[8] = v3;
    *(_QWORD *)&v87[16] = v5;
    v9 = (id)Path;
    swift_retain();
    swift_retain();
    v10 = URL.path(percentEncoded:)(1);
    countAndFlagsBits = v10._countAndFlagsBits;
    v82 = v10;
    swift_bridgeObjectRetain();
    v73 = v9;
    if (String.count.getter() <= 1)
    {
      object = (unint64_t)v10._object;
    }
    else
    {
      object = (unint64_t)v10._object;
      if ((specialized BidirectionalCollection.last.getter(v10._countAndFlagsBits, (unint64_t)v10._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        object = (unint64_t)v82._object;
        countAndFlagsBits = v82._countAndFlagsBits;
      }
    }
    *(_QWORD *)v87 = Set.init(minimumCapacity:)();
    specialized Set._Variant.insert(_:)(v77, 0x2FuLL);
    v39 = *(_QWORD *)v87;
    v44 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if ((object & 0x2000000000000000) != 0)
      v45 = HIBYTE(object) & 0xF;
    else
      v45 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (!v45)
    {
      swift_bridgeObjectRelease();
      v47 = 0;
      v49 = 0xE000000000000000;
      v54 = v73;
      countAndFlagsBits = v74;
LABEL_53:
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_56:
      swift_release();
      swift_release();

      goto LABEL_57;
    }
    v72 = &v70;
    swift_bridgeObjectRetain();
    if ((object & 0x1000000000000000) != 0)
    {
      v47 = 0;
      v49 = 1;
    }
    else
    {
      if ((object & 0x2000000000000000) == 0)
      {
        if ((countAndFlagsBits & 0x1000000000000000) != 0)
        {
          v46 = (object & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_43:
          v47 = specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)(v46, v44, v39, (uint64_t (*)(_QWORD))specialized StringProtocol.hexToAscii(_:));
          v49 = v48;
          goto LABEL_51;
        }
LABEL_71:
        v46 = _StringObject.sharedUTF8.getter();
        v44 = v69;
        goto LABEL_43;
      }
      *(_QWORD *)v87 = countAndFlagsBits;
      *(_QWORD *)&v87[8] = object & 0xFFFFFFFFFFFFFFLL;
      v47 = specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)((uint64_t)v87, HIBYTE(object) & 0xF, v39, (uint64_t (*)(_QWORD))specialized StringProtocol.hexToAscii(_:));
      v49 = v55;
    }
LABEL_51:
    v54 = v73;
    if (v49 == 1)
    {
      swift_bridgeObjectRetain();
      v47 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(countAndFlagsBits, object, v39);
      v49 = v56;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      countAndFlagsBits = v74;
      if (v49)
        goto LABEL_53;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      countAndFlagsBits = v74;
      if (v49)
        goto LABEL_53;
    }
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v47 = 0;
    v49 = 0xE000000000000000;
    goto LABEL_56;
  }
  v11 = objc_msgSend((id)Path, sel__parameterString);
  if (v11)
  {
    v12 = v11;
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v15 = v14;

    if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
      && (v16 = objc_msgSend((id)Path, sel_path)) != 0)
    {
      v17 = v16;
      v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      v20 = v19;

      *(_QWORD *)v87 = v18;
      *(_QWORD *)&v87[8] = v20;
      swift_bridgeObjectRetain();
      v21._countAndFlagsBits = 59;
      v21._object = (void *)0xE100000000000000;
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v22._countAndFlagsBits = (uint64_t)v13;
      v22._object = v15;
      String.append(_:)(v22);
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
    }
    else
    {
      *(_QWORD *)v87 = 59;
      *(_QWORD *)&v87[8] = 0xE100000000000000;
      v50._countAndFlagsBits = (uint64_t)v13;
      v50._object = v15;
      String.append(_:)(v50);
      swift_release();
      swift_release();

    }
    swift_bridgeObjectRelease();
    v49 = *(_QWORD *)&v87[8];
    v47 = *(_QWORD *)v87;
  }
  else
  {
    v51 = objc_msgSend((id)Path, sel_path);
    if (v51)
    {
      v52 = v51;
      v47 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
      v49 = v53;
      swift_release();
      swift_release();

    }
    else
    {
      swift_release();
      swift_release();

      v47 = 0;
      v49 = 0xE000000000000000;
    }
  }
LABEL_57:
  swift_bridgeObjectRelease();
  v57 = HIBYTE(v49) & 0xF;
  if ((v49 & 0x2000000000000000) == 0)
    v57 = v47 & 0xFFFFFFFFFFFFLL;
  if (v57
    && (v58 = objc_msgSend((id)Path, sel_URLByDeletingLastPathComponent)) != 0)
  {
    v59 = v58;
    URL.init(reference:)(v58, v87);

    v60 = *(id *)v87;
    URL.init(reference:)(v60, v87);

    swift_release();
    result = swift_release();
    v61 = *(_OWORD *)&v87[8];
    *(_QWORD *)countAndFlagsBits = *(_QWORD *)v87;
    *(_OWORD *)(countAndFlagsBits + 8) = v61;
  }
  else
  {
    *(_QWORD *)countAndFlagsBits = Path;
    *(_QWORD *)(countAndFlagsBits + 8) = v3;
    *(_QWORD *)(countAndFlagsBits + 16) = v5;
    v62 = (id)Path;
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t DateComponents.second.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 144);
}

void (*URLComponents.path.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  _OWORD *v1;
  char *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v3 = (char *)malloc(0xB8uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 22) = v1;
  v4 = v1[7];
  *((_OWORD *)v3 + 6) = v1[6];
  *((_OWORD *)v3 + 7) = v4;
  *((_OWORD *)v3 + 8) = v1[8];
  *(_OWORD *)(v3 + 138) = *(_OWORD *)((char *)v1 + 138);
  v5 = v1[3];
  *((_OWORD *)v3 + 2) = v1[2];
  *((_OWORD *)v3 + 3) = v5;
  v6 = v1[5];
  *((_OWORD *)v3 + 4) = v1[4];
  *((_OWORD *)v3 + 5) = v6;
  v7 = v1[1];
  *(_OWORD *)v3 = *v1;
  *((_OWORD *)v3 + 1) = v7;
  *((_QWORD *)v3 + 20) = URLComponents._URLComponents.path.getter();
  *((_QWORD *)v3 + 21) = v8;
  return URLComponents.path.modify;
}

void _characters(uint64_t a1, const UInt8 *a2, int a3)
{
  uint64_t v4;
  void *v5;
  CFStringRef v6;
  CFStringRef v7;

  if (!a1 || !*(_BYTE *)(a1 + 120))
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (*(_QWORD *)(v4 + 424) == 1)
    {
      *(_QWORD *)(v4 + 424) = 0;
    }
    else if (*(_QWORD *)(a1 + 40) >> 31)
    {
      v5 = *(void **)(a1 + 8);
      v6 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, a3, 0x8000100u, 0);
      if (v6)
      {
        v7 = v6;
        objc_msgSend(v5, "parser:foundCharacters:", a1, v6);
        CFRelease(v7);
      }
    }
  }
}

uint64_t AttributedString.Runs.Run.attributes.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t static Data._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  uint64_t v4;

  outlined consume of Data?(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  *(_QWORD *)a2 = specialized Data.init(referencing:)(a1);
  *(_QWORD *)(a2 + 8) = v4;
  return 1;
}

char *@objc static NSTimeZone._timeZoneWith(name:tryAbbrev:)(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  id v5;
  unint64_t v6;
  char *v7;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v7 = specialized static NSTimeZone._timeZoneWith(name:tryAbbrev:)((uint64_t)v5, v6, a4);
  swift_bridgeObjectRelease();
  return v7;
}

char *specialized static NSTimeZone._timeZoneWith(name:tryAbbrev:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v5;
  os_unfair_lock_s *v6;
  char *v7;
  unint64_t v8;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  os_unfair_lock_s *v13;
  os_unfair_lock_s *v14;
  char *v16;

  if ((a3 & 1) != 0)
  {
    v5 = one-time initialization token for cache;
    swift_bridgeObjectRetain();
    if (v5 != -1)
      swift_once();
    v6 = (os_unfair_lock_s *)static TimeZoneCache.cache;
    swift_retain_n();
    os_unfair_lock_lock(v6 + 36);
    closure #1 in TimeZoneCache.timeZoneAbbreviations()((uint64_t)&v6[4], (uint64_t *)&v16);
    os_unfair_lock_unlock(v6 + 36);
    swift_release_n();
    v7 = v16;
    if (*((_QWORD *)v16 + 2))
    {
      v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
      if ((v9 & 1) != 0)
      {
        v10 = (uint64_t *)(*((_QWORD *)v7 + 7) + 16 * v8);
        v11 = *v10;
        v12 = v10[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v13 = (os_unfair_lock_s *)static TimeZoneCache.cache;
        swift_retain_n();
        os_unfair_lock_lock(v13 + 36);
        closure #1 in TimeZoneCache.bridgedFixed(_:)(v11, v12, &v16);
        os_unfair_lock_unlock(v13 + 36);
        swift_bridgeObjectRelease();
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (one-time initialization token for cache != -1)
    swift_once();
  v14 = (os_unfair_lock_s *)static TimeZoneCache.cache;
  swift_retain_n();
  os_unfair_lock_lock(v14 + 36);
  closure #1 in TimeZoneCache.bridgedFixed(_:)(a1, a2, &v16);
  os_unfair_lock_unlock(v14 + 36);
LABEL_11:
  swift_release_n();
  return v16;
}

char *@objc static NSTimeZone._timeZoneWith(abbreviation:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  uint64_t v4;
  char *v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v5 = specialized static NSTimeZone._timeZoneWith(abbreviation:)((uint64_t)v3, v4);
  swift_bridgeObjectRelease();
  return v5;
}

char *specialized static NSTimeZone._timeZoneWith(abbreviation:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  os_unfair_lock_s *v6;
  char *v8;

  v2 = specialized static TimeZone.identifierForAbbreviation(_:)(a1, a2);
  if (!v3)
    return 0;
  v4 = v2;
  v5 = v3;
  if (one-time initialization token for cache != -1)
    swift_once();
  v6 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  closure #1 in TimeZoneCache.bridgedFixed(_:)(v4, v5, &v8);
  os_unfair_lock_unlock(v6);
  swift_bridgeObjectRelease();
  swift_release_n();
  return v8;
}

char *@objc static NSTimeZone._timeZoneWith(name:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  os_unfair_lock_s *v4;
  char *v6;

  v3 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  if (one-time initialization token for cache != -1)
    v3 = swift_once();
  v4 = (os_unfair_lock_s *)static TimeZoneCache.cache;
  MEMORY[0x1E0C80A78](v3);
  swift_retain_n();
  os_unfair_lock_lock(v4 + 36);
  closure #1 in TimeZoneCache.bridgedFixed(_:)partial apply(&v6);
  os_unfair_lock_unlock(v4 + 36);
  swift_bridgeObjectRelease();
  swift_release_n();
  return v6;
}

char *closure #1 in TimeZoneCache.bridgedFixed(_:)partial apply@<X0>(char **a1@<X8>)
{
  uint64_t v1;

  return closure #1 in TimeZoneCache.bridgedFixed(_:)(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

char *closure #1 in TimeZoneCache.bridgedFixed(_:)@<X0>(uint64_t a1@<X1>, unint64_t a2@<X2>, char **a3@<X8>)
{
  char *result;

  result = TimeZoneCache.State.bridgedFixed(_:)(a1, a2);
  *a3 = result;
  return result;
}

char *TimeZoneCache.State.bridgedFixed(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  objc_class *v16;
  char *v17;
  uint64_t v18;
  id v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  _BOOL8 v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  _QWORD *v30;
  char v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *result;
  unint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  _QWORD *v56;
  int64_t v57;
  unint64_t v58;
  int64_t v59;
  uint64_t v60;
  objc_class *v61;
  uint64_t *v62;
  uint64_t v63;
  id v64;
  unint64_t v65;
  char v66;
  uint64_t v67;
  _BOOL8 v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  _QWORD *v86;
  int64_t v87;
  unint64_t v88;
  int64_t v89;
  int64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  _QWORD *v103;
  int64_t v104;
  unint64_t v105;
  int64_t v106;
  int64_t v107;
  unint64_t v108;
  unint64_t v109;
  int64_t v110;
  int64_t v111;
  int64_t v112;
  char *__src;
  char *__srca;
  char *__srcb;
  __int128 v116;
  int64_t v117;
  int64_t v118;
  objc_super v119;
  objc_super v120;
  uint64_t v121;

  v4 = v2;
  v7 = *(_QWORD *)(v2 + 104);
  if (*(_QWORD *)(v7 + 16))
  {
    swift_bridgeObjectRetain();
    v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if ((v9 & 1) != 0)
    {
      v10 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v8);
      v11 = (id)v10;
      goto LABEL_142;
    }
    swift_bridgeObjectRelease();
  }
  v12 = *(_QWORD *)(v4 + 40);
  if (*(_QWORD *)(v12 + 16))
  {
    swift_bridgeObjectRetain();
    v13 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if ((v14 & 1) != 0)
    {
      v116 = *(_OWORD *)(*(_QWORD *)(v12 + 56) + 16 * v13);
      v15 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 16 * v13);
      swift_unknownObjectRetain();
      swift_bridgeObjectRelease();
      v16 = (objc_class *)type metadata accessor for _NSSwiftTimeZone();
      v17 = (char *)objc_allocWithZone(v16);
      *(_OWORD *)&v17[OBJC_IVAR____NSSwiftTimeZone_timeZone] = v116;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<_NSSwiftTimeZone.State>._Buffer);
      v18 = swift_allocObject();
      *(_DWORD *)(v18 + 32) = 0;
      *(_OWORD *)(v18 + 16) = xmmword_1820E9CE0;
      *(_QWORD *)&v17[OBJC_IVAR____NSSwiftTimeZone_lock] = v18;
      v119.receiver = v17;
      v119.super_class = v16;
      swift_unknownObjectRetain();
      v19 = objc_msgSendSuper2(&v119, sel_init);
      swift_bridgeObjectRetain();
      v10 = (unint64_t)v19;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v121 = *(_QWORD *)(v4 + 104);
      v21 = v121;
      *(_QWORD *)(v4 + 104) = 0x8000000000000000;
      v22 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
      v24 = *(_QWORD *)(v21 + 16);
      v25 = (v23 & 1) == 0;
      v26 = __OFADD__(v24, v25);
      v27 = v24 + v25;
      if (!v26)
      {
        LOBYTE(v3) = v23;
        if (*(_QWORD *)(v21 + 24) >= v27)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            v109 = v22;
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, _NSSwiftTimeZone>);
            v91 = static _DictionaryStorage.copy(original:)();
            v28 = v91;
            if (!*(_QWORD *)(v21 + 16))
              goto LABEL_138;
            result = (char *)(v91 + 64);
            __srcb = (char *)(v21 + 64);
            v92 = (unint64_t)((1 << *(_BYTE *)(v28 + 32)) + 63) >> 6;
            if (v28 != v21 || result >= &__srcb[8 * v92])
              result = (char *)memmove(result, __srcb, 8 * v92);
            v118 = 0;
            *(_QWORD *)(v28 + 16) = *(_QWORD *)(v21 + 16);
            v93 = 1 << *(_BYTE *)(v21 + 32);
            v94 = -1;
            if (v93 < 64)
              v94 = ~(-1 << v93);
            v95 = v94 & *(_QWORD *)(v21 + 64);
            v112 = (unint64_t)(v93 + 63) >> 6;
            while (1)
            {
              if (v95)
              {
                v96 = __clz(__rbit64(v95));
                v95 &= v95 - 1;
                v97 = v96 | (v118 << 6);
              }
              else
              {
                v104 = v118 + 1;
                if (__OFADD__(v118, 1))
                  goto LABEL_146;
                if (v104 >= v112)
                  goto LABEL_138;
                v105 = *(_QWORD *)&__srcb[8 * v104];
                v106 = v118 + 1;
                if (!v105)
                {
                  v106 = v118 + 2;
                  if (v118 + 2 >= v112)
                    goto LABEL_138;
                  v105 = *(_QWORD *)&__srcb[8 * v106];
                  if (!v105)
                  {
                    v106 = v118 + 3;
                    if (v118 + 3 >= v112)
                      goto LABEL_138;
                    v105 = *(_QWORD *)&__srcb[8 * v106];
                    if (!v105)
                    {
                      v106 = v118 + 4;
                      if (v118 + 4 >= v112)
                        goto LABEL_138;
                      v105 = *(_QWORD *)&__srcb[8 * v106];
                      if (!v105)
                      {
                        v106 = v118 + 5;
                        if (v118 + 5 >= v112)
                          goto LABEL_138;
                        v105 = *(_QWORD *)&__srcb[8 * v106];
                        if (!v105)
                        {
                          v106 = v118 + 6;
                          if (v118 + 6 >= v112)
                            goto LABEL_138;
                          v105 = *(_QWORD *)&__srcb[8 * v106];
                          if (!v105)
                          {
                            v106 = v118 + 7;
                            if (v118 + 7 >= v112)
                              goto LABEL_138;
                            v105 = *(_QWORD *)&__srcb[8 * v106];
                            if (!v105)
                            {
                              v107 = v118 + 8;
                              if (v118 + 8 >= v112)
                                goto LABEL_138;
                              v105 = *(_QWORD *)&__srcb[8 * v107];
                              if (!v105)
                              {
                                while (1)
                                {
                                  v106 = v107 + 1;
                                  if (__OFADD__(v107, 1))
                                    goto LABEL_149;
                                  if (v106 >= v112)
                                    break;
                                  v105 = *(_QWORD *)&__srcb[8 * v106];
                                  ++v107;
                                  if (v105)
                                    goto LABEL_137;
                                }
LABEL_138:
                                swift_bridgeObjectRelease();
                                v22 = v109;
                                if ((v3 & 1) == 0)
                                {
LABEL_139:
                                  specialized _NativeDictionary._insert(at:key:value:)(v22, a1, a2, v10, v28);
                                  swift_bridgeObjectRetain();
LABEL_140:
                                  *(_QWORD *)(v4 + 104) = v28;
                                  swift_unknownObjectRelease();
LABEL_141:
                                  swift_bridgeObjectRelease();
LABEL_142:
                                  swift_bridgeObjectRelease();
                                  return (char *)v10;
                                }
LABEL_25:
                                v40 = *(_QWORD *)(v28 + 56);
                                v41 = 8 * v22;

                                *(_QWORD *)(v40 + v41) = v10;
                                goto LABEL_140;
                              }
                              v106 = v118 + 8;
                            }
                          }
                        }
                      }
                    }
                  }
                }
LABEL_137:
                v95 = (v105 - 1) & v105;
                v118 = v106;
                v97 = __clz(__rbit64(v105)) + (v106 << 6);
              }
              v98 = 16 * v97;
              v99 = (_QWORD *)(*(_QWORD *)(v21 + 48) + 16 * v97);
              v100 = v99[1];
              v101 = 8 * v97;
              v102 = *(void **)(*(_QWORD *)(v21 + 56) + v101);
              v103 = (_QWORD *)(*(_QWORD *)(v28 + 48) + v98);
              *v103 = *v99;
              v103[1] = v100;
              *(_QWORD *)(*(_QWORD *)(v28 + 56) + v101) = v102;
              swift_bridgeObjectRetain();
              result = v102;
            }
          }
          v28 = v21;
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v27, isUniquelyReferenced_nonNull_native);
          v28 = v121;
          v22 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
          if ((v3 & 1) != (v29 & 1))
            goto LABEL_65;
        }
        if ((v3 & 1) == 0)
          goto LABEL_139;
        goto LABEL_25;
      }
      goto LABEL_27;
    }
    swift_bridgeObjectRelease();
  }
  type metadata accessor for _TimeZoneICU();
  swift_allocObject();
  swift_bridgeObjectRetain();
  v30 = _TimeZoneICU.init(identifier:)(a1, a2);
  if (!v30)
    return 0;
  v15 = (uint64_t)v30;
  swift_bridgeObjectRetain();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v121 = *(_QWORD *)(v4 + 40);
  v21 = v121;
  *(_QWORD *)(v4 + 40) = 0x8000000000000000;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  v32 = *(_QWORD *)(v21 + 16);
  v33 = (v31 & 1) == 0;
  v34 = v32 + v33;
  if (__OFADD__(v32, v33))
  {
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  LOBYTE(v3) = v31;
  if (*(_QWORD *)(v21 + 24) < v34)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v34, isUniquelyReferenced_nonNull_native);
    v35 = v121;
    v36 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if ((v3 & 1) != (v37 & 1))
      goto LABEL_65;
    v10 = v36;
    if ((v3 & 1) == 0)
      goto LABEL_61;
    goto LABEL_21;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_28:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, _TimeZoneProtocol>);
    v42 = static _DictionaryStorage.copy(original:)();
    v35 = v42;
    if (*(_QWORD *)(v21 + 16))
    {
      result = (char *)(v42 + 64);
      __src = (char *)(v21 + 64);
      v44 = (unint64_t)((1 << *(_BYTE *)(v35 + 32)) + 63) >> 6;
      if (v35 != v21 || result >= &__src[8 * v44])
        result = (char *)memmove(result, __src, 8 * v44);
      v45 = 0;
      *(_QWORD *)(v35 + 16) = *(_QWORD *)(v21 + 16);
      v46 = 1 << *(_BYTE *)(v21 + 32);
      v47 = -1;
      if (v46 < 64)
        v47 = ~(-1 << v46);
      v48 = v47 & *(_QWORD *)(v21 + 64);
      v110 = (unint64_t)(v46 + 63) >> 6;
      while (1)
      {
        if (v48)
        {
          v49 = __clz(__rbit64(v48));
          v48 &= v48 - 1;
          v50 = v49 | (v45 << 6);
        }
        else
        {
          v57 = v45 + 1;
          if (__OFADD__(v45, 1))
          {
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            __break(1u);
            goto LABEL_147;
          }
          if (v57 >= v110)
            break;
          v58 = *(_QWORD *)&__src[8 * v57];
          ++v45;
          if (!v58)
          {
            v45 = v57 + 1;
            if (v57 + 1 >= v110)
              break;
            v58 = *(_QWORD *)&__src[8 * v45];
            if (!v58)
            {
              v45 = v57 + 2;
              if (v57 + 2 >= v110)
                break;
              v58 = *(_QWORD *)&__src[8 * v45];
              if (!v58)
              {
                v45 = v57 + 3;
                if (v57 + 3 >= v110)
                  break;
                v58 = *(_QWORD *)&__src[8 * v45];
                if (!v58)
                {
                  v45 = v57 + 4;
                  if (v57 + 4 >= v110)
                    break;
                  v58 = *(_QWORD *)&__src[8 * v45];
                  if (!v58)
                  {
                    v45 = v57 + 5;
                    if (v57 + 5 >= v110)
                      break;
                    v58 = *(_QWORD *)&__src[8 * v45];
                    if (!v58)
                    {
                      v45 = v57 + 6;
                      if (v57 + 6 >= v110)
                        break;
                      v58 = *(_QWORD *)&__src[8 * v45];
                      if (!v58)
                      {
                        v59 = v57 + 7;
                        if (v59 >= v110)
                          break;
                        v58 = *(_QWORD *)&__src[8 * v59];
                        if (!v58)
                        {
                          while (1)
                          {
                            v45 = v59 + 1;
                            if (__OFADD__(v59, 1))
                              break;
                            if (v45 >= v110)
                              goto LABEL_60;
                            v58 = *(_QWORD *)&__src[8 * v45];
                            ++v59;
                            if (v58)
                              goto LABEL_59;
                          }
LABEL_147:
                          __break(1u);
                          goto LABEL_148;
                        }
                        v45 = v59;
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_59:
          v48 = (v58 - 1) & v58;
          v50 = __clz(__rbit64(v58)) + (v45 << 6);
        }
        v51 = 16 * v50;
        v52 = (uint64_t *)(*(_QWORD *)(v21 + 48) + v51);
        v54 = *v52;
        v53 = v52[1];
        v55 = *(_OWORD *)(*(_QWORD *)(v21 + 56) + v51);
        v56 = (_QWORD *)(*(_QWORD *)(v35 + 48) + v51);
        *v56 = v54;
        v56[1] = v53;
        *(_OWORD *)(*(_QWORD *)(v35 + 56) + v51) = v55;
        swift_bridgeObjectRetain();
        result = (char *)swift_unknownObjectRetain();
      }
    }
LABEL_60:
    swift_bridgeObjectRelease();
    if ((v3 & 1) == 0)
      goto LABEL_61;
LABEL_21:
    v38 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type _TimeZoneICU and conformance _TimeZoneICU, (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneICU, (uint64_t)&protocol conformance descriptor for _TimeZoneICU);
    v39 = (uint64_t *)(*(_QWORD *)(v35 + 56) + 16 * v10);
    swift_unknownObjectRelease();
    *v39 = v15;
    v39[1] = v38;
    goto LABEL_62;
  }
  v35 = v21;
  if ((v31 & 1) != 0)
    goto LABEL_21;
LABEL_61:
  specialized _NativeDictionary._insert(at:key:value:)(v10, a1, a2, v15, (_QWORD *)v35);
  swift_bridgeObjectRetain();
LABEL_62:
  *(_QWORD *)(v4 + 40) = v35;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v60 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type _TimeZoneICU and conformance _TimeZoneICU, (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneICU, (uint64_t)&protocol conformance descriptor for _TimeZoneICU);
  v61 = (objc_class *)type metadata accessor for _NSSwiftTimeZone();
  v3 = (char *)objc_allocWithZone(v61);
  v62 = (uint64_t *)&v3[OBJC_IVAR____NSSwiftTimeZone_timeZone];
  *v62 = v15;
  v62[1] = v60;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<_NSSwiftTimeZone.State>._Buffer);
  v63 = swift_allocObject();
  *(_DWORD *)(v63 + 32) = 0;
  *(_OWORD *)(v63 + 16) = xmmword_1820E9CE0;
  *(_QWORD *)&v3[OBJC_IVAR____NSSwiftTimeZone_lock] = v63;
  v120.receiver = v3;
  v120.super_class = v61;
  swift_retain();
  v64 = objc_msgSendSuper2(&v120, sel_init);
  swift_bridgeObjectRetain();
  v10 = (unint64_t)v64;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v121 = *(_QWORD *)(v4 + 104);
  v21 = v121;
  *(_QWORD *)(v4 + 104) = 0x8000000000000000;
  v65 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  v67 = *(_QWORD *)(v21 + 16);
  v68 = (v66 & 1) == 0;
  v26 = __OFADD__(v67, v68);
  v69 = v67 + v68;
  if (!v26)
  {
    LOBYTE(v3) = v66;
    if (*(_QWORD *)(v21 + 24) >= v69)
      goto LABEL_66;
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v69, isUniquelyReferenced_nonNull_native);
    v70 = v121;
    v65 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if ((v3 & 1) == (v71 & 1))
      goto LABEL_68;
LABEL_65:
    v65 = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
LABEL_66:
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v70 = v21;
LABEL_68:
      if ((v3 & 1) != 0)
      {
LABEL_69:
        v72 = *(_QWORD *)(v70 + 56);
        v73 = 8 * v65;

        *(_QWORD *)(v72 + v73) = v10;
LABEL_105:
        *(_QWORD *)(v4 + 104) = v70;
        swift_release();
        goto LABEL_141;
      }
LABEL_104:
      specialized _NativeDictionary._insert(at:key:value:)(v65, a1, a2, v10, v70);
      swift_bridgeObjectRetain();
      goto LABEL_105;
    }
    goto LABEL_71;
  }
  __break(1u);
LABEL_71:
  v108 = v65;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, _NSSwiftTimeZone>);
  v74 = static _DictionaryStorage.copy(original:)();
  v70 = v74;
  if (!*(_QWORD *)(v21 + 16))
  {
LABEL_103:
    swift_bridgeObjectRelease();
    v65 = v108;
    if ((v3 & 1) != 0)
      goto LABEL_69;
    goto LABEL_104;
  }
  result = (char *)(v74 + 64);
  __srca = (char *)(v21 + 64);
  v75 = (unint64_t)((1 << *(_BYTE *)(v70 + 32)) + 63) >> 6;
  if (v70 != v21 || result >= &__srca[8 * v75])
    result = (char *)memmove(result, __srca, 8 * v75);
  v117 = 0;
  *(_QWORD *)(v70 + 16) = *(_QWORD *)(v21 + 16);
  v76 = 1 << *(_BYTE *)(v21 + 32);
  v77 = -1;
  if (v76 < 64)
    v77 = ~(-1 << v76);
  v78 = v77 & *(_QWORD *)(v21 + 64);
  v111 = (unint64_t)(v76 + 63) >> 6;
  while (1)
  {
    if (v78)
    {
      v79 = __clz(__rbit64(v78));
      v78 &= v78 - 1;
      v80 = v79 | (v117 << 6);
      goto LABEL_79;
    }
    v87 = v117 + 1;
    if (__OFADD__(v117, 1))
      goto LABEL_145;
    if (v87 >= v111)
      goto LABEL_103;
    v88 = *(_QWORD *)&__srca[8 * v87];
    v89 = v117 + 1;
    if (!v88)
    {
      v89 = v117 + 2;
      if (v117 + 2 >= v111)
        goto LABEL_103;
      v88 = *(_QWORD *)&__srca[8 * v89];
      if (!v88)
      {
        v89 = v117 + 3;
        if (v117 + 3 >= v111)
          goto LABEL_103;
        v88 = *(_QWORD *)&__srca[8 * v89];
        if (!v88)
        {
          v89 = v117 + 4;
          if (v117 + 4 >= v111)
            goto LABEL_103;
          v88 = *(_QWORD *)&__srca[8 * v89];
          if (!v88)
          {
            v89 = v117 + 5;
            if (v117 + 5 >= v111)
              goto LABEL_103;
            v88 = *(_QWORD *)&__srca[8 * v89];
            if (!v88)
            {
              v89 = v117 + 6;
              if (v117 + 6 >= v111)
                goto LABEL_103;
              v88 = *(_QWORD *)&__srca[8 * v89];
              if (!v88)
              {
                v89 = v117 + 7;
                if (v117 + 7 >= v111)
                  goto LABEL_103;
                v88 = *(_QWORD *)&__srca[8 * v89];
                if (!v88)
                  break;
              }
            }
          }
        }
      }
    }
LABEL_102:
    v78 = (v88 - 1) & v88;
    v117 = v89;
    v80 = __clz(__rbit64(v88)) + (v89 << 6);
LABEL_79:
    v81 = 16 * v80;
    v82 = (_QWORD *)(*(_QWORD *)(v21 + 48) + 16 * v80);
    v83 = v82[1];
    v84 = 8 * v80;
    v85 = *(void **)(*(_QWORD *)(v21 + 56) + v84);
    v86 = (_QWORD *)(*(_QWORD *)(v70 + 48) + v81);
    *v86 = *v82;
    v86[1] = v83;
    *(_QWORD *)(*(_QWORD *)(v70 + 56) + v84) = v85;
    swift_bridgeObjectRetain();
    result = v85;
  }
  v90 = v117 + 8;
  if (v117 + 8 >= v111)
    goto LABEL_103;
  v88 = *(_QWORD *)&__srca[8 * v90];
  if (v88)
  {
    v89 = v117 + 8;
    goto LABEL_102;
  }
  while (1)
  {
    v89 = v90 + 1;
    if (__OFADD__(v90, 1))
      break;
    if (v89 >= v111)
      goto LABEL_103;
    v88 = *(_QWORD *)&__srca[8 * v89];
    ++v90;
    if (v88)
      goto LABEL_102;
  }
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t result;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type _TimeZoneICU and conformance _TimeZoneICU, (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneICU, (uint64_t)&protocol conformance descriptor for _TimeZoneICU);
  a5[(a1 >> 6) + 8] |= 1 << a1;
  v11 = (_QWORD *)(a5[6] + 16 * a1);
  *v11 = a2;
  v11[1] = a3;
  v12 = (_QWORD *)(a5[7] + 16 * a1);
  *v12 = a4;
  v12[1] = result;
  v13 = a5[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a5[2] = v15;
  return result;
}

{
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = outlined init with take of PredicateCodableConfiguration.AllowListKeyPath(a4, a5[7] + 48 * a1);
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v10 = a5[6];
  v11 = type metadata accessor for CombineIdentifier();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a2, v11);
  v13 = (_QWORD *)(a5[7] + 16 * a1);
  *v13 = a3;
  v13[1] = a4;
  v14 = a5[2];
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    a5[2] = v16;
  return result;
}

unint64_t specialized ICULegacyNumberFormatter.parseAsDecimal<A>(_:upperBound:)(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  _BYTE v21[40];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v10 = String.UTF16View.distance(from:to:)();
  if (v10)
  {
    v11 = v10;
    v12 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v10, 0);
    v13 = specialized Sequence._copySequenceContents(initializing:)((unint64_t)&v19, (uint64_t)(v12 + 4), v11, a1, a2, a3, a4);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRelease();
    if (v13 != v11)
    {
      __break(1u);
LABEL_18:
      __break(1u);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  ufmt_open();
  if (v12[2] >> 31)
    goto LABEL_18;
  unum_parseToUFormattable();
  swift_release();
  *a5 = 0;
  if (!ufmt_getDecNumChars())
  {
    ufmt_close();
    v14 = 0;
LABEL_8:
    v15 = 1;
    goto LABEL_9;
  }
  v17 = MEMORY[0x186DA4658]();
  v14 = v18;
  if (!v18)
  {
    ufmt_close();
    goto LABEL_8;
  }
  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)(v17, v18, 0x2EuLL, 0xE100000000000000, 0, (uint64_t)v21);
  swift_bridgeObjectRelease();
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v21, (uint64_t)&v19);
  v15 = v20;
  if (v20 == 1)
    v14 = 0;
  else
    v14 = v19;
  ufmt_close();
LABEL_9:
  LOBYTE(v19) = v15;
  return v14;
}

unint64_t specialized Sequence._copySequenceContents(initializing:)(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _BOOL4 v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned __int16 v33;
  unint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BOOL4 v77;
  _BOOL4 v78;
  _BOOL4 v79;
  _BOOL4 v80;
  _BOOL4 v81;
  _BOOL4 v82;
  _BOOL4 v83;
  _BOOL4 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;

  v9 = (_QWORD *)result;
  if (!a2)
  {
    v13 = 0;
    v19 = a4;
LABEL_58:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v19;
    return v13;
  }
  if (!a3)
  {
    v19 = a4;
LABEL_57:
    v13 = a3;
    goto LABEL_58;
  }
  v10 = ((unint64_t)a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v10) = 1;
  if ((a7 & 0x2000000000000000) != 0)
    v11 = HIBYTE(a7) & 0xF;
  else
    v11 = a6 & 0xFFFFFFFFFFFFLL;
  if ((a7 & 0x2000000000000000) != 0)
    v12 = (a7 & 0x4000000000000000) != 0;
  else
    v12 = a6 < 0;
  if ((a3 & 0x8000000000000000) == 0)
  {
    v13 = 0;
    v14 = a5 >> 14;
    v15 = 4 << v10;
    v16 = a4 >> 14;
    v17 = a7 & 0xFFFFFFFFFFFFFFLL;
    v18 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
    v19 = a4;
    while (1)
    {
      v20 = v19 >> 14;
      if (v19 >> 14 == v14)
        goto LABEL_58;
      v21 = v19;
      if ((v19 & 0xC) == v15)
      {
        v85 = a2;
        v93 = a4;
        v62 = a3;
        v69 = v17;
        v101 = a5;
        v24 = v9;
        v25 = v11;
        v77 = v12;
        v26 = v16;
        v57 = v18;
        result = _StringGuts._slowEnsureMatchingEncoding(_:)(v19, a6, a7);
        v18 = v57;
        a3 = v62;
        v17 = v69;
        v16 = v26;
        v12 = v77;
        v11 = v25;
        a2 = v85;
        a4 = v93;
        v9 = v24;
        a5 = v101;
        v21 = result;
        v20 = result >> 14;
        if (result >> 14 < v26)
        {
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          __break(1u);
          break;
        }
      }
      else if (v20 < v16)
      {
        goto LABEL_59;
      }
      if (v20 >= v14)
        goto LABEL_59;
      if ((a7 & 0x1000000000000000) != 0)
      {
        v86 = a2;
        v94 = a4;
        v63 = a3;
        v70 = v17;
        v102 = a5;
        v27 = v9;
        v28 = v11;
        v78 = v12;
        v23 = v16;
        v58 = v18;
        result = String.UTF16View._foreignSubscript(position:)();
        v18 = v58;
        a3 = v63;
        v17 = v70;
        v16 = v23;
        v12 = v78;
        v11 = v28;
        a2 = v86;
        a4 = v94;
        v9 = v27;
        a5 = v102;
        LOWORD(v23) = result;
        goto LABEL_33;
      }
      if ((v21 & 1) != 0)
      {
        v22 = v21 >> 16;
        if ((a7 & 0x2000000000000000) == 0)
          goto LABEL_22;
      }
      else
      {
        v87 = a2;
        v95 = a4;
        v64 = a3;
        v71 = v17;
        v103 = a5;
        v29 = v9;
        v30 = v11;
        v79 = v12;
        v54 = v16;
        v59 = v18;
        result = _StringGuts.scalarAlignSlow(_:)(v21, a6, a7);
        v16 = v54;
        v18 = v59;
        a3 = v64;
        v17 = v71;
        v12 = v79;
        v11 = v30;
        a2 = v87;
        a4 = v95;
        v9 = v29;
        a5 = v103;
        v22 = (result & 0xFFFFFFFFFFFFFFF2 | 1) >> 16;
        if ((a7 & 0x2000000000000000) == 0)
        {
LABEL_22:
          result = v18;
          if ((a6 & 0x1000000000000000) == 0)
          {
            v90 = a2;
            v98 = a4;
            v106 = a5;
            v44 = v9;
            v67 = a3;
            v74 = v17;
            v52 = v11;
            v55 = v16;
            v82 = v12;
            v60 = v18;
            result = _StringObject.sharedUTF8.getter();
            v16 = v55;
            v18 = v60;
            a3 = v67;
            v17 = v74;
            v12 = v82;
            v11 = v52;
            a2 = v90;
            a4 = v98;
            v9 = v44;
            a5 = v106;
          }
          LODWORD(v23) = *(unsigned __int8 *)(result + v22);
          if (*(char *)(result + v22) < 0)
            __asm { BR              X9 }
          goto LABEL_32;
        }
      }
      v109 = a6;
      v110 = v17;
      LODWORD(v23) = *((unsigned __int8 *)&v109 + v22);
      if (*((char *)&v109 + v22) < 0)
        __asm { BR              X9 }
LABEL_32:
      if ((v21 & 0xC000) == 0x4000)
        goto LABEL_61;
LABEL_33:
      if ((v19 & 0xC) == v15)
      {
        v34 = v19;
        v88 = a2;
        v96 = a4;
        v65 = a3;
        v72 = v17;
        v104 = a5;
        v35 = v9;
        v36 = v11;
        v80 = v12;
        v37 = v16;
        v38 = v18;
        result = _StringGuts._slowEnsureMatchingEncoding(_:)(v34, a6, a7);
        v18 = v38;
        a3 = v65;
        v17 = v72;
        v16 = v37;
        v12 = v80;
        v11 = v36;
        a2 = v88;
        a4 = v96;
        v9 = v35;
        a5 = v104;
        v19 = result;
      }
      v31 = v19 >> 16;
      if (v19 >> 16 >= v11)
        goto LABEL_60;
      if ((a7 & 0x1000000000000000) != 0)
      {
        v39 = v19;
        v89 = a2;
        v97 = a4;
        v66 = a3;
        v73 = v17;
        v105 = a5;
        v40 = v9;
        v41 = v11;
        v81 = v12;
        v42 = v16;
        v43 = v18;
        result = MEMORY[0x186DA488C](v39, a6, a7);
        v18 = v43;
        a3 = v66;
        v17 = v73;
        v16 = v42;
        v12 = v81;
        v11 = v41;
        a2 = v89;
        a4 = v97;
        v9 = v40;
        a5 = v105;
        v19 = result;
      }
      else
      {
        if (!v12)
        {
          if ((v19 & 0xC001) != 0)
          {
            if ((a7 & 0x2000000000000000) == 0)
              goto LABEL_40;
LABEL_49:
            v109 = a6;
            v110 = v17;
            LODWORD(v32) = *((unsigned __int8 *)&v109 + v31);
            if ((v32 & 0x80) == 0)
            {
LABEL_50:
              v32 = 1;
LABEL_51:
              v19 += v32 << 16;
              v33 = 5;
              goto LABEL_52;
            }
          }
          else
          {
            v45 = v19;
            v91 = a2;
            v99 = a4;
            v68 = a3;
            v75 = v17;
            v107 = a5;
            v46 = v9;
            v47 = v11;
            v83 = v12;
            v48 = v16;
            v49 = v18;
            result = _StringGuts.scalarAlignSlow(_:)(v45, a6, a7);
            v18 = v49;
            a3 = v68;
            v17 = v75;
            v16 = v48;
            v12 = v83;
            v11 = v47;
            a2 = v91;
            a4 = v99;
            v9 = v46;
            a5 = v107;
            v19 = result & 0xFFFFFFFFFFFFFFF2 | 1;
            v31 = result >> 16;
            if ((a7 & 0x2000000000000000) != 0)
              goto LABEL_49;
LABEL_40:
            result = v18;
            if ((a6 & 0x1000000000000000) != 0)
            {
              LODWORD(v32) = *(unsigned __int8 *)(v18 + v31);
              if ((v32 & 0x80) == 0)
                goto LABEL_50;
            }
            else
            {
              v92 = a2;
              v100 = a4;
              v108 = a5;
              v50 = v9;
              v51 = a3;
              v53 = v11;
              v56 = v16;
              v84 = v12;
              v76 = v17;
              v61 = v18;
              result = _StringObject.sharedUTF8.getter();
              v16 = v56;
              v18 = v61;
              v17 = v76;
              v12 = v84;
              v11 = v53;
              a2 = v92;
              a4 = v100;
              a3 = v51;
              v9 = v50;
              a5 = v108;
              LODWORD(v32) = *(unsigned __int8 *)(result + v31);
              if ((v32 & 0x80) == 0)
                goto LABEL_50;
            }
          }
          LODWORD(v32) = __clz(v32 ^ 0xFF) - 24;
          if ((_DWORD)v32 != 4)
          {
            v32 = v32;
            goto LABEL_51;
          }
          if ((v19 & 0xC000) != 0)
          {
            v32 = 4;
            goto LABEL_51;
          }
          v33 = 16388;
LABEL_52:
          v19 = v19 & 0xFFFFFFFFFFFF0000 | v33;
          goto LABEL_14;
        }
        v19 = (v19 & 0xFFFFFFFFFFFF0000) + 65549;
      }
LABEL_14:
      *(_WORD *)(a2 + 2 * v13++) = v23;
      if (a3 == v13)
        goto LABEL_57;
    }
  }
  __break(1u);
  return result;
}

id @objc static NSTimeZone._timeZoneWith(name:data:)(uint64_t a1, uint64_t a2, void *a3, id a4)
{
  id v5;
  unint64_t v6;
  unint64_t v7;
  id v8;
  unint64_t v9;
  unint64_t v10;
  id v11;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v7 = v6;
  if (a4)
  {
    v8 = a4;
    a4 = specialized Data.init(referencing:)(v8);
    v10 = v9;

  }
  else
  {
    v10 = 0xF000000000000000;
  }
  v11 = specialized static NSTimeZone._timeZoneWith(name:data:)((uint64_t)v5, v7, (uint64_t)a4, v10);
  outlined consume of Data?((uint64_t)a4, v10);
  swift_bridgeObjectRelease();
  return v11;
}

id specialized static NSTimeZone._timeZoneWith(name:data:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  os_unfair_lock_s *v6;
  uint64_t v10;
  os_unfair_lock_s *v11;
  objc_class *v12;
  char *v13;
  uint64_t v14;
  __int128 v15;
  objc_super v16;
  _OWORD v17[2];

  if (a4 >> 60 == 15)
  {
    if (one-time initialization token for cache != -1)
      swift_once();
    v6 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
    swift_retain_n();
    os_unfair_lock_lock(v6);
    closure #1 in TimeZoneCache.bridgedFixed(_:)(a1, a2, (char **)v17);
    os_unfair_lock_unlock(v6);
    swift_release_n();
    return *(id *)&v17[0];
  }
  else
  {
    outlined copy of Data?(a3, a4);
    v10 = one-time initialization token for cache;
    swift_bridgeObjectRetain();
    if (v10 != -1)
      swift_once();
    v11 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
    swift_retain_n();
    os_unfair_lock_lock(v11);
    closure #1 in TimeZoneCache.fixed(_:)(a1, a2, (uint64_t *)v17);
    os_unfair_lock_unlock(v11);
    swift_bridgeObjectRelease();
    swift_release_n();
    if (*(_QWORD *)&v17[0])
    {
      v15 = v17[0];
      v12 = (objc_class *)type metadata accessor for _NSSwiftTimeZone();
      v13 = (char *)objc_allocWithZone(v12);
      *(_OWORD *)&v13[OBJC_IVAR____NSSwiftTimeZone_timeZone] = v15;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<_NSSwiftTimeZone.State>._Buffer);
      v14 = swift_allocObject();
      *(_DWORD *)(v14 + 32) = 0;
      *(_QWORD *)(v14 + 16) = a3;
      *(_QWORD *)(v14 + 24) = a4;
      *(_QWORD *)&v13[OBJC_IVAR____NSSwiftTimeZone_lock] = v14;
      v16.receiver = v13;
      v16.super_class = v12;
      return objc_msgSendSuper2(&v16, sel_init);
    }
    else
    {
      outlined consume of Data?(a3, a4);
      return 0;
    }
  }
}

uint64_t TimeZone.init(abbreviation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11[2];

  result = specialized static TimeZone.identifierForAbbreviation(_:)(a1, a2);
  if (!v5)
    goto LABEL_6;
  v6 = result;
  v7 = v5;
  if (one-time initialization token for cache != -1)
    swift_once();
  v8 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v8);
  closure #1 in TimeZoneCache.fixed(_:)(v6, v7, v11);
  os_unfair_lock_unlock(v8);
  swift_release_n();
  v9 = v11[0];
  v10 = v11[1];
  result = swift_bridgeObjectRelease();
  if (v9)
  {
    *a3 = v9;
    a3[1] = v10;
  }
  else
  {
LABEL_6:
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

uint64_t specialized static TimeZone.identifierForAbbreviation(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v4 = one-time initialization token for cache;
  swift_bridgeObjectRetain();
  if (v4 != -1)
    swift_once();
  v5 = static TimeZoneCache.cache + 16;
  v6 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  closure #1 in TimeZoneCache.timeZoneAbbreviations()(v5, &v16);
  os_unfair_lock_unlock(v6);
  swift_release_n();
  v7 = v16;
  if (*(_QWORD *)(v16 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v9 & 1) != 0))
  {
    v10 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 16 * v8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v11 = specialized static TimeZone.tryParseGMTName(_:)();
    if ((v12 & 1) != 0)
    {
      return 0;
    }
    else
    {
      v13 = specialized static TimeZone.nameForSecondsFromGMT(_:)(v11);
      if (v14)
        return v13;
      else
        return 0;
    }
  }
  return v10;
}

uint64_t closure #1 in TimeZoneCache.timeZoneAbbreviations()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 72);
  if (!v4)
  {
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 120);
    v4 = swift_bridgeObjectRetain();
  }
  *a2 = v4;
  return swift_bridgeObjectRetain();
}

uint64_t TimeZone.init(identifier:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  os_unfair_lock_s *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9[2];

  if (one-time initialization token for cache != -1)
    swift_once();
  v6 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  closure #1 in TimeZoneCache.fixed(_:)(a1, a2, v9);
  os_unfair_lock_unlock(v6);
  result = swift_release_n();
  v8 = v9[1];
  if (!v9[0])
    v8 = 0;
  *a3 = v9[0];
  a3[1] = v8;
  return result;
}

uint64_t closure #1 in TimeZoneCache.fixed(_:)@<X0>(uint64_t a1@<X1>, unint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = TimeZoneCache.State.fixed(_:)(a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t TimeZoneCache.State.fixed(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v8;
  unint64_t v9;
  char v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  _QWORD *v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  char v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  _QWORD *v43;
  uint64_t *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  int64_t v63;
  unint64_t v64;
  int64_t v65;
  uint64_t v66;
  char *v67;
  unint64_t v68;
  int64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  _QWORD *v80;
  int64_t v81;
  unint64_t v82;
  int64_t v83;
  unint64_t v84;
  int64_t v85;
  char *v86;
  char *__src;
  uint64_t v88;
  uint64_t v89;

  v4 = v2;
  v5 = a1 == 5524807 && a2 == 0xE300000000000000;
  if (!v5 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    v27 = *(_QWORD *)(v2 + 40);
    if (*(_QWORD *)(v27 + 16))
    {
      swift_bridgeObjectRetain();
      v28 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
      if ((v29 & 1) != 0)
      {
        v11 = *(_QWORD **)(*(_QWORD *)(v27 + 56) + 16 * v28);
        swift_unknownObjectRetain();
LABEL_37:
        swift_bridgeObjectRelease();
        return (uint64_t)v11;
      }
      swift_bridgeObjectRelease();
    }
    type metadata accessor for _TimeZoneICU();
    swift_allocObject();
    swift_bridgeObjectRetain();
    v11 = _TimeZoneICU.init(identifier:)(a1, a2);
    if (!v11)
      return (uint64_t)v11;
    v34 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type _TimeZoneICU and conformance _TimeZoneICU, (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneICU, (uint64_t)&protocol conformance descriptor for _TimeZoneICU);
    swift_bridgeObjectRetain();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v89 = *(_QWORD *)(v4 + 40);
    *(_QWORD *)(v4 + 40) = 0x8000000000000000;
    v36 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    v38 = *(_QWORD *)(v89 + 16);
    v39 = (v37 & 1) == 0;
    v32 = __OFADD__(v38, v39);
    v40 = v38 + v39;
    if (v32)
    {
      __break(1u);
    }
    else
    {
      v3 = v37;
      if (*(_QWORD *)(v89 + 24) < v40)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v40, isUniquelyReferenced_nonNull_native);
        v41 = v89;
        v36 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
        if ((v3 & 1) != (v42 & 1))
          goto LABEL_118;
        if ((v3 & 1) == 0)
        {
LABEL_34:
          while (1)
          {
            *(_QWORD *)(v41 + 8 * (v36 >> 6) + 64) |= 1 << v36;
            v44 = (uint64_t *)(*(_QWORD *)(v41 + 48) + 16 * v36);
            *v44 = a1;
            v44[1] = a2;
            v45 = (_QWORD *)(*(_QWORD *)(v41 + 56) + 16 * v36);
            *v45 = v11;
            v45[1] = v34;
            v46 = *(_QWORD *)(v41 + 16);
            v32 = __OFADD__(v46, 1);
            v47 = v46 + 1;
            if (!v32)
              break;
            __break(1u);
LABEL_111:
            swift_bridgeObjectRelease();
            v36 = v84;
            if ((v3 & 1) != 0)
              goto LABEL_30;
          }
          *(_QWORD *)(v41 + 16) = v47;
          swift_bridgeObjectRetain();
          goto LABEL_36;
        }
LABEL_30:
        v43 = (_QWORD *)(*(_QWORD *)(v41 + 56) + 16 * v36);
        swift_unknownObjectRelease();
        *v43 = v11;
        v43[1] = v34;
LABEL_36:
        *(_QWORD *)(v4 + 40) = v41;
        swift_bridgeObjectRelease();
        goto LABEL_37;
      }
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v41 = v89;
        if ((v37 & 1) == 0)
          goto LABEL_34;
        goto LABEL_30;
      }
    }
    v84 = v36;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, _TimeZoneProtocol>);
    v66 = static _DictionaryStorage.copy(original:)();
    v41 = v66;
    if (!*(_QWORD *)(v89 + 16))
      goto LABEL_111;
    v67 = (char *)(v66 + 64);
    v86 = (char *)(v89 + 64);
    v68 = (unint64_t)((1 << *(_BYTE *)(v41 + 32)) + 63) >> 6;
    if (v41 != v89 || v67 >= &v86[8 * v68])
      memmove(v67, v86, 8 * v68);
    v69 = 0;
    *(_QWORD *)(v41 + 16) = *(_QWORD *)(v89 + 16);
    v70 = 1 << *(_BYTE *)(v89 + 32);
    v71 = -1;
    if (v70 < 64)
      v71 = ~(-1 << v70);
    v72 = v71 & *(_QWORD *)(v89 + 64);
    v85 = (unint64_t)(v70 + 63) >> 6;
    while (1)
    {
      if (v72)
      {
        v73 = __clz(__rbit64(v72));
        v72 &= v72 - 1;
        v74 = v73 | (v69 << 6);
      }
      else
      {
        v81 = v69 + 1;
        if (__OFADD__(v69, 1))
        {
LABEL_114:
          __break(1u);
          goto LABEL_115;
        }
        if (v81 >= v85)
          goto LABEL_111;
        v82 = *(_QWORD *)&v86[8 * v81];
        ++v69;
        if (!v82)
        {
          v69 = v81 + 1;
          if (v81 + 1 >= v85)
            goto LABEL_111;
          v82 = *(_QWORD *)&v86[8 * v69];
          if (!v82)
          {
            v69 = v81 + 2;
            if (v81 + 2 >= v85)
              goto LABEL_111;
            v82 = *(_QWORD *)&v86[8 * v69];
            if (!v82)
            {
              v69 = v81 + 3;
              if (v81 + 3 >= v85)
                goto LABEL_111;
              v82 = *(_QWORD *)&v86[8 * v69];
              if (!v82)
              {
                v69 = v81 + 4;
                if (v81 + 4 >= v85)
                  goto LABEL_111;
                v82 = *(_QWORD *)&v86[8 * v69];
                if (!v82)
                {
                  v69 = v81 + 5;
                  if (v81 + 5 >= v85)
                    goto LABEL_111;
                  v82 = *(_QWORD *)&v86[8 * v69];
                  if (!v82)
                  {
                    v69 = v81 + 6;
                    if (v81 + 6 >= v85)
                      goto LABEL_111;
                    v82 = *(_QWORD *)&v86[8 * v69];
                    if (!v82)
                    {
                      v83 = v81 + 7;
                      if (v83 >= v85)
                        goto LABEL_111;
                      v82 = *(_QWORD *)&v86[8 * v83];
                      if (v82)
                      {
                        v69 = v83;
                      }
                      else
                      {
                        do
                        {
                          v69 = v83 + 1;
                          if (__OFADD__(v83, 1))
                            goto LABEL_116;
                          if (v69 >= v85)
                            goto LABEL_111;
                          v82 = *(_QWORD *)&v86[8 * v69];
                          ++v83;
                        }
                        while (!v82);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v72 = (v82 - 1) & v82;
        v74 = __clz(__rbit64(v82)) + (v69 << 6);
      }
      v75 = 16 * v74;
      v76 = (uint64_t *)(*(_QWORD *)(v89 + 48) + v75);
      v78 = *v76;
      v77 = v76[1];
      v79 = *(_OWORD *)(*(_QWORD *)(v89 + 56) + v75);
      v80 = (_QWORD *)(*(_QWORD *)(v41 + 48) + v75);
      *v80 = v78;
      v80[1] = v77;
      *(_OWORD *)(*(_QWORD *)(v41 + 56) + v75) = v79;
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
    }
  }
  v8 = *(_QWORD *)(v2 + 48);
  if (*(_QWORD *)(v8 + 16))
  {
    v9 = specialized __RawDictionaryStorage.find<A>(_:)(0);
    if ((v10 & 1) != 0)
    {
      v11 = *(_QWORD **)(*(_QWORD *)(v8 + 56) + 16 * v9);
      swift_unknownObjectRetain();
      return (uint64_t)v11;
    }
  }
  type metadata accessor for _TimeZoneGMTICU();
  v11 = (_QWORD *)swift_allocObject();
  v12 = specialized static TimeZone.nameForSecondsFromGMT(_:)(0);
  if (!v13)
  {
    swift_deallocPartialClassInstance();
    return 0;
  }
  v14 = v12;
  v15 = v13;
  v16 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type _TimeZoneGMTICU and conformance _TimeZoneGMTICU, (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneGMTICU, (uint64_t)&protocol conformance descriptor for _TimeZoneGMTICU);
  v11[3] = v14;
  v11[4] = v15;
  v11[2] = 0;
  swift_retain();
  v17 = swift_isUniquelyReferenced_nonNull_native();
  v88 = *(_QWORD *)(v4 + 48);
  *(_QWORD *)(v4 + 48) = 0x8000000000000000;
  v19 = specialized __RawDictionaryStorage.find<A>(_:)(0);
  v20 = *(_QWORD *)(v88 + 16);
  v21 = (v18 & 1) == 0;
  v22 = v20 + v21;
  if (__OFADD__(v20, v21))
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v15) = v18;
    if (*(_QWORD *)(v88 + 24) < v22)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v22, v17);
      v23 = v88;
      v24 = specialized __RawDictionaryStorage.find<A>(_:)(0);
      if ((v15 & 1) != (v25 & 1))
        goto LABEL_117;
      v19 = v24;
      if ((v15 & 1) == 0)
        goto LABEL_21;
      goto LABEL_14;
    }
    if ((v17 & 1) != 0)
    {
      v23 = v88;
      if ((v18 & 1) == 0)
      {
LABEL_21:
        while (1)
        {
          *(_QWORD *)(v23 + 8 * (v19 >> 6) + 64) |= 1 << v19;
          *(_QWORD *)(*(_QWORD *)(v23 + 48) + 8 * v19) = 0;
          v30 = (_QWORD *)(*(_QWORD *)(v23 + 56) + 16 * v19);
          *v30 = v11;
          v30[1] = v16;
          v31 = *(_QWORD *)(v23 + 16);
          v32 = __OFADD__(v31, 1);
          v33 = v31 + 1;
          if (!v32)
            break;
          __break(1u);
LABEL_75:
          swift_bridgeObjectRelease();
          if ((v15 & 1) != 0)
            goto LABEL_14;
        }
        *(_QWORD *)(v23 + 16) = v33;
        goto LABEL_23;
      }
LABEL_14:
      v26 = (_QWORD *)(*(_QWORD *)(v23 + 56) + 16 * v19);
      swift_unknownObjectRelease();
      *v26 = v11;
      v26[1] = v16;
LABEL_23:
      *(_QWORD *)(v4 + 48) = v23;
      goto LABEL_37;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, _TimeZoneProtocol>);
  v49 = static _DictionaryStorage.copy(original:)();
  v23 = v49;
  if (!*(_QWORD *)(v88 + 16))
    goto LABEL_75;
  v50 = (char *)(v49 + 64);
  __src = (char *)(v88 + 64);
  v51 = (unint64_t)((1 << *(_BYTE *)(v23 + 32)) + 63) >> 6;
  if (v23 != v88 || v50 >= &__src[8 * v51])
    memmove(v50, __src, 8 * v51);
  v52 = 0;
  *(_QWORD *)(v23 + 16) = *(_QWORD *)(v88 + 16);
  v53 = 1 << *(_BYTE *)(v88 + 32);
  v54 = -1;
  if (v53 < 64)
    v54 = ~(-1 << v53);
  v55 = v54 & *(_QWORD *)(v88 + 64);
  v56 = (unint64_t)(v53 + 63) >> 6;
  while (1)
  {
    if (v55)
    {
      v57 = __clz(__rbit64(v55));
      v55 &= v55 - 1;
      v58 = v57 | (v52 << 6);
      goto LABEL_48;
    }
    v63 = v52 + 1;
    if (__OFADD__(v52, 1))
    {
      __break(1u);
      goto LABEL_114;
    }
    if (v63 >= v56)
      goto LABEL_75;
    v64 = *(_QWORD *)&__src[8 * v63];
    ++v52;
    if (!v64)
    {
      v52 = v63 + 1;
      if (v63 + 1 >= v56)
        goto LABEL_75;
      v64 = *(_QWORD *)&__src[8 * v52];
      if (!v64)
      {
        v52 = v63 + 2;
        if (v63 + 2 >= v56)
          goto LABEL_75;
        v64 = *(_QWORD *)&__src[8 * v52];
        if (!v64)
        {
          v52 = v63 + 3;
          if (v63 + 3 >= v56)
            goto LABEL_75;
          v64 = *(_QWORD *)&__src[8 * v52];
          if (!v64)
          {
            v52 = v63 + 4;
            if (v63 + 4 >= v56)
              goto LABEL_75;
            v64 = *(_QWORD *)&__src[8 * v52];
            if (!v64)
            {
              v52 = v63 + 5;
              if (v63 + 5 >= v56)
                goto LABEL_75;
              v64 = *(_QWORD *)&__src[8 * v52];
              if (!v64)
              {
                v52 = v63 + 6;
                if (v63 + 6 >= v56)
                  goto LABEL_75;
                v64 = *(_QWORD *)&__src[8 * v52];
                if (!v64)
                {
                  v52 = v63 + 7;
                  if (v63 + 7 >= v56)
                    goto LABEL_75;
                  v64 = *(_QWORD *)&__src[8 * v52];
                  if (!v64)
                    break;
                }
              }
            }
          }
        }
      }
    }
LABEL_73:
    v55 = (v64 - 1) & v64;
    v58 = __clz(__rbit64(v64)) + (v52 << 6);
LABEL_48:
    v59 = 8 * v58;
    v60 = *(_QWORD *)(*(_QWORD *)(v88 + 48) + 8 * v58);
    v61 = 16 * v58;
    v62 = *(_OWORD *)(*(_QWORD *)(v88 + 56) + v61);
    *(_QWORD *)(*(_QWORD *)(v23 + 48) + v59) = v60;
    *(_OWORD *)(*(_QWORD *)(v23 + 56) + v61) = v62;
    swift_unknownObjectRetain();
  }
  v65 = v63 + 8;
  if (v65 >= v56)
    goto LABEL_75;
  v64 = *(_QWORD *)&__src[8 * v65];
  if (v64)
  {
    v52 = v65;
    goto LABEL_73;
  }
  while (1)
  {
    v52 = v65 + 1;
    if (__OFADD__(v65, 1))
      break;
    if (v52 >= v56)
      goto LABEL_75;
    v64 = *(_QWORD *)&__src[8 * v52];
    ++v65;
    if (v64)
      goto LABEL_73;
  }
LABEL_115:
  __break(1u);
LABEL_116:
  __break(1u);
LABEL_117:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_118:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

_QWORD *protocol witness for _TimeZoneProtocol.init(identifier:) in conformance _TimeZoneICU(uint64_t a1, unint64_t a2)
{
  swift_allocObject();
  return _TimeZoneICU.init(identifier:)(a1, a2);
}

_QWORD *_TimeZoneICU.init(identifier:)(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = a2;
  v4 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v4)
    goto LABEL_9;
  v5 = a1;
  v6 = specialized static TimeZone.tryParseGMTName(_:)();
  if ((v7 & 1) != 0 || (v8 = specialized static TimeZone.nameForSecondsFromGMT(_:)(v6), !v9))
  {
    swift_bridgeObjectRetain();
    v12 = specialized _copyCollectionToContiguousArray<A>(_:)(v5, v3);
    swift_bridgeObjectRelease();
    specialized _withResizingUCharBuffer(initialSize:_:)(32, (uint64_t)(v12 + 4), v12[2]);
    v14 = v13;
    swift_release();
    swift_bridgeObjectRelease();
    if (v14)
      goto LABEL_8;
LABEL_9:
    swift_bridgeObjectRelease();
    swift_deallocPartialClassInstance();
    return 0;
  }
  v10 = v8;
  v11 = v9;
  swift_bridgeObjectRelease();
  v5 = v10;
  v3 = v11;
LABEL_8:
  v2[3] = v5;
  v2[4] = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<_TimeZoneICU.State>._Buffer);
  v15 = swift_allocObject();
  *(_DWORD *)(v15 + 24) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  v2[2] = v15;
  return v2;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _BYTE v7[8];

  v2 = a2;
  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_5;
  v4 = String.UTF16View._nativeGetOffset(for:)();
  if (!v4)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    v5 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v4, 0);
    swift_bridgeObjectRetain();
    v2 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v7, (uint64_t)(v5 + 4), v4, a1, v2);
    swift_bridgeObjectRelease();
    if (v2 == v4)
      break;
    __break(1u);
LABEL_5:
    v4 = String.UTF16View._foreignCount()();
    if (!v4)
      return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v5;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned int v24;
  uint64_t *v25;
  __int16 v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];

  if ((a5 & 0x2000000000000000) != 0)
    v8 = HIBYTE(a5) & 0xF;
  else
    v8 = a4 & 0xFFFFFFFFFFFFLL;
  if (!a2)
  {
    v12 = 0;
    v13 = 0;
    a3 = 0;
    v16 = 1;
    goto LABEL_31;
  }
  result = swift_bridgeObjectRetain();
  if (!a3)
  {
    v12 = 0;
    v13 = 0;
    v16 = 1;
    goto LABEL_30;
  }
  if (a3 < 0)
  {
    __break(1u);
    return result;
  }
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = a5 & 0xFFFFFFFFFFFFFFLL;
  v30 = a1;
  v16 = 1;
  v17 = qword_181EF35C0;
  v18 = qword_181EF35B0;
  while (1)
  {
    if ((v16 & 1) == 0)
    {
      v16 = 1;
      LOWORD(v19) = v13;
      v13 = 0;
      goto LABEL_9;
    }
    if (v12 >= v8)
      break;
    if ((a5 & 0x1000000000000000) != 0)
    {
      v22 = v15;
      v23 = v17;
      v24 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      v18 = qword_181EF35B0;
      v17 = v23;
      v15 = v22;
      v19 = v24;
    }
    else
    {
      if ((a5 & 0x2000000000000000) == 0)
      {
        v20 = (a5 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if ((a4 & 0x1000000000000000) == 0)
        {
          v27 = v15;
          v28 = v17;
          v20 = _StringObject.sharedUTF8.getter();
          v18 = qword_181EF35B0;
          v17 = v28;
          v15 = v27;
        }
        v19 = *(unsigned __int8 *)(v20 + v12);
        if (*(char *)(v20 + v12) < 0)
          __asm { BR              X9 }
        ++v12;
        v16 = 1;
        goto LABEL_9;
      }
      v31[0] = a4;
      v31[1] = v15;
      v19 = *((unsigned __int8 *)v31 + v12);
      if (*((char *)v31 + v12) < 0)
        __asm { BR              X9 }
      v21 = 1;
    }
    v12 += v21;
    if (HIWORD(v19))
    {
      v29 = v15;
      v25 = v18;
      v13 = Unicode.Scalar.UTF16View.subscript.getter();
      v26 = Unicode.Scalar.UTF16View.subscript.getter();
      v18 = v25;
      v17 = qword_181EF35C0;
      v15 = v29;
      LOWORD(v19) = v26;
      v16 = 0;
    }
    else
    {
      v16 = 1;
    }
LABEL_9:
    *(_WORD *)(a2 + 2 * v14++) = v19;
    if (a3 == v14)
      goto LABEL_29;
  }
  v16 = 1;
  a3 = v14;
LABEL_29:
  a1 = v30;
LABEL_30:
  swift_bridgeObjectRelease();
LABEL_31:
  *(_QWORD *)a1 = a4;
  *(_QWORD *)(a1 + 8) = a5;
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 24) = v8;
  *(_WORD *)(a1 + 32) = v13;
  *(_BYTE *)(a1 + 34) = v16;
  return a3;
}

uint64_t specialized static TimeZone.tryParseGMTName(_:)()
{
  uint64_t v0;
  unint64_t v1;
  char v2;
  char v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  __int16 v11;
  unint64_t v12;
  __int16 v13;
  __int16 v14;
  __int16 v15;
  __int16 v16;
  unsigned __int8 v17;
  int v18;
  __int16 v19;
  unsigned int v20;

  v0 = String.count.getter();
  if ((unint64_t)(v0 - 10) < 0xFFFFFFFFFFFFFFF9)
    return 0;
  v1 = v0;
  v2 = specialized Sequence<>.starts<A>(with:)();
  v3 = specialized Sequence<>.starts<A>(with:)();
  if ((v2 & 1) == 0 && (v3 & 1) == 0)
    return 0;
  if (v1 == 3)
    return 0;
  if (v1 < 5)
    return 0;
  String.index(_:offsetBy:)();
  v6 = String.subscript.getter();
  v7 = v5;
  if (v6 == 43 && v5 == 0xE100000000000000)
  {
    v8 = 1;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    if (v6 == 45 && v7 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
      v9 = 1;
      goto LABEL_17;
    }
  }
  v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  v9 = v8 ^ 1 | v10;
  if ((v8 & 1) == 0 && (v10 & 1) == 0)
    return 0;
LABEL_17:
  String.index(after:)();
  String.subscript.getter();
  v11 = Character.asciiValue.getter();
  swift_bridgeObjectRelease();
  result = 0;
  if ((v11 & 0x100) != 0 || (v11 - 58) < 0xF6u)
    return result;
  v12 = (v11 - 48);
  if (v1 == 5)
  {
    if ((v9 & 1) != 0)
      return -3600 * (int)v12;
    return 3600 * v12;
  }
  String.index(after:)();
  String.subscript.getter();
  v13 = Character.asciiValue.getter();
  swift_bridgeObjectRelease();
  if ((v13 & 0x100) != 0)
    return 0;
  if (v13 > 0x2Fu)
  {
    if (v13 != 58)
    {
      if (v13 > 0x39u)
        return 0;
      v12 = 10 * v12 + (v13 - 48);
      if (v12 > 0x12)
        return 0;
      if (v1 == 6)
      {
        if ((v9 & 1) != 0)
          return -3600 * (int)v12;
        return 3600 * v12;
      }
    }
  }
  else if (v13 != 46)
  {
    return 0;
  }
  if (v1 < 8)
    return 0;
  String.index(after:)();
  String.subscript.getter();
  v14 = Character.asciiValue.getter();
  swift_bridgeObjectRelease();
  if ((v14 & 0x100) != 0)
    return 0;
  if (v14 < 0x30u)
  {
    result = 0;
    if (v1 != 9 || v14 != 46)
      return result;
    goto LABEL_40;
  }
  if (v14 == 58)
  {
    if (v1 == 9)
    {
LABEL_40:
      String.index(after:)();
      goto LABEL_43;
    }
    return 0;
  }
  result = 0;
  if (v1 != 8 || v14 >= 0x36u)
    return result;
LABEL_43:
  String.subscript.getter();
  v15 = Character.asciiValue.getter();
  swift_bridgeObjectRelease();
  String.index(after:)();
  String.subscript.getter();
  v16 = Character.asciiValue.getter();
  swift_bridgeObjectRelease();
  result = 0;
  if ((v16 & 0x100) != 0 || (v16 - 58) < 0xF6u)
    return result;
  if ((v15 & 0x100) != 0)
    v17 = 0;
  else
    v17 = v15;
  v18 = v17 - 48;
  if ((v18 & 0xFFFFFF00) != 0)
  {
    __break(1u);
    goto LABEL_58;
  }
  v19 = 10 * v18;
  if ((v19 & 0xF00) != 0)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  v20 = v19 + (v16 - 48);
  if (((v20 >> 8) & 1) != 0)
  {
LABEL_59:
    __break(1u);
    return result;
  }
  if (v12 == 18 && (_BYTE)v20)
    return 0;
  if ((v9 & 1) != 0)
    return -3600 * (int)v12 - 60 * v20;
  return 3600 * v12 + 60 * v20;
}

uint64_t specialized _withResizingUCharBuffer(initialSize:_:)(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];

  v8[2] = *MEMORY[0x1E0C80C00];
  if ((isStackAllocationSafe & 0x80000000) != 0)
    __break(1u);
  if ((int)isStackAllocationSafe < 513
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)&v8[-1] - v4, a3, v8);
    return v8[0];
  }
  else
  {
    v6 = swift_slowAlloc();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)(v6, a3, v8);
    MEMORY[0x186DA9E78](v6, -1, -1);
    return v8[0];
  }
}

uint64_t specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, _QWORD *a3@<X8>)
{
  uint64_t result;

  if (!a1)
LABEL_7:
    __break(1u);
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = ucal_getCanonicalTimeZoneID();
  *a3 = 0;
  a3[1] = 0;
  return result;
}

uint64_t closure #1 in _NSSwiftTimeZone.data.getter@<X0>(Swift::String a1@<0:X1, 8:X2>, uint64_t *a2@<X0>, uint64_t *a3@<X8>)
{
  void *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  uint64_t v36[2];
  uint64_t *v37;

  v5 = *a2;
  v4 = a2[1];
  if (v4 >> 60 != 15)
  {
    *a3 = v5;
    a3[1] = v4;
    return outlined copy of Data?(v5, v4);
  }
  v37 = a3;
  v32 = v5;
  String.append(_:)(a1);
  *(_QWORD *)&v33 = 11822;
  *((_QWORD *)&v33 + 1) = 0xE200000000000000;
  v36[0] = 0xD00000000000001ALL;
  v36[1] = 0x800000018230A990;
  if ((0x800000018230A990 & 0x1000000000000000) == 0)
  {
    swift_bridgeObjectRetain();
    v7 = String.subscript.getter();
    v9 = v8;
    v30 = v10;
    v31 = v11;
    swift_bridgeObjectRelease();
    v12 = Substring.init<A>(_:)();
    if ((v7 ^ v9) < 0x4000 || (v12 ^ v13) >> 14 == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v12, v13, v14, v15, 0, 0, 0, 0, 0, v7, v9, v30, v31);
      v24 = v23;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v24 & 1) == 0)
        goto LABEL_14;
    }
LABEL_15:
    v36[0] = MEMORY[0x1E0DEE9E0];
    *(_QWORD *)&v33 = 0xD00000000000001ALL;
    *((_QWORD *)&v33 + 1) = 0x800000018230A990;
    v34 = 0;
    v35 = 0;
    v26 = readDataFromFile(path:reportProgress:maxLength:options:attributesToRead:attributes:)(&v33, 1, 0, 1, 0, MEMORY[0x1E0DEE9D8], v36);
    if (!v3)
    {
      v25 = v26;
      v28 = v27;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    v25 = 0;
LABEL_17:
    v28 = 0xC000000000000000;
LABEL_19:
    v5 = v32;
    *a2 = v25;
    a2[1] = v28;
    v29 = v37;
    *v37 = v25;
    v29[1] = v28;
    outlined copy of Data._Representation(v25, v28);
    return outlined copy of Data?(v5, v4);
  }
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol._ephemeralString.getter();
  StringProtocol._ephemeralString.getter();
  v17 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v18 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v19 = objc_msgSend(v17, sel_rangeOfString_, v18);
  v21 = v20;
  swift_unknownObjectRelease();
  result = swift_unknownObjectRelease();
  if (v19 == (id)0x7FFFFFFFFFFFFFFFLL)
    goto LABEL_15;
  if (!__OFADD__(v19, v21))
  {
    StringProtocol._toUTF16Indices(_:)();
LABEL_14:
    swift_bridgeObjectRelease();
    v25 = 0;
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Data?, @guaranteed NSURLResponse?, @guaranteed Error?) -> ()(uint64_t a1, id a2, void *a3, void *a4)
{
  void (*v7)(id, unint64_t, void *, void *);
  id v8;
  unint64_t v9;
  unint64_t v10;
  id v11;
  id v12;

  v7 = *(void (**)(id, unint64_t, void *, void *))(a1 + 32);
  swift_retain();
  if (a2)
  {
    v8 = a2;
    a2 = specialized Data.init(referencing:)(v8);
    v10 = v9;

  }
  else
  {
    v10 = 0xF000000000000000;
  }
  v11 = a3;
  v12 = a4;
  v7(a2, v10, a3, a4);

  outlined consume of Data?((uint64_t)a2, v10);
  return swift_release();
}

id protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance Data(void *a1, uint64_t a2)
{
  id result;
  uint64_t v5;

  outlined consume of Data?(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  result = specialized Data.init(referencing:)(a1);
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v5;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Data(void *a1, uint64_t a2)
{
  uint64_t v4;

  outlined consume of Data?(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  *(_QWORD *)a2 = specialized Data.init(referencing:)(a1);
  *(_QWORD *)(a2 + 8) = v4;
  return 1;
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined consume of Data._Representation(a1, a2);
  return a1;
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in NSURLSession.upload(for:from:delegate:)(uint64_t a1, unint64_t a2, void *a3, void *a4)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<(Data, NSURLResponse), Error>);
  return closure #1 in closure #1 in closure #1 in NSURLSession.data(for:delegate:)(a1, a2, a3, a4);
}

uint64_t closure #1 in closure #1 in closure #1 in NSURLSession.data(for:delegate:)(uint64_t result, unint64_t a2, void *a3, id a4)
{
  id v4;
  id v6;

  if (a4)
  {
    v4 = a4;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<(Data, NSURLResponse), Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  if (a2 >> 60 == 15)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (!a3)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  outlined copy of Data?(result, a2);
  v6 = a3;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<(Data, NSURLResponse), Error>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t outlined copy of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined copy of Data._Representation(a1, a2);
  return a1;
}

uint64_t specialized Sequence<>.starts<A>(with:)()
{
  Swift::String_optional v0;
  uint64_t countAndFlagsBits;
  void *object;
  char v3;
  Swift::String_optional v4;
  Swift::String_optional v5;
  void *v6;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v0 = String.Iterator.next()();
  if (v0.value._object)
  {
    countAndFlagsBits = v0.value._countAndFlagsBits;
    object = v0.value._object;
    do
    {
      v5 = String.Iterator.next()();
      if (!v5.value._object)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 1;
      }
      if (countAndFlagsBits == v5.value._countAndFlagsBits && object == v5.value._object)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v3 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          goto LABEL_14;
        }
      }
      v4 = String.Iterator.next()();
      countAndFlagsBits = v4.value._countAndFlagsBits;
      object = v4.value._object;
    }
    while (v4.value._object);
  }
  swift_bridgeObjectRelease();
  v6 = String.Iterator.next()().value._object;
  swift_bridgeObjectRelease();
  if (!v6)
    return 1;
LABEL_14:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t storeEnumTagSinglePayload for Measurement<>.FormatStyle.UnitWidth(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1818E95E4 + 4 * byte_1820E906B[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1818E9618 + 4 * byte_1820E9066[v4]))();
}

uint64_t sub_1818E9618(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1818E9620(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1818E9628);
  return result;
}

uint64_t sub_1818E9634(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1818E963CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1818E9640(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1818E9648(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_QWORD *_NSKVONotifyingCreateInfoWithOriginalClass(Class cls)
{
  char *Name;
  const __CFString *v3;
  NSString *v4;
  objc_class *ClassPair;
  objc_class *v6;
  _QWORD *IndexedIvars;
  BOOL v8;
  NSObject *v9;
  uint8_t buf[4];
  NSString *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (_NSKeyValueObserverRegistrationEnableLockingAssertions)
    os_unfair_lock_assert_owner((const os_unfair_lock *)&_NSKeyValueObserverRegistrationLock);
  Name = (char *)class_getName(cls);
  if (strchr(Name, 46))
    v3 = CFSTR("..NSKVONotifying_%s");
  else
    v3 = CFSTR("NSKVONotifying_%s");
  v4 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v3, Name);
  ClassPair = objc_allocateClassPair(cls, -[NSString UTF8String](v4, "UTF8String"), 0x30uLL);
  if (ClassPair)
  {
    v6 = ClassPair;
    objc_registerClassPair(ClassPair);
    IndexedIvars = object_getIndexedIvars(v6);
    *IndexedIvars = cls;
    IndexedIvars[1] = v6;
    IndexedIvars[2] = CFSetCreateMutable(0, 0, MEMORY[0x1E0C9AEC0]);
    IndexedIvars[3] = CFDictionaryCreateMutable(0, 0, 0, MEMORY[0x1E0C9B3A0]);
    IndexedIvars[4] = 0;
    if (qword_1ECD09C78 != -1)
      dispatch_once(&qword_1ECD09C78, &__block_literal_global_14);
    v8 = class_getMethodImplementation((Class)*IndexedIvars, sel_willChangeValueForKey_) != (IMP)qword_1ECD09C80
      || class_getMethodImplementation((Class)*IndexedIvars, sel_didChangeValueForKey_) != (IMP)qword_1ECD09C88;
    *((_BYTE *)IndexedIvars + 40) = v8;
    NSKVONotifyingSetMethodImplementation((Class *)IndexedIvars, sel__isKVOA, (void (*)(void))NSKVOIsAutonotifying, 0);
    NSKVONotifyingSetMethodImplementation((Class *)IndexedIvars, sel_dealloc, (void (*)(void))NSKVODeallocate, 0);
    NSKVONotifyingSetMethodImplementation((Class *)IndexedIvars, sel_class, (void (*)(void))NSKVOClass, 0);
  }
  else
  {
    if (qword_1ECD09C70 != -1)
      dispatch_once(&qword_1ECD09C70, &__block_literal_global_10);
    v9 = qword_1ECD09C68;
    if (os_log_type_enabled((os_log_t)qword_1ECD09C68, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v12 = v4;
      _os_log_error_impl(&dword_1817D9000, v9, OS_LOG_TYPE_ERROR, "KVO failed to allocate class pair for name %{public}@, automatic key-value observing will not work for this class", buf, 0xCu);
    }
    return 0;
  }
  return IndexedIvars;
}

objc_method *NSKVONotifyingSetMethodImplementation(Class *a1, const char *a2, void (*a3)(void), const void *a4)
{
  objc_method *result;
  const char *TypeEncoding;

  result = class_getInstanceMethod(*a1, a2);
  if (result)
  {
    TypeEncoding = method_getTypeEncoding(result);
    if (a4)
    {
      os_unfair_recursive_lock_lock_with_options();
      CFDictionarySetValue(a1[3], a2, a4);
      os_unfair_recursive_lock_unlock();
    }
    return (objc_method *)class_addMethod(a1[1], a2, a3, TypeEncoding);
  }
  return result;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Int16(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  char v5;

  v3 = objc_msgSend(a1, sel_shortValue);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithShort_, v3);
  v5 = static NSObject.== infix(_:_:)();

  if ((v5 & 1) != 0)
  {
    *(_WORD *)a2 = (_WORD)v3;
    *(_BYTE *)(a2 + 2) = 0;
  }
  return v5 & 1;
}

void NSDeallocateObject(id object)
{
  objc_class *Class;
  const char *v3;
  objc_class *v4;
  objc_class *v5;
  char *name[2];

  name[1] = *(char **)MEMORY[0x1E0C80C00];
  if (object)
  {
    if (NSZombieEnabled)
    {
      Class = object_getClass(object);
      name[0] = 0;
      v3 = class_getName(Class);
      asprintf(name, "_NSZombie_%s", v3);
      v4 = objc_lookUpClass(name[0]);
      if (!v4)
      {
        v5 = objc_lookUpClass("_NSZombie_");
        v4 = objc_duplicateClass(v5, name[0], 0);
      }
      free(name[0]);
      if (NSDeallocateZombies)
      {
        object_setClass(object, v4);
        object_dispose(object);
      }
      else
      {
        objc_destructInstance(object);
        object_setClass(object, v4);
      }
    }
    else
    {
      object_dispose(object);
    }
  }
}

uint64_t MatchesBaseLanguageInLanguageIDs(void *a1, void *a2)
{
  void *BaseLanguageIdentifierFromIdentifier;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[128];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  BaseLanguageIdentifierFromIdentifier = (void *)GetBaseLanguageIdentifierFromIdentifier(a1);
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v9, v8, 16);
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)v10;
    while (2)
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v10 != v6)
          objc_enumerationMutation(a2);
        if ((objc_msgSend(BaseLanguageIdentifierFromIdentifier, "isEqualToString:", GetBaseLanguageIdentifierFromIdentifier(*(void **)(*((_QWORD *)&v9 + 1) + 8 * v7))) & 1) != 0)return 1;
        ++v7;
      }
      while (v5 != v7);
      result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v9, v8, 16);
      v5 = result;
      if (result)
        continue;
      break;
    }
  }
  return result;
}

uint64_t GetBaseLanguageIdentifierFromIdentifier(void *a1)
{
  void *v2;
  uint64_t v3;
  _BYTE v5[157];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (!objc_msgSend(a1, "length"))
    return 0;
  objc_msgSend(a1, "UTF8String");
  v2 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99DC8], "componentsFromLocaleIdentifier:", -[NSString initWithBytes:length:encoding:]([NSString alloc], "initWithBytes:length:encoding:", v5, (int)uloc_addLikelySubtags(), 4)), "mutableCopy");
  objc_msgSend(v2, "removeObjectForKey:", *MEMORY[0x1E0C997B0]);
  v3 = objc_msgSend(MEMORY[0x1E0C99DC8], "canonicalLanguageIdentifierFromString:", objc_msgSend(MEMORY[0x1E0C99DC8], "localeIdentifierFromComponents:", v2));

  return v3;
}

id @objc static NSLocale._components(fromLocaleIdentifier:)(uint64_t a1, uint64_t a2, void *a3)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  specialized static Locale.components(fromIdentifier:)();
  swift_bridgeObjectRelease();
  return (id)_NativeDictionary.bridged()();
}

id specialized static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  swift_bridgeObjectRelease();
  swift_unknownObjectRetain();
  if (MEMORY[0x1E0DEE9B8] + 8 == MEMORY[0x1E0DEA968])
  {
    v4 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (!v4)
    {
      v5 = (uint64_t)objc_msgSend(a1, sel_count);
      if (v5)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
        v6 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
      }
      else
      {
        v6 = (_QWORD *)MEMORY[0x1E0DEE9E0];
      }
      v8 = v6[6];
      v9 = v6[7];
      swift_retain();
      result = objc_msgSend(a1, sel__getObjects_andKeys_count_, v9, v8, v5);
      if (v5 < 1)
      {
        v11 = v5;
        if (!v5)
        {
          v7 = 1;
LABEL_21:
          if (v5 >= 0)
          {
            v6[2] = 0;
            swift_release();
            if (!(_DWORD)v7)
            {
LABEL_23:
              swift_release();
              v6 = 0;
            }
LABEL_24:
            *a2 = v6;
            return (id)v7;
          }
          __break(1u);
          goto LABEL_30;
        }
      }
      else
      {
        v11 = v5;
        swift_unknownObjectRetain();
        _bridgeNonVerbatimFromObjectiveCConditional<A>(_:_:_:)();
        result = (id)swift_unknownObjectRelease();
      }
      if (__OFSUB__(v5, v11))
      {
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      result = (id)swift_arrayDestroy();
      v7 = 0;
      goto LABEL_21;
    }
LABEL_6:
    v6 = (_QWORD *)v4;
    v7 = 1;
    goto LABEL_24;
  }
  v4 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v4)
    goto LABEL_6;
  v5 = (uint64_t)objc_msgSend(a1, sel_count);
  if (v5)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
    v6 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v6 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  v12 = v6[6];
  v13 = v6[7];
  swift_retain();
  result = objc_msgSend(a1, sel__getObjects_andKeys_count_, v13, v12, v5);
  if (v5 < 1)
  {
    v14 = v5;
    if (!v5)
    {
LABEL_30:
      v7 = 1;
      goto LABEL_25;
    }
  }
  else
  {
    v14 = v5;
    swift_unknownObjectRetain();
    _bridgeNonVerbatimFromObjectiveCConditional<A>(_:_:_:)();
    result = (id)swift_unknownObjectRelease();
  }
  if (!__OFSUB__(v5, v14))
  {
    result = (id)swift_arrayDestroy();
    v7 = 0;
LABEL_25:
    if (v5 >= 0)
    {
      v6[2] = 0;
      swift_release();
      if ((v7 & 1) != 0)
        goto LABEL_24;
      goto LABEL_23;
    }
    __break(1u);
    __break(1u);
    __break(1u);
    goto LABEL_32;
  }
LABEL_33:
  __break(1u);
  __break(1u);
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  swift_bridgeObjectRelease();
  swift_unknownObjectRetain();
  if (MEMORY[0x1E0DEE9B8] + 8 == MEMORY[0x1E0DEB418])
  {
    v4 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (!v4)
    {
      v5 = (uint64_t)objc_msgSend(a1, sel_count);
      if (v5)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
        v6 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
      }
      else
      {
        v6 = (_QWORD *)MEMORY[0x1E0DEE9E0];
      }
      v8 = v6[6];
      v9 = v6[7];
      swift_retain();
      result = objc_msgSend(a1, sel__getObjects_andKeys_count_, v9, v8, v5);
      if (v5 < 1)
      {
        v11 = v5;
        if (!v5)
        {
          v7 = 1;
LABEL_21:
          if (v5 >= 0)
          {
            v6[2] = 0;
            swift_release();
            if ((_DWORD)v7)
              goto LABEL_27;
            goto LABEL_26;
          }
          __break(1u);
          goto LABEL_30;
        }
      }
      else
      {
        v11 = v5;
        swift_unknownObjectRetain();
        _bridgeNonVerbatimFromObjectiveCConditional<A>(_:_:_:)();
        result = (id)swift_unknownObjectRelease();
      }
      if (__OFSUB__(v5, v11))
      {
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      result = (id)swift_arrayDestroy();
      v7 = 0;
      goto LABEL_21;
    }
LABEL_6:
    v6 = (_QWORD *)v4;
    v7 = 1;
    goto LABEL_27;
  }
  v4 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v4)
    goto LABEL_6;
  v5 = (uint64_t)objc_msgSend(a1, sel_count);
  if (v5)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Int>);
    v6 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v6 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  v12 = v6[6];
  v13 = v6[7];
  swift_retain();
  result = objc_msgSend(a1, sel__getObjects_andKeys_count_, v13, v12, v5);
  if (v5 < 1)
  {
    v14 = v5;
    if (!v5)
    {
LABEL_30:
      v7 = 1;
      goto LABEL_24;
    }
  }
  else
  {
    v14 = v5;
    swift_unknownObjectRetain();
    _bridgeNonVerbatimFromObjectiveCConditional<A>(_:_:_:)();
    result = (id)swift_unknownObjectRelease();
  }
  if (!__OFSUB__(v5, v14))
  {
    result = (id)swift_arrayDestroy();
    v7 = 0;
LABEL_24:
    if (v5 >= 0)
    {
      v6[2] = 0;
      swift_release();
      if ((v7 & 1) == 0)
      {
LABEL_26:
        swift_release();
        v6 = 0;
      }
LABEL_27:
      *a2 = v6;
      return (id)v7;
    }
    __break(1u);
    __break(1u);
    __break(1u);
    goto LABEL_32;
  }
LABEL_33:
  __break(1u);
  __break(1u);
  return result;
}

id @objc static NSLocale._canonicalLanguageIdentifier(from:)(uint64_t a1, uint64_t a2, void *a3)
{
  const __CFAllocator *v3;
  const __CFString *v4;
  __CFString *CanonicalLanguageIdentifierFromString;
  void *v6;

  static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE30];
  v4 = (const __CFString *)String._bridgeToObjectiveCImpl()();
  CanonicalLanguageIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLanguageIdentifierFromString(v3, v4);
  swift_unknownObjectRelease();
  if (CanonicalLanguageIdentifierFromString)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLanguageIdentifierFromString);
    swift_bridgeObjectRelease();

  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v6 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  return v6;
}

void sub_1818EC620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

ValueMetadata *type metadata accessor for IndexSet.RangeView()
{
  return &type metadata for IndexSet.RangeView;
}

uint64_t AttributeContainer.subscript.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = 0;
  a1[3] = 0;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t IndexPath.init(index:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18205C850;
  *(_QWORD *)(v4 + 32) = a1;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  return result;
}

uint64_t closure #1 in static Locale.identifier(fromComponents:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[2];

  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v4)
    return 0;
  v7 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000) == 0)
    LOBYTE(v7) = 1;
  v8 = 4 << v7;
  v27 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v28 = a2 & 0xFFFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain();
  v9 = (char *)MEMORY[0x1E0DEE9D8];
  v10 = 15;
  do
  {
    v11 = v10 & 0xC;
    v12 = v10;
    if (v11 == v8)
      v12 = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, a1, a2);
    v13 = v12 >> 16;
    if (v12 >> 16 >= v4)
    {
      __break(1u);
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
      v15 = String.UTF8View._foreignSubscript(position:)();
      if (v11 != v8)
        goto LABEL_18;
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v29[0] = a1;
      v29[1] = v28;
      v15 = *((_BYTE *)v29 + v13);
      if (v11 != v8)
        goto LABEL_18;
    }
    else
    {
      v14 = v27;
      if ((a1 & 0x1000000000000000) == 0)
        v14 = _StringObject.sharedUTF8.getter();
      v15 = *(_BYTE *)(v14 + v13);
      if (v11 != v8)
      {
LABEL_18:
        if ((a2 & 0x1000000000000000) == 0)
          goto LABEL_19;
        goto LABEL_22;
      }
    }
    v10 = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, a1, a2);
    if ((a2 & 0x1000000000000000) == 0)
    {
LABEL_19:
      v10 = (v10 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_24;
    }
LABEL_22:
    if (v4 <= v10 >> 16)
      goto LABEL_49;
    v10 = String.UTF8View._foreignIndex(after:)();
LABEL_24:
    if ((v15 - 91) >= 0xE6u)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v9 + 2) + 1, 1, v9);
      v15 += 32;
    }
    else
    {
      if ((v15 - 123) < 0xE6u && (v15 <= 0x2Fu || v15 >= 0x3Au))
        goto LABEL_44;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v9 + 2) + 1, 1, v9);
    }
    v17 = *((_QWORD *)v9 + 2);
    v16 = *((_QWORD *)v9 + 3);
    if (v17 >= v16 >> 1)
      v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1, v9);
    *((_QWORD *)v9 + 2) = v17 + 1;
    v9[v17 + 32] = v15;
  }
  while (4 * v4 != v10 >> 14);
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    goto LABEL_37;
LABEL_50:
  v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v9 + 2) + 1, 1, v9);
LABEL_37:
  v19 = *((_QWORD *)v9 + 2);
  v18 = *((_QWORD *)v9 + 3);
  if (v19 >= v18 >> 1)
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v18 > 1), v19 + 1, 1, v9);
  *((_QWORD *)v9 + 2) = v19 + 1;
  v9[v19 + 32] = 0;
  v20 = swift_bridgeObjectRetain();
  v21 = specialized String.init(cString:)(v20);
  swift_bridgeObjectRelease();
  v22 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v22 = a3 & 0xFFFFFFFFFFFFLL;
  if (!v22)
  {
LABEL_44:
    swift_bridgeObjectRelease();
    goto LABEL_45;
  }
  v23 = specialized Sequence.allSatisfy(_:)(a3, a4);
  swift_bridgeObjectRelease();
  if ((v23 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    return v21;
  }
LABEL_45:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t Array<A>.nonPrettyJSONRepresentation(options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(Swift::String *, uint64_t, uint64_t);
  void *v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  Swift::String v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;

  v40 = a4;
  v6 = *(_QWORD *)(a3 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)v10;
  v38 = *(void **)(v10 + 8);
  v39 = v11;
  v37 = *(_QWORD *)(v10 + 16);
  v36 = *(unsigned __int8 *)(v10 + 24);
  v35 = *(_QWORD *)(v10 + 32);
  v34 = *(_QWORD *)(v10 + 40);
  v33 = *(_QWORD *)(v10 + 48);
  v32 = *(_QWORD *)(v10 + 56);
  v31 = *(_QWORD *)(v10 + 64);
  v30 = *(_QWORD *)(v10 + 72);
  v29 = *(_QWORD *)(v10 + 80);
  v28 = *(_QWORD *)(v10 + 88);
  v27 = *(_QWORD *)(v10 + 96);
  v12 = *(_QWORD *)(v10 + 112);
  v26 = *(_QWORD *)(v10 + 104);
  v55 = 91;
  v56 = 0xE100000000000000;
  result = MEMORY[0x186DA4B5C](v13, v14, v8);
  if (result + 0x4000000000000000 < 0)
  {
    __break(1u);
  }
  else
  {
    MEMORY[0x186DA4670]((2 * result) | 1);
    v16 = swift_bridgeObjectRetain();
    result = MEMORY[0x186DA4B68](v16, a3);
    if (!result)
    {
LABEL_12:
      swift_bridgeObjectRelease();
      v22._countAndFlagsBits = 93;
      v22._object = (void *)0xE100000000000000;
      String.append(_:)(v22);
      return v55;
    }
    v17 = result;
    if (result >= 1)
    {
      v24 = v7;
      v18 = 0;
      v19 = *(uint64_t (**)(Swift::String *, uint64_t, uint64_t))(v40 + 16);
      v25 = a2 & 0xC000000000000001;
      do
      {
        if ((_swift_isClassOrObjCExistentialType() & 1) != 0 && v25)
        {
          result = _ArrayBuffer._getElementSlowPath(_:)();
          if (v24 != 8)
            goto LABEL_15;
          v41._countAndFlagsBits = result;
          (*(void (**)(char *, Swift::String *, uint64_t))(v6 + 16))(v9, &v41, a3);
          swift_unknownObjectRelease();
        }
        else
        {
          (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v9, a2+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v18, a3);
        }
        ++v18;
        v41._countAndFlagsBits = v39;
        v41._object = v38;
        v42 = v37;
        v43 = v36;
        v44 = v35;
        v45 = v34;
        v46 = v33;
        v47 = v32;
        v48 = v31;
        v49 = v30;
        v50 = v29;
        v51 = v28;
        v52 = v27;
        v53 = v26;
        v54 = v12;
        v41._countAndFlagsBits = v19(&v41, a3, v40);
        v41._object = v20;
        swift_bridgeObjectRetain();
        v21._countAndFlagsBits = 44;
        v21._object = (void *)0xE100000000000000;
        String.append(_:)(v21);
        swift_bridgeObjectRelease();
        String.append(_:)(v41);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v6 + 8))(v9, a3);
      }
      while (v17 != v18);
      swift_bridgeObjectRelease();
      specialized RangeReplaceableCollection<>.popLast()();
      goto LABEL_12;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

Swift::String __swiftcall String.serializedForJSON(withoutEscapingSlashes:)(Swift::Bool withoutEscapingSlashes)
{
  uint64_t v1;
  unint64_t v2;
  char *v3;
  int64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  unsigned int v17;
  unint64_t v18;
  Swift::Int v19;
  unint64_t v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  char *v25;
  unsigned int v26;
  unint64_t v27;
  Swift::Int v28;
  unint64_t v29;
  Swift::String v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t isUniquelyReferenced_nonNull_native;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  Swift::Int v41;
  Swift::String result;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;

  v6 = v2;
  v7 = v1;
  if ((v2 & 0x1000000000000000) != 0)
  {
    v41 = String.UTF8View._foreignCount()();
    v10 = v41 + 2;
    if (!__OFADD__(v41, 2))
      goto LABEL_6;
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
  if ((v2 & 0x2000000000000000) != 0)
    v9 = HIBYTE(v2) & 0xF;
  else
    v9 = v1 & 0xFFFFFFFFFFFFLL;
  v10 = v9 + 2;
  if (__OFADD__(v9, 2))
    goto LABEL_83;
LABEL_6:
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10 & ~(v10 >> 63), 0, MEMORY[0x1E0DEE9D8]);
  v5 = *((_QWORD *)v3 + 2);
  v10 = *((_QWORD *)v3 + 3);
  v4 = v5 + 1;
  if (v5 >= (unint64_t)v10 >> 1)
LABEL_84:
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)((unint64_t)v10 > 1), v4, 1, v3);
  *((_QWORD *)v3 + 2) = v4;
  v3[v5 + 32] = 34;
  v47 = v3;
  swift_bridgeObjectRetain();
  if ((v6 & 0x1000000000000000) != 0)
  {
    v7 = static String._copying(_:)();
    v12 = v11;
    swift_bridgeObjectRelease();
    v6 = v12;
  }
  if ((v6 & 0x2000000000000000) == 0)
  {
    if ((v7 & 0x1000000000000000) != 0)
    {
      v13 = (char *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v14 = v7 & 0xFFFFFFFFFFFFLL;
      if ((v7 & 0xFFFFFFFFFFFFLL) == 0)
        goto LABEL_76;
    }
    else
    {
      v40 = _StringObject.sharedUTF8.getter();
      if (!v40)
      {
        __break(1u);
        goto LABEL_89;
      }
      v13 = (char *)v40;
      if (v14 < 1)
        goto LABEL_76;
    }
    v15 = &v13[v14];
    v16 = v13;
    while (1)
    {
      v17 = *v13;
      v18 = 0xE200000000000000;
      v19 = 8796;
      switch(*v13)
      {
        case 8:
          v19 = 25180;
          if (v16 < v13)
            goto LABEL_36;
          goto LABEL_37;
        case 9:
          v19 = 29788;
          if (v16 >= v13)
            goto LABEL_37;
          goto LABEL_36;
        case 10:
          v19 = 28252;
          if (v16 >= v13)
            goto LABEL_37;
          goto LABEL_36;
        case 11:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
          goto LABEL_19;
        case 12:
          v19 = 26204;
          if (v16 >= v13)
            goto LABEL_37;
          goto LABEL_36;
        case 13:
          v19 = 29276;
          if (v16 >= v13)
            goto LABEL_37;
          goto LABEL_36;
        case 34:
          goto LABEL_35;
        case 47:
          if (withoutEscapingSlashes)
            goto LABEL_23;
          v19 = 12124;
          if (v16 >= v13)
            goto LABEL_37;
          goto LABEL_36;
        default:
          if (v17 == 92)
          {
            v18 = 0xE200000000000000;
            v19 = 23644;
            if (v16 >= v13)
              goto LABEL_37;
            goto LABEL_36;
          }
LABEL_19:
          if (v17 < 0x10)
          {
            v45 = 0x303030755CLL;
            v20 = 0xE500000000000000;
            goto LABEL_34;
          }
          if (v17 > 0x1F)
          {
LABEL_23:
            if (++v13 >= v15)
              goto LABEL_73;
          }
          else
          {
            v45 = 808482140;
            v20 = 0xE400000000000000;
LABEL_34:
            v46 = v20;
            lazy protocol witness table accessor for type UInt8 and conformance UInt8();
            v21._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
            String.append(_:)(v21);
            swift_bridgeObjectRelease();
            v19 = v45;
            v18 = v46;
LABEL_35:
            if (v16 >= v13)
              goto LABEL_37;
LABEL_36:
            specialized Array.append<A>(contentsOf:)(v16, (char *)(v13 - v16));
LABEL_37:
            specialized Array.append<A>(contentsOf:)(v19, v18);
            v16 = ++v13;
            if (v13 >= v15)
            {
LABEL_73:
              if (v16 < v13)
              {
                v31 = (char *)(v13 - v16);
                v32 = v16;
LABEL_75:
                specialized Array.append<A>(contentsOf:)(v32, v31);
              }
              goto LABEL_76;
            }
          }
          break;
      }
    }
  }
  v22 = HIBYTE(v6) & 0xF;
  v45 = v7;
  v46 = v6 & 0xFFFFFFFFFFFFFFLL;
  if (!v22)
    goto LABEL_76;
  v23 = (uint64_t *)((char *)&v45 + v22);
  v24 = &v45;
  v25 = (char *)&v45;
  while (2)
  {
    v26 = *(unsigned __int8 *)v24;
    v27 = 0xE200000000000000;
    v28 = 8796;
    switch(*(_BYTE *)v24)
    {
      case 8:
        v28 = 25180;
        if (v25 < (char *)v24)
          goto LABEL_66;
        goto LABEL_67;
      case 9:
        v28 = 29788;
        if (v25 >= (char *)v24)
          goto LABEL_67;
        goto LABEL_66;
      case 0xA:
        v28 = 28252;
        if (v25 >= (char *)v24)
          goto LABEL_67;
        goto LABEL_66;
      case 0xB:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
      case 0x21:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
      case 0x27:
      case 0x28:
      case 0x29:
      case 0x2A:
      case 0x2B:
      case 0x2C:
      case 0x2D:
      case 0x2E:
        goto LABEL_49;
      case 0xC:
        v28 = 26204;
        if (v25 >= (char *)v24)
          goto LABEL_67;
        goto LABEL_66;
      case 0xD:
        v28 = 29276;
        if (v25 >= (char *)v24)
          goto LABEL_67;
        goto LABEL_66;
      case 0x22:
        goto LABEL_65;
      case 0x2F:
        if (withoutEscapingSlashes)
          goto LABEL_53;
        v28 = 12124;
        if (v25 >= (char *)v24)
          goto LABEL_67;
        goto LABEL_66;
      default:
        if (v26 == 92)
        {
          v27 = 0xE200000000000000;
          v28 = 23644;
          if (v25 < (char *)v24)
            goto LABEL_66;
          goto LABEL_67;
        }
LABEL_49:
        if (v26 < 0x10)
        {
          v43 = 0x303030755CLL;
          v29 = 0xE500000000000000;
          goto LABEL_64;
        }
        if (v26 > 0x1F)
        {
LABEL_53:
          v24 = (uint64_t *)((char *)v24 + 1);
          if (v24 >= v23)
            goto LABEL_71;
          continue;
        }
        v43 = 808482140;
        v29 = 0xE400000000000000;
LABEL_64:
        v44 = v29;
        lazy protocol witness table accessor for type UInt8 and conformance UInt8();
        v30._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
        String.append(_:)(v30);
        swift_bridgeObjectRelease();
        v28 = v43;
        v27 = v44;
LABEL_65:
        if (v25 < (char *)v24)
LABEL_66:
          specialized Array.append<A>(contentsOf:)(v25, (char *)((char *)v24 - v25));
LABEL_67:
        specialized Array.append<A>(contentsOf:)(v28, v27);
        v24 = (uint64_t *)((char *)v24 + 1);
        v25 = (char *)v24;
        if (v24 < v23)
          continue;
LABEL_71:
        if (v25 < (char *)v24)
        {
          v31 = (char *)((char *)v24 - v25);
          v32 = v25;
          goto LABEL_75;
        }
LABEL_76:
        v33 = (uint64_t)v47;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v33 + 16) + 1, 1, (char *)v33);
          v33 = isUniquelyReferenced_nonNull_native;
        }
        v36 = *(_QWORD *)(v33 + 16);
        v35 = *(_QWORD *)(v33 + 24);
        if (v36 >= v35 >> 1)
        {
          isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v35 > 1), v36 + 1, 1, (char *)v33);
          v33 = isUniquelyReferenced_nonNull_native;
        }
        *(_QWORD *)(v33 + 16) = v36 + 1;
        *(_BYTE *)(v33 + v36 + 32) = 34;
        v47 = (char *)v33;
        MEMORY[0x1E0C80A78](isUniquelyReferenced_nonNull_native);
        v37 = String.init(unsafeUninitializedCapacity:initializingUTF8With:)();
        v39 = v38;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v40 = v37;
        v14 = v39;
LABEL_89:
        result._object = (void *)v14;
        result._countAndFlagsBits = v40;
        return result;
    }
  }
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *a1, int64_t a2, char a3, char *a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Int8>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Unicode.Scalar>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UDateFormatField>);
}

char *specialized Array.append<A>(contentsOf:)(char *result, char *a2)
{
  char **v2;
  char *v3;
  int64_t v4;
  int64_t v5;
  int64_t v6;
  char *v7;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  BOOL v18;
  int64_t v19;
  char v20;
  unint64_t v21;
  int64_t v22;
  char *v23;
  char *v24;
  __int128 *v25;
  int64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  char *v30;
  char v31;
  char *v32;
  char *v33;
  char *v34;

  v3 = *v2;
  v4 = *((_QWORD *)*v2 + 2);
  v5 = (int64_t)&a2[v4];
  if (__OFADD__(v4, a2))
  {
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    if (result)
      v18 = result == a2;
    else
      v18 = 1;
    if (v18)
      goto LABEL_13;
    v19 = *((_QWORD *)v3 + 2);
    v20 = *result++;
    LOBYTE(v12) = v20;
    v6 = 16;
    while (1)
    {
      v21 = *((_QWORD *)v3 + 3);
      v14 = v21 >> 1;
      v22 = v19 + 1;
      if ((uint64_t)(v21 >> 1) < v19 + 1)
      {
        v34 = result;
        v32 = a2;
        v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v19 + 1, 1, v3);
        v22 = v19 + 1;
        a2 = v32;
        v3 = v33;
        result = v34;
        v14 = *((_QWORD *)v3 + 3) >> 1;
        if (v19 >= v14)
          goto LABEL_23;
      }
      else if (v19 >= v14)
      {
        goto LABEL_23;
      }
      v3[v19 + 32] = v12;
      if (result == a2)
      {
LABEL_41:
        *((_QWORD *)v3 + 2) = v22;
        goto LABEL_13;
      }
      v23 = (char *)(v14 + ~v19);
      if (v23 >= &a2[~(unint64_t)result])
        v23 = &a2[~(unint64_t)result];
      v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) > 0x10 && (unint64_t)(&v3[v19] - result + 33) >= 0x10)
      {
        v25 = (__int128 *)result;
        v26 = v24 & 0xF;
        if ((v24 & 0xF) == 0)
          v26 = v6;
        v27 = &v24[-v26];
        v22 += (int64_t)v27;
        result = &v27[(_QWORD)result];
        v28 = &v3[v19 + 33];
        do
        {
          v29 = *v25++;
          *(_OWORD *)v28 = v29;
          v28 += 16;
          v27 -= 16;
        }
        while (v27);
      }
      v30 = result++;
      while (1)
      {
        v31 = *v30++;
        LOBYTE(v12) = v31;
        if (v14 == v22)
          break;
        v3[v22++ + 32] = v12;
        ++result;
        if (v30 == a2)
          goto LABEL_41;
      }
LABEL_22:
      v19 = v14;
LABEL_23:
      *((_QWORD *)v3 + 2) = v19;
    }
  }
  v6 = (int64_t)a2;
  v7 = result;
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v9 = *((_QWORD *)v3 + 3) >> 1, v9 < v5))
  {
    if (v4 <= v5)
      v10 = v5;
    else
      v10 = v4;
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v10, 1, v3);
    v9 = *((_QWORD *)v3 + 3) >> 1;
  }
  v11 = *((_QWORD *)v3 + 2);
  v12 = v9 - v11;
  result = specialized UnsafeBufferPointer._copyContents(initializing:)(&v3[v11 + 32], v9 - v11, v7, v6);
  if (v13 < v6)
    goto LABEL_15;
  if (v13 >= 1)
  {
    v15 = *((_QWORD *)v3 + 2);
    v16 = __OFADD__(v15, v13);
    v17 = v15 + v13;
    if (v16)
    {
      __break(1u);
      goto LABEL_22;
    }
    *((_QWORD *)v3 + 2) = v17;
  }
  if (v13 == v12)
    goto LABEL_16;
LABEL_13:
  *v2 = v3;
  return result;
}

char *specialized UnsafeBufferPointer._copyContents(initializing:)(char *a1, int64_t a2, char *__src, int64_t a4)
{
  char *v4;
  size_t v5;
  char *result;

  v4 = __src;
  if (!a4 || !a2)
    return v4;
  if (a4 >= a2)
    v5 = a2;
  else
    v5 = a4;
  if ((v5 & 0x8000000000000000) == 0 && (&a1[v5] <= __src || &__src[v5] <= a1))
  {
    memcpy(a1, __src, v5);
    v4 += v5;
    return v4;
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for _JSONSimpleValueArrayElement.jsonRepresentation(options:) in conformance String(_QWORD *a1)
{
  return String.serializedForJSON(withoutEscapingSlashes:)((*a1 & 8) != 0)._countAndFlagsBits;
}

uint64_t specialized RangeReplaceableCollection<>.popLast()()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;

  v1 = v0[1];
  v2 = HIBYTE(v1) & 0xF;
  if ((v1 & 0x2000000000000000) == 0)
    v2 = *v0 & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return 0;
  String.index(before:)();
  return String.remove(at:)();
}

unint64_t specialized Sequence.allSatisfy(_:)(unint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t result;
  unint64_t v11;
  unsigned __int8 v12;
  _QWORD v13[2];
  uint64_t v14;

  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return 1;
  v5 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  v6 = 4 << v5;
  v14 = a2 & 0xFFFFFFFFFFFFFFLL;
  v7 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v8 = 15;
  while (1)
  {
    v9 = v8 & 0xC;
    result = v8;
    if (v9 == v6)
      result = _StringGuts._slowEnsureMatchingEncoding(_:)(v8, a1, a2);
    v11 = result >> 16;
    if (result >> 16 >= v2)
      break;
    if ((a2 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v12 = result;
      if (v9 != v6)
        goto LABEL_19;
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v13[0] = a1;
      v13[1] = v14;
      v12 = *((_BYTE *)v13 + v11);
      if (v9 != v6)
        goto LABEL_19;
    }
    else
    {
      result = v7;
      if ((a1 & 0x1000000000000000) == 0)
        result = _StringObject.sharedUTF8.getter();
      v12 = *(_BYTE *)(result + v11);
      if (v9 != v6)
      {
LABEL_19:
        if ((a2 & 0x1000000000000000) == 0)
          goto LABEL_20;
        goto LABEL_23;
      }
    }
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(v8, a1, a2);
    v8 = result;
    if ((a2 & 0x1000000000000000) == 0)
    {
LABEL_20:
      v8 = (v8 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_25;
    }
LABEL_23:
    if (v2 <= v8 >> 16)
      goto LABEL_33;
    v8 = String.UTF8View._foreignIndex(after:)();
LABEL_25:
    if (((v12 & 0xDF) - 91) <= 0xE5u && (v12 - 58) <= 0xF5u)
    {
      result = 0;
      if (v12 - 43 > 0x34 || ((1 << (v12 - 43)) & 0x10000000000015) == 0)
        return result;
    }
    if (4 * v2 == v8 >> 14)
      return 1;
  }
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t result;
  unint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD v15[2];
  uint64_t v16;

  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  v5 = 4 * v4;
  v6 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000) == 0)
    LOBYTE(v6) = 1;
  v7 = 4 << v6;
  v16 = a2 & 0xFFFFFFFFFFFFFFLL;
  v14 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v8 = 15;
  while (1)
  {
    v9 = v8 >> 14;
    if (v8 >> 14 == v5)
      return v9 == v5;
    v10 = v8 & 0xC;
    result = v8;
    if (v10 == v7)
      result = _StringGuts._slowEnsureMatchingEncoding(_:)(v8, a1, a2);
    v12 = result >> 16;
    if (result >> 16 >= v4)
      break;
    if ((a2 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v13 = result;
      if (v10 == v7)
        goto LABEL_24;
LABEL_19:
      if ((a2 & 0x1000000000000000) == 0)
        goto LABEL_7;
LABEL_20:
      if (v4 <= v8 >> 16)
        goto LABEL_28;
      v8 = String.UTF8View._foreignIndex(after:)();
      if (v13 < 0)
        return v9 == v5;
    }
    else
    {
      if ((a2 & 0x2000000000000000) != 0)
      {
        v15[0] = a1;
        v15[1] = v16;
        v13 = *((_BYTE *)v15 + v12);
        if (v10 == v7)
          goto LABEL_24;
        goto LABEL_19;
      }
      result = v14;
      if ((a1 & 0x1000000000000000) == 0)
        result = _StringObject.sharedUTF8.getter();
      v13 = *(_BYTE *)(result + v12);
      if (v10 != v7)
        goto LABEL_19;
LABEL_24:
      result = _StringGuts._slowEnsureMatchingEncoding(_:)(v8, a1, a2);
      v8 = result;
      if ((a2 & 0x1000000000000000) != 0)
        goto LABEL_20;
LABEL_7:
      v8 = (v8 & 0xFFFFFFFFFFFF0000) + 65540;
      if (v13 < 0)
        return v9 == v5;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t result;
  unint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD v15[2];
  uint64_t v16;

  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  v5 = 4 * v4;
  v6 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000) == 0)
    LOBYTE(v6) = 1;
  v7 = 4 << v6;
  v16 = a2 & 0xFFFFFFFFFFFFFFLL;
  v14 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v8 = 15;
  while (1)
  {
    v9 = v8 >> 14;
    if (v8 >> 14 == v5)
      return v9 == v5;
    v10 = v8 & 0xC;
    result = v8;
    if (v10 == v7)
      result = _StringGuts._slowEnsureMatchingEncoding(_:)(v8, a1, a2);
    v12 = result >> 16;
    if (result >> 16 >= v4)
      break;
    if ((a2 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v13 = result;
      if (v10 != v7)
        goto LABEL_20;
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v15[0] = a1;
      v15[1] = v16;
      v13 = *((_BYTE *)v15 + v12);
      if (v10 != v7)
        goto LABEL_20;
    }
    else
    {
      result = v14;
      if ((a1 & 0x1000000000000000) == 0)
        result = _StringObject.sharedUTF8.getter();
      v13 = *(_BYTE *)(result + v12);
      if (v10 != v7)
      {
LABEL_20:
        if ((a2 & 0x1000000000000000) == 0)
          goto LABEL_7;
        goto LABEL_21;
      }
    }
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(v8, a1, a2);
    v8 = result;
    if ((a2 & 0x1000000000000000) == 0)
    {
LABEL_7:
      v8 = (v8 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_8;
    }
LABEL_21:
    if (v4 <= v8 >> 16)
      goto LABEL_28;
    v8 = String.UTF8View._foreignIndex(after:)();
LABEL_8:
    if ((v13 - 58) < 0xF6u)
      return v9 == v5;
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t specialized String.init(cString:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = result;
    v3 = *(unsigned __int8 *)(result + 32);
    result += 32;
    if (!v3)
      return static String._fromUTF8Repairing(_:)();
    v4 = 0;
    v5 = v1 - 1;
    v6 = v2 + 33;
    while (v5 != v4)
    {
      if (!*(unsigned __int8 *)(v6 + v4++))
        return static String._fromUTF8Repairing(_:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for _JSONSimpleValueArrayElement.jsonRepresentation(options:) in conformance Int32()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

void *__initializeUbiquityStuff_block_invoke()
{
  void *result;
  void *v1;

  result = (void *)objc_msgSend((id)pathToSystemFramework((uint64_t)CFSTR("GenerationalStorage.framework")), "stringByAppendingString:", CFSTR("/GenerationalStorage"));
  if (result)
  {
    result = dlopen((const char *)objc_msgSend(result, "fileSystemRepresentation"), 256);
    if (result)
    {
      v1 = result;
      _MergedGlobals_150 = *(_QWORD *)dlsym(result, "GSGenerationalStorageErrorDomain");
      qword_1ECD0A7F0 = *(_QWORD *)dlsym(v1, "GSAdditionCreationNameSpaceKey");
      qword_1ECD0A7F8 = *(_QWORD *)dlsym(v1, "GSAdditionCreationNameKey");
      qword_1ECD0A800 = *(_QWORD *)dlsym(v1, "GSAdditionCreationUserInfoKey");
      result = objc_lookUpClass("GSStorageManager");
      qword_1ECD0A808 = (uint64_t)result;
    }
  }
  return result;
}

uint64_t pathToSystemFramework(uint64_t a1)
{
  NSFileManager *v2;
  NSArray *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;

  v2 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
  v3 = NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, 8uLL, 1);
  v4 = -[NSArray count](v3, "count");
  if (!v4)
    return 0;
  v5 = v4;
  v6 = 0;
  while (1)
  {
    v7 = -[NSArray objectAtIndex:](v3, "objectAtIndex:", v6);
    v8 = objc_msgSend((id)objc_msgSend(v7, "stringByAppendingPathComponent:", CFSTR("Frameworks")), "stringByAppendingPathComponent:", a1);
    if (-[NSFileManager fileExistsAtPath:](v2, "fileExistsAtPath:", v8))
      break;
    v8 = objc_msgSend((id)objc_msgSend(v7, "stringByAppendingPathComponent:", CFSTR("PrivateFrameworks")), "stringByAppendingPathComponent:", a1);
    if (-[NSFileManager fileExistsAtPath:](v2, "fileExistsAtPath:", v8))
      break;
    if (v5 == ++v6)
      return 0;
  }
  return v8;
}

NSString *NSTemporaryDirectory(void)
{
  size_t v0;
  char __s[1027];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  if (!confstr(65537, __s, 0x402uLL))
  {
    if (issetugid() || !getenv("TMPDIR"))
    {
      __strlcpy_chk();
      return -[NSString stringByStandardizingPath](-[NSFileManager stringWithFileSystemRepresentation:length:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "stringWithFileSystemRepresentation:length:", __s, strlen(__s)), "stringByStandardizingPath");
    }
    __strlcpy_chk();
  }
  v0 = strlen(__s);
  if (!v0 || __s[v0 - 1] != 47)
    *(_WORD *)&__s[v0] = 47;
  return -[NSString initWithUTF8String:]([NSString alloc], "initWithUTF8String:", __s);
}

void *URL.init(filePath:directoryHint:relativeTo:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v8;
  void *v9;
  void *v10;
  int v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *result;
  void *v18;
  id v19[20];
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v8 = *a3;
  v9 = *(void **)a4;
  v18 = *(void **)(a4 + 8);
  v10 = *(void **)(a4 + 16);
  v11 = _foundation_swift_url_feature_enabled();
  if ((a2 & 0x2000000000000000) != 0)
    v12 = HIBYTE(a2) & 0xF;
  else
    v12 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v11)
  {
    if (!v12)
      swift_bridgeObjectRelease();
    __asm { BR              X9 }
  }
  if (v12)
  {
    if ((specialized Collection.first.getter(a1, a2) & 0x1FF) != 0x2F
      && (specialized Collection.first.getter(a1, a2) & 0x1FF) != 0x7E
      && !v9)
    {
      static URL.currentDirectoryOrNil()(&v20);
    }
    __asm { BR              X9 }
  }
  v13 = v18;
  outlined copy of URL?((uint64_t)v9);
  swift_bridgeObjectRelease();
  if (v9)
  {
    outlined consume of URL?(v9);
  }
  else
  {
    static URL.currentDirectoryOrNil()(&v20);
    v9 = v20;
    v13 = v21;
    v10 = v22;
  }
  v19[0] = v9;
  v19[1] = v13;
  v19[2] = v10;
  outlined copy of URL?((uint64_t)v9);
  URL.init(string:relativeTo:)(0, 0xE000000000000000, v19, (uint64_t *)&v20);
  outlined consume of URL?(v9);
  v14 = (uint64_t)v20;
  if (!v20)
  {
    __break(1u);
    JUMPOUT(0x1818F0B30);
  }
  v16 = (uint64_t)v21;
  v15 = (uint64_t)v22;
  result = outlined consume of URL?(v9);
  *a5 = v14;
  a5[1] = v16;
  a5[2] = v15;
  return result;
}

void postQueueNotifications(char *a1, int a2)
{
  uint64_t v3;
  void *v4;
  id *v5;
  __CFRunLoop *Current;
  CFRunLoopMode v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  CFOptionFlags v20;
  void (__cdecl *v21)(CFRunLoopObserverRef, CFRunLoopActivity, void *);
  __CFRunLoopObserver *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t j;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char *v33;
  uint64_t v34;
  void *v35;
  uint64_t v37;
  CFRunLoopObserverContext context;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v35 = (void *)*((_QWORD *)a1 + 1);
  v3 = 24;
  if (a2)
    v3 = 16;
  v4 = *(void **)&a1[v3];
  if (a2)
    v5 = (id *)(a1 + 16);
  else
    v5 = (id *)(a1 + 24);
  if (!objc_msgSend(*v5, "count"))
    return;
  *v5 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  if (!v4)
    return;
  v33 = a1;
  Current = CFRunLoopGetCurrent();
  v7 = CFRunLoopCopyCurrentMode(Current);
  _CFAutoreleasePoolPush();
  v8 = objc_msgSend(v4, "count");
  if (v8 < 1)
  {
LABEL_31:
    v18 = v33;
    if ((a2 & 1) == 0)
      postQueueNotifications(v33, 1);
    goto LABEL_33;
  }
  v9 = v8;
  v10 = 0;
  v11 = 0;
  v34 = *MEMORY[0x1E0C9B270];
LABEL_10:
  v32 = v10;
  do
  {
    v37 = objc_msgSend(v4, "objectAtIndex:", v11);
    v12 = v4;
    v13 = (void *)objc_msgSend(v4, "objectAtIndex:", v11 + 1);
    if ((objc_msgSend(v13, "containsObject:", v7) & 1) == 0
      && (!objc_msgSend(v13, "containsObject:", v34) || !_CFRunLoop01()))
    {
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v39, &context, 16);
      if (!v14)
      {
LABEL_26:
        v4 = v12;
        goto LABEL_16;
      }
      v15 = v14;
      v16 = *(_QWORD *)v40;
LABEL_20:
      v17 = 0;
      while (1)
      {
        if (*(_QWORD *)v40 != v16)
          objc_enumerationMutation(v13);
        if (_CFRunLoopModeContainsMode())
          break;
        if (v15 == ++v17)
        {
          v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v39, &context, 16);
          if (v15)
            goto LABEL_20;
          goto LABEL_26;
        }
      }
    }
    objc_msgSend(v35, "postNotification:", v37);
    v4 = v12;
    objc_msgSend(v12, "removeObjectAtIndex:", v11 + 1);
    objc_msgSend(v12, "removeObjectAtIndex:", v11);
    v9 -= 2;
    if (!a2)
    {
      v10 = 1;
      postQueueNotifications(v33, 1);
      if (v11 < v9)
        goto LABEL_10;
      goto LABEL_30;
    }
    v11 -= 2;
LABEL_16:
    v11 += 2;
  }
  while (v11 < v9);
  if ((v32 & 1) == 0)
    goto LABEL_31;
LABEL_30:
  CFRunLoopWakeUp(Current);
  v18 = v33;
LABEL_33:
  _CFAutoreleasePoolPop();
  CFRelease(v7);
  if (objc_msgSend(v4, "count"))
  {
    context.version = 0;
    context.info = v18;
    context.retain = (const void *(__cdecl *)(const void *))MEMORY[0x1E0C98BD0];
    context.release = (void (__cdecl *)(const void *))MEMORY[0x1E0C98BC0];
    context.copyDescription = (CFStringRef (__cdecl *)(const void *))MEMORY[0x1E0C98350];
    if (a2)
      v19 = 16;
    else
      v19 = 24;
    if (a2)
      v20 = 130;
    else
      v20 = 32;
    if (a2)
      v21 = (void (__cdecl *)(CFRunLoopObserverRef, CFRunLoopActivity, void *))__NSPostASAPQueueNotes;
    else
      v21 = (void (__cdecl *)(CFRunLoopObserverRef, CFRunLoopActivity, void *))__NSPostIdleQueueNotes;
    v22 = CFRunLoopObserverCreate(0, v20, 0, 0, v21, &context);
    v23 = objc_msgSend(v4, "count");
    if (v23 >= 1)
    {
      v24 = v23;
      for (i = 0; i < v24; i += 2)
      {
        v26 = (void *)objc_msgSend(v4, "objectAtIndex:", i | 1);
        v27 = objc_msgSend(v26, "count");
        if (v27 >= 1)
        {
          v28 = v27;
          for (j = 0; j != v28; ++j)
            CFRunLoopAddObserver(Current, v22, (CFRunLoopMode)objc_msgSend(v26, "objectAtIndex:", j));
        }
      }
    }
    CFRelease(v22);
    if (*(_QWORD *)&v33[v19])
    {
      v30 = objc_msgSend(v4, "count");
      if (v30)
      {
        v31 = v30 - 1;
        do
          objc_msgSend(*(id *)&v33[v19], "insertObject:atIndex:", objc_msgSend(v4, "objectAtIndex:", v31--), 0);
        while (v31 != -1);
      }
      goto LABEL_53;
    }
    *(_QWORD *)&v33[v19] = v4;
  }
  else
  {
LABEL_53:

  }
}

void (*URLComponents.queryItems.modify(_QWORD *a1))(Swift::OpaquePointer_optional a1)
{
  _OWORD *v1;
  char *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v3 = (char *)malloc(0xB0uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 21) = v1;
  v4 = v1[7];
  *((_OWORD *)v3 + 6) = v1[6];
  *((_OWORD *)v3 + 7) = v4;
  *((_OWORD *)v3 + 8) = v1[8];
  *(_OWORD *)(v3 + 138) = *(_OWORD *)((char *)v1 + 138);
  v5 = v1[3];
  *((_OWORD *)v3 + 2) = v1[2];
  *((_OWORD *)v3 + 3) = v5;
  v6 = v1[5];
  *((_OWORD *)v3 + 4) = v1[4];
  *((_OWORD *)v3 + 5) = v6;
  v7 = v1[1];
  *(_OWORD *)v3 = *v1;
  *((_OWORD *)v3 + 1) = v7;
  *((_QWORD *)v3 + 20) = (unint64_t)URLComponents._URLComponents.queryItems(percentEncoded:)(0);
  return URLComponents.queryItems.modify;
}

uint64_t _NSOSLog()
{
  if (qword_1ECD09F80 != -1)
    dispatch_once(&qword_1ECD09F80, &__block_literal_global_34);
  return _MergedGlobals_111;
}

void sub_1818F15A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  _Unwind_Resume(exception_object);
}

void sub_1818F1BA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf, uint64_t a12, uint64_t a13, uint64_t *a14)
{
  void *v14;
  const void *v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;

  if (a2 == 1)
  {
    v17 = objc_begin_catch(exception_object);
    if (a14)
    {
      CFGetAllocator(v15);
      *a14 = _CFBundleCreateError();
    }
    v18 = _NSOSLog();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      v19 = objc_msgSend(v14, "bundleURL");
      *(_DWORD *)(v16 - 128) = 138412546;
      v20 = v16 - 128;
      *(_QWORD *)(v20 + 4) = v19;
      *(_WORD *)(v16 - 116) = 2112;
      *(_QWORD *)(v20 + 14) = v17;
      _os_log_error_impl(&dword_1817D9000, v18, OS_LOG_TYPE_ERROR, "NSBundle %@ loading failed because an exception was raised during loading %@", (uint8_t *)(v16 - 128), 0x16u);
    }
    objc_end_catch();
    JUMPOUT(0x1818F192CLL);
  }
  _Unwind_Resume(exception_object);
}

NSArray *__cdecl NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask, BOOL expandTilde)
{
  _BOOL4 v3;
  __int16 v4;
  void *v6;
  NSSearchPathEnumerator *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  _BYTE v14[128];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v3 = expandTilde;
  v4 = domainMask;
  v19 = *MEMORY[0x1E0C80C00];
  v6 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v7 = -[NSSearchPathEnumerator initWithDirectory:domains:]([NSSearchPathEnumerator alloc], "initWithDirectory:domains:", directory, v4 & 0xC0F);
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v8 = -[NSSearchPathEnumerator countByEnumeratingWithState:objects:count:](v7, "countByEnumeratingWithState:objects:count:", &v15, v14, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v16;
    do
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v16 != v10)
          objc_enumerationMutation(v7);
        v12 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * i);
        if (v3 && objc_msgSend(*(id *)(*((_QWORD *)&v15 + 1) + 8 * i), "hasPrefix:", CFSTR("~")))
          v12 = (void *)objc_msgSend(v12, "stringByExpandingTildeInPath");
        objc_msgSend(v6, "addObject:", v12);
      }
      v9 = -[NSSearchPathEnumerator countByEnumeratingWithState:objects:count:](v7, "countByEnumeratingWithState:objects:count:", &v15, v14, 16);
    }
    while (v9);
  }

  if (objc_msgSend(v6, "count"))
    return (NSArray *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithArray:", v6);
  else
    return (NSArray *)objc_msgSend(MEMORY[0x1E0C99D20], "array");
}

void sub_1818F2140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  _Unwind_Resume(exception_object);
}

uint64_t _NSBundleInitializePrincipalClass(uint64_t result)
{
  objc_class *Class;

  if (result)
  {
    Class = object_getClass((id)result);
    result = class_respondsToSelector(Class, sel_self);
    if ((_DWORD)result)
      return objc_opt_self();
  }
  return result;
}

Class _NSBundleGetPrincipalClassFromInfoDict(unint64_t *a1)
{
  int v2;
  NSObject *v3;
  Class result;
  void *v5;
  NSString *v6;
  NSString *v7;
  NSString *v8;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  uint32_t v12;
  NSObject *v13;
  uint64_t v14;
  id *v15;
  id *v16;
  id *v17;
  os_unfair_lock_s *v18;
  NSString *v19;
  Class v20;
  const char *v21;
  _BYTE v22[24];
  NSString *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = atomic_load(a1 + 1);
  if ((v2 & 0x4000000) == 0)
  {
    v3 = _NSOSLog();
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      return 0;
    *(_DWORD *)v22 = 138412290;
    *(_QWORD *)&v22[4] = objc_msgSend(a1, "bundleURL");
    v21 = "NSBundle %@ principal class is nil because the bundle is not loaded";
LABEL_20:
    _os_log_error_impl(&dword_1817D9000, v3, OS_LOG_TYPE_ERROR, v21, v22, 0xCu);
    return 0;
  }
  v5 = (void *)objc_msgSend(a1, "infoDictionary");
  v6 = (NSString *)objc_msgSend(v5, "objectForKey:", CFSTR("NSPrincipalClass"));
  v7 = (NSString *)a1[7];
  if (v6)
  {
    v8 = v6;
    result = NSClassFromString(v6);
    if (result)
      return result;
    if (v7)
    {
      v9 = _NSOSLog();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v22 = 138412802;
        *(_QWORD *)&v22[4] = objc_msgSend(a1, "bundleURL");
        *(_WORD *)&v22[12] = 2112;
        *(_QWORD *)&v22[14] = v7;
        *(_WORD *)&v22[22] = 2112;
        v23 = v8;
        v10 = "NSBundle %@ principal class is using first class name %@ because the bundle's principal class name %@ is not present";
        v11 = v9;
        v12 = 32;
LABEL_22:
        _os_log_debug_impl(&dword_1817D9000, v11, OS_LOG_TYPE_DEBUG, v10, v22, v12);
        goto LABEL_11;
      }
      goto LABEL_11;
    }
LABEL_17:
    v3 = _NSOSLog();
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      return 0;
    *(_DWORD *)v22 = 138412290;
    *(_QWORD *)&v22[4] = objc_msgSend(a1, "bundleURL");
    v21 = "NSBundle %@ principal class is nil because all fallbacks have failed";
    goto LABEL_20;
  }
  if (!v7)
  {
    v14 = objc_msgSend((id)objc_msgSend(a1, "bundlePath"), "_stringByResolvingSymlinksInPathUsingCache:", 0);
    v15 = (id *)+[__NSBundleTables bundleTables]();
    v16 = -[__NSBundleTables bundleForPath:](v15, v14);
    if (v16)
    {
      v17 = v16;
      if (v16 != (id *)a1)
      {
        v18 = (os_unfair_lock_s *)(v16 + 8);
        os_unfair_lock_lock((os_unfair_lock_t)v16 + 16);
        v19 = (NSString *)v17[7];
        os_unfair_lock_unlock(v18);
        if (v19)
        {
          objc_msgSend(v5, "setObject:forKey:", v19, CFSTR("NSPrincipalClass"));
          v20 = NSClassFromString(v19);

          return v20;
        }
      }
    }
    goto LABEL_17;
  }
  v13 = _NSOSLog();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)v22 = 138412546;
    *(_QWORD *)&v22[4] = objc_msgSend(a1, "bundleURL");
    *(_WORD *)&v22[12] = 2112;
    *(_QWORD *)&v22[14] = v7;
    v10 = "NSBundle %@ principal class is using first class name %@ because the bundle has no principal class name";
    v11 = v13;
    v12 = 22;
    goto LABEL_22;
  }
LABEL_11:
  objc_msgSend(v5, "setObject:forKey:", v7, CFSTR("NSPrincipalClass"), *(_OWORD *)v22, *(_QWORD *)&v22[16], v23);
  return NSClassFromString(v7);
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSNumber(uint64_t a1@<X8>)
{
  id *v1;
  id v2;

  v2 = *v1;
  NSNumber._toCustomAnyHashable()(a1);

}

void NSNumber._toCustomAnyHashable()(uint64_t a1@<X8>)
{
  void *v1;
  void *v2;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  char v8;
  id v9;
  char v10;
  double v11;
  id v12;
  char v13;

  v2 = v1;
  objc_opt_self();
  v4 = swift_dynamicCastObjCClass();
  if (v4)
  {
    v5 = (void *)v4;
    v6 = v2;
    objc_msgSend(v5, sel_decimalValue);
    type metadata accessor for NSDecimal(0);
    lazy protocol witness table accessor for type NSDecimal and conformance NSDecimal();
    AnyHashable.init<A>(_:)();

    return;
  }
  if (!*MEMORY[0x1E0C9AE50])
  {
    __break(1u);
    goto LABEL_16;
  }
  if ((void *)*MEMORY[0x1E0C9AE50] == v1)
  {
LABEL_9:
    AnyHashable.init<A>(_:)();
    return;
  }
  if (!*MEMORY[0x1E0C9AE40])
  {
LABEL_16:
    __break(1u);
    return;
  }
  if ((void *)*MEMORY[0x1E0C9AE40] == v1)
    goto LABEL_9;
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  v7 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithLongLong_, objc_msgSend(v1, sel_longLongValue));
  v8 = static NSObject.== infix(_:_:)();

  if ((v8 & 1) != 0)
  {
    objc_msgSend(v1, sel_longLongValue);
    goto LABEL_9;
  }
  v9 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedLongLong_, objc_msgSend(v1, sel_unsignedLongLongValue));
  v10 = static NSObject.== infix(_:_:)();

  if ((v10 & 1) != 0)
  {
    objc_msgSend(v1, sel_unsignedLongLongValue);
    goto LABEL_9;
  }
  objc_msgSend(v1, sel_doubleValue);
  v12 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithDouble_, v11);
  v13 = static NSObject.== infix(_:_:)();

  if ((v13 & 1) != 0)
  {
    objc_msgSend(v2, sel_doubleValue);
    goto LABEL_9;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
}

uint64_t destroy for ScopedAttributeContainer()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance _AttributedStringFromMarkdownCreatorConcrete<A>.ExtendedAttributesBox.AttributeKey()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t _getTransformerRegistry()
{
  uint64_t result;
  _NSNegateBooleanTransformer *v1;
  _NSIsNilTransformer *v2;
  _NSIsNotNilTransformer *v3;
  id v4;
  id v5;
  NSSecureUnarchiveFromDataTransformer *v6;

  result = _transformerRegistry;
  if (!_transformerRegistry)
  {
    _transformerRegistry = objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", 8);
    v1 = objc_alloc_init(_NSNegateBooleanTransformer);
    objc_msgSend((id)_transformerRegistry, "setObject:forKey:", v1, CFSTR("NSNegateBoolean"));

    v2 = objc_alloc_init(_NSIsNilTransformer);
    objc_msgSend((id)_transformerRegistry, "setObject:forKey:", v2, CFSTR("NSIsNil"));

    v3 = objc_alloc_init(_NSIsNotNilTransformer);
    objc_msgSend((id)_transformerRegistry, "setObject:forKey:", v3, CFSTR("NSIsNotNil"));

    v4 = -[NSValueTransformer _initForFoundationOnly]([_NSUnarchiveFromDataTransformer alloc], "_initForFoundationOnly");
    objc_msgSend((id)_transformerRegistry, "setObject:forKey:", v4, CFSTR("NSUnarchiveFromData"));

    v5 = -[NSValueTransformer _initForFoundationOnly]([_NSKeyedUnarchiveFromDataTransformer alloc], "_initForFoundationOnly");
    objc_msgSend((id)_transformerRegistry, "setObject:forKey:", v5, CFSTR("NSKeyedUnarchiveFromData"));

    v6 = objc_alloc_init(NSSecureUnarchiveFromDataTransformer);
    objc_msgSend((id)_transformerRegistry, "setObject:forKey:", v6, CFSTR("NSSecureUnarchiveFromData"));

    return _transformerRegistry;
  }
  return result;
}

uint64_t ____immutablePlaceholderNSURL_block_invoke()
{
  uint64_t result;

  result = objc_msgSend(MEMORY[0x1E0C99E98], "__unurl");
  qword_1ECD0A200 = result;
  return result;
}

id NSUnitSpeed.init(forLocale:usage:)(uint64_t *a1, unsigned __int8 *a2)
{
  return NSUnitLength.init(forLocale:usage:)(a1, a2, &lazy cache variable for type metadata for NSUnitSpeed, (uint64_t)off_1E0F11320);
}

void CharacterSet.formUnion(_:)(uint64_t *a1, void (*a2)(void *, id))
{
  uint64_t *v2;
  uint64_t v4;

  v4 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *v2 = __CharacterSetStorage.mutableCopy()();
    swift_release();
  }
  __CharacterSetStorage.formUnion(_:)(v4, a2);
}

void __CharacterSetStorage.formUnion(_:)(uint64_t a1, void (*a2)(void *, id))
{
  uint64_t v2;
  void *v4;
  const __CFCharacterSet *v5;
  CFMutableCharacterSetRef MutableCopy;
  CFMutableCharacterSetRef v7;
  id v8;
  void *v9;

  v4 = *(void **)(v2 + 16);
  if ((*(_BYTE *)(v2 + 24) & 1) != 0)
  {
    a2(v4, *(id *)(a1 + 16));
  }
  else
  {
    v5 = v4;
    MutableCopy = CFCharacterSetCreateMutableCopy(0, v5);
    if (MutableCopy)
    {
      v7 = MutableCopy;
      v8 = *(id *)(a1 + 16);
      a2(v7, v8);

      v9 = *(void **)(v2 + 16);
      *(_QWORD *)(v2 + 16) = v7;
      *(_BYTE *)(v2 + 24) = 1;

    }
    else
    {
      __break(1u);
    }
  }
}

_QWORD *destroy for JSONEncoder.KeyEncodingStrategy(_QWORD *result)
{
  if (*result >= 0xFFFFFFFFuLL)
    return (_QWORD *)swift_release();
  return result;
}

void sub_1818F3134(void *a1)
{
  os_unfair_lock_s *v1;

  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_1818F314C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t Locale.Variant.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, _QWORD *a4@<X8>)
{
  uint64_t result;
  uint64_t v8;

  result = a3();
  *a4 = a1;
  a4[1] = a2;
  a4[2] = result;
  a4[3] = v8;
  return result;
}

Protocol *__cdecl NSProtocolFromString(Protocol *namestr)
{
  Protocol *v1;
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  char v5[1000];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (namestr)
  {
    v1 = namestr;
    v2 = -[Protocol length](namestr, "length");
    if (-[Protocol getCString:maxLength:encoding:](v1, "getCString:maxLength:encoding:", v5, 1000, 4)
      && strlen(v5) == v2)
    {
      v3 = v5;
      return objc_getProtocol(v3);
    }
    if (!v2)
    {
LABEL_9:
      v3 = (const char *)-[Protocol UTF8String](v1, "UTF8String");
      return objc_getProtocol(v3);
    }
    v4 = 0;
    while (-[Protocol characterAtIndex:](v1, "characterAtIndex:", v4))
    {
      if (v2 == ++v4)
        goto LABEL_9;
    }
    return 0;
  }
  return namestr;
}

void protocol witness for Subscription.request(_:) in conformance Notification.Subscription<A>(uint64_t a1)
{
  Notification.Subscription.request(_:)(a1);
}

void Notification.Subscription.request(_:)(uint64_t a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v3 = *(os_unfair_lock_s **)(v1 + 16);
  os_unfair_lock_lock(v3);
  v4 = *(_QWORD *)(v1 + 32);
  static Subscribers.Demand.unlimited.getter();
  if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0)
    goto LABEL_10;
  static Subscribers.Demand.unlimited.getter();
  v5 = static Subscribers.Demand.== infix(_:_:)();
  v6 = static Subscribers.Demand.unlimited.getter();
  if ((v5 & 1) != 0)
  {
LABEL_9:
    *(_QWORD *)(v1 + 32) = v6;
LABEL_10:
    os_unfair_lock_unlock(v3);
    return;
  }
  if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0)
    goto LABEL_7;
  if ((v4 | a1) < 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  v6 = v4 + a1;
  if (__OFADD__(v4, a1))
  {
LABEL_7:
    v6 = static Subscribers.Demand.unlimited.getter();
    goto LABEL_9;
  }
  if ((v6 & 0x8000000000000000) == 0)
    goto LABEL_9;
LABEL_12:
  __break(1u);
}

uint64_t ScopedAttributeContainer.subscript.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t *v3;

  return AttributedString._AttributeStorage.subscript.getter(*v3, *(_QWORD *)(*MEMORY[0x1E0DEE2A8] + *a1 + 8), a2, a3);
}

uint64_t _NSSwiftLocale.languageIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  void (*v3)(_OWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____NSSwiftLocale_locale + 8);
  ObjectType = swift_getObjectType();
  v3 = *(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v1 + 352);
  swift_unknownObjectRetain();
  v3(v24, ObjectType, v1);
  swift_unknownObjectRelease();
  v4 = *((_QWORD *)&v24[0] + 1);
  v5 = v26;
  v21 = *(_QWORD *)&v24[0];
  v22 = v25;
  v6 = v27;
  v7 = v28;
  v8 = v30;
  v23 = v29;
  v9 = v31;
  v10 = v32;
  if (*((_QWORD *)&v24[0] + 1))
    String.append(_:)((Swift::String)v24[1]);
  if (v5)
  {
    v11._countAndFlagsBits = 45;
    v11._object = (void *)0xE100000000000000;
    String.append(_:)(v11);
    v12._countAndFlagsBits = v6;
    v12._object = v7;
    String.append(_:)(v12);
  }
  if (v8)
  {
    v13._countAndFlagsBits = 95;
    v13._object = (void *)0xE100000000000000;
    String.append(_:)(v13);
    v14._countAndFlagsBits = v9;
    v14._object = v10;
    String.append(_:)(v14);
  }
  outlined consume of Locale.LanguageCode?(v21, v4);
  outlined consume of Locale.LanguageCode?(v22, v5);
  outlined consume of Locale.LanguageCode?(v23, v8);
  if (one-time initialization token for cache != -1)
    swift_once();
  v15 = static LocaleCache.cache + 16;
  v16 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v16);
  closure #1 in LocaleCache.fixed(_:)(v15, 0, 0xE000000000000000, v24);
  os_unfair_lock_unlock(v16);
  swift_bridgeObjectRelease();
  swift_release_n();
  v17 = *((_QWORD *)&v24[0] + 1);
  v18 = swift_getObjectType();
  LOBYTE(v24[0]) = 1;
  v19 = (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v17 + 416))(v24, v18, v17);
  swift_unknownObjectRelease();
  return v19;
}

uint64_t protocol witness for _LocaleProtocol.identifier(_:) in conformance _LocaleICU()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v3;

  v1 = *(os_unfair_lock_s **)(v0 + 184);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.identifier(_:)((uint64_t)&v1[4], &v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

uint64_t partial apply for closure #1 in _LocaleICU.identifier(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in _LocaleICU.identifier(_:)(a1, *(unsigned __int8 *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t closure #1 in _LocaleICU.identifier(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  _BOOL8 v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  int64_t v54;
  unint64_t v55;
  int64_t v56;
  uint64_t result;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  int64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  int64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  int64_t v72;
  unint64_t v73;
  int64_t v74;
  int64_t v75;
  unint64_t v76;
  char *__src;
  char *__srca;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;

  v8 = *(_QWORD *)(a1 + 464);
  if (*(_QWORD *)(v8 + 16))
  {
    v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v10 & 1) != 0)
    {
      v11 = (uint64_t *)(*(_QWORD *)(v8 + 56) + 16 * v9);
      v12 = v11[1];
      *a4 = *v11;
      a4[1] = v12;
      return swift_bridgeObjectRetain();
    }
  }
  v14 = *(_QWORD *)(a3 + 16);
  v13 = *(_QWORD *)(a3 + 24);
  v83 = a4;
  if ((_BYTE)a2)
  {
    if (a2 != 1)
    {
      swift_bridgeObjectRetain();
      specialized _withFixedCharBuffer(size:_:)(257);
      v18 = v19;
      swift_bridgeObjectRelease();
      if (v18)
      {
        lazy protocol witness table accessor for type String and conformance String();
        LOBYTE(v13) = lazy protocol witness table accessor for type String and conformance String();
        RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)();
        swift_bridgeObjectRelease();
        v17 = v79;
        v18 = v82;
        if (v79 == 6581877 && v82 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)();
          swift_bridgeObjectRelease();
          v17 = v79;
          v18 = v82;
        }
        goto LABEL_15;
      }
LABEL_20:
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v81 = *(_QWORD *)(a1 + 464);
      v17 = v81;
      *(_QWORD *)(a1 + 464) = 0x8000000000000000;
      v30 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
      v31 = *(_QWORD *)(v81 + 16);
      v32 = (v29 & 1) == 0;
      v33 = v31 + v32;
      if (!__OFADD__(v31, v32))
      {
        v34 = v29;
        if (*(_QWORD *)(v81 + 24) < v33)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v33, isUniquelyReferenced_nonNull_native);
          v35 = v81;
          v36 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
          if ((v34 & 1) != (v37 & 1))
            goto LABEL_108;
          v30 = v36;
          v38 = v83;
          if ((v34 & 1) == 0)
            goto LABEL_101;
          goto LABEL_30;
        }
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v35 = v81;
          v38 = v83;
          if ((v29 & 1) == 0)
            goto LABEL_101;
          goto LABEL_30;
        }
        v76 = v30;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Locale.IdentifierType, String>);
        v58 = static _DictionaryStorage.copy(original:)();
        v35 = v58;
        if (!*(_QWORD *)(v81 + 16))
          goto LABEL_100;
        v59 = (char *)(v58 + 64);
        __srca = (char *)(v81 + 64);
        v60 = (unint64_t)((1 << *(_BYTE *)(v35 + 32)) + 63) >> 6;
        if (v35 != v81 || v59 >= &__srca[8 * v60])
          memmove(v59, __srca, 8 * v60);
        v61 = 0;
        *(_QWORD *)(v35 + 16) = *(_QWORD *)(v81 + 16);
        v62 = 1 << *(_BYTE *)(v81 + 32);
        v63 = -1;
        if (v62 < 64)
          v63 = ~(-1 << v62);
        v64 = v63 & *(_QWORD *)(v81 + 64);
        v65 = (unint64_t)(v62 + 63) >> 6;
        while (1)
        {
          if (v64)
          {
            v66 = __clz(__rbit64(v64));
            v64 &= v64 - 1;
            v67 = v66 | (v61 << 6);
          }
          else
          {
            v72 = v61 + 1;
            if (__OFADD__(v61, 1))
            {
LABEL_105:
              __break(1u);
              goto LABEL_106;
            }
            if (v72 >= v65)
              goto LABEL_100;
            v73 = *(_QWORD *)&__srca[8 * v72];
            ++v61;
            if (!v73)
            {
              v61 = v72 + 1;
              if (v72 + 1 >= v65)
                goto LABEL_100;
              v73 = *(_QWORD *)&__srca[8 * v61];
              if (!v73)
              {
                v61 = v72 + 2;
                if (v72 + 2 >= v65)
                  goto LABEL_100;
                v73 = *(_QWORD *)&__srca[8 * v61];
                if (!v73)
                {
                  v61 = v72 + 3;
                  if (v72 + 3 >= v65)
                    goto LABEL_100;
                  v73 = *(_QWORD *)&__srca[8 * v61];
                  if (!v73)
                  {
                    v61 = v72 + 4;
                    if (v72 + 4 >= v65)
                      goto LABEL_100;
                    v73 = *(_QWORD *)&__srca[8 * v61];
                    if (!v73)
                    {
                      v61 = v72 + 5;
                      if (v72 + 5 >= v65)
                        goto LABEL_100;
                      v73 = *(_QWORD *)&__srca[8 * v61];
                      if (!v73)
                      {
                        v61 = v72 + 6;
                        if (v72 + 6 >= v65)
                          goto LABEL_100;
                        v73 = *(_QWORD *)&__srca[8 * v61];
                        if (!v73)
                        {
                          v74 = v72 + 7;
                          if (v74 >= v65)
                            goto LABEL_100;
                          v73 = *(_QWORD *)&__srca[8 * v74];
                          if (!v73)
                          {
                            while (1)
                            {
                              v61 = v74 + 1;
                              if (__OFADD__(v74, 1))
                                goto LABEL_107;
                              if (v61 >= v65)
                                break;
                              v73 = *(_QWORD *)&__srca[8 * v61];
                              ++v74;
                              if (v73)
                                goto LABEL_99;
                            }
LABEL_100:
                            swift_bridgeObjectRelease();
                            v38 = v83;
                            v30 = v76;
                            if ((v34 & 1) == 0)
                            {
LABEL_101:
                              specialized _NativeDictionary._insert(at:key:value:)(v30, a2, v14, v13, (_QWORD *)v35);
LABEL_102:
                              *(_QWORD *)(a1 + 464) = v35;
                              swift_bridgeObjectRelease();
                              *v38 = v14;
                              v38[1] = v13;
                              return swift_bridgeObjectRetain();
                            }
LABEL_30:
                            v40 = (uint64_t *)(*(_QWORD *)(v35 + 56) + 16 * v30);
                            swift_bridgeObjectRelease();
                            *v40 = v14;
                            v40[1] = v13;
                            goto LABEL_102;
                          }
                          v61 = v74;
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_99:
            v64 = (v73 - 1) & v73;
            v67 = __clz(__rbit64(v73)) + (v61 << 6);
          }
          v68 = (uint64_t *)(*(_QWORD *)(v81 + 56) + 16 * v67);
          v70 = *v68;
          v69 = v68[1];
          *(_BYTE *)(*(_QWORD *)(v35 + 48) + v67) = *(_BYTE *)(*(_QWORD *)(v81 + 48) + v67);
          v71 = (_QWORD *)(*(_QWORD *)(v35 + 56) + 16 * v67);
          *v71 = v70;
          v71[1] = v69;
          swift_bridgeObjectRetain();
        }
      }
      goto LABEL_32;
    }
    swift_bridgeObjectRetain();
    v15 = specialized _withFixedCharBuffer(size:_:)(257);
  }
  else
  {
    swift_bridgeObjectRetain();
    v15 = specialized _withFixedCharBuffer(size:_:)(157, v14, v13);
  }
  v17 = v15;
  v18 = v16;
  swift_bridgeObjectRelease();
  if (!v18)
    goto LABEL_20;
LABEL_15:
  swift_bridgeObjectRetain();
  v20 = swift_isUniquelyReferenced_nonNull_native();
  v80 = *(_QWORD *)(a1 + 464);
  isUniquelyReferenced_nonNull_native = v80;
  *(_QWORD *)(a1 + 464) = 0x8000000000000000;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v23 = *(_QWORD *)(v80 + 16);
  v24 = (v22 & 1) == 0;
  v25 = v23 + v24;
  if (!__OFADD__(v23, v24))
  {
    LOBYTE(v13) = v22;
    if (*(_QWORD *)(v80 + 24) < v25)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v25, v20);
      v26 = v80;
      v27 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
      if ((v13 & 1) != (v28 & 1))
        goto LABEL_108;
      v14 = v27;
      if ((v13 & 1) == 0)
        goto LABEL_66;
LABEL_27:
      v39 = (uint64_t *)(*(_QWORD *)(v26 + 56) + 16 * v14);
      swift_bridgeObjectRelease();
      *v39 = v17;
      v39[1] = v18;
LABEL_67:
      *(_QWORD *)(a1 + 464) = v26;
      result = swift_bridgeObjectRelease();
      *v83 = v17;
      v83[1] = v18;
      return result;
    }
    if ((v20 & 1) != 0)
    {
      v26 = v80;
      if ((v22 & 1) != 0)
        goto LABEL_27;
LABEL_66:
      specialized _NativeDictionary._insert(at:key:value:)(v14, a2, v17, v18, (_QWORD *)v26);
      goto LABEL_67;
    }
    goto LABEL_33;
  }
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Locale.IdentifierType, String>);
  v41 = static _DictionaryStorage.copy(original:)();
  v26 = v41;
  if (!*(_QWORD *)(isUniquelyReferenced_nonNull_native + 16))
  {
LABEL_65:
    swift_bridgeObjectRelease();
    if ((v13 & 1) != 0)
      goto LABEL_27;
    goto LABEL_66;
  }
  v42 = (char *)(v41 + 64);
  __src = (char *)(isUniquelyReferenced_nonNull_native + 64);
  v43 = (unint64_t)((1 << *(_BYTE *)(v26 + 32)) + 63) >> 6;
  if (v26 != isUniquelyReferenced_nonNull_native || v42 >= &__src[8 * v43])
    memmove(v42, __src, 8 * v43);
  v44 = 0;
  *(_QWORD *)(v26 + 16) = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 16);
  v45 = 1 << *(_BYTE *)(isUniquelyReferenced_nonNull_native + 32);
  v46 = -1;
  if (v45 < 64)
    v46 = ~(-1 << v45);
  v47 = v46 & *(_QWORD *)(isUniquelyReferenced_nonNull_native + 64);
  v75 = (unint64_t)(v45 + 63) >> 6;
  while (1)
  {
    if (v47)
    {
      v48 = __clz(__rbit64(v47));
      v47 &= v47 - 1;
      v49 = v48 | (v44 << 6);
      goto LABEL_41;
    }
    v54 = v44 + 1;
    if (__OFADD__(v44, 1))
    {
      __break(1u);
      goto LABEL_105;
    }
    if (v54 >= v75)
      goto LABEL_65;
    v55 = *(_QWORD *)&__src[8 * v54];
    ++v44;
    if (!v55)
    {
      v44 = v54 + 1;
      if (v54 + 1 >= v75)
        goto LABEL_65;
      v55 = *(_QWORD *)&__src[8 * v44];
      if (!v55)
      {
        v44 = v54 + 2;
        if (v54 + 2 >= v75)
          goto LABEL_65;
        v55 = *(_QWORD *)&__src[8 * v44];
        if (!v55)
        {
          v44 = v54 + 3;
          if (v54 + 3 >= v75)
            goto LABEL_65;
          v55 = *(_QWORD *)&__src[8 * v44];
          if (!v55)
          {
            v44 = v54 + 4;
            if (v54 + 4 >= v75)
              goto LABEL_65;
            v55 = *(_QWORD *)&__src[8 * v44];
            if (!v55)
            {
              v44 = v54 + 5;
              if (v54 + 5 >= v75)
                goto LABEL_65;
              v55 = *(_QWORD *)&__src[8 * v44];
              if (!v55)
              {
                v44 = v54 + 6;
                if (v54 + 6 >= v75)
                  goto LABEL_65;
                v55 = *(_QWORD *)&__src[8 * v44];
                if (!v55)
                  break;
              }
            }
          }
        }
      }
    }
LABEL_64:
    v47 = (v55 - 1) & v55;
    v49 = __clz(__rbit64(v55)) + (v44 << 6);
LABEL_41:
    v50 = (uint64_t *)(*(_QWORD *)(isUniquelyReferenced_nonNull_native + 56) + 16 * v49);
    v52 = *v50;
    v51 = v50[1];
    *(_BYTE *)(*(_QWORD *)(v26 + 48) + v49) = *(_BYTE *)(*(_QWORD *)(isUniquelyReferenced_nonNull_native + 48) + v49);
    v53 = (_QWORD *)(*(_QWORD *)(v26 + 56) + 16 * v49);
    *v53 = v52;
    v53[1] = v51;
    swift_bridgeObjectRetain();
  }
  v56 = v54 + 7;
  if (v56 >= v75)
    goto LABEL_65;
  v55 = *(_QWORD *)&__src[8 * v56];
  if (v55)
  {
    v44 = v56;
    goto LABEL_64;
  }
  while (1)
  {
    v44 = v56 + 1;
    if (__OFADD__(v56, 1))
      break;
    if (v44 >= v75)
      goto LABEL_65;
    v55 = *(_QWORD *)&__src[8 * v44];
    ++v56;
    if (v55)
      goto LABEL_64;
  }
LABEL_106:
  __break(1u);
LABEL_107:
  __break(1u);
LABEL_108:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, char a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  *(_BYTE *)(a5[6] + result) = a2;
  v5 = (_QWORD *)(a5[7] + 16 * result);
  *v5 = a3;
  v5[1] = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

uint64_t specialized _withFixedCharBuffer(size:_:)(uint64_t isStackAllocationSafe)
{
  return specialized _withFixedCharBuffer(size:_:)(isStackAllocationSafe);
}

{
  int v1;
  uint64_t v2;
  char *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v1 = isStackAllocationSafe + 1;
  if (__OFADD__((_DWORD)isStackAllocationSafe, 1))
  {
    __break(1u);
LABEL_15:
    __break(1u);
  }
  if (v1 < 0)
    goto LABEL_15;
  if (v1 < 1025 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v3 = (char *)&v9 - v2;
    HIDWORD(v9) = 0;
    String.utf8CString.getter();
    v4 = uloc_toLanguageTag();
    swift_release();
    v5 = 0;
    if (SHIDWORD(v9) <= 0 && v4 > 0)
    {
      v3[v4] = 0;
      return MEMORY[0x186DA4658](v3);
    }
  }
  else
  {
    v6 = swift_slowAlloc();
    String.utf8CString.getter();
    v7 = uloc_toLanguageTag();
    swift_release();
    v5 = 0;
    if (v7 > 0)
    {
      *(_BYTE *)(v6 + v7) = 0;
      v5 = MEMORY[0x186DA4658](v6);
    }
    MEMORY[0x186DA9E78](v6, -1, -1);
  }
  return v5;
}

{
  int v1;
  uint64_t v2;
  char *v3;
  int Language;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v1 = isStackAllocationSafe + 1;
  if (__OFADD__((_DWORD)isStackAllocationSafe, 1))
  {
    __break(1u);
LABEL_15:
    __break(1u);
  }
  if (v1 < 0)
    goto LABEL_15;
  if (v1 < 1025 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v3 = (char *)&v9 - v2;
    HIDWORD(v9) = 0;
    String.utf8CString.getter();
    Language = uloc_getLanguage();
    swift_release();
    v5 = 0;
    if (SHIDWORD(v9) <= 0 && Language > 0)
    {
      v3[Language] = 0;
      return MEMORY[0x186DA4658](v3);
    }
  }
  else
  {
    v6 = swift_slowAlloc();
    String.utf8CString.getter();
    v7 = uloc_getLanguage();
    swift_release();
    v5 = 0;
    if (v7 > 0)
    {
      *(_BYTE *)(v6 + v7) = 0;
      v5 = MEMORY[0x186DA4658](v6);
    }
    MEMORY[0x186DA9E78](v6, -1, -1);
  }
  return v5;
}

{
  int v1;
  uint64_t v2;
  char *v3;
  int Variant;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v1 = isStackAllocationSafe + 1;
  if (__OFADD__((_DWORD)isStackAllocationSafe, 1))
  {
    __break(1u);
LABEL_15:
    __break(1u);
  }
  if (v1 < 0)
    goto LABEL_15;
  if (v1 < 1025 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v3 = (char *)&v9 - v2;
    HIDWORD(v9) = 0;
    String.utf8CString.getter();
    Variant = uloc_getVariant();
    swift_release();
    v5 = 0;
    if (SHIDWORD(v9) <= 0 && Variant > 0)
    {
      v3[Variant] = 0;
      return MEMORY[0x186DA4658](v3);
    }
  }
  else
  {
    v6 = swift_slowAlloc();
    String.utf8CString.getter();
    v7 = uloc_getVariant();
    swift_release();
    v5 = 0;
    if (v7 > 0)
    {
      *(_BYTE *)(v6 + v7) = 0;
      v5 = MEMORY[0x186DA4658](v6);
    }
    MEMORY[0x186DA9E78](v6, -1, -1);
  }
  return v5;
}

uint64_t protocol witness for Decodable.init(from:) in conformance LocalizedStringResource@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return LocalizedStringResource.init(from:)(a1, a2);
}

uint64_t LocalizedStringResource.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  id v21;
  id v22;
  int v23;
  uint64_t v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  unsigned int v56;
  char v57;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<LocalizedStringResource.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type LocalizedStringResource.CodingKeys and conformance LocalizedStringResource.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  LOBYTE(v54) = 0;
  v10 = KeyedDecodingContainer.decode(_:forKey:)();
  v12 = v11;
  v57 = 1;
  lazy protocol witness table accessor for type String.LocalizationValue and conformance String.LocalizationValue();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v50 = v10;
  v53 = v12;
  v49 = *((_QWORD *)&v54 + 1);
  v13 = v54;
  v14 = v55;
  LOBYTE(v54) = 2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v52 = v16;
  v42 = v15;
  v47 = v13;
  v48 = v14;
  v57 = 3;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  swift_bridgeObjectRetain();
  v46 = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v41 = v54;
  v57 = 4;
  lazy protocol witness table accessor for type URL and conformance URL();
  v18 = v41;
  swift_unknownObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v45 = v18;
  v19 = v54;
  v20 = v55;
  swift_retain_n();
  v21 = (id)v19;
  swift_retain_n();
  v22 = v21;
  v23 = _foundation_swift_url_feature_enabled();
  v43 = v22;
  v44 = *((_QWORD *)&v19 + 1);
  v51 = v20;
  if (v23)
  {
    *(_QWORD *)&v54 = v22;
    *((_QWORD *)&v54 + 1) = *((_QWORD *)&v19 + 1);
    v55 = v20;
    URL.scheme.getter();
    if (!v24)
    {
      swift_unknownObjectRelease();
      swift_release_n();
      swift_release_n();

      goto LABEL_18;
    }
    v25 = String.lowercased()();
    swift_bridgeObjectRelease();
    if (v25._countAndFlagsBits == 1701603686 && v25._object == (void *)0xE400000000000000)
    {
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
LABEL_16:
      LOBYTE(v54) = 5;
      v26 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      v28 = v27;
      v29 = *(void (**)(char *, uint64_t))(v6 + 8);
      v46 = v26;
      v29(v8, v5);
      swift_bridgeObjectRetain();
      v30 = v53;
      swift_bridgeObjectRetain();
      v31 = v47;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v32 = v51;
      *(_QWORD *)a2 = v50;
      *(_QWORD *)(a2 + 8) = v30;
      v33 = v49;
      *(_QWORD *)(a2 + 16) = v31;
      *(_QWORD *)(a2 + 24) = v33;
      v34 = v42;
      v35 = v43;
      *(_QWORD *)(a2 + 32) = v48;
      *(_QWORD *)(a2 + 40) = v34;
      *(_QWORD *)(a2 + 48) = v52;
      *(_OWORD *)(a2 + 56) = v41;
      v36 = v44;
      *(_QWORD *)(a2 + 72) = v35;
      *(_QWORD *)(a2 + 80) = v36;
      v37 = v46;
      *(_QWORD *)(a2 + 88) = v32;
      *(_QWORD *)(a2 + 96) = v37;
      *(_QWORD *)(a2 + 104) = v28;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();

      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    if ((v56 & 1) != 0)
      goto LABEL_16;
  }
  else
  {
    v56 = objc_msgSend(v22, sel_isFileURL);
    swift_release();
    swift_release();

    if ((v56 & 1) != 0)
      goto LABEL_16;
  }
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  v22 = v43;
LABEL_18:

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v38 = type metadata accessor for DecodingError();
  swift_allocError();
  v40 = v39;
  KeyedDecodingContainer.codingPath.getter();
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v38 - 8) + 104))(v40, *MEMORY[0x1E0DEC458], v38);
  swift_willThrow();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v17 = v46;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v17)
    swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  swift_release();
  return swift_release();
}

void protocol witness for Encodable.encode(to:) in conformance LocalizedStringResource(_QWORD *a1)
{
  LocalizedStringResource.encode(to:)(a1);
}

void LocalizedStringResource.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  os_log_t v17;
  char *v18;
  uint64_t v19;
  uint64_t ObjectType;
  uint64_t (*isa)(uint64_t, os_log_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  os_unfair_lock_s *v29;
  uint64_t v30;
  __int128 v31;
  id v32;
  uint64_t v33;
  id v34;
  int v35;
  id v36;
  Swift::String v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  id v44;
  void *v45;
  id v46;
  void *v47;
  void *v48;
  id v49;
  void *v50;
  id v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  Swift::String v55;
  Swift::String v56;
  Swift::String v57;
  id v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  NSObject *v67;
  int v68;
  _DWORD *v69;
  uint64_t v70;
  id v71;
  int v72;
  id v73;
  Swift::String v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  unint64_t v81;
  __int128 v82;
  void (*v83)(char *, _QWORD);
  unint64_t v84;
  id v85;
  void *v86;
  char *v87;
  char *v88;
  id v89;
  void *v90;
  id v91;
  void *v92;
  void *v93;
  id v94;
  void *v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  Swift::String v99;
  Swift::String v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  char *v106;
  Swift::String v107;
  id v108;
  void *v109;
  void *v110;
  id v111;
  unint64_t v112;
  uint64_t v113;
  _DWORD *v114;
  id v115;
  uint64_t v116;
  os_log_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  __int128 v124;
  _DWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  os_log_t object;
  id v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  char v135;
  uint64_t v136;
  __int128 v137;
  _OWORD v138[22];
  uint64_t v139[44];
  char v140;
  uint64_t v141;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for KeyedEncodingContainer<LocalizedStringResource.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v119 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v133 = v1[2];
  *(_QWORD *)&v134 = v7;
  v9 = v1[4];
  v131 = v1[3];
  v132 = v9;
  v10 = (void *)v1[5];
  v11 = v1[6];
  v12 = v1[7];
  object = (os_log_t)v1[8];
  v130 = v10;
  v13 = v1[10];
  *(_QWORD *)&v124 = v1[9];
  *((_QWORD *)&v124 + 1) = v13;
  v127 = v1[11];
  v128 = v11;
  v125 = (_DWORD *)v1[12];
  v126 = v12;
  v123 = v1[13];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type LocalizedStringResource.CodingKeys and conformance LocalizedStringResource.CodingKeys();
  v14 = v3;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v139[0]) = 0;
  v15 = v141;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v15)
  {
    v16 = *(void (**)(char *, uint64_t))(v4 + 8);
    v18 = v6;
LABEL_4:
    v16(v18, v14);
    return;
  }
  v17 = object;
  v121 = v8;
  v122 = v4;
  v139[0] = v133;
  v139[1] = v131;
  v139[2] = v132;
  LOBYTE(v138[0]) = 1;
  lazy protocol witness table accessor for type String.LocalizationValue and conformance String.LocalizationValue();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v140 = 2;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  v141 = v14;
  v19 = v126;
  ObjectType = swift_getObjectType();
  isa = (uint64_t (*)(uint64_t, os_log_t))v17[8].isa;
  swift_unknownObjectRetain();
  v22 = isa(ObjectType, v17);
  Locale.Components.init(identifier:)(v22, v23, v138);
  *(_QWORD *)&v137 = v19;
  *((_QWORD *)&v137 + 1) = v17;
  Locale.Components.applyPreferencesOverride(_:)(&v137);
  swift_unknownObjectRelease();
  memcpy(v139, v138, sizeof(v139));
  memcpy(v138, v139, sizeof(v138));
  Locale.Components.icuIdentifier.getter();
  v26 = v24;
  v27 = v25;
  if (one-time initialization token for cache != -1)
    swift_once();
  v28 = static LocaleCache.cache + 16;
  v29 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v29);
  closure #1 in LocaleCache.fixed(_:)(v28, v26, v27, v138);
  os_unfair_lock_unlock(v29);
  swift_bridgeObjectRelease();
  swift_release_n();
  v134 = v138[0];
  LOBYTE(v137) = 3;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v30 = v127;
  v31 = v124;
  v138[0] = v124;
  *(_QWORD *)&v138[1] = v127;
  LOBYTE(v137) = 4;
  lazy protocol witness table accessor for type URL and conformance URL();
  v32 = (id)v31;
  swift_retain();
  swift_retain();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  swift_release();
  swift_release();

  if (v123)
  {
    LOBYTE(v138[0]) = 5;
    v33 = v141;
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v122 + 8))(v6, v33);
    outlined release of Locale.Components(v139);
    swift_unknownObjectRelease();
    return;
  }
  v131 = *MEMORY[0x1E0C80000];
  v34 = v32;
  swift_retain();
  swift_retain();
  v35 = _foundation_swift_url_feature_enabled();
  v120 = v6;
  if (v35)
  {
    *(_QWORD *)&v138[0] = v34;
    *((_QWORD *)&v138[0] + 1) = *((_QWORD *)&v31 + 1);
    *(_QWORD *)&v138[1] = v30;
    v130 = v34;
    v36 = v34;
    swift_retain();
    swift_retain();
    v37 = URL.path(percentEncoded:)(1);
    v138[0] = v37;
    swift_bridgeObjectRetain();
    if (String.count.getter() > 1
      && (specialized BidirectionalCollection.last.getter(v37._countAndFlagsBits, (unint64_t)v37._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }
    object = (os_log_t)v37._object;
    *(_QWORD *)&v137 = Set.init(minimumCapacity:)();
    v38 = specialized Set._Variant.insert(_:)(&v136, 0x2FuLL);
    v39 = v137;
    v40 = v138[0];
    v41 = HIBYTE(*((_QWORD *)&v138[0] + 1)) & 0xFLL;
    if ((*((_QWORD *)&v138[0] + 1) & 0x2000000000000000) == 0)
      v41 = *(_QWORD *)&v138[0] & 0xFFFFFFFFFFFFLL;
    if (v41)
    {
      v137 = v138[0];
      MEMORY[0x1E0C80A78](v38);
      *(&v119 - 2) = (uint64_t)&v137;
      *(&v119 - 1) = v39;
      swift_bridgeObjectRetain();
      specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)(&v119 - 4), v40, *((unint64_t *)&v40 + 1));
      if (v42 == 1)
      {
        v43 = v137;
        swift_bridgeObjectRetain();
        specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v43, *((unint64_t *)&v43 + 1), v39);
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();

    v34 = v130;
  }
  else
  {
    v44 = objc_msgSend(v34, sel__parameterString);
    if (v44)
    {
      v45 = v44;
      v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
      v48 = v47;

      if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
        && (v49 = objc_msgSend(v34, sel_path)) != 0)
      {
        v50 = v49;
        v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
        v130 = v34;
        v52 = v51;
        v54 = v53;

        *(_QWORD *)&v138[0] = v52;
        *((_QWORD *)&v138[0] + 1) = v54;
        swift_bridgeObjectRetain();
        v55._countAndFlagsBits = 59;
        v55._object = (void *)0xE100000000000000;
        String.append(_:)(v55);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v56._countAndFlagsBits = (uint64_t)v46;
        v56._object = v48;
        String.append(_:)(v56);
        v34 = v130;
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
      }
      else
      {
        *(_QWORD *)&v138[0] = 59;
        *((_QWORD *)&v138[0] + 1) = 0xE100000000000000;
        v57._countAndFlagsBits = (uint64_t)v46;
        v57._object = v48;
        String.append(_:)(v57);
        swift_release();
        swift_release();

      }
      swift_bridgeObjectRelease();
    }
    else
    {
      v58 = objc_msgSend(v34, sel_path);
      if (v58)
      {
        v59 = v58;
        static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
        swift_release();
        swift_release();

      }
      else
      {
        swift_release();
        swift_release();

      }
    }
  }
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v60 = sandbox_extension_issue_file();
  swift_release();
  if (!v60)
  {
    if (one-time initialization token for localizedStringLogger != -1)
      swift_once();
    v62 = type metadata accessor for Logger();
    __swift_project_value_buffer(v62, (uint64_t)localizedStringLogger);
    swift_bridgeObjectRetain_n();
    swift_unknownObjectRetain_n();
    v63 = v34;
    v64 = *((_QWORD *)&v124 + 1);
    swift_retain_n();
    v65 = v127;
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v66 = v63;
    v67 = Logger.logObject.getter();
    v68 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v67, (os_log_type_t)v68))
    {
      v88 = v120;
      swift_bridgeObjectRelease_n();
      swift_release_n();
      swift_release_n();

      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();

      swift_unknownObjectRelease();
      outlined release of Locale.Components(v139);
      (*(void (**)(char *, uint64_t))(v122 + 8))(v88, v141);
      return;
    }
    LODWORD(v124) = v68;
    object = v67;
    v69 = (_DWORD *)swift_slowAlloc();
    v70 = swift_slowAlloc();
    v136 = v70;
    *v69 = 136315394;
    v71 = v66;
    swift_retain();
    swift_retain();
    v72 = _foundation_swift_url_feature_enabled();
    v125 = v69;
    v123 = v70;
    v130 = v71;
    if (!v72)
    {
      v89 = objc_msgSend(v71, sel__parameterString);
      if (v89)
      {
        v90 = v89;
        v91 = static String._unconditionallyBridgeFromObjectiveC(_:)(v89);
        v93 = v92;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (v94 = objc_msgSend(v71, sel_path)) != 0)
        {
          v95 = v94;
          v96 = static String._unconditionallyBridgeFromObjectiveC(_:)(v94);
          v98 = v97;

          *(_QWORD *)&v138[0] = v96;
          *((_QWORD *)&v138[0] + 1) = v98;
          swift_bridgeObjectRetain();
          v99._countAndFlagsBits = 59;
          v99._object = (void *)0xE100000000000000;
          String.append(_:)(v99);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v100._countAndFlagsBits = (uint64_t)v91;
          v100._object = v93;
          String.append(_:)(v100);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v131 = *((_QWORD *)&v138[0] + 1);
          v101 = *(_QWORD *)&v138[0];
        }
        else
        {
          *(_QWORD *)&v138[0] = 59;
          *((_QWORD *)&v138[0] + 1) = 0xE100000000000000;
          v107._countAndFlagsBits = (uint64_t)v91;
          v107._object = v93;
          String.append(_:)(v107);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
          v131 = *((_QWORD *)&v138[0] + 1);
          v101 = *(_QWORD *)&v138[0];
        }
      }
      else
      {
        v108 = objc_msgSend(v71, sel_path);
        v109 = v71;
        if (v108)
        {
          v110 = v108;
          v111 = static String._unconditionallyBridgeFromObjectiveC(_:)(v108);
          v131 = v112;
          swift_release();
          swift_release();

          v101 = (uint64_t)v111;
        }
        else
        {
          swift_release();
          swift_release();

          v101 = 0;
          v131 = 0xE000000000000000;
        }
      }
      v113 = v141;
      goto LABEL_65;
    }
    v119 = 0;
    *(_QWORD *)&v138[0] = v71;
    *((_QWORD *)&v138[0] + 1) = v64;
    *(_QWORD *)&v138[1] = v65;
    v73 = v71;
    swift_retain();
    swift_retain();
    v74 = URL.path(percentEncoded:)(1);
    v138[0] = v74;
    swift_bridgeObjectRetain();
    if (String.count.getter() > 1
      && (specialized BidirectionalCollection.last.getter(v74._countAndFlagsBits, (unint64_t)v74._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }
    *(_QWORD *)&v137 = Set.init(minimumCapacity:)();
    v75 = specialized Set._Variant.insert(_:)(&v135, 0x2FuLL);
    v76 = v137;
    v77 = v138[0];
    v78 = HIBYTE(*((_QWORD *)&v138[0] + 1)) & 0xFLL;
    if ((*((_QWORD *)&v138[0] + 1) & 0x2000000000000000) == 0)
      v78 = *(_QWORD *)&v138[0] & 0xFFFFFFFFFFFFLL;
    if (v78)
    {
      v137 = v138[0];
      MEMORY[0x1E0C80A78](v75);
      *(&v119 - 2) = (uint64_t)&v137;
      *(&v119 - 1) = v76;
      swift_bridgeObjectRetain();
      v79 = v119;
      v80 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:), (uint64_t)(&v119 - 4), v77, *((unint64_t *)&v77 + 1));
      v119 = v79;
      v131 = v81;
      if (v81 == 1)
      {
        v82 = v137;
        swift_bridgeObjectRetain();
        v83 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v82, *((unint64_t *)&v82 + 1), v76);
        v131 = v84;
        swift_bridgeObjectRelease();
      }
      else
      {
        v83 = (void (*)(char *, _QWORD))v80;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!v131)
      {
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v83 = 0;
        v131 = 0xE000000000000000;
        goto LABEL_62;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      v83 = 0;
      v131 = 0xE000000000000000;
    }
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_62:
    swift_release();
    swift_release();

    v113 = v141;
    v101 = (uint64_t)v83;
LABEL_65:
    v114 = v125;
    *(_QWORD *)&v138[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v101, v131, &v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    v115 = v130;

    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    v116 = swift_bridgeObjectRelease();
    *((_WORD *)v114 + 6) = 1026;
    LODWORD(v138[0]) = MEMORY[0x186DA4118](v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v117 = object;
    _os_log_impl(&dword_1817D9000, object, (os_log_type_t)v124, "Unable to issue sandbox extension for path '%s' (errno: %{public}d)", (uint8_t *)v114, 0x12u);
    v118 = v123;
    swift_arrayDestroy();
    MEMORY[0x186DA9E78](v118, -1, -1);
    MEMORY[0x186DA9E78](v114, -1, -1);

    swift_unknownObjectRelease();
    outlined release of Locale.Components(v139);
    (*(void (**)(char *, uint64_t))(v122 + 8))(v120, v113);
    return;
  }
  MEMORY[0x186DA4658](v60);
  if (v61)
    goto LABEL_46;
  v85 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithCString_encoding_, v60, 4);
  if (v85)
  {
    v86 = v85;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v85);

LABEL_46:
    LOBYTE(v138[0]) = 5;
    v14 = v141;
    v87 = v120;
    KeyedEncodingContainer.encode(_:forKey:)();
    swift_bridgeObjectRelease();
    MEMORY[0x186DA9E78](v60, -1, -1);
    swift_unknownObjectRelease();
    outlined release of Locale.Components(v139);
    v16 = *(void (**)(char *, uint64_t))(v122 + 8);
    v18 = v87;
    goto LABEL_4;
  }
  v102 = type metadata accessor for EncodingError();
  swift_allocError();
  v104 = v103;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Any, EncodingError.Context));
  v104[3] = MEMORY[0x1E0DEA968];
  *v104 = 0;
  v104[1] = 0xE000000000000000;
  v105 = v141;
  v106 = v120;
  KeyedDecodingContainer.codingPath.getter();
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v102 - 8) + 104))(v104, *MEMORY[0x1E0DEC4B0], v102);
  swift_willThrow();
  MEMORY[0x186DA9E78](v60, -1, -1);
  swift_unknownObjectRelease();
  outlined release of Locale.Components(v139);
  (*(void (**)(char *, uint64_t))(v122 + 8))(v106, v105);
}

double Locale.init(identifier:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  os_unfair_lock_s *v7;
  double result;
  __int128 v9;

  if (one-time initialization token for cache != -1)
    swift_once();
  v6 = static LocaleCache.cache + 16;
  v7 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  closure #1 in LocaleCache.fixed(_:)(v6, a1, a2, &v9);
  os_unfair_lock_unlock(v7);
  swift_bridgeObjectRelease();
  swift_release_n();
  result = *(double *)&v9;
  *a3 = v9;
  return result;
}

uint64_t closure #1 in LocaleCache.fixed(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v4;
  char v5;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t result;
  __int128 v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  void *v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  _QWORD *v42;
  int64_t v43;
  unint64_t v44;
  int64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  void *__src;
  int64_t v52;
  _OWORD *v53;
  __int128 v54;
  uint64_t v55;
  _QWORD v56[18];
  _OWORD v57[9];
  uint64_t v58;

  v10 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v10 + 16))
  {
    swift_bridgeObjectRetain();
    v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v12 & 1) != 0)
    {
      v54 = *(_OWORD *)(*(_QWORD *)(v10 + 56) + 16 * v11);
      swift_unknownObjectRetain();
      result = swift_bridgeObjectRelease();
      v14 = v54;
LABEL_52:
      *a4 = v14;
      return result;
    }
    swift_bridgeObjectRelease();
  }
  v53 = a4;
  v58 = v4;
  type metadata accessor for _LocaleICU();
  v55 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type _LocaleICU and conformance _LocaleICU, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleICU, (uint64_t)&protocol conformance descriptor for _LocaleICU);
  _s10Foundation17LocalePreferencesVSgWOi0_(v57);
  outlined init with take of LocalePreferences?((uint64_t)v57, (uint64_t)v56);
  swift_allocObject();
  swift_bridgeObjectRetain();
  v15 = _LocaleICU.init(identifier:prefs:)(a2, a3, (uint64_t)v56);
  swift_bridgeObjectRetain();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v56[0] = *(_QWORD *)(a1 + 32);
  v17 = v56[0];
  *(_QWORD *)(a1 + 32) = 0x8000000000000000;
  v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v20 = *(_QWORD *)(v17 + 16);
  v21 = (v18 & 1) == 0;
  v22 = v20 + v21;
  if (__OFADD__(v20, v21))
  {
    __break(1u);
    goto LABEL_14;
  }
  v5 = v18;
  if (*(_QWORD *)(v17 + 24) >= v22)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v23 = v17;
      v26 = v55;
      if ((v18 & 1) == 0)
        goto LABEL_49;
LABEL_12:
      v27 = (uint64_t *)(*(_QWORD *)(v23 + 56) + 16 * v19);
      swift_unknownObjectRelease();
      *v27 = v15;
      v27[1] = v26;
LABEL_51:
      *(_QWORD *)(a1 + 32) = v23;
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      *(_QWORD *)&v14 = v15;
      *((_QWORD *)&v14 + 1) = v26;
      a4 = v53;
      goto LABEL_52;
    }
LABEL_14:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, _LocaleProtocol>);
    v28 = static _DictionaryStorage.copy(original:)();
    v23 = v28;
    if (*(_QWORD *)(v17 + 16))
    {
      v29 = (void *)(v28 + 64);
      v30 = (unint64_t)((1 << *(_BYTE *)(v23 + 32)) + 63) >> 6;
      __src = (void *)(v17 + 64);
      if (v23 != v17 || (unint64_t)v29 >= v17 + 64 + 8 * v30)
        memmove(v29, __src, 8 * v30);
      v31 = 0;
      *(_QWORD *)(v23 + 16) = *(_QWORD *)(v17 + 16);
      v32 = 1 << *(_BYTE *)(v17 + 32);
      v33 = -1;
      if (v32 < 64)
        v33 = ~(-1 << v32);
      v34 = v33 & *(_QWORD *)(v17 + 64);
      v52 = (unint64_t)(v32 + 63) >> 6;
      while (1)
      {
        if (v34)
        {
          v35 = __clz(__rbit64(v34));
          v34 &= v34 - 1;
          v36 = v35 | (v31 << 6);
        }
        else
        {
          v43 = v31 + 1;
          if (__OFADD__(v31, 1))
            goto LABEL_54;
          if (v43 >= v52)
            break;
          v44 = *((_QWORD *)__src + v43);
          ++v31;
          if (!v44)
          {
            v31 = v43 + 1;
            if (v43 + 1 >= v52)
              break;
            v44 = *((_QWORD *)__src + v31);
            if (!v44)
            {
              v31 = v43 + 2;
              if (v43 + 2 >= v52)
                break;
              v44 = *((_QWORD *)__src + v31);
              if (!v44)
              {
                v31 = v43 + 3;
                if (v43 + 3 >= v52)
                  break;
                v44 = *((_QWORD *)__src + v31);
                if (!v44)
                {
                  v31 = v43 + 4;
                  if (v43 + 4 >= v52)
                    break;
                  v44 = *((_QWORD *)__src + v31);
                  if (!v44)
                  {
                    v31 = v43 + 5;
                    if (v43 + 5 >= v52)
                      break;
                    v44 = *((_QWORD *)__src + v31);
                    if (!v44)
                    {
                      v31 = v43 + 6;
                      if (v43 + 6 >= v52)
                        break;
                      v44 = *((_QWORD *)__src + v31);
                      if (!v44)
                      {
                        v31 = v43 + 7;
                        if (v43 + 7 >= v52)
                          break;
                        v44 = *((_QWORD *)__src + v31);
                        if (!v44)
                        {
                          v45 = v43 + 8;
                          if (v45 >= v52)
                            break;
                          v44 = *((_QWORD *)__src + v45);
                          if (!v44)
                          {
                            while (1)
                            {
                              v31 = v45 + 1;
                              if (__OFADD__(v45, 1))
                                goto LABEL_55;
                              if (v31 >= v52)
                                goto LABEL_48;
                              v44 = *((_QWORD *)__src + v31);
                              ++v45;
                              if (v44)
                                goto LABEL_47;
                            }
                          }
                          v31 = v45;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_47:
          v34 = (v44 - 1) & v44;
          v36 = __clz(__rbit64(v44)) + (v31 << 6);
        }
        v37 = 16 * v36;
        v38 = (uint64_t *)(*(_QWORD *)(v17 + 48) + v37);
        v40 = *v38;
        v39 = v38[1];
        v41 = *(_OWORD *)(*(_QWORD *)(v17 + 56) + v37);
        v42 = (_QWORD *)(*(_QWORD *)(v23 + 48) + v37);
        *v42 = v40;
        v42[1] = v39;
        *(_OWORD *)(*(_QWORD *)(v23 + 56) + v37) = v41;
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
      }
    }
LABEL_48:
    swift_bridgeObjectRelease();
    v26 = v55;
    if ((v5 & 1) == 0)
      goto LABEL_49;
    goto LABEL_12;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v22, isUniquelyReferenced_nonNull_native);
  v23 = v56[0];
  v24 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v5 & 1) != (v25 & 1))
    goto LABEL_56;
  v19 = v24;
  v26 = v55;
  if ((v5 & 1) != 0)
    goto LABEL_12;
LABEL_49:
  *(_QWORD *)(v23 + 8 * (v19 >> 6) + 64) |= 1 << v19;
  v46 = (uint64_t *)(*(_QWORD *)(v23 + 48) + 16 * v19);
  *v46 = a2;
  v46[1] = a3;
  v47 = (uint64_t *)(*(_QWORD *)(v23 + 56) + 16 * v19);
  *v47 = v15;
  v47[1] = v26;
  v48 = *(_QWORD *)(v23 + 16);
  v49 = __OFADD__(v48, 1);
  v50 = v48 + 1;
  if (!v49)
  {
    *(_QWORD *)(v23 + 16) = v50;
    swift_bridgeObjectRetain();
    goto LABEL_51;
  }
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type LocalizedStringResource.CodingKeys and conformance LocalizedStringResource.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LocalizedStringResource.CodingKeys and conformance LocalizedStringResource.CodingKeys;
  if (!lazy protocol witness table cache variable for type LocalizedStringResource.CodingKeys and conformance LocalizedStringResource.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for LocalizedStringResource.CodingKeys, &unk_1E0F25040);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalizedStringResource.CodingKeys and conformance LocalizedStringResource.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LocalizedStringResource.CodingKeys and conformance LocalizedStringResource.CodingKeys;
  if (!lazy protocol witness table cache variable for type LocalizedStringResource.CodingKeys and conformance LocalizedStringResource.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for LocalizedStringResource.CodingKeys, &unk_1E0F25040);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalizedStringResource.CodingKeys and conformance LocalizedStringResource.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LocalizedStringResource.CodingKeys and conformance LocalizedStringResource.CodingKeys;
  if (!lazy protocol witness table cache variable for type LocalizedStringResource.CodingKeys and conformance LocalizedStringResource.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for LocalizedStringResource.CodingKeys, &unk_1E0F25040);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalizedStringResource.CodingKeys and conformance LocalizedStringResource.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LocalizedStringResource.CodingKeys and conformance LocalizedStringResource.CodingKeys;
  if (!lazy protocol witness table cache variable for type LocalizedStringResource.CodingKeys and conformance LocalizedStringResource.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for LocalizedStringResource.CodingKeys, &unk_1E0F25040);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalizedStringResource.CodingKeys and conformance LocalizedStringResource.CodingKeys);
  }
  return result;
}

_QWORD *Locale.Components.applyPreferencesOverride(_:)(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  void (*v4)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v5;
  void (*v6)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  void (*v10)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  v2 = result[1];
  if (*(_BYTE *)(v1 + 201) == 4)
  {
    ObjectType = swift_getObjectType();
    v4 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v2 + 424);
    swift_unknownObjectRetain();
    v4(&v11, ObjectType, v2);
    result = (_QWORD *)swift_unknownObjectRelease();
    if (v11 != 4)
      *(_BYTE *)(v1 + 201) = v11;
  }
  if (!*(_QWORD *)(v1 + 216))
  {
    v5 = swift_getObjectType();
    v6 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v2 + 448);
    swift_unknownObjectRetain();
    v6(&v11, v5, v2);
    result = (_QWORD *)swift_unknownObjectRelease();
    v7 = v12;
    if (v12)
    {
      v8 = v13;
      *(_QWORD *)(v1 + 208) = v11;
      *(_QWORD *)(v1 + 216) = v7;
      *(_OWORD *)(v1 + 224) = v8;
    }
  }
  if (*(_BYTE *)(v1 + 200) == 7)
  {
    v9 = swift_getObjectType();
    v10 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v2 + 200);
    swift_unknownObjectRetain();
    v10(&v14, v9, v2);
    swift_unknownObjectRelease();
    result = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t *, uint64_t, uint64_t))(v2 + 432))(&v11, &v14, v9, v2);
    if (v11 != 7)
      *(_BYTE *)(v1 + 200) = v11;
  }
  return result;
}

uint64_t _LocaleICU.forceMeasurementSystem.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[18];
  _BYTE v9[144];
  _BYTE v10[136];
  char v11;

  outlined init with take of LocalePreferences?(v1 + 40, (uint64_t)v9);
  outlined init with take of LocalePreferences?((uint64_t)v9, (uint64_t)v10);
  result = _s10Foundation17LocalePreferencesVSgWOg((uint64_t)v10);
  if ((_DWORD)result == 1)
    goto LABEL_11;
  if (v10[0] != 2)
  {
    if ((v10[0] & 1) == 0)
    {
      outlined init with take of LocalePreferences?((uint64_t)v9, (uint64_t)v8);
      outlined retain of LocalePreferences(v8);
      if (one-time initialization token for us != -1)
        swift_once();
      v4 = &static Locale.MeasurementSystem.us;
      goto LABEL_19;
    }
    if (v11 != 2)
    {
      if ((v11 & 1) != 0)
      {
        outlined init with take of LocalePreferences?((uint64_t)v9, (uint64_t)v8);
        outlined retain of LocalePreferences(v8);
        if (one-time initialization token for uk != -1)
          swift_once();
        v4 = &static Locale.MeasurementSystem.uk;
        goto LABEL_19;
      }
      goto LABEL_13;
    }
LABEL_11:
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    return result;
  }
  if (v11 == 2 || (v11 & 1) != 0)
    goto LABEL_11;
LABEL_13:
  outlined init with take of LocalePreferences?((uint64_t)v9, (uint64_t)v8);
  outlined retain of LocalePreferences(v8);
  if (one-time initialization token for metric != -1)
    swift_once();
  v4 = &static Locale.MeasurementSystem.metric;
LABEL_19:
  v5 = v4[1];
  v6 = v4[2];
  v7 = v4[3];
  *(_QWORD *)a1 = *v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return outlined retain of LocalePreferences?((uint64_t)v9, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
}

uint64_t _LocaleICU.forceFirstWeekday(_:)@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char v7;
  _BYTE v8[144];
  _BYTE v9[48];
  uint64_t v10;

  v4 = *a1;
  outlined init with take of LocalePreferences?(v2 + 40, (uint64_t)v8);
  outlined init with take of LocalePreferences?((uint64_t)v8, (uint64_t)v9);
  result = _s10Foundation17LocalePreferencesVSgWOg((uint64_t)v9);
  if ((_DWORD)result != 1
    && (v6 = v10) != 0
    && *(_QWORD *)(v10 + 16)
    && (result = specialized __RawDictionaryStorage.find<A>(_:)(v4), (v7 & 1) != 0))
  {
    result = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * result);
    if (result < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else if (result <= 0x7FFFFFFF)
    {
      return Locale.Weekday.init(_:)(result, a2);
    }
    __break(1u);
  }
  else
  {
    *a2 = 7;
  }
  return result;
}

uint64_t _LocaleICU.forceHourCycle.getter@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  char v4;
  _BYTE v5[144];
  _BYTE v6[152];

  outlined init with take of LocalePreferences?(v1 + 40, (uint64_t)v5);
  outlined init with take of LocalePreferences?((uint64_t)v5, (uint64_t)v6);
  result = _s10Foundation17LocalePreferencesVSgWOg((uint64_t)v6);
  if ((_DWORD)result == 1)
  {
    v4 = 4;
  }
  else if ((v6[138] & 1) != 0)
  {
    v4 = 2;
  }
  else if ((v6[139] & 1) != 0)
  {
    v4 = 1;
  }
  else
  {
    v4 = 4;
  }
  *a1 = v4;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance _NSRange@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = specialized _NSRange.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t specialized _NSRange.init(from:)(_QWORD *a1)
{
  uint64_t v2;
  _BYTE v4[24];
  uint64_t v5;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v4, v5);
  v2 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v4, v5);
  dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v2;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AttributedString.Index(_QWORD *a1, _QWORD *a2)
{
  return (*a2 ^ *a1) < 0x400uLL;
}

unint64_t CFBasicHashGetCount(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD v4[5];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v1 = a1[2];
  if ((v1 & 0x380) == 0)
    return v1 >> 22;
  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __CFBasicHashGetCount_block_invoke;
  v4[3] = &unk_1E0F4E5F8;
  v4[4] = &v5;
  CFBasicHashApply(a1, (uint64_t)v4);
  v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1818F7F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void IndexPath.description.getter()
{
  __asm { BR              X11 }
}

uint64_t sub_1818F8194()
{
  Swift::String v0;
  Swift::String v1;

  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 93;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 91;
}

uint64_t UUID.init(uuid:)@<X0>(uint64_t result@<X0>, char a2@<W1>, char a3@<W2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, char a7@<W6>, char a8@<W7>, uint64_t a9@<X8>, int a10, int a11)
{
  *(_BYTE *)a9 = result;
  *(_BYTE *)(a9 + 1) = a2;
  *(_BYTE *)(a9 + 2) = a3;
  *(_BYTE *)(a9 + 3) = a4;
  *(_BYTE *)(a9 + 4) = a5;
  *(_BYTE *)(a9 + 5) = a6;
  *(_BYTE *)(a9 + 6) = a7;
  *(_BYTE *)(a9 + 7) = a8;
  *(_DWORD *)(a9 + 8) = a10;
  *(_DWORD *)(a9 + 12) = a11;
  return result;
}

uint64_t DateComponents.quarter.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 208);
}

uint64_t DateComponents.era.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t DateComponents.weekdayOrdinal.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 192);
}

uint64_t DateComponents.weekOfMonth.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 240);
}

uint64_t DateComponents.nanosecond.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 160);
}

ValueMetadata *type metadata accessor for AttributedString._InternalRun()
{
  return &type metadata for AttributedString._InternalRun;
}

id URL.hasDirectoryPath.getter()
{
  void **v0;
  void *v1;
  Swift::String v2;
  __int16 v3;

  v1 = *v0;
  if (!_foundation_swift_url_feature_enabled())
    return objc_msgSend(v1, sel_hasDirectoryPath);
  v2 = URL.path(percentEncoded:)(1);
  v3 = specialized BidirectionalCollection.last.getter(v2._countAndFlagsBits, (unint64_t)v2._object);
  swift_bridgeObjectRelease();
  return (id)((v3 & 0x1FF) == 47);
}

uint64_t URL.pathExtension.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;
  Swift::String v5;
  Swift::Int countAndFlagsBits;
  unint64_t object;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  char v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = *(void **)v0;
  v1 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  if (_foundation_swift_url_feature_enabled())
  {
    v24 = (uint64_t)v2;
    v25 = v1;
    v26 = v3;
    swift_retain();
    v4 = v2;
    swift_retain();
    v5 = URL.path(percentEncoded:)(1);
    countAndFlagsBits = v5._countAndFlagsBits;
    v23 = v5;
    swift_bridgeObjectRetain();
    if (String.count.getter() < 2)
    {
      object = (unint64_t)v5._object;
    }
    else
    {
      object = (unint64_t)v5._object;
      if ((specialized BidirectionalCollection.last.getter(v5._countAndFlagsBits, (unint64_t)v5._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        countAndFlagsBits = v23._countAndFlagsBits;
        object = (unint64_t)v23._object;
      }
    }
    v24 = Set.init(minimumCapacity:)();
    specialized Set._Variant.insert(_:)(&v22, 0x2FuLL);
    v11 = v24;
    v12 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if ((object & 0x2000000000000000) != 0)
      v13 = HIBYTE(object) & 0xF;
    else
      v13 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (v13)
    {
      swift_bridgeObjectRetain();
      if ((object & 0x1000000000000000) != 0)
      {
        v16 = 0;
        v17 = 1;
      }
      else
      {
        if ((object & 0x2000000000000000) != 0)
        {
          v24 = countAndFlagsBits;
          v25 = object & 0xFFFFFFFFFFFFFFLL;
          v14 = &v24;
          v15 = HIBYTE(object) & 0xF;
        }
        else
        {
          if ((countAndFlagsBits & 0x1000000000000000) != 0)
          {
            v14 = (uint64_t *)((object & 0xFFFFFFFFFFFFFFFLL) + 32);
          }
          else
          {
            v14 = (uint64_t *)_StringObject.sharedUTF8.getter();
            v12 = v21;
          }
          v15 = v12;
        }
        v16 = specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)((uint64_t)v14, v15, v11, (uint64_t (*)(_QWORD))specialized StringProtocol.hexToAscii(_:));
        v17 = v18;
      }
      if (v17 == 1)
      {
        swift_bridgeObjectRetain();
        v16 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(countAndFlagsBits, object, v11);
        v17 = v19;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        if (v17)
          goto LABEL_23;
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v17)
          goto LABEL_23;
      }
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v16 = 0;
      v17 = 0xE000000000000000;
      goto LABEL_26;
    }
    swift_bridgeObjectRelease();
    v16 = 0;
    v17 = 0xE000000000000000;
LABEL_23:
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_26:
    v10 = String.pathExtension.getter(v16, v17);
    swift_bridgeObjectRelease();
    return v10;
  }
  v8 = objc_msgSend(v2, sel_pathExtension);
  if (!v8)
    return 0;
  v9 = v8;
  v10 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v8);

  return v10;
}

char *static String.localizedStringWithFormat(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;

  if (one-time initialization token for cache != -1)
    swift_once();
  v4 = LocaleCache.current.getter();
  MEMORY[0x1E0C80A78](v4);
  v5 = specialized withVaList<A>(_:_:)(a3, (void (*)(uint64_t *__return_ptr, uint64_t))partial apply for closure #1 in String.init(format:locale:arguments:));
  swift_unknownObjectRelease();
  return v5;
}

char *specialized withVaList<A>(_:_:)(uint64_t a1, void (*a2)(uint64_t *__return_ptr, uint64_t))
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  type metadata accessor for __VaListBuilder();
  v3 = (_QWORD *)swift_allocObject();
  v3[2] = 8;
  v3[3] = 0;
  v4 = v3 + 3;
  v3[4] = 0;
  v3[5] = 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_25:
    v23 = __VaListBuilder.va_list()();
    a2(&v25, v23);
    swift_release();
    return (char *)v25;
  }
  v6 = 0;
  v7 = a1 + 32;
  while (1)
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v7 + 40 * v6, (uint64_t)&v25);
    v8 = v26;
    v9 = v27;
    __swift_project_boxed_opaque_existential_1(&v25, v26);
    result = (char *)MEMORY[0x186DA5FA8](v8, v9);
    v11 = *v4;
    v12 = *((_QWORD *)result + 2);
    v13 = __OFADD__(*v4, v12);
    v14 = *v4 + v12;
    if (v13)
      break;
    v15 = result;
    v16 = v3[4];
    if (v16 >= v14)
      goto LABEL_18;
    if (v16 + 0x4000000000000000 < 0)
      goto LABEL_28;
    v17 = (char *)v3[5];
    if (2 * v16 > v14)
      v14 = 2 * v16;
    v3[4] = v14;
    if ((unint64_t)(v14 - 0x1000000000000000) >> 61 != 7)
      goto LABEL_29;
    result = (char *)swift_slowAlloc();
    v3[5] = result;
    if (v17)
    {
      if (result != v17 || result >= &v17[8 * v11])
        memmove(result, v17, 8 * v11);
      __VaListBuilder.deallocStorage(wordCount:storage:)();
LABEL_18:
      result = (char *)v3[5];
    }
    if (!result)
      goto LABEL_30;
    v19 = *((_QWORD *)v15 + 2);
    if (v19)
    {
      v20 = (uint64_t *)(v15 + 32);
      v21 = *v4;
      while (1)
      {
        v22 = *v20++;
        *(_QWORD *)&result[8 * v21] = v22;
        v21 = *v4 + 1;
        if (__OFADD__(*v4, 1))
          break;
        *v4 = v21;
        if (!--v19)
          goto LABEL_3;
      }
      __break(1u);
      break;
    }
LABEL_3:
    ++v6;
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v25);
    if (v6 == v5)
      goto LABEL_25;
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

void partial apply for closure #1 in String.init(format:locale:arguments:)(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;

  closure #1 in String.init(format:locale:arguments:)(a1, v2[2], v2[3], v2[4], v2[5], a2);
}

void closure #1 in String.init(format:locale:arguments:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;

  if (a4)
  {
    *((_QWORD *)&v15 + 1) = &type metadata for Locale;
    *(_QWORD *)&v14 = a4;
    *((_QWORD *)&v14 + 1) = a5;
  }
  else
  {
    v14 = 0u;
    v15 = 0u;
  }
  type metadata accessor for NSString();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  v10 = NSString.__allocating_init(format:locale:arguments:)(a2, a3, &v14, a1);
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v13 = v12;

  *a6 = v11;
  a6[1] = v13;
}

CFTypeRef _NSAttributedStringDescriptionWithLocaleFunc(void *a1, uint64_t a2)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    a1 = (void *)objc_msgSend(a1, "string");
  return _NSDescriptionWithLocaleFunc(a1, a2);
}

uint64_t URLComponents.string.getter()
{
  _OWORD *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  _OWORD v7[8];
  _OWORD v8[2];
  _BYTE v9[8];
  uint64_t v10;

  v1 = v0[7];
  v7[6] = v0[6];
  v7[7] = v1;
  v8[0] = v0[8];
  *(_OWORD *)((char *)v8 + 10) = *(_OWORD *)((char *)v0 + 138);
  v2 = v0[3];
  v7[2] = v0[2];
  v7[3] = v2;
  v3 = v0[5];
  v7[4] = v0[4];
  v7[5] = v3;
  v4 = v0[1];
  v7[0] = *v0;
  v7[1] = v4;
  if ((BYTE8(v7[0]) & 1) == 0)
    return URLComponents._URLComponents.computedString.getter();
  outlined init with take of LocalePreferences?((uint64_t)v7, (uint64_t)v9, &demangling cache variable for type metadata for URLParseInfo?);
  outlined init with take of LocalePreferences?((uint64_t)v9, (uint64_t)&v10, &demangling cache variable for type metadata for URLParseInfo?);
  if (!v10)
    return 0;
  v5 = *(_QWORD *)(v10 + 16);
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t destroy for NSObject.KeyValueObservingPublisher(id *a1)
{

  return swift_release();
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable () -> ()(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

ValueMetadata *type metadata accessor for NSNotificationCenter.Notifications.Iterator()
{
  return &type metadata for NSNotificationCenter.Notifications.Iterator;
}

_QWORD *initializeBufferWithCopyOfBuffer for NSObject.KeyValueObservingPublisher(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  a1[2] = *(_QWORD *)(a2 + 16);
  v5 = v3;
  swift_retain();
  return a1;
}

NSSet protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Set<A>()
{
  return Set._bridgeToObjectiveC()();
}

void base witness table accessor for Cancellable in Notification.Subscription<A>()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t _convertNSErrorToError(_:)(void *a1)
{
  uint64_t v2;
  id v3;
  id v4;

  if (a1)
  {
    v2 = (uint64_t)a1;
  }
  else
  {
    if (one-time initialization token for _nilObjCError != -1)
      swift_once();
    v2 = _nilObjCError;
    v3 = (id)_nilObjCError;
  }
  v4 = a1;
  return v2;
}

ValueMetadata *type metadata accessor for NumberFormatStyleConfiguration.Precision()
{
  return &type metadata for NumberFormatStyleConfiguration.Precision;
}

_QWORD *Calendar.locale.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t ObjectType;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  __int128 v10;
  _QWORD v11[2];

  v3 = *(_QWORD *)(v1 + 8);
  ObjectType = swift_getObjectType();
  result = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v3 + 32))(v11, ObjectType, v3);
  v6 = v11[0];
  if (v11[0])
  {
    v7 = v11[1];
  }
  else
  {
    if (one-time initialization token for cache != -1)
      swift_once();
    v8 = static LocaleCache.cache + 16;
    v9 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
    swift_retain_n();
    os_unfair_lock_lock(v9);
    closure #1 in LocaleCache.fixed(_:)(v8, 0, 0xE000000000000000, &v10);
    os_unfair_lock_unlock(v9);
    result = (_QWORD *)swift_release_n();
    v7 = *((_QWORD *)&v10 + 1);
    v6 = v10;
  }
  *a1 = v6;
  a1[1] = v7;
  return result;
}

uint64_t _NSScanDoubleFromString(void *a1, void *a2, double *a3, unint64_t *a4, void *a5)
{
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  size_t v21;
  char *v22;
  char *v23;
  __int16 v24;
  int32_t v25;
  uint64_t result;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  int v39;
  __int16 v40;
  char *v41;
  _OWORD v42[3];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _OWORD v46[4];
  __int128 v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v47 = 0u;
  memset(v46, 0, sizeof(v46));
  v44 = 0u;
  v45 = 0u;
  v41 = (char *)&v43 + 15;
  v9 = (void *)objc_msgSend(a5, "objectForKey:", *MEMORY[0x1E0C997C8]);
  if (!v9)
  {
    v9 = (void *)objc_msgSend(a5, "objectForKey:", CFSTR("NSDecimalSeparator"));
    if (!v9)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        v9 = 0;
        goto LABEL_9;
      }
      v9 = (void *)objc_msgSend(a5, "decimalSeparator");
      if (!v9)
        goto LABEL_9;
    }
  }
  if (!objc_msgSend(v9, "length"))
  {
LABEL_9:
    v39 = 46;
    goto LABEL_10;
  }
  v39 = objc_msgSend(v9, "characterAtIndex:", 0);
LABEL_10:
  v10 = *a4;
  v11 = objc_msgSend(a1, "length");
  *((_QWORD *)&v45 + 1) = v11;
  *(_QWORD *)&v46[0] = v10;
  *(_QWORD *)&v45 = a1;
  if (v11 <= v10)
  {
    *(_QWORD *)&v44 = 0;
    v13 = 0xFFFF;
  }
  else
  {
    if (v11 - v10 >= 0x20)
      v12 = 32;
    else
      v12 = v11 - v10;
    *(_QWORD *)&v44 = v12;
    objc_msgSend(a1, sel_getUid("getCharacters:range:"), (char *)v46 + 8, v10, v12);
    v13 = WORD4(v46[0]);
  }
  WORD4(v47) = v13;
  v14 = 1;
  *((_QWORD *)&v44 + 1) = 1;
  if (a2)
  {
    if (objc_msgSend(a2, "characterIsMember:"))
    {
      do
      {
        v15 = *((_QWORD *)&v44 + 1);
        if (*((_QWORD *)&v44 + 1) - 1 >= (unint64_t)v44)
          break;
        if (*((_QWORD *)&v44 + 1) >= (unint64_t)v44)
        {
          v17 = *(_QWORD *)&v46[0] + v44;
          if (*((_QWORD *)&v45 + 1) > *(_QWORD *)&v46[0] + (_QWORD)v44)
          {
            if (*((_QWORD *)&v45 + 1) - (*(_QWORD *)&v46[0] + (_QWORD)v44) >= 0x20uLL)
              v18 = 32;
            else
              v18 = *((_QWORD *)&v45 + 1) - (*(_QWORD *)&v46[0] + v44);
            *(_QWORD *)&v46[0] += v44;
            *(_QWORD *)&v44 = v18;
            objc_msgSend((id)v45, sel_getUid("getCharacters:range:"), (char *)v46 + 8, v17, v18);
            WORD4(v47) = WORD4(v46[0]);
            *((_QWORD *)&v44 + 1) = 1;
            continue;
          }
          *((_QWORD *)&v44 + 1) = v44 + 1;
          v16 = -1;
        }
        else
        {
          ++*((_QWORD *)&v44 + 1);
          v16 = *((_WORD *)v46 + v15 + 4);
        }
        WORD4(v47) = v16;
      }
      while ((objc_msgSend(a2, "characterIsMember:") & 1) != 0);
    }
    v13 = WORD4(v47);
    v14 = *((_QWORD *)&v44 + 1);
  }
  v19 = *a4;
  v40 = v13;
  if (v13 <= 0x7F && (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v13 + 60) & 0x4000) != 0)
    return 0;
  v35 = *(_QWORD *)&v46[0];
  v36 = v14;
  v37 = a4;
  v20 = 0;
  v21 = 0;
  v34 = ~v19;
  v22 = (char *)v42;
  v23 = (char *)v42;
  while (1)
  {
    LOBYTE(v24) = v13;
    if ((unsigned __int16)v13 <= 0x7Fu)
    {
      if (((__NSNumberSet[(unint64_t)(unsigned __int16)v13 >> 3] >> (v13 & 7)) & 1) != 0)
        goto LABEL_42;
      if (!_NSCheckDecimalSeparator((uint64_t *)&v44, &v40, v39, v9))
        goto LABEL_58;
      goto LABEL_40;
    }
    v25 = u_charDigitValue((unsigned __int16)v13);
    if (v25 == -1)
      break;
    v24 = v25 + 48;
LABEL_41:
    v40 = v24;
LABEL_42:
    if (v22 >= v41)
    {
      v21 += 128;
      if (v20)
      {
        result = MEMORY[0x186DA80E4](v20, v21, 2752068208, &__block_literal_global_45);
        if (!result)
          return result;
        v23 = (char *)result;
        LOBYTE(v24) = v40;
      }
      else
      {
        v23 = (char *)malloc_type_malloc(v21, 0xA5222156uLL);
        v27 = v43;
        v29 = v42[0];
        v28 = v42[1];
        *((_OWORD *)v23 + 2) = v42[2];
        *((_OWORD *)v23 + 3) = v27;
        *(_OWORD *)v23 = v29;
        *((_OWORD *)v23 + 1) = v28;
        v20 = (char *)v42;
      }
      v22 = &v23[v22 - v20];
      v41 = &v23[v21 - 1];
      v20 = v23;
    }
    *v22++ = v24;
    v30 = *((_QWORD *)&v44 + 1);
    if (*((_QWORD *)&v44 + 1) < (unint64_t)v44)
    {
      ++*((_QWORD *)&v44 + 1);
      LOWORD(v13) = *((_WORD *)v46 + v30 + 4);
LABEL_56:
      WORD4(v47) = v13;
      goto LABEL_57;
    }
    v31 = *(_QWORD *)&v46[0] + v44;
    if (*((_QWORD *)&v45 + 1) <= *(_QWORD *)&v46[0] + (_QWORD)v44)
    {
      *((_QWORD *)&v44 + 1) = v44 + 1;
      LOWORD(v13) = -1;
      goto LABEL_56;
    }
    if (*((_QWORD *)&v45 + 1) - (*(_QWORD *)&v46[0] + (_QWORD)v44) >= 0x20uLL)
      v32 = 32;
    else
      v32 = *((_QWORD *)&v45 + 1) - (*(_QWORD *)&v46[0] + v44);
    *(_QWORD *)&v46[0] += v44;
    *(_QWORD *)&v44 = v32;
    objc_msgSend((id)v45, sel_getUid("getCharacters:range:"), (char *)v46 + 8, v31, v32);
    LOWORD(v13) = WORD4(v46[0]);
    WORD4(v47) = WORD4(v46[0]);
    *((_QWORD *)&v44 + 1) = 1;
LABEL_57:
    v40 = v13;
  }
  if ((_NSCheckDecimalSeparator((uint64_t *)&v44, &v40, v39, v9) & 1) != 0)
  {
LABEL_40:
    v24 = 46;
    goto LABEL_41;
  }
LABEL_58:
  *v22 = 0;
  v33 = strtod_l(v23, &v41, 0);
  if (v20)
    free(v20);
  if (v41 == v23)
    return 0;
  *v37 += (unint64_t)&v41[v36 + v35 + v34 - (_QWORD)v23];
  if (a3)
    *a3 = v33;
  return 1;
}

uint64_t _NSCheckDecimalSeparator(uint64_t *a1, _WORD *a2, int a3, void *a4)
{
  unint64_t v8;
  int v9;
  BOOL v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;

  if (a4)
    v8 = objc_msgSend(a4, "length");
  else
    v8 = 1;
  v9 = (unsigned __int16)*a2;
  v10 = v9 == a3 && v8 == 1;
  if (v10)
    return 1;
  result = 0;
  if (a4 && v9 == a3)
  {
    if (v8 >= 2)
    {
      v12 = 2;
      while (1)
      {
        v13 = *a1;
        v14 = a1[1];
        if (v14 >= *a1)
        {
          v16 = a1[3];
          v17 = a1[4] + v13;
          if (v16 > v17)
          {
            a1[4] = v17;
            if (v16 - v17 >= 0x20)
              v18 = 32;
            else
              v18 = v16 - v17;
            *a1 = v18;
            objc_msgSend((id)a1[2], sel_getUid("getCharacters:range:"), a1 + 5, v17, v18);
            v15 = *((unsigned __int16 *)a1 + 20);
            *((_WORD *)a1 + 52) = v15;
            a1[1] = 1;
            goto LABEL_21;
          }
          a1[1] = v13 + 1;
          v15 = 0xFFFF;
        }
        else
        {
          a1[1] = v14 + 1;
          v15 = *((unsigned __int16 *)a1 + v14 + 20);
        }
        *((_WORD *)a1 + 52) = v15;
LABEL_21:
        *a2 = v15;
        v10 = v15 == objc_msgSend(a4, "characterAtIndex:", v12 - 1);
        result = v10;
        if (!v10 || v8 == v12++)
          return result;
      }
    }
    return 1;
  }
  return result;
}

void _NSCStringToDecimal(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  NSString *v6;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v6 = -[NSString initWithCString:encoding:]([NSString alloc], "initWithCString:encoding:", a1, 4);
  v7[0] = 0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  _NSStringToDecimal(v6, v7, a3);
  *a2 = a1 + v7[0];

}

void NSDecimalCopy(NSDecimal *destination, const NSDecimal *source)
{
  int v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  unsigned __int16 *mantissa;
  unsigned __int16 *v9;
  unsigned __int16 v10;

  v2 = *(_DWORD *)destination;
  *(_DWORD *)destination &= 0x3FFFu;
  v3 = *(_DWORD *)source & 0x1000 | v2 & 0x2FFF;
  *(_DWORD *)destination = v3;
  v4 = v3 & 0xFFFFF0FF;
  v5 = *(_DWORD *)source & 0xF00;
  *(_DWORD *)destination = v4 | v5;
  v6 = (v4 | v5) & 0x3F00 | *(_BYTE *)source;
  *(_DWORD *)destination = v6;
  *(_DWORD *)destination = *(_DWORD *)source & 0x2000 | v6 & 0x1FFF;
  if (v5)
  {
    LODWORD(v7) = v5 >> 8;
    if (v7 <= 1)
      v7 = 1;
    else
      v7 = v7;
    mantissa = destination->_mantissa;
    v9 = source->_mantissa;
    do
    {
      v10 = *v9++;
      *mantissa++ = v10;
      --v7;
    }
    while (v7);
  }
}

void NSDecimalCompact(NSDecimal *number)
{
  NSDecimal v2;

  v2 = *number;
  NSDecimal.compact()();
  *number = v2;
}

void sub_1818FBCCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  _Block_object_dispose(&a36, 8);
  _Unwind_Resume(a1);
}

uint64_t forEachUnit(uint64_t result, uint64_t a2)
{
  __int16 v3;

  v3 = result;
  if ((result & 4) != 0)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, 4);
    if ((v3 & 8) == 0)
    {
LABEL_3:
      if ((v3 & 0x1000) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((result & 8) == 0)
  {
    goto LABEL_3;
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, 8);
  if ((v3 & 0x1000) == 0)
  {
LABEL_4:
    if ((v3 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, 4096);
  if ((v3 & 0x10) == 0)
  {
LABEL_5:
    if ((v3 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, 16);
  if ((v3 & 0x20) == 0)
  {
LABEL_6:
    if ((v3 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, 32);
  if ((v3 & 0x40) == 0)
  {
LABEL_7:
    if ((v3 & 0x80) == 0)
      return result;
    return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, 128);
  }
LABEL_14:
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, 64);
  if ((v3 & 0x80) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, 128);
  return result;
}

uint64_t icuUnitFromNSUnit(uint64_t a1)
{
  if (a1 <= 31)
  {
    switch(a1)
    {
      case 4:
        return 0;
      case 8:
        return 1;
      case 16:
        return 2;
      default:
        goto LABEL_17;
    }
  }
  else if (a1 > 127)
  {
    if (a1 == 128)
    {
      return 6;
    }
    else
    {
      if (a1 != 4096)
        goto LABEL_17;
      return 3;
    }
  }
  else
  {
    if (a1 != 32)
    {
      if (a1 == 64)
        return 5;
LABEL_17:
      abort();
    }
    return 4;
  }
}

uint64_t protocol witness for _CalendarProtocol.locale.getter in conformance _CalendarAutoupdating()
{
  os_unfair_lock_s *v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v4[2];

  if (one-time initialization token for cache != -1)
    swift_once();
  v0 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v0);
  closure #1 in CalendarCache.current.getter(v4);
  os_unfair_lock_unlock(v0);
  swift_release_n();
  v1 = v4[1];
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 32))(ObjectType, v1);
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for _CalendarProtocol.locale.getter in conformance _CalendarICU@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_OWORD *)(v1 + 104);
  return swift_unknownObjectRetain();
}

void sub_1818FC8D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t icuStyleFromNSStyle(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) >= 5)
    abort();
  return dword_18227E5D8[a1 - 1];
}

ValueMetadata *type metadata accessor for _NSSwiftTimeZone.State()
{
  return &type metadata for _NSSwiftTimeZone.State;
}

ValueMetadata *type metadata accessor for TimeZoneCache.State()
{
  return &type metadata for TimeZoneCache.State;
}

ValueMetadata *type metadata accessor for _TimeZoneICU.State()
{
  return &type metadata for _TimeZoneICU.State;
}

CFCharacterSetRef static CharacterSet.nonBaseCharacters.getter@<X0>(CFCharacterSetRef *a1@<X8>)
{
  CFCharacterSetRef result;
  CFCharacterSetRef v3;

  result = CFCharacterSetGetPredefined(kCFCharacterSetNonBase);
  if (result)
  {
    v3 = result;
    type metadata accessor for __CharacterSetStorage();
    result = (CFCharacterSetRef)swift_allocObject();
    *((_QWORD *)result + 2) = v3;
    *((_BYTE *)result + 24) = 0;
    *a1 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

CFCharacterSetRef static CharacterSet.decomposables.getter@<X0>(CFCharacterSetRef *a1@<X8>)
{
  CFCharacterSetRef result;
  CFCharacterSetRef v3;

  result = CFCharacterSetGetPredefined(kCFCharacterSetDecomposable);
  if (result)
  {
    v3 = result;
    type metadata accessor for __CharacterSetStorage();
    result = (CFCharacterSetRef)swift_allocObject();
    *((_QWORD *)result + 2) = v3;
    *((_BYTE *)result + 24) = 0;
    *a1 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

ValueMetadata *type metadata accessor for LocalizedStringResource.BundleDescription()
{
  return &type metadata for LocalizedStringResource.BundleDescription;
}

uint64_t outlined destroy of ICUNumberFormatter.Signature(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

__n128 FloatingPointFormatStyle.Percent.init(locale:)@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __n128 *a5@<X8>)
{
  char *v7;
  int *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  __n128 result;
  __n128 v13;

  v7 = (char *)a5 + *(int *)(type metadata accessor for FloatingPointFormatStyle.Percent(0, a2, a3, a4) + 36);
  v8 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  v9 = &v7[v8[9]];
  v10 = type metadata accessor for FloatingPointRoundingRule();
  v13 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  *(_QWORD *)v7 = 0x4059000000000000;
  v7[8] = 0;
  *((_QWORD *)v7 + 2) = 0;
  *((_QWORD *)v7 + 3) = 0;
  *((_QWORD *)v7 + 4) = 0;
  *((_QWORD *)v7 + 5) = 0x1FFFFFFFELL;
  *((_QWORD *)v7 + 7) = 0;
  *((_QWORD *)v7 + 8) = 0;
  *((_QWORD *)v7 + 6) = 0;
  *((_DWORD *)v7 + 18) = 131584;
  *((_WORD *)v7 + 38) = 512;
  v11 = &v7[v8[10]];
  *(_QWORD *)v11 = 0;
  v11[8] = -1;
  v7[v8[11]] = 3;
  result = v13;
  *a5 = v13;
  return result;
}

uint64_t type metadata accessor for FloatingPointFormatStyle.Percent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FloatingPointFormatStyle.Percent);
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  Swift::UInt64 v12;
  Swift::UInt64 v13;
  int v14;
  Swift::UInt v15;
  int v16;
  unsigned int v17;
  int v18;
  Swift::UInt v19;
  int *v20;
  uint64_t v21;
  int v22;
  Swift::UInt v23;
  Swift::UInt64 v24;
  Swift::UInt v25;
  uint64_t v26;
  Swift::UInt8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  Swift::UInt v54;
  Swift::UInt v55;
  Swift::UInt8 v56;
  Swift::UInt8 v57;
  Swift::UInt8 v58;
  Swift::Int v59;
  uint64_t (*v61)(_QWORD);
  uint64_t v62;
  _BYTE v63[144];
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  char v79;
  char v80;
  char v81;
  _BYTE v82[144];
  _BYTE v83[144];
  _BYTE v84[72];
  _BYTE v85[72];

  v5 = type metadata accessor for FloatingPointRoundingRule();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = v2;
  Hasher.init(_seed:)();
  if (*(_BYTE *)(a1 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v12 = *(_QWORD *)a1;
    Hasher._combine(_:)(1u);
    if ((v12 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v13 = v12;
    else
      v13 = 0;
    Hasher._combine(_:)(v13);
  }
  outlined init with take of LocalePreferences?(a1 + 16, (uint64_t)v85, &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  specialized Optional<A>.hash(into:)();
  v14 = *(unsigned __int8 *)(a1 + 73);
  if (v14 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v15 = v14 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v15);
  }
  v16 = *(unsigned __int16 *)(a1 + 74);
  v17 = v16 | (*(unsigned __int8 *)(a1 + 76) << 16);
  if (v16 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v17 & 1);
    Hasher._combine(_:)((v17 >> 8) & 1);
    Hasher._combine(_:)(HIWORD(v17) & 1);
  }
  v18 = *(unsigned __int8 *)(a1 + 77);
  if (v18 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v19 = v18 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v19);
  }
  v20 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  outlined init with copy of FloatingPointRoundingRule?(a1 + v20[9], (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  v21 = a1 + v20[10];
  v22 = *(unsigned __int8 *)(v21 + 8);
  if (v22 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v23 = *(_QWORD *)v21;
    Hasher._combine(_:)(1u);
    if ((v22 & 1) != 0)
    {
      Hasher._combine(_:)(1uLL);
      if ((v23 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v24 = v23;
      else
        v24 = 0;
      Hasher._combine(_:)(v24);
    }
    else
    {
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v23);
    }
  }
  v25 = *(unsigned __int8 *)(a1 + v20[11]);
  if (v25 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v25);
  }
  v26 = a2(0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?(a1 + *(int *)(v26 + 24), (uint64_t)v82, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v82, (uint64_t)v83, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v83) == 1)
  {
    Hasher._combine(_:)(0);
    goto LABEL_84;
  }
  outlined init with take of LocalePreferences?((uint64_t)v82, (uint64_t)&v64, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v64 == 2)
  {
    v27 = 0;
  }
  else
  {
    v27 = v64 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v27);
  v28 = v65;
  if (!v65)
  {
    Hasher._combine(_:)(0);
    outlined retain of LocalePreferences(&v64);
    v32 = &v64;
    goto LABEL_45;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v28 + 16));
  v29 = *(_QWORD *)(v28 + 16);
  if (!v29)
  {
    outlined init with take of LocalePreferences?((uint64_t)v82, (uint64_t)v63, &demangling cache variable for type metadata for LocalePreferences?);
    outlined retain of LocalePreferences?((uint64_t)v82, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
    v32 = (uint64_t *)v63;
LABEL_45:
    outlined retain of LocalePreferences(v32);
    if (!v66)
      goto LABEL_40;
    goto LABEL_46;
  }
  outlined retain of LocalePreferences?((uint64_t)v82, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v82, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v30 = v28 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v30 += 16;
    --v29;
  }
  while (v29);
  swift_bridgeObjectRelease();
  if (!v66)
  {
LABEL_40:
    Hasher._combine(_:)(0);
    if (!v67)
      goto LABEL_41;
LABEL_47:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v31 = v68;
    if (!v68)
      goto LABEL_42;
    goto LABEL_48;
  }
LABEL_46:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v67)
    goto LABEL_47;
LABEL_41:
  Hasher._combine(_:)(0);
  v31 = v68;
  if (!v68)
  {
LABEL_42:
    Hasher._combine(_:)(0);
    goto LABEL_49;
  }
LABEL_48:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v84, v31);
  swift_bridgeObjectRelease();
LABEL_49:
  v33 = v69;
  v61 = a2;
  if (v69)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v84, v33);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v34 = v70;
  v35 = v71;
  v37 = v72;
  v36 = v73;
  v38 = v74;
  if (v70)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v39 = v35;
    v40 = v37;
    v41 = v36;
    v42 = v38;
    v43 = v34;
    _CFObject.hash(into:)();
    if (v35)
      goto LABEL_54;
  }
  else
  {
    Hasher._combine(_:)(0);
    v48 = v38;
    v49 = v35;
    v50 = v37;
    v51 = v36;
    if (v35)
    {
LABEL_54:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v44 = v35;
      _CFObject.hash(into:)();

      if (v37)
        goto LABEL_55;
      goto LABEL_60;
    }
  }
  Hasher._combine(_:)(0);
  if (v37)
  {
LABEL_55:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v45 = v37;
    _CFObject.hash(into:)();

    if (v36)
      goto LABEL_56;
LABEL_61:
    Hasher._combine(_:)(0);
    if (v38)
      goto LABEL_57;
    goto LABEL_62;
  }
LABEL_60:
  Hasher._combine(_:)(0);
  if (!v36)
    goto LABEL_61;
LABEL_56:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v46 = v36;
  _CFObject.hash(into:)();

  if (v38)
  {
LABEL_57:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v47 = v38;
    _CFObject.hash(into:)();

    goto LABEL_63;
  }
LABEL_62:
  Hasher._combine(_:)(0);
  v47 = 0;
LABEL_63:

  v52 = v75;
  if (v52)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v84, v52);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  a2 = v61;
  v53 = v76;
  if (!v76)
  {
    Hasher._combine(_:)(0);
    if (v77)
      goto LABEL_68;
LABEL_70:
    Hasher._combine(_:)(0);
    goto LABEL_71;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v84, v53);
  swift_bridgeObjectRelease();
  if (!v77)
    goto LABEL_70;
LABEL_68:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_71:
  if (v78 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v54 = v78 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v54);
  }
  if (v79 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v55 = v79 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v55);
  }
  if (v80 == 2)
  {
    v56 = 0;
  }
  else
  {
    v56 = v80 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v56);
  if (v81 == 2)
  {
    v57 = 0;
  }
  else
  {
    v58 = v81 & 1;
    Hasher._combine(_:)(1u);
    v57 = v58;
  }
  Hasher._combine(_:)(v57);
  outlined retain of LocalePreferences?((uint64_t)v82, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v82, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
LABEL_84:
  v59 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v59, a2);
}

void specialized Optional<A>.hash(into:)()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;
  char v3;
  Swift::UInt v4;
  Swift::UInt v5;
  char v6;
  char v7;
  Swift::UInt v8;
  Swift::UInt v9;
  _QWORD v10[3];
  uint64_t v11;
  Swift::UInt v12;
  uint64_t v13;
  Swift::UInt v14;
  char v15;
  _BYTE v16[24];
  unint64_t v17;
  unint64_t v18;
  unsigned __int8 v19;

  outlined init with take of LocalePreferences?(v0, (uint64_t)v10, &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  v2 = v10[0];
  v1 = v10[1];
  v4 = v10[2];
  v3 = v11;
  v5 = v12;
  v6 = v13;
  v9 = v14;
  v7 = v15;
  outlined init with take of LocalePreferences?(v0, (uint64_t)v16, &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  if (v17 >> 1 == 0xFFFFFFFF && v18 <= 1 && v19 <= 1u)
    goto LABEL_11;
  Hasher._combine(_:)(1u);
  if (v7 < 0)
  {
    Hasher._combine(_:)(1uLL);
    if ((v1 & 1) != 0)
    {
      Hasher._combine(_:)(0);
      if ((v3 & 1) != 0)
      {
LABEL_9:
        Hasher._combine(_:)(0);
        if ((v6 & 1) != 0)
          goto LABEL_10;
        goto LABEL_14;
      }
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v2);
      if ((v3 & 1) != 0)
        goto LABEL_9;
    }
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4);
    if ((v6 & 1) != 0)
    {
LABEL_10:
      Hasher._combine(_:)(0);
      if ((v7 & 1) != 0)
        goto LABEL_11;
LABEL_15:
      Hasher._combine(_:)(1u);
      v8 = v9;
      goto LABEL_16;
    }
LABEL_14:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5);
    if ((v7 & 1) != 0)
      goto LABEL_11;
    goto LABEL_15;
  }
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v2);
  if ((v4 & 1) != 0)
  {
LABEL_11:
    Hasher._combine(_:)(0);
    return;
  }
  Hasher._combine(_:)(1u);
  v8 = v1;
LABEL_16:
  Hasher._combine(_:)(v8);
}

{
  uint64_t v0;
  Swift::UInt64 v1;
  char v2;
  Swift::UInt64 v3;
  char v4;
  Swift::UInt v5;
  Swift::UInt v6;
  Swift::UInt64 v7;
  Swift::UInt64 v8;
  Swift::UInt64 v9;
  uint64_t v10;
  Swift::UInt64 v11;
  uint64_t v12;
  Swift::UInt v13;
  Swift::UInt v14;
  _BYTE v15[56];

  outlined init with take of LocalePreferences?(v0, (uint64_t)&v9, (uint64_t *)&demangling cache variable for type metadata for WeekendRange?);
  v1 = v9;
  v2 = v10;
  v3 = v11;
  v4 = v12;
  v6 = v13;
  v5 = v14;
  outlined init with take of LocalePreferences?(v0, (uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for WeekendRange?);
  if (v15[48] == 1)
  {
    Hasher._combine(_:)(0);
    return;
  }
  Hasher._combine(_:)(1u);
  if ((v2 & 1) == 0)
  {
    Hasher._combine(_:)(1u);
    if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v7 = v1;
    else
      v7 = 0;
    Hasher._combine(_:)(v7);
    if ((v4 & 1) != 0)
      goto LABEL_8;
LABEL_10:
    Hasher._combine(_:)(1u);
    if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v8 = v3;
    else
      v8 = 0;
    Hasher._combine(_:)(v8);
    goto LABEL_14;
  }
  Hasher._combine(_:)(0);
  if ((v4 & 1) == 0)
    goto LABEL_10;
LABEL_8:
  Hasher._combine(_:)(0);
LABEL_14:
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v5);
}

double specialized static NumberFormatStyleConfiguration.Collection.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  char *v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  uint64_t *v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  __int128 v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char v76;
  __int128 v77[4];
  __int128 v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  char v84;

  v4 = type metadata accessor for FloatingPointRoundingRule();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (FloatingPointRoundingRule?, FloatingPointRoundingRule?));
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v12);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v62 - v18;
  v20 = *(_BYTE *)(a2 + 8);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 8))
      return *(double *)&v17;
  }
  else
  {
    *(_QWORD *)&v17 = *(_QWORD *)a2;
    if (*(double *)a1 != *(double *)a2)
      v20 = 1;
    if ((v20 & 1) != 0)
      return *(double *)&v17;
  }
  v66 = v7;
  v68 = v5;
  v69 = v10;
  v67 = v4;
  v21 = *(_QWORD *)(a1 + 40);
  v22 = *(_QWORD *)(a1 + 56);
  v23 = *(unsigned __int8 *)(a1 + 72);
  v24 = *(_QWORD *)(a2 + 16);
  v25 = *(_QWORD *)(a2 + 24);
  v26 = *(_QWORD *)(a2 + 32);
  v27 = *(_QWORD *)(a2 + 40);
  v28 = *(_QWORD *)(a2 + 48);
  v29 = *(_QWORD *)(a2 + 56);
  v30 = *(_QWORD *)(a2 + 64);
  v31 = *(unsigned __int8 *)(a2 + 72);
  if (v21 >> 1 == 0xFFFFFFFF && v22 <= 1 && v23 < 2)
  {
    if (v27 >> 1 != 0xFFFFFFFF || v29 > 1 || v31 >= 2)
      return *(double *)&v17;
LABEL_18:
    v39 = *(unsigned __int8 *)(a1 + 73);
    v40 = *(unsigned __int8 *)(a2 + 73);
    if (v39 == 2)
    {
      v41 = (uint64_t)v69;
      if (v40 != 2)
        return *(double *)&v17;
    }
    else
    {
      v41 = (uint64_t)v69;
      if (v40 == 2 || ((((v40 & 1) == 0) ^ v39) & 1) == 0)
        return *(double *)&v17;
    }
    v42 = *(unsigned __int16 *)(a1 + 74) | (*(unsigned __int8 *)(a1 + 76) << 16);
    v43 = *(_WORD *)(a2 + 74);
    if (*(_WORD *)(a1 + 74) == 2)
    {
      if (v43 != 2)
        return *(double *)&v17;
    }
    else if (v43 == 2
           || ((((*(_WORD *)(a2 + 74) & 1) == 0) ^ v42) & 1) == 0
           || ((*(_WORD *)(a2 + 74) & 0x100) == 0) == (unsigned __int16)(*(_WORD *)(a1 + 74) & 0x100) >> 8
           || (((*(unsigned __int16 *)(a2 + 74) | (*(unsigned __int8 *)(a2 + 76) << 16)) & 0x10000) == 0) == (v42 & 0x10000u) >> 16)
    {
      return *(double *)&v17;
    }
    v44 = *(unsigned __int8 *)(a1 + 77);
    v45 = *(unsigned __int8 *)(a2 + 77);
    if (v44 == 2)
    {
      if (v45 != 2)
        return *(double *)&v17;
    }
    else if (v45 == 2 || ((((v45 & 1) == 0) ^ v44) & 1) == 0)
    {
      return *(double *)&v17;
    }
    v46 = (uint64_t)v19;
    v47 = v16;
    v48 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    outlined init with copy of FloatingPointRoundingRule?(a1 + *(int *)(v48 + 36), v46);
    outlined init with copy of FloatingPointRoundingRule?(a2 + *(int *)(v48 + 36), v47);
    v49 = v41 + *(int *)(v8 + 48);
    outlined init with copy of FloatingPointRoundingRule?(v46, v41);
    outlined init with copy of FloatingPointRoundingRule?(v47, v49);
    v50 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48);
    v51 = v67;
    if (v50(v41, 1, v67) == 1)
    {
      v69 = (char *)v48;
      outlined destroy of Any?(v47, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
      outlined destroy of Any?(v46, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
      if (v50(v49, 1, v51) == 1)
      {
        outlined destroy of Any?(v41, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
LABEL_42:
        v56 = *((int *)v69 + 10);
        v57 = (uint64_t *)(a1 + v56);
        v58 = *(unsigned __int8 *)(a1 + v56 + 8);
        v59 = *(unsigned __int8 *)(a2 + v56 + 8);
        if (v58 != 255 && v59 != 255)
        {
          v60 = *v57;
          if ((v58 & 1) != 0 && (v59 & 1) != 0)
            *(_QWORD *)&v17 = v60;
        }
        return *(double *)&v17;
      }
    }
    else
    {
      v65 = v47;
      outlined init with copy of FloatingPointRoundingRule?(v41, (uint64_t)v14);
      if (v50(v49, 1, v51) != 1)
      {
        v69 = (char *)v48;
        v52 = v68;
        v53 = v66;
        (*(void (**)(char *, uint64_t, uint64_t))(v68 + 32))(v66, v49, v51);
        v54 = dispatch thunk of static Equatable.== infix(_:_:)();
        v55 = *(void (**)(char *, uint64_t))(v52 + 8);
        v55(v53, v51);
        outlined destroy of Any?(v65, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
        outlined destroy of Any?(v46, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
        v55(v14, v51);
        outlined destroy of Any?(v41, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
        if ((v54 & 1) == 0)
          return *(double *)&v17;
        goto LABEL_42;
      }
      outlined destroy of Any?(v65, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
      outlined destroy of Any?(v46, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
      (*(void (**)(char *, uint64_t))(v68 + 8))(v14, v51);
    }
    outlined destroy of Any?(v41, &demangling cache variable for type metadata for (FloatingPointRoundingRule?, FloatingPointRoundingRule?));
    return *(double *)&v17;
  }
  v32 = *(_QWORD *)(a1 + 64);
  v33 = *(_QWORD *)(a1 + 48);
  v34 = *(_QWORD *)(a1 + 32);
  v17 = *(_OWORD *)(a1 + 16);
  v70 = v17;
  v71 = v34;
  v72 = v21;
  v73 = v33;
  v74 = v22;
  v75 = v32;
  v76 = v23;
  if (v27 >> 1 != 0xFFFFFFFF || v29 > 1 || v31 >= 2)
  {
    v64 = v14;
    v63 = v19;
    v65 = v16;
    v62 = v30;
    v35 = v26;
    v36 = v8;
    v37 = v28;
    outlined init with take of NumberFormatStyleConfiguration.Precision.Option(&v70, v77);
    *(_QWORD *)&v78 = v24;
    *((_QWORD *)&v78 + 1) = v25;
    v79 = v35;
    v80 = v27;
    v81 = v37;
    v82 = v29;
    v8 = v36;
    v83 = v62;
    v84 = v31;
    v38 = specialized static NumberFormatStyleConfiguration.Precision.Option.== infix(_:_:)(v77, &v78);
    v16 = v65;
    v19 = v63;
    v14 = v64;
    if (v38)
      goto LABEL_18;
  }
  return *(double *)&v17;
}

uint64_t outlined init with copy of FloatingPointRoundingRule?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t destroy for IntegerFormatStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  swift_unknownObjectRelease();
  v4 = a1 + *(int *)(a2 + 36);
  v5 = v4 + *(int *)(type metadata accessor for NumberFormatStyleConfiguration.Collection(0) + 36);
  v6 = type metadata accessor for FloatingPointRoundingRule();
  v7 = *(_QWORD *)(v6 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  return result;
}

uint64_t destroy for ICUNumberFormatter.Signature(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = a1 + *(int *)(type metadata accessor for NumberFormatStyleConfiguration.Collection(0) + 36);
  v5 = type metadata accessor for FloatingPointRoundingRule();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_bridgeObjectRelease();
  v7 = a1 + *(int *)(a2 + 24);
  result = *(_QWORD *)(v7 + 8);
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t type metadata accessor for NumberFormatStyleConfiguration.Collection(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, (uint64_t *)&type metadata singleton initialization cache for NumberFormatStyleConfiguration.Collection);
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  BOOL v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _BYTE *v36;
  uint64_t (*v37)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *, void *, void *, void *, void *);
  void *v38;
  uint64_t v39;
  id v40;
  char v41;
  _BYTE *v42;
  uint64_t (*v43)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *, void *, void *, void *, void *);
  _BYTE *v44;
  uint64_t (*v45)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *, void *, void *, void *, void *);
  id v46;
  uint64_t v47;
  void *v48;
  char v49;
  void *v50;
  id v51;
  id v52;
  char v53;
  id v54;
  id v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  int v61;
  uint64_t v62;
  id v63;
  id v64;
  uint64_t v65;
  id v66;
  void *v67;
  id v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  _OWORD v96[7];
  _OWORD v97[2];
  _QWORD v98[17];
  char v99;
  char v100;
  char v101;
  char v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned __int8 v120;
  unsigned __int8 v121;
  unsigned __int8 v122;
  unsigned __int8 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  _OWORD v131[2];
  _BYTE v132[144];
  uint64_t v133;
  _BYTE v134[144];
  _BYTE v135[144];
  _BYTE v136[152];

  v5 = v3;
  v8 = a3(0);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v62 - v10;
  v12 = v5 + 64;
  v13 = -1 << *(_BYTE *)(v5 + 32);
  v14 = a2 & ~v13;
  if (((*(_QWORD *)(v5 + 64 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
    return v14;
  v15 = ~v13;
  v16 = *(_QWORD *)(v9 + 72);
  v94 = ~v13;
  v95 = v16;
  v93 = &v133;
  while (1)
  {
    outlined init with copy of ICUNumberFormatter.Signature(*(_QWORD *)(v5 + 48) + v95 * v14, (uint64_t)v11, a3);
    specialized static NumberFormatStyleConfiguration.Collection.== infix(_:_:)((uint64_t)v11, a1);
    if ((v17 & 1) == 0)
      goto LABEL_6;
    v18 = *(int *)(v8 + 20);
    v19 = *(_QWORD *)&v11[v18];
    v20 = *(_QWORD *)&v11[v18 + 8];
    v21 = (_QWORD *)(a1 + v18);
    v22 = v19 == *v21 && v20 == v21[1];
    if (!v22 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      goto LABEL_6;
    outlined init with take of LocalePreferences?((uint64_t)&v11[*(int *)(v8 + 24)], (uint64_t)v134, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?(a1 + *(int *)(v8 + 24), (uint64_t)v135, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v134, (uint64_t)v136, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v136) == 1)
    {
      outlined init with take of LocalePreferences?((uint64_t)v135, (uint64_t)v132, &demangling cache variable for type metadata for LocalePreferences?);
      if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v132) == 1)
        goto LABEL_154;
      goto LABEL_4;
    }
    outlined init with take of LocalePreferences?((uint64_t)v134, (uint64_t)&v124, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v135, (uint64_t)v132, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v132) != 1)
      break;
    v96[6] = v130;
    v97[0] = v131[0];
    *(_OWORD *)((char *)v97 + 12) = *(_OWORD *)((char *)v131 + 12);
    v96[2] = v126;
    v96[3] = v127;
    v96[4] = v128;
    v96[5] = v129;
    v96[0] = v124;
    v96[1] = v125;
    outlined init with take of LocalePreferences?((uint64_t)v134, (uint64_t)v98, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v134, (uint64_t)&v103, &demangling cache variable for type metadata for LocalePreferences?);
    outlined retain of LocalePreferences(&v103);
    outlined retain of LocalePreferences(v98);
    outlined release of LocalePreferences(v96);
LABEL_4:
    outlined init with take of LocalePreferences?((uint64_t)v134, (uint64_t)v132, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v135, (uint64_t)v93, &demangling cache variable for type metadata for LocalePreferences?);
    outlined retain of LocalePreferences?((uint64_t)v135, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
    outlined release of (LocalePreferences?, LocalePreferences?)((uint64_t)v132);
LABEL_5:
    v15 = v94;
LABEL_6:
    outlined destroy of ICUNumberFormatter.Signature((uint64_t)v11, a3);
    v14 = (v14 + 1) & v15;
    if (((*(_QWORD *)(v12 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      return v14;
  }
  outlined init with take of LocalePreferences?((uint64_t)v135, (uint64_t)&v103, &demangling cache variable for type metadata for LocalePreferences?);
  v23 = (uint64_t *)*((_QWORD *)&v124 + 1);
  v92 = *((_QWORD *)&v125 + 1);
  v88 = v126;
  v90 = v125;
  v91 = *((_QWORD *)&v126 + 1);
  v89 = v127;
  v85 = (id)v128;
  v86 = *((_QWORD *)&v127 + 1);
  v83 = (id)v129;
  v84 = (id)*((_QWORD *)&v128 + 1);
  v81 = (id)v130;
  v82 = (id)*((_QWORD *)&v129 + 1);
  v79 = *(_QWORD *)&v131[0];
  v80 = *((_QWORD *)&v130 + 1);
  v77 = *((_QWORD *)&v131[0] + 1);
  v78 = *(_QWORD *)&v131[1];
  v75 = BYTE9(v131[1]);
  v76 = BYTE8(v131[1]);
  v72 = BYTE11(v131[1]);
  v73 = BYTE10(v131[1]);
  v74 = v124;
  v87 = (uint64_t *)*((_QWORD *)&v124 + 1);
  if (v124 != 2)
  {
    if (v103 != 2 && ((((v124 & 1) == 0) ^ v103) & 1) != 0)
      goto LABEL_21;
LABEL_35:
    outlined init with take of LocalePreferences?((uint64_t)v134, (uint64_t)v96, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v134, (uint64_t)v98, &demangling cache variable for type metadata for LocalePreferences?);
    outlined retain of LocalePreferences(v98);
    v33 = v96;
    goto LABEL_36;
  }
  if (v103 != 2)
    goto LABEL_35;
LABEL_21:
  v24 = (uint64_t)v104;
  if (!*((_QWORD *)&v124 + 1))
  {
    v70 = v5;
    v71 = v12;
    if (v104)
    {
      outlined init with take of LocalePreferences?((uint64_t)v134, (uint64_t)v96, &demangling cache variable for type metadata for LocalePreferences?);
      outlined init with take of LocalePreferences?((uint64_t)v134, (uint64_t)v98, &demangling cache variable for type metadata for LocalePreferences?);
      outlined retain of LocalePreferences(v98);
      v34 = v96;
LABEL_42:
      outlined retain of LocalePreferences(v34);
      goto LABEL_43;
    }
LABEL_55:
    if (v92)
    {
      v5 = v70;
      v12 = v71;
      if (!v106 || (v90 != v105 || v92 != v106) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        goto LABEL_84;
    }
    else
    {
      v5 = v70;
      v12 = v71;
      if (v106)
        goto LABEL_84;
    }
    if (v91)
    {
      if (!v108 || (v88 != v107 || v91 != v108) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        goto LABEL_84;
    }
    else if (v108)
    {
      goto LABEL_84;
    }
    if (v89)
    {
      if (!v109 || (specialized static Dictionary<>.== infix(_:_:)(v89, v109) & 1) == 0)
        goto LABEL_84;
    }
    else if (v109)
    {
      goto LABEL_84;
    }
    if (v86)
    {
      if (v110 && (specialized static Dictionary<>.== infix(_:_:)(v86, v110) & 1) != 0)
      {
LABEL_79:
        v71 = v12;
        v38 = v111;
        if (v85)
        {
          if (!v111)
          {
            outlined retain of LocalePreferences?((uint64_t)v134, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
            v42 = v134;
            v43 = outlined copy of LocalePreferences?;
            goto LABEL_93;
          }
          v68 = v113;
          v69 = v112;
          v66 = v115;
          v67 = v114;
          type metadata accessor for CFDictionaryRef(0);
          v65 = v39;
          outlined retain of LocalePreferences?((uint64_t)v134, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
          outlined retain of LocalePreferences?((uint64_t)v134, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
          outlined retain of LocalePreferences?((uint64_t)v135, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
          lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
          v40 = v38;
          v64 = v85;
          v41 = static _CFObject.== infix(_:_:)();

          if ((v41 & 1) == 0)
          {
            v42 = v135;
            v43 = outlined consume of LocalePreferences?;
LABEL_93:
            outlined retain of LocalePreferences?((uint64_t)v42, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))v43);
            goto LABEL_94;
          }
        }
        else
        {
          v68 = v113;
          v69 = v112;
          v66 = v115;
          v67 = v114;
          outlined retain of LocalePreferences?((uint64_t)v134, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
          outlined retain of LocalePreferences?((uint64_t)v134, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
          if (v38)
          {
LABEL_94:
            LOBYTE(v24) = 0;
            v12 = v71;
            goto LABEL_38;
          }
          outlined retain of LocalePreferences?((uint64_t)v135, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
        }
        if (v84)
        {
          v12 = v71;
          if (!v69)
            goto LABEL_104;
          v46 = v69;
          type metadata accessor for CFDictionaryRef(0);
          v65 = v47;
          v64 = (id)lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
          v69 = v46;
          v63 = v84;
          LOBYTE(v46) = static _CFObject.== infix(_:_:)();

          if ((v46 & 1) == 0)
            goto LABEL_104;
        }
        else
        {
          v12 = v71;
          if (v69)
            goto LABEL_104;
        }
        if (v83)
        {
          v24 = (uint64_t)v68;
          if (!v68)
          {
            outlined retain of LocalePreferences?((uint64_t)v135, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
            goto LABEL_38;
          }
          type metadata accessor for CFDictionaryRef(0);
          v69 = v48;
          v65 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
          v68 = (id)v24;
          v64 = v83;
          v49 = static _CFObject.== infix(_:_:)();

          if ((v49 & 1) != 0)
          {
LABEL_99:
            v70 = v5;
            if (v82)
            {
              v50 = v67;
              if (!v67)
                goto LABEL_138;
              type metadata accessor for CFDictionaryRef(0);
              v69 = (id)lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              v51 = v50;
              v52 = v82;
              v53 = static _CFObject.== infix(_:_:)();

              if ((v53 & 1) == 0)
                goto LABEL_138;
            }
            else if (v67)
            {
              goto LABEL_138;
            }
            if (v81)
            {
              if (!v66)
                goto LABEL_138;
              type metadata accessor for CFDictionaryRef(0);
              v69 = (id)lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              v54 = v66;
              v55 = v81;
              v56 = static _CFObject.== infix(_:_:)();

              if ((v56 & 1) == 0)
                goto LABEL_138;
            }
            else if (v66)
            {
              goto LABEL_138;
            }
            v24 = v116;
            if (v80)
            {
              if (!v116)
                goto LABEL_121;
              swift_bridgeObjectRetain();
              v57 = swift_bridgeObjectRetain();
              v58 = specialized static Dictionary<>.== infix(_:_:)(v57, v24);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v58 & 1) == 0)
                goto LABEL_138;
            }
            else if (v116)
            {
              goto LABEL_138;
            }
            v24 = v117;
            if (!v79)
            {
              if (v117)
                goto LABEL_138;
LABEL_123:
              if (v78)
              {
                if (!v119 || (v77 != v118 || v78 != v119) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                {
LABEL_138:
                  v36 = v135;
                  v37 = outlined consume of LocalePreferences?;
LABEL_54:
                  outlined retain of LocalePreferences?((uint64_t)v36, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))v37);
                  goto LABEL_43;
                }
              }
              else if (v119)
              {
                goto LABEL_138;
              }
              if (v76 == 2)
              {
                if (v120 != 2)
                  goto LABEL_138;
              }
              else if (v120 == 2 || ((v120 ^ v76) & 1) != 0)
              {
                goto LABEL_138;
              }
              v61 = v121;
              if (v75 == 2)
              {
                outlined retain of LocalePreferences?((uint64_t)v135, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
                if (v61 == 2)
                  goto LABEL_141;
              }
              else
              {
                outlined retain of LocalePreferences?((uint64_t)v135, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
                if (v61 != 2 && ((v61 ^ v75) & 1) == 0)
                {
LABEL_141:
                  if (v73 == 2)
                  {
                    v5 = v70;
                    v12 = v71;
                    if (v122 != 2)
                      goto LABEL_37;
                  }
                  else
                  {
                    LOBYTE(v24) = 0;
                    if (v122 == 2)
                      goto LABEL_44;
                    v5 = v70;
                    v12 = v71;
                    if (((((v73 & 1) == 0) ^ v122) & 1) == 0)
                      goto LABEL_38;
                  }
                  if (v72 == 2)
                  {
                    v12 = v71;
                    if (v123 != 2)
                      goto LABEL_37;
LABEL_151:
                    LOBYTE(v24) = 1;
                    goto LABEL_38;
                  }
                  LOBYTE(v24) = 0;
                  if (v123 != 2)
                  {
                    v12 = v71;
                    if (((((v72 & 1) == 0) ^ v123) & 1) == 0)
                      goto LABEL_38;
                    goto LABEL_151;
                  }
                  v12 = v71;
LABEL_38:
                  LOBYTE(v98[0]) = v74;
                  v98[1] = v87;
                  v98[2] = v90;
                  v98[3] = v92;
                  v98[4] = v88;
                  v98[5] = v91;
                  v98[6] = v89;
                  v98[7] = v86;
                  v98[8] = v85;
                  v98[9] = v84;
                  v98[10] = v83;
                  v98[11] = v82;
                  v98[12] = v81;
                  v98[13] = v80;
                  v98[14] = v79;
                  v98[15] = v77;
                  v98[16] = v78;
                  v99 = v76;
                  v100 = v75;
                  v101 = v73;
                  v102 = v72;
                  outlined release of LocalePreferences(v98);
                  outlined retain of LocalePreferences?((uint64_t)v134, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
                  if ((v24 & 1) != 0)
                  {
LABEL_154:
                    outlined destroy of ICUNumberFormatter.Signature((uint64_t)v11, a3);
                    return v14;
                  }
                  goto LABEL_5;
                }
              }
LABEL_43:
              LOBYTE(v24) = 0;
LABEL_44:
              v5 = v70;
              v12 = v71;
              goto LABEL_38;
            }
            if (v117)
            {
              swift_bridgeObjectRetain();
              v59 = swift_bridgeObjectRetain();
              v60 = specialized static Dictionary<>.== infix(_:_:)(v59, v24);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v60 & 1) == 0)
                goto LABEL_138;
              goto LABEL_123;
            }
LABEL_121:
            outlined retain of LocalePreferences?((uint64_t)v135, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
            goto LABEL_44;
          }
        }
        else if (!v68)
        {
          goto LABEL_99;
        }
LABEL_104:
        v44 = v135;
        v45 = outlined consume of LocalePreferences?;
        goto LABEL_85;
      }
    }
    else if (!v110)
    {
      goto LABEL_79;
    }
LABEL_84:
    outlined retain of LocalePreferences?((uint64_t)v134, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
    v44 = v134;
    v45 = outlined copy of LocalePreferences?;
LABEL_85:
    outlined retain of LocalePreferences?((uint64_t)v44, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))v45);
    goto LABEL_37;
  }
  if (!v104)
  {
    outlined init with take of LocalePreferences?((uint64_t)v134, (uint64_t)v96, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v134, (uint64_t)v98, &demangling cache variable for type metadata for LocalePreferences?);
    outlined retain of LocalePreferences(v98);
    outlined retain of LocalePreferences(v96);
    goto LABEL_38;
  }
  v25 = *(_QWORD *)(*((_QWORD *)&v124 + 1) + 16);
  if (v25 != v104[2])
  {
    outlined init with take of LocalePreferences?((uint64_t)v134, (uint64_t)v98, &demangling cache variable for type metadata for LocalePreferences?);
    outlined retain of LocalePreferences?((uint64_t)v134, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
    v33 = v98;
LABEL_36:
    outlined retain of LocalePreferences(v33);
LABEL_37:
    LOBYTE(v24) = 0;
    goto LABEL_38;
  }
  v70 = v5;
  v71 = v12;
  if (!v25 || *((_QWORD **)&v124 + 1) == v104)
    goto LABEL_55;
  if (*(_QWORD *)(*((_QWORD *)&v124 + 1) + 32) != v104[4] || *(_QWORD *)(*((_QWORD *)&v124 + 1) + 40) != v104[5])
  {
    v26 = v25;
    v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v25 = v26;
    v23 = v87;
    if ((v27 & 1) == 0)
      goto LABEL_74;
  }
  if (v25 == 1)
    goto LABEL_55;
  result = v23[6];
  if (result != *(_QWORD *)(v24 + 48) || v23[7] != *(_QWORD *)(v24 + 56))
  {
    v29 = v25;
    result = _stringCompareWithSmolCheck(_:_:expecting:)();
    v25 = v29;
    v23 = v87;
    if ((result & 1) == 0)
    {
LABEL_74:
      outlined init with take of LocalePreferences?((uint64_t)v134, (uint64_t)v98, &demangling cache variable for type metadata for LocalePreferences?);
      outlined retain of LocalePreferences?((uint64_t)v134, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
      v34 = v98;
      goto LABEL_42;
    }
  }
  v30 = v25 - 2;
  if (v25 == 2)
    goto LABEL_55;
  v31 = (_QWORD *)(v24 + 72);
  v32 = v23 + 9;
  while (v30)
  {
    result = *(v32 - 1);
    if (result != *(v31 - 1) || *v32 != *v31)
    {
      result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0)
      {
        outlined retain of LocalePreferences?((uint64_t)v134, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
        v36 = v134;
        v37 = outlined copy of LocalePreferences?;
        goto LABEL_54;
      }
    }
    v31 += 2;
    v32 += 2;
    if (!--v30)
      goto LABEL_55;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for ICUPercentNumberFormatter.Signature(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, (uint64_t *)&type metadata singleton initialization cache for ICUPercentNumberFormatter.Signature);
}

uint64_t type metadata accessor for ICUNumberFormatter.Signature(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, (uint64_t *)&type metadata singleton initialization cache for ICUNumberFormatter.Signature);
}

uint64_t destroy for NSDecimal.FormatStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  swift_unknownObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = v4 + *(int *)(type metadata accessor for NumberFormatStyleConfiguration.Collection(0) + 36);
  v6 = type metadata accessor for FloatingPointRoundingRule();
  v7 = *(_QWORD *)(v6 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  return result;
}

uint64_t destroy for PredicateExpressions.ForcedUnwrap(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
}

_QWORD *static Locale.preferredLanguages.getter()
{
  if (one-time initialization token for cache != -1)
    swift_once();
  return LocaleCache.preferredLanguages(forCurrentUser:)(0);
}

uint64_t StringProtocol.components(separatedBy:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __n128 v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v4 = MEMORY[0x1E0C80A78](a1);
  v7 = *v6;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16))((char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v2, a2, v4);
  v9 = Substring.init<A>(_:)();
  v14 = v7;
  v11 = Substring._components(separatedBy:)((uint64_t)&v14, v9, v10);
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t Substring._components(separatedBy:)(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t i;
  unint64_t v21;
  UTF32Char v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;

  v4 = a3 >> 14;
  if (a2 >> 14 >= a3 >> 14)
  {
    v5 = MEMORY[0x1E0DEE9D8];
    v8 = a2;
    if (v4 >= a2 >> 14)
      goto LABEL_44;
    goto LABEL_49;
  }
  v40 = *(_QWORD *)result;
  v5 = MEMORY[0x1E0DEE9D8];
  v6 = a2;
  v7 = a2 >> 14;
  v36 = a3 >> 14;
  while (2)
  {
    if (v4 >= v7)
    {
      v39 = v7;
      swift_bridgeObjectRetain();
      v8 = Substring.subscript.getter();
      v10 = v9;
      v3 = v11;
      v13 = v12;
      swift_bridgeObjectRelease();
      v14 = v8 >> 14;
      v15 = v10 >> 14;
      if (v8 >> 14 != v10 >> 14)
      {
        v37 = (_QWORD *)v5;
        v38 = v6;
        swift_bridgeObjectRetain();
        v16 = v40;
        swift_retain();
        v5 = Substring.UnicodeScalarView.index(before:)();
        v17 = (v3 >> 59) & 1;
        if ((v13 & 0x1000000000000000) == 0)
          LOBYTE(v17) = 1;
        v18 = 4 << v17;
        for (i = v8; ; i = Substring.UnicodeScalarView.index(_:offsetBy:)())
        {
          if ((i & 0xC) == v18 || (i & 1) == 0)
          {
            v21 = i;
            if ((i & 0xC) == v18)
              v21 = _StringGuts._slowEnsureMatchingEncoding(_:)(i, v3, v13);
            if (v21 >> 14 < v14 || v21 >> 14 >= v15)
              goto LABEL_50;
            if ((v21 & 1) == 0)
              _StringGuts.scalarAlignSlow(_:)(v21, v3, v13);
          }
          else if (i >> 14 < v14 || i >> 14 >= v15)
          {
            goto LABEL_51;
          }
          if ((v13 & 0x1000000000000000) != 0)
          {
            v22 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
          }
          else
          {
            if ((v13 & 0x2000000000000000) == 0 && (v3 & 0x1000000000000000) == 0)
              _StringObject.sharedUTF8.getter();
            v22 = _decodeScalar(_:startingAt:)();
            v16 = v40;
          }
          if (CFCharacterSetIsLongCharacterMember(*(CFCharacterSetRef *)(v16 + 16), v22))
            break;
          if ((i ^ v5) < 0x4000)
          {
            swift_bridgeObjectRelease_n();
            swift_release();
LABEL_42:
            v5 = (uint64_t)v37;
            v8 = v38;
            v23 = v39;
            v4 = v36;
            goto LABEL_43;
          }
        }
        v8 = Substring.UnicodeScalarView.index(after:)();
        swift_bridgeObjectRelease_n();
        result = swift_release();
        v23 = v8 >> 14;
        v24 = i >> 14;
        if (v8 >> 14 < i >> 14)
          goto LABEL_54;
        if (v24 == v23)
          goto LABEL_42;
        result = v38;
        if (v24 < v39)
          goto LABEL_55;
        v25 = Substring.subscript.getter();
        v3 = MEMORY[0x186DA4634](v25);
        v27 = v26;
        swift_bridgeObjectRelease();
        v5 = (uint64_t)v37;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v37[2] + 1, 1, v37);
          v5 = result;
        }
        v29 = *(_QWORD *)(v5 + 16);
        v28 = *(_QWORD *)(v5 + 24);
        if (v29 >= v28 >> 1)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v28 > 1), v29 + 1, 1, (_QWORD *)v5);
          v5 = result;
        }
        *(_QWORD *)(v5 + 16) = v29 + 1;
        v30 = v5 + 16 * v29;
        *(_QWORD *)(v30 + 32) = v3;
        *(_QWORD *)(v30 + 40) = v27;
        v6 = v8;
        v7 = v8 >> 14;
        v4 = v36;
        if (v23 < v36)
          continue;
LABEL_43:
        if (v4 < v23)
          goto LABEL_49;
LABEL_44:
        v31 = Substring.subscript.getter();
        v8 = MEMORY[0x186DA4634](v31);
        v3 = v32;
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
LABEL_45:
          v34 = *(_QWORD *)(v5 + 16);
          v33 = *(_QWORD *)(v5 + 24);
          if (v34 >= v33 >> 1)
            v5 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v33 > 1), v34 + 1, 1, (_QWORD *)v5);
          *(_QWORD *)(v5 + 16) = v34 + 1;
          v35 = v5 + 16 * v34;
          *(_QWORD *)(v35 + 32) = v8;
          *(_QWORD *)(v35 + 40) = v3;
          return v5;
        }
LABEL_52:
        v5 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v5 + 16) + 1, 1, (_QWORD *)v5);
        goto LABEL_45;
      }
      swift_bridgeObjectRelease();
      v8 = v6;
      if (v36 >= v39)
        goto LABEL_44;
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
    break;
  }
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
  return result;
}

void *__cdecl NSHashGet(NSHashTable *table, const void *pointer)
{
  if (!table)
    NSLog((NSString *)CFSTR("%s: hash table argument is NULL"), "void * _Nonnull NSHashGet(NSHashTable * _Nonnull, const void * _Nullable)");
  return -[NSHashTable getItem:](table, "getItem:", pointer);
}

uint64_t NSNotificationCenter.Publisher.init(center:name:object:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t Predicate.expression.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v1, a1);
}

uint64_t Error<>._code.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

id NSPredicate.init(format:_:)()
{
  uint64_t v0;
  void *ObjCClassFromMetadata;
  id v2;

  v0 = getVaList(_:)();
  swift_bridgeObjectRelease();
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  v2 = objc_msgSend(ObjCClassFromMetadata, sel_predicateWithFormat_arguments_, String._bridgeToObjectiveCImpl()(), v0);
  swift_unknownObjectRelease();
  return v2;
}

unint64_t StringProtocol.rangeOfCharacter(from:options:range:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  __n128 v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;

  v7 = MEMORY[0x1E0C80A78](a1);
  v10 = *v9;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16))((char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v13, v12, v7);
  v14 = Substring.init<A>(_:)();
  v16 = v15;
  v18 = v17;
  v20 = v19;
  if ((a5 & 1) == 0)
  {
    v14 = Substring.subscript.getter();
    v16 = v21;
    v18 = v22;
    v24 = v23;
    swift_bridgeObjectRelease();
    v20 = v24;
  }
  if ((v16 ^ v14) >> 14)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    v25 = specialized Substring.UnicodeScalarView._rangeOfCharacter(anchored:backwards:matchingPredicate:)((a2 >> 3) & 1, (a2 & 4) != 0, v14, v16, v18, v20, v10);
    swift_bridgeObjectRelease_n();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v25;
}

ValueMetadata *type metadata accessor for CalendarCache.State()
{
  return &type metadata for CalendarCache.State;
}

ValueMetadata *type metadata accessor for ICULegacyKey()
{
  return &type metadata for ICULegacyKey;
}

uint64_t _NSFCPresenterLog()
{
  if (qword_1ECD0A798 != -1)
    dispatch_once(&qword_1ECD0A798, &__block_literal_global_797);
  return qword_1ECD0A708;
}

void sub_181900BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  _Block_object_dispose((const void *)(v27 - 112), 8);
  _Block_object_dispose(&a19, 8);
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

uint64_t _NSFCFSEventsLog()
{
  if (qword_1ECD0A798 != -1)
    dispatch_once(&qword_1ECD0A798, &__block_literal_global_797);
  return qword_1ECD0A720;
}

uint64_t _nodeHasPresentersExcludingPresenter(void *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = ___nodeHasPresentersExcludingPresenter_block_invoke;
  v4[3] = &unk_1E0F54AE8;
  v4[4] = a2;
  v4[5] = &v5;
  objc_msgSend(a1, "forEachPresenterOfItemPerformProcedure:", v4);
  v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1819017CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _nearestPresenterInterestedInSubitemPresenters(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[5];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  void (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v6 = 0;
  v7 = &v6;
  v8 = 0x3052000000;
  v9 = __Block_byref_object_copy__28;
  v10 = __Block_byref_object_dispose__28;
  v11 = 0;
  v1 = (void *)objc_msgSend(a1, "parent");
  v2 = MEMORY[0x1E0C809B0];
  while (1)
  {
    v3 = v7[5];
    if (!v1 || v3)
      break;
    v5[0] = v2;
    v5[1] = 3221225472;
    v5[2] = ___nearestPresenterInterestedInSubitemPresenters_block_invoke;
    v5[3] = &unk_1E0F53B30;
    v5[4] = &v6;
    objc_msgSend(v1, "forEachPresenterOfItemPerformProcedure:", v5);
    v1 = (void *)objc_msgSend(v1, "parent");
  }
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1819018E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___nodeHasPresentersExcludingPresenter_block_invoke(uint64_t result, uint64_t a2)
{
  if (*(_QWORD *)(result + 32) != a2)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = 1;
  return result;
}

void sub_181901B80(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_18190261C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  _Block_object_dispose(&a43, 8);
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose(&a51, 8);
  _Unwind_Resume(a1);
}

void sub_181902C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  _Block_object_dispose(&a34, 8);
  _Unwind_Resume(a1);
}

ValueMetadata *type metadata accessor for URL.CodingKeys()
{
  return &type metadata for URL.CodingKeys;
}

uint64_t DateComponents.timeZone.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_OWORD *)(v1 + 16);
  return swift_unknownObjectRetain();
}

uint64_t DateComponents.calendar.getter@<X0>(_OWORD *a1@<X8>)
{
  _OWORD *v1;

  *a1 = *v1;
  return swift_unknownObjectRetain();
}

uint64_t DateComponents.yearForWeekOfYear.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 272);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance NSNotificationCenter.Notifications.Iterator(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = *v1;
  return swift_task_switch();
}

uint64_t static AttributedString.== infix(_:_:)(_OWORD **a1, _OWORD **a2)
{
  return specialized static AttributedString.Guts.characterwiseIsEqual(_:to:)(*a1, *a2);
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t LocalizedError.recoverySuggestion.getter()
{
  return 0;
}

uint64_t LocalizedError.failureReason.getter()
{
  return 0;
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

void partial apply for closure #1 in _getErrorDefaultUserInfo<A>(_:)()
{
  closure #1 in _getErrorDefaultUserInfo<A>(_:)();
}

void closure #1 in _getErrorDefaultUserInfo<A>(_:)()
{
  void *v0;
  id v1;
  uint64_t v2;
  void *v3;
  _QWORD v4[6];

  v0 = (void *)objc_opt_self();
  v1 = objc_msgSend(v0, sel_userInfoValueProviderForDomain_, String._bridgeToObjectiveCImpl()());
  swift_unknownObjectRelease();
  if (v1)
  {
    _Block_release(v1);
  }
  else
  {
    v2 = String._bridgeToObjectiveCImpl()();
    v4[4] = closure #1 in closure #1 in _getErrorDefaultUserInfo<A>(_:);
    v4[5] = 0;
    v4[0] = MEMORY[0x1E0C809B0];
    v4[1] = 1107296256;
    v4[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Error, @guaranteed String) -> (@out Any?);
    v4[3] = &block_descriptor_9;
    v3 = _Block_copy(v4);
    objc_msgSend(v0, sel_setUserInfoValueProviderForDomain_provider_, v2, v3);
    _Block_release(v3);
    swift_unknownObjectRelease();
  }
}

ValueMetadata *type metadata accessor for JSONEncoder.OutputFormatting()
{
  return &type metadata for JSONEncoder.OutputFormatting;
}

Foundation::DateInterval_optional __swiftcall Calendar.dateInterval(of:for:)(Foundation::Calendar::Component of, Foundation::Date a2)
{
  double *v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  double v6;
  uint64_t ObjectType;
  char v8;
  Swift::Double v9;
  double v10;
  double v11;
  char v12;
  Foundation::DateInterval_optional result;

  v4 = *v2;
  v5 = *(_QWORD *)(v3 + 8);
  v12 = *(_BYTE *)of;
  if (v4 > 1.59271755e13)
    v4 = 1.59271755e13;
  v6 = fmax(v4, -2.11845067e11);
  ObjectType = swift_getObjectType();
  v11 = v6;
  v8 = (*(uint64_t (**)(char *, double *, uint64_t, uint64_t))(v5 + 160))(&v12, &v11, ObjectType, v5);
  result.value.duration = v10;
  result.value.start._time = v9;
  result.is_nil = v8;
  return result;
}

NSURLComponents __swiftcall URLComponents._bridgeToObjectiveC()()
{
  __int128 *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  objc_class *v5;
  char *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  objc_super v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v22[2];

  v1 = v0[7];
  v20 = v0[6];
  v21 = v1;
  v22[0] = v0[8];
  *(_OWORD *)((char *)v22 + 10) = *(__int128 *)((char *)v0 + 138);
  v2 = v0[3];
  v16 = v0[2];
  v17 = v2;
  v3 = v0[5];
  v18 = v0[4];
  v19 = v3;
  v4 = v0[1];
  v14 = *v0;
  v15 = v4;
  v5 = (objc_class *)type metadata accessor for _NSSwiftURLComponents();
  v6 = (char *)objc_allocWithZone(v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<URLComponents, os_unfair_lock_s>);
  v7 = swift_allocObject();
  *(_DWORD *)(v7 + 172) = 0;
  v8 = v21;
  *(_OWORD *)(v7 + 112) = v20;
  *(_OWORD *)(v7 + 128) = v8;
  *(_OWORD *)(v7 + 144) = v22[0];
  *(_OWORD *)(v7 + 154) = *(_OWORD *)((char *)v22 + 10);
  v9 = v17;
  *(_OWORD *)(v7 + 48) = v16;
  *(_OWORD *)(v7 + 64) = v9;
  v10 = v19;
  *(_OWORD *)(v7 + 80) = v18;
  *(_OWORD *)(v7 + 96) = v10;
  v11 = v15;
  *(_OWORD *)(v7 + 16) = v14;
  *(_OWORD *)(v7 + 32) = v11;
  *(_QWORD *)&v6[OBJC_IVAR____NSSwiftURLComponents_lock] = v7;
  outlined retain of URLComponents((uint64_t)&v14);
  v13.receiver = v6;
  v13.super_class = v5;
  return (NSURLComponents)objc_msgSendSuper2(&v13, sel_init);
}

uint64_t URLComponents.query.setter(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  void *v10;
  unsigned __int16 *v11;
  id v12;
  void *v13;
  id v14;
  char v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD v25[3];
  char v26;
  unint64_t v27;
  uint64_t v28;

  v3 = v2;
  *(_BYTE *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 15) = 0;
  if (!a2)
  {
LABEL_8:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 120) = a1;
    *(_QWORD *)(v3 + 128) = a2;
    return result;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    v27 = a1;
    v28 = a2;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    v10 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v11 = (unsigned __int16 *)objc_msgSend(v10, sel__fastCharacterContents);
    v12 = v10;
    if (v11)
    {
      v27 = a1;
      v28 = a2;
      StringProtocol._ephemeralString.getter();
      v13 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v14 = objc_msgSend(v13, sel_length);
      swift_unknownObjectRelease();
      v15 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v11, (uint64_t)v14, 0x40u, 0);
    }
    else
    {
      v15 = specialized Sequence.allSatisfy(_:)(a1, a2, 64);
    }
    v16 = v15;
    v8 = swift_bridgeObjectRelease();
    if ((v16 & 1) != 0)
      goto LABEL_8;
  }
  else
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      v7 = HIBYTE(a2) & 0xF;
      v27 = a1;
      v28 = a2 & 0xFFFFFFFFFFFFFFLL;
      v6 = (char *)&v27;
    }
    else if ((a1 & 0x1000000000000000) != 0)
    {
      v6 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v7 = a1 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v6 = (char *)_StringObject.sharedUTF8.getter();
    }
    v8 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 0x40u, 0);
    if ((v8 & 1) != 0)
      goto LABEL_8;
  }
  v17 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v17 = a1 & 0xFFFFFFFFFFFFLL;
  if (v17)
  {
    v27 = a1;
    v28 = a2;
    MEMORY[0x1E0C80A78](v8);
    v25[2] = &v27;
    v26 = 64;
    swift_bridgeObjectRetain();
    v18 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(_QWORD *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v25, a1, a2);
    if (v19)
    {
      v20 = (uint64_t)v18;
      v21 = v19;
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v22 = v27;
      v23 = v28;
      swift_bridgeObjectRetain();
      v20 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v22, v23, 0x40u);
      v21 = v24;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    v20 = 0;
    v21 = 0xE000000000000000;
  }
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + 120) = v20;
  *(_QWORD *)(v3 + 128) = v21;
  return result;
}

uint64_t URLComponents.percentEncodedQuery.setter(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v6;
  uint64_t v7;
  uint64_t result;
  void *v9;
  unsigned __int16 *v10;
  id v11;
  void *v12;
  id v13;
  char v14;
  char v15;
  unint64_t v16;
  uint64_t v17;

  v3 = v2;
  *(_BYTE *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 15) = 0;
  if (!a2)
  {
LABEL_8:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 120) = a1;
    *(_QWORD *)(v3 + 128) = a2;
    return result;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    v16 = a1;
    v17 = a2;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    v9 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v10 = (unsigned __int16 *)objc_msgSend(v9, sel__fastCharacterContents);
    v11 = v9;
    if (v10)
    {
      v16 = a1;
      v17 = a2;
      StringProtocol._ephemeralString.getter();
      v12 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v13 = objc_msgSend(v12, sel_length);
      swift_unknownObjectRelease();
      v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v10, (uint64_t)v13, 0x40u, 1);
    }
    else
    {
      v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(a1, a2, 0x40u, 1);
    }
    v15 = v14;
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0)
      goto LABEL_8;
  }
  else
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      v7 = HIBYTE(a2) & 0xF;
      v16 = a1;
      v17 = a2 & 0xFFFFFFFFFFFFFFLL;
      v6 = (char *)&v16;
    }
    else if ((a1 & 0x1000000000000000) != 0)
    {
      v6 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v7 = a1 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v6 = (char *)_StringObject.sharedUTF8.getter();
    }
    if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 0x40u, 1))
      goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t URLComponents.fragment.setter(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  void *v10;
  unsigned __int16 *v11;
  id v12;
  void *v13;
  id v14;
  char v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD v25[3];
  char v26;
  unint64_t v27;
  uint64_t v28;

  v3 = v2;
  *(_BYTE *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 16) = 0;
  if (!a2)
  {
LABEL_8:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 136) = a1;
    *(_QWORD *)(v3 + 144) = a2;
    return result;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    v27 = a1;
    v28 = a2;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    v10 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v11 = (unsigned __int16 *)objc_msgSend(v10, sel__fastCharacterContents);
    v12 = v10;
    if (v11)
    {
      v27 = a1;
      v28 = a2;
      StringProtocol._ephemeralString.getter();
      v13 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v14 = objc_msgSend(v13, sel_length);
      swift_unknownObjectRelease();
      v15 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v11, (uint64_t)v14, 0x40u, 0);
    }
    else
    {
      v15 = specialized Sequence.allSatisfy(_:)(a1, a2, 64);
    }
    v16 = v15;
    v8 = swift_bridgeObjectRelease();
    if ((v16 & 1) != 0)
      goto LABEL_8;
  }
  else
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      v7 = HIBYTE(a2) & 0xF;
      v27 = a1;
      v28 = a2 & 0xFFFFFFFFFFFFFFLL;
      v6 = (char *)&v27;
    }
    else if ((a1 & 0x1000000000000000) != 0)
    {
      v6 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v7 = a1 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v6 = (char *)_StringObject.sharedUTF8.getter();
    }
    v8 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 0x40u, 0);
    if ((v8 & 1) != 0)
      goto LABEL_8;
  }
  v17 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v17 = a1 & 0xFFFFFFFFFFFFLL;
  if (v17)
  {
    v27 = a1;
    v28 = a2;
    MEMORY[0x1E0C80A78](v8);
    v25[2] = &v27;
    v26 = 64;
    swift_bridgeObjectRetain();
    v18 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(_QWORD *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v25, a1, a2);
    if (v19)
    {
      v20 = (uint64_t)v18;
      v21 = v19;
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v22 = v27;
      v23 = v28;
      swift_bridgeObjectRetain();
      v20 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v22, v23, 0x40u);
      v21 = v24;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    v20 = 0;
    v21 = 0xE000000000000000;
  }
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + 136) = v20;
  *(_QWORD *)(v3 + 144) = v21;
  return result;
}

uint64_t URLComponents.path.setter(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  *(_BYTE *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 14) = 0;
  v3 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v3 = a1 & 0xFFFFFFFFFFFFLL;
  if (v3)
  {
    v4 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(a1, a2);
    v6 = v5;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v4 = 0;
    v6 = 0xE000000000000000;
  }
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 104) = v4;
  *(_QWORD *)(v2 + 112) = v6;
  return result;
}

uint64_t URLComponents.scheme.setter(uint64_t a1, uint64_t a2)
{
  return URLComponents.scheme.setter(a1, a2, (void (*)(void))URLComponents._URLComponents.setScheme(_:));
}

uint64_t URLComponents.host.setter(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t result;
  char v15;
  unint64_t object;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  unint64_t v26;
  Swift::Int v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unint64_t v35;
  void *v36;
  id v37;
  id v38;
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  unint64_t v56;
  Swift::Int v57;
  uint64_t (*v58)(uint64_t, uint64_t, uint64_t);
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t (*v66)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t *@<X8>);
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unsigned __int8 *v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  char v74;
  Swift::Int v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char v80;
  int32_t (__cdecl *v81)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *);
  unint64_t v82;
  char *v83;
  uint64_t v84;
  BOOL v85;
  int32_t (__cdecl *v86)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *);
  unint64_t v87;
  uint64_t (*v88)(uint64_t, uint64_t, uint64_t);
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  char v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  Swift::Int v96;
  uint64_t (*v97)(uint64_t, uint64_t, uint64_t);
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  _QWORD *v101;
  void *v102;
  uint64_t v103;
  void *v104;
  uint64_t (*v105)(uint64_t, uint64_t, uint64_t);
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t (*v111)(uint64_t, uint64_t, uint64_t);
  uint64_t v112;
  uint64_t v113;
  Swift::String v114;
  Swift::String v115;
  void *v116;
  unsigned __int16 *v117;
  id v118;
  void *v119;
  id v120;
  char v121;
  char v122;
  void *v123;
  unsigned __int16 *v124;
  id v125;
  unsigned __int16 *v126;
  void *v127;
  id v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  _QWORD v132[4];
  _BYTE v133[16];
  int32_t (__cdecl **v134)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *);
  char v135;
  int32_t (__cdecl *v136)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *);
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  int32_t (__cdecl *v142)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *);
  uint64_t v143;

  v4 = v2;
  *(_BYTE *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 12) = 0;
  *(_WORD *)(v2 + 152) = 0;
  if (!a2)
  {
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(v2 + 72) = a1;
    *(_QWORD *)(v2 + 80) = 0;
    return result;
  }
  v7 = specialized Collection.first.getter(a1, a2);
  if ((v7 & 0x1FF) != 0x5B)
    goto LABEL_26;
  if ((a2 & 0x1000000000000000) != 0)
  {
    result = String.UTF8View._foreignCount()();
    if (__OFSUB__(result, 1))
    {
      __break(1u);
      goto LABEL_207;
    }
    v9 = (a1 >> 59) & 1;
    v7 = MEMORY[0x186DA485C](15, result - 1, a1, a2);
LABEL_8:
    if ((v7 & 0xC) != 4 << v9)
      goto LABEL_9;
    goto LABEL_169;
  }
  v8 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v8 = a1 & 0xFFFFFFFFFFFFLL;
  if (v8)
  {
    v7 = (v8 << 16) - 65532;
    LOBYTE(v9) = 1;
    goto LABEL_8;
  }
  __break(1u);
LABEL_169:
  v7 = _StringGuts._slowEnsureMatchingEncoding(_:)(v7, a1, a2);
LABEL_9:
  v10 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v10 = a1 & 0xFFFFFFFFFFFFLL;
  v11 = v7 >> 16;
  if (v7 >> 16 >= v10)
  {
    __break(1u);
    goto LABEL_171;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    v13 = String.UTF8View._foreignSubscript(position:)();
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    v136 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))a1;
    v137 = a2 & 0xFFFFFFFFFFFFFFLL;
    v13 = *((_BYTE *)&v136 + v11);
  }
  else
  {
    if ((a1 & 0x1000000000000000) != 0)
      v12 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    else
      v12 = _StringObject.sharedUTF8.getter();
    v13 = *(_BYTE *)(v12 + v11);
  }
  if (v13 != 93)
  {
LABEL_26:
    if ((a2 & 0x1000000000000000) != 0)
    {
      v136 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))a1;
      v137 = a2;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      StringProtocol._ephemeralString.getter();
      v116 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v117 = (unsigned __int16 *)objc_msgSend(v116, sel__fastCharacterContents);
      v118 = v116;
      if (v117)
      {
        v136 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))a1;
        v137 = a2;
        StringProtocol._ephemeralString.getter();
        v119 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v120 = objc_msgSend(v119, sel_length);
        swift_unknownObjectRelease();
        v121 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v117, (uint64_t)v120, 4u, 1);
      }
      else
      {
        v121 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(a1, a2, 4u, 1);
      }
      v122 = v121;
      swift_bridgeObjectRelease_n();
      if ((v122 & 1) == 0)
        goto LABEL_22;
      goto LABEL_32;
    }
    if ((a2 & 0x2000000000000000) != 0)
    {
      v19 = HIBYTE(a2) & 0xF;
      v136 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))a1;
      v137 = a2 & 0xFFFFFFFFFFFFFFLL;
      v18 = (char *)&v136;
      goto LABEL_31;
    }
    if ((a1 & 0x1000000000000000) != 0)
    {
      v18 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v19 = a1 & 0xFFFFFFFFFFFFLL;
      goto LABEL_31;
    }
LABEL_171:
    v18 = (char *)_StringObject.sharedUTF8.getter();
LABEL_31:
    if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v18, v19, 4u, 1))
      goto LABEL_22;
LABEL_32:
    swift_bridgeObjectRetain();
    v20 = swift_bridgeObjectRelease();
    *(_QWORD *)(v4 + 72) = a1;
    *(_QWORD *)(v4 + 80) = a2;
    LOBYTE(v136) = 37;
    MEMORY[0x1E0C80A78](v20);
    v134 = &v136;
    v21 = specialized Sequence.contains(where:)((uint64_t (*)(_QWORD *))partial apply for specialized closure #1 in Sequence<>.contains(_:), (uint64_t)v133, a1, a2);
    result = swift_bridgeObjectRelease();
    v22 = v21 & 1;
    goto LABEL_159;
  }
  swift_bridgeObjectRetain();
  v15 = specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(a1, a2);
  swift_bridgeObjectRelease();
  if ((v15 & 1) != 0)
    goto LABEL_32;
LABEL_22:
  if (*(_QWORD *)(v4 + 32))
  {
    object = *(_QWORD *)(v4 + 24);
    v17 = *(_QWORD *)(v4 + 32);
  }
  else
  {
    object = 0;
    if (*(_BYTE *)(v4 + 9) == 1)
    {
      v17 = 0;
      if (*(_QWORD *)v4)
      {
        if ((*(_BYTE *)(*(_QWORD *)v4 + 48) & 1) != 0)
        {
          object = 0;
          v17 = 0;
        }
        else
        {
          v52 = String.subscript.getter();
          object = MEMORY[0x186DA4634](v52);
          v17 = v53;
          swift_bridgeObjectRelease();
        }
      }
    }
    else
    {
      v17 = 0;
    }
  }
  if ((specialized static RFC3986Parser.looksLikeIPLiteral<A>(_:)(a1, a2) & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_37;
  }
  if (v17)
  {
    v23 = one-time initialization token for schemesToPercentEncodeHost;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v23 != -1)
      swift_once();
    v24 = static RFC3986Parser.schemesToPercentEncodeHost;
    v25 = String.lowercased()();
    object = (unint64_t)v25._object;
    LOBYTE(v24) = specialized Set.contains(_:)(v25._countAndFlagsBits, (uint64_t)v25._object, v24);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    if ((v24 & 1) != 0)
    {
LABEL_37:
      if ((a2 & 0x2000000000000000) != 0)
        v26 = HIBYTE(a2) & 0xF;
      else
        v26 = a1 & 0xFFFFFFFFFFFFLL;
      if (v26)
      {
        v27 = specialized static RFC3986Parser.looksLikeIPLiteral<A>(_:)(a1, a2);
        if ((v27 & 1) == 0)
        {
          v136 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))a1;
          v137 = a2;
          MEMORY[0x1E0C80A78](v27);
          v134 = &v136;
          v135 = 4;
          swift_bridgeObjectRetain();
LABEL_138:
          v86 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(_QWORD *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v133, a1, a2);
          if (v87)
          {
            v81 = v86;
            v82 = v87;
            swift_bridgeObjectRelease_n();
            goto LABEL_158;
          }
          v88 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v136;
          v89 = v137;
          swift_bridgeObjectRetain();
          v81 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)((unint64_t)v88, v89, 4u);
          v82 = v90;
          swift_bridgeObjectRelease_n();
          goto LABEL_157;
        }
        result = specialized Collection.first.getter(a1, a2);
        if ((result & 0x100) == 0)
        {
          if (result == 91)
          {
            if ((a2 & 0x1000000000000000) == 0)
            {
              v28 = (v26 << 16) - 65532;
              LOBYTE(v29) = 1;
LABEL_46:
              if ((v28 & 0xC) == 4 << v29)
                v28 = _StringGuts._slowEnsureMatchingEncoding(_:)(v28, a1, a2);
              v30 = v28 >> 16;
              if (v28 >> 16 >= v26)
              {
                __break(1u);
              }
              else
              {
                if ((a2 & 0x1000000000000000) != 0)
                {
                  v32 = String.UTF8View._foreignSubscript(position:)();
                }
                else if ((a2 & 0x2000000000000000) != 0)
                {
                  v136 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))a1;
                  v137 = a2 & 0xFFFFFFFFFFFFFFLL;
                  v32 = *((_BYTE *)&v136 + v30);
                }
                else
                {
                  if ((a1 & 0x1000000000000000) != 0)
                    v31 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
                  else
                    v31 = _StringObject.sharedUTF8.getter();
                  v32 = *(_BYTE *)(v31 + v30);
                }
                if (v32 == 93)
                {
                  v54 = specialized Collection<>.firstIndex(of:)(0x25u, a1, a2);
                  if ((v55 & 1) != 0)
                  {
                    swift_bridgeObjectRetain();
                    if ((specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(a1, a2) & 1) == 0)
                    {
                      swift_bridgeObjectRelease_n();
                      result = swift_bridgeObjectRelease();
                      *(_QWORD *)(v4 + 72) = 0;
                      *(_QWORD *)(v4 + 80) = 0;
                      *(_BYTE *)(v4 + 153) = 1;
                      return result;
                    }
LABEL_148:
                    v136 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))a1;
                    v137 = a2;
                    v81 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))String.init<A>(_:)();
                    v82 = v95;
                  }
                  else
                  {
                    v56 = v54;
                    if ((a2 & 0x1000000000000000) != 0)
                    {
                      v57 = String.UTF8View._foreignCount()();
                      if (__OFSUB__(v57, 1))
                      {
                        __break(1u);
                        goto LABEL_200;
                      }
                      v26 = MEMORY[0x186DA485C](15, v57 - 1, a1, a2);
                    }
                    else
                    {
                      v26 = (v26 << 16) - 65532;
                    }
                    if (v26 >> 14 < v56 >> 14)
                    {
                      __break(1u);
                      goto LABEL_191;
                    }
                    swift_bridgeObjectRetain_n();
                    v58 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))String.subscript.getter();
                    v60 = v59;
                    v136 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v58;
                    v137 = v61;
                    v138 = v62;
                    v139 = v59;
                    MEMORY[0x1E0C80A78](v58);
                    v134 = &v136;
                    v135 = 8;
                    v66 = closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply;
LABEL_153:
                    v101 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5((_QWORD *(*)(_QWORD *__return_ptr, _QWORD, _QWORD))v66, (uint64_t)v133, v64, v65, v63, v60);
                    if (v102)
                    {
                      v103 = (uint64_t)v101;
                      v104 = v102;
                    }
                    else
                    {
                      v105 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v136;
                      v106 = v137;
                      v107 = v138;
                      v108 = v139;
                      swift_bridgeObjectRetain();
                      v103 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)((unint64_t)v105, v106, v107, v108, 8u);
                      v104 = v109;
                      swift_bridgeObjectRelease();
                    }
                    v110 = String.subscript.getter();
                    v111 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x186DA4634](v110);
                    v113 = v112;
                    swift_bridgeObjectRelease();
                    v136 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v111;
                    v137 = v113;
                    v114._countAndFlagsBits = v103;
                    v114._object = v104;
                    String.append(_:)(v114);
                    swift_bridgeObjectRelease();
                    v115._countAndFlagsBits = 93;
                    v115._object = (void *)0xE100000000000000;
                    String.append(_:)(v115);
                    swift_bridgeObjectRelease_n();
                    swift_bridgeObjectRelease();
                    v81 = v136;
                    v82 = v137;
                  }
LABEL_157:
                  swift_bridgeObjectRelease();
                  goto LABEL_158;
                }
              }
              __break(1u);
LABEL_182:
              v136 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v26;
              v137 = object;
              lazy protocol witness table accessor for type String and conformance String();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              StringProtocol._ephemeralString.getter();
              v123 = (void *)String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              v124 = (unsigned __int16 *)objc_msgSend(v123, sel__fastCharacterContents);
              v125 = v123;
              if (v124)
              {
                v126 = v124;
                v136 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v26;
                v137 = object;
                StringProtocol._ephemeralString.getter();
                v127 = (void *)String._bridgeToObjectiveCImpl()();
                swift_bridgeObjectRelease();
                v128 = objc_msgSend(v127, sel_length);
                swift_unknownObjectRelease();
                v73 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v126, (uint64_t)v128, 4u, 1);
              }
              else
              {
LABEL_197:
                v73 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v26, object, 4u, 1);
              }
LABEL_114:
              v74 = v73;
              swift_bridgeObjectRelease_n();
              if ((v74 & 1) != 0)
                goto LABEL_136;
              goto LABEL_115;
            }
          }
          else
          {
            __break(1u);
          }
          result = String.UTF8View._foreignCount()();
          if (!__OFSUB__(result, 1))
          {
            v29 = (a1 >> 59) & 1;
            v28 = MEMORY[0x186DA485C](15, result - 1, a1, a2);
            goto LABEL_46;
          }
LABEL_209:
          __break(1u);
LABEL_210:
          __break(1u);
LABEL_211:
          __break(1u);
          return result;
        }
LABEL_207:
        __break(1u);
LABEL_208:
        __break(1u);
        goto LABEL_209;
      }
LABEL_129:
      swift_bridgeObjectRelease();
      v81 = 0;
      v82 = 0xE000000000000000;
      goto LABEL_158;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  v33 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v3 = HIBYTE(a2) & 0xF;
  else
    v3 = a1 & 0xFFFFFFFFFFFFLL;
  if (v3)
  {
    if ((a2 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain_n();
      goto LABEL_72;
    }
    if ((a2 & 0x2000000000000000) != 0)
    {
      v136 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))a1;
      v137 = a2 & 0xFFFFFFFFFFFFFFLL;
      v142 = @nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
      v143 = 0;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)&v136, HIBYTE(a2) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v142, 1, (unsigned __int8 *)&v136, HIBYTE(a2) & 0xF, (uint64_t *)&v140);
      v26 = v140;
      object = v141;
      swift_release();
      goto LABEL_71;
    }
    if ((a1 & 0x1000000000000000) == 0)
      goto LABEL_189;
    v34 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    goto LABEL_68;
  }
  v26 = 0;
  object = 0xE000000000000000;
  while (1)
  {
LABEL_76:
    v45 = specialized Collection.first.getter(v26, object);
    if ((v45 & 0x1FF) != 0x5B)
      goto LABEL_130;
    if ((object & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignCount()();
      if (__OFSUB__(result, 1))
        goto LABEL_210;
      v47 = (v26 >> 59) & 1;
      v45 = MEMORY[0x186DA485C](15, result - 1, v26, object);
LABEL_82:
      if ((v45 & 0xC) != 4 << v47)
        goto LABEL_83;
      goto LABEL_187;
    }
    v46 = HIBYTE(object) & 0xF;
    if ((object & 0x2000000000000000) == 0)
      v46 = v26 & 0xFFFFFFFFFFFFLL;
    if (v46)
    {
      v45 = (v46 << 16) - 65532;
      LOBYTE(v47) = 1;
      goto LABEL_82;
    }
    __break(1u);
LABEL_187:
    v45 = _StringGuts._slowEnsureMatchingEncoding(_:)(v45, v26, object);
LABEL_83:
    v48 = HIBYTE(object) & 0xF;
    if ((object & 0x2000000000000000) == 0)
      v48 = v26 & 0xFFFFFFFFFFFFLL;
    v49 = v45 >> 16;
    if (v45 >> 16 < v48)
      break;
    __break(1u);
LABEL_189:
    v34 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    v33 = v129;
LABEL_68:
    v136 = @nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
    v137 = 0;
    swift_bridgeObjectRetain_n();
    v26 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v34, v33, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v136, 1, v34, v33);
    object = v35;
LABEL_71:
    swift_bridgeObjectRelease();
    if (object == 1)
    {
LABEL_72:
      v136 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))a1;
      v137 = a2;
      lazy protocol witness table accessor for type String and conformance String();
      StringProtocol._ephemeralString.getter();
      v36 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v37 = objc_msgSend(v36, sel__fastCharacterContents);
      v38 = v36;
      if (!v37)
      {
        v136 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))a1;
        v137 = a2;
        swift_bridgeObjectRetain();
        v67 = String.init<A>(_:)();
        v69 = v68;
        if ((v68 & 0x1000000000000000) != 0)
          goto LABEL_201;
        goto LABEL_107;
      }
      v136 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))a1;
      v137 = a2;
      StringProtocol._ephemeralString.getter();
      v39 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v40 = objc_msgSend(v39, sel_length);
      v41 = swift_unknownObjectRelease();
      MEMORY[0x1E0C80A78](v41);
      LOBYTE(v134) = 1;
      MEMORY[0x1E0C80A78](v42);
      v132[2] = v37;
      v132[3] = v40;
      v26 = specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)((uint64_t)v37, (uint64_t)v40, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToASCII(_:_:_:_:_:_:_:), 0, (uint64_t (*)(_QWORD))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, v43, (uint64_t (*)(uint64_t, _QWORD))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, (uint64_t)v132);
      object = v44;
      swift_bridgeObjectRelease_n();
      if (!object)
        goto LABEL_74;
    }
    else
    {
      swift_bridgeObjectRelease_n();
      if (!object)
        goto LABEL_74;
    }
  }
  if ((object & 0x1000000000000000) != 0)
  {
    v51 = String.UTF8View._foreignSubscript(position:)();
  }
  else if ((object & 0x2000000000000000) != 0)
  {
    v136 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v26;
    v137 = object & 0xFFFFFFFFFFFFFFLL;
    v51 = *((_BYTE *)&v136 + v49);
  }
  else
  {
    if ((v26 & 0x1000000000000000) != 0)
      v50 = (object & 0xFFFFFFFFFFFFFFFLL) + 32;
    else
      v50 = _StringObject.sharedUTF8.getter();
    v51 = *(_BYTE *)(v50 + v49);
  }
  if (v51 == 93)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v73 = specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(v26, object);
    goto LABEL_114;
  }
LABEL_130:
  if ((object & 0x1000000000000000) != 0)
    goto LABEL_182;
  if ((object & 0x2000000000000000) != 0)
  {
    v84 = HIBYTE(object) & 0xF;
    v136 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v26;
    v137 = object & 0xFFFFFFFFFFFFFFLL;
    v83 = (char *)&v136;
  }
  else
  {
    if ((v26 & 0x1000000000000000) != 0)
    {
      v83 = (char *)((object & 0xFFFFFFFFFFFFFFFLL) + 32);
      v84 = v26 & 0xFFFFFFFFFFFFLL;
      goto LABEL_135;
    }
LABEL_191:
    v83 = (char *)_StringObject.sharedUTF8.getter();
  }
LABEL_135:
  v85 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v83, v84, 4u, 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v85)
  {
LABEL_136:
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(v4 + 72) = v26;
    *(_QWORD *)(v4 + 80) = object;
    return result;
  }
LABEL_115:
  swift_bridgeObjectRelease();
  *(_BYTE *)(v4 + 153) = 1;
  if (!v3)
    goto LABEL_129;
  while (2)
  {
    v75 = specialized static RFC3986Parser.looksLikeIPLiteral<A>(_:)(a1, a2);
    if ((v75 & 1) == 0)
    {
      v136 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))a1;
      v137 = a2;
      MEMORY[0x1E0C80A78](v75);
      v134 = &v136;
      v135 = 4;
      swift_bridgeObjectRetain();
      goto LABEL_138;
    }
    result = specialized Collection.first.getter(a1, a2);
    if ((result & 0x100) != 0)
      goto LABEL_208;
    if (result == 91)
    {
      if ((a2 & 0x1000000000000000) == 0)
      {
        v76 = (v3 << 16) - 65532;
        LOBYTE(v77) = 1;
        goto LABEL_121;
      }
    }
    else
    {
      __break(1u);
    }
    result = String.UTF8View._foreignCount()();
    if (__OFSUB__(result, 1))
      goto LABEL_211;
    v77 = (a1 >> 59) & 1;
    v76 = MEMORY[0x186DA485C](15, result - 1, a1, a2);
LABEL_121:
    if ((v76 & 0xC) == 4 << v77)
      v76 = _StringGuts._slowEnsureMatchingEncoding(_:)(v76, a1, a2);
    v78 = v76 >> 16;
    if (v76 >> 16 >= v3)
    {
      __break(1u);
LABEL_196:
      __break(1u);
      goto LABEL_197;
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
      v80 = String.UTF8View._foreignSubscript(position:)();
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v136 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))a1;
      v137 = a2 & 0xFFFFFFFFFFFFFFLL;
      v80 = *((_BYTE *)&v136 + v78);
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
        v79 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      else
        v79 = _StringObject.sharedUTF8.getter();
      v80 = *(_BYTE *)(v79 + v78);
    }
    if (v80 != 93)
      goto LABEL_196;
    v91 = specialized Collection<>.firstIndex(of:)(0x25u, a1, a2);
    if ((v92 & 1) == 0)
    {
      v93 = v91;
      if ((a2 & 0x1000000000000000) == 0)
      {
        v94 = (v3 << 16) - 65532;
        goto LABEL_151;
      }
      v96 = String.UTF8View._foreignCount()();
      if (!__OFSUB__(v96, 1))
      {
        v94 = MEMORY[0x186DA485C](15, v96 - 1, a1, a2);
LABEL_151:
        if (v94 >> 14 >= v93 >> 14)
        {
          swift_bridgeObjectRetain_n();
          v97 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))String.subscript.getter();
          v60 = v98;
          v136 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v97;
          v137 = v99;
          v138 = v100;
          v139 = v98;
          MEMORY[0x1E0C80A78](v97);
          v134 = &v136;
          v135 = 8;
          v66 = partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:);
          goto LABEL_153;
        }
LABEL_200:
        __break(1u);
LABEL_201:
        v67 = static String._copying(_:)();
        v131 = v130;
        swift_bridgeObjectRelease();
        v69 = v131;
LABEL_107:
        object = (unint64_t)@nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
        if ((v69 & 0x2000000000000000) != 0)
        {
          v136 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v67;
          v137 = v69 & 0xFFFFFFFFFFFFFFLL;
          v142 = @nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
          v143 = 0;
          closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)&v136, HIBYTE(v69) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v142, 1, (unsigned __int8 *)&v136, HIBYTE(v69) & 0xF, (uint64_t *)&v140);
          v26 = v140;
          object = v141;
          swift_release();
        }
        else
        {
          if ((v67 & 0x1000000000000000) != 0)
          {
            v70 = (unsigned __int8 *)((v69 & 0xFFFFFFFFFFFFFFFLL) + 32);
            v71 = v67 & 0xFFFFFFFFFFFFLL;
            goto LABEL_110;
          }
LABEL_205:
          v70 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
LABEL_110:
          v136 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))object;
          v137 = 0;
          v26 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v70, v71, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v136, 1, v70, v71);
          object = v72;
        }
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        if (object)
          goto LABEL_76;
LABEL_74:
        *(_BYTE *)(v4 + 153) = 1;
        continue;
      }
      __break(1u);
      goto LABEL_205;
    }
    break;
  }
  swift_bridgeObjectRetain();
  if ((specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(a1, a2) & 1) != 0)
    goto LABEL_148;
  swift_bridgeObjectRelease_n();
  v81 = 0;
  v82 = 0;
LABEL_158:
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v4 + 72) = v81;
  *(_QWORD *)(v4 + 80) = v82;
  v22 = 1;
LABEL_159:
  *(_BYTE *)(v4 + 152) = v22;
  return result;
}

void static URLComponents._unconditionallyBridgeFromObjectiveC(_:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[168];
  _QWORD v11[2];
  char v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int16 v22;
  _BYTE v23[160];
  _OWORD v24[8];
  _OWORD v25[2];

  if (a1)
  {
    v10[160] = 1;
    v11[0] = 0;
    v11[1] = 0;
    v12 = 0;
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v17 = 0;
    v18 = 1;
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v22 = 0;
    destructiveProjectEnumData for PredicateCodableError(v11, a2);
    outlined init with take of LocalePreferences?((uint64_t)v11, (uint64_t)v10, &demangling cache variable for type metadata for URLComponents?);
    v5 = a1;
    static URLComponents._conditionallyBridgeFromObjectiveC(_:result:)(v5, (uint64_t)v10);
    outlined init with take of LocalePreferences?((uint64_t)v10, (uint64_t)v23, &demangling cache variable for type metadata for URLComponents?);
    outlined init with take of LocalePreferences?((uint64_t)v23, (uint64_t)v24, &demangling cache variable for type metadata for URLComponents?);
    if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)v24) == 1)
    {
      __break(1u);
    }
    else
    {

      v6 = v24[7];
      *(_OWORD *)(a3 + 96) = v24[6];
      *(_OWORD *)(a3 + 112) = v6;
      *(_OWORD *)(a3 + 128) = v25[0];
      *(_OWORD *)(a3 + 138) = *(_OWORD *)((char *)v25 + 10);
      v7 = v24[3];
      *(_OWORD *)(a3 + 32) = v24[2];
      *(_OWORD *)(a3 + 48) = v7;
      v8 = v24[5];
      *(_OWORD *)(a3 + 64) = v24[4];
      *(_OWORD *)(a3 + 80) = v8;
      v9 = v24[1];
      *(_OWORD *)a3 = v24[0];
      *(_OWORD *)(a3 + 16) = v9;
    }
  }
  else
  {
    LOBYTE(v24[0]) = 1;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 0;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_OWORD *)(a3 + 72) = 0u;
    *(_QWORD *)(a3 + 88) = 0;
    *(_BYTE *)(a3 + 96) = 1;
    *(_OWORD *)(a3 + 104) = 0u;
    *(_OWORD *)(a3 + 120) = 0u;
    *(_OWORD *)(a3 + 136) = 0u;
    *(_WORD *)(a3 + 152) = 0;
  }
}

ValueMetadata *type metadata accessor for NSRunLoop.SchedulerTimeType.Stride()
{
  return &type metadata for NSRunLoop.SchedulerTimeType.Stride;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance UInt8()
{
  unsigned __int8 *v0;

  return objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedChar_, *v0);
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> URL.checkResourceIsReachable()()
{
  return URL.checkResourceIsReachable()((SEL *)&selRef_checkResourceIsReachableAndReturnError_) & 1;
}

id URL.checkResourceIsReachable()(SEL *a1)
{
  void **v1;
  void *v2;
  id v3;
  id v5[2];

  v5[1] = *(id *)MEMORY[0x1E0C80C00];
  v2 = *v1;
  v5[0] = 0;
  v3 = objc_msgSend(v2, *a1, v5);
  if (v5[0])
  {
    v5[0];
    swift_willThrow();
  }
  return v3;
}

void sub_18190528C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

_QWORD *initializeBufferWithCopyOfBuffer for ScopeDescription(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void static MeasurementFormatUnitUsage.asProvided.getter(_BYTE *a1@<X8>)
{
  *a1 = 13;
}

uint64_t type metadata instantiation function for KeyPathComparator()
{
  return swift_allocateGenericValueMetadata();
}

ValueMetadata *type metadata accessor for JSONEncoder.KeyEncodingStrategy()
{
  return &type metadata for JSONEncoder.KeyEncodingStrategy;
}

uint64_t URL.debugDescription.getter()
{
  uint64_t v0;
  unint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  Swift::String v6;
  id v7;
  id v8;
  id v9;
  char v10;
  id v11;
  uint64_t result;
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  Swift::String v29;
  id v30;
  unint64_t v31;
  id v32;
  id v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  Swift::String v42;
  void *v43;
  uint64_t v44;
  unint64_t v45;
  Swift::String v46;
  Swift::String v47;
  id v48;
  unint64_t v49;
  uint64_t v50;

  v2 = *(void **)v0;
  v1 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  if (!_foundation_swift_url_feature_enabled())
  {
    v7 = objc_msgSend(v2, sel_debugDescription);
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);

    return (uint64_t)v8;
  }
  swift_retain();
  v4 = v2;
  swift_retain();
  if (!_foundation_swift_url_feature_enabled())
  {
    v9 = objc_msgSend(v4, sel_description);
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    swift_release();
    swift_release();

    return (uint64_t)v8;
  }
  v48 = v4;
  v49 = v1;
  v50 = v3;
  URL.scheme.getter();
  if (!v5)
    goto LABEL_18;
  v6 = String.lowercased()();
  swift_bridgeObjectRelease();
  if (v6._countAndFlagsBits == 1635017060 && v6._object == (void *)0xE400000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0)
      goto LABEL_18;
  }
  v11 = v4;
  swift_retain();
  swift_retain();
  result = _foundation_swift_url_feature_enabled();
  if ((_DWORD)result)
  {
    if (!v1)
    {
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();

  }
  else
  {
    v13 = objc_msgSend(v11, sel_relativeString);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    swift_release();
    swift_release();

  }
  v14 = String.count.getter();
  swift_bridgeObjectRelease();
  if (v14 < 129)
  {
LABEL_18:
    v16 = v4;
    swift_retain();
    swift_retain();
    result = _foundation_swift_url_feature_enabled();
    if (!(_DWORD)result)
    {
      v18 = objc_msgSend(v16, sel_relativeString);
      v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
      v17 = v19;
      swift_release();
      swift_release();

      goto LABEL_28;
    }
    if (v1)
    {
      v8 = *(id *)(v1 + 16);
      v17 = *(void **)(v1 + 24);
      swift_bridgeObjectRetain();
      swift_release();
      swift_release();

      goto LABEL_28;
    }
    __break(1u);
    goto LABEL_33;
  }
  v48 = 0;
  v49 = 0xE000000000000000;
  v15 = v11;
  swift_retain();
  swift_retain();
  result = _foundation_swift_url_feature_enabled();
  if (!(_DWORD)result)
  {
    v20 = objc_msgSend(v15, sel_relativeString);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    swift_release();
    swift_release();

    goto LABEL_23;
  }
  if (!v1)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  swift_bridgeObjectRetain();
  swift_release();
  swift_release();

LABEL_23:
  v21 = specialized Collection.prefix(_:)(120);
  v23 = v22;
  v25 = v24;
  v27 = v26;
  swift_bridgeObjectRelease();
  v28._countAndFlagsBits = MEMORY[0x186DA4634](v21, v23, v25, v27);
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v29._countAndFlagsBits = 0x202E2E2E20;
  v29._object = (void *)0xE500000000000000;
  String.append(_:)(v29);
  v30 = v15;
  swift_retain();
  swift_retain();
  result = _foundation_swift_url_feature_enabled();
  if (!(_DWORD)result)
  {
    v33 = objc_msgSend(v30, sel_relativeString);
    v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
    v31 = v34;
    swift_release();
    swift_release();

    goto LABEL_27;
  }
  if (v1)
  {
    v32 = *(id *)(v1 + 16);
    v31 = *(_QWORD *)(v1 + 24);
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();

LABEL_27:
    v35 = specialized BidirectionalCollection.suffix(_:)(8uLL, (uint64_t)v32, v31);
    v37 = v36;
    v39 = v38;
    v41 = v40;
    swift_bridgeObjectRelease();
    v42._countAndFlagsBits = MEMORY[0x186DA4634](v35, v37, v39, v41);
    String.append(_:)(v42);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v8 = v48;
    v17 = (void *)v49;
LABEL_28:
    URL.baseURL.getter((uint64_t *)&v48);
    v43 = v48;
    if (v48)
    {
      v45 = v49;
      v44 = v50;
      v48 = 0;
      v49 = 0xE000000000000000;
      v46._countAndFlagsBits = (uint64_t)v8;
      v46._object = v17;
      String.append(_:)(v46);
      swift_bridgeObjectRelease();
      v47._countAndFlagsBits = 539831584;
      v47._object = (void *)0xE400000000000000;
      String.append(_:)(v47);
      specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v43, v45, v44);
      outlined consume of URL?(v43);
      swift_release();
      swift_release();

      return (uint64_t)v48;
    }
    else
    {
      swift_release();
      swift_release();

    }
    return (uint64_t)v8;
  }
LABEL_35:
  __break(1u);
  return result;
}

NSNumber __swiftcall Int64._bridgeToObjectiveC()()
{
  uint64_t v0;

  return (NSNumber)objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithLongLong_, v0);
}

void Data.makeIterator()(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_1819058B8()
{
  unint64_t v0;
  uint64_t v1;

  outlined copy of Data._Representation(v1, v0);
  Data.Iterator.init(_:at:)(v1, v0);
}

double static Calendar.autoupdatingCurrent.getter@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v2;
  os_unfair_lock_s *v3;
  double result;
  __int128 v5;

  if (one-time initialization token for cache != -1)
    swift_once();
  v2 = static CalendarCache.cache + 16;
  v3 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in CalendarCache.autoupdatingCurrent.getter(v2, (uint64_t *)&v5);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  result = *(double *)&v5;
  *a1 = v5;
  return result;
}

uint64_t JSONDecoder.dateDecodingStrategy.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char v9;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_BYTE *)a1 + 16);
  v5 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_optionsLock);
  swift_retain();
  os_unfair_lock_lock(v5 + 4);
  swift_release();
  v6 = v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
  v7 = *(void **)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options);
  v8 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 8);
  *(_QWORD *)v6 = v2;
  *(_QWORD *)(v6 + 8) = v3;
  v9 = *(_BYTE *)(v6 + 16);
  *(_BYTE *)(v6 + 16) = v4;
  outlined consume of JSONEncoder.DateEncodingStrategy(v7, v8, v9);
  swift_retain();
  os_unfair_lock_unlock(v5 + 4);
  return swift_release();
}

uint64_t Locale.Language.init(identifier:)@<X0>(uint64_t *a1@<X8>)
{
  int Language;
  uint64_t v3;
  uint64_t v4;
  int Script;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int Country;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  void *object;
  Swift::String v17;
  uint64_t v18;
  void *v19;
  uint64_t result;
  void *v21;
  Swift::String v22;
  _BYTE v23[272];
  uint64_t countAndFlagsBits;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[258];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  String.utf8CString.getter();
  Language = uloc_getLanguage();
  v3 = swift_release();
  if (Language <= 0)
  {
    v25 = 0;
    v26 = 0;
  }
  else
  {
    v29[Language] = 0;
    v3 = MEMORY[0x186DA4658](v29);
    v25 = v4;
    v26 = v3;
  }
  MEMORY[0x1E0C80A78](v3);
  LODWORD(v27) = 0;
  String.utf8CString.getter();
  Script = uloc_getScript();
  v6 = swift_release();
  v7 = 0;
  v8 = 0;
  if (Script > 0)
  {
    v23[Script] = 0;
    v6 = MEMORY[0x186DA4658](v23);
    v7 = v6;
    v8 = v9;
  }
  MEMORY[0x1E0C80A78](v6);
  LODWORD(v27) = 0;
  String.utf8CString.getter();
  Country = uloc_getCountry();
  swift_release();
  v11 = 0;
  v12 = 0;
  if ((int)v27 <= 0 && Country > 0)
  {
    v23[Country] = 0;
    v11 = MEMORY[0x186DA4658](v23);
    v12 = v13;
  }
  swift_bridgeObjectRelease();
  v14 = v25;
  if (v25)
  {
    v15 = String.lowercased()();
    countAndFlagsBits = v15._countAndFlagsBits;
    object = v15._object;
    if (v8)
      goto LABEL_11;
LABEL_14:
    v7 = 0;
    v18 = 0;
    v19 = 0;
    if (v12)
      goto LABEL_12;
LABEL_15:
    v11 = 0;
    result = 0;
    v21 = 0;
    goto LABEL_16;
  }
  v26 = 0;
  countAndFlagsBits = 0;
  object = 0;
  if (!v8)
    goto LABEL_14;
LABEL_11:
  v27 = v7;
  v28 = v8;
  swift_bridgeObjectRetain_n();
  String.init<A>(_:)();
  v17 = String._capitalized()();
  v18 = v17._countAndFlagsBits;
  v19 = v17._object;
  swift_bridgeObjectRelease();
  v14 = v25;
  swift_bridgeObjectRelease();
  if (!v12)
    goto LABEL_15;
LABEL_12:
  v22 = String.uppercased()();
  v21 = v22._object;
  result = v22._countAndFlagsBits;
LABEL_16:
  *a1 = v26;
  a1[1] = v14;
  a1[2] = countAndFlagsBits;
  a1[3] = (uint64_t)object;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v18;
  a1[7] = (uint64_t)v19;
  a1[8] = v11;
  a1[9] = v12;
  a1[10] = result;
  a1[11] = (uint64_t)v21;
  return result;
}

uint64_t outlined init with take of (key: String, value: Encodable)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Encodable)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t URL.standardizedFileURL.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  Swift::String v8;
  id v9;
  void *v10;
  id v11;
  unint64_t result;
  __int128 v13;
  unsigned __int8 v14;
  id v15;
  char v16;
  Swift::String v17;
  Swift::Int countAndFlagsBits;
  unint64_t object;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  id v31;
  Swift::String v32;
  uint64_t v33;
  Swift::Int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  id *v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  char v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  void *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  id v72;
  Swift::String v73;
  __int16 v74;
  uint64_t *v75;
  char v76;
  unsigned __int8 v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD v80[2];
  id v81;
  _QWORD *v82;
  id v83;
  __int128 v84;
  uint64_t v85;
  char v86;
  Swift::String v87;

  v3 = *(void **)v1;
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  if (_foundation_swift_url_feature_enabled())
  {
    swift_retain();
    v6 = v3;
    swift_retain();
    if (_foundation_swift_url_feature_enabled())
    {
      v83 = v6;
      *(_QWORD *)&v84 = v4;
      *((_QWORD *)&v84 + 1) = v5;
      URL.scheme.getter();
      if (!v7)
      {
        swift_release();
        swift_release();

        goto LABEL_50;
      }
      v8 = String.lowercased()();
      swift_bridgeObjectRelease();
      if (v8._countAndFlagsBits == 1701603686 && v8._object == (void *)0xE400000000000000)
      {
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
      }
      else
      {
        v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        if ((v16 & 1) == 0)
          goto LABEL_50;
      }
    }
    else
    {
      v14 = objc_msgSend(v6, sel_isFileURL);
      swift_release();
      swift_release();

      if ((v14 & 1) == 0)
        goto LABEL_50;
    }
    v82 = a1;
    v83 = v6;
    *(_QWORD *)&v84 = v4;
    *((_QWORD *)&v84 + 1) = v5;
    v81 = v6;
    swift_retain();
    swift_retain();
    v17 = URL.path(percentEncoded:)(1);
    countAndFlagsBits = v17._countAndFlagsBits;
    v87 = v17;
    swift_bridgeObjectRetain();
    if (String.count.getter() < 2)
    {
      object = (unint64_t)v17._object;
    }
    else
    {
      object = (unint64_t)v17._object;
      if ((specialized BidirectionalCollection.last.getter(v17._countAndFlagsBits, (unint64_t)v17._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        countAndFlagsBits = v87._countAndFlagsBits;
        object = (unint64_t)v87._object;
      }
    }
    v83 = (id)Set.init(minimumCapacity:)();
    specialized Set._Variant.insert(_:)(&v86, 0x2FuLL);
    v20 = (uint64_t)v83;
    v21 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if ((object & 0x2000000000000000) != 0)
      v22 = HIBYTE(object) & 0xF;
    else
      v22 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (v22)
    {
      v80[1] = v80;
      swift_bridgeObjectRetain();
      if ((object & 0x1000000000000000) != 0)
      {
        v25 = 0;
        v26 = 1;
      }
      else
      {
        if ((object & 0x2000000000000000) != 0)
        {
          v83 = (id)countAndFlagsBits;
          *(_QWORD *)&v84 = object & 0xFFFFFFFFFFFFFFLL;
          v23 = &v83;
          v24 = HIBYTE(object) & 0xF;
        }
        else
        {
          if ((countAndFlagsBits & 0x1000000000000000) != 0)
          {
            v23 = (id *)((object & 0xFFFFFFFFFFFFFFFLL) + 32);
          }
          else
          {
            v23 = (id *)_StringObject.sharedUTF8.getter();
            v21 = v78;
          }
          v24 = v21;
        }
        v25 = specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)((uint64_t)v23, v24, v20, (uint64_t (*)(_QWORD))specialized StringProtocol.hexToAscii(_:));
        v26 = v28;
      }
      if (v26 == 1)
      {
        swift_bridgeObjectRetain();
        v25 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(countAndFlagsBits, object, v20);
        v26 = v29;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        v27 = v81;
        if (v26)
          goto LABEL_32;
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v27 = v81;
        if (v26)
          goto LABEL_32;
      }
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v25 = 0;
      v26 = 0xE000000000000000;
LABEL_35:
      swift_bridgeObjectRelease();
      v30 = HIBYTE(v26) & 0xF;
      if ((v26 & 0x2000000000000000) == 0)
        v30 = v25 & 0xFFFFFFFFFFFFLL;
      a1 = v82;
      if (v30)
      {
        v83 = v27;
        *(_QWORD *)&v84 = v4;
        *((_QWORD *)&v84 + 1) = v5;
        v31 = v27;
        swift_retain();
        swift_retain();
        v32 = URL.path(percentEncoded:)(1);
        v87 = v32;
        swift_bridgeObjectRetain();
        if (String.count.getter() >= 2
          && (specialized BidirectionalCollection.last.getter(v32._countAndFlagsBits, (unint64_t)v32._object) & 0x1FF) == 0x2F)
        {
          specialized RangeReplaceableCollection<>.popLast()();
          swift_bridgeObjectRelease();
        }
        v83 = (id)Set.init(minimumCapacity:)();
        specialized Set._Variant.insert(_:)(&v86, 0x2FuLL);
        v33 = (uint64_t)v83;
        v34 = v87._countAndFlagsBits;
        v35 = (unint64_t)v87._object;
        v36 = ((unint64_t)v87._object >> 56) & 0xF;
        v37 = v87._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
        if (((uint64_t)v87._object & 0x2000000000000000) != 0)
          v38 = ((unint64_t)v87._object >> 56) & 0xF;
        else
          v38 = v87._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
        if (v38)
        {
          v81 = v31;
          swift_bridgeObjectRetain();
          if ((v35 & 0x1000000000000000) != 0)
          {
            v42 = 0;
            v43 = 1;
          }
          else
          {
            if ((v35 & 0x2000000000000000) != 0)
            {
              v83 = (id)v34;
              *(_QWORD *)&v84 = v35 & 0xFFFFFFFFFFFFFFLL;
              v39 = &v83;
              v40 = v36;
            }
            else
            {
              if ((v34 & 0x1000000000000000) != 0)
              {
                v39 = (id *)((v35 & 0xFFFFFFFFFFFFFFFLL) + 32);
              }
              else
              {
                v39 = (id *)_StringObject.sharedUTF8.getter();
                v37 = v79;
              }
              v40 = v37;
            }
            v42 = specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)((uint64_t)v39, v40, v33, (uint64_t (*)(_QWORD))specialized StringProtocol.hexToAscii(_:));
            v43 = v44;
          }
          if (v43 == 1)
          {
            swift_bridgeObjectRetain();
            v42 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v34, v35, v33);
            v43 = v45;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            v31 = v81;
            if (v43)
              goto LABEL_56;
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v31 = v81;
            if (v43)
              goto LABEL_56;
          }
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v42 = 0;
          v43 = 0xE000000000000000;
LABEL_59:
          swift_bridgeObjectRetain();
          v46 = specialized Collection.first.getter(v42, v43);
          if (v47)
          {
            if (v46 == 126 && v47 == 0xE100000000000000)
            {
              swift_bridgeObjectRelease();
LABEL_64:
              v49 = specialized Collection<>.firstIndex(of:)(47, 0xE100000000000000, v42, v43);
              if ((v50 & 1) != 0)
              {
                v53 = HIBYTE(v43) & 0xF;
                if ((v43 & 0x2000000000000000) == 0)
                  v53 = v42;
                v54 = v53 << 16;
                if ((v43 & 0x1000000000000000) == 0 || (v42 & 0x800000000000000) != 0)
                  v51 = v54 | 7;
                else
                  v51 = v54 | 0xB;
              }
              else
              {
                v51 = v49;
              }
              result = String.index(after:)();
              if (v51 >> 14 == result >> 14)
              {
                v55 = 0;
                v56 = 0;
              }
              else
              {
                if (v51 >> 14 < result >> 14)
                {
                  __break(1u);
                  return result;
                }
                v57 = String.subscript.getter();
                v55 = MEMORY[0x186DA4634](v57);
                v56 = v58;
                swift_bridgeObjectRelease();
              }
              v59 = static String.homeDirectoryPath(forUser:)(v55, v56);
              v61 = v60;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              v62 = (void *)specialized Collection.suffix(from:)(v51, v42, v43);
              v64 = v63;
              v66 = v65;
              v68 = v67;
              swift_bridgeObjectRelease();
              v87._countAndFlagsBits = v59;
              v87._object = v61;
              v83 = v62;
              *(_QWORD *)&v84 = v64;
              *((_QWORD *)&v84 + 1) = v66;
              v85 = v68;
              lazy protocol witness table accessor for type Substring and conformance Substring();
              swift_bridgeObjectRetain();
              String.append<A>(contentsOf:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v42 = v87._countAndFlagsBits;
              v52 = (unint64_t)v87._object;
LABEL_79:
              v69 = String._standardizingPath.getter(v42, v52);
              v71 = v70;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v72 = v31;
              swift_retain();
              swift_retain();
              if ((_foundation_swift_url_feature_enabled() & 1) != 0)
              {
                v83 = v72;
                *(_QWORD *)&v84 = v4;
                *((_QWORD *)&v84 + 1) = v5;
                v73 = URL.path(percentEncoded:)(1);
                v74 = specialized BidirectionalCollection.last.getter(v73._countAndFlagsBits, (unint64_t)v73._object);
                swift_release();
                swift_release();

                swift_bridgeObjectRelease();
                v75 = v82;
                if ((v74 & 0x1FF) == 0x2F)
                {
LABEL_81:
                  v76 = 0;
LABEL_84:
                  LOBYTE(v87._countAndFlagsBits) = v76;
                  v83 = 0;
                  v84 = 0uLL;
                  return (unint64_t)URL.init(filePath:directoryHint:relativeTo:)(v69, v71, (unsigned __int8 *)&v87, (uint64_t)&v83, v75);
                }
              }
              else
              {
                v77 = objc_msgSend(v72, sel_hasDirectoryPath);
                swift_release();
                swift_release();

                v75 = v82;
                if ((v77 & 1) != 0)
                  goto LABEL_81;
              }
              v76 = 1;
              goto LABEL_84;
            }
            v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v48 & 1) != 0)
              goto LABEL_64;
          }
          v52 = v43;
          goto LABEL_79;
        }
        swift_bridgeObjectRelease();
        v42 = 0;
        v43 = 0xE000000000000000;
LABEL_56:
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_59;
      }
LABEL_50:
      *a1 = v6;
      a1[1] = v4;
      a1[2] = v5;
      v41 = v6;
      swift_retain();
      return swift_retain();
    }
    swift_bridgeObjectRelease();
    v25 = 0;
    v26 = 0xE000000000000000;
    v27 = v81;
LABEL_32:
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_35;
  }
  v9 = objc_msgSend(v3, sel_URLByStandardizingPath);
  if (v9)
  {
    v10 = v9;
    URL.init(reference:)(v9, &v83);

    v11 = v83;
    URL.init(reference:)(v11, &v83);

    swift_release();
    result = swift_release();
    v13 = v84;
    *a1 = v83;
    *(_OWORD *)(a1 + 1) = v13;
  }
  else
  {
    *a1 = v3;
    a1[1] = v4;
    a1[2] = v5;
    swift_retain();
    v15 = v3;
    return swift_retain();
  }
  return result;
}

NSData *encodeURLForDefaults(NSData *result)
{
  NSData *v1;

  if (result)
  {
    v1 = result;
    if (-[NSData isFileURL](result, "isFileURL")
      && !-[NSData isFileReferenceURL](v1, "isFileReferenceURL"))
    {
      return (NSData *)objc_msgSend((id)-[NSData path](v1, "path"), "stringByAbbreviatingWithTildeInPath");
    }
    else
    {
      return +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", v1, 1, 0);
    }
  }
  return result;
}

double protocol witness for Scheduler.now.getter in conformance NSRunLoop@<D0>(double *a1@<X8>)
{
  double result;
  timespec __tp;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  result = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  *a1 = result;
  return result;
}

uint64_t JSONDecoder.dataDecodingStrategy.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  unint64_t v6;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_optionsLock);
  swift_retain();
  os_unfair_lock_lock(v4 + 4);
  swift_release();
  v5 = v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
  v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 24);
  *(_QWORD *)(v5 + 24) = v2;
  *(_QWORD *)(v5 + 32) = v3;
  outlined consume of JSONEncoder.KeyEncodingStrategy(v6);
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  return swift_release();
}

void URL.absoluteURL.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  id v7;
  id v8;
  void *v9;
  __int128 v10;
  id v11;
  id v12;
  id v13;
  id v14;
  __int128 v15;

  v3 = *(_QWORD *)(v1 + 8);
  v13 = *(id *)v1;
  v4 = *(_QWORD *)(v1 + 16);
  if (_foundation_swift_url_feature_enabled())
  {
    if (v4)
    {
      v14 = v13;
      *(_QWORD *)&v15 = v3;
      *((_QWORD *)&v15 + 1) = v4;
      v5 = URL.absoluteString.getter();
      URL.init(string:)(v5, v6, (uint64_t *)&v14);
      swift_bridgeObjectRelease();
      v7 = v14;
      if (v14)
      {
        v4 = *((_QWORD *)&v15 + 1);
        v3 = v15;
      }
      else
      {
        swift_retain();
        v7 = v13;
        swift_retain();
      }
      *a1 = v7;
      a1[1] = v3;
      a1[2] = v4;
    }
    else
    {
      *a1 = v13;
      a1[1] = v3;
      a1[2] = 0;
      swift_retain();
      v11 = v13;
    }
  }
  else
  {
    v8 = objc_msgSend(v13, sel_absoluteURL);
    if (v8)
    {
      v9 = v8;
      URL.init(reference:)(v8, &v14);

      v10 = v15;
      *a1 = v14;
      *(_OWORD *)(a1 + 1) = v10;
    }
    else
    {
      *a1 = v13;
      a1[1] = v3;
      a1[2] = v4;
      swift_retain();
      v12 = v13;
      swift_retain();
    }
  }
}

Swift::Void __swiftcall URLRequest.addValue(_:forHTTPHeaderField:)(Swift::String _, Swift::String forHTTPHeaderField)
{
  uint64_t v2;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized URLRequest._applyMutation<A>(_:)(v2);
}

void protocol witness for Collection.endIndex.getter in conformance IndexSet.RangeView(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 8);
}

double one-time initialization function for cache()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<LocaleCache.State>._Buffer);
  v0 = swift_allocObject();
  *(_DWORD *)(v0 + 124) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  v1 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v0 + 48) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v0 + 56) = v1;
  *(_QWORD *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 72) = 0;
  *(_QWORD *)(v0 + 80) = 0;
  *(_QWORD *)(v0 + 88) = v1;
  *(_QWORD *)(v0 + 96) = v1;
  result = 0.0;
  *(_OWORD *)(v0 + 104) = xmmword_1820FECD0;
  *(_BYTE *)(v0 + 120) = 0;
  static LocaleCache.cache = v0;
  return result;
}

__n128 AttributedString.Runs.Run.range.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;
  __int128 v4;

  v2 = *(_OWORD *)(v1 + 32);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(v1 + 48);
  v4 = *(_OWORD *)(v1 + 64);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t (*Data.Deallocator._deallocator.getter())()
{
  unint64_t *v0;
  unint64_t v1;
  uint64_t (*v2)();

  v1 = *v0;
  if (*v0 >= 4)
    v2 = (uint64_t (*)())*v0;
  else
    v2 = off_1E0F49B58[v1];
  outlined copy of Data.Deallocator(v1);
  return v2;
}

unint64_t outlined copy of Data.Deallocator(unint64_t result)
{
  if (result >= 4)
    return swift_retain();
  return result;
}

uint64_t protocol witness for SingleValueEncodingContainer.encode<A>(_:) in conformance __JSONEncoder(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return __JSONEncoder.encode<A>(_:)(a1, a2, a3);
}

uint64_t __JSONEncoder.encode<A>(_:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = v4;
  v6 = v3;
  if (((*(uint64_t (**)(void))(*v3 + 208))() & 1) == 0)
  {
    __break(1u);
LABEL_9:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_6:
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    return swift_release();
  }
  v10 = v3[18];
  swift_retain();
  v11 = specialized __JSONEncoder.wrapGeneric<A, B>(_:for:_:)(a1, v10, 0, 0, 0, 255, a2, a3);
  if (!v5)
  {
    if (!v11)
    {
      type metadata accessor for JSONReference();
      v12 = swift_allocObject();
      *(_QWORD *)(v12 + 16) = MEMORY[0x1E0DEE9E0];
      *(_QWORD *)(v12 + 24) = 0;
      *(_BYTE *)(v12 + 32) = 4;
    }
    swift_release();
    v13 = swift_retain();
    MEMORY[0x186DA4AFC](v13);
    if (*(_QWORD *)((v6[2] & 0xFFFFFFFFFFFFFF8) + 0x10) < *(_QWORD *)((v6[2] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_6;
    goto LABEL_9;
  }
  return swift_release();
}

NSString *NSHomeDirectory(void)
{
  return NSHomeDirectoryForUser(0);
}

uint64_t static Locale.characterDirection(forLanguage:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  int Language;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int Script;
  uint64_t v8;
  uint64_t v9;
  int Country;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v18;
  Swift::String v19;
  uint64_t v20;
  void *v21;
  Swift::String v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v30[280];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t (*v37)(void);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[258];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;

  v37 = a3;
  v54 = *MEMORY[0x1E0C80C00];
  swift_bridgeObjectRetain();
  LODWORD(v42) = 0;
  String.utf8CString.getter();
  Language = uloc_getLanguage();
  v4 = swift_release();
  if (Language <= 0)
  {
    v5 = 0;
    v39 = 0;
  }
  else
  {
    v41[Language] = 0;
    v4 = MEMORY[0x186DA4658](v41);
    v5 = v4;
    v39 = v6;
  }
  MEMORY[0x1E0C80A78](v4);
  LODWORD(v42) = 0;
  String.utf8CString.getter();
  Script = uloc_getScript();
  swift_release();
  v8 = 0;
  v9 = 0;
  if ((int)v42 <= 0 && Script > 0)
  {
    v30[Script] = 0;
    v8 = MEMORY[0x186DA4658](v30, 0);
  }
  v38 = v9;
  v40 = v8;
  MEMORY[0x1E0C80A78](v8);
  LODWORD(v42) = 0;
  String.utf8CString.getter();
  Country = uloc_getCountry();
  swift_release();
  v11 = 0;
  v12 = 0;
  if ((int)v42 <= 0 && Country > 0)
  {
    v30[Country] = 0;
    v11 = MEMORY[0x186DA4658](v30);
    v12 = v13;
  }
  swift_bridgeObjectRelease();
  v14 = v40;
  if (v39)
  {
    v15 = String.lowercased()();
    countAndFlagsBits = v15._countAndFlagsBits;
    object = v15._object;
    v18 = v38;
    if (v38)
      goto LABEL_12;
LABEL_15:
    v40 = 0;
    v35 = 0;
    v36 = 0;
    if (v12)
      goto LABEL_13;
LABEL_16:
    v23 = v12;
    v24 = 0;
    v20 = 0;
    v21 = 0;
    goto LABEL_17;
  }
  v5 = 0;
  countAndFlagsBits = 0;
  object = 0;
  v18 = v38;
  if (!v38)
    goto LABEL_15;
LABEL_12:
  v42 = v14;
  v43 = v18;
  swift_bridgeObjectRetain_n();
  String.init<A>(_:)();
  v19 = String._capitalized()();
  v35 = v19._object;
  v36 = v19._countAndFlagsBits;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v12)
    goto LABEL_16;
LABEL_13:
  v22 = String.uppercased()();
  v21 = v22._object;
  v20 = v22._countAndFlagsBits;
  v23 = v12;
  v24 = v11;
LABEL_17:
  v31 = v23;
  v32 = v5;
  v33 = v20;
  v34 = v21;
  v42 = v5;
  v25 = v39;
  v26 = v40;
  v43 = v39;
  v44 = countAndFlagsBits;
  v45 = object;
  v46 = v40;
  v27 = v38;
  v47 = v38;
  v48 = v36;
  v49 = v35;
  v50 = v24;
  v51 = v23;
  v52 = v20;
  v53 = v21;
  v28 = v37();
  outlined consume of Locale.LanguageCode?(v32, v25);
  outlined consume of Locale.LanguageCode?(v26, v27);
  outlined consume of Locale.LanguageCode?(v24, v31);
  return v28;
}

uint64_t @objc static NSLocale._characterDirection(forLanguage:)(uint64_t a1, uint64_t a2, void *a3, uint64_t (*a4)(void))
{
  id v5;
  uint64_t v6;
  uint64_t v7;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v7 = static Locale.characterDirection(forLanguage:)((uint64_t)v5, v6, a4);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t Locale.Language.characterDirection.getter()
{
  return Locale.Language.lineLayoutDirection.getter(MEMORY[0x1E0DE63B8]);
}

uint64_t _NSBundleImagesLoadedCallback(unsigned int a1, const void *a2)
{
  uint64_t result;
  void *v5;

  result = _CFGetTSD();
  if (result == 1)
  {
    v5 = malloc_type_calloc(a1 + 1, 8uLL, 0x6004044C4A2DFuLL);
    memcpy(v5, a2, 8 * a1);
    *((_QWORD *)v5 + a1) = 0;
    return _CFSetTSD();
  }
  return result;
}

Swift::Bool __swiftcall IndexSet.contains(_:)(Swift::Int a1)
{
  uint64_t v1;

  return objc_msgSend(*(id *)(*(_QWORD *)v1 + 16), sel_containsIndex_, a1);
}

ValueMetadata *type metadata accessor for Duration.UnitsFormatStyle.Unit()
{
  return &type metadata for Duration.UnitsFormatStyle.Unit;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes()
{
  return &type metadata for AttributeScopes.FoundationAttributes;
}

void NSFreeMapTable(NSMapTable *table)
{
  if (table)
  {

  }
  else
  {
    NSLog((NSString *)CFSTR("%s: map table argument is NULL"), "void NSFreeMapTable(NSMapTable * _Nonnull)");

  }
}

void Data._Representation.replaceSubrange(_:with:count:)()
{
  __asm { BR              X10 }
}

void sub_181907B6C(int a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, uint64_t a10, int a11, uint64_t a12, uint64_t a13, uint64_t __dst, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  size_t v34;
  uint64_t v35;
  uint64_t v36;
  size_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned __int8 v47;
  unsigned __int8 v48;
  unsigned __int8 v49;
  uint64_t v50;
  uint64_t v51;

  LOWORD(v46) = a2;
  BYTE2(v46) = BYTE2(a2);
  HIBYTE(v46) = BYTE3(a2);
  v47 = BYTE4(a2);
  v48 = BYTE5(a2);
  v36 = BYTE6(a2);
  v49 = BYTE6(a2);
  v37 = BYTE6(a2) + v34;
  if (__OFADD__(BYTE6(a2), v34))
  {
    __break(1u);
    JUMPOUT(0x1819080ECLL);
  }
  v38 = v31 - v32;
  if (__OFSUB__(v31, v32))
  {
    __break(1u);
    JUMPOUT(0x1819080FCLL);
  }
  v39 = __OFSUB__(v37, v38);
  v40 = v37 - v38;
  if (v39)
  {
    __break(1u);
    JUMPOUT(0x181908108);
  }
  if (v40)
  {
    if (v40 <= 14)
    {
      Data.InlineData.replaceSubrange(_:with:count:)(v32, v31, v33, v34);
      v42 = v35;
      v43 = v46 | ((unint64_t)v47 << 32) | ((unint64_t)v48 << 40) | ((unint64_t)v49 << 48);
    }
    else
    {
      v50 = v35;
      LOWORD(v51) = a2;
      BYTE2(v51) = BYTE2(a2);
      BYTE3(v51) = BYTE3(a2);
      BYTE4(v51) = BYTE4(a2);
      BYTE5(v51) = BYTE5(a2);
      if ((unint64_t)v40 > 0x7FFFFFFE)
      {
        type metadata accessor for __DataStorage();
        v44 = swift_allocObject();
        __DataStorage.init(bytes:length:)((unint64_t)&v50, v36);
        type metadata accessor for Data.RangeReference();
        v45 = swift_allocObject();
        *(_QWORD *)(v45 + 16) = 0;
        *(_QWORD *)(v45 + 24) = v36;
        v50 = v45;
        v51 = v44;
        Data.LargeSlice.replaceSubrange(_:with:count:)(v32, v31, v33, v34);
        v42 = v50;
        v43 = v51 | 0x8000000000000000;
      }
      else
      {
        type metadata accessor for __DataStorage();
        v41 = swift_allocObject();
        __DataStorage.init(bytes:length:)((unint64_t)&v50, v36);
        LODWORD(v50) = 0;
        HIDWORD(v50) = v36;
        v51 = v41;
        Data.InlineSlice.replaceSubrange(_:with:count:)(v32, v31, v33, v34);
        v42 = v50;
        v43 = v51 | 0x4000000000000000;
      }
    }
    *v30 = v42;
    v30[1] = v43;
  }
  else
  {
    *(_OWORD *)v30 = xmmword_18206AAC0;
  }
}

uint64_t Data.InlineData.replaceSubrange(_:with:count:)(uint64_t a1, uint64_t a2, void *__src, size_t __len)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;

  v5 = *(unsigned __int8 *)(v4 + 14);
  if (v5 < a1 || v5 < a2)
  {
    __break(1u);
    goto LABEL_13;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v8 = __OFSUB__(v5, v7);
  v9 = v5 - v7;
  if (v8)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v10 = v9 + __len;
  if (__OFADD__(v9, __len))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (__OFSUB__(v10, v5))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  result = (uint64_t)closure #1 in Data.InlineData.replaceSubrange(_:with:count:)((char *)v4, (int)v4 + 14, a1, a2, v10 - v5, __len, v5, __src);
  if ((v10 & 0x8000000000000000) == 0 && v10 < 0x100)
  {
    *(_BYTE *)(v4 + 14) = v10;
    return result;
  }
LABEL_17:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *closure #1 in Data.InlineData.replaceSubrange(_:with:count:)(char *result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, size_t __len, uint64_t a7, void *__src)
{
  uint64_t v8;
  char *v12;

  v8 = a4 - a3;
  if (__OFSUB__(a4, a3))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v12 = result;
  if (!a5)
    goto LABEL_9;
  if (!result)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (__OFADD__(a3, __len))
    goto LABEL_15;
  if (__OFADD__(a3, v8))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (__OFSUB__(a7, a3))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (__OFSUB__(a7 - a3, v8))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  result = (char *)memmove(&result[a3 + __len], &result[a4], a7 - a4);
LABEL_9:
  if (__len)
  {
    if (v12)
    {
      if (__src)
        return (char *)memmove(&v12[a3], __src, __len);
      goto LABEL_21;
    }
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
  }
  return result;
}

uint64_t specialized Data.InlineData.init(_:count:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if ((a3 & 0x8000000000000000) == 0 && a3 < 0x100)
  {
    if ((int)a1 > a1 >> 32)
    {
      __break(1u);
    }
    else if (!*(_QWORD *)(a2 + 16) || !__OFSUB__((int)a1, *(_QWORD *)(a2 + 40)))
    {
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      return 0;
    }
    __break(1u);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t result;

  if ((a3 & 0x8000000000000000) != 0 || a3 >= 0x100)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (*(_QWORD *)(a2 + 16))
    {
      if (__OFSUB__(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 40)))
        __break(1u);
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    return 0;
  }
  return result;
}

void Data.InlineSlice.replaceSubrange(_:with:count:)(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  int *v4;
  uint64_t v5;
  int *v6;
  uint64_t v9;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v5 = *v4;
  if (v5 > a1)
  {
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v6 = v4;
  v9 = v4[1];
  if (v9 < a2 || v5 > a2 || v9 < a1)
    goto LABEL_23;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    goto LABEL_16;
  v15 = *v4;
  v14 = v6[1];
  if ((int)v14 < (int)v15)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v16 = *((_QWORD *)v6 + 1);
  v17 = *(_QWORD *)(v16 + 16);
  if (!v17)
  {
    v21 = 0;
    goto LABEL_15;
  }
  v18 = *(_QWORD *)(v16 + 40);
  v19 = __OFSUB__(v15, v18);
  v20 = v15 - v18;
  if (!v19)
  {
    v21 = v17 + v20;
LABEL_15:
    v22 = v14 - v15;
    type metadata accessor for __DataStorage();
    v23 = swift_allocObject();
    __DataStorage.init(bytes:length:copy:deallocator:offset:)(v21, v22, 1, 0, 0, v15);
    *((_QWORD *)v6 + 1) = v23;
    swift_release();
LABEL_16:
    v24 = *v6;
    v25 = v6[1];
    if ((int)v25 >= *v6)
    {
      __DataStorage.replaceBytes(in:with:length:)(a1, a2, a3, a4);
      v26 = a1 - a2 + v25;
      v19 = __OFADD__(v26, a4);
      v27 = v26 + a4;
      if (!v19)
      {
        if (v27 >= (uint64_t)0xFFFFFFFF80000000)
        {
          if (v27 <= 0x7FFFFFFF)
          {
            if (v24 <= (int)v27)
            {
              *v6 = v24;
              v6[1] = v27;
              return;
            }
            goto LABEL_28;
          }
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
          goto LABEL_29;
        }
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

uint64_t NSURLSession.CancelState.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

void sub_18190875C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

ValueMetadata *type metadata accessor for NSRunLoop.SchedulerOptions()
{
  return &type metadata for NSRunLoop.SchedulerOptions;
}

uint64_t Locale.region.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 376))(ObjectType, v1);
}

uint64_t protocol witness for _LocaleProtocol.region.getter in conformance _LocaleAutoupdating()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  if (one-time initialization token for cache != -1)
    swift_once();
  LocaleCache.current.getter();
  v1 = v0;
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 376))(ObjectType, v1);
  return swift_unknownObjectRelease();
}

void _NSKeyValueRemoveObservationInfoForObject(uint64_t a1)
{
  uint64_t v2;
  __CFDictionary *Mutable;
  id Value;

  os_unfair_lock_lock_with_options();
  v2 = ~a1;
  if (NSKeyValueObservationInfoPerObject)
  {
    Value = (id)CFDictionaryGetValue((CFDictionaryRef)NSKeyValueObservationInfoPerObject, (const void *)v2);
    Mutable = (__CFDictionary *)NSKeyValueObservationInfoPerObject;
    if (NSKeyValueObservationInfoPerObject)
      goto LABEL_6;
  }
  else
  {
    Value = 0;
  }
  Mutable = CFDictionaryCreateMutable(0, 0, 0, 0);
  NSKeyValueObservationInfoPerObject = (uint64_t)Mutable;
LABEL_6:
  CFDictionaryRemoveValue(Mutable, (const void *)v2);
  if (NSKeyValueSharedObservationInfoPerObject)
    CFDictionaryRemoveValue((CFMutableDictionaryRef)NSKeyValueSharedObservationInfoPerObject, (const void *)v2);
  os_unfair_lock_unlock(&NSKeyValueObservationInfoLock);

}

void Data.description.getter(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_181908A3C()
{
  Swift::String v0;
  Swift::String v1;
  uint64_t v3;

  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 0x736574796220;
  v1._object = (void *)0xE600000000000000;
  String.append(_:)(v1);
  return v3;
}

uint64_t NSData.subscript.getter(uint64_t a1)
{
  void *v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  uint64_t v8;
  _QWORD v9[6];
  uint64_t v10;
  unsigned __int8 v11;

  v11 = 0;
  v10 = a1;
  v3 = (_QWORD *)swift_allocObject();
  v3[2] = &v10;
  v3[3] = a1;
  v3[4] = &v11;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = partial apply for closure #1 in NSData.subscript.getter;
  *(_QWORD *)(v4 + 24) = v3;
  v9[4] = closure #1 in NSRunLoop.schedule(options:_:)partial apply;
  v9[5] = v4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 1107296256;
  v9[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeRawPointer, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  v9[3] = &block_descriptor_13_0;
  v5 = _Block_copy(v9);
  swift_retain();
  swift_release();
  objc_msgSend(v1, sel_enumerateByteRangesUsingBlock_, v5);
  _Block_release(v5);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v8 = v11;
    swift_release();
    return v8;
  }
  return result;
}

uint64_t __nsurlClass_block_invoke()
{
  uint64_t result;

  result = objc_opt_class();
  qword_1ECD0A210 = result;
  return result;
}

uint64_t Locale.Language.maximalIdentifier.getter()
{
  return Locale.Language.minimalIdentifier.getter((uint64_t (*)(uint64_t, _QWORD, unint64_t))specialized _withFixedCharBuffer(size:_:), (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized _withFixedCharBuffer(size:_:));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, MEMORY[0x1E0DED808]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, MEMORY[0x1E0DED7E8]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, MEMORY[0x1E0DED810]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, MEMORY[0x1E0DED818]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, MEMORY[0x1E0DED830]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, MEMORY[0x1E0DED828]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, MEMORY[0x1E0DED838]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, MEMORY[0x1E0DED840]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, MEMORY[0x1E0DED850]);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4() & 0x1FF;
}

{
  return a4() & 0x1FFFF;
}

{
  unint64_t v4;

  v4 = a4();
  return v4 | ((HIDWORD(v4) & 1) << 32);
}

{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  result = a4();
  if (v4)
    return v6;
  return result;
}

Swift::Bool __swiftcall DateInterval.contains(_:)(Foundation::Date a1)
{
  double *v1;
  double *v2;

  return *v1 <= *v2 + v2[1] && *v2 <= *v1;
}

uint64_t IndexSet.formUnion(_:)(_QWORD *a1)
{
  return IndexSet.formUnion(_:)(a1, (void (*)(uint64_t *__return_ptr, _QWORD *))IndexSet.union(_:));
}

void CharacterSet.insert(charactersIn:)(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t *v3;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *v3 = __CharacterSetStorage.mutableCopy()();
    swift_release();
  }
  __CharacterSetStorage.insert(charactersIn:)(a1, a2, a3);
}

void __CharacterSetStorage.insert(charactersIn:)(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v3;
  void *v5;
  id v6;
  const __CFCharacterSet *v7;
  CFMutableCharacterSetRef MutableCopy;
  CFMutableCharacterSetRef v9;
  __CFCharacterSet *v10;
  void *v11;

  v5 = *(void **)(v3 + 16);
  if ((*(_BYTE *)(v3 + 24) & 1) != 0)
  {
    String._bridgeToObjectiveCImpl()();
    v6 = v5;
    a3();

    swift_unknownObjectRelease();
  }
  else
  {
    v7 = v5;
    MutableCopy = CFCharacterSetCreateMutableCopy(0, v7);
    if (MutableCopy)
    {
      v9 = MutableCopy;
      String._bridgeToObjectiveCImpl()();
      v10 = v9;
      a3();

      swift_unknownObjectRelease();
      v11 = *(void **)(v3 + 16);
      *(_QWORD *)(v3 + 16) = v9;
      *(_BYTE *)(v3 + 24) = 1;

    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t URLRequest.httpMethod.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return specialized URLRequest._applyMutation<A>(_:)(v2, a1, a2);
}

NSNumber __swiftcall Int._bridgeToObjectiveC()()
{
  uint64_t v0;

  return (NSNumber)objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInteger_, v0);
}

double Date.timeIntervalSinceNow.getter()
{
  double *v0;
  double v1;
  timespec __tp;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = *v0;
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  return v1 - ((double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001);
}

uint64_t ___initializeClasses_block_invoke()
{
  uint64_t result;

  result = objc_msgSend((id)xpc_get_class4NSXPC(), "superclass");
  _XPCObjectClass = result;
  return result;
}

uint64_t type metadata accessor for NSObject.KeyValueObservingPublisher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NSObject.KeyValueObservingPublisher);
}

void *__cdecl NSZoneCalloc(NSZone *zone, NSUInteger numElems, NSUInteger byteSize)
{
  if (!zone)
    zone = (NSZone *)malloc_default_zone();
  return malloc_type_zone_calloc((malloc_zone_t *)zone, numElems, byteSize, 0x131BFA1uLL);
}

uint64_t AttributedString.init(stringLiteral:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  __int128 v4[3];

  BigString.init(_:)();
  result = AttributedString.init(_:attributes:)(v4, MEMORY[0x1E0DEE9E0], MEMORY[0x1E0DEE9E8], &v3);
  *a1 = v3;
  return result;
}

uint64_t specialized static AttributedString.Guts._characterwiseIsEqual(_:to:)(uint64_t result, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  __int128 v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  unint64_t v81;
  uint64_t v82;
  BOOL v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  __int128 v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  __int128 v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  __int128 v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  unint64_t v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  char v135;
  int64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  __int128 *v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  __int128 *v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  _BYTE __dst[264];
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  _OWORD __src[17];
  char v219[48];
  char v220;
  char v221;
  char v222[48];
  char v223[48];
  _BYTE v224[112];
  _BYTE v225[112];
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  _OWORD v234[3];
  unint64_t v235;
  unint64_t v236;
  uint64_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  uint64_t v241;
  unint64_t v242;
  _OWORD v243[18];
  __int128 v244[3];
  _BYTE v245[40];
  __int128 v246[3];
  _BYTE v247[40];
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  uint64_t v260;
  _BYTE v261[80];
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  uint64_t v269;

  v2 = *(_OWORD *)result;
  v3 = *(_OWORD *)(result + 16);
  v4 = *(_OWORD *)(result + 32);
  v251 = *(_OWORD *)(result + 48);
  v250 = v4;
  v248 = v2;
  v249 = v3;
  v5 = *(_OWORD *)(result + 64);
  v6 = *(_OWORD *)(result + 80);
  v7 = *(_OWORD *)(result + 96);
  v255 = *(_OWORD *)(result + 112);
  v254 = v7;
  v252 = v5;
  v253 = v6;
  v8 = *(_OWORD *)(result + 128);
  v9 = *(_OWORD *)(result + 144);
  v10 = *(_OWORD *)(result + 160);
  v11 = *(_OWORD *)(result + 176);
  v260 = *(_QWORD *)(result + 192);
  v259 = v11;
  v258 = v10;
  v256 = v8;
  v257 = v9;
  v12 = a2[11];
  v267 = a2[10];
  v268 = v12;
  v269 = *((_QWORD *)a2 + 24);
  v13 = a2[7];
  v263 = a2[6];
  v264 = v13;
  v14 = a2[8];
  v266 = a2[9];
  v265 = v14;
  v15 = a2[3];
  *(_OWORD *)&v261[32] = a2[2];
  *(_OWORD *)&v261[48] = v15;
  v16 = a2[4];
  v262 = a2[5];
  *(_OWORD *)&v261[64] = v16;
  v17 = *a2;
  *(_OWORD *)&v261[16] = a2[1];
  *(_OWORD *)v261 = v17;
  v18 = (_QWORD *)v248;
  if ((_QWORD)v248 == (_QWORD)v17
    && (*((_QWORD *)&v265 + 1) ^ *((_QWORD *)&v256 + 1)) <= 1023
    && (*((_QWORD *)&v258 + 1) ^ *((_QWORD *)&v267 + 1)) < 1024)
  {
    return 1;
  }
  v19 = *((_QWORD *)&v252 + 1);
  v142 = *((_QWORD *)&v248 + 1);
  if (__OFSUB__(*((_QWORD *)&v252 + 1), *((_QWORD *)&v248 + 1)))
    goto LABEL_162;
  if (__OFSUB__(*(_QWORD *)&v261[72], *(_QWORD *)&v261[8]))
  {
LABEL_163:
    __break(1u);
LABEL_164:
    __break(1u);
LABEL_165:
    __break(1u);
LABEL_166:
    __break(1u);
LABEL_167:
    __break(1u);
LABEL_168:
    __break(1u);
LABEL_169:
    __break(1u);
LABEL_170:
    __break(1u);
LABEL_171:
    __break(1u);
LABEL_172:
    __break(1u);
    goto LABEL_173;
  }
  if (*((_QWORD *)&v252 + 1) - *((_QWORD *)&v248 + 1) != *(_QWORD *)&v261[72] - *(_QWORD *)&v261[8])
    return 0;
  v145 = *((_QWORD *)&v249 + 1);
  v148 = v249;
  v20 = *((_QWORD *)&v250 + 1);
  v149 = v250;
  v146 = *((_QWORD *)&v251 + 1);
  v147 = v251;
  v163 = v252;
  v21 = *((_QWORD *)&v256 + 1);
  v23 = *((_QWORD *)&v257 + 1);
  v22 = v257;
  v24 = *((_QWORD *)&v258 + 1);
  v25 = v258;
  v161 = *((_QWORD *)&v265 + 1);
  v166 = *((_QWORD *)&v266 + 1);
  v167 = v266;
  v165 = v267;
  v26 = a2[11];
  __src[10] = a2[10];
  __src[11] = v26;
  *(_QWORD *)&__src[12] = *((_QWORD *)a2 + 24);
  v27 = a2[7];
  __src[6] = a2[6];
  __src[7] = v27;
  v28 = a2[8];
  __src[9] = a2[9];
  __src[8] = v28;
  v29 = a2[2];
  __src[3] = a2[3];
  v30 = a2[4];
  __src[5] = a2[5];
  __src[4] = v30;
  v31 = *a2;
  __src[1] = a2[1];
  __src[2] = v29;
  __src[0] = v31;
  *(_OWORD *)((char *)&__src[12] + 8) = *(_OWORD *)&v261[8];
  *(_OWORD *)((char *)&__src[13] + 8) = *(_OWORD *)&v261[24];
  *(_OWORD *)((char *)&__src[14] + 8) = *(_OWORD *)&v261[40];
  v162 = (__int128 *)(v248 + 16);
  v144 = (__int128 *)(v17 + 16);
  *(_OWORD *)((char *)&__src[15] + 8) = *(_OWORD *)&v261[56];
  outlined retain of AttributedString.Runs((uint64_t)&v248);
  result = outlined retain of AttributedString.Runs((uint64_t)v261);
  v136 = v24 >> 11;
  v137 = v21 >> 10;
  v140 = v22;
  v141 = v21;
  v32 = v21;
  v33 = v22;
  v34 = v18;
  v138 = v25;
  v139 = v23;
  v35 = v142;
  v143 = v19;
  v156 = v34;
  while (1)
  {
    v169 = v20;
    v159 = v23;
    v160 = v32;
    v157 = v33;
    v158 = v25;
    if (v35 == v19)
    {
      v36 = 0;
      v37 = 0;
      v38 = 0;
      v178 = 0;
      v39 = 0;
      v40 = 0;
      v41 = 0;
      v42 = 0;
      v43 = 0;
      v44 = 0;
      v174 = 0;
      v155 = v19;
      goto LABEL_130;
    }
    v45 = v145;
    if (v35 < v142 || v35 >= v19)
      goto LABEL_151;
    *(_OWORD *)&__dst[160] = v258;
    *(_OWORD *)&__dst[176] = v259;
    *(_QWORD *)&__dst[192] = v260;
    *(_OWORD *)&__dst[96] = v254;
    *(_OWORD *)&__dst[112] = v255;
    *(_OWORD *)&__dst[128] = v256;
    *(_OWORD *)&__dst[144] = v257;
    *(_OWORD *)&__dst[32] = v250;
    *(_OWORD *)&__dst[48] = v251;
    *(_OWORD *)&__dst[64] = v252;
    *(_OWORD *)&__dst[80] = v253;
    *(_OWORD *)__dst = v248;
    *(_OWORD *)&__dst[16] = v249;
    v185 = v35;
    v186 = v148;
    v187 = v145;
    v188 = v149;
    v189 = v20;
    v190 = v147;
    v191 = v146;
    v192 = v163;
    result = (uint64_t)AttributedString.Runs._resolve(_:)(&v185, &v196);
    if (v196 != v34[11])
      goto LABEL_152;
    v46 = v197;
    v47 = v201;
    v48 = v202;
    v49 = v203;
    v50 = v204;
    if (v198)
    {
      v51 = (_QWORD *)(v198 + 24 * ((v197 >> ((4 * *(_BYTE *)(v198 + 18) + 8) & 0x3C)) & 0xF));
      v52 = v51[3];
      v53 = v51[4];
      v54 = v51[5];
      outlined retain of AttributedString.Runs((uint64_t)&v248);
      v181 = v53;
      swift_bridgeObjectRetain();
      v173 = v54;
      result = swift_bridgeObjectRetain();
    }
    else
    {
      v55 = v34[8];
      outlined retain of AttributedString.Runs((uint64_t)&v248);
      swift_unknownObjectRetain();
      v45 = v145;
      v34 = v156;
      v52 = specialized Rope._Node.subscript.getter(v46, v55);
      v181 = v56;
      v173 = v57;
      result = swift_unknownObjectRelease();
    }
    if (v137 >= v47 >> 10)
      v58 = v141;
    else
      v58 = v47;
    if (v137 >= v47 >> 10)
      v59 = v140;
    else
      v59 = v48;
    if (v137 >= v47 >> 10)
      v60 = v139;
    else
      v60 = v49;
    if (v137 >= v47 >> 10)
      v61 = v138;
    else
      v61 = v50;
    if (__OFADD__(v52, v47 >> 11))
      goto LABEL_153;
    v176 = v61;
    v177 = v60;
    v178 = v59;
    if (v136 >= (uint64_t)(v52 + (v47 >> 11)))
      v62 = v52 + (v47 >> 11);
    else
      v62 = v136;
    v63 = v162[1];
    v243[15] = *v162;
    v243[16] = v63;
    v243[17] = v162[2];
    v183 = v58;
    BigString.utf8.getter();
    result = v183;
    if (__OFSUB__(v62, v183 >> 11))
      goto LABEL_154;
    v64 = BigString.UTF8View.index(_:offsetBy:)();
    v171 = v66;
    v172 = v65;
    v170 = v67;
    result = outlined release of Locale((uint64_t)&v219);
    v179 = v64;
    if (v64 >> 10 < v183 >> 10)
      goto LABEL_155;
    v69 = v34[8];
    v68 = v34[9];
    v180 = v34[10];
    v71 = v148;
    v70 = v149;
    v175 = v34[11];
    if (v149 != 1 && v148 == v34[11])
    {
      v72 = v169;
      if (v163 == 2)
      {
        if (v69)
        {
          outlined retain of AttributedString.Runs((uint64_t)&v248);
          swift_unknownObjectRetain();
          v73 = v68;
          result = specialized Rope._Node.distanceFromStart<A>(to:in:)(v148, v45, v149, v69, v68, v180);
          v74 = result;
        }
        else
        {
          v73 = v34[9];
          result = swift_retain();
          v74 = 0;
        }
      }
      else
      {
        v73 = v34[9];
        v74 = v169 >> 11;
        outlined retain of AttributedString.Runs((uint64_t)&v248);
        result = swift_unknownObjectRetain();
      }
      v91 = v181;
      goto LABEL_119;
    }
    if (v69)
      v75 = v34[9];
    else
      v75 = 0;
    v72 = v169;
    if (v35 < 0 || v75 < v35)
      goto LABEL_166;
    if (v69 && v35 < v68 && *(_WORD *)(v69 + 16))
    {
      v76 = v34[9];
      v77 = *(unsigned __int8 *)(v69 + 18);
      if (*(_BYTE *)(v69 + 18))
      {
        swift_unknownObjectRetain_n();
        outlined retain of AttributedString.Runs((uint64_t)&v248);
        result = swift_unknownObjectRetain();
        v78 = v35;
        v79 = v69;
        while (1)
        {
          v81 = *(unsigned __int16 *)(v79 + 16);
          if (*(_WORD *)(v79 + 16))
          {
            v82 = *(_QWORD *)(v79 + 32);
            v83 = __OFSUB__(v78, v82);
            v84 = v78 - v82;
            if (v83)
              goto LABEL_147;
            if (__OFADD__(v84, 1))
              goto LABEL_148;
            if (v84 + 1 <= 0)
            {
              v81 = 0;
              goto LABEL_52;
            }
            if ((_DWORD)v81 != 1)
            {
              v85 = *(_QWORD *)(v79 + 56);
              v78 = v84 - v85;
              if (__OFSUB__(v84, v85))
                goto LABEL_164;
              if (__OFADD__(v78, 1))
                goto LABEL_165;
              if (v78 + 1 < 1)
              {
                v81 = 1;
                v78 = v84;
                goto LABEL_52;
              }
              if ((_DWORD)v81 == 2)
                goto LABEL_51;
              v86 = *(_QWORD *)(v79 + 80);
              v83 = __OFSUB__(v78, v86);
              v84 = v78 - v86;
              if (v83)
                goto LABEL_168;
              if (__OFADD__(v84, 1))
                goto LABEL_169;
              if (v84 + 1 < 1)
              {
                v81 = 2;
                goto LABEL_52;
              }
              if ((_DWORD)v81 != 3)
              {
                v87 = 3;
                if (v81 > 3)
                  v87 = *(unsigned __int16 *)(v79 + 16);
                v88 = (_QWORD *)(v79 + 104);
                v89 = 3;
                while (v87 != v89)
                {
                  v78 = v84 - *v88;
                  if (__OFSUB__(v84, *v88))
                    goto LABEL_160;
                  if (__OFADD__(v78, 1))
                    goto LABEL_161;
                  if (v78 + 1 < 1)
                  {
                    v81 = v89;
                    v78 = v84;
                    goto LABEL_52;
                  }
                  ++v89;
                  v88 += 3;
                  v84 = v78;
                  if (v81 == v89)
                    goto LABEL_51;
                }
LABEL_159:
                __break(1u);
LABEL_160:
                __break(1u);
LABEL_161:
                __break(1u);
LABEL_162:
                __break(1u);
                goto LABEL_163;
              }
            }
            v78 = v84;
          }
LABEL_51:
          if (v78)
          {
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            __break(1u);
            goto LABEL_149;
          }
LABEL_52:
          v80 = (4 * *(_BYTE *)(v79 + 18) + 8) & 0x3C;
          v77 = ((-15 << v80) - 1) & v77 | (v81 << v80);
          v70 = *(_QWORD *)(v79 + 24 + 24 * v81);
          swift_unknownObjectRetain();
          result = swift_unknownObjectRelease();
          v79 = v70;
          if (!*(_BYTE *)(v70 + 18))
            goto LABEL_85;
        }
      }
      swift_unknownObjectRetain_n();
      outlined retain of AttributedString.Runs((uint64_t)&v248);
      result = swift_unknownObjectRetain();
      v78 = v35;
      v70 = v69;
LABEL_85:
      v92 = *(unsigned __int16 *)(v70 + 16);
      if (*(_WORD *)(v70 + 16))
      {
        v93 = v78 - 1;
        if (__OFSUB__(v78, 1))
          goto LABEL_171;
        if (__OFADD__(v93, 1))
          goto LABEL_172;
        if (v78 <= 0)
        {
          v92 = 0;
          goto LABEL_117;
        }
        if ((_DWORD)v92 != 1)
        {
          v83 = __OFSUB__(v93, 1);
          v93 = v78 - 2;
          if (v83)
            goto LABEL_175;
          if (__OFADD__(v93, 1))
            goto LABEL_176;
          if (v78 - 1 < 1)
          {
            v92 = 1;
            goto LABEL_117;
          }
          if ((_DWORD)v92 != 2)
          {
            v83 = __OFSUB__(v93, 1);
            v93 = v78 - 3;
            if (v83)
              goto LABEL_177;
            if (__OFADD__(v93, 1))
              goto LABEL_178;
            if (v78 - 2 >= 1)
            {
              if ((_DWORD)v92 != 3)
              {
                v94 = 0;
                v95 = 3;
                if (v92 > 3)
                  v95 = *(unsigned __int16 *)(v70 + 16);
                v96 = v95 - 3;
                if (v93 >= v92 - 4)
                  v97 = v92 - 4;
                else
                  v97 = v78 - 3;
                if (v97 >= v78 + 0x7FFFFFFFFFFFFFFDLL)
                  v97 = v78 + 0x7FFFFFFFFFFFFFFDLL;
                while (v96 > v97)
                {
                  if (v78 + 0x7FFFFFFFFFFFFFFDLL == v94)
                    goto LABEL_174;
                  if (v93 == v94)
                  {
                    v92 = v78;
                    goto LABEL_117;
                  }
                  if (v92 - 3 == ++v94)
                  {
                    v93 -= v94;
                    goto LABEL_111;
                  }
                }
LABEL_173:
                __break(1u);
LABEL_174:
                __break(1u);
LABEL_175:
                __break(1u);
LABEL_176:
                __break(1u);
LABEL_177:
                __break(1u);
LABEL_178:
                __break(1u);
                return result;
              }
              goto LABEL_111;
            }
            v92 = 2;
LABEL_117:
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            v45 = v77 & 0xFFFFFFFFFFFFF0FFLL | (v92 << 8);
            v91 = v181;
            v68 = v76;
            v71 = v175;
            goto LABEL_80;
          }
        }
      }
      else
      {
        v93 = v78;
      }
LABEL_111:
      if (v93)
        goto LABEL_170;
      goto LABEL_117;
    }
    swift_unknownObjectRetain_n();
    outlined retain of AttributedString.Runs((uint64_t)&v248);
    v90 = swift_unknownObjectRetain();
    v71 = v175;
    v45 = specialized Rope._endPath.getter(v90);
    result = swift_unknownObjectRelease();
    v70 = 0;
    v91 = v181;
    if (!v69)
    {
      v73 = v68;
      v74 = 0;
      goto LABEL_119;
    }
LABEL_80:
    swift_unknownObjectRetain();
    v73 = v68;
    v74 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v71, v45, v70, v69, v68, v180);
    result = swift_unknownObjectRelease_n();
LABEL_119:
    *(_QWORD *)__dst = v71;
    *(_QWORD *)&__dst[8] = v45;
    *(_QWORD *)&__dst[16] = v70;
    v83 = __OFADD__(v35, 1);
    v98 = v35 + 1;
    if (v83)
      goto LABEL_156;
    if (v71 != v175)
      goto LABEL_157;
    v155 = v98;
    if (v70)
    {
      v99 = *(_QWORD *)(v70 + 24 * ((v45 >> ((4 * *(_BYTE *)(v70 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_unknownObjectRetain();
      v99 = specialized Rope._Node.subscript.getter(v45, v69);
      swift_unknownObjectRelease();
    }
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v83 = __OFADD__(v74, v99);
    v100 = v74 + v99;
    if (v83)
      goto LABEL_158;
    swift_unknownObjectRetain();
    specialized Rope.formIndex(after:)(__dst, v69, v73, v180, v175);
    swift_unknownObjectRelease_n();
    v145 = *(_QWORD *)&__dst[8];
    v148 = *(_QWORD *)__dst;
    v149 = *(_QWORD *)&__dst[16];
    if (v163 == 2)
    {
      v101 = v162[1];
      v243[12] = *v162;
      v243[13] = v101;
      v243[14] = v162[2];
      v102 = &v221;
      BigString.utf8.getter();
      BigString.startIndex.getter();
      v103 = BigString.UTF8View.index(_:offsetBy:)();
      v146 = v105;
      v147 = v104;
      v163 = v106;
      v107 = v156;
    }
    else
    {
      v108 = v162[1];
      v243[9] = *v162;
      v243[10] = v108;
      v243[11] = v162[2];
      result = BigString.utf8.getter();
      if (__OFSUB__(v100, v72 >> 11))
        goto LABEL_167;
      v102 = &v220;
      v103 = BigString.UTF8View.index(_:offsetBy:)();
      v146 = v110;
      v147 = v109;
      v163 = v111;
      v107 = v156;
    }
    v169 = v103;
    outlined release of Locale((uint64_t)v102);
    outlined release of AttributedString.Runs((uint64_t)&v248);
    v174 = v107;
    v42 = v172;
    v37 = v173;
    v36 = v91;
    v38 = v183;
    v40 = v176;
    v39 = v177;
    v41 = v179;
    v44 = v170;
    v43 = v171;
LABEL_130:
    specialized IndexingIterator.next()((uint64_t)&v185);
    v196 = v36;
    v197 = v37;
    v198 = v38;
    v199 = v178;
    v200 = v39;
    v201 = v40;
    v202 = v41;
    v203 = v42;
    v204 = v43;
    v205 = v44;
    v206 = v174;
    v207 = v185;
    v168 = v186;
    v208 = v186;
    v209 = v187;
    v210 = v188;
    v211 = v189;
    v212 = v190;
    v213 = v191;
    v214 = v192;
    v215 = v193;
    v216 = v194;
    v217 = v195;
    if (!v36)
    {
      if (v185)
      {
LABEL_139:
        outlined release of (AttributedString.Runs.Run?, AttributedString.Runs.Run?)(&v196);
        goto LABEL_142;
      }
      outlined release of (AttributedString.Runs.Run?, AttributedString.Runs.Run?)(&v196);
      memcpy(__dst, __src, sizeof(__dst));
      outlined release of AttributedString.Runs((uint64_t)__dst);
      outlined release of AttributedString.Runs((uint64_t)&v248);
      return 1;
    }
    if (!v185)
      goto LABEL_139;
    v112 = v36;
    v113 = v185;
    v114 = v112;
    outlined copy of AttributedString.Runs.Run?(v112);
    outlined copy of AttributedString.Runs.Run?(v113);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((specialized static Dictionary<>.== infix(_:_:)(v114, v113) & 1) == 0)
      break;
    v115 = specialized static Set.== infix(_:_:)(v37, v168);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v115 & 1) == 0)
      goto LABEL_141;
    v153 = v113;
    v182 = v114;
    v116 = v162[1];
    v243[6] = *v162;
    v243[7] = v116;
    v243[8] = v162[2];
    BigString.utf8.getter();
    v117 = BigString.UTF8View.index(_:offsetBy:)();
    v33 = v118;
    v154 = v119;
    v164 = v120;
    outlined release of Locale((uint64_t)&v222);
    v121 = v144[1];
    v243[3] = *v144;
    v243[4] = v121;
    v243[5] = v144[2];
    BigString.utf8.getter();
    v122 = BigString.UTF8View.index(_:offsetBy:)();
    v150 = v123;
    v151 = v124;
    v152 = v125;
    result = outlined release of Locale((uint64_t)&v223);
    v126 = *v162;
    v127 = v162[1];
    v243[2] = v162[2];
    v243[1] = v127;
    v243[0] = v126;
    if (v117 >> 10 < v160 >> 10)
    {
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
      goto LABEL_159;
    }
    v235 = v160;
    v236 = v157;
    v237 = v159;
    v238 = v158;
    v239 = v117;
    v240 = v33;
    v23 = v154;
    v241 = v154;
    v242 = v164;
    v128 = *v162;
    v129 = v162[1];
    v244[2] = v162[2];
    v244[1] = v129;
    v244[0] = v128;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v244, (uint64_t)v245);
    outlined retain of Locale((uint64_t)v245);
    v130 = v122;
    BigString.subscript.getter();
    result = outlined release of Locale((uint64_t)v243);
    v131 = *v144;
    v132 = v144[1];
    v234[2] = v144[2];
    v234[1] = v132;
    v234[0] = v131;
    if (v122 >> 10 < v161 >> 10)
      goto LABEL_150;
    v226 = v161;
    v227 = v167;
    v228 = v166;
    v229 = v165;
    v230 = v122;
    v231 = v150;
    v232 = v151;
    v233 = v152;
    v133 = *v144;
    v134 = v144[1];
    v246[2] = v144[2];
    v246[1] = v134;
    v246[0] = v133;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v246, (uint64_t)v247);
    outlined retain of Locale((uint64_t)v247);
    BigString.subscript.getter();
    outlined release of Locale((uint64_t)v234);
    v135 = MEMORY[0x186DA3D88](v224, v225);
    outlined consume of AttributedString.Runs.Run?(v182);
    outlined consume of AttributedString.Runs.Run?(v153);
    outlined release of (AttributedString.Runs.Run?, AttributedString.Runs.Run?)(&v196);
    outlined release of Locale((uint64_t)v225);
    result = outlined release of Locale((uint64_t)v224);
    if ((v135 & 1) == 0)
      goto LABEL_142;
    v161 = v130;
    v166 = v151;
    v167 = v150;
    v165 = v152;
    v32 = v117;
    v25 = v164;
    v35 = v155;
    v34 = v156;
    v19 = v143;
    v20 = v169;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_141:
  outlined release of (AttributedString.Runs.Run?, AttributedString.Runs.Run?)(&v196);
  outlined consume of AttributedString.Runs.Run?(v113);
  outlined consume of AttributedString.Runs.Run?(v114);
LABEL_142:
  memcpy(__dst, __src, sizeof(__dst));
  outlined release of AttributedString.Runs((uint64_t)__dst);
  outlined release of AttributedString.Runs((uint64_t)&v248);
  return 0;
}

uint64_t AttributedString.init(_:attributes:)@<X0>(uint64_t *a1@<X2>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  __int128 v7[3];

  v3 = *a1;
  v4 = a1[1];
  BigString.init(_:)();
  result = AttributedString.init(_:attributes:)(v7, v3, v4, &v6);
  *a2 = v6;
  return result;
}

uint64_t AttributedString.mergeAttributes(_:mergePolicy:)(uint64_t *a1, char *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  _QWORD *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;
  unint64_t v13;
  __int128 v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24[48];
  char v25[48];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _OWORD v32[4];

  v3 = v2;
  v23 = *a1;
  v22 = *a2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v4 = (_QWORD *)*v2;
    v5 = *(_OWORD *)(*v2 + 16);
    v6 = *(_OWORD *)(*v2 + 48);
    v32[1] = *(_OWORD *)(*v2 + 32);
    v32[2] = v6;
    v32[0] = v5;
    v7 = v4[8];
    v8 = v4[9];
    v9 = v4[10];
    v10 = v4[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v32);
    swift_unknownObjectRetain();
    *v3 = AttributedString.Guts.init(string:runs:)(v32, v7, v8, v9, v10);
    swift_release();
  }
  v11 = (_OWORD *)*v3;
  v12 = v11[2];
  v29 = v11[1];
  v30 = v12;
  v31 = v11[3];
  BigString.startIndex.getter();
  BigString.endIndex.getter();
  BigString.unicodeScalars.getter();
  v13 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v24);
  v14 = v11[2];
  v26 = v11[1];
  v27 = v14;
  v28 = v11[3];
  BigString.unicodeScalars.getter();
  v15 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v25);
  v16 = v13 >> 11;
  v17 = v15 >> 11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v18 = (_QWORD *)swift_retain();
  specialized AttributedString._InternalRunsSlice.updateEach(with:)(v18, v16, v15 >> 11, v23, v22);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = specialized AttributedString._AttributeStorage.hasConstrainedAttributes.getter(v23);
  if ((result & 1) != 0)
  {
    v20 = swift_bridgeObjectRetain();
    v21 = specialized Sequence.compactMap<A>(_:)(v20);
    swift_bridgeObjectRelease();
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v16, v17, 0, v21);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized AttributedString._AttributeStorage.hasConstrainedAttributes.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  _OWORD v15[4];
  uint64_t v16;
  _OWORD v17[3];
  __int128 v18;
  uint64_t v19;

  v2 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain_n();
  v8 = 0;
  while (v5)
  {
    v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    v10 = v9 | (v8 << 6);
LABEL_5:
    outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(a1 + 56) + 72 * v10, (uint64_t)v17);
    v15[2] = v17[2];
    v15[3] = v18;
    v16 = v19;
    v15[0] = v17[0];
    v15[1] = v17[1];
    v11 = v18;
    result = outlined destroy of AttributedString._AttributeValue((uint64_t)v15);
    if (v11 != 1)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return 1;
    }
  }
  v12 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v12 >= v6)
    goto LABEL_26;
  v13 = *(_QWORD *)(v2 + 8 * v12);
  ++v8;
  if (v13)
    goto LABEL_24;
  v8 = v12 + 1;
  if (v12 + 1 >= v6)
    goto LABEL_26;
  v13 = *(_QWORD *)(v2 + 8 * v8);
  if (v13)
    goto LABEL_24;
  v8 = v12 + 2;
  if (v12 + 2 >= v6)
    goto LABEL_26;
  v13 = *(_QWORD *)(v2 + 8 * v8);
  if (v13)
    goto LABEL_24;
  v8 = v12 + 3;
  if (v12 + 3 >= v6)
    goto LABEL_26;
  v13 = *(_QWORD *)(v2 + 8 * v8);
  if (v13)
    goto LABEL_24;
  v8 = v12 + 4;
  if (v12 + 4 >= v6)
    goto LABEL_26;
  v13 = *(_QWORD *)(v2 + 8 * v8);
  if (v13)
  {
LABEL_24:
    v5 = (v13 - 1) & v13;
    v10 = __clz(__rbit64(v13)) + (v8 << 6);
    goto LABEL_5;
  }
  v14 = v12 + 5;
  if (v14 >= v6)
  {
LABEL_26:
    swift_release();
    swift_bridgeObjectRelease();
    return 0;
  }
  v13 = *(_QWORD *)(v2 + 8 * v14);
  if (v13)
  {
    v8 = v14;
    goto LABEL_24;
  }
  while (1)
  {
    v8 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v8 >= v6)
      goto LABEL_26;
    v13 = *(_QWORD *)(v2 + 8 * v8);
    ++v14;
    if (v13)
      goto LABEL_24;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t AttributedString.init(_:attributes:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t result;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  _QWORD v16[6];
  _BYTE v17[40];
  __int128 v18;
  __int128 v19;
  __int128 v20;

  if ((BigString.isEmpty.getter() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    BigString.init()();
    v16[0] = 0;
    MEMORY[0x186DA9E90](v16, 8);
    v8 = v16[0];
    type metadata accessor for AttributedString.Guts();
    v9 = swift_allocObject();
    if ((BigString.isEmpty.getter() & 1) != 0)
    {
      v10 = v19;
      v11 = v20;
      *(_OWORD *)(v9 + 16) = v18;
      *(_OWORD *)(v9 + 32) = v10;
      *(_OWORD *)(v9 + 48) = v11;
      *(_QWORD *)(v9 + 64) = 0;
      *(_QWORD *)(v9 + 72) = 0;
      *(_QWORD *)(v9 + 80) = 0;
      *(_QWORD *)(v9 + 88) = v8;
      result = outlined release of Locale((uint64_t)a1);
      *a4 = v9;
      return result;
    }
    __break(1u);
    __break(1u);
  }
  else
  {
    *(_QWORD *)&v18 = 0;
    MEMORY[0x186DA9E90](&v18, 8);
    BigString.utf8.getter();
    v13 = BigString.UTF8View.count.getter();
    outlined release of Locale((uint64_t)v16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Rope.append(_:)(v13, a2, a3);
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
  }
  v14 = a1[1];
  v18 = *a1;
  v15 = a1[2];
  v19 = v14;
  v20 = v15;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v18, (uint64_t)v17);
  result = outlined retain of Locale((uint64_t)v17);
  __break(1u);
  return result;
}

uint64_t type metadata accessor for AttributedString.Guts()
{
  return objc_opt_self();
}

_WORD *specialized Rope.append(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  _WORD *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = (uint64_t *)v3;
  ++*(_QWORD *)(v3 + 24);
  if (*(_QWORD *)v3)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = (_WORD *)specialized Rope._Node.append(_:)(a1, a2, a3);
    if (!result)
    {
      swift_bridgeObjectRelease();
      return (_WORD *)swift_bridgeObjectRelease();
    }
    v11 = *(_QWORD *)v3;
    v12 = *(unsigned __int8 *)(*(_QWORD *)v3 + 18) + 1;
    if (((v12 >> 8) & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      v13 = (uint64_t)result;
      v14 = v9;
      v19 = v10;
      v15 = v4[1];
      v16 = v4[2];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Node>);
      v17 = swift_allocObject();
      *(_WORD *)(v17 + 16) = 0;
      result = (_WORD *)(v17 + 16);
      *(_BYTE *)(v17 + 18) = v12;
      if (!__OFADD__(v15, v14))
      {
        if (!__OFADD__(v16, v19))
        {
          specialized closure #1 in static Rope._Node.createInner(children:_:)(result, v17 + 24, v11, v15, v16, v13, v14, v19);
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          result = (_WORD *)swift_bridgeObjectRelease();
          *v4 = v17;
          v4[1] = v15 + v14;
          v4[2] = v16 + v19;
          return result;
        }
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Item>);
  v18 = swift_allocObject();
  *(_WORD *)(v18 + 16) = 0;
  *(_BYTE *)(v18 + 18) = 0;
  v20 = v18;
  result = (_WORD *)specialized Rope._Node._appendItem(_:)(a1, a2, a3);
  *(_QWORD *)v3 = v20;
  *(_OWORD *)(v3 + 8) = 0uLL;
  return result;
}

uint64_t specialized Rope._Node._appendItem(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;

  result = swift_isUniquelyReferenced_nonNull();
  if ((_DWORD)result)
  {
    v8 = v3[1];
  }
  else
  {
    v9 = specialized Rope._Node.copy()(*v3);
    v8 = v10;
    v12 = v11;
    result = swift_unknownObjectRelease();
    *v3 = v9;
    v3[1] = v8;
    v3[2] = v12;
  }
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_9;
  }
  v3[1] = v8 + 1;
  v13 = v3[2];
  v14 = __OFADD__(v13, a1);
  v15 = v13 + a1;
  if (v14)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v3[2] = v15;
  v16 = *v3;
  v17 = *(unsigned __int16 *)(*v3 + 16);
  v18 = (_QWORD *)(*v3 + 24 * *(unsigned __int16 *)(*v3 + 16));
  v18[3] = a1;
  v18[4] = a2;
  v18[5] = a3;
  if (v17 != 0xFFFF)
  {
    *(_WORD *)(v16 + 16) = v17 + 1;
    return result;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t specialized AttributedString._AttributeStorage.containsScalarConstraint.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  _OWORD v15[4];
  uint64_t v16;
  _OWORD v17[3];
  __int128 v18;
  uint64_t v19;

  v2 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain_n();
  v8 = 0;
  while (v5)
  {
    v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    v10 = v9 | (v8 << 6);
LABEL_5:
    outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(a1 + 56) + 72 * v10, (uint64_t)v17);
    v15[2] = v17[2];
    v15[3] = v18;
    v16 = v19;
    v15[0] = v17[0];
    v15[1] = v17[1];
    v11 = v18;
    result = outlined destroy of AttributedString._AttributeValue((uint64_t)v15);
    if (v11 >= 2)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return 1;
    }
  }
  v12 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v12 >= v6)
    goto LABEL_26;
  v13 = *(_QWORD *)(v2 + 8 * v12);
  ++v8;
  if (v13)
    goto LABEL_24;
  v8 = v12 + 1;
  if (v12 + 1 >= v6)
    goto LABEL_26;
  v13 = *(_QWORD *)(v2 + 8 * v8);
  if (v13)
    goto LABEL_24;
  v8 = v12 + 2;
  if (v12 + 2 >= v6)
    goto LABEL_26;
  v13 = *(_QWORD *)(v2 + 8 * v8);
  if (v13)
    goto LABEL_24;
  v8 = v12 + 3;
  if (v12 + 3 >= v6)
    goto LABEL_26;
  v13 = *(_QWORD *)(v2 + 8 * v8);
  if (v13)
    goto LABEL_24;
  v8 = v12 + 4;
  if (v12 + 4 >= v6)
    goto LABEL_26;
  v13 = *(_QWORD *)(v2 + 8 * v8);
  if (v13)
  {
LABEL_24:
    v5 = (v13 - 1) & v13;
    v10 = __clz(__rbit64(v13)) + (v8 << 6);
    goto LABEL_5;
  }
  v14 = v12 + 5;
  if (v14 >= v6)
  {
LABEL_26:
    swift_release();
    swift_bridgeObjectRelease();
    return 0;
  }
  v13 = *(_QWORD *)(v2 + 8 * v14);
  if (v13)
  {
    v8 = v14;
    goto LABEL_24;
  }
  while (1)
  {
    v8 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v8 >= v6)
      goto LABEL_26;
    v13 = *(_QWORD *)(v2 + 8 * v8);
    ++v14;
    if (v13)
      goto LABEL_24;
  }
LABEL_29:
  __break(1u);
  return result;
}

_QWORD *specialized AttributedString._InternalRunsSlice.updateEach(with:)(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  unint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  char v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  char v140;
  unint64_t v141;
  int v142;
  char v143;
  char v144;
  unint64_t v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char v165;
  char v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  char v171;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t *v176;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v184;
  uint64_t v186;
  uint64_t v187;
  _QWORD v188[2];
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  uint64_t v200;
  uint64_t v201;
  __int128 v202;
  _OWORD v203[3];
  _OWORD v204[3];
  uint64_t v205;
  uint64_t v206;
  _OWORD v207[2];

  v6 = (uint64_t)(result + 8);
  v5 = result[8];
  if (v5)
    v7 = result[10];
  else
    v7 = 0;
  if (a2 < 0 || v7 < a2)
  {
LABEL_384:
    __break(1u);
LABEL_385:
    __break(1u);
LABEL_386:
    __break(1u);
LABEL_387:
    __break(1u);
LABEL_388:
    __break(1u);
LABEL_389:
    __break(1u);
LABEL_390:
    __break(1u);
LABEL_391:
    __break(1u);
LABEL_392:
    __break(1u);
LABEL_393:
    __break(1u);
LABEL_394:
    __break(1u);
LABEL_395:
    __break(1u);
LABEL_396:
    __break(1u);
LABEL_397:
    __break(1u);
LABEL_398:
    __break(1u);
LABEL_399:
    __break(1u);
LABEL_400:
    __break(1u);
LABEL_401:
    __break(1u);
    goto LABEL_402;
  }
  LOBYTE(v8) = a5;
  v9 = a3;
  v184 = result;
  v10 = result[9];
  v11 = result[11];
  v176 = result + 8;
  if (!v5 || (*(_WORD *)(v5 + 16) ? (v12 = result[10] <= a2) : (v12 = 1), v12))
  {
    v13 = swift_unknownObjectRetain_n();
    v14 = specialized Rope._endPath.getter(v13);
    result = (_QWORD *)swift_unknownObjectRelease();
    v15 = 0;
    v16 = 0;
    if (!v5)
      goto LABEL_48;
    goto LABEL_13;
  }
  v6 = *(unsigned __int8 *)(v5 + 18);
  if (*(_BYTE *)(v5 + 18))
  {
    result = (_QWORD *)swift_unknownObjectRetain_n();
    v16 = a2;
    v17 = v5;
    while (1)
    {
      v19 = *(unsigned __int16 *)(v17 + 16);
      if (!*(_WORD *)(v17 + 16))
        break;
      v20 = *(_QWORD *)(v17 + 40);
      v21 = __OFSUB__(v16, v20);
      v22 = v16 - v20;
      if (v21)
        goto LABEL_369;
      if (__OFADD__(v22, 1))
        goto LABEL_370;
      if (v22 + 1 <= 0)
      {
        v19 = 0;
        goto LABEL_18;
      }
      if ((_DWORD)v19 == 1)
      {
        v16 = v22;
        break;
      }
      v23 = (uint64_t *)(v17 + 64);
      v24 = 1;
      while (1)
      {
        v25 = *v23;
        v23 += 3;
        v16 = v22 - v25;
        if (__OFSUB__(v22, v25))
          goto LABEL_337;
        if (__OFADD__(v16, 1))
        {
LABEL_338:
          __break(1u);
LABEL_339:
          __break(1u);
LABEL_340:
          __break(1u);
LABEL_341:
          __break(1u);
LABEL_342:
          __break(1u);
LABEL_343:
          __break(1u);
LABEL_344:
          __break(1u);
LABEL_345:
          __break(1u);
LABEL_346:
          __break(1u);
LABEL_347:
          __break(1u);
LABEL_348:
          __break(1u);
LABEL_349:
          __break(1u);
LABEL_350:
          __break(1u);
LABEL_351:
          __break(1u);
LABEL_352:
          __break(1u);
LABEL_353:
          __break(1u);
LABEL_354:
          __break(1u);
LABEL_355:
          __break(1u);
LABEL_356:
          __break(1u);
LABEL_357:
          __break(1u);
LABEL_358:
          __break(1u);
LABEL_359:
          __break(1u);
LABEL_360:
          __break(1u);
LABEL_361:
          __break(1u);
LABEL_362:
          __break(1u);
          goto LABEL_363;
        }
        if (v16 + 1 < 1)
          break;
        ++v24;
        v22 = v16;
        if (v19 == v24)
          goto LABEL_17;
      }
      v19 = v24;
      v16 = v22;
LABEL_18:
      v18 = (4 * *(_BYTE *)(v17 + 18) + 8) & 0x3C;
      v6 = ((-15 << v18) - 1) & v6 | (v19 << v18);
      v15 = *(_QWORD *)(v17 + 24 + 24 * v19);
      swift_unknownObjectRetain();
      result = (_QWORD *)swift_unknownObjectRelease();
      v17 = v15;
      if (!*(_BYTE *)(v15 + 18))
        goto LABEL_33;
    }
LABEL_17:
    if (!v16)
      goto LABEL_18;
LABEL_363:
    __break(1u);
LABEL_364:
    __break(1u);
LABEL_365:
    __break(1u);
LABEL_366:
    __break(1u);
LABEL_367:
    __break(1u);
LABEL_368:
    __break(1u);
LABEL_369:
    __break(1u);
LABEL_370:
    __break(1u);
LABEL_371:
    __break(1u);
LABEL_372:
    __break(1u);
LABEL_373:
    __break(1u);
LABEL_374:
    __break(1u);
LABEL_375:
    __break(1u);
LABEL_376:
    __break(1u);
LABEL_377:
    __break(1u);
LABEL_378:
    __break(1u);
LABEL_379:
    __break(1u);
LABEL_380:
    __break(1u);
LABEL_381:
    __break(1u);
LABEL_382:
    __break(1u);
LABEL_383:
    __break(1u);
    goto LABEL_384;
  }
  result = (_QWORD *)swift_unknownObjectRetain_n();
  v16 = a2;
  v15 = v5;
LABEL_33:
  v26 = *(unsigned __int16 *)(v15 + 16);
  if (!*(_WORD *)(v15 + 16))
  {
    v9 = a3;
    LOBYTE(v8) = a5;
    goto LABEL_46;
  }
  v27 = *(_QWORD *)(v15 + 24);
  v21 = __OFSUB__(v16, v27);
  v28 = v16 - v27;
  v9 = a3;
  LOBYTE(v8) = a5;
  if (v21)
  {
LABEL_403:
    __break(1u);
    goto LABEL_404;
  }
  if (!__OFADD__(v28, 1))
  {
    if (v28 + 1 <= 0)
    {
      v26 = 0;
      goto LABEL_47;
    }
    if ((_DWORD)v26 != 1)
    {
      v29 = (uint64_t *)(v15 + 48);
      v30 = 1;
      while (1)
      {
        v31 = *v29;
        v29 += 3;
        v16 = v28 - v31;
        if (__OFSUB__(v28, v31))
          goto LABEL_391;
        if (__OFADD__(v16, 1))
          goto LABEL_393;
        if (v16 + 1 < 1)
          goto LABEL_327;
        ++v30;
        v28 = v16;
        if (v26 == v30)
          goto LABEL_46;
      }
    }
    v16 = v28;
LABEL_46:
    if (v16)
    {
LABEL_402:
      __break(1u);
      goto LABEL_403;
    }
LABEL_47:
    while (2)
    {
      swift_unknownObjectRelease();
      result = (_QWORD *)swift_unknownObjectRelease();
      v14 = v6 & 0xFFFFFFFFFFFFF0FFLL | (v26 << 8);
      v6 = (uint64_t)v176;
      if (v5)
      {
LABEL_13:
        swift_unknownObjectRetain();
        v178 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v11, v14, v15, v5, v10);
        result = (_QWORD *)swift_unknownObjectRelease_n();
      }
      else
      {
LABEL_48:
        v178 = 0;
      }
      v5 = a2;
      v21 = __OFSUB__(a2, v16);
      v32 = a2 - v16;
      if (v21)
        goto LABEL_385;
      v171 = v8 & 1;
      v33 = v14;
      while (1)
      {
        v10 = *(_QWORD *)v6;
        v179 = v33;
        if (v5 != v9)
        {
          if (v10)
          {
            v39 = v184;
            v40 = v184[10];
          }
          else
          {
            v40 = 0;
            v39 = v184;
          }
          goto LABEL_104;
        }
        if (!v10)
        {
          if (v5 > 0)
            goto LABEL_371;
          v9 = 0;
          goto LABEL_102;
        }
        v8 = v184[10];
        if (v8 < v5)
          goto LABEL_360;
        v36 = *(unsigned __int8 *)(v10 + 18);
        v37 = !*(_WORD *)(v10 + 16) || v8 <= v5;
        v180 = v184[9];
        v174 = v184[11];
        if (!v37)
          break;
        v38 = ((-15 << ((4 * v36 + 8) & 0x3C)) - 1) & v36 | ((unint64_t)*(unsigned __int16 *)(v10 + 16) << ((4 * v36 + 8) & 0x3C));
        swift_unknownObjectRetain();
        v9 = 0;
        v5 = 0;
LABEL_101:
        swift_unknownObjectRetain();
        specialized Rope._Node.distanceFromStart<A>(to:in:)(v174, v38, v5, v10, v180);
        result = (_QWORD *)swift_unknownObjectRelease_n();
        v5 = a2;
        v33 = v179;
LABEL_102:
        v40 = v5 - v9;
        v39 = v184;
        if (__OFSUB__(v5, v9))
          goto LABEL_349;
        v9 = a3;
LABEL_104:
        if (v32 >= v40)
          return result;
        if (v11 != v39[11])
          goto LABEL_339;
        if (v15)
        {
          v53 = (_QWORD *)(v15 + 24 * ((v33 >> ((4 * *(_BYTE *)(v15 + 18) + 8) & 0x3C)) & 0xF));
          v55 = v53[4];
          v54 = v53[5];
          v56 = v53[3];
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
        }
        else
        {
          v57 = v39[8];
          swift_unknownObjectRetain();
          specialized Rope._Node.subscript.getter(v33, v57);
          v55 = v58;
          v54 = v59;
          result = (_QWORD *)swift_unknownObjectRelease();
          if (v11 != v39[11])
            goto LABEL_359;
          v60 = v184[8];
          swift_unknownObjectRetain();
          v56 = specialized Rope._Node.subscript.getter(v33, v60);
          v39 = v184;
          swift_unknownObjectRelease();
        }
        swift_bridgeObjectRelease();
        result = (_QWORD *)swift_bridgeObjectRelease();
        v61 = v32 + v56;
        if (__OFADD__(v32, v56))
          goto LABEL_340;
        *(_QWORD *)&v195 = v55;
        *((_QWORD *)&v195 + 1) = v54;
        if (v32 >= v9)
          v62 = v9;
        else
          v62 = v32;
        if (v32 >= a2)
          v63 = v62;
        else
          v63 = a2;
        if (v61 <= a2)
          v64 = a2;
        else
          v64 = v61;
        if (v61 <= v9)
          v65 = v64;
        else
          v65 = v9;
        if (v63 == v65)
          goto LABEL_341;
        v186 = v32;
        if (v63 != v32 || v65 != v61)
        {
          LOBYTE(v192) = v171;
          result = (_QWORD *)specialized AttributedString._AttributeStorage.mergeIn(_:mergePolicy:)(a4, (char *)&v192);
          if (__OFSUB__(v65, v63))
            goto LABEL_351;
          v81 = v39;
          v10 = *((_QWORD *)&v195 + 1);
          v82 = v195;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v63, v65, v65 - v63, v82, v10);
          swift_bridgeObjectRelease();
          result = (_QWORD *)swift_bridgeObjectRelease();
          v5 = v81[8];
          v11 = v81[10];
          if (v5)
            v83 = v11;
          else
            v83 = 0;
          if (v32 < 0 || v83 < v32)
            goto LABEL_353;
          v8 = v184[9];
          v15 = v184[11];
          if (v5 && *(_WORD *)(v5 + 16) && v32 < v11)
          {
            v84 = *(unsigned __int8 *)(v5 + 18);
            if (*(_BYTE *)(v5 + 18))
            {
              result = (_QWORD *)swift_unknownObjectRetain_n();
              v9 = v32;
              v6 = v5;
              while (1)
              {
                v28 = *(unsigned __int16 *)(v6 + 16);
                if (!*(_WORD *)(v6 + 16))
                  goto LABEL_148;
                v86 = *(_QWORD *)(v6 + 40);
                v21 = __OFSUB__(v9, v86);
                v30 = v9 - v86;
                if (v21)
                  goto LABEL_332;
                if (__OFADD__(v30, 1))
                  goto LABEL_333;
                if (v30 + 1 <= 0)
                {
                  v28 = 0;
                }
                else
                {
                  if ((_DWORD)v28 == 1)
                  {
                    v9 = v30;
LABEL_148:
                    if (v9)
                      goto LABEL_329;
                    goto LABEL_149;
                  }
                  v87 = (uint64_t *)(v6 + 64);
                  v88 = 1;
                  while (1)
                  {
                    v89 = *v87;
                    v87 += 3;
                    v9 = v30 - v89;
                    if (__OFSUB__(v30, v89))
                      goto LABEL_325;
                    if (__OFADD__(v9, 1))
                      goto LABEL_326;
                    if (v9 + 1 < 1)
                      break;
                    ++v88;
                    v30 = v9;
                    if (v28 == v88)
                      goto LABEL_148;
                  }
                  v28 = v88;
                  v9 = v30;
                }
LABEL_149:
                v85 = (4 * *(_BYTE *)(v6 + 18) + 8) & 0x3C;
                v84 = ((-15 << v85) - 1) & v84 | (v28 << v85);
                v68 = *(_QWORD **)(v6 + 24 + 24 * v28);
                swift_unknownObjectRetain();
                result = (_QWORD *)swift_unknownObjectRelease();
                v6 = (uint64_t)v68;
                if (!*((_BYTE *)v68 + 18))
                  goto LABEL_204;
              }
            }
            result = (_QWORD *)swift_unknownObjectRetain_n();
            v9 = v32;
            v68 = (_QWORD *)v5;
LABEL_204:
            v126 = *((unsigned __int16 *)v68 + 8);
            if (*((_WORD *)v68 + 8))
            {
              v127 = v68[3];
              v21 = __OFSUB__(v9, v127);
              v128 = v9 - v127;
              if (v21)
                goto LABEL_379;
              if (__OFADD__(v128, 1))
                goto LABEL_380;
              if (v128 + 1 <= 0)
              {
                v126 = 0;
              }
              else
              {
                if ((_DWORD)v126 == 1)
                {
                  v9 = v128;
                  goto LABEL_221;
                }
                v132 = v68 + 6;
                v133 = 1;
                while (1)
                {
                  v134 = *v132;
                  v132 += 3;
                  v9 = v128 - v134;
                  if (__OFSUB__(v128, v134))
                    goto LABEL_357;
                  if (__OFADD__(v9, 1))
                    goto LABEL_358;
                  if (v9 + 1 < 1)
                    break;
                  ++v133;
                  v128 = v9;
                  if (v126 == v133)
                    goto LABEL_221;
                }
                v126 = v133;
                v9 = v128;
              }
            }
            else
            {
LABEL_221:
              if (v9)
                goto LABEL_374;
            }
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            v91 = v84 & 0xFFFFFFFFFFFFF0FFLL | (v126 << 8);
LABEL_164:
            swift_unknownObjectRetain();
            v92 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v15, v91, (uint64_t)v68, v5, v8);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            result = (_QWORD *)swift_unknownObjectRelease_n();
          }
          else
          {
            v90 = swift_unknownObjectRetain_n();
            v91 = specialized Rope._endPath.getter(v90);
            swift_unknownObjectRelease();
            v68 = 0;
            v9 = 0;
            if (v5)
              goto LABEL_164;
            swift_bridgeObjectRelease();
            result = (_QWORD *)swift_bridgeObjectRelease();
            v92 = 0;
          }
          v104 = v184;
          v21 = __OFSUB__(v186, v9);
          v186 -= v9;
          if (v21)
            goto LABEL_354;
          v9 = a3;
          goto LABEL_226;
        }
        if (v11 != v39[11])
          goto LABEL_350;
        if (!*(_QWORD *)v6)
          goto LABEL_405;
        specialized Rope._Node._prepareModify(at:)(v179, (uint64_t)&v196);
        v207[0] = v197;
        v192 = v196;
        v193 = v197;
        v194 = v198;
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)v207);
        result = (_QWORD *)outlined release of [String : AttributedString._AttributeValue]((uint64_t)v207 + 8);
        v193 = MEMORY[0x1E0DEE9E0];
        v39[11] = v11 + 1;
        if (!v39[8])
          goto LABEL_406;
        specialized Rope._Node._finalizeModify(_:)(&v189, &v192);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        LOBYTE(v192) = v171;
        result = (_QWORD *)specialized AttributedString._AttributeStorage.mergeIn(_:mergePolicy:)(a4, (char *)&v192);
        if (v11 + 1 != v39[11])
          goto LABEL_352;
        if (!*(_QWORD *)v6)
          goto LABEL_407;
        specialized Rope._Node._prepareModify(at:)(v179, (uint64_t)&v199);
        v205 = v200;
        v206 = v201;
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v205);
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v206);
        v192 = v199;
        v194 = v202;
        v66 = *((_QWORD *)&v195 + 1);
        result = (_QWORD *)v195;
        v193 = v195;
        v67 = v11 + 2;
        v39[11] = v11 + 2;
        if (!v39[8])
          goto LABEL_408;
        v175 = (uint64_t)result;
        swift_bridgeObjectRetain_n();
        v173 = v66;
        swift_bridgeObjectRetain_n();
        v68 = specialized Rope._Node._finalizeModify(_:)(v188, &v192);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v69 = v39[8];
        v70 = v39[9];
        v71 = v39[10];
        v72 = v39[11];
        *(_QWORD *)&v192 = v67;
        *((_QWORD *)&v192 + 1) = v179;
        *(_QWORD *)&v193 = v68;
        swift_unknownObjectRetain();
        specialized Rope.formIndex(after:)(&v192, v69, v70, v71, v72);
        swift_unknownObjectRelease();
        v73 = v192;
        v74 = v193;
        v75 = swift_unknownObjectRetain();
        v76 = specialized Rope._endPath.getter(v75);
        result = (_QWORD *)swift_unknownObjectRelease();
        v181 = v67;
        if (*((_QWORD *)&v73 + 1) >= v76)
        {
          v93 = v176;
          v9 = a3;
        }
        else
        {
          if ((_QWORD)v73 != v39[11])
            goto LABEL_364;
          if (v74)
          {
            v77 = v74 + 24 * ((*((_QWORD *)&v73 + 1) >> ((4 * *(_BYTE *)(v74 + 18) + 8) & 0x3C)) & 0xFLL);
            v78 = *(_QWORD *)(v77 + 32);
            v79 = *(_QWORD *)(v77 + 40);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v9 = a3;
            v80 = v184;
          }
          else
          {
            v80 = v184;
            v94 = v184[8];
            swift_unknownObjectRetain();
            specialized Rope._Node.subscript.getter(*((unint64_t *)&v73 + 1), v94);
            v78 = v95;
            v79 = v96;
            swift_unknownObjectRelease();
            v9 = a3;
          }
          v93 = v176;
          if ((specialized static Dictionary<>.== infix(_:_:)(v78, v175) & 1) != 0)
          {
            v97 = specialized static Set.== infix(_:_:)(v79, v173);
            swift_bridgeObjectRelease();
            result = (_QWORD *)swift_bridgeObjectRelease();
            if ((v97 & 1) != 0)
            {
              v98 = specialized Rope._remove(at:)((uint64_t)&v192, v67, v179);
              v99 = v80[8];
              v100 = v80[11];
              if (v98 < specialized Rope._endPath.getter(v99) && *(_BYTE *)(v99 + 18))
              {
                v101 = (v98 >> ((4 * *(_BYTE *)(v99 + 18) + 8) & 0x3C)) & 0xF;
                swift_unknownObjectRetain();
                specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v99 + 24, v101, v98);
                swift_unknownObjectRelease();
              }
              v102 = v192;
              swift_bridgeObjectRelease();
              result = (_QWORD *)swift_bridgeObjectRelease();
              if (v100 != v80[11])
                goto LABEL_386;
              if (!*v176)
                goto LABEL_409;
              result = (_QWORD *)specialized Rope._Node._prepareModify(at:)(v98, (uint64_t)v203);
              v192 = v203[0];
              v193 = v203[1];
              v194 = v203[2];
              if (__OFADD__(*((_QWORD *)&v203[0] + 1), v102))
                goto LABEL_387;
              *((_QWORD *)&v192 + 1) = *((_QWORD *)&v203[0] + 1) + v102;
              v181 = v100 + 1;
              v80[11] = v100 + 1;
              if (!v80[8])
                goto LABEL_410;
              v68 = specialized Rope._Node._finalizeModify(_:)(v188, &v192);
              swift_bridgeObjectRelease();
              result = (_QWORD *)swift_bridgeObjectRelease();
              v92 = v178;
              v103 = *v176;
              if (!*v176)
                goto LABEL_181;
LABEL_180:
              v103 = *(unsigned __int8 *)(v103 + 18);
              goto LABEL_181;
            }
          }
          else
          {
            swift_bridgeObjectRelease();
            result = (_QWORD *)swift_bridgeObjectRelease();
          }
        }
        v92 = v178;
        v98 = v179;
        v103 = *v93;
        if (*v93)
          goto LABEL_180;
LABEL_181:
        v104 = v184;
        if (v98 <= v103)
        {
          v91 = v98;
          swift_bridgeObjectRelease_n();
          result = (_QWORD *)swift_bridgeObjectRelease_n();
          v15 = v181;
          goto LABEL_226;
        }
        v105 = v184[8];
        v106 = v184[11];
        *(_QWORD *)&v192 = v181;
        *((_QWORD *)&v192 + 1) = v98;
        *(_QWORD *)&v193 = v68;
        if (v181 != v106)
          goto LABEL_365;
        v91 = v98;
        if (v105)
        {
          v107 = *(unsigned __int8 *)(v105 + 18);
          result = (_QWORD *)swift_unknownObjectRetain();
          if (v98 <= v107)
            goto LABEL_366;
        }
        else if (!v98)
        {
          goto LABEL_366;
        }
        v108 = (4 * *((_BYTE *)v68 + 18) + 8) & 0x3C;
        if (((v98 >> v108) & 0xF) != 0)
        {
          v109 = ((((v98 >> v108) & 0xF) - 1) << v108) | ((-15 << v108) - 1) & v98;
          result = (_QWORD *)swift_unknownObjectRelease();
          v110 = v68;
          v111 = v181;
        }
        else
        {
          swift_unknownObjectRetain();
          v112 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v192, v105);
          result = (_QWORD *)swift_unknownObjectRelease_n();
          if ((v112 & 1) == 0)
            goto LABEL_377;
          v109 = *((_QWORD *)&v192 + 1);
          v111 = v192;
          v110 = (_QWORD *)v193;
        }
        if (v111 != v184[11])
          goto LABEL_367;
        if (v110)
        {
          v113 = &v110[3 * ((v109 >> ((4 * *((_BYTE *)v110 + 18) + 8) & 0x3C)) & 0xF)];
          v115 = v113[4];
          v114 = v113[5];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          v116 = v184[8];
          swift_unknownObjectRetain();
          specialized Rope._Node.subscript.getter(v109, v116);
          v115 = v117;
          v114 = v118;
          swift_unknownObjectRelease();
        }
        if ((specialized static Dictionary<>.== infix(_:_:)(v115, v175) & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
LABEL_202:
          v15 = v181;
          swift_bridgeObjectRelease();
          result = (_QWORD *)swift_bridgeObjectRelease();
          goto LABEL_226;
        }
        v119 = specialized static Set.== infix(_:_:)(v114, v173);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v119 & 1) == 0)
          goto LABEL_202;
        v120 = specialized Rope._remove(at:)((uint64_t)&v192, v181, v91);
        v121 = v184[8];
        v122 = v184[11];
        if (v120 >= specialized Rope._endPath.getter(v121))
        {
          v121 = 0;
          v123 = v186;
        }
        else
        {
          v123 = v186;
          if (*(_BYTE *)(v121 + 18))
          {
            v124 = (v120 >> ((4 * *(_BYTE *)(v121 + 18) + 8) & 0x3C)) & 0xF;
            swift_unknownObjectRetain();
            v125 = specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v121 + 24, v124, v120);
            swift_unknownObjectRelease();
            v121 = v125;
          }
        }
        v189 = v122;
        v190 = v120;
        v191 = v121;
        v129 = v192;
        swift_bridgeObjectRelease();
        result = (_QWORD *)swift_bridgeObjectRelease();
        if (v122 != v184[11])
          goto LABEL_388;
        v130 = v184[8];
        if (v130)
        {
          v131 = *(unsigned __int8 *)(v130 + 18);
          result = (_QWORD *)swift_unknownObjectRetain();
          if (v120 <= v131)
            goto LABEL_389;
        }
        else if (!v120)
        {
          goto LABEL_389;
        }
        if (v121 && (v165 = (4 * *(_BYTE *)(v121 + 18) + 8) & 0x3C, ((v120 >> v165) & 0xF) != 0))
        {
          v190 = ((((v120 >> v165) & 0xF) - 1) << v165) | ((-15 << v165) - 1) & v120;
          result = (_QWORD *)swift_unknownObjectRelease();
          v9 = a3;
        }
        else
        {
          swift_unknownObjectRetain();
          v166 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v189, v130);
          result = (_QWORD *)swift_unknownObjectRelease_n();
          v9 = a3;
          if ((v166 & 1) == 0)
            goto LABEL_399;
          v122 = v189;
        }
        if (v122 != v184[11])
          goto LABEL_390;
        if (!*v176)
          goto LABEL_411;
        v91 = v190;
        result = (_QWORD *)specialized Rope._Node._prepareModify(at:)(v190, (uint64_t)v204);
        v192 = v204[0];
        v193 = v204[1];
        v194 = v204[2];
        v21 = __OFSUB__(v123, *((_QWORD *)&v204[0] + 1));
        v167 = v123 - *((_QWORD *)&v204[0] + 1);
        if (v21)
          goto LABEL_392;
        if (__OFADD__(*((_QWORD *)&v204[0] + 1), v129))
          goto LABEL_394;
        v186 = v167;
        *((_QWORD *)&v192 + 1) = *((_QWORD *)&v204[0] + 1) + v129;
        v168 = v122 + 1;
        v184[11] = v168;
        if (!v184[8])
          goto LABEL_412;
        v68 = specialized Rope._Node._finalizeModify(_:)(v188, &v192);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = (_QWORD *)swift_bridgeObjectRelease();
        v92 = v178 - 1;
        if (__OFSUB__(v178, 1))
          goto LABEL_395;
        v15 = v168;
LABEL_226:
        v135 = v104[8];
        v136 = v104[11];
        *(_QWORD *)&v192 = v15;
        *((_QWORD *)&v192 + 1) = v91;
        *(_QWORD *)&v193 = v68;
        v21 = __OFADD__(v92, 1);
        v137 = v92 + 1;
        if (v21)
          goto LABEL_342;
        if (v15 != v136)
          goto LABEL_343;
        if (v68)
        {
          v138 = v68[3 * ((v91 >> ((4 * *((_BYTE *)v68 + 18) + 8) & 0x3C)) & 0xF) + 3];
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          swift_unknownObjectRetain();
          v138 = specialized Rope._Node.subscript.getter(v91, v135);
        }
        swift_bridgeObjectRelease();
        result = (_QWORD *)swift_bridgeObjectRelease();
        v21 = __OFADD__(v186, v138);
        v187 = v186 + v138;
        if (v21)
          goto LABEL_344;
        if (v135)
        {
          v139 = ((-15 << ((4 * *(_BYTE *)(v135 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v135 + 18) | ((unint64_t)*(unsigned __int16 *)(v135 + 16) << ((4 * *(_BYTE *)(v135 + 18) + 8) & 0x3C));
          result = (_QWORD *)swift_unknownObjectRetain();
        }
        else
        {
          v139 = 0;
        }
        v5 = a2;
        if (v91 >= v139)
          goto LABEL_345;
        v178 = v137;
        if (v68
          && (v140 = (4 * *((_BYTE *)v68 + 18) + 8) & 0x3C,
              v141 = ((v91 >> v140) & 0xF) + 1,
              v141 < *((unsigned __int16 *)v68 + 8)))
        {
          v33 = (v141 << v140) | ((-15 << v140) - 1) & v91;
          result = (_QWORD *)swift_unknownObjectRelease_n();
          v6 = (uint64_t)v176;
          v32 = v187;
        }
        else
        {
          v182 = v15;
          v142 = *(unsigned __int8 *)(v135 + 18);
          v143 = (4 * v142 + 8) & 0x3C;
          v189 = (v91 >> v143) & 0xF;
          if (v142)
          {
            swift_unknownObjectRetain();
            v144 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v135 + 24, &v189, (uint64_t)&v192, v135, v142);
            result = (_QWORD *)swift_unknownObjectRelease();
            v32 = v187;
            if ((v144 & 1) == 0)
              goto LABEL_244;
            result = (_QWORD *)swift_unknownObjectRelease_n();
            v33 = *((_QWORD *)&v192 + 1);
            v6 = (uint64_t)v176;
          }
          else
          {
            v145 = ((v91 >> v143) & 0xF) + 1;
            v32 = v187;
            if (v145 >= *(unsigned __int16 *)(v135 + 16))
            {
LABEL_244:
              v6 = (uint64_t)v176;
              if (v135)
              {
                v146 = *(unsigned __int8 *)(v135 + 18);
                v147 = *(unsigned __int16 *)(v135 + 16);
                result = (_QWORD *)swift_unknownObjectRelease_n();
                v33 = ((-15 << ((4 * v146 + 8) & 0x3C)) - 1) & v146 | (unint64_t)(v147 << ((4 * v146 + 8) & 0x3C));
              }
              else
              {
                v33 = 0;
              }
              *(_QWORD *)&v192 = v182;
              *((_QWORD *)&v192 + 1) = v33;
              *(_QWORD *)&v193 = 0;
              goto LABEL_248;
            }
            v33 = (v145 << v143) | ((-15 << v143) - 1) & v91;
            *((_QWORD *)&v192 + 1) = v33;
            result = (_QWORD *)swift_unknownObjectRelease_n();
            *(_QWORD *)&v193 = v135;
            v6 = (uint64_t)v176;
          }
        }
LABEL_248:
        v11 = v192;
        v15 = v193;
        if (v32 >= v9)
        {
          v148 = *(_QWORD *)v6;
          if (a2 == v9)
          {
            v11 = v104[11];
            if (v148)
            {
              v149 = v104[10];
              if (v149 < a2)
                goto LABEL_372;
              v150 = v104[9];
              v151 = *(unsigned __int8 *)(v148 + 18);
              if (*(_WORD *)(v148 + 16) && v149 > a2)
              {
                if (*(_BYTE *)(v148 + 18))
                {
                  result = (_QWORD *)swift_unknownObjectRetain_n();
                  v35 = a2;
                  v152 = v148;
                  while (1)
                  {
                    v154 = *(unsigned __int16 *)(v152 + 16);
                    if (!*(_WORD *)(v152 + 16))
                      goto LABEL_257;
                    v155 = *(_QWORD *)(v152 + 40);
                    v156 = v35 - v155;
                    if (__OFSUB__(v35, v155))
                      goto LABEL_347;
                    if (__OFADD__(v156, 1))
                      goto LABEL_348;
                    if (v156 + 1 <= 0)
                    {
                      v154 = 0;
                    }
                    else
                    {
                      if ((_DWORD)v154 == 1)
                      {
                        v35 -= v155;
LABEL_257:
                        if (v35)
                          goto LABEL_346;
                        goto LABEL_258;
                      }
                      v157 = *(_QWORD *)(v152 + 64);
                      v21 = __OFSUB__(v156, v157);
                      v158 = v156 - v157;
                      if (v21)
                        goto LABEL_361;
                      if (__OFADD__(v158, 1))
                        goto LABEL_362;
                      if (v158 + 1 >= 1)
                      {
                        if ((_DWORD)v154 != 2)
                        {
                          v159 = (_QWORD *)(v152 + 88);
                          v160 = 2;
                          while (v154 != v160)
                          {
                            v35 = v158 - *v159;
                            if (__OFSUB__(v158, *v159))
                              goto LABEL_335;
                            if (__OFADD__(v35, 1))
                              goto LABEL_336;
                            if (v35 + 1 < 1)
                            {
                              v154 = v160;
                              v35 = v158;
                              goto LABEL_258;
                            }
                            ++v160;
                            v159 += 3;
                            v158 = v35;
                            if (v154 == v160)
                              goto LABEL_257;
                          }
LABEL_334:
                          __break(1u);
LABEL_335:
                          __break(1u);
LABEL_336:
                          __break(1u);
LABEL_337:
                          __break(1u);
                          goto LABEL_338;
                        }
                        v35 = v158;
                        goto LABEL_257;
                      }
                      v154 = 1;
                      v35 = v156;
                    }
LABEL_258:
                    v153 = (4 * *(_BYTE *)(v152 + 18) + 8) & 0x3C;
                    v151 = ((-15 << v153) - 1) & v151 | (v154 << v153);
                    v15 = *(_QWORD *)(v152 + 24 + 24 * v154);
                    swift_unknownObjectRetain();
                    result = (_QWORD *)swift_unknownObjectRelease();
                    v152 = v15;
                    if (!*(_BYTE *)(v15 + 18))
                      goto LABEL_284;
                  }
                }
                result = (_QWORD *)swift_unknownObjectRetain_n();
                v151 = 0;
                v35 = a2;
                v15 = v148;
LABEL_284:
                v161 = *(unsigned __int16 *)(v15 + 16);
                if (*(_WORD *)(v15 + 16))
                {
                  v162 = *(_QWORD *)(v15 + 24);
                  v21 = __OFSUB__(v35, v162);
                  v163 = v35 - v162;
                  if (v21)
                    goto LABEL_397;
                  if (__OFADD__(v163, 1))
                    goto LABEL_398;
                  if (v163 + 1 <= 0)
                  {
                    v161 = 0;
                    goto LABEL_321;
                  }
                  if ((_DWORD)v161 != 1)
                  {
                    v164 = *(_QWORD *)(v15 + 48);
                    v35 = v163 - v164;
                    if (__OFSUB__(v163, v164))
                      goto LABEL_400;
                    if (__OFADD__(v35, 1))
                      goto LABEL_401;
                    if (v35 + 1 >= 1)
                    {
                      if ((_DWORD)v161 != 2)
                      {
                        v169 = (_QWORD *)(v15 + 72);
                        v170 = 2;
                        while (v161 != v170)
                        {
                          v163 = v35 - *v169;
                          if (__OFSUB__(v35, *v169))
                            goto LABEL_382;
                          if (__OFADD__(v163, 1))
                            goto LABEL_383;
                          if (v163 + 1 < 1)
                          {
                            v161 = v170;
                            goto LABEL_321;
                          }
                          ++v170;
                          v169 += 3;
                          v35 = v163;
                          if (v161 == v170)
                            goto LABEL_294;
                        }
                        goto LABEL_381;
                      }
                      goto LABEL_293;
                    }
                    v161 = 1;
                    v35 = v163;
LABEL_321:
                    swift_unknownObjectRelease();
                    swift_unknownObjectRelease();
                    v34 = v151 & 0xFFFFFFFFFFFFF0FFLL | (v161 << 8);
LABEL_52:
                    swift_unknownObjectRetain();
                    v178 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v11, v34, v15, v148, v150);
                    result = (_QWORD *)swift_unknownObjectRelease_n();
                    v5 = a2;
                    v33 = v34;
                    goto LABEL_53;
                  }
                }
                else
                {
LABEL_293:
                  v163 = v35;
                }
LABEL_294:
                if (v163)
                  goto LABEL_396;
                v35 = 0;
                goto LABEL_321;
              }
              v34 = ((-15 << ((4 * v151 + 8) & 0x3C)) - 1) & v151 | ((unint64_t)*(unsigned __int16 *)(v148 + 16) << ((4 * v151 + 8) & 0x3C));
              swift_unknownObjectRetain();
              v35 = 0;
              v15 = 0;
              goto LABEL_52;
            }
            if (a2 > 0)
              goto LABEL_378;
            v35 = 0;
            v15 = 0;
            v33 = 0;
            v178 = 0;
LABEL_53:
            v21 = __OFSUB__(v5, v35);
            v32 = v5 - v35;
            v9 = a3;
            if (v21)
              goto LABEL_368;
          }
          else
          {
            v32 = 0;
            v178 = 0;
            v15 = 0;
            v33 = 0;
            v11 = v104[11];
            if (v148)
            {
              v15 = 0;
              v32 = v104[10];
              v178 = v104[9];
              v33 = ((-15 << ((4 * *(_BYTE *)(v148 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v148 + 18) | ((unint64_t)*(unsigned __int16 *)(v148 + 16) << ((4 * *(_BYTE *)(v148 + 18) + 8) & 0x3C));
            }
          }
        }
      }
      if (*(_BYTE *)(v10 + 18))
      {
        result = (_QWORD *)swift_unknownObjectRetain_n();
        v9 = v5;
        v41 = v10;
LABEL_73:
        v28 = *(unsigned __int16 *)(v41 + 16);
        if (!*(_WORD *)(v41 + 16))
          goto LABEL_71;
        v43 = *(_QWORD *)(v41 + 40);
        v21 = __OFSUB__(v9, v43);
        v30 = v9 - v43;
        if (v21)
          goto LABEL_330;
        if (__OFADD__(v30, 1))
          goto LABEL_331;
        if (v30 + 1 <= 0)
        {
          v28 = 0;
          goto LABEL_72;
        }
        if ((_DWORD)v28 == 1)
        {
          v9 = v30;
LABEL_71:
          if (!v9)
            goto LABEL_72;
          __break(1u);
LABEL_329:
          __break(1u);
LABEL_330:
          __break(1u);
LABEL_331:
          __break(1u);
LABEL_332:
          __break(1u);
LABEL_333:
          __break(1u);
          goto LABEL_334;
        }
        v44 = (uint64_t *)(v41 + 64);
        v45 = 1;
        while (1)
        {
          v46 = *v44;
          v44 += 3;
          v9 = v30 - v46;
          if (__OFSUB__(v30, v46))
            break;
          if (__OFADD__(v9, 1))
            goto LABEL_324;
          if (v9 + 1 < 1)
          {
            v28 = v45;
            v9 = v30;
LABEL_72:
            v42 = (4 * *(_BYTE *)(v41 + 18) + 8) & 0x3C;
            v36 = ((-15 << v42) - 1) & v36 | (v28 << v42);
            v5 = *(_QWORD *)(v41 + 24 + 24 * v28);
            swift_unknownObjectRetain();
            result = (_QWORD *)swift_unknownObjectRelease();
            v41 = v5;
            if (!*(_BYTE *)(v5 + 18))
              goto LABEL_87;
            goto LABEL_73;
          }
          ++v45;
          v30 = v9;
          if (v28 == v45)
            goto LABEL_71;
        }
        __break(1u);
LABEL_324:
        __break(1u);
LABEL_325:
        __break(1u);
LABEL_326:
        __break(1u);
LABEL_327:
        v26 = v30;
        v16 = v28;
        continue;
      }
      break;
    }
    result = (_QWORD *)swift_unknownObjectRetain_n();
    v36 = 0;
    v9 = v5;
    v5 = v10;
LABEL_87:
    v47 = *(unsigned __int16 *)(v5 + 16);
    if (!*(_WORD *)(v5 + 16))
      goto LABEL_99;
    v48 = *(_QWORD *)(v5 + 24);
    v21 = __OFSUB__(v9, v48);
    v49 = v9 - v48;
    if (v21)
      goto LABEL_375;
    if (__OFADD__(v49, 1))
      goto LABEL_376;
    if (v49 + 1 <= 0)
    {
      v47 = 0;
    }
    else
    {
      if ((_DWORD)v47 == 1)
      {
        v9 = v49;
LABEL_99:
        if (v9)
          goto LABEL_373;
        goto LABEL_100;
      }
      v50 = (uint64_t *)(v5 + 48);
      v51 = 1;
      while (1)
      {
        v52 = *v50;
        v50 += 3;
        v9 = v49 - v52;
        if (__OFSUB__(v49, v52))
          goto LABEL_355;
        if (__OFADD__(v9, 1))
          goto LABEL_356;
        if (v9 + 1 < 1)
          break;
        ++v51;
        v49 = v9;
        if (v47 == v51)
          goto LABEL_99;
      }
      v47 = v51;
      v9 = v49;
    }
LABEL_100:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v38 = v36 & 0xFFFFFFFFFFFFF0FFLL | (v47 << 8);
    goto LABEL_101;
  }
LABEL_404:
  __break(1u);
LABEL_405:
  __break(1u);
LABEL_406:
  __break(1u);
LABEL_407:
  __break(1u);
LABEL_408:
  __break(1u);
LABEL_409:
  __break(1u);
LABEL_410:
  __break(1u);
LABEL_411:
  __break(1u);
LABEL_412:
  __break(1u);
  return result;
}

_QWORD *AttributedString._InternalRunsSlice.startIndex.getter@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;

  v4 = result[8];
  if (v4)
    v5 = result[10];
  else
    v5 = 0;
  if (a2 < 0 || v5 < a2)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  v7 = result[9];
  v8 = result[11];
  if (!v4 || (result[10] > a2 ? (v9 = *(unsigned __int16 *)(v4 + 16) == 0) : (v9 = 1), v9))
  {
    v10 = swift_unknownObjectRetain_n();
    v11 = specialized Rope._endPath.getter(v10);
    result = (_QWORD *)swift_unknownObjectRelease();
    v13 = 0;
    v14 = 0;
    if (!v4)
      goto LABEL_49;
    goto LABEL_13;
  }
  v30 = result[9];
  v31 = result[11];
  v17 = *(unsigned __int8 *)(v4 + 18);
  if (!*(_BYTE *)(v4 + 18))
  {
    result = (_QWORD *)swift_unknownObjectRetain_n();
    v8 = 0;
    v14 = a2;
    v13 = v4;
    v26 = *(unsigned __int16 *)(v4 + 16);
    if (!*(_WORD *)(v4 + 16))
      goto LABEL_47;
LABEL_36:
    v27 = *(_QWORD *)(v13 + 24);
    v21 = __OFSUB__(v14, v27);
    v16 = v14 - v27;
    if (v21)
      goto LABEL_61;
    if (__OFADD__(v16, 1))
    {
LABEL_62:
      __break(1u);
      goto LABEL_63;
    }
    if ((uint64_t)(v16 + 1) < 1)
    {
      v26 = 0;
      goto LABEL_48;
    }
    if ((_DWORD)v26 == 1)
    {
      v14 = v16;
      goto LABEL_47;
    }
    v28 = (uint64_t *)(v13 + 48);
    v12 = 1;
    while (1)
    {
      v29 = *v28;
      v28 += 3;
      v14 = v16 - v29;
      if (__OFSUB__(v16, v29))
        break;
      if (__OFADD__(v14, 1))
        goto LABEL_60;
      if ((uint64_t)(v14 + 1) < 1)
        goto LABEL_52;
      ++v12;
      v16 = v14;
      if (v26 == v12)
        goto LABEL_47;
    }
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  result = (_QWORD *)swift_unknownObjectRetain_n();
  v14 = a2;
  v13 = v4;
  do
  {
    v19 = *(unsigned __int16 *)(v13 + 16);
    if (*(_WORD *)(v13 + 16))
    {
      v20 = *(_QWORD *)(v13 + 40);
      v21 = __OFSUB__(v14, v20);
      v22 = v14 - v20;
      if (v21)
        goto LABEL_56;
      if (__OFADD__(v22, 1))
        goto LABEL_57;
      if ((uint64_t)(v22 + 1) < 1)
      {
        v19 = 0;
        goto LABEL_19;
      }
      if ((_DWORD)v19 != 1)
      {
        v23 = (uint64_t *)(v13 + 64);
        v24 = 1;
        while (1)
        {
          v25 = *v23;
          v23 += 3;
          v14 = v22 - v25;
          if (__OFSUB__(v22, v25))
            break;
          if (__OFADD__(v14, 1))
            goto LABEL_54;
          if ((uint64_t)(v14 + 1) < 1)
          {
            v19 = v24;
            v14 = v22;
            goto LABEL_19;
          }
          ++v24;
          v22 = v14;
          if (v19 == v24)
            goto LABEL_18;
        }
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }
      v14 = v22;
    }
LABEL_18:
    if (v14)
      goto LABEL_55;
LABEL_19:
    v18 = (4 * *(_BYTE *)(v13 + 18) + 8) & 0x3C;
    v17 = ((-15 << v18) - 1) & v17 | (v19 << v18);
    v13 = *(_QWORD *)(v13 + 24 + 24 * v19);
    swift_unknownObjectRetain();
    result = (_QWORD *)swift_unknownObjectRelease();
  }
  while (*(_BYTE *)(v13 + 18));
  v8 = v17 & 0xFFFFFFFFFFFFF0FFLL;
  v26 = *(unsigned __int16 *)(v13 + 16);
  if (*(_WORD *)(v13 + 16))
    goto LABEL_36;
LABEL_47:
  if (!v14)
  {
    while (1)
    {
LABEL_48:
      swift_unknownObjectRelease();
      result = (_QWORD *)swift_unknownObjectRelease();
      v11 = v8 | (v26 << 8);
      v7 = v30;
      v8 = v31;
      if (v4)
      {
LABEL_13:
        swift_unknownObjectRetain();
        v15 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v8, v11, v13, v4, v7);
        result = (_QWORD *)swift_unknownObjectRelease_n();
        v16 = a2 - v14;
        if (!__OFSUB__(a2, v14))
          goto LABEL_14;
      }
      else
      {
LABEL_49:
        v15 = 0;
        v16 = a2 - v14;
        if (!__OFSUB__(a2, v14))
        {
LABEL_14:
          *a3 = v8;
          a3[1] = v11;
          a3[2] = v13;
          a3[3] = v15;
          a3[4] = v16;
          return result;
        }
      }
      __break(1u);
LABEL_52:
      v26 = v12;
      v14 = v16;
    }
  }
LABEL_63:
  __break(1u);
  return result;
}

uint64_t specialized Rope._Node.distanceFromStart<A>(to:in:)(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = a4 + 16;
  v5 = *(unsigned __int16 *)(a4 + 16);
  v7 = *(unsigned __int8 *)(a4 + 18);
  v8 = (a2 >> ((4 * v7 + 8) & 0x3C)) & 0xF;
  if (v8 > v5)
  {
    __break(1u);
  }
  else
  {
    if (v8 == v5)
    {
      if ((a2 & (~(-1 << ((4 * v7) & 0x3C)) << 8)) == 0)
        return a5;
      __break(1u);
    }
    v12 = result;
    v13 = a4 + 24;
    swift_unknownObjectRetain();
    if (!v7)
    {
      v20 = specialized closure #1 in Rope._Node.distanceFromStart<A>(to:in:)(v6, v13, v8);
      swift_unknownObjectRelease();
      return v20;
    }
    v14 = specialized Rope._UnsafeHandle.distance<A>(from:to:in:)(0, v8, v6, v13);
    v15 = (uint64_t *)(v13 + 24 * v8);
    v16 = *v15;
    v17 = v15[1];
    v18 = v15[2];
    swift_unknownObjectRetain();
    v19 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v12, a2, a3, v16, v17, v18);
    result = swift_unknownObjectRelease();
    a5 = v14 + v19;
    if (!__OFADD__(v14, v19))
    {
      swift_unknownObjectRelease();
      return a5;
    }
  }
  __break(1u);
  return result;
}

_QWORD *specialized Rope.update<A>(at:by:)(_QWORD *result, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v3 = a2[3];
  if (*result != v3)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (!*a2)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v6 = result;
  specialized Rope._Node._prepareModify(at:)(result[1], (uint64_t)&v13);
  v16 = v14;
  outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v16);
  result = (_QWORD *)outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v16 + 8);
  v10 = v13;
  v11 = v14;
  v12 = v15;
  v7 = *a3;
  v8 = a3[1];
  *(_QWORD *)&v11 = v7;
  *((_QWORD *)&v11 + 1) = v8;
  a2[3] = v3 + 1;
  *v6 = v3 + 1;
  if (*a2)
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v6[2] = specialized Rope._Node._finalizeModify(_:)(&v9, &v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (_QWORD *)v7;
  }
LABEL_7:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v3 = a2[3];
  if (*result != v3)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (!*a2)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v6 = result;
  specialized Rope._Node._prepareModify(at:)(result[1], (uint64_t)&v13);
  v16 = v14;
  v10 = v13;
  v11 = v14;
  v12 = v15;
  v8 = *a3;
  v7 = a3[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v16);
  result = (_QWORD *)outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v16 + 8);
  *(_QWORD *)&v11 = v8;
  *((_QWORD *)&v11 + 1) = v7;
  a2[3] = v3 + 1;
  *v6 = v3 + 1;
  if (*a2)
  {
    v6[2] = specialized Rope._Node._finalizeModify(_:)(&v9, &v10);
    swift_bridgeObjectRelease();
    return (_QWORD *)swift_bridgeObjectRelease();
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t specialized Rope._Node._prepareModify(at:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  _QWORD v17[2];
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  result = swift_isUniquelyReferenced_nonNull();
  v6 = *v2;
  if ((result & 1) == 0)
  {
    v6 = specialized Rope._Node.copy()(*v2);
    v8 = v7;
    v10 = v9;
    result = swift_unknownObjectRelease();
    *v2 = v6;
    v2[1] = v8;
    v2[2] = v10;
  }
  if (((a1 >> ((4 * *(_BYTE *)(v6 + 18) + 8) & 0x3C)) & 0xF) >= *(unsigned __int16 *)(v6 + 16))
  {
    __break(1u);
  }
  else
  {
    if (*(_BYTE *)(v6 + 18))
    {
      swift_unknownObjectRetain();
      specialized Rope._Node._prepareModify(at:)(v17, a1);
      a1 = v17[0];
      v11 = v17[1];
      v16 = v18;
      v13 = v19;
      v12 = v20;
      result = swift_unknownObjectRelease();
      v14 = v16;
    }
    else
    {
      v15 = v6 + 24 + 24 * ((a1 >> ((4 * *(_BYTE *)(v6 + 18) + 8) & 0x3C)) & 0xF);
      v12 = *(_QWORD *)v15;
      v14 = *(_OWORD *)(v15 + 8);
      v13 = 1;
      v11 = *(_QWORD *)v15;
    }
    *(_QWORD *)a2 = a1;
    *(_QWORD *)(a2 + 8) = v11;
    *(_OWORD *)(a2 + 16) = v14;
    *(_QWORD *)(a2 + 32) = v13;
    *(_QWORD *)(a2 + 40) = v12;
  }
  return result;
}

_QWORD *specialized Rope._Node._finalizeModify(_:)(_QWORD *result, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];

  v3 = v2;
  v5 = result;
  v6 = *v2;
  v7 = (*a2 >> ((4 * *(_BYTE *)(*v2 + 18) + 8) & 0x3C)) & 0xFLL;
  if (*(_BYTE *)(*v2 + 18))
  {
    swift_unknownObjectRetain();
    v8 = specialized Rope._Node._finalizeModify(_:)(v27, a2);
    result = (_QWORD *)swift_unknownObjectRelease();
    v9 = v27[0];
    v10 = v3[1];
    v11 = v10 + v27[0];
    if (__OFADD__(v10, v27[0]))
    {
      __break(1u);
    }
    else
    {
      v12 = v27[1];
      v3[1] = v11;
      v13 = v3[2];
      v14 = __OFADD__(v13, v12);
      v15 = v13 + v12;
      if (!v14)
      {
        v3[2] = v15;
        v6 = v8;
        *v5 = v9;
        v5[1] = v12;
        return (_QWORD *)v6;
      }
    }
    __break(1u);
    goto LABEL_13;
  }
  v16 = a2[4];
  v14 = __OFSUB__(1, v16);
  v17 = 1 - v16;
  if (v14)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v18 = a2[1];
  v19 = a2[5];
  *result = v17;
  v14 = __OFSUB__(v18, v19);
  v20 = v18 - v19;
  if (v14)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  result[1] = v20;
  v21 = (_QWORD *)(v6 + 24 * v7);
  result = (_QWORD *)a2[2];
  v22 = a2[3];
  v21[3] = v18;
  v21[4] = result;
  v21[5] = v22;
  v23 = v3[1];
  v14 = __OFADD__(v23, v17);
  v24 = v23 + v17;
  if (v14)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v3[1] = v24;
  v25 = v3[2];
  v14 = __OFADD__(v25, v20);
  v26 = v25 + v20;
  if (!v14)
  {
    v3[2] = v26;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return (_QWORD *)v6;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t specialized AttributedString._InternalRuns.updateAndCoalesce(at:with:)(uint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  _QWORD *v31;
  unsigned int v32;
  char v33;
  _QWORD *v34;
  char v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  char v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t *v61;
  uint64_t v62;
  _OWORD v63[3];
  __int128 v64;
  _QWORD *v65;
  _OWORD v66[3];
  __int128 v67;
  __int128 v68;
  __int128 v69;

  v56 = a1[3];
  v57 = a1[4];
  v4 = (_QWORD *)a1[2];
  v64 = *(_OWORD *)a1;
  v65 = v4;
  v60 = specialized Rope.update<A>(at:by:)(&v64, a2, a3);
  v61 = a2;
  v5 = *a2;
  v6 = a2[1];
  v8 = a2[2];
  v7 = a2[3];
  v9 = v64;
  v67 = v64;
  v10 = *((_QWORD *)&v64 + 1);
  v58 = v11;
  v59 = v65;
  *(_QWORD *)&v68 = v65;
  swift_unknownObjectRetain();
  specialized Rope.formIndex(after:)(&v67, v5, v6, v8, v7);
  swift_unknownObjectRelease();
  v13 = *((_QWORD *)&v67 + 1);
  v12 = v67;
  v14 = v68;
  v15 = swift_unknownObjectRetain();
  v16 = specialized Rope._endPath.getter(v15);
  result = swift_unknownObjectRelease();
  if (v13 >= v16)
  {
    v20 = v10;
    v21 = v9;
    v22 = *v61;
    if (!*v61)
      goto LABEL_20;
    goto LABEL_18;
  }
  if (v12 != v7)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  if (v14)
  {
    v18 = v14 + 24 * ((v13 >> ((4 * *(_BYTE *)(v14 + 18) + 8) & 0x3C)) & 0xF);
    v19 = *(_QWORD *)(v18 + 32);
    v13 = *(_QWORD *)(v18 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v13, v5);
    v19 = v23;
    v13 = v24;
    swift_unknownObjectRelease();
  }
  v20 = v10;
  v21 = v9;
  v25 = (uint64_t *)v61;
  if ((specialized static Dictionary<>.== infix(_:_:)(v19, (uint64_t)v60) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v22 = *v61;
    if (!*v61)
      goto LABEL_20;
LABEL_18:
    v30 = *(unsigned __int8 *)(v22 + 18);
    goto LABEL_21;
  }
  v26 = specialized static Set.== infix(_:_:)(v13, v58);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v26 & 1) != 0)
  {
    v20 = specialized Rope._remove(at:)((uint64_t)&v67, v21, v10);
    v27 = *v61;
    v28 = v61[3];
    if (v20 < specialized Rope._endPath.getter(*v61) && *(_BYTE *)(v27 + 18))
    {
      v29 = (v20 >> ((4 * *(_BYTE *)(v27 + 18) + 8) & 0x3C)) & 0xF;
      swift_unknownObjectRetain();
      specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v27 + 24, v29, v20);
      swift_unknownObjectRelease();
    }
    v13 = v67;
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if (!v27)
      goto LABEL_70;
    result = specialized Rope._Node._prepareModify(at:)(v20, (uint64_t)v66);
    v67 = v66[0];
    v68 = v66[1];
    v69 = v66[2];
    if (__OFADD__(*((_QWORD *)&v66[0] + 1), v13))
      goto LABEL_64;
    *((_QWORD *)&v67 + 1) = *((_QWORD *)&v66[0] + 1) + v13;
    v21 = v28 + 1;
    v61[3] = v28 + 1;
    if (!*v61)
    {
LABEL_71:
      __break(1u);
      goto LABEL_72;
    }
    v25 = (uint64_t *)v61;
    v59 = specialized Rope._Node._finalizeModify(_:)(v63, &v67);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v7 = v28 + 1;
  }
  v22 = *v25;
  if (*v25)
    goto LABEL_18;
LABEL_20:
  v30 = 0;
LABEL_21:
  if (v20 <= v30)
  {
LABEL_41:
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v48 = v56;
    v49 = v57;
    v50 = a1;
    v31 = v59;
LABEL_42:
    *v50 = v21;
    v50[1] = v20;
    v50[2] = (uint64_t)v31;
    v50[3] = v48;
    v50[4] = v49;
    return result;
  }
  *(_QWORD *)&v67 = v21;
  *((_QWORD *)&v67 + 1) = v20;
  v31 = v59;
  *(_QWORD *)&v68 = v59;
  if (v21 != v7)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  if (v22)
  {
    v32 = *(unsigned __int8 *)(v22 + 18);
    swift_unknownObjectRetain();
    if (v20 > v32)
      goto LABEL_25;
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (!v20)
    goto LABEL_33;
LABEL_25:
  if (v59)
  {
    v33 = (4 * *((_BYTE *)v59 + 18) + 8) & 0x3C;
    if (((v20 >> v33) & 0xF) != 0)
    {
      v13 = ((((v20 >> v33) & 0xF) - 1) << v33) | ((-15 << v33) - 1) & v20;
      swift_unknownObjectRelease();
      v34 = v59;
LABEL_31:
      v36 = &v34[3 * ((v13 >> ((4 * *((_BYTE *)v34 + 18) + 8) & 0x3C)) & 0xF)];
      v38 = v36[4];
      v37 = v36[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_35;
    }
  }
  swift_unknownObjectRetain();
  v35 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v67, v22);
  result = swift_unknownObjectRelease_n();
  if ((v35 & 1) == 0)
  {
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  if ((_QWORD)v67 != v21)
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  v13 = *((_QWORD *)&v67 + 1);
  v34 = (_QWORD *)v68;
  if ((_QWORD)v68)
    goto LABEL_31;
LABEL_34:
  swift_unknownObjectRetain();
  specialized Rope._Node.subscript.getter(v13, v22);
  v38 = v39;
  v37 = v40;
  swift_unknownObjectRelease();
LABEL_35:
  if ((specialized static Dictionary<>.== infix(_:_:)(v38, (uint64_t)v60) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_41;
  }
  v41 = v21;
  v42 = specialized static Set.== infix(_:_:)(v37, v58);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v42 & 1) == 0)
  {
    v48 = v56;
    v49 = v57;
    v50 = a1;
    v21 = v41;
    goto LABEL_42;
  }
  v43 = specialized Rope._remove(at:)((uint64_t)&v67, v41, v20);
  v44 = *v61;
  v45 = v61[3];
  if (v43 >= specialized Rope._endPath.getter(*v61))
  {
    v46 = 0;
  }
  else
  {
    v46 = v44;
    if (*(_BYTE *)(v44 + 18))
    {
      v47 = (v43 >> ((4 * *(_BYTE *)(v44 + 18) + 8) & 0x3C)) & 0xF;
      swift_unknownObjectRetain();
      v46 = specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v44 + 24, v47, v43);
      swift_unknownObjectRelease();
    }
  }
  *(_QWORD *)&v64 = v45;
  *((_QWORD *)&v64 + 1) = v43;
  v65 = (_QWORD *)v46;
  v51 = v67;
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (!v44)
  {
    if (v43)
      goto LABEL_47;
    goto LABEL_59;
  }
  v52 = *(unsigned __int8 *)(v44 + 18);
  result = swift_unknownObjectRetain();
  if (v52 >= v43)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
LABEL_47:
  if (v46)
  {
    v53 = (4 * *(_BYTE *)(v46 + 18) + 8) & 0x3C;
    if (((v43 >> v53) & 0xF) != 0)
    {
      *((_QWORD *)&v64 + 1) = ((((v43 >> v53) & 0xF) - 1) << v53) | ((-15 << v53) - 1) & v43;
      result = swift_unknownObjectRelease();
      goto LABEL_52;
    }
  }
  swift_unknownObjectRetain();
  v54 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v64, v44);
  result = swift_unknownObjectRelease_n();
  if ((v54 & 1) == 0)
  {
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  if ((_QWORD)v64 != v45)
  {
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
LABEL_52:
  if (!v44)
  {
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
  v20 = *((_QWORD *)&v64 + 1);
  result = specialized Rope._Node._prepareModify(at:)(*((unint64_t *)&v64 + 1), (uint64_t)&v67);
  v63[0] = v67;
  v63[1] = v68;
  v63[2] = v69;
  v49 = v57 - *((_QWORD *)&v67 + 1);
  if (__OFSUB__(v57, *((_QWORD *)&v67 + 1)))
    goto LABEL_66;
  if (__OFADD__(*((_QWORD *)&v67 + 1), v51))
  {
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }
  *((_QWORD *)&v63[0] + 1) = *((_QWORD *)&v67 + 1) + v51;
  v21 = v45 + 1;
  v61[3] = v45 + 1;
  if (*v61)
  {
    v31 = specialized Rope._Node._finalizeModify(_:)(&v62, v63);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v48 = v56 - 1;
    if (!__OFSUB__(v56, 1))
    {
      v50 = a1;
      goto LABEL_42;
    }
    goto LABEL_68;
  }
LABEL_73:
  __break(1u);
  return result;
}

uint64_t outlined consume of AttributedString.Runs.Run?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t *AttributedString.Runs._resolve(_:)@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int64x2_t v37;
  int64x2_t v38;
  int64x2_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  unint64_t v59;
  char v60[48];
  __int128 v61;
  __int128 v62;
  __int128 v63;

  v4 = *result;
  if (*result < v2[1] || v2[9] < v4)
  {
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }
  v6 = result[3];
  v5 = result[4];
  v7 = *v2;
  if (v6 == 1)
  {
    v8 = *(_QWORD *)(v7 + 88);
  }
  else
  {
    v9 = result[1];
    v8 = *(_QWORD *)(v7 + 88);
    if (v9 == v8)
    {
      v59 = result[2];
      if (result[7] == 2)
      {
        v10 = *(_QWORD *)(v7 + 64);
        if (v10)
        {
          v12 = *(_QWORD *)(v7 + 72);
          v11 = *(_QWORD *)(v7 + 80);
          swift_unknownObjectRetain();
          v13 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v9, v59, v6, v10, v12, v11);
          swift_unknownObjectRelease();
        }
        else
        {
          v13 = 0;
        }
        goto LABEL_71;
      }
      v13 = v5 >> 11;
LABEL_68:
      v57 = a2;
      v40 = v9;
      v41 = v4;
      v42 = v5 >> 11;
      if (v5 >> 11 == v13)
      {
        v43 = *(_OWORD *)(v7 + 32);
        v61 = *(_OWORD *)(v7 + 16);
        v62 = v43;
        v63 = *(_OWORD *)(v7 + 48);
        BigString.utf8.getter();
        v44 = BigString.UTF8View.index(roundingDown:)();
        v46 = v45;
        v48 = v47;
        v50 = v49;
        v13 = v42;
        v4 = v41;
        v9 = v40;
        a2 = v57;
LABEL_72:
        result = (uint64_t *)outlined release of Locale((uint64_t)v60);
        *a2 = v9;
        a2[1] = v59;
        a2[2] = v6;
        a2[3] = v4;
        a2[4] = v13;
        a2[5] = v44;
        a2[6] = v46;
        a2[7] = v48;
        a2[8] = v50;
        return result;
      }
      v4 = v41;
      v9 = v40;
      a2 = v57;
LABEL_71:
      v51 = *(_OWORD *)(v7 + 32);
      v61 = *(_OWORD *)(v7 + 16);
      v62 = v51;
      v63 = *(_OWORD *)(v7 + 48);
      BigString.utf8.getter();
      BigString.startIndex.getter();
      v44 = BigString.UTF8View.index(_:offsetBy:)();
      v46 = v52;
      v48 = v53;
      v50 = v54;
      goto LABEL_72;
    }
  }
  v15 = *(_QWORD *)(v7 + 64);
  v14 = *(_QWORD *)(v7 + 72);
  if (v15)
    v16 = *(_QWORD *)(v7 + 72);
  else
    v16 = 0;
  if (v4 < 0 || v16 < v4)
  {
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }
  v56 = *(_QWORD *)(v7 + 80);
  v58 = result[7];
  if (!v15 || (v4 < v14 ? (v17 = *(unsigned __int16 *)(v15 + 16) == 0) : (v17 = 1), v17))
  {
    v18 = swift_unknownObjectRetain_n();
    v59 = specialized Rope._endPath.getter(v18);
    swift_unknownObjectRelease();
    v6 = 0;
    if (v15)
      goto LABEL_21;
    v13 = 0;
LABEL_67:
    v9 = v8;
    if (v58 == 2)
      goto LABEL_71;
    goto LABEL_68;
  }
  v55 = *(_QWORD *)(v7 + 72);
  v19 = *(unsigned __int8 *)(v15 + 18);
  if (!*(_BYTE *)(v15 + 18))
  {
    result = (uint64_t *)swift_unknownObjectRetain_n();
    v29 = 0;
    v20 = v4;
    v6 = v15;
    v30 = *(unsigned __int16 *)(v15 + 16);
    if (*(_WORD *)(v15 + 16))
      goto LABEL_41;
LABEL_53:
    v31 = v20;
    goto LABEL_64;
  }
  result = (uint64_t *)swift_unknownObjectRetain_n();
  v20 = v4;
  v6 = v15;
  do
  {
    v22 = *(unsigned __int16 *)(v6 + 16);
    if (*(_WORD *)(v6 + 16))
    {
      v23 = *(_QWORD *)(v6 + 32);
      v24 = __OFSUB__(v20, v23);
      v25 = v20 - v23;
      if (v24)
        goto LABEL_77;
      if (__OFADD__(v25, 1))
        goto LABEL_78;
      if (v25 + 1 < 1)
      {
        v22 = 0;
        goto LABEL_26;
      }
      if ((_DWORD)v22 != 1)
      {
        v26 = (uint64_t *)(v6 + 56);
        v27 = 1;
        while (1)
        {
          v28 = *v26;
          v26 += 3;
          v20 = v25 - v28;
          if (__OFSUB__(v25, v28))
            break;
          if (__OFADD__(v20, 1))
            goto LABEL_75;
          if (v20 + 1 < 1)
          {
            v22 = v27;
            v20 = v25;
            goto LABEL_26;
          }
          ++v27;
          v25 = v20;
          if (v22 == v27)
            goto LABEL_25;
        }
        __break(1u);
LABEL_75:
        __break(1u);
LABEL_76:
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
        goto LABEL_79;
      }
      v20 = v25;
    }
LABEL_25:
    if (v20)
      goto LABEL_76;
LABEL_26:
    v21 = (4 * *(_BYTE *)(v6 + 18) + 8) & 0x3C;
    v19 = ((-15 << v21) - 1) & v19 | (v22 << v21);
    v6 = *(_QWORD *)(v6 + 24 + 24 * v22);
    swift_unknownObjectRetain();
    result = (uint64_t *)swift_unknownObjectRelease();
  }
  while (*(_BYTE *)(v6 + 18));
  v29 = v19 & 0xFFFFFFFFFFFFF0FFLL;
  v30 = *(unsigned __int16 *)(v6 + 16);
  if (!*(_WORD *)(v6 + 16))
    goto LABEL_53;
LABEL_41:
  v31 = v20 - 1;
  if (__OFSUB__(v20, 1))
    goto LABEL_82;
  if (__OFADD__(v31, 1))
  {
LABEL_83:
    __break(1u);
  }
  else
  {
    if (v20 < 1)
    {
      v30 = 0;
      goto LABEL_65;
    }
    if ((_DWORD)v30 != 1)
    {
      v32 = v30 - 2;
      if (v31 < v30 - 2)
        v32 = v20 - 1;
      if (v32 >= v20 + 0x7FFFFFFFFFFFFFFFLL)
        v32 = v20 + 0x7FFFFFFFFFFFFFFFLL;
      v33 = v32 + 1;
      if (v33 >= 5)
      {
        v35 = v33 & 3;
        if ((v33 & 3) == 0)
          v35 = 4;
        v36 = v33 - v35;
        v34 = v36 + 1;
        v37 = 0uLL;
        v38 = (int64x2_t)(unint64_t)(v20 - 1);
        v39.i64[0] = -1;
        v39.i64[1] = -1;
        do
        {
          v38 = vaddq_s64(v38, v39);
          v37 = vaddq_s64(v37, v39);
          v36 -= 4;
        }
        while (v36);
        v31 = vaddvq_s64(vaddq_s64(v37, v38));
      }
      else
      {
        v34 = 1;
      }
      while (v20 + 0x8000000000000000 != v34)
      {
        if (v20 == v34)
        {
          v30 = v20;
          goto LABEL_65;
        }
        ++v34;
        --v31;
        if (v30 == v34)
          goto LABEL_64;
      }
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
      goto LABEL_83;
    }
LABEL_64:
    if (!v31)
    {
LABEL_65:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v59 = v29 | (v30 << 8);
      v14 = v55;
LABEL_21:
      swift_unknownObjectRetain();
      v13 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v8, v59, v6, v15, v14, v56);
      swift_unknownObjectRelease_n();
      goto LABEL_67;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized static Set.== infix(_:_:)(uint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  BOOL v23;
  uint64_t v24;
  unint64_t i;
  uint64_t v26;
  _QWORD *v27;
  BOOL v28;
  uint64_t v29;
  int64_t v30;
  int64_t v31;

  if (result == a2)
    return 1;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 0;
  v29 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(result + 56);
  v30 = (unint64_t)(v4 + 63) >> 6;
  v7 = a2 + 56;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v31 = v3;
      v9 = v8 | (v3 << 6);
      goto LABEL_24;
    }
    v10 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_43;
    }
    if (v10 >= v30)
      return 1;
    v11 = *(_QWORD *)(v29 + 8 * v10);
    v12 = v3 + 1;
    if (!v11)
    {
      v12 = v3 + 2;
      if (v3 + 2 >= v30)
        return 1;
      v11 = *(_QWORD *)(v29 + 8 * v12);
      if (!v11)
      {
        v12 = v3 + 3;
        if (v3 + 3 >= v30)
          return 1;
        v11 = *(_QWORD *)(v29 + 8 * v12);
        if (!v11)
          break;
      }
    }
LABEL_23:
    v6 = (v11 - 1) & v11;
    v31 = v12;
    v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_24:
    v14 = result;
    v15 = (uint64_t *)(*(_QWORD *)(result + 48) + 16 * v9);
    v17 = *v15;
    v16 = v15[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v18 = Hasher._finalize()();
    v19 = -1 << *(_BYTE *)(a2 + 32);
    v20 = v18 & ~v19;
    if (((*(_QWORD *)(v7 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
      goto LABEL_39;
    v21 = *(_QWORD *)(a2 + 48);
    v22 = (_QWORD *)(v21 + 16 * v20);
    v23 = *v22 == v17 && v22[1] == v16;
    if (!v23 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v24 = ~v19;
      for (i = v20 + 1; ; i = v26 + 1)
      {
        v26 = i & v24;
        if (((*(_QWORD *)(v7 + (((i & v24) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v24)) & 1) == 0)
          break;
        v27 = (_QWORD *)(v21 + 16 * v26);
        v28 = *v27 == v17 && v27[1] == v16;
        if (v28 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          goto LABEL_7;
      }
LABEL_39:
      swift_bridgeObjectRelease();
      return 0;
    }
LABEL_7:
    swift_bridgeObjectRelease();
    result = v14;
    v3 = v31;
  }
  v13 = v3 + 4;
  if (v3 + 4 >= v30)
    return 1;
  v11 = *(_QWORD *)(v29 + 8 * v13);
  if (v11)
  {
    v12 = v3 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v12 >= v30)
      return 1;
    v11 = *(_QWORD *)(v29 + 8 * v12);
    ++v13;
    if (v11)
      goto LABEL_23;
  }
LABEL_43:
  __break(1u);
  return result;
}

uint64_t specialized Rope._Node.copy()(uint64_t a1)
{
  char v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  v2 = *(_BYTE *)(a1 + 18);
  v3 = a1 + 24;
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Item>);
    v14 = swift_allocObject();
    *(_BYTE *)(v14 + 18) = 0;
    v15 = *(unsigned __int16 *)(a1 + 16);
    *(_WORD *)(v14 + 16) = v15;
    if (v3 < v14 + 24 + 24 * v15 && v14 + 24 < v3 + 24 * v15)
      goto LABEL_26;
    v7 = v14;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Item);
    swift_arrayInitWithCopy();
    if ((_DWORD)v15)
    {
      v17 = 0;
      v18 = 0;
      while (1)
      {
        v19 = *(_QWORD *)(v7 + v17 + 24);
        v12 = __OFADD__(v18, v19);
        v18 += v19;
        if (v12)
          break;
        v17 += 24;
        if (24 * v15 == v17)
          return v7;
      }
      goto LABEL_25;
    }
    return v7;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Node>);
  v4 = swift_allocObject();
  *(_BYTE *)(v4 + 18) = v2;
  v5 = *(unsigned __int16 *)(a1 + 16);
  *(_WORD *)(v4 + 16) = v5;
  if (v3 < v4 + 24 + 24 * v5 && v4 + 24 < v3 + 24 * v5)
    goto LABEL_26;
  v7 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Node);
  swift_arrayInitWithCopy();
  if (!(_DWORD)v5)
    return v7;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  while (1)
  {
    v11 = *(_QWORD *)(v7 + v8 + 32);
    v12 = __OFADD__(v10, v11);
    v10 += v11;
    if (v12)
      break;
    v13 = *(_QWORD *)(v7 + v8 + 40);
    v12 = __OFADD__(v9, v13);
    v9 += v13;
    if (v12)
      goto LABEL_24;
    v8 += 24;
    if (24 * v5 == v8)
      return v7;
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *String.init(format:locale:_:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;

  v7 = *a3;
  v8 = a3[1];
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  v9 = specialized withVaList<A>(_:_:)(a4, a1, a2, v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return v9;
}

char *String.init(format:locale:arguments:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;

  v7 = *a3;
  v8 = a3[1];
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  v9 = specialized withVaList<A>(_:_:)(a4, a1, a2, v7, v8);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return v9;
}

uint64_t _bestMatchType(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[128];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if ((objc_msgSend(a2, "containsObject:", a1) & 1) != 0)
    return a1;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v7 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v13, v12, 16);
  if (!v7)
    return 0;
  v8 = v7;
  v9 = *(_QWORD *)v14;
LABEL_5:
  v10 = 0;
  while (1)
  {
    if (*(_QWORD *)v14 != v9)
      objc_enumerationMutation(a2);
    v6 = *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * v10);
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a3, a1, v6) & 1) != 0)
      return v6;
    if (v8 == ++v10)
    {
      v8 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v13, v12, 16);
      v6 = 0;
      if (v8)
        goto LABEL_5;
      return v6;
    }
  }
}

unint64_t AttributedString.init(from:configuration:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  unint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  __int128 v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t *v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  unint64_t v79;
  unint64_t v80;
  char v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  BOOL v87;
  uint64_t v88;
  _BYTE *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  _QWORD *v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void (*v116)(uint64_t, _QWORD, uint64_t);
  uint64_t v117;
  uint64_t v118;
  Swift::String v119;
  Swift::String v120;
  Swift::String v121;
  uint64_t v122;
  Swift::String v123;
  Swift::String v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void (*v134)(uint64_t, _QWORD, uint64_t);
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void (*v144)(uint64_t, _QWORD, uint64_t);
  uint64_t v145;
  _BYTE v146[12];
  int v147;
  uint64_t v148;
  _OWORD *v149;
  uint64_t *v150;
  _OWORD *v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t v161;
  _OWORD *v162;
  uint64_t v163;
  uint64_t v164;
  _BYTE *v165;
  uint64_t v166;
  __int128 v167;
  _QWORD v168[2];
  _QWORD v169[3];
  uint64_t v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174[2];
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD v179[3];
  uint64_t v180;
  __int128 v181[3];
  _QWORD v182[2];
  uint64_t v183;
  uint64_t v184;
  _OWORD v185[6];
  _QWORD v186[14];
  __int128 v187;
  __int128 v188;
  __int128 v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  _OWORD v201[4];
  uint64_t v202;

  v154 = a3;
  v163 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributedString.AttributeKey>);
  v156 = *(_QWORD *)(v163 - 8);
  MEMORY[0x1E0C80A78](v163);
  v162 = &v146[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7);
  v165 = &v146[-v8];
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributedString.CodingKeys>);
  MEMORY[0x1E0C80A78](v9);
  v202 = *a2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  v159 = a1;
  if (!v3)
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(v174, (uint64_t)&v167);
    __swift_project_boxed_opaque_existential_1(&v167, v168[1]);
    dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    swift_bridgeObjectRelease();
    BigString.init(_:)();
    AttributedString.init(_:attributes:)(v181, MEMORY[0x1E0DEE9E0], MEMORY[0x1E0DEE9E8], (uint64_t *)v174);
    v109 = *(_QWORD *)&v174[0];
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v167);
    goto LABEL_77;
  }

  v175 = 0;
  memset(v174, 0, sizeof(v174));
  outlined destroy of Any?((uint64_t)v174, &demangling cache variable for type metadata for SingleValueDecodingContainer?);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  v10 = 0;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v174, (uint64_t)&v167);
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v167, (uint64_t)v179);
  v155 = 0;
  BigString.init(stringLiteral:)();
  *(_QWORD *)&v167 = 0;
  MEMORY[0x186DA9E90](&v167, 8);
  v11 = v167;
  v178 = 0;
  v176 = 0;
  v177 = 0;
  __swift_project_boxed_opaque_existential_1(v179, v180);
  if ((dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter() & 1) != 0)
  {
    v12 = v159;
LABEL_6:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v13 = v176;
    if (!v176 || !*(_WORD *)(v176 + 16))
    {
      v111 = v12[3];
      v112 = v12[4];
      __swift_project_boxed_opaque_existential_1(v12, v111);
      v113 = type metadata accessor for DecodingError();
      swift_allocError();
      v115 = v114;
      MEMORY[0x186DA5FB4](v111, v112);
LABEL_79:
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      v116 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v113 - 8) + 104);
      v117 = v113;
      v12 = v159;
      v116(v115, *MEMORY[0x1E0DEC458], v117);
      swift_willThrow();
LABEL_86:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v179);
      v110 = v12;
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v110);
    }
    v166 = v10;
    v14 = v177;
    v15 = v178;
    v201[0] = v171;
    v201[1] = v172;
    v201[2] = v173;
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v201);
    swift_unknownObjectRetain();
    v16 = AttributedString.Guts.init(string:runs:)(v201, v13, v14, v15, v11);
    v17 = *(_OWORD *)(v16 + 32);
    v198 = *(_OWORD *)(v16 + 16);
    v199 = v17;
    v200 = *(_OWORD *)(v16 + 48);
    v18 = BigString.startIndex.getter();
    v20 = v19;
    v22 = v21;
    v24 = v23;
    result = BigString.endIndex.getter();
    if (result >> 10 < v18 >> 10)
      goto LABEL_96;
    v161 = v13;
    v190 = v18;
    v191 = v20;
    v192 = v22;
    v193 = v24;
    v194 = result;
    v195 = v26;
    v196 = v27;
    v197 = v28;
    swift_retain();
    AttributedString.Guts.fixScalarConstrainedAttributes(in:)();
    v29 = *(_OWORD *)(v16 + 32);
    v187 = *(_OWORD *)(v16 + 16);
    v188 = v29;
    v162 = (_OWORD *)(v16 + 16);
    v163 = v16;
    v189 = *(_OWORD *)(v16 + 48);
    v30 = *(_QWORD *)(v16 + 24);
    v164 = *(_QWORD *)(v16 + 16);
    v31 = *(_QWORD *)(v16 + 32);
    v160 = *(_QWORD *)(v16 + 40);
    v33 = *(_QWORD *)(v16 + 48);
    v32 = *(_QWORD *)(v16 + 56);
    v34 = BigString.startIndex.getter();
    v202 = v35;
    v165 = v36;
    v38 = v37;
    if (v34 >> 10 < (unint64_t)BigString.endIndex.getter() >> 10)
    {
      v39 = v164;
      v40 = v160;
      do
      {
        v186[8] = v39;
        v186[9] = v30;
        v186[10] = v31;
        v186[11] = v40;
        v186[12] = v33;
        v186[13] = v32;
        BigString.utf8.getter();
        v186[0] = v34;
        v186[1] = v202;
        v186[2] = v165;
        v186[3] = v38;
        v186[4] = v34;
        v186[5] = v202;
        v186[6] = v165;
        v186[7] = v38;
        specialized BidirectionalCollection<>._getBlock(for:in:)(2, v186, (unint64_t *)&v167);
        result = outlined release of Locale((uint64_t)v185);
        v164 = v170;
        if (v170 == 2)
          goto LABEL_103;
        v41 = v34;
        v34 = v169[0];
        v42 = v169[1];
        v43 = (_BYTE *)v169[2];
        v44 = v41 >> 11;
        v167 = 0uLL;
        v45 = (_QWORD *)v163;
        result = AttributedString.Guts._constrainedAttributes(at:with:)(v41 >> 11, (uint64_t *)&v167);
        if (v34 >> 11 < v44)
        {
          __break(1u);
          goto LABEL_89;
        }
        v46 = result;
        v165 = v43;
        v202 = v42;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized AttributedString._InternalRunsSlice.updateEach(with:)(v45, v44, v34 >> 11, v46);
        swift_release();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        v47 = v162[1];
        v185[3] = *v162;
        v185[4] = v47;
        v185[5] = v162[2];
        v48 = v45[2];
        v30 = v45[3];
        v31 = v45[4];
        v40 = v45[5];
        v33 = v45[6];
        v32 = v45[7];
        v49 = BigString.endIndex.getter();
        v39 = v48;
        v38 = v164;
      }
      while (v34 >> 10 < v49 >> 10);
    }
    swift_unknownObjectRelease();
    v109 = v163;
    swift_release();
    outlined release of Locale((uint64_t)v201);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v179);
LABEL_77:
    *v154 = v109;
    v110 = v159;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v110);
  }
  v147 = 0;
  v148 = v155 + 32;
  v151 = v168;
  v152 = &v183;
  v150 = &v184;
  v149 = v169;
  v12 = v159;
  while (1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v179, v180);
    v153 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    v157 = v50;
    if (v10)
    {
      swift_bridgeObjectRelease();
LABEL_85:
      swift_bridgeObjectRelease();
      goto LABEL_86;
    }
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v179, v180);
    v51 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    v158 = v11;
    v166 = 0;
    if (!v155)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v136 = v12[3];
      v137 = v12[4];
      __swift_project_boxed_opaque_existential_1(v12, v136);
      v113 = type metadata accessor for DecodingError();
      swift_allocError();
      v115 = v138;
      MEMORY[0x186DA5FB4](v136, v137);
      goto LABEL_79;
    }
    v52 = v51;
    v53 = v157;
    if ((v51 & 0x8000000000000000) != 0 || v51 >= *(_QWORD *)(v155 + 16))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v118 = v12[3];
      v202 = v12[4];
      __swift_project_boxed_opaque_existential_1(v12, v118);
      *(_QWORD *)&v167 = 0;
      *((_QWORD *)&v167 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(81);
      v119._object = (void *)0x800000018230F460;
      v119._countAndFlagsBits = 0xD000000000000016;
      String.append(_:)(v119);
      *(_QWORD *)&v174[0] = v52;
      v120._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v120);
      swift_bridgeObjectRelease();
      v121._countAndFlagsBits = 0xD000000000000036;
      v121._object = (void *)0x800000018230F480;
      String.append(_:)(v121);
      v122 = *(_QWORD *)(v155 + 16);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v174[0] = v122 - 1;
      v123._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v123);
      swift_bridgeObjectRelease();
      v124._countAndFlagsBits = 93;
      v124._object = (void *)0xE100000000000000;
      String.append(_:)(v124);
      v125 = type metadata accessor for DecodingError();
      swift_allocError();
      v127 = v126;
      v12 = v159;
      MEMORY[0x186DA5FB4](v118, v202);
      swift_bridgeObjectRetain();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v125 - 8) + 104))(v127, *MEMORY[0x1E0DEC458], v125);
      swift_bridgeObjectRelease();
      swift_willThrow();
      goto LABEL_86;
    }
    v54 = (uint64_t *)(v148 + 16 * v51);
    v56 = *v54;
    v55 = (_BYTE *)v54[1];
    swift_bridgeObjectRetain();
    v165 = v55;
    swift_bridgeObjectRetain();
    if ((v53 & 0x2000000000000000) != 0)
      v57 = HIBYTE(v53) & 0xF;
    else
      v57 = v153 & 0xFFFFFFFFFFFFLL;
    if (!v57)
    {
      v58 = v176;
      v59 = v177;
      v60 = v178;
      if (v176)
      {
        v61 = *(unsigned __int8 *)(v176 + 18);
        v62 = ((-15 << ((4 * v61 + 8) & 0x3C)) - 1) & v61 | ((unint64_t)*(unsigned __int16 *)(v176 + 16) << ((4 * v61 + 8) & 0x3C));
        swift_unknownObjectRetain();
      }
      else
      {
        v61 = 0;
        v62 = 0;
      }
      v63 = specialized BidirectionalCollection._distance(from:to:)(v11, v61, 0, v11, v62, 0, v58, v59, v60, v11);
      swift_unknownObjectRelease();
      if (v63 > 0
        || (__swift_project_boxed_opaque_existential_1(v179, v180),
            (dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter() & 1) == 0))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v128 = v159;
        v129 = v159[3];
        v130 = v159[4];
        __swift_project_boxed_opaque_existential_1(v159, v129);
        v131 = type metadata accessor for DecodingError();
        swift_allocError();
        v133 = v132;
        MEMORY[0x186DA5FB4](v129, v130);
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        v134 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v131 - 8) + 104);
        v135 = v131;
        v12 = v128;
        v134(v133, *MEMORY[0x1E0DEC458], v135);
        swift_willThrow();
        swift_bridgeObjectRelease();
        goto LABEL_85;
      }
      v64 = v159;
      if (*(_QWORD *)(v56 + 16))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v139 = v64[3];
        v140 = v64[4];
        __swift_project_boxed_opaque_existential_1(v64, v139);
        v141 = type metadata accessor for DecodingError();
        swift_allocError();
        v143 = v142;
        MEMORY[0x186DA5FB4](v139, v140);
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        v144 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v141 - 8) + 104);
        v145 = v141;
        v12 = v159;
        v144(v143, *MEMORY[0x1E0DEC458], v145);
        swift_willThrow();
        swift_bridgeObjectRelease();
        goto LABEL_85;
      }
    }
    swift_bridgeObjectRetain();
    BigString.append(contentsOf:)();
    v65 = v176;
    if (!v176 || !*(_WORD *)(v176 + 16))
      goto LABEL_57;
    v66 = ((-15 << ((4 * *(_BYTE *)(v176 + 18) + 8) & 0x3C)) - 1) & *(unsigned __int8 *)(v176 + 18) | ((unint64_t)*(unsigned __int16 *)(v176 + 16) << ((4 * *(_BYTE *)(v176 + 18) + 8) & 0x3C));
    result = swift_unknownObjectRetain();
    *(_QWORD *)&v167 = v11;
    *((_QWORD *)&v167 + 1) = v66;
    v168[0] = 0;
    v67 = *(unsigned __int8 *)(v65 + 18);
    if (v66 <= v67)
      break;
    v68 = (4 * v67 + 8) & 0x3C;
    v69 = (v66 >> v68) & 0xF;
    *(_QWORD *)&v174[0] = v69;
    if ((_DWORD)v67)
    {
      swift_unknownObjectRetain();
      v70 = specialized closure #1 in Rope._Node.formPredecessor(of:)(v65 + 16, v65 + 24, (uint64_t *)v174, (uint64_t)&v167, v67);
      result = swift_unknownObjectRelease();
      if ((v70 & 1) == 0)
        goto LABEL_90;
      if ((_QWORD)v167 != v11)
        goto LABEL_91;
      v72 = *((_QWORD *)&v167 + 1);
      v71 = v168[0];
      if (!v168[0])
      {
        swift_unknownObjectRetain();
        specialized Rope._Node.subscript.getter(v72, v65);
        v74 = v73;
        v76 = v75;
        swift_unknownObjectRelease_n();
        goto LABEL_41;
      }
    }
    else
    {
      if (!v69)
        goto LABEL_90;
      v72 = ((v69 - 1) << v68) | ((-15 << v68) - 1) & v66;
      v71 = v65;
    }
    v77 = v71 + 24 * ((v72 >> ((4 * *(_BYTE *)(v71 + 18) + 8) & 0x3C)) & 0xF);
    v74 = *(_QWORD *)(v77 + 32);
    v76 = *(_QWORD *)(v77 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRelease();
LABEL_41:
    if ((specialized static Dictionary<>.== infix(_:_:)(v74, v56) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_57:
      if ((v157 & 0x1000000000000000) != 0)
        v57 = String.UTF8View._foreignCount()();
      swift_bridgeObjectRelease();
      v10 = v166;
      if (v65)
      {
        swift_bridgeObjectRetain();
        v89 = v165;
        swift_bridgeObjectRetain();
        result = specialized Rope._Node.append(_:)(v57, v56, (uint64_t)v89);
        if (result)
        {
          v164 = v56;
          v92 = v176;
          v93 = *(unsigned __int8 *)(v176 + 18) + 1;
          if (((v93 >> 8) & 1) != 0)
            goto LABEL_97;
          v94 = result;
          v95 = v90;
          v96 = v91;
          v97 = v177;
          v98 = v178;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Node>);
          result = swift_allocObject();
          *(_BYTE *)(result + 18) = v93;
          v99 = v97 + v95;
          if (__OFADD__(v97, v95))
            goto LABEL_98;
          v100 = v98 + v96;
          v11 = v158;
          if (__OFADD__(v98, v96))
            goto LABEL_99;
          v101 = result;
          *(_QWORD *)(result + 24) = v92;
          *(_QWORD *)(result + 32) = v97;
          *(_QWORD *)(result + 40) = v98;
          *(_QWORD *)(result + 48) = v94;
          *(_QWORD *)(result + 56) = v95;
          *(_QWORD *)(result + 64) = v96;
          *(_WORD *)(result + 16) = 2;
          v10 = v166;
          v56 = v164;
          goto LABEL_72;
        }
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Item>);
        v101 = swift_allocObject();
        *(_WORD *)(v101 + 16) = 0;
        *(_BYTE *)(v101 + 18) = 0;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        result = swift_isUniquelyReferenced_nonNull();
        if ((result & 1) != 0)
        {
          v102 = 0;
          v103 = 0;
        }
        else
        {
          v104 = specialized Rope._Node.copy()(v101);
          v103 = v105;
          v102 = v106;
          result = swift_unknownObjectRelease();
          v101 = v104;
        }
        v99 = v103 + 1;
        if (__OFADD__(v103, 1))
          goto LABEL_100;
        v100 = v102 + v57;
        if (__OFADD__(v102, v57))
          goto LABEL_101;
        v107 = *(unsigned __int16 *)(v101 + 16);
        v108 = (_QWORD *)(v101 + 24 * *(unsigned __int16 *)(v101 + 16));
        v108[3] = v57;
        v108[4] = v56;
        v108[5] = v165;
        if (v107 == 0xFFFF)
          goto LABEL_102;
        *(_WORD *)(v101 + 16) = v107 + 1;
LABEL_72:
        v176 = v101;
        v177 = v99;
        v178 = v100;
      }
      if ((v147 & 1) != 0)
        v147 = 1;
      else
        v147 = specialized AttributedString._AttributeStorage.hasConstrainedAttributes.getter(v56);
      v12 = v159;
      ++v11;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_54;
    }
    v78 = specialized static Set.== infix(_:_:)(v76, (uint64_t)v165);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v78 & 1) == 0)
      goto LABEL_57;
    v79 = ((-15 << ((4 * *(_BYTE *)(v65 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v65 + 18) | ((unint64_t)*(unsigned __int16 *)(v65 + 16) << ((4 * *(_BYTE *)(v65 + 18) + 8) & 0x3C));
    result = swift_unknownObjectRetain();
    *(_QWORD *)&v167 = v11;
    *((_QWORD *)&v167 + 1) = v79;
    v168[0] = 0;
    v80 = *(unsigned __int8 *)(v65 + 18);
    if (v79 <= v80)
      goto LABEL_92;
    v81 = (4 * v80 + 8) & 0x3C;
    v82 = (v79 >> v81) & 0xF;
    *(_QWORD *)&v174[0] = v82;
    if ((_DWORD)v80)
    {
      swift_unknownObjectRetain();
      v83 = specialized closure #1 in Rope._Node.formPredecessor(of:)(v65 + 16, v65 + 24, (uint64_t *)v174, (uint64_t)&v167, v80);
      result = swift_unknownObjectRelease_n();
      if ((v83 & 1) == 0)
        goto LABEL_93;
      v85 = *((_QWORD *)&v167 + 1);
      v84 = v167;
    }
    else
    {
      result = swift_unknownObjectRelease();
      if (!v82)
        goto LABEL_93;
      v85 = ((v82 - 1) << v81) | ((-15 << v81) - 1) & v79;
      v84 = v11;
    }
    v12 = v159;
    v10 = v166;
    if ((v157 & 0x1000000000000000) != 0)
      v57 = String.UTF8View._foreignCount()();
    result = swift_bridgeObjectRelease();
    if (v84 != v11)
      goto LABEL_94;
    result = specialized Rope._Node._prepareModify(at:)(v85, (uint64_t)v182);
    *v151 = *(_OWORD *)v152;
    v86 = v182[1];
    *(_QWORD *)&v167 = v182[0];
    *v149 = *(_OWORD *)v150;
    v87 = __OFADD__(v86, v57);
    v88 = v86 + v57;
    if (v87)
      goto LABEL_95;
    *((_QWORD *)&v167 + 1) = v88;
    specialized Rope._Node._finalizeModify(_:)(v174, &v167);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    ++v11;
LABEL_54:
    __swift_project_boxed_opaque_existential_1(v179, v180);
    if ((dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter() & 1) != 0)
      goto LABEL_6;
  }
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
LABEL_99:
  __break(1u);
LABEL_100:
  __break(1u);
LABEL_101:
  __break(1u);
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
  return result;
}

BOOL protocol witness for UnkeyedDecodingContainer.isAtEnd.getter in conformance JSONDecoderImpl.UnkeyedContainer()
{
  uint64_t v0;
  _BOOL8 result;

  if ((*(_BYTE *)(v0 + 56) & 1) == 0)
    return *(_QWORD *)(v0 + 64) >= *(_QWORD *)(v0 + 48);
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString.AttributeKey and conformance AttributedString.AttributeKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.AttributeKey and conformance AttributedString.AttributeKey;
  if (!lazy protocol witness table cache variable for type AttributedString.AttributeKey and conformance AttributedString.AttributeKey)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.AttributeKey, &unk_1E0F1C878);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.AttributeKey and conformance AttributedString.AttributeKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.AttributeKey and conformance AttributedString.AttributeKey;
  if (!lazy protocol witness table cache variable for type AttributedString.AttributeKey and conformance AttributedString.AttributeKey)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.AttributeKey, &unk_1E0F1C878);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.AttributeKey and conformance AttributedString.AttributeKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.AttributeKey and conformance AttributedString.AttributeKey;
  if (!lazy protocol witness table cache variable for type AttributedString.AttributeKey and conformance AttributedString.AttributeKey)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.AttributeKey, &unk_1E0F1C878);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.AttributeKey and conformance AttributedString.AttributeKey);
  }
  return result;
}

uint64_t specialized Rope._Node.append(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _WORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v4 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  result = swift_isUniquelyReferenced_nonNull();
  v9 = *v3;
  if ((result & 1) == 0)
  {
    v9 = specialized Rope._Node.copy()(*v3);
    v11 = v10;
    v12 = a3;
    v14 = v13;
    result = swift_unknownObjectRelease();
    *v4 = v9;
    v4[1] = v11;
    v4[2] = v14;
    a3 = v12;
  }
  if (*(_BYTE *)(v9 + 18))
  {
    v15 = v4[1];
    v16 = v9 + 24 * *(unsigned __int16 *)(v9 + 16);
    v18 = *(_QWORD *)(v16 + 8);
    v17 = (_QWORD *)(v16 + 8);
    v19 = v15 - v18;
    if (__OFSUB__(v15, v18))
    {
      __break(1u);
    }
    else
    {
      v20 = (_QWORD *)(v16 + 16);
      v21 = v4[2];
      v22 = *(_QWORD *)(v16 + 16);
      v23 = v21 - v22;
      if (!__OFSUB__(v21, v22))
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        result = specialized Rope._Node.append(_:)(a1, a2, a3);
        v26 = __OFADD__(v19, *v17);
        v27 = v19 + *v17;
        if (!v26)
        {
          v28 = v23 + *v20;
          if (!__OFADD__(v23, *v20))
          {
            v29 = result;
            v30 = v24;
            v31 = v25;
            swift_unknownObjectRelease();
            v4[1] = v27;
            v4[2] = v28;
            if (!v29)
            {
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease_n();
              return 0;
            }
            v32 = (_WORD *)(*v4 + 16);
            v33 = *v4 + 24;
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            specialized closure #2 in Rope._Node.append(_:)(v32, v33);
            swift_unknownObjectRelease();
            if (*(_WORD *)(*v4 + 16) == 15)
            {
              v36 = specialized Rope._Node.split(keeping:)(8);
              v34 = swift_unknownObjectRetain();
              specialized Rope._Node._appendNode(_:)(v34, v30, v31);
              swift_unknownObjectRelease_n();
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease_n();
              return v36;
            }
            v35 = swift_unknownObjectRetain();
            specialized Rope._Node._appendNode(_:)(v35, v30, v31);
            swift_unknownObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            return 0;
          }
LABEL_22:
          __break(1u);
          return result;
        }
LABEL_21:
        __break(1u);
        goto LABEL_22;
      }
    }
    __break(1u);
    goto LABEL_21;
  }
  if (*(_WORD *)(v9 + 16) == 15)
  {
    v36 = specialized Rope._Node.split(keeping:)(8);
    specialized Rope._Node._appendItem(_:)(a1, a2, a3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v36;
  }
  specialized Rope._Node._appendItem(_:)(a1, a2, a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

unint64_t specialized BidirectionalCollection<>._getBlock(for:in:)@<X0>(char a1@<W0>, _QWORD *a2@<X1>, unint64_t *a3@<X8>)
{
  __int128 *v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t result;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  __int128 v50;
  int v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  __int128 v93[3];
  _BYTE v94[48];

  v6 = BigString.UTF8View.startIndex.getter();
  v8 = v7;
  v10 = v9;
  v82 = v11;
  result = BigString.UTF8View.endIndex.getter();
  v16 = result >> 10;
  v17 = v6 >> 10;
  if (result >> 10 < v6 >> 10)
  {
    __break(1u);
    goto LABEL_58;
  }
  v80 = v8;
  v81 = v10;
  v8 = *a2 >> 10;
  if (v8 == v17 && v16 == a2[4] >> 10 && (a1 & 4) == 0)
  {
    *a3 = v6;
    a3[1] = v80;
    a3[2] = v10;
    a3[3] = v82;
    a3[4] = result;
    a3[5] = v13;
    a3[6] = v14;
    a3[7] = v15;
    a3[8] = 0;
    a3[9] = 0;
    a3[10] = 0;
    a3[11] = 2;
    return result;
  }
  if (v8 < v17 || (v76 = a2[4], v74 = v76 >> 10, v16 < v76 >> 10))
  {
    *a3 = v6;
    a3[1] = v80;
    a3[2] = v10;
    a3[3] = v82;
    a3[4] = result;
    a3[5] = v13;
    a3[6] = v14;
    a3[7] = v15;
    a3[8] = result;
    a3[9] = v13;
    a3[10] = v14;
    a3[11] = v15;
    return result;
  }
  v68 = a2[5];
  v70 = a2[6];
  v72 = a2[7];
  v79 = result >> 10;
  if ((a1 & 8) == 0)
  {
    if (one-time initialization token for paragraphSeparators == -1)
    {
LABEL_13:
      v19 = &static String.paragraphSeparators;
      goto LABEL_17;
    }
LABEL_58:
    swift_once();
    goto LABEL_13;
  }
  if (one-time initialization token for lineSeparators != -1)
    swift_once();
  v19 = &static String.lineSeparators;
LABEL_17:
  v78 = *v19;
  swift_bridgeObjectRetain();
  if ((a1 & 1) == 0)
  {
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 2;
LABEL_21:
    v24 = v79;
    goto LABEL_22;
  }
  if (v8 == v17)
  {
LABEL_20:
    v20 = v6;
    v21 = v80;
    v22 = v81;
    v23 = v82;
    goto LABEL_21;
  }
  v63 = BigString.UTF8View.index(before:)();
  v65 = v47;
  v21 = v48;
  v67 = v49;
  v24 = v79;
  if (v8 >= v79)
    goto LABEL_45;
  v50 = v3[1];
  v93[0] = *v3;
  v93[1] = v50;
  v93[2] = v3[2];
  outlined init with take of any PredicateExpression<Self.Output == B1>(v93, (uint64_t)v94);
  outlined retain of Locale((uint64_t)v94);
  v51 = BigString.UTF8View.subscript.getter();
  outlined release of Locale((uint64_t)v3);
  if (v51 != 10)
  {
    v24 = v79;
LABEL_45:
    v20 = v63;
    v23 = v65;
    v22 = v67;
    goto LABEL_46;
  }
  outlined retain of Locale((uint64_t)v94);
  v20 = v63;
  v23 = v65;
  v22 = v67;
  v52 = BigString.UTF8View.subscript.getter();
  outlined release of Locale((uint64_t)v3);
  if (v52 != 13)
  {
LABEL_38:
    v24 = v79;
    goto LABEL_46;
  }
  if (v17 < v63 >> 10)
  {
    v20 = BigString.UTF8View.index(before:)();
    v21 = v53;
    v22 = v54;
    v23 = v55;
    goto LABEL_38;
  }
  v24 = v79;
  if (v82 != 2)
  {
    v20 = v6;
    v21 = v80;
    v22 = v81;
    v23 = v82;
    goto LABEL_22;
  }
LABEL_46:
  v56 = v20 >> 10;
  if (v20 >> 10 >= v17 && v56 < v24)
  {
    while (1)
    {
      specialized BidirectionalCollection<>._matchesSeparators(_:from:reverse:)(v78, v20, v21, v22, v23, 1, &v85);
      if (v88 != 2)
        break;
      if (v17 >= v56)
        goto LABEL_20;
      v20 = BigString.UTF8View.index(before:)();
      v21 = v57;
      v22 = v58;
      v23 = v59;
      v56 = v20 >> 10;
      if (v20 >> 10 < v17)
        goto LABEL_21;
      v24 = v79;
      if (v56 >= v79)
        goto LABEL_22;
    }
    v20 = BigString.UTF8View.index(after:)();
    v21 = v60;
    v22 = v61;
    v23 = v62;
    goto LABEL_21;
  }
LABEL_22:
  v83 = v21;
  v64 = v23;
  v66 = v22;
  if ((a1 & 6) != 0)
  {
    v25 = v74;
    if (v8 == v74)
    {
      v26 = v76;
      v28 = v70;
      v27 = v72;
      v29 = v68;
      if (v74 >= v24)
      {
LABEL_25:
        v73 = v27;
        v75 = v25;
        v30 = v20;
        v69 = v29;
        v71 = v28;
        v77 = v26;
LABEL_26:
        result = swift_bridgeObjectRelease();
        v31 = 0;
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v35 = 0;
        v36 = 0;
        v37 = 2;
        v38 = 2;
LABEL_41:
        if (v75 == v79)
        {
          v31 = v77;
          v32 = v69;
          v33 = v71;
          v37 = v73;
          v34 = v77;
          v35 = v69;
          v36 = v71;
          v38 = v73;
        }
        goto LABEL_43;
      }
    }
    else
    {
      v26 = BigString.UTF8View.index(before:)();
      v29 = v39;
      v28 = v40;
      v27 = v41;
      v25 = v26 >> 10;
      if (v26 >> 10 >= v79)
        goto LABEL_25;
    }
    specialized BidirectionalCollection<>._matchesSeparators(_:from:reverse:)(v78, v26, v29, v28, v27, 1, &v85);
    v42 = v78;
    v37 = v88;
    if (v88 == 2)
    {
      while (1)
      {
        specialized BidirectionalCollection<>._matchesSeparators(_:from:reverse:)(v42, v26, v29, v28, v27, 0, &v85);
        v37 = v88;
        if (v88 != 2)
        {
          v73 = v27;
          v75 = v25;
          v30 = v20;
          v69 = v29;
          v71 = v28;
          v77 = v26;
          v36 = v91;
          v38 = v92;
          v34 = v89;
          v35 = v90;
          v32 = v86;
          v33 = v87;
          v31 = v85;
          result = swift_bridgeObjectRelease();
          goto LABEL_41;
        }
        v43 = BigString.UTF8View.index(after:)();
        v26 = v43;
        v29 = v44;
        v28 = v45;
        v27 = v46;
        v25 = v43 >> 10;
        if (v43 >> 10 >= v79)
          break;
        v42 = v78;
      }
      v73 = v46;
      v75 = v43 >> 10;
      v30 = v20;
      v69 = v44;
      v71 = v45;
      v77 = v43;
      goto LABEL_26;
    }
    v30 = v20;
    v36 = v91;
    v38 = v92;
    v34 = v89;
    v35 = v90;
    v32 = v86;
    v33 = v87;
    v31 = v85;
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v30 = v20;
    result = swift_bridgeObjectRelease();
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v37 = 2;
    v38 = 2;
  }
LABEL_43:
  *a3 = v30;
  a3[1] = v83;
  a3[2] = v66;
  a3[3] = v64;
  a3[4] = v34;
  a3[5] = v35;
  a3[6] = v36;
  a3[7] = v38;
  a3[8] = v31;
  a3[9] = v32;
  a3[10] = v33;
  a3[11] = v37;
  return result;
}

unint64_t specialized BidirectionalCollection<>._matchesSeparators(_:from:reverse:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, char a6@<W5>, unint64_t *a7@<X8>)
{
  __int128 *v7;
  unint64_t v8;
  unint64_t result;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned __int8 v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v61;
  __int128 v62[3];
  _BYTE v63[48];

  result = BigString.UTF8View.subscript.getter();
  if (result == 10)
  {
    v8 = a2 >> 10;
    if (a2 >> 10 > (unint64_t)BigString.UTF8View.startIndex.getter() >> 10)
    {
      v21 = BigString.UTF8View.index(before:)();
      v23 = v22;
      v25 = v24;
      v61 = v26;
      v27 = BigString.UTF8View.subscript.getter();
      v28 = a3;
      v29 = v27;
      v56 = v28;
      v58 = a2;
      result = BigString.UTF8View.index(after:)();
      v30 = result >> 10;
      if (v29 != 13)
      {
LABEL_46:
        if (v30 >= v8)
        {
          *a7 = v58;
          a7[1] = v56;
          goto LABEL_19;
        }
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
        return result;
      }
      if (v30 >= v21 >> 10)
      {
        *a7 = v21;
        a7[1] = v61;
        a7[2] = v23;
        a7[3] = v25;
LABEL_20:
        a7[4] = result;
        a7[5] = v18;
        a7[6] = v19;
        a7[7] = (unint64_t)v20;
        return result;
      }
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }
LABEL_16:
    result = BigString.UTF8View.index(after:)();
    if (v8 <= result >> 10)
      goto LABEL_17;
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  if (result == 13)
  {
    v57 = a2;
    v16 = BigString.UTF8View.index(after:)();
    if (v16 >> 10 < (unint64_t)BigString.UTF8View.endIndex.getter() >> 10)
    {
      v17 = v7[1];
      v62[0] = *v7;
      v62[1] = v17;
      v62[2] = v7[2];
      outlined init with take of any PredicateExpression<Self.Output == B1>(v62, (uint64_t)v63);
      outlined retain of Locale((uint64_t)v63);
      v8 = BigString.UTF8View.subscript.getter();
      outlined release of Locale((uint64_t)v7);
      if ((_DWORD)v8 == 10)
      {
        result = BigString.UTF8View.index(after:)();
        if (result >> 10 >= v57 >> 10)
        {
          *a7 = v57;
LABEL_18:
          a7[1] = a3;
LABEL_19:
          a7[2] = a4;
          a7[3] = a5;
          goto LABEL_20;
        }
        goto LABEL_59;
      }
    }
    a2 = v57;
    result = BigString.UTF8View.index(after:)();
    if (result >> 10 >= v57 >> 10)
    {
LABEL_17:
      *a7 = a2;
      goto LABEL_18;
    }
    __break(1u);
    goto LABEL_16;
  }
  if ((a6 & 1) != 0)
  {
    if ((result + 86) < 0xDBu)
      goto LABEL_51;
  }
  else if ((result + 29) < 0xDFu)
  {
LABEL_51:
    *a7 = 0;
    a7[1] = 0;
    a7[2] = 0;
    a7[3] = 2;
    *((_OWORD *)a7 + 2) = 0u;
    *((_OWORD *)a7 + 3) = 0u;
    return result;
  }
  v51 = *(_QWORD *)(a1 + 16);
  if (!v51)
    goto LABEL_51;
  v58 = a2;
  v55 = a4;
  v50 = a7;
  v52 = a1 + 32;
  swift_bridgeObjectRetain();
  v31 = 0;
  v53 = (unint64_t *)a5;
  v56 = a3;
  while (1)
  {
    a4 = *(_QWORD *)(v52 + 8 * v31);
    if ((a6 & 1) != 0)
    {
      v32 = *(_QWORD *)(a4 + 16);
      v33 = v32 - 1;
      BigString.UTF8View.startIndex.getter();
      result = swift_bridgeObjectRetain();
      v59 = 0;
      v34 = -1;
    }
    else
    {
      BigString.UTF8View.endIndex.getter();
      swift_bridgeObjectRetain();
      result = BigString.UTF8View.index(before:)();
      v33 = 0;
      v32 = *(_QWORD *)(a4 + 16);
      v59 = v32 - 1;
      v34 = 1;
    }
    if (v33 >= v32)
    {
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }
    v54 = v31;
    v35 = *(unsigned __int8 *)(a4 + 32 + v33);
    result = BigString.UTF8View.subscript.getter();
    if (v35 == result)
      break;
LABEL_24:
    v31 = v54 + 1;
    swift_bridgeObjectRelease();
    if (v54 + 1 == v51)
    {
      result = swift_bridgeObjectRelease();
      a7 = v50;
      goto LABEL_51;
    }
  }
  v36 = v56;
  a5 = v58;
  v37 = v55;
  v8 = (unint64_t)v53;
  while (1)
  {
    v38 = v59 - v33;
    if (__OFSUB__(v59, v33))
    {
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    if ((a6 & 1) != 0)
      break;
    if (!v38)
      goto LABEL_43;
LABEL_37:
    v39 = v33 + v34;
    if (__OFADD__(v33, v34))
      goto LABEL_54;
    result = BigString.UTF8View.index(_:offsetBy:limitedBy:)();
    if (v42 == 2)
      goto LABEL_24;
    if ((v39 & 0x8000000000000000) != 0)
      goto LABEL_55;
    if (v39 >= *(_QWORD *)(a4 + 16))
      goto LABEL_56;
    a5 = result;
    v36 = v40;
    v37 = v41;
    v8 = v42;
    v43 = *(unsigned __int8 *)(a4 + 32 + v39);
    result = BigString.UTF8View.subscript.getter();
    v33 += v34;
    if (v43 != result)
      goto LABEL_24;
  }
  if (v38 > 0 || v34 >= v38)
    goto LABEL_37;
LABEL_43:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((a6 & 1) != 0)
  {
    v18 = v56;
    result = v58;
    v30 = v58 >> 10;
    v44 = a5;
    v45 = v36;
    v46 = v37;
    a7 = (unint64_t *)v8;
    v20 = v53;
    v19 = v55;
    if (v58 >> 10 < a5 >> 10)
    {
      __break(1u);
      goto LABEL_46;
    }
  }
  else
  {
    v45 = v56;
    v44 = v58;
    v46 = v55;
    a7 = v53;
    result = a5;
    if (a5 >> 10 < v58 >> 10)
      goto LABEL_62;
  }
  result = BigString.UTF8View.index(after:)();
  *v50 = v44;
  v50[1] = v45;
  v50[2] = v46;
  v50[3] = (unint64_t)a7;
  v50[4] = result;
  v50[5] = v47;
  v50[6] = v48;
  v50[7] = v49;
  return result;
}

{
  uint64_t v7;
  unint64_t v8;
  unint64_t result;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned __int8 v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v58;

  result = BigSubstring.UTF8View.subscript.getter();
  if (result == 10)
  {
    v8 = a2 >> 10;
    if (a2 >> 10 > *(_QWORD *)(v7 + 48) >> 10)
    {
      v19 = BigSubstring.UTF8View.index(before:)();
      v21 = v20;
      v23 = v22;
      v58 = v24;
      v25 = BigSubstring.UTF8View.subscript.getter();
      v26 = a3;
      v27 = v25;
      v54 = v26;
      v55 = a2;
      result = BigSubstring.UTF8View.index(after:)();
      v28 = result >> 10;
      if (v27 != 13)
      {
LABEL_46:
        if (v28 >= v8)
        {
          *a7 = v55;
          a7[1] = v54;
          goto LABEL_19;
        }
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
        return result;
      }
      if (v28 >= v19 >> 10)
      {
        *a7 = v19;
        a7[1] = v58;
        a7[2] = v21;
        a7[3] = v23;
LABEL_20:
        a7[4] = result;
        a7[5] = v16;
        a7[6] = v17;
        a7[7] = (unint64_t)v18;
        return result;
      }
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }
LABEL_16:
    result = BigSubstring.UTF8View.index(after:)();
    if (v8 <= result >> 10)
      goto LABEL_17;
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  if (result == 13)
  {
    if ((unint64_t)BigSubstring.UTF8View.index(after:)() >> 10 < *(_QWORD *)(v7 + 80) >> 10)
    {
      outlined retain of Locale(v7);
      v8 = BigSubstring.UTF8View.subscript.getter();
      outlined release of Locale(v7);
      if ((_DWORD)v8 == 10)
      {
        result = BigSubstring.UTF8View.index(after:)();
        if (result >> 10 >= a2 >> 10)
        {
          *a7 = a2;
LABEL_18:
          a7[1] = a3;
LABEL_19:
          a7[2] = a4;
          a7[3] = a5;
          goto LABEL_20;
        }
        goto LABEL_58;
      }
    }
    result = BigSubstring.UTF8View.index(after:)();
    if (result >> 10 >= a2 >> 10)
    {
LABEL_17:
      *a7 = a2;
      goto LABEL_18;
    }
    __break(1u);
    goto LABEL_16;
  }
  if ((a6 & 1) != 0)
  {
    if ((result + 86) < 0xDBu)
      goto LABEL_51;
  }
  else if ((result + 29) < 0xDFu)
  {
LABEL_51:
    *a7 = 0;
    a7[1] = 0;
    a7[2] = 0;
    a7[3] = 2;
    *((_OWORD *)a7 + 2) = 0u;
    *((_OWORD *)a7 + 3) = 0u;
    return result;
  }
  v49 = *(_QWORD *)(a1 + 16);
  if (!v49)
    goto LABEL_51;
  v55 = a2;
  v53 = a4;
  v48 = a7;
  v50 = a1 + 32;
  swift_bridgeObjectRetain();
  v29 = 0;
  v51 = (unint64_t *)a5;
  v54 = a3;
  while (1)
  {
    a4 = *(_QWORD *)(v50 + 8 * v29);
    if ((a6 & 1) != 0)
    {
      v30 = *(_QWORD *)(a4 + 16);
      v31 = v30 - 1;
      result = swift_bridgeObjectRetain();
      v56 = 0;
      v32 = -1;
    }
    else
    {
      swift_bridgeObjectRetain();
      result = BigSubstring.UTF8View.index(before:)();
      v31 = 0;
      v30 = *(_QWORD *)(a4 + 16);
      v56 = v30 - 1;
      v32 = 1;
    }
    if (v31 >= v30)
    {
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    v52 = v29;
    v33 = *(unsigned __int8 *)(a4 + 32 + v31);
    result = BigSubstring.UTF8View.subscript.getter();
    if (v33 == result)
      break;
LABEL_24:
    v29 = v52 + 1;
    swift_bridgeObjectRelease();
    if (v52 + 1 == v49)
    {
      result = swift_bridgeObjectRelease();
      a7 = v48;
      goto LABEL_51;
    }
  }
  v34 = v54;
  a5 = v55;
  v35 = v53;
  v8 = (unint64_t)v51;
  while (1)
  {
    v36 = v56 - v31;
    if (__OFSUB__(v56, v31))
    {
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    if ((a6 & 1) != 0)
      break;
    if (!v36)
      goto LABEL_43;
LABEL_37:
    v37 = v31 + v32;
    if (__OFADD__(v31, v32))
      goto LABEL_53;
    result = BigSubstring.UTF8View.index(_:offsetBy:limitedBy:)();
    if (v40 == 2)
      goto LABEL_24;
    if ((v37 & 0x8000000000000000) != 0)
      goto LABEL_54;
    if (v37 >= *(_QWORD *)(a4 + 16))
      goto LABEL_55;
    a5 = result;
    v34 = v38;
    v35 = v39;
    v8 = v40;
    v41 = *(unsigned __int8 *)(a4 + 32 + v37);
    result = BigSubstring.UTF8View.subscript.getter();
    v31 += v32;
    if (v41 != result)
      goto LABEL_24;
  }
  if (v36 > 0 || v32 >= v36)
    goto LABEL_37;
LABEL_43:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((a6 & 1) != 0)
  {
    v16 = v54;
    result = v55;
    v28 = v55 >> 10;
    v42 = a5;
    v43 = v34;
    v44 = v35;
    a7 = (unint64_t *)v8;
    v18 = v51;
    v17 = v53;
    if (v55 >> 10 < a5 >> 10)
    {
      __break(1u);
      goto LABEL_46;
    }
  }
  else
  {
    v43 = v54;
    v42 = v55;
    v44 = v53;
    a7 = v51;
    result = a5;
    if (a5 >> 10 < v55 >> 10)
      goto LABEL_61;
  }
  result = BigSubstring.UTF8View.index(after:)();
  *v48 = v42;
  v48[1] = v43;
  v48[2] = v44;
  v48[3] = (unint64_t)a7;
  v48[4] = result;
  v48[5] = v45;
  v48[6] = v46;
  v48[7] = v47;
  return result;
}

uint64_t AttributedString.Guts._constrainedAttributes(at:with:)(uint64_t result, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v3 = v2[8];
  if (v3)
    v4 = v2[10];
  else
    v4 = 0;
  if (result < 0 || (v5 = result, v4 < result))
  {
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  v7 = *a2;
  v6 = a2[1];
  v8 = v2[9];
  v9 = v2[11];
  if (!v3 || (v2[10] > result ? (v10 = *(unsigned __int16 *)(v3 + 16) == 0) : (v10 = 1), v10))
  {
    v11 = swift_unknownObjectRetain_n();
    v12 = specialized Rope._endPath.getter(v11);
    result = swift_unknownObjectRelease();
    v13 = 0;
    if (v3)
      goto LABEL_13;
    goto LABEL_14;
  }
  v32 = v2[9];
  v33 = a2[1];
  v17 = *(unsigned __int8 *)(v3 + 18);
  if (!*(_BYTE *)(v3 + 18))
  {
    result = swift_unknownObjectRetain_n();
    v26 = 0;
    v13 = v3;
    v27 = *(unsigned __int16 *)(v3 + 16);
    if (!*(_WORD *)(v3 + 16))
      goto LABEL_49;
LABEL_40:
    v28 = *(_QWORD *)(v13 + 24);
    v21 = __OFSUB__(v5, v28);
    v5 -= v28;
    if (v21)
      goto LABEL_63;
    if (__OFADD__(v5, 1))
    {
LABEL_64:
      __break(1u);
      return result;
    }
    if (v5 + 1 < 1)
      goto LABEL_51;
    if ((_DWORD)v27 == 1)
      goto LABEL_49;
    v29 = (uint64_t *)(v13 + 48);
    v30 = 1;
    while (1)
    {
      v31 = *v29;
      v29 += 3;
      v21 = __OFSUB__(v5, v31);
      v5 -= v31;
      if (v21)
        break;
      if (__OFADD__(v5, 1))
        goto LABEL_62;
      if (v5 + 1 < 1)
      {
        v27 = v30;
        goto LABEL_53;
      }
      if (v27 == ++v30)
        goto LABEL_49;
    }
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  result = swift_unknownObjectRetain_n();
  v13 = v3;
  do
  {
    v19 = *(unsigned __int16 *)(v13 + 16);
    if (*(_WORD *)(v13 + 16))
    {
      v20 = *(_QWORD *)(v13 + 40);
      v21 = __OFSUB__(v5, v20);
      v22 = v5 - v20;
      if (v21)
        goto LABEL_57;
      if (__OFADD__(v22, 1))
        goto LABEL_58;
      if (v22 + 1 < 1)
      {
        v19 = 0;
        goto LABEL_23;
      }
      if ((_DWORD)v19 != 1)
      {
        v23 = (uint64_t *)(v13 + 64);
        v24 = 1;
        while (1)
        {
          v25 = *v23;
          v23 += 3;
          v5 = v22 - v25;
          if (__OFSUB__(v22, v25))
            break;
          if (__OFADD__(v5, 1))
            goto LABEL_55;
          if (v5 + 1 < 1)
          {
            v19 = v24;
            v5 = v22;
            goto LABEL_23;
          }
          ++v24;
          v22 = v5;
          if (v19 == v24)
            goto LABEL_22;
        }
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
        goto LABEL_59;
      }
      v5 = v22;
    }
LABEL_22:
    if (v5)
      goto LABEL_56;
LABEL_23:
    v18 = (4 * *(_BYTE *)(v13 + 18) + 8) & 0x3C;
    v17 = ((-15 << v18) - 1) & v17 | (v19 << v18);
    v13 = *(_QWORD *)(v13 + 24 + 24 * v19);
    swift_unknownObjectRetain();
    result = swift_unknownObjectRelease();
  }
  while (*(_BYTE *)(v13 + 18));
  v26 = v17 & 0xFFFFFFFFFFFFF0FFLL;
  v27 = *(unsigned __int16 *)(v13 + 16);
  if (*(_WORD *)(v13 + 16))
    goto LABEL_40;
LABEL_49:
  if (v5)
  {
    __break(1u);
LABEL_51:
    v27 = 0;
  }
LABEL_53:
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v12 = v26 | (v27 << 8);
  v8 = v32;
  v6 = v33;
LABEL_13:
  swift_unknownObjectRetain();
  specialized Rope._Node.distanceFromStart<A>(to:in:)(v9, v12, v13, v3, v8);
  result = swift_unknownObjectRelease_n();
LABEL_14:
  if (v9 != v2[11])
    goto LABEL_60;
  if (v13)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v14 = v2[8];
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v12, v14);
    swift_unknownObjectRelease();
  }
  swift_bridgeObjectRetain();
  v15 = swift_bridgeObjectRetain();
  v16 = specialized _NativeDictionary.filter(_:)(v15, v7, v6);
  swift_bridgeObjectRelease_n();
  return v16;
}

uint64_t URLRequest.description.getter()
{
  uint64_t v0;
  id v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v7;

  v1 = *(id *)(*(_QWORD *)v0 + 16);
  swift_retain();
  v2 = objc_msgSend(v1, "URL");
  if (v2)
  {
    v3 = v2;
    URL.init(reference:)(v2, &v7);
    swift_release();

    v4 = v7;
    v5 = URL.description.getter();

    swift_release();
    swift_release();
  }
  else
  {
    swift_release();

    return 0x6C696E203A6C7275;
  }
  return v5;
}

void static URLRequest._unconditionallyBridgeFromObjectiveC(_:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (a1)
  {
    objc_msgSend(a1, sel_mutableCopy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
    swift_dynamicCast();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
    v3 = swift_allocObject();
    objc_msgSend(v5, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    swift_dynamicCast();
    *(_QWORD *)(v3 + 16) = v4;

    *a2 = v3;
  }
  else
  {
    __break(1u);
  }
}

uint64_t specialized URLRequest._applyMutation<A>(_:)(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v10;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v2 = *(void **)(*(_QWORD *)a1 + 16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
    v3 = swift_allocObject();
    swift_retain();
    v4 = v2;
    objc_msgSend(v4, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
    swift_dynamicCast();

    swift_release();
    *(_QWORD *)(v3 + 16) = v10;
    *(_QWORD *)a1 = v3;
    swift_release();
  }
  v5 = *(void **)(*(_QWORD *)a1 + 16);
  v6 = String._bridgeToObjectiveCImpl()();
  v7 = String._bridgeToObjectiveCImpl()();
  v8 = v5;
  objc_msgSend(v8, sel_addValue_forHTTPHeaderField_, v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

NSURLRequest __swiftcall URLRequest._bridgeToObjectiveC()()
{
  uint64_t v0;
  NSURLRequestInternal *v1;
  objc_class *v2;
  NSURLRequest result;
  objc_class *v4;

  objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
  swift_dynamicCast();
  v2 = v4;
  result._internal = v1;
  result.super.isa = v2;
  return result;
}

void URLRequest.url.getter(SEL *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;

  v5 = *(id *)(*(_QWORD *)v2 + 16);
  v6 = objc_msgSend(v5, *a1);
  if (v6)
  {
    v7 = v6;
    URL.init(reference:)(v6, &v10);

    v8 = v10;
    v9 = v11;
  }
  else
  {

    v8 = 0;
    v9 = 0uLL;
  }
  *(_QWORD *)a2 = v8;
  *(_OWORD *)(a2 + 8) = v9;
}

uint64_t StringProtocol.lowercased(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  __n128 v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjectType;
  uint64_t (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;

  v8 = MEMORY[0x1E0C80A78](a1);
  v11 = *v10;
  v12 = v10[1];
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16))((char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v14, a2, v8);
  v15 = String.init<A>(_:)();
  v17 = v16;
  if (v11)
  {
    ObjectType = swift_getObjectType();
    v19 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 64);
    swift_unknownObjectRetain();
    v20 = v19(ObjectType, v12);
    v22 = v21;
    swift_unknownObjectRelease();
  }
  else
  {
    v20 = 0;
    v22 = 0;
  }
  v23 = specialized static ICU.CaseMap.caseMappingForLocale(_:)(v20, v22);
  swift_bridgeObjectRelease();
  if (!v23 || (v24 = a4(v15, v17), v26 = v25, swift_release(), !v26))
    v24 = a5(v15, v17);
  swift_bridgeObjectRelease();
  return v24;
}

uint64_t StringProtocol.localizedLowercase.getter(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v4;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[2];

  v8 = MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))((char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v4, a1, v8);
  v11 = String.init<A>(_:)();
  v13 = v12;
  if (one-time initialization token for cache != -1)
    swift_once();
  v24[1] = static LocaleCache.cache;
  LocaleCache.current.getter();
  v15 = v14;
  ObjectType = swift_getObjectType();
  v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 64))(ObjectType, v15);
  v19 = specialized static ICU.CaseMap.caseMappingForLocale(_:)(v17, v18);
  swift_bridgeObjectRelease();
  if (!v19 || (v20 = a3(v11, v13), v22 = v21, swift_release(), !v22))
    v20 = a4(v11, v13);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return v20;
}

Swift::String_optional __swiftcall ICU.CaseMap.uppercase(_:)(Swift::String a1)
{
  uint64_t v1;
  void *v2;
  Swift::String_optional result;

  v1 = ICU.CaseMap.lowercase(_:)(a1._countAndFlagsBits, (uint64_t)a1._object, MEMORY[0x1E0DE5E50]);
  result.value._object = v2;
  result.value._countAndFlagsBits = v1;
  return result;
}

uint64_t ICU.CaseMap.lowercase(_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, _BYTE *, uint64_t, uint64_t, unint64_t, int *))
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t isStackAllocationSafe;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  uint64_t v17;
  int v18;
  _BYTE v20[12];
  int v21;
  int v22;
  _BYTE v23[33];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v5 = String.utf8CString.getter();
  v6 = *(_QWORD *)(v5 + 16);
  v22 = 0;
  if (v6 >> 31)
  {
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
  }
  v7 = v5 + 32;
  v8 = *(_QWORD *)(v3 + 16);
  isStackAllocationSafe = a3(v8, v23, 32, v5 + 32, v6, &v22);
  if (v22 != 15)
  {
    if (v22 > 0 || (int)isStackAllocationSafe <= 0)
    {
      v15 = 0;
    }
    else
    {
      v23[isStackAllocationSafe] = 0;
      v15 = MEMORY[0x186DA4658](v23);
    }
    goto LABEL_21;
  }
  v10 = (isStackAllocationSafe + 1);
  if (__OFADD__((_DWORD)isStackAllocationSafe, 1))
    goto LABEL_23;
  if ((v10 & 0x80000000) != 0)
    goto LABEL_24;
  if ((int)v10 < 1025
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    v11 = MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v13 = &v20[-v12];
    v21 = 0;
    v14 = ((uint64_t (*)(uint64_t, _BYTE *, uint64_t, uint64_t, unint64_t, int *, __n128))a3)(v8, &v20[-v12], v10, v7, v6, &v21, v11);
    v15 = 0;
    if (v21 <= 0 && v14 >= 1)
    {
      v13[v14] = 0;
      v15 = MEMORY[0x186DA4658](v13);
    }
  }
  else
  {
    v17 = swift_slowAlloc();
    v21 = 0;
    v18 = a3(v8, (_BYTE *)v17, v10, v7, v6, &v21);
    v15 = 0;
    if (v21 <= 0 && v18 >= 1)
    {
      *(_BYTE *)(v17 + v18) = 0;
      v15 = MEMORY[0x186DA4658](v17);
    }
    MEMORY[0x186DA9E78](v17, -1, -1);
  }
LABEL_21:
  swift_release();
  return v15;
}

uint64_t specialized static ICU.CaseMap.caseMappingForLocale(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  if (a2)
    v2 = a1;
  else
    v2 = 0;
  if (a2)
    v3 = a2;
  else
    v3 = 0xE000000000000000;
  v4 = one-time initialization token for _cache;
  swift_bridgeObjectRetain();
  if (v4 != -1)
    swift_once();
  v5 = static ICU.CaseMap._cache + 16;
  v6 = (os_unfair_lock_s *)(static ICU.CaseMap._cache + 24);
  swift_retain();
  os_unfair_lock_lock(v6);
  closure #1 in static ICU.CaseMap.caseMappingForLocale(_:)(v5, v2, v3, &v10);
  os_unfair_lock_unlock(v6);
  swift_release();
  v7 = v10;
  if (!v10)
  {
    type metadata accessor for ICU.CaseMap();
    v7 = swift_allocObject();
    swift_bridgeObjectRetain();
    ICU.CaseMap.init(localeID:)();
    v8 = static ICU.CaseMap._cache;
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v8 + 24));
    closure #2 in static ICU.CaseMap.caseMappingForLocale(_:)((uint64_t *)(v8 + 16), v2, v3, v7);
    os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 24));
    swift_release();
  }
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t closure #1 in static ICU.CaseMap.caseMappingForLocale(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  unint64_t v8;
  char v9;
  uint64_t v10;

  v5 = *(_QWORD *)result;
  if (*(_QWORD *)(*(_QWORD *)result + 16))
  {
    swift_bridgeObjectRetain();
    v8 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v9 & 1) != 0)
    {
      v10 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v8);
      swift_retain();
    }
    else
    {
      v10 = 0;
    }
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v10 = 0;
  }
  *a4 = v10;
  return result;
}

uint64_t type metadata accessor for ICU.CaseMap()
{
  return objc_opt_self();
}

uint64_t ICU.CaseMap.init(localeID:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v1 = ucasemap_open();
  swift_release();
  if (!v1)
    __break(1u);
  *(_QWORD *)(v0 + 16) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<()>._Buffer);
  v2 = swift_allocObject();
  *(_DWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v0 + 24) = v2;
  return v0;
}

uint64_t closure #2 in static ICU.CaseMap.caseMappingForLocale(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  int64_t v41;
  int64_t v42;
  uint64_t v43;

  swift_bridgeObjectRetain();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v43 = *a1;
  v10 = *a1;
  *a1 = 0x8000000000000000;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v4 = v11;
    if (*(_QWORD *)(v10 + 24) < v15)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, isUniquelyReferenced_nonNull_native);
      v16 = v43;
      v17 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
      if ((v4 & 1) != (v18 & 1))
        goto LABEL_47;
      v12 = v17;
      if ((v4 & 1) == 0)
        goto LABEL_43;
LABEL_8:
      v19 = *(_QWORD *)(v16 + 56);
      swift_release();
      *(_QWORD *)(v19 + 8 * v12) = a4;
LABEL_44:
      *a1 = v16;
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v16 = v10;
      if ((v11 & 1) != 0)
        goto LABEL_8;
LABEL_43:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a4, v16);
      swift_bridgeObjectRetain();
      goto LABEL_44;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, ICU.CaseMap>);
  v20 = static _DictionaryStorage.copy(original:)();
  v16 = v20;
  if (!*(_QWORD *)(v10 + 16))
  {
LABEL_42:
    swift_bridgeObjectRelease();
    if ((v4 & 1) != 0)
      goto LABEL_8;
    goto LABEL_43;
  }
  v21 = (void *)(v20 + 64);
  v22 = (unint64_t)((1 << *(_BYTE *)(v16 + 32)) + 63) >> 6;
  if (v16 != v10 || (unint64_t)v21 >= v10 + 64 + 8 * v22)
    memmove(v21, (const void *)(v10 + 64), 8 * v22);
  v40 = v10 + 64;
  v23 = 0;
  *(_QWORD *)(v16 + 16) = *(_QWORD *)(v10 + 16);
  v24 = 1 << *(_BYTE *)(v10 + 32);
  v25 = -1;
  if (v24 < 64)
    v25 = ~(-1 << v24);
  v26 = v25 & *(_QWORD *)(v10 + 64);
  v41 = (unint64_t)(v24 + 63) >> 6;
  while (1)
  {
    if (v26)
    {
      v27 = __clz(__rbit64(v26));
      v26 &= v26 - 1;
      v42 = v23;
      v28 = v27 | (v23 << 6);
      goto LABEL_18;
    }
    v35 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
      goto LABEL_46;
    }
    if (v35 >= v41)
      goto LABEL_42;
    v36 = *(_QWORD *)(v40 + 8 * v35);
    v37 = v23 + 1;
    if (!v36)
    {
      v37 = v23 + 2;
      if (v23 + 2 >= v41)
        goto LABEL_42;
      v36 = *(_QWORD *)(v40 + 8 * v37);
      if (!v36)
      {
        v37 = v23 + 3;
        if (v23 + 3 >= v41)
          goto LABEL_42;
        v36 = *(_QWORD *)(v40 + 8 * v37);
        if (!v36)
        {
          v37 = v23 + 4;
          if (v23 + 4 >= v41)
            goto LABEL_42;
          v36 = *(_QWORD *)(v40 + 8 * v37);
          if (!v36)
          {
            v37 = v23 + 5;
            if (v23 + 5 >= v41)
              goto LABEL_42;
            v36 = *(_QWORD *)(v40 + 8 * v37);
            if (!v36)
            {
              v37 = v23 + 6;
              if (v23 + 6 >= v41)
                goto LABEL_42;
              v36 = *(_QWORD *)(v40 + 8 * v37);
              if (!v36)
              {
                v37 = v23 + 7;
                if (v23 + 7 >= v41)
                  goto LABEL_42;
                v36 = *(_QWORD *)(v40 + 8 * v37);
                if (!v36)
                  break;
              }
            }
          }
        }
      }
    }
LABEL_41:
    v26 = (v36 - 1) & v36;
    v42 = v37;
    v28 = __clz(__rbit64(v36)) + (v37 << 6);
LABEL_18:
    v29 = 16 * v28;
    v30 = (_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v28);
    v31 = v30[1];
    v32 = 8 * v28;
    v33 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + v32);
    v34 = (_QWORD *)(*(_QWORD *)(v16 + 48) + v29);
    *v34 = *v30;
    v34[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v16 + 56) + v32) = v33;
    swift_bridgeObjectRetain();
    swift_retain();
    v23 = v42;
  }
  v38 = v23 + 8;
  if (v23 + 8 >= v41)
    goto LABEL_42;
  v36 = *(_QWORD *)(v40 + 8 * v38);
  if (v36)
  {
    v37 = v23 + 8;
    goto LABEL_41;
  }
  while (1)
  {
    v37 = v38 + 1;
    if (__OFADD__(v38, 1))
      break;
    if (v37 >= v41)
      goto LABEL_42;
    v36 = *(_QWORD *)(v40 + 8 * v37);
    ++v38;
    if (v36)
      goto LABEL_41;
  }
LABEL_46:
  __break(1u);
LABEL_47:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t URLRequest.init(url:cachePolicy:timeoutInterval:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>, double a4@<D0>)
{
  void *v5;
  id v6;
  uint64_t result;

  v5 = (void *)*a1;
  v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C92C28]), sel_initWithURL_cachePolicy_timeoutInterval_, *a1, a2, a4);

  swift_release();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v6;
  *a3 = result;
  return result;
}

uint64_t base witness table accessor for Equatable in ICUPercentNumberFormatter.Signature()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type ICUPercentNumberFormatter.Signature and conformance ICUPercentNumberFormatter.Signature, type metadata accessor for ICUPercentNumberFormatter.Signature, (uint64_t)&protocol conformance descriptor for ICUPercentNumberFormatter.Signature);
}

uint64_t base witness table accessor for Equatable in NSDecimal.FormatStyle()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle and conformance NSDecimal.FormatStyle, type metadata accessor for NSDecimal.FormatStyle, (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle);
}

uint64_t base witness table accessor for RegexComponent in NSDecimal.FormatStyle()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle and conformance NSDecimal.FormatStyle, type metadata accessor for NSDecimal.FormatStyle, (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle);
}

uint64_t static FormatStyle<>.byteCount(style:allowedUnits:spellsOutZero:includesActualByteCount:)@<X0>(char *a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  char v8;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = *a1;
  v9 = *a2;
  if (one-time initialization token for cache != -1)
    swift_once();
  v10 = static LocaleCache.cache + 16;
  v11 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v11);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v10, &v14);
  os_unfair_lock_unlock(v11);
  swift_release_n();
  v12 = v14;
  result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating, (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  *(_BYTE *)a5 = v8;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = a3 & 1;
  *(_BYTE *)(a5 + 17) = a4 & 1;
  *(_QWORD *)(a5 + 24) = v12;
  *(_QWORD *)(a5 + 32) = result;
  return result;
}

{
  char v8;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = *a1;
  v9 = *a2;
  if (one-time initialization token for cache != -1)
    swift_once();
  v10 = static LocaleCache.cache + 16;
  v11 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v11);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v10, &v14);
  os_unfair_lock_unlock(v11);
  swift_release_n();
  v12 = v14;
  result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating, (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  *(_BYTE *)a5 = v8;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = a3 & 1;
  *(_BYTE *)(a5 + 17) = a4 & 1;
  *(_QWORD *)(a5 + 24) = v12;
  *(_QWORD *)(a5 + 32) = result;
  return result;
}

uint64_t base witness table accessor for Equatable in ICUNumberFormatter.Signature()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature, type metadata accessor for ICUNumberFormatter.Signature, (uint64_t)&protocol conformance descriptor for ICUNumberFormatter.Signature);
}

uint64_t protocol witness for RegexComponent.regex.getter in conformance NSDecimal.FormatStyle()
{
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle and conformance NSDecimal.FormatStyle, type metadata accessor for NSDecimal.FormatStyle, (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle);
  return CustomConsumingRegexComponent.regex.getter();
}

uint64_t instantiation function for generic protocol witness table for NSDecimal.FormatStyle(_QWORD *a1)
{
  uint64_t result;

  a1[1] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle and conformance NSDecimal.FormatStyle, type metadata accessor for NSDecimal.FormatStyle, (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle);
  a1[2] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle and conformance NSDecimal.FormatStyle, type metadata accessor for NSDecimal.FormatStyle, (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle);
  result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSDecimal.FormatStyle and conformance NSDecimal.FormatStyle, type metadata accessor for NSDecimal.FormatStyle, (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle);
  a1[3] = result;
  return result;
}

uint64_t Measurement<>.FormatStyle.skeletonForUsage(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v5;
  double v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  uint64_t v21;
  unsigned __int8 v23[31];
  unsigned __int8 v24;

  v3 = v2;
  v5 = *(void **)a1;
  v6 = *(double *)(a1 + 8);
  v7 = *(int *)(a2 + 36);
  v8 = *(unsigned __int8 *)(v3 + v7);
  if (v8 != 14)
  {
    if (Usage.rawValue.getter(*(_BYTE *)(v3 + v7)) == 0x6469766F72507361 && v9 == 0xEA00000000006465)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v11 & 1) == 0)
      {
        *(_OWORD *)v23 = *(_OWORD *)(v3 + 8);
        v12 = *(_QWORD *)(a2 + 16);
        v13 = (void *)swift_dynamicCastUnknownClassUnconditional();
        v24 = v8;
        swift_unknownObjectRetain();
        v14 = bestUnitForUsage<A>(_:dimension:usage:)((uint64_t)v23, v13, &v24, v12);
        swift_unknownObjectRelease();
        objc_opt_self();
        v15 = swift_dynamicCastObjCClassUnconditional();
        specialized Measurement<>.converted(to:)(v23, v15, v5, v6);

        v16 = *(id *)v23;
        goto LABEL_10;
      }
    }
  }
  v16 = v5;
LABEL_10:
  v17 = v16;
  v18 = NSDimension.skeleton.getter();
  v20 = v19;

  if (v20)
  {
    if (*(_BYTE *)(v3 + *(int *)(a2 + 40)) == 1)
    {
      swift_bridgeObjectRelease();
      v20 = (void *)0x8000000182308F40;
      v18 = (id)0xD000000000000020;
    }
    v23[0] = *(_BYTE *)v3;
    v24 = 14;
    v21 = static Measurement<>.FormatStyle.skeleton(_:width:usage:numberFormatStyle:)((uint64_t)v18, v20, v23, &v24, v3 + *(int *)(a2 + 32));

    swift_bridgeObjectRelease();
  }
  else
  {

    return 0;
  }
  return v21;
}

{
  uint64_t v2;
  uint64_t v3;
  void *v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  uint64_t v17;
  _QWORD v19[2];
  __int128 v20;

  v3 = v2;
  v5 = *(void **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(unsigned __int8 *)(v3 + *(int *)(a2 + 36));
  v20 = *(_OWORD *)(v3 + 8);
  if (v7 == 14)
    v8 = 0;
  else
    v8 = v7;
  LOBYTE(v19[0]) = v8;
  v9 = *(_QWORD *)(a2 + 16);
  swift_unknownObjectRetain();
  v10 = bestUnitForUsage<A>(_:dimension:usage:)((uint64_t)&v20, v5, (unsigned __int8 *)v19, v9);
  swift_unknownObjectRelease();
  v19[0] = v5;
  v19[1] = v6;
  type metadata accessor for Measurement(0, v9, v11, v12);
  Measurement<>.converted(to:)(v10, (double *)&v20);
  v13 = (id)v20;
  v14 = NSDimension.skeleton.getter();
  v16 = v15;

  if (v16)
  {
    LOBYTE(v20) = *(_BYTE *)v3;
    LOBYTE(v19[0]) = v7;
    v17 = static Measurement<>.FormatStyle.skeleton(_:width:usage:numberFormatStyle:)((uint64_t)v14, v16, (unsigned __int8 *)&v20, (unsigned __int8 *)v19, v3 + *(int *)(a2 + 32));

    swift_bridgeObjectRelease();
  }
  else
  {

    return 0;
  }
  return v17;
}

id NSDimension.skeleton.getter()
{
  void *v0;
  id result;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  _QWORD v14[2];

  result = objc_msgSend((id)swift_getObjCClassFromObject(), sel_icuType);
  if (result)
  {
    v2 = result;
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v5 = v4;

    v6 = objc_msgSend(v0, sel_icuSubtype);
    if (v6)
    {
      v7 = v6;
      v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
      v10 = v9;

      _StringGuts.grow(_:)(18);
      swift_bridgeObjectRelease();
      strcpy((char *)v14, "measure-unit/");
      HIWORD(v14[1]) = -4864;
      v11._countAndFlagsBits = (uint64_t)v3;
      v11._object = v5;
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      v12._countAndFlagsBits = 45;
      v12._object = (void *)0xE100000000000000;
      String.append(_:)(v12);
      v13._countAndFlagsBits = (uint64_t)v8;
      v13._object = v10;
      String.append(_:)(v13);
      swift_bridgeObjectRelease();
      return (id)v14[0];
    }
    else
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  return result;
}

uint64_t Measurement<>.formatted()(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  os_unfair_lock_s *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27[3];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v27[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for Measurement<>.FormatStyle(0, *(_QWORD *)(a1 + 16), v6, v7);
  v9 = *((_QWORD *)v8 - 1);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v27[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v27[-1] - v13;
  v26 = *v1;
  v15 = v1[1];
  if (one-time initialization token for cache != -1)
    swift_once();
  v16 = static LocaleCache.cache + 16;
  v17 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v17);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v16, v27);
  os_unfair_lock_unlock(v17);
  swift_release_n();
  v18 = v27[0];
  v19 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating, (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56);
  v21(v5, 1, 1, v20);
  v22 = (uint64_t)&v11[v8[8]];
  v21((char *)v22, 1, 1, v20);
  v23 = v8[9];
  v11[v8[10]] = 0;
  *v11 = 1;
  *((_QWORD *)v11 + 1) = v18;
  *((_QWORD *)v11 + 2) = v19;
  v11[v23] = 0;
  outlined assign with take of FloatingPointFormatStyle<Double>?((uint64_t)v5, v22);
  (*(void (**)(char *, char *, int *))(v9 + 32))(v14, v11, v8);
  v27[0] = v26;
  v27[1] = v15;
  v24 = Measurement<>.FormatStyle.format(_:)((uint64_t)v27, (uint64_t)v8);
  (*(void (**)(char *, int *))(v9 + 8))(v14, v8);
  return v24;
}

uint64_t static FormatStyle.measurement<>(width:usage:hidesScaleName:numberFormatStyle:)@<X0>(char *a1@<X0>, char *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  char v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;

  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *a1;
  v14 = *a2;
  outlined init with copy of FloatingPointFormatStyle<Double>?(a4, (uint64_t)v12);
  if (one-time initialization token for cache != -1)
    swift_once();
  v15 = static LocaleCache.cache + 16;
  v16 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v16);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v15, &v26);
  os_unfair_lock_unlock(v16);
  swift_release_n();
  v17 = v26;
  v18 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating, (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  v19 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature><>.FormatStyle);
  v20 = a5 + v19[8];
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  v22 = v19[9];
  v23 = v19[10];
  *(_BYTE *)(a5 + v23) = 0;
  *(_BYTE *)a5 = v13;
  *(_QWORD *)(a5 + 8) = v17;
  *(_QWORD *)(a5 + 16) = v18;
  *(_BYTE *)(a5 + v22) = v14;
  result = outlined assign with take of FloatingPointFormatStyle<Double>?((uint64_t)v12, v20);
  *(_BYTE *)(a5 + v23) = a3 & 1;
  return result;
}

uint64_t static FormatStyle.measurement<A>(width:usage:numberFormatStyle:)@<X0>(char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  char v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;

  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *a1;
  v14 = *a2;
  outlined init with copy of FloatingPointFormatStyle<Double>?(a3, (uint64_t)v12);
  if (one-time initialization token for cache != -1)
    swift_once();
  v15 = static LocaleCache.cache + 16;
  v16 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v16);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v15, &v27);
  os_unfair_lock_unlock(v16);
  swift_release_n();
  v17 = v27;
  v18 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating, (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  v21 = (int *)type metadata accessor for Measurement<>.FormatStyle(0, a4, v19, v20);
  v22 = a5 + v21[8];
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v22, 1, 1, v23);
  v24 = v21[9];
  *(_BYTE *)(a5 + v21[10]) = 0;
  *(_BYTE *)a5 = v13;
  *(_QWORD *)(a5 + 8) = v17;
  *(_QWORD *)(a5 + 16) = v18;
  *(_BYTE *)(a5 + v24) = v14;
  return outlined assign with take of FloatingPointFormatStyle<Double>?((uint64_t)v12, v22);
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v7;

  v7 = a5(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a1, a2, a2, v7);
}

uint64_t __swift_store_extra_inhabitant_indexTm_0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = 2 * ~(_DWORD)a2;
    *(_QWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 64) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_BYTE *)(result + 72) = 0;
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 36), a2, a2, v7);
  }
  return result;
}

uint64_t __swift_store_extra_inhabitant_indexTm_1(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t result;
  uint64_t v10;

  result = a5(0);
  v10 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v10 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

char *__swift_store_extra_inhabitant_indexTm_2(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

char *__swift_store_extra_inhabitant_indexTm_3(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 36)], a2, a2, v7);
  }
  return result;
}

uint64_t outlined assign with take of FloatingPointFormatStyle<Double>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for Measurement<>.FormatStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Measurement<>.FormatStyle);
}

uint64_t static Measurement<>.FormatStyle.skeleton(_:width:usage:numberFormatStyle:)(uint64_t a1, void *a2, unsigned __int8 *a3, unsigned __int8 *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  int v17;
  Swift::String v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  Swift::String v23;
  void *v24;
  uint64_t v25;
  void *v26;
  char v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v37;
  uint64_t v38;
  unint64_t v39;

  v10 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *a3;
  v17 = *a4;
  v38 = 0;
  v39 = 0xE000000000000000;
  if (a2)
  {
    v37._countAndFlagsBits = a1;
    v37._object = a2;
    swift_bridgeObjectRetain();
    v18._countAndFlagsBits = 32;
    v18._object = (void *)0xE100000000000000;
    String.append(_:)(v18);
    v19 = 0x80000001823062F0;
    if (v16 == 1)
      v20 = 0xD000000000000010;
    else
      v20 = 0xD000000000000011;
    if (v16 != 1)
      v19 = 0x8000000182306310;
    v21 = v16 ? v20 : 0xD000000000000014;
    v22 = (void *)(v16 ? v19 : 0x8000000182306270);
    swift_bridgeObjectRetain();
    v23._countAndFlagsBits = v21;
    v23._object = v22;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    String.append(_:)(v37);
    swift_bridgeObjectRelease();
    if (v17 != 14)
    {
      v25 = Usage.rawValue.getter(v17);
      v26 = v24;
      if (v25 == 0x6469766F72507361 && v24 == (void *)0xEA00000000006465)
        goto LABEL_19;
      v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v27 & 1) == 0
        && objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_supportsRegionalPreference))
      {
        v37._countAndFlagsBits = 0x2F656761737520;
        v37._object = (void *)0xE700000000000000;
        v28._countAndFlagsBits = v25;
        v28._object = v26;
        String.append(_:)(v28);
        swift_bridgeObjectRelease();
        String.append(_:)(v37);
LABEL_19:
        swift_bridgeObjectRelease();
      }
    }
  }
  outlined init with copy of FloatingPointFormatStyle<Double>?(a5, (uint64_t)v15);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 48))(v15, 1, v29) == 1)
  {
    outlined destroy of Any?((uint64_t)v15, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  }
  else
  {
    outlined init with copy of NumberFormatStyleConfiguration.Collection((uint64_t)&v15[*(int *)(v29 + 36)], (uint64_t)v12);
    outlined destroy of Any?((uint64_t)v15, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    v30 = NumberFormatStyleConfiguration.Collection.skeleton.getter();
    v32 = v31;
    outlined destroy of NumberFormatStyleConfiguration.Collection((uint64_t)v12);
    swift_bridgeObjectRetain();
    v33 = String.count.getter();
    swift_bridgeObjectRelease();
    if (v33 >= 1)
    {
      v34._countAndFlagsBits = 32;
      v34._object = (void *)0xE100000000000000;
      String.append(_:)(v34);
    }
    v35._countAndFlagsBits = v30;
    v35._object = v32;
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
  }
  return v38;
}

uint64_t NumberFormatStyleConfiguration.Collection.skeleton.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  Swift::String v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  Swift::String v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v34;
  unint64_t v35;
  Swift::String v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  __int16 v40;
  int v41;
  Swift::String v42;
  int v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  unint64_t v47;
  unint64_t v48;
  Swift::String v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  int64_t v66;
  Swift::String v67;
  Swift::String v68;
  Swift::String v69;
  uint64_t v70;
  Swift::String v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  Swift::String v75;
  Swift::String v76;
  int v77;
  BOOL v78;
  uint64_t v79;
  unint64_t v80;
  Swift::String v81;
  int v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  Swift::String v89;
  int v90;
  unint64_t v91;
  Swift::String v92;
  unint64_t v93;
  _BYTE *v94;
  int v95;
  const char *v96;
  unint64_t v97;
  Swift::String v98;
  uint64_t result;
  _BYTE v100[4];
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  _BYTE *v108;
  uint64_t v109;
  _BYTE *v110;
  _BYTE *v111;
  uint64_t v112;
  uint64_t v113;
  _BYTE v114[20];
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  _BYTE v119[24];
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  unint64_t v126;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1E0C80A78](v2);
  v110 = &v100[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for FloatingPointRoundingRule();
  v112 = *(_QWORD *)(v4 - 8);
  v113 = v4;
  v5 = MEMORY[0x1E0C80A78](v4);
  v108 = &v100[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v5);
  v111 = &v100[-v7];
  v125 = 0;
  v126 = 0xE000000000000000;
  if ((*(_BYTE *)(v0 + 8) & 1) == 0)
  {
    v107 = v0;
    v8 = *(double *)v0;
    v117 = 0x2F656C616373;
    v118 = 0xE600000000000000;
    specialized NSDecimal.init(_:)(v8);
    v10 = v9;
    LOWORD(v12) = v11;
    LOWORD(v14) = v13;
    *(_QWORD *)v119 = v9;
    v15 = HIDWORD(v9);
    v16 = HIWORD(v9);
    v17 = v11 >> 16;
    *(_QWORD *)&v119[8] = v11;
    v18 = HIDWORD(v11);
    v19 = HIWORD(v11);
    LODWORD(v20) = HIWORD(v13);
    *(_DWORD *)&v119[16] = v13;
    if (_So9NSDecimala__length_getter(v119))
      goto LABEL_3;
    *(_DWORD *)v119 = v10;
    *(_WORD *)&v119[4] = v15;
    *(_WORD *)&v119[6] = v16;
    *(_WORD *)&v119[8] = v12;
    *(_WORD *)&v119[10] = v17;
    *(_WORD *)&v119[12] = v18;
    *(_WORD *)&v119[14] = v19;
    *(_WORD *)&v119[16] = v14;
    *(_WORD *)&v119[18] = v20;
    if (!_So9NSDecimala__isNegative_getter(v119))
    {
LABEL_3:
      *(_DWORD *)v119 = v10;
      *(_WORD *)&v119[4] = v15;
      *(_WORD *)&v119[6] = v16;
      *(_WORD *)&v119[8] = v12;
      *(_WORD *)&v119[10] = v17;
      *(_WORD *)&v119[12] = v18;
      *(_WORD *)&v119[14] = v19;
      *(_WORD *)&v119[16] = v14;
      *(_WORD *)&v119[18] = v20;
      if (_So9NSDecimala__length_getter(v119))
      {
        v115 = 0;
        v116 = 0xE000000000000000;
        *(_DWORD *)v119 = v10;
        *(_WORD *)&v119[4] = v15;
        *(_WORD *)&v119[6] = v16;
        *(_WORD *)&v119[8] = v12;
        *(_WORD *)&v119[10] = v17;
        *(_WORD *)&v119[12] = v18;
        *(_WORD *)&v119[14] = v19;
        *(_WORD *)&v119[16] = v14;
        *(_WORD *)&v119[18] = v20;
        *(_DWORD *)v114 = v10;
        *(_WORD *)&v114[4] = v15;
        *(_WORD *)&v114[6] = v16;
        *(_WORD *)&v114[8] = v12;
        *(_WORD *)&v114[10] = v17;
        *(_WORD *)&v114[12] = v18;
        *(_WORD *)&v114[14] = v19;
        *(_WORD *)&v114[16] = v14;
        *(_WORD *)&v114[18] = v20;
        if ((int)_So9NSDecimala__exponent_getter(v114) >= 1)
        {
          do
          {
            v21._countAndFlagsBits = 48;
            v21._object = (void *)0xE100000000000000;
            String.append(_:)(v21);
            *(_DWORD *)v114 = v10;
            *(_WORD *)&v114[4] = v15;
            *(_WORD *)&v114[6] = v16;
            *(_WORD *)&v114[8] = v12;
            *(_WORD *)&v114[10] = v17;
            *(_WORD *)&v114[12] = v18;
            *(_WORD *)&v114[14] = v19;
            *(_WORD *)&v114[16] = v14;
            *(_WORD *)&v114[18] = v20;
            v22 = _So9NSDecimala__exponent_getter(v114);
            _So9NSDecimala__exponent_setter((v22 - 1), v119);
            v10 = *(unsigned int *)v119;
            v15 = *(unsigned __int16 *)&v119[4];
            LOWORD(v16) = *(_WORD *)&v119[6];
            LOWORD(v12) = *(_WORD *)&v119[8];
            LOWORD(v17) = *(_WORD *)&v119[10];
            LOWORD(v18) = *(_WORD *)&v119[12];
            LOWORD(v19) = *(_WORD *)&v119[14];
            LOWORD(v14) = *(_WORD *)&v119[16];
            LOWORD(v20) = *(_WORD *)&v119[18];
            *(_QWORD *)v114 = *(_QWORD *)v119;
            *(_QWORD *)&v114[8] = *(_QWORD *)&v119[8];
            *(_DWORD *)&v114[16] = *(_DWORD *)&v119[16];
          }
          while ((int)_So9NSDecimala__exponent_getter(v114) > 0);
        }
        *(_DWORD *)v114 = v10;
        *(_WORD *)&v114[4] = v15;
        *(_WORD *)&v114[6] = v16;
        *(_WORD *)&v114[8] = v12;
        *(_WORD *)&v114[10] = v17;
        *(_WORD *)&v114[12] = v18;
        *(_WORD *)&v114[14] = v19;
        *(_WORD *)&v114[16] = v14;
        *(_WORD *)&v114[18] = v20;
        if (!_So9NSDecimala__exponent_getter(v114))
        {
          _So9NSDecimala__exponent_setter(1, v119);
          v10 = *(unsigned int *)v119;
          v15 = *(unsigned __int16 *)&v119[4];
          LOWORD(v16) = *(_WORD *)&v119[6];
          LOWORD(v12) = *(_WORD *)&v119[8];
          LOWORD(v17) = *(_WORD *)&v119[10];
          LOWORD(v18) = *(_WORD *)&v119[12];
          LOWORD(v19) = *(_WORD *)&v119[14];
          LOWORD(v14) = *(_WORD *)&v119[16];
          LOWORD(v20) = *(_WORD *)&v119[18];
        }
        v106 = v10;
        *(_DWORD *)v114 = v10;
        LOWORD(v23) = v15;
        *(_WORD *)&v114[4] = v15;
        *(_WORD *)&v114[6] = v16;
        *(_WORD *)&v114[8] = v12;
        *(_WORD *)&v114[10] = v17;
        *(_WORD *)&v114[12] = v18;
        *(_WORD *)&v114[14] = v19;
        *(_WORD *)&v114[16] = v14;
        *(_WORD *)&v114[18] = v20;
        if (_So9NSDecimala__length_getter(v114))
        {
          v105 = 0;
          v24 = v15;
          v23 = v106;
          while (1)
          {
            v109 = v24;
            *(_DWORD *)v114 = v23;
            *(_WORD *)&v114[4] = v24;
            *(_WORD *)&v114[6] = v16;
            *(_WORD *)&v114[8] = v12;
            *(_WORD *)&v114[10] = v17;
            *(_WORD *)&v114[12] = v18;
            *(_WORD *)&v114[14] = v19;
            *(_WORD *)&v114[16] = v14;
            *(_WORD *)&v114[18] = v20;
            if (!_So9NSDecimala__exponent_getter(v114))
            {
              v106 = v23;
              v25._countAndFlagsBits = 46;
              v25._object = (void *)0xE100000000000000;
              String.append(_:)(v25);
              LODWORD(v23) = v106;
            }
            *(_DWORD *)v114 = v23;
            *(_WORD *)&v114[4] = v109;
            *(_WORD *)&v114[6] = v16;
            *(_WORD *)&v114[8] = v12;
            *(_WORD *)&v114[10] = v17;
            *(_WORD *)&v114[12] = v18;
            *(_WORD *)&v114[14] = v19;
            *(_WORD *)&v114[16] = v14;
            *(_WORD *)&v114[18] = v20;
            v26 = _So9NSDecimala__exponent_getter(v114);
            _So9NSDecimala__exponent_setter((v26 + 1), v119);
            v27 = *(unsigned int *)v119;
            LOWORD(v19) = *(_WORD *)&v119[6];
            LOWORD(v17) = *(_WORD *)&v119[14];
            v106 = *(unsigned __int16 *)&v119[4];
            v104 = *(unsigned __int16 *)&v119[8];
            v103 = *(unsigned __int16 *)&v119[10];
            v102 = *(unsigned __int16 *)&v119[12];
            LOWORD(v18) = *(_WORD *)&v119[18];
            v101 = *(unsigned __int16 *)&v119[16];
            NSDecimal.asVariableLengthInteger()(*(unsigned int *)v119 | ((unint64_t)*(unsigned __int16 *)&v119[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v119[6] << 48), *(unsigned __int16 *)&v119[8] | ((unint64_t)*(unsigned __int16 *)&v119[10] << 16) | ((unint64_t)*(unsigned __int16 *)&v119[12] << 32) | ((unint64_t)*(unsigned __int16 *)&v119[14] << 48), *(unsigned __int16 *)&v119[16] | (*(unsigned __int16 *)&v119[18] << 16));
            v23 = v28;
            v20 = *(_QWORD *)(v28 + 16);
            v109 = v27;
            if (v20)
              break;
            v14 = 0;
            v12 = MEMORY[0x1E0DEE9D8];
LABEL_18:
            v32 = *(_QWORD *)(v12 + 16);
            if (v32 && !*(_WORD *)(v12 + 2 * v32 + 30))
            {
              do
              {
                *(_QWORD *)(v12 + 16) = v32 - 1;
                if (v32 == 1)
                  break;
              }
              while (!*(unsigned __int16 *)(v12 + 28 + 2 * v32--));
            }
            swift_bridgeObjectRelease();
            *(_DWORD *)v114 = v109;
            *(_WORD *)&v114[4] = v106;
            *(_WORD *)&v114[6] = v19;
            *(_WORD *)&v114[8] = v104;
            *(_WORD *)&v114[10] = v103;
            *(_WORD *)&v114[12] = v102;
            *(_WORD *)&v114[14] = v17;
            *(_WORD *)&v114[16] = v101;
            *(_WORD *)&v114[18] = v18;
            NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v12);
            if (v34)
              goto LABEL_101;
            v105 = 0;
            v35 = *(_QWORD *)(v12 + 16);
            swift_bridgeObjectRelease();
            if (HIDWORD(v35))
              goto LABEL_102;
            _So9NSDecimala__length_setter(v35, v114);
            *(_DWORD *)v119 = *(_DWORD *)v114;
            *(_OWORD *)&v119[4] = *(_OWORD *)&v114[4];
            *(_QWORD *)v114 = v14 | 0x30;
            v36._countAndFlagsBits = MEMORY[0x186DA46D0](v114, 1);
            String.append(_:)(v36);
            swift_bridgeObjectRelease();
            v23 = *(unsigned int *)v119;
            v109 = *(unsigned __int16 *)&v119[4];
            LOWORD(v16) = *(_WORD *)&v119[6];
            LOWORD(v12) = *(_WORD *)&v119[8];
            LOWORD(v17) = *(_WORD *)&v119[10];
            LOWORD(v18) = *(_WORD *)&v119[12];
            LOWORD(v19) = *(_WORD *)&v119[14];
            LOWORD(v14) = *(_WORD *)&v119[16];
            LOWORD(v20) = *(_WORD *)&v119[18];
            *(_QWORD *)v114 = *(_QWORD *)v119;
            *(_QWORD *)&v114[8] = *(_QWORD *)&v119[8];
            *(_DWORD *)&v114[16] = *(_DWORD *)&v119[16];
            v37 = _So9NSDecimala__length_getter(v114);
            v24 = v109;
            if (!v37)
              goto LABEL_30;
          }
          v12 = static Array._allocateBufferUninitialized(minimumCapacity:)();
          v16 = v12 + 30;
          *(_QWORD *)(v12 + 16) = v20;
          bzero((void *)(v12 + 32), 2 * v20);
          v29 = *(unsigned __int16 *)(2 * v20 + v23 + 30);
          v30 = v29 / 0xA;
          do
          {
            *(_WORD *)(v16 + 2 * v20) = v30;
            v14 = v29 % 0xA;
            if (v20 == 1)
              goto LABEL_18;
            v29 = *(unsigned __int16 *)(v23 + 28 + 2 * v20) | (v14 << 16);
            v30 = v29 / 0xA;
            v31 = v20 - 2;
            --v20;
          }
          while (v31 < *(_QWORD *)(v12 + 16));
          __break(1u);
        }
        LOWORD(v24) = v23;
        LODWORD(v23) = v106;
LABEL_30:
        *(_DWORD *)v114 = v23;
        *(_WORD *)&v114[4] = v24;
        *(_WORD *)&v114[6] = v16;
        *(_WORD *)&v114[8] = v12;
        *(_WORD *)&v114[10] = v17;
        *(_WORD *)&v114[12] = v18;
        *(_WORD *)&v114[14] = v19;
        *(_WORD *)&v114[16] = v14;
        *(_WORD *)&v114[18] = v20;
        v40 = v24;
        v41 = v23;
        if ((int)_So9NSDecimala__exponent_getter(v114) <= 0)
        {
          while (1)
          {
            *(_DWORD *)v114 = v41;
            *(_WORD *)&v114[4] = v40;
            *(_WORD *)&v114[6] = v16;
            *(_WORD *)&v114[8] = v12;
            *(_WORD *)&v114[10] = v17;
            *(_WORD *)&v114[12] = v18;
            *(_WORD *)&v114[14] = v19;
            *(_WORD *)&v114[16] = v14;
            *(_WORD *)&v114[18] = v20;
            if (!_So9NSDecimala__exponent_getter(v114))
              break;
            v42._countAndFlagsBits = 48;
            v42._object = (void *)0xE100000000000000;
            String.append(_:)(v42);
            *(_DWORD *)v114 = v41;
            *(_WORD *)&v114[4] = v40;
            *(_WORD *)&v114[6] = v16;
            *(_WORD *)&v114[8] = v12;
            *(_WORD *)&v114[10] = v17;
            *(_WORD *)&v114[12] = v18;
            *(_WORD *)&v114[14] = v19;
            *(_WORD *)&v114[16] = v14;
            *(_WORD *)&v114[18] = v20;
            v43 = _So9NSDecimala__exponent_getter(v114);
            _So9NSDecimala__exponent_setter((v43 + 1), v119);
            v41 = *(_DWORD *)v119;
            v40 = *(_WORD *)&v119[4];
            LOWORD(v16) = *(_WORD *)&v119[6];
            LOWORD(v12) = *(_WORD *)&v119[8];
            LOWORD(v17) = *(_WORD *)&v119[10];
            LOWORD(v18) = *(_WORD *)&v119[12];
            LOWORD(v19) = *(_WORD *)&v119[14];
            LOWORD(v14) = *(_WORD *)&v119[16];
            LOWORD(v20) = *(_WORD *)&v119[18];
          }
          v44._countAndFlagsBits = 46;
          v44._object = (void *)0xE100000000000000;
          String.append(_:)(v44);
          v45._countAndFlagsBits = 48;
          v45._object = (void *)0xE100000000000000;
          String.append(_:)(v45);
        }
        *(_DWORD *)v114 = v41;
        *(_WORD *)&v114[4] = v40;
        *(_WORD *)&v114[6] = v16;
        *(_WORD *)&v114[8] = v12;
        *(_WORD *)&v114[10] = v17;
        *(_WORD *)&v114[12] = v18;
        *(_WORD *)&v114[14] = v19;
        *(_WORD *)&v114[16] = v14;
        *(_WORD *)&v114[18] = v20;
        if (_So9NSDecimala__isNegative_getter(v114))
        {
          v46._countAndFlagsBits = 45;
          v46._object = (void *)0xE100000000000000;
          String.append(_:)(v46);
        }
        *(_QWORD *)v114 = v115;
        *(_QWORD *)&v114[8] = v116;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<String>);
        lazy protocol witness table accessor for type ReversedCollection<String> and conformance ReversedCollection<A>();
        v39 = String.init<A>(_:)();
        v38 = v47;
      }
      else
      {
        v38 = 0xE100000000000000;
        v39 = 48;
      }
    }
    else
    {
      v38 = 0xE300000000000000;
      v39 = 5136718;
    }
    v1 = v107;
    v48 = v38;
    String.append(_:)(*(Swift::String *)&v39);
    swift_bridgeObjectRelease();
    *(_QWORD *)v119 = v117;
    *(_QWORD *)&v119[8] = v118;
    swift_bridgeObjectRetain();
    v49._countAndFlagsBits = 32;
    v49._object = (void *)0xE100000000000000;
    String.append(_:)(v49);
    swift_bridgeObjectRelease();
    String.append(_:)(*(Swift::String *)v119);
    swift_bridgeObjectRelease();
  }
  v51 = *(_QWORD *)(v1 + 16);
  v50 = *(_QWORD *)(v1 + 24);
  v53 = *(_QWORD *)(v1 + 32);
  v52 = *(_QWORD *)(v1 + 40);
  v55 = *(_QWORD *)(v1 + 48);
  v54 = *(_QWORD *)(v1 + 56);
  v56 = *(_QWORD *)(v1 + 64);
  v57 = *(unsigned __int8 *)(v1 + 72);
  v58 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  v59 = v1 + *(int *)(v58 + 40);
  v60 = *(unsigned __int8 *)(v59 + 8);
  if (v52 >> 1 == 0xFFFFFFFF && v54 <= 1 && v57 < 2)
  {
    v62 = v112;
    v61 = v113;
    v63 = v111;
    v64 = (uint64_t)v110;
    if (v60 == 255)
      goto LABEL_56;
    *(_QWORD *)v119 = NumberFormatStyleConfiguration.RoundingIncrement.skeleton.getter(*(_QWORD *)v59, v60 & 1);
    *(_QWORD *)&v119[8] = v65;
    swift_bridgeObjectRetain();
    goto LABEL_54;
  }
  if (v60 != 255)
  {
    v66 = *(_QWORD *)v59;
    *(_QWORD *)v119 = v51;
    *(_QWORD *)&v119[8] = v50;
    *(_QWORD *)&v119[16] = v53;
    v120 = v52;
    v121 = v55;
    v122 = v54;
    v123 = v56;
    v124 = v57;
    v67._countAndFlagsBits = NumberFormatStyleConfiguration.RoundingIncrement.skeleton.getter(v66, v60 & 1);
    v68 = NumberFormatStyleConfiguration.Precision.skeletonWithRoundingIncrement(stem:)(v67);
    swift_bridgeObjectRelease();
    *(Swift::String *)v119 = v68;
    swift_bridgeObjectRetain();
    v69._countAndFlagsBits = 32;
    v69._object = (void *)0xE100000000000000;
    String.append(_:)(v69);
    swift_bridgeObjectRelease();
    String.append(_:)(*(Swift::String *)v119);
    v62 = v112;
    v61 = v113;
    v63 = v111;
    v64 = (uint64_t)v110;
LABEL_55:
    swift_bridgeObjectRelease();
LABEL_56:
    v77 = *(unsigned __int8 *)(v1 + 73);
    if (v77 != 2)
    {
      v78 = (v77 & 1) == 0;
      v79 = 0x666F2D70756F7267;
      if (v78)
      {
        v79 = 0;
        v80 = 0xE000000000000000;
      }
      else
      {
        v80 = 0xE900000000000066;
      }
      *(_QWORD *)v119 = v79;
      *(_QWORD *)&v119[8] = v80;
      swift_bridgeObjectRetain();
      v81._countAndFlagsBits = 32;
      v81._object = (void *)0xE100000000000000;
      String.append(_:)(v81);
      swift_bridgeObjectRelease();
      String.append(_:)(*(Swift::String *)v119);
      swift_bridgeObjectRelease();
    }
    v82 = *(unsigned __int16 *)(v1 + 74) | (*(unsigned __int8 *)(v1 + 76) << 16);
    if (*(_WORD *)(v1 + 74) != 2)
    {
      v83 = 0x76656E2D6E676973;
      if ((*(_WORD *)(v1 + 74) & 0x100) == 0)
        v83 = 0x7475612D6E676973;
      v84 = 0xE90000000000006FLL;
      if ((*(_WORD *)(v1 + 74) & 0x100) != 0)
        v84 = 0xEA00000000007265;
      v85 = 0xD000000000000010;
      if ((v82 & 0x10000) == 0)
        v85 = 0x776C612D6E676973;
      v86 = 0x8000000182306210;
      if ((v82 & 0x10000) == 0)
        v86 = 0xEB00000000737961;
      if ((*(_WORD *)(v1 + 74) & 1) != 0)
        v87 = v83;
      else
        v87 = v85;
      if ((*(_WORD *)(v1 + 74) & 1) != 0)
        v88 = v84;
      else
        v88 = v86;
      *(_QWORD *)v119 = v87;
      *(_QWORD *)&v119[8] = v88;
      swift_bridgeObjectRetain();
      v89._countAndFlagsBits = 32;
      v89._object = (void *)0xE100000000000000;
      String.append(_:)(v89);
      swift_bridgeObjectRelease();
      String.append(_:)(*(Swift::String *)v119);
      swift_bridgeObjectRelease();
    }
    v90 = *(unsigned __int8 *)(v1 + 77);
    if (v90 != 2)
    {
      if ((v90 & 1) != 0)
        v91 = 0xEE00737961776C61;
      else
        v91 = 0xEC0000006F747561;
      *(_QWORD *)v119 = 0x2D6C616D69636564;
      *(_QWORD *)&v119[8] = v91;
      swift_bridgeObjectRetain();
      v92._countAndFlagsBits = 32;
      v92._object = (void *)0xE100000000000000;
      String.append(_:)(v92);
      swift_bridgeObjectRelease();
      String.append(_:)(*(Swift::String *)v119);
      swift_bridgeObjectRelease();
    }
    outlined init with copy of FloatingPointRoundingRule?(v1 + *(int *)(v58 + 36), v64);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48))(v64, 1, v61) == 1)
    {
      outlined destroy of Any?(v64, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
      goto LABEL_98;
    }
    v93 = 0xD000000000000010;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v62 + 32))(v63, v64, v61);
    v94 = v108;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v62 + 16))(v108, v63, v61);
    v95 = (*(uint64_t (**)(_BYTE *, uint64_t))(v62 + 88))(v94, v61);
    if (v95 == *MEMORY[0x1E0DED4F0])
    {
      v93 = 0xD000000000000015;
      v96 = "rounding-mode-half-up";
    }
    else if (v95 == *MEMORY[0x1E0DED4E8])
    {
      v93 = 0xD000000000000017;
      v96 = "rounding-mode-half-even";
    }
    else if (v95 == *MEMORY[0x1E0DED500])
    {
      v93 = 0xD000000000000015;
      v96 = "rounding-mode-ceiling";
    }
    else if (v95 == *MEMORY[0x1E0DED508])
    {
      v93 = 0xD000000000000013;
      v96 = "rounding-mode-floor";
    }
    else if (v95 == *MEMORY[0x1E0DED4D8])
    {
      v93 = 0xD000000000000012;
      v96 = "rounding-mode-down";
    }
    else
    {
      if (v95 != *MEMORY[0x1E0DED4E0])
      {
        (*(void (**)(_BYTE *, uint64_t))(v62 + 8))(v94, v61);
        v93 = 0;
        v97 = 0xE000000000000000;
        goto LABEL_97;
      }
      v96 = "rounding-mode-up";
    }
    v97 = (unint64_t)(v96 - 32) | 0x8000000000000000;
LABEL_97:
    *(_QWORD *)v119 = v93;
    *(_QWORD *)&v119[8] = v97;
    swift_bridgeObjectRetain();
    v98._countAndFlagsBits = 32;
    v98._object = (void *)0xE100000000000000;
    String.append(_:)(v98);
    swift_bridgeObjectRelease();
    String.append(_:)(*(Swift::String *)v119);
    swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t))(v62 + 8))(v63, v61);
LABEL_98:
    __asm { BR              X10 }
  }
  if ((v57 & 0x80) != 0)
  {
    v72 = NumberFormatStyleConfiguration.Precision.integerAndFractionalLengthSkeleton(minInt:maxInt:minFrac:maxFrac:)(v51, v50 & 1, v53, v52 & 1, v55, v54 & 1, v56, v57 & 1);
    v74 = v73;
    v62 = v112;
    v61 = v113;
    v63 = v111;
    v64 = (uint64_t)v110;
LABEL_53:
    *(_QWORD *)v119 = v72;
    *(_QWORD *)&v119[8] = v74;
    swift_bridgeObjectRetain();
LABEL_54:
    v76._countAndFlagsBits = 32;
    v76._object = (void *)0xE100000000000000;
    String.append(_:)(v76);
    swift_bridgeObjectRelease();
    String.append(_:)(*(Swift::String *)v119);
    goto LABEL_55;
  }
  *(_QWORD *)v119 = MEMORY[0x186DA4928](64, 0xE100000000000000, v51);
  *(_QWORD *)&v119[8] = v70;
  if ((v53 & 1) != 0)
  {
    v75._countAndFlagsBits = 43;
    v75._object = (void *)0xE100000000000000;
    String.append(_:)(v75);
    goto LABEL_52;
  }
  if (!__OFSUB__(v50, v51))
  {
    v71._countAndFlagsBits = MEMORY[0x186DA4928](35, 0xE100000000000000, v50 - v51);
    String.append(_:)(v71);
    swift_bridgeObjectRelease();
LABEL_52:
    v62 = v112;
    v61 = v113;
    v63 = v111;
    v64 = (uint64_t)v110;
    v72 = *(_QWORD *)v119;
    v74 = *(_QWORD *)&v119[8];
    goto LABEL_53;
  }
  __break(1u);
LABEL_101:
  swift_bridgeObjectRelease();
  swift_unexpectedError();
  __break(1u);
LABEL_102:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t specialized BidirectionalCollection._trimmingCharacters(while:)(unint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  int v14;
  unint64_t v15;
  char *v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t result;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  char *v30;
  char *v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  BOOL v37;
  BOOL v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  _QWORD v47[3];
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;

  v4 = type metadata accessor for Unicode.Scalar.Properties();
  v51 = *(_QWORD *)(v4 - 8);
  v52 = v4;
  MEMORY[0x1E0C80A78](v4);
  v50 = (char *)v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1 & 0xFFFFFFFFFFFFLL;
  v47[1] = a1 & 0xFFFFFFFFFFFFLL;
  v47[2] = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) != 0)
    v6 = HIBYTE(a2) & 0xF;
  v53 = v6;
  v54 = a1;
  if ((a2 & 0x1000000000000000) != 0)
    v7 = (a1 >> 59) & 1;
  else
    v7 = 1;
  v8 = 4 * v6;
  v47[0] = v7;
  v9 = 0;
  if (v6)
  {
    v10 = 4 << v7;
    v48 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v49 = a2 & 0xFFFFFFFFFFFFFFLL;
    v11 = 15;
    while (1)
    {
      v12 = v11 & 0xC;
      v13 = (v11 & 1) == 0 || v12 == v10;
      v14 = v13;
      if (v13)
      {
        v15 = v11;
        if (v12 == v10)
          v15 = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, v54, a2);
        if (v15 >> 16 >= v53)
        {
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
          goto LABEL_124;
        }
        if ((v15 & 1) == 0)
          _StringGuts.scalarAlignSlow(_:)(v15, v54, a2);
      }
      else if (v11 >> 16 >= v53)
      {
        goto LABEL_117;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        swift_bridgeObjectRetain();
      }
      else if ((a2 & 0x2000000000000000) != 0)
      {
        v55 = v54;
        v56 = v49;
        swift_bridgeObjectRetain();
        _decodeScalar(_:startingAt:)();
      }
      else
      {
        if ((v54 & 0x1000000000000000) == 0)
          _StringObject.sharedUTF8.getter();
        swift_bridgeObjectRetain();
        _decodeScalar(_:startingAt:)();
      }
      v16 = v50;
      Unicode.Scalar.properties.getter();
      v17 = Unicode.Scalar.Properties.isWhitespace.getter();
      (*(void (**)(char *, uint64_t))(v51 + 8))(v16, v52);
      swift_bridgeObjectRelease();
      if ((v17 & 1) == 0)
        goto LABEL_49;
      if (v14)
      {
        if (v12 == v10)
          v11 = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, v54, a2);
        if (v53 <= v11 >> 16)
          goto LABEL_118;
        if ((v11 & 1) == 0)
          v11 = v11 & 0xC | _StringGuts.scalarAlignSlow(_:)(v11, v54, a2) & 0xFFFFFFFFFFFFFFF3 | 1;
      }
      else if (v53 <= v11 >> 16)
      {
        goto LABEL_119;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        v11 = String.UnicodeScalarView._foreignIndex(after:)();
      }
      else
      {
        v18 = v11 >> 16;
        if ((a2 & 0x2000000000000000) != 0)
        {
          v55 = v54;
          v56 = v49;
          v20 = *((unsigned __int8 *)&v55 + v18);
        }
        else
        {
          v19 = (uint64_t)v48;
          if ((v54 & 0x1000000000000000) == 0)
            v19 = _StringObject.sharedUTF8.getter();
          v20 = *(unsigned __int8 *)(v19 + v18);
        }
        v21 = (char)v20;
        v22 = __clz(v20 ^ 0xFF) - 24;
        if (v21 >= 0)
          LOBYTE(v22) = 1;
        v11 = ((v18 + v22) << 16) | 5;
      }
      v9 = v11 >> 14;
      if (v11 >> 14 >= v8)
        goto LABEL_49;
    }
  }
  v11 = 15;
LABEL_49:
  LOBYTE(v12) = v47[0];
  v23 = 11;
  if (LODWORD(v47[0]))
    v23 = 7;
  if (v9 == v8)
    return String.UnicodeScalarView.subscript.getter();
  result = _StringGuts.validateInclusiveScalarIndex(_:)(v23 | (v53 << 16), v54, a2);
  if (result < 0x4000)
  {
LABEL_124:
    __break(1u);
LABEL_125:
    result = String.UnicodeScalarView._foreignIndex(before:)();
    v34 = result;
    if (v9 < result >> 14)
      goto LABEL_67;
LABEL_126:
    if (v8 >= v9)
      return String.UnicodeScalarView.subscript.getter();
    __break(1u);
LABEL_130:
    __break(1u);
    return result;
  }
  v25 = result;
  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_125;
  if ((a2 & 0x2000000000000000) != 0)
  {
    v55 = v54;
    v56 = a2 & 0xFFFFFFFFFFFFFFLL;
    v30 = (char *)&v55 + (result >> 16);
    if ((*(v30 - 1) & 0xC0) == 0x80)
    {
      v27 = 0;
      v31 = v30 - 2;
      do
        v32 = v31[v27--] & 0xC0;
      while (v32 == 128);
      goto LABEL_64;
    }
  }
  else
  {
    if ((v54 & 0x1000000000000000) != 0)
      result = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    else
      result = _StringObject.sharedUTF8.getter();
    v26 = (v25 >> 16) + result;
    if ((*(_BYTE *)(v26 - 1) & 0xC0) == 0x80)
    {
      v27 = 0;
      v28 = v26 - 2;
      do
        v29 = *(_BYTE *)(v28 + v27--) & 0xC0;
      while (v29 == 128);
LABEL_64:
      v33 = 1 - v27;
      goto LABEL_66;
    }
  }
  v33 = 1;
LABEL_66:
  v34 = (v25 - (v33 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
  if (v9 >= v34 >> 14)
    goto LABEL_126;
LABEL_67:
  v35 = 4 << v12;
  v8 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v48 = (char *)&v54 + 6;
  v49 = a2 & 0xFFFFFFFFFFFFFFLL;
  v36 = v50;
  while (1)
  {
    v12 = v34 & 0xC;
    v37 = (v34 & 1) == 0 || v12 == v35;
    v38 = v37;
    if (v37)
    {
      v39 = v34;
      if (v12 == v35)
        v39 = _StringGuts._slowEnsureMatchingEncoding(_:)(v34, v54, a2);
      if (v39 >> 16 >= v53)
        goto LABEL_120;
      if ((v39 & 1) == 0)
        _StringGuts.scalarAlignSlow(_:)(v39, v54, a2);
    }
    else if (v34 >> 16 >= v53)
    {
      goto LABEL_121;
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
      _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((a2 & 0x2000000000000000) != 0)
      {
        v55 = v54;
        v56 = v49;
      }
      else if ((v54 & 0x1000000000000000) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }
      _decodeScalar(_:startingAt:)();
    }
    Unicode.Scalar.properties.getter();
    v40 = Unicode.Scalar.Properties.isWhitespace.getter();
    result = (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v36, v52);
    if ((v40 & 1) == 0)
      break;
    if (v38)
    {
      if (v12 == v35)
        v34 = _StringGuts._slowEnsureMatchingEncoding(_:)(v34, v54, a2);
      if (v53 < v34 >> 16)
        goto LABEL_122;
      if ((v34 & 1) == 0)
        v34 = v34 & 0xC | _StringGuts.scalarAlignSlow(_:)(v34, v54, a2) & 0xFFFFFFFFFFFFFFF3 | 1;
    }
    else if (v53 < v34 >> 16)
    {
      goto LABEL_123;
    }
    if (v34 < 0x4000)
    {
      __break(1u);
      goto LABEL_116;
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
      v34 = String.UnicodeScalarView._foreignIndex(before:)();
    }
    else
    {
      v41 = v34 >> 16;
      if ((a2 & 0x2000000000000000) != 0)
      {
        v55 = v54;
        v56 = v49;
        if ((*((_BYTE *)&v55 + v41 - 1) & 0xC0) == 0x80)
        {
          v43 = 0;
          do
            v45 = v48[v41 + v43--] & 0xC0;
          while (v45 == 128);
          goto LABEL_110;
        }
      }
      else
      {
        v42 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if ((v54 & 0x1000000000000000) == 0)
          v42 = _StringObject.sharedUTF8.getter();
        if ((*(_BYTE *)(v41 + v42 - 1) & 0xC0) == 0x80)
        {
          v43 = 0;
          do
            v44 = *(_BYTE *)(v42 + v41 - 2 + v43--) & 0xC0;
          while (v44 == 128);
LABEL_110:
          v46 = 1 - v43;
          goto LABEL_112;
        }
      }
      v46 = 1;
LABEL_112:
      v34 = (v34 - (v46 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
    }
  }
  if (v9 > v34 >> 14)
    goto LABEL_130;
  specialized ClosedRange.relative<A>(to:)(v54, a2, v11, v34);
  return String.UnicodeScalarView.subscript.getter();
}

uint64_t specialized ClosedRange.relative<A>(to:)(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  _StringGuts.validateScalarIndex(_:)(a4, a1, a2);
  if ((a2 & 0x1000000000000000) != 0)
  {
    String.UnicodeScalarView._foreignIndex(after:)();
  }
  else if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0)
  {
    _StringObject.sharedUTF8.getter();
  }
  return a3;
}

uint64_t NumberFormatStyleConfiguration.Precision.integerAndFractionalLengthSkeleton(minInt:maxInt:minFrac:maxFrac:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, char a8)
{
  int v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v16;
  Swift::String v17;

  v11 = a4 & 1;
  if ((a6 & 1) != 0)
  {
    if ((a8 & 1) != 0)
      goto LABEL_9;
    if (a7)
    {
      a5 = 0;
LABEL_8:
      v12._countAndFlagsBits = NumberFormatStyleConfiguration.Precision.fractionalStem(min:max:)(a5, a7, a8 & 1);
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
LABEL_9:
      if ((a2 & 1) == 0)
        goto LABEL_13;
LABEL_12:
      if (v11)
        return 0;
      goto LABEL_13;
    }
  }
  else if ((a8 & 1) != 0 || a7)
  {
    goto LABEL_8;
  }
  v13._object = (void *)0x8000000182306230;
  v13._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v13);
  if ((a2 & 1) != 0)
    goto LABEL_12;
LABEL_13:
  swift_bridgeObjectRetain();
  v14 = String.count.getter();
  swift_bridgeObjectRelease();
  if (v14 >= 1)
  {
    v15._countAndFlagsBits = 32;
    v15._object = (void *)0xE100000000000000;
    String.append(_:)(v15);
  }
  if ((a2 & 1) != 0)
    v16 = 0;
  else
    v16 = a1;
  v17._countAndFlagsBits = NumberFormatStyleConfiguration.Precision.integerStem(min:max:)(v16, a3, v11);
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t outlined destroy of NumberFormatStyleConfiguration.Collection(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of NumberFormatStyleConfiguration.Collection(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t NumberFormatStyleConfiguration.Precision.fractionalStem(min:max:)(uint64_t a1, uint64_t a2, char a3)
{
  Swift::String v6;
  uint64_t result;
  Swift::String v8;
  Swift::String v9;

  v6._countAndFlagsBits = MEMORY[0x186DA4928](48, 0xE100000000000000, a1);
  String.append(_:)(v6);
  result = swift_bridgeObjectRelease();
  if ((a3 & 1) != 0)
  {
    v8._countAndFlagsBits = 43;
    v8._object = (void *)0xE100000000000000;
    String.append(_:)(v8);
  }
  else
  {
    if (a2 < a1)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    if (__OFSUB__(a2, a1))
    {
      __break(1u);
      return result;
    }
    v9._countAndFlagsBits = MEMORY[0x186DA4928](35, 0xE100000000000000, a2 - a1);
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
  }
  return 46;
}

uint64_t NumberFormatStyleConfiguration.Precision.integerStem(min:max:)(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  _QWORD v8[2];

  v3 = result;
  strcpy((char *)v8, "integer-width/");
  HIBYTE(v8[1]) = -18;
  if ((a3 & 1) != 0)
  {
    v5._countAndFlagsBits = 43;
    v5._object = (void *)0xE100000000000000;
    String.append(_:)(v5);
LABEL_5:
    v6._countAndFlagsBits = MEMORY[0x186DA4928](48, 0xE100000000000000, v3);
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    return v8[0];
  }
  if (a2 | result)
  {
    if (a2 < result)
      return 0;
    if (__OFSUB__(a2, result))
    {
      __break(1u);
      return result;
    }
    v7._countAndFlagsBits = MEMORY[0x186DA4928](35, 0xE100000000000000, a2 - result);
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  v4._countAndFlagsBits = 42;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return v8[0];
}

void specialized NSDecimal.init(_:)(double a1)
{
  int v1;
  uint64_t v2;
  double v3;
  unsigned __int8 v4;
  _BOOL8 v5;
  int v6;
  __int128 v7;
  _QWORD v8[3];

  if ((~*(_QWORD *)&a1 & 0x7FF0000000000000) == 0)
  {
    if ((*(_QWORD *)&a1 & 0xFFFFFFFFFFFFFLL) != 0)
    {
      *(_OWORD *)((char *)v8 + 4) = 0uLL;
      _So9NSDecimala__exponent_setter(0, v8);
      _So9NSDecimala__length_setter(0, v8);
      _So9NSDecimala__isNegative_setter(1, v8);
      _So9NSDecimala__isCompact_setter_0(0, v8);
      _So9NSDecimala__reserved_setter(v8);
      v1 = v8[2];
      v2 = v8[1];
LABEL_4:
      v8[1] = v2;
      LODWORD(v8[2]) = v1;
      return;
    }
    __break(1u);
    goto LABEL_26;
  }
  if (a1 == 0.0)
  {
    memset(v8, 0, 20);
    return;
  }
  v3 = -a1;
  if (a1 >= 0.0)
    v3 = a1;
  memset(v8, 0, 20);
  v4 = 0;
  if (v3 < 1.84467441e19)
  {
    do
    {
      v3 = v3 * 10.0;
      --v4;
      if (v3 >= 1.84467441e19)
        goto LABEL_13;
    }
    while (v4 != 128);
LABEL_18:
    v7 = 0uLL;
    _So9NSDecimala__exponent_setter(0, &v6);
    _So9NSDecimala__length_setter(0, &v6);
    _So9NSDecimala__isNegative_setter(1, &v6);
    _So9NSDecimala__isCompact_setter_0(0, &v6);
    _So9NSDecimala__reserved_setter(&v6);
    v1 = HIDWORD(v7);
    v2 = *(_QWORD *)((char *)&v7 + 4);
    goto LABEL_4;
  }
LABEL_13:
  if (v3 >= 1.84467441e19)
  {
    while (1)
    {
      v3 = v3 / 10.0;
      ++v4;
      if (v3 < 1.84467441e19)
        break;
      if (v4 == 127)
        goto LABEL_18;
    }
  }
  if (v3 > 1.84467441e19)
LABEL_23:
    JUMPOUT(0x1819159E8);
  if ((~*(_QWORD *)&v3 & 0x7FF0000000000000) == 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v3 <= -1.0)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v3 < 1.84467441e19)
  {
    if (!(unint64_t)v3)
    {
      v5 = a1 < 0.0;
      _So9NSDecimala__length_setter(0, v8);
      _So9NSDecimala__isNegative_setter(v5, v8);
      _So9NSDecimala__isCompact_setter_0(0, v8);
      _So9NSDecimala__exponent_setter((char)v4, v8);
      NSDecimal.compact()();
      return;
    }
    goto LABEL_23;
  }
LABEL_28:
  __break(1u);
}

uint64_t _So9NSDecimala__length_setter(uint64_t result, _DWORD *a2)
{
  *a2 = *a2 & 0xFFFFF0FF | ((result & 0xF) << 8);
  return result;
}

uint64_t _So9NSDecimala__isNegative_setter(uint64_t result, _DWORD *a2)
{
  *a2 = *a2 & 0xFFFFEFFF | ((result & 1) << 12);
  return result;
}

_DWORD *_So9NSDecimala__isNegative_setter_0(_DWORD *result)
{
  *result |= 0x1000u;
  return result;
}

_DWORD *_So9NSDecimala__isCompact_setter(_DWORD *result)
{
  *result &= ~0x2000u;
  return result;
}

uint64_t _So9NSDecimala__isCompact_setter_0(uint64_t result, _DWORD *a2)
{
  *a2 = *a2 & 0xFFFFDFFF | ((result & 1) << 13);
  return result;
}

uint64_t _So9NSDecimala__exponent_setter(uint64_t result, _BYTE *a2)
{
  *a2 = result;
  return result;
}

uint64_t StringProtocol.trimmingCharacters(in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __n128 v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v4 = MEMORY[0x1E0C80A78](a1);
  v7 = *v6;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16))((char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v2, a2, v4);
  v9 = String.init<A>(_:)();
  specialized BidirectionalCollection<>._trimmingCharacters(in:)(v7, v9, v10);
  swift_bridgeObjectRelease();
  return String.init(_:)();
}

uint64_t specialized BidirectionalCollection<>._trimmingCharacters(in:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  int v13;
  unint64_t v14;
  UTF32Char v15;
  int IsLongCharacterMember;
  unint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  BOOL v34;
  unint64_t v35;
  UTF32Char v36;
  UTF32Char v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;

  v4 = a2;
  v49 = a1;
  if ((a3 & 0x2000000000000000) != 0)
    v5 = HIBYTE(a3) & 0xF;
  else
    v5 = a2 & 0xFFFFFFFFFFFFLL;
  v6 = (a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0;
  v7 = 4 * v5;
  v45 = v6;
  v8 = 0;
  if (v5)
  {
    v9 = 4 << v6;
    v46 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
    v47 = a3 & 0xFFFFFFFFFFFFFFLL;
    v10 = 15;
    while (1)
    {
      v11 = v10 & 0xC;
      v12 = (v10 & 1) == 0 || v11 == v9;
      v13 = v12;
      if (v12)
      {
        v14 = v10;
        if (v11 == v9)
          v14 = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, v4, a3);
        if (v14 >> 16 >= v5)
        {
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
          goto LABEL_133;
        }
        if ((v14 & 1) == 0)
          _StringGuts.scalarAlignSlow(_:)(v14, v4, a3);
      }
      else if (v10 >> 16 >= v5)
      {
        goto LABEL_125;
      }
      if ((a3 & 0x1000000000000000) != 0)
      {
        v15 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        swift_bridgeObjectRetain();
      }
      else if ((a3 & 0x2000000000000000) != 0)
      {
        v50 = v4;
        v51 = v47;
        swift_bridgeObjectRetain();
        v15 = _decodeScalar(_:startingAt:)();
      }
      else
      {
        if ((v4 & 0x1000000000000000) == 0)
          _StringObject.sharedUTF8.getter();
        swift_bridgeObjectRetain();
        v15 = _decodeScalar(_:startingAt:)();
        v4 = a2;
        v7 = 4 * v5;
      }
      IsLongCharacterMember = CFCharacterSetIsLongCharacterMember(*(CFCharacterSetRef *)(v49 + 16), v15);
      swift_bridgeObjectRelease();
      if (IsLongCharacterMember)
      {
        if (v13)
        {
          if (v11 == v9)
          {
            v10 = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, v4, a3);
            if (v5 <= v10 >> 16)
              goto LABEL_127;
          }
          else if (v5 <= v10 >> 16)
          {
            goto LABEL_127;
          }
          if ((v10 & 1) == 0)
            v10 = v10 & 0xC | _StringGuts.scalarAlignSlow(_:)(v10, v4, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
        }
        else if (v5 <= v10 >> 16)
        {
          goto LABEL_126;
        }
        if ((a3 & 0x1000000000000000) != 0)
        {
          v10 = String.UnicodeScalarView._foreignIndex(after:)();
        }
        else
        {
          v17 = v10 >> 16;
          if ((a3 & 0x2000000000000000) != 0)
          {
            v50 = v4;
            v51 = v47;
            v19 = *((unsigned __int8 *)&v50 + v17);
          }
          else
          {
            v18 = v46;
            if ((v4 & 0x1000000000000000) == 0)
              v18 = _StringObject.sharedUTF8.getter();
            v19 = *(unsigned __int8 *)(v18 + v17);
          }
          v20 = (char)v19;
          v21 = __clz(v19 ^ 0xFF) - 24;
          if (v20 >= 0)
            LOBYTE(v21) = 1;
          v10 = ((v17 + v21) << 16) | 5;
        }
        v8 = v10 >> 14;
        if (v10 >> 14 < v7)
          continue;
      }
      break;
    }
  }
  LOBYTE(v9) = v45;
  v22 = 11;
  if (v45)
    v22 = 7;
  if (v8 == v7)
    return String.UnicodeScalarView.subscript.getter();
  v23 = _StringGuts.validateInclusiveScalarIndex(_:)(v22 | (v5 << 16), v4, a3);
  if (v23 < 0x4000)
    goto LABEL_132;
  v24 = v23;
  if ((a3 & 0x1000000000000000) != 0)
  {
LABEL_133:
    v31 = String.UnicodeScalarView._foreignIndex(before:)();
    if (v8 < v31 >> 14)
      goto LABEL_68;
    goto LABEL_134;
  }
  v25 = v23 >> 16;
  if ((a3 & 0x2000000000000000) != 0)
  {
    v50 = v4;
    v51 = a3 & 0xFFFFFFFFFFFFFFLL;
    if ((*((_BYTE *)&v50 + v25 - 1) & 0xC0) == 0x80)
    {
      v27 = 0;
      do
        v29 = *((_BYTE *)&v50 + v25 + v27-- - 2) & 0xC0;
      while (v29 == 128);
      goto LABEL_65;
    }
  }
  else
  {
    if ((v4 & 0x1000000000000000) != 0)
      v26 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
    else
      v26 = _StringObject.sharedUTF8.getter();
    if ((*(_BYTE *)(v25 + v26 - 1) & 0xC0) == 0x80)
    {
      v27 = 0;
      do
        v28 = *(_BYTE *)(v25 + v26 - 2 + v27--) & 0xC0;
      while (v28 == 128);
LABEL_65:
      v30 = 1 - v27;
      goto LABEL_67;
    }
  }
  v30 = 1;
LABEL_67:
  v31 = (v24 - (v30 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
  if (v8 < v31 >> 14)
  {
LABEL_68:
    v32 = 4 << v9;
    while (1)
    {
      v33 = v31 & 0xC;
      v34 = (v31 & 1) == 0 || v33 == v32;
      LODWORD(v9) = v34;
      if (v34)
      {
        v35 = v31;
        if (v33 == v32)
          v35 = _StringGuts._slowEnsureMatchingEncoding(_:)(v31, v4, a3);
        v4 = v35 >> 16;
        if (v35 >> 16 >= v5)
          goto LABEL_128;
        if ((v35 & 1) == 0)
          _StringGuts.scalarAlignSlow(_:)(v35, a2, a3);
      }
      else
      {
        v4 = v31 >> 16;
        if (v31 >> 16 >= v5)
          goto LABEL_129;
      }
      if ((a3 & 0x1000000000000000) != 0)
      {
        v4 = a2;
        v37 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((a3 & 0x2000000000000000) == 0)
        {
          if ((a2 & 0x1000000000000000) == 0)
            _StringObject.sharedUTF8.getter();
          v36 = _decodeScalar(_:startingAt:)();
          v4 = a2;
          goto LABEL_92;
        }
        v50 = a2;
        v51 = a3 & 0xFFFFFFFFFFFFFFLL;
        v4 = a2;
        v37 = _decodeScalar(_:startingAt:)();
      }
      v36 = v37;
LABEL_92:
      if (!CFCharacterSetIsLongCharacterMember(*(CFCharacterSetRef *)(v49 + 16), v36))
      {
        if (v8 > v31 >> 14)
          goto LABEL_138;
        _StringGuts.validateScalarIndex(_:)(v31, v4, a3);
        if ((a3 & 0x1000000000000000) != 0)
        {
          String.UnicodeScalarView._foreignIndex(after:)();
        }
        else if ((a3 & 0x2000000000000000) != 0)
        {
          v50 = v4;
          v51 = a3 & 0xFFFFFFFFFFFFFFLL;
        }
        else if ((v4 & 0x1000000000000000) == 0)
        {
          goto LABEL_139;
        }
        return String.UnicodeScalarView.subscript.getter();
      }
      if ((_DWORD)v9)
      {
        if (v33 == v32)
        {
          v31 = _StringGuts._slowEnsureMatchingEncoding(_:)(v31, v4, a3);
          if (v5 < v31 >> 16)
            goto LABEL_131;
        }
        else if (v5 < v31 >> 16)
        {
          goto LABEL_131;
        }
        if ((v31 & 1) == 0)
          v31 = v31 & 0xC | _StringGuts.scalarAlignSlow(_:)(v31, v4, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
      }
      else if (v5 < v31 >> 16)
      {
        goto LABEL_130;
      }
      if (v31 < 0x4000)
      {
        __break(1u);
        goto LABEL_124;
      }
      if ((a3 & 0x1000000000000000) != 0)
      {
        v31 = String.UnicodeScalarView._foreignIndex(before:)();
      }
      else
      {
        v38 = v31 >> 16;
        if ((a3 & 0x2000000000000000) != 0)
        {
          v50 = v4;
          v51 = a3 & 0xFFFFFFFFFFFFFFLL;
          if ((*((_BYTE *)&v50 + v38 - 1) & 0xC0) == 0x80)
          {
            v40 = 0;
            do
              v42 = *((_BYTE *)&v49 + v38 + v40-- + 6) & 0xC0;
            while (v42 == 128);
            goto LABEL_111;
          }
        }
        else
        {
          v39 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((v4 & 0x1000000000000000) == 0)
            v39 = _StringObject.sharedUTF8.getter();
          if ((*(_BYTE *)(v38 + v39 - 1) & 0xC0) == 0x80)
          {
            v40 = 0;
            do
              v41 = *(_BYTE *)(v39 + v38 - 2 + v40--) & 0xC0;
            while (v41 == 128);
LABEL_111:
            v43 = 1 - v40;
            goto LABEL_113;
          }
        }
        v43 = 1;
LABEL_113:
        v31 = (v31 - (v43 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
      }
    }
  }
LABEL_134:
  if (4 * v5 < v8)
  {
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    _StringObject.sharedUTF8.getter();
  }
  return String.UnicodeScalarView.subscript.getter();
}

unint64_t _StringGuts.validateInclusiveScalarIndex(_:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5)
    goto LABEL_9;
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 < result >> 16)
  {
    __break(1u);
LABEL_9:
    result = _StringGuts.validateInclusiveSubscalarIndex(_:)(result, a2, a3);
    if ((result & 1) == 0)
      return result & 0xC | _StringGuts.scalarAlignSlow(_:)(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
  }
  return result;
}

unint64_t _StringGuts.validateScalarIndex(_:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5)
    goto LABEL_9;
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 <= result >> 16)
  {
    __break(1u);
LABEL_9:
    result = _StringGuts.validateSubscalarIndex(_:)(result, a2, a3);
    if ((result & 1) == 0)
      return result & 0xC | _StringGuts.scalarAlignSlow(_:)(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
  }
  return result;
}

uint64_t JSONDecoder.nonConformingFloatDecodingStrategy.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  v8 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_optionsLock);
  swift_retain();
  os_unfair_lock_lock(v8 + 4);
  swift_release();
  v9 = (_QWORD *)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options);
  v10 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 40);
  v11 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 48);
  v9[5] = v2;
  v9[6] = v3;
  v9[7] = v4;
  v9[8] = v5;
  v9[9] = v6;
  v9[10] = v7;
  outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(v10, v11);
  swift_retain();
  os_unfair_lock_unlock(v8 + 4);
  return swift_release();
}

void Date.FormatStyle.DateFieldCollection.formatterTemplate(overridingDayPeriodWithLocale:)()
{
  uint64_t v0;
  char v1;
  _BYTE v2[65];

  outlined init with take of LocalePreferences?(v0, (uint64_t)&v1, (uint64_t *)&demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.EraOption?);
  outlined init with take of LocalePreferences?((uint64_t)&v1, (uint64_t)v2, (uint64_t *)&demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.EraOption?);
  __asm { BR              X10 }
}

uint64_t sub_181916574(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,unsigned __int8 a25)
{
  uint64_t v25;
  uint64_t v26;
  Swift::String v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;

  v27._countAndFlagsBits = 71;
  v27._object = (void *)0xE100000000000000;
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?(v25 + 8, (uint64_t)&a22, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.YearOption?);
  outlined init with take of LocalePreferences?((uint64_t)&a22, (uint64_t)&a24, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.YearOption?);
  if (a25 == 255)
  {
    v28 = 0;
    v30 = 0xE000000000000000;
  }
  else
  {
    Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(a24, a25);
    v30 = v29;
  }
  v31 = v30;
  String.append(_:)(*(Swift::String *)&v28);
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?(v25 + 17, (uint64_t)&a21, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.QuarterOption?);
  outlined init with take of LocalePreferences?((uint64_t)&a21, v26 - 99, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.QuarterOption?);
  return ((uint64_t (*)(_QWORD))((char *)sub_181916660 + 4 * byte_1820FCE24[*(unsigned __int8 *)(v26 - 99)]))(0);
}

uint64_t sub_181916660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20)
{
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;

  v22._countAndFlagsBits = 81;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?(v20 + 18, (uint64_t)&a20, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.MonthOption?);
  outlined init with take of LocalePreferences?((uint64_t)&a20, v21 - 98, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.MonthOption?);
  return ((uint64_t (*)(_QWORD))((char *)sub_181916708 + 4 * byte_1820FCE2A[*(unsigned __int8 *)(v21 - 98)]))(0);
}

uint64_t sub_181916708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;

  v22._countAndFlagsBits = 77;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?(v20 + 19, (uint64_t)&a20, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.WeekOption?);
  outlined init with take of LocalePreferences?((uint64_t)&a20, v21 - 97, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.WeekOption?);
  return ((uint64_t (*)(_QWORD))((char *)sub_1819167B0 + 4 * byte_1820FCE30[*(unsigned __int8 *)(v21 - 97)]))(0);
}

uint64_t sub_1819167B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v22._countAndFlagsBits = 119;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?(v20 + 24, (uint64_t)&a20, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.DayOption?);
  outlined init with take of LocalePreferences?((uint64_t)&a20, v21 - 96, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.DayOption?);
  if ((*(_BYTE *)(v21 - 87) & 1) != 0)
  {
    v23 = 0;
    v24 = 0xE000000000000000;
  }
  else
  {
    outlined init with take of Date.FormatStyle.Symbol.SymbolType.DayOption((uint64_t *)(v21 - 96), v21 - 80);
    outlined init with take of Date.FormatStyle.Symbol.SymbolType.DayOption((uint64_t *)(v21 - 80), v21 - 64);
    v25 = *(_QWORD *)(v21 - 64);
    if (*(_BYTE *)(v21 - 56) == 1)
    {
      v26 = 0xE200000000000000;
      v27 = 25700;
      if (v25 != 1)
      {
        v27 = 70;
        v26 = 0xE100000000000000;
      }
      if (v25)
        v23 = v27;
      else
        v23 = 100;
      if (v25)
        v24 = v26;
      else
        v24 = 0xE100000000000000;
    }
    else
    {
      if (v25 >= 10)
        v25 = 10;
      if (v25 <= 1)
        v28 = 1;
      else
        v28 = v25;
      v23 = MEMORY[0x186DA4928](103, 0xE100000000000000, v28);
      v24 = v29;
    }
  }
  v30 = v24;
  String.append(_:)(*(Swift::String *)&v23);
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?(v20 + 34, (uint64_t)&a19, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.DayOfYearOption?);
  outlined init with take of LocalePreferences?((uint64_t)&a19, v21 - 54, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.DayOfYearOption?);
  return ((uint64_t (*)(_QWORD))((char *)sub_181916900 + 4 * byte_1820FCE34[*(unsigned __int8 *)(v21 - 54)]))(0);
}

uint64_t sub_181916900(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18)
{
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;

  v20._countAndFlagsBits = 68;
  v20._object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?(v18 + 35, (uint64_t)&a18, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.WeekdayOption?);
  outlined init with take of LocalePreferences?((uint64_t)&a18, v19 - 53, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.WeekdayOption?);
  return ((uint64_t (*)(_QWORD))((char *)sub_181916984 + 4 * byte_1820FCE38[*(unsigned __int8 *)(v19 - 53)]))(0);
}

uint64_t sub_181916984(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, char a17, char a18)
{
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;

  v20._countAndFlagsBits = 4539717;
  v20._object = (void *)0xE300000000000000;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?(v18 + 36, (uint64_t)&a18, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.DayPeriodOption?);
  outlined init with take of LocalePreferences?((uint64_t)&a18, v19 - 52, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.DayPeriodOption?);
  return ((uint64_t (*)(_QWORD))((char *)sub_181916A40 + 4 * byte_1820FCE3F[*(unsigned __int8 *)(v19 - 52)]))(0);
}

uint64_t sub_181916A40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  unsigned __int8 v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  _BYTE v36[11];
  char v37;
  _BYTE v38[164];

  v4._countAndFlagsBits = 97;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v32 = v1;
  v33 = v2;
  v5 = Date.FormatStyle.DateFieldCollection.preferredHour(withLocale:)(&v32);
  v6 = 0xE000000000000000;
  if (v5 == 14)
  {
    v7 = 0;
    v8 = 0xE000000000000000;
  }
  else
  {
    v7 = Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter(v5);
    v8 = v9;
  }
  v10 = v8;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?(v0 + 38, (uint64_t)v38, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.MinuteOption?);
  outlined init with take of LocalePreferences?((uint64_t)v38, v3 - 51, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.MinuteOption?);
  v11 = *(unsigned __int8 *)(v3 - 51);
  v12 = 28013;
  if ((v11 & 1) != 0)
  {
    v13 = 0xE200000000000000;
  }
  else
  {
    v12 = 109;
    v13 = 0xE100000000000000;
  }
  if (v11 == 2)
    v14 = 0;
  else
    v14 = v12;
  if (v11 == 2)
    v15 = 0xE000000000000000;
  else
    v15 = v13;
  v16 = v15;
  String.append(_:)(*(Swift::String *)&v14);
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?(v0 + 39, (uint64_t)&v37, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.SecondOption?);
  outlined init with take of LocalePreferences?((uint64_t)&v37, v3 - 50, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.SecondOption?);
  v17 = *(unsigned __int8 *)(v3 - 50);
  v18 = 29555;
  if ((v17 & 1) != 0)
  {
    v19 = 0xE200000000000000;
  }
  else
  {
    v18 = 115;
    v19 = 0xE100000000000000;
  }
  if (v17 == 2)
    v20 = 0;
  else
    v20 = v18;
  if (v17 == 2)
    v21 = 0xE000000000000000;
  else
    v21 = v19;
  v22 = v21;
  String.append(_:)(*(Swift::String *)&v20);
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?(v0 + 40, (uint64_t)v36, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.SecondFractionOption?);
  outlined init with take of LocalePreferences?((uint64_t)v36, (uint64_t)&v32, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.SecondFractionOption?);
  if (v33 == 255)
  {
    v23 = 0;
  }
  else
  {
    v23 = Date.FormatStyle.Symbol.SymbolType.SecondFractionOption.rawValue.getter(v32, v33 & 1);
    v6 = v24;
  }
  v25 = v6;
  String.append(_:)(*(Swift::String *)&v23);
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?(v0 + 49, (uint64_t)&v35, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption?);
  outlined init with take of LocalePreferences?((uint64_t)&v35, v3 - 49, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption?);
  v26 = *(unsigned __int8 *)(v3 - 49);
  if (v26 == 12)
  {
    v27 = 0;
    v28 = 0xE000000000000000;
  }
  else
  {
    v27 = Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter(v26);
    v28 = v29;
  }
  v30 = v28;
  String.append(_:)(*(Swift::String *)&v27);
  swift_bridgeObjectRelease();
  return v34;
}

BOOL specialized static Date.FormatStyle.DateFieldCollection.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  _BOOL8 result;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  int v26;
  int v27;
  char v28;
  int v29;
  int v30;
  char v31;
  int v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  int v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  int v46;
  int v47;
  char v48;
  int v49;
  int v50;
  char v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  int v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  int v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  int v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;

  v4 = *a1;
  v5 = *a2;
  if (v4 == 3)
  {
    if (v5 != 3)
      return 0;
  }
  else
  {
    if (v5 == 3)
      return 0;
    v6 = 0xE400000000000000;
    v7 = 1195853639;
    if (v4 != 1)
    {
      v7 = 0x4747474747;
      v6 = 0xE500000000000000;
    }
    if (*a1)
      v8 = v7;
    else
      v8 = 71;
    if (v4)
      v9 = v6;
    else
      v9 = 0xE100000000000000;
    v10 = 0xE400000000000000;
    v11 = 1195853639;
    if (v5 != 1)
    {
      v11 = 0x4747474747;
      v10 = 0xE500000000000000;
    }
    if (*a2)
      v12 = v11;
    else
      v12 = 71;
    if (*a2)
      v13 = v10;
    else
      v13 = 0xE100000000000000;
    if (v8 == v12 && v9 == v13)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = 0;
      if ((v14 & 1) == 0)
        return result;
    }
  }
  v16 = a1[16];
  v17 = a2[16];
  if (v16 == 255)
  {
    if (v17 != 255)
      return 0;
  }
  else
  {
    if (v17 == 255)
      return 0;
    v18 = *((_QWORD *)a2 + 1);
    Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(*((_QWORD *)a1 + 1), v16);
    v20 = v19;
    v22 = v21;
    Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(v18, v17);
    if (v20 == v24 && v22 == v23)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = 0;
      if ((v25 & 1) == 0)
        return result;
    }
  }
  v26 = a1[17];
  v27 = a2[17];
  if (v26 == 5)
  {
    if (v27 != 5)
      return 0;
  }
  else
  {
    if (v27 == 5)
      return 0;
    specialized == infix<A>(_:_:)(v26);
    if ((v28 & 1) == 0)
      return 0;
  }
  v29 = a1[18];
  v30 = a2[18];
  if (v29 == 5)
  {
    if (v30 != 5)
      return 0;
  }
  else
  {
    if (v30 == 5)
      return 0;
    specialized == infix<A>(_:_:)(v29);
    if ((v31 & 1) == 0)
      return 0;
  }
  v32 = a1[19];
  v33 = a2[19];
  if (v32 == 3)
  {
    if (v33 != 3)
      return 0;
  }
  else
  {
    if (v33 == 3)
      return 0;
    if (a1[19])
    {
      if (v32 == 1)
      {
        v34 = 0xE200000000000000;
        v35 = 30583;
      }
      else
      {
        v34 = 0xE100000000000000;
        v35 = 87;
      }
    }
    else
    {
      v34 = 0xE100000000000000;
      v35 = 119;
    }
    if (a2[19])
    {
      if (v33 == 1)
      {
        v36 = 0xE200000000000000;
        v37 = 30583;
      }
      else
      {
        v36 = 0xE100000000000000;
        v37 = 87;
      }
    }
    else
    {
      v36 = 0xE100000000000000;
      v37 = 119;
    }
    if (v35 == v37 && v34 == v36)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = 0;
      if ((v38 & 1) == 0)
        return result;
    }
  }
  if ((a1[33] & 1) != 0)
  {
    if (!a2[33])
      return 0;
  }
  else if ((a2[33] & 1) != 0
         || (specialized == infix<A>(_:_:)(*((_QWORD *)a1 + 3), a1[32] & 1, *((_QWORD *)a2 + 3), a2[32] & 1) & 1) == 0)
  {
    return 0;
  }
  v39 = a1[34];
  v40 = a2[34];
  if (v39 == 3)
  {
    if (v40 != 3)
      return 0;
  }
  else
  {
    if (v40 == 3)
      return 0;
    if (a1[34])
    {
      if (v39 == 1)
      {
        v41 = 0xE200000000000000;
        v42 = 17476;
      }
      else
      {
        v41 = 0xE300000000000000;
        v42 = 4473924;
      }
    }
    else
    {
      v41 = 0xE100000000000000;
      v42 = 68;
    }
    if (a2[34])
    {
      if (v40 == 1)
      {
        v43 = 0xE200000000000000;
        v44 = 17476;
      }
      else
      {
        v43 = 0xE300000000000000;
        v44 = 4473924;
      }
    }
    else
    {
      v43 = 0xE100000000000000;
      v44 = 68;
    }
    if (v42 == v44 && v41 == v43)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = 0;
      if ((v45 & 1) == 0)
        return result;
    }
  }
  v46 = a1[35];
  v47 = a2[35];
  if (v46 == 6)
  {
    if (v47 != 6)
      return 0;
  }
  else
  {
    if (v47 == 6)
      return 0;
    specialized == infix<A>(_:_:)(v46);
    if ((v48 & 1) == 0)
      return 0;
  }
  v49 = a1[36];
  v50 = a2[36];
  if (v49 == 9)
  {
    if (v50 != 9)
      return 0;
  }
  else
  {
    if (v50 == 9)
      return 0;
    specialized == infix<A>(_:_:)(v49);
    if ((v51 & 1) == 0)
      return 0;
  }
  v52 = a1[37];
  v53 = a2[37];
  if (v52 == 14)
  {
    if (v53 != 14)
      return 0;
  }
  else
  {
    if (v53 == 14)
      return 0;
    v54 = Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter(v52);
    v56 = v55;
    if (v54 == Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter(v53) && v56 == v57)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = 0;
      if ((v58 & 1) == 0)
        return result;
    }
  }
  v59 = a1[38];
  v60 = a2[38];
  if (v59 == 2)
  {
    if (v60 != 2)
      return 0;
  }
  else
  {
    if (v60 == 2)
      return 0;
    if ((v59 & 1) != 0)
      v61 = 28013;
    else
      v61 = 109;
    if ((v59 & 1) != 0)
      v62 = 0xE200000000000000;
    else
      v62 = 0xE100000000000000;
    if ((v60 & 1) != 0)
      v63 = 28013;
    else
      v63 = 109;
    if ((v60 & 1) != 0)
      v64 = 0xE200000000000000;
    else
      v64 = 0xE100000000000000;
    if (v61 == v63 && v62 == v64)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = 0;
      if ((v65 & 1) == 0)
        return result;
    }
  }
  v66 = a1[39];
  v67 = a2[39];
  if (v66 == 2)
  {
    if (v67 != 2)
      return 0;
  }
  else
  {
    if (v67 == 2)
      return 0;
    if ((v66 & 1) != 0)
      v68 = 29555;
    else
      v68 = 115;
    if ((v66 & 1) != 0)
      v69 = 0xE200000000000000;
    else
      v69 = 0xE100000000000000;
    if ((v67 & 1) != 0)
      v70 = 29555;
    else
      v70 = 115;
    if ((v67 & 1) != 0)
      v71 = 0xE200000000000000;
    else
      v71 = 0xE100000000000000;
    if (v68 == v70 && v69 == v71)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v72 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = 0;
      if ((v72 & 1) == 0)
        return result;
    }
  }
  v73 = a1[48];
  v74 = a2[48];
  if (v73 == 255)
  {
    if (v74 != 255)
      return 0;
  }
  else if (v74 == 255
         || (specialized == infix<A>(_:_:)(*((_QWORD *)a1 + 5), v73 & 1, *((_QWORD *)a2 + 5), v74 & 1) & 1) == 0)
  {
    return 0;
  }
  v75 = a1[49];
  v76 = a2[49];
  if (v75 == 12)
    return v76 == 12;
  if (v76 != 12)
  {
    v77 = Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter(v75);
    v79 = v78;
    if (v77 == Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter(v76) && v79 == v80)
    {
      swift_bridgeObjectRelease_n();
      return 1;
    }
    v81 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v81 & 1) != 0)
      return 1;
  }
  return 0;
}

void Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1819173B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = 10;
  if (a1 < 10)
    v1 = a1;
  if (v1 <= 1)
    v2 = 1;
  else
    v2 = v1;
  return MEMORY[0x186DA4928](121, 0xE100000000000000, v2);
}

uint64_t Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181917460 + 4 * byte_182169EB0[a1]))(106, 0xE100000000000000);
}

uint64_t sub_181917460()
{
  return 27242;
}

uint64_t sub_18191746C()
{
  return 6974058;
}

uint64_t sub_18191747C()
{
  return 1785358954;
}

uint64_t sub_18191748C()
{
  return 0x6A6A6A6A6ALL;
}

uint64_t sub_1819174A0()
{
  return 0x6A6A6A6A6A6ALL;
}

uint64_t sub_1819174B4()
{
  return 74;
}

uint64_t sub_1819174BC()
{
  return 19018;
}

uint64_t sub_1819174C8()
{
  return 67;
}

uint64_t sub_1819174D0()
{
  return 17219;
}

uint64_t sub_1819174DC()
{
  return 4408131;
}

uint64_t sub_1819174EC()
{
  return 1128481603;
}

uint64_t sub_1819174FC()
{
  return 0x4343434343;
}

uint64_t sub_181917510()
{
  return 0x434343434343;
}

uint64_t specialized == infix<A>(_:_:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;

  if ((a2 & 1) == 0)
  {
    v6 = 10;
    if (a1 < 10)
      v6 = a1;
    if (v6 <= 1)
      v7 = 1;
    else
      v7 = v6;
    v8 = MEMORY[0x186DA4928](103, 0xE100000000000000, v7);
    v10 = v9;
    if ((a4 & 1) != 0)
      goto LABEL_8;
LABEL_27:
    v17 = 10;
    if (a3 < 10)
      v17 = a3;
    if (v17 <= 1)
      v18 = 1;
    else
      v18 = v17;
    v19 = MEMORY[0x186DA4928](103, 0xE100000000000000, v18);
    v14 = v20;
    if (v8 != v19)
      goto LABEL_35;
    goto LABEL_33;
  }
  v15 = 0xE200000000000000;
  v16 = 25700;
  if (a1 != 1)
  {
    v16 = 70;
    v15 = 0xE100000000000000;
  }
  if (a1)
    v8 = v16;
  else
    v8 = 100;
  if (a1)
    v10 = v15;
  else
    v10 = 0xE100000000000000;
  if ((a4 & 1) == 0)
    goto LABEL_27;
LABEL_8:
  v11 = 0xE200000000000000;
  v12 = 25700;
  if (a3 != 1)
  {
    v12 = 70;
    v11 = 0xE100000000000000;
  }
  if (a3)
    v13 = v12;
  else
    v13 = 100;
  if (a3)
    v14 = v11;
  else
    v14 = 0xE100000000000000;
  if (v8 != v13)
    goto LABEL_35;
LABEL_33:
  if (v10 != v14)
  {
LABEL_35:
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_36;
  }
  v21 = 1;
LABEL_36:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v21 & 1;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  if ((a2 & 1) != 0)
  {
    if (a1)
      v8 = 22873;
    else
      v8 = 89;
    if (a1)
      v10 = 0xE200000000000000;
    else
      v10 = 0xE100000000000000;
    if ((a4 & 1) != 0)
      goto LABEL_8;
LABEL_23:
    v13 = 10;
    if (a3 < 10)
      v13 = a3;
    if (v13 <= 1)
      v14 = 1;
    else
      v14 = v13;
    v15 = MEMORY[0x186DA4928](89, 0xE100000000000000, v14);
    v12 = v16;
    if (v8 != v15)
      goto LABEL_31;
    goto LABEL_29;
  }
  v6 = 10;
  if (a1 < 10)
    v6 = a1;
  if (v6 <= 1)
    v7 = 1;
  else
    v7 = v6;
  v8 = MEMORY[0x186DA4928](89, 0xE100000000000000, v7);
  v10 = v9;
  if ((a4 & 1) == 0)
    goto LABEL_23;
LABEL_8:
  if (a3)
    v11 = 22873;
  else
    v11 = 89;
  if (a3)
    v12 = 0xE200000000000000;
  else
    v12 = 0xE100000000000000;
  if (v8 != v11)
    goto LABEL_31;
LABEL_29:
  if (v10 != v12)
  {
LABEL_31:
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_32;
  }
  v17 = 1;
LABEL_32:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v17 & 1;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  char v28;

  if ((a2 & 1) != 0)
    v6 = 65;
  else
    v6 = 83;
  if (a1 <= 1)
    v7 = 1;
  else
    v7 = a1;
  if (v7 >= 9)
    v8 = 9;
  else
    v8 = v7;
  if (v8 != 1)
  {
    swift_bridgeObjectRetain_n();
    v9._countAndFlagsBits = v6;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    if (v8 != 2)
    {
      swift_bridgeObjectRetain();
      v10._countAndFlagsBits = v6;
      v10._object = (void *)0xE100000000000000;
      String.append(_:)(v10);
      swift_bridgeObjectRelease();
      if (v8 != 3)
      {
        swift_bridgeObjectRetain();
        v11._countAndFlagsBits = v6;
        v11._object = (void *)0xE100000000000000;
        String.append(_:)(v11);
        swift_bridgeObjectRelease();
        if (v8 != 4)
        {
          swift_bridgeObjectRetain();
          v12._countAndFlagsBits = v6;
          v12._object = (void *)0xE100000000000000;
          String.append(_:)(v12);
          swift_bridgeObjectRelease();
          if (v8 != 5)
          {
            swift_bridgeObjectRetain();
            v13._countAndFlagsBits = v6;
            v13._object = (void *)0xE100000000000000;
            String.append(_:)(v13);
            swift_bridgeObjectRelease();
            if (v8 != 6)
            {
              swift_bridgeObjectRetain();
              v14._countAndFlagsBits = v6;
              v14._object = (void *)0xE100000000000000;
              String.append(_:)(v14);
              swift_bridgeObjectRelease();
              if (v8 != 7)
              {
                swift_bridgeObjectRetain();
                v15._countAndFlagsBits = v6;
                v15._object = (void *)0xE100000000000000;
                String.append(_:)(v15);
                swift_bridgeObjectRelease();
                if (v8 != 8)
                {
                  swift_bridgeObjectRetain();
                  v16._countAndFlagsBits = v6;
                  v16._object = (void *)0xE100000000000000;
                  String.append(_:)(v16);
                  swift_bridgeObjectRelease();
                }
              }
            }
          }
        }
      }
    }
    swift_bridgeObjectRelease();
  }
  if ((a4 & 1) != 0)
    v17 = 65;
  else
    v17 = 83;
  if (a3 <= 1)
    v18 = 1;
  else
    v18 = a3;
  if (v18 >= 9)
    v19 = 9;
  else
    v19 = v18;
  if (v19 != 1)
  {
    swift_bridgeObjectRetain_n();
    v20._countAndFlagsBits = v17;
    v20._object = (void *)0xE100000000000000;
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    if (v19 != 2)
    {
      swift_bridgeObjectRetain();
      v21._countAndFlagsBits = v17;
      v21._object = (void *)0xE100000000000000;
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      if (v19 != 3)
      {
        swift_bridgeObjectRetain();
        v22._countAndFlagsBits = v17;
        v22._object = (void *)0xE100000000000000;
        String.append(_:)(v22);
        swift_bridgeObjectRelease();
        if (v19 != 4)
        {
          swift_bridgeObjectRetain();
          v23._countAndFlagsBits = v17;
          v23._object = (void *)0xE100000000000000;
          String.append(_:)(v23);
          swift_bridgeObjectRelease();
          if (v19 != 5)
          {
            swift_bridgeObjectRetain();
            v24._countAndFlagsBits = v17;
            v24._object = (void *)0xE100000000000000;
            String.append(_:)(v24);
            swift_bridgeObjectRelease();
            if (v19 != 6)
            {
              swift_bridgeObjectRetain();
              v25._countAndFlagsBits = v17;
              v25._object = (void *)0xE100000000000000;
              String.append(_:)(v25);
              swift_bridgeObjectRelease();
              if (v19 != 7)
              {
                swift_bridgeObjectRetain();
                v26._countAndFlagsBits = v17;
                v26._object = (void *)0xE100000000000000;
                String.append(_:)(v26);
                swift_bridgeObjectRelease();
                if (v19 != 8)
                {
                  swift_bridgeObjectRetain();
                  v27._countAndFlagsBits = v17;
                  v27._object = (void *)0xE100000000000000;
                  String.append(_:)(v27);
                  swift_bridgeObjectRelease();
                }
              }
            }
          }
        }
      }
    }
    swift_bridgeObjectRelease();
  }
  if (v6 == v17)
    v28 = 1;
  else
    v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v28 & 1;
}

void specialized == infix<A>(_:_:)(char a1)
{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

{
  __asm { BR              X11 }
}

{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

{
  __asm { BR              X11 }
}

uint64_t sub_181917694(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1819176F4 + 4 * byte_1820F8183[a2]))(19789);
}

uint64_t sub_1819176F4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 19789 && v1 == 0xE200000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t outlined init with take of Date.FormatStyle.Symbol.SymbolType.DayOption(uint64_t *a1, uint64_t a2)
{
  __swift_memcpy9_8(a2, a1);
  return a2;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t Date.FormatStyle.DateFieldCollection.preferredHour(withLocale:)(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t ObjectType;
  void (*v8)(_OWORD *__return_ptr, uint64_t, _QWORD *);
  void (*v9)(__int128 *__return_ptr, uint64_t, _QWORD *);
  __int128 v10;
  uint64_t v11;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  Swift::String v17;
  char v18;
  void (*v19)(__int128 *__return_ptr, uint64_t, _QWORD *);
  __int128 v20;
  __int128 v21;
  Swift::String v22;
  char v23;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char v32;
  _OWORD v33[6];
  _BYTE v34[17];

  v3 = *a1;
  v2 = (_QWORD *)a1[1];
  outlined init with take of LocalePreferences?(v1 + 37, (uint64_t)&v32, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.HourOption?);
  outlined init with take of LocalePreferences?((uint64_t)&v32, (uint64_t)v34, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.HourOption?);
  v4 = v34[0];
  if (v34[0] == 14 || v3 == 0)
    return 14;
  v6 = v34[0];
  ObjectType = swift_getObjectType();
  v8 = (void (*)(_OWORD *__return_ptr, uint64_t, _QWORD *))v2[45];
  swift_unknownObjectRetain();
  v8(v33, ObjectType, v2);
  if (LOBYTE(v33[0]) > 1u)
  {
    swift_unknownObjectRelease();
    return v6;
  }
  v9 = (void (*)(__int128 *__return_ptr, uint64_t, _QWORD *))v2[44];
  swift_unknownObjectRetain();
  v9(&v26, ObjectType, v2);
  swift_unknownObjectRelease();
  v33[0] = v26;
  v33[1] = v27;
  v33[2] = v28;
  v33[3] = v29;
  v33[4] = v30;
  v33[5] = v31;
  v10 = v26;
  v11 = *((_QWORD *)&v26 + 1);
  v25 = v26;
  object = (void *)*((_QWORD *)&v27 + 1);
  countAndFlagsBits = v27;
  if (!*((_QWORD *)&v26 + 1))
  {
    outlined retain of Locale.Language((uint64_t *)v33, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
    v14 = specialized _withFixedCharBuffer(size:_:)(257, (uint64_t *)v33);
    v11 = v15;
    outlined retain of Locale.Language((uint64_t *)v33, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
    if (v11)
    {
      v25 = v14;
      v16 = String.lowercased()();
      countAndFlagsBits = v16._countAndFlagsBits;
      object = v16._object;
    }
    else
    {
      v25 = 0;
      countAndFlagsBits = 0;
      object = 0;
    }
  }
  outlined copy of Locale.LanguageCode?(v10, *((uint64_t *)&v10 + 1));
  outlined retain of Locale.Language((uint64_t *)v33, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
  v17 = String.lowercased()();
  if (!v11)
  {
    outlined consume of Locale.LanguageCode?(v25, 0);
    outlined consume of Locale.LanguageCode?(26746, 0xE200000000000000);
    goto LABEL_22;
  }
  if (countAndFlagsBits == v17._countAndFlagsBits && object == v17._object)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Locale.LanguageCode?(v25, v11);
    goto LABEL_19;
  }
  v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Locale.LanguageCode?(v25, v11);
  if ((v18 & 1) == 0)
  {
LABEL_22:
    swift_unknownObjectRelease();
    return v4;
  }
LABEL_19:
  v19 = (void (*)(__int128 *__return_ptr, uint64_t, _QWORD *))v2[47];
  swift_unknownObjectRetain();
  v19(&v26, ObjectType, v2);
  swift_unknownObjectRelease();
  v20 = v26;
  v21 = v27;
  v22 = String.uppercased()();
  if (*((_QWORD *)&v20 + 1))
  {
    if (v21 == v22)
    {
      outlined copy of Locale.LanguageCode?(v20, *((uint64_t *)&v20 + 1));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Locale.LanguageCode?(v20, *((uint64_t *)&v20 + 1));
      return byte_1820FDF48[v4];
    }
    v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
    outlined copy of Locale.LanguageCode?(v20, *((uint64_t *)&v20 + 1));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Locale.LanguageCode?(v20, *((uint64_t *)&v20 + 1));
    v6 = v4;
    if ((v23 & 1) != 0)
      return byte_1820FDF48[v4];
  }
  else
  {
    swift_unknownObjectRelease();
    outlined consume of Locale.LanguageCode?(v20, 0);
    outlined consume of Locale.LanguageCode?(22356, 0xE200000000000000);
    return v4;
  }
  return v6;
}

uint64_t protocol witness for _LocaleProtocol.language.getter in conformance _LocaleAutoupdating()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  if (one-time initialization token for cache != -1)
    swift_once();
  LocaleCache.current.getter();
  v1 = v0;
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 352))(ObjectType, v1);
  return swift_unknownObjectRelease();
}

uint64_t Locale.language.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 352))(ObjectType, v1);
}

uint64_t _LocaleICU.language.getter@<X0>(uint64_t *a1@<X8>)
{
  int Language;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int Script;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int Country;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String v19;
  uint64_t result;
  void *v21;
  Swift::String v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[272];
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[258];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  swift_bridgeObjectRetain();
  String.utf8CString.getter();
  Language = uloc_getLanguage();
  v3 = swift_release();
  if (Language <= 0)
  {
    v27 = 0;
    v5 = 0;
  }
  else
  {
    v33[Language] = 0;
    v3 = MEMORY[0x186DA4658](v33);
    v27 = v3;
    v5 = v4;
  }
  MEMORY[0x1E0C80A78](v3);
  LODWORD(v31) = 0;
  String.utf8CString.getter();
  Script = uloc_getScript();
  swift_release();
  v7 = 0;
  v29 = v5;
  v8 = 0;
  if (Script > 0)
  {
    v25[Script] = 0;
    v7 = MEMORY[0x186DA4658](v25);
    v8 = v9;
  }
  v30 = v7;
  MEMORY[0x1E0C80A78](v7);
  LODWORD(v31) = 0;
  String.utf8CString.getter();
  Country = uloc_getCountry();
  swift_release();
  v11 = 0;
  v12 = 0;
  if ((int)v31 <= 0 && Country > 0)
  {
    v25[Country] = 0;
    v11 = MEMORY[0x186DA4658](v25);
    v12 = v13;
  }
  swift_bridgeObjectRelease();
  v14 = v29;
  if (v29)
  {
    v15 = v27;
    v16 = String.lowercased()();
    countAndFlagsBits = v16._countAndFlagsBits;
    object = v16._object;
  }
  else
  {
    v15 = 0;
    countAndFlagsBits = 0;
    object = 0;
  }
  v28 = v8;
  if (!v8)
  {
    v30 = 0;
    v26 = 0;
    v27 = 0;
    if (v12)
      goto LABEL_14;
LABEL_16:
    v11 = 0;
    result = 0;
    v21 = 0;
    goto LABEL_17;
  }
  v31 = v30;
  v32 = v8;
  swift_bridgeObjectRetain_n();
  String.init<A>(_:)();
  v19 = String._capitalized()();
  v26 = v19._object;
  v27 = v19._countAndFlagsBits;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v12)
    goto LABEL_16;
LABEL_14:
  v22 = String.uppercased()();
  v21 = v22._object;
  result = v22._countAndFlagsBits;
LABEL_17:
  v23 = v28;
  *a1 = v15;
  a1[1] = v14;
  a1[2] = countAndFlagsBits;
  a1[3] = (uint64_t)object;
  a1[4] = v30;
  a1[5] = v23;
  v24 = (uint64_t)v26;
  a1[6] = v27;
  a1[7] = v24;
  a1[8] = v11;
  a1[9] = v12;
  a1[10] = result;
  a1[11] = (uint64_t)v21;
  return result;
}

uint64_t specialized _withFixedCharBuffer(size:_:)(uint64_t isStackAllocationSafe, uint64_t *a2, uint64_t (*a3)(uint64_t, char *, uint64_t, int *))
{
  int v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  void *v13;
  Swift::String v14;
  uint64_t v15;
  void *v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  void *v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  void *v31;
  Swift::String v32;
  uint64_t v33;
  void *v34;
  Swift::String v35;
  Swift::String v36;
  uint64_t v37;
  void *v38;
  Swift::String v39;
  Swift::String v40;
  uint64_t v41;
  int v42;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _BYTE v54[32];
  _BYTE v55[32];
  _BYTE v56[32];
  _BYTE v57[8];
  uint64_t v58;
  uint64_t v59;
  void *v60;
  _BYTE v61[8];
  uint64_t v62;
  uint64_t v63;
  void *v64;
  _BYTE v65[8];
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v3 = isStackAllocationSafe + 1;
  if (__OFADD__((_DWORD)isStackAllocationSafe, 1))
  {
    __break(1u);
LABEL_29:
    __break(1u);
  }
  if (v3 < 0)
    goto LABEL_29;
  v6 = isStackAllocationSafe;
  if (v3 < 1025 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v8 = (char *)&v44 - v7;
    v47 = 0;
    v9 = *((_OWORD *)a2 + 3);
    v50 = *((_OWORD *)a2 + 2);
    v51 = v9;
    v10 = *((_OWORD *)a2 + 5);
    v52 = *((_OWORD *)a2 + 4);
    v53 = v10;
    v11 = *((_OWORD *)a2 + 1);
    v48 = *(_OWORD *)a2;
    v49 = v11;
    outlined init with take of LocalePreferences?((uint64_t)&v48, (uint64_t)v56, &demangling cache variable for type metadata for Locale.LanguageCode?);
    v45 = 0;
    v46 = 0xE000000000000000;
    outlined init with take of LocalePreferences?((uint64_t)v56, (uint64_t)v57, &demangling cache variable for type metadata for Locale.LanguageCode?);
    if (v58)
    {
      v12 = v59;
      v13 = v60;
      outlined retain of Locale.Language(a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
      v14._countAndFlagsBits = v12;
      v14._object = v13;
      String.append(_:)(v14);
    }
    else
    {
      outlined retain of Locale.Language(a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
    }
    outlined init with take of LocalePreferences?((uint64_t)&v50, (uint64_t)v55, &demangling cache variable for type metadata for Locale.Script?);
    outlined init with take of LocalePreferences?((uint64_t)v55, (uint64_t)v61, &demangling cache variable for type metadata for Locale.Script?);
    if (v62)
    {
      v15 = v63;
      v16 = v64;
      v17._countAndFlagsBits = 45;
      v17._object = (void *)0xE100000000000000;
      String.append(_:)(v17);
      v18._countAndFlagsBits = v15;
      v18._object = v16;
      String.append(_:)(v18);
    }
    outlined init with take of LocalePreferences?((uint64_t)&v52, (uint64_t)v54, &demangling cache variable for type metadata for Locale.Region?);
    outlined init with take of LocalePreferences?((uint64_t)v54, (uint64_t)v65, &demangling cache variable for type metadata for Locale.Region?);
    if (v66)
    {
      v19 = v67;
      v20 = v68;
      v21._countAndFlagsBits = 95;
      v21._object = (void *)0xE100000000000000;
      String.append(_:)(v21);
      v22._countAndFlagsBits = v19;
      v22._object = v20;
      String.append(_:)(v22);
    }
    outlined retain of Locale.Language(a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
    v23 = String.utf8CString.getter();
    swift_bridgeObjectRelease();
    v24 = a3(v23 + 32, v8, v6, &v47);
    swift_release();
    v25 = 0;
    if (v47 <= 0 && v24 > 0)
    {
      v8[v24] = 0;
      return MEMORY[0x186DA4658](v8);
    }
  }
  else
  {
    v26 = swift_slowAlloc();
    v47 = 0;
    v27 = *((_OWORD *)a2 + 3);
    v50 = *((_OWORD *)a2 + 2);
    v51 = v27;
    v28 = *((_OWORD *)a2 + 5);
    v52 = *((_OWORD *)a2 + 4);
    v53 = v28;
    v29 = *((_OWORD *)a2 + 1);
    v48 = *(_OWORD *)a2;
    v49 = v29;
    outlined init with take of LocalePreferences?((uint64_t)&v48, (uint64_t)v56, &demangling cache variable for type metadata for Locale.LanguageCode?);
    v45 = 0;
    v46 = 0xE000000000000000;
    outlined init with take of LocalePreferences?((uint64_t)v56, (uint64_t)v57, &demangling cache variable for type metadata for Locale.LanguageCode?);
    if (v58)
    {
      v30 = v59;
      v31 = v60;
      outlined retain of Locale.Language(a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
      v32._countAndFlagsBits = v30;
      v32._object = v31;
      String.append(_:)(v32);
    }
    else
    {
      outlined retain of Locale.Language(a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
    }
    outlined init with take of LocalePreferences?((uint64_t)&v50, (uint64_t)v55, &demangling cache variable for type metadata for Locale.Script?);
    outlined init with take of LocalePreferences?((uint64_t)v55, (uint64_t)v61, &demangling cache variable for type metadata for Locale.Script?);
    if (v62)
    {
      v33 = v63;
      v34 = v64;
      v35._countAndFlagsBits = 45;
      v35._object = (void *)0xE100000000000000;
      String.append(_:)(v35);
      v36._countAndFlagsBits = v33;
      v36._object = v34;
      String.append(_:)(v36);
    }
    outlined init with take of LocalePreferences?((uint64_t)&v52, (uint64_t)v54, &demangling cache variable for type metadata for Locale.Region?);
    outlined init with take of LocalePreferences?((uint64_t)v54, (uint64_t)v65, &demangling cache variable for type metadata for Locale.Region?);
    if (v66)
    {
      v37 = v67;
      v38 = v68;
      v39._countAndFlagsBits = 95;
      v39._object = (void *)0xE100000000000000;
      String.append(_:)(v39);
      v40._countAndFlagsBits = v37;
      v40._object = v38;
      String.append(_:)(v40);
    }
    outlined retain of Locale.Language(a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
    v41 = String.utf8CString.getter();
    swift_bridgeObjectRelease();
    v42 = a3(v41 + 32, (char *)v26, v6, &v47);
    swift_release();
    v25 = 0;
    if (v47 <= 0 && v42 > 0)
    {
      *(_BYTE *)(v26 + v42) = 0;
      v25 = MEMORY[0x186DA4658](v26);
    }
    MEMORY[0x186DA9E78](v26, -1, -1);
  }
  return v25;
}

uint64_t *outlined retain of Locale.Language(uint64_t *a1, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[6];
  v7 = a1[7];
  v8 = a1[8];
  v9 = a1[9];
  v10 = a1[10];
  v11 = a1[11];
  a2(*a1, a1[1], a1[2], a1[3]);
  a2(v4, v5, v6, v7);
  a2(v8, v9, v10, v11);
  return a1;
}

uint64_t protocol witness for _LocaleProtocol.hourCycle.getter in conformance _LocaleAutoupdating()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  if (one-time initialization token for cache != -1)
    swift_once();
  LocaleCache.current.getter();
  v1 = v0;
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 360))(ObjectType, v1);
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for _LocaleProtocol.hourCycle.getter in conformance _LocaleICU@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  os_unfair_lock_s *v3;

  v3 = *(os_unfair_lock_s **)(v1 + 184);
  swift_retain();
  os_unfair_lock_lock(v3 + 140);
  partial apply for closure #1 in _LocaleICU.hourCycle.getter((uint64_t)&v3[4], a1);
  os_unfair_lock_unlock(v3 + 140);
  return swift_release();
}

uint64_t partial apply for closure #1 in _LocaleICU.hourCycle.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in _LocaleICU.hourCycle.getter(a1, v2, a2);
}

id @objc static NSLocale._localeIdentifier(fromWindowsLocaleCode:)(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  void *v4;

  specialized static Locale.identifier(fromWindowsLocaleCode:)(a3);
  if (v3)
  {
    v4 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = 0;
  }
  return v4;
}

uint64_t specialized static Locale.identifier(fromWindowsLocaleCode:)(unint64_t a1)
{
  uint64_t v1;
  uint64_t isStackAllocationSafe;
  __n128 v4;
  int v5;
  uint64_t v7;
  int v8;
  _BYTE v10[1044];
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (HIDWORD(a1))
    return 0;
  isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
  if ((isStackAllocationSafe & 1) != 0)
  {
    v4 = MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v11 = 0;
    v5 = MEMORY[0x186DAA598](a1, v10, 1024, &v11, v4);
    if (v11 > 0 || v5 <= 0)
    {
      return 0;
    }
    else
    {
      v10[v5] = 0;
      return MEMORY[0x186DA4658](v10);
    }
  }
  else
  {
    v7 = swift_slowAlloc();
    v11 = 0;
    v8 = MEMORY[0x186DAA598](a1, v7, 1024, &v11);
    v1 = 0;
    if (v11 <= 0 && v8 > 0)
    {
      *(_BYTE *)(v7 + v8) = 0;
      v1 = MEMORY[0x186DA4658](v7);
    }
    MEMORY[0x186DA9E78](v7, -1, -1);
  }
  return v1;
}

void URLComponents.url.getter(uint64_t *a1@<X8>)
{
  __int128 *v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t v26;
  __int16 v27;
  Swift::String v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  __int16 v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  Swift::String v43;
  uint64_t v44;
  uint64_t v45;
  Swift::String v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  Swift::String v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  Swift::String v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  void *v59;
  Swift::String v60;
  uint64_t v61;
  void *v62;
  Swift::String v63;
  uint64_t v64;
  void *v65;
  Swift::String v66;
  const __CFAllocator *v67;
  const __CFString *v68;
  CFURLRef v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  void *v75;
  Swift::String v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  _OWORD v87[2];
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  _BYTE v96[26];

  v3 = v1[7];
  v4 = v1[5];
  v94 = v1[6];
  v95 = v3;
  v5 = v1[7];
  *(_OWORD *)v96 = v1[8];
  *(_OWORD *)&v96[10] = *(__int128 *)((char *)v1 + 138);
  v6 = v1[3];
  v7 = v1[1];
  v90 = v1[2];
  v91 = v6;
  v8 = v1[3];
  v9 = v1[5];
  v92 = v1[4];
  v93 = v9;
  v10 = v1[1];
  v88 = *v1;
  v89 = v10;
  v85 = v94;
  v86 = v5;
  v87[0] = v1[8];
  *(_OWORD *)((char *)v87 + 10) = *(__int128 *)((char *)v1 + 138);
  v81 = v90;
  v82 = v8;
  v83 = v92;
  v84 = v4;
  v79 = v88;
  v80 = v7;
  if (BYTE8(v88) == 1)
  {
    if ((_QWORD)v88)
    {
      v12 = *(_QWORD *)(v88 + 16);
      v11 = *(_QWORD *)(v88 + 24);
      swift_bridgeObjectRetain();
      if (_foundation_swift_url_feature_enabled())
      {
LABEL_4:
        URL.init(string:)(v12, v11, a1);
        swift_bridgeObjectRelease();
        return;
      }
      goto LABEL_106;
    }
LABEL_34:
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    return;
  }
  if ((v96[25] & 1) != 0)
    goto LABEL_34;
  v77 = 0;
  *(_QWORD *)&v78 = 0xE000000000000000;
  v13 = (void *)v90;
  if ((_QWORD)v90)
  {
    v14 = *((_QWORD *)&v89 + 1);
    outlined retain of URLComponents((uint64_t)&v88);
    v15 = v13;
LABEL_8:
    v76._countAndFlagsBits = v14;
    v76._object = v15;
    swift_bridgeObjectRetain();
    v16._countAndFlagsBits = 58;
    v16._object = (void *)0xE100000000000000;
    String.append(_:)(v16);
    v17._countAndFlagsBits = v14;
    v17._object = v15;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  if (BYTE9(v88) == 1 && (_QWORD)v88 && (*(_BYTE *)(v88 + 48) & 1) == 0)
  {
    outlined retain of URLComponents((uint64_t)&v88);
    v24 = String.subscript.getter();
    v14 = MEMORY[0x186DA4634](v24);
    v15 = v25;
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  outlined retain of URLComponents((uint64_t)&v88);
LABEL_13:
  if ((URLComponents._URLComponents.hasAuthority.getter() & 1) != 0)
  {
    if ((_QWORD)v95)
    {
      v18 = *((_QWORD *)&v94 + 1);
      v19 = v95;
    }
    else if ((BYTE14(v88) & 1) != 0 && (_QWORD)v88)
    {
      if ((*(_BYTE *)(v88 + 168) & 1) != 0)
        v22 = MEMORY[0x186DA5030](0, 0xE000000000000000);
      else
        v22 = String.subscript.getter();
      v18 = MEMORY[0x186DA4634](v22);
      v19 = v26;
      swift_bridgeObjectRelease();
    }
    else
    {
      v18 = 0;
      v19 = 0xE000000000000000;
    }
    v27 = specialized Collection.first.getter(v18, v19);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if ((v27 & 0x100) == 0 && v27 != 47)
      goto LABEL_33;
    v28._countAndFlagsBits = 12079;
    v28._object = (void *)0xE200000000000000;
    String.append(_:)(v28);
    goto LABEL_60;
  }
  if ((_QWORD)v95)
  {
    v20 = *((_QWORD *)&v94 + 1);
    v21 = v95;
  }
  else if ((BYTE14(v88) & 1) != 0 && (_QWORD)v88)
  {
    if ((*(_BYTE *)(v88 + 168) & 1) != 0)
      v23 = MEMORY[0x186DA5030](0, 0xE000000000000000);
    else
      v23 = String.subscript.getter();
    v20 = MEMORY[0x186DA4634](v23);
    v21 = v29;
    swift_bridgeObjectRelease();
  }
  else
  {
    v20 = 0;
    v21 = 0xE000000000000000;
  }
  v30 = 65540;
  if ((v21 & 0x1000000000000000) != 0)
    v31 = (v20 >> 59) & 1;
  else
    v31 = 1;
  v32 = HIBYTE(v21) & 0xF;
  v33 = v20 & 0xFFFFFFFFFFFFLL;
  if ((v21 & 0x1000000000000000) != 0)
  {
    if ((v21 & 0x2000000000000000) != 0)
      v33 = HIBYTE(v21) & 0xF;
    if (!v33)
    {
      __break(1u);
      return;
    }
    v34 = String.UTF8View._foreignIndex(after:)();
    v33 = v20 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v34 = 65540;
  }
  if ((v21 & 0x2000000000000000) == 0)
    v32 = v33;
  if (v34 >> 14 == 4 * v32
    || (v35 = specialized Collection.first.getter(v20, v21), (v35 & 0x100) != 0)
    || v35 != 47)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_60;
  }
  if ((v21 & 0x1000000000000000) != 0)
  {
    if (!v32)
    {
LABEL_121:
      __break(1u);
      goto LABEL_122;
    }
    v30 = String.UTF8View._foreignIndex(after:)();
  }
  if ((v30 & 0xC) == 4 << v31)
    v30 = _StringGuts._slowEnsureMatchingEncoding(_:)(v30, v20, v21);
  v31 = v30 >> 16;
  if (v30 >> 16 >= v32)
  {
    __break(1u);
    goto LABEL_121;
  }
  if ((v21 & 0x1000000000000000) != 0)
  {
    v37 = String.UTF8View._foreignSubscript(position:)();
  }
  else
  {
    if ((v21 & 0x2000000000000000) == 0)
    {
      if ((v20 & 0x1000000000000000) != 0)
      {
        v36 = (v21 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_58:
        v37 = *(_BYTE *)(v36 + v31);
        goto LABEL_114;
      }
LABEL_122:
      v36 = _StringObject.sharedUTF8.getter();
      goto LABEL_58;
    }
    v76._countAndFlagsBits = v20;
    v76._object = (void *)(v21 & 0xFFFFFFFFFFFFFFLL);
    v37 = *((_BYTE *)&v76._countAndFlagsBits + v31);
  }
LABEL_114:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v37 == 47)
  {
LABEL_33:
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v88);
    goto LABEL_34;
  }
LABEL_60:
  v38 = URLComponents._URLComponents.percentEncodedUser.getter();
  if (v39)
  {
    String.append(_:)(*(Swift::String *)&v38);
    swift_bridgeObjectRelease();
  }
  v40 = v92;
  if ((_QWORD)v92)
  {
    v41 = *((_QWORD *)&v91 + 1);
    v42 = (void *)v92;
LABEL_64:
    v76._countAndFlagsBits = 58;
    v76._object = (void *)0xE100000000000000;
    swift_bridgeObjectRetain();
    v43._countAndFlagsBits = v41;
    v43._object = v42;
    String.append(_:)(v43);
    swift_bridgeObjectRelease();
    String.append(_:)(v76);
    swift_bridgeObjectRelease();
    goto LABEL_68;
  }
  if (BYTE11(v88) == 1 && (_QWORD)v88 && (*(_BYTE *)(v88 + 96) & 1) == 0)
  {
    v56 = String.subscript.getter();
    v41 = MEMORY[0x186DA4634](v56);
    v42 = v57;
    swift_bridgeObjectRelease();
    goto LABEL_64;
  }
LABEL_68:
  URLComponents._URLComponents.percentEncodedUser.getter();
  v45 = v44;
  swift_bridgeObjectRelease();
  if (v45 | v40)
  {
LABEL_69:
    v46._countAndFlagsBits = 64;
    v46._object = (void *)0xE100000000000000;
    String.append(_:)(v46);
    goto LABEL_73;
  }
  if (BYTE11(v88) == 1 && (_QWORD)v88 && (*(_BYTE *)(v88 + 96) & 1) == 0)
  {
    v58 = String.subscript.getter();
    MEMORY[0x186DA4634](v58);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_69;
  }
LABEL_73:
  v47 = URLComponents._URLComponents.encodedHost.getter();
  if (v48)
  {
    String.append(_:)(*(Swift::String *)&v47);
    swift_bridgeObjectRelease();
  }
  URLComponents._URLComponents.port.getter();
  if ((v49 & 1) == 0)
  {
    v76._countAndFlagsBits = 58;
    v76._object = (void *)0xE100000000000000;
    v50._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v50);
LABEL_77:
    swift_bridgeObjectRelease();
    String.append(_:)(v76);
    swift_bridgeObjectRelease();
    goto LABEL_81;
  }
  if ((BYTE13(v88) & 1) != 0 && (_QWORD)v88 && (*(_BYTE *)(v88 + 144) & 1) == 0)
  {
    v54 = String.subscript.getter();
    v76._countAndFlagsBits = 58;
    v76._object = (void *)0xE100000000000000;
    v55._countAndFlagsBits = MEMORY[0x186DA4634](v54);
    String.append(_:)(v55);
    swift_bridgeObjectRelease();
    goto LABEL_77;
  }
LABEL_81:
  if ((_QWORD)v95)
  {
    v51 = *((_QWORD *)&v94 + 1);
    v52 = (void *)v95;
  }
  else if ((BYTE14(v88) & 1) != 0 && (_QWORD)v88)
  {
    if ((*(_BYTE *)(v88 + 168) & 1) != 0)
      v53 = MEMORY[0x186DA5030](0, 0xE000000000000000);
    else
      v53 = String.subscript.getter();
    v51 = MEMORY[0x186DA4634](v53);
    v52 = v59;
    swift_bridgeObjectRelease();
  }
  else
  {
    v51 = 0;
    v52 = (void *)0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  v60._countAndFlagsBits = v51;
  v60._object = v52;
  String.append(_:)(v60);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)v96)
  {
    v61 = *((_QWORD *)&v95 + 1);
    v62 = *(void **)v96;
LABEL_95:
    v76._countAndFlagsBits = 63;
    v76._object = (void *)0xE100000000000000;
    swift_bridgeObjectRetain();
    v63._countAndFlagsBits = v61;
    v63._object = v62;
    String.append(_:)(v63);
    swift_bridgeObjectRelease();
    String.append(_:)(v76);
    swift_bridgeObjectRelease();
    goto LABEL_99;
  }
  if (HIBYTE(v88) == 1 && (_QWORD)v88 && (*(_BYTE *)(v88 + 192) & 1) == 0)
  {
    v72 = String.subscript.getter();
    v61 = MEMORY[0x186DA4634](v72);
    v62 = v73;
    swift_bridgeObjectRelease();
    goto LABEL_95;
  }
LABEL_99:
  if (*(_QWORD *)&v96[16])
  {
    v64 = *(_QWORD *)&v96[8];
    v65 = *(void **)&v96[16];
LABEL_101:
    v76._countAndFlagsBits = 35;
    v76._object = (void *)0xE100000000000000;
    swift_bridgeObjectRetain();
    v66._countAndFlagsBits = v64;
    v66._object = v65;
    String.append(_:)(v66);
    swift_bridgeObjectRelease();
    String.append(_:)(v76);
    swift_bridgeObjectRelease();
    goto LABEL_105;
  }
  if (v89 == 1 && (_QWORD)v88 && (*(_BYTE *)(v88 + 216) & 1) == 0)
  {
    v74 = String.subscript.getter();
    v64 = MEMORY[0x186DA4634](v74);
    v65 = v75;
    swift_bridgeObjectRelease();
    goto LABEL_101;
  }
LABEL_105:
  outlined release of URLComponents((uint64_t)&v88);
  v12 = v77;
  v11 = v78;
  if (_foundation_swift_url_feature_enabled())
    goto LABEL_4;
LABEL_106:
  v67 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v68 = (const __CFString *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v69 = CFURLCreateWithString(v67, v68, 0);
  swift_unknownObjectRelease();
  if (v69)
  {
    URL.init(reference:)(v69, &v77);

    v70 = v77;
    v71 = v78;
  }
  else
  {
    v70 = 0;
    v71 = 0uLL;
  }
  *a1 = v70;
  *(_OWORD *)(a1 + 1) = v71;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance IndexSet(_QWORD *a1, _QWORD *a2))(_QWORD, _QWORD)
{
  *a1 = *a2;
  return destructiveProjectEnumData for PredicateCodableError;
}

NSRect NSIntersectionRect(NSRect aRect, NSRect bRect)
{
  double height;
  double v3;
  double x;
  double v5;
  double v6;
  double y;
  double v8;
  double v9;
  double v10;
  double v11;
  NSRect result;

  height = aRect.size.height;
  v3 = 0.0;
  if (aRect.size.width <= 0.0
    || bRect.size.width <= 0.0
    || height <= 0.0
    || bRect.size.height <= 0.0
    || (aRect.origin.x <= bRect.origin.x ? (x = bRect.origin.x) : (x = aRect.origin.x),
        (v5 = aRect.origin.x + aRect.size.width, v5 >= bRect.origin.x + bRect.size.width)
      ? (v6 = bRect.origin.x + bRect.size.width)
      : (v6 = v5),
        v6 <= x))
  {
    v9 = 0.0;
    v10 = 0.0;
    v11 = 0.0;
  }
  else
  {
    if (aRect.origin.y <= bRect.origin.y)
      y = bRect.origin.y;
    else
      y = aRect.origin.y;
    if (aRect.origin.y + height >= bRect.origin.y + bRect.size.height)
      v8 = bRect.origin.y + bRect.size.height;
    else
      v8 = aRect.origin.y + height;
    v9 = 0.0;
    v10 = 0.0;
    v11 = 0.0;
    if (v8 > y)
    {
      v9 = v6 - x;
      v3 = v8 - y;
      v10 = y;
      v11 = x;
    }
  }
  result.size.height = v3;
  result.size.width = v9;
  result.origin.y = v10;
  result.origin.x = v11;
  return result;
}

uint64_t ___createRegexForPattern_block_invoke()
{
  qword_1ECD0A628 = (uint64_t)objc_alloc_init(MEMORY[0x1E0C99D38]);
  objc_msgSend((id)qword_1ECD0A628, "setName:", CFSTR("NSRegularExpressionCache"));
  return objc_msgSend((id)qword_1ECD0A628, "setCountLimit:", 10);
}

_QWORD *initializeBufferWithCopyOfBuffer for ExpressionStructure(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t dispatch thunk of LocalizedError.recoverySuggestion.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of LocalizedError.errorDescription.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of LocalizedError.failureReason.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

void NSNotificationCenter.Notifications.makeAsyncIterator()(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = v1;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance IndexSet.Index(_QWORD *a1, _QWORD *a2)
{
  return *a2 >= *a1;
}

Swift::Void __swiftcall URL.appendPathComponent(_:isDirectory:)(Swift::String _, Swift::Bool isDirectory)
{
  _QWORD *v2;
  _QWORD *v3;
  void *object;
  unint64_t countAndFlagsBits;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  id v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  Swift::String v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  id v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned __int8 v35;
  char v36;
  char v37;
  char v38;
  char v39;
  unint64_t v40;
  Swift::String v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  Swift::String v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  uint64_t v65[3];
  unint64_t v66;
  unint64_t v67;
  char v68;
  _BYTE v69[72];
  char v70;
  uint64_t v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  char v75;
  char v76;
  _BYTE v77[160];
  _BYTE v78[160];
  uint64_t v79[20];
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  _OWORD v88[2];
  __int128 v89;
  _BYTE v90[80];
  __int128 v91;
  _BYTE v92[42];
  _BYTE v93[32];

  v3 = v2;
  object = _._object;
  countAndFlagsBits = _._countAndFlagsBits;
  v8 = (void *)*v2;
  v7 = v2[1];
  v9 = v2[2];
  if (_foundation_swift_url_feature_enabled())
  {
    if ((_foundation_swift_url_feature_enabled() & 1) != 0)
    {
      specialized URL.appending<A>(path:directoryHint:encodingSlashes:)(countAndFlagsBits, (uint64_t)object, !isDirectory, 0, (uint64_t)v8, v7);

LABEL_14:
      swift_release();
      swift_release();
      v7 = *((_QWORD *)&v89 + 1);
      v8 = (void *)v89;
      v9 = *(_QWORD *)v90;
      goto LABEL_15;
    }
    v22._countAndFlagsBits = 47;
    v22._object = (void *)0xE100000000000000;
    String.hasSuffix(_:)(v22);
    *(_QWORD *)&v89 = countAndFlagsBits;
    *((_QWORD *)&v89 + 1) = object;
    swift_bridgeObjectRetain();
    String.init<A>(_:)();
    v23 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v10 = objc_msgSend(v8, sel_URLByAppendingPathComponent_isDirectory_, v23, isDirectory);
    swift_unknownObjectRelease();
    if (v10)
    {
LABEL_13:
      URL.init(reference:)(v10, &v89);

      goto LABEL_14;
    }
    *(_QWORD *)&v89 = v8;
    *((_QWORD *)&v89 + 1) = v7;
    *(_QWORD *)v90 = v9;
    v24 = URL.absoluteString.getter();
    specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(v24, v25, 1, (uint64_t)v79);
    outlined init with take of LocalePreferences?((uint64_t)v79, (uint64_t)v78, &demangling cache variable for type metadata for URLComponents._URLComponents?);
    outlined init with take of LocalePreferences?((uint64_t)v79, (uint64_t)&v80, &demangling cache variable for type metadata for URLComponents._URLComponents?);
    if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)&v80) == 1)
      goto LABEL_15;
    v91 = v86;
    *(_OWORD *)v92 = v87;
    *(_OWORD *)&v92[16] = v88[0];
    *(_OWORD *)&v92[26] = *(_OWORD *)((char *)v88 + 10);
    *(_OWORD *)&v90[16] = v82;
    *(_OWORD *)&v90[32] = v83;
    *(_OWORD *)&v90[48] = v84;
    *(_OWORD *)&v90[64] = v85;
    v89 = v80;
    *(_OWORD *)v90 = v81;
    outlined init with take of LocalePreferences?((uint64_t)v78, (uint64_t)v77, &demangling cache variable for type metadata for URLComponents._URLComponents?);
    outlined retain of URLComponents((uint64_t)v77);
    URLComponents._URLComponents.path.getter();
    outlined release of URLComponents?(v79);
    v26 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v66 = countAndFlagsBits;
    v67 = (unint64_t)object;
    swift_bridgeObjectRetain();
    String.init<A>(_:)();
    v27 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v28 = objc_msgSend(v26, sel_stringByAppendingPathComponent_, v27);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v29 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    v31 = v30;

    if ((v31 & 0x2000000000000000) != 0)
      v32 = HIBYTE(v31) & 0xF;
    else
      v32 = v29 & 0xFFFFFFFFFFFFLL;
    outlined init with take of LocalePreferences?((uint64_t)&v91 + 8, (uint64_t)v93, &demangling cache variable for type metadata for String?);
    if (v32)
    {
      swift_bridgeObjectRetain();
      v32 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v29, v31);
      v34 = v33;
      swift_bridgeObjectRelease();
    }
    else
    {
      v34 = 0xE000000000000000;
    }
    outlined release of String((uint64_t)v93);
    if (isDirectory
      && (v41._countAndFlagsBits = 47, v41._object = (void *)0xE100000000000000, !String.hasSuffix(_:)(v41)))
    {
      v66 = v29;
      v67 = v31;
      swift_bridgeObjectRetain();
      v45._countAndFlagsBits = 47;
      v45._object = (void *)0xE100000000000000;
      String.append(_:)(v45);
      swift_bridgeObjectRelease();
      v46 = HIBYTE(v31) & 0xF;
      if ((v31 & 0x2000000000000000) == 0)
        v46 = v66 & 0xFFFFFFFFFFFFLL;
      if (v46)
      {
        v32 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v66, v67);
        v48 = v47;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v34 = v48;
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v32 = 0;
        v34 = 0xE000000000000000;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v66 = v89;
    LOBYTE(v67) = 0;
    *(_DWORD *)((char *)&v67 + 1) = *(_DWORD *)((char *)&v89 + 9);
    *(_WORD *)((char *)&v67 + 5) = BYTE13(v89);
    HIBYTE(v67) = HIBYTE(v89);
    v68 = v90[0];
    *(_OWORD *)v69 = *(_OWORD *)&v90[8];
    *(_OWORD *)&v69[16] = *(_OWORD *)&v90[24];
    *(_OWORD *)&v69[32] = *(_OWORD *)&v90[40];
    *(_OWORD *)&v69[48] = *(_OWORD *)&v90[56];
    *(_QWORD *)&v69[64] = *(_QWORD *)&v90[72];
    v70 = v91;
    v71 = v32;
    v72 = v34;
    v73 = *(_OWORD *)&v92[8];
    v74 = *(_OWORD *)&v92[24];
    v75 = v92[40];
    v76 = v92[41];
    goto LABEL_29;
  }
  v10 = objc_msgSend(v8, sel_URLByAppendingPathComponent_isDirectory_, String._bridgeToObjectiveCImpl()(), isDirectory);
  swift_unknownObjectRelease();
  if (v10)
    goto LABEL_13;
  *(_QWORD *)&v89 = v8;
  *((_QWORD *)&v89 + 1) = v7;
  *(_QWORD *)v90 = v9;
  v11 = URL.absoluteString.getter();
  specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(v11, v12, 1, (uint64_t)v79);
  outlined init with take of LocalePreferences?((uint64_t)v79, (uint64_t)v78, &demangling cache variable for type metadata for URLComponents._URLComponents?);
  outlined init with take of LocalePreferences?((uint64_t)v79, (uint64_t)&v80, &demangling cache variable for type metadata for URLComponents._URLComponents?);
  if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)&v80) != 1)
  {
    v91 = v86;
    *(_OWORD *)v92 = v87;
    *(_OWORD *)&v92[16] = v88[0];
    *(_OWORD *)&v92[26] = *(_OWORD *)((char *)v88 + 10);
    *(_OWORD *)&v90[16] = v82;
    *(_OWORD *)&v90[32] = v83;
    *(_OWORD *)&v90[48] = v84;
    *(_OWORD *)&v90[64] = v85;
    v89 = v80;
    *(_OWORD *)v90 = v81;
    outlined init with take of LocalePreferences?((uint64_t)v78, (uint64_t)v77, &demangling cache variable for type metadata for URLComponents._URLComponents?);
    outlined retain of URLComponents((uint64_t)v77);
    URLComponents._URLComponents.path.getter();
    outlined release of URLComponents?(v79);
    v13 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v14 = objc_msgSend(v13, sel_stringByAppendingPathComponent_, String._bridgeToObjectiveCImpl()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v15 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v17 = v16;

    if (isDirectory)
    {
      v66 = v15;
      v67 = v17;
      swift_bridgeObjectRetain();
      v18._countAndFlagsBits = 47;
      v18._object = (void *)0xE100000000000000;
      String.append(_:)(v18);
      swift_bridgeObjectRelease();
    }
    v19 = HIBYTE(v17) & 0xF;
    if ((v17 & 0x2000000000000000) == 0)
      v19 = v15 & 0xFFFFFFFFFFFFLL;
    if (v19)
    {
      v20 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v15, v17);
      v49 = v21;
      v50 = v20;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v49 = 0xE000000000000000;
      v50 = 0;
    }
    v63 = v92[40];
    v64 = v92[41];
    v61 = *(_QWORD *)&v92[32];
    v62 = *(_QWORD *)&v92[24];
    v59 = *(_QWORD *)&v92[16];
    v60 = *(_QWORD *)&v92[8];
    v58 = v91;
    v57 = *(_OWORD *)&v90[64];
    v56 = *(_OWORD *)&v90[48];
    v55 = *(_OWORD *)&v90[32];
    v54 = *(_QWORD *)&v90[8];
    v53 = *(_OWORD *)&v90[16];
    v51 = HIBYTE(v89);
    v52 = v90[0];
    v35 = BYTE13(v89);
    v36 = BYTE12(v89);
    v37 = BYTE11(v89);
    v38 = BYTE10(v89);
    v39 = BYTE9(v89);
    v40 = v89;
    outlined init with take of LocalePreferences?((uint64_t)&v91 + 8, (uint64_t)v93, &demangling cache variable for type metadata for String?);
    outlined release of String((uint64_t)v93);
    v66 = v40;
    LOBYTE(v67) = 0;
    BYTE1(v67) = v39;
    BYTE2(v67) = v38;
    BYTE3(v67) = v37;
    BYTE4(v67) = v36;
    *(_WORD *)((char *)&v67 + 5) = v35;
    HIBYTE(v67) = v51;
    v68 = v52;
    *(_QWORD *)v69 = v54;
    *(_OWORD *)&v69[8] = v53;
    *(_OWORD *)&v69[24] = v55;
    *(_OWORD *)&v69[40] = v56;
    *(_OWORD *)&v69[56] = v57;
    v70 = v58;
    v71 = v50;
    v72 = v49;
    *(_QWORD *)&v73 = v60;
    *((_QWORD *)&v73 + 1) = v59;
    *(_QWORD *)&v74 = v62;
    *((_QWORD *)&v74 + 1) = v61;
    v75 = v63;
    v76 = v64;
LABEL_29:
    URLComponents.url.getter(v65);
    outlined release of URLComponents((uint64_t)&v66);
    v42 = v65[0];
    if (v65[0])
    {
      v44 = v65[1];
      v43 = v65[2];

      swift_release();
      swift_release();
      v8 = (void *)v42;
      v7 = v44;
      v9 = v43;
    }
  }
LABEL_15:
  *v3 = v8;
  v3[1] = v7;
  v3[2] = v9;
}

void URL.appendingPathComponent(_:isDirectory:)(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  __int128 v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  id v20;
  void *v21;
  id v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  id v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  unsigned __int8 v42;
  char v43;
  char v44;
  char v45;
  char v46;
  unint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  Swift::String v51;
  id v52;
  Swift::String v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  void *v57;
  unint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  char v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char v77;
  _BYTE v78[72];
  char v79;
  uint64_t v80;
  unint64_t v81;
  __int128 v82;
  __int128 v83;
  char v84;
  char v85;
  _BYTE v86[160];
  _BYTE v87[160];
  uint64_t v88[20];
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  _OWORD v97[2];
  _BYTE v98[96];
  __int128 v99;
  _BYTE v100[42];
  _BYTE v101[32];

  v10 = *(void **)v4;
  v9 = *(_QWORD *)(v4 + 8);
  v11 = *(_QWORD *)(v4 + 16);
  if (_foundation_swift_url_feature_enabled())
  {
    if (_foundation_swift_url_feature_enabled())
    {
      specialized URL.appending<A>(path:directoryHint:encodingSlashes:)(a1, a2, (a3 & 1) == 0, 0, (uint64_t)v10, v9);
      return;
    }
    v14._countAndFlagsBits = 47;
    v14._object = (void *)0xE100000000000000;
    String.hasSuffix(_:)(v14);
    *(_QWORD *)v98 = a1;
    *(_QWORD *)&v98[8] = a2;
    swift_bridgeObjectRetain();
    String.init<A>(_:)();
    v15 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v12 = objc_msgSend(v10, sel_URLByAppendingPathComponent_isDirectory_, v15, a3 & 1);
    swift_unknownObjectRelease();
    if (v12)
      goto LABEL_5;
    *(_QWORD *)v98 = v10;
    *(_QWORD *)&v98[8] = v9;
    *(_QWORD *)&v98[16] = v11;
    v18 = URL.absoluteString.getter();
    specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(v18, v19, 1, (uint64_t)v88);
    outlined init with take of LocalePreferences?((uint64_t)v88, (uint64_t)v87, &demangling cache variable for type metadata for URLComponents._URLComponents?);
    outlined init with take of LocalePreferences?((uint64_t)v88, (uint64_t)&v89, &demangling cache variable for type metadata for URLComponents._URLComponents?);
    if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)&v89) == 1)
    {
LABEL_11:
      *a4 = v10;
      a4[1] = v9;
      a4[2] = v11;
      swift_retain();
      v20 = v10;
      swift_retain();
      return;
    }
    v99 = v95;
    *(_OWORD *)v100 = v96;
    *(_OWORD *)&v100[16] = v97[0];
    *(_OWORD *)&v100[26] = *(_OWORD *)((char *)v97 + 10);
    *(_OWORD *)&v98[32] = v91;
    *(_OWORD *)&v98[48] = v92;
    *(_OWORD *)&v98[64] = v93;
    *(_OWORD *)&v98[80] = v94;
    *(_OWORD *)v98 = v89;
    *(_OWORD *)&v98[16] = v90;
    outlined init with take of LocalePreferences?((uint64_t)v87, (uint64_t)v86, &demangling cache variable for type metadata for URLComponents._URLComponents?);
    outlined retain of URLComponents((uint64_t)v86);
    URLComponents._URLComponents.path.getter();
    outlined release of URLComponents?(v88);
    v30 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v75 = a1;
    v76 = a2;
    swift_bridgeObjectRetain();
    String.init<A>(_:)();
    v31 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v32 = objc_msgSend(v30, sel_stringByAppendingPathComponent_, v31);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v33 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    v35 = v34;

    if ((v35 & 0x2000000000000000) != 0)
      v36 = HIBYTE(v35) & 0xF;
    else
      v36 = v33 & 0xFFFFFFFFFFFFLL;
    outlined init with take of LocalePreferences?((uint64_t)&v99 + 8, (uint64_t)v101, &demangling cache variable for type metadata for String?);
    if (v36)
    {
      swift_bridgeObjectRetain();
      v36 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v33, v35);
      v38 = v37;
      swift_bridgeObjectRelease();
    }
    else
    {
      v38 = 0xE000000000000000;
    }
    outlined release of String((uint64_t)v101);
    if ((a3 & 1) != 0
      && (v51._countAndFlagsBits = 47, v51._object = (void *)0xE100000000000000, !String.hasSuffix(_:)(v51)))
    {
      v75 = v33;
      v76 = v35;
      swift_bridgeObjectRetain();
      v53._countAndFlagsBits = 47;
      v53._object = (void *)0xE100000000000000;
      String.append(_:)(v53);
      swift_bridgeObjectRelease();
      v54 = HIBYTE(v35) & 0xF;
      if ((v35 & 0x2000000000000000) == 0)
        v54 = v75 & 0xFFFFFFFFFFFFLL;
      if (v54)
      {
        v36 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v75, v76);
        v56 = v55;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v38 = v56;
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v36 = 0;
        v38 = 0xE000000000000000;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v75 = *(_QWORD *)v98;
    LOBYTE(v76) = 0;
    *(_DWORD *)((char *)&v76 + 1) = *(_DWORD *)&v98[9];
    *(_WORD *)((char *)&v76 + 5) = v98[13];
    HIBYTE(v76) = v98[15];
    v77 = v98[16];
    *(_OWORD *)v78 = *(_OWORD *)&v98[24];
    *(_OWORD *)&v78[16] = *(_OWORD *)&v98[40];
    *(_OWORD *)&v78[32] = *(_OWORD *)&v98[56];
    *(_OWORD *)&v78[48] = *(_OWORD *)&v98[72];
    *(_QWORD *)&v78[64] = *(_QWORD *)&v98[88];
    v79 = v99;
    v80 = v36;
    v81 = v38;
    v82 = *(_OWORD *)&v100[8];
    v83 = *(_OWORD *)&v100[24];
    v84 = v100[40];
    v85 = v100[41];
    URLComponents.url.getter((uint64_t *)&v72);
    outlined release of URLComponents((uint64_t)&v75);
    v52 = v72;
    if (v72)
    {
      v9 = v73;
      v11 = v74;
    }
    else
    {
      swift_retain();
      v52 = v10;
      swift_retain();
    }
    *a4 = v52;
    a4[1] = v9;
    a4[2] = v11;
  }
  else
  {
    v71 = v11;
    v12 = objc_msgSend(v10, sel_URLByAppendingPathComponent_isDirectory_, String._bridgeToObjectiveCImpl()(), a3 & 1);
    swift_unknownObjectRelease();
    if (v12)
    {
LABEL_5:
      URL.init(reference:)(v12, v98);

      v13 = *(_OWORD *)&v98[8];
      *a4 = *(_QWORD *)v98;
      *(_OWORD *)(a4 + 1) = v13;
      return;
    }
    *(_QWORD *)v98 = v10;
    *(_QWORD *)&v98[8] = v9;
    *(_QWORD *)&v98[16] = v11;
    v16 = URL.absoluteString.getter();
    specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(v16, v17, 1, (uint64_t)v88);
    outlined init with take of LocalePreferences?((uint64_t)v88, (uint64_t)v87, &demangling cache variable for type metadata for URLComponents._URLComponents?);
    outlined init with take of LocalePreferences?((uint64_t)v88, (uint64_t)&v89, &demangling cache variable for type metadata for URLComponents._URLComponents?);
    if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)&v89) == 1)
      goto LABEL_11;
    v99 = v95;
    *(_OWORD *)v100 = v96;
    *(_OWORD *)&v100[16] = v97[0];
    *(_OWORD *)&v100[26] = *(_OWORD *)((char *)v97 + 10);
    *(_OWORD *)&v98[32] = v91;
    *(_OWORD *)&v98[48] = v92;
    *(_OWORD *)&v98[64] = v93;
    *(_OWORD *)&v98[80] = v94;
    *(_OWORD *)v98 = v89;
    *(_OWORD *)&v98[16] = v90;
    outlined init with take of LocalePreferences?((uint64_t)v87, (uint64_t)v86, &demangling cache variable for type metadata for URLComponents._URLComponents?);
    outlined retain of URLComponents((uint64_t)v86);
    URLComponents._URLComponents.path.getter();
    outlined release of URLComponents?(v88);
    v21 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v22 = objc_msgSend(v21, sel_stringByAppendingPathComponent_, String._bridgeToObjectiveCImpl()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v23 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v25 = v24;

    if ((a3 & 1) != 0)
    {
      v75 = v23;
      v76 = v25;
      swift_bridgeObjectRetain();
      v26._countAndFlagsBits = 47;
      v26._object = (void *)0xE100000000000000;
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
    }
    v27 = HIBYTE(v25) & 0xF;
    if ((v25 & 0x2000000000000000) == 0)
      v27 = v23 & 0xFFFFFFFFFFFFLL;
    v57 = v10;
    if (v27)
    {
      v28 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v23, v25);
      v58 = v29;
      v59 = v28;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v58 = 0xE000000000000000;
      v59 = 0;
    }
    v69 = v100[40];
    v70 = v100[41];
    v67 = *(_QWORD *)&v100[32];
    v68 = *(_QWORD *)&v100[24];
    v65 = *(_QWORD *)&v100[16];
    v66 = *(_QWORD *)&v100[8];
    v64 = v99;
    v63 = *(_OWORD *)&v98[80];
    v62 = *(_OWORD *)&v98[64];
    v61 = *(_OWORD *)&v98[48];
    v39 = *(_QWORD *)&v98[24];
    v60 = *(_OWORD *)&v98[32];
    v40 = v98[16];
    v41 = v98[15];
    v42 = v98[13];
    v43 = v98[12];
    v44 = v98[11];
    v45 = v98[10];
    v46 = v98[9];
    v47 = *(_QWORD *)v98;
    outlined init with take of LocalePreferences?((uint64_t)&v99 + 8, (uint64_t)v101, &demangling cache variable for type metadata for String?);
    outlined release of String((uint64_t)v101);
    v75 = v47;
    LOBYTE(v76) = 0;
    BYTE1(v76) = v46;
    BYTE2(v76) = v45;
    BYTE3(v76) = v44;
    BYTE4(v76) = v43;
    *(_WORD *)((char *)&v76 + 5) = v42;
    HIBYTE(v76) = v41;
    v77 = v40;
    *(_QWORD *)v78 = v39;
    *(_OWORD *)&v78[8] = v60;
    *(_OWORD *)&v78[24] = v61;
    *(_OWORD *)&v78[40] = v62;
    *(_OWORD *)&v78[56] = v63;
    v79 = v64;
    v80 = v59;
    v81 = v58;
    *(_QWORD *)&v82 = v66;
    *((_QWORD *)&v82 + 1) = v65;
    *(_QWORD *)&v83 = v68;
    *((_QWORD *)&v83 + 1) = v67;
    v84 = v69;
    v85 = v70;
    URLComponents.url.getter((uint64_t *)&v72);
    outlined release of URLComponents((uint64_t)&v75);
    v48 = v72;
    if (v72)
    {
      v49 = v73;
      v50 = v74;
    }
    else
    {
      v50 = v71;
      swift_retain();
      v48 = v57;
      v49 = swift_retain();
    }
    *a4 = v48;
    a4[1] = v49;
    a4[2] = v50;
  }
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance NSObject.KeyValueObservingPublisher<A, B>()
{
  NSObject.KeyValueObservingPublisher.receive<A>(subscriber:)();
}

uint64_t __NSOperationQueueGetOperations(uint64_t a1, void *a2, char a3)
{
  os_unfair_lock_s *v6;
  _QWORD *v7;
  uint64_t v8;

  v6 = (os_unfair_lock_s *)(a1 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  v7 = *(_QWORD **)(a1 + 16);
  if (v7)
  {
    v8 = 0;
    do
    {
      if ((a3 & 1) != 0 || object_getClass(v7) != (Class)_NSBarrierOperation)
      {
        ++v8;
        objc_msgSend(a2, "addObject:", v7);
      }
      v7 = (_QWORD *)v7[2];
    }
    while (v7);
  }
  else
  {
    v8 = 0;
  }
  os_unfair_lock_unlock(v6);
  return v8;
}

uint64_t __NSOPERATIONQUEUE_IS_CANCELLING_AN_OPERATION__(void *a1)
{
  return objc_msgSend(a1, "cancel");
}

void __iop_removeAllDependencies_block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  int v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[128];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 40) + 224));
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(void **)(v2 + 32);
  *(_QWORD *)(v2 + 32) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 224));
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v13, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v15;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v15 != v6)
          objc_enumerationMutation(v3);
        v8 = *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * i);
        os_unfair_lock_lock((os_unfair_lock_t)(v8 + 232));
        os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 40) + 224));
        v9 = atomic_load((unsigned __int8 *)(v8 + 237));
        if (v9 != 244)
        {
          v10 = atomic_load((unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 232));
          if ((v10 & 1) == 0)
          {
            v11 = *(_QWORD *)(a1 + 40);
            v12 = *(_QWORD *)(v11 + 48);
            *(_QWORD *)(v11 + 48) = v12 - 1;
            if (v12 <= 0)
              __assert_rtn("iop_removeAllDependencies_block_invoke", "NSOperation.m", 552, "iop->__unfinished_deps >= 0");
          }
        }
        objc_msgSend(*(id *)(v8 + 48), "removeObject:", *(_QWORD *)(a1 + 32));
        os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 40) + 224));
        os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 232));
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v13, 16);
    }
    while (v5);
  }

}

uint64_t type metadata accessor for Measurement<>.FormatStyle.UnitWidth(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Measurement<>.FormatStyle.UnitWidth);
}

CFCharacterSetRef static CharacterSet.alphanumerics.getter@<X0>(CFCharacterSetRef *a1@<X8>)
{
  CFCharacterSetRef result;
  CFCharacterSetRef v3;

  result = CFCharacterSetGetPredefined(kCFCharacterSetAlphaNumeric);
  if (result)
  {
    v3 = result;
    type metadata accessor for __CharacterSetStorage();
    result = (CFCharacterSetRef)swift_allocObject();
    *((_QWORD *)result + 2) = v3;
    *((_BYTE *)result + 24) = 0;
    *a1 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_18191B328(_Unwind_Exception *exception_object, int a2)
{
  void *v2;
  id v3;

  if (a2)
  {
    if (a2 == 2)
    {
      v3 = objc_begin_catch(exception_object);
      objc_exception_throw(v3);
    }
    objc_begin_catch(exception_object);
    free(v2);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void IndexSet.remove(integersIn:)(uint64_t a1, uint64_t a2)
{
  IndexSet.insert(integersIn:)(a1, a2, (SEL *)&selRef_removeIndexesInRange_);
}

{
  BOOL v2;
  uint64_t v3;

  v2 = __OFADD__(a2, 1);
  v3 = a2 + 1;
  if (v2)
    __break(1u);
  else
    IndexSet.remove(integersIn:)(a1, v3);
}

void service_connection_handler(_xpc_connection_s *a1)
{
  service_connection_handler_make_connection(+[NSXPCListener serviceListener](NSXPCListener, "serviceListener"), a1);
}

uint64_t Notification.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  _QWORD v7[4];
  uint64_t v8;
  unint64_t v9;

  v7[0] = 0;
  v7[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(37);
  swift_bridgeObjectRelease();
  v8 = 0x203D20656D616ELL;
  v9 = 0xE700000000000000;
  v1._countAndFlagsBits = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)v0);
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0x7463656A626F202CLL;
  v2._object = (void *)0xEB00000000203D20;
  String.append(_:)(v2);
  outlined init with copy of Any?(v0 + 8, (uint64_t)v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v3._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x6E4972657375202CLL;
  v4._object = (void *)0xED0000203D206F66;
  String.append(_:)(v4);
  v7[0] = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]?);
  v5._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  return v8;
}

NSNotification __swiftcall Notification._bridgeToObjectiveC()()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  id v9;
  uint64_t v10;
  id v11;
  id v13;
  _QWORD v14[3];
  uint64_t v15;

  v1 = *(void **)v0;
  outlined init with copy of Any?(v0 + 8, (uint64_t)v14);
  v2 = *(void **)(v0 + 40);
  v3 = v15;
  if (!v15)
  {
    swift_bridgeObjectRetain();
    v13 = v1;
    v10 = 0;
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  v4 = __swift_project_boxed_opaque_existential_1(v14, v15);
  v5 = *(_QWORD *)(v3 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v5 + 16))(v8, v6);
  swift_bridgeObjectRetain();
  v9 = v1;
  v10 = _bridgeAnythingToObjectiveC<A>(_:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  if (v2)
LABEL_3:
    v2 = (void *)_NativeDictionary.bridged()();
LABEL_4:
  v11 = objc_msgSend(objc_allocWithZone((Class)NSNotification), sel_initWithName_object_userInfo_, v1, v10, v2);
  swift_unknownObjectRelease();

  return (NSNotification)v11;
}

uint64_t one-time initialization function for _errorDomainUserInfoProviderQueue()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1E0C80A78](v4);
  v5 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v5);
  type metadata accessor for OS_dispatch_queue();
  static DispatchQoS.unspecified.getter();
  v7[1] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E0DEF8D0], v0);
  result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  _errorDomainUserInfoProviderQueue = result;
  return result;
}

void specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  id v2;
  uint64_t v3;
  id v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  _OWORD *v14;
  Swift::Int v15;
  id v16;
  Swift::Int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  _OWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  int64_t v33;
  int64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _OWORD *v37;
  __int128 v38;
  _OWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  _OWORD *v57;
  _OWORD v58[2];

  if (a1)
  {
    if (type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSString) != MEMORY[0x1E0DEA968])
    {
      lazy protocol witness table accessor for type NSString and conformance NSObject();
      swift_unknownObjectRetain();
      if (static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)())
        return;
      v2 = objc_msgSend(a1, sel_count);
      if (v2)
      {
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<NSString, Any>);
        v3 = static _DictionaryStorage.allocate(capacity:)();
      }
      else
      {
        v3 = MEMORY[0x1E0DEE9E0];
      }
      v6 = *(_QWORD **)(v3 + 48);
      v7 = *(_QWORD *)(v3 + 56);
      swift_retain();
      v8 = (int64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v6, v7, a1, (uint64_t)v2);
      if ((v8 & 0x8000000000000000) == 0 && (uint64_t)v2 >= v8)
      {
        *(_QWORD *)(v3 + 16) = v8;
        if (v8)
        {
          v9 = v8 - 1;
          v10 = v3 + 64;
          while (1)
          {
            if (((*(_QWORD *)(v10 + (((unint64_t)v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
              goto LABEL_16;
            v15 = *(_QWORD *)(v3 + 40);
            v16 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v9);
            v17 = NSObject._rawHashValue(seed:)(v15);

            v18 = -1 << *(_BYTE *)(v3 + 32);
            v19 = v17 & ~v18;
            v20 = v19 >> 6;
            if (((-1 << v19) & ~*(_QWORD *)(v10 + 8 * (v19 >> 6))) != 0)
            {
              v21 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)(v10 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
            }
            else
            {
              v22 = 0;
              v23 = (unint64_t)(63 - v18) >> 6;
              do
              {
                if (++v20 == v23 && (v22 & 1) != 0)
                {
                  __break(1u);
                  goto LABEL_48;
                }
                v24 = v20 == v23;
                if (v20 == v23)
                  v20 = 0;
                v22 |= v24;
                v25 = *(_QWORD *)(v10 + 8 * v20);
              }
              while (v25 == -1);
              v21 = __clz(__rbit64(~v25)) + (v20 << 6);
            }
            *(_QWORD *)(v10 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
            if (v9 < (uint64_t)v21)
            {
              *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v21) = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v9);
              v11 = *(_QWORD *)(v3 + 56);
              v12 = (_OWORD *)(v11 + 32 * v9);
              v13 = v12[1];
              v14 = (_OWORD *)(v11 + 32 * v21);
              *v14 = *v12;
              v14[1] = v13;
LABEL_16:
              if (--v9 < 0)
                goto LABEL_46;
            }
            else
            {
              if (v21 == v9)
                goto LABEL_16;
              v26 = *(_QWORD *)(v3 + 48);
              v27 = *(_QWORD *)(v26 + 8 * v21);
              *(_QWORD *)(v26 + 8 * v21) = *(_QWORD *)(v26 + 8 * v9);
              *(_QWORD *)(v26 + 8 * v9) = v27;
              v28 = *(_QWORD *)(v3 + 56);
              v29 = (_OWORD *)(v28 + 32 * v21);
              v30 = (_OWORD *)(v28 + 32 * v9);
              outlined init with take of Any(v29, v58);
              outlined init with take of Any(v30, v29);
              outlined init with take of Any(v58, v30);
              if (v9 < 0)
                goto LABEL_46;
            }
          }
        }
        goto LABEL_46;
      }
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
      return;
    }
    swift_bridgeObjectRelease();
    swift_unknownObjectRetain();
    if (static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)())
      return;
    v4 = objc_msgSend(a1, sel_count);
    if (v4)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v5 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      v5 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    }
    v31 = (_QWORD *)v5[6];
    v32 = v5[7];
    swift_retain();
    v33 = (int64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v31, v32, a1, (uint64_t)v4);
    if (v33 < 0 || (uint64_t)v4 < v33)
      goto LABEL_50;
    v5[2] = v33;
    if (!v33)
    {
LABEL_46:
      swift_release();
      return;
    }
    v34 = v33 - 1;
    v35 = v5 + 8;
    while (1)
    {
      while (1)
      {
        if (((*(_QWORD *)((char *)v35 + (((unint64_t)v34 >> 3) & 0xFFFFFFFFFFFFF8)) >> v34) & 1) != 0)
          goto LABEL_38;
        v40 = (uint64_t *)(v5[6] + 16 * v34);
        v41 = *v40;
        v42 = v40[1];
        swift_bridgeObjectRetain();
        v43 = specialized __RawDictionaryStorage.find<A>(_:)(v41, v42);
        v45 = v44;
        swift_bridgeObjectRelease();
        if ((v45 & 1) == 0)
          break;
        swift_arrayDestroy();
        swift_arrayDestroy();
        v46 = v5[2];
        v47 = __OFSUB__(v46, 1);
        v48 = v46 - 1;
        if (v47)
        {
LABEL_48:
          __break(1u);
          goto LABEL_49;
        }
        v5[2] = v48;
LABEL_38:
        if (--v34 < 0)
          goto LABEL_46;
      }
      *(_QWORD *)((char *)v35 + ((v43 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v43;
      if (v34 < (uint64_t)v43)
      {
        *(_OWORD *)(v5[6] + 16 * v43) = *(_OWORD *)(v5[6] + 16 * v34);
        v36 = v5[7];
        v37 = (_OWORD *)(v36 + 32 * v34);
        v38 = v37[1];
        v39 = (_OWORD *)(v36 + 32 * v43);
        *v39 = *v37;
        v39[1] = v38;
        goto LABEL_38;
      }
      if (v43 == v34)
        goto LABEL_38;
      v49 = v5[6];
      v50 = (uint64_t *)(v49 + 16 * v43);
      v51 = (uint64_t *)(v49 + 16 * v34);
      v52 = *v50;
      v53 = v50[1];
      v54 = v51[1];
      *v50 = *v51;
      v50[1] = v54;
      *v51 = v52;
      v51[1] = v53;
      v55 = v5[7];
      v56 = (_OWORD *)(v55 + 32 * v43);
      v57 = (_OWORD *)(v55 + 32 * v34);
      outlined init with take of Any(v56, v58);
      outlined init with take of Any(v57, v56);
      outlined init with take of Any(v58, v57);
      if (v34 < 0)
        goto LABEL_46;
    }
  }
}

{
  uint64_t v2;
  id v3;
  uint64_t v4;
  id v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  _OWORD *v15;
  void *v16;
  id v17;
  Swift::Int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  _OWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  int64_t v34;
  int64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _OWORD *v38;
  __int128 v39;
  _OWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _OWORD *v57;
  _OWORD *v58;
  _OWORD v59[4];

  if (a1)
  {
    type metadata accessor for NSAttributedStringKey(0);
    if (v2 != MEMORY[0x1E0DEA968])
    {
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
      swift_unknownObjectRetain();
      if (static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)())
        return;
      v3 = objc_msgSend(a1, sel_count);
      if (v3)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSAttributedStringKey, Any>);
        v4 = static _DictionaryStorage.allocate(capacity:)();
      }
      else
      {
        v4 = MEMORY[0x1E0DEE9E0];
      }
      v7 = *(_QWORD *)(v4 + 48);
      v8 = *(_QWORD *)(v4 + 56);
      swift_retain();
      specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v7, v8, a1, (uint64_t)v3);
      if ((v9 & 0x8000000000000000) == 0 && (uint64_t)v3 >= v9)
      {
        *(_QWORD *)(v4 + 16) = v9;
        if (v9)
        {
          v10 = v9 - 1;
          v11 = v4 + 64;
          while (1)
          {
            if (((*(_QWORD *)(v11 + (((unint64_t)v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
              goto LABEL_16;
            v16 = *(void **)(*(_QWORD *)(v4 + 48) + 8 * v10);
            static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
            Hasher.init(_seed:)();
            v17 = v16;
            String.hash(into:)();
            v18 = Hasher._finalize()();

            swift_bridgeObjectRelease();
            v19 = -1 << *(_BYTE *)(v4 + 32);
            v20 = v18 & ~v19;
            v21 = v20 >> 6;
            if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
            {
              v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
            }
            else
            {
              v23 = 0;
              v24 = (unint64_t)(63 - v19) >> 6;
              do
              {
                if (++v21 == v24 && (v23 & 1) != 0)
                {
                  __break(1u);
                  goto LABEL_48;
                }
                v25 = v21 == v24;
                if (v21 == v24)
                  v21 = 0;
                v23 |= v25;
                v26 = *(_QWORD *)(v11 + 8 * v21);
              }
              while (v26 == -1);
              v22 = __clz(__rbit64(~v26)) + (v21 << 6);
            }
            *(_QWORD *)(v11 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
            if (v10 < (uint64_t)v22)
            {
              *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v22) = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v10);
              v12 = *(_QWORD *)(v4 + 56);
              v13 = (_OWORD *)(v12 + 32 * v10);
              v14 = v13[1];
              v15 = (_OWORD *)(v12 + 32 * v22);
              *v15 = *v13;
              v15[1] = v14;
LABEL_16:
              if (--v10 < 0)
                goto LABEL_46;
            }
            else
            {
              if (v22 == v10)
                goto LABEL_16;
              v27 = *(_QWORD *)(v4 + 48);
              v28 = *(_QWORD *)(v27 + 8 * v22);
              *(_QWORD *)(v27 + 8 * v22) = *(_QWORD *)(v27 + 8 * v10);
              *(_QWORD *)(v27 + 8 * v10) = v28;
              v29 = *(_QWORD *)(v4 + 56);
              v30 = (_OWORD *)(v29 + 32 * v22);
              v31 = (_OWORD *)(v29 + 32 * v10);
              outlined init with take of Any(v30, v59);
              outlined init with take of Any(v31, v30);
              outlined init with take of Any(v59, v31);
              if (v10 < 0)
                goto LABEL_46;
            }
          }
        }
        goto LABEL_46;
      }
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
      return;
    }
    swift_bridgeObjectRelease();
    swift_unknownObjectRetain();
    if (static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)())
      return;
    v5 = objc_msgSend(a1, sel_count);
    if (v5)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v6 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      v6 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    }
    v32 = (_QWORD *)v6[6];
    v33 = v6[7];
    swift_retain();
    v34 = (int64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v32, v33, a1, (uint64_t)v5);
    if (v34 < 0 || (uint64_t)v5 < v34)
      goto LABEL_50;
    v6[2] = v34;
    if (!v34)
    {
LABEL_46:
      swift_release();
      return;
    }
    v35 = v34 - 1;
    v36 = v6 + 8;
    while (1)
    {
      while (1)
      {
        if (((*(_QWORD *)((char *)v36 + (((unint64_t)v35 >> 3) & 0xFFFFFFFFFFFFF8)) >> v35) & 1) != 0)
          goto LABEL_38;
        v41 = (uint64_t *)(v6[6] + 16 * v35);
        v42 = *v41;
        v43 = v41[1];
        swift_bridgeObjectRetain();
        v44 = specialized __RawDictionaryStorage.find<A>(_:)(v42, v43);
        v46 = v45;
        swift_bridgeObjectRelease();
        if ((v46 & 1) == 0)
          break;
        swift_arrayDestroy();
        swift_arrayDestroy();
        v47 = v6[2];
        v48 = __OFSUB__(v47, 1);
        v49 = v47 - 1;
        if (v48)
        {
LABEL_48:
          __break(1u);
          goto LABEL_49;
        }
        v6[2] = v49;
LABEL_38:
        if (--v35 < 0)
          goto LABEL_46;
      }
      *(_QWORD *)((char *)v36 + ((v44 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v44;
      if (v35 < (uint64_t)v44)
      {
        *(_OWORD *)(v6[6] + 16 * v44) = *(_OWORD *)(v6[6] + 16 * v35);
        v37 = v6[7];
        v38 = (_OWORD *)(v37 + 32 * v35);
        v39 = v38[1];
        v40 = (_OWORD *)(v37 + 32 * v44);
        *v40 = *v38;
        v40[1] = v39;
        goto LABEL_38;
      }
      if (v44 == v35)
        goto LABEL_38;
      v50 = v6[6];
      v51 = (uint64_t *)(v50 + 16 * v44);
      v52 = (uint64_t *)(v50 + 16 * v35);
      v53 = *v51;
      v54 = v51[1];
      v55 = v52[1];
      *v51 = *v52;
      v51[1] = v55;
      *v52 = v53;
      v52[1] = v54;
      v56 = v6[7];
      v57 = (_OWORD *)(v56 + 32 * v44);
      v58 = (_OWORD *)(v56 + 32 * v35);
      outlined init with take of Any(v57, v59);
      outlined init with take of Any(v58, v57);
      outlined init with take of Any(v59, v58);
      if (v35 < 0)
        goto LABEL_46;
    }
  }
}

unint64_t lazy protocol witness table accessor for type NSString and conformance NSObject()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type NSString and conformance NSObject;
  if (!lazy protocol witness table cache variable for type NSString and conformance NSObject)
  {
    v1 = type metadata accessor for NSMorphologyPronoun(255, (unint64_t *)&lazy cache variable for type metadata for NSString);
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEFCF8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSString and conformance NSObject);
  }
  return result;
}

void specialized NSKeyValueObservation.Helper._swizzle_me_observeValue(forKeyPath:of:change:context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  os_unfair_lock_s *v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  _OWORD v32[2];
  __int128 v33;
  __int128 v34;
  _QWORD v35[5];
  char v36;
  __int128 v37;
  __int128 v38;

  v3 = v2;
  v6 = *(os_unfair_lock_s **)(v3
                            + OBJC_IVAR____TtCC10Foundation21NSKeyValueObservationP33_6DA0945A07226B3278459E9368612FF46Helper_lock);
  os_unfair_lock_lock(v6);
  outlined init with copy of Any?(a1, (uint64_t)&v33);
  if (*((_QWORD *)&v34 + 1))
  {
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v7 = (id)v37;
      v8 = *(void **)(v3
                    + OBJC_IVAR____TtCC10Foundation21NSKeyValueObservationP33_6DA0945A07226B3278459E9368612FF46Helper_unsafeUnretainedObject);
      if (v8)
      {
        v9 = v8;
      }
      else
      {
        v9 = (id)MEMORY[0x186DA9F5C](v3+ OBJC_IVAR____TtCC10Foundation21NSKeyValueObservationP33_6DA0945A07226B3278459E9368612FF46Helper_weakObject);
        if (!v9)
          goto LABEL_30;
      }
      if (v7 != v9)
      {

        goto LABEL_31;
      }
      if (a2)
      {
        v10 = v7;
        os_unfair_lock_unlock(v6);
        static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("kind"));
        v11 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(a2 + 16) && (v12 = specialized __RawDictionaryStorage.find<A>(_:)(v11), (v13 & 1) != 0))
        {
          outlined init with copy of Any(*(_QWORD *)(a2 + 56) + 32 * v12, (uint64_t)&v37);
        }
        else
        {
          v37 = 0u;
          v38 = 0u;
        }
        swift_unknownObjectRelease();
        if (!*((_QWORD *)&v38 + 1))
        {
          __break(1u);
          return;
        }
        outlined init with take of Any(&v37, &v33);
        swift_dynamicCast();
        v14 = *(_QWORD *)&v32[0];
        static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("new"));
        v15 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(a2 + 16) && (v16 = specialized __RawDictionaryStorage.find<A>(_:)(v15), (v17 & 1) != 0))
        {
          outlined init with copy of Any(*(_QWORD *)(a2 + 56) + 32 * v16, (uint64_t)&v37);
        }
        else
        {
          v37 = 0u;
          v38 = 0u;
        }
        swift_unknownObjectRelease();
        static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("old"));
        v18 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(a2 + 16) && (v19 = specialized __RawDictionaryStorage.find<A>(_:)(v18), (v20 & 1) != 0))
          outlined init with copy of Any(*(_QWORD *)(a2 + 56) + 32 * v19, (uint64_t)v32);
        else
          memset(v32, 0, sizeof(v32));
        swift_unknownObjectRelease();
        static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("indexes"));
        v21 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(a2 + 16) && (v22 = specialized __RawDictionaryStorage.find<A>(_:)(v21), (v23 & 1) != 0))
        {
          outlined init with copy of Any(*(_QWORD *)(a2 + 56) + 32 * v22, (uint64_t)&v30);
        }
        else
        {
          v30 = 0u;
          v31 = 0u;
        }
        swift_unknownObjectRelease();
        if (*((_QWORD *)&v31 + 1))
        {
          outlined init with take of Any(&v30, &v33);
          swift_dynamicCast();
          v24 = v29;
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v30, &demangling cache variable for type metadata for Any?);
          v24 = 0;
        }
        static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("notificationIsPrior"));
        v25 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(a2 + 16) && (v26 = specialized __RawDictionaryStorage.find<A>(_:)(v25), (v27 & 1) != 0))
        {
          outlined init with copy of Any(*(_QWORD *)(a2 + 56) + 32 * v26, (uint64_t)&v33);
        }
        else
        {
          v33 = 0u;
          v34 = 0u;
        }
        swift_unknownObjectRelease();
        if (*((_QWORD *)&v34 + 1))
        {
          if (swift_dynamicCast())
          {
            v28 = v30;
LABEL_43:
            *(_QWORD *)&v33 = v14;
            outlined init with take of Any?((uint64_t)&v37, (uint64_t)&v33 + 8);
            outlined init with take of Any?((uint64_t)v32, (uint64_t)v35);
            v35[4] = v24;
            v36 = v28;
            (*(void (**)(id, __int128 *))(v3
                                                   + OBJC_IVAR____TtCC10Foundation21NSKeyValueObservationP33_6DA0945A07226B3278459E9368612FF46Helper_callback))(v10, &v33);

            outlined destroy of Any?((uint64_t)&v33, &demangling cache variable for type metadata for NSKeyValueObservedChange<Any>);
            return;
          }
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v33, &demangling cache variable for type metadata for Any?);
        }
        v28 = 0;
        goto LABEL_43;
      }

LABEL_30:
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v33, &demangling cache variable for type metadata for Any?);
  }
LABEL_31:
  os_unfair_lock_unlock(v6);
}

uint64_t partial apply for closure #1 in _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)(void *a1, uint64_t *a2)
{
  uint64_t v2;

  return closure #1 in _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)(a1, a2, *(void (**)(char *, _QWORD *))(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t closure #1 in _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)(void *a1, uint64_t *a2, void (*a3)(char *, _QWORD *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  id v22;
  uint64_t v24;
  void (*v25)(char *, _QWORD *);
  uint64_t v26;
  void *v27;

  v24 = a4;
  v25 = a3;
  v26 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (int *)type metadata accessor for NSKeyValueObservedChange(0, v14, v12, v13);
  v16 = *((_QWORD *)v15 - 1);
  MEMORY[0x1E0C80A78](v15);
  v18 = (uint64_t *)((char *)&v24 - v17);
  v19 = *a2;
  closure #1 in closure #1 in _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)((uint64_t)(a2 + 1), a6, (uint64_t)&v24 + v15[7] - v17);
  closure #1 in closure #1 in _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)((uint64_t)(a2 + 5), a6, (uint64_t)v18 + v15[8]);
  v20 = a2[9];
  v21 = *((_BYTE *)a2 + 80);
  *v18 = v19;
  *(_QWORD *)((char *)v18 + v15[9]) = v20;
  *((_BYTE *)v18 + v15[10]) = v21;
  v27 = a1;
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  swift_retain();
  v22 = a1;
  swift_dynamicCast();
  v25(v11, v18);
  (*(void (**)(_QWORD *, int *))(v16 + 8))(v18, v15);
  return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v11, a5);
}

uint64_t closure #1 in closure #1 in _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(_OWORD *, uint64_t, uint64_t);
  int v10;
  int v12;
  uint64_t v13;
  _BYTE v14[32];
  __int128 v15;
  uint64_t v16;
  _OWORD v17[2];

  v6 = swift_conformsToProtocol2();
  if (v6)
    v7 = v6;
  else
    v7 = 0;
  if (v6)
    v8 = a2;
  else
    v8 = 0;
  if (v8)
  {
    outlined init with copy of Any?(a1, (uint64_t)&v15);
    if (v16)
    {
      outlined init with take of Any(&v15, v17);
      v9 = *(void (**)(_OWORD *, uint64_t, uint64_t))(v7 + 8);
      v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
      *(_QWORD *)&v15 = swift_allocObject();
      v9(v17, v8, v7);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
      outlined init with copy of Any((uint64_t)&v15, (uint64_t)v14);
      outlined init with take of Any?((uint64_t)v14, (uint64_t)&v13);
      v10 = swift_dynamicCast();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a3, v10 ^ 1u, 1, a2);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v15);
    }
    outlined destroy of Any?((uint64_t)&v15, &demangling cache variable for type metadata for Any?);
  }
  outlined init with copy of Any?(a1, (uint64_t)v17);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v12 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a3, v12 ^ 1u, 1, a2);
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t destroy for NSKeyValueObservedChange(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = a1 + v4 + 8;
  v6 = ~v4;
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (!v7(v5 & ~v4, 1, v2))
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5 & ~v4, v2);
  if (*(_DWORD *)(v3 + 84))
    v8 = *(_QWORD *)(v3 + 64);
  else
    v8 = *(_QWORD *)(v3 + 64) + 1;
  if (!v7(((v5 | v4) + v8) & v6, 1, v2))
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(((v5 | v4) + v8) & v6, v2);
  return swift_release();
}

uint64_t type metadata accessor for NSKeyValueObservedChange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NSKeyValueObservedChange);
}

uint64_t partial apply for closure #1 in NSObject.KVOSubscription.init(_:_:_:_:)()
{
  return closure #1 in NSObject.KVOSubscription.init(_:_:_:_:)();
}

uint64_t closure #1 in NSObject.KVOSubscription.init(_:_:_:_:)()
{
  uint64_t result;

  result = swift_weakLoadStrong();
  if (result)
  {
    NSObject.KVOSubscription.changes()();
    return swift_release();
  }
  return result;
}

uint64_t NSObject.KVOSubscription.changes()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  id v18;
  os_unfair_lock_s *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;

  v1 = v0;
  v2 = *v0;
  v3 = *(_QWORD *)(*v0 + 96);
  v4 = type metadata accessor for Optional();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v32 - v6;
  v8 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v9);
  v36 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v2 + 88);
  v12 = *(_QWORD *)(v11 - 8);
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x186DA9F5C]((char *)v1 + *(_QWORD *)(v2 + 152), v14);
  if (result)
  {
    v34 = v11;
    v35 = v12;
    v37 = result;
    v18 = (id)result;
    swift_getAtKeyPath();
    v33 = v18;

    v19 = *(os_unfair_lock_s **)((char *)v1 + *(_QWORD *)(*v1 + 176));
    os_unfair_lock_lock(v19);
    v20 = v1[3];
    static Subscribers.Demand.unlimited.getter();
    result = static Subscribers.Demand.== infix(_:_:)();
    if ((result & 1) == 0)
    {
      if (v20 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      if (!v20)
      {
LABEL_7:
        v21 = v35;
        if ((v1[4] & 1) == 0 && (*((_BYTE *)v1 + *(_QWORD *)(*v1 + 160)) & 4) != 0)
        {
          v22 = (char *)v1 + *(_QWORD *)(*v1 + 136);
          v23 = v34;
          v24 = type metadata accessor for Optional();
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v22, v24);
          (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v22, v16, v23);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v22, 0, 1, v23);
          *((_BYTE *)v1 + 32) = 1;
        }
        os_unfair_lock_unlock(v19);

        return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v16, v34);
      }
    }
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, (char *)v1 + *(_QWORD *)(*v1 + 144), v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, v3) == 1)
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      goto LABEL_7;
    }
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v36, v7, v3);
    v25 = v1[3];
    static Subscribers.Demand.unlimited.getter();
    v26 = static Subscribers.Demand.== infix(_:_:)();
    v21 = v35;
    if ((v26 & 1) != 0)
      goto LABEL_18;
    static Subscribers.Demand.unlimited.getter();
    result = static Subscribers.Demand.== infix(_:_:)();
    if ((result & 1) != 0)
    {
      v27 = static Subscribers.Demand.unlimited.getter();
LABEL_17:
      v1[3] = v27;
LABEL_18:
      os_unfair_lock_unlock(v19);
      os_unfair_recursive_lock_lock_with_options();
      v28 = dispatch thunk of Subscriber.receive(_:)();
      os_unfair_recursive_lock_unlock();
      os_unfair_lock_lock(v19);
      v29 = v1[3];
      static Subscribers.Demand.unlimited.getter();
      if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0)
      {
LABEL_28:
        os_unfair_lock_unlock(v19);

        (*(void (**)(char *, uint64_t))(v8 + 8))(v36, v3);
        return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v16, v34);
      }
      static Subscribers.Demand.unlimited.getter();
      v30 = static Subscribers.Demand.== infix(_:_:)();
      v31 = static Subscribers.Demand.unlimited.getter();
      if ((v30 & 1) != 0)
      {
        v21 = v35;
LABEL_27:
        v1[3] = v31;
        goto LABEL_28;
      }
      result = static Subscribers.Demand.== infix(_:_:)();
      v21 = v35;
      if ((result & 1) != 0)
        goto LABEL_25;
      if (((v29 | v28) & 0x8000000000000000) == 0)
      {
        v31 = v29 + v28;
        if (!__OFADD__(v29, v28))
        {
          if ((v31 & 0x8000000000000000) == 0)
            goto LABEL_27;
LABEL_35:
          __break(1u);
          return result;
        }
LABEL_25:
        v31 = static Subscribers.Demand.unlimited.getter();
        goto LABEL_27;
      }
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    if ((v25 & 0x8000000000000000) == 0)
    {
      if (v25)
      {
        v27 = v25 - 1;
        goto LABEL_17;
      }
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A];
  if (!lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A]);
  }
  return result;
}

double protocol witness for static _OptionalForKVO._castForKVO(_:) in conformance A?@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return static Optional._castForKVO(_:)(a1, *(_QWORD *)(a2 + 16), a3);
}

double static Optional._castForKVO(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  uint64_t v11;
  void (*v12)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t *boxed_opaque_existential_1;
  double result;
  _BYTE v15[32];

  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = &v15[-v8];
  outlined init with copy of Any(a1, (uint64_t)v15);
  v10 = swift_dynamicCast();
  v11 = *(_QWORD *)(a2 - 8);
  v12 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  if (v10)
  {
    v12(v9, 0, 1, a2);
    *(_QWORD *)(a3 + 24) = a2;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a3);
    (*(void (**)(uint64_t *, _BYTE *, uint64_t))(v11 + 32))(boxed_opaque_existential_1, v9, a2);
  }
  else
  {
    v12(v9, 1, 1, a2);
    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

uint64_t destroy for JSONError(uint64_t a1)
{
  return outlined consume of JSONError(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
}

uint64_t dispatch thunk of DataProtocol.regions.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

ValueMetadata *type metadata accessor for AttributeScopes()
{
  return &type metadata for AttributeScopes;
}

void IndexPath.Storage.subscript.setter()
{
  __asm { BR              X9 }
}

{
  __asm { BR              X10 }
}

void sub_18191D570()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (v0)
  {
    __break(1u);
    JUMPOUT(0x18191D5FCLL);
  }
  *(_QWORD *)v1 = v2;
  *(_QWORD *)(v1 + 8) = 0;
  *(_BYTE *)(v1 + 16) = v3;
}

void sub_18191D604()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._object = (void *)0x8000000182306840;
  v1._countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

_BYTE *closure #1 in Data.init<A>(_:)@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = (_BYTE *)specialized Data.InlineData.init(_:)(result, a2);
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = (_BYTE *)specialized Data.LargeSlice.init(_:)((unint64_t)result, (uint64_t)a2);
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = specialized Data.InlineSlice.init(_:)((unint64_t)result, (uint64_t)a2);
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

void *specialized Data.InlineSlice.init(_:)(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *result;

  if (a1)
    v3 = a2 - a1;
  else
    v3 = 0;
  type metadata accessor for __DataStorage();
  swift_allocObject();
  result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v3 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v3 & 0x80000000) == 0)
    return (void *)(v3 << 32);
LABEL_10:
  __break(1u);
  return result;
}

__n128 protocol witness for Collection.endIndex.getter in conformance AttributedString.Runs@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;
  __int128 v4;

  v2 = *(_OWORD *)(v1 + 88);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 72);
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(v1 + 104);
  v4 = *(_OWORD *)(v1 + 120);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t type metadata instantiation function for ListFormatStyle()
{
  return swift_allocateGenericValueMetadata();
}

id Notification.name.getter()
{
  id *v0;

  return *v0;
}

Protocol *__setProtocolMetadata_block_invoke()
{
  Protocol *result;

  result = objc_getProtocol("NSObject");
  qword_1ECD0A8F0 = (uint64_t)result;
  return result;
}

void NSSetUncaughtExceptionHandler(NSUncaughtExceptionHandler *a1)
{
  _CFDoExceptionOperation();
}

uint64_t Locale.languageCode.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 152))(ObjectType, v1);
}

uint64_t static Locale.characterDirection(forLanguage:)(uint64_t a1, uint64_t a2)
{
  return static Locale.characterDirection(forLanguage:)(a1, a2, Locale.Language.characterDirection.getter);
}

uint64_t type metadata accessor for _MutableHandle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _MutableHandle);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance String._BlockSearchingOptions(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

Swift::Void __swiftcall URLRequest.setValue(_:forHTTPHeaderField:)(Swift::String_optional _, Swift::String forHTTPHeaderField)
{
  uint64_t v2;
  void *object;
  uint64_t countAndFlagsBits;

  object = _.value._object;
  countAndFlagsBits = _.value._countAndFlagsBits;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized URLRequest._applyMutation<A>(_:)(v2, countAndFlagsBits, (uint64_t)object);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <A> PredicateExpressions.Value<A>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return PredicateExpressions.Value<A>.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8), a4);
}

uint64_t PredicateExpressions.Value<A>.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[4];
  char *v27;

  v23 = a4;
  v24 = *(_QWORD *)(a2 - 8);
  v25 = a3;
  MEMORY[0x1E0C80A78](a1);
  v27 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PredicateExpressions.Value(0, v8, v9, v10);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v19 - v13;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v4)
  {
    v20 = v14;
    v21 = v12;
    v22 = v11;
    v15 = v24;
    __swift_project_boxed_opaque_existential_1(v26, v26[3]);
    v16 = v27;
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    v17 = v20;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v20, v16, a2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
    (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(v23, v17, v22);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t type metadata accessor for PredicateExpressions.Value(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PredicateExpressions.Value);
}

void _NSAllocatorDeallocateWithBlock(uint64_t a1, void (**a2)(_QWORD))
{
  a2[2](a2);

}

void protocol witness for Collection.subscript.read in conformance AttributedString.CharacterView(void **a1)
{
  void *v1;

  v1 = *a1;
  swift_bridgeObjectRelease();
  free(v1);
}

ValueMetadata *type metadata accessor for AttributedString.Index()
{
  return &type metadata for AttributedString.Index;
}

uint64_t __DataStorage.init(capacity:)(uint64_t result)
{
  int64_t v1;
  uint64_t v2;
  Swift::Int v3;
  BOOL v4;
  Swift::Int v5;
  unsigned int v6;

  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  if (result > 0x3FFFFFFFFFFFFFFELL)
  {
    __break(1u);
  }
  else
  {
    v1 = result;
    if (one-time initialization token for vmOpsThreshold == -1)
      goto LABEL_3;
  }
  result = swift_once();
LABEL_3:
  if (static __DataStorage.vmOpsThreshold > v1)
    goto LABEL_10;
  if (one-time initialization token for _pageSize != -1)
    result = swift_once();
  v3 = _pageSize + v1;
  if (__OFADD__(_pageSize, v1))
  {
    __break(1u);
    goto LABEL_15;
  }
  v4 = __OFSUB__(v3, 1);
  v5 = v3 - 1;
  if (v4)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (__OFSUB__(_pageSize, 1))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v1 = v5 & ~(_pageSize - 1);
LABEL_10:
  *(_QWORD *)(v2 + 24) = 0;
  v6 = 0;
  _So30malloc_type_layout_semantics_ta_generic_data_setter((_WORD *)&v6 + 1);
  result = (uint64_t)malloc_type_malloc(v1, (unint64_t)v6 << 32);
  if (result)
  {
    *(_QWORD *)(v2 + 16) = result;
    *(_BYTE *)(v2 + 64) = 1;
    *(_QWORD *)(v2 + 32) = v1;
    *(_QWORD *)(v2 + 40) = 0;
    return v2;
  }
LABEL_17:
  __break(1u);
  return result;
}

id NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)(void **a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  void *v6;
  void *v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;
  _QWORD v18[6];

  v6 = v5;
  v10 = a2;
  v11 = *a1;
  if (a2)
  {
    type metadata accessor for NSURLResourceKey(0);
    v12 = v11;
    swift_bridgeObjectRetain();
    v10 = (void *)_ContiguousArrayBuffer._asCocoaArray()();
  }
  else
  {
    v13 = v11;
  }
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a4;
  *(_QWORD *)(v14 + 24) = a5;
  v18[4] = partial apply for closure #1 in NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:);
  v18[5] = v14;
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 1107296256;
  v18[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool);
  v18[3] = &block_descriptor_1;
  v15 = _Block_copy(v18);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(a4);
  swift_release();
  v16 = (id)__NSFileManagerEnumeratorAtURL(v6, (uint64_t)v11, (uint64_t)v10, a3, (uint64_t)v15);
  _Block_release(v15);

  return v16;
}

uint64_t __NSFileManagerEnumeratorAtURL(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[6];

  v6[5] = *MEMORY[0x1E0C80C00];
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = ____NSFileManagerEnumeratorAtURL_block_invoke;
  v6[3] = &unk_1E0F4DD80;
  v6[4] = a5;
  return objc_msgSend(a1, "enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:", a2, a3, a4, v6);
}

uint64_t outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

double protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance URL(void *a1, uint64_t a2)
{
  double result;
  uint64_t v5;
  __int128 v6;

  outlined consume of URL?(*(void **)a2);
  URL.init(reference:)(a1, &v5);
  *(_QWORD *)a2 = v5;
  result = *(double *)&v6;
  *(_OWORD *)(a2 + 8) = v6;
  return result;
}

void NSCopyMemoryPages(const void *source, void *dest, NSUInteger bytes)
{
  if (vm_copy(*MEMORY[0x1E0C83DA0], (vm_address_t)source, bytes, (vm_address_t)dest))
    memmove(dest, source, bytes);
}

double protocol witness for Sequence.makeIterator() in conformance NSArray@<D0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return NSFastEnumerationIterator.init(_:)(*v1, a1);
}

uint64_t ____mainNSThread_block_invoke()
{
  uint64_t v0;
  uint64_t result;

  v0 = objc_opt_new();
  atomic_store(0xEu, (unsigned __int8 *)(*(_QWORD *)(v0 + 8) + 55));
  result = pthread_main_thread_np();
  *(_QWORD *)(*(_QWORD *)(v0 + 8) + 136) = result;
  qword_1ECD099F8 = v0;
  return result;
}

uint64_t initializeWithCopy for AttributedString.UnicodeScalarView(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_retain();
  return a1;
}

uint64_t BinaryFloatingPoint.formatted<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a5 + 48))(v5, a3, a5);
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance FloatingPointFormatStyle<A>.Percent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = FloatingPointFormatStyle.Percent.format(_:)(a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t type metadata accessor for ICUNumberFormatterBase.FormatResult()
{
  return objc_opt_self();
}

uint64_t ICUNumberFormatterBase.FormatResult.init(formatter:value:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = unumf_openResult();
  if (!v1)
    __break(1u);
  *(_QWORD *)(v0 + 16) = v1;
  unumf_formatDouble();
  return v0;
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = unumf_openResult();
  if (!v1)
    __break(1u);
  *(_QWORD *)(v0 + 16) = v1;
  unumf_formatInt();
  return v0;
}

uint64_t specialized _withResizingUCharBuffer(initialSize:_:)(int a1)
{
  uint64_t isStackAllocationSafe;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9[3];

  v9[2] = *MEMORY[0x1E0C80C00];
  if (a1 < 0)
    __break(1u);
  isStackAllocationSafe = swift_retain_n();
  if (a1 < 513 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v4 = (char *)&v9[-1] - v3;
    swift_retain();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)v4, v9);
    v5 = v9[0];
    swift_release_n();
  }
  else
  {
    v6 = swift_slowAlloc();
    swift_retain();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)(v6, v9);
    MEMORY[0x186DA9E78](v6, -1, -1);
    swift_release_n();
    return v9[0];
  }
  return v5;
}

{
  uint64_t isStackAllocationSafe;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9[3];

  v9[2] = *MEMORY[0x1E0C80C00];
  if (a1 < 0)
    __break(1u);
  isStackAllocationSafe = swift_retain_n();
  if (a1 < 513 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v4 = (char *)&v9[-1] - v3;
    swift_retain();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)v4, v9);
    v5 = v9[0];
    swift_release_n();
  }
  else
  {
    v6 = swift_slowAlloc();
    swift_retain();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)(v6, v9);
    MEMORY[0x186DA9E78](v6, -1, -1);
    swift_release_n();
    return v9[0];
  }
  return v5;
}

{
  uint64_t isStackAllocationSafe;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9[3];

  v9[2] = *MEMORY[0x1E0C80C00];
  if (a1 < 0)
    __break(1u);
  swift_retain_n();
  isStackAllocationSafe = swift_retain_n();
  if (a1 < 513 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v4 = (char *)&v9[-1] - v3;
    swift_retain();
    swift_retain();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)v4, v9);
    v5 = v9[0];
    swift_release_n();
    swift_release_n();
  }
  else
  {
    v6 = swift_slowAlloc();
    swift_retain();
    swift_retain();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)(v6, v9);
    MEMORY[0x186DA9E78](v6, -1, -1);
    swift_release_n();
    swift_release_n();
    return v9[0];
  }
  return v5;
}

uint64_t specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v9 = 0;
  if (!a1)
    __break(1u);
  v4 = unumf_resultToString();
  if (v4 <= 0)
  {
    result = swift_release();
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    v5 = specialized String.init(_utf16:)(a1, v4);
    v7 = v6;
    result = swift_release();
    *a2 = v5;
    a2[1] = v7;
  }
  return result;
}

{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v9 = 0;
  if (!a1)
    __break(1u);
  v4 = udat_formatForFields();
  if (v4 <= 0)
  {
    result = swift_release();
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    v5 = specialized String.init(_utf16:)(a1, v4);
    v7 = v6;
    result = swift_release();
    *a2 = v5;
    a2[1] = v7;
  }
  return result;
}

{
  int TimeZoneDisplayName;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v9 = 0;
  if (!a1)
    __break(1u);
  String.utf8CString.getter();
  TimeZoneDisplayName = ucal_getTimeZoneDisplayName();
  swift_release();
  if (TimeZoneDisplayName <= 0)
  {
    result = swift_bridgeObjectRelease();
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    v5 = specialized String.init(_utf16:)(a1, TimeZoneDisplayName);
    v7 = v6;
    result = swift_bridgeObjectRelease();
    *a2 = v5;
    a2[1] = v7;
  }
  return result;
}

{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v9 = 0;
  if (!a1)
    __break(1u);
  v4 = unum_formatInt64();
  if (v4 <= 0)
  {
    result = swift_release();
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    v5 = specialized String.init(_utf16:)(a1, v4);
    v7 = v6;
    result = swift_release();
    *a2 = v5;
    a2[1] = v7;
  }
  return result;
}

{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v9 = 0;
  if (!a1)
    __break(1u);
  v4 = udat_formatForFields();
  if (v4 <= 0)
  {
    swift_release();
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    v5 = specialized String.init(_utf16:)(a1, v4);
    v7 = v6;
    swift_release();
    *a2 = v5;
    a2[1] = v7;
  }
  return swift_release();
}

{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v9 = 0;
  if (!a1)
    __break(1u);
  v4 = udtitvfmt_format();
  if (v4 <= 0)
  {
    result = swift_release();
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    v5 = specialized String.init(_utf16:)(a1, v4);
    v7 = v6;
    result = swift_release();
    *a2 = v5;
    a2[1] = v7;
  }
  return result;
}

{
  uint64_t result;
  uint64_t v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = 0;
  if (!a1)
    __break(1u);
  MEMORY[0x186DAA1F0]();
  result = udat_format();
  if ((int)result <= 0)
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    result = specialized String.init(_utf16:)(a1, result);
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

{
  int Symbols;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v9 = 0;
  if (!a1)
    __break(1u);
  Symbols = udat_getSymbols();
  if (Symbols <= 0)
  {
    result = swift_release();
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    v5 = specialized String.init(_utf16:)(a1, Symbols);
    v7 = v6;
    result = swift_release();
    *a2 = v5;
    a2[1] = v7;
  }
  return result;
}

uint64_t specialized String.init(_utf16:)(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v2;
  unsigned __int16 *v4;
  uint64_t v5;
  _BYTE *v7;
  _QWORD v9[3];

  v9[2] = *MEMORY[0x1E0C80C00];
  v2 = 3 * a2;
  if ((unsigned __int128)(a2 * (__int128)3) >> 64 != (3 * a2) >> 63)
  {
    __break(1u);
LABEL_9:
    __break(1u);
  }
  if (v2 < 0)
    goto LABEL_9;
  v4 = (unsigned __int16 *)isStackAllocationSafe;
  if (v2 <= 1024 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    closure #1 in String.init(_utf16:)((_BYTE *)&v9[-1] - v5, v4, a2, v9);
    return v9[0];
  }
  else
  {
    v7 = (_BYTE *)swift_slowAlloc();
    closure #1 in String.init(_utf16:)(v7, v4, a2, v9);
    MEMORY[0x186DA9E78](v7, -1, -1);
    return v9[0];
  }
}

_BYTE *closure #1 in String.init(_utf16:)@<X0>(_BYTE *result@<X0>, unsigned __int16 *a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  unsigned __int16 *v4;
  _BYTE *v5;
  unsigned int v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int16 *v10;
  unsigned int v11;
  unsigned __int16 *v12;
  unsigned __int8 v13;
  BOOL v14;
  unsigned __int8 v15;
  char v16;
  unsigned int v17;
  char v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  int v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  char v33[32];
  unsigned int v34;
  unsigned __int8 v35;

  v4 = a2;
  v5 = result;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  if (a2)
    v10 = &a2[a3];
  else
    v10 = 0;
  v34 = 0;
  v35 = 0;
  while (1)
  {
    if (v8)
    {
      if ((v7 & 0xF800) != 0xD800)
      {
        v32 = a4;
        lazy protocol witness table accessor for type Unicode.UTF16.ForwardParser and conformance Unicode.UTF16.ForwardParser();
        result = Locale.Language.components.modify();
        v25 = *(_BYTE *)(v24 + 4);
        if (!v25)
          goto LABEL_60;
        *(_DWORD *)v24 = *(unsigned __int16 *)(v24 + 2);
        *(_BYTE *)(v24 + 4) = v25 - 16;
        result = (_BYTE *)((uint64_t (*)(char *, _QWORD))result)(v33, 0);
        v7 = (unsigned __int16)v7;
        v16 = 1;
        a4 = v32;
        goto LABEL_35;
      }
      if (!v4)
        goto LABEL_27;
      v12 = v4;
      v13 = v8;
      if (v4 == v10)
        goto LABEL_26;
    }
    else
    {
      if (!v4 || v4 == v10)
      {
LABEL_55:
        if (v9 < 0)
        {
          __break(1u);
LABEL_60:
          __break(1u);
        }
        else
        {
          v30 = a4;
          result = (_BYTE *)static String._tryFromUTF8(_:)();
          *v30 = result;
          v30[1] = v31;
        }
        return result;
      }
      v11 = *v4;
      v12 = v4 + 1;
      if ((v11 & 0xF800) != 0xD800)
      {
        v16 = 1;
        ++v4;
        v7 = v11;
        goto LABEL_35;
      }
      v7 = v7 & 0xFFFF0000 | v11;
      v34 = v7;
      v13 = 16;
      ++v4;
      if (v12 == v10)
      {
LABEL_26:
        v8 = v13;
        goto LABEL_27;
      }
    }
    v4 = v12 + 1;
    v7 = (*v12 << v13) | ((-65535 << v13) - 1) & v7;
    v8 = v13 + 16;
    if ((v13 + 16) <= 0x1Fu)
    {
      if (v4 == v10)
      {
        if (v13 == 0xF0)
          goto LABEL_55;
        goto LABEL_27;
      }
      v4 = v12 + 2;
      v7 = ((-65535 << v8) - 1) & v7 | (v12[1] << v8);
      v8 = v13 + 32;
      if (v13 < 0xF0u)
      {
        v15 = v13 + 32;
LABEL_22:
        v8 = v15;
        goto LABEL_27;
      }
      v14 = v4 == v10;
      v4 = v10;
      if (!v14)
      {
        v7 = ((-65535 << v13) - 1) & v7 | (v12[2] << v13);
        v15 = v13 + 48;
        if (v8 >= 0x10u)
        {
          v4 = v12 + 3;
          goto LABEL_22;
        }
        v8 = v15;
        v4 = v10;
      }
    }
LABEL_27:
    v17 = v7 & 0xFC00FC00;
    if ((v7 & 0xFC00FC00) == 0xDC00D800)
      v18 = 32;
    else
      v18 = 16;
    v35 = v8 - v18;
    if (v17 == -603924480)
      v19 = 32;
    else
      v19 = 16;
    v34 = (unint64_t)v7 >> v19;
    if (v17 != -603924480)
      goto LABEL_58;
    v16 = 0;
LABEL_35:
    if ((unsigned __int16)v7 >= 0x80u)
      break;
    v20 = (v7 + 1);
    if ((_BYTE)v7 != 0xFF)
      goto LABEL_37;
LABEL_5:
    v8 = v35;
    v7 = v34;
  }
  v23 = (v7 & 0x3F) << 8;
  if ((unsigned __int16)v7 < 0x800u)
  {
    v20 = (v23 | ((unsigned __int16)v7 >> 6)) + 33217;
    goto LABEL_37;
  }
  if ((v7 & 0xF800) != 0xD800)
  {
    v26 = ((v23 | ((unsigned __int16)v7 >> 6) & 0x3F) << 8) | ((unsigned __int16)v7 >> 12);
    goto LABEL_46;
  }
  if ((v16 & 1) == 0)
  {
    v28 = ((v7 & 0x3FF) << 10) | HIWORD(v7) & 0x3FF;
    v26 = ((v28 + 0x10000) >> 4) & 0x3F00 | ((v28 + 0x10000) >> 18) | (((v28 >> 6) & 0x3F | (((v28 + 0x10000) & 0x3F) << 8)) << 16);
    v27 = -2122219023;
    goto LABEL_47;
  }
  if ((unsigned __int16)v7 <= 0x7Fu)
  {
    v20 = (unsigned __int16)v7 + 1;
    goto LABEL_37;
  }
  v29 = (v7 & 0x3F) << 8;
  if ((unsigned __int16)v7 >= 0x800u)
  {
    v26 = ((unsigned __int16)v7 >> 12) | ((v29 | ((unsigned __int16)v7 >> 6) & 0x3F) << 8);
LABEL_46:
    v27 = 8487393;
LABEL_47:
    v20 = v26 + v27;
    goto LABEL_37;
  }
  v20 = (v29 | ((unsigned __int16)v7 >> 6)) + 33217;
LABEL_37:
  while (1)
  {
    v5[v9] = v20 - 1;
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
      break;
    ++v9;
    v22 = v20 >= 0x100;
    v20 >>= 8;
    if (!v22)
    {
      v9 = v21;
      goto LABEL_5;
    }
  }
  __break(1u);
LABEL_58:
  *a4 = 0;
  a4[1] = 0;
  return result;
}

double specialized BinaryFloatingPoint.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v37;
  uint64_t v38;
  int v39;
  float v40;
  uint64_t v41;
  __int16 v43;
  char *v44;
  uint64_t v45;
  char v46;
  char *v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  __int16 v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  char *v62;
  uint64_t v63;
  unsigned __int8 v64;
  char *v65;
  uint64_t v66;
  int v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;

  v76 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v72 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v73 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v71 = (char *)&v68 - v6;
  v7 = swift_getAssociatedTypeWitness();
  v69 = *(_QWORD *)(v7 - 8);
  v70 = v7;
  MEMORY[0x1E0C80A78](v7);
  v68 = (char *)&v68 - v8;
  v75 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v68 - v13;
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v68 - v16;
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v68 - v19;
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v68 - v22;
  MEMORY[0x1E0C80A78](v24);
  v26 = (char *)&v68 - v25;
  v27 = dispatch thunk of static BinaryFloatingPoint.exponentBitCount.getter();
  v74 = a3;
  v28 = dispatch thunk of static BinaryFloatingPoint.significandBitCount.getter();
  if (v27 == 11)
  {
    if (v28 == 52)
    {
      v34 = v75;
      v33 = v76;
      (*(void (**)(char *, uint64_t, uint64_t))(v75 + 16))(v14, v76, a2);
      v35 = swift_dynamicCast();
      _D8 = v77;
      (*(void (**)(char *, uint64_t, uint64_t))(v34 + 32))(v11, v33, a2);
      if (v35)
      {
        (*(void (**)(char *, uint64_t))(v34 + 8))(v11, a2);
      }
      else
      {
        v54 = dispatch thunk of FloatingPoint.sign.getter();
        v55 = v68;
        dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter();
        v56 = v70;
        swift_getAssociatedConformanceWitness();
        v57 = dispatch thunk of BinaryInteger._lowWord.getter();
        (*(void (**)(char *, uint64_t))(v69 + 8))(v55, v56);
        v58 = v71;
        dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
        (*(void (**)(char *, uint64_t))(v34 + 8))(v11, a2);
        v59 = v73;
        swift_getAssociatedConformanceWitness();
        v60 = dispatch thunk of BinaryInteger._lowWord.getter();
        (*(void (**)(char *, uint64_t))(v72 + 8))(v58, v59);
        *(_QWORD *)&_D8 = (v54 << 63) | ((unint64_t)(v57 & 0x7FF) << 52) | v60 & 0xFFFFFFFFFFFFFLL;
      }
      return _D8;
    }
LABEL_13:
    lazy protocol witness table accessor for type Double and conformance Double();
    v41 = v76;
    static BinaryFloatingPoint._convert<A>(from:)();
    (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v41, a2);
    return v77;
  }
  if (v27 == 8)
  {
    if (v28 == 23)
    {
      v38 = v75;
      v37 = v76;
      (*(void (**)(char *, uint64_t, uint64_t))(v75 + 16))(v20, v76, a2);
      v39 = swift_dynamicCast();
      v40 = *(float *)&v77;
      (*(void (**)(char *, uint64_t, uint64_t))(v38 + 32))(v17, v37, a2);
      if (v39)
      {
        (*(void (**)(char *, uint64_t))(v38 + 8))(v17, a2);
        return v40;
      }
      else
      {
        v61 = dispatch thunk of FloatingPoint.sign.getter();
        v62 = v68;
        dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter();
        v63 = v70;
        swift_getAssociatedConformanceWitness();
        v64 = dispatch thunk of BinaryInteger._lowWord.getter();
        (*(void (**)(char *, uint64_t))(v69 + 8))(v62, v63);
        v65 = v71;
        dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
        (*(void (**)(char *, uint64_t))(v38 + 8))(v17, a2);
        v66 = v73;
        swift_getAssociatedConformanceWitness();
        v67 = dispatch thunk of BinaryInteger._lowWord.getter();
        (*(void (**)(char *, uint64_t))(v72 + 8))(v65, v66);
        return COERCE_FLOAT((v61 << 31) | (v64 << 23) | v67 & 0x7FFFFF);
      }
    }
    goto LABEL_13;
  }
  if (v27 != 5 || v28 != 10)
    goto LABEL_13;
  v30 = v75;
  v29 = v76;
  (*(void (**)(char *, uint64_t, uint64_t))(v75 + 16))(v26, v76, a2);
  v31 = swift_dynamicCast();
  _H8 = LOWORD(v77);
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 32))(v23, v29, a2);
  if (v31)
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v23, a2);
  }
  else
  {
    v43 = dispatch thunk of FloatingPoint.sign.getter();
    v44 = v68;
    dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter();
    v45 = v70;
    swift_getAssociatedConformanceWitness();
    v46 = dispatch thunk of BinaryInteger._lowWord.getter();
    (*(void (**)(char *, uint64_t))(v69 + 8))(v44, v45);
    v47 = v71;
    dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v23, a2);
    v48 = v73;
    swift_getAssociatedConformanceWitness();
    v49 = dispatch thunk of BinaryInteger._lowWord.getter();
    (*(void (**)(char *, uint64_t))(v72 + 8))(v47, v48);
    _H8 = (v43 << 15) | ((v46 & 0x1F) << 10) | v49 & 0x3FF;
  }
  __asm { FCVT            D8, H8 }
  return _D8;
}

uint64_t type metadata accessor for ICUPercentNumberFormatter()
{
  return objc_opt_self();
}

uint64_t static ICUPercentNumberFormatter.create<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static ICUPercentNumberFormatter.create<A>(for:)(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t, __n128))type metadata accessor for FloatingPointFormatStyle.Percent);
}

{
  return static ICUPercentNumberFormatter.create<A>(for:)(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t, __n128))type metadata accessor for IntegerFormatStyle.Percent);
}

uint64_t protocol witness for _LocaleProtocol.identifierCapturingPreferences.getter in conformance _LocaleAutoupdating()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v3;

  if (one-time initialization token for cache != -1)
    swift_once();
  LocaleCache.current.getter();
  v1 = v0;
  ObjectType = swift_getObjectType();
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 472))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.identifierCapturingPreferences.getter in conformance _LocaleICU()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v3;

  v1 = *(os_unfair_lock_s **)(v0 + 184);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.identifierCapturingPreferences.getter((uint64_t)&v1[4], &v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

uint64_t partial apply for closure #1 in _LocaleICU.identifierCapturingPreferences.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in _LocaleICU.identifierCapturingPreferences.getter(a1, v2, a2);
}

uint64_t closure #1 in _LocaleICU.identifierCapturingPreferences.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[44];
  _OWORD __dst[22];
  _QWORD __src[44];
  _BYTE v35[144];
  _OWORD v36[2];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[28];
  uint64_t v43;

  v4 = v3;
  v7 = *(_QWORD *)(a1 + 448);
  if (v7)
  {
    *a3 = *(_QWORD *)(a1 + 440);
    a3[1] = v7;
    return swift_bridgeObjectRetain();
  }
  outlined init with take of LocalePreferences?(a2 + 40, (uint64_t)v35);
  outlined init with take of LocalePreferences?((uint64_t)v35, (uint64_t)v36);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v36) == 1)
  {
    v10 = *(_QWORD *)(a2 + 16);
    v9 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 440) = v10;
    *(_QWORD *)(a1 + 448) = v9;
    *a3 = v10;
    a3[1] = v9;
    swift_bridgeObjectRetain_n();
    return swift_bridgeObjectRetain();
  }
  v11 = *(_QWORD *)(a2 + 16);
  v12 = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  outlined retain of LocalePreferences?((uint64_t)v35, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  Locale.Components.init(identifier:)(v11, v12, __src);
  v13 = *((_QWORD *)&v37 + 1);
  if (*((_QWORD *)&v37 + 1))
  {
    v14 = v37;
    v15 = String.lowercased()();
    v16 = __src[13];
    v43 = v4;
    v17 = __src[14];
    swift_bridgeObjectRetain();
    outlined consume of Locale.LanguageCode?(v16, v17);
    __src[13] = v14;
    __src[14] = v13;
    *(Swift::String *)&__src[15] = v15;
  }
  v18 = v38;
  if (!(_QWORD)v38)
  {
LABEL_17:
    __dst[6] = v41;
    __dst[7] = *(_OWORD *)v42;
    *(_OWORD *)((char *)&__dst[7] + 12) = *(_OWORD *)&v42[12];
    __dst[2] = v37;
    __dst[3] = v38;
    __dst[4] = v39;
    __dst[5] = v40;
    __dst[0] = v36[0];
    __dst[1] = v36[1];
    LocalePreferences.measurementSystem.getter((uint64_t)v32);
    v23 = v32[1];
    if (v32[1])
    {
      v25 = v32[2];
      v24 = v32[3];
      v26 = v32[0];
      outlined consume of Locale.LanguageCode?(__src[26], __src[27]);
      __src[26] = v26;
      __src[27] = v23;
      __src[28] = v25;
      __src[29] = v24;
    }
    if ((v42[26] & 1) != 0)
    {
      v27 = 2;
    }
    else
    {
      if ((v42[27] & 1) == 0)
      {
LABEL_24:
        memcpy(__dst, __src, sizeof(__dst));
        memcpy(v32, __src, sizeof(v32));
        outlined retain of Locale.Components((uint64_t *)__dst);
        Locale.Components.icuIdentifier.getter();
        v29 = v28;
        v31 = v30;
        outlined retain of LocalePreferences?((uint64_t)v35, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
        outlined release of Locale.Components((uint64_t *)__dst);
        swift_bridgeObjectRetain();
        outlined release of Locale.Components((uint64_t *)__dst);
        *(_QWORD *)(a1 + 440) = v29;
        *(_QWORD *)(a1 + 448) = v31;
        *a3 = v29;
        a3[1] = v31;
        return swift_bridgeObjectRetain();
      }
      v27 = 1;
    }
    BYTE1(__src[25]) = v27;
    goto LABEL_24;
  }
  swift_bridgeObjectRetain();
  _LocaleICU._lockedCalendarIdentifier(_:)(a1, __dst);
  if (!*(_QWORD *)(v18 + 16)
    || (v19 = specialized __RawDictionaryStorage.find<A>(_:)(LOBYTE(__dst[0])), (v20 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  v21 = *(_QWORD *)(*(_QWORD *)(v18 + 56) + 8 * v19);
  result = swift_bridgeObjectRelease();
  if (v21 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_27;
  }
  if (v21 > 0x7FFFFFFF)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    result = swift_once();
    goto LABEL_14;
  }
  if ((v21 - 8) < 0xFFFFFFF9)
    goto LABEL_17;
  if (one-time initialization token for weekdays != -1)
    goto LABEL_28;
LABEL_14:
  if ((unint64_t)v21 <= *((_QWORD *)static Locale.Weekday.weekdays + 2))
  {
    LOBYTE(__src[25]) = *((_BYTE *)static Locale.Weekday.weekdays + v21 + 31);
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for _LocaleProtocol.prefs.getter in conformance _LocaleAutoupdating()
{
  return _LocaleAutoupdating.prefs.getter();
}

uint64_t outlined init with copy of ICUNumberFormatter.Signature(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t initializeWithCopy for ICUNumberFormatter.Signature(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  int *v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  void *v47;
  void *v48;
  void *v49;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_WORD *)(a1 + 74) = *(_WORD *)(a2 + 74);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  v7 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  v8 = v7[9];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = type metadata accessor for FloatingPointRoundingRule();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v14 = v7[10];
  v15 = a1 + v14;
  v16 = a2 + v14;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  *(_BYTE *)(a1 + v7[11]) = *(_BYTE *)(a2 + v7[11]);
  v17 = *(int *)(a3 + 20);
  v18 = *(int *)(a3 + 24);
  v19 = (_QWORD *)(a1 + v17);
  v20 = (_QWORD *)(a2 + v17);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  v22 = a1 + v18;
  v23 = a2 + v18;
  v24 = *(_QWORD *)(a2 + v18 + 8);
  swift_bridgeObjectRetain();
  if (v24 == 1)
  {
    v25 = *(_OWORD *)(v23 + 112);
    *(_OWORD *)(v22 + 96) = *(_OWORD *)(v23 + 96);
    *(_OWORD *)(v22 + 112) = v25;
    *(_OWORD *)(v22 + 124) = *(_OWORD *)(v23 + 124);
    v26 = *(_OWORD *)(v23 + 48);
    *(_OWORD *)(v22 + 32) = *(_OWORD *)(v23 + 32);
    *(_OWORD *)(v22 + 48) = v26;
    v27 = *(_OWORD *)(v23 + 80);
    *(_OWORD *)(v22 + 64) = *(_OWORD *)(v23 + 64);
    *(_OWORD *)(v22 + 80) = v27;
    v28 = *(_OWORD *)(v23 + 16);
    *(_OWORD *)v22 = *(_OWORD *)v23;
    *(_OWORD *)(v22 + 16) = v28;
  }
  else
  {
    *(_BYTE *)v22 = *(_BYTE *)v23;
    v29 = *(_QWORD *)(v23 + 16);
    v30 = *(_QWORD *)(v23 + 24);
    *(_QWORD *)(v22 + 8) = v24;
    *(_QWORD *)(v22 + 16) = v29;
    v31 = *(_QWORD *)(v23 + 32);
    v32 = *(_QWORD *)(v23 + 40);
    *(_QWORD *)(v22 + 24) = v30;
    *(_QWORD *)(v22 + 32) = v31;
    v33 = *(_QWORD *)(v23 + 48);
    v34 = *(_QWORD *)(v23 + 56);
    *(_QWORD *)(v22 + 40) = v32;
    *(_QWORD *)(v22 + 48) = v33;
    v36 = *(void **)(v23 + 64);
    v35 = *(void **)(v23 + 72);
    *(_QWORD *)(v22 + 56) = v34;
    *(_QWORD *)(v22 + 64) = v36;
    v47 = *(void **)(v23 + 80);
    v48 = *(void **)(v23 + 88);
    *(_QWORD *)(v22 + 72) = v35;
    *(_QWORD *)(v22 + 80) = v47;
    v37 = *(_QWORD *)(v23 + 104);
    v49 = *(void **)(v23 + 96);
    *(_QWORD *)(v22 + 88) = v48;
    *(_QWORD *)(v22 + 96) = v49;
    v38 = *(_QWORD *)(v23 + 120);
    v39 = *(_QWORD *)(v23 + 112);
    *(_QWORD *)(v22 + 104) = v37;
    *(_QWORD *)(v22 + 112) = v39;
    v40 = *(_QWORD *)(v23 + 128);
    *(_QWORD *)(v22 + 120) = v38;
    *(_QWORD *)(v22 + 128) = v40;
    *(_DWORD *)(v22 + 136) = *(_DWORD *)(v23 + 136);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v41 = v36;
    v42 = v35;
    v43 = v47;
    v44 = v48;
    v45 = v49;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t FloatingPointFormatStyle.Percent.format(_:)(uint64_t a1, uint64_t a2)
{
  return FloatingPointFormatStyle.Currency.format(_:)(a1, a2, (uint64_t)type metadata accessor for ICUPercentNumberFormatter, static ICUPercentNumberFormatter.create<A>(for:));
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, type metadata accessor for ICUPercentNumberFormatter.Signature);
}

{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, type metadata accessor for ICUNumberFormatter.Signature);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::UInt64 v11;
  Swift::UInt64 v12;
  int v13;
  Swift::UInt v14;
  unint64_t v15;
  unsigned int v16;
  int v17;
  Swift::UInt v18;
  int *v19;
  uint64_t v20;
  int v21;
  Swift::UInt v22;
  Swift::UInt64 v23;
  Swift::UInt v24;
  uint64_t v25;
  Swift::UInt8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  Swift::UInt v53;
  Swift::UInt v54;
  Swift::UInt8 v55;
  Swift::UInt8 v56;
  Swift::UInt8 v57;
  Swift::Int v58;
  _QWORD v60[2];
  _BYTE v61[144];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  char v77;
  char v78;
  char v79;
  _BYTE v80[144];
  _BYTE v81[144];
  _BYTE v82[72];
  _BYTE v83[72];

  v2 = v1;
  v4 = type metadata accessor for FloatingPointRoundingRule();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  if (*(_BYTE *)(a1 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v11 = *(_QWORD *)a1;
    Hasher._combine(_:)(1u);
    if ((v11 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v12 = v11;
    else
      v12 = 0;
    Hasher._combine(_:)(v12);
  }
  outlined init with take of LocalePreferences?(a1 + 16, (uint64_t)v83, &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  specialized Optional<A>.hash(into:)();
  v13 = *(unsigned __int8 *)(a1 + 73);
  if (v13 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v14 = v13 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v14);
  }
  v15 = *(unsigned int *)(a1 + 74);
  if (*(_DWORD *)(a1 + 74) == 2)
  {
    LOBYTE(v16) = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v15 & 1);
    Hasher._combine(_:)((v15 >> 8) & 1);
    Hasher._combine(_:)(WORD1(v15) & 1);
    v16 = BYTE3(v15) & 1;
  }
  Hasher._combine(_:)(v16);
  v17 = *(unsigned __int8 *)(a1 + 78);
  if (v17 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v18 = v17 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v18);
  }
  v19 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  outlined init with copy of FloatingPointRoundingRule?(a1 + v19[9], (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  v20 = a1 + v19[10];
  v21 = *(unsigned __int8 *)(v20 + 8);
  if (v21 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v22 = *(_QWORD *)v20;
    Hasher._combine(_:)(1u);
    if ((v21 & 1) != 0)
    {
      Hasher._combine(_:)(1uLL);
      if ((v22 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v23 = v22;
      else
        v23 = 0;
      Hasher._combine(_:)(v23);
    }
    else
    {
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v22);
    }
  }
  Hasher._combine(_:)(*(unsigned __int8 *)(a1 + v19[11]));
  v24 = *(unsigned __int8 *)(a1 + v19[12]);
  if (v24 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v24);
  }
  v25 = type metadata accessor for ICUCurrencyNumberFormatter.Signature(0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?(a1 + *(int *)(v25 + 28), (uint64_t)v80, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v80, (uint64_t)v81, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v81) == 1)
  {
    Hasher._combine(_:)(0);
    goto LABEL_84;
  }
  outlined init with take of LocalePreferences?((uint64_t)v80, (uint64_t)&v62, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v62 == 2)
  {
    v26 = 0;
  }
  else
  {
    v26 = v62 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v26);
  v27 = v63;
  if (!v63)
  {
    Hasher._combine(_:)(0);
    outlined retain of LocalePreferences(&v62);
    v31 = &v62;
    goto LABEL_45;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v27 + 16));
  v28 = *(_QWORD *)(v27 + 16);
  if (!v28)
  {
    outlined init with take of LocalePreferences?((uint64_t)v80, (uint64_t)v61, &demangling cache variable for type metadata for LocalePreferences?);
    outlined retain of LocalePreferences?((uint64_t)v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
    v31 = (uint64_t *)v61;
LABEL_45:
    outlined retain of LocalePreferences(v31);
    if (!v64)
      goto LABEL_40;
    goto LABEL_46;
  }
  outlined retain of LocalePreferences?((uint64_t)v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v29 = v27 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v29 += 16;
    --v28;
  }
  while (v28);
  swift_bridgeObjectRelease();
  if (!v64)
  {
LABEL_40:
    Hasher._combine(_:)(0);
    if (!v65)
      goto LABEL_41;
LABEL_47:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v30 = v66;
    if (!v66)
      goto LABEL_42;
    goto LABEL_48;
  }
LABEL_46:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v65)
    goto LABEL_47;
LABEL_41:
  Hasher._combine(_:)(0);
  v30 = v66;
  if (!v66)
  {
LABEL_42:
    Hasher._combine(_:)(0);
    goto LABEL_49;
  }
LABEL_48:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v82, v30);
  swift_bridgeObjectRelease();
LABEL_49:
  v32 = v67;
  v60[1] = v2;
  if (v67)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v82, v32);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v34 = v68;
  v33 = v69;
  v36 = v70;
  v35 = v71;
  v37 = v72;
  if (v68)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v38 = v33;
    v39 = v36;
    v40 = v35;
    v41 = v37;
    v42 = v34;
    _CFObject.hash(into:)();
    if (v33)
      goto LABEL_54;
  }
  else
  {
    Hasher._combine(_:)(0);
    v47 = v37;
    v48 = v33;
    v49 = v36;
    v50 = v35;
    if (v33)
    {
LABEL_54:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v43 = v33;
      _CFObject.hash(into:)();

      if (v36)
        goto LABEL_55;
      goto LABEL_60;
    }
  }
  Hasher._combine(_:)(0);
  if (v36)
  {
LABEL_55:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v44 = v36;
    _CFObject.hash(into:)();

    if (v35)
      goto LABEL_56;
LABEL_61:
    Hasher._combine(_:)(0);
    if (v37)
      goto LABEL_57;
    goto LABEL_62;
  }
LABEL_60:
  Hasher._combine(_:)(0);
  if (!v35)
    goto LABEL_61;
LABEL_56:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v45 = v35;
  _CFObject.hash(into:)();

  if (v37)
  {
LABEL_57:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v46 = v37;
    _CFObject.hash(into:)();

    goto LABEL_63;
  }
LABEL_62:
  Hasher._combine(_:)(0);
  v46 = 0;
LABEL_63:

  v51 = v73;
  if (v51)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v82, v51);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v52 = v74;
  if (!v74)
  {
    Hasher._combine(_:)(0);
    if (v75)
      goto LABEL_68;
LABEL_70:
    Hasher._combine(_:)(0);
    goto LABEL_71;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v82, v52);
  swift_bridgeObjectRelease();
  if (!v75)
    goto LABEL_70;
LABEL_68:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_71:
  if (v76 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v53 = v76 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v53);
  }
  if (v77 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v54 = v77 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v54);
  }
  if (v78 == 2)
  {
    v55 = 0;
  }
  else
  {
    v55 = v78 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v55);
  if (v79 == 2)
  {
    v56 = 0;
  }
  else
  {
    v57 = v79 & 1;
    Hasher._combine(_:)(1u);
    v56 = v57;
  }
  Hasher._combine(_:)(v56);
  outlined retain of LocalePreferences?((uint64_t)v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
LABEL_84:
  v58 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v58);
}

uint64_t type metadata accessor for ICUNumberFormatter()
{
  return objc_opt_self();
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance FloatingPointFormatStyle<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = FloatingPointFormatStyle.format(_:)(a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t FloatingPointFormatStyle.format(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35[18];
  _QWORD v36[20];

  v3 = v2;
  v34 = a1;
  v36[18] = *MEMORY[0x1E0C80C00];
  v31 = *(_QWORD *)(a2 + 16);
  v30 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](a1);
  v33 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ICUNumberFormatter.Signature(0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = a2;
  v9 = v3 + *(int *)(a2 + 36);
  v10 = *(_QWORD *)(v3 + 8);
  ObjectType = swift_getObjectType();
  v12 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 472);
  swift_unknownObjectRetain();
  v13 = v12(ObjectType, v10);
  v15 = v14;
  swift_unknownObjectRelease();
  v16 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v10 + 464);
  swift_unknownObjectRetain();
  v16(v35, ObjectType, v10);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v35, (uint64_t)v36, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with copy of ICUNumberFormatter.Signature(v9, (uint64_t)v8, type metadata accessor for NumberFormatStyleConfiguration.Collection);
  v17 = (uint64_t *)&v8[*(int *)(v6 + 20)];
  *v17 = v13;
  v17[1] = v15;
  outlined init with take of LocalePreferences?((uint64_t)v36, (uint64_t)&v8[*(int *)(v6 + 24)], &demangling cache variable for type metadata for LocalePreferences?);
  v18 = specialized static ICUNumberFormatter._create(with:)((uint64_t)v8);
  outlined destroy of ICUNumberFormatter.Signature((uint64_t)v8, type metadata accessor for ICUNumberFormatter.Signature);
  if (!v18)
  {
    v19 = v31;
    v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16);
    v22 = v32;
    v23 = (uint64_t)v33;
    v24 = v34;
LABEL_4:
    v20(v23, v24, v19);
    specialized BinaryFloatingPoint.init<A>(_:)(v23, v19, *(_QWORD *)(v22 + 24));
    return Double.description.getter();
  }
  v19 = v31;
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16);
  v21 = (uint64_t)v33;
  v20((uint64_t)v33, v34, v31);
  v22 = v32;
  specialized BinaryFloatingPoint.init<A>(_:)(v21, v19, *(_QWORD *)(v32 + 24));
  type metadata accessor for ICUNumberFormatterBase.FormatResult();
  swift_initStackObject();
  ICUNumberFormatterBase.FormatResult.init(formatter:value:)();
  v26 = swift_retain_n();
  MEMORY[0x1E0C80A78](v26);
  swift_retain();
  specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)(&v29 - 8), v35);
  v27 = v35[0];
  v28 = v35[1];
  swift_release();
  swift_release_n();
  v23 = (uint64_t)v33;
  v24 = v34;
  if (!v28)
    goto LABEL_4;
  return v27;
}

__n128 FloatingPointFormatStyle.init(locale:)@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __n128 *a5@<X8>)
{
  char *v7;
  int *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  __n128 result;
  __n128 v13;

  v7 = (char *)a5 + *(int *)(type metadata accessor for FloatingPointFormatStyle(0, a2, a3, a4) + 36);
  *(_QWORD *)v7 = 0;
  v7[8] = 1;
  *((_QWORD *)v7 + 2) = 0;
  *((_QWORD *)v7 + 3) = 0;
  *((_QWORD *)v7 + 4) = 0;
  *((_QWORD *)v7 + 5) = 0x1FFFFFFFELL;
  *((_QWORD *)v7 + 7) = 0;
  *((_QWORD *)v7 + 8) = 0;
  *((_QWORD *)v7 + 6) = 0;
  *((_DWORD *)v7 + 18) = 131584;
  *((_WORD *)v7 + 38) = 512;
  v8 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  v9 = &v7[v8[9]];
  v10 = type metadata accessor for FloatingPointRoundingRule();
  v13 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = &v7[v8[10]];
  *(_QWORD *)v11 = 0;
  v11[8] = -1;
  v7[v8[11]] = 3;
  result = v13;
  *a5 = v13;
  return result;
}

uint64_t type metadata accessor for FloatingPointFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FloatingPointFormatStyle);
}

uint64_t LocalePreferences.measurementSystem.getter@<X0>(uint64_t a1@<X8>)
{
  unsigned __int8 *v1;
  int v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v3 = *v1;
  v4 = v1[136];
  if (v3 == 2)
  {
    if (v4 == 2 || (v4 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    if ((v3 & 1) == 0)
    {
      if (one-time initialization token for us != -1)
        swift_once();
      v5 = &static Locale.MeasurementSystem.us;
      goto LABEL_18;
    }
    if (v4 == 2)
    {
LABEL_10:
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      return result;
    }
    if ((v4 & 1) != 0)
    {
      if (one-time initialization token for uk != -1)
        swift_once();
      v5 = &static Locale.MeasurementSystem.uk;
      goto LABEL_18;
    }
  }
  if (one-time initialization token for metric != -1)
    swift_once();
  v5 = &static Locale.MeasurementSystem.metric;
LABEL_18:
  v6 = v5[1];
  v7 = v5[2];
  v8 = v5[3];
  *(_QWORD *)a1 = *v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v10 = a4[6];
  v11 = a5(0);
  result = outlined init with take of ICUNumberFormatter.Signature(a2, v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a5);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v13 = a4[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a4[2] = v15;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return specialized _NativeDictionary._insert(at:key:value:)(a1, a2, a3, a4, type metadata accessor for ICUNumberFormatter.Signature);
}

{
  return specialized _NativeDictionary._insert(at:key:value:)(a1, a2, a3, a4, type metadata accessor for ICUPercentNumberFormatter.Signature);
}

{
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type _TimeZoneGMTICU and conformance _TimeZoneGMTICU, (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneGMTICU, (uint64_t)&protocol conformance descriptor for _TimeZoneGMTICU);
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  v9 = (_QWORD *)(a4[7] + 16 * a1);
  *v9 = a3;
  v9[1] = result;
  v10 = a4[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    a4[2] = v12;
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for ICULegacyNumberFormatter.Signature(0);
  result = outlined init with take of ICUNumberFormatter.Signature(a2, v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, type metadata accessor for ICULegacyNumberFormatter.Signature);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

{
  return specialized _NativeDictionary._insert(at:key:value:)(a1, a2, a3, a4, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
}

void specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2)
{
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, type metadata accessor for ICUNumberFormatter.Signature, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<ICUNumberFormatter.Signature, ICUNumberFormatter?>);
}

{
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, type metadata accessor for ICUPercentNumberFormatter.Signature, &demangling cache variable for type metadata for _DictionaryStorage<ICUPercentNumberFormatter.Signature, ICUPercentNumberFormatter?>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::UInt64 v30;
  Swift::UInt64 v31;
  int v32;
  Swift::UInt v33;
  Swift::UInt v34;
  unint64_t v35;
  unsigned int v36;
  int v37;
  Swift::UInt v38;
  uint64_t v39;
  int *v40;
  char *v41;
  char *v42;
  int v43;
  Swift::UInt v44;
  Swift::UInt64 v45;
  char *v46;
  Swift::UInt v47;
  uint64_t v48;
  Swift::UInt8 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  Swift::UInt v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  unint64_t v64;
  Swift::UInt v65;
  Swift::UInt v66;
  int64_t v67;
  unint64_t v68;
  int64_t v69;
  Swift::UInt v70;
  int64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  int64_t v76;
  unint64_t v77;
  unint64_t v78;
  Swift::UInt v79;
  Swift::UInt v80;
  int64_t v81;
  unint64_t v82;
  int64_t v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  id v89;
  id v90;
  id v91;
  id v92;
  id v93;
  id v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  Swift::UInt v104;
  Swift::UInt v105;
  Swift::UInt8 v106;
  Swift::UInt8 v107;
  Swift::UInt8 v108;
  Swift::Int v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char v113;
  unint64_t v114;
  BOOL v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  int64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int64_t v134;
  char *v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  void *v148;
  void *v149;
  void *v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char v155;
  char v156;
  char v157;
  char v158;
  _BYTE v159[144];
  _BYTE v160[144];
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  uint64_t v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  uint64_t v170;
  char v171[80];

  v3 = v2;
  v5 = type metadata accessor for FloatingPointRoundingRule();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v124 = (char *)&v118 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1E0C80A78](v8);
  v127 = (char *)&v118 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ICUCurrencyNumberFormatter.Signature(0);
  v128 = *(_QWORD *)(v10 - 8);
  v129 = v10;
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v118 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUCurrencyNumberFormatter.Signature, ICUCurrencyNumberFormatter?>);
  v130 = a2;
  v14 = static _DictionaryStorage.resize(original:capacity:move:)();
  v15 = v14;
  if (!*(_QWORD *)(v13 + 16))
    goto LABEL_164;
  v16 = 1 << *(_BYTE *)(v13 + 32);
  v17 = *(_QWORD *)(v13 + 64);
  v120 = (_QWORD *)(v13 + 64);
  if (v16 < 64)
    v18 = ~(-1 << v16);
  else
    v18 = -1;
  v19 = v18 & v17;
  v118 = v3;
  v119 = (unint64_t)(v16 + 63) >> 6;
  v126 = v12 + 16;
  v20 = v14 + 64;
  swift_retain();
  v21 = 0;
  v122 = v15;
  v123 = v13;
  v121 = v5;
  v125 = v6;
  v135 = v12;
  while (1)
  {
    if (v19)
    {
      v133 = (v19 - 1) & v19;
      v24 = __clz(__rbit64(v19)) | (v21 << 6);
    }
    else
    {
      v25 = v21 + 1;
      if (__OFADD__(v21, 1))
        goto LABEL_169;
      if (v25 >= v119)
        goto LABEL_159;
      v26 = v120[v25];
      ++v21;
      if (!v26)
      {
        v21 = v25 + 1;
        if (v25 + 1 >= v119)
          goto LABEL_159;
        v26 = v120[v21];
        if (!v26)
        {
          v27 = v25 + 2;
          if (v27 >= v119)
            goto LABEL_159;
          v26 = v120[v27];
          if (!v26)
          {
            while (1)
            {
              v21 = v27 + 1;
              if (__OFADD__(v27, 1))
                goto LABEL_170;
              if (v21 >= v119)
                break;
              v26 = v120[v21];
              ++v27;
              if (v26)
                goto LABEL_21;
            }
LABEL_159:
            swift_release();
            v3 = v118;
            if ((v130 & 1) != 0)
            {
              v117 = 1 << *(_BYTE *)(v13 + 32);
              if (v117 >= 64)
                bzero(v120, ((unint64_t)(v117 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v120 = -1 << v117;
              *(_QWORD *)(v13 + 16) = 0;
            }
LABEL_164:
            swift_release();
            *v3 = v15;
            return;
          }
          v21 = v27;
        }
      }
LABEL_21:
      v133 = (v26 - 1) & v26;
      v24 = __clz(__rbit64(v26)) + (v21 << 6);
    }
    v28 = *(_QWORD *)(v128 + 72);
    v29 = *(_QWORD *)(v13 + 48) + v28 * v24;
    v134 = v21;
    v132 = v28;
    if ((v130 & 1) != 0)
    {
      outlined init with take of ICUNumberFormatter.Signature(v29, (uint64_t)v12, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
      v131 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v24);
    }
    else
    {
      outlined init with copy of ICUNumberFormatter.Signature(v29, (uint64_t)v12, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
      v131 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v24);
      swift_retain();
    }
    Hasher.init(_seed:)();
    v163 = v168;
    v164 = v169;
    v165 = v170;
    v161 = v166;
    v162 = v167;
    if (v12[8] == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      v30 = *(_QWORD *)v12;
      Hasher._combine(_:)(1u);
      if ((v30 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v31 = v30;
      else
        v31 = 0;
      Hasher._combine(_:)(v31);
    }
    outlined init with take of LocalePreferences?((uint64_t)v126, (uint64_t)v171, &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
    specialized Optional<A>.hash(into:)();
    v32 = v12[73];
    if (v32 == 2)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      v33 = v32 & 1;
      Hasher._combine(_:)(1u);
      v34 = v33;
      v12 = v135;
      Hasher._combine(_:)(v34);
    }
    v35 = *(unsigned int *)(v12 + 74);
    if (*(_DWORD *)(v12 + 74) == 2)
    {
      LOBYTE(v36) = 0;
    }
    else
    {
      Hasher._combine(_:)(1u);
      v12 = v135;
      Hasher._combine(_:)(v35 & 1);
      Hasher._combine(_:)((v35 >> 8) & 1);
      Hasher._combine(_:)(WORD1(v35) & 1);
      v36 = BYTE3(v35) & 1;
    }
    Hasher._combine(_:)(v36);
    v37 = v12[78];
    if (v37 == 2)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      v38 = v37 & 1;
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v38);
    }
    v39 = (uint64_t)v127;
    v40 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
    outlined init with copy of FloatingPointRoundingRule?((uint64_t)&v135[v40[9]], v39);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v39, 1, v5) == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      v41 = v124;
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v124, v39, v5);
      Hasher._combine(_:)(1u);
      dispatch thunk of Hashable.hash(into:)();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v41, v5);
    }
    v42 = &v135[v40[10]];
    v43 = v42[8];
    if (v43 == 255)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      v44 = *(_QWORD *)v42;
      Hasher._combine(_:)(1u);
      if ((v43 & 1) != 0)
      {
        Hasher._combine(_:)(1uLL);
        if ((v44 & 0x7FFFFFFFFFFFFFFFLL) != 0)
          v45 = v44;
        else
          v45 = 0;
        Hasher._combine(_:)(v45);
      }
      else
      {
        Hasher._combine(_:)(0);
        Hasher._combine(_:)(v44);
      }
      v6 = v125;
    }
    v46 = v135;
    Hasher._combine(_:)(v135[v40[11]]);
    v47 = v46[v40[12]];
    if (v47 == 3)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v47);
    }
    v48 = v129;
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v12 = v135;
    swift_bridgeObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)&v12[*(int *)(v48 + 28)], (uint64_t)v159, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v159, (uint64_t)v160, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v160) == 1)
    {
      Hasher._combine(_:)(0);
      goto LABEL_150;
    }
    outlined init with take of LocalePreferences?((uint64_t)v159, (uint64_t)&v141, &demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v141 == 2)
    {
      v49 = 0;
    }
    else
    {
      v49 = v141 & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v49);
    v50 = v142;
    if (!v142)
    {
      Hasher._combine(_:)(0);
      outlined retain of LocalePreferences(&v141);
      v55 = &v141;
      goto LABEL_71;
    }
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(*(_QWORD *)(v50 + 16));
    v51 = *(_QWORD *)(v50 + 16);
    if (v51)
      break;
    outlined init with take of LocalePreferences?((uint64_t)v159, (uint64_t)&v136, &demangling cache variable for type metadata for LocalePreferences?);
    outlined retain of LocalePreferences?((uint64_t)v159, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
    v55 = (uint64_t *)&v136;
LABEL_71:
    outlined retain of LocalePreferences(v55);
    if (v143)
      goto LABEL_72;
LABEL_65:
    Hasher._combine(_:)(0);
    if (v144)
      goto LABEL_73;
LABEL_66:
    Hasher._combine(_:)(0);
    v53 = v145;
    if (v145)
      goto LABEL_74;
LABEL_67:
    Hasher._combine(_:)(0);
    v54 = v146;
    if (v146)
      goto LABEL_96;
LABEL_68:
    Hasher._combine(_:)(0);
LABEL_118:
    v84 = v147;
    v85 = v148;
    v86 = v149;
    v87 = v150;
    v88 = v151;
    if (v147)
    {
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v89 = v85;
      v90 = v86;
      v91 = v87;
      v92 = v88;
      v93 = v84;
      _CFObject.hash(into:)();
      if (v85)
        goto LABEL_120;
    }
    else
    {
      Hasher._combine(_:)(0);
      v98 = v88;
      v99 = v85;
      v100 = v86;
      v101 = v87;
      if (v85)
      {
LABEL_120:
        Hasher._combine(_:)(1u);
        type metadata accessor for CFDictionaryRef(0);
        lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
        v94 = v85;
        _CFObject.hash(into:)();

        if (v86)
          goto LABEL_121;
        goto LABEL_126;
      }
    }
    Hasher._combine(_:)(0);
    if (v86)
    {
LABEL_121:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v95 = v86;
      _CFObject.hash(into:)();

      if (v87)
        goto LABEL_122;
      goto LABEL_127;
    }
LABEL_126:
    Hasher._combine(_:)(0);
    if (v87)
    {
LABEL_122:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v96 = v87;
      _CFObject.hash(into:)();

      if (v88)
        goto LABEL_123;
      goto LABEL_128;
    }
LABEL_127:
    Hasher._combine(_:)(0);
    if (v88)
    {
LABEL_123:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v97 = v88;
      _CFObject.hash(into:)();

      goto LABEL_129;
    }
LABEL_128:
    Hasher._combine(_:)(0);
    v97 = 0;
LABEL_129:
    v13 = v123;

    v102 = v152;
    if (v102)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      specialized Dictionary<>.hash(into:)((uint64_t)&v161, v102);
      swift_bridgeObjectRelease();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    v5 = v121;
    v15 = v122;
    v6 = v125;
    v103 = v153;
    if (v153)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      specialized Dictionary<>.hash(into:)((uint64_t)&v161, v103);
      swift_bridgeObjectRelease();
      if (!v154)
        goto LABEL_136;
    }
    else
    {
      Hasher._combine(_:)(0);
      if (!v154)
      {
LABEL_136:
        Hasher._combine(_:)(0);
        goto LABEL_137;
      }
    }
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
LABEL_137:
    if (v155 == 2)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      v104 = v155 & 1;
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v104);
    }
    if (v156 == 2)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      v105 = v156 & 1;
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v105);
    }
    if (v157 == 2)
    {
      v106 = 0;
    }
    else
    {
      v106 = v157 & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v106);
    if (v158 == 2)
    {
      v107 = 0;
    }
    else
    {
      v108 = v158 & 1;
      Hasher._combine(_:)(1u);
      v107 = v108;
    }
    Hasher._combine(_:)(v107);
    outlined retain of LocalePreferences?((uint64_t)v159, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
    outlined retain of LocalePreferences?((uint64_t)v159, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
    v12 = v135;
LABEL_150:
    v109 = Hasher._finalize()();
    v110 = -1 << *(_BYTE *)(v15 + 32);
    v111 = v109 & ~v110;
    v112 = v111 >> 6;
    if (((-1 << v111) & ~*(_QWORD *)(v20 + 8 * (v111 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v111) & ~*(_QWORD *)(v20 + 8 * (v111 >> 6)))) | v111 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v113 = 0;
      v114 = (unint64_t)(63 - v110) >> 6;
      do
      {
        if (++v112 == v114 && (v113 & 1) != 0)
        {
          __break(1u);
          goto LABEL_165;
        }
        v115 = v112 == v114;
        if (v112 == v114)
          v112 = 0;
        v113 |= v115;
        v116 = *(_QWORD *)(v20 + 8 * v112);
      }
      while (v116 == -1);
      v22 = __clz(__rbit64(~v116)) + (v112 << 6);
    }
    v23 = v132;
    *(_QWORD *)(v20 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    outlined init with take of ICUNumberFormatter.Signature((uint64_t)v12, *(_QWORD *)(v15 + 48) + v23 * v22, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
    *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v22) = v131;
    ++*(_QWORD *)(v15 + 16);
    v19 = v133;
    v21 = v134;
  }
  outlined retain of LocalePreferences?((uint64_t)v159, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v159, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v52 = v50 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v52 += 16;
    --v51;
  }
  while (v51);
  swift_bridgeObjectRelease();
  if (!v143)
    goto LABEL_65;
LABEL_72:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v144)
    goto LABEL_66;
LABEL_73:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v53 = v145;
  if (!v145)
    goto LABEL_67;
LABEL_74:
  Hasher._combine(_:)(1u);
  v56 = 0;
  v57 = 0;
  v58 = v53 + 64;
  v59 = 1 << *(_BYTE *)(v53 + 32);
  if (v59 < 64)
    v60 = ~(-1 << v59);
  else
    v60 = -1;
  v61 = v60 & *(_QWORD *)(v53 + 64);
  v62 = (unint64_t)(v59 + 63) >> 6;
  while (2)
  {
    if (v61)
    {
      v63 = __clz(__rbit64(v61));
      v61 &= v61 - 1;
      v64 = v63 | (v57 << 6);
LABEL_79:
      v65 = *(unsigned __int8 *)(*(_QWORD *)(v53 + 48) + v64);
      v66 = *(_QWORD *)(*(_QWORD *)(v53 + 56) + 8 * v64);
      v136 = v161;
      v137 = v162;
      v138 = v163;
      v139 = v164;
      v140 = v165;
      Hasher._combine(_:)(v65);
      Hasher._combine(_:)(v66);
      v56 ^= Hasher._finalize()();
      continue;
    }
    break;
  }
  v67 = v57 + 1;
  if (__OFADD__(v57, 1))
  {
LABEL_165:
    __break(1u);
LABEL_166:
    __break(1u);
    goto LABEL_167;
  }
  if (v67 >= v62)
    goto LABEL_95;
  v68 = *(_QWORD *)(v58 + 8 * v67);
  ++v57;
  if (v68)
    goto LABEL_94;
  v57 = v67 + 1;
  if (v67 + 1 >= v62)
    goto LABEL_95;
  v68 = *(_QWORD *)(v58 + 8 * v57);
  if (v68)
    goto LABEL_94;
  v57 = v67 + 2;
  if (v67 + 2 >= v62)
    goto LABEL_95;
  v68 = *(_QWORD *)(v58 + 8 * v57);
  if (v68)
  {
LABEL_94:
    v61 = (v68 - 1) & v68;
    v64 = __clz(__rbit64(v68)) + (v57 << 6);
    goto LABEL_79;
  }
  v69 = v67 + 3;
  if (v69 < v62)
  {
    v68 = *(_QWORD *)(v58 + 8 * v69);
    if (!v68)
    {
      while (1)
      {
        v57 = v69 + 1;
        if (__OFADD__(v69, 1))
          break;
        if (v57 >= v62)
          goto LABEL_95;
        v68 = *(_QWORD *)(v58 + 8 * v57);
        ++v69;
        if (v68)
          goto LABEL_94;
      }
LABEL_167:
      __break(1u);
      goto LABEL_168;
    }
    v57 = v69;
    goto LABEL_94;
  }
LABEL_95:
  swift_bridgeObjectRetain();
  Hasher._combine(_:)(v56);
  swift_bridgeObjectRelease();
  v54 = v146;
  if (!v146)
    goto LABEL_68;
LABEL_96:
  Hasher._combine(_:)(1u);
  v70 = 0;
  v71 = 0;
  v72 = v54 + 64;
  v73 = 1 << *(_BYTE *)(v54 + 32);
  if (v73 < 64)
    v74 = ~(-1 << v73);
  else
    v74 = -1;
  v75 = v74 & *(_QWORD *)(v54 + 64);
  v76 = (unint64_t)(v73 + 63) >> 6;
  while (2)
  {
    if (v75)
    {
      v77 = __clz(__rbit64(v75));
      v75 &= v75 - 1;
      v78 = v77 | (v71 << 6);
LABEL_101:
      v79 = *(unsigned __int8 *)(*(_QWORD *)(v54 + 48) + v78);
      v80 = *(_QWORD *)(*(_QWORD *)(v54 + 56) + 8 * v78);
      v136 = v161;
      v137 = v162;
      v138 = v163;
      v139 = v164;
      v140 = v165;
      Hasher._combine(_:)(v79);
      Hasher._combine(_:)(v80);
      v70 ^= Hasher._finalize()();
      continue;
    }
    break;
  }
  v81 = v71 + 1;
  if (__OFADD__(v71, 1))
    goto LABEL_166;
  if (v81 >= v76)
  {
LABEL_117:
    swift_bridgeObjectRetain();
    Hasher._combine(_:)(v70);
    swift_bridgeObjectRelease();
    goto LABEL_118;
  }
  v82 = *(_QWORD *)(v72 + 8 * v81);
  ++v71;
  if (v82)
    goto LABEL_116;
  v71 = v81 + 1;
  if (v81 + 1 >= v76)
    goto LABEL_117;
  v82 = *(_QWORD *)(v72 + 8 * v71);
  if (v82)
    goto LABEL_116;
  v71 = v81 + 2;
  if (v81 + 2 >= v76)
    goto LABEL_117;
  v82 = *(_QWORD *)(v72 + 8 * v71);
  if (v82)
  {
LABEL_116:
    v75 = (v82 - 1) & v82;
    v78 = __clz(__rbit64(v82)) + (v71 << 6);
    goto LABEL_101;
  }
  v83 = v81 + 3;
  if (v83 >= v76)
    goto LABEL_117;
  v82 = *(_QWORD *)(v72 + 8 * v83);
  if (v82)
  {
    v71 = v83;
    goto LABEL_116;
  }
  while (1)
  {
    v71 = v83 + 1;
    if (__OFADD__(v83, 1))
      break;
    if (v71 >= v76)
      goto LABEL_117;
    v82 = *(_QWORD *)(v72 + 8 * v71);
    ++v83;
    if (v82)
      goto LABEL_116;
  }
LABEL_168:
  __break(1u);
LABEL_169:
  __break(1u);
LABEL_170:
  __break(1u);
}

_QWORD *closure #1 in static ICUPercentNumberFormatter._create(with:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *result;
  _BYTE v16[144];
  _QWORD v17[18];
  uint64_t v18;
  unint64_t v19;

  v4 = 0x746E6563726570;
  v18 = 0x746E6563726570;
  v19 = 0xE700000000000000;
  v5 = NumberFormatStyleConfiguration.Collection.skeleton.getter();
  v7 = v6;
  if (String.count.getter() < 1)
  {
    swift_bridgeObjectRelease();
    v10 = 0xE700000000000000;
  }
  else
  {
    v17[0] = 32;
    v17[1] = 0xE100000000000000;
    v8._countAndFlagsBits = v5;
    v8._object = v7;
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = 32;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v4 = v18;
    v10 = v19;
  }
  v11 = type metadata accessor for ICUPercentNumberFormatter.Signature(0);
  v12 = (uint64_t *)(a1 + *(int *)(v11 + 20));
  v13 = *v12;
  v14 = v12[1];
  outlined init with take of LocalePreferences?(a1 + *(int *)(v11 + 24), (uint64_t)v17, &demangling cache variable for type metadata for LocalePreferences?);
  swift_allocObject();
  outlined init with take of LocalePreferences?((uint64_t)v17, (uint64_t)v16, &demangling cache variable for type metadata for LocalePreferences?);
  swift_bridgeObjectRetain();
  outlined retain of LocalePreferences?((uint64_t)v17, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  result = ICUNumberFormatterBase.init(skeleton:localeIdentifier:preferences:)(v4, v10, v13, v14, (uint64_t)v16);
  *a2 = result;
  return result;
}

_QWORD *ICUNumberFormatterBase.init(skeleton:localeIdentifier:preferences:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[144];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  outlined init with take of LocalePreferences?(a5, (uint64_t)v11, &demangling cache variable for type metadata for LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v11, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  v5[3] = a1;
  v5[4] = a2;
  swift_bridgeObjectRetain();
  v8 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  swift_bridgeObjectRelease();
  if (v8[2] >> 31)
    __break(1u);
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v9 = unumf_openForSkeletonAndLocale();
  swift_release();
  swift_release();
  if (v9)
  {
    v5[2] = v9;
  }
  else
  {
    swift_bridgeObjectRelease();
    type metadata accessor for ICUNumberFormatterBase();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v5;
}

void MeasurementFormatUnitUsage.hash(into:)()
{
  __asm { BR              X10 }
}

uint64_t sub_181920904()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t _JSONKeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char isUniquelyReferenced_nonNull_native;
  int v34;
  unint64_t v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  unint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  int64_t v60;
  unint64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  void (*v72)(char *, uint64_t);
  uint64_t v73;
  void (*v74)(char *, char *, uint64_t);
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t *v80;
  void (*v81)(char *, uint64_t);
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t result;
  uint64_t v87;
  unint64_t v88;
  int v89;
  uint64_t v90;
  int64_t v91;
  uint64_t v92;
  int64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(uint64_t *, uint64_t, uint64_t);
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105[6];

  v7 = v6;
  v96 = a5;
  v97 = a6;
  v98 = a4;
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](a1);
  v95 = (char *)&v87 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Optional();
  v102 = *(_QWORD *)(v13 - 8);
  v103 = v13;
  MEMORY[0x1E0C80A78](v13);
  v101 = (char *)&v87 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v87 - v16;
  v18 = *v7;
  v19 = v7[1];
  v20 = v7[2];
  v21 = *(_QWORD *)(a3 + 24);
  v105[3] = v10;
  v105[4] = v21;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v105);
  v99 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v11 + 16);
  v100 = a2;
  v99(boxed_opaque_existential_1, a2, v10);
  v94 = v21;
  v104 = _JSONKeyedEncodingContainer._converted(_:)(v105, v18, v19, v20);
  v24 = v23;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v105);
  v25 = v7[1];
  if (*(_BYTE *)(v25 + 32) != 4)
  {
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  v26 = *(_QWORD *)(v25 + 16);
  if (*(_QWORD *)(v26 + 16))
  {
    v27 = *(_QWORD *)(v25 + 24);
    outlined copy of JSONReference.Backing(*(_QWORD *)(v25 + 16), v27, 4);
    swift_bridgeObjectRetain();
    v28 = specialized __RawDictionaryStorage.find<A>(_:)(v104, v24);
    if ((v29 & 1) != 0)
    {
      v30 = *(_QWORD *)(*(_QWORD *)(v26 + 56) + 8 * v28);
      swift_retain();
      outlined consume of JSONReference.Backing(v26, v27, 4);
      swift_bridgeObjectRelease_n();
      if (*(_BYTE *)(v30 + 32) == 4)
      {
LABEL_54:
        v67 = *v7;
        v68 = v7[2];
        v99((uint64_t *)v17, v100, v10);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v17, 0, 1, v10);
        v70 = v101;
        v69 = v102;
        v71 = v103;
        (*(void (**)(char *, char *, uint64_t))(v102 + 16))(v101, v17, v103);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v70, 1, v10) == 1)
        {
          v72 = *(void (**)(char *, uint64_t))(v69 + 8);
          swift_retain();
          v72(v17, v71);
          v72(v70, v71);
          swift_retain();
LABEL_62:
          v105[0] = v67;
          v105[1] = v30;
          v105[2] = v68;
          v85 = type metadata accessor for _JSONKeyedEncodingContainer(0, v98, v96, v73);
          MEMORY[0x186DA9D64](&protocol conformance descriptor for _JSONKeyedEncodingContainer<A>, v85);
          return KeyedEncodingContainer.init<A>(_:)();
        }
        v74 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
        v75 = v70;
        v76 = v95;
        v74(v95, v75, v10);
        v77 = v69;
        v78 = (uint64_t *)swift_allocObject();
        v79 = v94;
        v78[5] = v10;
        v78[6] = v79;
        v80 = __swift_allocate_boxed_opaque_existential_1(v78 + 2);
        v74((char *)v80, v76, v10);
        v81 = *(void (**)(char *, uint64_t))(v77 + 8);
        swift_retain();
        v81(v17, v71);
        v78[7] = v68;
        if (v68 >> 62)
        {
          if (v68 >> 62 != 1)
          {
            v84 = 1;
            goto LABEL_61;
          }
          v82 = (uint64_t *)((v68 & 0x3FFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          v82 = (uint64_t *)(v68 + 64);
        }
        v83 = *v82;
        swift_retain();
        v84 = v83 + 1;
        if (!__OFADD__(v83, 1))
        {
LABEL_61:
          v78[8] = v84;
          v68 = (unint64_t)v78;
          goto LABEL_62;
        }
        __break(1u);
LABEL_65:
        __break(1u);
        goto LABEL_66;
      }
      __break(1u);
    }
    outlined consume of JSONReference.Backing(v26, v27, 4);
    swift_bridgeObjectRelease();
  }
  type metadata accessor for JSONReference();
  v31 = swift_allocObject();
  *(_QWORD *)(v31 + 16) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v31 + 24) = 0;
  *(_BYTE *)(v31 + 32) = 4;
  if (*(_BYTE *)(v25 + 32) != 4)
  {
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  v30 = v31;
  v32 = *(_QWORD *)(v25 + 16);
  *(_QWORD *)(v25 + 16) = 0;
  *(_QWORD *)(v25 + 24) = 0;
  *(_BYTE *)(v25 + 32) = 7;
  swift_retain_n();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v105[0] = v32;
  v35 = specialized __RawDictionaryStorage.find<A>(_:)(v104, v24);
  v36 = *(_QWORD *)(v32 + 16);
  v37 = (v34 & 1) == 0;
  v38 = v36 + v37;
  if (__OFADD__(v36, v37))
  {
    __break(1u);
  }
  else
  {
    if (*(_QWORD *)(v32 + 24) < v38)
    {
      v39 = v34;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v38, isUniquelyReferenced_nonNull_native);
      v40 = v105[0];
      v41 = specialized __RawDictionaryStorage.find<A>(_:)(v104, v24);
      if ((v39 & 1) != (v42 & 1))
        goto LABEL_69;
      v35 = v41;
      if ((v39 & 1) == 0)
        goto LABEL_52;
LABEL_15:
      v43 = *(_QWORD *)(v40 + 56);
      v44 = 8 * v35;
      swift_release();
      *(_QWORD *)(v43 + v44) = v30;
LABEL_53:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v64 = *(_QWORD *)(v25 + 16);
      v65 = *(_QWORD *)(v25 + 24);
      *(_QWORD *)(v25 + 16) = v40;
      *(_QWORD *)(v25 + 24) = 0;
      v66 = *(_BYTE *)(v25 + 32);
      *(_BYTE *)(v25 + 32) = 4;
      outlined consume of JSONReference.Backing(v64, v65, v66);
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_54;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v40 = v32;
      if ((v34 & 1) != 0)
        goto LABEL_15;
LABEL_52:
      specialized _NativeDictionary._insert(at:key:value:)(v35, v104, v24, v30, v40);
      swift_bridgeObjectRetain();
      goto LABEL_53;
    }
  }
  v88 = v35;
  v89 = v34;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONReference>);
  v45 = static _DictionaryStorage.copy(original:)();
  v40 = v45;
  v46 = *(_QWORD *)(v32 + 16);
  if (!v46)
  {
LABEL_51:
    swift_bridgeObjectRelease();
    v35 = v88;
    if ((v89 & 1) != 0)
      goto LABEL_15;
    goto LABEL_52;
  }
  v47 = (void *)(v45 + 64);
  v48 = (unint64_t)((1 << *(_BYTE *)(v40 + 32)) + 63) >> 6;
  if (v40 != v32 || (unint64_t)v47 >= v32 + 64 + 8 * v48)
  {
    memmove(v47, (const void *)(v32 + 64), 8 * v48);
    v46 = *(_QWORD *)(v32 + 16);
  }
  v49 = 0;
  *(_QWORD *)(v40 + 16) = v46;
  v50 = 1 << *(_BYTE *)(v32 + 32);
  v51 = -1;
  if (v50 < 64)
    v51 = ~(-1 << v50);
  v52 = v51 & *(_QWORD *)(v32 + 64);
  v90 = v32 + 64;
  v91 = (unint64_t)(v50 + 63) >> 6;
  while (1)
  {
    if (v52)
    {
      v92 = (v52 - 1) & v52;
      v93 = v49;
      v53 = __clz(__rbit64(v52)) | (v49 << 6);
      goto LABEL_25;
    }
    v60 = v49 + 1;
    if (__OFADD__(v49, 1))
      goto LABEL_65;
    if (v60 >= v91)
      goto LABEL_51;
    v61 = *(_QWORD *)(v90 + 8 * v60);
    v62 = v49 + 1;
    if (!v61)
    {
      v62 = v49 + 2;
      if (v49 + 2 >= v91)
        goto LABEL_51;
      v61 = *(_QWORD *)(v90 + 8 * v62);
      if (!v61)
      {
        v62 = v49 + 3;
        if (v49 + 3 >= v91)
          goto LABEL_51;
        v61 = *(_QWORD *)(v90 + 8 * v62);
        if (!v61)
        {
          v62 = v49 + 4;
          if (v49 + 4 >= v91)
            goto LABEL_51;
          v61 = *(_QWORD *)(v90 + 8 * v62);
          if (!v61)
          {
            v62 = v49 + 5;
            if (v49 + 5 >= v91)
              goto LABEL_51;
            v61 = *(_QWORD *)(v90 + 8 * v62);
            if (!v61)
            {
              v62 = v49 + 6;
              if (v49 + 6 >= v91)
                goto LABEL_51;
              v61 = *(_QWORD *)(v90 + 8 * v62);
              if (!v61)
              {
                v62 = v49 + 7;
                if (v49 + 7 >= v91)
                  goto LABEL_51;
                v61 = *(_QWORD *)(v90 + 8 * v62);
                if (!v61)
                {
                  v62 = v49 + 8;
                  if (v49 + 8 >= v91)
                    goto LABEL_51;
                  v61 = *(_QWORD *)(v90 + 8 * v62);
                  if (!v61)
                    break;
                }
              }
            }
          }
        }
      }
    }
LABEL_50:
    v92 = (v61 - 1) & v61;
    v93 = v62;
    v53 = __clz(__rbit64(v61)) + (v62 << 6);
LABEL_25:
    v54 = 16 * v53;
    v55 = (_QWORD *)(*(_QWORD *)(v32 + 48) + 16 * v53);
    v56 = v55[1];
    v57 = 8 * v53;
    v58 = *(_QWORD *)(*(_QWORD *)(v32 + 56) + v57);
    v59 = (_QWORD *)(*(_QWORD *)(v40 + 48) + v54);
    *v59 = *v55;
    v59[1] = v56;
    *(_QWORD *)(*(_QWORD *)(v40 + 56) + v57) = v58;
    swift_bridgeObjectRetain();
    swift_retain();
    v52 = v92;
    v49 = v93;
  }
  v63 = v49 + 9;
  if (v49 + 9 >= v91)
    goto LABEL_51;
  v61 = *(_QWORD *)(v90 + 8 * v63);
  if (v61)
  {
    v62 = v49 + 9;
    goto LABEL_50;
  }
  while (1)
  {
    v62 = v63 + 1;
    if (__OFADD__(v63, 1))
      break;
    if (v62 >= v91)
      goto LABEL_51;
    v61 = *(_QWORD *)(v90 + 8 * v62);
    ++v63;
    if (v61)
      goto LABEL_50;
  }
LABEL_68:
  __break(1u);
LABEL_69:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t Locale.Language.minimalIdentifier.getter()
{
  return Locale.Language.minimalIdentifier.getter((uint64_t (*)(uint64_t, _QWORD, unint64_t))specialized _withFixedCharBuffer(size:_:), (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized _withFixedCharBuffer(size:_:));
}

uint64_t initializeWithCopy for Locale.Language(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
    v5 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v6 = *(_QWORD *)(a2 + 40);
    if (v6)
      goto LABEL_3;
LABEL_6:
    v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v12;
    v8 = *(_QWORD *)(a2 + 72);
    if (v8)
      goto LABEL_4;
LABEL_7:
    v13 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v13;
    return a1;
  }
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v11;
  v6 = *(_QWORD *)(a2 + 40);
  if (!v6)
    goto LABEL_6;
LABEL_3:
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = *(_QWORD *)(a2 + 72);
  if (!v8)
    goto LABEL_7;
LABEL_4:
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  v9 = *(_QWORD *)(a2 + 80);
  v10 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v9;
  *(_QWORD *)(a1 + 88) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void protocol witness for Scheduler.schedule(options:_:) in conformance NSRunLoop(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void **v3;
  void *v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[6];

  v6 = *v3;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a2;
  *(_QWORD *)(v7 + 24) = a3;
  v9[4] = closure #1 in NSRunLoop.schedule(options:_:)partial apply;
  v9[5] = v7;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 1107296256;
  v9[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v9[3] = &block_descriptor_22;
  v8 = _Block_copy(v9);
  swift_retain();
  swift_release();
  objc_msgSend(v6, sel_performBlock_, v8);
  _Block_release(v8);
}

void sub_181921660(void *a1)
{
  os_unfair_lock_s *v1;

  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_181921674(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *partial apply for specialized closure #2 in Rope._UnsafeHandle.distance<A>(from:to:in:)(_QWORD *result)
{
  if (__OFADD__(*result, 1))
    __break(1u);
  else
    ++*result;
  return result;
}

_QWORD *closure #2 in LocaleCache.current.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _QWORD *result;
  _OWORD v16[7];
  _OWORD v17[2];

  outlined retain of LocalePreferences((_QWORD *)a2);
  LocaleCache.State.resetCurrentIfNeeded()();
  if (*a1)
  {
    v8 = a1[1];
    v9 = *a1;
  }
  else
  {
    type metadata accessor for _LocaleICU();
    v8 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type _LocaleICU and conformance _LocaleICU, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleICU, (uint64_t)&protocol conformance descriptor for _LocaleICU);
    v10 = *(_OWORD *)(a2 + 112);
    v16[6] = *(_OWORD *)(a2 + 96);
    v17[0] = v10;
    *(_OWORD *)((char *)v17 + 12) = *(_OWORD *)(a2 + 124);
    v11 = *(_OWORD *)(a2 + 48);
    v16[2] = *(_OWORD *)(a2 + 32);
    v16[3] = v11;
    v12 = *(_OWORD *)(a2 + 80);
    v16[4] = *(_OWORD *)(a2 + 64);
    v16[5] = v12;
    v13 = *(_OWORD *)(a2 + 16);
    v16[0] = *(_OWORD *)a2;
    v16[1] = v13;
    swift_allocObject();
    outlined retain of LocalePreferences((_QWORD *)a2);
    v14 = _LocaleICU.init(name:prefs:disableBundleMatching:)(0, 0, (uint64_t *)v16, 0);
    v9 = v14;
    if ((a3 & 1) != 0)
    {
      *a1 = v14;
      a1[1] = v8;
      swift_retain();
    }
  }
  swift_unknownObjectRetain();
  result = outlined release of LocalePreferences((_QWORD *)a2);
  *a4 = v9;
  a4[1] = v8;
  return result;
}

_QWORD *outlined retain of LocalePreferences(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  void *v12;

  v2 = (void *)a1[8];
  v4 = (void *)a1[9];
  v3 = (void *)a1[10];
  v5 = (void *)a1[11];
  v12 = (void *)a1[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = v2;
  v7 = v4;
  v8 = v3;
  v9 = v5;
  v10 = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t protocol witness for _LocaleProtocol.init(name:prefs:disableBundleMatching:) in conformance _LocaleICU(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 a4)
{
  uint64_t v8;

  v8 = swift_allocObject();
  _LocaleICU.init(name:prefs:disableBundleMatching:)(a1, a2, a3, a4);
  return v8;
}

uint64_t Locale.Language.minimalIdentifier.getter(uint64_t (*a1)(uint64_t, _QWORD, unint64_t), uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = v2[1];
  v5 = v2[2];
  v4 = (void *)v2[3];
  v6 = v2[5];
  v8 = v2[6];
  v7 = (void *)v2[7];
  v10 = v2[8];
  v9 = v2[9];
  v11 = v2[10];
  v12 = (void *)v2[11];
  v30 = v3;
  v32 = v2[4];
  v31 = *v2;
  v13 = *v2;
  if (v3)
  {
    v14 = v2[4];
    outlined copy of Locale.LanguageCode?(v13, v3);
    outlined copy of Locale.LanguageCode?(v14, v6);
    outlined copy of Locale.LanguageCode?(v10, v9);
    v15._countAndFlagsBits = v5;
    v15._object = v4;
    String.append(_:)(v15);
    if (!v6)
      goto LABEL_4;
    goto LABEL_3;
  }
  v28 = v2[4];
  outlined copy of Locale.LanguageCode?(v13, 0);
  outlined copy of Locale.LanguageCode?(v28, v6);
  outlined copy of Locale.LanguageCode?(v10, v9);
  if (v6)
  {
LABEL_3:
    v16._countAndFlagsBits = 45;
    v16._object = (void *)0xE100000000000000;
    String.append(_:)(v16);
    v17._countAndFlagsBits = v8;
    v17._object = v7;
    String.append(_:)(v17);
  }
LABEL_4:
  if (v9)
  {
    v18._countAndFlagsBits = 95;
    v18._object = (void *)0xE100000000000000;
    String.append(_:)(v18);
    v19._countAndFlagsBits = v11;
    v19._object = v12;
    String.append(_:)(v19);
  }
  outlined consume of Locale.LanguageCode?(v31, v30);
  outlined consume of Locale.LanguageCode?(v32, v6);
  outlined consume of Locale.LanguageCode?(v10, v9);
  v20 = 0;
  swift_bridgeObjectRetain();
  v21 = a1(257, 0, 0xE000000000000000);
  v23 = v22;
  swift_bridgeObjectRelease();
  if (v23)
  {
    v24 = a2(257, v21, v23);
    v26 = v25;
    swift_bridgeObjectRelease();
    if (v26)
    {
      swift_bridgeObjectRelease();
      return v24;
    }
  }
  return v20;
}

id closure #2 in LocaleCache.currentNSLocale()@<X0>(_OWORD *a1@<X1>, char a2@<W2>, _QWORD *a3@<X8>)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  id result;
  _BYTE v10[13];
  _OWORD v11[7];
  _OWORD v12[2];

  v5 = a1[7];
  v11[6] = a1[6];
  v12[0] = v5;
  *(_OWORD *)((char *)v12 + 12) = *(_OWORD *)((char *)a1 + 124);
  v6 = a1[3];
  v11[2] = a1[2];
  v11[3] = v6;
  v7 = a1[5];
  v11[4] = a1[4];
  v11[5] = v7;
  v8 = a1[1];
  v11[0] = *a1;
  v11[1] = v8;
  destructiveProjectEnumData for PredicateCodableError(v11, a1);
  outlined init with take of LocalePreferences?((uint64_t)v11, (uint64_t)v10);
  result = LocaleCache.State.currentNSLocale(preferences:cache:)((uint64_t)v10, a2);
  *a3 = result;
  return result;
}

id LocaleCache.State.currentNSLocale(preferences:cache:)(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  objc_class *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v16;
  uint64_t v17;
  objc_class *v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  objc_super v22;
  objc_super v23;
  _OWORD v24[7];
  _OWORD v25[2];
  _QWORD v26[18];
  uint64_t v27;
  _OWORD v28[7];
  _OWORD v29[2];
  _BYTE v30[144];

  v3 = v2;
  outlined init with take of LocalePreferences?(a1, (uint64_t)v30);
  LocaleCache.State.resetCurrentIfNeeded()();
  v5 = (void *)v2[6];
  v6 = v5;
  if (!v5)
  {
    v7 = *v2;
    if (*v3)
    {
      v8 = v3[1];
      v9 = (objc_class *)type metadata accessor for _NSSwiftLocale();
      v10 = (char *)objc_allocWithZone(v9);
      v11 = &v10[OBJC_IVAR____NSSwiftLocale_locale];
      *(_QWORD *)v11 = v7;
      *((_QWORD *)v11 + 1) = v8;
      v12 = String._bridgeToObjectiveCImpl()();
      v22.receiver = v10;
      v22.super_class = v9;
      swift_unknownObjectRetain_n();
      v6 = objc_msgSendSuper2(&v22, sel_initWithLocaleIdentifier_, v12);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
    }
    else
    {
      outlined init with take of LocalePreferences?((uint64_t)v30, (uint64_t)v28);
      if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v28) == 1)
      {
        v6 = 0;
        goto LABEL_5;
      }
      v24[6] = v28[6];
      v25[0] = v29[0];
      *(_OWORD *)((char *)v25 + 12) = *(_OWORD *)((char *)v29 + 12);
      v24[2] = v28[2];
      v24[3] = v28[3];
      v24[4] = v28[4];
      v24[5] = v28[5];
      v24[0] = v28[0];
      v24[1] = v28[1];
      type metadata accessor for _LocaleICU();
      swift_allocObject();
      outlined init with take of LocalePreferences?((uint64_t)v30, (uint64_t)v26);
      outlined init with take of LocalePreferences?((uint64_t)v30, (uint64_t)&v27);
      outlined retain of LocalePreferences(&v27);
      outlined retain of LocalePreferences(v26);
      v16 = _LocaleICU.init(name:prefs:disableBundleMatching:)(0, 0, (uint64_t *)v24, 0);
      v17 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type _LocaleICU and conformance _LocaleICU, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleICU, (uint64_t)&protocol conformance descriptor for _LocaleICU);
      v18 = (objc_class *)type metadata accessor for _NSSwiftLocale();
      v19 = (char *)objc_allocWithZone(v18);
      v20 = (uint64_t *)&v19[OBJC_IVAR____NSSwiftLocale_locale];
      *v20 = v16;
      v20[1] = v17;
      v21 = String._bridgeToObjectiveCImpl()();
      v23.receiver = v19;
      v23.super_class = v18;
      swift_retain();
      v6 = objc_msgSendSuper2(&v23, sel_initWithLocaleIdentifier_, v21);
      swift_unknownObjectRelease();
      outlined retain of LocalePreferences?((uint64_t)v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
      if ((a2 & 1) == 0)
      {
        swift_release();
        goto LABEL_5;
      }
      *v3 = v16;
      v3[1] = v17;
    }
    v3[6] = (uint64_t)v6;
    v13 = v6;
  }
LABEL_5:
  v14 = v5;
  return v6;
}

