uint64_t outlined init with take of BPlistTrailer?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for BPlistTrailer?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type BPlistError and conformance BPlistError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BPlistError and conformance BPlistError;
  if (!lazy protocol witness table cache variable for type BPlistError and conformance BPlistError)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for BPlistError, &type metadata for BPlistError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BPlistError and conformance BPlistError);
  }
  return result;
}

uint64_t sub_181AB6B74()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_181AB6B98()
{
  return swift_deallocObject();
}

uint64_t sub_181AB6BA8()
{
  return swift_deallocObject();
}

uint64_t sub_181AB6BB8()
{
  return swift_deallocObject();
}

uint64_t sub_181AB6BC8()
{
  return swift_deallocObject();
}

unint64_t destroy for BPlistError(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for BPlistError(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

_QWORD *assignWithCopy for BPlistError(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;

  v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for BPlistError(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  if (*(_QWORD *)(a1 + 8) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for BPlistError(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for BPlistError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 1;
  }
  return result;
}

_QWORD *destructiveInjectEnumTag for BPlistError(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for BPlistError()
{
  return &type metadata for BPlistError;
}

_QWORD *initializeBufferWithCopyOfBuffer for BPlistMap.ArrayIterator(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for BPlistMap.ArrayIterator()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for BPlistMap.ArrayIterator(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

_QWORD *assignWithTake for BPlistMap.ArrayIterator(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for BPlistMap.ArrayIterator()
{
  return &type metadata for BPlistMap.ArrayIterator;
}

uint64_t destroy for BPlistMap.DictionaryIterator()
{
  return outlined consume of Set<A1>.Iterator._Variant<A><A1>();
}

_QWORD *initializeWithCopy for BPlistMap.DictionaryIterator(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  outlined copy of [A : B].Iterator._Variant<A, B>();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  return a1;
}

_QWORD *assignWithCopy for BPlistMap.DictionaryIterator(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  outlined copy of [A : B].Iterator._Variant<A, B>();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  return a1;
}

uint64_t assignWithTake for BPlistMap.DictionaryIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = v3;
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  return a1;
}

uint64_t getEnumTagSinglePayload for BPlistMap.DictionaryIterator(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7F && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 127);
  v3 = (((*(_QWORD *)a1 >> 57) >> 6) | (2 * ((*(_QWORD *)a1 >> 57) & 0x38 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7E)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for BPlistMap.DictionaryIterator(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7E)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 127;
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
    {
      v3 = (-a2 >> 1) & 0x3F | ((-a2 & 0x7F) << 6);
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(_OWORD *)(result + 8) = 0u;
      *(_OWORD *)(result + 24) = 0u;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BPlistMap.DictionaryIterator()
{
  return &type metadata for BPlistMap.DictionaryIterator;
}

unint64_t *initializeBufferWithCopyOfBuffer for BPlistMap.Value(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  outlined copy of BPlistMap.Value(*a2);
  *a1 = v3;
  return a1;
}

unint64_t outlined copy of BPlistMap.Value(unint64_t result)
{
  switch(result >> 60)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 8uLL:
      result = swift_retain();
      break;
    default:
      return result;
  }
  return result;
}

unint64_t destroy for BPlistMap.Value(unint64_t *a1)
{
  return outlined consume of BPlistMap.Value(*a1);
}

unint64_t outlined consume of BPlistMap.Value(unint64_t result)
{
  switch(result >> 60)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 8uLL:
      result = swift_release();
      break;
    default:
      return result;
  }
  return result;
}

unint64_t *assignWithCopy for BPlistMap.Value(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a2;
  outlined copy of BPlistMap.Value(*a2);
  v4 = *a1;
  *a1 = v3;
  outlined consume of BPlistMap.Value(v4);
  return a1;
}

unint64_t *assignWithTake for BPlistMap.Value(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  outlined consume of BPlistMap.Value(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for BPlistMap.Value(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x77 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 119);
  v3 = ((*(_QWORD *)a1 >> 60) & 0x8F | (16 * (*(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x76)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for BPlistMap.Value(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x76)
  {
    *(_QWORD *)result = a2 - 119;
    if (a3 >= 0x77)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x77)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 4) & 7 | (8 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTag for BPlistMap.Value(_QWORD *a1)
{
  uint64_t v1;

  v1 = *a1 >> 60;
  if (v1 <= 8)
    return v1;
  else
    return (*a1 >> 3) + 9;
}

unint64_t *destructiveInjectEnumTag for BPlistMap.Value(unint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  if (a2 < 9)
  {
    v2 = *result & 0xFFFFFFFFFFFFFF8;
    v3 = a2 << 60;
  }
  else
  {
    v2 = 8 * (a2 - 9);
    v3 = 0x9000000000000000;
  }
  *result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for BPlistMap.Value()
{
  return &type metadata for BPlistMap.Value;
}

ValueMetadata *type metadata accessor for BPlistMap.Region()
{
  return &type metadata for BPlistMap.Region;
}

uint64_t PredicateExpressions.OptionalFlatMap.transform.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 32) - 8) + 16))(a2, v2 + *(int *)(a1 + 68));
}

uint64_t PredicateExpressions.OptionalFlatMap.variable.getter@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = *(_QWORD *)(v2 + *(int *)(result + 72));
  return result;
}

void PredicateExpressions.OptionalFlatMap.init<>(_:_:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  PredicateExpressions.OptionalFlatMap.init<>(_:_:)(a1, a2);
}

{
  PredicateExpressions.OptionalFlatMap.init<>(_:_:)(a1, a2);
}

{
  __n128 v4;
  uint64_t v5;
  unint64_t v6;

  v4 = MEMORY[0x1E0C80A78](a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5, v4);
  if (one-time initialization token for nextID != -1)
    swift_once();
  do
    v6 = __ldxr((unint64_t *)&static PredicateExpressions.VariableID.nextID);
  while (__stxr(v6 + 1, (unint64_t *)&static PredicateExpressions.VariableID.nextID));
  type metadata accessor for PredicateExpressions.OptionalFlatMap();
}

uint64_t PredicateExpressions.OptionalFlatMap.evaluate(_:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  void (*v24)(__int128 *, uint64_t, uint64_t);
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(char *, uint64_t, uint64_t);
  char *v33;
  uint64_t v34;
  void (*v35)(void);
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  char *v44;
  uint64_t v45;
  int v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  __int128 v55;
  __int128 v56;
  uint64_t *v57;
  _QWORD *v58;
  uint64_t result;
  _OWORD *v60;
  void (*v61)(char *, char *, uint64_t);
  char *v62;
  uint64_t (*v63)(char *, uint64_t, uint64_t);
  void (*v64)(char *, char *, uint64_t);
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t AssociatedTypeWitness;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  _QWORD *v86;

  v74 = a3;
  v6 = a2[4];
  v71 = a2[7];
  v67 = v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v70 = (char *)&v61 - v7;
  v77 = *(_QWORD *)(a2[3] - 8);
  MEMORY[0x1E0C80A78](v8);
  v72 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v73 = (char *)&v61 - v11;
  v78 = v12;
  v79 = type metadata accessor for Optional();
  v75 = *(_QWORD *)(v79 - 8);
  MEMORY[0x1E0C80A78](v79);
  v69 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v61 - v15;
  MEMORY[0x1E0C80A78](v17);
  v76 = (char *)&v61 - v18;
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v61 - v20;
  v22 = (_QWORD *)*a1;
  v86 = v22;
  *(_QWORD *)&v83 = v22;
  v23 = a2[6];
  v24 = *(void (**)(__int128 *, uint64_t, uint64_t))(v23 + 16);
  v25 = a2[2];
  swift_bridgeObjectRetain();
  v26 = v80;
  v24(&v83, v25, v23);
  if (v26)
    return swift_bridgeObjectRelease();
  v80 = v16;
  v65 = v3;
  v66 = a2;
  v27 = v75;
  v28 = v76;
  v29 = *(void (**)(char *, char *, uint64_t))(v75 + 16);
  v30 = v79;
  v29(v76, v21, v79);
  v31 = v77;
  v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48);
  v33 = v28;
  v34 = v78;
  if (v32(v33, 1, v78) == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66[5] - 8) + 56))(v74, 1, 1);
    v35 = *(void (**)(void))(v27 + 8);
LABEL_28:
    ((void (*)(char *, uint64_t))v35)(v21, v30);
    return swift_bridgeObjectRelease();
  }
  v63 = (uint64_t (*)(char *, uint64_t, uint64_t))v32;
  v64 = v29;
  v36 = v73;
  v61 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
  v61(v73, v76, v34);
  v37 = *(_QWORD *)(v65 + *((int *)v66 + 18));
  v38 = v80;
  v76 = *(char **)(v31 + 16);
  ((void (*)(char *, char *, uint64_t))v76)(v80, v36, v34);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v38, 0, 1, v34);
  v39 = v22[2];
  if (v39)
  {
    v40 = (uint64_t)(v22 + 4);
    swift_bridgeObjectRetain();
    v41 = 0;
    while (1)
    {
      outlined init with copy of (id: PredicateExpressions.VariableID, value: Any)(v40, (uint64_t)&v83);
      v42 = v83;
      outlined destroy of (id: PredicateExpressions.VariableID, value: Any)((uint64_t)&v83);
      if (v42 == v37)
        break;
      ++v41;
      v40 += 40;
      if (v39 == v41)
      {
        swift_bridgeObjectRelease();
        v41 = 0;
        v43 = 1;
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease();
    v43 = 0;
LABEL_11:
    v30 = v79;
  }
  else
  {
    v43 = 1;
    v41 = 0;
  }
  v44 = v69;
  v64(v69, v80, v30);
  v45 = v78;
  v46 = v63(v44, 1, v78);
  v47 = v72;
  v62 = v21;
  if (v46 == 1)
  {
    v35 = *(void (**)(void))(v75 + 8);
    ((void (*)(char *, uint64_t))v35)(v44, v30);
    if ((v43 & 1) != 0)
    {
      ((void (*)(char *, uint64_t))v35)(v80, v30);
    }
    else
    {
      specialized Array.remove(at:)(v41, (uint64_t)&v83);
      ((void (*)(char *, uint64_t))v35)(v80, v30);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v83 + 8);
    }
    v48 = v71;
    v49 = v78;
    goto LABEL_27;
  }
  v61(v72, v44, v45);
  v49 = v45;
  if ((v43 & 1) != 0)
  {
    v82 = v45;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v81);
    ((void (*)(uint64_t *, char *, uint64_t))v76)(boxed_opaque_existential_1, v47, v45);
    *(_QWORD *)&v83 = v37;
    outlined init with take of Any(&v81, (__int128 *)((char *)&v83 + 8));
    v51 = v86;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v51[2] + 1, 1, v51);
    v48 = v71;
    v53 = v51[2];
    v52 = v51[3];
    if (v53 >= v52 >> 1)
      v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v52 > 1), v53 + 1, 1, v51);
    v51[2] = v53 + 1;
    v54 = &v51[5 * v53];
    v55 = v83;
    v56 = v84;
    v54[8] = v85;
    *((_OWORD *)v54 + 2) = v55;
    *((_OWORD *)v54 + 3) = v56;
    v86 = v51;
    v35 = *(void (**)(void))(v75 + 8);
    v35();
    (*(void (**)(char *, uint64_t))(v77 + 8))(v72, v49);
    goto LABEL_27;
  }
  *((_QWORD *)&v84 + 1) = v45;
  v57 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v83);
  ((void (*)(uint64_t *, char *, uint64_t))v76)(v57, v47, v45);
  v58 = v86;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v58);
    v58 = (_QWORD *)result;
    v86 = (_QWORD *)result;
  }
  v48 = v71;
  if (v41 < v58[2])
  {
    v60 = &v58[5 * v41 + 5];
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v60);
    outlined init with take of Any(&v83, v60);
    v35 = *(void (**)(void))(v75 + 8);
    ((void (*)(char *, uint64_t))v35)(v80, v30);
    (*(void (**)(char *, uint64_t))(v77 + 8))(v72, v45);
LABEL_27:
    *(_QWORD *)&v83 = v86;
    (*(void (**)(__int128 *, uint64_t, uint64_t))(v48 + 16))(&v83, v67, v48);
    type metadata accessor for Optional();
    swift_dynamicCast();
    (*(void (**)(char *, uint64_t))(v77 + 8))(v73, v49);
    v30 = v79;
    v21 = v62;
    goto LABEL_28;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.OptionalFlatMap<A, B, C, D>@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.OptionalFlatMap.evaluate(_:)(a1, a2, a3);
}

void static PredicateExpressions.build_flatMap<A, B, C, D>(_:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  static PredicateExpressions.build_flatMap<A, B, C, D>(_:_:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

{
  static PredicateExpressions.build_flatMap<A, B, C, D>(_:_:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, __n128);
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v24 = a8;
  v25 = a3;
  v26 = a2;
  MEMORY[0x1E0C80A78](a1);
  v16 = *(_QWORD *)(v15 - 8);
  v18 = MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v23 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(void (**)(char *, __n128))(v16 + 16);
  v21(v20, v18);
  ((void (*)(uint64_t, char *, uint64_t))v21)(a9, v20, a4);
  if (one-time initialization token for nextID != -1)
    swift_once();
  do
    v22 = __ldxr((unint64_t *)&static PredicateExpressions.VariableID.nextID);
  while (__stxr(v22 + 1, (unint64_t *)&static PredicateExpressions.VariableID.nextID));
  v27 = a4;
  v28 = a6;
  v29 = a5;
  v30 = a7;
  v31 = v24;
  v32 = a10;
  type metadata accessor for PredicateExpressions.OptionalFlatMap();
}

uint64_t PredicateExpressions.NilCoalesce.lhs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t PredicateExpressions.NilCoalesce.rhs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

void PredicateExpressions.NilCoalesce.init(lhs:rhs:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
  type metadata accessor for PredicateExpressions.NilCoalesce();
}

uint64_t sub_181AB7DA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v3 + *(int *)(a1 + 52), v2, v1);
}

uint64_t PredicateExpressions.NilCoalesce.evaluate(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v26 = a3;
  v24 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v25 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v7 + 40);
  v9 = *(_QWORD *)(v7 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = type metadata accessor for Optional();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v22 - v14;
  v16 = *a1;
  v28 = v16;
  v17 = v27;
  result = (*(uint64_t (**)(uint64_t *, _QWORD, __n128))(*(_QWORD *)(a2 + 32) + 16))(&v28, *(_QWORD *)(a2 + 16), v13);
  if (!v17)
  {
    v27 = 0;
    v22 = v12;
    v23 = v11;
    v20 = v24;
    v19 = v25;
    (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v25, v3, a2);
    v21 = *(_QWORD *)(AssociatedTypeWitness - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v15, 1, AssociatedTypeWitness) == 1)
    {
      v28 = v16;
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v8 + 16))(&v28, v9, v8);
      (*(void (**)(char *, uint64_t))(v20 + 8))(v19, a2);
      return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v15, v23);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v20 + 8))(v19, a2);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v21 + 32))(v26, v15, AssociatedTypeWitness);
    }
  }
  return result;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.NilCoalesce<A, B>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.NilCoalesce.evaluate(_:)(a1, a2, a3);
}

void static PredicateExpressions.build_NilCoalesce<A, B>(lhs:rhs:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
  type metadata accessor for PredicateExpressions.NilCoalesce();
}

uint64_t sub_181AB8008(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(v3 + *(int *)(a1 + 52), v2, v1);
}

uint64_t PredicateExpressions.ForcedUnwrap.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t PredicateExpressions.ForcedUnwrap.evaluate(_:)@<X0>(unint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  int v18;
  void (*v19)(char *, uint64_t);
  Swift::String v20;
  Swift::String v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;

  v7 = a2[3];
  v27 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v25 - v13;
  v25 = *a1;
  result = (*(uint64_t (**)(unint64_t *, _QWORD, __n128))(a2[4] + 16))(&v25, a2[2], v12);
  if (!v3)
  {
    v16 = v27;
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v14, v27);
    v17 = *(_QWORD *)(v7 - 8);
    v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v10, 1, v7);
    v19 = *(void (**)(char *, uint64_t))(v8 + 8);
    if (v18 == 1)
    {
      v19(v10, v16);
      v25 = 0;
      v26 = 0xE000000000000000;
      _StringGuts.grow(_:)(44);
      swift_bridgeObjectRelease();
      v25 = 0xD000000000000029;
      v26 = 0x8000000182307010;
      v20._countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v20);
      swift_bridgeObjectRelease();
      v21._countAndFlagsBits = 39;
      v21._object = (void *)0xE100000000000000;
      String.append(_:)(v21);
      v22 = v25;
      v23 = v26;
      lazy protocol witness table accessor for type PredicateError and conformance PredicateError();
      swift_allocError();
      *(_QWORD *)v24 = v22;
      *(_QWORD *)(v24 + 8) = v23;
      *(_BYTE *)(v24 + 16) = 0;
      swift_willThrow();
      return ((uint64_t (*)(char *, uint64_t))v19)(v14, v16);
    }
    else
    {
      v19(v14, v16);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v17 + 32))(a3, v10, v7);
    }
  }
  return result;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.ForcedUnwrap<A, B>@<X0>(unint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.ForcedUnwrap.evaluate(_:)(a1, a2, a3);
}

uint64_t static PredicateExpressions.build_ForcedUnwrap<A, B>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
}

uint64_t PredicateExpressions.OptionalFlatMap.description.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;

  _StringGuts.grow(_:)(57);
  v0._object = (void *)0x8000000182307040;
  v0._countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0x626169726176202CLL;
  v1._object = (void *)0xEC000000203A656CLL;
  String.append(_:)(v1);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 41;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  v4._countAndFlagsBits = 0x656C626169726156;
  v4._object = (void *)0xE900000000000028;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x66736E617274202CLL;
  v5._object = (void *)0xED0000203A6D726FLL;
  String.append(_:)(v5);
  _print_unlocked<A, B>(_:_:)();
  v6._countAndFlagsBits = 41;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return 0;
}

uint64_t PredicateExpressions.NilCoalesce.description.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;

  _StringGuts.grow(_:)(29);
  v0._object = (void *)0x8000000182307060;
  v0._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0x203A736872202CLL;
  v1._object = (void *)0xE700000000000000;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._countAndFlagsBits = 41;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t PredicateExpressions.ForcedUnwrap.description.getter()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(23);
  v0._object = (void *)0x8000000182307080;
  v0._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 41;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t PredicateExpressions.OptionalFlatMap<>.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[24];
  uint64_t v9;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v8, v9);
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v2)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v8, v9);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v8, v9);
    v6 = type metadata accessor for PredicateExpressions.Variable(0, *(_QWORD *)(a2 + 24), v4, v5);
    MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.Variable<A>, v6);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
}

void PredicateExpressions.OptionalFlatMap<>.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X6>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[16];

  v14[8] = a3;
  v14[2] = a4;
  v14[6] = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v14[4] = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[5] = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v6);
  v14[7] = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[10] = v8;
  v14[11] = v9;
  v14[3] = v9;
  v14[12] = v10;
  v14[13] = v11;
  v14[14] = v12;
  v14[15] = v13;
  type metadata accessor for PredicateExpressions.OptionalFlatMap();
}

uint64_t sub_181AB87A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v6 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v23 - v7;
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  v9 = *(_QWORD *)(v4 - 136);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v9)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  *(_QWORD *)(v4 - 208) = v6;
  *(_QWORD *)(v4 - 200) = v8;
  *(_QWORD *)(v4 - 136) = v3;
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 128, *(_QWORD *)(v4 - 104));
  v10 = *(_QWORD *)(v4 - 152);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 168) + 32);
  v12 = *(_QWORD *)(v4 - 200);
  *(_QWORD *)(v4 - 144) = v1;
  v11(v12, v10, v1);
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 128, *(_QWORD *)(v4 - 104));
  v13 = *(_QWORD *)(v4 - 176);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  v14 = a1;
  v15 = *(int *)(a1 + 68);
  v16 = *(_QWORD *)(v4 - 200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 160) + 32))(v16 + v15, v13, v2);
  v19 = type metadata accessor for PredicateExpressions.Variable(0, *(_QWORD *)(v4 - 184), v17, v18);
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 128, *(_QWORD *)(v4 - 104));
  MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.Variable<A>, v19);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  v20 = *(_QWORD *)(v4 - 136);
  *(_QWORD *)(v16 + *(int *)(v14 + 72)) = *(_QWORD *)(v4 - 72);
  __swift_destroy_boxed_opaque_existential_1(v4 - 128);
  v21 = *(_QWORD *)(v4 - 208);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v21 + 16))(*(_QWORD *)(v4 - 192), v16, v14);
  __swift_destroy_boxed_opaque_existential_1(v20);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(v16, v14);
}

void protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.OptionalFlatMap<A, B, C, D>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  PredicateExpressions.OptionalFlatMap<>.init(from:)(a1, *(_QWORD *)(a2 + 32), *(_QWORD *)(a3 - 8), a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.OptionalFlatMap<A, B, C, D>(_QWORD *a1, uint64_t a2)
{
  return PredicateExpressions.OptionalFlatMap<>.encode(to:)(a1, a2);
}

uint64_t PredicateExpressions.NilCoalesce<>.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v3[24];
  uint64_t v4;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

void PredicateExpressions.NilCoalesce<>.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[16];

  v12[5] = a5;
  v12[6] = a4;
  v12[9] = a3;
  v12[4] = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v12[7] = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v12[8] = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12[10] = v8;
  v12[11] = v8;
  v12[12] = v9;
  v12[13] = v10;
  v12[14] = v11;
  type metadata accessor for PredicateExpressions.NilCoalesce();
}

uint64_t sub_181AB8BFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v6 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v17 - v7;
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  v9 = *(_QWORD *)(v4 - 72);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v9)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  *(_QWORD *)(v4 - 200) = v6;
  *(_QWORD *)(v4 - 192) = a1;
  *(_QWORD *)(v4 - 72) = v3;
  *(_QWORD *)(v4 - 184) = v8;
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 120, *(_QWORD *)(v4 - 96));
  v10 = *(_QWORD *)(v4 - 144);
  v11 = *(_QWORD *)(v4 - 128);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  v12 = *(_QWORD *)(v4 - 184);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v12, v10, v11);
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 120, *(_QWORD *)(v4 - 96));
  v13 = *(_QWORD *)(v4 - 152);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  v14 = *(_QWORD *)(v4 - 192);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 176) + 32))(v12 + *(int *)(v14 + 52), v13, v2);
  __swift_destroy_boxed_opaque_existential_1(v4 - 120);
  v15 = *(_QWORD *)(v4 - 200);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v15 + 16))(*(_QWORD *)(v4 - 168), v12, v14);
  __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v4 - 72));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v12, v14);
}

void protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.NilCoalesce<A, B>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  PredicateExpressions.NilCoalesce<>.init(from:)(a1, *(_QWORD *)(a2 + 24), *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 24), a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.NilCoalesce<A, B>(_QWORD *a1)
{
  return PredicateExpressions.NilCoalesce<>.encode(to:)(a1);
}

uint64_t PredicateExpressions.ForcedUnwrap<>.encode(to:)(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t PredicateExpressions.ForcedUnwrap<>.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[4];
  char *v27;

  v23 = a4;
  v24 = *(_QWORD *)(a2 - 8);
  v25 = a3;
  MEMORY[0x1E0C80A78](a1);
  v27 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PredicateExpressions.ForcedUnwrap(0, v8, v9, v10);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v19 - v13;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v4)
  {
    v20 = v14;
    v21 = v12;
    v22 = v11;
    v15 = v24;
    __swift_project_boxed_opaque_existential_1(v26, v26[3]);
    v16 = v27;
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    v17 = v20;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v20, v16, a2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
    (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(v23, v17, v22);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.ForcedUnwrap<A, B>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return PredicateExpressions.ForcedUnwrap<>.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8), a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.ForcedUnwrap<A, B>(_QWORD *a1)
{
  return PredicateExpressions.ForcedUnwrap<>.encode(to:)(a1);
}

uint64_t PredicateExpressions.NilLiteral.evaluate(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 56))(a2, 1, 1);
}

uint64_t PredicateExpressions.NilLiteral.encode(to:)(_QWORD *a1)
{
  return specialized PredicateExpressions.NilLiteral.encode(to:)(a1);
}

uint64_t PredicateExpressions.NilLiteral.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PredicateExpressions.NilLiteral<A>(uint64_t a1)
{
  return PredicateExpressions.NilLiteral.init(from:)(a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PredicateExpressions.NilLiteral<A>(_QWORD *a1)
{
  return specialized PredicateExpressions.NilLiteral.encode(to:)(a1);
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.NilLiteral<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return PredicateExpressions.NilLiteral.evaluate(_:)(a1, a2);
}

uint64_t specialized Array.remove(at:)(unint64_t a1)
{
  unint64_t *v1;
  unint64_t v3;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v3 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v3;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v3 & 0x8000000000000000) != 0
    || (v3 & 0x4000000000000000) != 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew()(v3);
  }
  v5 = v3 & 0xFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = v6 - 1;
    v8 = v6 - 1 - a1;
    if (v8 >= 0)
    {
      v9 = v5 + 8 * a1;
      v10 = *(_QWORD *)(v9 + 32);
      memmove((void *)(v9 + 32), (const void *)(v9 + 40), 8 * v8);
      *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFF8) + 0x10) = v7;
      specialized Array._endMutation()();
      return v10;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.remove(at:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD **v2;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  __int128 v9;
  uint64_t result;

  v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = v6 - 1;
    v8 = &v5[5 * a1];
    v9 = *((_OWORD *)v8 + 3);
    *(_OWORD *)a2 = *((_OWORD *)v8 + 2);
    *(_OWORD *)(a2 + 16) = v9;
    *(_QWORD *)(a2 + 32) = v8[8];
    if ((uint64_t)(v7 - a1) >= 0)
    {
      result = (uint64_t)memmove(v8 + 4, v8 + 9, 40 * (v7 - a1));
      v5[2] = v7;
      *v2 = v5;
      return result;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined destroy of (id: PredicateExpressions.VariableID, value: Any)(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: PredicateExpressions.VariableID, value: Any));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type PredicateError and conformance PredicateError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PredicateError and conformance PredicateError;
  if (!lazy protocol witness table cache variable for type PredicateError and conformance PredicateError)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateError, &type metadata for PredicateError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateError and conformance PredicateError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PredicateError and conformance PredicateError;
  if (!lazy protocol witness table cache variable for type PredicateError and conformance PredicateError)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateError, &type metadata for PredicateError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateError and conformance PredicateError);
  }
  return result;
}

uint64_t specialized PredicateExpressions.NilLiteral.encode(to:)(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encodeNil()();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.OptionalFlatMap<A, B, C, D>(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.OptionalFlatMap<A, B, C, D>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for PredicateExpressions.OptionalFlatMap<A, B, C, D>, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.OptionalFlatMap<A, B, C, D>, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.OptionalFlatMap<A, B, C, D>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.NilCoalesce<A, B>(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.OptionalFlatMap<A, B, C, D>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for PredicateExpressions.NilCoalesce<A, B>, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.NilCoalesce<A, B>, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.NilCoalesce<A, B>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.OptionalFlatMap<A, B, C, D>(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _QWORD v17[4];
  _QWORD v18[4];

  v10 = *a3;
  v11 = a3[1];
  a1[1] = MEMORY[0x186DA9D64](a4);
  v13 = *(_QWORD *)(v10 + 16);
  v12 = *(_QWORD *)(v10 + 24);
  v15 = *(_QWORD *)(v11 + 16);
  v14 = *(_QWORD *)(v11 + 24);
  v18[0] = v13;
  v18[1] = v12;
  v18[2] = v15;
  v18[3] = v14;
  a1[2] = MEMORY[0x186DA9D64](a5, a2, v18);
  v17[0] = v13;
  v17[1] = v12;
  v17[2] = v15;
  v17[3] = v14;
  result = MEMORY[0x186DA9D64](a6, a2, v17);
  a1[3] = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.ForcedUnwrap<A, B>(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];
  _QWORD v10[2];

  v5 = *a3;
  a1[1] = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.ForcedUnwrap<A, B>);
  v7 = *(_QWORD *)(v5 + 16);
  v6 = *(_QWORD *)(v5 + 24);
  v10[0] = v7;
  v10[1] = v6;
  a1[2] = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> PredicateExpressions.ForcedUnwrap<A, B>, a2, v10);
  v9[0] = v7;
  v9[1] = v6;
  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> PredicateExpressions.ForcedUnwrap<A, B>, a2, v9);
  a1[3] = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.NilLiteral<A>(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  a1[1] = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.NilLiteral<A>);
  a1[2] = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.NilLiteral<A>, a2);
  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.NilLiteral<A>, a2);
  a1[3] = result;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PredicateExpressions.OptionalFlatMap(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(a3 + 32);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v5 + 64) + v8;
  v10 = *(_QWORD *)(v7 + 64) + 7;
  v11 = v8 | *(_DWORD *)(v5 + 80) & 0xF8;
  if (v11 > 7
    || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || ((v10 + (v9 & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + (((v11 | 7) + 16) & ~(unint64_t)(v11 | 7)));
    swift_retain();
  }
  else
  {
    v15 = ~v8;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v16 = ((unint64_t)a2 + v9) & v15;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(((unint64_t)v4 + v9) & v15, v16, v6);
    *(_QWORD *)((v10 + (((unint64_t)v4 + v9) & v15)) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v10 + v16) & 0xFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t destroy for PredicateExpressions.OptionalFlatMap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v4 + 8))();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 32) - 8) + 8))((*(_QWORD *)(v4 + 64) + a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) - 8) + 80));
}

uint64_t initializeWithCopy for PredicateExpressions.OptionalFlatMap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v11, v12);
  *(_QWORD *)((*(_QWORD *)(v8 + 64) + 7 + v11) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v8 + 64) + 7 + v12) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithCopy for PredicateExpressions.OptionalFlatMap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v11, v12);
  *(_QWORD *)((*(_QWORD *)(v8 + 64) + 7 + v11) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v8 + 64) + 7 + v12) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for PredicateExpressions.OptionalFlatMap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v11, v12);
  *(_QWORD *)((*(_QWORD *)(v8 + 64) + 7 + v11) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v8 + 64) + 7 + v12) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for PredicateExpressions.OptionalFlatMap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v11, v12);
  *(_QWORD *)((*(_QWORD *)(v8 + 64) + 7 + v11) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v8 + 64) + 7 + v12) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.OptionalFlatMap(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(a3 + 32);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= v5)
    v9 = *(_DWORD *)(v4 + 84);
  else
    v9 = *(_DWORD *)(v7 + 84);
  if (!a2)
    return 0;
  v10 = *(unsigned __int8 *)(v7 + 80);
  v11 = *(_QWORD *)(v4 + 64) + v10;
  if (v9 >= a2)
  {
    if (v9)
    {
      if (v5 >= v8)
        return (*(uint64_t (**)(void))(v4 + 48))();
      else
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))((v11 + a1) & ~v10, *(unsigned int *)(v7 + 84), v6);
    }
    return 0;
  }
  if (((((*(_QWORD *)(v7 + 64) + (v11 & ~v10) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
    v12 = 2;
  else
    v12 = a2 - v9 + 1;
  if (v12 >= 0x10000)
    v13 = 4;
  else
    v13 = 2;
  if (v12 < 0x100)
    v13 = 1;
  if (v12 >= 2)
    v14 = v13;
  else
    v14 = 0;
  return ((uint64_t (*)(void))((char *)&loc_181AB99F0 + 4 * byte_18206B628[v14]))();
}

void storeEnumTagSinglePayload for PredicateExpressions.OptionalFlatMap(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 32) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  if (v7 >= a3)
  {
    v11 = 0u;
    if (a2 <= v7)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v6 + 64) + ((*(_DWORD *)(v5 + 64) + (_DWORD)v8) & ~(_DWORD)v8) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v9 = a3 - v7 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_17:
      __asm { BR              X16 }
  }
  if (((*(_DWORD *)(v6 + 64) + ((*(_DWORD *)(v5 + 64) + (_DWORD)v8) & ~(_DWORD)v8) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64) + ((*(_QWORD *)(v5 + 64) + v8) & ~v8) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_181AB9B8C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_181AB9B94(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x181AB9B9CLL);
}

void sub_181AB9BD8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_181AB9BE0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_181AB9BE8(uint64_t a1, int a2, unsigned int a3)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_WORD *)(v9 + v10) = 0;
  if (!a2)
    JUMPOUT(0x181AB9BF0);
  if (a3 >= v4)
    return (*(uint64_t (**)(uint64_t))(v6 + 56))(v9);
  else
    return (*(uint64_t (**)(uint64_t))(v7 + 56))((v8 + v9) & v5);
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.NilCoalesce(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_181AB9CE4 + 4 * byte_18206B637[v17 - 1]))();
}

void storeEnumTagSinglePayload for PredicateExpressions.NilCoalesce(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t *initializeBufferWithCopyOfBuffer for PredicateExpressions.ForcedUnwrap(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(_QWORD *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t initializeWithCopy for PredicateExpressions.ForcedUnwrap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 16))();
  return a1;
}

uint64_t assignWithCopy for PredicateExpressions.ForcedUnwrap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 24))();
  return a1;
}

uint64_t initializeWithTake for PredicateExpressions.ForcedUnwrap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 32))();
  return a1;
}

uint64_t assignWithTake for PredicateExpressions.ForcedUnwrap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 40))();
  return a1;
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.ForcedUnwrap(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_181ABA140 + 4 * byte_18206B645[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for PredicateExpressions.ForcedUnwrap(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

Foundation::CocoaError::Code __swiftcall CocoaError.Code.init(fileErrno:reading:)(Swift::Int32 fileErrno, Swift::Bool reading)
{
  uint64_t *v2;
  uint64_t v3;
  Foundation::CocoaError::Code result;

  if (reading)
  {
    v3 = 263;
    switch(fileErrno)
    {
      case 1:
      case 13:
        *v2 = 257;
        break;
      case 2:
        *v2 = 260;
        break;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
        goto LABEL_9;
      case 27:
        goto LABEL_12;
      default:
        if (fileErrno == 63)
          *v2 = 258;
        else
LABEL_9:
          *v2 = 256;
        break;
    }
  }
  else
  {
    v3 = 4;
    switch(fileErrno)
    {
      case 1:
      case 13:
        *v2 = 513;
        break;
      case 2:
        goto LABEL_12;
      case 17:
        *v2 = 516;
        break;
      case 28:
      case 69:
        *v2 = 640;
        break;
      case 30:
        *v2 = 642;
        break;
      case 63:
        *v2 = 514;
        break;
      default:
        v3 = 512;
LABEL_12:
        *v2 = v3;
        break;
    }
  }
  LODWORD(result.rawValue) = fileErrno;
  return result;
}

uint64_t static CocoaError._errorWithErrno(_:reading:variant:userInfo:)@<X0>(Swift::Int32 a1@<W0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  _OWORD *v33;
  unint64_t v34;
  unint64_t v35;
  int64_t v36;
  unint64_t v37;
  int64_t v38;
  int64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t *v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  id v53;
  id v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v60;
  uint64_t result;
  Swift::String v62;
  uint64_t v64;
  uint64_t v65;
  int64_t v66;
  id v67;
  int64_t i;
  __int128 v69;
  __int128 v70;
  _OWORD v71[2];
  _OWORD v72[2];
  unint64_t v73;
  unint64_t v74;
  _QWORD v75[6];
  uint64_t v76;

  v76 = a5;
  swift_bridgeObjectRetain();
  if (a1 != 102)
  {
    if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
      goto LABEL_57;
    v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
    v11 = v10;
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
    v12 = (int)POSIXErrorCode.rawValue.getter();
    v13 = objc_allocWithZone((Class)NSError);
    v14 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v15 = objc_msgSend(v13, sel_initWithDomain_code_userInfo_, v14, v12, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v16 = objc_msgSend(v15, sel_domain);
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v19 = v18;

    if (v17 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain")) || v19 != v20)
    {
      v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v22 & 1) != 0)
      {
LABEL_10:
        *(_QWORD *)&v70 = v15;
        lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
        AnyHashable.init<A>(_:)();
        specialized Dictionary.subscript.setter((uint64_t)&v73, (uint64_t)v67, v11);
        goto LABEL_11;
      }
      __break(1u);
    }
    swift_bridgeObjectRelease_n();
    goto LABEL_10;
  }
LABEL_11:
  if (a4)
  {
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUserStringVariant"));
    v25 = v24;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = xmmword_18205C850;
    *(_QWORD *)(v26 + 32) = a3;
    *(_QWORD *)(v26 + 40) = a4;
    *(_QWORD *)&v70 = v26;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance <A> [A]();
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v73, (uint64_t)v23, v25);
  }
  CocoaError.Code.init(fileErrno:reading:)(a1, a2 & 1);
  v27 = v76;
  v64 = v75[5];
  if (*(_QWORD *)(v76 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v28 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v28 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  v65 = v27 + 64;
  v29 = -1;
  v30 = -1 << *(_BYTE *)(v27 + 32);
  if (-v30 < 64)
    v29 = ~(-1 << -(char)v30);
  v31 = v29 & *(_QWORD *)(v27 + 64);
  v66 = (unint64_t)(63 - v30) >> 6;
  swift_bridgeObjectRetain();
  i = 0;
  a1 = 40;
  if (v31)
    goto LABEL_21;
LABEL_22:
  v36 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_55;
  if (v36 >= v66)
    goto LABEL_45;
  v37 = *(_QWORD *)(v65 + 8 * v36);
  v38 = i + 1;
  if (!v37)
  {
    v38 = i + 2;
    if (i + 2 >= v66)
      goto LABEL_45;
    v37 = *(_QWORD *)(v65 + 8 * v38);
    if (!v37)
    {
      v38 = i + 3;
      if (i + 3 >= v66)
        goto LABEL_45;
      v37 = *(_QWORD *)(v65 + 8 * v38);
      if (!v37)
      {
        v38 = i + 4;
        if (i + 4 >= v66)
          goto LABEL_45;
        v37 = *(_QWORD *)(v65 + 8 * v38);
        if (!v37)
        {
          v38 = i + 5;
          if (i + 5 >= v66)
            goto LABEL_45;
          v37 = *(_QWORD *)(v65 + 8 * v38);
          if (!v37)
          {
            v39 = i + 6;
            if (i + 6 < v66)
            {
              v37 = *(_QWORD *)(v65 + 8 * v39);
              if (v37)
              {
                v38 = i + 6;
                goto LABEL_39;
              }
              while (1)
              {
                v38 = v39 + 1;
                if (__OFADD__(v39, 1))
                  goto LABEL_56;
                if (v38 >= v66)
                  break;
                v37 = *(_QWORD *)(v65 + 8 * v38);
                ++v39;
                if (v37)
                  goto LABEL_39;
              }
            }
LABEL_45:
            outlined consume of Set<A1>.Iterator._Variant<A><A1>();
            swift_bridgeObjectRelease();
            static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
            v51 = objc_allocWithZone((Class)NSError);
            v52 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            v53 = objc_msgSend(v51, sel_initWithDomain_code_userInfo_, v52, v64, _NativeDictionary.bridged()());
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            v54 = objc_msgSend(v53, sel_domain);
            v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
            v57 = v56;

            if (v55 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"))
              || v57 != v58)
            {
              v60 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              result = swift_bridgeObjectRelease();
              if ((v60 & 1) != 0)
              {
LABEL_52:
                *a6 = v53;
                return result;
              }
              __break(1u);
            }
            result = swift_bridgeObjectRelease_n();
            goto LABEL_52;
          }
        }
      }
    }
  }
LABEL_39:
  v31 = (v37 - 1) & v37;
  v35 = __clz(__rbit64(v37)) + (v38 << 6);
  for (i = v38; ; v35 = v34 | (i << 6))
  {
    v40 = (uint64_t *)(*(_QWORD *)(v27 + 48) + 16 * v35);
    v42 = *v40;
    v41 = v40[1];
    outlined init with copy of AnyHashable(*(_QWORD *)(v27 + 56) + 40 * v35, (uint64_t)v75);
    v73 = v42;
    v74 = v41;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    v43 = v42;
    outlined init with take of Any(&v69, v71);
    outlined init with take of Any(v71, v72);
    outlined init with take of Any(v72, &v70);
    v44 = specialized __RawDictionaryStorage.find<A>(_:)(v42, v41);
    v45 = v44;
    if ((v46 & 1) != 0)
    {
      v32 = (uint64_t *)(v28[6] + 16 * v44);
      swift_bridgeObjectRelease();
      *v32 = v43;
      v32[1] = v41;
      a1 = 40;
      v33 = (_OWORD *)(v28[7] + 32 * v45);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
      outlined init with take of Any(&v70, v33);
      if (!v31)
        goto LABEL_22;
      goto LABEL_21;
    }
    if (v28[2] >= v28[3])
      break;
    *(_QWORD *)((char *)v28 + ((v44 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v44;
    v47 = (uint64_t *)(v28[6] + 16 * v44);
    *v47 = v43;
    v47[1] = v41;
    outlined init with take of Any(&v70, (_OWORD *)(v28[7] + 32 * v44));
    v48 = v28[2];
    v49 = __OFADD__(v48, 1);
    v50 = v48 + 1;
    if (v49)
      goto LABEL_54;
    v28[2] = v50;
    if (!v31)
      goto LABEL_22;
LABEL_21:
    v34 = __clz(__rbit64(v31));
    v31 &= v31 - 1;
  }
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  v73 = 0;
  v74 = 0xE000000000000000;
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  v73 = 0xD000000000000014;
  v74 = 0x8000000182306980;
  LODWORD(v70) = a1;
  v62._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v62);
  swift_bridgeObjectRelease();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t static CocoaError.errorWithFilePath(_:errno:reading:variant:additionalUserInfo:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, Swift::Int32 a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[3];
  _OWORD v23[2];
  uint64_t v24;
  uint64_t v25;

  v25 = a7;
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
  v17 = v16;
  v22[0] = a1;
  v22[1] = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)v23, (uint64_t)v15, v17);
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
  v20 = v19;
  URL.init(_fileManagerFailableFileURLWithPath:)(a1, a2, (uint64_t)v22);
  if (v22[0])
  {
    lazy protocol witness table accessor for type URL and conformance URL();
    AnyHashable.init<A>(_:)();
  }
  else
  {
    memset(v23, 0, sizeof(v23));
    v24 = 0;
  }
  specialized Dictionary.subscript.setter((uint64_t)v23, (uint64_t)v18, v20);
  static CocoaError._errorWithErrno(_:reading:variant:userInfo:)(a3, a4 & 1, a5, a6, v25, a8);
  return swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type [String] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type [String] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    v2 = MEMORY[0x1E0DEA978];
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF18], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
  }
  return result;
}

id NSSortDescriptor.init<A, B>(keyPath:ascending:comparator:)(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  _QWORD v14[6];

  v8 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  _bridgeKeyPathToString(_:)();
  v9 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v14[4] = a3;
  v14[5] = a4;
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 1107296256;
  v14[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed Any, @in_guaranteed Any) -> (@unowned NSComparisonResult);
  v14[3] = &block_descriptor_2;
  v10 = _Block_copy(v14);
  swift_retain();
  swift_release();
  v11 = objc_msgSend(v8, sel_initWithKey_ascending_comparator_, v9, a2 & 1, v10);
  _Block_release(v10);
  swift_unknownObjectRelease();
  v12 = v11;
  swift_retain();
  objc_setAssociatedObject(v12, v12, a1, (void *)0x301);

  swift_release_n();
  swift_release();
  return v12;
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed Any, @in_guaranteed Any) -> (@unowned NSComparisonResult)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *, _QWORD *);
  uint64_t v6;
  _QWORD v8[4];
  _QWORD v9[4];

  v5 = *(uint64_t (**)(_QWORD *, _QWORD *))(a1 + 32);
  v9[3] = swift_getObjectType();
  v9[0] = a2;
  v8[3] = swift_getObjectType();
  v8[0] = a3;
  swift_retain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v6 = v5(v9, v8);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  return v6;
}

uint64_t NSSortDescriptor.keyPath.getter()
{
  void *v0;
  uint64_t v2;
  _OWORD v3[2];
  _BYTE v4[24];
  uint64_t v5;

  if (objc_getAssociatedObject(v0, v0))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v3, 0, sizeof(v3));
  }
  outlined init with take of Any?((uint64_t)v3, (uint64_t)v4);
  if (v5)
  {
    type metadata accessor for AnyKeyPath();
    if (swift_dynamicCast())
      return v2;
    else
      return 0;
  }
  else
  {
    outlined destroy of Any?((uint64_t)v4);
    return 0;
  }
}

id MachError._nsError.getter()
{
  id *v0;

  return *v0;
}

void __swiftcall MachError.init(_nsError:)(Foundation::MachError *__return_ptr retstr, NSError *_nsError)
{
  NSString *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;

  v4 = -[NSError domain](_nsError, sel_domain);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  if (v5 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSMachErrorDomain")) && v7 == v8)
    goto LABEL_7;
  v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_7:
    swift_bridgeObjectRelease_n();
  }
  retstr->_nsError.super.isa = (Class)_nsError;
}

id static MachError.errorDomain.getter()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSMachErrorDomain"));
}

uint64_t MachError.hashValue.getter()
{
  return NSObject.hashValue.getter();
}

id protocol witness for static CustomNSError.errorDomain.getter in conformance MachError()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSMachErrorDomain"));
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance MachError()
{
  return NSObject.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance MachError()
{
  id *v0;
  id v1;

  v1 = *v0;
  NSObject.hash(into:)();

}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MachError()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  v2 = v1;
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

id protocol witness for Error._code.getter in conformance MachError()
{
  id *v0;

  return objc_msgSend(*v0, sel_code);
}

id protocol witness for Error._getEmbeddedNSError() in conformance MachError()
{
  id *v0;
  id v1;
  id v2;

  v1 = *v0;
  v2 = *v0;
  return v1;
}

id protocol witness for static Equatable.== infix(_:_:) in conformance MachError(id *a1, _QWORD *a2)
{
  return objc_msgSend(*a1, sel_isEqual_, *a2);
}

uint64_t static MachError.success.getter()
{
  return 0;
}

uint64_t static MachError.invalidAddress.getter()
{
  return 1;
}

uint64_t static MachError.protectionFailure.getter()
{
  return 2;
}

uint64_t static MachError.noSpace.getter()
{
  return 3;
}

uint64_t static MachError.invalidArgument.getter()
{
  return 4;
}

uint64_t static MachError.failure.getter()
{
  return 5;
}

uint64_t static MachError.resourceShortage.getter()
{
  return 6;
}

uint64_t static MachError.notReceiver.getter()
{
  return 7;
}

uint64_t static MachError.noAccess.getter()
{
  return 8;
}

uint64_t static MachError.memoryFailure.getter()
{
  return 9;
}

uint64_t static MachError.memoryError.getter()
{
  return 10;
}

uint64_t static MachError.alreadyInSet.getter()
{
  return 11;
}

uint64_t static MachError.notInSet.getter()
{
  return 12;
}

uint64_t static MachError.nameExists.getter()
{
  return 13;
}

uint64_t static MachError.aborted.getter()
{
  return 14;
}

uint64_t static MachError.invalidName.getter()
{
  return 15;
}

uint64_t static MachError.invalidTask.getter()
{
  return 16;
}

uint64_t static MachError.invalidRight.getter()
{
  return 17;
}

uint64_t static MachError.invalidValue.getter()
{
  return 18;
}

uint64_t static MachError.userReferencesOverflow.getter()
{
  return 19;
}

uint64_t static MachError.invalidCapability.getter()
{
  return 20;
}

uint64_t static MachError.rightExists.getter()
{
  return 21;
}

uint64_t static MachError.invalidHost.getter()
{
  return 22;
}

uint64_t static MachError.memoryPresent.getter()
{
  return 23;
}

uint64_t static MachError.memoryDataMoved.getter()
{
  return 24;
}

uint64_t static MachError.memoryRestartCopy.getter()
{
  return 25;
}

uint64_t static MachError.invalidProcessorSet.getter()
{
  return 26;
}

uint64_t static MachError.policyLimit.getter()
{
  return 27;
}

uint64_t static MachError.invalidPolicy.getter()
{
  return 28;
}

uint64_t static MachError.invalidObject.getter()
{
  return 29;
}

uint64_t static MachError.alreadyWaiting.getter()
{
  return 30;
}

uint64_t static MachError.defaultSet.getter()
{
  return 31;
}

uint64_t static MachError.exceptionProtected.getter()
{
  return 32;
}

uint64_t static MachError.invalidLedger.getter()
{
  return 33;
}

uint64_t static MachError.invalidMemoryControl.getter()
{
  return 34;
}

uint64_t static MachError.invalidSecurity.getter()
{
  return 35;
}

uint64_t static MachError.notDepressed.getter()
{
  return 36;
}

uint64_t static MachError.terminated.getter()
{
  return 37;
}

uint64_t static MachError.lockSetDestroyed.getter()
{
  return 38;
}

uint64_t static MachError.lockUnstable.getter()
{
  return 39;
}

uint64_t static MachError.lockOwned.getter()
{
  return 40;
}

uint64_t static MachError.lockOwnedSelf.getter()
{
  return 41;
}

uint64_t static MachError.semaphoreDestroyed.getter()
{
  return 42;
}

uint64_t static MachError.rpcServerTerminated.getter()
{
  return 43;
}

uint64_t static MachError.rpcTerminateOrphan.getter()
{
  return 44;
}

uint64_t static MachError.rpcContinueOrphan.getter()
{
  return 45;
}

uint64_t static MachError.notSupported.getter()
{
  return 46;
}

uint64_t static MachError.nodeDown.getter()
{
  return 47;
}

uint64_t static MachError.notWaiting.getter()
{
  return 48;
}

uint64_t static MachError.operationTimedOut.getter()
{
  return 49;
}

uint64_t static MachError.codesignError.getter()
{
  return 50;
}

uint64_t static MachError.policyStatic.getter()
{
  return 51;
}

unint64_t lazy protocol witness table accessor for type MachErrorCode and conformance MachErrorCode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MachErrorCode and conformance MachErrorCode;
  if (!lazy protocol witness table cache variable for type MachErrorCode and conformance MachErrorCode)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for MachErrorCode, MEMORY[0x1E0DEF378]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MachErrorCode and conformance MachErrorCode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MachErrorCode and conformance MachErrorCode;
  if (!lazy protocol witness table cache variable for type MachErrorCode and conformance MachErrorCode)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEF388], MEMORY[0x1E0DEF378]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MachErrorCode and conformance MachErrorCode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MachErrorCode and conformance MachErrorCode;
  if (!lazy protocol witness table cache variable for type MachErrorCode and conformance MachErrorCode)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEF380], MEMORY[0x1E0DEF378]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MachErrorCode and conformance MachErrorCode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Int32 and conformance Int32()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int32 and conformance Int32;
  if (!lazy protocol witness table cache variable for type Int32 and conformance Int32)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEDC10], MEMORY[0x1E0DEDBC8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int32 and conformance Int32);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int32 and conformance Int32;
  if (!lazy protocol witness table cache variable for type Int32 and conformance Int32)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEDC00], MEMORY[0x1E0DEDBC8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int32 and conformance Int32);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for MachError(_QWORD *a1)
{
  unint64_t result;

  a1[1] = lazy protocol witness table accessor for type MachError and conformance MachError();
  a1[2] = lazy protocol witness table accessor for type MachError and conformance MachError();
  result = lazy protocol witness table accessor for type MachError and conformance MachError();
  a1[3] = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type MachError and conformance MachError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MachError and conformance MachError;
  if (!lazy protocol witness table cache variable for type MachError and conformance MachError)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for MachError, &type metadata for MachError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MachError and conformance MachError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MachError and conformance MachError;
  if (!lazy protocol witness table cache variable for type MachError and conformance MachError)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for MachError, &type metadata for MachError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MachError and conformance MachError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MachError and conformance MachError;
  if (!lazy protocol witness table cache variable for type MachError and conformance MachError)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for MachError, &type metadata for MachError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MachError and conformance MachError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MachError and conformance MachError;
  if (!lazy protocol witness table cache variable for type MachError and conformance MachError)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for MachError, &type metadata for MachError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MachError and conformance MachError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MachError and conformance MachError;
  if (!lazy protocol witness table cache variable for type MachError and conformance MachError)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for MachError, &type metadata for MachError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MachError and conformance MachError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MachError and conformance MachError;
  if (!lazy protocol witness table cache variable for type MachError and conformance MachError)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for MachError, &type metadata for MachError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MachError and conformance MachError);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for MachError(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type MachError and conformance MachError();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for MachErrorCode(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type MachErrorCode and conformance MachErrorCode();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for MachError()
{
  return &type metadata for MachError;
}

uint64_t specialized _withPredicateArchivingState<A>(_:_:)(uint64_t a1, uint64_t a2, char a3, void (*a4)(uint64_t))
{
  pthread_key_t v8;
  uint64_t *v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x1E0C80C00];
  if (one-time initialization token for predicateArchivingState != -1)
    swift_once();
  v8 = static _ThreadLocal.Key<A>.predicateArchivingState;
  v9 = (uint64_t *)pthread_getspecific(static _ThreadLocal.Key<A>.predicateArchivingState);
  v10 = a3 & 1;
  if (v9)
  {
    v11 = *v9;
    v12 = *(_BYTE *)(*v9 + 32);
    *(_BYTE *)(*v9 + 32) = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13 = swift_retain();
    v17 = *(_OWORD *)(v11 + 16);
    *(_QWORD *)(v11 + 16) = a1;
    *(_QWORD *)(v11 + 24) = a2;
    a4(v13);
    *(_OWORD *)(v11 + 16) = v17;
    *(_BYTE *)(v11 + 32) = v12;
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    type metadata accessor for PredicateArchivingState();
    v15 = swift_allocObject();
    *(_QWORD *)(v15 + 16) = a1;
    *(_QWORD *)(v15 + 24) = a2;
    *(_BYTE *)(v15 + 32) = v10;
    *(_QWORD *)(v15 + 40) = MEMORY[0x1E0DEE9E0];
    v18[0] = v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (pthread_getspecific(v8))
      __break(1u);
    v16 = pthread_setspecific(v8, v18);
    a4(v16);
    pthread_setspecific(v8, 0);
    return swift_release();
  }
}

uint64_t Predicate.encode(to:configuration:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t MetatypeMetadata;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t TupleTypeMetadata;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  unint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t *, __n128);
  uint64_t *v41;
  int *v42;
  char **v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t **v48;
  uint64_t v49;
  int *v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  int *v59;
  uint64_t v60;
  int v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *DynamicType;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  Swift::String v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  char *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  unint64_t v124;
  unsigned __int8 v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unsigned __int8 v130;
  _QWORD v131[2];
  uint64_t v132;
  uint64_t v133;
  char v134[8];
  uint64_t v135;
  char v136;

  v6 = *(_QWORD *)(a3 + 16);
  v120 = (uint64_t *)(8 * v6);
  if (v6 == 1)
  {
    MetatypeMetadata = swift_getMetatypeMetadata();
  }
  else
  {
    MEMORY[0x1E0C80A78](a1);
    if (v6)
    {
      v9 = *(_QWORD *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL;
      v10 = (uint64_t *)((char *)&v101 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
      v11 = v6;
      do
      {
        v9 += 8;
        *v10++ = swift_getMetatypeMetadata();
        --v11;
      }
      while (v11);
    }
    MetatypeMetadata = swift_getTupleTypeMetadata();
  }
  v109 = &v101;
  v103 = MetatypeMetadata;
  MEMORY[0x1E0C80A78](MetatypeMetadata);
  v13 = (char *)&v101 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PredicateExpressionCodingKeys>);
  v108 = &v101;
  v118 = v14;
  v107 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v119 = (char *)&v101 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = a3;
  if (v6 == 1)
  {
    TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable(0, *(_QWORD *)(*(_QWORD *)(a3 + 24) & 0xFFFFFFFFFFFFFELL), v16, v17);
  }
  else
  {
    v122 = &v101;
    MEMORY[0x1E0C80A78](v15);
    if (v6)
    {
      v23 = (uint64_t *)(*(_QWORD *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL);
      v24 = (uint64_t *)((char *)&v101 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
      v25 = v6;
      do
      {
        v26 = *v23++;
        *v24++ = type metadata accessor for PredicateExpressions.Variable(255, v26, v20, v21);
        --v25;
      }
      while (v25);
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  v122 = (uint64_t *)TupleTypeMetadata;
  v106 = &v101;
  v27 = *(_QWORD *)(TupleTypeMetadata - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata);
  v29 = (char *)&v101 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = &v101;
  MEMORY[0x1E0C80A78](v30);
  v32 = (char *)&v101 - v31;
  v104 = &v101;
  MEMORY[0x1E0C80A78](v33);
  v35 = (char *)&v101 - v34;
  v112 = *(_QWORD *)a2;
  v113 = *(_QWORD *)(a2 + 8);
  LODWORD(v111) = *(unsigned __int8 *)(a2 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  v36 = v114;
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v114, (uint64_t)v131);
  v102 = v133;
  v116 = v132;
  v117 = __swift_project_boxed_opaque_existential_1(v131, v132);
  v110 = &v101;
  v37 = MEMORY[0x1E0C80A78](v117);
  v39 = (v38 + 15) & 0xFFFFFFFFFFFFFFF0;
  v40 = *(void (**)(char *, uint64_t, uint64_t *, __n128))(v27 + 16);
  v41 = v122;
  v40(v32, v36 + *(int *)(v121 + 36), v122, v37);
  if (v6)
  {
    v42 = (int *)(v41 + 4);
    v43 = (char **)((char *)&v101 - v39);
    v44 = v6;
    do
    {
      if (v6 == 1)
      {
        LODWORD(v45) = 0;
        v46 = v35;
      }
      else
      {
        v45 = *v42;
        v46 = &v35[v45];
      }
      *(_QWORD *)v46 = *(_QWORD *)&v32[(int)v45];
      *v43++ = v46;
      v42 += 4;
      --v44;
    }
    while (v44);
  }
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v134, v135);
  lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys();
  v47 = dispatch thunk of UnkeyedEncodingContainer.nestedContainer<A>(keyedBy:)();
  MEMORY[0x1E0C80A78](v47);
  v48 = (uint64_t **)((char *)&v101 - v39);
  if (v6)
  {
    v49 = 0;
    v50 = (int *)(v122 + 4);
    v51 = v113;
    v52 = v112;
    do
    {
      if (v6 == 1)
        v53 = 0;
      else
        v53 = *v50;
      *(_QWORD *)&v29[v53] = **(_QWORD **)((char *)&v101 + 8 * v49 - v39);
      v48[v49++] = (uint64_t *)&v29[v53];
      v50 += 4;
    }
    while (v6 != v49);
    v128 = v52;
    v129 = v51;
    v130 = v111;
    MEMORY[0x1E0C80A78](v52);
    v55 = (char *)&v101 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
    v56 = 0;
    v57 = *(_QWORD *)(v121 + 24) & 0xFFFFFFFFFFFFFFFELL;
    v59 = (int *)(v58 + 32);
    v60 = v115;
    do
    {
      if (v6 == 1)
        v61 = 0;
      else
        v61 = *v59;
      v62 = &v13[v61];
      *(_QWORD *)v62 = *(_QWORD *)(v57 + 8 * v56);
      *(_QWORD *)&v55[8 * v56++] = v62;
      v59 += 4;
    }
    while (v6 != v56);
  }
  else
  {
    v128 = v112;
    v129 = v113;
    v55 = &v136;
    v130 = v111;
    v60 = v115;
  }
  v63 = *(_QWORD *)(v121 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PredicateCodableConfiguration.allowInputs<each A>(_:)((uint64_t)v55, v6, v63);
  v64 = v116;
  v126 = v116;
  v65 = __swift_allocate_boxed_opaque_existential_1(&v123);
  (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v64 - 8) + 16))(v65, v117, v64);
  __swift_project_boxed_opaque_existential_1(&v123, v126);
  DynamicType = (uint64_t *)swift_getDynamicType();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v123);
  v67 = v128;
  v68 = v129;
  v123 = v128;
  v124 = v129;
  LODWORD(v122) = v130;
  v125 = v130;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v69 = PredicateCodableConfiguration._identifier(for:)(DynamicType);
  if (!v70)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v80 = _typeName(_:qualified:)();
    v82 = v81;
    v123 = 47;
    v124 = 0xE100000000000000;
    v127 = MEMORY[0x1E0DEE9D8];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], MEMORY[0x1E0DEAF20]);
    v79 = v119;
    v83._countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
    String.append(_:)(v83);
    swift_bridgeObjectRelease();
    v84 = v123;
    v85 = v124;
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    swift_allocError();
    *(_QWORD *)v86 = v80;
    *(_QWORD *)(v86 + 8) = v82;
    *(_QWORD *)(v86 + 16) = v84;
    *(_QWORD *)(v86 + 24) = v85;
    *(_BYTE *)(v86 + 32) = 0;
    swift_willThrow();
    goto LABEL_36;
  }
  v120 = &v101;
  v121 = (uint64_t)v69;
  if ((v71 & 1) != 0)
  {
    v113 = v70;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v112 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v72 = v70;
    v73 = Type.genericArguments2.getter();
    v75 = v74;
    v77 = v76;
    swift_bridgeObjectRetain();
    LOBYTE(v100) = 0;
    v78 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF18ReflectionInternal17GenericArguments2V_10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOsAE_pTg5016_s10Foundation19i12Structure33_klmnopqrs18LLV_4with4pathAD18d63Internal4TypeV_AA29PredicateCodableConfigurationVSaySSGtKcfcAD8t5OAG07F9U0OKXEfU_AI29PredicateCodableConfigurationVSaySSGSS10identifier_Sb10isConcretetTf1cn_nTf4nggg_n(v73, v75, v77, v67, v68, (char)v122, MEMORY[0x1E0DEE9D8], v121, v72);
    if (v60)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v79 = v119;
LABEL_36:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v87 = v107;
LABEL_46:
      (*(void (**)(char *, uint64_t))(v87 + 8))(v79, v118);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v131);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v134);
    }
    v112 = v78;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v113 = v72;
    swift_bridgeObjectRelease();
  }
  LOBYTE(v127) = 0;
  v88 = KeyedEncodingContainer.nestedUnkeyedContainer(forKey:)();
  v115 = v67;
  v111 = v63;
  v114 = v68;
  if (v6)
  {
    v89 = (uint64_t *)(v63 & 0xFFFFFFFFFFFFFFFELL);
    v90 = v6;
    while (1)
    {
      v91 = *v89;
      v127 = **v48;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v123, v126);
      v94 = type metadata accessor for PredicateExpressions.Variable(0, v91, v92, v93);
      MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.Variable<A>, v94);
      v88 = dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
      if (v60)
        break;
      ++v48;
      ++v89;
      if (!--v90)
        goto LABEL_43;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v123);
    v87 = v107;
    v79 = v119;
    goto LABEL_46;
  }
LABEL_43:
  MEMORY[0x1E0C80A78](v88);
  v95 = v116;
  *(&v101 - 10) = v6;
  *(&v101 - 9) = v95;
  *(&v101 - 8) = v111;
  v96 = v102;
  *(&v101 - 7) = *(_QWORD *)(v102 + 8);
  v79 = v119;
  *(&v101 - 6) = *(_QWORD *)(v96 + 24);
  *(&v101 - 5) = (uint64_t)v79;
  v97 = v113;
  *(&v101 - 4) = v121;
  *(&v101 - 3) = v97;
  v99 = v112;
  v100 = v117;
  specialized _withPredicateArchivingState<A>(_:_:)(v115, v114, (char)v122, (void (*)(uint64_t))partial apply for closure #1 in KeyedEncodingContainer<>._encode<A, B>(_:variable:predicateConfiguration:));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v123);
  if (v60)
  {
    v87 = v107;
    goto LABEL_46;
  }
  (*(void (**)(char *, uint64_t))(v107 + 8))(v79, v118);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v131);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v134);
}

uint64_t Expression.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t MetatypeMetadata;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t TupleTypeMetadata;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD **v41;
  uint64_t v42;
  _QWORD *v43;
  int *v44;
  char **v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t **v51;
  uint64_t v52;
  int *v53;
  _QWORD *v54;
  uint64_t v55;
  int v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t *v61;
  int *v62;
  _QWORD *v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *DynamicType;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  Swift::String v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t *v113;
  uint64_t *v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  unint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unsigned __int8 v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unsigned __int8 v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char v142[8];
  uint64_t v143;
  uint64_t v144;

  v4 = *(_QWORD *)(a2 + 16);
  v128 = 8 * v4;
  v130 = a2;
  if (v4 == 1)
  {
    MetatypeMetadata = swift_getMetatypeMetadata();
  }
  else
  {
    MEMORY[0x1E0C80A78](a1);
    if (v4)
    {
      v7 = *(_QWORD *)(v130 + 24) & 0xFFFFFFFFFFFFFFFELL;
      v8 = (uint64_t *)((char *)&v109 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
      v9 = v4;
      do
      {
        v7 += 8;
        *v8++ = swift_getMetatypeMetadata();
        --v9;
      }
      while (v9);
    }
    MetatypeMetadata = swift_getTupleTypeMetadata();
  }
  v118 = &v109;
  v111 = MetatypeMetadata;
  MEMORY[0x1E0C80A78](MetatypeMetadata);
  v11 = (char *)&v109 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PredicateExpressionCodingKeys>);
  v117 = &v109;
  v125 = v12;
  v116 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v129 = (char *)&v109 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = v2;
  if (v4 == 1)
  {
    TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable(0, *(_QWORD *)(*(_QWORD *)(v130 + 24) & 0xFFFFFFFFFFFFFELL), v14, v15);
  }
  else
  {
    MEMORY[0x1E0C80A78](v13);
    if (v4)
    {
      v21 = (uint64_t *)(*(_QWORD *)(v130 + 24) & 0xFFFFFFFFFFFFFFFELL);
      v22 = (uint64_t *)((char *)&v109 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
      v23 = v4;
      do
      {
        v24 = *v21++;
        *v22++ = type metadata accessor for PredicateExpressions.Variable(255, v24, v18, v19);
        --v23;
      }
      while (v23);
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  v126 = (_QWORD *)TupleTypeMetadata;
  v119 = *(_QWORD *)(TupleTypeMetadata - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata);
  v26 = (char *)&v109 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27);
  v29 = (char *)&v109 - v28;
  v113 = &v109;
  MEMORY[0x1E0C80A78](v30);
  v32 = (char *)&v109 - v31;
  if (one-time initialization token for predicateArchivingState != -1)
    swift_once();
  v33 = pthread_getspecific(static _ThreadLocal.Key<A>.predicateArchivingState);
  v115 = &v109;
  v114 = &v109;
  if (v33)
  {
    LODWORD(v120) = 0;
    v34 = (uint64_t *)(*v33 + 16);
    v35 = (uint64_t *)(*v33 + 24);
  }
  else
  {
    if (one-time initialization token for standardConfiguration != -1)
      swift_once();
    v34 = &static PredicateCodableConfiguration.standardConfiguration;
    v35 = &qword_1EDC3C640;
    LODWORD(v120) = byte_1EDC3C648;
  }
  v36 = *v35;
  v124 = *v34;
  swift_bridgeObjectRetain();
  v127 = v36;
  swift_bridgeObjectRetain();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  v37 = (uint64_t)v121;
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v121, (uint64_t)&v139);
  v110 = v141;
  v122 = v140;
  v123 = __swift_project_boxed_opaque_existential_1(&v139, v140);
  v112 = &v109;
  v38 = MEMORY[0x1E0C80A78](v123);
  v40 = (v39 + 15) & 0xFFFFFFFFFFFFFFF0;
  v41 = (_QWORD **)((char *)&v109 - v40);
  v42 = v37 + *(int *)(v130 + 44);
  v43 = v126;
  (*(void (**)(char *, uint64_t, _QWORD *, __n128))(v119 + 16))(v29, v42, v126, v38);
  if (v4)
  {
    v44 = (int *)(v43 + 4);
    v45 = (char **)((char *)&v109 - v40);
    v46 = v4;
    do
    {
      if (v4 == 1)
      {
        LODWORD(v47) = 0;
        v48 = v32;
      }
      else
      {
        v47 = *v44;
        v48 = &v32[v47];
      }
      *(_QWORD *)v48 = *(_QWORD *)&v29[(int)v47];
      *v45++ = v48;
      v44 += 4;
      --v46;
    }
    while (v46);
  }
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v142, v143);
  lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys();
  v49 = dispatch thunk of UnkeyedEncodingContainer.nestedContainer<A>(keyedBy:)();
  MEMORY[0x1E0C80A78](v49);
  v51 = (uint64_t **)((char *)&v109 - v40);
  v52 = v124;
  if (v4)
  {
    v53 = (int *)(v126 + 4);
    v54 = (uint64_t *)((char *)&v109 - v40);
    v55 = v4;
    do
    {
      if (v4 == 1)
        v56 = 0;
      else
        v56 = *v53;
      v57 = *v41++;
      *(_QWORD *)&v26[v56] = *v57;
      *v54++ = &v26[v56];
      v53 += 4;
      --v55;
    }
    while (v55);
  }
  v136 = v52;
  v137 = v127;
  v138 = v120;
  MEMORY[0x1E0C80A78](v50);
  v60 = (char *)&v109 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v4)
  {
    v61 = (uint64_t *)(*(_QWORD *)(v58 + 24) & 0xFFFFFFFFFFFFFFFELL);
    v62 = (int *)(v111 + 32);
    v63 = (uint64_t *)((char *)&v109 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0));
    v64 = v4;
    do
    {
      if (v4 == 1)
        v65 = 0;
      else
        v65 = *v62;
      v66 = *v61++;
      *(_QWORD *)&v11[v65] = v66;
      *v63++ = &v11[v65];
      v62 += 4;
      --v64;
    }
    while (v64);
  }
  v67 = *(_QWORD *)(v58 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v128 = v67;
  PredicateCodableConfiguration.allowInputs<each A>(_:)((uint64_t)v60, v4, v67);
  v68 = v122;
  v135 = v122;
  v69 = __swift_allocate_boxed_opaque_existential_1(&v132);
  (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v68 - 8) + 16))(v69, v123, v68);
  __swift_project_boxed_opaque_existential_1(&v132, v135);
  DynamicType = (uint64_t *)swift_getDynamicType();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v132);
  v71 = v136;
  v72 = v137;
  v132 = v136;
  v133 = v137;
  LODWORD(v130) = v138;
  v134 = v138;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v73 = PredicateCodableConfiguration._identifier(for:)(DynamicType);
  v126 = &v109;
  if (!v74)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v85 = _typeName(_:qualified:)();
    v87 = v86;
    v132 = 47;
    v133 = 0xE100000000000000;
    v144 = MEMORY[0x1E0DEE9D8];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], MEMORY[0x1E0DEAF20]);
    v88._countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
    String.append(_:)(v88);
    swift_bridgeObjectRelease();
    v89 = v132;
    v90 = v133;
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    swift_allocError();
    *(_QWORD *)v91 = v85;
    *(_QWORD *)(v91 + 8) = v87;
    *(_QWORD *)(v91 + 16) = v89;
    *(_QWORD *)(v91 + 24) = v90;
    *(_BYTE *)(v91 + 32) = 0;
    swift_willThrow();
    goto LABEL_43;
  }
  v76 = v74;
  v121 = v73;
  if ((v75 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v109 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v77 = Type.genericArguments2.getter();
    v79 = v78;
    v81 = v80;
    swift_bridgeObjectRetain();
    LOBYTE(v108) = 0;
    v82 = v77;
    v83 = v131;
    v84 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF18ReflectionInternal17GenericArguments2V_10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOsAE_pTg5016_s10Foundation19i12Structure33_klmnopqrs18LLV_4with4pathAD18d63Internal4TypeV_AA29PredicateCodableConfigurationVSaySSGtKcfcAD8t5OAG07F9U0OKXEfU_AI29PredicateCodableConfigurationVSaySSGSS10identifier_Sb10isConcretetTf1cn_nTf4nggg_n(v82, v79, v81, v71, v72, v130, MEMORY[0x1E0DEE9D8], (uint64_t)v121, v76);
    if (v83)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
LABEL_43:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v92 = v116;
      goto LABEL_54;
    }
    v109 = v84;
    v131 = 0;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v111 = v76;
  v119 = v72;
  v120 = v71;
  LOBYTE(v144) = 0;
  v93 = KeyedEncodingContainer.nestedUnkeyedContainer(forKey:)();
  if (v4)
  {
    v94 = (uint64_t *)(v128 & 0xFFFFFFFFFFFFFFFELL);
    v95 = v4;
    while (1)
    {
      v96 = *v94;
      v144 = **v51;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v132, v135);
      v99 = type metadata accessor for PredicateExpressions.Variable(0, v96, v97, v98);
      MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.Variable<A>, v99);
      v100 = v131;
      v93 = dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
      v131 = v100;
      if (v100)
        break;
      ++v51;
      ++v94;
      if (!--v95)
        goto LABEL_50;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v132);
  }
  else
  {
LABEL_50:
    MEMORY[0x1E0C80A78](v93);
    v101 = v122;
    *(&v109 - 10) = v4;
    *(&v109 - 9) = v101;
    *(&v109 - 8) = v128;
    v102 = v110;
    *(&v109 - 7) = *(_QWORD *)(v110 + 8);
    v103 = v129;
    *(&v109 - 6) = *(_QWORD *)(v102 + 24);
    *(&v109 - 5) = (uint64_t)v103;
    v104 = v111;
    *(&v109 - 4) = (uint64_t)v121;
    *(&v109 - 3) = v104;
    v107 = v109;
    v108 = v123;
    v105 = v131;
    specialized _withPredicateArchivingState<A>(_:_:)(v120, v119, v130, (void (*)(uint64_t))partial apply for closure #1 in KeyedEncodingContainer<>._encode<A, B>(_:variable:predicateConfiguration:));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v132);
    if (!v105)
    {
      (*(void (**)(char *, uint64_t))(v116 + 8))(v103, v125);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v139);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v142);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  v92 = v116;
LABEL_54:
  (*(void (**)(char *, uint64_t))(v92 + 8))(v129, v125);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v139);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v142);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t Expression.encode(to:configuration:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t MetatypeMetadata;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t TupleTypeMetadata;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  unint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t *, __n128);
  uint64_t *v41;
  int *v42;
  char **v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t **v48;
  uint64_t v49;
  int *v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  int *v59;
  uint64_t v60;
  int v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *DynamicType;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  Swift::String v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  char *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  unint64_t v124;
  unsigned __int8 v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unsigned __int8 v130;
  _QWORD v131[2];
  uint64_t v132;
  uint64_t v133;
  char v134[8];
  uint64_t v135;
  char v136;

  v6 = *(_QWORD *)(a3 + 16);
  v120 = (uint64_t *)(8 * v6);
  if (v6 == 1)
  {
    MetatypeMetadata = swift_getMetatypeMetadata();
  }
  else
  {
    MEMORY[0x1E0C80A78](a1);
    if (v6)
    {
      v9 = *(_QWORD *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL;
      v10 = (uint64_t *)((char *)&v101 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
      v11 = v6;
      do
      {
        v9 += 8;
        *v10++ = swift_getMetatypeMetadata();
        --v11;
      }
      while (v11);
    }
    MetatypeMetadata = swift_getTupleTypeMetadata();
  }
  v109 = &v101;
  v103 = MetatypeMetadata;
  MEMORY[0x1E0C80A78](MetatypeMetadata);
  v13 = (char *)&v101 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PredicateExpressionCodingKeys>);
  v108 = &v101;
  v118 = v14;
  v107 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v119 = (char *)&v101 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = a3;
  if (v6 == 1)
  {
    TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable(0, *(_QWORD *)(*(_QWORD *)(a3 + 24) & 0xFFFFFFFFFFFFFELL), v16, v17);
  }
  else
  {
    v122 = &v101;
    MEMORY[0x1E0C80A78](v15);
    if (v6)
    {
      v23 = (uint64_t *)(*(_QWORD *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL);
      v24 = (uint64_t *)((char *)&v101 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
      v25 = v6;
      do
      {
        v26 = *v23++;
        *v24++ = type metadata accessor for PredicateExpressions.Variable(255, v26, v20, v21);
        --v25;
      }
      while (v25);
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  v122 = (uint64_t *)TupleTypeMetadata;
  v106 = &v101;
  v27 = *(_QWORD *)(TupleTypeMetadata - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata);
  v29 = (char *)&v101 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = &v101;
  MEMORY[0x1E0C80A78](v30);
  v32 = (char *)&v101 - v31;
  v104 = &v101;
  MEMORY[0x1E0C80A78](v33);
  v35 = (char *)&v101 - v34;
  v112 = *(_QWORD *)a2;
  v113 = *(_QWORD *)(a2 + 8);
  LODWORD(v111) = *(unsigned __int8 *)(a2 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  v36 = v114;
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v114, (uint64_t)v131);
  v102 = v133;
  v116 = v132;
  v117 = __swift_project_boxed_opaque_existential_1(v131, v132);
  v110 = &v101;
  v37 = MEMORY[0x1E0C80A78](v117);
  v39 = (v38 + 15) & 0xFFFFFFFFFFFFFFF0;
  v40 = *(void (**)(char *, uint64_t, uint64_t *, __n128))(v27 + 16);
  v41 = v122;
  v40(v32, v36 + *(int *)(v121 + 44), v122, v37);
  if (v6)
  {
    v42 = (int *)(v41 + 4);
    v43 = (char **)((char *)&v101 - v39);
    v44 = v6;
    do
    {
      if (v6 == 1)
      {
        LODWORD(v45) = 0;
        v46 = v35;
      }
      else
      {
        v45 = *v42;
        v46 = &v35[v45];
      }
      *(_QWORD *)v46 = *(_QWORD *)&v32[(int)v45];
      *v43++ = v46;
      v42 += 4;
      --v44;
    }
    while (v44);
  }
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v134, v135);
  lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys();
  v47 = dispatch thunk of UnkeyedEncodingContainer.nestedContainer<A>(keyedBy:)();
  MEMORY[0x1E0C80A78](v47);
  v48 = (uint64_t **)((char *)&v101 - v39);
  if (v6)
  {
    v49 = 0;
    v50 = (int *)(v122 + 4);
    v51 = v113;
    v52 = v112;
    do
    {
      if (v6 == 1)
        v53 = 0;
      else
        v53 = *v50;
      *(_QWORD *)&v29[v53] = **(_QWORD **)((char *)&v101 + 8 * v49 - v39);
      v48[v49++] = (uint64_t *)&v29[v53];
      v50 += 4;
    }
    while (v6 != v49);
    v128 = v52;
    v129 = v51;
    v130 = v111;
    MEMORY[0x1E0C80A78](v52);
    v55 = (char *)&v101 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
    v56 = 0;
    v57 = *(_QWORD *)(v121 + 24) & 0xFFFFFFFFFFFFFFFELL;
    v59 = (int *)(v58 + 32);
    v60 = v115;
    do
    {
      if (v6 == 1)
        v61 = 0;
      else
        v61 = *v59;
      v62 = &v13[v61];
      *(_QWORD *)v62 = *(_QWORD *)(v57 + 8 * v56);
      *(_QWORD *)&v55[8 * v56++] = v62;
      v59 += 4;
    }
    while (v6 != v56);
  }
  else
  {
    v128 = v112;
    v129 = v113;
    v55 = &v136;
    v130 = v111;
    v60 = v115;
  }
  v63 = *(_QWORD *)(v121 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PredicateCodableConfiguration.allowInputs<each A>(_:)((uint64_t)v55, v6, v63);
  v64 = v116;
  v126 = v116;
  v65 = __swift_allocate_boxed_opaque_existential_1(&v123);
  (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v64 - 8) + 16))(v65, v117, v64);
  __swift_project_boxed_opaque_existential_1(&v123, v126);
  DynamicType = (uint64_t *)swift_getDynamicType();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v123);
  v67 = v128;
  v68 = v129;
  v123 = v128;
  v124 = v129;
  LODWORD(v122) = v130;
  v125 = v130;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v69 = PredicateCodableConfiguration._identifier(for:)(DynamicType);
  if (!v70)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v80 = _typeName(_:qualified:)();
    v82 = v81;
    v123 = 47;
    v124 = 0xE100000000000000;
    v127 = MEMORY[0x1E0DEE9D8];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], MEMORY[0x1E0DEAF20]);
    v79 = v119;
    v83._countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
    String.append(_:)(v83);
    swift_bridgeObjectRelease();
    v84 = v123;
    v85 = v124;
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    swift_allocError();
    *(_QWORD *)v86 = v80;
    *(_QWORD *)(v86 + 8) = v82;
    *(_QWORD *)(v86 + 16) = v84;
    *(_QWORD *)(v86 + 24) = v85;
    *(_BYTE *)(v86 + 32) = 0;
    swift_willThrow();
    goto LABEL_36;
  }
  v120 = &v101;
  v121 = (uint64_t)v69;
  if ((v71 & 1) != 0)
  {
    v113 = v70;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v112 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v72 = v70;
    v73 = Type.genericArguments2.getter();
    v75 = v74;
    v77 = v76;
    swift_bridgeObjectRetain();
    LOBYTE(v100) = 0;
    v78 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF18ReflectionInternal17GenericArguments2V_10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOsAE_pTg5016_s10Foundation19i12Structure33_klmnopqrs18LLV_4with4pathAD18d63Internal4TypeV_AA29PredicateCodableConfigurationVSaySSGtKcfcAD8t5OAG07F9U0OKXEfU_AI29PredicateCodableConfigurationVSaySSGSS10identifier_Sb10isConcretetTf1cn_nTf4nggg_n(v73, v75, v77, v67, v68, (char)v122, MEMORY[0x1E0DEE9D8], v121, v72);
    if (v60)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v79 = v119;
LABEL_36:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v87 = v107;
LABEL_46:
      (*(void (**)(char *, uint64_t))(v87 + 8))(v79, v118);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v131);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v134);
    }
    v112 = v78;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v113 = v72;
    swift_bridgeObjectRelease();
  }
  LOBYTE(v127) = 0;
  v88 = KeyedEncodingContainer.nestedUnkeyedContainer(forKey:)();
  v115 = v67;
  v111 = v63;
  v114 = v68;
  if (v6)
  {
    v89 = (uint64_t *)(v63 & 0xFFFFFFFFFFFFFFFELL);
    v90 = v6;
    while (1)
    {
      v91 = *v89;
      v127 = **v48;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v123, v126);
      v94 = type metadata accessor for PredicateExpressions.Variable(0, v91, v92, v93);
      MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.Variable<A>, v94);
      v88 = dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
      if (v60)
        break;
      ++v48;
      ++v89;
      if (!--v90)
        goto LABEL_43;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v123);
    v87 = v107;
    v79 = v119;
    goto LABEL_46;
  }
LABEL_43:
  MEMORY[0x1E0C80A78](v88);
  v95 = v116;
  *(&v101 - 10) = v6;
  *(&v101 - 9) = v95;
  *(&v101 - 8) = v111;
  v96 = v102;
  *(&v101 - 7) = *(_QWORD *)(v102 + 8);
  v79 = v119;
  *(&v101 - 6) = *(_QWORD *)(v96 + 24);
  *(&v101 - 5) = (uint64_t)v79;
  v97 = v113;
  *(&v101 - 4) = v121;
  *(&v101 - 3) = v97;
  v99 = v112;
  v100 = v117;
  specialized _withPredicateArchivingState<A>(_:_:)(v115, v114, (char)v122, (void (*)(uint64_t))partial apply for closure #1 in KeyedEncodingContainer<>._encode<A, B>(_:variable:predicateConfiguration:));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v123);
  if (v60)
  {
    v87 = v107;
    goto LABEL_46;
  }
  (*(void (**)(char *, uint64_t))(v107 + 8))(v79, v118);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v131);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v134);
}

uint64_t Expression.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t MetatypeMetadata;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t ExtendedExistentialTypeMetadata;
  uint64_t v24;
  uint64_t v25;
  uint64_t TupleTypeMetadata;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  int *v55;
  _QWORD *v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int *v65;
  _QWORD *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  Swift::String v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __int128 *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  _QWORD **v108;
  char *v109;
  int *v110;
  uint64_t v111;
  int v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void (*v118)(uint64_t, uint64_t, uint64_t);
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  char *v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __int128 *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  __int128 v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t TupleTypeMetadata2;
  char *v147;
  uint64_t *v148;
  uint64_t *v149;
  uint64_t *v150;
  uint64_t *v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  __int128 v161[2];
  __int128 v162[2];
  uint64_t v163[2];
  char v164;
  __int128 v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unsigned __int8 v169;
  _BYTE v170[24];
  uint64_t v171;
  _QWORD v172[8];

  v134 = a5;
  v157 = a3;
  v8 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressionCodingKeys>);
  v10 = *(_QWORD *)(v9 - 8);
  v142 = v9;
  v143 = v10;
  MEMORY[0x1E0C80A78](v9);
  v137 = (char *)&v125 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v156 = a4;
  v160 = a2;
  v158 = (uint64_t *)(8 * a2);
  v147 = (char *)&v125 - v14;
  if (a2 == 1)
  {
    MetatypeMetadata = swift_getMetatypeMetadata();
  }
  else
  {
    MEMORY[0x1E0C80A78](v13);
    if (a2)
    {
      v17 = v8;
      v18 = (uint64_t *)((char *)&v125 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
      v19 = v160;
      do
      {
        ++v17;
        *v18++ = swift_getMetatypeMetadata();
        --v19;
      }
      while (v19);
    }
    a2 = v160;
    MetatypeMetadata = swift_getTupleTypeMetadata();
    a4 = v156;
  }
  v140 = (uint64_t *)MetatypeMetadata;
  MEMORY[0x1E0C80A78](MetatypeMetadata);
  v21 = (char *)&v125 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = &v125;
  v172[0] = a4;
  ExtendedExistentialTypeMetadata = swift_getExtendedExistentialTypeMetadata();
  v154 = &v125;
  v155 = ExtendedExistentialTypeMetadata;
  if (a2 == 1)
  {
    type metadata accessor for PredicateExpressions.Variable(255, *v8, v24, v25);
    TupleTypeMetadata = swift_checkMetadataState();
  }
  else
  {
    v148 = &v125;
    v27 = a1;
    MEMORY[0x1E0C80A78](ExtendedExistentialTypeMetadata);
    if (a2)
    {
      v31 = v8;
      v32 = (uint64_t *)((char *)&v125 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
      v33 = v160;
      do
      {
        v34 = *v31++;
        *v32++ = type metadata accessor for PredicateExpressions.Variable(255, v34, v28, v29);
        --v33;
      }
      while (v33);
    }
    a2 = v160;
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    a1 = v27;
    v22 = v148;
    a4 = v156;
  }
  v144 = TupleTypeMetadata;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v133 = (uint64_t)&v125 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = &v125;
  MEMORY[0x1E0C80A78](v36);
  v135 = (uint64_t)&v125 - v37;
  MEMORY[0x1E0C80A78](v38);
  v136 = (__int128 *)((char *)&v125 - v39);
  MEMORY[0x1E0C80A78](v40);
  v145 = (uint64_t)&v125 - v41;
  v42 = type metadata accessor for Expression(0, a2, v157, a4);
  v131 = *(_QWORD *)(v42 - 8);
  v132 = v42;
  MEMORY[0x1E0C80A78](v42);
  v130 = (uint64_t)&v125 - v43;
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v172);
  if (one-time initialization token for predicateArchivingState != -1)
    swift_once();
  v44 = pthread_getspecific(static _ThreadLocal.Key<A>.predicateArchivingState);
  v151 = &v125;
  v152 = &v125;
  v150 = &v125;
  v153 = a1;
  if (v44)
  {
    LODWORD(v141) = 0;
    v45 = (uint64_t *)(*v44 + 16);
    v46 = (uint64_t *)(*v44 + 24);
  }
  else
  {
    if (one-time initialization token for standardConfiguration != -1)
      swift_once();
    v45 = &static PredicateCodableConfiguration.standardConfiguration;
    v46 = &qword_1EDC3C640;
    LODWORD(v141) = byte_1EDC3C648;
  }
  v47 = *v46;
  v48 = *v45;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __swift_project_boxed_opaque_existential_1(v172, v172[3]);
  v49 = v159;
  v50 = dispatch thunk of Decoder.unkeyedContainer()();
  v159 = v49;
  if (v49)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_49:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v172);
    return __swift_destroy_boxed_opaque_existential_1(v153);
  }
  v138 = v47;
  v139 = v48;
  v129 = &v125;
  v51 = v145 + *(int *)(TupleTypeMetadata2 + 48);
  MEMORY[0x1E0C80A78](v50);
  v53 = (char *)&v125 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = v160;
  if (v160)
  {
    v55 = (int *)(v144 + 32);
    v56 = v53;
    v57 = v160;
    do
    {
      if (v54 == 1)
        v58 = 0;
      else
        v58 = *v55;
      *v56++ = v51 + v58;
      v55 += 4;
      --v57;
    }
    while (v57);
  }
  v148 = v22;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v170, v171);
  lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys();
  v59 = v159;
  v60 = dispatch thunk of UnkeyedDecodingContainer.nestedContainer<A>(keyedBy:)();
  v159 = v59;
  if (v59)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_48:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v170);
    goto LABEL_49;
  }
  MEMORY[0x1E0C80A78](v60);
  v63 = (v62 + 15) & 0xFFFFFFFFFFFFFFF0;
  if (v160)
    v61 = memcpy((char *)&v125 - v63, v53, (size_t)v158);
  v128 = (char *)&v125 - v63;
  v167 = v139;
  v168 = v138;
  v169 = v141;
  MEMORY[0x1E0C80A78](v61);
  if (v64)
  {
    v65 = (int *)(v140 + 4);
    v66 = (uint64_t *)((char *)&v125 - v63);
    v67 = v64;
    do
    {
      if (v64 == 1)
        v68 = 0;
      else
        v68 = *v65;
      v69 = *v8++;
      *(_QWORD *)&v21[v68] = v69;
      *v66++ = &v21[v68];
      v65 += 4;
      --v67;
    }
    while (v67);
  }
  v158 = &v125;
  v70 = v64;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PredicateCodableConfiguration.allowInputs<each A>(_:)((uint64_t)&v125 - v63, v70, v157);
  LOBYTE(v162[0]) = 2;
  lazy protocol witness table accessor for type ExpressionStructure and conformance ExpressionStructure();
  v71 = v142;
  v72 = v159;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  if (v72)
  {
    v159 = v72;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_47:
    (*(void (**)(char *, uint64_t))(v143 + 8))(v147, v71);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_48;
  }
  v140 = &v125;
  v74 = *((_QWORD *)&v165 + 1);
  v73 = v165;
  *(_QWORD *)&v141 = v166;
  v75 = v167;
  v76 = v168;
  v77 = v169;
  v78 = *(_QWORD *)(v168 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!v78)
    goto LABEL_45;
  swift_bridgeObjectRetain();
  v159 = v73;
  v79 = specialized __RawDictionaryStorage.find<A>(_:)(v73, v74);
  if ((v80 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    v73 = v159;
LABEL_45:
    *(_QWORD *)&v165 = 47;
    *((_QWORD *)&v165 + 1) = 0xE100000000000000;
    *(_QWORD *)&v162[0] = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], MEMORY[0x1E0DEAF20]);
    v87._countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
    String.append(_:)(v87);
    swift_bridgeObjectRelease();
    v88 = v165;
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    v89 = swift_allocError();
    *(_QWORD *)v90 = v73;
    *(_QWORD *)(v90 + 8) = v74;
    *(_OWORD *)(v90 + 16) = v88;
    *(_BYTE *)(v90 + 32) = 1;
    v159 = v89;
    swift_willThrow();
LABEL_46:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_47;
  }
  v127 = v77;
  v81 = *(_QWORD *)(v76 + 56) + 16 * v79;
  v82 = *(_QWORD *)v81;
  v83 = *(_BYTE *)(v81 + 8);
  swift_bridgeObjectRelease();
  if ((v83 & 1) == 0)
  {
    v159 = 0;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v126 = v75;
    goto LABEL_51;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v84 = swift_bridgeObjectRetain();
  v85 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOG_18ReflectionInternal07GenericP0OsAE_pTg5016_s10Foundation19e12Structure33_ghijklmno28LLV11reconstruct4with4path18q62Internal4TypeVAA29PredicateCodableConfigurationV_SaySSGtKFAH15sP13OAD0W0OKXEfU_AF29PredicateCodableConfigurationVSaySSGAITf1cn_nTf4nggg_n(v84, v75, v76, v127, MEMORY[0x1E0DEE9D8], v159, v74);
  v86 = v75;
  v159 = 0;
  v99 = v85;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v100 = PartialType.create2(with:)();
  if (!v100)
  {
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    v104 = swift_allocError();
    *(_QWORD *)v105 = v82;
    *(_QWORD *)(v105 + 8) = v99;
    *(_QWORD *)(v105 + 16) = 0;
    *(_QWORD *)(v105 + 24) = 0;
    *(_BYTE *)(v105 + 32) = 2;
    v159 = v104;
    swift_willThrow();
    goto LABEL_46;
  }
  v82 = v100;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v126 = v86;
  swift_bridgeObjectRelease();
LABEL_51:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v162[0] = v82;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any.Type);
  *(_QWORD *)&v161[0] = v156;
  swift_getExtendedExistentialTypeMetadata();
  if (!swift_dynamicCast())
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    LOBYTE(v165) = 2;
    v96 = v143;
    v97 = v137;
    (*(void (**)(char *, char *, uint64_t))(v143 + 16))(v137, v147, v71);
    type metadata accessor for DecodingError();
    v98 = swift_allocError();
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type KeyedDecodingContainer<PredicateExpressionCodingKeys> and conformance KeyedDecodingContainer<A>, &demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressionCodingKeys>, MEMORY[0x1E0DED060]);
    static DecodingError.dataCorruptedError<A>(forKey:in:debugDescription:)();
    (*(void (**)(char *, uint64_t))(v96 + 8))(v97, v71);
    v159 = v98;
    swift_willThrow();
    goto LABEL_47;
  }
  v141 = v165;
  v92 = v166;
  LOBYTE(v162[0]) = 0;
  v93 = v147;
  v94 = v159;
  v95 = KeyedDecodingContainer.nestedUnkeyedContainer(forKey:)();
  if (v94)
  {
    v159 = v94;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v71 = v142;
    goto LABEL_47;
  }
  v163[0] = v126;
  v163[1] = v76;
  v164 = v127;
  MEMORY[0x1E0C80A78](v95);
  v101 = v160;
  v102 = v157;
  *(&v125 - 8) = v160;
  *(&v125 - 7) = v102;
  *(&v125 - 6) = v156;
  *(&v125 - 5) = (uint64_t)&v165;
  *((_OWORD *)&v125 - 2) = v141;
  *(&v125 - 2) = v92;
  *(&v125 - 1) = (uint64_t)v93;
  v103 = v136;
  _withPredicateArchivingState<A>(_:_:)(v163, (void (*)(uint64_t))_ss22KeyedDecodingContainerV10FoundationAC29PredicateExpressionCodingKeysORszrlE7_decode5input6output22predicateConfigurationAC0eF0_pqd_0_6OutputRts_XP10expression_AC0E11ExpressionsO8VariableVy_qd__Gqd__Qp_t8variabletqd__mqd__Qp_qd_0_mAC0e7CodableM0VtKRvd__r0_lFAcJ_pqd_0_ALRS_XPAM_ARqd__Qp_tAStyKXEfU_TA_0);
  v159 = 0;
  v106 = v93;
  v158 = &v125;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with take of any PredicateExpression<Self.Output == B1>(v103, v145);
  v107 = v142;
  v108 = (_QWORD **)v128;
  if (v101)
  {
    v109 = (char *)v103 + *(int *)(TupleTypeMetadata2 + 48);
    v110 = (int *)(v144 + 32);
    v111 = v101;
    do
    {
      if (v101 == 1)
        v112 = 0;
      else
        v112 = *v110;
      v113 = *v108++;
      *v113 = *(_QWORD *)&v109[v112];
      v110 += 4;
      --v111;
    }
    while (v111);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v165);
  (*(void (**)(char *, uint64_t))(v143 + 8))(v106, v107);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v115 = v145;
  v114 = TupleTypeMetadata2;
  v116 = v135 + *(int *)(TupleTypeMetadata2 + 48);
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v145, v135);
  v117 = v144;
  v160 = *(_QWORD *)(v144 - 8);
  v118 = *(void (**)(uint64_t, uint64_t, uint64_t))(v160 + 16);
  v118(v116, v51, v144);
  v172[7] = v156;
  swift_getExtendedExistentialTypeMetadata();
  if (!swift_dynamicCast())
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v170, (uint64_t)v161);
    type metadata accessor for DecodingError();
    v124 = swift_allocError();
    static DecodingError.dataCorruptedError(in:debugDescription:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v161);
    v159 = v124;
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1(v115);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v170);
    goto LABEL_49;
  }
  outlined init with take of any PredicateExpression<Self.Output == B1>(v161, (uint64_t)v162);
  v119 = v130;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v162, v130);
  v120 = *(int *)(v114 + 48);
  v121 = v133;
  v122 = v133 + v120;
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v115, v133);
  v118(v122, v51, v117);
  v123 = v132;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v160 + 32))(v119 + *(int *)(v132 + 44), v122, v117);
  __swift_destroy_boxed_opaque_existential_1(v121);
  __swift_destroy_boxed_opaque_existential_1(v115);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v170);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v131 + 32))(v134, v119, v123);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v172);
  return __swift_destroy_boxed_opaque_existential_1(v153);
}

uint64_t Expression.init(from:configuration:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t MetatypeMetadata;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t ExtendedExistentialTypeMetadata;
  uint64_t v26;
  uint64_t v27;
  uint64_t TupleTypeMetadata;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int *v57;
  _QWORD *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  int *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  char *v70;
  int v71;
  char *v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  Swift::String v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  __int128 *v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD **v112;
  char *v113;
  int *v114;
  uint64_t v115;
  int v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void (*v123)(uint64_t, uint64_t, uint64_t);
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char **v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  __int128 *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  __int128 v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t TupleTypeMetadata2;
  uint64_t v150;
  char *v151;
  char *v152;
  char **v153;
  char **v154;
  char **v155;
  char **v156;
  char **v157;
  char **v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t *v163;
  char *v164;
  __int128 v165;
  __int128 v166;
  uint64_t v167[2];
  char v168;
  __int128 v169;
  char *v170;
  uint64_t *v171;
  uint64_t v172;
  unsigned __int8 v173;
  _QWORD v174[4];
  char v175;

  v160 = a2;
  v162 = a4;
  v11 = a4 & 0xFFFFFFFFFFFFFFFELL;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressionCodingKeys>);
  v144 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  MEMORY[0x1E0C80A78](v13);
  v152 = (char *)&v129 - v15;
  v138 = a6;
  v151 = (char *)a5;
  v141 = v16;
  v163 = (uint64_t *)v11;
  v159 = v6;
  if (a3 == 1)
  {
    MetatypeMetadata = swift_getMetatypeMetadata();
    v18 = MetatypeMetadata;
  }
  else
  {
    v19 = a1;
    MEMORY[0x1E0C80A78](v14);
    if (a3)
    {
      v21 = v163;
      v22 = (uint64_t *)((char *)&v129 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
      v23 = a3;
      do
      {
        ++v21;
        *v22++ = swift_getMetatypeMetadata();
        --v23;
      }
      while (v23);
    }
    MetatypeMetadata = swift_getTupleTypeMetadata();
    v18 = MetatypeMetadata;
    a1 = v19;
    a5 = (uint64_t)v151;
  }
  v146 = v12;
  MEMORY[0x1E0C80A78](MetatypeMetadata);
  v143 = (char *)&v129 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v174[0] = a5;
  ExtendedExistentialTypeMetadata = swift_getExtendedExistentialTypeMetadata();
  v156 = &v129;
  v155 = &v129;
  v150 = ExtendedExistentialTypeMetadata;
  v142 = v18;
  if (a3 == 1)
  {
    type metadata accessor for PredicateExpressions.Variable(255, *v163, v26, v27);
    TupleTypeMetadata = swift_checkMetadataState();
  }
  else
  {
    v29 = a1;
    MEMORY[0x1E0C80A78](ExtendedExistentialTypeMetadata);
    if (a3)
    {
      v33 = v163;
      v34 = (uint64_t *)((char *)&v129 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
      v35 = a3;
      do
      {
        v36 = *v33++;
        *v34++ = type metadata accessor for PredicateExpressions.Variable(255, v36, v30, v31);
        --v35;
      }
      while (v35);
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    a1 = v29;
  }
  v147 = TupleTypeMetadata;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v137 = (uint64_t)&v129 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v158 = &v129;
  MEMORY[0x1E0C80A78](v38);
  v139 = (char *)&v129 - v39;
  v154 = &v129;
  MEMORY[0x1E0C80A78](v40);
  v140 = (__int128 *)((char *)&v129 - v41);
  v153 = &v129;
  MEMORY[0x1E0C80A78](v42);
  v148 = (uint64_t)&v129 - v43;
  v44 = type metadata accessor for Expression(0, a3, v162, a5);
  v157 = &v129;
  v45 = *(_QWORD *)(v44 - 8);
  MEMORY[0x1E0C80A78](v44);
  v47 = (char *)&v129 - v46;
  v49 = *(uint64_t **)v160;
  v48 = *(_QWORD *)(v160 + 8);
  LODWORD(v145) = *(unsigned __int8 *)(v160 + 16);
  v50 = a1[3];
  v160 = a3;
  v161 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v50);
  v51 = v159;
  v52 = dispatch thunk of Decoder.unkeyedContainer()();
  if (v51)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v161);
  }
  v131 = v47;
  v132 = v45;
  v133 = v44;
  v136 = v48;
  v135 = v49;
  v53 = v148 + *(int *)(TupleTypeMetadata2 + 48);
  v54 = v160;
  v55 = 8 * v160;
  MEMORY[0x1E0C80A78](v52);
  if (v54)
  {
    v57 = (int *)(v147 + 32);
    v58 = (char **)((char *)&v129 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0));
    v59 = v54;
    do
    {
      if (v54 == 1)
        v60 = 0;
      else
        v60 = *v57;
      *v58++ = v53 + v60;
      v57 += 4;
      --v59;
    }
    while (v59);
  }
  v134 = v56;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v174, v174[3]);
  lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys();
  v61 = dispatch thunk of UnkeyedDecodingContainer.nestedContainer<A>(keyedBy:)();
  v159 = 0;
  MEMORY[0x1E0C80A78](v61);
  v62 = (v55 + 15) & 0xFFFFFFFFFFFFFFF0;
  v63 = v136;
  v129 = (char *)&v129 - v62;
  if (v54)
  {
    memcpy((char *)&v129 - v62, (char *)&v129 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0), 8 * v54);
    v130 = &v129;
    v171 = v135;
    v172 = v63;
    v173 = v145;
    MEMORY[0x1E0C80A78](v135);
    v64 = (char *)&v129 - v62;
    v65 = 0;
    v66 = (int *)(v142 + 32);
    v67 = v146;
    v68 = v162;
    v69 = v163;
    v70 = v143;
    do
    {
      if (v54 == 1)
        v71 = 0;
      else
        v71 = *v66;
      v72 = &v70[v71];
      *(_QWORD *)v72 = v69[v65];
      *(_QWORD *)&v64[8 * v65++] = v72;
      v66 += 4;
    }
    while (v54 != v65);
  }
  else
  {
    v130 = &v129;
    v171 = v135;
    v172 = v136;
    v64 = &v175;
    v173 = v145;
    v67 = v146;
    v68 = v162;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PredicateCodableConfiguration.allowInputs<each A>(_:)((uint64_t)v64, v54, v68);
  LOBYTE(v166) = 2;
  lazy protocol witness table accessor for type ExpressionStructure and conformance ExpressionStructure();
  v73 = v159;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v159 = v73;
  if (v73)
    goto LABEL_37;
  v74 = v169;
  *(_QWORD *)&v145 = v170;
  v75 = v172;
  v163 = v171;
  v76 = v173;
  v77 = *(_QWORD *)(v172 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!v77)
    goto LABEL_35;
  swift_bridgeObjectRetain();
  v78 = specialized __RawDictionaryStorage.find<A>(_:)(v74, *((uint64_t *)&v74 + 1));
  if ((v79 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_35:
    *(_QWORD *)&v169 = 47;
    *((_QWORD *)&v169 + 1) = 0xE100000000000000;
    *(_QWORD *)&v166 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], MEMORY[0x1E0DEAF20]);
    v87._countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
    String.append(_:)(v87);
    swift_bridgeObjectRelease();
    v88 = v169;
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    v89 = swift_allocError();
    *(_OWORD *)v90 = v74;
    *(_OWORD *)(v90 + 16) = v88;
    *(_BYTE *)(v90 + 32) = 1;
    v159 = v89;
    swift_willThrow();
    goto LABEL_36;
  }
  LODWORD(v143) = v76;
  v80 = *(_QWORD *)(v75 + 56) + 16 * v78;
  v81 = *(_QWORD *)v80;
  v82 = *(_BYTE *)(v80 + 8);
  swift_bridgeObjectRelease();
  if ((v82 & 1) != 0)
  {
    v142 = v74;
    v83 = (uint64_t)v163;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v84 = swift_bridgeObjectRetain();
    v85 = v159;
    v86 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOG_18ReflectionInternal07GenericP0OsAE_pTg5016_s10Foundation19e12Structure33_ghijklmno28LLV11reconstruct4with4path18q62Internal4TypeVAA29PredicateCodableConfigurationV_SaySSGtKFAH15sP13OAD0W0OKXEfU_AF29PredicateCodableConfigurationVSaySSGAITf1cn_nTf4nggg_n(v84, v83, v75, (char)v143, MEMORY[0x1E0DEE9D8], v74, *((uint64_t *)&v74 + 1));
    v159 = v85;
    if (v85)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v67 = v146;
LABEL_36:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_37:
      swift_bridgeObjectRelease();
LABEL_38:
      swift_bridgeObjectRelease();
      v91 = v144;
LABEL_39:
      (*(void (**)(char *, uint64_t))(v91 + 8))(v152, v67);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v174);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v161);
    }
    v100 = v86;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v101 = v142;
    v102 = PartialType.create2(with:)();
    if (!v102)
    {
      lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
      v106 = swift_allocError();
      *(_QWORD *)v107 = v101;
      *(_QWORD *)(v107 + 8) = v100;
      *(_QWORD *)(v107 + 16) = 0;
      *(_QWORD *)(v107 + 24) = 0;
      *(_BYTE *)(v107 + 32) = 2;
      v159 = v106;
      swift_willThrow();
      v67 = v146;
      goto LABEL_36;
    }
    v103 = v102;
    swift_bridgeObjectRelease();
    v93 = v75;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v81 = v103;
  }
  else
  {
    swift_bridgeObjectRelease();
    v93 = v75;
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v166 = v81;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any.Type);
  *(_QWORD *)&v165 = v151;
  swift_getExtendedExistentialTypeMetadata();
  if (!swift_dynamicCast())
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    LOBYTE(v169) = 2;
    v91 = v144;
    v98 = v141;
    v67 = v146;
    (*(void (**)(uint64_t, char *, uint64_t))(v144 + 16))(v141, v152, v146);
    type metadata accessor for DecodingError();
    v99 = swift_allocError();
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type KeyedDecodingContainer<PredicateExpressionCodingKeys> and conformance KeyedDecodingContainer<A>, &demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressionCodingKeys>, MEMORY[0x1E0DED060]);
    static DecodingError.dataCorruptedError<A>(forKey:in:debugDescription:)();
    (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v98, v67);
    v159 = v99;
    swift_willThrow();
    goto LABEL_39;
  }
  v145 = v169;
  v94 = v170;
  LOBYTE(v166) = 0;
  v67 = v146;
  v95 = v152;
  v96 = v159;
  v97 = KeyedDecodingContainer.nestedUnkeyedContainer(forKey:)();
  if (v96)
  {
    v159 = v96;
    swift_bridgeObjectRelease();
    goto LABEL_38;
  }
  v167[0] = (uint64_t)v163;
  v167[1] = v93;
  v168 = (char)v143;
  MEMORY[0x1E0C80A78](v97);
  v104 = v162;
  *(&v129 - 8) = (char *)v54;
  *(&v129 - 7) = (char *)v104;
  *(&v129 - 6) = v151;
  *(&v129 - 5) = (char *)&v169;
  *((_OWORD *)&v129 - 2) = v145;
  *(&v129 - 2) = v94;
  *(&v129 - 1) = v95;
  v105 = v140;
  _withPredicateArchivingState<A>(_:_:)(v167, (void (*)(uint64_t))_ss22KeyedDecodingContainerV10FoundationAC29PredicateExpressionCodingKeysORszrlE7_decode5input6output22predicateConfigurationAC0eF0_pqd_0_6OutputRts_XP10expression_AC0E11ExpressionsO8VariableVy_qd__Gqd__Qp_t8variabletqd__mqd__Qp_qd_0_mAC0e7CodableM0VtKRvd__r0_lFAcJ_pqd_0_ALRS_XPAM_ARqd__Qp_tAStyKXEfU_TA_0);
  v159 = 0;
  v108 = v95;
  v109 = v105;
  swift_bridgeObjectRelease();
  v110 = TupleTypeMetadata2;
  swift_bridgeObjectRelease();
  outlined init with take of any PredicateExpression<Self.Output == B1>(v109, v148);
  v111 = (uint64_t)v139;
  v112 = (_QWORD **)v129;
  if (v54)
  {
    v113 = (char *)v109 + *(int *)(v110 + 48);
    v114 = (int *)(v147 + 32);
    v115 = v54;
    do
    {
      if (v54 == 1)
        v116 = 0;
      else
        v116 = *v114;
      v117 = *v112++;
      *v117 = *(_QWORD *)&v113[v116];
      v114 += 4;
      --v115;
    }
    while (v115);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v169);
  (*(void (**)(char *, uint64_t))(v144 + 8))(v108, v67);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v118 = v110;
  v119 = v111 + *(int *)(v110 + 48);
  v120 = v148;
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v148, v111);
  v121 = v147;
  v122 = *(_QWORD *)(v147 - 8);
  v123 = *(void (**)(uint64_t, uint64_t, uint64_t))(v122 + 16);
  v123(v119, v53, v147);
  v164 = v151;
  swift_getExtendedExistentialTypeMetadata();
  if ((swift_dynamicCast() & 1) == 0)
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v174, (uint64_t)&v165);
    type metadata accessor for DecodingError();
    swift_allocError();
    static DecodingError.dataCorruptedError(in:debugDescription:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v165);
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1(v120);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v174);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v161);
  }
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v165, (uint64_t)&v166);
  v124 = (uint64_t)v131;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v166, (uint64_t)v131);
  v125 = *(int *)(v118 + 48);
  v126 = v137;
  v127 = v137 + v125;
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v120, v137);
  v123(v127, v53, v121);
  v128 = v133;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v122 + 32))(v124 + *(int *)(v133 + 44), v127, v121);
  __swift_destroy_boxed_opaque_existential_1(v126);
  __swift_destroy_boxed_opaque_existential_1(v120);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v174);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v132 + 32))(v138, v124, v128);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v161);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Expression<Pack{repeat A}, B>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return Expression.init(from:)(a1, a2[2], a2[3], a2[4], a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Expression<Pack{repeat A}, B>(_QWORD *a1, uint64_t a2)
{
  return Expression.encode(to:)(a1, a2);
}

uint64_t protocol witness for EncodableWithConfiguration.encode(to:configuration:) in conformance Predicate<Pack{repeat A}>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return Predicate.encode(to:configuration:)(a1, a2, a3);
}

uint64_t protocol witness for DecodableWithConfiguration.init(from:configuration:) in conformance Predicate<Pack{repeat A}>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Predicate.init(from:configuration:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
}

uint64_t protocol witness for EncodableWithConfiguration.encode(to:configuration:) in conformance Expression<Pack{repeat A}, B>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return Expression.encode(to:configuration:)(a1, a2, a3);
}

uint64_t protocol witness for DecodableWithConfiguration.init(from:configuration:) in conformance Expression<Pack{repeat A}, B>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  return Expression.init(from:configuration:)(a1, a2, a3[2], a3[3], a3[4], a4);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOG_18ReflectionInternal07GenericP0OsAE_pTg5016_s10Foundation19e12Structure33_ghijklmno28LLV11reconstruct4with4path18q62Internal4TypeVAA29PredicateCodableConfigurationV_SaySSGtKFAH15sP13OAD0W0OKXEfU_AF29PredicateCodableConfigurationVSaySSGAITf1cn_nTf4nggg_n(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  int64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  Swift::String v55;
  uint64_t v56;
  char v57;
  Swift::String v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char v73;
  char v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v8 = v7;
  v9 = *(_QWORD *)(a1 + 16);
  v10 = MEMORY[0x1E0DEE9D8];
  if (!v9)
    return v10;
  v87 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
  v13 = 0;
  v10 = v87;
  v69 = a1 + 32;
  v14 = a3;
  v75 = a6;
  v68 = v9;
  while (1)
  {
    v15 = v69 + 32 * v13;
    v17 = *(_QWORD *)v15;
    v16 = *(_QWORD *)(v15 + 8);
    v18 = *(_QWORD *)(v15 + 16);
    v19 = *(_BYTE *)(v15 + 24);
    if ((v19 & 1) != 0)
      break;
    v73 = *(_BYTE *)(v15 + 24);
    v71 = v13;
    swift_bridgeObjectRetain_n();
    v78 = v17;
    outlined copy of ExpressionStructure.Argument(v17, v16, v18, 0);
    v39 = a5;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a5[2] + 1, 1, a5);
    v41 = v39[2];
    v40 = v39[3];
    if (v41 >= v40 >> 1)
      v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v40 > 1), v41 + 1, 1, v39);
    v39[2] = v41 + 1;
    v42 = &v39[2 * v41];
    v42[4] = a6;
    v42[5] = a7;
    swift_bridgeObjectRelease();
    v14 = a3;
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_48;
    swift_bridgeObjectRetain();
    v43 = specialized __RawDictionaryStorage.find<A>(_:)(v78, v16);
    if ((v44 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_48:
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], MEMORY[0x1E0DEAF20]);
      v59._countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
      String.append(_:)(v59);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
      swift_allocError();
      *(_QWORD *)v60 = v78;
      *(_QWORD *)(v60 + 8) = v16;
      *(_QWORD *)(v60 + 16) = 47;
      *(_QWORD *)(v60 + 24) = 0xE100000000000000;
      *(_BYTE *)(v60 + 32) = 1;
      swift_willThrow();
      swift_bridgeObjectRelease();
      v61 = v78;
      v62 = v16;
LABEL_49:
      v63 = v18;
LABEL_50:
      outlined consume of ExpressionStructure.Argument(v61, v62, v63, 0);
      goto LABEL_43;
    }
    v45 = *(_QWORD *)(a3 + 56) + 16 * v43;
    v21 = *(_QWORD *)v45;
    v46 = *(_BYTE *)(v45 + 8);
    swift_bridgeObjectRelease();
    if ((v46 & 1) != 0)
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v47 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOG_18ReflectionInternal07GenericP0OsAE_pTg5016_s10Foundation19e12Structure33_ghijklmno28LLV11reconstruct4with4path18q62Internal4TypeVAA29PredicateCodableConfigurationV_SaySSGtKFAH15sP13OAD0W0OKXEfU_AF29PredicateCodableConfigurationVSaySSGAITf1cn_nTf4nggg_n(v18, a2, a3, a4 & 1, v39, v78, v16, v18);
      if (v8)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        v61 = v78;
        v62 = v16;
        goto LABEL_49;
      }
      v48 = v47;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      v49 = PartialType.create2(with:)();
      if (!v49)
      {
        lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
        swift_allocError();
        *(_QWORD *)v64 = v21;
        *(_QWORD *)(v64 + 8) = v48;
        *(_QWORD *)(v64 + 16) = 0;
        *(_QWORD *)(v64 + 24) = 0;
        *(_BYTE *)(v64 + 32) = 2;
        swift_willThrow();
        swift_bridgeObjectRelease();
        v61 = v78;
        v62 = v16;
        v63 = v18;
        goto LABEL_50;
      }
      v21 = v49;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of ExpressionStructure.Argument(v78, v16, v18, 0);
      v14 = a3;
      a6 = v75;
    }
    else
    {
      swift_bridgeObjectRelease();
      outlined consume of ExpressionStructure.Argument(v78, v16, v18, 0);
    }
    v50 = v68;
    v13 = v71;
    v19 = v73;
LABEL_35:
    v88 = v10;
    v52 = *(_QWORD *)(v10 + 16);
    v51 = *(_QWORD *)(v10 + 24);
    if (v52 >= v51 >> 1)
    {
      v54 = v13;
      v74 = v19;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v51 > 1, v52 + 1, 1);
      v19 = v74;
      v13 = v54;
      v10 = v88;
    }
    ++v13;
    *(_QWORD *)(v10 + 16) = v52 + 1;
    v53 = v10 + 16 * v52;
    *(_QWORD *)(v53 + 32) = v21;
    *(_BYTE *)(v53 + 40) = v19;
    if (v13 == v50)
      return v10;
  }
  v81 = v8;
  v20 = *(_QWORD *)(v17 + 16);
  if (!v20)
  {
    v21 = MEMORY[0x1E0DEE9D8];
LABEL_34:
    v8 = v81;
    v50 = v68;
    goto LABEL_35;
  }
  v72 = *(_BYTE *)(v15 + 24);
  v70 = v13;
  v66 = *(_QWORD *)(v15 + 16);
  v67 = v10;
  v65 = *(_QWORD *)(v15 + 8);
  outlined copy of ExpressionStructure.Argument(v17, v16, v18, 1);
  v86 = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20, 0);
  v21 = v86;
  v77 = v17;
  v22 = (uint64_t *)(v17 + 48);
  while (1)
  {
    v23 = *(v22 - 1);
    v83 = v21;
    v84 = *(v22 - 2);
    v10 = *v22;
    swift_bridgeObjectRetain_n();
    v24 = a5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a5[2] + 1, 1, a5);
    v26 = v24[2];
    v25 = v24[3];
    if (v26 >= v25 >> 1)
      v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v25 > 1), v26 + 1, 1, v24);
    v24[2] = v26 + 1;
    v27 = &v24[2 * v26];
    v27[4] = a6;
    v27[5] = a7;
    swift_bridgeObjectRelease();
    if (!*(_QWORD *)(v14 + 16))
      goto LABEL_40;
    swift_bridgeObjectRetain();
    v28 = specialized __RawDictionaryStorage.find<A>(_:)(v84, v23);
    if ((v29 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_40:
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], MEMORY[0x1E0DEAF20]);
      v55._countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
      String.append(_:)(v55);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
      swift_allocError();
      *(_QWORD *)v56 = v84;
      *(_QWORD *)(v56 + 8) = v23;
      *(_QWORD *)(v56 + 16) = 47;
      *(_QWORD *)(v56 + 24) = 0xE100000000000000;
      v57 = 1;
LABEL_41:
      *(_BYTE *)(v56 + 32) = v57;
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_42;
    }
    v30 = *(_QWORD *)(v14 + 56) + 16 * v28;
    v31 = *(_QWORD *)v30;
    v32 = *(_BYTE *)(v30 + 8);
    swift_bridgeObjectRelease();
    if ((v32 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v33 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOG_18ReflectionInternal07GenericP0OsAE_pTg5016_s10Foundation19e12Structure33_ghijklmno28LLV11reconstruct4with4path18q62Internal4TypeVAA29PredicateCodableConfigurationV_SaySSGtKFAH15sP13OAD0W0OKXEfU_AF29PredicateCodableConfigurationVSaySSGAITf1cn_nTf4nggg_n(v10, a2, v14, a4 & 1, v24, v84, v23, v10);
    if (v81)
      break;
    v34 = v33;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    v35 = PartialType.create2(with:)();
    if (!v35)
    {
      lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
      swift_allocError();
      *(_QWORD *)v56 = v31;
      *(_QWORD *)(v56 + 8) = v34;
      *(_QWORD *)(v56 + 16) = 0;
      *(_QWORD *)(v56 + 24) = 0;
      v57 = 2;
      goto LABEL_41;
    }
    v36 = v35;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v31 = v36;
    v14 = a3;
    a6 = v75;
LABEL_17:
    swift_bridgeObjectRelease();
    v21 = v83;
    v38 = *(_QWORD *)(v83 + 16);
    v37 = *(_QWORD *)(v83 + 24);
    if (v38 >= v37 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 1, 1);
      v21 = v83;
    }
    *(_QWORD *)(v21 + 16) = v38 + 1;
    *(_QWORD *)(v21 + 8 * v38 + 32) = v31;
    v22 += 3;
    if (!--v20)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of ExpressionStructure.Argument(v77, v65, v66, 1);
      v10 = v67;
      v13 = v70;
      v19 = v72;
      goto LABEL_34;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
LABEL_42:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of ExpressionStructure.Argument(v77, v65, v66, 1);
LABEL_43:
  swift_release();
  return v10;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF18ReflectionInternal17GenericArguments2V_10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOsAE_pTg5016_s10Foundation19i12Structure33_klmnopqrs18LLV_4with4pathAD18d63Internal4TypeV_AA29PredicateCodableConfigurationVSaySSGtKcfcAD8t5OAG07F9U0OKXEfU_AI29PredicateCodableConfigurationVSaySSGSS10identifier_Sb10isConcretetTf1cn_nTf4nggg_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, _QWORD *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  char v19;
  int64_t v20;
  uint64_t **v21;
  uint64_t *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  char v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t *v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;
  Swift::String v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  void *v75;
  Swift::String v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  _QWORD *v85;
  uint64_t v87;
  uint64_t v89;
  int64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;

  v9 = MEMORY[0x1E0DEE9D8];
  if (!a3)
    return v9;
  v94 = MEMORY[0x1E0DEE9D8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, a3 & ~(a3 >> 63), 0);
  if (a3 < 0)
  {
    __break(1u);
    return result;
  }
  v15 = 0;
  v16 = a9;
  v9 = v94;
  v87 = a4;
  v85 = a7;
  v81 = a3;
  while (1)
  {
    v17 = GenericArguments2.subscript.getter();
    v18 = (uint64_t *)v17;
    v84 = v19;
    if ((v19 & 1) == 0)
    {
      v83 = v15;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v43 = a7;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a7[2] + 1, 1, a7);
      v45 = v43[2];
      v44 = v43[3];
      if (v45 >= v44 >> 1)
        v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v44 > 1), v45 + 1, 1, v43);
      v43[2] = v45 + 1;
      v46 = &v43[2 * v45];
      v46[4] = a8;
      v46[5] = v16;
      swift_bridgeObjectRelease();
      v47 = PredicateCodableConfiguration._identifier(for:)(v18);
      if (!v48)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v70 = _typeName(_:qualified:)();
        v72 = v71;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
        lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], MEMORY[0x1E0DEAF20]);
        v73 = BidirectionalCollection<>.joined(separator:)();
        v75 = v74;
        swift_bridgeObjectRelease();
        v76._countAndFlagsBits = v73;
        v76._object = v75;
        String.append(_:)(v76);
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
        swift_allocError();
        *(_QWORD *)v77 = v70;
        *(_QWORD *)(v77 + 8) = v72;
        *(_QWORD *)(v77 + 16) = 47;
        *(_QWORD *)(v77 + 24) = 0xE100000000000000;
        *(_BYTE *)(v77 + 32) = 0;
        swift_willThrow();
        goto LABEL_39;
      }
      v50 = v48;
      v51 = v47;
      if ((v49 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v58 = MEMORY[0x1E0DEE9D8];
        a7 = v85;
      }
      else
      {
        swift_bridgeObjectRetain_n();
        v52 = Type.genericArguments2.getter();
        v54 = v53;
        v56 = v55;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        LOBYTE(v78) = 0;
        v57 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF18ReflectionInternal17GenericArguments2V_10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOsAE_pTg5016_s10Foundation19i12Structure33_klmnopqrs18LLV_4with4pathAD18d63Internal4TypeV_AA29PredicateCodableConfigurationVSaySSGtKcfcAD8t5OAG07F9U0OKXEfU_AI29PredicateCodableConfigurationVSaySSGSS10identifier_Sb10isConcretetTf1cn_nTf4nggg_n(v52, v54, v56, a4, a5, a6 & 1, v43, v51, v50, v78);
        a7 = v85;
        if (v89)
        {
          swift_release();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          return v9;
        }
        v58 = v57;
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      v15 = v83;
      v59 = v51;
      goto LABEL_32;
    }
    v20 = *(_QWORD *)(v17 + 16);
    if (v20)
      break;
    outlined consume of GenericArgument(v17, 1);
    v59 = (uint64_t *)MEMORY[0x1E0DEE9D8];
LABEL_31:
    v50 = 0;
    v58 = 0;
LABEL_32:
    v61 = *(_QWORD *)(v9 + 16);
    v60 = *(_QWORD *)(v9 + 24);
    if (v61 >= v60 >> 1)
    {
      v92 = v59;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v60 > 1, v61 + 1, 1);
      v59 = v92;
    }
    ++v15;
    *(_QWORD *)(v9 + 16) = v61 + 1;
    v62 = v9 + 32 * v61;
    *(_QWORD *)(v62 + 32) = v59;
    *(_QWORD *)(v62 + 40) = v50;
    *(_QWORD *)(v62 + 48) = v58;
    *(_BYTE *)(v62 + 56) = v84 & 1;
    v16 = a9;
    if (v15 == v81)
      return v9;
  }
  v82 = v15;
  v80 = v9;
  v93 = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20, 0);
  v91 = v93;
  v79 = (uint64_t)v18;
  v21 = (uint64_t **)(v18 + 4);
  while (1)
  {
    v90 = v20;
    v22 = *v21;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v23 = a7;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a7[2] + 1, 1, a7);
    v25 = v23[2];
    v24 = v23[3];
    if (v25 >= v24 >> 1)
      v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v24 > 1), v25 + 1, 1, v23);
    v23[2] = v25 + 1;
    v26 = &v23[2 * v25];
    v26[4] = a8;
    v26[5] = v16;
    swift_bridgeObjectRelease();
    v27 = a5;
    v28 = PredicateCodableConfiguration._identifier(for:)(v22);
    if (!v29)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v63 = _typeName(_:qualified:)();
      v9 = v64;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], MEMORY[0x1E0DEAF20]);
      v65 = BidirectionalCollection<>.joined(separator:)();
      v67 = v66;
      swift_bridgeObjectRelease();
      v68._countAndFlagsBits = v65;
      v68._object = v67;
      String.append(_:)(v68);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
      swift_allocError();
      *(_QWORD *)v69 = v63;
      *(_QWORD *)(v69 + 8) = v9;
      *(_QWORD *)(v69 + 16) = 47;
      *(_QWORD *)(v69 + 24) = 0xE100000000000000;
      *(_BYTE *)(v69 + 32) = 0;
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_38;
    }
    v31 = v28;
    v32 = v29;
    if ((v30 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v38 = MEMORY[0x1E0DEE9D8];
      goto LABEL_16;
    }
    swift_bridgeObjectRetain_n();
    v33 = Type.genericArguments2.getter();
    v35 = v34;
    v9 = v36;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    LOBYTE(v78) = 0;
    v37 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF18ReflectionInternal17GenericArguments2V_10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOsAE_pTg5016_s10Foundation19i12Structure33_klmnopqrs18LLV_4with4pathAD18d63Internal4TypeV_AA29PredicateCodableConfigurationVSaySSGtKcfcAD8t5OAG07F9U0OKXEfU_AI29PredicateCodableConfigurationVSaySSGSS10identifier_Sb10isConcretetTf1cn_nTf4nggg_n(v33, v35, v9, a4, v27, a6 & 1, v23, v31, v32, v78);
    if (v89)
      break;
    v38 = v37;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    a7 = v85;
LABEL_16:
    v39 = v91;
    v41 = *(_QWORD *)(v91 + 16);
    v40 = *(_QWORD *)(v91 + 24);
    if (v41 >= v40 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1, v41 + 1, 1);
      v39 = v91;
    }
    *(_QWORD *)(v39 + 16) = v41 + 1;
    v91 = v39;
    v42 = (_QWORD *)(v39 + 24 * v41);
    v42[4] = v31;
    v42[5] = v32;
    v42[6] = v38;
    ++v21;
    v20 = v90 - 1;
    a4 = v87;
    a5 = v27;
    v16 = a9;
    if (v90 == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of GenericArgument(v79, 1);
      v9 = v80;
      v15 = v82;
      v59 = (uint64_t *)v91;
      goto LABEL_31;
    }
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
LABEL_38:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of GenericArgument(v79, 1);
LABEL_39:
  swift_release();
  return v9;
}

uint64_t partial apply for closure #1 in KeyedEncodingContainer<>._encode<A, B>(_:variable:predicateConfiguration:)()
{
  return partial apply for closure #1 in KeyedEncodingContainer<>._encode<A, B>(_:variable:predicateConfiguration:)();
}

{
  return closure #1 in KeyedEncodingContainer<>._encode<A, B>(_:variable:predicateConfiguration:)();
}

uint64_t _ss22KeyedDecodingContainerV10FoundationAC29PredicateExpressionCodingKeysORszrlE7_decode5input6output22predicateConfigurationAC0eF0_pqd_0_6OutputRts_XP10expression_AC0E11ExpressionsO8VariableVy_qd__Gqd__Qp_t8variabletqd__mqd__Qp_qd_0_mAC0e7CodableM0VtKRvd__r0_lFAcJ_pqd_0_ALRS_XPAM_ARqd__Qp_tAStyKXEfU_TA_0@<X0>(uint64_t *a1@<X8>)
{
  return partial apply for closure #1 in KeyedDecodingContainer<>._decode<A, each B>(input:output:predicateConfiguration:)(a1);
}

unint64_t specialized BidirectionalCollection.lastIndex(where:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char v6;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return 0;
  while (1)
  {
    v3 = String.index(before:)();
    if (String.subscript.getter() == 47 && v4 == 0xE100000000000000)
      break;
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return v3;
    if (v3 < 0x4000)
      return 0;
  }
  swift_bridgeObjectRelease();
  return v3;
}

unint64_t specialized BidirectionalCollection.lastIndex(where:)(unint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char v6;

  v2 = a1 >> 14;
  if (a1 >> 14 == a2 >> 14)
    return 0;
  do
  {
    v3 = Substring.index(before:)();
    if (Substring.subscript.getter() == 47 && v4 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v6 & 1) == 0)
        return v3;
    }
  }
  while (v2 != v3 >> 14);
  return 0;
}

{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char v6;

  v2 = a1 >> 14;
  if (a1 >> 14 == a2 >> 14)
    return 0;
  while (1)
  {
    v3 = Substring.index(before:)();
    if (Substring.subscript.getter() == 47 && v4 == 0xE100000000000000)
      break;
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return v3;
    if (v2 == v3 >> 14)
      return 0;
  }
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t default argument 4 of static CocoaError.errorWithFilePath(_:errno:reading:variant:additionalUserInfo:)()
{
  return MEMORY[0x1E0DEE9E0];
}

uint64_t static CocoaError.moveFileError(_:_:_:)@<X0>(Swift::Int32 a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  Swift::String v10;
  uint64_t countAndFlagsBits;
  unint64_t object;
  id v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  Swift::Int v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  Swift::String v35;
  unint64_t v36;
  id v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  id v42;
  Swift::String v43;
  uint64_t v44;
  uint64_t v45;
  Swift::String v46;
  uint64_t v47;
  unint64_t v48;
  Swift::Int v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  id v53;
  void *v54;
  id v55;
  void *v56;
  void *v57;
  id v58;
  void *v59;
  id v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  void *v64;
  void *v65;
  Swift::String v66;
  Swift::String v67;
  Swift::String v68;
  id v69;
  void *v70;
  unint64_t v71;
  uint64_t v72;
  id v73;
  id v74;
  Swift::String v75;
  uint64_t v76;
  uint64_t v77;
  Swift::String v78;
  uint64_t v79;
  _QWORD *v80;
  unint64_t v81;
  Swift::Int v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  id v87;
  void *v88;
  id v89;
  void *v90;
  void *v91;
  id v92;
  void *v93;
  id v94;
  void *v95;
  void *v96;
  Swift::String v97;
  Swift::String v98;
  Swift::String v99;
  id v100;
  void *v101;
  unint64_t v102;
  unint64_t v103;
  int64_t Path;
  unint64_t v105;
  unint64_t v106;
  Swift::Int isStackAllocationSafe;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  const char *v111;
  char v112;
  char v113;
  const char *v114;
  char v115;
  char v116;
  Swift::Int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  const char *v121;
  char v122;
  char v123;
  int64_t v124;
  const char *v125;
  char v126;
  char v127;
  id v128;
  uint64_t v129;
  uint64_t v130;
  id v131;
  uint64_t v132;
  uint64_t v133;
  id v134;
  uint64_t v135;
  uint64_t v136;
  id v137;
  uint64_t v138;
  uint64_t v139;
  _BYTE v141[16];
  _BYTE *v142;
  uint64_t v143;
  unint64_t v144;
  void *v145;
  _QWORD *v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  id v150;
  Swift::Int32 v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  __int128 v156;
  _BYTE v157[24];
  Swift::String v158;
  __int128 v159;
  uint64_t v160;
  uint64_t v161;

  v151 = a1;
  v146 = a4;
  v161 = *MEMORY[0x1E0C80C00];
  v4 = *(void **)a2;
  v5 = *(void **)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(void **)a3;
  v8 = *(void **)(a3 + 8);
  v149 = *(_QWORD *)(a3 + 16);
  swift_retain();
  v9 = v4;
  swift_retain();
  v148 = v8;
  v152 = (unint64_t)v5;
  if (_foundation_swift_url_feature_enabled())
  {
    *(_QWORD *)&v159 = v6;
    v150 = v9;
    swift_retain();
    swift_retain();
    v10 = URL.path(percentEncoded:)(1);
    countAndFlagsBits = v10._countAndFlagsBits;
    v158 = v10;
    swift_bridgeObjectRetain();
    if (String.count.getter() <= 1)
    {
      object = (unint64_t)v10._object;
    }
    else
    {
      object = (unint64_t)v10._object;
      if ((specialized BidirectionalCollection.last.getter(v10._countAndFlagsBits, (unint64_t)v10._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        object = (unint64_t)v158._object;
        countAndFlagsBits = v158._countAndFlagsBits;
      }
    }
    *(_QWORD *)v157 = Set.init(minimumCapacity:)();
    v25 = specialized Set._Variant.insert(_:)(&v155, 0x2FuLL);
    v26 = *(_QWORD *)v157;
    v27 = HIBYTE(object) & 0xF;
    if ((object & 0x2000000000000000) == 0)
      v27 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (!v27)
    {
      swift_bridgeObjectRelease();
      v32 = 0;
      v40 = 0xE000000000000000;
      v5 = (void *)v152;
LABEL_23:
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v36 = v40;
      goto LABEL_26;
    }
    v145 = v7;
    *(_QWORD *)v157 = countAndFlagsBits;
    *(_QWORD *)&v157[8] = object;
    MEMORY[0x1E0C80A78](v25);
    v142 = v157;
    v143 = v26;
    swift_bridgeObjectRetain();
    v28 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v141, countAndFlagsBits, object);
    if (v29 == 1)
    {
      v30 = *(_QWORD *)v157;
      v31 = *(_QWORD *)&v157[8];
      swift_bridgeObjectRetain();
      v32 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v30, v31, v26);
      v34 = v33;
      swift_bridgeObjectRelease();
    }
    else
    {
      v32 = (uint64_t)v28;
      v34 = v29;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v5 = (void *)v152;
    v8 = v148;
    if (v34)
    {
      v40 = v34;
      v7 = v145;
      goto LABEL_23;
    }
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v32 = 0;
    v36 = 0xE000000000000000;
    v7 = v145;
  }
  else
  {
    v13 = objc_msgSend(v9, sel__parameterString);
    if (v13)
    {
      v14 = v13;
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v17 = v16;

      if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
        && (v18 = objc_msgSend(v9, sel_path)) != 0)
      {
        v19 = v18;
        v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
        v22 = v21;

        v158._countAndFlagsBits = (uint64_t)v20;
        v158._object = v22;
        swift_bridgeObjectRetain();
        v23._countAndFlagsBits = 59;
        v23._object = (void *)0xE100000000000000;
        String.append(_:)(v23);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v24._countAndFlagsBits = (uint64_t)v15;
        v24._object = v17;
        String.append(_:)(v24);
        swift_bridgeObjectRelease();
        v8 = v148;
      }
      else
      {
        v158._countAndFlagsBits = 59;
        v158._object = (void *)0xE100000000000000;
        v35._countAndFlagsBits = (uint64_t)v15;
        v35._object = v17;
        String.append(_:)(v35);
      }
      swift_bridgeObjectRelease();
      v36 = (unint64_t)v158._object;
      v32 = v158._countAndFlagsBits;
      v5 = (void *)v152;
    }
    else
    {
      v37 = objc_msgSend(v9, sel_path);
      if (v37)
      {
        v38 = v37;
        v32 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
        v36 = v39;

      }
      else
      {
        v32 = 0;
        v36 = 0xE000000000000000;
      }
    }
  }
LABEL_26:
  v41 = _foundation_swift_url_feature_enabled();
  v147 = v32;
  if ((v41 & 1) != 0)
  {
    v144 = v36;
    v158._countAndFlagsBits = (uint64_t)v9;
    v158._object = v5;
    *(_QWORD *)&v159 = v6;
    v42 = v9;
    swift_retain();
    swift_retain();
    v43 = URL.path(percentEncoded:)(1);
    v158 = v43;
    swift_bridgeObjectRetain();
    if (String.count.getter() > 1
      && (specialized BidirectionalCollection.last.getter(v43._countAndFlagsBits, (unint64_t)v43._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }
    v145 = v7;
    *(_QWORD *)v157 = Set.init(minimumCapacity:)();
    v44 = specialized Set._Variant.insert(_:)(&v155, 0x2FuLL);
    v45 = *(_QWORD *)v157;
    v46 = v158;
    v47 = ((unint64_t)v158._object >> 56) & 0xF;
    if (((uint64_t)v158._object & 0x2000000000000000) == 0)
      v47 = v158._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (v47)
    {
      *(Swift::String *)v157 = v158;
      MEMORY[0x1E0C80A78](v44);
      v142 = v157;
      v143 = v45;
      swift_bridgeObjectRetain();
      v150 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v141, v46._countAndFlagsBits, (unint64_t)v46._object);
      if (v48 == 1)
      {
        v49 = *(_QWORD *)v157;
        v50 = *(_QWORD *)&v157[8];
        swift_bridgeObjectRetain();
        v150 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v49, v50, v45);
        v52 = v51;
        swift_bridgeObjectRelease();
      }
      else
      {
        v52 = v48;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v8 = v148;
      v32 = v147;
      if (!v52)
      {
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v150 = 0;
        v52 = 0xE000000000000000;
        goto LABEL_48;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      v150 = 0;
      v52 = 0xE000000000000000;
      v32 = v147;
    }
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_48:
    v152 = v52;
    swift_release();
    swift_release();

    v36 = v144;
    v7 = v145;
    goto LABEL_49;
  }
  v53 = objc_msgSend(v9, sel__parameterString);
  if (v53)
  {
    v54 = v53;
    v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
    v57 = v56;

    if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
      && (v58 = objc_msgSend(v9, sel_path)) != 0)
    {
      v59 = v58;
      v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
      v145 = 0;
      v61 = v36;
      v62 = v7;
      v63 = v32;
      v65 = v64;

      v158._countAndFlagsBits = (uint64_t)v60;
      v158._object = v65;
      swift_bridgeObjectRetain();
      v66._countAndFlagsBits = 59;
      v66._object = (void *)0xE100000000000000;
      String.append(_:)(v66);
      v32 = v63;
      v7 = v62;
      v36 = v61;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v67._countAndFlagsBits = (uint64_t)v55;
      v67._object = v57;
      String.append(_:)(v67);
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      v8 = v148;
    }
    else
    {
      v158._countAndFlagsBits = 59;
      v158._object = (void *)0xE100000000000000;
      v68._countAndFlagsBits = (uint64_t)v55;
      v68._object = v57;
      String.append(_:)(v68);
      swift_release();
      swift_release();

    }
    swift_bridgeObjectRelease();
    v152 = (unint64_t)v158._object;
    v150 = (id)v158._countAndFlagsBits;
  }
  else
  {
    v69 = objc_msgSend(v9, sel_path);
    if (v69)
    {
      v70 = v69;
      v150 = static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
      v152 = v71;
      swift_release();
      swift_release();

    }
    else
    {
      swift_release();
      swift_release();

      v150 = 0;
      v152 = 0xE000000000000000;
    }
  }
LABEL_49:
  v72 = v149;
  swift_retain();
  v73 = v7;
  swift_retain();
  if ((_foundation_swift_url_feature_enabled() & 1) != 0)
  {
    v158._countAndFlagsBits = (uint64_t)v73;
    v158._object = v8;
    *(_QWORD *)&v159 = v72;
    v74 = v73;
    swift_retain();
    swift_retain();
    v75 = URL.path(percentEncoded:)(1);
    v158 = v75;
    swift_bridgeObjectRetain();
    if (String.count.getter() > 1
      && (specialized BidirectionalCollection.last.getter(v75._countAndFlagsBits, (unint64_t)v75._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }
    *(_QWORD *)v157 = Set.init(minimumCapacity:)();
    v76 = specialized Set._Variant.insert(_:)(&v155, 0x2FuLL);
    v77 = *(_QWORD *)v157;
    v78 = v158;
    v79 = ((unint64_t)v158._object >> 56) & 0xF;
    if (((uint64_t)v158._object & 0x2000000000000000) == 0)
      v79 = v158._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (v79)
    {
      *(Swift::String *)v157 = v158;
      MEMORY[0x1E0C80A78](v76);
      v142 = v157;
      v143 = v77;
      swift_bridgeObjectRetain();
      v80 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v141, v78._countAndFlagsBits, (unint64_t)v78._object);
      if (v81 == 1)
      {
        v82 = *(_QWORD *)v157;
        v83 = *(_QWORD *)&v157[8];
        swift_bridgeObjectRetain();
        v84 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v82, v83, v77);
        v86 = v85;
        swift_bridgeObjectRelease();
      }
      else
      {
        v84 = (uint64_t)v80;
        v86 = v81;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v32 = v147;
      if (!v86)
      {
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v84 = 0;
        v86 = 0xE000000000000000;
        goto LABEL_71;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      v84 = 0;
      v86 = 0xE000000000000000;
      v32 = v147;
    }
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_71:
    swift_release();
    swift_release();

    goto LABEL_72;
  }
  v87 = objc_msgSend(v73, sel__parameterString);
  if (v87)
  {
    v88 = v87;
    v89 = static String._unconditionallyBridgeFromObjectiveC(_:)(v87);
    v91 = v90;

    if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
      && (v92 = objc_msgSend(v73, sel_path)) != 0)
    {
      v93 = v92;
      v94 = static String._unconditionallyBridgeFromObjectiveC(_:)(v92);
      v96 = v95;

      v158._countAndFlagsBits = (uint64_t)v94;
      v158._object = v96;
      swift_bridgeObjectRetain();
      v97._countAndFlagsBits = 59;
      v97._object = (void *)0xE100000000000000;
      String.append(_:)(v97);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v98._countAndFlagsBits = (uint64_t)v89;
      v98._object = v91;
      String.append(_:)(v98);
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
    }
    else
    {
      v158._countAndFlagsBits = 59;
      v158._object = (void *)0xE100000000000000;
      v99._countAndFlagsBits = (uint64_t)v89;
      v99._object = v91;
      String.append(_:)(v99);
      swift_release();
      swift_release();

    }
    swift_bridgeObjectRelease();
    v86 = (unint64_t)v158._object;
    v84 = v158._countAndFlagsBits;
  }
  else
  {
    v100 = objc_msgSend(v73, sel_path);
    if (v100)
    {
      v101 = v100;
      v84 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v100);
      v86 = v102;
      swift_release();
      swift_release();

    }
    else
    {
      swift_release();
      swift_release();

      v84 = 0;
      v86 = 0xE000000000000000;
    }
  }
LABEL_72:
  v103 = v36;
  if (v151 != 63)
    goto LABEL_112;
  swift_bridgeObjectRetain();
  Path = String._lastPathComponent.getter(v84, v86);
  v106 = v105;
  swift_bridgeObjectRelease();
  if ((v106 & 0x1000000000000000) != 0)
  {
    isStackAllocationSafe = String.UTF8View._foreignCount()();
  }
  else if ((v106 & 0x2000000000000000) != 0)
  {
    isStackAllocationSafe = HIBYTE(v106) & 0xF;
  }
  else
  {
    isStackAllocationSafe = Path & 0xFFFFFFFFFFFFLL;
  }
  v108 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
LABEL_118:
    v117 = String.UTF8View._foreignCount()();
    goto LABEL_94;
  }
  if (v108 < -1)
  {
LABEL_120:
    __break(1u);
LABEL_121:
    __break(1u);
  }
  v109 = v108 + 1;
  if (v108 < 1024 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v111 = (char *)&v144 - v110;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v111, v109, 1, Path, v106);
    v113 = v112;
    swift_bridgeObjectRelease();
    if ((v113 & 1) != 0)
      Path = 0;
    else
      Path = strnlen(v111, 0x100uLL);
  }
  else
  {
    v114 = (const char *)swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v114, v109, 1, Path, v106);
    v116 = v115;
    swift_bridgeObjectRelease();
    if ((v116 & 1) != 0)
      Path = 0;
    else
      Path = strnlen(v114, 0x100uLL);
    MEMORY[0x186DA9E78](v114, -1, -1);
  }
  swift_bridgeObjectRelease();
  if ((v86 & 0x1000000000000000) != 0)
    goto LABEL_118;
  if ((v86 & 0x2000000000000000) != 0)
    v117 = HIBYTE(v86) & 0xF;
  else
    v117 = v84 & 0xFFFFFFFFFFFFLL;
LABEL_94:
  v118 = 3 * v117;
  if ((unsigned __int128)(v117 * (__int128)3) >> 64 != (3 * v117) >> 63)
  {
    __break(1u);
    goto LABEL_120;
  }
  if (v118 < -1)
    goto LABEL_121;
  v119 = v118 + 1;
  if (v118 < 1024 || (v117 = swift_stdlib_isStackAllocationSafe(), (v117 & 1) != 0))
  {
    MEMORY[0x1E0C80A78](v117);
    v121 = (char *)&v144 - v120;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v121, v119, 1, v84, v86);
    v123 = v122;
    swift_bridgeObjectRelease();
    if ((v123 & 1) != 0)
      v124 = 0;
    else
      v124 = strnlen(v121, 0x401uLL);
  }
  else
  {
    v125 = (const char *)swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v125, v119, 1, v84, v86);
    v127 = v126;
    swift_bridgeObjectRelease();
    if ((v127 & 1) != 0)
      v124 = 0;
    else
      v124 = strnlen(v125, 0x401uLL);
    MEMORY[0x186DA9E78](v125, -1, -1);
  }
  v32 = v84;
  v103 = v86;
  if (Path <= 255)
  {
    if (v124 <= 1024)
      v32 = (uint64_t)v150;
    else
      v32 = v84;
    if (v124 <= 1024)
      v103 = v152;
    else
      v103 = v86;
  }
LABEL_112:
  v154 = MEMORY[0x1E0DEE9E0];
  v128 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSSourceFilePathErrorKey"));
  v130 = v129;
  *(_QWORD *)v157 = v150;
  *(_QWORD *)&v157[8] = v152;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)&v158, (uint64_t)v128, v130);
  v131 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDestinationFilePath"));
  v133 = v132;
  *(_QWORD *)v157 = v84;
  *(_QWORD *)&v157[8] = v86;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)&v158, (uint64_t)v131, v133);
  v153 = v154;
  v134 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
  v136 = v135;
  *(_QWORD *)v157 = v32;
  *(_QWORD *)&v157[8] = v103;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)&v158, (uint64_t)v134, v136);
  v137 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
  v139 = v138;
  URL.init(_fileManagerFailableFileURLWithPath:)(v32, v103, (uint64_t)v157);
  if (*(_QWORD *)v157)
  {
    v155 = *(_QWORD *)v157;
    v156 = *(_OWORD *)&v157[8];
    lazy protocol witness table accessor for type URL and conformance URL();
    AnyHashable.init<A>(_:)();
  }
  else
  {
    v158 = (Swift::String)0;
    v159 = 0u;
    v160 = 0;
  }
  specialized Dictionary.subscript.setter((uint64_t)&v158, (uint64_t)v137, v139);
  static CocoaError._errorWithErrno(_:reading:variant:userInfo:)(v151, 0, 1702260557, 0xE400000000000000, v153, v146);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

id NSFileManager._shouldProceedAfter(error:removingItemAtPath:)(void *a1, uint64_t a2, unint64_t a3)
{
  void *v3;
  id v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  id v14;
  void *v15;

  v7 = objc_msgSend(v3, sel__safeDelegate);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSFileManagerDelegate);
  if ((swift_dynamicCast() & 1) == 0)
    return 0;
  if ((objc_msgSend(v14, sel_respondsToSelector_, sel_fileManager_shouldProceedAfterError_removingItemAtURL_) & 1) == 0)
  {
    if ((objc_msgSend(v14, sel_respondsToSelector_, sel_fileManager_shouldProceedAfterError_removingItemAtPath_) & 1) != 0)
    {
      swift_unknownObjectRetain();
      v11 = a1;
      v12 = _swift_stdlib_bridgeErrorToNSError();
      v10 = objc_msgSend(v14, sel_fileManager_shouldProceedAfterError_removingItemAtPath_, v3, v12, String._bridgeToObjectiveCImpl()());
      swift_unknownObjectRelease_n();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return v10;
    }
    swift_unknownObjectRelease();
    return 0;
  }
  swift_unknownObjectRetain();
  URL.init(fileURLWithPath:)(a2, a3, (uint64_t)&v15);
  v8 = v15;
  v9 = a1;
  v10 = objc_msgSend(v14, sel_fileManager_shouldProceedAfterError_removingItemAtURL_, v3, _swift_stdlib_bridgeErrorToNSError(), v8);

  swift_unknownObjectRelease_n();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return v10;
}

uint64_t NSFileManager._shouldRemoveItemAtPath(_:)(uint64_t a1, unint64_t a2)
{
  void *v2;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v10;
  void *v11;

  v5 = objc_msgSend(v2, sel__safeDelegate);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSFileManagerDelegate);
  if ((swift_dynamicCast() & 1) == 0)
    return 1;
  if ((objc_msgSend(v10, sel_respondsToSelector_, sel_fileManager_shouldRemoveItemAtURL_) & 1) == 0)
  {
    if ((objc_msgSend(v10, sel_respondsToSelector_, sel_fileManager_shouldRemoveItemAtPath_) & 1) != 0)
    {
      v8 = String._bridgeToObjectiveCImpl()();
      v7 = objc_msgSend((id)swift_unknownObjectRetain(), sel_fileManager_shouldRemoveItemAtPath_, v2, v8);
      swift_unknownObjectRelease_n();
      swift_unknownObjectRelease();
      return (uint64_t)v7;
    }
    swift_unknownObjectRelease();
    return 1;
  }
  swift_unknownObjectRetain();
  URL.init(fileURLWithPath:)(a1, a2, (uint64_t)&v11);
  v6 = v11;
  v7 = objc_msgSend(v10, sel_fileManager_shouldRemoveItemAtURL_, v2, v11);

  swift_unknownObjectRelease_n();
  swift_release();
  swift_release();
  return (uint64_t)v7;
}

id NSFileManager._shouldProceedAfter(error:copyingItemAtPath:to:)(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, SEL *a6, SEL *a7)
{
  void *v7;
  id v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  id v25;
  void *v26;

  v15 = objc_msgSend(v7, sel__safeDelegate);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSFileManagerDelegate);
  if ((swift_dynamicCast() & 1) == 0)
    return 0;
  v16 = v25;
  if ((objc_msgSend(v25, sel_respondsToSelector_, *a6) & 1) == 0)
  {
    if ((objc_msgSend(v25, sel_respondsToSelector_, *a7) & 1) != 0)
    {
      swift_unknownObjectRetain();
      v21 = a1;
      v22 = _swift_stdlib_bridgeErrorToNSError();
      v23 = String._bridgeToObjectiveCImpl()();
      v20 = objc_msgSend(v25, *a7, v7, v22, v23, String._bridgeToObjectiveCImpl()());
      swift_unknownObjectRelease_n();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return v20;
    }
    swift_unknownObjectRelease();
    return 0;
  }
  swift_unknownObjectRetain();
  URL.init(fileURLWithPath:)(a2, a3, (uint64_t)&v26);
  v17 = v26;
  URL.init(fileURLWithPath:)(a4, a5, (uint64_t)&v25);
  v18 = v25;
  v19 = a1;
  v20 = objc_msgSend(v16, *a6, v7, _swift_stdlib_bridgeErrorToNSError(), v17, v18);

  swift_unknownObjectRelease_n();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v20;
}

uint64_t NSFileManager._shouldCopyItemAtPath(_:to:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, SEL *a5, SEL *a6)
{
  void *v6;
  id v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v21;
  void *v22;

  v13 = objc_msgSend(v6, sel__safeDelegate);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSFileManagerDelegate);
  if ((swift_dynamicCast() & 1) == 0)
    return 1;
  v14 = v21;
  if ((objc_msgSend(v21, sel_respondsToSelector_, *a5) & 1) == 0)
  {
    if ((objc_msgSend(v21, sel_respondsToSelector_, *a6) & 1) != 0)
    {
      v18 = String._bridgeToObjectiveCImpl()();
      v19 = String._bridgeToObjectiveCImpl()();
      v17 = objc_msgSend((id)swift_unknownObjectRetain(), *a6, v6, v18, v19);
      swift_unknownObjectRelease_n();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return (uint64_t)v17;
    }
    swift_unknownObjectRelease();
    return 1;
  }
  swift_unknownObjectRetain();
  URL.init(fileURLWithPath:)(a1, a2, (uint64_t)&v22);
  v15 = v22;
  URL.init(fileURLWithPath:)(a3, a4, (uint64_t)&v21);
  v16 = v21;
  v17 = objc_msgSend(v14, *a5, v6, v15, v21);

  swift_unknownObjectRelease_n();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return (uint64_t)v17;
}

removefile_state_t closure #1 in static _FileOperations.removeFile(_:with:)(const char *a1, uint64_t a2, unint64_t a3, void *a4)
{
  removefile_state_t result;
  _removefile_state *v9;
  _QWORD *v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  Swift::Int32 v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  __int128 *v33;
  _OWORD *v34;
  _OWORD *v35;
  __int128 *v36;
  _OWORD *v37;
  _OWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  _OWORD *v41;
  unint64_t i;
  int64_t v43;
  unint64_t v44;
  int64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  unint64_t v51;
  unint64_t v52;
  char v53;
  _QWORD *v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  id v60;
  id v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v67;
  Swift::Int32 v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  id v76;
  void *v77;
  uint64_t v78;
  id v79;
  id v80;
  void *v81;
  uint64_t v82;
  id v83;
  uint64_t v84;
  _QWORD *v85;
  int64_t v86;
  int64_t v87;
  uint64_t v88;
  uint64_t v89;
  _OWORD *v90;
  __int128 v91;
  _OWORD *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _OWORD *v108;
  _OWORD *v109;
  int64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  int64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  int64_t v122;
  unint64_t v123;
  int64_t v124;
  uint64_t v125;
  void *v126;
  id v127;
  uint64_t v128;
  id v129;
  id v130;
  id v131;
  void *v132;
  void *v133;
  char v135;
  id v136;
  uint64_t v137;
  _QWORD *v138;
  int64_t v139;
  int64_t v140;
  uint64_t v141;
  uint64_t v142;
  _OWORD *v143;
  __int128 v144;
  _OWORD *v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  char v150;
  char v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _OWORD *v161;
  _OWORD *v162;
  int64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  int64_t v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  int64_t v175;
  unint64_t v176;
  int64_t v177;
  uint64_t v178;
  id v179;
  uint64_t v180;
  id v181;
  id v182;
  id v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char v188;
  int64_t v189;
  uint64_t v190;
  void *v191;
  _removefile_state *v192;
  _QWORD *v193;
  int64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  id v199;
  __int128 v200;
  _OWORD v201[2];
  __int128 v202;
  _OWORD v203[2];
  __int128 dst;
  __int128 v205;
  uint64_t v206;
  uint64_t v207;

  v207 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v198 = MEMORY[0x1E0DEE9E0];
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
    v15 = v14;
    *(_QWORD *)&v201[0] = a2;
    *((_QWORD *)&v201[0] + 1) = a3;
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&dst, (uint64_t)v13, v15);
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
    v18 = v17;
    URL.init(_fileManagerFailableFileURLWithPath:)(a2, a3, (uint64_t)v201);
    if (*(_QWORD *)&v201[0])
    {
      v199 = *(id *)&v201[0];
      v200 = *(_OWORD *)((char *)v201 + 8);
      lazy protocol witness table accessor for type URL and conformance URL();
      AnyHashable.init<A>(_:)();
    }
    else
    {
      dst = 0u;
      v205 = 0u;
      v206 = 0;
    }
    specialized Dictionary.subscript.setter((uint64_t)&dst, (uint64_t)v16, v18);
    v28 = v198;
    if (*(_QWORD *)(v198 + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v29 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      v29 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    }
    v190 = v198 + 64;
    v30 = -1;
    v31 = -1 << *(_BYTE *)(v198 + 32);
    if (-v31 < 64)
      v30 = ~(-1 << -(char)v31);
    v32 = v30 & *(_QWORD *)(v198 + 64);
    v33 = &v205;
    v34 = (__int128 *)((char *)&v200 + 8);
    v35 = &v201[1];
    v189 = (unint64_t)(63 - v31) >> 6;
    swift_bridgeObjectRetain();
    v194 = 0;
    if (v32)
      goto LABEL_20;
LABEL_21:
    v43 = v194 + 1;
    if (__OFADD__(v194, 1))
    {
LABEL_176:
      __break(1u);
LABEL_177:
      __break(1u);
LABEL_178:
      __break(1u);
      goto LABEL_179;
    }
    if (v43 < v189)
    {
      v44 = *(_QWORD *)(v190 + 8 * v43);
      v45 = v194 + 1;
      if (v44)
        goto LABEL_40;
      v45 = v194 + 2;
      if (v194 + 2 >= v189)
        goto LABEL_46;
      v44 = *(_QWORD *)(v190 + 8 * v45);
      if (v44)
        goto LABEL_40;
      v45 = v194 + 3;
      if (v194 + 3 >= v189)
        goto LABEL_46;
      v44 = *(_QWORD *)(v190 + 8 * v45);
      if (v44)
        goto LABEL_40;
      v45 = v194 + 4;
      if (v194 + 4 >= v189)
        goto LABEL_46;
      v44 = *(_QWORD *)(v190 + 8 * v45);
      if (v44)
        goto LABEL_40;
      v45 = v194 + 5;
      if (v194 + 5 >= v189)
        goto LABEL_46;
      v44 = *(_QWORD *)(v190 + 8 * v45);
      if (v44)
        goto LABEL_40;
      v45 = v194 + 6;
      if (v194 + 6 >= v189)
        goto LABEL_46;
      v44 = *(_QWORD *)(v190 + 8 * v45);
      if (v44)
      {
LABEL_40:
        v194 = v45;
        v195 = (v44 - 1) & v44;
        for (i = __clz(__rbit64(v44)) + (v45 << 6); ; i = __clz(__rbit64(v32)) | (v194 << 6))
        {
          v47 = *(_QWORD *)(v28 + 48) + 16 * i;
          v49 = *(void **)v47;
          v48 = *(_QWORD *)(v47 + 8);
          outlined init with copy of AnyHashable(*(_QWORD *)(v28 + 56) + 40 * i, (uint64_t)v33);
          *(_QWORD *)&dst = v49;
          *((_QWORD *)&dst + 1) = v48;
          v199 = v49;
          *(_QWORD *)&v200 = v48;
          swift_bridgeObjectRetain();
          swift_dynamicCast();
          v50 = v49;
          outlined init with take of Any(v34, v35);
          outlined init with take of Any(v35, v203);
          outlined init with take of Any(v203, v201);
          v51 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v49, v48);
          v52 = v51;
          if ((v53 & 1) != 0)
          {
            v36 = v33;
            v37 = v35;
            v38 = v34;
            v39 = v28;
            v40 = (_QWORD *)(v29[6] + 16 * v51);
            swift_bridgeObjectRelease();
            *v40 = v50;
            v40[1] = v48;
            v28 = v39;
            v34 = v38;
            v35 = v37;
            v33 = v36;
            v41 = (_OWORD *)(v29[7] + 32 * v52);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
            outlined init with take of Any(v201, v41);
            v32 = v195;
            if (!v195)
              goto LABEL_21;
          }
          else
          {
            if (v29[2] >= v29[3])
            {
              __break(1u);
LABEL_175:
              __break(1u);
              goto LABEL_176;
            }
            *(_QWORD *)((char *)v29 + ((v51 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v51;
            v54 = (_QWORD *)(v29[6] + 16 * v51);
            *v54 = v50;
            v54[1] = v48;
            outlined init with take of Any(v201, (_OWORD *)(v29[7] + 32 * v51));
            v55 = v29[2];
            v56 = __OFADD__(v55, 1);
            v57 = v55 + 1;
            if (v56)
              goto LABEL_175;
            v29[2] = v57;
            v32 = v195;
            if (!v195)
              goto LABEL_21;
          }
LABEL_20:
          v195 = (v32 - 1) & v32;
        }
      }
      v46 = v194 + 7;
      if (v194 + 7 < v189)
      {
        v44 = *(_QWORD *)(v190 + 8 * v46);
        if (v44)
        {
          v45 = v194 + 7;
          goto LABEL_40;
        }
        while (1)
        {
          v45 = v46 + 1;
          if (__OFADD__(v46, 1))
            break;
          if (v45 >= v189)
            goto LABEL_46;
          v44 = *(_QWORD *)(v190 + 8 * v45);
          ++v46;
          if (v44)
            goto LABEL_40;
        }
LABEL_179:
        __break(1u);
LABEL_180:
        __break(1u);
LABEL_181:
        __break(1u);
        goto LABEL_182;
      }
    }
LABEL_46:
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v58 = objc_allocWithZone((Class)NSError);
    v59 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v60 = objc_msgSend(v58, sel_initWithDomain_code_userInfo_, v59, 4, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v61 = objc_msgSend(v60, sel_domain);
    v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
    v64 = v63;

    if (v62 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) || v64 != v65)
    {
      v67 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v67 & 1) != 0)
        return (removefile_state_t)swift_willThrow();
      __break(1u);
    }
    swift_bridgeObjectRelease_n();
    return (removefile_state_t)swift_willThrow();
  }
  result = removefile_state_alloc();
  if (result)
  {
    v9 = result;
    type metadata accessor for _FileOperations._FileRemoveContext();
    v10 = (_QWORD *)swift_allocObject();
    v10[2] = 0;
    v10[3] = a4;
    v11 = a4;
    removefile_state_set(v9, 2u, v10);
    removefile_state_set(v9, 1u, @objc closure #1 in closure #1 in static _FileOperations._removeFile(_:_:with:));
    removefile_state_set(v9, 4u, v10);
    removefile_state_set(v9, 3u, @objc closure #2 in closure #1 in static _FileOperations._removeFile(_:_:with:));
    if ((removefile(a1, v9, 1u) & 0x80000000) == 0)
    {
      v12 = (void *)v10[2];
      if (!v12)
      {
LABEL_173:
        swift_release();
        return (removefile_state_t)removefile_state_free(v9);
      }
      v12;
LABEL_172:
      swift_willThrow();
      goto LABEL_173;
    }
    v193 = v10;
    v19 = MEMORY[0x186DA4118]();
    v20 = MEMORY[0x1E0DEE9E0];
    if (!v19)
    {
      LODWORD(dst) = 0;
      removefile_state_get(v9, 5u, &dst);
      v68 = dst;
      v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
      v71 = v70;
      *(_QWORD *)&v201[0] = a2;
      *((_QWORD *)&v201[0] + 1) = a3;
      swift_bridgeObjectRetain();
      AnyHashable.init<A>(_:)();
      specialized Dictionary.subscript.setter((uint64_t)&dst, (uint64_t)v69, v71);
      v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
      v74 = v73;
      URL.init(_fileManagerFailableFileURLWithPath:)(a2, a3, (uint64_t)v201);
      if (*(_QWORD *)&v201[0])
      {
        v199 = *(id *)&v201[0];
        v200 = *(_OWORD *)((char *)v201 + 8);
        lazy protocol witness table accessor for type URL and conformance URL();
        AnyHashable.init<A>(_:)();
      }
      else
      {
        dst = 0u;
        v205 = 0u;
        v206 = 0;
      }
      specialized Dictionary.subscript.setter((uint64_t)&dst, (uint64_t)v72, v74);
      static CocoaError._errorWithErrno(_:reading:variant:userInfo:)(v68, 0, 0x65766F6D6552, 0xE600000000000000, v20, &v199);
      swift_bridgeObjectRelease();
      if (v68 != 66)
        goto LABEL_172;
      v79 = v199;
      v80 = objc_msgSend(v79, sel_userInfo);
      v191 = v79;
      v192 = v9;
      if (!v80)
      {
LABEL_136:
        v163 = 0;
        v164 = *(_QWORD *)(v20 + 64);
        v197 = v20 + 64;
        v165 = 1 << *(_BYTE *)(v20 + 32);
        v166 = -1;
        if (v165 < 64)
          v166 = ~(-1 << v165);
        v167 = v166 & v164;
        v168 = (unint64_t)(v165 + 63) >> 6;
        if ((v166 & v164) == 0)
          goto LABEL_143;
LABEL_141:
        v170 = __clz(__rbit64(v167));
        v167 &= v167 - 1;
        v171 = v170 | (v163 << 6);
LABEL_142:
        v172 = *(_QWORD *)(v20 + 56);
        v173 = (_QWORD *)(*(_QWORD *)(v20 + 48) + 16 * v171);
        v174 = v173[1];
        *(_QWORD *)&v201[0] = *v173;
        *((_QWORD *)&v201[0] + 1) = v174;
        outlined init with copy of Any(v172 + 32 * v171, (uint64_t)&v201[1]);
        swift_bridgeObjectRetain();
        while (1)
        {
          outlined init with take of (key: String, value: Any)?((uint64_t)v201, (uint64_t)&dst);
          v178 = *((_QWORD *)&dst + 1);
          if (!*((_QWORD *)&dst + 1))
            break;
          v169 = dst;
          outlined init with take of Any(&v205, v201);
          specialized Dictionary.subscript.setter((uint64_t)v201, v169, v178);
          if (v167)
            goto LABEL_141;
LABEL_143:
          v175 = v163 + 1;
          if (__OFADD__(v163, 1))
            goto LABEL_178;
          if (v175 < v168)
          {
            v176 = *(_QWORD *)(v197 + 8 * v175);
            if (v176)
              goto LABEL_146;
            v177 = v163 + 2;
            ++v163;
            if (v175 + 1 < v168)
            {
              v176 = *(_QWORD *)(v197 + 8 * v177);
              if (v176)
                goto LABEL_149;
              v163 = v175 + 1;
              if (v175 + 2 < v168)
              {
                v176 = *(_QWORD *)(v197 + 8 * (v175 + 2));
                if (v176)
                {
                  v175 += 2;
                  goto LABEL_146;
                }
                v163 = v175 + 2;
                if (v175 + 3 < v168)
                {
                  v176 = *(_QWORD *)(v197 + 8 * (v175 + 3));
                  if (v176)
                  {
                    v175 += 3;
                    goto LABEL_146;
                  }
                  v177 = v175 + 4;
                  v163 = v175 + 3;
                  if (v175 + 4 < v168)
                  {
                    v176 = *(_QWORD *)(v197 + 8 * v177);
                    if (v176)
                    {
LABEL_149:
                      v175 = v177;
LABEL_146:
                      v167 = (v176 - 1) & v176;
                      v171 = __clz(__rbit64(v176)) + (v175 << 6);
                      v163 = v175;
                      goto LABEL_142;
                    }
                    while (1)
                    {
                      v175 = v177 + 1;
                      if (__OFADD__(v177, 1))
                        goto LABEL_185;
                      if (v175 >= v168)
                        break;
                      v176 = *(_QWORD *)(v197 + 8 * v175);
                      ++v177;
                      if (v176)
                        goto LABEL_146;
                    }
                    v163 = v168 - 1;
                  }
                }
              }
            }
          }
          v167 = 0;
          v202 = 0u;
          memset(v201, 0, sizeof(v201));
        }
        v126 = v191;

        swift_release();
        static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
        v179 = objc_allocWithZone((Class)NSError);
        v180 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v181 = objc_msgSend(v179, sel_initWithDomain_code_userInfo_, v180, 513, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v182 = objc_msgSend(v181, sel_domain);
        v183 = static String._unconditionallyBridgeFromObjectiveC(_:)(v182);
        v185 = v184;

        if (v183 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) || v185 != v186)
        {
          v188 = _stringCompareWithSmolCheck(_:_:expecting:)();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v9 = v192;
          v126 = v193;
          if ((v188 & 1) != 0)
            goto LABEL_172;
          __break(1u);
        }
LABEL_171:

        swift_bridgeObjectRelease_n();
        v9 = v192;
        goto LABEL_172;
      }
      v81 = v80;
      swift_unknownObjectRetain();
      v82 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
      if (v82)
      {
        v20 = v82;
LABEL_135:

        goto LABEL_136;
      }
      goto LABEL_119;
    }
    v21 = MEMORY[0x186DA4118]();
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
    v24 = v23;
    *(_QWORD *)&v201[0] = a2;
    *((_QWORD *)&v201[0] + 1) = a3;
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&dst, (uint64_t)v22, v24);
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
    v27 = v26;
    URL.init(_fileManagerFailableFileURLWithPath:)(a2, a3, (uint64_t)v201);
    if (*(_QWORD *)&v201[0])
    {
      v199 = *(id *)&v201[0];
      v200 = *(_OWORD *)((char *)v201 + 8);
      lazy protocol witness table accessor for type URL and conformance URL();
      AnyHashable.init<A>(_:)();
    }
    else
    {
      dst = 0u;
      v205 = 0u;
      v206 = 0;
    }
    specialized Dictionary.subscript.setter((uint64_t)&dst, (uint64_t)v25, v27);
    static CocoaError._errorWithErrno(_:reading:variant:userInfo:)(v21, 0, 0x65766F6D6552, 0xE600000000000000, v20, &v199);
    swift_bridgeObjectRelease();
    if (v21 != 66)
      goto LABEL_172;
    v75 = v199;
    v76 = objc_msgSend(v75, sel_userInfo);
    v191 = v75;
    v192 = v9;
    if (!v76)
    {
LABEL_84:
      v110 = 0;
      v111 = *(_QWORD *)(v20 + 64);
      v196 = v20 + 64;
      v112 = 1 << *(_BYTE *)(v20 + 32);
      v113 = -1;
      if (v112 < 64)
        v113 = ~(-1 << v112);
      v114 = v113 & v111;
      v115 = (unint64_t)(v112 + 63) >> 6;
      if ((v113 & v111) == 0)
        goto LABEL_91;
LABEL_89:
      v117 = __clz(__rbit64(v114));
      v114 &= v114 - 1;
      v118 = v117 | (v110 << 6);
LABEL_90:
      v119 = *(_QWORD *)(v20 + 56);
      v120 = (_QWORD *)(*(_QWORD *)(v20 + 48) + 16 * v118);
      v121 = v120[1];
      *(_QWORD *)&v201[0] = *v120;
      *((_QWORD *)&v201[0] + 1) = v121;
      outlined init with copy of Any(v119 + 32 * v118, (uint64_t)&v201[1]);
      swift_bridgeObjectRetain();
      while (1)
      {
        outlined init with take of (key: String, value: Any)?((uint64_t)v201, (uint64_t)&dst);
        v125 = *((_QWORD *)&dst + 1);
        if (!*((_QWORD *)&dst + 1))
          break;
        v116 = dst;
        outlined init with take of Any(&v205, v201);
        specialized Dictionary.subscript.setter((uint64_t)v201, v116, v125);
        if (v114)
          goto LABEL_89;
LABEL_91:
        v122 = v110 + 1;
        if (__OFADD__(v110, 1))
          goto LABEL_177;
        if (v122 < v115)
        {
          v123 = *(_QWORD *)(v196 + 8 * v122);
          if (v123)
            goto LABEL_94;
          v124 = v110 + 2;
          ++v110;
          if (v122 + 1 < v115)
          {
            v123 = *(_QWORD *)(v196 + 8 * v124);
            if (v123)
              goto LABEL_97;
            v110 = v122 + 1;
            if (v122 + 2 < v115)
            {
              v123 = *(_QWORD *)(v196 + 8 * (v122 + 2));
              if (v123)
              {
                v122 += 2;
                goto LABEL_94;
              }
              v110 = v122 + 2;
              if (v122 + 3 < v115)
              {
                v123 = *(_QWORD *)(v196 + 8 * (v122 + 3));
                if (v123)
                {
                  v122 += 3;
                  goto LABEL_94;
                }
                v124 = v122 + 4;
                v110 = v122 + 3;
                if (v122 + 4 < v115)
                {
                  v123 = *(_QWORD *)(v196 + 8 * v124);
                  if (v123)
                  {
LABEL_97:
                    v122 = v124;
LABEL_94:
                    v114 = (v123 - 1) & v123;
                    v118 = __clz(__rbit64(v123)) + (v122 << 6);
                    v110 = v122;
                    goto LABEL_90;
                  }
                  while (1)
                  {
                    v122 = v124 + 1;
                    if (__OFADD__(v124, 1))
                      goto LABEL_184;
                    if (v122 >= v115)
                      break;
                    v123 = *(_QWORD *)(v196 + 8 * v122);
                    ++v124;
                    if (v123)
                      goto LABEL_94;
                  }
                  v110 = v115 - 1;
                }
              }
            }
          }
        }
        v114 = 0;
        v202 = 0u;
        memset(v201, 0, sizeof(v201));
      }
      v126 = v191;

      swift_release();
      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
      v127 = objc_allocWithZone((Class)NSError);
      v128 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v129 = objc_msgSend(v127, sel_initWithDomain_code_userInfo_, v128, 513, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v130 = objc_msgSend(v129, sel_domain);
      v131 = static String._unconditionallyBridgeFromObjectiveC(_:)(v130);
      v81 = v132;

      if (v131 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v81 == v133)
        goto LABEL_171;
      v20 = (uint64_t)v133;
      v135 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v9 = v192;
      if ((v135 & 1) != 0)
        goto LABEL_172;
      __break(1u);
LABEL_119:
      v136 = objc_msgSend(v81, sel_count);
      if (v136)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
        v20 = static _DictionaryStorage.allocate(capacity:)();
      }
      v138 = *(_QWORD **)(v20 + 48);
      v137 = *(_QWORD *)(v20 + 56);
      swift_retain();
      v139 = (int64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v138, v137, v81, (uint64_t)v136);
      if ((v139 & 0x8000000000000000) == 0 && (uint64_t)v136 >= v139)
      {
        *(_QWORD *)(v20 + 16) = v139;
        if (v139)
        {
          v140 = v139 - 1;
          v141 = v20 + 64;
          do
          {
            while (1)
            {
              if (((*(_QWORD *)(v141 + (((unint64_t)v140 >> 3) & 0xFFFFFFFFFFFFF8)) >> v140) & 1) != 0)
                goto LABEL_126;
              v146 = (uint64_t *)(*(_QWORD *)(v20 + 48) + 16 * v140);
              v147 = *v146;
              v148 = v146[1];
              swift_bridgeObjectRetain();
              v149 = specialized __RawDictionaryStorage.find<A>(_:)(v147, v148);
              v151 = v150;
              swift_bridgeObjectRelease();
              if ((v151 & 1) == 0)
                break;
              swift_arrayDestroy();
              swift_arrayDestroy();
              v152 = *(_QWORD *)(v20 + 16);
              v56 = __OFSUB__(v152, 1);
              v153 = v152 - 1;
              if (v56)
                goto LABEL_181;
              *(_QWORD *)(v20 + 16) = v153;
LABEL_126:
              if (--v140 < 0)
                goto LABEL_134;
            }
            *(_QWORD *)(v141 + ((v149 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v149;
            if (v140 < (uint64_t)v149)
            {
              *(_OWORD *)(*(_QWORD *)(v20 + 48) + 16 * v149) = *(_OWORD *)(*(_QWORD *)(v20 + 48) + 16 * v140);
              v142 = *(_QWORD *)(v20 + 56);
              v143 = (_OWORD *)(v142 + 32 * v140);
              v144 = v143[1];
              v145 = (_OWORD *)(v142 + 32 * v149);
              *v145 = *v143;
              v145[1] = v144;
              goto LABEL_126;
            }
            if (v149 == v140)
              goto LABEL_126;
            v154 = *(_QWORD *)(v20 + 48);
            v155 = (uint64_t *)(v154 + 16 * v149);
            v156 = (uint64_t *)(v154 + 16 * v140);
            v157 = *v155;
            v158 = v155[1];
            v159 = v156[1];
            *v155 = *v156;
            v155[1] = v159;
            *v156 = v157;
            v156[1] = v158;
            v160 = *(_QWORD *)(v20 + 56);
            v161 = (_OWORD *)(v160 + 32 * v149);
            v162 = (_OWORD *)(v160 + 32 * v140);
            outlined init with take of Any(v161, &dst);
            outlined init with take of Any(v162, v161);
            outlined init with take of Any(&dst, v162);
          }
          while ((v140 & 0x8000000000000000) == 0);
        }
LABEL_134:
        swift_release();
        goto LABEL_135;
      }
LABEL_183:
      __break(1u);
LABEL_184:
      __break(1u);
LABEL_185:
      __break(1u);
    }
    v77 = v76;
    swift_unknownObjectRetain();
    v78 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (v78)
    {
      v20 = v78;
LABEL_83:

      goto LABEL_84;
    }
    v83 = objc_msgSend(v77, sel_count);
    if (v83)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v20 = static _DictionaryStorage.allocate(capacity:)();
    }
    v85 = *(_QWORD **)(v20 + 48);
    v84 = *(_QWORD *)(v20 + 56);
    swift_retain();
    v86 = (int64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v85, v84, v77, (uint64_t)v83);
    if ((v86 & 0x8000000000000000) == 0 && (uint64_t)v83 >= v86)
    {
      *(_QWORD *)(v20 + 16) = v86;
      if (!v86)
      {
LABEL_82:
        swift_release();
        goto LABEL_83;
      }
      v87 = v86 - 1;
      v88 = v20 + 64;
      while (1)
      {
        while (1)
        {
          if (((*(_QWORD *)(v88 + (((unint64_t)v87 >> 3) & 0xFFFFFFFFFFFFF8)) >> v87) & 1) != 0)
            goto LABEL_74;
          v93 = (uint64_t *)(*(_QWORD *)(v20 + 48) + 16 * v87);
          v94 = *v93;
          v95 = v93[1];
          swift_bridgeObjectRetain();
          v96 = specialized __RawDictionaryStorage.find<A>(_:)(v94, v95);
          v98 = v97;
          swift_bridgeObjectRelease();
          if ((v98 & 1) == 0)
            break;
          swift_arrayDestroy();
          swift_arrayDestroy();
          v99 = *(_QWORD *)(v20 + 16);
          v56 = __OFSUB__(v99, 1);
          v100 = v99 - 1;
          if (v56)
            goto LABEL_180;
          *(_QWORD *)(v20 + 16) = v100;
LABEL_74:
          if (--v87 < 0)
            goto LABEL_82;
        }
        *(_QWORD *)(v88 + ((v96 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v96;
        if (v87 < (uint64_t)v96)
        {
          *(_OWORD *)(*(_QWORD *)(v20 + 48) + 16 * v96) = *(_OWORD *)(*(_QWORD *)(v20 + 48) + 16 * v87);
          v89 = *(_QWORD *)(v20 + 56);
          v90 = (_OWORD *)(v89 + 32 * v87);
          v91 = v90[1];
          v92 = (_OWORD *)(v89 + 32 * v96);
          *v92 = *v90;
          v92[1] = v91;
          goto LABEL_74;
        }
        if (v96 == v87)
          goto LABEL_74;
        v101 = *(_QWORD *)(v20 + 48);
        v102 = (uint64_t *)(v101 + 16 * v96);
        v103 = (uint64_t *)(v101 + 16 * v87);
        v104 = *v102;
        v105 = v102[1];
        v106 = v103[1];
        *v102 = *v103;
        v102[1] = v106;
        *v103 = v104;
        v103[1] = v105;
        v107 = *(_QWORD *)(v20 + 56);
        v108 = (_OWORD *)(v107 + 32 * v96);
        v109 = (_OWORD *)(v107 + 32 * v87);
        outlined init with take of Any(v108, &dst);
        outlined init with take of Any(v109, v108);
        outlined init with take of Any(&dst, v109);
        if (v87 < 0)
          goto LABEL_82;
      }
    }
LABEL_182:
    __break(1u);
    goto LABEL_183;
  }
  __break(1u);
  return result;
}

uint64_t _FileOperations._FileRemoveContext.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for _FileOperations._FileRemoveContext()
{
  return objc_opt_self();
}

uint64_t @objc closure #1 in closure #1 in static _FileOperations._removeFile(_:_:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;

  swift_retain();
  v4 = String.init(cString:)();
  v6 = v5;
  v7 = *(void **)(a3 + 24);
  if (v7)
  {
    v8 = v4;
    v9 = v7;
    LODWORD(v8) = NSFileManager._shouldRemoveItemAtPath(_:)(v8, v6);

    swift_release();
    swift_bridgeObjectRelease();
    return ~(_DWORD)v8 & 1;
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
    return 0;
  }
}

uint64_t closure #2 in closure #1 in static _FileOperations._removeFile(_:_:with:)(_removefile_state *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  Swift::Int32 v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  id v21;
  _QWORD *v22;
  uint64_t v23;
  int64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  _OWORD *v29;
  __int128 v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  _OWORD *v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  int64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  int64_t v61;
  unint64_t v62;
  int64_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  id v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v73;
  void *v74;
  id v75;
  id v76;
  unsigned __int8 v77;
  uint64_t v78;
  void *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  __int128 v86;
  _OWORD v87[3];
  __int128 dst;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  swift_retain();
  v5 = String.init(cString:)();
  v7 = v6;
  LODWORD(dst) = 0;
  removefile_state_get(a1, 5u, &dst);
  v8 = dst;
  v9 = MEMORY[0x1E0DEE9E0];
  v84 = MEMORY[0x1E0DEE9E0];
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
  v12 = v11;
  *(_QWORD *)&v87[0] = v5;
  *((_QWORD *)&v87[0] + 1) = v7;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)&dst, (uint64_t)v10, v12);
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
  v15 = v14;
  URL.init(_fileManagerFailableFileURLWithPath:)(v5, v7, (uint64_t)v87);
  if (*(_QWORD *)&v87[0])
  {
    v85 = *(id *)&v87[0];
    v86 = *(_OWORD *)((char *)v87 + 8);
    lazy protocol witness table accessor for type URL and conformance URL();
    AnyHashable.init<A>(_:)();
  }
  else
  {
    dst = 0u;
    v89 = 0u;
    v90 = 0;
  }
  specialized Dictionary.subscript.setter((uint64_t)&dst, (uint64_t)v13, v15);
  static CocoaError._errorWithErrno(_:reading:variant:userInfo:)(v8, 0, 0x65766F6D6552, 0xE600000000000000, v84, &v85);
  swift_bridgeObjectRelease();
  v16 = v85;
  if (v8 != 66)
    goto LABEL_59;
  v17 = v85;
  v18 = objc_msgSend(v17, sel_userInfo);
  v82 = v7;
  v83 = a3;
  v80 = v17;
  v81 = v5;
  if (!v18)
    goto LABEL_25;
  v19 = v18;
  swift_unknownObjectRetain();
  v20 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (!v20)
  {
    v21 = objc_msgSend(v19, sel_count);
    if (v21)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v9 = static _DictionaryStorage.allocate(capacity:)();
    }
    v22 = *(_QWORD **)(v9 + 48);
    v23 = *(_QWORD *)(v9 + 56);
    swift_retain();
    v24 = (int64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v22, v23, v19, (uint64_t)v21);
    if (v24 < 0 || (uint64_t)v21 < v24)
      goto LABEL_69;
    *(_QWORD *)(v9 + 16) = v24;
    if (!v24)
    {
LABEL_23:
      swift_release();
      goto LABEL_24;
    }
    v25 = v24 - 1;
    v26 = v9 + 64;
    while (1)
    {
      if (((*(_QWORD *)(v26 + (((unint64_t)v25 >> 3) & 0xFFFFFFFFFFFFF8)) >> v25) & 1) != 0)
        goto LABEL_15;
      v31 = (uint64_t *)(*(_QWORD *)(v9 + 48) + 16 * v25);
      v32 = *v31;
      v33 = v31[1];
      swift_bridgeObjectRetain();
      v34 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v33);
      v36 = v35;
      swift_bridgeObjectRelease();
      if ((v36 & 1) != 0)
      {
        swift_arrayDestroy();
        swift_arrayDestroy();
        v37 = *(_QWORD *)(v9 + 16);
        v38 = __OFSUB__(v37, 1);
        v39 = v37 - 1;
        if (v38)
          goto LABEL_67;
        *(_QWORD *)(v9 + 16) = v39;
        goto LABEL_15;
      }
      *(_QWORD *)(v26 + ((v34 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v34;
      if (v25 < (uint64_t)v34)
      {
        *(_OWORD *)(*(_QWORD *)(v9 + 48) + 16 * v34) = *(_OWORD *)(*(_QWORD *)(v9 + 48) + 16 * v25);
        v27 = *(_QWORD *)(v9 + 56);
        v28 = (_OWORD *)(v27 + 32 * v34);
        v29 = (_OWORD *)(v27 + 32 * v25);
        v30 = v29[1];
        *v28 = *v29;
        v28[1] = v30;
LABEL_15:
        if (--v25 < 0)
          goto LABEL_23;
      }
      else
      {
        if (v34 == v25)
          goto LABEL_15;
        v40 = *(_QWORD *)(v9 + 48);
        v41 = (uint64_t *)(v40 + 16 * v34);
        v42 = (uint64_t *)(v40 + 16 * v25);
        v43 = *v41;
        v44 = v41[1];
        v45 = v42[1];
        *v41 = *v42;
        v41[1] = v45;
        *v42 = v43;
        v42[1] = v44;
        v46 = *(_QWORD *)(v9 + 56);
        v47 = (_OWORD *)(v46 + 32 * v34);
        v48 = (_OWORD *)(v46 + 32 * v25);
        outlined init with take of Any(v47, &dst);
        outlined init with take of Any(v48, v47);
        outlined init with take of Any(&dst, v48);
        if (v25 < 0)
          goto LABEL_23;
      }
    }
  }
  v9 = v20;
LABEL_24:

LABEL_25:
  v49 = 0;
  v50 = v9 + 64;
  v51 = 1 << *(_BYTE *)(v9 + 32);
  v52 = -1;
  if (v51 < 64)
    v52 = ~(-1 << v51);
  v53 = v52 & *(_QWORD *)(v9 + 64);
  v54 = (unint64_t)(v51 + 63) >> 6;
  if (!v53)
    goto LABEL_32;
LABEL_30:
  v56 = __clz(__rbit64(v53));
  v53 &= v53 - 1;
  v57 = v56 | (v49 << 6);
LABEL_31:
  v58 = *(_QWORD *)(v9 + 56);
  v59 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v57);
  v60 = v59[1];
  *(_QWORD *)&v87[0] = *v59;
  *((_QWORD *)&v87[0] + 1) = v60;
  outlined init with copy of Any(v58 + 32 * v57, (uint64_t)&v87[1]);
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with take of (key: String, value: Any)?((uint64_t)v87, (uint64_t)&dst);
    v64 = *((_QWORD *)&dst + 1);
    if (!*((_QWORD *)&dst + 1))
      break;
    v55 = dst;
    outlined init with take of Any(&v89, v87);
    specialized Dictionary.subscript.setter((uint64_t)v87, v55, v64);
    if (v53)
      goto LABEL_30;
LABEL_32:
    v61 = v49 + 1;
    if (__OFADD__(v49, 1))
    {
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
    }
    if (v61 < v54)
    {
      v62 = *(_QWORD *)(v50 + 8 * v61);
      if (v62)
        goto LABEL_35;
      v63 = v49 + 2;
      ++v49;
      if (v61 + 1 < v54)
      {
        v62 = *(_QWORD *)(v50 + 8 * v63);
        if (v62)
          goto LABEL_38;
        v49 = v61 + 1;
        if (v61 + 2 < v54)
        {
          v62 = *(_QWORD *)(v50 + 8 * (v61 + 2));
          if (v62)
          {
            v61 += 2;
            goto LABEL_35;
          }
          v49 = v61 + 2;
          if (v61 + 3 < v54)
          {
            v62 = *(_QWORD *)(v50 + 8 * (v61 + 3));
            if (v62)
            {
              v61 += 3;
              goto LABEL_35;
            }
            v63 = v61 + 4;
            v49 = v61 + 3;
            if (v61 + 4 < v54)
            {
              v62 = *(_QWORD *)(v50 + 8 * v63);
              if (v62)
              {
LABEL_38:
                v61 = v63;
LABEL_35:
                v53 = (v62 - 1) & v62;
                v57 = __clz(__rbit64(v62)) + (v61 << 6);
                v49 = v61;
                goto LABEL_31;
              }
              while (1)
              {
                v61 = v63 + 1;
                if (__OFADD__(v63, 1))
                  goto LABEL_70;
                if (v61 >= v54)
                  break;
                v62 = *(_QWORD *)(v50 + 8 * v61);
                ++v63;
                if (v62)
                  goto LABEL_35;
              }
              v49 = v54 - 1;
            }
          }
        }
      }
    }
    v53 = 0;
    memset(v87, 0, sizeof(v87));
  }

  swift_release();
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v65 = objc_allocWithZone((Class)NSError);
  v66 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v16 = objc_msgSend(v65, sel_initWithDomain_code_userInfo_, v66, 513, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v67 = objc_msgSend(v16, sel_domain);
  v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v67);
  v70 = v69;

  if (v68 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) || v70 != v71)
  {
    v73 = _stringCompareWithSmolCheck(_:_:expecting:)();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v7 = v82;
    a3 = v83;
    v5 = v81;
    if ((v73 & 1) == 0)
      goto LABEL_68;
LABEL_59:
    v74 = *(void **)(a3 + 24);
    if (v74)
      goto LABEL_60;
LABEL_63:
    swift_bridgeObjectRelease();
    goto LABEL_64;
  }

  swift_bridgeObjectRelease_n();
  v7 = v82;
  a3 = v83;
  v5 = v81;
  v74 = *(void **)(v83 + 24);
  if (!v74)
    goto LABEL_63;
LABEL_60:
  v75 = v74;
  v76 = v16;
  v77 = NSFileManager._shouldProceedAfter(error:removingItemAtPath:)(v76, v5, v7);

  swift_bridgeObjectRelease();
  if ((v77 & 1) == 0)
  {
LABEL_64:
    v76 = *(id *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = v16;
    swift_release();
    v78 = 2;
    goto LABEL_65;
  }
  swift_release();
  v78 = 0;
LABEL_65:

  return v78;
}

void closure #1 in static _FileOperations.moveFile(_:to:with:options:)(std::__fs::filesystem::path *a1, char *a2, uint64_t *a3, uint64_t *a4, char *a5, __darwin_ino64_t a6, uint64_t *a7, uint64_t **a8)
{
  std::__fs::filesystem::path *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  uint64_t countAndFlagsBits;
  unint64_t object;
  _QWORD *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  _QWORD *v39;
  uint64_t **v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  _OWORD *v44;
  unint64_t v45;
  int64_t v46;
  unint64_t v47;
  int64_t v48;
  char *v49;
  uint64_t *v50;
  std::__fs::filesystem::path *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char v57;
  uint64_t *v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  id v64;
  id v65;
  char *v66;
  char *v67;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  unint64_t v75;
  Swift::String v76;
  void (*v77)(char *, _QWORD);
  unint64_t v78;
  unint64_t v79;
  _QWORD v80[4];
  _QWORD v81[10];
  uint64_t v82;
  _QWORD *v83;
  int64_t v84;
  uint64_t v85;
  char *v86;
  int64_t i;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  std::__fs::filesystem::path *v92;
  uint64_t v93;
  Swift::String v94;
  uint64_t *v95;
  _OWORD v96[2];
  Swift::String v97;
  uint64_t *v98;
  _QWORD *v99;

  if (a1)
  {
    v15 = a1;
    v99 = &v82;
    MEMORY[0x1E0C80A78](a1);
    i = (int64_t)v81;
    v81[2] = v16;
    v81[3] = v17;
    v81[4] = v18;
    v81[5] = v19;
    v81[6] = v20;
    v81[7] = a2;
    v81[8] = a3;
    v81[9] = a4;
    if ((_foundation_swift_url_feature_enabled() & 1) != 0)
    {
      v97._countAndFlagsBits = (uint64_t)a5;
      v97._object = (void *)a6;
      v98 = a7;
      swift_retain();
      v86 = a5;
      swift_retain();
      v21 = URL.path(percentEncoded:)(1);
      countAndFlagsBits = v21._countAndFlagsBits;
      v97 = v21;
      swift_bridgeObjectRetain();
      if (String.count.getter() <= 1)
      {
        object = (unint64_t)v21._object;
      }
      else
      {
        object = (unint64_t)v21._object;
        if ((specialized BidirectionalCollection.last.getter(v21._countAndFlagsBits, (unint64_t)v21._object) & 0x1FF) == 0x2F)
        {
          specialized RangeReplaceableCollection<>.popLast()();
          swift_bridgeObjectRelease();
          countAndFlagsBits = v97._countAndFlagsBits;
          object = (unint64_t)v97._object;
        }
      }
      v94._countAndFlagsBits = Set.init(minimumCapacity:)();
      v70 = specialized Set._Variant.insert(_:)(&v91, 0x2FuLL);
      v71 = v94._countAndFlagsBits;
      v72 = HIBYTE(object) & 0xF;
      if ((object & 0x2000000000000000) == 0)
        v72 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      if (v72)
      {
        v94._countAndFlagsBits = countAndFlagsBits;
        v94._object = (void *)object;
        MEMORY[0x1E0C80A78](v70);
        v80[2] = v73;
        v80[3] = v71;
        swift_bridgeObjectRetain();
        v74 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v80, countAndFlagsBits, object);
        if (v75 == 1)
        {
          v76 = v94;
          swift_bridgeObjectRetain();
          v77 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v76._countAndFlagsBits, (unint64_t)v76._object, v71);
          v79 = v78;
          swift_bridgeObjectRelease();
        }
        else
        {
          v77 = (void (*)(char *, _QWORD))v74;
          v79 = v75;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (!v79)
        {
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v77 = 0;
          v79 = 0xE000000000000000;
          goto LABEL_59;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        v77 = 0;
        v79 = 0xE000000000000000;
      }
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_59:
      _sSS10FoundationE28withFileSystemRepresentationyxxSPys4Int8VGSgKXEKlFyt_Tg5031_s10Foundation3URLV34withUnsafecd22RepresentationyxxSPys4F25VGSgKXEKlFxAHKXEfU_yt_Tg5AFxs5Error_pRi_zRi0_zlyytIsgyrzo_Tf1ncn_n((uint64_t)v77, v79, (uint64_t (*)(char *))partial apply for closure #1 in closure #1 in static _FileOperations.moveFile(_:to:with:options:));
      swift_bridgeObjectRelease();
      return;
    }
LABEL_45:
    v69 = objc_retainAutorelease(a5);
    closure #1 in closure #1 in static _FileOperations.moveFile(_:to:with:options:)((const std::__fs::filesystem::path *)objc_msgSend(v69, sel_fileSystemRepresentation), v69, a6, a7, a8, v15, a2, a3, (uint64_t)a4);
    return;
  }
  v24 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v91 = MEMORY[0x1E0DEE9E0];
  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
  v27 = v26;
  v94._countAndFlagsBits = (uint64_t)a2;
  v94._object = a3;
  v95 = a4;
  lazy protocol witness table accessor for type URL and conformance URL();
  v28 = a2;
  swift_retain();
  swift_retain();
  AnyHashable.init<A>(_:)();
  v15 = (std::__fs::filesystem::path *)&v91;
  specialized Dictionary.subscript.setter((uint64_t)&v97, (uint64_t)v25, v27);
  v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
  v31 = v30;
  v97._countAndFlagsBits = (uint64_t)v28;
  v97._object = a3;
  v98 = a4;
  v94 = URL.path(percentEncoded:)(0);
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)&v97, (uint64_t)v29, v31);
  v32 = v91;
  if (*(_QWORD *)(v91 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v24 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  v33 = *(_QWORD *)(v32 + 64);
  v85 = v32 + 64;
  v34 = -1;
  v35 = -1 << *(_BYTE *)(v32 + 32);
  v82 = ~v35;
  if (-v35 < 64)
    v34 = ~(-1 << -(char)v35);
  v36 = v34 & v33;
  v84 = (unint64_t)(63 - v35) >> 6;
  a3 = (uint64_t *)&v98;
  a4 = &v93;
  a8 = &v95;
  v83 = v24 + 8;
  swift_bridgeObjectRetain();
  i = 0;
  v86 = (char *)(MEMORY[0x1E0DEE9B8] + 8);
  if (v36)
    goto LABEL_13;
LABEL_14:
  v46 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_62;
  if (v46 >= v84)
    goto LABEL_39;
  v47 = *(_QWORD *)(v85 + 8 * v46);
  v48 = i + 1;
  if (!v47)
  {
    v48 = i + 2;
    if (i + 2 >= v84)
      goto LABEL_39;
    v47 = *(_QWORD *)(v85 + 8 * v48);
    if (!v47)
    {
      v48 = i + 3;
      if (i + 3 >= v84)
        goto LABEL_39;
      v47 = *(_QWORD *)(v85 + 8 * v48);
      if (!v47)
      {
        v48 = i + 4;
        if (i + 4 >= v84)
          goto LABEL_39;
        v47 = *(_QWORD *)(v85 + 8 * v48);
        if (!v47)
        {
          v48 = i + 5;
          if (i + 5 >= v84)
            goto LABEL_39;
          v47 = *(_QWORD *)(v85 + 8 * v48);
          if (!v47)
          {
            v48 = i + 6;
            if (i + 6 >= v84)
              goto LABEL_39;
            v47 = *(_QWORD *)(v85 + 8 * v48);
            if (!v47)
            {
              v49 = (char *)(i + 7);
              if (i + 7 < v84)
              {
                v47 = *(_QWORD *)(v85 + 8 * (_QWORD)v49);
                if (v47)
                {
                  v48 = i + 7;
                  goto LABEL_33;
                }
                while (1)
                {
                  v48 = (int64_t)(v49 + 1);
                  if (__OFADD__(v49, 1))
                    goto LABEL_63;
                  if (v48 >= v84)
                    break;
                  v47 = *(_QWORD *)(v85 + 8 * v48);
                  ++v49;
                  if (v47)
                    goto LABEL_33;
                }
              }
LABEL_39:
              outlined consume of Set<A1>.Iterator._Variant<A><A1>();
              swift_bridgeObjectRelease();
              static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
              v62 = objc_allocWithZone((Class)NSError);
              v63 = String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              v64 = objc_msgSend(v62, sel_initWithDomain_code_userInfo_, v63, 4, _NativeDictionary.bridged()(), v82);
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              a7 = (uint64_t *)objc_msgSend(v64, sel_domain);
              v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(a7);
              a5 = v66;

              if (v65 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"))
                && a5 == v67)
              {
                swift_bridgeObjectRelease_n();
              }
              else
              {
                a2 = v67;
                a6 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if ((a6 & 1) == 0)
                {
                  __break(1u);
                  goto LABEL_45;
                }
              }
              swift_willThrow();
              return;
            }
          }
        }
      }
    }
  }
LABEL_33:
  v99 = (_QWORD *)((v47 - 1) & v47);
  v45 = __clz(__rbit64(v47)) + (v48 << 6);
  for (i = v48; ; v45 = __clz(__rbit64(v36)) | (i << 6))
  {
    v50 = (uint64_t *)(*(_QWORD *)(v32 + 48) + 16 * v45);
    v52 = *v50;
    v51 = (std::__fs::filesystem::path *)v50[1];
    outlined init with copy of AnyHashable(*(_QWORD *)(v32 + 56) + 40 * v45, (uint64_t)a3);
    v97._countAndFlagsBits = v52;
    v97._object = v51;
    v53 = *((_OWORD *)a3 + 1);
    v88 = *(_OWORD *)a3;
    v89 = v53;
    v90 = a3[4];
    v91 = v52;
    v92 = v51;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    v54 = v91;
    v15 = v92;
    outlined init with take of Any(a4, a8);
    outlined init with take of Any(a8, v96);
    outlined init with take of Any(v96, &v94);
    v55 = specialized __RawDictionaryStorage.find<A>(_:)(v54, (uint64_t)v15);
    v56 = v55;
    if ((v57 & 1) != 0)
    {
      v37 = v24[6];
      v38 = a3;
      v39 = v24;
      v40 = a8;
      v41 = a4;
      v42 = v32;
      v43 = (uint64_t *)(v37 + 16 * v55);
      swift_bridgeObjectRelease();
      *v43 = v54;
      v43[1] = (uint64_t)v15;
      v32 = v42;
      a4 = v41;
      a8 = v40;
      v24 = v39;
      a3 = v38;
      v44 = (_OWORD *)(v24[7] + 32 * v56);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
      outlined init with take of Any(&v94, v44);
      v36 = (unint64_t)v99;
      if (!v99)
        goto LABEL_14;
      goto LABEL_13;
    }
    if (v24[2] >= v24[3])
      break;
    *(_QWORD *)((char *)v83 + ((v55 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v55;
    v58 = (uint64_t *)(v24[6] + 16 * v55);
    *v58 = v54;
    v58[1] = (uint64_t)v15;
    outlined init with take of Any(&v94, (_OWORD *)(v24[7] + 32 * v55));
    v59 = v24[2];
    v60 = __OFADD__(v59, 1);
    v61 = v59 + 1;
    if (v60)
      goto LABEL_61;
    v24[2] = v61;
    v36 = (unint64_t)v99;
    if (!v99)
      goto LABEL_14;
LABEL_13:
    v99 = (_QWORD *)((v36 - 1) & v36);
  }
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
}

void closure #1 in closure #1 in static _FileOperations.moveFile(_:to:with:options:)(const std::__fs::filesystem::path *a1, void *a2, __darwin_ino64_t a3, _OWORD *a4, void *a5, std::__fs::filesystem::path *a6, char *a7, uint64_t *a8, uint64_t a9)
{
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t object;
  std::error_code *v22;
  int v23;
  const std::__fs::filesystem::path *v24;
  uint64_t v25;
  uint64_t p_st_uid;
  std::__fs::filesystem::path *v27;
  std::__fs::filesystem::path *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  std::string::pointer data;
  uint64_t v41;
  std::__fs::filesystem::path *v42;
  _OWORD *v43;
  uint64_t *v44;
  uint64_t *v45;
  _OWORD *v46;
  unint64_t i;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t *v52;
  __darwin_ino64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char v59;
  uint64_t *v60;
  std::string::size_type v61;
  BOOL v62;
  std::string::size_type v63;
  id v64;
  uint64_t v65;
  id v66;
  id v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v73;
  char *v74;
  char *v75;
  Swift::String v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  std::__fs::filesystem::path *v80;
  _QWORD *v81;
  unint64_t v82;
  Swift::String v83;
  void (*v84)(char *, _QWORD);
  unint64_t v85;
  unint64_t v86;
  _OWORD *v87;
  id v88;
  char *v89;
  void *Path;
  id v91;
  uint64_t v92;
  void *v93;
  void *v94;
  std::__fs::filesystem::path *v95;
  id v96;
  uint64_t v97;
  id v98;
  char v99;
  Swift::String v100;
  uint64_t v101;
  uint64_t v102;
  Swift::String v103;
  uint64_t v104;
  std::__fs::filesystem::path *v105;
  _QWORD *v106;
  unint64_t v107;
  Swift::String v108;
  void (*v109)(char *, _QWORD);
  unint64_t v110;
  unint64_t v111;
  id v112;
  void *v113;
  unint64_t v114;
  unint64_t v115;
  void *v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  id v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  int v136;
  int v137;
  Swift::Int32 v138;
  Swift::Int32 v139;
  char v140;
  id v141;
  std::__fs::filesystem::path *v142;
  char *v143;
  uint64_t *v144;
  int v145;
  std::__fs::filesystem::path *v146;
  char *v147;
  Swift::String v148;
  uint64_t v149;
  uint64_t v150;
  Swift::String v151;
  uint64_t v152;
  _QWORD *v153;
  _QWORD *v154;
  Swift::String v155;
  _QWORD *v156;
  _QWORD *v157;
  char *v158;
  uint64_t *v159;
  void *v160;
  char *v161;
  char *v162;
  Swift::String v163;
  uint64_t v164;
  uint64_t v165;
  Swift::String v166;
  uint64_t v167;
  std::__fs::filesystem::path *v168;
  _QWORD *v169;
  unint64_t v170;
  Swift::String v171;
  unint64_t v172;
  unint64_t v173;
  _QWORD *v174;
  void *v175;
  uint64_t *v176;
  uint64_t v177;
  Swift::Int v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  Swift::Int v184;
  id v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  id v189;
  void *v190;
  std::__fs::filesystem::path *v191;
  id v192;
  void *v193;
  void *v194;
  id v195;
  void *v196;
  id v197;
  void *v198;
  void *v199;
  Swift::String v200;
  Swift::String v201;
  id v202;
  id v203;
  void *v204;
  id v205;
  void *v206;
  void *v207;
  id v208;
  void *v209;
  id v210;
  uint64_t v211;
  void *v212;
  void *v213;
  Swift::String v214;
  Swift::String v215;
  uint64_t v216;
  uint64_t v217;
  char v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  id v223;
  void *v224;
  id v225;
  uint64_t v226;
  uint64_t v227;
  void *v228;
  void *v229;
  _QWORD *v230;
  void *v231;
  uint64_t v232;
  id v233;
  id v234;
  id v235;
  uint64_t j;
  void *v237;
  Swift::Int v238;
  uint64_t v239;
  unint64_t v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  id v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  char v249;
  uint64_t v250;
  id v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  char v256;
  id v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  char v261;
  id v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  char v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  id v272;
  void *v273;
  uint64_t v274;
  id v275;
  Swift::String v276;
  uint64_t v277;
  void *v278;
  id v279;
  Swift::String v280;
  id v281;
  void *v282;
  unint64_t v283;
  id v284;
  void *v285;
  id v286;
  void *v287;
  char v288;
  id v289;
  Swift::String v290;
  uint64_t v291;
  uint64_t v292;
  Swift::String v293;
  uint64_t v294;
  std::__fs::filesystem::path *v295;
  _QWORD *v296;
  unint64_t v297;
  Swift::String v298;
  uint64_t v299;
  unint64_t v300;
  unint64_t v301;
  id v302;
  void *v303;
  id v304;
  void *v305;
  void *v306;
  id v307;
  void *v308;
  id v309;
  void *v310;
  void *v311;
  Swift::String v312;
  Swift::String v313;
  Swift::String v314;
  id v315;
  void *v316;
  unint64_t v317;
  void *v318;
  unsigned __int8 v319;
  Swift::String v320;
  _QWORD *v321;
  id v322;
  void *v323;
  id v324;
  _QWORD *v325;
  id v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  char v330;
  std::__fs::filesystem::path *v331;
  void *v332;
  void *v333;
  id v334;
  char v335;
  id v336;
  char v337;
  id v338;
  Swift::String v339;
  uint64_t v340;
  uint64_t v341;
  Swift::String v342;
  uint64_t v343;
  std::__fs::filesystem::path *v344;
  _QWORD *v345;
  unint64_t v346;
  Swift::String v347;
  uint64_t v348;
  unint64_t v349;
  unint64_t v350;
  id v351;
  void *v352;
  id v353;
  void *v354;
  void *v355;
  id v356;
  void *v357;
  id v358;
  void *v359;
  void *v360;
  void *v361;
  Swift::String v362;
  Swift::String v363;
  Swift::String v364;
  uint64_t v365;
  id v366;
  unint64_t v367;
  unint64_t v368;
  uint64_t v369;
  Swift::String *v370;
  Swift::String *v371;
  std::__fs::filesystem::path *v372;
  std::__fs::filesystem::path *v373;
  void *v374;
  _OWORD *v375;
  uint64_t v376;
  char *v377;
  char *v378;
  id v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  void *v383;
  id *v384;
  id *v385;
  void *v386;
  uint64_t v387;
  void *v388;
  void *v389;
  void *v390;
  uint64_t v391;
  void *v392;
  void *v393;
  void *v394;
  uint64_t v395;
  id v396;
  uint64_t v397;
  int v398;
  uint64_t v399;
  std::__fs::filesystem::path *v400;
  uint64_t *v401;
  Swift::String v402;
  uint64_t v403;
  _OWORD *v404;
  uint64_t v405;
  uint64_t v406;
  Swift::String v407;
  uint64_t v408;
  _QWORD *v409;
  char *v410;
  Swift::String v411;
  uint64_t v412;
  char *v413;
  char *v414;
  std::__fs::filesystem::path *v415;
  id v416;
  void *v417;
  id v418;
  void *v419;
  void *v420;
  id v421;
  void *v422;
  id v423;
  void *v424;
  void *v425;
  Swift::String v426;
  Swift::String v427;
  Swift::String v428;
  id v429;
  void *v430;
  char *v431;
  char v432;
  id v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  id v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  char v442;
  std::__fs::filesystem::path *v443;
  uint64_t v444;
  id v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  void *v449;
  id *v450;
  id *v451;
  void *v452;
  uint64_t v453;
  void *v454;
  void *v455;
  void *v456;
  uint64_t v457;
  void *v458;
  void *v459;
  void *v460;
  uint64_t v461;
  _QWORD v462[4];
  _QWORD v463[2];
  Swift::String *v464;
  Swift::String *v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  id v469;
  void *v470;
  id v471;
  char *v472;
  _OWORD *v473;
  const std::__fs::filesystem::path *v474;
  uint64_t v475;
  id v476;
  __darwin_ino64_t v477;
  uint64_t *v478;
  uint64_t v479;
  uint64_t v480;
  char *v481;
  std::__fs::filesystem::path *v482;
  uint64_t v483;
  _QWORD *countAndFlagsBits;
  uint64_t v485;
  std::__fs::filesystem::path *v486;
  Swift::String v487;
  uint64_t v488;
  stat v489;
  Swift::String v490;
  __int128 v491;
  uint64_t v492;
  Swift::String v493;
  uint64_t v494;
  Swift::String v495;
  uint64_t v496;
  uint64_t v497;

  v497 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v28 = (std::__fs::filesystem::path *)MEMORY[0x1E0DEE9E0];
    v493._countAndFlagsBits = MEMORY[0x1E0DEE9E0];
    v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
    v31 = v30;
    v488 = (uint64_t)a4;
    lazy protocol witness table accessor for type URL and conformance URL();
    v32 = a2;
    swift_retain();
    swift_retain();
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v489, (uint64_t)v29, v31);
    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
    object = v34;
    *(_QWORD *)&v489.st_dev = v32;
    v489.st_ino = a3;
    *(_QWORD *)&v489.st_uid = a4;
    v487 = URL.path(percentEncoded:)(0);
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v489, (uint64_t)v33, object);
    countAndFlagsBits = (_QWORD *)v493._countAndFlagsBits;
    if (*(_QWORD *)(v493._countAndFlagsBits + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v28 = (std::__fs::filesystem::path *)static _DictionaryStorage.allocate(capacity:)();
    }
    v35 = countAndFlagsBits[8];
    v482 = (std::__fs::filesystem::path *)(countAndFlagsBits + 8);
    v36 = -1;
    v37 = -1 << *((_BYTE *)countAndFlagsBits + 32);
    v479 = ~v37;
    if (-v37 < 64)
      v36 = ~(-1 << -(char)v37);
    v38 = v36 & v35;
    p_st_uid = (uint64_t)&v489.st_uid;
    v39 = &v494;
    v25 = (uint64_t)&v488;
    v480 = (uint64_t)&v28[2].__pn_.__r_.__value_.__r.__words[2];
    v481 = (char *)((unint64_t)(63 - v37) >> 6);
    swift_bridgeObjectRetain();
    v485 = 0;
    v483 = MEMORY[0x1E0DEE9B8] + 8;
    if (v38)
      goto LABEL_12;
LABEL_13:
    v48 = (char *)(v485 + 1);
    if (__OFADD__(v485, 1))
    {
      __break(1u);
LABEL_249:
      v487._countAndFlagsBits = (uint64_t)v28;
      v487._object = (void *)p_st_uid;
      v335 = URLResourceValues.volumeSupportsCaseSensitiveNames.getter();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v335 != 2)
      {
        p_st_uid = v477;
        if ((v335 & 1) != 0)
          goto LABEL_87;
        v23 = 0;
        v27 = v486;
        goto LABEL_89;
      }
      goto LABEL_334;
    }
    if ((uint64_t)v48 < (uint64_t)v481)
    {
      v49 = v482->__pn_.__r_.__value_.__r.__words[(_QWORD)v48];
      v50 = v485 + 1;
      if (v49)
        goto LABEL_32;
      v50 = v485 + 2;
      if (v485 + 2 >= (uint64_t)v481)
        goto LABEL_38;
      v49 = v482->__pn_.__r_.__value_.__r.__words[v50];
      if (v49)
        goto LABEL_32;
      v50 = v485 + 3;
      if (v485 + 3 >= (uint64_t)v481)
        goto LABEL_38;
      v49 = v482->__pn_.__r_.__value_.__r.__words[v50];
      if (v49)
        goto LABEL_32;
      v50 = v485 + 4;
      if (v485 + 4 >= (uint64_t)v481)
        goto LABEL_38;
      v49 = v482->__pn_.__r_.__value_.__r.__words[v50];
      if (v49)
        goto LABEL_32;
      v50 = v485 + 5;
      if (v485 + 5 >= (uint64_t)v481)
        goto LABEL_38;
      v49 = v482->__pn_.__r_.__value_.__r.__words[v50];
      if (v49)
        goto LABEL_32;
      v50 = v485 + 6;
      if (v485 + 6 >= (uint64_t)v481)
        goto LABEL_38;
      v49 = v482->__pn_.__r_.__value_.__r.__words[v50];
      if (v49)
      {
LABEL_32:
        v485 = v50;
        v486 = (std::__fs::filesystem::path *)((v49 - 1) & v49);
        for (i = __clz(__rbit64(v49)) + (v50 << 6); ; i = __clz(__rbit64(v38)) | (v485 << 6))
        {
          v52 = (uint64_t *)(countAndFlagsBits[6] + 16 * i);
          v54 = *v52;
          v53 = v52[1];
          outlined init with copy of AnyHashable(countAndFlagsBits[7] + 40 * i, p_st_uid);
          *(_QWORD *)&v489.st_dev = v54;
          v489.st_ino = v53;
          v55 = *(_OWORD *)(p_st_uid + 16);
          v490 = *(Swift::String *)p_st_uid;
          v491 = v55;
          v492 = *(_QWORD *)(p_st_uid + 32);
          v493._countAndFlagsBits = v54;
          v493._object = (void *)v53;
          swift_bridgeObjectRetain();
          swift_dynamicCast();
          object = (uint64_t)v493._object;
          v56 = v493._countAndFlagsBits;
          outlined init with take of Any(v39, (_OWORD *)v25);
          outlined init with take of Any((_OWORD *)v25, &v495);
          outlined init with take of Any(&v495, &v487);
          v57 = specialized __RawDictionaryStorage.find<A>(_:)(v56, object);
          v58 = v57;
          if ((v59 & 1) != 0)
          {
            data = v28[2].__pn_.__r_.__value_.__l.__data_;
            v41 = p_st_uid;
            v42 = v28;
            v43 = (_OWORD *)v25;
            v44 = v39;
            v45 = (uint64_t *)&data[16 * v57];
            swift_bridgeObjectRelease();
            *v45 = v56;
            v45[1] = object;
            v39 = v44;
            v25 = (uint64_t)v43;
            v28 = v42;
            p_st_uid = v41;
            v46 = (_OWORD *)(v28[2].__pn_.__r_.__value_.__l.__size_ + 32 * v58);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
            outlined init with take of Any(&v487, v46);
            v38 = (unint64_t)v486;
            if (!v486)
              goto LABEL_13;
          }
          else
          {
            if (v28->__pn_.__r_.__value_.__r.__words[2] >= v28[1].__pn_.__r_.__value_.__r.__words[0])
            {
              __break(1u);
LABEL_235:
              __break(1u);
LABEL_236:
              swift_release();
              swift_release();
              v331 = v486;

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              countAndFlagsBits = (_QWORD *)0xE000000000000000;
              v485 = 0;
              goto LABEL_237;
            }
            *(_QWORD *)(v480 + ((v57 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v57;
            v60 = (uint64_t *)(v28[2].__pn_.__r_.__value_.__r.__words[0] + 16 * v57);
            *v60 = v56;
            v60[1] = object;
            outlined init with take of Any(&v487, (_OWORD *)(v28[2].__pn_.__r_.__value_.__l.__size_ + 32 * v57));
            v61 = v28->__pn_.__r_.__value_.__r.__words[2];
            v62 = __OFADD__(v61, 1);
            v63 = v61 + 1;
            if (v62)
              goto LABEL_235;
            v28->__pn_.__r_.__value_.__r.__words[2] = v63;
            v38 = (unint64_t)v486;
            if (!v486)
              goto LABEL_13;
          }
LABEL_12:
          v486 = (std::__fs::filesystem::path *)((v38 - 1) & v38);
        }
      }
      v51 = (char *)(v485 + 7);
      if (v485 + 7 < (uint64_t)v481)
      {
        v49 = v482->__pn_.__r_.__value_.__r.__words[(_QWORD)v51];
        if (v49)
        {
          v50 = v485 + 7;
          goto LABEL_32;
        }
        while (1)
        {
          v50 = (uint64_t)(v51 + 1);
          if (__OFADD__(v51, 1))
            goto LABEL_329;
          if (v50 >= (uint64_t)v481)
            break;
          v49 = v482->__pn_.__r_.__value_.__r.__words[v50];
          ++v51;
          if (v49)
            goto LABEL_32;
        }
      }
    }
LABEL_38:
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v64 = objc_allocWithZone((Class)NSError);
    v65 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v66 = objc_msgSend(v64, sel_initWithDomain_code_userInfo_, v65, 4, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v67 = objc_msgSend(v66, sel_domain);
    v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v67);
    v70 = v69;

    if (v68 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v70 == v71)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v73 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v73 & 1) == 0)
      {
        __break(1u);
        return;
      }
    }
    swift_willThrow();
    return;
  }
  v481 = a7;
  v482 = a6;
  v483 = (uint64_t)a2;
  v16 = String.init(cString:)();
  v18 = v17;
  v19 = String.init(cString:)();
  LOBYTE(v16) = NSFileManager._shouldCopyItemAtPath(_:to:)(v16, v18, v19, v20, (SEL *)&selRef_fileManager_shouldMoveItemAtURL_toURL_, (SEL *)&selRef_fileManager_shouldMoveItemAtPath_toPath_);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v16 & 1) == 0)
    return;
  v476 = a5;
  v478 = a8;
  object = a9;
  memset(&v489, 0, 28);
  memset(&v489.st_atimespec, 0, 112);
  v474 = a1;
  v477 = a3;
  v475 = a9;
  if (lstat((const char *)a1, &v489))
  {
    v23 = 0;
    v24 = v482;
    v25 = (uint64_t)a4;
    p_st_uid = a3;
    v27 = v486;
    goto LABEL_90;
  }
  swift_retain();
  v74 = v481;
  swift_retain();
  v472 = v74;
  v473 = a4;
  if (_foundation_swift_url_feature_enabled())
  {
    v488 = a9;
    v75 = v74;
    swift_retain();
    swift_retain();
    v76 = URL.path(percentEncoded:)(1);
    v487 = v76;
    swift_bridgeObjectRetain();
    if (String.count.getter() > 1
      && (specialized BidirectionalCollection.last.getter(v76._countAndFlagsBits, (unint64_t)v76._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }
    v485 = (uint64_t)v75;
    v493._countAndFlagsBits = Set.init(minimumCapacity:)();
    v77 = specialized Set._Variant.insert(_:)(&v490, 0x2FuLL);
    v78 = v493._countAndFlagsBits;
    v79 = ((unint64_t)v487._object >> 56) & 0xF;
    if (((uint64_t)v487._object & 0x2000000000000000) == 0)
      v79 = v487._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (v79)
    {
      v493 = v487;
      MEMORY[0x1E0C80A78](v77);
      v464 = &v493;
      v465 = (Swift::String *)v78;
      swift_bridgeObjectRetain();
      v80 = v486;
      v81 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v463, v487._countAndFlagsBits, (unint64_t)v487._object);
      v486 = v80;
      if (v82 == 1)
      {
        v83 = v493;
        swift_bridgeObjectRetain();
        v84 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v83._countAndFlagsBits, (unint64_t)v83._object, v78);
        v86 = v85;
        swift_bridgeObjectRelease();
      }
      else
      {
        v84 = (void (*)(char *, _QWORD))v81;
        v86 = v82;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v87 = v473;
      if (!v86)
      {
        swift_release();
        swift_release();
        v96 = (id)v485;

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v84 = 0;
        v86 = 0xE000000000000000;
        goto LABEL_65;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      v84 = 0;
      v86 = 0xE000000000000000;
      v87 = v473;
    }
    swift_release();
    swift_release();
    v96 = (id)v485;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_65:
    swift_bridgeObjectRetain();
    Path = (void *)String._lastPathComponent.getter((uint64_t)v84, v86);
    v485 = v97;
    swift_release();
    swift_release();

    swift_bridgeObjectRelease_n();
    v94 = (void *)v477;
    v95 = v486;
    v93 = (void *)v483;
    goto LABEL_66;
  }
  v87 = a4;
  v88 = objc_msgSend(v74, sel_lastPathComponent);
  v89 = v74;
  Path = v88;
  if (v88)
  {
    v91 = static String._unconditionallyBridgeFromObjectiveC(_:)(v88);
    v485 = v92;
    swift_release();
    swift_release();

    Path = v91;
  }
  else
  {
    swift_release();
    swift_release();

    v485 = 0xE000000000000000;
  }
  v93 = (void *)v483;
  v94 = (void *)a3;
  v95 = v486;
LABEL_66:
  swift_retain();
  v98 = v93;
  swift_retain();
  v99 = _foundation_swift_url_feature_enabled();
  v486 = v95;
  v471 = v98;
  if ((v99 & 1) != 0)
  {
    v480 = (uint64_t)Path;
    v487._countAndFlagsBits = (uint64_t)v98;
    v487._object = v94;
    v488 = (uint64_t)v87;
    countAndFlagsBits = v98;
    swift_retain();
    swift_retain();
    v100 = URL.path(percentEncoded:)(1);
    v487 = v100;
    swift_bridgeObjectRetain();
    if (String.count.getter() > 1
      && (specialized BidirectionalCollection.last.getter(v100._countAndFlagsBits, (unint64_t)v100._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }
    v493._countAndFlagsBits = Set.init(minimumCapacity:)();
    v101 = specialized Set._Variant.insert(_:)(&v490, 0x2FuLL);
    v102 = v493._countAndFlagsBits;
    v103 = v487;
    v104 = ((unint64_t)v487._object >> 56) & 0xF;
    if (((uint64_t)v487._object & 0x2000000000000000) == 0)
      v104 = v487._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (v104)
    {
      v493 = v487;
      MEMORY[0x1E0C80A78](v101);
      v464 = &v493;
      v465 = (Swift::String *)v102;
      swift_bridgeObjectRetain();
      v105 = v486;
      v106 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v463, v103._countAndFlagsBits, (unint64_t)v103._object);
      v486 = v105;
      if (v107 == 1)
      {
        v108 = v493;
        swift_bridgeObjectRetain();
        v109 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v108._countAndFlagsBits, (unint64_t)v108._object, v102);
        v111 = v110;
        swift_bridgeObjectRelease();
      }
      else
      {
        v109 = (void (*)(char *, _QWORD))v106;
        v111 = v107;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v116 = countAndFlagsBits;
      if (!v111)
      {
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v109 = 0;
        v111 = 0xE000000000000000;
        goto LABEL_83;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      v109 = 0;
      v111 = 0xE000000000000000;
      v116 = countAndFlagsBits;
    }
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_83:
    swift_bridgeObjectRetain();
    countAndFlagsBits = (_QWORD *)String._lastPathComponent.getter((uint64_t)v109, v111);
    v115 = v117;
    swift_release();
    swift_release();

    swift_bridgeObjectRelease_n();
    Path = (void *)v480;
    goto LABEL_84;
  }
  v112 = objc_msgSend(v98, sel_lastPathComponent);
  if (v112)
  {
    v113 = v112;
    countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(v112);
    v115 = v114;
    swift_release();
    swift_release();

  }
  else
  {
    swift_release();
    swift_release();

    countAndFlagsBits = 0;
    v115 = 0xE000000000000000;
  }
LABEL_84:
  v487._countAndFlagsBits = (uint64_t)Path;
  v487._object = (void *)v485;
  swift_bridgeObjectRetain();
  v118 = Substring.init<A>(_:)();
  v120 = v119;
  v122 = v121;
  v124 = v123;
  v487._countAndFlagsBits = (uint64_t)countAndFlagsBits;
  v487._object = (void *)v115;
  swift_bridgeObjectRetain();
  v125 = Substring.init<A>(_:)();
  v129 = specialized _StringCompareOptionsIterable._compare<A>(_:toHalfWidth:diacriticsInsensitive:caseFold:numeric:forceOrdering:)(v125, v126, v127, v128, 0, 0, 1, 0, 0, v118, v120, v122, v124);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v129)
  {
    p_st_uid = v477;
    v39 = v478;
LABEL_86:
    v25 = (uint64_t)v473;
    object = v475;
    goto LABEL_87;
  }
  v468 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSURLResourceKey>);
  v174 = (_QWORD *)swift_allocObject();
  v175 = (void *)*MEMORY[0x1E0C99AA0];
  countAndFlagsBits = v174;
  v174[4] = v175;
  v176 = v174 + 4;
  v479 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<NSURLResourceKey>);
  v177 = static _SetStorage.allocate(capacity:)();
  p_st_uid = v177 + 56;
  v480 = (uint64_t)v176;
  v25 = *v176;
  v469 = v175;
  static String._unconditionallyBridgeFromObjectiveC(_:)((void *)v25);
  Hasher.init(_seed:)();
  v485 = (uint64_t)(id)v25;
  String.hash(into:)();
  v178 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  v179 = -1 << *(_BYTE *)(v177 + 32);
  v180 = v178 & ~v179;
  v181 = v180 >> 6;
  object = v177 + 56;
  v182 = *(_QWORD *)(v177 + 56 + 8 * (v180 >> 6));
  v183 = 1 << v180;
  if (((1 << v180) & v182) == 0)
  {
    v39 = v478;
    goto LABEL_133;
  }
  v184 = v178 & ~v179;
  v185 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(_QWORD *)(v177 + 48) + 8 * v180));
  v187 = v186;
  if (v185 != static String._unconditionallyBridgeFromObjectiveC(_:)((void *)v25) || v187 != v188)
  {
    v218 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v218 & 1) != 0)
      goto LABEL_137;
    v470 = (void *)v25;
    v25 = ~v179;
    v180 = (v184 + 1) & ~v179;
    v181 = v180 >> 6;
    p_st_uid = v177 + 56;
    v182 = *(_QWORD *)(object + 8 * (v180 >> 6));
    v183 = 1 << v180;
    if ((v182 & (1 << v180)) != 0)
    {
      object = v180;
      v326 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(_QWORD *)(v177 + 48) + 8 * v180));
      v328 = v327;
      if (v326 == static String._unconditionallyBridgeFromObjectiveC(_:)(v470) && v328 == v329)
      {
        swift_bridgeObjectRelease_n();
        v39 = v478;
LABEL_318:

LABEL_135:
        v25 = (uint64_t)v473;
        goto LABEL_138;
      }
      v432 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v39 = v478;
      if ((v432 & 1) != 0)
        goto LABEL_318;
      v180 = (object + 1) & v25;
      v181 = v180 >> 6;
      v182 = *(_QWORD *)(p_st_uid + 8 * (v180 >> 6));
      v183 = 1 << v180;
      if ((v182 & (1 << v180)) != 0)
      {
        object = (object + 1) & v25;
        v433 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(_QWORD *)(v177 + 48) + 8 * v180));
        v435 = v434;
        if (v433 == static String._unconditionallyBridgeFromObjectiveC(_:)(v470) && v435 == v436)
        {
LABEL_310:
          swift_bridgeObjectRelease_n();
        }
        else
        {
          while (1)
          {
            v442 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v442 & 1) != 0)
              break;
            v180 = (object + 1) & v25;
            v181 = v180 >> 6;
            v182 = *(_QWORD *)(p_st_uid + 8 * (v180 >> 6));
            v183 = 1 << v180;
            if ((v182 & (1 << v180)) == 0)
              goto LABEL_133;
            object = (object + 1) & v25;
            v437 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(_QWORD *)(v177 + 48) + 8 * v180));
            v439 = v438;
            if (v437 == static String._unconditionallyBridgeFromObjectiveC(_:)(v470) && v439 == v440)
              goto LABEL_310;
          }
        }
        goto LABEL_318;
      }
    }
    else
    {
      v39 = v478;
    }
LABEL_133:
    *(_QWORD *)(p_st_uid + 8 * v181) = v183 | v182;
    *(_QWORD *)(*(_QWORD *)(v177 + 48) + 8 * v180) = v485;
    v216 = *(_QWORD *)(v177 + 16);
    v62 = __OFADD__(v216, 1);
    v217 = v216 + 1;
    if (v62)
    {
      __break(1u);
      goto LABEL_332;
    }
    *(_QWORD *)(v177 + 16) = v217;
    goto LABEL_135;
  }
  swift_bridgeObjectRelease_n();
LABEL_137:

  v25 = (uint64_t)v473;
  v39 = v478;
LABEL_138:
  object = v475;
  swift_setDeallocating();
  type metadata accessor for NSURLResourceKey(0);
  v220 = v219;
  swift_arrayDestroy();
  swift_deallocClassInstance();
  v221 = swift_bridgeObjectRetain();
  specialized _copyCollectionToContiguousArray<A>(_:)(v221);
  v470 = (void *)v177;
  swift_release();
  v222 = _ContiguousArrayBuffer._asCocoaArray()();
  v487._countAndFlagsBits = 0;
  v223 = objc_msgSend(v472, sel_resourceValuesForKeys_error_, v222, &v487);
  swift_unknownObjectRelease();
  v224 = (void *)v487._countAndFlagsBits;
  if (!v223)
  {
    if (v487._countAndFlagsBits)
    {
      v279 = (id)v487._countAndFlagsBits;
      swift_willThrow();
      swift_release();

      goto LABEL_246;
    }
    p_st_uid = v477;
    if (one-time initialization token for _nilObjCError == -1)
    {
LABEL_231:
      swift_willThrow();
      swift_release();
      v486 = 0;
      goto LABEL_87;
    }
LABEL_332:
    swift_once();
    goto LABEL_231;
  }
  v467 = v220;
  v466 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v223);
  v225 = v224;

  v226 = swift_allocObject();
  v227 = specialized static Array._adoptStorage(_:count:)(v226, 3);
  v228 = (void *)*MEMORY[0x1E0C99C68];
  v229 = v469;
  *v230 = v469;
  v230[1] = v228;
  v231 = (void *)*MEMORY[0x1E0C99C70];
  v230[2] = *MEMORY[0x1E0C99C70];
  v232 = destructiveProjectEnumData for PredicateCodableError(v227, v230);
  p_st_uid = static _SetStorage.allocate(capacity:)();
  countAndFlagsBits = (_QWORD *)(p_st_uid + 56);
  v479 = v232 + 32;
  v480 = v232;
  v233 = v229;
  v234 = v228;
  v235 = v231;
  for (j = 0; j != 3; ++j)
  {
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(j, 1, v480);
    v237 = *(void **)(v479 + 8 * j);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v237);
    Hasher.init(_seed:)();
    v485 = v237;
    String.hash(into:)();
    v238 = Hasher._finalize()();
    swift_bridgeObjectRelease();
    v239 = -1 << *(_BYTE *)(p_st_uid + 32);
    v240 = v238 & ~v239;
    v241 = v240 >> 6;
    v242 = countAndFlagsBits[v240 >> 6];
    v243 = 1 << v240;
    if (((1 << v240) & v242) != 0)
    {
      v244 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(_QWORD *)(p_st_uid + 48) + 8 * v240));
      v246 = v245;
      if (v244 == static String._unconditionallyBridgeFromObjectiveC(_:)(v237) && v246 == v247)
      {
LABEL_140:
        swift_bridgeObjectRelease_n();
LABEL_141:

        continue;
      }
      v249 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v249 & 1) != 0)
        goto LABEL_141;
      v250 = ~v239;
      v240 = (v240 + 1) & v250;
      v241 = v240 >> 6;
      v242 = countAndFlagsBits[v240 >> 6];
      v243 = 1 << v240;
      if ((v242 & (1 << v240)) != 0)
      {
        v251 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(_QWORD *)(p_st_uid + 48) + 8 * v240));
        v253 = v252;
        if (v251 == static String._unconditionallyBridgeFromObjectiveC(_:)(v237) && v253 == v254)
          goto LABEL_140;
        v256 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v256 & 1) != 0)
          goto LABEL_141;
        v240 = (v240 + 1) & v250;
        v241 = v240 >> 6;
        v242 = countAndFlagsBits[v240 >> 6];
        v243 = 1 << v240;
        if ((v242 & (1 << v240)) != 0)
        {
          v257 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(_QWORD *)(p_st_uid + 48) + 8 * v240));
          v259 = v258;
          if (v257 == static String._unconditionallyBridgeFromObjectiveC(_:)(v237) && v259 == v260)
            goto LABEL_140;
          v261 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v261 & 1) != 0)
            goto LABEL_141;
          while (1)
          {
            v240 = (v240 + 1) & v250;
            v241 = v240 >> 6;
            v242 = countAndFlagsBits[v240 >> 6];
            v243 = 1 << v240;
            if ((v242 & (1 << v240)) == 0)
              break;
            v262 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(_QWORD *)(p_st_uid + 48)
                                                                                   + 8 * v240));
            v264 = v263;
            if (v262 == static String._unconditionallyBridgeFromObjectiveC(_:)(v237) && v264 == v265)
              goto LABEL_140;
            v267 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v267 & 1) != 0)
              goto LABEL_141;
          }
        }
      }
    }
    countAndFlagsBits[v241] = v243 | v242;
    *(_QWORD *)(*(_QWORD *)(p_st_uid + 48) + 8 * v240) = v485;
    v268 = *(_QWORD *)(p_st_uid + 16);
    v62 = __OFADD__(v268, 1);
    v269 = v268 + 1;
    if (v62)
    {
      __break(1u);
LABEL_329:
      __break(1u);
LABEL_330:
      swift_once();
LABEL_126:
      v202 = (id)_nilObjCError;
      goto LABEL_127;
    }
    *(_QWORD *)(p_st_uid + 16) = v269;
  }
  swift_bridgeObjectRelease();
  v270 = swift_bridgeObjectRetain();
  specialized _copyCollectionToContiguousArray<A>(_:)(v270);
  swift_release();
  v271 = _ContiguousArrayBuffer._asCocoaArray()();
  v487._countAndFlagsBits = 0;
  v272 = objc_msgSend(v471, sel_resourceValuesForKeys_error_, v271, &v487);
  swift_unknownObjectRelease();
  v273 = (void *)v487._countAndFlagsBits;
  if (!v272)
  {
    v39 = v478;
    if (v487._countAndFlagsBits)
    {
      v284 = (id)v487._countAndFlagsBits;
      swift_willThrow();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v486 = 0;
      goto LABEL_242;
    }
    v25 = (uint64_t)v473;
    object = v475;
    if (one-time initialization token for _nilObjCError != -1)
      swift_once();
    v333 = (void *)_nilObjCError;
    v334 = (id)_nilObjCError;
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_release();
LABEL_246:
    v486 = 0;
    goto LABEL_247;
  }
  v274 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v272);
  v275 = v273;

  v493._countAndFlagsBits = v466;
  v493._object = v470;
  URLResourceValues.parentDirectory.getter(&v487);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v276 = v487;
  v277 = v488;
  v490._countAndFlagsBits = v274;
  v490._object = (void *)p_st_uid;
  URLResourceValues.parentDirectory.getter(&v493);
  v278 = (void *)v493._countAndFlagsBits;
  if (!v276._countAndFlagsBits)
  {
    v39 = v478;
    if (!v493._countAndFlagsBits)
    {
      v485 = v274;
      goto LABEL_223;
    }
    goto LABEL_240;
  }
  v490 = v276;
  *(_QWORD *)&v491 = v277;
  if (!v493._countAndFlagsBits)
  {
    v39 = v478;
LABEL_240:
    outlined consume of URL?((void *)v276._countAndFlagsBits);
    outlined consume of URL?(v278);
    swift_bridgeObjectRelease();
LABEL_241:
    swift_bridgeObjectRelease();
LABEL_242:
    p_st_uid = v477;
    goto LABEL_86;
  }
  v485 = v274;
  v495 = v493;
  v496 = v494;
  outlined copy of URL?(v276._countAndFlagsBits);
  LODWORD(countAndFlagsBits) = specialized static URL.== infix(_:_:)((uint64_t)&v490, &v495._countAndFlagsBits);
  outlined consume of URL?(v278);

  swift_release();
  swift_release();
  outlined consume of URL?((void *)v276._countAndFlagsBits);
  v39 = v478;
  if ((countAndFlagsBits & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_241;
  }
LABEL_223:
  v28 = (std::__fs::filesystem::path *)v485;
  v487._countAndFlagsBits = v485;
  v487._object = (void *)p_st_uid;
  v330 = URLResourceValues.volumeSupportsCasePreservedNames.getter();
  if (v330 == 2)
  {
    __break(1u);
LABEL_334:
    __break(1u);
    return;
  }
  v25 = (uint64_t)v473;
  object = v475;
  if ((v330 & 1) != 0)
    goto LABEL_249;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_247:
  p_st_uid = v477;
LABEL_87:
  v487._countAndFlagsBits = (uint64_t)v472;
  v487._object = v39;
  v488 = object;
  v493._countAndFlagsBits = (uint64_t)v471;
  v493._object = (void *)p_st_uid;
  v494 = v25;
  static CocoaError.moveFileError(_:_:_:)(17, (uint64_t)&v487, (uint64_t)&v493, &v490);
  v130 = (id)v490._countAndFlagsBits;
  v131 = String.init(cString:)();
  v133 = v132;
  v134 = String.init(cString:)();
  LOBYTE(v131) = NSFileManager._shouldProceedAfter(error:copyingItemAtPath:to:)(v130, v131, v133, v134, v135, (SEL *)&selRef_fileManager_shouldProceedAfterError_movingItemAtURL_toURL_, (SEL *)&selRef_fileManager_shouldProceedAfterError_movingItemAtPath_toPath_);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v131 & 1) == 0)
    goto LABEL_127;

  v23 = 1;
  v27 = v486;
  object = v475;
LABEL_89:
  v24 = v482;
LABEL_90:
  rename(v24, v474, v22);
  v137 = v136;
  v138 = MEMORY[0x186DA4118]();
  v139 = v138;
  if (!v137 || v138 != 2)
  {
    if (!v137)
      return;
    if (v138 != 18)
      goto LABEL_106;
    v142 = v27;
    swift_retain();
    v143 = v481;
    v144 = v478;
    swift_retain();
    v145 = _foundation_swift_url_feature_enabled();
    v482 = (std::__fs::filesystem::path *)v143;
    v473 = (_OWORD *)v25;
    LODWORD(v480) = v23;
    if (v145)
    {
      v146 = v142;
      v487._countAndFlagsBits = (uint64_t)v143;
      v487._object = v144;
      v488 = object;
      v147 = v143;
      swift_retain();
      swift_retain();
      v148 = URL.path(percentEncoded:)(1);
      v487 = v148;
      swift_bridgeObjectRetain();
      if (String.count.getter() > 1
        && (specialized BidirectionalCollection.last.getter(v148._countAndFlagsBits, (unint64_t)v148._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
      }
      v486 = (std::__fs::filesystem::path *)v147;
      v493._countAndFlagsBits = Set.init(minimumCapacity:)();
      v149 = specialized Set._Variant.insert(_:)(&v490, 0x2FuLL);
      v150 = v493._countAndFlagsBits;
      v151 = v487;
      v152 = ((unint64_t)v487._object >> 56) & 0xF;
      if (((uint64_t)v487._object & 0x2000000000000000) == 0)
        v152 = v487._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      if (v152)
      {
        v493 = v487;
        MEMORY[0x1E0C80A78](v149);
        v464 = &v493;
        v465 = (Swift::String *)v150;
        swift_bridgeObjectRetain();
        v153 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v463, v151._countAndFlagsBits, (unint64_t)v151._object);
        if (v154 == (_QWORD *)1)
        {
          v155 = v493;
          swift_bridgeObjectRetain();
          v485 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v155._countAndFlagsBits, (unint64_t)v155._object, v150);
          v157 = v156;
          swift_bridgeObjectRelease();
        }
        else
        {
          v157 = v154;
          v485 = (uint64_t)v153;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        p_st_uid = v477;
        v25 = (uint64_t)v473;
        v28 = v146;
        if (!v157)
          goto LABEL_236;
        countAndFlagsBits = v157;
      }
      else
      {
        swift_bridgeObjectRelease();
        countAndFlagsBits = (_QWORD *)0xE000000000000000;
        v485 = 0;
        p_st_uid = v477;
        v28 = v142;
      }
      swift_release();
      swift_release();
      v331 = v486;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_237:
      swift_release();
      swift_release();

      goto LABEL_238;
    }
    v203 = objc_msgSend(v143, sel__parameterString);
    if (v203)
    {
      v204 = v203;
      v205 = static String._unconditionallyBridgeFromObjectiveC(_:)(v203);
      v207 = v206;

      if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State())
      {
        v208 = objc_msgSend(v143, sel_path);
        if (v208)
        {
          v209 = v208;
          v210 = static String._unconditionallyBridgeFromObjectiveC(_:)(v208);
          v486 = v142;
          v211 = (uint64_t)v210;
          v213 = v212;

          v487._countAndFlagsBits = v211;
          v487._object = v213;
          swift_bridgeObjectRetain();
          v214._countAndFlagsBits = 59;
          v214._object = (void *)0xE100000000000000;
          String.append(_:)(v214);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v215._countAndFlagsBits = (uint64_t)v205;
          v215._object = v207;
          String.append(_:)(v215);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
          v28 = v486;
          swift_bridgeObjectRelease();
          countAndFlagsBits = v487._object;
          v485 = v487._countAndFlagsBits;
LABEL_238:
          v332 = (void *)v483;
          goto LABEL_255;
        }
      }
      v487._countAndFlagsBits = 59;
      v487._object = (void *)0xE100000000000000;
      v320._countAndFlagsBits = (uint64_t)v205;
      v320._object = v207;
      String.append(_:)(v320);
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      v321 = v487._object;
      v485 = v487._countAndFlagsBits;
    }
    else
    {
      v322 = objc_msgSend(v143, sel_path);
      if (v322)
      {
        v323 = v322;
        v324 = static String._unconditionallyBridgeFromObjectiveC(_:)(v322);
        countAndFlagsBits = v325;
        v485 = (uint64_t)v324;
        swift_release();
        swift_release();

LABEL_254:
        v332 = (void *)v483;
        v28 = v142;
LABEL_255:
        swift_retain();
        v336 = v332;
        swift_retain();
        v337 = _foundation_swift_url_feature_enabled();
        v486 = v28;
        v483 = (uint64_t)v336;
        if ((v337 & 1) == 0)
        {
          v351 = objc_msgSend(v336, sel__parameterString);
          if (v351)
          {
            v352 = v351;
            v353 = static String._unconditionallyBridgeFromObjectiveC(_:)(v351);
            v355 = v354;

            if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
              && (v356 = objc_msgSend(v336, sel_path)) != 0)
            {
              v357 = v356;
              v358 = static String._unconditionallyBridgeFromObjectiveC(_:)(v356);
              v359 = v336;
              v361 = v360;

              v487._countAndFlagsBits = (uint64_t)v358;
              v487._object = v361;
              swift_bridgeObjectRetain();
              v362._countAndFlagsBits = 59;
              v362._object = (void *)0xE100000000000000;
              String.append(_:)(v362);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              v363._countAndFlagsBits = (uint64_t)v353;
              v363._object = v355;
              String.append(_:)(v363);
              swift_release();
              swift_release();

              swift_bridgeObjectRelease();
            }
            else
            {
              v487._countAndFlagsBits = 59;
              v487._object = (void *)0xE100000000000000;
              v364._countAndFlagsBits = (uint64_t)v353;
              v364._object = v355;
              String.append(_:)(v364);
              swift_release();
              swift_release();

            }
            v365 = swift_bridgeObjectRelease();
            v350 = (unint64_t)v487._object;
            v348 = v487._countAndFlagsBits;
          }
          else
          {
            v366 = objc_msgSend(v336, sel_path);
            if (v366)
            {
              v338 = v366;
              v348 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v366);
              v350 = v367;
              swift_release();
              swift_release();

LABEL_278:
              goto LABEL_279;
            }
            swift_release();
            swift_release();

            v348 = 0;
            v350 = 0xE000000000000000;
          }
LABEL_279:
          LOBYTE(v487._countAndFlagsBits) = 1;
          HIDWORD(v487._countAndFlagsBits) = 0;
          v487._object = v476;
          MEMORY[0x1E0C80A78](v365);
          v368 = (unint64_t)countAndFlagsBits;
          v369 = v485;
          v462[2] = v485;
          v462[3] = countAndFlagsBits;
          v463[0] = v348;
          v463[1] = v350;
          v464 = v370;
          v465 = &v487;
          v371 = v370;
          v372 = v486;
          specialized String.withFileSystemRepresentation<A>(_:)((uint64_t (*)(char *))partial apply for specialized closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:), (uint64_t)v462, v369, v368);
          if (v372)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            v493._countAndFlagsBits = (uint64_t)v372;
            v373 = v372;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
            if ((swift_dynamicCast() & 1) == 0)
            {
LABEL_325:

              return;
            }

            v374 = (void *)v490._countAndFlagsBits;
            v375 = v473;
            if ((v480 & 1) == 0)
            {
              v487._countAndFlagsBits = v483;
              v487._object = (void *)p_st_uid;
              v488 = (uint64_t)v473;
              v376 = URL.path.getter();
              v378 = v377;
              swift_bridgeObjectRetain();
              specialized String.withFileSystemRepresentation<A>(_:)(v376, (unint64_t)v378, v376, v378, 0);
              swift_bridgeObjectRelease();
            }
            v379 = v374;
            specialized _BridgedStoredNSError.code.getter(v379, &v495);

            v380 = v495._countAndFlagsBits;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
            v381 = swift_allocObject();
            v382 = specialized static Array._adoptStorage(_:count:)(v381, 4);
            v383 = (void *)p_st_uid;
            v385 = v384;
            *v384 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
            v385[1] = v386;
            v487._countAndFlagsBits = (uint64_t)v482;
            v487._object = v478;
            v488 = v475;
            v387 = URL.path.getter();
            v388 = (void *)MEMORY[0x1E0DEA968];
            v385[5] = (id)MEMORY[0x1E0DEA968];
            v385[2] = (id)v387;
            v385[3] = v389;
            v385[6] = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDestinationFilePath"));
            v385[7] = v390;
            v487._countAndFlagsBits = v483;
            v487._object = v383;
            v488 = (uint64_t)v375;
            v391 = URL.path.getter();
            v385[11] = v388;
            v385[8] = (id)v391;
            v385[9] = v392;
            v385[12] = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUserStringVariant"));
            v385[13] = v393;
            v385[17] = v388;
            v385[14] = (id)1702260557;
            v385[15] = (id)0xE400000000000000;
            v385[18] = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
            v385[19] = v394;
            v385[23] = &type metadata for CocoaError;
            v385[20] = v379;
            v395 = destructiveProjectEnumData for PredicateCodableError(v382, v394);
            v396 = v379;
            specialized Dictionary.init(dictionaryLiteral:)(v395);
            v397 = v380;
LABEL_324:
            specialized _BridgedStoredNSError.init(_:userInfo:)(v397, &v487);
            swift_willThrow();

            goto LABEL_325;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          v398 = _foundation_swift_url_feature_enabled();
          v399 = v475;
          if (v398)
          {
            v400 = 0;
            v401 = v478;
            v487._countAndFlagsBits = (uint64_t)v482;
            v487._object = v478;
            v488 = v475;
            v486 = v482;
            swift_retain();
            swift_retain();
            v402 = URL.path(percentEncoded:)(1);
            v487 = v402;
            swift_bridgeObjectRetain();
            v403 = String.count.getter();
            v404 = v473;
            if (v403 > 1
              && (specialized BidirectionalCollection.last.getter(v402._countAndFlagsBits, (unint64_t)v402._object) & 0x1FF) == 0x2F)
            {
              specialized RangeReplaceableCollection<>.popLast()();
              swift_bridgeObjectRelease();
            }
            v493._countAndFlagsBits = Set.init(minimumCapacity:)();
            v405 = specialized Set._Variant.insert(_:)(&v490, 0x2FuLL);
            v406 = v493._countAndFlagsBits;
            v407 = v487;
            v408 = ((unint64_t)v487._object >> 56) & 0xF;
            if (((uint64_t)v487._object & 0x2000000000000000) == 0)
              v408 = v487._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
            if (v408)
            {
              v493 = v487;
              MEMORY[0x1E0C80A78](v405);
              v464 = &v493;
              v465 = (Swift::String *)v406;
              swift_bridgeObjectRetain();
              v409 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v463, v407._countAndFlagsBits, (unint64_t)v407._object);
              if (v410 == (char *)1)
              {
                v411 = v493;
                swift_bridgeObjectRetain();
                v412 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v411._countAndFlagsBits, (unint64_t)v411._object, v406);
                v414 = v413;
                swift_bridgeObjectRelease();
              }
              else
              {
                v412 = (uint64_t)v409;
                v414 = v410;
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              p_st_uid = v477;
              v401 = v478;
              if (!v414)
              {
                swift_release();
                swift_release();

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v412 = 0;
                v414 = (char *)0xE000000000000000;
                v399 = v475;
                goto LABEL_321;
              }
            }
            else
            {
              swift_bridgeObjectRelease();
              v412 = 0;
              v414 = (char *)0xE000000000000000;
              p_st_uid = v477;
            }
            swift_release();
            swift_release();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v399 = v475;
LABEL_321:
            swift_bridgeObjectRetain();
            specialized String.withFileSystemRepresentation<A>(_:)(v412, (unint64_t)v414, v412, v414, 0);
            if (!v400)
            {
              swift_bridgeObjectRelease();
              return;
            }
            swift_bridgeObjectRelease();
            v493._countAndFlagsBits = (uint64_t)v400;
            v443 = v400;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
            if ((swift_dynamicCast() & 1) == 0)
              goto LABEL_325;

            v444 = v399;
            v445 = (id)v490._countAndFlagsBits;
            specialized _BridgedStoredNSError.code.getter(v445, &v495);

            v486 = (std::__fs::filesystem::path *)v495._countAndFlagsBits;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
            v446 = swift_allocObject();
            v447 = specialized static Array._adoptStorage(_:count:)(v446, 4);
            v448 = (uint64_t)v404;
            v449 = (void *)p_st_uid;
            v451 = v450;
            *v450 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
            v451[1] = v452;
            v487._countAndFlagsBits = (uint64_t)v482;
            v487._object = v401;
            v488 = v444;
            v453 = URL.path.getter();
            v454 = (void *)MEMORY[0x1E0DEA968];
            v451[5] = (id)MEMORY[0x1E0DEA968];
            v451[2] = (id)v453;
            v451[3] = v455;
            v451[6] = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDestinationFilePath"));
            v451[7] = v456;
            v487._countAndFlagsBits = v483;
            v487._object = v449;
            v488 = v448;
            v457 = URL.path.getter();
            v451[11] = v454;
            v451[8] = (id)v457;
            v451[9] = v458;
            v451[12] = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUserStringVariant"));
            v451[13] = v459;
            v451[17] = v454;
            v451[14] = (id)1702260557;
            v451[15] = (id)0xE400000000000000;
            v451[18] = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
            v451[19] = v460;
            v451[23] = &type metadata for CocoaError;
            v451[20] = v445;
            v461 = destructiveProjectEnumData for PredicateCodableError(v447, v460);
            v396 = v445;
            specialized Dictionary.init(dictionaryLiteral:)(v461);
            v397 = (uint64_t)v486;
            goto LABEL_324;
          }
          v486 = 0;
          v415 = v482;
          v416 = -[std::__fs::filesystem::path _parameterString](v482, sel__parameterString);
          v401 = v478;
          v404 = v473;
          if (v416)
          {
            v417 = v416;
            v418 = static String._unconditionallyBridgeFromObjectiveC(_:)(v416);
            v420 = v419;

            if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State())
            {
              v421 = -[std::__fs::filesystem::path path](v415, sel_path);
              if (v421)
              {
                v422 = v421;
                v423 = static String._unconditionallyBridgeFromObjectiveC(_:)(v421);
                v425 = v424;

                v487._countAndFlagsBits = (uint64_t)v423;
                v487._object = v425;
                swift_bridgeObjectRetain();
                v426._countAndFlagsBits = 59;
                v426._object = (void *)0xE100000000000000;
                String.append(_:)(v426);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRetain();
                v427._countAndFlagsBits = (uint64_t)v418;
                v427._object = v420;
                String.append(_:)(v427);
                swift_bridgeObjectRelease();
                v400 = v486;
                v401 = v478;
                swift_bridgeObjectRelease();
                v414 = (char *)v487._object;
                v412 = v487._countAndFlagsBits;
                v399 = v475;
                goto LABEL_321;
              }
            }
            v487._countAndFlagsBits = 59;
            v487._object = (void *)0xE100000000000000;
            v428._countAndFlagsBits = (uint64_t)v418;
            v428._object = v420;
            String.append(_:)(v428);
            swift_bridgeObjectRelease();
            v414 = (char *)v487._object;
            v412 = v487._countAndFlagsBits;
            v399 = v475;
          }
          else
          {
            v429 = -[std::__fs::filesystem::path path](v415, sel_path);
            if (v429)
            {
              v430 = v429;
              v412 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v429);
              v414 = v431;

            }
            else
            {
              v412 = 0;
              v414 = (char *)0xE000000000000000;
            }
          }
          v400 = v486;
          goto LABEL_321;
        }
        v487._countAndFlagsBits = (uint64_t)v336;
        v487._object = (void *)p_st_uid;
        v488 = v25;
        v338 = v336;
        swift_retain();
        swift_retain();
        v339 = URL.path(percentEncoded:)(1);
        v487 = v339;
        swift_bridgeObjectRetain();
        if (String.count.getter() > 1
          && (specialized BidirectionalCollection.last.getter(v339._countAndFlagsBits, (unint64_t)v339._object) & 0x1FF) == 0x2F)
        {
          specialized RangeReplaceableCollection<>.popLast()();
          swift_bridgeObjectRelease();
        }
        v493._countAndFlagsBits = Set.init(minimumCapacity:)();
        v340 = specialized Set._Variant.insert(_:)(&v490, 0x2FuLL);
        v341 = v493._countAndFlagsBits;
        v342 = v487;
        v343 = ((unint64_t)v487._object >> 56) & 0xF;
        if (((uint64_t)v487._object & 0x2000000000000000) == 0)
          v343 = v487._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
        if (v343)
        {
          v493 = v487;
          MEMORY[0x1E0C80A78](v340);
          v464 = &v493;
          v465 = (Swift::String *)v341;
          swift_bridgeObjectRetain();
          v344 = v486;
          v345 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v463, v342._countAndFlagsBits, (unint64_t)v342._object);
          v486 = v344;
          if (v346 == 1)
          {
            v347 = v493;
            swift_bridgeObjectRetain();
            v348 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v347._countAndFlagsBits, (unint64_t)v347._object, v341);
            v350 = v349;
            swift_bridgeObjectRelease();
          }
          else
          {
            v348 = (uint64_t)v345;
            v350 = v346;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          p_st_uid = v477;
          if (!v350)
          {
            swift_release();
            swift_release();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v348 = 0;
            v350 = 0xE000000000000000;
            goto LABEL_277;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          v348 = 0;
          v350 = 0xE000000000000000;
          p_st_uid = v477;
        }
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_277:
        swift_release();
        swift_release();
        goto LABEL_278;
      }
      swift_release();
      swift_release();

      v485 = 0;
      v321 = (_QWORD *)0xE000000000000000;
    }
    countAndFlagsBits = v321;
    goto LABEL_254;
  }
  LOBYTE(v493._countAndFlagsBits) = 0;
  v487._countAndFlagsBits = 0;
  if (objc_msgSend(v476, sel__handleFaultedOutCloudDocFromSource_toDestination_handled_error_, v481, v483, &v493, &v487))
  {
    v140 = v493._countAndFlagsBits;
    v141 = (id)v487._countAndFlagsBits;
    if ((v140 & 1) == 0)
    {
LABEL_106:
      v158 = v481;
      v159 = v478;
      v487._countAndFlagsBits = (uint64_t)v481;
      v487._object = v478;
      v488 = object;
      v493._countAndFlagsBits = v483;
      v493._object = (void *)p_st_uid;
      v494 = v25;
      static CocoaError.moveFileError(_:_:_:)(v139, (uint64_t)&v487, (uint64_t)&v493, &v490);
      v160 = (void *)v490._countAndFlagsBits;
      swift_retain();
      countAndFlagsBits = v160;
      v161 = v158;
      swift_retain();
      if (_foundation_swift_url_feature_enabled())
      {
        v486 = v27;
        v487._countAndFlagsBits = (uint64_t)v161;
        v487._object = v159;
        v488 = object;
        v162 = v161;
        swift_retain();
        swift_retain();
        v163 = URL.path(percentEncoded:)(1);
        v487 = v163;
        swift_bridgeObjectRetain();
        if (String.count.getter() > 1
          && (specialized BidirectionalCollection.last.getter(v163._countAndFlagsBits, (unint64_t)v163._object) & 0x1FF) == 0x2F)
        {
          specialized RangeReplaceableCollection<>.popLast()();
          swift_bridgeObjectRelease();
        }
        v493._countAndFlagsBits = Set.init(minimumCapacity:)();
        v164 = specialized Set._Variant.insert(_:)(&v490, 0x2FuLL);
        v165 = v493._countAndFlagsBits;
        v166 = v487;
        v167 = ((unint64_t)v487._object >> 56) & 0xF;
        if (((uint64_t)v487._object & 0x2000000000000000) == 0)
          v167 = v487._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
        if (!v167)
        {
          swift_bridgeObjectRelease();
          v485 = 0;
          v173 = 0xE000000000000000;
          v27 = v486;
          goto LABEL_182;
        }
        v493 = v487;
        MEMORY[0x1E0C80A78](v164);
        v464 = &v493;
        v465 = (Swift::String *)v165;
        swift_bridgeObjectRetain();
        v168 = v486;
        v169 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v463, v166._countAndFlagsBits, (unint64_t)v166._object);
        if (v170 == 1)
        {
          v171 = v493;
          swift_bridgeObjectRetain();
          v485 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v171._countAndFlagsBits, (unint64_t)v171._object, v165);
          v173 = v172;
          swift_bridgeObjectRelease();
        }
        else
        {
          v173 = v170;
          v485 = (uint64_t)v169;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v27 = v168;
        if (v173)
        {
LABEL_182:
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v485 = 0;
          v173 = 0xE000000000000000;
        }
        swift_release();
        swift_release();

      }
      else
      {
        v189 = objc_msgSend(v161, sel__parameterString);
        if (v189)
        {
          v190 = v189;
          v191 = v27;
          v192 = static String._unconditionallyBridgeFromObjectiveC(_:)(v189);
          v194 = v193;

          if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
            && (v195 = objc_msgSend(v161, sel_path)) != 0)
          {
            v196 = v195;
            v197 = static String._unconditionallyBridgeFromObjectiveC(_:)(v195);
            v199 = v198;

            v487._countAndFlagsBits = (uint64_t)v197;
            v487._object = v199;
            swift_bridgeObjectRetain();
            v200._countAndFlagsBits = 59;
            v200._object = (void *)0xE100000000000000;
            String.append(_:)(v200);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            v201._countAndFlagsBits = (uint64_t)v192;
            v201._object = v194;
            String.append(_:)(v201);
            swift_release();
            swift_release();

            swift_bridgeObjectRelease();
          }
          else
          {
            v487._countAndFlagsBits = 59;
            v487._object = (void *)0xE100000000000000;
            v280._countAndFlagsBits = (uint64_t)v192;
            v280._object = v194;
            String.append(_:)(v280);
            swift_release();
            swift_release();

          }
          swift_bridgeObjectRelease();
          v173 = (unint64_t)v487._object;
          v485 = v487._countAndFlagsBits;
          v27 = v191;
        }
        else
        {
          v281 = objc_msgSend(v161, sel_path);
          if (v281)
          {
            v282 = v281;
            v485 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v281);
            v173 = v283;
            swift_release();
            swift_release();

          }
          else
          {
            swift_release();
            swift_release();

            v485 = 0;
            v173 = 0xE000000000000000;
          }
        }
      }
      v285 = (void *)v483;
      swift_retain();
      v286 = v285;
      v287 = (void *)v477;
      swift_retain();
      v288 = _foundation_swift_url_feature_enabled();
      v486 = v27;
      if ((v288 & 1) != 0)
      {
        v487._countAndFlagsBits = (uint64_t)v286;
        v487._object = v287;
        v488 = v25;
        v289 = v286;
        swift_retain();
        v473 = (_OWORD *)v25;
        swift_retain();
        v290 = URL.path(percentEncoded:)(1);
        v487 = v290;
        swift_bridgeObjectRetain();
        if (String.count.getter() > 1
          && (specialized BidirectionalCollection.last.getter(v290._countAndFlagsBits, (unint64_t)v290._object) & 0x1FF) == 0x2F)
        {
          specialized RangeReplaceableCollection<>.popLast()();
          swift_bridgeObjectRelease();
        }
        v493._countAndFlagsBits = Set.init(minimumCapacity:)();
        v291 = specialized Set._Variant.insert(_:)(&v490, 0x2FuLL);
        v292 = v493._countAndFlagsBits;
        v293 = v487;
        v294 = ((unint64_t)v487._object >> 56) & 0xF;
        if (((uint64_t)v487._object & 0x2000000000000000) == 0)
          v294 = v487._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
        if (!v294)
        {
          swift_bridgeObjectRelease();
          v299 = 0;
          v301 = 0xE000000000000000;
          goto LABEL_207;
        }
        v493 = v487;
        MEMORY[0x1E0C80A78](v291);
        v464 = &v493;
        v465 = (Swift::String *)v292;
        swift_bridgeObjectRetain();
        v295 = v486;
        v296 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v463, v293._countAndFlagsBits, (unint64_t)v293._object);
        v486 = v295;
        if (v297 == 1)
        {
          v298 = v493;
          swift_bridgeObjectRetain();
          v299 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v298._countAndFlagsBits, (unint64_t)v298._object, v292);
          v301 = v300;
          swift_bridgeObjectRelease();
        }
        else
        {
          v299 = (uint64_t)v296;
          v301 = v297;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v301)
        {
LABEL_207:
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v299 = 0;
          v301 = 0xE000000000000000;
        }
        swift_release();
        swift_release();

      }
      else
      {
        v302 = objc_msgSend(v286, sel__parameterString);
        if (v302)
        {
          v303 = v302;
          v304 = static String._unconditionallyBridgeFromObjectiveC(_:)(v302);
          v306 = v305;

          if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
            && (v307 = objc_msgSend(v286, sel_path)) != 0)
          {
            v308 = v307;
            v309 = static String._unconditionallyBridgeFromObjectiveC(_:)(v307);
            v311 = v310;

            v487._countAndFlagsBits = (uint64_t)v309;
            v487._object = v311;
            swift_bridgeObjectRetain();
            v312._countAndFlagsBits = 59;
            v312._object = (void *)0xE100000000000000;
            String.append(_:)(v312);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            v313._countAndFlagsBits = (uint64_t)v304;
            v313._object = v306;
            String.append(_:)(v313);
            swift_release();
            swift_release();

            swift_bridgeObjectRelease();
          }
          else
          {
            v487._countAndFlagsBits = 59;
            v487._object = (void *)0xE100000000000000;
            v314._countAndFlagsBits = (uint64_t)v304;
            v314._object = v306;
            String.append(_:)(v314);
            swift_release();
            swift_release();

          }
          swift_bridgeObjectRelease();
          v301 = (unint64_t)v487._object;
          v299 = v487._countAndFlagsBits;
        }
        else
        {
          v315 = objc_msgSend(v286, sel_path);
          if (v315)
          {
            v316 = v315;
            v299 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v315);
            v301 = v317;
            swift_release();
            swift_release();

          }
          else
          {
            swift_release();
            swift_release();

            v299 = 0;
            v301 = 0xE000000000000000;
          }
        }
      }
      v318 = countAndFlagsBits;
      v319 = NSFileManager._shouldProceedAfter(error:copyingItemAtPath:to:)(countAndFlagsBits, v485, v173, v299, v301, (SEL *)&selRef_fileManager_shouldProceedAfterError_movingItemAtURL_toURL_, (SEL *)&selRef_fileManager_shouldProceedAfterError_movingItemAtPath_toPath_);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v319 & 1) == 0)
        goto LABEL_127;

    }
  }
  else
  {
    if (!v487._countAndFlagsBits)
    {
      if (one-time initialization token for _nilObjCError != -1)
        goto LABEL_330;
      goto LABEL_126;
    }
    (id)v487._countAndFlagsBits;
LABEL_127:
    swift_willThrow();
  }
}

uint64_t specialized closure #1 in static _FileOperations._linkOrCopyFile<A>(_:_:with:delegate:)(char *a1, int a2, char *__source, const char *a4, unint64_t a5, void *a6)
{
  uint64_t v6;
  unint64_t v7;
  const char *v9;
  size_t v10;
  size_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  FTSENT *v18;
  int v19;
  int v20;
  int v21;
  const char *fts_path;
  int v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int fts_errno;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t Path;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int64_t v40;
  int64_t v41;
  _BOOL4 v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  int64_t v75;
  int64_t v76;
  _BOOL4 v78;
  BOOL v79;
  uint64_t v80;
  unint64_t v81;
  int v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  char v98;
  char v99;
  unint64_t v100;
  unint64_t v101;
  char v102;
  char v103;
  uint64_t v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  id v111;
  void *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  int v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  id v121;
  uint64_t v122;
  uint64_t v123;
  id v124;
  unint64_t v125;
  unsigned __int8 v126;
  Swift::Int32 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  Swift::Int v158;
  uint64_t v159;
  uint64_t v160;
  const char *v161;
  uint64_t v162;
  const char *v163;
  char v164;
  char v165;
  size_t v166;
  int64_t v167;
  uint64_t v168;
  char v169;
  char v170;
  uint64_t v171;
  int64_t v172;
  _BOOL4 v174;
  id v175;
  uint64_t v176;
  uint64_t v177;
  id v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  id v182;
  uint64_t v183;
  uint64_t v184;
  id v185;
  uint64_t v186;
  uint64_t v187;
  id v188;
  unsigned __int8 v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  char v194;
  char v195;
  unint64_t v196;
  unint64_t v197;
  char v198;
  char v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  char v205;
  char v206;
  unint64_t v207;
  uint64_t v208;
  unint64_t v209;
  char v210;
  char v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  int64_t v233;
  int64_t v234;
  _BOOL4 v236;
  id v237;
  uint64_t v238;
  uint64_t v239;
  id v240;
  uint64_t v241;
  uint64_t v242;
  id v243;
  uint64_t v244;
  uint64_t v245;
  id v246;
  unint64_t v247;
  Swift::Int32 v248;
  id v249;
  unsigned __int8 v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  Swift::Int isStackAllocationSafe;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  char v264;
  char v265;
  size_t v266;
  int64_t v267;
  uint64_t v268;
  char v269;
  char v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  const char *v275;
  char v276;
  char v277;
  size_t v278;
  int64_t v279;
  char v280;
  char v281;
  id v282;
  uint64_t v283;
  uint64_t v284;
  id v285;
  uint64_t v286;
  uint64_t v287;
  id v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  id v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  Swift::Int32 v296;
  id v297;
  unsigned __int8 v298;
  unint64_t v300;
  uint64_t v301;
  id v302;
  uint64_t v303;
  uint64_t v304;
  id v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  int v310;
  id v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  id v315;
  uint64_t v316;
  id v317;
  id v318;
  id v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  char v323;
  uint64_t v324;
  uint64_t v325;
  _QWORD *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  unint64_t v330;
  __int128 *v331;
  _OWORD *v332;
  _OWORD *v333;
  __int128 *v334;
  _OWORD *v335;
  _OWORD *v336;
  uint64_t v337;
  uint64_t *v338;
  _OWORD *v339;
  unint64_t v340;
  char *v341;
  unint64_t v342;
  char *v343;
  unint64_t *v344;
  unint64_t v345;
  unint64_t v346;
  __int128 v347;
  uint64_t v348;
  uint64_t v349;
  unint64_t v350;
  unint64_t v351;
  char v352;
  uint64_t *v353;
  uint64_t v354;
  BOOL v355;
  uint64_t v356;
  id v357;
  uint64_t v358;
  id v359;
  id v360;
  id v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  char v366;
  uint64_t v367;
  unsigned __int8 v368;
  uint64_t v369;
  Swift::String v370;
  unint64_t v371;
  Swift::Int32 v372;
  unint64_t v373;
  int v374;
  unint64_t v375;
  __CFString *v376;
  __CFString *v377;
  size_t v378;
  const char *v379;
  __CFString *v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  unint64_t v384;
  uint64_t v385;
  int v386;
  _QWORD *v387;
  char *v388;
  unint64_t v389;
  uint64_t v390;
  uint64_t v391;
  id v392;
  FTSENT *v393;
  char *v394;
  size_t v395;
  uint64_t v396;
  __int128 v397;
  __int128 v398;
  uint64_t v399;
  unint64_t v400;
  __int128 v401;
  unint64_t v402;
  __int128 v403;
  __int128 v404;
  __int128 v405;
  __int128 v406;
  uint64_t v407;
  uint64_t v408;

  v392 = a6;
  v375 = a5;
  v408 = *MEMORY[0x1E0C80C00];
  if (!a1)
    goto LABEL_342;
  v9 = a1;
  v10 = strlcpy(a1, __source, 0x402uLL);
  v11 = strlen(a4);
  v395 = 1026 - v10;
  if (__OFSUB__(1026, v10))
    goto LABEL_325;
  v12 = v11;
  type metadata accessor for _FTSSequence.Iterator();
  swift_allocObject();
  v13 = _FTSSequence.Iterator.init(_:_:)(a4, 20);
  v14 = _FTSSequence.Iterator.next()();
  if ((_BYTE)v17 == 0xFF)
    return swift_release();
  v18 = (FTSENT *)v14;
  v19 = v17;
  v389 = HIDWORD(v375);
  v394 = (char *)&v9[v10];
  v381 = (uint64_t)CFSTR("NSSourceFilePathErrorKey");
  v380 = CFSTR("NSDestinationFilePath");
  if ((v375 & 1) != 0)
    v20 = 17694735;
  else
    v20 = 917519;
  v374 = v20;
  v376 = CFSTR("NSFilePath");
  v377 = CFSTR("NSURL");
  v382 = v13;
  v379 = v9;
  v378 = v12;
  while (1)
  {
    v391 = v16;
    v390 = v15;
    if ((v19 & 1) != 0)
      break;
    fts_path = v18->fts_path;
    if (!fts_path)
      goto LABEL_338;
    strlcpy(v394, &fts_path[v12], v395);
    if (v18->fts_info != 6)
    {
      v7 = v13;
      v24 = (char *)v392;
      v25 = String.init(cString:)();
      v393 = v18;
      v27 = v26;
      v28 = String.init(cString:)();
      v6 = v29;
      LOBYTE(v25) = NSFileManager._shouldCopyItemAtPath(_:to:)(v25, v27, v28, v29, (SEL *)&selRef_fileManager_shouldCopyItemAtURL_toURL_, (SEL *)&selRef_fileManager_shouldCopyItemAtPath_toPath_);
      v388 = v24;

      v18 = v393;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v25 & 1) == 0)
      {
        if (v18->fts_info == 1)
        {
          v13 = v7;
          if (!*(_BYTE *)(v7 + 40))
          {
            fts_set(*(FTS **)(v7 + 16), v18, 4);
            v45 = _FTSSequence.Iterator.next()();
            outlined consume of _FTSSequence.Element?(v45, v46, v47, v48);
          }
        }
        else
        {
LABEL_8:
          v13 = v7;
        }
        goto LABEL_9;
      }
      if (v18->fts_level)
        v23 = 0;
      else
        v23 = v389;
      v13 = v7;
      switch(v18->fts_info)
      {
        case 1u:
          if (v23 < 0)
            goto LABEL_344;
          if (!copyfile(fts_path, v9, 0, v23 | 0xE0008))
            goto LABEL_9;
          v127 = MEMORY[0x186DA4118]();
          v128 = String.init(cString:)();
          v130 = v129;
          v132 = String.init(cString:)();
          v6 = v131;
          v372 = v127;
          v384 = v131;
          v383 = v130;
          v387 = (_QWORD *)v132;
          v386 = v19;
          v373 = v128;
          if (v127 != 63)
          {
            swift_bridgeObjectRetain();
            v371 = v128;
            v147 = v132;
LABEL_109:
            v148 = v130;
            v149 = v6;
            goto LABEL_249;
          }
          if ((v131 & 0x2000000000000000) != 0)
            v7 = HIBYTE(v131) & 0xF;
          else
            v7 = v132 & 0xFFFFFFFFFFFFLL;
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          v133 = v385;
          if (!v7)
          {
            v139 = v132;
            v140 = v6;
            goto LABEL_204;
          }
          v134 = 4 * v7;
          while (1)
          {
            v135 = String.index(before:)();
            *(_QWORD *)&v405 = String.subscript.getter();
            *((_QWORD *)&v405 + 1) = v136;
            v137 = v133;
            v138 = closure #1 in String._lastPathComponent.getter(&v405);
            swift_bridgeObjectRelease();
            if ((v138 & 1) != 0)
              break;
            v133 = v137;
            if (v135 < 0x4000)
            {
              v139 = (uint64_t)v387;
              v140 = v384;
              goto LABEL_177;
            }
          }
          if (v135 >> 14)
          {
            v371 = v7;
            LODWORD(v7) = (_DWORD)v387;
            v133 = v137;
            if ((String.index(before:)() ^ v135) >= 0x4000)
            {
              if (v134 < (unint64_t)String.index(after:)() >> 14)
                goto LABEL_339;
              v223 = String.subscript.getter();
              v139 = MEMORY[0x186DA4964](v223);
              v140 = v224;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            else
            {
              v202 = String.subscript.getter();
              v204 = specialized BidirectionalCollection.lastIndex(where:)(v202, v203);
              v206 = v205;
              swift_bridgeObjectRelease();
              if ((v206 & 1) != 0)
              {
                swift_bridgeObjectRelease();
                v140 = 0xE100000000000000;
                v139 = 47;
              }
              else
              {
                v207 = String.subscript.getter();
                v6 = v208;
                specialized BidirectionalCollection.lastIndex(where:)(v207, v209);
                v211 = v210;
                v385 = v137;
                swift_bridgeObjectRelease();
                if ((v211 & 1) == 0)
                {
                  v212 = String.index(after:)();
                  v130 = v383;
                  if (v204 >> 14 < v212 >> 14)
                  {
                    __break(1u);
LABEL_344:
                    _assertionFailure(_:_:file:line:flags:)();
                    __break(1u);
LABEL_345:
                    swift_willThrow();
                    __break(1u);
LABEL_346:
                    v369 = v6;
LABEL_351:
                    MEMORY[0x186DA9E78](v369, -1, -1);
                    __break(1u);
LABEL_352:
                    *(_QWORD *)&v405 = 0;
                    *((_QWORD *)&v405 + 1) = 0xE000000000000000;
                    _StringGuts.grow(_:)(22);
                    swift_bridgeObjectRelease();
                    *(_QWORD *)&v405 = 0xD000000000000014;
                    *((_QWORD *)&v405 + 1) = 0x8000000182306980;
                    LODWORD(v402) = v7;
                    v370._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                    String.append(_:)(v370);
                    swift_bridgeObjectRelease();
                    _assertionFailure(_:_:file:line:flags:)();
                    __break(1u);
                    JUMPOUT(0x181ACA78CLL);
                  }
                  swift_bridgeObjectRetain();
                  v213 = specialized Collection.subscript.getter();
                  v215 = v214;
                  v217 = v216;
                  v219 = v218;
                  swift_bridgeObjectRelease();
                  v139 = MEMORY[0x186DA4964](v213, v215, v217, v219);
                  v140 = v220;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v133 = v385;
                  goto LABEL_203;
                }
                swift_bridgeObjectRetain();
                v251 = specialized Collection.subscript.getter();
                v253 = v252;
                v255 = v254;
                v257 = v256;
                swift_bridgeObjectRelease();
                v139 = MEMORY[0x186DA4964](v251, v253, v255, v257);
                v140 = v258;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v133 = v385;
              }
            }
            v130 = v383;
LABEL_203:
            v7 = v371;
            goto LABEL_204;
          }
          v133 = v137;
          if (String.count.getter() == 1)
          {
            swift_bridgeObjectRelease();
            v140 = 0xE100000000000000;
            v139 = 47;
          }
          else
          {
            if (v134 < (unint64_t)String.index(after:)() >> 14)
              goto LABEL_340;
            v221 = String.subscript.getter();
            v139 = MEMORY[0x186DA4964](v221);
            v140 = v222;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
LABEL_177:
          v130 = v383;
LABEL_204:
          if ((v140 & 0x1000000000000000) != 0)
          {
            isStackAllocationSafe = String.UTF8View._foreignCount()();
          }
          else if ((v140 & 0x2000000000000000) != 0)
          {
            isStackAllocationSafe = HIBYTE(v140) & 0xF;
          }
          else
          {
            isStackAllocationSafe = v139 & 0xFFFFFFFFFFFFLL;
          }
          v260 = 3 * isStackAllocationSafe;
          if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
            goto LABEL_331;
          if (v260 < -1)
            goto LABEL_334;
          v261 = v133;
          v262 = v260 + 1;
          if (v260 < 1024
            || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
          {
            MEMORY[0x1E0C80A78](isStackAllocationSafe);
            v6 = (uint64_t)&v371 - v263;
            swift_bridgeObjectRetain();
            String._decomposed(_:into:nullTerminated:)(1, v6, v262, 1, v139, v140);
            v265 = v264;
            swift_bridgeObjectRelease();
            if ((v265 & 1) != 0)
            {
              v6 = v384;
              if (v261)
                goto LABEL_345;
              v268 = 0;
              v267 = 0;
            }
            else
            {
              v266 = strnlen((const char *)v6, 0x100uLL);
              if (v261)
                goto LABEL_345;
              v267 = v266;
              v268 = 0;
              v6 = v384;
            }
            v130 = v383;
          }
          else
          {
            v6 = swift_slowAlloc();
            swift_bridgeObjectRetain();
            String._decomposed(_:into:nullTerminated:)(1, v6, v262, 1, v139, v140);
            v270 = v269;
            swift_bridgeObjectRelease();
            if ((v270 & 1) != 0)
            {
              if (v261)
                goto LABEL_346;
              v268 = 0;
              v267 = 0;
            }
            else
            {
              v268 = v261;
              if (v6)
                v267 = strnlen((const char *)v6, 0x100uLL);
              else
                v267 = 0;
              if (v261)
                goto LABEL_346;
            }
            MEMORY[0x186DA9E78](v6, -1, -1);
            v6 = v384;
          }
          v271 = swift_bridgeObjectRelease();
          if ((v6 & 0x1000000000000000) != 0)
          {
            v271 = String.UTF8View._foreignCount()();
            v7 = v271;
          }
          v272 = 3 * v7;
          if ((unsigned __int128)((uint64_t)v7 * (__int128)3) >> 64 != (uint64_t)(3 * v7) >> 63)
            goto LABEL_332;
          if (v272 < -1)
            goto LABEL_335;
          v273 = v272 + 1;
          if (v272 < 1024 || (v271 = swift_stdlib_isStackAllocationSafe(), (v271 & 1) != 0))
          {
            MEMORY[0x1E0C80A78](v271);
            v275 = (char *)&v371 - v274;
            swift_bridgeObjectRetain();
            String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v275, v273, 1, (uint64_t)v387, v6);
            v277 = v276;
            swift_bridgeObjectRelease();
            if ((v277 & 1) != 0)
            {
              v130 = v383;
              if (v268)
              {
LABEL_347:
                swift_willThrow();
                __break(1u);
LABEL_348:
                v369 = (uint64_t)v275;
                goto LABEL_351;
              }
              v279 = 0;
            }
            else
            {
              v278 = strnlen(v275, 0x401uLL);
              v130 = v383;
              if (v268)
                goto LABEL_347;
              v279 = v278;
            }
            v147 = (unint64_t)v387;
            v6 = v384;
          }
          else
          {
            v275 = (const char *)swift_slowAlloc();
            swift_bridgeObjectRetain();
            String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v275, v273, 1, (uint64_t)v387, v6);
            v281 = v280;
            swift_bridgeObjectRelease();
            if ((v281 & 1) != 0)
            {
              if (v268)
                goto LABEL_348;
              v279 = 0;
            }
            else
            {
              if (v275)
                v279 = strnlen(v275, 0x401uLL);
              else
                v279 = 0;
              if (v268)
                goto LABEL_348;
            }
            MEMORY[0x186DA9E78](v275, -1, -1);
            v147 = (unint64_t)v387;
          }
          swift_bridgeObjectRelease();
          v385 = v268;
          if (v267 <= 255 && v279 < 1025)
          {
            swift_bridgeObjectRelease();
            v128 = v373;
            v371 = v373;
            goto LABEL_109;
          }
          swift_bridgeObjectRelease();
          v371 = v147;
          v148 = v6;
          v149 = v6;
          v128 = v373;
LABEL_249:
          *(_QWORD *)&v397 = MEMORY[0x1E0DEE9E0];
          v282 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)v381);
          v284 = v283;
          v402 = v128;
          *(_QWORD *)&v403 = v130;
          swift_bridgeObjectRetain();
          AnyHashable.init<A>(_:)();
          specialized Dictionary.subscript.setter((uint64_t)&v405, (uint64_t)v282, v284);
          v285 = static String._unconditionallyBridgeFromObjectiveC(_:)(v380);
          v287 = v286;
          v402 = v147;
          *(_QWORD *)&v403 = v149;
          swift_bridgeObjectRetain();
          AnyHashable.init<A>(_:)();
          specialized Dictionary.subscript.setter((uint64_t)&v405, (uint64_t)v285, v287);
          *(_QWORD *)&v404 = v397;
          v288 = static String._unconditionallyBridgeFromObjectiveC(_:)(v376);
          v290 = v289;
          v291 = v371;
          v402 = v371;
          *(_QWORD *)&v403 = v148;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          AnyHashable.init<A>(_:)();
          specialized Dictionary.subscript.setter((uint64_t)&v405, (uint64_t)v288, v290);
          v292 = static String._unconditionallyBridgeFromObjectiveC(_:)(v377);
          v294 = v293;
          URL.init(_fileManagerFailableFileURLWithPath:)(v291, v148, (uint64_t)&v402);
          if (v402)
          {
            v400 = v402;
            v401 = v403;
            lazy protocol witness table accessor for type URL and conformance URL();
            AnyHashable.init<A>(_:)();
          }
          else
          {
            v405 = 0u;
            v406 = 0u;
            v407 = 0;
          }
          v295 = (uint64_t)v393;
          v296 = v372;
          specialized Dictionary.subscript.setter((uint64_t)&v405, (uint64_t)v292, v294);
          static CocoaError._errorWithErrno(_:reading:variant:userInfo:)(v296, 0, 2037411651, 0xE400000000000000, v404, &v405);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v297 = (id)v405;
          v6 = v383;
          LODWORD(v7) = v384;
          v298 = NSFileManager._shouldProceedAfter(error:copyingItemAtPath:to:)(v297, v373, v383, (uint64_t)v387, v384, (SEL *)&selRef_fileManager_shouldProceedAfterError_copyingItemAtURL_toURL_, (SEL *)&selRef_fileManager_shouldProceedAfterError_copyingItemAtPath_toPath_);

          if ((v298 & 1) == 0)
          {
            swift_willThrow();
            swift_release();
            outlined consume of _FTSSequence.Element?(v295, v390, v391, v386);
            swift_bridgeObjectRelease();
            return swift_bridgeObjectRelease();
          }

          outlined consume of _FTSSequence.Element?(v295, v390, v391, v386);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          break;
        case 2u:
        case 5u:
        case 9u:
        case 0xBu:
          goto LABEL_9;
        case 3u:
        case 8u:
          if ((v375 & 1) == 0)
          {
            if (!link(fts_path, v9))
              goto LABEL_9;
            v66 = MEMORY[0x186DA4118]();
            v6 = String.init(cString:)();
            v68 = v67;
            v69 = String.init(cString:)();
            v71 = v70;
            swift_bridgeObjectRetain();
            LODWORD(v393) = v66;
            if (v66 == 63)
              goto LABEL_52;
LABEL_89:
            v391 = v6;
            v81 = v68;
            goto LABEL_90;
          }
          if (v23 < 0)
            goto LABEL_344;
          if (copyfile(fts_path, v9, 0, v23 | 0x10E000F))
          {
            v117 = MEMORY[0x186DA4118]();
            v6 = String.init(cString:)();
            v68 = v118;
            v69 = String.init(cString:)();
            v71 = v119;
            swift_bridgeObjectRetain();
            LODWORD(v393) = v117;
            if (v117 != 63)
              goto LABEL_89;
LABEL_52:
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v72 = String.lastPathComponent.getter(v69, v71);
            v73 = v385;
            v75 = specialized String.withFileSystemRepresentation<A>(_:)(v72, v74);
            swift_bridgeObjectRelease();
            v76 = specialized String.withFileSystemRepresentation<A>(_:)(v69, v71);
            v385 = v73;
            swift_bridgeObjectRelease();
            v78 = v75 > 255 || v76 > 1024;
            v79 = !v78;
            if (v78)
              v80 = v69;
            else
              v80 = v6;
            v391 = v80;
            if (v79)
              v81 = v68;
            else
              v81 = v71;
            swift_bridgeObjectRelease();
LABEL_90:
            v120 = specialized static Array._allocateUninitialized(_:)(0);
            v402 = specialized Dictionary.init(dictionaryLiteral:)(v120);
            v121 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)v381);
            v123 = v122;
            swift_bridgeObjectRetain();
            specialized _convertToAnyHashable<A>(_:)();
            swift_bridgeObjectRelease();
            specialized Dictionary.subscript.setter((uint64_t)&v405, (uint64_t)v121, v123);
            v124 = static String._unconditionallyBridgeFromObjectiveC(_:)(v380);
            v7 = v125;
            swift_bridgeObjectRetain();
            specialized _convertToAnyHashable<A>(_:)();
            swift_bridgeObjectRelease();
            specialized Dictionary.subscript.setter((uint64_t)&v405, (uint64_t)v124, v7);
            static CocoaError.errorWithFilePath(_:errno:reading:variant:additionalUserInfo:)(v391, v81, (Swift::Int32)v393, 0, 2037411651, 0xE400000000000000, v402, &v405);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v111 = (id)v405;
            v112 = v111;
            v113 = v6;
            v114 = v68;
            v115 = v69;
            v116 = v71;
LABEL_91:
            v126 = NSFileManager._shouldProceedAfter(error:copyingItemAtPath:to:)(v111, v113, v114, v115, v116, (SEL *)&selRef_fileManager_shouldProceedAfterError_copyingItemAtURL_toURL_, (SEL *)&selRef_fileManager_shouldProceedAfterError_copyingItemAtPath_toPath_);

            if ((v126 & 1) == 0)
            {
              swift_willThrow();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              return swift_release();
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            goto LABEL_153;
          }
          goto LABEL_9;
        case 4u:
        case 7u:
        case 0xAu:
          fts_errno = v18->fts_errno;
          v6 = String.init(cString:)();
          v32 = v31;
          v33 = String.init(cString:)();
          v35 = v34;
          swift_bridgeObjectRetain();
          LODWORD(v393) = fts_errno;
          if (fts_errno == 63)
          {
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain();
            Path = String._lastPathComponent.getter(v33, v35);
            v38 = v37;
            swift_bridgeObjectRelease();
            v39 = v385;
            v40 = specialized String.withFileSystemRepresentation<A>(_:)(Path, v38);
            swift_bridgeObjectRelease();
            v41 = specialized String.withFileSystemRepresentation<A>(_:)(v33, v35);
            v385 = v39;
            swift_bridgeObjectRelease();
            v43 = v40 > 255 || v41 > 1024;
            if (v43)
              v7 = v33;
            else
              v7 = v6;
            if (v43)
              v44 = v35;
            else
              v44 = v32;
            swift_bridgeObjectRelease();
          }
          else
          {
            v7 = v6;
            v44 = v32;
          }
          v104 = specialized static Array._allocateUninitialized(_:)(0);
          v402 = specialized Dictionary.init(dictionaryLiteral:)(v104);
          v105 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)v381);
          v107 = v106;
          swift_bridgeObjectRetain();
          specialized _convertToAnyHashable<A>(_:)();
          swift_bridgeObjectRelease();
          specialized Dictionary.subscript.setter((uint64_t)&v405, (uint64_t)v105, v107);
          v108 = static String._unconditionallyBridgeFromObjectiveC(_:)(v380);
          v110 = v109;
          swift_bridgeObjectRetain();
          specialized _convertToAnyHashable<A>(_:)();
          swift_bridgeObjectRelease();
          specialized Dictionary.subscript.setter((uint64_t)&v405, (uint64_t)v108, v110);
          static CocoaError.errorWithFilePath(_:errno:reading:variant:additionalUserInfo:)(v7, v44, (Swift::Int32)v393, 0, 2037411651, 0xE400000000000000, v402, &v405);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v111 = (id)v405;
          v112 = v111;
          v113 = v6;
          v114 = v32;
          v115 = v33;
          v116 = v35;
          goto LABEL_91;
        case 6u:
          goto LABEL_37;
        case 0xCu:
        case 0xDu:
          if ((v23 | v374) < 0)
            goto LABEL_344;
          if (!copyfile(fts_path, v9, 0, v23 | v374))
            goto LABEL_9;
          v386 = v19;
          v82 = MEMORY[0x186DA4118]();
          v83 = String.init(cString:)();
          v85 = v84;
          v86 = String.init(cString:)();
          v88 = v87;
          swift_bridgeObjectRetain();
          LODWORD(v387) = v82;
          if (v82 != 63)
          {
            v143 = v83;
            v144 = v85;
            goto LABEL_195;
          }
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          v89 = v385;
          v90 = specialized BidirectionalCollection.lastIndex(where:)(v86, v88);
          if ((v91 & 1) != 0)
          {
            v145 = v86;
            v146 = v88;
            goto LABEL_182;
          }
          if (!(v90 >> 14))
          {
            if (String.count.getter() == 1)
              goto LABEL_163;
            v92 = String.index(after:)();
            v93 = HIBYTE(v88) & 0xF;
            if ((v88 & 0x2000000000000000) == 0)
              v93 = v86 & 0xFFFFFFFFFFFFLL;
            if (4 * v93 < v92 >> 14)
              goto LABEL_337;
            goto LABEL_169;
          }
          if ((v88 & 0x2000000000000000) != 0)
            v190 = HIBYTE(v88) & 0xF;
          else
            v190 = v86 & 0xFFFFFFFFFFFFLL;
          if ((String.index(before:)() ^ v90) >= 0x4000)
          {
            if (4 * v190 < (unint64_t)String.index(after:)() >> 14)
              goto LABEL_336;
LABEL_169:
            v200 = String.subscript.getter();
            v145 = MEMORY[0x186DA4964](v200);
            v146 = v201;
            swift_bridgeObjectRelease();
            goto LABEL_181;
          }
          v191 = String.subscript.getter();
          v193 = specialized BidirectionalCollection.lastIndex(where:)(v191, v192);
          v195 = v194;
          swift_bridgeObjectRelease();
          if ((v195 & 1) != 0)
          {
LABEL_163:
            swift_bridgeObjectRelease();
            v146 = 0xE100000000000000;
            v145 = 47;
            goto LABEL_182;
          }
          v196 = String.subscript.getter();
          specialized BidirectionalCollection.lastIndex(where:)(v196, v197);
          v199 = v198;
          swift_bridgeObjectRelease();
          if ((v199 & 1) == 0 && v193 >> 14 < (unint64_t)String.index(after:)() >> 14)
            goto LABEL_341;
          swift_bridgeObjectRetain();
          v225 = specialized Collection.subscript.getter();
          v227 = v226;
          v229 = v228;
          v231 = v230;
          swift_bridgeObjectRelease();
          v145 = MEMORY[0x186DA4964](v225, v227, v229, v231);
          v146 = v232;
          swift_bridgeObjectRelease();
LABEL_181:
          swift_bridgeObjectRelease();
LABEL_182:
          v233 = specialized String.withFileSystemRepresentation<A>(_:)(v145, v146);
          swift_bridgeObjectRelease();
          v234 = specialized String.withFileSystemRepresentation<A>(_:)(v86, v88);
          v385 = v89;
          swift_bridgeObjectRelease();
          v236 = v233 > 255 || v234 > 1024;
          if (v236)
            v143 = v86;
          else
            v143 = v83;
          if (v236)
            v144 = v88;
          else
            v144 = v85;
          swift_bridgeObjectRelease();
LABEL_195:
          *(_QWORD *)&v397 = MEMORY[0x1E0DEE9E0];
          v237 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)v381);
          v239 = v238;
          v383 = v83;
          v402 = v83;
          *(_QWORD *)&v403 = v85;
          v384 = v85;
          swift_bridgeObjectRetain();
          AnyHashable.init<A>(_:)();
          specialized Dictionary.subscript.setter((uint64_t)&v405, (uint64_t)v237, v239);
          v240 = static String._unconditionallyBridgeFromObjectiveC(_:)(v380);
          v242 = v241;
          v373 = v86;
          v402 = v86;
          *(_QWORD *)&v403 = v88;
          swift_bridgeObjectRetain();
          AnyHashable.init<A>(_:)();
          specialized Dictionary.subscript.setter((uint64_t)&v405, (uint64_t)v240, v242);
          *(_QWORD *)&v404 = v397;
          v243 = static String._unconditionallyBridgeFromObjectiveC(_:)(v376);
          v245 = v244;
          v402 = v143;
          *(_QWORD *)&v403 = v144;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          AnyHashable.init<A>(_:)();
          specialized Dictionary.subscript.setter((uint64_t)&v405, (uint64_t)v243, v245);
          v246 = static String._unconditionallyBridgeFromObjectiveC(_:)(v377);
          v7 = v247;
          URL.init(_fileManagerFailableFileURLWithPath:)(v143, v144, (uint64_t)&v402);
          if (v402)
          {
            v400 = v402;
            v401 = v403;
            lazy protocol witness table accessor for type URL and conformance URL();
            AnyHashable.init<A>(_:)();
          }
          else
          {
            v405 = 0u;
            v406 = 0u;
            v407 = 0;
          }
          v248 = (int)v387;
          specialized Dictionary.subscript.setter((uint64_t)&v405, (uint64_t)v246, v7);
          static CocoaError._errorWithErrno(_:reading:variant:userInfo:)(v248, 0, 2037411651, 0xE400000000000000, v404, &v405);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v249 = (id)v405;
          v6 = v384;
          v250 = NSFileManager._shouldProceedAfter(error:copyingItemAtPath:to:)(v249, v383, v384, v373, v88, (SEL *)&selRef_fileManager_shouldProceedAfterError_copyingItemAtURL_toURL_, (SEL *)&selRef_fileManager_shouldProceedAfterError_copyingItemAtPath_toPath_);

          if ((v250 & 1) == 0)
          {
            swift_willThrow();
            swift_release();
            outlined consume of _FTSSequence.Element?((uint64_t)v393, v390, v391, v386);
            swift_bridgeObjectRelease();
            return swift_bridgeObjectRelease();
          }

          outlined consume of _FTSSequence.Element?((uint64_t)v393, v390, v391, v386);
          swift_bridgeObjectRelease();
          goto LABEL_152;
        default:
          goto LABEL_8;
      }
      goto LABEL_154;
    }
    v23 = v389;
    if (v18->fts_level)
    {
      v23 = 0;
    }
    else
    {
LABEL_37:
      if (v23 < 0)
        goto LABEL_344;
    }
    if (copyfile(fts_path, v9, 0, v23 | 0xC0007))
    {
      v393 = v18;
      v49 = MEMORY[0x186DA4118]();
      v50 = String.init(cString:)();
      v52 = v51;
      v53 = String.init(cString:)();
      v7 = v54;
      swift_bridgeObjectRetain();
      v387 = (_QWORD *)v53;
      v386 = v19;
      v388 = (char *)v50;
      LODWORD(v384) = v49;
      if (v49 != 63)
      {
        v60 = v50;
        v61 = v52;
        v62 = v7;
        v63 = v53;
        goto LABEL_147;
      }
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      v55 = v385;
      v56 = specialized BidirectionalCollection.lastIndex(where:)(v53, v7);
      if ((v57 & 1) != 0)
      {
        v64 = v53;
        v65 = v7;
        goto LABEL_112;
      }
      if (v56 >> 14)
      {
        if ((v7 & 0x2000000000000000) != 0)
          v94 = HIBYTE(v7) & 0xF;
        else
          v94 = v53 & 0xFFFFFFFFFFFFLL;
        if ((String.index(before:)() ^ v56) >= 0x4000)
        {
          if (4 * v94 < (unint64_t)String.index(after:)() >> 14)
            goto LABEL_328;
          goto LABEL_105;
        }
        v95 = String.subscript.getter();
        v97 = specialized BidirectionalCollection.lastIndex(where:)(v95, v96);
        v99 = v98;
        swift_bridgeObjectRelease();
        if ((v99 & 1) == 0)
        {
          v100 = String.subscript.getter();
          specialized BidirectionalCollection.lastIndex(where:)(v100, v101);
          v103 = v102;
          swift_bridgeObjectRelease();
          if ((v103 & 1) == 0 && v97 >> 14 < (unint64_t)String.index(after:)() >> 14)
            goto LABEL_333;
          swift_bridgeObjectRetain();
          v150 = specialized Collection.subscript.getter();
          v152 = v151;
          v154 = v153;
          v156 = v155;
          swift_bridgeObjectRelease();
          v64 = MEMORY[0x186DA4964](v150, v152, v154, v156);
          v65 = v157;
          swift_bridgeObjectRelease();
          goto LABEL_111;
        }
      }
      else if (String.count.getter() != 1)
      {
        v58 = String.index(after:)();
        v59 = HIBYTE(v7) & 0xF;
        if ((v7 & 0x2000000000000000) == 0)
          v59 = v53 & 0xFFFFFFFFFFFFLL;
        if (4 * v59 < v58 >> 14)
          goto LABEL_327;
LABEL_105:
        v141 = String.subscript.getter();
        v64 = MEMORY[0x186DA4964](v141);
        v65 = v142;
        swift_bridgeObjectRelease();
LABEL_111:
        swift_bridgeObjectRelease();
LABEL_112:
        if ((v65 & 0x1000000000000000) != 0)
        {
          v158 = String.UTF8View._foreignCount()();
        }
        else if ((v65 & 0x2000000000000000) != 0)
        {
          v158 = HIBYTE(v65) & 0xF;
        }
        else
        {
          v158 = v64 & 0xFFFFFFFFFFFFLL;
        }
        v159 = 3 * v158;
        if ((unsigned __int128)(v158 * (__int128)3) >> 64 != (3 * v158) >> 63)
          goto LABEL_324;
        if (v159 < -1)
          goto LABEL_326;
        v160 = v159 + 1;
        if (v159 < 1024 || (v158 = swift_stdlib_isStackAllocationSafe(), (v158 & 1) != 0))
        {
          v161 = (const char *)&v371;
          MEMORY[0x1E0C80A78](v158);
          v163 = (char *)&v371 - v162;
          swift_bridgeObjectRetain();
          String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v163, v160, 1, v64, v65);
          v165 = v164;
          swift_bridgeObjectRelease();
          if ((v165 & 1) != 0)
          {
            if (v55)
            {
LABEL_349:
              swift_willThrow();
              __break(1u);
LABEL_350:
              v369 = (uint64_t)v161;
              goto LABEL_351;
            }
            v168 = 0;
            v167 = 0;
          }
          else
          {
            v166 = strnlen(v163, 0x100uLL);
            if (v55)
              goto LABEL_349;
            v167 = v166;
            v168 = 0;
          }
          v50 = (uint64_t)v388;
        }
        else
        {
          v161 = (const char *)swift_slowAlloc();
          swift_bridgeObjectRetain();
          String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v161, v160, 1, v64, v65);
          v170 = v169;
          swift_bridgeObjectRelease();
          if ((v170 & 1) != 0)
          {
            v50 = (uint64_t)v388;
            if (v55)
              goto LABEL_350;
            v168 = 0;
            v167 = 0;
          }
          else
          {
            v50 = (uint64_t)v388;
            if (v161)
            {
              v167 = strnlen(v161, 0x100uLL);
              v168 = v55;
              if (v55)
                goto LABEL_350;
            }
            else
            {
              v167 = 0;
              v168 = v55;
              if (v55)
                goto LABEL_350;
            }
          }
          MEMORY[0x186DA9E78](v161, -1, -1);
        }
        swift_bridgeObjectRelease();
        v63 = (unint64_t)v387;
        v171 = v168;
        v172 = specialized String.withFileSystemRepresentation<A>(_:)((uint64_t)v387, v7);
        v385 = v171;
        swift_bridgeObjectRelease();
        v174 = v167 > 255 || v172 > 1024;
        if (v174)
          v60 = v63;
        else
          v60 = v50;
        if (v174)
          v61 = v7;
        else
          v61 = v52;
        swift_bridgeObjectRelease();
        v62 = v7;
LABEL_147:
        *(_QWORD *)&v397 = MEMORY[0x1E0DEE9E0];
        v175 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)v381);
        v177 = v176;
        v402 = v50;
        *(_QWORD *)&v403 = v52;
        v383 = v52;
        swift_bridgeObjectRetain();
        LODWORD(v7) = MEMORY[0x1E0DEA968];
        AnyHashable.init<A>(_:)();
        specialized Dictionary.subscript.setter((uint64_t)&v405, (uint64_t)v175, v177);
        v178 = static String._unconditionallyBridgeFromObjectiveC(_:)(v380);
        v180 = v179;
        v402 = v63;
        *(_QWORD *)&v403 = v62;
        v181 = v62;
        swift_bridgeObjectRetain();
        AnyHashable.init<A>(_:)();
        specialized Dictionary.subscript.setter((uint64_t)&v405, (uint64_t)v178, v180);
        *(_QWORD *)&v404 = v397;
        v182 = static String._unconditionallyBridgeFromObjectiveC(_:)(v376);
        v184 = v183;
        v402 = v60;
        *(_QWORD *)&v403 = v61;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        AnyHashable.init<A>(_:)();
        specialized Dictionary.subscript.setter((uint64_t)&v405, (uint64_t)v182, v184);
        v185 = static String._unconditionallyBridgeFromObjectiveC(_:)(v377);
        v187 = v186;
        URL.init(_fileManagerFailableFileURLWithPath:)(v60, v61, (uint64_t)&v402);
        if (v402)
        {
          v400 = v402;
          v401 = v403;
          lazy protocol witness table accessor for type URL and conformance URL();
          AnyHashable.init<A>(_:)();
        }
        else
        {
          v405 = 0u;
          v406 = 0u;
          v407 = 0;
        }
        specialized Dictionary.subscript.setter((uint64_t)&v405, (uint64_t)v185, v187);
        static CocoaError._errorWithErrno(_:reading:variant:userInfo:)(v384, 0, 2037411651, 0xE400000000000000, v404, &v405);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v188 = (id)v405;
        v6 = v383;
        v189 = NSFileManager._shouldProceedAfter(error:copyingItemAtPath:to:)(v188, (uint64_t)v388, v383, (uint64_t)v387, v181, (SEL *)&selRef_fileManager_shouldProceedAfterError_copyingItemAtURL_toURL_, (SEL *)&selRef_fileManager_shouldProceedAfterError_copyingItemAtPath_toPath_);

        if ((v189 & 1) == 0)
        {
          swift_willThrow();
          swift_release();
          outlined consume of _FTSSequence.Element?((uint64_t)v393, v390, v391, v386);
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }

        outlined consume of _FTSSequence.Element?((uint64_t)v393, v390, v391, v386);
        swift_bridgeObjectRelease();
LABEL_152:
        swift_bridgeObjectRelease();
LABEL_153:
        v13 = v382;
LABEL_154:
        v9 = v379;
        v12 = v378;
        goto LABEL_9;
      }
      swift_bridgeObjectRelease();
      v65 = 0xE100000000000000;
      v64 = 47;
      goto LABEL_112;
    }
LABEL_9:
    v18 = (FTSENT *)_FTSSequence.Iterator.next()();
    v19 = v21;
    if ((_BYTE)v21 == 0xFF)
      return swift_release();
  }
  v7 = (unint64_t)v18;
  *(_QWORD *)&v397 = MEMORY[0x1E0DEE9E0];
  v300 = v16;
  v301 = v15;
  v302 = static String._unconditionallyBridgeFromObjectiveC(_:)(v376);
  v304 = v303;
  v402 = v301;
  *(_QWORD *)&v403 = v300;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)&v405, (uint64_t)v302, v304);
  v305 = static String._unconditionallyBridgeFromObjectiveC(_:)(v377);
  v307 = v306;
  URL.init(_fileManagerFailableFileURLWithPath:)(v301, v300, (uint64_t)&v402);
  if (v402)
  {
    v400 = v402;
    v401 = v403;
    lazy protocol witness table accessor for type URL and conformance URL();
    AnyHashable.init<A>(_:)();
  }
  else
  {
    v405 = 0u;
    v406 = 0u;
    v407 = 0;
  }
  specialized Dictionary.subscript.setter((uint64_t)&v405, (uint64_t)v305, v307);
  v396 = v397;
  v384 = v397;
  swift_bridgeObjectRetain();
  v308 = v7;
  if ((_DWORD)v7 == 102)
  {
LABEL_262:
    v309 = 256;
  }
  else
  {
    v310 = v19;
    if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
      goto LABEL_352;
    v311 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
    v313 = v312;
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
    v314 = (int)POSIXErrorCode.rawValue.getter();
    v315 = objc_allocWithZone((Class)NSError);
    v316 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v317 = objc_msgSend(v315, sel_initWithDomain_code_userInfo_, v316, v314, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v318 = objc_msgSend(v317, sel_domain);
    v319 = static String._unconditionallyBridgeFromObjectiveC(_:)(v318);
    v321 = v320;

    if (v319 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain")) && v321 == v322)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v323 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v323 & 1) == 0)
        goto LABEL_330;
    }
    v402 = (unint64_t)v317;
    lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v405, (uint64_t)v311, v313);
    v308 = v7;
    v309 = 263;
    v19 = v310;
    switch((int)v7)
    {
      case 1:
      case 13:
        v309 = 257;
        break;
      case 2:
        v309 = 260;
        break;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
        goto LABEL_262;
      case 27:
        break;
      default:
        v19 = v310;
        if ((_DWORD)v7 != 63)
          goto LABEL_262;
        v309 = 258;
        break;
    }
  }
  v324 = v396;
  v325 = *(_QWORD *)(v396 + 16);
  v393 = (FTSENT *)v308;
  v386 = v19;
  v383 = v309;
  if (v325)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v326 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v326 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  v327 = *(_QWORD *)(v324 + 64);
  v389 = v324 + 64;
  v328 = -1;
  v329 = -1 << *(_BYTE *)(v324 + 32);
  v381 = ~v329;
  if (-v329 < 64)
    v328 = ~(-1 << -(char)v329);
  v330 = v328 & v327;
  v388 = (char *)((unint64_t)(63 - v329) >> 6);
  v331 = &v406;
  v332 = (__int128 *)((char *)&v401 + 8);
  v333 = (__int128 *)((char *)&v403 + 8);
  v387 = v326 + 8;
  swift_bridgeObjectRetain();
  v394 = 0;
  v392 = (id)(MEMORY[0x1E0DEE9B8] + 8);
  while (2)
  {
    if (v330)
    {
      v395 = (v330 - 1) & v330;
      v340 = __clz(__rbit64(v330)) | ((_QWORD)v394 << 6);
      goto LABEL_303;
    }
    v341 = v394 + 1;
    if (__OFADD__(v394, 1))
      goto LABEL_323;
    if ((uint64_t)v341 < (uint64_t)v388)
    {
      v342 = *(_QWORD *)(v389 + 8 * (_QWORD)v341);
      if (!v342)
      {
        v343 = v394 + 2;
        if ((uint64_t)(v394 + 2) >= (uint64_t)v388)
          break;
        v342 = *(_QWORD *)(v389 + 8 * (_QWORD)v343);
        if (!v342)
        {
          v343 = v394 + 3;
          if ((uint64_t)(v394 + 3) >= (uint64_t)v388)
            break;
          v342 = *(_QWORD *)(v389 + 8 * (_QWORD)v343);
          if (!v342)
          {
            v343 = v394 + 4;
            if ((uint64_t)(v394 + 4) >= (uint64_t)v388)
              break;
            v342 = *(_QWORD *)(v389 + 8 * (_QWORD)v343);
            if (!v342)
            {
              v343 = v394 + 5;
              if ((uint64_t)(v394 + 5) >= (uint64_t)v388)
                break;
              v342 = *(_QWORD *)(v389 + 8 * (_QWORD)v343);
              if (!v342)
              {
                v343 = v394 + 6;
                if ((uint64_t)(v394 + 6) >= (uint64_t)v388)
                  break;
                v342 = *(_QWORD *)(v389 + 8 * (_QWORD)v343);
                if (!v342)
                {
                  v343 = v394 + 7;
                  if ((uint64_t)(v394 + 7) >= (uint64_t)v388)
                    break;
                  v342 = *(_QWORD *)(v389 + 8 * (_QWORD)v343);
                  if (!v342)
                  {
                    while (1)
                    {
                      v341 = v343 + 1;
                      if (__OFADD__(v343, 1))
                        break;
                      if ((uint64_t)v341 >= (uint64_t)v388)
                        goto LABEL_311;
                      v342 = *(_QWORD *)(v389 + 8 * (_QWORD)v341);
                      ++v343;
                      if (v342)
                        goto LABEL_302;
                    }
LABEL_329:
                    __break(1u);
LABEL_330:
                    __break(1u);
LABEL_331:
                    __break(1u);
LABEL_332:
                    __break(1u);
LABEL_333:
                    __break(1u);
LABEL_334:
                    __break(1u);
LABEL_335:
                    __break(1u);
LABEL_336:
                    __break(1u);
LABEL_337:
                    __break(1u);
LABEL_338:
                    __break(1u);
LABEL_339:
                    __break(1u);
LABEL_340:
                    __break(1u);
LABEL_341:
                    __break(1u);
LABEL_342:
                    __break(1u);
                  }
                }
              }
            }
          }
        }
        v341 = v343;
      }
LABEL_302:
      v395 = (v342 - 1) & v342;
      v340 = __clz(__rbit64(v342)) + ((_QWORD)v341 << 6);
      v394 = v341;
LABEL_303:
      v344 = (unint64_t *)(*(_QWORD *)(v324 + 48) + 16 * v340);
      v346 = *v344;
      v345 = v344[1];
      outlined init with copy of AnyHashable(*(_QWORD *)(v324 + 56) + 40 * v340, (uint64_t)v331);
      *(_QWORD *)&v405 = v346;
      *((_QWORD *)&v405 + 1) = v345;
      v347 = v331[1];
      v397 = *v331;
      v398 = v347;
      v399 = *((_QWORD *)v331 + 4);
      v400 = v346;
      *(_QWORD *)&v401 = v345;
      swift_bridgeObjectRetain();
      swift_dynamicCast();
      v348 = v400;
      v349 = v401;
      outlined init with take of Any(v332, v333);
      outlined init with take of Any(v333, &v404);
      outlined init with take of Any(&v404, &v402);
      v350 = specialized __RawDictionaryStorage.find<A>(_:)(v348, v349);
      v351 = v350;
      if ((v352 & 1) != 0)
      {
        v334 = v331;
        v335 = v333;
        v336 = v332;
        v337 = v324;
        v338 = (uint64_t *)(v326[6] + 16 * v350);
        swift_bridgeObjectRelease();
        *v338 = v348;
        v338[1] = v349;
        v324 = v337;
        v332 = v336;
        v333 = v335;
        v331 = v334;
        v339 = (_OWORD *)(v326[7] + 32 * v351);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v339);
        outlined init with take of Any(&v402, v339);
LABEL_283:
        v330 = v395;
        continue;
      }
      if (v326[2] < v326[3])
      {
        *(_QWORD *)((char *)v387 + ((v350 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v350;
        v353 = (uint64_t *)(v326[6] + 16 * v350);
        *v353 = v348;
        v353[1] = v349;
        outlined init with take of Any(&v402, (_OWORD *)(v326[7] + 32 * v350));
        v354 = v326[2];
        v355 = __OFADD__(v354, 1);
        v356 = v354 + 1;
        if (v355)
          goto LABEL_322;
        v326[2] = v356;
        goto LABEL_283;
      }
      __break(1u);
LABEL_322:
      __break(1u);
LABEL_323:
      __break(1u);
LABEL_324:
      __break(1u);
LABEL_325:
      __break(1u);
LABEL_326:
      __break(1u);
LABEL_327:
      __break(1u);
LABEL_328:
      __break(1u);
      goto LABEL_329;
    }
    break;
  }
LABEL_311:
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v357 = objc_allocWithZone((Class)NSError);
  v358 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v359 = objc_msgSend(v357, sel_initWithDomain_code_userInfo_, v358, v383, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v360 = objc_msgSend(v359, sel_domain);
  v361 = static String._unconditionallyBridgeFromObjectiveC(_:)(v360);
  v363 = v362;

  if (v361 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v363 == v364)
  {
LABEL_317:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    v367 = (uint64_t)v393;
    v368 = v386;
  }
  else
  {
    v366 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v367 = (uint64_t)v393;
    v368 = v386;
    if ((v366 & 1) == 0)
    {
      __break(1u);
      goto LABEL_317;
    }
  }
  swift_willThrow();
  swift_release();
  return outlined consume of _FTSSequence.Element?(v367, v390, v391, v368);
}

uint64_t specialized closure #1 in static _FileOperations._linkOrCopyFile<A>(_:_:with:delegate:)(char *a1, int a2, char *__source, const char *a4, int a5, void *a6)
{
  const char *v7;
  size_t v8;
  size_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  FTSENT *v16;
  int v17;
  copyfile_flags_t v18;
  int v19;
  const char *fts_path;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int fts_errno;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t Path;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int64_t v51;
  int64_t v52;
  _BOOL4 v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  char v83;
  char v84;
  unint64_t v85;
  unint64_t v86;
  char v87;
  char v88;
  uint64_t v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  id v96;
  void *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  int v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  int64_t v112;
  int64_t v113;
  _BOOL4 v115;
  BOOL v116;
  uint64_t v117;
  unint64_t v118;
  Swift::Int32 v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  uint64_t v132;
  unint64_t v133;
  Swift::Int isStackAllocationSafe;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  id v138;
  uint64_t v139;
  uint64_t v140;
  id v141;
  uint64_t v142;
  uint64_t v143;
  unsigned __int8 v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  Swift::Int v160;
  uint64_t v161;
  uint64_t v162;
  const char *v163;
  uint64_t v164;
  const char *v165;
  char v166;
  char v167;
  size_t v168;
  int64_t v169;
  uint64_t v170;
  char v171;
  char v172;
  uint64_t v173;
  int64_t v174;
  _BOOL4 v176;
  id v177;
  uint64_t v178;
  uint64_t v179;
  id v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  id v184;
  uint64_t v185;
  uint64_t v186;
  id v187;
  uint64_t v188;
  uint64_t v189;
  id v190;
  unsigned __int8 v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  char v196;
  char v197;
  unint64_t v198;
  unint64_t v199;
  char v200;
  char v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char v206;
  char v207;
  size_t v208;
  int64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  char v213;
  char v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  char v218;
  char v219;
  unint64_t v220;
  uint64_t v221;
  unint64_t v222;
  char v223;
  char v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  int64_t v237;
  int64_t v238;
  _BOOL4 v240;
  id v241;
  uint64_t v242;
  uint64_t v243;
  id v244;
  uint64_t v245;
  uint64_t v246;
  id v247;
  uint64_t v248;
  uint64_t v249;
  id v250;
  uint64_t v251;
  uint64_t v252;
  Swift::Int32 v253;
  id v254;
  unsigned __int8 v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  const char *v260;
  char v261;
  char v262;
  size_t v263;
  int64_t v264;
  char v265;
  char v266;
  unint64_t v267;
  id v268;
  uint64_t v269;
  uint64_t v270;
  id v271;
  uint64_t v272;
  uint64_t v273;
  id v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  id v278;
  uint64_t v279;
  uint64_t v280;
  id v281;
  unsigned __int8 v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t v290;
  unint64_t v292;
  uint64_t v293;
  id v294;
  uint64_t v295;
  uint64_t v296;
  id v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  int v302;
  id v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  id v307;
  uint64_t v308;
  id v309;
  id v310;
  id v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  char v315;
  uint64_t v316;
  uint64_t v317;
  _QWORD *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t v322;
  __int128 *v323;
  _OWORD *v324;
  _OWORD *v325;
  __int128 *v326;
  _OWORD *v327;
  _OWORD *v328;
  uint64_t v329;
  uint64_t *v330;
  _OWORD *v331;
  unint64_t v332;
  char *v333;
  unint64_t v334;
  char *v335;
  unint64_t *v336;
  unint64_t v337;
  unint64_t v338;
  __int128 v339;
  uint64_t v340;
  uint64_t v341;
  unint64_t v342;
  unint64_t v343;
  char v344;
  uint64_t *v345;
  uint64_t v346;
  BOOL v347;
  uint64_t v348;
  id v349;
  uint64_t v350;
  id v351;
  id v352;
  id v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  char v358;
  uint64_t v359;
  unsigned __int8 v360;
  uint64_t v361;
  Swift::String v362;
  unint64_t v363;
  Swift::Int32 v364;
  unint64_t v365;
  copyfile_flags_t v366;
  int v367;
  __CFString *v368;
  __CFString *v369;
  size_t v370;
  const char *v371;
  uint64_t v372;
  __CFString *v373;
  uint64_t v374;
  unint64_t v375;
  uint64_t v376;
  int v377;
  _QWORD *v378;
  uint64_t v379;
  _QWORD *v380;
  uint64_t v381;
  uint64_t v382;
  id v383;
  FTSENT *v384;
  char *v385;
  size_t v386;
  uint64_t v387;
  __int128 v388;
  __int128 v389;
  uint64_t v390;
  unint64_t v391;
  __int128 v392;
  unint64_t v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  uint64_t v398;
  uint64_t v399;

  v383 = a6;
  v367 = a5;
  v399 = *MEMORY[0x1E0C80C00];
  if (!a1)
    goto LABEL_330;
  v7 = a1;
  v8 = strlcpy(a1, __source, 0x402uLL);
  v9 = strlen(a4);
  v386 = 1026 - v8;
  if (__OFSUB__(1026, v8))
    goto LABEL_313;
  v10 = v9;
  type metadata accessor for _FTSSequence.Iterator();
  swift_allocObject();
  v11 = _FTSSequence.Iterator.init(_:_:)(a4, 20);
  v12 = _FTSSequence.Iterator.next()();
  if ((_BYTE)v15 == 0xFF)
    return swift_release();
  v16 = (FTSENT *)v12;
  v17 = v15;
  v385 = (char *)&v7[v8];
  v373 = CFSTR("NSSourceFilePathErrorKey");
  v372 = (uint64_t)CFSTR("NSDestinationFilePath");
  if ((v367 & 1) != 0)
    v18 = 17694735;
  else
    v18 = 917519;
  v366 = v18;
  v368 = CFSTR("NSFilePath");
  v369 = CFSTR("NSURL");
  v374 = v11;
  v371 = v7;
  v370 = v10;
  while (1)
  {
    v382 = v14;
    v381 = v13;
    if ((v17 & 1) != 0)
      break;
    fts_path = v16->fts_path;
    if (!fts_path)
      goto LABEL_326;
    strlcpy(v385, &fts_path[v10], v386);
    if (v16->fts_info != 6)
    {
      v33 = v11;
      v34 = v383;
      v35 = String.init(cString:)();
      v37 = v36;
      v38 = String.init(cString:)();
      v384 = v16;
      LOBYTE(v35) = NSFileManager._shouldCopyItemAtPath(_:to:)(v35, v37, v38, v39, (SEL *)&selRef_fileManager_shouldLinkItemAtURL_toURL_, (SEL *)&selRef_fileManager_shouldLinkItemAtPath_toPath_);
      v380 = v34;

      swift_bridgeObjectRelease();
      v16 = v384;
      swift_bridgeObjectRelease();
      if ((v35 & 1) == 0)
      {
        if (v16->fts_info == 1)
        {
          v11 = v33;
          if (!*(_BYTE *)(v33 + 40))
          {
            fts_set(*(FTS **)(v33 + 16), v16, 4);
            v57 = _FTSSequence.Iterator.next()();
            outlined consume of _FTSSequence.Element?(v57, v58, v59, v60);
          }
        }
        else
        {
LABEL_8:
          v11 = v33;
        }
        goto LABEL_9;
      }
      v11 = v33;
      switch(v16->fts_info)
      {
        case 1u:
          if (!copyfile(fts_path, v7, 0, 0xE0008u))
            goto LABEL_9;
          v119 = MEMORY[0x186DA4118]();
          v120 = String.init(cString:)();
          v122 = v121;
          v124 = String.init(cString:)();
          v125 = v123;
          v364 = v119;
          v378 = (_QWORD *)v123;
          v375 = v122;
          v379 = v124;
          v377 = v17;
          v365 = v120;
          if (v119 != 63)
          {
            swift_bridgeObjectRetain();
            v363 = v120;
            v149 = v124;
LABEL_103:
            v150 = v122;
            v151 = v125;
            goto LABEL_235;
          }
          if ((v123 & 0x2000000000000000) != 0)
            v27 = HIBYTE(v123) & 0xF;
          else
            v27 = v124 & 0xFFFFFFFFFFFFLL;
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          v126 = v376;
          if (v27)
          {
            v127 = 4 * v27;
            while (1)
            {
              v128 = String.index(before:)();
              *(_QWORD *)&v396 = String.subscript.getter();
              *((_QWORD *)&v396 + 1) = v129;
              v130 = v126;
              v131 = closure #1 in String._lastPathComponent.getter(&v396);
              swift_bridgeObjectRelease();
              if ((v131 & 1) != 0)
                break;
              v126 = v130;
              v125 = (uint64_t)v378;
              v124 = v379;
              if (v128 < 0x4000)
                goto LABEL_90;
            }
            if (v128 >> 14)
            {
              v363 = v27;
              LODWORD(v27) = v379;
              v126 = v130;
              if ((String.index(before:)() ^ v128) >= 0x4000)
              {
                if (v127 < (unint64_t)String.index(after:)() >> 14)
                  goto LABEL_327;
                v227 = String.subscript.getter();
                v132 = MEMORY[0x186DA4964](v227);
                v133 = v228;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              else
              {
                v215 = String.subscript.getter();
                v217 = specialized BidirectionalCollection.lastIndex(where:)(v215, v216);
                v219 = v218;
                swift_bridgeObjectRelease();
                if ((v219 & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  v133 = 0xE100000000000000;
                  v132 = 47;
                }
                else
                {
                  v220 = String.subscript.getter();
                  v125 = v221;
                  specialized BidirectionalCollection.lastIndex(where:)(v220, v222);
                  v224 = v223;
                  v376 = v130;
                  swift_bridgeObjectRelease();
                  if ((v224 & 1) == 0 && v217 >> 14 < (unint64_t)String.index(after:)() >> 14)
                  {
                    __break(1u);
LABEL_332:
                    swift_willThrow();
                    __break(1u);
LABEL_333:
                    v361 = v125;
LABEL_338:
                    MEMORY[0x186DA9E78](v361, -1, -1);
                    __break(1u);
LABEL_339:
                    *(_QWORD *)&v396 = 0;
                    *((_QWORD *)&v396 + 1) = 0xE000000000000000;
                    _StringGuts.grow(_:)(22);
                    swift_bridgeObjectRelease();
                    *(_QWORD *)&v396 = 0xD000000000000014;
                    *((_QWORD *)&v396 + 1) = 0x8000000182306980;
                    LODWORD(v393) = v27;
                    v362._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                    String.append(_:)(v362);
                    swift_bridgeObjectRelease();
                    _assertionFailure(_:_:file:line:flags:)();
                    __break(1u);
                    JUMPOUT(0x181ACD198);
                  }
                  swift_bridgeObjectRetain();
                  v283 = specialized Collection.subscript.getter();
                  v285 = v284;
                  v287 = v286;
                  v289 = v288;
                  swift_bridgeObjectRelease();
                  v132 = MEMORY[0x186DA4964](v283, v285, v287, v289);
                  v133 = v290;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v126 = v376;
                }
              }
              v27 = v363;
            }
            else
            {
              v126 = v130;
              if (String.count.getter() == 1)
              {
                swift_bridgeObjectRelease();
                v133 = 0xE100000000000000;
                v132 = 47;
              }
              else
              {
                if (v127 < (unint64_t)String.index(after:)() >> 14)
                  goto LABEL_328;
                v225 = String.subscript.getter();
                v132 = MEMORY[0x186DA4964](v225);
                v133 = v226;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
            }
          }
          else
          {
LABEL_90:
            v132 = v124;
            v133 = v125;
          }
          if ((v133 & 0x1000000000000000) != 0)
          {
            isStackAllocationSafe = String.UTF8View._foreignCount()();
          }
          else if ((v133 & 0x2000000000000000) != 0)
          {
            isStackAllocationSafe = HIBYTE(v133) & 0xF;
          }
          else
          {
            isStackAllocationSafe = v132 & 0xFFFFFFFFFFFFLL;
          }
          v202 = 3 * isStackAllocationSafe;
          if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
            goto LABEL_319;
          if (v202 < -1)
            goto LABEL_322;
          v203 = v126;
          v204 = v202 + 1;
          if (v202 < 1024
            || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
          {
            MEMORY[0x1E0C80A78](isStackAllocationSafe);
            v125 = (uint64_t)&v363 - v205;
            swift_bridgeObjectRetain();
            String._decomposed(_:into:nullTerminated:)(1, v125, v204, 1, v132, v133);
            v207 = v206;
            swift_bridgeObjectRelease();
            if ((v207 & 1) != 0)
            {
              v125 = (uint64_t)v378;
              if (v203)
                goto LABEL_332;
              v210 = 0;
              v209 = 0;
            }
            else
            {
              v208 = strnlen((const char *)v125, 0x100uLL);
              if (v203)
                goto LABEL_332;
              v209 = v208;
              v210 = 0;
              v125 = (uint64_t)v378;
            }
          }
          else
          {
            v125 = swift_slowAlloc();
            swift_bridgeObjectRetain();
            String._decomposed(_:into:nullTerminated:)(1, v125, v204, 1, v132, v133);
            v214 = v213;
            swift_bridgeObjectRelease();
            if ((v214 & 1) != 0)
            {
              if (v203)
                goto LABEL_333;
              v210 = 0;
              v209 = 0;
            }
            else
            {
              v210 = v203;
              if (v125)
                v209 = strnlen((const char *)v125, 0x100uLL);
              else
                v209 = 0;
              if (v203)
                goto LABEL_333;
            }
            MEMORY[0x186DA9E78](v125, -1, -1);
            v125 = (uint64_t)v378;
          }
          v256 = swift_bridgeObjectRelease();
          if ((v125 & 0x1000000000000000) != 0)
          {
            v256 = String.UTF8View._foreignCount()();
            v27 = v256;
          }
          v257 = 3 * v27;
          if ((unsigned __int128)((uint64_t)v27 * (__int128)3) >> 64 != (uint64_t)(3 * v27) >> 63)
            goto LABEL_320;
          if (v257 < -1)
            goto LABEL_323;
          v258 = v257 + 1;
          if (v257 < 1024 || (v256 = swift_stdlib_isStackAllocationSafe(), (v256 & 1) != 0))
          {
            MEMORY[0x1E0C80A78](v256);
            v260 = (char *)&v363 - v259;
            swift_bridgeObjectRetain();
            String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v260, v258, 1, v379, v125);
            v262 = v261;
            swift_bridgeObjectRelease();
            if ((v262 & 1) != 0)
            {
              if (v210)
              {
LABEL_334:
                swift_willThrow();
                __break(1u);
LABEL_335:
                v361 = (uint64_t)v260;
                goto LABEL_338;
              }
              v264 = 0;
            }
            else
            {
              v263 = strnlen(v260, 0x401uLL);
              if (v210)
                goto LABEL_334;
              v264 = v263;
            }
            v149 = v379;
            v125 = (uint64_t)v378;
          }
          else
          {
            v260 = (const char *)swift_slowAlloc();
            swift_bridgeObjectRetain();
            String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v260, v258, 1, v379, v125);
            v266 = v265;
            swift_bridgeObjectRelease();
            if ((v266 & 1) != 0)
            {
              if (v210)
                goto LABEL_335;
              v264 = 0;
            }
            else
            {
              if (v260)
                v264 = strnlen(v260, 0x401uLL);
              else
                v264 = 0;
              if (v210)
                goto LABEL_335;
            }
            MEMORY[0x186DA9E78](v260, -1, -1);
            v149 = v379;
          }
          v267 = v375;
          swift_bridgeObjectRelease();
          v376 = v210;
          if (v209 <= 255)
          {
            if (v264 < 1025)
            {
              swift_bridgeObjectRelease();
              v120 = v365;
              v363 = v365;
              v122 = v375;
              goto LABEL_103;
            }
            v122 = v375;
            swift_bridgeObjectRelease();
            v363 = v149;
            v150 = v125;
            v151 = v125;
          }
          else
          {
            swift_bridgeObjectRelease();
            v363 = v149;
            v150 = v125;
            v151 = v125;
            v122 = v267;
          }
          v120 = v365;
LABEL_235:
          *(_QWORD *)&v388 = MEMORY[0x1E0DEE9E0];
          v268 = static String._unconditionallyBridgeFromObjectiveC(_:)(v373);
          v270 = v269;
          v393 = v120;
          *(_QWORD *)&v394 = v122;
          swift_bridgeObjectRetain();
          AnyHashable.init<A>(_:)();
          specialized Dictionary.subscript.setter((uint64_t)&v396, (uint64_t)v268, v270);
          v271 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)v372);
          v273 = v272;
          v393 = v149;
          *(_QWORD *)&v394 = v151;
          swift_bridgeObjectRetain();
          AnyHashable.init<A>(_:)();
          specialized Dictionary.subscript.setter((uint64_t)&v396, (uint64_t)v271, v273);
          *(_QWORD *)&v395 = v388;
          v274 = static String._unconditionallyBridgeFromObjectiveC(_:)(v368);
          v276 = v275;
          v277 = v363;
          v393 = v363;
          *(_QWORD *)&v394 = v150;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          AnyHashable.init<A>(_:)();
          specialized Dictionary.subscript.setter((uint64_t)&v396, (uint64_t)v274, v276);
          v278 = static String._unconditionallyBridgeFromObjectiveC(_:)(v369);
          v280 = v279;
          URL.init(_fileManagerFailableFileURLWithPath:)(v277, v150, (uint64_t)&v393);
          if (v393)
          {
            v391 = v393;
            v392 = v394;
            lazy protocol witness table accessor for type URL and conformance URL();
            AnyHashable.init<A>(_:)();
          }
          else
          {
            v396 = 0u;
            v397 = 0u;
            v398 = 0;
          }
          specialized Dictionary.subscript.setter((uint64_t)&v396, (uint64_t)v278, v280);
          static CocoaError._errorWithErrno(_:reading:variant:userInfo:)(v364, 0, 1802398028, 0xE400000000000000, v395, &v396);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v281 = (id)v396;
          v282 = NSFileManager._shouldProceedAfter(error:copyingItemAtPath:to:)(v281, v365, v375, v379, (unint64_t)v378, (SEL *)&selRef_fileManager_shouldProceedAfterError_linkingItemAtURL_toURL_, (SEL *)&selRef_fileManager_shouldProceedAfterError_linkingItemAtPath_toPath_);

          if ((v282 & 1) == 0)
            goto LABEL_307;

          outlined consume of _FTSSequence.Element?((uint64_t)v384, v381, v382, v377);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          break;
        case 2u:
        case 5u:
        case 9u:
        case 0xBu:
          goto LABEL_9;
        case 3u:
        case 8u:
          if ((v367 & 1) != 0)
          {
            if (!copyfile(fts_path, v7, 0, 0x10E000Fu))
              goto LABEL_9;
          }
          else if (!link(fts_path, v7))
          {
            goto LABEL_9;
          }
          v102 = MEMORY[0x186DA4118]();
          v103 = String.init(cString:)();
          v105 = v104;
          v106 = String.init(cString:)();
          v108 = v107;
          swift_bridgeObjectRetain();
          LODWORD(v384) = v102;
          if (v102 == 63)
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v109 = String.lastPathComponent.getter(v106, v108);
            v110 = v376;
            v112 = specialized String.withFileSystemRepresentation<A>(_:)(v109, v111);
            swift_bridgeObjectRelease();
            v113 = specialized String.withFileSystemRepresentation<A>(_:)(v106, v108);
            v376 = v110;
            swift_bridgeObjectRelease();
            v115 = v112 > 255 || v113 > 1024;
            v116 = !v115;
            if (v115)
              v117 = v106;
            else
              v117 = v103;
            v382 = v117;
            if (v116)
              v118 = v105;
            else
              v118 = v108;
            swift_bridgeObjectRelease();
          }
          else
          {
            v382 = v103;
            v118 = v105;
          }
          v137 = specialized static Array._allocateUninitialized(_:)(0);
          v393 = specialized Dictionary.init(dictionaryLiteral:)(v137);
          v138 = static String._unconditionallyBridgeFromObjectiveC(_:)(v373);
          v140 = v139;
          swift_bridgeObjectRetain();
          specialized _convertToAnyHashable<A>(_:)();
          swift_bridgeObjectRelease();
          specialized Dictionary.subscript.setter((uint64_t)&v396, (uint64_t)v138, v140);
          v141 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)v372);
          v143 = v142;
          swift_bridgeObjectRetain();
          specialized _convertToAnyHashable<A>(_:)();
          swift_bridgeObjectRelease();
          specialized Dictionary.subscript.setter((uint64_t)&v396, (uint64_t)v141, v143);
          static CocoaError.errorWithFilePath(_:errno:reading:variant:additionalUserInfo:)(v382, v118, (Swift::Int32)v384, 0, 1802398028, 0xE400000000000000, v393, &v396);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v96 = (id)v396;
          v97 = v96;
          v98 = v103;
          v99 = v105;
          v100 = v106;
          v101 = v108;
LABEL_98:
          v144 = NSFileManager._shouldProceedAfter(error:copyingItemAtPath:to:)(v96, v98, v99, v100, v101, (SEL *)&selRef_fileManager_shouldProceedAfterError_linkingItemAtURL_toURL_, (SEL *)&selRef_fileManager_shouldProceedAfterError_linkingItemAtPath_toPath_);

          if ((v144 & 1) == 0)
          {
            swift_willThrow();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return swift_release();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          goto LABEL_147;
        case 4u:
        case 7u:
        case 0xAu:
          fts_errno = v16->fts_errno;
          v41 = String.init(cString:)();
          v43 = v42;
          v44 = String.init(cString:)();
          v46 = v45;
          swift_bridgeObjectRetain();
          LODWORD(v384) = fts_errno;
          if (fts_errno == 63)
          {
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain();
            Path = String._lastPathComponent.getter(v44, v46);
            v49 = v48;
            swift_bridgeObjectRelease();
            v50 = v376;
            v51 = specialized String.withFileSystemRepresentation<A>(_:)(Path, v49);
            swift_bridgeObjectRelease();
            v52 = specialized String.withFileSystemRepresentation<A>(_:)(v44, v46);
            v376 = v50;
            swift_bridgeObjectRelease();
            v54 = v51 > 255 || v52 > 1024;
            if (v54)
              v55 = v44;
            else
              v55 = v41;
            if (v54)
              v56 = v46;
            else
              v56 = v43;
            swift_bridgeObjectRelease();
          }
          else
          {
            v55 = v41;
            v56 = v43;
          }
          v89 = specialized static Array._allocateUninitialized(_:)(0);
          v393 = specialized Dictionary.init(dictionaryLiteral:)(v89);
          v90 = static String._unconditionallyBridgeFromObjectiveC(_:)(v373);
          v92 = v91;
          swift_bridgeObjectRetain();
          specialized _convertToAnyHashable<A>(_:)();
          swift_bridgeObjectRelease();
          specialized Dictionary.subscript.setter((uint64_t)&v396, (uint64_t)v90, v92);
          v93 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)v372);
          v95 = v94;
          swift_bridgeObjectRetain();
          specialized _convertToAnyHashable<A>(_:)();
          swift_bridgeObjectRelease();
          specialized Dictionary.subscript.setter((uint64_t)&v396, (uint64_t)v93, v95);
          static CocoaError.errorWithFilePath(_:errno:reading:variant:additionalUserInfo:)(v55, v56, (Swift::Int32)v384, 0, 1802398028, 0xE400000000000000, v393, &v396);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v96 = (id)v396;
          v97 = v96;
          v98 = v41;
          v99 = v43;
          v100 = v44;
          v101 = v46;
          goto LABEL_98;
        case 6u:
          goto LABEL_13;
        case 0xCu:
        case 0xDu:
          if (!copyfile(fts_path, v7, 0, v366))
            goto LABEL_9;
          v377 = v17;
          v67 = MEMORY[0x186DA4118]();
          v68 = String.init(cString:)();
          v70 = v69;
          v71 = String.init(cString:)();
          v73 = v72;
          swift_bridgeObjectRetain();
          LODWORD(v379) = v67;
          if (v67 != 63)
          {
            v145 = v68;
            v146 = v70;
            goto LABEL_202;
          }
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          v74 = v376;
          v75 = specialized BidirectionalCollection.lastIndex(where:)(v71, v73);
          if ((v76 & 1) != 0)
          {
            v147 = v71;
            v148 = v73;
            goto LABEL_189;
          }
          if (!(v75 >> 14))
          {
            if (String.count.getter() == 1)
              goto LABEL_165;
            v77 = String.index(after:)();
            v78 = HIBYTE(v73) & 0xF;
            if ((v73 & 0x2000000000000000) == 0)
              v78 = v71 & 0xFFFFFFFFFFFFLL;
            if (4 * v78 < v77 >> 14)
              goto LABEL_325;
            goto LABEL_172;
          }
          if ((v73 & 0x2000000000000000) != 0)
            v192 = HIBYTE(v73) & 0xF;
          else
            v192 = v71 & 0xFFFFFFFFFFFFLL;
          if ((String.index(before:)() ^ v75) >= 0x4000)
          {
            if (4 * v192 < (unint64_t)String.index(after:)() >> 14)
              goto LABEL_324;
LABEL_172:
            v211 = String.subscript.getter();
            v147 = MEMORY[0x186DA4964](v211);
            v148 = v212;
            swift_bridgeObjectRelease();
            goto LABEL_188;
          }
          v193 = String.subscript.getter();
          v195 = specialized BidirectionalCollection.lastIndex(where:)(v193, v194);
          v197 = v196;
          swift_bridgeObjectRelease();
          if ((v197 & 1) != 0)
          {
LABEL_165:
            swift_bridgeObjectRelease();
            v148 = 0xE100000000000000;
            v147 = 47;
            goto LABEL_189;
          }
          v198 = String.subscript.getter();
          specialized BidirectionalCollection.lastIndex(where:)(v198, v199);
          v201 = v200;
          swift_bridgeObjectRelease();
          if ((v201 & 1) == 0 && v195 >> 14 < (unint64_t)String.index(after:)() >> 14)
            goto LABEL_329;
          swift_bridgeObjectRetain();
          v229 = specialized Collection.subscript.getter();
          v231 = v230;
          v233 = v232;
          v235 = v234;
          swift_bridgeObjectRelease();
          v147 = MEMORY[0x186DA4964](v229, v231, v233, v235);
          v148 = v236;
          swift_bridgeObjectRelease();
LABEL_188:
          swift_bridgeObjectRelease();
LABEL_189:
          v237 = specialized String.withFileSystemRepresentation<A>(_:)(v147, v148);
          swift_bridgeObjectRelease();
          v238 = specialized String.withFileSystemRepresentation<A>(_:)(v71, v73);
          v376 = v74;
          swift_bridgeObjectRelease();
          v240 = v237 > 255 || v238 > 1024;
          if (v240)
            v145 = v71;
          else
            v145 = v68;
          if (v240)
            v146 = v73;
          else
            v146 = v70;
          swift_bridgeObjectRelease();
LABEL_202:
          *(_QWORD *)&v388 = MEMORY[0x1E0DEE9E0];
          v241 = static String._unconditionallyBridgeFromObjectiveC(_:)(v373);
          v243 = v242;
          v375 = v68;
          v393 = v68;
          *(_QWORD *)&v394 = v70;
          v378 = (_QWORD *)v70;
          swift_bridgeObjectRetain();
          AnyHashable.init<A>(_:)();
          specialized Dictionary.subscript.setter((uint64_t)&v396, (uint64_t)v241, v243);
          v244 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)v372);
          v246 = v245;
          v365 = v71;
          v393 = v71;
          *(_QWORD *)&v394 = v73;
          swift_bridgeObjectRetain();
          AnyHashable.init<A>(_:)();
          specialized Dictionary.subscript.setter((uint64_t)&v396, (uint64_t)v244, v246);
          *(_QWORD *)&v395 = v388;
          v247 = static String._unconditionallyBridgeFromObjectiveC(_:)(v368);
          v249 = v248;
          v393 = v145;
          *(_QWORD *)&v394 = v146;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          AnyHashable.init<A>(_:)();
          specialized Dictionary.subscript.setter((uint64_t)&v396, (uint64_t)v247, v249);
          v250 = static String._unconditionallyBridgeFromObjectiveC(_:)(v369);
          v252 = v251;
          URL.init(_fileManagerFailableFileURLWithPath:)(v145, v146, (uint64_t)&v393);
          if (v393)
          {
            v391 = v393;
            v392 = v394;
            lazy protocol witness table accessor for type URL and conformance URL();
            AnyHashable.init<A>(_:)();
          }
          else
          {
            v396 = 0u;
            v397 = 0u;
            v398 = 0;
          }
          v253 = v379;
          specialized Dictionary.subscript.setter((uint64_t)&v396, (uint64_t)v250, v252);
          static CocoaError._errorWithErrno(_:reading:variant:userInfo:)(v253, 0, 1802398028, 0xE400000000000000, v395, &v396);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v254 = (id)v396;
          v255 = NSFileManager._shouldProceedAfter(error:copyingItemAtPath:to:)(v254, v375, (unint64_t)v378, v365, v73, (SEL *)&selRef_fileManager_shouldProceedAfterError_linkingItemAtURL_toURL_, (SEL *)&selRef_fileManager_shouldProceedAfterError_linkingItemAtPath_toPath_);

          if ((v255 & 1) == 0)
          {
LABEL_307:
            swift_willThrow();
            swift_release();
            outlined consume of _FTSSequence.Element?((uint64_t)v384, v381, v382, v377);
            swift_bridgeObjectRelease();
            return swift_bridgeObjectRelease();
          }

          outlined consume of _FTSSequence.Element?((uint64_t)v384, v381, v382, v377);
          swift_bridgeObjectRelease();
          goto LABEL_146;
        default:
          goto LABEL_8;
      }
      goto LABEL_148;
    }
LABEL_13:
    if (copyfile(fts_path, v7, 0, 0xC0007u))
    {
      v384 = v16;
      v21 = MEMORY[0x186DA4118]();
      v22 = String.init(cString:)();
      v24 = v23;
      v25 = String.init(cString:)();
      v27 = v26;
      swift_bridgeObjectRetain();
      v379 = v25;
      v377 = v17;
      v380 = (_QWORD *)v22;
      LODWORD(v378) = v21;
      if (v21 == 63)
      {
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        v28 = v376;
        v29 = specialized BidirectionalCollection.lastIndex(where:)(v25, v27);
        if ((v30 & 1) != 0)
        {
          v65 = v25;
          v66 = v27;
          goto LABEL_106;
        }
        if (v29 >> 14)
        {
          if ((v27 & 0x2000000000000000) != 0)
            v79 = HIBYTE(v27) & 0xF;
          else
            v79 = v25 & 0xFFFFFFFFFFFFLL;
          if ((String.index(before:)() ^ v29) >= 0x4000)
          {
            if (4 * v79 < (unint64_t)String.index(after:)() >> 14)
              goto LABEL_316;
            goto LABEL_95;
          }
          v80 = String.subscript.getter();
          v82 = specialized BidirectionalCollection.lastIndex(where:)(v80, v81);
          v84 = v83;
          swift_bridgeObjectRelease();
          if ((v84 & 1) == 0)
          {
            v85 = String.subscript.getter();
            specialized BidirectionalCollection.lastIndex(where:)(v85, v86);
            v88 = v87;
            swift_bridgeObjectRelease();
            if ((v88 & 1) == 0 && v82 >> 14 < (unint64_t)String.index(after:)() >> 14)
              goto LABEL_321;
            swift_bridgeObjectRetain();
            v152 = specialized Collection.subscript.getter();
            v154 = v153;
            v156 = v155;
            v158 = v157;
            swift_bridgeObjectRelease();
            v65 = MEMORY[0x186DA4964](v152, v154, v156, v158);
            v66 = v159;
            swift_bridgeObjectRelease();
            goto LABEL_105;
          }
        }
        else if (String.count.getter() != 1)
        {
          v31 = String.index(after:)();
          v32 = HIBYTE(v27) & 0xF;
          if ((v27 & 0x2000000000000000) == 0)
            v32 = v25 & 0xFFFFFFFFFFFFLL;
          if (4 * v32 < v31 >> 14)
            goto LABEL_315;
LABEL_95:
          v135 = String.subscript.getter();
          v65 = MEMORY[0x186DA4964](v135);
          v66 = v136;
          swift_bridgeObjectRelease();
LABEL_105:
          swift_bridgeObjectRelease();
LABEL_106:
          if ((v66 & 0x1000000000000000) != 0)
          {
            v160 = String.UTF8View._foreignCount()();
          }
          else if ((v66 & 0x2000000000000000) != 0)
          {
            v160 = HIBYTE(v66) & 0xF;
          }
          else
          {
            v160 = v65 & 0xFFFFFFFFFFFFLL;
          }
          v161 = 3 * v160;
          if ((unsigned __int128)(v160 * (__int128)3) >> 64 != (3 * v160) >> 63)
            goto LABEL_312;
          if (v161 < -1)
            goto LABEL_314;
          v162 = v161 + 1;
          if (v161 < 1024 || (v160 = swift_stdlib_isStackAllocationSafe(), (v160 & 1) != 0))
          {
            v163 = (const char *)&v363;
            MEMORY[0x1E0C80A78](v160);
            v165 = (char *)&v363 - v164;
            swift_bridgeObjectRetain();
            String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v165, v162, 1, v65, v66);
            v167 = v166;
            swift_bridgeObjectRelease();
            if ((v167 & 1) != 0)
            {
              if (v28)
              {
LABEL_336:
                swift_willThrow();
                __break(1u);
LABEL_337:
                v361 = (uint64_t)v163;
                goto LABEL_338;
              }
              v170 = 0;
              v169 = 0;
            }
            else
            {
              v168 = strnlen(v165, 0x100uLL);
              if (v28)
                goto LABEL_336;
              v169 = v168;
              v170 = 0;
            }
            v22 = (uint64_t)v380;
          }
          else
          {
            v163 = (const char *)swift_slowAlloc();
            swift_bridgeObjectRetain();
            String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v163, v162, 1, v65, v66);
            v172 = v171;
            swift_bridgeObjectRelease();
            if ((v172 & 1) != 0)
            {
              v22 = (uint64_t)v380;
              if (v28)
                goto LABEL_337;
              v170 = 0;
              v169 = 0;
            }
            else
            {
              v22 = (uint64_t)v380;
              if (v163)
              {
                v169 = strnlen(v163, 0x100uLL);
                v170 = v28;
                if (v28)
                  goto LABEL_337;
              }
              else
              {
                v169 = 0;
                v170 = v28;
                if (v28)
                  goto LABEL_337;
              }
            }
            MEMORY[0x186DA9E78](v163, -1, -1);
          }
          swift_bridgeObjectRelease();
          v64 = v379;
          v173 = v170;
          v174 = specialized String.withFileSystemRepresentation<A>(_:)(v379, v27);
          v376 = v173;
          swift_bridgeObjectRelease();
          v176 = v169 > 255 || v174 > 1024;
          if (v176)
            v61 = v64;
          else
            v61 = v22;
          if (v176)
            v62 = v27;
          else
            v62 = v24;
          swift_bridgeObjectRelease();
          v63 = v27;
LABEL_141:
          *(_QWORD *)&v388 = MEMORY[0x1E0DEE9E0];
          v177 = static String._unconditionallyBridgeFromObjectiveC(_:)(v373);
          v179 = v178;
          v393 = v22;
          *(_QWORD *)&v394 = v24;
          v375 = v24;
          swift_bridgeObjectRetain();
          AnyHashable.init<A>(_:)();
          specialized Dictionary.subscript.setter((uint64_t)&v396, (uint64_t)v177, v179);
          v180 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)v372);
          v182 = v181;
          v393 = v64;
          *(_QWORD *)&v394 = v63;
          v183 = v63;
          swift_bridgeObjectRetain();
          AnyHashable.init<A>(_:)();
          specialized Dictionary.subscript.setter((uint64_t)&v396, (uint64_t)v180, v182);
          *(_QWORD *)&v395 = v388;
          v184 = static String._unconditionallyBridgeFromObjectiveC(_:)(v368);
          v186 = v185;
          v393 = v61;
          *(_QWORD *)&v394 = v62;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          AnyHashable.init<A>(_:)();
          specialized Dictionary.subscript.setter((uint64_t)&v396, (uint64_t)v184, v186);
          v187 = static String._unconditionallyBridgeFromObjectiveC(_:)(v369);
          v189 = v188;
          URL.init(_fileManagerFailableFileURLWithPath:)(v61, v62, (uint64_t)&v393);
          if (v393)
          {
            v391 = v393;
            v392 = v394;
            lazy protocol witness table accessor for type URL and conformance URL();
            AnyHashable.init<A>(_:)();
          }
          else
          {
            v396 = 0u;
            v397 = 0u;
            v398 = 0;
          }
          specialized Dictionary.subscript.setter((uint64_t)&v396, (uint64_t)v187, v189);
          static CocoaError._errorWithErrno(_:reading:variant:userInfo:)((Swift::Int32)v378, 0, 1802398028, 0xE400000000000000, v395, &v396);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v190 = (id)v396;
          v191 = NSFileManager._shouldProceedAfter(error:copyingItemAtPath:to:)(v190, (uint64_t)v380, v375, v379, v183, (SEL *)&selRef_fileManager_shouldProceedAfterError_linkingItemAtURL_toURL_, (SEL *)&selRef_fileManager_shouldProceedAfterError_linkingItemAtPath_toPath_);

          if ((v191 & 1) == 0)
            goto LABEL_307;

          outlined consume of _FTSSequence.Element?((uint64_t)v384, v381, v382, v377);
          swift_bridgeObjectRelease();
LABEL_146:
          swift_bridgeObjectRelease();
LABEL_147:
          v11 = v374;
LABEL_148:
          v7 = v371;
          v10 = v370;
          goto LABEL_9;
        }
        swift_bridgeObjectRelease();
        v66 = 0xE100000000000000;
        v65 = 47;
        goto LABEL_106;
      }
      v61 = v22;
      v62 = v24;
      v63 = v27;
      v64 = v25;
      goto LABEL_141;
    }
LABEL_9:
    v16 = (FTSENT *)_FTSSequence.Iterator.next()();
    v17 = v19;
    if ((_BYTE)v19 == 0xFF)
      return swift_release();
  }
  v27 = (unint64_t)v16;
  *(_QWORD *)&v388 = MEMORY[0x1E0DEE9E0];
  v292 = v14;
  v293 = v13;
  v294 = static String._unconditionallyBridgeFromObjectiveC(_:)(v368);
  v296 = v295;
  v393 = v293;
  *(_QWORD *)&v394 = v292;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)&v396, (uint64_t)v294, v296);
  v297 = static String._unconditionallyBridgeFromObjectiveC(_:)(v369);
  v299 = v298;
  URL.init(_fileManagerFailableFileURLWithPath:)(v293, v292, (uint64_t)&v393);
  if (v393)
  {
    v391 = v393;
    v392 = v394;
    lazy protocol witness table accessor for type URL and conformance URL();
    AnyHashable.init<A>(_:)();
  }
  else
  {
    v396 = 0u;
    v397 = 0u;
    v398 = 0;
  }
  v300 = v27;
  specialized Dictionary.subscript.setter((uint64_t)&v396, (uint64_t)v297, v299);
  v387 = v388;
  v375 = v388;
  swift_bridgeObjectRetain();
  if ((_DWORD)v27 == 102)
  {
LABEL_251:
    v301 = 256;
  }
  else
  {
    v302 = v17;
    if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
      goto LABEL_339;
    v303 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
    v305 = v304;
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
    v306 = (int)POSIXErrorCode.rawValue.getter();
    v307 = objc_allocWithZone((Class)NSError);
    v308 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v309 = objc_msgSend(v307, sel_initWithDomain_code_userInfo_, v308, v306, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v310 = objc_msgSend(v309, sel_domain);
    v311 = static String._unconditionallyBridgeFromObjectiveC(_:)(v310);
    v313 = v312;

    if (v311 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain")) && v313 == v314)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v315 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v315 & 1) == 0)
        goto LABEL_318;
    }
    v393 = (unint64_t)v309;
    lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v396, (uint64_t)v303, v305);
    v300 = v27;
    v301 = 263;
    v17 = v302;
    switch((int)v27)
    {
      case 1:
      case 13:
        v301 = 257;
        break;
      case 2:
        v301 = 260;
        break;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
        goto LABEL_251;
      case 27:
        break;
      default:
        v17 = v302;
        if ((_DWORD)v27 != 63)
          goto LABEL_251;
        v301 = 258;
        break;
    }
  }
  v373 = (__CFString *)v301;
  v316 = v387;
  v317 = *(_QWORD *)(v387 + 16);
  v384 = (FTSENT *)v300;
  v377 = v17;
  if (v317)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v318 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v318 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  v319 = *(_QWORD *)(v316 + 64);
  v380 = (_QWORD *)(v316 + 64);
  v320 = -1;
  v321 = -1 << *(_BYTE *)(v316 + 32);
  v372 = ~v321;
  if (-v321 < 64)
    v320 = ~(-1 << -(char)v321);
  v322 = v320 & v319;
  v379 = (unint64_t)(63 - v321) >> 6;
  v323 = &v397;
  v324 = (__int128 *)((char *)&v392 + 8);
  v325 = (__int128 *)((char *)&v394 + 8);
  v378 = v318 + 8;
  swift_bridgeObjectRetain();
  v385 = 0;
  v383 = (id)(MEMORY[0x1E0DEE9B8] + 8);
  while (2)
  {
    if (v322)
    {
      v386 = (v322 - 1) & v322;
      v332 = __clz(__rbit64(v322)) | ((_QWORD)v385 << 6);
      goto LABEL_291;
    }
    v333 = v385 + 1;
    if (__OFADD__(v385, 1))
      goto LABEL_311;
    if ((uint64_t)v333 < v379)
    {
      v334 = v380[(_QWORD)v333];
      if (!v334)
      {
        v335 = v385 + 2;
        if ((uint64_t)(v385 + 2) >= v379)
          break;
        v334 = v380[(_QWORD)v335];
        if (!v334)
        {
          v335 = v385 + 3;
          if ((uint64_t)(v385 + 3) >= v379)
            break;
          v334 = v380[(_QWORD)v335];
          if (!v334)
          {
            v335 = v385 + 4;
            if ((uint64_t)(v385 + 4) >= v379)
              break;
            v334 = v380[(_QWORD)v335];
            if (!v334)
            {
              v335 = v385 + 5;
              if ((uint64_t)(v385 + 5) >= v379)
                break;
              v334 = v380[(_QWORD)v335];
              if (!v334)
              {
                v335 = v385 + 6;
                if ((uint64_t)(v385 + 6) >= v379)
                  break;
                v334 = v380[(_QWORD)v335];
                if (!v334)
                {
                  v335 = v385 + 7;
                  if ((uint64_t)(v385 + 7) >= v379)
                    break;
                  v334 = v380[(_QWORD)v335];
                  if (!v334)
                  {
                    while (1)
                    {
                      v333 = v335 + 1;
                      if (__OFADD__(v335, 1))
                        break;
                      if ((uint64_t)v333 >= v379)
                        goto LABEL_299;
                      v334 = v380[(_QWORD)v333];
                      ++v335;
                      if (v334)
                        goto LABEL_290;
                    }
LABEL_317:
                    __break(1u);
LABEL_318:
                    __break(1u);
LABEL_319:
                    __break(1u);
LABEL_320:
                    __break(1u);
LABEL_321:
                    __break(1u);
LABEL_322:
                    __break(1u);
LABEL_323:
                    __break(1u);
LABEL_324:
                    __break(1u);
LABEL_325:
                    __break(1u);
LABEL_326:
                    __break(1u);
LABEL_327:
                    __break(1u);
LABEL_328:
                    __break(1u);
LABEL_329:
                    __break(1u);
LABEL_330:
                    __break(1u);
                  }
                }
              }
            }
          }
        }
        v333 = v335;
      }
LABEL_290:
      v386 = (v334 - 1) & v334;
      v332 = __clz(__rbit64(v334)) + ((_QWORD)v333 << 6);
      v385 = v333;
LABEL_291:
      v336 = (unint64_t *)(*(_QWORD *)(v316 + 48) + 16 * v332);
      v338 = *v336;
      v337 = v336[1];
      outlined init with copy of AnyHashable(*(_QWORD *)(v316 + 56) + 40 * v332, (uint64_t)v323);
      *(_QWORD *)&v396 = v338;
      *((_QWORD *)&v396 + 1) = v337;
      v339 = v323[1];
      v388 = *v323;
      v389 = v339;
      v390 = *((_QWORD *)v323 + 4);
      v391 = v338;
      *(_QWORD *)&v392 = v337;
      swift_bridgeObjectRetain();
      swift_dynamicCast();
      v340 = v391;
      v341 = v392;
      outlined init with take of Any(v324, v325);
      outlined init with take of Any(v325, &v395);
      outlined init with take of Any(&v395, &v393);
      v342 = specialized __RawDictionaryStorage.find<A>(_:)(v340, v341);
      v343 = v342;
      if ((v344 & 1) != 0)
      {
        v326 = v323;
        v327 = v325;
        v328 = v324;
        v329 = v316;
        v330 = (uint64_t *)(v318[6] + 16 * v342);
        swift_bridgeObjectRelease();
        *v330 = v340;
        v330[1] = v341;
        v316 = v329;
        v324 = v328;
        v325 = v327;
        v323 = v326;
        v331 = (_OWORD *)(v318[7] + 32 * v343);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v331);
        outlined init with take of Any(&v393, v331);
LABEL_271:
        v322 = v386;
        continue;
      }
      if (v318[2] < v318[3])
      {
        *(_QWORD *)((char *)v378 + ((v342 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v342;
        v345 = (uint64_t *)(v318[6] + 16 * v342);
        *v345 = v340;
        v345[1] = v341;
        outlined init with take of Any(&v393, (_OWORD *)(v318[7] + 32 * v342));
        v346 = v318[2];
        v347 = __OFADD__(v346, 1);
        v348 = v346 + 1;
        if (v347)
          goto LABEL_310;
        v318[2] = v348;
        goto LABEL_271;
      }
      __break(1u);
LABEL_310:
      __break(1u);
LABEL_311:
      __break(1u);
LABEL_312:
      __break(1u);
LABEL_313:
      __break(1u);
LABEL_314:
      __break(1u);
LABEL_315:
      __break(1u);
LABEL_316:
      __break(1u);
      goto LABEL_317;
    }
    break;
  }
LABEL_299:
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v349 = objc_allocWithZone((Class)NSError);
  v350 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v351 = objc_msgSend(v349, sel_initWithDomain_code_userInfo_, v350, v373, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v352 = objc_msgSend(v351, sel_domain);
  v353 = static String._unconditionallyBridgeFromObjectiveC(_:)(v352);
  v355 = v354;

  if (v353 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v355 == v356)
  {
LABEL_305:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    v359 = (uint64_t)v384;
    v360 = v377;
  }
  else
  {
    v358 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v359 = (uint64_t)v384;
    v360 = v377;
    if ((v358 & 1) == 0)
    {
      __break(1u);
      goto LABEL_305;
    }
  }
  swift_willThrow();
  swift_release();
  return outlined consume of _FTSSequence.Element?(v359, v381, v382, v360);
}

unint64_t specialized closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t result;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __int128 *v27;
  _OWORD *v28;
  _OWORD *v29;
  __int128 *v30;
  _OWORD *v31;
  uint64_t v32;
  uint64_t *v33;
  _OWORD *v34;
  unint64_t v35;
  int64_t v36;
  unint64_t v37;
  int64_t v38;
  int64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  uint64_t *v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  id v54;
  id v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v61;
  _QWORD v62[10];
  _QWORD *v63;
  char *v64;
  int64_t v65;
  uint64_t v66;
  uint64_t v67;
  int64_t i;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  _OWORD v75[2];
  _OWORD v76[2];
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  char v80;
  int v81;
  uint64_t v82;
  uint64_t v83;

  v80 = a7 & 1;
  v81 = HIDWORD(a7);
  v82 = a8;
  if (a1)
  {
    MEMORY[0x1E0C80A78](a1);
    v62[2] = v8;
    v62[3] = v9;
    v62[4] = v10;
    v62[5] = v11;
    v62[6] = &v80;
    return specialized String.withFileSystemRepresentation<A>(_:)((uint64_t (*)(char *))partial apply for specialized closure #1 in closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:), (uint64_t)v62, v8, v9);
  }
  *(_QWORD *)&v69 = MEMORY[0x1E0DEE9E0];
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
  v17 = v16;
  v74 = a2;
  *(_QWORD *)&v75[0] = a3;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)&v77, (uint64_t)v15, v17);
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
  v20 = v19;
  URL.init(_fileManagerFailableFileURLWithPath:)(a2, a3, (uint64_t)&v74);
  if (v74)
  {
    v72 = v74;
    v73 = v75[0];
    lazy protocol witness table accessor for type URL and conformance URL();
    AnyHashable.init<A>(_:)();
  }
  else
  {
    v77 = 0u;
    v78 = 0u;
    v79 = 0;
  }
  specialized Dictionary.subscript.setter((uint64_t)&v77, (uint64_t)v18, v20);
  v21 = v69;
  if (*(_QWORD *)(v69 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v22 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v22 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  v23 = *(_QWORD *)(v69 + 64);
  v66 = v69 + 64;
  v24 = -1;
  v25 = -1 << *(_BYTE *)(v69 + 32);
  v62[9] = ~v25;
  if (-v25 < 64)
    v24 = ~(-1 << -(char)v25);
  v26 = v24 & v23;
  v65 = (unint64_t)(63 - v25) >> 6;
  v27 = &v78;
  v28 = (__int128 *)((char *)&v73 + 8);
  v29 = (_OWORD *)((char *)v75 + 8);
  v63 = v22 + 8;
  result = swift_bridgeObjectRetain();
  i = 0;
  v67 = MEMORY[0x1E0DEE9B8] + 8;
  v64 = (char *)v75 + 8;
  if (v26)
    goto LABEL_14;
LABEL_15:
  v36 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_48;
  if (v36 >= v65)
    goto LABEL_38;
  v37 = *(_QWORD *)(v66 + 8 * v36);
  v38 = i + 1;
  if (!v37)
  {
    v38 = i + 2;
    if (i + 2 >= v65)
      goto LABEL_38;
    v37 = *(_QWORD *)(v66 + 8 * v38);
    if (!v37)
    {
      v38 = i + 3;
      if (i + 3 >= v65)
        goto LABEL_38;
      v37 = *(_QWORD *)(v66 + 8 * v38);
      if (!v37)
      {
        v38 = i + 4;
        if (i + 4 >= v65)
          goto LABEL_38;
        v37 = *(_QWORD *)(v66 + 8 * v38);
        if (!v37)
        {
          v38 = i + 5;
          if (i + 5 >= v65)
            goto LABEL_38;
          v37 = *(_QWORD *)(v66 + 8 * v38);
          if (!v37)
          {
            v39 = i + 6;
            if (i + 6 < v65)
            {
              v37 = *(_QWORD *)(v66 + 8 * v39);
              if (v37)
              {
                v38 = i + 6;
                goto LABEL_32;
              }
              while (1)
              {
                v38 = v39 + 1;
                if (__OFADD__(v39, 1))
                  goto LABEL_49;
                if (v38 >= v65)
                  break;
                v37 = *(_QWORD *)(v66 + 8 * v38);
                ++v39;
                if (v37)
                  goto LABEL_32;
              }
            }
LABEL_38:
            outlined consume of Set<A1>.Iterator._Variant<A><A1>();
            swift_bridgeObjectRelease();
            static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
            v52 = objc_allocWithZone((Class)NSError);
            v53 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            v54 = objc_msgSend(v52, sel_initWithDomain_code_userInfo_, v53, 260, _NativeDictionary.bridged()());
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            v55 = objc_msgSend(v54, sel_domain);
            v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
            v58 = v57;

            if (v56 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"))
              || v58 != v59)
            {
              v61 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v61 & 1) != 0)
                return swift_willThrow();
              __break(1u);
            }
            swift_bridgeObjectRelease_n();
            return swift_willThrow();
          }
        }
      }
    }
  }
LABEL_32:
  v83 = (v37 - 1) & v37;
  v35 = __clz(__rbit64(v37)) + (v38 << 6);
  for (i = v38; ; v35 = __clz(__rbit64(v26)) | (i << 6))
  {
    v40 = (uint64_t *)(*(_QWORD *)(v21 + 48) + 16 * v35);
    v42 = *v40;
    v41 = v40[1];
    outlined init with copy of AnyHashable(*(_QWORD *)(v21 + 56) + 40 * v35, (uint64_t)v27);
    *(_QWORD *)&v77 = v42;
    *((_QWORD *)&v77 + 1) = v41;
    v43 = v27[1];
    v69 = *v27;
    v70 = v43;
    v71 = *((_QWORD *)v27 + 4);
    v72 = v42;
    *(_QWORD *)&v73 = v41;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    v44 = v42;
    v45 = v73;
    outlined init with take of Any(v28, v29);
    outlined init with take of Any(v29, v76);
    outlined init with take of Any(v76, &v74);
    result = specialized __RawDictionaryStorage.find<A>(_:)(v42, v73);
    v46 = result;
    if ((v47 & 1) != 0)
    {
      v30 = v27;
      v31 = v28;
      v32 = v21;
      v33 = (uint64_t *)(v22[6] + 16 * result);
      swift_bridgeObjectRelease();
      *v33 = v44;
      v33[1] = v45;
      v21 = v32;
      v28 = v31;
      v27 = v30;
      v29 = v64;
      v34 = (_OWORD *)(v22[7] + 32 * v46);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
      result = (unint64_t)outlined init with take of Any(&v74, v34);
      v26 = v83;
      if (!v83)
        goto LABEL_15;
      goto LABEL_14;
    }
    if (v22[2] >= v22[3])
      break;
    *(_QWORD *)((char *)v63 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v48 = (uint64_t *)(v22[6] + 16 * result);
    *v48 = v44;
    v48[1] = v45;
    result = (unint64_t)outlined init with take of Any(&v74, (_OWORD *)(v22[7] + 32 * result));
    v49 = v22[2];
    v50 = __OFADD__(v49, 1);
    v51 = v49 + 1;
    if (v50)
      goto LABEL_47;
    v22[2] = v51;
    v26 = v83;
    if (!v83)
      goto LABEL_15;
LABEL_14:
    v83 = (v26 - 1) & v26;
  }
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
  return result;
}

unint64_t specialized closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t result;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __int128 *v27;
  _OWORD *v28;
  _OWORD *v29;
  __int128 *v30;
  _OWORD *v31;
  uint64_t v32;
  uint64_t *v33;
  _OWORD *v34;
  unint64_t v35;
  int64_t v36;
  unint64_t v37;
  int64_t v38;
  int64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  uint64_t *v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  id v54;
  id v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v61;
  _QWORD v62[10];
  _QWORD *v63;
  char *v64;
  int64_t v65;
  uint64_t v66;
  uint64_t v67;
  int64_t i;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  _OWORD v75[2];
  _OWORD v76[2];
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;

  v80 = a7;
  v81 = a8;
  if (a1)
  {
    MEMORY[0x1E0C80A78](a1);
    v62[2] = v8;
    v62[3] = v9;
    v62[4] = v10;
    v62[5] = v11;
    v62[6] = &v80;
    return specialized String.withFileSystemRepresentation<A>(_:)((uint64_t (*)(char *))partial apply for specialized closure #1 in closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:), (uint64_t)v62, v8, v9);
  }
  *(_QWORD *)&v69 = MEMORY[0x1E0DEE9E0];
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
  v17 = v16;
  v74 = a2;
  *(_QWORD *)&v75[0] = a3;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)&v77, (uint64_t)v15, v17);
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
  v20 = v19;
  URL.init(_fileManagerFailableFileURLWithPath:)(a2, a3, (uint64_t)&v74);
  if (v74)
  {
    v72 = v74;
    v73 = v75[0];
    lazy protocol witness table accessor for type URL and conformance URL();
    AnyHashable.init<A>(_:)();
  }
  else
  {
    v77 = 0u;
    v78 = 0u;
    v79 = 0;
  }
  specialized Dictionary.subscript.setter((uint64_t)&v77, (uint64_t)v18, v20);
  v21 = v69;
  if (*(_QWORD *)(v69 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v22 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v22 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  v23 = *(_QWORD *)(v69 + 64);
  v66 = v69 + 64;
  v24 = -1;
  v25 = -1 << *(_BYTE *)(v69 + 32);
  v62[9] = ~v25;
  if (-v25 < 64)
    v24 = ~(-1 << -(char)v25);
  v26 = v24 & v23;
  v65 = (unint64_t)(63 - v25) >> 6;
  v27 = &v78;
  v28 = (__int128 *)((char *)&v73 + 8);
  v29 = (_OWORD *)((char *)v75 + 8);
  v63 = v22 + 8;
  result = swift_bridgeObjectRetain();
  i = 0;
  v67 = MEMORY[0x1E0DEE9B8] + 8;
  v64 = (char *)v75 + 8;
  if (v26)
    goto LABEL_14;
LABEL_15:
  v36 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_48;
  if (v36 >= v65)
    goto LABEL_38;
  v37 = *(_QWORD *)(v66 + 8 * v36);
  v38 = i + 1;
  if (!v37)
  {
    v38 = i + 2;
    if (i + 2 >= v65)
      goto LABEL_38;
    v37 = *(_QWORD *)(v66 + 8 * v38);
    if (!v37)
    {
      v38 = i + 3;
      if (i + 3 >= v65)
        goto LABEL_38;
      v37 = *(_QWORD *)(v66 + 8 * v38);
      if (!v37)
      {
        v38 = i + 4;
        if (i + 4 >= v65)
          goto LABEL_38;
        v37 = *(_QWORD *)(v66 + 8 * v38);
        if (!v37)
        {
          v38 = i + 5;
          if (i + 5 >= v65)
            goto LABEL_38;
          v37 = *(_QWORD *)(v66 + 8 * v38);
          if (!v37)
          {
            v39 = i + 6;
            if (i + 6 < v65)
            {
              v37 = *(_QWORD *)(v66 + 8 * v39);
              if (v37)
              {
                v38 = i + 6;
                goto LABEL_32;
              }
              while (1)
              {
                v38 = v39 + 1;
                if (__OFADD__(v39, 1))
                  goto LABEL_49;
                if (v38 >= v65)
                  break;
                v37 = *(_QWORD *)(v66 + 8 * v38);
                ++v39;
                if (v37)
                  goto LABEL_32;
              }
            }
LABEL_38:
            outlined consume of Set<A1>.Iterator._Variant<A><A1>();
            swift_bridgeObjectRelease();
            static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
            v52 = objc_allocWithZone((Class)NSError);
            v53 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            v54 = objc_msgSend(v52, sel_initWithDomain_code_userInfo_, v53, 260, _NativeDictionary.bridged()());
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            v55 = objc_msgSend(v54, sel_domain);
            v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
            v58 = v57;

            if (v56 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"))
              || v58 != v59)
            {
              v61 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v61 & 1) != 0)
                return swift_willThrow();
              __break(1u);
            }
            swift_bridgeObjectRelease_n();
            return swift_willThrow();
          }
        }
      }
    }
  }
LABEL_32:
  v82 = (v37 - 1) & v37;
  v35 = __clz(__rbit64(v37)) + (v38 << 6);
  for (i = v38; ; v35 = __clz(__rbit64(v26)) | (i << 6))
  {
    v40 = (uint64_t *)(*(_QWORD *)(v21 + 48) + 16 * v35);
    v42 = *v40;
    v41 = v40[1];
    outlined init with copy of AnyHashable(*(_QWORD *)(v21 + 56) + 40 * v35, (uint64_t)v27);
    *(_QWORD *)&v77 = v42;
    *((_QWORD *)&v77 + 1) = v41;
    v43 = v27[1];
    v69 = *v27;
    v70 = v43;
    v71 = *((_QWORD *)v27 + 4);
    v72 = v42;
    *(_QWORD *)&v73 = v41;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    v44 = v42;
    v45 = v73;
    outlined init with take of Any(v28, v29);
    outlined init with take of Any(v29, v76);
    outlined init with take of Any(v76, &v74);
    result = specialized __RawDictionaryStorage.find<A>(_:)(v42, v73);
    v46 = result;
    if ((v47 & 1) != 0)
    {
      v30 = v27;
      v31 = v28;
      v32 = v21;
      v33 = (uint64_t *)(v22[6] + 16 * result);
      swift_bridgeObjectRelease();
      *v33 = v44;
      v33[1] = v45;
      v21 = v32;
      v28 = v31;
      v27 = v30;
      v29 = v64;
      v34 = (_OWORD *)(v22[7] + 32 * v46);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
      result = (unint64_t)outlined init with take of Any(&v74, v34);
      v26 = v82;
      if (!v82)
        goto LABEL_15;
      goto LABEL_14;
    }
    if (v22[2] >= v22[3])
      break;
    *(_QWORD *)((char *)v63 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v48 = (uint64_t *)(v22[6] + 16 * result);
    *v48 = v44;
    v48[1] = v45;
    result = (unint64_t)outlined init with take of Any(&v74, (_OWORD *)(v22[7] + 32 * result));
    v49 = v22[2];
    v50 = __OFADD__(v49, 1);
    v51 = v49 + 1;
    if (v50)
      goto LABEL_47;
    v22[2] = v51;
    v26 = v82;
    if (!v82)
      goto LABEL_15;
LABEL_14:
    v82 = (v26 - 1) & v26;
  }
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
  return result;
}

unint64_t specialized closure #1 in closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:)(char *a1, uint64_t a2, unint64_t a3, const char *a4, uint64_t a5, uint64_t a6, void *a7)
{
  unint64_t result;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __int128 *v21;
  _OWORD *v22;
  uint64_t *v23;
  __int128 *v24;
  uint64_t *v25;
  _OWORD *v26;
  uint64_t v27;
  uint64_t *v28;
  _OWORD *v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t *v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  id v47;
  id v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v54;
  int64_t v55;
  uint64_t v56;
  int64_t i;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  _OWORD v62[2];
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;

  if (a1)
    return specialized static _FileOperations._linkOrCopyFile<A>(_:_:with:delegate:)(a4, a1, a6 & 0xFFFFFFFF00000001, a7);
  v58 = MEMORY[0x1E0DEE9E0];
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
  v12 = v11;
  *(_QWORD *)&v60 = a2;
  *((_QWORD *)&v60 + 1) = a3;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)&v63, (uint64_t)v10, v12);
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
  v15 = v14;
  URL.init(_fileManagerFailableFileURLWithPath:)(a2, a3, (uint64_t)&v60);
  if ((_QWORD)v60)
  {
    *((_QWORD *)&v59 + 1) = v61;
    lazy protocol witness table accessor for type URL and conformance URL();
    AnyHashable.init<A>(_:)();
  }
  else
  {
    v63 = 0u;
    v64 = 0u;
    v65 = 0;
  }
  specialized Dictionary.subscript.setter((uint64_t)&v63, (uint64_t)v13, v15);
  v16 = v58;
  if (*(_QWORD *)(v58 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v17 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v17 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  v56 = v58 + 64;
  v18 = -1;
  v19 = -1 << *(_BYTE *)(v58 + 32);
  if (-v19 < 64)
    v18 = ~(-1 << -(char)v19);
  v20 = v18 & *(_QWORD *)(v58 + 64);
  v21 = &v64;
  v22 = (__int128 *)((char *)&v59 + 8);
  v23 = &v61;
  v55 = (unint64_t)(63 - v19) >> 6;
  result = swift_bridgeObjectRetain();
  i = 0;
  if (v20)
    goto LABEL_14;
LABEL_15:
  v31 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_48;
  if (v31 >= v55)
    goto LABEL_38;
  v32 = *(_QWORD *)(v56 + 8 * v31);
  v33 = i + 1;
  if (!v32)
  {
    v33 = i + 2;
    if (i + 2 >= v55)
      goto LABEL_38;
    v32 = *(_QWORD *)(v56 + 8 * v33);
    if (!v32)
    {
      v33 = i + 3;
      if (i + 3 >= v55)
        goto LABEL_38;
      v32 = *(_QWORD *)(v56 + 8 * v33);
      if (!v32)
      {
        v33 = i + 4;
        if (i + 4 >= v55)
          goto LABEL_38;
        v32 = *(_QWORD *)(v56 + 8 * v33);
        if (!v32)
        {
          v33 = i + 5;
          if (i + 5 >= v55)
            goto LABEL_38;
          v32 = *(_QWORD *)(v56 + 8 * v33);
          if (!v32)
          {
            v34 = i + 6;
            if (i + 6 < v55)
            {
              v32 = *(_QWORD *)(v56 + 8 * v34);
              if (v32)
              {
                v33 = i + 6;
                goto LABEL_32;
              }
              while (1)
              {
                v33 = v34 + 1;
                if (__OFADD__(v34, 1))
                  goto LABEL_49;
                if (v33 >= v55)
                  break;
                v32 = *(_QWORD *)(v56 + 8 * v33);
                ++v34;
                if (v32)
                  goto LABEL_32;
              }
            }
LABEL_38:
            outlined consume of Set<A1>.Iterator._Variant<A><A1>();
            swift_bridgeObjectRelease();
            static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
            v45 = objc_allocWithZone((Class)NSError);
            v46 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            v47 = objc_msgSend(v45, sel_initWithDomain_code_userInfo_, v46, 4, _NativeDictionary.bridged()());
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            v48 = objc_msgSend(v47, sel_domain);
            v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
            v51 = v50;

            if (v49 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"))
              || v51 != v52)
            {
              v54 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v54 & 1) != 0)
                return swift_willThrow();
              __break(1u);
            }
            swift_bridgeObjectRelease_n();
            return swift_willThrow();
          }
        }
      }
    }
  }
LABEL_32:
  v66 = (v32 - 1) & v32;
  v30 = __clz(__rbit64(v32)) + (v33 << 6);
  for (i = v33; ; v30 = __clz(__rbit64(v20)) | (i << 6))
  {
    v35 = (uint64_t *)(*(_QWORD *)(v16 + 48) + 16 * v30);
    v37 = *v35;
    v36 = v35[1];
    outlined init with copy of AnyHashable(*(_QWORD *)(v16 + 56) + 40 * v30, (uint64_t)v21);
    *(_QWORD *)&v63 = v37;
    *((_QWORD *)&v63 + 1) = v36;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    v38 = v37;
    outlined init with take of Any(v22, v23);
    outlined init with take of Any(v23, v62);
    outlined init with take of Any(v62, &v60);
    result = specialized __RawDictionaryStorage.find<A>(_:)(v37, v36);
    v39 = result;
    if ((v40 & 1) != 0)
    {
      v24 = v21;
      v25 = v23;
      v26 = v22;
      v27 = v16;
      v28 = (uint64_t *)(v17[6] + 16 * result);
      swift_bridgeObjectRelease();
      *v28 = v38;
      v28[1] = v36;
      v16 = v27;
      v22 = v26;
      v23 = v25;
      v21 = v24;
      v29 = (_OWORD *)(v17[7] + 32 * v39);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
      result = (unint64_t)outlined init with take of Any(&v60, v29);
      v20 = v66;
      if (!v66)
        goto LABEL_15;
      goto LABEL_14;
    }
    if (v17[2] >= v17[3])
      break;
    *(_QWORD *)((char *)v17 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v41 = (uint64_t *)(v17[6] + 16 * result);
    *v41 = v38;
    v41[1] = v36;
    result = (unint64_t)outlined init with take of Any(&v60, (_OWORD *)(v17[7] + 32 * result));
    v42 = v17[2];
    v43 = __OFADD__(v42, 1);
    v44 = v42 + 1;
    if (v43)
      goto LABEL_47;
    v17[2] = v44;
    v20 = v66;
    if (!v66)
      goto LABEL_15;
LABEL_14:
    v66 = (v20 - 1) & v20;
  }
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
  return result;
}

unint64_t specialized closure #1 in closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:)(char *a1, uint64_t a2, unint64_t a3, const char *a4, uint64_t a5, char a6, void *a7)
{
  unint64_t result;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __int128 *v21;
  _OWORD *v22;
  uint64_t *v23;
  __int128 *v24;
  uint64_t *v25;
  _OWORD *v26;
  uint64_t v27;
  uint64_t *v28;
  _OWORD *v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t *v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  id v47;
  id v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v54;
  int64_t v55;
  uint64_t v56;
  int64_t i;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  _OWORD v62[2];
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;

  if (a1)
    return specialized static _FileOperations._linkOrCopyFile<A>(_:_:with:delegate:)(a4, a1, a6 & 1, a7);
  v58 = MEMORY[0x1E0DEE9E0];
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
  v12 = v11;
  *(_QWORD *)&v60 = a2;
  *((_QWORD *)&v60 + 1) = a3;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)&v63, (uint64_t)v10, v12);
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
  v15 = v14;
  URL.init(_fileManagerFailableFileURLWithPath:)(a2, a3, (uint64_t)&v60);
  if ((_QWORD)v60)
  {
    *((_QWORD *)&v59 + 1) = v61;
    lazy protocol witness table accessor for type URL and conformance URL();
    AnyHashable.init<A>(_:)();
  }
  else
  {
    v63 = 0u;
    v64 = 0u;
    v65 = 0;
  }
  specialized Dictionary.subscript.setter((uint64_t)&v63, (uint64_t)v13, v15);
  v16 = v58;
  if (*(_QWORD *)(v58 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v17 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v17 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  v56 = v58 + 64;
  v18 = -1;
  v19 = -1 << *(_BYTE *)(v58 + 32);
  if (-v19 < 64)
    v18 = ~(-1 << -(char)v19);
  v20 = v18 & *(_QWORD *)(v58 + 64);
  v21 = &v64;
  v22 = (__int128 *)((char *)&v59 + 8);
  v23 = &v61;
  v55 = (unint64_t)(63 - v19) >> 6;
  result = swift_bridgeObjectRetain();
  i = 0;
  if (v20)
    goto LABEL_14;
LABEL_15:
  v31 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_48;
  if (v31 >= v55)
    goto LABEL_38;
  v32 = *(_QWORD *)(v56 + 8 * v31);
  v33 = i + 1;
  if (!v32)
  {
    v33 = i + 2;
    if (i + 2 >= v55)
      goto LABEL_38;
    v32 = *(_QWORD *)(v56 + 8 * v33);
    if (!v32)
    {
      v33 = i + 3;
      if (i + 3 >= v55)
        goto LABEL_38;
      v32 = *(_QWORD *)(v56 + 8 * v33);
      if (!v32)
      {
        v33 = i + 4;
        if (i + 4 >= v55)
          goto LABEL_38;
        v32 = *(_QWORD *)(v56 + 8 * v33);
        if (!v32)
        {
          v33 = i + 5;
          if (i + 5 >= v55)
            goto LABEL_38;
          v32 = *(_QWORD *)(v56 + 8 * v33);
          if (!v32)
          {
            v34 = i + 6;
            if (i + 6 < v55)
            {
              v32 = *(_QWORD *)(v56 + 8 * v34);
              if (v32)
              {
                v33 = i + 6;
                goto LABEL_32;
              }
              while (1)
              {
                v33 = v34 + 1;
                if (__OFADD__(v34, 1))
                  goto LABEL_49;
                if (v33 >= v55)
                  break;
                v32 = *(_QWORD *)(v56 + 8 * v33);
                ++v34;
                if (v32)
                  goto LABEL_32;
              }
            }
LABEL_38:
            outlined consume of Set<A1>.Iterator._Variant<A><A1>();
            swift_bridgeObjectRelease();
            static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
            v45 = objc_allocWithZone((Class)NSError);
            v46 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            v47 = objc_msgSend(v45, sel_initWithDomain_code_userInfo_, v46, 4, _NativeDictionary.bridged()());
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            v48 = objc_msgSend(v47, sel_domain);
            v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
            v51 = v50;

            if (v49 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"))
              || v51 != v52)
            {
              v54 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v54 & 1) != 0)
                return swift_willThrow();
              __break(1u);
            }
            swift_bridgeObjectRelease_n();
            return swift_willThrow();
          }
        }
      }
    }
  }
LABEL_32:
  v66 = (v32 - 1) & v32;
  v30 = __clz(__rbit64(v32)) + (v33 << 6);
  for (i = v33; ; v30 = __clz(__rbit64(v20)) | (i << 6))
  {
    v35 = (uint64_t *)(*(_QWORD *)(v16 + 48) + 16 * v30);
    v37 = *v35;
    v36 = v35[1];
    outlined init with copy of AnyHashable(*(_QWORD *)(v16 + 56) + 40 * v30, (uint64_t)v21);
    *(_QWORD *)&v63 = v37;
    *((_QWORD *)&v63 + 1) = v36;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    v38 = v37;
    outlined init with take of Any(v22, v23);
    outlined init with take of Any(v23, v62);
    outlined init with take of Any(v62, &v60);
    result = specialized __RawDictionaryStorage.find<A>(_:)(v37, v36);
    v39 = result;
    if ((v40 & 1) != 0)
    {
      v24 = v21;
      v25 = v23;
      v26 = v22;
      v27 = v16;
      v28 = (uint64_t *)(v17[6] + 16 * result);
      swift_bridgeObjectRelease();
      *v28 = v38;
      v28[1] = v36;
      v16 = v27;
      v22 = v26;
      v23 = v25;
      v21 = v24;
      v29 = (_OWORD *)(v17[7] + 32 * v39);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
      result = (unint64_t)outlined init with take of Any(&v60, v29);
      v20 = v66;
      if (!v66)
        goto LABEL_15;
      goto LABEL_14;
    }
    if (v17[2] >= v17[3])
      break;
    *(_QWORD *)((char *)v17 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v41 = (uint64_t *)(v17[6] + 16 * result);
    *v41 = v38;
    v41[1] = v36;
    result = (unint64_t)outlined init with take of Any(&v60, (_OWORD *)(v17[7] + 32 * result));
    v42 = v17[2];
    v43 = __OFADD__(v42, 1);
    v44 = v42 + 1;
    if (v43)
      goto LABEL_47;
    v17[2] = v44;
    v20 = v66;
    if (!v66)
      goto LABEL_15;
LABEL_14:
    v66 = (v20 - 1) & v20;
  }
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
  return result;
}

uint64_t outlined init with take of (key: String, value: Any)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Any)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t specialized closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 *a7)
{
  return specialized closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:)(a1, a2, a3, a4, a5, a6, *a7 | ((unint64_t)*((unsigned int *)a7 + 1) << 32), *((_QWORD *)a7 + 1));
}

void specialized static _FileOperations.moveFile(_:to:with:options:)(uint64_t a1, uint64_t **a2, void *a3)
{
  id v3;
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  _QWORD *v10;
  Swift::String v11;
  uint64_t countAndFlagsBits;
  unint64_t object;
  uint64_t *v14;
  std::__fs::filesystem::path *v15;
  std::__fs::filesystem::path *v16;
  uint64_t v17;
  Swift::String v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  Swift::String v27;
  void (*v28)(char *, _QWORD);
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t *v49;
  _OWORD *v50;
  unint64_t v51;
  int64_t v52;
  unint64_t v53;
  int64_t v54;
  char *v55;
  uint64_t *v56;
  void *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char v64;
  uint64_t *v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  id v69;
  id v70;
  std::__fs::filesystem::path *v71;
  std::__fs::filesystem::path *v72;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  unint64_t v81;
  Swift::String v82;
  void (*v83)(char *, _QWORD);
  unint64_t v84;
  unint64_t v85;
  _QWORD v86[4];
  _QWORD v87[6];
  _QWORD v88[2];
  Swift::String *v89;
  uint64_t v90;
  _QWORD v91[2];
  _QWORD *v92;
  int64_t v93;
  _QWORD *v94;
  uint64_t *v95;
  _QWORD *v96;
  int64_t i;
  void *v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t *v102;
  uint64_t *v103;
  void *v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  _QWORD v108[2];
  uint64_t v109;
  Swift::String v110;
  uint64_t v111;
  _OWORD v112[2];
  Swift::String v113;
  _OWORD *v114;
  uint64_t v115;

  v3 = a3;
  v4 = *(void **)a1;
  v5 = *(uint64_t **)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *a2;
  v7 = a2[1];
  v9 = a2[2];
  v98 = *(void **)a1;
  v99 = v5;
  v100 = v6;
  v101 = v8;
  v102 = v7;
  v103 = v9;
  v104 = a3;
  if (_foundation_swift_url_feature_enabled())
  {
    v114 = (_OWORD *)v6;
    swift_retain();
    v10 = v4;
    swift_retain();
    v11 = URL.path(percentEncoded:)(1);
    countAndFlagsBits = v11._countAndFlagsBits;
    v113 = v11;
    swift_bridgeObjectRetain();
    if (String.count.getter() <= 1)
    {
      object = (unint64_t)v11._object;
    }
    else
    {
      object = (unint64_t)v11._object;
      if ((specialized BidirectionalCollection.last.getter(v11._countAndFlagsBits, (unint64_t)v11._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        countAndFlagsBits = v113._countAndFlagsBits;
        object = (unint64_t)v113._object;
      }
    }
    v110._countAndFlagsBits = Set.init(minimumCapacity:)();
    v21 = specialized Set._Variant.insert(_:)(v108, 0x2FuLL);
    v22 = v110._countAndFlagsBits;
    v23 = HIBYTE(object) & 0xF;
    if ((object & 0x2000000000000000) == 0)
      v23 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (v23)
    {
      i = (int64_t)v10;
      v110._countAndFlagsBits = countAndFlagsBits;
      v110._object = (void *)object;
      MEMORY[0x1E0C80A78](v21);
      v89 = &v110;
      v90 = v22;
      swift_bridgeObjectRetain();
      v24 = v115;
      v25 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v88, countAndFlagsBits, object);
      v115 = v24;
      if (v26 == 1)
      {
        v27 = v110;
        swift_bridgeObjectRetain();
        v28 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v27._countAndFlagsBits, (unint64_t)v27._object, v22);
        v30 = v29;
        swift_bridgeObjectRelease();
      }
      else
      {
        v28 = (void (*)(char *, _QWORD))v25;
        v30 = v26;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v10 = (_QWORD *)i;
      if (!v30)
      {
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v28 = 0;
        v30 = 0xE000000000000000;
        goto LABEL_61;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      v28 = 0;
      v30 = 0xE000000000000000;
    }
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_61:
    _sSS10FoundationE28withFileSystemRepresentationyxxSPys4Int8VGSgKXEKlFyt_Tg5031_s10Foundation3URLV34withUnsafecd22RepresentationyxxSPys4F25VGSgKXEKlFxAHKXEfU_yt_Tg5AFxs5Error_pRi_zRi0_zlyytIsgyrzo_Tf1ncn_n((uint64_t)v28, v30, (uint64_t (*)(char *))partial apply for closure #1 in static _FileOperations.moveFile(_:to:with:options:));
    swift_bridgeObjectRelease();
    return;
  }
  v14 = objc_retainAutorelease(v4);
  v15 = (std::__fs::filesystem::path *)objc_msgSend(v14, sel_fileSystemRepresentation);
  if (v15)
  {
    v16 = v15;
    i = (int64_t)v91;
    MEMORY[0x1E0C80A78](v15);
    v96 = v87;
    v87[2] = v8;
    v87[3] = v7;
    v87[4] = v9;
    v87[5] = v3;
    v88[0] = v17;
    v88[1] = v14;
    v89 = (Swift::String *)v5;
    v90 = v6;
    if (_foundation_swift_url_feature_enabled())
    {
      v113._countAndFlagsBits = (uint64_t)v8;
      v113._object = v7;
      v114 = v9;
      swift_retain();
      v95 = v8;
      swift_retain();
      v18 = URL.path(percentEncoded:)(1);
      v19 = v18._countAndFlagsBits;
      v113 = v18;
      swift_bridgeObjectRetain();
      if (String.count.getter() <= 1)
      {
        v20 = (unint64_t)v18._object;
      }
      else
      {
        v20 = (unint64_t)v18._object;
        if ((specialized BidirectionalCollection.last.getter(v18._countAndFlagsBits, (unint64_t)v18._object) & 0x1FF) == 0x2F)
        {
          specialized RangeReplaceableCollection<>.popLast()();
          swift_bridgeObjectRelease();
          v19 = v113._countAndFlagsBits;
          v20 = (unint64_t)v113._object;
        }
      }
      v110._countAndFlagsBits = Set.init(minimumCapacity:)();
      v75 = specialized Set._Variant.insert(_:)(v108, 0x2FuLL);
      v76 = v110._countAndFlagsBits;
      v77 = HIBYTE(v20) & 0xF;
      if ((v20 & 0x2000000000000000) == 0)
        v77 = v19 & 0xFFFFFFFFFFFFLL;
      if (v77)
      {
        v110._countAndFlagsBits = v19;
        v110._object = (void *)v20;
        MEMORY[0x1E0C80A78](v75);
        v86[2] = v78;
        v86[3] = v76;
        swift_bridgeObjectRetain();
        v79 = v115;
        v80 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:), (uint64_t)v86, v19, v20);
        v115 = v79;
        if (v81 == 1)
        {
          v82 = v110;
          swift_bridgeObjectRetain();
          v83 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v82._countAndFlagsBits, (unint64_t)v82._object, v76);
          v85 = v84;
          swift_bridgeObjectRelease();
        }
        else
        {
          v83 = (void (*)(char *, _QWORD))v80;
          v85 = v81;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (!v85)
        {
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v83 = 0;
          v85 = 0xE000000000000000;
          goto LABEL_75;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        v83 = 0;
        v85 = 0xE000000000000000;
      }
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_75:
      _sSS10FoundationE28withFileSystemRepresentationyxxSPys4Int8VGSgKXEKlFyt_Tg5031_s10Foundation3URLV34withUnsafecd22RepresentationyxxSPys4F25VGSgKXEKlFxAHKXEfU_yt_Tg5AFxs5Error_pRi_zRi0_zlyytIsgyrzo_Tf1ncn_n((uint64_t)v83, v85, (uint64_t (*)(char *))partial apply for closure #1 in closure #1 in static _FileOperations.moveFile(_:to:with:options:));
      swift_bridgeObjectRelease();
      return;
    }
LABEL_56:
    v74 = objc_retainAutorelease(v8);
    closure #1 in closure #1 in static _FileOperations.moveFile(_:to:with:options:)((const std::__fs::filesystem::path *)objc_msgSend(v74, sel_fileSystemRepresentation), v74, (__darwin_ino64_t)v7, v9, v3, v16, (char *)v14, v5, v6);
    return;
  }
  v31 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v108[0] = MEMORY[0x1E0DEE9E0];
  v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
  v34 = v33;
  v111 = v6;
  lazy protocol witness table accessor for type URL and conformance URL();
  v35 = v14;
  swift_retain();
  swift_retain();
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)&v113, (uint64_t)v32, v34);
  v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
  v38 = v37;
  v113._countAndFlagsBits = (uint64_t)v35;
  v113._object = v5;
  v114 = (_OWORD *)v6;
  v110 = URL.path(percentEncoded:)(0);
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)&v113, (uint64_t)v36, v38);
  v96 = (_QWORD *)v108[0];
  if (*(_QWORD *)(v108[0] + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v31 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  v39 = v96[8];
  v94 = v96 + 8;
  v40 = -1;
  v41 = -1 << *((_BYTE *)v96 + 32);
  v91[1] = ~v41;
  if (-v41 < 64)
    v40 = ~(-1 << -(char)v41);
  v42 = v40 & v39;
  v43 = &v114;
  v8 = &v109;
  v14 = &v111;
  v92 = v31 + 8;
  v93 = (unint64_t)(63 - v41) >> 6;
  swift_bridgeObjectRetain();
  i = 0;
  v95 = (uint64_t *)(MEMORY[0x1E0DEE9B8] + 8);
  if (v42)
    goto LABEL_23;
LABEL_24:
  v52 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_78;
  if (v52 >= v93)
    goto LABEL_50;
  v53 = v94[v52];
  v54 = i + 1;
  if (!v53)
  {
    v54 = i + 2;
    if (i + 2 >= v93)
      goto LABEL_50;
    v53 = v94[v54];
    if (!v53)
    {
      v54 = i + 3;
      if (i + 3 >= v93)
        goto LABEL_50;
      v53 = v94[v54];
      if (!v53)
      {
        v54 = i + 4;
        if (i + 4 >= v93)
          goto LABEL_50;
        v53 = v94[v54];
        if (!v53)
        {
          v54 = i + 5;
          if (i + 5 >= v93)
            goto LABEL_50;
          v53 = v94[v54];
          if (!v53)
          {
            v54 = i + 6;
            if (i + 6 >= v93)
              goto LABEL_50;
            v53 = v94[v54];
            if (!v53)
            {
              v55 = (char *)(i + 7);
              if (i + 7 < v93)
              {
                v53 = v94[(_QWORD)v55];
                if (v53)
                {
                  v54 = i + 7;
                  goto LABEL_43;
                }
                while (1)
                {
                  v54 = (int64_t)(v55 + 1);
                  if (__OFADD__(v55, 1))
                    goto LABEL_79;
                  if (v54 >= v93)
                    break;
                  v53 = v94[v54];
                  ++v55;
                  if (v53)
                    goto LABEL_43;
                }
              }
LABEL_50:
              outlined consume of Set<A1>.Iterator._Variant<A><A1>();
              swift_bridgeObjectRelease();
              static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
              v69 = objc_allocWithZone((Class)NSError);
              v9 = (uint64_t *)String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              v3 = objc_msgSend(v69, sel_initWithDomain_code_userInfo_, v9, 4, _NativeDictionary.bridged()());
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              v7 = (uint64_t *)objc_msgSend(v3, sel_domain);
              v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
              v16 = v71;

              if (v70 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"))
                && v16 == v72)
              {
                swift_bridgeObjectRelease_n();
              }
              else
              {
                v5 = (uint64_t *)v72;
                v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if ((v6 & 1) == 0)
                {
                  __break(1u);
                  goto LABEL_56;
                }
              }
              swift_willThrow();
              return;
            }
          }
        }
      }
    }
  }
LABEL_43:
  v115 = (v53 - 1) & v53;
  v51 = __clz(__rbit64(v53)) + (v54 << 6);
  for (i = v54; ; v51 = __clz(__rbit64(v42)) | (i << 6))
  {
    v56 = (uint64_t *)(v96[6] + 16 * v51);
    v58 = *v56;
    v57 = (void *)v56[1];
    outlined init with copy of AnyHashable(v96[7] + 40 * v51, (uint64_t)v43);
    v113._countAndFlagsBits = v58;
    v113._object = v57;
    v59 = *((_OWORD *)v43 + 1);
    v105 = *(_OWORD *)v43;
    v106 = v59;
    v107 = v43[4];
    v108[0] = v58;
    v108[1] = v57;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    v61 = v58;
    v60 = (uint64_t)v57;
    outlined init with take of Any(v8, v14);
    outlined init with take of Any(v14, v112);
    outlined init with take of Any(v112, &v110);
    v62 = specialized __RawDictionaryStorage.find<A>(_:)(v61, (uint64_t)v57);
    v63 = v62;
    if ((v64 & 1) != 0)
    {
      v44 = v31[6];
      v45 = v43;
      v46 = v31;
      v47 = v14;
      v48 = v8;
      v49 = (uint64_t *)(v44 + 16 * v62);
      swift_bridgeObjectRelease();
      *v49 = v61;
      v49[1] = v60;
      v8 = v48;
      v14 = v47;
      v31 = v46;
      v43 = v45;
      v50 = (_OWORD *)(v31[7] + 32 * v63);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
      outlined init with take of Any(&v110, v50);
      v42 = v115;
      if (!v115)
        goto LABEL_24;
      goto LABEL_23;
    }
    if (v31[2] >= v31[3])
      break;
    *(_QWORD *)((char *)v92 + ((v62 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v62;
    v65 = (uint64_t *)(v31[6] + 16 * v62);
    *v65 = v61;
    v65[1] = v60;
    outlined init with take of Any(&v110, (_OWORD *)(v31[7] + 32 * v62));
    v66 = v31[2];
    v67 = __OFADD__(v66, 1);
    v68 = v66 + 1;
    if (v67)
      goto LABEL_77;
    v31[2] = v68;
    v42 = v115;
    if (!v115)
      goto LABEL_24;
LABEL_23:
    v115 = (v42 - 1) & v42;
  }
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
}

void partial apply for closure #1 in static _FileOperations.moveFile(_:to:with:options:)(std::__fs::filesystem::path *a1)
{
  uint64_t v1;

  closure #1 in static _FileOperations.moveFile(_:to:with:options:)(a1, *(char **)(v1 + 16), *(uint64_t **)(v1 + 24), *(uint64_t **)(v1 + 32), *(char **)(v1 + 40), *(_QWORD *)(v1 + 48), *(uint64_t **)(v1 + 56), *(uint64_t ***)(v1 + 64));
}

void partial apply for closure #1 in closure #1 in static _FileOperations.moveFile(_:to:with:options:)(const std::__fs::filesystem::path *a1)
{
  partial apply for closure #1 in closure #1 in static _FileOperations.moveFile(_:to:with:options:)(a1);
}

{
  uint64_t v1;

  closure #1 in closure #1 in static _FileOperations.moveFile(_:to:with:options:)(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_OWORD **)(v1 + 32), *(void **)(v1 + 40), *(std::__fs::filesystem::path **)(v1 + 48), *(char **)(v1 + 56), *(uint64_t **)(v1 + 64), *(_QWORD *)(v1 + 72));
}

unint64_t partial apply for specialized closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:)(uint64_t a1)
{
  uint64_t v1;

  return specialized closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), **(unsigned __int8 **)(v1 + 56) | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v1 + 56) + 4) << 32), *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8));
}

{
  uint64_t v1;

  return specialized closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), **(_BYTE **)(v1 + 56), *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8));
}

uint64_t outlined copy of URL?(uint64_t result)
{
  void *v1;
  id v2;

  if (result)
  {
    v1 = (void *)result;
    swift_retain();
    v2 = v1;
    return swift_retain();
  }
  return result;
}

unint64_t partial apply for specialized closure #1 in closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:)(char *a1)
{
  uint64_t v1;

  return specialized closure #1 in closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(const char **)(v1 + 32), *(_QWORD *)(v1 + 40), **(unsigned __int8 **)(v1 + 48) | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v1 + 48) + 4) << 32), *(void **)(*(_QWORD *)(v1 + 48) + 8));
}

{
  uint64_t v1;

  return specialized closure #1 in closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(const char **)(v1 + 32), *(_QWORD *)(v1 + 40), **(_BYTE **)(v1 + 48), *(void **)(*(_QWORD *)(v1 + 48) + 8));
}

uint64_t specialized static _FileOperations._linkOrCopyFile<A>(_:_:with:delegate:)(const char *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t isStackAllocationSafe;
  uint64_t result;
  char *v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
  if ((isStackAllocationSafe & 1) != 0)
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    result = specialized closure #1 in static _FileOperations._linkOrCopyFile<A>(_:_:with:delegate:)(&v12, 1026, a2, a1, a3 & 0xFFFFFFFF00000001, a4);
    if (v4)
      return swift_willThrow();
  }
  else
  {
    v11 = (char *)swift_slowAlloc();
    specialized closure #1 in static _FileOperations._linkOrCopyFile<A>(_:_:with:delegate:)(v11, 1026, a2, a1, a3 & 0xFFFFFFFF00000001, a4);
    return MEMORY[0x186DA9E78](v11, -1, -1);
  }
  return result;
}

uint64_t outlined consume of _FTSSequence.Element?(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 != 255)
    return outlined consume of _FTSSequence.Element(result, a2, a3, a4 & 1);
  return result;
}

uint64_t outlined consume of _FTSSequence.Element(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result;

  if ((a4 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t specialized static _FileOperations._linkOrCopyFile<A>(_:_:with:delegate:)(const char *a1, char *a2, char a3, void *a4)
{
  uint64_t v4;
  uint64_t isStackAllocationSafe;
  uint64_t result;
  char *v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
  if ((isStackAllocationSafe & 1) != 0)
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    result = specialized closure #1 in static _FileOperations._linkOrCopyFile<A>(_:_:with:delegate:)(&v12, 1026, a2, a1, a3 & 1, a4);
    if (v4)
      return swift_willThrow();
  }
  else
  {
    v11 = (char *)swift_slowAlloc();
    specialized closure #1 in static _FileOperations._linkOrCopyFile<A>(_:_:with:delegate:)(v11, 1026, a2, a1, a3 & 1, a4);
    return MEMORY[0x186DA9E78](v11, -1, -1);
  }
  return result;
}

__n128 AttributedString.SingleAttributeTransformer.range.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;
  __int128 v4;

  v2 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(v1 + 32);
  v4 = *(_OWORD *)(v1 + 48);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

__n128 AttributedString.SingleAttributeTransformer.range.setter(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;
  __int128 v4;

  v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v1 = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 16) = v2;
  result = *(__n128 *)(a1 + 32);
  v4 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(v1 + 32) = result;
  *(_OWORD *)(v1 + 48) = v4;
  return result;
}

uint64_t (*AttributedString.SingleAttributeTransformer.range.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t AttributedString.SingleAttributeTransformer.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[24];
  uint64_t v8;

  outlined init with copy of AttributedString._AttributeValue?(v1 + 80, (uint64_t)v7);
  if (v8)
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v7, (uint64_t)&v6);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)v7);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a1, 0, 1, AssociatedTypeWitness);
  }
  else
  {
    outlined destroy of Any?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    v5 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a1, 1, 1, v5);
  }
}

uint64_t outlined init with copy of AttributedString._AttributeValue?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t AttributedString.SingleAttributeTransformer.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  specialized AttributedString.SingleAttributeTransformer.value.setter(a1, a2);
  swift_getAssociatedTypeWitness();
  v3 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
}

void (*AttributedString.SingleAttributeTransformer.value.modify(_QWORD *a1, uint64_t a2))(uint64_t a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  void *v10;
  uint64_t v11;

  v5 = malloc(0xA0uLL);
  *a1 = v5;
  v5[14] = a2;
  v5[15] = v2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for Optional();
  v5[16] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[17] = v8;
  v9 = *(_QWORD *)(v8 + 64);
  v5[18] = malloc(v9);
  v10 = malloc(v9);
  v5[19] = v10;
  outlined init with copy of AttributedString._AttributeValue?(v2 + 80, (uint64_t)v5);
  if (v5[3])
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v5, (uint64_t)(v5 + 9));
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)v5);
    v11 = 0;
  }
  else
  {
    outlined destroy of Any?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    v11 = 1;
  }
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v10, v11, 1, AssociatedTypeWitness);
  return AttributedString.SingleAttributeTransformer.value.modify;
}

void AttributedString.SingleAttributeTransformer.value.modify(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, uint64_t);

  v2 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 144);
  v4 = *(void **)(*(_QWORD *)a1 + 152);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 128);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 136);
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 112);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, void *, uint64_t))(v6 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 144), v4, v5);
    specialized AttributedString.SingleAttributeTransformer.value.setter((uint64_t)v3, v7);
    v8 = *(void (**)(void *, uint64_t))(v6 + 8);
    v8(v3, v5);
  }
  else
  {
    specialized AttributedString.SingleAttributeTransformer.value.setter(*(_QWORD *)(*(_QWORD *)a1 + 152), v7);
    v8 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v8(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t AttributedString.SingleAttributeTransformer.replace<A>(with:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t *boxed_opaque_existential_1;
  uint64_t v20;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[32];
  _OWORD v26[4];
  uint64_t v27;

  v6 = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v14 = (char *)&v22 - v13;
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(a5 + 24))(a4, a5, v12);
  v17 = v16;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v6 + 64) = v15;
  *(_QWORD *)(v6 + 72) = v17;
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v18(v14, a2, AssociatedTypeWitness);
  *((_QWORD *)&v24 + 1) = AssociatedTypeWitness;
  *(_QWORD *)v25 = swift_getAssociatedConformanceWitness();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v23);
  v18((char *)boxed_opaque_existential_1, (uint64_t)v14, AssociatedTypeWitness);
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(a5 + 32))(v26, a4, a5);
  *(_OWORD *)&v25[8] = v26[0];
  v25[24] = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 40))(a4, a5) & 1;
  v20 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 48))(a4, a5);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, AssociatedTypeWitness);
  v27 = v20;
  v26[2] = *(_OWORD *)v25;
  v26[3] = *(_OWORD *)&v25[16];
  v26[0] = v23;
  v26[1] = v24;
  return outlined assign with take of AttributedString._AttributeValue?((uint64_t)v26, v6 + 80);
}

uint64_t AttributedString.SingleAttributeTransformer.replace<A>(with:value:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*MEMORY[0x1E0DEE2A8] + *a1 + 8);
  return AttributedString.SingleAttributeTransformer.replace<A>(with:value:)(v5, a2, a3, v5, a4);
}

uint64_t AttributedString.applyRemovals<A>(withOriginal:andChanged:to:key:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(_BYTE *, _QWORD *, uint64_t);
  void (*v16)(_BYTE *, uint64_t);
  uint64_t result;
  void (*v18)(_BYTE *, uint64_t);
  char v19;
  void (*v20)(_BYTE *, uint64_t);
  __int128 v21;
  __int128 v22;
  _BYTE v23[64];
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[64];
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[5];

  v10 = *(_QWORD *)(a1 + 32);
  v11 = a2[4];
  v12 = *a2 ^ *(_QWORD *)a1;
  v13 = type metadata accessor for AttributedString.SingleAttributeTransformer(0, a5, a6, a4);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(void (**)(_BYTE *, _QWORD *, uint64_t))(v14 + 16);
  v15(v26, (_QWORD *)a1, v13);
  v15(v23, a2, v13);
  if (v12 > 0x3FF || (v11 ^ v10) >= 0x400)
  {
    v18 = *(void (**)(_BYTE *, uint64_t))(v14 + 8);
    v18(v26, v13);
    v18(v23, v13);
LABEL_8:
    v21 = *(_OWORD *)(a1 + 16);
    v29[0] = *(_OWORD *)a1;
    v29[1] = v21;
    v22 = *(_OWORD *)(a1 + 48);
    v29[2] = *(_OWORD *)(a1 + 32);
    v29[3] = v22;
    return AttributedString.Guts.removeAttributeValue<A>(forKey:in:)(a5, (uint64_t)v29, a5, a6);
  }
  if (v27 == v24 && v28 == v25)
  {
    v16 = *(void (**)(_BYTE *, uint64_t))(v14 + 8);
    v16(v26, v13);
    return ((uint64_t (*)(_BYTE *, uint64_t))v16)(v23, v13);
  }
  v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v20 = *(void (**)(_BYTE *, uint64_t))(v14 + 8);
  v20(v26, v13);
  result = ((uint64_t (*)(_BYTE *, uint64_t))v20)(v23, v13);
  if ((v19 & 1) == 0)
    goto LABEL_8;
  return result;
}

uint64_t AttributedString.applyChanges<A>(withOriginal:andChanged:to:key:)(__int128 *a1, __int128 *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_BYTE *, __int128 *, uint64_t);
  char v14;
  void (*v15)(_BYTE *, uint64_t);
  char v16;
  uint64_t result;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  _QWORD v34[7];
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  _BYTE v58[80];
  uint64_t v59;
  _BYTE v60[80];
  uint64_t v61;
  _QWORD v62[19];
  _QWORD v63[19];
  _BYTE v64[48];
  _BYTE v65[56];

  v36 = a6;
  v37 = a3;
  v8 = *((_QWORD *)a1 + 4);
  v9 = *((_QWORD *)a2 + 4);
  v10 = *(_QWORD *)a2 ^ *(_QWORD *)a1;
  v35 = a5;
  v11 = type metadata accessor for AttributedString.SingleAttributeTransformer(0, a5, a6, a4);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(_QWORD *, __int128 *, uint64_t))(v12 + 16);
  v13(v63, a1, v11);
  v13(v62, a2, v11);
  v14 = 1;
  if (v10 <= 0x3FF && (v9 ^ v8) <= 0x3FF)
  {
    if (v63[8] == v62[8] && v63[9] == v62[9])
      v14 = 0;
    else
      v14 = _stringCompareWithSmolCheck(_:_:expecting:)() ^ 1;
  }
  v15 = *(void (**)(_BYTE *, uint64_t))(v12 + 8);
  v15(v63, v11);
  v15(v62, v11);
  v13(v60, a1, v11);
  v13(v58, a2, v11);
  if ((v14 & 1) != 0)
  {
    v15(v58, v11);
    v15(v60, v11);
  }
  else
  {
    outlined init with copy of AttributedString._AttributeValue?((uint64_t)&v61, (uint64_t)&v48);
    outlined init with copy of AttributedString._AttributeValue?((uint64_t)&v59, (uint64_t)&v53);
    if (*((_QWORD *)&v49 + 1))
    {
      outlined init with copy of AttributedString._AttributeValue?((uint64_t)&v48, (uint64_t)&v43);
      if (*((_QWORD *)&v54 + 1))
      {
        v40 = v55;
        v41 = v56;
        v42 = v57;
        v38 = v53;
        v39 = v54;
        v16 = specialized static AttributedString._AttributeValue.== infix(_:_:)((uint64_t)&v43, (uint64_t)&v38);
        outlined destroy of AttributedString._AttributeValue((uint64_t)&v38);
        v15(v58, v11);
        v15(v60, v11);
        outlined destroy of AttributedString._AttributeValue((uint64_t)&v43);
        result = outlined destroy of Any?((uint64_t)&v48, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        if ((v16 & 1) != 0)
          return result;
        goto LABEL_17;
      }
      v15(v58, v11);
      v15(v60, v11);
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v43);
    }
    else
    {
      v15(v58, v11);
      v15(v60, v11);
      if (!*((_QWORD *)&v54 + 1))
        return outlined destroy of Any?((uint64_t)&v48, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    }
    outlined destroy of Any?((uint64_t)&v48, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
  }
LABEL_17:
  outlined init with copy of AttributedString._AttributeValue?((uint64_t)(a2 + 5), (uint64_t)&v43);
  if (*((_QWORD *)&v44 + 1))
  {
    v50 = v45;
    v51 = v46;
    v52 = v47;
    v48 = v43;
    v49 = v44;
    v18 = *v37;
    v19 = (uint64_t *)*((_QWORD *)a2 + 8);
    v36 = *((_QWORD *)a2 + 9);
    v37 = v19;
    v20 = *((_QWORD *)a2 + 4);
    v34[6] = *((_QWORD *)a2 + 5);
    v35 = v20;
    v21 = *(_OWORD *)(v18 + 16);
    v22 = *(_OWORD *)(v18 + 48);
    v44 = *(_OWORD *)(v18 + 32);
    v45 = v22;
    v43 = v21;
    BigString.unicodeScalars.getter();
    v23 = BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v64);
    v24 = *(_OWORD *)(v18 + 32);
    v38 = *(_OWORD *)(v18 + 16);
    v39 = v24;
    v40 = *(_OWORD *)(v18 + 48);
    BigString.unicodeScalars.getter();
    v25 = BigString.UnicodeScalarView.index(roundingDown:)();
    v26 = outlined release of Locale((uint64_t)v65);
    v27 = v23 >> 11;
    v28 = v25 >> 11;
    MEMORY[0x1E0C80A78](v26);
    v34[2] = v37;
    v34[3] = v36;
    v34[4] = &v48;
    swift_retain();
    AttributedString._InternalRunsSlice.updateEach(with:)((uint64_t)partial apply for closure #1 in AttributedString.Guts.setAttributeValue(_:forKey:in:), (uint64_t)v34, (_QWORD *)v18, v27, v25 >> 11);
    swift_release();
    v29 = v51;
    if ((_QWORD)v51 != 1)
    {
      v30 = *((_QWORD *)&v50 + 1);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
      v31 = swift_allocObject();
      *(_OWORD *)(v31 + 16) = xmmword_18205C850;
      *(_QWORD *)(v31 + 32) = v30;
      *(_QWORD *)(v31 + 40) = v29;
      swift_bridgeObjectRetain();
      AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v27, v28, 0, v31);
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
    }
    return outlined destroy of AttributedString._AttributeValue((uint64_t)&v48);
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v43, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    v32 = a2[1];
    v48 = *a2;
    v49 = v32;
    v33 = a2[3];
    v50 = a2[2];
    v51 = v33;
    return AttributedString.Guts.removeAttributeValue<A>(forKey:in:)(v35, (uint64_t)&v48, v35, v36);
  }
}

unint64_t AttributedString.transformingAttributes<A>(_:_:)@<X0>(void (*a1)(__int128 *)@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t TupleTypeMetadata2;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  void (*v50)(__int128 *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _OWORD *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _OWORD *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  __int128 v78;
  _OWORD *v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  __int128 v88;
  unint64_t *v89;
  unint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  void (*v102)(char *, char *, uint64_t);
  char *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v108;
  void (*v109)(char *, uint64_t);
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void (*v115)(__int128 *, __int128 *, uint64_t);
  unint64_t v116;
  unint64_t v117;
  BOOL v118;
  unint64_t v119;
  char v120;
  _QWORD v121[2];
  uint64_t *v122;
  void (*v123)(uint64_t *__return_ptr, uint64_t, uint64_t);
  char *v124;
  _QWORD *v125;
  unint64_t *v126;
  unint64_t v127;
  char *v128;
  _OWORD *v129;
  char *v130;
  unint64_t v131;
  uint64_t (*v132)(uint64_t, uint64_t);
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  void (*v137)(__int128 *);
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  __int128 v160;
  unint64_t v161;
  unint64_t v162;
  __int128 v163;
  unint64_t v164[19];
  __int128 v165;
  __int128 v166;
  _OWORD v167[2];
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD v190[16];
  uint64_t v191;
  _OWORD v192[8];
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  unint64_t v212;
  unint64_t v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  uint64_t v228;
  _OWORD v229[4];
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  _OWORD v241[4];

  v137 = (void (*)(__int128 *))a1;
  v138 = a2;
  v152 = a3;
  v153 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v135 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v124 = (char *)v121 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v134 = (char *)v121 - v10;
  v136 = v11;
  v12 = type metadata accessor for Optional();
  v149 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v133 = (char *)v121 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v148 = (char *)v121 - v15;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  v150 = v12;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v151 = (uint64_t)v121 - v17;
  v228 = *v5;
  v18 = v228;
  swift_retain_n();
  v19 = v18;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v20 = *(_OWORD *)(v18 + 32);
    v241[0] = *(_OWORD *)(v18 + 16);
    v241[1] = v20;
    v241[2] = *(_OWORD *)(v18 + 48);
    v21 = *(_QWORD *)(v18 + 64);
    v22 = *(_QWORD *)(v18 + 72);
    v23 = *(_QWORD *)(v18 + 80);
    v24 = *(_QWORD *)(v18 + 88);
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v241);
    swift_unknownObjectRetain();
    v19 = AttributedString.Guts.init(string:runs:)(v241, v21, v22, v23, v24);
    v228 = v19;
    swift_release();
  }
  v25 = *(_OWORD *)(v18 + 32);
  v238 = *(_OWORD *)(v18 + 16);
  v239 = v25;
  v240 = *(_OWORD *)(v18 + 48);
  v26 = BigString.startIndex.getter();
  v28 = v27;
  v30 = v29;
  v32 = v31;
  result = BigString.endIndex.getter();
  if (result >> 10 < v26 >> 10)
  {
LABEL_27:
    __break(1u);
  }
  else
  {
    v122 = a5;
    v230 = v26;
    v231 = v28;
    v232 = v30;
    v233 = v32;
    v234 = result;
    v235 = v34;
    v236 = v35;
    v237 = v36;
    v37 = swift_retain();
    v121[1] = v18;
    AttributedString.Runs.init(_:in:)(v37, &v203);
    v38 = v212;
    v143 = v214;
    v144 = v213;
    v145 = v216;
    v141 = v217;
    v142 = v215;
    v139 = v203;
    v140 = v218;
    v156 = v219;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v39 = swift_allocObject();
    v163 = xmmword_18205C850;
    *(_OWORD *)(v39 + 16) = xmmword_18205C850;
    v40 = v152;
    v41 = v153;
    v132 = *(uint64_t (**)(uint64_t, uint64_t))(v153 + 24);
    *(_QWORD *)(v39 + 32) = v132(v152, v153);
    *(_QWORD *)(v39 + 40) = v42;
    v155 = v39;
    v123 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v41 + 32);
    v123(&v191, v40, v41);
    v43 = *(_QWORD *)&v192[0];
    if (*(_QWORD *)&v192[0] == 1)
    {
      v154 = MEMORY[0x1E0DEE9D8];
    }
    else
    {
      v44 = v191;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
      v45 = swift_allocObject();
      *(_OWORD *)(v45 + 16) = v163;
      *(_QWORD *)(v45 + 32) = v44;
      *(_QWORD *)(v45 + 40) = v43;
      v154 = v45;
    }
    v224 = v208;
    v225 = v209;
    v226 = v210;
    v227 = v211;
    v220 = v204;
    v221 = v205;
    v46 = v38 >> 10;
    v47 = v145;
    v222 = v206;
    v223 = v207;
    v131 = v145 >> 10;
    if (v38 >> 10 != v145 >> 10)
    {
      v126 = (unint64_t *)(v151 + *(int *)(TupleTypeMetadata2 + 48));
      v127 = v38;
      v129 = v192;
      v130 = (char *)&v184 + 8;
      v128 = (char *)&v171 + 8;
      v125 = v190;
      v48 = v144;
      v162 = v142;
      *(_QWORD *)&v163 = v143;
      v49 = v38;
      while (1)
      {
        v161 = v46;
        v53 = v224;
        v54 = v225;
        v55 = v225;
        v56 = v128;
        *((_OWORD *)v128 + 4) = v224;
        v56[5] = v54;
        v57 = v226;
        v58 = v227;
        v59 = v227;
        v56[6] = v226;
        v56[7] = v58;
        v60 = v220;
        v61 = v221;
        v62 = v221;
        *v56 = v220;
        v56[1] = v61;
        v63 = v222;
        v64 = v223;
        v65 = v223;
        v56[2] = v222;
        v56[3] = v64;
        v66 = v130;
        *((_OWORD *)v130 + 4) = v53;
        v66[5] = v55;
        v66[6] = v57;
        v66[7] = v59;
        *v66 = v60;
        v66[1] = v62;
        v67 = v49;
        v68 = v162;
        v69 = v163;
        *((_QWORD *)&v160 + 1) = v162;
        v159 = v49;
        *(_QWORD *)&v160 = v163;
        v70 = v48;
        v158 = v48;
        v66[2] = v63;
        v66[3] = v65;
        v71 = v139;
        *(_QWORD *)&v184 = v139;
        v190[7] = v38;
        v72 = v143;
        v73 = v144;
        v190[8] = v144;
        v190[9] = v143;
        v74 = v141;
        v75 = v142;
        v190[10] = v142;
        v76 = v145;
        v190[11] = v145;
        v190[12] = v141;
        v190[13] = v140;
        v77 = v140;
        v190[14] = v156;
        v164[0] = v67;
        v164[1] = v70;
        v164[2] = v69;
        v164[3] = v68;
        AttributedString.Runs.subscript.getter(v164, &v165);
        v162 = *((_QWORD *)&v165 + 1);
        *(_QWORD *)&v163 = v165;
        v147 = v170;
        v78 = v225;
        v79 = v129;
        v129[4] = v224;
        v79[5] = v78;
        v80 = v227;
        v79[6] = v226;
        v79[7] = v80;
        v81 = v221;
        *v79 = v220;
        v79[1] = v81;
        v82 = v223;
        v79[2] = v222;
        v79[3] = v82;
        v191 = v71;
        v193 = v38;
        v194 = v73;
        v195 = v72;
        v196 = v75;
        v197 = v76;
        v198 = v74;
        v199 = v77;
        v200 = v156;
        v201 = v155;
        v202 = v154;
        *(_QWORD *)&v171 = v71;
        v176 = v38;
        v177 = v73;
        v178 = v72;
        v179 = v75;
        v180 = v76;
        v181 = v74;
        v84 = v159;
        v83 = v160;
        v182 = v77;
        v183 = v156;
        v85 = *((_QWORD *)&v160 + 1);
        *(_QWORD *)&v165 = v159;
        *((_QWORD *)&v165 + 1) = v158;
        v166 = v160;
        outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)&v191);
        swift_retain();
        AttributedString.Runs._slicedRunBoundary(after:attributeNames:constraints:)((unint64_t *)&v165, v155, v154, (uint64_t *)&v184);
        swift_release();
        result = outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v191);
        v86 = v184;
        if ((unint64_t)v184 >> 10 < v161)
        {
          __break(1u);
          goto LABEL_27;
        }
        v146 = (unint64_t)v184 >> 10;
        v87 = *((_QWORD *)&v184 + 1);
        v88 = v185;
        AttributedString._AttributeStorage.subscript.getter(v163, v152, v153, v151);
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v89 = v126;
        *v126 = v84;
        v90 = v158;
        v89[1] = v158;
        v89[2] = v83;
        v89[3] = v85;
        v89[4] = v86;
        v157 = v87;
        v89[5] = v87;
        v89[6] = v88;
        v91 = v133;
        v162 = *((_QWORD *)&v88 + 1);
        *(_QWORD *)&v163 = v88;
        v89[7] = *((_QWORD *)&v88 + 1);
        v92 = v148;
        v93 = v149;
        v94 = v150;
        (*(void (**)(char *, uint64_t, uint64_t))(v149 + 32))(v148, v151, v150);
        (*(void (**)(char *, char *, uint64_t))(v93 + 16))(v91, v92, v94);
        v95 = v135;
        v96 = v136;
        v97 = v86;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v135 + 48))(v91, 1, v136) == 1)
        {
          (*(void (**)(char *, uint64_t))(v93 + 8))(v91, v94);
          v175 = 0;
          v173 = 0u;
          v174 = 0u;
          v171 = 0u;
          v172 = 0u;
          v99 = v152;
          v98 = v153;
          v100 = v157;
        }
        else
        {
          v101 = v134;
          (*(void (**)(char *, char *, uint64_t))(v95 + 32))(v134, v91, v96);
          v102 = *(void (**)(char *, char *, uint64_t))(v95 + 16);
          v103 = v124;
          v102(v124, v101, v96);
          *((_QWORD *)&v166 + 1) = v96;
          v104 = v90;
          v106 = v152;
          v105 = v153;
          *(_QWORD *)&v167[0] = swift_getAssociatedConformanceWitness();
          boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v165);
          v102((char *)boxed_opaque_existential_1, v103, v96);
          v123((uint64_t *)&v171, v106, v105);
          *(_OWORD *)((char *)v167 + 8) = v171;
          BYTE8(v167[1]) = (*(uint64_t (**)(uint64_t, uint64_t))(v105 + 40))(v106, v105) & 1;
          v108 = (*(uint64_t (**)(uint64_t, uint64_t))(v105 + 48))(v106, v105);
          v109 = *(void (**)(char *, uint64_t))(v95 + 8);
          v109(v103, v96);
          v175 = v108;
          v173 = v167[0];
          v174 = v167[1];
          v100 = v157;
          v171 = v165;
          v172 = v166;
          v109(v134, v96);
          v98 = v105;
          v90 = v104;
          v99 = v106;
        }
        v110 = v132(v99, v98);
        *(_QWORD *)&v184 = v159;
        *((_QWORD *)&v184 + 1) = v90;
        v185 = v160;
        *((_QWORD *)&v160 + 1) = v97;
        *(_QWORD *)&v186 = v97;
        *((_QWORD *)&v186 + 1) = v100;
        *(_QWORD *)&v187 = v163;
        *((_QWORD *)&v187 + 1) = v162;
        v188 = v110;
        v189 = v111;
        outlined init with take of AttributedString._AttributeValue?((uint64_t)&v171, (uint64_t)v125);
        v113 = type metadata accessor for AttributedString.SingleAttributeTransformer(0, v99, v98, v112);
        v114 = *(_QWORD *)(v113 - 8);
        v115 = *(void (**)(__int128 *, __int128 *, uint64_t))(v114 + 16);
        v115(&v171, &v184, v113);
        v137(&v171);
        v116 = v171;
        v117 = v173;
        v115(&v165, &v184, v113);
        v115((__int128 *)v164, &v171, v113);
        v118 = v161 == v116 >> 10;
        v119 = v146;
        if (!v118 || v146 != v117 >> 10)
          break;
        if (v168 == v164[8] && v169 == v164[9])
        {
          v50 = *(void (**)(__int128 *, uint64_t))(v114 + 8);
          v50(&v165, v113);
          v50((__int128 *)v164, v113);
          v49 = *((_QWORD *)&v160 + 1);
          v52 = v99;
        }
        else
        {
          v120 = _stringCompareWithSmolCheck(_:_:expecting:)();
          v50 = *(void (**)(__int128 *, uint64_t))(v114 + 8);
          v50(&v165, v113);
          v50((__int128 *)v164, v113);
          v49 = *((_QWORD *)&v160 + 1);
          v52 = v99;
          if ((v120 & 1) == 0)
            goto LABEL_23;
        }
LABEL_10:
        AttributedString.applyChanges<A>(withOriginal:andChanged:to:key:)(&v184, &v171, &v228, v51, v52, v98);
        v50(&v171, v113);
        v50(&v184, v113);
        (*(void (**)(char *, uint64_t))(v149 + 8))(v148, v150);
        v46 = v119;
        v48 = v157;
        v38 = v127;
        if (v119 == v131)
        {
          v19 = v228;
          v47 = v145;
          goto LABEL_25;
        }
      }
      v50 = *(void (**)(__int128 *, uint64_t))(v114 + 8);
      v50(&v165, v113);
      v50((__int128 *)v164, v113);
      v49 = *((_QWORD *)&v160 + 1);
      v52 = v99;
LABEL_23:
      v229[0] = v184;
      v229[1] = v185;
      v229[2] = v186;
      v229[3] = v187;
      AttributedString.Guts.removeAttributeValue<A>(forKey:in:)(v52, (uint64_t)v229, v52, v98);
      goto LABEL_10;
    }
LABEL_25:
    v192[4] = v224;
    v192[5] = v225;
    v192[6] = v226;
    v192[7] = v227;
    v192[0] = v220;
    v192[1] = v221;
    v192[2] = v222;
    v192[3] = v223;
    v191 = v139;
    v193 = v38;
    v194 = v144;
    v195 = v143;
    v196 = v142;
    v197 = v47;
    v198 = v141;
    v199 = v140;
    v200 = v156;
    v201 = v155;
    v202 = v154;
    outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v191);
    result = swift_release();
    *v122 = v19;
  }
  return result;
}

unint64_t AttributedString.transformingAttributes<A, B>(_:_:_:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t *v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t TupleTypeMetadata3;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD v46[5];
  uint64_t (*v47)(uint64_t, uint64_t);
  uint64_t (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67[10];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _OWORD v74[8];
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  _OWORD v117[4];

  v49 = a1;
  v50 = a2;
  v66 = a6;
  swift_getAssociatedTypeWitness();
  v12 = type metadata accessor for Optional();
  v61 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v60 = (char *)v46 - v13;
  v53 = a3;
  swift_getAssociatedTypeWitness();
  v14 = type metadata accessor for Optional();
  v58 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v57 = (char *)v46 - v15;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  v59 = v14;
  v62 = v12;
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v17 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)v46 - v18;
  v20 = *v7;
  v105 = *v7;
  swift_retain_n();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v21 = *(_OWORD *)(v20 + 32);
    v117[0] = *(_OWORD *)(v20 + 16);
    v117[1] = v21;
    v117[2] = *(_OWORD *)(v20 + 48);
    v22 = *(_QWORD *)(v20 + 64);
    v63 = *(_QWORD *)(v20 + 72);
    v23 = *(_QWORD *)(v20 + 80);
    *(_QWORD *)&v56 = *(_QWORD *)(v20 + 88);
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v117);
    swift_unknownObjectRetain();
    v105 = AttributedString.Guts.init(string:runs:)(v117, v22, v63, v23, v56);
    swift_release();
  }
  v24 = *(_OWORD *)(v20 + 32);
  v114 = *(_OWORD *)(v20 + 16);
  v115 = v24;
  v116 = *(_OWORD *)(v20 + 48);
  v25 = BigString.startIndex.getter();
  v63 = v26;
  v28 = v27;
  *(_QWORD *)&v56 = v29;
  result = BigString.endIndex.getter();
  if (result >> 10 >= v25 >> 10)
  {
    v51 = v19;
    v52 = TupleTypeMetadata3;
    v46[2] = a7;
    v106 = v25;
    v107 = v63;
    v108 = v28;
    v109 = v56;
    v110 = result;
    v111 = v31;
    v112 = v32;
    v113 = v33;
    v34 = swift_retain();
    v46[1] = v20;
    AttributedString.Runs.init(_:in:)(v34, v74);
    v89 = v74[6];
    v90 = v74[7];
    v54 = v76;
    v91 = v75;
    v85 = v74[2];
    v86 = v74[3];
    v88 = v74[5];
    v87 = v74[4];
    v84 = v74[1];
    v83 = v74[0];
    v35 = v77;
    v64 = a5;
    v65 = a4;
    v36 = v78;
    v56 = v80;
    v37 = v79;
    v55 = v81;
    v63 = v82;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v38 = swift_allocObject();
    *(_OWORD *)(v38 + 16) = xmmword_18205F0D0;
    v39 = v53;
    v48 = *(uint64_t (**)(uint64_t, uint64_t))(v64 + 24);
    *(_QWORD *)(v38 + 32) = v48(v53, v64);
    *(_QWORD *)(v38 + 40) = v40;
    v41 = v66;
    v47 = *(uint64_t (**)(uint64_t, uint64_t))(v66 + 24);
    *(_QWORD *)(v38 + 48) = v47(v65, v66);
    *(_QWORD *)(v38 + 56) = v42;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v64 + 32))(&v69, v39, v64);
    v43 = v69;
    v44 = v70;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v41 + 32))(v67, v65, v66);
    v45 = specialized RangeReplaceableCollection.init(_contents:_:)(v43, v44, v67[0], v67[1]);
    outlined consume of AttributedString.AttributeRunBoundaries?(v43, v44);
    v92 = v54;
    v93 = v35;
    v94 = v36;
    v95 = v37;
    v96 = v56;
    v97 = v55;
    v98 = v63;
    v99 = v38;
    v100 = v45;
    v101 = v54;
    v102 = v35;
    v46[3] = &v68;
    v46[4] = &v73;
    v103 = v36;
    v104 = v37;
    v69 = v39;
    v70 = v65;
    v71 = v64;
    v72 = v66;
    type metadata accessor for AttributedString.Runs.AttributesSlice2.Iterator();
  }
  __break(1u);
  return result;
}

unint64_t AttributedString.transformingAttributes<A, B, C>(_:_:_:_:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t a6@<X8>, uint64_t a7, uint64_t a8, unint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t TupleTypeMetadata;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[11];
  uint64_t *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  unsigned __int128 v64;
  __int128 v65;
  __int128 v66;
  _OWORD v67[3];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  unsigned __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  _OWORD v108[4];

  v43[6] = a1;
  v43[7] = a2;
  v43[1] = a6;
  v58 = a9;
  v55 = a5;
  swift_getAssociatedTypeWitness();
  v11 = type metadata accessor for Optional();
  v50 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v53 = (char *)v43 - v12;
  v54 = a4;
  v57 = a8;
  swift_getAssociatedTypeWitness();
  v13 = type metadata accessor for Optional();
  v48 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v52 = (char *)v43 - v14;
  v56 = a7;
  v59 = a3;
  swift_getAssociatedTypeWitness();
  v15 = type metadata accessor for Optional();
  v46 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v45 = (char *)v43 - v16;
  v47 = v17;
  *(_QWORD *)&v76 = v17;
  v49 = v13;
  *((_QWORD *)&v76 + 1) = v13;
  v51 = v11;
  *(_QWORD *)&v77 = v11;
  *((_QWORD *)&v77 + 1) = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  TupleTypeMetadata = swift_getTupleTypeMetadata();
  v19 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v19);
  v43[8] = (char *)v43 - v20;
  v21 = *v44;
  v96 = *v44;
  swift_retain_n();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v22 = *(_OWORD *)(v21 + 32);
    v108[0] = *(_OWORD *)(v21 + 16);
    v108[1] = v22;
    v108[2] = *(_OWORD *)(v21 + 48);
    v23 = *(_QWORD *)(v21 + 64);
    v24 = *(_QWORD *)(v21 + 72);
    v25 = *(_QWORD *)(v21 + 80);
    v26 = *(_QWORD *)(v21 + 88);
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v108);
    swift_unknownObjectRetain();
    v96 = AttributedString.Guts.init(string:runs:)(v108, v23, v24, v25, v26);
    swift_release();
  }
  v27 = *(_OWORD *)(v21 + 32);
  v105 = *(_OWORD *)(v21 + 16);
  v106 = v27;
  v107 = *(_OWORD *)(v21 + 48);
  v28 = BigString.startIndex.getter();
  v30 = v29;
  v32 = v31;
  v34 = v33;
  result = BigString.endIndex.getter();
  if (result >> 10 >= v28 >> 10)
  {
    v97 = v28;
    v98 = v30;
    v99 = v32;
    v100 = v34;
    v101 = result;
    v102 = v36;
    v103 = v37;
    v104 = v38;
    v39 = swift_retain();
    v43[0] = v21;
    AttributedString.Runs.init(_:in:)(v39, &v76);
    v40 = v54;
    v42 = v56;
    v41 = v57;
    AttributedString.Runs.AttributesSlice3.init(runs:)((uint64_t)&v76, v59, v54, v55, v56, v57, v58, (uint64_t)&v62);
    v82 = v67[1];
    v83 = v67[2];
    v78 = v64;
    v79 = v65;
    v80 = v66;
    v81 = v67[0];
    v76 = v62;
    v77 = v63;
    v91 = v75;
    v84 = v68;
    v85 = v69;
    v86 = v70;
    v87 = v71;
    v88 = v72;
    v89 = v73;
    v90 = v74;
    v92 = v69;
    v93 = v70;
    v94 = v71;
    v43[3] = &v61;
    v43[4] = v67;
    v43[2] = &v60;
    v95 = v72;
    v43[5] = TupleTypeMetadata;
    *(_QWORD *)&v62 = v59;
    *((_QWORD *)&v62 + 1) = v40;
    *(_QWORD *)&v63 = v55;
    *((_QWORD *)&v63 + 1) = v42;
    v64 = __PAIR128__(v58, v41);
    type metadata accessor for AttributedString.Runs.AttributesSlice3.Iterator();
  }
  __break(1u);
  return result;
}

unint64_t AttributedString.transformingAttributes<A, B, C, D>(_:_:_:_:_:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[24];
  uint64_t *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  unsigned __int128 v65;
  __int128 v66;
  _OWORD v67[3];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  unsigned __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  _OWORD v108[4];

  v57 = a3;
  v47[6] = a1;
  v47[7] = a2;
  v47[1] = a5;
  v55 = a11;
  v56 = a7;
  swift_getAssociatedTypeWitness();
  v12 = type metadata accessor for Optional();
  v47[22] = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v50 = (char *)v47 - v13;
  v51 = a6;
  v54 = a10;
  swift_getAssociatedTypeWitness();
  v14 = type metadata accessor for Optional();
  v47[20] = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v49 = (char *)v47 - v15;
  v53 = a9;
  v58 = a4;
  swift_getAssociatedTypeWitness();
  v16 = type metadata accessor for Optional();
  v47[18] = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v47[17] = (char *)v47 - v17;
  v52 = a8;
  v18 = v57;
  swift_getAssociatedTypeWitness();
  v19 = type metadata accessor for Optional();
  v47[15] = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v47[14] = (char *)v47 - v20;
  v47[16] = v21;
  *(_QWORD *)&v76 = v21;
  v47[19] = v16;
  *((_QWORD *)&v76 + 1) = v16;
  v47[21] = v14;
  *(_QWORD *)&v77 = v14;
  v47[23] = v12;
  *((_QWORD *)&v77 + 1) = v12;
  *(_QWORD *)&v78 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  v47[9] = swift_getTupleTypeMetadata();
  v22 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v22);
  v47[8] = (char *)v47 - v23;
  v24 = *v48;
  v96 = *v48;
  swift_retain_n();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v25 = *(_OWORD *)(v24 + 32);
    v108[0] = *(_OWORD *)(v24 + 16);
    v108[1] = v25;
    v108[2] = *(_OWORD *)(v24 + 48);
    v26 = *(_QWORD *)(v24 + 64);
    v27 = *(_QWORD *)(v24 + 72);
    v28 = *(_QWORD *)(v24 + 80);
    v29 = *(_QWORD *)(v24 + 88);
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v108);
    swift_unknownObjectRetain();
    v96 = AttributedString.Guts.init(string:runs:)(v108, v26, v27, v28, v29);
    swift_release();
  }
  v30 = *(_OWORD *)(v24 + 32);
  v105 = *(_OWORD *)(v24 + 16);
  v106 = v30;
  v107 = *(_OWORD *)(v24 + 48);
  v31 = BigString.startIndex.getter();
  v33 = v32;
  v35 = v34;
  v37 = v36;
  result = BigString.endIndex.getter();
  if (result >> 10 >= v31 >> 10)
  {
    v97 = v31;
    v98 = v33;
    v99 = v35;
    v100 = v37;
    v101 = result;
    v102 = v39;
    v103 = v40;
    v104 = v41;
    v42 = swift_retain();
    v47[0] = v24;
    AttributedString.Runs.init(_:in:)(v42, &v76);
    v43 = v52;
    v44 = v56;
    v46 = v53;
    v45 = v54;
    AttributedString.Runs.AttributesSlice4.init(runs:)((uint64_t)&v76, v18, v58, v51, v52, v53, v54, (uint64_t)&v62, v55);
    v82 = v67[1];
    v83 = v67[2];
    v78 = v64;
    v79 = v65;
    v80 = v66;
    v81 = v67[0];
    v76 = v62;
    v77 = v63;
    v91 = v75;
    v84 = v68;
    v85 = v69;
    v86 = v70;
    v87 = v71;
    v88 = v72;
    v89 = v73;
    v90 = v74;
    v92 = v69;
    v47[4] = &v61;
    v47[5] = v67;
    v93 = v70;
    v94 = v71;
    v47[2] = &v59;
    v47[3] = &v60;
    v95 = v72;
    *(_QWORD *)&v62 = v18;
    *((_QWORD *)&v62 + 1) = v58;
    *(_QWORD *)&v63 = v51;
    *((_QWORD *)&v63 + 1) = v44;
    *(_QWORD *)&v64 = v43;
    *((_QWORD *)&v64 + 1) = v46;
    v65 = __PAIR128__(v55, v45);
    type metadata accessor for AttributedString.Runs.AttributesSlice4.Iterator();
  }
  __break(1u);
  return result;
}

unint64_t AttributedString.transformingAttributes<A, B, C, D, E>(_:_:_:_:_:_:)@<X0>(uint64_t a1@<X5>, uint64_t a2@<X6>, uint64_t a3@<X7>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t result;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[15];
  uint64_t *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  _OWORD v84[3];
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  _OWORD v125[4];

  v74 = a3;
  v49[7] = a1;
  v49[8] = a2;
  v49[1] = a4;
  v72 = a10;
  v71 = a13;
  v73 = a8;
  swift_getAssociatedTypeWitness();
  v13 = type metadata accessor for Optional();
  v60 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v65 = (char *)v49 - v14;
  *((_QWORD *)&v66 + 1) = a7;
  swift_getAssociatedTypeWitness();
  v15 = type metadata accessor for Optional();
  v58 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v64 = (char *)v49 - v16;
  v70 = a11;
  *(_QWORD *)&v66 = a6;
  swift_getAssociatedTypeWitness();
  v17 = type metadata accessor for Optional();
  v56 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v63 = (char *)v49 - v18;
  v67 = a5;
  swift_getAssociatedTypeWitness();
  v19 = type metadata accessor for Optional();
  v54 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v62 = (char *)v49 - v20;
  v69 = a9;
  swift_getAssociatedTypeWitness();
  v21 = type metadata accessor for Optional();
  v52 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v51 = (char *)v49 - v22;
  v53 = v23;
  *(_QWORD *)&v93 = v23;
  v55 = v19;
  *((_QWORD *)&v93 + 1) = v19;
  v57 = v17;
  *(_QWORD *)&v94 = v17;
  v59 = v15;
  *((_QWORD *)&v94 + 1) = v15;
  v61 = v13;
  *(_QWORD *)&v95 = v13;
  *((_QWORD *)&v95 + 1) = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  v49[10] = swift_getTupleTypeMetadata();
  v24 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v24);
  v49[9] = (char *)v49 - v25;
  v26 = *v50;
  v113 = *v50;
  swift_retain_n();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v27 = *(_OWORD *)(v26 + 32);
    v125[0] = *(_OWORD *)(v26 + 16);
    v125[1] = v27;
    v125[2] = *(_OWORD *)(v26 + 48);
    v28 = *(_QWORD *)(v26 + 64);
    v29 = *(_QWORD *)(v26 + 72);
    v30 = *(_QWORD *)(v26 + 80);
    v31 = *(_QWORD *)(v26 + 88);
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v125);
    swift_unknownObjectRetain();
    v113 = AttributedString.Guts.init(string:runs:)(v125, v28, v29, v30, v31);
    swift_release();
  }
  v32 = *(_OWORD *)(v26 + 32);
  v122 = *(_OWORD *)(v26 + 16);
  v123 = v32;
  v124 = *(_OWORD *)(v26 + 48);
  v33 = BigString.startIndex.getter();
  v35 = v34;
  v37 = v36;
  v39 = v38;
  result = BigString.endIndex.getter();
  if (result >> 10 >= v33 >> 10)
  {
    v114 = v33;
    v115 = v35;
    v116 = v37;
    v117 = v39;
    v118 = result;
    v119 = v41;
    v120 = v42;
    v121 = v43;
    v44 = swift_retain();
    v49[0] = v26;
    AttributedString.Runs.init(_:in:)(v44, &v93);
    v45 = v70;
    v46 = v73;
    v47 = v69;
    v48 = v72;
    AttributedString.Runs.AttributesSlice5.init(runs:)((uint64_t)&v93, v74, v67, v66, *((uint64_t *)&v66 + 1), v69, v72, (uint64_t)&v79, v70, a12, v71);
    v99 = v84[1];
    v100 = v84[2];
    v95 = v81;
    v96 = v82;
    v97 = v83;
    v98 = v84[0];
    v93 = v79;
    v94 = v80;
    v108 = v92;
    v101 = v85;
    v102 = v86;
    v103 = v87;
    v104 = v88;
    v105 = v89;
    v106 = v90;
    v49[6] = v84;
    v107 = v91;
    v109 = v86;
    v49[4] = &v77;
    v49[5] = &v78;
    v110 = v87;
    v111 = v88;
    v49[2] = &v75;
    v49[3] = &v76;
    v112 = v89;
    v68 = a12;
    *(_QWORD *)&v79 = v74;
    *((_QWORD *)&v79 + 1) = v67;
    v80 = v66;
    *(_QWORD *)&v81 = v46;
    *((_QWORD *)&v81 + 1) = v47;
    *(_QWORD *)&v82 = v48;
    *((_QWORD *)&v82 + 1) = v45;
    *(_QWORD *)&v83 = a12;
    *((_QWORD *)&v83 + 1) = v71;
    type metadata accessor for AttributedString.Runs.AttributesSlice5.Iterator();
  }
  __break(1u);
  return result;
}

unint64_t AttributedString.transformingAttributes<A>(_:_:)@<X0>(_QWORD *a1@<X0>, void (*a2)(__int128 *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  return AttributedString.transformingAttributes<A>(_:_:)(a2, a3, *(_QWORD *)(*MEMORY[0x1E0DEE2A8] + *a1 + 8), a4, a5);
}

unint64_t AttributedString.transformingAttributes<A, B>(_:_:_:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return AttributedString.transformingAttributes<A, B>(_:_:_:)(a3, a4, *(_QWORD *)(*a1 + *MEMORY[0x1E0DEE2A8] + 8), *(_QWORD *)(*a2 + *MEMORY[0x1E0DEE2A8] + 8), a5, a6, a7);
}

unint64_t AttributedString.transformingAttributes<A, B, C>(_:_:_:_:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>)
{
  return AttributedString.transformingAttributes<A, B, C>(_:_:_:_:)(a4, a5, *(_QWORD *)(*a1 + *MEMORY[0x1E0DEE2A8] + 8), *(_QWORD *)(*a2 + *MEMORY[0x1E0DEE2A8] + 8), *(_QWORD *)(*a3 + *MEMORY[0x1E0DEE2A8] + 8), a9, a6, a7, a8);
}

unint64_t AttributedString.transformingAttributes<A, B, C, D>(_:_:_:_:_:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, unint64_t a11)
{
  return AttributedString.transformingAttributes<A, B, C, D>(_:_:_:_:_:)(a5, a6, *(_QWORD *)(*a1 + *MEMORY[0x1E0DEE2A8] + 8), *(_QWORD *)(*a2 + *MEMORY[0x1E0DEE2A8] + 8), a9, *(_QWORD *)(*a3 + *MEMORY[0x1E0DEE2A8] + 8), *(_QWORD *)(*a4 + *MEMORY[0x1E0DEE2A8] + 8), a7, a8, a10, a11);
}

unint64_t AttributedString.transformingAttributes<A, B, C, D, E>(_:_:_:_:_:_:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return AttributedString.transformingAttributes<A, B, C, D, E>(_:_:_:_:_:_:)(a6, a7, *(_QWORD *)(*a1 + *MEMORY[0x1E0DEE2A8] + 8), a9, *(_QWORD *)(*a2 + *MEMORY[0x1E0DEE2A8] + 8), *(_QWORD *)(*a3 + *MEMORY[0x1E0DEE2A8] + 8), *(_QWORD *)(*a4 + *MEMORY[0x1E0DEE2A8] + 8), *(_QWORD *)(*a5 + *MEMORY[0x1E0DEE2A8] + 8), a8, a10, a11, a12, a13);
}

uint64_t specialized AttributedString.SingleAttributeTransformer.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t *boxed_opaque_existential_1;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[32];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v23 - v8;
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v23 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16))(v9, a1, v6, v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v31 = 0;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v17, v9, AssociatedTypeWitness);
    v18 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
    v18(v13, v17, AssociatedTypeWitness);
    *((_QWORD *)&v25 + 1) = AssociatedTypeWitness;
    *(_QWORD *)v26 = swift_getAssociatedConformanceWitness();
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v24);
    v18((char *)boxed_opaque_existential_1, v13, AssociatedTypeWitness);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v4 + 32))(&v27, v3, v4);
    *(_OWORD *)&v26[8] = v27;
    v26[24] = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 40))(v3, v4) & 1;
    v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 48))(v3, v4);
    v21 = *(void (**)(char *, uint64_t))(v10 + 8);
    v21(v13, AssociatedTypeWitness);
    v31 = v20;
    v29 = *(_OWORD *)v26;
    v30 = *(_OWORD *)&v26[16];
    v27 = v24;
    v28 = v25;
    v21(v17, AssociatedTypeWitness);
  }
  return outlined assign with take of AttributedString._AttributeValue?((uint64_t)&v27, v23 + 80);
}

uint64_t outlined assign with take of AttributedString._AttributeValue?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of AttributedString._AttributeValue?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for AttributedString.SingleAttributeTransformer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AttributedString.SingleAttributeTransformer);
}

_QWORD *specialized RangeReplaceableCollection.init(_contents:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  int64_t v8;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;

  v7 = 1;
  if (a2 != 1)
    v7 = 2;
  if (a4 == 1)
    v8 = a2 != 1;
  else
    v8 = v7;
  if (v8)
  {
    v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0, MEMORY[0x1E0DEE9D8]);
    v11 = v10;
    if (a2 != 1)
    {
      v12 = v10[2];
      v13 = v10[3];
      swift_bridgeObjectRetain();
      if (v12 >= v13 >> 1)
        v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v12 + 1, 1, v11);
      v11[2] = v12 + 1;
      v14 = &v11[2 * v12];
      v14[4] = a1;
      v14[5] = a2;
    }
    if (a4 != 1)
    {
      v16 = v11[2];
      v15 = v11[3];
      if (v16 >= v15 >> 1)
        v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v11);
      v11[2] = v16 + 1;
      v17 = &v11[2 * v16];
      v17[4] = a3;
      v17[5] = a4;
    }
  }
  else
  {
    outlined consume of AttributedString.AttributeRunBoundaries?(a3, a4);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v11;
}

uint64_t sub_181AD3A24@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  type metadata accessor for AttributedString.SingleAttributeTransformer(0, *(_QWORD *)(a2 + a1 - 16), *(_QWORD *)(a2 + a1 - 8), a3);
  return AttributedString.SingleAttributeTransformer.value.getter(a4);
}

uint64_t sub_181AD3A5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = type metadata accessor for AttributedString.SingleAttributeTransformer(0, *(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8), a4);
  return specialized AttributedString.SingleAttributeTransformer.value.setter(a1, v5);
}

uint64_t sub_181AD3A98()
{
  return 16;
}

__n128 sub_181AD3AA4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t destroy for AttributedString.SingleAttributeTransformer(uint64_t a1)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 104))
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 80);
    if (*(_QWORD *)(a1 + 128) != 1)
      swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for AttributedString.SingleAttributeTransformer(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  v7 = a2 + 80;
  v8 = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  if (v8)
  {
    v9 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 104) = v8;
    *(_QWORD *)(a1 + 112) = v9;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8))(a1 + 80, v7, v8);
    v10 = (_OWORD *)(a2 + 120);
    v11 = *(_QWORD *)(a2 + 128);
    if (v11 == 1)
    {
      *(_OWORD *)(a1 + 120) = *v10;
    }
    else
    {
      *(_QWORD *)(a1 + 120) = *(_QWORD *)v10;
      *(_QWORD *)(a1 + 128) = v11;
      swift_bridgeObjectRetain();
    }
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    swift_bridgeObjectRetain();
  }
  else
  {
    v12 = *(_OWORD *)(v7 + 48);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(v7 + 32);
    *(_OWORD *)(a1 + 128) = v12;
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(v7 + 64);
    v13 = *(_OWORD *)(v7 + 16);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)v7;
    *(_OWORD *)(a1 + 96) = v13;
  }
  return a1;
}

uint64_t assignWithCopy for AttributedString.SingleAttributeTransformer(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = (_OWORD *)(a1 + 80);
  v7 = (_OWORD *)(a2 + 80);
  v8 = *(_QWORD *)(a2 + 104);
  if (*(_QWORD *)(a1 + 104))
  {
    if (v8)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 80), (uint64_t *)(a2 + 80));
      v9 = *(_QWORD *)(a2 + 128);
      if (*(_QWORD *)(a1 + 128) == 1)
      {
        if (v9 != 1)
        {
          *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
          *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
          swift_bridgeObjectRetain();
LABEL_17:
          *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
          *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          return a1;
        }
      }
      else
      {
        if (v9 != 1)
        {
          *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
          *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          goto LABEL_17;
        }
        outlined destroy of AttributedString.AttributeRunBoundaries(a1 + 120);
      }
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      goto LABEL_17;
    }
    outlined destroy of AttributedString._AttributeValue(a1 + 80);
    *v6 = *v7;
    v11 = *(_OWORD *)(a2 + 112);
    v10 = *(_OWORD *)(a2 + 128);
    v12 = *(_OWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 112) = v11;
    *(_OWORD *)(a1 + 128) = v10;
    *(_OWORD *)(a1 + 96) = v12;
  }
  else if (v8)
  {
    *(_QWORD *)(a1 + 104) = v8;
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 80, a2 + 80);
    if (*(_QWORD *)(a2 + 128) == 1)
    {
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    }
    else
    {
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      swift_bridgeObjectRetain();
    }
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    swift_bridgeObjectRetain();
  }
  else
  {
    *v6 = *v7;
    v13 = *(_OWORD *)(a2 + 96);
    v14 = *(_OWORD *)(a2 + 112);
    v15 = *(_OWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 112) = v14;
    *(_OWORD *)(a1 + 128) = v15;
    *(_OWORD *)(a1 + 96) = v13;
  }
  return a1;
}

uint64_t outlined destroy of AttributedString.AttributeRunBoundaries(uint64_t a1)
{
  destroy for PropertyListEncoder._Options();
  return a1;
}

__n128 __swift_memcpy152_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for AttributedString.SingleAttributeTransformer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  v5 = (_OWORD *)(a1 + 80);
  v6 = (_OWORD *)(a2 + 80);
  if (*(_QWORD *)(a1 + 104))
  {
    if (*(_QWORD *)(a2 + 104))
    {
      __swift_destroy_boxed_opaque_existential_1(a1 + 80);
      v7 = *(_OWORD *)(a2 + 96);
      *v5 = *v6;
      *(_OWORD *)(a1 + 96) = v7;
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      v8 = (_QWORD *)(a2 + 120);
      if (*(_QWORD *)(a1 + 128) != 1)
      {
        v9 = *(_QWORD *)(a2 + 128);
        if (v9 != 1)
        {
          *(_QWORD *)(a1 + 120) = *v8;
          *(_QWORD *)(a1 + 128) = v9;
          swift_bridgeObjectRelease();
          goto LABEL_10;
        }
        outlined destroy of AttributedString.AttributeRunBoundaries(a1 + 120);
      }
      *(_OWORD *)(a1 + 120) = *(_OWORD *)v8;
LABEL_10:
      *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of AttributedString._AttributeValue(a1 + 80);
  }
  v10 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v10;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  v11 = *(_OWORD *)(a2 + 96);
  *v5 = *v6;
  *(_OWORD *)(a1 + 96) = v11;
  return a1;
}

uint64_t getEnumTagSinglePayload for AttributedString.SingleAttributeTransformer(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 152))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributedString.SingleAttributeTransformer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 152) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 72) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 152) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t Locale.Language.isEquivalent(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v0 = Locale.Language.maximalIdentifier.getter();
  v2 = v1;
  if (v0 == Locale.Language.maximalIdentifier.getter() && v2 == v3)
    v4 = 1;
  else
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

void *Locale.Components.init(locale:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  _BYTE __src[352];

  v3 = *a1;
  v4 = a1[1];
  ObjectType = swift_getObjectType();
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 64);
  swift_unknownObjectRetain();
  v7 = v6(ObjectType, v4);
  v9 = v8;
  swift_unknownObjectRelease();
  Locale.Components.init(identifier:)(v7, v9, __src);
  v11[0] = v3;
  v11[1] = v4;
  Locale.Components.applyPreferencesOverride(_:)(v11);
  swift_unknownObjectRelease();
  return memcpy(a2, __src, 0x160uLL);
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  _BOOL8 v5;
  BOOL v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  if (*(_DWORD *)(a2 + 32) == (_DWORD)result)
    return 1;
  if (v2 == 1)
    return 0;
  for (i = 9; ; ++i)
  {
    v4 = i - 7;
    if (__OFADD__(i - 8, 1))
      break;
    v6 = *(_DWORD *)(a2 + 4 * i) == (_DWORD)result;
    v5 = v6;
    v6 = v6 || v4 == v2;
    if (v6)
      return v5;
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *i;
  BOOL v9;

  v5 = *(_QWORD *)(a5 + 16);
  if (!v5)
    return 0;
  for (i = (_QWORD *)(a5 + 56); ; i += 4)
  {
    v9 = *(i - 1) == a3 && *i == a4;
    if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      break;
    if (!--v5)
      return 0;
  }
  return 1;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v9;
  uint64_t i;
  uint64_t v11;
  BOOL v12;

  v3 = a3[2];
  if (!v3)
    return 0;
  if (a3[4] == a1 && a3[5] == a2)
    return 1;
  result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v9 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v11 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      return 1;
    result = 0;
    v9 += 2;
    if (v11 == v3)
      return result;
  }
  __break(1u);
  return result;
}

BOOL specialized Sequence<>.contains(_:)(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  _BOOL8 result;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;

  if (a2 == a3)
    return 0;
  v4 = a1;
  if (*(unsigned __int8 *)(a4 + a2) == a1)
    return 1;
  if (a2 + 1 == a3)
    return 0;
  v6 = a3 - a2 - 2;
  v7 = (unsigned __int8 *)(a4 + a2 + 1);
  do
  {
    v8 = *v7++;
    result = v8 == v4;
  }
  while (v8 != v4 && v6-- != 0);
  return result;
}

uint64_t Locale.Language.Components.init(identifier:)@<X0>(uint64_t *a1@<X8>)
{
  int Language;
  uint64_t v3;
  uint64_t v4;
  int Script;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int Country;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  void *object;
  Swift::String v17;
  uint64_t v18;
  void *v19;
  uint64_t result;
  void *v21;
  Swift::String v22;
  _BYTE v23[272];
  uint64_t countAndFlagsBits;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[258];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  String.utf8CString.getter();
  Language = uloc_getLanguage();
  v3 = swift_release();
  if (Language < 1)
  {
    v25 = 0;
    v26 = 0;
  }
  else
  {
    v29[Language] = 0;
    v3 = MEMORY[0x186DA4658](v29);
    v25 = v4;
    v26 = v3;
  }
  MEMORY[0x1E0C80A78](v3);
  LODWORD(v27) = 0;
  String.utf8CString.getter();
  Script = uloc_getScript();
  v6 = swift_release();
  v7 = 0;
  v8 = 0;
  if (Script >= 1)
  {
    v23[Script] = 0;
    v6 = MEMORY[0x186DA4658](v23);
    v7 = v6;
    v8 = v9;
  }
  MEMORY[0x1E0C80A78](v6);
  LODWORD(v27) = 0;
  String.utf8CString.getter();
  Country = uloc_getCountry();
  swift_release();
  v11 = 0;
  v12 = 0;
  if ((int)v27 <= 0 && Country >= 1)
  {
    v23[Country] = 0;
    v11 = MEMORY[0x186DA4658](v23);
    v12 = v13;
  }
  swift_bridgeObjectRelease();
  v14 = v25;
  if (v25)
  {
    v15 = String.lowercased()();
    countAndFlagsBits = v15._countAndFlagsBits;
    object = v15._object;
    if (v8)
      goto LABEL_11;
LABEL_14:
    v7 = 0;
    v18 = 0;
    v19 = 0;
    if (v12)
      goto LABEL_12;
LABEL_15:
    v11 = 0;
    result = 0;
    v21 = 0;
    goto LABEL_16;
  }
  v26 = 0;
  countAndFlagsBits = 0;
  object = 0;
  if (!v8)
    goto LABEL_14;
LABEL_11:
  v27 = v7;
  v28 = v8;
  swift_bridgeObjectRetain_n();
  String.init<A>(_:)();
  v17 = String._capitalized()();
  v18 = v17._countAndFlagsBits;
  v19 = v17._object;
  swift_bridgeObjectRelease();
  v14 = v25;
  swift_bridgeObjectRelease();
  if (!v12)
    goto LABEL_15;
LABEL_12:
  v22 = String.uppercased()();
  v21 = v22._object;
  result = v22._countAndFlagsBits;
LABEL_16:
  *a1 = v26;
  a1[1] = v14;
  a1[2] = countAndFlagsBits;
  a1[3] = (uint64_t)object;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v18;
  a1[7] = (uint64_t)v19;
  a1[8] = v11;
  a1[9] = v12;
  a1[10] = result;
  a1[11] = (uint64_t)v21;
  return result;
}

uint64_t Locale.LanguageCode.identifier(_:)(_BYTE *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t ISO3Language;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  if ((*a1 & 1) != 0)
  {
    v4 = String.utf8CString.getter() + 32;
    ISO3Language = uloc_getISO3Language();
    if (!ISO3Language)
    {
      swift_release();
      return 0;
    }
    if (ISO3Language == v4)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      v2 = String.init(cString:)();
      v3 = v6;
    }
    swift_release();
    v9 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0)
      v9 = v2 & 0xFFFFFFFFFFFFLL;
    if (!v9)
    {
LABEL_16:
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v2 = specialized _withFixedCharBuffer(size:_:)(257);
    v8 = v7;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v8)
    {
      if (one-time initialization token for _isoLanguageCodeStrings != -1)
        swift_once();
      if ((specialized Sequence<>.contains(_:)(v2, v8, (_QWORD *)static Locale.LanguageCode._isoLanguageCodeStrings) & 1) == 0)
        goto LABEL_16;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t Locale.LanguageCode.isISOLanguage.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  if (one-time initialization token for _isoLanguageCodeStrings != -1)
    swift_once();
  v3 = static Locale.LanguageCode._isoLanguageCodeStrings;
  v4 = *(_QWORD *)(static Locale.LanguageCode._isoLanguageCodeStrings + 16);
  if (!v4)
    goto LABEL_18;
  if (*(_QWORD *)(static Locale.LanguageCode._isoLanguageCodeStrings + 32) == v2
    && *(_QWORD *)(static Locale.LanguageCode._isoLanguageCodeStrings + 40) == v1)
  {
    return 1;
  }
  result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if ((result & 1) != 0)
    return 1;
  if (v4 == 1)
  {
LABEL_18:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11 = specialized _withFixedCharBuffer(size:_:)(257);
    v13 = v12;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v13)
      return 0;
    v14 = specialized Sequence<>.contains(_:)(v11, v13, (_QWORD *)static Locale.LanguageCode._isoLanguageCodeStrings);
    swift_bridgeObjectRelease();
    return (v14 & 1) != 0;
  }
  v7 = (_QWORD *)(v3 + 56);
  v8 = 1;
  while (1)
  {
    v9 = v8 + 1;
    if (__OFADD__(v8, 1))
      break;
    if (*(v7 - 1) == v2 && *v7 == v1)
      return 1;
    result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if ((result & 1) != 0)
      return 1;
    v7 += 2;
    ++v8;
    if (v9 == v4)
      goto LABEL_18;
  }
  __break(1u);
  return result;
}

uint64_t static Locale.LanguageCode.isoLanguageCodes.getter()
{
  uint64_t v0;
  int64_t v1;
  uint64_t v2;
  void **v3;
  uint64_t v4;
  void *v5;
  Swift::String v6;
  unint64_t v7;
  unint64_t v8;
  Swift::String *v9;
  uint64_t v11;

  if (one-time initialization token for _isoLanguageCodeStrings != -1)
    swift_once();
  v0 = static Locale.LanguageCode._isoLanguageCodeStrings;
  v1 = *(_QWORD *)(static Locale.LanguageCode._isoLanguageCodeStrings + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v11 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v11;
    v3 = (void **)(v0 + 40);
    do
    {
      v4 = (uint64_t)*(v3 - 1);
      v5 = *v3;
      v6 = String.lowercased()();
      v8 = *(_QWORD *)(v11 + 16);
      v7 = *(_QWORD *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v7 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
      v3 += 2;
      *(_QWORD *)(v11 + 16) = v8 + 1;
      v9 = (Swift::String *)(v11 + 32 * v8);
      v9[2]._countAndFlagsBits = v4;
      v9[2]._object = v5;
      v9[3] = v6;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  return v2;
}

_QWORD *one-time initialization function for _isoLanguageCodeStrings(uint64_t a1)
{
  return one-time initialization function for _isoLanguageCodeStrings(a1, MEMORY[0x1E0DE6418], &static Locale.LanguageCode._isoLanguageCodeStrings);
}

BOOL Locale.Script.isISOScript.getter()
{
  int Code;
  int v2;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.utf8CString.getter();
  Code = uscript_getCode();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return Code > 0 && v2 != -1;
}

BOOL Locale.Region.isISORegion.getter()
{
  uint64_t v0;
  uint64_t v1;
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v4 = 0;
  v0 = String.utf8CString.getter();
  v1 = MEMORY[0x186DAA8E0](v0 + 32, &v4);
  swift_release();
  return v4 < 1 && v1 != 0;
}

uint64_t Locale.Region.subRegions.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t ContainedRegions;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String v10;
  unint64_t v11;
  unint64_t v12;
  Swift::String *v13;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v15 = 0;
  v0 = String.utf8CString.getter();
  v1 = MEMORY[0x186DAA8E0](v0 + 32, &v15);
  swift_release();
  if (v15 > 0 || v1 == 0)
    return MEMORY[0x1E0DEE9D8];
  ContainedRegions = uregion_getContainedRegions();
  v3 = MEMORY[0x1E0DEE9D8];
  if (v15 <= 0 && ContainedRegions != 0)
  {
    v6 = ContainedRegions;
    type metadata accessor for ICU.Enumerator();
    *(_QWORD *)(swift_initStackObject() + 16) = v6;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
    while (uenum_next())
    {
      v7 = String.init(cString:)();
      v9 = v8;
      v10 = String.uppercased()();
      v12 = *(_QWORD *)(v3 + 16);
      v11 = *(_QWORD *)(v3 + 24);
      if (v12 >= v11 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
      *(_QWORD *)(v3 + 16) = v12 + 1;
      v13 = (Swift::String *)(v3 + 32 * v12);
      v13[2]._countAndFlagsBits = v7;
      v13[2]._object = v9;
      v13[3] = v10;
    }
    swift_release();
  }
  return v3;
}

uint64_t Locale.Region.containingRegion.getter@<X0>(Swift::String *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  void *v6;
  uint64_t v7;
  void *v8;
  Swift::String v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  v2 = String.utf8CString.getter();
  v3 = MEMORY[0x186DAA8E0](v2 + 32, &v10);
  result = swift_release();
  if (v10 <= 0 && v3 != 0)
  {
    result = MEMORY[0x186DAA8BC](v3);
    if (result)
    {
      result = MEMORY[0x186DAA8D4]();
      if (!result)
      {
        __break(1u);
        return result;
      }
      result = MEMORY[0x186DA4658]();
      if (v6)
      {
        v7 = result;
        v8 = v6;
        v9 = String.uppercased()();
        result = v9._countAndFlagsBits;
        a1->_countAndFlagsBits = v7;
        a1->_object = v8;
        a1[1] = v9;
        return result;
      }
    }
  }
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t Locale.Region.continent.getter@<X0>(Swift::String *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  void *v6;
  uint64_t v7;
  void *v8;
  Swift::String v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  v2 = String.utf8CString.getter();
  v3 = MEMORY[0x186DAA8E0](v2 + 32, &v10);
  result = swift_release();
  if (v10 <= 0 && v3 != 0)
  {
    result = MEMORY[0x186DAA8C8](v3, 3);
    if (result)
    {
      result = MEMORY[0x186DAA8D4]();
      if (!result)
      {
        __break(1u);
        return result;
      }
      result = MEMORY[0x186DA4658]();
      if (v6)
      {
        v7 = result;
        v8 = v6;
        v9 = String.uppercased()();
        result = v9._countAndFlagsBits;
        a1->_countAndFlagsBits = v7;
        a1->_object = v8;
        a1[1] = v9;
        return result;
      }
    }
  }
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t static Locale.Region.isoRegions.getter()
{
  uint64_t v0;
  int64_t v1;
  uint64_t v2;
  void **v3;
  uint64_t v4;
  void *v5;
  Swift::String v6;
  unint64_t v7;
  unint64_t v8;
  Swift::String *v9;
  uint64_t v11;

  if (one-time initialization token for _isoRegionCodes != -1)
    swift_once();
  v0 = static Locale.Region._isoRegionCodes;
  v1 = *(_QWORD *)(static Locale.Region._isoRegionCodes + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v11 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v11;
    v3 = (void **)(v0 + 40);
    do
    {
      v4 = (uint64_t)*(v3 - 1);
      v5 = *v3;
      v6 = String.uppercased()();
      v8 = *(_QWORD *)(v11 + 16);
      v7 = *(_QWORD *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v7 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
      v3 += 2;
      *(_QWORD *)(v11 + 16) = v8 + 1;
      v9 = (Swift::String *)(v11 + 32 * v8);
      v9[2]._countAndFlagsBits = v4;
      v9[2]._object = v5;
      v9[3] = v6;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  return v2;
}

_QWORD *one-time initialization function for isoCountries(uint64_t a1)
{
  return one-time initialization function for _isoLanguageCodeStrings(a1, MEMORY[0x1E0DE6410], &static Locale.Region.isoCountries);
}

_QWORD *one-time initialization function for _isoLanguageCodeStrings(uint64_t a1, uint64_t (*a2)(void), _QWORD *a3)
{
  _QWORD *result;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  result = (_QWORD *)a2();
  if (result && (v5 = result, (result = (_QWORD *)*result) != 0))
  {
    v6 = v5 + 1;
    v7 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      v8 = String.init(cString:)();
      v10 = v9;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
      v12 = v7[2];
      v11 = v7[3];
      if (v12 >= v11 >> 1)
        v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v7);
      v7[2] = v12 + 1;
      v13 = &v7[2 * v12];
      v13[4] = v8;
      v13[5] = v10;
      v14 = (_QWORD *)*v6++;
      result = v14;
    }
    while (v14);
  }
  else
  {
    v7 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  *a3 = v7;
  return result;
}

uint64_t one-time initialization function for _isoRegionCodes()
{
  uint64_t result;

  result = closure #1 in variable initialization expression of static Locale.Region._isoRegionCodes();
  static Locale.Region._isoRegionCodes = result;
  return result;
}

uint64_t closure #1 in variable initialization expression of static Locale.Region._isoRegionCodes()
{
  uint64_t Available;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v11 = MEMORY[0x1E0DEE9D8];
  Available = uregion_getAvailable();
  if (Available)
  {
    v1 = Available;
    type metadata accessor for ICU.Enumerator();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v1;
    specialized Array.append<A>(contentsOf:)(inited);
  }
  v3 = uregion_getAvailable();
  if (v3)
  {
    v4 = v3;
    type metadata accessor for ICU.Enumerator();
    v5 = swift_initStackObject();
    *(_QWORD *)(v5 + 16) = v4;
    specialized Array.append<A>(contentsOf:)(v5);
  }
  v6 = uregion_getAvailable();
  if (v6)
  {
    type metadata accessor for ICU.Enumerator();
    v7 = swift_initStackObject();
    *(_QWORD *)(v7 + 16) = v6;
    specialized Array.append<A>(contentsOf:)(v7);
  }
  v8 = uregion_getAvailable();
  if (v8)
  {
    type metadata accessor for ICU.Enumerator();
    v9 = swift_initStackObject();
    *(_QWORD *)(v9 + 16) = v8;
    specialized Array.append<A>(contentsOf:)(v9);
  }
  return v11;
}

uint64_t static Locale.Collation.availableCollations.getter()
{
  uint64_t KeywordValues;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  unint64_t v7;
  unint64_t v8;
  Swift::String *v9;

  KeywordValues = ucol_getKeywordValues();
  v1 = MEMORY[0x1E0DEE9D8];
  if (KeywordValues)
  {
    v2 = KeywordValues;
    type metadata accessor for ICU.Enumerator();
    *(_QWORD *)(swift_initStackObject() + 16) = v2;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
    while (uenum_next())
    {
      v3 = String.init(cString:)();
      v5 = v4;
      v6 = String.lowercased()();
      v8 = *(_QWORD *)(v1 + 16);
      v7 = *(_QWORD *)(v1 + 24);
      if (v8 >= v7 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
      *(_QWORD *)(v1 + 16) = v8 + 1;
      v9 = (Swift::String *)(v1 + 32 * v8);
      v9[2]._countAndFlagsBits = v3;
      v9[2]._object = v5;
      v9[3] = v6;
    }
    swift_release();
  }
  return v1;
}

uint64_t static Locale.Collation.availableCollations(for:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t KeywordValuesForLocale;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  Swift::String v23;
  unint64_t v24;
  unint64_t v25;
  Swift::String *v26;
  uint64_t v28;
  uint64_t v29;

  v2 = *a1;
  v1 = a1[1];
  v3 = a1[2];
  v4 = (void *)a1[3];
  v5 = a1[4];
  v6 = a1[5];
  v8 = a1[6];
  v7 = (void *)a1[7];
  v9 = a1[8];
  v10 = a1[9];
  v12 = a1[10];
  v11 = (void *)a1[11];
  v29 = *a1;
  v28 = v1;
  if (v1)
  {
    outlined copy of Locale.LanguageCode?(v2, v1);
    outlined copy of Locale.LanguageCode?(v5, v6);
    outlined copy of Locale.LanguageCode?(v9, v10);
    v13._countAndFlagsBits = v3;
    v13._object = v4;
    String.append(_:)(v13);
    if (!v6)
      goto LABEL_4;
    goto LABEL_3;
  }
  outlined copy of Locale.LanguageCode?(v2, 0);
  outlined copy of Locale.LanguageCode?(v5, v6);
  outlined copy of Locale.LanguageCode?(v9, v10);
  if (v6)
  {
LABEL_3:
    v14._countAndFlagsBits = 45;
    v14._object = (void *)0xE100000000000000;
    String.append(_:)(v14);
    v15._countAndFlagsBits = v8;
    v15._object = v7;
    String.append(_:)(v15);
  }
LABEL_4:
  if (v10)
  {
    v16._countAndFlagsBits = 95;
    v16._object = (void *)0xE100000000000000;
    String.append(_:)(v16);
    v17._countAndFlagsBits = v12;
    v17._object = v11;
    String.append(_:)(v17);
  }
  outlined consume of Locale.LanguageCode?(v29, v28);
  outlined consume of Locale.LanguageCode?(v5, v6);
  outlined consume of Locale.LanguageCode?(v9, v10);
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  KeywordValuesForLocale = ucol_getKeywordValuesForLocale();
  swift_release();
  v19 = MEMORY[0x1E0DEE9D8];
  if (KeywordValuesForLocale)
  {
    type metadata accessor for ICU.Enumerator();
    *(_QWORD *)(swift_initStackObject() + 16) = KeywordValuesForLocale;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
    while (uenum_next())
    {
      v20 = String.init(cString:)();
      v22 = v21;
      v23 = String.lowercased()();
      v25 = *(_QWORD *)(v19 + 16);
      v24 = *(_QWORD *)(v19 + 24);
      if (v25 >= v24 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
      *(_QWORD *)(v19 + 16) = v25 + 1;
      v26 = (Swift::String *)(v19 + 32 * v25);
      v26[2]._countAndFlagsBits = v20;
      v26[2]._object = v22;
      v26[3] = v23;
    }
    swift_release();
  }
  return v19;
}

uint64_t Locale.Currency.isISOCurrency.getter()
{
  unsigned __int8 v1;

  lazy protocol witness table accessor for type Unicode.UTF16 and conformance Unicode.UTF16();
  String._slowWithCString<A, B>(encodedAs:_:)();
  return v1;
}

uint64_t closure #1 in Locale.Currency.isISOCurrency.getter@<X0>(BOOL *a1@<X8>)
{
  uint64_t result;

  result = ucurr_getNumericCode();
  *a1 = (_DWORD)result != 0;
  return result;
}

uint64_t one-time initialization function for unknown()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.lowercased()();
  result = v1._countAndFlagsBits;
  static Locale.Currency.unknown = 7895160;
  *(_QWORD *)algn_1EDC40BB8 = 0xE300000000000000;
  xmmword_1EDC40BC0 = (__int128)v1;
  return result;
}

{
  Swift::String v0;
  uint64_t result;

  String.init<A>(_:)();
  v0 = String._capitalized()();
  result = swift_bridgeObjectRelease();
  static Locale.Script.unknown = 2054847066;
  unk_1EDC46470 = 0xE400000000000000;
  xmmword_1EDC46478 = (__int128)v0;
  return result;
}

{
  uint64_t result;
  Swift::String v1;

  v1 = String.uppercased()();
  result = v1._countAndFlagsBits;
  static Locale.Region.unknown = 23130;
  unk_1EDC46490 = 0xE200000000000000;
  xmmword_1EDC46498 = (__int128)v1;
  return result;
}

uint64_t static Locale.Currency.unknown.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int128 v3;

  if (one-time initialization token for unknown != -1)
    swift_once();
  v2 = *(_QWORD *)algn_1EDC40BB8;
  v3 = xmmword_1EDC40BC0;
  *(_QWORD *)a1 = static Locale.Currency.unknown;
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t static Locale.NumberingSystem.availableNumberingSystems.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  unint64_t v7;
  unint64_t v8;
  Swift::String *v9;

  v0 = unumsys_openAvailableNames();
  v1 = MEMORY[0x1E0DEE9D8];
  if (v0)
  {
    v2 = v0;
    type metadata accessor for ICU.Enumerator();
    *(_QWORD *)(swift_initStackObject() + 16) = v2;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
    while (uenum_next())
    {
      v3 = String.init(cString:)();
      v5 = v4;
      v6 = String.lowercased()();
      v8 = *(_QWORD *)(v1 + 16);
      v7 = *(_QWORD *)(v1 + 24);
      if (v8 >= v7 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
      *(_QWORD *)(v1 + 16) = v8 + 1;
      v9 = (Swift::String *)(v1 + 32 * v8);
      v9[2]._countAndFlagsBits = v3;
      v9[2]._object = v5;
      v9[3] = v6;
    }
    swift_release();
  }
  return v1;
}

uint64_t Locale.NumberingSystem.init(localeIdentifier:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  uint64_t countAndFlagsBits;
  void *object;

  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v2 = unumsys_open();
  swift_release();
  if (!v2)
  {
    if (one-time initialization token for latn != -1)
      swift_once();
    v4 = static Locale.NumberingSystem.latn;
    v6 = qword_1EDC464F0;
    object = (void *)*((_QWORD *)&xmmword_1EDC464F8 + 1);
    countAndFlagsBits = xmmword_1EDC464F8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_7;
  }
  result = MEMORY[0x186DAA76C](v2);
  if (result)
  {
    v4 = String.init(cString:)();
    v6 = v5;
    v7 = String.lowercased()();
    countAndFlagsBits = v7._countAndFlagsBits;
    object = v7._object;
LABEL_7:
    result = unumsys_close();
    *a1 = v4;
    a1[1] = v6;
    a1[2] = countAndFlagsBits;
    a1[3] = (uint64_t)object;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t Locale.Language.lineLayoutDirection.getter()
{
  return Locale.Language.lineLayoutDirection.getter(MEMORY[0x1E0DE6438]);
}

uint64_t Locale.Language.parent.getter@<X0>(uint64_t a1@<X8>)
{
  _OWORD *v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  int Language;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int Script;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int Country;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  void *object;
  uint64_t v25;
  Swift::String v26;
  uint64_t v27;
  void *v28;
  void *v29;
  Swift::String v30;
  _BYTE v31[272];
  uint64_t countAndFlagsBits;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD v36[6];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v3 = v1[3];
  v36[2] = v1[2];
  v36[3] = v3;
  v4 = v1[5];
  v36[4] = v1[4];
  v36[5] = v4;
  v5 = v1[1];
  v36[0] = *v1;
  v36[1] = v5;
  outlined retain of Locale.Language((uint64_t *)v36, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
  specialized _withFixedCharBuffer(size:_:)(257, (uint64_t *)v36);
  v7 = v6;
  result = (uint64_t)outlined retain of Locale.Language((uint64_t *)v36, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
  if (!v7)
  {
    *(_OWORD *)a1 = xmmword_18205FD60;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    return result;
  }
  MEMORY[0x1E0C80A78](result);
  LODWORD(v34) = 0;
  String.utf8CString.getter();
  Language = uloc_getLanguage();
  v10 = swift_release();
  v11 = 0;
  v12 = 0;
  if (Language > 0)
  {
    v31[Language] = 0;
    v10 = MEMORY[0x186DA4658](v31, 0);
    v11 = v10;
  }
  v33 = v12;
  MEMORY[0x1E0C80A78](v10);
  LODWORD(v34) = 0;
  String.utf8CString.getter();
  Script = uloc_getScript();
  v14 = swift_release();
  v15 = 0;
  v16 = 0;
  if ((int)v34 <= 0 && Script > 0)
  {
    v31[Script] = 0;
    v14 = MEMORY[0x186DA4658](v31);
    v15 = v14;
    v16 = v17;
  }
  MEMORY[0x1E0C80A78](v14);
  LODWORD(v34) = 0;
  String.utf8CString.getter();
  Country = uloc_getCountry();
  swift_release();
  v19 = 0;
  v20 = 0;
  if ((int)v34 <= 0 && Country > 0)
  {
    v31[Country] = 0;
    v19 = MEMORY[0x186DA4658](v31);
    v20 = v21;
  }
  swift_bridgeObjectRelease();
  v22 = v33;
  if (v33)
  {
    v23 = String.lowercased()();
    countAndFlagsBits = v23._countAndFlagsBits;
    object = v23._object;
    v25 = v11;
    if (v16)
      goto LABEL_13;
LABEL_17:
    v15 = 0;
    v27 = 0;
    v28 = 0;
    if (v20)
      goto LABEL_14;
LABEL_18:
    v19 = 0;
    result = 0;
    v29 = 0;
    goto LABEL_19;
  }
  countAndFlagsBits = 0;
  object = 0;
  v25 = 0;
  if (!v16)
    goto LABEL_17;
LABEL_13:
  v34 = v15;
  v35 = v16;
  swift_bridgeObjectRetain_n();
  String.init<A>(_:)();
  v26 = String._capitalized()();
  v27 = v26._countAndFlagsBits;
  v28 = v26._object;
  swift_bridgeObjectRelease();
  v22 = v33;
  swift_bridgeObjectRelease();
  if (!v20)
    goto LABEL_18;
LABEL_14:
  v30 = String.uppercased()();
  v29 = v30._object;
  result = v30._countAndFlagsBits;
LABEL_19:
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v22;
  *(_QWORD *)(a1 + 16) = countAndFlagsBits;
  *(_QWORD *)(a1 + 24) = object;
  *(_QWORD *)(a1 + 32) = v15;
  *(_QWORD *)(a1 + 40) = v16;
  *(_QWORD *)(a1 + 48) = v27;
  *(_QWORD *)(a1 + 56) = v28;
  *(_QWORD *)(a1 + 64) = v19;
  *(_QWORD *)(a1 + 72) = v20;
  *(_QWORD *)(a1 + 80) = result;
  *(_QWORD *)(a1 + 88) = v29;
  return result;
}

uint64_t Locale.Language.hasCommonParent(with:)(_OWORD *a1)
{
  _OWORD *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int Language;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int Script;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int Country;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t countAndFlagsBits;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  void *object;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  Swift::String v46;
  uint64_t v47;
  Swift::String v48;
  Swift::String v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE v82[224];
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106[12];
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  _OWORD v131[6];
  _OWORD v132[6];
  uint64_t v133;

  v133 = *MEMORY[0x1E0C80C00];
  v2 = a1[3];
  v131[2] = a1[2];
  v131[3] = v2;
  v3 = a1[5];
  v131[4] = a1[4];
  v131[5] = v3;
  v4 = a1[1];
  v131[0] = *a1;
  v131[1] = v4;
  v5 = v1[3];
  v132[2] = v1[2];
  v132[3] = v5;
  v6 = v1[5];
  v132[4] = v1[4];
  v132[5] = v6;
  v7 = v1[1];
  v132[0] = *v1;
  v132[1] = v7;
  outlined retain of Locale.Language((uint64_t *)v132, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
  v8 = specialized _withFixedCharBuffer(size:_:)(257, (uint64_t *)v132);
  v10 = v9;
  if (!v9)
  {
    outlined retain of Locale.Language((uint64_t *)v132, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
    v104 = 0;
    v105 = 0;
    countAndFlagsBits = 0;
    v102 = 0;
    v26 = 0;
    v27 = 0;
    v99 = 0;
    v100 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 1;
    goto LABEL_19;
  }
  MEMORY[0x1E0C80A78](v8);
  LODWORD(v107) = 0;
  String.utf8CString.getter();
  Language = uloc_getLanguage();
  v12 = swift_release();
  v13 = 0;
  v14 = 0;
  if (Language > 0)
  {
    v82[Language] = 0;
    v12 = MEMORY[0x186DA4658](v82);
    v13 = v12;
    v14 = v15;
  }
  MEMORY[0x1E0C80A78](v12);
  LODWORD(v107) = 0;
  String.utf8CString.getter();
  Script = uloc_getScript();
  swift_release();
  v17 = 0;
  v105 = v13;
  v18 = 0;
  if ((int)v107 <= 0 && Script > 0)
  {
    v82[Script] = 0;
    v17 = MEMORY[0x186DA4658](v82);
    v18 = v19;
  }
  v104 = v17;
  MEMORY[0x1E0C80A78](v17);
  LODWORD(v107) = 0;
  String.utf8CString.getter();
  Country = uloc_getCountry();
  swift_release();
  v21 = 0;
  v22 = 0;
  if ((int)v107 > 0)
  {
    v23 = v14;
  }
  else
  {
    v23 = v14;
    if (Country > 0)
    {
      v82[Country] = 0;
      v21 = MEMORY[0x186DA4658](v82);
      v22 = v24;
    }
  }
  swift_bridgeObjectRelease();
  if (v23)
  {
    v28 = String.lowercased()();
    countAndFlagsBits = v28._countAndFlagsBits;
    object = v28._object;
    v26 = v18;
    if (v18)
      goto LABEL_14;
LABEL_17:
    v104 = 0;
    v27 = 0;
    v100 = 0;
    v102 = (uint64_t)object;
    if (v22)
      goto LABEL_15;
    goto LABEL_18;
  }
  v105 = 0;
  countAndFlagsBits = 0;
  object = 0;
  v26 = v18;
  if (!v18)
    goto LABEL_17;
LABEL_14:
  v107 = v104;
  v108 = v26;
  swift_bridgeObjectRetain_n();
  String.init<A>(_:)();
  v30 = String._capitalized()();
  v27 = v30._countAndFlagsBits;
  v100 = v30._object;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v102 = (uint64_t)object;
  if (v22)
  {
LABEL_15:
    v31 = String.uppercased()();
    v10 = v31._countAndFlagsBits;
    v99 = v31._object;
    outlined retain of Locale.Language((uint64_t *)v132, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
    goto LABEL_19;
  }
LABEL_18:
  outlined retain of Locale.Language((uint64_t *)v132, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
  v21 = 0;
  v10 = 0;
  v99 = 0;
LABEL_19:
  outlined retain of Locale.Language((uint64_t *)v131, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
  v32 = specialized _withFixedCharBuffer(size:_:)(257, (uint64_t *)v131);
  v97 = v23;
  if (v33)
  {
    v93 = v10;
    v94 = v22;
    v95 = v21;
    v92 = v26;
    MEMORY[0x1E0C80A78](v32);
    LODWORD(v107) = 0;
    String.utf8CString.getter();
    v34 = uloc_getLanguage();
    swift_release();
    v35 = 0;
    v36 = 0;
    if ((int)v107 <= 0 && v34 > 0)
    {
      v82[v34] = 0;
      v35 = MEMORY[0x186DA4658](v82);
      v36 = v37;
    }
    v98 = v35;
    v103 = countAndFlagsBits;
    MEMORY[0x1E0C80A78](v35);
    LODWORD(v107) = 0;
    String.utf8CString.getter();
    v38 = uloc_getScript();
    v39 = swift_release();
    v40 = 0;
    if ((int)v107 > 0)
    {
      v101 = 0;
    }
    else
    {
      v101 = 0;
      if (v38 > 0)
      {
        v82[v38] = 0;
        v39 = MEMORY[0x186DA4658](v82);
        v40 = v39;
        v101 = v41;
      }
    }
    MEMORY[0x1E0C80A78](v39);
    LODWORD(v107) = 0;
    String.utf8CString.getter();
    v42 = uloc_getCountry();
    swift_release();
    v43 = 0;
    v44 = 0;
    if ((int)v107 > 0)
    {
      v45 = v101;
    }
    else
    {
      v45 = v101;
      if (v42 > 0)
      {
        v82[v42] = 0;
        v43 = MEMORY[0x186DA4658](v82, 0);
      }
    }
    v96 = v44;
    swift_bridgeObjectRelease();
    if (v36)
    {
      v46 = String.lowercased()();
      v47 = v46._countAndFlagsBits;
      v90 = v46._object;
      v23 = v97;
      if (v45)
        goto LABEL_35;
    }
    else
    {
      v98 = 0;
      v47 = 0;
      v90 = 0;
      v23 = v97;
      if (v45)
      {
LABEL_35:
        v107 = v40;
        v108 = v45;
        swift_bridgeObjectRetain_n();
        String.init<A>(_:)();
        v48 = String._capitalized()();
        v88 = v48._object;
        v89 = v48._countAndFlagsBits;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v96)
        {
LABEL_36:
          v49 = String.uppercased()();
          v84 = v49._object;
          v85 = v49._countAndFlagsBits;
          outlined retain of Locale.Language((uint64_t *)v131, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
LABEL_40:
          v51 = v99;
          v50 = v100;
          v91 = v40;
          v86 = v47;
          v87 = v43;
          if (v23 == 1)
          {
            v53 = v104;
            v52 = v105;
            v54 = v92;
            v55 = v93;
            v56 = v27;
            v58 = v94;
            v57 = v95;
            v60 = v102;
            v59 = v103;
            if (v36 == 1)
            {
              LOBYTE(v23) = 1;
              return v23 & 1;
            }
LABEL_45:
            v107 = v52;
            v108 = v23;
            v109 = v59;
            v110 = v60;
            v111 = v53;
            v112 = v54;
            v113 = v56;
            v114 = v50;
            v115 = v57;
            v116 = v58;
            v117 = v55;
            v118 = v51;
            v119 = v98;
            v120 = v36;
            v121 = v86;
            v122 = v90;
            v123 = v91;
            v124 = v45;
            v125 = v89;
            v126 = v88;
            v127 = v87;
            v128 = v96;
            v129 = v85;
            v130 = v84;
            outlined release of (Locale.Language?, Locale.Language?)((uint64_t)&v107);
            LOBYTE(v23) = 0;
            return v23 & 1;
          }
          if (v36 != 1)
          {
            v107 = v105;
            v108 = v23;
            v109 = v103;
            v110 = v102;
            v111 = v104;
            v112 = v92;
            v113 = v27;
            v67 = v27;
            v83 = v27;
            v114 = v100;
            v115 = v95;
            v116 = v94;
            v117 = v93;
            v118 = v99;
            v106[0] = v98;
            v106[1] = v36;
            v106[2] = v47;
            v106[3] = (uint64_t)v90;
            v106[4] = v91;
            v106[5] = v45;
            v106[6] = v89;
            v68 = v87;
            v106[7] = (uint64_t)v88;
            v106[8] = v87;
            v69 = v96;
            v70 = (uint64_t)v84;
            v71 = v85;
            v106[9] = v96;
            v106[10] = v85;
            v106[11] = (uint64_t)v84;
            v101 = v45;
            v72 = v92;
            outlined consume of Locale.Language?(v105, v23, v103, v102, v104, v92, v67, (uint64_t)v100, v95, v94, v93, (uint64_t)v99, (void (*)(void))outlined copy of Locale.LanguageCode?);
            v73 = v23;
            LOBYTE(v23) = specialized static Locale.Language.Components.== infix(_:_:)(&v107, v106);
            outlined consume of Locale.Language?(v98, v36, v86, (uint64_t)v90, v91, v101, v89, (uint64_t)v88, v68, v69, v71, v70, (void (*)(void))outlined consume of Locale.LanguageCode?);
            v74 = v105;
            outlined consume of Locale.LanguageCode?(v105, v73);
            v75 = v104;
            v76 = v83;
            outlined consume of Locale.LanguageCode?(v104, v72);
            v78 = v94;
            v77 = v95;
            v79 = v93;
            v80 = (uint64_t)v99;
            outlined consume of Locale.LanguageCode?(v95, v94);
            outlined consume of Locale.Language?(v74, v97, v103, v102, v75, v72, v76, (uint64_t)v100, v77, v78, v79, v80, (void (*)(void))outlined consume of Locale.LanguageCode?);
            return v23 & 1;
          }
LABEL_44:
          outlined copy of Locale.LanguageCode?(v105, v23);
          v53 = v104;
          v61 = v92;
          v62 = v100;
          outlined copy of Locale.LanguageCode?(v104, v92);
          v63 = v23;
          v64 = v95;
          v83 = v27;
          v55 = v93;
          v58 = v94;
          v65 = v99;
          outlined copy of Locale.LanguageCode?(v95, v94);
          v66 = v63;
          v60 = v102;
          outlined consume of Locale.LanguageCode?(v105, v66);
          outlined consume of Locale.LanguageCode?(v53, v61);
          outlined consume of Locale.LanguageCode?(v64, v58);
          v57 = v64;
          v23 = v97;
          v54 = v61;
          v59 = v103;
          v56 = v83;
          v51 = v65;
          v50 = v62;
          v52 = v105;
          v36 = 1;
          v45 = v101;
          goto LABEL_45;
        }
LABEL_39:
        outlined retain of Locale.Language((uint64_t *)v131, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
        v43 = 0;
        v84 = 0;
        v85 = 0;
        goto LABEL_40;
      }
    }
    v40 = 0;
    v88 = 0;
    v89 = 0;
    if (v96)
      goto LABEL_36;
    goto LABEL_39;
  }
  outlined retain of Locale.Language((uint64_t *)v131, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
  if (v23 != 1)
  {
    v93 = v10;
    v94 = v22;
    v103 = countAndFlagsBits;
    v95 = v21;
    v96 = 0;
    v91 = 0;
    v92 = v26;
    v98 = 0;
    v86 = 0;
    v87 = 0;
    v89 = 0;
    v90 = 0;
    v101 = 0;
    v88 = 0;
    v84 = 0;
    v85 = 0;
    goto LABEL_44;
  }
  return v23 & 1;
}

uint64_t Locale.Language.script.getter@<X0>(uint64_t *a1@<X8>)
{
  __int128 *v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v11;
  Swift::String v12;
  __int128 v14[2];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v3 = v1[3];
  v15 = v1[2];
  v16 = v3;
  v4 = v1[5];
  v17 = v1[4];
  v18 = v4;
  v5 = v1[1];
  v14[0] = *v1;
  v14[1] = v5;
  v6 = v15;
  v8 = *((_QWORD *)&v15 + 1);
  v7 = v15;
  object = (void *)*((_QWORD *)&v16 + 1);
  countAndFlagsBits = v16;
  if (!*((_QWORD *)&v15 + 1))
  {
    outlined retain of Locale.Language((uint64_t *)v14, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
    v7 = specialized _withFixedCharBuffer(size:_:)(257, v14);
    v8 = v11;
    outlined retain of Locale.Language((uint64_t *)v14, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
    if (v8)
    {
      swift_bridgeObjectRetain_n();
      String.init<A>(_:)();
      v12 = String._capitalized()();
      countAndFlagsBits = v12._countAndFlagsBits;
      object = v12._object;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    else
    {
      v7 = 0;
      countAndFlagsBits = 0;
      object = 0;
    }
  }
  *a1 = v7;
  a1[1] = v8;
  a1[2] = countAndFlagsBits;
  a1[3] = (uint64_t)object;
  return outlined copy of Locale.LanguageCode?(v6, *((uint64_t *)&v6 + 1));
}

uint64_t *Locale.Language.Components.init(language:)@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  unsigned __int128 v6;
  unsigned __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t countAndFlagsBits;
  uint64_t object;
  uint64_t v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  Swift::String v30;
  uint64_t *result;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  unsigned __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;

  v3 = a1[1];
  v42 = *a1;
  v43 = v3;
  v4 = a1[3];
  v44 = a1[2];
  v45 = v4;
  v5 = a1[5];
  v46 = a1[4];
  v47 = v5;
  v6 = v42;
  v7 = v43;
  v8 = *((_QWORD *)&v44 + 1);
  v34 = v45;
  v35 = v44;
  v9 = v46;
  v33 = (void *)*((_QWORD *)&v45 + 1);
  v10 = *((_QWORD *)&v46 + 1);
  v40 = (void *)*((_QWORD *)&v5 + 1);
  v41 = v5;
  outlined retain of Locale.Language((uint64_t *)&v42, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
  v12 = v6 >> 64;
  v11 = v6;
  object = v7 >> 64;
  countAndFlagsBits = v7;
  if (!*((_QWORD *)&v6 + 1))
  {
    outlined retain of Locale.Language((uint64_t *)&v42, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
    v11 = specialized _withFixedCharBuffer(size:_:)(257, (uint64_t *)&v42);
    v12 = v15;
    outlined retain of Locale.Language((uint64_t *)&v42, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
    if (v12)
    {
      v16 = String.lowercased()();
      object = (uint64_t)v16._object;
      countAndFlagsBits = v16._countAndFlagsBits;
    }
    else
    {
      v11 = 0;
      countAndFlagsBits = 0;
      object = 0;
    }
  }
  v36 = object;
  v37 = countAndFlagsBits;
  v38 = v12;
  v39 = v11;
  if (v8)
  {
    outlined copy of Locale.LanguageCode?(v6, *((uint64_t *)&v6 + 1));
    v17 = v35;
    v18 = v35;
    v19 = v8;
    v20 = v34;
    v21 = v33;
  }
  else
  {
    outlined retain of Locale.Language((uint64_t *)&v42, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
    outlined copy of Locale.LanguageCode?(v6, *((uint64_t *)&v6 + 1));
    v18 = specialized _withFixedCharBuffer(size:_:)(257, (__int128 *)&v42);
    v19 = v22;
    outlined retain of Locale.Language((uint64_t *)&v42, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
    if (v19)
    {
      swift_bridgeObjectRetain_n();
      String.init<A>(_:)();
      v23 = String._capitalized()();
      v20 = v23._countAndFlagsBits;
      v21 = v23._object;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    else
    {
      v18 = 0;
      v20 = 0;
      v21 = 0;
    }
    v17 = v35;
  }
  outlined copy of Locale.LanguageCode?(v17, v8);
  outlined retain of Locale.Language((uint64_t *)&v42, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
  v24 = v9;
  v25 = v9;
  v26 = v10;
  v27 = v41;
  v28 = v40;
  if (!v10)
  {
    v32 = v24;
    outlined retain of Locale.Language((uint64_t *)&v42, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
    v25 = specialized _withFixedCharBuffer(size:_:)(257, (uint64_t *)&v42);
    v26 = v29;
    outlined retain of Locale.Language((uint64_t *)&v42, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
    if (v26)
    {
      v30 = String.uppercased()();
      v27 = v30._countAndFlagsBits;
      v28 = v30._object;
    }
    else
    {
      v25 = 0;
      v27 = 0;
      v28 = 0;
    }
    v24 = v32;
  }
  outlined copy of Locale.LanguageCode?(v24, v10);
  result = outlined retain of Locale.Language((uint64_t *)&v42, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
  *a2 = v39;
  a2[1] = v38;
  a2[2] = v37;
  a2[3] = v36;
  a2[4] = v18;
  a2[5] = v19;
  a2[6] = v20;
  a2[7] = (uint64_t)v21;
  a2[8] = v25;
  a2[9] = v26;
  a2[10] = v27;
  a2[11] = (uint64_t)v28;
  return result;
}

_QWORD *specialized static Locale.NumberingSystem.validNumberingSystems(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  char v15;
  Swift::String v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::String v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  void *object;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  Swift::String v38;
  char v39;
  Swift::String v40;
  _QWORD *v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  Swift::String *v46;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  char v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  Swift::String v106;
  __int16 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  char v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  __int16 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;

  v144 = *MEMORY[0x1E0C80C00];
  swift_bridgeObjectRetain();
  Locale.Components.init(identifier:)(a1, a2, &v117);
  v4 = v130;
  v5 = v131;
  v6 = v132;
  v7 = v133;
  if (v131)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
    v10 = v8[2];
    v9 = v8[3];
    if (v10 >= v9 >> 1)
      v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v8);
    v8[2] = v10 + 1;
    v11 = &v8[4 * v10];
    v11[4] = v4;
    v11[5] = v5;
    v11[6] = v6;
    v11[7] = v7;
  }
  else
  {
    v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v118;
  v13 = v119;
  v89 = v117;
  v90 = v120;
  v49 = v8;
  v88 = v118;
  if (!v118)
    goto LABEL_18;
  v14 = String.lowercased()();
  if (v13 == v14._countAndFlagsBits && v90 == v14._object)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v15 & 1) != 0)
    goto LABEL_15;
  v16 = String.lowercased()();
  if (v13 == v16._countAndFlagsBits && v90 == v16._object)
    goto LABEL_13;
  v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v17 & 1) != 0)
    goto LABEL_15;
  if (v89 == 7697783 && v12 == 0xE300000000000000)
  {
    v18 = 7697783;
    v19 = 0xE300000000000000;
    goto LABEL_17;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v18 = v89;
    goto LABEL_16;
  }
  v38 = String.lowercased()();
  if (v13 == v38._countAndFlagsBits && v90 == v38._object)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_15:
    v18 = v89;
LABEL_16:
    v19 = v12;
LABEL_17:
    outlined consume of Locale.LanguageCode?(v18, v19);
    goto LABEL_18;
  }
  v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Locale.LanguageCode?(v89, v12);
  if ((v39 & 1) == 0)
  {
    v20 = (char *)&outlined read-only object #0 of static Locale.NumberingSystem.validNumberingSystems(for:);
    v21 = 4;
    goto LABEL_19;
  }
LABEL_18:
  v20 = (char *)&outlined read-only object #1 of static Locale.NumberingSystem.validNumberingSystems(for:);
  v21 = 1;
LABEL_19:
  v86 = v121;
  v87 = v13;
  v84 = v122;
  v85 = *((_QWORD *)&v121 + 1);
  v82 = v123;
  v83 = *((_QWORD *)&v122 + 1);
  v80 = v124;
  v81 = *((_QWORD *)&v123 + 1);
  v79 = *((_QWORD *)&v124 + 1);
  v78 = v125;
  v76 = *((_QWORD *)&v126 + 1);
  v77 = v126;
  v74 = *((_QWORD *)&v127 + 1);
  v75 = v127;
  v72 = *((_QWORD *)&v128 + 1);
  v73 = v128;
  v70 = *((_QWORD *)&v129 + 1);
  v71 = v129;
  v68 = HIBYTE(v134);
  v69 = v134;
  v66 = *((_QWORD *)&v135 + 1);
  v67 = v135;
  v64 = *((_QWORD *)&v136 + 1);
  v65 = v136;
  v62 = *((_QWORD *)&v137 + 1);
  v63 = v137;
  v60 = *((_QWORD *)&v138 + 1);
  v61 = v138;
  v58 = *((_QWORD *)&v139 + 1);
  v59 = v139;
  v56 = *((_QWORD *)&v140 + 1);
  v57 = v140;
  v54 = *((_QWORD *)&v141 + 1);
  v55 = v141;
  v52 = *((_QWORD *)&v142 + 1);
  v53 = v142;
  v22 = (uint64_t *)(v20 + 40);
  v50 = *((_QWORD *)&v143 + 1);
  v51 = v143;
  do
  {
    v23 = v5;
    v24 = v4;
    v4 = *(v22 - 1);
    v5 = *v22;
    v25 = String.lowercased()();
    swift_bridgeObjectRetain();
    outlined consume of Locale.LanguageCode?(v24, v23);
    HIDWORD(v91) = HIDWORD(v89);
    v92 = v88;
    v93 = v87;
    v94 = v90;
    *(_QWORD *)&v95 = v86;
    *((_QWORD *)&v95 + 1) = v85;
    *(_QWORD *)&v96 = v84;
    *((_QWORD *)&v96 + 1) = v83;
    *(_QWORD *)&v97 = v82;
    *((_QWORD *)&v97 + 1) = v81;
    *(_QWORD *)&v98 = v80;
    *((_QWORD *)&v98 + 1) = v79;
    v99 = v78;
    *(_QWORD *)&v100 = v77;
    *((_QWORD *)&v100 + 1) = v76;
    *(_QWORD *)&v101 = v75;
    *((_QWORD *)&v101 + 1) = v74;
    *(_QWORD *)&v102 = v73;
    *((_QWORD *)&v102 + 1) = v72;
    *(_QWORD *)&v103 = v71;
    *((_QWORD *)&v103 + 1) = v70;
    v104 = v4;
    v105 = v5;
    v106 = v25;
    LOBYTE(v107) = v69;
    HIBYTE(v107) = v68;
    *(_QWORD *)&v108 = v67;
    *((_QWORD *)&v108 + 1) = v66;
    *(_QWORD *)&v109 = v65;
    *((_QWORD *)&v109 + 1) = v64;
    *(_QWORD *)&v110 = v63;
    *((_QWORD *)&v110 + 1) = v62;
    *(_QWORD *)&v111 = v61;
    *((_QWORD *)&v111 + 1) = v60;
    *(_QWORD *)&v112 = v59;
    *((_QWORD *)&v112 + 1) = v58;
    *(_QWORD *)&v113 = v57;
    *((_QWORD *)&v113 + 1) = v56;
    *(_QWORD *)&v114 = v55;
    *((_QWORD *)&v114 + 1) = v54;
    *(_QWORD *)&v115 = v53;
    *((_QWORD *)&v115 + 1) = v52;
    *(_QWORD *)&v116 = v51;
    *((_QWORD *)&v116 + 1) = v50;
    Locale.Components.icuIdentifier.getter();
    LODWORD(v91) = 0;
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    v26 = unumsys_open();
    swift_release();
    if (!MEMORY[0x186DAA784](v26)
      && MEMORY[0x186DAA778](v26) == 10
      && MEMORY[0x186DAA76C](v26))
    {
      v27 = String.init(cString:)();
      v29 = v28;
      v30 = String.lowercased()();
      v48 = v27;
      if ((specialized Sequence<>.contains(_:)(v27, v29, v30._countAndFlagsBits, (uint64_t)v30._object, (uint64_t)v49) & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v49[2] + 1, 1, v49);
        v32 = v49[2];
        v31 = v49[3];
        v33 = v32 + 1;
        if (v32 >= v31 >> 1)
        {
          v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v31 > 1), v32 + 1, 1, v49);
          v33 = v32 + 1;
          object = v30._object;
          v49 = v36;
        }
        else
        {
          object = v30._object;
        }
        v49[2] = v33;
        v35 = &v49[4 * v32];
        v35[4] = v48;
        v35[5] = v29;
        v35[6] = v30._countAndFlagsBits;
        v35[7] = object;
      }
    }
    v22 += 2;
    unumsys_close();
    --v21;
  }
  while (v21);
  swift_bridgeObjectRelease();
  v37 = v87;
  v40 = String.lowercased()();
  v41 = v49;
  v42 = specialized Sequence<>.contains(_:)(1853120876, 0xE400000000000000, v40._countAndFlagsBits, (uint64_t)v40._object, (uint64_t)v49);
  if ((v42 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v49[2] + 1, 1, v49);
    v44 = v41[2];
    v43 = v41[3];
    v45 = v41;
    if (v44 >= v43 >> 1)
      v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v43 > 1), v44 + 1, 1, v41);
    v45[2] = v44 + 1;
    v46 = (Swift::String *)&v45[4 * v44];
    v41 = v45;
    v46[2]._countAndFlagsBits = 1853120876;
    v46[2]._object = (void *)0xE400000000000000;
    v46[3] = v40;
    v37 = v87;
  }
  v91 = v89;
  v92 = v88;
  v93 = v37;
  v94 = v90;
  v95 = v121;
  v96 = v122;
  v97 = v123;
  v98 = v124;
  v99 = v125;
  v100 = v126;
  v101 = v127;
  v102 = v128;
  v103 = v129;
  v104 = v4;
  v105 = v5;
  v106 = v25;
  v107 = v134;
  v108 = v135;
  v109 = v136;
  v110 = v137;
  v111 = v138;
  v112 = v139;
  v113 = v140;
  v114 = v141;
  v115 = v142;
  v116 = v143;
  outlined release of Locale.Components(&v91);
  return v41;
}

unint64_t lazy protocol witness table accessor for type Unicode.UTF16 and conformance Unicode.UTF16()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Unicode.UTF16 and conformance Unicode.UTF16;
  if (!lazy protocol witness table cache variable for type Unicode.UTF16 and conformance Unicode.UTF16)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEE4F0], MEMORY[0x1E0DEE4E8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Unicode.UTF16 and conformance Unicode.UTF16);
  }
  return result;
}

uint64_t specialized static Locale.Currency.isoCurrencies.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  unint64_t v7;
  unint64_t v8;
  Swift::String *v9;

  v0 = ucurr_openISOCurrencies();
  v1 = MEMORY[0x1E0DEE9D8];
  if (v0)
  {
    v2 = v0;
    type metadata accessor for ICU.Enumerator();
    *(_QWORD *)(swift_initStackObject() + 16) = v2;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
    while (uenum_next())
    {
      v3 = String.init(cString:)();
      v5 = v4;
      v6 = String.lowercased()();
      v8 = *(_QWORD *)(v1 + 16);
      v7 = *(_QWORD *)(v1 + 24);
      if (v8 >= v7 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
      *(_QWORD *)(v1 + 16) = v8 + 1;
      v9 = (Swift::String *)(v1 + 32 * v8);
      v9[2]._countAndFlagsBits = v3;
      v9[2]._object = v5;
      v9[3] = v6;
    }
    swift_release();
  }
  return v1;
}

uint64_t specialized static Locale.Currency.commonISOCurrencies.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v0 = ucurr_openISOCurrencies();
  v1 = MEMORY[0x1E0DEE9D8];
  if (v0)
  {
    v2 = v0;
    type metadata accessor for ICU.Enumerator();
    *(_QWORD *)(swift_initStackObject() + 16) = v2;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
    while (uenum_next())
    {
      v3 = String.init(cString:)();
      v5 = v4;
      v7 = *(_QWORD *)(v1 + 16);
      v6 = *(_QWORD *)(v1 + 24);
      if (v7 >= v6 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
      *(_QWORD *)(v1 + 16) = v7 + 1;
      v8 = v1 + 16 * v7;
      *(_QWORD *)(v8 + 32) = v3;
      *(_QWORD *)(v8 + 40) = v5;
    }
    swift_release();
  }
  return v1;
}

uint64_t outlined release of (Locale.Language?, Locale.Language?)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 112);
  v12 = *(_QWORD *)(a1 + 104);
  v13 = *(_QWORD *)(a1 + 96);
  v3 = *(_QWORD *)(a1 + 120);
  v4 = *(_QWORD *)(a1 + 128);
  v5 = *(_QWORD *)(a1 + 136);
  v6 = *(_QWORD *)(a1 + 144);
  v7 = *(_QWORD *)(a1 + 152);
  v11 = *(_OWORD *)(a1 + 160);
  v9 = *(_QWORD *)(a1 + 176);
  v8 = *(_QWORD *)(a1 + 184);
  outlined consume of Locale.Language?(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), (void (*)(void))outlined consume of Locale.LanguageCode?);
  outlined consume of Locale.Language?(v13, v12, v2, v3, v4, v5, v6, v7, v11, *((uint64_t *)&v11 + 1), v9, v8, (void (*)(void))outlined consume of Locale.LanguageCode?);
  return a1;
}

BOOL specialized static Strideable.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a2 == a1;
}

unint64_t specialized _parseHexIntegerDigits<A>(_:isNegative:)(unsigned __int8 *a1, uint64_t a2, int a3)
{
  unint64_t v3;
  unsigned __int8 *v4;
  int v5;
  unsigned __int8 v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  _BOOL4 v10;

  if (a2)
  {
    if (a2 < 1)
      return 0;
    v3 = 0;
    v4 = &a1[a2];
    while (1)
    {
      v5 = *a1;
      v6 = v5 - 48;
      if ((v5 - 48) >= 0xA)
      {
        if ((v5 - 65) < 6)
        {
          v6 = v5 - 55;
        }
        else
        {
          if ((v5 - 97) > 5)
            return 0;
          v6 = v5 - 87;
        }
      }
      v7 = v6;
      v8 = 16 * v3 >= v6;
      v9 = 16 * v3 - v6;
      v10 = !v8;
      if (v3 >> 60 || (a3 & v10 & 1) != 0)
        break;
      v3 = 16 * v3 + v7;
      if ((a3 & 1) != 0)
        v3 = v9;
      if (++a1 >= v4)
        return v3;
    }
  }
  return 0;
}

{
  unsigned int v3;
  unsigned __int8 *v4;
  int v5;
  unsigned __int8 v6;
  unsigned int v7;
  int v8;
  int v9;
  _BOOL4 v10;
  unsigned __int8 v11;

  if (a2)
  {
    if (a2 < 1)
    {
      v7 = 0;
      v11 = 0;
    }
    else
    {
      v3 = 0;
      v4 = &a1[a2];
      while (1)
      {
        v5 = *a1;
        v6 = v5 - 48;
        if ((v5 - 48) >= 0xA)
        {
          if ((v5 - 65) < 6)
          {
            v6 = v5 - 55;
          }
          else
          {
            if ((v5 - 97) > 5)
              goto LABEL_16;
            v6 = v5 - 87;
          }
        }
        v7 = 0;
        v8 = v6;
        v9 = 16 * v3 - v6;
        v10 = 16 * v3 < v6;
        v11 = 1;
        if (v3 >> 28 || (a3 & v10 & 1) != 0)
          break;
        v3 = 16 * v3 + v8;
        if ((a3 & 1) != 0)
          v3 = v9;
        if (++a1 >= v4)
        {
          v11 = 0;
          v7 = v3;
          return v7 | ((unint64_t)v11 << 32);
        }
      }
    }
  }
  else
  {
LABEL_16:
    v7 = 0;
    v11 = 1;
  }
  return v7 | ((unint64_t)v11 << 32);
}

uint64_t specialized _parseHexIntegerDigits<A>(_:isNegative:)(unsigned __int8 *a1, uint64_t a2, char a3)
{
  uint64_t result;
  unsigned __int8 *v5;
  int v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  uint64_t v12;
  char v13;
  unint64_t v14;

  if (!a2)
    return 0;
  if (a2 < 1)
    return 0;
  result = 0;
  v5 = &a1[a2];
  do
  {
    v6 = *a1;
    v7 = v6 - 48;
    if ((v6 - 48) >= 0xA)
    {
      if ((v6 - 65) < 6)
      {
        v7 = v6 - 55;
      }
      else
      {
        if ((v6 - 97) > 5)
          return 0;
        v7 = v6 - 87;
      }
    }
    v8 = 16 * result;
    v9 = 16 * result + v7;
    v10 = __OFADD__(16 * result, v7);
    v11 = __OFSUB__(v8, v7);
    v12 = v8 - v7;
    v13 = v11;
    if ((a3 & 1) == 0)
      v13 = v10;
    v14 = (unint64_t)(result - 0x800000000000000) >> 60;
    result = 0;
    if (v14 < 0xF || (v13 & 1) != 0)
      break;
    result = (a3 & 1) != 0 ? v12 : v9;
    ++a1;
  }
  while (a1 < v5);
  return result;
}

{
  int v3;
  unsigned __int8 *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  BOOL v9;
  unsigned __int8 v10;
  unsigned int v11;
  int v12;

  if (!a2)
  {
    v10 = 0;
    v12 = 1;
    return v10 | (v12 << 8);
  }
  if (a2 >= 1)
  {
    v3 = 0;
    v4 = &a1[a2];
    while (1)
    {
      v5 = *a1;
      v6 = v5 - 48;
      if ((v5 - 48) < 0xA)
        goto LABEL_8;
      if ((v5 - 65) >= 6)
        break;
      v6 = v5 - 55;
      v7 = 16 * v3;
      if ((a3 & 1) != 0)
      {
LABEL_9:
        v8 = v7 - v6;
        v9 = (v8 & 0xFFFFFF00) != 0;
        goto LABEL_12;
      }
LABEL_11:
      v9 = 0;
      v8 = v6 + v7;
LABEL_12:
      v10 = 0;
      v11 = v3;
      v12 = 1;
      if (v11 > 0xF || v9)
        return v10 | (v12 << 8);
      ++a1;
      v3 = v8;
      if (a1 >= v4)
      {
        v12 = 0;
        v10 = v8;
        return v10 | (v12 << 8);
      }
    }
    if ((v5 - 97) > 5)
    {
      v10 = 0;
      v12 = 1;
      return v10 | (v12 << 8);
    }
    v6 = v5 - 87;
LABEL_8:
    v7 = 16 * v3;
    if ((a3 & 1) != 0)
      goto LABEL_9;
    goto LABEL_11;
  }
  v10 = 0;
  v12 = 0;
  return v10 | (v12 << 8);
}

{
  int v3;
  unsigned __int8 *v4;
  int v5;
  unsigned __int8 v6;
  int v7;
  BOOL v8;
  unsigned __int16 v9;
  unsigned int v10;
  int v11;

  if (!a2)
  {
    v9 = 0;
    v11 = 1;
    return v9 | (v11 << 16);
  }
  if (a2 >= 1)
  {
    v3 = 0;
    v4 = &a1[a2];
    while (1)
    {
      v5 = *a1;
      v6 = v5 - 48;
      if ((v5 - 48) >= 0xA)
      {
        if ((v5 - 65) < 6)
        {
          v6 = v5 - 55;
        }
        else
        {
          if ((v5 - 97) > 5)
          {
            v9 = 0;
            v11 = 1;
            return v9 | (v11 << 16);
          }
          v6 = v5 - 87;
        }
      }
      if ((a3 & 1) != 0)
      {
        v7 = (unsigned __int16)(16 * v3) - v6;
        v8 = (v7 & 0xFFFF0000) != 0;
      }
      else
      {
        v8 = 0;
        v7 = 16 * v3 + v6;
      }
      v9 = 0;
      v10 = (unsigned __int16)v3;
      v11 = 1;
      if (v10 > 0xFFF || v8)
        return v9 | (v11 << 16);
      ++a1;
      v3 = v7;
      if (a1 >= v4)
      {
        v11 = 0;
        v9 = v7;
        return v9 | (v11 << 16);
      }
    }
  }
  v9 = 0;
  v11 = 0;
  return v9 | (v11 << 16);
}

{
  char v3;
  unsigned __int8 *v4;
  int v5;
  char v6;
  int v7;
  int v8;
  unsigned __int8 v9;
  unsigned int v10;
  int v11;

  if (!a2)
  {
    v9 = 0;
    v11 = 1;
    return v9 | (v11 << 8);
  }
  if (a2 >= 1)
  {
    v3 = 0;
    v4 = &a1[a2];
    while (1)
    {
      v5 = *a1;
      v6 = v5 - 48;
      if ((v5 - 48) >= 0xA)
      {
        if ((v5 - 65) < 6)
        {
          v6 = v5 - 55;
        }
        else
        {
          if ((v5 - 97) > 5)
          {
            v9 = 0;
            v11 = 1;
            return v9 | (v11 << 8);
          }
          v6 = v5 - 87;
        }
      }
      v7 = (char)(16 * v3);
      if ((a3 & 1) != 0)
        v8 = v7 - v6;
      else
        v8 = v7 + v6;
      v9 = 0;
      v10 = (v3 - 8);
      v11 = 1;
      if (v10 < 0xF0 || v8 != (char)v8)
        return v9 | (v11 << 8);
      ++a1;
      v3 = v8;
      if (a1 >= v4)
      {
        v11 = 0;
        v9 = v8;
        return v9 | (v11 << 8);
      }
    }
  }
  v9 = 0;
  v11 = 0;
  return v9 | (v11 << 8);
}

{
  __int16 v3;
  unsigned __int8 *v4;
  int v5;
  unsigned __int8 v6;
  int v7;
  __int16 v8;
  int v9;
  unsigned __int16 v10;
  unsigned int v11;
  int v12;

  if (!a2)
  {
    v10 = 0;
    v12 = 1;
    return v10 | (v12 << 16);
  }
  if (a2 >= 1)
  {
    v3 = 0;
    v4 = &a1[a2];
    while (1)
    {
      v5 = *a1;
      v6 = v5 - 48;
      if ((v5 - 48) >= 0xA)
      {
        if ((v5 - 65) < 6)
        {
          v6 = v5 - 55;
        }
        else
        {
          if ((v5 - 97) > 5)
          {
            v10 = 0;
            v12 = 1;
            return v10 | (v12 << 16);
          }
          v6 = v5 - 87;
        }
      }
      v7 = v6;
      v8 = 16 * v3;
      if ((a3 & 1) != 0)
        v9 = v8 - v7;
      else
        v9 = v7 + v8;
      v10 = 0;
      v11 = (unsigned __int16)(v3 - 2048);
      v12 = 1;
      if (v11 < 0xF000 || v9 != (__int16)v9)
        return v10 | (v12 << 16);
      ++a1;
      v3 = v9;
      if (a1 >= v4)
      {
        v12 = 0;
        v10 = v9;
        return v10 | (v12 << 16);
      }
    }
  }
  v10 = 0;
  v12 = 0;
  return v10 | (v12 << 16);
}

{
  uint64_t v3;
  unint64_t v4;
  unsigned __int8 *v5;
  int v6;
  unsigned __int8 v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  BOOL v12;
  char v13;
  uint64_t v14;

  if (!a2)
    return 0;
  if (a2 >= 1)
  {
    v3 = 0;
    v4 = 0;
    v5 = &a1[a2];
    while (1)
    {
      v6 = *a1;
      v7 = v6 - 48;
      if ((v6 - 48) >= 0xA)
      {
        if ((v6 - 65) < 6)
        {
          v7 = v6 - 55;
        }
        else
        {
          if ((v6 - 97) > 5)
            return 0;
          v7 = v6 - 87;
        }
      }
      v8 = 16 * v3;
      *((_QWORD *)&v10 + 1) = v4;
      *(_QWORD *)&v10 = v3;
      v9 = v10 >> 60;
      if ((v4 & 0x8000000000000000) == 0)
        break;
      if (__PAIR128__(v4, v3) < __PAIR128__(0xF000000000000000, 1))
        goto LABEL_14;
      LOBYTE(v11) = v8 != 0;
      if ((a3 & 1) != 0)
      {
LABEL_15:
        v4 = (__PAIR128__(v9, v8) - v7) >> 64;
        v3 = v8 - v7;
        v12 = __OFSUB__(__PAIR128__(v9, v8), v7);
        goto LABEL_16;
      }
LABEL_12:
      v3 = v8 + v7;
      v12 = __OFADD__(__CFADD__(v8, v7), v9);
      v4 = __CFADD__(v8, v7) + v9;
LABEL_16:
      v13 = v12;
      v14 = 0;
      if ((v11 & 1) != 0 || (v13 & 1) != 0)
        return v14;
      if (++a1 >= v5)
        return v3;
    }
    if (!(v4 >> 60))
    {
      v11 = v9 >> 63;
      if ((a3 & 1) != 0)
        goto LABEL_15;
      goto LABEL_12;
    }
LABEL_14:
    LOBYTE(v11) = 1;
    if ((a3 & 1) != 0)
      goto LABEL_15;
    goto LABEL_12;
  }
  return 0;
}

unint64_t specialized _parseHexIntegerDigits<A>(_:isNegative:)(unsigned __int8 *a1, uint64_t a2, char a3)
{
  unsigned int v3;
  unsigned __int8 *v4;
  int v5;
  unsigned __int8 v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  BOOL v11;
  BOOL v12;
  unsigned int v13;
  char v14;
  unsigned __int8 v15;
  unsigned int v16;

  if (a2)
  {
    if (a2 < 1)
    {
      v3 = 0;
LABEL_25:
      v15 = 0;
    }
    else
    {
      v3 = 0;
      v4 = &a1[a2];
      while (1)
      {
        v5 = *a1;
        v6 = v5 - 48;
        if ((v5 - 48) >= 0xA)
        {
          if ((v5 - 65) < 6)
          {
            v6 = v5 - 55;
          }
          else
          {
            if ((v5 - 97) > 5)
              goto LABEL_26;
            v6 = v5 - 87;
          }
        }
        v7 = v6;
        v8 = 16 * v3;
        v9 = v3 - 0x8000000;
        v10 = v8 + v6;
        v11 = __OFADD__(v8, v7);
        v12 = __OFSUB__(v8, v7);
        v13 = v8 - v7;
        v14 = v12;
        if ((a3 & 1) != 0)
          v11 = v14;
        v15 = 1;
        v16 = v9 >> 28;
        v3 = 0;
        if (v16 < 0xF || v11)
          break;
        if ((a3 & 1) != 0)
          v3 = v13;
        else
          v3 = v10;
        if (++a1 >= v4)
          goto LABEL_25;
      }
    }
  }
  else
  {
LABEL_26:
    v3 = 0;
    v15 = 1;
  }
  return v3 | ((unint64_t)v15 << 32);
}

uint64_t specialized _parseHexIntegerDigits<A>(_:isNegative:)(unsigned __int8 *a1, uint64_t a2, int a3)
{
  uint64_t result;
  unint64_t v6;
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  unsigned __int128 v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;

  if (!a2)
    return 0;
  if (a2 >= 1)
  {
    result = 0;
    v6 = 0;
    v7 = &a1[a2];
    while (1)
    {
      v8 = *a1;
      v9 = v8 - 48;
      if ((v8 - 48) >= 0xA)
      {
        if ((v8 - 65) < 6)
        {
          v9 = v8 - 55;
        }
        else
        {
          if ((v8 - 97) > 5)
            return 0;
          v9 = v8 - 87;
        }
      }
      *((_QWORD *)&v11 + 1) = v6;
      *(_QWORD *)&v11 = result;
      v10 = v11 >> 60;
      v12 = 16 * result;
      v13 = v11 * 16 - v9;
      v14 = v11 * 16 < (unsigned __int128)v9;
      result = 0;
      if (!(v6 >> 60) && (a3 & v14 & 1) == 0)
      {
        v15 = v12 + v9;
        v16 = __CFADD__(v12, v9) ? v10 + 1 : v10;
        result = (a3 & 1) != 0 ? v13 : v15;
        v6 = (a3 & 1) != 0 ? *((_QWORD *)&v13 + 1) : v16;
        if (++a1 < v7)
          continue;
      }
      return result;
    }
  }
  return 0;
}

uint64_t specialized BufferViewIterator.next()()
{
  unint64_t *v0;
  unsigned __int8 *v1;
  unint64_t v2;
  int v3;

  v1 = (unsigned __int8 *)*v0;
  v2 = v0[1];
  if (*v0 < v2)
  {
    v3 = *v1;
    *v0 = (unint64_t)(v1 + 1);
  }
  else
  {
    v3 = 0;
  }
  return v3 | (((unint64_t)v1 >= v2) << 8);
}

_QWORD *JSON5Scanner.scan()()
{
  _QWORD *v0;
  _QWORD *v1;
  unint64_t v2;
  unsigned __int8 *v3;
  unsigned int v4;
  int v6;
  unint64_t v7;
  int v8;
  unsigned __int8 *v10;
  _BYTE *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  Swift::UInt8_optional v17;
  uint64_t v18;
  Swift::UInt8 value;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = v0;
  if (*(_BYTE *)v0 == 1)
  {
    v3 = (unsigned __int8 *)v0[3];
    v2 = v0[4];
    if ((unint64_t)v3 >= v2)
      goto LABEL_39;
    while (1)
    {
      v4 = *v3;
      if (v4 < 0x40 && ((1 << v4) & 0x100003E00) != 0)
        goto LABEL_10;
      if (v4 != 47)
        break;
      if ((unint64_t)(v3 + 1) >= v2)
        goto LABEL_36;
      v6 = v3[1];
      if (v6 == 42)
      {
        v10 = v3 + 3;
        if ((unint64_t)(v3 + 3) >= v2)
        {
LABEL_35:
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_QWORD *)v15 = 3;
          *(_OWORD *)(v15 + 8) = 0u;
          *(_OWORD *)(v15 + 24) = 0u;
          *(_QWORD *)(v15 + 40) = 0;
          v16 = 12;
LABEL_44:
          *(_BYTE *)(v15 + 48) = v16;
          swift_willThrow();
          return v1;
        }
        v11 = v3 + 2;
        while (2)
        {
          v13 = *v10;
          if (*v11 == 42)
          {
            if (v13 == 42)
              goto LABEL_32;
            if (v13 == 47)
            {
              v3 = v11 + 2;
              goto LABEL_11;
            }
          }
          else if (v13 == 42)
          {
LABEL_32:
            v12 = 1;
LABEL_29:
            v11 += v12;
            v10 = v11 + 1;
            if ((unint64_t)(v11 + 1) >= v2)
              goto LABEL_35;
            continue;
          }
          break;
        }
        v12 = 2;
        goto LABEL_29;
      }
      if (v6 != 47)
      {
LABEL_36:
        v0[3] = v3;
        goto LABEL_39;
      }
      if ((unint64_t)(v3 + 2) < v2)
      {
        v7 = v2 - 2 - (_QWORD)v3;
        v3 += 3;
        while (1)
        {
          v8 = *(v3 - 1);
          if (v8 == 13 || v8 == 10)
            break;
          ++v3;
          if (!--v7)
            goto LABEL_39;
        }
LABEL_11:
        if ((unint64_t)v3 < v2)
          continue;
      }
      goto LABEL_39;
    }
    if (v4 == 160)
    {
LABEL_10:
      ++v3;
      goto LABEL_11;
    }
    v0[3] = v3;
    if (v4 == 123)
      JSON5Scanner.scanObject()();
    else
LABEL_39:
      JSON5Scanner.scanObject(withoutBraces:)(1);
  }
  else
  {
    JSON5Scanner.scanValue()();
  }
  if (!v14)
  {
    v17 = JSON5Scanner.DocumentReader.consumeWhitespace(allowingEOF:)(1);
    if (!v18)
    {
      value = v17.value;
      if ((*(_WORD *)&v17 & 0x100) != 0)
      {
        v25 = v1[6];
        v26 = v1[1];
        v27 = v1[2];
        type metadata accessor for JSONMap();
        v1 = (_QWORD *)swift_allocObject();
        v1[2] = v25;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<(buffer: BufferView<UInt8>, allocation: UnsafeRawPointer?)>._Buffer);
        v28 = swift_allocObject();
        *(_DWORD *)(v28 + 40) = 0;
        *(_QWORD *)(v28 + 16) = v26;
        *(_QWORD *)(v28 + 24) = v27;
        *(_QWORD *)(v28 + 32) = 0;
        v1[3] = v28;
        swift_bridgeObjectRetain();
        return v1;
      }
      v1 = (_QWORD *)specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v1[3], v1[1], v1[2]);
      v21 = v20;
      v23 = v22;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(_QWORD *)v15 = 0xD000000000000015;
      *(_QWORD *)(v15 + 8) = 0x8000000182307210;
      *(_QWORD *)(v15 + 16) = value;
      *(_QWORD *)(v15 + 24) = v1;
      *(_QWORD *)(v15 + 32) = v21;
      *(_QWORD *)(v15 + 40) = v23;
      v16 = 1;
      goto LABEL_44;
    }
  }
  return v1;
}

Swift::UInt8_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSON5Scanner.DocumentReader.consumeWhitespace(allowingEOF:)(Swift::Bool allowingEOF)
{
  uint64_t v1;
  unint64_t v2;
  unsigned __int8 *v3;
  unsigned int v4;
  int v6;
  unint64_t v7;
  int v8;
  unsigned __int8 *v10;
  _BYTE *v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  uint64_t v16;

  v3 = *(unsigned __int8 **)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  if ((unint64_t)v3 < v2)
  {
    while (1)
    {
      v4 = *v3;
      if (v4 <= 0x3F && ((1 << v4) & 0x100003E00) != 0)
        goto LABEL_9;
      if (v4 != 47)
      {
        if (v4 == 160)
        {
LABEL_9:
          ++v3;
          goto LABEL_10;
        }
        goto LABEL_39;
      }
      if ((unint64_t)(v3 + 1) >= v2)
        goto LABEL_38;
      v6 = v3[1];
      if (v6 == 42)
        break;
      if (v6 != 47)
      {
LABEL_38:
        LOWORD(v4) = 47;
LABEL_39:
        *(_QWORD *)(v1 + 16) = v3;
        return (Swift::UInt8_optional)v4;
      }
      if ((unint64_t)(v3 + 2) < v2)
      {
        v7 = v2 - 2 - (_QWORD)v3;
        v3 += 3;
        while (1)
        {
          v8 = *(v3 - 1);
          if (v8 == 13 || v8 == 10)
            break;
          ++v3;
          if (!--v7)
            goto LABEL_33;
        }
LABEL_10:
        if ((unint64_t)v3 < v2)
          continue;
      }
      goto LABEL_33;
    }
    v10 = v3 + 3;
    if ((unint64_t)(v3 + 3) < v2)
    {
      v11 = v3 + 2;
      do
      {
        v13 = *v10;
        if (*v11 == 42)
        {
          if (v13 == 42)
            goto LABEL_31;
          if (v13 == 47)
          {
            v3 = v11 + 2;
            goto LABEL_10;
          }
        }
        else if (v13 == 42)
        {
LABEL_31:
          v12 = 1;
          goto LABEL_28;
        }
        v12 = 2;
LABEL_28:
        v11 += v12;
        v10 = v11 + 1;
      }
      while ((unint64_t)(v11 + 1) < v2);
    }
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    v16 = 3;
    goto LABEL_37;
  }
LABEL_33:
  if (!allowingEOF)
  {
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    v16 = 1;
LABEL_37:
    *(_QWORD *)v15 = v16;
    *(_QWORD *)(v15 + 40) = 0;
    *(_OWORD *)(v15 + 24) = 0u;
    *(_OWORD *)(v15 + 8) = 0u;
    *(_BYTE *)(v15 + 48) = 12;
    return (Swift::UInt8_optional)swift_willThrow();
  }
  return (Swift::UInt8_optional)256;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSON5Scanner.scanObject()()
{
  _QWORD *v0;
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = (unsigned __int8 *)v0[3];
  if ((unsigned __int8 *)v0[4] == v1)
  {
    __break(1u);
    goto LABEL_7;
  }
  v2 = *v1;
  v0[3] = v1 + 1;
  if (v2 != 123)
  {
LABEL_7:
    __break(1u);
    return;
  }
  if ((uint64_t)v0[5] > 511)
  {
    v3 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)v1, v0[1], v0[2]);
    v5 = v4;
    v7 = v6;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_QWORD *)v8 = v3;
    *(_QWORD *)(v8 + 8) = v5;
    *(_QWORD *)(v8 + 16) = v7;
    *(_QWORD *)(v8 + 24) = 0;
    *(_QWORD *)(v8 + 32) = 0;
    *(_QWORD *)(v8 + 40) = 0;
    *(_BYTE *)(v8 + 48) = 2;
    swift_willThrow();
  }
  else
  {
    JSON5Scanner.scanObject(withoutBraces:)(0);
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSON5Scanner.scanObject(withoutBraces:)(Swift::Bool withoutBraces)
{
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  int v9;
  unint64_t v10;
  int v11;
  unsigned __int8 *v13;
  _BYTE *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  int64_t v27;
  uint64_t v28;
  Swift::Int v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  Swift::Int v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  _QWORD *v41;
  unint64_t v42;
  _QWORD *v43;
  Swift::Bool done;
  Swift::Int count;

  v2 = v1;
  v4 = v1[4];
  ++v1[5];
  v5 = v1[3];
  if (v5 >= v4)
  {
LABEL_34:
    if (withoutBraces)
    {
LABEL_35:
      JSON5Scanner.JSONPartialMapData.recordEmptyCollection(tagType:with:)(5u, (_QWORD *)v1[1], v1[2], v5);
      goto LABEL_40;
    }
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    v18 = 1;
    goto LABEL_38;
  }
  v6 = (unsigned __int8 *)v1[3];
  while (1)
  {
    v7 = *v6;
    if (v7 < 0x40 && ((1 << v7) & 0x100003E00) != 0)
      goto LABEL_10;
    if (v7 != 47)
      break;
    if ((unint64_t)(v6 + 1) >= v4)
      goto LABEL_42;
    v9 = v6[1];
    if (v9 == 42)
    {
      v13 = v6 + 3;
      if ((unint64_t)(v6 + 3) < v4)
      {
        v14 = v6 + 2;
        do
        {
          v16 = *v13;
          if (*v14 == 42)
          {
            if (v16 == 42)
              goto LABEL_32;
            if (v16 == 47)
            {
              v6 = v14 + 2;
              goto LABEL_11;
            }
          }
          else if (v16 == 42)
          {
LABEL_32:
            v15 = 1;
            goto LABEL_29;
          }
          v15 = 2;
LABEL_29:
          v14 += v15;
          v13 = v14 + 1;
        }
        while ((unint64_t)(v14 + 1) < v4);
      }
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      v18 = 3;
LABEL_38:
      *(_QWORD *)v17 = v18;
      *(_QWORD *)(v17 + 40) = 0;
      *(_OWORD *)(v17 + 24) = 0u;
      *(_OWORD *)(v17 + 8) = 0u;
      *(_BYTE *)(v17 + 48) = 12;
LABEL_39:
      swift_willThrow();
      goto LABEL_40;
    }
    if (v9 != 47)
    {
LABEL_42:
      v1[3] = v6;
      goto LABEL_46;
    }
    if ((unint64_t)(v6 + 2) < v4)
    {
      v10 = v4 - 2 - (_QWORD)v6;
      v6 += 3;
      while (1)
      {
        v11 = *(v6 - 1);
        if (v11 == 13 || v11 == 10)
          break;
        ++v6;
        if (!--v10)
          goto LABEL_34;
      }
LABEL_11:
      if ((unint64_t)v6 < v4)
        continue;
    }
    goto LABEL_34;
  }
  if (v7 == 160)
  {
LABEL_10:
    ++v6;
    goto LABEL_11;
  }
  v1[3] = v6;
  if (v7 == 125)
  {
    if (withoutBraces)
    {
      v20 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)v6, v1[1], v1[2]);
      v22 = v21;
      v24 = v23;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(_QWORD *)v25 = 0;
      *(_QWORD *)(v25 + 8) = 0;
      *(_QWORD *)(v25 + 16) = 125;
      *(_QWORD *)(v25 + 24) = v20;
      *(_QWORD *)(v25 + 32) = v22;
      *(_QWORD *)(v25 + 40) = v24;
      *(_BYTE *)(v25 + 48) = 1;
      goto LABEL_39;
    }
    v5 = (unint64_t)(v6 + 1);
    v1[3] = v6 + 1;
    goto LABEL_35;
  }
LABEL_46:
  count = 0;
  v26 = v1 + 6;
  v27 = JSON5Scanner.JSONPartialMapData.recordStartCollection(tagType:with:)(5u, (_QWORD *)v1[1], v1[2], (uint64_t)v6);
  done = 0;
  while (1)
  {
    JSON5Scanner._scanObjectLoop(withoutBraces:count:done:)(withoutBraces, &count, &done);
    if (v28)
      break;
    if (done)
    {
      v29 = count;
      JSON5Scanner.JSONPartialMapData.resizeIfNecessary(with:)((_QWORD *)v1[1], v1[2], v1[3]);
      v30 = (_QWORD *)v1[6];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30[2] + 1, 1, v30);
      v32 = v30[2];
      v31 = v30[3];
      v33 = v32 + 1;
      if (v32 >= v31 >> 1)
        v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v31 > 1), v32 + 1, 1, v30);
      v30[2] = v33;
      v30[v32 + 4] = 7;
      v34 = &v30[v27 + 4];
      *v34 = v33;
      v34[1] = v29;
      v19 = v2[5] - 1;
      v2[6] = v30;
      goto LABEL_41;
    }
  }
  v35 = count;
  JSON5Scanner.JSONPartialMapData.resizeIfNecessary(with:)((_QWORD *)v1[1], v1[2], v1[3]);
  v36 = (_QWORD *)v1[6];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36[2] + 1, 1, v36);
  v37 = v36[2];
  v38 = v36[3];
  v39 = v37 + 1;
  if (v37 >= v38 >> 1)
  {
    v41 = v36;
    v42 = v36[2];
    v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v38 > 1), v37 + 1, 1, v41);
    v37 = v42;
    v36 = v43;
  }
  v36[2] = v39;
  v36[v37 + 4] = 7;
  v40 = &v36[v27 + 4];
  *v40 = v39;
  v40[1] = v35;
  *v26 = v36;
LABEL_40:
  v19 = v2[5] - 1;
LABEL_41:
  v2[5] = v19;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSON5Scanner.scanValue()()
{
  _QWORD *v0;
  unint64_t v1;
  unsigned __int8 *v2;
  uint64_t v3;
  int v5;
  unint64_t v6;
  int v7;
  unsigned __int8 *v9;
  _BYTE *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::UInt8_optional v21;

  v2 = (unsigned __int8 *)v0[3];
  v1 = v0[4];
  if ((unint64_t)v2 >= v1)
  {
LABEL_33:
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    v14 = 1;
    goto LABEL_35;
  }
  while (1)
  {
    v3 = *v2;
    if (v3 < 0x40 && ((1 << v3) & 0x100003E00) != 0)
      goto LABEL_9;
    if ((_DWORD)v3 != 47)
      break;
    if ((unint64_t)(v2 + 1) >= v1)
      goto LABEL_38;
    v5 = v2[1];
    if (v5 == 42)
    {
      v9 = v2 + 3;
      if ((unint64_t)(v2 + 3) < v1)
      {
        v10 = v2 + 2;
        do
        {
          v12 = *v9;
          if (*v10 == 42)
          {
            if (v12 == 42)
              goto LABEL_31;
            if (v12 == 47)
            {
              v2 = v10 + 2;
              goto LABEL_10;
            }
          }
          else if (v12 == 42)
          {
LABEL_31:
            v11 = 1;
            goto LABEL_28;
          }
          v11 = 2;
LABEL_28:
          v10 += v11;
          v9 = v10 + 1;
        }
        while ((unint64_t)(v10 + 1) < v1);
      }
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      v14 = 3;
LABEL_35:
      *(_QWORD *)v13 = v14;
      *(_QWORD *)(v13 + 40) = 0;
      *(_OWORD *)(v13 + 24) = 0u;
      *(_OWORD *)(v13 + 8) = 0u;
      v15 = 12;
LABEL_36:
      *(_BYTE *)(v13 + 48) = v15;
      swift_willThrow();
      return;
    }
    if (v5 != 47)
    {
LABEL_38:
      v0[3] = v2;
LABEL_39:
      v16 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)v2, v0[1], v0[2]);
      v18 = v17;
      v20 = v19;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(_QWORD *)v13 = 0;
      *(_QWORD *)(v13 + 8) = 0;
      *(_QWORD *)(v13 + 16) = v3;
      *(_QWORD *)(v13 + 24) = v16;
      *(_QWORD *)(v13 + 32) = v18;
      *(_QWORD *)(v13 + 40) = v20;
      v15 = 1;
      goto LABEL_36;
    }
    if ((unint64_t)(v2 + 2) < v1)
    {
      v6 = v1 - 2 - (_QWORD)v2;
      v2 += 3;
      while (1)
      {
        v7 = *(v2 - 1);
        if (v7 == 13 || v7 == 10)
          break;
        ++v2;
        if (!--v6)
          goto LABEL_33;
      }
LABEL_10:
      if ((unint64_t)v2 < v1)
        continue;
    }
    goto LABEL_33;
  }
  if ((_DWORD)v3 == 160)
  {
LABEL_9:
    ++v2;
    goto LABEL_10;
  }
  v0[3] = v2;
  switch((int)v3)
  {
    case '"':
      v21 = (Swift::UInt8_optional)34;
      goto LABEL_48;
    case '\'':
LABEL_47:
      v21 = (Swift::UInt8_optional)39;
LABEL_48:
      JSON5Scanner.scanString(withQuote:)(v21);
      return;
    case '+':
    case '-':
      goto LABEL_41;
    case '[':
      JSON5Scanner.scanArray()();
      return;
    case 'f':
    case 't':
      JSON5Scanner.scanBool()();
      return;
    case 'n':
      JSON5Scanner.scanNull()();
      return;
    case '{':
      JSON5Scanner.scanObject()();
      return;
    default:
      if ((v3 - 58) <= 0xFFFFFFF5)
      {
        switch((int)v3)
        {
          case 9:
          case 10:
          case 13:
          case 32:
            __break(1u);
            goto LABEL_47;
          case 46:
          case 73:
          case 78:
            break;
          default:
            goto LABEL_39;
        }
      }
LABEL_41:
      JSON5Scanner.DocumentReader.skipNumber()();
      JSON5Scanner.JSONPartialMapData.record(tagType:count:dataOffset:with:)(1u, v0[3] - (_QWORD)v2, (uint64_t)&v2[-v0[1]], (_QWORD *)v0[1], v0[2], v0[3]);
      break;
  }
}

Swift::UInt8 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSON5Scanner.DocumentReader.consumeWhitespace()()
{
  uint64_t v0;
  unint64_t v1;
  unsigned __int8 *v2;
  unsigned int v3;
  int v5;
  unint64_t v6;
  int v7;
  unsigned __int8 *v9;
  _BYTE *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(unsigned __int8 **)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  if ((unint64_t)v2 >= v1)
  {
LABEL_33:
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    v14 = 1;
    goto LABEL_35;
  }
  while (1)
  {
    v3 = *v2;
    if (v3 <= 0x3F && ((1 << v3) & 0x100003E00) != 0)
      goto LABEL_9;
    if (v3 != 47)
      break;
    if ((unint64_t)(v2 + 1) >= v1)
      goto LABEL_36;
    v5 = v2[1];
    if (v5 == 42)
    {
      v9 = v2 + 3;
      if ((unint64_t)(v2 + 3) < v1)
      {
        v10 = v2 + 2;
        do
        {
          v12 = *v9;
          if (*v10 == 42)
          {
            if (v12 == 42)
              goto LABEL_31;
            if (v12 == 47)
            {
              v2 = v10 + 2;
              goto LABEL_10;
            }
          }
          else if (v12 == 42)
          {
LABEL_31:
            v11 = 1;
            goto LABEL_28;
          }
          v11 = 2;
LABEL_28:
          v10 += v11;
          v9 = v10 + 1;
        }
        while ((unint64_t)(v10 + 1) < v1);
      }
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      v14 = 3;
LABEL_35:
      *(_QWORD *)v13 = v14;
      *(_QWORD *)(v13 + 40) = 0;
      *(_OWORD *)(v13 + 24) = 0u;
      *(_OWORD *)(v13 + 8) = 0u;
      *(_BYTE *)(v13 + 48) = 12;
      swift_willThrow();
      LOBYTE(v3) = 0;
      return v3;
    }
    if (v5 != 47)
    {
LABEL_36:
      *(_QWORD *)(v0 + 16) = v2;
      LOBYTE(v3) = 47;
      return v3;
    }
    if ((unint64_t)(v2 + 2) < v1)
    {
      v6 = v1 - 2 - (_QWORD)v2;
      v2 += 3;
      while (1)
      {
        v7 = *(v2 - 1);
        if (v7 == 13 || v7 == 10)
          break;
        ++v2;
        if (!--v6)
          goto LABEL_33;
      }
LABEL_10:
      if ((unint64_t)v2 < v1)
        continue;
    }
    goto LABEL_33;
  }
  if (v3 == 160)
  {
LABEL_9:
    ++v2;
    goto LABEL_10;
  }
  *(_QWORD *)(v0 + 16) = v2;
  return v3;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSON5Scanner.scanString(withQuote:)(Swift::UInt8_optional withQuote)
{
  _QWORD *v1;
  uint64_t v2;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int8 v11;
  char v12;

  v12 = 0;
  v4 = JSON5Scanner.DocumentReader.skipUTF8StringTillNextUnescapedQuote(isSimple:quote:)(&v12, *(_WORD *)&withQuote & 0x1FF);
  if (v2)
    return;
  v5 = (unsigned __int8 *)v1[3];
  if ((*(_WORD *)&withQuote & 0x100) == 0)
  {
    if ((unsigned __int8 *)v1[4] == v5)
    {
      __break(1u);
    }
    else
    {
      v6 = (uint64_t)(v5 + 1);
      v7 = *v5;
      v1[3] = v5 + 1;
      if (v7 == withQuote.value)
        goto LABEL_6;
    }
    __break(1u);
    return;
  }
  v6 = v1[3];
LABEL_6:
  v8 = v5 - v4;
  v9 = (unsigned __int8 *)v1[1];
  v10 = v4 - v9;
  if (v12)
    v11 = 8;
  else
    v11 = 0;
  JSON5Scanner.JSONPartialMapData.record(tagType:count:dataOffset:with:)(v11, v8, v10, v9, v1[2], v6);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSON5Scanner.scanArray()()
{
  _QWORD *v0;
  _QWORD *v1;
  unint64_t v2;
  unsigned __int8 *v3;
  unint64_t v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  int v10;
  unint64_t v11;
  int v12;
  unsigned __int8 *v14;
  _BYTE *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  Swift::UInt8 v27;
  uint64_t v28;
  uint64_t v29;
  Swift::UInt8_optional v30;
  uint64_t v31;
  Swift::UInt8 v32;
  uint64_t v33;
  uint64_t v34;
  Swift::UInt8 v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  int64_t v62;

  v3 = (unsigned __int8 *)v1[3];
  v4 = v1[4];
  if ((unsigned __int8 *)v4 == v3)
  {
    __break(1u);
  }
  else
  {
    v0 = v1;
    v5 = v3 + 1;
    v6 = *v3;
    v1[3] = v3 + 1;
    if (v6 == 91)
    {
      v7 = v1[5];
      if (v7 > 511)
      {
        v18 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)v3, v1[1], v1[2]);
        v20 = v19;
        v22 = v21;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_QWORD *)v23 = v18;
        *(_QWORD *)(v23 + 8) = v20;
        *(_QWORD *)(v23 + 16) = v22;
        *(_QWORD *)(v23 + 24) = 0;
        *(_QWORD *)(v23 + 32) = 0;
        *(_QWORD *)(v23 + 40) = 0;
        *(_BYTE *)(v23 + 48) = 2;
        swift_willThrow();
        return;
      }
      v1[5] = v7 + 1;
      if ((unint64_t)v5 >= v4)
      {
LABEL_37:
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        v25 = 1;
      }
      else
      {
        while (1)
        {
          v8 = *v5;
          if (v8 < 0x40 && ((1 << v8) & 0x100003E00) != 0)
            goto LABEL_12;
          if (v8 != 47)
          {
            if (v8 == 160)
            {
LABEL_12:
              ++v5;
              goto LABEL_13;
            }
            v1[3] = v5;
            if (v8 != 93)
            {
              if (v8 <= 0x20)
              {
                v34 = 1 << v8;
                if (((1 << v8) & 0x100002600) != 0)
                {
                  __break(1u);
LABEL_65:
                  if ((_DWORD)v34 == 93)
                  {
LABEL_70:
                    v44 = v0[2];
                    v45 = v0[3] + 1;
                    v0[3] = v45;
                    v43 = (_QWORD *)v0[1];
                  }
                  else
                  {
                    if (v34 <= 0x20 && ((1 << v34) & 0x100002600) != 0)
                    {
                      __break(1u);
LABEL_87:
                      __break(1u);
                      JUMPOUT(0x181AD9814);
                    }
                    v37 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v0[3], v0[1], v0[2]);
                    v39 = v38;
                    v41 = v40;
                    lazy protocol witness table accessor for type JSONError and conformance JSONError();
                    swift_allocError();
                    *(_OWORD *)v42 = xmmword_18206BE30;
                    *(_QWORD *)(v42 + 16) = v1;
                    *(_QWORD *)(v42 + 24) = v37;
                    *(_QWORD *)(v42 + 32) = v39;
                    *(_QWORD *)(v42 + 40) = v41;
                    *(_BYTE *)(v42 + 48) = 1;
                    swift_willThrow();
LABEL_69:
                    v43 = (_QWORD *)v0[1];
                    v44 = v0[2];
                    v45 = v0[3];
                  }
                  JSON5Scanner.JSONPartialMapData.resizeIfNecessary(with:)(v43, v44, v45);
                  v46 = (_QWORD *)v0[6];
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                    v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v46[2] + 1, 1, v46);
                  v48 = v46[2];
                  v47 = v46[3];
                  v49 = v48 + 1;
                  if (v48 >= v47 >> 1)
                    v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v47 > 1), v48 + 1, 1, v46);
                  v46[2] = v49;
                  v46[v48 + 4] = 7;
                  v50 = &v46[v62 + 4];
                  *v50 = v49;
                  v50[1] = v2 + 1;
                  goto LABEL_85;
                }
              }
              goto LABEL_42;
            }
            v51 = (uint64_t)(v5 + 1);
            v1[3] = v51;
            JSON5Scanner.JSONPartialMapData.recordEmptyCollection(tagType:with:)(6u, (_QWORD *)v1[1], v1[2], v51);
LABEL_40:
            --v1[5];
            return;
          }
          if ((unint64_t)(v5 + 1) >= v4)
            goto LABEL_41;
          v10 = v5[1];
          if (v10 == 42)
            break;
          if (v10 != 47)
          {
LABEL_41:
            v1[3] = v5;
LABEL_42:
            v62 = JSON5Scanner.JSONPartialMapData.recordStartCollection(tagType:with:)(6u, (_QWORD *)v1[1], v1[2], (uint64_t)v5);
            v26 = 0;
            while (2)
            {
              v2 = v26;
              v27 = JSON5Scanner.DocumentReader.consumeWhitespace()();
              if (!v28)
              {
                LOBYTE(v1) = v27;
                switch(v27)
                {
                  case '"':
                    v30 = (Swift::UInt8_optional)34;
                    goto LABEL_51;
                  case '\'':
                    v30 = (Swift::UInt8_optional)39;
LABEL_51:
                    JSON5Scanner.scanString(withQuote:)(v30);
                    goto LABEL_55;
                  case '+':
                  case '-':
                    goto LABEL_49;
                  case '[':
                    JSON5Scanner.scanArray()();
                    goto LABEL_55;
                  case 'f':
                  case 't':
                    JSON5Scanner.scanBool()();
                    goto LABEL_55;
                  case 'n':
                    JSON5Scanner.scanNull()();
                    goto LABEL_55;
                  case '{':
                    JSON5Scanner.scanObject()();
LABEL_55:
                    if (!v29)
                      goto LABEL_56;
                    goto LABEL_80;
                  default:
                    if ((v27 - 58) <= 0xF5u)
                    {
                      switch(v27)
                      {
                        case 9u:
                        case 0xAu:
                        case 0xDu:
                        case 0x20u:
                          goto LABEL_87;
                        case 0x2Eu:
                        case 0x49u:
                        case 0x4Eu:
                          break;
                        default:
                          goto LABEL_79;
                      }
                    }
LABEL_49:
                    v31 = v0[3];
                    JSON5Scanner.DocumentReader.skipNumber()();
                    JSON5Scanner.JSONPartialMapData.record(tagType:count:dataOffset:with:)(1u, v0[3] - v31, v31 - v0[1], (_QWORD *)v0[1], v0[2], v0[3]);
LABEL_56:
                    v32 = JSON5Scanner.DocumentReader.consumeWhitespace()();
                    if (v33)
                      goto LABEL_69;
                    LOBYTE(v1) = v32;
                    LODWORD(v34) = v32;
                    if (v32 != 44)
                      goto LABEL_65;
                    ++v0[3];
                    v35 = JSON5Scanner.DocumentReader.consumeWhitespace()();
                    if (v36)
                      goto LABEL_69;
                    v26 = v2 + 1;
                    if (v35 == 93)
                      goto LABEL_70;
                    continue;
                }
              }
              goto LABEL_80;
            }
          }
          if ((unint64_t)(v5 + 2) < v4)
          {
            v11 = v4 - 2 - (_QWORD)v5;
            v5 += 3;
            while (1)
            {
              v12 = *(v5 - 1);
              if (v12 == 13 || v12 == 10)
                break;
              ++v5;
              if (!--v11)
                goto LABEL_37;
            }
LABEL_13:
            if ((unint64_t)v5 < v4)
              continue;
          }
          goto LABEL_37;
        }
        v14 = v5 + 3;
        if ((unint64_t)(v5 + 3) < v4)
        {
          v15 = v5 + 2;
          do
          {
            v17 = *v14;
            if (*v15 == 42)
            {
              if (v17 == 42)
                goto LABEL_34;
              if (v17 == 47)
              {
                v5 = v15 + 2;
                goto LABEL_13;
              }
            }
            else if (v17 == 42)
            {
LABEL_34:
              v16 = 1;
              goto LABEL_31;
            }
            v16 = 2;
LABEL_31:
            v15 += v16;
            v14 = v15 + 1;
          }
          while ((unint64_t)(v15 + 1) < v4);
        }
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        v25 = 3;
      }
      *(_QWORD *)v24 = v25;
      *(_QWORD *)(v24 + 40) = 0;
      *(_OWORD *)(v24 + 24) = 0u;
      *(_OWORD *)(v24 + 8) = 0u;
      *(_BYTE *)(v24 + 48) = 12;
      swift_willThrow();
      goto LABEL_40;
    }
  }
  __break(1u);
LABEL_79:
  v52 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v0[3], v0[1], v0[2]);
  v54 = v53;
  v56 = v55;
  lazy protocol witness table accessor for type JSONError and conformance JSONError();
  swift_allocError();
  *(_QWORD *)v57 = 0;
  *(_QWORD *)(v57 + 8) = 0;
  *(_QWORD *)(v57 + 16) = v1;
  *(_QWORD *)(v57 + 24) = v52;
  *(_QWORD *)(v57 + 32) = v54;
  *(_QWORD *)(v57 + 40) = v56;
  *(_BYTE *)(v57 + 48) = 1;
  swift_willThrow();
LABEL_80:
  JSON5Scanner.JSONPartialMapData.resizeIfNecessary(with:)((_QWORD *)v0[1], v0[2], v0[3]);
  v46 = (_QWORD *)v0[6];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v46[2] + 1, 1, v46);
  v59 = v46[2];
  v58 = v46[3];
  v60 = v59 + 1;
  if (v59 >= v58 >> 1)
    v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v58 > 1), v59 + 1, 1, v46);
  v46[2] = v60;
  v46[v59 + 4] = 7;
  v61 = &v46[v62 + 4];
  *v61 = v60;
  v61[1] = v2;
LABEL_85:
  --v0[5];
  v0[6] = v46;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSON5Scanner.scanNull()()
{
  _QWORD *v0;
  _QWORD *v1;
  _BYTE *v2;
  unint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v2 = (_BYTE *)v0[3];
  v3 = v0[4];
  if (v3 < (unint64_t)v2)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if ((uint64_t)(v3 - (_QWORD)v2) <= 3)
  {
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_QWORD *)v4 = 1;
    *(_OWORD *)(v4 + 8) = 0u;
    *(_OWORD *)(v4 + 24) = 0u;
    *(_QWORD *)(v4 + 40) = 0;
    v5 = 12;
LABEL_22:
    *(_BYTE *)(v4 + 48) = v5;
    swift_willThrow();
    return;
  }
  v1 = v0;
  if (*(_DWORD *)v2 != 1819047278)
  {
    if ((((v0[1] + v0[2] - v3) | (unint64_t)&v2[-v0[1]]) & 0x8000000000000000) == 0)
    {
      if (*v2 == 110)
      {
        if (v2[1] == 117)
        {
          if (v2[2] == 108)
          {
            if (v2[3] == 108)
              v6 = 0;
            else
              v6 = 3;
          }
          else
          {
            v6 = 2;
          }
        }
        else
        {
          v6 = 1;
        }
      }
      else
      {
        v6 = 0;
      }
      _StringGuts.grow(_:)(20);
      swift_bridgeObjectRelease();
      v12 = 0;
      v13 = (unsigned __int8 *)(v0[3] + v6);
      if ((unint64_t)v13 < v0[4])
        v12 = *v13;
      v14 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)v13, v0[1], v0[2]);
      v16 = v15;
      v18 = v17;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(_QWORD *)v4 = 0xD000000000000016;
      *(_QWORD *)(v4 + 8) = 0x8000000182307290;
      *(_QWORD *)(v4 + 16) = v12;
      *(_QWORD *)(v4 + 24) = v14;
      *(_QWORD *)(v4 + 32) = v16;
      *(_QWORD *)(v4 + 40) = v18;
      v5 = 1;
      goto LABEL_22;
    }
    goto LABEL_24;
  }
  v0[3] = v2 + 4;
  v7 = (_QWORD *)v0[1];
  v8 = v0[2];
  v0 += 6;
  JSON5Scanner.JSONPartialMapData.resizeIfNecessary(with:)(v7, v8, (uint64_t)(v2 + 4));
  v1 = (_QWORD *)v1[6];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_25:
    v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1[2] + 1, 1, v1);
  v10 = v1[2];
  v9 = v1[3];
  v11 = v10 + 1;
  if (v10 >= v9 >> 1)
  {
    v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v1);
    v11 = v10 + 1;
    v1 = v19;
  }
  v1[2] = v11;
  v1[v10 + 4] = 2;
  *v0 = v1;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSON5Scanner.scanBool()()
{
  _QWORD *v0;
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  _QWORD *v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;

  v1 = (unsigned __int8 *)v0[3];
  v2 = (unsigned __int8 *)v0[4];
  if (v2 != v1)
  {
    v3 = v0;
    v4 = v1 + 1;
    v5 = *v1;
    v0[3] = v1 + 1;
    if (v5 == 116)
    {
      if (v2 >= v4)
      {
        if (v2 - v4 > 2)
        {
          if (*(_WORD *)v4 == 30066 && v1[3] == 101)
          {
            v0[3] = v1 + 4;
            v10 = (_QWORD *)v0[1];
            v11 = v0[2];
            v0 += 6;
            JSON5Scanner.JSONPartialMapData.resizeIfNecessary(with:)(v10, v11, (uint64_t)(v1 + 4));
            v3 = (_QWORD *)v3[6];
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            {
LABEL_27:
              v13 = v3[2];
              v12 = v3[3];
              v14 = v13 + 1;
              if (v13 >= v12 >> 1)
              {
                v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v3);
                v14 = v13 + 1;
                v3 = v29;
              }
              v3[2] = v14;
              v15 = &v3[v13];
              v16 = 3;
LABEL_35:
              v15[4] = v16;
              *v0 = v3;
              return;
            }
LABEL_47:
            v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
            goto LABEL_27;
          }
          if ((((v0[1] + v0[2] - (_QWORD)v2) | (unint64_t)&v4[-v0[1]]) & 0x8000000000000000) == 0)
          {
            if (*v4 == 114)
            {
              if (v1[2] == 117)
              {
                v7 = 2 * (v1[3] != 101);
                goto LABEL_37;
              }
              goto LABEL_36;
            }
            goto LABEL_25;
          }
          goto LABEL_45;
        }
LABEL_16:
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_QWORD *)v8 = 1;
        *(_OWORD *)(v8 + 8) = 0u;
        *(_OWORD *)(v8 + 24) = 0u;
        *(_QWORD *)(v8 + 40) = 0;
        v9 = 12;
LABEL_40:
        *(_BYTE *)(v8 + 48) = v9;
        swift_willThrow();
        return;
      }
      __break(1u);
    }
    else if (v5 == 102)
    {
      if (v2 >= v4)
      {
        if (v2 - v4 >= 4)
        {
          if (*(_DWORD *)v4 == 1702063201)
          {
            v0[3] = v1 + 5;
            v17 = (_QWORD *)v0[1];
            v18 = v0[2];
            v0 += 6;
            JSON5Scanner.JSONPartialMapData.resizeIfNecessary(with:)(v17, v18, (uint64_t)(v1 + 5));
            v3 = (_QWORD *)v3[6];
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
            v20 = v3[2];
            v19 = v3[3];
            v21 = v20 + 1;
            if (v20 >= v19 >> 1)
            {
              v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v19 > 1), v20 + 1, 1, v3);
              v21 = v20 + 1;
              v3 = v30;
            }
            v3[2] = v21;
            v15 = &v3[v20];
            v16 = 4;
            goto LABEL_35;
          }
          if ((((v0[1] + v0[2] - (_QWORD)v2) | (unint64_t)&v4[-v0[1]]) & 0x8000000000000000) == 0)
          {
            if (*v4 == 97)
            {
              if (v1[2] == 108)
              {
                if (v1[3] == 115)
                {
                  if (v1[4] == 101)
                    v7 = 0;
                  else
                    v7 = 3;
                }
                else
                {
                  v7 = 2;
                }
LABEL_37:
                _StringGuts.grow(_:)(20);
                swift_bridgeObjectRelease();
                v22 = 0;
                v23 = (unsigned __int8 *)(v0[3] + v7);
                if ((unint64_t)v23 < v0[4])
                  v22 = *v23;
                v24 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)v23, v0[1], v0[2]);
                v26 = v25;
                v28 = v27;
                lazy protocol witness table accessor for type JSONError and conformance JSONError();
                swift_allocError();
                *(_QWORD *)v8 = 0xD000000000000019;
                *(_QWORD *)(v8 + 8) = 0x8000000182307260;
                *(_QWORD *)(v8 + 16) = v22;
                *(_QWORD *)(v8 + 24) = v24;
                *(_QWORD *)(v8 + 32) = v26;
                *(_QWORD *)(v8 + 40) = v28;
                v9 = 1;
                goto LABEL_40;
              }
LABEL_36:
              v7 = 1;
              goto LABEL_37;
            }
LABEL_25:
            v7 = 0;
            goto LABEL_37;
          }
          goto LABEL_46;
        }
        goto LABEL_16;
      }
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    __break(1u);
    goto LABEL_44;
  }
  __break(1u);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSON5Scanner._scanObjectLoop(withoutBraces:count:done:)(Swift::Bool withoutBraces, Swift::Int *count, Swift::Bool *done)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  unsigned __int8 *v9;
  unint64_t v10;
  uint64_t v11;
  int v13;
  unint64_t v14;
  int v15;
  unsigned __int8 *v17;
  _BYTE *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  Swift::UInt8_optional v25;
  uint64_t v26;
  Swift::UInt8 value;
  Swift::UInt8_optional v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v4 = v3;
  JSON5Scanner.scanKey()();
  if (v8)
    return;
  v9 = (unsigned __int8 *)v3[3];
  v10 = v3[4];
  if ((unint64_t)v9 >= v10)
  {
LABEL_34:
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    v22 = 1;
    goto LABEL_36;
  }
  while (1)
  {
    v11 = *v9;
    if (v11 < 0x40 && ((1 << v11) & 0x100003E00) != 0)
      goto LABEL_10;
    if ((_DWORD)v11 != 47)
      break;
    if ((unint64_t)(v9 + 1) >= v10)
      goto LABEL_39;
    v13 = v9[1];
    if (v13 == 42)
    {
      v17 = v9 + 3;
      if ((unint64_t)(v9 + 3) < v10)
      {
        v18 = v9 + 2;
        do
        {
          v20 = *v17;
          if (*v18 == 42)
          {
            if (v20 == 42)
              goto LABEL_32;
            if (v20 == 47)
            {
              v9 = v18 + 2;
              goto LABEL_11;
            }
          }
          else if (v20 == 42)
          {
LABEL_32:
            v19 = 1;
            goto LABEL_29;
          }
          v19 = 2;
LABEL_29:
          v18 += v19;
          v17 = v18 + 1;
        }
        while ((unint64_t)(v18 + 1) < v10);
      }
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      v22 = 3;
LABEL_36:
      *(_QWORD *)v21 = v22;
      *(_QWORD *)(v21 + 40) = 0;
      *(_OWORD *)(v21 + 24) = 0u;
      *(_OWORD *)(v21 + 8) = 0u;
      v23 = 12;
LABEL_37:
      *(_BYTE *)(v21 + 48) = v23;
      swift_willThrow();
      return;
    }
    if (v13 != 47)
    {
LABEL_39:
      v3[3] = v9;
LABEL_51:
      v30 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)v9, v3[1], v3[2]);
      v32 = v35;
      v34 = v36;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(_OWORD *)v21 = xmmword_18206BE40;
      *(_QWORD *)(v21 + 16) = v11;
      goto LABEL_52;
    }
    if ((unint64_t)(v9 + 2) < v10)
    {
      v14 = v10 - 2 - (_QWORD)v9;
      v9 += 3;
      while (1)
      {
        v15 = *(v9 - 1);
        if (v15 == 13 || v15 == 10)
          break;
        ++v9;
        if (!--v14)
          goto LABEL_34;
      }
LABEL_11:
      if ((unint64_t)v9 < v10)
        continue;
    }
    goto LABEL_34;
  }
  if ((_DWORD)v11 == 160)
  {
LABEL_10:
    ++v9;
    goto LABEL_11;
  }
  v3[3] = v9;
  if ((_DWORD)v11 != 58)
    goto LABEL_51;
  v3[3] = v9 + 1;
  JSON5Scanner.scanValue()();
  if (!v24)
  {
    *count += 2;
    v25 = JSON5Scanner.DocumentReader.consumeWhitespace(allowingEOF:)(withoutBraces);
    if (!v26)
    {
      value = v25.value;
      if ((*(_WORD *)&v25 & 0x100) != 0)
      {
        if (!withoutBraces)
        {
          __break(1u);
          return;
        }
        goto LABEL_55;
      }
      if (v25.value == 125)
        goto LABEL_49;
      if (v25.value != 44)
      {
        v37 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v4[3], v4[1], v4[2]);
        v39 = v38;
        v41 = v40;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_OWORD *)v21 = xmmword_18206BE40;
        *(_QWORD *)(v21 + 16) = value;
        *(_QWORD *)(v21 + 24) = v37;
        *(_QWORD *)(v21 + 32) = v39;
        *(_QWORD *)(v21 + 40) = v41;
        goto LABEL_53;
      }
      ++v4[3];
      v28 = JSON5Scanner.DocumentReader.consumeWhitespace(allowingEOF:)(withoutBraces);
      if (!v29)
      {
        if ((*(_WORD *)&v28 & 0x100) != 0)
          goto LABEL_55;
        if (v28.value == 125)
        {
LABEL_49:
          if (withoutBraces)
          {
            v30 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v4[3], v4[1], v4[2]);
            v32 = v31;
            v34 = v33;
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_QWORD *)v21 = 0;
            *(_QWORD *)(v21 + 8) = 0;
            *(_QWORD *)(v21 + 16) = 125;
LABEL_52:
            *(_QWORD *)(v21 + 24) = v30;
            *(_QWORD *)(v21 + 32) = v32;
            *(_QWORD *)(v21 + 40) = v34;
LABEL_53:
            v23 = 1;
            goto LABEL_37;
          }
          ++v4[3];
LABEL_55:
          *done = 1;
        }
      }
    }
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSON5Scanner.scanKey()()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unsigned __int8 *v12;
  int v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  Swift::UInt8_optional v20;
  char v21;
  uint64_t v22;
  int v23;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;

  v2 = v0;
  v3 = type metadata accessor for Unicode.GeneralCategory();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Unicode.Scalar.Properties();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (unsigned __int8 *)v2[3];
  v11 = v2[4];
  if ((unint64_t)v12 >= v11)
  {
LABEL_31:
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_QWORD *)v35 = 1;
    *(_OWORD *)(v35 + 8) = 0u;
    *(_OWORD *)(v35 + 24) = 0u;
    *(_QWORD *)(v35 + 40) = 0;
    v36 = 12;
LABEL_32:
    *(_BYTE *)(v35 + 48) = v36;
    swift_willThrow();
  }
  else
  {
    v38 = v3;
    switch(*v12)
    {
      case '"':
        v20 = (Swift::UInt8_optional)34;
        goto LABEL_35;
      case '$':
      case 'A':
      case 'B':
      case 'C':
      case 'D':
      case 'E':
      case 'F':
      case '\\':
      case '_':
      case 'a':
      case 'b':
      case 'c':
      case 'd':
      case 'e':
      case 'f':
        v13 = specialized JSON5Scanner.DocumentReader.skipUTF8StringTillEndOfUnquotedKey(orEscapeSequence:)();
        if (v1)
          return;
        if (v13 == 92)
        {
          specialized JSON5Scanner.DocumentReader.skipUTF8StringTillEndOfUnquotedKey(orEscapeSequence:)();
          v14 = 0;
        }
        else
        {
          v14 = 8;
        }
        v15 = v2[2];
        v16 = v2[3];
        v17 = v16 - (_QWORD)v12;
        v18 = (unsigned __int8 *)v2[1];
        v19 = v12 - v18;
        goto LABEL_8;
      case '\'':
        v20 = (Swift::UInt8_optional)39;
LABEL_35:
        JSON5Scanner.scanString(withQuote:)(v20);
        return;
      default:
        v37 = *v12;
        JSON5Scanner.DocumentReader.peekU32()(v2[1], v2[2], v12, v11);
        if (v1)
          return;
        if ((v21 & 1) != 0)
          goto LABEL_31;
        Unicode.Scalar.properties.getter();
        Unicode.Scalar.Properties.generalCategory.getter();
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
        v22 = v38;
        v23 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v6, v38);
        if (v23 != *MEMORY[0x1E0DEE3A8]
          && v23 != *MEMORY[0x1E0DEE390]
          && v23 != *MEMORY[0x1E0DEE3A0]
          && v23 != *MEMORY[0x1E0DEE368]
          && v23 != *MEMORY[0x1E0DEE320]
          && v23 != *MEMORY[0x1E0DEE340])
        {
          (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v22);
          v30 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v2[3], v2[1], v2[2]);
          v32 = v31;
          v34 = v33;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_QWORD *)v35 = 0xD000000000000022;
          *(_QWORD *)(v35 + 8) = 0x8000000182307230;
          *(_QWORD *)(v35 + 16) = v37;
          *(_QWORD *)(v35 + 24) = v30;
          *(_QWORD *)(v35 + 32) = v32;
          *(_QWORD *)(v35 + 40) = v34;
          v36 = 1;
          goto LABEL_32;
        }
        v29 = v2[3];
        if (specialized JSON5Scanner.DocumentReader.skipUTF8StringTillEndOfUnquotedKey(orEscapeSequence:)() == 92)
        {
          specialized JSON5Scanner.DocumentReader.skipUTF8StringTillEndOfUnquotedKey(orEscapeSequence:)();
          v14 = 0;
        }
        else
        {
          v14 = 8;
        }
        v15 = v2[2];
        v16 = v2[3];
        v17 = v16 - v29;
        v18 = (unsigned __int8 *)v2[1];
        v19 = v29 - (_QWORD)v18;
LABEL_8:
        JSON5Scanner.JSONPartialMapData.record(tagType:count:dataOffset:with:)(v14, v17, v19, v18, v15, v16);
        break;
    }
  }
}

unint64_t JSON5Scanner.DocumentReader.peekU32()(unint64_t a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4)
{
  unint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 v12;
  unsigned __int8 *v13;
  int v14;
  unsigned __int8 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 v36;
  unsigned __int8 *v37;
  int v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  if ((unint64_t)a3 >= a4)
  {
    LODWORD(result) = 0;
    return result;
  }
  if (*a3 != 92)
  {
    result = BufferView<A>._decodeScalar()(a3, a4 - (_QWORD)a3);
    if ((result & 0x100000000) == 0)
      return result;
    v23 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)a3, a1, a2);
    v25 = v24;
    v27 = v26;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_QWORD *)v28 = v23;
    *(_QWORD *)(v28 + 8) = v25;
    *(_QWORD *)(v28 + 16) = v27;
    *(_QWORD *)(v28 + 24) = 0;
    *(_QWORD *)(v28 + 32) = 0;
    *(_QWORD *)(v28 + 40) = 0;
    *(_BYTE *)(v28 + 48) = 0;
    return swift_willThrow();
  }
  result = (unint64_t)(a3 + 1);
  if ((unint64_t)(a3 + 1) >= a4)
    goto LABEL_28;
  v8 = *(unsigned __int8 *)result;
  if ((_DWORD)v8 != 120)
  {
    if ((_DWORD)v8 != 117)
    {
      v29 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(result, a1, a2);
      v31 = v30;
      v33 = v32;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(_QWORD *)v21 = 0;
      *(_QWORD *)(v21 + 8) = 0;
      *(_QWORD *)(v21 + 16) = v8;
      *(_QWORD *)(v21 + 24) = v29;
      *(_QWORD *)(v21 + 32) = v31;
      *(_QWORD *)(v21 + 40) = v33;
      v22 = 1;
      goto LABEL_46;
    }
    if ((uint64_t)(a4 - (_QWORD)a3) > 5)
    {
      v9 = (unint64_t)(a3 + 2);
      v10 = a1 + a2 - (_QWORD)(a3 + 2);
      if ((((unint64_t)&a3[-a1 + 2] | v10) & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else
      {
        if (v10 >= 4)
          v11 = 4;
        else
          v11 = a1 + a2 - (_QWORD)(a3 + 2);
        if (v10 >= 4)
        {
          v12 = 0;
          v13 = a3 + 2;
          while (1)
          {
            v14 = *v13;
            v15 = v14 - 48;
            if ((v14 - 48) >= 0xA)
            {
              if ((v14 - 65) < 6)
              {
                v15 = v14 - 55;
              }
              else
              {
                if ((v14 - 97) > 5)
                  break;
                v15 = v14 - 87;
              }
            }
            if (v12 > 0xFFFu)
              break;
            v12 = 16 * v12 + v15;
            if (++v13 >= &a3[v11 + 2])
            {
              if (!v12)
                goto LABEL_48;
              if (v12 >> 11 == 27)
              {
                v16 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)a3, a1, a2);
                v18 = v17;
                v20 = v19;
                lazy protocol witness table accessor for type JSONError and conformance JSONError();
                swift_allocError();
                *(_QWORD *)v21 = v16;
                *(_QWORD *)(v21 + 8) = v18;
                *(_QWORD *)(v21 + 16) = v20;
                *(_QWORD *)(v21 + 24) = v12;
                *(_QWORD *)(v21 + 32) = 0;
                *(_QWORD *)(v21 + 40) = 0;
                v22 = 9;
                goto LABEL_46;
              }
              LODWORD(result) = v12;
              return result;
            }
          }
LABEL_45:
          v40 = static String._fromUTF8Repairing(_:)();
          v42 = v41;
          v43 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v9, a1, a2);
          v45 = v44;
          v47 = v46;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_QWORD *)v21 = v40;
          *(_QWORD *)(v21 + 8) = v42;
          *(_QWORD *)(v21 + 16) = v43;
          *(_QWORD *)(v21 + 24) = v45;
          *(_QWORD *)(v21 + 32) = v47;
          *(_QWORD *)(v21 + 40) = 0;
          v22 = 3;
          goto LABEL_46;
        }
      }
      __break(1u);
      goto LABEL_52;
    }
LABEL_28:
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_QWORD *)v21 = 1;
    *(_OWORD *)(v21 + 8) = 0u;
    *(_OWORD *)(v21 + 24) = 0u;
    *(_QWORD *)(v21 + 40) = 0;
    v22 = 12;
LABEL_46:
    *(_BYTE *)(v21 + 48) = v22;
    return swift_willThrow();
  }
  if ((uint64_t)(a4 - (_QWORD)a3) <= 3)
    goto LABEL_28;
  v9 = (unint64_t)(a3 + 2);
  v34 = a1 + a2 - (_QWORD)(a3 + 2);
  if ((((unint64_t)&a3[-a1 + 2] | v34) & 0x8000000000000000) != 0)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v34 >= 2)
    v35 = 2;
  else
    v35 = a1 + a2 - (_QWORD)(a3 + 2);
  if (v34 >= 2)
  {
    v36 = 0;
    v37 = a3 + 2;
    while (1)
    {
      v38 = *v37;
      v39 = v38 - 48;
      if ((v38 - 48) >= 0xA)
      {
        if ((v38 - 65) < 6)
        {
          v39 = v38 - 55;
        }
        else
        {
          if ((v38 - 97) > 5)
            goto LABEL_45;
          v39 = v38 - 87;
        }
      }
      if (v36 > 0xFu)
        goto LABEL_45;
      v36 = v39 + 16 * v36;
      if (++v37 >= &a3[v35 + 2])
      {
        if (v36)
        {
          LODWORD(result) = v36;
          return result;
        }
LABEL_48:
        v48 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v9, a1, a2);
        v50 = v49;
        v52 = v51;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_QWORD *)v21 = v48;
        *(_QWORD *)(v21 + 8) = v50;
        *(_QWORD *)(v21 + 16) = v52;
        *(_QWORD *)(v21 + 24) = 0;
        *(_QWORD *)(v21 + 32) = 0;
        *(_QWORD *)(v21 + 40) = 0;
        v22 = 4;
        goto LABEL_46;
      }
    }
  }
LABEL_53:
  __break(1u);
  return result;
}

unsigned __int8 *JSON5Scanner.DocumentReader.skipUTF8StringTillNextUnescapedQuote(isSimple:quote:)(_BYTE *a1, __int16 quote)
{
  unint64_t *v2;
  uint64_t v3;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 *result;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  unint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  int v23;
  int v24;
  unint64_t v25;
  char *v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v5 = (unsigned __int8 *)v2[2];
  if ((quote & 0x100) != 0)
  {
    v14 = specialized JSON5Scanner.DocumentReader.skipUTF8StringTillEndOfUnquotedKey(orEscapeSequence:)();
    if (!v3)
    {
      if (v14 != 92)
        goto LABEL_12;
      *a1 = 0;
      specialized JSON5Scanner.DocumentReader.skipUTF8StringTillEndOfUnquotedKey(orEscapeSequence:)();
    }
    return v5;
  }
  v6 = (unsigned __int8 *)v2[3];
  if (v6 == v5)
  {
LABEL_33:
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_QWORD *)v19 = 1;
    *(_OWORD *)(v19 + 8) = 0u;
    *(_OWORD *)(v19 + 24) = 0u;
    *(_QWORD *)(v19 + 40) = 0;
    v20 = 12;
LABEL_34:
    *(_BYTE *)(v19 + 48) = v20;
LABEL_35:
    swift_willThrow();
    return v5;
  }
  v7 = quote;
  v9 = *v5++;
  v8 = v9;
  v2[2] = (unint64_t)v5;
  if (v9 != quote)
  {
    v15 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)v5, *v2, v2[1]);
    v5 = v16;
    v18 = v17;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_QWORD *)v19 = 0;
    *(_QWORD *)(v19 + 8) = 0;
    *(_QWORD *)(v19 + 16) = v8;
    *(_QWORD *)(v19 + 24) = v15;
    *(_QWORD *)(v19 + 32) = v5;
    *(_QWORD *)(v19 + 40) = v18;
    v20 = 1;
    goto LABEL_34;
  }
  result = (unsigned __int8 *)JSON5Scanner.DocumentReader.skipUTF8StringTillQuoteOrBackslashOrInvalidCharacter(quote:)(quote);
  if (v11)
    return v5;
  if (result == v7)
  {
LABEL_12:
    *a1 = 1;
    return v5;
  }
  *a1 = 0;
  v12 = (unsigned __int8 *)v2[2];
  if (v12 >= v6)
    goto LABEL_33;
  v13 = 16843009 * v7;
  while (1)
  {
    v23 = *v12;
    if (v23 == v7)
      return v5;
    if (v23 != 92)
    {
      v21 = v12 + 1;
      v2[2] = (unint64_t)(v12 + 1);
      v22 = (unsigned __int8 *)v2[3];
      goto LABEL_14;
    }
    v22 = (unsigned __int8 *)v2[3];
    if (v22 == v12)
      break;
    v2[2] = (unint64_t)(v12 + 1);
    if (v22 == v12 + 1)
      goto LABEL_33;
    v24 = v12[1];
    v21 = v12 + 2;
    v2[2] = (unint64_t)(v12 + 2);
    if (v24 == 120)
    {
      if (v22 - v21 <= 1)
      {
LABEL_37:
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_QWORD *)v29 = 1;
        *(_OWORD *)(v29 + 8) = 0u;
        *(_OWORD *)(v29 + 24) = 0u;
        *(_QWORD *)(v29 + 40) = 0;
        v30 = 12;
LABEL_39:
        *(_BYTE *)(v29 + 48) = v30;
        goto LABEL_35;
      }
      v27 = (unint64_t)&v21[-*v2];
      v28 = (char *)(v27 + 2);
      if (__OFADD__(v27, 2))
        goto LABEL_43;
      if ((((&v28[*v2] - (char *)v21) | v27) & 0x8000000000000000) != 0 || (uint64_t)v2[1] < (uint64_t)v28)
        goto LABEL_44;
      if ((~((((v13 ^ *(unsigned __int16 *)v21) & 0x7F7F7F7F) + 2139062143) | *(unsigned __int16 *)v21) & 0x80808080) != 0)
      {
LABEL_38:
        v5 = (unsigned __int8 *)static String._fromUTF8Repairing(_:)();
        v32 = v31;
        v33 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v2[2], *v2, v2[1]);
        v35 = v34;
        v37 = v36;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_QWORD *)v29 = v5;
        *(_QWORD *)(v29 + 8) = v32;
        *(_QWORD *)(v29 + 16) = v33;
        *(_QWORD *)(v29 + 24) = v35;
        *(_QWORD *)(v29 + 32) = v37;
        *(_QWORD *)(v29 + 40) = 0;
        v30 = 3;
        goto LABEL_39;
      }
      v21 = v12 + 4;
      v2[2] = (unint64_t)(v12 + 4);
    }
    else if (v24 == 117)
    {
      if (v22 - v21 <= 3)
        goto LABEL_37;
      v25 = (unint64_t)&v21[-*v2];
      v26 = (char *)(v25 + 4);
      if (__OFADD__(v25, 4))
        goto LABEL_41;
      if ((((&v26[*v2] - (char *)v21) | v25) & 0x8000000000000000) != 0 || (uint64_t)v2[1] < (uint64_t)v26)
        goto LABEL_42;
      if ((~((((*(_DWORD *)v21 ^ v13) & 0x7F7F7F7F) + 2139062143) | *(_DWORD *)v21) & 0x80808080) != 0)
        goto LABEL_38;
      v21 = v12 + 6;
      v2[2] = (unint64_t)(v12 + 6);
    }
LABEL_14:
    v12 = v21;
    if (v21 >= v22)
      goto LABEL_33;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
  return result;
}

Swift::Void __swiftcall JSON5Scanner.DocumentReader.skipNumber()()
{
  uint64_t v0;
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  unsigned int v10;
  BOOL v11;

  v1 = *(unsigned __int8 **)(v0 + 16);
  v2 = *(unsigned __int8 **)(v0 + 24);
  if (v2 == v1)
  {
    __break(1u);
LABEL_19:
    __break(1u);
    return;
  }
  v5 = *v1;
  v3 = v1 + 1;
  v4 = v5;
  *(_QWORD *)(v0 + 16) = v3;
  if ((v5 - 58) <= 0xFFFFFFF5)
  {
    v6 = v4 - 43;
    v7 = v6 > 0x23;
    v8 = (1 << v6) & 0x84000000DLL;
    if (v7 || v8 == 0)
      goto LABEL_19;
  }
  for (; v3 < v2; *(_QWORD *)(v0 + 16) = ++v3)
  {
    v10 = *v3;
    if (v10 - 58 < 0xFFFFFFF6)
    {
      v11 = v10 > 0x2E || ((1 << v10) & 0x680000000000) == 0;
      if (v11 && (v10 & 0xFFFFFFDF) - 91 <= 0xFFFFFFE5)
        break;
    }
  }
}

uint64_t specialized BufferView.suffix(from:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (((a2 + a3 - result) | (result - a2)) < 0)
    __break(1u);
  return result;
}

Swift::UInt8 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSON5Scanner.DocumentReader.skipUTF8StringTillQuoteOrBackslashOrInvalidCharacter(quote:)(Swift::UInt8 quote)
{
  uint64_t v1;
  unsigned __int8 *v2;
  unint64_t v3;
  int v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;

  v2 = *(unsigned __int8 **)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  if ((unint64_t)v2 >= v3)
  {
LABEL_9:
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_QWORD *)v7 = 1;
    *(_OWORD *)(v7 + 8) = 0u;
    *(_OWORD *)(v7 + 24) = 0u;
    *(_QWORD *)(v7 + 40) = 0;
    *(_BYTE *)(v7 + 48) = 12;
    swift_willThrow();
    LOBYTE(v5) = 0;
  }
  else
  {
    v4 = quote;
    while (1)
    {
      v5 = *v2;
      v6 = v5 < 0x20 || v5 == v4;
      if (v6 || v5 == 92)
        break;
      *(_QWORD *)(v1 + 16) = ++v2;
      if ((unint64_t)v2 >= v3)
        goto LABEL_9;
    }
  }
  return v5;
}

uint64_t static JSON5Scanner.stringValue(from:fullSource:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned int v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19[2];

  v8 = (unsigned __int8 *)(a1 + a2);
  v9 = (unsigned __int8 *)a1;
  if (a2 >= 1)
  {
    do
    {
      v10 = *v9;
      if (v10 == 92)
        break;
      if (v10 < 0x20)
        break;
      ++v9;
    }
    while (v9 < v8);
    if ((unint64_t)v9 < a1)
    {
      __break(1u);
      return v19[0];
    }
  }
  result = static String._tryFromUTF8(_:)();
  if (v12)
  {
    v19[0] = result;
    v19[1] = v12;
    if (v8 != v9)
    {
      if (v8 < v9)
      {
        __break(1u);
        return result;
      }
      specialized static JSON5Scanner._slowpath_stringValue(from:appendingTo:fullSource:)(v9, v8 - v9, v19, a3, a4);
      if (v4)
        return swift_bridgeObjectRelease();
      return v19[0];
    }
  }
  else
  {
    v13 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(a1, a3, a4);
    v15 = v14;
    v17 = v16;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_QWORD *)v18 = v13;
    *(_QWORD *)(v18 + 8) = v15;
    *(_QWORD *)(v18 + 16) = v17;
    *(_QWORD *)(v18 + 24) = 0;
    *(_QWORD *)(v18 + 32) = 0;
    *(_QWORD *)(v18 + 40) = 0;
    *(_BYTE *)(v18 + 48) = 0;
    return swift_willThrow();
  }
  return result;
}

uint64_t specialized BufferView.prefix(_:)(uint64_t result, uint64_t a2)
{
  if ((result & 0x8000000000000000) == 0)
    return a2;
  __break(1u);
  return result;
}

uint64_t closure #1 in static JSON5Scanner.validateInfinity(from:fullSource:)(const char *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a2 < 8 || (result = strncmp(a1, "Infinity", 8uLL), (_DWORD)result))
  {
    v10 = StaticString.description.getter();
    v12 = v11;
    v13 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(a3, a5, a6);
    v15 = v14;
    v17 = v16;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_QWORD *)v18 = v10;
    *(_QWORD *)(v18 + 8) = v12;
    *(_QWORD *)(v18 + 16) = v13;
    *(_QWORD *)(v18 + 24) = v15;
    *(_QWORD *)(v18 + 32) = v17;
    *(_QWORD *)(v18 + 40) = 0;
    *(_BYTE *)(v18 + 48) = 5;
    return swift_willThrow();
  }
  return result;
}

unint64_t specialized JSON5Scanner.DocumentReader.skipUTF8StringTillEndOfUnquotedKey(orEscapeSequence:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  int v19;
  uint64_t v29;
  _BYTE v31[4];
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;

  v3 = v0;
  v4 = type metadata accessor for Unicode.GeneralCategory();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = &v31[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v42 = type metadata accessor for Unicode.Scalar.Properties();
  v8 = *(_QWORD *)(v42 - 8);
  MEMORY[0x1E0C80A78](v42);
  v10 = &v31[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = JSON5Scanner.DocumentReader.peekU32()(*(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(unsigned __int8 **)(v3 + 16), *(_QWORD *)(v3 + 24));
  if (!v1)
  {
    v2 = v11;
    v14 = v12;
    v41 = v8;
    v40 = *MEMORY[0x1E0DEE3A8];
    v39 = *MEMORY[0x1E0DEE390];
    v38 = *MEMORY[0x1E0DEE3A0];
    v37 = *MEMORY[0x1E0DEE368];
    v36 = *MEMORY[0x1E0DEE320];
    v35 = *MEMORY[0x1E0DEE378];
    v34 = *MEMORY[0x1E0DEE338];
    v33 = *MEMORY[0x1E0DEE348];
    v32 = *MEMORY[0x1E0DEE340];
    v15 = *MEMORY[0x1E0DEE3D8];
    while ((v13 & 1) == 0)
    {
      Unicode.Scalar.properties.getter();
      Unicode.Scalar.Properties.generalCategory.getter();
      (*(void (**)(_BYTE *, uint64_t))(v41 + 8))(v10, v42);
      v19 = (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 88))(v7, v4);
      if (v19 != v40
        && v19 != v39
        && v19 != v38
        && v19 != v37
        && v19 != v36
        && v19 != v35
        && v19 != v34
        && v19 != v33
        && v19 != v32
        && v19 != v15)
      {
        if (((v2 - 36) > 0x3B || ((1 << (v2 - 36)) & 0x900000000000001) == 0)
          && (v2 - 8204) >= 2)
        {
          (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
          return v2;
        }
        (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
      }
      v16 = *(_QWORD *)(v3 + 24);
      v17 = (unsigned __int8 *)(*(_QWORD *)(v3 + 16) + v14);
      *(_QWORD *)(v3 + 16) = v17;
      v2 = JSON5Scanner.DocumentReader.peekU32()(*(_QWORD *)v3, *(_QWORD *)(v3 + 8), v17, v16);
      v14 = v18;
    }
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_QWORD *)v29 = 1;
    *(_OWORD *)(v29 + 8) = 0u;
    *(_OWORD *)(v29 + 24) = 0u;
    *(_QWORD *)(v29 + 40) = 0;
    *(_BYTE *)(v29 + 48) = 12;
    swift_willThrow();
  }
  return v2;
}

unsigned __int8 *specialized static JSON5Scanner.parseEscapeSequence(from:into:fullSource:)(unsigned __int8 *a1, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  unsigned __int8 v26;
  unint64_t v27;
  unsigned __int8 *v28;
  int v29;
  char v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  if (!a2)
  {
    __break(1u);
LABEL_44:
    __break(1u);
    JUMPOUT(0x181ADB7B8);
  }
  v8 = a1;
  v9 = *a1;
  switch(*a1)
  {
    case 0xAu:
    case 0x6Eu:
      v9 = 10;
      goto LABEL_15;
    case 0xDu:
      if (a2 < 2 || a1[1] != 10)
        goto LABEL_8;
      v18._countAndFlagsBits = 2573;
      v18._object = (void *)0xE200000000000000;
      String.append(_:)(v18);
      v8 += 2;
      return v8;
    case 0x22u:
      goto LABEL_15;
    case 0x27u:
      v9 = 39;
      goto LABEL_15;
    case 0x2Fu:
      v9 = 47;
      goto LABEL_15;
    case 0x5Cu:
      v9 = 92;
      goto LABEL_15;
    case 0x62u:
      v9 = 8;
      goto LABEL_15;
    case 0x66u:
      v9 = 12;
      goto LABEL_15;
    case 0x72u:
LABEL_8:
      v9 = 13;
      goto LABEL_15;
    case 0x74u:
      v9 = 9;
LABEL_15:
      v19._countAndFlagsBits = v9;
      v19._object = (void *)0xE100000000000000;
      String.append(_:)(v19);
      return ++v8;
    case 0x75u:
      if (a2 >= 1)
        v21 = 1;
      else
        v21 = a2;
      v22 = specialized static JSONScanner.parseUnicodeSequence(from:into:fullSource:allowNulls:)((unint64_t)&a1[v21], a2 - v21, a3, a4, a5, 0);
      if (!v5)
        return v22;
      return v8;
    case 0x78u:
      if (a2 >= 1)
        v23 = 1;
      else
        v23 = a2;
      v24 = a2 - v23 < 2;
      if (a2 - v23 >= 2)
        v25 = 2;
      else
        v25 = a2 - v23;
      if (v24)
        goto LABEL_44;
      v26 = 0;
      v27 = (unint64_t)&a1[v23];
      v8 = &a1[v23 + v25];
      v28 = &a1[v23];
      break;
    default:
      v11 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)a1, a4, a5);
      v13 = v12;
      v15 = v14;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(_QWORD *)v16 = v9;
      *(_QWORD *)(v16 + 8) = v11;
      *(_QWORD *)(v16 + 16) = v13;
      *(_QWORD *)(v16 + 24) = v15;
      *(_QWORD *)(v16 + 32) = 0;
      *(_QWORD *)(v16 + 40) = 0;
      v17 = 6;
      goto LABEL_40;
  }
  do
  {
    v29 = *v28;
    v30 = v29 - 48;
    if ((v29 - 48) >= 0xA)
    {
      if ((v29 - 65) < 6)
      {
        v30 = v29 - 55;
      }
      else
      {
        if ((v29 - 97) > 5)
          goto LABEL_39;
        v30 = v29 - 87;
      }
    }
    if (v26 > 0xFu)
    {
LABEL_39:
      v31 = static String._fromUTF8Repairing(_:)();
      v8 = v32;
      v33 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v27, a4, a5);
      v35 = v34;
      v37 = v36;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(_QWORD *)v16 = v31;
      *(_QWORD *)(v16 + 8) = v8;
      *(_QWORD *)(v16 + 16) = v33;
      *(_QWORD *)(v16 + 24) = v35;
      *(_QWORD *)(v16 + 32) = v37;
      *(_QWORD *)(v16 + 40) = 0;
      v17 = 3;
      goto LABEL_40;
    }
    v26 = v30 + 16 * v26;
    ++v28;
  }
  while (v28 < v8);
  if (v26)
  {
    v43 = *a3;
    v44 = a3[1];
    String.UnicodeScalarView.append(_:)();
    *a3 = v43;
    a3[1] = v44;
    return v8;
  }
  v38 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v27, a4, a5);
  v40 = v39;
  v42 = v41;
  lazy protocol witness table accessor for type JSONError and conformance JSONError();
  swift_allocError();
  *(_QWORD *)v16 = v38;
  *(_QWORD *)(v16 + 8) = v40;
  *(_QWORD *)(v16 + 16) = v42;
  *(_QWORD *)(v16 + 24) = 0;
  *(_QWORD *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 40) = 0;
  v17 = 4;
LABEL_40:
  *(_BYTE *)(v16 + 48) = v17;
  swift_willThrow();
  return v8;
}

unsigned __int8 *specialized static JSON5Scanner._slowpath_stringValue(from:appendingTo:fullSource:)(unsigned __int8 *result, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v9 = result;
  if (a2 < 1)
  {
    v11 = (unint64_t)result;
LABEL_14:
    v17 = static String._tryFromUTF8(_:)();
    if (v18)
    {
      String.append(_:)(*(Swift::String *)&v17);
      return (unsigned __int8 *)swift_bridgeObjectRelease();
    }
    else
    {
LABEL_16:
      v19 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v11, a4, a5);
      v21 = v20;
      v23 = v22;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(_QWORD *)v24 = v19;
      *(_QWORD *)(v24 + 8) = v21;
      *(_QWORD *)(v24 + 16) = v23;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0;
      *(_QWORD *)(v24 + 40) = 0;
      *(_BYTE *)(v24 + 48) = 0;
      return (unsigned __int8 *)swift_willThrow();
    }
  }
  else
  {
    v10 = &result[a2];
    v11 = (unint64_t)result;
    v12 = result;
    do
    {
      v13 = *v12;
      if ((_DWORD)v13 == 92)
      {
        if ((unint64_t)v12 < v11)
        {
          __break(1u);
LABEL_20:
          v25 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)v12, a4, a5);
          v27 = v26;
          v29 = v28;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_QWORD *)v30 = v13;
          *(_QWORD *)(v30 + 8) = v25;
          *(_QWORD *)(v30 + 16) = v27;
          *(_QWORD *)(v30 + 24) = v29;
          *(_QWORD *)(v30 + 32) = 0;
          *(_QWORD *)(v30 + 40) = 0;
          *(_BYTE *)(v30 + 48) = 7;
          return (unsigned __int8 *)swift_willThrow();
        }
        v14 = static String._tryFromUTF8(_:)();
        if (!v15)
          goto LABEL_16;
        String.append(_:)(*(Swift::String *)&v14);
        swift_bridgeObjectRelease();
        result = v12 + 1;
        v16 = v10 - (v12 + 1);
        if (((v12 + 1 - v9) | v16) < 0)
        {
          __break(1u);
          goto LABEL_22;
        }
        result = specialized static JSON5Scanner.parseEscapeSequence(from:into:fullSource:)(result, v16, a3, a4, a5);
        if (v5)
          return result;
        v11 = (unint64_t)result;
        v12 = result;
      }
      else
      {
        if (v13 < 0x20)
          goto LABEL_20;
        ++v12;
      }
    }
    while (v12 < v10);
    if ((unint64_t)v12 >= v11)
      goto LABEL_14;
LABEL_22:
    __break(1u);
  }
  return result;
}

unsigned __int8 *specialized static JSON5Scanner.validateLeadingZero(in:zero:fullSource:)(unsigned __int8 *result, uint64_t a2, unsigned __int8 *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unsigned __int8 v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (!a2)
    return a3;
  v5 = *result;
  if (*result <= 0x57u)
  {
    if ((_DWORD)v5 == 46 || (_DWORD)v5 == 69)
      return a3;
LABEL_15:
    v8 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)result, a4, a5);
    v10 = v9;
    v12 = v11;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    if ((v5 - 58) >= 0xFFFFFFF6)
    {
      *(_QWORD *)v13 = v8;
      *(_QWORD *)(v13 + 8) = v10;
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0;
      *(_QWORD *)(v13 + 40) = 0;
      v14 = 10;
    }
    else
    {
      *(_OWORD *)v13 = xmmword_18206BE50;
      *(_QWORD *)(v13 + 16) = v5;
      *(_QWORD *)(v13 + 24) = v8;
      *(_QWORD *)(v13 + 32) = v10;
      *(_QWORD *)(v13 + 40) = v12;
      v14 = 1;
    }
    *(_BYTE *)(v13 + 48) = v14;
LABEL_19:
    swift_willThrow();
    return a3;
  }
  if ((_DWORD)v5 != 120)
  {
    if ((_DWORD)v5 == 101)
      return a3;
    if ((_DWORD)v5 != 88)
      goto LABEL_15;
  }
  if (a2 >= 1)
  {
    a3 = result + 1;
    v6 = result[1];
    if ((v6 - 58) > 0xF5u)
      return a3;
    if (result[1] - 65 <= 0x25 && ((1 << (v6 - 65)) & 0x3F0000003FLL) != 0)
      return a3;
    v15 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)(result + 1), a4, a5);
    v17 = v16;
    v19 = v18;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_OWORD *)v20 = xmmword_18206BE50;
    *(_QWORD *)(v20 + 16) = v6;
    *(_QWORD *)(v20 + 24) = v15;
    *(_QWORD *)(v20 + 32) = v17;
    *(_QWORD *)(v20 + 40) = v19;
    *(_BYTE *)(v20 + 48) = 1;
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

uint64_t specialized static JSON5Scanner.validateInfinity(from:fullSource:)(char *__s1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a2 <= 7 || (result = strncmp(__s1, "Infinity", 8uLL), (_DWORD)result))
  {
    v8 = StaticString.description.getter();
    v10 = v9;
    v11 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)__s1, a3, a4);
    v13 = v12;
    v15 = v14;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_QWORD *)v16 = v8;
    *(_QWORD *)(v16 + 8) = v10;
    *(_QWORD *)(v16 + 16) = v11;
    *(_QWORD *)(v16 + 24) = v13;
    *(_QWORD *)(v16 + 32) = v15;
    *(_QWORD *)(v16 + 40) = 0;
    *(_BYTE *)(v16 + 48) = 5;
    return swift_willThrow();
  }
  return result;
}

uint64_t specialized static JSON5Scanner.validateNaN(from:fullSource:)(char *__s1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a2 <= 2 || (result = strncmp(__s1, "NaN", 3uLL), (_DWORD)result))
  {
    v8 = StaticString.description.getter();
    v10 = v9;
    v11 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)__s1, a3, a4);
    v13 = v12;
    v15 = v14;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_QWORD *)v16 = v8;
    *(_QWORD *)(v16 + 8) = v10;
    *(_QWORD *)(v16 + 16) = v11;
    *(_QWORD *)(v16 + 24) = v13;
    *(_QWORD *)(v16 + 32) = v15;
    *(_QWORD *)(v16 + 40) = 0;
    *(_BYTE *)(v16 + 48) = 5;
    return swift_willThrow();
  }
  return result;
}

unsigned __int8 *specialized static JSON5Scanner.validateLeadingDecimal(from:fullSource:)(unsigned __int8 *result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a2)
  {
    v4 = *result;
    if ((v4 - 58) >= 0xFFFFFFF6)
      return result;
    v5 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)result, a3, a4);
    v7 = v6;
    v9 = v8;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_QWORD *)v10 = 0xD000000000000013;
    *(_QWORD *)(v10 + 8) = 0x80000001823071D0;
    *(_QWORD *)(v10 + 16) = v4;
  }
  else
  {
    v5 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)result, a3, a4);
    v7 = v11;
    v9 = v12;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_QWORD *)v10 = 0;
    *(_QWORD *)(v10 + 8) = 0;
    *(_QWORD *)(v10 + 16) = 46;
  }
  *(_QWORD *)(v10 + 24) = v5;
  *(_QWORD *)(v10 + 32) = v7;
  *(_QWORD *)(v10 + 40) = v9;
  *(_BYTE *)(v10 + 48) = 1;
  return (unsigned __int8 *)swift_willThrow();
}

unint64_t specialized static JSON5Scanner.prevalidateJSONNumber(from:fullSource:)(char *__s1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  char v12;
  uint64_t v13;
  unsigned __int8 *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v28;
  unsigned int v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;

  if (!a2)
  {
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  v9 = *__s1;
  if ((_DWORD)v9 != 48)
  {
    if ((v9 - 58) > 0xFFFFFFF6)
    {
LABEL_26:
      v9 = (unint64_t)__s1;
LABEL_34:
      v23 = &__s1[a2 - 1];
      v24 = *v23;
      if ((v24 | 0x20) != 0x65)
        return v9;
      v16 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)v23, a3, a4);
      v18 = v25;
      v20 = v26;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(_QWORD *)v21 = 0xD000000000000010;
      *(_QWORD *)(v21 + 8) = 0x80000001823071F0;
      *(_QWORD *)(v21 + 16) = v24;
LABEL_36:
      *(_QWORD *)(v21 + 24) = v16;
      *(_QWORD *)(v21 + 32) = v18;
      *(_QWORD *)(v21 + 40) = v20;
      *(_BYTE *)(v21 + 48) = 1;
      swift_willThrow();
      return v9;
    }
    switch(*__s1)
    {
      case '+':
      case '-':
        if (a2 >= 2)
        {
          v9 = (unint64_t)(__s1 + 1);
          v13 = __s1[1];
          if ((_DWORD)v13 == 48)
          {
            v14 = specialized static JSON5Scanner.validateLeadingZero(in:zero:fullSource:)((unsigned __int8 *)__s1 + 2, a2 - 2, (unsigned __int8 *)__s1 + 1, a3, a4);
            if (v4)
              return v9;
            v9 = (unint64_t)v14;
            if ((v15 & 1) != 0)
              return v9;
          }
          else if ((v13 - 58) <= 0xFFFFFFF6)
          {
            switch((_DWORD)v13)
            {
              case '.':
                specialized static JSON5Scanner.validateLeadingDecimal(from:fullSource:)((unsigned __int8 *)__s1 + 2, a2 - 2, a3, a4);
                if (v4)
                  return v9;
                break;
              case 'N':
                specialized static JSON5Scanner.validateNaN(from:fullSource:)(__s1 + 1, a2 - 1, a3, a4);
                if (v4)
                  return v9;
                break;
              case 'I':
                specialized static JSON5Scanner.validateInfinity(from:fullSource:)(__s1 + 1, a2 - 1, a3, a4);
                if (v4)
                  return v9;
                break;
              default:
                _StringGuts.grow(_:)(20);
                swift_bridgeObjectRelease();
                v37 = 0x27207265746661;
                v38 = 0xE700000000000000;
                v28 = *__s1;
                if ((v28 & 0x80) != 0)
                  v29 = ((v28 >> 6) & 0xFFFFC0FF | ((v28 & 0x3F) << 8)) + 33217;
                else
                  v29 = v28 + 1;
                v36 = (v29 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v29) >> 3)) & 7)));
                v30._countAndFlagsBits = MEMORY[0x186DA46D0](&v36);
                String.append(_:)(v30);
                swift_bridgeObjectRelease();
                v31._countAndFlagsBits = 0x6D756E206E692027;
                v31._object = (void *)0xEB00000000726562;
                String.append(_:)(v31);
                v32 = v37;
                v33 = v38;
                v16 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v9, a3, a4);
                v18 = v34;
                v20 = v35;
                lazy protocol witness table accessor for type JSONError and conformance JSONError();
                swift_allocError();
                *(_QWORD *)v21 = v32;
                *(_QWORD *)(v21 + 8) = v33;
                *(_QWORD *)(v21 + 16) = v13;
                goto LABEL_36;
            }
          }
          goto LABEL_34;
        }
        if (a2 == 1)
        {
          v16 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)__s1, a3, a4);
          v18 = v17;
          v20 = v19;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_QWORD *)v21 = 0xD000000000000010;
          *(_QWORD *)(v21 + 8) = 0x80000001823071F0;
          *(_QWORD *)(v21 + 16) = v9;
          goto LABEL_36;
        }
        break;
      case '.':
        if (a2 >= 1)
          v22 = 1;
        else
          v22 = a2;
        specialized static JSON5Scanner.validateLeadingDecimal(from:fullSource:)((unsigned __int8 *)&__s1[v22], a2 - v22, a3, a4);
        if (!v4)
          goto LABEL_26;
        return v9;
      case 'I':
        specialized static JSON5Scanner.validateInfinity(from:fullSource:)(__s1, a2, a3, a4);
        if (!v4)
          goto LABEL_26;
        return v9;
      case 'N':
        specialized static JSON5Scanner.validateNaN(from:fullSource:)(__s1, a2, a3, a4);
        if (!v4)
          goto LABEL_26;
        return v9;
      default:
        goto LABEL_45;
    }
LABEL_46:
    __break(1u);
    JUMPOUT(0x181ADC3F0);
  }
  if (a2 >= 1)
    v10 = 1;
  else
    v10 = a2;
  v11 = specialized static JSON5Scanner.validateLeadingZero(in:zero:fullSource:)((unsigned __int8 *)&__s1[v10], a2 - v10, (unsigned __int8 *)__s1, a3, a4);
  if (!v4)
  {
    v9 = (unint64_t)v11;
    if ((v12 & 1) == 0)
      goto LABEL_34;
  }
  return v9;
}

unint64_t specialized static JSON5Scanner.validateNumber(from:fullSource:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  char *v10;
  int v11;
  const char *v12;
  uint64_t v13;
  size_t v14;
  char v15;
  char v16;
  char *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v28;
  uint64_t v29;
  unint64_t result;
  uint64_t v31;
  uint64_t v32;

  if (a2 < 1)
    goto LABEL_55;
  v8 = (uint64_t)a1;
  v10 = &a1[a2];
  v11 = *a1;
  if (v11 == 45 || (v12 = a1, v11 == 43))
    v12 = a1 + 1;
  if (v10 < v12)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  v13 = v12 - a1;
  if (v12 - a1 < 0)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  if (v10 - v12 < 0)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  if (v10 - v12 >= 2)
    v14 = 2;
  else
    v14 = v10 - v12;
  if (_stringshims_strncasecmp_l(v12, "0x", v14, 0))
  {
    if (v12 < v10)
    {
      v15 = 0;
      v16 = 0;
      v17 = (char *)(a2 + v8);
      v18 = -v8;
      v19 = 1;
LABEL_15:
      v20 = 0;
      v21 = v17 - v12;
      while ((uint64_t)&v12[v18 + v20] >= 0)
      {
        v22 = v21-- < 1;
        if (v22)
          break;
        v8 = v12[v20];
        if ((v8 - 58) <= 0xF5u)
        {
          switch(v12[v20])
          {
            case '+':
            case '-':
              if (v20 != 0 || (v15 & 1) == 0)
                goto LABEL_52;
              v15 = 0;
              v19 = 0;
              v12 += v20 + 1;
              v16 = 3;
              if (v12 < v10)
                goto LABEL_15;
              __break(1u);
              goto LABEL_54;
            case ',':
            case '/':
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case ':':
            case ';':
            case '<':
            case '=':
            case '>':
            case '?':
            case '@':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
              goto LABEL_52;
            case '.':
              if ((v19 & 1) == 0)
                goto LABEL_51;
              v15 = 0;
              v19 = 0;
              v12 += v20 + 1;
              v16 = 1;
              if (v12 < v10)
                goto LABEL_15;
              __break(1u);
              goto LABEL_34;
            case 'E':
              goto LABEL_27;
            default:
              if ((_DWORD)v8 != 101)
                goto LABEL_52;
LABEL_27:
              if (v16 != 1 && (v16 || v20 < 1))
                goto LABEL_52;
              v19 = 0;
              v12 += v20 + 1;
              v16 = 2;
              v15 = 1;
              if (v12 < v10)
                goto LABEL_15;
LABEL_54:
              __break(1u);
              break;
          }
LABEL_55:
          __break(1u);
          goto LABEL_56;
        }
        if (__OFADD__(v20, 1))
          goto LABEL_49;
        if (&v12[++v20] >= v10)
          goto LABEL_50;
      }
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      LOBYTE(v8) = 46;
LABEL_52:
      v23 = (char *)&v12[v20];
      v28 = 0xE900000000000072;
      v29 = 0x65626D756E206E69;
      goto LABEL_53;
    }
LABEL_59:
    __break(1u);
    JUMPOUT(0x181ADC764);
  }
LABEL_34:
  v23 = (char *)(v12 + 2);
  if (v10 - (v12 + 2) < 1 || v23 >= v10 || ((unint64_t)&v23[-v8] & 0x8000000000000000) != 0)
  {
LABEL_46:
    __break(1u);
  }
  else
  {
    v24 = a2 + v8 - (_QWORD)v12 - 3;
    v25 = v13 + 3;
    while (1)
    {
      v26 = v25;
      LOBYTE(v8) = *v23;
      if ((*v23 - 58) <= 0xF5u
        && (*v23 - 65 > 0x25
         || ((1 << (v8 - 65)) & 0x3F0000003FLL) == 0))
      {
        break;
      }
      v22 = v24-- < 1;
      if (!v22 && ++v23 < v10)
      {
        ++v25;
        if ((v26 & 0x8000000000000000) == 0)
          continue;
      }
      goto LABEL_46;
    }
  }
  v28 = 0xED00007265626D75;
  v29 = 0x6E20786568206E69;
LABEL_53:
  result = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)v23, a3, a4);
  *(_QWORD *)a5 = v29;
  *(_QWORD *)(a5 + 8) = v28;
  *(_QWORD *)(a5 + 16) = v8;
  *(_QWORD *)(a5 + 24) = result;
  *(_QWORD *)(a5 + 32) = v31;
  *(_QWORD *)(a5 + 40) = v32;
  *(_BYTE *)(a5 + 48) = 1;
  return result;
}

unint64_t specialized min<A>(_:_:)(unint64_t result, unint64_t a2)
{
  if (a2 < result)
    return a2;
  return result;
}

uint64_t getEnumTagSinglePayload for JSONMap.Value(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7B && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 123);
  v3 = ((*(unsigned __int8 *)(a1 + 16) >> 5) & 0xFFFFFF87 | (8 * ((*(unsigned __int8 *)(a1 + 16) >> 1) & 0xF))) ^ 0x7F;
  if (v3 >= 0x7A)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for JSONMap.Value(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7A)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 123;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7B)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0x7B)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_BYTE *)(result + 16) = 2 * (((-a2 >> 3) & 0xF) - 16 * a2);
    }
  }
  return result;
}

uint64_t getEnumTag for JSONMap.Value(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 16);
  if (v1 <= 0x9F)
    return v1 >> 5;
  else
    return (*(_DWORD *)a1 + 5);
}

uint64_t destructiveProjectEnumData for JSONMap.Value(uint64_t result)
{
  *(_BYTE *)(result + 16) &= 0x1Fu;
  return result;
}

uint64_t destructiveInjectEnumTag for JSONMap.Value(uint64_t result, unsigned int a2)
{
  if (a2 < 5)
  {
    *(_BYTE *)(result + 16) = *(_BYTE *)(result + 16) & 1 | (32 * a2);
  }
  else
  {
    *(_QWORD *)result = a2 - 5;
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 16) = -96;
  }
  return result;
}

uint64_t assignWithCopy for JSONError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a2 + 48);
  outlined copy of JSONError(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9);
  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  v16 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v9;
  outlined consume of JSONError(v10, v11, v12, v13, v14, v15, v16);
  return a1;
}

uint64_t assignWithTake for JSONError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  char v11;

  v3 = *(_BYTE *)(a2 + 48);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v11 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v3;
  outlined consume of JSONError(v4, v6, v5, v7, v8, v9, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for JSONError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xF4 && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 244);
  v3 = *(unsigned __int8 *)(a1 + 48);
  if (v3 <= 0xC)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for JSONError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF3)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 244;
    if (a3 >= 0xF4)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0xF4)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_BYTE *)(result + 48) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for JSONError(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 48) <= 0xBu)
    return *(unsigned __int8 *)(a1 + 48);
  else
    return (*(_DWORD *)a1 + 12);
}

uint64_t destructiveInjectEnumTag for JSONError(uint64_t result, unsigned int a2)
{
  if (a2 >= 0xC)
  {
    *(_QWORD *)result = a2 - 12;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)(result + 40) = 0;
    LOBYTE(a2) = 12;
  }
  *(_BYTE *)(result + 48) = a2;
  return result;
}

ValueMetadata *type metadata accessor for JSONError()
{
  return &type metadata for JSONError;
}

uint64_t specialized RangeReplaceableCollection.init<A>(_:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  char *v4;
  uint64_t AssociatedConformanceWitness;
  uint64_t result;
  _OWORD *v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  int v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35[8];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v23 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v4 = (char *)&v22 - v3;
  AttributedString.UnicodeScalarView.init()((uint64_t)a1);
  dispatch thunk of Sequence.makeIterator()();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v25 = v4;
  v26 = AssociatedTypeWitness;
  v24 = AssociatedConformanceWitness;
  result = dispatch thunk of IteratorProtocol.next()();
  if ((v32 & 1) != 0)
    return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v25, v26);
  while (a1[5] >> 10 >= a1[1] >> 10)
  {
    v30 = v31;
    v7 = (_OWORD *)*a1;
    v8 = *(_OWORD *)(*a1 + 32);
    v39 = *(_OWORD *)(*a1 + 16);
    v40 = v8;
    v41 = v7[3];
    BigString.unicodeScalars.getter();
    v9 = BigString.UnicodeScalarView.index(roundingDown:)();
    v28 = v10;
    v29 = v9;
    v12 = v11;
    v27 = v13;
    outlined release of Locale((uint64_t)&v33);
    v14 = v7[2];
    v36 = v7[1];
    v37 = v14;
    v38 = v7[3];
    BigString.unicodeScalars.getter();
    v15 = BigString.UnicodeScalarView.index(roundingDown:)();
    v17 = v16;
    v19 = v18;
    v21 = v20;
    outlined release of Locale((uint64_t)&v34);
    v35[0] = v29;
    v35[1] = v28;
    v35[2] = v12;
    v35[3] = v27;
    v35[4] = v15;
    v35[5] = v17;
    v35[6] = v19;
    v35[7] = v21;
    specialized AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)(v35, v30);
    result = dispatch thunk of IteratorProtocol.next()();
    if (v32 == 1)
      return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v25, v26);
  }
  __break(1u);
  return result;
}

uint64_t specialized RangeReplaceableCollection.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD v50[2];
  char *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  unint64_t v62[8];
  _OWORD v63[3];
  _OWORD v64[3];
  __int128 v65[3];
  _BYTE v66[40];
  __int128 v67[3];
  _BYTE v68[48];

  v56 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v6 = (char *)v50 - v5;
  BigString.init()();
  v62[0] = 0;
  MEMORY[0x186DA9E90](v62, 8);
  v7 = v62[0];
  type metadata accessor for AttributedString.Guts();
  v8 = swift_allocObject();
  result = BigString.isEmpty.getter();
  if ((result & 1) != 0)
  {
    v50[0] = v4;
    v10 = v60;
    *(_OWORD *)(v8 + 16) = v59;
    *(_OWORD *)(v8 + 32) = v10;
    *(_OWORD *)(v8 + 48) = v61;
    *(_QWORD *)(v8 + 64) = 0;
    *(_QWORD *)(v8 + 72) = 0;
    *(_QWORD *)(v8 + 80) = 0;
    *(_QWORD *)(v8 + 88) = v7;
    v11 = BigString.startIndex.getter();
    v51 = v6;
    v52 = AssociatedTypeWitness;
    v12 = v11;
    v14 = v13;
    v16 = v15;
    v18 = v17;
    v19 = BigString.endIndex.getter();
    *a2 = v8;
    a2[1] = v12;
    a2[2] = v14;
    a2[3] = v16;
    v21 = v51;
    v20 = v52;
    a2[4] = v18;
    a2[5] = v19;
    a2[6] = v22;
    a2[7] = v23;
    a2[8] = v24;
    a2[9] = 0;
    dispatch thunk of Sequence.makeIterator()();
    v50[1] = swift_getAssociatedConformanceWitness();
    while (1)
    {
      result = dispatch thunk of IteratorProtocol.next()();
      v25 = v58;
      if (!v58)
        return (*(uint64_t (**)(char *, uint64_t))(v50[0] + 8))(v21, v20);
      v26 = a2[5];
      if (v26 >> 10 < (unint64_t)a2[1] >> 10)
        break;
      v56 = v57;
      v27 = a2[7];
      v28 = a2[8];
      v29 = a2[6];
      v30 = (_OWORD *)*a2;
      v31 = *(_OWORD *)(*a2 + 16);
      v32 = *(_OWORD *)(*a2 + 48);
      v64[1] = *(_OWORD *)(*a2 + 32);
      v64[2] = v32;
      v64[0] = v31;
      v33 = v30[1];
      v65[1] = v30[2];
      v65[2] = v32;
      v65[0] = v33;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v65, (uint64_t)v66);
      outlined retain of Locale((uint64_t)v66);
      v34 = MEMORY[0x186DA3EC0](v26, v29, v27, v28);
      v54 = v35;
      v55 = v34;
      v37 = v36;
      v53 = v38;
      outlined release of Locale((uint64_t)v64);
      v39 = v30[1];
      v40 = v30[3];
      v63[1] = v30[2];
      v63[2] = v40;
      v63[0] = v39;
      v41 = v30[1];
      v67[1] = v30[2];
      v67[2] = v40;
      v67[0] = v41;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v67, (uint64_t)v68);
      outlined retain of Locale((uint64_t)v68);
      v42 = v28;
      v21 = v51;
      v43 = MEMORY[0x186DA3EC0](v26, v29, v27, v42);
      v45 = v44;
      v47 = v46;
      v49 = v48;
      outlined release of Locale((uint64_t)v63);
      v62[0] = v55;
      v62[1] = v37;
      v62[2] = v54;
      v62[3] = v53;
      v62[4] = v43;
      v62[5] = v45;
      v62[6] = v47;
      v62[7] = v49;
      v20 = v52;
      specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)(v62, v56, v25);
      swift_bridgeObjectRelease();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance JSONError.SourceLocation(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance JSONError(uint64_t a1, uint64_t a2)
{
  char v3;
  _BYTE v5[56];
  _BYTE v6[56];

  outlined init with take of JSONError(a1, (uint64_t)v5);
  outlined init with take of JSONError(a2, (uint64_t)v6);
  specialized static JSONError.== infix(_:_:)((uint64_t)v5, (uint64_t)v6);
  return v3 & 1;
}

void specialized static JSONError.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v4[6];

  outlined init with take of JSONError(a2, (uint64_t)&v3);
  outlined init with take of JSONError(a1, (uint64_t)v4);
  __asm { BR              X10 }
}

BOOL sub_181ADD1DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v8[6];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v2 = v10;
  v3 = v11;
  outlined init with take of JSONError(v1, (uint64_t)v8);
  return !v9 && v0 == v8[0] && v2 == v8[1] && v3 == v8[2];
}

unint64_t specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(unint64_t result, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;

  if (result < a2 || (v3 = result, v4 = a2 + a3, a2 + a3 < result))
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
  else
  {
    if (v4 >= result + 1)
      v4 = result + 1;
    if (v4 <= a2)
    {
      return 1;
    }
    else
    {
      v5 = -(uint64_t)a2;
      v6 = a3 + a2;
      result = 1;
LABEL_7:
      while (2)
      {
        v7 = 0;
        v8 = 0;
        v9 = v6 - a2;
        while (1)
        {
          if ((uint64_t)(v5 + a2 + v8) < 0 || v9 + v7 < 1)
          {
            __break(1u);
LABEL_28:
            __break(1u);
            goto LABEL_29;
          }
          v10 = *(unsigned __int8 *)(a2 + v8);
          if (v10 == 10)
          {
            v11 = __OFADD__(result++, 1);
            if (v11)
              goto LABEL_30;
            a2 += v8 + 1;
            if (a2 < v4)
              goto LABEL_7;
            return result;
          }
          if (v10 == 13)
            break;
          if (__OFADD__(v8, 1))
            goto LABEL_28;
          ++v8;
          --v7;
          if (a2 + v8 >= v4)
            return result;
        }
        v12 = a2 + v8;
        if (a2 + v8 + 1 <= v3)
        {
          if (((v5 + a2 + v8 + 1) & 0x8000000000000000) != 0 || ~v8 + v9 < 1)
            goto LABEL_32;
          if (*(_BYTE *)(v12 + 1) == 10)
            v12 = a2 + v8 + 1;
        }
        v11 = __OFADD__(result++, 1);
        if (v11)
          goto LABEL_31;
        a2 = v12 + 1;
        if (v12 + 1 < v4)
          continue;
        break;
      }
    }
  }
  return result;
}

unint64_t specialized RangeReplaceableCollection.init<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  unsigned __int16 *v4;
  uint64_t v5;
  int v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = a1;
  LODWORD(a1) = 0;
  v3 = 0;
  v4 = (unsigned __int16 *)(v2 + 32);
  v5 = v1;
  do
  {
    v6 = *v4++;
    a1 = ((-65535 << (v3 & 0x10)) - 1) & a1 | (v6 << (v3 & 0x10));
    v3 += 16;
    --v5;
  }
  while (v5);
  return a1 & 0xFFFFFF0FFFFFFFFFLL | ((unint64_t)(v1 & 0xF) << 36);
}

unsigned __int8 *specialized static JSONScanner.parseUnicodeSequence(from:into:fullSource:allowNulls:)(unint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int16 v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  int v13;
  unsigned __int8 v14;
  unint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  unsigned __int16 v23;
  unsigned __int8 *v24;
  int v25;
  unsigned __int8 v26;
  uint64_t inited;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned __int8 *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int16 v47;

  if (a2 < 4)
  {
    __break(1u);
LABEL_42:
    v40 = v8;
    goto LABEL_38;
  }
  v6 = a5;
  v7 = a4;
  v8 = a1;
  v10 = 0;
  v11 = (unsigned __int8 *)(a1 + 4);
  v12 = (unsigned __int8 *)a1;
  do
  {
    v13 = *v12;
    v14 = v13 - 48;
    if ((v13 - 48) >= 0xA)
    {
      if ((v13 - 65) < 6)
      {
        v14 = v13 - 55;
      }
      else
      {
        if ((v13 - 97) > 5)
          goto LABEL_32;
        v14 = v13 - 87;
      }
    }
    if (v10 > 0xFFFu)
      goto LABEL_32;
    v10 = 16 * v10 + v14;
    ++v12;
  }
  while (v12 < v11);
  if ((a6 & 1) == 0 && !v10)
  {
    v15 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(a1, a4, a5);
    v11 = v16;
    v18 = v17;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_QWORD *)v19 = v15;
    *(_QWORD *)(v19 + 8) = v11;
    *(_QWORD *)(v19 + 16) = v18;
    *(_QWORD *)(v19 + 24) = 0;
    *(_QWORD *)(v19 + 32) = 0;
    *(_QWORD *)(v19 + 40) = 0;
    v20 = 4;
LABEL_33:
    *(_BYTE *)(v19 + 48) = v20;
    swift_willThrow();
    return v11;
  }
  if (v10 >> 10 == 54)
  {
    if (a2 - 4 < 0)
    {
      __break(1u);
      goto LABEL_44;
    }
    if (a2 - 4 >= 2 && *v11 == 92 && *(_BYTE *)(a1 + 5) == 117)
    {
      v21 = a2 - 6;
      if (a2 - 6 >= 4)
        v22 = 4;
      else
        v22 = a2 - 6;
      if (v21 >= 4)
      {
        v23 = 0;
        v8 = a1 + 6;
        v11 = (unsigned __int8 *)(a1 + 6 + v22);
        v24 = (unsigned __int8 *)(a1 + 6);
        while (1)
        {
          v25 = *v24;
          v26 = v25 - 48;
          if ((v25 - 48) >= 0xA)
          {
            if ((v25 - 65) < 6)
            {
              v26 = v25 - 55;
            }
            else
            {
              if ((v25 - 97) > 5)
                break;
              v26 = v25 - 87;
            }
          }
          if (v23 > 0xFFFu)
            break;
          v23 = 16 * v23 + v26;
          if (++v24 >= v11)
          {
            v47 = v23;
            if (v23 >> 10 != 55)
              goto LABEL_42;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt16>);
            inited = swift_initStackObject();
            *(_OWORD *)(inited + 16) = xmmword_18205F0D0;
            *(_WORD *)(inited + 32) = v10;
            *(_WORD *)(inited + 34) = v47;
            specialized RangeReplaceableCollection.init<A>(_:)(inited);
            swift_setDeallocating();
            v45 = *a3;
            v46 = a3[1];
            goto LABEL_40;
          }
        }
LABEL_32:
        v11 = (unsigned __int8 *)static String._fromUTF8Repairing(_:)();
        v29 = v28;
        v30 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v8, v7, v6);
        v32 = v31;
        v34 = v33;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_QWORD *)v19 = v11;
        *(_QWORD *)(v19 + 8) = v29;
        *(_QWORD *)(v19 + 16) = v30;
        *(_QWORD *)(v19 + 24) = v32;
        *(_QWORD *)(v19 + 32) = v34;
        *(_QWORD *)(v19 + 40) = 0;
        v20 = 3;
        goto LABEL_33;
      }
LABEL_44:
      __break(1u);
      JUMPOUT(0x181ADDB8CLL);
    }
    v40 = a1 + 4;
LABEL_38:
    v41 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v40, v7, v6);
    v11 = v42;
    v44 = v43;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_QWORD *)v19 = v41;
    *(_QWORD *)(v19 + 8) = v11;
    *(_QWORD *)(v19 + 16) = v44;
    *(_QWORD *)(v19 + 24) = 0;
    *(_QWORD *)(v19 + 32) = 0;
    *(_QWORD *)(v19 + 40) = 0;
    v20 = 8;
    goto LABEL_33;
  }
  if (v10 >> 11 == 27)
  {
    v36 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(a1, a4, a5);
    v11 = v37;
    v39 = v38;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_QWORD *)v19 = v36;
    *(_QWORD *)(v19 + 8) = v11;
    *(_QWORD *)(v19 + 16) = v39;
    *(_QWORD *)(v19 + 24) = v10;
    *(_QWORD *)(v19 + 32) = 0;
    *(_QWORD *)(v19 + 40) = 0;
    v20 = 9;
    goto LABEL_33;
  }
  v45 = *a3;
  v46 = a3[1];
LABEL_40:
  String.UnicodeScalarView.append(_:)();
  *a3 = v45;
  a3[1] = v46;
  return v11;
}

double specialized static JSONScanner.validateNumber(from:fullSource:)@<D0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  char v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  double result;
  uint64_t v22;
  uint64_t v23;

  v5 = (uint64_t)a1;
  v7 = &a1[a2];
  if (a2 >= 1)
  {
    v8 = 0;
    v9 = a2;
    while (1)
    {
      if (v8 < 0)
        goto LABEL_33;
      v10 = v9-- < 1;
      if (v10)
        goto LABEL_33;
      if (*(unsigned __int8 *)(v5 + v8) - 58 < 0xFFFFFFF6)
        break;
      ++v8;
      a1 = (_BYTE *)(v5 + v8);
      if (v5 + v8 >= (unint64_t)v7)
        goto LABEL_9;
    }
    a1 = (_BYTE *)(v5 + v8);
  }
LABEL_9:
  if (a1 >= v7)
  {
LABEL_36:
    __break(1u);
    JUMPOUT(0x181ADDEA8);
  }
  v11 = 0;
  v12 = (uint64_t)&a1[-v5];
  v13 = (_BYTE *)(a2 + v5);
  v14 = -v5;
  v15 = 1;
  v16 = 1;
  while (2)
  {
    v17 = v13 - a1;
    v18 = (unint64_t)&a1[v14];
    while (1)
    {
      if ((v18 & 0x8000000000000000) != 0 || (v10 = v17 < 1, --v17, v10))
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v19 = *a1;
      if ((v19 - 58) <= 0xFFFFFFF5)
        break;
      if (__OFADD__(v12, 1))
        goto LABEL_31;
      ++a1;
      ++v12;
      ++v18;
      if (a1 >= v7)
        goto LABEL_32;
    }
    switch(*a1)
    {
      case '+':
      case '-':
        if (v12 != 0 || (v11 & 1) == 0)
          goto LABEL_29;
        v12 = 0;
        v11 = 0;
        v15 = 0;
        v16 = 0;
        if (++a1 >= v7)
          goto LABEL_34;
        continue;
      case ',':
      case '/':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case ':':
      case ';':
      case '<':
      case '=':
      case '>':
      case '?':
      case '@':
      case 'A':
      case 'B':
      case 'C':
      case 'D':
        goto LABEL_29;
      case '.':
        if (v12 < 1 || (v16 & 1) == 0)
          goto LABEL_29;
        v12 = 0;
        v11 = 0;
        v16 = 0;
        ++a1;
        v15 = 1;
        if (a1 < v7)
          continue;
        __break(1u);
        goto LABEL_29;
      case 'E':
        goto LABEL_23;
      default:
        if ((_DWORD)v19 != 101)
          goto LABEL_29;
LABEL_23:
        if (v12 >= 1 && (v15 & 1) != 0)
        {
          v12 = 0;
          v15 = 0;
          v16 = 0;
          ++a1;
          v11 = 1;
          if (a1 >= v7)
            goto LABEL_35;
          continue;
        }
LABEL_29:
        v20 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)a1, a3, a4);
        result = 2.38954692e180;
        *(_OWORD *)a5 = xmmword_18206BE50;
        *(_QWORD *)(a5 + 16) = v19;
        *(_QWORD *)(a5 + 24) = v20;
        *(_QWORD *)(a5 + 32) = v22;
        *(_QWORD *)(a5 + 40) = v23;
        *(_BYTE *)(a5 + 48) = 1;
        return result;
    }
  }
}

unint64_t lazy protocol witness table accessor for type UInt32 and conformance UInt32()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEE138], MEMORY[0x1E0DEE0F8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEE148], MEMORY[0x1E0DEE0F8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
  }
  return result;
}

ValueMetadata *type metadata accessor for JSONMap.Region()
{
  return &type metadata for JSONMap.Region;
}

uint64_t getEnumTagSinglePayload for JSONError.SourceLocation(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for JSONError.SourceLocation(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for JSONError.SourceLocation()
{
  return &type metadata for JSONError.SourceLocation;
}

ValueMetadata *type metadata accessor for JSONMap.ArrayIterator()
{
  return &type metadata for JSONMap.ArrayIterator;
}

uint64_t specialized AsyncLineSequence.AsyncIterator.next()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 v19;
  int v20;
  uint64_t v21;
  char *v22;
  char v23;
  char *v24;
  int64_t v25;
  char v26;
  char *v27;
  uint64_t v28;
  int64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unsigned __int8 *v43;
  int v44;
  _QWORD *v45;
  unsigned __int8 *v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  size_t v55;
  _QWORD *v56;
  size_t v57;
  uint64_t v58;
  unsigned __int8 *v59;
  unsigned __int8 v60;
  int v61;
  uint64_t v62;
  char v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  char v70;
  char v71;
  unint64_t v72;
  unint64_t v73;
  int64_t v74;
  uint64_t v75;
  char *v76;
  size_t v77;
  char v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char v87;
  uint64_t v88;
  _QWORD *v89;
  size_t v90;
  _QWORD *v91;
  uint64_t (*v92)(__int16);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;

  v1 = *(_QWORD *)(v0 + 16);
  if ((*(_BYTE *)(v1 + 33) & 1) != 0)
  {
    v2 = *(unsigned __int8 **)(v1 + 8);
    if (v2 == *(unsigned __int8 **)(v1 + 16))
    {
      v91 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 24) = v91;
      v92 = specialized AsyncLineSequence.AsyncIterator.next();
      goto LABEL_99;
    }
    v3 = *v2;
    *(_QWORD *)(v1 + 8) = v2 + 1;
    v1 = *(_QWORD *)(v0 + 16);
  }
  else
  {
    v3 = *(unsigned __int8 *)(v1 + 32);
  }
  *(_WORD *)(v1 + 32) = 256;
  if (v3 != 13)
  {
    if ((v3 - 10) < 3)
    {
      v10 = *(_QWORD *)(v0 + 16);
      if (*(_QWORD *)(*(_QWORD *)(v10 + 24) + 16))
      {
        swift_bridgeObjectRetain();
        v11 = static String._fromUTF8Repairing(_:)();
        v13 = v12;
        swift_bridgeObjectRelease();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v15 = *(_QWORD *)(v10 + 24);
        goto LABEL_12;
      }
      v35 = swift_isUniquelyReferenced_nonNull_native();
      v24 = *(char **)(v10 + 24);
      if ((v35 & 1) != 0)
      {
        v36 = *(_QWORD *)(v0 + 16);
        v25 = *((_QWORD *)v24 + 2);
        v37 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v36 + 24) = v24;
        if ((v37 & 1) == 0)
        {
          v38 = *(_QWORD *)(v0 + 16);
          v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25, 1, v24);
          *(_QWORD *)(v38 + 24) = v24;
        }
LABEL_35:
        if (v25)
        {
          v39 = *((_QWORD *)v24 + 2);
          v40 = v39 - v25;
          if (v39 - v25 < 0)
            return _fatalErrorMessage(_:_:file:line:flags:)();
          memmove(v24 + 32, &v24[v25 + 32], v39 - v25);
          *((_QWORD *)v24 + 2) = v40;
        }
        *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24) = v24;
        return swift_task_switch();
      }
LABEL_54:
      if (*((_QWORD *)v24 + 3) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        v56 = (_QWORD *)swift_allocObject();
        v77 = _swift_stdlib_malloc_size(v56);
        v56[2] = 0;
        v56[3] = 2 * v77 - 64;
      }
      else
      {
        v56 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      }
      *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24) = v56;
LABEL_80:
      swift_bridgeObjectRelease();
      return swift_task_switch();
    }
    if (v3 == 226)
    {
      v42 = *(_QWORD *)(v0 + 16);
      v43 = *(unsigned __int8 **)(v42 + 8);
      if (v43 == *(unsigned __int8 **)(v42 + 16))
      {
        v91 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 80) = v91;
        v92 = specialized AsyncLineSequence.AsyncIterator.next();
      }
      else
      {
        v44 = *v43;
        v19 = *v43;
        *(_QWORD *)(v42 + 8) = v43 + 1;
        v45 = *(_QWORD **)(v0 + 16);
        if (v44 != 128)
        {
          v22 = (char *)v45[3];
          v71 = swift_isUniquelyReferenced_nonNull_native();
          v45[3] = v22;
          if ((v71 & 1) == 0)
          {
            v95 = *(_QWORD *)(v0 + 16);
            v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v22 + 2) + 1, 1, v22);
            *(_QWORD *)(v95 + 24) = v22;
          }
          v66 = *((_QWORD *)v22 + 2);
          v72 = *((_QWORD *)v22 + 3);
          v67 = v66 + 1;
          if (v66 >= v72 >> 1)
            v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v72 > 1), v66 + 1, 1, v22);
          v68 = *(_QWORD *)(v0 + 16);
          *((_QWORD *)v22 + 2) = v67;
          v69 = &v22[v66];
          v70 = -30;
LABEL_74:
          v69[32] = v70;
          *(_QWORD *)(v68 + 24) = v22;
          v73 = *((_QWORD *)v22 + 3);
          v74 = v66 + 2;
          if (v74 > (uint64_t)(v73 >> 1))
            v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v73 > 1), v74, 1, v22);
          v75 = *(_QWORD *)(v0 + 16);
          *((_QWORD *)v22 + 2) = v74;
          v76 = &v22[v67];
          goto LABEL_77;
        }
        v46 = (unsigned __int8 *)v45[1];
        if (v46 != (unsigned __int8 *)v45[2])
        {
          v47 = *v46;
          v19 = *v46;
          v45[1] = v46 + 1;
          v21 = *(_QWORD *)(v0 + 16);
          v22 = *(char **)(v21 + 24);
          if ((v47 & 0xFE) == 0xA8)
          {
            if (!*((_QWORD *)v22 + 2))
            {
              v87 = swift_isUniquelyReferenced_nonNull_native();
              v88 = *(_QWORD *)(v21 + 24);
              if ((v87 & 1) != 0)
              {
                specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v88 + 16));
                return swift_task_switch();
              }
              if (*(_QWORD *)(v88 + 24) >= 2uLL)
              {
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
                v89 = (_QWORD *)swift_allocObject();
                v90 = _swift_stdlib_malloc_size(v89);
                v89[2] = 0;
                v89[3] = 2 * v90 - 64;
              }
              else
              {
                v89 = (_QWORD *)MEMORY[0x1E0DEE9D8];
              }
              *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24) = v89;
              goto LABEL_80;
            }
            goto LABEL_46;
          }
          v78 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(v21 + 24) = v22;
          if ((v78 & 1) == 0)
          {
            v96 = *(_QWORD *)(v0 + 16);
            v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v22 + 2) + 1, 1, v22);
            *(_QWORD *)(v96 + 24) = v22;
          }
          v80 = *((_QWORD *)v22 + 2);
          v79 = *((_QWORD *)v22 + 3);
          v81 = v80 + 1;
          if (v80 >= v79 >> 1)
            v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v79 > 1), v80 + 1, 1, v22);
          v82 = *(_QWORD *)(v0 + 16);
          *((_QWORD *)v22 + 2) = v81;
          v22[v80 + 32] = -30;
          *(_QWORD *)(v82 + 24) = v22;
          v83 = *((_QWORD *)v22 + 3);
          v84 = v80 + 2;
          if ((uint64_t)(v80 + 2) > (uint64_t)(v83 >> 1))
            v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v83 > 1), v80 + 2, 1, v22);
          v85 = *(_QWORD *)(v0 + 16);
          *((_QWORD *)v22 + 2) = v84;
          v22[v81 + 32] = 0x80;
          *(_QWORD *)(v85 + 24) = v22;
          v86 = *((_QWORD *)v22 + 3);
          if ((uint64_t)(v80 + 3) > (uint64_t)(v86 >> 1))
            v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v86 > 1), v80 + 3, 1, v22);
          v75 = *(_QWORD *)(v0 + 16);
          *((_QWORD *)v22 + 2) = v80 + 3;
          v76 = &v22[v84];
LABEL_77:
          v76[32] = v19;
          *(_QWORD *)(v75 + 24) = v22;
          return swift_task_switch();
        }
        v91 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 88) = v91;
        v92 = specialized AsyncLineSequence.AsyncIterator.next();
      }
    }
    else
    {
      if (v3 != 194)
      {
        v49 = *(_QWORD *)(v0 + 16);
        v50 = *(char **)(v49 + 24);
        v51 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v49 + 24) = v50;
        if ((v51 & 1) == 0)
        {
          v93 = *(_QWORD *)(v0 + 16);
          v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v50 + 2) + 1, 1, v50);
          *(_QWORD *)(v93 + 24) = v50;
        }
        v53 = *((_QWORD *)v50 + 2);
        v52 = *((_QWORD *)v50 + 3);
        if (v53 >= v52 >> 1)
          v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v52 > 1), v53 + 1, 1, v50);
        v54 = *(_QWORD *)(v0 + 16);
        *((_QWORD *)v50 + 2) = v53 + 1;
        v50[v53 + 32] = v3;
        *(_QWORD *)(v54 + 24) = v50;
        return swift_task_switch();
      }
      v17 = *(_QWORD *)(v0 + 16);
      v18 = *(unsigned __int8 **)(v17 + 8);
      if (v18 != *(unsigned __int8 **)(v17 + 16))
      {
        v20 = *v18;
        v19 = *v18;
        *(_QWORD *)(v17 + 8) = v18 + 1;
        v21 = *(_QWORD *)(v0 + 16);
        v22 = *(char **)(v21 + 24);
        if (v20 == 133)
        {
          if (!*((_QWORD *)v22 + 2))
          {
            v23 = swift_isUniquelyReferenced_nonNull_native();
            v24 = *(char **)(v21 + 24);
            if ((v23 & 1) != 0)
            {
              v25 = *((_QWORD *)v24 + 2);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25, 1, v24);
              goto LABEL_35;
            }
            goto LABEL_54;
          }
LABEL_46:
          swift_bridgeObjectRetain();
          v11 = static String._fromUTF8Repairing(_:)();
          v13 = v48;
          swift_bridgeObjectRelease();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v15 = *(_QWORD *)(v21 + 24);
LABEL_12:
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v15 + 16));
          }
          else
          {
            v16 = (_QWORD *)(*(_QWORD *)(v0 + 16) + 24);
            *v16 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(_QWORD *)(v15 + 24) >> 1);
            swift_bridgeObjectRelease();
          }
          return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v11, v13);
        }
        v64 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v21 + 24) = v22;
        if ((v64 & 1) == 0)
        {
          v94 = *(_QWORD *)(v0 + 16);
          v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v22 + 2) + 1, 1, v22);
          *(_QWORD *)(v94 + 24) = v22;
        }
        v66 = *((_QWORD *)v22 + 2);
        v65 = *((_QWORD *)v22 + 3);
        v67 = v66 + 1;
        if (v66 >= v65 >> 1)
          v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v65 > 1), v66 + 1, 1, v22);
        v68 = *(_QWORD *)(v0 + 16);
        *((_QWORD *)v22 + 2) = v67;
        v69 = &v22[v66];
        v70 = -62;
        goto LABEL_74;
      }
      v91 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 72) = v91;
      v92 = specialized AsyncLineSequence.AsyncIterator.next();
    }
LABEL_99:
    *v91 = v0;
    v91[1] = v92;
    return _AsyncBytesBuffer.reloadBufferAndNext()();
  }
  v4 = *(_QWORD *)(v0 + 16);
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 16))
  {
    swift_bridgeObjectRetain();
    v5 = static String._fromUTF8Repairing(_:)();
    v7 = v6;
    swift_bridgeObjectRelease();
    v8 = swift_isUniquelyReferenced_nonNull_native();
    v9 = *(_QWORD *)(v4 + 24);
    if ((v8 & 1) != 0)
    {
      specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v9 + 16));
    }
    else
    {
      if (*(_QWORD *)(v9 + 24) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        v34 = (_QWORD *)swift_allocObject();
        v55 = _swift_stdlib_malloc_size(v34);
        v34[2] = 0;
        v34[3] = 2 * v55 - 64;
      }
      else
      {
        v34 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      }
      *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24) = v34;
      swift_bridgeObjectRelease();
    }
    goto LABEL_58;
  }
  v26 = swift_isUniquelyReferenced_nonNull_native();
  v27 = *(char **)(v4 + 24);
  if ((v26 & 1) == 0)
  {
    if (*((_QWORD *)v27 + 3) >= 2uLL)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
      v41 = (_QWORD *)swift_allocObject();
      v57 = _swift_stdlib_malloc_size(v41);
      v41[2] = 0;
      v41[3] = 2 * v57 - 64;
    }
    else
    {
      v41 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24) = v41;
    swift_bridgeObjectRelease();
    v5 = 0;
    v7 = 0;
    goto LABEL_58;
  }
  v28 = *(_QWORD *)(v0 + 16);
  v29 = *((_QWORD *)v27 + 2);
  v30 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v28 + 24) = v27;
  if ((v30 & 1) == 0)
  {
    v31 = *(_QWORD *)(v0 + 16);
    v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29, 1, v27);
    *(_QWORD *)(v31 + 24) = v27;
  }
  if (!v29)
  {
LABEL_28:
    v5 = 0;
    v7 = 0;
    *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24) = v27;
LABEL_58:
    *(_QWORD *)(v0 + 40) = v5;
    *(_QWORD *)(v0 + 48) = v7;
    v58 = *(_QWORD *)(v0 + 16);
    v59 = *(unsigned __int8 **)(v58 + 8);
    if (v59 != *(unsigned __int8 **)(v58 + 16))
    {
      v61 = *v59;
      v60 = *v59;
      *(_QWORD *)(v58 + 8) = v59 + 1;
      if (v61 != 10)
      {
        v62 = *(_QWORD *)(v0 + 16);
        *(_BYTE *)(v62 + 32) = v60;
        *(_BYTE *)(v62 + 33) = 0;
      }
      v13 = *(_QWORD *)(v0 + 48);
      if (v13)
      {
        v11 = *(_QWORD *)(v0 + 40);
        return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v11, v13);
      }
      return swift_task_switch();
    }
    v91 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 56) = v91;
    v92 = specialized AsyncLineSequence.AsyncIterator.next();
    goto LABEL_99;
  }
  v32 = *((_QWORD *)v27 + 2);
  v33 = v32 - v29;
  if (v32 - v29 >= 0)
  {
    memmove(v27 + 32, &v27[v29 + 32], v32 - v29);
    *((_QWORD *)v27 + 2) = v33;
    goto LABEL_28;
  }
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

{
  uint64_t v0;
  __int16 v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 v21;
  int v22;
  uint64_t v23;
  char *v24;
  char v25;
  char *v26;
  int64_t v27;
  char v28;
  char *v29;
  uint64_t v30;
  int64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unsigned __int8 *v45;
  int v46;
  _QWORD *v47;
  unsigned __int8 *v48;
  unsigned __int8 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  size_t v57;
  _QWORD *v58;
  size_t v59;
  uint64_t v60;
  unsigned __int8 *v61;
  unsigned __int8 v62;
  int v63;
  uint64_t v64;
  char v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  char v72;
  char v73;
  unint64_t v74;
  unint64_t v75;
  int64_t v76;
  uint64_t v77;
  char *v78;
  size_t v79;
  char v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char v89;
  uint64_t v90;
  _QWORD *v91;
  size_t v92;
  _QWORD *v93;
  uint64_t (*v94)(__int16);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  v1 = *(_WORD *)(v0 + 96);
  *(_WORD *)(*(_QWORD *)(v0 + 16) + 32) = 256;
  if ((v1 & 0x100) != 0)
  {
    v9 = *(_QWORD *)(v0 + 16);
    v10 = *(_QWORD *)(*(_QWORD *)(v9 + 24) + 16);
    if (!v10)
    {
      v11 = 0;
      return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v11, v10);
    }
    swift_bridgeObjectRetain();
    v11 = static String._fromUTF8Repairing(_:)();
    v10 = v12;
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *(_QWORD *)(v9 + 24);
    v15 = (_QWORD *)(*(_QWORD *)(v0 + 16) + 24);
    if (!isUniquelyReferenced_nonNull_native)
      goto LABEL_13;
    goto LABEL_8;
  }
  v2 = *(unsigned __int8 *)(v0 + 96);
  if (v2 != 13)
  {
    if ((v2 - 10) < 3)
    {
      v16 = *(_QWORD *)(v0 + 16);
      if (*(_QWORD *)(*(_QWORD *)(v16 + 24) + 16))
      {
        swift_bridgeObjectRetain();
        v11 = static String._fromUTF8Repairing(_:)();
        v10 = v17;
        swift_bridgeObjectRelease();
        v18 = swift_isUniquelyReferenced_nonNull_native();
        v14 = *(_QWORD *)(v16 + 24);
        goto LABEL_12;
      }
      v37 = swift_isUniquelyReferenced_nonNull_native();
      v26 = *(char **)(v16 + 24);
      if ((v37 & 1) != 0)
      {
        v38 = *(_QWORD *)(v0 + 16);
        v27 = *((_QWORD *)v26 + 2);
        v39 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v38 + 24) = v26;
        if ((v39 & 1) == 0)
        {
          v40 = *(_QWORD *)(v0 + 16);
          v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27, 1, v26);
          *(_QWORD *)(v40 + 24) = v26;
        }
LABEL_35:
        if (v27)
        {
          v41 = *((_QWORD *)v26 + 2);
          v42 = v41 - v27;
          if (v41 - v27 < 0)
            return _fatalErrorMessage(_:_:file:line:flags:)();
          memmove(v26 + 32, &v26[v27 + 32], v41 - v27);
          *((_QWORD *)v26 + 2) = v42;
        }
        *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24) = v26;
        return swift_task_switch();
      }
LABEL_54:
      if (*((_QWORD *)v26 + 3) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        v58 = (_QWORD *)swift_allocObject();
        v79 = _swift_stdlib_malloc_size(v58);
        v58[2] = 0;
        v58[3] = 2 * v79 - 64;
      }
      else
      {
        v58 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      }
      *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24) = v58;
LABEL_80:
      swift_bridgeObjectRelease();
      return swift_task_switch();
    }
    if (v2 == 226)
    {
      v44 = *(_QWORD *)(v0 + 16);
      v45 = *(unsigned __int8 **)(v44 + 8);
      if (v45 == *(unsigned __int8 **)(v44 + 16))
      {
        v93 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 80) = v93;
        v94 = specialized AsyncLineSequence.AsyncIterator.next();
      }
      else
      {
        v46 = *v45;
        v21 = *v45;
        *(_QWORD *)(v44 + 8) = v45 + 1;
        v47 = *(_QWORD **)(v0 + 16);
        if (v46 != 128)
        {
          v24 = (char *)v47[3];
          v73 = swift_isUniquelyReferenced_nonNull_native();
          v47[3] = v24;
          if ((v73 & 1) == 0)
          {
            v97 = *(_QWORD *)(v0 + 16);
            v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v24 + 2) + 1, 1, v24);
            *(_QWORD *)(v97 + 24) = v24;
          }
          v68 = *((_QWORD *)v24 + 2);
          v74 = *((_QWORD *)v24 + 3);
          v69 = v68 + 1;
          if (v68 >= v74 >> 1)
            v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v74 > 1), v68 + 1, 1, v24);
          v70 = *(_QWORD *)(v0 + 16);
          *((_QWORD *)v24 + 2) = v69;
          v71 = &v24[v68];
          v72 = -30;
LABEL_74:
          v71[32] = v72;
          *(_QWORD *)(v70 + 24) = v24;
          v75 = *((_QWORD *)v24 + 3);
          v76 = v68 + 2;
          if (v76 > (uint64_t)(v75 >> 1))
            v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v75 > 1), v76, 1, v24);
          v77 = *(_QWORD *)(v0 + 16);
          *((_QWORD *)v24 + 2) = v76;
          v78 = &v24[v69];
          goto LABEL_77;
        }
        v48 = (unsigned __int8 *)v47[1];
        if (v48 != (unsigned __int8 *)v47[2])
        {
          v49 = *v48;
          v21 = *v48;
          v47[1] = v48 + 1;
          v23 = *(_QWORD *)(v0 + 16);
          v24 = *(char **)(v23 + 24);
          if ((v49 & 0xFE) == 0xA8)
          {
            if (!*((_QWORD *)v24 + 2))
            {
              v89 = swift_isUniquelyReferenced_nonNull_native();
              v90 = *(_QWORD *)(v23 + 24);
              if ((v89 & 1) != 0)
              {
                specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v90 + 16));
                return swift_task_switch();
              }
              if (*(_QWORD *)(v90 + 24) >= 2uLL)
              {
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
                v91 = (_QWORD *)swift_allocObject();
                v92 = _swift_stdlib_malloc_size(v91);
                v91[2] = 0;
                v91[3] = 2 * v92 - 64;
              }
              else
              {
                v91 = (_QWORD *)MEMORY[0x1E0DEE9D8];
              }
              *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24) = v91;
              goto LABEL_80;
            }
            goto LABEL_46;
          }
          v80 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(v23 + 24) = v24;
          if ((v80 & 1) == 0)
          {
            v98 = *(_QWORD *)(v0 + 16);
            v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v24 + 2) + 1, 1, v24);
            *(_QWORD *)(v98 + 24) = v24;
          }
          v82 = *((_QWORD *)v24 + 2);
          v81 = *((_QWORD *)v24 + 3);
          v83 = v82 + 1;
          if (v82 >= v81 >> 1)
            v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v81 > 1), v82 + 1, 1, v24);
          v84 = *(_QWORD *)(v0 + 16);
          *((_QWORD *)v24 + 2) = v83;
          v24[v82 + 32] = -30;
          *(_QWORD *)(v84 + 24) = v24;
          v85 = *((_QWORD *)v24 + 3);
          v86 = v82 + 2;
          if ((uint64_t)(v82 + 2) > (uint64_t)(v85 >> 1))
            v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v85 > 1), v82 + 2, 1, v24);
          v87 = *(_QWORD *)(v0 + 16);
          *((_QWORD *)v24 + 2) = v86;
          v24[v83 + 32] = 0x80;
          *(_QWORD *)(v87 + 24) = v24;
          v88 = *((_QWORD *)v24 + 3);
          if ((uint64_t)(v82 + 3) > (uint64_t)(v88 >> 1))
            v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v88 > 1), v82 + 3, 1, v24);
          v77 = *(_QWORD *)(v0 + 16);
          *((_QWORD *)v24 + 2) = v82 + 3;
          v78 = &v24[v86];
LABEL_77:
          v78[32] = v21;
          *(_QWORD *)(v77 + 24) = v24;
          return swift_task_switch();
        }
        v93 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 88) = v93;
        v94 = specialized AsyncLineSequence.AsyncIterator.next();
      }
    }
    else
    {
      if (v2 != 194)
      {
        v51 = *(_QWORD *)(v0 + 16);
        v52 = *(char **)(v51 + 24);
        v53 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v51 + 24) = v52;
        if ((v53 & 1) == 0)
        {
          v95 = *(_QWORD *)(v0 + 16);
          v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v52 + 2) + 1, 1, v52);
          *(_QWORD *)(v95 + 24) = v52;
        }
        v55 = *((_QWORD *)v52 + 2);
        v54 = *((_QWORD *)v52 + 3);
        if (v55 >= v54 >> 1)
          v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v54 > 1), v55 + 1, 1, v52);
        v56 = *(_QWORD *)(v0 + 16);
        *((_QWORD *)v52 + 2) = v55 + 1;
        v52[v55 + 32] = v2;
        *(_QWORD *)(v56 + 24) = v52;
        return swift_task_switch();
      }
      v19 = *(_QWORD *)(v0 + 16);
      v20 = *(unsigned __int8 **)(v19 + 8);
      if (v20 != *(unsigned __int8 **)(v19 + 16))
      {
        v22 = *v20;
        v21 = *v20;
        *(_QWORD *)(v19 + 8) = v20 + 1;
        v23 = *(_QWORD *)(v0 + 16);
        v24 = *(char **)(v23 + 24);
        if (v22 == 133)
        {
          if (!*((_QWORD *)v24 + 2))
          {
            v25 = swift_isUniquelyReferenced_nonNull_native();
            v26 = *(char **)(v23 + 24);
            if ((v25 & 1) != 0)
            {
              v27 = *((_QWORD *)v26 + 2);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27, 1, v26);
              goto LABEL_35;
            }
            goto LABEL_54;
          }
LABEL_46:
          swift_bridgeObjectRetain();
          v11 = static String._fromUTF8Repairing(_:)();
          v10 = v50;
          swift_bridgeObjectRelease();
          v18 = swift_isUniquelyReferenced_nonNull_native();
          v14 = *(_QWORD *)(v23 + 24);
LABEL_12:
          v15 = (_QWORD *)(*(_QWORD *)(v0 + 16) + 24);
          if ((v18 & 1) == 0)
          {
LABEL_13:
            *v15 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(_QWORD *)(v14 + 24) >> 1);
            swift_bridgeObjectRelease();
            return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v11, v10);
          }
LABEL_8:
          specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v14 + 16));
          return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v11, v10);
        }
        v66 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v23 + 24) = v24;
        if ((v66 & 1) == 0)
        {
          v96 = *(_QWORD *)(v0 + 16);
          v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v24 + 2) + 1, 1, v24);
          *(_QWORD *)(v96 + 24) = v24;
        }
        v68 = *((_QWORD *)v24 + 2);
        v67 = *((_QWORD *)v24 + 3);
        v69 = v68 + 1;
        if (v68 >= v67 >> 1)
          v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v67 > 1), v68 + 1, 1, v24);
        v70 = *(_QWORD *)(v0 + 16);
        *((_QWORD *)v24 + 2) = v69;
        v71 = &v24[v68];
        v72 = -62;
        goto LABEL_74;
      }
      v93 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 72) = v93;
      v94 = specialized AsyncLineSequence.AsyncIterator.next();
    }
LABEL_98:
    *v93 = v0;
    v93[1] = v94;
    return _AsyncBytesBuffer.reloadBufferAndNext()();
  }
  v3 = *(_QWORD *)(v0 + 16);
  if (*(_QWORD *)(*(_QWORD *)(v3 + 24) + 16))
  {
    swift_bridgeObjectRetain();
    v4 = static String._fromUTF8Repairing(_:)();
    v6 = v5;
    swift_bridgeObjectRelease();
    v7 = swift_isUniquelyReferenced_nonNull_native();
    v8 = *(_QWORD *)(v3 + 24);
    if ((v7 & 1) != 0)
    {
      specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v8 + 16));
    }
    else
    {
      if (*(_QWORD *)(v8 + 24) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        v36 = (_QWORD *)swift_allocObject();
        v57 = _swift_stdlib_malloc_size(v36);
        v36[2] = 0;
        v36[3] = 2 * v57 - 64;
      }
      else
      {
        v36 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      }
      *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24) = v36;
      swift_bridgeObjectRelease();
    }
    goto LABEL_58;
  }
  v28 = swift_isUniquelyReferenced_nonNull_native();
  v29 = *(char **)(v3 + 24);
  if ((v28 & 1) == 0)
  {
    if (*((_QWORD *)v29 + 3) >= 2uLL)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
      v43 = (_QWORD *)swift_allocObject();
      v59 = _swift_stdlib_malloc_size(v43);
      v43[2] = 0;
      v43[3] = 2 * v59 - 64;
    }
    else
    {
      v43 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24) = v43;
    swift_bridgeObjectRelease();
    v4 = 0;
    v6 = 0;
    goto LABEL_58;
  }
  v30 = *(_QWORD *)(v0 + 16);
  v31 = *((_QWORD *)v29 + 2);
  v32 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v30 + 24) = v29;
  if ((v32 & 1) == 0)
  {
    v33 = *(_QWORD *)(v0 + 16);
    v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31, 1, v29);
    *(_QWORD *)(v33 + 24) = v29;
  }
  if (!v31)
  {
LABEL_29:
    v4 = 0;
    v6 = 0;
    *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24) = v29;
LABEL_58:
    *(_QWORD *)(v0 + 40) = v4;
    *(_QWORD *)(v0 + 48) = v6;
    v60 = *(_QWORD *)(v0 + 16);
    v61 = *(unsigned __int8 **)(v60 + 8);
    if (v61 != *(unsigned __int8 **)(v60 + 16))
    {
      v63 = *v61;
      v62 = *v61;
      *(_QWORD *)(v60 + 8) = v61 + 1;
      if (v63 != 10)
      {
        v64 = *(_QWORD *)(v0 + 16);
        *(_BYTE *)(v64 + 32) = v62;
        *(_BYTE *)(v64 + 33) = 0;
      }
      v10 = *(_QWORD *)(v0 + 48);
      if (v10)
      {
        v11 = *(_QWORD *)(v0 + 40);
        return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v11, v10);
      }
      return swift_task_switch();
    }
    v93 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 56) = v93;
    v94 = specialized AsyncLineSequence.AsyncIterator.next();
    goto LABEL_98;
  }
  v34 = *((_QWORD *)v29 + 2);
  v35 = v34 - v31;
  if (v34 - v31 >= 0)
  {
    memmove(v29 + 32, &v29[v31 + 32], v34 - v31);
    *((_QWORD *)v29 + 2) = v35;
    goto LABEL_29;
  }
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_WORD *)(v0 + 98);
  if ((v1 & 0x100) != 0)
  {
    v3 = *(_QWORD *)(v0 + 48);
  }
  else
  {
    if (v1 != 10)
    {
      v2 = *(_QWORD *)(v0 + 16);
      *(_BYTE *)(v2 + 32) = v1;
      *(_BYTE *)(v2 + 33) = 0;
    }
    v3 = *(_QWORD *)(v0 + 48);
    if (!v3)
      return swift_task_switch();
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(v0 + 8))(*(_QWORD *)(v0 + 40), v3);
}

{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  char v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  size_t v32;
  uint64_t v33;
  uint64_t v34;

  v1 = *(_WORD *)(v0 + 100);
  if ((v1 & 0x100) != 0)
  {
    v10 = *(_QWORD *)(v0 + 16);
    v11 = *(char **)(v10 + 24);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v10 + 24) = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v33 = *(_QWORD *)(v0 + 16);
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
      *(_QWORD *)(v33 + 24) = v11;
    }
    v14 = *((_QWORD *)v11 + 2);
    v13 = *((_QWORD *)v11 + 3);
    if (v14 >= v13 >> 1)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, v11);
    v15 = *(_QWORD *)(v0 + 16);
    *((_QWORD *)v11 + 2) = v14 + 1;
    v11[v14 + 32] = -62;
    *(_QWORD *)(v15 + 24) = v11;
    swift_bridgeObjectRetain();
    v4 = static String._fromUTF8Repairing(_:)();
    v6 = v16;
    swift_bridgeObjectRelease();
    v17 = swift_isUniquelyReferenced_nonNull_native();
    v8 = *(_QWORD *)(v15 + 24);
    v9 = (_QWORD *)(*(_QWORD *)(v0 + 16) + 24);
    if (!v17)
      goto LABEL_5;
    goto LABEL_11;
  }
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(char **)(v2 + 24);
  if (v1 != 133)
  {
    v19 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v2 + 24) = v3;
    if ((v19 & 1) == 0)
    {
      v34 = *(_QWORD *)(v0 + 16);
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v3 + 2) + 1, 1, v3);
      *(_QWORD *)(v34 + 24) = v3;
    }
    v21 = *((_QWORD *)v3 + 2);
    v20 = *((_QWORD *)v3 + 3);
    v22 = v21 + 1;
    if (v21 >= v20 >> 1)
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v20 > 1), v21 + 1, 1, v3);
    v23 = *(_QWORD *)(v0 + 16);
    *((_QWORD *)v3 + 2) = v22;
    v3[v21 + 32] = -62;
    *(_QWORD *)(v23 + 24) = v3;
    v24 = *((_QWORD *)v3 + 3);
    v25 = v21 + 2;
    if (v25 > (uint64_t)(v24 >> 1))
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v24 > 1), v25, 1, v3);
    v26 = *(_QWORD *)(v0 + 16);
    *((_QWORD *)v3 + 2) = v25;
    v3[v22 + 32] = v1;
    goto LABEL_20;
  }
  if (*((_QWORD *)v3 + 2))
  {
    swift_bridgeObjectRetain();
    v4 = static String._fromUTF8Repairing(_:)();
    v6 = v5;
    swift_bridgeObjectRelease();
    v7 = swift_isUniquelyReferenced_nonNull_native();
    v8 = *(_QWORD *)(v2 + 24);
    v9 = (_QWORD *)(*(_QWORD *)(v0 + 16) + 24);
    if ((v7 & 1) == 0)
    {
LABEL_5:
      *v9 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(_QWORD *)(v8 + 24) >> 1);
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v4, v6);
    }
LABEL_11:
    specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v8 + 16));
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v4, v6);
  }
  v27 = swift_isUniquelyReferenced_nonNull_native();
  v3 = *(char **)(v2 + 24);
  if ((v27 & 1) == 0)
  {
    if (*((_QWORD *)v3 + 3) >= 2uLL)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
      v31 = (_QWORD *)swift_allocObject();
      v32 = _swift_stdlib_malloc_size(v31);
      v31[2] = 0;
      v31[3] = 2 * v32 - 64;
    }
    else
    {
      v31 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24) = v31;
    swift_bridgeObjectRelease();
    return swift_task_switch();
  }
  v28 = *((_QWORD *)v3 + 2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28, 1, v3);
  if (!v28)
  {
LABEL_28:
    v26 = *(_QWORD *)(v0 + 16);
LABEL_20:
    *(_QWORD *)(v26 + 24) = v3;
    return swift_task_switch();
  }
  v29 = *((_QWORD *)v3 + 2);
  v30 = v29 - v28;
  if (v29 - v28 >= 0)
  {
    memmove(v3 + 32, &v3[v28 + 32], v29 - v28);
    *((_QWORD *)v3 + 2) = v30;
    goto LABEL_28;
  }
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

{
  uint64_t v0;
  __int16 v1;
  _QWORD *v2;
  char *v3;
  char v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  char *v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  _QWORD *v43;
  size_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  char *v51;
  char *v52;
  unint64_t v53;
  char *v54;

  v1 = *(_WORD *)(v0 + 102);
  if ((v1 & 0x100) != 0)
  {
    v13 = *(_QWORD *)(v0 + 16);
    v14 = *(char **)(v13 + 24);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v13 + 24) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v45 = *(_QWORD *)(v0 + 16);
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v14 + 2) + 1, 1, v14);
      *(_QWORD *)(v45 + 24) = v14;
    }
    v17 = *((_QWORD *)v14 + 2);
    v16 = *((_QWORD *)v14 + 3);
    if (v17 >= v16 >> 1)
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1, v14);
    v18 = *(_QWORD *)(v0 + 16);
    *((_QWORD *)v14 + 2) = v17 + 1;
    v14[v17 + 32] = -30;
    *(_QWORD *)(v18 + 24) = v14;
    swift_bridgeObjectRetain();
    v7 = static String._fromUTF8Repairing(_:)();
    v9 = v19;
    swift_bridgeObjectRelease();
    v20 = swift_isUniquelyReferenced_nonNull_native();
    v11 = *(_QWORD *)(v18 + 24);
    v12 = (_QWORD *)(*(_QWORD *)(v0 + 16) + 24);
    if (!v20)
      goto LABEL_7;
    goto LABEL_13;
  }
  v2 = *(_QWORD **)(v0 + 16);
  if (v1 != 128)
  {
    v6 = (char *)v2[3];
    v22 = swift_isUniquelyReferenced_nonNull_native();
    v2[3] = v6;
    if ((v22 & 1) == 0)
    {
      v47 = *(_QWORD *)(v0 + 16);
      v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
      *(_QWORD *)(v47 + 24) = v6;
    }
    v24 = *((_QWORD *)v6 + 2);
    v23 = *((_QWORD *)v6 + 3);
    v25 = v24 + 1;
    if (v24 >= v23 >> 1)
      v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v23 > 1), v24 + 1, 1, v6);
    v26 = *(_QWORD *)(v0 + 16);
    *((_QWORD *)v6 + 2) = v25;
    v6[v24 + 32] = -30;
    *(_QWORD *)(v26 + 24) = v6;
    v27 = *((_QWORD *)v6 + 3);
    v28 = v24 + 2;
    if (v28 > (uint64_t)(v27 >> 1))
      v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v28, 1, v6);
    v29 = *(_QWORD *)(v0 + 16);
    *((_QWORD *)v6 + 2) = v28;
    v30 = &v6[v25];
    goto LABEL_31;
  }
  v3 = (char *)v2[1];
  if (v3 != (char *)v2[2])
  {
    v4 = *v3;
    LOBYTE(v1) = *v3;
    v2[1] = v3 + 1;
    v5 = *(_QWORD *)(v0 + 16);
    v6 = *(char **)(v5 + 24);
    if ((v4 & 0xFE) == 0xA8)
    {
      if (*((_QWORD *)v6 + 2))
      {
        swift_bridgeObjectRetain();
        v7 = static String._fromUTF8Repairing(_:)();
        v9 = v8;
        swift_bridgeObjectRelease();
        v10 = swift_isUniquelyReferenced_nonNull_native();
        v11 = *(_QWORD *)(v5 + 24);
        v12 = (_QWORD *)(*(_QWORD *)(v0 + 16) + 24);
        if ((v10 & 1) == 0)
        {
LABEL_7:
          *v12 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(_QWORD *)(v11 + 24) >> 1);
          swift_bridgeObjectRelease();
          return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v7, v9);
        }
LABEL_13:
        specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v11 + 16));
        return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v7, v9);
      }
      v41 = swift_isUniquelyReferenced_nonNull_native();
      v42 = *(_QWORD *)(v5 + 24);
      if ((v41 & 1) != 0)
      {
        specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v42 + 16));
      }
      else
      {
        if (*(_QWORD *)(v42 + 24) >= 2uLL)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
          v43 = (_QWORD *)swift_allocObject();
          v44 = _swift_stdlib_malloc_size(v43);
          v43[2] = 0;
          v43[3] = 2 * v44 - 64;
        }
        else
        {
          v43 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        }
        *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24) = v43;
        swift_bridgeObjectRelease();
      }
      return swift_task_switch();
    }
    v31 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v5 + 24) = v6;
    if ((v31 & 1) == 0)
    {
      v48 = *(_QWORD *)(v0 + 16);
      v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
      *(_QWORD *)(v48 + 24) = v6;
    }
    v32 = *((_QWORD *)v6 + 2);
    v33 = *((_QWORD *)v6 + 3);
    v34 = v32 + 1;
    if (v32 >= v33 >> 1)
    {
      v49 = v6;
      v50 = *((_QWORD *)v6 + 2);
      v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v33 > 1), v32 + 1, 1, v49);
      v32 = v50;
      v6 = v51;
    }
    v35 = *(_QWORD *)(v0 + 16);
    *((_QWORD *)v6 + 2) = v34;
    v6[v32 + 32] = -30;
    *(_QWORD *)(v35 + 24) = v6;
    v36 = *((_QWORD *)v6 + 3);
    v37 = v32 + 2;
    if ((uint64_t)(v32 + 2) > (uint64_t)(v36 >> 1))
    {
      v52 = v6;
      v53 = v32;
      v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v36 > 1), v32 + 2, 1, v52);
      v32 = v53;
      v6 = v54;
    }
    v38 = *(_QWORD *)(v0 + 16);
    *((_QWORD *)v6 + 2) = v37;
    v6[v34 + 32] = 0x80;
    *(_QWORD *)(v38 + 24) = v6;
    v39 = *((_QWORD *)v6 + 3);
    v40 = v32 + 3;
    if ((uint64_t)(v32 + 3) > (uint64_t)(v39 >> 1))
      v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v39 > 1), v32 + 3, 1, v6);
    v29 = *(_QWORD *)(v0 + 16);
    *((_QWORD *)v6 + 2) = v40;
    v30 = &v6[v37];
LABEL_31:
    v30[32] = v1;
    *(_QWORD *)(v29 + 24) = v6;
    return swift_task_switch();
  }
  v46 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v46;
  *v46 = v0;
  v46[1] = specialized AsyncLineSequence.AsyncIterator.next();
  return _AsyncBytesBuffer.reloadBufferAndNext()();
}

{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  _QWORD *v35;
  size_t v36;
  uint64_t v37;
  uint64_t v38;

  v1 = *(_WORD *)(v0 + 104);
  if ((v1 & 0x100) != 0)
  {
    v10 = *(_QWORD *)(v0 + 16);
    v11 = *(char **)(v10 + 24);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v10 + 24) = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v37 = *(_QWORD *)(v0 + 16);
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
      *(_QWORD *)(v37 + 24) = v11;
    }
    v14 = *((_QWORD *)v11 + 2);
    v13 = *((_QWORD *)v11 + 3);
    v15 = v14 + 1;
    if (v14 >= v13 >> 1)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, v11);
    v16 = *(_QWORD *)(v0 + 16);
    *((_QWORD *)v11 + 2) = v15;
    v11[v14 + 32] = -30;
    *(_QWORD *)(v16 + 24) = v11;
    v17 = *((_QWORD *)v11 + 3);
    v18 = v14 + 2;
    if (v18 > (uint64_t)(v17 >> 1))
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v17 > 1), v18, 1, v11);
    v19 = *(_QWORD *)(v0 + 16);
    *((_QWORD *)v11 + 2) = v18;
    v11[v15 + 32] = 0x80;
    *(_QWORD *)(v19 + 24) = v11;
    swift_bridgeObjectRetain();
    v4 = static String._fromUTF8Repairing(_:)();
    v6 = v20;
    swift_bridgeObjectRelease();
    v21 = swift_isUniquelyReferenced_nonNull_native();
    v8 = *(_QWORD *)(v19 + 24);
    v9 = (_QWORD *)(*(_QWORD *)(v0 + 16) + 24);
    if (!v21)
      goto LABEL_5;
    goto LABEL_13;
  }
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(char **)(v2 + 24);
  if ((v1 & 0xFE) == 0xA8)
  {
    if (*((_QWORD *)v3 + 2))
    {
      swift_bridgeObjectRetain();
      v4 = static String._fromUTF8Repairing(_:)();
      v6 = v5;
      swift_bridgeObjectRelease();
      v7 = swift_isUniquelyReferenced_nonNull_native();
      v8 = *(_QWORD *)(v2 + 24);
      v9 = (_QWORD *)(*(_QWORD *)(v0 + 16) + 24);
      if ((v7 & 1) == 0)
      {
LABEL_5:
        *v9 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(_QWORD *)(v8 + 24) >> 1);
        swift_bridgeObjectRelease();
        return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v4, v6);
      }
LABEL_13:
      specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v8 + 16));
      return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v4, v6);
    }
    v33 = swift_isUniquelyReferenced_nonNull_native();
    v34 = *(_QWORD *)(v2 + 24);
    if ((v33 & 1) != 0)
    {
      specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v34 + 16));
    }
    else
    {
      if (*(_QWORD *)(v34 + 24) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        v35 = (_QWORD *)swift_allocObject();
        v36 = _swift_stdlib_malloc_size(v35);
        v35[2] = 0;
        v35[3] = 2 * v36 - 64;
      }
      else
      {
        v35 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      }
      *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24) = v35;
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v23 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v2 + 24) = v3;
    if ((v23 & 1) == 0)
    {
      v38 = *(_QWORD *)(v0 + 16);
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v3 + 2) + 1, 1, v3);
      *(_QWORD *)(v38 + 24) = v3;
    }
    v25 = *((_QWORD *)v3 + 2);
    v24 = *((_QWORD *)v3 + 3);
    v26 = v25 + 1;
    if (v25 >= v24 >> 1)
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v24 > 1), v25 + 1, 1, v3);
    v27 = *(_QWORD *)(v0 + 16);
    *((_QWORD *)v3 + 2) = v26;
    v3[v25 + 32] = -30;
    *(_QWORD *)(v27 + 24) = v3;
    v28 = *((_QWORD *)v3 + 3);
    v29 = v25 + 2;
    if ((uint64_t)(v25 + 2) > (uint64_t)(v28 >> 1))
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v28 > 1), v25 + 2, 1, v3);
    v30 = *(_QWORD *)(v0 + 16);
    *((_QWORD *)v3 + 2) = v29;
    v3[v26 + 32] = 0x80;
    *(_QWORD *)(v30 + 24) = v3;
    v31 = *((_QWORD *)v3 + 3);
    if ((uint64_t)(v25 + 3) > (uint64_t)(v31 >> 1))
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v31 > 1), v25 + 3, 1, v3);
    v32 = *(_QWORD *)(v0 + 16);
    *((_QWORD *)v3 + 2) = v25 + 3;
    v3[v29 + 32] = v1;
    *(_QWORD *)(v32 + 24) = v3;
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 v19;
  int v20;
  uint64_t v21;
  char *v22;
  char v23;
  char *v24;
  int64_t v25;
  char v26;
  char *v27;
  uint64_t v28;
  int64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unsigned __int8 *v43;
  int v44;
  _QWORD *v45;
  unsigned __int8 *v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  size_t v55;
  _QWORD *v56;
  size_t v57;
  uint64_t v58;
  unsigned __int8 *v59;
  unsigned __int8 v60;
  int v61;
  uint64_t v62;
  char v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  char v70;
  char v71;
  unint64_t v72;
  unint64_t v73;
  int64_t v74;
  uint64_t v75;
  char *v76;
  size_t v77;
  char v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char v87;
  uint64_t v88;
  _QWORD *v89;
  size_t v90;
  _QWORD *v91;
  uint64_t (*v92)(__int16);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;

  v1 = *(_QWORD *)(v0 + 16);
  if ((*(_BYTE *)(v1 + 33) & 1) != 0)
  {
    v2 = *(unsigned __int8 **)(v1 + 8);
    if (v2 == *(unsigned __int8 **)(v1 + 16))
    {
      v91 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 24) = v91;
      v92 = specialized AsyncLineSequence.AsyncIterator.next();
      goto LABEL_99;
    }
    v3 = *v2;
    *(_QWORD *)(v1 + 8) = v2 + 1;
    v1 = *(_QWORD *)(v0 + 16);
  }
  else
  {
    v3 = *(unsigned __int8 *)(v1 + 32);
  }
  *(_WORD *)(v1 + 32) = 256;
  if (v3 != 13)
  {
    if ((v3 - 10) < 3)
    {
      v10 = *(_QWORD *)(v0 + 16);
      if (*(_QWORD *)(*(_QWORD *)(v10 + 24) + 16))
      {
        swift_bridgeObjectRetain();
        v11 = static String._fromUTF8Repairing(_:)();
        v13 = v12;
        swift_bridgeObjectRelease();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v15 = *(_QWORD *)(v10 + 24);
        goto LABEL_12;
      }
      v35 = swift_isUniquelyReferenced_nonNull_native();
      v24 = *(char **)(v10 + 24);
      if ((v35 & 1) != 0)
      {
        v36 = *(_QWORD *)(v0 + 16);
        v25 = *((_QWORD *)v24 + 2);
        v37 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v36 + 24) = v24;
        if ((v37 & 1) == 0)
        {
          v38 = *(_QWORD *)(v0 + 16);
          v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25, 1, v24);
          *(_QWORD *)(v38 + 24) = v24;
        }
LABEL_35:
        if (v25)
        {
          v39 = *((_QWORD *)v24 + 2);
          v40 = v39 - v25;
          if (v39 - v25 < 0)
            return _fatalErrorMessage(_:_:file:line:flags:)();
          memmove(v24 + 32, &v24[v25 + 32], v39 - v25);
          *((_QWORD *)v24 + 2) = v40;
        }
        *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24) = v24;
        return swift_task_switch();
      }
LABEL_54:
      if (*((_QWORD *)v24 + 3) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        v56 = (_QWORD *)swift_allocObject();
        v77 = _swift_stdlib_malloc_size(v56);
        v56[2] = 0;
        v56[3] = 2 * v77 - 64;
      }
      else
      {
        v56 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      }
      *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24) = v56;
LABEL_80:
      swift_bridgeObjectRelease();
      return swift_task_switch();
    }
    if (v3 == 226)
    {
      v42 = *(_QWORD *)(v0 + 16);
      v43 = *(unsigned __int8 **)(v42 + 8);
      if (v43 == *(unsigned __int8 **)(v42 + 16))
      {
        v91 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 80) = v91;
        v92 = specialized AsyncLineSequence.AsyncIterator.next();
      }
      else
      {
        v44 = *v43;
        v19 = *v43;
        *(_QWORD *)(v42 + 8) = v43 + 1;
        v45 = *(_QWORD **)(v0 + 16);
        if (v44 != 128)
        {
          v22 = (char *)v45[3];
          v71 = swift_isUniquelyReferenced_nonNull_native();
          v45[3] = v22;
          if ((v71 & 1) == 0)
          {
            v95 = *(_QWORD *)(v0 + 16);
            v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v22 + 2) + 1, 1, v22);
            *(_QWORD *)(v95 + 24) = v22;
          }
          v66 = *((_QWORD *)v22 + 2);
          v72 = *((_QWORD *)v22 + 3);
          v67 = v66 + 1;
          if (v66 >= v72 >> 1)
            v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v72 > 1), v66 + 1, 1, v22);
          v68 = *(_QWORD *)(v0 + 16);
          *((_QWORD *)v22 + 2) = v67;
          v69 = &v22[v66];
          v70 = -30;
LABEL_74:
          v69[32] = v70;
          *(_QWORD *)(v68 + 24) = v22;
          v73 = *((_QWORD *)v22 + 3);
          v74 = v66 + 2;
          if (v74 > (uint64_t)(v73 >> 1))
            v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v73 > 1), v74, 1, v22);
          v75 = *(_QWORD *)(v0 + 16);
          *((_QWORD *)v22 + 2) = v74;
          v76 = &v22[v67];
          goto LABEL_77;
        }
        v46 = (unsigned __int8 *)v45[1];
        if (v46 != (unsigned __int8 *)v45[2])
        {
          v47 = *v46;
          v19 = *v46;
          v45[1] = v46 + 1;
          v21 = *(_QWORD *)(v0 + 16);
          v22 = *(char **)(v21 + 24);
          if ((v47 & 0xFE) == 0xA8)
          {
            if (!*((_QWORD *)v22 + 2))
            {
              v87 = swift_isUniquelyReferenced_nonNull_native();
              v88 = *(_QWORD *)(v21 + 24);
              if ((v87 & 1) != 0)
              {
                specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v88 + 16));
                return swift_task_switch();
              }
              if (*(_QWORD *)(v88 + 24) >= 2uLL)
              {
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
                v89 = (_QWORD *)swift_allocObject();
                v90 = _swift_stdlib_malloc_size(v89);
                v89[2] = 0;
                v89[3] = 2 * v90 - 64;
              }
              else
              {
                v89 = (_QWORD *)MEMORY[0x1E0DEE9D8];
              }
              *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24) = v89;
              goto LABEL_80;
            }
            goto LABEL_46;
          }
          v78 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(v21 + 24) = v22;
          if ((v78 & 1) == 0)
          {
            v96 = *(_QWORD *)(v0 + 16);
            v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v22 + 2) + 1, 1, v22);
            *(_QWORD *)(v96 + 24) = v22;
          }
          v80 = *((_QWORD *)v22 + 2);
          v79 = *((_QWORD *)v22 + 3);
          v81 = v80 + 1;
          if (v80 >= v79 >> 1)
            v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v79 > 1), v80 + 1, 1, v22);
          v82 = *(_QWORD *)(v0 + 16);
          *((_QWORD *)v22 + 2) = v81;
          v22[v80 + 32] = -30;
          *(_QWORD *)(v82 + 24) = v22;
          v83 = *((_QWORD *)v22 + 3);
          v84 = v80 + 2;
          if ((uint64_t)(v80 + 2) > (uint64_t)(v83 >> 1))
            v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v83 > 1), v80 + 2, 1, v22);
          v85 = *(_QWORD *)(v0 + 16);
          *((_QWORD *)v22 + 2) = v84;
          v22[v81 + 32] = 0x80;
          *(_QWORD *)(v85 + 24) = v22;
          v86 = *((_QWORD *)v22 + 3);
          if ((uint64_t)(v80 + 3) > (uint64_t)(v86 >> 1))
            v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v86 > 1), v80 + 3, 1, v22);
          v75 = *(_QWORD *)(v0 + 16);
          *((_QWORD *)v22 + 2) = v80 + 3;
          v76 = &v22[v84];
LABEL_77:
          v76[32] = v19;
          *(_QWORD *)(v75 + 24) = v22;
          return swift_task_switch();
        }
        v91 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 88) = v91;
        v92 = specialized AsyncLineSequence.AsyncIterator.next();
      }
    }
    else
    {
      if (v3 != 194)
      {
        v49 = *(_QWORD *)(v0 + 16);
        v50 = *(char **)(v49 + 24);
        v51 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v49 + 24) = v50;
        if ((v51 & 1) == 0)
        {
          v93 = *(_QWORD *)(v0 + 16);
          v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v50 + 2) + 1, 1, v50);
          *(_QWORD *)(v93 + 24) = v50;
        }
        v53 = *((_QWORD *)v50 + 2);
        v52 = *((_QWORD *)v50 + 3);
        if (v53 >= v52 >> 1)
          v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v52 > 1), v53 + 1, 1, v50);
        v54 = *(_QWORD *)(v0 + 16);
        *((_QWORD *)v50 + 2) = v53 + 1;
        v50[v53 + 32] = v3;
        *(_QWORD *)(v54 + 24) = v50;
        return swift_task_switch();
      }
      v17 = *(_QWORD *)(v0 + 16);
      v18 = *(unsigned __int8 **)(v17 + 8);
      if (v18 != *(unsigned __int8 **)(v17 + 16))
      {
        v20 = *v18;
        v19 = *v18;
        *(_QWORD *)(v17 + 8) = v18 + 1;
        v21 = *(_QWORD *)(v0 + 16);
        v22 = *(char **)(v21 + 24);
        if (v20 == 133)
        {
          if (!*((_QWORD *)v22 + 2))
          {
            v23 = swift_isUniquelyReferenced_nonNull_native();
            v24 = *(char **)(v21 + 24);
            if ((v23 & 1) != 0)
            {
              v25 = *((_QWORD *)v24 + 2);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25, 1, v24);
              goto LABEL_35;
            }
            goto LABEL_54;
          }
LABEL_46:
          swift_bridgeObjectRetain();
          v11 = static String._fromUTF8Repairing(_:)();
          v13 = v48;
          swift_bridgeObjectRelease();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v15 = *(_QWORD *)(v21 + 24);
LABEL_12:
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v15 + 16));
          }
          else
          {
            v16 = (_QWORD *)(*(_QWORD *)(v0 + 16) + 24);
            *v16 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(_QWORD *)(v15 + 24) >> 1);
            swift_bridgeObjectRelease();
          }
          return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v11, v13);
        }
        v64 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v21 + 24) = v22;
        if ((v64 & 1) == 0)
        {
          v94 = *(_QWORD *)(v0 + 16);
          v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v22 + 2) + 1, 1, v22);
          *(_QWORD *)(v94 + 24) = v22;
        }
        v66 = *((_QWORD *)v22 + 2);
        v65 = *((_QWORD *)v22 + 3);
        v67 = v66 + 1;
        if (v66 >= v65 >> 1)
          v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v65 > 1), v66 + 1, 1, v22);
        v68 = *(_QWORD *)(v0 + 16);
        *((_QWORD *)v22 + 2) = v67;
        v69 = &v22[v66];
        v70 = -62;
        goto LABEL_74;
      }
      v91 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 72) = v91;
      v92 = specialized AsyncLineSequence.AsyncIterator.next();
    }
LABEL_99:
    *v91 = v0;
    v91[1] = v92;
    return _AsyncBytesBuffer.reloadBufferAndNext()();
  }
  v4 = *(_QWORD *)(v0 + 16);
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 16))
  {
    swift_bridgeObjectRetain();
    v5 = static String._fromUTF8Repairing(_:)();
    v7 = v6;
    swift_bridgeObjectRelease();
    v8 = swift_isUniquelyReferenced_nonNull_native();
    v9 = *(_QWORD *)(v4 + 24);
    if ((v8 & 1) != 0)
    {
      specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v9 + 16));
    }
    else
    {
      if (*(_QWORD *)(v9 + 24) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        v34 = (_QWORD *)swift_allocObject();
        v55 = _swift_stdlib_malloc_size(v34);
        v34[2] = 0;
        v34[3] = 2 * v55 - 64;
      }
      else
      {
        v34 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      }
      *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24) = v34;
      swift_bridgeObjectRelease();
    }
    goto LABEL_58;
  }
  v26 = swift_isUniquelyReferenced_nonNull_native();
  v27 = *(char **)(v4 + 24);
  if ((v26 & 1) == 0)
  {
    if (*((_QWORD *)v27 + 3) >= 2uLL)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
      v41 = (_QWORD *)swift_allocObject();
      v57 = _swift_stdlib_malloc_size(v41);
      v41[2] = 0;
      v41[3] = 2 * v57 - 64;
    }
    else
    {
      v41 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24) = v41;
    swift_bridgeObjectRelease();
    v5 = 0;
    v7 = 0;
    goto LABEL_58;
  }
  v28 = *(_QWORD *)(v0 + 16);
  v29 = *((_QWORD *)v27 + 2);
  v30 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v28 + 24) = v27;
  if ((v30 & 1) == 0)
  {
    v31 = *(_QWORD *)(v0 + 16);
    v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29, 1, v27);
    *(_QWORD *)(v31 + 24) = v27;
  }
  if (!v29)
  {
LABEL_28:
    v5 = 0;
    v7 = 0;
    *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24) = v27;
LABEL_58:
    *(_QWORD *)(v0 + 40) = v5;
    *(_QWORD *)(v0 + 48) = v7;
    v58 = *(_QWORD *)(v0 + 16);
    v59 = *(unsigned __int8 **)(v58 + 8);
    if (v59 != *(unsigned __int8 **)(v58 + 16))
    {
      v61 = *v59;
      v60 = *v59;
      *(_QWORD *)(v58 + 8) = v59 + 1;
      if (v61 != 10)
      {
        v62 = *(_QWORD *)(v0 + 16);
        *(_BYTE *)(v62 + 32) = v60;
        *(_BYTE *)(v62 + 33) = 0;
      }
      v13 = *(_QWORD *)(v0 + 48);
      if (v13)
      {
        v11 = *(_QWORD *)(v0 + 40);
        return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v11, v13);
      }
      return swift_task_switch();
    }
    v91 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 56) = v91;
    v92 = specialized AsyncLineSequence.AsyncIterator.next();
    goto LABEL_99;
  }
  v32 = *((_QWORD *)v27 + 2);
  v33 = v32 - v29;
  if (v32 - v29 >= 0)
  {
    memmove(v27 + 32, &v27[v29 + 32], v32 - v29);
    *((_QWORD *)v27 + 2) = v33;
    goto LABEL_28;
  }
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

{
  uint64_t v0;
  __int16 v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 v21;
  int v22;
  uint64_t v23;
  char *v24;
  char v25;
  char *v26;
  int64_t v27;
  char v28;
  char *v29;
  uint64_t v30;
  int64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unsigned __int8 *v45;
  int v46;
  _QWORD *v47;
  unsigned __int8 *v48;
  unsigned __int8 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  size_t v57;
  _QWORD *v58;
  size_t v59;
  uint64_t v60;
  unsigned __int8 *v61;
  unsigned __int8 v62;
  int v63;
  uint64_t v64;
  char v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  char v72;
  char v73;
  unint64_t v74;
  unint64_t v75;
  int64_t v76;
  uint64_t v77;
  char *v78;
  size_t v79;
  char v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char v89;
  uint64_t v90;
  _QWORD *v91;
  size_t v92;
  _QWORD *v93;
  uint64_t (*v94)(__int16);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  v1 = *(_WORD *)(v0 + 96);
  *(_WORD *)(*(_QWORD *)(v0 + 16) + 32) = 256;
  if ((v1 & 0x100) != 0)
  {
    v9 = *(_QWORD *)(v0 + 16);
    v10 = *(_QWORD *)(*(_QWORD *)(v9 + 24) + 16);
    if (!v10)
    {
      v11 = 0;
      return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v11, v10);
    }
    swift_bridgeObjectRetain();
    v11 = static String._fromUTF8Repairing(_:)();
    v10 = v12;
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *(_QWORD *)(v9 + 24);
    v15 = (_QWORD *)(*(_QWORD *)(v0 + 16) + 24);
    if (!isUniquelyReferenced_nonNull_native)
      goto LABEL_13;
    goto LABEL_8;
  }
  v2 = *(unsigned __int8 *)(v0 + 96);
  if (v2 != 13)
  {
    if ((v2 - 10) < 3)
    {
      v16 = *(_QWORD *)(v0 + 16);
      if (*(_QWORD *)(*(_QWORD *)(v16 + 24) + 16))
      {
        swift_bridgeObjectRetain();
        v11 = static String._fromUTF8Repairing(_:)();
        v10 = v17;
        swift_bridgeObjectRelease();
        v18 = swift_isUniquelyReferenced_nonNull_native();
        v14 = *(_QWORD *)(v16 + 24);
        goto LABEL_12;
      }
      v37 = swift_isUniquelyReferenced_nonNull_native();
      v26 = *(char **)(v16 + 24);
      if ((v37 & 1) != 0)
      {
        v38 = *(_QWORD *)(v0 + 16);
        v27 = *((_QWORD *)v26 + 2);
        v39 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v38 + 24) = v26;
        if ((v39 & 1) == 0)
        {
          v40 = *(_QWORD *)(v0 + 16);
          v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27, 1, v26);
          *(_QWORD *)(v40 + 24) = v26;
        }
LABEL_35:
        if (v27)
        {
          v41 = *((_QWORD *)v26 + 2);
          v42 = v41 - v27;
          if (v41 - v27 < 0)
            return _fatalErrorMessage(_:_:file:line:flags:)();
          memmove(v26 + 32, &v26[v27 + 32], v41 - v27);
          *((_QWORD *)v26 + 2) = v42;
        }
        *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24) = v26;
        return swift_task_switch();
      }
LABEL_54:
      if (*((_QWORD *)v26 + 3) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        v58 = (_QWORD *)swift_allocObject();
        v79 = _swift_stdlib_malloc_size(v58);
        v58[2] = 0;
        v58[3] = 2 * v79 - 64;
      }
      else
      {
        v58 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      }
      *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24) = v58;
LABEL_80:
      swift_bridgeObjectRelease();
      return swift_task_switch();
    }
    if (v2 == 226)
    {
      v44 = *(_QWORD *)(v0 + 16);
      v45 = *(unsigned __int8 **)(v44 + 8);
      if (v45 == *(unsigned __int8 **)(v44 + 16))
      {
        v93 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 80) = v93;
        v94 = specialized AsyncLineSequence.AsyncIterator.next();
      }
      else
      {
        v46 = *v45;
        v21 = *v45;
        *(_QWORD *)(v44 + 8) = v45 + 1;
        v47 = *(_QWORD **)(v0 + 16);
        if (v46 != 128)
        {
          v24 = (char *)v47[3];
          v73 = swift_isUniquelyReferenced_nonNull_native();
          v47[3] = v24;
          if ((v73 & 1) == 0)
          {
            v97 = *(_QWORD *)(v0 + 16);
            v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v24 + 2) + 1, 1, v24);
            *(_QWORD *)(v97 + 24) = v24;
          }
          v68 = *((_QWORD *)v24 + 2);
          v74 = *((_QWORD *)v24 + 3);
          v69 = v68 + 1;
          if (v68 >= v74 >> 1)
            v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v74 > 1), v68 + 1, 1, v24);
          v70 = *(_QWORD *)(v0 + 16);
          *((_QWORD *)v24 + 2) = v69;
          v71 = &v24[v68];
          v72 = -30;
LABEL_74:
          v71[32] = v72;
          *(_QWORD *)(v70 + 24) = v24;
          v75 = *((_QWORD *)v24 + 3);
          v76 = v68 + 2;
          if (v76 > (uint64_t)(v75 >> 1))
            v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v75 > 1), v76, 1, v24);
          v77 = *(_QWORD *)(v0 + 16);
          *((_QWORD *)v24 + 2) = v76;
          v78 = &v24[v69];
          goto LABEL_77;
        }
        v48 = (unsigned __int8 *)v47[1];
        if (v48 != (unsigned __int8 *)v47[2])
        {
          v49 = *v48;
          v21 = *v48;
          v47[1] = v48 + 1;
          v23 = *(_QWORD *)(v0 + 16);
          v24 = *(char **)(v23 + 24);
          if ((v49 & 0xFE) == 0xA8)
          {
            if (!*((_QWORD *)v24 + 2))
            {
              v89 = swift_isUniquelyReferenced_nonNull_native();
              v90 = *(_QWORD *)(v23 + 24);
              if ((v89 & 1) != 0)
              {
                specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v90 + 16));
                return swift_task_switch();
              }
              if (*(_QWORD *)(v90 + 24) >= 2uLL)
              {
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
                v91 = (_QWORD *)swift_allocObject();
                v92 = _swift_stdlib_malloc_size(v91);
                v91[2] = 0;
                v91[3] = 2 * v92 - 64;
              }
              else
              {
                v91 = (_QWORD *)MEMORY[0x1E0DEE9D8];
              }
              *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24) = v91;
              goto LABEL_80;
            }
            goto LABEL_46;
          }
          v80 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(v23 + 24) = v24;
          if ((v80 & 1) == 0)
          {
            v98 = *(_QWORD *)(v0 + 16);
            v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v24 + 2) + 1, 1, v24);
            *(_QWORD *)(v98 + 24) = v24;
          }
          v82 = *((_QWORD *)v24 + 2);
          v81 = *((_QWORD *)v24 + 3);
          v83 = v82 + 1;
          if (v82 >= v81 >> 1)
            v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v81 > 1), v82 + 1, 1, v24);
          v84 = *(_QWORD *)(v0 + 16);
          *((_QWORD *)v24 + 2) = v83;
          v24[v82 + 32] = -30;
          *(_QWORD *)(v84 + 24) = v24;
          v85 = *((_QWORD *)v24 + 3);
          v86 = v82 + 2;
          if ((uint64_t)(v82 + 2) > (uint64_t)(v85 >> 1))
            v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v85 > 1), v82 + 2, 1, v24);
          v87 = *(_QWORD *)(v0 + 16);
          *((_QWORD *)v24 + 2) = v86;
          v24[v83 + 32] = 0x80;
          *(_QWORD *)(v87 + 24) = v24;
          v88 = *((_QWORD *)v24 + 3);
          if ((uint64_t)(v82 + 3) > (uint64_t)(v88 >> 1))
            v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v88 > 1), v82 + 3, 1, v24);
          v77 = *(_QWORD *)(v0 + 16);
          *((_QWORD *)v24 + 2) = v82 + 3;
          v78 = &v24[v86];
LABEL_77:
          v78[32] = v21;
          *(_QWORD *)(v77 + 24) = v24;
          return swift_task_switch();
        }
        v93 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 88) = v93;
        v94 = specialized AsyncLineSequence.AsyncIterator.next();
      }
    }
    else
    {
      if (v2 != 194)
      {
        v51 = *(_QWORD *)(v0 + 16);
        v52 = *(char **)(v51 + 24);
        v53 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v51 + 24) = v52;
        if ((v53 & 1) == 0)
        {
          v95 = *(_QWORD *)(v0 + 16);
          v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v52 + 2) + 1, 1, v52);
          *(_QWORD *)(v95 + 24) = v52;
        }
        v55 = *((_QWORD *)v52 + 2);
        v54 = *((_QWORD *)v52 + 3);
        if (v55 >= v54 >> 1)
          v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v54 > 1), v55 + 1, 1, v52);
        v56 = *(_QWORD *)(v0 + 16);
        *((_QWORD *)v52 + 2) = v55 + 1;
        v52[v55 + 32] = v2;
        *(_QWORD *)(v56 + 24) = v52;
        return swift_task_switch();
      }
      v19 = *(_QWORD *)(v0 + 16);
      v20 = *(unsigned __int8 **)(v19 + 8);
      if (v20 != *(unsigned __int8 **)(v19 + 16))
      {
        v22 = *v20;
        v21 = *v20;
        *(_QWORD *)(v19 + 8) = v20 + 1;
        v23 = *(_QWORD *)(v0 + 16);
        v24 = *(char **)(v23 + 24);
        if (v22 == 133)
        {
          if (!*((_QWORD *)v24 + 2))
          {
            v25 = swift_isUniquelyReferenced_nonNull_native();
            v26 = *(char **)(v23 + 24);
            if ((v25 & 1) != 0)
            {
              v27 = *((_QWORD *)v26 + 2);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27, 1, v26);
              goto LABEL_35;
            }
            goto LABEL_54;
          }
LABEL_46:
          swift_bridgeObjectRetain();
          v11 = static String._fromUTF8Repairing(_:)();
          v10 = v50;
          swift_bridgeObjectRelease();
          v18 = swift_isUniquelyReferenced_nonNull_native();
          v14 = *(_QWORD *)(v23 + 24);
LABEL_12:
          v15 = (_QWORD *)(*(_QWORD *)(v0 + 16) + 24);
          if ((v18 & 1) == 0)
          {
LABEL_13:
            *v15 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(_QWORD *)(v14 + 24) >> 1);
            swift_bridgeObjectRelease();
            return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v11, v10);
          }
LABEL_8:
          specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v14 + 16));
          return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v11, v10);
        }
        v66 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v23 + 24) = v24;
        if ((v66 & 1) == 0)
        {
          v96 = *(_QWORD *)(v0 + 16);
          v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v24 + 2) + 1, 1, v24);
          *(_QWORD *)(v96 + 24) = v24;
        }
        v68 = *((_QWORD *)v24 + 2);
        v67 = *((_QWORD *)v24 + 3);
        v69 = v68 + 1;
        if (v68 >= v67 >> 1)
          v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v67 > 1), v68 + 1, 1, v24);
        v70 = *(_QWORD *)(v0 + 16);
        *((_QWORD *)v24 + 2) = v69;
        v71 = &v24[v68];
        v72 = -62;
        goto LABEL_74;
      }
      v93 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 72) = v93;
      v94 = specialized AsyncLineSequence.AsyncIterator.next();
    }
LABEL_98:
    *v93 = v0;
    v93[1] = v94;
    return _AsyncBytesBuffer.reloadBufferAndNext()();
  }
  v3 = *(_QWORD *)(v0 + 16);
  if (*(_QWORD *)(*(_QWORD *)(v3 + 24) + 16))
  {
    swift_bridgeObjectRetain();
    v4 = static String._fromUTF8Repairing(_:)();
    v6 = v5;
    swift_bridgeObjectRelease();
    v7 = swift_isUniquelyReferenced_nonNull_native();
    v8 = *(_QWORD *)(v3 + 24);
    if ((v7 & 1) != 0)
    {
      specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v8 + 16));
    }
    else
    {
      if (*(_QWORD *)(v8 + 24) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        v36 = (_QWORD *)swift_allocObject();
        v57 = _swift_stdlib_malloc_size(v36);
        v36[2] = 0;
        v36[3] = 2 * v57 - 64;
      }
      else
      {
        v36 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      }
      *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24) = v36;
      swift_bridgeObjectRelease();
    }
    goto LABEL_58;
  }
  v28 = swift_isUniquelyReferenced_nonNull_native();
  v29 = *(char **)(v3 + 24);
  if ((v28 & 1) == 0)
  {
    if (*((_QWORD *)v29 + 3) >= 2uLL)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
      v43 = (_QWORD *)swift_allocObject();
      v59 = _swift_stdlib_malloc_size(v43);
      v43[2] = 0;
      v43[3] = 2 * v59 - 64;
    }
    else
    {
      v43 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24) = v43;
    swift_bridgeObjectRelease();
    v4 = 0;
    v6 = 0;
    goto LABEL_58;
  }
  v30 = *(_QWORD *)(v0 + 16);
  v31 = *((_QWORD *)v29 + 2);
  v32 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v30 + 24) = v29;
  if ((v32 & 1) == 0)
  {
    v33 = *(_QWORD *)(v0 + 16);
    v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31, 1, v29);
    *(_QWORD *)(v33 + 24) = v29;
  }
  if (!v31)
  {
LABEL_29:
    v4 = 0;
    v6 = 0;
    *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24) = v29;
LABEL_58:
    *(_QWORD *)(v0 + 40) = v4;
    *(_QWORD *)(v0 + 48) = v6;
    v60 = *(_QWORD *)(v0 + 16);
    v61 = *(unsigned __int8 **)(v60 + 8);
    if (v61 != *(unsigned __int8 **)(v60 + 16))
    {
      v63 = *v61;
      v62 = *v61;
      *(_QWORD *)(v60 + 8) = v61 + 1;
      if (v63 != 10)
      {
        v64 = *(_QWORD *)(v0 + 16);
        *(_BYTE *)(v64 + 32) = v62;
        *(_BYTE *)(v64 + 33) = 0;
      }
      v10 = *(_QWORD *)(v0 + 48);
      if (v10)
      {
        v11 = *(_QWORD *)(v0 + 40);
        return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v11, v10);
      }
      return swift_task_switch();
    }
    v93 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 56) = v93;
    v94 = specialized AsyncLineSequence.AsyncIterator.next();
    goto LABEL_98;
  }
  v34 = *((_QWORD *)v29 + 2);
  v35 = v34 - v31;
  if (v34 - v31 >= 0)
  {
    memmove(v29 + 32, &v29[v31 + 32], v34 - v31);
    *((_QWORD *)v29 + 2) = v35;
    goto LABEL_29;
  }
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_WORD *)(v0 + 98);
  if ((v1 & 0x100) != 0)
  {
    v3 = *(_QWORD *)(v0 + 48);
  }
  else
  {
    if (v1 != 10)
    {
      v2 = *(_QWORD *)(v0 + 16);
      *(_BYTE *)(v2 + 32) = v1;
      *(_BYTE *)(v2 + 33) = 0;
    }
    v3 = *(_QWORD *)(v0 + 48);
    if (!v3)
      return swift_task_switch();
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(v0 + 8))(*(_QWORD *)(v0 + 40), v3);
}

{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  char v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  size_t v32;
  uint64_t v33;
  uint64_t v34;

  v1 = *(_WORD *)(v0 + 100);
  if ((v1 & 0x100) != 0)
  {
    v10 = *(_QWORD *)(v0 + 16);
    v11 = *(char **)(v10 + 24);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v10 + 24) = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v33 = *(_QWORD *)(v0 + 16);
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
      *(_QWORD *)(v33 + 24) = v11;
    }
    v14 = *((_QWORD *)v11 + 2);
    v13 = *((_QWORD *)v11 + 3);
    if (v14 >= v13 >> 1)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, v11);
    v15 = *(_QWORD *)(v0 + 16);
    *((_QWORD *)v11 + 2) = v14 + 1;
    v11[v14 + 32] = -62;
    *(_QWORD *)(v15 + 24) = v11;
    swift_bridgeObjectRetain();
    v4 = static String._fromUTF8Repairing(_:)();
    v6 = v16;
    swift_bridgeObjectRelease();
    v17 = swift_isUniquelyReferenced_nonNull_native();
    v8 = *(_QWORD *)(v15 + 24);
    v9 = (_QWORD *)(*(_QWORD *)(v0 + 16) + 24);
    if (!v17)
      goto LABEL_5;
    goto LABEL_11;
  }
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(char **)(v2 + 24);
  if (v1 != 133)
  {
    v19 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v2 + 24) = v3;
    if ((v19 & 1) == 0)
    {
      v34 = *(_QWORD *)(v0 + 16);
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v3 + 2) + 1, 1, v3);
      *(_QWORD *)(v34 + 24) = v3;
    }
    v21 = *((_QWORD *)v3 + 2);
    v20 = *((_QWORD *)v3 + 3);
    v22 = v21 + 1;
    if (v21 >= v20 >> 1)
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v20 > 1), v21 + 1, 1, v3);
    v23 = *(_QWORD *)(v0 + 16);
    *((_QWORD *)v3 + 2) = v22;
    v3[v21 + 32] = -62;
    *(_QWORD *)(v23 + 24) = v3;
    v24 = *((_QWORD *)v3 + 3);
    v25 = v21 + 2;
    if (v25 > (uint64_t)(v24 >> 1))
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v24 > 1), v25, 1, v3);
    v26 = *(_QWORD *)(v0 + 16);
    *((_QWORD *)v3 + 2) = v25;
    v3[v22 + 32] = v1;
    goto LABEL_20;
  }
  if (*((_QWORD *)v3 + 2))
  {
    swift_bridgeObjectRetain();
    v4 = static String._fromUTF8Repairing(_:)();
    v6 = v5;
    swift_bridgeObjectRelease();
    v7 = swift_isUniquelyReferenced_nonNull_native();
    v8 = *(_QWORD *)(v2 + 24);
    v9 = (_QWORD *)(*(_QWORD *)(v0 + 16) + 24);
    if ((v7 & 1) == 0)
    {
LABEL_5:
      *v9 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(_QWORD *)(v8 + 24) >> 1);
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v4, v6);
    }
LABEL_11:
    specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v8 + 16));
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v4, v6);
  }
  v27 = swift_isUniquelyReferenced_nonNull_native();
  v3 = *(char **)(v2 + 24);
  if ((v27 & 1) == 0)
  {
    if (*((_QWORD *)v3 + 3) >= 2uLL)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
      v31 = (_QWORD *)swift_allocObject();
      v32 = _swift_stdlib_malloc_size(v31);
      v31[2] = 0;
      v31[3] = 2 * v32 - 64;
    }
    else
    {
      v31 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24) = v31;
    swift_bridgeObjectRelease();
    return swift_task_switch();
  }
  v28 = *((_QWORD *)v3 + 2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28, 1, v3);
  if (!v28)
  {
LABEL_28:
    v26 = *(_QWORD *)(v0 + 16);
LABEL_20:
    *(_QWORD *)(v26 + 24) = v3;
    return swift_task_switch();
  }
  v29 = *((_QWORD *)v3 + 2);
  v30 = v29 - v28;
  if (v29 - v28 >= 0)
  {
    memmove(v3 + 32, &v3[v28 + 32], v29 - v28);
    *((_QWORD *)v3 + 2) = v30;
    goto LABEL_28;
  }
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

{
  uint64_t v0;
  __int16 v1;
  _QWORD *v2;
  char *v3;
  char v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  char *v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  _QWORD *v43;
  size_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  char *v51;
  char *v52;
  unint64_t v53;
  char *v54;

  v1 = *(_WORD *)(v0 + 102);
  if ((v1 & 0x100) != 0)
  {
    v13 = *(_QWORD *)(v0 + 16);
    v14 = *(char **)(v13 + 24);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v13 + 24) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v45 = *(_QWORD *)(v0 + 16);
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v14 + 2) + 1, 1, v14);
      *(_QWORD *)(v45 + 24) = v14;
    }
    v17 = *((_QWORD *)v14 + 2);
    v16 = *((_QWORD *)v14 + 3);
    if (v17 >= v16 >> 1)
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1, v14);
    v18 = *(_QWORD *)(v0 + 16);
    *((_QWORD *)v14 + 2) = v17 + 1;
    v14[v17 + 32] = -30;
    *(_QWORD *)(v18 + 24) = v14;
    swift_bridgeObjectRetain();
    v7 = static String._fromUTF8Repairing(_:)();
    v9 = v19;
    swift_bridgeObjectRelease();
    v20 = swift_isUniquelyReferenced_nonNull_native();
    v11 = *(_QWORD *)(v18 + 24);
    v12 = (_QWORD *)(*(_QWORD *)(v0 + 16) + 24);
    if (!v20)
      goto LABEL_7;
    goto LABEL_13;
  }
  v2 = *(_QWORD **)(v0 + 16);
  if (v1 != 128)
  {
    v6 = (char *)v2[3];
    v22 = swift_isUniquelyReferenced_nonNull_native();
    v2[3] = v6;
    if ((v22 & 1) == 0)
    {
      v47 = *(_QWORD *)(v0 + 16);
      v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
      *(_QWORD *)(v47 + 24) = v6;
    }
    v24 = *((_QWORD *)v6 + 2);
    v23 = *((_QWORD *)v6 + 3);
    v25 = v24 + 1;
    if (v24 >= v23 >> 1)
      v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v23 > 1), v24 + 1, 1, v6);
    v26 = *(_QWORD *)(v0 + 16);
    *((_QWORD *)v6 + 2) = v25;
    v6[v24 + 32] = -30;
    *(_QWORD *)(v26 + 24) = v6;
    v27 = *((_QWORD *)v6 + 3);
    v28 = v24 + 2;
    if (v28 > (uint64_t)(v27 >> 1))
      v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v28, 1, v6);
    v29 = *(_QWORD *)(v0 + 16);
    *((_QWORD *)v6 + 2) = v28;
    v30 = &v6[v25];
    goto LABEL_31;
  }
  v3 = (char *)v2[1];
  if (v3 != (char *)v2[2])
  {
    v4 = *v3;
    LOBYTE(v1) = *v3;
    v2[1] = v3 + 1;
    v5 = *(_QWORD *)(v0 + 16);
    v6 = *(char **)(v5 + 24);
    if ((v4 & 0xFE) == 0xA8)
    {
      if (*((_QWORD *)v6 + 2))
      {
        swift_bridgeObjectRetain();
        v7 = static String._fromUTF8Repairing(_:)();
        v9 = v8;
        swift_bridgeObjectRelease();
        v10 = swift_isUniquelyReferenced_nonNull_native();
        v11 = *(_QWORD *)(v5 + 24);
        v12 = (_QWORD *)(*(_QWORD *)(v0 + 16) + 24);
        if ((v10 & 1) == 0)
        {
LABEL_7:
          *v12 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(_QWORD *)(v11 + 24) >> 1);
          swift_bridgeObjectRelease();
          return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v7, v9);
        }
LABEL_13:
        specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v11 + 16));
        return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v7, v9);
      }
      v41 = swift_isUniquelyReferenced_nonNull_native();
      v42 = *(_QWORD *)(v5 + 24);
      if ((v41 & 1) != 0)
      {
        specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v42 + 16));
      }
      else
      {
        if (*(_QWORD *)(v42 + 24) >= 2uLL)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
          v43 = (_QWORD *)swift_allocObject();
          v44 = _swift_stdlib_malloc_size(v43);
          v43[2] = 0;
          v43[3] = 2 * v44 - 64;
        }
        else
        {
          v43 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        }
        *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24) = v43;
        swift_bridgeObjectRelease();
      }
      return swift_task_switch();
    }
    v31 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v5 + 24) = v6;
    if ((v31 & 1) == 0)
    {
      v48 = *(_QWORD *)(v0 + 16);
      v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
      *(_QWORD *)(v48 + 24) = v6;
    }
    v32 = *((_QWORD *)v6 + 2);
    v33 = *((_QWORD *)v6 + 3);
    v34 = v32 + 1;
    if (v32 >= v33 >> 1)
    {
      v49 = v6;
      v50 = *((_QWORD *)v6 + 2);
      v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v33 > 1), v32 + 1, 1, v49);
      v32 = v50;
      v6 = v51;
    }
    v35 = *(_QWORD *)(v0 + 16);
    *((_QWORD *)v6 + 2) = v34;
    v6[v32 + 32] = -30;
    *(_QWORD *)(v35 + 24) = v6;
    v36 = *((_QWORD *)v6 + 3);
    v37 = v32 + 2;
    if ((uint64_t)(v32 + 2) > (uint64_t)(v36 >> 1))
    {
      v52 = v6;
      v53 = v32;
      v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v36 > 1), v32 + 2, 1, v52);
      v32 = v53;
      v6 = v54;
    }
    v38 = *(_QWORD *)(v0 + 16);
    *((_QWORD *)v6 + 2) = v37;
    v6[v34 + 32] = 0x80;
    *(_QWORD *)(v38 + 24) = v6;
    v39 = *((_QWORD *)v6 + 3);
    v40 = v32 + 3;
    if ((uint64_t)(v32 + 3) > (uint64_t)(v39 >> 1))
      v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v39 > 1), v32 + 3, 1, v6);
    v29 = *(_QWORD *)(v0 + 16);
    *((_QWORD *)v6 + 2) = v40;
    v30 = &v6[v37];
LABEL_31:
    v30[32] = v1;
    *(_QWORD *)(v29 + 24) = v6;
    return swift_task_switch();
  }
  v46 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v46;
  *v46 = v0;
  v46[1] = specialized AsyncLineSequence.AsyncIterator.next();
  return _AsyncBytesBuffer.reloadBufferAndNext()();
}

{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  _QWORD *v35;
  size_t v36;
  uint64_t v37;
  uint64_t v38;

  v1 = *(_WORD *)(v0 + 104);
  if ((v1 & 0x100) != 0)
  {
    v10 = *(_QWORD *)(v0 + 16);
    v11 = *(char **)(v10 + 24);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v10 + 24) = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v37 = *(_QWORD *)(v0 + 16);
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
      *(_QWORD *)(v37 + 24) = v11;
    }
    v14 = *((_QWORD *)v11 + 2);
    v13 = *((_QWORD *)v11 + 3);
    v15 = v14 + 1;
    if (v14 >= v13 >> 1)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, v11);
    v16 = *(_QWORD *)(v0 + 16);
    *((_QWORD *)v11 + 2) = v15;
    v11[v14 + 32] = -30;
    *(_QWORD *)(v16 + 24) = v11;
    v17 = *((_QWORD *)v11 + 3);
    v18 = v14 + 2;
    if (v18 > (uint64_t)(v17 >> 1))
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v17 > 1), v18, 1, v11);
    v19 = *(_QWORD *)(v0 + 16);
    *((_QWORD *)v11 + 2) = v18;
    v11[v15 + 32] = 0x80;
    *(_QWORD *)(v19 + 24) = v11;
    swift_bridgeObjectRetain();
    v4 = static String._fromUTF8Repairing(_:)();
    v6 = v20;
    swift_bridgeObjectRelease();
    v21 = swift_isUniquelyReferenced_nonNull_native();
    v8 = *(_QWORD *)(v19 + 24);
    v9 = (_QWORD *)(*(_QWORD *)(v0 + 16) + 24);
    if (!v21)
      goto LABEL_5;
    goto LABEL_13;
  }
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(char **)(v2 + 24);
  if ((v1 & 0xFE) == 0xA8)
  {
    if (*((_QWORD *)v3 + 2))
    {
      swift_bridgeObjectRetain();
      v4 = static String._fromUTF8Repairing(_:)();
      v6 = v5;
      swift_bridgeObjectRelease();
      v7 = swift_isUniquelyReferenced_nonNull_native();
      v8 = *(_QWORD *)(v2 + 24);
      v9 = (_QWORD *)(*(_QWORD *)(v0 + 16) + 24);
      if ((v7 & 1) == 0)
      {
LABEL_5:
        *v9 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(_QWORD *)(v8 + 24) >> 1);
        swift_bridgeObjectRelease();
        return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v4, v6);
      }
LABEL_13:
      specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v8 + 16));
      return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v4, v6);
    }
    v33 = swift_isUniquelyReferenced_nonNull_native();
    v34 = *(_QWORD *)(v2 + 24);
    if ((v33 & 1) != 0)
    {
      specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v34 + 16));
    }
    else
    {
      if (*(_QWORD *)(v34 + 24) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        v35 = (_QWORD *)swift_allocObject();
        v36 = _swift_stdlib_malloc_size(v35);
        v35[2] = 0;
        v35[3] = 2 * v36 - 64;
      }
      else
      {
        v35 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      }
      *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24) = v35;
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v23 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v2 + 24) = v3;
    if ((v23 & 1) == 0)
    {
      v38 = *(_QWORD *)(v0 + 16);
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v3 + 2) + 1, 1, v3);
      *(_QWORD *)(v38 + 24) = v3;
    }
    v25 = *((_QWORD *)v3 + 2);
    v24 = *((_QWORD *)v3 + 3);
    v26 = v25 + 1;
    if (v25 >= v24 >> 1)
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v24 > 1), v25 + 1, 1, v3);
    v27 = *(_QWORD *)(v0 + 16);
    *((_QWORD *)v3 + 2) = v26;
    v3[v25 + 32] = -30;
    *(_QWORD *)(v27 + 24) = v3;
    v28 = *((_QWORD *)v3 + 3);
    v29 = v25 + 2;
    if ((uint64_t)(v25 + 2) > (uint64_t)(v28 >> 1))
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v28 > 1), v25 + 2, 1, v3);
    v30 = *(_QWORD *)(v0 + 16);
    *((_QWORD *)v3 + 2) = v29;
    v3[v26 + 32] = 0x80;
    *(_QWORD *)(v30 + 24) = v3;
    v31 = *((_QWORD *)v3 + 3);
    if ((uint64_t)(v25 + 3) > (uint64_t)(v31 >> 1))
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v31 > 1), v25 + 3, 1, v3);
    v32 = *(_QWORD *)(v0 + 16);
    *((_QWORD *)v3 + 2) = v25 + 3;
    v3[v29 + 32] = v1;
    *(_QWORD *)(v32 + 24) = v3;
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 v19;
  int v20;
  uint64_t v21;
  char *v22;
  char v23;
  char *v24;
  int64_t v25;
  char v26;
  char *v27;
  uint64_t v28;
  int64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unsigned __int8 *v43;
  int v44;
  _QWORD *v45;
  unsigned __int8 *v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  size_t v55;
  _QWORD *v56;
  size_t v57;
  uint64_t v58;
  unsigned __int8 *v59;
  unsigned __int8 v60;
  int v61;
  uint64_t v62;
  char v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  char v70;
  char v71;
  unint64_t v72;
  unint64_t v73;
  int64_t v74;
  uint64_t v75;
  char *v76;
  size_t v77;
  char v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char v87;
  uint64_t v88;
  _QWORD *v89;
  size_t v90;
  _QWORD *v91;
  uint64_t (*v92)(__int16);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;

  v1 = *(_QWORD *)(v0 + 16);
  if ((*(_BYTE *)(v1 + 33) & 1) != 0)
  {
    v2 = *(unsigned __int8 **)(v1 + 8);
    if (v2 == *(unsigned __int8 **)(v1 + 16))
    {
      v91 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 24) = v91;
      v92 = specialized AsyncLineSequence.AsyncIterator.next();
      goto LABEL_99;
    }
    v3 = *v2;
    *(_QWORD *)(v1 + 8) = v2 + 1;
    v1 = *(_QWORD *)(v0 + 16);
  }
  else
  {
    v3 = *(unsigned __int8 *)(v1 + 32);
  }
  *(_WORD *)(v1 + 32) = 256;
  if (v3 != 13)
  {
    if ((v3 - 10) < 3)
    {
      v10 = *(_QWORD *)(v0 + 16);
      if (*(_QWORD *)(*(_QWORD *)(v10 + 24) + 16))
      {
        swift_bridgeObjectRetain();
        v11 = static String._fromUTF8Repairing(_:)();
        v13 = v12;
        swift_bridgeObjectRelease();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v15 = *(_QWORD *)(v10 + 24);
        goto LABEL_12;
      }
      v35 = swift_isUniquelyReferenced_nonNull_native();
      v24 = *(char **)(v10 + 24);
      if ((v35 & 1) != 0)
      {
        v36 = *(_QWORD *)(v0 + 16);
        v25 = *((_QWORD *)v24 + 2);
        v37 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v36 + 24) = v24;
        if ((v37 & 1) == 0)
        {
          v38 = *(_QWORD *)(v0 + 16);
          v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25, 1, v24);
          *(_QWORD *)(v38 + 24) = v24;
        }
LABEL_35:
        if (v25)
        {
          v39 = *((_QWORD *)v24 + 2);
          v40 = v39 - v25;
          if (v39 - v25 < 0)
            return _fatalErrorMessage(_:_:file:line:flags:)();
          memmove(v24 + 32, &v24[v25 + 32], v39 - v25);
          *((_QWORD *)v24 + 2) = v40;
        }
        *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24) = v24;
        return swift_task_switch();
      }
LABEL_54:
      if (*((_QWORD *)v24 + 3) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        v56 = (_QWORD *)swift_allocObject();
        v77 = _swift_stdlib_malloc_size(v56);
        v56[2] = 0;
        v56[3] = 2 * v77 - 64;
      }
      else
      {
        v56 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      }
      *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24) = v56;
LABEL_80:
      swift_bridgeObjectRelease();
      return swift_task_switch();
    }
    if (v3 == 226)
    {
      v42 = *(_QWORD *)(v0 + 16);
      v43 = *(unsigned __int8 **)(v42 + 8);
      if (v43 == *(unsigned __int8 **)(v42 + 16))
      {
        v91 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 80) = v91;
        v92 = specialized AsyncLineSequence.AsyncIterator.next();
      }
      else
      {
        v44 = *v43;
        v19 = *v43;
        *(_QWORD *)(v42 + 8) = v43 + 1;
        v45 = *(_QWORD **)(v0 + 16);
        if (v44 != 128)
        {
          v22 = (char *)v45[3];
          v71 = swift_isUniquelyReferenced_nonNull_native();
          v45[3] = v22;
          if ((v71 & 1) == 0)
          {
            v95 = *(_QWORD *)(v0 + 16);
            v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v22 + 2) + 1, 1, v22);
            *(_QWORD *)(v95 + 24) = v22;
          }
          v66 = *((_QWORD *)v22 + 2);
          v72 = *((_QWORD *)v22 + 3);
          v67 = v66 + 1;
          if (v66 >= v72 >> 1)
            v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v72 > 1), v66 + 1, 1, v22);
          v68 = *(_QWORD *)(v0 + 16);
          *((_QWORD *)v22 + 2) = v67;
          v69 = &v22[v66];
          v70 = -30;
LABEL_74:
          v69[32] = v70;
          *(_QWORD *)(v68 + 24) = v22;
          v73 = *((_QWORD *)v22 + 3);
          v74 = v66 + 2;
          if (v74 > (uint64_t)(v73 >> 1))
            v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v73 > 1), v74, 1, v22);
          v75 = *(_QWORD *)(v0 + 16);
          *((_QWORD *)v22 + 2) = v74;
          v76 = &v22[v67];
          goto LABEL_77;
        }
        v46 = (unsigned __int8 *)v45[1];
        if (v46 != (unsigned __int8 *)v45[2])
        {
          v47 = *v46;
          v19 = *v46;
          v45[1] = v46 + 1;
          v21 = *(_QWORD *)(v0 + 16);
          v22 = *(char **)(v21 + 24);
          if ((v47 & 0xFE) == 0xA8)
          {
            if (!*((_QWORD *)v22 + 2))
            {
              v87 = swift_isUniquelyReferenced_nonNull_native();
              v88 = *(_QWORD *)(v21 + 24);
              if ((v87 & 1) != 0)
              {
                specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v88 + 16));
                return swift_task_switch();
              }
              if (*(_QWORD *)(v88 + 24) >= 2uLL)
              {
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
                v89 = (_QWORD *)swift_allocObject();
                v90 = _swift_stdlib_malloc_size(v89);
                v89[2] = 0;
                v89[3] = 2 * v90 - 64;
              }
              else
              {
                v89 = (_QWORD *)MEMORY[0x1E0DEE9D8];
              }
              *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24) = v89;
              goto LABEL_80;
            }
            goto LABEL_46;
          }
          v78 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(v21 + 24) = v22;
          if ((v78 & 1) == 0)
          {
            v96 = *(_QWORD *)(v0 + 16);
            v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v22 + 2) + 1, 1, v22);
            *(_QWORD *)(v96 + 24) = v22;
          }
          v80 = *((_QWORD *)v22 + 2);
          v79 = *((_QWORD *)v22 + 3);
          v81 = v80 + 1;
          if (v80 >= v79 >> 1)
            v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v79 > 1), v80 + 1, 1, v22);
          v82 = *(_QWORD *)(v0 + 16);
          *((_QWORD *)v22 + 2) = v81;
          v22[v80 + 32] = -30;
          *(_QWORD *)(v82 + 24) = v22;
          v83 = *((_QWORD *)v22 + 3);
          v84 = v80 + 2;
          if ((uint64_t)(v80 + 2) > (uint64_t)(v83 >> 1))
            v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v83 > 1), v80 + 2, 1, v22);
          v85 = *(_QWORD *)(v0 + 16);
          *((_QWORD *)v22 + 2) = v84;
          v22[v81 + 32] = 0x80;
          *(_QWORD *)(v85 + 24) = v22;
          v86 = *((_QWORD *)v22 + 3);
          if ((uint64_t)(v80 + 3) > (uint64_t)(v86 >> 1))
            v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v86 > 1), v80 + 3, 1, v22);
          v75 = *(_QWORD *)(v0 + 16);
          *((_QWORD *)v22 + 2) = v80 + 3;
          v76 = &v22[v84];
LABEL_77:
          v76[32] = v19;
          *(_QWORD *)(v75 + 24) = v22;
          return swift_task_switch();
        }
        v91 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 88) = v91;
        v92 = specialized AsyncLineSequence.AsyncIterator.next();
      }
    }
    else
    {
      if (v3 != 194)
      {
        v49 = *(_QWORD *)(v0 + 16);
        v50 = *(char **)(v49 + 24);
        v51 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v49 + 24) = v50;
        if ((v51 & 1) == 0)
        {
          v93 = *(_QWORD *)(v0 + 16);
          v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v50 + 2) + 1, 1, v50);
          *(_QWORD *)(v93 + 24) = v50;
        }
        v53 = *((_QWORD *)v50 + 2);
        v52 = *((_QWORD *)v50 + 3);
        if (v53 >= v52 >> 1)
          v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v52 > 1), v53 + 1, 1, v50);
        v54 = *(_QWORD *)(v0 + 16);
        *((_QWORD *)v50 + 2) = v53 + 1;
        v50[v53 + 32] = v3;
        *(_QWORD *)(v54 + 24) = v50;
        return swift_task_switch();
      }
      v17 = *(_QWORD *)(v0 + 16);
      v18 = *(unsigned __int8 **)(v17 + 8);
      if (v18 != *(unsigned __int8 **)(v17 + 16))
      {
        v20 = *v18;
        v19 = *v18;
        *(_QWORD *)(v17 + 8) = v18 + 1;
        v21 = *(_QWORD *)(v0 + 16);
        v22 = *(char **)(v21 + 24);
        if (v20 == 133)
        {
          if (!*((_QWORD *)v22 + 2))
          {
            v23 = swift_isUniquelyReferenced_nonNull_native();
            v24 = *(char **)(v21 + 24);
            if ((v23 & 1) != 0)
            {
              v25 = *((_QWORD *)v24 + 2);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25, 1, v24);
              goto LABEL_35;
            }
            goto LABEL_54;
          }
LABEL_46:
          swift_bridgeObjectRetain();
          v11 = static String._fromUTF8Repairing(_:)();
          v13 = v48;
          swift_bridgeObjectRelease();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v15 = *(_QWORD *)(v21 + 24);
LABEL_12:
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v15 + 16));
          }
          else
          {
            v16 = (_QWORD *)(*(_QWORD *)(v0 + 16) + 24);
            *v16 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(_QWORD *)(v15 + 24) >> 1);
            swift_bridgeObjectRelease();
          }
          return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v11, v13);
        }
        v64 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v21 + 24) = v22;
        if ((v64 & 1) == 0)
        {
          v94 = *(_QWORD *)(v0 + 16);
          v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v22 + 2) + 1, 1, v22);
          *(_QWORD *)(v94 + 24) = v22;
        }
        v66 = *((_QWORD *)v22 + 2);
        v65 = *((_QWORD *)v22 + 3);
        v67 = v66 + 1;
        if (v66 >= v65 >> 1)
          v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v65 > 1), v66 + 1, 1, v22);
        v68 = *(_QWORD *)(v0 + 16);
        *((_QWORD *)v22 + 2) = v67;
        v69 = &v22[v66];
        v70 = -62;
        goto LABEL_74;
      }
      v91 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 72) = v91;
      v92 = specialized AsyncLineSequence.AsyncIterator.next();
    }
LABEL_99:
    *v91 = v0;
    v91[1] = v92;
    return _AsyncBytesBuffer.reloadBufferAndNext()();
  }
  v4 = *(_QWORD *)(v0 + 16);
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 16))
  {
    swift_bridgeObjectRetain();
    v5 = static String._fromUTF8Repairing(_:)();
    v7 = v6;
    swift_bridgeObjectRelease();
    v8 = swift_isUniquelyReferenced_nonNull_native();
    v9 = *(_QWORD *)(v4 + 24);
    if ((v8 & 1) != 0)
    {
      specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v9 + 16));
    }
    else
    {
      if (*(_QWORD *)(v9 + 24) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        v34 = (_QWORD *)swift_allocObject();
        v55 = _swift_stdlib_malloc_size(v34);
        v34[2] = 0;
        v34[3] = 2 * v55 - 64;
      }
      else
      {
        v34 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      }
      *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24) = v34;
      swift_bridgeObjectRelease();
    }
    goto LABEL_58;
  }
  v26 = swift_isUniquelyReferenced_nonNull_native();
  v27 = *(char **)(v4 + 24);
  if ((v26 & 1) == 0)
  {
    if (*((_QWORD *)v27 + 3) >= 2uLL)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
      v41 = (_QWORD *)swift_allocObject();
      v57 = _swift_stdlib_malloc_size(v41);
      v41[2] = 0;
      v41[3] = 2 * v57 - 64;
    }
    else
    {
      v41 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24) = v41;
    swift_bridgeObjectRelease();
    v5 = 0;
    v7 = 0;
    goto LABEL_58;
  }
  v28 = *(_QWORD *)(v0 + 16);
  v29 = *((_QWORD *)v27 + 2);
  v30 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v28 + 24) = v27;
  if ((v30 & 1) == 0)
  {
    v31 = *(_QWORD *)(v0 + 16);
    v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29, 1, v27);
    *(_QWORD *)(v31 + 24) = v27;
  }
  if (!v29)
  {
LABEL_28:
    v5 = 0;
    v7 = 0;
    *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24) = v27;
LABEL_58:
    *(_QWORD *)(v0 + 40) = v5;
    *(_QWORD *)(v0 + 48) = v7;
    v58 = *(_QWORD *)(v0 + 16);
    v59 = *(unsigned __int8 **)(v58 + 8);
    if (v59 != *(unsigned __int8 **)(v58 + 16))
    {
      v61 = *v59;
      v60 = *v59;
      *(_QWORD *)(v58 + 8) = v59 + 1;
      if (v61 != 10)
      {
        v62 = *(_QWORD *)(v0 + 16);
        *(_BYTE *)(v62 + 32) = v60;
        *(_BYTE *)(v62 + 33) = 0;
      }
      v13 = *(_QWORD *)(v0 + 48);
      if (v13)
      {
        v11 = *(_QWORD *)(v0 + 40);
        return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v11, v13);
      }
      return swift_task_switch();
    }
    v91 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 56) = v91;
    v92 = specialized AsyncLineSequence.AsyncIterator.next();
    goto LABEL_99;
  }
  v32 = *((_QWORD *)v27 + 2);
  v33 = v32 - v29;
  if (v32 - v29 >= 0)
  {
    memmove(v27 + 32, &v27[v29 + 32], v32 - v29);
    *((_QWORD *)v27 + 2) = v33;
    goto LABEL_28;
  }
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

{
  uint64_t v0;

  *(_WORD *)(*(_QWORD *)(v0 + 16) + 32) = 256;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  __int16 v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 v21;
  int v22;
  uint64_t v23;
  char *v24;
  char v25;
  char *v26;
  int64_t v27;
  char v28;
  char *v29;
  uint64_t v30;
  int64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unsigned __int8 *v45;
  int v46;
  _QWORD *v47;
  unsigned __int8 *v48;
  unsigned __int8 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  size_t v57;
  _QWORD *v58;
  size_t v59;
  uint64_t v60;
  unsigned __int8 *v61;
  unsigned __int8 v62;
  int v63;
  uint64_t v64;
  char v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  char v72;
  char v73;
  unint64_t v74;
  unint64_t v75;
  int64_t v76;
  uint64_t v77;
  char *v78;
  size_t v79;
  char v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char v89;
  uint64_t v90;
  _QWORD *v91;
  size_t v92;
  _QWORD *v93;
  uint64_t (*v94)(__int16);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  v1 = *(_WORD *)(v0 + 96);
  *(_WORD *)(*(_QWORD *)(v0 + 16) + 32) = 256;
  if ((v1 & 0x100) != 0)
  {
    v9 = *(_QWORD *)(v0 + 16);
    v10 = *(_QWORD *)(*(_QWORD *)(v9 + 24) + 16);
    if (!v10)
    {
      v11 = 0;
      return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v11, v10);
    }
    swift_bridgeObjectRetain();
    v11 = static String._fromUTF8Repairing(_:)();
    v10 = v12;
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *(_QWORD *)(v9 + 24);
    v15 = (_QWORD *)(*(_QWORD *)(v0 + 16) + 24);
    if (!isUniquelyReferenced_nonNull_native)
      goto LABEL_13;
    goto LABEL_8;
  }
  v2 = *(unsigned __int8 *)(v0 + 96);
  if (v2 != 13)
  {
    if ((v2 - 10) < 3)
    {
      v16 = *(_QWORD *)(v0 + 16);
      if (*(_QWORD *)(*(_QWORD *)(v16 + 24) + 16))
      {
        swift_bridgeObjectRetain();
        v11 = static String._fromUTF8Repairing(_:)();
        v10 = v17;
        swift_bridgeObjectRelease();
        v18 = swift_isUniquelyReferenced_nonNull_native();
        v14 = *(_QWORD *)(v16 + 24);
        goto LABEL_12;
      }
      v37 = swift_isUniquelyReferenced_nonNull_native();
      v26 = *(char **)(v16 + 24);
      if ((v37 & 1) != 0)
      {
        v38 = *(_QWORD *)(v0 + 16);
        v27 = *((_QWORD *)v26 + 2);
        v39 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v38 + 24) = v26;
        if ((v39 & 1) == 0)
        {
          v40 = *(_QWORD *)(v0 + 16);
          v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27, 1, v26);
          *(_QWORD *)(v40 + 24) = v26;
        }
LABEL_35:
        if (v27)
        {
          v41 = *((_QWORD *)v26 + 2);
          v42 = v41 - v27;
          if (v41 - v27 < 0)
            return _fatalErrorMessage(_:_:file:line:flags:)();
          memmove(v26 + 32, &v26[v27 + 32], v41 - v27);
          *((_QWORD *)v26 + 2) = v42;
        }
        *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24) = v26;
        return swift_task_switch();
      }
LABEL_54:
      if (*((_QWORD *)v26 + 3) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        v58 = (_QWORD *)swift_allocObject();
        v79 = _swift_stdlib_malloc_size(v58);
        v58[2] = 0;
        v58[3] = 2 * v79 - 64;
      }
      else
      {
        v58 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      }
      *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24) = v58;
LABEL_80:
      swift_bridgeObjectRelease();
      return swift_task_switch();
    }
    if (v2 == 226)
    {
      v44 = *(_QWORD *)(v0 + 16);
      v45 = *(unsigned __int8 **)(v44 + 8);
      if (v45 == *(unsigned __int8 **)(v44 + 16))
      {
        v93 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 80) = v93;
        v94 = specialized AsyncLineSequence.AsyncIterator.next();
      }
      else
      {
        v46 = *v45;
        v21 = *v45;
        *(_QWORD *)(v44 + 8) = v45 + 1;
        v47 = *(_QWORD **)(v0 + 16);
        if (v46 != 128)
        {
          v24 = (char *)v47[3];
          v73 = swift_isUniquelyReferenced_nonNull_native();
          v47[3] = v24;
          if ((v73 & 1) == 0)
          {
            v97 = *(_QWORD *)(v0 + 16);
            v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v24 + 2) + 1, 1, v24);
            *(_QWORD *)(v97 + 24) = v24;
          }
          v68 = *((_QWORD *)v24 + 2);
          v74 = *((_QWORD *)v24 + 3);
          v69 = v68 + 1;
          if (v68 >= v74 >> 1)
            v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v74 > 1), v68 + 1, 1, v24);
          v70 = *(_QWORD *)(v0 + 16);
          *((_QWORD *)v24 + 2) = v69;
          v71 = &v24[v68];
          v72 = -30;
LABEL_74:
          v71[32] = v72;
          *(_QWORD *)(v70 + 24) = v24;
          v75 = *((_QWORD *)v24 + 3);
          v76 = v68 + 2;
          if (v76 > (uint64_t)(v75 >> 1))
            v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v75 > 1), v76, 1, v24);
          v77 = *(_QWORD *)(v0 + 16);
          *((_QWORD *)v24 + 2) = v76;
          v78 = &v24[v69];
          goto LABEL_77;
        }
        v48 = (unsigned __int8 *)v47[1];
        if (v48 != (unsigned __int8 *)v47[2])
        {
          v49 = *v48;
          v21 = *v48;
          v47[1] = v48 + 1;
          v23 = *(_QWORD *)(v0 + 16);
          v24 = *(char **)(v23 + 24);
          if ((v49 & 0xFE) == 0xA8)
          {
            if (!*((_QWORD *)v24 + 2))
            {
              v89 = swift_isUniquelyReferenced_nonNull_native();
              v90 = *(_QWORD *)(v23 + 24);
              if ((v89 & 1) != 0)
              {
                specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v90 + 16));
                return swift_task_switch();
              }
              if (*(_QWORD *)(v90 + 24) >= 2uLL)
              {
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
                v91 = (_QWORD *)swift_allocObject();
                v92 = _swift_stdlib_malloc_size(v91);
                v91[2] = 0;
                v91[3] = 2 * v92 - 64;
              }
              else
              {
                v91 = (_QWORD *)MEMORY[0x1E0DEE9D8];
              }
              *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24) = v91;
              goto LABEL_80;
            }
            goto LABEL_46;
          }
          v80 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(v23 + 24) = v24;
          if ((v80 & 1) == 0)
          {
            v98 = *(_QWORD *)(v0 + 16);
            v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v24 + 2) + 1, 1, v24);
            *(_QWORD *)(v98 + 24) = v24;
          }
          v82 = *((_QWORD *)v24 + 2);
          v81 = *((_QWORD *)v24 + 3);
          v83 = v82 + 1;
          if (v82 >= v81 >> 1)
            v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v81 > 1), v82 + 1, 1, v24);
          v84 = *(_QWORD *)(v0 + 16);
          *((_QWORD *)v24 + 2) = v83;
          v24[v82 + 32] = -30;
          *(_QWORD *)(v84 + 24) = v24;
          v85 = *((_QWORD *)v24 + 3);
          v86 = v82 + 2;
          if ((uint64_t)(v82 + 2) > (uint64_t)(v85 >> 1))
            v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v85 > 1), v82 + 2, 1, v24);
          v87 = *(_QWORD *)(v0 + 16);
          *((_QWORD *)v24 + 2) = v86;
          v24[v83 + 32] = 0x80;
          *(_QWORD *)(v87 + 24) = v24;
          v88 = *((_QWORD *)v24 + 3);
          if ((uint64_t)(v82 + 3) > (uint64_t)(v88 >> 1))
            v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v88 > 1), v82 + 3, 1, v24);
          v77 = *(_QWORD *)(v0 + 16);
          *((_QWORD *)v24 + 2) = v82 + 3;
          v78 = &v24[v86];
LABEL_77:
          v78[32] = v21;
          *(_QWORD *)(v77 + 24) = v24;
          return swift_task_switch();
        }
        v93 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 88) = v93;
        v94 = specialized AsyncLineSequence.AsyncIterator.next();
      }
    }
    else
    {
      if (v2 != 194)
      {
        v51 = *(_QWORD *)(v0 + 16);
        v52 = *(char **)(v51 + 24);
        v53 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v51 + 24) = v52;
        if ((v53 & 1) == 0)
        {
          v95 = *(_QWORD *)(v0 + 16);
          v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v52 + 2) + 1, 1, v52);
          *(_QWORD *)(v95 + 24) = v52;
        }
        v55 = *((_QWORD *)v52 + 2);
        v54 = *((_QWORD *)v52 + 3);
        if (v55 >= v54 >> 1)
          v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v54 > 1), v55 + 1, 1, v52);
        v56 = *(_QWORD *)(v0 + 16);
        *((_QWORD *)v52 + 2) = v55 + 1;
        v52[v55 + 32] = v2;
        *(_QWORD *)(v56 + 24) = v52;
        return swift_task_switch();
      }
      v19 = *(_QWORD *)(v0 + 16);
      v20 = *(unsigned __int8 **)(v19 + 8);
      if (v20 != *(unsigned __int8 **)(v19 + 16))
      {
        v22 = *v20;
        v21 = *v20;
        *(_QWORD *)(v19 + 8) = v20 + 1;
        v23 = *(_QWORD *)(v0 + 16);
        v24 = *(char **)(v23 + 24);
        if (v22 == 133)
        {
          if (!*((_QWORD *)v24 + 2))
          {
            v25 = swift_isUniquelyReferenced_nonNull_native();
            v26 = *(char **)(v23 + 24);
            if ((v25 & 1) != 0)
            {
              v27 = *((_QWORD *)v26 + 2);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27, 1, v26);
              goto LABEL_35;
            }
            goto LABEL_54;
          }
LABEL_46:
          swift_bridgeObjectRetain();
          v11 = static String._fromUTF8Repairing(_:)();
          v10 = v50;
          swift_bridgeObjectRelease();
          v18 = swift_isUniquelyReferenced_nonNull_native();
          v14 = *(_QWORD *)(v23 + 24);
LABEL_12:
          v15 = (_QWORD *)(*(_QWORD *)(v0 + 16) + 24);
          if ((v18 & 1) == 0)
          {
LABEL_13:
            *v15 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(_QWORD *)(v14 + 24) >> 1);
            swift_bridgeObjectRelease();
            return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v11, v10);
          }
LABEL_8:
          specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v14 + 16));
          return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v11, v10);
        }
        v66 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v23 + 24) = v24;
        if ((v66 & 1) == 0)
        {
          v96 = *(_QWORD *)(v0 + 16);
          v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v24 + 2) + 1, 1, v24);
          *(_QWORD *)(v96 + 24) = v24;
        }
        v68 = *((_QWORD *)v24 + 2);
        v67 = *((_QWORD *)v24 + 3);
        v69 = v68 + 1;
        if (v68 >= v67 >> 1)
          v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v67 > 1), v68 + 1, 1, v24);
        v70 = *(_QWORD *)(v0 + 16);
        *((_QWORD *)v24 + 2) = v69;
        v71 = &v24[v68];
        v72 = -62;
        goto LABEL_74;
      }
      v93 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 72) = v93;
      v94 = specialized AsyncLineSequence.AsyncIterator.next();
    }
LABEL_98:
    *v93 = v0;
    v93[1] = v94;
    return _AsyncBytesBuffer.reloadBufferAndNext()();
  }
  v3 = *(_QWORD *)(v0 + 16);
  if (*(_QWORD *)(*(_QWORD *)(v3 + 24) + 16))
  {
    swift_bridgeObjectRetain();
    v4 = static String._fromUTF8Repairing(_:)();
    v6 = v5;
    swift_bridgeObjectRelease();
    v7 = swift_isUniquelyReferenced_nonNull_native();
    v8 = *(_QWORD *)(v3 + 24);
    if ((v7 & 1) != 0)
    {
      specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v8 + 16));
    }
    else
    {
      if (*(_QWORD *)(v8 + 24) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        v36 = (_QWORD *)swift_allocObject();
        v57 = _swift_stdlib_malloc_size(v36);
        v36[2] = 0;
        v36[3] = 2 * v57 - 64;
      }
      else
      {
        v36 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      }
      *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24) = v36;
      swift_bridgeObjectRelease();
    }
    goto LABEL_58;
  }
  v28 = swift_isUniquelyReferenced_nonNull_native();
  v29 = *(char **)(v3 + 24);
  if ((v28 & 1) == 0)
  {
    if (*((_QWORD *)v29 + 3) >= 2uLL)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
      v43 = (_QWORD *)swift_allocObject();
      v59 = _swift_stdlib_malloc_size(v43);
      v43[2] = 0;
      v43[3] = 2 * v59 - 64;
    }
    else
    {
      v43 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24) = v43;
    swift_bridgeObjectRelease();
    v4 = 0;
    v6 = 0;
    goto LABEL_58;
  }
  v30 = *(_QWORD *)(v0 + 16);
  v31 = *((_QWORD *)v29 + 2);
  v32 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v30 + 24) = v29;
  if ((v32 & 1) == 0)
  {
    v33 = *(_QWORD *)(v0 + 16);
    v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31, 1, v29);
    *(_QWORD *)(v33 + 24) = v29;
  }
  if (!v31)
  {
LABEL_29:
    v4 = 0;
    v6 = 0;
    *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24) = v29;
LABEL_58:
    *(_QWORD *)(v0 + 40) = v4;
    *(_QWORD *)(v0 + 48) = v6;
    v60 = *(_QWORD *)(v0 + 16);
    v61 = *(unsigned __int8 **)(v60 + 8);
    if (v61 != *(unsigned __int8 **)(v60 + 16))
    {
      v63 = *v61;
      v62 = *v61;
      *(_QWORD *)(v60 + 8) = v61 + 1;
      if (v63 != 10)
      {
        v64 = *(_QWORD *)(v0 + 16);
        *(_BYTE *)(v64 + 32) = v62;
        *(_BYTE *)(v64 + 33) = 0;
      }
      v10 = *(_QWORD *)(v0 + 48);
      if (v10)
      {
        v11 = *(_QWORD *)(v0 + 40);
        return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v11, v10);
      }
      return swift_task_switch();
    }
    v93 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 56) = v93;
    v94 = specialized AsyncLineSequence.AsyncIterator.next();
    goto LABEL_98;
  }
  v34 = *((_QWORD *)v29 + 2);
  v35 = v34 - v31;
  if (v34 - v31 >= 0)
  {
    memmove(v29 + 32, &v29[v31 + 32], v34 - v31);
    *((_QWORD *)v29 + 2) = v35;
    goto LABEL_29;
  }
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_WORD *)(v0 + 98);
  if ((v1 & 0x100) != 0)
  {
    v3 = *(_QWORD *)(v0 + 48);
  }
  else
  {
    if (v1 != 10)
    {
      v2 = *(_QWORD *)(v0 + 16);
      *(_BYTE *)(v2 + 32) = v1;
      *(_BYTE *)(v2 + 33) = 0;
    }
    v3 = *(_QWORD *)(v0 + 48);
    if (!v3)
      return swift_task_switch();
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(v0 + 8))(*(_QWORD *)(v0 + 40), v3);
}

{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  char v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  size_t v32;
  uint64_t v33;
  uint64_t v34;

  v1 = *(_WORD *)(v0 + 100);
  if ((v1 & 0x100) != 0)
  {
    v10 = *(_QWORD *)(v0 + 16);
    v11 = *(char **)(v10 + 24);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v10 + 24) = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v33 = *(_QWORD *)(v0 + 16);
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
      *(_QWORD *)(v33 + 24) = v11;
    }
    v14 = *((_QWORD *)v11 + 2);
    v13 = *((_QWORD *)v11 + 3);
    if (v14 >= v13 >> 1)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, v11);
    v15 = *(_QWORD *)(v0 + 16);
    *((_QWORD *)v11 + 2) = v14 + 1;
    v11[v14 + 32] = -62;
    *(_QWORD *)(v15 + 24) = v11;
    swift_bridgeObjectRetain();
    v4 = static String._fromUTF8Repairing(_:)();
    v6 = v16;
    swift_bridgeObjectRelease();
    v17 = swift_isUniquelyReferenced_nonNull_native();
    v8 = *(_QWORD *)(v15 + 24);
    v9 = (_QWORD *)(*(_QWORD *)(v0 + 16) + 24);
    if (!v17)
      goto LABEL_5;
    goto LABEL_11;
  }
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(char **)(v2 + 24);
  if (v1 != 133)
  {
    v19 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v2 + 24) = v3;
    if ((v19 & 1) == 0)
    {
      v34 = *(_QWORD *)(v0 + 16);
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v3 + 2) + 1, 1, v3);
      *(_QWORD *)(v34 + 24) = v3;
    }
    v21 = *((_QWORD *)v3 + 2);
    v20 = *((_QWORD *)v3 + 3);
    v22 = v21 + 1;
    if (v21 >= v20 >> 1)
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v20 > 1), v21 + 1, 1, v3);
    v23 = *(_QWORD *)(v0 + 16);
    *((_QWORD *)v3 + 2) = v22;
    v3[v21 + 32] = -62;
    *(_QWORD *)(v23 + 24) = v3;
    v24 = *((_QWORD *)v3 + 3);
    v25 = v21 + 2;
    if (v25 > (uint64_t)(v24 >> 1))
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v24 > 1), v25, 1, v3);
    v26 = *(_QWORD *)(v0 + 16);
    *((_QWORD *)v3 + 2) = v25;
    v3[v22 + 32] = v1;
    goto LABEL_20;
  }
  if (*((_QWORD *)v3 + 2))
  {
    swift_bridgeObjectRetain();
    v4 = static String._fromUTF8Repairing(_:)();
    v6 = v5;
    swift_bridgeObjectRelease();
    v7 = swift_isUniquelyReferenced_nonNull_native();
    v8 = *(_QWORD *)(v2 + 24);
    v9 = (_QWORD *)(*(_QWORD *)(v0 + 16) + 24);
    if ((v7 & 1) == 0)
    {
LABEL_5:
      *v9 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(_QWORD *)(v8 + 24) >> 1);
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v4, v6);
    }
LABEL_11:
    specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v8 + 16));
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v4, v6);
  }
  v27 = swift_isUniquelyReferenced_nonNull_native();
  v3 = *(char **)(v2 + 24);
  if ((v27 & 1) == 0)
  {
    if (*((_QWORD *)v3 + 3) >= 2uLL)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
      v31 = (_QWORD *)swift_allocObject();
      v32 = _swift_stdlib_malloc_size(v31);
      v31[2] = 0;
      v31[3] = 2 * v32 - 64;
    }
    else
    {
      v31 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24) = v31;
    swift_bridgeObjectRelease();
    return swift_task_switch();
  }
  v28 = *((_QWORD *)v3 + 2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28, 1, v3);
  if (!v28)
  {
LABEL_28:
    v26 = *(_QWORD *)(v0 + 16);
LABEL_20:
    *(_QWORD *)(v26 + 24) = v3;
    return swift_task_switch();
  }
  v29 = *((_QWORD *)v3 + 2);
  v30 = v29 - v28;
  if (v29 - v28 >= 0)
  {
    memmove(v3 + 32, &v3[v28 + 32], v29 - v28);
    *((_QWORD *)v3 + 2) = v30;
    goto LABEL_28;
  }
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

{
  uint64_t v0;
  __int16 v1;
  _QWORD *v2;
  char *v3;
  char v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  char *v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  _QWORD *v43;
  size_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  char *v51;
  char *v52;
  unint64_t v53;
  char *v54;

  v1 = *(_WORD *)(v0 + 102);
  if ((v1 & 0x100) != 0)
  {
    v13 = *(_QWORD *)(v0 + 16);
    v14 = *(char **)(v13 + 24);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v13 + 24) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v45 = *(_QWORD *)(v0 + 16);
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v14 + 2) + 1, 1, v14);
      *(_QWORD *)(v45 + 24) = v14;
    }
    v17 = *((_QWORD *)v14 + 2);
    v16 = *((_QWORD *)v14 + 3);
    if (v17 >= v16 >> 1)
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1, v14);
    v18 = *(_QWORD *)(v0 + 16);
    *((_QWORD *)v14 + 2) = v17 + 1;
    v14[v17 + 32] = -30;
    *(_QWORD *)(v18 + 24) = v14;
    swift_bridgeObjectRetain();
    v7 = static String._fromUTF8Repairing(_:)();
    v9 = v19;
    swift_bridgeObjectRelease();
    v20 = swift_isUniquelyReferenced_nonNull_native();
    v11 = *(_QWORD *)(v18 + 24);
    v12 = (_QWORD *)(*(_QWORD *)(v0 + 16) + 24);
    if (!v20)
      goto LABEL_7;
    goto LABEL_13;
  }
  v2 = *(_QWORD **)(v0 + 16);
  if (v1 != 128)
  {
    v6 = (char *)v2[3];
    v22 = swift_isUniquelyReferenced_nonNull_native();
    v2[3] = v6;
    if ((v22 & 1) == 0)
    {
      v47 = *(_QWORD *)(v0 + 16);
      v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
      *(_QWORD *)(v47 + 24) = v6;
    }
    v24 = *((_QWORD *)v6 + 2);
    v23 = *((_QWORD *)v6 + 3);
    v25 = v24 + 1;
    if (v24 >= v23 >> 1)
      v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v23 > 1), v24 + 1, 1, v6);
    v26 = *(_QWORD *)(v0 + 16);
    *((_QWORD *)v6 + 2) = v25;
    v6[v24 + 32] = -30;
    *(_QWORD *)(v26 + 24) = v6;
    v27 = *((_QWORD *)v6 + 3);
    v28 = v24 + 2;
    if (v28 > (uint64_t)(v27 >> 1))
      v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v28, 1, v6);
    v29 = *(_QWORD *)(v0 + 16);
    *((_QWORD *)v6 + 2) = v28;
    v30 = &v6[v25];
    goto LABEL_31;
  }
  v3 = (char *)v2[1];
  if (v3 != (char *)v2[2])
  {
    v4 = *v3;
    LOBYTE(v1) = *v3;
    v2[1] = v3 + 1;
    v5 = *(_QWORD *)(v0 + 16);
    v6 = *(char **)(v5 + 24);
    if ((v4 & 0xFE) == 0xA8)
    {
      if (*((_QWORD *)v6 + 2))
      {
        swift_bridgeObjectRetain();
        v7 = static String._fromUTF8Repairing(_:)();
        v9 = v8;
        swift_bridgeObjectRelease();
        v10 = swift_isUniquelyReferenced_nonNull_native();
        v11 = *(_QWORD *)(v5 + 24);
        v12 = (_QWORD *)(*(_QWORD *)(v0 + 16) + 24);
        if ((v10 & 1) == 0)
        {
LABEL_7:
          *v12 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(_QWORD *)(v11 + 24) >> 1);
          swift_bridgeObjectRelease();
          return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v7, v9);
        }
LABEL_13:
        specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v11 + 16));
        return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v7, v9);
      }
      v41 = swift_isUniquelyReferenced_nonNull_native();
      v42 = *(_QWORD *)(v5 + 24);
      if ((v41 & 1) != 0)
      {
        specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v42 + 16));
      }
      else
      {
        if (*(_QWORD *)(v42 + 24) >= 2uLL)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
          v43 = (_QWORD *)swift_allocObject();
          v44 = _swift_stdlib_malloc_size(v43);
          v43[2] = 0;
          v43[3] = 2 * v44 - 64;
        }
        else
        {
          v43 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        }
        *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24) = v43;
        swift_bridgeObjectRelease();
      }
      return swift_task_switch();
    }
    v31 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v5 + 24) = v6;
    if ((v31 & 1) == 0)
    {
      v48 = *(_QWORD *)(v0 + 16);
      v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
      *(_QWORD *)(v48 + 24) = v6;
    }
    v32 = *((_QWORD *)v6 + 2);
    v33 = *((_QWORD *)v6 + 3);
    v34 = v32 + 1;
    if (v32 >= v33 >> 1)
    {
      v49 = v6;
      v50 = *((_QWORD *)v6 + 2);
      v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v33 > 1), v32 + 1, 1, v49);
      v32 = v50;
      v6 = v51;
    }
    v35 = *(_QWORD *)(v0 + 16);
    *((_QWORD *)v6 + 2) = v34;
    v6[v32 + 32] = -30;
    *(_QWORD *)(v35 + 24) = v6;
    v36 = *((_QWORD *)v6 + 3);
    v37 = v32 + 2;
    if ((uint64_t)(v32 + 2) > (uint64_t)(v36 >> 1))
    {
      v52 = v6;
      v53 = v32;
      v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v36 > 1), v32 + 2, 1, v52);
      v32 = v53;
      v6 = v54;
    }
    v38 = *(_QWORD *)(v0 + 16);
    *((_QWORD *)v6 + 2) = v37;
    v6[v34 + 32] = 0x80;
    *(_QWORD *)(v38 + 24) = v6;
    v39 = *((_QWORD *)v6 + 3);
    v40 = v32 + 3;
    if ((uint64_t)(v32 + 3) > (uint64_t)(v39 >> 1))
      v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v39 > 1), v32 + 3, 1, v6);
    v29 = *(_QWORD *)(v0 + 16);
    *((_QWORD *)v6 + 2) = v40;
    v30 = &v6[v37];
LABEL_31:
    v30[32] = v1;
    *(_QWORD *)(v29 + 24) = v6;
    return swift_task_switch();
  }
  v46 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v46;
  *v46 = v0;
  v46[1] = specialized AsyncLineSequence.AsyncIterator.next();
  return _AsyncBytesBuffer.reloadBufferAndNext()();
}

{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  _QWORD *v35;
  size_t v36;
  uint64_t v37;
  uint64_t v38;

  v1 = *(_WORD *)(v0 + 104);
  if ((v1 & 0x100) != 0)
  {
    v10 = *(_QWORD *)(v0 + 16);
    v11 = *(char **)(v10 + 24);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v10 + 24) = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v37 = *(_QWORD *)(v0 + 16);
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
      *(_QWORD *)(v37 + 24) = v11;
    }
    v14 = *((_QWORD *)v11 + 2);
    v13 = *((_QWORD *)v11 + 3);
    v15 = v14 + 1;
    if (v14 >= v13 >> 1)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, v11);
    v16 = *(_QWORD *)(v0 + 16);
    *((_QWORD *)v11 + 2) = v15;
    v11[v14 + 32] = -30;
    *(_QWORD *)(v16 + 24) = v11;
    v17 = *((_QWORD *)v11 + 3);
    v18 = v14 + 2;
    if (v18 > (uint64_t)(v17 >> 1))
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v17 > 1), v18, 1, v11);
    v19 = *(_QWORD *)(v0 + 16);
    *((_QWORD *)v11 + 2) = v18;
    v11[v15 + 32] = 0x80;
    *(_QWORD *)(v19 + 24) = v11;
    swift_bridgeObjectRetain();
    v4 = static String._fromUTF8Repairing(_:)();
    v6 = v20;
    swift_bridgeObjectRelease();
    v21 = swift_isUniquelyReferenced_nonNull_native();
    v8 = *(_QWORD *)(v19 + 24);
    v9 = (_QWORD *)(*(_QWORD *)(v0 + 16) + 24);
    if (!v21)
      goto LABEL_5;
    goto LABEL_13;
  }
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(char **)(v2 + 24);
  if ((v1 & 0xFE) == 0xA8)
  {
    if (*((_QWORD *)v3 + 2))
    {
      swift_bridgeObjectRetain();
      v4 = static String._fromUTF8Repairing(_:)();
      v6 = v5;
      swift_bridgeObjectRelease();
      v7 = swift_isUniquelyReferenced_nonNull_native();
      v8 = *(_QWORD *)(v2 + 24);
      v9 = (_QWORD *)(*(_QWORD *)(v0 + 16) + 24);
      if ((v7 & 1) == 0)
      {
LABEL_5:
        *v9 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(_QWORD *)(v8 + 24) >> 1);
        swift_bridgeObjectRelease();
        return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v4, v6);
      }
LABEL_13:
      specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v8 + 16));
      return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v4, v6);
    }
    v33 = swift_isUniquelyReferenced_nonNull_native();
    v34 = *(_QWORD *)(v2 + 24);
    if ((v33 & 1) != 0)
    {
      specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v34 + 16));
    }
    else
    {
      if (*(_QWORD *)(v34 + 24) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        v35 = (_QWORD *)swift_allocObject();
        v36 = _swift_stdlib_malloc_size(v35);
        v35[2] = 0;
        v35[3] = 2 * v36 - 64;
      }
      else
      {
        v35 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      }
      *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24) = v35;
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v23 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v2 + 24) = v3;
    if ((v23 & 1) == 0)
    {
      v38 = *(_QWORD *)(v0 + 16);
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v3 + 2) + 1, 1, v3);
      *(_QWORD *)(v38 + 24) = v3;
    }
    v25 = *((_QWORD *)v3 + 2);
    v24 = *((_QWORD *)v3 + 3);
    v26 = v25 + 1;
    if (v25 >= v24 >> 1)
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v24 > 1), v25 + 1, 1, v3);
    v27 = *(_QWORD *)(v0 + 16);
    *((_QWORD *)v3 + 2) = v26;
    v3[v25 + 32] = -30;
    *(_QWORD *)(v27 + 24) = v3;
    v28 = *((_QWORD *)v3 + 3);
    v29 = v25 + 2;
    if ((uint64_t)(v25 + 2) > (uint64_t)(v28 >> 1))
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v28 > 1), v25 + 2, 1, v3);
    v30 = *(_QWORD *)(v0 + 16);
    *((_QWORD *)v3 + 2) = v29;
    v3[v26 + 32] = 0x80;
    *(_QWORD *)(v30 + 24) = v3;
    v31 = *((_QWORD *)v3 + 3);
    if ((uint64_t)(v25 + 3) > (uint64_t)(v31 >> 1))
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v31 > 1), v25 + 3, 1, v3);
    v32 = *(_QWORD *)(v0 + 16);
    *((_QWORD *)v3 + 2) = v25 + 3;
    v3[v29 + 32] = v1;
    *(_QWORD *)(v32 + 24) = v3;
  }
  return swift_task_switch();
}

uint64_t specialized AsyncLineSequence.AsyncIterator.next()(__int16 a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 32) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_WORD *)(v4 + 96) = a1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 64) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_WORD *)(v4 + 98) = a1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_WORD *)(v4 + 100) = a1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_WORD *)(v4 + 102) = a1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_WORD *)(v4 + 104) = a1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 32) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_WORD *)(v4 + 96) = a1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 64) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_WORD *)(v4 + 98) = a1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_WORD *)(v4 + 100) = a1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_WORD *)(v4 + 102) = a1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_WORD *)(v4 + 104) = a1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 32) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_WORD *)(v4 + 96) = a1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 64) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_WORD *)(v4 + 98) = a1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_WORD *)(v4 + 100) = a1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_WORD *)(v4 + 102) = a1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_WORD *)(v4 + 104) = a1;
  return swift_task_switch();
}

uint64_t AsyncLineSequence.AsyncIterator.next()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  ValueMetadata *v3;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t (__cdecl *v7)();

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  v3 = *(ValueMetadata **)(a1 + 16);
  *(_QWORD *)(v2 + 32) = v3;
  if (v3 == &type metadata for URL.AsyncBytes)
  {
    v7 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized AsyncLineSequence.AsyncIterator.next()
                               + async function pointer to specialized AsyncLineSequence.AsyncIterator.next());
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v2 + 168) = v5;
    v6 = AsyncLineSequence.AsyncIterator.next();
  }
  else if (v3 == &type metadata for NSFileHandle.AsyncBytes)
  {
    v7 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized AsyncLineSequence.AsyncIterator.next()
                               + async function pointer to specialized AsyncLineSequence.AsyncIterator.next());
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v2 + 160) = v5;
    v6 = AsyncLineSequence.AsyncIterator.next();
  }
  else
  {
    if (v3 != &type metadata for NSURLSession.AsyncBytes)
    {
      *(_DWORD *)(v2 + 176) = *(_DWORD *)(a1 + 40);
      return swift_task_switch();
    }
    v7 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized AsyncLineSequence.AsyncIterator.next()
                               + async function pointer to specialized AsyncLineSequence.AsyncIterator.next());
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v2 + 152) = v5;
    v6 = AsyncLineSequence.AsyncIterator.next();
  }
  *v5 = v2;
  v5[1] = v6;
  return v7();
}

uint64_t AsyncLineSequence.AsyncIterator.next()()
{
  uint64_t v0;
  unsigned __int8 *v1;
  _QWORD *v2;
  uint64_t (*v3)();
  int v4;
  char **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  char *v10;
  char **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char *v16;
  char v17;
  char *v18;
  int64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char v24;
  char *v25;
  int64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  size_t v38;
  _QWORD *v39;
  size_t v40;
  size_t v41;

  v1 = (unsigned __int8 *)(*(_QWORD *)(v0 + 24) + *(int *)(v0 + 176));
  if ((v1[1] & 1) != 0)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 40) = v2;
    v3 = AsyncLineSequence.AsyncIterator.next();
LABEL_47:
    *v2 = v0;
    v2[1] = v3;
    return dispatch thunk of AsyncIteratorProtocol.next()();
  }
  v4 = *v1;
  *(_WORD *)v1 = 256;
  if (v4 == 13)
  {
    v5 = (char **)(*(_QWORD *)(v0 + 24) + *(int *)(*(_QWORD *)(v0 + 16) + 36));
    if (*((_QWORD *)*v5 + 2))
    {
      swift_bridgeObjectRetain();
      v6 = static String._fromUTF8Repairing(_:)();
      v8 = v7;
      swift_bridgeObjectRelease();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v10 = *v5;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        specialized Array.replaceSubrange<A>(_:with:)(0, *((_QWORD *)v10 + 2));
      }
      else
      {
        if (*((_QWORD *)v10 + 3) >= 2uLL)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
          v23 = (_QWORD *)swift_allocObject();
          v38 = _swift_stdlib_malloc_size(v23);
          v23[2] = 0;
          v23[3] = 2 * v38 - 64;
        }
        else
        {
          v23 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        }
        *v5 = (char *)v23;
        swift_bridgeObjectRelease();
      }
      goto LABEL_46;
    }
    v17 = swift_isUniquelyReferenced_nonNull_native();
    v18 = *v5;
    if ((v17 & 1) == 0)
    {
      if (*((_QWORD *)v18 + 3) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        v30 = (_QWORD *)swift_allocObject();
        v40 = _swift_stdlib_malloc_size(v30);
        v30[2] = 0;
        v30[3] = 2 * v40 - 64;
      }
      else
      {
        v30 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      }
      *v5 = (char *)v30;
      swift_bridgeObjectRelease();
      v6 = 0;
      v8 = 0;
      goto LABEL_46;
    }
    v19 = *((_QWORD *)v18 + 2);
    v20 = swift_isUniquelyReferenced_nonNull_native();
    *v5 = v18;
    if ((v20 & 1) == 0)
    {
      v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19, 1, v18);
      *v5 = v18;
    }
    if (!v19)
    {
LABEL_20:
      v6 = 0;
      v8 = 0;
      *v5 = v18;
LABEL_46:
      *(_QWORD *)(v0 + 56) = v6;
      *(_QWORD *)(v0 + 64) = v8;
      swift_getAssociatedTypeWitness();
      swift_getAssociatedConformanceWitness();
      v2 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 72) = v2;
      v3 = AsyncLineSequence.AsyncIterator.next();
      goto LABEL_47;
    }
    v21 = *((_QWORD *)v18 + 2);
    v22 = v21 - v19;
    if (v21 - v19 >= 0)
    {
      memmove(v18 + 32, &v18[v19 + 32], v21 - v19);
      *((_QWORD *)v18 + 2) = v22;
      goto LABEL_20;
    }
    return _fatalErrorMessage(_:_:file:line:flags:)();
  }
  if ((v4 - 10) > 2)
  {
    if (v4 == 226)
    {
      *(_QWORD *)(v0 + 104) = swift_getAssociatedTypeWitness();
      *(_QWORD *)(v0 + 112) = swift_getAssociatedConformanceWitness();
      v2 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 120) = v2;
      v3 = AsyncLineSequence.AsyncIterator.next();
      goto LABEL_47;
    }
    if (v4 == 194)
    {
      swift_getAssociatedTypeWitness();
      swift_getAssociatedConformanceWitness();
      v2 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 88) = v2;
      v3 = AsyncLineSequence.AsyncIterator.next();
      goto LABEL_47;
    }
    v31 = *(_QWORD *)(v0 + 24);
    v32 = *(int *)(*(_QWORD *)(v0 + 16) + 36);
    v33 = *(char **)(v31 + v32);
    v34 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v31 + v32) = v33;
    if ((v34 & 1) == 0)
    {
      v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v33 + 2) + 1, 1, v33);
      *(_QWORD *)(v31 + v32) = v33;
    }
    v36 = *((_QWORD *)v33 + 2);
    v35 = *((_QWORD *)v33 + 3);
    if (v36 >= v35 >> 1)
      v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v35 > 1), v36 + 1, 1, v33);
    *((_QWORD *)v33 + 2) = v36 + 1;
    v33[v36 + 32] = v4;
    *(_QWORD *)(v31 + v32) = v33;
    return swift_task_switch();
  }
  v11 = (char **)(*(_QWORD *)(v0 + 24) + *(int *)(*(_QWORD *)(v0 + 16) + 36));
  if (!*((_QWORD *)*v11 + 2))
  {
    v24 = swift_isUniquelyReferenced_nonNull_native();
    v25 = *v11;
    if ((v24 & 1) != 0)
    {
      v26 = *((_QWORD *)v25 + 2);
      v27 = swift_isUniquelyReferenced_nonNull_native();
      *v11 = v25;
      if ((v27 & 1) == 0)
      {
        v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26, 1, v25);
        *v11 = v25;
      }
      if (v26)
      {
        v28 = *((_QWORD *)v25 + 2);
        v29 = v28 - v26;
        if (v28 - v26 < 0)
          return _fatalErrorMessage(_:_:file:line:flags:)();
        memmove(v25 + 32, &v25[v26 + 32], v28 - v26);
        *((_QWORD *)v25 + 2) = v29;
      }
      *v11 = v25;
    }
    else
    {
      if (*((_QWORD *)v25 + 3) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        v39 = (_QWORD *)swift_allocObject();
        v41 = _swift_stdlib_malloc_size(v39);
        v39[2] = 0;
        v39[3] = 2 * v41 - 64;
      }
      else
      {
        v39 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      }
      *v11 = (char *)v39;
      swift_bridgeObjectRelease();
    }
    return swift_task_switch();
  }
  swift_bridgeObjectRetain();
  v12 = static String._fromUTF8Repairing(_:)();
  v14 = v13;
  swift_bridgeObjectRelease();
  v15 = swift_isUniquelyReferenced_nonNull_native();
  v16 = *v11;
  if ((v15 & 1) != 0)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *((_QWORD *)v16 + 2));
  }
  else
  {
    *v11 = (char *)specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *((_QWORD *)v16 + 3) >> 1);
    swift_bridgeObjectRelease();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v12, v14);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 48) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  int v1;
  char v2;
  char **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_native;
  char *v8;
  char **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char *v14;
  uint64_t v15;
  char v16;
  _QWORD *v18;
  uint64_t (*v19)();
  char v20;
  char *v21;
  int64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char v27;
  char *v28;
  int64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  size_t v40;
  _QWORD *v41;
  size_t v42;
  size_t v43;

  v1 = *(unsigned __int8 *)(v0 + 180);
  v2 = *(_BYTE *)(v0 + 181);
  *(_WORD *)(*(_QWORD *)(v0 + 24) + *(int *)(v0 + 176)) = 256;
  if ((v2 & 1) != 0)
  {
    v3 = (char **)(*(_QWORD *)(v0 + 24) + *(int *)(*(_QWORD *)(v0 + 16) + 36));
    v4 = *((_QWORD *)*v3 + 2);
    if (!v4)
    {
      v6 = 0;
      return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v4, v6);
    }
    swift_bridgeObjectRetain();
    v4 = static String._fromUTF8Repairing(_:)();
    v6 = v5;
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v8 = *v3;
    if (isUniquelyReferenced_nonNull_native)
      goto LABEL_4;
    goto LABEL_12;
  }
  if (v1 == 13)
  {
    v9 = (char **)(*(_QWORD *)(v0 + 24) + *(int *)(*(_QWORD *)(v0 + 16) + 36));
    if (*((_QWORD *)*v9 + 2))
    {
      swift_bridgeObjectRetain();
      v10 = static String._fromUTF8Repairing(_:)();
      v12 = v11;
      swift_bridgeObjectRelease();
      v13 = swift_isUniquelyReferenced_nonNull_native();
      v14 = *v9;
      if ((v13 & 1) != 0)
      {
        specialized Array.replaceSubrange<A>(_:with:)(0, *((_QWORD *)v14 + 2));
      }
      else
      {
        if (*((_QWORD *)v14 + 3) >= 2uLL)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
          v26 = (_QWORD *)swift_allocObject();
          v40 = _swift_stdlib_malloc_size(v26);
          v26[2] = 0;
          v26[3] = 2 * v40 - 64;
        }
        else
        {
          v26 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        }
        *v9 = (char *)v26;
        swift_bridgeObjectRelease();
      }
      goto LABEL_48;
    }
    v20 = swift_isUniquelyReferenced_nonNull_native();
    v21 = *v9;
    if ((v20 & 1) == 0)
    {
      if (*((_QWORD *)v21 + 3) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        v33 = (_QWORD *)swift_allocObject();
        v42 = _swift_stdlib_malloc_size(v33);
        v33[2] = 0;
        v33[3] = 2 * v42 - 64;
      }
      else
      {
        v33 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      }
      *v9 = (char *)v33;
      swift_bridgeObjectRelease();
      v10 = 0;
      v12 = 0;
      goto LABEL_48;
    }
    v22 = *((_QWORD *)v21 + 2);
    v23 = swift_isUniquelyReferenced_nonNull_native();
    *v9 = v21;
    if ((v23 & 1) == 0)
    {
      v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22, 1, v21);
      *v9 = v21;
    }
    if (!v22)
    {
LABEL_24:
      v10 = 0;
      v12 = 0;
      *v9 = v21;
LABEL_48:
      *(_QWORD *)(v0 + 56) = v10;
      *(_QWORD *)(v0 + 64) = v12;
      swift_getAssociatedTypeWitness();
      swift_getAssociatedConformanceWitness();
      v18 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 72) = v18;
      v19 = AsyncLineSequence.AsyncIterator.next();
      goto LABEL_49;
    }
    v24 = *((_QWORD *)v21 + 2);
    v25 = v24 - v22;
    if (v24 - v22 >= 0)
    {
      memmove(v21 + 32, &v21[v22 + 32], v24 - v22);
      *((_QWORD *)v21 + 2) = v25;
      goto LABEL_24;
    }
    return _fatalErrorMessage(_:_:file:line:flags:)();
  }
  if ((v1 - 10) > 2)
  {
    if (v1 == 226)
    {
      *(_QWORD *)(v0 + 104) = swift_getAssociatedTypeWitness();
      *(_QWORD *)(v0 + 112) = swift_getAssociatedConformanceWitness();
      v18 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 120) = v18;
      v19 = AsyncLineSequence.AsyncIterator.next();
    }
    else
    {
      if (v1 != 194)
      {
        v34 = *(_QWORD *)(v0 + 24);
        v35 = *(int *)(*(_QWORD *)(v0 + 16) + 36);
        v36 = *(char **)(v34 + v35);
        v37 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v34 + v35) = v36;
        if ((v37 & 1) == 0)
        {
          v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v36 + 2) + 1, 1, v36);
          *(_QWORD *)(v34 + v35) = v36;
        }
        v39 = *((_QWORD *)v36 + 2);
        v38 = *((_QWORD *)v36 + 3);
        if (v39 >= v38 >> 1)
          v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v38 > 1), v39 + 1, 1, v36);
        *((_QWORD *)v36 + 2) = v39 + 1;
        v36[v39 + 32] = v1;
        *(_QWORD *)(v34 + v35) = v36;
        return swift_task_switch();
      }
      swift_getAssociatedTypeWitness();
      swift_getAssociatedConformanceWitness();
      v18 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 88) = v18;
      v19 = AsyncLineSequence.AsyncIterator.next();
    }
LABEL_49:
    *v18 = v0;
    v18[1] = v19;
    return dispatch thunk of AsyncIteratorProtocol.next()();
  }
  v3 = (char **)(*(_QWORD *)(v0 + 24) + *(int *)(*(_QWORD *)(v0 + 16) + 36));
  if (*((_QWORD *)*v3 + 2))
  {
    swift_bridgeObjectRetain();
    v4 = static String._fromUTF8Repairing(_:)();
    v6 = v15;
    swift_bridgeObjectRelease();
    v16 = swift_isUniquelyReferenced_nonNull_native();
    v8 = *v3;
    if ((v16 & 1) != 0)
    {
LABEL_4:
      specialized Array.replaceSubrange<A>(_:with:)(0, *((_QWORD *)v8 + 2));
      return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v4, v6);
    }
LABEL_12:
    *v3 = (char *)specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *((_QWORD *)v8 + 3) >> 1);
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v4, v6);
  }
  v27 = swift_isUniquelyReferenced_nonNull_native();
  v28 = *v3;
  if ((v27 & 1) == 0)
  {
    if (*((_QWORD *)v28 + 3) >= 2uLL)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
      v41 = (_QWORD *)swift_allocObject();
      v43 = _swift_stdlib_malloc_size(v41);
      v41[2] = 0;
      v41[3] = 2 * v43 - 64;
    }
    else
    {
      v41 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    *v3 = (char *)v41;
    swift_bridgeObjectRelease();
    return swift_task_switch();
  }
  v29 = *((_QWORD *)v28 + 2);
  v30 = swift_isUniquelyReferenced_nonNull_native();
  *v3 = v28;
  if ((v30 & 1) == 0)
  {
    v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29, 1, v28);
    *v3 = v28;
  }
  if (!v29)
  {
LABEL_33:
    *v3 = v28;
    return swift_task_switch();
  }
  v31 = *((_QWORD *)v28 + 2);
  v32 = v31 - v29;
  if (v31 - v29 >= 0)
  {
    memmove(v28 + 32, &v28[v29 + 32], v31 - v29);
    *((_QWORD *)v28 + 2) = v32;
    goto LABEL_33;
  }
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

{
  uint64_t v0;

  *(_WORD *)(*(_QWORD *)(v0 + 24) + *(int *)(v0 + 176)) = 256;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  int v2;

  if ((*(_BYTE *)(v0 + 189) & 1) != 0)
  {
    v1 = *(_QWORD *)(v0 + 64);
    return (*(uint64_t (**)(_QWORD, uint64_t))(v0 + 8))(*(_QWORD *)(v0 + 56), v1);
  }
  v2 = *(unsigned __int8 *)(v0 + 188);
  if (v2 != 10)
    *(_WORD *)(*(_QWORD *)(v0 + 24) + *(int *)(v0 + 176)) = v2;
  v1 = *(_QWORD *)(v0 + 64);
  if (v1)
    return (*(uint64_t (**)(_QWORD, uint64_t))(v0 + 8))(*(_QWORD *)(v0 + 56), v1);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char **v3;
  char *v4;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char *v12;
  int v13;
  char *v14;
  uint64_t v15;
  char v16;
  char v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  size_t v29;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  if ((*(_BYTE *)(v0 + 187) & 1) != 0)
  {
    v3 = (char **)(v1 + *(int *)(v2 + 36));
    v4 = *v3;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v3 = v4;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v4 + 2) + 1, 1, v4);
      *v3 = v4;
    }
    v7 = *((_QWORD *)v4 + 2);
    v6 = *((_QWORD *)v4 + 3);
    if (v7 >= v6 >> 1)
      v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 1, 1, v4);
    *((_QWORD *)v4 + 2) = v7 + 1;
    v4[v7 + 32] = -62;
    *v3 = v4;
    swift_bridgeObjectRetain();
    v8 = static String._fromUTF8Repairing(_:)();
    v10 = v9;
    swift_bridgeObjectRelease();
    v11 = swift_isUniquelyReferenced_nonNull_native();
    v12 = *v3;
    if (v11)
      goto LABEL_7;
    goto LABEL_11;
  }
  v13 = *(unsigned __int8 *)(v0 + 186);
  v3 = (char **)(v1 + *(int *)(v2 + 36));
  v14 = *v3;
  if (v13 != 133)
  {
    v18 = swift_isUniquelyReferenced_nonNull_native();
    *v3 = v14;
    if ((v18 & 1) == 0)
    {
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v14 + 2) + 1, 1, v14);
      *v3 = v14;
    }
    v20 = *((_QWORD *)v14 + 2);
    v19 = *((_QWORD *)v14 + 3);
    v21 = v20 + 1;
    if (v20 >= v19 >> 1)
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v19 > 1), v20 + 1, 1, v14);
    *((_QWORD *)v14 + 2) = v21;
    v14[v20 + 32] = -62;
    *v3 = v14;
    v22 = *((_QWORD *)v14 + 3);
    v23 = v20 + 2;
    if (v23 > (uint64_t)(v22 >> 1))
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v22 > 1), v23, 1, v14);
    *((_QWORD *)v14 + 2) = v23;
    v14[v21 + 32] = v13;
    goto LABEL_20;
  }
  if (*((_QWORD *)v14 + 2))
  {
    swift_bridgeObjectRetain();
    v8 = static String._fromUTF8Repairing(_:)();
    v10 = v15;
    swift_bridgeObjectRelease();
    v16 = swift_isUniquelyReferenced_nonNull_native();
    v12 = *v3;
    if ((v16 & 1) != 0)
    {
LABEL_7:
      specialized Array.replaceSubrange<A>(_:with:)(0, *((_QWORD *)v12 + 2));
      return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v8, v10);
    }
LABEL_11:
    *v3 = (char *)specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *((_QWORD *)v12 + 3) >> 1);
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v8, v10);
  }
  v24 = swift_isUniquelyReferenced_nonNull_native();
  v14 = *v3;
  if ((v24 & 1) == 0)
  {
    if (*((_QWORD *)v14 + 3) >= 2uLL)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
      v28 = (_QWORD *)swift_allocObject();
      v29 = _swift_stdlib_malloc_size(v28);
      v28[2] = 0;
      v28[3] = 2 * v29 - 64;
    }
    else
    {
      v28 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    *v3 = (char *)v28;
    swift_bridgeObjectRelease();
    return swift_task_switch();
  }
  v25 = *((_QWORD *)v14 + 2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25, 1, v14);
  if (!v25)
  {
LABEL_20:
    *v3 = v14;
    return swift_task_switch();
  }
  v26 = *((_QWORD *)v14 + 2);
  v27 = v26 - v25;
  if (v26 - v25 >= 0)
  {
    memmove(v14 + 32, &v14[v25 + 32], v26 - v25);
    *((_QWORD *)v14 + 2) = v27;
    goto LABEL_20;
  }
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 128) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  int v1;
  char **v2;
  char *v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char *v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = *(unsigned __int8 *)(v0 + 182);
  if ((*(_BYTE *)(v0 + 183) & 1) != 0)
  {
    v2 = (char **)(*(_QWORD *)(v0 + 24) + *(int *)(*(_QWORD *)(v0 + 16) + 36));
    v3 = *v2;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v2 = v3;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v3 + 2) + 1, 1, v3);
      *v2 = v3;
    }
    v6 = *((_QWORD *)v3 + 2);
    v5 = *((_QWORD *)v3 + 3);
    if (v6 >= v5 >> 1)
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v5 > 1), v6 + 1, 1, v3);
    *((_QWORD *)v3 + 2) = v6 + 1;
    v3[v6 + 32] = -30;
    *v2 = v3;
    swift_bridgeObjectRetain();
    v7 = static String._fromUTF8Repairing(_:)();
    v9 = v8;
    swift_bridgeObjectRelease();
    v10 = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v2;
    if (v10)
    {
      specialized Array.replaceSubrange<A>(_:with:)(0, *((_QWORD *)v11 + 2));
    }
    else
    {
      *v2 = (char *)specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *((_QWORD *)v11 + 3) >> 1);
      swift_bridgeObjectRelease();
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v7, v9);
  }
  else if (v1 == 128)
  {
    v12 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 136) = v12;
    *v12 = v0;
    v12[1] = AsyncLineSequence.AsyncIterator.next();
    return dispatch thunk of AsyncIteratorProtocol.next()();
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 24);
    v15 = *(int *)(*(_QWORD *)(v0 + 16) + 36);
    v16 = *(char **)(v14 + v15);
    v17 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v14 + v15) = v16;
    if ((v17 & 1) == 0)
    {
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v16 + 2) + 1, 1, v16);
      *(_QWORD *)(v14 + v15) = v16;
    }
    v19 = *((_QWORD *)v16 + 2);
    v18 = *((_QWORD *)v16 + 3);
    v20 = v19 + 1;
    if (v19 >= v18 >> 1)
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v18 > 1), v19 + 1, 1, v16);
    *((_QWORD *)v16 + 2) = v20;
    v16[v19 + 32] = -30;
    *(_QWORD *)(v14 + v15) = v16;
    v21 = *((_QWORD *)v16 + 3);
    v22 = v19 + 2;
    if (v22 > (uint64_t)(v21 >> 1))
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v22, 1, v16);
    *((_QWORD *)v16 + 2) = v22;
    v16[v20 + 32] = v1;
    *(_QWORD *)(v14 + v15) = v16;
    return swift_task_switch();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char **v3;
  char *v4;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char *v15;
  char v16;
  char *v17;
  uint64_t v18;
  char v19;
  char v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  char *v29;
  _QWORD *v30;
  size_t v31;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  if ((*(_BYTE *)(v0 + 185) & 1) != 0)
  {
    v3 = (char **)(v1 + *(int *)(v2 + 36));
    v4 = *v3;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v3 = v4;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v4 + 2) + 1, 1, v4);
      *v3 = v4;
    }
    v7 = *((_QWORD *)v4 + 2);
    v6 = *((_QWORD *)v4 + 3);
    v8 = v7 + 1;
    if (v7 >= v6 >> 1)
      v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 1, 1, v4);
    *((_QWORD *)v4 + 2) = v8;
    v4[v7 + 32] = -30;
    *v3 = v4;
    v9 = *((_QWORD *)v4 + 3);
    v10 = v7 + 2;
    if (v10 > (uint64_t)(v9 >> 1))
      v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10, 1, v4);
    *((_QWORD *)v4 + 2) = v10;
    v4[v8 + 32] = 0x80;
    *v3 = v4;
    swift_bridgeObjectRetain();
    v11 = static String._fromUTF8Repairing(_:)();
    v13 = v12;
    swift_bridgeObjectRelease();
    v14 = swift_isUniquelyReferenced_nonNull_native();
    v15 = *v3;
    if (v14)
      goto LABEL_9;
    goto LABEL_13;
  }
  v16 = *(_BYTE *)(v0 + 184);
  v3 = (char **)(v1 + *(int *)(v2 + 36));
  v17 = *v3;
  if ((v16 & 0xFE) == 0xA8)
  {
    if (*((_QWORD *)v17 + 2))
    {
      swift_bridgeObjectRetain();
      v11 = static String._fromUTF8Repairing(_:)();
      v13 = v18;
      swift_bridgeObjectRelease();
      v19 = swift_isUniquelyReferenced_nonNull_native();
      v15 = *v3;
      if ((v19 & 1) != 0)
      {
LABEL_9:
        specialized Array.replaceSubrange<A>(_:with:)(0, *((_QWORD *)v15 + 2));
        return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v11, v13);
      }
LABEL_13:
      *v3 = (char *)specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *((_QWORD *)v15 + 3) >> 1);
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v11, v13);
    }
    v28 = swift_isUniquelyReferenced_nonNull_native();
    v29 = *v3;
    if ((v28 & 1) != 0)
    {
      specialized Array.replaceSubrange<A>(_:with:)(0, *((_QWORD *)v29 + 2));
    }
    else
    {
      if (*((_QWORD *)v29 + 3) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        v30 = (_QWORD *)swift_allocObject();
        v31 = _swift_stdlib_malloc_size(v30);
        v30[2] = 0;
        v30[3] = 2 * v31 - 64;
      }
      else
      {
        v30 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      }
      *v3 = (char *)v30;
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v21 = swift_isUniquelyReferenced_nonNull_native();
    *v3 = v17;
    if ((v21 & 1) == 0)
    {
      v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v17 + 2) + 1, 1, v17);
      *v3 = v17;
    }
    v23 = *((_QWORD *)v17 + 2);
    v22 = *((_QWORD *)v17 + 3);
    v24 = v23 + 1;
    if (v23 >= v22 >> 1)
      v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v22 > 1), v23 + 1, 1, v17);
    *((_QWORD *)v17 + 2) = v24;
    v17[v23 + 32] = -30;
    *v3 = v17;
    v25 = *((_QWORD *)v17 + 3);
    v26 = v23 + 2;
    if ((uint64_t)(v23 + 2) > (uint64_t)(v25 >> 1))
      v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v25 > 1), v23 + 2, 1, v17);
    *((_QWORD *)v17 + 2) = v26;
    v17[v24 + 32] = 0x80;
    *v3 = v17;
    v27 = *((_QWORD *)v17 + 3);
    if ((uint64_t)(v23 + 3) > (uint64_t)(v27 >> 1))
      v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v23 + 3, 1, v17);
    *((_QWORD *)v17 + 2) = v23 + 3;
    v17[v26 + 32] = v16;
    *v3 = v17;
  }
  return swift_task_switch();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AsyncLineSequence.AsyncIterator.next()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *v3;
  v7 = swift_task_dealloc();
  if (!v2)
  {
    v7 = a1;
    v8 = a2;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
}

{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *v3;
  v7 = swift_task_dealloc();
  if (!v2)
  {
    v7 = a1;
    v8 = a2;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
}

{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *v3;
  v7 = swift_task_dealloc();
  if (!v2)
  {
    v7 = a1;
    v8 = a2;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncLineSequence<A>.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v4;
  *v4 = v2;
  v4[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncLineSequence<A>.AsyncIterator;
  return AsyncLineSequence.AsyncIterator.next()(a2);
}

{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v6 = *v3;
  v7 = *v3;
  swift_task_dealloc();
  if (!v2)
  {
    v8 = *(_QWORD **)(v6 + 16);
    *v8 = a1;
    v8[1] = a2;
  }
  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t _s10Foundation17AsyncLineSequenceV0B8IteratorVyx_GScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t AssociatedTypeWitness;
  _QWORD *v6;

  v4[2] = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4[3] = AssociatedTypeWitness;
  v4[4] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4[5] = swift_task_alloc();
  v6 = (_QWORD *)swift_task_alloc();
  v4[6] = v6;
  *v6 = v4;
  v6[1] = _s10Foundation17AsyncLineSequenceV0B8IteratorVyx_GScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF();
}

uint64_t _s10Foundation17AsyncLineSequenceV0B8IteratorVyx_GScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)*v1;
  v3 = (_QWORD *)*v1;
  swift_task_dealloc();
  if (v0)
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v2[4] + 32))(v2[2], v2[5], v2[3]);
  swift_task_dealloc();
  return ((uint64_t (*)(void))v3[1])();
}

uint64_t AsyncLineSequence.makeAsyncIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, __n128))(v7 + 16))((char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  v8 = *(_QWORD *)(a1 + 24);
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  result = type metadata accessor for AsyncLineSequence.AsyncIterator(0, v4, v8, v9);
  *(_QWORD *)(a2 + *(int *)(result + 36)) = MEMORY[0x1E0DEE9D8];
  *(_WORD *)(a2 + *(int *)(result + 40)) = 256;
  return result;
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance AsyncLineSequence<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  AsyncLineSequence.makeAsyncIterator()(a1, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v2, a1);
}

uint64_t AsyncSequence<>.lines.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2);
}

uint64_t type metadata accessor for AsyncLineSequence.AsyncIterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncLineSequence.AsyncIterator);
}

uint64_t associated type witness table accessor for AsyncIteratorProtocol.Failure : Error in AsyncLineSequence<A>.AsyncIterator()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return swift_getAssociatedConformanceWitness();
}

void associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in AsyncLineSequence<A>()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t getEnumTagSinglePayload for AsyncLineSequence(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_181AE640C + 4 * byte_18206C020[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for AsyncLineSequence(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for AsyncLineSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncLineSequence);
}

uint64_t type metadata completion function for AsyncLineSequence.AsyncIterator()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AsyncLineSequence.AsyncIterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 10 > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    v10 = ((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    *(_WORD *)(v10 + 8) = *(_WORD *)(v11 + 8);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for AsyncLineSequence.AsyncIterator(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AsyncLineSequence.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_WORD *)(v7 + 8) = *(_WORD *)(v8 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AsyncLineSequence.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(v7 + 8) = *(_WORD *)(v8 + 8);
  return a1;
}

uint64_t initializeWithTake for AsyncLineSequence.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_WORD *)(v7 + 8) = *(_WORD *)(v8 + 8);
  return a1;
}

uint64_t assignWithTake for AsyncLineSequence.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  swift_bridgeObjectRelease();
  *(_WORD *)(v7 + 8) = *(_WORD *)(v8 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncLineSequence.AsyncIterator(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v13;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 < a2)
  {
    v8 = ((v7 + 7) & 0xFFFFFFF8) + 10;
    if (v8 <= 3)
      v9 = ((a2 - v6 + 0xFFFF) >> (8 * v8)) + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    __asm { BR              X15 }
  }
  if (v5 >= 0x7FFFFFFF)
    return (*(uint64_t (**)(uint64_t))(v4 + 48))(a1);
  v13 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
  if (v13 >= 0xFFFFFFFF)
    LODWORD(v13) = -1;
  return (v13 + 1);
}

void storeEnumTagSinglePayload for AsyncLineSequence.AsyncIterator(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84) <= 0x7FFFFFFFu)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 10;
  if (v7 >= a3)
  {
    v11 = 0u;
    if (v7 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v8 <= 3)
      v9 = ((a3 - v7 + 0xFFFF) >> (8 * v8)) + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (v7 >= a2)
LABEL_17:
      __asm { BR              X12 }
  }
  v12 = ~v7 + a2;
  bzero(a1, v8);
  if (v8 > 3)
    *a1 = v12;
  else
    *(_WORD *)a1 = v12;
  __asm { BR              X11 }
}

void sub_181AE6CB4(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + v2) = a1;
  JUMPOUT(0x181AE6D2CLL);
}

void sub_181AE6CBC()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x181AE6CC4);
  JUMPOUT(0x181AE6D2CLL);
}

void sub_181AE6D08(__int16 a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_WORD *)(v1 + v2) = a1;
  JUMPOUT(0x181AE6D2CLL);
}

void sub_181AE6D10(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = a1;
  JUMPOUT(0x181AE6D2CLL);
}

uint64_t sub_181AE6D18@<X0>(unsigned int a1@<W2>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v3 + v5) = 0;
  if (!(_DWORD)v4)
    JUMPOUT(0x181AE6D2CLL);
  if (a1 < 0x7FFFFFFF)
  {
    if ((v4 & 0x80000000) == 0)
      JUMPOUT(0x181AE6D28);
    JUMPOUT(0x181AE6D24);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))(v3, v4);
}

id NSURLSession.dataTaskPublisher(for:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  uint64_t v4;
  id v6;

  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C92C28]), sel_initWithURL_cachePolicy_timeoutInterval_, *a1, 0, 60.0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v3;
  *a2 = v4;
  a2[1] = (uint64_t)v6;
  return v6;
}

_QWORD *NSURLSession.DataTaskPublisher.init(request:session:)@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = *result;
  a3[1] = a2;
  return result;
}

id NSURLSession.dataTaskPublisher(for:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  id v4;

  *a2 = *a1;
  a2[1] = v2;
  swift_retain();
  return v4;
}

uint64_t NSURLSession.DataTaskPublisher.request.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_retain();
}

id NSURLSession.DataTaskPublisher.session.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 8);
}

uint64_t NSURLSession.DataTaskPublisher.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  void *v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v6 = (void *)v4[1];
  *(_QWORD *)&v11 = *v4;
  *((_QWORD *)&v11 + 1) = v6;
  v7 = type metadata accessor for NSURLSession.DataTaskPublisher.Inner(0, a2, a3, a4);
  swift_allocObject();
  swift_retain();
  v8 = v6;
  v9 = specialized NSURLSession.DataTaskPublisher.Inner.init(_:_:)(&v11, a1);
  v12 = v7;
  v13 = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSURLSession.DataTaskPublisher.Inner<A>, v7);
  *(_QWORD *)&v11 = v9;
  dispatch thunk of Subscriber.receive(subscription:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
}

uint64_t type metadata accessor for NSURLSession.DataTaskPublisher.Inner(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NSURLSession.DataTaskPublisher.Inner);
}

void NSURLSession.DataTaskPublisher.Inner.customMirror.getter(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *boxed_opaque_existential_1;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  os_unfair_lock_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;

  v2 = v1;
  v24 = a1;
  v23 = type metadata accessor for Mirror.AncestorRepresentation();
  v3 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = (os_unfair_lock_t)v1[2];
  os_unfair_lock_lock(v22);
  v25 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_182065BC0;
  *(_QWORD *)(v9 + 32) = 1802723700;
  *(_QWORD *)(v9 + 40) = 0xE400000000000000;
  v10 = *v1;
  v11 = *(void **)((char *)v2 + *(_QWORD *)(v10 + 128));
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSURLSessionDataTask?);
  *(_QWORD *)(v9 + 48) = v11;
  *(_QWORD *)(v9 + 72) = v12;
  *(_QWORD *)(v9 + 80) = 0x657274736E776F64;
  *(_QWORD *)(v9 + 88) = 0xEA00000000006D61;
  v13 = (char *)v2 + *(_QWORD *)(v10 + 112);
  v14 = type metadata accessor for Optional();
  *(_QWORD *)(v9 + 120) = v14;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v9 + 96));
  (*(void (**)(uint64_t *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(boxed_opaque_existential_1, v13, v14);
  *(_QWORD *)(v9 + 128) = 0x746E65726170;
  *(_QWORD *)(v9 + 136) = 0xE600000000000000;
  v16 = (void *)v2[3];
  v17 = (void *)v2[4];
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSURLSession.DataTaskPublisher?);
  *(_QWORD *)(v9 + 144) = v16;
  *(_QWORD *)(v9 + 152) = v17;
  *(_QWORD *)(v9 + 168) = v18;
  *(_QWORD *)(v9 + 176) = 0x646E616D6564;
  *(_QWORD *)(v9 + 184) = 0xE600000000000000;
  v19 = *(_QWORD *)((char *)v2 + *(_QWORD *)(*v2 + 120));
  *(_QWORD *)(v9 + 216) = MEMORY[0x1E0C95D60];
  *(_QWORD *)(v9 + 192) = v19;
  v20 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v8, 1, 1, v20);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E0DEDFE8], v23);
  v21 = v11;
  swift_retain();
  outlined copy of NSURLSession.DataTaskPublisher?(v16, v17);
  Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  os_unfair_lock_unlock(v22);
}

void NSURLSession.DataTaskPublisher.Inner.playgroundDescription.getter(_QWORD *a1@<X8>)
{
  a1[3] = MEMORY[0x1E0DEA968];
  *a1 = 0xD000000000000011;
  a1[1] = 0x800000018206C170;
}

uint64_t NSURLSession.DataTaskPublisher.Inner.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x186DA9E78](*(_QWORD *)(v0 + 16), -1, -1);
  outlined consume of NSURLSession.DataTaskPublisher?(*(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 112);
  v2 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

void NSURLSession.DataTaskPublisher.Inner.request(_:)(uint64_t a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void *v17;
  id v18;
  _QWORD aBlock[7];

  static Subscribers.Demand.unlimited.getter();
  if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0)
    goto LABEL_4;
  if (a1 < 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (!a1)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
LABEL_4:
  v3 = *(os_unfair_lock_s **)(v1 + 16);
  os_unfair_lock_lock(v3);
  v4 = *(_QWORD *)(v1 + 24);
  if (!v4)
  {
    os_unfair_lock_unlock(v3);
    return;
  }
  v5 = *(void **)(v1 + 32);
  v6 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  if (*(_QWORD *)(v1 + v6))
  {
    outlined copy of NSURLSession.DataTaskPublisher?(*(id *)(v1 + 24), *(void **)(v1 + 32));
    swift_retain();
  }
  else
  {
    v7 = *(void **)(v4 + 16);
    outlined copy of NSURLSession.DataTaskPublisher?(*(id *)(v1 + 24), *(void **)(v1 + 32));
    swift_retain();
    objc_msgSend(v7, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMutableURLRequest();
    swift_dynamicCast();
    v8 = (void *)aBlock[6];
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = partial apply for implicit closure #4 in implicit closure #3 in NSURLSession.DataTaskPublisher.Inner.request(_:);
    *(_QWORD *)(v9 + 24) = v1;
    aBlock[4] = partial apply for closure #1 in NSRunLoop.schedule(options:_:);
    aBlock[5] = v9;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Data?, @guaranteed NSURLResponse?, @guaranteed Error?) -> ();
    aBlock[3] = &block_descriptor_3;
    v10 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    v11 = objc_msgSend(v5, sel_dataTaskWithRequest_completionHandler_, v8, v10);
    _Block_release(v10);

    v12 = *(void **)(v1 + v6);
    *(_QWORD *)(v1 + v6) = v11;

  }
  v13 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  v14 = *(_QWORD *)(v1 + v13);
  static Subscribers.Demand.unlimited.getter();
  if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0)
    goto LABEL_12;
  static Subscribers.Demand.unlimited.getter();
  v16 = static Subscribers.Demand.== infix(_:_:)();
  v15 = static Subscribers.Demand.unlimited.getter();
  if ((v16 & 1) != 0)
  {
    while (1)
    {
      *(_QWORD *)(v1 + v13) = v15;
LABEL_12:
      v17 = *(void **)(v1 + v6);
      if (v17)
        goto LABEL_13;
LABEL_19:
      __break(1u);
LABEL_20:
      if (v15 < 0)
      {
        __break(1u);
        goto LABEL_22;
      }
    }
  }
  if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0)
  {
LABEL_18:
    v15 = static Subscribers.Demand.unlimited.getter();
    *(_QWORD *)(v1 + v13) = v15;
    v17 = *(void **)(v1 + v6);
    if (!v17)
      goto LABEL_19;
LABEL_13:
    v18 = v17;
    os_unfair_lock_unlock(v3);
    objc_msgSend(v18, sel_resume);
    swift_release();

    outlined consume of NSURLSession.DataTaskPublisher?(v4, v5);
    return;
  }
  if (((v14 | a1) & 0x8000000000000000) == 0)
  {
    v15 = v14 + a1;
    if (!__OFADD__(v14, a1))
      goto LABEL_20;
    goto LABEL_18;
  }
LABEL_24:
  __break(1u);
}

void implicit closure #4 in implicit closure #3 in NSURLSession.DataTaskPublisher.Inner.request(_:)(uint64_t a1, unint64_t a2, void *a3, void *a4, _QWORD *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  os_unfair_lock_s *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  id v29;
  char *v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  void *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  id v53;
  void *v54;

  v48 = a4;
  v49 = a3;
  v44 = a1;
  v45 = a2;
  v46 = *a5;
  v6 = *(_QWORD *)(v46 + 80);
  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v41 - v9;
  v50 = v6;
  v11 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (os_unfair_lock_s *)a5[2];
  os_unfair_lock_lock(v15);
  v47 = *(_QWORD *)(*a5 + 120);
  v16 = *(_QWORD *)((char *)a5 + v47);
  static Subscribers.Demand.unlimited.getter();
  if ((static Subscribers.Demand.== infix(_:_:)() & 1) == 0)
  {
    if (v16 < 0)
    {
      __break(1u);
      goto LABEL_28;
    }
    if (!v16)
      goto LABEL_7;
  }
  v17 = a5[3];
  if (!v17)
  {
LABEL_7:
    os_unfair_lock_unlock(v15);
    return;
  }
  v42 = (void *)a5[4];
  v43 = v14;
  v18 = (char *)a5 + *(_QWORD *)(*a5 + 112);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v18, v7);
  v19 = v50;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v50) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v43, v10, v19);
  a5[3] = 0;
  a5[4] = 0;
  outlined consume of NSURLSession.DataTaskPublisher?(v17, v42);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v18, v7);
  v20 = v11;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v18, 1, 1, v19);
  *(_QWORD *)((char *)a5 + v47) = 0;
  v21 = *(_QWORD *)(*a5 + 128);
  v22 = *(void **)((char *)a5 + v21);
  *(_QWORD *)((char *)a5 + v21) = 0;

  os_unfair_lock_unlock(v15);
  v23 = v19;
  if (v49)
  {
    v24 = v48;
    if (!v48)
    {
      v26 = v44;
      v25 = v45;
      if (v45 >> 60 == 15)
        v27 = 0;
      else
        v27 = v44;
      if (v45 >> 60 == 15)
        v28 = 0xC000000000000000;
      else
        v28 = v45;
      v51 = v27;
      v52 = v28;
      v53 = v49;
      v29 = v49;
      outlined copy of Data?(v26, v25);
      v30 = v43;
      dispatch thunk of Subscriber.receive(_:)();
      outlined consume of Data._Representation(v27, v28);

      v51 = 0;
      dispatch thunk of Subscriber.receive(completion:)();

      goto LABEL_25;
    }
  }
  else
  {
    v24 = v48;
    if (!v48)
      goto LABEL_20;
  }
  v51 = (uint64_t)v24;
  v31 = v24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (!swift_dynamicCast())
  {
LABEL_20:
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURLErrorDomain"));
    v33 = objc_allocWithZone((Class)NSError);
    v34 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v32 = objc_msgSend(v33, sel_initWithDomain_code_userInfo_, v34, -1, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v35 = objc_msgSend(v32, sel_domain);
    v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
    v38 = v37;

    if (v36 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURLErrorDomain")) && v38 == v39)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_24;
    }
    v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v40 & 1) != 0)
      goto LABEL_24;
LABEL_28:
    __break(1u);
    return;
  }
  v32 = v54;
LABEL_24:
  v51 = (uint64_t)v32;
  v30 = v43;
  dispatch thunk of Subscriber.receive(completion:)();

LABEL_25:
  (*(void (**)(char *, uint64_t))(v20 + 8))(v30, v23);
}

void NSURLSession.DataTaskPublisher.Inner.cancel()()
{
  _QWORD *v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  void *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  v1 = *v0;
  v2 = (os_unfair_lock_s *)v0[2];
  os_unfair_lock_lock(v2);
  v3 = v0[3];
  if (v3)
  {
    v4 = (void *)v0[4];
    v0[3] = 0;
    v0[4] = 0;
    outlined consume of NSURLSession.DataTaskPublisher?(v3, v4);
    v5 = (char *)v0 + *(_QWORD *)(*v0 + 112);
    v6 = *(_QWORD *)(v1 + 80);
    v7 = type metadata accessor for Optional();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v5, v7);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
    *(_QWORD *)((char *)v0 + *(_QWORD *)(*v0 + 120)) = 0;
    v8 = *(_QWORD *)(*v0 + 128);
    v9 = *(id *)((char *)v0 + v8);
    *(_QWORD *)((char *)v0 + v8) = 0;
    os_unfair_lock_unlock(v2);
    if (v9)
    {
      objc_msgSend(v9, sel_cancel);

    }
  }
  else
  {
    os_unfair_lock_unlock(v2);
  }
}

void protocol witness for Subscription.request(_:) in conformance NSURLSession.DataTaskPublisher.Inner<A>(uint64_t a1)
{
  NSURLSession.DataTaskPublisher.Inner.request(_:)(a1);
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance NSURLSession.DataTaskPublisher.Inner<A>()
{
  return 0xD000000000000011;
}

void protocol witness for CustomReflectable.customMirror.getter in conformance NSURLSession.DataTaskPublisher.Inner<A>(uint64_t a1@<X8>)
{
  NSURLSession.DataTaskPublisher.Inner.customMirror.getter(a1);
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance NSURLSession.DataTaskPublisher.Inner<A>(_QWORD *a1@<X8>)
{
  NSURLSession.DataTaskPublisher.Inner.playgroundDescription.getter(a1);
}

void protocol witness for Cancellable.cancel() in conformance NSURLSession.DataTaskPublisher.Inner<A>()
{
  NSURLSession.DataTaskPublisher.Inner.cancel()();
}

_QWORD *specialized NSURLSession.DataTaskPublisher.Inner.init(_:_:)(_OWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(char *, uint64_t, uint64_t, uint64_t);
  _DWORD *v9;
  uint64_t v10;
  void *v11;
  char *v12;
  uint64_t v13;

  v5 = *v2;
  v2[3] = 0;
  v2[4] = 0;
  v6 = *(_QWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
  v8((char *)v2 + *(_QWORD *)(v5 + 112), 1, 1, v6);
  *(_QWORD *)((char *)v2 + *(_QWORD *)(*v2 + 128)) = 0;
  v9 = (_DWORD *)swift_slowAlloc();
  *v9 = 0;
  v2[2] = v9;
  v10 = v2[3];
  v11 = (void *)v2[4];
  *(_OWORD *)(v2 + 3) = *a1;
  outlined consume of NSURLSession.DataTaskPublisher?(v10, v11);
  v12 = (char *)v2 + *(_QWORD *)(*v2 + 112);
  v13 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v12, a2, v6);
  v8(v12, 0, 1, v6);
  *(_QWORD *)((char *)v2 + *(_QWORD *)(*v2 + 120)) = 0;
  return v2;
}

_QWORD *initializeBufferWithCopyOfBuffer for NSURLSession.DataTaskPublisher(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  id v4;

  v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  v4 = v3;
  return a1;
}

void destroy for NSURLSession.DataTaskPublisher(uint64_t a1)
{
  swift_release();

}

_QWORD *assignWithCopy for NSURLSession.DataTaskPublisher(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v4 = (void *)a2[1];
  v5 = (void *)a1[1];
  a1[1] = v4;
  v6 = v4;

  return a1;
}

uint64_t assignWithTake for NSURLSession.DataTaskPublisher(uint64_t a1, _OWORD *a2)
{
  void *v4;

  swift_release();
  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

ValueMetadata *type metadata accessor for NSURLSession.DataTaskPublisher()
{
  return &type metadata for NSURLSession.DataTaskPublisher;
}

uint64_t type metadata completion function for NSURLSession.DataTaskPublisher.Inner()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

void base witness table accessor for Cancellable in NSURLSession.DataTaskPublisher.Inner<A>()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomCombineIdentifierConvertible in NSURLSession.DataTaskPublisher.Inner<A>()
{
  JUMPOUT(0x186DA9D64);
}

void partial apply for implicit closure #4 in implicit closure #3 in NSURLSession.DataTaskPublisher.Inner.request(_:)(uint64_t a1, unint64_t a2, void *a3, void *a4)
{
  _QWORD *v4;

  implicit closure #4 in implicit closure #3 in NSURLSession.DataTaskPublisher.Inner.request(_:)(a1, a2, a3, a4, v4);
}

id outlined copy of NSURLSession.DataTaskPublisher?(id result, void *a2)
{
  if (result)
  {
    swift_retain();
    return a2;
  }
  return result;
}

void outlined consume of NSURLSession.DataTaskPublisher?(uint64_t a1, void *a2)
{
  if (a1)
  {
    swift_release();

  }
}

unint64_t type metadata accessor for NSMutableURLRequest()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSMutableURLRequest;
  if (!lazy cache variable for type metadata for NSMutableURLRequest)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
  }
  return result;
}

uint64_t sub_181AE7D9C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t ICUPatternGenerator.init(localeIdentifier:calendarIdentifier:)(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v3;
  uint64_t v4;
  char v7;
  uint64_t v8;
  _QWORD __dst[44];
  _QWORD v11[25];
  __int16 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD __src[22];
  uint64_t v23;

  v4 = v3;
  v23 = *MEMORY[0x1E0C80C00];
  v7 = *a3;
  swift_bridgeObjectRetain();
  Locale.Components.init(identifier:)(a1, a2, v11);
  __src[0] = *(_OWORD *)v11;
  __src[1] = *(_OWORD *)&v11[2];
  __src[2] = *(_OWORD *)&v11[4];
  __src[3] = *(_OWORD *)&v11[6];
  __src[4] = *(_OWORD *)&v11[8];
  __src[5] = *(_OWORD *)&v11[10];
  LOBYTE(__src[6]) = v7;
  *(_OWORD *)((char *)&__src[6] + 8) = *(_OWORD *)&v11[13];
  *(_OWORD *)((char *)&__src[7] + 8) = *(_OWORD *)&v11[15];
  *(_OWORD *)((char *)&__src[8] + 8) = *(_OWORD *)&v11[17];
  *(_OWORD *)((char *)&__src[9] + 8) = *(_OWORD *)&v11[19];
  *(_OWORD *)((char *)&__src[10] + 8) = *(_OWORD *)&v11[21];
  *(_OWORD *)((char *)&__src[11] + 8) = *(_OWORD *)&v11[23];
  WORD4(__src[12]) = v12;
  __src[13] = v13;
  __src[14] = v14;
  __src[15] = v15;
  __src[16] = v16;
  __src[17] = v17;
  __src[18] = v18;
  __src[19] = v19;
  __src[20] = v20;
  __src[21] = v21;
  memcpy(__dst, __src, sizeof(__dst));
  Locale.Components.icuIdentifier.getter();
  outlined release of Locale.Components((uint64_t *)__src);
  swift_bridgeObjectRelease();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v8 = udatpg_open();
  swift_release();
  if (v8)
  {
    *(_QWORD *)(v4 + 16) = v8;
  }
  else
  {
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v4;
}

uint64_t ICUPatternGenerator.__deallocating_deinit()
{
  udatpg_close();
  return swift_deallocClassInstance();
}

Swift::String_optional __swiftcall ICUPatternGenerator._patternForSkeleton(_:)(Swift::String a1)
{
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  Swift::String_optional result;
  _DWORD v10[22];
  uint64_t v11[3];

  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  v11[2] = *MEMORY[0x1E0C80C00];
  v10[21] = 0;
  if (udatpg_clone())
  {
    swift_bridgeObjectRetain();
    v5 = specialized _copyCollectionToContiguousArray<A>(_:)(countAndFlagsBits, (unint64_t)object);
    swift_bridgeObjectRelease();
    v6 = swift_bridgeObjectRetain_n();
    MEMORY[0x1E0C80A78](v6);
    swift_bridgeObjectRetain();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)v10, (uint64_t)v5, v11);
    v3 = v11[0];
    v4 = v11[1];
    swift_release_n();
    udatpg_close();
  }
  else
  {
    udatpg_close();
    v3 = 0;
    v4 = 0;
  }
  v7 = v3;
  v8 = (void *)v4;
  result.value._object = v8;
  result.value._countAndFlagsBits = v7;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ICUPatternGenerator.PatternGeneratorInfo()
{
  uint64_t v0;
  Swift::UInt v1;

  v1 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ICUPatternGenerator.PatternGeneratorInfo()
{
  uint64_t v0;
  Swift::UInt v1;

  v1 = *(unsigned __int8 *)(v0 + 16);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ICUPatternGenerator.PatternGeneratorInfo()
{
  uint64_t v0;
  Swift::UInt v1;

  v1 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ICUPatternGenerator.PatternGeneratorInfo(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  char v5;
  _BOOL8 result;

  v2 = *(unsigned __int8 *)(a1 + 16);
  v3 = *(unsigned __int8 *)(a2 + 16);
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8))
    return v2 == v3;
  v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  result = 0;
  if ((v5 & 1) != 0)
    return v2 == v3;
  return result;
}

uint64_t specialized static ICUPatternGenerator.localizedPattern(symbols:locale:calendar:)(uint64_t a1, os_unfair_lock_s **a2, uint64_t a3)
{
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t ObjectType;
  uint64_t (*v9)(uint64_t, os_unfair_lock_s *);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t *__return_ptr, uint64_t, uint64_t);
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  os_unfair_lock_s *v20;
  uint64_t v21;
  os_unfair_lock_s *v22;
  void *v23;
  os_unfair_lock_s *v24;
  unsigned __int8 v25;
  char isUniquelyReferenced_nonNull_native;
  char *object;
  unsigned __int8 v28;
  char *v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  int64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int64_t v58;
  unint64_t v59;
  int64_t v60;
  int64_t v61;
  char *v62;
  os_unfair_lock_s *v63;
  void *v64;
  uint64_t countAndFlagsBits;
  Swift::String v66;
  Swift::String_optional v67;
  uint64_t result;
  unint64_t v69;
  int64_t v70;
  char *__src;
  uint64_t v72;
  os_unfair_lock_s *v73;
  uint64_t v74;
  unsigned __int8 v75;
  Swift::String v76;
  uint64_t v77;
  os_unfair_lock_s *v78;
  void *v79;
  unsigned __int8 v80;
  uint64_t v81;

  v3 = a2[1];
  v4 = *(_QWORD *)(a3 + 8);
  v78 = *a2;
  v79 = v3;
  Date.FormatStyle.DateFieldCollection.formatterTemplate(overridingDayPeriodWithLocale:)();
  v76._countAndFlagsBits = v5;
  v7 = v6;
  ObjectType = swift_getObjectType();
  v9 = *(uint64_t (**)(uint64_t, os_unfair_lock_s *))&v3[118]._os_unfair_lock_opaque;
  swift_unknownObjectRetain();
  v10 = v9(ObjectType, v3);
  v12 = v11;
  swift_unknownObjectRelease();
  v13 = swift_getObjectType();
  v14 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 24);
  swift_unknownObjectRetain();
  v14(&v81, v13, v4);
  swift_unknownObjectRelease();
  v15 = v81;
  v16 = one-time initialization token for _patternGeneratorCache;
  swift_bridgeObjectRetain();
  if (v16 != -1)
    swift_once();
  v18 = static ICUPatternGenerator._patternGeneratorCache;
  v17 = *(_QWORD *)algn_1EDC47D58;
  v78 = (os_unfair_lock_s *)v10;
  v79 = (void *)v12;
  v80 = v15;
  v19 = *(_QWORD *)algn_1EDC47D58 + 16;
  v20 = (os_unfair_lock_s *)(*(_QWORD *)algn_1EDC47D58 + 24);
  swift_retain_n();
  os_unfair_lock_lock(v20);
  specialized closure #1 in FormatterCache.formatter(for:creator:)(v19, (uint64_t)&v78, &v77);
  os_unfair_lock_unlock(v20);
  swift_release();
  v21 = v77;
  if (v77 != 1)
    goto LABEL_53;
  LOBYTE(v76._object) = v15;
  type metadata accessor for ICUPatternGenerator();
  swift_allocObject();
  swift_bridgeObjectRetain();
  v21 = ICUPatternGenerator.init(localeIdentifier:calendarIdentifier:)(v10, v12, (char *)&v76._object);
  swift_retain();
  os_unfair_lock_lock(v20);
  v22 = v20;
  v23 = v7;
  if (v18 >= *(_QWORD *)(*(_QWORD *)(v17 + 16) + 16))
    swift_bridgeObjectRetain();
  else
    *(_QWORD *)v19 = MEMORY[0x1E0DEE9E0];
  v24 = v78;
  v7 = v79;
  v25 = v80;
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v76._object = *(void **)v19;
  object = (char *)v76._object;
  *(_QWORD *)v19 = 0x8000000000000000;
  v73 = v24;
  v74 = (uint64_t)v7;
  v75 = v25;
  v28 = v25;
  v29 = object;
  v31 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v24, (uint64_t)v7, v28);
  v32 = *((_QWORD *)v29 + 2);
  v33 = (v30 & 1) == 0;
  v34 = v32 + v33;
  if (__OFADD__(v32, v33))
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v19) = v30;
    if (*((_QWORD *)v29 + 3) < v34)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v34, isUniquelyReferenced_nonNull_native);
      v35 = (char *)v76._object;
      v37 = (uint64_t)v24;
      v36 = (uint64_t)v7;
      v38 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v24, (uint64_t)v7, v75);
      if ((v19 & 1) != (v39 & 1))
        goto LABEL_60;
      v31 = v38;
      v7 = v23;
      v24 = v22;
      if ((v19 & 1) == 0)
        goto LABEL_51;
LABEL_14:
      v40 = *((_QWORD *)v35 + 7);
      v41 = 8 * v31;
      swift_release();
      *(_QWORD *)(v40 + v41) = v21;
LABEL_52:
      *(_QWORD *)(v17 + 16) = v35;
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v24);
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of ICUDateIntervalFormatter??(v77);
LABEL_53:
      swift_release();
      swift_bridgeObjectRelease_n();
      if (!v21)
        return v76._countAndFlagsBits;
      countAndFlagsBits = v76._countAndFlagsBits;
      v66._countAndFlagsBits = v76._countAndFlagsBits;
      v66._object = v7;
      v67 = ICUPatternGenerator._patternForSkeleton(_:)(v66);
      swift_release();
      if (v67.value._object)
      {
        swift_bridgeObjectRelease();
        return v67.value._countAndFlagsBits;
      }
      return countAndFlagsBits;
    }
    v7 = v23;
    v24 = v22;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v35 = v29;
      v37 = (uint64_t)v73;
      v36 = v74;
      if ((v30 & 1) != 0)
        goto LABEL_14;
LABEL_51:
      specialized _NativeDictionary._insert(at:key:value:)(v31, v37, v36, v75, v21, v35);
      swift_bridgeObjectRetain();
      goto LABEL_52;
    }
  }
  v69 = v31;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUPatternGenerator.PatternGeneratorInfo, ICUPatternGenerator?>);
  v42 = static _DictionaryStorage.copy(original:)();
  v35 = (char *)v42;
  if (!*((_QWORD *)v29 + 2))
  {
LABEL_50:
    swift_bridgeObjectRelease();
    v37 = (uint64_t)v73;
    v36 = v74;
    v31 = v69;
    if ((v19 & 1) != 0)
      goto LABEL_14;
    goto LABEL_51;
  }
  v43 = (char *)(v42 + 64);
  __src = v29 + 64;
  v44 = (unint64_t)((1 << v35[32]) + 63) >> 6;
  if (v35 != v29 || v43 >= &__src[8 * v44])
    memmove(v43, __src, 8 * v44);
  v45 = 0;
  *((_QWORD *)v35 + 2) = *((_QWORD *)v29 + 2);
  v46 = 1 << v29[32];
  v47 = -1;
  if (v46 < 64)
    v47 = ~(-1 << v46);
  v48 = v47 & *((_QWORD *)v29 + 8);
  v70 = (unint64_t)(v46 + 63) >> 6;
  while (1)
  {
    if (v48)
    {
      v72 = (v48 - 1) & v48;
      v49 = v45;
      v50 = __clz(__rbit64(v48)) | (v45 << 6);
      goto LABEL_24;
    }
    v58 = v45 + 1;
    if (__OFADD__(v45, 1))
    {
      __break(1u);
      goto LABEL_59;
    }
    if (v58 >= v70)
      goto LABEL_50;
    v59 = *(_QWORD *)&__src[8 * v58];
    v60 = v45 + 1;
    if (!v59)
    {
      v60 = v58 + 1;
      if (v58 + 1 >= v70)
        goto LABEL_50;
      v59 = *(_QWORD *)&__src[8 * v60];
      if (!v59)
      {
        v60 = v58 + 2;
        if (v58 + 2 >= v70)
          goto LABEL_50;
        v59 = *(_QWORD *)&__src[8 * v60];
        if (!v59)
        {
          v60 = v58 + 3;
          if (v58 + 3 >= v70)
            goto LABEL_50;
          v59 = *(_QWORD *)&__src[8 * v60];
          if (!v59)
          {
            v60 = v58 + 4;
            if (v58 + 4 >= v70)
              goto LABEL_50;
            v59 = *(_QWORD *)&__src[8 * v60];
            if (!v59)
            {
              v60 = v58 + 5;
              if (v58 + 5 >= v70)
                goto LABEL_50;
              v59 = *(_QWORD *)&__src[8 * v60];
              if (!v59)
              {
                v60 = v58 + 6;
                if (v58 + 6 >= v70)
                  goto LABEL_50;
                v59 = *(_QWORD *)&__src[8 * v60];
                if (!v59)
                {
                  v60 = v58 + 7;
                  if (v58 + 7 >= v70)
                    goto LABEL_50;
                  v59 = *(_QWORD *)&__src[8 * v60];
                  if (!v59)
                    break;
                }
              }
            }
          }
        }
      }
    }
LABEL_49:
    v72 = (v59 - 1) & v59;
    v49 = v60;
    v50 = __clz(__rbit64(v59)) + (v60 << 6);
LABEL_24:
    v51 = 24 * v50;
    v52 = *((_QWORD *)v29 + 6) + 24 * v50;
    v53 = *(_QWORD *)v52;
    v54 = *(_QWORD *)(v52 + 8);
    LOBYTE(v52) = *(_BYTE *)(v52 + 16);
    v55 = 8 * v50;
    v56 = *(_QWORD *)(*((_QWORD *)v29 + 7) + v55);
    v57 = *((_QWORD *)v35 + 6) + v51;
    *(_QWORD *)v57 = v53;
    *(_QWORD *)(v57 + 8) = v54;
    *(_BYTE *)(v57 + 16) = v52;
    *(_QWORD *)(*((_QWORD *)v35 + 7) + v55) = v56;
    swift_retain();
    swift_bridgeObjectRetain();
    v45 = v49;
    v48 = v72;
  }
  v61 = v58 + 8;
  if (v61 >= v70)
    goto LABEL_50;
  v62 = v29;
  v63 = v24;
  v64 = v7;
  v59 = *(_QWORD *)&__src[8 * v61];
  if (v59)
  {
    v60 = v61;
    goto LABEL_49;
  }
  while (1)
  {
    v60 = v61 + 1;
    if (__OFADD__(v61, 1))
      break;
    v7 = v64;
    v24 = v63;
    v29 = v62;
    if (v60 >= v70)
      goto LABEL_50;
    v59 = *(_QWORD *)&__src[8 * v60];
    ++v61;
    if (v59)
      goto LABEL_49;
  }
LABEL_59:
  __break(1u);
LABEL_60:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ICUPatternGenerator.PatternGeneratorInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ICUPatternGenerator.PatternGeneratorInfo(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for ICUPatternGenerator.PatternGeneratorInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for ICUPatternGenerator.PatternGeneratorInfo(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ICUPatternGenerator.PatternGeneratorInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

BOOL specialized static Comparable.> infix(_:_:)(double a1, double a2, double a3, double a4)
{
  _BOOL8 result;

  result = a3 < a1;
  if (a1 >= a3 && a1 <= a3)
    return a4 < a2;
  return result;
}

double DateInterval.start.setter(double *a1)
{
  _QWORD *v1;
  double result;

  result = *a1;
  *v1 = *(_QWORD *)a1;
  return result;
}

uint64_t (*DateInterval.start.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

double *DateInterval.end.setter(double *result)
{
  double *v1;
  double v2;

  if (*result < *v1 || (v2 = *result - *v1, v2 < 0.0))
    __break(1u);
  else
    v1[1] = v2;
  return result;
}

void DateInterval.duration.setter(double a1)
{
  uint64_t v1;

  if (a1 < 0.0)
    __break(1u);
  else
    *(double *)(v1 + 8) = a1;
}

uint64_t (*DateInterval.end.modify(uint64_t a1))(uint64_t result, char a2)
{
  double *v1;

  *(_QWORD *)(a1 + 8) = v1;
  *(double *)a1 = *v1 + v1[1];
  return DateInterval.end.modify;
}

uint64_t DateInterval.end.modify(uint64_t result, char a2)
{
  double *v2;
  BOOL v3;
  double v4;

  v2 = *(double **)(result + 8);
  v3 = *(double *)result < *v2;
  v4 = *(double *)result - *v2;
  if (v4 < 0.0)
    v3 = 1;
  if ((a2 & 1) != 0)
  {
    if (!v3)
    {
LABEL_7:
      v2[1] = v4;
      return result;
    }
    __break(1u);
  }
  if (!v3)
    goto LABEL_7;
  __break(1u);
  return result;
}

double *(*DateInterval.duration.modify(_QWORD *a1))(double *result, char a2)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 8);
  return DateInterval.duration.modify;
}

double *DateInterval.duration.modify(double *result, char a2)
{
  double v2;
  BOOL v3;

  v2 = *result;
  v3 = *result < 0.0;
  if ((a2 & 1) != 0)
  {
    if (*result >= 0.0)
    {
LABEL_5:
      *(double *)(*((_QWORD *)result + 1) + 8) = v2;
      return result;
    }
    __break(1u);
  }
  if (!v3)
    goto LABEL_5;
  __break(1u);
  return result;
}

Foundation::DateInterval __swiftcall DateInterval.init()()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  double v3;
  Foundation::DateInterval result;
  timespec __tp;
  uint64_t v6;

  v1 = v0;
  v6 = *MEMORY[0x1E0C80C00];
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  v2 = (double)__tp.tv_nsec * 0.000000001;
  v3 = (double)__tp.tv_sec + -978307200.0 + v2;
  *(double *)v1 = v3;
  *(_QWORD *)(v1 + 8) = 0;
  result.duration = v2;
  result.start = *(Foundation::Date *)&v3;
  return result;
}

NSComparisonResult __swiftcall DateInterval.compare(_:)(Foundation::DateInterval a1)
{
  double *v1;
  double *v2;
  double v3;
  double v4;
  NSComparisonResult v5;
  NSComparisonResult v6;

  v3 = v1[1];
  v4 = v2[1];
  v5 = (unint64_t)(*v1 < *v2);
  if (*v2 < *v1)
    v5 = NSOrderedAscending;
  v6 = NSOrderedAscending;
  if (v4 >= v3)
    v6 = (unint64_t)(v3 < v4);
  if (v5)
    return v5;
  else
    return v6;
}

Swift::Bool __swiftcall DateInterval.intersects(_:)(Foundation::DateInterval a1)
{
  double *v1;
  double *v2;
  double v3;
  double v4;
  double v5;
  double v7;
  BOOL v8;
  BOOL v9;
  Swift::Bool result;

  v3 = *v1;
  v4 = *v2;
  v5 = *v2 + v2[1];
  if (*v2 <= *v1 && v3 <= v5)
    return 1;
  v7 = v3 + v1[1];
  v8 = v3 <= v4;
  v9 = v4 <= v7;
  if (v4 > v7)
    v8 = 0;
  if (v7 > v5)
    v9 = 0;
  result = 1;
  if (!v9 && !v8)
    return v5 <= v7 && v3 <= v5;
  return result;
}

Foundation::DateInterval_optional __swiftcall DateInterval.intersection(with:)(Foundation::DateInterval with)
{
  double *v1;
  uint64_t v2;
  double *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  BOOL v10;
  double v11;
  BOOL v12;
  BOOL v13;
  double v15;
  Foundation::DateInterval_optional result;

  v4 = *v1;
  v5 = v1[1];
  v6 = *v3;
  v7 = v3[1];
  v8 = *v3 + v7;
  if (*v3 <= *v1 && v4 <= v8)
    goto LABEL_18;
  v10 = v4 <= v8;
  v11 = v4 + v5;
  v12 = v6 <= v4 + v5 && v4 <= v6;
  v13 = v11 <= v8 && v6 <= v4 + v5;
  if (v8 > v11)
    v10 = 0;
  if (v12 || v13 || v10)
  {
LABEL_18:
    if (v6 == v4 && v7 == v5)
    {
      *(double *)v2 = v6;
      *(double *)(v2 + 8) = v7;
      *(_BYTE *)(v2 + 16) = 0;
    }
    else
    {
      v15 = v4 + v5;
      if (v6 > v4)
        v4 = *v3;
      if (v8 > v15)
        v6 = v15;
      else
        v6 = *v3 + v7;
      if (v6 < v4)
      {
        __break(1u);
      }
      else
      {
        v6 = v6 - v4;
        *(double *)v2 = v4;
        *(double *)(v2 + 8) = v6;
        *(_BYTE *)(v2 + 16) = 0;
      }
    }
  }
  else
  {
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_BYTE *)(v2 + 16) = 1;
  }
  result.value.duration = v6;
  result.value.start._time = v4;
  result.is_nil = (char)v1;
  return result;
}

void DateInterval.hash(into:)()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;

  v1 = v0[1];
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = *v0;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = v1;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
}

BOOL static DateInterval.< infix(_:_:)(double *a1, double *a2)
{
  _BOOL8 v2;

  v2 = *a1 < *a2;
  if (*a2 >= *a1 && *a2 <= *a1)
    return a1[1] < a2[1];
  return v2;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance DateInterval.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized DateInterval.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DateInterval.CodingKeys()
{
  lazy protocol witness table accessor for type DateInterval.CodingKeys and conformance DateInterval.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DateInterval.CodingKeys()
{
  lazy protocol witness table accessor for type DateInterval.CodingKeys and conformance DateInterval.CodingKeys();
  return CodingKey.debugDescription.getter();
}

Swift::Int DateInterval.hashValue.getter()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = v1;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = v2;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance DateInterval(_QWORD *a1, _QWORD *a2)
{
  return DateInterval.compare(_:)((Foundation::DateInterval)__PAIR128__(*a1, *a2)) == NSOrderedAscending;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance DateInterval(double *a1, double *a2)
{
  return specialized static Comparable.<= infix(_:_:)(*a1, a1[1], *a2, a2[1]);
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance DateInterval(double *a1, double *a2)
{
  return specialized static Comparable.>= infix(_:_:)(*a1, a1[1], *a2, a2[1]);
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance DateInterval(double *a1, double *a2)
{
  return specialized static Comparable.> infix(_:_:)(*a1, a1[1], *a2, a2[1]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DateInterval()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = v1;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = v2;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance DateInterval(double *a1, double *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

uint64_t DateInterval.customMirror.getter()
{
  double *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  double v8;
  double v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  double v33[3];
  ValueMetadata *v34;

  v1 = type metadata accessor for Mirror.AncestorRepresentation();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v0;
  v9 = v0[1];
  v34 = &type metadata for Date;
  v33[0] = v8;
  v30 = xmmword_18206C3D0;
  outlined init with take of Any(v33, &v31);
  v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v12 = v10[2];
  v11 = v10[3];
  if (v12 >= v11 >> 1)
    v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v10);
  v10[2] = v12 + 1;
  v13 = &v10[6 * v12];
  v14 = v30;
  v15 = v32;
  v13[3] = v31;
  v13[4] = v15;
  v13[2] = v14;
  v34 = &type metadata for Date;
  v33[0] = v8 + v9;
  v30 = xmmword_18206C3E0;
  outlined init with take of Any(v33, &v31);
  v17 = v10[2];
  v16 = v10[3];
  if (v17 >= v16 >> 1)
    v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v16 > 1), v17 + 1, 1, v10);
  v10[2] = v17 + 1;
  v18 = &v10[6 * v17];
  v19 = v30;
  v20 = v32;
  v18[3] = v31;
  v18[4] = v20;
  v18[2] = v19;
  v34 = (ValueMetadata *)MEMORY[0x1E0DEB070];
  v33[0] = v9;
  v30 = xmmword_18206C3F0;
  outlined init with take of Any(v33, &v31);
  v22 = v10[2];
  v21 = v10[3];
  if (v22 >= v21 >> 1)
    v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v22 + 1, 1, v10);
  v10[2] = v22 + 1;
  v23 = &v10[6 * v22];
  v24 = v30;
  v25 = v32;
  v23[3] = v31;
  v23[4] = v25;
  v23[2] = v24;
  *(double *)&v30 = v8;
  *((double *)&v30 + 1) = v9;
  *(_QWORD *)&v33[0] = v10;
  v26 = *MEMORY[0x1E0DEDFB8];
  v27 = type metadata accessor for Mirror.DisplayStyle();
  v28 = *(_QWORD *)(v27 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 104))(v7, v26, v27);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v7, 0, 1, v27);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DEDFE8], v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [(label: String?, value: Any)] and conformance [A]();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

unint64_t static DateInterval._getObjectiveCType()()
{
  return type metadata accessor for NSDateInterval();
}

id static DateInterval._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;

  result = objc_msgSend(a1, sel_startDate);
  if (result)
  {
    v5 = result;
    objc_msgSend(result, sel_timeIntervalSinceReferenceDate);
    v7 = v6;

    result = objc_msgSend(a1, sel_duration);
    if (v8 >= 0.0)
    {
      *(_QWORD *)a2 = v7;
      *(double *)(a2 + 8) = v8;
      *(_BYTE *)(a2 + 16) = 0;
      return result;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static DateInterval._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  uint64_t result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;

  result = (uint64_t)objc_msgSend(a1, sel_startDate);
  if (result)
  {
    v5 = (void *)result;
    objc_msgSend((id)result, sel_timeIntervalSinceReferenceDate);
    v7 = v6;

    result = (uint64_t)objc_msgSend(a1, sel_duration);
    if (v8 >= 0.0)
    {
      *(_QWORD *)a2 = v7;
      *(double *)(a2 + 8) = v8;
      *(_BYTE *)(a2 + 16) = 0;
      return 1;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance DateInterval()
{
  double *v0;
  double v1;
  double v2;
  id v3;
  id v4;
  id v5;

  v1 = *v0;
  v2 = v0[1];
  v3 = objc_allocWithZone((Class)NSDateInterval);
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D68]), sel_initWithTimeIntervalSinceReferenceDate_, v1);
  v5 = objc_msgSend(v3, sel_initWithStartDate_duration_, v4, v2);

  return v5;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance DateInterval(void *a1, uint64_t a2)
{
  uint64_t result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;

  result = (uint64_t)objc_msgSend(a1, sel_startDate);
  if (result)
  {
    v5 = (void *)result;
    objc_msgSend((id)result, sel_timeIntervalSinceReferenceDate);
    v7 = v6;

    result = (uint64_t)objc_msgSend(a1, sel_duration);
    if (v8 >= 0.0)
    {
      *(_QWORD *)a2 = v7;
      *(double *)(a2 + 8) = v8;
      *(_BYTE *)(a2 + 16) = 0;
      return 1;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

id protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance DateInterval@<X0>(id result@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  double v7;

  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v2 = result;
  result = objc_msgSend(result, sel_startDate);
  if (result)
  {
    v4 = result;
    objc_msgSend(result, sel_timeIntervalSinceReferenceDate);
    v6 = v5;

    result = objc_msgSend(v2, sel_duration);
    if (v7 >= 0.0)
    {
      *(_QWORD *)a2 = v6;
      *(double *)(a2 + 8) = v7;
      return result;
    }
    __break(1u);
    goto LABEL_6;
  }
LABEL_7:
  __break(1u);
  return result;
}

id NSDateInterval._toCustomAnyHashable()()
{
  void *v0;
  id result;
  void *v2;
  double v3;

  result = objc_msgSend(v0, sel_startDate);
  if (result)
  {
    v2 = result;
    objc_msgSend(result, sel_timeIntervalSinceReferenceDate);

    result = objc_msgSend(v0, sel_duration);
    if (v3 >= 0.0)
    {
      lazy protocol witness table accessor for type DateInterval and conformance DateInterval();
      return (id)AnyHashable.init<A>(_:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSDateInterval()
{
  id *v0;
  id v1;
  id v2;
  void *v3;
  double v4;

  v1 = *v0;
  v2 = objc_msgSend(*v0, sel_startDate);
  if (v2)
  {
    v3 = v2;
    objc_msgSend(v2, sel_timeIntervalSinceReferenceDate);

    objc_msgSend(v1, sel_duration);
    if (v4 >= 0.0)
    {
      lazy protocol witness table accessor for type DateInterval and conformance DateInterval();
      AnyHashable.init<A>(_:)();

      return;
    }
    __break(1u);
  }
  __break(1u);
}

unint64_t type metadata accessor for NSDateInterval()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSDateInterval;
  if (!lazy cache variable for type metadata for NSDateInterval)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSDateInterval);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for DateInterval(_QWORD *a1)
{
  unint64_t result;

  a1[1] = lazy protocol witness table accessor for type DateInterval and conformance DateInterval();
  a1[2] = lazy protocol witness table accessor for type DateInterval and conformance DateInterval();
  a1[3] = lazy protocol witness table accessor for type DateInterval and conformance DateInterval();
  result = lazy protocol witness table accessor for type DateInterval and conformance DateInterval();
  a1[4] = result;
  return result;
}

double sub_181AE9ABC@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *a1 + a1[1];
  *a2 = result;
  return result;
}

double *sub_181AE9ACC(double *result, double *a2)
{
  double v2;

  if (*result < *a2 || (v2 = *result - *a2, v2 < 0.0))
    __break(1u);
  else
    a2[1] = v2;
  return result;
}

double sub_181AE9AF4@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 8);
  *a2 = result;
  return result;
}

_QWORD *sub_181AE9B00(_QWORD *result, uint64_t a2)
{
  if (*(double *)result < 0.0)
    __break(1u);
  else
    *(_QWORD *)(a2 + 8) = *result;
  return result;
}

uint64_t specialized DateInterval.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7472617473 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ICURelativeDateFormatter.Signature()
{
  uint64_t v0;
  Swift::UInt32 v1;
  int v2;
  Swift::UInt32 v3;
  Swift::UInt32 v4;

  v1 = *(_DWORD *)(v0 + 16);
  v2 = *(unsigned __int8 *)(v0 + 20);
  v4 = *(_DWORD *)(v0 + 24);
  v3 = *(_DWORD *)(v0 + 28);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ICURelativeDateFormatter.Signature()
{
  uint64_t v0;
  Swift::UInt32 v1;
  int v2;
  Swift::UInt32 v3;
  Swift::UInt32 v4;

  v1 = *(_DWORD *)(v0 + 16);
  v2 = *(unsigned __int8 *)(v0 + 20);
  v4 = *(_DWORD *)(v0 + 24);
  v3 = *(_DWORD *)(v0 + 28);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ICURelativeDateFormatter.Signature()
{
  uint64_t v0;
  Swift::UInt32 v1;
  int v2;
  Swift::UInt32 v3;
  Swift::UInt32 v4;

  v1 = *(_DWORD *)(v0 + 16);
  v2 = *(unsigned __int8 *)(v0 + 20);
  v4 = *(_DWORD *)(v0 + 24);
  v3 = *(_DWORD *)(v0 + 28);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ICURelativeDateFormatter.Signature(uint64_t a1, uint64_t a2)
{
  return specialized static ICURelativeDateFormatter.Signature.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 20) << 32), *(_QWORD *)(a1 + 24), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(unsigned int *)(a2 + 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 20) << 32), *(_QWORD *)(a2 + 24));
}

void one-time initialization function for sortedAllowedComponents()
{
  static ICURelativeDateFormatter.sortedAllowedComponents = (uint64_t)&outlined read-only object #0 of one-time initialization function for sortedAllowedComponents;
}

unint64_t one-time initialization function for componentsToURelativeDateUnit()
{
  _QWORD *v0;
  unint64_t result;
  char v2;
  _QWORD *v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Calendar.Component, URelativeDateTimeUnit>);
  v0 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  result = specialized __RawDictionaryStorage.find<A>(_:)(1);
  if ((v2 & 1) != 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  v3 = v0 + 8;
  *(_QWORD *)((char *)v0 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
  *(_BYTE *)(v0[6] + result) = 1;
  *(_DWORD *)(v0[7] + 4 * result) = 0;
  v4 = v0[2];
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v0[2] = v6;
  result = specialized __RawDictionaryStorage.find<A>(_:)(2);
  if ((v7 & 1) != 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_BYTE *)(v0[6] + result) = 2;
  *(_DWORD *)(v0[7] + 4 * result) = 2;
  v8 = v0[2];
  v5 = __OFADD__(v8, 1);
  v9 = v8 + 1;
  if (v5)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v0[2] = v9;
  result = specialized __RawDictionaryStorage.find<A>(_:)(10);
  if ((v10 & 1) != 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_BYTE *)(v0[6] + result) = 10;
  *(_DWORD *)(v0[7] + 4 * result) = 3;
  v11 = v0[2];
  v5 = __OFADD__(v11, 1);
  v12 = v11 + 1;
  if (v5)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v0[2] = v12;
  result = specialized __RawDictionaryStorage.find<A>(_:)(3);
  if ((v13 & 1) != 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_BYTE *)(v0[6] + result) = 3;
  *(_DWORD *)(v0[7] + 4 * result) = 4;
  v14 = v0[2];
  v5 = __OFADD__(v14, 1);
  v15 = v14 + 1;
  if (v5)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v0[2] = v15;
  result = specialized __RawDictionaryStorage.find<A>(_:)(4);
  if ((v16 & 1) != 0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_BYTE *)(v0[6] + result) = 4;
  *(_DWORD *)(v0[7] + 4 * result) = 5;
  v17 = v0[2];
  v5 = __OFADD__(v17, 1);
  v18 = v17 + 1;
  if (v5)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v0[2] = v18;
  result = specialized __RawDictionaryStorage.find<A>(_:)(5);
  if ((v19 & 1) != 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_BYTE *)(v0[6] + result) = 5;
  *(_DWORD *)(v0[7] + 4 * result) = 6;
  v20 = v0[2];
  v5 = __OFADD__(v20, 1);
  v21 = v20 + 1;
  if (v5)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v0[2] = v21;
  result = specialized __RawDictionaryStorage.find<A>(_:)(6);
  if ((v22 & 1) != 0)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_BYTE *)(v0[6] + result) = 6;
  *(_DWORD *)(v0[7] + 4 * result) = 7;
  v23 = v0[2];
  v5 = __OFADD__(v23, 1);
  v24 = v23 + 1;
  if (!v5)
  {
    v0[2] = v24;
    static ICURelativeDateFormatter.componentsToURelativeDateUnit = (uint64_t)v0;
    return result;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t ICURelativeDateFormatter.init(signature:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  if ((a3 & 0x100000000) == 0)
  {
    String.utf8CString.getter();
    unum_open();
    swift_release();
  }
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v4 = ureldatefmt_open();
  swift_release();
  if (v4)
  {
    *(_QWORD *)(v3 + 16) = v4;
  }
  else
  {
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v3;
}

uint64_t ICURelativeDateFormatter.__deallocating_deinit()
{
  ureldatefmt_close();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ICURelativeDateFormatter()
{
  return objc_opt_self();
}

uint64_t ICURelativeDateFormatter.format(value:component:presentation:)(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[72];
  uint64_t v16[3];

  v4 = v3;
  v16[2] = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  v7 = *a3;
  if (one-time initialization token for componentsToURelativeDateUnit != -1)
    swift_once();
  v8 = static ICURelativeDateFormatter.componentsToURelativeDateUnit;
  if (!*(_QWORD *)(static ICURelativeDateFormatter.componentsToURelativeDateUnit + 16))
    return 0;
  v9 = specialized __RawDictionaryStorage.find<A>(_:)(v6);
  if ((v10 & 1) == 0)
    return 0;
  v11 = *(unsigned int *)(*(_QWORD *)(v8 + 56) + 4 * v9);
  v12 = swift_retain_n();
  MEMORY[0x1E0C80A78](v12);
  swift_retain();
  if (v7)
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)v15, 32, v4, a1, v11, v16);
  else
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)v15, 32, v4, a1, v11, v16);
  v13 = v16[0];
  swift_release_n();
  return v13;
}

BOOL specialized static ICURelativeDateFormatter.Signature.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v12;
  _BOOL8 result;

  if (a1 == a5 && a2 == a6 || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v12 & 1) != 0))
  {
    result = 0;
    if ((a3 & 0x100000000) != 0)
    {
      if ((a7 & 0x100000000) == 0)
        return result;
    }
    else if ((a7 & 0x100000000) != 0 || (_DWORD)a3 != (_DWORD)a7)
    {
      return result;
    }
    if ((_DWORD)a4 == (_DWORD)a8)
      return HIDWORD(a4) == HIDWORD(a8);
  }
  return result;
}

uint64_t initializeWithCopy for ICURelativeDateFormatter.Signature(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ICURelativeDateFormatter.Signature(uint64_t a1, uint64_t a2)
{
  int v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  return a1;
}

uint64_t assignWithTake for ICURelativeDateFormatter.Signature(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

ValueMetadata *type metadata accessor for ICURelativeDateFormatter.Signature()
{
  return &type metadata for ICURelativeDateFormatter.Signature;
}

unint64_t lazy protocol witness table accessor for type ICURelativeDateFormatter.Signature and conformance ICURelativeDateFormatter.Signature()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ICURelativeDateFormatter.Signature and conformance ICURelativeDateFormatter.Signature;
  if (!lazy protocol witness table cache variable for type ICURelativeDateFormatter.Signature and conformance ICURelativeDateFormatter.Signature)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ICURelativeDateFormatter.Signature, &type metadata for ICURelativeDateFormatter.Signature);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICURelativeDateFormatter.Signature and conformance ICURelativeDateFormatter.Signature);
  }
  return result;
}

uint64_t one-time initialization function for _lock()
{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<Set<ObjectIdentifier>, os_unfair_lock_s>);
  result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 16) = MEMORY[0x1E0DEE9E8];
  _lock = result;
  return result;
}

uint64_t specialized static NSKeyedUnarchiver.__swift_checkClassAndWarnForKeyedArchiving(_:operation:)(unint64_t a1, int a2)
{
  objc_class *ObjCClassFromMetadata;
  uint64_t v5;
  os_unfair_lock_s *v6;
  char v7;
  uint64_t v8;
  void *v9;
  void *v10;
  NSString *v11;
  id v12;
  void *v13;
  void *v14;
  BOOL v15;
  uint64_t v16;
  void *v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t inited;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;

  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  if ((_swift_isObjCTypeNameSerializable() & 1) != 0)
    return 0;
  if (one-time initialization token for _lock != -1)
    swift_once();
  v6 = (os_unfair_lock_s *)(_lock + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(_lock + 24));
  v7 = specialized Set._Variant.insert(_:)(&v32, a1);
  os_unfair_lock_unlock(v6);
  if ((v7 & 1) == 0)
    return 1;
  v32 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
  v8 = String.init<A>(reflecting:)();
  v10 = v9;
  v11 = NSStringFromClass(ObjCClassFromMetadata);
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v14 = v13;

  v15 = a2 == 1;
  if (a2 == 1)
    v16 = 0x7669686372616E75;
  else
    v16 = 0x65766968637261;
  if (v15)
    v17 = (void *)0xE900000000000065;
  else
    v17 = (void *)0xE700000000000000;
  v32 = 0;
  v33 = 0xE000000000000000;
  _StringGuts.grow(_:)(371);
  v18._countAndFlagsBits = 0x6974706D65747441;
  v18._object = (void *)0xEE00206F7420676ELL;
  String.append(_:)(v18);
  v19._countAndFlagsBits = v16;
  v19._object = v17;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 0x6320746669775320;
  v20._object = (void *)0xEE0027207373616CLL;
  String.append(_:)(v20);
  v21._countAndFlagsBits = v8;
  v21._object = v10;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._object = (void *)0x80000001823077A0;
  v22._countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v22);
  v23._countAndFlagsBits = (uint64_t)v12;
  v23._object = v14;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 0xD0000000000000AELL;
  v24._object = (void *)0x80000001823077C0;
  String.append(_:)(v24);
  v25._countAndFlagsBits = (uint64_t)v12;
  v25._object = v14;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._countAndFlagsBits = 0xD000000000000083;
  v26._object = (void *)0x8000000182307870;
  String.append(_:)(v26);
  v28 = v32;
  v27 = v33;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18205C850;
  *(_QWORD *)(inited + 56) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(_QWORD *)(inited + 32) = v28;
  *(_QWORD *)(inited + 40) = v27;
  swift_bridgeObjectRetain();
  specialized withVaList<A>(_:_:)(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg);
  v5 = 1;
  swift_arrayDestroy();
  v30 = String.utf8CString.getter();
  MEMORY[0x186DA83E4](0, v30 + 32, 0);
  swift_bridgeObjectRelease();
  swift_release();
  return v5;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyADs5NeverOSSIsgnrzr_xSaySSGAGSTRzSSRsd__AGRsd_0_r_0_lIetMgnozo_Tp5(void (*a1)(uint64_t *__return_ptr, char *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  unsigned int (*v31)(char *, uint64_t, uint64_t);
  void (*v32)(void);
  char *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  void (*v48)(uint64_t *__return_ptr, char *);
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v5 = v4;
  v48 = a1;
  v49 = a2;
  v45 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = type metadata accessor for Optional();
  v41 = *(_QWORD *)(v8 - 8);
  v42 = v8;
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v47 = (char *)&v40 - v12;
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v14);
  v46 = (char *)&v40 - v15;
  v51 = *(char **)(a3 - 8);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = swift_getAssociatedTypeWitness();
  v43 = *(_QWORD *)(v50 - 8);
  MEMORY[0x1E0C80A78](v50);
  v20 = (char *)&v40 - v19;
  v21 = dispatch thunk of Sequence.underestimatedCount.getter();
  v54 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21 & ~(v21 >> 63), 0);
  (*((void (**)(char *, uint64_t, uint64_t))v51 + 2))(v18, v44, a3);
  v51 = v20;
  result = dispatch thunk of Sequence.makeIterator()();
  if (v21 < 0)
  {
    __break(1u);
LABEL_26:
    __break(1u);
    return result;
  }
  if (v21)
  {
    v23 = v50;
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      dispatch thunk of IteratorProtocol.next()();
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, AssociatedTypeWitness);
      if ((_DWORD)result == 1)
        goto LABEL_26;
      v48(&v52, v10);
      if (v5)
      {
        (*(void (**)(char *, uint64_t))(v43 + 8))(v51, v23);
        swift_release();
        return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v10, AssociatedTypeWitness);
      }
      v5 = 0;
      (*(void (**)(char *, uint64_t))(v13 + 8))(v10, AssociatedTypeWitness);
      v24 = v54;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v24 + 16) + 1, 1);
        v24 = v54;
      }
      v26 = *(_QWORD *)(v24 + 16);
      v25 = *(_QWORD *)(v24 + 24);
      if (v26 >= v25 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
        v24 = v54;
      }
      v27 = v52;
      v28 = v53;
      *(_QWORD *)(v24 + 16) = v26 + 1;
      v29 = v24 + 16 * v26;
      *(_QWORD *)(v29 + 32) = v27;
      *(_QWORD *)(v29 + 40) = v28;
      --v21;
      v23 = v50;
      if (!v21)
        goto LABEL_13;
    }
  }
  v23 = v50;
  swift_getAssociatedConformanceWitness();
LABEL_13:
  v30 = v47;
  dispatch thunk of IteratorProtocol.next()();
  v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v31(v30, 1, AssociatedTypeWitness) == 1)
  {
LABEL_14:
    (*(void (**)(char *, uint64_t))(v43 + 8))(v51, v23);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v30, v42);
    return v54;
  }
  else
  {
    v32 = *(void (**)(void))(v13 + 32);
    while (1)
    {
      v33 = v46;
      v32();
      v48(&v52, v33);
      if (v5)
        break;
      v5 = 0;
      (*(void (**)(char *, uint64_t))(v13 + 8))(v33, AssociatedTypeWitness);
      v34 = v54;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v34 + 16) + 1, 1);
        v34 = v54;
      }
      v36 = *(_QWORD *)(v34 + 16);
      v35 = *(_QWORD *)(v34 + 24);
      if (v36 >= v35 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1);
        v34 = v54;
      }
      v37 = v52;
      v38 = v53;
      *(_QWORD *)(v34 + 16) = v36 + 1;
      v39 = v34 + 16 * v36;
      *(_QWORD *)(v39 + 32) = v37;
      *(_QWORD *)(v39 + 40) = v38;
      v30 = v47;
      v23 = v50;
      dispatch thunk of IteratorProtocol.next()();
      if (v31(v30, 1, AssociatedTypeWitness) == 1)
        goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v33, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v51, v23);
    return swift_release();
  }
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyADsAE_pypSgIsgnrzr_xSayAFGsAE_pSTRzAFRsd__sAE_pRsd_0_r_0_lIetMgnozo_Tp5(void (*a1)(_QWORD *__return_ptr, char *, uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t (*v28)(char *, uint64_t, uint64_t);
  int v29;
  char *v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  void (*v43)(_QWORD *__return_ptr, char *, uint64_t *);
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  _QWORD v48[4];
  uint64_t v49;

  v5 = v4;
  v43 = a1;
  v44 = a2;
  v40 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = type metadata accessor for Optional();
  v36 = *(_QWORD *)(v8 - 8);
  v37 = v8;
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v42 = (char *)&v36 - v12;
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v14);
  v41 = (char *)&v36 - v15;
  v46 = *(char **)(a3 - 8);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = swift_getAssociatedTypeWitness();
  v38 = *(_QWORD *)(v45 - 8);
  MEMORY[0x1E0C80A78](v45);
  v20 = (char *)&v36 - v19;
  v21 = dispatch thunk of Sequence.underestimatedCount.getter();
  v49 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21 & ~(v21 >> 63), 0);
  (*((void (**)(char *, uint64_t, uint64_t))v46 + 2))(v18, v39, a3);
  v46 = v20;
  result = dispatch thunk of Sequence.makeIterator()();
  if (v21 < 0)
  {
    __break(1u);
LABEL_26:
    __break(1u);
    return result;
  }
  if (v21)
  {
    v23 = v45;
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      dispatch thunk of IteratorProtocol.next()();
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, AssociatedTypeWitness);
      if ((_DWORD)result == 1)
        goto LABEL_26;
      v43(v48, v10, &v47);
      if (v5)
      {
        (*(void (**)(char *, uint64_t))(v38 + 8))(v46, v23);
        swift_release();
        return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v10, AssociatedTypeWitness);
      }
      v5 = 0;
      (*(void (**)(char *, uint64_t))(v13 + 8))(v10, AssociatedTypeWitness);
      v24 = v49;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v24 + 16) + 1, 1);
        v24 = v49;
      }
      v26 = *(_QWORD *)(v24 + 16);
      v25 = *(_QWORD *)(v24 + 24);
      if (v26 >= v25 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
        v24 = v49;
      }
      *(_QWORD *)(v24 + 16) = v26 + 1;
      outlined init with take of LocalePreferences?((uint64_t)v48, v24 + 32 * v26 + 32, &demangling cache variable for type metadata for Any?);
      --v21;
      v23 = v45;
      if (!v21)
        goto LABEL_13;
    }
  }
  swift_getAssociatedConformanceWitness();
LABEL_13:
  v27 = v42;
  dispatch thunk of IteratorProtocol.next()();
  v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v29 = v28(v27, 1, AssociatedTypeWitness);
  v30 = v41;
  if (v29 == 1)
  {
LABEL_14:
    (*(void (**)(char *, uint64_t))(v38 + 8))(v46, v45);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v27, v37);
    return v49;
  }
  else
  {
    v31 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    while (1)
    {
      v31(v30, v27, AssociatedTypeWitness);
      v43(v48, v30, &v47);
      if (v5)
        break;
      v5 = 0;
      (*(void (**)(char *, uint64_t))(v13 + 8))(v30, AssociatedTypeWitness);
      v32 = v49;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v32 + 16) + 1, 1);
        v32 = v49;
      }
      v34 = *(_QWORD *)(v32 + 16);
      v33 = *(_QWORD *)(v32 + 24);
      if (v34 >= v33 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
        v32 = v49;
      }
      *(_QWORD *)(v32 + 16) = v34 + 1;
      outlined init with take of LocalePreferences?((uint64_t)v48, v32 + 32 * v34 + 32, &demangling cache variable for type metadata for Any?);
      v27 = v42;
      dispatch thunk of IteratorProtocol.next()();
      v35 = v28(v27, 1, AssociatedTypeWitness);
      v30 = v41;
      if (v35 == 1)
        goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v30, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v46, v45);
    return swift_release();
  }
}

uint64_t static ListFormatStyle.== infix(_:_:)()
{
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
    type metadata accessor for ListFormatStyle();
  return 0;
}

void type metadata accessor for ListFormatStyle()
{
  JUMPOUT(0x186DA9CBCLL);
}

__n128 ListFormatStyle.locale(_:)@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  __n128 result;
  __n128 v9;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, v3, a2);
  v7 = *(int *)(a2 + 60);
  v9 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  result = v9;
  *(__n128 *)(a3 + v7) = v9;
  return result;
}

uint64_t Sequence.formatted<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a5 + 48))(v5, a3, a5);
}

uint64_t ListFormatStyle.width.getter@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  *a2 = *(_BYTE *)(v2 + *(int *)(result + 52));
  return result;
}

_BYTE *ListFormatStyle.width.setter(_BYTE *result, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + *(int *)(a2 + 52)) = *result;
  return result;
}

uint64_t (*ListFormatStyle.width.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t ListFormatStyle.listType.getter@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  *a2 = *(_BYTE *)(v2 + *(int *)(result + 56));
  return result;
}

_BYTE *ListFormatStyle.listType.setter(_BYTE *result, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + *(int *)(a2 + 56)) = *result;
  return result;
}

uint64_t (*ListFormatStyle.listType.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t ListFormatStyle.locale.getter@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = *(_OWORD *)(v2 + *(int *)(a1 + 60));
  return swift_unknownObjectRetain();
}

__n128 ListFormatStyle.locale.setter(__n128 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  __n128 result;

  v4 = *(int *)(a2 + 60);
  swift_unknownObjectRelease();
  result = *a1;
  *(__n128 *)(v2 + v4) = *a1;
  return result;
}

uint64_t (*ListFormatStyle.locale.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void ListFormatStyle.init(memberStyle:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1, a2);
  type metadata accessor for ListFormatStyle();
}

uint64_t sub_181AEB674(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t *v11;
  uint64_t v12;

  *(_BYTE *)(v1 + a1[13]) = 0;
  *(_BYTE *)(v1 + a1[14]) = 0;
  if (one-time initialization token for cache != -1)
    swift_once();
  v6 = static LocaleCache.cache + 16;
  v7 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v6, &v12);
  os_unfair_lock_unlock(v7);
  swift_release_n();
  v8 = v12;
  v9 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating, (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v2);
  v11 = (uint64_t *)(v1 + a1[15]);
  *v11 = v8;
  v11[1] = v9;
  return result;
}

void ListFormatStyle.format(_:)(uint64_t a1)
{
  MEMORY[0x1E0C80A78](a1);
  type metadata accessor for ICUListFormatter();
  static ICUListFormatter.formatter<A, B>(for:)();
}

uint64_t specialized static ICUListFormatter.formatter<A, B>(for:)(unsigned int a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectType;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::UInt v10;
  Swift::UInt v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  os_unfair_lock_s *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  int64_t v49;
  unint64_t v50;
  int64_t v51;
  uint64_t result;
  unint64_t v53;
  char v54;
  int64_t v55;
  char *__src;
  uint64_t v57;
  Swift::UInt v58;
  uint64_t v59;

  ObjectType = swift_getObjectType();
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 64);
  swift_unknownObjectRetain();
  v7 = v6(ObjectType, a3);
  v9 = v8;
  swift_unknownObjectRelease();
  v10 = (a1 >> 8) & 1;
  v11 = a1;
  if (one-time initialization token for cache != -1)
    swift_once();
  v13 = static ICUListFormatter.cache;
  v12 = unk_1EDC47CD0;
  v14 = (uint64_t *)(unk_1EDC47CD0 + 16);
  v15 = (os_unfair_lock_s *)(unk_1EDC47CD0 + 24);
  swift_retain_n();
  os_unfair_lock_lock(v15);
  v16 = specialized closure #1 in FormatterCache.formatter(for:creator:)((uint64_t)v14, v7, v9, (a1 >> 8) & 1, a1);
  os_unfair_lock_unlock(v15);
  swift_release();
  if (v16)
  {
    swift_bridgeObjectRelease();
    swift_release();
    return v16;
  }
  type metadata accessor for ICUListFormatter();
  v16 = swift_allocObject();
  v58 = v10;
  v17 = outlined read-only object #0 of specialized static ICUListFormatter.formatter<A, B>(for:)[v10 + 8];
  swift_bridgeObjectRetain();
  if (v11 > 2)
  {
    __break(1u);
    __break(1u);
  }
  else
  {
    v57 = v7;
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    v20 = ulistfmt_openForType();
    swift_release();
    if (!v20)
    {
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }
    *(_QWORD *)(v16 + 16) = v20;
    swift_retain();
    os_unfair_lock_lock(v15);
    if (v13 >= *(_QWORD *)(*(_QWORD *)(v12 + 16) + 16))
      swift_bridgeObjectRetain();
    else
      *v14 = MEMORY[0x1E0DEE9E0];
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v59 = *v14;
    v17 = *v14;
    *v14 = 0x8000000000000000;
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(v57, v9, v58, v11);
    v22 = *(_QWORD *)(v17 + 16);
    v23 = (v18 & 1) == 0;
    v24 = v22 + v23;
    if (!__OFADD__(v22, v23))
    {
      if (*(_QWORD *)(v17 + 24) < v24)
      {
        v25 = v18;
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v24, isUniquelyReferenced_nonNull_native);
        v27 = v58;
        v26 = v59;
        v28 = v57;
        v29 = specialized __RawDictionaryStorage.find<A>(_:)(v57, v9, v58, v11);
        if ((v25 & 1) != (v30 & 1))
          goto LABEL_61;
        v19 = v29;
        if ((v25 & 1) == 0)
          goto LABEL_55;
LABEL_17:
        v31 = *(_QWORD *)(v26 + 56);
        v32 = 8 * v19;
        swift_release();
        *(_QWORD *)(v31 + v32) = v16;
LABEL_56:
        *(_QWORD *)(v12 + 16) = v26;
        swift_bridgeObjectRelease();
        os_unfair_lock_unlock(v15);
        swift_bridgeObjectRelease();
        swift_release_n();
        swift_bridgeObjectRelease();
        return v16;
      }
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v26 = v17;
        v28 = v57;
        v27 = v58;
        if ((v18 & 1) != 0)
          goto LABEL_17;
LABEL_55:
        specialized _NativeDictionary._insert(at:key:value:)(v19, v28, v9, v27, v11, v16, (_QWORD *)v26);
        swift_bridgeObjectRetain();
        goto LABEL_56;
      }
      goto LABEL_20;
    }
  }
  __break(1u);
LABEL_20:
  v53 = v19;
  v54 = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUListFormatter.Signature, ICUListFormatter>);
  v33 = static _DictionaryStorage.copy(original:)();
  v26 = v33;
  if (!*(_QWORD *)(v17 + 16))
  {
LABEL_54:
    swift_bridgeObjectRelease();
    v28 = v57;
    v27 = v58;
    v19 = v53;
    if ((v54 & 1) != 0)
      goto LABEL_17;
    goto LABEL_55;
  }
  v34 = (char *)(v33 + 64);
  __src = (char *)(v17 + 64);
  v35 = (unint64_t)((1 << *(_BYTE *)(v26 + 32)) + 63) >> 6;
  if (v26 != v17 || v34 >= &__src[8 * v35])
    memmove(v34, __src, 8 * v35);
  v36 = 0;
  *(_QWORD *)(v26 + 16) = *(_QWORD *)(v17 + 16);
  v37 = 1 << *(_BYTE *)(v17 + 32);
  v38 = -1;
  if (v37 < 64)
    v38 = ~(-1 << v37);
  v39 = v38 & *(_QWORD *)(v17 + 64);
  v55 = (unint64_t)(v37 + 63) >> 6;
  while (1)
  {
    if (v39)
    {
      v40 = __clz(__rbit64(v39));
      v39 &= v39 - 1;
      v41 = v40 | (v36 << 6);
      goto LABEL_28;
    }
    v49 = v36 + 1;
    if (__OFADD__(v36, 1))
    {
      __break(1u);
      goto LABEL_59;
    }
    if (v49 >= v55)
      goto LABEL_54;
    v50 = *(_QWORD *)&__src[8 * v49];
    ++v36;
    if (!v50)
    {
      v36 = v49 + 1;
      if (v49 + 1 >= v55)
        goto LABEL_54;
      v50 = *(_QWORD *)&__src[8 * v36];
      if (!v50)
      {
        v36 = v49 + 2;
        if (v49 + 2 >= v55)
          goto LABEL_54;
        v50 = *(_QWORD *)&__src[8 * v36];
        if (!v50)
        {
          v36 = v49 + 3;
          if (v49 + 3 >= v55)
            goto LABEL_54;
          v50 = *(_QWORD *)&__src[8 * v36];
          if (!v50)
          {
            v36 = v49 + 4;
            if (v49 + 4 >= v55)
              goto LABEL_54;
            v50 = *(_QWORD *)&__src[8 * v36];
            if (!v50)
            {
              v36 = v49 + 5;
              if (v49 + 5 >= v55)
                goto LABEL_54;
              v50 = *(_QWORD *)&__src[8 * v36];
              if (!v50)
              {
                v36 = v49 + 6;
                if (v49 + 6 >= v55)
                  goto LABEL_54;
                v50 = *(_QWORD *)&__src[8 * v36];
                if (!v50)
                {
                  v36 = v49 + 7;
                  if (v49 + 7 >= v55)
                    goto LABEL_54;
                  v50 = *(_QWORD *)&__src[8 * v36];
                  if (!v50)
                    break;
                }
              }
            }
          }
        }
      }
    }
LABEL_53:
    v39 = (v50 - 1) & v50;
    v41 = __clz(__rbit64(v50)) + (v36 << 6);
LABEL_28:
    v42 = 32 * v41;
    v43 = *(_QWORD *)(v17 + 48) + 32 * v41;
    v44 = *(_QWORD *)(v43 + 8);
    v45 = 8 * v41;
    v46 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + v45);
    v47 = *(_QWORD *)(v26 + 48) + v42;
    v48 = *(_OWORD *)(v43 + 16);
    *(_QWORD *)v47 = *(_QWORD *)v43;
    *(_QWORD *)(v47 + 8) = v44;
    *(_OWORD *)(v47 + 16) = v48;
    *(_QWORD *)(*(_QWORD *)(v26 + 56) + v45) = v46;
    swift_bridgeObjectRetain();
    swift_retain();
  }
  v51 = v49 + 8;
  if (v51 >= v55)
    goto LABEL_54;
  v50 = *(_QWORD *)&__src[8 * v51];
  if (v50)
  {
    v36 = v51;
    goto LABEL_53;
  }
  while (1)
  {
    v36 = v51 + 1;
    if (__OFADD__(v51, 1))
      break;
    if (v36 >= v55)
      goto LABEL_54;
    v50 = *(_QWORD *)&__src[8 * v36];
    ++v51;
    if (v50)
      goto LABEL_53;
  }
LABEL_60:
  __break(1u);
LABEL_61:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t ObjectType;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::UInt v10;
  Swift::UInt v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  os_unfair_lock_s *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  int64_t v49;
  unint64_t v50;
  int64_t v51;
  uint64_t result;
  unint64_t v53;
  char v54;
  int64_t v55;
  char *__src;
  uint64_t v57;
  Swift::UInt v58;
  uint64_t v59;

  ObjectType = swift_getObjectType();
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 64);
  swift_unknownObjectRetain();
  v7 = v6(ObjectType, a3);
  v9 = v8;
  swift_unknownObjectRelease();
  v10 = (a1 >> 8) & 1;
  v11 = a1;
  if (one-time initialization token for cache != -1)
    swift_once();
  v13 = static ICUListFormatter.cache;
  v12 = unk_1EDC47CD0;
  v14 = (uint64_t *)(unk_1EDC47CD0 + 16);
  v15 = (os_unfair_lock_s *)(unk_1EDC47CD0 + 24);
  swift_retain_n();
  os_unfair_lock_lock(v15);
  v16 = specialized closure #1 in FormatterCache.formatter(for:creator:)((uint64_t)v14, v7, v9, (a1 >> 8) & 1, a1);
  os_unfair_lock_unlock(v15);
  swift_release();
  if (v16)
  {
    swift_bridgeObjectRelease();
    swift_release();
    return v16;
  }
  type metadata accessor for ICUListFormatter();
  v16 = swift_allocObject();
  v58 = v10;
  v17 = outlined read-only object #0 of specialized static ICUListFormatter.formatter<A, B>(for:)[v10 + 8];
  swift_bridgeObjectRetain();
  if (v11 > 2)
  {
    __break(1u);
    __break(1u);
  }
  else
  {
    v57 = v7;
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    v20 = ulistfmt_openForType();
    swift_release();
    if (!v20)
    {
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }
    *(_QWORD *)(v16 + 16) = v20;
    swift_retain();
    os_unfair_lock_lock(v15);
    if (v13 >= *(_QWORD *)(*(_QWORD *)(v12 + 16) + 16))
      swift_bridgeObjectRetain();
    else
      *v14 = MEMORY[0x1E0DEE9E0];
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v59 = *v14;
    v17 = *v14;
    *v14 = 0x8000000000000000;
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(v57, v9, v58, v11);
    v22 = *(_QWORD *)(v17 + 16);
    v23 = (v18 & 1) == 0;
    v24 = v22 + v23;
    if (!__OFADD__(v22, v23))
    {
      if (*(_QWORD *)(v17 + 24) < v24)
      {
        v25 = v18;
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v24, isUniquelyReferenced_nonNull_native);
        v27 = v58;
        v26 = v59;
        v28 = v57;
        v29 = specialized __RawDictionaryStorage.find<A>(_:)(v57, v9, v58, v11);
        if ((v25 & 1) != (v30 & 1))
          goto LABEL_61;
        v19 = v29;
        if ((v25 & 1) == 0)
          goto LABEL_55;
LABEL_17:
        v31 = *(_QWORD *)(v26 + 56);
        v32 = 8 * v19;
        swift_release();
        *(_QWORD *)(v31 + v32) = v16;
LABEL_56:
        *(_QWORD *)(v12 + 16) = v26;
        swift_bridgeObjectRelease();
        os_unfair_lock_unlock(v15);
        swift_bridgeObjectRelease();
        swift_release_n();
        swift_bridgeObjectRelease();
        return v16;
      }
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v26 = v17;
        v28 = v57;
        v27 = v58;
        if ((v18 & 1) != 0)
          goto LABEL_17;
LABEL_55:
        specialized _NativeDictionary._insert(at:key:value:)(v19, v28, v9, v27, v11, v16, (_QWORD *)v26);
        swift_bridgeObjectRetain();
        goto LABEL_56;
      }
      goto LABEL_20;
    }
  }
  __break(1u);
LABEL_20:
  v53 = v19;
  v54 = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUListFormatter.Signature, ICUListFormatter>);
  v33 = static _DictionaryStorage.copy(original:)();
  v26 = v33;
  if (!*(_QWORD *)(v17 + 16))
  {
LABEL_54:
    swift_bridgeObjectRelease();
    v28 = v57;
    v27 = v58;
    v19 = v53;
    if ((v54 & 1) != 0)
      goto LABEL_17;
    goto LABEL_55;
  }
  v34 = (char *)(v33 + 64);
  __src = (char *)(v17 + 64);
  v35 = (unint64_t)((1 << *(_BYTE *)(v26 + 32)) + 63) >> 6;
  if (v26 != v17 || v34 >= &__src[8 * v35])
    memmove(v34, __src, 8 * v35);
  v36 = 0;
  *(_QWORD *)(v26 + 16) = *(_QWORD *)(v17 + 16);
  v37 = 1 << *(_BYTE *)(v17 + 32);
  v38 = -1;
  if (v37 < 64)
    v38 = ~(-1 << v37);
  v39 = v38 & *(_QWORD *)(v17 + 64);
  v55 = (unint64_t)(v37 + 63) >> 6;
  while (1)
  {
    if (v39)
    {
      v40 = __clz(__rbit64(v39));
      v39 &= v39 - 1;
      v41 = v40 | (v36 << 6);
      goto LABEL_28;
    }
    v49 = v36 + 1;
    if (__OFADD__(v36, 1))
    {
      __break(1u);
      goto LABEL_59;
    }
    if (v49 >= v55)
      goto LABEL_54;
    v50 = *(_QWORD *)&__src[8 * v49];
    ++v36;
    if (!v50)
    {
      v36 = v49 + 1;
      if (v49 + 1 >= v55)
        goto LABEL_54;
      v50 = *(_QWORD *)&__src[8 * v36];
      if (!v50)
      {
        v36 = v49 + 2;
        if (v49 + 2 >= v55)
          goto LABEL_54;
        v50 = *(_QWORD *)&__src[8 * v36];
        if (!v50)
        {
          v36 = v49 + 3;
          if (v49 + 3 >= v55)
            goto LABEL_54;
          v50 = *(_QWORD *)&__src[8 * v36];
          if (!v50)
          {
            v36 = v49 + 4;
            if (v49 + 4 >= v55)
              goto LABEL_54;
            v50 = *(_QWORD *)&__src[8 * v36];
            if (!v50)
            {
              v36 = v49 + 5;
              if (v49 + 5 >= v55)
                goto LABEL_54;
              v50 = *(_QWORD *)&__src[8 * v36];
              if (!v50)
              {
                v36 = v49 + 6;
                if (v49 + 6 >= v55)
                  goto LABEL_54;
                v50 = *(_QWORD *)&__src[8 * v36];
                if (!v50)
                {
                  v36 = v49 + 7;
                  if (v49 + 7 >= v55)
                    goto LABEL_54;
                  v50 = *(_QWORD *)&__src[8 * v36];
                  if (!v50)
                    break;
                }
              }
            }
          }
        }
      }
    }
LABEL_53:
    v39 = (v50 - 1) & v50;
    v41 = __clz(__rbit64(v50)) + (v36 << 6);
LABEL_28:
    v42 = 32 * v41;
    v43 = *(_QWORD *)(v17 + 48) + 32 * v41;
    v44 = *(_QWORD *)(v43 + 8);
    v45 = 8 * v41;
    v46 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + v45);
    v47 = *(_QWORD *)(v26 + 48) + v42;
    v48 = *(_OWORD *)(v43 + 16);
    *(_QWORD *)v47 = *(_QWORD *)v43;
    *(_QWORD *)(v47 + 8) = v44;
    *(_OWORD *)(v47 + 16) = v48;
    *(_QWORD *)(*(_QWORD *)(v26 + 56) + v45) = v46;
    swift_bridgeObjectRetain();
    swift_retain();
  }
  v51 = v49 + 8;
  if (v51 >= v55)
    goto LABEL_54;
  v50 = *(_QWORD *)&__src[8 * v51];
  if (v50)
  {
    v36 = v51;
    goto LABEL_53;
  }
  while (1)
  {
    v36 = v51 + 1;
    if (__OFADD__(v51, 1))
      break;
    if (v36 >= v55)
      goto LABEL_54;
    v50 = *(_QWORD *)&__src[8 * v36];
    ++v51;
    if (v50)
      goto LABEL_53;
  }
LABEL_60:
  __break(1u);
LABEL_61:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t ListFormatStyle.Width.init(rawValue:)@<X0>(unint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  v2 = 3;
  if (result < 3)
    v2 = result;
  *a2 = v2;
  return result;
}

uint64_t ListFormatStyle.Width.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ListFormatStyle<A, B>.Width(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for ListFormatStyle<A, B>.Width, a3);
  return == infix<A>(_:_:)();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance ListFormatStyle<A, B>.Width(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for ListFormatStyle<A, B>.Width, a1);
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ListFormatStyle<A, B>.Width()
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for ListFormatStyle<A, B>.Width);
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance ListFormatStyle<A, B>.Width()
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for ListFormatStyle<A, B>.Width);
  return RawRepresentable<>._rawHashValue(seed:)();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ListFormatStyle<A, B>.Width@<X0>(unint64_t *a1@<X0>, char *a2@<X8>)
{
  return ListFormatStyle.Width.init(rawValue:)(*a1, a2);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ListFormatStyle<A, B>.Width@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = ListFormatStyle.Width.rawValue.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance ListFormatStyle<A, B>.Width()
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for ListFormatStyle<A, B>.Width);
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ListFormatStyle<A, B>.Width()
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for ListFormatStyle<A, B>.Width);
  return RawRepresentable<>.encode(to:)();
}

uint64_t ListFormatStyle.ListType.init(rawValue:)@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  if (result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (!result)
    v2 = 0;
  *a2 = v2;
  return result;
}

uint64_t ListFormatStyle.ListType.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ListFormatStyle<A, B>.ListType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for ListFormatStyle<A, B>.ListType, a3);
  return == infix<A>(_:_:)();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance ListFormatStyle<A, B>.ListType(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for ListFormatStyle<A, B>.ListType, a1);
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ListFormatStyle<A, B>.ListType()
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for ListFormatStyle<A, B>.ListType);
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance ListFormatStyle<A, B>.ListType()
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for ListFormatStyle<A, B>.ListType);
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ListFormatStyle<A, B>.ListType@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  return ListFormatStyle.ListType.init(rawValue:)(*a1, a2);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ListFormatStyle<A, B>.ListType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = ListFormatStyle.ListType.rawValue.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance ListFormatStyle<A, B>.ListType()
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for ListFormatStyle<A, B>.ListType);
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ListFormatStyle<A, B>.ListType()
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for ListFormatStyle<A, B>.ListType);
  return RawRepresentable<>.encode(to:)();
}

uint64_t ListFormatStyle.hash(into:)(uint64_t a1, int *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t (*v7)(uint64_t, uint64_t);
  void (*v9)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  Swift::UInt v37;
  Swift::UInt v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  _BYTE v42[144];
  _BYTE v43[8];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  char v59;
  char v60;
  _QWORD v61[18];
  _BYTE v62[144];
  _BYTE v63[152];

  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(unsigned __int8 *)(v2 + a2[13]));
  Hasher._combine(_:)(*(unsigned __int8 *)(v2 + a2[14]));
  v5 = *(_QWORD *)(v2 + a2[15] + 8);
  ObjectType = swift_getObjectType();
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain();
  if ((v7(ObjectType, v5) & 1) != 0)
  {
    Hasher._combine(_:)(1u);
    return swift_unknownObjectRelease();
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(ObjectType, v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v9 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v5 + 464);
  swift_unknownObjectRetain();
  v9(v61, ObjectType, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v61, (uint64_t)v62, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v62, (uint64_t)v63, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v63) != 1)
  {
    outlined init with take of LocalePreferences?((uint64_t)v62, (uint64_t)v43, &demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v43[0] == 2)
    {
      v10 = 0;
    }
    else
    {
      v10 = v43[0] & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v10);
    v11 = v44;
    if (v44)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(_QWORD *)(v11 + 16));
      v12 = *(_QWORD *)(v11 + 16);
      if (v12)
      {
        outlined retain of LocalePreferences?((uint64_t)v62, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        v13 = v11 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v13 += 16;
          --v12;
        }
        while (v12);
        swift_bridgeObjectRelease();
        if (!v45)
        {
LABEL_13:
          Hasher._combine(_:)(0);
          if (!v46)
            goto LABEL_14;
          goto LABEL_21;
        }
LABEL_20:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v46)
        {
LABEL_14:
          Hasher._combine(_:)(0);
          v14 = v47;
          if (!v47)
            goto LABEL_15;
          goto LABEL_22;
        }
LABEL_21:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        v14 = v47;
        if (!v47)
        {
LABEL_15:
          Hasher._combine(_:)(0);
          v15 = v48;
          if (!v48)
          {
LABEL_16:
            Hasher._combine(_:)(0);
            goto LABEL_24;
          }
LABEL_23:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v15);
          swift_bridgeObjectRelease();
LABEL_24:
          v18 = v49;
          v17 = v50;
          v20 = v51;
          v19 = v52;
          v21 = v53;
          if (v49)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v22 = v17;
            v23 = v20;
            v24 = v19;
            v25 = v21;
            v26 = v18;
            _CFObject.hash(into:)();
            if (v17)
              goto LABEL_26;
          }
          else
          {
            Hasher._combine(_:)(0);
            v31 = v21;
            v32 = v17;
            v33 = v20;
            v34 = v19;
            if (v17)
            {
LABEL_26:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              v27 = v17;
              _CFObject.hash(into:)();

              if (v20)
                goto LABEL_27;
              goto LABEL_32;
            }
          }
          Hasher._combine(_:)(0);
          if (v20)
          {
LABEL_27:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v28 = v20;
            _CFObject.hash(into:)();

            if (v19)
              goto LABEL_28;
            goto LABEL_33;
          }
LABEL_32:
          Hasher._combine(_:)(0);
          if (v19)
          {
LABEL_28:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v29 = v19;
            _CFObject.hash(into:)();

            if (v21)
            {
LABEL_29:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              v30 = v21;
              _CFObject.hash(into:)();

              goto LABEL_35;
            }
LABEL_34:
            Hasher._combine(_:)(0);
            v30 = 0;
LABEL_35:

            v35 = v54;
            if (v35)
            {
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              specialized Dictionary<>.hash(into:)(a1, v35);
              swift_bridgeObjectRelease();
              v36 = v55;
              if (v55)
                goto LABEL_37;
            }
            else
            {
              Hasher._combine(_:)(0);
              v36 = v55;
              if (v55)
              {
LABEL_37:
                Hasher._combine(_:)(1u);
                swift_bridgeObjectRetain();
                specialized Dictionary<>.hash(into:)(a1, v36);
                swift_bridgeObjectRelease();
                if (v56)
                {
LABEL_38:
                  Hasher._combine(_:)(1u);
                  swift_bridgeObjectRetain();
                  String.hash(into:)();
                  swift_bridgeObjectRelease();
LABEL_42:
                  if (v57 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }
                  else
                  {
                    v37 = v57 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v37);
                  }
                  if (v58 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }
                  else
                  {
                    v38 = v58 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v38);
                  }
                  if (v59 == 2)
                  {
                    v39 = 0;
                  }
                  else
                  {
                    v39 = v59 & 1;
                    Hasher._combine(_:)(1u);
                  }
                  Hasher._combine(_:)(v39);
                  if (v60 == 2)
                  {
                    v40 = 0;
                  }
                  else
                  {
                    v41 = v60 & 1;
                    Hasher._combine(_:)(1u);
                    v40 = v41;
                  }
                  Hasher._combine(_:)(v40);
                  outlined retain of LocalePreferences?((uint64_t)v62, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
                  outlined retain of LocalePreferences?((uint64_t)v62, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
                  return swift_unknownObjectRelease();
                }
LABEL_41:
                Hasher._combine(_:)(0);
                goto LABEL_42;
              }
            }
            Hasher._combine(_:)(0);
            if (v56)
              goto LABEL_38;
            goto LABEL_41;
          }
LABEL_33:
          Hasher._combine(_:)(0);
          if (v21)
            goto LABEL_29;
          goto LABEL_34;
        }
LABEL_22:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v14);
        swift_bridgeObjectRelease();
        v15 = v48;
        if (!v48)
          goto LABEL_16;
        goto LABEL_23;
      }
      outlined init with take of LocalePreferences?((uint64_t)v62, (uint64_t)v42, &demangling cache variable for type metadata for LocalePreferences?);
      v16 = v42;
    }
    else
    {
      Hasher._combine(_:)(0);
      v16 = v43;
    }
    outlined retain of LocalePreferences(v16);
    if (!v45)
      goto LABEL_13;
    goto LABEL_20;
  }
  Hasher._combine(_:)(0);
  return swift_unknownObjectRelease();
}

uint64_t ListFormatStyle.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x74537265626D656DLL && a2 == 0xEB00000000656C79;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6874646977 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x657079547473696CLL && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t ListFormatStyle.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181AED2F8 + 4 * byte_18206C7F0[a1]))(0x74537265626D656DLL, 0xEB00000000656C79);
}

uint64_t sub_181AED2F8()
{
  return 0x6874646977;
}

uint64_t sub_181AED30C()
{
  return 0x657079547473696CLL;
}

uint64_t sub_181AED324()
{
  return 0x656C61636F6CLL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ListFormatStyle<A, B>.CodingKeys()
{
  unsigned __int8 *v0;

  return ListFormatStyle.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ListFormatStyle<A, B>.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = ListFormatStyle.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance ListFormatStyle<A, B>.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = specialized FloatingPointParseStrategy.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ListFormatStyle<A, B>.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for ListFormatStyle<A, B>.CodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ListFormatStyle<A, B>.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for ListFormatStyle<A, B>.CodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

void ListFormatStyle.encode(to:)()
{
  type metadata accessor for ListFormatStyle.CodingKeys();
}

uint64_t sub_181AED45C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  MEMORY[0x186DA9D64](&protocol conformance descriptor for ListFormatStyle<A, B>.CodingKeys, a1);
  v4 = type metadata accessor for KeyedEncodingContainer();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v15 - v6;
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  v8 = v4;
  v10 = *(_QWORD *)(v3 - 136);
  v9 = *(_QWORD *)(v3 - 128);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  *(_BYTE *)(v3 - 112) = 0;
  v11 = v2;
  v12 = *(_QWORD *)(v3 - 120);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v12)
  {
    *(_QWORD *)(v3 - 120) = v5;
    *(_QWORD *)(v3 - 112) = v10;
    v13 = *(_QWORD *)(v3 - 160);
    *(_BYTE *)(v3 - 65) = *(_BYTE *)(v9 + *(int *)(*(_QWORD *)(v3 - 152) + 52));
    *(_BYTE *)(v3 - 66) = 1;
    *(_QWORD *)(v3 - 104) = v13;
    *(_QWORD *)(v3 - 96) = v11;
    *(_QWORD *)(v3 - 88) = *(_QWORD *)(v3 - 144);
    type metadata accessor for ListFormatStyle.Width();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v8);
}

Swift::Int ListFormatStyle.hashValue.getter(int *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t (*v5)(uint64_t, uint64_t);
  Swift::UInt8 v6;
  void (*v7)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  Swift::UInt v35;
  Swift::UInt v36;
  Swift::UInt8 v37;
  Swift::UInt8 v38;
  Swift::UInt8 v39;
  _BYTE v41[144];
  _BYTE v42[8];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  char v58;
  char v59;
  _QWORD v60[18];
  _BYTE v61[144];
  _BYTE v62[144];
  _BYTE v63[72];

  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(unsigned __int8 *)(v1 + a1[13]));
  Hasher._combine(_:)(*(unsigned __int8 *)(v1 + a1[14]));
  v3 = *(_QWORD *)(v1 + a1[15] + 8);
  ObjectType = swift_getObjectType();
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 48);
  swift_unknownObjectRetain();
  if ((v5(ObjectType, v3) & 1) != 0)
  {
    v6 = 1;
LABEL_5:
    Hasher._combine(_:)(v6);
    goto LABEL_56;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v3 + 64))(ObjectType, v3);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v7 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v3 + 464);
  swift_unknownObjectRetain();
  v7(v60, ObjectType, v3);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v60, (uint64_t)v61, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v61, (uint64_t)v62, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v62) == 1)
  {
    v6 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v61, (uint64_t)v42, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v42[0] == 2)
  {
    v8 = 0;
  }
  else
  {
    v8 = v42[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v8);
  v9 = v43;
  if (!v43)
  {
    Hasher._combine(_:)(0);
    v14 = v42;
    goto LABEL_20;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v9 + 16));
  v10 = *(_QWORD *)(v9 + 16);
  if (!v10)
  {
    outlined init with take of LocalePreferences?((uint64_t)v61, (uint64_t)v41, &demangling cache variable for type metadata for LocalePreferences?);
    v14 = v41;
LABEL_20:
    outlined retain of LocalePreferences(v14);
    if (!v44)
      goto LABEL_14;
    goto LABEL_21;
  }
  outlined retain of LocalePreferences?((uint64_t)v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v11 = v9 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v11 += 16;
    --v10;
  }
  while (v10);
  swift_bridgeObjectRelease();
  if (!v44)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v45)
      goto LABEL_15;
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v45)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    v12 = v46;
    if (!v46)
      goto LABEL_16;
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v63, v12);
    swift_bridgeObjectRelease();
    v13 = v47;
    if (!v47)
      goto LABEL_17;
    goto LABEL_24;
  }
LABEL_22:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v12 = v46;
  if (v46)
    goto LABEL_23;
LABEL_16:
  Hasher._combine(_:)(0);
  v13 = v47;
  if (!v47)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v63, v13);
  swift_bridgeObjectRelease();
LABEL_25:
  v16 = v48;
  v15 = v49;
  v18 = v50;
  v17 = v51;
  v19 = v52;
  if (v48)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v20 = v15;
    v21 = v18;
    v22 = v17;
    v23 = v19;
    v24 = v16;
    _CFObject.hash(into:)();
    if (v15)
      goto LABEL_27;
  }
  else
  {
    Hasher._combine(_:)(0);
    v29 = v19;
    v30 = v15;
    v31 = v18;
    v32 = v17;
    if (v15)
    {
LABEL_27:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v25 = v15;
      _CFObject.hash(into:)();

      if (v18)
        goto LABEL_28;
      goto LABEL_33;
    }
  }
  Hasher._combine(_:)(0);
  if (v18)
  {
LABEL_28:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v26 = v18;
    _CFObject.hash(into:)();

    if (v17)
      goto LABEL_29;
LABEL_34:
    Hasher._combine(_:)(0);
    if (v19)
      goto LABEL_30;
    goto LABEL_35;
  }
LABEL_33:
  Hasher._combine(_:)(0);
  if (!v17)
    goto LABEL_34;
LABEL_29:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v27 = v17;
  _CFObject.hash(into:)();

  if (v19)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v28 = v19;
    _CFObject.hash(into:)();

    goto LABEL_36;
  }
LABEL_35:
  Hasher._combine(_:)(0);
  v28 = 0;
LABEL_36:

  v33 = v53;
  if (v33)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v63, v33);
    swift_bridgeObjectRelease();
    v34 = v54;
    if (v54)
      goto LABEL_38;
LABEL_41:
    Hasher._combine(_:)(0);
    if (v55)
      goto LABEL_39;
LABEL_42:
    Hasher._combine(_:)(0);
    goto LABEL_43;
  }
  Hasher._combine(_:)(0);
  v34 = v54;
  if (!v54)
    goto LABEL_41;
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v63, v34);
  swift_bridgeObjectRelease();
  if (!v55)
    goto LABEL_42;
LABEL_39:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_43:
  if (v56 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v35 = v56 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v35);
  }
  if (v57 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v36 = v57 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v36);
  }
  if (v58 == 2)
  {
    v37 = 0;
  }
  else
  {
    v37 = v58 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v37);
  if (v59 == 2)
  {
    v38 = 0;
  }
  else
  {
    v39 = v59 & 1;
    Hasher._combine(_:)(1u);
    v38 = v39;
  }
  Hasher._combine(_:)(v38);
  outlined retain of LocalePreferences?((uint64_t)v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
LABEL_56:
  swift_unknownObjectRelease();
  return Hasher._finalize()();
}

void ListFormatStyle.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[18];

  v8[3] = a3;
  v8[9] = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8[7] = (char *)v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8[14] = v4;
  v8[15] = v5;
  v8[16] = v6;
  v8[17] = v7;
  type metadata accessor for ListFormatStyle.CodingKeys();
}

void sub_181AEDE48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  MEMORY[0x186DA9D64](&protocol conformance descriptor for ListFormatStyle<A, B>.CodingKeys, a1);
  v6 = type metadata accessor for KeyedDecodingContainer();
  *(_QWORD *)(v5 - 128) = v6;
  *(_QWORD *)(v5 - 192) = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  *(_QWORD *)(v5 - 160) = v2;
  *(_QWORD *)(v5 - 112) = v2;
  *(_QWORD *)(v5 - 104) = v4;
  *(_QWORD *)(v5 - 184) = v4;
  *(_QWORD *)(v5 - 176) = v3;
  *(_QWORD *)(v5 - 144) = v1;
  *(_QWORD *)(v5 - 96) = v1;
  *(_QWORD *)(v5 - 88) = v3;
  type metadata accessor for ListFormatStyle();
}

uint64_t sub_181AEDEC0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v16 - v6;
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  *(_QWORD *)(v3 - 136) = v1;
  v8 = *(_QWORD *)(v3 - 120);
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v8)
  {
    v10 = *(_QWORD *)(v3 - 184);
    v9 = *(_QWORD *)(v3 - 176);
    *(_QWORD *)(v3 - 216) = v5;
    *(_QWORD *)(v3 - 208) = a1;
    v11 = *(_QWORD *)(v3 - 152);
    *(_QWORD *)(v3 - 120) = v2;
    *(_BYTE *)(v3 - 112) = 0;
    v13 = *(_QWORD *)(v3 - 168);
    v12 = *(_QWORD *)(v3 - 160);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 32);
    *(_QWORD *)(v3 - 224) = v7;
    v15(v7, v13, v12);
    *(_QWORD *)(v3 - 112) = v12;
    *(_QWORD *)(v3 - 104) = v10;
    *(_QWORD *)(v3 - 96) = *(_QWORD *)(v3 - 144);
    *(_QWORD *)(v3 - 88) = v9;
    type metadata accessor for ListFormatStyle.Width();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

void sub_181AEDFE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)(v6 - 112) = 1;
  MEMORY[0x186DA9D64](&protocol conformance descriptor for ListFormatStyle<A, B>.Width, a1);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  if (v2)
  {
    (*(void (**)(_QWORD, _QWORD))(v3 + 8))(*(_QWORD *)(v6 - 136), *(_QWORD *)(v6 - 128));
    v7 = *(_QWORD *)(v6 - 224);
    v8 = *(_QWORD *)(v6 - 152);
    __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v6 - 120));
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v4);
    JUMPOUT(0x181AEDF8CLL);
  }
  *(_BYTE *)(*(_QWORD *)(v6 - 224) + *(int *)(*(_QWORD *)(v6 - 208) + 52)) = *(_BYTE *)(v6 - 65);
  *(_QWORD *)(v6 - 112) = v4;
  *(_QWORD *)(v6 - 104) = v1;
  *(_QWORD *)(v6 - 96) = *(_QWORD *)(v6 - 144);
  *(_QWORD *)(v6 - 88) = v5;
  type metadata accessor for ListFormatStyle.ListType();
}

void protocol witness for FormatStyle.format(_:) in conformance ListFormatStyle<A, B>(uint64_t a1)
{
  ListFormatStyle.format(_:)(a1);
}

void protocol witness for Decodable.init(from:) in conformance ListFormatStyle<A, B>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  ListFormatStyle.init(from:)(a1, *(_QWORD *)(a2 + 16), a3);
}

void protocol witness for Encodable.encode(to:) in conformance ListFormatStyle<A, B>()
{
  ListFormatStyle.encode(to:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ListFormatStyle<A, B>(uint64_t a1, int *a2)
{
  _BYTE v4[72];

  Hasher.init(_seed:)();
  ListFormatStyle.hash(into:)((uint64_t)v4, a2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ListFormatStyle<A, B>()
{
  return static ListFormatStyle.== infix(_:_:)();
}

Swift::String __swiftcall StringStyle.format(_:)(Swift::String a1)
{
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v3;
  void *v4;
  Swift::String result;

  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  swift_bridgeObjectRetain();
  v3 = countAndFlagsBits;
  v4 = object;
  result._object = v4;
  result._countAndFlagsBits = v3;
  return result;
}

uint64_t static StringStyle.== infix(_:_:)()
{
  return 1;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance StringStyle.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StringStyle.CodingKeys()
{
  lazy protocol witness table accessor for type StringStyle.CodingKeys and conformance StringStyle.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance StringStyle.CodingKeys()
{
  lazy protocol witness table accessor for type StringStyle.CodingKeys and conformance StringStyle.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t StringStyle.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<StringStyle.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type StringStyle.CodingKeys and conformance StringStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int StringStyle.hashValue.getter()
{
  Hasher.init(_seed:)();
  return Hasher._finalize()();
}

uint64_t StringStyle.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance StringStyle@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = a1[1];
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Decodable.init(from:) in conformance StringStyle(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance StringStyle(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<StringStyle.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type StringStyle.CodingKeys and conformance StringStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance StringStyle()
{
  Hasher.init(_seed:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance StringStyle()
{
  Hasher.init(_seed:)();
  return Hasher._finalize()();
}

uint64_t Sequence<>.formatted()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t countAndFlagsBits;
  _QWORD v13[7];
  uint64_t v14;

  if (one-time initialization token for cache != -1)
    swift_once();
  v4 = static LocaleCache.cache + 16;
  v5 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v5);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v4, &v14);
  os_unfair_lock_unlock(v5);
  swift_release_n();
  v6 = v14;
  v7 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating, (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  specialized static ICUListFormatter.formatter<A, B>(for:)(0, v6, v7);
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  MEMORY[0x1E0C80A78](v8);
  v13[2] = a1;
  v13[3] = a2;
  v13[4] = partial apply for specialized implicit closure #2 in implicit closure #1 in ListFormatStyle.format(_:);
  v13[5] = v9;
  v10 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyADs5NeverOSSIsgnrzr_xSaySSGAGSTRzSSRsd__AGRsd_0_r_0_lIetMgnozo_Tp5((void (*)(uint64_t *__return_ptr, char *))partial apply for specialized thunk for @callee_guaranteed (@in_guaranteed A.FormatStyle.FormatInput) -> (@owned String), (uint64_t)v13, a1, a2);
  swift_release();
  countAndFlagsBits = ICUListFormatter.format(strings:)((Swift::OpaquePointer)v10)._countAndFlagsBits;
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return countAndFlagsBits;
}

void static FormatStyle.list<A, B>(memberStyle:type:width:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  __n128 v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16))(v7, v10, v9, v5);
  ListFormatStyle.init(memberStyle:)((uint64_t)v7, a2, a3);
}

void sub_181AEE790()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 - 96) = v3;
  *(_QWORD *)(v4 - 88) = v2;
  *(_QWORD *)(v4 - 80) = v1;
  *(_QWORD *)(v4 - 72) = v0;
  type metadata accessor for ListFormatStyle();
}

uint64_t sub_181AEE7A4(uint64_t result)
{
  uint64_t v1;
  char v2;
  char v3;

  *(_BYTE *)(v1 + *(int *)(result + 52)) = v3;
  *(_BYTE *)(v1 + *(int *)(result + 56)) = v2;
  return result;
}

uint64_t static FormatStyle.list<A>(type:width:)@<X0>(char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  char v4;
  char v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v4 = *a1;
  v5 = *a2;
  if (one-time initialization token for cache != -1)
    swift_once();
  v6 = static LocaleCache.cache + 16;
  v7 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v6, &v10);
  os_unfair_lock_unlock(v7);
  swift_release_n();
  v8 = v10;
  result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating, (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  *(_QWORD *)(a3 + 8) = v8;
  *(_QWORD *)(a3 + 16) = result;
  *(_BYTE *)a3 = v5;
  *(_BYTE *)(a3 + 1) = v4;
  return result;
}

uint64_t sub_181AEE8E8()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in ListFormatStyle.format(_:)()
{
  uint64_t v0;
  uint64_t v2;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)(v0 + 32) + 48))(&v2);
  return v2;
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed A.FormatStyle.FormatInput) -> (@owned String)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(v1 + 48))();
  *a1 = result;
  a1[1] = v4;
  return result;
}

void type metadata accessor for ListFormatStyle.CodingKeys()
{
  JUMPOUT(0x186DA9CBCLL);
}

void type metadata accessor for ListFormatStyle.Width()
{
  JUMPOUT(0x186DA9CBCLL);
}

void type metadata accessor for ListFormatStyle.ListType()
{
  JUMPOUT(0x186DA9CBCLL);
}

unint64_t lazy protocol witness table accessor for type StringStyle.CodingKeys and conformance StringStyle.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StringStyle.CodingKeys and conformance StringStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type StringStyle.CodingKeys and conformance StringStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for StringStyle.CodingKeys, &unk_1E0F17680);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StringStyle.CodingKeys and conformance StringStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StringStyle.CodingKeys and conformance StringStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type StringStyle.CodingKeys and conformance StringStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for StringStyle.CodingKeys, &unk_1E0F17680);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StringStyle.CodingKeys and conformance StringStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StringStyle.CodingKeys and conformance StringStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type StringStyle.CodingKeys and conformance StringStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for StringStyle.CodingKeys, &unk_1E0F17680);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StringStyle.CodingKeys and conformance StringStyle.CodingKeys);
  }
  return result;
}

uint64_t sub_181AEEA2C()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized implicit closure #2 in implicit closure #1 in ListFormatStyle.format(_:)(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t partial apply for specialized thunk for @callee_guaranteed (@in_guaranteed A.FormatStyle.FormatInput) -> (@owned String)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t (*v4)(_QWORD *);
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _QWORD v8[2];

  v4 = *(uint64_t (**)(_QWORD *))(v2 + 32);
  v5 = a1[1];
  v8[0] = *a1;
  v8[1] = v5;
  result = v4(v8);
  *a2 = result;
  a2[1] = v7;
  return result;
}

void base witness table accessor for Equatable in ListFormatStyle<A, B>.Width()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for Equatable in ListFormatStyle<A, B>.ListType()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t instantiation function for generic protocol witness table for ListFormatStyle<A, B>(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  a1[1] = MEMORY[0x186DA9D64](&protocol conformance descriptor for ListFormatStyle<A, B>);
  a1[2] = MEMORY[0x186DA9D64](&protocol conformance descriptor for ListFormatStyle<A, B>, a2);
  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ListFormatStyle<A, B>, a2);
  a1[3] = result;
  return result;
}

void base witness table accessor for Equatable in ListFormatStyle<A, B>()
{
  JUMPOUT(0x186DA9D64);
}

unint64_t instantiation function for generic protocol witness table for StringStyle(_QWORD *a1)
{
  unint64_t result;

  a1[1] = lazy protocol witness table accessor for type StringStyle and conformance StringStyle();
  a1[2] = lazy protocol witness table accessor for type StringStyle and conformance StringStyle();
  result = lazy protocol witness table accessor for type StringStyle and conformance StringStyle();
  a1[3] = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type StringStyle and conformance StringStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StringStyle and conformance StringStyle;
  if (!lazy protocol witness table cache variable for type StringStyle and conformance StringStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for StringStyle, &type metadata for StringStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StringStyle and conformance StringStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StringStyle and conformance StringStyle;
  if (!lazy protocol witness table cache variable for type StringStyle and conformance StringStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for StringStyle, &type metadata for StringStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StringStyle and conformance StringStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StringStyle and conformance StringStyle;
  if (!lazy protocol witness table cache variable for type StringStyle and conformance StringStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for StringStyle, &type metadata for StringStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StringStyle and conformance StringStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StringStyle and conformance StringStyle;
  if (!lazy protocol witness table cache variable for type StringStyle and conformance StringStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for StringStyle, &type metadata for StringStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StringStyle and conformance StringStyle);
  }
  return result;
}

uint64_t type metadata completion function for ListFormatStyle()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for ListFormatStyle(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _BYTE *v10;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 9) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(_QWORD *, _QWORD *))(v5 + 16))(a1, a2);
    v10 = (char *)v4 + v6;
    *v10 = *((_BYTE *)a2 + v6);
    v10[1] = *((_BYTE *)a2 + v6 + 1);
    *(_OWORD *)(((unint64_t)v4 + v6 + 9) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)a2 + v6 + 9) & 0xFFFFFFFFFFFFF8);
    swift_unknownObjectRetain();
  }
  return v4;
}

uint64_t destroy for ListFormatStyle(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for ListFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = (_BYTE *)(v6 + a1);
  v8 = (_BYTE *)(v6 + a2);
  *v7 = *v8;
  v7[1] = v8[1];
  *(_OWORD *)((unint64_t)(v7 + 9) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((unint64_t)(v8 + 9) & 0xFFFFFFFFFFFFF8);
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ListFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = (_BYTE *)(v6 + a1);
  v8 = (_BYTE *)(v6 + a2);
  *v7 = *v8;
  v7[1] = v8[1];
  v9 = (_QWORD *)((unint64_t)(v7 + 9) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)((unint64_t)(v8 + 9) & 0xFFFFFFFFFFFFFFF8);
  v11 = v10[1];
  *v9 = *v10;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v9[1] = v11;
  return a1;
}

uint64_t initializeWithTake for ListFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = (_BYTE *)(v6 + a1);
  v8 = (_BYTE *)(v6 + a2);
  *v7 = *v8;
  v7[1] = v8[1];
  *(_OWORD *)((unint64_t)(v7 + 9) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((unint64_t)(v8 + 9) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for ListFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = (_BYTE *)(v6 + a1);
  v8 = (_BYTE *)(v6 + a2);
  *v7 = *v8;
  v7[1] = v8[1];
  v9 = (_QWORD *)((unint64_t)(v7 + 9) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)((unint64_t)(v8 + 9) & 0xFFFFFFFFFFFFFFF8);
  v11 = v10[1];
  *v9 = *v10;
  swift_unknownObjectRelease();
  v9[1] = v11;
  return a1;
}

uint64_t getEnumTagSinglePayload for ListFormatStyle(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 9) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 9) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_181AEF078 + 4 * byte_18206C7F4[v10]))();
  }
}

void storeEnumTagSinglePayload for ListFormatStyle(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 9) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 9) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 9) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_181AEF1F0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x181AEF268);
}

void sub_181AEF1F8(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x181AEF200);
  JUMPOUT(0x181AEF268);
}

void sub_181AEF240()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x181AEF268);
}

void sub_181AEF248()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x181AEF268);
}

uint64_t sub_181AEF250(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x181AEF268);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x181AEF264);
    JUMPOUT(0x181AEF25CLL);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t storeEnumTagSinglePayload for ListFormatStyle.Width(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_181AEF2CC + 4 * byte_18206C808[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_181AEF300 + 4 * byte_18206C803[v4]))();
}

uint64_t sub_181AEF300(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181AEF308(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181AEF310);
  return result;
}

uint64_t sub_181AEF31C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181AEF324);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_181AEF328(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181AEF330(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for ListFormatStyle.ListType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_181AEF388 + 4 * byte_18206C812[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_181AEF3BC + 4 * byte_18206C80D[v4]))();
}

uint64_t sub_181AEF3BC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181AEF3C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181AEF3CCLL);
  return result;
}

uint64_t sub_181AEF3D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181AEF3E0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_181AEF3E4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181AEF3EC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StringStyle()
{
  return &type metadata for StringStyle;
}

void *type metadata accessor for StringStyle.CodingKeys()
{
  return &unk_1E0F17680;
}

uint64_t storeEnumTagSinglePayload for ListFormatStyle.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_181AEF464 + 4 * byte_18206C81C[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_181AEF498 + 4 * byte_18206C817[v4]))();
}

uint64_t sub_181AEF498(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181AEF4A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181AEF4A8);
  return result;
}

uint64_t sub_181AEF4B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181AEF4BCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_181AEF4C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181AEF4C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void base witness table accessor for Equatable in ListFormatStyle<A, B>.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomDebugStringConvertible in ListFormatStyle<A, B>.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomStringConvertible in ListFormatStyle<A, B>.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

_QWORD *specialized Sequence.compactMap<A>(_:)(void (*a1)(_OWORD *__return_ptr, __int128 *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v16;
  __int128 v17;
  _OWORD v18[2];
  uint64_t v19;
  char v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  if (!v5)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  v23 = a3;
  v8 = (_QWORD *)(a3 + 48);
  v9 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  do
  {
    v11 = *v8;
    v21 = *((_OWORD *)v8 - 1);
    v22 = v11;
    a1(v18, &v21);
    if (v4)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v9;
    }
    if ((v20 & 1) == 0)
    {
      v16 = v18[1];
      v17 = v18[0];
      v12 = v19;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      v14 = v9[2];
      v13 = v9[3];
      if (v14 >= v13 >> 1)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, v9);
      v9[2] = v14 + 1;
      v10 = &v9[5 * v14];
      *((_OWORD *)v10 + 2) = v17;
      *((_OWORD *)v10 + 3) = v16;
      v10[8] = v12;
    }
    v8 += 3;
    --v5;
  }
  while (v5);
  swift_bridgeObjectRelease();
  return v9;
}

_QWORD *specialized Sequence.compactMap<A>(_:)(void (*a1)(_OWORD *__return_ptr, _QWORD *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  _OWORD v18[2];
  uint64_t v19;
  char v20;
  _QWORD v21[3];

  v21[0] = a3;
  v21[1] = a4;
  v21[2] = a5;
  a1(v18, v21);
  if (!v5)
  {
    if ((v20 & 1) != 0)
    {
      return (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    else
    {
      v16 = v18[1];
      v17 = v18[0];
      v7 = v19;
      v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
      v8 = v6[2];
      v9 = v6[3];
      v10 = v8 + 1;
      if (v8 >= v9 >> 1)
      {
        v14 = v6[2];
        v15 = v8 + 1;
        v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v8 + 1, 1, v6);
        v8 = v14;
        v10 = v15;
        v6 = v13;
      }
      v6[2] = v10;
      v11 = &v6[5 * v8];
      *((_OWORD *)v11 + 2) = v17;
      *((_OWORD *)v11 + 3) = v16;
      v11[8] = v7;
    }
  }
  return v6;
}

uint64_t _sSTsE10compactMapySayqd__Gqd__Sg7ElementQzKXEKlFxq_Sgs5Error_pRi_zRi0_zRi__Ri0__r0_lySSqd__Isgnrzo_SD4KeysVySSyp_GABsAG_pAJRszr__lIetMggozo_Tp5(void (*a1)(_QWORD *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _sSTsE10compactMapySayqd__Gqd__Sg7ElementQzKXEKlFxq_Sgs5Error_pRi_zRi0_zRi__Ri0__r0_lySSqd__Isgnrzo_SD4KeysVySSyp_GABsAG_pAJRszr__lIetMggozo_Tp5Tm(a1, a2, a3, a4);
}

uint64_t _sSTsE10compactMapySayqd__Gqd__Sg7ElementQzKXEKlFxq_Sgs5Error_pRi_zRi0_zRi__Ri0__r0_lySSqd__Isgnrzo_SD4KeysVySSyp_GABsAG_pAJRszr__lIetMggozo_Tp5Tm(void (*a1)(_QWORD *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t result;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t i;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  char *v33;
  char isClassOrObjCExistentialType;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  Swift::Bool v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int64_t v57;
  void (*v58)(unint64_t, char *, uint64_t);
  uint64_t v59;
  char *v60;
  void (*v61)(_QWORD *);
  _QWORD v62[2];
  uint64_t v63;

  v5 = v4;
  v61 = a1;
  v9 = type metadata accessor for Optional();
  v52 = *(_QWORD *)(v9 - 8);
  v53 = v9;
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v50 - v10;
  v12 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](v13);
  v60 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v51 = (char *)&v50 - v16;
  _swift_isClassOrObjCExistentialType();
  v63 = MEMORY[0x1E0DEE9D8];
  v17 = *(_QWORD *)(a3 + 64);
  v56 = a3 + 64;
  v18 = 1 << *(_BYTE *)(a3 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & v17;
  v57 = (unint64_t)(v18 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v22 = 0;
  v54 = a2;
  v55 = a3;
  if (v20)
    goto LABEL_6;
LABEL_7:
  if (!__OFADD__(v22++, 1))
  {
    if (v22 >= v57)
      goto LABEL_58;
    v27 = *(_QWORD *)(v56 + 8 * v22);
    if (v27)
    {
LABEL_19:
      v23 = v12;
      v20 = (v27 - 1) & v27;
      for (i = __clz(__rbit64(v27)) + (v22 << 6); ; i = v24 | (v22 << 6))
      {
        v29 = result;
        v30 = (_QWORD *)(*(_QWORD *)(result + 48) + 16 * i);
        v31 = v30[1];
        v62[0] = *v30;
        v62[1] = v31;
        swift_bridgeObjectRetain();
        v61(v62);
        if (v5)
        {
          swift_release();
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        v12 = v23;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v11, 1, a4) == 1)
        {
          (*(void (**)(char *, uint64_t))(v52 + 8))(v11, v53);
          result = v29;
          if (!v20)
            goto LABEL_7;
          goto LABEL_6;
        }
        v32 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
        v33 = v51;
        v32(v51, v11, a4);
        v32(v60, v33, a4);
        isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
        v35 = v63;
        v58 = (void (*)(unint64_t, char *, uint64_t))v32;
        v59 = 0;
        if ((isClassOrObjCExistentialType & 1) != 0)
        {
          if ((swift_isUniquelyReferenced_nonNull_bridgeObject() & 1) != 0
            && ((_swift_isClassOrObjCExistentialType() & 1) == 0
             || (v35 & 0x8000000000000000) == 0 && (v35 & 0x4000000000000000) == 0))
          {
            goto LABEL_36;
          }
        }
        else if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          goto LABEL_36;
        }
        v36 = v12;
        if ((_swift_isClassOrObjCExistentialType() & 1) != 0 && (v35 < 0 || (v35 & 0x4000000000000000) != 0))
        {
          specialized _ArrayBuffer._nonNative.getter(v35);
          swift_unknownObjectRetain();
          v39 = _CocoaArrayWrapper.endIndex.getter();
          swift_unknownObjectRelease();
        }
        else
        {
          v37 = _swift_isClassOrObjCExistentialType();
          v38 = v35 & 0xFFFFFFFFFFFFF8;
          if ((v37 & 1) == 0)
            v38 = v35;
          v39 = *(_QWORD *)(v38 + 16);
        }
        v35 = _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v39 + 1, 1, v35, a4);
        v63 = v35;
        v12 = v36;
LABEL_36:
        v40 = v12;
        if ((_swift_isClassOrObjCExistentialType() & 1) != 0)
          v41 = v35 & 0xFFFFFFFFFFFFFF8;
        else
          v41 = v35;
        v42 = *(_QWORD *)(v41 + 16);
        if ((_swift_isClassOrObjCExistentialType() & 1) != 0)
          v43 = v35 & 0xFFFFFFFFFFFFFF8;
        else
          v43 = v35;
        v44 = *(_QWORD *)(v43 + 24);
        v45 = v42 + 1;
        if (v42 + 1 > (uint64_t)(v44 >> 1))
        {
          v49 = v44 > 1;
          type metadata accessor for Array();
          Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v49, v42 + 1, 1);
          v35 = v63;
        }
        v46 = v11;
        if ((_swift_isClassOrObjCExistentialType() & 1) != 0)
        {
          v47 = v35 & 0xFFFFFFFFFFFFFF8;
          *(_QWORD *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10) = v45;
        }
        else
        {
          *(_QWORD *)(v35 + 16) = v45;
          v47 = v35 & 0xFFFFFFFFFFFFFF8;
        }
        if ((_swift_isClassOrObjCExistentialType() & 1) != 0)
          v48 = v47;
        else
          v48 = v35;
        v58(v48+ ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80))+ *(_QWORD *)(v40 + 72) * v42, v60, a4);
        v63 = v35;
        result = v55;
        v11 = v46;
        v12 = v40;
        v5 = v59;
        if (!v20)
          goto LABEL_7;
LABEL_6:
        v23 = v12;
        v24 = __clz(__rbit64(v20));
        v20 &= v20 - 1;
      }
    }
    v28 = v22 + 1;
    if (v22 + 1 >= v57)
      goto LABEL_58;
    v27 = *(_QWORD *)(v56 + 8 * v28);
    if (!v27)
    {
      v28 = v22 + 2;
      if (v22 + 2 >= v57)
        goto LABEL_58;
      v27 = *(_QWORD *)(v56 + 8 * v28);
      if (!v27)
      {
        v28 = v22 + 3;
        if (v22 + 3 >= v57)
          goto LABEL_58;
        v27 = *(_QWORD *)(v56 + 8 * v28);
        if (!v27)
        {
          v28 = v22 + 4;
          if (v22 + 4 < v57)
          {
            v27 = *(_QWORD *)(v56 + 8 * v28);
            if (v27)
              goto LABEL_18;
            while (1)
            {
              v22 = v28 + 1;
              if (__OFADD__(v28, 1))
                goto LABEL_60;
              if (v22 >= v57)
                break;
              v27 = *(_QWORD *)(v56 + 8 * v22);
              ++v28;
              if (v27)
                goto LABEL_19;
            }
          }
LABEL_58:
          swift_release();
          return v63;
        }
      }
    }
LABEL_18:
    v22 = v28;
    goto LABEL_19;
  }
  __break(1u);
LABEL_60:
  __break(1u);
  return result;
}

_QWORD *specialized Sequence.compactMap<A>(_:)(void (*a1)(_OWORD *__return_ptr, _QWORD *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  _OWORD v16[2];
  char v17;
  _QWORD v18[2];

  v18[0] = a3;
  v18[1] = a4;
  a1(v16, v18);
  if (!v4)
  {
    if ((v17 & 1) != 0)
    {
      return (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    else
    {
      v14 = v16[1];
      v15 = v16[0];
      v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
      v6 = v5[2];
      v7 = v5[3];
      v8 = v6 + 1;
      if (v6 >= v7 >> 1)
      {
        v12 = v5[2];
        v13 = v6 + 1;
        v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v7 > 1), v6 + 1, 1, v5);
        v6 = v12;
        v8 = v13;
        v5 = v11;
      }
      v5[2] = v8;
      v9 = &v5[4 * v6];
      *((_OWORD *)v9 + 2) = v15;
      *((_OWORD *)v9 + 3) = v14;
    }
  }
  return v5;
}

{
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  _OWORD v16[2];
  char v17;
  _QWORD v18[2];

  v18[0] = a3;
  v18[1] = a4;
  a1(v16, v18);
  if (!v4)
  {
    if ((v17 & 1) != 0)
    {
      return (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    else
    {
      v14 = v16[1];
      v15 = v16[0];
      v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
      v6 = v5[2];
      v7 = v5[3];
      v8 = v6 + 1;
      if (v6 >= v7 >> 1)
      {
        v12 = v5[2];
        v13 = v6 + 1;
        v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v7 > 1), v6 + 1, 1, v5);
        v6 = v12;
        v8 = v13;
        v5 = v11;
      }
      v5[2] = v8;
      v9 = &v5[4 * v6];
      *((_OWORD *)v9 + 2) = v15;
      *((_OWORD *)v9 + 3) = v14;
    }
  }
  return v5;
}

uint64_t DataProtocol.firstRange<A, B>(of:in:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, void (*a4)(char *, char *, uint64_t)@<X3>, uint64_t a5@<X4>, void (*a6)(char *, uint64_t, uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  return DataProtocol.firstRange<A, B>(of:in:)(a1, a2, a7, a3, a4, a8, a5, a6, a9);
}

uint64_t specialized DataProtocol.firstRange<A, B>(of:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v7 = v6;
  v32 = a6;
  v11 = type metadata accessor for DispatchData();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)v30 - v16;
  v30[1] = lazy protocol witness table accessor for type DispatchData and conformance DispatchData((unint64_t *)&lazy protocol witness table cache variable for type DispatchData and conformance DispatchData, MEMORY[0x1E0DEF670]);
  dispatch thunk of RangeExpression.relative<A>(to:)();
  v31 = a3;
  v32 = a5;
  v30[0] = a1;
  v18 = dispatch thunk of Collection.count.getter();
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v19(v17, v6, v11);
  v35 = v38;
  v36 = v37;
  if (v18)
  {
    lazy protocol witness table accessor for type DispatchData and conformance DispatchData(&lazy protocol witness table cache variable for type DispatchData and conformance DispatchData, MEMORY[0x1E0DEF668]);
    v20 = dispatch thunk of RandomAccessCollection.distance(from:to:)();
    v21 = *(void (**)(char *, uint64_t))(v12 + 8);
    v21(v17, v11);
    if (v20 >= v18)
    {
      v22 = v37;
      v23 = v38;
      v34 = v37;
      v19(v14, v7, v11);
      v33 = v23;
      v24 = v30[0];
      if (v22 >= v23)
      {
LABEL_7:
        v21(v14, v11);
      }
      else
      {
        while (1)
        {
          v25 = dispatch thunk of RandomAccessCollection.distance(from:to:)();
          v21(v14, v11);
          if (v25 < v18)
            break;
          v26 = v34;
          if ((specialized DataProtocol.matches<A>(_:from:)(v24, v34, v31, v32) & 1) != 0)
          {
            result = dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
            if (v33 >= v26)
              return v26;
            __break(1u);
            return result;
          }
          dispatch thunk of Collection.index(after:)();
          v27 = v33;
          v34 = v33;
          v28 = v38;
          v19(v14, v7, v11);
          v33 = v28;
          if (v27 >= v28)
            goto LABEL_7;
        }
      }
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
  }
  return 0;
}

{
  uint64_t result;
  int64_t v11;
  uint64_t v12;
  int64_t v14;
  int64_t v15;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [UInt8]);
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [UInt8] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [UInt8], MEMORY[0x1E0DEAF50]);
  dispatch thunk of RangeExpression.relative<A>(to:)();
  result = dispatch thunk of Collection.count.getter();
  if (!result)
    return 0;
  v11 = v14;
  if (__OFSUB__(v15, v14))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }
  else
  {
    v12 = result;
    if (v15 - v14 < result || v14 >= v15)
      return 0;
    while (1)
    {
      if (__OFSUB__(v15, v11))
      {
        __break(1u);
        goto LABEL_18;
      }
      if (v15 - v11 < v12)
        return 0;
      result = specialized DataProtocol.matches<A>(_:from:)(a1, v11, a3, a4, a6);
      if ((result & 1) != 0)
        break;
      if (v15 == ++v11)
        return 0;
    }
    if (__OFADD__(v11, v12))
      goto LABEL_19;
    if (v11 + v12 >= v11)
      return v11;
  }
  __break(1u);
  return result;
}

{
  uint64_t result;
  int64_t v11;
  uint64_t v12;
  int64_t v14;
  int64_t v15;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousArray<UInt8>);
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type ContiguousArray<UInt8> and conformance ContiguousArray<A>, &demangling cache variable for type metadata for ContiguousArray<UInt8>, MEMORY[0x1E0DEC740]);
  dispatch thunk of RangeExpression.relative<A>(to:)();
  result = dispatch thunk of Collection.count.getter();
  if (!result)
    return 0;
  v11 = v14;
  if (__OFSUB__(v15, v14))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }
  else
  {
    v12 = result;
    if (v15 - v14 < result || v14 >= v15)
      return 0;
    while (1)
    {
      if (__OFSUB__(v15, v11))
      {
        __break(1u);
        goto LABEL_18;
      }
      if (v15 - v11 < v12)
        return 0;
      result = specialized DataProtocol.matches<A>(_:from:)(a1, v11, a3, a4, a6);
      if ((result & 1) != 0)
        break;
      if (v15 == ++v11)
        return 0;
    }
    if (__OFADD__(v11, v12))
      goto LABEL_19;
    if (v11 + v12 >= v11)
      return v11;
  }
  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.firstRange<A, B>(of:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  lazy protocol witness table accessor for type DispatchData.Region and conformance DispatchData.Region();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  result = dispatch thunk of Collection.count.getter();
  if (result)
  {
    v15 = a5 + a4;
    if (__OFADD__(a5, a4))
    {
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    if (v15 < v20)
      goto LABEL_28;
    v16 = v19;
    if (v19 < a5 || v15 < v19 || v20 < a5)
      goto LABEL_28;
    if (__OFSUB__(v20, v19))
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    v17 = result;
    result = 0;
    if (v19 < v20 && v20 - v19 >= v17)
    {
      result = specialized DataProtocol.matches<A>(_:from:)(a1, v19, a3, a4, a5, a6, a8);
      if ((result & 1) != 0)
      {
LABEL_17:
        v18 = v16 + v17;
        if (!__OFADD__(v16, v17))
        {
          if (v18 >= a5 && v15 >= v18)
          {
            if (v18 >= v16)
              return v16;
            goto LABEL_32;
          }
LABEL_31:
          __break(1u);
LABEL_32:
          __break(1u);
          return result;
        }
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      while (v15 != v16)
      {
        if (v20 - 1 == v16)
          return 0;
        if (v19 + 1 < a5)
          goto LABEL_25;
        if (__OFSUB__(v20, ++v16))
          goto LABEL_26;
        if (v20 - v16 < v17)
          return 0;
        result = specialized DataProtocol.matches<A>(_:from:)(a1, v16, a3, a4, a5, a6, a8);
        if ((result & 1) != 0)
          goto LABEL_17;
      }
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
  }
  return result;
}

uint64_t specialized DataProtocol.firstRange<A, B>(of:in:)(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  lazy protocol witness table accessor for type Data and conformance Data();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  v7 = dispatch thunk of Collection.count.getter();
  if (v7)
  {
    v8 = v7;
    v9 = v12;
    if (specialized RandomAccessCollection<>.distance(from:to:)(v12, v13, a3, a4) >= v7 && v12 < v13)
    {
      while (specialized RandomAccessCollection<>.distance(from:to:)(v9, v13, a3, a4) >= v8)
      {
        if ((specialized DataProtocol.matches<A>(_:from:)(a1, v9, a3, a4) & 1) != 0)
        {
          result = specialized RandomAccessCollection<>.index(_:offsetBy:)(v9, v8, a3, a4);
          if (result >= v9)
            return v9;
          __break(1u);
          return result;
        }
        if (v13 == ++v9)
          return 0;
      }
    }
  }
  return 0;
}

uint64_t specialized DataProtocol.firstRange<A, B>(of:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>);
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type UnsafeBufferPointer<UInt8> and conformance UnsafeBufferPointer<A>, &demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>, MEMORY[0x1E0DEA5E8]);
  dispatch thunk of RangeExpression.relative<A>(to:)();
  v12 = dispatch thunk of Collection.count.getter();
  v13 = v19;
  if (v12)
    v14 = v20 - v19 < v12;
  else
    v14 = 1;
  if (v14 || v20 <= v19)
    return 0;
  v17 = v12;
  v18 = ~v19 + v20;
  while (1)
  {
    result = specialized DataProtocol.matches<A>(_:from:)(a1, v13, a3, a4, a5, a7);
    if ((result & 1) != 0)
      break;
    result = 0;
    if (++v13 < v20)
    {
      v14 = v18-- < v17;
      if (!v14)
        continue;
    }
    return result;
  }
  if (v17 + v13 >= v13)
    return v13;
  __break(1u);
  return result;
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  lazy protocol witness table accessor for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  v12 = dispatch thunk of Collection.count.getter();
  if (v12)
  {
    v13 = v12;
    if (specialized RandomAccessCollection<>.distance(from:to:)(v19, v20, a3, a4) >= v12 && v19 < v20)
    {
      if (a3)
        v15 = a4 - a3;
      else
        v15 = 0;
      v16 = v19;
      while (1)
      {
        if (specialized RandomAccessCollection<>.distance(from:to:)(v16, v20, a3, a4) < v13)
          return 0;
        result = specialized DataProtocol.matches<A>(_:from:)(a1, v16, a3, a4, a5, a7);
        if ((result & 1) != 0)
          break;
        if (v19 < 0 || v16 >= v15)
        {
          __break(1u);
LABEL_24:
          __break(1u);
          goto LABEL_25;
        }
        if (v20 == ++v16)
          return 0;
      }
      v18 = v16 + v13;
      if (__OFADD__(v16, v13))
        goto LABEL_24;
      if (v18 < 0 || v15 < v18)
      {
LABEL_25:
        __break(1u);
      }
      else if (v18 >= v16)
      {
        return v16;
      }
      __break(1u);
      return result;
    }
  }
  return 0;
}

uint64_t specialized DataProtocol.firstRange<A, B>(of:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<UInt8>);
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type ArraySlice<UInt8> and conformance ArraySlice<A>, &demangling cache variable for type metadata for ArraySlice<UInt8>, MEMORY[0x1E0DEBF88]);
  dispatch thunk of RangeExpression.relative<A>(to:)();
  result = dispatch thunk of Collection.count.getter();
  if (!result)
    return 0;
  v15 = v18;
  if (__OFSUB__(v19, v18))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }
  else
  {
    v16 = result;
    if (v19 - v18 < result || v18 >= v19)
      return 0;
    while (1)
    {
      if (__OFSUB__(v19, v15))
      {
        __break(1u);
        goto LABEL_18;
      }
      if (v19 - v15 < v16)
        return 0;
      result = specialized DataProtocol.matches<A>(_:from:)(a1, v15, a4, a5, a6, a7, a9);
      if ((result & 1) != 0)
        break;
      if (v19 == ++v15)
        return 0;
    }
    if (__OFADD__(v15, v16))
      goto LABEL_19;
    if (v15 + v16 >= v15)
      return v15;
  }
  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.firstRange<A, B>(of:in:)()
{
  uint64_t AssociatedTypeWitness;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EmptyCollection<UInt8>);
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type EmptyCollection<UInt8> and conformance EmptyCollection<A>, &demangling cache variable for type metadata for EmptyCollection<UInt8>, MEMORY[0x1E0DEC788]);
  dispatch thunk of RangeExpression.relative<A>(to:)();
  if ((dispatch thunk of Collection.count.getter() & 0x8000000000000000) == 0 || v2 >= v3)
    return 0;
  result = dispatch thunk of Collection.startIndex.getter();
  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.firstRange<A, B>(of:in:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Repeated<UInt8>);
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type Repeated<UInt8> and conformance Repeated<A>, &demangling cache variable for type metadata for Repeated<UInt8>, MEMORY[0x1E0DEE880]);
  dispatch thunk of RangeExpression.relative<A>(to:)();
  result = dispatch thunk of Collection.count.getter();
  if (result)
  {
    if (v16 > a3 || (v10 = v15, v15 > a3) || (v16 | v15) < 0)
    {
      __break(1u);
      goto LABEL_24;
    }
    v11 = result;
    v12 = v16 - v15 < result || v16 <= v15;
    if (!v12)
    {
      v13 = ~v15 + v16;
      while (1)
      {
        result = specialized DataProtocol.matches<A>(_:from:)(a1, v10, a3, a4, a5);
        if ((result & 1) != 0)
          break;
        result = 0;
        if (++v10 < v16)
        {
          v12 = v13-- < v11;
          if (!v12)
            continue;
        }
        return result;
      }
      v14 = v10 + v11;
      if (!__OFADD__(v10, v11))
      {
        if ((v14 & 0x8000000000000000) == 0 && v14 <= a3)
        {
          if (v14 >= v10)
            return v10;
          goto LABEL_26;
        }
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
        return result;
      }
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    return 0;
  }
  return result;
}

uint64_t DataProtocol.firstRange<A, B>(of:in:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(char *, char *, uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void (*a8)(char *, uint64_t, uint64_t)@<X7>, uint64_t a9@<X8>)
{
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t AssociatedConformanceWitness;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t);
  char *v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  void (*v47)(char *, uint64_t);
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(char *, uint64_t);
  uint64_t v59;
  char *v60;
  char *v61;
  char v62;
  uint64_t result;
  char *v64;
  char v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  void (*v70)(char *, char *, uint64_t);
  uint64_t v71;
  char *v72;
  char *v73;
  void (*v74)(char *, char *, uint64_t);
  char *v75;
  void (*v76)(char *, uint64_t);
  char *v77;
  uint64_t v78;
  void (*v79)(char *, char *, uint64_t);
  char *v80;
  char *v81;
  uint64_t TupleTypeMetadata2;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  void (*v92)(char *, char *, uint64_t);
  void (*v93)(char *, uint64_t, uint64_t);
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;

  v101 = a2;
  v92 = a5;
  v93 = a8;
  v99 = a4;
  v100 = a7;
  v86 = a9;
  v91 = a6;
  v97 = *(_QWORD *)(a6 + 8);
  v98 = a1;
  v10 = *(_QWORD *)(*(_QWORD *)(v97 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v83 = (char *)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v81 = (char *)&v78 - v14;
  v96 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v15);
  v90 = (char *)&v78 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v78 - v18;
  v20 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v21);
  v94 = (char *)&v78 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v87 = (char *)&v78 - v24;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v85 = AssociatedTypeWitness;
  v95 = AssociatedConformanceWitness;
  v26 = type metadata accessor for Range();
  v27 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26);
  v80 = (char *)&v78 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29);
  v31 = (char *)&v78 - v30;
  MEMORY[0x1E0C80A78](v32);
  v34 = (char *)&v78 - v33;
  MEMORY[0x1E0C80A78](v35);
  v37 = (char *)&v78 - v36;
  v38 = v102;
  v89 = v10;
  dispatch thunk of RangeExpression.relative<A>(to:)();
  v39 = dispatch thunk of Collection.count.getter();
  v40 = v38;
  v41 = v39;
  v88 = v20;
  v42 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  v43 = v87;
  v93 = v42;
  v42(v87, v40, a3);
  v44 = *(void (**)(char *, char *, uint64_t))(v27 + 16);
  v101 = v37;
  v92 = v44;
  v44(v34, v37, v26);
  if (!v41)
  {
    v48 = *(void (**)(char *, uint64_t))(v27 + 8);
    v48(v34, v26);
    (*(void (**)(char *, uint64_t))(v88 + 8))(v43, a3);
    v48(v101, v26);
    goto LABEL_5;
  }
  v45 = dispatch thunk of RandomAccessCollection.distance(from:to:)();
  v84 = v27;
  v46 = *(void (**)(char *, uint64_t))(v27 + 8);
  v46(v34, v26);
  v88 = *(_QWORD *)(v88 + 8);
  ((void (*)(char *, uint64_t))v88)(v43, a3);
  if (v45 < v41)
  {
    v47 = v46;
    v27 = v84;
    v47(v101, v26);
LABEL_5:
    v49 = 1;
    v50 = v86;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56))(v50, v49, 1, v26);
  }
  v51 = v101;
  v52 = v85;
  v79 = *(void (**)(char *, char *, uint64_t))(v96 + 16);
  v79(v19, v101, v85);
  v87 = &v51[*(int *)(v26 + 36)];
  v53 = dispatch thunk of static Comparable.< infix(_:_:)();
  v54 = v94;
  v93(v94, v102, a3);
  v55 = v51;
  v56 = v52;
  v92(v31, v55, v26);
  if ((v53 & 1) != 0)
  {
    while (1)
    {
      v57 = dispatch thunk of RandomAccessCollection.distance(from:to:)();
      v46(v31, v26);
      ((void (*)(char *, uint64_t))v88)(v54, a3);
      if (v57 < v41)
        break;
      v58 = (uint64_t (*)(char *, uint64_t))v46;
      v59 = v102;
      if ((DataProtocol.matches<A>(_:from:)(v98, (uint64_t)v19, a3, v99, v91) & 1) != 0)
      {
        v64 = v90;
        dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
        v65 = dispatch thunk of static Comparable.<= infix(_:_:)();
        result = v58(v101, v26);
        if ((v65 & 1) != 0)
        {
          v66 = TupleTypeMetadata2;
          v67 = v81;
          v68 = &v81[*(int *)(TupleTypeMetadata2 + 48)];
          v69 = v96;
          v70 = *(void (**)(char *, char *, uint64_t))(v96 + 32);
          v70(v81, v19, v56);
          v70(v68, v64, v56);
          v71 = v69;
          v72 = v83;
          v73 = &v83[*(int *)(v66 + 48)];
          v74 = v79;
          v79(v83, v67, v56);
          v74(v73, v68, v56);
          v75 = v80;
          v70(v80, v72, v56);
          v76 = *(void (**)(char *, uint64_t))(v71 + 8);
          v76(v73, v56);
          v77 = &v72[*(int *)(v66 + 48)];
          v70(v72, v67, v56);
          v70(v77, v68, v56);
          v70(&v75[*(int *)(v26 + 36)], v77, v56);
          v76(v72, v56);
          v27 = v84;
          v50 = v86;
          (*(void (**)(uint64_t, char *, uint64_t))(v84 + 32))(v86, v75, v26);
          v49 = 0;
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56))(v50, v49, 1, v26);
        }
        __break(1u);
        return result;
      }
      v60 = v90;
      dispatch thunk of Collection.index(after:)();
      v61 = v60;
      v54 = v94;
      (*(void (**)(char *, char *, uint64_t))(v96 + 40))(v19, v61, v56);
      v62 = dispatch thunk of static Comparable.< infix(_:_:)();
      v93(v54, v59, a3);
      v92(v31, v101, v26);
      v46 = (void (*)(char *, uint64_t))v58;
      if ((v62 & 1) == 0)
        goto LABEL_10;
    }
  }
  else
  {
LABEL_10:
    v46(v31, v26);
    ((void (*)(char *, uint64_t))v88)(v54, a3);
  }
  (*(void (**)(char *, uint64_t))(v96 + 8))(v19, v56);
  v46(v101, v26);
  v49 = 1;
  v50 = v86;
  v27 = v84;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56))(v50, v49, 1, v26);
}

uint64_t DataProtocol.lastRange<A, B>(of:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  return DataProtocol.lastRange<A, B>(of:in:)(a1, a2, a7, a3, a4, a8, a5, a6, a9);
}

{
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  uint64_t (*v43)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  char v45;
  uint64_t v46;
  char *v47;
  void (*v48)(char *, uint64_t);
  char *v49;
  char v50;
  uint64_t v51;
  char *v52;
  char *v53;
  void (*v54)(char *, char *, uint64_t);
  char *v55;
  char *v56;
  void (*v57)(char *, char *, uint64_t);
  char *v58;
  void (*v59)(char *, uint64_t);
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t TupleTypeMetadata2;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  void (*v74)(char *, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t AssociatedConformanceWitness;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v79 = a6;
  v71 = a5;
  v72 = a8;
  v83 = a4;
  v84 = a7;
  v82 = a1;
  v70 = a9;
  v9 = *(_QWORD *)(a6 + 8);
  v75 = a2;
  v76 = v9;
  v77 = *(_QWORD *)(v9 + 8);
  v74 = *(void (**)(char *, uint64_t))(v77 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v68 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v66 = (char *)&v64 - v14;
  v69 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v15);
  v80 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v64 - v18;
  v20 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v21);
  v73 = (char *)&v64 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v23 = type metadata accessor for Range();
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v65 = (char *)&v64 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26);
  v28 = (char *)&v64 - v27;
  MEMORY[0x1E0C80A78](v29);
  v31 = (char *)&v64 - v30;
  v32 = v78;
  dispatch thunk of RangeExpression.relative<A>(to:)();
  v33 = dispatch thunk of Collection.count.getter();
  v75 = v20;
  v34 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  v35 = v73;
  v36 = v32;
  v37 = v33;
  v34(v73, v36, a3);
  (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v28, v31, v23);
  if (!v37)
  {
    v42 = *(void (**)(char *, uint64_t))(v24 + 8);
    v42(v28, v23);
    (*(void (**)(char *, uint64_t))(v75 + 8))(v35, a3);
    v41 = v70;
    v40 = v23;
    v42(v31, v23);
    goto LABEL_5;
  }
  v38 = dispatch thunk of RandomAccessCollection.distance(from:to:)();
  v72 = v24;
  v74 = *(void (**)(char *, uint64_t))(v24 + 8);
  v74(v28, v23);
  result = (*(uint64_t (**)(char *, uint64_t))(v75 + 8))(v35, a3);
  v40 = v23;
  if (v38 >= v37)
  {
    if (__OFSUB__(0, v37))
    {
      __break(1u);
    }
    else
    {
      dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
      if ((dispatch thunk of static Comparable.>= infix(_:_:)() & 1) == 0)
      {
        v48 = *(void (**)(char *, uint64_t))(v69 + 8);
LABEL_15:
        v48(v19, AssociatedTypeWitness);
        v74(v31, v23);
        v43 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v72 + 56);
        v44 = v70;
        return v43(v44, 1, 1, v40);
      }
      v75 = v37;
      v45 = DataProtocol.matches<A>(_:from:)(v82, (uint64_t)v19, a3, v83, v79);
      v46 = v69;
      if ((v45 & 1) == 0)
      {
        v47 = v80;
        do
        {
          dispatch thunk of BidirectionalCollection.index(before:)();
          v48 = *(void (**)(char *, uint64_t))(v46 + 8);
          v48(v19, AssociatedTypeWitness);
          (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v19, v47, AssociatedTypeWitness);
          if ((dispatch thunk of static Comparable.>= infix(_:_:)() & 1) == 0)
            goto LABEL_15;
        }
        while ((DataProtocol.matches<A>(_:from:)(v82, (uint64_t)v19, a3, v83, v79) & 1) == 0);
      }
      v49 = v80;
      dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
      v50 = dispatch thunk of static Comparable.<= infix(_:_:)();
      result = ((uint64_t (*)(char *, uint64_t))v74)(v31, v40);
      v84 = v40;
      if ((v50 & 1) != 0)
      {
        v52 = v66;
        v51 = TupleTypeMetadata2;
        v53 = &v66[*(int *)(TupleTypeMetadata2 + 48)];
        v54 = *(void (**)(char *, char *, uint64_t))(v46 + 32);
        v54(v66, v19, AssociatedTypeWitness);
        v54(v53, v49, AssociatedTypeWitness);
        v55 = v68;
        v56 = &v68[*(int *)(v51 + 48)];
        v57 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
        v57(v68, v52, AssociatedTypeWitness);
        v57(v56, v53, AssociatedTypeWitness);
        v58 = v65;
        v54(v65, v55, AssociatedTypeWitness);
        v59 = *(void (**)(char *, uint64_t))(v46 + 8);
        v59(v56, AssociatedTypeWitness);
        v60 = &v55[*(int *)(v51 + 48)];
        v54(v55, v52, AssociatedTypeWitness);
        v54(v60, v53, AssociatedTypeWitness);
        v61 = v84;
        v54(&v58[*(int *)(v84 + 36)], v60, AssociatedTypeWitness);
        v59(v55, AssociatedTypeWitness);
        v62 = v72;
        v63 = v70;
        (*(void (**)(uint64_t, char *, uint64_t))(v72 + 32))(v70, v58, v61);
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v62 + 56))(v63, 0, 1, v61);
      }
    }
    __break(1u);
    return result;
  }
  v41 = v70;
  v24 = v72;
  v74(v31, v23);
LABEL_5:
  v43 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56);
  v44 = v41;
  return v43(v44, 1, 1, v40);
}

uint64_t specialized DataProtocol.lastRange<A, B>(of:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v9 = type metadata accessor for DispatchData();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type DispatchData and conformance DispatchData((unint64_t *)&lazy protocol witness table cache variable for type DispatchData and conformance DispatchData, MEMORY[0x1E0DEF670]);
  dispatch thunk of RangeExpression.relative<A>(to:)();
  v13 = dispatch thunk of Collection.count.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v5, v9);
  v22 = v25;
  v23 = v24;
  if (!v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    return 0;
  }
  v14 = lazy protocol witness table accessor for type DispatchData and conformance DispatchData(&lazy protocol witness table cache variable for type DispatchData and conformance DispatchData, MEMORY[0x1E0DEF668]);
  v15 = dispatch thunk of RandomAccessCollection.distance(from:to:)();
  result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  if (v15 < v13)
    return 0;
  if (__OFSUB__(0, v13))
  {
    __break(1u);
    goto LABEL_15;
  }
  v19[1] = v14;
  dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
  v17 = v21;
  v18 = v24;
  if (v21 < v24)
    return 0;
  if ((specialized DataProtocol.matches<A>(_:from:)(a1, v21, a3, a5) & 1) == 0)
  {
    lazy protocol witness table accessor for type DispatchData and conformance DispatchData(&lazy protocol witness table cache variable for type DispatchData and conformance DispatchData, MEMORY[0x1E0DEF658]);
    do
    {
      dispatch thunk of BidirectionalCollection.index(before:)();
      v17 = v20;
      v21 = v20;
      if (v20 < v18)
        return 0;
    }
    while ((specialized DataProtocol.matches<A>(_:from:)(a1, v20, a3, a5) & 1) == 0);
  }
  result = dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
  if (v20 >= v17)
    return v17;
LABEL_15:
  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.lastRange<A, B>(of:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;

  lazy protocol witness table accessor for type DispatchData.Region and conformance DispatchData.Region();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  result = dispatch thunk of Collection.count.getter();
  if (!result)
    return 0;
  v15 = a5 + a4;
  if (__OFADD__(a5, a4))
  {
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (v15 < v22 || v21 < a5 || v15 < v21 || v22 < a5)
    goto LABEL_36;
  if (__OFSUB__(v22, v21))
  {
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v16 = result;
  if (v22 - v21 < result)
    return 0;
  if (__OFSUB__(0, result))
    goto LABEL_38;
  v17 = v22 - result;
  if (__OFADD__(v22, -result))
  {
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v17 < a5 || v15 < v17)
    goto LABEL_40;
  if (v17 < v21)
    return 0;
  result = specialized DataProtocol.matches<A>(_:from:)(a1, v22 - result, a3, a4, a5, a6, a8);
  if ((result & 1) != 0)
    goto LABEL_19;
  v20 = __OFSUB__(v17--, 1);
  if (!v20)
  {
    if (v17 < a5 || v17 >= v15)
      goto LABEL_47;
    if (v17 < v21)
      return 0;
    result = specialized DataProtocol.matches<A>(_:from:)(a1, v17, a3, a4, a5, a6, a8);
    if ((result & 1) != 0)
    {
LABEL_19:
      v19 = v17 + v16;
      if (!__OFADD__(v17, v16))
      {
        if (v19 >= a5 && v15 >= v19)
        {
          if (v19 >= v17)
            return v17;
          goto LABEL_45;
        }
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    while (1)
    {
      v20 = __OFSUB__(v17--, 1);
      if (v20)
        break;
      if (v17 < a5 || v22 - v16 - 2 >= v15)
        goto LABEL_42;
      if (v17 < v21)
        return 0;
      result = specialized DataProtocol.matches<A>(_:from:)(a1, v17, a3, a4, a5, a6, a8);
      if ((result & 1) != 0)
        goto LABEL_19;
    }
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.lastRange<A, B>(of:in:)(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  lazy protocol witness table accessor for type Data and conformance Data();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  v7 = dispatch thunk of Collection.count.getter();
  if (!v7)
    return 0;
  v8 = v7;
  result = specialized RandomAccessCollection<>.distance(from:to:)(v13, v14, a3, a4);
  if (result < v8)
    return 0;
  if (!__OFSUB__(0, v8))
  {
    v10 = specialized RandomAccessCollection<>.index(_:offsetBy:)(v14, -v8, a3);
    if (v10 >= v13)
    {
      v11 = v10;
      while (1)
      {
        result = specialized DataProtocol.matches<A>(_:from:)(a1, v11, a3, a4);
        if ((result & 1) != 0)
          break;
        if (__OFSUB__(v11--, 1))
        {
          __break(1u);
          goto LABEL_14;
        }
        if (v11 < v13)
          return 0;
      }
      result = specialized RandomAccessCollection<>.index(_:offsetBy:)(v11, v8, a3);
      if (result < v11)
        goto LABEL_15;
      return v11;
    }
    return 0;
  }
LABEL_14:
  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.lastRange<A, B>(of:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>);
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type UnsafeBufferPointer<UInt8> and conformance UnsafeBufferPointer<A>, &demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>, MEMORY[0x1E0DEA5E8]);
  dispatch thunk of RangeExpression.relative<A>(to:)();
  result = dispatch thunk of Collection.count.getter();
  if (result)
    v13 = v17 - v16 < result;
  else
    v13 = 1;
  if (v13)
    return 0;
  v15 = result;
  if (__OFSUB__(0, result))
  {
    __break(1u);
    goto LABEL_16;
  }
  v14 = v17 - result;
  if (v17 - result < v16)
    return 0;
  while (1)
  {
    result = specialized DataProtocol.matches<A>(_:from:)(a1, v14, a3, a4, a5, a7);
    if ((result & 1) != 0)
      break;
    if (--v14 < v16)
      return 0;
  }
  if (v14 + v15 >= v14)
    return v14;
LABEL_16:
  __break(1u);
  return result;
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  lazy protocol witness table accessor for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  v12 = dispatch thunk of Collection.count.getter();
  if (!v12)
    return 0;
  v13 = v12;
  result = specialized RandomAccessCollection<>.distance(from:to:)(v20, v21, a3, a4);
  if (result < v13)
    return 0;
  if (__OFSUB__(0, v13))
    goto LABEL_24;
  v15 = v21 - v13;
  if (__OFADD__(v21, -v13))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v16 = a4 - a3;
  if (!a3)
    v16 = 0;
  if (v15 < 0 || v16 < v15)
    goto LABEL_26;
  if (v15 < v20)
    return 0;
  v19 = v16;
  result = specialized DataProtocol.matches<A>(_:from:)(a1, v15, a3, a4, a5, a7);
  if ((result & 1) == 0)
  {
    while (1)
    {
      v17 = v15 - 1;
      if (v15 < 1 || v21 + ~v13 >= v19)
        break;
      if (v15 <= v20)
        return 0;
      result = specialized DataProtocol.matches<A>(_:from:)(a1, --v15, a3, a4, a5, a7);
      if ((result & 1) != 0)
        goto LABEL_18;
    }
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v17 = v21 - v13;
LABEL_18:
  v18 = v17 + v13;
  if (__OFADD__(v17, v13))
    goto LABEL_27;
  if ((v18 & 0x8000000000000000) != 0 || v19 < (uint64_t)v18)
    goto LABEL_28;
  if (v18 >= v17)
    return v17;
LABEL_29:
  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.lastRange<A, B>(of:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  uint64_t v11;
  int64_t v12;
  int64_t v14;
  uint64_t v15;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [UInt8]);
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [UInt8] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [UInt8], MEMORY[0x1E0DEAF50]);
  dispatch thunk of RangeExpression.relative<A>(to:)();
  result = dispatch thunk of Collection.count.getter();
  if (result)
  {
    if (__OFSUB__(v15, v14))
    {
      __break(1u);
    }
    else
    {
      v11 = result;
      if (v15 - v14 < result)
        return 0;
      if (!__OFSUB__(0, result))
      {
        v12 = v15 - result;
        if (!__OFADD__(v15, -result))
        {
          while (v12 >= v14)
          {
            result = specialized DataProtocol.matches<A>(_:from:)(a1, v12, a3, a4, a6);
            if ((result & 1) != 0)
              goto LABEL_13;
            if (__OFSUB__(v12--, 1))
            {
              __break(1u);
LABEL_13:
              if (__OFADD__(v12, v11))
                goto LABEL_19;
              if (v12 + v11 < v12)
                goto LABEL_20;
              return v12;
            }
          }
          return 0;
        }
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
        return result;
      }
    }
    __break(1u);
    goto LABEL_18;
  }
  return 0;
}

{
  uint64_t result;
  uint64_t v11;
  int64_t v12;
  int64_t v14;
  uint64_t v15;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousArray<UInt8>);
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type ContiguousArray<UInt8> and conformance ContiguousArray<A>, &demangling cache variable for type metadata for ContiguousArray<UInt8>, MEMORY[0x1E0DEC740]);
  dispatch thunk of RangeExpression.relative<A>(to:)();
  result = dispatch thunk of Collection.count.getter();
  if (result)
  {
    if (__OFSUB__(v15, v14))
    {
      __break(1u);
    }
    else
    {
      v11 = result;
      if (v15 - v14 < result)
        return 0;
      if (!__OFSUB__(0, result))
      {
        v12 = v15 - result;
        if (!__OFADD__(v15, -result))
        {
          while (v12 >= v14)
          {
            result = specialized DataProtocol.matches<A>(_:from:)(a1, v12, a3, a4, a6);
            if ((result & 1) != 0)
              goto LABEL_13;
            if (__OFSUB__(v12--, 1))
            {
              __break(1u);
LABEL_13:
              if (__OFADD__(v12, v11))
                goto LABEL_19;
              if (v12 + v11 < v12)
                goto LABEL_20;
              return v12;
            }
          }
          return 0;
        }
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
        return result;
      }
    }
    __break(1u);
    goto LABEL_18;
  }
  return 0;
}

uint64_t specialized DataProtocol.lastRange<A, B>(of:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v23;
  uint64_t v24;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<UInt8>);
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type ArraySlice<UInt8> and conformance ArraySlice<A>, &demangling cache variable for type metadata for ArraySlice<UInt8>, MEMORY[0x1E0DEBF88]);
  dispatch thunk of RangeExpression.relative<A>(to:)();
  result = dispatch thunk of Collection.count.getter();
  if (!result)
    return 0;
  if (__OFSUB__(v24, v23))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v14 = result;
  if (v24 - v23 < result)
    return 0;
  v15 = -result;
  if (__OFSUB__(0, result))
    goto LABEL_19;
  v16 = v24 - result;
  if (__OFADD__(v24, v15))
    goto LABEL_20;
  if (v16 < v23)
    return 0;
  v17 = a1;
  v18 = v24 + v15;
  v19 = a4;
  for (i = a5; ; i = a5)
  {
    result = specialized DataProtocol.matches<A>(_:from:)(v17, v18, v19, i, a6, a7, a9);
    if ((result & 1) != 0)
      break;
    if (__OFSUB__(v16--, 1))
    {
      __break(1u);
      goto LABEL_18;
    }
    if (v16 < v23)
      return 0;
    v17 = a1;
    v18 = v16;
    v19 = a4;
  }
  if (__OFADD__(v16, v14))
    goto LABEL_21;
  if (v16 + v14 >= v16)
    return v16;
LABEL_22:
  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.lastRange<A, B>(of:in:)()
{
  uint64_t AssociatedTypeWitness;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EmptyCollection<UInt8>);
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type EmptyCollection<UInt8> and conformance EmptyCollection<A>, &demangling cache variable for type metadata for EmptyCollection<UInt8>, MEMORY[0x1E0DEC788]);
  dispatch thunk of RangeExpression.relative<A>(to:)();
  if ((dispatch thunk of Collection.count.getter() & 0x8000000000000000) == 0 || v3 < v2)
    return 0;
  result = dispatch thunk of Collection.startIndex.getter();
  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.lastRange<A, B>(of:in:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Repeated<UInt8>);
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type Repeated<UInt8> and conformance Repeated<A>, &demangling cache variable for type metadata for Repeated<UInt8>, MEMORY[0x1E0DEE880]);
  dispatch thunk of RangeExpression.relative<A>(to:)();
  result = dispatch thunk of Collection.count.getter();
  if (!result)
    return 0;
  if (v15 > a3 || v14 > a3 || (v15 | v14) < 0)
    goto LABEL_25;
  v10 = result;
  if (v15 - v14 < result)
    return 0;
  if (__OFSUB__(0, result))
    goto LABEL_26;
  v11 = v15 - result;
  if (__OFADD__(v15, -result))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v11 < 0 || v11 > a3)
    goto LABEL_28;
  if (v11 < v14)
    return 0;
  result = specialized DataProtocol.matches<A>(_:from:)(a1, v15 - result, a3, a4, a5);
  if ((result & 1) == 0)
  {
    while (1)
    {
      v12 = v11 - 1;
      if (v11 < 1 || v15 + ~v10 >= a3)
        break;
      if (v11 <= v14)
        return 0;
      result = specialized DataProtocol.matches<A>(_:from:)(a1, --v11, a3, a4, a5);
      if ((result & 1) != 0)
        goto LABEL_19;
    }
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v12 = v15 - v10;
LABEL_19:
  v13 = v12 + v10;
  if (__OFADD__(v12, v10))
    goto LABEL_29;
  if (v13 < 0 || v13 > a3)
    goto LABEL_30;
  if (v13 >= v12)
    return v12;
LABEL_31:
  __break(1u);
  return result;
}

uint64_t DataProtocol.copyBytes<A>(to:count:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return DataProtocol.copyBytes<A>(to:count:)(a1, a2, a3, a5, a4, a6);
}

{
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  char *v35;
  void (*v36)(char *, char *, uint64_t);
  char *v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t TupleTypeMetadata2;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v57 = a2;
  v58 = a5;
  v56 = a1;
  v60 = a6;
  v61 = *(_QWORD *)(a6 + 8);
  v62 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v50 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v53 = (char *)&v47 - v11;
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v47 - v17;
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v47 - v20;
  swift_getAssociatedConformanceWitness();
  v22 = type metadata accessor for Range();
  v54 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v51 = (char *)&v47 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24);
  v52 = (char *)&v47 - v25;
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.startIndex.getter();
  v62 = v6;
  v59 = a4;
  dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
  v61 = v12;
  v26 = *(void (**)(char *, uint64_t))(v12 + 8);
  v26(v15, AssociatedTypeWitness);
  result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    v28 = TupleTypeMetadata2;
    v29 = *(int *)(TupleTypeMetadata2 + 48);
    v30 = v53;
    v48 = v26;
    v49 = v22;
    v31 = &v53[v29];
    v32 = v61;
    v33 = *(void (**)(char *, char *, uint64_t))(v61 + 32);
    v33(v53, v21, AssociatedTypeWitness);
    v33(v31, v18, AssociatedTypeWitness);
    v34 = v50;
    v35 = &v50[*(int *)(v28 + 48)];
    v36 = *(void (**)(char *, char *, uint64_t))(v32 + 16);
    v36(v50, v30, AssociatedTypeWitness);
    v36(v35, v31, AssociatedTypeWitness);
    v37 = v51;
    v33(v51, v34, AssociatedTypeWitness);
    v38 = v48;
    v48(v35, AssociatedTypeWitness);
    v39 = &v34[*(int *)(v28 + 48)];
    v33(v34, v30, AssociatedTypeWitness);
    v33(v39, v31, AssociatedTypeWitness);
    v40 = v49;
    v33(&v37[*(int *)(v49 + 36)], v39, AssociatedTypeWitness);
    v38(v34, AssociatedTypeWitness);
    v41 = v54;
    v42 = v52;
    (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v52, v37, v40);
    v43 = v60;
    v44 = *(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v60 + 112);
    v45 = MEMORY[0x186DA9D64](MEMORY[0x1E0DEB8A8], v40);
    v46 = v44(v56, v57, v42, v58, v40, v45, v59, v43);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v40);
    return v46;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:count:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v10 = a6 + a3;
  if (__OFADD__(a6, a3))
  {
    __break(1u);
    goto LABEL_11;
  }
  if (__OFADD__(a6, a5))
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v10 < a6 || a6 + a5 < v10)
    goto LABEL_12;
  if (!result)
  {
    v12 = 0;
    return specialized DataProtocol.copyBytes<A>(to:from:)(result, v12, a6, v10, a4, a5, a6);
  }
  v11 = *(_QWORD *)(*(_QWORD *)(a7 - 8) + 72);
  if ((unsigned __int128)(a2 * (__int128)v11) >> 64 == (a2 * v11) >> 63)
  {
    v12 = result + a2 * v11;
    return specialized DataProtocol.copyBytes<A>(to:from:)(result, v12, a6, v10, a4, a5, a6);
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:count:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  type metadata accessor for DispatchData();
  lazy protocol witness table accessor for type DispatchData and conformance DispatchData((unint64_t *)&lazy protocol witness table cache variable for type DispatchData and conformance DispatchData, MEMORY[0x1E0DEF670]);
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.startIndex.getter();
  lazy protocol witness table accessor for type DispatchData and conformance DispatchData(&lazy protocol witness table cache variable for type DispatchData and conformance DispatchData, MEMORY[0x1E0DEF668]);
  result = dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
  if (v10 < v11)
  {
    __break(1u);
  }
  else
  {
    if (!a1)
    {
      v9 = 0;
      return specialized DataProtocol.copyBytes<A>(to:from:)(a1, v9, v11, v10);
    }
    v8 = *(_QWORD *)(*(_QWORD *)(a4 - 8) + 72);
    if ((unsigned __int128)(a2 * (__int128)v8) >> 64 == (a2 * v8) >> 63)
    {
      v9 = a1 + a2 * v8;
      return specialized DataProtocol.copyBytes<A>(to:from:)(a1, v9, v11, v10);
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:count:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = a5 - a4;
  if (!a4)
    v6 = 0;
  if (a3 < 0 || v6 < a3)
  {
    __break(1u);
  }
  else
  {
    if (!result)
    {
      v8 = 0;
      return specialized DataProtocol.copyBytes<A>(to:from:)(result, v8, 0, a3, a4, a5);
    }
    v7 = *(_QWORD *)(*(_QWORD *)(a6 - 8) + 72);
    if ((unsigned __int128)(a2 * (__int128)v7) >> 64 == (a2 * v7) >> 63)
    {
      v8 = result + a2 * v7;
      return specialized DataProtocol.copyBytes<A>(to:from:)(result, v8, 0, a3, a4, a5);
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v6;
  uint64_t v7;

  if (a3 < 0)
  {
    __break(1u);
  }
  else
  {
    if (!result)
    {
      v7 = 0;
      return specialized DataProtocol.copyBytes<A>(to:from:)(result, v7, 0, a3, a4, a5);
    }
    v6 = *(_QWORD *)(*(_QWORD *)(a6 - 8) + 72);
    if ((unsigned __int128)(a2 * (__int128)v6) >> 64 == (a2 * v6) >> 63)
    {
      v7 = result + a2 * v6;
      return specialized DataProtocol.copyBytes<A>(to:from:)(result, v7, 0, a3, a4, a5);
    }
  }
  __break(1u);
  return result;
}

void specialized DataProtocol.copyBytes<A>(to:count:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __asm { BR              X10 }
}

uint64_t sub_181AF2D04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = ((uint64_t (*)(_QWORD, uint64_t, uint64_t, unint64_t))specialized RandomAccessCollection<>.index(_:offsetBy:))((int)v4, a3, v4, v3);
  if (v8 < (int)v4)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (!v5)
  {
    v10 = 0;
    return specialized DataProtocol.copyBytes<A>(to:from:)(v5, v10, (int)v4, v8, v4, v3);
  }
  v9 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 72);
  if ((unsigned __int128)(v7 * (__int128)v9) >> 64 != (v7 * v9) >> 63)
  {
LABEL_8:
    __break(1u);
    JUMPOUT(0x181AF2D84);
  }
  v10 = v5 + v7 * v9;
  return specialized DataProtocol.copyBytes<A>(to:from:)(v5, v10, (int)v4, v8, v4, v3);
}

uint64_t specialized DataProtocol.copyBytes<A>(to:count:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v12 = a6 + a3;
  if (__OFADD__(a6, a3))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v12 < a6)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (!result)
  {
    v14 = 0;
    return specialized DataProtocol.copyBytes<A>(to:from:)(result, v14, a6, v12, a4, a5, a6, a7);
  }
  v13 = *(_QWORD *)(*(_QWORD *)(a8 - 8) + 72);
  if ((unsigned __int128)(a2 * (__int128)v13) >> 64 == (a2 * v13) >> 63)
  {
    v14 = result + a2 * v13;
    return specialized DataProtocol.copyBytes<A>(to:from:)(result, v14, a6, v12, a4, a5, a6, a7);
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:count:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t), void (*a7)(uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;

  if (a3 < 0)
  {
    __break(1u);
  }
  else
  {
    if (!result)
    {
      v8 = 0;
      return specialized DataProtocol.copyBytes<A>(to:from:)(result, v8, 0, a3, a4, a6, a7);
    }
    v7 = *(_QWORD *)(*(_QWORD *)(a5 - 8) + 72);
    if ((unsigned __int128)(a2 * (__int128)v7) >> 64 == (a2 * v7) >> 63)
    {
      v8 = result + a2 * v7;
      return specialized DataProtocol.copyBytes<A>(to:from:)(result, v8, 0, a3, a4, a6, a7);
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:count:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;

  if (a3 < 0 || a4 < a3)
  {
    __break(1u);
  }
  else
  {
    if (!result)
    {
      v7 = 0;
      return specialized DataProtocol.copyBytes<A>(to:from:)(result, v7, 0, a3, a4, a5);
    }
    v6 = *(_QWORD *)(*(_QWORD *)(a6 - 8) + 72);
    if ((unsigned __int128)(a2 * (__int128)v6) >> 64 == (a2 * v6) >> 63)
    {
      v7 = result + a2 * v6;
      return specialized DataProtocol.copyBytes<A>(to:from:)(result, v7, 0, a3, a4, a5);
    }
  }
  __break(1u);
  return result;
}

void DataProtocol.copyBytes<A>(to:from:)(uint64_t a1, uint64_t a2, char *a3, unsigned int (*a4)(char *, uint64_t, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7)
{
  DataProtocol.copyBytes<A>(to:from:)(a1, a2, a3, a6, a4, a7, a5);
}

uint64_t specialized DataProtocol.copyBytes<A>(to:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v29;
  uint64_t v30;
  const void *v31;
  uint64_t v32;
  void *v33;
  int64_t v34;
  int64_t v35;
  int64_t v36;
  uint64_t result;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t *v41;
  _BYTE v42[16];
  uint64_t v43;
  char v44;
  uint64_t v45;
  _QWORD v46[3];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Slice<DispatchData>);
  MEMORY[0x1E0C80A78](v8);
  v10 = (uint64_t *)&v42[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (a1)
  {
    v46[1] = a3;
    v46[2] = a4;
    type metadata accessor for DispatchData();
    lazy protocol witness table accessor for type DispatchData and conformance DispatchData((unint64_t *)&lazy protocol witness table cache variable for type DispatchData and conformance DispatchData, MEMORY[0x1E0DEF670]);
    dispatch thunk of Collection.subscript.getter();
    lazy protocol witness table accessor for type DispatchData and conformance DispatchData(&lazy protocol witness table cache variable for type DispatchData and conformance DispatchData, MEMORY[0x1E0DEF668]);
    v11 = dispatch thunk of RandomAccessCollection.distance(from:to:)();
    v12 = *v10;
    v45 = v10[1];
    v46[0] = v12;
    v13 = dispatch thunk of Collection.startIndex.getter();
    v43 = MEMORY[0x1E0DEE9D8];
    MEMORY[0x1E0C80A78](v13);
    v14 = DispatchData.enumerateBytes(_:)();
    v15 = v43;
    MEMORY[0x1E0C80A78](v14);
    v38 = &v44;
    v39 = (uint64_t)v10;
    v40 = v46;
    v41 = &v45;
    v16 = specialized Sequence.compactMap<A>(_:)((void (*)(_OWORD *__return_ptr, __int128 *))partial apply for specialized closure #1 in Slice<>.regions.getter, (uint64_t)&v42[-48], v15);
    swift_bridgeObjectRelease();
    v17 = v16[2];
    if (v17)
    {
      v18 = 0;
      v19 = a2 - a1;
      if (v11 >= a2 - a1)
        v11 = a2 - a1;
      v20 = a2;
      v21 = v16 + 8;
      while (v11 >= 1)
      {
        v22 = *(v21 - 1);
        v23 = *v21;
        v24 = __OFADD__(*v21, v22);
        v25 = *v21 + v22;
        if (v24)
        {
          __break(1u);
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
          goto LABEL_49;
        }
        v26 = *(v21 - 4);
        if (v25 < v26 || v26 < v23 || v25 < v23)
          goto LABEL_41;
        if (__OFSUB__(v26, v23))
          goto LABEL_42;
        v29 = *(v21 - 3);
        v30 = *(v21 - 2);
        if (v30)
        {
          if (v29 < v23 || v25 < v29)
            goto LABEL_45;
          if (__OFSUB__(v29, v26))
            goto LABEL_46;
          v31 = (const void *)(v30 + v26 - v23);
          v32 = v30 - v23 + v29;
          if (v19 < v18)
            goto LABEL_43;
        }
        else
        {
          if (v29 < v23 || v25 < v29)
            goto LABEL_48;
          v32 = 0;
          v31 = 0;
          if (v19 < v18)
            goto LABEL_43;
        }
        v33 = (void *)(a1 + v18);
        v34 = v32 - (_QWORD)v31;
        if (v11 < v34)
          v34 = v11;
        if (v31)
          v35 = v34;
        else
          v35 = 0;
        if (v20 - (uint64_t)v33 < v35)
          goto LABEL_50;
        if (v31)
        {
          v36 = v34;
          memmove(v33, v31, v34);
          v24 = __OFADD__(v18, v36);
          v18 += v36;
          if (v24)
            goto LABEL_47;
          v24 = __OFSUB__(v11, v36);
          v11 -= v36;
          if (v24)
            goto LABEL_44;
        }
        v21 += 5;
        if (!--v17)
          break;
      }
    }
    else
    {
      v18 = 0;
    }
    swift_bridgeObjectRelease();
    outlined destroy of Any?((uint64_t)v10, &demangling cache variable for type metadata for Slice<DispatchData>);
    return v18;
  }
  else
  {
LABEL_49:
    __break(1u);
LABEL_50:
    LODWORD(v40) = 0;
    v39 = 487;
    LOBYTE(v38) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v25;
  uint64_t v26;
  const void *v27;
  uint64_t v28;
  void *v29;
  int64_t v30;
  int64_t v31;
  int64_t v32;
  uint64_t result;
  char *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  _QWORD v38[2];
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Slice<DispatchData>);
  MEMORY[0x1E0C80A78](v4);
  v6 = (_QWORD *)((char *)v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1)
  {
    v38[0] = a2;
    type metadata accessor for DispatchData();
    lazy protocol witness table accessor for type DispatchData and conformance DispatchData((unint64_t *)&lazy protocol witness table cache variable for type DispatchData and conformance DispatchData, MEMORY[0x1E0DEF670]);
    dispatch thunk of RangeExpression.relative<A>(to:)();
    dispatch thunk of Collection.subscript.getter();
    lazy protocol witness table accessor for type DispatchData and conformance DispatchData(&lazy protocol witness table cache variable for type DispatchData and conformance DispatchData, MEMORY[0x1E0DEF668]);
    v7 = dispatch thunk of RandomAccessCollection.distance(from:to:)();
    v8 = *v6;
    v41 = v6[1];
    v42 = v8;
    v9 = dispatch thunk of Collection.startIndex.getter();
    v39 = MEMORY[0x1E0DEE9D8];
    MEMORY[0x1E0C80A78](v9);
    v10 = DispatchData.enumerateBytes(_:)();
    v11 = v39;
    MEMORY[0x1E0C80A78](v10);
    v34 = &v40;
    v35 = (uint64_t)v6;
    v36 = &v42;
    v37 = &v41;
    v12 = specialized Sequence.compactMap<A>(_:)((void (*)(_OWORD *__return_ptr, __int128 *))partial apply for specialized closure #1 in Slice<>.regions.getter, (uint64_t)&v38[-6], v11);
    swift_bridgeObjectRelease();
    v13 = v12[2];
    if (v13)
    {
      v14 = 0;
      v15 = v38[0] - a1;
      if (v7 >= v38[0] - a1)
        v7 = v38[0] - a1;
      v16 = v38[0];
      v17 = v12 + 8;
      while (v7 >= 1)
      {
        v18 = *(v17 - 1);
        v19 = *v17;
        v20 = __OFADD__(*v17, v18);
        v21 = *v17 + v18;
        if (v20)
        {
          __break(1u);
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
          goto LABEL_49;
        }
        v22 = *(v17 - 4);
        if (v21 < v22 || v22 < v19 || v21 < v19)
          goto LABEL_41;
        if (__OFSUB__(v22, v19))
          goto LABEL_42;
        v25 = *(v17 - 3);
        v26 = *(v17 - 2);
        if (v26)
        {
          if (v25 < v19 || v21 < v25)
            goto LABEL_45;
          if (__OFSUB__(v25, v22))
            goto LABEL_46;
          v27 = (const void *)(v26 + v22 - v19);
          v28 = v26 - v19 + v25;
          if (v15 < v14)
            goto LABEL_43;
        }
        else
        {
          if (v25 < v19 || v21 < v25)
            goto LABEL_48;
          v28 = 0;
          v27 = 0;
          if (v15 < v14)
            goto LABEL_43;
        }
        v29 = (void *)(a1 + v14);
        v30 = v28 - (_QWORD)v27;
        if (v7 < v30)
          v30 = v7;
        if (v27)
          v31 = v30;
        else
          v31 = 0;
        if (v16 - (uint64_t)v29 < v31)
          goto LABEL_50;
        if (v27)
        {
          v32 = v30;
          memmove(v29, v27, v30);
          v20 = __OFADD__(v14, v32);
          v14 += v32;
          if (v20)
            goto LABEL_47;
          v20 = __OFSUB__(v7, v32);
          v7 -= v32;
          if (v20)
            goto LABEL_44;
        }
        v17 += 5;
        if (!--v13)
          break;
      }
    }
    else
    {
      v14 = 0;
    }
    swift_bridgeObjectRelease();
    outlined destroy of Any?((uint64_t)v6, &demangling cache variable for type metadata for Slice<DispatchData>);
    return v14;
  }
  else
  {
LABEL_49:
    __break(1u);
LABEL_50:
    LODWORD(v36) = 0;
    v35 = 487;
    LOBYTE(v34) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v27;
  uint64_t v28;
  const void *v29;
  uint64_t v30;
  void *v31;
  int64_t v32;
  int64_t v33;
  int64_t v34;
  uint64_t result;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[5];

  if (!a1)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  v7 = a7 + a6;
  if (__OFADD__(a7, a6))
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  if (v7 < a7)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  if (a3 < a7)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  if (v7 < a4)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  if (v7 < a3)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  if (a4 < a7)
  {
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    LODWORD(v39) = 0;
    v38 = 487;
    LOBYTE(v37) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v8 = a4 - a3;
  if (__OFSUB__(a4, a3))
    goto LABEL_63;
  v44[0] = a3;
  v44[1] = a4;
  v44[2] = a5;
  v44[3] = a6;
  v44[4] = a7;
  v42 = a4;
  v43 = a3;
  v41 = a7;
  MEMORY[0x1E0C80A78](a1);
  v37 = &v41;
  v38 = (uint64_t)v44;
  v39 = &v43;
  v40 = &v42;
  v14 = specialized Sequence.compactMap<A>(_:)((void (*)(_OWORD *__return_ptr, _QWORD *))partial apply for specialized closure #1 in Slice<>.regions.getter, (uint64_t)&v36, v11, v12, v13);
  v15 = v14[2];
  if (v15)
  {
    v16 = 0;
    v17 = a2 - a1;
    if (v8 >= a2 - a1)
      v8 = a2 - a1;
    v18 = a2;
    v19 = v14 + 8;
    while (v8 >= 1)
    {
      v20 = *(v19 - 1);
      v21 = *v19;
      v22 = __OFADD__(*v19, v20);
      v23 = *v19 + v20;
      if (v22)
      {
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
        goto LABEL_56;
      }
      v24 = *(v19 - 4);
      if (v23 < v24 || v24 < v21 || v23 < v21)
        goto LABEL_48;
      if (__OFSUB__(v24, v21))
        goto LABEL_49;
      v27 = *(v19 - 3);
      v28 = *(v19 - 2);
      if (v28)
      {
        if (v27 < v21 || v23 < v27)
          goto LABEL_52;
        if (__OFSUB__(v27, v24))
          goto LABEL_53;
        v29 = (const void *)(v28 + v24 - v21);
        v30 = v28 - v21 + v27;
        if (v17 < v16)
          goto LABEL_50;
      }
      else
      {
        if (v27 < v21 || v23 < v27)
          goto LABEL_55;
        v30 = 0;
        v29 = 0;
        if (v17 < v16)
          goto LABEL_50;
      }
      v31 = (void *)(a1 + v16);
      v32 = v30 - (_QWORD)v29;
      if (v8 < v32)
        v32 = v8;
      if (v29)
        v33 = v32;
      else
        v33 = 0;
      if (v18 - (uint64_t)v31 < v33)
        goto LABEL_64;
      if (v29)
      {
        v34 = v32;
        memmove(v31, v29, v32);
        v22 = __OFADD__(v16, v34);
        v16 += v34;
        if (v22)
          goto LABEL_54;
        v22 = __OFSUB__(v8, v34);
        v8 -= v34;
        if (v22)
          goto LABEL_51;
      }
      v19 += 5;
      if (!--v15)
        break;
    }
  }
  else
  {
    v16 = 0;
  }
  swift_bridgeObjectRelease();
  return v16;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v27;
  uint64_t v28;
  const void *v29;
  uint64_t v30;
  void *v31;
  int64_t v32;
  int64_t v33;
  int64_t v34;
  uint64_t result;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[5];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v47 = a4;
  v48 = a5;
  v49 = a6;
  if (!a1)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  lazy protocol witness table accessor for type DispatchData.Region and conformance DispatchData.Region();
  v11 = dispatch thunk of RangeExpression.relative<A>(to:)();
  v12 = a6 + a5;
  if (__OFADD__(a6, a5))
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  if (v12 < a6)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  if (v45 < a6)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  if (v12 < v46)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  if (v12 < v45)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  if (v46 < a6)
  {
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    LODWORD(v39) = 0;
    v38 = 487;
    LOBYTE(v37) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v13 = v46 - v45;
  if (__OFSUB__(v46, v45))
    goto LABEL_63;
  v44[0] = v45;
  v44[1] = v46;
  v44[2] = a4;
  v44[3] = a5;
  v44[4] = a6;
  v42 = v46;
  v43 = v45;
  v41 = a6;
  MEMORY[0x1E0C80A78](v11);
  v37 = &v41;
  v38 = (uint64_t)v44;
  v39 = &v43;
  v40 = &v42;
  v14 = specialized Sequence.compactMap<A>(_:)((void (*)(_OWORD *__return_ptr, _QWORD *))partial apply for specialized closure #1 in Slice<>.regions.getter, (uint64_t)&v36, a4, a5, a6);
  v15 = v14[2];
  if (v15)
  {
    v16 = 0;
    v17 = a2 - a1;
    if (v13 >= a2 - a1)
      v13 = a2 - a1;
    v18 = a2;
    v19 = v14 + 8;
    while (v13 >= 1)
    {
      v20 = *(v19 - 1);
      v21 = *v19;
      v22 = __OFADD__(*v19, v20);
      v23 = *v19 + v20;
      if (v22)
      {
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
        goto LABEL_56;
      }
      v24 = *(v19 - 4);
      if (v23 < v24 || v24 < v21 || v23 < v21)
        goto LABEL_48;
      if (__OFSUB__(v24, v21))
        goto LABEL_49;
      v27 = *(v19 - 3);
      v28 = *(v19 - 2);
      if (v28)
      {
        if (v27 < v21 || v23 < v27)
          goto LABEL_52;
        if (__OFSUB__(v27, v24))
          goto LABEL_53;
        v29 = (const void *)(v28 + v24 - v21);
        v30 = v28 - v21 + v27;
        if (v17 < v16)
          goto LABEL_50;
      }
      else
      {
        if (v27 < v21 || v23 < v27)
          goto LABEL_55;
        v30 = 0;
        v29 = 0;
        if (v17 < v16)
          goto LABEL_50;
      }
      v31 = (void *)(a1 + v16);
      v32 = v30 - (_QWORD)v29;
      if (v13 < v32)
        v32 = v13;
      if (v29)
        v33 = v32;
      else
        v33 = 0;
      if (v18 - (uint64_t)v31 < v33)
        goto LABEL_64;
      if (v29)
      {
        v34 = v32;
        memmove(v31, v29, v32);
        v22 = __OFADD__(v16, v34);
        v16 += v34;
        if (v22)
          goto LABEL_54;
        v22 = __OFSUB__(v13, v34);
        v13 -= v34;
        if (v22)
          goto LABEL_51;
      }
      v19 += 5;
      if (!--v15)
        break;
    }
  }
  else
  {
    v16 = 0;
  }
  swift_bridgeObjectRelease();
  return v16;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (!a1)
  {
    __break(1u);
    JUMPOUT(0x181AF4108);
  }
  Data._Representation.subscript.getter(a3, a4, a5, a6);
  v13 = v12;
  v15 = v14;
  v16 = specialized RandomAccessCollection<>.distance(from:to:)(a3, a4, a5, a6);
  v17 = a2 - a1;
  if (v16 < a2 - a1)
    v17 = v16;
  if (v17 >= 1)
    __asm { BR              X10 }
  outlined consume of Data._Representation(v13, v15);
  return 0;
}

{
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (!a1)
  {
    __break(1u);
    JUMPOUT(0x181AF4354);
  }
  Data._Representation.subscript.getter(a3, a4, a5, a6);
  v13 = v12;
  v15 = v14;
  v16 = specialized RandomAccessCollection<>.distance(from:to:)(a3, a4, a5, a6);
  v17 = a2 - a1;
  if (v16 < a2 - a1)
    v17 = v16;
  if (v17 >= 1)
    __asm { BR              X10 }
  outlined consume of Data._Representation(v13, v15);
  return 0;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:from:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[7];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[4];
  uint64_t v22;
  uint64_t v23;

  if (result)
  {
    v7 = result;
    v8 = a4 - a3;
    if (a4 - a3 >= a2 - result)
      v8 = a2 - result;
    v22 = v8;
    v23 = 0;
    v21[0] = a3;
    v21[1] = a4;
    v21[2] = a5;
    v21[3] = a6;
    v19 = a4;
    v20 = a3;
    v18 = 0;
    MEMORY[0x1E0C80A78](result);
    v17[2] = &v18;
    v17[3] = v21;
    v17[4] = &v20;
    v17[5] = &v19;
    result = (uint64_t)specialized Sequence.compactMap<A>(_:)((void (*)(_OWORD *__return_ptr, _QWORD *))closure #1 in Slice<>.regions.getterspecialized partial apply, (uint64_t)v17, v9, v10);
    v11 = result;
    v12 = *(_QWORD *)(result + 16);
    if (!v12)
    {
LABEL_15:
      swift_bridgeObjectRelease();
      return v23;
    }
    v13 = 0;
    v14 = (_QWORD *)(result + 48);
    while (v13 < v12)
    {
      if (v22 > 0)
      {
        ++v13;
        v15 = *v14 ? *v14 + *(v14 - 1) : 0;
        v16 = *v14 ? *v14 + *(v14 - 2) : 0;
        result = closure #1 in DataProtocol.copyBytes<A>(to:from:)(v16, v15, v7, a2, &v23, &v22);
        v12 = *(_QWORD *)(v11 + 16);
        v14 += 4;
        if (v13 != v12)
          continue;
      }
      goto LABEL_15;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[7];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[4];
  uint64_t v30;
  uint64_t v31;

  if (result)
  {
    v11 = result;
    v31 = 0;
    v12 = specialized RandomAccessCollection<>.distance(from:to:)(a3, a4, a5, a6);
    v13 = a2 - v11;
    if (v12 < a2 - v11)
      v13 = v12;
    v29[3] = a6;
    v30 = v13;
    v29[0] = a3;
    v29[1] = a4;
    v29[2] = a5;
    v27 = a4;
    v28 = a3;
    v26 = 0;
    MEMORY[0x1E0C80A78](v12);
    v25[2] = &v26;
    v25[3] = v29;
    v25[4] = &v28;
    v25[5] = &v27;
    result = (uint64_t)specialized Sequence.compactMap<A>(_:)((void (*)(_OWORD *__return_ptr, _QWORD *))closure #1 in Slice<>.regions.getterspecialized partial apply, (uint64_t)v25, a5, a6);
    v14 = result;
    v15 = *(_QWORD *)(result + 16);
    if (!v15)
    {
LABEL_22:
      swift_bridgeObjectRelease();
      return v31;
    }
    v16 = 0;
    v17 = (_QWORD *)(result + 56);
    while (v16 < v15)
    {
      if (v30 <= 0)
        goto LABEL_22;
      v20 = *(v17 - 3);
      v21 = *(v17 - 1);
      v22 = *v17 - v21;
      if (v21)
        v23 = *v17 - v21;
      else
        v23 = 0;
      if (v20 < 0 || v23 < v20)
        goto LABEL_24;
      v24 = *(v17 - 2);
      if (v21)
      {
        if (v22 < v24 || v24 < 0 || v22 < v20)
          goto LABEL_25;
        v18 = v21 + v20;
        v19 = v21 + v24;
      }
      else
      {
        if (v24 | v20)
          goto LABEL_26;
        v19 = 0;
        v18 = 0;
      }
      ++v16;
      result = closure #1 in DataProtocol.copyBytes<A>(to:from:)(v18, v19, v11, a2, &v31, &v30);
      v15 = *(_QWORD *)(v14 + 16);
      v17 += 4;
      if (v16 == v15)
        goto LABEL_22;
    }
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:from:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[7];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[4];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v26 = a4;
  v27 = a5;
  if (result)
  {
    v8 = result;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>);
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type UnsafeBufferPointer<UInt8> and conformance UnsafeBufferPointer<A>, &demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>, MEMORY[0x1E0DEA5E8]);
    v9 = dispatch thunk of RangeExpression.relative<A>(to:)();
    v10 = v25 - v24;
    if (v25 - v24 >= a2 - v8)
      v10 = a2 - v8;
    v22 = v10;
    v23 = 0;
    v21[0] = v24;
    v21[1] = v25;
    v21[2] = a4;
    v21[3] = a5;
    v19 = v25;
    v20 = v24;
    v18 = 0;
    MEMORY[0x1E0C80A78](v9);
    v17[2] = &v18;
    v17[3] = v21;
    v17[4] = &v20;
    v17[5] = &v19;
    result = (uint64_t)specialized Sequence.compactMap<A>(_:)((void (*)(_OWORD *__return_ptr, _QWORD *))partial apply for specialized closure #1 in Slice<>.regions.getter, (uint64_t)v17, a4, a5);
    v11 = result;
    v12 = *(_QWORD *)(result + 16);
    if (!v12)
    {
LABEL_15:
      swift_bridgeObjectRelease();
      return v23;
    }
    v13 = 0;
    v14 = (_QWORD *)(result + 48);
    while (v13 < v12)
    {
      if (v22 >= 1)
      {
        ++v13;
        v15 = *v14 ? *v14 + *(v14 - 1) : 0;
        v16 = *v14 ? *v14 + *(v14 - 2) : 0;
        result = closure #1 in DataProtocol.copyBytes<A>(to:from:)(v16, v15, v8, a2, &v23, &v22);
        v12 = *(_QWORD *)(v11 + 16);
        v14 += 4;
        if (v13 != v12)
          continue;
      }
      goto LABEL_15;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[7];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[4];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v31 = a4;
  v32 = a5;
  if (result)
  {
    v8 = result;
    lazy protocol witness table accessor for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer();
    dispatch thunk of RangeExpression.relative<A>(to:)();
    v28 = 0;
    v9 = specialized RandomAccessCollection<>.distance(from:to:)(v29, v30, a4, a5);
    v10 = a2 - v8;
    if (v9 < a2 - v8)
      v10 = v9;
    v26[3] = a5;
    v27 = v10;
    v26[0] = v29;
    v26[1] = v30;
    v26[2] = a4;
    v24 = v30;
    v25 = v29;
    v23 = 0;
    MEMORY[0x1E0C80A78](v9);
    v22[2] = &v23;
    v22[3] = v26;
    v22[4] = &v25;
    v22[5] = &v24;
    result = (uint64_t)specialized Sequence.compactMap<A>(_:)((void (*)(_OWORD *__return_ptr, _QWORD *))partial apply for specialized closure #1 in Slice<>.regions.getter, (uint64_t)v22, a4, a5);
    v11 = result;
    v12 = *(_QWORD *)(result + 16);
    if (!v12)
    {
LABEL_22:
      swift_bridgeObjectRelease();
      return v28;
    }
    v13 = 0;
    v14 = (_QWORD *)(result + 56);
    while (v13 < v12)
    {
      if (v27 < 1)
        goto LABEL_22;
      v17 = *(v14 - 3);
      v18 = *(v14 - 1);
      v19 = *v14 - v18;
      if (v18)
        v20 = *v14 - v18;
      else
        v20 = 0;
      if (v17 < 0 || v20 < v17)
        goto LABEL_24;
      v21 = *(v14 - 2);
      if (v18)
      {
        if (v19 < v21 || v21 < 0 || v19 < v17)
          goto LABEL_25;
        v15 = v18 + v17;
        v16 = v18 + v21;
      }
      else
      {
        if (v21 | v17)
          goto LABEL_26;
        v16 = 0;
        v15 = 0;
      }
      ++v13;
      result = closure #1 in DataProtocol.copyBytes<A>(to:from:)(v15, v16, v8, a2, &v28, &v27);
      v12 = *(_QWORD *)(v11 + 16);
      v14 += 4;
      if (v13 == v12)
        goto LABEL_22;
    }
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:from:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = a4;
  if (!result)
  {
    __break(1u);
    goto LABEL_13;
  }
  v6 = result;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [UInt8]);
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [UInt8] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [UInt8], MEMORY[0x1E0DEAF50]);
  result = dispatch thunk of RangeExpression.relative<A>(to:)();
  if ((v11 & 0x8000000000000000) != 0)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v7 = *(_QWORD *)(a4 + 16);
  if (v7 < v11 || (uint64_t)v7 < v12)
    goto LABEL_14;
  if (v12 < 0)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  v8 = a2 - v6;
  if ((uint64_t)(v12 - v11) < a2 - v6)
    v8 = v12 - v11;
  v9 = v8;
  v10 = 0;
  if (v8 < 1)
    return 0;
  swift_bridgeObjectRetain_n();
  closure #1 in DataProtocol.copyBytes<A>(to:from:)(a4 + v11 + 32, a4 + 32 + v12, v6, a2, &v10, &v9);
  swift_bridgeObjectRelease_n();
  return v10;
}

{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = a4;
  if (!result)
  {
    __break(1u);
    goto LABEL_13;
  }
  v6 = result;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousArray<UInt8>);
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type ContiguousArray<UInt8> and conformance ContiguousArray<A>, &demangling cache variable for type metadata for ContiguousArray<UInt8>, MEMORY[0x1E0DEC740]);
  result = dispatch thunk of RangeExpression.relative<A>(to:)();
  if ((v11 & 0x8000000000000000) != 0)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v7 = *(_QWORD *)(a4 + 16);
  if (v7 < v11 || (uint64_t)v7 < v12)
    goto LABEL_14;
  if (v12 < 0)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  v8 = a2 - v6;
  if ((uint64_t)(v12 - v11) < a2 - v6)
    v8 = v12 - v11;
  v9 = v8;
  v10 = 0;
  if (v8 < 1)
    return 0;
  swift_retain_n();
  closure #1 in DataProtocol.copyBytes<A>(to:from:)(a4 + v11 + 32, a4 + 32 + v12, v6, a2, &v10, &v9);
  swift_release_n();
  return v10;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:from:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!result)
  {
    __break(1u);
    goto LABEL_15;
  }
  if ((uint64_t)(a8 >> 1) < a3)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (a3 < a7)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if ((uint64_t)(a8 >> 1) < a4)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (a4 < a7)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (a4 < 0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v14 = 0;
  if (__OFSUB__(a4, a3))
  {
LABEL_20:
    __break(1u);
    return result;
  }
  v9 = result;
  v10 = a2 - result;
  if (a4 - a3 < a2 - result)
    v10 = a4 - a3;
  v13 = v10;
  if (v10 < 1)
    return 0;
  v11 = a6 + a3;
  v12 = a6 + a4;
  swift_unknownObjectRetain_n();
  closure #1 in DataProtocol.copyBytes<A>(to:from:)(v11, v12, v9, a2, &v14, &v13);
  swift_unknownObjectRelease_n();
  return v14;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:from:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v17 = a4;
  v18 = a5;
  v19 = a6;
  v20 = a7;
  if (!result)
  {
    __break(1u);
    goto LABEL_15;
  }
  v10 = result;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<UInt8>);
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type ArraySlice<UInt8> and conformance ArraySlice<A>, &demangling cache variable for type metadata for ArraySlice<UInt8>, MEMORY[0x1E0DEBF88]);
  result = dispatch thunk of RangeExpression.relative<A>(to:)();
  if (v15 < a6)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if ((uint64_t)(a7 >> 1) < v15 || (uint64_t)(a7 >> 1) < v16)
    goto LABEL_16;
  if (v16 < a6)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v16 < 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v14 = 0;
  if (__OFSUB__(v16, v15))
  {
LABEL_19:
    __break(1u);
    return result;
  }
  v11 = a2 - v10;
  if (v16 - v15 < a2 - v10)
    v11 = v16 - v15;
  v13 = v11;
  if (v11 < 1)
    return 0;
  swift_unknownObjectRetain_n();
  closure #1 in DataProtocol.copyBytes<A>(to:from:)(a5 + v15, a5 + v16, v10, a2, &v14, &v13);
  swift_unknownObjectRelease_n();
  return v14;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:from:)(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t), void (*a7)(uint64_t, uint64_t))
{
  unint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (!result)
  {
    __break(1u);
    goto LABEL_15;
  }
  if ((a3 & 0x8000000000000000) != 0)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v8 = *(_QWORD *)(a5 + 16);
  if (v8 < a3 || (uint64_t)v8 < a4)
    goto LABEL_16;
  if (a4 < 0)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  v11 = result;
  v12 = a2 - result;
  if ((uint64_t)(a4 - a3) < a2 - result)
    v12 = a4 - a3;
  v16 = v12;
  v17 = 0;
  if (v12 < 1)
    return 0;
  v14 = a5 + a3 + 32;
  v15 = a5 + 32 + a4;
  a6(a5, 2);
  closure #1 in DataProtocol.copyBytes<A>(to:from:)(v14, v15, v11, a2, &v17, &v16);
  a7(a5, 2);
  return v17;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:from:)(uint64_t result)
{
  if (result)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EmptyCollection<UInt8>);
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type EmptyCollection<UInt8> and conformance EmptyCollection<A>, &demangling cache variable for type metadata for EmptyCollection<UInt8>, MEMORY[0x1E0DEC788]);
    dispatch thunk of RangeExpression.relative<A>(to:)();
    return 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:from:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;

  if (!a1)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (a5 < 0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if ((a3 & 0x8000000000000000) != 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (a5 < a4)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (a4 < 0 || a5 < a3)
  {
LABEL_17:
    __break(1u);
    JUMPOUT(0x181AF5394);
  }
  v6 = a4 - a3;
  if ((uint64_t)(a4 - a3) >= a2 - a1)
    v6 = a2 - a1;
  v9 = v6;
  v7 = specialized Slice<>.regions.getter(a3, a4, a5, a6);
  if (v7[2] && v9 > 0)
    __asm { BR              X9 }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  if (!a1)
  {
    __break(1u);
    goto LABEL_14;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Repeated<UInt8>);
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type Repeated<UInt8> and conformance Repeated<A>, &demangling cache variable for type metadata for Repeated<UInt8>, MEMORY[0x1E0DEE880]);
  dispatch thunk of RangeExpression.relative<A>(to:)();
  if (a4 < 0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if ((v13 & 0x8000000000000000) != 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v14 > a4)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v13 > a4 || v14 < 0)
  {
LABEL_17:
    __break(1u);
    JUMPOUT(0x181AF57A8);
  }
  v8 = v14 - v13;
  if ((uint64_t)(v14 - v13) >= a2 - a1)
    v8 = a2 - a1;
  v12 = v8;
  v9 = specialized Slice<>.regions.getter(v13, v14, a4, a5);
  if (v9[2] && v12 >= 1)
    __asm { BR              X9 }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t DataProtocol.copyBytes<A, B>(to:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return DataProtocol.copyBytes<A, B>(to:from:)(a1, a2, a3, a7, a4, a5, a8, a6);
}

uint64_t specialized DataProtocol.copyBytes<A, B>(to:from:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  if (!result)
  {
    v5 = 0;
    return specialized DataProtocol.copyBytes<A>(to:from:)(result, v5);
  }
  v4 = *(_QWORD *)(*(_QWORD *)(a4 - 8) + 72);
  if ((unsigned __int128)(a2 * (__int128)v4) >> 64 == (a2 * v4) >> 63)
  {
    v5 = result + a2 * v4;
    return specialized DataProtocol.copyBytes<A>(to:from:)(result, v5);
  }
  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.copyBytes<A, B>(to:from:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;

  if (!result)
  {
    v8 = 0;
    return specialized DataProtocol.copyBytes<A>(to:from:)(result, v8, a3, a4, a5, a6);
  }
  v7 = *(_QWORD *)(*(_QWORD *)(a7 - 8) + 72);
  if ((unsigned __int128)(a2 * (__int128)v7) >> 64 == (a2 * v7) >> 63)
  {
    v8 = result + a2 * v7;
    return specialized DataProtocol.copyBytes<A>(to:from:)(result, v8, a3, a4, a5, a6);
  }
  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.copyBytes<A, B>(to:from:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  uint64_t v10;

  if (!result)
  {
    v10 = 0;
    return a9(result, v10, a3, a4, a5, a7, a8);
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a6 - 8) + 72);
  if ((unsigned __int128)(a2 * (__int128)v9) >> 64 == (a2 * v9) >> 63)
  {
    v10 = result + a2 * v9;
    return a9(result, v10, a3, a4, a5, a7, a8);
  }
  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.copyBytes<A, B>(to:from:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;

  if (!result)
  {
    v9 = 0;
    return specialized DataProtocol.copyBytes<A>(to:from:)(result, v9, a3, a4, a5, a6, a7);
  }
  v8 = *(_QWORD *)(*(_QWORD *)(a8 - 8) + 72);
  if ((unsigned __int128)(a2 * (__int128)v8) >> 64 == (a2 * v8) >> 63)
  {
    v9 = result + a2 * v8;
    return specialized DataProtocol.copyBytes<A>(to:from:)(result, v9, a3, a4, a5, a6, a7);
  }
  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.copyBytes<A, B>(to:from:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;

  if (!result)
  {
    v9 = 0;
    return a8(result, v9, a3, a4, a6, a7);
  }
  v8 = *(_QWORD *)(*(_QWORD *)(a5 - 8) + 72);
  if ((unsigned __int128)(a2 * (__int128)v8) >> 64 == (a2 * v8) >> 63)
  {
    v9 = result + a2 * v8;
    return a8(result, v9, a3, a4, a6, a7);
  }
  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.copyBytes<A, B>(to:from:)(uint64_t result)
{
  if (result)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EmptyCollection<UInt8>);
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type EmptyCollection<UInt8> and conformance EmptyCollection<A>, &demangling cache variable for type metadata for EmptyCollection<UInt8>, MEMORY[0x1E0DEC788]);
    dispatch thunk of RangeExpression.relative<A>(to:)();
    return 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized DataProtocol.copyBytes<A, B>(to:from:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;

  if (!result)
  {
    v7 = 0;
    return specialized DataProtocol.copyBytes<A>(to:from:)(result, v7, a3, a4, a5);
  }
  v6 = *(_QWORD *)(*(_QWORD *)(a6 - 8) + 72);
  if ((unsigned __int128)(a2 * (__int128)v6) >> 64 == (a2 * v6) >> 63)
  {
    v7 = result + a2 * v6;
    return specialized DataProtocol.copyBytes<A>(to:from:)(result, v7, a3, a4, a5);
  }
  __break(1u);
  return result;
}

uint64_t DataProtocol.copyBytes<A, B>(to:from:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;

  if (!result)
  {
    v9 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 104))(result, v9, a3, a6, a8, a4);
  }
  v8 = *(_QWORD *)(*(_QWORD *)(a5 - 8) + 72);
  if ((unsigned __int128)(a2 * (__int128)v8) >> 64 == (a2 * v8) >> 63)
  {
    v9 = result + a2 * v8;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 104))(result, v9, a3, a6, a8, a4);
  }
  __break(1u);
  return result;
}

uint64_t MutableDataProtocol.resetBytes<A>(in:)()
{
  return MutableDataProtocol.resetBytes<A>(in:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t result;
  uint64_t v5;
  char v6;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v0 = type metadata accessor for Range();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v5 - v2;
  dispatch thunk of RangeExpression.relative<A>(to:)();
  result = dispatch thunk of RandomAccessCollection.distance(from:to:)();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v5 = result;
    v6 = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Repeated<UInt8>);
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type Repeated<UInt8> and conformance Repeated<A>, &demangling cache variable for type metadata for Repeated<UInt8>, MEMORY[0x1E0DEE880]);
    dispatch thunk of RangeReplaceableCollection.replaceSubrange<A>(_:with:)();
    return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
  return result;
}

uint64_t specialized MutableDataProtocol.resetBytes<A>(in:)()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  lazy protocol witness table accessor for type Data and conformance Data();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  result = specialized RandomAccessCollection<>.distance(from:to:)(v2, v3, *(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  if ((result & 0x8000000000000000) == 0)
    return specialized Data.replaceSubrange<A>(_:with:)(v2, v3, result, 0);
  __break(1u);
  return result;
}

uint64_t specialized MutableDataProtocol.resetBytes<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5, uint64_t a6, uint64_t (*a7)(void))
{
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  __swift_instantiateConcreteTypeFromMangledName(a4);
  lazy protocol witness table accessor for type [String] and conformance [A](a5, a4, a6);
  dispatch thunk of RangeExpression.relative<A>(to:)();
  result = v12;
  if (__OFSUB__(v13, v12))
  {
    __break(1u);
  }
  else if (((v13 - v12) & 0x8000000000000000) == 0)
  {
    return a7();
  }
  __break(1u);
  return result;
}

uint64_t DataProtocol.firstRange<A>(of:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  char *v32;
  void (*v33)(char *, char *, uint64_t);
  void (*v34)(char *, uint64_t);
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void (*v40)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t TupleTypeMetadata2;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v51 = a3;
  v52 = a5;
  v49 = a6;
  v50 = a1;
  v55 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v44 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v42 - v11;
  v45 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v42 - v17;
  swift_getAssociatedConformanceWitness();
  v19 = type metadata accessor for Range();
  v48 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v46 = (char *)&v42 - v23;
  dispatch thunk of Collection.startIndex.getter();
  v53 = a2;
  v54 = v6;
  dispatch thunk of Collection.endIndex.getter();
  result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    v25 = TupleTypeMetadata2;
    v26 = &v12[*(int *)(TupleTypeMetadata2 + 48)];
    v43 = v19;
    v27 = v21;
    v28 = v12;
    v29 = v45;
    v30 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
    v30(v28, v18, AssociatedTypeWitness);
    v30(v26, v15, AssociatedTypeWitness);
    v31 = v44;
    v32 = &v44[*(int *)(v25 + 48)];
    v33 = *(void (**)(char *, char *, uint64_t))(v29 + 16);
    v33(v44, v28, AssociatedTypeWitness);
    v33(v32, v26, AssociatedTypeWitness);
    v30(v27, v31, AssociatedTypeWitness);
    v34 = *(void (**)(char *, uint64_t))(v29 + 8);
    v34(v32, AssociatedTypeWitness);
    v35 = &v31[*(int *)(v25 + 48)];
    v30(v31, v28, AssociatedTypeWitness);
    v30(v35, v26, AssociatedTypeWitness);
    v36 = v43;
    v30(&v27[*(int *)(v43 + 36)], v35, AssociatedTypeWitness);
    v34(v31, AssociatedTypeWitness);
    v37 = v48;
    v38 = v46;
    (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v46, v27, v36);
    v39 = v55;
    v40 = *(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v55 + 72);
    v41 = MEMORY[0x186DA9D64](MEMORY[0x1E0DEB8A8], v36);
    v40(v50, v38, v51, v36, v52, v41, v53, v39);
    return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v38, v36);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t DataProtocol.lastRange<A>(of:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  char *v32;
  void (*v33)(char *, char *, uint64_t);
  void (*v34)(char *, uint64_t);
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void (*v40)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t TupleTypeMetadata2;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v51 = a3;
  v52 = a5;
  v49 = a6;
  v50 = a1;
  v55 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v44 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v42 - v11;
  v45 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v42 - v17;
  swift_getAssociatedConformanceWitness();
  v19 = type metadata accessor for Range();
  v48 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v46 = (char *)&v42 - v23;
  dispatch thunk of Collection.startIndex.getter();
  v53 = a2;
  v54 = v6;
  dispatch thunk of Collection.endIndex.getter();
  result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    v25 = TupleTypeMetadata2;
    v26 = &v12[*(int *)(TupleTypeMetadata2 + 48)];
    v43 = v19;
    v27 = v21;
    v28 = v12;
    v29 = v45;
    v30 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
    v30(v28, v18, AssociatedTypeWitness);
    v30(v26, v15, AssociatedTypeWitness);
    v31 = v44;
    v32 = &v44[*(int *)(v25 + 48)];
    v33 = *(void (**)(char *, char *, uint64_t))(v29 + 16);
    v33(v44, v28, AssociatedTypeWitness);
    v33(v32, v26, AssociatedTypeWitness);
    v30(v27, v31, AssociatedTypeWitness);
    v34 = *(void (**)(char *, uint64_t))(v29 + 8);
    v34(v32, AssociatedTypeWitness);
    v35 = &v31[*(int *)(v25 + 48)];
    v30(v31, v28, AssociatedTypeWitness);
    v30(v35, v26, AssociatedTypeWitness);
    v36 = v43;
    v30(&v27[*(int *)(v43 + 36)], v35, AssociatedTypeWitness);
    v34(v31, AssociatedTypeWitness);
    v37 = v48;
    v38 = v46;
    (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v46, v27, v36);
    v39 = v55;
    v40 = *(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v55 + 80);
    v41 = MEMORY[0x186DA9D64](MEMORY[0x1E0DEB8A8], v36);
    v40(v50, v38, v51, v36, v52, v41, v53, v39);
    return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v38, v36);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t DataProtocol.copyBytes(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  char *v27;
  void (*v28)(char *, char *, uint64_t);
  char *v29;
  void (*v30)(char *, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t TupleTypeMetadata2;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v46 = a1;
  v47 = a2;
  v50 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v39 - v10;
  v42 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v39 - v16;
  swift_getAssociatedConformanceWitness();
  v18 = type metadata accessor for Range();
  v44 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v41 = (char *)&v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v43 = (char *)&v39 - v21;
  dispatch thunk of Collection.startIndex.getter();
  v48 = a3;
  v49 = v4;
  dispatch thunk of Collection.endIndex.getter();
  result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    v23 = TupleTypeMetadata2;
    v24 = &v11[*(int *)(TupleTypeMetadata2 + 48)];
    v40 = v18;
    v25 = v42;
    v26 = *(void (**)(char *, char *, uint64_t))(v42 + 32);
    v26(v11, v17, AssociatedTypeWitness);
    v26(v24, v14, AssociatedTypeWitness);
    v27 = &v8[*(int *)(v23 + 48)];
    v28 = *(void (**)(char *, char *, uint64_t))(v25 + 16);
    v28(v8, v11, AssociatedTypeWitness);
    v28(v27, v24, AssociatedTypeWitness);
    v29 = v41;
    v26(v41, v8, AssociatedTypeWitness);
    v30 = *(void (**)(char *, uint64_t))(v25 + 8);
    v30(v27, AssociatedTypeWitness);
    v31 = &v8[*(int *)(v23 + 48)];
    v26(v8, v11, AssociatedTypeWitness);
    v26(v31, v24, AssociatedTypeWitness);
    v32 = v40;
    v26(&v29[*(int *)(v40 + 36)], v31, AssociatedTypeWitness);
    v30(v8, AssociatedTypeWitness);
    v34 = v43;
    v33 = v44;
    (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v43, v29, v32);
    v35 = v50;
    v36 = *(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v50 + 104);
    v37 = MEMORY[0x186DA9D64](MEMORY[0x1E0DEB8A8], v32);
    v38 = v36(v46, v47, v34, v32, v37, v48, v35);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v32);
    return v38;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t DataProtocol.copyBytes<A>(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  char *v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  void (*v32)(char *, uint64_t);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t TupleTypeMetadata2;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v48 = a2;
  v49 = a4;
  v47 = a1;
  v52 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v41 - v11;
  v43 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v41 - v17;
  swift_getAssociatedConformanceWitness();
  v19 = type metadata accessor for Range();
  v46 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v42 = (char *)&v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v44 = (char *)&v41 - v22;
  dispatch thunk of Collection.startIndex.getter();
  v50 = a3;
  v51 = v5;
  dispatch thunk of Collection.endIndex.getter();
  result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    v24 = TupleTypeMetadata2;
    v25 = &v12[*(int *)(TupleTypeMetadata2 + 48)];
    v41 = v19;
    v26 = v9;
    v27 = v43;
    v28 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
    v28(v12, v18, AssociatedTypeWitness);
    v28(v25, v15, AssociatedTypeWitness);
    v29 = &v26[*(int *)(v24 + 48)];
    v30 = *(void (**)(char *, char *, uint64_t))(v27 + 16);
    v30(v26, v12, AssociatedTypeWitness);
    v30(v29, v25, AssociatedTypeWitness);
    v31 = v42;
    v28(v42, v26, AssociatedTypeWitness);
    v32 = *(void (**)(char *, uint64_t))(v27 + 8);
    v32(v29, AssociatedTypeWitness);
    v33 = &v26[*(int *)(v24 + 48)];
    v28(v26, v12, AssociatedTypeWitness);
    v28(v33, v25, AssociatedTypeWitness);
    v34 = v41;
    v28(&v31[*(int *)(v41 + 36)], v33, AssociatedTypeWitness);
    v32(v26, AssociatedTypeWitness);
    v35 = v46;
    v36 = v44;
    (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v44, v31, v34);
    v37 = v52;
    v38 = *(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 112);
    v39 = MEMORY[0x186DA9D64](MEMORY[0x1E0DEB8A8], v34);
    v40 = v38(v47, v48, v36, v49, v34, v39, v50, v37);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v34);
    return v40;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized DataProtocol.matches<A>(_:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  void (*v17)(_QWORD *, _QWORD);
  unsigned __int8 *v18;
  int v19;
  void (*v20)(_QWORD *, _QWORD);
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  void (*v27)(char *, uint64_t);
  char v28;
  uint64_t v29;
  _QWORD v31[2];
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[4];
  uint64_t v41;

  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 8) + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v34 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v35 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v32 = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v33 = (char *)v31 - v11;
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)v31 - v13;
  v41 = a2;
  v36 = a1;
  v37 = v7;
  v38 = a3;
  dispatch thunk of Collection.startIndex.getter();
  v15 = type metadata accessor for DispatchData();
  v31[0] = lazy protocol witness table accessor for type DispatchData and conformance DispatchData((unint64_t *)&lazy protocol witness table cache variable for type DispatchData and conformance DispatchData, MEMORY[0x1E0DEF670]);
  v31[1] = v15;
  v16 = v33;
  while (1)
  {
    v17 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read();
    v19 = *v18;
    v17(v40, 0);
    v20 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read();
    v22 = *v21;
    v20(v40, 0);
    if (v19 != v22)
      break;
    v39 = v41;
    dispatch thunk of Collection.index(after:)();
    v41 = v40[0];
    v24 = v34;
    v23 = v35;
    v25 = *(void (**)(char *, char *, uint64_t))(v34 + 16);
    v26 = v32;
    v25(v32, v14, v35);
    dispatch thunk of Collection.index(after:)();
    v27 = *(void (**)(char *, uint64_t))(v24 + 8);
    v27(v26, v23);
    v27(v14, v23);
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v14, v16, v23);
    v25(v16, v14, v23);
    dispatch thunk of Collection.endIndex.getter();
    swift_getAssociatedConformanceWitness();
    v28 = dispatch thunk of static Equatable.== infix(_:_:)();
    v27(v26, v23);
    v27(v16, v23);
    if ((v28 & 1) == 0)
    {
      v29 = v41;
      dispatch thunk of Collection.endIndex.getter();
      if (v29 != v40[0])
        continue;
    }
    goto LABEL_7;
  }
  v28 = 0;
  v27 = *(void (**)(char *, uint64_t))(v34 + 8);
LABEL_7:
  v27(v14, v35);
  return v28 & 1;
}

uint64_t specialized DataProtocol.matches<A>(_:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  int v25;
  uint64_t (*v26)(char *, _QWORD);
  unsigned __int8 *v27;
  int v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  char v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t AssociatedTypeWitness;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char v49[40];

  v42 = a3;
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a7 + 8) + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v41 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v39 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v38 = (char *)&v34 - v15;
  MEMORY[0x1E0C80A78](v16);
  v47 = a6;
  v48 = (char *)&v34 - v17;
  v45 = v12;
  v46 = a1;
  result = dispatch thunk of Collection.startIndex.getter();
  v19 = a5 + a4;
  if (!__OFADD__(a5, a4))
  {
    if (a2 <= v19)
      v20 = a5 + a4;
    else
      v20 = a2;
    v40 = v20;
    v34 = a5 + a4 - 1;
    v35 = a5 + a4;
    v21 = a2;
    v36 = a5;
    v37 = a2;
    v22 = v41;
    v23 = v48;
    v24 = v38;
    while (a2 >= a5 && v19 >= v21)
    {
      if (__OFSUB__(v21, a5))
        goto LABEL_18;
      v25 = *(unsigned __int8 *)(v42 + v21 - a5);
      v26 = (uint64_t (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
      v28 = *v27;
      result = v26(v49, 0);
      if (v25 != v28)
      {
        v32 = 0;
        v31 = *(void (**)(char *, uint64_t))(v41 + 8);
LABEL_16:
        v31(v48, AssociatedTypeWitness);
        return v32 & 1;
      }
      if (v40 == v21)
        goto LABEL_19;
      v44 = *(void (**)(char *, char *, uint64_t))(v22 + 16);
      v29 = v39;
      v30 = AssociatedTypeWitness;
      v44(v39, v23, AssociatedTypeWitness);
      dispatch thunk of Collection.index(after:)();
      v31 = *(void (**)(char *, uint64_t))(v22 + 8);
      v31(v29, v30);
      v31(v23, v30);
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v23, v24, v30);
      v44(v24, v23, v30);
      dispatch thunk of Collection.endIndex.getter();
      swift_getAssociatedConformanceWitness();
      v32 = dispatch thunk of static Equatable.== infix(_:_:)();
      v31(v29, v30);
      result = ((uint64_t (*)(char *, uint64_t))v31)(v24, v30);
      if ((v32 & 1) == 0)
      {
        v19 = v35;
        v33 = v34 == v21++;
        a5 = v36;
        a2 = v37;
        if (!v33)
          continue;
      }
      goto LABEL_16;
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.matches<A>(_:from:)(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  void (*v23)(_BYTE *, _QWORD);
  unsigned __int8 *v24;
  int v25;
  uint64_t v26;
  char *v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  char v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE v52[8];
  int v53;
  __int16 v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v48 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v49 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v47 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v46 = (char *)&v34 - v10;
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v34 - v12;
  dispatch thunk of Collection.startIndex.getter();
  v14 = a4 >> 62;
  if (a4 >> 62 == 3)
    goto LABEL_36;
  v40 = (int)a3;
  v41 = a4 & 0x3FFFFFFFFFFFFFFFLL;
  v44 = (uint64_t)a3 >> 32;
  v50 = BYTE6(a4);
  v38 = a3 >> 8;
  v39 = a4;
  v36 = a3 >> 24;
  v37 = a3 >> 16;
  v35 = HIDWORD(a3);
  v34 = a3 >> 40;
  v15 = a2;
  v42 = a4 >> 62;
  v43 = a3;
  v45 = v13;
  v16 = v46;
  while (1)
  {
    v51 = v15;
    if ((_DWORD)v14)
    {
      if ((_DWORD)v14 == 1)
      {
        if (v15 < v40 || v15 >= v44)
        {
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
LABEL_31:
          __break(1u);
LABEL_32:
          __break(1u);
LABEL_33:
          __break(1u);
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
        }
        v17 = *(_QWORD *)(v41 + 16);
        if (!v17)
          goto LABEL_34;
        v18 = *(_QWORD *)(v41 + 40);
        v19 = __OFSUB__(v15, v18);
        v20 = v15 - v18;
        if (v19)
          goto LABEL_31;
      }
      else
      {
        if (v15 < *(_QWORD *)(a3 + 16))
          goto LABEL_30;
        if (v15 >= *(_QWORD *)(a3 + 24))
          goto LABEL_32;
        v17 = *(_QWORD *)(v41 + 16);
        if (!v17)
          goto LABEL_35;
        v22 = *(_QWORD *)(v41 + 40);
        v19 = __OFSUB__(v15, v22);
        v20 = v15 - v22;
        if (v19)
          goto LABEL_33;
      }
      v21 = *(unsigned __int8 *)(v17 + v20);
    }
    else
    {
      if (v15 >= v50)
        goto LABEL_29;
      v52[0] = v40;
      v52[1] = v38;
      v52[2] = v37;
      v52[3] = v36;
      v52[4] = v35;
      v52[5] = v34;
      v52[6] = BYTE6(a3);
      v52[7] = HIBYTE(a3);
      v53 = v39;
      v54 = WORD2(v39);
      v21 = v52[v15];
    }
    v23 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read();
    v25 = *v24;
    v23(v52, 0);
    if (v21 != v25)
    {
      v31 = 0;
      (*(void (**)(char *, uint64_t))(v48 + 8))(v13, v49);
      return v31 & 1;
    }
    v27 = v47;
    v26 = v48;
    v28 = *(void (**)(char *, char *, uint64_t))(v48 + 16);
    v29 = v49;
    v28(v47, v13, v49);
    dispatch thunk of Collection.index(after:)();
    v30 = *(void (**)(char *, uint64_t))(v26 + 8);
    v30(v27, v29);
    v30(v13, v29);
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v13, v16, v29);
    v28(v16, v13, v29);
    dispatch thunk of Collection.endIndex.getter();
    swift_getAssociatedConformanceWitness();
    v31 = dispatch thunk of static Equatable.== infix(_:_:)();
    v30(v27, v29);
    v30(v16, v29);
    if ((v31 & 1) != 0)
      break;
    v32 = v50;
    LODWORD(v14) = v42;
    a3 = v43;
    if ((_DWORD)v42)
    {
      v32 = v44;
      if ((_DWORD)v42 != 1)
        v32 = *(_QWORD *)(v43 + 24);
    }
    v15 = v51 + 1;
    v13 = v45;
    if (v51 + 1 == v32)
      goto LABEL_26;
  }
  v13 = v45;
LABEL_26:
  v30(v13, v49);
  return v31 & 1;
}

uint64_t specialized DataProtocol.matches<A>(_:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  char *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v24;
  void (*v25)(_BYTE *, _QWORD);
  unsigned __int8 *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  void (*v34)(char *, uint64_t);
  void (*v35)(char *, char *, uint64_t);
  char v36;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  _BYTE v44[32];

  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a6 + 8) + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v40 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v39 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v38 = (char *)&v38 - v15;
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v38 - v17;
  v41 = v11;
  dispatch thunk of Collection.startIndex.getter();
  v19 = ~a2 + a4;
  v20 = (unsigned __int8 *)(a3 + a2);
  v21 = v38;
  while (1)
  {
    v22 = v19;
    v24 = *v20;
    v23 = v20 + 1;
    v25 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read();
    v27 = *v26;
    v25(v44, 0);
    if (v24 != v27)
      break;
    v42 = v22;
    v43 = v23;
    v28 = a1;
    v29 = a5;
    v30 = v18;
    v31 = v39;
    v32 = v40;
    v33 = *(void (**)(char *, char *, uint64_t))(v40 + 16);
    v33(v39, v30, AssociatedTypeWitness);
    dispatch thunk of Collection.index(after:)();
    v34 = *(void (**)(char *, uint64_t))(v32 + 8);
    v34(v31, AssociatedTypeWitness);
    v34(v30, AssociatedTypeWitness);
    v35 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
    v18 = v30;
    v35(v30, v21, AssociatedTypeWitness);
    v33(v21, v30, AssociatedTypeWitness);
    a5 = v29;
    a1 = v28;
    dispatch thunk of Collection.endIndex.getter();
    swift_getAssociatedConformanceWitness();
    v36 = dispatch thunk of static Equatable.== infix(_:_:)();
    v34(v31, AssociatedTypeWitness);
    v34(v21, AssociatedTypeWitness);
    if ((v36 & 1) == 0)
    {
      v20 = v43;
      v19 = v42 - 1;
      if (v42)
        continue;
    }
    goto LABEL_7;
  }
  v36 = 0;
  v34 = *(void (**)(char *, uint64_t))(v40 + 8);
LABEL_7:
  v34(v18, AssociatedTypeWitness);
  return v36 & 1;
}

{
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int v22;
  uint64_t (*v23)(char *, _QWORD);
  unsigned __int8 *v24;
  int v25;
  uint64_t result;
  void (*v27)(char *, char *, uint64_t);
  char *v28;
  void (*v29)(char *, uint64_t);
  char v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char v43[32];

  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a6 + 8) + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v37 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v34 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v33 = (char *)&v31 - v15;
  MEMORY[0x1E0C80A78](v16);
  v41 = a5;
  v42 = (char *)&v31 - v17;
  v39 = v11;
  v40 = a1;
  dispatch thunk of Collection.startIndex.getter();
  if (a3)
    v18 = a4 - a3;
  else
    v18 = 0;
  v35 = v18;
  v36 = a2;
  v31 = a4 - a3 - 1;
  v32 = a3;
  v19 = v37;
  v20 = v34;
  v21 = v42;
  while (1)
  {
    v22 = *(unsigned __int8 *)(a3 + a2);
    v23 = (uint64_t (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
    v25 = *v24;
    result = v23(v43, 0);
    if (v22 != v25)
    {
      v30 = 0;
      v29 = *(void (**)(char *, uint64_t))(v37 + 8);
LABEL_13:
      v29(v42, AssociatedTypeWitness);
      return v30 & 1;
    }
    if (v36 < 0 || a2 >= v35)
      break;
    v38 = a2;
    v27 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
    v27(v20, v21, AssociatedTypeWitness);
    v28 = v33;
    dispatch thunk of Collection.index(after:)();
    v29 = *(void (**)(char *, uint64_t))(v19 + 8);
    v29(v20, AssociatedTypeWitness);
    v29(v21, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v21, v28, AssociatedTypeWitness);
    v27(v28, v21, AssociatedTypeWitness);
    dispatch thunk of Collection.endIndex.getter();
    swift_getAssociatedConformanceWitness();
    v30 = dispatch thunk of static Equatable.== infix(_:_:)();
    v29(v20, AssociatedTypeWitness);
    v29(v28, AssociatedTypeWitness);
    if ((v30 & 1) == 0)
    {
      a2 = v38 + 1;
      a3 = v32;
      if (!v32 || v31 != v38)
        continue;
    }
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.matches<A>(_:from:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  unint64_t v22;
  unsigned __int8 *v23;
  unint64_t v24;
  int v25;
  void (*v26)(_BYTE *, _QWORD);
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  void (*v34)(char *, char *, uint64_t);
  char *v35;
  void (*v36)(char *, uint64_t);
  void (*v37)(char *, char *, uint64_t);
  char v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unsigned __int8 *v45;
  unint64_t v46;
  _BYTE v47[32];

  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 8) + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v42 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v41 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v40 = (char *)&v39 - v13;
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v39 - v15;
  v43 = v9;
  result = dispatch thunk of Collection.startIndex.getter();
  v18 = *(_QWORD *)(a3 + 16);
  v19 = ~a2 + v18;
  v20 = v18 >= a2;
  v21 = v18 - a2;
  if (v20)
    v22 = v21;
  else
    v22 = 0;
  v23 = (unsigned __int8 *)(a2 + a3 + 32);
  while (v22)
  {
    v24 = v19;
    v25 = *v23;
    v26 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read();
    v28 = *v27;
    v26(v47, 0);
    if (v25 != v28)
    {
      v38 = 0;
      v36 = *(void (**)(char *, uint64_t))(v42 + 8);
LABEL_11:
      v36(v16, AssociatedTypeWitness);
      return v38 & 1;
    }
    v44 = v24;
    v45 = v23;
    v46 = v22;
    v29 = a1;
    v30 = a4;
    v31 = v16;
    v33 = v41;
    v32 = v42;
    v34 = *(void (**)(char *, char *, uint64_t))(v42 + 16);
    v34(v41, v31, AssociatedTypeWitness);
    v35 = v40;
    dispatch thunk of Collection.index(after:)();
    v36 = *(void (**)(char *, uint64_t))(v32 + 8);
    v36(v33, AssociatedTypeWitness);
    v36(v31, AssociatedTypeWitness);
    v37 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
    v16 = v31;
    v37(v31, v35, AssociatedTypeWitness);
    v34(v35, v31, AssociatedTypeWitness);
    a4 = v30;
    a1 = v29;
    dispatch thunk of Collection.endIndex.getter();
    swift_getAssociatedConformanceWitness();
    v38 = dispatch thunk of static Equatable.== infix(_:_:)();
    v36(v33, AssociatedTypeWitness);
    result = ((uint64_t (*)(char *, uint64_t))v36)(v35, AssociatedTypeWitness);
    if ((v38 & 1) == 0)
    {
      v19 = v44 - 1;
      v22 = v46 - 1;
      v23 = v45 + 1;
      if (v44)
        continue;
    }
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.matches<A>(_:from:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  char *v17;
  void (*v18)(_BYTE *, _QWORD);
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  char *v24;
  void (*v25)(char *, uint64_t);
  void (*v26)(char *, char *, uint64_t);
  char v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[32];

  v33 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v32 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v30 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v31 = (char *)&v28 - v12;
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v28 - v14;
  v34 = a1;
  result = dispatch thunk of Collection.startIndex.getter();
  v35 = a3;
  v36 = a2;
  v29 = a3 - 1;
  v17 = v31;
  while ((v36 & 0x8000000000000000) == 0 && a2 < v35)
  {
    v18 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read();
    v20 = *v19;
    v18(v38, 0);
    if (v20 != v33)
    {
      v27 = 0;
      v25 = *(void (**)(char *, uint64_t))(v32 + 8);
LABEL_9:
      v25(v15, AssociatedTypeWitness);
      return v27 & 1;
    }
    v37 = a2;
    v21 = a5;
    v22 = v32;
    v23 = *(void (**)(char *, char *, uint64_t))(v32 + 16);
    v24 = v30;
    v23(v30, v15, AssociatedTypeWitness);
    dispatch thunk of Collection.index(after:)();
    v25 = *(void (**)(char *, uint64_t))(v22 + 8);
    v25(v24, AssociatedTypeWitness);
    v25(v15, AssociatedTypeWitness);
    v26 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
    a5 = v21;
    v26(v15, v17, AssociatedTypeWitness);
    v23(v17, v15, AssociatedTypeWitness);
    dispatch thunk of Collection.endIndex.getter();
    swift_getAssociatedConformanceWitness();
    v27 = dispatch thunk of static Equatable.== infix(_:_:)();
    v25(v24, AssociatedTypeWitness);
    result = ((uint64_t (*)(char *, uint64_t))v25)(v17, AssociatedTypeWitness);
    if ((v27 & 1) == 0)
    {
      a2 = v37 + 1;
      if (v29 != v37)
        continue;
    }
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t DataProtocol.matches<A>(_:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  void (*v27)(_BYTE *, _QWORD);
  unsigned __int8 *v28;
  int v29;
  void (*v30)(_BYTE *, _QWORD);
  unsigned __int8 *v31;
  int v32;
  char *v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  void (*v42)(char *, uint64_t);
  char *v43;
  char *v44;
  char *v45;
  char v46;
  char *v47;
  void (*v48)(char *, uint64_t);
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t AssociatedTypeWitness;
  void (*v60)(char *, uint64_t);
  void (*v61)(char *, char *, uint64_t);
  void (*v62)(char *, uint64_t, uint64_t, __n128);
  char *v63;
  char *v64;
  uint64_t v65;
  _BYTE v66[40];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v55 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v54 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v53 = (char *)&v50 - v12;
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v50 - v14;
  v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 8) + 8) + 8);
  v65 = a3;
  v17 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v17);
  v64 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v63 = (char *)&v50 - v20;
  v22 = MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v50 - v23;
  v58 = v25;
  v62 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v25 + 16);
  v62((char *)&v50 - v23, a2, v17, v22);
  v56 = a1;
  v57 = a4;
  v26 = v24;
  dispatch thunk of Collection.startIndex.getter();
  v51 = v24;
  v52 = v15;
  v50 = v16;
  while (1)
  {
    v27 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read();
    v29 = *v28;
    v27(v66, 0);
    v30 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read();
    v32 = *v31;
    v30(v66, 0);
    if (v29 != v32)
    {
      LODWORD(v61) = 0;
      (*(void (**)(char *, uint64_t))(v55 + 8))(v15, AssociatedTypeWitness);
      goto LABEL_9;
    }
    v33 = v64;
    ((void (*)(char *, char *, uint64_t))v62)(v64, v26, v17);
    v34 = v63;
    dispatch thunk of Collection.index(after:)();
    v35 = v58;
    v36 = *(void (**)(char *, uint64_t))(v58 + 8);
    v36(v33, v17);
    v60 = v36;
    v36(v26, v17);
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v26, v34, v17);
    v38 = v54;
    v37 = v55;
    v61 = *(void (**)(char *, char *, uint64_t))(v55 + 16);
    v39 = v17;
    v40 = AssociatedTypeWitness;
    v61(v54, v15, AssociatedTypeWitness);
    v41 = v53;
    dispatch thunk of Collection.index(after:)();
    v42 = *(void (**)(char *, uint64_t))(v37 + 8);
    v42(v38, v40);
    v42(v15, v40);
    (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v15, v41, v40);
    v61(v41, v15, v40);
    dispatch thunk of Collection.endIndex.getter();
    swift_getAssociatedConformanceWitness();
    LODWORD(v35) = dispatch thunk of static Equatable.== infix(_:_:)();
    v42(v38, v40);
    v42(v41, v40);
    LODWORD(v61) = v35;
    if ((v35 & 1) != 0)
      break;
    v43 = v63;
    v44 = v51;
    ((void (*)(char *, char *, uint64_t))v62)(v63, v51, v39);
    v45 = v64;
    dispatch thunk of Collection.endIndex.getter();
    swift_getAssociatedConformanceWitness();
    v46 = dispatch thunk of static Equatable.== infix(_:_:)();
    v47 = v45;
    v48 = v60;
    v60(v47, v39);
    v48(v43, v39);
    v15 = v52;
    v17 = v39;
    v26 = v44;
    if ((v46 & 1) != 0)
      goto LABEL_8;
  }
  v26 = v51;
  v15 = v52;
  v17 = v39;
LABEL_8:
  v42(v15, AssociatedTypeWitness);
LABEL_9:
  (*(void (**)(char *, uint64_t))(v58 + 8))(v26, v17);
  return v61 & 1;
}

void DataProtocol<>.copyBytes<A, B>(to:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v23 = a5;
  v24 = a7;
  v22 = a3;
  v25 = a8;
  v26 = a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v13 = type metadata accessor for Range();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v22 - v15;
  if (a1)
  {
    v17 = dispatch thunk of RangeExpression.relative<A>(to:)();
    v18 = MEMORY[0x1E0C80A78](v17);
    v20 = v23;
    v19 = v24;
    *(&v22 - 10) = a4;
    *(&v22 - 9) = v20;
    *(&v22 - 8) = a6;
    *(&v22 - 7) = v19;
    *(&v22 - 6) = v25;
    *(&v22 - 5) = a9;
    *(&v22 - 4) = v9;
    *(&v22 - 3) = (uint64_t)v16;
    v21 = v26;
    *(&v22 - 2) = a1;
    *(&v22 - 1) = v21;
    (*(void (**)(void *(*)(uint64_t, uint64_t), __n128))(v19 + 8))(partial apply for closure #1 in DataProtocol<>.copyBytes<A, B>(to:from:), v18);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
  else
  {
    __break(1u);
  }
}

void *closure #1 in DataProtocol<>.copyBytes<A, B>(to:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *result;
  _QWORD v19[4];
  void *v20;

  v20 = a5;
  v19[3] = a9;
  v19[2] = a12;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v16 = (char *)v19 - v15;
  dispatch thunk of Collection.startIndex.getter();
  v17 = dispatch thunk of RandomAccessCollection.distance(from:to:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, AssociatedTypeWitness);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Range();
  result = (void *)dispatch thunk of RandomAccessCollection.distance(from:to:)();
  if (v20)
  {
    if (a1)
      return memcpy(v20, (const void *)(a1 + v17), (size_t)result);
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *partial apply for closure #1 in DataProtocol<>.copyBytes<A, B>(to:from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in DataProtocol<>.copyBytes<A, B>(to:from:)(a1, a2, *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 72), *(void **)(v2 + 80), *(_QWORD *)(v2 + 88), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56));
}

_QWORD *specialized Slice<>.regions.getter(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v18;
  _QWORD *v19;
  char __src;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _UNKNOWN **v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v22 = 0;
  if (!a3)
  {
    v5 = 0;
    v19 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v7 = 0xC000000000000000;
    goto LABEL_19;
  }
  if (a3 < 1)
LABEL_21:
    __break(1u);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionOfOne<UInt8>);
  v26 = &protocol witness table for <A> CollectionOfOne<A>;
  LOBYTE(v23) = a4;
  __src = *(_BYTE *)__swift_project_boxed_opaque_existential_1(&v23, v25);
  v5 = specialized Data.InlineData.init(_:)(&__src, &v22);
  v7 = v6 & 0xFFFFFFFFFFFFFFLL;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v23);
  v8 = 0;
  v19 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  do
  {
    if (v8 <= a3)
      v9 = a3;
    else
      v9 = v8;
    v10 = -v9;
    ++v8;
    while (1)
    {
      if (v10 + v8 == 1)
      {
        __break(1u);
        goto LABEL_21;
      }
      specialized closure #1 in Slice<>.regions.getter(v5, v7);
      v11 = v24;
      if (v24 >> 60 != 15)
        break;
      if (++v8 - a3 == 1)
        goto LABEL_19;
    }
    v18 = v23;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
    v13 = v19[2];
    v12 = v19[3];
    v14 = v13 + 1;
    if (v13 >= v12 >> 1)
    {
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v19);
      v14 = v13 + 1;
      v19 = v16;
    }
    v19[2] = v14;
    v15 = &v19[2 * v13];
    v15[4] = v18;
    v15[5] = v11;
  }
  while (a3 != v8);
LABEL_19:
  outlined consume of Data._Representation(v5, v7);
  return v19;
}

uint64_t Slice<>.regions.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, __n128);
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v25;
  char *v26;
  uint64_t AssociatedTypeWitness;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;

  v3 = v2;
  v6 = *(_QWORD *)(a1 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v29 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v30 = (char *)&v25 - v7;
  v8 = swift_getAssociatedTypeWitness();
  v28 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v25 - v12;
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v25 - v16;
  v19 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v18 + 16);
  v19((char *)&v25 - v16, v3, v8, v15);
  ((void (*)(char *, uint64_t, uint64_t))v19)(v13, v3 + *(int *)(a1 + 36), v8);
  v26 = v10;
  dispatch thunk of Collection.startIndex.getter();
  (*(void (**)(uint64_t, uint64_t))(a2 + 64))(v6, a2);
  v31 = v6;
  v32 = a2;
  v33 = v10;
  v34 = v3;
  v35 = v17;
  v36 = v13;
  v20 = AssociatedTypeWitness;
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  v21 = v30;
  v22 = Sequence.compactMap<A>(_:)();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v21, v20);
  v23 = *(void (**)(char *, uint64_t))(v28 + 8);
  v23(v13, v8);
  v23(v17, v8);
  v23(v26, v8);
  return v22;
}

uint64_t specialized closure #1 in Slice<>.regions.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v13 = *a4;
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Slice<DispatchData>);
  v15 = a3 + a2;
  if (__OFADD__(a3, a2))
  {
    __break(1u);
    goto LABEL_34;
  }
  v22 = a3 + a2;
  if (v15 < a3)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (__OFSUB__(v15, a3))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  type metadata accessor for DispatchData();
  lazy protocol witness table accessor for type DispatchData and conformance DispatchData(&lazy protocol witness table cache variable for type DispatchData and conformance DispatchData, MEMORY[0x1E0DEF668]);
  result = dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
  *a4 = v23;
  if (v13 <= a5 && v23 >= a6)
  {
    result = dispatch thunk of RandomAccessCollection.distance(from:to:)();
    v16 = a3 + result;
    if (!__OFADD__(a3, result))
    {
      if (v16 >= a3 && v22 >= v16)
      {
        result = dispatch thunk of RandomAccessCollection.distance(from:to:)();
        v18 = a3 + result;
        if (!__OFADD__(a3, result))
        {
          if (v18 >= a3 && v22 >= v18)
          {
            if (v18 >= v16)
            {
              *(_QWORD *)(a7 + 16) = a1;
              *(_QWORD *)(a7 + 24) = a2;
              *(_QWORD *)(a7 + 32) = a3;
              *(_QWORD *)a7 = v16;
              *(_QWORD *)(a7 + 8) = v18;
              *(_BYTE *)(a7 + 40) = 0;
              return result;
            }
            goto LABEL_40;
          }
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          goto LABEL_41;
        }
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= a5 && v23 <= a6)
  {
    *(_QWORD *)(a7 + 16) = a1;
    *(_QWORD *)(a7 + 24) = a2;
    *(_QWORD *)(a7 + 32) = a3;
    *(_QWORD *)a7 = a3;
    *(_QWORD *)(a7 + 8) = v22;
    *(_BYTE *)(a7 + 40) = 0;
    return result;
  }
  if (v13 <= a5 && v23 >= a5)
  {
    result = dispatch thunk of RandomAccessCollection.distance(from:to:)();
    v19 = a3 + result;
    if (!__OFADD__(a3, result))
    {
      if (v19 >= a3 && v22 >= v19)
      {
        *(_QWORD *)(a7 + 16) = a1;
        *(_QWORD *)(a7 + 24) = a2;
        *(_QWORD *)(a7 + 32) = a3;
        *(_QWORD *)a7 = v19;
        *(_QWORD *)(a7 + 8) = v22;
        *(_BYTE *)(a7 + 40) = 0;
        return result;
      }
      goto LABEL_42;
    }
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if (v13 >= a5 && v13 <= a6)
  {
    result = dispatch thunk of RandomAccessCollection.distance(from:to:)();
    v20 = a3 + result;
    if (!__OFADD__(a3, result))
    {
      if (v20 >= a3 && v22 >= v20)
      {
        *(_QWORD *)(a7 + 16) = a1;
        *(_QWORD *)(a7 + 24) = a2;
        *(_QWORD *)(a7 + 32) = a3;
        *(_QWORD *)a7 = a3;
        *(_QWORD *)(a7 + 8) = v20;
        *(_BYTE *)(a7 + 40) = 0;
        return result;
      }
      goto LABEL_44;
    }
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    return result;
  }
  *(_QWORD *)(a7 + 32) = 0;
  *(_OWORD *)a7 = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  *(_BYTE *)(a7 + 40) = 1;
  return result;
}

uint64_t specialized closure #1 in Slice<>.regions.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v8 = a3 + a2;
  if (__OFADD__(a3, a2))
  {
    __break(1u);
    goto LABEL_50;
  }
  if (__OFSUB__(v8, a3))
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  v9 = *a4;
  v10 = *a4 + a2;
  if (__OFADD__(*a4, a2))
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  v12 = *(_QWORD *)(a5 + 24);
  v11 = *(_QWORD *)(a5 + 32);
  v13 = __OFADD__(v11, v12);
  v14 = v11 + v12;
  if (v13)
  {
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  if (v8 < a3 || v10 < v11 || v14 < v10)
    goto LABEL_53;
  *a4 = v10;
  if (v9 <= a6 && v10 >= a7)
  {
    v15 = a6 - v9;
    if (!__OFSUB__(a6, v9))
    {
      v13 = __OFADD__(a3, v15);
      v16 = a3 + v15;
      if (!v13)
      {
        v17 = a7 - v9;
        if (!__OFSUB__(a7, v9))
        {
          v13 = __OFADD__(a3, v17);
          v18 = a3 + v17;
          if (!v13)
          {
            if (v8 >= v18
              && v18 >= a3
              && v11 <= a7
              && v8 >= v16
              && v16 >= a3
              && v14 >= a6
              && v11 <= a6
              && v9 >= v11
              && v14 >= v9)
            {
              if (v18 >= v16)
              {
                *(_QWORD *)(a8 + 16) = result;
                *(_QWORD *)(a8 + 24) = a2;
                *(_QWORD *)(a8 + 32) = a3;
                *(_QWORD *)a8 = v16;
                *(_QWORD *)(a8 + 8) = v18;
                *(_BYTE *)(a8 + 40) = 0;
                return result;
              }
              goto LABEL_59;
            }
LABEL_58:
            __break(1u);
LABEL_59:
            __break(1u);
            goto LABEL_60;
          }
LABEL_57:
          __break(1u);
          goto LABEL_58;
        }
LABEL_56:
        __break(1u);
        goto LABEL_57;
      }
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  if (v9 >= a6 && v10 <= a7)
  {
    *(_QWORD *)(a8 + 16) = result;
    *(_QWORD *)(a8 + 24) = a2;
    *(_QWORD *)(a8 + 32) = a3;
    *(_QWORD *)a8 = a3;
    *(_QWORD *)(a8 + 8) = v8;
    *(_BYTE *)(a8 + 40) = 0;
    return result;
  }
  if (v9 <= a6 && v10 >= a6)
  {
    v19 = a6 - v9;
    if (!__OFSUB__(a6, v9))
    {
      v13 = __OFADD__(a3, v19);
      v20 = a3 + v19;
      if (!v13)
      {
        if (v8 >= v20 && v20 >= a3 && v11 <= a6 && v9 >= v11)
        {
          *(_QWORD *)(a8 + 16) = result;
          *(_QWORD *)(a8 + 24) = a2;
          *(_QWORD *)(a8 + 32) = a3;
          *(_QWORD *)a8 = v20;
          *(_QWORD *)(a8 + 8) = v8;
          *(_BYTE *)(a8 + 40) = 0;
          return result;
        }
        goto LABEL_62;
      }
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
      goto LABEL_64;
    }
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  if (v9 < a6 || v9 > a7)
  {
    *(_QWORD *)(a8 + 32) = 0;
    *(_OWORD *)a8 = 0u;
    *(_OWORD *)(a8 + 16) = 0u;
    *(_BYTE *)(a8 + 40) = 1;
    return result;
  }
  v21 = a7 - v9;
  if (__OFSUB__(a7, v9))
    goto LABEL_63;
  v13 = __OFADD__(a3, v21);
  v22 = a3 + v21;
  if (!v13)
  {
    if (v8 >= v22 && v22 >= a3 && v14 >= a7 && v11 <= a7 && v9 >= v11 && v14 >= v9)
    {
      *(_QWORD *)(a8 + 16) = result;
      *(_QWORD *)(a8 + 24) = a2;
      *(_QWORD *)(a8 + 32) = a3;
      *(_QWORD *)a8 = a3;
      *(_QWORD *)(a8 + 8) = v22;
      *(_BYTE *)(a8 + 40) = 0;
      return result;
    }
    goto LABEL_65;
  }
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
  return result;
}

void specialized closure #1 in Slice<>.regions.getter(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_181AF8FCC(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v13 = v11 + BYTE6(v10);
  if (__OFADD__(v11, BYTE6(v10)))
  {
    __break(1u);
    goto LABEL_18;
  }
  if (v13 < 0 || v13 > a6)
  {
LABEL_18:
    __break(1u);
    JUMPOUT(0x181AF927CLL);
  }
  *a3 = v13;
  if (a8 >= v11 && v13 >= v12)
    __asm { BR              X9 }
  if (a8 <= v11 && v13 <= v12)
    __asm { BR              X10 }
  if (a8 >= v11 && v13 >= a8)
    __asm { BR              X9 }
  result = 0;
  if (a8 <= v11 && v12 >= v11)
    __asm { BR              X10 }
  *v9 = 0;
  v9[1] = 0xF000000000000000;
  return result;
}

uint64_t closure #1 in Slice<>.regions.getter@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t, __n128);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t);
  uint64_t v53;
  char *v54;
  char v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t result;
  uint64_t v62;
  char *v63;
  char *v64;
  _QWORD *v65;
  void (*v66)(char *, char *, uint64_t);
  char *v67;
  char *v68;
  char *v69;
  void (*v70)(char *, char *, uint64_t);
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char v77;
  char *v78;
  uint64_t v79;
  char v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  _QWORD *v86;
  void (*v87)(char *, char *, uint64_t);
  char *v88;
  char *v89;
  void (*v90)(char *, char *, uint64_t);
  void (*v91)(char *, uint64_t);
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  void (*v98)(char *, char *, uint64_t);
  uint64_t v99;
  char *v100;
  char v101;
  char *v102;
  char v103;
  uint64_t v104;
  char *v105;
  char *v106;
  _QWORD *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  void (*v111)(char *, char *, uint64_t);
  void (*v112)(char *, char *, uint64_t);
  char *v113;
  uint64_t v114;
  char *v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  char *v126;
  char v127;
  char *v128;
  char *v129;
  char v130;
  char *v131;
  char *v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  void (*v138)(char *, char *, uint64_t);
  void (*v139)(char *, char *, uint64_t);
  char *v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  char *v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t AssociatedConformanceWitness;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  _QWORD *v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t TupleTypeMetadata2;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  char *v180;
  char *v181;

  v177 = a1;
  v178 = a5;
  v181 = a4;
  v176 = a3;
  v173 = a8;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = a6;
  v162 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  v179 = *(_QWORD *)(*(_QWORD *)(v162 + 8) + 8);
  v169 = AssociatedTypeWitness;
  v13 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v156 = (char *)&v151 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v155 = (char *)&v151 - v16;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v159 = type metadata accessor for Range();
  v158 = *(_QWORD *)(v159 - 8);
  MEMORY[0x1E0C80A78](v159);
  v164 = (char *)&v151 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v157 = (char *)&v151 - v19;
  v171 = v13;
  v165 = *(_QWORD **)(v13 - 8);
  MEMORY[0x1E0C80A78](v20);
  v151 = (char *)&v151 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v172 = (char *)&v151 - v23;
  MEMORY[0x1E0C80A78](v24);
  v174 = (char *)&v151 - v25;
  v175 = *(_QWORD *)(a7 + 8);
  v167 = *(_QWORD *)(*(_QWORD *)(v175 + 8) + 8);
  v26 = v12;
  v27 = swift_getAssociatedTypeWitness();
  v166 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27);
  v152 = (char *)&v151 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29);
  v153 = (char *)&v151 - v30;
  MEMORY[0x1E0C80A78](v31);
  v154 = (char *)&v151 - v32;
  MEMORY[0x1E0C80A78](v33);
  v163 = (char *)&v151 - v34;
  MEMORY[0x1E0C80A78](v35);
  v168 = (char *)&v151 - v36;
  MEMORY[0x1E0C80A78](v37);
  v39 = (char *)&v151 - v38;
  MEMORY[0x1E0C80A78](v40);
  v42 = (char *)&v151 - v41;
  v44 = MEMORY[0x1E0C80A78](v43);
  v46 = (char *)&v151 - v45;
  v48 = *(void (**)(char *, char *, uint64_t, __n128))(v47 + 16);
  v48((char *)&v151 - v45, a2, v27, v44);
  v49 = v26;
  v50 = v176 + *(int *)(type metadata accessor for Slice() + 40);
  ((void (*)(char *, char *, uint64_t))v48)(v39, a2, v27);
  v176 = swift_checkMetadataState();
  dispatch thunk of Collection.count.getter();
  v161 = v50;
  dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
  v51 = v166;
  v52 = *(void (**)(char *, uint64_t))(v166 + 8);
  v52(v39, v27);
  (*(void (**)(char *, char *, uint64_t))(v51 + 40))(a2, v42, v27);
  v53 = v49;
  v54 = v168;
  v169 = v53;
  swift_getAssociatedConformanceWitness();
  v180 = v46;
  LOBYTE(v51) = dispatch thunk of static Comparable.>= infix(_:_:)();
  ((void (*)(char *, char *, uint64_t))v48)(v54, v178, v27);
  if ((v51 & 1) != 0)
  {
    ((void (*)(char *, char *, uint64_t))v48)(v42, a2, v27);
    v55 = dispatch thunk of static Comparable.<= infix(_:_:)();
    v52(v42, v27);
    v52(v54, v27);
    if ((v55 & 1) != 0)
    {
      v168 = (char *)v52;
      v56 = v172;
      dispatch thunk of Collection.startIndex.getter();
      dispatch thunk of RandomAccessCollection.distance(from:to:)();
      dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
      v57 = (char *)v165[1];
      v58 = v171;
      ((void (*)(char *, uint64_t))v57)(v56, v171);
      v59 = v151;
      dispatch thunk of Collection.startIndex.getter();
      dispatch thunk of RandomAccessCollection.distance(from:to:)();
      dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
      v181 = v57;
      ((void (*)(char *, uint64_t))v57)(v59, v58);
      v60 = v174;
      result = dispatch thunk of static Comparable.<= infix(_:_:)();
      if ((result & 1) != 0)
      {
        v62 = TupleTypeMetadata2;
        v63 = v155;
        v64 = &v155[*(int *)(TupleTypeMetadata2 + 48)];
        v65 = v165;
        v66 = (void (*)(char *, char *, uint64_t))v165[2];
        v66(v155, v60, v58);
        v67 = v64;
        v178 = v64;
        v66(v64, v172, v58);
        v68 = v156;
        v69 = &v156[*(int *)(v62 + 48)];
        v66(v156, v63, v58);
        v66(v69, v67, v58);
        v70 = (void (*)(char *, char *, uint64_t))v65[4];
        v71 = v164;
        v70(v164, v68, v58);
        v72 = v181;
        ((void (*)(char *, uint64_t))v181)(v69, v58);
        v73 = &v68[*(int *)(v62 + 48)];
        v70(v68, v63, v58);
        v70(v73, v178, v58);
        v74 = v159;
        v70(&v71[*(int *)(v159 + 36)], v73, v58);
        ((void (*)(char *, uint64_t))v72)(v68, v58);
        v75 = v158;
        v76 = v157;
        (*(void (**)(char *, char *, uint64_t))(v158 + 32))(v157, v71, v74);
        dispatch thunk of Collection.subscript.getter();
        (*(void (**)(char *, uint64_t))(v75 + 8))(v76, v74);
        ((void (*)(char *, uint64_t))v72)(v172, v58);
        ((void (*)(char *, uint64_t))v72)(v174, v58);
        ((void (*)(char *, uint64_t))v168)(v180, v27);
LABEL_21:
        v149 = swift_getAssociatedTypeWitness();
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v149 - 8) + 56))(v173, 0, 1, v149);
      }
      __break(1u);
      goto LABEL_26;
    }
  }
  else
  {
    v52(v54, v27);
  }
  v168 = a2;
  v77 = dispatch thunk of static Comparable.>= infix(_:_:)();
  v78 = v163;
  ((void (*)(char *, char *, uint64_t))v48)(v163, v178, v27);
  v79 = v171;
  if ((v77 & 1) != 0)
  {
    ((void (*)(char *, char *, uint64_t))v48)(v42, v168, v27);
    v80 = dispatch thunk of static Comparable.<= infix(_:_:)();
    v52(v42, v27);
    v52(v78, v27);
    if ((v80 & 1) != 0)
    {
      v168 = (char *)v52;
      v81 = v174;
      dispatch thunk of Collection.startIndex.getter();
      v82 = v172;
      dispatch thunk of Collection.endIndex.getter();
      result = dispatch thunk of static Comparable.<= infix(_:_:)();
      if ((result & 1) == 0)
      {
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      v83 = TupleTypeMetadata2;
      v84 = v155;
      v85 = &v155[*(int *)(TupleTypeMetadata2 + 48)];
      v86 = v165;
      v87 = (void (*)(char *, char *, uint64_t))v165[4];
      v87(v155, v81, v79);
      v181 = v85;
      v87(v85, v82, v79);
      v88 = v156;
      v89 = &v156[*(int *)(v83 + 48)];
      v90 = (void (*)(char *, char *, uint64_t))v86[2];
      v90(v156, v84, v79);
      v90(v89, v85, v79);
      v87(v164, v88, v79);
      v91 = (void (*)(char *, uint64_t))v86[1];
      v91(v89, v79);
      v92 = &v88[*(int *)(TupleTypeMetadata2 + 48)];
      v87(v88, v84, v79);
      v87(v92, v181, v79);
      v93 = v159;
      v94 = v164;
      v87(&v164[*(int *)(v159 + 36)], v92, v79);
      v91(v88, v79);
      v95 = v158;
      v96 = v157;
      (*(void (**)(char *, char *, uint64_t))(v158 + 32))(v157, v94, v93);
      v97 = v173;
      dispatch thunk of Collection.subscript.getter();
      (*(void (**)(char *, uint64_t))(v95 + 8))(v96, v93);
      ((void (*)(char *, uint64_t))v168)(v180, v27);
LABEL_15:
      v125 = swift_getAssociatedTypeWitness();
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v125 - 8) + 56))(v97, 0, 1, v125);
    }
  }
  else
  {
    v52(v78, v27);
  }
  v98 = (void (*)(char *, char *, uint64_t))v48;
  v99 = v79;
  v100 = v181;
  v101 = dispatch thunk of static Comparable.>= infix(_:_:)();
  v102 = v154;
  ((void (*)(char *, char *, uint64_t))v48)(v154, v100, v27);
  if ((v101 & 1) != 0)
  {
    ((void (*)(char *, char *, uint64_t))v48)(v42, v168, v27);
    v103 = dispatch thunk of static Comparable.<= infix(_:_:)();
    v52(v42, v27);
    v52(v102, v27);
    if ((v103 & 1) != 0)
    {
      v104 = v99;
      v168 = (char *)v52;
      v105 = v172;
      dispatch thunk of Collection.startIndex.getter();
      dispatch thunk of RandomAccessCollection.distance(from:to:)();
      v106 = v174;
      dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
      v107 = v165;
      v181 = (char *)v165[1];
      ((void (*)(char *, uint64_t))v181)(v105, v104);
      dispatch thunk of Collection.endIndex.getter();
      result = dispatch thunk of static Comparable.<= infix(_:_:)();
      if ((result & 1) == 0)
      {
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
        return result;
      }
      v108 = TupleTypeMetadata2;
      v109 = v155;
      v110 = &v155[*(int *)(TupleTypeMetadata2 + 48)];
      v111 = (void (*)(char *, char *, uint64_t))v107[2];
      v111(v155, v106, v104);
      v112 = (void (*)(char *, char *, uint64_t))v107[4];
      v113 = v110;
      v178 = v110;
      v112(v110, v105, v104);
      v114 = *(int *)(v108 + 48);
      v115 = v156;
      v116 = &v156[v114];
      v111(v156, v109, v104);
      v111(v116, v113, v104);
      v117 = v164;
      v112(v164, v115, v104);
      v118 = v116;
      v119 = v181;
      ((void (*)(char *, uint64_t))v181)(v118, v104);
      v120 = v119;
      v121 = &v115[*(int *)(TupleTypeMetadata2 + 48)];
      v112(v115, v109, v104);
      v112(v121, v178, v104);
      v122 = v159;
      v112(&v117[*(int *)(v159 + 36)], v121, v104);
      ((void (*)(char *, uint64_t))v120)(v115, v104);
      v123 = v158;
      v124 = v157;
      (*(void (**)(char *, char *, uint64_t))(v158 + 32))(v157, v117, v122);
      v97 = v173;
      dispatch thunk of Collection.subscript.getter();
      (*(void (**)(char *, uint64_t))(v123 + 8))(v124, v122);
      ((void (*)(char *, uint64_t))v181)(v174, v104);
      ((void (*)(char *, uint64_t))v168)(v180, v27);
      goto LABEL_15;
    }
  }
  else
  {
    v52(v102, v27);
  }
  v126 = v180;
  v127 = dispatch thunk of static Comparable.>= infix(_:_:)();
  v128 = v153;
  v98(v153, v126, v27);
  v129 = v152;
  v98(v152, v178, v27);
  if ((v127 & 1) != 0)
  {
    v130 = dispatch thunk of static Comparable.<= infix(_:_:)();
    v52(v129, v27);
    v52(v128, v27);
    if ((v130 & 1) != 0)
    {
      v168 = (char *)v52;
      v131 = v172;
      dispatch thunk of Collection.startIndex.getter();
      dispatch thunk of RandomAccessCollection.distance(from:to:)();
      v132 = v174;
      dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
      v133 = v165;
      v134 = v171;
      v181 = (char *)v165[1];
      ((void (*)(char *, uint64_t))v181)(v131, v171);
      dispatch thunk of Collection.startIndex.getter();
      result = dispatch thunk of static Comparable.<= infix(_:_:)();
      if ((result & 1) != 0)
      {
        v135 = TupleTypeMetadata2;
        v136 = v155;
        v137 = &v155[*(int *)(TupleTypeMetadata2 + 48)];
        v138 = (void (*)(char *, char *, uint64_t))v133[4];
        v138(v155, v131, v134);
        v139 = (void (*)(char *, char *, uint64_t))v133[2];
        v140 = v137;
        v178 = v137;
        v139(v137, v132, v134);
        v141 = v156;
        v142 = &v156[*(int *)(v135 + 48)];
        v139(v156, v136, v134);
        v139(v142, v140, v134);
        v143 = v164;
        v138(v164, v141, v134);
        ((void (*)(char *, uint64_t))v181)(v142, v134);
        v144 = &v141[*(int *)(v135 + 48)];
        v138(v141, v136, v134);
        v138(v144, v178, v134);
        v145 = v159;
        v138(&v143[*(int *)(v159 + 36)], v144, v134);
        v146 = v181;
        ((void (*)(char *, uint64_t))v181)(v141, v134);
        v147 = v158;
        v148 = v157;
        (*(void (**)(char *, char *, uint64_t))(v158 + 32))(v157, v143, v145);
        dispatch thunk of Collection.subscript.getter();
        (*(void (**)(char *, uint64_t))(v147 + 8))(v148, v145);
        ((void (*)(char *, uint64_t))v146)(v174, v134);
        ((void (*)(char *, uint64_t))v168)(v180, v27);
        goto LABEL_21;
      }
      goto LABEL_28;
    }
  }
  else
  {
    v52(v129, v27);
    v52(v128, v27);
  }
  v52(v126, v27);
  v150 = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v150 - 8) + 56))(v173, 1, 1, v150);
}

uint64_t partial apply for closure #1 in Slice<>.regions.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in Slice<>.regions.getter(a1, *(char **)(v2 + 32), *(_QWORD *)(v2 + 40), *(char **)(v2 + 48), *(char **)(v2 + 56), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

void associated type witness table accessor for DataProtocol.Regions : BidirectionalCollection in <> Slice<A>()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t associated type witness table accessor for Collection.SubSequence : DataProtocol in <> Slice<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a3 - 8);
  return MEMORY[0x186DA9D64](&protocol conformance descriptor for <> Slice<A>, a1, &v4);
}

uint64_t associated type witness table accessor for DataProtocol.Regions.Sequence.Element : DataProtocol in <> Slice<A>()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for DataProtocol.Regions.Sequence.Element.Collection.SubSequence : ContiguousBytes in <> Slice<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t protocol witness for DataProtocol.regions.getter in conformance <> Slice<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = Slice<>.regions.getter(a1, *(_QWORD *)(a2 - 8));
  *a3 = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> Slice<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)a3 + 8);
  result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEDE40], a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t default associated conformance accessor for DataProtocol.Collection.SubSequence: DataProtocol(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a3;
  return MEMORY[0x186DA9D64](&protocol conformance descriptor for <> Slice<A>, a1, &v4);
}

uint64_t dispatch thunk of DataProtocol.firstRange<A, B>(of:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 72))();
}

uint64_t dispatch thunk of DataProtocol.lastRange<A, B>(of:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 80))();
}

uint64_t dispatch thunk of DataProtocol.copyBytes(to:count:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 88))();
}

uint64_t dispatch thunk of DataProtocol.copyBytes<A>(to:count:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 96))();
}

uint64_t dispatch thunk of DataProtocol.copyBytes<A>(to:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 104))();
}

uint64_t dispatch thunk of DataProtocol.copyBytes<A, B>(to:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 112))();
}

uint64_t dispatch thunk of MutableDataProtocol.resetBytes<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance UnsafeRawBufferPointer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance UnsafeRawBufferPointer(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.firstRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.lastRange<A, B>(of:in:) in conformance UnsafeRawBufferPointer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance UnsafeRawBufferPointer(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.lastRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.copyBytes(to:count:) in conformance UnsafeRawBufferPointer(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v4 = v3[1];
  v5 = v4 - *v3;
  if (!*v3)
    v5 = 0;
  if ((a3 & 0x8000000000000000) == 0 && v5 >= a3)
    return specialized DataProtocol.copyBytes<A>(to:from:)(result, a2, 0, a3, *v3, v4);
  __break(1u);
  return result;
}

uint64_t protocol witness for DataProtocol.copyBytes<A>(to:count:) in conformance UnsafeRawBufferPointer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return specialized DataProtocol.copyBytes<A>(to:count:)(a1, a2, a3, *v4, v4[1], a4);
}

uint64_t protocol witness for DataProtocol.copyBytes<A>(to:from:) in conformance UnsafeRawBufferPointer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return specialized DataProtocol.copyBytes<A>(to:from:)(a1, a2, a3, *v3, v3[1]);
}

uint64_t protocol witness for DataProtocol.copyBytes<A, B>(to:from:) in conformance UnsafeRawBufferPointer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;

  return specialized DataProtocol.copyBytes<A, B>(to:from:)(a1, a2, a3, *v6, v6[1], a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.copyBytes<A>(to:from:));
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> UnsafeBufferPointer<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance UnsafeRawBufferPointer(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.firstRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.lastRange<A, B>(of:in:) in conformance <A> UnsafeBufferPointer<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance UnsafeRawBufferPointer(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.lastRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.copyBytes(to:count:) in conformance <A> UnsafeBufferPointer<A>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  if ((a3 & 0x8000000000000000) == 0)
    return specialized DataProtocol.copyBytes<A>(to:from:)(result, a2, 0, a3, *v3, v3[1]);
  __break(1u);
  return result;
}

uint64_t protocol witness for DataProtocol.copyBytes<A>(to:count:) in conformance <A> UnsafeBufferPointer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return specialized DataProtocol.copyBytes<A>(to:count:)(a1, a2, a3, *v4, v4[1], a4);
}

uint64_t protocol witness for DataProtocol.copyBytes<A>(to:from:) in conformance <A> UnsafeBufferPointer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return specialized DataProtocol.copyBytes<A>(to:from:)(a1, a2, a3, *v3, v3[1]);
}

uint64_t protocol witness for DataProtocol.copyBytes<A, B>(to:from:) in conformance <A> UnsafeBufferPointer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;

  return specialized DataProtocol.copyBytes<A, B>(to:from:)(a1, a2, a3, *v6, v6[1], a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.copyBytes<A>(to:from:));
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance DispatchData.Region@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance DispatchData.Region(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.firstRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.lastRange<A, B>(of:in:) in conformance DispatchData.Region@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance DispatchData.Region(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.lastRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance DispatchData.Region@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, uint64_t (*a8)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))
{
  _QWORD *v8;
  uint64_t result;
  uint64_t v11;
  char v12;

  result = a8(a1, a2, *v8, v8[1], v8[2], a3, a4, a5, a6);
  *(_QWORD *)a7 = result;
  *(_QWORD *)(a7 + 8) = v11;
  *(_BYTE *)(a7 + 16) = v12 & 1;
  return result;
}

uint64_t protocol witness for DataProtocol.copyBytes(to:count:) in conformance DispatchData.Region(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  BOOL v10;

  v5 = v3[2];
  v6 = v5 + a3;
  if (__OFADD__(v5, a3))
  {
    __break(1u);
    goto LABEL_9;
  }
  v7 = v3[1];
  v8 = v5 + v7;
  if (__OFADD__(v5, v7))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v6 >= v5)
  {
    v10 = __OFSUB__(v8, v6);
    v9 = v8 - v6 < 0;
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  if (v9 == v10)
    return specialized DataProtocol.copyBytes<A>(to:from:)(result, a2, v5, v6, *v3, v7, v3[2]);
LABEL_10:
  __break(1u);
  return result;
}

uint64_t protocol witness for DataProtocol.copyBytes<A>(to:count:) in conformance DispatchData.Region(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return specialized DataProtocol.copyBytes<A>(to:count:)(a1, a2, a3, *v4, v4[1], v4[2], a4);
}

uint64_t protocol witness for DataProtocol.copyBytes<A>(to:from:) in conformance DispatchData.Region(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return specialized DataProtocol.copyBytes<A>(to:from:)(a1, a2, a3, *v3, v3[1], v3[2]);
}

uint64_t protocol witness for DataProtocol.copyBytes<A, B>(to:from:) in conformance DispatchData.Region(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return specialized DataProtocol.copyBytes<A, B>(to:from:)(a1, a2, a3, *v4, v4[1], v4[2], a4);
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance DispatchData@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance DispatchData(a1, (uint64_t (*)(void))specialized DataProtocol.firstRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.lastRange<A, B>(of:in:) in conformance DispatchData@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance DispatchData(a1, (uint64_t (*)(void))specialized DataProtocol.lastRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance DispatchData@<X0>(uint64_t a1@<X8>, uint64_t (*a2)(void))
{
  uint64_t result;
  uint64_t v4;
  char v5;

  result = a2();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5 & 1;
  return result;
}

uint64_t protocol witness for DataProtocol.copyBytes(to:count:) in conformance DispatchData(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  lazy protocol witness table accessor for type DispatchData and conformance DispatchData((unint64_t *)&lazy protocol witness table cache variable for type DispatchData and conformance DispatchData, MEMORY[0x1E0DEF670]);
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.startIndex.getter();
  lazy protocol witness table accessor for type DispatchData and conformance DispatchData(&lazy protocol witness table cache variable for type DispatchData and conformance DispatchData, MEMORY[0x1E0DEF668]);
  result = dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
  if (v5 >= v6)
    return specialized DataProtocol.copyBytes<A>(to:from:)(a1, a2, v6, v5);
  __break(1u);
  return result;
}

uint64_t specialized Data.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5;
  _QWORD *v6;
  __n128 v7;
  uint64_t v9;
  __int128 v10[2];
  uint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD v14[6];
  char v15;

  v14[5] = a3;
  v15 = a4;
  v12 = a3;
  v13 = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Repeated<UInt8>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousBytes);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(v10, (uint64_t)v14);
    v5 = v14[4];
    v6 = __swift_project_boxed_opaque_existential_1(v14, v14[3]);
    v7 = MEMORY[0x1E0C80A78](v6);
    (*(void (**)(void (*)(), __n128))(v5 + 8))(partial apply for closure #1 in Data.replaceSubrange<A>(_:with:), v7);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  }
  else
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    v9 = outlined destroy of Any?((uint64_t)v10, &demangling cache variable for type metadata for ContiguousBytes?);
    MEMORY[0x1E0C80A78](v9);
    return _withStackOrHeapBuffer(capacity:_:)(a3, (void (*)(uint64_t, uint64_t))partial apply for specialized closure #3 in Data.replaceSubrange<A>(_:with:));
  }
}

void specialized closure #3 in Data.replaceSubrange<A>(_:with:)(int8x16_t *a1, uint64_t a2, uint64_t a3, char a4)
{
  BOOL v4;
  BOOL v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int8x16_t *v11;
  unint64_t v12;
  uint64_t v13;
  int8x16_t v14;
  uint64_t v15;
  int8x16_t *v16;
  uint64_t v17;

  if (a1 && a2)
  {
    if (a2 < 0)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    if (a3)
    {
      v6 = a3 & ~(a3 >> 63);
      v7 = a2 - 1;
      v8 = a3 - 1;
      if (v6 < a3 - 1)
        v8 = a3 & ~(a3 >> 63);
      if (v7 >= v8)
        v7 = v8;
      if (v7 > 0xF)
      {
        v12 = v7 + 1;
        v13 = v12 & 0xF;
        if ((v12 & 0xF) == 0)
          v13 = 16;
        v9 = v12 - v13;
        v10 = v9 + 1;
        v11 = (int8x16_t *)((char *)a1 + v9);
        v14 = vdupq_n_s8(a4);
        v15 = v9;
        v16 = a1;
        do
        {
          *v16++ = v14;
          v15 -= 16;
        }
        while (v15);
      }
      else
      {
        v9 = 0;
        v10 = 1;
        v11 = a1;
      }
      v17 = a3 + 1;
      do
      {
        v5 = __OFSUB__(v9, v6);
        v4 = (uint64_t)(v9 - v6) < 0;
        if (v9 == v6)
          goto LABEL_23;
        v9 = v10;
        v11->i8[0] = a4;
        if (a2 == v10)
          goto LABEL_12;
        v11 = (int8x16_t *)((char *)v11 + 1);
        ++v10;
        v5 = __OFSUB__(v17, v9 + 1);
        v4 = a3 - v9 < 0;
      }
      while (v17 != v9 + 1);
    }
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (a2)
    goto LABEL_22;
LABEL_12:
  v5 = __OFSUB__(a2, a3);
  v4 = a2 - a3 < 0;
  if (a2 == a3)
  {
    Data._Representation.replaceSubrange(_:with:count:)();
    return;
  }
LABEL_25:
  if (v4 != v5)
    __break(1u);
  __break(1u);
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance Data@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance UnsafeRawBufferPointer(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.firstRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.lastRange<A, B>(of:in:) in conformance Data@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance UnsafeRawBufferPointer(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.lastRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance UnsafeRawBufferPointer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, uint64_t (*a8)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))
{
  _QWORD *v8;
  uint64_t result;
  uint64_t v11;
  char v12;

  result = a8(a1, a2, *v8, v8[1], a3, a4, a5, a6);
  *(_QWORD *)a7 = result;
  *(_QWORD *)(a7 + 8) = v11;
  *(_BYTE *)(a7 + 16) = v12 & 1;
  return result;
}

void protocol witness for DataProtocol.copyBytes(to:count:) in conformance Data()
{
  __asm { BR              X10 }
}

uint64_t sub_181AFAD14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = specialized RandomAccessCollection<>.index(_:offsetBy:)((int)v3, a3, v3);
  if (v7 < (int)v3)
  {
    __break(1u);
    JUMPOUT(0x181AFAD6CLL);
  }
  return specialized DataProtocol.copyBytes<A>(to:from:)(v6, v5, (int)v3, v7, v3, v4);
}

void protocol witness for DataProtocol.copyBytes<A>(to:count:) in conformance Data(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  specialized DataProtocol.copyBytes<A>(to:count:)(a1, a2, a3, *v3, v3[1]);
}

uint64_t protocol witness for DataProtocol.copyBytes<A, B>(to:from:) in conformance Data(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;

  return specialized DataProtocol.copyBytes<A, B>(to:from:)(a1, a2, a3, *v6, v6[1], a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.copyBytes<A>(to:from:));
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> [A]@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> [A](a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.firstRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.lastRange<A, B>(of:in:) in conformance <A> [A]@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> [A](a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.lastRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.copyBytes(to:count:) in conformance <A> [A](uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for DataProtocol.copyBytes(to:count:) in conformance <A> [A](a1, a2, a3, a4, a5, (void (*)(uint64_t, uint64_t))MEMORY[0x1E0DEEB20], (void (*)(uint64_t, uint64_t))MEMORY[0x1E0DEEB10]);
}

uint64_t protocol witness for DataProtocol.copyBytes<A>(to:count:) in conformance <A> [A](uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return specialized DataProtocol.copyBytes<A>(to:count:)(a1, a2, a3, *v4, a4, (void (*)(uint64_t, uint64_t))MEMORY[0x1E0DEEB20], (void (*)(uint64_t, uint64_t))MEMORY[0x1E0DEEB10]);
}

uint64_t protocol witness for DataProtocol.copyBytes<A>(to:from:) in conformance <A> [A](uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return specialized DataProtocol.copyBytes<A>(to:from:)(a1, a2, a3, *v3);
}

uint64_t protocol witness for DataProtocol.copyBytes<A, B>(to:from:) in conformance <A> [A](uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;

  return specialized DataProtocol.copyBytes<A, B>(to:from:)(a1, a2, a3, *v6, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.copyBytes<A>(to:from:));
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> ArraySlice<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> ArraySlice<A>(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.firstRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.lastRange<A, B>(of:in:) in conformance <A> ArraySlice<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> ArraySlice<A>(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.lastRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> ArraySlice<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, uint64_t (*a8)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))
{
  _QWORD *v8;
  uint64_t result;
  uint64_t v11;
  char v12;

  result = a8(a1, a2, *v8, v8[1], v8[2], v8[3], a3, a4, a5, a6);
  *(_QWORD *)a7 = result;
  *(_QWORD *)(a7 + 8) = v11;
  *(_BYTE *)(a7 + 16) = v12 & 1;
  return result;
}

uint64_t protocol witness for DataProtocol.copyBytes(to:count:) in conformance <A> ArraySlice<A>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(v3 + 16);
  v6 = v5 + a3;
  if (__OFADD__(v5, a3))
  {
    __break(1u);
  }
  else if (v6 >= v5)
  {
    return specialized DataProtocol.copyBytes<A>(to:from:)(result, a2, v5, v6, *(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for DataProtocol.copyBytes<A>(to:count:) in conformance <A> ArraySlice<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return specialized DataProtocol.copyBytes<A>(to:count:)(a1, a2, a3, *(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t protocol witness for DataProtocol.copyBytes<A>(to:from:) in conformance <A> ArraySlice<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return specialized DataProtocol.copyBytes<A>(to:from:)(a1, a2, a3, *(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t protocol witness for DataProtocol.copyBytes<A, B>(to:from:) in conformance <A> ArraySlice<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return specialized DataProtocol.copyBytes<A, B>(to:from:)(a1, a2, a3, *(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> ContiguousArray<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> [A](a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.firstRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.lastRange<A, B>(of:in:) in conformance <A> ContiguousArray<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> [A](a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.lastRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> [A]@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, uint64_t (*a8)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))
{
  _QWORD *v8;
  uint64_t result;
  uint64_t v11;
  char v12;

  result = a8(a1, a2, *v8, a3, a4, a5, a6);
  *(_QWORD *)a7 = result;
  *(_QWORD *)(a7 + 8) = v11;
  *(_BYTE *)(a7 + 16) = v12 & 1;
  return result;
}

uint64_t protocol witness for DataProtocol.copyBytes(to:count:) in conformance <A> ContiguousArray<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for DataProtocol.copyBytes(to:count:) in conformance <A> [A](a1, a2, a3, a4, a5, (void (*)(uint64_t, uint64_t))MEMORY[0x1E0DEEE50], (void (*)(uint64_t, uint64_t))MEMORY[0x1E0DEEE38]);
}

uint64_t protocol witness for DataProtocol.copyBytes(to:count:) in conformance <A> [A](uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t), void (*a7)(uint64_t, uint64_t))
{
  uint64_t *v7;

  if ((a3 & 0x8000000000000000) == 0)
    return specialized DataProtocol.copyBytes<A>(to:from:)(result, a2, 0, a3, *v7, a6, a7);
  __break(1u);
  return result;
}

uint64_t protocol witness for DataProtocol.copyBytes<A>(to:count:) in conformance <A> ContiguousArray<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return specialized DataProtocol.copyBytes<A>(to:count:)(a1, a2, a3, *v4, a4, (void (*)(uint64_t, uint64_t))MEMORY[0x1E0DEEE50], (void (*)(uint64_t, uint64_t))MEMORY[0x1E0DEEE38]);
}

uint64_t protocol witness for DataProtocol.copyBytes<A>(to:from:) in conformance <A> ContiguousArray<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return specialized DataProtocol.copyBytes<A>(to:from:)(a1, a2, a3, *v3);
}

uint64_t protocol witness for DataProtocol.copyBytes<A, B>(to:from:) in conformance <A> ContiguousArray<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;

  return specialized DataProtocol.copyBytes<A, B>(to:from:)(a1, a2, a3, *v6, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.copyBytes<A>(to:from:));
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> EmptyCollection<A>@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance DispatchData(a1, specialized DataProtocol.firstRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.lastRange<A, B>(of:in:) in conformance <A> EmptyCollection<A>@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance DispatchData(a1, specialized DataProtocol.lastRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.copyBytes(to:count:) in conformance <A> EmptyCollection<A>(uint64_t result)
{
  if (result)
    return 0;
  __break(1u);
  return result;
}

uint64_t protocol witness for DataProtocol.copyBytes<A>(to:count:) in conformance <A> EmptyCollection<A>(uint64_t result)
{
  return protocol witness for DataProtocol.copyBytes(to:count:) in conformance <A> EmptyCollection<A>(result);
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> Repeated<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> Repeated<A>(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.firstRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.lastRange<A, B>(of:in:) in conformance <A> Repeated<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> Repeated<A>(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.lastRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> Repeated<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, uint64_t (*a8)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  char v12;

  result = a8(a1, a2, *(_QWORD *)v8, *(unsigned __int8 *)(v8 + 8), a3, a4, a5, a6);
  *(_QWORD *)a7 = result;
  *(_QWORD *)(a7 + 8) = v11;
  *(_BYTE *)(a7 + 16) = v12 & 1;
  return result;
}

uint64_t protocol witness for DataProtocol.copyBytes(to:count:) in conformance <A> Repeated<A>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if ((a3 & 0x8000000000000000) == 0 && *(_QWORD *)v3 >= a3)
    return specialized DataProtocol.copyBytes<A>(to:from:)(result, a2, 0, a3, *(_QWORD *)v3, *(_BYTE *)(v3 + 8));
  __break(1u);
  return result;
}

uint64_t protocol witness for DataProtocol.copyBytes<A>(to:count:) in conformance <A> Repeated<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return specialized DataProtocol.copyBytes<A>(to:count:)(a1, a2, a3, *(_QWORD *)v4, *(_BYTE *)(v4 + 8), a4);
}

uint64_t protocol witness for DataProtocol.copyBytes<A>(to:from:) in conformance <A> Repeated<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return specialized DataProtocol.copyBytes<A>(to:from:)(a1, a2, a3, *(_QWORD *)v3, *(_BYTE *)(v3 + 8));
}

uint64_t protocol witness for DataProtocol.copyBytes<A, B>(to:from:) in conformance <A> Repeated<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return specialized DataProtocol.copyBytes<A, B>(to:from:)(a1, a2, a3, *(_QWORD *)v4, *(_BYTE *)(v4 + 8), a4);
}

uint64_t protocol witness for MutableDataProtocol.resetBytes<A>(in:) in conformance <A> [A](uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized MutableDataProtocol.resetBytes<A>(in:)(a1, a2, a3, (uint64_t *)&demangling cache variable for type metadata for [UInt8], &lazy protocol witness table cache variable for type [UInt8] and conformance [A], MEMORY[0x1E0DEAF50], (uint64_t (*)(void))specialized Array.replaceSubrange<A>(_:with:));
}

uint64_t protocol witness for MutableDataProtocol.resetBytes<A>(in:) in conformance <A> ContiguousArray<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized MutableDataProtocol.resetBytes<A>(in:)(a1, a2, a3, &demangling cache variable for type metadata for ContiguousArray<UInt8>, &lazy protocol witness table cache variable for type ContiguousArray<UInt8> and conformance ContiguousArray<A>, MEMORY[0x1E0DEC740], (uint64_t (*)(void))specialized ContiguousArray.replaceSubrange<A>(_:with:));
}

uint64_t specialized closure #1 in Slice<>.regions.getter@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X3>, uint64_t *a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t result;
  _BYTE v8[40];

  result = specialized closure #1 in Slice<>.regions.getter(*a1, a1[1], a2, *a3, *a4, (uint64_t)v8);
  if (!v5)
    return outlined init with take of LocalePreferences?((uint64_t)v8, a5, &demangling cache variable for type metadata for Slice<UnsafeBufferPointer<UInt8>>?);
  return result;
}

uint64_t specialized closure #1 in Slice<>.regions.getter@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t result;
  _BYTE v9[40];

  result = specialized closure #1 in Slice<>.regions.getter(*a1, a1[1], a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *a4, *a5, (uint64_t)v9);
  if (!v6)
    return outlined init with take of LocalePreferences?((uint64_t)v9, a6, &demangling cache variable for type metadata for Slice<UnsafeRawBufferPointer>?);
  return result;
}

uint64_t specialized DataProtocol.matches<A>(_:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t result;
  char *v20;
  char *v21;
  int v22;
  void (*v23)(_BYTE *, _QWORD);
  unsigned __int8 *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  void (*v31)(char *, char *, uint64_t);
  char v32;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  _BYTE v44[32];

  v42 = a4;
  v39 = a3;
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a7 + 8) + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v38 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v36 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v37 = (char *)&v34 - v15;
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v34 - v17;
  result = dispatch thunk of Collection.startIndex.getter();
  v40 = a5 >> 1;
  v41 = a2;
  v35 = (a5 >> 1) - 1;
  v20 = v36;
  v21 = v37;
  while (v41 >= v42 && a2 < v40)
  {
    v22 = *(unsigned __int8 *)(v39 + a2);
    v23 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read();
    v25 = *v24;
    v23(v44, 0);
    if (v22 != v25)
    {
      v32 = 0;
      v30 = *(void (**)(char *, uint64_t))(v38 + 8);
LABEL_10:
      v30(v18, AssociatedTypeWitness);
      return v32 & 1;
    }
    v26 = a1;
    v27 = v11;
    v28 = a6;
    v29 = v38;
    v43 = *(void (**)(char *, char *, uint64_t))(v38 + 16);
    v43(v20, v18, AssociatedTypeWitness);
    dispatch thunk of Collection.index(after:)();
    v30 = *(void (**)(char *, uint64_t))(v29 + 8);
    v30(v20, AssociatedTypeWitness);
    v30(v18, AssociatedTypeWitness);
    v31 = *(void (**)(char *, char *, uint64_t))(v29 + 32);
    a6 = v28;
    v11 = v27;
    v31(v18, v21, AssociatedTypeWitness);
    v43(v21, v18, AssociatedTypeWitness);
    a1 = v26;
    dispatch thunk of Collection.endIndex.getter();
    swift_getAssociatedConformanceWitness();
    v32 = dispatch thunk of static Equatable.== infix(_:_:)();
    v30(v20, AssociatedTypeWitness);
    result = ((uint64_t (*)(char *, uint64_t))v30)(v21, AssociatedTypeWitness);
    if ((v32 & 1) == 0 && v35 != a2++)
      continue;
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

void partial apply for specialized closure #3 in Data.replaceSubrange<A>(_:with:)(int8x16_t *a1, uint64_t a2)
{
  uint64_t v2;

  specialized closure #3 in Data.replaceSubrange<A>(_:with:)(a1, a2, **(_QWORD **)(v2 + 16), *(_BYTE *)(*(_QWORD *)(v2 + 16) + 8));
}

void partial apply for closure #1 in Data.replaceSubrange<A>(_:with:)()
{
  closure #1 in Data.replaceSubrange<A>(_:with:)();
}

uint64_t partial apply for specialized closure #1 in Slice<>.regions.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return partial apply for specialized closure #1 in Slice<>.regions.getter(a1, a2);
}

{
  uint64_t **v2;

  return specialized closure #1 in Slice<>.regions.getter(*a1, a1[1], a1[2], v2[2], *v2[4], *v2[5], a2);
}

{
  return partial apply for specialized closure #1 in Slice<>.regions.getter(a1, a2);
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  _OWORD v12[2];
  uint64_t v13;

  v3 = (_QWORD *)v2[2];
  v4 = v2[3];
  v5 = (uint64_t *)v2[4];
  v6 = (uint64_t *)v2[5];
  v8 = *a1;
  v7 = a1[1];
  v9 = a1[2];
  v10 = *(_OWORD *)(v4 + 16);
  v12[0] = *(_OWORD *)v4;
  v12[1] = v10;
  v13 = *(_QWORD *)(v4 + 32);
  return specialized closure #1 in Slice<>.regions.getter(v8, v7, v9, v3, (uint64_t)v12, *v5, *v6, a2);
}

{
  uint64_t **v2;

  return specialized closure #1 in Slice<>.regions.getter(a1, v2[2], v2[4], v2[5], a2);
}

{
  uint64_t v2;

  return specialized closure #1 in Slice<>.regions.getter(a1, *(uint64_t **)(v2 + 16), *(_QWORD *)(v2 + 24), *(uint64_t **)(v2 + 32), *(uint64_t **)(v2 + 40), a2);
}

uint64_t lazy protocol witness table accessor for type DispatchData and conformance DispatchData(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for DispatchData();
    result = MEMORY[0x186DA9D64](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DispatchData.Region and conformance DispatchData.Region()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DispatchData.Region and conformance DispatchData.Region;
  if (!lazy protocol witness table cache variable for type DispatchData.Region and conformance DispatchData.Region)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for DispatchData.Region, &type metadata for DispatchData.Region);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DispatchData.Region and conformance DispatchData.Region);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DispatchData.Region and conformance DispatchData.Region;
  if (!lazy protocol witness table cache variable for type DispatchData.Region and conformance DispatchData.Region)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for DispatchData.Region, &type metadata for DispatchData.Region);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DispatchData.Region and conformance DispatchData.Region);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DispatchData.Region and conformance DispatchData.Region;
  if (!lazy protocol witness table cache variable for type DispatchData.Region and conformance DispatchData.Region)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for DispatchData.Region, &type metadata for DispatchData.Region);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DispatchData.Region and conformance DispatchData.Region);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DispatchData.Region and conformance DispatchData.Region;
  if (!lazy protocol witness table cache variable for type DispatchData.Region and conformance DispatchData.Region)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for DispatchData.Region, &type metadata for DispatchData.Region);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DispatchData.Region and conformance DispatchData.Region);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DispatchData.Region and conformance DispatchData.Region;
  if (!lazy protocol witness table cache variable for type DispatchData.Region and conformance DispatchData.Region)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for DispatchData.Region, &type metadata for DispatchData.Region);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DispatchData.Region and conformance DispatchData.Region);
  }
  return result;
}

uint64_t specialized closure #1 in Slice<>.regions.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v13;
  char v14;

  v6 = *a3;
  v7 = *a3 + a2;
  *a3 = v7;
  v8 = a4 - v6;
  if (a4 >= v6 && v7 >= a5)
  {
    v13 = a5 - v6;
    if (v13 >= v8)
    {
      v14 = 0;
      goto LABEL_29;
    }
    __break(1u);
    goto LABEL_31;
  }
  if (a4 <= v6 && v7 <= a5)
  {
    if ((a2 & 0x8000000000000000) == 0)
    {
      v14 = 0;
      v8 = 0;
      v13 = a2;
      goto LABEL_29;
    }
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v8 = a4 - v6;
  if (a4 >= v6 && v7 >= a4)
  {
    if (v8 <= a2)
    {
      v14 = 0;
      v13 = a2;
      goto LABEL_29;
    }
    goto LABEL_32;
  }
  if (a4 > v6 || a5 < v6)
  {
    a2 = 0;
    result = 0;
    v13 = 0;
    v8 = 0;
    v14 = 1;
LABEL_29:
    *(_QWORD *)a6 = v8;
    *(_QWORD *)(a6 + 8) = v13;
    *(_QWORD *)(a6 + 16) = result;
    *(_QWORD *)(a6 + 24) = a2;
    *(_BYTE *)(a6 + 32) = v14;
    return result;
  }
  v13 = a5 - v6;
  if (v13 >= 0)
  {
    v14 = 0;
    v8 = 0;
    goto LABEL_29;
  }
LABEL_33:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer;
  if (!lazy protocol witness table cache variable for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEAC38], MEMORY[0x1E0DEAC20]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer;
  if (!lazy protocol witness table cache variable for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for UnsafeRawBufferPointer, MEMORY[0x1E0DEAC20]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer;
  if (!lazy protocol witness table cache variable for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEAC30], MEMORY[0x1E0DEAC20]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer);
  }
  return result;
}

uint64_t specialized closure #1 in Slice<>.regions.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;

  v9 = *a3;
  if (result)
    v10 = a2 - result;
  else
    v10 = 0;
  v11 = v9 + v10;
  if (__OFADD__(v9, v10))
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v14 = a5 - a4;
  if (!a4)
    v14 = 0;
  if (v11 < 0 || v14 < v11)
    goto LABEL_34;
  v17 = result;
  *a3 = v11;
  if (v9 <= a6 && v11 >= a7)
  {
    result = specialized RandomAccessCollection<>.distance(from:to:)(v9, a6, a4, a5);
    if ((result & 0x8000000000000000) == 0)
    {
      v18 = result;
      if (v10 >= result)
      {
        result = specialized RandomAccessCollection<>.distance(from:to:)(v9, a7, a4, a5);
        if ((result & 0x8000000000000000) == 0 && v10 >= result)
        {
          if (result >= v18)
          {
            v19 = 0;
LABEL_17:
            v20 = a2;
            v21 = v17;
LABEL_32:
            *(_QWORD *)a8 = v18;
            *(_QWORD *)(a8 + 8) = result;
            *(_QWORD *)(a8 + 16) = v21;
            *(_QWORD *)(a8 + 24) = v20;
            *(_BYTE *)(a8 + 32) = v19;
            return result;
          }
          goto LABEL_37;
        }
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
    }
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (v9 >= a6 && v11 <= a7)
  {
    if ((v10 & 0x8000000000000000) == 0)
    {
      v19 = 0;
      v18 = 0;
      v20 = a2;
      v21 = result;
      result = v10;
      goto LABEL_32;
    }
    goto LABEL_38;
  }
  if (v9 <= a6 && v11 >= a6)
  {
    result = specialized RandomAccessCollection<>.distance(from:to:)(v9, a6, a4, a5);
    if ((result & 0x8000000000000000) == 0)
    {
      v18 = result;
      if (v10 >= result)
      {
        v19 = 0;
        v20 = a2;
        v21 = v17;
        result = v10;
        goto LABEL_32;
      }
    }
    goto LABEL_39;
  }
  v20 = 0;
  v19 = 1;
  v21 = 0;
  result = 0;
  v18 = 0;
  if (v9 < a6 || v9 > a7)
    goto LABEL_32;
  result = specialized RandomAccessCollection<>.distance(from:to:)(v9, a7, a4, a5);
  if ((result & 0x8000000000000000) == 0 && v10 >= result)
  {
    v19 = 0;
    v18 = 0;
    goto LABEL_17;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t closure #1 in Slice<>.regions.getterspecialized partial apply@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return partial apply for specialized closure #1 in Slice<>.regions.getter(a1, a2);
}

{
  return partial apply for specialized closure #1 in Slice<>.regions.getter(a1, a2);
}

ValueMetadata *type metadata accessor for SendableOSLog()
{
  return &type metadata for SendableOSLog;
}

unint64_t specialized Collection.formIndex(_:offsetBy:)(unint64_t *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  result = *a1;
  v9 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v9) = 1;
  if ((result & 0xC) != 4 << v9)
  {
    if ((a4 & 0x1000000000000000) == 0)
      goto LABEL_5;
LABEL_13:
    result = MEMORY[0x186DA485C]();
    goto LABEL_11;
  }
  result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a3, a4);
  if ((a4 & 0x1000000000000000) != 0)
    goto LABEL_13;
LABEL_5:
  v10 = a2 + (result >> 16);
  if (__OFADD__(a2, result >> 16))
  {
    __break(1u);
    goto LABEL_15;
  }
  if ((v10 & 0x8000000000000000) != 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v11 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v11 = a3 & 0xFFFFFFFFFFFFLL;
  if (v11 >= v10)
  {
    result = (v10 << 16) | 4;
LABEL_11:
    *a1 = result;
    return result;
  }
LABEL_16:
  __break(1u);
  return result;
}

BOOL NSDecimal.isNaN.getter(unint64_t a1, unint64_t a2, unsigned int a3)
{
  __int16 v3;
  __int16 v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;

  v3 = a3;
  v4 = a2;
  v5 = a1;
  v13 = a1;
  v6 = HIDWORD(a1);
  v7 = HIWORD(a1);
  v8 = a2 >> 16;
  v14 = a2;
  v9 = HIDWORD(a2);
  v10 = HIWORD(a2);
  v11 = HIWORD(a3);
  v15 = a3;
  if (_So9NSDecimala__length_getter(&v13))
    return 0;
  LODWORD(v13) = v5;
  WORD2(v13) = v6;
  HIWORD(v13) = v7;
  LOWORD(v14) = v4;
  WORD1(v14) = v8;
  WORD2(v14) = v9;
  HIWORD(v14) = v10;
  LOWORD(v15) = v3;
  HIWORD(v15) = v11;
  return _So9NSDecimala__isNegative_getter(&v13) != 0;
}

uint64_t NSDecimal.subscript.setter(uint64_t result, int a2)
{
  _WORD *v2;
  Swift::String v3;
  Swift::String v4;

  switch(a2)
  {
    case 0:
      v2[2] = result;
      break;
    case 1:
      v2[3] = result;
      break;
    case 2:
      v2[4] = result;
      break;
    case 3:
      v2[5] = result;
      break;
    case 4:
      v2[6] = result;
      break;
    case 5:
      v2[7] = result;
      break;
    case 6:
      v2[8] = result;
      break;
    case 7:
      v2[9] = result;
      break;
    default:
      _StringGuts.grow(_:)(30);
      swift_bridgeObjectRelease();
      v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v3);
      swift_bridgeObjectRelease();
      v4._countAndFlagsBits = 0x616D5F20726F6620;
      v4._object = (void *)0xEE0061737369746ELL;
      String.append(_:)(v4);
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      break;
  }
  return result;
}

void __swiftcall NSDecimal.init(integerLiteral:)(NSDecimal *__return_ptr retstr, Swift::Int integerLiteral)
{
  Swift::Int v2;
  int v3;
  __int16 v4;
  __int16 v5;
  int v6;
  unint64_t v7;
  int v8;
  __int16 v9;
  __int16 v10;
  int v11;

  v2 = integerLiteral;
  if (integerLiteral < 0)
    integerLiteral = -integerLiteral;
  v7 = specialized NSDecimal.init(_:)(integerLiteral);
  v8 = v3;
  v9 = v4;
  v10 = v5;
  v11 = v6;
  if (v2 < 0)
    _So9NSDecimala__isNegative_setter(1, &v7);
}

BOOL NSDecimal.isZero.getter(unint64_t a1, unint64_t a2, unsigned int a3)
{
  __int16 v3;
  __int16 v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;

  v3 = a3;
  v4 = a2;
  v5 = a1;
  v13 = a1;
  v6 = HIDWORD(a1);
  v7 = HIWORD(a1);
  v8 = a2 >> 16;
  v14 = a2;
  v9 = HIDWORD(a2);
  v10 = HIWORD(a2);
  v11 = HIWORD(a3);
  v15 = a3;
  if (_So9NSDecimala__length_getter(&v13))
    return 0;
  LODWORD(v13) = v5;
  WORD2(v13) = v6;
  HIWORD(v13) = v7;
  LOWORD(v14) = v4;
  WORD1(v14) = v8;
  WORD2(v14) = v9;
  HIWORD(v14) = v10;
  LOWORD(v15) = v3;
  HIWORD(v15) = v11;
  return _So9NSDecimala__isNegative_getter(&v13) == 0;
}

unint64_t NSDecimal.magnitude.getter(unint64_t a1, unint64_t a2, unsigned int a3)
{
  __int16 v3;
  __int16 v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t isCompact_getter;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;

  v3 = a3;
  v4 = a2;
  v5 = a1;
  v16 = a1;
  v6 = HIDWORD(a1);
  v7 = HIWORD(a1);
  v8 = a2 >> 16;
  v17 = a2;
  v9 = HIDWORD(a2);
  v10 = HIWORD(a2);
  v11 = HIWORD(a3);
  v18 = a3;
  if (_So9NSDecimala__length_getter(&v16))
  {
    LODWORD(v16) = v5;
    WORD2(v16) = v6;
    HIWORD(v16) = v7;
    LOWORD(v17) = v4;
    WORD1(v17) = v8;
    WORD2(v17) = v9;
    HIWORD(v17) = v10;
    LOWORD(v18) = v3;
    HIWORD(v18) = v11;
    v15 = _So9NSDecimala__exponent_getter((char *)&v16);
    LODWORD(v16) = v5;
    WORD2(v16) = v6;
    HIWORD(v16) = v7;
    LOWORD(v17) = v4;
    WORD1(v17) = v8;
    WORD2(v17) = v9;
    HIWORD(v17) = v10;
    LOWORD(v18) = v3;
    HIWORD(v18) = v11;
    v12 = _So9NSDecimala__length_getter(&v16);
    LODWORD(v16) = v5;
    WORD2(v16) = v6;
    HIWORD(v16) = v7;
    LOWORD(v17) = v4;
    WORD1(v17) = v8;
    WORD2(v17) = v9;
    HIWORD(v17) = v10;
    LOWORD(v18) = v3;
    HIWORD(v18) = v11;
    isCompact_getter = _So9NSDecimala__isCompact_getter(&v16);
    WORD2(v16) = v6;
    HIWORD(v16) = v7;
    LOWORD(v17) = v4;
    WORD1(v17) = v8;
    WORD2(v17) = v9;
    HIWORD(v17) = v10;
    LOWORD(v18) = v3;
    HIWORD(v18) = v11;
    _So9NSDecimala__exponent_setter(v15, &v16);
    _So9NSDecimala__length_setter(v12, &v16);
    _So9NSDecimala__isNegative_setter(0, &v16);
    _So9NSDecimala__isCompact_setter_0(isCompact_getter, &v16);
    _So9NSDecimala__reserved_setter(&v16);
    v5 = v16;
    LOWORD(v6) = WORD2(v16);
    v7 = HIWORD(v16);
  }
  return v5 | ((unint64_t)(unsigned __int16)v6 << 32) | (v7 << 48);
}

BOOL static NSDecimal.< infix(_:_:)(unint64_t a1, unint64_t a2, unsigned int a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  return specialized static NSDecimal._compare(lhs:rhs:)(a1, a2, a3, a4, a5, a6) == -1;
}

unint64_t NSDecimal.significand.getter(unint64_t a1, unint64_t a2, unsigned int a3)
{
  __int16 v3;
  __int16 v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t isCompact_getter;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;

  v3 = a3;
  v4 = a2;
  v5 = a1;
  v15 = a1;
  v6 = HIDWORD(a1);
  v7 = HIWORD(a1);
  v8 = a2 >> 16;
  v16 = a2;
  v9 = HIDWORD(a2);
  v10 = HIWORD(a2);
  v11 = HIWORD(a3);
  v17 = a3;
  v12 = _So9NSDecimala__length_getter(&v15);
  LODWORD(v15) = v5;
  WORD2(v15) = v6;
  HIWORD(v15) = v7;
  LOWORD(v16) = v4;
  WORD1(v16) = v8;
  WORD2(v16) = v9;
  HIWORD(v16) = v10;
  LOWORD(v17) = v3;
  HIWORD(v17) = v11;
  isCompact_getter = _So9NSDecimala__isCompact_getter(&v15);
  WORD2(v15) = v6;
  HIWORD(v15) = v7;
  LOWORD(v16) = v4;
  WORD1(v16) = v8;
  WORD2(v16) = v9;
  HIWORD(v16) = v10;
  LOWORD(v17) = v3;
  HIWORD(v17) = v11;
  _So9NSDecimala__exponent_setter(0, &v15);
  _So9NSDecimala__length_setter(v12, &v15);
  _So9NSDecimala__isNegative_setter(0, &v15);
  _So9NSDecimala__isCompact_setter_0(isCompact_getter, &v15);
  _So9NSDecimala__reserved_setter(&v15);
  return v15;
}

void __swiftcall NSDecimal.init(_:)(NSDecimal *__return_ptr retstr, Swift::Int a2)
{
  Swift::Int v2;
  int v3;
  __int16 v4;
  __int16 v5;
  int v6;
  unint64_t v7;
  int v8;
  __int16 v9;
  __int16 v10;
  int v11;

  v2 = a2;
  if (a2 < 0)
    a2 = -a2;
  v7 = specialized NSDecimal.init(_:)(a2);
  v8 = v3;
  v9 = v4;
  v10 = v5;
  v11 = v6;
  if (v2 < 0)
    _So9NSDecimala__isNegative_setter(1, &v7);
}

uint64_t NSDecimal.description.getter(unint64_t a1, unint64_t a2, unsigned int a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  Swift::String v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  __int16 v16;
  Swift::String v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;
  unint64_t v27;
  Swift::String v28;
  int v29;
  uint64_t result;
  __int16 v31;
  __int16 v32;
  Swift::String v33;
  int v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  unsigned int v38;
  __int16 v39;
  __int16 v40;
  __int16 v41;
  __int16 v42;
  __int16 v43;
  __int16 v44;
  __int16 v45;
  _BYTE v46[20];
  uint64_t v47;
  unint64_t v48;
  unsigned int v49;
  __int128 v50;

  LOWORD(v3) = a3;
  LOWORD(v4) = a2;
  LODWORD(v5) = a1;
  v49 = a1;
  v6 = HIDWORD(a1);
  LOWORD(v50) = WORD2(a1);
  v7 = HIWORD(a1);
  WORD1(v50) = HIWORD(a1);
  v8 = a2 >> 16;
  *(_QWORD *)((char *)&v50 + 4) = a2;
  v9 = HIDWORD(a2);
  v10 = HIWORD(a2);
  v11 = HIWORD(a3);
  HIDWORD(v50) = a3;
  if (!_So9NSDecimala__length_getter(&v49))
  {
    v49 = v5;
    LOWORD(v50) = v6;
    WORD1(v50) = v7;
    WORD2(v50) = v4;
    WORD3(v50) = v8;
    WORD4(v50) = v9;
    WORD5(v50) = v10;
    WORD6(v50) = v3;
    HIWORD(v50) = v11;
    if (_So9NSDecimala__isNegative_getter(&v49))
      return 5136718;
  }
  v49 = v5;
  LOWORD(v50) = v6;
  WORD1(v50) = v7;
  WORD2(v50) = v4;
  WORD3(v50) = v8;
  WORD4(v50) = v9;
  WORD5(v50) = v10;
  WORD6(v50) = v3;
  HIWORD(v50) = v11;
  if (!_So9NSDecimala__length_getter(&v49))
    return 48;
  v47 = 0;
  v48 = 0xE000000000000000;
  v49 = v5;
  LOWORD(v50) = v6;
  WORD1(v50) = v7;
  WORD2(v50) = v4;
  WORD3(v50) = v8;
  WORD4(v50) = v9;
  WORD5(v50) = v10;
  WORD6(v50) = v3;
  HIWORD(v50) = v11;
  *(_DWORD *)v46 = v5;
  *(_WORD *)&v46[4] = v6;
  *(_WORD *)&v46[6] = v7;
  *(_WORD *)&v46[8] = v4;
  *(_WORD *)&v46[10] = v8;
  *(_WORD *)&v46[12] = v9;
  *(_WORD *)&v46[14] = v10;
  *(_WORD *)&v46[16] = v3;
  *(_WORD *)&v46[18] = v11;
  if ((int)_So9NSDecimala__exponent_getter(v46) >= 1)
  {
    do
    {
      v12._countAndFlagsBits = 48;
      v12._object = (void *)0xE100000000000000;
      String.append(_:)(v12);
      *(_DWORD *)v46 = v5;
      *(_WORD *)&v46[4] = v6;
      *(_WORD *)&v46[6] = v7;
      *(_WORD *)&v46[8] = v4;
      *(_WORD *)&v46[10] = v8;
      *(_WORD *)&v46[12] = v9;
      *(_WORD *)&v46[14] = v10;
      *(_WORD *)&v46[16] = v3;
      *(_WORD *)&v46[18] = v11;
      v13 = _So9NSDecimala__exponent_getter(v46);
      _So9NSDecimala__exponent_setter((v13 - 1), &v49);
      LODWORD(v5) = v49;
      LOWORD(v6) = v50;
      LOWORD(v7) = WORD1(v50);
      LOWORD(v4) = WORD2(v50);
      LOWORD(v8) = WORD3(v50);
      LOWORD(v9) = WORD4(v50);
      LOWORD(v10) = WORD5(v50);
      LOWORD(v3) = WORD6(v50);
      LOWORD(v11) = HIWORD(v50);
      *(_QWORD *)v46 = __PAIR64__(v50, v49);
      *(_QWORD *)&v46[8] = *(_QWORD *)((char *)&v50 + 4);
      *(_DWORD *)&v46[16] = HIDWORD(v50);
    }
    while ((int)_So9NSDecimala__exponent_getter(v46) > 0);
  }
  *(_DWORD *)v46 = v5;
  *(_WORD *)&v46[4] = v6;
  *(_WORD *)&v46[6] = v7;
  *(_WORD *)&v46[8] = v4;
  *(_WORD *)&v46[10] = v8;
  *(_WORD *)&v46[12] = v9;
  *(_WORD *)&v46[14] = v10;
  *(_WORD *)&v46[16] = v3;
  *(_WORD *)&v46[18] = v11;
  if (!_So9NSDecimala__exponent_getter(v46))
  {
    _So9NSDecimala__exponent_setter(1, &v49);
    LODWORD(v5) = v49;
    LOWORD(v6) = v50;
    LOWORD(v7) = WORD1(v50);
    LOWORD(v4) = WORD2(v50);
    LOWORD(v8) = WORD3(v50);
    LOWORD(v9) = WORD4(v50);
    LOWORD(v10) = WORD5(v50);
    LOWORD(v3) = WORD6(v50);
    LOWORD(v11) = HIWORD(v50);
  }
  *(_DWORD *)v46 = v5;
  v42 = v6;
  *(_WORD *)&v46[4] = v6;
  LOWORD(v14) = v7;
  *(_WORD *)&v46[6] = v7;
  *(_WORD *)&v46[8] = v4;
  *(_WORD *)&v46[10] = v8;
  *(_WORD *)&v46[12] = v9;
  *(_WORD *)&v46[14] = v10;
  *(_WORD *)&v46[16] = v3;
  *(_WORD *)&v46[18] = v11;
  if (!_So9NSDecimala__length_getter(v46))
  {
LABEL_29:
    v15 = v14;
    v16 = v42;
LABEL_30:
    *(_DWORD *)v46 = v5;
    *(_WORD *)&v46[4] = v16;
    *(_WORD *)&v46[6] = v15;
    *(_WORD *)&v46[8] = v4;
    *(_WORD *)&v46[10] = v8;
    *(_WORD *)&v46[12] = v9;
    *(_WORD *)&v46[14] = v10;
    *(_WORD *)&v46[16] = v3;
    *(_WORD *)&v46[18] = v11;
    v31 = v15;
    v32 = v16;
    if ((int)_So9NSDecimala__exponent_getter(v46) <= 0)
    {
      while (1)
      {
        *(_DWORD *)v46 = v5;
        *(_WORD *)&v46[4] = v32;
        *(_WORD *)&v46[6] = v31;
        *(_WORD *)&v46[8] = v4;
        *(_WORD *)&v46[10] = v8;
        *(_WORD *)&v46[12] = v9;
        *(_WORD *)&v46[14] = v10;
        *(_WORD *)&v46[16] = v3;
        *(_WORD *)&v46[18] = v11;
        if (!_So9NSDecimala__exponent_getter(v46))
          break;
        v33._countAndFlagsBits = 48;
        v33._object = (void *)0xE100000000000000;
        String.append(_:)(v33);
        *(_DWORD *)v46 = v5;
        *(_WORD *)&v46[4] = v32;
        *(_WORD *)&v46[6] = v31;
        *(_WORD *)&v46[8] = v4;
        *(_WORD *)&v46[10] = v8;
        *(_WORD *)&v46[12] = v9;
        *(_WORD *)&v46[14] = v10;
        *(_WORD *)&v46[16] = v3;
        *(_WORD *)&v46[18] = v11;
        v34 = _So9NSDecimala__exponent_getter(v46);
        _So9NSDecimala__exponent_setter((v34 + 1), &v49);
        LODWORD(v5) = v49;
        v32 = v50;
        v31 = WORD1(v50);
        LOWORD(v4) = WORD2(v50);
        LOWORD(v8) = WORD3(v50);
        LOWORD(v9) = WORD4(v50);
        LOWORD(v10) = WORD5(v50);
        LOWORD(v3) = WORD6(v50);
        LOWORD(v11) = HIWORD(v50);
      }
      v35._countAndFlagsBits = 46;
      v35._object = (void *)0xE100000000000000;
      String.append(_:)(v35);
      v36._countAndFlagsBits = 48;
      v36._object = (void *)0xE100000000000000;
      String.append(_:)(v36);
    }
    *(_DWORD *)v46 = v5;
    *(_WORD *)&v46[4] = v32;
    *(_WORD *)&v46[6] = v31;
    *(_WORD *)&v46[8] = v4;
    *(_WORD *)&v46[10] = v8;
    *(_WORD *)&v46[12] = v9;
    *(_WORD *)&v46[14] = v10;
    *(_WORD *)&v46[16] = v3;
    *(_WORD *)&v46[18] = v11;
    if (_So9NSDecimala__isNegative_getter(v46))
    {
      v37._countAndFlagsBits = 45;
      v37._object = (void *)0xE100000000000000;
      String.append(_:)(v37);
    }
    *(_QWORD *)v46 = v47;
    *(_QWORD *)&v46[8] = v48;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<String>);
    lazy protocol witness table accessor for type ReversedCollection<String> and conformance ReversedCollection<A>();
    return String.init<A>(_:)();
  }
  v15 = v7;
  v16 = v6;
  while (1)
  {
    v43 = v15;
    *(_DWORD *)v46 = v5;
    *(_WORD *)&v46[4] = v16;
    *(_WORD *)&v46[6] = v15;
    *(_WORD *)&v46[8] = v4;
    *(_WORD *)&v46[10] = v8;
    *(_WORD *)&v46[12] = v9;
    *(_WORD *)&v46[14] = v10;
    *(_WORD *)&v46[16] = v3;
    *(_WORD *)&v46[18] = v11;
    if (!_So9NSDecimala__exponent_getter(v46))
    {
      v17._countAndFlagsBits = 46;
      v17._object = (void *)0xE100000000000000;
      String.append(_:)(v17);
    }
    *(_DWORD *)v46 = v5;
    *(_WORD *)&v46[4] = v16;
    *(_WORD *)&v46[6] = v43;
    *(_WORD *)&v46[8] = v4;
    *(_WORD *)&v46[10] = v8;
    *(_WORD *)&v46[12] = v9;
    *(_WORD *)&v46[14] = v10;
    *(_WORD *)&v46[16] = v3;
    *(_WORD *)&v46[18] = v11;
    v18 = _So9NSDecimala__exponent_getter(v46);
    _So9NSDecimala__exponent_setter((v18 + 1), &v49);
    v19 = v49;
    LOWORD(v8) = WORD1(v50);
    LOWORD(v11) = WORD5(v50);
    v42 = WORD2(v50);
    v44 = v50;
    v40 = WORD4(v50);
    v41 = WORD3(v50);
    LOWORD(v9) = HIWORD(v50);
    v39 = WORD6(v50);
    NSDecimal.asVariableLengthInteger()(v49 | ((unint64_t)(unsigned __int16)v50 << 32) | ((unint64_t)WORD1(v50) << 48), WORD2(v50) | ((unint64_t)WORD3(v50) << 16) | ((unint64_t)WORD4(v50) << 32) | ((unint64_t)WORD5(v50) << 48), WORD6(v50) | (HIWORD(v50) << 16));
    v14 = v20;
    v3 = *(_QWORD *)(v20 + 16);
    if (!v3)
    {
      v4 = 0;
      v5 = MEMORY[0x1E0DEE9D8];
      v24 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      if (!v24)
        goto LABEL_22;
LABEL_19:
      if (!*(_WORD *)(v5 + 2 * v24 + 30))
      {
        do
        {
          *(_QWORD *)(v5 + 16) = v24 - 1;
          if (v24 == 1)
            break;
        }
        while (!*(unsigned __int16 *)(v5 + 28 + 2 * v24--));
      }
      goto LABEL_22;
    }
    v38 = v19;
    v5 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    v10 = v5 + 30;
    *(_QWORD *)(v5 + 16) = v3;
    bzero((void *)(v5 + 32), 2 * v3);
    v21 = *(unsigned __int16 *)(2 * v3 + v14 + 30);
    v22 = v21 / 0xA;
    while (1)
    {
      *(_WORD *)(v10 + 2 * v3) = v22;
      v4 = v21 % 0xA;
      if (v3 == 1)
        break;
      v21 = *(unsigned __int16 *)(v14 + 28 + 2 * v3) | (v4 << 16);
      v22 = v21 / 0xA;
      v23 = v3 - 2;
      --v3;
      if (v23 >= *(_QWORD *)(v5 + 16))
      {
        __break(1u);
        goto LABEL_29;
      }
    }
    v19 = v38;
    v24 = *(_QWORD *)(v5 + 16);
    if (v24)
      goto LABEL_19;
LABEL_22:
    swift_bridgeObjectRelease();
    *(_DWORD *)v46 = v19;
    *(_WORD *)&v46[4] = v44;
    *(_WORD *)&v46[6] = v8;
    *(_WORD *)&v46[8] = v42;
    *(_WORD *)&v46[10] = v41;
    *(_WORD *)&v46[12] = v40;
    *(_WORD *)&v46[14] = v11;
    *(_WORD *)&v46[16] = v39;
    *(_WORD *)&v46[18] = v9;
    NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v5);
    if (v26)
      break;
    v27 = *(_QWORD *)(v5 + 16);
    swift_bridgeObjectRelease();
    if (HIDWORD(v27))
      goto LABEL_39;
    _So9NSDecimala__length_setter(v27, v46);
    v49 = *(_DWORD *)v46;
    v50 = *(_OWORD *)&v46[4];
    *(_QWORD *)v46 = v4 | 0x30;
    v28._countAndFlagsBits = MEMORY[0x186DA46D0](v46, 1);
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    LODWORD(v5) = v49;
    v16 = v50;
    v45 = WORD1(v50);
    LOWORD(v4) = WORD2(v50);
    LOWORD(v8) = WORD3(v50);
    LOWORD(v9) = WORD4(v50);
    LOWORD(v10) = WORD5(v50);
    LOWORD(v3) = WORD6(v50);
    LOWORD(v11) = HIWORD(v50);
    *(_QWORD *)v46 = __PAIR64__(v50, v49);
    *(_QWORD *)&v46[8] = *(_QWORD *)((char *)&v50 + 4);
    *(_DWORD *)&v46[16] = HIDWORD(v50);
    v29 = _So9NSDecimala__length_getter(v46);
    v15 = v45;
    if (!v29)
      goto LABEL_30;
  }
  swift_bridgeObjectRelease();
  swift_unexpectedError();
  __break(1u);
LABEL_39:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t NSDecimal.init(string:locale:)(unint64_t a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t (*v7)(uint64_t, uint64_t);
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _BYTE v12[40];
  uint64_t v13;
  char v14;

  if (!*a3
    || (v5 = a3[1],
        ObjectType = swift_getObjectType(),
        v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 224),
        swift_unknownObjectRetain(),
        v8 = v7(ObjectType, v5),
        v10 = v9,
        swift_unknownObjectRelease(),
        !v10))
  {
    swift_bridgeObjectRelease();
    v10 = 0xE100000000000000;
    v8 = 46;
  }
  swift_bridgeObjectRetain();
  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)(a1, a2, v8, v10, 0, (uint64_t)v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v12, (uint64_t)&v13);
  if (v14 == 1)
    return 0;
  else
    return v13;
}

void specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  __int16 v6;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  char v22;
  int v23;
  int v24;
  __int16 v25;
  __int16 v26;
  __int16 v27;
  __int16 v28;
  __int16 v29;
  __int16 v30;
  __int16 v31;
  int v32;
  __int16 v33;
  __int16 v34;
  __int16 v35;
  __int16 v36;
  __int16 v37;
  __int16 v38;
  __int16 v39;
  int v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  __int16 v46;
  __int16 v47;
  __int16 v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  __int16 v52;
  int v53;
  int isNegative_getter;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  NSDecimal *v59;
  void *v60;
  unint64_t v61;
  unint64_t v62;
  unsigned int v63;
  int v64;
  unint64_t v65;
  unint64_t v66;
  unsigned int v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  int v71;
  unsigned __int8 *v72;
  int v73;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned __int8 *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v101;
  uint64_t v102;
  uint64_t v104;
  char v105;
  unsigned __int8 *v106;
  uint64_t v107;
  __int16 v108;
  __int16 v109;
  unsigned __int8 *v110;
  unsigned __int8 *v111;
  _BYTE v112[20];
  _OWORD v113[2];

  v9 = a1;
  memset(v113, 0, 20);
  v10 = (unsigned __int8 *)specialized skipWhiteSpaces #1 <A>(from:) in static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)(a1, a1, a2);
  v11 = v10;
  v104 = a2;
  v12 = (unsigned __int8 *)(v9 + a2);
  v101 = a5;
  if ((unsigned __int8 *)(v9 + a2) != v10)
  {
    if ((uint64_t)&v10[-v9] < 0 || v9 + a2 - (uint64_t)v10 < 1)
      goto LABEL_107;
    v13 = *v10;
    if (v13 == 45 || v13 == 43)
    {
      _So9NSDecimala__isNegative_setter(v13 == 45, v113);
      ++v11;
    }
  }
  v14 = (unsigned __int8 *)(v9 + a2);
  if (v12 == v11)
    goto LABEL_92;
  LOBYTE(v15) = 0;
  v16 = -v9;
  v102 = v9;
  v17 = a2 + v9;
  v106 = (unsigned __int8 *)(v9 + a2);
  v97 = a2 + v9;
  v98 = -v9;
LABEL_9:
  v18 = (unint64_t)&v11[v16];
  v19 = v17 - (_QWORD)v11;
  do
  {
    if ((v18 & 0x8000000000000000) != 0 || (v20 = v19 < 1, v21 = v19 - 1, v20))
    {
      __break(1u);
      goto LABEL_105;
    }
    v22 = v15;
    v23 = *v11;
    if ((v23 - 58) < 0xF6u)
      goto LABEL_33;
    v110 = v11;
    v24 = v113[0];
    v25 = WORD3(v113[0]);
    v26 = WORD4(v113[0]);
    v27 = WORD5(v113[0]);
    v28 = WORD6(v113[0]);
    v29 = HIWORD(v113[0]);
    v6 = v113[1];
    v30 = WORD1(v113[1]);
    if ((v15 & 1) == 0)
    {
      v108 = WORD2(v113[0]);
      NSDecimal._multiply(byShort:)((NSDecimal *)(WORD4(v113[0]) | ((unint64_t)WORD5(v113[0]) << 16) | ((unint64_t)WORD6(v113[0]) << 32)), 0xAu);
      if (!v41)
      {
        NSDecimal._add(_:)((NSDecimal *)(v23 - 48), (v23 - 48));
        if (!v41)
        {
          LOBYTE(v15) = 0;
          *(_QWORD *)&v113[0] = v42;
          *((_QWORD *)&v113[0] + 1) = v43;
          LODWORD(v113[1]) = v44;
          goto LABEL_29;
        }
      }

      *(_DWORD *)v112 = v24;
      *(_WORD *)&v112[4] = v108;
      *(_WORD *)&v112[6] = v25;
      *(_WORD *)&v112[8] = v26;
      *(_WORD *)&v112[10] = v27;
      *(_WORD *)&v112[12] = v28;
      *(_WORD *)&v112[14] = v29;
      *(_WORD *)&v112[16] = v6;
      *(_WORD *)&v112[18] = v30;
      if (_So9NSDecimala__exponent_getter(v112) == 127)
      {
        *(_OWORD *)&v112[4] = 0uLL;
        _So9NSDecimala__exponent_setter(0, v112);
        _So9NSDecimala__length_setter(0, v112);
        _So9NSDecimala__isNegative_setter(1, v112);
        _So9NSDecimala__isCompact_setter_0(0, v112);
        _So9NSDecimala__reserved_setter(v112);
        v45 = *(_DWORD *)v112;
        v46 = *(_WORD *)&v112[4];
        v47 = *(_WORD *)&v112[6];
        v48 = *(_WORD *)&v112[8];
        v49 = *(_WORD *)&v112[10];
        v50 = *(_WORD *)&v112[12];
        v51 = *(_WORD *)&v112[14];
        v6 = *(_WORD *)&v112[16];
        v52 = *(_WORD *)&v112[18];
        v113[0] = *(_OWORD *)v112;
        LODWORD(v113[1]) = *(_DWORD *)&v112[16];
      }
      else
      {
        *(_DWORD *)v112 = v24;
        *(_WORD *)&v112[4] = v108;
        *(_WORD *)&v112[6] = v25;
        *(_WORD *)&v112[8] = v26;
        *(_WORD *)&v112[10] = v27;
        *(_WORD *)&v112[12] = v28;
        *(_WORD *)&v112[14] = v29;
        *(_WORD *)&v112[16] = v6;
        *(_WORD *)&v112[18] = v30;
        v53 = _So9NSDecimala__exponent_getter(v112);
        _So9NSDecimala__exponent_setter((v53 + 1), v113);
        v45 = v113[0];
        v46 = WORD2(v113[0]);
        v47 = WORD3(v113[0]);
        v48 = WORD4(v113[0]);
        v49 = WORD5(v113[0]);
        v50 = WORD6(v113[0]);
        v51 = HIWORD(v113[0]);
        v6 = v113[1];
        v52 = WORD1(v113[1]);
      }
      *(_DWORD *)v112 = v45;
      *(_WORD *)&v112[4] = v46;
      *(_WORD *)&v112[6] = v47;
      *(_WORD *)&v112[8] = v48;
      *(_WORD *)&v112[10] = v49;
      *(_WORD *)&v112[12] = v50;
      *(_WORD *)&v112[14] = v51;
      *(_WORD *)&v112[16] = v6;
      *(_WORD *)&v112[18] = v52;
      if (_So9NSDecimala__length_getter(v112))
      {
        LOBYTE(v15) = 1;
        goto LABEL_29;
      }
      *(_DWORD *)v112 = v45;
      *(_WORD *)&v112[4] = v46;
      *(_WORD *)&v112[6] = v47;
      *(_WORD *)&v112[8] = v48;
      *(_WORD *)&v112[10] = v49;
      *(_WORD *)&v112[12] = v50;
      *(_WORD *)&v112[14] = v51;
      *(_WORD *)&v112[16] = v6;
      *(_WORD *)&v112[18] = v52;
      isNegative_getter = _So9NSDecimala__isNegative_getter(v112);
      LOBYTE(v15) = 1;
      if (!isNegative_getter)
      {
LABEL_29:
        v11 = v110 + 1;
        v12 = v106;
        v17 = v97;
        v16 = v98;
        if (v110 + 1 != v106)
          goto LABEL_9;
        v14 = v106;
        v9 = v102;
        if ((v101 & 1) != 0)
          goto LABEL_93;
        goto LABEL_81;
      }
LABEL_105:
      v82 = 0;
      v81 = 0;
      v80 = 0;
      v83 = 1;
      goto LABEL_101;
    }
    v107 = v21;
    v105 = v15;
    *(_QWORD *)v112 = *(_QWORD *)&v113[0];
    *(_DWORD *)&v112[8] = DWORD2(v113[0]);
    *(_WORD *)&v112[12] = WORD6(v113[0]);
    *(_DWORD *)&v112[14] = *(_DWORD *)((char *)v113 + 14);
    *(_WORD *)&v112[18] = WORD1(v113[1]);
    v31 = WORD2(v113[0]);
    if (_So9NSDecimala__exponent_getter(v112) == 127)
    {
      *(_OWORD *)&v112[4] = 0uLL;
      _So9NSDecimala__exponent_setter(0, v112);
      _So9NSDecimala__length_setter(0, v112);
      _So9NSDecimala__isNegative_setter(1, v112);
      _So9NSDecimala__isCompact_setter_0(0, v112);
      _So9NSDecimala__reserved_setter(v112);
      v32 = *(_DWORD *)v112;
      v33 = *(_WORD *)&v112[4];
      v34 = *(_WORD *)&v112[6];
      v35 = *(_WORD *)&v112[8];
      v36 = *(_WORD *)&v112[10];
      v37 = *(_WORD *)&v112[12];
      v6 = *(_WORD *)&v112[14];
      v38 = *(_WORD *)&v112[16];
      v39 = *(_WORD *)&v112[18];
      v113[0] = *(_OWORD *)v112;
      LODWORD(v113[1]) = *(_DWORD *)&v112[16];
    }
    else
    {
      *(_DWORD *)v112 = v24;
      *(_WORD *)&v112[4] = v31;
      *(_WORD *)&v112[6] = v25;
      *(_WORD *)&v112[8] = v26;
      *(_WORD *)&v112[10] = v27;
      *(_WORD *)&v112[12] = v28;
      *(_WORD *)&v112[14] = v29;
      *(_WORD *)&v112[16] = v6;
      *(_WORD *)&v112[18] = v30;
      v40 = _So9NSDecimala__exponent_getter(v112);
      _So9NSDecimala__exponent_setter((v40 + 1), v113);
      v32 = v113[0];
      v33 = WORD2(v113[0]);
      v34 = WORD3(v113[0]);
      v35 = WORD4(v113[0]);
      v36 = WORD5(v113[0]);
      v37 = WORD6(v113[0]);
      v6 = HIWORD(v113[0]);
      v38 = v113[1];
      v39 = WORD1(v113[1]);
    }
    *(_DWORD *)v112 = v32;
    *(_WORD *)&v112[4] = v33;
    *(_WORD *)&v112[6] = v34;
    *(_WORD *)&v112[8] = v35;
    *(_WORD *)&v112[10] = v36;
    *(_WORD *)&v112[12] = v37;
    *(_WORD *)&v112[14] = v6;
    *(_WORD *)&v112[16] = v38;
    *(_WORD *)&v112[18] = v39;
    if (!_So9NSDecimala__length_getter(v112))
    {
      *(_DWORD *)v112 = v32;
      *(_WORD *)&v112[4] = v33;
      *(_WORD *)&v112[6] = v34;
      *(_WORD *)&v112[8] = v35;
      *(_WORD *)&v112[10] = v36;
      *(_WORD *)&v112[12] = v37;
      *(_WORD *)&v112[14] = v6;
      *(_WORD *)&v112[16] = v38;
      *(_WORD *)&v112[18] = v39;
      if (_So9NSDecimala__isNegative_getter(v112))
        goto LABEL_89;
    }
    v19 = v107;
    v11 = v110 + 1;
    ++v18;
    LOBYTE(v15) = 1;
    v12 = v106;
  }
  while (v110 + 1 != v106);
  v11 = v106;
  v22 = v105;
LABEL_33:
  v9 = v102;
  if (v11 >= v12
    || (LOBYTE(v6) = v22,
        (specialized stringViewContainsDecimalSeparator #1 <A>(at:) in static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)((uint64_t)v11, a3, a4, v102, v104) & 1) == 0))
  {
LABEL_58:
    if (v11 < v12)
    {
      if (((unint64_t)&v11[-v9] & 0x8000000000000000) != 0 || v12 - v11 < 1)
        goto LABEL_110;
      if ((*v11 | 0x20) == 0x65)
      {
        v72 = v11 + 1;
        v15 = v12 - (v11 + 1);
        if (v12 == v11 + 1)
        {
          v80 = &v72[-v9];
          v81 = LODWORD(v113[1]);
          v82 = *((_QWORD *)&v113[0] + 1);
          v83 = *(_QWORD *)&v113[0];
          goto LABEL_101;
        }
        if ((uint64_t)&v72[-v9] < 0 || v15 < 1)
        {
          __break(1u);
        }
        else
        {
          v73 = v11[1];
          if (v73 == 43 || v73 == 45)
            v14 = v11 + 2;
          else
            v14 = v11 + 1;
          if (v12 != v14)
          {
            v75 = 0;
            v76 = v9 + v104 - (_QWORD)v14;
            v77 = (unint64_t)&v14[-v9];
            while ((v77 & 0x8000000000000000) == 0)
            {
              v20 = v76-- < 1;
              if (v20)
                break;
              if ((*v14 - 58) < 0xF6u)
                goto LABEL_84;
              v78 = (unsigned __int128)(v75 * (__int128)10) >> 64;
              v79 = 10 * v75;
              if (v78 != v79 >> 63)
                goto LABEL_109;
              v75 = v79 + (*v14 - 48);
              if (v75 > 254)
                goto LABEL_89;
              ++v14;
              ++v77;
              if (v14 == v12)
              {
                v14 = (unsigned __int8 *)(v9 + v104);
                goto LABEL_84;
              }
            }
            goto LABEL_108;
          }
          v75 = 0;
          v14 = v12;
LABEL_84:
          if (v73 == 45)
            v84 = -v75;
          else
            v84 = v75;
          *(_DWORD *)v112 = v113[0];
          *(_OWORD *)&v112[4] = *(_OWORD *)((char *)v113 + 4);
          v85 = _So9NSDecimala__exponent_getter(v112);
          v86 = __OFADD__(v84, v85);
          v87 = v84 + v85;
          if (!v86)
          {
            if (v87 != (char)v87)
            {
LABEL_89:
              v82 = 0;
              v81 = 0;
              v80 = 0;
              v83 = 1;
              LOBYTE(v15) = 1;
              goto LABEL_101;
            }
            _So9NSDecimala__exponent_setter(v87, v113);
            if ((v101 & 1) != 0)
              goto LABEL_93;
            goto LABEL_81;
          }
        }
        __break(1u);
        return;
      }
    }
    v14 = v11;
    if ((v101 & 1) != 0)
      goto LABEL_93;
LABEL_81:
    v12 = v14;
    goto LABEL_95;
  }
  if ((a4 & 0x1000000000000000) != 0)
    goto LABEL_111;
  if ((a4 & 0x2000000000000000) != 0)
    v55 = HIBYTE(a4) & 0xF;
  else
    v55 = a3 & 0xFFFFFFFFFFFFLL;
  while (1)
  {
    v14 = v12;
    if (v12 == &v11[v55])
      break;
    v56 = (uint64_t)&v11[v55 - v9 + 1];
    v57 = ~v55 + v104 + v9 - (_QWORD)v11;
    v11 += v55;
    while ((uint64_t)&v11[-v9] >= 0 && v12 - v11 >= 1)
    {
      v58 = *v11;
      v59 = (NSDecimal *)(v58 - 58);
      if (v59 < 0xF6)
        goto LABEL_58;
      if ((v6 & 1) != 0)
      {
        if (++v11 == v12)
        {
LABEL_57:
          v11 = v12;
          goto LABEL_58;
        }
        while ((v56 & 0x8000000000000000) == 0)
        {
          v20 = v57-- < 1;
          if (v20)
            break;
          if (*v11 - 58 < 0xFFFFFFF6)
            goto LABEL_58;
          ++v11;
          ++v56;
          if (v11 == v12)
            goto LABEL_57;
        }
        break;
      }
      NSDecimal._multiply(byShort:)(v59, 0xAu);
      if (v60 || (NSDecimal._add(_:)((NSDecimal *)(v58 - 48), (v58 - 48)), v60))
      {

        LOBYTE(v6) = 1;
      }
      else
      {
        v64 = v61;
        v6 = v62;
        v111 = v11;
        *(_QWORD *)&v113[0] = v61;
        v65 = HIDWORD(v61);
        v66 = HIWORD(v61);
        v67 = HIWORD(v63);
        *((_QWORD *)&v113[0] + 1) = v62;
        v68 = v62 >> 16;
        v69 = HIDWORD(v62);
        v70 = HIWORD(v62);
        LODWORD(v113[1]) = v63;
        *(_QWORD *)v112 = v61;
        *(_QWORD *)&v112[8] = v62;
        v109 = v63;
        *(_DWORD *)&v112[16] = v63;
        if (_So9NSDecimala__exponent_getter(v112) == -128)
          goto LABEL_89;
        *(_DWORD *)v112 = v64;
        *(_WORD *)&v112[4] = v65;
        *(_WORD *)&v112[6] = v66;
        *(_WORD *)&v112[8] = v6;
        *(_WORD *)&v112[10] = v68;
        *(_WORD *)&v112[12] = v69;
        *(_WORD *)&v112[14] = v70;
        *(_WORD *)&v112[16] = v109;
        *(_WORD *)&v112[18] = v67;
        v71 = _So9NSDecimala__exponent_getter(v112);
        _So9NSDecimala__exponent_setter((v71 - 1), v113);
        LOBYTE(v6) = 0;
        v12 = v106;
        v11 = v111;
      }
      ++v11;
      ++v56;
      --v57;
      v9 = v102;
      if (v11 == v12)
      {
        v14 = v12;
        goto LABEL_92;
      }
    }
    __break(1u);
LABEL_107:
    __break(1u);
LABEL_108:
    __break(1u);
LABEL_109:
    __break(1u);
LABEL_110:
    __break(1u);
LABEL_111:
    v55 = String.UTF8View._foreignCount()();
  }
LABEL_92:
  if ((v101 & 1) == 0)
    goto LABEL_81;
LABEL_93:
  if (v12 != (unsigned __int8 *)specialized skipWhiteSpaces #1 <A>(from:) in static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)((uint64_t)v14, v9, v104))
  {
    v83 = 0;
    v82 = 0;
    v81 = 0;
    v80 = 0;
    LOBYTE(v15) = 1;
    goto LABEL_101;
  }
LABEL_95:
  v80 = &v12[-v9];
  if (v12 == (unsigned __int8 *)v9)
  {
    v83 = 0;
    v82 = 0;
    v81 = 0;
    LOBYTE(v15) = 1;
  }
  else
  {
    NSDecimal.compact()();
    v88 = LODWORD(v113[0]);
    v89 = WORD2(v113[0]);
    v90 = WORD3(v113[0]);
    v91 = WORD4(v113[0]);
    v92 = WORD5(v113[0]);
    v93 = WORD6(v113[0]);
    v94 = HIWORD(v113[0]);
    v95 = LOWORD(v113[1]);
    v96 = WORD1(v113[1]);
    *(_OWORD *)v112 = v113[0];
    *(_DWORD *)&v112[16] = v113[1];
    if (_So9NSDecimala__length_getter(v112))
      goto LABEL_97;
    *(_DWORD *)v112 = v88;
    *(_WORD *)&v112[4] = v89;
    *(_WORD *)&v112[6] = v90;
    *(_WORD *)&v112[8] = v91;
    *(_WORD *)&v112[10] = v92;
    *(_WORD *)&v112[12] = v93;
    *(_WORD *)&v112[14] = v94;
    *(_WORD *)&v112[16] = v95;
    *(_WORD *)&v112[18] = v96;
    if (!_So9NSDecimala__isNegative_getter(v112))
    {
LABEL_97:
      LOBYTE(v15) = 0;
      v83 = v88 | (v89 << 32) | (v90 << 48);
      v82 = v91 | (v92 << 16) | (v93 << 32) | (v94 << 48);
      v81 = v95 | (v96 << 16);
    }
    else
    {
      v83 = 0;
      v82 = 0;
      v81 = 0;
      LOBYTE(v15) = 0;
    }
  }
LABEL_101:
  *(_QWORD *)a6 = v83;
  *(_QWORD *)(a6 + 8) = v82;
  *(_QWORD *)(a6 + 16) = v81;
  *(_QWORD *)(a6 + 24) = v80;
  *(_BYTE *)(a6 + 32) = v15;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NSDecimal()
{
  uint64_t v0;

  return NSDecimal.description.getter(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_DWORD *)(v0 + 16));
}

double one-time initialization function for leastFiniteMagnitude(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = one-time initialization function for leastFiniteMagnitude(a1, 1, &static NSDecimal.leastFiniteMagnitude, (__n128 *)((char *)&static NSDecimal.leastFiniteMagnitude + 4)).n128_u64[0];
  return result;
}

uint64_t static NSDecimal.leastFiniteMagnitude.getter()
{
  if (one-time initialization token for leastFiniteMagnitude != -1)
    swift_once();
  return static NSDecimal.leastFiniteMagnitude;
}

double one-time initialization function for greatestFiniteMagnitude(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = one-time initialization function for leastFiniteMagnitude(a1, 0, &static NSDecimal.greatestFiniteMagnitude, (__n128 *)((char *)&static NSDecimal.greatestFiniteMagnitude + 4)).n128_u64[0];
  return result;
}

__n128 one-time initialization function for leastFiniteMagnitude(uint64_t a1, uint64_t a2, _DWORD *a3, __n128 *a4)
{
  __n128 result;
  int v8;
  __n128 v9;

  v9.n128_u64[0] = -1;
  v9.n128_u64[1] = -1;
  _So9NSDecimala__exponent_setter(127, &v8);
  _So9NSDecimala__length_setter(8, &v8);
  _So9NSDecimala__isNegative_setter(a2, &v8);
  _So9NSDecimala__isCompact_setter_0(1, &v8);
  _So9NSDecimala__reserved_setter(&v8);
  result = v9;
  *a3 = v8;
  *a4 = result;
  return result;
}

uint64_t static NSDecimal.greatestFiniteMagnitude.getter()
{
  if (one-time initialization token for greatestFiniteMagnitude != -1)
    swift_once();
  return static NSDecimal.greatestFiniteMagnitude;
}

double one-time initialization function for leastNormalMagnitude(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = one-time initialization function for leastNormalMagnitude(a1, &static NSDecimal.leastNormalMagnitude, (__n128 *)((char *)&static NSDecimal.leastNormalMagnitude + 4)).n128_u64[0];
  return result;
}

uint64_t static NSDecimal.leastNormalMagnitude.getter()
{
  if (one-time initialization token for leastNormalMagnitude != -1)
    swift_once();
  return static NSDecimal.leastNormalMagnitude;
}

double one-time initialization function for leastNonzeroMagnitude(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = one-time initialization function for leastNormalMagnitude(a1, &static NSDecimal.leastNonzeroMagnitude, (__n128 *)((char *)&static NSDecimal.leastNonzeroMagnitude + 4)).n128_u64[0];
  return result;
}

__n128 one-time initialization function for leastNormalMagnitude(uint64_t a1, _DWORD *a2, __n128 *a3)
{
  __n128 result;
  int v6;
  __n128 v7;

  v7.n128_u16[0] = 1;
  *(unint64_t *)((char *)v7.n128_u64 + 2) = 0;
  v7.n128_u64[1] = 0;
  _So9NSDecimala__exponent_setter(4294967169, &v6);
  _So9NSDecimala__length_setter(1, &v6);
  _So9NSDecimala__isNegative_setter(0, &v6);
  _So9NSDecimala__isCompact_setter_0(1, &v6);
  _So9NSDecimala__reserved_setter(&v6);
  result = v7;
  *a2 = v6;
  *a3 = result;
  return result;
}

uint64_t static NSDecimal.leastNonzeroMagnitude.getter()
{
  if (one-time initialization token for leastNonzeroMagnitude != -1)
    swift_once();
  return static NSDecimal.leastNonzeroMagnitude;
}

double one-time initialization function for pi()
{
  double result;
  int v1;
  __int128 v2;

  v2 = xmmword_18206D310;
  _So9NSDecimala__exponent_setter(4294967258, &v1);
  _So9NSDecimala__length_setter(8, &v1);
  _So9NSDecimala__isNegative_setter(0, &v1);
  _So9NSDecimala__isCompact_setter_0(1, &v1);
  _So9NSDecimala__reserved_setter(&v1);
  result = *(double *)&v2;
  LODWORD(static NSDecimal.pi) = v1;
  *(_OWORD *)((char *)&static NSDecimal.pi + 4) = v2;
  return result;
}

uint64_t static NSDecimal.pi.getter()
{
  if (one-time initialization token for pi != -1)
    swift_once();
  return static NSDecimal.pi;
}

void static NSDecimal.infinity.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static NSDecimal.signalingNaN.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t static NSDecimal.quietNaN.getter()
{
  _DWORD v1[5];

  *(_QWORD *)&v1[1] = 0;
  *(_QWORD *)&v1[3] = 0;
  _So9NSDecimala__exponent_setter(0, v1);
  _So9NSDecimala__length_setter(0, v1);
  _So9NSDecimala__isNegative_setter(1, v1);
  _So9NSDecimala__isCompact_setter_0(0, v1);
  _So9NSDecimala__reserved_setter(v1);
  return *(_QWORD *)v1;
}

uint64_t static NSDecimal.nan.getter()
{
  _DWORD v1[5];

  *(_QWORD *)&v1[1] = 0;
  *(_QWORD *)&v1[3] = 0;
  _So9NSDecimala__exponent_setter(0, v1);
  _So9NSDecimala__length_setter(0, v1);
  _So9NSDecimala__isNegative_setter(1, v1);
  _So9NSDecimala__isCompact_setter_0(0, v1);
  _So9NSDecimala__reserved_setter(v1);
  return *(_QWORD *)v1;
}

uint64_t static NSDecimal.radix.getter()
{
  return 10;
}

void __swiftcall NSDecimal.init(_:)(NSDecimal *__return_ptr retstr, Swift::UInt8 a2)
{
  specialized NSDecimal.init(_:)(a2);
}

void __swiftcall NSDecimal.init(_:)(NSDecimal *__return_ptr retstr, Swift::Int8 a2)
{
  unint64_t v3;
  int v4;
  __int16 v5;
  __int16 v6;
  int v7;
  unint64_t v8;
  int v9;
  __int16 v10;
  __int16 v11;
  int v12;

  if (a2 >= 0)
    v3 = a2;
  else
    v3 = -a2;
  v8 = specialized NSDecimal.init(_:)(v3);
  v9 = v4;
  v10 = v5;
  v11 = v6;
  v12 = v7;
  if (a2 < 0)
    _So9NSDecimala__isNegative_setter(1, &v8);
}

void __swiftcall NSDecimal.init(_:)(NSDecimal *__return_ptr retstr, Swift::Int64 a2)
{
  Swift::Int64 v2;
  int v3;
  __int16 v4;
  __int16 v5;
  int v6;
  unint64_t v7;
  int v8;
  __int16 v9;
  __int16 v10;
  int v11;

  v2 = a2;
  if (a2 < 0)
    a2 = -a2;
  v7 = specialized NSDecimal.init(_:)(a2);
  v8 = v3;
  v9 = v4;
  v10 = v5;
  v11 = v6;
  if (v2 < 0)
    _So9NSDecimala__isNegative_setter(1, &v7);
}

void __swiftcall NSDecimal.init(_:)(NSDecimal *__return_ptr retstr, Swift::UInt16 a2)
{
  specialized NSDecimal.init(_:)(a2);
}

void __swiftcall NSDecimal.init(_:)(NSDecimal *__return_ptr retstr, Swift::Int16 a2)
{
  unint64_t v3;
  int v4;
  __int16 v5;
  __int16 v6;
  int v7;
  unint64_t v8;
  int v9;
  __int16 v10;
  __int16 v11;
  int v12;

  if (a2 >= 0)
    v3 = a2;
  else
    v3 = -a2;
  v8 = specialized NSDecimal.init(_:)(v3);
  v9 = v4;
  v10 = v5;
  v11 = v6;
  v12 = v7;
  if (a2 < 0)
    _So9NSDecimala__isNegative_setter(1, &v8);
}

void __swiftcall NSDecimal.init(_:)(NSDecimal *__return_ptr retstr, Swift::UInt32 a2)
{
  specialized NSDecimal.init(_:)(a2);
}

void __swiftcall NSDecimal.init(_:)(NSDecimal *__return_ptr retstr, Swift::Int32 a2)
{
  Swift::Int32 v2;
  int v3;
  __int16 v4;
  __int16 v5;
  int v6;
  unint64_t v7;
  int v8;
  __int16 v9;
  __int16 v10;
  int v11;

  v2 = a2;
  if (a2 >= 0)
    *(_QWORD *)&a2 = a2;
  else
    *(_QWORD *)&a2 = -a2;
  v7 = specialized NSDecimal.init(_:)(*(unint64_t *)&a2);
  v8 = v3;
  v9 = v4;
  v10 = v5;
  v11 = v6;
  if (v2 < 0)
    _So9NSDecimala__isNegative_setter(1, &v7);
}

unint64_t NSDecimal.init(sign:exponent:significand:)(char a1, uint64_t a2, unint64_t a3, unint64_t a4, unsigned int a5)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  __int16 v12;
  __int16 v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int isNegative_getter;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  _QWORD v25[3];

  v6 = 0x7FFFLL;
  if (a2 < 0x7FFF)
    v6 = a2;
  if (v6 <= -32768)
    v7 = -32768;
  else
    v7 = v6;
  v8 = specialized NSDecimal._multiplyByPowerOfTen(power:roundingMode:)(v7, a3, a4, a5);
  v11 = v8;
  v12 = v9;
  v13 = v10;
  v25[0] = v8;
  v14 = HIDWORD(v8);
  v15 = HIWORD(v8);
  v16 = HIWORD(v10);
  v25[1] = v9;
  v17 = v9 >> 16;
  v18 = HIDWORD(v9);
  v19 = HIWORD(v9);
  LODWORD(v25[2]) = v10;
  if ((a1 & 1) != 0)
  {
    v22 = v8;
    v23 = v9;
    v24 = v10;
    if (_So9NSDecimala__length_getter(&v22))
    {
      LODWORD(v22) = v11;
      WORD2(v22) = v14;
      HIWORD(v22) = v15;
      LOWORD(v23) = v12;
      WORD1(v23) = v17;
      WORD2(v23) = v18;
      HIWORD(v23) = v19;
      LOWORD(v24) = v13;
      HIWORD(v24) = v16;
      isNegative_getter = _So9NSDecimala__isNegative_getter(&v22);
      _So9NSDecimala__isNegative_setter(isNegative_getter ^ 1u, v25);
      v11 = v25[0];
      LOWORD(v14) = WORD2(v25[0]);
      v15 = HIWORD(v25[0]);
    }
  }
  return v11 | ((unint64_t)(unsigned __int16)v14 << 32) | (v15 << 48);
}

Swift::Void __swiftcall NSDecimal.negate()()
{
  int *v0;
  int v1;
  __int16 v2;
  __int16 v3;
  __int16 v4;
  __int16 v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;
  __int16 v9;
  int isNegative_getter;
  int v11;
  __int16 v12;
  __int16 v13;
  __int16 v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;
  __int16 v18;
  __int16 v19;

  v1 = *v0;
  v2 = *((_WORD *)v0 + 2);
  v3 = *((_WORD *)v0 + 3);
  v4 = *((_WORD *)v0 + 4);
  v5 = *((_WORD *)v0 + 5);
  v6 = *((_WORD *)v0 + 6);
  v7 = *((_WORD *)v0 + 7);
  v8 = *((_WORD *)v0 + 8);
  v9 = *((_WORD *)v0 + 9);
  v11 = *v0;
  v12 = v2;
  v13 = v3;
  v14 = v4;
  v15 = v5;
  v16 = v6;
  v17 = v7;
  v18 = v8;
  v19 = v9;
  if (_So9NSDecimala__length_getter(&v11))
  {
    v11 = v1;
    v12 = v2;
    v13 = v3;
    v14 = v4;
    v15 = v5;
    v16 = v6;
    v17 = v7;
    v18 = v8;
    v19 = v9;
    isNegative_getter = _So9NSDecimala__isNegative_getter(&v11);
    _So9NSDecimala__isNegative_setter(isNegative_getter ^ 1u, v0);
  }
}

void __swiftcall NSDecimal.init(signOf:magnitudeOf:)(NSDecimal *__return_ptr retstr, NSDecimal *signOf, NSDecimal *magnitudeOf)
{
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  __int16 v7;
  __int16 v8;
  int v9;
  __int16 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t isNegative_getter;
  uint64_t isCompact_getter;
  __int16 v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;

  v7 = v6;
  v8 = v5;
  v9 = v4;
  v19 = v3;
  v10 = (__int16)magnitudeOf;
  v23 = (int)signOf;
  v24 = (unint64_t)signOf >> 32;
  v25 = (unint64_t)signOf >> 48;
  v27 = (unint64_t)magnitudeOf >> 16;
  v29 = v4;
  v11 = HIDWORD(v4);
  v12 = HIWORD(v4);
  v13 = v5 >> 16;
  v30 = v5;
  v14 = HIDWORD(v5);
  v15 = HIWORD(v5);
  v21 = (unint64_t)magnitudeOf >> 48;
  v22 = (unint64_t)magnitudeOf >> 32;
  v16 = HIWORD(v6);
  v31 = v6;
  v20 = HIWORD(v3);
  v28 = _So9NSDecimala__exponent_getter((char *)&v29);
  LODWORD(v29) = v9;
  WORD2(v29) = v11;
  HIWORD(v29) = v12;
  LOWORD(v30) = v8;
  WORD1(v30) = v13;
  WORD2(v30) = v14;
  HIWORD(v30) = v15;
  LOWORD(v31) = v7;
  HIWORD(v31) = v16;
  v26 = _So9NSDecimala__length_getter(&v29);
  LODWORD(v29) = v23;
  WORD2(v29) = v24;
  HIWORD(v29) = v25;
  LOWORD(v30) = v10;
  WORD1(v30) = v27;
  WORD2(v30) = v22;
  HIWORD(v30) = v21;
  LOWORD(v31) = v19;
  HIWORD(v31) = v20;
  isNegative_getter = _So9NSDecimala__isNegative_getter(&v29);
  LODWORD(v29) = v9;
  WORD2(v29) = v11;
  HIWORD(v29) = v12;
  LOWORD(v30) = v8;
  WORD1(v30) = v13;
  WORD2(v30) = v14;
  HIWORD(v30) = v15;
  LOWORD(v31) = v7;
  HIWORD(v31) = v16;
  isCompact_getter = _So9NSDecimala__isCompact_getter(&v29);
  WORD2(v29) = v11;
  HIWORD(v29) = v12;
  LOWORD(v30) = v8;
  WORD1(v30) = v13;
  WORD2(v30) = v14;
  HIWORD(v30) = v15;
  LOWORD(v31) = v7;
  HIWORD(v31) = v16;
  _So9NSDecimala__exponent_setter(v28, &v29);
  _So9NSDecimala__length_setter(v26, &v29);
  _So9NSDecimala__isNegative_setter(isNegative_getter, &v29);
  _So9NSDecimala__isCompact_setter_0(isCompact_getter, &v29);
  _So9NSDecimala__reserved_setter(&v29);
}

uint64_t NSDecimal.exponent.getter(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD v4[2];
  int v5;

  v4[0] = a1;
  v4[1] = a2;
  v5 = a3;
  return (int)_So9NSDecimala__exponent_getter((char *)v4);
}

uint64_t NSDecimal.sign.getter(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD v4[2];
  int v5;

  v4[0] = a1;
  v4[1] = a2;
  v5 = a3;
  return _So9NSDecimala__isNegative_getter(v4);
}

unint64_t NSDecimal.ulp.getter(unint64_t a1, unint64_t a2, unsigned int a3)
{
  __int16 v3;
  __int16 v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t result;
  uint64_t v18;
  int v19;
  uint64_t v20;
  __int16 v21;
  __int16 v22;
  unsigned int isCompact_getter;
  unsigned int v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _BYTE v29[20];

  v3 = a3;
  v4 = a2;
  *(_QWORD *)v29 = a1;
  v5 = HIDWORD(a1);
  v6 = a1;
  v7 = HIWORD(a1);
  v8 = a2 >> 16;
  *(_QWORD *)&v29[8] = a2;
  v9 = HIDWORD(a2);
  v10 = HIWORD(a2);
  v11 = HIWORD(a3);
  *(_DWORD *)&v29[16] = a3;
  if (!_So9NSDecimala__length_getter(v29))
  {
    *(_DWORD *)v29 = v6;
    *(_WORD *)&v29[4] = v5;
    *(_WORD *)&v29[6] = v7;
    *(_WORD *)&v29[8] = v4;
    *(_WORD *)&v29[10] = v8;
    *(_WORD *)&v29[12] = v9;
    *(_WORD *)&v29[14] = v10;
    *(_WORD *)&v29[16] = v3;
    *(_WORD *)&v29[18] = v11;
    if (_So9NSDecimala__isNegative_getter(v29))
    {
      *(_OWORD *)&v29[4] = 0uLL;
      _So9NSDecimala__exponent_setter(0, v29);
      _So9NSDecimala__length_setter(0, v29);
      _So9NSDecimala__isNegative_setter(1, v29);
      v16 = 0;
LABEL_20:
      _So9NSDecimala__isCompact_setter_0(v16, v29);
      _So9NSDecimala__reserved_setter(v29);
      return *(unsigned int *)v29 | ((unint64_t)*(unsigned __int16 *)&v29[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v29[6] << 48);
    }
  }
  *(_DWORD *)v29 = v6;
  *(_WORD *)&v29[4] = v5;
  *(_WORD *)&v29[6] = v7;
  *(_WORD *)&v29[8] = v4;
  *(_WORD *)&v29[10] = v8;
  *(_WORD *)&v29[12] = v9;
  *(_WORD *)&v29[14] = v10;
  *(_WORD *)&v29[16] = v3;
  *(_WORD *)&v29[18] = v11;
  if (!_So9NSDecimala__length_getter(v29))
  {
    *(_DWORD *)v29 = v6;
    *(_WORD *)&v29[4] = v5;
    *(_WORD *)&v29[6] = v7;
    *(_WORD *)&v29[8] = v4;
    *(_WORD *)&v29[10] = v8;
    *(_WORD *)&v29[12] = v9;
    *(_WORD *)&v29[14] = v10;
    *(_WORD *)&v29[16] = v3;
    *(_WORD *)&v29[18] = v11;
    if (!_So9NSDecimala__isNegative_getter(v29))
    {
      v18 = 4294967168;
LABEL_19:
      *(_WORD *)&v29[4] = 1;
      *(_QWORD *)&v29[6] = 0;
      *(_QWORD *)&v29[12] = 0;
      _So9NSDecimala__exponent_setter(v18, v29);
      _So9NSDecimala__length_setter(1, v29);
      _So9NSDecimala__isNegative_setter(0, v29);
      v16 = 1;
      goto LABEL_20;
    }
  }
  if (one-time initialization token for _powersOfTenDividingUInt128Max != -1)
    swift_once();
  v22 = v8;
  v20 = *((_QWORD *)_powersOfTenDividingUInt128Max._rawValue + 2);
  if (v20)
  {
    v21 = v3;
    v12 = swift_bridgeObjectRetain();
    v13 = 0;
    v19 = v6;
    v14 = v12 + 50;
    while (1)
    {
      v28 = v13;
      v26 = *(_QWORD *)(v14 - 10);
      v27 = *(_QWORD *)(v14 - 18);
      v25 = *(_DWORD *)(v14 - 2);
      *(_DWORD *)v29 = v6;
      *(_WORD *)&v29[4] = v5;
      *(_WORD *)&v29[6] = v7;
      *(_WORD *)&v29[8] = v4;
      *(_WORD *)&v29[10] = v8;
      *(_WORD *)&v29[12] = v9;
      *(_WORD *)&v29[14] = v10;
      *(_WORD *)&v29[16] = v21;
      *(_WORD *)&v29[18] = v11;
      v24 = _So9NSDecimala__length_getter(v29);
      *(_DWORD *)v29 = v6;
      *(_WORD *)&v29[4] = v5;
      *(_WORD *)&v29[6] = v7;
      *(_WORD *)&v29[8] = v4;
      *(_WORD *)&v29[10] = v8;
      *(_WORD *)&v29[12] = v9;
      *(_WORD *)&v29[14] = v10;
      *(_WORD *)&v29[16] = v21;
      *(_WORD *)&v29[18] = v11;
      isCompact_getter = _So9NSDecimala__isCompact_getter(v29);
      *(_WORD *)&v29[4] = v5;
      *(_WORD *)&v29[6] = v7;
      *(_WORD *)&v29[8] = v4;
      *(_WORD *)&v29[10] = v8;
      *(_WORD *)&v29[12] = v9;
      *(_WORD *)&v29[14] = v10;
      *(_WORD *)&v29[16] = v21;
      *(_WORD *)&v29[18] = v11;
      _So9NSDecimala__exponent_setter(0, v29);
      _So9NSDecimala__length_setter(v24, v29);
      _So9NSDecimala__isNegative_setter(0, v29);
      _So9NSDecimala__isCompact_setter_0(isCompact_getter, v29);
      _So9NSDecimala__reserved_setter(v29);
      if (specialized static NSDecimal._compare(lhs:rhs:)(v27, v26, v25, *(unint64_t *)v29, *(unint64_t *)&v29[8], *(unsigned int *)&v29[16]) == -1)break;
      v14 += 20;
      v13 = v28 + 1;
      v6 = v19;
      if (v20 == v28 + 1)
      {
        swift_bridgeObjectRelease();
        v15 = *((_QWORD *)_powersOfTenDividingUInt128Max._rawValue + 2);
        v3 = v21;
        goto LABEL_15;
      }
    }
    swift_bridgeObjectRelease();
    v3 = v21;
    v6 = v19;
    v15 = v28;
  }
  else
  {
    v15 = 0;
  }
LABEL_15:
  *(_DWORD *)v29 = v6;
  *(_WORD *)&v29[4] = v5;
  *(_WORD *)&v29[6] = v7;
  *(_WORD *)&v29[8] = v4;
  *(_WORD *)&v29[10] = v22;
  *(_WORD *)&v29[12] = v9;
  *(_WORD *)&v29[14] = v10;
  *(_WORD *)&v29[16] = v3;
  *(_WORD *)&v29[18] = v11;
  result = _So9NSDecimala__exponent_getter(v29);
  if (!(v15 >> 31))
  {
    if ((int)result - (int)v15 <= -128)
      v18 = 4294967168;
    else
      v18 = (result - v15);
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

BOOL NSDecimal.isFinite.getter(unint64_t a1, unint64_t a2, unsigned int a3)
{
  __int16 v3;
  __int16 v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;

  v3 = a3;
  v4 = a2;
  v5 = a1;
  v13 = a1;
  v6 = HIDWORD(a1);
  v7 = HIWORD(a1);
  v8 = a2 >> 16;
  v14 = a2;
  v9 = HIDWORD(a2);
  v10 = HIWORD(a2);
  v11 = HIWORD(a3);
  v15 = a3;
  if (_So9NSDecimala__length_getter(&v13))
    return 1;
  LODWORD(v13) = v5;
  WORD2(v13) = v6;
  HIWORD(v13) = v7;
  LOWORD(v14) = v4;
  WORD1(v14) = v8;
  WORD2(v14) = v9;
  HIWORD(v14) = v10;
  LOWORD(v15) = v3;
  HIWORD(v15) = v11;
  return _So9NSDecimala__isNegative_getter(&v13) == 0;
}

uint64_t NSDecimal.floatingPointClass.getter(unint64_t a1, unint64_t a2, unsigned int a3)
{
  __int16 v3;
  __int16 v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;

  v3 = a3;
  v4 = a2;
  v5 = a1;
  v13 = a1;
  v6 = HIDWORD(a1);
  v7 = HIWORD(a1);
  v8 = a2 >> 16;
  v14 = a2;
  v9 = HIDWORD(a2);
  v10 = HIWORD(a2);
  v11 = HIWORD(a3);
  v15 = a3;
  if (!_So9NSDecimala__length_getter(&v13))
  {
    LODWORD(v13) = v5;
    WORD2(v13) = v6;
    HIWORD(v13) = v7;
    LOWORD(v14) = v4;
    WORD1(v14) = v8;
    WORD2(v14) = v9;
    HIWORD(v14) = v10;
    LOWORD(v15) = v3;
    HIWORD(v15) = v11;
    if (_So9NSDecimala__isNegative_getter(&v13))
      return 1;
  }
  LODWORD(v13) = v5;
  WORD2(v13) = v6;
  HIWORD(v13) = v7;
  LOWORD(v14) = v4;
  WORD1(v14) = v8;
  WORD2(v14) = v9;
  HIWORD(v14) = v10;
  LOWORD(v15) = v3;
  HIWORD(v15) = v11;
  if (!_So9NSDecimala__length_getter(&v13))
    return 6;
  LODWORD(v13) = v5;
  WORD2(v13) = v6;
  HIWORD(v13) = v7;
  LOWORD(v14) = v4;
  WORD1(v14) = v8;
  WORD2(v14) = v9;
  HIWORD(v14) = v10;
  LOWORD(v15) = v3;
  HIWORD(v15) = v11;
  if (_So9NSDecimala__isNegative_getter(&v13))
    return 3;
  else
    return 8;
}

uint64_t NSDecimal.isCanonical.getter()
{
  return 1;
}

BOOL NSDecimal.isSignMinus.getter(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD v4[2];
  int v5;

  v4[0] = a1;
  v4[1] = a2;
  v5 = a3;
  return _So9NSDecimala__isNegative_getter(v4) != 0;
}

uint64_t NSDecimal.isNormal.getter(unint64_t a1, unint64_t a2, unsigned int a3)
{
  __int16 v3;
  __int16 v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t result;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;

  v3 = a3;
  v4 = a2;
  v5 = a1;
  v13 = a1;
  v6 = HIDWORD(a1);
  v7 = HIWORD(a1);
  v8 = a2 >> 16;
  v14 = a2;
  v9 = HIDWORD(a2);
  v10 = HIWORD(a2);
  v11 = HIWORD(a3);
  v15 = a3;
  if (_So9NSDecimala__length_getter(&v13))
    goto LABEL_3;
  LODWORD(v13) = v5;
  WORD2(v13) = v6;
  HIWORD(v13) = v7;
  LOWORD(v14) = v4;
  WORD1(v14) = v8;
  WORD2(v14) = v9;
  HIWORD(v14) = v10;
  LOWORD(v15) = v3;
  HIWORD(v15) = v11;
  result = _So9NSDecimala__isNegative_getter(&v13);
  if ((_DWORD)result)
  {
LABEL_3:
    LODWORD(v13) = v5;
    WORD2(v13) = v6;
    HIWORD(v13) = v7;
    LOWORD(v14) = v4;
    WORD1(v14) = v8;
    WORD2(v14) = v9;
    HIWORD(v14) = v10;
    LOWORD(v15) = v3;
    HIWORD(v15) = v11;
    if (_So9NSDecimala__length_getter(&v13))
    {
      return 1;
    }
    else
    {
      LODWORD(v13) = v5;
      WORD2(v13) = v6;
      HIWORD(v13) = v7;
      LOWORD(v14) = v4;
      WORD1(v14) = v8;
      WORD2(v14) = v9;
      HIWORD(v14) = v10;
      LOWORD(v15) = v3;
      HIWORD(v15) = v11;
      return _So9NSDecimala__isNegative_getter(&v13) == 0;
    }
  }
  return result;
}

uint64_t NSDecimal.isInfinite.getter()
{
  return 0;
}

Swift::Void __swiftcall NSDecimal.formTruncatingRemainder(dividingBy:)(NSDecimal *dividingBy)
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

unint64_t NSDecimal.nextUp.getter(unint64_t a1, unint64_t a2, unsigned int a3)
{
  unint64_t v5;
  int v6;
  int v7;
  unint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  __int16 v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  __int16 v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int v27;
  __int128 v28;

  v27 = a1;
  v5 = HIWORD(a1);
  LOWORD(v28) = WORD2(a1);
  WORD1(v28) = HIWORD(a1);
  v6 = WORD2(a1);
  v7 = (unsigned __int16)a2;
  *(_QWORD *)((char *)&v28 + 4) = a2;
  v8 = HIWORD(a2);
  v9 = (unsigned __int16)a3;
  v10 = WORD1(a2);
  v11 = HIWORD(a3);
  HIDWORD(v28) = a3;
  v12 = WORD2(a2);
  if (!_So9NSDecimala__isNegative_getter(&v27))
  {
    v27 = a1;
    LOWORD(v28) = v6;
    WORD1(v28) = v5;
    WORD2(v28) = v7;
    WORD3(v28) = v10;
    WORD4(v28) = v12;
    WORD5(v28) = v8;
    WORD6(v28) = v9;
    HIWORD(v28) = v11;
    v19 = _So9NSDecimala__exponent_getter((char *)&v27);
    v14 = v9;
    v15 = v7;
    v16 = v6;
    if (v19 <= 126
      && v6 == 0xFFFF
      && (_DWORD)v5 == 0xFFFF
      && v15 == 0xFFFF
      && v10 == 0xFFFF
      && v12 == 0xFFFF
      && (_DWORD)v8 == 0xFFFF
      && v14 == 0xFFFF
      && v11 == 0xFFFF)
    {
      v27 = a1;
      *(_QWORD *)&v28 = -1;
      *((_QWORD *)&v28 + 1) = -1;
      v20 = _So9NSDecimala__exponent_getter((char *)&v27);
      LOWORD(v28) = -26214;
      *(_QWORD *)((char *)&v28 + 2) = 0x9999999999999999;
      *(_DWORD *)((char *)&v28 + 10) = -1717986919;
      HIWORD(v28) = 6553;
      _So9NSDecimala__exponent_setter((v20 + 1), &v27);
      _So9NSDecimala__length_setter(8, &v27);
      v18 = 0;
      goto LABEL_22;
    }
LABEL_23:
    v21 = v14;
    v22 = NSDecimal.ulp.getter(a1, a2, a3);
    v27 = a1;
    LOWORD(v28) = v16;
    WORD1(v28) = v5;
    WORD2(v28) = v15;
    WORD3(v28) = v10;
    WORD4(v28) = v12;
    WORD5(v28) = v8;
    WORD6(v28) = v21;
    HIWORD(v28) = v11;
    specialized static NSDecimal.+= infix(_:_:)((int *)&v27, v22, v23, v24);
    return v27 | ((unint64_t)(unsigned __int16)v28 << 32) | ((unint64_t)WORD1(v28) << 48);
  }
  v27 = a1;
  LOWORD(v28) = v6;
  WORD1(v28) = v5;
  WORD2(v28) = v7;
  WORD3(v28) = v10;
  WORD4(v28) = v12;
  WORD5(v28) = v8;
  WORD6(v28) = v9;
  HIWORD(v28) = v11;
  v13 = _So9NSDecimala__exponent_getter((char *)&v27);
  v14 = v9;
  v15 = v7;
  v16 = v6;
  if (v13 < -127
    || v6 != 39322
    || (_DWORD)v5 != 39321
    || v15 != 39321
    || v10 != 39321
    || v12 != 39321
    || (_DWORD)v8 != 39321
    || v14 != 39321
    || v11 != 6553)
  {
    goto LABEL_23;
  }
  v27 = a1;
  LOWORD(v28) = -26214;
  *(_QWORD *)((char *)&v28 + 2) = 0x9999999999999999;
  *(_DWORD *)((char *)&v28 + 10) = -1717986919;
  HIWORD(v28) = 6553;
  v17 = _So9NSDecimala__exponent_getter((char *)&v27);
  *(_QWORD *)&v28 = -1;
  *((_QWORD *)&v28 + 1) = -1;
  _So9NSDecimala__exponent_setter((v17 - 1), &v27);
  _So9NSDecimala__length_setter(8, &v27);
  v18 = 1;
LABEL_22:
  _So9NSDecimala__isNegative_setter(v18, &v27);
  _So9NSDecimala__isCompact_setter_0(1, &v27);
  _So9NSDecimala__reserved_setter(&v27);
  return v27 | ((unint64_t)(unsigned __int16)v28 << 32) | ((unint64_t)WORD1(v28) << 48);
}

uint64_t static NSDecimal.+ infix(_:_:)(uint64_t a1, uint64_t a2, int a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  _QWORD v7[2];
  int v8;

  v7[0] = a1;
  v7[1] = a2;
  v8 = a3;
  specialized static NSDecimal.+= infix(_:_:)((int *)v7, a4, a5, a6);
  return v7[0];
}

unint64_t NSDecimal.nextDown.getter(unint64_t a1, unint64_t a2, unsigned int a3)
{
  __int16 v3;
  __int16 v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  int isNegative_getter;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  __int16 v16;
  unsigned int v17;
  __int16 v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  int v27;
  __int16 v28;
  unsigned int v29;
  __int16 v30;
  __int16 v31;
  __int16 v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  unsigned int v37;
  __int16 v38;
  _BYTE v39[10];
  unsigned int v40;

  v3 = a3;
  v4 = a2;
  v5 = a1;
  v34 = a1;
  v6 = HIDWORD(a1);
  v7 = HIWORD(a1);
  v8 = a2 >> 16;
  v35 = a2;
  v9 = HIDWORD(a2);
  v10 = HIWORD(a2);
  v11 = HIWORD(a3);
  v36 = a3;
  v37 = a1;
  v38 = WORD2(a1);
  *(_DWORD *)v39 = __PAIR32__(a2, HIWORD(a1));
  *(_WORD *)&v39[4] = WORD1(a2);
  *(_WORD *)&v39[6] = WORD2(a2);
  *(_WORD *)&v39[8] = HIWORD(a2);
  v40 = a3;
  if (_So9NSDecimala__length_getter(&v37))
  {
    v37 = v5;
    v38 = v6;
    *(_WORD *)v39 = v7;
    *(_WORD *)&v39[2] = v4;
    *(_WORD *)&v39[4] = v8;
    *(_WORD *)&v39[6] = v9;
    *(_WORD *)&v39[8] = v10;
    LOWORD(v40) = v3;
    HIWORD(v40) = v11;
    isNegative_getter = _So9NSDecimala__isNegative_getter(&v37);
    _So9NSDecimala__isNegative_setter(isNegative_getter ^ 1u, &v34);
    v5 = v34;
    LOWORD(v6) = WORD2(v34);
    v7 = HIWORD(v34);
  }
  v13 = NSDecimal.nextUp.getter(v5 | ((unint64_t)(unsigned __int16)v6 << 32) | (v7 << 48), v35, v36);
  v14 = v13;
  v16 = v15;
  v18 = v17;
  v37 = v13;
  v19 = HIDWORD(v13);
  v38 = WORD2(v13);
  v20 = HIWORD(v13);
  *(_WORD *)v39 = HIWORD(v13);
  v21 = v15 >> 16;
  *(_QWORD *)&v39[2] = v15;
  v22 = HIDWORD(v15);
  v23 = HIWORD(v15);
  v24 = HIWORD(v17);
  v40 = v17;
  v27 = v13;
  v28 = WORD2(v13);
  v29 = __PAIR32__(v15, HIWORD(v13));
  v30 = WORD1(v15);
  v31 = WORD2(v15);
  v32 = HIWORD(v15);
  v33 = v17;
  if (_So9NSDecimala__length_getter(&v27))
  {
    v27 = v14;
    v28 = v19;
    LOWORD(v29) = v20;
    HIWORD(v29) = v16;
    v30 = v21;
    v31 = v22;
    v32 = v23;
    LOWORD(v33) = v18;
    HIWORD(v33) = v24;
    v25 = _So9NSDecimala__isNegative_getter(&v27);
    _So9NSDecimala__isNegative_setter(v25 ^ 1u, &v37);
    v14 = v37;
    LOWORD(v19) = v38;
    v20 = *(unsigned __int16 *)v39;
  }
  return v14 | ((unint64_t)(unsigned __int16)v19 << 32) | (v20 << 48);
}

Swift::Bool __swiftcall NSDecimal.isEqual(to:)(NSDecimal *to)
{
  unint64_t v1;
  unsigned int v2;
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;

  return specialized static NSDecimal.== infix(_:_:)(v3, v4, v5, (unint64_t)to, v1, v2);
}

Swift::Bool __swiftcall NSDecimal.isLess(than:)(NSDecimal *than)
{
  unint64_t v1;
  unsigned int v2;
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;

  return specialized static NSDecimal._compare(lhs:rhs:)(v3, v4, v5, (unint64_t)than, v1, v2) == -1;
}

Swift::Bool __swiftcall NSDecimal.isLessThanOrEqualTo(_:)(NSDecimal *a1)
{
  unint64_t v1;
  unsigned int v2;
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;

  return (unint64_t)(specialized static NSDecimal._compare(lhs:rhs:)(v3, v4, v5, (unint64_t)a1, v1, v2) + 1) < 2;
}

Swift::Bool __swiftcall NSDecimal.isTotallyOrdered(belowOrEqualTo:)(NSDecimal *belowOrEqualTo)
{
  unint64_t v1;
  unsigned int v2;
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;

  v6 = v5;
  v7 = v4;
  v8 = v3;
  v18 = v2;
  v19 = v3;
  v17 = v1;
  v10 = HIDWORD(v3);
  v11 = HIWORD(v3);
  v20 = v4;
  v12 = v4 >> 16;
  v13 = HIDWORD(v4);
  v14 = HIWORD(v4);
  v15 = HIWORD(v5);
  v21 = v5;
  if (!_So9NSDecimala__length_getter(&v19))
  {
    LODWORD(v19) = v8;
    WORD2(v19) = v10;
    HIWORD(v19) = v11;
    LOWORD(v20) = v7;
    WORD1(v20) = v12;
    WORD2(v20) = v13;
    HIWORD(v20) = v14;
    LOWORD(v21) = v6;
    HIWORD(v21) = v15;
    if (_So9NSDecimala__isNegative_getter(&v19))
      return 0;
  }
  if (specialized static NSDecimal._compare(lhs:rhs:)(v8, v7, v6, (unint64_t)belowOrEqualTo, v17, v18) == -1)
    return 1;
  return specialized static NSDecimal._compare(lhs:rhs:)((unint64_t)belowOrEqualTo, v17, v18, v8, v7, v6) != -1;
}

void protocol witness for ExpressibleByFloatLiteral.init(floatLiteral:) in conformance NSDecimal(double *a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  __int16 v4;
  __int16 v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;
  __int16 v9;
  __int16 v10;
  __int16 v11;

  specialized NSDecimal.init(_:)(*a1);
  *(_DWORD *)a2 = v3;
  *(_WORD *)(a2 + 4) = v4;
  *(_WORD *)(a2 + 6) = v5;
  *(_WORD *)(a2 + 8) = v6;
  *(_WORD *)(a2 + 10) = v7;
  *(_WORD *)(a2 + 12) = v8;
  *(_WORD *)(a2 + 14) = v9;
  *(_WORD *)(a2 + 16) = v10;
  *(_WORD *)(a2 + 18) = v11;
}

unint64_t protocol witness for ExpressibleByIntegerLiteral.init(integerLiteral:) in conformance NSDecimal@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t result;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;

  v3 = *a1;
  if (*a1 >= 0)
    v4 = *a1;
  else
    v4 = -v3;
  result = specialized NSDecimal.init(_:)(v4);
  v14 = result;
  v8 = HIDWORD(result);
  v9 = HIWORD(result);
  v10 = v6 >> 16;
  v15 = v6;
  v11 = HIDWORD(v6);
  v12 = HIWORD(v6);
  v13 = HIWORD(v7);
  v16 = v7;
  if (v3 < 0)
  {
    _So9NSDecimala__isNegative_setter(1, &v14);
    result = v14;
    LOWORD(v8) = WORD2(v14);
    LOWORD(v9) = HIWORD(v14);
    LOWORD(v6) = v15;
    LOWORD(v10) = WORD1(v15);
    LOWORD(v11) = WORD2(v15);
    LOWORD(v12) = HIWORD(v15);
    LOWORD(v7) = v16;
    LOWORD(v13) = HIWORD(v16);
  }
  *(_DWORD *)a2 = result;
  *(_WORD *)(a2 + 4) = v8;
  *(_WORD *)(a2 + 6) = v9;
  *(_WORD *)(a2 + 8) = v6;
  *(_WORD *)(a2 + 10) = v10;
  *(_WORD *)(a2 + 12) = v11;
  *(_WORD *)(a2 + 14) = v12;
  *(_WORD *)(a2 + 16) = v7;
  *(_WORD *)(a2 + 18) = v13;
  return result;
}

void NSDecimal.hash(into:)(uint64_t a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  Swift::UInt64 v4;
  Swift::UInt64 v5;

  NSDecimal.doubleValue.getter(a2, a3, a4);
  if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v5 = v4;
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
}

Swift::Int NSDecimal.hashValue.getter(unint64_t a1, unint64_t a2, unsigned int a3)
{
  Swift::UInt64 v6;
  Swift::UInt64 v7;

  Hasher.init(_seed:)();
  NSDecimal.doubleValue.getter(a1, a2, a3);
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v7 = v6;
  else
    v7 = 0;
  Hasher._combine(_:)(v7);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NSDecimal()
{
  uint64_t v0;
  unsigned int v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;

  v1 = *(_DWORD *)(v0 + 16);
  v4 = v0;
  v2 = *(_QWORD *)v0;
  v3 = *(_QWORD *)(v4 + 8);
  Hasher.init(_seed:)();
  NSDecimal.doubleValue.getter(v2, v3, v1);
  if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v6 = v5;
  else
    v6 = 0;
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance NSDecimal()
{
  uint64_t v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;

  NSDecimal.doubleValue.getter(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_DWORD *)(v0 + 16));
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = v1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSDecimal()
{
  uint64_t v0;
  unsigned int v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;

  v1 = *(_DWORD *)(v0 + 16);
  v4 = v0;
  v2 = *(_QWORD *)v0;
  v3 = *(_QWORD *)(v4 + 8);
  Hasher.init(_seed:)();
  NSDecimal.doubleValue.getter(v2, v3, v1);
  if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v6 = v5;
  else
    v6 = 0;
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NSDecimal(uint64_t a1, uint64_t a2)
{
  return specialized static NSDecimal.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_DWORD *)(a2 + 16));
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance NSDecimal(uint64_t a1, uint64_t a2)
{
  return specialized static NSDecimal._compare(lhs:rhs:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_DWORD *)(a2 + 16)) == -1;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance NSDecimal(uint64_t a1, uint64_t a2)
{
  return specialized static NSDecimal._compare(lhs:rhs:)(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_DWORD *)(a2 + 16), *(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 16)) != -1;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance NSDecimal(uint64_t a1, uint64_t a2)
{
  return specialized static NSDecimal._compare(lhs:rhs:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_DWORD *)(a2 + 16)) != -1;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance NSDecimal(uint64_t a1, uint64_t a2)
{
  return specialized static NSDecimal._compare(lhs:rhs:)(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_DWORD *)(a2 + 16), *(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 16)) == -1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NSDecimal.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181AFF6D4 + 4 * byte_18206CECC[*v0]))(0x746E656E6F707865, 0xE800000000000000);
}

uint64_t sub_181AFF6D4()
{
  return 0x6874676E656CLL;
}

uint64_t sub_181AFF6E8()
{
  return 0x69746167654E7369;
}

uint64_t sub_181AFF704()
{
  return 0x6361706D6F437369;
}

uint64_t sub_181AFF720()
{
  return 0x61737369746E616DLL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NSDecimal.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized NSDecimal.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

unint64_t protocol witness for CodingKey.init(intValue:) in conformance NSDecimal.CodingKeys@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized FormatStyleCapitalizationContext.Option.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NSDecimal.CodingKeys()
{
  lazy protocol witness table accessor for type NSDecimal.CodingKeys and conformance NSDecimal.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NSDecimal.CodingKeys()
{
  lazy protocol witness table accessor for type NSDecimal.CodingKeys and conformance NSDecimal.CodingKeys();
  return CodingKey.debugDescription.getter();
}

char *NSDecimal.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  char *result;
  uint64_t v3;

  result = specialized NSDecimal.init(from:)(a1);
  if (v1)
    return (char *)v3;
  return result;
}

uint64_t NSDecimal.encode(to:)(_QWORD *a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unsigned int v13;
  char *v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;
  __int16 v18;
  uint64_t v19;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  __int16 v31;
  __int16 v32;
  __int16 v33;
  __int16 v34;
  __int16 v35;
  __int16 v36;
  __int16 v37;
  __int16 v38;
  uint64_t v39;
  char v40;

  v26 = HIWORD(a2);
  v27 = HIDWORD(a2);
  v25 = HIDWORD(a3);
  v28 = HIWORD(a3);
  v29 = a3 >> 16;
  v8 = HIWORD(a4);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NSDecimal.CodingKeys>);
  v24 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSDecimal.CodingKeys and conformance NSDecimal.CodingKeys();
  v12 = v9;
  v13 = v8;
  v14 = v11;
  v16 = v26;
  v15 = v27;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v21 = a2;
  v22 = a3;
  v30 = a2;
  v31 = v15;
  v32 = v16;
  v33 = a3;
  v34 = v29;
  v17 = v25;
  v35 = v25;
  v18 = v28;
  v36 = v28;
  v37 = a4;
  v38 = v13;
  _So9NSDecimala__exponent_getter((char *)&v30);
  LOBYTE(v30) = 0;
  v19 = v23;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v19)
    return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v14, v12);
  v30 = v21;
  v31 = v15;
  v32 = v16;
  v33 = v22;
  v34 = v29;
  v35 = v17;
  v36 = v18;
  v37 = a4;
  v38 = v13;
  _So9NSDecimala__length_getter(&v30);
  LOBYTE(v30) = 1;
  KeyedEncodingContainer.encode(_:forKey:)();
  v30 = v21;
  v31 = v15;
  v32 = v16;
  v33 = v22;
  v34 = v29;
  v35 = v17;
  v36 = v18;
  v37 = a4;
  v38 = v13;
  _So9NSDecimala__isNegative_getter(&v30);
  LOBYTE(v30) = 2;
  KeyedEncodingContainer.encode(_:forKey:)();
  v30 = v21;
  v31 = v15;
  v32 = v16;
  v33 = v22;
  v34 = v29;
  v35 = v17;
  v36 = v28;
  v37 = a4;
  v38 = v13;
  _So9NSDecimala__isCompact_getter(&v30);
  LOBYTE(v30) = 3;
  KeyedEncodingContainer.encode(_:forKey:)();
  LODWORD(v23) = a4;
  v40 = 4;
  KeyedEncodingContainer.nestedUnkeyedContainer(forKey:)();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v30, v39);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  LODWORD(v27) = v13;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v30, v39);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v30, v39);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v30, v39);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v30, v39);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v30, v39);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v30, v39);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v30, v39);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v14, v12);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v30);
}

char *protocol witness for Decodable.init(from:) in conformance NSDecimal@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char *result;
  uint64_t v5;
  int v6;

  result = specialized NSDecimal.init(from:)(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_DWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NSDecimal(_QWORD *a1)
{
  uint64_t v1;

  return NSDecimal.encode(to:)(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_DWORD *)(v1 + 16));
}

uint64_t NSDecimal.init<A>(exactly:)(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t AssociatedConformanceWitness;
  uint64_t v36;
  void (*v37)(uint64_t, _BYTE *);
  char v39;
  void (*v40)(_BYTE *, uint64_t, _BYTE *);
  _BYTE *v41;
  _BYTE *v42;
  char v43;
  void (*v44)(_BYTE *, _BYTE *);
  uint64_t v45;
  uint64_t v46;
  void (*v47)(_BYTE *, _BYTE *);
  uint64_t v48;
  void *v49;
  void *v50;
  _BYTE *v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  void *v55;
  _BYTE *v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  _BYTE *v61;
  _BYTE *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  _BYTE *v67;
  _BYTE *v68;
  char v69;
  void (*v70)(_BYTE *, uint64_t);
  void (*v71)(_BYTE *, _BYTE *);
  _BYTE *v72;
  _BYTE *v73;
  unint64_t v74;
  unint64_t v75;
  _BYTE *v76;
  unint64_t v77;
  void (*v78)(_BYTE *, uint64_t);
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  __int16 v82;
  __int16 v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(_BYTE *, _BYTE *);
  uint64_t v88;
  _BYTE *v89;
  _BYTE *v90;
  _BYTE *v91;
  char v92;
  _BYTE *v93;
  _BYTE *v94;
  _BYTE *v95;
  _BYTE *v96;
  _BYTE *v97;
  _BYTE *v98;
  char v99;
  _BYTE *v100;
  void (*v101)(_BYTE *, uint64_t);
  _BYTE *v102;
  _BYTE *v103;
  _BYTE *v104;
  char v105;
  void (*v106)(_BYTE *, uint64_t);
  _BYTE *v107;
  _BYTE *v108;
  _BYTE *v109;
  _BYTE *v110;
  _BYTE *v111;
  _BYTE *v112;
  char v113;
  _BYTE *v114;
  _BYTE *v115;
  _BYTE *v116;
  void (*v117)(_BYTE *, uint64_t);
  _BYTE v118[4];
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v123;
  _BYTE *v124;
  uint64_t v125;
  _BYTE *v126;
  _BYTE *v127;
  _BYTE *v128;
  _BYTE *v129;
  void (*v130)(_BYTE *, _BYTE *, _BYTE *);
  _BYTE *v131;
  void (*v132)(_BYTE *, _BYTE *);
  _BYTE *v133;
  _BYTE *v134;
  uint64_t v135;
  _BYTE *v136;
  _BYTE *v137;
  uint64_t v138;
  _BYTE *v139;
  uint64_t v140;
  _BYTE *v141;
  uint64_t v142;
  _BYTE *v143;
  uint64_t v144;
  _BYTE *v145;
  uint64_t v146;
  _BYTE v147[12];
  __int16 v148;
  __int16 v149;
  __int16 v150;
  __int16 v151;

  v144 = a3;
  v137 = a1;
  v4 = *(_QWORD *)(a3 + 24);
  swift_getAssociatedTypeWitness();
  v140 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v138 = swift_checkMetadataState();
  v142 = *(_QWORD *)(v138 - 8);
  MEMORY[0x1E0C80A78](v138);
  v129 = &v118[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7);
  v128 = &v118[-v8];
  MEMORY[0x1E0C80A78](v9);
  v133 = &v118[-v10];
  MEMORY[0x1E0C80A78](v11);
  v13 = &v118[-v12];
  MEMORY[0x1E0C80A78](v14);
  v143 = &v118[-v15];
  v135 = v4;
  v16 = *(_QWORD *)(v4 + 16);
  v17 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v17);
  v19 = &v118[-v18];
  v146 = *((_QWORD *)a2 - 1);
  MEMORY[0x1E0C80A78](v20);
  v126 = &v118[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v22);
  v127 = &v118[-v23];
  MEMORY[0x1E0C80A78](v24);
  v131 = &v118[-v25];
  MEMORY[0x1E0C80A78](v26);
  v136 = &v118[-v27];
  MEMORY[0x1E0C80A78](v28);
  v145 = &v118[-v29];
  MEMORY[0x1E0C80A78](v30);
  v141 = &v118[-v31];
  MEMORY[0x1E0C80A78](v32);
  v34 = &v118[-v33];
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  MEMORY[0x186DA5E34](&unk_18206D478, 256, v17, AssociatedConformanceWitness);
  v124 = v19;
  v125 = v16;
  dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
  v36 = *(_QWORD *)(*(_QWORD *)(v144 + 16) + 8);
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
  {
    v37 = *(void (**)(uint64_t, _BYTE *))(v146 + 8);
    v37((uint64_t)v137, a2);
    v37((uint64_t)v34, a2);
    return 0;
  }
  v120 = AssociatedConformanceWitness;
  v121 = v17;
  v122 = v36;
  v39 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v40 = *(void (**)(_BYTE *, uint64_t, _BYTE *))(v146 + 16);
  v41 = v141;
  v40(v141, (uint64_t)v137, a2);
  v134 = v34;
  v40(v145, (uint64_t)v34, a2);
  v130 = (void (*)(_BYTE *, _BYTE *, _BYTE *))v40;
  if ((v39 & 1) == 0)
  {
    v47 = *(void (**)(_BYTE *, _BYTE *))(v146 + 8);
    v47(v145, a2);
    v132 = v47;
    v47(v41, a2);
    goto LABEL_7;
  }
  v42 = v145;
  v43 = dispatch thunk of static Comparable.< infix(_:_:)();
  v44 = *(void (**)(_BYTE *, _BYTE *))(v146 + 8);
  v44(v42, a2);
  v132 = v44;
  v44(v41, a2);
  if ((v43 & 1) == 0)
  {
LABEL_7:
    v46 = v142;
    v45 = v138;
    v123 = 0;
    goto LABEL_8;
  }
  v123 = 1;
  v45 = v138;
  v46 = v142;
LABEL_8:
  v141 = a2;
  dispatch thunk of Numeric.magnitude.getter();
  v48 = swift_getAssociatedConformanceWitness();
  LODWORD(v146) = 0;
  v49 = &unk_18206D480;
  v138 = v48;
  v139 = v13;
  while (1)
  {
    v50 = v49;
    MEMORY[0x186DA5E34]();
    dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
    v51 = v13;
    v52 = swift_getAssociatedConformanceWitness();
    v53 = dispatch thunk of BinaryInteger.isMultiple(of:)();
    v54 = v45;
    v145 = *(_BYTE **)(v46 + 8);
    ((void (*)(_BYTE *, uint64_t))v145)(v51, v45);
    if ((v53 & 1) == 0 || v146 > 0x7E)
      break;
    LODWORD(v146) = v146 + 1;
    v55 = v50;
    MEMORY[0x186DA5E34](v50, 1280, AssociatedTypeWitness, v138);
    v56 = v139;
    dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
    v13 = v56;
    dispatch thunk of static BinaryInteger./= infix(_:_:)();
    ((void (*)(_BYTE *, uint64_t))v145)(v56, v45);
    v49 = v55;
    v46 = v142;
  }
  v57 = v143;
  v58 = v45;
  v59 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v60 = v136;
  v61 = v141;
  v130(v136, v134, v141);
  if (v59 < 129)
  {
    v132(v60, v61);
    goto LABEL_19;
  }
  *(_QWORD *)v147 = 128;
  lazy protocol witness table accessor for type Int and conformance Int();
  v62 = v133;
  dispatch thunk of static BinaryInteger.>> infix<A>(_:_:)();
  v63 = dispatch thunk of static BinaryInteger.isSigned.getter();
  if (((v63 ^ dispatch thunk of static BinaryInteger.isSigned.getter()) & 1) == 0)
  {
    v88 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v89 = v62;
    v90 = v136;
    v45 = v58;
    if (v88 >= dispatch thunk of BinaryInteger.bitWidth.getter())
    {
      v130(v131, v90, v61);
      v100 = v139;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      swift_getAssociatedConformanceWitness();
      v92 = dispatch thunk of static Equatable.== infix(_:_:)();
      v101 = (void (*)(_BYTE *, uint64_t))v145;
      ((void (*)(_BYTE *, uint64_t))v145)(v100, v58);
      v101(v89, v58);
      v93 = v90;
      v94 = v61;
      v71 = v132;
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v142 + 16))(v139, v89, v58);
      v91 = v131;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      v92 = dispatch thunk of static Equatable.== infix(_:_:)();
      v71 = v132;
      v132(v91, v61);
      ((void (*)(_BYTE *, uint64_t))v145)(v89, v58);
      v93 = v90;
      v94 = v61;
    }
    v71(v93, v94);
    v57 = v143;
    v72 = v134;
    if ((v92 & 1) == 0)
      goto LABEL_45;
    goto LABEL_19;
  }
  v119 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v64 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v65 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v119 & 1) == 0)
  {
    v72 = v134;
    if (v64 < v65)
    {
      v95 = v133;
      v45 = v54;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v142 + 16))(v139, v133, v54);
      v96 = v131;
      v97 = v141;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      v98 = v136;
      v99 = dispatch thunk of static Equatable.== infix(_:_:)();
      v71 = v132;
      v132(v96, v97);
      ((void (*)(_BYTE *, uint64_t))v145)(v95, v45);
      v61 = v97;
      v71(v98, v97);
      v57 = v143;
      if ((v99 & 1) == 0)
        goto LABEL_45;
      goto LABEL_19;
    }
    MEMORY[0x186DA5E34](&unk_18206D478, 256);
    v112 = v131;
    v103 = v141;
    dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
    v109 = v136;
    v113 = dispatch thunk of static Comparable.>= infix(_:_:)();
    v71 = v132;
    v132(v112, v103);
    v114 = v129;
    v45 = v54;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v142 + 16))(v129, v133, v54);
    v115 = v126;
    v130(v126, v109, v103);
    v106 = (void (*)(_BYTE *, uint64_t))v145;
    if ((v113 & 1) != 0)
    {
      v116 = v139;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      swift_getAssociatedConformanceWitness();
      LODWORD(v144) = dispatch thunk of static Equatable.== infix(_:_:)();
      v106(v116, v45);
      v106(v114, v45);
      v111 = v133;
LABEL_41:
      v106(v111, v45);
      v71(v109, v103);
      v61 = v103;
      v57 = v143;
      v72 = v134;
      if ((v144 & 1) == 0)
        goto LABEL_45;
      goto LABEL_19;
    }
LABEL_44:
    v117 = v106;
    v61 = v103;
    v71(v115, v103);
    v117(v114, v45);
    v117(v133, v45);
    v71(v136, v103);
    v57 = v143;
    v72 = v134;
LABEL_45:
    v71(v137, v61);
    ((void (*)(_BYTE *, uint64_t))v145)(v57, v45);
    v71(v72, v61);
    return 0;
  }
  if (v65 >= v64)
  {
    v129 = (_BYTE *)v52;
    MEMORY[0x186DA5E34](&unk_18206D478, 256, AssociatedTypeWitness, v138);
    v102 = v139;
    v45 = v54;
    dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
    v103 = v141;
    swift_getAssociatedConformanceWitness();
    v104 = v133;
    v105 = dispatch thunk of static Comparable.>= infix(_:_:)();
    v106 = (void (*)(_BYTE *, uint64_t))v145;
    ((void (*)(_BYTE *, uint64_t))v145)(v102, v54);
    v107 = v128;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v142 + 16))(v128, v104, v54);
    v108 = v127;
    v109 = v136;
    v130(v127, v136, v103);
    v71 = v132;
    if ((v105 & 1) != 0)
    {
      v110 = v131;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      LODWORD(v144) = dispatch thunk of static Equatable.== infix(_:_:)();
      v71(v110, v103);
      v71(v108, v103);
      v111 = v104;
      goto LABEL_41;
    }
    v115 = v108;
    v114 = v107;
    goto LABEL_44;
  }
  v66 = v136;
  v61 = v141;
  v130(v131, v136, v141);
  v67 = v139;
  v45 = v54;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  swift_getAssociatedConformanceWitness();
  v68 = v133;
  v69 = dispatch thunk of static Equatable.== infix(_:_:)();
  v70 = (void (*)(_BYTE *, uint64_t))v145;
  ((void (*)(_BYTE *, uint64_t))v145)(v67, v54);
  v70(v68, v54);
  v71 = v132;
  v132(v66, v61);
  v57 = v143;
  v72 = v134;
  if ((v69 & 1) == 0)
    goto LABEL_45;
LABEL_19:
  v73 = v57;
  v74 = dispatch thunk of BinaryInteger._lowWord.getter();
  v75 = (79 - __clz(v74)) >> 4;
  if (dispatch thunk of BinaryInteger.bitWidth.getter() < 65)
  {
    v82 = 0;
    LOWORD(v81) = 0;
    LOWORD(v80) = 0;
    v83 = 0;
    v84 = v137;
    v85 = v123;
    v86 = v146;
    v78 = (void (*)(_BYTE *, uint64_t))v145;
  }
  else
  {
    *(_QWORD *)v147 = 64;
    lazy protocol witness table accessor for type Int and conformance Int();
    v76 = v139;
    dispatch thunk of static BinaryInteger.>> infix<A>(_:_:)();
    v77 = dispatch thunk of BinaryInteger._lowWord.getter();
    v78 = (void (*)(_BYTE *, uint64_t))v145;
    ((void (*)(_BYTE *, uint64_t))v145)(v76, v45);
    v79 = ((79 - __clz(v77)) >> 4) + 4;
    v80 = v77 >> 16;
    v81 = HIDWORD(v77);
    if (v77)
    {
      v75 = v79;
      v82 = HIWORD(v77);
    }
    else
    {
      v82 = 0;
    }
    if (v77)
    {
      v83 = v77;
    }
    else
    {
      LOWORD(v81) = 0;
      LOWORD(v80) = 0;
      v83 = 0;
    }
    v84 = v137;
    v85 = v123;
    v86 = v146;
  }
  *(_QWORD *)&v147[4] = v74;
  v148 = v83;
  v149 = v80;
  v150 = v81;
  v151 = v82;
  _So9NSDecimala__exponent_setter(v86, v147);
  _So9NSDecimala__length_setter(v75, v147);
  _So9NSDecimala__isNegative_setter(v85, v147);
  _So9NSDecimala__isCompact_setter_0(1, v147);
  _So9NSDecimala__reserved_setter(v147);
  v87 = v132;
  v132(v84, v61);
  v78(v73, v45);
  v87(v134, v61);
  return *(_QWORD *)v147;
}

uint64_t static NSDecimal.zero.getter()
{
  return 0;
}

uint64_t static NSDecimal./= infix(_:_:)(uint64_t a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  uint64_t result;
  __int16 v6;
  __int16 v7;
  __int16 v8;
  __int16 v9;
  __int16 v10;
  __int16 v11;

  result = specialized NSDecimal._divide(by:roundingMode:)(a2, a3, a4, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 16));
  *(_QWORD *)a1 = result;
  *(_WORD *)(a1 + 8) = v6;
  *(_WORD *)(a1 + 10) = v7;
  *(_WORD *)(a1 + 12) = v8;
  *(_WORD *)(a1 + 14) = v9;
  *(_WORD *)(a1 + 16) = v10;
  *(_WORD *)(a1 + 18) = v11;
  return result;
}

unint64_t static NSDecimal./ infix(_:_:)(unint64_t a1, unint64_t a2, unsigned int a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  unint64_t v6;

  v6 = specialized NSDecimal._divide(by:roundingMode:)(a4, a5, a6, a1, a2, a3);
  return v6 | ((unint64_t)WORD2(v6) << 32) | (HIWORD(v6) << 48);
}

uint64_t protocol witness for static SignedNumeric.- prefix(_:) in conformance NSDecimal@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  __int16 v4;
  __int16 v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;
  __int16 v9;
  __int16 v10;
  __int16 v11;
  uint64_t result;
  int isNegative_getter;
  int v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;
  __int16 v18;
  __int16 v19;
  __int16 v20;
  __int16 v21;
  __int16 v22;

  v3 = *a1;
  v4 = *((_WORD *)a1 + 2);
  v5 = *((_WORD *)a1 + 3);
  v6 = *((_WORD *)a1 + 4);
  v7 = *((_WORD *)a1 + 5);
  v8 = *((_WORD *)a1 + 6);
  v9 = *((_WORD *)a1 + 7);
  v10 = *((_WORD *)a1 + 8);
  v11 = *((_WORD *)a1 + 9);
  *(_DWORD *)a2 = *a1;
  *(_WORD *)(a2 + 4) = v4;
  *(_WORD *)(a2 + 6) = v5;
  *(_WORD *)(a2 + 8) = v6;
  *(_WORD *)(a2 + 10) = v7;
  *(_WORD *)(a2 + 12) = v8;
  *(_WORD *)(a2 + 14) = v9;
  *(_WORD *)(a2 + 16) = v10;
  *(_WORD *)(a2 + 18) = v11;
  v14 = v3;
  v15 = v4;
  v16 = v5;
  v17 = v6;
  v18 = v7;
  v19 = v8;
  v20 = v9;
  v21 = v10;
  v22 = v11;
  result = _So9NSDecimala__length_getter(&v14);
  if ((_DWORD)result)
  {
    v14 = v3;
    v15 = v4;
    v16 = v5;
    v17 = v6;
    v18 = v7;
    v19 = v8;
    v20 = v9;
    v21 = v10;
    v22 = v11;
    isNegative_getter = _So9NSDecimala__isNegative_getter(&v14);
    return _So9NSDecimala__isNegative_setter(isNegative_getter ^ 1u, (_DWORD *)a2);
  }
  return result;
}

uint64_t protocol witness for SignedNumeric.negate() in conformance NSDecimal()
{
  int *v0;
  int v1;
  __int16 v2;
  __int16 v3;
  __int16 v4;
  __int16 v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;
  __int16 v9;
  uint64_t result;
  int isNegative_getter;
  int v12;
  __int16 v13;
  __int16 v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;
  __int16 v18;
  __int16 v19;
  __int16 v20;

  v1 = *v0;
  v2 = *((_WORD *)v0 + 2);
  v3 = *((_WORD *)v0 + 3);
  v4 = *((_WORD *)v0 + 4);
  v5 = *((_WORD *)v0 + 5);
  v6 = *((_WORD *)v0 + 6);
  v7 = *((_WORD *)v0 + 7);
  v8 = *((_WORD *)v0 + 8);
  v9 = *((_WORD *)v0 + 9);
  v12 = *v0;
  v13 = v2;
  v14 = v3;
  v15 = v4;
  v16 = v5;
  v17 = v6;
  v18 = v7;
  v19 = v8;
  v20 = v9;
  result = _So9NSDecimala__length_getter(&v12);
  if ((_DWORD)result)
  {
    v12 = v1;
    v13 = v2;
    v14 = v3;
    v15 = v4;
    v16 = v5;
    v17 = v6;
    v18 = v7;
    v19 = v8;
    v20 = v9;
    isNegative_getter = _So9NSDecimala__isNegative_getter(&v12);
    return _So9NSDecimala__isNegative_setter(isNegative_getter ^ 1u, v0);
  }
  return result;
}

uint64_t protocol witness for Numeric.init<A>(exactly:) in conformance NSDecimal@<X0>(_BYTE *a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t v6;
  int v7;
  char v8;

  result = NSDecimal.init<A>(exactly:)(a1, a2, a3);
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v6;
  *(_DWORD *)(a4 + 16) = v7;
  *(_BYTE *)(a4 + 20) = v8 & 1;
  return result;
}

unint64_t protocol witness for Numeric.magnitude.getter in conformance NSDecimal@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unint64_t result;
  __int16 v4;
  __int16 v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;
  __int16 v9;

  result = NSDecimal.magnitude.getter(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_DWORD *)(v1 + 16));
  *(_QWORD *)a1 = result;
  *(_WORD *)(a1 + 8) = v4;
  *(_WORD *)(a1 + 10) = v5;
  *(_WORD *)(a1 + 12) = v6;
  *(_WORD *)(a1 + 14) = v7;
  *(_WORD *)(a1 + 16) = v8;
  *(_WORD *)(a1 + 18) = v9;
  return result;
}

uint64_t protocol witness for static Numeric.* infix(_:_:) in conformance NSDecimal@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return protocol witness for static Numeric.* infix(_:_:) in conformance NSDecimal(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))specialized static NSDecimal.* infix(_:_:), a3);
}

uint64_t protocol witness for static Numeric.*= infix(_:_:) in conformance NSDecimal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Numeric.*= infix(_:_:) in conformance NSDecimal(a1, a2, a3, a4, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD))specialized static NSDecimal.*= infix(_:_:));
}

void protocol witness for static AdditiveArithmetic.zero.getter in conformance NSDecimal(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
}

__n128 protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance NSDecimal@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  int v9;
  __n128 v10;

  v4 = *(_DWORD *)(a2 + 16);
  v5 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v9 = *(_DWORD *)a1;
  v10 = *(__n128 *)(a1 + 4);
  specialized static NSDecimal.+= infix(_:_:)(&v9, v5, v6, v4);
  result = v10;
  *(_DWORD *)a3 = v9;
  *(__n128 *)(a3 + 4) = result;
  return result;
}

uint64_t protocol witness for static AdditiveArithmetic.+= infix(_:_:) in conformance NSDecimal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Numeric.*= infix(_:_:) in conformance NSDecimal(a1, a2, a3, a4, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD))specialized static NSDecimal.+= infix(_:_:));
}

uint64_t protocol witness for static AdditiveArithmetic.- infix(_:_:) in conformance NSDecimal@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return protocol witness for static Numeric.* infix(_:_:) in conformance NSDecimal(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))specialized static NSDecimal.- infix(_:_:), a3);
}

uint64_t protocol witness for static Numeric.* infix(_:_:) in conformance NSDecimal@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD)@<X4>, uint64_t a4@<X8>)
{
  uint64_t result;
  __int16 v6;
  __int16 v7;
  __int16 v8;
  __int16 v9;
  __int16 v10;
  __int16 v11;

  result = a3(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned int *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(unsigned int *)(a2 + 16));
  *(_QWORD *)a4 = result;
  *(_WORD *)(a4 + 8) = v6;
  *(_WORD *)(a4 + 10) = v7;
  *(_WORD *)(a4 + 12) = v8;
  *(_WORD *)(a4 + 14) = v9;
  *(_WORD *)(a4 + 16) = v10;
  *(_WORD *)(a4 + 18) = v11;
  return result;
}

uint64_t protocol witness for static AdditiveArithmetic.-= infix(_:_:) in conformance NSDecimal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Numeric.*= infix(_:_:) in conformance NSDecimal(a1, a2, a3, a4, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD))specialized static NSDecimal.-= infix(_:_:));
}

uint64_t protocol witness for static Numeric.*= infix(_:_:) in conformance NSDecimal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, _QWORD, _QWORD, _QWORD))
{
  return a5(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(unsigned int *)(a2 + 16));
}

void __swiftcall NSDecimal.distance(to:)(NSDecimal *__return_ptr retstr, NSDecimal *to)
{
  unint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  __int16 v7;
  __int16 v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int isNegative_getter;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  Swift::OpaquePointer v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  __int16 v41;
  __int16 v42;
  __int16 v43;
  __int16 v44;
  __int16 v45;
  __int16 v46;
  __int16 v47;
  int v48;
  void *v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  _WORD *v60;
  Swift::OpaquePointer v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unsigned int v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  unsigned int v84;
  unint64_t v86;
  _BYTE *v87;
  int v88;
  int v89;
  unint64_t v90;
  unsigned int v91;
  unint64_t v93;
  uint64_t v94;
  void *v95;
  _BYTE *v96;
  __int16 v97;
  unint64_t v98;
  unsigned int v99;
  unint64_t v100;
  unint64_t v101;
  unsigned int v102;
  unint64_t v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  __int16 v107;
  uint64_t v108;
  unint64_t v109;
  int v110;
  unint64_t v111;
  int v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  __int16 v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  __int16 v123;
  uint64_t v124;
  unint64_t v125;
  unsigned int v126;
  uint64_t v127;
  unint64_t v128;
  unsigned int v129;
  uint64_t v130;
  unint64_t v131;
  unsigned int v132;
  uint64_t v133;
  unint64_t v134;
  unsigned int v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;

  v7 = v6;
  v8 = v5;
  v9 = v4;
  v105 = v3;
  v139 = *MEMORY[0x1E0C80C00];
  v136 = v4;
  v10 = HIDWORD(v4);
  LOWORD(v137) = WORD2(v4);
  v11 = HIWORD(v4);
  WORD1(v137) = HIWORD(v4);
  HIDWORD(v137) = v5;
  v12 = v5 >> 16;
  v109 = (unint64_t)to >> 32;
  v111 = (unint64_t)to >> 48;
  v13 = HIDWORD(v5);
  LOWORD(v138) = WORD2(v5);
  v121 = (int)to;
  v14 = HIWORD(v5);
  WORD1(v138) = HIWORD(v5);
  HIDWORD(v138) = v6;
  v15 = HIWORD(v6);
  v113 = v2 >> 16;
  v115 = HIDWORD(v2);
  v133 = v4;
  v117 = HIWORD(v2);
  v134 = v5;
  v135 = v6;
  v119 = v2;
  if (_So9NSDecimala__length_getter(&v133))
  {
    LODWORD(v133) = v9;
    WORD2(v133) = v10;
    HIWORD(v133) = v11;
    LOWORD(v134) = v8;
    WORD1(v134) = v12;
    WORD2(v134) = v13;
    HIWORD(v134) = v14;
    LOWORD(v135) = v7;
    HIWORD(v135) = v15;
    isNegative_getter = _So9NSDecimala__isNegative_getter(&v133);
    _So9NSDecimala__isNegative_setter(isNegative_getter ^ 1u, &v136);
    v9 = v136;
    LOWORD(v10) = v137;
    LOWORD(v11) = WORD1(v137);
    v8 = WORD2(v137);
    LOWORD(v12) = HIWORD(v137);
    LOWORD(v13) = v138;
    LOWORD(v14) = WORD1(v138);
    v7 = WORD2(v138);
    v107 = HIWORD(v138);
  }
  else
  {
    v107 = v15;
  }
  LODWORD(v133) = v121;
  WORD2(v133) = v109;
  HIWORD(v133) = v111;
  LOWORD(v134) = v119;
  WORD1(v134) = v113;
  WORD2(v134) = v115;
  HIWORD(v134) = v117;
  v135 = v105;
  if (!_So9NSDecimala__length_getter(&v133))
  {
    LODWORD(v133) = v121;
    WORD2(v133) = v109;
    HIWORD(v133) = v111;
    LOWORD(v134) = v119;
    WORD1(v134) = v113;
    WORD2(v134) = v115;
    HIWORD(v134) = v117;
    v135 = v105;
    if (_So9NSDecimala__isNegative_getter(&v133))
      goto LABEL_20;
  }
  LODWORD(v133) = v9;
  WORD2(v133) = v10;
  HIWORD(v133) = v11;
  LOWORD(v134) = v8;
  WORD1(v134) = v12;
  WORD2(v134) = v13;
  HIWORD(v134) = v14;
  LOWORD(v135) = v7;
  HIWORD(v135) = v107;
  if (!_So9NSDecimala__length_getter(&v133))
  {
    LODWORD(v133) = v9;
    WORD2(v133) = v10;
    HIWORD(v133) = v11;
    LOWORD(v134) = v8;
    WORD1(v134) = v12;
    WORD2(v134) = v13;
    HIWORD(v134) = v14;
    LOWORD(v135) = v7;
    HIWORD(v135) = v107;
    if (_So9NSDecimala__isNegative_getter(&v133))
      goto LABEL_20;
  }
  LODWORD(v133) = v121;
  WORD2(v133) = v109;
  HIWORD(v133) = v111;
  LOWORD(v134) = v119;
  WORD1(v134) = v113;
  WORD2(v134) = v115;
  HIWORD(v134) = v117;
  v135 = v105;
  if (!_So9NSDecimala__length_getter(&v133))
    return;
  LODWORD(v133) = v9;
  WORD2(v133) = v10;
  HIWORD(v133) = v11;
  LOWORD(v134) = v8;
  WORD1(v134) = v12;
  WORD2(v134) = v13;
  HIWORD(v134) = v14;
  LOWORD(v135) = v7;
  HIWORD(v135) = v107;
  if (!_So9NSDecimala__length_getter(&v133))
    return;
  LODWORD(v133) = v121;
  WORD2(v133) = v109;
  HIWORD(v133) = v111;
  LOWORD(v134) = v119;
  WORD1(v134) = v113;
  WORD2(v134) = v115;
  HIWORD(v134) = v117;
  v135 = v105;
  LODWORD(v130) = v9;
  WORD2(v130) = v10;
  HIWORD(v130) = v11;
  LOWORD(v131) = v8;
  WORD1(v131) = v12;
  WORD2(v131) = v13;
  HIWORD(v131) = v14;
  LOWORD(v132) = v7;
  HIWORD(v132) = v107;
  specialized static NSDecimal._normalize(a:b:roundingMode:)((int *)&v133, (uint64_t)&v130);
  v17 = WORD2(v133);
  v18 = HIWORD(v133);
  v108 = v133;
  v127 = v133;
  v118 = WORD1(v134);
  v120 = (unsigned __int16)v134;
  v128 = v134;
  v114 = HIWORD(v134);
  v116 = WORD2(v134);
  v112 = (unsigned __int16)v135;
  v129 = v135;
  v110 = HIWORD(v135);
  v19 = _So9NSDecimala__length_getter(&v127);
  v20 = HIWORD(v130);
  v21 = (unsigned __int16)v131;
  v22 = WORD1(v131);
  v23 = WORD2(v131);
  v24 = HIWORD(v131);
  v25 = (unsigned __int16)v132;
  v26 = HIWORD(v132);
  if (!v19)
    return;
  v122 = v130;
  v127 = v130;
  v128 = v131;
  v129 = v132;
  v106 = WORD2(v130);
  if (!_So9NSDecimala__length_getter(&v127))
    return;
  LODWORD(v127) = v108;
  WORD2(v127) = v17;
  HIWORD(v127) = v18;
  LOWORD(v128) = v120;
  WORD1(v128) = v118;
  WORD2(v128) = v116;
  HIWORD(v128) = v114;
  LOWORD(v129) = v112;
  HIWORD(v129) = v110;
  LODWORD(v124) = v108;
  WORD2(v124) = v17;
  HIWORD(v124) = v18;
  v125 = __PAIR64__(__PAIR32__(v114, v116), __PAIR32__(v118, v120));
  LOWORD(v126) = v112;
  HIWORD(v126) = v110;
  v104 = v18;
  v27 = v17;
  v28 = _So9NSDecimala__isNegative_getter(&v124);
  LODWORD(v124) = v122;
  WORD2(v124) = v106;
  HIWORD(v124) = v20;
  LOWORD(v125) = v21;
  WORD1(v125) = v22;
  WORD2(v125) = v23;
  HIWORD(v125) = v24;
  LOWORD(v126) = v25;
  HIWORD(v126) = v26;
  if (v28 == _So9NSDecimala__isNegative_getter(&v124))
  {
    LODWORD(v124) = v108;
    WORD2(v124) = v27;
    HIWORD(v124) = v104;
    LOWORD(v125) = v120;
    WORD1(v125) = v118;
    WORD2(v125) = v116;
    HIWORD(v125) = v114;
    LOWORD(v126) = v112;
    HIWORD(v126) = v110;
    v29 = _So9NSDecimala__isNegative_getter(&v124);
    _So9NSDecimala__isNegative_setter(v29, &v127);
    NSDecimal.asVariableLengthInteger()(v108 | (v27 << 32) | (v104 << 48), v120 | (v118 << 16) | (v116 << 32) | (v114 << 48), v112 | (v110 << 16));
    v31 = v30;
    NSDecimal.asVariableLengthInteger()(v122 | (v106 << 32) | (v20 << 48), v21 | (v22 << 16) | (v23 << 32) | (v24 << 48), v25 | (v26 << 16));
    v34 = specialized static NSDecimal._integerAdd(lhs:rhs:maxResultLength:)(v31, v32, 9, v33);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v35 = *(_QWORD *)(v34 + 16);
    if (v35 <= 8)
    {
      v37._rawValue = (void *)v34;
LABEL_29:
      _So9NSDecimala__length_setter(v35, &v127);
      NSDecimal.copyVariableLengthInteger(_:)(v37);
      v49 = v54;
      swift_bridgeObjectRelease();
      if (v54)
        goto LABEL_21;
      goto LABEL_146;
    }
    specialized static NSDecimal._fitMantissa(_:roundingMode:)(v34, 0);
    v37._rawValue = v36;
    v39 = v38;
    swift_bridgeObjectRelease();
    v40 = v127;
    v41 = WORD2(v127);
    v42 = HIWORD(v127);
    v43 = v128;
    v44 = WORD1(v128);
    v45 = WORD2(v128);
    v46 = HIWORD(v128);
    v47 = v129;
    v124 = v127;
    v125 = v128;
    v126 = v129;
    v123 = HIWORD(v129);
    v48 = _So9NSDecimala__exponent_getter((char *)&v124);
    if (v39 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (v39 <= 0x7FFFFFFF)
      {
        if (!__OFADD__(v48, (_DWORD)v39))
        {
          if (v48 + (int)v39 > 127)
          {
            swift_bridgeObjectRelease();
LABEL_20:
            lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
            v49 = (void *)swift_allocError();
            *v50 = 0;
            swift_willThrow();
            goto LABEL_21;
          }
          LODWORD(v124) = v40;
          WORD2(v124) = v41;
          HIWORD(v124) = v42;
          LOWORD(v125) = v43;
          WORD1(v125) = v44;
          WORD2(v125) = v45;
          HIWORD(v125) = v46;
          LOWORD(v126) = v47;
          HIWORD(v126) = v123;
          v77 = _So9NSDecimala__exponent_getter((char *)&v124);
          v78 = __OFADD__(v77, (_DWORD)v39);
          v79 = (v77 + v39);
          if (!v78)
          {
            _So9NSDecimala__exponent_setter(v79, &v127);
            v35 = *((_QWORD *)v37._rawValue + 2);
            if (HIDWORD(v35))
              goto LABEL_160;
            goto LABEL_29;
          }
          __break(1u);
          goto LABEL_158;
        }
LABEL_154:
        __break(1u);
LABEL_155:
        __break(1u);
LABEL_156:
        __break(1u);
      }
LABEL_153:
      __break(1u);
      goto LABEL_154;
    }
LABEL_152:
    __break(1u);
    goto LABEL_153;
  }
  v97 = v27;
  v98 = v108 | (v27 << 32) | (v104 << 48);
  v103 = v120 | (v118 << 16) | (v116 << 32) | (v114 << 48);
  v102 = v112 | (v110 << 16);
  NSDecimal.asVariableLengthInteger()(v98, v103, v102);
  v52 = v51;
  v100 = v21 | (v22 << 16) | (v23 << 32) | (v24 << 48);
  v101 = v122 | (v106 << 32) | (v20 << 48);
  v99 = v25 | (v26 << 16);
  NSDecimal.asVariableLengthInteger()(v101, v100, v99);
  v39 = specialized static NSDecimal._integerCompare(lhs:rhs:)(v52, v53);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v39 == -1)
  {
    NSDecimal.asVariableLengthInteger()(v101, v100, v99);
    v56 = v55;
    NSDecimal.asVariableLengthInteger()(v98, v103, v102);
    v39 = v57;
    v58 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v58 + 32) = 0;
    v60 = (_WORD *)(v58 + 32);
    *(_QWORD *)(v58 + 16) = 8;
    v61._rawValue = (void *)v58;
    *(_QWORD *)(v58 + 40) = 0;
    v62 = *(_QWORD *)(v56 + 16);
    v63 = *(_QWORD *)(v39 + 16);
    if (v63 >= v62)
      v64 = *(_QWORD *)(v56 + 16);
    else
      v64 = *(_QWORD *)(v39 + 16);
    if (v64)
    {
      v65 = (*(unsigned __int16 *)(v56 + 32) | 0x10000) - *(unsigned __int16 *)(v39 + 32);
      v66 = HIWORD(v65);
      *v60 = *(_WORD *)(v56 + 32) - *(_WORD *)(v39 + 32);
      v67 = v64 - 1;
      if (v67)
      {
        v65 = v66 + *(unsigned __int16 *)(v56 + 34) - *(unsigned __int16 *)(v39 + 34) + 0xFFFF;
        v66 = HIWORD(v65);
        *(_WORD *)(v58 + 34) = v65;
        if (v67 == 1)
        {
          v68 = 2;
        }
        else
        {
          v59 = *(unsigned __int16 *)(v39 + 36);
          v65 = v66 + *(unsigned __int16 *)(v56 + 36) - v59 + 0xFFFF;
          v66 = HIWORD(v65);
          *(_WORD *)(v58 + 36) = v65;
          if (v67 == 2)
          {
            v68 = 3;
          }
          else
          {
            v65 = v66 + *(unsigned __int16 *)(v56 + 38) - *(unsigned __int16 *)(v39 + 38) + 0xFFFF;
            v66 = HIWORD(v65);
            *(_WORD *)(v58 + 38) = v65;
            if (v67 == 3)
            {
              v68 = 4;
            }
            else
            {
              v59 = *(unsigned __int16 *)(v39 + 40);
              v65 = v66 + *(unsigned __int16 *)(v56 + 40) - v59 + 0xFFFF;
              v66 = HIWORD(v65);
              *(_WORD *)(v58 + 40) = v65;
              if (v67 == 4)
              {
                v68 = 5;
              }
              else
              {
                v65 = v66 + *(unsigned __int16 *)(v56 + 42) - *(unsigned __int16 *)(v39 + 42) + 0xFFFF;
                v66 = HIWORD(v65);
                *(_WORD *)(v58 + 42) = v65;
                if (v67 == 5)
                {
                  v68 = 6;
                }
                else
                {
                  v59 = *(unsigned __int16 *)(v39 + 44);
                  v65 = v66 + *(unsigned __int16 *)(v56 + 44) - v59 + 0xFFFF;
                  v66 = HIWORD(v65);
                  *(_WORD *)(v58 + 44) = v65;
                  if (v67 == 6)
                  {
                    v68 = 7;
                  }
                  else
                  {
                    v82 = v66 + *(unsigned __int16 *)(v56 + 46) - *(unsigned __int16 *)(v39 + 46);
                    v65 = v82 + 0xFFFF;
                    *(_WORD *)(v58 + 46) = v82 - 1;
                    if (v67 != 7)
                    {
LABEL_158:
                      __break(1u);
                      goto LABEL_159;
                    }
                    v59 = v56;
                    v66 = HIWORD(v65);
                    v68 = 8;
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        v68 = 1;
      }
      if (v68 >= v62)
        goto LABEL_95;
      if (!HIWORD(v65))
      {
        while (v68 < *(_QWORD *)(v58 + 16))
        {
          v83 = *(unsigned __int16 *)(v56 + 32 + 2 * v68);
          v59 = v83 + 0xFFFF;
          v60[v68] = v83 - 1;
          if (v62 - 1 == v68)
            goto LABEL_102;
          ++v68;
          if (v83)
            goto LABEL_88;
        }
        goto LABEL_150;
      }
    }
    else
    {
      if (!v62)
      {
        if (v63)
        {
          v68 = 0;
          v66 = 1;
          goto LABEL_96;
        }
        v80 = 8;
LABEL_105:
        if (!v60[v80 - 1])
        {
          do
          {
            *(_QWORD *)(v58 + 16) = v80 - 1;
            if (v80 == 1)
              break;
          }
          while (!*(unsigned __int16 *)(v58 + 28 + 2 * v80--));
        }
LABEL_108:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v86 = *((_QWORD *)v61._rawValue + 2);
        if (HIDWORD(v86))
          goto LABEL_160;
        _So9NSDecimala__length_setter(v86, &v127);
        LODWORD(v124) = v122;
        WORD2(v124) = v106;
        HIWORD(v124) = v20;
        LOWORD(v125) = v21;
        WORD1(v125) = v22;
        WORD2(v125) = v23;
        HIWORD(v125) = v24;
        LOWORD(v126) = v25;
        HIWORD(v126) = v26;
LABEL_142:
        v94 = _So9NSDecimala__isNegative_getter(&v124);
        _So9NSDecimala__isNegative_setter(v94, &v127);
        NSDecimal.copyVariableLengthInteger(_:)(v61);
        if (v95)
        {
          v49 = v95;
          goto LABEL_144;
        }
        swift_bridgeObjectRelease();
LABEL_146:
        _So9NSDecimala__isCompact_setter_0(0, &v127);
        NSDecimal.compact()();
        return;
      }
      v68 = 0;
    }
LABEL_88:
    v73 = v56 + 32;
    if (v68 <= v62)
      v75 = v62;
    else
      v75 = v68;
    while (v75 != v68)
    {
      if (v68 >= *(_QWORD *)(v58 + 16))
        goto LABEL_112;
      v60[v68] = *(_WORD *)(v73 + 2 * v68);
      if ((uint64_t)++v68 >= (uint64_t)v62)
      {
        v66 = 1;
LABEL_95:
        if ((uint64_t)v68 < (uint64_t)v63)
        {
          while (1)
          {
LABEL_96:
            if (v68 >= v63)
              goto LABEL_155;
            v62 = *(_QWORD *)(v58 + 16);
            if (v68 < v62)
              break;
LABEL_101:
            __break(1u);
LABEL_102:
            v66 = HIWORD(v59);
            v68 = v62;
            if ((uint64_t)v62 >= (uint64_t)v63)
              goto LABEL_103;
          }
          v84 = v66 + (*(unsigned __int16 *)(v39 + 32 + 2 * v68) ^ 0xFFFF);
          --v63;
          v62 = v39 + 34;
          while (1)
          {
            v66 = HIWORD(v84);
            v60[v68] = v84;
            if (v63 == v68)
              break;
            v84 = v66 + (*(unsigned __int16 *)(v62 + 2 * v68++) ^ 0xFFFF);
            if (v68 >= *(_QWORD *)(v58 + 16))
              goto LABEL_101;
          }
        }
LABEL_103:
        if (v66)
        {
          v80 = *(_QWORD *)(v58 + 16);
          if (v80)
            goto LABEL_105;
          goto LABEL_108;
        }
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
        v49 = (void *)swift_allocError();
        *v87 = 0;
        swift_willThrow();
        swift_bridgeObjectRelease();
LABEL_144:
        swift_bridgeObjectRelease();
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_112:
    __break(1u);
    goto LABEL_113;
  }
  if (!v39)
    return;
  if (v39 != 1)
  {
LABEL_161:
    type metadata accessor for NSComparisonResult(0);
    v124 = v39;
    _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
    __break(1u);
    return;
  }
  LOWORD(v24) = v104;
  NSDecimal.asVariableLengthInteger()(v98, v103, v102);
  v39 = v69;
  NSDecimal.asVariableLengthInteger()(v101, v100, v99);
  v21 = v70;
  v71 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(v71 + 32) = 0;
  v60 = (_WORD *)(v71 + 32);
  *(_QWORD *)(v71 + 16) = 8;
  v61._rawValue = (void *)v71;
  *(_QWORD *)(v71 + 40) = 0;
  v62 = *(_QWORD *)(v39 + 16);
  v63 = *(_QWORD *)(v21 + 16);
  if (v63 >= v62)
    v72 = *(_QWORD *)(v39 + 16);
  else
    v72 = *(_QWORD *)(v21 + 16);
  if (v72)
  {
    v73 = v39 + 32;
    v74 = (*(unsigned __int16 *)(v39 + 32) | 0x10000) - *(unsigned __int16 *)(v21 + 32);
    LODWORD(v75) = HIWORD(v74);
    *v60 = *(_WORD *)(v39 + 32) - *(_WORD *)(v21 + 32);
    v68 = v72 - 1;
    if (!v68)
    {
      v76 = 1;
      goto LABEL_115;
    }
    v74 = v75 + *(unsigned __int16 *)(v39 + 34) - *(unsigned __int16 *)(v21 + 34) + 0xFFFF;
    LODWORD(v75) = HIWORD(v74);
    *(_WORD *)(v71 + 34) = v74;
    if (v68 == 1)
    {
      v76 = 2;
      goto LABEL_115;
    }
    v59 = *(unsigned __int16 *)(v21 + 36);
    v74 = v75 + *(unsigned __int16 *)(v39 + 36) - v59 + 0xFFFF;
    LODWORD(v75) = HIWORD(v74);
    *(_WORD *)(v71 + 36) = v74;
    if (v68 == 2)
    {
      v76 = 3;
      goto LABEL_115;
    }
    v74 = v75 + *(unsigned __int16 *)(v39 + 38) - *(unsigned __int16 *)(v21 + 38) + 0xFFFF;
    LODWORD(v75) = HIWORD(v74);
    *(_WORD *)(v71 + 38) = v74;
    if (v68 == 3)
    {
      v76 = 4;
      goto LABEL_115;
    }
    v59 = *(unsigned __int16 *)(v21 + 40);
    v74 = v75 + *(unsigned __int16 *)(v39 + 40) - v59 + 0xFFFF;
    LODWORD(v75) = HIWORD(v74);
    *(_WORD *)(v71 + 40) = v74;
    if (v68 == 4)
    {
      v76 = 5;
      goto LABEL_115;
    }
    v74 = v75 + *(unsigned __int16 *)(v39 + 42) - *(unsigned __int16 *)(v21 + 42) + 0xFFFF;
    LODWORD(v75) = HIWORD(v74);
    *(_WORD *)(v71 + 42) = v74;
    if (v68 == 5)
    {
      v76 = 6;
      goto LABEL_115;
    }
    v59 = *(unsigned __int16 *)(v21 + 44);
    v74 = v75 + *(unsigned __int16 *)(v39 + 44) - v59 + 0xFFFF;
    LODWORD(v75) = HIWORD(v74);
    *(_WORD *)(v71 + 44) = v74;
    if (v68 == 6)
    {
      v76 = 7;
      goto LABEL_115;
    }
LABEL_113:
    v88 = v75 + *(unsigned __int16 *)(v39 + 46) - *(unsigned __int16 *)(v21 + 46);
    v74 = v88 + 0xFFFF;
    *((_WORD *)v61._rawValue + 23) = v88 - 1;
    if (v68 != 7)
    {
LABEL_159:
      __break(1u);
      swift_unexpectedError();
      __break(1u);
LABEL_160:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      goto LABEL_161;
    }
    LODWORD(v75) = HIWORD(v74);
    v76 = 8;
LABEL_115:
    if (v76 >= v62)
      goto LABEL_127;
    if (!HIWORD(v74))
    {
      while (v76 < *((_QWORD *)v61._rawValue + 2))
      {
        v89 = *(unsigned __int16 *)(v73 + 2 * v76);
        v59 = v89 + 0xFFFF;
        v60[v76] = v89 - 1;
        if (v62 - 1 == v76)
          goto LABEL_134;
        ++v76;
        if (v89)
          goto LABEL_120;
      }
      goto LABEL_151;
    }
    goto LABEL_120;
  }
  if (!v62)
  {
    if (v63)
    {
      v76 = 0;
      LODWORD(v75) = 1;
      goto LABEL_128;
    }
    v81 = 8;
LABEL_137:
    if (!v60[v81 - 1])
    {
      do
      {
        *((_QWORD *)v61._rawValue + 2) = v81 - 1;
        if (v81 == 1)
          break;
      }
      while (!*((unsigned __int16 *)v61._rawValue + v81-- + 14));
    }
LABEL_140:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v93 = *((_QWORD *)v61._rawValue + 2);
    if (HIDWORD(v93))
      goto LABEL_160;
    _So9NSDecimala__length_setter(v93, &v127);
    LODWORD(v124) = v108;
    WORD2(v124) = v97;
    HIWORD(v124) = v24;
    LOWORD(v125) = v120;
    WORD1(v125) = v118;
    WORD2(v125) = v116;
    HIWORD(v125) = v114;
    LOWORD(v126) = v112;
    HIWORD(v126) = v110;
    goto LABEL_142;
  }
  v76 = 0;
LABEL_120:
  if (v76 <= v62)
    v90 = v62;
  else
    v90 = v76;
  do
  {
    if (v90 == v76)
    {
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
      goto LABEL_152;
    }
    if (v76 >= *((_QWORD *)v61._rawValue + 2))
      goto LABEL_149;
    v60[v76] = *(_WORD *)(v39 + 32 + 2 * v76);
    ++v76;
  }
  while ((uint64_t)v76 < (uint64_t)v62);
  LODWORD(v75) = 1;
LABEL_127:
  if ((uint64_t)v76 < (uint64_t)v63)
  {
    while (1)
    {
LABEL_128:
      if (v76 >= v63)
        goto LABEL_156;
      v62 = *((_QWORD *)v61._rawValue + 2);
      if (v76 < v62)
        break;
LABEL_133:
      __break(1u);
LABEL_134:
      LODWORD(v75) = HIWORD(v59);
      v76 = v62;
      if ((uint64_t)v62 >= (uint64_t)v63)
        goto LABEL_135;
    }
    v91 = v75 + (*(unsigned __int16 *)(v21 + 32 + 2 * v76) ^ 0xFFFF);
    --v63;
    v62 = v21 + 34;
    while (1)
    {
      LODWORD(v75) = HIWORD(v91);
      v60[v76] = v91;
      if (v63 == v76)
        break;
      v91 = v75 + (*(unsigned __int16 *)(v62 + 2 * v76++) ^ 0xFFFF);
      if (v76 >= *((_QWORD *)v61._rawValue + 2))
        goto LABEL_133;
    }
  }
LABEL_135:
  if ((_DWORD)v75)
  {
    v81 = *((_QWORD *)v61._rawValue + 2);
    if (v81)
      goto LABEL_137;
    goto LABEL_140;
  }
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
  v49 = (void *)swift_allocError();
  *v96 = 0;
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_21:
  v137 = 0;
  v138 = 0;
  _So9NSDecimala__exponent_setter(0, &v136);
  _So9NSDecimala__length_setter(0, &v136);
  _So9NSDecimala__isNegative_setter(1, &v136);
  _So9NSDecimala__isCompact_setter_0(0, &v136);
  _So9NSDecimala__reserved_setter(&v136);

}

void __swiftcall NSDecimal.advanced(by:)(NSDecimal *__return_ptr retstr, NSDecimal *by)
{
  unint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v7 = v4;
  v8 = v5;
  v9 = v6;
  specialized static NSDecimal.+= infix(_:_:)((int *)&v7, (unint64_t)by, v2, v3);
}

void protocol witness for Strideable.distance(to:) in conformance NSDecimal(NSDecimal **a1@<X0>, NSDecimal *a2@<X8>)
{
  int v3;
  unsigned __int16 v4;
  unsigned __int16 v5;
  unsigned __int16 v6;
  unsigned __int16 v7;
  unsigned __int16 v8;
  unsigned __int16 v9;
  unsigned __int16 v10;
  unsigned __int16 v11;

  NSDecimal.distance(to:)(a2, *a1);
  *(_DWORD *)a2 = v3;
  a2->_mantissa[0] = v4;
  a2->_mantissa[1] = v5;
  a2->_mantissa[2] = v6;
  a2->_mantissa[3] = v7;
  a2->_mantissa[4] = v8;
  a2->_mantissa[5] = v9;
  a2->_mantissa[6] = v10;
  a2->_mantissa[7] = v11;
}

__n128 protocol witness for Strideable.advanced(by:) in conformance NSDecimal@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  int v8;
  __n128 v9;

  v4 = *(_DWORD *)(a1 + 16);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v8 = *(_DWORD *)v2;
  v9 = *(__n128 *)(v2 + 4);
  specialized static NSDecimal.+= infix(_:_:)(&v8, v5, v6, v4);
  result = v9;
  *(_DWORD *)a2 = v8;
  *(__n128 *)(a2 + 4) = result;
  return result;
}

uint64_t protocol witness for static Strideable._step(after:from:by:) in conformance NSDecimal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  int v12;
  __int128 v13;

  v7 = *(_DWORD *)(a6 + 16);
  v8 = *(_QWORD *)a6;
  v9 = *(_QWORD *)(a6 + 8);
  v12 = *(_DWORD *)a4;
  v13 = *(_OWORD *)(a4 + 4);
  specialized static NSDecimal.+= infix(_:_:)(&v12, v8, v9, v7);
  v10 = v13;
  *(_DWORD *)a1 = v12;
  *(_OWORD *)(a1 + 4) = v10;
  return 0;
}

__n128 one-time initialization function for _powersOfTenDividingUInt128Max()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __n128 result;
  int v39;
  __int128 v40;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSDecimal>);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_18206D320;
  *(_QWORD *)((char *)&v40 + 6) = 0x9999999999999999;
  *(_QWORD *)&v40 = 0x9999999999999999;
  HIWORD(v40) = 6553;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(8, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  v1 = v40;
  *(_DWORD *)(v0 + 32) = v39;
  *(_OWORD *)(v0 + 36) = v1;
  v40 = xmmword_18206D330;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(8, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  v2 = v40;
  *(_DWORD *)(v0 + 52) = v39;
  *(_OWORD *)(v0 + 56) = v2;
  v40 = xmmword_18206D340;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(8, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  v3 = v40;
  *(_DWORD *)(v0 + 72) = v39;
  *(_OWORD *)(v0 + 76) = v3;
  v40 = xmmword_18206D350;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(8, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  v4 = v40;
  *(_DWORD *)(v0 + 92) = v39;
  *(_OWORD *)(v0 + 96) = v4;
  v40 = xmmword_18206D360;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(7, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  v5 = v40;
  *(_DWORD *)(v0 + 112) = v39;
  *(_OWORD *)(v0 + 116) = v5;
  v40 = xmmword_18206D370;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(7, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  v6 = v40;
  *(_DWORD *)(v0 + 132) = v39;
  *(_OWORD *)(v0 + 136) = v6;
  v40 = xmmword_18206D380;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(7, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  v7 = v40;
  *(_DWORD *)(v0 + 152) = v39;
  *(_OWORD *)(v0 + 156) = v7;
  v40 = xmmword_18206D390;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(7, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  v8 = v40;
  *(_DWORD *)(v0 + 172) = v39;
  *(_OWORD *)(v0 + 176) = v8;
  v40 = xmmword_18206D3A0;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(7, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  v9 = v40;
  *(_DWORD *)(v0 + 192) = v39;
  *(_OWORD *)(v0 + 196) = v9;
  v40 = xmmword_18206D3B0;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(6, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  v10 = v40;
  *(_DWORD *)(v0 + 212) = v39;
  *(_OWORD *)(v0 + 216) = v10;
  v40 = xmmword_18206D3C0;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(6, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  v11 = v40;
  *(_DWORD *)(v0 + 232) = v39;
  *(_OWORD *)(v0 + 236) = v11;
  v40 = xmmword_18206D3D0;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(6, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  v12 = v40;
  *(_DWORD *)(v0 + 252) = v39;
  *(_OWORD *)(v0 + 256) = v12;
  v40 = xmmword_18206D3E0;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(6, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(0, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  v13 = v40;
  *(_DWORD *)(v0 + 272) = v39;
  *(_OWORD *)(v0 + 276) = v13;
  v40 = xmmword_18206D3F0;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(6, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  v14 = v40;
  *(_DWORD *)(v0 + 292) = v39;
  *(_OWORD *)(v0 + 296) = v14;
  v40 = xmmword_18206D400;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(5, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  v15 = v40;
  *(_DWORD *)(v0 + 312) = v39;
  *(_OWORD *)(v0 + 316) = v15;
  v40 = xmmword_18206D410;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(5, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  v16 = v40;
  *(_DWORD *)(v0 + 332) = v39;
  *(_OWORD *)(v0 + 336) = v16;
  v40 = xmmword_18206D420;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(5, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  v17 = v40;
  *(_DWORD *)(v0 + 352) = v39;
  *(_OWORD *)(v0 + 356) = v17;
  v40 = xmmword_18206D430;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(5, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  v18 = v40;
  *(_DWORD *)(v0 + 372) = v39;
  *(_OWORD *)(v0 + 376) = v18;
  v40 = xmmword_18206D440;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(5, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  v19 = v40;
  *(_DWORD *)(v0 + 392) = v39;
  *(_OWORD *)(v0 + 396) = v19;
  v40 = 0x2F394219248446BAuLL;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(4, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  v20 = v40;
  *(_DWORD *)(v0 + 412) = v39;
  *(_OWORD *)(v0 + 416) = v20;
  v40 = 0x4B8ED0283A6D3DFuLL;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(4, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  v21 = v40;
  *(_DWORD *)(v0 + 432) = v39;
  *(_OWORD *)(v0 + 436) = v21;
  v40 = 0x78E480405D7B96uLL;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(4, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  v22 = v40;
  *(_DWORD *)(v0 + 452) = v39;
  *(_OWORD *)(v0 + 456) = v22;
  v40 = 0xC16D9A0095928uLL;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(4, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  v23 = v40;
  *(_DWORD *)(v0 + 472) = v39;
  *(_OWORD *)(v0 + 476) = v23;
  v40 = 0x1357C299A88EAuLL;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(4, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  v24 = v40;
  *(_DWORD *)(v0 + 492) = v39;
  *(_OWORD *)(v0 + 496) = v24;
  v40 = 0x1EF2D0F5DA7DuLL;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(3, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  v25 = v40;
  *(_DWORD *)(v0 + 512) = v39;
  *(_OWORD *)(v0 + 516) = v25;
  v40 = 0x318481895D9uLL;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(3, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  v26 = v40;
  *(_DWORD *)(v0 + 532) = v39;
  *(_OWORD *)(v0 + 536) = v26;
  v40 = 0x4F3A68DBC8uLL;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(3, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(0, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  v27 = v40;
  *(_DWORD *)(v0 + 552) = v39;
  *(_OWORD *)(v0 + 556) = v27;
  v40 = 0x7EC3DAF94uLL;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(3, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  v28 = v40;
  *(_DWORD *)(v0 + 572) = v39;
  *(_OWORD *)(v0 + 576) = v28;
  v40 = 0xCAD2F7F5uLL;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(2, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  v29 = v40;
  *(_DWORD *)(v0 + 592) = v39;
  *(_OWORD *)(v0 + 596) = v29;
  v40 = 0x14484BFEuLL;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(2, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  v30 = v40;
  *(_DWORD *)(v0 + 612) = v39;
  *(_OWORD *)(v0 + 616) = v30;
  v40 = 0x2073ACCuLL;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(2, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  v31 = v40;
  *(_DWORD *)(v0 + 632) = v39;
  *(_OWORD *)(v0 + 636) = v31;
  v40 = 0x33EC47uLL;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(2, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  v32 = v40;
  *(_DWORD *)(v0 + 652) = v39;
  *(_OWORD *)(v0 + 656) = v32;
  v40 = 0x5313AuLL;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(2, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  v33 = v40;
  *(_DWORD *)(v0 + 672) = v39;
  *(_OWORD *)(v0 + 676) = v33;
  LOWORD(v40) = -31508;
  *(_QWORD *)((char *)&v40 + 2) = 0;
  *((_QWORD *)&v40 + 1) = 0;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(1, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  v34 = v40;
  *(_DWORD *)(v0 + 692) = v39;
  *(_OWORD *)(v0 + 696) = v34;
  LOWORD(v40) = 3402;
  *(_QWORD *)((char *)&v40 + 2) = 0;
  *((_QWORD *)&v40 + 1) = 0;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(1, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  v35 = v40;
  *(_DWORD *)(v0 + 712) = v39;
  *(_OWORD *)(v0 + 716) = v35;
  LOWORD(v40) = 340;
  *(_QWORD *)((char *)&v40 + 2) = 0;
  *((_QWORD *)&v40 + 1) = 0;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(1, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(0, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  v36 = v40;
  *(_DWORD *)(v0 + 732) = v39;
  *(_OWORD *)(v0 + 736) = v36;
  LOWORD(v40) = 34;
  *(_QWORD *)((char *)&v40 + 2) = 0;
  *((_QWORD *)&v40 + 1) = 0;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(1, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  v37 = v40;
  *(_DWORD *)(v0 + 752) = v39;
  *(_OWORD *)(v0 + 756) = v37;
  LOWORD(v40) = 3;
  *(_QWORD *)((char *)&v40 + 2) = 0;
  *((_QWORD *)&v40 + 1) = 0;
  _So9NSDecimala__exponent_setter(0, &v39);
  _So9NSDecimala__length_setter(1, &v39);
  _So9NSDecimala__isNegative_setter(0, &v39);
  _So9NSDecimala__isCompact_setter_0(1, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  result = (__n128)v40;
  *(_DWORD *)(v0 + 772) = v39;
  *(__n128 *)(v0 + 776) = result;
  _powersOfTenDividingUInt128Max._rawValue = (void *)v0;
  return result;
}

uint64_t specialized skipWhiteSpaces #1 <A>(from:) in static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  char *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v8;
  unsigned int v9;
  char v10;
  uint64_t v11;

  v3 = (char *)result;
  v4 = (unsigned __int8 *)(a2 + a3);
  if (a2 + a3 == result)
    return (uint64_t)v3;
  v5 = result - a2;
  v6 = a3 + a2 - result;
  while ((v5 & 0x8000000000000000) == 0)
  {
    if (v6-- < 1)
      break;
    v8 = *v3;
    if (*v3 >= 0)
      v9 = v8 + 1;
    else
      v9 = ((v8 >> 6) & 0xFFFFC0FF | ((v8 & 0x3F) << 8)) + 33217;
    v11 = (v9 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v9) >> 3)) & 7)));
    MEMORY[0x186DA46D0](&v11);
    v10 = Character.isWhitespace.getter();
    result = swift_bridgeObjectRelease();
    if ((v10 & 1) == 0)
      return (uint64_t)v3;
    ++v3;
    ++v5;
    if (v3 == (char *)v4)
      return (uint64_t)v4;
  }
  __break(1u);
  return result;
}

unint64_t specialized skipWhiteSpaces #1 <A>(from:) in static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD v20[2];

  v3 = a1;
  if ((a3 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a3) & 0xF;
  else
    v4 = a2 & 0xFFFFFFFFFFFFLL;
  v5 = 4 * v4;
  if (4 * v4 == a1 >> 14)
    return v3;
  v9 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v9) = 1;
  v10 = 4 << v9;
  v19 = a3 & 0xFFFFFFFFFFFFFFLL;
  v11 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
  while (1)
  {
    result = v3;
    if ((v3 & 0xC) == v10)
      result = _StringGuts._slowEnsureMatchingEncoding(_:)(v3, a2, a3);
    v12 = result >> 16;
    if (result >> 16 >= v4)
      break;
    if ((a3 & 0x1000000000000000) != 0)
    {
      v14 = String.UTF8View._foreignSubscript(position:)();
    }
    else if ((a3 & 0x2000000000000000) != 0)
    {
      v20[0] = a2;
      v20[1] = v19;
      v14 = *((_BYTE *)v20 + v12);
    }
    else
    {
      v13 = v11;
      if ((a2 & 0x1000000000000000) == 0)
        v13 = _StringObject.sharedUTF8.getter();
      v14 = *(_BYTE *)(v13 + v12);
    }
    v15 = (((v14 & 0x3F) << 8) | (v14 >> 6)) + 33217;
    if ((v14 & 0x80) == 0)
      v15 = (v14 + 1);
    v16 = __clz(v15);
    v17 = 4 - (v16 >> 3);
    v20[0] = (v15 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (v16 >> 3)) & 7)));
    swift_bridgeObjectRetain();
    MEMORY[0x186DA46D0](v20, v17);
    v18 = Character.isWhitespace.getter();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if ((v18 & 1) == 0)
      return v3;
    if ((v3 & 0xC) == v10)
    {
      result = _StringGuts._slowEnsureMatchingEncoding(_:)(v3, a2, a3);
      v3 = result;
      if ((a3 & 0x1000000000000000) == 0)
        goto LABEL_9;
LABEL_24:
      if (v4 <= v3 >> 16)
        goto LABEL_31;
      v3 = String.UTF8View._foreignIndex(after:)();
      if (v5 == v3 >> 14)
        return v3;
    }
    else
    {
      if ((a3 & 0x1000000000000000) != 0)
        goto LABEL_24;
LABEL_9:
      v3 = (v3 & 0xFFFFFFFFFFFF0000) + 65540;
      if (v5 == v3 >> 14)
        return v3;
    }
  }
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t specialized stringViewContainsDecimalSeparator #1 <A>(at:) in static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v17;
  unint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  BOOL v21;
  uint64_t result;
  Swift::Int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[2];

  v9 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x1000000000000000) != 0)
    goto LABEL_38;
  if ((a3 & 0x2000000000000000) != 0)
    v10 = HIBYTE(a3) & 0xF;
  else
    v10 = a2 & 0xFFFFFFFFFFFFLL;
  if (v10)
  {
    do
    {
      v11 = 0;
      v12 = (a2 >> 59) & 1;
      if ((a3 & 0x1000000000000000) == 0)
        LOBYTE(v12) = 1;
      v13 = 4;
      if ((a3 & 0x2000000000000000) != 0)
        v14 = v9;
      else
        v14 = a2 & 0xFFFFFFFFFFFFLL;
      v24 = v10 - 1;
      v25 = 4 << v12;
      a5 = a5 + a4 - a1;
      v9 = a1 - a4;
      while (v10 != v11)
      {
        if ((a3 & 0x1000000000000000) != 0)
        {
          v15 = MEMORY[0x186DA485C](15, v11, a2, a3);
        }
        else
        {
          v15 = v13;
          if (v14 < v11)
            goto LABEL_37;
        }
        if ((uint64_t)(v9 + v11) < 0)
          goto LABEL_35;
        if (a5-- < 1)
          goto LABEL_35;
        a4 = v10;
        v17 = *(unsigned __int8 *)(a1 + v11);
        if ((v15 & 0xC) == v25)
          v15 = _StringGuts._slowEnsureMatchingEncoding(_:)(v15, a2, a3);
        v18 = v15 >> 16;
        if (v15 >> 16 >= v14)
          goto LABEL_36;
        if ((a3 & 0x1000000000000000) != 0)
        {
          v20 = String.UTF8View._foreignSubscript(position:)();
        }
        else if ((a3 & 0x2000000000000000) != 0)
        {
          v27[0] = a2;
          v27[1] = a3 & 0xFFFFFFFFFFFFFFLL;
          v20 = *((_BYTE *)v27 + v18);
        }
        else
        {
          v19 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a2 & 0x1000000000000000) == 0)
            v19 = _StringObject.sharedUTF8.getter();
          v20 = *(_BYTE *)(v19 + v18);
        }
        v21 = v17 == v20;
        result = v21;
        if (v21)
        {
          v13 += 0x10000;
          v21 = v24 == v11++;
          v10 = a4;
          if (!v21)
            continue;
        }
        return result;
      }
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      v23 = String.UTF8View._foreignCount()();
      if (v23 < 0)
        __break(1u);
      v10 = v23;
    }
    while (v23);
  }
  return 1;
}

uint64_t specialized stringViewContainsDecimalSeparator #1 <A>(at:) in static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  BOOL v25;
  uint64_t result;
  Swift::Int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v34;
  uint64_t v35;

  v7 = a2;
  v8 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x1000000000000000) != 0)
    goto LABEL_60;
  if ((a3 & 0x2000000000000000) != 0)
    v9 = HIBYTE(a3) & 0xF;
  else
    v9 = a2 & 0xFFFFFFFFFFFFLL;
  if (v9)
  {
    do
    {
      v10 = 0;
      v11 = (a4 >> 59) & 1;
      if ((a5 & 0x1000000000000000) == 0)
        LOBYTE(v11) = 1;
      if ((a5 & 0x2000000000000000) != 0)
        v12 = HIBYTE(a5) & 0xF;
      else
        v12 = a4 & 0xFFFFFFFFFFFFLL;
      v13 = 4 << v11;
      v14 = (v7 >> 59) & 1;
      if ((a3 & 0x1000000000000000) == 0)
        LOBYTE(v14) = 1;
      v30 = 4 << v14;
      v31 = v7;
      if ((a3 & 0x2000000000000000) != 0)
        v15 = v8;
      else
        v15 = v7 & 0xFFFFFFFFFFFFLL;
      v28 = v9 - 1;
      v29 = v9;
      v8 = 4;
      while (v9 != v10)
      {
        v16 = a1;
        if ((a1 & 0xC) == v13)
        {
          v16 = _StringGuts._slowEnsureMatchingEncoding(_:)(a1, a4, a5);
          if ((a5 & 0x1000000000000000) != 0)
          {
LABEL_26:
            v18 = MEMORY[0x186DA485C](v16, v10, a4, a5);
            if ((a3 & 0x1000000000000000) != 0)
              goto LABEL_24;
            goto LABEL_27;
          }
        }
        else if ((a5 & 0x1000000000000000) != 0)
        {
          goto LABEL_26;
        }
        v17 = v10 + (v16 >> 16);
        if (__OFADD__(v10, v16 >> 16))
          goto LABEL_56;
        if ((v17 & 0x8000000000000000) != 0)
          goto LABEL_57;
        if (v12 < v17)
          goto LABEL_59;
        v18 = (v17 << 16) | 4;
        if ((a3 & 0x1000000000000000) != 0)
        {
LABEL_24:
          v7 = MEMORY[0x186DA485C](15, v10, v7, a3);
          goto LABEL_28;
        }
LABEL_27:
        v7 = v8;
        if (v15 < v10)
          goto LABEL_58;
LABEL_28:
        if ((v18 & 0xC) == v13)
          v18 = _StringGuts._slowEnsureMatchingEncoding(_:)(v18, a4, a5);
        v19 = v18 >> 16;
        if (v18 >> 16 >= v12)
          goto LABEL_54;
        if ((a5 & 0x1000000000000000) != 0)
        {
          v21 = String.UTF8View._foreignSubscript(position:)();
        }
        else if ((a5 & 0x2000000000000000) != 0)
        {
          v34 = a4;
          v35 = a5 & 0xFFFFFFFFFFFFFFLL;
          v21 = *((_BYTE *)&v34 + v19);
        }
        else
        {
          v20 = (a5 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a4 & 0x1000000000000000) == 0)
            v20 = _StringObject.sharedUTF8.getter();
          v21 = *(_BYTE *)(v20 + v19);
        }
        if ((v7 & 0xC) == v30)
          v7 = _StringGuts._slowEnsureMatchingEncoding(_:)(v7, v31, a3);
        v22 = v7 >> 16;
        if (v7 >> 16 >= v15)
          goto LABEL_55;
        if ((a3 & 0x1000000000000000) != 0)
        {
          v7 = v31;
          v24 = String.UTF8View._foreignSubscript(position:)();
        }
        else if ((a3 & 0x2000000000000000) != 0)
        {
          v7 = v31;
          v34 = v31;
          v35 = a3 & 0xFFFFFFFFFFFFFFLL;
          v24 = *((_BYTE *)&v34 + v22);
        }
        else
        {
          v23 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
          v7 = v31;
          if ((v31 & 0x1000000000000000) == 0)
            v23 = _StringObject.sharedUTF8.getter();
          v24 = *(_BYTE *)(v23 + v22);
        }
        v25 = v21 == v24;
        result = v25;
        if (v25)
        {
          v8 += 0x10000;
          v9 = v29;
          v25 = v28 == v10++;
          if (!v25)
            continue;
        }
        return result;
      }
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      v27 = String.UTF8View._foreignCount()();
      if (v27 < 0)
        __break(1u);
      v9 = v27;
    }
    while (v27);
  }
  return 1;
}

unint64_t specialized $defer #1 <A>() in static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)(unint64_t a1, unint64_t a2, unint64_t *a3)
{
  unint64_t result;
  uint64_t v7;
  unint64_t v8;

  result = *a3;
  v7 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000) == 0)
    LOBYTE(v7) = 1;
  if ((*a3 & 0xC) == 4 << v7)
  {
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a1, a2);
    if ((a2 & 0x1000000000000000) == 0)
      goto LABEL_5;
  }
  else if ((a2 & 0x1000000000000000) == 0)
  {
LABEL_5:
    result = (result & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_6:
    *a3 = result;
    return result;
  }
  v8 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v8 = a1 & 0xFFFFFFFFFFFFLL;
  if (v8 > result >> 16)
  {
    result = String.UTF8View._foreignIndex(after:)();
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t specialized static NSDecimal.== infix(_:_:)(unint64_t a1, unint64_t a2, unsigned int a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  __int16 v6;
  int v7;
  __int16 v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int v16;
  unsigned __int16 v17;
  __int16 v18;
  int v19;
  BOOL v20;
  int isNegative_getter;
  int isCompact_getter;
  int v23;
  uint64_t result;
  unsigned __int16 v25;
  __int16 v26;
  unsigned int v27;
  unsigned int v28;
  void *v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t *v36;
  unsigned __int16 v37;
  uint64_t v38;
  int64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *rawValue;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  int64_t v59;
  int64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE *v79;
  uint64_t v80;
  uint64_t v81;
  double v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int64_t v104;
  uint64_t v105;
  uint64_t v106;
  _BYTE *v107;
  void *v108;
  unint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unsigned int v115;
  unsigned int v116;
  uint64_t v117;
  unsigned int v118;
  unsigned int v119;
  unint64_t v120;
  int v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v144;
  _BYTE *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unsigned int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v164;
  _BYTE *v165;
  int v166;
  unint64_t v167;
  unint64_t v168;
  __int16 v169;
  unint64_t v170;
  unsigned int v171;
  int64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  unsigned int v176;
  int64_t v177;
  __int16 v178;
  unint64_t v179;
  uint64_t v180;
  unsigned int v181;
  unint64_t v182;
  uint64_t v183;
  __int16 v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t *v187;
  int v188;
  __int128 v189;
  unint64_t v190;
  unint64_t v191;
  unsigned int v192;
  unint64_t v193;
  unint64_t v194;
  unsigned int v195;
  uint64_t v196;

  v184 = a6;
  v6 = a5;
  v178 = a5;
  v181 = a1;
  v7 = a4;
  v174 = a4;
  v8 = a2;
  v170 = HIDWORD(a1);
  v167 = HIWORD(a1);
  v173 = a2 >> 16;
  v196 = *MEMORY[0x1E0C80C00];
  v193 = a1;
  v9 = HIDWORD(a2);
  v10 = HIWORD(a2);
  v169 = a3;
  v11 = HIWORD(a3);
  v168 = HIDWORD(a4);
  v194 = a2;
  v12 = HIWORD(a4);
  v186 = a5 >> 16;
  v13 = HIDWORD(a5);
  v175 = HIDWORD(a5);
  v14 = HIWORD(a5);
  v195 = a3;
  v15 = HIWORD(a6);
  v171 = HIWORD(a6);
  v166 = _So9NSDecimala__exponent_getter((char *)&v193);
  LODWORD(v193) = v7;
  WORD2(v193) = v168;
  HIWORD(v193) = v12;
  LOWORD(v194) = v6;
  WORD1(v194) = v186;
  WORD2(v194) = v13;
  HIWORD(v194) = v14;
  LOWORD(v195) = v184;
  HIWORD(v195) = v15;
  v16 = _So9NSDecimala__exponent_getter((char *)&v193);
  v17 = v170;
  if (v166 == v16)
  {
    LODWORD(v193) = v181;
    WORD2(v193) = v170;
    HIWORD(v193) = v167;
    LOWORD(v194) = v8;
    WORD1(v194) = v173;
    WORD2(v194) = v9;
    HIWORD(v194) = v10;
    LOWORD(v195) = v169;
    HIWORD(v195) = v11;
    v18 = v8;
    v19 = _So9NSDecimala__length_getter(&v193);
    LODWORD(v193) = v174;
    WORD2(v193) = v168;
    HIWORD(v193) = v12;
    LOWORD(v194) = v178;
    WORD1(v194) = v186;
    WORD2(v194) = v175;
    HIWORD(v194) = v14;
    LOWORD(v195) = v184;
    HIWORD(v195) = v171;
    v20 = v19 == _So9NSDecimala__length_getter(&v193);
    v8 = v18;
    v17 = v170;
    if (v20)
    {
      LODWORD(v193) = v181;
      WORD2(v193) = v170;
      HIWORD(v193) = v167;
      LOWORD(v194) = v18;
      WORD1(v194) = v173;
      WORD2(v194) = v9;
      HIWORD(v194) = v10;
      LOWORD(v195) = v169;
      HIWORD(v195) = v11;
      isNegative_getter = _So9NSDecimala__isNegative_getter(&v193);
      LODWORD(v193) = v174;
      WORD2(v193) = v168;
      HIWORD(v193) = v12;
      LOWORD(v194) = v178;
      WORD1(v194) = v186;
      WORD2(v194) = v175;
      HIWORD(v194) = v14;
      LOWORD(v195) = v184;
      HIWORD(v195) = v171;
      v20 = isNegative_getter == _So9NSDecimala__isNegative_getter(&v193);
      v8 = v18;
      v17 = v170;
      if (v20)
      {
        LODWORD(v193) = v181;
        WORD2(v193) = v170;
        HIWORD(v193) = v167;
        LOWORD(v194) = v18;
        WORD1(v194) = v173;
        WORD2(v194) = v9;
        HIWORD(v194) = v10;
        LOWORD(v195) = v169;
        HIWORD(v195) = v11;
        isCompact_getter = _So9NSDecimala__isCompact_getter(&v193);
        LODWORD(v193) = v174;
        WORD2(v193) = v168;
        HIWORD(v193) = v12;
        LOWORD(v194) = v178;
        WORD1(v194) = v186;
        WORD2(v194) = v175;
        HIWORD(v194) = v14;
        LOWORD(v195) = v184;
        HIWORD(v195) = v171;
        v20 = isCompact_getter == _So9NSDecimala__isCompact_getter(&v193);
        v8 = v18;
        v17 = v170;
        if (v20)
        {
          LODWORD(v193) = v181;
          WORD2(v193) = v170;
          HIWORD(v193) = v167;
          LOWORD(v194) = v18;
          WORD1(v194) = v173;
          WORD2(v194) = v9;
          HIWORD(v194) = v10;
          LOWORD(v195) = v169;
          HIWORD(v195) = v11;
          v23 = _So9NSDecimala__reserved_getter(&v193);
          LODWORD(v193) = v174;
          WORD2(v193) = v168;
          HIWORD(v193) = v12;
          LOWORD(v194) = v178;
          WORD1(v194) = v186;
          WORD2(v194) = v175;
          HIWORD(v194) = v14;
          LOWORD(v195) = v184;
          HIWORD(v195) = v171;
          v20 = v23 == _So9NSDecimala__reserved_getter(&v193);
          v8 = v18;
          v17 = v170;
          if (v20
            && (unsigned __int16)v170 == (unsigned __int16)v168
            && (_DWORD)v167 == (_DWORD)v12
            && v18 == v178
            && (unsigned __int16)v173 == (unsigned __int16)v186
            && (unsigned __int16)v9 == (unsigned __int16)v175
            && (_DWORD)v10 == (_DWORD)v14
            && v169 == v184
            && v11 == v171)
          {
            return 1;
          }
        }
      }
    }
  }
  LODWORD(v193) = v181;
  WORD2(v193) = v17;
  HIWORD(v193) = v167;
  LOWORD(v194) = v8;
  WORD1(v194) = v173;
  WORD2(v194) = v9;
  HIWORD(v194) = v10;
  LOWORD(v195) = v169;
  HIWORD(v195) = v11;
  v25 = v17;
  if (!_So9NSDecimala__length_getter(&v193))
  {
    LODWORD(v193) = v181;
    WORD2(v193) = v25;
    HIWORD(v193) = v167;
    LOWORD(v194) = v8;
    WORD1(v194) = v173;
    WORD2(v194) = v9;
    HIWORD(v194) = v10;
    LOWORD(v195) = v169;
    HIWORD(v195) = v11;
    if (_So9NSDecimala__isNegative_getter(&v193))
    {
      LODWORD(v193) = v174;
      WORD2(v193) = v168;
      HIWORD(v193) = v12;
      LOWORD(v194) = v178;
      WORD1(v194) = v186;
      WORD2(v194) = v175;
      HIWORD(v194) = v14;
      LOWORD(v195) = v184;
      HIWORD(v195) = v171;
      if (_So9NSDecimala__length_getter(&v193))
        goto LABEL_33;
      LODWORD(v193) = v174;
      WORD2(v193) = v168;
      HIWORD(v193) = v12;
      LOWORD(v194) = v178;
      WORD1(v194) = v186;
      WORD2(v194) = v175;
      HIWORD(v194) = v14;
      LOWORD(v195) = v184;
      HIWORD(v195) = v171;
      if (!_So9NSDecimala__isNegative_getter(&v193))
        goto LABEL_33;
      v38 = 0;
      return v38 == 0;
    }
  }
  v26 = v8;
  LODWORD(v193) = v174;
  WORD2(v193) = v168;
  HIWORD(v193) = v12;
  LOWORD(v194) = v178;
  WORD1(v194) = v186;
  WORD2(v194) = v175;
  HIWORD(v194) = v14;
  LOWORD(v195) = v184;
  HIWORD(v195) = v171;
  if (!_So9NSDecimala__length_getter(&v193))
  {
    LODWORD(v193) = v174;
    WORD2(v193) = v168;
    HIWORD(v193) = v12;
    LOWORD(v194) = v178;
    WORD1(v194) = v186;
    WORD2(v194) = v175;
    HIWORD(v194) = v14;
    LOWORD(v195) = v184;
    HIWORD(v195) = v171;
    if (_So9NSDecimala__isNegative_getter(&v193))
      goto LABEL_33;
  }
  LODWORD(v193) = v181;
  WORD2(v193) = v25;
  HIWORD(v193) = v167;
  LOWORD(v194) = v8;
  WORD1(v194) = v173;
  WORD2(v194) = v9;
  HIWORD(v194) = v10;
  LOWORD(v195) = v169;
  HIWORD(v195) = v11;
  v27 = _So9NSDecimala__isNegative_getter(&v193);
  LODWORD(v193) = v174;
  WORD2(v193) = v168;
  HIWORD(v193) = v12;
  LOWORD(v194) = v178;
  WORD1(v194) = v186;
  WORD2(v194) = v175;
  HIWORD(v194) = v14;
  LOWORD(v195) = v184;
  HIWORD(v195) = v171;
  if (_So9NSDecimala__isNegative_getter(&v193) < v27)
    goto LABEL_33;
  LODWORD(v193) = v181;
  WORD2(v193) = v25;
  HIWORD(v193) = v167;
  LOWORD(v194) = v26;
  WORD1(v194) = v173;
  WORD2(v194) = v9;
  HIWORD(v194) = v10;
  LOWORD(v195) = v169;
  HIWORD(v195) = v11;
  v28 = _So9NSDecimala__isNegative_getter(&v193);
  LODWORD(v193) = v174;
  WORD2(v193) = v168;
  HIWORD(v193) = v12;
  LOWORD(v194) = v178;
  WORD1(v194) = v186;
  WORD2(v194) = v175;
  HIWORD(v194) = v14;
  LOWORD(v195) = v184;
  HIWORD(v195) = v171;
  if (v28 < _So9NSDecimala__isNegative_getter(&v193))
    goto LABEL_33;
  LODWORD(v193) = v181;
  WORD2(v193) = v25;
  HIWORD(v193) = v167;
  LOWORD(v194) = v26;
  WORD1(v194) = v173;
  WORD2(v194) = v9;
  HIWORD(v194) = v10;
  LOWORD(v195) = v169;
  HIWORD(v195) = v11;
  if (!_So9NSDecimala__length_getter(&v193))
  {
    LODWORD(v193) = v174;
    WORD2(v193) = v168;
    HIWORD(v193) = v12;
    LOWORD(v194) = v178;
    WORD1(v194) = v186;
    WORD2(v194) = v175;
    HIWORD(v194) = v14;
    LOWORD(v195) = v184;
    HIWORD(v195) = v171;
    if (_So9NSDecimala__length_getter(&v193))
      v38 = -1;
    else
      v38 = 0;
    return v38 == 0;
  }
  LODWORD(v193) = v174;
  WORD2(v193) = v168;
  LOWORD(v29) = v12;
  HIWORD(v193) = v12;
  LOWORD(v194) = v178;
  WORD1(v194) = v186;
  WORD2(v194) = v175;
  HIWORD(v194) = v14;
  LOWORD(v195) = v184;
  HIWORD(v195) = v171;
  if (!_So9NSDecimala__length_getter(&v193))
  {
    LODWORD(v193) = v181;
    WORD2(v193) = v25;
    HIWORD(v193) = v167;
    LOWORD(v194) = v26;
    WORD1(v194) = v173;
    WORD2(v194) = v9;
    HIWORD(v194) = v10;
    LOWORD(v195) = v169;
    HIWORD(v195) = v11;
    v38 = _So9NSDecimala__length_getter(&v193) != 0;
    return v38 == 0;
  }
  LODWORD(v193) = v181;
  WORD2(v193) = v25;
  HIWORD(v193) = v167;
  LOWORD(v194) = v26;
  WORD1(v194) = v173;
  WORD2(v194) = v9;
  HIWORD(v194) = v10;
  LOWORD(v195) = v169;
  HIWORD(v195) = v11;
  LODWORD(v190) = v174;
  WORD2(v190) = v168;
  HIWORD(v190) = v12;
  LOWORD(v191) = v178;
  WORD1(v191) = v186;
  WORD2(v191) = v175;
  HIWORD(v191) = v14;
  LOWORD(v192) = v184;
  HIWORD(v192) = v171;
  v188 = v181;
  LOWORD(v189) = v25;
  WORD1(v189) = v167;
  WORD2(v189) = v26;
  WORD3(v189) = v173;
  WORD4(v189) = v9;
  WORD5(v189) = v10;
  WORD6(v189) = v169;
  HIWORD(v189) = v11;
  v30 = _So9NSDecimala__exponent_getter((char *)&v188);
  v188 = v174;
  LOWORD(v189) = v168;
  WORD1(v189) = v12;
  WORD2(v189) = v178;
  WORD3(v189) = v186;
  WORD4(v189) = v175;
  WORD5(v189) = v14;
  WORD6(v189) = v184;
  HIWORD(v189) = v171;
  v31 = _So9NSDecimala__exponent_getter((char *)&v188);
  v32 = v30 - v31;
  if (v30 == v31)
    goto LABEL_193;
  v33 = v32;
  if (v32 < 0)
  {
    v34 = (char *)&v190 + 4;
    v33 = -v33;
    v35 = (uint64_t)&v190;
    v36 = &v193;
    v37 = v168;
    v181 = v174;
  }
  else
  {
    v34 = (char *)&v193 + 4;
    v35 = (uint64_t)&v193;
    v36 = &v190;
    v37 = v25;
  }
  v39 = v181 | ((unint64_t)v37 << 32) | ((unint64_t)*((unsigned __int16 *)v34 + 1) << 48);
  v40 = *(_QWORD *)(v34 + 4);
  LODWORD(v41) = *((_DWORD *)v34 + 3);
  NSDecimal.asVariableLengthInteger()(v39, v40, v41);
  v43 = v42;
  v187 = v36;
  if (!v33)
  {
    v49 = v42;
    goto LABEL_96;
  }
  v174 = v33;
  v44 = specialized abs<A>(_:)(v33);
  v45 = one-time initialization token for powerOfTen;
  swift_bridgeObjectRetain();
  if (v45 != -1)
    goto LABEL_324;
  while (1)
  {
    rawValue = powerOfTen._rawValue;
    v47 = *((_QWORD *)powerOfTen._rawValue + 2);
    v182 = v39;
    LOWORD(v185) = v43;
    v179 = v40;
    v176 = v41;
    if (v47 > v44)
      break;
    if (!v47)
      goto LABEL_333;
    v39 = v47 - 1;
    v41 = v43;
    v29 = 0;
    while (1)
    {
      v50 = __OFSUB__(v44, v39);
      v44 -= v39;
      if (v50)
        goto LABEL_322;
      if ((unint64_t)v47 > *((_QWORD *)powerOfTen._rawValue + 2))
        break;
      v51 = *(_QWORD *)(v41 + 16);
      if (v51 && (v43 = *((_QWORD *)powerOfTen._rawValue + v39 + 4), (v40 = *(_QWORD *)(v43 + 16)) != 0))
      {
        v172 = v39;
        if (__OFADD__(v51, v40))
          goto LABEL_334;
        v173 = v35;
        if ((uint64_t)(v51 + v40) >= 8)
          v39 = 8;
        else
          v39 = v51 + v40;
        if (v39 < 0)
          goto LABEL_373;
        swift_bridgeObjectRetain();
        v49 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(_QWORD *)(v49 + 16) = v39;
        v35 = v49 + 32;
        bzero((void *)(v49 + 32), 2 * v39);
        v52 = 0;
        v53 = v43 + 32;
        do
        {
          v54 = 0;
          v55 = 0;
          v56 = v52++;
          do
          {
            v59 = v55 + v56;
            if (__OFADD__(v55, v56))
            {
              __break(1u);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_191;
            }
            if (v59 >= v39)
            {
              if (v54)
                goto LABEL_94;
              v54 = *(unsigned __int16 *)(v53 + 2 * v56);
              if (*(_WORD *)(v53 + 2 * v56))
              {
                v54 = *(unsigned __int16 *)(v41 + 2 * v55 + 32);
                if (*(_WORD *)(v41 + 2 * v55 + 32))
                  goto LABEL_94;
              }
            }
            else
            {
              if (v59 < 0)
              {
                __break(1u);
LABEL_310:
                __break(1u);
LABEL_311:
                __break(1u);
LABEL_312:
                __break(1u);
LABEL_313:
                __break(1u);
LABEL_314:
                v38 = 0;
                goto LABEL_197;
              }
              if ((unint64_t)v59 >= *(_QWORD *)(v49 + 16))
                goto LABEL_310;
              v57 = 2 * v59;
              v58 = v54
                  + *(unsigned __int16 *)(v35 + v57)
                  + *(unsigned __int16 *)(v41 + 2 * v55 + 32) * *(unsigned __int16 *)(v53 + 2 * v56);
              v54 = HIWORD(v58);
              *(_WORD *)(v35 + v57) = v58;
            }
            ++v55;
          }
          while (v51 != v55);
          if (v54)
          {
            v50 = __OFADD__(v51, v56);
            v60 = v51 + v56;
            if (v50)
              goto LABEL_337;
            if (v60 >= v39)
              goto LABEL_94;
            if (v60 < 0)
              goto LABEL_340;
            if ((unint64_t)v60 >= *(_QWORD *)(v49 + 16))
            {
LABEL_341:
              __break(1u);
              goto LABEL_342;
            }
            *(_WORD *)(v35 + 2 * v60) = v54;
          }
        }
        while (v52 != v40);
        v61 = *(_QWORD *)(v49 + 16);
        if (v61 && !*(_WORD *)(v35 + 2 * v61 - 2))
        {
          v62 = v61 + 14;
          do
          {
            *(_QWORD *)(v49 + 16) = v62 - 15;
            if (v62 == 15)
              break;
          }
          while (!*(unsigned __int16 *)(v49 + 2 * v62--));
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v41 = v49;
        v39 = v172;
        v35 = v173;
      }
      else
      {
        swift_bridgeObjectRelease();
        v41 = MEMORY[0x1E0DEE9D8];
      }
      if (v47 > v44)
      {
        rawValue = powerOfTen._rawValue;
        if (v44 < 0)
          goto LABEL_93;
        goto LABEL_44;
      }
    }
LABEL_323:
    __break(1u);
LABEL_324:
    swift_once();
  }
  v41 = v43;
  if (v44 < 0)
  {
LABEL_93:
    __break(1u);
LABEL_94:
    lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
    v39 = swift_allocError();
    *v64 = 0;
    swift_willThrow();
    swift_bridgeObjectRelease();
    LOWORD(v29) = 0;
    v35 = v173;
    goto LABEL_130;
  }
LABEL_44:
  if ((unint64_t)v44 >= rawValue[2])
  {
LABEL_332:
    __break(1u);
LABEL_333:
    __break(1u);
LABEL_334:
    __break(1u);
    goto LABEL_335;
  }
  v48 = *(_QWORD *)(v41 + 16);
  if (!v48 || (v44 = rawValue[v44 + 4], (v39 = *(_QWORD *)(v44 + 16)) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v49 = MEMORY[0x1E0DEE9D8];
    goto LABEL_96;
  }
  v43 = v48 + v39;
  if (__OFADD__(v48, v39))
    goto LABEL_343;
  if (v43 > 7)
  {
    v43 = 8;
LABEL_101:
    swift_bridgeObjectRetain();
    v49 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v49 + 16) = v43;
    bzero((void *)(v49 + 32), 2 * v43);
    goto LABEL_102;
  }
  if (v43 < 0)
    goto LABEL_373;
  if (v43)
    goto LABEL_101;
  swift_bridgeObjectRetain();
  v49 = MEMORY[0x1E0DEE9D8];
LABEL_102:
  v67 = 0;
  v68 = v44 + 32;
  v69 = v49 + 32;
  while (1)
  {
    if (v67 == v39)
      goto LABEL_336;
    v70 = 0;
    v71 = 0;
    v72 = v67 + 1;
    do
    {
      if (v48 == v71)
        goto LABEL_311;
      v75 = v71 + v67;
      if (__OFADD__(v71, v67))
        goto LABEL_312;
      if (v75 >= v43)
      {
        if (v70)
          goto LABEL_129;
        v70 = *(unsigned __int16 *)(v68 + 2 * v67);
        if (*(_WORD *)(v68 + 2 * v67))
        {
          v70 = *(unsigned __int16 *)(v41 + 2 * v71 + 32);
          if (*(_WORD *)(v41 + 2 * v71 + 32))
            goto LABEL_129;
        }
      }
      else
      {
        if (v75 < 0)
        {
          __break(1u);
LABEL_316:
          __break(1u);
LABEL_317:
          __break(1u);
LABEL_318:
          __break(1u);
LABEL_319:
          __break(1u);
LABEL_320:
          __break(1u);
LABEL_321:
          __break(1u);
LABEL_322:
          __break(1u);
          goto LABEL_323;
        }
        if ((unint64_t)v75 >= *(_QWORD *)(v49 + 16))
          goto LABEL_316;
        v73 = 2 * v75;
        v74 = v70
            + *(unsigned __int16 *)(v69 + v73)
            + *(unsigned __int16 *)(v41 + 2 * v71 + 32) * *(unsigned __int16 *)(v68 + 2 * v67);
        v70 = HIWORD(v74);
        *(_WORD *)(v69 + v73) = v74;
      }
      ++v71;
    }
    while (v48 != v71);
    if (!v70)
      goto LABEL_123;
    v50 = __OFADD__(v48, v67);
    v76 = v48 + v67;
    if (v50)
      goto LABEL_348;
    if (v76 >= v43)
      break;
    if (v76 < 0)
      goto LABEL_349;
    if ((unint64_t)v76 >= *(_QWORD *)(v49 + 16))
      goto LABEL_350;
    *(_WORD *)(v69 + 2 * v76) = v70;
LABEL_123:
    v67 = v72;
    if (v72 == v39)
    {
      v77 = *(_QWORD *)(v49 + 16);
      if (v77 && !*(_WORD *)(v69 + 2 * v77 - 2))
      {
        do
        {
          *(_QWORD *)(v49 + 16) = v77 - 1;
          if (v77 == 1)
            break;
        }
        while (!*(unsigned __int16 *)(v49 + 28 + 2 * v77--));
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_96:
      NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v49);
      if (!v29)
      {
        v65 = *(_QWORD *)(v49 + 16);
        swift_bridgeObjectRelease();
        if (HIDWORD(v65))
          goto LABEL_374;
        _So9NSDecimala__length_setter(v65, (_DWORD *)v35);
        v188 = *(_DWORD *)v187;
        v189 = *(_OWORD *)((char *)v187 + 4);
        v66 = _So9NSDecimala__exponent_getter((char *)&v188);
        goto LABEL_99;
      }
      goto LABEL_191;
    }
  }
LABEL_129:
  lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
  v39 = swift_allocError();
  *v79 = 0;
  swift_willThrow();
  swift_bridgeObjectRelease();
  LOWORD(v29) = 0;
LABEL_130:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  NSDecimal.asVariableLengthInteger()(v182, v179, v176);
  v81 = *(_QWORD *)(v80 + 16);
  swift_bridgeObjectRelease();
  v82 = floor((double)(8 - v81) * 4.81647993);
  if ((~*(_QWORD *)&v82 & 0x7FF0000000000000) == 0)
    goto LABEL_328;
  v83 = (uint64_t)v187;
  if (v82 <= -9.22337204e18)
  {
LABEL_329:
    __break(1u);
    goto LABEL_330;
  }
  if (v82 >= 9.22337204e18)
  {
LABEL_330:
    __break(1u);
    goto LABEL_331;
  }
  v84 = (uint64_t)v82;
  NSDecimal.asVariableLengthInteger()(*v187, v187[1], *((_DWORD *)v187 + 4));
  v185 = v84;
  v86 = v84 - v174;
  if (__OFSUB__(v84, v174))
  {
LABEL_331:
    __break(1u);
    goto LABEL_332;
  }
  v43 = v85;
  if (!v86)
  {
    v87 = v85;
    goto LABEL_190;
  }
  v87 = specialized abs<A>(_:)(v84 - v174);
  v88 = (uint64_t)powerOfTen._rawValue;
  v39 = *((_QWORD *)powerOfTen._rawValue + 2);
  v173 = v35;
  if (v39 > v87)
  {
    swift_bridgeObjectRetain();
    v35 = v43;
    if ((v87 & 0x8000000000000000) == 0)
      goto LABEL_137;
LABEL_257:
    __break(1u);
LABEL_258:
    v128 = powerOfTen._rawValue;
    v35 = v41;
LABEL_259:
    if ((v88 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)v88 < v128[2])
      {
        v149 = v128[v88 + 4];
        if (v83 < 0)
        {
          swift_bridgeObjectRetain();
          v131 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)(v43, v149, 8uLL);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          v39 = *(_QWORD *)(v43 + 16);
          if (v39)
          {
            v87 = *(_QWORD *)(v149 + 16);
            if (v87)
            {
              v41 = v35;
              v150 = v39 + v87;
              if (__OFADD__(v39, v87))
                goto LABEL_369;
              if (v150 <= 7)
              {
                if (v150 < 0)
                  goto LABEL_373;
                if (!v150)
                {
                  swift_bridgeObjectRetain();
                  v131 = MEMORY[0x1E0DEE9D8];
LABEL_281:
                  v152 = 0;
                  v153 = v149 + 32;
                  v154 = v131 + 32;
                  while (v152 != v87)
                  {
                    v155 = 0;
                    v156 = 0;
                    v157 = v152 + 1;
                    do
                    {
                      if (v39 == v156)
                        goto LABEL_338;
                      v160 = v156 + v152;
                      if (__OFADD__(v156, v152))
                        goto LABEL_339;
                      if (v160 >= v150)
                      {
                        if (v155)
                          goto LABEL_308;
                        v155 = *(unsigned __int16 *)(v153 + 2 * v152);
                        if (*(_WORD *)(v153 + 2 * v152))
                        {
                          v155 = *(unsigned __int16 *)(v43 + 2 * v156 + 32);
                          if (*(_WORD *)(v43 + 2 * v156 + 32))
                            goto LABEL_308;
                        }
                      }
                      else
                      {
                        if (v160 < 0)
                          goto LABEL_346;
                        if ((unint64_t)v160 >= *(_QWORD *)(v131 + 16))
                          goto LABEL_347;
                        v158 = 2 * v160;
                        v159 = v155
                             + *(unsigned __int16 *)(v154 + v158)
                             + *(unsigned __int16 *)(v43 + 2 * v156 + 32) * *(unsigned __int16 *)(v153 + 2 * v152);
                        v155 = HIWORD(v159);
                        *(_WORD *)(v154 + v158) = v159;
                      }
                      ++v156;
                    }
                    while (v39 != v156);
                    if (v155)
                    {
                      v50 = __OFADD__(v39, v152);
                      v161 = v39 + v152;
                      if (v50)
                        goto LABEL_370;
                      if (v161 >= v150)
                      {
LABEL_308:
                        lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
                        v164 = swift_allocError();
                        *v165 = 0;
                        swift_willThrow();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        v108 = (void *)v164;
                        goto LABEL_192;
                      }
                      if (v161 < 0)
                        goto LABEL_371;
                      if ((unint64_t)v161 >= *(_QWORD *)(v131 + 16))
                        goto LABEL_372;
                      *(_WORD *)(v154 + 2 * v161) = v155;
                    }
                    v152 = v157;
                    if (v157 == v87)
                    {
                      v162 = *(_QWORD *)(v131 + 16);
                      if (v162 && !*(_WORD *)(v154 + 2 * v162 - 2))
                      {
                        do
                        {
                          *(_QWORD *)(v131 + 16) = v162 - 1;
                          if (v162 == 1)
                            break;
                        }
                        while (!*(unsigned __int16 *)(v131 + 28 + 2 * v162--));
                      }
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      v35 = v41;
                      v83 = v185;
                      goto LABEL_272;
                    }
                  }
LABEL_368:
                  __break(1u);
LABEL_369:
                  __break(1u);
LABEL_370:
                  __break(1u);
LABEL_371:
                  __break(1u);
LABEL_372:
                  __break(1u);
LABEL_373:
                  _assertionFailure(_:_:file:line:flags:)();
                  __break(1u);
LABEL_374:
                  result = _assertionFailure(_:_:file:line:flags:)();
                  __break(1u);
                  return result;
                }
LABEL_280:
                swift_bridgeObjectRetain();
                v131 = static Array._allocateBufferUninitialized(minimumCapacity:)();
                *(_QWORD *)(v131 + 16) = v150;
                bzero((void *)(v131 + 32), 2 * v150);
                goto LABEL_281;
              }
LABEL_279:
              v150 = 8;
              goto LABEL_280;
            }
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v131 = MEMORY[0x1E0DEE9D8];
        }
LABEL_272:
        NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v131);
        if (!v29)
        {
          v149 = *(_QWORD *)(v131 + 16);
          swift_bridgeObjectRelease();
          if (HIDWORD(v149))
            goto LABEL_374;
          _So9NSDecimala__length_setter(v149, (_DWORD *)v35);
          if (v83 >= (uint64_t)0xFFFFFFFF80000000)
          {
            if (v83 <= 0x7FFFFFFF)
            {
              v188 = *(_DWORD *)v35;
              v189 = *(_OWORD *)(v35 + 4);
              v151 = _So9NSDecimala__exponent_getter((char *)&v188);
              v50 = __OFSUB__(v151, (_DWORD)v83);
              v66 = (v151 - v83);
              if (v50)
              {
                __break(1u);
                goto LABEL_279;
              }
LABEL_99:
              _So9NSDecimala__exponent_setter(v66, (_BYTE *)v35);
              _So9NSDecimala__isCompact_setter_0(0, (_DWORD *)v35);
              goto LABEL_193;
            }
LABEL_367:
            __break(1u);
            goto LABEL_368;
          }
LABEL_366:
          __break(1u);
          goto LABEL_367;
        }
LABEL_191:
        swift_bridgeObjectRelease();
        v108 = v29;
        goto LABEL_192;
      }
LABEL_361:
      __break(1u);
LABEL_362:
      __break(1u);
LABEL_363:
      __break(1u);
LABEL_364:
      __break(1u);
LABEL_365:
      __break(1u);
      goto LABEL_366;
    }
LABEL_360:
    __break(1u);
    goto LABEL_361;
  }
  if (!v39)
    goto LABEL_344;
  v90 = v39 - 1;
  swift_bridgeObjectRetain();
  v35 = v43;
  v183 = v86;
  do
  {
    if ((unint64_t)v39 > *((_QWORD *)powerOfTen._rawValue + 2))
      goto LABEL_327;
    v41 = *((_QWORD *)powerOfTen._rawValue + v90 + 4);
    if (v86 < 0)
    {
      v104 = v90;
      swift_bridgeObjectRetain();
      v105 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)(v35, v41, 8uLL);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v35 = v105;
      v90 = v104;
    }
    else
    {
      v40 = *(_QWORD *)(v35 + 16);
      if (v40 && (v91 = *(_QWORD *)(v41 + 16)) != 0)
      {
        v180 = v43;
        if (__OFADD__(v40, v91))
          goto LABEL_345;
        v177 = v90;
        if ((uint64_t)(v40 + v91) >= 8)
          v43 = 8;
        else
          v43 = v40 + v91;
        if (v43 < 0)
          goto LABEL_373;
        swift_bridgeObjectRetain();
        v49 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(_QWORD *)(v49 + 16) = v43;
        v44 = v49 + 32;
        bzero((void *)(v49 + 32), 2 * v43);
        v92 = 0;
        v93 = v41 + 32;
        do
        {
          v94 = 0;
          v95 = 0;
          v96 = v92++;
          do
          {
            v97 = v95 + v96;
            if (__OFADD__(v95, v96))
              goto LABEL_313;
            if (v97 >= v43)
            {
              if (v94)
                goto LABEL_186;
              v94 = *(unsigned __int16 *)(v93 + 2 * v96);
              if (*(_WORD *)(v93 + 2 * v96))
              {
                v94 = *(unsigned __int16 *)(v35 + 2 * v95 + 32);
                if (*(_WORD *)(v35 + 2 * v95 + 32))
                  goto LABEL_186;
              }
            }
            else
            {
              if (v97 < 0)
                goto LABEL_317;
              if ((unint64_t)v97 >= *(_QWORD *)(v49 + 16))
                goto LABEL_318;
              v98 = 2 * v97;
              v99 = v94
                  + *(unsigned __int16 *)(v44 + v98)
                  + *(unsigned __int16 *)(v35 + 2 * v95 + 32) * *(unsigned __int16 *)(v93 + 2 * v96);
              v94 = HIWORD(v99);
              *(_WORD *)(v44 + v98) = v99;
            }
            ++v95;
          }
          while (v40 != v95);
          if (v94)
          {
            v50 = __OFADD__(v40, v96);
            v100 = v40 + v96;
            if (v50)
              goto LABEL_355;
            if (v100 >= v43)
            {
LABEL_186:
              lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
              v106 = swift_allocError();
              *v107 = 0;
              swift_willThrow();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v108 = (void *)v106;
              goto LABEL_192;
            }
            if (v100 < 0)
              goto LABEL_356;
            if ((unint64_t)v100 >= *(_QWORD *)(v49 + 16))
              goto LABEL_357;
            *(_WORD *)(v44 + 2 * v100) = v94;
          }
        }
        while (v92 != v91);
        v101 = *(_QWORD *)(v49 + 16);
        if (v101 && !*(_WORD *)(v44 + 2 * v101 - 2))
        {
          v102 = v101 + 14;
          do
          {
            *(_QWORD *)(v49 + 16) = v102 - 15;
            if (v102 == 15)
              break;
          }
          while (!*(unsigned __int16 *)(v49 + 2 * v102--));
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v35 = v49;
        v83 = (uint64_t)v187;
        v43 = v180;
        v86 = v183;
        v90 = v177;
      }
      else
      {
        swift_bridgeObjectRelease();
        v35 = MEMORY[0x1E0DEE9D8];
        v86 = v183;
      }
    }
    v87 -= v90;
  }
  while (v39 <= v87);
  v88 = (uint64_t)powerOfTen._rawValue;
  if (v87 < 0)
    goto LABEL_257;
LABEL_137:
  if ((unint64_t)v87 >= *(_QWORD *)(v88 + 16))
  {
LABEL_342:
    __break(1u);
LABEL_343:
    __break(1u);
LABEL_344:
    __break(1u);
LABEL_345:
    __break(1u);
LABEL_346:
    __break(1u);
LABEL_347:
    __break(1u);
LABEL_348:
    __break(1u);
LABEL_349:
    __break(1u);
LABEL_350:
    __break(1u);
    goto LABEL_351;
  }
  v44 = *(_QWORD *)(v88 + 8 * v87 + 32);
  if (v86 < 0)
  {
    swift_bridgeObjectRetain();
    v87 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)(v35, v44, 8uLL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_189;
  }
  v89 = *(_QWORD *)(v35 + 16);
  if (!v89 || (v39 = *(_QWORD *)(v44 + 16)) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v87 = MEMORY[0x1E0DEE9D8];
LABEL_189:
    v35 = v173;
    goto LABEL_190;
  }
  v41 = v86;
  v40 = v43;
  v43 = v89 + v39;
  if (__OFADD__(v89, v39))
  {
LABEL_359:
    __break(1u);
    goto LABEL_360;
  }
  if (v43 > 7)
  {
    v43 = 8;
  }
  else
  {
    if (v43 < 0)
      goto LABEL_373;
    if (!v43)
    {
      swift_bridgeObjectRetain();
      v87 = MEMORY[0x1E0DEE9D8];
      goto LABEL_222;
    }
  }
  swift_bridgeObjectRetain();
  v87 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(v87 + 16) = v43;
  bzero((void *)(v87 + 32), 2 * v43);
LABEL_222:
  v132 = 0;
  v133 = v44 + 32;
  v134 = v87 + 32;
  while (2)
  {
    if (v132 == v39)
    {
      __break(1u);
      goto LABEL_359;
    }
    v135 = 0;
    v136 = 0;
    v137 = v132 + 1;
    do
    {
      if (v89 == v136)
        goto LABEL_320;
      v138 = v136 + v132;
      if (__OFADD__(v136, v132))
        goto LABEL_321;
      if (v138 >= v43)
      {
        if (v135)
          goto LABEL_248;
        v135 = *(unsigned __int16 *)(v133 + 2 * v132);
        if (*(_WORD *)(v133 + 2 * v132))
        {
          v135 = *(unsigned __int16 *)(v35 + 2 * v136 + 32);
          if (*(_WORD *)(v35 + 2 * v136 + 32))
            goto LABEL_248;
        }
      }
      else
      {
        if (v138 < 0)
        {
          __break(1u);
LABEL_326:
          __break(1u);
LABEL_327:
          __break(1u);
LABEL_328:
          __break(1u);
          goto LABEL_329;
        }
        if ((unint64_t)v138 >= *(_QWORD *)(v87 + 16))
          goto LABEL_326;
        v139 = 2 * v138;
        v140 = v135
             + *(unsigned __int16 *)(v134 + v139)
             + *(unsigned __int16 *)(v35 + 2 * v136 + 32) * *(unsigned __int16 *)(v133 + 2 * v132);
        v135 = HIWORD(v140);
        *(_WORD *)(v134 + v139) = v140;
      }
      ++v136;
    }
    while (v89 != v136);
    if (!v135)
      goto LABEL_242;
    v50 = __OFADD__(v89, v132);
    v141 = v89 + v132;
    if (v50)
      goto LABEL_362;
    if (v141 < v43)
    {
      if (v141 < 0)
        goto LABEL_363;
      if ((unint64_t)v141 >= *(_QWORD *)(v87 + 16))
        goto LABEL_364;
      *(_WORD *)(v134 + 2 * v141) = v135;
LABEL_242:
      v132 = v137;
      if (v137 != v39)
        continue;
      v142 = *(_QWORD *)(v87 + 16);
      if (v142 && !*(_WORD *)(v134 + 2 * v142 - 2))
      {
        do
        {
          *(_QWORD *)(v87 + 16) = v142 - 1;
          if (v142 == 1)
            break;
        }
        while (!*(unsigned __int16 *)(v87 + 28 + 2 * v142--));
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v35 = v173;
      v86 = v41;
LABEL_190:
      NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v87);
      if (v29)
        goto LABEL_191;
      v120 = *(_QWORD *)(v87 + 16);
      swift_bridgeObjectRelease();
      if (!(v120 >> 31))
      {
        _So9NSDecimala__length_setter(v120, (_DWORD *)v83);
        if (v86 >= (uint64_t)0xFFFFFFFF80000000)
        {
          if (v86 <= 0x7FFFFFFF)
          {
            v188 = *(_DWORD *)v83;
            v189 = *(_OWORD *)(v83 + 4);
            v121 = _So9NSDecimala__exponent_getter((char *)&v188);
            v50 = __OFSUB__(v121, (_DWORD)v86);
            v122 = (v121 - v86);
            if (!v50)
            {
              _So9NSDecimala__exponent_setter(v122, (_BYTE *)v83);
              _So9NSDecimala__isCompact_setter_0(0, (_DWORD *)v83);
              v188 = *(_DWORD *)v83;
              v189 = *(_OWORD *)(v83 + 4);
              v123 = _So9NSDecimala__length_getter(&v188);
              v124 = *(unsigned __int16 *)(v35 + 4);
              v125 = *(unsigned __int16 *)(v35 + 6);
              if (!v123)
              {
                v129 = *(_DWORD *)(v35 + 16);
                v188 = *(_DWORD *)v35;
                LOWORD(v189) = v124;
                WORD1(v189) = v125;
                *(_QWORD *)((char *)&v189 + 4) = *(_QWORD *)(v35 + 8);
                HIDWORD(v189) = v129;
                v130 = _So9NSDecimala__exponent_getter((char *)&v188);
                _So9NSDecimala__exponent_setter(v130, (_BYTE *)v83);
                goto LABEL_193;
              }
              NSDecimal.asVariableLengthInteger()(*(unsigned int *)v35 | (unint64_t)(v124 << 32) | (v125 << 48), *(_QWORD *)(v35 + 8), *(_DWORD *)(v35 + 16));
              v127 = v126;
              v83 = v185;
              if (!v185)
              {
                v131 = v126;
                goto LABEL_272;
              }
              v88 = specialized abs<A>(_:)(v185);
              v128 = powerOfTen._rawValue;
              v39 = *((_QWORD *)powerOfTen._rawValue + 2);
              if (v39 > v88)
              {
                swift_bridgeObjectRetain();
                v43 = v127;
                goto LABEL_259;
              }
              if (!v39)
                goto LABEL_365;
              v41 = v35;
              v87 = v39 - 1;
              swift_bridgeObjectRetain();
              v146 = v127;
              while ((unint64_t)v39 <= *((_QWORD *)powerOfTen._rawValue + 2))
              {
                v148 = *((_QWORD *)powerOfTen._rawValue + v87 + 4);
                swift_bridgeObjectRetain();
                if (v185 < 0)
                  v147 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)(v146, v148, 8uLL);
                else
                  v147 = specialized static NSDecimal._integerMultiply(lhs:rhs:maxResultLength:)(v146, v148, 8);
                v43 = v147;
                v88 -= v87;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v146 = v43;
                if (v39 > v88)
                  goto LABEL_258;
              }
LABEL_335:
              __break(1u);
LABEL_336:
              __break(1u);
LABEL_337:
              __break(1u);
LABEL_338:
              __break(1u);
LABEL_339:
              __break(1u);
LABEL_340:
              __break(1u);
              goto LABEL_341;
            }
LABEL_354:
            __break(1u);
LABEL_355:
            __break(1u);
LABEL_356:
            __break(1u);
LABEL_357:
            __break(1u);
          }
LABEL_353:
          __break(1u);
          goto LABEL_354;
        }
LABEL_352:
        __break(1u);
        goto LABEL_353;
      }
LABEL_351:
      __break(1u);
      goto LABEL_352;
    }
    break;
  }
LABEL_248:
  lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
  v144 = swift_allocError();
  *v145 = 0;
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v108 = (void *)v144;
LABEL_192:

LABEL_193:
  v39 = v193;
  v109 = (unint64_t *)WORD2(v193);
  LOWORD(v29) = HIWORD(v193);
  v40 = WORD1(v194);
  v35 = WORD2(v194);
  v43 = HIWORD(v194);
  LODWORD(v41) = (unsigned __int16)v195;
  LOWORD(v185) = v194;
  LOWORD(v49) = HIWORD(v195);
  NSDecimal.asVariableLengthInteger()(v193 | ((unint64_t)WORD2(v193) << 32) | ((unint64_t)HIWORD(v193) << 48), (unsigned __int16)v194 | ((unint64_t)WORD1(v194) << 16) | ((unint64_t)WORD2(v194) << 32) | ((unint64_t)HIWORD(v194) << 48), (unsigned __int16)v195 | (HIWORD(v195) << 16));
  v44 = v110;
  NSDecimal.asVariableLengthInteger()(v190, v191, v192);
  v112 = *(_QWORD *)(v44 + 16);
  v113 = *(_QWORD *)(v111 + 16);
  v187 = v109;
  if (v113 >= v112)
  {
    if (v112 >= v113)
    {
      if (!v112)
        goto LABEL_314;
      v114 = 2 * v112 - 2;
      v115 = *(unsigned __int16 *)(v44 + v114 + 32);
      v116 = *(unsigned __int16 *)(v111 + v114 + 32);
      if (v116 < v115)
        goto LABEL_194;
      if (v115 >= v116)
      {
        v117 = v112 - 2;
        v38 = 1;
        while (v112 != 1)
        {
          if (v117 >= (uint64_t)v113)
            goto LABEL_319;
          v118 = *(unsigned __int16 *)(v44 + 28 + 2 * v112);
          v119 = *(unsigned __int16 *)(v111 + 28 + 2 * v112);
          if (v119 < v118)
            goto LABEL_197;
          --v112;
          if (v118 < v119)
            goto LABEL_196;
        }
        goto LABEL_314;
      }
    }
LABEL_196:
    v38 = -1;
    goto LABEL_197;
  }
LABEL_194:
  v38 = 1;
LABEL_197:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v188 = v39;
  LOWORD(v189) = (_WORD)v187;
  WORD1(v189) = (_WORD)v29;
  WORD2(v189) = v185;
  WORD3(v189) = v40;
  WORD4(v189) = v35;
  WORD5(v189) = v43;
  WORD6(v189) = v41;
  HIWORD(v189) = v49;
  if (_So9NSDecimala__isNegative_getter(&v188) && v38 != -1 && v38)
LABEL_33:
    v38 = -1;
  return v38 == 0;
}

unint64_t specialized NSDecimal.init(_:)(unint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v4 = 0;
  v5 = 0;
  v6 = 0;
  if (result)
  {
    v1 = result;
    if (__ROR8__(0xCCCCCCCCCCCCCCCDLL * result, 1) <= 0x1999999999999999uLL)
    {
      v3 = 0;
      while (1)
      {
        v2 = (v3 + 1);
        if (__OFADD__(v3, 1))
          break;
        v1 /= 0xAuLL;
        ++v3;
        if (__ROR8__(0xCCCCCCCCCCCCCCCDLL * v1, 1) >= 0x199999999999999AuLL)
          goto LABEL_7;
      }
      __break(1u);
    }
    else
    {
      v2 = 0;
LABEL_7:
      _So9NSDecimala__isCompact_setter_0(1, &v4);
      _So9NSDecimala__exponent_setter(v2, &v4);
      _So9NSDecimala__length_setter((79 - __clz(v1)) >> 4, &v4);
      LOWORD(v5) = WORD2(v1);
      WORD1(v5) = HIWORD(v1);
      return v4 | (v1 << 32);
    }
  }
  return result;
}

_DWORD *_So9NSDecimala__reserved_setter(_DWORD *result)
{
  *result &= 0x3FFFu;
  return result;
}

void specialized static NSDecimal.+= infix(_:_:)(int *a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  __int16 v7;
  __int16 v8;
  __int16 v9;
  unsigned __int16 v10;
  unsigned __int16 v11;
  unsigned __int16 v12;
  unsigned __int16 v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  __int16 v30;
  unsigned int v31;
  int v32;
  int isNegative_getter;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t MutableAnd;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  char *v72;
  __int128 *v73;
  unint64_t v74;
  unsigned int v75;
  unint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *rawValue;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  Swift::OpaquePointer v87;
  BOOL v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int16 v101;
  void *v102;
  _BYTE *v103;
  uint64_t v104;
  unint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  __int16 v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  unint64_t v119;
  void *v120;
  unint64_t v121;
  uint64_t v122;
  _DWORD *v123;
  __int16 v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  void *v131;
  uint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _BYTE *v139;
  uint64_t v140;
  uint64_t v141;
  double v142;
  unsigned int *v143;
  Swift::OpaquePointer v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  unsigned int v149;
  unsigned int v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  int v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  Swift::OpaquePointer v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  uint64_t v168;
  unsigned int v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unsigned int v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  unsigned int v193;
  unsigned int v194;
  unint64_t v195;
  __int16 v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  unint64_t v200;
  int64_t v201;
  unint64_t v202;
  __int16 v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  __int16 v213;
  __int16 v214;
  __int16 v215;
  __int16 v216;
  __int16 v217;
  __int16 v218;
  __int16 v219;
  int v220;
  unint64_t v221;
  int v222;
  uint64_t v223;
  void *v224;
  void *v225;
  void *v226;
  unint64_t v227;
  int v228;
  uint64_t v229;
  uint64_t v230;
  int v231;
  int v232;
  unint64_t v233;
  unsigned int v234;
  unint64_t v236;
  uint64_t v237;
  _BYTE *v238;
  _BYTE *v239;
  int v240;
  __int16 v241;
  __int16 v242;
  uint64_t v243;
  __int16 v244;
  unsigned int v245;
  unint64_t v246;
  unint64_t v247;
  unsigned int v248;
  unint64_t v249;
  unint64_t v250;
  uint64_t v251;
  void *v252;
  __int16 v254;
  uint64_t v255;
  uint64_t v256;
  unsigned int v257;
  uint64_t v258;
  uint64_t v259;
  __int16 v260;
  unsigned int v261;
  unsigned __int16 v262;
  int v263;
  unint64_t v264;
  unint64_t v265;
  unsigned __int16 v266;
  unsigned __int16 v267;
  uint64_t v268;
  uint64_t v269;
  unsigned __int16 v270;
  uint64_t v271;
  uint64_t v272;
  unsigned int *v273;
  __int16 v274;
  unint64_t v275;
  __int16 v276;
  __int128 v277;
  int v278;
  _BYTE v279[20];
  __int128 v280;
  unsigned int v281;
  unsigned int v282;
  __int128 v283;
  uint64_t v284;

  v284 = *MEMORY[0x1E0C80C00];
  v7 = *((_WORD *)a1 + 2);
  v8 = *((_WORD *)a1 + 4);
  v9 = *((_WORD *)a1 + 5);
  v10 = *((_WORD *)a1 + 6);
  v11 = *((_WORD *)a1 + 7);
  v12 = *((_WORD *)a1 + 8);
  v254 = *((_WORD *)a1 + 3);
  v13 = *((_WORD *)a1 + 9);
  v257 = *a1;
  v282 = *a1;
  v260 = v7;
  LOWORD(v283) = v7;
  WORD1(v283) = v254;
  WORD2(v283) = v8;
  v274 = v9;
  WORD3(v283) = v9;
  v267 = v11;
  v270 = v10;
  WORD4(v283) = v10;
  WORD5(v283) = v11;
  v266 = v12;
  WORD6(v283) = v12;
  v262 = v13;
  HIWORD(v283) = v13;
  if (!_So9NSDecimala__length_getter(&v282))
  {
    v282 = v257;
    LOWORD(v283) = v260;
    WORD1(v283) = v254;
    WORD2(v283) = v8;
    WORD3(v283) = v274;
    WORD4(v283) = v270;
    WORD5(v283) = v267;
    WORD6(v283) = v266;
    HIWORD(v283) = v262;
    if (_So9NSDecimala__isNegative_getter(&v282))
      goto LABEL_30;
  }
  v282 = a2;
  v14 = HIDWORD(a2);
  LOWORD(v283) = WORD2(a2);
  WORD1(v283) = HIWORD(a2);
  *(_QWORD *)((char *)&v283 + 4) = a3;
  HIDWORD(v283) = a4;
  if (!_So9NSDecimala__length_getter(&v282))
  {
    v282 = a2;
    LOWORD(v283) = WORD2(a2);
    WORD1(v283) = HIWORD(a2);
    *(_QWORD *)((char *)&v283 + 4) = a3;
    HIDWORD(v283) = a4;
    if (_So9NSDecimala__isNegative_getter(&v282))
      goto LABEL_30;
  }
  v282 = v257;
  LOWORD(v283) = v260;
  WORD1(v283) = v254;
  WORD2(v283) = v8;
  WORD3(v283) = v274;
  WORD4(v283) = v270;
  WORD5(v283) = v267;
  WORD6(v283) = v266;
  HIWORD(v283) = v262;
  if (!_So9NSDecimala__length_getter(&v282))
  {
    v26 = HIWORD(a2);
    v27 = a3 >> 16;
    v28 = HIDWORD(a3);
    v29 = HIWORD(a3);
    v30 = a4;
    v31 = HIWORD(a4);
    goto LABEL_306;
  }
  v282 = a2;
  LOWORD(v283) = WORD2(a2);
  WORD1(v283) = HIWORD(a2);
  *(_QWORD *)((char *)&v283 + 4) = a3;
  HIDWORD(v283) = a4;
  if (!_So9NSDecimala__length_getter(&v282))
  {
    LODWORD(a2) = v257;
    LOWORD(v14) = v260;
    LOWORD(v31) = v262;
    LOWORD(a3) = v8;
    LOWORD(v26) = v254;
    LOWORD(v27) = v274;
    LOWORD(v29) = v267;
    LOWORD(v28) = v270;
    v30 = v266;
    goto LABEL_306;
  }
  v252 = 0;
  v282 = v257;
  LOWORD(v283) = v260;
  WORD1(v283) = v254;
  WORD2(v283) = v8;
  WORD3(v283) = v274;
  WORD4(v283) = v270;
  WORD5(v283) = v267;
  WORD6(v283) = v266;
  HIWORD(v283) = v262;
  *(_QWORD *)&v280 = a2;
  *((_QWORD *)&v280 + 1) = a3;
  v281 = a4;
  *(_DWORD *)v279 = v257;
  *(_WORD *)&v279[4] = v260;
  *(_WORD *)&v279[6] = v254;
  *(_WORD *)&v279[8] = v8;
  *(_WORD *)&v279[10] = v274;
  *(_QWORD *)&v279[12] = __PAIR64__(__PAIR32__(v262, v266), __PAIR32__(v267, v270));
  v15 = _So9NSDecimala__exponent_getter(v279);
  *(_QWORD *)v279 = a2;
  *(_QWORD *)&v279[8] = a3;
  *(_DWORD *)&v279[16] = a4;
  v16 = _So9NSDecimala__exponent_getter(v279);
  v17 = v15 - v16;
  if ((_DWORD)v15 == v16)
  {
    v18 = 0;
    goto LABEL_7;
  }
  v40 = v17;
  if (v17 < 0)
  {
    v72 = (char *)&v280 + 4;
    v40 = -v40;
    v20 = (uint64_t)&v280;
    v73 = (__int128 *)&v282;
    v74 = HIDWORD(a2);
    v75 = a2;
    v41 = 0;
  }
  else
  {
    v72 = (char *)&v283;
    v20 = (uint64_t)&v282;
    v73 = &v280;
    v41 = 0;
    LOWORD(v74) = v260;
    v75 = v257;
  }
  v76 = v75 | ((unint64_t)(unsigned __int16)v74 << 32) | ((unint64_t)*((unsigned __int16 *)v72 + 1) << 48);
  v34 = *(_QWORD *)(v72 + 4);
  LODWORD(v77) = *((_DWORD *)v72 + 3);
  NSDecimal.asVariableLengthInteger()(v76, v34, v77);
  v79 = (uint64_t)v78;
  if (!v40)
  {
    v87._rawValue = v78;
    goto LABEL_106;
  }
  v265 = v76;
  v275 = (unint64_t)v73;
  v80 = one-time initialization token for powerOfTen;
  swift_bridgeObjectRetain();
  if (v80 != -1)
    goto LABEL_312;
LABEL_40:
  rawValue = powerOfTen._rawValue;
  v82 = *((_QWORD *)powerOfTen._rawValue + 2);
  v273 = (unsigned int *)v20;
  v264 = v34;
  v261 = v77;
  if (v82 > v40)
  {
    v34 = v79;
    v77 = v40;
    goto LABEL_42;
  }
  if (!v82)
    goto LABEL_320;
  v15 = v82 - 1;
  v34 = v79;
  v77 = v40;
  do
  {
    v88 = __OFSUB__(v77, v15);
    v77 -= v15;
    if (v88)
      goto LABEL_310;
    if ((unint64_t)v82 > *((_QWORD *)powerOfTen._rawValue + 2))
    {
LABEL_311:
      __break(1u);
LABEL_312:
      swift_once();
      goto LABEL_40;
    }
    v84 = *(_QWORD *)(v34 + 16);
    if (v84 && (v269 = *((_QWORD *)powerOfTen._rawValue + v15 + 4), (v41 = *(void **)(v269 + 16)) != 0))
    {
      v259 = v79;
      if (__OFADD__(v84, v41))
      {
        __break(1u);
LABEL_323:
        __break(1u);
LABEL_324:
        __break(1u);
LABEL_325:
        __break(1u);
LABEL_326:
        __break(1u);
LABEL_327:
        __break(1u);
        goto LABEL_328;
      }
      v256 = v40;
      if ((uint64_t)v41 + v84 >= 8)
        v79 = 8;
      else
        v79 = (uint64_t)v41 + v84;
      if (v79 < 0)
        goto LABEL_353;
      LOWORD(v83) = *((_QWORD *)powerOfTen._rawValue + v15 + 4);
      swift_bridgeObjectRetain();
      v40 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(v40 + 16) = v79;
      v20 = v40 + 32;
      bzero((void *)(v40 + 32), 2 * v79);
      v89 = 0;
      v90 = v269 + 32;
      do
      {
        v91 = 0;
        v92 = 0;
        v93 = v89++;
        do
        {
          v94 = v92 + v93;
          if (__OFADD__(v92, v93))
          {
            __break(1u);
LABEL_262:
            v85 = 0xFFFF;
            v118 = v92 + *(unsigned __int16 *)(v34 + 42) - *(unsigned __int16 *)(v40 + 42) + 0xFFFF;
            LODWORD(v92) = HIWORD(v118);
            *(_WORD *)(v84 + 42) = v118;
            if (v91 == 5)
            {
              v119 = 6;
              goto LABEL_276;
            }
            goto LABEL_268;
          }
          if (v94 >= v79)
          {
            if ((_DWORD)v91)
              goto LABEL_95;
            v91 = *(unsigned __int16 *)(v90 + 2 * v93);
            if (*(_WORD *)(v90 + 2 * v93))
            {
              v91 = *(unsigned __int16 *)(v34 + 2 * v92 + 32);
              if (*(_WORD *)(v34 + 2 * v92 + 32))
                goto LABEL_95;
            }
          }
          else
          {
            if (v94 < 0)
            {
              __break(1u);
LABEL_265:
              __break(1u);
LABEL_266:
              __break(1u);
LABEL_267:
              __break(1u);
LABEL_268:
              v86 = *(unsigned __int16 *)(v40 + 44);
              v118 = v92 + *(unsigned __int16 *)(v34 + 44) - v86 + v85;
              LODWORD(v92) = HIWORD(v118);
              *(_WORD *)(v84 + 44) = v118;
              if (v91 != 6)
                goto LABEL_274;
              v119 = 7;
LABEL_276:
              if (v119 >= v93)
              {
LABEL_288:
                if ((uint64_t)v119 < (uint64_t)v89)
                {
                  while (1)
                  {
LABEL_289:
                    if (v119 >= v89)
                      goto LABEL_341;
                    v93 = *(_QWORD *)(v84 + 16);
                    if (v119 < v93)
                      break;
LABEL_294:
                    __break(1u);
LABEL_295:
                    LODWORD(v92) = HIWORD(v86);
                    v119 = v93;
                    if ((uint64_t)v93 >= (uint64_t)v89)
                      goto LABEL_296;
                  }
                  v234 = v92 + (*(unsigned __int16 *)(v40 + 32 + 2 * v119) ^ 0xFFFF);
                  --v89;
                  v93 = v40 + 34;
                  while (1)
                  {
                    LODWORD(v92) = HIWORD(v234);
                    *(_WORD *)(v90 + 2 * v119) = v234;
                    if (v89 == v119)
                      break;
                    v234 = v92 + (*(unsigned __int16 *)(v93 + 2 * v119++) ^ 0xFFFF);
                    if (v119 >= *(_QWORD *)(v84 + 16))
                      goto LABEL_294;
                  }
                }
LABEL_296:
                if (!(_DWORD)v92)
                {
                  swift_bridgeObjectRelease();
                  lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
                  v18 = (void *)swift_allocError();
                  *v238 = 0;
                  swift_willThrow();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  goto LABEL_31;
                }
                v230 = *(_QWORD *)(v84 + 16);
                if (v230)
                  goto LABEL_298;
                goto LABEL_301;
              }
              if (!HIWORD(v118))
              {
                while (v119 < *(_QWORD *)(v84 + 16))
                {
                  v232 = *(unsigned __int16 *)(v94 + 2 * v119);
                  v86 = v232 + 0xFFFF;
                  *(_WORD *)(v90 + 2 * v119) = v232 - 1;
                  if (v93 - 1 == v119)
                    goto LABEL_295;
                  ++v119;
                  if (v232)
                    goto LABEL_281;
                }
                __break(1u);
                goto LABEL_314;
              }
LABEL_281:
              if (v119 <= v93)
                v233 = v93;
              else
                v233 = v119;
              while (v233 != v119)
              {
                if (v119 >= *(_QWORD *)(v84 + 16))
                  goto LABEL_309;
                *(_WORD *)(v90 + 2 * v119) = *(_WORD *)(v34 + 32 + 2 * v119);
                if ((uint64_t)++v119 >= (uint64_t)v93)
                {
                  LODWORD(v92) = 1;
                  goto LABEL_288;
                }
              }
              __break(1u);
LABEL_309:
              __break(1u);
LABEL_310:
              __break(1u);
              goto LABEL_311;
            }
            if ((unint64_t)v94 >= *(_QWORD *)(v40 + 16))
              goto LABEL_265;
            v95 = 2 * v94;
            v85 = *(unsigned __int16 *)(v34 + 2 * v92 + 32);
            v96 = v91 + *(unsigned __int16 *)(v20 + v95) + v85 * *(unsigned __int16 *)(v90 + 2 * v93);
            v91 = HIWORD(v96);
            *(_WORD *)(v20 + v95) = v96;
          }
          ++v92;
        }
        while (v84 != v92);
        if ((_DWORD)v91)
        {
          v88 = __OFADD__(v84, v93);
          v97 = v84 + v93;
          if (v88)
            goto LABEL_325;
          if (v97 >= v79)
          {
LABEL_95:
            v15 = v40;
            lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
            v102 = (void *)swift_allocError();
            *v103 = 0;
            v41 = v102;
            swift_willThrow();
            swift_bridgeObjectRelease();
            v73 = (__int128 *)v275;
            v40 = v256;
            goto LABEL_147;
          }
          if (v97 < 0)
            goto LABEL_326;
          if ((unint64_t)v97 >= *(_QWORD *)(v40 + 16))
            goto LABEL_327;
          *(_WORD *)(v20 + 2 * v97) = v91;
        }
      }
      while ((void *)v89 != v41);
      v98 = *(_QWORD *)(v40 + 16);
      if (v98)
      {
        v79 = v259;
        if (*(_WORD *)(v20 + 2 * v98 - 2))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v34 = v40;
          v20 = (uint64_t)v273;
        }
        else
        {
          v99 = v98 + 14;
          v20 = (uint64_t)v273;
          do
          {
            *(_QWORD *)(v40 + 16) = v99 - 15;
            if (v99 == 15)
              break;
          }
          while (!*(unsigned __int16 *)(v40 + 2 * v99--));
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v34 = v40;
        }
        v40 = v256;
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v34 = v40;
        v20 = (uint64_t)v273;
        v40 = v256;
        v79 = v259;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      v34 = MEMORY[0x1E0DEE9D8];
    }
  }
  while (v82 <= v77);
  rawValue = powerOfTen._rawValue;
  v41 = v252;
LABEL_42:
  v252 = v41;
  v73 = (__int128 *)v275;
  if (v77 < 0)
    goto LABEL_318;
  if ((unint64_t)v77 >= rawValue[2])
  {
LABEL_319:
    __break(1u);
LABEL_320:
    __break(1u);
    goto LABEL_321;
  }
  v83 = *(_QWORD *)(v34 + 16);
  if (!v83 || (v77 = rawValue[v77 + 4], (v41 = *(void **)(v77 + 16)) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v87._rawValue = (void *)MEMORY[0x1E0DEE9D8];
    goto LABEL_106;
  }
  v84 = (uint64_t)v41 + v83;
  if (__OFADD__(v83, v41))
    goto LABEL_332;
  if (v84 > 7)
  {
    v84 = 8;
LABEL_119:
    swift_bridgeObjectRetain();
    v15 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v15 + 16) = v84;
    bzero((void *)(v15 + 32), 2 * v84);
    goto LABEL_120;
  }
  if (v84 < 0)
  {
LABEL_353:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_354;
  }
  if (v84)
    goto LABEL_119;
  swift_bridgeObjectRetain();
  v15 = MEMORY[0x1E0DEE9D8];
LABEL_120:
  v91 = 0;
  v89 = v77 + 32;
  v90 = v15 + 32;
  while (2)
  {
    if ((void *)v91 == v41)
      goto LABEL_324;
    LODWORD(v92) = 0;
    v94 = 0;
    v93 = v91 + 1;
LABEL_124:
    if (v83 == v94)
      goto LABEL_266;
    v134 = v94 + v91;
    if (__OFADD__(v94, v91))
      goto LABEL_267;
    if (v134 >= v84)
    {
      if ((_DWORD)v92)
        goto LABEL_146;
      LODWORD(v92) = *(unsigned __int16 *)(v89 + 2 * v91);
      if (*(_WORD *)(v89 + 2 * v91))
      {
        LODWORD(v92) = *(unsigned __int16 *)(v34 + 2 * v94 + 32);
        if (*(_WORD *)(v34 + 2 * v94 + 32))
          goto LABEL_146;
      }
LABEL_123:
      if (v83 == ++v94)
      {
        if ((_DWORD)v92)
        {
          v88 = __OFADD__(v83, v91);
          v136 = v83 + v91;
          if (v88)
            goto LABEL_334;
          if (v136 >= v84)
          {
LABEL_146:
            lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
            v102 = (void *)swift_allocError();
            *v139 = 0;
            v41 = v102;
            swift_willThrow();
            swift_bridgeObjectRelease();
LABEL_147:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            NSDecimal.asVariableLengthInteger()(v265, v264, v261);
            v141 = *(_QWORD *)(v140 + 16);
            swift_bridgeObjectRelease();
            v142 = floor((double)(8 - v141) * 4.81647993);
            if ((~*(_QWORD *)&v142 & 0x7FF0000000000000) != 0)
            {
              v143 = v273;
              if (v142 > -9.22337204e18)
              {
                if (v142 < 9.22337204e18)
                {
                  v20 = (uint64_t)v142;
                  NSDecimal.asVariableLengthInteger()(*(_QWORD *)v73, *((_QWORD *)v73 + 1), *((_DWORD *)v73 + 4));
                  v83 = v20 - v40;
                  if (!__OFSUB__(v20, v40))
                  {
                    if (!v83)
                      goto LABEL_172;
                    v77 = v20 - v40;
                    if (v83 < 0)
                    {
                      v77 = v40 - v20;
                      if (__OFSUB__(0, v83))
                        goto LABEL_333;
                    }
                    v265 = v20;
                    v34 = (unint64_t)powerOfTen._rawValue;
                    v145 = *((_QWORD *)powerOfTen._rawValue + 2);
                    v146 = swift_bridgeObjectRetain();
                    if (v145 <= v77)
                    {
                      v41 = 0;
                      v40 = v145 - 1;
                      v90 = 1;
                      v84 = 1 - v145;
                      v15 = v146;
                      do
                      {
                        v79 = v77 - v40;
                        if (__OFSUB__(v77, v40))
                          goto LABEL_273;
                        v148 = powerOfTen._rawValue;
                        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v145 - 1, 1, powerOfTen._rawValue);
                        v34 = v148[v40 + 4];
                        swift_bridgeObjectRetain();
                        if (v83 < 0)
                          v147 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)(v15, v34, 8uLL);
                        else
                          v147 = specialized static NSDecimal._integerMultiply(lhs:rhs:maxResultLength:)(v15, v34, 8);
                        v20 = v147;
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        v77 += v84;
                        v15 = v20;
                      }
                      while (v145 <= v79);
                      v34 = (unint64_t)powerOfTen._rawValue;
                      v77 = v79;
                    }
                    else
                    {
                      v20 = v146;
                    }
                    v73 = (__int128 *)v275;
                    if ((v77 & 0x8000000000000000) == 0)
                    {
                      if ((unint64_t)v77 < *(_QWORD *)(v34 + 16))
                      {
                        v151 = *(_QWORD *)(v34 + 8 * v77 + 32);
                        swift_bridgeObjectRetain();
                        if (v83 < 0)
                          v152 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)(v20, v151, 8uLL);
                        else
                          v152 = specialized static NSDecimal._integerMultiply(lhs:rhs:maxResultLength:)(v20, v151, 8);
                        v15 = v152;
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        v144._rawValue = (void *)v15;
                        v143 = v273;
                        v20 = v265;
LABEL_172:
                        v153 = v144._rawValue;
                        NSDecimal.copyVariableLengthInteger(_:)(v144);
                        v18 = v41;
                        if (v41)
                        {
LABEL_173:
                          swift_bridgeObjectRelease();
                          goto LABEL_31;
                        }
                        v34 = v153[2];
                        swift_bridgeObjectRelease();
                        if (v34 >> 31)
                          goto LABEL_337;
                        _So9NSDecimala__length_setter(v34, v73);
                        if (v83 < (uint64_t)0xFFFFFFFF80000000)
                        {
LABEL_338:
                          __break(1u);
                        }
                        else if (v83 <= 0x7FFFFFFF)
                        {
                          *(_DWORD *)v279 = *(_DWORD *)v73;
                          *(_OWORD *)&v279[4] = *(__int128 *)((char *)v73 + 4);
                          v154 = _So9NSDecimala__exponent_getter(v279);
                          v88 = __OFSUB__(v154, (_DWORD)v83);
                          v155 = (v154 - v83);
                          if (!v88)
                          {
                            _So9NSDecimala__exponent_setter(v155, v73);
                            _So9NSDecimala__isCompact_setter_0(0, v73);
                            *(_DWORD *)v279 = *(_DWORD *)v73;
                            *(_OWORD *)&v279[4] = *(__int128 *)((char *)v73 + 4);
                            v156 = _So9NSDecimala__length_getter(v279);
                            v157 = *((unsigned __int16 *)v143 + 2);
                            v158 = *((unsigned __int16 *)v143 + 3);
                            if (v156)
                            {
                              NSDecimal.asVariableLengthInteger()(*v143 | (unint64_t)(v157 << 32) | (v158 << 48), *((_QWORD *)v143 + 1), v143[4]);
                              if (!v20)
                                goto LABEL_249;
                              v160 = v20;
                              v161 = specialized abs<A>(_:)(v20);
                              v162 = specialized Array.count.getter(powerOfTen._rawValue);
                              v163 = v162 - 1;
                              if (!__OFSUB__(v162, 1))
                              {
                                v34 = v162;
                                v164 = swift_bridgeObjectRetain();
                                if (v163 >= v161)
                                {
                                  v40 = v164;
                                }
                                else
                                {
                                  v165 = 1 - v34;
                                  v15 = v164;
                                  do
                                  {
                                    v166 = v161 - v163;
                                    if (__OFSUB__(v161, v163))
                                      goto LABEL_323;
                                    v167 = powerOfTen._rawValue;
                                    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v163, 1, powerOfTen._rawValue);
                                    v34 = v167[v163 + 4];
                                    swift_bridgeObjectRetain();
                                    v41 = 0;
                                    if (v160 < 0)
                                      v168 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)(v15, v34, 8uLL);
                                    else
                                      v168 = specialized static NSDecimal._integerMultiply(lhs:rhs:maxResultLength:)(v15, v34, 8);
                                    v40 = v168;
                                    swift_bridgeObjectRelease();
                                    swift_bridgeObjectRelease();
                                    v161 += v165;
                                    v15 = v40;
                                  }
                                  while (v163 < v166);
                                  v161 = v166;
                                }
                                v188 = powerOfTen._rawValue;
                                specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v161, 1, powerOfTen._rawValue);
                                v189 = v188[v161 + 4];
                                swift_bridgeObjectRetain();
                                v20 = v160;
                                if (v160 < 0)
                                  v190 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)(v40, v189, 8uLL);
                                else
                                  v190 = specialized static NSDecimal._integerMultiply(lhs:rhs:maxResultLength:)(v40, v189, 8);
                                v143 = v273;
                                v224 = (void *)v190;
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                v159._rawValue = v224;
LABEL_249:
                                v225 = v159._rawValue;
                                NSDecimal.copyVariableLengthInteger(_:)(v159);
                                v18 = v226;
                                if (v226)
                                  goto LABEL_173;
                                v227 = specialized Array.count.getter(v225);
                                swift_bridgeObjectRelease();
                                if ((v227 & 0x8000000000000000) != 0 || HIDWORD(v227))
                                  goto LABEL_354;
                                _So9NSDecimala__length_setter(v227, v143);
                                if (v20 < (uint64_t)0xFFFFFFFF80000000)
                                {
                                  __break(1u);
                                }
                                else if (v20 <= 0x7FFFFFFF)
                                {
                                  *(_DWORD *)v279 = *v143;
                                  *(_OWORD *)&v279[4] = *(_OWORD *)(v143 + 1);
                                  v228 = _So9NSDecimala__exponent_getter(v279);
                                  v88 = __OFSUB__(v228, (_DWORD)v20);
                                  v229 = (v228 - v20);
                                  if (!v88)
                                  {
                                    _So9NSDecimala__exponent_setter(v229, v143);
                                    v123 = v143;
                                    goto LABEL_110;
                                  }
LABEL_350:
                                  __break(1u);
                                  goto LABEL_351;
                                }
                                __break(1u);
                                goto LABEL_350;
                              }
LABEL_346:
                              __break(1u);
LABEL_347:
                              __break(1u);
                            }
                            v169 = v143[4];
                            *(_DWORD *)v279 = *v143;
                            *(_WORD *)&v279[4] = v157;
                            *(_WORD *)&v279[6] = v158;
                            *(_QWORD *)&v279[8] = *((_QWORD *)v143 + 1);
                            *(_DWORD *)&v279[16] = v169;
                            v170 = _So9NSDecimala__exponent_getter(v279);
                            _So9NSDecimala__exponent_setter(v170, v73);
LABEL_7:
                            v19 = v282;
                            v20 = (unsigned __int16)v283;
                            v21 = WORD1(v283);
                            v22 = WORD2(v283);
                            v23 = WORD3(v283);
                            v14 = WORD4(v283);
                            a3 = WORD5(v283);
                            v24 = WORD6(v283);
                            *(_DWORD *)v279 = v282;
                            *(_OWORD *)&v279[4] = v283;
                            v261 = HIWORD(v283);
                            v25 = _So9NSDecimala__length_getter(v279);
                            v26 = WORD3(v280);
                            LOWORD(v27) = WORD5(v280);
                            LOWORD(v28) = WORD6(v280);
                            LOWORD(v29) = HIWORD(v280);
                            v30 = v281;
                            LOWORD(v31) = HIWORD(v281);
                            if (!v25)
                            {
                              LODWORD(a2) = v280;
                              LOWORD(v14) = WORD2(v280);
                              LOWORD(a3) = WORD4(v280);
                              goto LABEL_306;
                            }
                            *(_OWORD *)v279 = v280;
                            *(_DWORD *)&v279[16] = v281;
                            v275 = WORD5(v280);
                            v268 = HIWORD(v280);
                            v271 = WORD6(v280);
                            LODWORD(v265) = (unsigned __int16)v281;
                            v263 = HIWORD(v281);
                            v255 = WORD2(v280);
                            v258 = v280;
                            v251 = WORD4(v280);
                            if (!_So9NSDecimala__length_getter(v279))
                            {
                              v30 = v24;
                              LODWORD(a2) = v19;
                              v101 = v14;
                              LOWORD(v14) = v20;
                              LOWORD(v26) = v21;
                              LOWORD(v29) = a3;
                              LOWORD(a3) = v22;
                              LOWORD(v27) = v23;
                              LOWORD(v28) = v101;
                              LOWORD(v31) = v261;
                              goto LABEL_306;
                            }
                            v252 = v18;
                            *(_DWORD *)v279 = v19;
                            *(_WORD *)&v279[4] = v20;
                            *(_WORD *)&v279[6] = v21;
                            *(_WORD *)&v279[8] = v22;
                            *(_WORD *)&v279[10] = v23;
                            *(_WORD *)&v279[12] = v14;
                            *(_WORD *)&v279[14] = a3;
                            *(_WORD *)&v279[16] = v24;
                            *(_WORD *)&v279[18] = v261;
                            LODWORD(v277) = v19;
                            WORD2(v277) = v20;
                            WORD3(v277) = v21;
                            WORD4(v277) = v22;
                            WORD5(v277) = v23;
                            WORD6(v277) = v14;
                            HIWORD(v277) = a3;
                            LOWORD(v278) = v24;
                            HIWORD(v278) = v261;
                            v32 = v24;
                            isNegative_getter = _So9NSDecimala__isNegative_getter(&v277);
                            LODWORD(v277) = v258;
                            WORD2(v277) = v255;
                            WORD3(v277) = v26;
                            WORD4(v277) = v251;
                            WORD5(v277) = v275;
                            WORD6(v277) = v271;
                            HIWORD(v277) = v268;
                            LOWORD(v278) = v265;
                            HIWORD(v278) = v263;
                            if (isNegative_getter == _So9NSDecimala__isNegative_getter(&v277))
                            {
                              LODWORD(v277) = v19;
                              WORD2(v277) = v20;
                              WORD3(v277) = v21;
                              WORD4(v277) = v22;
                              WORD5(v277) = v23;
                              WORD6(v277) = v14;
                              HIWORD(v277) = a3;
                              LOWORD(v278) = v32;
                              v34 = v261;
                              HIWORD(v278) = v261;
                              v35 = _So9NSDecimala__isNegative_getter(&v277);
                              _So9NSDecimala__isNegative_setter(v35, v279);
                              NSDecimal.asVariableLengthInteger()(v19 | (v20 << 32) | (v21 << 48), v22 | (v23 << 16) | (v14 << 32) | (a3 << 48), v32 | (v261 << 16));
                              v37 = v36;
                              NSDecimal.asVariableLengthInteger()(v258 | (v255 << 32) | (v26 << 48), v251 | (v275 << 16) | (v271 << 32) | (v268 << 48), v265 | (v263 << 16));
                              v15 = v38;
                              v39 = *(_QWORD *)(v37 + 16);
                              v40 = *(_QWORD *)(v38 + 16);
                              if (v40 >= v39)
                                v41 = *(void **)(v37 + 16);
                              else
                                v41 = *(void **)(v38 + 16);
                              v42 = static Array._allocateBufferUninitialized(minimumCapacity:)();
                              *(_QWORD *)(v42 + 16) = 9;
                              *(_QWORD *)(v42 + 32) = 0;
                              *(_QWORD *)(v42 + 40) = 0;
                              *(_WORD *)(v42 + 48) = 0;
                              *(_QWORD *)&v277 = v42;
                              v275 = (unint64_t)v41;
                              if (!v41)
                              {
                                v34 = v42;
                                if (v39)
                                {
                                  v132 = v40;
                                  v133 = v252;
                                  v275 = 0;
                                  goto LABEL_227;
                                }
                                v275 = 0;
                                v41 = v252;
                                if (v40)
                                {
LABEL_231:
                                  *(_QWORD *)&v277 = v34;
                                  v202 = v275 + 16;
                                  do
                                  {
                                    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v202 - 16, 1, v15);
                                    v203 = *(_WORD *)(v15 + 2 * v202);
                                    specialized Array._makeMutableAndUnique()();
                                    v204 = v277;
                                    v205 = specialized Array._checkSubscript_mutating(_:)(v202 - 16, v277);
                                    *(_WORD *)(v204 + 2 * v202) = v203;
                                    destructiveProjectEnumData for PredicateCodableError(v205, v206);
                                    v207 = v202 + 1;
                                    v208 = v202 - 15;
                                    ++v202;
                                  }
                                  while (v208 < v40);
                                  v275 = v207 - 16;
                                }
                                goto LABEL_234;
                              }
                              if (*(_QWORD *)(v37 + 16))
                              {
                                v41 = v252;
                                if (*(_QWORD *)(v15 + 16))
                                {
                                  v43 = v37 + 32;
                                  v44 = *(unsigned __int16 *)(v15 + 32) + *(unsigned __int16 *)(v37 + 32);
                                  MutableAnd = specialized Array._makeMutableAndUnique()();
                                  destructiveProjectEnumData for PredicateCodableError(MutableAnd, v46);
                                  v47 = specialized Array._makeMutableAndUnique()();
                                  destructiveProjectEnumData for PredicateCodableError(v47, v48);
                                  v49 = HIWORD(v44);
                                  specialized Array._makeMutableAndUnique()();
                                  v50 = v277;
                                  v51 = specialized Array._checkSubscript_mutating(_:)(0, v277);
                                  *(_WORD *)(v50 + 32) = v44;
                                  destructiveProjectEnumData for PredicateCodableError(v51, v52);
                                  if (v275 >= 2)
                                  {
                                    v53 = 17;
                                    do
                                    {
                                      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v53 - 16, 1, v37);
                                      v54 = *(unsigned __int16 *)(v37 + 2 * v53);
                                      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v53 - 16, 1, v15);
                                      v44 = v49 + v54 + *(unsigned __int16 *)(v15 + 2 * v53);
                                      v49 = HIWORD(v44);
                                      specialized Array._makeMutableAndUnique()();
                                      v55 = v277;
                                      v56 = specialized Array._checkSubscript_mutating(_:)(v53 - 16, v277);
                                      *(_WORD *)(v55 + 2 * v53) = v44;
                                      destructiveProjectEnumData for PredicateCodableError(v56, v57);
                                      ++v53;
                                    }
                                    while (1 - v275 + v53 != 17);
                                    v41 = v252;
                                    v43 = v37 + 32;
                                  }
                                  if (v39 > v40)
                                  {
                                    if (v44 < 0x10000)
                                      goto LABEL_225;
                                    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v275, 1, v37);
                                    v58 = *(unsigned __int16 *)(v43 + 2 * v275);
                                    v59 = specialized Array._makeMutableAndUnique()();
                                    destructiveProjectEnumData for PredicateCodableError(v59, v60);
                                    v61 = specialized Array._makeMutableAndUnique()();
                                    destructiveProjectEnumData for PredicateCodableError(v61, v62);
                                    v63 = v58 + 1;
                                    specialized Array._makeMutableAndUnique()();
                                    v64 = v277;
                                    v65 = specialized Array._checkSubscript_mutating(_:)(v275, v277);
                                    *(_WORD *)(v64 + 2 * v275 + 32) = v58 + 1;
                                    destructiveProjectEnumData for PredicateCodableError(v65, v66);
                                    if (v275 + 1 < v39)
                                    {
                                      v272 = v40;
                                      v67 = v275 + 17;
                                      while (1)
                                      {
                                        v275 = v67 - 16;
                                        if (v58 != 0xFFFF)
                                          break;
                                        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v275, 1, v37);
                                        v58 = *(unsigned __int16 *)(v37 + 2 * v67);
                                        v63 = v58 + 1;
                                        specialized Array._makeMutableAndUnique()();
                                        v68 = v277;
                                        v69 = specialized Array._checkSubscript_mutating(_:)(v275, v277);
                                        *(_WORD *)(v68 + 2 * v67) = v58 + 1;
                                        destructiveProjectEnumData for PredicateCodableError(v69, v70);
                                        ++v67;
                                        if (1 - v39 + v67 == 17)
                                        {
                                          v40 = v272;
                                          goto LABEL_202;
                                        }
                                      }
                                      v40 = v272;
LABEL_225:
                                      v132 = v40;
                                      v34 = v277;
                                      v133 = v41;
                                      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                                        v34 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v34);
LABEL_227:
                                      *(_QWORD *)&v277 = v34;
                                      v195 = v275 + 16;
                                      do
                                      {
                                        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v195 - 16, 1, v37);
                                        v196 = *(_WORD *)(v37 + 2 * v195);
                                        specialized Array._makeMutableAndUnique()();
                                        v197 = v277;
                                        v198 = specialized Array._checkSubscript_mutating(_:)(v195 - 16, v277);
                                        *(_WORD *)(v197 + 2 * v195) = v196;
                                        destructiveProjectEnumData for PredicateCodableError(v198, v199);
                                        v200 = v195 + 1;
                                        v201 = v195 - 15;
                                        ++v195;
                                      }
                                      while (v201 < (uint64_t)v39);
                                      v275 = v200 - 16;
                                      v41 = v133;
                                      v40 = v132;
                                      if ((uint64_t)(v200 - 16) < v132)
                                      {
LABEL_230:
                                        v34 = v277;
                                        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
                                          goto LABEL_231;
LABEL_342:
                                        v34 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v34);
                                        goto LABEL_231;
                                      }
LABEL_234:
                                      specialized RangeReplaceableCollection<>.removeLast(_:)(*(_QWORD *)(v277 + 16) - v275);
                                      swift_bridgeObjectRelease();
                                      swift_bridgeObjectRelease();
                                      if (*(_QWORD *)(v277 + 16) <= 8uLL)
                                      {
                                        v84 = v277;
                                        goto LABEL_242;
                                      }
                                      specialized static NSDecimal._fitMantissa(_:roundingMode:)(v277, 0);
                                      v84 = v209;
                                      v211 = v210;
                                      v18 = v41;
                                      swift_bridgeObjectRelease();
                                      if (v41)
                                        goto LABEL_31;
                                      v212 = *(_DWORD *)v279;
                                      v213 = *(_WORD *)&v279[4];
                                      v214 = *(_WORD *)&v279[6];
                                      v215 = *(_WORD *)&v279[8];
                                      v216 = *(_WORD *)&v279[10];
                                      v217 = *(_WORD *)&v279[12];
                                      v218 = *(_WORD *)&v279[14];
                                      v219 = *(_WORD *)&v279[16];
                                      v277 = *(_OWORD *)v279;
                                      v278 = *(_DWORD *)&v279[16];
                                      v276 = *(_WORD *)&v279[18];
                                      v220 = _So9NSDecimala__exponent_getter((char *)&v277);
                                      if (v211 < (uint64_t)0xFFFFFFFF80000000)
                                      {
                                        __break(1u);
                                      }
                                      else if (v211 <= 0x7FFFFFFF)
                                      {
                                        if (!__OFADD__(v220, (_DWORD)v211))
                                        {
                                          if (v220 + (int)v211 > 127)
                                          {
                                            swift_bridgeObjectRelease();
LABEL_30:
                                            lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
                                            v18 = (void *)swift_allocError();
                                            *v71 = 0;
                                            swift_willThrow();
                                            goto LABEL_31;
                                          }
                                          LODWORD(v277) = v212;
                                          WORD2(v277) = v213;
                                          WORD3(v277) = v214;
                                          WORD4(v277) = v215;
                                          WORD5(v277) = v216;
                                          WORD6(v277) = v217;
                                          HIWORD(v277) = v218;
                                          LOWORD(v278) = v219;
                                          HIWORD(v278) = v276;
                                          v222 = _So9NSDecimala__exponent_getter((char *)&v277);
                                          v88 = __OFADD__(v222, (_DWORD)v211);
                                          v223 = (v222 + v211);
                                          if (v88)
                                            goto LABEL_347;
                                          _So9NSDecimala__exponent_setter(v223, v279);
LABEL_242:
                                          v221 = specialized Array.count.getter(v84);
                                          if ((v221 & 0x8000000000000000) != 0 || HIDWORD(v221))
                                            goto LABEL_354;
                                          _So9NSDecimala__length_setter(v221, v279);
LABEL_303:
                                          NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v84);
                                          v18 = v131;
LABEL_304:
                                          swift_bridgeObjectRelease();
                                          if (!v131)
                                          {
                                            _So9NSDecimala__isCompact_setter_0(0, v279);
                                            NSDecimal.compact()();
                                            LODWORD(a2) = *(_DWORD *)v279;
                                            LOWORD(v14) = *(_WORD *)&v279[4];
                                            LOWORD(v26) = *(_WORD *)&v279[6];
                                            LOWORD(a3) = *(_WORD *)&v279[8];
                                            LOWORD(v27) = *(_WORD *)&v279[10];
                                            LOWORD(v28) = *(_WORD *)&v279[12];
                                            LOWORD(v29) = *(_WORD *)&v279[14];
                                            v30 = *(_WORD *)&v279[16];
                                            LOWORD(v31) = *(_WORD *)&v279[18];
                                            goto LABEL_306;
                                          }
LABEL_31:
                                          v283 = 0uLL;
                                          _So9NSDecimala__exponent_setter(0, &v282);
                                          _So9NSDecimala__length_setter(0, &v282);
                                          _So9NSDecimala__isNegative_setter(1, &v282);
                                          _So9NSDecimala__isCompact_setter_0(0, &v282);
                                          _So9NSDecimala__reserved_setter(&v282);

                                          LODWORD(a2) = v282;
                                          LOWORD(v14) = v283;
                                          LOWORD(v26) = WORD1(v283);
                                          LOWORD(a3) = WORD2(v283);
                                          LOWORD(v27) = WORD3(v283);
                                          LOWORD(v28) = WORD4(v283);
                                          LOWORD(v29) = WORD5(v283);
                                          v30 = WORD6(v283);
                                          LOWORD(v31) = HIWORD(v283);
LABEL_306:
                                          *a1 = a2;
                                          *((_WORD *)a1 + 2) = v14;
                                          *((_WORD *)a1 + 3) = v26;
                                          *((_WORD *)a1 + 4) = a3;
                                          *((_WORD *)a1 + 5) = v27;
                                          *((_WORD *)a1 + 6) = v28;
                                          *((_WORD *)a1 + 7) = v29;
                                          *((_WORD *)a1 + 8) = v30;
                                          *((_WORD *)a1 + 9) = v31;
                                          return;
                                        }
LABEL_345:
                                        __break(1u);
                                        goto LABEL_346;
                                      }
                                      __break(1u);
                                      goto LABEL_345;
                                    }
                                    v39 = v275 + 1;
LABEL_202:
                                    v49 = HIWORD(v63);
                                    v275 = v39;
                                  }
                                  if ((uint64_t)v275 < v40)
                                  {
                                    if (!v49)
                                      goto LABEL_230;
                                    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v275, 1, v15);
                                    v171 = *(unsigned __int16 *)(v15 + 32 + 2 * v275);
                                    v172 = specialized Array._makeMutableAndUnique()();
                                    destructiveProjectEnumData for PredicateCodableError(v172, v173);
                                    v174 = specialized Array._makeMutableAndUnique()();
                                    destructiveProjectEnumData for PredicateCodableError(v174, v175);
                                    v176 = v171 + 1;
                                    specialized Array._makeMutableAndUnique()();
                                    v177 = v277;
                                    v178 = specialized Array._checkSubscript_mutating(_:)(v275, v277);
                                    *(_WORD *)(v177 + 2 * v275 + 32) = v171 + 1;
                                    destructiveProjectEnumData for PredicateCodableError(v178, v179);
                                    v180 = v275 + 1;
                                    if ((uint64_t)(v275 + 1) < v40)
                                    {
                                      v181 = v275 + 17;
                                      do
                                      {
                                        v275 = v181 - 16;
                                        if (v171 != 0xFFFF)
                                          goto LABEL_230;
                                        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v275, 1, v15);
                                        v171 = *(unsigned __int16 *)(v15 + 2 * v181);
                                        v176 = v171 + 1;
                                        specialized Array._makeMutableAndUnique()();
                                        v182 = v277;
                                        v183 = specialized Array._checkSubscript_mutating(_:)(v275, v277);
                                        *(_WORD *)(v182 + 2 * v181) = v171 + 1;
                                        destructiveProjectEnumData for PredicateCodableError(v183, v184);
                                        ++v181;
                                      }
                                      while (1 - v40 + v181 != 17);
                                      v180 = v40;
                                    }
                                    v49 = HIWORD(v176);
                                    v275 = v180;
                                  }
                                  if (v49)
                                  {
                                    if (v275 >= 0xA)
                                      goto LABEL_355;
                                    specialized Array._makeMutableAndUnique()();
                                    v185 = v277;
                                    v186 = specialized Array._checkSubscript_mutating(_:)(v275, v277);
                                    *(_WORD *)(v185 + 2 * v275 + 32) = 1;
                                    destructiveProjectEnumData for PredicateCodableError(v186, v187);
                                    ++v275;
                                  }
                                  goto LABEL_234;
                                }
LABEL_331:
                                __break(1u);
LABEL_332:
                                __break(1u);
LABEL_333:
                                __break(1u);
LABEL_334:
                                __break(1u);
LABEL_335:
                                __break(1u);
LABEL_336:
                                __break(1u);
LABEL_337:
                                __break(1u);
                                goto LABEL_338;
                              }
LABEL_330:
                              __break(1u);
                              goto LABEL_331;
                            }
                            v244 = v14;
                            v104 = v21;
                            v105 = v19 | (v20 << 32) | (v21 << 48);
                            v242 = v23;
                            v243 = a3;
                            v106 = v22;
                            v249 = v22 | (v23 << 16) | (v14 << 32) | (a3 << 48);
                            v250 = v105;
                            v248 = v32 | (v261 << 16);
                            NSDecimal.asVariableLengthInteger()(v105, v249, v248);
                            v108 = v107;
                            v109 = v26;
                            v246 = v251 | (v275 << 16) | (v271 << 32) | (v268 << 48);
                            v247 = v258 | (v255 << 32) | (v26 << 48);
                            v245 = v265 | (v263 << 16);
                            NSDecimal.asVariableLengthInteger()(v247, v246, v245);
                            v111 = v110;
                            v112 = *(_QWORD *)(v108 + 16);
                            v113 = *(_QWORD *)(v110 + 16);
                            if (v113 < v112)
                            {
                              v241 = v32;
                              v240 = v19;
                              v79 = v104;
                              LODWORD(v77) = v106;
                              v41 = v252;
                              goto LABEL_98;
                            }
                            if (v112 < v113)
                            {
                              v124 = v109;
                              goto LABEL_113;
                            }
                            v241 = v32;
                            if (v112)
                            {
                              v240 = v19;
                              specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v112 - 1, 1, v108);
                              v149 = *(unsigned __int16 *)(v108 + 2 * (v112 - 1) + 32);
                              specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v112 - 1, 1, v111);
                              v150 = *(unsigned __int16 *)(v111 + 2 * (v112 - 1) + 32);
                              if (v150 >= v149)
                              {
                                v124 = v109;
                                if (v149 < v150)
                                {
LABEL_113:
                                  swift_bridgeObjectRelease();
                                  swift_bridgeObjectRelease();
                                  NSDecimal.asVariableLengthInteger()(v247, v246, v245);
                                  v126 = v125;
                                  NSDecimal.asVariableLengthInteger()(v250, v249, v248);
                                  v128 = specialized static NSDecimal._integerSubtract(term:subtrahend:maxResultLength:)(v126, v127, 8);
                                  swift_bridgeObjectRelease();
                                  swift_bridgeObjectRelease();
                                  v129 = specialized Array.count.getter(v128);
                                  if ((v129 & 0x8000000000000000) != 0 || HIDWORD(v129))
                                    goto LABEL_354;
                                  _So9NSDecimala__length_setter(v129, v279);
                                  LODWORD(v277) = v258;
                                  WORD2(v277) = v255;
                                  WORD3(v277) = v124;
                                  WORD4(v277) = v251;
                                  WORD5(v277) = v275;
                                  WORD6(v277) = v271;
                                  HIWORD(v277) = v268;
                                  LOWORD(v278) = v265;
                                  HIWORD(v278) = v263;
                                  v130 = _So9NSDecimala__isNegative_getter(&v277);
                                  _So9NSDecimala__isNegative_setter(v130, v279);
                                  NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v128);
                                  v18 = v131;
                                  goto LABEL_304;
                                }
                                v41 = v252;
                                v79 = v104;
                                while (1)
                                {
                                  if (v112 == 1)
                                    goto LABEL_321;
                                  v191 = v112 - 2;
                                  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v112 - 2, 1, v108);
                                  v192 = 2 * v112;
                                  v193 = *(unsigned __int16 *)(v108 + v192 + 28);
                                  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v191, 1, v111);
                                  v194 = *(unsigned __int16 *)(v111 + v192 + 28);
                                  if (v194 < v193)
                                    break;
                                  v112 = v191 + 1;
                                  if (v193 < v194)
                                    goto LABEL_113;
                                }
                                LODWORD(v77) = v106;
                              }
                              else
                              {
                                LODWORD(v77) = v106;
                                v41 = v252;
                                v79 = v104;
                              }
LABEL_98:
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              NSDecimal.asVariableLengthInteger()(v250, v249, v248);
                              v34 = v114;
                              NSDecimal.asVariableLengthInteger()(v247, v246, v245);
                              v40 = v115;
                              v116 = static Array._allocateBufferUninitialized(minimumCapacity:)();
                              v84 = v116;
                              *(_QWORD *)(v116 + 32) = 0;
                              v90 = v116 + 32;
                              *(_QWORD *)(v116 + 16) = 8;
                              *(_QWORD *)(v116 + 40) = 0;
                              v93 = *(_QWORD *)(v34 + 16);
                              v89 = *(_QWORD *)(v40 + 16);
                              if (v89 >= v93)
                                v117 = *(_QWORD *)(v34 + 16);
                              else
                                v117 = *(_QWORD *)(v40 + 16);
                              if (v117)
                              {
                                v94 = v34 + 32;
                                v118 = (*(unsigned __int16 *)(v34 + 32) | 0x10000) - *(unsigned __int16 *)(v40 + 32);
                                LODWORD(v92) = HIWORD(v118);
                                *(_WORD *)v90 = *(_WORD *)(v34 + 32) - *(_WORD *)(v40 + 32);
                                v91 = v117 - 1;
                                v15 = v243;
                                LOWORD(v83) = v244;
                                if (!v91)
                                {
                                  v119 = 1;
                                  goto LABEL_276;
                                }
                                v118 = v92 + *(unsigned __int16 *)(v34 + 34) - *(unsigned __int16 *)(v40 + 34) + 0xFFFF;
                                LODWORD(v92) = HIWORD(v118);
                                *(_WORD *)(v116 + 34) = v118;
                                if (v91 == 1)
                                {
                                  v119 = 2;
                                  goto LABEL_276;
                                }
                                v86 = *(unsigned __int16 *)(v40 + 36);
                                v118 = v92 + *(unsigned __int16 *)(v34 + 36) - v86 + 0xFFFF;
                                LODWORD(v92) = HIWORD(v118);
                                *(_WORD *)(v116 + 36) = v118;
                                if (v91 == 2)
                                {
                                  v119 = 3;
                                  goto LABEL_276;
                                }
                                v118 = v92 + *(unsigned __int16 *)(v34 + 38) - *(unsigned __int16 *)(v40 + 38) + 0xFFFF;
                                LODWORD(v92) = HIWORD(v118);
                                *(_WORD *)(v116 + 38) = v118;
                                if (v91 == 3)
                                {
                                  v119 = 4;
                                  goto LABEL_276;
                                }
                                v86 = *(unsigned __int16 *)(v40 + 40);
                                v118 = v92 + *(unsigned __int16 *)(v34 + 40) - v86 + 0xFFFF;
                                LODWORD(v92) = HIWORD(v118);
                                *(_WORD *)(v116 + 40) = v118;
                                if (v91 == 4)
                                {
                                  v119 = 5;
                                  goto LABEL_276;
                                }
                                goto LABEL_262;
                              }
                              v15 = v243;
                              LOWORD(v83) = v244;
                              if (v93)
                              {
                                v119 = 0;
                                goto LABEL_281;
                              }
                              if (v89)
                              {
                                v119 = 0;
                                LODWORD(v92) = 1;
                                goto LABEL_289;
                              }
                              v230 = 8;
LABEL_298:
                              if (!*(_WORD *)(v90 + 2 * v230 - 2))
                              {
                                do
                                {
                                  *(_QWORD *)(v84 + 16) = v230 - 1;
                                  if (v230 == 1)
                                    break;
                                }
                                while (!*(unsigned __int16 *)(v84 + 28 + 2 * v230--));
                              }
LABEL_301:
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              v236 = *(_QWORD *)(v84 + 16);
                              if (HIDWORD(v236))
                                goto LABEL_354;
                              _So9NSDecimala__length_setter(v236, v279);
                              LODWORD(v277) = v240;
                              WORD2(v277) = v20;
                              WORD3(v277) = v79;
                              WORD4(v277) = v77;
                              WORD5(v277) = v242;
                              WORD6(v277) = v83;
                              HIWORD(v277) = v15;
                              LOWORD(v278) = v241;
                              HIWORD(v278) = v261;
                              v237 = _So9NSDecimala__isNegative_getter(&v277);
                              _So9NSDecimala__isNegative_setter(v237, v279);
                              goto LABEL_303;
                            }
LABEL_321:
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            LODWORD(a2) = 0;
                            LOWORD(v14) = 0;
                            LOWORD(v26) = 0;
                            LOWORD(a3) = 0;
                            LOWORD(v27) = 0;
                            LOWORD(v28) = 0;
                            LOWORD(v29) = 0;
                            v30 = 0;
                            LOWORD(v31) = 0;
                            goto LABEL_306;
                          }
LABEL_340:
                          __break(1u);
LABEL_341:
                          __break(1u);
                          goto LABEL_342;
                        }
                        __break(1u);
                        goto LABEL_340;
                      }
LABEL_329:
                      __break(1u);
                      goto LABEL_330;
                    }
LABEL_328:
                    __break(1u);
                    goto LABEL_329;
                  }
LABEL_317:
                  __break(1u);
LABEL_318:
                  __break(1u);
                  goto LABEL_319;
                }
LABEL_316:
                __break(1u);
                goto LABEL_317;
              }
LABEL_315:
              __break(1u);
              goto LABEL_316;
            }
LABEL_314:
            __break(1u);
            goto LABEL_315;
          }
          if (v136 < 0)
            goto LABEL_335;
          if ((unint64_t)v136 >= *(_QWORD *)(v15 + 16))
            goto LABEL_336;
          *(_WORD *)(v90 + 2 * v136) = v92;
        }
        v91 = v93;
        if ((void *)v93 == v41)
        {
          v137 = *(_QWORD *)(v15 + 16);
          if (v137 && !*(_WORD *)(v90 + 2 * v137 - 2))
          {
            do
            {
              *(_QWORD *)(v15 + 16) = v137 - 1;
              if (v137 == 1)
                break;
            }
            while (!*(unsigned __int16 *)(v15 + 28 + 2 * v137--));
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v87._rawValue = (void *)v15;
LABEL_106:
          NSDecimal.copyVariableLengthInteger(_:)(v87);
          v18 = v120;
          if (v120)
            goto LABEL_173;
          v121 = *((_QWORD *)v87._rawValue + 2);
          swift_bridgeObjectRelease();
          if (HIDWORD(v121))
            goto LABEL_354;
          _So9NSDecimala__length_setter(v121, (_DWORD *)v20);
          *(_DWORD *)v279 = *(_DWORD *)v73;
          *(_OWORD *)&v279[4] = *(__int128 *)((char *)v73 + 4);
          v122 = _So9NSDecimala__exponent_getter(v279);
          _So9NSDecimala__exponent_setter(v122, (_BYTE *)v20);
          v123 = (_DWORD *)v20;
LABEL_110:
          _So9NSDecimala__isCompact_setter_0(0, v123);
          goto LABEL_7;
        }
        continue;
      }
      goto LABEL_124;
    }
    break;
  }
  if ((v134 & 0x8000000000000000) == 0)
  {
    if ((unint64_t)v134 >= *(_QWORD *)(v15 + 16))
      goto LABEL_272;
    v135 = 2 * v134;
    v86 = *(unsigned __int16 *)(v34 + 2 * v94 + 32);
    v85 = v92 + *(unsigned __int16 *)(v90 + v135) + v86 * *(unsigned __int16 *)(v89 + 2 * v91);
    LODWORD(v92) = HIWORD(v85);
    *(_WORD *)(v90 + v135) = v85;
    goto LABEL_123;
  }
  __break(1u);
LABEL_272:
  __break(1u);
LABEL_273:
  __break(1u);
LABEL_274:
  v231 = v92 + *(unsigned __int16 *)(v34 + 46) - *(unsigned __int16 *)(v40 + 46);
  v118 = v231 + 0xFFFF;
  *(_WORD *)(v84 + 46) = v231 - 1;
  if (v91 == 7)
  {
    LODWORD(v92) = HIWORD(v118);
    v119 = 8;
    goto LABEL_276;
  }
LABEL_351:
  __break(1u);
LABEL_354:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_355:
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
  swift_allocError();
  *v239 = 0;
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unexpectedError();
  __break(1u);
}

unint64_t specialized static NSDecimal.- infix(_:_:)(unint64_t a1, unint64_t a2, unsigned int a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  __int16 v6;
  __int16 v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int isNegative_getter;
  uint64_t v16;
  unint64_t v17;
  int v18;
  unsigned int v19;
  unsigned __int16 v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  Swift::OpaquePointer v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  __int16 v42;
  __int16 v43;
  __int16 v44;
  __int16 v45;
  __int16 v46;
  __int16 v47;
  __int16 v48;
  int v49;
  void *v50;
  _BYTE *v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  _WORD *v62;
  Swift::OpaquePointer v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unsigned int v67;
  int v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  unint64_t v77;
  unint64_t v78;
  int v79;
  BOOL v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  unsigned int v86;
  unint64_t v88;
  _BYTE *v89;
  int v90;
  int v91;
  unint64_t v92;
  unsigned int v93;
  unint64_t v95;
  uint64_t v96;
  void *v97;
  _BYTE *v98;
  __int16 v99;
  unint64_t v100;
  unsigned int v101;
  unint64_t v102;
  unint64_t v103;
  unsigned int v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v108;
  __int16 v109;
  uint64_t v110;
  unint64_t v111;
  int v112;
  unint64_t v113;
  int v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  __int16 v121;
  uint64_t v122;
  unsigned int v123;
  uint64_t v124;
  __int16 v125;
  uint64_t v126;
  unint64_t v127;
  unsigned int v128;
  uint64_t v129;
  unint64_t v130;
  unsigned int v131;
  uint64_t v132;
  unint64_t v133;
  unsigned int v134;
  uint64_t v135;
  unint64_t v136;
  unsigned int v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;

  v6 = a6;
  v7 = a5;
  v8 = a4;
  v141 = *MEMORY[0x1E0C80C00];
  v138 = a4;
  v9 = HIDWORD(a4);
  LOWORD(v139) = WORD2(a4);
  v10 = HIWORD(a4);
  WORD1(v139) = HIWORD(a4);
  HIDWORD(v139) = a5;
  v11 = a5 >> 16;
  v111 = HIDWORD(a1);
  v113 = HIWORD(a1);
  v12 = HIDWORD(a5);
  LOWORD(v140) = WORD2(a5);
  v123 = a1;
  v13 = HIWORD(a5);
  WORD1(v140) = HIWORD(a5);
  HIDWORD(v140) = a6;
  v14 = HIWORD(a6);
  v115 = a2 >> 16;
  v117 = HIDWORD(a2);
  v135 = a4;
  v119 = HIWORD(a2);
  v136 = a5;
  v137 = a6;
  v121 = a2;
  if (_So9NSDecimala__length_getter(&v135))
  {
    LODWORD(v135) = v8;
    WORD2(v135) = v9;
    HIWORD(v135) = v10;
    LOWORD(v136) = v7;
    WORD1(v136) = v11;
    WORD2(v136) = v12;
    HIWORD(v136) = v13;
    LOWORD(v137) = v6;
    HIWORD(v137) = v14;
    isNegative_getter = _So9NSDecimala__isNegative_getter(&v135);
    _So9NSDecimala__isNegative_setter(isNegative_getter ^ 1u, &v138);
    v8 = v138;
    LOWORD(v9) = v139;
    v10 = WORD1(v139);
    v7 = WORD2(v139);
    LOWORD(v11) = HIWORD(v139);
    LOWORD(v12) = v140;
    LOWORD(v13) = WORD1(v140);
    v6 = WORD2(v140);
    v109 = HIWORD(v140);
  }
  else
  {
    v109 = v14;
  }
  LODWORD(v135) = v123;
  WORD2(v135) = v111;
  HIWORD(v135) = v113;
  LOWORD(v136) = v121;
  WORD1(v136) = v115;
  WORD2(v136) = v117;
  HIWORD(v136) = v119;
  v137 = a3;
  if (!_So9NSDecimala__length_getter(&v135))
  {
    LODWORD(v135) = v123;
    WORD2(v135) = v111;
    HIWORD(v135) = v113;
    LOWORD(v136) = v121;
    WORD1(v136) = v115;
    WORD2(v136) = v117;
    HIWORD(v136) = v119;
    v137 = a3;
    if (_So9NSDecimala__isNegative_getter(&v135))
      goto LABEL_20;
  }
  LODWORD(v135) = v8;
  WORD2(v135) = v9;
  HIWORD(v135) = v10;
  LOWORD(v136) = v7;
  WORD1(v136) = v11;
  WORD2(v136) = v12;
  HIWORD(v136) = v13;
  LOWORD(v137) = v6;
  HIWORD(v137) = v109;
  if (!_So9NSDecimala__length_getter(&v135))
  {
    LODWORD(v135) = v8;
    WORD2(v135) = v9;
    HIWORD(v135) = v10;
    LOWORD(v136) = v7;
    WORD1(v136) = v11;
    WORD2(v136) = v12;
    HIWORD(v136) = v13;
    LOWORD(v137) = v6;
    HIWORD(v137) = v109;
    if (_So9NSDecimala__isNegative_getter(&v135))
      goto LABEL_20;
  }
  LODWORD(v135) = v123;
  WORD2(v135) = v111;
  HIWORD(v135) = v113;
  LOWORD(v136) = v121;
  WORD1(v136) = v115;
  WORD2(v136) = v117;
  HIWORD(v136) = v119;
  v137 = a3;
  if (!_So9NSDecimala__length_getter(&v135))
  {
    v19 = v8;
    v20 = v9;
    v21 = v10;
    return v19 | ((unint64_t)v20 << 32) | (v21 << 48);
  }
  LODWORD(v135) = v8;
  WORD2(v135) = v9;
  HIWORD(v135) = v10;
  LOWORD(v136) = v7;
  WORD1(v136) = v11;
  WORD2(v136) = v12;
  HIWORD(v136) = v13;
  LOWORD(v137) = v6;
  HIWORD(v137) = v109;
  if (!_So9NSDecimala__length_getter(&v135))
  {
    v20 = v111;
    v21 = v113;
    v19 = v123;
    return v19 | ((unint64_t)v20 << 32) | (v21 << 48);
  }
  LODWORD(v135) = v123;
  WORD2(v135) = v111;
  HIWORD(v135) = v113;
  LOWORD(v136) = v121;
  WORD1(v136) = v115;
  WORD2(v136) = v117;
  HIWORD(v136) = v119;
  v137 = a3;
  LODWORD(v132) = v8;
  WORD2(v132) = v9;
  HIWORD(v132) = v10;
  LOWORD(v133) = v7;
  WORD1(v133) = v11;
  WORD2(v133) = v12;
  HIWORD(v133) = v13;
  LOWORD(v134) = v6;
  HIWORD(v134) = v109;
  specialized static NSDecimal._normalize(a:b:roundingMode:)((int *)&v135, (uint64_t)&v132);
  v16 = WORD2(v135);
  v17 = HIWORD(v135);
  v110 = v135;
  v129 = v135;
  v120 = WORD1(v136);
  v122 = (unsigned __int16)v136;
  v130 = v136;
  v116 = HIWORD(v136);
  v118 = WORD2(v136);
  v114 = (unsigned __int16)v137;
  v131 = v137;
  v112 = HIWORD(v137);
  v18 = _So9NSDecimala__length_getter(&v129);
  v19 = v132;
  v20 = WORD2(v132);
  v21 = HIWORD(v132);
  v22 = (unsigned __int16)v133;
  v23 = WORD1(v133);
  v24 = WORD2(v133);
  v25 = HIWORD(v133);
  v26 = (unsigned __int16)v134;
  v27 = HIWORD(v134);
  if (v18)
  {
    v124 = v132;
    v129 = v132;
    v130 = v133;
    v131 = v134;
    v108 = WORD2(v132);
    if (!_So9NSDecimala__length_getter(&v129))
    {
      v19 = v110;
      v20 = v16;
      v21 = v17;
      return v19 | ((unint64_t)v20 << 32) | (v21 << 48);
    }
    LODWORD(v129) = v110;
    WORD2(v129) = v16;
    HIWORD(v129) = v17;
    LOWORD(v130) = v122;
    WORD1(v130) = v120;
    WORD2(v130) = v118;
    HIWORD(v130) = v116;
    LOWORD(v131) = v114;
    HIWORD(v131) = v112;
    LODWORD(v126) = v110;
    WORD2(v126) = v16;
    HIWORD(v126) = v17;
    v127 = __PAIR64__(__PAIR32__(v116, v118), __PAIR32__(v120, v122));
    LOWORD(v128) = v114;
    HIWORD(v128) = v112;
    v106 = v17;
    v28 = v16;
    v29 = _So9NSDecimala__isNegative_getter(&v126);
    LODWORD(v126) = v124;
    WORD2(v126) = v108;
    HIWORD(v126) = v21;
    LOWORD(v127) = v22;
    WORD1(v127) = v23;
    WORD2(v127) = v24;
    HIWORD(v127) = v25;
    LOWORD(v128) = v26;
    HIWORD(v128) = v27;
    if (v29 == _So9NSDecimala__isNegative_getter(&v126))
    {
      LODWORD(v126) = v110;
      WORD2(v126) = v28;
      HIWORD(v126) = v106;
      LOWORD(v127) = v122;
      WORD1(v127) = v120;
      WORD2(v127) = v118;
      HIWORD(v127) = v116;
      LOWORD(v128) = v114;
      HIWORD(v128) = v112;
      v30 = _So9NSDecimala__isNegative_getter(&v126);
      _So9NSDecimala__isNegative_setter(v30, &v129);
      NSDecimal.asVariableLengthInteger()(v110 | (v28 << 32) | (v106 << 48), v122 | (v120 << 16) | (v118 << 32) | (v116 << 48), v114 | (v112 << 16));
      v32 = v31;
      NSDecimal.asVariableLengthInteger()(v124 | (v108 << 32) | (v21 << 48), v22 | (v23 << 16) | (v24 << 32) | (v25 << 48), v26 | (v27 << 16));
      v35 = specialized static NSDecimal._integerAdd(lhs:rhs:maxResultLength:)(v32, v33, 9, v34);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v36 = *(_QWORD *)(v35 + 16);
      if (v36 <= 8)
      {
        v38._rawValue = (void *)v35;
LABEL_30:
        _So9NSDecimala__length_setter(v36, &v129);
        NSDecimal.copyVariableLengthInteger(_:)(v38);
        v50 = v56;
        swift_bridgeObjectRelease();
        if (v56)
          goto LABEL_21;
        goto LABEL_147;
      }
      specialized static NSDecimal._fitMantissa(_:roundingMode:)(v35, 0);
      v38._rawValue = v37;
      v40 = v39;
      swift_bridgeObjectRelease();
      v41 = v129;
      v42 = WORD2(v129);
      v43 = HIWORD(v129);
      v44 = v130;
      v45 = WORD1(v130);
      v46 = WORD2(v130);
      v47 = HIWORD(v130);
      v48 = v131;
      v126 = v129;
      v127 = v130;
      v128 = v131;
      v125 = HIWORD(v131);
      v49 = _So9NSDecimala__exponent_getter((char *)&v126);
      if (v40 >= (uint64_t)0xFFFFFFFF80000000)
      {
        if (v40 <= 0x7FFFFFFF)
        {
          if (!__OFADD__(v49, (_DWORD)v40))
          {
            if (v49 + (int)v40 > 127)
            {
              swift_bridgeObjectRelease();
LABEL_20:
              lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
              v50 = (void *)swift_allocError();
              *v51 = 0;
              swift_willThrow();
              goto LABEL_21;
            }
            LODWORD(v126) = v41;
            WORD2(v126) = v42;
            HIWORD(v126) = v43;
            LOWORD(v127) = v44;
            WORD1(v127) = v45;
            WORD2(v127) = v46;
            HIWORD(v127) = v47;
            LOWORD(v128) = v48;
            HIWORD(v128) = v125;
            v79 = _So9NSDecimala__exponent_getter((char *)&v126);
            v80 = __OFADD__(v79, (_DWORD)v40);
            v81 = (v79 + v40);
            if (!v80)
            {
              _So9NSDecimala__exponent_setter(v81, &v129);
              v36 = *((_QWORD *)v38._rawValue + 2);
              if (HIDWORD(v36))
                goto LABEL_161;
              goto LABEL_30;
            }
            __break(1u);
            goto LABEL_159;
          }
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
        }
LABEL_154:
        __break(1u);
        goto LABEL_155;
      }
LABEL_153:
      __break(1u);
      goto LABEL_154;
    }
    v99 = v28;
    v100 = v110 | (v28 << 32) | (v106 << 48);
    v105 = v122 | (v120 << 16) | (v118 << 32) | (v116 << 48);
    v104 = v114 | (v112 << 16);
    NSDecimal.asVariableLengthInteger()(v100, v105, v104);
    v54 = v53;
    v102 = v22 | (v23 << 16) | (v24 << 32) | (v25 << 48);
    v103 = v124 | (v108 << 32) | (v21 << 48);
    v101 = v26 | (v27 << 16);
    NSDecimal.asVariableLengthInteger()(v103, v102, v101);
    v40 = specialized static NSDecimal._integerCompare(lhs:rhs:)(v54, v55);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v40 != -1)
    {
      if (!v40)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        return v19 | ((unint64_t)v20 << 32) | (v21 << 48);
      }
      if (v40 != 1)
      {
LABEL_162:
        type metadata accessor for NSComparisonResult(0);
        v126 = v40;
        _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
        __break(1u);
        JUMPOUT(0x181B08AFCLL);
      }
      LOWORD(v25) = v106;
      NSDecimal.asVariableLengthInteger()(v100, v105, v104);
      v40 = v71;
      NSDecimal.asVariableLengthInteger()(v103, v102, v101);
      v22 = v72;
      v73 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(v73 + 32) = 0;
      v62 = (_WORD *)(v73 + 32);
      *(_QWORD *)(v73 + 16) = 8;
      v63._rawValue = (void *)v73;
      *(_QWORD *)(v73 + 40) = 0;
      v64 = *(_QWORD *)(v40 + 16);
      v65 = *(_QWORD *)(v22 + 16);
      if (v65 >= v64)
        v74 = *(_QWORD *)(v40 + 16);
      else
        v74 = *(_QWORD *)(v22 + 16);
      if (v74)
      {
        v75 = v40 + 32;
        v76 = (*(unsigned __int16 *)(v40 + 32) | 0x10000) - *(unsigned __int16 *)(v22 + 32);
        LODWORD(v77) = HIWORD(v76);
        *v62 = *(_WORD *)(v40 + 32) - *(_WORD *)(v22 + 32);
        v70 = v74 - 1;
        if (!v70)
        {
          v78 = 1;
          goto LABEL_116;
        }
        v76 = v77 + *(unsigned __int16 *)(v40 + 34) - *(unsigned __int16 *)(v22 + 34) + 0xFFFF;
        LODWORD(v77) = HIWORD(v76);
        *(_WORD *)(v73 + 34) = v76;
        if (v70 == 1)
        {
          v78 = 2;
          goto LABEL_116;
        }
        v61 = *(unsigned __int16 *)(v22 + 36);
        v76 = v77 + *(unsigned __int16 *)(v40 + 36) - v61 + 0xFFFF;
        LODWORD(v77) = HIWORD(v76);
        *(_WORD *)(v73 + 36) = v76;
        if (v70 == 2)
        {
          v78 = 3;
          goto LABEL_116;
        }
        v76 = v77 + *(unsigned __int16 *)(v40 + 38) - *(unsigned __int16 *)(v22 + 38) + 0xFFFF;
        LODWORD(v77) = HIWORD(v76);
        *(_WORD *)(v73 + 38) = v76;
        if (v70 == 3)
        {
          v78 = 4;
          goto LABEL_116;
        }
        v61 = *(unsigned __int16 *)(v22 + 40);
        v76 = v77 + *(unsigned __int16 *)(v40 + 40) - v61 + 0xFFFF;
        LODWORD(v77) = HIWORD(v76);
        *(_WORD *)(v73 + 40) = v76;
        if (v70 == 4)
        {
          v78 = 5;
          goto LABEL_116;
        }
        v76 = v77 + *(unsigned __int16 *)(v40 + 42) - *(unsigned __int16 *)(v22 + 42) + 0xFFFF;
        LODWORD(v77) = HIWORD(v76);
        *(_WORD *)(v73 + 42) = v76;
        if (v70 == 5)
        {
          v78 = 6;
          goto LABEL_116;
        }
        v61 = *(unsigned __int16 *)(v22 + 44);
        v76 = v77 + *(unsigned __int16 *)(v40 + 44) - v61 + 0xFFFF;
        LODWORD(v77) = HIWORD(v76);
        *(_WORD *)(v73 + 44) = v76;
        if (v70 == 6)
        {
          v78 = 7;
          goto LABEL_116;
        }
LABEL_114:
        v90 = v77 + *(unsigned __int16 *)(v40 + 46) - *(unsigned __int16 *)(v22 + 46);
        v76 = v90 + 0xFFFF;
        *((_WORD *)v63._rawValue + 23) = v90 - 1;
        if (v70 != 7)
        {
LABEL_160:
          __break(1u);
          swift_unexpectedError();
          __break(1u);
LABEL_161:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          goto LABEL_162;
        }
        LODWORD(v77) = HIWORD(v76);
        v78 = 8;
LABEL_116:
        if (v78 >= v64)
          goto LABEL_128;
        if (!HIWORD(v76))
        {
          while (v78 < *((_QWORD *)v63._rawValue + 2))
          {
            v91 = *(unsigned __int16 *)(v75 + 2 * v78);
            v61 = v91 + 0xFFFF;
            v62[v78] = v91 - 1;
            if (v64 - 1 == v78)
              goto LABEL_135;
            ++v78;
            if (v91)
              goto LABEL_121;
          }
          goto LABEL_152;
        }
        goto LABEL_121;
      }
      if (v64)
      {
        v78 = 0;
LABEL_121:
        if (v78 <= v64)
          v92 = v64;
        else
          v92 = v78;
        while (v92 != v78)
        {
          if (v78 >= *((_QWORD *)v63._rawValue + 2))
            goto LABEL_150;
          v62[v78] = *(_WORD *)(v40 + 32 + 2 * v78);
          if ((uint64_t)++v78 >= (uint64_t)v64)
          {
            LODWORD(v77) = 1;
LABEL_128:
            if ((uint64_t)v78 < (uint64_t)v65)
            {
              while (1)
              {
LABEL_129:
                if (v78 >= v65)
                  goto LABEL_157;
                v64 = *((_QWORD *)v63._rawValue + 2);
                if (v78 < v64)
                  break;
LABEL_134:
                __break(1u);
LABEL_135:
                LODWORD(v77) = HIWORD(v61);
                v78 = v64;
                if ((uint64_t)v64 >= (uint64_t)v65)
                  goto LABEL_136;
              }
              v93 = v77 + (*(unsigned __int16 *)(v22 + 32 + 2 * v78) ^ 0xFFFF);
              --v65;
              v64 = v22 + 34;
              while (1)
              {
                LODWORD(v77) = HIWORD(v93);
                v62[v78] = v93;
                if (v65 == v78)
                  break;
                v93 = v77 + (*(unsigned __int16 *)(v64 + 2 * v78++) ^ 0xFFFF);
                if (v78 >= *((_QWORD *)v63._rawValue + 2))
                  goto LABEL_134;
              }
            }
LABEL_136:
            if ((_DWORD)v77)
            {
              v83 = *((_QWORD *)v63._rawValue + 2);
              if (v83)
                goto LABEL_138;
              goto LABEL_141;
            }
            swift_bridgeObjectRelease();
            lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
            v50 = (void *)swift_allocError();
            *v98 = 0;
            swift_willThrow();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_21:
            v139 = 0;
            v140 = 0;
            _So9NSDecimala__exponent_setter(0, &v138);
            _So9NSDecimala__length_setter(0, &v138);
            _So9NSDecimala__isNegative_setter(1, &v138);
            _So9NSDecimala__isCompact_setter_0(0, &v138);
            _So9NSDecimala__reserved_setter(&v138);

            v19 = v138;
            v20 = v139;
            v21 = WORD1(v139);
            return v19 | ((unint64_t)v20 << 32) | (v21 << 48);
          }
        }
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
        goto LABEL_153;
      }
      if (v65)
      {
        v78 = 0;
        LODWORD(v77) = 1;
        goto LABEL_129;
      }
      v83 = 8;
LABEL_138:
      if (!v62[v83 - 1])
      {
        do
        {
          *((_QWORD *)v63._rawValue + 2) = v83 - 1;
          if (v83 == 1)
            break;
        }
        while (!*((unsigned __int16 *)v63._rawValue + v83-- + 14));
      }
LABEL_141:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v95 = *((_QWORD *)v63._rawValue + 2);
      if (HIDWORD(v95))
        goto LABEL_161;
      _So9NSDecimala__length_setter(v95, &v129);
      LODWORD(v126) = v110;
      WORD2(v126) = v99;
      HIWORD(v126) = v25;
      LOWORD(v127) = v122;
      WORD1(v127) = v120;
      WORD2(v127) = v118;
      HIWORD(v127) = v116;
      LOWORD(v128) = v114;
      HIWORD(v128) = v112;
LABEL_143:
      v96 = _So9NSDecimala__isNegative_getter(&v126);
      _So9NSDecimala__isNegative_setter(v96, &v129);
      NSDecimal.copyVariableLengthInteger(_:)(v63);
      if (v97)
      {
        v50 = v97;
        goto LABEL_145;
      }
      swift_bridgeObjectRelease();
LABEL_147:
      _So9NSDecimala__isCompact_setter_0(0, &v129);
      NSDecimal.compact()();
      v19 = v129;
      v20 = WORD2(v129);
      v21 = HIWORD(v129);
      return v19 | ((unint64_t)v20 << 32) | (v21 << 48);
    }
    NSDecimal.asVariableLengthInteger()(v103, v102, v101);
    v58 = v57;
    NSDecimal.asVariableLengthInteger()(v100, v105, v104);
    v40 = v59;
    v60 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v60 + 32) = 0;
    v62 = (_WORD *)(v60 + 32);
    *(_QWORD *)(v60 + 16) = 8;
    v63._rawValue = (void *)v60;
    *(_QWORD *)(v60 + 40) = 0;
    v64 = *(_QWORD *)(v58 + 16);
    v65 = *(_QWORD *)(v40 + 16);
    if (v65 >= v64)
      v66 = *(_QWORD *)(v58 + 16);
    else
      v66 = *(_QWORD *)(v40 + 16);
    if (v66)
    {
      v67 = (*(unsigned __int16 *)(v58 + 32) | 0x10000) - *(unsigned __int16 *)(v40 + 32);
      v68 = HIWORD(v67);
      *v62 = *(_WORD *)(v58 + 32) - *(_WORD *)(v40 + 32);
      v69 = v66 - 1;
      if (v69)
      {
        v67 = v68 + *(unsigned __int16 *)(v58 + 34) - *(unsigned __int16 *)(v40 + 34) + 0xFFFF;
        v68 = HIWORD(v67);
        *(_WORD *)(v60 + 34) = v67;
        if (v69 == 1)
        {
          v70 = 2;
        }
        else
        {
          v61 = *(unsigned __int16 *)(v40 + 36);
          v67 = v68 + *(unsigned __int16 *)(v58 + 36) - v61 + 0xFFFF;
          v68 = HIWORD(v67);
          *(_WORD *)(v60 + 36) = v67;
          if (v69 == 2)
          {
            v70 = 3;
          }
          else
          {
            v67 = v68 + *(unsigned __int16 *)(v58 + 38) - *(unsigned __int16 *)(v40 + 38) + 0xFFFF;
            v68 = HIWORD(v67);
            *(_WORD *)(v60 + 38) = v67;
            if (v69 == 3)
            {
              v70 = 4;
            }
            else
            {
              v61 = *(unsigned __int16 *)(v40 + 40);
              v67 = v68 + *(unsigned __int16 *)(v58 + 40) - v61 + 0xFFFF;
              v68 = HIWORD(v67);
              *(_WORD *)(v60 + 40) = v67;
              if (v69 == 4)
              {
                v70 = 5;
              }
              else
              {
                v67 = v68 + *(unsigned __int16 *)(v58 + 42) - *(unsigned __int16 *)(v40 + 42) + 0xFFFF;
                v68 = HIWORD(v67);
                *(_WORD *)(v60 + 42) = v67;
                if (v69 == 5)
                {
                  v70 = 6;
                }
                else
                {
                  v61 = *(unsigned __int16 *)(v40 + 44);
                  v67 = v68 + *(unsigned __int16 *)(v58 + 44) - v61 + 0xFFFF;
                  v68 = HIWORD(v67);
                  *(_WORD *)(v60 + 44) = v67;
                  if (v69 == 6)
                  {
                    v70 = 7;
                  }
                  else
                  {
                    v84 = v68 + *(unsigned __int16 *)(v58 + 46) - *(unsigned __int16 *)(v40 + 46);
                    v67 = v84 + 0xFFFF;
                    *(_WORD *)(v60 + 46) = v84 - 1;
                    if (v69 != 7)
                    {
LABEL_159:
                      __break(1u);
                      goto LABEL_160;
                    }
                    v61 = v58;
                    v68 = HIWORD(v67);
                    v70 = 8;
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        v70 = 1;
      }
      if (v70 >= v64)
        goto LABEL_96;
      if (!HIWORD(v67))
      {
        while (v70 < *(_QWORD *)(v60 + 16))
        {
          v85 = *(unsigned __int16 *)(v58 + 32 + 2 * v70);
          v61 = v85 + 0xFFFF;
          v62[v70] = v85 - 1;
          if (v64 - 1 == v70)
            goto LABEL_103;
          ++v70;
          if (v85)
            goto LABEL_89;
        }
        goto LABEL_151;
      }
    }
    else
    {
      if (!v64)
      {
        if (v65)
        {
          v70 = 0;
          v68 = 1;
          goto LABEL_97;
        }
        v82 = 8;
LABEL_106:
        if (!v62[v82 - 1])
        {
          do
          {
            *(_QWORD *)(v60 + 16) = v82 - 1;
            if (v82 == 1)
              break;
          }
          while (!*(unsigned __int16 *)(v60 + 28 + 2 * v82--));
        }
LABEL_109:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v88 = *((_QWORD *)v63._rawValue + 2);
        if (HIDWORD(v88))
          goto LABEL_161;
        _So9NSDecimala__length_setter(v88, &v129);
        LODWORD(v126) = v124;
        WORD2(v126) = v108;
        HIWORD(v126) = v21;
        LOWORD(v127) = v22;
        WORD1(v127) = v23;
        WORD2(v127) = v24;
        HIWORD(v127) = v25;
        LOWORD(v128) = v26;
        HIWORD(v128) = v27;
        goto LABEL_143;
      }
      v70 = 0;
    }
LABEL_89:
    v75 = v58 + 32;
    if (v70 <= v64)
      v77 = v64;
    else
      v77 = v70;
    while (v77 != v70)
    {
      if (v70 >= *(_QWORD *)(v60 + 16))
        goto LABEL_113;
      v62[v70] = *(_WORD *)(v75 + 2 * v70);
      if ((uint64_t)++v70 >= (uint64_t)v64)
      {
        v68 = 1;
LABEL_96:
        if ((uint64_t)v70 < (uint64_t)v65)
        {
          while (1)
          {
LABEL_97:
            if (v70 >= v65)
              goto LABEL_156;
            v64 = *(_QWORD *)(v60 + 16);
            if (v70 < v64)
              break;
LABEL_102:
            __break(1u);
LABEL_103:
            v68 = HIWORD(v61);
            v70 = v64;
            if ((uint64_t)v64 >= (uint64_t)v65)
              goto LABEL_104;
          }
          v86 = v68 + (*(unsigned __int16 *)(v40 + 32 + 2 * v70) ^ 0xFFFF);
          --v65;
          v64 = v40 + 34;
          while (1)
          {
            v68 = HIWORD(v86);
            v62[v70] = v86;
            if (v65 == v70)
              break;
            v86 = v68 + (*(unsigned __int16 *)(v64 + 2 * v70++) ^ 0xFFFF);
            if (v70 >= *(_QWORD *)(v60 + 16))
              goto LABEL_102;
          }
        }
LABEL_104:
        if (v68)
        {
          v82 = *(_QWORD *)(v60 + 16);
          if (v82)
            goto LABEL_106;
          goto LABEL_109;
        }
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
        v50 = (void *)swift_allocError();
        *v89 = 0;
        swift_willThrow();
        swift_bridgeObjectRelease();
LABEL_145:
        swift_bridgeObjectRelease();
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_113:
    __break(1u);
    goto LABEL_114;
  }
  return v19 | ((unint64_t)v20 << 32) | (v21 << 48);
}

uint64_t specialized static NSDecimal.* infix(_:_:)(unint64_t a1, unint64_t a2, unsigned int a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  unint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _BYTE *v23;
  uint64_t result;
  int isNegative_getter;
  _BOOL8 v26;
  int v27;
  uint64_t v28;
  Swift::OpaquePointer v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v49;
  unint64_t v50;
  uint64_t v51;
  __int16 v52;
  unint64_t v53;
  unint64_t v54;
  __int16 v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  unsigned int v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v65;
  unint64_t v66;
  __int16 v67;
  __int16 v68;
  _QWORD v69[4];

  v69[0] = a1;
  v61 = HIDWORD(a1);
  v57 = HIWORD(a1);
  v69[1] = a2;
  v9 = a2 >> 16;
  v58 = HIDWORD(a2);
  v60 = HIWORD(a2);
  LODWORD(v69[2]) = a3;
  v59 = HIWORD(a3);
  if (!_So9NSDecimala__length_getter(v69))
  {
    LODWORD(v69[0]) = a1;
    WORD2(v69[0]) = v61;
    HIWORD(v69[0]) = v57;
    LOWORD(v69[1]) = a2;
    WORD1(v69[1]) = v9;
    WORD2(v69[1]) = v58;
    HIWORD(v69[1]) = v60;
    LOWORD(v69[2]) = a3;
    WORD1(v69[2]) = v59;
    if (_So9NSDecimala__isNegative_getter(v69))
      goto LABEL_16;
  }
  v69[0] = a4;
  v69[1] = a5;
  LODWORD(v69[2]) = a6;
  if (!_So9NSDecimala__length_getter(v69))
  {
    v69[0] = a4;
    v69[1] = a5;
    LODWORD(v69[2]) = a6;
    if (_So9NSDecimala__isNegative_getter(v69))
    {
LABEL_16:
      lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
      v22 = (void *)swift_allocError();
      *v23 = 0;
      swift_willThrow();
LABEL_17:
      *(_QWORD *)((char *)&v69[1] + 4) = 0;
      *(_QWORD *)((char *)v69 + 4) = 0;
      _So9NSDecimala__exponent_setter(0, v69);
      _So9NSDecimala__length_setter(0, v69);
      _So9NSDecimala__isNegative_setter(1, v69);
      _So9NSDecimala__isCompact_setter_0(0, v69);
      _So9NSDecimala__reserved_setter(v69);

LABEL_18:
      v19 = v69[0];
      v20 = WORD2(v69[0]);
      v21 = HIWORD(v69[0]);
      return v19 | (unint64_t)(v20 << 32) | (v21 << 48);
    }
  }
  v53 = HIWORD(a4);
  v56 = a4;
  v54 = HIDWORD(a4);
  v55 = HIWORD(a6);
  LODWORD(v69[0]) = a1;
  WORD2(v69[0]) = v61;
  HIWORD(v69[0]) = v57;
  LOWORD(v69[1]) = a2;
  WORD1(v69[1]) = v9;
  WORD2(v69[1]) = v58;
  HIWORD(v69[1]) = v60;
  LOWORD(v69[2]) = a3;
  WORD1(v69[2]) = v59;
  if (!_So9NSDecimala__length_getter(v69)
    || (v69[0] = a4, v69[1] = a5, v10 = a6, LODWORD(v69[2]) = a6, !_So9NSDecimala__length_getter(v69)))
  {
    v19 = 0;
    v20 = 0;
    v21 = 0;
    return v19 | (unint64_t)(v20 << 32) | (v21 << 48);
  }
  v52 = v9;
  NSDecimal.asVariableLengthInteger()(a1, a2, a3);
  v12 = v11;
  NSDecimal.asVariableLengthInteger()(a4, a5, a6);
  v14 = v13;
  v15 = *(_QWORD *)(v12 + 16);
  if (v15)
  {
    v16 = *(_QWORD *)(v13 + 16);
    if (v16)
    {
      v17 = v15 + v16;
      if (__OFADD__(v15, v16))
        goto LABEL_67;
      if (v17 > 15)
      {
        v17 = 16;
        goto LABEL_29;
      }
      if ((v17 & 0x8000000000000000) == 0)
      {
        if (!v17)
        {
          v18 = MEMORY[0x1E0DEE9D8];
          goto LABEL_30;
        }
LABEL_29:
        v18 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(_QWORD *)(v18 + 16) = v17;
        bzero((void *)(v18 + 32), 2 * v17);
LABEL_30:
        v36 = 0;
        v37 = v14 + 32;
        v38 = v18 + 32;
LABEL_31:
        if (v36 == v16)
          goto LABEL_66;
        v39 = 0;
        v40 = 0;
        v41 = v36 + 1;
        while (v15 != v40)
        {
          v42 = v40 + v36;
          if (__OFADD__(v40, v36))
            goto LABEL_62;
          if (v42 >= v17)
          {
            if (v39)
              goto LABEL_57;
            v39 = *(unsigned __int16 *)(v37 + 2 * v36);
            if (*(_WORD *)(v37 + 2 * v36))
            {
              v39 = *(unsigned __int16 *)(v12 + 2 * v40 + 32);
              if (*(_WORD *)(v12 + 2 * v40 + 32))
                goto LABEL_57;
            }
          }
          else
          {
            if (v42 < 0)
            {
              __break(1u);
LABEL_65:
              __break(1u);
LABEL_66:
              __break(1u);
LABEL_67:
              __break(1u);
LABEL_68:
              __break(1u);
LABEL_69:
              __break(1u);
LABEL_70:
              __break(1u);
LABEL_71:
              __break(1u);
              goto LABEL_72;
            }
            if ((unint64_t)v42 >= *(_QWORD *)(v18 + 16))
              goto LABEL_65;
            v43 = 2 * v42;
            v44 = v39
                + *(unsigned __int16 *)(v38 + v43)
                + *(unsigned __int16 *)(v12 + 2 * v40 + 32) * *(unsigned __int16 *)(v37 + 2 * v36);
            v39 = HIWORD(v44);
            *(_WORD *)(v38 + v43) = v44;
          }
          if (v15 == ++v40)
          {
            if (v39)
            {
              v34 = __OFADD__(v15, v36);
              v45 = v15 + v36;
              if (v34)
                goto LABEL_68;
              if (v45 >= v17)
              {
LABEL_57:
                lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
                v22 = (void *)swift_allocError();
                *v49 = 0;
                swift_willThrow();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_17;
              }
              if (v45 < 0)
                goto LABEL_69;
              if ((unint64_t)v45 >= *(_QWORD *)(v18 + 16))
                goto LABEL_70;
              *(_WORD *)(v38 + 2 * v45) = v39;
            }
            v36 = v41;
            if (v41 != v16)
              goto LABEL_31;
            v46 = *(_QWORD *)(v18 + 16);
            v51 = v18;
            if (v46 && !*(_WORD *)(v38 + 2 * v46 - 2))
            {
              v47 = v46 + 14;
              do
              {
                *(_QWORD *)(v18 + 16) = v47 - 15;
                if (v47 == 15)
                  break;
              }
              while (!*(unsigned __int16 *)(v18 + 2 * v47--));
            }
LABEL_63:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_21;
          }
        }
        __break(1u);
LABEL_62:
        __break(1u);
        goto LABEL_63;
      }
      goto LABEL_74;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v51 = MEMORY[0x1E0DEE9D8];
LABEL_21:
  memset(v69, 0, 20);
  LODWORD(v65) = a1;
  WORD2(v65) = v61;
  HIWORD(v65) = v57;
  LOWORD(v66) = a2;
  WORD1(v66) = v52;
  WORD2(v66) = v58;
  HIWORD(v66) = v60;
  v67 = a3;
  v68 = v59;
  isNegative_getter = _So9NSDecimala__isNegative_getter(&v65);
  v65 = a4;
  v66 = a5;
  v67 = v10;
  v68 = v55;
  v26 = isNegative_getter != _So9NSDecimala__isNegative_getter(&v65);
  _So9NSDecimala__isNegative_setter(v26, v69);
  LODWORD(v65) = a1;
  WORD2(v65) = v61;
  HIWORD(v65) = v57;
  LOWORD(v66) = a2;
  WORD1(v66) = v52;
  WORD2(v66) = v58;
  HIWORD(v66) = v60;
  v67 = a3;
  v68 = v59;
  v27 = _So9NSDecimala__exponent_getter((char *)&v65);
  LODWORD(v65) = v56;
  WORD2(v65) = v54;
  HIWORD(v65) = v53;
  v66 = a5;
  v67 = v10;
  v68 = v55;
  v28 = _So9NSDecimala__exponent_getter((char *)&v65) + v27;
  v29._rawValue = (void *)v51;
  if (*(_QWORD *)(v51 + 16) >= 9uLL)
  {
    specialized static NSDecimal._fitMantissa(_:roundingMode:)(v51, 0);
    v31 = v30;
    v33 = v32;
    swift_bridgeObjectRelease();
    if (v33 < (uint64_t)0xFFFFFFFF80000000)
      goto LABEL_71;
    if (v33 > 0x7FFFFFFF)
    {
LABEL_72:
      __break(1u);
    }
    else
    {
      v34 = __OFADD__((_DWORD)v28, (_DWORD)v33);
      v28 = (v28 + v33);
      if (!v34)
      {
        v29._rawValue = v31;
        goto LABEL_26;
      }
    }
    __break(1u);
LABEL_74:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_75;
  }
LABEL_26:
  NSDecimal.copyVariableLengthInteger(_:)(v29);
  if (v35)
  {
    v22 = v35;
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  v50 = *((_QWORD *)v29._rawValue + 2);
  swift_bridgeObjectRelease();
  if (!HIDWORD(v50))
  {
    _So9NSDecimala__length_setter(v50, v69);
    _So9NSDecimala__isCompact_setter_0(0, v69);
    if ((int)v28 < 128)
    {
      _So9NSDecimala__exponent_setter(v28, v69);
      NSDecimal.compact()();
      goto LABEL_18;
    }
    goto LABEL_16;
  }
LABEL_75:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized NSDecimal.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  char *v22;
  __int16 v23;
  __int16 v24;
  __int16 v25;
  __int16 v26;
  __int16 v27;
  __int16 v28;
  _BYTE v29[24];
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NSDecimal.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSDecimal.CodingKeys and conformance NSDecimal.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    v29[0] = 0;
    v7 = KeyedDecodingContainer.decode(_:forKey:)();
    v29[0] = 1;
    v8 = KeyedDecodingContainer.decode(_:forKey:)();
    v29[0] = 2;
    v9 = KeyedDecodingContainer.decode(_:forKey:)();
    v29[0] = 3;
    v33 = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v22) = 4;
    KeyedDecodingContainer.nestedUnkeyedContainer(forKey:)();
    v32 = v9;
    v21 = v31;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v29, v30);
    v20 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    v21 = v31;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v29, v30);
    v19 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    v21 = v31;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v29, v30);
    v18 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    v21 = v31;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v29, v30);
    LODWORD(v21) = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    v17 = v31;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v29, v30);
    LODWORD(v17) = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    v16 = v31;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v29, v30);
    LODWORD(v16) = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    v15 = v31;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v29, v30);
    LODWORD(v15) = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    v14[1] = v31;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v29, v30);
    v11 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    v12 = v32 & 1;
    WORD2(v22) = v20;
    v13 = v33 & 1;
    HIWORD(v22) = v19;
    v23 = v18;
    v24 = v21;
    v25 = v17;
    v26 = v16;
    v27 = v15;
    v28 = v11;
    _So9NSDecimala__exponent_setter(v7, &v22);
    _So9NSDecimala__length_setter(v8, &v22);
    _So9NSDecimala__isNegative_setter(v12, &v22);
    _So9NSDecimala__isCompact_setter_0(v13, &v22);
    _So9NSDecimala__reserved_setter(&v22);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v6 = v22;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v6;
}

void specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t i;
  char v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  int v37;
  __int16 v38;
  __int16 v39;
  __int16 v40;
  __int16 v41;
  __int16 v42;
  __int16 v43;
  __int16 v44;
  __int16 v45;
  __int16 v46;
  __int16 v47;
  __int16 v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  __int16 v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  __int16 v57;
  __int16 v58;
  __int16 v59;
  __int16 v60;
  __int16 v61;
  __int16 v62;
  __int16 v63;
  int v64;
  unint64_t v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char v70;
  Swift::Int v71;
  unint64_t v72;
  uint64_t v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  unsigned int v77;
  void *v78;
  int v79;
  __int16 v80;
  unint64_t v81;
  unsigned int v82;
  unint64_t v83;
  unint64_t v84;
  int v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  char v93;
  unint64_t v94;
  char v95;
  unint64_t v96;
  uint64_t v97;
  char v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  char v104;
  char v105;
  char v106;
  char v107;
  char v108;
  uint64_t v109;
  BOOL v110;
  int v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  BOOL v117;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  __int16 v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  _OWORD v133[2];
  unint64_t v134;
  _OWORD v135[2];

  v7 = a2;
  v8 = a1;
  memset(v135, 0, 20);
  v9 = specialized skipWhiteSpaces #1 <A>(from:) in static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)(0xFuLL, a1, a2);
  v10 = v9;
  v134 = v9;
  v11 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0)
    v11 = v8 & 0xFFFFFFFFFFFFLL;
  v132 = v11;
  v12 = v9 >> 14;
  v131 = 4 * v11;
  if (v9 >> 14 == 4 * v11)
    goto LABEL_47;
  v13 = (v8 >> 59) & 1;
  if ((v7 & 0x1000000000000000) == 0)
    LOBYTE(v13) = 1;
  v14 = v9 & 0xC;
  v15 = 4 << v13;
  if (v14 == 4 << v13)
    v9 = _StringGuts._slowEnsureMatchingEncoding(_:)(v9, v8, v7);
  v16 = v9 >> 16;
  if (v9 >> 16 >= v132)
  {
    __break(1u);
    goto LABEL_41;
  }
  if ((v7 & 0x1000000000000000) != 0)
  {
LABEL_41:
    v18 = String.UTF8View._foreignSubscript(position:)();
    goto LABEL_15;
  }
  if ((v7 & 0x2000000000000000) != 0)
  {
    *(_QWORD *)&v133[0] = v8;
    *((_QWORD *)&v133[0] + 1) = v7 & 0xFFFFFFFFFFFFFFLL;
    v18 = *((_BYTE *)v133 + v16);
    goto LABEL_15;
  }
  if ((v8 & 0x1000000000000000) == 0)
    goto LABEL_196;
  for (i = (v7 & 0xFFFFFFFFFFFFFFFLL) + 32; ; i = _StringObject.sharedUTF8.getter())
  {
    v18 = *(_BYTE *)(i + v16);
LABEL_15:
    if (v18 == 43)
      goto LABEL_27;
    v19 = v10;
    if (v14 == v15)
      v19 = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, v8, v7);
    v16 = v19 >> 16;
    if (v19 >> 16 < v132)
      break;
    __break(1u);
LABEL_196:
    ;
  }
  if ((v7 & 0x1000000000000000) != 0)
  {
    v21 = String.UTF8View._foreignSubscript(position:)();
    goto LABEL_26;
  }
  if ((v7 & 0x2000000000000000) != 0)
  {
    *(_QWORD *)&v133[0] = v8;
    *((_QWORD *)&v133[0] + 1) = v7 & 0xFFFFFFFFFFFFFFLL;
    v21 = *((_BYTE *)v133 + v16);
    goto LABEL_26;
  }
  if ((v8 & 0x1000000000000000) == 0)
    goto LABEL_279;
  v20 = (v7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  while (2)
  {
    v21 = *(_BYTE *)(v20 + v16);
LABEL_26:
    if (v21 != 45)
      goto LABEL_47;
LABEL_27:
    v22 = v10;
    if (v14 == v15)
      v22 = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, v8, v7);
    v16 = v22 >> 16;
    if (v22 >> 16 >= v132)
    {
      __break(1u);
      goto LABEL_43;
    }
    if ((v7 & 0x1000000000000000) != 0)
    {
      v24 = String.UTF8View._foreignSubscript(position:)();
    }
    else if ((v7 & 0x2000000000000000) != 0)
    {
      *(_QWORD *)&v133[0] = v8;
      *((_QWORD *)&v133[0] + 1) = v7 & 0xFFFFFFFFFFFFFFLL;
      v24 = *((_BYTE *)v133 + v16);
    }
    else
    {
      if ((v8 & 0x1000000000000000) == 0)
        goto LABEL_273;
      v23 = (v7 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_34:
      v24 = *(_BYTE *)(v23 + v16);
    }
    _So9NSDecimala__isNegative_setter(v24 == 45, v135);
    if (v14 == v15)
    {
LABEL_43:
      v10 = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, v8, v7);
      if ((v7 & 0x1000000000000000) == 0)
        goto LABEL_39;
LABEL_44:
      if (v132 <= v10 >> 16)
      {
        __break(1u);
LABEL_202:
        __break(1u);
        goto LABEL_203;
      }
      v10 = String.UTF8View._foreignIndex(after:)();
      goto LABEL_46;
    }
    if ((v7 & 0x1000000000000000) != 0)
      goto LABEL_44;
LABEL_39:
    v10 = (v10 & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_46:
    v134 = v10;
    v12 = v10 >> 14;
LABEL_47:
    v128 = v8;
    if (v12 == v131)
    {
LABEL_48:
      v134 = v10;
LABEL_49:
      if (v131 <= v10 >> 14)
        goto LABEL_245;
      v25 = (v8 >> 59) & 1;
      if ((v7 & 0x1000000000000000) == 0)
        LOBYTE(v25) = 1;
      v26 = v10 & 0xC;
      v14 = 4 << v25;
      v27 = v10;
      if (v26 != 4 << v25)
      {
LABEL_53:
        v28 = v27 >> 16;
        if (v27 >> 16 >= v132)
        {
          __break(1u);
        }
        else if ((v7 & 0x1000000000000000) == 0)
        {
          if ((v7 & 0x2000000000000000) == 0)
          {
            if ((v8 & 0x1000000000000000) != 0)
            {
              v29 = (v7 & 0xFFFFFFFFFFFFFFFLL) + 32;
              goto LABEL_58;
            }
            goto LABEL_200;
          }
          *(_QWORD *)&v133[0] = v8;
          *((_QWORD *)&v133[0] + 1) = v7 & 0xFFFFFFFFFFFFFFLL;
          v30 = *((_BYTE *)v133 + v28);
          goto LABEL_105;
        }
        v30 = String.UTF8View._foreignSubscript(position:)();
        goto LABEL_105;
      }
LABEL_149:
      v27 = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, v8, v7);
      goto LABEL_53;
    }
    v26 = 0;
    v31 = 0;
    v32 = (v8 >> 59) & 1;
    if ((v7 & 0x1000000000000000) == 0)
      LOBYTE(v32) = 1;
    v130 = 4 << v32;
    v123 = (v7 & 0xFFFFFFFFFFFFFFFLL) + 32;
    v124 = v7 & 0xFFFFFFFFFFFFFFLL;
    v127 = v7;
    while (1)
    {
      v6 = v10 & 0xC;
      v33 = v10;
      if (v6 == v130)
        v33 = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, v8, v7);
      v14 = v33 >> 16;
      if (v33 >> 16 >= v132)
      {
        __break(1u);
LABEL_148:
        __break(1u);
        goto LABEL_149;
      }
      if ((v7 & 0x1000000000000000) != 0)
      {
        v35 = String.UTF8View._foreignSubscript(position:)();
      }
      else if ((v7 & 0x2000000000000000) != 0)
      {
        *(_QWORD *)&v133[0] = v8;
        *((_QWORD *)&v133[0] + 1) = v124;
        v35 = *((unsigned __int8 *)v133 + v14);
      }
      else
      {
        v34 = v123;
        if ((v8 & 0x1000000000000000) == 0)
          v34 = _StringObject.sharedUTF8.getter();
        v35 = *(unsigned __int8 *)(v34 + v14);
      }
      if ((v35 - 58) < 0xF6u)
        break;
      v129 = v10 & 0xC;
      if ((v26 & 1) == 0)
      {
        v122 = v10;
        v134 = v10;
        v12 = LODWORD(v135[0]);
        v6 = WORD2(v135[0]);
        v50 = WORD3(v135[0]);
        v51 = WORD4(v135[0]);
        v14 = WORD5(v135[0]);
        v10 = WORD6(v135[0]);
        v26 = HIWORD(v135[0]);
        v52 = v135[1];
        v126 = WORD1(v135[1]);
        NSDecimal._multiply(byShort:)((NSDecimal *)(WORD4(v135[0]) | ((unint64_t)WORD5(v135[0]) << 16) | ((unint64_t)WORD6(v135[0]) << 32)), 0xAu);
        if (v31 || (NSDecimal._add(_:)((NSDecimal *)(v35 - 48), (v35 - 48)), v31))
        {

          LODWORD(v133[0]) = v12;
          WORD2(v133[0]) = v6;
          WORD3(v133[0]) = v50;
          WORD4(v133[0]) = v51;
          WORD5(v133[0]) = v14;
          WORD6(v133[0]) = v10;
          HIWORD(v133[0]) = v26;
          LOWORD(v133[1]) = v52;
          WORD1(v133[1]) = v126;
          if (_So9NSDecimala__exponent_getter((char *)v133) == 127)
          {
            *(_QWORD *)((char *)v133 + 4) = 0;
            *(_QWORD *)((char *)v133 + 12) = 0;
            _So9NSDecimala__exponent_setter(0, v133);
            _So9NSDecimala__length_setter(0, v133);
            _So9NSDecimala__isNegative_setter(1, v133);
            _So9NSDecimala__isCompact_setter_0(0, v133);
            _So9NSDecimala__reserved_setter(v133);
            v56 = v133[0];
            v57 = WORD2(v133[0]);
            v58 = WORD3(v133[0]);
            v59 = WORD4(v133[0]);
            v60 = WORD5(v133[0]);
            v61 = WORD6(v133[0]);
            v6 = HIWORD(v133[0]);
            v62 = v133[1];
            v63 = WORD1(v133[1]);
            v135[0] = v133[0];
            LODWORD(v135[1]) = v133[1];
          }
          else
          {
            LODWORD(v133[0]) = v12;
            WORD2(v133[0]) = v6;
            WORD3(v133[0]) = v50;
            WORD4(v133[0]) = v51;
            WORD5(v133[0]) = v14;
            WORD6(v133[0]) = v10;
            HIWORD(v133[0]) = v26;
            LOWORD(v133[1]) = v52;
            WORD1(v133[1]) = v126;
            v66 = _So9NSDecimala__exponent_getter((char *)v133);
            _So9NSDecimala__exponent_setter((v66 + 1), v135);
            v56 = v135[0];
            v57 = WORD2(v135[0]);
            v58 = WORD3(v135[0]);
            v59 = WORD4(v135[0]);
            v60 = WORD5(v135[0]);
            v61 = WORD6(v135[0]);
            v6 = HIWORD(v135[0]);
            v62 = v135[1];
            v63 = WORD1(v135[1]);
          }
          LODWORD(v133[0]) = v56;
          WORD2(v133[0]) = v57;
          WORD3(v133[0]) = v58;
          WORD4(v133[0]) = v59;
          WORD5(v133[0]) = v60;
          WORD6(v133[0]) = v61;
          HIWORD(v133[0]) = v6;
          LOWORD(v133[1]) = v62;
          WORD1(v133[1]) = v63;
          if (!_So9NSDecimala__length_getter(v133))
          {
            LODWORD(v133[0]) = v56;
            WORD2(v133[0]) = v57;
            WORD3(v133[0]) = v58;
            WORD4(v133[0]) = v59;
            WORD5(v133[0]) = v60;
            WORD6(v133[0]) = v61;
            HIWORD(v133[0]) = v6;
            LOWORD(v133[1]) = v62;
            WORD1(v133[1]) = v63;
            if (_So9NSDecimala__isNegative_getter(v133))
              goto LABEL_125;
          }
          v7 = v127;
          v8 = v128;
          specialized $defer #1 <A>() in static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)(v128, v127, &v134);
          v31 = 0;
          v26 = 1;
          v10 = v134;
          goto LABEL_93;
        }
        *(_QWORD *)&v135[0] = v53;
        *((_QWORD *)&v135[0] + 1) = v54;
        LODWORD(v135[1]) = v55;
        if (v129 == v130)
        {
          v7 = v127;
          v8 = v128;
          v67 = _StringGuts._slowEnsureMatchingEncoding(_:)(v122, v128, v127);
          if ((v127 & 0x1000000000000000) != 0)
            goto LABEL_101;
LABEL_96:
          v10 = (v67 & 0xFFFFFFFFFFFF0000) + 65540;
        }
        else
        {
          v7 = v127;
          v8 = v128;
          v67 = v122;
          if ((v127 & 0x1000000000000000) == 0)
            goto LABEL_96;
LABEL_101:
          if (v132 <= v67 >> 16)
          {
            __break(1u);
LABEL_198:
            v68 = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, v8, v7);
            while (1)
            {
              v28 = v68 >> 16;
              if (v68 >> 16 < v132)
                break;
              __break(1u);
LABEL_200:
              v29 = _StringObject.sharedUTF8.getter();
LABEL_58:
              v30 = *(_BYTE *)(v29 + v28);
LABEL_105:
              if (v30 == 69)
                goto LABEL_121;
              v68 = v10;
              if (v26 == v14)
                goto LABEL_198;
            }
            if ((v7 & 0x1000000000000000) != 0)
            {
              v70 = String.UTF8View._foreignSubscript(position:)();
            }
            else if ((v7 & 0x2000000000000000) != 0)
            {
              *(_QWORD *)&v133[0] = v8;
              *((_QWORD *)&v133[0] + 1) = v7 & 0xFFFFFFFFFFFFFFLL;
              v70 = *((_BYTE *)v133 + v28);
            }
            else
            {
              if ((v8 & 0x1000000000000000) != 0)
                v69 = (v7 & 0xFFFFFFFFFFFFFFFLL) + 32;
              else
                v69 = _StringObject.sharedUTF8.getter();
              v70 = *(_BYTE *)(v69 + v28);
            }
            if (v70 != 101)
              goto LABEL_245;
LABEL_121:
            if (v26 == v14)
              goto LABEL_153;
            if ((v7 & 0x1000000000000000) != 0)
              goto LABEL_154;
LABEL_123:
            v10 = (v10 & 0xFFFFFFFFFFFF0000) + 65540;
            goto LABEL_156;
          }
          v10 = String.UTF8View._foreignIndex(after:)();
        }
        v26 = 0;
        v134 = v10;
LABEL_93:
        v12 = v10 >> 14;
        goto LABEL_64;
      }
      v125 = v31;
      v36 = v10;
      v37 = v135[0];
      v38 = WORD2(v135[0]);
      v39 = WORD3(v135[0]);
      v40 = WORD4(v135[0]);
      v41 = WORD5(v135[0]);
      v42 = WORD6(v135[0]);
      v43 = HIWORD(v135[0]);
      v44 = v135[1];
      v45 = WORD1(v135[1]);
      v133[0] = v135[0];
      LODWORD(v133[1]) = v135[1];
      if (_So9NSDecimala__exponent_getter((char *)v133) == 127)
      {
        *(_OWORD *)((char *)v133 + 4) = 0uLL;
        _So9NSDecimala__exponent_setter(0, v133);
        _So9NSDecimala__length_setter(0, v133);
        _So9NSDecimala__isNegative_setter(1, v133);
        _So9NSDecimala__isCompact_setter_0(0, v133);
        _So9NSDecimala__reserved_setter(v133);
        v14 = LODWORD(v133[0]);
        v26 = WORD2(v133[0]);
        v10 = WORD3(v133[0]);
        v46 = WORD4(v133[0]);
        v47 = WORD5(v133[0]);
        v6 = WORD6(v133[0]);
        v48 = HIWORD(v133[0]);
        v12 = LOWORD(v133[1]);
        v49 = WORD1(v133[1]);
        v135[0] = v133[0];
        LODWORD(v135[1]) = v133[1];
      }
      else
      {
        LODWORD(v133[0]) = v37;
        WORD2(v133[0]) = v38;
        WORD3(v133[0]) = v39;
        WORD4(v133[0]) = v40;
        WORD5(v133[0]) = v41;
        WORD6(v133[0]) = v42;
        HIWORD(v133[0]) = v43;
        LOWORD(v133[1]) = v44;
        WORD1(v133[1]) = v45;
        v64 = _So9NSDecimala__exponent_getter((char *)v133);
        _So9NSDecimala__exponent_setter((v64 + 1), v135);
        v14 = LODWORD(v135[0]);
        v26 = WORD2(v135[0]);
        v10 = WORD3(v135[0]);
        v46 = WORD4(v135[0]);
        v47 = WORD5(v135[0]);
        v6 = WORD6(v135[0]);
        v48 = HIWORD(v135[0]);
        v12 = LOWORD(v135[1]);
        v49 = WORD1(v135[1]);
      }
      LODWORD(v133[0]) = v14;
      WORD2(v133[0]) = v26;
      WORD3(v133[0]) = v10;
      WORD4(v133[0]) = v46;
      WORD5(v133[0]) = v47;
      WORD6(v133[0]) = v6;
      HIWORD(v133[0]) = v48;
      LOWORD(v133[1]) = v12;
      WORD1(v133[1]) = v49;
      if (!_So9NSDecimala__length_getter(v133))
      {
        LODWORD(v133[0]) = v14;
        WORD2(v133[0]) = v26;
        WORD3(v133[0]) = v10;
        WORD4(v133[0]) = v46;
        WORD5(v133[0]) = v47;
        WORD6(v133[0]) = v6;
        HIWORD(v133[0]) = v48;
        LOWORD(v133[1]) = v12;
        WORD1(v133[1]) = v49;
        if (_So9NSDecimala__isNegative_getter(v133))
        {
          v134 = v36;
LABEL_125:
          specialized $defer #1 <A>() in static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)(v128, v127, &v134);
          goto LABEL_243;
        }
      }
      if (v129 == v130)
      {
        v7 = v127;
        v8 = v128;
        v65 = _StringGuts._slowEnsureMatchingEncoding(_:)(v36, v128, v127);
        v31 = v125;
        if ((v127 & 0x1000000000000000) != 0)
        {
LABEL_87:
          if (v132 <= v65 >> 16)
            goto LABEL_148;
          v10 = String.UTF8View._foreignIndex(after:)();
          goto LABEL_63;
        }
      }
      else
      {
        v7 = v127;
        v8 = v128;
        v65 = v36;
        v31 = v125;
        if ((v127 & 0x1000000000000000) != 0)
          goto LABEL_87;
      }
      v10 = (v65 & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_63:
      v12 = v10 >> 14;
      v26 = 1;
LABEL_64:
      if (v12 == v131)
        goto LABEL_48;
    }
    v134 = v10;
    if (v12 >= v131
      || (specialized stringViewContainsDecimalSeparator #1 <A>(at:) in static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)(v10, a3, a4, v8, v7) & 1) == 0)
    {
      goto LABEL_49;
    }
    if ((a4 & 0x1000000000000000) != 0)
      v71 = String.UTF8View._foreignCount()();
    else
      v71 = (a4 & 0x2000000000000000) != 0 ? HIBYTE(a4) & 0xF : a3 & 0xFFFFFFFFFFFFLL;
    specialized Collection.formIndex(_:offsetBy:)(&v134, v71, v8, v7);
    v10 = v134;
    if (v131 == v134 >> 14)
      goto LABEL_49;
    while (1)
    {
      v72 = v10;
      if ((v10 & 0xC) == v130)
        v72 = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, v8, v7);
      v14 = v72 >> 16;
      if (v72 >> 16 >= v132)
        break;
      if ((v7 & 0x1000000000000000) != 0)
      {
        v74 = String.UTF8View._foreignSubscript(position:)();
      }
      else if ((v7 & 0x2000000000000000) != 0)
      {
        *(_QWORD *)&v133[0] = v8;
        *((_QWORD *)&v133[0] + 1) = v124;
        v74 = *((unsigned __int8 *)v133 + v14);
      }
      else
      {
        v73 = v123;
        if ((v8 & 0x1000000000000000) == 0)
          v73 = _StringObject.sharedUTF8.getter();
        v74 = *(unsigned __int8 *)(v73 + v14);
      }
      if ((v74 - 58) < 0xF6u)
        goto LABEL_49;
      if ((v26 & 1) != 0)
      {
        LOBYTE(v26) = 1;
      }
      else
      {
        NSDecimal._multiplyBy10AndAdd(number:)((NSDecimal *)(v74 - 48), (v74 - 48));
        if (v78)
        {

          LOBYTE(v26) = 1;
          v7 = v127;
        }
        else
        {
          v79 = v75;
          v6 = v76;
          v80 = v77;
          *(_QWORD *)&v135[0] = v75;
          v81 = HIDWORD(v75);
          v12 = HIWORD(v75);
          v82 = HIWORD(v77);
          *((_QWORD *)&v135[0] + 1) = v76;
          v83 = v76 >> 16;
          v84 = HIDWORD(v76);
          v26 = HIWORD(v76);
          LODWORD(v135[1]) = v77;
          *(_QWORD *)&v133[0] = v75;
          *((_QWORD *)&v133[0] + 1) = v76;
          LODWORD(v133[1]) = v77;
          if (_So9NSDecimala__exponent_getter((char *)v133) == -128)
            goto LABEL_125;
          LODWORD(v133[0]) = v79;
          WORD2(v133[0]) = v81;
          WORD3(v133[0]) = v12;
          WORD4(v133[0]) = v6;
          WORD5(v133[0]) = v83;
          WORD6(v133[0]) = v84;
          HIWORD(v133[0]) = v26;
          LOWORD(v133[1]) = v80;
          WORD1(v133[1]) = v82;
          v85 = _So9NSDecimala__exponent_getter((char *)v133);
          _So9NSDecimala__exponent_setter((v85 - 1), v135);
          LOBYTE(v26) = 0;
          v7 = v127;
          v8 = v128;
        }
      }
      specialized $defer #1 <A>() in static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)(v8, v7, &v134);
      v10 = v134;
      if (v131 == v134 >> 14)
        goto LABEL_49;
    }
    __break(1u);
LABEL_153:
    v10 = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, v8, v7);
    if ((v7 & 0x1000000000000000) == 0)
      goto LABEL_123;
LABEL_154:
    if (v132 <= v10 >> 16)
      goto LABEL_202;
    v10 = String.UTF8View._foreignIndex(after:)();
LABEL_156:
    v134 = v10;
    v6 = v10 >> 14;
    v15 = v10 & 0xC;
    if (v10 >> 14 != v131)
    {
      v90 = v10;
      if (v15 == v14)
        v90 = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, v8, v7);
      v91 = v90 >> 16;
      if (v90 >> 16 >= v132)
      {
        __break(1u);
      }
      else
      {
        if ((v7 & 0x1000000000000000) != 0)
        {
          v93 = String.UTF8View._foreignSubscript(position:)();
        }
        else if ((v7 & 0x2000000000000000) != 0)
        {
          *(_QWORD *)&v133[0] = v8;
          *((_QWORD *)&v133[0] + 1) = v7 & 0xFFFFFFFFFFFFFFLL;
          v93 = *((_BYTE *)v133 + v91);
        }
        else
        {
          if ((v8 & 0x1000000000000000) != 0)
            v92 = (v7 & 0xFFFFFFFFFFFFFFFLL) + 32;
          else
            v92 = _StringObject.sharedUTF8.getter();
          v93 = *(_BYTE *)(v92 + v91);
        }
        if (v93 != 45)
        {
          v94 = v10;
          if (v15 == v14)
            goto LABEL_275;
          goto LABEL_174;
        }
LABEL_182:
        v96 = v10;
        if (v15 != v14)
        {
LABEL_183:
          v16 = v96 >> 16;
          if (v96 >> 16 >= v132)
          {
            __break(1u);
          }
          else
          {
            if ((v7 & 0x1000000000000000) != 0)
            {
              v98 = String.UTF8View._foreignSubscript(position:)();
            }
            else if ((v7 & 0x2000000000000000) != 0)
            {
              *(_QWORD *)&v133[0] = v8;
              *((_QWORD *)&v133[0] + 1) = v7 & 0xFFFFFFFFFFFFFFLL;
              v98 = *((_BYTE *)v133 + v16);
            }
            else
            {
              if ((v8 & 0x1000000000000000) != 0)
                v97 = (v7 & 0xFFFFFFFFFFFFFFFLL) + 32;
              else
                v97 = _StringObject.sharedUTF8.getter();
              v98 = *(_BYTE *)(v97 + v16);
            }
            v16 = v98 == 45;
            if (v15 != v14)
            {
              if ((v7 & 0x1000000000000000) == 0)
                goto LABEL_194;
LABEL_209:
              if (v132 <= v10 >> 16)
                goto LABEL_278;
              v10 = String.UTF8View._foreignIndex(after:)();
              goto LABEL_211;
            }
          }
          v10 = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, v8, v7);
          if ((v7 & 0x1000000000000000) != 0)
            goto LABEL_209;
LABEL_194:
          v10 = (v10 & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_211:
          v6 = v10 >> 14;
          goto LABEL_212;
        }
      }
      v96 = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, v8, v7);
      goto LABEL_183;
    }
    if (v15 != v14)
    {
      v15 = v10 >> 16;
      if ((v7 & 0x1000000000000000) != 0)
        goto LABEL_159;
LABEL_161:
      v86 = 0;
      v87 = LODWORD(v135[1]);
      v88 = *((_QWORD *)&v135[0] + 1);
      v89 = *(_QWORD *)&v135[0];
LABEL_264:
      *(_QWORD *)a6 = v89;
      *(_QWORD *)(a6 + 8) = v88;
      *(_QWORD *)(a6 + 16) = v87;
      *(_QWORD *)(a6 + 24) = v15;
      *(_BYTE *)(a6 + 32) = v86;
      return;
    }
LABEL_203:
    v10 = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, v8, v7);
    v15 = v10 >> 16;
    if ((v7 & 0x1000000000000000) == 0)
      goto LABEL_161;
LABEL_159:
    if (v132 >= v15)
    {
      v15 = String.UTF8View._foreignDistance(from:to:)();
      goto LABEL_161;
    }
    __break(1u);
LABEL_275:
    v94 = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, v8, v7);
LABEL_174:
    v16 = v94 >> 16;
    if (v94 >> 16 >= v132)
    {
      __break(1u);
      goto LABEL_277;
    }
    if ((v7 & 0x1000000000000000) != 0)
    {
      v95 = String.UTF8View._foreignSubscript(position:)();
    }
    else if ((v7 & 0x2000000000000000) != 0)
    {
      *(_QWORD *)&v133[0] = v8;
      *((_QWORD *)&v133[0] + 1) = v7 & 0xFFFFFFFFFFFFFFLL;
      v95 = *((_BYTE *)v133 + v16);
    }
    else if ((v8 & 0x1000000000000000) != 0)
    {
      v95 = *(_BYTE *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x20 + (v94 >> 16));
    }
    else
    {
      v95 = *(_BYTE *)(_StringObject.sharedUTF8.getter() + v16);
    }
    if (v95 == 43)
      goto LABEL_182;
    v16 = 0;
LABEL_212:
    if (v6 == v131)
    {
      v15 = 0;
LABEL_239:
      if (!(_DWORD)v16 || (v110 = __OFSUB__(0, v15), v15 = -v15, !v110))
      {
        LODWORD(v133[0]) = v135[0];
        *(_OWORD *)((char *)v133 + 4) = *(_OWORD *)((char *)v135 + 4);
        v111 = _So9NSDecimala__exponent_getter((char *)v133);
        v110 = __OFADD__(v15, v111);
        v112 = v15 + v111;
        if (!v110)
        {
          if (v112 != (char)v112)
          {
LABEL_243:
            v88 = 0;
            v87 = 0;
            v15 = 0;
            v89 = 1;
            v86 = 1;
            goto LABEL_264;
          }
          _So9NSDecimala__exponent_setter(v112, v135);
LABEL_245:
          if ((a5 & 1) != 0
            && (v10 = specialized skipWhiteSpaces #1 <A>(from:) in static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)(v10, v8, v7), v131 != v10 >> 14)|| v10 < 0x4000)
          {
            v89 = 0;
            v88 = 0;
            v87 = 0;
            v15 = 0;
            v86 = 1;
            goto LABEL_264;
          }
          NSDecimal.compact()();
          v113 = (v7 & 0x1000000000000000) == 0 || (v8 & 0x800000000000000) != 0;
          if ((v10 & 0xC) == 4 << v113)
            goto LABEL_269;
          v15 = v10 >> 16;
          if ((v7 & 0x1000000000000000) != 0)
            goto LABEL_270;
LABEL_254:
          v114 = LOWORD(v135[1]);
          v115 = WORD1(v135[1]);
          v116 = v135[0];
          v117 = NSDecimal.isNaN.getter(*(unint64_t *)&v135[0], *((unint64_t *)&v135[0] + 1), LOWORD(v135[1]) | (WORD1(v135[1]) << 16));
          v87 = v114 | (v115 << 16);
          if (v117)
            v89 = 0;
          else
            v89 = v116;
          if (v117)
            v88 = 0;
          else
            v88 = *((_QWORD *)&v116 + 1);
          if (v117)
            v87 = 0;
          v86 = 0;
          goto LABEL_264;
        }
        __break(1u);
LABEL_273:
        v23 = _StringObject.sharedUTF8.getter();
        goto LABEL_34;
      }
LABEL_277:
      __break(1u);
LABEL_278:
      __break(1u);
LABEL_279:
      v20 = _StringObject.sharedUTF8.getter();
      continue;
    }
    break;
  }
  v15 = 0;
  v6 = v7 & 0xFFFFFFFFFFFFFFLL;
  v12 = 10;
  while (2)
  {
    v99 = v10;
    v10 &= 0xCu;
    v100 = v99;
    if (v10 == v14)
      v99 = _StringGuts._slowEnsureMatchingEncoding(_:)(v99, v8, v7);
    v8 = v99 >> 16;
    if (v99 >> 16 < v132)
    {
      if ((v7 & 0x1000000000000000) != 0)
      {
        v8 = v128;
        v105 = String.UTF8View._foreignSubscript(position:)();
        v103 = UInt8.digitValue.getter(v105);
        if ((v106 & 1) != 0)
          goto LABEL_238;
      }
      else if ((v7 & 0x2000000000000000) != 0)
      {
        *(_QWORD *)&v133[0] = v128;
        *((_QWORD *)&v133[0] + 1) = v7 & 0xFFFFFFFFFFFFFFLL;
        v107 = *((_BYTE *)v133 + v8);
        v8 = v128;
        v103 = UInt8.digitValue.getter(v107);
        if ((v108 & 1) != 0)
          goto LABEL_238;
      }
      else
      {
        v101 = (v7 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if ((v128 & 0x1000000000000000) == 0)
          v101 = _StringObject.sharedUTF8.getter();
        v102 = *(_BYTE *)(v101 + v8);
        v8 = v128;
        v103 = UInt8.digitValue.getter(v102);
        if ((v104 & 1) != 0)
        {
LABEL_238:
          v10 = v100;
          goto LABEL_239;
        }
      }
      v109 = 10 * v15;
      if ((unsigned __int128)(v15 * (__int128)10) >> 64 != (10 * v15) >> 63)
        goto LABEL_266;
      v15 = v109 + v103;
      if (__OFADD__(v109, v103))
        goto LABEL_267;
      if (v15 > 254)
        goto LABEL_243;
      if (v10 == v14)
      {
        v100 = _StringGuts._slowEnsureMatchingEncoding(_:)(v100, v8, v7);
        if ((v7 & 0x1000000000000000) == 0)
          goto LABEL_215;
LABEL_234:
        if (v132 <= v100 >> 16)
          goto LABEL_268;
        v10 = String.UTF8View._foreignIndex(after:)();
      }
      else
      {
        if ((v7 & 0x1000000000000000) != 0)
          goto LABEL_234;
LABEL_215:
        v10 = (v100 & 0xFFFFFFFFFFFF0000) + 65540;
      }
      if (v131 == v10 >> 14)
        goto LABEL_239;
      continue;
    }
    break;
  }
  __break(1u);
LABEL_266:
  __break(1u);
LABEL_267:
  __break(1u);
LABEL_268:
  __break(1u);
LABEL_269:
  v15 = (unint64_t)_StringGuts._slowEnsureMatchingEncoding(_:)(v10, v8, v7) >> 16;
  if ((v7 & 0x1000000000000000) == 0)
    goto LABEL_254;
LABEL_270:
  if (v132 >= v15)
  {
    v15 = String.UTF8View._foreignDistance(from:to:)();
    goto LABEL_254;
  }
  __break(1u);
}

uint64_t outlined init with take of NSDecimal.DecimalParseResult(uint64_t a1, uint64_t a2)
{
  __swift_memcpy33_8(a2, a1);
  return a2;
}

unint64_t lazy protocol witness table accessor for type NSDecimal.CodingKeys and conformance NSDecimal.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSDecimal.CodingKeys and conformance NSDecimal.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.CodingKeys and conformance NSDecimal.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSDecimal.CodingKeys, &unk_1E0F155E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.CodingKeys and conformance NSDecimal.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSDecimal.CodingKeys and conformance NSDecimal.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.CodingKeys and conformance NSDecimal.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSDecimal.CodingKeys, &unk_1E0F155E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.CodingKeys and conformance NSDecimal.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSDecimal.CodingKeys and conformance NSDecimal.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.CodingKeys and conformance NSDecimal.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSDecimal.CodingKeys, &unk_1E0F155E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.CodingKeys and conformance NSDecimal.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSDecimal.CodingKeys and conformance NSDecimal.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.CodingKeys and conformance NSDecimal.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSDecimal.CodingKeys, &unk_1E0F155E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.CodingKeys and conformance NSDecimal.CodingKeys);
  }
  return result;
}

uint64_t specialized NSDecimal.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746E656E6F707865 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6874676E656CLL && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x69746167654E7369 && a2 == 0xEA00000000006576
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6361706D6F437369 && a2 == 0xE900000000000074
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x61737369746E616DLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

void specialized static NSDecimal.-= infix(_:_:)(int *a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  __int16 v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int16 v12;
  unsigned int v13;
  int isNegative_getter;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  Swift::OpaquePointer v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  _BYTE *v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  _WORD *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unint64_t v59;
  int v60;
  unint64_t v61;
  int v62;
  __int16 v63;
  __int16 v64;
  __int16 v65;
  __int16 v66;
  __int16 v67;
  __int16 v68;
  int v69;
  int v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  unsigned int v77;
  unint64_t v79;
  uint64_t v80;
  Swift::OpaquePointer v81;
  _BYTE *v82;
  int v83;
  int v84;
  unint64_t v85;
  unsigned int v86;
  unint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  _BYTE *v92;
  unint64_t v93;
  unsigned int v94;
  unint64_t v95;
  unint64_t v96;
  unsigned int v97;
  unint64_t v98;
  uint64_t v99;
  int v100;
  __int16 v101;
  uint64_t v102;
  __int16 v104;
  int v105;
  __int16 v106;
  uint64_t v107;
  __int16 v108;
  uint64_t v109;
  __int16 v110;
  uint64_t v111;
  __int16 v112;
  int v113;
  __int16 v114;
  uint64_t v115;
  __int16 v116;
  uint64_t v117;
  __int16 v118;
  __int16 v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unsigned int v123;
  unint64_t v124;
  unint64_t v125;
  unsigned int v126;
  unint64_t v127;
  unint64_t v128;
  unsigned int v129;
  unint64_t v130;
  unint64_t v131;
  unsigned int v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;

  v4 = a4;
  v136 = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  v116 = *((_WORD *)a1 + 2);
  v6 = HIDWORD(a2);
  v7 = HIWORD(a2);
  v119 = *((_WORD *)a1 + 3);
  LODWORD(v8) = a2;
  v9 = a3 >> 16;
  v10 = HIDWORD(a3);
  v11 = HIWORD(a3);
  v110 = *((_WORD *)a1 + 5);
  v12 = a3;
  v13 = HIWORD(a4);
  v114 = *((_WORD *)a1 + 6);
  v112 = *((_WORD *)a1 + 7);
  v104 = *((_WORD *)a1 + 4);
  v106 = *((_WORD *)a1 + 8);
  v108 = *((_WORD *)a1 + 9);
  v133 = a2;
  LOWORD(v134) = WORD2(a2);
  WORD1(v134) = HIWORD(a2);
  HIDWORD(v134) = a3;
  LOWORD(v135) = WORD2(a3);
  WORD1(v135) = HIWORD(a3);
  HIDWORD(v135) = a4;
  v130 = a2;
  v131 = a3;
  v132 = a4;
  if (_So9NSDecimala__length_getter(&v130))
  {
    LODWORD(v130) = v8;
    WORD2(v130) = v6;
    HIWORD(v130) = v7;
    LOWORD(v131) = v12;
    WORD1(v131) = v9;
    WORD2(v131) = v10;
    HIWORD(v131) = v11;
    LOWORD(v132) = v4;
    HIWORD(v132) = v13;
    isNegative_getter = _So9NSDecimala__isNegative_getter(&v130);
    _So9NSDecimala__isNegative_setter(isNegative_getter ^ 1u, &v133);
    LODWORD(v8) = v133;
    LOWORD(v6) = v134;
    LOWORD(v7) = WORD1(v134);
    v12 = WORD2(v134);
    LOWORD(v9) = HIWORD(v134);
    LOWORD(v10) = v135;
    LOWORD(v11) = WORD1(v135);
    v4 = WORD2(v135);
    LOWORD(v13) = HIWORD(v135);
  }
  LODWORD(v130) = v5;
  WORD2(v130) = v116;
  HIWORD(v130) = v119;
  LOWORD(v131) = v104;
  WORD1(v131) = v110;
  WORD2(v131) = v114;
  HIWORD(v131) = v112;
  LOWORD(v132) = v106;
  HIWORD(v132) = v108;
  if (!_So9NSDecimala__length_getter(&v130))
  {
    LODWORD(v130) = v5;
    WORD2(v130) = v116;
    HIWORD(v130) = v119;
    LOWORD(v131) = v104;
    WORD1(v131) = v110;
    WORD2(v131) = v114;
    HIWORD(v131) = v112;
    LOWORD(v132) = v106;
    HIWORD(v132) = v108;
    if (_So9NSDecimala__isNegative_getter(&v130))
      goto LABEL_15;
  }
  LODWORD(v130) = v8;
  WORD2(v130) = v6;
  HIWORD(v130) = v7;
  LOWORD(v131) = v12;
  WORD1(v131) = v9;
  WORD2(v131) = v10;
  HIWORD(v131) = v11;
  LOWORD(v132) = v4;
  HIWORD(v132) = v13;
  if (!_So9NSDecimala__length_getter(&v130))
  {
    LODWORD(v130) = v8;
    WORD2(v130) = v6;
    HIWORD(v130) = v7;
    LOWORD(v131) = v12;
    WORD1(v131) = v9;
    WORD2(v131) = v10;
    HIWORD(v131) = v11;
    LOWORD(v132) = v4;
    HIWORD(v132) = v13;
    if (_So9NSDecimala__isNegative_getter(&v130))
      goto LABEL_15;
  }
  LODWORD(v130) = v5;
  WORD2(v130) = v116;
  HIWORD(v130) = v119;
  LOWORD(v131) = v104;
  WORD1(v131) = v110;
  WORD2(v131) = v114;
  HIWORD(v131) = v112;
  LOWORD(v132) = v106;
  HIWORD(v132) = v108;
  if (!_So9NSDecimala__length_getter(&v130))
  {
    v32 = a1;
    v17 = v8;
    LOWORD(v8) = v12;
    LOWORD(v5) = v4;
    LOWORD(v18) = v13;
    goto LABEL_20;
  }
  LODWORD(v130) = v8;
  WORD2(v130) = v6;
  HIWORD(v130) = v7;
  LOWORD(v131) = v12;
  WORD1(v131) = v9;
  WORD2(v131) = v10;
  HIWORD(v131) = v11;
  LOWORD(v132) = v4;
  HIWORD(v132) = v13;
  if (!_So9NSDecimala__length_getter(&v130))
  {
    v17 = v5;
    LOWORD(v8) = v104;
    LOWORD(v5) = v106;
    LOWORD(v18) = v108;
    LOWORD(v6) = v116;
    LOWORD(v7) = v119;
    v32 = a1;
    LOWORD(v9) = v110;
    LOWORD(v11) = v112;
    LOWORD(v10) = v114;
    goto LABEL_20;
  }
  LODWORD(v130) = v5;
  WORD2(v130) = v116;
  HIWORD(v130) = v119;
  LOWORD(v131) = v104;
  WORD1(v131) = v110;
  WORD2(v131) = v114;
  HIWORD(v131) = v112;
  LOWORD(v132) = v106;
  HIWORD(v132) = v108;
  LODWORD(v127) = v8;
  WORD2(v127) = v6;
  HIWORD(v127) = v7;
  LOWORD(v128) = v12;
  WORD1(v128) = v9;
  WORD2(v128) = v10;
  HIWORD(v128) = v11;
  LOWORD(v129) = v4;
  HIWORD(v129) = v13;
  specialized static NSDecimal._normalize(a:b:roundingMode:)((int *)&v130, (uint64_t)&v127);
  v15 = WORD2(v130);
  v117 = HIWORD(v130);
  v120 = v130;
  v124 = v130;
  v115 = (unsigned __int16)v131;
  v125 = v131;
  v109 = WORD2(v131);
  v111 = WORD1(v131);
  v107 = HIWORD(v131);
  v105 = (unsigned __int16)v132;
  v126 = v132;
  v113 = HIWORD(v132);
  v16 = _So9NSDecimala__length_getter(&v124);
  v17 = v127;
  v6 = WORD2(v127);
  v7 = HIWORD(v127);
  v8 = (unsigned __int16)v128;
  v9 = WORD1(v128);
  v10 = WORD2(v128);
  v11 = HIWORD(v128);
  v5 = (unsigned __int16)v129;
  v18 = HIWORD(v129);
  if (!v16)
    goto LABEL_17;
  v101 = v15;
  v102 = v127;
  v124 = v127;
  v125 = v128;
  v126 = v129;
  if (!_So9NSDecimala__length_getter(&v124))
  {
    LOWORD(v7) = v117;
    v17 = v120;
    LOWORD(v6) = v15;
    LOWORD(v8) = v115;
    LOWORD(v10) = v109;
    LOWORD(v9) = v111;
    LOWORD(v11) = v107;
    LOWORD(v5) = v105;
    LOWORD(v18) = v113;
    goto LABEL_17;
  }
  LODWORD(v124) = v120;
  WORD2(v124) = v15;
  HIWORD(v124) = v117;
  LOWORD(v125) = v115;
  WORD1(v125) = v111;
  WORD2(v125) = v109;
  HIWORD(v125) = v107;
  LOWORD(v126) = v105;
  HIWORD(v126) = v113;
  v121 = __PAIR64__(__PAIR32__(v117, v15), v120);
  LOWORD(v122) = v115;
  *(_DWORD *)((char *)&v122 + 2) = __PAIR32__(v109, v111);
  HIWORD(v122) = v107;
  LOWORD(v123) = v105;
  HIWORD(v123) = v113;
  v100 = _So9NSDecimala__isNegative_getter(&v121);
  LODWORD(v121) = v102;
  WORD2(v121) = v6;
  HIWORD(v121) = v7;
  LOWORD(v122) = v8;
  WORD1(v122) = v9;
  WORD2(v122) = v10;
  HIWORD(v122) = v11;
  LOWORD(v123) = v5;
  HIWORD(v123) = v18;
  if (v100 == _So9NSDecimala__isNegative_getter(&v121))
  {
    LODWORD(v121) = v120;
    WORD2(v121) = v15;
    HIWORD(v121) = v117;
    LOWORD(v122) = v115;
    WORD1(v122) = v111;
    WORD2(v122) = v109;
    HIWORD(v122) = v107;
    LOWORD(v123) = v105;
    HIWORD(v123) = v113;
    v19 = _So9NSDecimala__isNegative_getter(&v121);
    _So9NSDecimala__isNegative_setter(v19, &v124);
    NSDecimal.asVariableLengthInteger()(v120 | (v15 << 32) | (v117 << 48), v115 | (v111 << 16) | (v109 << 32) | (v107 << 48), v105 | (v113 << 16));
    v21 = v20;
    NSDecimal.asVariableLengthInteger()(v102 | (v6 << 32) | (v7 << 48), v8 | (v9 << 16) | (v10 << 32) | (v11 << 48), v5 | (v18 << 16));
    v24 = specialized static NSDecimal._integerAdd(lhs:rhs:maxResultLength:)(v21, v22, 9, v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v25 = *(_QWORD *)(v24 + 16);
    if (v25 <= 8)
    {
      v27._rawValue = (void *)v24;
LABEL_26:
      _So9NSDecimala__length_setter(v25, &v124);
      NSDecimal.copyVariableLengthInteger(_:)(v27);
      v30 = v37;
      swift_bridgeObjectRelease();
      if (v37)
        goto LABEL_16;
      goto LABEL_148;
    }
    specialized static NSDecimal._fitMantissa(_:roundingMode:)(v24, 0);
    v27._rawValue = v26;
    v29 = v28;
    swift_bridgeObjectRelease();
    v62 = v124;
    v63 = WORD2(v124);
    v64 = HIWORD(v124);
    v65 = v125;
    v66 = WORD1(v125);
    v36 = WORD2(v125);
    v67 = HIWORD(v125);
    v68 = v126;
    v121 = v124;
    v122 = v125;
    v123 = v126;
    v118 = HIWORD(v126);
    v69 = _So9NSDecimala__exponent_getter((char *)&v121);
    if (v29 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (v29 <= 0x7FFFFFFF)
      {
        if (!__OFADD__(v69, (_DWORD)v29))
        {
          if (v69 + (int)v29 > 127)
          {
            swift_bridgeObjectRelease();
LABEL_15:
            lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
            v30 = (void *)swift_allocError();
            *v31 = 0;
            swift_willThrow();
            goto LABEL_16;
          }
          LODWORD(v121) = v62;
          WORD2(v121) = v63;
          HIWORD(v121) = v64;
          LOWORD(v122) = v65;
          WORD1(v122) = v66;
          WORD2(v122) = v36;
          HIWORD(v122) = v67;
          LOWORD(v123) = v68;
          HIWORD(v123) = v118;
          v70 = _So9NSDecimala__exponent_getter((char *)&v121);
          v71 = __OFADD__(v70, (_DWORD)v29);
          v72 = (v70 + v29);
          if (!v71)
          {
            _So9NSDecimala__exponent_setter(v72, &v124);
            v25 = *((_QWORD *)v27._rawValue + 2);
            if (HIDWORD(v25))
              goto LABEL_162;
            goto LABEL_26;
          }
          __break(1u);
          goto LABEL_160;
        }
LABEL_156:
        __break(1u);
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
      }
LABEL_155:
      __break(1u);
      goto LABEL_156;
    }
LABEL_154:
    __break(1u);
    goto LABEL_155;
  }
  v98 = v120 | (v15 << 32) | (v117 << 48);
  v93 = v115 | (v111 << 16) | (v109 << 32) | (v107 << 48);
  v97 = v105 | (v113 << 16);
  NSDecimal.asVariableLengthInteger()(v98, v93, v97);
  v34 = v33;
  v95 = v8 | (v9 << 16) | (v10 << 32) | (v11 << 48);
  v96 = v102 | (v6 << 32) | (v7 << 48);
  v94 = v5 | (v18 << 16);
  NSDecimal.asVariableLengthInteger()(v96, v95, v94);
  v99 = specialized static NSDecimal._integerCompare(lhs:rhs:)(v34, v35);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v36 = v99;
  if (v99 == -1)
  {
    LOWORD(v117) = v18;
    LODWORD(v120) = 0;
    NSDecimal.asVariableLengthInteger()(v96, v95, v94);
    v39 = v38;
    NSDecimal.asVariableLengthInteger()(v98, v93, v97);
    v41 = v40;
    v42 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    v44 = v39;
    v36 = v42;
    *(_QWORD *)(v42 + 32) = 0;
    v45 = (_WORD *)(v42 + 32);
    *(_QWORD *)(v42 + 16) = 8;
    *(_QWORD *)(v42 + 40) = 0;
    v46 = *(_QWORD *)(v44 + 16);
    v47 = *(_QWORD *)(v41 + 16);
    if (v47 >= v46)
      v48 = *(_QWORD *)(v44 + 16);
    else
      v48 = *(_QWORD *)(v41 + 16);
    if (v48)
    {
      v49 = (*(unsigned __int16 *)(v44 + 32) | 0x10000) - *(unsigned __int16 *)(v41 + 32);
      v50 = HIWORD(v49);
      *v45 = *(_WORD *)(v44 + 32) - *(_WORD *)(v41 + 32);
      v51 = v48 - 1;
      if (v51)
      {
        v49 = v50 + *(unsigned __int16 *)(v44 + 34) - *(unsigned __int16 *)(v41 + 34) + 0xFFFF;
        v50 = HIWORD(v49);
        *(_WORD *)(v42 + 34) = v49;
        if (v51 == 1)
        {
          v52 = 2;
        }
        else
        {
          v43 = *(unsigned __int16 *)(v41 + 36);
          v49 = v50 + *(unsigned __int16 *)(v44 + 36) - v43 + 0xFFFF;
          v50 = HIWORD(v49);
          *(_WORD *)(v42 + 36) = v49;
          if (v51 == 2)
          {
            v52 = 3;
          }
          else
          {
            v49 = v50 + *(unsigned __int16 *)(v44 + 38) - *(unsigned __int16 *)(v41 + 38) + 0xFFFF;
            v50 = HIWORD(v49);
            *(_WORD *)(v42 + 38) = v49;
            if (v51 == 3)
            {
              v52 = 4;
            }
            else
            {
              v43 = *(unsigned __int16 *)(v41 + 40);
              v49 = v50 + *(unsigned __int16 *)(v44 + 40) - v43 + 0xFFFF;
              v50 = HIWORD(v49);
              *(_WORD *)(v42 + 40) = v49;
              if (v51 == 4)
              {
                v52 = 5;
              }
              else
              {
                v49 = v50 + *(unsigned __int16 *)(v44 + 42) - *(unsigned __int16 *)(v41 + 42) + 0xFFFF;
                v50 = HIWORD(v49);
                *(_WORD *)(v42 + 42) = v49;
                if (v51 == 5)
                {
                  v52 = 6;
                }
                else
                {
                  v49 = v50 + *(unsigned __int16 *)(v44 + 44) - *(unsigned __int16 *)(v41 + 44) + 0xFFFF;
                  v50 = HIWORD(v49);
                  v43 = v42;
                  *(_WORD *)(v42 + 44) = v49;
                  if (v51 == 6)
                  {
                    v52 = 7;
                  }
                  else
                  {
                    v75 = v50 + *(unsigned __int16 *)(v44 + 46) - *(unsigned __int16 *)(v41 + 46);
                    v49 = v75 + 0xFFFF;
                    *(_WORD *)(v42 + 46) = v75 - 1;
                    if (v51 != 7)
                    {
LABEL_160:
                      __break(1u);
                      goto LABEL_161;
                    }
                    v50 = HIWORD(v49);
                    v52 = 8;
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        v52 = 1;
      }
      if (v52 >= v46)
        goto LABEL_97;
      if (!HIWORD(v49))
      {
        while (v52 < *(_QWORD *)(v42 + 16))
        {
          v76 = *(unsigned __int16 *)(v44 + 32 + 2 * v52);
          v43 = v76 + 0xFFFF;
          v45[v52] = v76 - 1;
          if (v46 - 1 == v52)
            goto LABEL_104;
          ++v52;
          if (v76)
            goto LABEL_90;
        }
        goto LABEL_152;
      }
    }
    else
    {
      if (!v46)
      {
        if (v47)
        {
          v52 = 0;
          v50 = 1;
          goto LABEL_98;
        }
        v73 = 8;
        goto LABEL_107;
      }
      v52 = 0;
    }
LABEL_90:
    v57 = v44 + 32;
    if (v52 <= v46)
      v59 = v46;
    else
      v59 = v52;
    while (v59 != v52)
    {
      if (v52 >= *(_QWORD *)(v42 + 16))
        goto LABEL_114;
      v45[v52] = *(_WORD *)(v57 + 2 * v52);
      if ((uint64_t)++v52 >= (uint64_t)v46)
      {
        v50 = 1;
LABEL_97:
        if ((uint64_t)v52 < (uint64_t)v47)
        {
          while (1)
          {
LABEL_98:
            if (v52 >= v47)
              goto LABEL_157;
            v46 = *(_QWORD *)(v42 + 16);
            if (v52 < v46)
              break;
LABEL_103:
            __break(1u);
LABEL_104:
            v50 = HIWORD(v43);
            v52 = v46;
            if ((uint64_t)v46 >= (uint64_t)v47)
              goto LABEL_105;
          }
          v77 = v50 + (*(unsigned __int16 *)(v41 + 32 + 2 * v52) ^ 0xFFFF);
          --v47;
          v46 = v41 + 34;
          while (1)
          {
            v50 = HIWORD(v77);
            v45[v52] = v77;
            if (v47 == v52)
              break;
            v77 = v50 + (*(unsigned __int16 *)(v46 + 2 * v52++) ^ 0xFFFF);
            if (v52 >= *(_QWORD *)(v42 + 16))
              goto LABEL_103;
          }
        }
LABEL_105:
        if (!v50)
        {
          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
          v30 = (void *)swift_allocError();
          *v82 = 0;
          swift_willThrow();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_16;
        }
        v73 = *(_QWORD *)(v42 + 16);
        if (v73)
        {
LABEL_107:
          if (!v45[v73 - 1])
          {
            do
            {
              *(_QWORD *)(v42 + 16) = v73 - 1;
              if (v73 == 1)
                break;
            }
            while (!*(unsigned __int16 *)(v42 + 28 + 2 * v73--));
          }
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v79 = *(_QWORD *)(v36 + 16);
        if (!HIDWORD(v79))
        {
          _So9NSDecimala__length_setter(v79, &v124);
          LODWORD(v121) = v102;
          WORD2(v121) = v6;
          HIWORD(v121) = v7;
          LOWORD(v122) = v8;
          WORD1(v122) = v9;
          WORD2(v122) = v10;
          HIWORD(v122) = v11;
          LOWORD(v123) = v5;
          HIWORD(v123) = v18;
          v80 = _So9NSDecimala__isNegative_getter(&v121);
          _So9NSDecimala__isNegative_setter(v80, &v124);
          v81._rawValue = (void *)v36;
          goto LABEL_145;
        }
LABEL_162:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
LABEL_163:
        type metadata accessor for NSComparisonResult(0);
        v121 = v36;
        _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
        __break(1u);
        return;
      }
    }
    __break(1u);
LABEL_114:
    __break(1u);
    goto LABEL_115;
  }
  if (!v99)
  {
    v17 = 0;
    LOWORD(v6) = 0;
    LOWORD(v7) = 0;
    LOWORD(v8) = 0;
    LOWORD(v9) = 0;
    LOWORD(v10) = 0;
    LOWORD(v11) = 0;
    LOWORD(v5) = 0;
    LOWORD(v18) = 0;
    goto LABEL_17;
  }
  if (v99 != 1)
    goto LABEL_163;
  NSDecimal.asVariableLengthInteger()(v98, v93, v97);
  v41 = v53;
  NSDecimal.asVariableLengthInteger()(v96, v95, v94);
  v6 = v54;
  v55 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  v36 = v55;
  *(_QWORD *)(v55 + 32) = 0;
  v45 = (_WORD *)(v55 + 32);
  *(_QWORD *)(v55 + 16) = 8;
  *(_QWORD *)(v55 + 40) = 0;
  v46 = *(_QWORD *)(v41 + 16);
  v47 = *(_QWORD *)(v6 + 16);
  if (v47 >= v46)
    v56 = *(_QWORD *)(v41 + 16);
  else
    v56 = *(_QWORD *)(v6 + 16);
  if (v56)
  {
    v57 = v41 + 32;
    v58 = (*(unsigned __int16 *)(v41 + 32) | 0x10000) - *(unsigned __int16 *)(v6 + 32);
    LODWORD(v59) = HIWORD(v58);
    *v45 = *(_WORD *)(v41 + 32) - *(_WORD *)(v6 + 32);
    v52 = v56 - 1;
    v60 = v120;
    if (!v52)
    {
      v61 = 1;
      goto LABEL_118;
    }
    v58 = v59 + *(unsigned __int16 *)(v41 + 34) - *(unsigned __int16 *)(v6 + 34) + 0xFFFF;
    LODWORD(v59) = HIWORD(v58);
    *(_WORD *)(v55 + 34) = v58;
    if (v52 == 1)
    {
      v61 = 2;
      goto LABEL_118;
    }
    v43 = *(unsigned __int16 *)(v6 + 36);
    v58 = v59 + *(unsigned __int16 *)(v41 + 36) - v43 + 0xFFFF;
    LODWORD(v59) = HIWORD(v58);
    *(_WORD *)(v55 + 36) = v58;
    if (v52 == 2)
    {
      v61 = 3;
      goto LABEL_118;
    }
    v58 = v59 + *(unsigned __int16 *)(v41 + 38) - *(unsigned __int16 *)(v6 + 38) + 0xFFFF;
    LODWORD(v59) = HIWORD(v58);
    *(_WORD *)(v55 + 38) = v58;
    if (v52 == 3)
    {
      v61 = 4;
      goto LABEL_118;
    }
    v43 = *(unsigned __int16 *)(v6 + 40);
    v58 = v59 + *(unsigned __int16 *)(v41 + 40) - v43 + 0xFFFF;
    LODWORD(v59) = HIWORD(v58);
    *(_WORD *)(v55 + 40) = v58;
    if (v52 == 4)
    {
      v61 = 5;
      goto LABEL_118;
    }
    v58 = v59 + *(unsigned __int16 *)(v41 + 42) - *(unsigned __int16 *)(v6 + 42) + 0xFFFF;
    LODWORD(v59) = HIWORD(v58);
    *(_WORD *)(v55 + 42) = v58;
    if (v52 == 5)
    {
      v61 = 6;
      goto LABEL_118;
    }
    v43 = *(unsigned __int16 *)(v6 + 44);
    v58 = v59 + *(unsigned __int16 *)(v41 + 44) - v43 + 0xFFFF;
    LODWORD(v59) = HIWORD(v58);
    *(_WORD *)(v55 + 44) = v58;
    if (v52 == 6)
    {
      v61 = 7;
LABEL_117:
      v60 = v120;
LABEL_118:
      if (v61 >= v46)
        goto LABEL_130;
      if (!HIWORD(v58))
      {
        while (v61 < *(_QWORD *)(v36 + 16))
        {
          v84 = *(unsigned __int16 *)(v57 + 2 * v61);
          v43 = v84 + 0xFFFF;
          v45[v61] = v84 - 1;
          if (v46 - 1 == v61)
            goto LABEL_137;
          ++v61;
          if (v84)
            goto LABEL_123;
        }
        goto LABEL_153;
      }
      goto LABEL_123;
    }
LABEL_115:
    v83 = v59 + *(unsigned __int16 *)(v41 + 46) - *(unsigned __int16 *)(v6 + 46);
    v58 = v83 + 0xFFFF;
    *(_WORD *)(v36 + 46) = v83 - 1;
    if (v52 != 7)
    {
LABEL_161:
      __break(1u);
      swift_unexpectedError();
      __break(1u);
      goto LABEL_162;
    }
    LODWORD(v59) = HIWORD(v58);
    v61 = 8;
    goto LABEL_117;
  }
  v60 = v120;
  if (!v46)
  {
    if (v47)
    {
      v61 = 0;
      LODWORD(v59) = 1;
      goto LABEL_131;
    }
    v74 = 8;
LABEL_140:
    if (!v45[v74 - 1])
    {
      do
      {
        *(_QWORD *)(v36 + 16) = v74 - 1;
        if (v74 == 1)
          break;
      }
      while (!*(unsigned __int16 *)(v36 + 28 + 2 * v74--));
    }
LABEL_143:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v88 = *(_QWORD *)(v36 + 16);
    if (HIDWORD(v88))
      goto LABEL_162;
    _So9NSDecimala__length_setter(v88, &v124);
    LODWORD(v121) = v60;
    WORD2(v121) = v101;
    HIWORD(v121) = v117;
    LOWORD(v122) = v115;
    WORD1(v122) = v111;
    WORD2(v122) = v109;
    HIWORD(v122) = v107;
    LOWORD(v123) = v105;
    HIWORD(v123) = v113;
    v89 = _So9NSDecimala__isNegative_getter(&v121);
    _So9NSDecimala__isNegative_setter(v89, &v124);
    v81._rawValue = (void *)v36;
LABEL_145:
    NSDecimal.copyVariableLengthInteger(_:)(v81);
    if (v90)
    {
      v30 = v90;
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
    swift_bridgeObjectRelease();
LABEL_148:
    _So9NSDecimala__isCompact_setter_0(0, &v124);
    NSDecimal.compact()();
    v17 = v124;
    LOWORD(v6) = WORD2(v124);
    LOWORD(v7) = HIWORD(v124);
    LOWORD(v8) = v125;
    LOWORD(v9) = WORD1(v125);
    LOWORD(v10) = WORD2(v125);
    LOWORD(v11) = HIWORD(v125);
    LOWORD(v5) = v126;
    LOWORD(v18) = HIWORD(v126);
    goto LABEL_17;
  }
  v61 = 0;
LABEL_123:
  if (v61 <= v46)
    v85 = v46;
  else
    v85 = v61;
  do
  {
    if (v85 == v61)
    {
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
      goto LABEL_154;
    }
    if (v61 >= *(_QWORD *)(v36 + 16))
      goto LABEL_151;
    v45[v61] = *(_WORD *)(v41 + 32 + 2 * v61);
    ++v61;
  }
  while ((uint64_t)v61 < (uint64_t)v46);
  LODWORD(v59) = 1;
LABEL_130:
  if ((uint64_t)v61 < (uint64_t)v47)
  {
    while (1)
    {
LABEL_131:
      if (v61 >= v47)
        goto LABEL_158;
      v46 = *(_QWORD *)(v36 + 16);
      if (v61 < v46)
        break;
LABEL_136:
      __break(1u);
LABEL_137:
      LODWORD(v59) = HIWORD(v43);
      v61 = v46;
      if ((uint64_t)v46 >= (uint64_t)v47)
        goto LABEL_138;
    }
    v86 = v59 + (*(unsigned __int16 *)(v6 + 32 + 2 * v61) ^ 0xFFFF);
    --v47;
    v46 = v6 + 34;
    while (1)
    {
      LODWORD(v59) = HIWORD(v86);
      v45[v61] = v86;
      if (v47 == v61)
        break;
      v86 = v59 + (*(unsigned __int16 *)(v46 + 2 * v61++) ^ 0xFFFF);
      if (v61 >= *(_QWORD *)(v36 + 16))
        goto LABEL_136;
    }
  }
LABEL_138:
  if ((_DWORD)v59)
  {
    v74 = *(_QWORD *)(v36 + 16);
    if (v74)
      goto LABEL_140;
    goto LABEL_143;
  }
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
  v91 = swift_allocError();
  *v92 = 0;
  swift_willThrow();
  v30 = (void *)v91;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_16:
  v134 = 0;
  v135 = 0;
  _So9NSDecimala__exponent_setter(0, &v133);
  _So9NSDecimala__length_setter(0, &v133);
  _So9NSDecimala__isNegative_setter(1, &v133);
  _So9NSDecimala__isCompact_setter_0(0, &v133);
  _So9NSDecimala__reserved_setter(&v133);

  v17 = v133;
  LOWORD(v6) = v134;
  LOWORD(v7) = WORD1(v134);
  LOWORD(v8) = WORD2(v134);
  LOWORD(v9) = HIWORD(v134);
  LOWORD(v10) = v135;
  LOWORD(v11) = WORD1(v135);
  LOWORD(v5) = WORD2(v135);
  LOWORD(v18) = HIWORD(v135);
LABEL_17:
  v32 = a1;
LABEL_20:
  *v32 = v17;
  *((_WORD *)v32 + 2) = v6;
  *((_WORD *)v32 + 3) = v7;
  *((_WORD *)v32 + 4) = v8;
  *((_WORD *)v32 + 5) = v9;
  *((_WORD *)v32 + 6) = v10;
  *((_WORD *)v32 + 7) = v11;
  *((_WORD *)v32 + 8) = v5;
  *((_WORD *)v32 + 9) = v18;
}

void specialized static NSDecimal.*= infix(_:_:)(unsigned int *a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  __int16 v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  _BYTE *v29;
  unsigned int v30;
  int isNegative_getter;
  _BOOL8 v32;
  int v33;
  uint64_t v34;
  Swift::OpaquePointer v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  unsigned int *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v56;
  unint64_t v57;
  uint64_t v58;
  __int16 v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  __int16 v64;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  __int16 v75;
  __int16 v76;
  __int16 v77;
  __int16 v78;
  __int16 v79;
  __int16 v80;
  __int16 v81;
  __int16 v82;
  _QWORD v83[4];

  v7 = *((unsigned __int16 *)a1 + 3);
  v8 = *((unsigned __int16 *)a1 + 4);
  v9 = *((unsigned __int16 *)a1 + 5);
  v10 = *((unsigned __int16 *)a1 + 6);
  v11 = *((unsigned __int16 *)a1 + 7);
  v12 = *((unsigned __int16 *)a1 + 8);
  v13 = *((unsigned __int16 *)a1 + 9);
  v68 = *((unsigned __int16 *)a1 + 2);
  v69 = *a1;
  LODWORD(v83[0]) = *a1;
  WORD2(v83[0]) = v68;
  HIWORD(v83[0]) = v7;
  v72 = v9;
  v73 = v8;
  LOWORD(v83[1]) = v8;
  WORD1(v83[1]) = v9;
  v70 = v11;
  v71 = v10;
  WORD2(v83[1]) = v10;
  HIWORD(v83[1]) = v11;
  v66 = v13;
  v67 = v12;
  LOWORD(v83[2]) = v12;
  WORD1(v83[2]) = v13;
  if (!_So9NSDecimala__length_getter(v83))
  {
    LODWORD(v83[0]) = v69;
    WORD2(v83[0]) = v68;
    HIWORD(v83[0]) = v7;
    LOWORD(v83[1]) = v73;
    WORD1(v83[1]) = v72;
    WORD2(v83[1]) = v71;
    HIWORD(v83[1]) = v70;
    LOWORD(v83[2]) = v67;
    WORD1(v83[2]) = v66;
    if (_So9NSDecimala__isNegative_getter(v83))
      goto LABEL_15;
  }
  v83[0] = a2;
  v83[1] = a3;
  LODWORD(v83[2]) = a4;
  if (!_So9NSDecimala__length_getter(v83))
  {
    v83[0] = a2;
    v83[1] = a3;
    LODWORD(v83[2]) = a4;
    if (_So9NSDecimala__isNegative_getter(v83))
    {
LABEL_15:
      lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
      v28 = (void *)swift_allocError();
      *v29 = 0;
      swift_willThrow();
LABEL_57:
      *(_OWORD *)((char *)v83 + 4) = 0uLL;
      _So9NSDecimala__exponent_setter(0, v83);
      _So9NSDecimala__length_setter(0, v83);
      _So9NSDecimala__isNegative_setter(1, v83);
      _So9NSDecimala__isCompact_setter_0(0, v83);
      _So9NSDecimala__reserved_setter(v83);

LABEL_58:
      v30 = v83[0];
      v15 = *(_OWORD *)((char *)v83 + 4);
      goto LABEL_59;
    }
  }
  v60 = HIWORD(a3);
  v61 = HIDWORD(a3);
  v62 = a3 >> 16;
  v63 = HIWORD(a2);
  v64 = HIWORD(a4);
  LODWORD(v83[0]) = v69;
  WORD2(v83[0]) = v68;
  HIWORD(v83[0]) = v7;
  LOWORD(v83[1]) = v73;
  WORD1(v83[1]) = v72;
  WORD2(v83[1]) = v71;
  HIWORD(v83[1]) = v70;
  LOWORD(v83[2]) = v67;
  WORD1(v83[2]) = v66;
  v14 = _So9NSDecimala__length_getter(v83);
  v15 = 0uLL;
  if (!v14)
  {
    v30 = 0;
LABEL_59:
    v41 = a1;
    goto LABEL_60;
  }
  v16 = a2;
  v83[0] = a2;
  v17 = HIDWORD(a2);
  v18 = a3;
  v83[1] = a3;
  v19 = a4;
  LODWORD(v83[2]) = a4;
  if (!_So9NSDecimala__length_getter(v83))
  {
    v30 = 0;
    v41 = a1;
    v15 = 0uLL;
LABEL_60:
    *v41 = v30;
    *(_OWORD *)(v41 + 1) = v15;
    return;
  }
  v59 = v7;
  NSDecimal.asVariableLengthInteger()(v69 | (v68 << 32) | (v7 << 48), v73 | (v72 << 16) | (v71 << 32) | (v70 << 48), v67 | (v66 << 16));
  v21 = v20;
  NSDecimal.asVariableLengthInteger()(v16, a3, a4);
  v23 = v22;
  v24 = *(_QWORD *)(v21 + 16);
  if (!v24 || (v25 = *(_QWORD *)(v22 + 16)) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v58 = MEMORY[0x1E0DEE9D8];
    goto LABEL_18;
  }
  v26 = v24 + v25;
  if (__OFADD__(v24, v25))
    goto LABEL_69;
  if (v26 > 15)
  {
    v26 = 16;
LABEL_27:
    v27 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v27 + 16) = v26;
    bzero((void *)(v27 + 32), 2 * v26);
    goto LABEL_28;
  }
  if (v26 < 0)
  {
LABEL_76:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_77;
  }
  if (v26)
    goto LABEL_27;
  v27 = MEMORY[0x1E0DEE9D8];
LABEL_28:
  v43 = 0;
  v44 = v23 + 32;
  v45 = v27 + 32;
  while (2)
  {
    if (v43 == v25)
    {
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
      goto LABEL_72;
    }
    v46 = 0;
    v47 = 0;
    v48 = v43 + 1;
    do
    {
      if (v24 == v47)
      {
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
        goto LABEL_68;
      }
      v49 = v47 + v43;
      if (__OFADD__(v47, v43))
        goto LABEL_65;
      if (v49 >= v26)
      {
        if (v46)
          goto LABEL_55;
        v46 = *(unsigned __int16 *)(v44 + 2 * v43);
        if (*(_WORD *)(v44 + 2 * v43))
        {
          v46 = *(unsigned __int16 *)(v21 + 2 * v47 + 32);
          if (*(_WORD *)(v21 + 2 * v47 + 32))
            goto LABEL_55;
        }
      }
      else
      {
        if (v49 < 0)
          goto LABEL_66;
        if ((unint64_t)v49 >= *(_QWORD *)(v27 + 16))
          goto LABEL_67;
        v50 = 2 * v49;
        v51 = v46
            + *(unsigned __int16 *)(v45 + v50)
            + *(unsigned __int16 *)(v21 + 2 * v47 + 32) * *(unsigned __int16 *)(v44 + 2 * v43);
        v46 = HIWORD(v51);
        *(_WORD *)(v45 + v50) = v51;
      }
      ++v47;
    }
    while (v24 != v47);
    if (!v46)
      goto LABEL_48;
    v40 = __OFADD__(v24, v43);
    v52 = v24 + v43;
    if (v40)
      goto LABEL_70;
    if (v52 >= v26)
    {
LABEL_55:
      lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
      v28 = (void *)swift_allocError();
      *v56 = 0;
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_56;
    }
    if (v52 < 0)
      goto LABEL_71;
    if ((unint64_t)v52 >= *(_QWORD *)(v27 + 16))
    {
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
      goto LABEL_74;
    }
    *(_WORD *)(v45 + 2 * v52) = v46;
LABEL_48:
    v43 = v48;
    if (v48 != v25)
      continue;
    break;
  }
  v53 = *(_QWORD *)(v27 + 16);
  v58 = v27;
  if (v53 && !*(_WORD *)(v45 + 2 * v53 - 2))
  {
    v54 = v53 + 14;
    do
    {
      *(_QWORD *)(v27 + 16) = v54 - 15;
      if (v54 == 15)
        break;
    }
    while (!*(unsigned __int16 *)(v27 + 2 * v54--));
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_18:
  memset(v83, 0, 20);
  v74 = v69;
  v75 = v68;
  v76 = v59;
  v77 = v73;
  v78 = v72;
  v79 = v71;
  v80 = v70;
  v81 = v67;
  v82 = v66;
  isNegative_getter = _So9NSDecimala__isNegative_getter(&v74);
  v74 = v16;
  v75 = v17;
  v76 = v63;
  v77 = v18;
  v78 = v62;
  v79 = v61;
  v80 = v60;
  v81 = v19;
  v82 = v64;
  v32 = isNegative_getter != _So9NSDecimala__isNegative_getter(&v74);
  _So9NSDecimala__isNegative_setter(v32, v83);
  v74 = v69;
  v75 = v68;
  v76 = v59;
  v77 = v73;
  v78 = v72;
  v79 = v71;
  v80 = v70;
  v81 = v67;
  v82 = v66;
  v33 = _So9NSDecimala__exponent_getter((char *)&v74);
  v74 = v16;
  v75 = v17;
  v76 = v63;
  v77 = v18;
  v78 = v62;
  v79 = v61;
  v80 = v60;
  v81 = v19;
  v82 = v64;
  v34 = _So9NSDecimala__exponent_getter((char *)&v74) + v33;
  v35._rawValue = (void *)v58;
  if (*(_QWORD *)(v58 + 16) < 9uLL)
    goto LABEL_24;
  specialized static NSDecimal._fitMantissa(_:roundingMode:)(v58, 0);
  v37 = v36;
  v39 = v38;
  swift_bridgeObjectRelease();
  if (v39 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_73;
  if (v39 > 0x7FFFFFFF)
  {
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  v40 = __OFADD__((_DWORD)v34, (_DWORD)v39);
  v34 = (v34 + v39);
  if (v40)
  {
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }
  v35._rawValue = v37;
LABEL_24:
  NSDecimal.copyVariableLengthInteger(_:)(v35);
  if (v42)
  {
    v28 = v42;
LABEL_56:
    swift_bridgeObjectRelease();
    goto LABEL_57;
  }
  v57 = *((_QWORD *)v35._rawValue + 2);
  swift_bridgeObjectRelease();
  if (!HIDWORD(v57))
  {
    _So9NSDecimala__length_setter(v57, v83);
    _So9NSDecimala__isCompact_setter_0(0, v83);
    if ((int)v34 < 128)
    {
      _So9NSDecimala__exponent_setter(v34, v83);
      NSDecimal.compact()();
      goto LABEL_58;
    }
    goto LABEL_15;
  }
LABEL_77:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t associated type witness table accessor for ExpressibleByIntegerLiteral.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral in NSDecimal()
{
  return MEMORY[0x1E0DEB488];
}

uint64_t base witness table accessor for Equatable in NSDecimal()
{
  return lazy protocol witness table accessor for type NSDecimal and conformance NSDecimal(&lazy protocol witness table cache variable for type NSDecimal and conformance NSDecimal, (uint64_t)&protocol conformance descriptor for NSDecimal);
}

uint64_t base witness table accessor for Numeric in NSDecimal()
{
  return lazy protocol witness table accessor for type NSDecimal and conformance NSDecimal(&lazy protocol witness table cache variable for type NSDecimal and conformance NSDecimal, (uint64_t)&protocol conformance descriptor for NSDecimal);
}

uint64_t base witness table accessor for AdditiveArithmetic in NSDecimal()
{
  return lazy protocol witness table accessor for type NSDecimal and conformance NSDecimal(&lazy protocol witness table cache variable for type NSDecimal and conformance NSDecimal, (uint64_t)&protocol conformance descriptor for NSDecimal);
}

uint64_t base witness table accessor for ExpressibleByIntegerLiteral in NSDecimal()
{
  return lazy protocol witness table accessor for type NSDecimal and conformance NSDecimal(&lazy protocol witness table cache variable for type NSDecimal and conformance NSDecimal, (uint64_t)&protocol conformance descriptor for NSDecimal);
}

uint64_t associated type witness table accessor for Numeric.Magnitude : Comparable in NSDecimal()
{
  return lazy protocol witness table accessor for type NSDecimal and conformance NSDecimal(&lazy protocol witness table cache variable for type NSDecimal and conformance NSDecimal, (uint64_t)&protocol conformance descriptor for NSDecimal);
}

uint64_t associated type witness table accessor for Strideable.Stride : SignedNumeric in NSDecimal()
{
  return lazy protocol witness table accessor for type NSDecimal and conformance NSDecimal(&lazy protocol witness table cache variable for type NSDecimal and conformance NSDecimal, (uint64_t)&protocol conformance descriptor for NSDecimal);
}

uint64_t lazy protocol witness table accessor for type NSDecimal and conformance NSDecimal(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for NSDecimal(255);
    result = MEMORY[0x186DA9D64](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for NSDecimal.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_181B0C738 + 4 * byte_18206CED6[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_181B0C76C + 4 * byte_18206CED1[v4]))();
}

uint64_t sub_181B0C76C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181B0C774(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181B0C77CLL);
  return result;
}

uint64_t sub_181B0C788(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181B0C790);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_181B0C794(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181B0C79C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for NSDecimal.CodingKeys()
{
  return &unk_1E0F155E0;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance NSArray@<X0>(_QWORD *a1@<X8>)
{
  id v2;
  id v3;
  uint64_t result;

  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v3 = objc_msgSend(v2, sel_initWithArray_, _ContiguousArrayBuffer._asCocoaArray()());
  result = swift_unknownObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance [A]@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = static Array._unconditionallyBridgeFromObjectiveC(_:)(a1, *(_QWORD *)(a2 + 16));
  *a3 = result;
  return result;
}

uint64_t NSArray._toCustomAnyHashable()()
{
  void *v0;
  unint64_t v1;

  type metadata accessor for __SwiftDeferredNSArray();
  swift_unknownObjectRetain();
  if (swift_dynamicCastClass())
  {
    swift_retain();

  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AnyHashable>);
  if (!swift_dynamicCastClass())
  {
    swift_unknownObjectRelease();
    objc_msgSend(v0, sel_copy);
    v1 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    specialized _arrayForceCast<A, B>(_:)(v1);
    swift_bridgeObjectRelease();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable]);
  lazy protocol witness table accessor for type [AnyHashable] and conformance <A> [A]();
  return AnyHashable.init<A>(_:)();
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSArray()
{
  id *v0;
  id v1;

  v1 = *v0;
  NSArray._toCustomAnyHashable()();

}

id protocol witness for Sequence.underestimatedCount.getter in conformance NSArray()
{
  id *v0;

  return objc_msgSend(*v0, sel_count);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance NSArray()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;

  v1 = (void *)*v0;
  v2 = specialized _copySequenceToContiguousArray<A>(_:)(*v0);

  return v2;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance NSArray()
{
  return specialized Sequence._copyContents(initializing:)();
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance NSArray@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return protocol witness for MutableCollection.withContiguousMutableStorageIfAvailable<A>(_:) in conformance IndexPath(a1, a2);
}

id NSArray.init(array:)(void *a1)
{
  unint64_t v2;
  id v3;
  id v4;

  type metadata accessor for __SwiftDeferredNSArray();
  swift_unknownObjectRetain();
  if (swift_dynamicCastClass())
  {
    swift_retain();

  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v2 = swift_dynamicCastClass();
  if (!v2)
  {
    swift_unknownObjectRelease();
    objc_msgSend(a1, sel_copy);
    v2 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
  }
  v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  specialized _arrayForceCast<A, B>(_:)(v2);
  swift_bridgeObjectRelease();
  v4 = objc_msgSend(v3, sel_initWithArray_, _ContiguousArrayBuffer._asCocoaArray()());
  swift_unknownObjectRelease();
  return v4;
}

uint64_t NSArray.customMirror.getter()
{
  void *v0;

  type metadata accessor for __SwiftDeferredNSArray();
  swift_unknownObjectRetain();
  if (swift_dynamicCastClass())
  {
    swift_retain();

  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  if (!swift_dynamicCastClass())
  {
    swift_unknownObjectRelease();
    objc_msgSend(v0, sel_copy);
    _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Swift.AnyObject]);
  return Mirror.init(reflecting:)();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance NSArray()
{
  return NSArray.customMirror.getter();
}

uint64_t specialized _ContiguousArrayBuffer.storesOnlyElementsOfType<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t result;
  unint64_t v8;
  unint64_t v9;
  _QWORD v10[2];

  v4 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
  result = swift_dynamicCastMetatype();
  if (result)
    return 1;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    return 1;
  v9 = 0;
  while (v9 < v8)
  {
    v10[1] = *(_QWORD *)(a1 + 32 + 8 * v9);
    swift_unknownObjectRetain();
    result = swift_dynamicCast();
    if (!(_DWORD)result)
      return result;
    ++v9;
    result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a2);
    v8 = *(_QWORD *)(a1 + 16);
    if (v9 == v8)
      return 1;
  }
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._nonNative.getter(uint64_t result)
{
  if (result >= 0)
    return result & 0xFFFFFFFFFFFFFF8;
  return result;
}

unint64_t lazy protocol witness table accessor for type [AnyHashable] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type [AnyHashable] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [AnyHashable] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [AnyHashable]);
    v2 = MEMORY[0x1E0DEC1A0];
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF18], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [AnyHashable] and conformance <A> [A]);
  }
  return result;
}

double one-time initialization function for prefixHeuristics()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  double result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PrefixInflectionHeuristic>);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_182065B90;
  v1 = String.lowercased()();
  *(_QWORD *)(v0 + 32) = 28261;
  *(_QWORD *)(v0 + 40) = 0xE200000000000000;
  *(Swift::String *)(v0 + 48) = v1;
  *(_QWORD *)(v0 + 64) = closure #1 in variable initialization expression of prefixHeuristics;
  *(_QWORD *)(v0 + 72) = 0;
  *(_QWORD *)(v0 + 80) = closure #2 in variable initialization expression of prefixHeuristics;
  *(_QWORD *)(v0 + 88) = 0;
  *(_QWORD *)(v0 + 96) = 0;
  *(_QWORD *)(v0 + 104) = 0;
  v2 = String.lowercased()();
  *(_QWORD *)(v0 + 112) = 28261;
  *(_QWORD *)(v0 + 120) = 0xE200000000000000;
  *(Swift::String *)(v0 + 128) = v2;
  *(_QWORD *)(v0 + 144) = closure #3 in variable initialization expression of prefixHeuristics;
  *(_QWORD *)(v0 + 152) = 0;
  *(_QWORD *)(v0 + 160) = closure #4 in variable initialization expression of prefixHeuristics;
  *(_QWORD *)(v0 + 168) = 0;
  *(_QWORD *)(v0 + 176) = 0;
  *(_QWORD *)(v0 + 184) = 0;
  v3 = String.lowercased()();
  *(_QWORD *)(v0 + 192) = 29286;
  *(_QWORD *)(v0 + 200) = 0xE200000000000000;
  *(Swift::String *)(v0 + 208) = v3;
  *(_QWORD *)(v0 + 224) = closure #5 in variable initialization expression of prefixHeuristics;
  *(_QWORD *)(v0 + 232) = 0;
  *(_QWORD *)(v0 + 240) = destructiveProjectEnumData for PredicateCodableError;
  *(_QWORD *)(v0 + 248) = 0;
  *(_QWORD *)(v0 + 256) = 0xD000000000000010;
  *(_QWORD *)(v0 + 264) = 0x80000001823079E0;
  v4 = String.lowercased()();
  *(_QWORD *)(v0 + 272) = 29286;
  *(_QWORD *)(v0 + 280) = 0xE200000000000000;
  *(Swift::String *)(v0 + 288) = v4;
  *(_QWORD *)(v0 + 304) = closure #7 in variable initialization expression of prefixHeuristics;
  *(_QWORD *)(v0 + 312) = 0;
  *(_QWORD *)(v0 + 320) = destructiveProjectEnumData for PredicateCodableError;
  *(_QWORD *)(v0 + 328) = 0;
  *(_OWORD *)(v0 + 336) = xmmword_1820D9630;
  v5 = String.lowercased()();
  *(_QWORD *)(v0 + 352) = 29286;
  *(_QWORD *)(v0 + 360) = 0xE200000000000000;
  *(Swift::String *)(v0 + 368) = v5;
  *(_QWORD *)(v0 + 384) = closure #9 in variable initialization expression of prefixHeuristics;
  *(_QWORD *)(v0 + 392) = 0;
  *(_QWORD *)(v0 + 400) = destructiveProjectEnumData for PredicateCodableError;
  *(_QWORD *)(v0 + 408) = 0;
  *(_QWORD *)(v0 + 416) = 0xD000000000000011;
  *(_QWORD *)(v0 + 424) = 0x8000000182307A00;
  v6 = String.lowercased()();
  *(_QWORD *)(v0 + 432) = 29286;
  *(_QWORD *)(v0 + 440) = 0xE200000000000000;
  *(Swift::String *)(v0 + 448) = v6;
  *(_QWORD *)(v0 + 464) = closure #11 in variable initialization expression of prefixHeuristics;
  *(_QWORD *)(v0 + 472) = 0;
  *(_QWORD *)(v0 + 480) = destructiveProjectEnumData for PredicateCodableError;
  *(_QWORD *)(v0 + 488) = 0;
  *(_OWORD *)(v0 + 496) = xmmword_1820D9640;
  v7 = String.lowercased()();
  *(_QWORD *)(v0 + 512) = 29286;
  *(_QWORD *)(v0 + 520) = 0xE200000000000000;
  *(Swift::String *)(v0 + 528) = v7;
  *(_QWORD *)(v0 + 544) = closure #13 in variable initialization expression of prefixHeuristics;
  *(_QWORD *)(v0 + 552) = 0;
  *(_QWORD *)(v0 + 560) = destructiveProjectEnumData for PredicateCodableError;
  *(_QWORD *)(v0 + 568) = 0;
  result = 9.54924866e-307;
  *(_OWORD *)(v0 + 576) = xmmword_1820D9650;
  prefixHeuristics._rawValue = (void *)v0;
  return result;
}

uint64_t closure #1 in variable initialization expression of prefixHeuristics(uint64_t a1, uint64_t a2)
{
  BOOL v2;

  v2 = a1 == 8289 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0 || a1 == 2125409 && a2 == 0xE300000000000000)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

id closure #2 in variable initialization expression of prefixHeuristics(void *a1)
{
  return objc_msgSend(a1, sel_setDefiniteness_, 1);
}

uint64_t closure #3 in variable initialization expression of prefixHeuristics(uint64_t a1, uint64_t a2)
{
  if (a1 == 543516788 && a2 == 0xE400000000000000)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

id closure #4 in variable initialization expression of prefixHeuristics(void *a1)
{
  return objc_msgSend(a1, sel_setDefiniteness_, 2);
}

uint64_t closure #5 in variable initialization expression of prefixHeuristics(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v5;
  BOOL v6;
  BOOL v7;

  v2 = a1 == 2123107 && a2 == 0xE300000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0 || a1 == 544499043 && a2 == 0xE400000000000000)
    return 1;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0 || a1 == 0x206574746563 && a2 == 0xE600000000000000)
    return 1;
  v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v6 = a1 == 544433507 && a2 == 0xE400000000000000;
  v7 = v6;
  if ((v5 & 1) != 0 || v7)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t closure #7 in variable initialization expression of prefixHeuristics(uint64_t a1, uint64_t a2)
{
  BOOL v2;

  v2 = a1 == 2123108 && a2 == 0xE300000000000000;
  if (v2
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 10084 && a2 == 0xE200000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 2575360612 && a2 == 0xA400000000000000)
  {
    return 1;
  }
  else
  {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t closure #9 in variable initialization expression of prefixHeuristics(uint64_t a1, uint64_t a2)
{
  BOOL v2;

  v2 = a1 == 0x276C206564 && a2 == 0xE500000000000000;
  if (v2
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x9980E26C206564 && a2 == 0xA700000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x20616C206564 && a2 == 0xE600000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 2127204 && a2 == 0xE300000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 544433508 && a2 == 0xE400000000000000)
  {
    return 1;
  }
  else
  {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t closure #11 in variable initialization expression of prefixHeuristics(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v5;
  BOOL v6;
  BOOL v7;

  v2 = a1 == 10092 && a2 == 0xE200000000000000;
  if (v2
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 2575360620 && a2 == 0xA400000000000000)
  {
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0 || a1 == 2123116 && a2 == 0xE300000000000000)
    return 1;
  v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v6 = a1 == 2122092 && a2 == 0xE300000000000000;
  v7 = v6;
  if ((v5 & 1) != 0
    || v7
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 544433516 && a2 == 0xE400000000000000)
  {
    return 1;
  }
  else
  {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t closure #13 in variable initialization expression of prefixHeuristics(uint64_t a1, uint64_t a2)
{
  BOOL v2;

  v2 = a1 == 2585969 && a2 == 0xE300000000000000;
  if (v2
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x9980E27571 && a2 == 0xA500000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 543520113 && a2 == 0xE400000000000000)
  {
    return 1;
  }
  else
  {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t one-time initialization function for suffixHeuristics()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t result;
  Swift::String v8;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SuffixInflectionHeuristic>);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_182065B90;
  v1 = String.lowercased()();
  *(_QWORD *)(v0 + 32) = 28261;
  *(_QWORD *)(v0 + 40) = 0xE200000000000000;
  *(Swift::String *)(v0 + 48) = v1;
  *(_QWORD *)(v0 + 64) = closure #1 in variable initialization expression of suffixHeuristics;
  *(_QWORD *)(v0 + 72) = 0;
  *(_QWORD *)(v0 + 80) = closure #2 in variable initialization expression of suffixHeuristics;
  *(_QWORD *)(v0 + 88) = 0;
  *(_QWORD *)(v0 + 96) = 0;
  *(_QWORD *)(v0 + 104) = 0;
  v2 = String.lowercased()();
  *(_QWORD *)(v0 + 112) = 28523;
  *(_QWORD *)(v0 + 120) = 0xE200000000000000;
  *(Swift::String *)(v0 + 128) = v2;
  *(_QWORD *)(v0 + 144) = closure #3 in variable initialization expression of suffixHeuristics;
  *(_QWORD *)(v0 + 152) = 0;
  *(_QWORD *)(v0 + 160) = closure #4 in variable initialization expression of suffixHeuristics;
  *(_QWORD *)(v0 + 168) = 0;
  *(_QWORD *)(v0 + 176) = 0;
  *(_QWORD *)(v0 + 184) = 0;
  v3 = String.lowercased()();
  *(_QWORD *)(v0 + 192) = 28523;
  *(_QWORD *)(v0 + 200) = 0xE200000000000000;
  *(Swift::String *)(v0 + 208) = v3;
  *(_QWORD *)(v0 + 224) = closure #5 in variable initialization expression of suffixHeuristics;
  *(_QWORD *)(v0 + 232) = 0;
  *(_QWORD *)(v0 + 240) = closure #6 in variable initialization expression of suffixHeuristics;
  *(_QWORD *)(v0 + 248) = 0;
  *(_QWORD *)(v0 + 256) = 0;
  *(_QWORD *)(v0 + 264) = 0;
  v4 = String.lowercased()();
  *(_QWORD *)(v0 + 272) = 28523;
  *(_QWORD *)(v0 + 280) = 0xE200000000000000;
  *(Swift::String *)(v0 + 288) = v4;
  *(_QWORD *)(v0 + 304) = closure #7 in variable initialization expression of suffixHeuristics;
  *(_QWORD *)(v0 + 312) = 0;
  *(_QWORD *)(v0 + 320) = closure #8 in variable initialization expression of suffixHeuristics;
  *(_QWORD *)(v0 + 328) = 0;
  *(_QWORD *)(v0 + 336) = 0;
  *(_QWORD *)(v0 + 344) = 0;
  v5 = String.lowercased()();
  *(_QWORD *)(v0 + 352) = 28523;
  *(_QWORD *)(v0 + 360) = 0xE200000000000000;
  *(Swift::String *)(v0 + 368) = v5;
  *(_QWORD *)(v0 + 384) = closure #9 in variable initialization expression of suffixHeuristics;
  *(_QWORD *)(v0 + 392) = 0;
  *(_QWORD *)(v0 + 400) = closure #10 in variable initialization expression of suffixHeuristics;
  *(_QWORD *)(v0 + 408) = 0;
  *(_QWORD *)(v0 + 416) = 0;
  *(_QWORD *)(v0 + 424) = 0;
  v6 = String.lowercased()();
  *(_QWORD *)(v0 + 432) = 28523;
  *(_QWORD *)(v0 + 440) = 0xE200000000000000;
  *(Swift::String *)(v0 + 448) = v6;
  *(_QWORD *)(v0 + 464) = closure #11 in variable initialization expression of suffixHeuristics;
  *(_QWORD *)(v0 + 472) = 0;
  *(_QWORD *)(v0 + 480) = closure #12 in variable initialization expression of suffixHeuristics;
  *(_QWORD *)(v0 + 488) = 0;
  *(_QWORD *)(v0 + 496) = 0;
  *(_QWORD *)(v0 + 504) = 0;
  v8 = String.lowercased()();
  result = v8._countAndFlagsBits;
  *(_QWORD *)(v0 + 512) = 28523;
  *(_QWORD *)(v0 + 520) = 0xE200000000000000;
  *(Swift::String *)(v0 + 528) = v8;
  *(_QWORD *)(v0 + 544) = closure #13 in variable initialization expression of suffixHeuristics;
  *(_QWORD *)(v0 + 552) = 0;
  *(_QWORD *)(v0 + 560) = closure #14 in variable initialization expression of suffixHeuristics;
  *(_QWORD *)(v0 + 568) = 0;
  *(_QWORD *)(v0 + 584) = 0;
  *(_QWORD *)(v0 + 576) = 0;
  suffixHeuristics._rawValue = (void *)v0;
  return result;
}

uint64_t closure #1 in variable initialization expression of suffixHeuristics(uint64_t a1, uint64_t a2)
{
  BOOL v2;

  v2 = a1 == 1939439842 && a2 == 0xA400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0 || a1 == 29479 && a2 == 0xE200000000000000)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

id closure #2 in variable initialization expression of suffixHeuristics(void *a1)
{
  return objc_msgSend(a1, sel_setGrammaticalCase_, 4);
}

uint64_t closure #3 in variable initialization expression of suffixHeuristics(uint64_t a1, uint64_t a2)
{
  char v5;
  BOOL v6;
  BOOL v7;

  if (a1 == 9734891 && a2 == 0xA300000000000000)
    return 1;
  v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v6 = a1 == 8429036 && a2 == 0xA300000000000000;
  v7 = v6;
  if ((v5 & 1) != 0 || v7)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

id closure #4 in variable initialization expression of suffixHeuristics(void *a1)
{
  return objc_msgSend(a1, sel_setGrammaticalCase_, 1);
}

uint64_t closure #5 in variable initialization expression of suffixHeuristics(uint64_t a1, uint64_t a2)
{
  char v5;
  BOOL v6;
  BOOL v7;

  if (a1 == 8433898 && a2 == 0xA300000000000000)
    return 1;
  v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v6 = a1 == 11836908 && a2 == 0xA300000000000000;
  v7 = v6;
  if ((v5 & 1) != 0 || v7)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

id closure #6 in variable initialization expression of suffixHeuristics(void *a1)
{
  objc_msgSend(a1, sel_setGrammaticalCase_, 1);
  return objc_msgSend(a1, sel_set_clusivity_, 1);
}

uint64_t closure #7 in variable initialization expression of suffixHeuristics(uint64_t a1, uint64_t a2)
{
  char v5;
  BOOL v6;
  BOOL v7;

  if (a1 == 12363243 && a2 == 0xA300000000000000)
    return 1;
  v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v6 = a1 == 8691180 && a2 == 0xA300000000000000;
  v7 = v6;
  if ((v5 & 1) != 0 || v7)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

id closure #8 in variable initialization expression of suffixHeuristics(void *a1)
{
  return objc_msgSend(a1, sel_setGrammaticalCase_, 2);
}

uint64_t closure #9 in variable initialization expression of suffixHeuristics(uint64_t a1, uint64_t a2)
{
  char v5;
  BOOL v6;
  BOOL v7;

  if (a1 == 12366826 && a2 == 0xA300000000000000)
    return 1;
  v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v6 = a1 == 8428012 && a2 == 0xA300000000000000;
  v7 = v6;
  if ((v5 & 1) != 0 || v7)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

id closure #10 in variable initialization expression of suffixHeuristics(void *a1)
{
  return objc_msgSend(a1, sel_setGrammaticalCase_, 16);
}

uint64_t closure #11 in variable initialization expression of suffixHeuristics(uint64_t a1, uint64_t a2)
{
  BOOL v2;

  v2 = a1 == 10265067 && a2 == 0xA300000000000000;
  if (v2
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x9CA1EBBC9CECLL && a2 == 0xA600000000000000)
  {
    return 1;
  }
  else
  {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

id closure #12 in variable initialization expression of suffixHeuristics(void *a1)
{
  return objc_msgSend(a1, sel_setGrammaticalCase_, 15);
}

uint64_t closure #13 in variable initialization expression of suffixHeuristics(uint64_t a1, uint64_t a2)
{
  BOOL v2;

  v2 = a1 == 12361195 && a2 == 0xA300000000000000;
  if (v2
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0xBC9DEBB49DECLL && a2 == 0xA600000000000000)
  {
    return 1;
  }
  else
  {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

id closure #14 in variable initialization expression of suffixHeuristics(void *a1)
{
  return objc_msgSend(a1, sel_set_adjectival_, 1);
}

void (*specialized static NSMorphology._heuristicMorphology(language:prefix:suffix:featureNamePointer:matchedPrefixPointer:matchedSuffixPointer:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void **a7, _BYTE *a8, char *a9))(_QWORD)
{
  int Language;
  void (*v10)(_QWORD);
  uint64_t v11;
  uint64_t v12;
  int Script;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int Country;
  uint64_t v18;
  void (*v19)(_QWORD);
  Swift::String v20;
  uint64_t countAndFlagsBits;
  void *object;
  void (*v23)(_QWORD);
  Swift::String v24;
  uint64_t v25;
  char *v26;
  void (*v27)(_QWORD);
  uint64_t v28;
  void *v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Swift::String v35;
  id v36;
  uint64_t v37;
  void (*v38)(_QWORD);
  void (*v39)(_QWORD);
  void *v40;
  void **v41;
  uint64_t v42;
  void *v43;
  uint64_t (*v44)(uint64_t, void *);
  void (*v45)(_QWORD);
  void *v46;
  BOOL v47;
  int v48;
  char *v49;
  uint64_t v50;
  void **v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t, uint64_t);
  void *v54;
  void (*v55)(_QWORD);
  void *v56;
  BOOL v57;
  char v58;
  _BYTE *v59;
  void *v60;
  id v61;
  uint64_t v62;
  id v63;
  void *v64;
  unsigned int v65;
  _BYTE v67[272];
  void **v68;
  _BYTE *v69;
  uint64_t v70;
  void (*v71)(_QWORD);
  char *v72;
  uint64_t v73;
  void (*v74)(_QWORD);
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(_QWORD);
  void (*v80)(_QWORD);
  void *v81;
  uint64_t v82;
  _BYTE v83[258];
  void (*v84)(_QWORD);
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  void (*v93)(_QWORD);
  uint64_t v94;
  void *v95;
  uint64_t v96;

  v68 = a7;
  v69 = a8;
  v77 = a5;
  v78 = a6;
  v75 = a3;
  v76 = a4;
  v96 = *MEMORY[0x1E0C80C00];
  swift_bridgeObjectRetain();
  LODWORD(v84) = 0;
  String.utf8CString.getter();
  Language = uloc_getLanguage();
  v10 = (void (*)(_QWORD))swift_release();
  if (Language <= 0)
  {
    v80 = 0;
    v12 = 0;
  }
  else
  {
    v83[Language] = 0;
    v10 = (void (*)(_QWORD))MEMORY[0x186DA4658](v83);
    v80 = v10;
    v12 = v11;
  }
  MEMORY[0x1E0C80A78](v10);
  LODWORD(v84) = 0;
  String.utf8CString.getter();
  Script = uloc_getScript();
  swift_release();
  v14 = 0;
  v15 = 0;
  if ((int)v84 <= 0 && Script > 0)
  {
    v67[Script] = 0;
    v14 = MEMORY[0x186DA4658](v67);
    v15 = v16;
  }
  v74 = (void (*)(_QWORD))v14;
  MEMORY[0x1E0C80A78](v14);
  LODWORD(v84) = 0;
  String.utf8CString.getter();
  Country = uloc_getCountry();
  swift_release();
  v18 = 0;
  v19 = 0;
  if ((int)v84 <= 0 && Country > 0)
  {
    v67[Country] = 0;
    v18 = MEMORY[0x186DA4658](v67, 0);
  }
  v79 = v19;
  swift_bridgeObjectRelease();
  if (v12)
  {
    v20 = String.lowercased()();
    countAndFlagsBits = v20._countAndFlagsBits;
    object = v20._object;
    v23 = v74;
    if (v15)
    {
LABEL_12:
      v84 = v23;
      v85 = v15;
      swift_bridgeObjectRetain_n();
      String.init<A>(_:)();
      v24 = String._capitalized()();
      v25 = v24._countAndFlagsBits;
      v26 = (char *)v24._object;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
  }
  else
  {
    v80 = 0;
    countAndFlagsBits = 0;
    object = 0;
    v23 = v74;
    if (v15)
      goto LABEL_12;
  }
  v74 = 0;
  v25 = 0;
  v26 = 0;
LABEL_15:
  v72 = v26;
  v73 = v25;
  v27 = v79;
  if (v79)
  {
    v30 = String.uppercased()();
    v29 = v30._object;
    v28 = v30._countAndFlagsBits;
    v27 = v79;
  }
  else
  {
    v18 = 0;
    v28 = 0;
    v29 = 0;
  }
  v84 = v80;
  v85 = v12;
  v86 = countAndFlagsBits;
  v87 = object;
  v71 = (void (*)(_QWORD))countAndFlagsBits;
  v31 = (uint64_t)v74;
  v88 = (uint64_t)v74;
  v89 = v15;
  v90 = v73;
  v91 = v72;
  v92 = v18;
  v93 = v27;
  v94 = v28;
  v95 = v29;
  if (v12)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v70 = v12;
    v81 = object;
    v82 = (uint64_t)v71;
    v32 = v12;
LABEL_22:
    outlined consume of Locale.LanguageCode?((uint64_t)v80, v32);
    outlined consume of Locale.LanguageCode?((uint64_t)v74, v15);
    outlined consume of Locale.LanguageCode?(v18, (uint64_t)v79);
    v36 = objc_msgSend(objc_allocWithZone((Class)NSMorphology), sel_init);
    v37 = one-time initialization token for prefixHeuristics;
    v38 = (void (*)(_QWORD))v36;
    if (v37 != -1)
      swift_once();
    v39 = (void (*)(_QWORD))*((_QWORD *)prefixHeuristics._rawValue + 2);
    v40 = v81;
    v74 = v38;
    if (!v39)
    {
      v48 = 0;
      v46 = 0;
      goto LABEL_41;
    }
    v73 = swift_bridgeObjectRetain();
    v41 = (void **)(v73 + 56);
    while (1)
    {
      v42 = (uint64_t)*(v41 - 1);
      v43 = *v41;
      v44 = (uint64_t (*)(uint64_t, void *))v41[1];
      v45 = (void (*)(_QWORD))v41[5];
      v79 = (void (*)(_QWORD))v41[3];
      v80 = v45;
      v46 = v41[6];
      v47 = v42 == v82 && v43 == v40;
      if (v47 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        if ((v44(v75, v76) & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v38 = v74;
          v79(v74);
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v40 = v81;
          if (v46)
            v39 = v80;
          else
            v39 = 0;
          v48 = 1;
LABEL_41:
          v49 = a9;
          if (one-time initialization token for suffixHeuristics != -1)
            swift_once();
          v76 = v46;
          v50 = *((_QWORD *)suffixHeuristics._rawValue + 2);
          if (v50)
          {
            v71 = v39;
            v72 = a9;
            LODWORD(v73) = v48;
            v75 = swift_bridgeObjectRetain();
            v51 = (void **)(v75 + 56);
            while (1)
            {
              v52 = (uint64_t)*(v51 - 1);
              v54 = *v51;
              v53 = (uint64_t (*)(uint64_t, uint64_t))v51[1];
              v55 = (void (*)(_QWORD))v51[3];
              v79 = (void (*)(_QWORD))v51[5];
              v80 = v55;
              v56 = v51[6];
              v57 = v52 == v82 && v54 == v40;
              if (v57 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_retain();
                swift_retain();
                if ((v53(v77, v78) & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v38 = v74;
                  v80(v74);
                  swift_release();
                  swift_release();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v58 = 1;
                  if (v56)
                  {
                    swift_bridgeObjectRelease();
                    *v69 = v73;
                    *v72 = 1;
LABEL_61:
                    swift_bridgeObjectRetain();
                    v61 = objc_allocWithZone((Class)NSString);
                    v62 = String._bridgeToObjectiveCImpl()();
                    swift_bridgeObjectRelease();
                    v63 = objc_msgSend(v61, sel_initWithString_, v62);
                    swift_unknownObjectRelease();
                    v64 = *v68;
                    *v68 = v63;

LABEL_62:
                    v65 = -[NSMorphology isIdentity](v38);

                    swift_bridgeObjectRelease();
                    if (v65)
                    {

                      return 0;
                    }
                    return v38;
                  }
                  v59 = v69;
                  v60 = v76;
                  v49 = v72;
                  LOBYTE(v48) = v73;
LABEL_57:
                  *v59 = v48;
                  *v49 = v58;
                  if (v60)
                    goto LABEL_61;
                  goto LABEL_62;
                }
                swift_bridgeObjectRelease();
                swift_release();
                swift_release();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v40 = v81;
              }
              v51 += 10;
              if (!--v50)
              {
                swift_bridgeObjectRelease();
                v38 = v74;
                LOBYTE(v48) = v73;
                v49 = v72;
                break;
              }
            }
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v58 = 0;
          v59 = v69;
          v60 = v76;
          goto LABEL_57;
        }
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v40 = v81;
      }
      v41 += 10;
      v39 = (void (*)(_QWORD))((char *)v39 - 1);
      if (!v39)
      {
        swift_bridgeObjectRelease();
        v48 = 0;
        v46 = 0;
        v38 = v74;
        goto LABEL_41;
      }
    }
  }
  v33 = (uint64_t)v27;
  outlined copy of Locale.LanguageCode?((uint64_t)v80, 0);
  outlined copy of Locale.LanguageCode?(v31, v15);
  outlined copy of Locale.LanguageCode?(v18, v33);
  v82 = specialized _withFixedCharBuffer(size:_:)(257, (uint64_t *)&v84);
  v70 = v34;
  outlined consume of Locale.LanguageCode?((uint64_t)v80, 0);
  outlined consume of Locale.LanguageCode?(v31, v15);
  outlined consume of Locale.LanguageCode?(v18, v33);
  if (v70)
  {
    v35 = String.lowercased()();
    v81 = v35._object;
    v82 = v35._countAndFlagsBits;
    v32 = 0;
    goto LABEL_22;
  }
  outlined consume of Locale.LanguageCode?((uint64_t)v80, 0);
  outlined consume of Locale.LanguageCode?(v31, v15);
  outlined consume of Locale.LanguageCode?(v18, (uint64_t)v79);
  return 0;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PrefixInflectionHeuristic()
{
  return &type metadata for PrefixInflectionHeuristic;
}

uint64_t destroy for PrefixInflectionHeuristic()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PrefixInflectionHeuristic(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v4;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for PrefixInflectionHeuristic(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a2[5];
  a1[4] = a2[4];
  a1[5] = v4;
  swift_retain();
  swift_release();
  v5 = a2[7];
  a1[6] = a2[6];
  a1[7] = v5;
  swift_retain();
  swift_release();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PrefixInflectionHeuristic(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  v5 = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = v5;
  swift_release();
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PrefixInflectionHeuristic(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PrefixInflectionHeuristic(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SuffixInflectionHeuristic()
{
  return &type metadata for SuffixInflectionHeuristic;
}

uint64_t specialized closure #2 in static Set._forceBridgeFromObjectiveC(_:result:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  _QWORD *v5;
  _BYTE v6[40];
  _BYTE v7[40];
  _BYTE v8[32];

  outlined init with copy of Any(a1, (uint64_t)v8);
  result = swift_dynamicCast();
  v5 = (_QWORD *)*a3;
  if (*(_QWORD *)(*a3 + 16) >= a3[1])
  {
    __break(1u);
  }
  else
  {
    outlined init with copy of AnyHashable((uint64_t)v7, (uint64_t)v6);
    specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)v6, v5);
    return outlined destroy of AnyHashable((uint64_t)v7);
  }
  return result;
}

uint64_t sub_181B0F05C()
{
  return swift_deallocObject();
}

uint64_t sub_181B0F06C()
{
  return swift_deallocObject();
}

uint64_t sub_181B0F07C()
{
  return swift_deallocObject();
}

uint64_t sub_181B0F08C()
{
  return swift_deallocObject();
}

unint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance Set<A>(void *a1, unint64_t *a2, uint64_t a3)
{
  return static Set._forceBridgeFromObjectiveC(_:result:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

unint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Set<A>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t result;

  result = static Set._unconditionallyBridgeFromObjectiveC(_:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  *a3 = result;
  return result;
}

uint64_t NSSet._toCustomAnyHashable()()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  id v11;
  id v12;
  _QWORD v13[6];
  uint64_t v14;
  id v15;

  v1 = v0;
  swift_unknownObjectRetain();
  v2 = static Set._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v2)
  {
    v3 = v2;
LABEL_9:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v13[0] = v3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<AnyHashable>);
    lazy protocol witness table accessor for type Set<AnyHashable> and conformance Set<A>();
    return AnyHashable.init<A>(_:)();
  }
  v4 = objc_msgSend(v0, sel_count);
  if (v4)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AnyHashable>);
    v5 = static _SetStorage.allocate(capacity:)();
  }
  else
  {
    v5 = MEMORY[0x1E0DEE9E8];
  }
  v14 = v5;
  v15 = v4;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = &v14;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = partial apply for specialized closure #2 in static Set._forceBridgeFromObjectiveC(_:result:);
  *(_QWORD *)(v7 + 24) = v6;
  v13[4] = closure #1 in NSRunLoop.schedule(options:_:)partial apply;
  v13[5] = v7;
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 1107296256;
  v13[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed Any, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  v13[3] = &block_descriptor_23;
  v8 = _Block_copy(v13);
  swift_retain();
  swift_release();
  objc_msgSend(v1, sel_enumerateObjectsUsingBlock_, v8);
  _Block_release(v8);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v3 = v14;
    v11 = v15;
    v12 = *(id *)(v14 + 16);
    result = swift_release();
    if (v12 == v11)
    {
      swift_bridgeObjectRetain();
      goto LABEL_9;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_181B0F2C0()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #2 in static Set._forceBridgeFromObjectiveC(_:result:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return specialized closure #2 in static Set._forceBridgeFromObjectiveC(_:result:)(a1, a2, *(_QWORD **)(v2 + 16));
}

uint64_t sub_181B0F2D8()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type Set<AnyHashable> and conformance Set<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Set<AnyHashable> and conformance Set<A>;
  if (!lazy protocol witness table cache variable for type Set<AnyHashable> and conformance Set<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<AnyHashable>);
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEB3C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Set<AnyHashable> and conformance Set<A>);
  }
  return result;
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSSet()
{
  id *v0;
  id v1;

  v1 = *v0;
  NSSet._toCustomAnyHashable()();

}

id NSSet.init(set:)(void *a1)
{
  id result;
  id v3;
  const void **v4;
  id v5;

  result = objc_msgSend(a1, sel_count);
  if (((unint64_t)result - 0x1000000000000000) >> 61 == 7)
  {
    v3 = result;
    v4 = (const void **)swift_slowAlloc();
    CFSetGetValues((CFSetRef)a1, v4);
    v5 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithObjects_count_, v4, v3);
    MEMORY[0x186DA9E78](v4, -1, -1);
    return v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t NSSet.customMirror.getter()
{
  void *v0;

  type metadata accessor for NSObject();
  lazy protocol witness table accessor for type NSObject and conformance NSObject();
  swift_unknownObjectRetain();
  if (!static Set._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)())
    objc_msgSend(v0, sel_copyWithZone_, 0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<NSObject>);
  return Mirror.init(reflecting:)();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance NSSet()
{
  return NSSet.customMirror.getter();
}

uint64_t protocol witness for CVarArg._cVarArgEncoding.getter in conformance Set<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = MEMORY[0x186DA9D64](&protocol conformance descriptor for Set<A>, a1);
  return CVarArg<>._cVarArgEncoding.getter(a1, a2, v4);
}

uint64_t protocol witness for ContiguousBytes.withUnsafeBytes<A>(_:) in conformance <A> [A](uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  uint64_t *v2;

  return _sSa15withUnsafeBytesyqd__qd__SWKXEKlFSWxs5Error_pRi_zRi0_zlyqd__Isgyrzo_Says5UInt8VGqd__sAB_pADRszr__lIetMggrzo_Tpq5(a1, a2, *v2);
}

uint64_t _sSa15withUnsafeBytesyqd__qd__SWKXEKlFSWxs5Error_pRi_zRi0_zlyqd__Isgyrzo_Says5UInt8VGqd__sAB_pADRszr__lIetMggrzo_Tpq5(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3 + 32, a3 + 32 + *(_QWORD *)(a3 + 16));
}

uint64_t (*protocol witness for ContiguousBytes.withUnsafeBytes<A>(_:) in conformance <A> ArraySlice<A>(uint64_t (*a1)(uint64_t, unint64_t), uint64_t a2))(uint64_t, unint64_t)
{
  uint64_t v2;

  return _ss10ArraySliceV15withUnsafeBytesyqd__qd__SWKXEKlFSWxs5Error_pRi_zRi0_zlyqd__Isgyrzo_ABys5UInt8VGqd__sAD_pAFRszr__lIetMggrzo_Tpq5(a1, a2, *(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t (*_ss10ArraySliceV15withUnsafeBytesyqd__qd__SWKXEKlFSWxs5Error_pRi_zRi0_zlyqd__Isgyrzo_ABys5UInt8VGqd__sAD_pAFRszr__lIetMggrzo_Tpq5(uint64_t (*result)(uint64_t, unint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6))(uint64_t, unint64_t)
{
  if (!__OFSUB__(a6 >> 1, a5))
    return (uint64_t (*)(uint64_t, unint64_t))result(a4 + a5, a4 + (a6 >> 1));
  __break(1u);
  return result;
}

uint64_t UnsafeRawBufferPointer.withUnsafeBytes<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1(a3, a4);
}

uint64_t protocol witness for ContiguousBytes.withUnsafeBytes<A>(_:) in conformance UnsafeRawBufferPointer(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  uint64_t *v2;

  return UnsafeRawBufferPointer.withUnsafeBytes<A>(_:)(a1, a2, *v2, v2[1]);
}

uint64_t UnsafeMutableRawBufferPointer.withUnsafeBytes<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  if (a3)
    v4 = a4;
  else
    v4 = 0;
  return a1(a3, v4);
}

uint64_t protocol witness for ContiguousBytes.withUnsafeBytes<A>(_:) in conformance UnsafeMutableRawBufferPointer(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  uint64_t *v2;

  return UnsafeMutableRawBufferPointer.withUnsafeBytes<A>(_:)(a1, a2, *v2, v2[1]);
}

uint64_t UnsafeBufferPointer<A>.withUnsafeBytes<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeBufferPointer<A>.withUnsafeBytes<A>(_:)(a1, a2, a3, a4);
}

{
  uint64_t v4;

  if (a3)
    v4 = a3 + a4;
  else
    v4 = 0;
  return a1(a3, v4);
}

uint64_t protocol witness for ContiguousBytes.withUnsafeBytes<A>(_:) in conformance <A> UnsafeBufferPointer<A>(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  uint64_t *v2;

  return UnsafeBufferPointer<A>.withUnsafeBytes<A>(_:)(a1, a2, *v2, v2[1]);
}

uint64_t UnsafeMutableBufferPointer<A>.withUnsafeBytes<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeBufferPointer<A>.withUnsafeBytes<A>(_:)(a1, a2, a3, a4);
}

uint64_t EmptyCollection<A>.withUnsafeBytes<A>(_:)(uint64_t (*a1)(_QWORD, _QWORD))
{
  return a1(0, 0);
}

uint64_t protocol witness for ContiguousBytes.withUnsafeBytes<A>(_:) in conformance <A> EmptyCollection<A>(uint64_t (*a1)(_QWORD, _QWORD))
{
  return EmptyCollection<A>.withUnsafeBytes<A>(_:)(a1);
}

uint64_t CollectionOfOne<A>.withUnsafeBytes<A>(_:)(uint64_t (*a1)(char *, uint64_t *), uint64_t a2, char a3)
{
  char v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  return a1(&v4, &v5);
}

uint64_t protocol witness for ContiguousBytes.withUnsafeBytes<A>(_:) in conformance <A> CollectionOfOne<A>(uint64_t (*a1)(char *, uint64_t *), uint64_t a2)
{
  char *v2;

  return CollectionOfOne<A>.withUnsafeBytes<A>(_:)(a1, a2, *v2);
}

uint64_t Slice<>.withUnsafeBytes<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[16];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v7 = v6;
  v23 = a4;
  v24 = a5;
  v25 = a1;
  v26 = a2;
  v27 = a6;
  v9 = *(_QWORD *)(a3 + 16);
  v22 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v12 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v17 = (char *)&v22 - v16;
  v18 = v7 + *(int *)(a3 + 40);
  dispatch thunk of Collection.startIndex.getter();
  v19 = dispatch thunk of Collection.distance(from:to:)();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, AssociatedTypeWitness);
  v20 = v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v11, v18, v9);
  v29 = v9;
  v30 = v23;
  v31 = v24;
  v32 = v13;
  v33 = v19;
  v34 = v7;
  v35 = v25;
  v36 = v26;
  (*(void (**)(uint64_t (*)(uint64_t), _BYTE *))(v24 + 8))(partial apply for closure #1 in Slice<>.withUnsafeBytes<A>(_:), v28);
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v11, v9);
}

uint64_t partial apply for closure #1 in Slice<>.withUnsafeBytes<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 64);
  if (a1)
    v3 = a1 + *(_QWORD *)(v1 + 48);
  else
    v3 = 0;
  type metadata accessor for Slice();
  v4 = dispatch thunk of Collection.distance(from:to:)();
  if (v3)
    v5 = v3 + v4;
  else
    v5 = 0;
  return v2(v3, v5);
}

uint64_t protocol witness for ContiguousBytes.withUnsafeBytes<A>(_:) in conformance <> Slice<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Slice<>.withUnsafeBytes<A>(_:)(a1, a2, a4, a3, *(_QWORD *)(a5 - 8), a6);
}

uint64_t protocol witness for ContiguousBytes.withUnsafeBytes<A>(_:) in conformance <A> ContiguousArray<A>(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  return protocol witness for ContiguousBytes.withUnsafeBytes<A>(_:) in conformance <A> [A](a1, a2);
}

uint64_t protocol witness for ContiguousBytes.withUnsafeBytes<A>(_:) in conformance <A> UnsafeMutableBufferPointer<A>(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  return protocol witness for ContiguousBytes.withUnsafeBytes<A>(_:) in conformance <A> UnsafeBufferPointer<A>(a1, a2);
}

uint64_t PredicateBindings.subscript.setter(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t result;
  char *v25;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  __int128 v33;
  __int128 v34;
  uint64_t *v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v37 - v9;
  v41 = *(_QWORD *)(a3 - 8);
  v12 = MEMORY[0x1E0C80A78](v11);
  v40 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *a2;
  v15 = *v3;
  v16 = *(_QWORD *)(*v3 + 16);
  if (v16)
  {
    v37 = v3;
    v38 = v8;
    v39 = v7;
    v17 = a1;
    v18 = v15 + 32;
    swift_bridgeObjectRetain();
    v19 = 0;
    while (1)
    {
      outlined init with copy of (id: PredicateExpressions.VariableID, value: Any)(v18, (uint64_t)&v44);
      v20 = v44;
      outlined destroy of Any?((uint64_t)&v44, &demangling cache variable for type metadata for (id: PredicateExpressions.VariableID, value: Any));
      if (v20 == v14)
        break;
      ++v19;
      v18 += 40;
      if (v16 == v19)
      {
        swift_bridgeObjectRelease();
        v19 = 0;
        v21 = 1;
        goto LABEL_8;
      }
    }
    swift_bridgeObjectRelease();
    v21 = 0;
LABEL_8:
    a1 = v17;
    v8 = v38;
    v7 = v39;
    v3 = v37;
  }
  else
  {
    v19 = 0;
    v21 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16))(v10, a1, v7, v12);
  v22 = v41;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v10, 1, a3) == 1)
  {
    v23 = *(void (**)(char *, uint64_t))(v8 + 8);
    v23(v10, v7);
    if (v21)
    {
      return ((uint64_t (*)(uint64_t, uint64_t))v23)(a1, v7);
    }
    else
    {
      specialized Array.remove(at:)(v19, (uint64_t)&v44);
      v23((char *)a1, v7);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v44 + 8);
    }
  }
  else
  {
    v39 = a1;
    v25 = v40;
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v40, v10, a3);
    if ((v21 & 1) != 0)
    {
      v43 = a3;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v42);
      (*(void (**)(uint64_t *, char *, uint64_t))(v22 + 16))(boxed_opaque_existential_1, v25, a3);
      *(_QWORD *)&v44 = v14;
      outlined init with take of Any(&v42, (__int128 *)((char *)&v44 + 8));
      v27 = (_QWORD *)*v3;
      v28 = v25;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27[2] + 1, 1, v27);
      v29 = v39;
      v31 = v27[2];
      v30 = v27[3];
      if (v31 >= v30 >> 1)
        v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v30 > 1), v31 + 1, 1, v27);
      v27[2] = v31 + 1;
      v32 = &v27[5 * v31];
      v33 = v44;
      v34 = v45;
      v32[8] = v46;
      *((_OWORD *)v32 + 2) = v33;
      *((_OWORD *)v32 + 3) = v34;
      *v3 = (uint64_t)v27;
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v29, v7);
      return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v28, a3);
    }
    else
    {
      *((_QWORD *)&v45 + 1) = a3;
      v35 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v44);
      (*(void (**)(uint64_t *, char *, uint64_t))(v22 + 16))(v35, v25, a3);
      v36 = (_QWORD *)*v3;
      result = swift_isUniquelyReferenced_nonNull_native();
      *v3 = (uint64_t)v36;
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v36);
        v36 = (_QWORD *)result;
        *v3 = result;
      }
      if (v19 >= v36[2])
      {
        __break(1u);
      }
      else
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36[5 * v19 + 5]);
        outlined init with take of Any(&v44, &v36[5 * v19 + 5]);
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v39, v7);
        return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v25, a3);
      }
    }
  }
  return result;
}

uint64_t key path setter for PredicateBindings.subscript<A>(_:) : <A>PredicateBindingsA(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v6 = *(uint64_t *)((char *)a3 + a4 - 8);
  v7 = type metadata accessor for Optional();
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v14 - v9;
  v11 = *a3;
  (*(void (**)(char *, uint64_t, __n128))(v12 + 16))((char *)&v14 - v9, a1, v8);
  v15 = v11;
  return PredicateBindings.subscript.setter((uint64_t)v10, &v15, v6);
}

void (*PredicateBindings.subscript.modify(_QWORD *a1, uint64_t *a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t *v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15[2];

  v7 = malloc(0x38uLL);
  *a1 = v7;
  *v7 = a3;
  v7[1] = v3;
  v8 = type metadata accessor for Optional();
  v7[2] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[3] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v7[4] = malloc(v10);
  v11 = malloc(v10);
  v12 = *a2;
  v7[5] = v11;
  v7[6] = v12;
  v13 = *v3;
  v15[0] = v12;
  v15[1] = v13;
  PredicateBindings.subscript.getter(v15, a3, (uint64_t)v11);
  return PredicateBindings.subscript.modify;
}

void PredicateBindings.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *a1;
  v3 = (void *)(*a1)[5];
  v4 = (*a1)[6];
  v5 = (void *)(*a1)[4];
  if ((a2 & 1) != 0)
  {
    v6 = v2[2];
    v7 = v2[3];
    v8 = *v2;
    (*(void (**)(uint64_t, void *, uint64_t))(v7 + 16))((*a1)[4], v3, v6);
    v10 = v4;
    PredicateBindings.subscript.setter((uint64_t)v5, &v10, v8);
    (*(void (**)(void *, uint64_t))(v7 + 8))(v3, v6);
  }
  else
  {
    v9 = *v2;
    v10 = (*a1)[6];
    PredicateBindings.subscript.setter((uint64_t)v3, &v10, v9);
  }
  free(v3);
  free(v5);
  free(v2);
}

uint64_t PredicateBindings.binding<A>(_:to:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v4;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v9 = type metadata accessor for Optional();
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v16 - v11;
  v13 = *a1;
  *a4 = *v4;
  v14 = *(_QWORD *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v14 + 16))((char *)&v16 - v11, a2, a3, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v12, 0, 1, a3);
  v17 = v13;
  swift_bridgeObjectRetain();
  return PredicateBindings.subscript.setter((uint64_t)v12, &v17, a3);
}

uint64_t sub_181B10054@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[2];

  v4 = *(uint64_t *)((char *)a2 + a3 - 8);
  v5 = *a1;
  v7[0] = *a2;
  v7[1] = v5;
  return PredicateBindings.subscript.getter(v7, v4, a4);
}

uint64_t sub_181B1009C()
{
  return 8;
}

_QWORD *sub_181B100A8(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

ValueMetadata *type metadata accessor for PredicateBindings()
{
  return &type metadata for PredicateBindings;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

uint64_t setupThermalStateNotificationAndFetchState #1 @Sendable () in _NSSwiftProcessInfo.thermalState.getter(uint64_t a1)
{
  const char *v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  uint64_t v7[6];
  int out_token;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  out_token = 0;
  v2 = (const char *)_platform_shims_kOSThermalNotificationPressureLevelName();
  v3 = __NSDispatchQueueGetGenericMatchingMain();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  v7[4] = (uint64_t)partial apply for closure #1 in setupThermalStateNotificationAndFetchState #1 @Sendable () in _NSSwiftProcessInfo.thermalState.getter;
  v7[5] = v4;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1107296256;
  v7[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  v7[3] = (uint64_t)&block_descriptor_6_0;
  v5 = _Block_copy(v7);
  swift_release();
  LODWORD(v2) = notify_register_dispatch(v2, &out_token, v3, v5);
  _Block_release(v5);

  if ((_DWORD)v2)
    return 0;
  v7[0] = 0;
  if (notify_get_state(out_token, v7))
    return 0;
  else
    return v7[0];
}

uint64_t closure #1 in setupThermalStateNotificationAndFetchState #1 @Sendable () in _NSSwiftProcessInfo.thermalState.getter(int a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = 0;
  result = notify_get_state(a1, v6);
  if (!(_DWORD)result)
  {
    v3 = specialized static _NSSwiftProcessInfo._mapOSThermalToThermalState(_:)(v6[0]);
    if (one-time initialization token for _globalState != -1)
      swift_once();
    v4 = static _NSSwiftProcessInfo._globalState;
    v5 = (os_unfair_lock_s *)(static _NSSwiftProcessInfo._globalState + 44);
    swift_retain();
    os_unfair_lock_lock(v5);
    *(_QWORD *)(v4 + 16) = v3;
    *(_BYTE *)(v4 + 24) = 0;
    *(_DWORD *)(v4 + 28) = a1;
    *(_BYTE *)(v4 + 32) = 0;
    os_unfair_lock_unlock(v5);
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in _NSSwiftProcessInfo.thermalState.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  char v6;
  uint64_t result;

  if (*(_BYTE *)(a1 + 8) == 1)
  {
    v5 = setupThermalStateNotificationAndFetchState #1 @Sendable () in _NSSwiftProcessInfo.thermalState.getter(a2);
    if ((v6 & 1) != 0)
    {
      result = 0;
    }
    else
    {
      result = specialized static _NSSwiftProcessInfo._mapOSThermalToThermalState(_:)(v5);
      *(_QWORD *)a1 = result;
      *(_BYTE *)(a1 + 8) = 0;
    }
  }
  else
  {
    result = *(_QWORD *)a1;
  }
  *a3 = result;
  return result;
}

uint64_t closure #1 in static _NSSwiftProcessInfo.cancelThermalStateNotifyNotification()(uint64_t result)
{
  uint64_t v1;

  if ((*(_BYTE *)(result + 16) & 1) == 0)
  {
    v1 = result;
    result = notify_cancel(*(_DWORD *)(result + 12));
    *(_DWORD *)(v1 + 12) = 0;
    *(_BYTE *)(v1 + 16) = 1;
  }
  return result;
}

uint64_t static _NSSwiftProcessInfo.updateThermalState(_:)(unint64_t a1)
{
  uint64_t v2;
  os_unfair_lock_s *v3;

  if (one-time initialization token for _globalState != -1)
    swift_once();
  v2 = static _NSSwiftProcessInfo._globalState + 16;
  v3 = (os_unfair_lock_s *)(static _NSSwiftProcessInfo._globalState + 44);
  swift_retain();
  os_unfair_lock_lock(v3);
  closure #1 in static _NSSwiftProcessInfo.updateThermalState(_:)(v2, a1);
  os_unfair_lock_unlock(v3);
  return swift_release();
}

uint64_t closure #1 in static _NSSwiftProcessInfo.updateThermalState(_:)(uint64_t result, unint64_t a2)
{
  uint64_t v2;

  v2 = HIDWORD(a2);
  if (HIDWORD(a2))
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    switch((int)a2)
    {
      case 10:
        v2 = 1;
        break;
      case 20:
        v2 = 2;
        break;
      case 30:
      case 40:
      case 50:
        v2 = 3;
        break;
      default:
        break;
    }
    *(_QWORD *)result = v2;
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

uint64_t closure #1 in static _NSSwiftProcessInfo.cancelPowerStateNotifyNotification()(uint64_t result)
{
  uint64_t v1;

  if ((*(_BYTE *)(result + 24) & 1) == 0)
  {
    v1 = result;
    result = notify_cancel(*(_DWORD *)(result + 20));
    *(_DWORD *)(v1 + 20) = 0;
    *(_BYTE *)(v1 + 24) = 1;
  }
  return result;
}

uint64_t destroy for _NSSwiftProcessInfo.State(uint64_t result)
{
  if (*(_QWORD *)(result + 32))
    return swift_release();
  return result;
}

uint64_t initializeWithCopy for _NSSwiftProcessInfo.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = v4;
    *(_QWORD *)(a1 + 40) = v5;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  }
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t assignWithCopy for _NSSwiftProcessInfo.State(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = (_OWORD *)(a1 + 32);
  v6 = (_OWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 32);
  if (!*(_QWORD *)(a1 + 32))
  {
    if (v5)
    {
      v8 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 32) = v5;
      *(_QWORD *)(a1 + 40) = v8;
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    *v4 = *v6;
    goto LABEL_8;
  }
  if (!v5)
  {
    swift_release();
    goto LABEL_7;
  }
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v7;
  swift_retain();
  swift_release();
LABEL_8:
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for _NSSwiftProcessInfo.State(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = (_OWORD *)(a1 + 32);
  v6 = (_OWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 32);
  if (!*(_QWORD *)(a1 + 32))
  {
    if (v5)
    {
      v8 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 32) = v5;
      *(_QWORD *)(a1 + 40) = v8;
      goto LABEL_8;
    }
LABEL_7:
    *v4 = *v6;
    goto LABEL_8;
  }
  if (!v5)
  {
    swift_release();
    goto LABEL_7;
  }
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v7;
  swift_release();
LABEL_8:
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for _NSSwiftProcessInfo.State(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 57))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _NSSwiftProcessInfo.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 57) = 0;
    if (a2)
      *(_QWORD *)(result + 32) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for _NSSwiftProcessInfo.State()
{
  return &type metadata for _NSSwiftProcessInfo.State;
}

uint64_t specialized closure #1 in setupPowerStateNotificationAndFetchState #1 @Sendable () in _NSSwiftProcessInfo.isLowPowerModeEnabled.getter(int a1)
{
  uint64_t result;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v7[0] = 0;
  result = notify_get_state(a1, v7);
  if (!(_DWORD)result)
  {
    v3 = v7[0];
    if (one-time initialization token for _globalState != -1)
      swift_once();
    v4 = v3 != 0;
    v5 = static _NSSwiftProcessInfo._globalState;
    v6 = (os_unfair_lock_s *)(static _NSSwiftProcessInfo._globalState + 44);
    swift_retain();
    os_unfair_lock_lock(v6);
    *(_DWORD *)(v5 + 36) = a1;
    *(_BYTE *)(v5 + 40) = 0;
    *(_BYTE *)(v5 + 33) = v4;
    os_unfair_lock_unlock(v6);
    return swift_release();
  }
  return result;
}

void specialized _NSSwiftProcessInfo.performActivity(options:reason:block:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  void *v6;
  void *v8;
  _QWORD v9[6];

  v6 = a4;
  if (!a3)
  {
    v8 = 0;
    if (!a4)
      goto LABEL_4;
    goto LABEL_3;
  }
  v8 = (void *)String._bridgeToObjectiveCImpl()();
  if (v6)
  {
LABEL_3:
    v9[4] = v6;
    v9[5] = a5;
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 1107296256;
    v9[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v9[3] = &block_descriptor_18;
    v6 = _Block_copy(v9);
    swift_retain();
    swift_release();
  }
LABEL_4:
  objc_msgSend((id)objc_opt_self(), sel__performActivityWithOptions_reason_usingBlock_, a1, v8, v6);
  _Block_release(v6);

}

uint64_t specialized static _NSSwiftProcessInfo._mapOSThermalToThermalState(_:)(unint64_t a1)
{
  int v1;
  uint64_t result;

  if (HIDWORD(a1))
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v1 = a1;
    result = 0;
    switch(v1)
    {
      case 10:
        result = 1;
        break;
      case 20:
        result = 2;
        break;
      case 30:
      case 40:
      case 50:
        result = 3;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t specialized setupPowerStateNotificationAndFetchState #1 @Sendable () in _NSSwiftProcessInfo.isLowPowerModeEnabled.getter()
{
  NSObject *v0;
  void *v1;
  uint32_t v2;
  uint64_t v4[6];
  int out_token;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  out_token = 0;
  v0 = __NSDispatchQueueGetGenericMatchingMain();
  v4[4] = (uint64_t)specialized closure #1 in setupPowerStateNotificationAndFetchState #1 @Sendable () in _NSSwiftProcessInfo.isLowPowerModeEnabled.getter;
  v4[5] = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 1107296256;
  v4[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  v4[3] = (uint64_t)&block_descriptor_5;
  v1 = _Block_copy(v4);
  swift_release();
  v2 = notify_register_dispatch("com.apple.system.lowpowermode", &out_token, v0, v1);
  _Block_release(v1);

  if (v2)
    return 0;
  v4[0] = 0;
  if (notify_get_state(out_token, v4))
    return 0;
  else
    return v4[0];
}

uint64_t specialized _NSSwiftProcessInfo.macCatalystVersionIs(atLeastVersion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v10;
  unsigned int v11;

  v6 = specialized _NSSwiftProcessInfo.operatingSystemVersion.getter();
  v10 = v7 > a2 || v8 >= a3;
  if (v7 < a2)
    v10 = 0;
  v11 = v6 > a1 || v10;
  if (v6 >= a1)
    return v11;
  else
    return 0;
}

uint64_t partial apply for closure #1 in _NSSwiftProcessInfo._setShouldRelaunchDue(toAutomaticTerminationStateChangedHandler:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *(_QWORD *)(v1 + 16);
  if (v3)
    v4 = *(_QWORD *)(v1 + 24);
  else
    v4 = 0;
  v5 = *(_QWORD *)(a1 + 32);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v3);
  result = outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v5);
  *(_QWORD *)(a1 + 32) = v3;
  *(_QWORD *)(a1 + 40) = v4;
  return result;
}

uint64_t sub_181B113F0()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable () -> ()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t partial apply for closure #1 in static _NSSwiftProcessInfo.updatePowerState(_:)(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(result + 17) = *(_QWORD *)(v1 + 16) != 0;
  return result;
}

uint64_t partial apply for closure #1 in _NSSwiftProcessInfo.isLowPowerModeEnabled.getter@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  int v3;
  uint64_t v4;
  char v5;
  char v6;

  v3 = *(unsigned __int8 *)(result + 17);
  if (v3 == 2)
  {
    v4 = result;
    result = specialized setupPowerStateNotificationAndFetchState #1 @Sendable () in _NSSwiftProcessInfo.isLowPowerModeEnabled.getter();
    if ((v5 & 1) != 0)
    {
      v6 = 0;
    }
    else if (result)
    {
      v6 = 1;
      *(_BYTE *)(v4 + 17) = 1;
    }
    else
    {
      v6 = 0;
      *(_BYTE *)(v4 + 17) = 0;
    }
  }
  else
  {
    v6 = v3 & 1;
  }
  *a2 = v6;
  return result;
}

id __NSDispatchQueueGetGenericMatchingMain()
{
  qos_class_t v0;

  v0 = qos_class_main();
  dispatch_get_global_queue(v0, 2uLL);
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t partial apply for closure #1 in _NSSwiftProcessInfo.thermalState.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in _NSSwiftProcessInfo.thermalState.getter(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_181B114D0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in setupThermalStateNotificationAndFetchState #1 @Sendable () in _NSSwiftProcessInfo.thermalState.getter(int a1)
{
  return closure #1 in setupThermalStateNotificationAndFetchState #1 @Sendable () in _NSSwiftProcessInfo.thermalState.getter(a1);
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned ObjCBool) -> ()(char a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16), a1 & 1);
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) () -> ()()
{
  uint64_t v0;

  return thunk for @escaping @callee_unowned @convention(block) () -> ()(*(_QWORD *)(v0 + 16));
}

uint64_t getEnumTagSinglePayload for _NSSwiftProcessInfo.GlobalState(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 254);
  if (*(unsigned __int8 *)(a1 + 17) <= 2u)
    v3 = 2;
  else
    v3 = *(unsigned __int8 *)(a1 + 17);
  v4 = v3 - 3;
  if (*(unsigned __int8 *)(a1 + 17) < 2u)
    v5 = -1;
  else
    v5 = v4;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for _NSSwiftProcessInfo.GlobalState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 17) = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for _NSSwiftProcessInfo.GlobalState()
{
  return &type metadata for _NSSwiftProcessInfo.GlobalState;
}

uint64_t storeEnumTagSinglePayload for _NSSwiftProcessInfo.PowerState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_181B115FC + 4 * byte_1820D9A4B[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_181B11630 + 4 * byte_1820D9A46[v4]))();
}

uint64_t sub_181B11630(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181B11638(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181B11640);
  return result;
}

uint64_t sub_181B1164C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181B11654);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_181B11658(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181B11660(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for _NSSwiftProcessInfo.PowerState()
{
  return &unk_1E0F21C08;
}

unint64_t lazy protocol witness table accessor for type _NSSwiftProcessInfo.PowerState and conformance _NSSwiftProcessInfo.PowerState()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _NSSwiftProcessInfo.PowerState and conformance _NSSwiftProcessInfo.PowerState;
  if (!lazy protocol witness table cache variable for type _NSSwiftProcessInfo.PowerState and conformance _NSSwiftProcessInfo.PowerState)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for _NSSwiftProcessInfo.PowerState, &unk_1E0F21C08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _NSSwiftProcessInfo.PowerState and conformance _NSSwiftProcessInfo.PowerState);
  }
  return result;
}

uint64_t _CalendarAutoupdating.identifier.getter()
{
  os_unfair_lock_s *v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v4[2];

  if (one-time initialization token for cache != -1)
    swift_once();
  v0 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v0);
  closure #1 in CalendarCache.current.getter(v4);
  os_unfair_lock_unlock(v0);
  swift_release_n();
  v1 = v4[1];
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 24))(ObjectType, v1);
  return swift_unknownObjectRelease();
}

uint64_t _CalendarAutoupdating.timeZone.getter()
{
  os_unfair_lock_s *v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v4[2];

  if (one-time initialization token for cache != -1)
    swift_once();
  v0 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v0);
  closure #1 in CalendarCache.current.getter(v4);
  os_unfair_lock_unlock(v0);
  swift_release_n();
  v1 = v4[1];
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 48))(ObjectType, v1);
  return swift_unknownObjectRelease();
}

Swift::Int_optional __swiftcall _CalendarAutoupdating.ordinality(of:in:for:)(Foundation::Calendar::Component of, Foundation::Calendar::Component in, Foundation::Date a3)
{
  uint64_t *v3;
  Swift::Int v4;
  char v5;
  Swift::Bool v6;
  Swift::Int_optional result;

  v4 = specialized _CalendarAutoupdating.ordinality(of:in:for:)((char *)of, (char *)in, v3);
  v6 = v5 & 1;
  result.value = v4;
  result.is_nil = v6;
  return result;
}

uint64_t _CalendarAutoupdating.date(from:)(const void *a1)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t __dst[37];

  if (one-time initialization token for cache != -1)
    swift_once();
  v2 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v2);
  closure #1 in CalendarCache.current.getter(__dst);
  os_unfair_lock_unlock(v2);
  swift_release_n();
  v3 = __dst[1];
  ObjectType = swift_getObjectType();
  memcpy(__dst, a1, 0x11AuLL);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 176))(__dst, ObjectType, v3);
  return swift_unknownObjectRelease();
}

uint64_t _CalendarAutoupdating.dateComponents(_:from:in:)(uint64_t *a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t ObjectType;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  v3 = *a1;
  v4 = *a2;
  v9 = *a3;
  if (one-time initialization token for cache != -1)
    swift_once();
  v5 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v5);
  closure #1 in CalendarCache.current.getter((uint64_t *)&v12);
  os_unfair_lock_unlock(v5);
  swift_release_n();
  v6 = *((_QWORD *)&v12 + 1);
  ObjectType = swift_getObjectType();
  v11 = v3;
  v10 = v4;
  v12 = v9;
  (*(void (**)(uint64_t *, uint64_t *, __int128 *, uint64_t, uint64_t))(v6 + 184))(&v11, &v10, &v12, ObjectType, v6);
  return swift_unknownObjectRelease();
}

uint64_t _CalendarAutoupdating.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void protocol witness for _CalendarProtocol.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:) in conformance _CalendarAutoupdating()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for _CalendarProtocol.timeZone.getter in conformance _CalendarAutoupdating()
{
  return _CalendarAutoupdating.timeZone.getter();
}

uint64_t protocol witness for _CalendarProtocol.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:) in conformance _CalendarAutoupdating(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4, uint64_t a5, char a6)
{
  return specialized _CalendarAutoupdating.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:)(a1, a2, a3, a4 & 1, a5, a6 & 1);
}

void protocol witness for _CalendarProtocol.hash(into:) in conformance _CalendarAutoupdating()
{
  Hasher._combine(_:)(1uLL);
}

uint64_t protocol witness for _CalendarProtocol.minimumRange(of:) in conformance _CalendarAutoupdating(char *a1)
{
  return specialized _CalendarAutoupdating.minimumRange(of:)(a1);
}

uint64_t protocol witness for _CalendarProtocol.maximumRange(of:) in conformance _CalendarAutoupdating(char *a1)
{
  return specialized _CalendarAutoupdating.maximumRange(of:)(a1);
}

uint64_t protocol witness for _CalendarProtocol.range(of:in:for:) in conformance _CalendarAutoupdating(char *a1, char *a2, uint64_t *a3)
{
  return specialized _CalendarAutoupdating.range(of:in:for:)(a1, a2, a3);
}

unint64_t protocol witness for _CalendarProtocol.ordinality(of:in:for:) in conformance _CalendarAutoupdating(Foundation::Calendar::Component a1, Foundation::Calendar::Component a2, double a3)
{
  return (unint64_t)_CalendarAutoupdating.ordinality(of:in:for:)(a1, a2, *(Foundation::Date *)&a3);
}

uint64_t protocol witness for _CalendarProtocol.isDateInWeekend(_:) in conformance _CalendarAutoupdating(uint64_t *a1)
{
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t v6[2];

  v1 = *a1;
  if (one-time initialization token for cache != -1)
    swift_once();
  v2 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v2);
  closure #1 in CalendarCache.current.getter(v6);
  os_unfair_lock_unlock(v2);
  swift_release_n();
  v3 = v6[1];
  ObjectType = swift_getObjectType();
  v6[0] = v1;
  LOBYTE(v3) = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v3 + 168))(v6, ObjectType, v3);
  swift_unknownObjectRelease();
  return v3 & 1;
}

uint64_t protocol witness for _CalendarProtocol.date(from:) in conformance _CalendarAutoupdating(const void *a1)
{
  return _CalendarAutoupdating.date(from:)(a1);
}

uint64_t protocol witness for _CalendarProtocol.dateComponents(_:from:in:) in conformance _CalendarAutoupdating(uint64_t *a1, uint64_t *a2, __int128 *a3)
{
  return _CalendarAutoupdating.dateComponents(_:from:in:)(a1, a2, a3);
}

uint64_t specialized _CalendarAutoupdating.firstWeekday.getter()
{
  os_unfair_lock_s *v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v3;
  uint64_t v5[2];

  if (one-time initialization token for cache != -1)
    swift_once();
  v0 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v0);
  closure #1 in CalendarCache.current.getter(v5);
  os_unfair_lock_unlock(v0);
  swift_release_n();
  v1 = v5[1];
  ObjectType = swift_getObjectType();
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 56))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t specialized _CalendarAutoupdating.minimumDaysInFirstWeek.getter()
{
  os_unfair_lock_s *v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v3;
  uint64_t v5[2];

  if (one-time initialization token for cache != -1)
    swift_once();
  v0 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v0);
  closure #1 in CalendarCache.current.getter(v5);
  os_unfair_lock_unlock(v0);
  swift_release_n();
  v1 = v5[1];
  ObjectType = swift_getObjectType();
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 72))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t specialized _CalendarAutoupdating.maximumRange(of:)(char *a1)
{
  char v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v7[2];

  v1 = *a1;
  if (one-time initialization token for cache != -1)
    swift_once();
  v2 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v2);
  closure #1 in CalendarCache.current.getter(v7);
  os_unfair_lock_unlock(v2);
  swift_release_n();
  v3 = v7[1];
  ObjectType = swift_getObjectType();
  LOBYTE(v7[0]) = v1;
  v5 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v3 + 136))(v7, ObjectType, v3);
  swift_unknownObjectRelease();
  return v5;
}

uint64_t specialized _CalendarAutoupdating.minimumRange(of:)(char *a1)
{
  char v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v7[2];

  v1 = *a1;
  if (one-time initialization token for cache != -1)
    swift_once();
  v2 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v2);
  closure #1 in CalendarCache.current.getter(v7);
  os_unfair_lock_unlock(v2);
  swift_release_n();
  v3 = v7[1];
  ObjectType = swift_getObjectType();
  LOBYTE(v7[0]) = v1;
  v5 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v3 + 128))(v7, ObjectType, v3);
  swift_unknownObjectRelease();
  return v5;
}

uint64_t specialized _CalendarAutoupdating.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:)(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4, uint64_t a5, char a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t v16;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;

  v8 = *a1;
  v9 = a1[1];
  v10 = *a2;
  v11 = a2[1];
  if (one-time initialization token for cache != -1)
    swift_once();
  v12 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v12);
  closure #1 in CalendarCache.current.getter(&v21);
  v13 = a4 & 1;
  os_unfair_lock_unlock(v12);
  swift_release_n();
  v14 = v22;
  ObjectType = swift_getObjectType();
  v21 = v8;
  v22 = v9;
  v20[0] = v10;
  v20[1] = v11;
  v16 = (*(uint64_t (**)(uint64_t *, _QWORD *, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 112))(&v21, v20, a3, v13, a5, a6 & 1, ObjectType, v14);
  swift_unknownObjectRelease();
  return v16;
}

uint64_t specialized _CalendarAutoupdating.range(of:in:for:)(char *a1, char *a2, uint64_t *a3)
{
  char v3;
  char v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t v9;
  char v11;
  _BYTE v12[9];
  uint64_t v13[2];

  v3 = *a1;
  v4 = *a2;
  v5 = *a3;
  if (one-time initialization token for cache != -1)
    swift_once();
  v6 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  closure #1 in CalendarCache.current.getter(v13);
  os_unfair_lock_unlock(v6);
  swift_release_n();
  v7 = v13[1];
  ObjectType = swift_getObjectType();
  v12[0] = v3;
  v11 = v4;
  v13[0] = v5;
  v9 = (*(uint64_t (**)(_BYTE *, char *, uint64_t *, uint64_t, uint64_t))(v7 + 144))(v12, &v11, v13, ObjectType, v7);
  swift_unknownObjectRelease();
  return v9;
}

uint64_t specialized _CalendarAutoupdating.debugDescription.getter()
{
  Swift::String v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t v5[2];
  uint64_t v6;
  unint64_t v7;

  v6 = 0;
  v7 = 0xE000000000000000;
  v0._countAndFlagsBits = 0x616470756F747561;
  v0._object = (void *)0xED000020676E6974;
  String.append(_:)(v0);
  if (one-time initialization token for cache != -1)
    swift_once();
  v1 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in CalendarCache.current.getter(v5);
  os_unfair_lock_unlock(v1);
  swift_release_n();
  v2 = v5[1];
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v2 + 24))(v5, ObjectType, v2);
  swift_unknownObjectRelease();
  _print_unlocked<A, B>(_:_:)();
  return v6;
}

uint64_t specialized _CalendarAutoupdating.ordinality(of:in:for:)(char *a1, char *a2, uint64_t *a3)
{
  char v3;
  char v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t v9;
  char v11;
  _BYTE v12[9];
  uint64_t v13[2];

  v3 = *a1;
  v4 = *a2;
  v5 = *a3;
  if (one-time initialization token for cache != -1)
    swift_once();
  v6 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  closure #1 in CalendarCache.current.getter(v13);
  os_unfair_lock_unlock(v6);
  swift_release_n();
  v7 = v13[1];
  ObjectType = swift_getObjectType();
  v12[0] = v3;
  v11 = v4;
  v13[0] = v5;
  v9 = (*(uint64_t (**)(_BYTE *, char *, uint64_t *, uint64_t, uint64_t))(v7 + 152))(v12, &v11, v13, ObjectType, v7);
  swift_unknownObjectRelease();
  return v9;
}

void NSData.lastRange<A, B>(of:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSData.lastRange<A, B>(of:in:)(a1, a2, a3, a4, a5);
}

{
  uint64_t v5;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD v16[8];

  v16[7] = *MEMORY[0x1E0C80C00];
  MEMORY[0x1E0C80A78](a1);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v13 + 16))(v12, v10);
  Data.init<A>(_:)((uint64_t)v12, a3, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 8) + 8) + 8) + 8));
  v15 = (char *)&loc_181B125C0 + dword_181B12804[v14 >> 62];
  v16[0] = v5;
  v16[1] = a2;
  __asm { BR              X10 }
}

void NSData.firstRange<A, B>(of:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSData.lastRange<A, B>(of:in:)(a1, a2, a3, a4, a5);
}

id sub_181B125D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v6 - 104) = v5;
  *(_WORD *)(v6 - 96) = v4;
  *(_BYTE *)(v6 - 94) = BYTE2(v4);
  *(_BYTE *)(v6 - 93) = BYTE3(v4);
  *(_BYTE *)(v6 - 92) = BYTE4(v4);
  *(_BYTE *)(v6 - 91) = BYTE5(v4);
  v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D50]), sel_initWithBytes_length_, v6 - 104, BYTE6(v4));
  outlined consume of Data._Representation(v5, v4);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 16))(v2, *(_QWORD *)(v6 - 136), v1);
  *(_OWORD *)(v6 - 128) = xmmword_1820D9B40;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
  lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>((unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, MEMORY[0x1E0DEB8C0]);
  dispatch thunk of RangeExpression.relative<A>(to:)();
  v9 = *(_QWORD *)(v6 - 104);
  v8 = *(_QWORD *)(v6 - 96);
  v10 = v8 - v9;
  if (__OFSUB__(v8, v9))
  {
    __break(1u);
    goto LABEL_7;
  }
  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
  v11 = objc_msgSend(*(id *)(v6 - 144), sel_rangeOfData_options_range_, v7, v3, v9, v10);
  v13 = v12;

  if (v11 == (id)0x7FFFFFFFFFFFFFFFLL)
    return 0;
  if (__OFADD__(v11, v13))
  {
LABEL_7:
    __break(1u);
    JUMPOUT(0x181B127FCLL);
  }
  return v11;
}

uint64_t NSData.regions.getter()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t result;
  uint64_t v6;
  _QWORD aBlock[6];
  uint64_t v8;

  v8 = MEMORY[0x1E0DEE9D8];
  v1 = swift_allocObject();
  *(_QWORD *)(v1 + 16) = &v8;
  *(_QWORD *)(v1 + 24) = v0;
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = partial apply for closure #1 in NSData.regions.getter;
  *(_QWORD *)(v2 + 24) = v1;
  aBlock[4] = partial apply for closure #1 in NSRunLoop.schedule(options:_:);
  aBlock[5] = v2;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeRawPointer, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  aBlock[3] = &block_descriptor_6;
  v3 = _Block_copy(aBlock);
  v4 = v0;
  swift_retain();
  swift_release();
  objc_msgSend(v4, sel_enumerateByteRangesUsingBlock_, v3);
  _Block_release(v3);
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v4 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v6 = v8;
    swift_release();
    return v6;
  }
  return result;
}

uint64_t closure #1 in NSData.regions.getter(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void *a6)
{
  uint64_t v10;
  id v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  id v16;
  _QWORD *v17;
  uint64_t result;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;

  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a6;
  if (a3)
  {
    type metadata accessor for __DataStorage();
    swift_allocObject();
    v11 = a6;
    swift_retain();
    v12 = (_QWORD *)__DataStorage.init(bytes:length:copy:deallocator:offset:)(a1, a3, 0, (void (*)(unint64_t, uint64_t))destructiveProjectEnumData for PredicateCodableError, v10, 0);
    v13 = specialized Data._Representation.init(_:count:)(v12, a3);
    v15 = v14;
    swift_release();
  }
  else
  {
    v16 = a6;
    swift_release();
    v13 = 0;
    v15 = 0xC000000000000000;
  }
  v17 = (_QWORD *)*a5;
  result = swift_isUniquelyReferenced_nonNull_native();
  *a5 = (uint64_t)v17;
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
    v17 = (_QWORD *)result;
    *a5 = result;
  }
  v20 = v17[2];
  v19 = v17[3];
  if (v20 >= v19 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v19 > 1), v20 + 1, 1, v17);
    v17 = (_QWORD *)result;
  }
  v17[2] = v20 + 1;
  v21 = &v17[2 * v20];
  v21[4] = v13;
  v21[5] = v15;
  *a5 = (uint64_t)v17;
  return result;
}

uint64_t thunk for @callee_guaranteed (@unowned UnsafeRawPointer, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t closure #1 in NSData.subscript.getter(uint64_t result, uint64_t a2, uint64_t a3, _BYTE *a4, _QWORD *a5, uint64_t a6, _BYTE *a7)
{
  uint64_t v7;

  v7 = *a5 - a2;
  if (__OFSUB__(*a5, a2))
  {
    __break(1u);
    goto LABEL_8;
  }
  *a5 = v7;
  if (a6 < a2)
    return result;
  if (__OFSUB__(a6, a2))
  {
LABEL_8:
    __break(1u);
    return result;
  }
  if (a6 - a2 < a3)
  {
    *a7 = *(_BYTE *)(result + v7);
    *a4 = 1;
  }
  return result;
}

uint64_t protocol witness for DataProtocol.regions.getter in conformance NSData@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = NSData.regions.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance NSData@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance NSData(a1, (uint64_t (*)(void))NSData.firstRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.lastRange<A, B>(of:in:) in conformance NSData@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance NSData(a1, (uint64_t (*)(void))NSData.lastRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance NSData@<X0>(uint64_t a1@<X8>, uint64_t (*a2)(void))
{
  uint64_t result;
  uint64_t v4;
  char v5;

  result = a2();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5 & 1;
  return result;
}

_QWORD *protocol witness for BidirectionalCollection.index(before:) in conformance NSData@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X8>)
{
  id *v2;
  uint64_t v4;

  v4 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else
  {
    result = objc_msgSend(*v2, sel_length);
    if ((v4 & 0x8000000000000000) == 0 && v4 < (uint64_t)result)
    {
      *a2 = v4;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance NSData(uint64_t *result)
{
  id *v1;
  uint64_t v2;
  uint64_t *v3;

  v2 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else
  {
    v3 = result;
    result = (uint64_t *)objc_msgSend(*v1, sel_length);
    if ((v2 & 0x8000000000000000) == 0 && v2 < (uint64_t)result)
    {
      *v3 = v2;
      return result;
    }
  }
  __break(1u);
  return result;
}

id protocol witness for Collection.endIndex.getter in conformance NSData@<X0>(_QWORD *a1@<X8>)
{
  id *v1;
  id result;

  result = objc_msgSend(*v1, sel_length);
  *a1 = result;
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance NSData(_BYTE *a1, uint64_t *a2))(_QWORD, _QWORD)
{
  *a1 = NSData.subscript.getter(*a2);
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t protocol witness for Collection.subscript.getter in conformance NSData@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  id *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  id v7;

  v5 = *a1;
  v4 = a1[1];
  v7 = *v2;
  result = (uint64_t)objc_msgSend(*v2, sel_length);
  if (result < 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v5 < 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (result >= v4)
  {
    *a2 = v5;
    a2[1] = v4;
    a2[2] = v7;
    return (uint64_t)v7;
  }
LABEL_7:
  __break(1u);
  return result;
}

unint64_t protocol witness for Collection.indices.getter in conformance NSData@<X0>(_QWORD *a1@<X8>)
{
  id *v1;
  unint64_t result;

  result = (unint64_t)objc_msgSend(*v1, sel_length);
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    *a1 = 0;
    a1[1] = result;
  }
  return result;
}

_QWORD *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance NSData@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  id *v3;
  uint64_t v5;

  v5 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else
  {
    result = objc_msgSend(*v3, sel_length);
    if ((v5 & 0x8000000000000000) == 0 && (uint64_t)result >= v5)
    {
      *a3 = v5;
      return result;
    }
  }
  __break(1u);
  return result;
}

id protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance NSData@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  id result;
  char v6;

  result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

id protocol witness for RandomAccessCollection.distance(from:to:) in conformance NSData(uint64_t *a1, uint64_t *a2)
{
  id *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id result;

  v3 = *a1;
  v4 = *a2;
  v5 = *v2;
  result = objc_msgSend(*v2, sel_length);
  if (v3 < 0 || (uint64_t)result < v3)
  {
    __break(1u);
  }
  else
  {
    result = objc_msgSend(v5, sel_length);
    if ((v4 & 0x8000000000000000) == 0 && (uint64_t)result >= v4)
      return (id)(v4 - v3);
  }
  __break(1u);
  return result;
}

id protocol witness for Collection.index(after:) in conformance NSData@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  id *v2;
  uint64_t v4;
  id result;

  v4 = *a1;
  result = objc_msgSend(*v2, sel_length);
  if (v4 < 0 || v4 >= (uint64_t)result)
    __break(1u);
  else
    *a2 = v4 + 1;
  return result;
}

id protocol witness for Collection.formIndex(after:) in conformance NSData(uint64_t *a1)
{
  void **v1;
  void *v3;
  uint64_t v4;
  id result;

  v3 = *v1;
  v4 = *a1;
  result = objc_msgSend(v3, sel_length);
  if (v4 < 0 || v4 >= (uint64_t)result)
    __break(1u);
  else
    *a1 = v4 + 1;
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance NSData(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = 0;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance NSData(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for NSData, a1);
  return Collection.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance NSData()
{
  void **v0;
  void *v1;
  uint64_t v2;

  v1 = *v0;
  v2 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);

  return v2;
}

_QWORD *protocol witness for Sequence._copyContents(initializing:) in conformance NSData(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3);
}

uint64_t sub_181B12F9C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NSData.regions.getter(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in NSData.regions.getter(a1, a2, a3, a4, *(uint64_t **)(v4 + 16), *(void **)(v4 + 24));
}

uint64_t sub_181B12FC8()
{
  return swift_deallocObject();
}

uint64_t sub_181B12FD8()
{
  return swift_deallocObject();
}

uint64_t sub_181B12FE8()
{
  return swift_deallocObject();
}

uint64_t associated type witness table accessor for DataProtocol.Regions : BidirectionalCollection in NSData()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [Data] and conformance [A], &demangling cache variable for type metadata for [Data], MEMORY[0x1E0DEAF20]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : DataProtocol in NSData()
{
  return lazy protocol witness table accessor for type Slice<NSData> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<NSData> and conformance <> Slice<A>, &lazy protocol witness table cache variable for type NSData and conformance NSData, (uint64_t)&protocol conformance descriptor for NSData, (uint64_t)&protocol conformance descriptor for <> Slice<A>);
}

unint64_t type metadata accessor for NSData()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSData;
  if (!lazy cache variable for type metadata for NSData)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSData);
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for DataProtocol.Regions.Sequence.Element : ContiguousBytes in NSData()
{
  return &protocol witness table for Data;
}

uint64_t instantiation function for generic protocol witness table for NSData(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type NSData and conformance NSData(&lazy protocol witness table cache variable for type NSData and conformance NSData, (uint64_t)&protocol conformance descriptor for NSData);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for BidirectionalCollection in NSData()
{
  return lazy protocol witness table accessor for type NSData and conformance NSData(&lazy protocol witness table cache variable for type NSData and conformance NSData, (uint64_t)&protocol conformance descriptor for NSData);
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in NSData()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, MEMORY[0x1E0DEB8B8]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in NSData()
{
  return lazy protocol witness table accessor for type Slice<NSData> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<NSData> and conformance <> Slice<A>, &lazy protocol witness table cache variable for type NSData and conformance NSData, (uint64_t)&protocol conformance descriptor for NSData, MEMORY[0x1E0DEDE40]);
}

uint64_t lazy protocol witness table accessor for type Slice<NSData> and conformance <> Slice<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Slice<NSData>);
    v10 = lazy protocol witness table accessor for type NSData and conformance NSData(a2, a3);
    result = MEMORY[0x186DA9D64](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for Collection in NSData()
{
  return lazy protocol witness table accessor for type NSData and conformance NSData(&lazy protocol witness table cache variable for type NSData and conformance NSData, (uint64_t)&protocol conformance descriptor for NSData);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in NSData()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, MEMORY[0x1E0DEB890]);
}

uint64_t lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<Int>);
    v6 = lazy protocol witness table accessor for type Int and conformance Int();
    v7[0] = MEMORY[0x1E0DEB458];
    v7[1] = v6;
    result = MEMORY[0x186DA9D64](a2, v5, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in NSData()
{
  return lazy protocol witness table accessor for type Slice<NSData> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<NSData> and conformance <> Slice<A>, &lazy protocol witness table cache variable for type NSData and conformance NSData, (uint64_t)&protocol conformance descriptor for NSData, MEMORY[0x1E0DEDE28]);
}

uint64_t base witness table accessor for Sequence in NSData()
{
  return lazy protocol witness table accessor for type NSData and conformance NSData(&lazy protocol witness table cache variable for type NSData and conformance NSData, (uint64_t)&protocol conformance descriptor for NSData);
}

uint64_t lazy protocol witness table accessor for type NSData and conformance NSData(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for NSData();
    result = MEMORY[0x186DA9D64](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in NSData()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>((unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, MEMORY[0x1E0DEB8C0]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in NSData()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type Slice<NSData> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<NSData>, MEMORY[0x1E0DEDE48]);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in NSData()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type IndexingIterator<NSData> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<NSData>, MEMORY[0x1E0DEC908]);
}

uint64_t sub_181B133DC()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t KeyPath._unsafeAssumeSendable.getter()
{
  uint64_t v1;

  type metadata accessor for KeyPath();
  swift_retain();
  swift_dynamicCast();
  return v1;
}

BOOL static PredicateExpressions.VariableID.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

void PredicateError._Error.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  __asm { BR              X10 }
}

void sub_181B134B8()
{
  uint64_t v0;
  uint64_t v1;

  Hasher._combine(_:)(1uLL);
  if (v0)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of PredicateError._Error(v1, v0, 0);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

void PredicateError._Error.hashValue.getter(uint64_t a1, uint64_t a2, char a3)
{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_181B135E4()
{
  uint64_t v0;
  uint64_t v1;

  Hasher._combine(_:)(1uLL);
  if (v0)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of PredicateError._Error(v1, v0, 0);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hashValue.getter in conformance PredicateError._Error()
{
  uint64_t v0;

  PredicateError._Error.hashValue.getter(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

void protocol witness for Hashable.hash(into:) in conformance PredicateError._Error(uint64_t a1)
{
  uint64_t v1;

  PredicateError._Error.hash(into:)(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16));
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance PredicateError._Error()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_181B13748()
{
  uint64_t v0;
  uint64_t v1;

  Hasher._combine(_:)(1uLL);
  if (v0)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of PredicateError._Error(v1, v0, 0);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void protocol witness for static Equatable.== infix(_:_:) in conformance PredicateError._Error(uint64_t a1)
{
  specialized static PredicateError._Error.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

void PredicateError.debugDescription.getter()
{
  __asm { BR              X10 }
}

uint64_t sub_181B138BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  if (!v1)
    return a1 + 4;
  swift_bridgeObjectRetain();
  return v2;
}

void static PredicateError.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X11 }
}

BOOL sub_181B1394C@<W0>(int a1@<W8>)
{
  return a1 == 0;
}

void static PredicateError.undefinedVariable.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 3;
}

void static PredicateError.forceUnwrapFailure.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
}

void static PredicateError.forceCastFailure.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
}

void static PredicateError.invalidInput.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 2;
}

void PredicateError.hash(into:)()
{
  __asm { BR              X10 }
}

uint64_t sub_181B13A14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  Hasher._combine(_:)(1uLL);
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v2 = v0;
    v3 = v1;
  }
  else
  {
    Hasher._combine(_:)(0);
    v2 = v0;
    v3 = 0;
  }
  return outlined consume of PredicateError._Error(v2, v3, 0);
}

void PredicateError.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_181B13B6C()
{
  uint64_t v0;
  uint64_t v1;

  Hasher._combine(_:)(1uLL);
  if (v0)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of PredicateError._Error(v1, v0, 0);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance PredicateError()
{
  __asm { BR              X10 }
}

void sub_181B13CB8()
{
  uint64_t v0;
  uint64_t v1;

  Hasher._combine(_:)(1uLL);
  if (v0)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of PredicateError._Error(v1, v0, 0);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance PredicateError()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_181B13DD8()
{
  uint64_t v0;
  uint64_t v1;

  Hasher._combine(_:)(1uLL);
  if (v0)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of PredicateError._Error(v1, v0, 0);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void one-time initialization function for nextID()
{
  static PredicateExpressions.VariableID.nextID = 0;
}

uint64_t outlined consume of PredicateError._Error(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 2u)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t PredicateExpressions.VariableID.encode(to:)(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

void PredicateExpressions.VariableID.hash(into:)()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int PredicateExpressions.VariableID.hashValue.getter()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PredicateExpressions.VariableID()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance PredicateExpressions.VariableID()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PredicateExpressions.VariableID()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void PredicateExpressions.Variable.key.getter(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t PredicateExpressions.Variable.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 7955819 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PredicateExpressions.Variable<A>.CodingKeys()
{
  return 7955819;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PredicateExpressions.Variable<A>.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = PredicateExpressions.Variable.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance PredicateExpressions.Variable<A>.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = default argument 1 of _typeName(_:qualified:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PredicateExpressions.Variable<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.Variable<A>.CodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PredicateExpressions.Variable<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.Variable<A>.CodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t PredicateExpressions.KeyPath.keyPath.getter()
{
  return swift_retain();
}

uint64_t PredicateExpressions.KeyPath.init(root:keyPath:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t result;

  swift_retain();
  AnyKeyPath._validateForPredicateUsage(restrictArguments:)(0);
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a6, a1, a3);
  result = type metadata accessor for PredicateExpressions.KeyPath(0, a3, a4, a5);
  *(_QWORD *)(a6 + *(int *)(result + 44)) = a2;
  return result;
}

uint64_t PredicateExpressions.KeyPath.evaluate(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  v13 = a3;
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)&v13 - v10;
  v14 = *a1;
  result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, __n128))(v5 + 16))(&v14, v6, v5, v9);
  if (!v3)
  {
    swift_getAtKeyPath();
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, AssociatedTypeWitness);
  }
  return result;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.KeyPath<A, B>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.KeyPath.evaluate(_:)(a1, a2, a3);
}

uint64_t PredicateExpressions.Value.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t AnyKeyPath._unsafeAssumeSendableAnyKeyPath.getter()
{
  uint64_t v1;

  type metadata accessor for AnyKeyPath();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyKeyPath & Sendable);
  swift_dynamicCast();
  return v1;
}

BOOL static PredicateExpressions.KeyPath<>.CodingKeys.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void PredicateExpressions.KeyPath<>.CodingKeys.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

uint64_t PredicateExpressions.KeyPath<>.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1953460082 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

Swift::Int PredicateExpressions.KeyPath<>.CodingKeys.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

uint64_t PredicateExpressions.KeyPath<>.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x696669746E656469;
  else
    return 1953460082;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PredicateExpressions.KeyPath<A, B><>.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static PredicateExpressions.KeyPath<>.CodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PredicateExpressions.KeyPath<A, B><>.CodingKeys()
{
  char *v0;

  return PredicateExpressions.KeyPath<>.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance PredicateExpressions.KeyPath<A, B><>.CodingKeys(uint64_t a1)
{
  char *v1;

  PredicateExpressions.KeyPath<>.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PredicateExpressions.KeyPath<A, B><>.CodingKeys()
{
  char *v0;
  _BYTE v2[72];

  Hasher.init(_seed:)();
  PredicateExpressions.KeyPath<>.CodingKeys.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PredicateExpressions.KeyPath<A, B><>.CodingKeys()
{
  char *v0;

  return PredicateExpressions.KeyPath<>.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PredicateExpressions.KeyPath<A, B><>.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = PredicateExpressions.KeyPath<>.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance PredicateExpressions.KeyPath<A, B><>.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = protocol witness for Sequence._customContainsEquatableElement(_:) in conformance _DarwinSearchPathsSequence();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PredicateExpressions.KeyPath<A, B><>.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B><>.CodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PredicateExpressions.KeyPath<A, B><>.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B><>.CodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

void PredicateExpressions.KeyPath<>.encode(to:)()
{
  type metadata accessor for PredicateExpressions.KeyPath<>.CodingKeys();
}

uint64_t sub_181B14788(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;

  MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B><>.CodingKeys, a1);
  v4 = type metadata accessor for KeyedEncodingContainer();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v23 - v6;
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  v8 = *(_QWORD *)(v3 - 144);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  *(_BYTE *)(v3 - 128) = 0;
  v9 = *(_QWORD *)(v3 - 72);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v9)
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  *(_QWORD *)(v3 - 72) = v2;
  if (one-time initialization token for predicateArchivingState != -1)
    swift_once();
  v11 = pthread_getspecific(static _ThreadLocal.Key<A>.predicateArchivingState);
  if (!v11)
    goto LABEL_8;
  v12 = *(_QWORD *)(*(_QWORD *)v11 + 24);
  v13 = *(_BYTE *)(*(_QWORD *)v11 + 32);
  *(_QWORD *)(v3 - 128) = *(_QWORD *)(*(_QWORD *)v11 + 16);
  *(_QWORD *)(v3 - 120) = v12;
  *(_BYTE *)(v3 - 112) = v13;
  v14 = *(_QWORD *)(v8 + *(int *)(*(_QWORD *)(v3 - 72) + 44));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized PredicateCodableConfiguration._identifier(for:)(v14, (uint64_t *)(v3 - 128));
  v16 = v15;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v16)
  {
    *(_BYTE *)(v3 - 128) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return swift_bridgeObjectRelease();
  }
  else
  {
LABEL_8:
    v17 = type metadata accessor for EncodingError();
    swift_allocError();
    v19 = v18;
    *(_QWORD *)(v3 - 136) = (char *)v18
                          + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Any, EncodingError.Context))
                                   + 48);
    v20 = *(_QWORD **)(v8 + *(int *)(*(_QWORD *)(v3 - 72) + 44));
    v19[3] = *v20;
    *v19 = v20;
    swift_retain();
    KeyedDecodingContainer.codingPath.getter();
    *(_QWORD *)(v3 - 128) = 0;
    *(_QWORD *)(v3 - 120) = 0xE000000000000000;
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v3 - 128) = 0x2720656854;
    *(_QWORD *)(v3 - 120) = 0xE500000000000000;
    v21._countAndFlagsBits = AnyKeyPath.debugDescription.getter();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._object = (void *)0x8000000182307C90;
    v22._countAndFlagsBits = 0xD00000000000002ALL;
    String.append(_:)(v22);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v19, *MEMORY[0x1E0DEC4B0], v17);
    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

void PredicateExpressions.KeyPath<>.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[18];

  v9[2] = a3;
  v9[8] = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v9[6] = v4;
  v9[7] = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9[13] = v5;
  v9[14] = v6;
  v9[15] = v7;
  v9[16] = v4;
  v9[17] = v8;
  type metadata accessor for PredicateExpressions.KeyPath<>.CodingKeys();
}

uint64_t sub_181B14B08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  char v25;
  uint64_t *AssociatedTypeWitness;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  Swift::String v42;
  uint64_t v43;
  void *v44;
  void *v45;
  Swift::String v46;
  Swift::String v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  Swift::String v51;
  Swift::String v52;
  Swift::String v53;
  Swift::String v54;
  Swift::String v55;
  Swift::String v56;
  Swift::String v57;
  _BYTE v58[96];

  MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B><>.CodingKeys, a1);
  v6 = type metadata accessor for KeyedDecodingContainer();
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 - 152) = v6;
  *(_QWORD *)(v5 - 144) = v7;
  MEMORY[0x1E0C80A78](v6);
  v9 = &v58[-v8];
  *(_QWORD *)(v5 - 192) = v1;
  *(_QWORD *)(v5 - 184) = v2;
  *(_QWORD *)(v5 - 200) = v3;
  v10 = type metadata accessor for PredicateExpressions.KeyPath(0, v2, v3, v1);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = &v58[-v12];
  __swift_project_boxed_opaque_existential_1(v4, v4[3]);
  *(_QWORD *)(v5 - 136) = v9;
  v14 = *(_QWORD *)(v5 - 128);
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  *(_QWORD *)(v5 - 216) = v11;
  *(_QWORD *)(v5 - 128) = v10;
  v15 = v13;
  v17 = *(_QWORD *)(v5 - 168);
  v16 = *(_QWORD *)(v5 - 160);
  *(_BYTE *)(v5 - 120) = 0;
  v18 = *(_QWORD *)(v5 - 184);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v16 + 32))(v15, v17, v18);
  *(_BYTE *)(v5 - 120) = 1;
  v20 = KeyedDecodingContainer.decode(_:forKey:)();
  v22 = v21;
  *(_QWORD *)(v5 - 168) = v20;
  if (one-time initialization token for predicateArchivingState != -1)
    swift_once();
  v23 = pthread_getspecific(static _ThreadLocal.Key<A>.predicateArchivingState);
  if (!v23)
    goto LABEL_10;
  v24 = *(_QWORD *)(*(_QWORD *)v23 + 24);
  v25 = *(_BYTE *)(*(_QWORD *)v23 + 32);
  *(_QWORD *)(v5 - 120) = *(_QWORD *)(*(_QWORD *)v23 + 16);
  *(_QWORD *)(v5 - 112) = v24;
  *(_BYTE *)(v5 - 104) = v25;
  AssociatedTypeWitness = (uint64_t *)swift_getAssociatedTypeWitness();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v27 = *(_QWORD *)(v5 - 168);
  *(_QWORD *)(v5 - 176) = AssociatedTypeWitness;
  v28 = PredicateCodableConfiguration._keyPath(for:rootType:)(v27, (uint64_t)v22, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v28)
  {
    *(_QWORD *)(v5 - 192) = v22;
    type metadata accessor for KeyPath();
    v29 = swift_dynamicCastClass();
    if (v29)
    {
      v30 = v29;
      swift_retain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v5 - 72) = v30;
      swift_retain();
      swift_dynamicCast();
      v31 = *(_QWORD *)(v5 - 120);
      swift_release_n();
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v5 - 144) + 8))(*(_QWORD *)(v5 - 136), *(_QWORD *)(v5 - 152));
      v32 = *(_QWORD *)(v5 - 128);
      *(_QWORD *)&v15[*(int *)(v32 + 44)] = v31;
      v33 = *(_QWORD *)(v5 - 216);
      (*(void (**)(_QWORD, _BYTE *, uint64_t))(v33 + 16))(*(_QWORD *)(v5 - 208), v15, v32);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
      return (*(uint64_t (**)(_BYTE *, uint64_t))(v33 + 8))(v15, v32);
    }
    *(_BYTE *)(v5 - 72) = 1;
    *(_QWORD *)(v5 - 120) = 0;
    *(_QWORD *)(v5 - 112) = 0xE000000000000000;
    _StringGuts.grow(_:)(114);
    v41 = *(_QWORD *)(v5 - 112);
    *(_QWORD *)(v5 - 120) = *(_QWORD *)(v5 - 120);
    *(_QWORD *)(v5 - 112) = v41;
    v42._countAndFlagsBits = 0x687461702079654BLL;
    v42._object = (void *)0xEA00000000002720;
    String.append(_:)(v42);
    swift_retain();
    v43 = AnyKeyPath.debugDescription.getter();
    v45 = v44;
    swift_release();
    v46._countAndFlagsBits = v43;
    v46._object = v45;
    String.append(_:)(v46);
    swift_bridgeObjectRelease();
    v47._countAndFlagsBits = 0x615079654B282027;
    v47._object = (void *)0xEB000000003C6874;
    String.append(_:)(v47);
    dispatch thunk of static AnyKeyPath._rootAndValueType.getter();
    v48._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v48);
    swift_bridgeObjectRelease();
    v49._countAndFlagsBits = 8236;
    v49._object = (void *)0xE200000000000000;
    String.append(_:)(v49);
    dispatch thunk of static AnyKeyPath._rootAndValueType.getter();
    v50._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v50);
    swift_bridgeObjectRelease();
    v51._object = (void *)0x8000000182307D10;
    v51._countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v51);
    v52._countAndFlagsBits = *(_QWORD *)(v5 - 168);
    v52._object = *(void **)(v5 - 192);
    String.append(_:)(v52);
    swift_bridgeObjectRelease();
    v53._countAndFlagsBits = 0xD000000000000039;
    v53._object = (void *)0x8000000182307D30;
    String.append(_:)(v53);
    v54._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v54);
    swift_bridgeObjectRelease();
    v55._countAndFlagsBits = 8236;
    v55._object = (void *)0xE200000000000000;
    String.append(_:)(v55);
    v56._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v56);
    swift_bridgeObjectRelease();
    v57._countAndFlagsBits = 62;
    v57._object = (void *)0xE100000000000000;
    String.append(_:)(v57);
    type metadata accessor for DecodingError();
    swift_allocError();
    v38 = *(_QWORD *)(v5 - 152);
    MEMORY[0x186DA9D64](MEMORY[0x1E0DED060], v38);
    v39 = *(_QWORD *)(v5 - 136);
    static DecodingError.dataCorruptedError<A>(forKey:in:debugDescription:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_release();
  }
  else
  {
LABEL_10:
    *(_BYTE *)(v5 - 72) = 1;
    *(_QWORD *)(v5 - 120) = 0;
    *(_QWORD *)(v5 - 112) = 0xE000000000000000;
    _StringGuts.grow(_:)(66);
    v34 = *(_QWORD *)(v5 - 112);
    *(_QWORD *)(v5 - 120) = *(_QWORD *)(v5 - 120);
    *(_QWORD *)(v5 - 112) = v34;
    v35._object = (void *)0x8000000182307CC0;
    v35._countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v35);
    v36._countAndFlagsBits = *(_QWORD *)(v5 - 168);
    v36._object = v22;
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    v37._countAndFlagsBits = 0xD00000000000002DLL;
    v37._object = (void *)0x8000000182307CE0;
    String.append(_:)(v37);
    type metadata accessor for DecodingError();
    swift_allocError();
    v38 = *(_QWORD *)(v5 - 152);
    MEMORY[0x186DA9D64](MEMORY[0x1E0DED060], v38);
    v39 = *(_QWORD *)(v5 - 136);
    static DecodingError.dataCorruptedError<A>(forKey:in:debugDescription:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 144) + 8))(v39, v38);
  v40 = *(_QWORD *)(v5 - 160);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v40 + 8))(v15, v18);
}

void protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.KeyPath<A, B>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  PredicateExpressions.KeyPath<>.init(from:)(a1, *(_QWORD *)(a2 + 16), a3);
}

void protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.KeyPath<A, B>()
{
  PredicateExpressions.KeyPath<>.encode(to:)();
}

uint64_t PredicateExpressions.KeyPath.description.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;

  _StringGuts.grow(_:)(30);
  v0._countAndFlagsBits = 0x286874615079654BLL;
  v0._object = (void *)0xEE00203A746F6F72;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0x74615079656B202CLL;
  v1._object = (void *)0xEB00000000203A68;
  String.append(_:)(v1);
  v2._countAndFlagsBits = AnyKeyPath.debugDescription.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 41;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 0;
}

BOOL static PredicateExpressions.KeyPath.CommonKeyPathKind.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void PredicateExpressions.KeyPath.CommonKeyPathKind.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int PredicateExpressions.KeyPath.CommonKeyPathKind.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PredicateExpressions.KeyPath<A, B>.CommonKeyPathKind()
{
  Hasher.init(_seed:)();
  PredicateExpressions.KeyPath.CommonKeyPathKind.hash(into:)();
  return Hasher._finalize()();
}

uint64_t static PredicateExpressions.KeyPath.kind<A>(_:collectionType:)@<X0>(char *a1@<X8>)
{
  char v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t result;
  char v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;

  type metadata accessor for PartialKeyPath();
  swift_dynamicCastClassUnconditional();
  swift_getKeyPath();
  type metadata accessor for AnyKeyPath();
  swift_retain();
  v2 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if ((v2 & 1) == 0)
  {
    swift_getKeyPath();
    swift_retain();
    v3 = dispatch thunk of static Equatable.== infix(_:_:)();
    swift_release();
    v4 = swift_release();
    if ((v3 & 1) == 0)
    {
      MEMORY[0x1E0C80A78](v4);
      swift_getKeyPath();
      swift_retain();
      v5 = dispatch thunk of static Equatable.== infix(_:_:)();
      swift_release();
      swift_release();
      if ((v5 & 1) == 0)
      {
        swift_getKeyPath();
        swift_retain();
        v7 = dispatch thunk of static Equatable.== infix(_:_:)();
        swift_release();
        swift_release();
        if ((v7 & 1) != 0)
          goto LABEL_9;
        swift_getKeyPath();
        swift_retain();
        v8 = dispatch thunk of static Equatable.== infix(_:_:)();
        swift_release();
        v9 = swift_release();
        if ((v8 & 1) != 0
          || (MEMORY[0x1E0C80A78](v9),
              swift_getKeyPath(),
              swift_retain(),
              v10 = dispatch thunk of static Equatable.== infix(_:_:)(),
              swift_release(),
              v11 = swift_release(),
              (v10 & 1) != 0))
        {
LABEL_9:
          result = swift_release();
          v12 = 1;
        }
        else
        {
          MEMORY[0x1E0C80A78](v11);
          swift_getKeyPath();
          swift_retain();
          v13 = dispatch thunk of static Equatable.== infix(_:_:)();
          swift_release();
          v14 = swift_release();
          if ((v13 & 1) != 0)
          {
            result = swift_release();
            v12 = 2;
          }
          else
          {
            MEMORY[0x1E0C80A78](v14);
            swift_getKeyPath();
            swift_retain();
            v15 = dispatch thunk of static Equatable.== infix(_:_:)();
            swift_release();
            swift_release();
            if ((v15 & 1) != 0)
            {
              result = swift_release();
              v12 = 3;
            }
            else
            {
              AssociatedTypeWitness = swift_getAssociatedTypeWitness();
              if (swift_conformsToProtocol2())
                v17 = AssociatedTypeWitness;
              else
                v17 = 0;
              if (v17)
              {
                static PredicateExpressions.KeyPath.kind<A, B>(_:hashableElementType:)(a1);
                return swift_release();
              }
              result = swift_release();
              v12 = 4;
            }
          }
        }
        *a1 = v12;
        return result;
      }
    }
  }
  result = swift_release();
  *a1 = 0;
  return result;
}

uint64_t key path getter for String.count : String@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = String.count.getter();
  *a1 = result;
  return result;
}

uint64_t key path getter for Collection.count : Substring@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  swift_bridgeObjectRetain();
  v2 = Substring.distance(from:to:)();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t key path getter for Array.count : <A, B><A1>[A1.Element]@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t result;

  v3 = *a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  result = MEMORY[0x186DA4B5C](v3, AssociatedTypeWitness);
  *a2 = result;
  return result;
}

_QWORD *key path getter for String.isEmpty : String@<X0>(_QWORD *result@<X0>, BOOL *a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;

  v2 = result[1];
  v3 = *result & 0xFFFFFFFFFFFFLL;
  if ((v2 & 0x2000000000000000) != 0)
    v3 = HIBYTE(v2) & 0xF;
  *a2 = v3 == 0;
  return result;
}

_QWORD *key path getter for Collection.isEmpty : Substring@<X0>(_QWORD *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (result[1] ^ *result) < 0x4000uLL;
  return result;
}

uint64_t key path getter for Collection.isEmpty : <A, B><A1>[A1.Element]@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  swift_getAssociatedTypeWitness();
  v2 = type metadata accessor for Array();
  MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF50], v2);
  result = Collection.isEmpty.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path getter for Collection.first : <A, B><A1>[A1.Element](uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;

  swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for Array();
  v8 = MEMORY[0x186DA9D64](a4, v7);
  return a5(v7, v8);
}

uint64_t static PredicateExpressions.KeyPath.kind<A, B>(_:hashableElementType:)@<X0>(char *a1@<X8>)
{
  char v1;
  uint64_t result;
  char v3;
  char v4;

  swift_getKeyPath();
  type metadata accessor for AnyKeyPath();
  v1 = dispatch thunk of static Equatable.== infix(_:_:)();
  result = swift_release();
  if ((v1 & 1) != 0)
  {
    v3 = 0;
  }
  else
  {
    MEMORY[0x1E0C80A78](result);
    swift_getKeyPath();
    v4 = dispatch thunk of static Equatable.== infix(_:_:)();
    result = swift_release();
    if ((v4 & 1) != 0)
      v3 = 1;
    else
      v3 = 4;
  }
  *a1 = v3;
  return result;
}

uint64_t type metadata accessor for PredicateExpressions.Variable.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PredicateExpressions.Variable.CodingKeys);
}

void type metadata accessor for PredicateExpressions.KeyPath<>.CodingKeys()
{
  JUMPOUT(0x186DA9CBCLL);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.KeyPath<A, B>(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];
  _QWORD v10[2];

  v5 = *a3;
  a1[1] = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  v7 = *(_QWORD *)(v5 + 16);
  v6 = *(_QWORD *)(v5 + 24);
  v10[0] = v7;
  v10[1] = v6;
  a1[2] = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> PredicateExpressions.KeyPath<A, B>, a2, v10);
  v9[0] = v7;
  v9[1] = v6;
  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> PredicateExpressions.KeyPath<A, B>, a2, v9);
  a1[3] = result;
  return result;
}

void base witness table accessor for Equatable in PredicateExpressions.KeyPath<A, B>.CommonKeyPathKind()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t dispatch thunk of PredicateExpression.evaluate(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t outlined copy of PredicateError._Error(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 2u)
    return swift_bridgeObjectRetain();
  return result;
}

ValueMetadata *type metadata accessor for PredicateError()
{
  return &type metadata for PredicateError;
}

uint64_t *initializeBufferWithCopyOfBuffer for PredicateExpressions.KeyPath(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
  }
  swift_retain();
  return v4;
}

uint64_t assignWithCopy for PredicateExpressions.KeyPath(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for PredicateExpressions.KeyPath(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for PredicateExpressions.KeyPath(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.KeyPath(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_181B15F44 + 4 * byte_1820D9D94[v10]))();
  }
}

void storeEnumTagSinglePayload for PredicateExpressions.KeyPath(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_181B160BC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x181B16130);
}

void sub_181B160C4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x181B160CCLL);
  JUMPOUT(0x181B16130);
}

void sub_181B1610C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x181B16130);
}

void sub_181B16114()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x181B16130);
}

uint64_t sub_181B1611C(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x181B16130);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x181B1612CLL);
    JUMPOUT(0x181B16128);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.Value(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_181B161F8 + 4 * byte_1820D9DA3[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for PredicateExpressions.Value(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t storeEnumTagSinglePayload for PredicateExpressions.KeyPath.CommonKeyPathKind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_181B16444 + 4 * byte_1820D9DB6[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_181B16478 + 4 * byte_1820D9DB1[v4]))();
}

uint64_t sub_181B16478(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181B16480(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181B16488);
  return result;
}

uint64_t sub_181B16494(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181B1649CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_181B164A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181B164A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t destroy for PredicateError._Error(uint64_t a1)
{
  return outlined consume of PredicateError._Error(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for PredicateError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of PredicateError._Error(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for PredicateError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of PredicateError._Error(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of PredicateError._Error(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for PredicateError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of PredicateError._Error(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for PredicateError._Error()
{
  return &type metadata for PredicateError._Error;
}

uint64_t storeEnumTagSinglePayload for PredicateExpressions.KeyPath<>.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_181B16600 + 4 * byte_1820D9DC0[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_181B16634 + 4 * byte_1820D9DBB[v4]))();
}

uint64_t sub_181B16634(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181B1663C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181B16644);
  return result;
}

uint64_t sub_181B16650(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181B16658);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_181B1665C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181B16664(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for PredicateExpressions.Variable.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_181B166B0 + 4 * byte_1820D9DC5[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_181B166D0 + 4 * byte_1820D9DCA[v4]))();
}

_BYTE *sub_181B166B0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_181B166D0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181B166D8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181B166E0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181B166E8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181B166F0(_DWORD *result)
{
  *result = 0;
  return result;
}

void base witness table accessor for Equatable in PredicateExpressions.Variable<A>.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for Equatable in PredicateExpressions.KeyPath<A, B><>.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

unint64_t lazy protocol witness table accessor for type PredicateError._Error and conformance PredicateError._Error()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PredicateError._Error and conformance PredicateError._Error;
  if (!lazy protocol witness table cache variable for type PredicateError._Error and conformance PredicateError._Error)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateError._Error, &type metadata for PredicateError._Error);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateError._Error and conformance PredicateError._Error);
  }
  return result;
}

void base witness table accessor for CustomDebugStringConvertible in PredicateExpressions.KeyPath<A, B><>.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomStringConvertible in PredicateExpressions.KeyPath<A, B><>.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomDebugStringConvertible in PredicateExpressions.Variable<A>.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomStringConvertible in PredicateExpressions.Variable<A>.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void specialized static PredicateError._Error.== infix(_:_:)(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }
}

BOOL sub_181B167C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6)
    return 0;
  if (a2)
    return a5 && (a1 == a4 && a2 == a5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0);
  if (!a5)
    return 1;
  outlined consume of PredicateError._Error(a1, 0, 0);
  return 0;
}

uint64_t sub_181B1687C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = String.count.getter();
  *a1 = result;
  return result;
}

uint64_t sub_181B168F8()
{
  return 40;
}

__n128 sub_181B16904(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

_QWORD *sub_181B16918@<X0>(_QWORD *result@<X0>, BOOL *a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;

  v2 = result[1];
  v3 = *result & 0xFFFFFFFFFFFFLL;
  if ((v2 & 0x2000000000000000) != 0)
    v3 = HIBYTE(v2) & 0xF;
  *a2 = v3 == 0;
  return result;
}

_QWORD *sub_181B1693C@<X0>(_QWORD *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (result[1] ^ *result) < 0x4000uLL;
  return result;
}

void sub_181B16954()
{
  get_witness_table_10Foundation19PredicateExpressionRzSlRd__r0__lSay7ElementQyd__GSlHPyHCTm();
}

uint64_t sub_181B16964()
{
  return 40;
}

__n128 sub_181B16970(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_181B16984(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for Collection.first : <A, B><A1>[A1.Element](a1, a2, a3, MEMORY[0x1E0DEAF50], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB620]);
}

uint64_t sub_181B169A8()
{
  return 40;
}

__n128 sub_181B169B4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

void sub_181B169C8()
{
  get_witness_table_10Foundation19PredicateExpressionRzSlRd__r0__lSay7ElementQyd__GSlHPyHCTm();
}

void get_witness_table_10Foundation19PredicateExpressionRzSlRd__r0__lSay7ElementQyd__GSlHPyHCTm()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for Array();
  JUMPOUT(0x186DA9D64);
}

uint64_t sub_181B16A28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for Collection.first : <A, B><A1>[A1.Element](a1, a2, a3, MEMORY[0x1E0DEAF20], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEA360]);
}

uint64_t sub_181B16A4C()
{
  return 40;
}

__n128 sub_181B16A58(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_181B16A6C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t sub_181B16A74@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Set.count.getter();
  *a1 = result;
  return result;
}

uint64_t sub_181B16AA8()
{
  return 56;
}

__n128 sub_181B16AB4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  v4 = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t sub_181B16AD0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = Set.isEmpty.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_181B16B08()
{
  return 56;
}

__n128 sub_181B16B14(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  v4 = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t PredicateExpressions.ConditionalCast.input.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t PredicateExpressions.ConditionalCast.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t PredicateExpressions.ConditionalCast.evaluate(_:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  __n128 v10;
  uint64_t result;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v7 = a2[4];
  v8 = a2[2];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v14 = *a1;
  result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, __n128))(v7 + 16))(&v14, v8, v7, v10);
  if (!v3)
  {
    v12 = a2[3];
    v13 = swift_dynamicCast();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a3, v13 ^ 1u, 1, v12);
  }
  return result;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.ConditionalCast<A, B>@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.ConditionalCast.evaluate(_:)(a1, a2, a3);
}

uint64_t PredicateExpressions.ForceCast.evaluate(_:)@<X0>(unint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __n128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  char *v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t AssociatedTypeWitness;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;

  v33 = a3;
  v35 = a2[3];
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v33 - v8;
  v10 = a2[4];
  v11 = a2[2];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v39 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v14);
  v16 = *a1;
  v36 = (char *)&v33 - v17;
  v37 = v16;
  result = (*(uint64_t (**)(unint64_t *, uint64_t, uint64_t, __n128))(v10 + 16))(&v37, v11, v10, v15);
  if (!v3)
  {
    v19 = v33;
    v20 = AssociatedTypeWitness;
    (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v13, v36, AssociatedTypeWitness);
    v21 = v35;
    v22 = swift_dynamicCast();
    v23 = *(_QWORD *)(v21 - 8);
    v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56);
    if ((v22 & 1) != 0)
    {
      v24(v9, 0, 1, v21);
      (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(v19, v9, v21);
      return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v36, v20);
    }
    else
    {
      v24(v9, 1, 1, v21);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      v37 = 0;
      v38 = 0xE000000000000000;
      _StringGuts.grow(_:)(41);
      swift_bridgeObjectRelease();
      v37 = 0xD00000000000001ELL;
      v38 = 0x8000000182307D70;
      v25 = v36;
      swift_getDynamicType();
      v26._countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      v27._countAndFlagsBits = 0x27206F742027;
      v27._object = (void *)0xE600000000000000;
      String.append(_:)(v27);
      v28._countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v28);
      swift_bridgeObjectRelease();
      v29._countAndFlagsBits = 39;
      v29._object = (void *)0xE100000000000000;
      String.append(_:)(v29);
      v30 = v37;
      v31 = v38;
      lazy protocol witness table accessor for type PredicateError and conformance PredicateError();
      swift_allocError();
      *(_QWORD *)v32 = v30;
      *(_QWORD *)(v32 + 8) = v31;
      *(_BYTE *)(v32 + 16) = 1;
      swift_willThrow();
      return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v25, v20);
    }
  }
  return result;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.ForceCast<A, B>@<X0>(unint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.ForceCast.evaluate(_:)(a1, a2, a3);
}

uint64_t PredicateExpressions.TypeCheck.evaluate(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  char v11;
  __n128 v12;
  uint64_t v13;
  int v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v17 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v7 + 32);
  v9 = *(_QWORD *)(v7 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = AssociatedTypeWitness;
  v12 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v18 = *a1;
  (*(void (**)(uint64_t *, uint64_t, uint64_t, __n128))(v8 + 16))(&v18, v9, v8, v12);
  if (!v2)
  {
    v13 = v17;
    v14 = swift_dynamicCast();
    v11 = v14;
    if (v14)
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v13);
  }
  return v11 & 1;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.TypeCheck<A, B>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = PredicateExpressions.TypeCheck.evaluate(_:)(a1, a2);
  if (!v3)
    *a3 = result & 1;
  return result;
}

uint64_t PredicateExpressions.ConditionalCast.description.getter(int a1)
{
  return PredicateExpressions.ConditionalCast.description.getter(a1, 43, 0xD000000000000017, (void *)0x8000000182307D90);
}

uint64_t PredicateExpressions.ForceCast.description.getter(int a1)
{
  return PredicateExpressions.ConditionalCast.description.getter(a1, 37, 0xD000000000000011, (void *)0x8000000182307DB0);
}

uint64_t PredicateExpressions.TypeCheck.description.getter(int a1)
{
  return PredicateExpressions.ConditionalCast.description.getter(a1, 37, 0xD000000000000011, (void *)0x8000000182307DD0);
}

uint64_t PredicateExpressions.ConditionalCast.description.getter(int a1, Swift::Int a2, uint64_t a3, void *a4)
{
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;

  _StringGuts.grow(_:)(a2);
  v6._countAndFlagsBits = a3;
  v6._object = a4;
  String.append(_:)(v6);
  _print_unlocked<A, B>(_:_:)();
  v7._countAndFlagsBits = 0x657269736564202CLL;
  v7._object = (void *)0xEF203A6570795464;
  String.append(_:)(v7);
  v8._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 41;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  return 0;
}

uint64_t PredicateExpressions.ConditionalCast<>.encode(to:)(_QWORD *a1)
{
  return PredicateExpressions.ConditionalCast<>.encode(to:)(a1);
}

{
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t PredicateExpressions.ConditionalCast<>.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  return PredicateExpressions.ConditionalCast<>.init(from:)(a1, a2, a3, a4);
}

{
  uint64_t v4;
  __n128 v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD, __n128);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[4];
  char *v26;

  v22 = a4;
  v23 = *(_QWORD *)(a2 - 8);
  v24 = a3;
  v7 = MEMORY[0x1E0C80A78](a1);
  v26 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v9(0, v7);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v18 - v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v4)
  {
    v19 = v13;
    v20 = v11;
    v21 = v10;
    v14 = v23;
    __swift_project_boxed_opaque_existential_1(v25, v25[3]);
    v15 = v26;
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    v16 = v19;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v19, v15, a2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(v22, v16, v21);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.ConditionalCast<A, B>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return PredicateExpressions.ConditionalCast<>.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8), a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.ConditionalCast<A, B>(_QWORD *a1)
{
  return PredicateExpressions.ConditionalCast<>.encode(to:)(a1);
}

uint64_t PredicateExpressions.ForceCast<>.encode(to:)(_QWORD *a1)
{
  return PredicateExpressions.ConditionalCast<>.encode(to:)(a1);
}

uint64_t PredicateExpressions.ForceCast<>.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  return PredicateExpressions.ConditionalCast<>.init(from:)(a1, a2, a3, a4);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.ForceCast<A, B>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return PredicateExpressions.ForceCast<>.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8), a4);
}

uint64_t PredicateExpressions.TypeCheck<>.encode(to:)(_QWORD *a1)
{
  return PredicateExpressions.ConditionalCast<>.encode(to:)(a1);
}

uint64_t PredicateExpressions.TypeCheck<>.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  return PredicateExpressions.ConditionalCast<>.init(from:)(a1, a2, a3, a4);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.ConditionalCast<A, B>(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.ConditionalCast<A, B>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for PredicateExpressions.ConditionalCast<A, B>, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.ConditionalCast<A, B>, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.ConditionalCast<A, B>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.ForceCast<A, B>(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.ConditionalCast<A, B>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for PredicateExpressions.ForceCast<A, B>, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.ForceCast<A, B>, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.ForceCast<A, B>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.ConditionalCast<A, B>(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  _QWORD v14[2];
  _QWORD v15[2];

  v10 = *a3;
  a1[1] = MEMORY[0x186DA9D64](a4);
  v12 = *(_QWORD *)(v10 + 16);
  v11 = *(_QWORD *)(v10 + 24);
  v15[0] = v12;
  v15[1] = v11;
  a1[2] = MEMORY[0x186DA9D64](a5, a2, v15);
  v14[0] = v12;
  v14[1] = v11;
  result = MEMORY[0x186DA9D64](a6, a2, v14);
  a1[3] = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.TypeCheck<A, B>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return PredicateExpressions.TypeCheck<>.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8), a4);
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.ConditionalCast(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_181B1772C + 4 * byte_1820DA888[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for PredicateExpressions.ConditionalCast(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.ForceCast<A, B>(_QWORD *a1)
{
  return protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.ConditionalCast<A, B>(a1);
}

uint64_t PersonNameComponents.init()@<X0>(uint64_t *a1@<X8>)
{
  id v2;
  uint64_t result;

  v2 = objc_msgSend(objc_allocWithZone((Class)NSPersonNameComponents), sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSPersonNameComponents>);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v2;
  *a1 = result;
  return result;
}

void PersonNameComponents.init(namePrefix:givenName:middleName:familyName:nameSuffix:nickname:phoneticRepresentation:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14)
{
  id v21;
  uint64_t v22;
  uint64_t v25;
  uint64_t v26;

  v25 = *a14;
  v21 = objc_msgSend(objc_allocWithZone((Class)NSPersonNameComponents), sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSPersonNameComponents>);
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = v21;
  *a9 = v22;
  specialized PersonNameComponents.namePrefix.setter(a1, a2, (SEL *)&selRef_setNamePrefix_);
  swift_bridgeObjectRelease();
  specialized PersonNameComponents.namePrefix.setter(a3, a4, (SEL *)&selRef_setGivenName_);
  swift_bridgeObjectRelease();
  specialized PersonNameComponents.namePrefix.setter(a5, a6, (SEL *)&selRef_setMiddleName_);
  swift_bridgeObjectRelease();
  specialized PersonNameComponents.namePrefix.setter(a7, a8, (SEL *)&selRef_setFamilyName_);
  swift_bridgeObjectRelease();
  specialized PersonNameComponents.namePrefix.setter(a10, a11, (SEL *)&selRef_setNameSuffix_);
  swift_bridgeObjectRelease();
  specialized PersonNameComponents.namePrefix.setter(a12, a13, (SEL *)&selRef_setNickname_);
  swift_bridgeObjectRelease();
  v26 = v25;
  PersonNameComponents.phoneticRepresentation.setter(&v26);
}

uint64_t PersonNameComponents.namePrefix.setter(uint64_t a1, uint64_t a2)
{
  specialized PersonNameComponents.namePrefix.setter(a1, a2, (SEL *)&selRef_setNamePrefix_);
  return swift_bridgeObjectRelease();
}

uint64_t PersonNameComponents.givenName.setter(uint64_t a1, uint64_t a2)
{
  specialized PersonNameComponents.namePrefix.setter(a1, a2, (SEL *)&selRef_setGivenName_);
  return swift_bridgeObjectRelease();
}

uint64_t PersonNameComponents.middleName.setter(uint64_t a1, uint64_t a2)
{
  specialized PersonNameComponents.namePrefix.setter(a1, a2, (SEL *)&selRef_setMiddleName_);
  return swift_bridgeObjectRelease();
}

uint64_t PersonNameComponents.familyName.setter(uint64_t a1, uint64_t a2)
{
  specialized PersonNameComponents.namePrefix.setter(a1, a2, (SEL *)&selRef_setFamilyName_);
  return swift_bridgeObjectRelease();
}

uint64_t PersonNameComponents.nameSuffix.setter(uint64_t a1, uint64_t a2)
{
  specialized PersonNameComponents.namePrefix.setter(a1, a2, (SEL *)&selRef_setNameSuffix_);
  return swift_bridgeObjectRelease();
}

uint64_t PersonNameComponents.nickname.setter(uint64_t a1, uint64_t a2)
{
  specialized PersonNameComponents.namePrefix.setter(a1, a2, (SEL *)&selRef_setNickname_);
  return swift_bridgeObjectRelease();
}

void PersonNameComponents.phoneticRepresentation.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v3 = *(void **)(*(_QWORD *)v1 + 16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSPersonNameComponents>);
    v4 = swift_allocObject();
    v5 = v3;
    objc_msgSend(v5, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSPersonNameComponents();
    swift_dynamicCast();
    *(_QWORD *)(v4 + 16) = v11;
    swift_release();
    *(_QWORD *)v1 = v4;

  }
  v6 = *(void **)(*(_QWORD *)v1 + 16);
  if (v2)
  {
    v7 = *(void **)(v2 + 16);
    v8 = v6;
    objc_msgSend(v7, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSPersonNameComponents();
    swift_dynamicCast();
    v9 = v11;
  }
  else
  {
    v10 = v6;
    v9 = 0;
  }
  objc_msgSend(v6, sel_setPhoneticRepresentation_, v9);
  swift_release();

}

id PersonNameComponents.namePrefix.getter()
{
  return PersonNameComponents.namePrefix.getter((SEL *)&selRef_namePrefix);
}

uint64_t (*PersonNameComponents.namePrefix.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  id v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  a1[2] = v1;
  v3 = *(id *)(*(_QWORD *)v1 + 16);
  v4 = objc_msgSend(v3, sel_namePrefix);
  if (v4)
  {
    v5 = v4;
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v8 = v7;

  }
  else
  {

    v6 = 0;
    v8 = 0;
  }
  *a1 = v6;
  a1[1] = v8;
  return PersonNameComponents.namePrefix.modify;
}

uint64_t PersonNameComponents.namePrefix.modify(uint64_t *a1, char a2)
{
  return PersonNameComponents.namePrefix.modify(a1, a2, (SEL *)&selRef_setNamePrefix_);
}

id PersonNameComponents.givenName.getter()
{
  return PersonNameComponents.namePrefix.getter((SEL *)&selRef_givenName);
}

uint64_t key path setter for PersonNameComponents.namePrefix : PersonNameComponents(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *a1;
  v7 = a1[1];
  swift_bridgeObjectRetain();
  specialized PersonNameComponents.namePrefix.setter(v6, v7, a5);
  return swift_bridgeObjectRelease();
}

uint64_t (*PersonNameComponents.givenName.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  id v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  a1[2] = v1;
  v3 = *(id *)(*(_QWORD *)v1 + 16);
  v4 = objc_msgSend(v3, sel_givenName);
  if (v4)
  {
    v5 = v4;
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v8 = v7;

  }
  else
  {

    v6 = 0;
    v8 = 0;
  }
  *a1 = v6;
  a1[1] = v8;
  return PersonNameComponents.givenName.modify;
}

uint64_t PersonNameComponents.givenName.modify(uint64_t *a1, char a2)
{
  return PersonNameComponents.namePrefix.modify(a1, a2, (SEL *)&selRef_setGivenName_);
}

uint64_t PersonNameComponents.namePrefix.modify(uint64_t *a1, char a2, SEL *a3)
{
  uint64_t v4;
  uint64_t v5;

  v5 = *a1;
  v4 = a1[1];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    specialized PersonNameComponents.namePrefix.setter(v5, v4, a3);
    swift_bridgeObjectRelease();
  }
  else
  {
    specialized PersonNameComponents.namePrefix.setter(*a1, v4, a3);
  }
  return swift_bridgeObjectRelease();
}

id PersonNameComponents.middleName.getter()
{
  return PersonNameComponents.namePrefix.getter((SEL *)&selRef_middleName);
}

uint64_t (*PersonNameComponents.middleName.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  id v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  a1[2] = v1;
  v3 = *(id *)(*(_QWORD *)v1 + 16);
  v4 = objc_msgSend(v3, sel_middleName);
  if (v4)
  {
    v5 = v4;
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v8 = v7;

  }
  else
  {

    v6 = 0;
    v8 = 0;
  }
  *a1 = v6;
  a1[1] = v8;
  return PersonNameComponents.middleName.modify;
}

uint64_t PersonNameComponents.middleName.modify(uint64_t *a1, char a2)
{
  return PersonNameComponents.namePrefix.modify(a1, a2, (SEL *)&selRef_setMiddleName_);
}

id PersonNameComponents.familyName.getter()
{
  return PersonNameComponents.namePrefix.getter((SEL *)&selRef_familyName);
}

uint64_t (*PersonNameComponents.familyName.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  id v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  a1[2] = v1;
  v3 = *(id *)(*(_QWORD *)v1 + 16);
  v4 = objc_msgSend(v3, sel_familyName);
  if (v4)
  {
    v5 = v4;
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v8 = v7;

  }
  else
  {

    v6 = 0;
    v8 = 0;
  }
  *a1 = v6;
  a1[1] = v8;
  return PersonNameComponents.familyName.modify;
}

uint64_t PersonNameComponents.familyName.modify(uint64_t *a1, char a2)
{
  return PersonNameComponents.namePrefix.modify(a1, a2, (SEL *)&selRef_setFamilyName_);
}

id PersonNameComponents.nameSuffix.getter()
{
  return PersonNameComponents.namePrefix.getter((SEL *)&selRef_nameSuffix);
}

uint64_t (*PersonNameComponents.nameSuffix.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  id v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  a1[2] = v1;
  v3 = *(id *)(*(_QWORD *)v1 + 16);
  v4 = objc_msgSend(v3, sel_nameSuffix);
  if (v4)
  {
    v5 = v4;
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v8 = v7;

  }
  else
  {

    v6 = 0;
    v8 = 0;
  }
  *a1 = v6;
  a1[1] = v8;
  return PersonNameComponents.nameSuffix.modify;
}

uint64_t PersonNameComponents.nameSuffix.modify(uint64_t *a1, char a2)
{
  return PersonNameComponents.namePrefix.modify(a1, a2, (SEL *)&selRef_setNameSuffix_);
}

id PersonNameComponents.nickname.getter()
{
  return PersonNameComponents.namePrefix.getter((SEL *)&selRef_nickname);
}

id PersonNameComponents.namePrefix.getter(SEL *a1)
{
  uint64_t v1;
  id v3;
  id v4;
  void *v5;
  id v6;

  v3 = *(id *)(*(_QWORD *)v1 + 16);
  v4 = objc_msgSend(v3, *a1);
  if (v4)
  {
    v5 = v4;
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);

  }
  else
  {

    return 0;
  }
  return v6;
}

void key path getter for PersonNameComponents.namePrefix : PersonNameComponents(uint64_t a1@<X0>, SEL *a2@<X3>, _QWORD *a3@<X8>)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(id *)(*(_QWORD *)a1 + 16);
  swift_retain();
  v6 = objc_msgSend(v5, *a2);
  if (v6)
  {
    v7 = v6;
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    v10 = v9;
    swift_release();

  }
  else
  {
    swift_release();

    v8 = 0;
    v10 = 0;
  }
  *a3 = v8;
  a3[1] = v10;
}

uint64_t (*PersonNameComponents.nickname.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  id v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  a1[2] = v1;
  v3 = *(id *)(*(_QWORD *)v1 + 16);
  v4 = objc_msgSend(v3, sel_nickname);
  if (v4)
  {
    v5 = v4;
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v8 = v7;

  }
  else
  {

    v6 = 0;
    v8 = 0;
  }
  *a1 = v6;
  a1[1] = v8;
  return PersonNameComponents.nickname.modify;
}

uint64_t PersonNameComponents.nickname.modify(uint64_t *a1, char a2)
{
  return PersonNameComponents.namePrefix.modify(a1, a2, (SEL *)&selRef_setNickname_);
}

void PersonNameComponents.phoneticRepresentation.getter(uint64_t *a1@<X8>)
{
  uint64_t v1;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(id *)(*(_QWORD *)v1 + 16);
  v4 = objc_msgSend(v3, sel_phoneticRepresentation);
  if (v4)
  {
    v5 = v4;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSPersonNameComponents>);
    v6 = swift_allocObject();
    objc_msgSend(v5, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSPersonNameComponents();
    swift_dynamicCast();
    *(_QWORD *)(v6 + 16) = v7;

  }
  else
  {

    v6 = 0;
  }
  *a1 = v6;
}

uint64_t static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  void *v2;
  uint64_t v4;
  uint64_t v5;

  if (result)
  {
    v2 = (void *)result;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSPersonNameComponents>);
    v4 = swift_allocObject();
    objc_msgSend(v2, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSPersonNameComponents();
    result = swift_dynamicCast();
    *(_QWORD *)(v4 + 16) = v5;
    *a2 = v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

NSPersonNameComponents __swiftcall PersonNameComponents._bridgeToObjectiveC()()
{
  uint64_t v0;
  void *v1;
  objc_class *v2;
  NSPersonNameComponents result;
  objc_class *v4;

  objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSPersonNameComponents();
  swift_dynamicCast();
  v2 = v4;
  result._private = v1;
  result.super.isa = v2;
  return result;
}

void (*PersonNameComponents.phoneticRepresentation.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  id v4;
  id v5;
  void *v6;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[6] = v1;
  v4 = *(id *)(*(_QWORD *)v1 + 16);
  v5 = objc_msgSend(v4, sel_phoneticRepresentation);
  if (v5)
  {
    v6 = v5;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSPersonNameComponents>);
    v7 = swift_allocObject();
    objc_msgSend(v6, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSPersonNameComponents();
    swift_dynamicCast();
    *(_QWORD *)(v7 + 16) = v3[5];

  }
  else
  {

    v7 = 0;
  }
  v3[4] = v7;
  return PersonNameComponents.phoneticRepresentation.modify;
}

void PersonNameComponents.phoneticRepresentation.modify(uint64_t a1, char a2)
{
  void *v2;
  uint64_t v3;

  v2 = *(void **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  if ((a2 & 1) != 0)
  {
    swift_retain();
    PersonNameComponents.phoneticRepresentation.setter(&v3);
    swift_release();
  }
  else
  {
    PersonNameComponents.phoneticRepresentation.setter(&v3);
  }
  free(v2);
}

void PersonNameComponents.hash(into:)()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(*(_QWORD *)v0 + 16);
  swift_retain();
  v2 = v1;
  NSObject.hash(into:)();
  swift_release();

}

id static PersonNameComponents.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)a1 + 16), sel_isEqual_, *(_QWORD *)(*(_QWORD *)a2 + 16));
}

Swift::Int PersonNameComponents.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  id v3;

  v1 = *v0;
  Hasher.init(_seed:)();
  v2 = *(void **)(v1 + 16);
  swift_retain();
  v3 = v2;
  NSObject.hash(into:)();
  swift_release();

  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PersonNameComponents()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  id v3;

  v1 = *v0;
  Hasher.init(_seed:)();
  v2 = *(void **)(v1 + 16);
  swift_retain();
  v3 = v2;
  NSObject.hash(into:)();
  swift_release();

  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance PersonNameComponents()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(*(_QWORD *)v0 + 16);
  swift_retain();
  v2 = v1;
  NSObject.hash(into:)();
  swift_release();

}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PersonNameComponents()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  id v3;

  v1 = *v0;
  Hasher.init(_seed:)();
  v2 = *(void **)(v1 + 16);
  swift_retain();
  v3 = v2;
  NSObject.hash(into:)();
  swift_release();

  return Hasher._finalize()();
}

id protocol witness for static Equatable.== infix(_:_:) in conformance PersonNameComponents(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)a1 + 16), sel_isEqual_, *(_QWORD *)(*(_QWORD *)a2 + 16));
}

uint64_t PersonNameComponents.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _OWORD *v31;
  __int128 v32;
  __int128 v33;
  void *v34;
  id v35;
  id v36;
  void *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _OWORD *v43;
  __int128 v44;
  __int128 v45;
  void *v46;
  id v47;
  id v48;
  void *v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _OWORD *v55;
  __int128 v56;
  __int128 v57;
  void *v58;
  id v59;
  id v60;
  void *v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  _OWORD *v67;
  __int128 v68;
  __int128 v69;
  void *v70;
  id v71;
  id v72;
  void *v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  _OWORD *v79;
  __int128 v80;
  __int128 v81;
  void *v82;
  id v83;
  id v84;
  void *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  _OWORD *v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  void *v98;
  Swift::String v99;
  Swift::String v100;
  Swift::String v101;
  uint64_t v102;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  __int128 v110;
  _BYTE v111[32];
  Swift::String v112;
  __int128 v113;
  _OWORD v114[2];
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  unint64_t v119;

  v107 = type metadata accessor for Mirror.AncestorRepresentation();
  v105 = *(_QWORD *)(v107 - 8);
  MEMORY[0x1E0C80A78](v107);
  v109 = (char *)&v104 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v104 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = type metadata accessor for Mirror();
  v106 = *(_QWORD *)(v108 - 8);
  MEMORY[0x1E0C80A78](v108);
  v6 = (char *)&v104 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v0;
  v8 = *(void **)(*v0 + 16);
  swift_retain_n();
  v9 = v8;
  v10 = objc_msgSend(v9, sel_namePrefix);
  v11 = MEMORY[0x1E0DEA968];
  if (v10)
  {
    v12 = v10;
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v15 = v14;
    swift_release();

    *((_QWORD *)&v114[0] + 1) = v11;
    *(_QWORD *)&v113 = v13;
    *((_QWORD *)&v113 + 1) = v15;
    v115 = xmmword_1820DABD0;
    outlined init with take of Any(&v113, &v116);
    v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
    v18 = v16[2];
    v17 = v16[3];
    if (v18 >= v17 >> 1)
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, v16);
    v16[2] = v18 + 1;
    v19 = &v16[6 * v18];
    v20 = v115;
    v21 = v117;
    v19[3] = v116;
    v19[4] = v21;
    v19[2] = v20;
  }
  else
  {
    swift_release();

    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v22 = *(void **)(v7 + 16);
  swift_retain();
  v23 = v22;
  v24 = objc_msgSend(v23, sel_givenName);
  if (v24)
  {
    v25 = v24;
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v28 = v27;
    swift_release();

    *((_QWORD *)&v114[0] + 1) = v11;
    *(_QWORD *)&v113 = v26;
    *((_QWORD *)&v113 + 1) = v28;
    v115 = xmmword_1820DABE0;
    outlined init with take of Any(&v113, &v116);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
    v30 = v16[2];
    v29 = v16[3];
    if (v30 >= v29 >> 1)
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v29 > 1), v30 + 1, 1, v16);
    v16[2] = v30 + 1;
    v31 = &v16[6 * v30];
    v32 = v115;
    v33 = v117;
    v31[3] = v116;
    v31[4] = v33;
    v31[2] = v32;
  }
  else
  {
    swift_release();

  }
  v34 = *(void **)(v7 + 16);
  swift_retain();
  v35 = v34;
  v36 = objc_msgSend(v35, sel_middleName);
  if (v36)
  {
    v37 = v36;
    v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
    v40 = v39;
    swift_release();

    *((_QWORD *)&v114[0] + 1) = v11;
    *(_QWORD *)&v113 = v38;
    *((_QWORD *)&v113 + 1) = v40;
    v115 = xmmword_1820DABF0;
    outlined init with take of Any(&v113, &v116);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
    v42 = v16[2];
    v41 = v16[3];
    if (v42 >= v41 >> 1)
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v41 > 1), v42 + 1, 1, v16);
    v16[2] = v42 + 1;
    v43 = &v16[6 * v42];
    v44 = v115;
    v45 = v117;
    v43[3] = v116;
    v43[4] = v45;
    v43[2] = v44;
  }
  else
  {
    swift_release();

  }
  v46 = *(void **)(v7 + 16);
  swift_retain();
  v47 = v46;
  v48 = objc_msgSend(v47, sel_familyName);
  if (v48)
  {
    v49 = v48;
    v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
    v52 = v51;
    swift_release();

    *((_QWORD *)&v114[0] + 1) = v11;
    *(_QWORD *)&v113 = v50;
    *((_QWORD *)&v113 + 1) = v52;
    v115 = xmmword_1820DAC00;
    outlined init with take of Any(&v113, &v116);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
    v54 = v16[2];
    v53 = v16[3];
    if (v54 >= v53 >> 1)
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v53 > 1), v54 + 1, 1, v16);
    v16[2] = v54 + 1;
    v55 = &v16[6 * v54];
    v56 = v115;
    v57 = v117;
    v55[3] = v116;
    v55[4] = v57;
    v55[2] = v56;
  }
  else
  {
    swift_release();

  }
  v58 = *(void **)(v7 + 16);
  swift_retain();
  v59 = v58;
  v60 = objc_msgSend(v59, sel_nameSuffix);
  if (v60)
  {
    v61 = v60;
    v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
    v64 = v63;
    swift_release();

    *((_QWORD *)&v114[0] + 1) = v11;
    *(_QWORD *)&v113 = v62;
    *((_QWORD *)&v113 + 1) = v64;
    v115 = xmmword_1820DAC10;
    outlined init with take of Any(&v113, &v116);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
    v66 = v16[2];
    v65 = v16[3];
    if (v66 >= v65 >> 1)
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v65 > 1), v66 + 1, 1, v16);
    v16[2] = v66 + 1;
    v67 = &v16[6 * v66];
    v68 = v115;
    v69 = v117;
    v67[3] = v116;
    v67[4] = v69;
    v67[2] = v68;
  }
  else
  {
    swift_release();

  }
  v70 = *(void **)(v7 + 16);
  swift_retain();
  v71 = v70;
  v72 = objc_msgSend(v71, sel_nickname);
  if (v72)
  {
    v73 = v72;
    v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(v72);
    v76 = v75;
    swift_release();

    *((_QWORD *)&v114[0] + 1) = v11;
    *(_QWORD *)&v113 = v74;
    *((_QWORD *)&v113 + 1) = v76;
    v115 = xmmword_1820DAC20;
    outlined init with take of Any(&v113, &v116);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
    v78 = v16[2];
    v77 = v16[3];
    if (v78 >= v77 >> 1)
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v77 > 1), v78 + 1, 1, v16);
    v16[2] = v78 + 1;
    v79 = &v16[6 * v78];
    v80 = v115;
    v81 = v117;
    v79[3] = v116;
    v79[4] = v81;
    v79[2] = v80;
  }
  else
  {
    swift_release();

  }
  v82 = *(void **)(v7 + 16);
  swift_retain();
  v83 = v82;
  v84 = objc_msgSend(v83, sel_phoneticRepresentation);
  if (v84)
  {
    v85 = v84;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSPersonNameComponents>);
    v86 = swift_allocObject();
    objc_msgSend(v85, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSPersonNameComponents();
    swift_dynamicCast();
    *(_QWORD *)(v86 + 16) = v113;
    swift_release();

    *((_QWORD *)&v114[0] + 1) = &type metadata for PersonNameComponents;
    *(_QWORD *)&v113 = v86;
    *(_QWORD *)&v115 = 0xD000000000000016;
    *((_QWORD *)&v115 + 1) = 0x8000000182307DF0;
    outlined init with take of Any(&v113, &v116);
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
    v88 = v16[2];
    v87 = v16[3];
    if (v88 >= v87 >> 1)
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v87 > 1), v88 + 1, 1, v16);
    v16[2] = v88 + 1;
    v89 = &v16[6 * v88];
    v90 = v115;
    v91 = v117;
    v89[3] = v116;
    v89[4] = v91;
    v89[2] = v90;
    swift_release();
  }
  else
  {
    swift_release();

  }
  *(_QWORD *)&v115 = v7;
  *(_QWORD *)&v113 = v16;
  v92 = *MEMORY[0x1E0DEDFB8];
  v93 = type metadata accessor for Mirror.DisplayStyle();
  v94 = *(_QWORD *)(v93 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v94 + 104))(v4, v92, v93);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v94 + 56))(v4, 0, 1, v93);
  (*(void (**)(char *, _QWORD, uint64_t))(v105 + 104))(v109, *MEMORY[0x1E0DEDFE8], v107);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [(label: String?, value: Any)] and conformance [A]();
  Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
  v95 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v106 + 8))(v6, v108);
  v118 = 0;
  v119 = 0xE000000000000000;
  swift_retain();
  dispatch thunk of _AnySequenceBox._makeIterator()();
  swift_release();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if (*((_QWORD *)&v117 + 1))
  {
    v109 = (char *)v95;
    do
    {
      v113 = v115;
      v114[0] = v116;
      v114[1] = v117;
      v112._countAndFlagsBits = 0;
      v112._object = (void *)0xE000000000000000;
      v96 = v115;
      v110 = v115;
      outlined init with copy of Any((uint64_t)v114, (uint64_t)v111);
      if (*((_QWORD *)&v96 + 1))
        v97 = v96;
      else
        v97 = 0;
      if (*((_QWORD *)&v96 + 1))
        v98 = (void *)*((_QWORD *)&v96 + 1);
      else
        v98 = (void *)0xE000000000000000;
      swift_bridgeObjectRetain();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v111);
      v99._countAndFlagsBits = v97;
      v99._object = v98;
      String.append(_:)(v99);
      swift_bridgeObjectRelease();
      v100._countAndFlagsBits = 8250;
      v100._object = (void *)0xE200000000000000;
      String.append(_:)(v100);
      _print_unlocked<A, B>(_:_:)();
      v101._countAndFlagsBits = 32;
      v101._object = (void *)0xE100000000000000;
      String.append(_:)(v101);
      String.append(_:)(v112);
      swift_bridgeObjectRelease();
      outlined destroy of (label: String?, value: Any)((uint64_t)&v113);
      dispatch thunk of _AnyIteratorBoxBase.next()();
    }
    while (*((_QWORD *)&v117 + 1));
    v102 = v118;
  }
  else
  {
    v102 = 0;
  }
  swift_release();
  swift_release();
  return v102;
}

uint64_t PersonNameComponents.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  id v9;
  id v10;
  ValueMetadata *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _OWORD *v31;
  __int128 v32;
  __int128 v33;
  void *v34;
  id v35;
  id v36;
  void *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _OWORD *v43;
  __int128 v44;
  __int128 v45;
  void *v46;
  id v47;
  id v48;
  void *v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _OWORD *v55;
  __int128 v56;
  __int128 v57;
  void *v58;
  id v59;
  id v60;
  void *v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  _OWORD *v67;
  __int128 v68;
  __int128 v69;
  void *v70;
  id v71;
  id v72;
  void *v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  _OWORD *v79;
  __int128 v80;
  __int128 v81;
  void *v82;
  id v83;
  id v84;
  void *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  _OWORD *v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD v96[2];
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  ValueMetadata *v101;

  v96[1] = a1;
  v2 = type metadata accessor for Mirror.AncestorRepresentation();
  v96[0] = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v96 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v96 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = *(id *)(*v1 + 16);
  swift_retain();
  v10 = objc_msgSend(v9, sel_namePrefix);
  v11 = (ValueMetadata *)MEMORY[0x1E0DEA968];
  if (v10)
  {
    v12 = v10;
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v15 = v14;
    swift_release();

    v101 = v11;
    *(_QWORD *)&v100 = v13;
    *((_QWORD *)&v100 + 1) = v15;
    v97 = xmmword_1820DABD0;
    outlined init with take of Any(&v100, &v98);
    v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
    v18 = v16[2];
    v17 = v16[3];
    if (v18 >= v17 >> 1)
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, v16);
    v16[2] = v18 + 1;
    v19 = &v16[6 * v18];
    v20 = v97;
    v21 = v99;
    v19[3] = v98;
    v19[4] = v21;
    v19[2] = v20;
  }
  else
  {
    swift_release();

    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v22 = *(void **)(v8 + 16);
  swift_retain();
  v23 = v22;
  v24 = objc_msgSend(v23, sel_givenName);
  if (v24)
  {
    v25 = v24;
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v28 = v27;
    swift_release();

    v101 = v11;
    *(_QWORD *)&v100 = v26;
    *((_QWORD *)&v100 + 1) = v28;
    v97 = xmmword_1820DABE0;
    outlined init with take of Any(&v100, &v98);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
    v30 = v16[2];
    v29 = v16[3];
    if (v30 >= v29 >> 1)
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v29 > 1), v30 + 1, 1, v16);
    v16[2] = v30 + 1;
    v31 = &v16[6 * v30];
    v32 = v97;
    v33 = v99;
    v31[3] = v98;
    v31[4] = v33;
    v31[2] = v32;
  }
  else
  {
    swift_release();

  }
  v34 = *(void **)(v8 + 16);
  swift_retain();
  v35 = v34;
  v36 = objc_msgSend(v35, sel_middleName);
  if (v36)
  {
    v37 = v36;
    v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
    v40 = v39;
    swift_release();

    v101 = v11;
    *(_QWORD *)&v100 = v38;
    *((_QWORD *)&v100 + 1) = v40;
    v97 = xmmword_1820DABF0;
    outlined init with take of Any(&v100, &v98);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
    v42 = v16[2];
    v41 = v16[3];
    if (v42 >= v41 >> 1)
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v41 > 1), v42 + 1, 1, v16);
    v16[2] = v42 + 1;
    v43 = &v16[6 * v42];
    v44 = v97;
    v45 = v99;
    v43[3] = v98;
    v43[4] = v45;
    v43[2] = v44;
  }
  else
  {
    swift_release();

  }
  v46 = *(void **)(v8 + 16);
  swift_retain();
  v47 = v46;
  v48 = objc_msgSend(v47, sel_familyName);
  if (v48)
  {
    v49 = v48;
    v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
    v52 = v51;
    swift_release();

    v101 = v11;
    *(_QWORD *)&v100 = v50;
    *((_QWORD *)&v100 + 1) = v52;
    v97 = xmmword_1820DAC00;
    outlined init with take of Any(&v100, &v98);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
    v54 = v16[2];
    v53 = v16[3];
    if (v54 >= v53 >> 1)
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v53 > 1), v54 + 1, 1, v16);
    v16[2] = v54 + 1;
    v55 = &v16[6 * v54];
    v56 = v97;
    v57 = v99;
    v55[3] = v98;
    v55[4] = v57;
    v55[2] = v56;
  }
  else
  {
    swift_release();

  }
  v58 = *(void **)(v8 + 16);
  swift_retain();
  v59 = v58;
  v60 = objc_msgSend(v59, sel_nameSuffix);
  if (v60)
  {
    v61 = v60;
    v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
    v64 = v63;
    swift_release();

    v101 = v11;
    *(_QWORD *)&v100 = v62;
    *((_QWORD *)&v100 + 1) = v64;
    v97 = xmmword_1820DAC10;
    outlined init with take of Any(&v100, &v98);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
    v66 = v16[2];
    v65 = v16[3];
    if (v66 >= v65 >> 1)
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v65 > 1), v66 + 1, 1, v16);
    v16[2] = v66 + 1;
    v67 = &v16[6 * v66];
    v68 = v97;
    v69 = v99;
    v67[3] = v98;
    v67[4] = v69;
    v67[2] = v68;
  }
  else
  {
    swift_release();

  }
  v70 = *(void **)(v8 + 16);
  swift_retain();
  v71 = v70;
  v72 = objc_msgSend(v71, sel_nickname);
  if (v72)
  {
    v73 = v72;
    v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(v72);
    v76 = v75;
    swift_release();

    v101 = v11;
    *(_QWORD *)&v100 = v74;
    *((_QWORD *)&v100 + 1) = v76;
    v97 = xmmword_1820DAC20;
    outlined init with take of Any(&v100, &v98);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
    v78 = v16[2];
    v77 = v16[3];
    if (v78 >= v77 >> 1)
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v77 > 1), v78 + 1, 1, v16);
    v16[2] = v78 + 1;
    v79 = &v16[6 * v78];
    v80 = v97;
    v81 = v99;
    v79[3] = v98;
    v79[4] = v81;
    v79[2] = v80;
  }
  else
  {
    swift_release();

  }
  v82 = *(void **)(v8 + 16);
  swift_retain();
  v83 = v82;
  v84 = objc_msgSend(v83, sel_phoneticRepresentation);
  if (v84)
  {
    v85 = v84;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSPersonNameComponents>);
    v86 = swift_allocObject();
    objc_msgSend(v85, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSPersonNameComponents();
    swift_dynamicCast();
    *(_QWORD *)(v86 + 16) = v100;
    swift_release();

    v101 = &type metadata for PersonNameComponents;
    *(_QWORD *)&v100 = v86;
    *(_QWORD *)&v97 = 0xD000000000000016;
    *((_QWORD *)&v97 + 1) = 0x8000000182307DF0;
    outlined init with take of Any(&v100, &v98);
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
    v88 = v16[2];
    v87 = v16[3];
    if (v88 >= v87 >> 1)
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v87 > 1), v88 + 1, 1, v16);
    v16[2] = v88 + 1;
    v89 = &v16[6 * v88];
    v90 = v97;
    v91 = v99;
    v89[3] = v98;
    v89[4] = v91;
    v89[2] = v90;
    swift_release();
  }
  else
  {
    swift_release();

  }
  *(_QWORD *)&v97 = v8;
  *(_QWORD *)&v100 = v16;
  v92 = *MEMORY[0x1E0DEDFB8];
  v93 = type metadata accessor for Mirror.DisplayStyle();
  v94 = *(_QWORD *)(v93 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v94 + 104))(v7, v92, v93);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v94 + 56))(v7, 0, 1, v93);
  (*(void (**)(char *, _QWORD, uint64_t))(v96[0] + 104))(v4, *MEMORY[0x1E0DEDFE8], v2);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [(label: String?, value: Any)] and conformance [A]();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t PersonNameComponents.debugDescription.getter()
{
  uint64_t *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  void *v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _OWORD *v32;
  __int128 v33;
  __int128 v34;
  void *v35;
  id v36;
  id v37;
  void *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _OWORD *v44;
  __int128 v45;
  __int128 v46;
  void *v47;
  id v48;
  id v49;
  void *v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _OWORD *v56;
  __int128 v57;
  __int128 v58;
  void *v59;
  id v60;
  id v61;
  void *v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  _OWORD *v68;
  __int128 v69;
  __int128 v70;
  void *v71;
  id v72;
  id v73;
  void *v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  _OWORD *v80;
  __int128 v81;
  __int128 v82;
  void *v83;
  id v84;
  id v85;
  void *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  _OWORD *v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  void *v99;
  Swift::String v100;
  Swift::String v101;
  Swift::String v102;
  uint64_t v103;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  _BYTE v112[32];
  Swift::String v113;
  __int128 v114;
  _OWORD v115[2];
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  unint64_t v120;

  v108 = type metadata accessor for Mirror.AncestorRepresentation();
  v106 = *(_QWORD *)(v108 - 8);
  MEMORY[0x1E0C80A78](v108);
  v2 = (char *)&v105 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v105 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = type metadata accessor for Mirror();
  v107 = *(_QWORD *)(v109 - 8);
  MEMORY[0x1E0C80A78](v109);
  v7 = (char *)&v105 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v0;
  v9 = *(void **)(*v0 + 16);
  swift_retain_n();
  v10 = v9;
  v11 = objc_msgSend(v10, sel_namePrefix);
  v12 = MEMORY[0x1E0DEA968];
  if (v11)
  {
    v13 = v11;
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v16 = v15;
    swift_release();

    *((_QWORD *)&v115[0] + 1) = v12;
    *(_QWORD *)&v114 = v14;
    *((_QWORD *)&v114 + 1) = v16;
    v116 = xmmword_1820DABD0;
    outlined init with take of Any(&v114, &v117);
    v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
    v19 = v17[2];
    v18 = v17[3];
    if (v19 >= v18 >> 1)
      v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v18 > 1), v19 + 1, 1, v17);
    v17[2] = v19 + 1;
    v20 = &v17[6 * v19];
    v21 = v116;
    v22 = v118;
    v20[3] = v117;
    v20[4] = v22;
    v20[2] = v21;
  }
  else
  {
    swift_release();

    v17 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v23 = *(void **)(v8 + 16);
  swift_retain();
  v24 = v23;
  v25 = objc_msgSend(v24, sel_givenName);
  if (v25)
  {
    v26 = v25;
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    v29 = v28;
    swift_release();

    *((_QWORD *)&v115[0] + 1) = v12;
    *(_QWORD *)&v114 = v27;
    *((_QWORD *)&v114 + 1) = v29;
    v116 = xmmword_1820DABE0;
    outlined init with take of Any(&v114, &v117);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
    v31 = v17[2];
    v30 = v17[3];
    if (v31 >= v30 >> 1)
      v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v30 > 1), v31 + 1, 1, v17);
    v17[2] = v31 + 1;
    v32 = &v17[6 * v31];
    v33 = v116;
    v34 = v118;
    v32[3] = v117;
    v32[4] = v34;
    v32[2] = v33;
  }
  else
  {
    swift_release();

  }
  v35 = *(void **)(v8 + 16);
  swift_retain();
  v36 = v35;
  v37 = objc_msgSend(v36, sel_middleName);
  if (v37)
  {
    v38 = v37;
    v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
    v41 = v40;
    swift_release();

    *((_QWORD *)&v115[0] + 1) = v12;
    *(_QWORD *)&v114 = v39;
    *((_QWORD *)&v114 + 1) = v41;
    v116 = xmmword_1820DABF0;
    outlined init with take of Any(&v114, &v117);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
    v43 = v17[2];
    v42 = v17[3];
    if (v43 >= v42 >> 1)
      v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v42 > 1), v43 + 1, 1, v17);
    v17[2] = v43 + 1;
    v44 = &v17[6 * v43];
    v45 = v116;
    v46 = v118;
    v44[3] = v117;
    v44[4] = v46;
    v44[2] = v45;
  }
  else
  {
    swift_release();

  }
  v47 = *(void **)(v8 + 16);
  swift_retain();
  v48 = v47;
  v49 = objc_msgSend(v48, sel_familyName);
  if (v49)
  {
    v50 = v49;
    v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
    v53 = v52;
    swift_release();

    *((_QWORD *)&v115[0] + 1) = v12;
    *(_QWORD *)&v114 = v51;
    *((_QWORD *)&v114 + 1) = v53;
    v116 = xmmword_1820DAC00;
    outlined init with take of Any(&v114, &v117);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
    v55 = v17[2];
    v54 = v17[3];
    if (v55 >= v54 >> 1)
      v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v54 > 1), v55 + 1, 1, v17);
    v17[2] = v55 + 1;
    v56 = &v17[6 * v55];
    v57 = v116;
    v58 = v118;
    v56[3] = v117;
    v56[4] = v58;
    v56[2] = v57;
  }
  else
  {
    swift_release();

  }
  v59 = *(void **)(v8 + 16);
  swift_retain();
  v60 = v59;
  v61 = objc_msgSend(v60, sel_nameSuffix);
  if (v61)
  {
    v62 = v61;
    v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
    v65 = v64;
    swift_release();

    *((_QWORD *)&v115[0] + 1) = v12;
    *(_QWORD *)&v114 = v63;
    *((_QWORD *)&v114 + 1) = v65;
    v116 = xmmword_1820DAC10;
    outlined init with take of Any(&v114, &v117);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
    v67 = v17[2];
    v66 = v17[3];
    if (v67 >= v66 >> 1)
      v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v66 > 1), v67 + 1, 1, v17);
    v17[2] = v67 + 1;
    v68 = &v17[6 * v67];
    v69 = v116;
    v70 = v118;
    v68[3] = v117;
    v68[4] = v70;
    v68[2] = v69;
  }
  else
  {
    swift_release();

  }
  v71 = *(void **)(v8 + 16);
  swift_retain();
  v72 = v71;
  v73 = objc_msgSend(v72, sel_nickname);
  if (v73)
  {
    v74 = v73;
    v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(v73);
    v77 = v76;
    swift_release();

    *((_QWORD *)&v115[0] + 1) = v12;
    *(_QWORD *)&v114 = v75;
    *((_QWORD *)&v114 + 1) = v77;
    v116 = xmmword_1820DAC20;
    outlined init with take of Any(&v114, &v117);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
    v79 = v17[2];
    v78 = v17[3];
    if (v79 >= v78 >> 1)
      v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v78 > 1), v79 + 1, 1, v17);
    v17[2] = v79 + 1;
    v80 = &v17[6 * v79];
    v81 = v116;
    v82 = v118;
    v80[3] = v117;
    v80[4] = v82;
    v80[2] = v81;
  }
  else
  {
    swift_release();

  }
  v83 = *(void **)(v8 + 16);
  swift_retain();
  v84 = v83;
  v85 = objc_msgSend(v84, sel_phoneticRepresentation);
  v110 = v8;
  if (v85)
  {
    v86 = v85;
    v105 = v7;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSPersonNameComponents>);
    v87 = swift_allocObject();
    objc_msgSend(v86, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSPersonNameComponents();
    swift_dynamicCast();
    *(_QWORD *)(v87 + 16) = v114;
    swift_release();

    *((_QWORD *)&v115[0] + 1) = &type metadata for PersonNameComponents;
    *(_QWORD *)&v114 = v87;
    *(_QWORD *)&v116 = 0xD000000000000016;
    *((_QWORD *)&v116 + 1) = 0x8000000182307DF0;
    outlined init with take of Any(&v114, &v117);
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
    v89 = v17[2];
    v88 = v17[3];
    v8 = v110;
    if (v89 >= v88 >> 1)
      v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v88 > 1), v89 + 1, 1, v17);
    v7 = v105;
    v17[2] = v89 + 1;
    v90 = &v17[6 * v89];
    v91 = v116;
    v92 = v118;
    v90[3] = v117;
    v90[4] = v92;
    v90[2] = v91;
    swift_release();
  }
  else
  {
    swift_release();

  }
  *(_QWORD *)&v116 = v8;
  *(_QWORD *)&v114 = v17;
  v93 = *MEMORY[0x1E0DEDFB8];
  v94 = type metadata accessor for Mirror.DisplayStyle();
  v95 = *(_QWORD *)(v94 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v95 + 104))(v5, v93, v94);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v95 + 56))(v5, 0, 1, v94);
  (*(void (**)(char *, _QWORD, uint64_t))(v106 + 104))(v2, *MEMORY[0x1E0DEDFE8], v108);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [(label: String?, value: Any)] and conformance [A]();
  Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
  v96 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v107 + 8))(v7, v109);
  v119 = 0;
  v120 = 0xE000000000000000;
  swift_retain();
  dispatch thunk of _AnySequenceBox._makeIterator()();
  swift_release();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if (*((_QWORD *)&v118 + 1))
  {
    v109 = v96;
    do
    {
      v114 = v116;
      v115[0] = v117;
      v115[1] = v118;
      v113._countAndFlagsBits = 0;
      v113._object = (void *)0xE000000000000000;
      v98 = (void *)*((_QWORD *)&v116 + 1);
      v97 = v116;
      v111 = v116;
      outlined init with copy of Any((uint64_t)v115, (uint64_t)v112);
      if (v98)
      {
        v99 = v98;
      }
      else
      {
        v97 = 0;
        v99 = (void *)0xE000000000000000;
      }
      swift_bridgeObjectRetain();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v112);
      v100._countAndFlagsBits = v97;
      v100._object = v99;
      String.append(_:)(v100);
      swift_bridgeObjectRelease();
      v101._countAndFlagsBits = 8250;
      v101._object = (void *)0xE200000000000000;
      String.append(_:)(v101);
      _print_unlocked<A, B>(_:_:)();
      v102._countAndFlagsBits = 32;
      v102._object = (void *)0xE100000000000000;
      String.append(_:)(v102);
      String.append(_:)(v113);
      swift_bridgeObjectRelease();
      outlined destroy of (label: String?, value: Any)((uint64_t)&v114);
      dispatch thunk of _AnyIteratorBoxBase.next()();
    }
    while (*((_QWORD *)&v118 + 1));
    v103 = v119;
  }
  else
  {
    v103 = 0;
  }
  swift_release();
  swift_release();
  swift_release();
  return v103;
}

unint64_t static PersonNameComponents._getObjectiveCType()()
{
  return type metadata accessor for NSPersonNameComponents();
}

uint64_t static PersonNameComponents._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSPersonNameComponents>);
  v4 = swift_allocObject();
  objc_msgSend(a1, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSPersonNameComponents();
  result = swift_dynamicCast();
  *(_QWORD *)(v4 + 16) = v6;
  *a2 = v4;
  return result;
}

uint64_t static PersonNameComponents._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v6;

  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSPersonNameComponents>);
  v4 = swift_allocObject();
  objc_msgSend(a1, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSPersonNameComponents();
  swift_dynamicCast();
  *(_QWORD *)(v4 + 16) = v6;
  *a2 = v4;
  return 1;
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance PersonNameComponents()
{
  uint64_t v0;
  uint64_t v2;

  objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSPersonNameComponents();
  swift_dynamicCast();
  return v2;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance PersonNameComponents(void *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSPersonNameComponents>);
  v4 = swift_allocObject();
  objc_msgSend(a1, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSPersonNameComponents();
  result = swift_dynamicCast();
  *(_QWORD *)(v4 + 16) = v6;
  *a2 = v4;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance PersonNameComponents(void *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v6;

  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSPersonNameComponents>);
  v4 = swift_allocObject();
  objc_msgSend(a1, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSPersonNameComponents();
  swift_dynamicCast();
  *(_QWORD *)(v4 + 16) = v6;
  *a2 = v4;
  return 1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance PersonNameComponents@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  void *v2;
  uint64_t v4;
  uint64_t v5;

  if (result)
  {
    v2 = (void *)result;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSPersonNameComponents>);
    v4 = swift_allocObject();
    objc_msgSend(v2, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSPersonNameComponents();
    result = swift_dynamicCast();
    *(_QWORD *)(v4 + 16) = v5;
    *a2 = v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t NSPersonNameComponents._toCustomAnyHashable()()
{
  void *v0;
  uint64_t v1;
  uint64_t v3;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSPersonNameComponents>);
  v1 = swift_allocObject();
  objc_msgSend(v0, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSPersonNameComponents();
  swift_dynamicCast();
  *(_QWORD *)(v1 + 16) = v3;
  lazy protocol witness table accessor for type PersonNameComponents and conformance PersonNameComponents();
  return AnyHashable.init<A>(_:)();
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSPersonNameComponents()
{
  id *v0;
  id v1;

  v1 = *v0;
  NSPersonNameComponents._toCustomAnyHashable()();

}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PersonNameComponents.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181B1AC58 + 4 * byte_1820DAC30[*v0]))(0x66657250656D616ELL, 0xEA00000000007869);
}

uint64_t sub_181B1AC58()
{
  return 0x6D614E6E65766967;
}

uint64_t sub_181B1AC74()
{
  return 0x614E656C6464696DLL;
}

uint64_t sub_181B1ACA0()
{
  return 0x66667553656D616ELL;
}

uint64_t sub_181B1ACB4()
{
  return 0x656D616E6B63696ELL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PersonNameComponents.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized PersonNameComponents.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

unint64_t protocol witness for CodingKey.init(intValue:) in conformance PersonNameComponents.CodingKeys@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized FloatingPointRoundingRule.CodingValue.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PersonNameComponents.CodingKeys()
{
  lazy protocol witness table accessor for type PersonNameComponents.CodingKeys and conformance PersonNameComponents.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PersonNameComponents.CodingKeys()
{
  lazy protocol witness table accessor for type PersonNameComponents.CodingKeys and conformance PersonNameComponents.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t PersonNameComponents.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  uint64_t v35;

  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PersonNameComponents.CodingKeys>);
  v5 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(objc_allocWithZone((Class)NSPersonNameComponents), sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSPersonNameComponents>);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v8;
  v35 = v9;
  v10 = a1[3];
  v28 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v10);
  lazy protocol witness table accessor for type PersonNameComponents.CodingKeys and conformance PersonNameComponents.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    swift_release();
  }
  else
  {
    v11 = v5;
    v34 = 0;
    v12 = v27;
    v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    specialized PersonNameComponents.namePrefix.setter(v13, v15, (SEL *)&selRef_setNamePrefix_);
    swift_bridgeObjectRelease();
    v33 = 1;
    v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    specialized PersonNameComponents.namePrefix.setter(v16, v17, (SEL *)&selRef_setGivenName_);
    swift_bridgeObjectRelease();
    v32 = 2;
    v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    specialized PersonNameComponents.namePrefix.setter(v18, v19, (SEL *)&selRef_setMiddleName_);
    swift_bridgeObjectRelease();
    v31 = 3;
    v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    specialized PersonNameComponents.namePrefix.setter(v20, v21, (SEL *)&selRef_setFamilyName_);
    swift_bridgeObjectRelease();
    v30 = 4;
    v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    specialized PersonNameComponents.namePrefix.setter(v22, v23, (SEL *)&selRef_setNameSuffix_);
    swift_bridgeObjectRelease();
    v29 = 5;
    v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    specialized PersonNameComponents.namePrefix.setter(v24, v25, (SEL *)&selRef_setNickname_);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v7, v12);
    *a2 = v35;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
}

uint64_t PersonNameComponents.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  void *v28;
  void *v29;
  id v30;
  id v31;
  void *v32;
  uint64_t v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;

  v3 = v2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PersonNameComponents.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PersonNameComponents.CodingKeys and conformance PersonNameComponents.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10 = *(id *)(v9 + 16);
  swift_retain();
  v11 = objc_msgSend(v10, sel_namePrefix);
  if (v11)
  {
    v12 = v11;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    swift_release();

    v35 = 0;
    KeyedEncodingContainer.encode(_:forKey:)();
    if (v2)
      goto LABEL_23;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();

  }
  v13 = *(void **)(v9 + 16);
  swift_retain();
  v14 = v13;
  v15 = objc_msgSend(v14, sel_givenName);
  if (v15)
  {
    v16 = v15;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    swift_release();

    v36 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    if (v3)
      goto LABEL_23;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();

  }
  v17 = *(void **)(v9 + 16);
  swift_retain();
  v18 = v17;
  v19 = objc_msgSend(v18, sel_middleName);
  if (v19)
  {
    v20 = v19;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    swift_release();

    v37 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    if (v3)
      goto LABEL_23;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();

  }
  v21 = *(void **)(v9 + 16);
  swift_retain();
  v22 = v21;
  v23 = objc_msgSend(v22, sel_familyName);
  if (v23)
  {
    v24 = v23;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    swift_release();

    v38 = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    if (v3)
      goto LABEL_23;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();

  }
  v25 = *(void **)(v9 + 16);
  swift_retain();
  v26 = v25;
  v27 = objc_msgSend(v26, sel_nameSuffix);
  if (v27)
  {
    v28 = v27;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    swift_release();

    v39 = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    if (!v3)
    {
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
LABEL_23:
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return swift_bridgeObjectRelease();
  }
  swift_release();

LABEL_21:
  v29 = *(void **)(v9 + 16);
  swift_retain();
  v30 = v29;
  v31 = objc_msgSend(v30, sel_nickname);
  if (v31)
  {
    v32 = v31;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
    swift_release();

    v40 = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    goto LABEL_23;
  }
  swift_release();

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PersonNameComponents@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return PersonNameComponents.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PersonNameComponents(_QWORD *a1)
{
  return PersonNameComponents.encode(to:)(a1);
}

void specialized PersonNameComponents.namePrefix.setter(uint64_t a1, uint64_t a2, SEL *a3)
{
  uint64_t v3;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v6 = *(void **)(*(_QWORD *)v3 + 16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSPersonNameComponents>);
    v7 = swift_allocObject();
    v8 = v6;
    objc_msgSend(v8, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSPersonNameComponents();
    swift_dynamicCast();
    *(_QWORD *)(v7 + 16) = v12;
    swift_release();
    *(_QWORD *)v3 = v7;

  }
  v9 = *(void **)(*(_QWORD *)v3 + 16);
  if (a2)
    v10 = (void *)String._bridgeToObjectiveCImpl()();
  else
    v10 = 0;
  v11 = v9;
  objc_msgSend(v11, *a3, v10);

}

unint64_t type metadata accessor for NSPersonNameComponents()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSPersonNameComponents;
  if (!lazy cache variable for type metadata for NSPersonNameComponents)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSPersonNameComponents);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PersonNameComponents and conformance PersonNameComponents()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents;
  if (!lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PersonNameComponents, &type metadata for PersonNameComponents);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents;
  if (!lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PersonNameComponents, &type metadata for PersonNameComponents);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents;
  if (!lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PersonNameComponents, &type metadata for PersonNameComponents);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents;
  if (!lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PersonNameComponents, &type metadata for PersonNameComponents);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents;
  if (!lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PersonNameComponents, &type metadata for PersonNameComponents);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents;
  if (!lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PersonNameComponents, &type metadata for PersonNameComponents);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PersonNameComponents.CodingKeys and conformance PersonNameComponents.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PersonNameComponents.CodingKeys and conformance PersonNameComponents.CodingKeys;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.CodingKeys and conformance PersonNameComponents.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PersonNameComponents.CodingKeys, &unk_1E0F22478);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.CodingKeys and conformance PersonNameComponents.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PersonNameComponents.CodingKeys and conformance PersonNameComponents.CodingKeys;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.CodingKeys and conformance PersonNameComponents.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PersonNameComponents.CodingKeys, &unk_1E0F22478);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.CodingKeys and conformance PersonNameComponents.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PersonNameComponents.CodingKeys and conformance PersonNameComponents.CodingKeys;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.CodingKeys and conformance PersonNameComponents.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PersonNameComponents.CodingKeys, &unk_1E0F22478);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.CodingKeys and conformance PersonNameComponents.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PersonNameComponents.CodingKeys and conformance PersonNameComponents.CodingKeys;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.CodingKeys and conformance PersonNameComponents.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PersonNameComponents.CodingKeys, &unk_1E0F22478);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.CodingKeys and conformance PersonNameComponents.CodingKeys);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for PersonNameComponents(_QWORD *a1)
{
  unint64_t result;

  a1[1] = lazy protocol witness table accessor for type PersonNameComponents and conformance PersonNameComponents();
  a1[2] = lazy protocol witness table accessor for type PersonNameComponents and conformance PersonNameComponents();
  a1[3] = lazy protocol witness table accessor for type PersonNameComponents and conformance PersonNameComponents();
  result = lazy protocol witness table accessor for type PersonNameComponents and conformance PersonNameComponents();
  a1[4] = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for PersonNameComponents(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type PersonNameComponents and conformance PersonNameComponents();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_181B1B858(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  key path getter for PersonNameComponents.namePrefix : PersonNameComponents(a1, (SEL *)&selRef_namePrefix, a2);
}

uint64_t sub_181B1B874(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PersonNameComponents.namePrefix : PersonNameComponents(a1, a2, a3, a4, (SEL *)&selRef_setNamePrefix_);
}

void sub_181B1B890(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  key path getter for PersonNameComponents.namePrefix : PersonNameComponents(a1, (SEL *)&selRef_givenName, a2);
}

uint64_t sub_181B1B8AC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PersonNameComponents.namePrefix : PersonNameComponents(a1, a2, a3, a4, (SEL *)&selRef_setGivenName_);
}

void sub_181B1B8C8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  key path getter for PersonNameComponents.namePrefix : PersonNameComponents(a1, (SEL *)&selRef_middleName, a2);
}

uint64_t sub_181B1B8E4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PersonNameComponents.namePrefix : PersonNameComponents(a1, a2, a3, a4, (SEL *)&selRef_setMiddleName_);
}

void sub_181B1B900(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  key path getter for PersonNameComponents.namePrefix : PersonNameComponents(a1, (SEL *)&selRef_familyName, a2);
}

uint64_t sub_181B1B91C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PersonNameComponents.namePrefix : PersonNameComponents(a1, a2, a3, a4, (SEL *)&selRef_setFamilyName_);
}

void sub_181B1B938(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  key path getter for PersonNameComponents.namePrefix : PersonNameComponents(a1, (SEL *)&selRef_nameSuffix, a2);
}

uint64_t sub_181B1B954(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PersonNameComponents.namePrefix : PersonNameComponents(a1, a2, a3, a4, (SEL *)&selRef_setNameSuffix_);
}

void sub_181B1B970(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  key path getter for PersonNameComponents.namePrefix : PersonNameComponents(a1, (SEL *)&selRef_nickname, a2);
}

uint64_t sub_181B1B98C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PersonNameComponents.namePrefix : PersonNameComponents(a1, a2, a3, a4, (SEL *)&selRef_setNickname_);
}

void sub_181B1B9A8(_QWORD *a1@<X8>)
{
  uint64_t v2;

  PersonNameComponents.phoneticRepresentation.getter(&v2);
  *a1 = v2;
}

void sub_181B1B9E8(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  swift_retain();
  PersonNameComponents.phoneticRepresentation.setter(&v1);
}

uint64_t storeEnumTagSinglePayload for PersonNameComponents.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_181B1BA6C + 4 * byte_1820DAC3B[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_181B1BAA0 + 4 * byte_1820DAC36[v4]))();
}

uint64_t sub_181B1BAA0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181B1BAA8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181B1BAB0);
  return result;
}

uint64_t sub_181B1BABC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181B1BAC4);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_181B1BAC8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181B1BAD0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for PersonNameComponents.CodingKeys()
{
  return &unk_1E0F22478;
}

uint64_t specialized PersonNameComponents.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x66657250656D616ELL && a2 == 0xEA00000000007869;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6D614E6E65766967 && a2 == 0xE900000000000065
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x614E656C6464696DLL && a2 == 0xEA0000000000656DLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x614E796C696D6166 && a2 == 0xEA0000000000656DLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x66667553656D616ELL && a2 == 0xEA00000000007869
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x656D616E6B63696ELL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t CalendarCache.fixed(identifier:locale:timeZone:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)(char *a1, __int128 *a2, __int128 *a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t *a8)
{
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t (*v16)();
  unint64_t *v17;
  void *v18;
  uint64_t v19;
  uint64_t (*v20)(char *, __int128 *, __int128 *, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t *, uint64_t, uint64_t);
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  __int128 v27;
  char v28;

  v12 = *a1;
  v22 = *a3;
  v23 = *a2;
  v13 = *a8;
  v14 = *((_BYTE *)a8 + 8);
  if (*a1)
  {
    v15 = type metadata accessor for _CalendarICU();
    v16 = type metadata accessor for _CalendarICU;
    v17 = &lazy protocol witness table cache variable for type _CalendarICU and conformance _CalendarICU;
    v18 = &protocol conformance descriptor for _CalendarICU;
  }
  else
  {
    v15 = type metadata accessor for _CalendarGregorian();
    v16 = type metadata accessor for _CalendarGregorian;
    v17 = (unint64_t *)&lazy protocol witness table cache variable for type _CalendarGregorian and conformance _CalendarGregorian;
    v18 = &protocol conformance descriptor for _CalendarGregorian;
  }
  v19 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(v17, (uint64_t (*)(uint64_t))v16, (uint64_t)v18);
  v28 = v12;
  v26 = v23;
  v27 = v22;
  v24 = v13;
  v25 = v14;
  v20 = *(uint64_t (**)(char *, __int128 *, __int128 *, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t *, uint64_t, uint64_t))(v19 + 16);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return v20(&v28, &v27, &v26, a4, a5 & 1, a6, a7 & 1, &v24, v15, v19);
}

ValueMetadata *type metadata accessor for CalendarCache()
{
  return &type metadata for CalendarCache;
}

uint64_t destroy for CalendarCache.State()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CalendarCache.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  swift_unknownObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CalendarCache.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for CalendarCache.State(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for CalendarCache.State(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 41))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CalendarCache.State(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 41) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

Swift::String __swiftcall Duration.formatted()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  Swift::String result;
  uint64_t v23;
  uint64_t v24;

  v2 = v1;
  v3 = v0;
  v4 = type metadata accessor for Duration.TimeFormatStyle(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (uint64_t *)((char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = (char *)v6
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fractionalSecondsLength: Int, roundFractionalSeconds: FloatingPointRoundingRule))
              + 48);
  *v6 = 0;
  v8 = *MEMORY[0x1E0DED4E8];
  v9 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v7, v8, v9);
  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0);
  swift_storeEnumTagMultiPayload();
  v10 = (char *)v6 + *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0) + 20);
  *(_QWORD *)v10 = 0;
  v10[8] = 1;
  if (one-time initialization token for cache != -1)
    swift_once();
  v11 = static LocaleCache.cache + 16;
  v12 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v12);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v11, &v24);
  os_unfair_lock_unlock(v12);
  swift_release_n();
  v13 = v24;
  v14 = lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating();
  v15 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0);
  *((_BYTE *)v6 + *(int *)(v15 + 20)) = 0;
  v16 = (_QWORD *)((char *)v6 + *(int *)(v15 + 24));
  *v16 = v13;
  v16[1] = v14;
  v17 = Duration.TimeFormatStyle.format(_:)(v3, v2);
  v19 = v18;
  outlined destroy of Duration.TimeFormatStyle((uint64_t)v6);
  v20 = v17;
  v21 = v19;
  result._object = v21;
  result._countAndFlagsBits = v20;
  return result;
}

uint64_t static Duration.bound(for:in:countingDown:roundingRule:)(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD), uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(_QWORD, _QWORD, _QWORD);
  uint64_t v25;
  void (*v26)(_QWORD, _QWORD, _QWORD);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(_QWORD, _QWORD, _QWORD);
  void (*v31)(_QWORD, _QWORD, _QWORD);
  uint64_t v32;
  void (*v33)(_QWORD, _QWORD, _QWORD);
  void (*v34)(_QWORD, _QWORD, _QWORD);
  uint64_t v35;
  void (*v36)(_QWORD, _QWORD, _QWORD);
  void (*v37)(_QWORD, _QWORD, _QWORD);
  uint64_t v38;
  uint64_t v39;
  void (*v40)(_QWORD, _QWORD, _QWORD);
  uint64_t v41;
  void (*v42)(_QWORD, _QWORD, _QWORD);
  void (*v43)(_QWORD, _QWORD, _QWORD);
  double v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(_QWORD, _QWORD, _QWORD);
  void (*v56)(_QWORD, _QWORD, _QWORD);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  void (*v66)(_QWORD, _QWORD, _QWORD);
  uint64_t v67;
  void (*v68)(_QWORD, _QWORD, _QWORD);
  uint64_t v69;
  void (*v70)(_QWORD, _QWORD, _QWORD);
  uint64_t v71;
  void (*v72)(_QWORD, _QWORD, _QWORD);
  char v73;
  uint64_t v74;
  void (*v75)(_QWORD, _QWORD, _QWORD);
  uint64_t v76;
  void (*v77)(_QWORD, _QWORD, _QWORD);
  uint64_t v78;
  uint64_t v79;
  void (*v80)(_QWORD, _QWORD, _QWORD);
  uint64_t v81;
  uint64_t v82;
  void (*v83)(_QWORD, _QWORD, _QWORD);
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(_QWORD, _QWORD, _QWORD);
  void (*v89)(_QWORD, _QWORD, _QWORD);
  uint64_t v90;
  void (*v91)(_QWORD, _QWORD, _QWORD);
  uint64_t v92;
  void (*v93)(_QWORD, _QWORD, _QWORD);
  char v94;
  uint64_t v95;
  void (*v96)(_QWORD, _QWORD, _QWORD);
  uint64_t v97;
  void (*v98)(_QWORD, _QWORD, _QWORD);
  char v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  int v104;
  char v105;
  uint64_t v106;
  void (*v107)(_QWORD, _QWORD, _QWORD);
  uint64_t v108;
  uint64_t v109;
  void (*v110)(_QWORD, _QWORD, _QWORD);
  uint64_t v111;
  uint64_t v112;
  int v113;
  unsigned __int8 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t (*v119)(char *, uint64_t);
  int v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void (*v128)(_QWORD, _QWORD, _QWORD);
  uint64_t v129;
  char v130;
  uint64_t v131;
  char *v132;
  int v133;
  char v134;
  uint64_t v135;
  void (*v136)(_QWORD, _QWORD, _QWORD);
  uint64_t v137;
  uint64_t v138;
  char v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  void (*v143)(_QWORD, _QWORD, _QWORD);
  uint64_t v144;
  char v145;
  char v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  void (*v151)(_QWORD, _QWORD, _QWORD);
  uint64_t v152;
  char v153;
  Swift::String v154;
  Swift::String v155;
  uint64_t v156;
  uint64_t v157;
  void (*v158)(_QWORD, _QWORD, _QWORD);
  char *v159;
  char *v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  void (*v167)(_QWORD, _QWORD, _QWORD);
  uint64_t v168;
  uint64_t v169;
  int v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  void (*v174)(_QWORD, _QWORD, _QWORD);
  unint64_t v175;
  unint64_t v176;

  v173 = a6;
  v170 = a5;
  v169 = type metadata accessor for FloatingPointRoundingRule();
  v172 = *(_QWORD *)(v169 - 8);
  MEMORY[0x1E0C80A78](v169);
  v160 = (char *)&v156 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v159 = (char *)&v156 - v12;
  MEMORY[0x1E0C80A78](v13);
  v162 = (char *)&v156 - v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (FloatingPointRoundingRule, Bool));
  MEMORY[0x1E0C80A78](v15);
  v171 = (char *)&v156 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v163 = (char *)&v156 - v18;
  static Duration.zero.getter();
  v19 = a3;
  v20 = a4;
  if ((static Duration.< infix(_:_:)() & 1) != 0)
  {
    v21 = static Duration.zero.getter();
    v19 = MEMORY[0x186DA6158](v21);
    v20 = v22;
  }
  v164 = a4;
  v165 = a3;
  v166 = v15;
  static Duration.zero.getter();
  v23 = a1;
  v24 = a2;
  if ((static Duration.< infix(_:_:)() & 1) != 0)
  {
    v25 = static Duration.zero.getter();
    v23 = MEMORY[0x186DA6158](v25);
    v24 = v26;
  }
  v174 = a2;
  v27 = Duration.components.getter();
  static Duration.zero.getter();
  if ((static Duration.< infix(_:_:)() & 1) != 0)
  {
    v28 = static Duration.zero.getter();
    MEMORY[0x186DA6158](v28);
  }
  v29 = Duration.components.getter();
  v31 = v30;
  if (!v29)
  {
    v175 = (unint64_t)v30;
    lazy protocol witness table accessor for type Int64 and conformance Int64();
    v32 = static Duration./ infix<A>(_:_:)();
    v34 = v37;
    v175 = (unint64_t)v31;
    v35 = static Duration.* infix<A>(_:_:)();
    goto LABEL_23;
  }
  if (!v30)
  {
    v38 = v29;
    if (v27 == 0x8000000000000000 && v29 == -1)
      goto LABEL_133;
    v39 = v27 / v29;
    v32 = Duration.init(secondsComponent:attosecondsComponent:)();
    v31 = v174;
    if ((unsigned __int128)(v38 * (__int128)v39) >> 64 == (v38 * v39) >> 63)
    {
      v34 = v40;
      v41 = Duration.init(secondsComponent:attosecondsComponent:)();
      v43 = v42;
      goto LABEL_24;
    }
    __break(1u);
    goto LABEL_127;
  }
  if ((static Duration.< infix(_:_:)() & 1) == 0)
  {
    static Duration./ infix(_:_:)();
    if ((~*(_QWORD *)&v44 & 0x7FF0000000000000) != 0)
    {
      if (v44 > -1.0)
      {
        if (v44 < 1.84467441e19)
        {
          v45 = (unint64_t)v44;
          v175 = (unint64_t)v44;
          v31 = (void (*)(_QWORD, _QWORD, _QWORD))lazy protocol witness table accessor for type UInt64 and conformance UInt64();
          v46 = static Duration.* infix<A>(_:_:)();
          MEMORY[0x186DA6158](v23, v24, v46, v47);
          static Duration./ infix(_:_:)();
          if ((~*(_QWORD *)&v48 & 0x7FF0000000000000) != 0)
          {
            if (v48 > -9.22337204e18)
            {
              if (v48 < 9.22337204e18)
              {
                v49 = (uint64_t)v48;
                v168 = (uint64_t)v48;
                Duration.init(secondsComponent:attosecondsComponent:)();
                v175 = v45;
                v161 = static Duration.* infix<A>(_:_:)();
                v51 = v50;
                Duration.init(secondsComponent:attosecondsComponent:)();
                v167 = v31;
                v175 = v49;
                lazy protocol witness table accessor for type Int64 and conformance Int64();
                v52 = static Duration.* infix<A>(_:_:)();
                v54 = MEMORY[0x186DA614C](v161, v51, v52, v53);
                v56 = v55;
                v175 = v45;
                v57 = static Duration.* infix<A>(_:_:)();
                v59 = v58;
                v175 = v168;
                v32 = v54;
                v60 = static Duration.* infix<A>(_:_:)();
                v62 = v61;
                v63 = v59;
                v34 = v56;
                v35 = MEMORY[0x186DA614C](v57, v63, v60, v62);
                goto LABEL_23;
              }
              goto LABEL_132;
            }
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
            goto LABEL_134;
          }
LABEL_130:
          __break(1u);
          goto LABEL_131;
        }
LABEL_129:
        __break(1u);
        goto LABEL_130;
      }
LABEL_128:
      __break(1u);
      goto LABEL_129;
    }
LABEL_127:
    __break(1u);
    goto LABEL_128;
  }
  v32 = static Duration.zero.getter();
  v34 = v33;
  v35 = static Duration.zero.getter();
LABEL_23:
  v41 = v35;
  v43 = v36;
  v31 = v174;
LABEL_24:
  static Duration.zero.getter();
  v64 = static Duration.< infix(_:_:)() & 1;
  static Duration.zero.getter();
  if (v64 == (static Duration.< infix(_:_:)() & 1))
  {
    v167 = v34;
  }
  else
  {
    v65 = static Duration.zero.getter();
    v41 = MEMORY[0x186DA6158](v65);
    v43 = v66;
    v67 = static Duration.zero.getter();
    v32 = MEMORY[0x186DA6158](v67);
    v167 = v68;
  }
  static Duration.zero.getter();
  v69 = v41;
  v70 = v43;
  if ((static Duration.< infix(_:_:)() & 1) != 0)
  {
    v71 = static Duration.zero.getter();
    v69 = MEMORY[0x186DA6158](v71);
    v70 = v72;
  }
  v168 = v32;
  static Duration.zero.getter();
  v73 = static Duration.< infix(_:_:)();
  v74 = a1;
  v75 = v31;
  if ((v73 & 1) != 0)
  {
    v76 = static Duration.zero.getter();
    v74 = MEMORY[0x186DA6158](v76);
    v75 = v77;
  }
  MEMORY[0x186DA6158](v69, v70, v74, v75);
  static Duration.zero.getter();
  if ((static Duration.< infix(_:_:)() & 1) != 0)
  {
    v78 = static Duration.zero.getter();
    MEMORY[0x186DA6158](v78);
  }
  static Duration.zero.getter();
  if ((static Duration.== infix(_:_:)() & 1) != 0)
  {
    v175 = 2;
    lazy protocol witness table accessor for type Int64 and conformance Int64();
    v80 = v167;
    v79 = v168;
    static Duration./ infix<A>(_:_:)();
    v175 = 2;
    v81 = static Duration.* infix<A>(_:_:)();
    MEMORY[0x186DA6158](v79, v80, v81, v82);
    static Duration.zero.getter();
    v83 = v174;
    LODWORD(v162) = static Duration.== infix(_:_:)();
    v84 = *MEMORY[0x1E0DED4F0];
    v167 = v83;
    v168 = a1;
  }
  else
  {
    static Duration.zero.getter();
    if ((static Duration.< infix(_:_:)() & 1) != 0)
    {
      v85 = static Duration.zero.getter();
      v19 = MEMORY[0x186DA6158](v85);
      v20 = v86;
    }
    v87 = MEMORY[0x186DA614C](v41, v43, v19, v20);
    v89 = v88;
    static Duration.zero.getter();
    v90 = v87;
    v91 = v89;
    if ((static Duration.< infix(_:_:)() & 1) != 0)
    {
      v92 = static Duration.zero.getter();
      v90 = MEMORY[0x186DA6158](v92);
      v91 = v93;
    }
    static Duration.zero.getter();
    v94 = static Duration.< infix(_:_:)();
    v95 = a1;
    v96 = v31;
    if ((v94 & 1) != 0)
    {
      v97 = static Duration.zero.getter();
      v95 = MEMORY[0x186DA6158](v97);
      v96 = v98;
    }
    v157 = v87;
    MEMORY[0x186DA6158](v90, v91, v95, v96);
    static Duration.zero.getter();
    v99 = static Duration.< infix(_:_:)();
    v158 = v89;
    if ((v99 & 1) != 0)
    {
      v100 = static Duration.zero.getter();
      MEMORY[0x186DA6158](v100);
    }
    v101 = v172;
    v102 = v162;
    v103 = v169;
    (*(void (**)(char *, uint64_t, uint64_t))(v172 + 16))(v162, v173, v169);
    v104 = (*(uint64_t (**)(char *, uint64_t))(v101 + 88))(v102, v103);
    v84 = *MEMORY[0x1E0DED4F0];
    v161 = v41;
    if (v104 == v84)
    {
      v105 = static Duration.< infix(_:_:)();
      v106 = v157;
      if ((v105 & 1) != 0)
      {
        v106 = v41;
        v107 = v43;
      }
      else
      {
        v107 = v158;
      }
      v108 = v106;
    }
    else if (v104 == *MEMORY[0x1E0DED4E8])
    {
      v108 = v41;
      v107 = v43;
      if ((static Duration.< infix(_:_:)() & 1) == 0)
      {
        v134 = static Duration.== infix(_:_:)();
        v108 = v157;
        v107 = v158;
        if ((v134 & 1) != 0)
        {
          v175 = 2;
          lazy protocol witness table accessor for type Int64 and conformance Int64();
          v136 = v167;
          v135 = v168;
          static Duration./ infix<A>(_:_:)();
          v175 = 2;
          v137 = static Duration.* infix<A>(_:_:)();
          MEMORY[0x186DA6158](v135, v136, v137, v138);
          static Duration.zero.getter();
          v139 = static Duration.== infix(_:_:)();
          if ((v139 & 1) != 0)
            v108 = v161;
          else
            v108 = v157;
          if ((v139 & 1) != 0)
            v107 = v43;
          else
            v107 = v158;
        }
      }
    }
    else if (v104 == *MEMORY[0x1E0DED500])
    {
      v144 = v157;
      v143 = v158;
      v145 = static Duration.< infix(_:_:)();
      if ((v145 & 1) != 0)
        v108 = v41;
      else
        v108 = v144;
      if ((v145 & 1) != 0)
        v107 = v43;
      else
        v107 = v143;
    }
    else if (v104 == *MEMORY[0x1E0DED508])
    {
      v152 = v157;
      v151 = v158;
      v153 = static Duration.< infix(_:_:)();
      if ((v153 & 1) != 0)
        v108 = v152;
      else
        v108 = v41;
      if ((v153 & 1) != 0)
        v107 = v151;
      else
        v107 = v43;
    }
    else
    {
      v108 = v41;
      v107 = v43;
      if (v104 != *MEMORY[0x1E0DED4D8])
      {
        v108 = v157;
        v107 = v158;
        if (v104 != *MEMORY[0x1E0DED4E0])
          goto LABEL_136;
      }
    }
    v175 = 2;
    lazy protocol witness table accessor for type Int64 and conformance Int64();
    v110 = v167;
    v109 = v168;
    static Duration./ infix<A>(_:_:)();
    v175 = 2;
    v111 = static Duration.* infix<A>(_:_:)();
    MEMORY[0x186DA6158](v109, v110, v111, v112);
    static Duration.zero.getter();
    v113 = static Duration.== infix(_:_:)();
    v167 = v107;
    v168 = v108;
    LODWORD(v162) = v113 ^ static Duration.== infix(_:_:)() ^ 1;
  }
  static Duration.zero.getter();
  v114 = static Duration.< infix(_:_:)();
  v115 = v166;
  v116 = *(int *)(v166 + 48);
  v117 = v172;
  v31 = *(void (**)(_QWORD, _QWORD, _QWORD))(v172 + 16);
  v118 = v163;
  v20 = v169;
  v31(v163, v173, v169);
  v118[v116] = (v114 & 1) == 0;
  v119 = *(uint64_t (**)(char *, uint64_t))(v117 + 88);
  v120 = v119(v118, v20);
  v121 = *MEMORY[0x1E0DED4E8];
  LODWORD(v163) = *MEMORY[0x1E0DED4E8];
  if (v120 == v84 || v120 == v121)
  {
    v124 = v84;
    if ((v170 & 1) != 0)
      v127 = -2;
    else
      v127 = 2;
    v175 = v127;
    lazy protocol witness table accessor for type Int and conformance Int();
    v125 = static Duration./ infix<A>(_:_:)();
    goto LABEL_58;
  }
  v123 = v164;
  v122 = v165;
  if (v120 == *MEMORY[0x1E0DED500])
  {
    v124 = v84;
    v125 = static Duration.zero.getter();
    if ((v170 & 1) == 0)
    {
LABEL_58:
      v122 = v125;
      v123 = v126;
LABEL_59:
      v128 = v167;
      goto LABEL_60;
    }
LABEL_53:
    v125 = MEMORY[0x186DA6158](v125);
    goto LABEL_58;
  }
  if (v120 != *MEMORY[0x1E0DED508])
  {
    if (v120 == *MEMORY[0x1E0DED4D8])
    {
      v124 = v84;
      static Duration.zero.getter();
      v128 = v167;
      v147 = static Duration.== infix(_:_:)();
      v148 = -1;
      if ((v170 & 1) != 0)
        v149 = -1;
      else
        v149 = 1;
      if ((v114 & 1) == 0)
        v148 = 1;
      if ((v147 & 1) == 0)
        v149 = 0;
      if (((v114 ^ v170) & 1) != 0)
        v150 = v149;
      else
        v150 = v148;
      v175 = v150;
      lazy protocol witness table accessor for type Int and conformance Int();
      v141 = static Duration.* infix<A>(_:_:)();
      goto LABEL_104;
    }
    if (v120 == *MEMORY[0x1E0DED4E0])
    {
      static Duration.zero.getter();
      if ((static Duration.== infix(_:_:)() & 1) != 0
        || (static Duration.zero.getter(), ((static Duration.< infix(_:_:)() ^ v170) & 1) == 0))
      {
        v124 = v84;
        v125 = static Duration.zero.getter();
        goto LABEL_58;
      }
      v124 = v84;
      static Duration.zero.getter();
      if ((static Duration.< infix(_:_:)() & 1) != 0)
        goto LABEL_59;
      v125 = static Duration.zero.getter();
      goto LABEL_53;
    }
LABEL_134:
    v31(v159, v173, v20);
    v175 = 0;
    v176 = 0xE000000000000000;
    _StringGuts.grow(_:)(36);
    v154._object = (void *)0x8000000182307E70;
    v154._countAndFlagsBits = 0xD000000000000022;
    String.append(_:)(v154);
    _print_unlocked<A, B>(_:_:)();
    goto LABEL_136;
  }
  v124 = v84;
  v128 = v167;
  if ((v170 & 1) == 0)
    goto LABEL_60;
  v141 = static Duration.zero.getter();
LABEL_104:
  v122 = v141;
  v123 = v142;
LABEL_60:
  v129 = MEMORY[0x186DA614C](v168, v128, v122, v123);
  static Duration.zero.getter();
  v130 = static Duration.< infix(_:_:)();
  v131 = *(int *)(v115 + 48);
  v132 = v171;
  v31(v171, v173, v20);
  v132[v131] = (v130 & 1) == 0;
  v133 = v119(v132, v20);
  if (v133 == v124)
  {
    static Duration.zero.getter();
    v140 = static Duration.< infix(_:_:)();
    goto LABEL_75;
  }
  if (v133 != (_DWORD)v163)
  {
    if (v133 == *MEMORY[0x1E0DED500])
      goto LABEL_64;
    if (v133 == *MEMORY[0x1E0DED508])
      goto LABEL_88;
    if (v133 == *MEMORY[0x1E0DED4D8])
    {
      static Duration.zero.getter();
      v140 = static Duration.< infix(_:_:)() ^ v170;
LABEL_75:
      (*(void (**)(char *, uint64_t))(v172 + 8))(v171, v20);
      if ((v140 & 1) != 0)
        return v129;
      goto LABEL_90;
    }
    if (v133 == *MEMORY[0x1E0DED4E0])
    {
      if ((v130 & 1) == 0)
      {
LABEL_64:
        (*(void (**)(char *, uint64_t))(v172 + 8))(v171, v20);
        if ((v170 & 1) == 0)
          return v129;
        goto LABEL_90;
      }
LABEL_88:
      LODWORD(v162) = v170;
      goto LABEL_89;
    }
    v31(v160, v173, v20);
    v175 = 0;
    v176 = 0xE000000000000000;
    _StringGuts.grow(_:)(36);
    v155._object = (void *)0x8000000182307E70;
    v155._countAndFlagsBits = 0xD000000000000022;
    String.append(_:)(v155);
    _print_unlocked<A, B>(_:_:)();
LABEL_136:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x181B1D344);
  }
LABEL_89:
  (*(void (**)(char *, uint64_t))(v172 + 8))(v171, v20);
  if ((v162 & 1) != 0)
    return v129;
LABEL_90:
  static Duration.== infix(_:_:)();
  return v129;
}

uint64_t static Duration.interval(fractionalSecondsLength:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 % 3;
  if (!(a1 % 3))
  {
    if (a1 >= 1)
    {
      if ((unint64_t)a1 < 4)
        return 1000000000000000;
      if ((unint64_t)a1 >= 7)
      {
        if ((unint64_t)a1 < 0xA)
          return 1000000000;
        goto LABEL_18;
      }
      return 1000000000000;
    }
    return 1000000000000000000;
  }
  if (v1 == 2)
  {
    if (a1 >= 1)
    {
      if ((unint64_t)a1 < 4)
        return 10000000000000000;
      if ((unint64_t)a1 >= 7)
      {
        if ((unint64_t)a1 <= 9)
          return 10000000000;
        goto LABEL_18;
      }
      return 10000000000000;
    }
    return 1000000000000000000;
  }
  if (v1 != 1)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (a1 < 1)
    return 1000000000000000000;
  if ((unint64_t)a1 < 4)
    return 100000000000000000;
  if ((unint64_t)a1 < 7)
    return 100000000000000;
  if ((unint64_t)a1 > 9)
  {
LABEL_18:
    pow(0.1, (double)a1);
    return static Duration.seconds(_:)();
  }
  return 100000000000;
}

uint64_t outlined destroy of Duration.TimeFormatStyle(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Duration.TimeFormatStyle(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id specialized Measurement<>.converted(to:)@<X0>(id a1@<X1>, void *a2@<X0>, uint64_t a3@<X8>, double a4@<D0>)
{
  id v7;
  double v8;
  id v9;
  id v10;
  double v11;

  if ((objc_msgSend(a1, sel_isEqual_) & 1) == 0)
  {
    v7 = objc_msgSend(a1, sel_converter);
    objc_msgSend(v7, sel_baseUnitValueFromValue_, a4);
    a4 = v8;

    swift_getObjectType();
    v9 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_baseUnit);
    LODWORD(v7) = objc_msgSend(a2, sel_isEqual_, v9);

    if (!(_DWORD)v7)
    {
      v10 = objc_msgSend(a2, sel_converter);
      objc_msgSend(v10, sel_valueFromBaseUnitValue_, a4);
      a4 = v11;

    }
  }
  *(_QWORD *)a3 = a2;
  *(double *)(a3 + 8) = a4;
  return a2;
}

uint64_t Measurement<>.AttributedStyle.format(_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  int v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  char v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  char *v62;
  _OWORD *v63;
  __int128 v64;
  __int128 v65;
  uint64_t *v66;
  os_unfair_lock_s *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  id v72;
  void *v73;
  uint64_t v74;
  void *v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char v97;
  char v98;
  char isUniquelyReferenced_nonNull_native;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  char *v112;
  _OWORD *v113;
  __int128 v114;
  __int128 v115;
  uint64_t *v116;
  os_unfair_lock_s *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  void *v125;
  void *v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  char v146;
  char v147;
  __int128 v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  __int128 v158;
  char *v159;
  _OWORD *v160;
  __int128 v161;
  __int128 v162;
  uint64_t *v163;
  os_unfair_lock_s *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  __int128 v168;
  uint64_t v169;
  void *v170;
  uint64_t v171;
  void *v172;
  void *v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  _OWORD *v192;
  char v193;
  char v194;
  __int128 v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  __int128 v203;
  _OWORD *v204;
  _OWORD *v205;
  __int128 v206;
  __int128 v207;
  uint64_t *v208;
  os_unfair_lock_s *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  __int128 v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t result;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  unint64_t v221;
  id v222;
  unint64_t v223;
  uint64_t v224;
  char *v225;
  _QWORD *v226;
  id v227;
  uint64_t v228;
  unint64_t v229;
  _OWORD *v230;
  char *v231;
  _OWORD *v232;
  _BYTE v233[24];
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  __int128 v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  __int128 v251;
  __int128 v252;
  __int128 v253[3];
  _BYTE v254[48];
  __int128 v255[3];
  _BYTE v256[64];
  __int128 v257;
  __int128 v258;
  __int128 v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;

  v4 = v3;
  v226 = a3;
  v241 = 0;
  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v225 = (char *)&v218 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v228 = v8;
  v9 = *(_QWORD *)(v8 + 16);
  v12 = type metadata accessor for Measurement<>.FormatStyle(0, v9, v10, v11);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v218 - v14;
  v17 = a1[1];
  *(_QWORD *)&v255[0] = *a1;
  v16 = *(void **)&v255[0];
  *((_QWORD *)&v255[0] + 1) = v17;
  type metadata accessor for Measurement(0, v9, v18, v19);
  v20 = v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
  v21 = swift_dynamicCast();
  v22 = v6;
  v224 = v6;
  v240 = v4;
  v227 = v20;
  if (!v21)
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v13 + 16))(v15, v4, v12);
    v72 = NSDimension.skeleton.getter();
    v27 = v4;
    if (v73)
    {
      LOBYTE(v255[0]) = *v15;
      v74 = *(int *)(v12 + 32);
      LOBYTE(v243) = v15[*(int *)(v12 + 36)];
      v75 = (void *)static Measurement<>.FormatStyle.skeleton(_:width:usage:numberFormatStyle:)((uint64_t)v72, v73, (unsigned __int8 *)v255, (unsigned __int8 *)&v243, (uint64_t)&v15[v74]);
      v77 = v76;
      swift_bridgeObjectRelease();
      (*(void (**)(_BYTE *, uint64_t))(v13 + 8))(v15, v12);
      v255[0] = *(_OWORD *)(v4 + 8);
      swift_unknownObjectRetain();
      v78 = specialized static ICUMeasurementNumberFormatter.create(for:locale:)(v75, v77, (uint64_t)v255);
      swift_unknownObjectRelease();
      v79 = v241;
      if (v78)
      {
        ICUNumberFormatterBase.attributedFormatPositions(_:)(v17, 0, 0x100000000);
        if (v81)
        {
          v83 = v80;
          v84 = v81;
          v85 = v82;
          v221 = v77;
          swift_bridgeObjectRetain();
          *(_QWORD *)v233 = v83;
          BigString.init(_:)();
          AttributedString.init(_:attributes:)(v253, MEMORY[0x1E0DEE9E0], MEMORY[0x1E0DEE9E8], (uint64_t *)v255);
          v38 = *(_QWORD *)&v255[0];
          v86 = *(_QWORD *)(v85 + 16);
          v40 = v228;
          if (v86)
          {
            *(_QWORD *)&v233[8] = v84;
            v220 = v78;
            v230 = (__int128 *)((char *)&v243 + 8);
            v231 = v256;
            swift_bridgeObjectRetain();
            v232 = (_OWORD *)lazy protocol witness table accessor for type String and conformance String();
            v219 = v85;
            v87 = v85 + 48;
            v222 = (id)0x8000000182307F60;
            v223 = 0x8000000182307FA0;
            do
            {
              v241 = v79;
              v238 = v87;
              v239 = v86;
              v88 = *(unsigned int *)(v87 - 16);
              v90 = *(_QWORD *)v233;
              v89 = *(_QWORD *)&v233[8];
              v243 = *(_OWORD *)v233;
              swift_bridgeObjectRetain();
              v91 = String.Index.init<A>(utf16Offset:in:)();
              *(_QWORD *)&v243 = v90;
              *((_QWORD *)&v243 + 1) = v89;
              swift_bridgeObjectRetain();
              v92 = String.Index.init<A>(utf16Offset:in:)();
              if (v92 >> 14 < v91 >> 14)
                goto LABEL_128;
              v93 = v92;
              swift_retain();
              specialized Range<>.init<A>(_range:in:)(v91, v93, (_OWORD *)v38, (unint64_t *)&v243);
              v94 = v245;
              if (v245 == 2)
                goto LABEL_136;
              v234 = *((_QWORD *)&v243 + 1);
              v235 = v243;
              *(_QWORD *)&v233[16] = v244;
              v95 = v246;
              v96 = v247;
              v236 = v249;
              v237 = v248;
              v252 = MEMORY[0x1E0DEE9E0];
              v97 = 0;
              v98 = 2;
              switch((int)v88)
              {
                case 0:
                  goto LABEL_36;
                case 1:
                  v97 = 1;
LABEL_36:
                  specialized AttributeContainer.subscript.setter(v97, (uint64_t)&type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart, (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart, 0xD00000000000001BLL, (unint64_t)v222);
                  break;
                case 2:
                  goto LABEL_41;
                case 6:
                  v98 = 0;
                  goto LABEL_41;
                case 7:
                  v98 = 3;
                  goto LABEL_41;
                case 8:
                  v98 = 4;
                  goto LABEL_41;
                case 10:
                  v98 = 1;
LABEL_41:
                  specialized AttributeContainer.subscript.setter(v98);
                  break;
                default:
                  break;
              }
              AttributeScopes.FoundationAttributes.MeasurementAttribute.Component.init(unumberFormatField:)(v88, &v243);
              if (v243 != 2)
                specialized AttributeContainer.subscript.setter(v243, (uint64_t)&type metadata for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component, (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component, 0xD00000000000001FLL, v223);
              v251 = v252;
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v79 = v241;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                v100 = *(_OWORD *)(v38 + 32);
                v271 = *(_OWORD *)(v38 + 16);
                v272 = v100;
                v273 = *(_OWORD *)(v38 + 48);
                v101 = v95;
                v102 = *(_QWORD *)(v38 + 64);
                v103 = *(_QWORD *)(v38 + 72);
                v229 = v96;
                v104 = *(_QWORD *)(v38 + 80);
                v105 = *(_QWORD *)(v38 + 88);
                type metadata accessor for AttributedString.Guts();
                swift_allocObject();
                outlined retain of Locale((uint64_t)&v271);
                swift_unknownObjectRetain();
                v106 = v103;
                v95 = v101;
                v107 = v104;
                v96 = v229;
                v108 = v105;
                v27 = v240;
                v109 = AttributedString.Guts.init(string:runs:)(&v271, v102, v106, v107, v108);
                swift_release();
                v38 = v109;
              }
              v110 = v239;
              v111 = *(_OWORD *)(v38 + 32);
              v268 = *(_OWORD *)(v38 + 16);
              v269 = v111;
              v270 = *(_OWORD *)(v38 + 48);
              BigString.startIndex.getter();
              BigString.endIndex.getter();
              v260 = v235;
              v261 = v234;
              v262 = *(_QWORD *)&v233[16];
              v263 = v94;
              v264 = v95;
              v265 = v96;
              v266 = v237;
              v267 = v236;
              BigString.unicodeScalars.getter();
              swift_retain_n();
              BigString.UnicodeScalarView.subscript.getter();
              swift_release();
              outlined release of Locale((uint64_t)v254);
              outlined release of Locale((uint64_t)v255);
              v113 = v230;
              v112 = v231;
              v114 = *((_OWORD *)v231 + 1);
              *v230 = *(_OWORD *)v231;
              v113[1] = v114;
              v115 = *((_OWORD *)v112 + 3);
              v113[2] = *((_OWORD *)v112 + 2);
              v113[3] = v115;
              *(_QWORD *)&v243 = v38;
              if (one-time initialization token for currentIdentity != -1)
                swift_once();
              v116 = (uint64_t *)(static AttributedString.currentIdentity + 16);
              v117 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
              swift_retain();
              os_unfair_lock_lock(v117);
              closure #1 in static AttributedString._nextModifyIdentity.getter(v116, &v242);
              os_unfair_lock_unlock(v117);
              swift_release();
              v118 = v242;
              v250 = v242;
              BigString.init()();
              v242 = 0;
              MEMORY[0x186DA9E90](&v242, 8);
              v119 = v242;
              type metadata accessor for AttributedString.Guts();
              v120 = swift_allocObject();
              if ((BigString.isEmpty.getter() & 1) == 0)
                goto LABEL_130;
              v121 = v258;
              *(_OWORD *)(v120 + 16) = v257;
              *(_OWORD *)(v120 + 32) = v121;
              *(_OWORD *)(v120 + 48) = v259;
              *(_QWORD *)(v120 + 64) = 0;
              *(_QWORD *)(v120 + 72) = 0;
              *(_QWORD *)(v120 + 80) = 0;
              *(_QWORD *)(v120 + 88) = v119;
              swift_release();
              LOBYTE(v242) = 0;
              AttributedSubstring.mergeAttributes(_:mergePolicy:)((uint64_t *)&v251, (char *)&v242);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (v250 != v118)
                goto LABEL_139;
              v87 = v238 + 24;
              v38 = v243;
              swift_release();
              v86 = v110 - 1;
            }
            while (v86);
            swift_bridgeObjectRelease();
            v40 = v228;
          }
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          goto LABEL_120;
        }
        goto LABEL_122;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      (*(void (**)(_BYTE *, uint64_t))(v13 + 8))(v15, v12);
    }
    if ((Measurement<>.FormatStyle.shouldConvertToBestUnit.getter(v12) & 1) != 0)
    {
      *(_QWORD *)&v255[0] = v227;
      *((_QWORD *)&v255[0] + 1) = v17;
      v122 = Measurement<>.FormatStyle.skeletonForUsage(_:)((uint64_t)v255, v12);
      if (v123)
      {
        v125 = (void *)v122;
        v126 = v123;
        v127 = v124;
        v255[0] = *(_OWORD *)(v4 + 8);
        swift_unknownObjectRetain();
        v128 = specialized static ICUMeasurementNumberFormatter.create(for:locale:)(v125, (unint64_t)v126, (uint64_t)v255);
        swift_unknownObjectRelease();
        if (v128)
        {
          ICUNumberFormatterBase.attributedFormatPositions(_:)(v127, 0, 0x100000000);
          if (v130)
          {
            v132 = v129;
            v133 = v130;
            v134 = v131;
            swift_bridgeObjectRetain();
            *(_QWORD *)&v233[8] = v133;
            BigString.init(_:)();
            AttributedString.init(_:attributes:)(v253, MEMORY[0x1E0DEE9E0], MEMORY[0x1E0DEE9E8], (uint64_t *)v255);
            v38 = *(_QWORD *)&v255[0];
            v135 = *(_QWORD *)(v134 + 16);
            v40 = v228;
            if (v135)
            {
              *(_QWORD *)v233 = v132;
              v221 = (unint64_t)v128;
              v222 = v126;
              v230 = (__int128 *)((char *)&v243 + 8);
              v231 = v256;
              swift_bridgeObjectRetain();
              v232 = (_OWORD *)lazy protocol witness table accessor for type String and conformance String();
              v220 = (char *)v134;
              v136 = v134 + 48;
              v229 = 0x8000000182307FA0;
              v223 = 0x8000000182307F60;
              do
              {
                v238 = v136;
                v239 = v135;
                v137 = *(unsigned int *)(v136 - 16);
                v139 = *(_QWORD *)v233;
                v138 = *(_QWORD *)&v233[8];
                v243 = *(_OWORD *)v233;
                swift_bridgeObjectRetain();
                v140 = String.Index.init<A>(utf16Offset:in:)();
                *(_QWORD *)&v243 = v139;
                *((_QWORD *)&v243 + 1) = v138;
                swift_bridgeObjectRetain();
                v141 = String.Index.init<A>(utf16Offset:in:)();
                if (v141 >> 14 < v140 >> 14)
                  goto LABEL_133;
                v142 = v141;
                swift_retain();
                specialized Range<>.init<A>(_range:in:)(v140, v142, (_OWORD *)v38, (unint64_t *)&v243);
                v143 = v245;
                if (v245 == 2)
                  goto LABEL_138;
                v234 = *((_QWORD *)&v243 + 1);
                v235 = v243;
                *(_QWORD *)&v233[16] = v244;
                v144 = v246;
                v145 = v247;
                v236 = v249;
                v237 = v248;
                v252 = MEMORY[0x1E0DEE9E0];
                v146 = 0;
                v147 = 2;
                switch((int)v137)
                {
                  case 0:
                    goto LABEL_66;
                  case 1:
                    v146 = 1;
LABEL_66:
                    specialized AttributeContainer.subscript.setter(v146, (uint64_t)&type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart, (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart, 0xD00000000000001BLL, v223);
                    break;
                  case 2:
                    goto LABEL_71;
                  case 6:
                    v147 = 0;
                    goto LABEL_71;
                  case 7:
                    v147 = 3;
                    goto LABEL_71;
                  case 8:
                    v147 = 4;
                    goto LABEL_71;
                  case 10:
                    v147 = 1;
LABEL_71:
                    specialized AttributeContainer.subscript.setter(v147);
                    break;
                  default:
                    break;
                }
                AttributeScopes.FoundationAttributes.MeasurementAttribute.Component.init(unumberFormatField:)(v137, &v243);
                if (v243 != 2)
                  specialized AttributeContainer.subscript.setter(v243, (uint64_t)&type metadata for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component, (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component, 0xD00000000000001FLL, v229);
                v251 = v252;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  v148 = *(_OWORD *)(v38 + 32);
                  v271 = *(_OWORD *)(v38 + 16);
                  v272 = v148;
                  v273 = *(_OWORD *)(v38 + 48);
                  v149 = v145;
                  v150 = *(_QWORD *)(v38 + 64);
                  v151 = *(_QWORD *)(v38 + 72);
                  v153 = *(_QWORD *)(v38 + 80);
                  v152 = *(_QWORD *)(v38 + 88);
                  type metadata accessor for AttributedString.Guts();
                  swift_allocObject();
                  outlined retain of Locale((uint64_t)&v271);
                  swift_unknownObjectRetain();
                  v154 = v151;
                  v145 = v149;
                  v155 = v152;
                  v27 = v240;
                  v156 = AttributedString.Guts.init(string:runs:)(&v271, v150, v154, v153, v155);
                  swift_release();
                  v38 = v156;
                }
                v157 = v241;
                v158 = *(_OWORD *)(v38 + 32);
                v268 = *(_OWORD *)(v38 + 16);
                v269 = v158;
                v270 = *(_OWORD *)(v38 + 48);
                BigString.startIndex.getter();
                BigString.endIndex.getter();
                v260 = v235;
                v261 = v234;
                v262 = *(_QWORD *)&v233[16];
                v263 = v143;
                v264 = v144;
                v265 = v145;
                v266 = v237;
                v267 = v236;
                BigString.unicodeScalars.getter();
                swift_retain_n();
                BigString.UnicodeScalarView.subscript.getter();
                swift_release();
                outlined release of Locale((uint64_t)v254);
                outlined release of Locale((uint64_t)v255);
                v160 = v230;
                v159 = v231;
                v161 = *((_OWORD *)v231 + 1);
                *v230 = *(_OWORD *)v231;
                v160[1] = v161;
                v162 = *((_OWORD *)v159 + 3);
                v160[2] = *((_OWORD *)v159 + 2);
                v160[3] = v162;
                *(_QWORD *)&v243 = v38;
                if (one-time initialization token for currentIdentity != -1)
                  swift_once();
                v163 = (uint64_t *)(static AttributedString.currentIdentity + 16);
                v164 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
                swift_retain();
                os_unfair_lock_lock(v164);
                closure #1 in static AttributedString._nextModifyIdentity.getter(v163, &v242);
                v241 = v157;
                os_unfair_lock_unlock(v164);
                swift_release();
                v165 = v242;
                v250 = v242;
                BigString.init()();
                v242 = 0;
                MEMORY[0x186DA9E90](&v242, 8);
                v166 = v242;
                type metadata accessor for AttributedString.Guts();
                v167 = swift_allocObject();
                if ((BigString.isEmpty.getter() & 1) == 0)
                  goto LABEL_134;
                v168 = v258;
                *(_OWORD *)(v167 + 16) = v257;
                *(_OWORD *)(v167 + 32) = v168;
                *(_OWORD *)(v167 + 48) = v259;
                *(_QWORD *)(v167 + 64) = 0;
                *(_QWORD *)(v167 + 72) = 0;
                *(_QWORD *)(v167 + 80) = 0;
                *(_QWORD *)(v167 + 88) = v166;
                swift_release();
                LOBYTE(v242) = 0;
                AttributedSubstring.mergeAttributes(_:mergePolicy:)((uint64_t *)&v251, (char *)&v242);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (v250 != v165)
                  goto LABEL_139;
                v136 = v238 + 24;
                v38 = v243;
                swift_release();
                v135 = v239 - 1;
              }
              while (v239 != 1);
              swift_bridgeObjectRelease();
              v40 = v228;
            }
            swift_bridgeObjectRelease();
            swift_release();
            goto LABEL_119;
          }
          goto LABEL_122;
        }
        swift_bridgeObjectRelease();
        v22 = v224;
      }
    }
LABEL_87:
    if ((Measurement<>.FormatStyle.shouldConvertToBestUnit.getter(v12) & 1) != 0)
    {
      *(_QWORD *)&v255[0] = v227;
      *((_QWORD *)&v255[0] + 1) = v17;
      v169 = Measurement<>.FormatStyle.skeletonForBaseUnit(_:)((uint64_t)v255, v12);
      if (v170)
      {
        v172 = (void *)v169;
        v173 = v170;
        v174 = v171;
        v255[0] = *(_OWORD *)(v27 + 8);
        swift_unknownObjectRetain();
        v175 = specialized static ICUMeasurementNumberFormatter.create(for:locale:)(v172, (unint64_t)v173, (uint64_t)v255);
        swift_unknownObjectRelease();
        if (v175)
        {
          ICUNumberFormatterBase.attributedFormatPositions(_:)(v174, 0, 0x100000000);
          if (v177)
          {
            v179 = v176;
            v180 = v177;
            v181 = v178;
            swift_bridgeObjectRetain();
            BigString.init(_:)();
            AttributedString.init(_:attributes:)(v253, MEMORY[0x1E0DEE9E0], MEMORY[0x1E0DEE9E8], (uint64_t *)v255);
            v38 = *(_QWORD *)&v255[0];
            v182 = *(_QWORD *)(v181 + 16);
            if (v182)
            {
              *(_QWORD *)&v233[8] = v179;
              *(_QWORD *)&v233[16] = v180;
              v221 = (unint64_t)v175;
              v222 = v173;
              v231 = (char *)&v243 + 8;
              v232 = v256;
              swift_bridgeObjectRetain();
              *(_QWORD *)v233 = lazy protocol witness table accessor for type String and conformance String();
              v220 = (char *)v181;
              v183 = v181 + 48;
              v229 = 0x8000000182307FA0;
              v223 = 0x8000000182307F60;
              do
              {
                v239 = v182;
                v184 = *(unsigned int *)(v183 - 16);
                v186 = *(_QWORD *)&v233[8];
                v185 = *(_QWORD *)&v233[16];
                v243 = *(_OWORD *)&v233[8];
                swift_bridgeObjectRetain();
                v187 = String.Index.init<A>(utf16Offset:in:)();
                *(_QWORD *)&v243 = v186;
                *((_QWORD *)&v243 + 1) = v185;
                swift_bridgeObjectRetain();
                v188 = String.Index.init<A>(utf16Offset:in:)();
                if (v188 >> 14 < v187 >> 14)
                  goto LABEL_131;
                v189 = v188;
                swift_retain();
                specialized Range<>.init<A>(_range:in:)(v187, v189, (_OWORD *)v38, (unint64_t *)&v243);
                v190 = v245;
                if (v245 == 2)
                  goto LABEL_137;
                v235 = *((_QWORD *)&v243 + 1);
                v236 = v243;
                v234 = v244;
                v191 = v246;
                v192 = (_OWORD *)v247;
                v237 = v249;
                v238 = v248;
                v252 = MEMORY[0x1E0DEE9E0];
                v193 = 0;
                v194 = 2;
                switch((int)v184)
                {
                  case 0:
                    goto LABEL_97;
                  case 1:
                    v193 = 1;
LABEL_97:
                    specialized AttributeContainer.subscript.setter(v193, (uint64_t)&type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart, (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart, 0xD00000000000001BLL, v223);
                    break;
                  case 2:
                    goto LABEL_102;
                  case 6:
                    v194 = 0;
                    goto LABEL_102;
                  case 7:
                    v194 = 3;
                    goto LABEL_102;
                  case 8:
                    v194 = 4;
                    goto LABEL_102;
                  case 10:
                    v194 = 1;
LABEL_102:
                    specialized AttributeContainer.subscript.setter(v194);
                    break;
                  default:
                    break;
                }
                AttributeScopes.FoundationAttributes.MeasurementAttribute.Component.init(unumberFormatField:)(v184, &v243);
                if (v243 != 2)
                  specialized AttributeContainer.subscript.setter(v243, (uint64_t)&type metadata for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component, (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component, 0xD00000000000001FLL, v229);
                v251 = v252;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  v195 = *(_OWORD *)(v38 + 32);
                  v271 = *(_OWORD *)(v38 + 16);
                  v272 = v195;
                  v273 = *(_OWORD *)(v38 + 48);
                  v196 = *(_QWORD *)(v38 + 64);
                  v197 = *(_QWORD *)(v38 + 72);
                  v230 = v192;
                  v199 = *(_QWORD *)(v38 + 80);
                  v198 = *(_QWORD *)(v38 + 88);
                  type metadata accessor for AttributedString.Guts();
                  swift_allocObject();
                  outlined retain of Locale((uint64_t)&v271);
                  swift_unknownObjectRetain();
                  v200 = v198;
                  v192 = v230;
                  v201 = AttributedString.Guts.init(string:runs:)(&v271, v196, v197, v199, v200);
                  swift_release();
                  v38 = v201;
                }
                v27 = v240;
                v202 = v241;
                v203 = *(_OWORD *)(v38 + 32);
                v268 = *(_OWORD *)(v38 + 16);
                v269 = v203;
                v270 = *(_OWORD *)(v38 + 48);
                BigString.startIndex.getter();
                BigString.endIndex.getter();
                v260 = v236;
                v261 = v235;
                v262 = v234;
                v263 = v190;
                v264 = v191;
                v265 = (unint64_t)v192;
                v266 = v238;
                v267 = v237;
                BigString.unicodeScalars.getter();
                swift_retain_n();
                BigString.UnicodeScalarView.subscript.getter();
                swift_release();
                outlined release of Locale((uint64_t)v254);
                outlined release of Locale((uint64_t)v255);
                v205 = v231;
                v204 = v232;
                v206 = v232[1];
                *(_OWORD *)v231 = *v232;
                v205[1] = v206;
                v207 = v204[3];
                v205[2] = v204[2];
                v205[3] = v207;
                *(_QWORD *)&v243 = v38;
                if (one-time initialization token for currentIdentity != -1)
                  swift_once();
                v208 = (uint64_t *)(static AttributedString.currentIdentity + 16);
                v209 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
                swift_retain();
                os_unfair_lock_lock(v209);
                closure #1 in static AttributedString._nextModifyIdentity.getter(v208, &v242);
                v241 = v202;
                os_unfair_lock_unlock(v209);
                swift_release();
                v210 = v242;
                v250 = v242;
                BigString.init()();
                v242 = 0;
                MEMORY[0x186DA9E90](&v242, 8);
                v211 = v242;
                type metadata accessor for AttributedString.Guts();
                v212 = swift_allocObject();
                if ((BigString.isEmpty.getter() & 1) == 0)
                  goto LABEL_132;
                v213 = v258;
                *(_OWORD *)(v212 + 16) = v257;
                *(_OWORD *)(v212 + 32) = v213;
                *(_OWORD *)(v212 + 48) = v259;
                *(_QWORD *)(v212 + 64) = 0;
                *(_QWORD *)(v212 + 72) = 0;
                *(_QWORD *)(v212 + 80) = 0;
                *(_QWORD *)(v212 + 88) = v211;
                swift_release();
                LOBYTE(v242) = 0;
                AttributedSubstring.mergeAttributes(_:mergePolicy:)((uint64_t *)&v251, (char *)&v242);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (v250 != v210)
                  goto LABEL_139;
                v183 += 24;
                v38 = v243;
                swift_release();
                v182 = v239 - 1;
              }
              while (v239 != 1);
              swift_bridgeObjectRelease();
              v40 = v228;
            }
            else
            {
              v40 = v228;
            }
            swift_bridgeObjectRelease();
            goto LABEL_118;
          }
LABEL_122:
          Double.description.getter();
          BigString.init(_:)();
          AttributedString.init(_:attributes:)(v255, MEMORY[0x1E0DEE9E0], MEMORY[0x1E0DEE9E8], (uint64_t *)&v243);
          swift_bridgeObjectRelease();
          goto LABEL_123;
        }
        swift_bridgeObjectRelease();
      }
    }
    v214 = v225;
    v40 = v228;
    (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v225, v27, v228);
    goto LABEL_126;
  }
  v23 = (void *)v243;
  v255[0] = v243;
  v24 = Measurement<>.FormatStyle.skeletonForUsage(_:)((uint64_t)v255, v12);
  v27 = v4;
  if (!v25)
  {
LABEL_54:

    goto LABEL_87;
  }
  v28 = (void *)v24;
  v29 = v25;
  v30 = v26;
  v255[0] = *(_OWORD *)(v4 + 8);
  swift_unknownObjectRetain();
  v31 = specialized static ICUMeasurementNumberFormatter.create(for:locale:)(v28, v29, (uint64_t)v255);
  swift_unknownObjectRelease();
  if (!v31)
  {
    swift_bridgeObjectRelease();
    goto LABEL_54;
  }
  ICUNumberFormatterBase.attributedFormatPositions(_:)(v30, 0, 0x100000000);
  if (!v33)
  {
    Double.description.getter();
    BigString.init(_:)();
    AttributedString.init(_:attributes:)(v255, MEMORY[0x1E0DEE9E0], MEMORY[0x1E0DEE9E8], (uint64_t *)&v243);
    swift_bridgeObjectRelease();

LABEL_123:
    swift_release();
    v38 = v243;
    v214 = v225;
    v40 = v228;
    goto LABEL_124;
  }
  v35 = v32;
  v36 = v33;
  v37 = v34;
  v220 = v31;
  v221 = v29;
  v222 = v23;
  swift_bridgeObjectRetain();
  *(_QWORD *)&v233[8] = v35;
  BigString.init(_:)();
  AttributedString.init(_:attributes:)(v253, MEMORY[0x1E0DEE9E0], MEMORY[0x1E0DEE9E8], (uint64_t *)v255);
  v38 = *(_QWORD *)&v255[0];
  v39 = *(_QWORD *)(v37 + 16);
  v40 = v228;
  if (!v39)
    goto LABEL_82;
  *(_QWORD *)v233 = v36;
  v230 = (__int128 *)((char *)&v243 + 8);
  v231 = v256;
  swift_bridgeObjectRetain();
  v232 = (_OWORD *)lazy protocol witness table accessor for type String and conformance String();
  v219 = v37;
  v41 = v37 + 48;
  v229 = 0x8000000182307FA0;
  v223 = 0x8000000182307F60;
  v42 = *(_QWORD *)&v233[8];
  do
  {
    v43 = *(unsigned int *)(v41 - 16);
    v239 = v41;
    v44 = *(_QWORD *)v233;
    *(_QWORD *)&v243 = v42;
    *((_QWORD *)&v243 + 1) = *(_QWORD *)v233;
    swift_bridgeObjectRetain();
    v45 = String.Index.init<A>(utf16Offset:in:)();
    *(_QWORD *)&v243 = v42;
    *((_QWORD *)&v243 + 1) = v44;
    swift_bridgeObjectRetain();
    v46 = String.Index.init<A>(utf16Offset:in:)();
    if (v46 >> 14 < v45 >> 14)
    {
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x181B1EFB8);
    }
    v47 = v46;
    swift_retain();
    specialized Range<>.init<A>(_range:in:)(v45, v47, (_OWORD *)v38, (unint64_t *)&v243);
    v48 = v245;
    if (v245 == 2)
      goto LABEL_135;
    v235 = *((_QWORD *)&v243 + 1);
    v236 = v243;
    v234 = v244;
    v50 = v246;
    v49 = v247;
    v237 = v249;
    v238 = v248;
    v252 = MEMORY[0x1E0DEE9E0];
    v51 = 0;
    v52 = 2;
    switch((int)v43)
    {
      case 0:
        goto LABEL_11;
      case 1:
        v51 = 1;
LABEL_11:
        specialized AttributeContainer.subscript.setter(v51, (uint64_t)&type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart, (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart, 0xD00000000000001BLL, v223);
        break;
      case 2:
        goto LABEL_16;
      case 6:
        v52 = 0;
        goto LABEL_16;
      case 7:
        v52 = 3;
        goto LABEL_16;
      case 8:
        v52 = 4;
        goto LABEL_16;
      case 10:
        v52 = 1;
LABEL_16:
        specialized AttributeContainer.subscript.setter(v52);
        break;
      default:
        break;
    }
    AttributeScopes.FoundationAttributes.MeasurementAttribute.Component.init(unumberFormatField:)(v43, &v243);
    if (v243 != 2)
      specialized AttributeContainer.subscript.setter(v243, (uint64_t)&type metadata for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component, (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component, 0xD00000000000001FLL, v229);
    v251 = v252;
    v53 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v233[16] = v39;
    if ((v53 & 1) == 0)
    {
      v54 = *(_OWORD *)(v38 + 32);
      v271 = *(_OWORD *)(v38 + 16);
      v272 = v54;
      v273 = *(_OWORD *)(v38 + 48);
      v55 = *(_QWORD *)(v38 + 64);
      v56 = *(_QWORD *)(v38 + 72);
      v58 = *(_QWORD *)(v38 + 80);
      v57 = *(_QWORD *)(v38 + 88);
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)&v271);
      swift_unknownObjectRetain();
      v59 = AttributedString.Guts.init(string:runs:)(&v271, v55, v56, v58, v57);
      swift_release();
      v38 = v59;
    }
    v27 = v240;
    v60 = v241;
    v61 = *(_OWORD *)(v38 + 32);
    v268 = *(_OWORD *)(v38 + 16);
    v269 = v61;
    v270 = *(_OWORD *)(v38 + 48);
    BigString.startIndex.getter();
    BigString.endIndex.getter();
    v260 = v236;
    v261 = v235;
    v262 = v234;
    v263 = v48;
    v264 = v50;
    v265 = v49;
    v266 = v238;
    v267 = v237;
    BigString.unicodeScalars.getter();
    swift_retain_n();
    BigString.UnicodeScalarView.subscript.getter();
    swift_release();
    outlined release of Locale((uint64_t)v254);
    outlined release of Locale((uint64_t)v255);
    v63 = v230;
    v62 = v231;
    v64 = *((_OWORD *)v231 + 1);
    *v230 = *(_OWORD *)v231;
    v63[1] = v64;
    v65 = *((_OWORD *)v62 + 3);
    v63[2] = *((_OWORD *)v62 + 2);
    v63[3] = v65;
    *(_QWORD *)&v243 = v38;
    if (one-time initialization token for currentIdentity != -1)
      swift_once();
    v66 = (uint64_t *)(static AttributedString.currentIdentity + 16);
    v67 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
    swift_retain();
    os_unfair_lock_lock(v67);
    closure #1 in static AttributedString._nextModifyIdentity.getter(v66, &v242);
    v241 = v60;
    os_unfair_lock_unlock(v67);
    swift_release();
    v68 = v242;
    v250 = v242;
    BigString.init()();
    v242 = 0;
    MEMORY[0x186DA9E90](&v242, 8);
    v69 = v242;
    type metadata accessor for AttributedString.Guts();
    v70 = swift_allocObject();
    if ((BigString.isEmpty.getter() & 1) == 0)
      goto LABEL_129;
    v71 = v258;
    *(_OWORD *)(v70 + 16) = v257;
    *(_OWORD *)(v70 + 32) = v71;
    *(_OWORD *)(v70 + 48) = v259;
    *(_QWORD *)(v70 + 64) = 0;
    *(_QWORD *)(v70 + 72) = 0;
    *(_QWORD *)(v70 + 80) = 0;
    *(_QWORD *)(v70 + 88) = v69;
    swift_release();
    LOBYTE(v242) = 0;
    AttributedSubstring.mergeAttributes(_:mergePolicy:)((uint64_t *)&v251, (char *)&v242);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v250 != v68)
      goto LABEL_139;
    v41 = v239 + 24;
    v38 = v243;
    swift_release();
    v42 = *(_QWORD *)&v233[8];
    v39 = *(_QWORD *)&v233[16] - 1;
  }
  while (*(_QWORD *)&v233[16] != 1);
  swift_bridgeObjectRelease();
  v40 = v228;
LABEL_82:
  swift_bridgeObjectRelease();

LABEL_118:
  swift_release();
LABEL_119:
  swift_bridgeObjectRelease();
LABEL_120:
  swift_bridgeObjectRelease();
  v214 = v225;
LABEL_124:
  v22 = v224;
  (*(void (**)(char *, uint64_t, uint64_t))(v224 + 16))(v214, v27, v40);
  if (v38)
  {
    result = (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v214, v40);
    *v226 = v38;
    return result;
  }
LABEL_126:
  *(_QWORD *)&v243 = v227;
  *((_QWORD *)&v243 + 1) = v17;
  Measurement<>.AttributedStyle.formatAsDescription(_:)((uint64_t)&v243, v40, v215, v216, v226);
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v214, v40);
}

uint64_t Measurement<>.AttributedStyle.formatAsDescription(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  char *v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  ValueMetadata *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  _OWORD *v49;
  uint64_t *v50;
  __int128 v51;
  __int128 v52;
  uint64_t *v53;
  os_unfair_lock_s *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  void *v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  _OWORD *v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  id v79;
  __int128 v80;
  _OWORD *v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  ValueMetadata *v88;
  ValueMetadata *v89;
  _OWORD *v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  uint64_t result;
  uint64_t v96;
  uint64_t v97;
  _QWORD v98[7];
  int v99;
  uint64_t v100;
  char *v101;
  unint64_t v102;
  id v103;
  _QWORD *v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t *v108;
  _OWORD *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  ValueMetadata *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _OWORD *v120;
  uint64_t v121;
  uint64_t v122;
  ValueMetadata *v123;
  unint64_t v124;
  __int128 v125;
  ValueMetadata *v126;
  uint64_t v127;
  uint64_t v128;
  __int128 v129[3];
  uint64_t v130;
  __int128 v131[3];
  _OWORD v132[7];
  __int128 v133[3];
  __int128 v134[6];
  _OWORD v135[3];
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  _OWORD v149[3];
  _OWORD v150[3];
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  ValueMetadata *v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  ValueMetadata *v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  _OWORD v162[3];
  uint64_t v163;

  v119 = 0;
  v163 = *MEMORY[0x1E0C80C00];
  v103 = *(id *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *v5;
  LOBYTE(v131[0]) = *v5;
  v9 = type metadata accessor for Measurement<>.FormatStyle(0, *(_QWORD *)(a2 + 16), a3, a4);
  v10 = *(int *)(v9 + 32);
  v11 = v5[*(int *)(v9 + 36)];
  LOBYTE(v120) = v11;
  v12 = (uint64_t)&v5[v10];
  v13 = (void *)static Measurement<>.FormatStyle.skeleton(_:width:usage:numberFormatStyle:)(0, 0, (unsigned __int8 *)v131, (unsigned __int8 *)&v120, (uint64_t)&v5[v10]);
  v14 = *((_QWORD *)v5 + 1);
  v15 = *((_QWORD *)v5 + 2);
  v17 = v16;
  *(_QWORD *)&v131[0] = v14;
  *((_QWORD *)&v131[0] + 1) = v15;
  swift_unknownObjectRetain();
  v18 = specialized static ICUMeasurementNumberFormatter.create(for:locale:)(v13, v17, (uint64_t)v131);
  swift_unknownObjectRelease();
  v104 = a5;
  if (!v18)
  {
    swift_bridgeObjectRelease();
    LOBYTE(v131[0]) = v8;
    LOBYTE(v120) = v11;
    v60 = (void *)static Measurement<>.FormatStyle.skeleton(_:width:usage:numberFormatStyle:)(0, 0, (unsigned __int8 *)v131, (unsigned __int8 *)&v120, v12);
    v62 = v61;
    *(_QWORD *)&v131[0] = v14;
    *((_QWORD *)&v131[0] + 1) = v15;
    swift_unknownObjectRetain();
    v63 = specialized static ICUMeasurementNumberFormatter.create(for:locale:)(v60, v62, (uint64_t)v131);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    if (v63)
    {
      type metadata accessor for ICUNumberFormatterBase.FormatResult();
      swift_allocObject();
      ICUNumberFormatterBase.FormatResult.init(formatter:value:)();
      v96 = swift_retain_n();
      MEMORY[0x1E0C80A78](v96);
      swift_retain();
      specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)v98, (uint64_t *)v131);
      v97 = *((_QWORD *)&v131[0] + 1);
      swift_release_n();
      if (v97)
      {
        BigString.init(_:)();
        AttributedString.init(_:attributes:)(v131, MEMORY[0x1E0DEE9E0], MEMORY[0x1E0DEE9E8], (uint64_t *)&v120);
        swift_release();
        goto LABEL_29;
      }
      swift_release();
    }
    Double.description.getter();
    BigString.init(_:)();
    AttributedString.init(_:attributes:)(v131, MEMORY[0x1E0DEE9E0], MEMORY[0x1E0DEE9E8], (uint64_t *)&v120);
LABEL_29:
    v26 = (uint64_t)v120;
    goto LABEL_32;
  }
  v102 = v17;
  ICUNumberFormatterBase.attributedFormatPositions(_:)(v7, 0, 0x100000000);
  v22 = v18;
  if (v20)
  {
    v23 = v19;
    v24 = v20;
    v25 = v21;
    swift_bridgeObjectRetain();
    BigString.init(_:)();
    AttributedString.init(_:attributes:)(v129, MEMORY[0x1E0DEE9E0], MEMORY[0x1E0DEE9E8], (uint64_t *)v131);
    v26 = *(_QWORD *)&v131[0];
    v27 = *(_QWORD *)(v25 + 16);
    if (v27)
    {
      v111 = v23;
      v112 = v24;
      v101 = v22;
      v108 = &v121;
      v109 = v132;
      swift_bridgeObjectRetain();
      v110 = lazy protocol witness table accessor for type String and conformance String();
      v100 = v25;
      v28 = v25 + 48;
      v105 = 0x8000000182307F60;
      v106 = 0x8000000182307FA0;
      do
      {
        v29 = *(unsigned int *)(v28 - 16);
        v118 = v28;
        v120 = (_OWORD *)v111;
        v121 = v112;
        swift_bridgeObjectRetain();
        v30 = String.Index.init<A>(utf16Offset:in:)();
        v120 = (_OWORD *)v111;
        v121 = v112;
        swift_bridgeObjectRetain();
        v31 = String.Index.init<A>(utf16Offset:in:)();
        if (v31 >> 14 < v30 >> 14)
        {
          __break(1u);
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
        }
        v32 = v31;
        v117 = v27;
        swift_retain();
        specialized Range<>.init<A>(_range:in:)(v30, v32, (_OWORD *)v26, (unint64_t *)&v120);
        v33 = v123;
        if (v123 == (ValueMetadata *)2)
          goto LABEL_41;
        v114 = v121;
        v115 = (uint64_t)v120;
        v113 = v122;
        v34 = v124;
        v36 = *((_QWORD *)&v125 + 1);
        v35 = v125;
        v116 = v126;
        v139 = MEMORY[0x1E0DEE9E0];
        v37 = 0;
        v38 = 2;
        switch((int)v29)
        {
          case 0:
            goto LABEL_9;
          case 1:
            v37 = 1;
LABEL_9:
            specialized AttributeContainer.subscript.setter(v37, (uint64_t)&type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart, (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart, 0xD00000000000001BLL, v105);
            break;
          case 2:
            goto LABEL_14;
          case 6:
            v38 = 0;
            goto LABEL_14;
          case 7:
            v38 = 3;
            goto LABEL_14;
          case 8:
            v38 = 4;
            goto LABEL_14;
          case 10:
            v38 = 1;
LABEL_14:
            specialized AttributeContainer.subscript.setter(v38);
            break;
          default:
            break;
        }
        AttributeScopes.FoundationAttributes.MeasurementAttribute.Component.init(unumberFormatField:)(v29, &v120);
        if (v120 != 2)
          specialized AttributeContainer.subscript.setter((char)v120, (uint64_t)&type metadata for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component, (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component, 0xD00000000000001FLL, v106);
        v150[0] = v139;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          v39 = *(_OWORD *)(v26 + 32);
          v162[0] = *(_OWORD *)(v26 + 16);
          v162[1] = v39;
          v162[2] = *(_OWORD *)(v26 + 48);
          v107 = v34;
          v40 = v36;
          v41 = *(_QWORD *)(v26 + 64);
          v42 = *(_QWORD *)(v26 + 72);
          v44 = *(_QWORD *)(v26 + 80);
          v43 = *(_QWORD *)(v26 + 88);
          type metadata accessor for AttributedString.Guts();
          swift_allocObject();
          outlined retain of Locale((uint64_t)v162);
          swift_unknownObjectRetain();
          v45 = v42;
          v36 = v40;
          v34 = v107;
          v46 = AttributedString.Guts.init(string:runs:)(v162, v41, v45, v44, v43);
          swift_release();
          v26 = v46;
        }
        v47 = v119;
        v48 = *(_OWORD *)(v26 + 32);
        v159 = *(_OWORD *)(v26 + 16);
        v160 = v48;
        v161 = *(_OWORD *)(v26 + 48);
        BigString.startIndex.getter();
        BigString.endIndex.getter();
        v151 = v115;
        v152 = v114;
        v153 = v113;
        v154 = v33;
        v155 = v34;
        v156 = v35;
        v157 = v36;
        v158 = v116;
        BigString.unicodeScalars.getter();
        swift_retain_n();
        BigString.UnicodeScalarView.subscript.getter();
        swift_release();
        outlined release of Locale((uint64_t)&v130);
        outlined release of Locale((uint64_t)v131);
        v50 = v108;
        v49 = v109;
        v51 = v109[1];
        *(_OWORD *)v108 = *v109;
        *((_OWORD *)v50 + 1) = v51;
        v52 = v49[3];
        *((_OWORD *)v50 + 2) = v49[2];
        *((_OWORD *)v50 + 3) = v52;
        v120 = (_OWORD *)v26;
        if (one-time initialization token for currentIdentity != -1)
          swift_once();
        v53 = (uint64_t *)(static AttributedString.currentIdentity + 16);
        v54 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
        swift_retain();
        os_unfair_lock_lock(v54);
        closure #1 in static AttributedString._nextModifyIdentity.getter(v53, (uint64_t *)v149);
        v119 = v47;
        os_unfair_lock_unlock(v54);
        swift_release();
        v55 = *(_QWORD *)&v149[0];
        v128 = *(_QWORD *)&v149[0];
        BigString.init()();
        *(_QWORD *)&v149[0] = 0;
        MEMORY[0x186DA9E90](v149, 8);
        v56 = *(_QWORD *)&v149[0];
        type metadata accessor for AttributedString.Guts();
        v57 = swift_allocObject();
        v58 = v117;
        if ((BigString.isEmpty.getter() & 1) == 0)
          goto LABEL_40;
        v59 = v132[5];
        *(_OWORD *)(v57 + 16) = v132[4];
        *(_OWORD *)(v57 + 32) = v59;
        *(_OWORD *)(v57 + 48) = v132[6];
        *(_QWORD *)(v57 + 64) = 0;
        *(_QWORD *)(v57 + 72) = 0;
        *(_QWORD *)(v57 + 80) = 0;
        *(_QWORD *)(v57 + 88) = v56;
        swift_release();
        LOBYTE(v149[0]) = 0;
        AttributedSubstring.mergeAttributes(_:mergePolicy:)((uint64_t *)v150, (char *)v149);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v128 != v55)
        {
          v99 = 0;
          v98[6] = 347;
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          swift_release_n();
          swift_willThrow();
          __break(1u);
          JUMPOUT(0x181B1FBDCLL);
        }
        v28 = v118 + 24;
        v26 = (uint64_t)v120;
        swift_release();
        v27 = v58 - 1;
      }
      while (v27);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    Double.description.getter();
    BigString.init(_:)();
    AttributedString.init(_:attributes:)(v131, MEMORY[0x1E0DEE9E0], MEMORY[0x1E0DEE9E8], (uint64_t *)&v120);
    swift_bridgeObjectRelease();
    swift_release();
    v26 = (uint64_t)v120;
  }
LABEL_32:
  swift_retain();
  BigString.init(_:)();
  AttributedString.init(_:attributes:)(v133, MEMORY[0x1E0DEE9E0], MEMORY[0x1E0DEE9E8], (uint64_t *)&v120);
  v64 = v120;
  v65 = *(_OWORD *)(v26 + 32);
  v150[0] = *(_OWORD *)(v26 + 16);
  v150[1] = v65;
  v150[2] = *(_OWORD *)(v26 + 48);
  v66 = BigString.endIndex.getter();
  v68 = v67;
  v70 = v69;
  v72 = v71;
  swift_retain();
  v73 = v26;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v74 = *(_OWORD *)(v26 + 32);
    v149[0] = *(_OWORD *)(v26 + 16);
    v149[1] = v74;
    v149[2] = *(_OWORD *)(v26 + 48);
    v76 = *(_QWORD *)(v26 + 64);
    v75 = *(_QWORD *)(v26 + 72);
    v77 = *(_QWORD *)(v26 + 80);
    v118 = *(_QWORD *)(v26 + 88);
    v119 = v75;
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v149);
    swift_unknownObjectRetain();
    v73 = AttributedString.Guts.init(string:runs:)(v149, v76, v119, v77, v118);
    swift_release();
  }
  v78 = *(_OWORD *)(v73 + 32);
  v146 = *(_OWORD *)(v73 + 16);
  v147 = v78;
  v148 = *(_OWORD *)(v73 + 48);
  BigString.startIndex.getter();
  BigString.endIndex.getter();
  *(_QWORD *)&v139 = v66;
  *((_QWORD *)&v139 + 1) = v68;
  v140 = v70;
  v141 = v72;
  v142 = v66;
  v143 = v68;
  v144 = v70;
  v145 = v72;
  specialized AttributedString.Guts.replaceSubrange<A>(_:with:)(&v139, v64);
  swift_release();
  swift_release();
  v79 = objc_msgSend(v103, sel_symbol);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v79);

  v136 = MEMORY[0x1E0DEE9E0];
  v123 = &type metadata for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component;
  v124 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component();
  LOBYTE(v120) = 1;
  v125 = xmmword_18205FD60;
  LOBYTE(v126) = 1;
  v127 = 0;
  specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v120, 0xD00000000000001FLL, 0x8000000182307FA0);
  v80 = v136;
  BigString.init(_:)();
  AttributedString.init(_:attributes:)(v134, v80, *((uint64_t *)&v80 + 1), (uint64_t *)&v120);
  v81 = v120;
  v82 = *(_OWORD *)(v73 + 32);
  v136 = *(_OWORD *)(v73 + 16);
  v137 = v82;
  v138 = *(_OWORD *)(v73 + 48);
  v83 = BigString.endIndex.getter();
  v85 = v84;
  v87 = v86;
  v89 = v88;
  swift_retain();
  v90 = (_OWORD *)v73;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v91 = *(_OWORD *)(v73 + 32);
    v135[0] = *(_OWORD *)(v73 + 16);
    v135[1] = v91;
    v135[2] = *(_OWORD *)(v73 + 48);
    v93 = *(_QWORD *)(v73 + 64);
    v92 = *(_QWORD *)(v73 + 72);
    v118 = *(_QWORD *)(v73 + 80);
    v119 = v92;
    v117 = *(_QWORD *)(v73 + 88);
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v135);
    swift_unknownObjectRetain();
    v90 = (_OWORD *)AttributedString.Guts.init(string:runs:)(v135, v93, v119, v118, v117);
    swift_release();
  }
  v94 = v90[2];
  v134[3] = v90[1];
  v134[4] = v94;
  v134[5] = v90[3];
  BigString.startIndex.getter();
  BigString.endIndex.getter();
  v120 = (_OWORD *)v83;
  v121 = v85;
  v122 = v87;
  v123 = v89;
  v124 = v83;
  *(_QWORD *)&v125 = v85;
  *((_QWORD *)&v125 + 1) = v87;
  v126 = v89;
  specialized AttributedString.Guts.replaceSubrange<A>(_:with:)(&v120, v81);
  swift_release();
  swift_release();
  result = swift_release();
  *v104 = v90;
  return result;
}

__n128 Measurement<>.AttributedStyle.locale(_:)@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __n128 result;
  __n128 v7;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, v3, a2);
  v7 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  result = v7;
  *(__n128 *)(a3 + 8) = v7;
  return result;
}

void Measurement<>.AttributedStyle.hash(into:)(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t (*v12)(uint64_t, uint64_t);
  Swift::UInt8 v13;
  void (*v14)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::UInt8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  void *v40;
  id v41;
  void *v42;
  id v43;
  void *v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  Swift::UInt v53;
  Swift::UInt v54;
  Swift::UInt8 v55;
  Swift::UInt8 v56;
  Swift::UInt8 v57;
  int *v58;
  uint64_t v59;
  int v60;
  void *v61;
  void *v62;
  char *v63;
  id v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE v70[144];
  char v71[8];
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  char v86;
  char v87;
  char v88;
  _QWORD v89[18];
  _BYTE v90[144];
  _BYTE v91[152];

  v3 = v2;
  v68 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  v69 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v67 = (uint64_t)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher._combine(_:)(*v2);
  v10 = *((_QWORD *)v2 + 2);
  ObjectType = swift_getObjectType();
  v12 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 48);
  swift_unknownObjectRetain();
  if ((v12(ObjectType, v10) & 1) != 0)
  {
    v13 = 1;
LABEL_5:
    Hasher._combine(_:)(v13);
    swift_unknownObjectRelease();
    v18 = v68;
    v17 = v69;
    goto LABEL_57;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v10 + 64))(ObjectType, v10);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v14 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v10 + 464);
  swift_unknownObjectRetain();
  v14(v89, ObjectType, v10);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v89, (uint64_t)v90, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v90, (uint64_t)v91, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v91) == 1)
  {
    v13 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v90, (uint64_t)v71, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v71[0] == 2)
  {
    v19 = 0;
  }
  else
  {
    v19 = v71[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v19);
  v20 = v72;
  v65 = v5;
  if (!v72)
  {
    Hasher._combine(_:)(0);
    v25 = v71;
    goto LABEL_20;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v20 + 16));
  v21 = *(_QWORD *)(v20 + 16);
  if (!v21)
  {
    outlined init with take of LocalePreferences?((uint64_t)v90, (uint64_t)v70, &demangling cache variable for type metadata for LocalePreferences?);
    v25 = v70;
LABEL_20:
    outlined retain of LocalePreferences(v25);
    if (!v73)
      goto LABEL_14;
    goto LABEL_21;
  }
  outlined retain of LocalePreferences?((uint64_t)v90, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v22 = v20 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v22 += 16;
    --v21;
  }
  while (v21);
  swift_bridgeObjectRelease();
  if (!v73)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v74)
      goto LABEL_15;
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v74)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    v23 = v75;
    if (!v75)
      goto LABEL_16;
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v23);
    swift_bridgeObjectRelease();
    v24 = v76;
    if (!v76)
      goto LABEL_17;
    goto LABEL_24;
  }
LABEL_22:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v23 = v75;
  if (v75)
    goto LABEL_23;
LABEL_16:
  Hasher._combine(_:)(0);
  v24 = v76;
  if (!v76)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v24);
  swift_bridgeObjectRelease();
LABEL_25:
  v26 = v78;
  v27 = v79;
  v28 = v80;
  v29 = v81;
  v63 = v9;
  v64 = v77;
  v61 = v81;
  v62 = v79;
  if (v77)
  {
    v30 = v78;
    v31 = v79;
    v32 = v77;
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    v66 = v33;
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v34 = v30;
    v35 = v31;
    v26 = v30;
    v36 = v28;
    v37 = v29;
    v38 = v32;
    _CFObject.hash(into:)();
    v66 = v28;
    if (v30)
      goto LABEL_27;
  }
  else
  {
    Hasher._combine(_:)(0);
    v46 = v29;
    v47 = v26;
    v48 = v27;
    v49 = v28;
    v66 = v28;
    if (v26)
    {
LABEL_27:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      v39 = v26;
      _CFObject.hash(into:)();

      v40 = v62;
      v9 = v63;
      if (v62)
        goto LABEL_28;
      goto LABEL_33;
    }
  }
  Hasher._combine(_:)(0);
  v40 = v62;
  v9 = v63;
  if (v62)
  {
LABEL_28:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v41 = v40;
    _CFObject.hash(into:)();

    v42 = v66;
    if (v66)
      goto LABEL_29;
LABEL_34:
    Hasher._combine(_:)(0);
    v44 = v61;
    if (v61)
      goto LABEL_30;
    goto LABEL_35;
  }
LABEL_33:
  Hasher._combine(_:)(0);
  v42 = v66;
  if (!v66)
    goto LABEL_34;
LABEL_29:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  v43 = v42;
  _CFObject.hash(into:)();

  v44 = v61;
  if (v61)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v45 = v44;
    _CFObject.hash(into:)();

    goto LABEL_36;
  }
LABEL_35:
  Hasher._combine(_:)(0);
  v45 = 0;
LABEL_36:
  v50 = v66;

  v51 = v82;
  if (v51)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v51);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v5 = v65;
  v17 = v69;
  v52 = v83;
  if (!v83)
  {
    Hasher._combine(_:)(0);
    if (v84)
      goto LABEL_41;
LABEL_43:
    Hasher._combine(_:)(0);
    goto LABEL_44;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v52);
  swift_bridgeObjectRelease();
  if (!v84)
    goto LABEL_43;
LABEL_41:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_44:
  v18 = v68;
  if (v85 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v53 = v85 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v53);
  }
  if (v86 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v54 = v86 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v54);
  }
  if (v87 == 2)
  {
    v55 = 0;
  }
  else
  {
    v55 = v87 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v55);
  if (v88 == 2)
  {
    v56 = 0;
  }
  else
  {
    v57 = v88 & 1;
    Hasher._combine(_:)(1u);
    v56 = v57;
  }
  Hasher._combine(_:)(v56);
  outlined retain of LocalePreferences?((uint64_t)v90, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v90, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease();
LABEL_57:
  v58 = (int *)type metadata accessor for Measurement<>.FormatStyle(0, *(_QWORD *)(v18 + 16), v15, v16);
  outlined init with copy of (Hashable & Sendable)?((uint64_t)&v3[v58[8]], (uint64_t)v9, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1, v5) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v59 = v67;
    outlined init with take of LocalePreferences?((uint64_t)v9, v67, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    Hasher._combine(_:)(1u);
    specialized FloatingPointFormatStyle.hash(into:)(a1);
    outlined destroy of Any?(v59, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  }
  v60 = v3[v58[9]];
  if (v60 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Usage.rawValue.getter(v60);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  Hasher._combine(_:)(v3[v58[10]]);
}

BOOL static Measurement<>.AttributedStyle.== infix(_:_:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  unsigned int (*v31)(uint64_t, uint64_t, uint64_t);
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t *v37;
  __int128 *v38;
  __int128 v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v46;
  uint64_t v47;
  __int128 *v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  __int128 v51;
  __int128 v52;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (FloatingPointFormatStyle<Double>?, FloatingPointFormatStyle<Double>?));
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  MEMORY[0x1E0C80A78](v12);
  v14 = (__int128 *)((char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v47 - v16;
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v47 - v20;
  if (*a1 != *v19)
    return 0;
  v22 = *(_OWORD *)(a1 + 8);
  v51 = *(_OWORD *)(v19 + 8);
  v52 = v22;
  v50 = v19;
  if ((specialized static Locale.== infix(_:_:)((uint64_t)&v52, (uint64_t)&v51) & 1) == 0)
    return 0;
  v48 = (__int128 *)v8;
  v25 = v50;
  v26 = type metadata accessor for Measurement<>.FormatStyle(0, a3, v23, v24);
  v27 = *(int *)(v26 + 32);
  v49 = a1;
  v28 = (uint64_t)&a1[v27];
  v29 = (int *)v26;
  outlined init with copy of (Hashable & Sendable)?(v28, (uint64_t)v21, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  outlined init with copy of (Hashable & Sendable)?((uint64_t)&v25[v29[8]], (uint64_t)v17, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  v30 = (uint64_t)&v11[*(int *)(v9 + 48)];
  outlined init with copy of (Hashable & Sendable)?((uint64_t)v21, (uint64_t)v11, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  outlined init with copy of (Hashable & Sendable)?((uint64_t)v17, v30, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (v31((uint64_t)v11, 1, v5) == 1)
  {
    if (v31(v30, 1, v5) == 1)
    {
      outlined destroy of Any?((uint64_t)v11, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
      outlined destroy of Any?((uint64_t)v17, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
      outlined destroy of Any?((uint64_t)v21, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
      v33 = v49;
      v32 = v50;
      goto LABEL_6;
    }
    v37 = &demangling cache variable for type metadata for (FloatingPointFormatStyle<Double>?, FloatingPointFormatStyle<Double>?);
LABEL_21:
    outlined destroy of Any?((uint64_t)v11, v37);
    outlined destroy of Any?((uint64_t)v17, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
    outlined destroy of Any?((uint64_t)v21, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
    return 0;
  }
  outlined init with copy of (Hashable & Sendable)?((uint64_t)v11, (uint64_t)v14, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  if (v31(v30, 1, v5) == 1)
  {
    v37 = &demangling cache variable for type metadata for (FloatingPointFormatStyle<Double>?, FloatingPointFormatStyle<Double>?);
LABEL_20:
    outlined destroy of Any?((uint64_t)v14, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    goto LABEL_21;
  }
  v38 = v48;
  outlined init with take of LocalePreferences?(v30, (uint64_t)v48, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  v39 = *v14;
  v51 = *v38;
  v52 = v39;
  if ((specialized static Locale.== infix(_:_:)((uint64_t)&v52, (uint64_t)&v51) & 1) == 0)
  {
    outlined destroy of Any?((uint64_t)v14, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    v37 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?;
    v14 = v38;
    goto LABEL_20;
  }
  v40 = static NumberFormatStyleConfiguration.Collection.== infix(_:_:)((char *)v14 + *(int *)(v5 + 36), (char *)v38 + *(int *)(v5 + 36));
  outlined destroy of Any?((uint64_t)v14, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  outlined destroy of Any?((uint64_t)v38, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  outlined destroy of Any?((uint64_t)v11, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  outlined destroy of Any?((uint64_t)v17, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  outlined destroy of Any?((uint64_t)v21, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  v33 = v49;
  v32 = v50;
  if ((v40 & 1) == 0)
    return 0;
LABEL_6:
  v34 = v29[9];
  v35 = v33[v34];
  v36 = v32[v34];
  if (v35 == 14)
  {
    if (v36 == 14)
      return v33[v29[10]] == v32[v29[10]];
    return 0;
  }
  if (v36 == 14)
    return 0;
  v41 = Usage.rawValue.getter(v35);
  v43 = v42;
  if (v41 == Usage.rawValue.getter(v36) && v43 == v44)
  {
    swift_bridgeObjectRelease_n();
    v32 = v50;
    return v33[v29[10]] == v32[v29[10]];
  }
  v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v32 = v50;
  if ((v46 & 1) == 0)
    return 0;
  return v33[v29[10]] == v32[v29[10]];
}

uint64_t Measurement<>.AttributedStyle.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x79745372656E6E69 && a2 == 0xEA0000000000656CLL)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Measurement<A><>.AttributedStyle.CodingKeys()
{
  return 0x79745372656E6E69;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Measurement<A><>.AttributedStyle.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = Measurement<>.AttributedStyle.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Measurement<A><>.AttributedStyle.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A><>.AttributedStyle.CodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Measurement<A><>.AttributedStyle.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A><>.AttributedStyle.CodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t Measurement<>.AttributedStyle.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = type metadata accessor for Measurement<>.AttributedStyle.CodingKeys(255, v5, a3, a4);
  MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A><>.AttributedStyle.CodingKeys, v6);
  v7 = type metadata accessor for KeyedEncodingContainer();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v15 - v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v13 = type metadata accessor for Measurement<>.FormatStyle(0, v5, v11, v12);
  MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A><>.FormatStyle, v13);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int Measurement<>.AttributedStyle.hashValue.getter(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t ObjectType;
  uint64_t (*v11)(uint64_t, uint64_t);
  char v12;
  Swift::UInt8 v13;
  void (*v14)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::UInt8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  void *v42;
  void *v43;
  id v44;
  id v45;
  void *v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  Swift::UInt v50;
  Swift::UInt v51;
  Swift::UInt8 v52;
  Swift::UInt8 v53;
  Swift::UInt8 v54;
  int *v55;
  uint64_t v56;
  int v57;
  void *v59;
  char *v60;
  void *v61;
  id v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE v67[144];
  char v68[8];
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  char v83;
  char v84;
  char v85;
  _QWORD v86[18];
  _BYTE v87[144];
  _BYTE v88[144];
  _BYTE v89[80];

  v2 = v1;
  v65 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  v66 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v1);
  v9 = *((_QWORD *)v1 + 2);
  ObjectType = swift_getObjectType();
  v11 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 48);
  swift_unknownObjectRetain();
  v12 = v11(ObjectType, v9);
  v64 = v5;
  if ((v12 & 1) != 0)
  {
    v13 = 1;
LABEL_5:
    Hasher._combine(_:)(v13);
    swift_unknownObjectRelease();
    v18 = v65;
    v17 = v66;
    goto LABEL_59;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v9 + 64))(ObjectType, v9);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v14 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v9 + 464);
  swift_unknownObjectRetain();
  v14(v86, ObjectType, v9);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v86, (uint64_t)v87, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v87, (uint64_t)v88, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v88) == 1)
  {
    v13 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v87, (uint64_t)v68, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v68[0] == 2)
  {
    v19 = 0;
  }
  else
  {
    v19 = v68[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v19);
  v20 = v69;
  v63 = v3;
  if (!v69)
  {
    Hasher._combine(_:)(0);
    v25 = v68;
    goto LABEL_20;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v20 + 16));
  v21 = *(_QWORD *)(v20 + 16);
  if (!v21)
  {
    outlined init with take of LocalePreferences?((uint64_t)v87, (uint64_t)v67, &demangling cache variable for type metadata for LocalePreferences?);
    v25 = v67;
LABEL_20:
    outlined retain of LocalePreferences(v25);
    if (!v70)
      goto LABEL_14;
    goto LABEL_21;
  }
  outlined retain of LocalePreferences?((uint64_t)v87, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v22 = v20 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v22 += 16;
    --v21;
  }
  while (v21);
  swift_bridgeObjectRelease();
  if (!v70)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v71)
      goto LABEL_15;
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v71)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    v23 = v72;
    if (!v72)
      goto LABEL_16;
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v89, v23);
    swift_bridgeObjectRelease();
    v24 = v73;
    if (!v73)
      goto LABEL_17;
    goto LABEL_24;
  }
LABEL_22:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v23 = v72;
  if (v72)
    goto LABEL_23;
LABEL_16:
  Hasher._combine(_:)(0);
  v24 = v73;
  if (!v73)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v89, v24);
  swift_bridgeObjectRelease();
LABEL_25:
  v27 = v74;
  v26 = v75;
  v28 = v76;
  v29 = v77;
  v30 = v78;
  v60 = v8;
  v61 = v78;
  v59 = v76;
  if (v74)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v31 = v26;
    v32 = v28;
    v33 = v29;
    v34 = v29;
    v35 = v30;
    v36 = v27;
    _CFObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    v37 = v30;
    v38 = v26;
    v39 = v28;
    v33 = v29;
    v40 = v29;
  }
  v62 = v27;
  if (v26)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v41 = v26;
    _CFObject.hash(into:)();

  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v42 = v33;
  v43 = v59;
  v8 = v60;
  if (v59)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v44 = v43;
    _CFObject.hash(into:)();

    if (v42)
      goto LABEL_33;
LABEL_36:
    Hasher._combine(_:)(0);
    v46 = v61;
    if (v61)
      goto LABEL_34;
    goto LABEL_37;
  }
  Hasher._combine(_:)(0);
  if (!v42)
    goto LABEL_36;
LABEL_33:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  v45 = v42;
  _CFObject.hash(into:)();

  v46 = v61;
  if (v61)
  {
LABEL_34:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v47 = v46;
    _CFObject.hash(into:)();

    goto LABEL_38;
  }
LABEL_37:
  Hasher._combine(_:)(0);
  v47 = 0;
LABEL_38:

  v48 = v79;
  if (v48)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v89, v48);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v3 = v63;
  v18 = v65;
  v17 = v66;
  v49 = v80;
  if (!v80)
  {
    Hasher._combine(_:)(0);
    if (v81)
      goto LABEL_43;
LABEL_45:
    Hasher._combine(_:)(0);
    goto LABEL_46;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v89, v49);
  swift_bridgeObjectRelease();
  if (!v81)
    goto LABEL_45;
LABEL_43:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_46:
  if (v82 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v50 = v82 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v50);
  }
  if (v83 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v51 = v83 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v51);
  }
  if (v84 == 2)
  {
    v52 = 0;
  }
  else
  {
    v52 = v84 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v52);
  if (v85 == 2)
  {
    v53 = 0;
  }
  else
  {
    v54 = v85 & 1;
    Hasher._combine(_:)(1u);
    v53 = v54;
  }
  Hasher._combine(_:)(v53);
  outlined retain of LocalePreferences?((uint64_t)v87, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v87, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease();
LABEL_59:
  v55 = (int *)type metadata accessor for Measurement<>.FormatStyle(0, *(_QWORD *)(v18 + 16), v15, v16);
  outlined init with copy of (Hashable & Sendable)?((uint64_t)&v2[v55[8]], (uint64_t)v8, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v8, 1, v3) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v56 = (uint64_t)v64;
    outlined init with take of LocalePreferences?((uint64_t)v8, (uint64_t)v64, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    Hasher._combine(_:)(1u);
    specialized FloatingPointFormatStyle.hash(into:)((uint64_t)v89);
    outlined destroy of Any?(v56, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  }
  v57 = v2[v55[9]];
  if (v57 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Usage.rawValue.getter(v57);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  Hasher._combine(_:)(v2[v55[10]]);
  return Hasher._finalize()();
}

uint64_t Measurement<>.AttributedStyle.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;

  v26 = a5;
  v31 = type metadata accessor for Measurement<>.FormatStyle(0, a2, a3, a4);
  v29 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31);
  v32 = (char *)&v25 - v7;
  v10 = type metadata accessor for Measurement<>.AttributedStyle.CodingKeys(255, a2, v8, v9);
  MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A><>.AttributedStyle.CodingKeys, v10);
  v30 = type metadata accessor for KeyedDecodingContainer();
  v27 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30);
  v12 = (char *)&v25 - v11;
  v25 = type metadata accessor for Measurement<>.AttributedStyle(0, a2, v13, v14);
  v15 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25);
  v17 = (char *)&v25 - v16;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v28 = v12;
  v18 = v33;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v18)
  {
    v33 = v15;
    v19 = v27;
    v20 = v29;
    v21 = v31;
    MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A><>.FormatStyle, v31);
    v22 = v30;
    v23 = v28;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v23, v22);
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v32, v21);
    (*(void (**)(uint64_t, char *, uint64_t))(v33 + 32))(v26, v17, v25);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Measurement<A><>.AttributedStyle@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Measurement<>.AttributedStyle.init(from:)(a1, *(_QWORD *)(a2 + 16), a3, a4, a5);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Measurement<A><>.AttributedStyle(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Measurement<>.AttributedStyle.encode(to:)(a1, a2, a3, a4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Measurement<A><>.AttributedStyle(uint64_t a1, uint64_t a2)
{
  _BYTE v4[72];

  Hasher.init(_seed:)();
  Measurement<>.AttributedStyle.hash(into:)((uint64_t)v4, a2);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Measurement<A><>.AttributedStyle(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return static Measurement<>.AttributedStyle.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16));
}

void Measurement<>.AttributedStyle<>.ByteCount.style.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *Measurement<>.AttributedStyle<>.ByteCount.style.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*Measurement<>.AttributedStyle<>.ByteCount.style.modify(uint64_t a1))(uint64_t result)
{
  _BYTE *v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *v1;
  return Measurement<>.AttributedStyle<>.ByteCount.style.modify;
}

uint64_t Measurement<>.AttributedStyle<>.ByteCount.style.modify(uint64_t result)
{
  **(_BYTE **)result = *(_BYTE *)(result + 8);
  return result;
}

void Measurement<>.AttributedStyle<>.ByteCount.allowedUnits.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 8);
}

_QWORD *Measurement<>.AttributedStyle<>.ByteCount.allowedUnits.setter(_QWORD *result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = *result;
  return result;
}

_QWORD *(*Measurement<>.AttributedStyle<>.ByteCount.allowedUnits.modify(_QWORD *a1))(_QWORD *result)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 8);
  a1[1] = v1;
  return Measurement<>.AttributedStyle<>.ByteCount.allowedUnits.modify;
}

_QWORD *Measurement<>.AttributedStyle<>.ByteCount.allowedUnits.modify(_QWORD *result)
{
  *(_QWORD *)(result[1] + 8) = *result;
  return result;
}

uint64_t Measurement<>.AttributedStyle<>.ByteCount.spellsOutZero.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t Measurement<>.AttributedStyle<>.ByteCount.spellsOutZero.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = result;
  return result;
}

_BYTE *(*Measurement<>.AttributedStyle<>.ByteCount.spellsOutZero.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 16);
  return Measurement<>.AttributedStyle<>.ByteCount.spellsOutZero.modify;
}

_BYTE *Measurement<>.AttributedStyle<>.ByteCount.spellsOutZero.modify(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 16) = result[8];
  return result;
}

uint64_t Measurement<>.AttributedStyle<>.ByteCount.includesActualByteCount.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t Measurement<>.AttributedStyle<>.ByteCount.includesActualByteCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 17) = result;
  return result;
}

_BYTE *(*Measurement<>.AttributedStyle<>.ByteCount.includesActualByteCount.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 17);
  return Measurement<>.AttributedStyle<>.ByteCount.includesActualByteCount.modify;
}

_BYTE *Measurement<>.AttributedStyle<>.ByteCount.includesActualByteCount.modify(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 17) = result[8];
  return result;
}

uint64_t Measurement<>.AttributedStyle<>.ByteCount.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_OWORD *)(v1 + 24);
  return swift_unknownObjectRetain();
}

__n128 Measurement<>.AttributedStyle<>.ByteCount.locale.setter(__n128 *a1)
{
  uint64_t v1;
  __n128 result;

  swift_unknownObjectRelease();
  result = *a1;
  *(__n128 *)(v1 + 24) = *a1;
  return result;
}

uint64_t (*Measurement<>.AttributedStyle<>.ByteCount.locale.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 24);
  swift_unknownObjectRetain();
  return Measurement<>.AttributedStyle<>.ByteCount.locale.modify;
}

uint64_t Measurement<>.AttributedStyle<>.ByteCount.locale.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = a1[1];
  v2 = a1[2];
  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *(_QWORD *)(v2 + 24) = v4;
    *(_QWORD *)(v2 + 32) = v3;
    return swift_unknownObjectRelease();
  }
  else
  {
    result = swift_unknownObjectRelease();
    *(_QWORD *)(v2 + 24) = v4;
    *(_QWORD *)(v2 + 32) = v3;
  }
  return result;
}

__n128 Measurement<>.AttributedStyle<>.ByteCount.init(style:allowedUnits:spellsOutZero:includesActualByteCount:locale:)@<Q0>(_BYTE *a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, char a4@<W3>, __n128 *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  __n128 result;

  v6 = *a2;
  *(_BYTE *)a6 = *a1;
  *(_QWORD *)(a6 + 8) = v6;
  *(_BYTE *)(a6 + 16) = a3;
  *(_BYTE *)(a6 + 17) = a4;
  result = *a5;
  *(__n128 *)(a6 + 24) = *a5;
  return result;
}

void Measurement<>.AttributedStyle<>.ByteCount.format(_:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  char *v2;
  void *v4;
  double v5;
  char v6;
  double v7;
  char v8;
  char v9;
  id v10;
  double v11;
  id v12;
  void *v13;
  double v14;
  char v15;
  char v16;
  __int128 v17;

  v4 = *(void **)a1;
  v5 = *(double *)(a1 + 8);
  v6 = *v2;
  v7 = *((double *)v2 + 1);
  v8 = v2[16];
  v9 = v2[17];
  v10 = objc_msgSend((id)objc_opt_self(), sel_bytes);
  specialized Measurement<>.converted(to:)(v4, v10, (uint64_t)&v13, v5);

  v12 = v13;
  v11 = v14;
  LOBYTE(v13) = v6;
  v14 = v7;
  v15 = v8;
  v16 = v9;
  v17 = *(_OWORD *)(v2 + 24);
  swift_unknownObjectRetain();
  ByteCountFormatStyle.Attributed._format(_:doubleValue:)(a2, v11);
  swift_unknownObjectRelease();

}

uint64_t Measurement<>.AttributedStyle<>.ByteCount.locale(_:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;

  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(_BYTE *)(v2 + 16);
  v5 = *(_BYTE *)(v2 + 17);
  *(_BYTE *)a2 = *(_BYTE *)v2;
  *(_QWORD *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 16) = v4;
  *(_BYTE *)(a2 + 17) = v5;
  *(_OWORD *)(a2 + 24) = *a1;
  return swift_unknownObjectRetain();
}

uint64_t Measurement<>.AttributedStyle<>.ByteCount.hash(into:)(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t (*v8)(uint64_t, uint64_t);
  Swift::UInt8 v9;
  void (*v10)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  Swift::UInt v38;
  Swift::UInt v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  Swift::UInt8 v42;
  _BYTE v44[144];
  _BYTE v45[8];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  char v60;
  char v61;
  char v62;
  _QWORD v63[18];
  _BYTE v64[144];
  _BYTE v65[152];

  v3 = *((_QWORD *)v1 + 1);
  v4 = v1[16];
  v5 = v1[17];
  v6 = *((_QWORD *)v1 + 4);
  Hasher._combine(_:)(*v1);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  ObjectType = swift_getObjectType();
  v8 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 48);
  swift_unknownObjectRetain_n();
  if ((v8(ObjectType, v6) & 1) != 0)
  {
    v9 = 1;
LABEL_5:
    Hasher._combine(_:)(v9);
    return swift_unknownObjectRelease_n();
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v6 + 64))(ObjectType, v6);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v10 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v6 + 464);
  swift_unknownObjectRetain();
  v10(v63, ObjectType, v6);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v64, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v64, (uint64_t)v65, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v65) == 1)
  {
    v9 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v64, (uint64_t)v45, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v45[0] == 2)
  {
    v11 = 0;
  }
  else
  {
    v11 = v45[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v11);
  v12 = v46;
  if (!v46)
  {
    Hasher._combine(_:)(0);
    v17 = v45;
    goto LABEL_20;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v12 + 16));
  v13 = *(_QWORD *)(v12 + 16);
  if (!v13)
  {
    outlined init with take of LocalePreferences?((uint64_t)v64, (uint64_t)v44, &demangling cache variable for type metadata for LocalePreferences?);
    v17 = v44;
LABEL_20:
    outlined retain of LocalePreferences(v17);
    if (!v47)
      goto LABEL_14;
    goto LABEL_21;
  }
  outlined retain of LocalePreferences?((uint64_t)v64, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v14 = v12 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v14 += 16;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease();
  if (!v47)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v48)
      goto LABEL_15;
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v48)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    v15 = v49;
    if (!v49)
      goto LABEL_16;
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v15);
    swift_bridgeObjectRelease();
    v16 = v50;
    if (!v50)
      goto LABEL_17;
    goto LABEL_24;
  }
LABEL_22:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v15 = v49;
  if (v49)
    goto LABEL_23;
LABEL_16:
  Hasher._combine(_:)(0);
  v16 = v50;
  if (!v50)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v16);
  swift_bridgeObjectRelease();
LABEL_25:
  v19 = v51;
  v18 = v52;
  v21 = v53;
  v20 = v54;
  v22 = v55;
  if (v51)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v23 = v18;
    v24 = v21;
    v25 = v20;
    v26 = v22;
    v27 = v19;
    _CFObject.hash(into:)();
    if (v18)
      goto LABEL_27;
  }
  else
  {
    Hasher._combine(_:)(0);
    v32 = v22;
    v33 = v18;
    v34 = v21;
    v35 = v20;
    if (v18)
    {
LABEL_27:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      v28 = v18;
      _CFObject.hash(into:)();

      if (v21)
        goto LABEL_28;
      goto LABEL_33;
    }
  }
  Hasher._combine(_:)(0);
  if (v21)
  {
LABEL_28:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v29 = v21;
    _CFObject.hash(into:)();

    if (v20)
      goto LABEL_29;
LABEL_34:
    Hasher._combine(_:)(0);
    if (v22)
      goto LABEL_30;
    goto LABEL_35;
  }
LABEL_33:
  Hasher._combine(_:)(0);
  if (!v20)
    goto LABEL_34;
LABEL_29:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  v30 = v20;
  _CFObject.hash(into:)();

  if (v22)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v31 = v22;
    _CFObject.hash(into:)();

    goto LABEL_36;
  }
LABEL_35:
  Hasher._combine(_:)(0);
  v31 = 0;
LABEL_36:

  v36 = v56;
  if (v36)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v36);
    swift_bridgeObjectRelease();
    v37 = v57;
    if (v57)
      goto LABEL_38;
LABEL_41:
    Hasher._combine(_:)(0);
    if (v58)
      goto LABEL_39;
LABEL_42:
    Hasher._combine(_:)(0);
    goto LABEL_43;
  }
  Hasher._combine(_:)(0);
  v37 = v57;
  if (!v57)
    goto LABEL_41;
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v37);
  swift_bridgeObjectRelease();
  if (!v58)
    goto LABEL_42;
LABEL_39:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_43:
  if (v59 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v38 = v59 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v38);
  }
  if (v60 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v39 = v60 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v39);
  }
  if (v61 == 2)
  {
    v40 = 0;
  }
  else
  {
    v40 = v61 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v40);
  if (v62 == 2)
  {
    v41 = 0;
  }
  else
  {
    v42 = v62 & 1;
    Hasher._combine(_:)(1u);
    v41 = v42;
  }
  Hasher._combine(_:)(v41);
  outlined retain of LocalePreferences?((uint64_t)v64, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v64, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  return swift_unknownObjectRelease_n();
}

uint64_t static Measurement<>.AttributedStyle<>.ByteCount.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  char v4;
  unsigned __int8 v5;
  uint64_t v6;
  char v7;
  char v8;
  unsigned __int8 v10[8];
  uint64_t v11;
  char v12;
  char v13;
  __int128 v14;
  unsigned __int8 v15[8];
  uint64_t v16;
  char v17;
  char v18;
  __int128 v19;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_BYTE *)(a1 + 16);
  v4 = *(_BYTE *)(a1 + 17);
  v5 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_BYTE *)(a2 + 16);
  v8 = *(_BYTE *)(a2 + 17);
  v15[0] = *(_BYTE *)a1;
  v16 = v2;
  v17 = v3;
  v18 = v4;
  v19 = *(_OWORD *)(a1 + 24);
  v10[0] = v5;
  v11 = v6;
  v12 = v7;
  v13 = v8;
  v14 = *(_OWORD *)(a2 + 24);
  return specialized static Measurement<>.FormatStyle<>.ByteCount.== infix(_:_:)(v15, v10) & 1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys()
{
  return 0x6E756F4365747962;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x6E756F4365747962 && a2 == 0xEE00656C79745374)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys()
{
  lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys(&lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys, &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for Measurement<>.AttributedStyle<>.ByteCount.CodingKeys, (uint64_t)&protocol conformance descriptor for Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys()
{
  lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys(&lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys, &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for Measurement<>.AttributedStyle<>.ByteCount.CodingKeys, (uint64_t)&protocol conformance descriptor for Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys);
  return CodingKey.debugDescription.getter();
}

uint64_t Measurement<>.AttributedStyle<>.ByteCount.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  __int128 v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  __int128 v18;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys>);
  v13 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v1;
  v11 = *((_QWORD *)v1 + 1);
  v6 = v1[16];
  v9 = v1[17];
  v10 = v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  type metadata accessor for Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys(0, &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for Measurement<>.AttributedStyle<>.ByteCount.CodingKeys);
  lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys(&lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys, &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for Measurement<>.AttributedStyle<>.ByteCount.CodingKeys, (uint64_t)&protocol conformance descriptor for Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys);
  v8 = *(_OWORD *)(v1 + 24);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v14 = v12;
  v15 = v11;
  v16 = v10;
  v17 = v9;
  v18 = v8;
  lazy protocol witness table accessor for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v5, v3);
}

Swift::Int Measurement<>.AttributedStyle<>.ByteCount.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t (*v7)(uint64_t, uint64_t);
  Swift::UInt8 v8;
  void (*v9)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  Swift::UInt v37;
  Swift::UInt v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  _BYTE v43[144];
  _BYTE v44[8];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  char v60;
  char v61;
  _QWORD v62[18];
  _BYTE v63[144];
  _BYTE v64[144];
  _BYTE v65[72];

  v1 = *v0;
  v2 = *((_QWORD *)v0 + 1);
  v3 = v0[16];
  v4 = v0[17];
  v5 = *((_QWORD *)v0 + 4);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  ObjectType = swift_getObjectType();
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain();
  if ((v7(ObjectType, v5) & 1) != 0)
  {
    v8 = 1;
LABEL_5:
    Hasher._combine(_:)(v8);
    goto LABEL_56;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(ObjectType, v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v9 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v5 + 464);
  swift_unknownObjectRetain();
  v9(v62, ObjectType, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v62, (uint64_t)v63, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v64, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v64) == 1)
  {
    v8 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v44, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v44[0] == 2)
  {
    v10 = 0;
  }
  else
  {
    v10 = v44[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v10);
  v11 = v45;
  if (!v45)
  {
    Hasher._combine(_:)(0);
    v16 = v44;
    goto LABEL_20;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v11 + 16));
  v12 = *(_QWORD *)(v11 + 16);
  if (!v12)
  {
    outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v43, &demangling cache variable for type metadata for LocalePreferences?);
    v16 = v43;
LABEL_20:
    outlined retain of LocalePreferences(v16);
    if (!v46)
      goto LABEL_14;
    goto LABEL_21;
  }
  outlined retain of LocalePreferences?((uint64_t)v63, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v13 = v11 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v13 += 16;
    --v12;
  }
  while (v12);
  swift_bridgeObjectRelease();
  if (!v46)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v47)
      goto LABEL_15;
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v47)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    v14 = v48;
    if (!v48)
      goto LABEL_16;
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v65, v14);
    swift_bridgeObjectRelease();
    v15 = v49;
    if (!v49)
      goto LABEL_17;
    goto LABEL_24;
  }
LABEL_22:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v14 = v48;
  if (v48)
    goto LABEL_23;
LABEL_16:
  Hasher._combine(_:)(0);
  v15 = v49;
  if (!v49)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v65, v15);
  swift_bridgeObjectRelease();
LABEL_25:
  v18 = v50;
  v17 = v51;
  v20 = v52;
  v19 = v53;
  v21 = v54;
  if (v50)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v22 = v17;
    v23 = v20;
    v24 = v19;
    v25 = v21;
    v26 = v18;
    _CFObject.hash(into:)();
    if (v17)
      goto LABEL_27;
  }
  else
  {
    Hasher._combine(_:)(0);
    v31 = v21;
    v32 = v17;
    v33 = v20;
    v34 = v19;
    if (v17)
    {
LABEL_27:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      v27 = v17;
      _CFObject.hash(into:)();

      if (v20)
        goto LABEL_28;
      goto LABEL_33;
    }
  }
  Hasher._combine(_:)(0);
  if (v20)
  {
LABEL_28:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v28 = v20;
    _CFObject.hash(into:)();

    if (v19)
      goto LABEL_29;
LABEL_34:
    Hasher._combine(_:)(0);
    if (v21)
      goto LABEL_30;
    goto LABEL_35;
  }
LABEL_33:
  Hasher._combine(_:)(0);
  if (!v19)
    goto LABEL_34;
LABEL_29:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  v29 = v19;
  _CFObject.hash(into:)();

  if (v21)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v30 = v21;
    _CFObject.hash(into:)();

    goto LABEL_36;
  }
LABEL_35:
  Hasher._combine(_:)(0);
  v30 = 0;
LABEL_36:

  v35 = v55;
  if (v35)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v65, v35);
    swift_bridgeObjectRelease();
    v36 = v56;
    if (v56)
      goto LABEL_38;
LABEL_41:
    Hasher._combine(_:)(0);
    if (v57)
      goto LABEL_39;
LABEL_42:
    Hasher._combine(_:)(0);
    goto LABEL_43;
  }
  Hasher._combine(_:)(0);
  v36 = v56;
  if (!v56)
    goto LABEL_41;
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v65, v36);
  swift_bridgeObjectRelease();
  if (!v57)
    goto LABEL_42;
LABEL_39:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_43:
  if (v58 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v37 = v58 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v37);
  }
  if (v59 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v38 = v59 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v38);
  }
  if (v60 == 2)
  {
    v39 = 0;
  }
  else
  {
    v39 = v60 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v39);
  if (v61 == 2)
  {
    v40 = 0;
  }
  else
  {
    v41 = v61 & 1;
    Hasher._combine(_:)(1u);
    v40 = v41;
  }
  Hasher._combine(_:)(v40);
  outlined retain of LocalePreferences?((uint64_t)v63, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v63, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
LABEL_56:
  swift_unknownObjectRelease();
  return Hasher._finalize()();
}

uint64_t Measurement<>.AttributedStyle<>.ByteCount.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  __int128 v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  char v19;
  __int128 v20;
  uint64_t v21;

  v14 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys>);
  v15 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  type metadata accessor for Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys(0, &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for Measurement<>.AttributedStyle<>.ByteCount.CodingKeys);
  lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys(&lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys, &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for Measurement<>.AttributedStyle<>.ByteCount.CodingKeys, (uint64_t)&protocol conformance descriptor for Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys);
  v6 = v21;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v6)
  {
    v7 = v14;
    lazy protocol witness table accessor for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v5, v3);
    v8 = v17;
    v9 = v18;
    v10 = v19;
    v11 = v20;
    *(_BYTE *)v7 = v16;
    *(_QWORD *)(v7 + 8) = v8;
    *(_BYTE *)(v7 + 16) = v9;
    *(_BYTE *)(v7 + 17) = v10;
    *(_OWORD *)(v7 + 24) = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void protocol witness for FormatStyle.format(_:) in conformance Measurement<A><>.AttributedStyle<>.ByteCount(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  char *v2;
  void *v4;
  double v5;
  char v6;
  double v7;
  char v8;
  char v9;
  id v10;
  double v11;
  id v12;
  void *v13;
  double v14;
  char v15;
  char v16;
  __int128 v17;

  v4 = *(void **)a1;
  v5 = *(double *)(a1 + 8);
  v6 = *v2;
  v7 = *((double *)v2 + 1);
  v8 = v2[16];
  v9 = v2[17];
  v10 = objc_msgSend((id)objc_opt_self(), sel_bytes);
  specialized Measurement<>.converted(to:)(v4, v10, (uint64_t)&v13, v5);

  v12 = v13;
  v11 = v14;
  LOBYTE(v13) = v6;
  v14 = v7;
  v15 = v8;
  v16 = v9;
  v17 = *(_OWORD *)(v2 + 24);
  swift_unknownObjectRetain();
  ByteCountFormatStyle.Attributed._format(_:doubleValue:)(a2, v11);
  swift_unknownObjectRelease();

}

uint64_t protocol witness for FormatStyle.locale(_:) in conformance Measurement<A><>.AttributedStyle<>.ByteCount@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;

  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(_BYTE *)(v2 + 16);
  v5 = *(_BYTE *)(v2 + 17);
  *(_BYTE *)a2 = *(_BYTE *)v2;
  *(_QWORD *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 16) = v4;
  *(_BYTE *)(a2 + 17) = v5;
  *(_OWORD *)(a2 + 24) = *a1;
  return swift_unknownObjectRetain();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Measurement<A><>.AttributedStyle<>.ByteCount@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Measurement<>.AttributedStyle<>.ByteCount.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Measurement<A><>.AttributedStyle<>.ByteCount(_QWORD *a1)
{
  return Measurement<>.AttributedStyle<>.ByteCount.encode(to:)(a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Measurement<A><>.AttributedStyle<>.ByteCount(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t (*v8)(uint64_t, uint64_t);
  void (*v10)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  Swift::UInt v37;
  Swift::UInt v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  char v58;
  char v59;
  _QWORD v60[18];
  _BYTE v61[144];
  _BYTE v62[152];

  v3 = *((_QWORD *)v1 + 1);
  v4 = v1[16];
  v5 = v1[17];
  v6 = *((_QWORD *)v1 + 4);
  Hasher._combine(_:)(*v1);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  ObjectType = swift_getObjectType();
  v8 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 48);
  swift_unknownObjectRetain();
  if ((v8(ObjectType, v6) & 1) != 0)
  {
    Hasher._combine(_:)(1u);
    return swift_unknownObjectRelease();
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v6 + 64))(ObjectType, v6);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v10 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v6 + 464);
  swift_unknownObjectRetain();
  v10(v60, ObjectType, v6);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v60, (uint64_t)v61, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v61, (uint64_t)v62, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v62) != 1)
  {
    outlined init with take of LocalePreferences?((uint64_t)v61, (uint64_t)&v42, &demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v42 == 2)
    {
      v11 = 0;
    }
    else
    {
      v11 = v42 & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v11);
    v12 = v43;
    if (v43)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(_QWORD *)(v12 + 16));
      v13 = *(_QWORD *)(v12 + 16);
      if (v13)
      {
        outlined retain of LocalePreferences?((uint64_t)v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        v14 = v12 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v14 += 16;
          --v13;
        }
        while (v13);
        swift_bridgeObjectRelease();
        if (!v44)
        {
LABEL_13:
          Hasher._combine(_:)(0);
          if (!v45)
            goto LABEL_14;
          goto LABEL_20;
        }
LABEL_19:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v45)
        {
LABEL_14:
          Hasher._combine(_:)(0);
          v15 = v46;
          if (!v46)
            goto LABEL_15;
          goto LABEL_21;
        }
LABEL_20:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        v15 = v46;
        if (!v46)
        {
LABEL_15:
          Hasher._combine(_:)(0);
          v16 = v47;
          if (!v47)
          {
LABEL_16:
            Hasher._combine(_:)(0);
            goto LABEL_23;
          }
LABEL_22:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v16);
          swift_bridgeObjectRelease();
LABEL_23:
          v18 = v48;
          v17 = v49;
          v20 = v50;
          v19 = v51;
          v21 = v52;
          if (v48)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
            v22 = v17;
            v23 = v20;
            v24 = v19;
            v25 = v21;
            v26 = v18;
            _CFObject.hash(into:)();
            if (v17)
              goto LABEL_25;
          }
          else
          {
            Hasher._combine(_:)(0);
            v31 = v21;
            v32 = v17;
            v33 = v20;
            v34 = v19;
            if (v17)
            {
LABEL_25:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
              v27 = v17;
              _CFObject.hash(into:)();

              if (v20)
                goto LABEL_26;
              goto LABEL_31;
            }
          }
          Hasher._combine(_:)(0);
          if (v20)
          {
LABEL_26:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
            v28 = v20;
            _CFObject.hash(into:)();

            if (v19)
              goto LABEL_27;
            goto LABEL_32;
          }
LABEL_31:
          Hasher._combine(_:)(0);
          if (v19)
          {
LABEL_27:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
            v29 = v19;
            _CFObject.hash(into:)();

            if (v21)
            {
LABEL_28:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
              v30 = v21;
              _CFObject.hash(into:)();

              goto LABEL_34;
            }
LABEL_33:
            Hasher._combine(_:)(0);
            v30 = 0;
LABEL_34:

            v35 = v53;
            if (v35)
            {
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              specialized Dictionary<>.hash(into:)(a1, v35);
              swift_bridgeObjectRelease();
              v36 = v54;
              if (v54)
                goto LABEL_36;
            }
            else
            {
              Hasher._combine(_:)(0);
              v36 = v54;
              if (v54)
              {
LABEL_36:
                Hasher._combine(_:)(1u);
                swift_bridgeObjectRetain();
                specialized Dictionary<>.hash(into:)(a1, v36);
                swift_bridgeObjectRelease();
                if (v55)
                {
LABEL_37:
                  Hasher._combine(_:)(1u);
                  swift_bridgeObjectRetain();
                  String.hash(into:)();
                  swift_bridgeObjectRelease();
LABEL_41:
                  if (v56 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }
                  else
                  {
                    v37 = v56 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v37);
                  }
                  if (v57 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }
                  else
                  {
                    v38 = v57 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v38);
                  }
                  if (v58 == 2)
                  {
                    v39 = 0;
                  }
                  else
                  {
                    v39 = v58 & 1;
                    Hasher._combine(_:)(1u);
                  }
                  Hasher._combine(_:)(v39);
                  if (v59 == 2)
                  {
                    v40 = 0;
                  }
                  else
                  {
                    v41 = v59 & 1;
                    Hasher._combine(_:)(1u);
                    v40 = v41;
                  }
                  Hasher._combine(_:)(v40);
                  outlined retain of LocalePreferences?((uint64_t)v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
                  outlined retain of LocalePreferences?((uint64_t)v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
                  return swift_unknownObjectRelease();
                }
LABEL_40:
                Hasher._combine(_:)(0);
                goto LABEL_41;
              }
            }
            Hasher._combine(_:)(0);
            if (v55)
              goto LABEL_37;
            goto LABEL_40;
          }
LABEL_32:
          Hasher._combine(_:)(0);
          if (v21)
            goto LABEL_28;
          goto LABEL_33;
        }
LABEL_21:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v15);
        swift_bridgeObjectRelease();
        v16 = v47;
        if (!v47)
          goto LABEL_16;
        goto LABEL_22;
      }
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    outlined retain of LocalePreferences(&v42);
    if (!v44)
      goto LABEL_13;
    goto LABEL_19;
  }
  Hasher._combine(_:)(0);
  return swift_unknownObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Measurement<A><>.AttributedStyle<>.ByteCount()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t (*v7)(uint64_t, uint64_t);
  Swift::UInt8 v8;
  void (*v9)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  Swift::UInt v36;
  Swift::UInt v37;
  Swift::UInt8 v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  char v58;
  char v59;
  _QWORD v60[18];
  _BYTE v61[144];
  _BYTE v62[144];
  _BYTE v63[72];

  v1 = *v0;
  v2 = *((_QWORD *)v0 + 1);
  v3 = v0[16];
  v4 = v0[17];
  v5 = *((_QWORD *)v0 + 4);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  ObjectType = swift_getObjectType();
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain();
  if ((v7(ObjectType, v5) & 1) != 0)
  {
    v8 = 1;
LABEL_5:
    Hasher._combine(_:)(v8);
    goto LABEL_55;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(ObjectType, v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v9 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v5 + 464);
  swift_unknownObjectRetain();
  v9(v60, ObjectType, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v60, (uint64_t)v61, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v61, (uint64_t)v62, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v62) == 1)
  {
    v8 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v61, (uint64_t)&v42, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v42 == 2)
  {
    v10 = 0;
  }
  else
  {
    v10 = v42 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v10);
  v11 = v43;
  if (!v43)
  {
    Hasher._combine(_:)(0);
LABEL_19:
    outlined retain of LocalePreferences(&v42);
    if (!v44)
      goto LABEL_14;
    goto LABEL_20;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v11 + 16));
  v12 = *(_QWORD *)(v11 + 16);
  if (!v12)
    goto LABEL_19;
  outlined retain of LocalePreferences?((uint64_t)v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v13 = v11 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v13 += 16;
    --v12;
  }
  while (v12);
  swift_bridgeObjectRelease();
  if (!v44)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v45)
      goto LABEL_15;
    goto LABEL_21;
  }
LABEL_20:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v45)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    v14 = v46;
    if (!v46)
      goto LABEL_16;
LABEL_22:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v63, v14);
    swift_bridgeObjectRelease();
    v15 = v47;
    if (!v47)
      goto LABEL_17;
    goto LABEL_23;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v14 = v46;
  if (v46)
    goto LABEL_22;
LABEL_16:
  Hasher._combine(_:)(0);
  v15 = v47;
  if (!v47)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_24;
  }
LABEL_23:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v63, v15);
  swift_bridgeObjectRelease();
LABEL_24:
  v17 = v48;
  v16 = v49;
  v19 = v50;
  v18 = v51;
  v20 = v52;
  if (v48)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v21 = v16;
    v22 = v19;
    v23 = v18;
    v24 = v20;
    v25 = v17;
    _CFObject.hash(into:)();
    if (v16)
      goto LABEL_26;
  }
  else
  {
    Hasher._combine(_:)(0);
    v30 = v20;
    v31 = v16;
    v32 = v19;
    v33 = v18;
    if (v16)
    {
LABEL_26:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      v26 = v16;
      _CFObject.hash(into:)();

      if (v19)
        goto LABEL_27;
      goto LABEL_32;
    }
  }
  Hasher._combine(_:)(0);
  if (v19)
  {
LABEL_27:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v27 = v19;
    _CFObject.hash(into:)();

    if (v18)
      goto LABEL_28;
LABEL_33:
    Hasher._combine(_:)(0);
    if (v20)
      goto LABEL_29;
    goto LABEL_34;
  }
LABEL_32:
  Hasher._combine(_:)(0);
  if (!v18)
    goto LABEL_33;
LABEL_28:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  v28 = v18;
  _CFObject.hash(into:)();

  if (v20)
  {
LABEL_29:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v29 = v20;
    _CFObject.hash(into:)();

    goto LABEL_35;
  }
LABEL_34:
  Hasher._combine(_:)(0);
  v29 = 0;
LABEL_35:

  v34 = v53;
  if (v34)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v63, v34);
    swift_bridgeObjectRelease();
    v35 = v54;
    if (v54)
      goto LABEL_37;
LABEL_40:
    Hasher._combine(_:)(0);
    if (v55)
      goto LABEL_38;
LABEL_41:
    Hasher._combine(_:)(0);
    goto LABEL_42;
  }
  Hasher._combine(_:)(0);
  v35 = v54;
  if (!v54)
    goto LABEL_40;
LABEL_37:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v63, v35);
  swift_bridgeObjectRelease();
  if (!v55)
    goto LABEL_41;
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_42:
  if (v56 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v36 = v56 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v36);
  }
  if (v57 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v37 = v57 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v37);
  }
  if (v58 == 2)
  {
    v38 = 0;
  }
  else
  {
    v38 = v58 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v38);
  if (v59 == 2)
  {
    v39 = 0;
  }
  else
  {
    v40 = v59 & 1;
    Hasher._combine(_:)(1u);
    v39 = v40;
  }
  Hasher._combine(_:)(v39);
  outlined retain of LocalePreferences?((uint64_t)v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
LABEL_55:
  swift_unknownObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Measurement<A><>.AttributedStyle<>.ByteCount(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  char v4;
  unsigned __int8 v5;
  uint64_t v6;
  char v7;
  char v8;
  unsigned __int8 v10[8];
  uint64_t v11;
  char v12;
  char v13;
  __int128 v14;
  unsigned __int8 v15[8];
  uint64_t v16;
  char v17;
  char v18;
  __int128 v19;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_BYTE *)(a1 + 16);
  v4 = *(_BYTE *)(a1 + 17);
  v5 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_BYTE *)(a2 + 16);
  v8 = *(_BYTE *)(a2 + 17);
  v15[0] = *(_BYTE *)a1;
  v16 = v2;
  v17 = v3;
  v18 = v4;
  v19 = *(_OWORD *)(a1 + 24);
  v10[0] = v5;
  v11 = v6;
  v12 = v7;
  v13 = v8;
  v14 = *(_OWORD *)(a2 + 24);
  return specialized static Measurement<>.FormatStyle<>.ByteCount.== infix(_:_:)(v15, v10) & 1;
}

uint64_t Measurement<>.AttributedStyle.subscript.getter()
{
  return swift_getAtKeyPath();
}

uint64_t key path setter for Measurement<>.AttributedStyle.subscript<A>(dynamicMember:) : <A><A1>Measurement<A><>.AttributedStyleAA1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for Measurement<>.AttributedStyle(0, *(_QWORD *)(a4 + a3 - 16), a3, a4);
  swift_retain();
  specialized Measurement<>.AttributedStyle.subscript.setter(a1);
  return swift_release();
}

uint64_t Measurement<>.AttributedStyle.subscript.setter(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  specialized Measurement<>.AttributedStyle.subscript.setter(a1);
  swift_release();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*MEMORY[0x1E0DEC880] + v3 + 8) - 8) + 8))(a1);
}

void (*Measurement<>.AttributedStyle.subscript.modify(_QWORD *a1, _QWORD *a2))(uint64_t a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  v5 = malloc(0x38uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = *(_QWORD *)(*MEMORY[0x1E0DEC880] + *a2 + 8);
  v5[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[4] = malloc(v8);
  v5[5] = malloc(v8);
  v5[6] = malloc(v8);
  swift_getAtKeyPath();
  return Measurement<>.AttributedStyle.subscript.modify;
}

void Measurement<>.AttributedStyle.subscript.modify(uint64_t a1, char a2)
{
  _QWORD *v3;
  void (*v4)(_QWORD, _QWORD, _QWORD);
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void *, uint64_t);

  v3 = *(_QWORD **)a1;
  v4 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 24) + 16);
  v4(*(_QWORD *)(*(_QWORD *)a1 + 40), v3[6], v3[2]);
  v5 = (void *)v3[5];
  v6 = (void *)v3[6];
  v8 = v3[3];
  v7 = (void *)v3[4];
  v9 = v3[2];
  if ((a2 & 1) != 0)
  {
    v4(v3[4], v3[5], v3[2]);
    swift_retain();
    swift_setAtWritableKeyPath();
    swift_release();
    v10 = *(void (**)(void *, uint64_t))(v8 + 8);
    v10(v5, v9);
  }
  else
  {
    swift_retain();
    swift_setAtWritableKeyPath();
    swift_release();
    v10 = *(void (**)(void *, uint64_t))(v8 + 8);
  }
  v10(v6, v9);
  free(v6);
  free(v5);
  free(v7);
  free(v3);
}

void specialized FloatingPointFormatStyle.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t (*v12)(uint64_t, uint64_t);
  Swift::UInt8 v13;
  void (*v14)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v15;
  Swift::UInt8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void *v23;
  void *v24;
  void *v25;
  char *v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  void *v33;
  void *v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  void *v40;
  id v41;
  void *v42;
  id v43;
  id v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  Swift::UInt v48;
  Swift::UInt v49;
  Swift::UInt8 v50;
  Swift::UInt8 v51;
  Swift::UInt8 v52;
  uint64_t v53;
  Swift::UInt64 v54;
  Swift::UInt64 v55;
  int v56;
  Swift::UInt v57;
  int v58;
  unsigned int v59;
  uint64_t v60;
  int v61;
  Swift::UInt v62;
  int *v63;
  char *v64;
  uint64_t v65;
  int v66;
  Swift::UInt v67;
  Swift::UInt64 v68;
  Swift::UInt v69;
  uint64_t v70;
  void *v71;
  id v72;
  uint64_t v73;
  void *v74;
  id v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  _BYTE v79[144];
  char v80[8];
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  char v95;
  char v96;
  char v97;
  _QWORD v98[18];
  _BYTE v99[144];
  _BYTE v100[152];

  v2 = v1;
  v4 = type metadata accessor for FloatingPointRoundingRule();
  v5 = *(_QWORD *)(v4 - 8);
  v77 = v4;
  v78 = v5;
  MEMORY[0x1E0C80A78](v4);
  v76 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v1 + 8);
  ObjectType = swift_getObjectType();
  v12 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 48);
  swift_unknownObjectRetain();
  if ((v12(ObjectType, v10) & 1) == 0)
  {
    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v10 + 64))(ObjectType, v10);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v14 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v10 + 464);
    swift_unknownObjectRetain();
    v14(v98, ObjectType, v10);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v98, (uint64_t)v99, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v99, (uint64_t)v100, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v100) == 1)
    {
      v13 = 0;
      goto LABEL_5;
    }
    outlined init with take of LocalePreferences?((uint64_t)v99, (uint64_t)v80, &demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v80[0] == 2)
    {
      v16 = 0;
    }
    else
    {
      v16 = v80[0] & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v16);
    v17 = v81;
    if (v81)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(_QWORD *)(v17 + 16));
      v18 = *(_QWORD *)(v17 + 16);
      if (v18)
      {
        outlined retain of LocalePreferences?((uint64_t)v99, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        v19 = v17 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v19 += 16;
          --v18;
        }
        while (v18);
        swift_bridgeObjectRelease();
        if (!v82)
        {
LABEL_14:
          Hasher._combine(_:)(0);
          if (!v83)
            goto LABEL_15;
          goto LABEL_22;
        }
LABEL_21:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v83)
        {
LABEL_15:
          Hasher._combine(_:)(0);
          v20 = v84;
          if (!v84)
            goto LABEL_16;
          goto LABEL_23;
        }
LABEL_22:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        v20 = v84;
        if (!v84)
        {
LABEL_16:
          Hasher._combine(_:)(0);
          v21 = v85;
          if (!v85)
          {
LABEL_17:
            Hasher._combine(_:)(0);
            goto LABEL_25;
          }
LABEL_24:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v21);
          swift_bridgeObjectRelease();
LABEL_25:
          v23 = v87;
          v24 = v88;
          v75 = v89;
          v25 = v90;
          v72 = v86;
          v73 = v1;
          v71 = v90;
          if (v86)
          {
            v26 = v9;
            v27 = v86;
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
            v28 = v23;
            v29 = v24;
            v30 = v75;
            v31 = v25;
            v32 = v27;
            _CFObject.hash(into:)();
            if (v23)
            {
LABEL_27:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
              v33 = v23;
              v34 = v24;
              v35 = v23;
              _CFObject.hash(into:)();

              v24 = v34;
              goto LABEL_30;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            v36 = v25;
            v37 = v23;
            v38 = v24;
            v39 = v75;
            v26 = v9;
            if (v23)
              goto LABEL_27;
          }
          v33 = v23;
          Hasher._combine(_:)(0);
LABEL_30:
          v40 = v71;
          v74 = v24;
          if (v24)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
            v41 = v24;
            _CFObject.hash(into:)();

          }
          else
          {
            Hasher._combine(_:)(0);
          }
          v42 = v33;
          v9 = v26;
          v2 = v73;
          if (v75)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
            v43 = v75;
            _CFObject.hash(into:)();

            if (v40)
            {
LABEL_35:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
              v44 = v40;
              _CFObject.hash(into:)();

              goto LABEL_38;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            if (v40)
              goto LABEL_35;
          }
          Hasher._combine(_:)(0);
          v44 = 0;
LABEL_38:
          v45 = v74;

          v46 = v91;
          if (v46)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            specialized Dictionary<>.hash(into:)(a1, v46);
            swift_bridgeObjectRelease();
            v47 = v92;
            if (v92)
              goto LABEL_40;
          }
          else
          {
            Hasher._combine(_:)(0);
            v47 = v92;
            if (v92)
            {
LABEL_40:
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              specialized Dictionary<>.hash(into:)(a1, v47);
              swift_bridgeObjectRelease();
              if (v93)
              {
LABEL_41:
                Hasher._combine(_:)(1u);
                swift_bridgeObjectRetain();
                String.hash(into:)();
                swift_bridgeObjectRelease();
LABEL_45:
                v15 = v77;
                if (v94 == 2)
                {
                  Hasher._combine(_:)(0);
                }
                else
                {
                  v48 = v94 & 1;
                  Hasher._combine(_:)(1u);
                  Hasher._combine(_:)(v48);
                }
                if (v95 == 2)
                {
                  Hasher._combine(_:)(0);
                }
                else
                {
                  v49 = v95 & 1;
                  Hasher._combine(_:)(1u);
                  Hasher._combine(_:)(v49);
                }
                if (v96 == 2)
                {
                  v50 = 0;
                }
                else
                {
                  v50 = v96 & 1;
                  Hasher._combine(_:)(1u);
                }
                Hasher._combine(_:)(v50);
                if (v97 == 2)
                {
                  v51 = 0;
                }
                else
                {
                  v52 = v97 & 1;
                  Hasher._combine(_:)(1u);
                  v51 = v52;
                }
                Hasher._combine(_:)(v51);
                outlined retain of LocalePreferences?((uint64_t)v99, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
                outlined retain of LocalePreferences?((uint64_t)v99, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
                swift_unknownObjectRelease();
                goto LABEL_58;
              }
LABEL_44:
              Hasher._combine(_:)(0);
              goto LABEL_45;
            }
          }
          Hasher._combine(_:)(0);
          if (v93)
            goto LABEL_41;
          goto LABEL_44;
        }
LABEL_23:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v20);
        swift_bridgeObjectRelease();
        v21 = v85;
        if (!v85)
          goto LABEL_17;
        goto LABEL_24;
      }
      outlined init with take of LocalePreferences?((uint64_t)v99, (uint64_t)v79, &demangling cache variable for type metadata for LocalePreferences?);
      v22 = v79;
    }
    else
    {
      Hasher._combine(_:)(0);
      v22 = v80;
    }
    outlined retain of LocalePreferences(v22);
    if (!v82)
      goto LABEL_14;
    goto LABEL_21;
  }
  v13 = 1;
LABEL_5:
  Hasher._combine(_:)(v13);
  swift_unknownObjectRelease();
  v15 = v77;
LABEL_58:
  v53 = v2
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>)
               + 36);
  if ((*(_BYTE *)(v53 + 8) & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v54 = *(_QWORD *)v53;
    Hasher._combine(_:)(1u);
    if ((v54 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v55 = v54;
    else
      v55 = 0;
    Hasher._combine(_:)(v55);
  }
  outlined init with take of LocalePreferences?(v53 + 16, (uint64_t)v100, &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  specialized Optional<A>.hash(into:)();
  v56 = *(unsigned __int8 *)(v53 + 73);
  if (v56 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v57 = v56 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v57);
  }
  v58 = *(unsigned __int16 *)(v53 + 74);
  v59 = v58 | (*(unsigned __int8 *)(v53 + 76) << 16);
  if (v58 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v59 & 1);
    Hasher._combine(_:)((v59 >> 8) & 1);
    Hasher._combine(_:)(HIWORD(v59) & 1);
  }
  v60 = v78;
  v61 = *(unsigned __int8 *)(v53 + 77);
  if (v61 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v62 = v61 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v62);
  }
  v63 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  outlined init with copy of (Hashable & Sendable)?(v53 + v63[9], (uint64_t)v9, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v9, 1, v15) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v64 = v76;
    (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v76, v9, v15);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v60 + 8))(v64, v15);
  }
  v65 = v53 + v63[10];
  v66 = *(unsigned __int8 *)(v65 + 8);
  if (v66 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v67 = *(_QWORD *)v65;
    Hasher._combine(_:)(1u);
    if ((v66 & 1) != 0)
    {
      Hasher._combine(_:)(1uLL);
      if ((v67 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v68 = v67;
      else
        v68 = 0;
      Hasher._combine(_:)(v68);
    }
    else
    {
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v67);
    }
  }
  v69 = *(unsigned __int8 *)(v53 + v63[11]);
  if (v69 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v69);
  }
}

uint64_t specialized Range<>.init<A>(_range:in:)@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X2>, unint64_t *a4@<X8>)
{
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _OWORD v26[2];
  __int128 v27;
  _OWORD v28[2];
  __int128 v29;
  __int128 v30[3];
  _BYTE v31[40];
  __int128 v32[3];
  _BYTE v33[48];

  v8 = a3[2];
  v28[0] = a3[1];
  v28[1] = v8;
  v29 = a3[3];
  v30[0] = v28[0];
  v30[1] = v8;
  v30[2] = v29;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v30, (uint64_t)v31);
  outlined retain of Locale((uint64_t)v31);
  v9 = BigString.index(from:)(a1);
  v11 = v10;
  v13 = v12;
  v15 = v14;
  outlined release of Locale((uint64_t)v28);
  if (v15 == 2)
    goto LABEL_4;
  v16 = a3[2];
  v26[0] = a3[1];
  v26[1] = v16;
  v27 = a3[3];
  v32[0] = v26[0];
  v32[1] = v16;
  v32[2] = v27;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v32, (uint64_t)v33);
  outlined retain of Locale((uint64_t)v33);
  v17 = BigString.index(from:)(a2);
  v24 = v19;
  v25 = v18;
  v21 = v20;
  outlined release of Locale((uint64_t)v26);
  if (v21 == 2 || v9 >> 10 < (unint64_t)BigString.startIndex.getter() >> 10)
  {
LABEL_4:
    result = swift_release();
  }
  else
  {
    v23 = BigString.endIndex.getter();
    result = swift_release();
    if (v23 >> 10 >= v17 >> 10)
    {
      *a4 = v9;
      a4[1] = v11;
      a4[2] = v13;
      a4[3] = v15;
      a4[4] = v17;
      a4[5] = v25;
      a4[6] = v24;
      a4[7] = v21;
      return result;
    }
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  a4[3] = 2;
  *((_OWORD *)a4 + 2) = 0u;
  *((_OWORD *)a4 + 3) = 0u;
  return result;
}

uint64_t specialized AttributeContainer.subscript.setter(char a1)
{
  return specialized AttributeContainer.subscript.setter(a1, (uint64_t)&type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart, (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart, 0xD00000000000001BLL, 0x8000000182307F60);
}

{
  __int128 v3;
  __int128 v4;
  _OWORD v5[2];
  uint64_t v6;

  if (a1 == 5)
  {
    v6 = 0;
    memset(v5, 0, sizeof(v5));
    v3 = 0u;
    v4 = 0u;
  }
  else
  {
    *((_QWORD *)&v4 + 1) = &type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol;
    *(_QWORD *)&v5[0] = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol();
    LOBYTE(v3) = a1;
    *(_OWORD *)((char *)v5 + 8) = xmmword_18205FD60;
    BYTE8(v5[1]) = 1;
    v6 = 0;
  }
  return specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v3, 0xD00000000000001DLL, 0x8000000182307F80);
}

{
  __int128 v3;
  __int128 v4;
  _OWORD v5[2];
  uint64_t v6;

  if (a1 == 12)
  {
    v6 = 0;
    memset(v5, 0, sizeof(v5));
    v3 = 0u;
    v4 = 0u;
  }
  else
  {
    *((_QWORD *)&v4 + 1) = &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component;
    *(_QWORD *)&v5[0] = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component();
    LOBYTE(v3) = a1;
    *(_OWORD *)((char *)v5 + 8) = xmmword_18205FD60;
    BYTE8(v5[1]) = 1;
    v6 = 0;
  }
  return specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v3, 0xD00000000000001DLL, 0x8000000182303DF0);
}

{
  __int128 v3;
  __int128 v4;
  _OWORD v5[2];
  uint64_t v6;

  if (a1 == 17)
  {
    v6 = 0;
    memset(v5, 0, sizeof(v5));
    v3 = 0u;
    v4 = 0u;
  }
  else
  {
    *((_QWORD *)&v4 + 1) = &type metadata for AttributeScopes.FoundationAttributes.DateFieldAttribute.Field;
    *(_QWORD *)&v5[0] = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DateFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute.Field();
    LOBYTE(v3) = a1;
    *(_OWORD *)((char *)v5 + 8) = xmmword_18205FD60;
    BYTE8(v5[1]) = 1;
    v6 = 0;
  }
  return specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v3, 0xD00000000000001ALL, 0x8000000182307F40);
}

uint64_t specialized AttributeContainer.subscript.setter(char a1, uint64_t a2, uint64_t (*a3)(void), unint64_t a4, unint64_t a5)
{
  char v7;
  __int128 v9;
  __int128 v10;
  _OWORD v11[2];
  uint64_t v12;

  if (a1 == 2)
  {
    v12 = 0;
    memset(v11, 0, sizeof(v11));
    v9 = 0u;
    v10 = 0u;
  }
  else
  {
    v7 = a1 & 1;
    *((_QWORD *)&v10 + 1) = a2;
    *(_QWORD *)&v11[0] = a3();
    LOBYTE(v9) = v7;
    *(_OWORD *)((char *)v11 + 8) = xmmword_18205FD60;
    BYTE8(v11[1]) = 1;
    v12 = 0;
  }
  return specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v9, a4, a5);
}

unint64_t lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef;
  if (!lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef)
  {
    type metadata accessor for CFDictionaryRef(255);
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for CFDictionaryRef, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef);
  }
  return result;
}

uint64_t type metadata accessor for Measurement<>.AttributedStyle.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Measurement<>.AttributedStyle.CodingKeys);
}

uint64_t type metadata accessor for Measurement<>.AttributedStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Measurement<>.AttributedStyle);
}

uint64_t type metadata accessor for Measurement<>.AttributedStyle<>.ByteCount.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Measurement<>.AttributedStyle<>.ByteCount.CodingKeys);
}

uint64_t lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(_QWORD), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys(255, a2, a3);
    result = MEMORY[0x186DA9D64](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ByteCountFormatStyle.Attributed, &type metadata for ByteCountFormatStyle.Attributed);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ByteCountFormatStyle.Attributed, &type metadata for ByteCountFormatStyle.Attributed);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ByteCountFormatStyle.Attributed, &type metadata for ByteCountFormatStyle.Attributed);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ByteCountFormatStyle.Attributed, &type metadata for ByteCountFormatStyle.Attributed);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed);
  }
  return result;
}

uint64_t specialized Measurement<>.AttributedStyle.subscript.setter(uint64_t a1)
{
  __n128 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, __n128))(v2 + 16))((char *)&v5 - v3, v1);
  return swift_setAtWritableKeyPath();
}

uint64_t instantiation function for generic protocol witness table for Measurement<A><>.AttributedStyle(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  a1[1] = MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A><>.AttributedStyle);
  a1[2] = MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A><>.AttributedStyle, a2);
  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A><>.AttributedStyle, a2);
  a1[3] = result;
  return result;
}

void base witness table accessor for Equatable in Measurement<A><>.AttributedStyle()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t instantiation function for generic protocol witness table for Measurement<A><>.AttributedStyle<>.ByteCount(_QWORD *a1)
{
  uint64_t result;

  a1[1] = lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys(&lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount and conformance Measurement<A><>.AttributedStyle<>.ByteCount, &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount, (uint64_t (*)(_QWORD))type metadata accessor for Measurement<>.AttributedStyle<>.ByteCount, (uint64_t)&protocol conformance descriptor for Measurement<A><>.AttributedStyle<>.ByteCount);
  a1[2] = lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys(&lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount and conformance Measurement<A><>.AttributedStyle<>.ByteCount, &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount, (uint64_t (*)(_QWORD))type metadata accessor for Measurement<>.AttributedStyle<>.ByteCount, (uint64_t)&protocol conformance descriptor for Measurement<A><>.AttributedStyle<>.ByteCount);
  result = lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys(&lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount and conformance Measurement<A><>.AttributedStyle<>.ByteCount, &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount, (uint64_t (*)(_QWORD))type metadata accessor for Measurement<>.AttributedStyle<>.ByteCount, (uint64_t)&protocol conformance descriptor for Measurement<A><>.AttributedStyle<>.ByteCount);
  a1[3] = result;
  return result;
}

void type metadata accessor for Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0);
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t type metadata accessor for Measurement<>.AttributedStyle<>.ByteCount(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Measurement<>.AttributedStyle<>.ByteCount);
}

uint64_t base witness table accessor for Equatable in Measurement<A><>.AttributedStyle<>.ByteCount()
{
  return lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys(&lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount and conformance Measurement<A><>.AttributedStyle<>.ByteCount, &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount, (uint64_t (*)(_QWORD))type metadata accessor for Measurement<>.AttributedStyle<>.ByteCount, (uint64_t)&protocol conformance descriptor for Measurement<A><>.AttributedStyle<>.ByteCount);
}

_BYTE *sub_181B2500C@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_BYTE *sub_181B25018(_BYTE *result, _BYTE *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_181B25024()
{
  return 0;
}

uint64_t sub_181B25034@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *sub_181B25040(_QWORD *result, uint64_t a2)
{
  *(_QWORD *)(a2 + 8) = *result;
  return result;
}

uint64_t sub_181B2504C()
{
  return 0;
}

uint64_t sub_181B2505C@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 16);
  return result;
}

_BYTE *sub_181B25068(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 16) = *result;
  return result;
}

uint64_t sub_181B25074()
{
  return 0;
}

uint64_t sub_181B25084@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 17);
  return result;
}

_BYTE *sub_181B25090(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 17) = *result;
  return result;
}

uint64_t sub_181B2509C()
{
  return 0;
}

uint64_t sub_181B250AC@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = *(_OWORD *)(a1 + 24);
  return swift_unknownObjectRetain();
}

__n128 sub_181B250BC(__n128 *a1, uint64_t a2)
{
  __n128 result;
  __n128 v4;

  v4 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  result = v4;
  *(__n128 *)(a2 + 24) = v4;
  return result;
}

uint64_t sub_181B25104()
{
  return 0;
}

uint64_t sub_181B25114()
{
  return Measurement<>.AttributedStyle.subscript.getter();
}

uint64_t sub_181B2513C()
{
  return 16;
}

__n128 sub_181B25148(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata completion function for Measurement<>.AttributedStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for Measurement<>.FormatStyle(319, *(_QWORD *)(a1 + 16), a3, a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for Measurement<>.AttributedStyle(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *__dst;
  int *v32;
  uint64_t v33;
  _OWORD *v34;

  v6 = type metadata accessor for Measurement<>.FormatStyle(0, *(_QWORD *)(a3 + 16), a3, a4);
  v7 = *(_DWORD *)(*(_QWORD *)(v6 - 8) + 80);
  if ((v7 & 0x20000) != 0)
  {
    v15 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v15 + ((v7 + 16) & ~(unint64_t)v7);
    swift_retain();
  }
  else
  {
    v8 = v6;
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    v9 = *(int *)(v6 + 32);
    v10 = (_OWORD *)(a1 + v9);
    v11 = (_OWORD *)((char *)a2 + v9);
    swift_unknownObjectRetain();
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v33 = v13;
      v34 = v10;
      *v10 = *v11;
      v16 = *(int *)(v12 + 36);
      v17 = (char *)v10 + v16;
      v18 = (char *)v11 + v16;
      v17[8] = v18[8];
      *(_QWORD *)v17 = *(_QWORD *)v18;
      *(_OWORD *)(v17 + 57) = *(_OWORD *)(v18 + 57);
      v19 = *((_OWORD *)v18 + 3);
      v20 = *((_OWORD *)v18 + 1);
      *((_OWORD *)v17 + 2) = *((_OWORD *)v18 + 2);
      *((_OWORD *)v17 + 3) = v19;
      *((_OWORD *)v17 + 1) = v20;
      v17[73] = v18[73];
      v17[76] = v18[76];
      *((_WORD *)v17 + 37) = *((_WORD *)v18 + 37);
      v17[77] = v18[77];
      v32 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v21 = v32[9];
      __dst = &v17[v21];
      v22 = &v18[v21];
      v23 = type metadata accessor for FloatingPointRoundingRule();
      v24 = *(_QWORD *)(v23 - 8);
      v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
      swift_unknownObjectRetain();
      if (v25(v22, 1, v23))
      {
        v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(__dst, v22, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v24 + 16))(__dst, v22, v23);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(__dst, 0, 1, v23);
      }
      v27 = v32[10];
      v28 = &v17[v27];
      v29 = &v18[v27];
      *(_QWORD *)v28 = *(_QWORD *)v29;
      v28[8] = v29[8];
      v17[v32[11]] = v18[v32[11]];
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v34, 0, 1, v12);
    }
    *(_BYTE *)(a1 + *(int *)(v8 + 36)) = *((_BYTE *)a2 + *(int *)(v8 + 36));
    *(_BYTE *)(a1 + *(int *)(v8 + 40)) = *((_BYTE *)a2 + *(int *)(v8 + 40));
  }
  return a1;
}

uint64_t destroy for Measurement<>.AttributedStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  swift_unknownObjectRelease();
  v6 = a1 + *(int *)(type metadata accessor for Measurement<>.FormatStyle(0, *(_QWORD *)(a2 + 16), v4, v5) + 32);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
  {
    swift_unknownObjectRelease();
    v9 = *(int *)(v7 + 36);
    v10 = v6 + v9 + *(int *)(type metadata accessor for NumberFormatStyleConfiguration.Collection(0) + 36);
    v11 = type metadata accessor for FloatingPointRoundingRule();
    v12 = *(_QWORD *)(v11 - 8);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
  }
  return result;
}

uint64_t initializeWithCopy for Measurement<>.AttributedStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int *v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *__dst;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = (int *)type metadata accessor for Measurement<>.FormatStyle(0, *(_QWORD *)(a3 + 16), a3, a4);
  v7 = v6[8];
  v8 = (_OWORD *)(a1 + v7);
  v9 = (_OWORD *)(a2 + v7);
  swift_unknownObjectRetain();
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v31 = v11;
    v32 = v8;
    *v8 = *v9;
    v13 = *(int *)(v10 + 36);
    v14 = (char *)v8 + v13;
    v15 = (char *)v9 + v13;
    v14[8] = v15[8];
    *(_QWORD *)v14 = *(_QWORD *)v15;
    *(_OWORD *)(v14 + 57) = *(_OWORD *)(v15 + 57);
    v16 = *((_OWORD *)v15 + 3);
    v17 = *((_OWORD *)v15 + 1);
    *((_OWORD *)v14 + 2) = *((_OWORD *)v15 + 2);
    *((_OWORD *)v14 + 3) = v16;
    *((_OWORD *)v14 + 1) = v17;
    v14[73] = v15[73];
    v14[76] = v15[76];
    *((_WORD *)v14 + 37) = *((_WORD *)v15 + 37);
    v14[77] = v15[77];
    v18 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    v19 = *(int *)(v18 + 36);
    __dst = &v14[v19];
    v30 = v18;
    v20 = &v15[v19];
    v21 = type metadata accessor for FloatingPointRoundingRule();
    v22 = *(_QWORD *)(v21 - 8);
    v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
    swift_unknownObjectRetain();
    if (v23(v20, 1, v21))
    {
      v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(__dst, v20, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(__dst, v20, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(__dst, 0, 1, v21);
    }
    v25 = *(int *)(v30 + 40);
    v26 = &v14[v25];
    v27 = &v15[v25];
    *(_QWORD *)v26 = *(_QWORD *)v27;
    v26[8] = v27[8];
    v14[*(int *)(v30 + 44)] = v15[*(int *)(v30 + 44)];
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v32, 0, 1, v10);
  }
  *(_BYTE *)(a1 + v6[9]) = *(_BYTE *)(a2 + v6[9]);
  *(_BYTE *)(a1 + v6[10]) = *(_BYTE *)(a2 + v6[10]);
  return a1;
}

uint64_t assignWithCopy for Measurement<>.AttributedStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(_QWORD *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unsigned int (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(char *, uint64_t, uint64_t);
  int v45;
  int v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v57;
  char *__dst;
  uint64_t v59;
  int *v60;
  int *v61;
  int *v62;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 16) = v6;
  v9 = (int *)type metadata accessor for Measurement<>.FormatStyle(0, *(_QWORD *)(a3 + 16), v7, v8);
  v10 = v9[8];
  v11 = (_QWORD *)(a1 + v10);
  v12 = (_QWORD *)(a2 + v10);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (v17)
    {
      outlined destroy of Any?((uint64_t)v11, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
      goto LABEL_7;
    }
    v62 = v9;
    v32 = v12[1];
    *v11 = *v12;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    v11[1] = v32;
    v33 = *(int *)(v13 + 36);
    v34 = (char *)v11 + v33;
    v35 = (char *)v12 + v33;
    LOBYTE(v33) = *((_BYTE *)v12 + v33 + 8);
    *(_QWORD *)v34 = *(_QWORD *)v35;
    v34[8] = v33;
    v36 = *((_OWORD *)v35 + 1);
    v37 = *((_OWORD *)v35 + 2);
    v38 = *((_OWORD *)v35 + 3);
    *(_OWORD *)(v34 + 57) = *(_OWORD *)(v35 + 57);
    *((_OWORD *)v34 + 2) = v37;
    *((_OWORD *)v34 + 3) = v38;
    *((_OWORD *)v34 + 1) = v36;
    v34[73] = v35[73];
    LOWORD(v33) = *((_WORD *)v35 + 37);
    v34[76] = v35[76];
    *((_WORD *)v34 + 37) = v33;
    v34[77] = v35[77];
    v60 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    v39 = v60[9];
    v40 = &v34[v39];
    v41 = &v35[v39];
    v42 = type metadata accessor for FloatingPointRoundingRule();
    v43 = *(_QWORD *)(v42 - 8);
    v44 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v43 + 48);
    v45 = v44(v40, 1, v42);
    v46 = v44(v41, 1, v42);
    if (v45)
    {
      if (!v46)
      {
        (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v40, v41, v42);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
LABEL_16:
        v9 = v62;
        v52 = v60[10];
        v53 = &v34[v52];
        v54 = &v35[v52];
        v55 = *(_QWORD *)v54;
        v53[8] = v54[8];
        *(_QWORD *)v53 = v55;
        v34[v60[11]] = v35[v60[11]];
        goto LABEL_17;
      }
    }
    else
    {
      if (!v46)
      {
        (*(void (**)(char *, char *, uint64_t))(v43 + 24))(v40, v41, v42);
        goto LABEL_16;
      }
      (*(void (**)(char *, uint64_t))(v43 + 8))(v40, v42);
    }
    v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    goto LABEL_16;
  }
  if (v17)
  {
LABEL_7:
    v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    goto LABEL_17;
  }
  v61 = v9;
  *(_OWORD *)v11 = *(_OWORD *)v12;
  v18 = *(int *)(v13 + 36);
  v19 = (char *)v11 + v18;
  v20 = (char *)v12 + v18;
  v21 = *(_QWORD *)v20;
  v19[8] = v20[8];
  *(_QWORD *)v19 = v21;
  v22 = *((_OWORD *)v20 + 1);
  v23 = *((_OWORD *)v20 + 2);
  v24 = *((_OWORD *)v20 + 3);
  *(_OWORD *)(v19 + 57) = *(_OWORD *)(v20 + 57);
  *((_OWORD *)v19 + 2) = v23;
  *((_OWORD *)v19 + 3) = v24;
  *((_OWORD *)v19 + 1) = v22;
  v19[73] = v20[73];
  LOWORD(v21) = *((_WORD *)v20 + 37);
  v19[76] = v20[76];
  *((_WORD *)v19 + 37) = v21;
  v19[77] = v20[77];
  v25 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  v26 = *(int *)(v25 + 36);
  __dst = &v19[v26];
  v59 = v25;
  v27 = &v20[v26];
  v28 = type metadata accessor for FloatingPointRoundingRule();
  v57 = *(_QWORD *)(v28 - 8);
  v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48);
  swift_unknownObjectRetain();
  if (v29(v27, 1, v28))
  {
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(__dst, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v57 + 16))(__dst, v27, v28);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(__dst, 0, 1, v28);
  }
  v9 = v61;
  v47 = *(int *)(v59 + 40);
  v48 = &v19[v47];
  v49 = &v20[v47];
  v50 = *(_QWORD *)v49;
  v48[8] = v49[8];
  *(_QWORD *)v48 = v50;
  v19[*(int *)(v59 + 44)] = v20[*(int *)(v59 + 44)];
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_17:
  *(_BYTE *)(a1 + v9[9]) = *(_BYTE *)(a2 + v9[9]);
  *(_BYTE *)(a1 + v9[10]) = *(_BYTE *)(a2 + v9[10]);
  return a1;
}

uint64_t initializeWithTake for Measurement<>.AttributedStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int *v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int *v27;
  uint64_t v28;
  char *__dst;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = (int *)type metadata accessor for Measurement<>.FormatStyle(0, *(_QWORD *)(a3 + 16), a3, a4);
  v7 = v6[8];
  v8 = (_OWORD *)(a1 + v7);
  v9 = (_OWORD *)(a2 + v7);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v28 = v11;
    *v8 = *v9;
    v13 = *(int *)(v10 + 36);
    v14 = (char *)v8 + v13;
    v15 = (char *)v9 + v13;
    v14[8] = v15[8];
    *(_QWORD *)v14 = *(_QWORD *)v15;
    *(_OWORD *)(v14 + 57) = *(_OWORD *)(v15 + 57);
    v16 = *((_OWORD *)v15 + 3);
    v17 = *((_OWORD *)v15 + 1);
    *((_OWORD *)v14 + 2) = *((_OWORD *)v15 + 2);
    *((_OWORD *)v14 + 3) = v16;
    *((_OWORD *)v14 + 1) = v17;
    v14[73] = v15[73];
    LOWORD(v13) = *((_WORD *)v15 + 37);
    v14[76] = v15[76];
    *((_WORD *)v14 + 37) = v13;
    v14[77] = v15[77];
    v27 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    v18 = v27[9];
    __dst = &v14[v18];
    v19 = &v15[v18];
    v20 = type metadata accessor for FloatingPointRoundingRule();
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(__dst, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(__dst, v19, v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(__dst, 0, 1, v20);
    }
    v23 = v27[10];
    v24 = &v14[v23];
    v25 = &v15[v23];
    *(_QWORD *)v24 = *(_QWORD *)v25;
    v24[8] = v25[8];
    v14[v27[11]] = v15[v27[11]];
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v8, 0, 1, v10);
  }
  *(_BYTE *)(a1 + v6[9]) = *(_BYTE *)(a2 + v6[9]);
  *(_BYTE *)(a1 + v6[10]) = *(_BYTE *)(a2 + v6[10]);
  return a1;
}

uint64_t assignWithTake for Measurement<>.AttributedStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(_QWORD *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  __int128 v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(char *, uint64_t, uint64_t);
  int v41;
  int v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v51;
  char *__dst;
  int *__dsta;
  int *v54;
  int *v55;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 16) = v6;
  v9 = (int *)type metadata accessor for Measurement<>.FormatStyle(0, *(_QWORD *)(a3 + 16), v7, v8);
  v10 = v9[8];
  v11 = (_QWORD *)(a1 + v10);
  v12 = (_QWORD *)(a2 + v10);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (v17)
    {
      outlined destroy of Any?((uint64_t)v11, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
      goto LABEL_7;
    }
    v55 = v9;
    v30 = v12[1];
    *v11 = *v12;
    swift_unknownObjectRelease();
    v11[1] = v30;
    v31 = *(int *)(v13 + 36);
    v32 = (char *)v11 + v31;
    v33 = (char *)v12 + v31;
    *(_QWORD *)v32 = *(_QWORD *)((char *)v12 + v31);
    v32[8] = *((_BYTE *)v12 + v31 + 8);
    v34 = *(_OWORD *)((char *)v12 + v31 + 32);
    *((_OWORD *)v32 + 1) = *(_OWORD *)((char *)v12 + v31 + 16);
    *((_OWORD *)v32 + 2) = v34;
    *((_OWORD *)v32 + 3) = *(_OWORD *)((char *)v12 + v31 + 48);
    *(_OWORD *)(v32 + 57) = *(_OWORD *)((char *)v12 + v31 + 57);
    v32[73] = *((_BYTE *)v12 + v31 + 73);
    v32[76] = *((_BYTE *)v12 + v31 + 76);
    *((_WORD *)v32 + 37) = *(_WORD *)((char *)v12 + v31 + 74);
    v32[77] = *((_BYTE *)v12 + v31 + 77);
    __dsta = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    v35 = __dsta[9];
    v36 = &v32[v35];
    v37 = &v33[v35];
    v38 = type metadata accessor for FloatingPointRoundingRule();
    v39 = *(_QWORD *)(v38 - 8);
    v40 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v39 + 48);
    v41 = v40(v36, 1, v38);
    v42 = v40(v37, 1, v38);
    if (v41)
    {
      if (!v42)
      {
        (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v36, v37, v38);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
LABEL_16:
        v9 = v55;
        v47 = __dsta[10];
        v48 = &v32[v47];
        v49 = &v33[v47];
        *(_QWORD *)v48 = *(_QWORD *)v49;
        v48[8] = v49[8];
        v32[__dsta[11]] = v33[__dsta[11]];
        goto LABEL_17;
      }
    }
    else
    {
      if (!v42)
      {
        (*(void (**)(char *, char *, uint64_t))(v39 + 40))(v36, v37, v38);
        goto LABEL_16;
      }
      (*(void (**)(char *, uint64_t))(v39 + 8))(v36, v38);
    }
    v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    goto LABEL_16;
  }
  if (v17)
  {
LABEL_7:
    v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_17;
  }
  v54 = v9;
  *(_OWORD *)v11 = *(_OWORD *)v12;
  v18 = *(int *)(v13 + 36);
  v19 = (char *)v11 + v18;
  v20 = (char *)v12 + v18;
  v19[8] = v20[8];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *(_OWORD *)(v19 + 57) = *(_OWORD *)(v20 + 57);
  v21 = *((_OWORD *)v20 + 3);
  v22 = *((_OWORD *)v20 + 1);
  *((_OWORD *)v19 + 2) = *((_OWORD *)v20 + 2);
  *((_OWORD *)v19 + 3) = v21;
  *((_OWORD *)v19 + 1) = v22;
  v19[73] = v20[73];
  LOWORD(v18) = *((_WORD *)v20 + 37);
  v19[76] = v20[76];
  *((_WORD *)v19 + 37) = v18;
  v19[77] = v20[77];
  v23 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  v24 = *(int *)(v23 + 36);
  v51 = v23;
  __dst = &v19[v24];
  v25 = &v20[v24];
  v26 = type metadata accessor for FloatingPointRoundingRule();
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(__dst, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(__dst, v25, v26);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(__dst, 0, 1, v26);
  }
  v43 = *(int *)(v51 + 40);
  v44 = &v19[v43];
  v45 = &v20[v43];
  *(_QWORD *)v44 = *(_QWORD *)v45;
  v44[8] = v45[8];
  v19[*(int *)(v51 + 44)] = v20[*(int *)(v51 + 44)];
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  v9 = v54;
LABEL_17:
  *(_BYTE *)(a1 + v9[9]) = *(_BYTE *)(a2 + v9[9]);
  *(_BYTE *)(a1 + v9[10]) = *(_BYTE *)(a2 + v9[10]);
  return a1;
}

uint64_t getEnumTagSinglePayload for Measurement<>.AttributedStyle()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_181B26104(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  v6 = type metadata accessor for Measurement<>.FormatStyle(0, *(_QWORD *)(a3 + 16), a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(a1, a2, v6);
}

uint64_t storeEnumTagSinglePayload for Measurement<>.AttributedStyle()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_181B26150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  v6 = type metadata accessor for Measurement<>.FormatStyle(0, *(_QWORD *)(a4 + 16), a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, a2, a2, v6);
}

uint64_t destroy for Measurement<>.AttributedStyle<>.ByteCount()
{
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for Measurement<>.AttributedStyle<>.ByteCount(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Measurement<>.AttributedStyle<>.ByteCount(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 32) = v3;
  return a1;
}

uint64_t assignWithTake for Measurement<>.AttributedStyle<>.ByteCount(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for Measurement<>.AttributedStyle<>.ByteCount(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Measurement<>.AttributedStyle<>.ByteCount(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata instantiation function for Measurement<>.AttributedStyle<>.ByteCount.CodingKeys()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t storeEnumTagSinglePayload for Measurement<>.AttributedStyle<>.ByteCount.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_181B26378 + 4 * byte_1820DB020[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_181B26398 + 4 * byte_1820DB025[v4]))();
}

_BYTE *sub_181B26378(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_181B26398(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181B263A0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181B263A8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181B263B0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181B263B8(_DWORD *result)
{
  *result = 0;
  return result;
}

void base witness table accessor for Equatable in Measurement<A><>.AttributedStyle.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t base witness table accessor for Equatable in Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys()
{
  return lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys(&lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys, &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for Measurement<>.AttributedStyle<>.ByteCount.CodingKeys, (uint64_t)&protocol conformance descriptor for Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys()
{
  return lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys(&lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys, &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for Measurement<>.AttributedStyle<>.ByteCount.CodingKeys, (uint64_t)&protocol conformance descriptor for Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys);
}

uint64_t base witness table accessor for CustomStringConvertible in Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys()
{
  return lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys(&lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys, &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for Measurement<>.AttributedStyle<>.ByteCount.CodingKeys, (uint64_t)&protocol conformance descriptor for Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys);
}

void base witness table accessor for CustomDebugStringConvertible in Measurement<A><>.AttributedStyle.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomStringConvertible in Measurement<A><>.AttributedStyle.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DateFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute.Field()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DateFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute.Field;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DateFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute.Field)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.DateFieldAttribute.Field, &type metadata for AttributeScopes.FoundationAttributes.DateFieldAttribute.Field);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DateFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute.Field);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DateFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute.Field;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DateFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute.Field)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.DateFieldAttribute.Field, &type metadata for AttributeScopes.FoundationAttributes.DateFieldAttribute.Field);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DateFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute.Field);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component, &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component, &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart, &type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart, &type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart, &type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart, &type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart, &type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol, &type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol, &type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol, &type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol, &type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol, &type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component, &type metadata for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component, &type metadata for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component, &type metadata for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component, &type metadata for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component, &type metadata for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component);
  }
  return result;
}

BOOL static PredicateExpressions.ComparisonOperator.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void PredicateExpressions.ComparisonOperator.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PredicateExpressions.ComparisonOperator.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181B26654 + 4 * byte_1820DB470[*v0]))(0x6E6168547373656CLL, 0xE800000000000000);
}

uint64_t sub_181B26668()
{
  return 0x5472657461657267;
}

unint64_t sub_181B26688()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PredicateExpressions.ComparisonOperator.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized PredicateExpressions.ComparisonOperator.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PredicateExpressions.ComparisonOperator.CodingKeys()
{
  lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator.CodingKeys and conformance PredicateExpressions.ComparisonOperator.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PredicateExpressions.ComparisonOperator.CodingKeys()
{
  lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator.CodingKeys and conformance PredicateExpressions.ComparisonOperator.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys()
{
  lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys()
{
  lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys()
{
  lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys()
{
  lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PredicateExpressions.ComparisonOperator.LessThanCodingKeys()
{
  lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator.LessThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PredicateExpressions.ComparisonOperator.LessThanCodingKeys()
{
  lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator.LessThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys()
{
  lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys()
{
  lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys();
  return CodingKey.debugDescription.getter();
}

void PredicateExpressions.ComparisonOperator.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys>);
  v19 = *(_QWORD *)(v4 - 8);
  v20 = v4;
  MEMORY[0x1E0C80A78](v4);
  v18 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys>);
  v16 = *(_QWORD *)(v6 - 8);
  v17 = v6;
  MEMORY[0x1E0C80A78](v6);
  v15 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys>);
  v13 = *(_QWORD *)(v8 - 8);
  v14 = v8;
  MEMORY[0x1E0C80A78](v8);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PredicateExpressions.ComparisonOperator.LessThanCodingKeys>);
  MEMORY[0x1E0C80A78](v12);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PredicateExpressions.ComparisonOperator.CodingKeys>);
  v21 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v10 = *v2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator.CodingKeys and conformance PredicateExpressions.ComparisonOperator.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  __asm { BR              X9 }
}

uint64_t sub_181B26A10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v4 - 68) = 0;
  lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator.LessThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanCodingKeys();
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  (*(void (**)(uint64_t, _QWORD))(v3 + 8))(v2, *(_QWORD *)(v4 - 168));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 96) + 8))(v1, v0);
}

unint64_t lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator.CodingKeys and conformance PredicateExpressions.ComparisonOperator.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.CodingKeys and conformance PredicateExpressions.ComparisonOperator.CodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.CodingKeys and conformance PredicateExpressions.ComparisonOperator.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.ComparisonOperator.CodingKeys, &unk_1E0F23760);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.CodingKeys and conformance PredicateExpressions.ComparisonOperator.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.CodingKeys and conformance PredicateExpressions.ComparisonOperator.CodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.CodingKeys and conformance PredicateExpressions.ComparisonOperator.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.ComparisonOperator.CodingKeys, &unk_1E0F23760);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.CodingKeys and conformance PredicateExpressions.ComparisonOperator.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.CodingKeys and conformance PredicateExpressions.ComparisonOperator.CodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.CodingKeys and conformance PredicateExpressions.ComparisonOperator.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.ComparisonOperator.CodingKeys, &unk_1E0F23760);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.CodingKeys and conformance PredicateExpressions.ComparisonOperator.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.CodingKeys and conformance PredicateExpressions.ComparisonOperator.CodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.CodingKeys and conformance PredicateExpressions.ComparisonOperator.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.ComparisonOperator.CodingKeys, &unk_1E0F23760);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.CodingKeys and conformance PredicateExpressions.ComparisonOperator.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys, &unk_1E0F23850);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys, &unk_1E0F23850);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys, &unk_1E0F23850);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys, &unk_1E0F23810);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys, &unk_1E0F23810);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys, &unk_1E0F23810);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys, &unk_1E0F23830);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys, &unk_1E0F23830);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys, &unk_1E0F23830);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator.LessThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.ComparisonOperator.LessThanCodingKeys, &unk_1E0F237F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.ComparisonOperator.LessThanCodingKeys, &unk_1E0F237F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.ComparisonOperator.LessThanCodingKeys, &unk_1E0F237F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanCodingKeys);
  }
  return result;
}

Swift::Int PredicateExpressions.ComparisonOperator.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t PredicateExpressions.ComparisonOperator.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD v21[7];
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;

  v23 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys>);
  v21[5] = *(_QWORD *)(v3 - 8);
  v21[6] = v3;
  MEMORY[0x1E0C80A78](v3);
  v26 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys>);
  v21[4] = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v25 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys>);
  v21[2] = *(_QWORD *)(v6 - 8);
  v21[3] = v6;
  MEMORY[0x1E0C80A78](v6);
  v24 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressions.ComparisonOperator.LessThanCodingKeys>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressions.ComparisonOperator.CodingKeys>);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v27 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v14);
  lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator.CodingKeys and conformance PredicateExpressions.ComparisonOperator.CodingKeys();
  v15 = v28;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v15)
  {
    v21[0] = v9;
    v21[1] = v8;
    v28 = v11;
    v16 = KeyedDecodingContainer.allKeys.getter();
    if (*(_QWORD *)(v16 + 16) == 1)
      __asm { BR              X9 }
    v17 = type metadata accessor for DecodingError();
    swift_allocError();
    v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v19 = &type metadata for PredicateExpressions.ComparisonOperator;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v19, *MEMORY[0x1E0DEC450], v17);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v13, v10);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PredicateExpressions.ComparisonOperator@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return PredicateExpressions.ComparisonOperator.init(from:)(a1, a2);
}

void protocol witness for Encodable.encode(to:) in conformance PredicateExpressions.ComparisonOperator(_QWORD *a1)
{
  PredicateExpressions.ComparisonOperator.encode(to:)(a1);
}

void PredicateExpressions.Comparison.init(lhs:rhs:op:)()
{
  type metadata accessor for PredicateExpressions.Comparison();
}

uint64_t sub_181B271D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  char v6;
  uint64_t result;

  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(&v5[*(int *)(a1 + 60)], v4, v2);
  result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(&v5[*(int *)(a1 + 64)], v3, v1);
  *v5 = v6;
  return result;
}

uint64_t PredicateExpressions.Comparison.evaluate(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v9 = MEMORY[0x1E0C80A78](v8);
  v10 = *a1;
  v13 = v2;
  v11 = v2 + *(_DWORD *)(a2 + 60);
  v15 = v10;
  (*(void (**)(uint64_t *, uint64_t, uint64_t, __n128))(v5 + 16))(&v15, v6, v5, v9);
  if (!v14)
  {
    v15 = v10;
    (*(void (**)(uint64_t *, _QWORD))(*(_QWORD *)(a2 + 40) + 16))(&v15, *(_QWORD *)(a2 + 24));
    __asm { BR              X10 }
  }
  return v11 & 1;
}

void sub_181B2739C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);

  dispatch thunk of static Comparable.< infix(_:_:)();
  v4 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
  v4(v0, v2);
  v4(v3, v2);
  JUMPOUT(0x181B27350);
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.Comparison<A, B>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = PredicateExpressions.Comparison.evaluate(_:)(a1, a2);
  if (!v3)
    *a3 = result & 1;
  return result;
}

uint64_t PredicateExpressions.Comparison.description.getter()
{
  unsigned __int8 *v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  __int128 v6;

  BYTE8(v6) = 0;
  _StringGuts.grow(_:)(42);
  v1._object = (void *)0x8000000182307FC0;
  v1._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._countAndFlagsBits = 0x74617265706F202CLL;
  v2._object = (void *)0xEC000000203A726FLL;
  String.append(_:)(v2);
  *(_QWORD *)&v6 = *v0;
  _print_unlocked<A, B>(_:_:)();
  v3._countAndFlagsBits = 0x203A736872202CLL;
  v3._object = (void *)0xE700000000000000;
  String.append(_:)(v3);
  _print_unlocked<A, B>(_:_:)();
  v4._countAndFlagsBits = 41;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return *(_QWORD *)((char *)&v6 + 1);
}

uint64_t PredicateExpressions.Comparison<>.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v3[24];
  uint64_t v4;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator and conformance PredicateExpressions.ComparisonOperator();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

unint64_t lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator and conformance PredicateExpressions.ComparisonOperator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator and conformance PredicateExpressions.ComparisonOperator;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator and conformance PredicateExpressions.ComparisonOperator)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.ComparisonOperator, &type metadata for PredicateExpressions.ComparisonOperator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator and conformance PredicateExpressions.ComparisonOperator);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator and conformance PredicateExpressions.ComparisonOperator;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator and conformance PredicateExpressions.ComparisonOperator)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.ComparisonOperator, &type metadata for PredicateExpressions.ComparisonOperator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator and conformance PredicateExpressions.ComparisonOperator);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator and conformance PredicateExpressions.ComparisonOperator;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator and conformance PredicateExpressions.ComparisonOperator)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.ComparisonOperator, &type metadata for PredicateExpressions.ComparisonOperator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator and conformance PredicateExpressions.ComparisonOperator);
  }
  return result;
}

void PredicateExpressions.Comparison<>.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[16];

  v14[3] = a5;
  v14[4] = a4;
  v14[8] = a3;
  v14[6] = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v14[5] = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[7] = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v7);
  v14[9] = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[11] = v9;
  v14[12] = v10;
  v14[13] = v11;
  v14[14] = v12;
  v14[15] = v13;
  type metadata accessor for PredicateExpressions.Comparison();
}

uint64_t sub_181B277D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  void (*v12)(_BYTE *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v6 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v18 - v7;
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  v9 = *(_QWORD *)(v4 - 128);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v9)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  *(_QWORD *)(v4 - 200) = v6;
  *(_QWORD *)(v4 - 192) = v8;
  *(_QWORD *)(v4 - 128) = v3;
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 120, *(_QWORD *)(v4 - 96));
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  v10 = *(_BYTE **)(v4 - 192);
  v11 = &v10[*(int *)(a1 + 60)];
  v12 = *(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 152) + 32);
  v13 = *(_QWORD *)(v4 - 136);
  *(_QWORD *)(v4 - 136) = v1;
  v12(v11, v13, v1);
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 120, *(_QWORD *)(v4 - 96));
  v14 = *(_QWORD *)(v4 - 168);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 160) + 32))(&v10[*(int *)(a1 + 64)], v14, v2);
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 120, *(_QWORD *)(v4 - 96));
  lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator and conformance PredicateExpressions.ComparisonOperator();
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  v15 = *(_QWORD *)(v4 - 128);
  *v10 = *(_BYTE *)(v4 - 65);
  __swift_destroy_boxed_opaque_existential_1(v4 - 120);
  v16 = *(_QWORD *)(v4 - 200);
  (*(void (**)(_QWORD, _BYTE *, uint64_t))(v16 + 16))(*(_QWORD *)(v4 - 184), v10, a1);
  __swift_destroy_boxed_opaque_existential_1(v15);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v16 + 8))(v10, a1);
}

void protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.Comparison<A, B>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  PredicateExpressions.Comparison<>.init(from:)(a1, *(_QWORD *)(a2 + 24), *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 24), a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.Comparison<A, B>(_QWORD *a1)
{
  return PredicateExpressions.Comparison<>.encode(to:)(a1);
}

_BYTE *assignWithCopy for PredicateExpressions.Comparison(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (unint64_t)&a1[v6 + 1] & ~v6;
  v8 = (unint64_t)&a2[v6 + 1] & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v5 + 24))(v7, v8);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v9 + 24))((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v9 + 80) + v7) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), (*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v9 + 80) + v8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return a1;
}

_BYTE *initializeWithTake for PredicateExpressions.Comparison(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (unint64_t)&a1[v6 + 1] & ~v6;
  v8 = (unint64_t)&a2[v6 + 1] & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v7, v8);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v9 + 32))((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v9 + 80) + v7) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), (*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v9 + 80) + v8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return a1;
}

_BYTE *assignWithTake for PredicateExpressions.Comparison(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (unint64_t)&a1[v6 + 1] & ~v6;
  v8 = (unint64_t)&a2[v6 + 1] & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v5 + 40))(v7, v8);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v9 + 40))((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v9 + 80) + v7) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), (*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v9 + 80) + v8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.Comparison(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v13;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = *(_DWORD *)(v3 + 84);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  if (v4 <= *(_DWORD *)(v5 + 84))
    v6 = *(_DWORD *)(v5 + 84);
  else
    v6 = *(_DWORD *)(v3 + 84);
  if (v6 <= 0xFC)
    v7 = 252;
  else
    v7 = v6;
  if (!a2)
    return 0;
  v8 = *(unsigned __int8 *)(v3 + 80);
  v9 = *(_QWORD *)(v3 + 64);
  v10 = *(unsigned __int8 *)(v5 + 80);
  if (a2 <= v7)
    goto LABEL_27;
  v11 = ((v9 + v10 + ((v8 + 1) & ~v8)) & ~v10) + *(_QWORD *)(v5 + 64);
  v12 = 8 * v11;
  if (v11 <= 3)
  {
    v15 = ((a2 - v7 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      v13 = *(_DWORD *)&a1[v11];
      if (!v13)
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v15 > 0xFF)
    {
      v13 = *(unsigned __int16 *)&a1[v11];
      if (!*(_WORD *)&a1[v11])
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v15 < 2)
    {
LABEL_27:
      if (v6 > 0xFC)
      {
        v19 = (unint64_t)&a1[v8 + 1] & ~v8;
        if (v4 == v7)
          return (*(uint64_t (**)(uint64_t, _QWORD))(v3 + 48))(v19, *(unsigned int *)(v3 + 84));
        else
          return (*(uint64_t (**)(uint64_t))(v5 + 48))((v19 + v9 + v10) & ~v10);
      }
      else
      {
        v18 = *a1;
        if (v18 >= 4)
          return v18 - 3;
        else
          return 0;
      }
    }
  }
  v13 = a1[v11];
  if (!a1[v11])
    goto LABEL_27;
LABEL_18:
  v16 = (v13 - 1) << v12;
  if (v11 > 3)
    v16 = 0;
  if (!(_DWORD)v11)
    return v7 + v16 + 1;
  if (v11 <= 3)
    v17 = ((v9 + v10 + ((v8 + 1) & ~(_DWORD)v8)) & ~(_DWORD)v10) + *(_DWORD *)(v5 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_181B27E38 + 4 * byte_1820DB480[v17 - 1]))();
}

void storeEnumTagSinglePayload for PredicateExpressions.Comparison(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  size_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= *(_DWORD *)(v6 + 84))
    v7 = *(_DWORD *)(v6 + 84);
  else
    v7 = *(_DWORD *)(v5 + 84);
  if (v7 <= 0xFC)
    v8 = 252;
  else
    v8 = v7;
  v9 = ((*(_QWORD *)(v5 + 64)
       + *(unsigned __int8 *)(v6 + 80)
       + ((*(unsigned __int8 *)(v5 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v8)
  {
    if (v9 <= 3)
    {
      v12 = ((a3 - v8 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v12))
      {
        v10 = 4u;
      }
      else if (v12 >= 0x100)
      {
        v10 = 2;
      }
      else
      {
        v10 = v12 > 1;
      }
    }
    else
    {
      v10 = 1u;
    }
  }
  else
  {
    v10 = 0u;
  }
  if (v8 < a2)
  {
    v11 = ~v8 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v13 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v13;
          *((_BYTE *)a1 + 2) = BYTE2(v13);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v13;
        }
        else
        {
          *(_BYTE *)a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v11;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X6 }
}

uint64_t storeEnumTagSinglePayload for PredicateExpressions.ComparisonOperator(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_181B28164 + 4 * byte_1820DB493[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_181B28198 + 4 * byte_1820DB48E[v4]))();
}

uint64_t sub_181B28198(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181B281A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181B281A8);
  return result;
}

uint64_t sub_181B281B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181B281BCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_181B281C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181B281C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for PredicateExpressions.ComparisonOperator.CodingKeys()
{
  return &unk_1E0F23760;
}

void *type metadata accessor for PredicateExpressions.ComparisonOperator.LessThanCodingKeys()
{
  return &unk_1E0F237F0;
}

void *type metadata accessor for PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys()
{
  return &unk_1E0F23830;
}

void *type metadata accessor for PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys()
{
  return &unk_1E0F23810;
}

void *type metadata accessor for PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys()
{
  return &unk_1E0F23850;
}

uint64_t specialized PredicateExpressions.ComparisonOperator.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E6168547373656CLL && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6168547373656CLL && a2 == 0xEF6C61757145724FLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x5472657461657267 && a2 == 0xEB000000006E6168
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000182307FE0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

void __swiftcall Morphology.Pronoun.init(_:)(Foundation::Morphology::Pronoun *__return_ptr retstr, NSMorphologyPronoun a2)
{
  Class isa;
  id v4;
  void *v5;
  void *v6;
  uint8x8_t v7;
  NSMorphology_optional *v8;
  NSMorphology_optional *v9;
  NSMorphology_optional *v10;
  void *v11;
  unint64_t v12;
  int16x8_t v13;
  id v14;
  unsigned __int16 v15;
  Foundation::Morphology::GrammaticalNumber v16;
  void *v17;
  unsigned __int32 v18;
  Foundation::Morphology::Definiteness v19;

  isa = a2.super.isa;
  v4 = -[objc_class pronoun](a2.super.isa, sel_pronoun, a2._morphology, a2._dependentMorphology);
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v6 = v5;

  swift_bridgeObjectRetain();
  Morphology.init(_:)((NSMorphology_optional *)-[objc_class morphology](isa, sel_morphology));
  v7.i32[0] = v18;
  v13 = (int16x8_t)vmovl_u8(v7);
  swift_bridgeObjectRetain();
  v8 = (NSMorphology_optional *)-[objc_class dependentMorphology](isa, sel_dependentMorphology);
  v9 = v8;
  if (v8)
  {
    v10 = v8;
    Morphology.init(_:)(v9);

    v11 = v17;
    v9 = (NSMorphology_optional *)(v15 | ((unint64_t)v16 << 16));
    v12 = v18 | ((unint64_t)v19 << 32);
  }
  else
  {

    v11 = 0;
    v12 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  retstr->pronoun._countAndFlagsBits = (uint64_t)v14;
  retstr->pronoun._object = v6;
  *(_WORD *)&retstr->morphology.grammaticalGender.value = v15;
  retstr->morphology.number.value = v16;
  retstr->morphology.customPronouns._rawValue = v17;
  *(_DWORD *)&retstr->morphology.grammaticalCase.value = vmovn_s16(v13).u32[0];
  retstr->morphology.definiteness.value = v19;
  *(_QWORD *)&retstr->dependentMorphology.value.grammaticalGender.value = v9;
  retstr->dependentMorphology.value.customPronouns._rawValue = v11;
  retstr->dependentMorphology.value.definiteness.value = BYTE4(v12);
  *(_DWORD *)&retstr->dependentMorphology.value.grammaticalCase.value = v12;
}

NSMorphologyPronoun __swiftcall NSMorphologyPronoun.init(_:)(Foundation::Morphology::Pronoun *a1)
{
  __int16 v2;
  Foundation::Morphology::GrammaticalNumber value;
  void *rawValue;
  Foundation::Morphology::Definiteness v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSMorphology *v10;
  void *v11;
  void *v12;
  int8x16_t v13;
  uint64x2_t v14;
  int16x8_t v15;
  NSMorphology *v16;
  void *v17;
  void *v18;
  objc_class *v19;
  NSString *v20;
  NSMorphology *v21;
  NSMorphology *v22;
  objc_class *v23;
  uint64_t v24;
  __int16 v25;
  Foundation::Morphology::GrammaticalNumber v26;
  void *v27;
  _BYTE v28[5];
  Foundation::Morphology v29;
  Foundation::Morphology v30;
  NSMorphologyPronoun result;

  v2 = *(_WORD *)&a1->morphology.grammaticalGender.value;
  value = a1->morphology.number.value;
  rawValue = a1->morphology.customPronouns._rawValue;
  v5 = a1->morphology.definiteness.value;
  v7 = *(_QWORD *)&a1->dependentMorphology.value.grammaticalGender.value;
  v6 = a1->dependentMorphology.value.customPronouns._rawValue;
  v8 = a1->dependentMorphology.value.definiteness.value;
  v9 = *(unsigned int *)&a1->dependentMorphology.value.grammaticalCase.value;
  v24 = String._bridgeToObjectiveCImpl()();
  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSMorphology);
  v25 = v2;
  v26 = value;
  v27 = rawValue;
  *(_DWORD *)v28 = *(_DWORD *)&a1->morphology.grammaticalCase.value;
  v28[4] = v5;
  swift_bridgeObjectRetain();
  *(_QWORD *)&v29.grammaticalGender.value = &v25;
  NSMorphology.init(_:)(v10, v29);
  v12 = v11;
  if (v6)
  {
    v13.i64[0] = 0xFFFFFFFFFFLL;
    v13.i64[1] = 0xFFFFFFFFFFLL;
    v14 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v9 | (unint64_t)(v8 << 32)), v13);
    v15 = (int16x8_t)vshlq_u64(v14, (uint64x2_t)xmmword_182064D90);
    v25 = v7;
    v26 = BYTE2(v7);
    v27 = v6;
    v28[0] = v9;
    *(int32x2_t *)v14.i8 = vmovn_s64((int64x2_t)vshlq_u64(v14, (uint64x2_t)xmmword_182064D80));
    *(int32x2_t *)v15.i8 = vmovn_s64((int64x2_t)v15);
    v15.i16[1] = v15.i16[2];
    v15.i16[2] = v14.i16[0];
    v15.i16[3] = v14.i16[2];
    *(_DWORD *)&v28[1] = vmovn_s16(v15).u32[0];
    swift_bridgeObjectRetain_n();
    *(_QWORD *)&v30.grammaticalGender.value = &v25;
    NSMorphology.init(_:)(v16, v30);
    v18 = v17;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v18 = 0;
  }
  v19 = (objc_class *)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithPronoun_morphology_dependentMorphology_, v24, v12, v18);

  swift_unknownObjectRelease();
  v23 = v19;
  result._dependentMorphology = v22;
  result._morphology = v21;
  result._pronoun = v20;
  result.super.isa = v23;
  return result;
}

Foundation::Morphology __swiftcall Morphology.init()()
{
  uint64_t v0;
  Foundation::Morphology result;

  *(_WORD *)v0 = 3587;
  *(_BYTE *)(v0 + 2) = 6;
  *(_QWORD *)(v0 + 8) = MEMORY[0x1E0DEE9E0];
  *(_DWORD *)(v0 + 16) = 33751822;
  *(_BYTE *)(v0 + 20) = 2;
  return result;
}

void Morphology.grammaticalGender.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *Morphology.grammaticalGender.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*Morphology.grammaticalGender.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

Foundation::Morphology::PartOfSpeech_optional __swiftcall Morphology.PartOfSpeech.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = rawValue - 1;
  if ((unint64_t)(rawValue - 1) >= 0xE)
    v2 = 14;
  *v1 = v2;
  return (Foundation::Morphology::PartOfSpeech_optional)rawValue;
}

Foundation::Morphology::PartOfSpeech_optional protocol witness for RawRepresentable.init(rawValue:) in conformance Morphology.PartOfSpeech(Swift::Int *a1)
{
  return Morphology.PartOfSpeech.init(rawValue:)(*a1);
}

void Morphology.partOfSpeech.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 1);
}

_BYTE *Morphology.partOfSpeech.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = *result;
  return result;
}

uint64_t (*Morphology.partOfSpeech.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

Foundation::Morphology::GrammaticalNumber_optional __swiftcall Morphology.GrammaticalNumber.init(rawValue:)(Swift::Int rawValue)
{
  _BYTE *v1;
  unint64_t v2;

  v2 = 0x5040302010006uLL >> (8 * rawValue);
  if ((unint64_t)rawValue >= 7)
    LOBYTE(v2) = 6;
  *v1 = v2;
  return (Foundation::Morphology::GrammaticalNumber_optional)rawValue;
}

Foundation::Morphology::GrammaticalNumber_optional protocol witness for RawRepresentable.init(rawValue:) in conformance Morphology.GrammaticalNumber(Swift::Int *a1)
{
  return Morphology.GrammaticalNumber.init(rawValue:)(*a1);
}

void Morphology.number.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 2);
}

_BYTE *Morphology.number.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 2) = *result;
  return result;
}

uint64_t (*Morphology.number.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void Morphology.grammaticalCase.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

_BYTE *Morphology.grammaticalCase.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = *result;
  return result;
}

uint64_t (*Morphology.grammaticalCase.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void Morphology.grammaticalPerson.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 17);
}

_BYTE *Morphology.grammaticalPerson.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 17) = *result;
  return result;
}

uint64_t (*Morphology.grammaticalPerson.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

Foundation::Morphology::PronounType_optional __swiftcall Morphology.PronounType.init(rawValue:)(Swift::Int rawValue)
{
  _BYTE *v1;
  unsigned int v2;

  v2 = 0x2010003u >> (8 * rawValue);
  if ((unint64_t)rawValue >= 4)
    LOBYTE(v2) = 3;
  *v1 = v2;
  return (Foundation::Morphology::PronounType_optional)rawValue;
}

uint64_t Morphology.PronounType.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0 + 1;
}

Foundation::Morphology::PronounType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance Morphology.PronounType(Swift::Int *a1)
{
  return Morphology.PronounType.init(rawValue:)(*a1);
}

void Morphology.pronounType.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 18);
}

_BYTE *Morphology.pronounType.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 18) = *result;
  return result;
}

uint64_t (*Morphology.pronounType.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void Morphology.determination.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 19);
}

_BYTE *Morphology.determination.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 19) = *result;
  return result;
}

uint64_t (*Morphology.determination.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

Foundation::Morphology::Definiteness_optional __swiftcall Morphology.Definiteness.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  if (rawValue == 2)
    v2 = 1;
  else
    v2 = 2;
  if (rawValue == 1)
    v2 = 0;
  *v1 = v2;
  return (Foundation::Morphology::Definiteness_optional)rawValue;
}

uint64_t Morphology.Definiteness.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 2;
  else
    return 1;
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance Morphology.Definiteness@<X0>(_QWORD *result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  if (*result == 2)
    v2 = 1;
  else
    v2 = 2;
  if (*result == 1)
    v3 = 0;
  else
    v3 = v2;
  *a2 = v3;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Morphology.Definiteness(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;

  v2 = 1;
  if (*v1)
    v2 = 2;
  *a1 = v2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Morphology.Determination()
{
  unsigned __int8 *v0;
  int v1;
  Swift::UInt v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  if (v1)
    v2 = 2;
  else
    v2 = 1;
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Morphology.Definiteness()
{
  _BYTE *v0;
  Swift::UInt v1;

  if (*v0)
    v1 = 2;
  else
    v1 = 1;
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Morphology.Determination()
{
  unsigned __int8 *v0;
  int v1;
  Swift::UInt v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  if (v1)
    v2 = 2;
  else
    v2 = 1;
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void Morphology.definiteness.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 20);
}

_BYTE *Morphology.definiteness.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 20) = *result;
  return result;
}

uint64_t (*Morphology.definiteness.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

unsigned __int16 *InflectionRule.init(morphology:)@<X0>(unsigned __int16 *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  char v4;

  v2 = *((_QWORD *)result + 1);
  v3 = *((_DWORD *)result + 4);
  v4 = *((_BYTE *)result + 20);
  *(_QWORD *)a2 = *result | ((unint64_t)*((unsigned __int8 *)result + 2) << 16);
  *(_QWORD *)(a2 + 8) = v2;
  *(_BYTE *)(a2 + 20) = v4;
  *(_DWORD *)(a2 + 16) = v3;
  return result;
}

void Morphology.hash(into:)(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  v2 = v1;
  v4 = *v2;
  v5 = v2[1];
  v6 = v2[2];
  v7 = *((_QWORD *)v2 + 1);
  v8 = v2[16];
  v9 = v2[17];
  v10 = v2[18];
  v11 = v2[19];
  v12 = v2[20];
  if (v4 == 3)
  {
    Hasher._combine(_:)(0);
    if ((_DWORD)v5 != 14)
      goto LABEL_3;
LABEL_6:
    Hasher._combine(_:)(0);
    if ((_DWORD)v6 != 6)
      goto LABEL_4;
    goto LABEL_7;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v4 + 1);
  if ((_DWORD)v5 == 14)
    goto LABEL_6;
LABEL_3:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v5 + 1);
  if ((_DWORD)v6 != 6)
  {
LABEL_4:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6 + 1);
    goto LABEL_8;
  }
LABEL_7:
  Hasher._combine(_:)(0);
LABEL_8:
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v7);
  swift_bridgeObjectRelease();
  if ((_DWORD)v8 == 14)
  {
    Hasher._combine(_:)(0);
    if ((_DWORD)v9 != 3)
      goto LABEL_10;
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v8 + 1);
    if ((_DWORD)v9 != 3)
    {
LABEL_10:
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v9 + 1);
      if ((_DWORD)v10 != 3)
        goto LABEL_11;
      goto LABEL_16;
    }
  }
  Hasher._combine(_:)(0);
  if ((_DWORD)v10 != 3)
  {
LABEL_11:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v10 + 1);
    if (v11 != 2)
      goto LABEL_12;
LABEL_17:
    Hasher._combine(_:)(0);
    if (v12 != 2)
      goto LABEL_13;
    goto LABEL_18;
  }
LABEL_16:
  Hasher._combine(_:)(0);
  if (v11 == 2)
    goto LABEL_17;
LABEL_12:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)((v11 & 1) + 1);
  if (v12 != 2)
  {
LABEL_13:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)((v12 & 1) + 1);
    return;
  }
LABEL_18:
  Hasher._combine(_:)(0);
}

Swift::Int Morphology.hashValue.getter()
{
  unsigned __int8 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  _BYTE v11[72];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = *((_QWORD *)v0 + 1);
  v5 = v0[16];
  v6 = v0[17];
  v7 = v0[18];
  v8 = v0[19];
  v9 = v0[20];
  Hasher.init(_seed:)();
  if (v1 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1 + 1);
  }
  if ((_DWORD)v2 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2 + 1);
  }
  if ((_DWORD)v3 == 6)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3 + 1);
  }
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v11, v4);
  swift_bridgeObjectRelease();
  if ((_DWORD)v5 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5 + 1);
  }
  if ((_DWORD)v6 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6 + 1);
  }
  if ((_DWORD)v7 == 3)
  {
    Hasher._combine(_:)(0);
    if (v8 != 2)
      goto LABEL_18;
LABEL_21:
    Hasher._combine(_:)(0);
    if (v9 != 2)
      goto LABEL_19;
LABEL_22:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v7 + 1);
  if (v8 == 2)
    goto LABEL_21;
LABEL_18:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)((v8 & 1) + 1);
  if (v9 == 2)
    goto LABEL_22;
LABEL_19:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)((v9 & 1) + 1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Morphology()
{
  unsigned __int8 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  _BYTE v11[72];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = *((_QWORD *)v0 + 1);
  v5 = v0[16];
  v6 = v0[17];
  v7 = v0[18];
  v8 = v0[19];
  v9 = v0[20];
  Hasher.init(_seed:)();
  if (v1 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1 + 1);
  }
  if ((_DWORD)v2 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2 + 1);
  }
  if ((_DWORD)v3 == 6)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3 + 1);
  }
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v11, v4);
  swift_bridgeObjectRelease();
  if ((_DWORD)v5 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5 + 1);
  }
  if ((_DWORD)v6 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6 + 1);
  }
  if ((_DWORD)v7 == 3)
  {
    Hasher._combine(_:)(0);
    if (v8 != 2)
      goto LABEL_18;
LABEL_21:
    Hasher._combine(_:)(0);
    if (v9 != 2)
      goto LABEL_19;
LABEL_22:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v7 + 1);
  if (v8 == 2)
    goto LABEL_21;
LABEL_18:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)((v8 & 1) + 1);
  if (v9 == 2)
    goto LABEL_22;
LABEL_19:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)((v9 & 1) + 1);
  return Hasher._finalize()();
}

void InflectionRule.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::UInt v8;
  unint64_t v9;

  v2 = v1;
  v4 = v2[1];
  if (v4)
  {
    v5 = *((unsigned __int8 *)v2 + 20);
    v6 = *((unsigned int *)v2 + 4);
    v7 = *v2;
    Hasher._combine(_:)(1uLL);
    if (v7 == 3)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v7 + 1);
    }
    v9 = v6 | (v5 << 32);
    if ((v7 & 0xFF00) == 0xE00)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(BYTE1(v7) + 1);
    }
    if ((v7 & 0xFF0000) == 0x60000)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(BYTE2(v7) + 1);
    }
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v4);
    swift_bridgeObjectRelease();
    if (v6 == 14)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v9 + 1);
    }
    if (BYTE1(v9) == 3)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(BYTE1(v9) + 1);
    }
    if (BYTE2(v9) == 3)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(BYTE2(v9) + 1);
    }
    if ((v9 & 0xFF000000) == 0x2000000)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(((v9 >> 24) & 1) + 1);
    }
    if (HIDWORD(v9) == 2)
    {
      Hasher._combine(_:)(0);
      return;
    }
    Hasher._combine(_:)(1u);
    v8 = (HIDWORD(v9) & 1) + 1;
  }
  else
  {
    v8 = 0;
  }
  Hasher._combine(_:)(v8);
}

Swift::Int InflectionRule.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  Swift::UInt v6;
  _BYTE v8[72];

  v2 = *v0;
  v1 = v0[1];
  v3 = *((unsigned __int8 *)v0 + 20);
  v4 = *((unsigned int *)v0 + 4);
  Hasher.init(_seed:)();
  if (!v1)
  {
    v6 = 0;
LABEL_27:
    Hasher._combine(_:)(v6);
    return Hasher._finalize()();
  }
  v5 = v4 | (v3 << 32);
  Hasher._combine(_:)(1uLL);
  if (v2 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2 + 1);
  }
  if ((v2 & 0xFF00) == 0xE00)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(BYTE1(v2) + 1);
  }
  if ((v2 & 0xFF0000) == 0x60000)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(BYTE2(v2) + 1);
  }
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v8, v1);
  swift_bridgeObjectRelease();
  if (v5 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5 + 1);
  }
  if (BYTE1(v5) == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(BYTE1(v5) + 1);
  }
  if (BYTE2(v5) == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(BYTE2(v5) + 1);
  }
  if ((v5 & 0xFF000000) == 0x2000000)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(((v5 >> 24) & 1) + 1);
  }
  if (BYTE4(v5) != 2)
  {
    Hasher._combine(_:)(1u);
    v6 = (HIDWORD(v5) & 1) + 1;
    goto LABEL_27;
  }
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t Morphology.CodingKeys.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_181B29B00 + 4 * byte_1820DBB10[a1]))(0xD000000000000011, 0x80000001823040A0);
}

uint64_t sub_181B29B00()
{
  return 0x6974616D6D617267;
}

uint64_t sub_181B29B24()
{
  return 0x7053664F74726170;
}

uint64_t sub_181B29B44()
{
  return 0x7265626D756ELL;
}

uint64_t sub_181B29B58()
{
  return 0x72506D6F74737563;
}

uint64_t sub_181B29B90()
{
  return 0x546E756F6E6F7270;
}

uint64_t sub_181B29BB0()
{
  return 0x6E696D7265746564;
}

uint64_t sub_181B29BD4()
{
  return 0x6574696E69666564;
}

uint64_t Morphology.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_181B29C2C + 4 * byte_1820DBB19[a1]))(0xD000000000000011, 0x80000001823040A0);
}

uint64_t sub_181B29C2C()
{
  return 0x6974616D6D617267;
}

uint64_t sub_181B29C50()
{
  return 0x7053664F74726170;
}

uint64_t sub_181B29C70()
{
  return 0x7265626D756ELL;
}

uint64_t sub_181B29C84()
{
  return 0x72506D6F74737563;
}

uint64_t sub_181B29CBC()
{
  return 0x546E756F6E6F7270;
}

uint64_t sub_181B29CDC()
{
  return 0x6E696D7265746564;
}

uint64_t sub_181B29D00()
{
  return 0x6574696E69666564;
}

void protocol witness for Hashable.hash(into:) in conformance InflectionRule(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::UInt v8;
  unint64_t v9;

  v2 = v1;
  v4 = v2[1];
  if (v4)
  {
    v5 = *((unsigned __int8 *)v2 + 20);
    v6 = *((unsigned int *)v2 + 4);
    v7 = *v2;
    Hasher._combine(_:)(1uLL);
    if (v7 == 3)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v7 + 1);
    }
    v9 = v6 | (v5 << 32);
    if ((v7 & 0xFF00) == 0xE00)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(BYTE1(v7) + 1);
    }
    if ((v7 & 0xFF0000) == 0x60000)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(BYTE2(v7) + 1);
    }
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v4);
    swift_bridgeObjectRelease();
    if (v6 == 14)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v9 + 1);
    }
    if (BYTE1(v9) == 3)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(BYTE1(v9) + 1);
    }
    if (BYTE2(v9) == 3)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(BYTE2(v9) + 1);
    }
    if ((v9 & 0xFF000000) == 0x2000000)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(((v9 >> 24) & 1) + 1);
    }
    if (HIDWORD(v9) == 2)
    {
      Hasher._combine(_:)(0);
      return;
    }
    Hasher._combine(_:)(1u);
    v8 = (HIDWORD(v9) & 1) + 1;
  }
  else
  {
    v8 = 0;
  }
  Hasher._combine(_:)(v8);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance InflectionRule()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  Swift::UInt v6;
  _BYTE v8[72];

  v2 = *v0;
  v1 = v0[1];
  v3 = *((unsigned __int8 *)v0 + 20);
  v4 = *((unsigned int *)v0 + 4);
  Hasher.init(_seed:)();
  if (!v1)
  {
    v6 = 0;
LABEL_27:
    Hasher._combine(_:)(v6);
    return Hasher._finalize()();
  }
  v5 = v4 | (v3 << 32);
  Hasher._combine(_:)(1uLL);
  if (v2 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2 + 1);
  }
  if ((v2 & 0xFF00) == 0xE00)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(BYTE1(v2) + 1);
  }
  if ((v2 & 0xFF0000) == 0x60000)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(BYTE2(v2) + 1);
  }
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v8, v1);
  swift_bridgeObjectRelease();
  if (v5 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5 + 1);
  }
  if (BYTE1(v5) == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(BYTE1(v5) + 1);
  }
  if (BYTE2(v5) == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(BYTE2(v5) + 1);
  }
  if ((v5 & 0xFF000000) == 0x2000000)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(((v5 >> 24) & 1) + 1);
  }
  if (BYTE4(v5) != 2)
  {
    Hasher._combine(_:)(1u);
    v6 = (HIDWORD(v5) & 1) + 1;
    goto LABEL_27;
  }
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void protocol witness for static Equatable.== infix(_:_:) in conformance Morphology.CodingKeys(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Morphology.CodingKeys()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  specialized RawRepresentable<>.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Morphology.CodingKeys(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Morphology.CodingKeys()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  specialized RawRepresentable<>.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Morphology.CodingKeys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized Morphology.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Morphology.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = Morphology.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Morphology.CodingKeys()
{
  unsigned __int8 *v0;

  return Morphology.CodingKeys.stringValue.getter(*v0);
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance Morphology.CodingKeys@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized Morphology.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Morphology.CodingKeys()
{
  lazy protocol witness table accessor for type Morphology.CodingKeys and conformance Morphology.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Morphology.CodingKeys()
{
  lazy protocol witness table accessor for type Morphology.CodingKeys and conformance Morphology.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Morphology.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  int v10;
  int v11;
  int v12;
  uint64_t v14;
  char v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  char v23;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Morphology.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Morphology.CodingKeys and conformance Morphology.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v23 = 0;
    lazy protocol witness table accessor for type Morphology.GrammaticalGender and conformance Morphology.GrammaticalGender();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v9 = v21;
    v23 = 1;
    lazy protocol witness table accessor for type Morphology.GrammaticalCase and conformance Morphology.GrammaticalCase();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v10 = v21;
    v23 = 2;
    lazy protocol witness table accessor for type Morphology.PartOfSpeech and conformance Morphology.PartOfSpeech();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v22 = v10;
    v11 = v21;
    v23 = 3;
    lazy protocol witness table accessor for type Morphology.GrammaticalNumber and conformance Morphology.GrammaticalNumber();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v20 = v11;
    v12 = v21;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Morphology._CustomPronoun]);
    v23 = 4;
    lazy protocol witness table accessor for type [String : Morphology._CustomPronoun] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : Morphology._CustomPronoun] and conformance <> [A : B], (uint64_t (*)(void))lazy protocol witness table accessor for type Morphology._CustomPronoun and conformance Morphology._CustomPronoun, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEA0D8]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v19 = v12;
    if (v21)
      v14 = v21;
    else
      v14 = MEMORY[0x1E0DEE9E0];
    v23 = 5;
    lazy protocol witness table accessor for type Morphology.GrammaticalPerson and conformance Morphology.GrammaticalPerson();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v18 = v21;
    v23 = 6;
    lazy protocol witness table accessor for type Morphology.PronounType and conformance Morphology.PronounType();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v17 = v21;
    v23 = 7;
    lazy protocol witness table accessor for type Morphology.Determination and conformance Morphology.Determination();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    HIDWORD(v16) = v21;
    v23 = 8;
    lazy protocol witness table accessor for type Morphology.Definiteness and conformance Morphology.Definiteness();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v15 = v21;
    *(_BYTE *)a2 = v9;
    *(_BYTE *)(a2 + 1) = v20;
    *(_BYTE *)(a2 + 2) = v19;
    *(_QWORD *)(a2 + 8) = v14;
    *(_BYTE *)(a2 + 16) = v22;
    *(_BYTE *)(a2 + 17) = v18;
    *(_BYTE *)(a2 + 18) = v17;
    *(_BYTE *)(a2 + 19) = BYTE4(v16);
    *(_BYTE *)(a2 + 20) = v15;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t Morphology.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  char v26;
  uint64_t v27;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Morphology.CodingKeys>);
  v25 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  LODWORD(v5) = v1[2];
  v19 = v1[1];
  v20 = v5;
  v21 = *((_QWORD *)v1 + 1);
  v8 = v1[16];
  LODWORD(v5) = v1[18];
  v22 = v1[17];
  v23 = v5;
  v24 = v1[19];
  v18 = v1[20];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Morphology.CodingKeys and conformance Morphology.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v7 == 3)
  {
    v9 = v4;
  }
  else
  {
    LOBYTE(v27) = v7;
    v26 = 0;
    lazy protocol witness table accessor for type Morphology.GrammaticalGender and conformance Morphology.GrammaticalGender();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v9 = v4;
    if (v2)
      return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v6, v9);
  }
  if (v8 == 14
    || (LOBYTE(v27) = v8,
        v26 = 1,
        lazy protocol witness table accessor for type Morphology.GrammaticalCase and conformance Morphology.GrammaticalCase(),
        KeyedEncodingContainer.encode<A>(_:forKey:)(),
        !v2))
  {
    v11 = v23;
    v10 = v24;
    v12 = v22;
    v13 = v21;
    v14 = v20;
    if (v19 == 14
      || (LOBYTE(v27) = v19,
          v26 = 2,
          lazy protocol witness table accessor for type Morphology.PartOfSpeech and conformance Morphology.PartOfSpeech(),
          KeyedEncodingContainer.encode<A>(_:forKey:)(),
          !v2))
    {
      if (v14 == 6
        || (LOBYTE(v27) = v14,
            v26 = 3,
            lazy protocol witness table accessor for type Morphology.GrammaticalNumber and conformance Morphology.GrammaticalNumber(),
            KeyedEncodingContainer.encode<A>(_:forKey:)(),
            !v2))
      {
        if (!*(_QWORD *)(v13 + 16)
          || (v27 = v13,
              v26 = 4,
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Morphology._CustomPronoun]),
              lazy protocol witness table accessor for type [String : Morphology._CustomPronoun] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : Morphology._CustomPronoun] and conformance <> [A : B], (uint64_t (*)(void))lazy protocol witness table accessor for type Morphology._CustomPronoun and conformance Morphology._CustomPronoun, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEA0B8]), KeyedEncodingContainer.encode<A>(_:forKey:)(), !v2))
        {
          v15 = v18;
          if (v12 != 3)
          {
            LOBYTE(v27) = v12;
            v26 = 5;
            lazy protocol witness table accessor for type Morphology.GrammaticalPerson and conformance Morphology.GrammaticalPerson();
            KeyedEncodingContainer.encode<A>(_:forKey:)();
            if (v2)
              return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v6, v9);
            v15 = v18;
          }
          if (v11 != 3)
          {
            LOBYTE(v27) = v11;
            v26 = 6;
            lazy protocol witness table accessor for type Morphology.PronounType and conformance Morphology.PronounType();
            KeyedEncodingContainer.encode<A>(_:forKey:)();
            if (v2)
              return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v6, v9);
            v15 = v18;
          }
          if (v10 != 2)
          {
            LOBYTE(v27) = v10 & 1;
            v26 = 7;
            lazy protocol witness table accessor for type Morphology.Determination and conformance Morphology.Determination();
            KeyedEncodingContainer.encode<A>(_:forKey:)();
            if (v2)
              return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v6, v9);
            v15 = v18;
          }
          if (v15 != 2)
          {
            LOBYTE(v27) = v15 & 1;
            v26 = 8;
            lazy protocol witness table accessor for type Morphology.Definiteness and conformance Morphology.Definiteness();
            KeyedEncodingContainer.encode<A>(_:forKey:)();
          }
        }
      }
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v6, v9);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Morphology@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Morphology.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Morphology(_QWORD *a1)
{
  return Morphology.encode(to:)(a1);
}

uint64_t Morphology.GrammaticalGender.init(from:)@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  char v10;
  uint64_t result;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _QWORD v21[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  __swift_project_boxed_opaque_existential_1(v21, v21[3]);
  v6 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
  v7 = v5;
  v8 = v6 == 0x656E696E696D6566 && v5 == 0xE800000000000000;
  if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 0;
LABEL_17:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    *a2 = v9;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  if (v6 == 0x6E696C756373616DLL && v7 == 0xE900000000000065
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 1;
    goto LABEL_17;
  }
  if (v6 == 0x72657475656ELL && v7 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
LABEL_16:
    v9 = 2;
    goto LABEL_17;
  }
  v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v10 & 1) != 0)
    goto LABEL_16;
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v12 = objc_allocWithZone((Class)NSError);
  v13 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v14 = objc_msgSend(v12, sel_initWithDomain_code_userInfo_, v13, 4866, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v15 = objc_msgSend(v14, sel_domain);
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v18 = v17;

  if (v16 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v18 == v19)
  {
    swift_bridgeObjectRelease_n();
LABEL_23:
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v20 & 1) != 0)
    goto LABEL_23;
  __break(1u);
  return result;
}

uint64_t Morphology.GrammaticalGender.encode(to:)(_QWORD *a1)
{
  return Morphology.GrammaticalGender.encode(to:)(a1);
}

{
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Morphology.GrammaticalGender@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  return Morphology.GrammaticalGender.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Morphology.GrammaticalGender(_QWORD *a1)
{
  return Morphology.GrammaticalGender.encode(to:)(a1);
}

uint64_t Morphology.GrammaticalNumber.init(from:)@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  char v10;
  uint64_t result;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _QWORD v21[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  __swift_project_boxed_opaque_existential_1(v21, v21[3]);
  v6 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
  v7 = v5;
  v8 = v6 == 6647407 && v5 == 0xE300000000000000;
  if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 0;
LABEL_29:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    *a2 = v9;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  if (v6 == 1869768058 && v7 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 1;
    goto LABEL_29;
  }
  if (v6 == 0x726568746FLL && v7 == 0xE500000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 2;
    goto LABEL_29;
  }
  if (v6 == 7305076 && v7 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 3;
    goto LABEL_29;
  }
  if (v6 == 7824742 && v7 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 4;
    goto LABEL_29;
  }
  if (v6 == 2037277037 && v7 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
LABEL_28:
    v9 = 5;
    goto LABEL_29;
  }
  v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v10 & 1) != 0)
    goto LABEL_28;
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v12 = objc_allocWithZone((Class)NSError);
  v13 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v14 = objc_msgSend(v12, sel_initWithDomain_code_userInfo_, v13, 4866, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v15 = objc_msgSend(v14, sel_domain);
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v18 = v17;

  if (v16 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v18 == v19)
  {
    swift_bridgeObjectRelease_n();
LABEL_35:
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v20 & 1) != 0)
    goto LABEL_35;
  __break(1u);
  return result;
}

void Morphology.GrammaticalNumber.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;

  v2 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __asm { BR              X9 }
}

uint64_t sub_181B2B274()
{
  uint64_t v1[13];

  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v1, v1[3]);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Morphology.GrammaticalNumber@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  return Morphology.GrammaticalNumber.init(from:)(a1, a2);
}

void protocol witness for Encodable.encode(to:) in conformance Morphology.GrammaticalNumber(_QWORD *a1)
{
  Morphology.GrammaticalNumber.encode(to:)(a1);
}

uint64_t Morphology.PartOfSpeech.init(from:)@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  uint64_t result;
  char v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _QWORD v21[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  __swift_project_boxed_opaque_existential_1(v21, v21[3]);
  v6 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
  v7 = v5;
  v8 = v6 == 0x6E696D7265746564 && v5 == 0xEA00000000007265;
  if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 0;
LABEL_8:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    *a2 = v9;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  if (v6 == 0x6E756F6E6F7270 && v7 == 0xE700000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 1;
    goto LABEL_8;
  }
  if (v6 == 0x72657474656CLL && v7 == 0xE600000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 2;
    goto LABEL_8;
  }
  if (v6 == 0x627265766461 && v7 == 0xE600000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 3;
    goto LABEL_8;
  }
  if (v6 == 0x656C636974726170 && v7 == 0xE800000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 4;
    goto LABEL_8;
  }
  if (v6 == 0x76697463656A6461 && v7 == 0xE900000000000065
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 5;
    goto LABEL_8;
  }
  if (v6 == 0x697469736F706461 && v7 == 0xEA00000000006E6FLL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 6;
    goto LABEL_8;
  }
  if (v6 == 1651664246 && v7 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 7;
    goto LABEL_8;
  }
  if (v6 == 1853189998 && v7 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 8;
    goto LABEL_8;
  }
  if (v6 == 0x74636E756A6E6F63 && v7 == 0xEB000000006E6F69
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 9;
    goto LABEL_8;
  }
  if (v6 == 0x6C6172656D756ELL && v7 == 0xE700000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 10;
    goto LABEL_8;
  }
  if (v6 == 0x63656A7265746E69 && v7 == 0xEC0000006E6F6974
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 11;
    goto LABEL_8;
  }
  if (v6 == 0x7469736F70657270 && v7 == 0xEB000000006E6F69
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 12;
    goto LABEL_8;
  }
  if (v6 == 0x6169766572626261 && v7 == 0xEC0000006E6F6974)
  {
    swift_bridgeObjectRelease();
LABEL_62:
    v9 = 13;
    goto LABEL_8;
  }
  v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v11 & 1) != 0)
    goto LABEL_62;
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v12 = objc_allocWithZone((Class)NSError);
  v13 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v14 = objc_msgSend(v12, sel_initWithDomain_code_userInfo_, v13, 4866, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v15 = objc_msgSend(v14, sel_domain);
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v18 = v17;

  if (v16 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v18 == v19)
  {
    swift_bridgeObjectRelease_n();
LABEL_67:
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v20 & 1) != 0)
    goto LABEL_67;
  __break(1u);
  return result;
}

void Morphology.PartOfSpeech.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;

  v2 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __asm { BR              X9 }
}

uint64_t sub_181B2BB9C()
{
  uint64_t v1[13];

  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v1, v1[3]);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Morphology.PartOfSpeech@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  return Morphology.PartOfSpeech.init(from:)(a1, a2);
}

void protocol witness for Encodable.encode(to:) in conformance Morphology.PartOfSpeech(_QWORD *a1)
{
  Morphology.PartOfSpeech.encode(to:)(a1);
}

uint64_t Morphology.GrammaticalCase.init(from:)@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  uint64_t result;
  char v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _QWORD v21[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  __swift_project_boxed_opaque_existential_1(v21, v21[3]);
  v6 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
  v7 = v5;
  v8 = v6 == 0x6974616E696D6F6ELL && v5 == 0xEA00000000006576;
  if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 0;
LABEL_8:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    *a2 = v9;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  if (v6 == 0x6974617375636361 && v7 == 0xEA00000000006576
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 1;
    goto LABEL_8;
  }
  if (v6 == 0x657669746164 && v7 == 0xE600000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 2;
    goto LABEL_8;
  }
  if (v6 == 0x65766974696E6567 && v7 == 0xE800000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 3;
    goto LABEL_8;
  }
  if (v6 == 0x7469736F70657270 && v7 == 0xED00006C616E6F69
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 4;
    goto LABEL_8;
  }
  if (v6 == 0x65766974616C6261 && v7 == 0xE800000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 5;
    goto LABEL_8;
  }
  if (v6 == 0x6576697373656461 && v7 == 0xE800000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 6;
    goto LABEL_8;
  }
  if (v6 == 0x65766974616C6C61 && v7 == 0xE800000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 7;
    goto LABEL_8;
  }
  if (v6 == 0x65766974616C65 && v7 == 0xE700000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 8;
    goto LABEL_8;
  }
  if (v6 == 0x65766974616C6C69 && v7 == 0xE800000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 9;
    goto LABEL_8;
  }
  if (v6 == 0x657669737365 && v7 == 0xE600000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 10;
    goto LABEL_8;
  }
  if (v6 == 0x6576697373656E69 && v7 == 0xE800000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 11;
    goto LABEL_8;
  }
  if (v6 == 0x6576697461636F6CLL && v7 == 0xE800000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 12;
    goto LABEL_8;
  }
  if (v6 == 0x74616C736E617274 && v7 == 0xEB00000000657669)
  {
    swift_bridgeObjectRelease();
LABEL_62:
    v9 = 13;
    goto LABEL_8;
  }
  v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v11 & 1) != 0)
    goto LABEL_62;
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v12 = objc_allocWithZone((Class)NSError);
  v13 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v14 = objc_msgSend(v12, sel_initWithDomain_code_userInfo_, v13, 4866, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v15 = objc_msgSend(v14, sel_domain);
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v18 = v17;

  if (v16 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v18 == v19)
  {
    swift_bridgeObjectRelease_n();
LABEL_67:
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v20 & 1) != 0)
    goto LABEL_67;
  __break(1u);
  return result;
}

void Morphology.GrammaticalCase.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;

  v2 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __asm { BR              X9 }
}

uint64_t sub_181B2C624()
{
  uint64_t v1[13];

  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v1, v1[3]);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Morphology.GrammaticalCase@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  return Morphology.GrammaticalCase.init(from:)(a1, a2);
}

void protocol witness for Encodable.encode(to:) in conformance Morphology.GrammaticalCase(_QWORD *a1)
{
  Morphology.GrammaticalCase.encode(to:)(a1);
}

uint64_t Morphology.Determination.init(from:)@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char v10;
  char v11;
  uint64_t result;
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  _QWORD v22[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  __swift_project_boxed_opaque_existential_1(v22, v22[3]);
  v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
  v7 = v5;
  v8 = v6;
  v9 = v5 == 0x646E657065646E69 && v6 == 0xEB00000000746E65;
  if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v10 = 0;
LABEL_15:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    *a2 = v10;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  if (v7 == 0x6E65646E65706564 && v8 == 0xE900000000000074)
  {
    swift_bridgeObjectRelease();
LABEL_14:
    v10 = 1;
    goto LABEL_15;
  }
  v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v11 & 1) != 0)
    goto LABEL_14;
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v13 = objc_allocWithZone((Class)NSError);
  v14 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v15 = objc_msgSend(v13, sel_initWithDomain_code_userInfo_, v14, 4866, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v16 = objc_msgSend(v15, sel_domain);
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  v19 = v18;

  if (v17 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v19 == v20)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_21;
  }
  v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v21 & 1) != 0)
  {
LABEL_21:
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  __break(1u);
  return result;
}

uint64_t Morphology.Determination.encode(to:)(_QWORD *a1)
{
  return Morphology.Determination.encode(to:)(a1);
}

{
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Morphology.Determination@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  return Morphology.Determination.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Morphology.Determination(_QWORD *a1)
{
  return protocol witness for Encodable.encode(to:) in conformance Morphology.Determination(a1);
}

{
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t Morphology.Definiteness.init(from:)@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char v10;
  char v11;
  uint64_t result;
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  _QWORD v22[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  __swift_project_boxed_opaque_existential_1(v22, v22[3]);
  v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
  v7 = v5;
  v8 = v6;
  v9 = v5 == 0x696E696665646E69 && v6 == 0xEA00000000006574;
  if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v10 = 0;
LABEL_15:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    *a2 = v10;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  if (v7 == 0x6574696E69666564 && v8 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
LABEL_14:
    v10 = 1;
    goto LABEL_15;
  }
  v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v11 & 1) != 0)
    goto LABEL_14;
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v13 = objc_allocWithZone((Class)NSError);
  v14 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v15 = objc_msgSend(v13, sel_initWithDomain_code_userInfo_, v14, 4866, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v16 = objc_msgSend(v15, sel_domain);
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  v19 = v18;

  if (v17 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v19 == v20)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_21;
  }
  v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v21 & 1) != 0)
  {
LABEL_21:
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  __break(1u);
  return result;
}

uint64_t Morphology.Definiteness.encode(to:)(_QWORD *a1)
{
  return Morphology.Determination.encode(to:)(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Morphology.Definiteness@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  return Morphology.Definiteness.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Morphology.Definiteness(_QWORD *a1)
{
  return protocol witness for Encodable.encode(to:) in conformance Morphology.Determination(a1);
}

uint64_t Morphology.GrammaticalPerson.init(from:)@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  char v10;
  uint64_t result;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _QWORD v21[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  __swift_project_boxed_opaque_existential_1(v21, v21[3]);
  v6 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
  v7 = v5;
  v8 = v6 == 0x7473726966 && v5 == 0xE500000000000000;
  if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 0;
LABEL_17:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    *a2 = v9;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  if (v6 == 0x646E6F636573 && v7 == 0xE600000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 1;
    goto LABEL_17;
  }
  if (v6 == 0x6472696874 && v7 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
LABEL_16:
    v9 = 2;
    goto LABEL_17;
  }
  v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v10 & 1) != 0)
    goto LABEL_16;
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v12 = objc_allocWithZone((Class)NSError);
  v13 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v14 = objc_msgSend(v12, sel_initWithDomain_code_userInfo_, v13, 4866, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v15 = objc_msgSend(v14, sel_domain);
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v18 = v17;

  if (v16 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v18 == v19)
  {
    swift_bridgeObjectRelease_n();
LABEL_23:
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v20 & 1) != 0)
    goto LABEL_23;
  __break(1u);
  return result;
}

uint64_t Morphology.GrammaticalPerson.encode(to:)(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Morphology.GrammaticalPerson@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  return Morphology.GrammaticalPerson.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Morphology.GrammaticalPerson(_QWORD *a1)
{
  return Morphology.GrammaticalPerson.encode(to:)(a1);
}

uint64_t Morphology.PronounType.init(from:)@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  char v10;
  uint64_t result;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _QWORD v21[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  __swift_project_boxed_opaque_existential_1(v21, v21[3]);
  v6 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
  v7 = v5;
  v8 = v6 == 0x6C616E6F73726570 && v5 == 0xE800000000000000;
  if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 0;
LABEL_17:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    *a2 = v9;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  if (v6 == 0x766978656C666572 && v7 == 0xE900000000000065
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 1;
    goto LABEL_17;
  }
  if (v6 == 0x6973736573736F70 && v7 == 0xEA00000000006576)
  {
    swift_bridgeObjectRelease();
LABEL_16:
    v9 = 2;
    goto LABEL_17;
  }
  v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v10 & 1) != 0)
    goto LABEL_16;
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v12 = objc_allocWithZone((Class)NSError);
  v13 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v14 = objc_msgSend(v12, sel_initWithDomain_code_userInfo_, v13, 4866, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v15 = objc_msgSend(v14, sel_domain);
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v18 = v17;

  if (v16 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v18 == v19)
  {
    swift_bridgeObjectRelease_n();
LABEL_23:
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v20 & 1) != 0)
    goto LABEL_23;
  __break(1u);
  return result;
}

uint64_t Morphology.PronounType.encode(to:)(_QWORD *a1)
{
  return Morphology.GrammaticalGender.encode(to:)(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Morphology.PronounType@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  return Morphology.PronounType.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Morphology.PronounType(_QWORD *a1)
{
  return Morphology.PronounType.encode(to:)(a1);
}

uint64_t InflectionRule.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int16 v9;
  unsigned __int8 v10;
  uint64_t v11;
  unsigned int v12;
  unsigned __int8 v13;
  _QWORD v14[3];
  uint64_t v15;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v14, v15);
    if ((dispatch thunk of SingleValueDecodingContainer.decode(_:)() & 1) != 0)
    {
      v5 = 0;
      v6 = 0;
      v7 = 0;
    }
    else
    {
      __swift_project_boxed_opaque_existential_1(v14, v15);
      lazy protocol witness table accessor for type Morphology and conformance Morphology();
      dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
      v6 = v11;
      v5 = v9 | ((unint64_t)v10 << 16);
      v7 = v12 | ((unint64_t)v13 << 32);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    *(_QWORD *)a2 = v5;
    *(_QWORD *)(a2 + 8) = v6;
    *(_BYTE *)(a2 + 20) = BYTE4(v7);
    *(_DWORD *)(a2 + 16) = v7;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t InflectionRule.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[24];
  uint64_t v5;

  v2 = *(_QWORD *)(v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v4, v5);
  if (v2)
  {
    lazy protocol witness table accessor for type Morphology and conformance Morphology();
    dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
  }
  else
  {
    dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
}

uint64_t protocol witness for Decodable.init(from:) in conformance InflectionRule@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return InflectionRule.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InflectionRule(_QWORD *a1)
{
  return InflectionRule.encode(to:)(a1);
}

id static InflectionRule.canInflect(language:)(uint64_t a1, uint64_t a2)
{
  return static InflectionRule.canInflect(language:)(a1, a2, (uint64_t)off_1E0F10B90, (SEL *)&selRef_canInflectLanguage_);
}

id static InflectionRule.canInflectPreferredLocalization.getter()
{
  return objc_msgSend((id)objc_opt_self(), sel_canInflectPreferredLocalization);
}

uint64_t Morphology.CustomPronoun.subjectForm.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t key path setter for Morphology.CustomPronoun.subjectForm : Morphology.CustomPronoun(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  a2[1] = v3;
  return result;
}

uint64_t Morphology.CustomPronoun.subjectForm.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t Morphology.CustomPronoun.objectForm.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t key path getter for Morphology.CustomPronoun.objectForm : Morphology.CustomPronoun@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for Morphology.CustomPronoun.objectForm : Morphology.CustomPronoun(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v3;
  return result;
}

uint64_t Morphology.CustomPronoun.objectForm.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t Morphology.CustomPronoun.possessiveForm.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t key path getter for Morphology.CustomPronoun.possessiveForm : Morphology.CustomPronoun@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for Morphology.CustomPronoun.possessiveForm : Morphology.CustomPronoun(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a2 + 32) = v4;
  *(_QWORD *)(a2 + 40) = v3;
  return result;
}

uint64_t Morphology.CustomPronoun.possessiveForm.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t Morphology.CustomPronoun.possessiveAdjectiveForm.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t key path getter for Morphology.CustomPronoun.possessiveAdjectiveForm : Morphology.CustomPronoun@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for Morphology.CustomPronoun.possessiveAdjectiveForm : Morphology.CustomPronoun(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a2 + 48) = v4;
  *(_QWORD *)(a2 + 56) = v3;
  return result;
}

uint64_t Morphology.CustomPronoun.possessiveAdjectiveForm.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  return result;
}

uint64_t Morphology.CustomPronoun.reflexiveForm.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t key path getter for Morphology.CustomPronoun.reflexiveForm : Morphology.CustomPronoun@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 72);
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for Morphology.CustomPronoun.reflexiveForm : Morphology.CustomPronoun(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a2 + 64) = v4;
  *(_QWORD *)(a2 + 72) = v3;
  return result;
}

uint64_t Morphology.CustomPronoun.reflexiveForm.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 64) = a1;
  *(_QWORD *)(v2 + 72) = a2;
  return result;
}

void __swiftcall Morphology.customPronoun(forLanguage:)(Foundation::Morphology::CustomPronoun_optional *__return_ptr retstr, Swift::String forLanguage)
{
  uint64_t v2;
  uint64_t v4;
  Swift::String v5;
  unint64_t v6;
  char v7;
  uint64_t *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(_QWORD *)(v2 + 8);
  v5 = String.lowercased()();
  if (*(_QWORD *)(v4 + 16)
    && (v6 = specialized __RawDictionaryStorage.find<A>(_:)(v5._countAndFlagsBits, (uint64_t)v5._object), (v7 & 1) != 0))
  {
    v8 = (uint64_t *)(*(_QWORD *)(v4 + 56) + 80 * v6);
    v10 = *v8;
    v9 = (void *)v8[1];
    v12 = v8[2];
    v11 = (void *)v8[3];
    v14 = v8[4];
    v13 = (void *)v8[5];
    v15 = (void *)v8[7];
    v16 = (void *)v8[9];
    v17 = v8[8];
    v18 = v8[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    retstr->value._pronoun.subjectForm.value._countAndFlagsBits = v10;
    retstr->value._pronoun.subjectForm.value._object = v9;
    retstr->value._pronoun.objectForm.value._countAndFlagsBits = v12;
    retstr->value._pronoun.objectForm.value._object = v11;
    retstr->value._pronoun.possessiveForm.value._countAndFlagsBits = v14;
    retstr->value._pronoun.possessiveForm.value._object = v13;
    retstr->value._pronoun.possessiveAdjectiveForm.value._countAndFlagsBits = v18;
    retstr->value._pronoun.possessiveAdjectiveForm.value._object = v15;
    retstr->value._pronoun.reflexiveForm.value._countAndFlagsBits = v17;
    retstr->value._pronoun.reflexiveForm.value._object = v16;
  }
  else
  {
    swift_bridgeObjectRelease();
    retstr->value._pronoun.subjectForm = (Swift::String_optional)xmmword_18205FD60;
    retstr->value._pronoun.objectForm = 0u;
    retstr->value._pronoun.possessiveForm = 0u;
    retstr->value._pronoun.possessiveAdjectiveForm = 0u;
    retstr->value._pronoun.reflexiveForm = 0u;
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Morphology.setCustomPronoun(_:forLanguage:)(Foundation::Morphology::CustomPronoun_optional *_, Swift::String forLanguage)
{
  void *object;
  uint64_t countAndFlagsBits;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  id v24;
  Swift::String v25;
  id v26;
  uint64_t v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  void *v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  id aBlock[6];
  _QWORD v41[12];

  v41[10] = *MEMORY[0x1E0C80C00];
  countAndFlagsBits = _->value._pronoun.subjectForm.value._countAndFlagsBits;
  object = _->value._pronoun.subjectForm.value._object;
  v5 = _->value._pronoun.objectForm.value._countAndFlagsBits;
  v4 = _->value._pronoun.objectForm.value._object;
  v6 = _->value._pronoun.possessiveForm.value._countAndFlagsBits;
  v7 = _->value._pronoun.possessiveForm.value._object;
  v8 = _->value._pronoun.possessiveAdjectiveForm.value._countAndFlagsBits;
  v38 = _->value._pronoun.reflexiveForm.value._countAndFlagsBits;
  v39 = _->value._pronoun.possessiveAdjectiveForm.value._object;
  v37 = _->value._pronoun.reflexiveForm.value._object;
  if (object == (void *)1)
  {
    v9 = String.lowercased()();
    v35 = v9._object;
    v36 = v9._countAndFlagsBits;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
LABEL_5:
    v41[0] = v10;
    v41[1] = object;
    v41[2] = v11;
    v41[3] = v12;
    v41[4] = v13;
    v41[5] = v14;
    v41[6] = v15;
    v41[7] = v16;
    v41[8] = v17;
    v41[9] = v18;
    outlined copy of Morphology.CustomPronoun?(countAndFlagsBits, (uint64_t)object);
    specialized Dictionary.subscript.setter((uint64_t)v41, v36, (uint64_t)v35);
    return;
  }
  v19 = (_QWORD *)swift_allocObject();
  v19[2] = countAndFlagsBits;
  v19[3] = object;
  v19[4] = v5;
  v19[5] = v4;
  v19[6] = v6;
  v19[7] = v7;
  v19[8] = v8;
  v19[9] = v39;
  v19[10] = v38;
  v19[11] = v37;
  aBlock[4] = partial apply for closure #1 in Morphology.setCustomPronoun(_:forLanguage:);
  aBlock[5] = v19;
  aBlock[0] = (id)MEMORY[0x1E0C809B0];
  aBlock[1] = (id)1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed String) -> (@out Any?);
  aBlock[3] = &block_descriptor_7;
  v20 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  v21 = String._bridgeToObjectiveCImpl()();
  aBlock[0] = 0;
  v22 = v8;
  v23 = __NSMorphologyCustomPronounValidate((uint64_t)v20, v21, (uint64_t)aBlock);
  swift_unknownObjectRelease();
  _Block_release(v20);
  v24 = aBlock[0];
  if (v23)
  {

    v25 = String.lowercased()();
    v35 = v25._object;
    v36 = v25._countAndFlagsBits;
    v10 = countAndFlagsBits;
    v11 = v5;
    v12 = v4;
    v13 = v6;
    v14 = v7;
    v15 = v22;
    v16 = v39;
    v17 = v38;
    v18 = v37;
    goto LABEL_5;
  }
  if (!v24)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v26 = objc_allocWithZone((Class)NSError);
    v27 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v28 = objc_msgSend(v26, sel_initWithDomain_code_userInfo_, v27, 1024, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v29 = objc_msgSend(v28, sel_domain);
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    v32 = v31;

    if (v30 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v32 == v33)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v34 & 1) == 0)
        __break(1u);
    }
  }
  swift_willThrow();
}

