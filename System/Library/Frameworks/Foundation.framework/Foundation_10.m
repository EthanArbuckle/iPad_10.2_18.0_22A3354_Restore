uint64_t specialized static Locale.localeIdentifierByReplacingLanguageCodeAndScriptCode(localeIDWithDesiredLangCode:localeIDWithDesiredComponents:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  Swift::String v27;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const __CFAllocator *v40;
  const __CFString *v41;
  __CFString *CanonicalLocaleIdentifierFromString;
  _BYTE v43[352];
  Swift::String v44[22];
  _QWORD v45[44];
  uint64_t __src[44];
  uint64_t __dst[46];

  __dst[44] = *MEMORY[0x1E0C80C00];
  swift_bridgeObjectRetain();
  v8 = specialized _withFixedCharBuffer(size:_:)(257, a1, a2);
  v10 = v9;
  swift_bridgeObjectRelease();
  if (!v10)
    return v8;
  Locale.Components.init(identifier:)(v8, v10, __src);
  memcpy(__dst, __src, 0x160uLL);
  if (!__dst[1] || (v11 = (void *)__dst[5]) == 0)
  {
    v30 = (Swift::String *)__dst;
LABEL_12:
    outlined release of Locale.Components(&v30->_countAndFlagsBits);
    return 0;
  }
  v12 = __dst[4];
  __src[0] = __dst[0];
  __src[1] = __dst[1];
  swift_bridgeObjectRetain();
  outlined copy of Locale.LanguageCode?(v12, (uint64_t)v11);
  v13._countAndFlagsBits = 45;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  swift_bridgeObjectRetain();
  outlined consume of Locale.LanguageCode?(v12, (uint64_t)v11);
  v14._countAndFlagsBits = v12;
  v14._object = v11;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  outlined release of Locale.Components(__dst);
  v15 = __src[0];
  v16 = __src[1];
  swift_bridgeObjectRetain();
  v8 = specialized _withFixedCharBuffer(size:_:)(257, a3, a4);
  v18 = v17;
  swift_bridgeObjectRelease();
  if (!v18)
  {
    swift_bridgeObjectRelease();
    return v8;
  }
  Locale.Components.init(identifier:)(v8, v18, v45);
  Locale.Components.init(identifier:)(v15, v16, __src);
  if (!__src[1])
  {
    outlined release of Locale.Components(__src);
    memcpy(v44, v45, sizeof(v44));
    v30 = v44;
    goto LABEL_12;
  }
  v8 = __src[5];
  if (!__src[5])
  {
    outlined release of Locale.Components(__src);
    memcpy(v44, v45, sizeof(v44));
    outlined release of Locale.Components(&v44[0]._countAndFlagsBits);
    return v8;
  }
  v19 = __src[4];
  v20 = __src[6];
  v21 = __src[7];
  v22 = v45[0];
  v23 = v45[1];
  v45[0] = __src[0];
  v45[1] = __src[1];
  v45[2] = __src[2];
  v45[3] = __src[3];
  outlined copy of Locale.LanguageCode?(__src[0], __src[1]);
  outlined copy of Locale.LanguageCode?(v19, v8);
  outlined consume of Locale.LanguageCode?(v22, v23);
  outlined consume of Locale.LanguageCode?(v45[4], v45[5]);
  v45[4] = v19;
  v45[5] = v8;
  v45[6] = v20;
  v45[7] = v21;
  swift_bridgeObjectRetain();
  specialized static Locale.keywordValue(identifier:key:)();
  if (!v24)
  {
    swift_bridgeObjectRelease();
    static Locale.NumberingSystem.defaultNumberingSystem(for:)(a3, a4, v44);
    if (v44[0]._object)
    {
      countAndFlagsBits = v44[1]._countAndFlagsBits;
      object = v44[1]._object;
    }
    else
    {
      if (one-time initialization token for latn != -1)
        swift_once();
      object = (void *)*((_QWORD *)&xmmword_1EDC464F8 + 1);
      countAndFlagsBits = xmmword_1EDC464F8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
LABEL_23:
    v31 = specialized static Locale.NumberingSystem.validNumberingSystems(for:)(a1, a2);
    v32 = v31[2];
    if (v32)
    {
      v33 = 0;
      while (1)
      {
        v34 = &v31[v33];
        v35 = v31[v33 + 6] == countAndFlagsBits && v31[v33 + 7] == (_QWORD)object;
        if (v35 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          break;
        v33 += 4;
        if (!--v32)
          goto LABEL_31;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v33 * 8)
      {
        v37 = v31[v33 + 4];
        v36 = v31[v33 + 5];
        v39 = v34[6];
        v38 = v34[7];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        outlined consume of Locale.LanguageCode?(v45[21], v45[22]);
        v45[21] = v37;
        v45[22] = v36;
        v45[23] = v39;
        v45[24] = v38;
        goto LABEL_35;
      }
    }
    else
    {
LABEL_31:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    outlined consume of Locale.LanguageCode?(v45[21], v45[22]);
    memset(&v45[21], 0, 32);
LABEL_35:
    memcpy(v44, v45, sizeof(v44));
    memcpy(v43, v45, sizeof(v43));
    Locale.Components.icuIdentifier.getter();
    v40 = (const __CFAllocator *)*MEMORY[0x1E0C9AE30];
    v41 = (const __CFString *)String._bridgeToObjectiveCImpl()();
    CanonicalLocaleIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLocaleIdentifierFromString(v40, v41);
    swift_unknownObjectRelease();
    if (CanonicalLocaleIdentifierFromString)
    {
      v8 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLocaleIdentifierFromString);
      swift_bridgeObjectRelease();

      outlined release of Locale.Components(__src);
      outlined release of Locale.Components(&v44[0]._countAndFlagsBits);
    }
    else
    {
      swift_bridgeObjectRelease();
      outlined release of Locale.Components(__src);
      outlined release of Locale.Components(&v44[0]._countAndFlagsBits);
      return 0;
    }
    return v8;
  }
  swift_bridgeObjectRelease();
  LODWORD(v44[0]._countAndFlagsBits) = 0;
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v25 = unumsys_open();
  swift_release();
  if (!v25)
  {
    if (one-time initialization token for latn != -1)
      swift_once();
    object = (void *)*((_QWORD *)&xmmword_1EDC464F8 + 1);
    countAndFlagsBits = xmmword_1EDC464F8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_22;
  }
  result = MEMORY[0x186DAA76C](v25);
  if (result)
  {
    String.init(cString:)();
    v27 = String.lowercased()();
    countAndFlagsBits = v27._countAndFlagsBits;
    object = v27._object;
LABEL_22:
    unumsys_close();
    goto LABEL_23;
  }
  __break(1u);
  return result;
}

uint64_t specialized _LocaleICU.displayNameIncludingFallbacks(_:)(uint64_t a1, unsigned __int8 a2)
{
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const __CFAllocator *v9;
  uint64_t v10;
  const __CFString *v11;
  __CFString *CanonicalLanguageIdentifierFromString;
  _BYTE v14[144];
  uint64_t v15;
  unint64_t v16;

  v4._countAndFlagsBits = Calendar.Identifier.cfCalendarIdentifier.getter();
  v15 = 0x61634053555F6E65;
  v16 = 0xEF3D7261646E656CLL;
  String.append(_:)(v4);
  swift_bridgeObjectRetain();
  v5 = specialized _withFixedUCharBuffer(size:defaultIsError:_:)(257, 1u);
  v7 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v7)
  {
    outlined init with take of LocalePreferences?(a1 + 40, (uint64_t)v14);
    outlined init with take of LocalePreferences?((uint64_t)v14, (uint64_t)&v15);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)&v15) == 1 || !v16)
    {
      if (one-time initialization token for cache != -1)
        swift_once();
      v8 = (uint64_t)LocaleCache.preferredLanguages(forCurrentUser:)(0);
    }
    else
    {
      v8 = swift_bridgeObjectRetain();
    }
    if (*(_QWORD *)(v8 + 16))
    {
      v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE30];
      v10 = a2;
      v11 = (const __CFString *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRetain();
      CanonicalLanguageIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLanguageIdentifierFromString(v9, v11);
      swift_unknownObjectRelease();
      if (CanonicalLanguageIdentifierFromString)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLanguageIdentifierFromString);
        swift_bridgeObjectRelease();

      }
      else
      {
        swift_bridgeObjectRelease();
      }
      __asm { BR              X8 }
    }
    swift_bridgeObjectRelease();
    return 0;
  }
  return v5;
}

void specialized _LocaleICU.displayNameIncludingFallbacks(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *, uint64_t, int *))
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const __CFString *v16;
  __CFString *CanonicalLanguageIdentifierFromString;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  CFAllocatorRef v29;
  void *v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t *, uint64_t, int *);
  uint64_t *v33;
  int v34;
  _BYTE v35[514];
  _QWORD v36[2];
  _BYTE v37[144];
  int v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v38 = 0;
  v31 = a2;
  v7 = String.utf8CString.getter() + 32;
  v8 = String.utf8CString.getter();
  v32 = a4;
  v9 = a4(v7, v8 + 32, (uint64_t *)v35, 257, &v38);
  swift_release();
  swift_release();
  if (v38 > 0 || v38 == -127 || (v9 <= 257 ? (v10 = v9 <= 0) : (v10 = 1), v10))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    specialized String.init(_utf16:)((uint64_t)v35, v9);
    v12 = v11;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v12)
      return;
  }
  outlined init with take of LocalePreferences?(a1 + 40, (uint64_t)v37);
  outlined init with take of LocalePreferences?((uint64_t)v37, (uint64_t)&v38);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)&v38) == 1 || !v39)
  {
    if (one-time initialization token for cache != -1)
      swift_once();
    v13 = (uint64_t)LocaleCache.preferredLanguages(forCurrentUser:)(0);
  }
  else
  {
    v13 = swift_bridgeObjectRetain();
  }
  v28 = v13;
  v14 = *(_QWORD *)(v13 + 16);
  if (v14)
  {
    v30 = 0;
    v29 = (CFAllocatorRef)*MEMORY[0x1E0C9AE30];
    v15 = v28 + 40;
    do
    {
      v16 = (const __CFString *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRetain();
      CanonicalLanguageIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLanguageIdentifierFromString(v29, v16);
      swift_unknownObjectRelease();
      if (CanonicalLanguageIdentifierFromString)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLanguageIdentifierFromString);
        swift_bridgeObjectRelease();

      }
      else
      {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRetain();
      v18 = swift_bridgeObjectRetain();
      v33 = &v28;
      MEMORY[0x1E0C80A78](v18);
      v34 = 0;
      v19 = String.utf8CString.getter() + 32;
      v20 = String.utf8CString.getter();
      v21 = v32(v19, v20 + 32, &v28 - 66, 257, &v34);
      swift_release();
      v22 = swift_release();
      if (v34 > 0 || v34 == -127 || v21 > 257 || v21 <= 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
      }
      else
      {
        MEMORY[0x1E0C80A78](v22);
        v24 = v30;
        closure #1 in String.init(_utf16:)((_BYTE *)&v28 - v23, (unsigned __int16 *)&v28 - 264, v25, v36);
        v30 = v24;
        if (v24)
        {
          v27 = v30;
          swift_willThrow();

          __break(1u);
          return;
        }
        v26 = v36[1];
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        if (v26)
        {
          swift_bridgeObjectRelease();
          return;
        }
      }
      v15 += 16;
      --v14;
    }
    while (v14);
  }
  swift_bridgeObjectRelease();
}

uint64_t specialized closure #1 in closure #1 in _LocaleICU.countryCodeDisplayName(for:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  Swift::String v6;
  uint64_t v7;
  int DisplayCountry;
  uint64_t v9;
  _QWORD v11[70];

  v11[69] = *MEMORY[0x1E0C80C00];
  if (String.count.getter() > 153)
    return 0;
  v11[68] = 0xE300000000000000;
  v6._countAndFlagsBits = a3;
  v6._object = a4;
  String.append(_:)(v6);
  v7 = swift_bridgeObjectRetain();
  MEMORY[0x1E0C80A78](v7);
  v11[67] = 0;
  String.utf8CString.getter();
  String.utf8CString.getter();
  DisplayCountry = uloc_getDisplayCountry();
  swift_release();
  swift_release();
  v9 = 0;
  if (DisplayCountry <= 257 && DisplayCountry > 0)
    v9 = specialized String.init(_utf16:)((uint64_t)v11, DisplayCountry);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t specialized closure #1 in closure #1 in _LocaleICU.scriptCodeDisplayName(for:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;
  int DisplayScript;
  uint64_t v10;
  _QWORD v12[70];

  v12[69] = *MEMORY[0x1E0C80C00];
  if (String.count.getter() != 4)
    return 0;
  v12[68] = 0xE300000000000000;
  v6._countAndFlagsBits = a3;
  v6._object = a4;
  String.append(_:)(v6);
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = 5461343;
  v7._object = (void *)0xE300000000000000;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8 = swift_bridgeObjectRetain();
  MEMORY[0x1E0C80A78](v8);
  v12[67] = 0;
  String.utf8CString.getter();
  String.utf8CString.getter();
  DisplayScript = uloc_getDisplayScript();
  swift_release();
  swift_release();
  v10 = 0;
  if (DisplayScript <= 257 && DisplayScript > 0)
    v10 = specialized String.init(_utf16:)((uint64_t)v12, DisplayScript);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t specialized _LocaleICU.displayNameIncludingFallbacks(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const __CFAllocator *v11;
  uint64_t v12;
  const __CFString *v13;
  __CFString *CanonicalLanguageIdentifierFromString;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  int DisplayScript;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  const __CFAllocator *v24;
  uint64_t v25;
  void *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  _BYTE v30[144];
  _QWORD v31[20];

  v3 = a3;
  v4 = a2;
  v31[18] = *MEMORY[0x1E0C80C00];
  v6 = specialized closure #1 in closure #1 in _LocaleICU.scriptCodeDisplayName(for:)(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2, a3);
  if (!v7)
  {
    outlined init with take of LocalePreferences?(a1 + 40, (uint64_t)v30);
    outlined init with take of LocalePreferences?((uint64_t)v30, (uint64_t)v31);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v31) == 1 || !v31[1])
    {
      if (one-time initialization token for cache != -1)
        swift_once();
      v9 = (uint64_t)LocaleCache.preferredLanguages(forCurrentUser:)(0);
    }
    else
    {
      v9 = swift_bridgeObjectRetain();
    }
    v23 = v9;
    v10 = *(_QWORD *)(v9 + 16);
    if (!v10)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      return 0;
    }
    v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE30];
    v12 = v23 + 40;
    v25 = v4;
    v26 = v3;
    v24 = v11;
    while (1)
    {
      v13 = (const __CFString *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRetain();
      CanonicalLanguageIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLanguageIdentifierFromString(v11, v13);
      swift_unknownObjectRelease();
      if (CanonicalLanguageIdentifierFromString)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLanguageIdentifierFromString);
        swift_bridgeObjectRelease();

      }
      else
      {
        swift_bridgeObjectRelease();
      }
      if (String.count.getter() != 4)
        goto LABEL_12;
      v28 = 6254181;
      v29 = 0xE300000000000000;
      v15._countAndFlagsBits = v4;
      v15._object = v3;
      String.append(_:)(v15);
      swift_bridgeObjectRetain();
      v16._countAndFlagsBits = 5461343;
      v16._object = (void *)0xE300000000000000;
      String.append(_:)(v16);
      swift_bridgeObjectRelease();
      v17 = swift_bridgeObjectRetain();
      v27 = &v22;
      MEMORY[0x1E0C80A78](v17);
      LODWORD(v28) = 0;
      String.utf8CString.getter();
      String.utf8CString.getter();
      DisplayScript = uloc_getDisplayScript();
      swift_release();
      swift_release();
      if ((int)v28 > 0 || (_DWORD)v28 == -127 || DisplayScript > 257 || DisplayScript <= 0)
        break;
      v8 = specialized String.init(_utf16:)((uint64_t)(&v22 - 66), DisplayScript);
      v20 = v19;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v4 = v25;
      v3 = v26;
      v11 = v24;
      if (v20)
      {
        swift_bridgeObjectRelease();
        return v8;
      }
LABEL_13:
      v12 += 16;
      if (!--v10)
        goto LABEL_24;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v4 = v25;
    v3 = v26;
    v11 = v24;
LABEL_12:
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  return v6;
}

uint64_t specialized closure #1 in closure #1 in _LocaleICU.variantCodeDisplayName(for:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  Swift::String v6;
  uint64_t v7;
  int DisplayVariant;
  uint64_t v9;
  _QWORD v11[70];

  v11[69] = *MEMORY[0x1E0C80C00];
  if (String.count.getter() > 250)
    return 0;
  v11[68] = 0xE600000000000000;
  v6._countAndFlagsBits = a3;
  v6._object = a4;
  String.append(_:)(v6);
  v7 = swift_bridgeObjectRetain();
  MEMORY[0x1E0C80A78](v7);
  v11[67] = 0x5F5300000000;
  String.utf8CString.getter();
  String.utf8CString.getter();
  DisplayVariant = uloc_getDisplayVariant();
  swift_release();
  swift_release();
  v9 = 0;
  if (DisplayVariant <= 257 && DisplayVariant > 0)
    v9 = specialized String.init(_utf16:)((uint64_t)v11, DisplayVariant);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t specialized _LocaleICU.displayNameIncludingFallbacks(_:)(uint64_t a1, Swift::String a2)
{
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const __CFAllocator *v10;
  uint64_t v11;
  const __CFString *v12;
  __CFString *CanonicalLanguageIdentifierFromString;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[144];
  unint64_t v19;
  unint64_t v20;

  object = a2._object;
  countAndFlagsBits = a2._countAndFlagsBits;
  v19 = 0xD000000000000010;
  v20 = 0x800000018230BD60;
  String.append(_:)(a2);
  swift_bridgeObjectRetain();
  v5 = specialized _withFixedUCharBuffer(size:defaultIsError:_:)(257, 1u);
  v7 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v7)
  {
    outlined init with take of LocalePreferences?(a1 + 40, (uint64_t)v18);
    outlined init with take of LocalePreferences?((uint64_t)v18, (uint64_t)&v19);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)&v19) == 1 || !v20)
    {
      if (one-time initialization token for cache != -1)
        swift_once();
      v8 = (uint64_t)LocaleCache.preferredLanguages(forCurrentUser:)(0);
    }
    else
    {
      v8 = swift_bridgeObjectRetain();
    }
    v9 = *(_QWORD *)(v8 + 16);
    if (v9)
    {
      v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE30];
      v11 = v8 + 40;
      while (1)
      {
        v12 = (const __CFString *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRetain();
        CanonicalLanguageIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLanguageIdentifierFromString(v10, v12);
        swift_unknownObjectRelease();
        if (CanonicalLanguageIdentifierFromString)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLanguageIdentifierFromString);
          swift_bridgeObjectRelease();

        }
        else
        {
          swift_bridgeObjectRelease();
        }
        v14._countAndFlagsBits = countAndFlagsBits;
        v14._object = object;
        String.append(_:)(v14);
        swift_bridgeObjectRetain();
        v5 = specialized _withFixedUCharBuffer(size:defaultIsError:_:)(257, 1u);
        v16 = v15;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        if (v16)
          break;
        v11 += 16;
        if (!--v9)
          goto LABEL_15;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_15:
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  return v5;
}

uint64_t specialized _LocaleICU.displayNameIncludingFallbacks(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  const __CFAllocator *v9;
  uint64_t v10;
  const __CFString *v11;
  __CFString *CanonicalLanguageIdentifierFromString;
  uint64_t v13;
  UChar v15[12];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18[2];
  _BYTE v19[144];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (String.count.getter() != 3
    || (MEMORY[0x1E0C80A78](3),
        closure #1 in _LocaleICU.icuCurrencyName(localeIdentifier:value:style:)(v15, &v20),
        !v21))
  {
    outlined init with take of LocalePreferences?(a1 + 40, (uint64_t)v19);
    outlined init with take of LocalePreferences?((uint64_t)v19, (uint64_t)&v20);
    v6 = _s10Foundation17LocalePreferencesVSgWOg((uint64_t)&v20);
    v17 = a3;
    if (v6 == 1 || !v21)
    {
      if (one-time initialization token for cache != -1)
        swift_once();
      v7 = (uint64_t)LocaleCache.preferredLanguages(forCurrentUser:)(0);
    }
    else
    {
      v7 = swift_bridgeObjectRetain();
    }
    v16 = v7;
    v8 = *(_QWORD *)(v7 + 16);
    if (!v8)
    {
LABEL_20:
      swift_bridgeObjectRelease();
      return 0;
    }
    v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE30];
    v10 = v16 + 40;
    while (1)
    {
      v11 = (const __CFString *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRetain();
      CanonicalLanguageIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLanguageIdentifierFromString(v9, v11);
      swift_unknownObjectRelease();
      if (CanonicalLanguageIdentifierFromString)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLanguageIdentifierFromString);
        swift_bridgeObjectRelease();

      }
      else
      {
        swift_bridgeObjectRelease();
      }
      if (String.count.getter() == 3)
      {
        MEMORY[0x1E0C80A78](3);
        closure #1 in _LocaleICU.icuCurrencyName(localeIdentifier:value:style:)(v15, v18);
        v5 = v18[0];
        v13 = v18[1];
        swift_bridgeObjectRelease();
        if (v13)
        {
          swift_bridgeObjectRelease();
          return v5;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v10 += 16;
      if (!--v8)
        goto LABEL_20;
    }
  }
  return v20;
}

{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  const __CFAllocator *v9;
  uint64_t v10;
  const __CFString *v11;
  __CFString *CanonicalLanguageIdentifierFromString;
  uint64_t v13;
  UChar v15[12];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18[2];
  _BYTE v19[144];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (String.count.getter() != 3
    || (MEMORY[0x1E0C80A78](3),
        closure #1 in _LocaleICU.icuCurrencyName(localeIdentifier:value:style:)(v15, &v20),
        !v21))
  {
    outlined init with take of LocalePreferences?(a1 + 40, (uint64_t)v19);
    outlined init with take of LocalePreferences?((uint64_t)v19, (uint64_t)&v20);
    v6 = _s10Foundation17LocalePreferencesVSgWOg((uint64_t)&v20);
    v17 = a3;
    if (v6 == 1 || !v21)
    {
      if (one-time initialization token for cache != -1)
        swift_once();
      v7 = (uint64_t)LocaleCache.preferredLanguages(forCurrentUser:)(0);
    }
    else
    {
      v7 = swift_bridgeObjectRetain();
    }
    v16 = v7;
    v8 = *(_QWORD *)(v7 + 16);
    if (!v8)
    {
LABEL_20:
      swift_bridgeObjectRelease();
      return 0;
    }
    v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE30];
    v10 = v16 + 40;
    while (1)
    {
      v11 = (const __CFString *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRetain();
      CanonicalLanguageIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLanguageIdentifierFromString(v9, v11);
      swift_unknownObjectRelease();
      if (CanonicalLanguageIdentifierFromString)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLanguageIdentifierFromString);
        swift_bridgeObjectRelease();

      }
      else
      {
        swift_bridgeObjectRelease();
      }
      if (String.count.getter() == 3)
      {
        MEMORY[0x1E0C80A78](3);
        closure #1 in _LocaleICU.icuCurrencyName(localeIdentifier:value:style:)(v15, v18);
        v5 = v18[0];
        v13 = v18[1];
        swift_bridgeObjectRelease();
        if (v13)
        {
          swift_bridgeObjectRelease();
          return v5;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v10 += 16;
      if (!--v8)
        goto LABEL_20;
    }
  }
  return v20;
}

uint64_t specialized static Locale.availableIdentifiers.getter()
{
  uint64_t result;
  int v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;

  v8 = MEMORY[0x1E0DEE9E8];
  result = uloc_countAvailable();
  if ((result & 0x80000000) != 0)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  v1 = result;
  if ((_DWORD)result)
  {
    v2 = 0;
    while (v1 != v2)
    {
      result = uloc_getAvailable();
      if (!result)
        goto LABEL_12;
      ++v2;
      v3 = String.init(cString:)();
      specialized Set._Variant.insert(_:)(&v7, v3, v4);
      result = swift_bridgeObjectRelease();
      if (v1 == v2)
      {
        v5 = v8;
        goto LABEL_9;
      }
    }
    __break(1u);
    goto LABEL_11;
  }
  v5 = MEMORY[0x1E0DEE9E8];
LABEL_9:
  v6 = specialized _copyCollectionToContiguousArray<A>(_:)(v5);
  swift_bridgeObjectRelease();
  return (uint64_t)v6;
}

uint64_t initializeWithCopy for _LocaleICU.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  unint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  unint64_t v28;
  __int128 v29;
  uint64_t v30;
  unint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    if (v4 == 1)
    {
      v5 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v5;
      v6 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v6;
      v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      goto LABEL_10;
    }
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
    v13 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v13;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v9 = *(_QWORD *)(a2 + 40);
    if (!v9)
    {
LABEL_8:
      v14 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v14;
      v11 = *(_QWORD *)(a2 + 72);
      if (!v11)
        goto LABEL_9;
LABEL_6:
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = v11;
      v12 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_10;
    }
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
    v9 = *(_QWORD *)(a2 + 40);
    if (!v9)
      goto LABEL_8;
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v9;
  v10 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = *(_QWORD *)(a2 + 72);
  if (v11)
    goto LABEL_6;
LABEL_9:
  v15 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v15;
LABEL_10:
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v16 = *(_QWORD *)(a2 + 112);
  if (v16)
  {
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = v16;
    v17 = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = v17;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v18 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v18;
  }
  v19 = *(_QWORD *)(a2 + 144);
  if (v19 > 1)
  {
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = v19;
    v23 = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 160) = v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v21 = *(_QWORD *)(a2 + 176);
    if (v21)
      goto LABEL_15;
  }
  else
  {
    v20 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v20;
    v21 = *(_QWORD *)(a2 + 176);
    if (v21)
    {
LABEL_15:
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 176) = v21;
      v22 = *(_QWORD *)(a2 + 192);
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      *(_QWORD *)(a1 + 192) = v22;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_18;
    }
  }
  v24 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = v24;
LABEL_18:
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_WORD *)(a1 + 264) = *(_WORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_WORD *)(a1 + 280) = *(_WORD *)(a2 + 280);
  v25 = *(_QWORD *)(a2 + 296);
  swift_bridgeObjectRetain();
  if (v25)
  {
    *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
    *(_QWORD *)(a1 + 296) = v25;
    v26 = *(_QWORD *)(a2 + 312);
    *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
    *(_QWORD *)(a1 + 312) = v26;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v27 = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 304) = v27;
  }
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  v28 = *(_QWORD *)(a2 + 336);
  if (v28 > 1)
  {
    *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
    *(_QWORD *)(a1 + 336) = v28;
    v30 = *(_QWORD *)(a2 + 352);
    *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
    *(_QWORD *)(a1 + 352) = v30;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v29 = *(_OWORD *)(a2 + 344);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
    *(_OWORD *)(a1 + 344) = v29;
  }
  v31 = *(_QWORD *)(a2 + 368);
  if (v31 > 1)
  {
    *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
    *(_QWORD *)(a1 + 368) = v31;
    v33 = *(_QWORD *)(a2 + 384);
    *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
    *(_QWORD *)(a1 + 384) = v33;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v32 = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
    *(_OWORD *)(a1 + 376) = v32;
  }
  v34 = *(_QWORD *)(a2 + 392);
  if (v34 == 1)
  {
    *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
  }
  else
  {
    v35 = *(_QWORD *)(a2 + 400);
    *(_QWORD *)(a1 + 392) = v34;
    *(_QWORD *)(a1 + 400) = v35;
    swift_unknownObjectRetain();
  }
  v36 = *(_QWORD *)(a2 + 416);
  if (v36 > 1)
  {
    *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
    *(_QWORD *)(a1 + 416) = v36;
    v38 = *(_QWORD *)(a2 + 432);
    *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
    *(_QWORD *)(a1 + 432) = v38;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v37 = *(_OWORD *)(a2 + 424);
    *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
    *(_OWORD *)(a1 + 424) = v37;
  }
  v39 = *(_QWORD *)(a2 + 448);
  *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
  *(_QWORD *)(a1 + 448) = v39;
  v40 = *(_QWORD *)(a2 + 464);
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
  *(_QWORD *)(a1 + 464) = v40;
  v41 = *(_QWORD *)(a2 + 480);
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(a1 + 480) = v41;
  v42 = *(_QWORD *)(a2 + 496);
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  *(_QWORD *)(a1 + 496) = v42;
  v43 = *(_QWORD *)(a2 + 512);
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
  *(_QWORD *)(a1 + 512) = v43;
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
  *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
  *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _LocaleICU.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  _OWORD *v24;
  _OWORD *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  _OWORD *v29;
  _OWORD *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  _OWORD *v34;
  _OWORD *v35;
  uint64_t v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  _OWORD *v40;
  _OWORD *v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  _OWORD *v49;
  _OWORD *v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  _OWORD *v54;
  _OWORD *v55;
  uint64_t v56;
  unint64_t v57;
  __int128 v58;
  __int128 v59;
  _OWORD *v60;
  _OWORD *v61;
  uint64_t v62;
  unint64_t v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _OWORD *v69;
  _OWORD *v70;
  uint64_t v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (v4 == 1)
  {
    if (v5 == 1)
    {
      v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      v7 = *(_OWORD *)(a2 + 32);
      v8 = *(_OWORD *)(a2 + 48);
      v9 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v9;
      *(_OWORD *)(a1 + 32) = v7;
      *(_OWORD *)(a1 + 48) = v8;
      goto LABEL_34;
    }
    if (v5)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (*(_QWORD *)(a2 + 40))
        goto LABEL_8;
    }
    else
    {
      v14 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v14;
      if (*(_QWORD *)(a2 + 40))
      {
LABEL_8:
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (!*(_QWORD *)(a2 + 72))
          goto LABEL_15;
        goto LABEL_31;
      }
    }
    v15 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v15;
    if (!*(_QWORD *)(a2 + 72))
    {
LABEL_15:
      v16 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v16;
      goto LABEL_34;
    }
    goto LABEL_31;
  }
  if (v5 == 1)
  {
    outlined destroy of Locale.Language.Components(a1);
    v10 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
    v11 = *(_OWORD *)(a2 + 80);
    v13 = *(_OWORD *)(a2 + 32);
    v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v11;
    *(_OWORD *)(a1 + 32) = v13;
    *(_OWORD *)(a1 + 48) = v12;
    goto LABEL_34;
  }
  if (v4)
  {
    if (v5)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.LanguageCode(a1);
      v17 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v17;
    }
  }
  else if (v5)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v18 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v18;
  }
  v19 = (_OWORD *)(a1 + 32);
  v20 = (_OWORD *)(a2 + 32);
  v21 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 40))
  {
    if (v21)
    {
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.Script(a1 + 32);
      v22 = *(_OWORD *)(a2 + 48);
      *v19 = *v20;
      *(_OWORD *)(a1 + 48) = v22;
    }
  }
  else if (v21)
  {
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v23 = *(_OWORD *)(a2 + 48);
    *v19 = *v20;
    *(_OWORD *)(a1 + 48) = v23;
  }
  v24 = (_OWORD *)(a1 + 64);
  v25 = (_OWORD *)(a2 + 64);
  v26 = *(_QWORD *)(a2 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    if (v26)
    {
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.Region(a1 + 64);
      v27 = *(_OWORD *)(a2 + 80);
      *v24 = *v25;
      *(_OWORD *)(a1 + 80) = v27;
    }
    goto LABEL_34;
  }
  if (v26)
  {
LABEL_31:
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_34;
  }
  v28 = *(_OWORD *)(a2 + 80);
  *v24 = *v25;
  *(_OWORD *)(a1 + 80) = v28;
LABEL_34:
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v29 = (_OWORD *)(a1 + 104);
  v30 = (_OWORD *)(a2 + 104);
  v31 = *(_QWORD *)(a2 + 112);
  if (*(_QWORD *)(a1 + 112))
  {
    if (v31)
    {
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.Collation(a1 + 104);
      v32 = *(_OWORD *)(a2 + 120);
      *v29 = *v30;
      *(_OWORD *)(a1 + 120) = v32;
    }
  }
  else if (v31)
  {
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v33 = *(_OWORD *)(a2 + 120);
    *v29 = *v30;
    *(_OWORD *)(a1 + 120) = v33;
  }
  v34 = (_OWORD *)(a1 + 136);
  v35 = (_OWORD *)(a2 + 136);
  v36 = *(_QWORD *)(a1 + 144);
  v37 = *(_QWORD *)(a2 + 144);
  if (v36 == 1)
  {
    if (v37 <= 1)
    {
LABEL_43:
      v38 = *(_OWORD *)(a2 + 152);
      *v34 = *v35;
      *(_OWORD *)(a1 + 152) = v38;
      goto LABEL_52;
    }
    goto LABEL_51;
  }
  if (v37 == 1)
  {
    outlined destroy of Any?(a1 + 136, &demangling cache variable for type metadata for Locale.Currency?);
    goto LABEL_46;
  }
  if (v36)
  {
    if (v37)
    {
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_52;
    }
    outlined destroy of Locale.Currency(a1 + 136);
LABEL_46:
    v39 = *(_OWORD *)(a2 + 152);
    *v34 = *v35;
    *(_OWORD *)(a1 + 152) = v39;
    goto LABEL_52;
  }
  if (!v37)
    goto LABEL_43;
LABEL_51:
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_52:
  v40 = (_OWORD *)(a1 + 168);
  v41 = (_OWORD *)(a2 + 168);
  v42 = *(_QWORD *)(a2 + 176);
  if (*(_QWORD *)(a1 + 176))
  {
    if (v42)
    {
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.NumberingSystem(a1 + 168);
      v43 = *(_OWORD *)(a2 + 184);
      *v40 = *v41;
      *(_OWORD *)(a1 + 184) = v43;
    }
  }
  else if (v42)
  {
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v44 = *(_OWORD *)(a2 + 184);
    *v40 = *v41;
    *(_OWORD *)(a1 + 184) = v44;
  }
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  v45 = *(_OWORD *)(a2 + 216);
  v46 = *(_OWORD *)(a2 + 232);
  v47 = *(_OWORD *)(a2 + 248);
  *(_WORD *)(a1 + 264) = *(_WORD *)(a2 + 264);
  *(_OWORD *)(a1 + 248) = v47;
  *(_OWORD *)(a1 + 232) = v46;
  *(_OWORD *)(a1 + 216) = v45;
  v48 = *(_QWORD *)(a2 + 272);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = v48;
  *(_BYTE *)(a1 + 281) = *(_BYTE *)(a2 + 281);
  v49 = (_OWORD *)(a1 + 288);
  v50 = (_OWORD *)(a2 + 288);
  v51 = *(_QWORD *)(a2 + 296);
  if (*(_QWORD *)(a1 + 296))
  {
    if (v51)
    {
      *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
      *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
      *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.MeasurementSystem(a1 + 288);
      v52 = *(_OWORD *)(a2 + 304);
      *v49 = *v50;
      *(_OWORD *)(a1 + 304) = v52;
    }
  }
  else if (v51)
  {
    *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
    *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
    *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
    *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v53 = *(_OWORD *)(a2 + 304);
    *v49 = *v50;
    *(_OWORD *)(a1 + 304) = v53;
  }
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  v54 = (_OWORD *)(a1 + 328);
  v55 = (_OWORD *)(a2 + 328);
  v56 = *(_QWORD *)(a1 + 336);
  v57 = *(_QWORD *)(a2 + 336);
  if (v56 == 1)
  {
    if (v57 <= 1)
    {
LABEL_68:
      v58 = *(_OWORD *)(a2 + 344);
      *v54 = *v55;
      *(_OWORD *)(a1 + 344) = v58;
      goto LABEL_77;
    }
    goto LABEL_76;
  }
  if (v57 == 1)
  {
    outlined destroy of Any?(a1 + 328, &demangling cache variable for type metadata for Locale.Region?);
    goto LABEL_71;
  }
  if (v56)
  {
    if (v57)
    {
      *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
      *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
      *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_77;
    }
    outlined destroy of Locale.Region(a1 + 328);
LABEL_71:
    v59 = *(_OWORD *)(a2 + 344);
    *v54 = *v55;
    *(_OWORD *)(a1 + 344) = v59;
    goto LABEL_77;
  }
  if (!v57)
    goto LABEL_68;
LABEL_76:
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_77:
  v60 = (_OWORD *)(a1 + 360);
  v61 = (_OWORD *)(a2 + 360);
  v62 = *(_QWORD *)(a1 + 368);
  v63 = *(_QWORD *)(a2 + 368);
  if (v62 == 1)
  {
    if (v63 <= 1)
    {
LABEL_79:
      v64 = *(_OWORD *)(a2 + 376);
      *v60 = *v61;
      *(_OWORD *)(a1 + 376) = v64;
      goto LABEL_88;
    }
    goto LABEL_87;
  }
  if (v63 == 1)
  {
    outlined destroy of Any?(a1 + 360, &demangling cache variable for type metadata for Locale.Subdivision?);
    goto LABEL_82;
  }
  if (v62)
  {
    if (v63)
    {
      *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
      *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
      *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_88;
    }
    outlined destroy of Locale.Subdivision(a1 + 360);
LABEL_82:
    v65 = *(_OWORD *)(a2 + 376);
    *v60 = *v61;
    *(_OWORD *)(a1 + 376) = v65;
    goto LABEL_88;
  }
  if (!v63)
    goto LABEL_79;
LABEL_87:
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_88:
  v66 = *(_QWORD *)(a2 + 392);
  if (*(_QWORD *)(a1 + 392) == 1)
  {
    if (v66 != 1)
    {
      v67 = *(_QWORD *)(a2 + 400);
      *(_QWORD *)(a1 + 392) = v66;
      *(_QWORD *)(a1 + 400) = v67;
      swift_unknownObjectRetain();
      goto LABEL_95;
    }
    goto LABEL_93;
  }
  if (v66 == 1)
  {
    outlined destroy of Any?(a1 + 392, &demangling cache variable for type metadata for TimeZone?);
LABEL_93:
    *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
    goto LABEL_95;
  }
  v68 = *(_QWORD *)(a2 + 400);
  *(_QWORD *)(a1 + 392) = v66;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 400) = v68;
LABEL_95:
  v69 = (_OWORD *)(a1 + 408);
  v70 = (_OWORD *)(a2 + 408);
  v71 = *(_QWORD *)(a1 + 416);
  v72 = *(_QWORD *)(a2 + 416);
  if (v71 != 1)
  {
    if (v72 == 1)
    {
      outlined destroy of Any?(a1 + 408, &demangling cache variable for type metadata for Locale.Variant?);
    }
    else
    {
      if (!v71)
      {
        if (!v72)
          goto LABEL_97;
LABEL_105:
        *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
        *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
        *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
        *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_106;
      }
      if (v72)
      {
        *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
        *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
        *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_106;
      }
      outlined destroy of Locale.Variant(a1 + 408);
    }
    v74 = *(_OWORD *)(a2 + 424);
    *v69 = *v70;
    *(_OWORD *)(a1 + 424) = v74;
    goto LABEL_106;
  }
  if (v72 > 1)
    goto LABEL_105;
LABEL_97:
  v73 = *(_OWORD *)(a2 + 424);
  *v69 = *v70;
  *(_OWORD *)(a1 + 424) = v73;
LABEL_106:
  *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
  *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of Locale.Language.Components(uint64_t a1)
{
  destroy for Locale.Language();
  return a1;
}

void *__swift_memcpy544_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x220uLL);
}

uint64_t assignWithTake for _LocaleICU.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 == 1)
    goto LABEL_4;
  v5 = *(_QWORD *)(a2 + 8);
  if (v5 == 1)
  {
    outlined destroy of Locale.Language.Components(a1);
LABEL_4:
    v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v6;
    v7 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v7;
    v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
    goto LABEL_5;
  }
  if (v4)
  {
    if (v5)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v5;
      swift_bridgeObjectRelease();
      v11 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = v11;
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
    outlined destroy of Locale.LanguageCode(a1);
  }
  v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v16;
LABEL_21:
  if (*(_QWORD *)(a1 + 40))
  {
    v17 = *(_QWORD *)(a2 + 40);
    if (v17)
    {
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = v17;
      swift_bridgeObjectRelease();
      v18 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = v18;
      swift_bridgeObjectRelease();
      goto LABEL_44;
    }
    outlined destroy of Locale.Script(a1 + 32);
  }
  v29 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v29;
LABEL_44:
  if (*(_QWORD *)(a1 + 72))
  {
    v30 = *(_QWORD *)(a2 + 72);
    if (v30)
    {
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = v30;
      swift_bridgeObjectRelease();
      v31 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = v31;
      swift_bridgeObjectRelease();
      goto LABEL_5;
    }
    outlined destroy of Locale.Region(a1 + 64);
  }
  v36 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v36;
LABEL_5:
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  if (*(_QWORD *)(a1 + 112))
  {
    v9 = *(_QWORD *)(a2 + 112);
    if (v9)
    {
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 112) = v9;
      swift_bridgeObjectRelease();
      v10 = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 128) = v10;
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    outlined destroy of Locale.Collation(a1 + 104);
  }
  v12 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = v12;
LABEL_13:
  v13 = *(_QWORD *)(a1 + 144);
  v14 = *(_QWORD *)(a2 + 144);
  if (v13 != 1)
  {
    if (v14 == 1)
    {
      outlined destroy of Any?(a1 + 136, &demangling cache variable for type metadata for Locale.Currency?);
    }
    else if (v13)
    {
      if (v14)
      {
        *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
        *(_QWORD *)(a1 + 144) = v14;
        swift_bridgeObjectRelease();
        v15 = *(_QWORD *)(a2 + 160);
        *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
        *(_QWORD *)(a1 + 160) = v15;
        swift_bridgeObjectRelease();
        goto LABEL_26;
      }
      outlined destroy of Locale.Currency(a1 + 136);
    }
  }
  v19 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = v19;
LABEL_26:
  if (*(_QWORD *)(a1 + 176))
  {
    v20 = *(_QWORD *)(a2 + 176);
    if (v20)
    {
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 176) = v20;
      swift_bridgeObjectRelease();
      v21 = *(_QWORD *)(a2 + 192);
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      *(_QWORD *)(a1 + 192) = v21;
      swift_bridgeObjectRelease();
      goto LABEL_31;
    }
    outlined destroy of Locale.NumberingSystem(a1 + 168);
  }
  v22 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = v22;
LABEL_31:
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_WORD *)(a1 + 264) = *(_WORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_WORD *)(a1 + 280) = *(_WORD *)(a2 + 280);
  if (*(_QWORD *)(a1 + 296))
  {
    v23 = *(_QWORD *)(a2 + 296);
    if (v23)
    {
      *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
      *(_QWORD *)(a1 + 296) = v23;
      swift_bridgeObjectRelease();
      v24 = *(_QWORD *)(a2 + 312);
      *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
      *(_QWORD *)(a1 + 312) = v24;
      swift_bridgeObjectRelease();
      goto LABEL_36;
    }
    outlined destroy of Locale.MeasurementSystem(a1 + 288);
  }
  v25 = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 304) = v25;
LABEL_36:
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  v26 = *(_QWORD *)(a1 + 336);
  v27 = *(_QWORD *)(a2 + 336);
  if (v26 != 1)
  {
    if (v27 == 1)
    {
      outlined destroy of Any?(a1 + 328, &demangling cache variable for type metadata for Locale.Region?);
    }
    else if (v26)
    {
      if (v27)
      {
        *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
        *(_QWORD *)(a1 + 336) = v27;
        swift_bridgeObjectRelease();
        v28 = *(_QWORD *)(a2 + 352);
        *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
        *(_QWORD *)(a1 + 352) = v28;
        swift_bridgeObjectRelease();
        goto LABEL_49;
      }
      outlined destroy of Locale.Region(a1 + 328);
    }
  }
  v32 = *(_OWORD *)(a2 + 344);
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 344) = v32;
LABEL_49:
  v33 = *(_QWORD *)(a1 + 368);
  v34 = *(_QWORD *)(a2 + 368);
  if (v33 != 1)
  {
    if (v34 == 1)
    {
      outlined destroy of Any?(a1 + 360, &demangling cache variable for type metadata for Locale.Subdivision?);
    }
    else if (v33)
    {
      if (v34)
      {
        *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
        *(_QWORD *)(a1 + 368) = v34;
        swift_bridgeObjectRelease();
        v35 = *(_QWORD *)(a2 + 384);
        *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
        *(_QWORD *)(a1 + 384) = v35;
        swift_bridgeObjectRelease();
        goto LABEL_59;
      }
      outlined destroy of Locale.Subdivision(a1 + 360);
    }
  }
  v37 = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 376) = v37;
LABEL_59:
  if (*(_QWORD *)(a1 + 392) == 1)
  {
LABEL_62:
    *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
    goto LABEL_64;
  }
  v38 = *(_QWORD *)(a2 + 392);
  if (v38 == 1)
  {
    outlined destroy of Any?(a1 + 392, &demangling cache variable for type metadata for TimeZone?);
    goto LABEL_62;
  }
  v39 = *(_QWORD *)(a2 + 400);
  *(_QWORD *)(a1 + 392) = v38;
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 400) = v39;
LABEL_64:
  v40 = *(_QWORD *)(a1 + 416);
  v41 = *(_QWORD *)(a2 + 416);
  if (v40 == 1)
  {
LABEL_71:
    v43 = *(_OWORD *)(a2 + 424);
    *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
    *(_OWORD *)(a1 + 424) = v43;
    goto LABEL_72;
  }
  if (v41 == 1)
  {
    outlined destroy of Any?(a1 + 408, &demangling cache variable for type metadata for Locale.Variant?);
    goto LABEL_71;
  }
  if (!v40)
    goto LABEL_71;
  if (!v41)
  {
    outlined destroy of Locale.Variant(a1 + 408);
    goto LABEL_71;
  }
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
  *(_QWORD *)(a1 + 416) = v41;
  swift_bridgeObjectRelease();
  v42 = *(_QWORD *)(a2 + 432);
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
  *(_QWORD *)(a1 + 432) = v42;
  swift_bridgeObjectRelease();
LABEL_72:
  v44 = *(_QWORD *)(a2 + 448);
  *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
  *(_QWORD *)(a1 + 448) = v44;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for _LocaleICU.State(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 544))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 456);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _LocaleICU.State(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 536) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 544) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 456) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 544) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _LocaleICU.State and conformance _LocaleICU.State()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _LocaleICU.State and conformance _LocaleICU.State;
  if (!lazy protocol witness table cache variable for type _LocaleICU.State and conformance _LocaleICU.State)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for _LocaleICU.State, &type metadata for _LocaleICU.State);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LocaleICU.State and conformance _LocaleICU.State);
  }
  return result;
}

uint64_t partial apply for closure #1 in _LocaleICU.variant.getter@<X0>(_QWORD *a1@<X0>, Swift::String *a2@<X8>)
{
  return closure #1 in _LocaleICU.variant.getter(a1, a2);
}

uint64_t partial apply for closure #1 in _LocaleICU.subdivision.getter@<X0>(_QWORD *a1@<X0>, Swift::String *a2@<X8>)
{
  return closure #1 in _LocaleICU.subdivision.getter(a1, a2);
}

void partial apply for closure #1 in _LocaleICU.timeZone.getter(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  closure #1 in _LocaleICU.timeZone.getter(a1, a2);
}

uint64_t outlined copy of TimeZone??(uint64_t result)
{
  if (result != 1)
    return swift_unknownObjectRetain();
  return result;
}

uint64_t outlined consume of TimeZone??(uint64_t result)
{
  if (result != 1)
    return swift_unknownObjectRelease();
  return result;
}

uint64_t partial apply for closure #1 in _LocaleICU.collation.getter@<X0>(_QWORD *a1@<X0>, Swift::String *a2@<X8>)
{
  return closure #1 in _LocaleICU.collation.getter(a1, a2);
}

uint64_t partial apply for closure #1 in _LocaleICU.minimumDaysInFirstWeek.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v3 = v2;
  return closure #1 in _LocaleICU.minimumDaysInFirstWeek.getter(*(__int128 *)&a1, a2);
}

uint64_t closure #1 in _LocaleICU.firstDayOfWeek.getterpartial apply@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in _LocaleICU.firstDayOfWeek.getter(a1, v2, a2);
}

void partial apply for closure #1 in _LocaleICU.availableNumberingSystems.getter(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  closure #1 in _LocaleICU.availableNumberingSystems.getter(a1, v2, a2);
}

uint64_t partial apply for closure #1 in _LocaleICU.numberingSystem.getter@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in _LocaleICU.numberingSystem.getter(a1, v2, a2);
}

uint64_t partial apply for closure #1 in _LocaleICU.currency.getter@<X0>(uint64_t a1@<X0>, Swift::String *a2@<X8>)
{
  return closure #1 in _LocaleICU.currency.getter(a1, a2);
}

uint64_t partial apply for closure #1 in _LocaleICU.currencySymbol.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in _LocaleICU.decimalSeparator.getter(v1, a1);
}

uint64_t partial apply for closure #1 in _LocaleICU.groupingSeparator.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in _LocaleICU.decimalSeparator.getter(v1, a1);
}

uint64_t partial apply for closure #1 in _LocaleICU.collationIdentifierDisplayName(for:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in _LocaleICU.collationIdentifierDisplayName(for:)(a1, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), a2);
}

uint64_t partial apply for closure #1 in _LocaleICU.currencySymbolDisplayName(for:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in _LocaleICU.currencySymbolDisplayName(for:)(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t partial apply for closure #1 in _LocaleICU.currencyCodeDisplayName(for:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in _LocaleICU.currencyCodeDisplayName(for:)(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t partial apply for closure #1 in _LocaleICU.variantCodeDisplayName(for:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in _LocaleICU.variantCodeDisplayName(for:)(a1, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), a2);
}

uint64_t partial apply for closure #1 in _LocaleICU.scriptCodeDisplayName(for:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in _LocaleICU.scriptCodeDisplayName(for:)(a1, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), a2);
}

uint64_t partial apply for closure #1 in _LocaleICU.languageCodeDisplayName(for:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in _LocaleICU.languageCodeDisplayName(for:)(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t partial apply for closure #1 in _LocaleICU.identifierDisplayName(for:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in _LocaleICU.identifierDisplayName(for:)(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

ValueMetadata *type metadata accessor for _LocaleICU.State.NumberFormattersBox()
{
  return &type metadata for _LocaleICU.State.NumberFormattersBox;
}

unint64_t lazy protocol witness table accessor for type _LocaleICU.State.NumberFormattersBox and conformance _LocaleICU.State.NumberFormattersBox()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _LocaleICU.State.NumberFormattersBox and conformance _LocaleICU.State.NumberFormattersBox;
  if (!lazy protocol witness table cache variable for type _LocaleICU.State.NumberFormattersBox and conformance _LocaleICU.State.NumberFormattersBox)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for _LocaleICU.State.NumberFormattersBox, &type metadata for _LocaleICU.State.NumberFormattersBox);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LocaleICU.State.NumberFormattersBox and conformance _LocaleICU.State.NumberFormattersBox);
  }
  return result;
}

uint64_t specialized String.withFileSystemRepresentation<A>(_:)(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  Swift::Int isStackAllocationSafe;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  char v14;
  char *v15;
  uint64_t result;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  _QWORD v21[2];

  v21[1] = *MEMORY[0x1E0C80C00];
  if ((a4 & 0x1000000000000000) != 0)
  {
    isStackAllocationSafe = String.UTF8View._foreignCount()();
  }
  else if ((a4 & 0x2000000000000000) != 0)
  {
    isStackAllocationSafe = HIBYTE(a4) & 0xF;
  }
  else
  {
    isStackAllocationSafe = a3 & 0xFFFFFFFFFFFFLL;
  }
  v9 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
LABEL_21:
    __break(1u);
  }
  if (v9 < -1)
    goto LABEL_21;
  v10 = v9 + 1;
  if (v9 < 1024 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v12 = (char *)v21 - v11;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v12, v10, 1, a3, a4);
    v14 = v13;
    swift_bridgeObjectRelease();
    if ((v14 & 1) != 0)
      v15 = 0;
    else
      v15 = v12;
    result = a1(v15);
    if (v4)
      return swift_willThrow();
  }
  else
  {
    v17 = swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, v17, v10, 1, a3, a4);
    v19 = v18;
    swift_bridgeObjectRelease();
    if ((v19 & 1) != 0)
      v20 = 0;
    else
      v20 = v17;
    a1((char *)v20);
    return MEMORY[0x186DA9E78](v17, -1, -1);
  }
  return result;
}

uint64_t specialized String.withFileSystemRepresentation<A>(_:)(void (*a1)(char *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  Swift::Int isStackAllocationSafe;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  char v14;
  char *v15;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  _QWORD v21[4];

  v21[3] = *MEMORY[0x1E0C80C00];
  if ((a4 & 0x1000000000000000) != 0)
  {
    isStackAllocationSafe = String.UTF8View._foreignCount()();
  }
  else if ((a4 & 0x2000000000000000) != 0)
  {
    isStackAllocationSafe = HIBYTE(a4) & 0xF;
  }
  else
  {
    isStackAllocationSafe = a3 & 0xFFFFFFFFFFFFLL;
  }
  v9 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
LABEL_23:
    __break(1u);
  }
  if (v9 < -1)
    goto LABEL_23;
  v10 = v9 + 1;
  if (v9 < 1024 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v12 = (char *)v21 - v11;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v12, v10, 1, a3, a4);
    v14 = v13;
    swift_bridgeObjectRelease();
    if ((v14 & 1) != 0)
      v15 = 0;
    else
      v15 = v12;
    a1(v15);
    if (v4)
      return swift_willThrow();
    else
      return v21[1];
  }
  else
  {
    v17 = swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, v17, v10, 1, a3, a4);
    v19 = v18;
    swift_bridgeObjectRelease();
    if ((v19 & 1) != 0)
      v20 = 0;
    else
      v20 = v17;
    a1((char *)v20);
    if (v4)
    {
      return MEMORY[0x186DA9E78](v17, -1, -1);
    }
    else
    {
      MEMORY[0x186DA9E78](v17, -1, -1);
      return v21[2];
    }
  }
}

{
  uint64_t v4;
  Swift::Int isStackAllocationSafe;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  char v14;
  char *v15;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  _QWORD v21[6];

  v21[5] = *MEMORY[0x1E0C80C00];
  if ((a4 & 0x1000000000000000) != 0)
  {
    isStackAllocationSafe = String.UTF8View._foreignCount()();
  }
  else if ((a4 & 0x2000000000000000) != 0)
  {
    isStackAllocationSafe = HIBYTE(a4) & 0xF;
  }
  else
  {
    isStackAllocationSafe = a3 & 0xFFFFFFFFFFFFLL;
  }
  v9 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
LABEL_23:
    __break(1u);
  }
  if (v9 < -1)
    goto LABEL_23;
  v10 = v9 + 1;
  if (v9 < 1024 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v12 = (char *)v21 - v11;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v12, v10, 1, a3, a4);
    v14 = v13;
    swift_bridgeObjectRelease();
    if ((v14 & 1) != 0)
      v15 = 0;
    else
      v15 = v12;
    a1(v15);
    if (v4)
      return swift_willThrow();
    else
      return v21[1];
  }
  else
  {
    v17 = swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, v17, v10, 1, a3, a4);
    v19 = v18;
    swift_bridgeObjectRelease();
    if ((v19 & 1) != 0)
      v20 = 0;
    else
      v20 = v17;
    a1((char *)v20);
    if (v4)
    {
      return MEMORY[0x186DA9E78](v17, -1, -1);
    }
    else
    {
      MEMORY[0x186DA9E78](v17, -1, -1);
      return v21[3];
    }
  }
}

uint64_t specialized String.withFileSystemRepresentation<A>(_:)(void (*a1)(_BYTE *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  Swift::Int isStackAllocationSafe;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  char v13;
  char v14;
  _BYTE *v15;
  char v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  _BYTE v22[8];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if ((a4 & 0x1000000000000000) != 0)
  {
    isStackAllocationSafe = String.UTF8View._foreignCount()();
  }
  else if ((a4 & 0x2000000000000000) != 0)
  {
    isStackAllocationSafe = HIBYTE(a4) & 0xF;
  }
  else
  {
    isStackAllocationSafe = a3 & 0xFFFFFFFFFFFFLL;
  }
  v9 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
LABEL_23:
    __break(1u);
  }
  if (v9 < -1)
    goto LABEL_23;
  v10 = v9 + 1;
  if (v9 < 1024 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v12 = &v22[-v11];
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v12, v10, 1, a3, a4);
    v14 = v13;
    swift_bridgeObjectRelease();
    if ((v14 & 1) != 0)
      v15 = 0;
    else
      v15 = v12;
    a1(v15);
    if (v4)
      swift_willThrow();
    else
      v16 = v22[6];
  }
  else
  {
    v17 = swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, v17, v10, 1, a3, a4);
    v19 = v18;
    swift_bridgeObjectRelease();
    if ((v19 & 1) != 0)
      v20 = 0;
    else
      v20 = v17;
    a1((_BYTE *)v20);
    MEMORY[0x186DA9E78](v17, -1, -1);
    if (!v4)
      v16 = v22[7];
  }
  return v16 & 1;
}

void specialized _BridgedStoredNSError.errorUserInfo.getter(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  uint64_t v4;
  id v5;
  _QWORD *v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  _OWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  _OWORD *v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  int64_t v47;
  uint64_t v48;
  __int128 v49;
  _OWORD v50[2];
  __int128 v51;
  __int128 v52;
  uint64_t v53;

  v1 = MEMORY[0x1E0DEE9E0];
  v53 = MEMORY[0x1E0DEE9E0];
  v2 = objc_msgSend(a1, sel_userInfo);
  if (!v2)
    goto LABEL_21;
  v3 = v2;
  swift_unknownObjectRetain();
  v4 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (!v4)
  {
    v5 = objc_msgSend(v3, sel_count);
    if (v5)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v1 = static _DictionaryStorage.allocate(capacity:)();
    }
    v6 = *(_QWORD **)(v1 + 48);
    v7 = *(_QWORD *)(v1 + 56);
    swift_retain();
    v8 = (int64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v6, v7, v3, (uint64_t)v5);
    if (v8 < 0 || (uint64_t)v5 < v8)
      goto LABEL_53;
    *(_QWORD *)(v1 + 16) = v8;
    if (!v8)
    {
LABEL_19:
      swift_release();
      goto LABEL_20;
    }
    v9 = v8 - 1;
    v10 = v1 + 64;
    while (1)
    {
      if (((*(_QWORD *)(v10 + (((unint64_t)v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
        goto LABEL_11;
      v15 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v9);
      v16 = *v15;
      v17 = v15[1];
      swift_bridgeObjectRetain();
      v18 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17);
      v20 = v19;
      swift_bridgeObjectRelease();
      if ((v20 & 1) != 0)
      {
        swift_arrayDestroy();
        swift_arrayDestroy();
        v21 = *(_QWORD *)(v1 + 16);
        v22 = __OFSUB__(v21, 1);
        v23 = v21 - 1;
        if (v22)
          goto LABEL_52;
        *(_QWORD *)(v1 + 16) = v23;
        goto LABEL_11;
      }
      *(_QWORD *)(v10 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      if (v9 < (uint64_t)v18)
      {
        *(_OWORD *)(*(_QWORD *)(v1 + 48) + 16 * v18) = *(_OWORD *)(*(_QWORD *)(v1 + 48) + 16 * v9);
        v11 = *(_QWORD *)(v1 + 56);
        v12 = (_OWORD *)(v11 + 32 * v9);
        v13 = v12[1];
        v14 = (_OWORD *)(v11 + 32 * v18);
        *v14 = *v12;
        v14[1] = v13;
LABEL_11:
        if (--v9 < 0)
          goto LABEL_19;
      }
      else
      {
        if (v18 == v9)
          goto LABEL_11;
        v24 = *(_QWORD *)(v1 + 48);
        v25 = (uint64_t *)(v24 + 16 * v18);
        v26 = (uint64_t *)(v24 + 16 * v9);
        v27 = *v25;
        v28 = v25[1];
        v29 = v26[1];
        *v25 = *v26;
        v25[1] = v29;
        *v26 = v27;
        v26[1] = v28;
        v30 = *(_QWORD *)(v1 + 56);
        v31 = (_OWORD *)(v30 + 32 * v18);
        v32 = (_OWORD *)(v30 + 32 * v9);
        outlined init with take of Any(v31, &v51);
        outlined init with take of Any(v32, v31);
        outlined init with take of Any(&v51, v32);
        if (v9 < 0)
          goto LABEL_19;
      }
    }
  }
  v1 = v4;
LABEL_20:

LABEL_21:
  v33 = 0;
  v34 = v1 + 64;
  v35 = 1 << *(_BYTE *)(v1 + 32);
  v36 = -1;
  if (v35 < 64)
    v36 = ~(-1 << v35);
  v37 = v36 & *(_QWORD *)(v1 + 64);
  v38 = (unint64_t)(v35 + 63) >> 6;
  if (!v37)
    goto LABEL_28;
LABEL_26:
  v40 = __clz(__rbit64(v37));
  v37 &= v37 - 1;
  v41 = v40 | (v33 << 6);
LABEL_27:
  v42 = *(_QWORD *)(v1 + 56);
  v43 = (_QWORD *)(*(_QWORD *)(v1 + 48) + 16 * v41);
  v44 = v43[1];
  *(_QWORD *)&v49 = *v43;
  *((_QWORD *)&v49 + 1) = v44;
  outlined init with copy of Any(v42 + 32 * v41, (uint64_t)v50);
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with take of (key: String, value: Any)?((uint64_t)&v49, (uint64_t)&v51);
    v48 = *((_QWORD *)&v51 + 1);
    if (!*((_QWORD *)&v51 + 1))
    {
      swift_release();
      return;
    }
    v39 = v51;
    outlined init with take of Any(&v52, &v49);
    specialized Dictionary.subscript.setter((uint64_t)&v49, v39, v48);
    if (v37)
      goto LABEL_26;
LABEL_28:
    v45 = v33 + 1;
    if (__OFADD__(v33, 1))
      break;
    if (v45 < v38)
    {
      v46 = *(_QWORD *)(v34 + 8 * v45);
      if (v46)
        goto LABEL_31;
      v47 = v33 + 2;
      ++v33;
      if (v45 + 1 < v38)
      {
        v46 = *(_QWORD *)(v34 + 8 * v47);
        if (v46)
          goto LABEL_34;
        v33 = v45 + 1;
        if (v45 + 2 < v38)
        {
          v46 = *(_QWORD *)(v34 + 8 * (v45 + 2));
          if (v46)
          {
            v45 += 2;
            goto LABEL_31;
          }
          v33 = v45 + 2;
          if (v45 + 3 < v38)
          {
            v46 = *(_QWORD *)(v34 + 8 * (v45 + 3));
            if (v46)
            {
              v45 += 3;
              goto LABEL_31;
            }
            v47 = v45 + 4;
            v33 = v45 + 3;
            if (v45 + 4 < v38)
            {
              v46 = *(_QWORD *)(v34 + 8 * v47);
              if (!v46)
              {
                while (1)
                {
                  v45 = v47 + 1;
                  if (__OFADD__(v47, 1))
                    goto LABEL_54;
                  if (v45 >= v38)
                  {
                    v33 = v38 - 1;
                    goto LABEL_48;
                  }
                  v46 = *(_QWORD *)(v34 + 8 * v45);
                  ++v47;
                  if (v46)
                    goto LABEL_31;
                }
              }
LABEL_34:
              v45 = v47;
LABEL_31:
              v37 = (v46 - 1) & v46;
              v41 = __clz(__rbit64(v46)) + (v45 << 6);
              v33 = v45;
              goto LABEL_27;
            }
          }
        }
      }
    }
LABEL_48:
    v37 = 0;
    memset(v50, 0, sizeof(v50));
    v49 = 0u;
  }
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
}

void cleanupTemporaryDirectory(at:)(uint64_t a1, uint64_t a2)
{
  id v2;
  unsigned int v3;
  id v4;
  id v5;
  id v6[2];

  v6[1] = *(id *)MEMORY[0x1E0C80C00];
  if (a2)
  {
    v2 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    v6[0] = 0;
    v3 = objc_msgSend(v2, sel_removeItemAtPath_error_, String._bridgeToObjectiveCImpl()(), v6);

    swift_unknownObjectRelease();
    if (v3)
    {
      v4 = v6[0];
    }
    else if (v6[0])
    {
      v5 = v6[0];
      swift_willThrow();

    }
    else
    {
      if (one-time initialization token for _nilObjCError != -1)
        swift_once();
      swift_willThrow();
    }
  }
}

uint64_t createTemporaryFile(at:inPath:prefix:options:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void *a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  Swift::String v19;
  id v20;
  uint64_t v21;
  void *v22;
  void *v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::Int isStackAllocationSafe;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char v35;
  uint64_t v36;
  char *v37;
  char v38;
  uint64_t v39;
  Swift::Int32 v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  id v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  Swift::String v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  id v60;
  id v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  id v68;
  id v69;
  id v70;
  const __CFString *v71;
  const __CFString *v72;
  const __CFString *v73;
  id v74;
  uint64_t v75;
  id v76;
  id v77;
  id v78;
  const __CFString *v79;
  const __CFString *v80;
  char v82;
  Swift::Int32 v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  id v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  Swift::String v95;
  uint64_t v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  uint64_t v102;
  id v103;
  id v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  Swift::Int32 v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  id v116;
  id v117;
  id v118;
  uint64_t v119;
  uint64_t v120;
  Swift::String v121;
  uint64_t v122;
  id v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  id v127;
  uint64_t v128;
  id v129;
  id v130;
  id v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  id v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  id v141;
  uint64_t v142;
  uint64_t v143;
  id v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  id v152;
  uint64_t v153;
  id v154;
  id v155;
  id v156;
  const __CFString *v157;
  const __CFString *v158;
  Swift::Int32 v159;
  id v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  id v166;
  id v167;
  id v168;
  uint64_t v169;
  uint64_t v170;
  Swift::String v171;
  uint64_t v172;
  id v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  id v177;
  uint64_t v178;
  id v179;
  id v180;
  id v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  id v189;
  uint64_t v190;
  id v191;
  id v192;
  id v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char v197;
  char *v198;
  id v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  id v204;
  uint64_t v205;
  uint64_t v206;
  id v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char v214;
  _QWORD *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  __int128 *v220;
  _OWORD *v221;
  _OWORD *v222;
  __int128 *v223;
  _OWORD *v224;
  uint64_t v225;
  uint64_t *v226;
  _OWORD *v227;
  unint64_t j;
  int64_t v229;
  unint64_t v230;
  int64_t v231;
  uint64_t v232;
  void **v233;
  void *v234;
  void *v235;
  __int128 v236;
  uint64_t v237;
  unint64_t v238;
  unint64_t v239;
  char v240;
  uint64_t *v241;
  uint64_t v242;
  BOOL v243;
  uint64_t v244;
  id v245;
  uint64_t v246;
  id v247;
  id v248;
  const __CFString *v249;
  const __CFString *v250;
  const __CFString *v251;
  char v253;
  _QWORD *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  __int128 *v259;
  _OWORD *v260;
  _OWORD *v261;
  __int128 *v262;
  _OWORD *v263;
  uint64_t v264;
  uint64_t *v265;
  _OWORD *v266;
  unint64_t i;
  int64_t v268;
  unint64_t v269;
  int64_t v270;
  uint64_t v271;
  void **v272;
  void *v273;
  void *v274;
  __int128 v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t v278;
  unint64_t v279;
  char v280;
  uint64_t *v281;
  uint64_t v282;
  uint64_t v283;
  id v284;
  uint64_t v285;
  id v286;
  id v287;
  id v288;
  const __CFString *v289;
  const __CFString *v290;
  const __CFString *v291;
  char v293;
  char v294;
  _QWORD *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  unint64_t v299;
  __int128 *v300;
  _OWORD *v301;
  _OWORD *v302;
  __int128 *v303;
  _OWORD *v304;
  uint64_t v305;
  uint64_t *v306;
  _OWORD *v307;
  unint64_t k;
  uint64_t v309;
  unint64_t v310;
  uint64_t v311;
  uint64_t v312;
  void **v313;
  void *v314;
  void *v315;
  __int128 v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t v319;
  unint64_t v320;
  char v321;
  uint64_t *v322;
  uint64_t v323;
  uint64_t v324;
  id v325;
  uint64_t v326;
  id v327;
  id v328;
  id v329;
  const __CFString *v330;
  const __CFString *v331;
  const __CFString *v332;
  char v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  id v339;
  uint64_t v340;
  id v341;
  id v342;
  id v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  char v347;
  uint64_t v348;
  _QWORD *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  unint64_t v353;
  __int128 *v354;
  _OWORD *v355;
  _OWORD *v356;
  __int128 *v357;
  _OWORD *v358;
  uint64_t v359;
  uint64_t *v360;
  _OWORD *v361;
  unint64_t m;
  int64_t v363;
  unint64_t v364;
  int64_t v365;
  uint64_t v366;
  void **v367;
  void *v368;
  void *v369;
  __int128 v370;
  uint64_t v371;
  unint64_t v372;
  unint64_t v373;
  char v374;
  uint64_t *v375;
  uint64_t v376;
  uint64_t v377;
  id v378;
  uint64_t v379;
  id v380;
  id v381;
  const __CFString *v382;
  const __CFString *v383;
  const __CFString *v384;
  char v386;
  uint64_t v387;
  uint64_t v388;
  _QWORD *v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  unint64_t v393;
  __int128 *v394;
  _OWORD *v395;
  _OWORD *v396;
  __int128 *v397;
  _OWORD *v398;
  uint64_t v399;
  uint64_t *v400;
  _OWORD *v401;
  unint64_t n;
  int64_t v403;
  unint64_t v404;
  int64_t v405;
  uint64_t v406;
  void **v407;
  void *v408;
  void *v409;
  __int128 v410;
  uint64_t v411;
  uint64_t v412;
  unint64_t v413;
  unint64_t v414;
  char v415;
  uint64_t *v416;
  uint64_t v417;
  uint64_t v418;
  id v419;
  uint64_t v420;
  id v421;
  id v422;
  id v423;
  const __CFString *v424;
  const __CFString *v425;
  const __CFString *v426;
  char v428;
  char v429;
  uint64_t v430;
  _QWORD *v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  unint64_t v435;
  __int128 *v436;
  _OWORD *v437;
  _OWORD *v438;
  __int128 *v439;
  _OWORD *v440;
  uint64_t v441;
  uint64_t *v442;
  _OWORD *v443;
  unint64_t ii;
  int64_t v445;
  unint64_t v446;
  int64_t v447;
  uint64_t v448;
  void **v449;
  void *v450;
  void *v451;
  __int128 v452;
  uint64_t v453;
  uint64_t v454;
  unint64_t v455;
  unint64_t v456;
  char v457;
  uint64_t *v458;
  uint64_t v459;
  uint64_t v460;
  id v461;
  uint64_t v462;
  id v463;
  id v464;
  id v465;
  const __CFString *v466;
  const __CFString *v467;
  const __CFString *v468;
  char v470;
  uint64_t result;
  Swift::String v472;
  uint64_t v473;
  uint64_t v474;
  void *v475;
  uint64_t v476;
  uint64_t v477;
  void *v478;
  uint64_t v479;
  char *v480;
  char *v481;
  char *v482;
  int64_t v483;
  int64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t *v487;
  unint64_t v488;
  void *v489;
  uint64_t v490;
  uint64_t v491;
  unint64_t v492;
  __int128 v493;
  __int128 v494;
  uint64_t v495;
  uint64_t v496;
  _OWORD v497[2];
  uint64_t countAndFlagsBits;
  _OWORD v499[2];
  _OWORD v500[2];
  __int128 v501;
  __int128 v502;
  uint64_t v503;
  uint64_t v504;

  v7 = v6;
  v11 = a2;
  v12 = a1;
  v504 = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(a3 + 8);
  v478 = *(void **)a3;
  v479 = v13;
  v477 = *(_QWORD *)(a3 + 16);
  LODWORD(v14) = *(unsigned __int8 *)(a3 + 24);
  v491 = a1;
  v492 = a2;
  if ((a2 & 0x2000000000000000) != 0)
    v15 = HIBYTE(a2) & 0xF;
  else
    v15 = a1 & 0xFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain();
  v486 = v7;
  if (v15)
  {
    v16 = specialized BidirectionalCollection.last.getter(v12, v11);
    if (!v17)
    {
      __break(1u);
      goto LABEL_398;
    }
    if (v16 == 47 && v17 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v18 & 1) == 0)
      {
        v19._countAndFlagsBits = 47;
        v19._object = (void *)0xE100000000000000;
        String.append(_:)(v19);
        v12 = v491;
        v11 = v492;
      }
    }
  }
  v20 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
  objc_msgSend(v20, sel_processIdentifier);

  lazy protocol witness table accessor for type Int32 and conformance Int32();
  v21 = String.init<A>(_:radix:uppercase:)();
  v23 = v22;
  *(_QWORD *)&v501 = v12;
  *((_QWORD *)&v501 + 1) = v11;
  swift_bridgeObjectRetain();
  v24._countAndFlagsBits = a4;
  v24._object = a5;
  String.append(_:)(v24);
  swift_bridgeObjectRetain();
  v25._countAndFlagsBits = v21;
  v25._object = v23;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v26._countAndFlagsBits = 0x5858585858582ELL;
  v26._object = (void *)0xE700000000000000;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27 = v12;
  v488 = *((_QWORD *)&v501 + 1);
  if ((*((_QWORD *)&v501 + 1) & 0x2000000000000000) != 0)
    v28 = HIBYTE(*((_QWORD *)&v501 + 1)) & 0xFLL;
  else
    v28 = v12 & 0xFFFFFFFFFFFFLL;
  v29 = 8;
  while (1)
  {
    while (1)
    {
      isStackAllocationSafe = v28;
      if ((v488 & 0x1000000000000000) != 0)
        isStackAllocationSafe = String.UTF8View._foreignCount()();
      v31 = 3 * isStackAllocationSafe;
      if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
      {
        __break(1u);
LABEL_364:
        __break(1u);
LABEL_365:
        __break(1u);
LABEL_366:
        __break(1u);
LABEL_367:
        __break(1u);
LABEL_368:
        __break(1u);
LABEL_369:
        __break(1u);
LABEL_370:
        __break(1u);
        goto LABEL_371;
      }
      if (v31 < -1)
        goto LABEL_364;
      v32 = v31 + 1;
      if (v31 >= 1024)
      {
        isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
        if ((isStackAllocationSafe & 1) == 0)
          break;
      }
      v487 = &v473;
      MEMORY[0x1E0C80A78](isStackAllocationSafe);
      v34 = (char *)&v473 - v33;
      String._decomposed(_:into:nullTerminated:)(1, (uint64_t)&v473 - v33, v32, 1, v27, v488);
      if ((v35 & 1) != 0)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
        v74 = objc_allocWithZone((Class)NSError);
        v75 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v76 = objc_msgSend(v74, sel_initWithDomain_code_userInfo_, v75, 514, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v77 = objc_msgSend(v76, sel_domain);
        v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
        v72 = v79;

        if (v78 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v72 == v80)
          goto LABEL_177;
        v82 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v82 & 1) != 0)
          goto LABEL_221;
        __break(1u);
LABEL_47:
        v83 = MEMORY[0x186DA4118]();
        if ((v14 & 1) == 0)
        {
          *(_QWORD *)&v493 = MEMORY[0x1E0DEE9E0];
          v136 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
          v138 = v137;
          v140 = (uint64_t)v478;
          v139 = v479;
          countAndFlagsBits = (uint64_t)v478;
          *(_QWORD *)&v499[0] = v479;
          swift_bridgeObjectRetain();
          AnyHashable.init<A>(_:)();
          specialized Dictionary.subscript.setter((uint64_t)&v501, (uint64_t)v136, v138);
          v141 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
          v143 = v142;
          URL.init(_fileManagerFailableFileURLWithPath:)(v140, v139, (uint64_t)&countAndFlagsBits);
          if (countAndFlagsBits)
          {
            v496 = countAndFlagsBits;
            v497[0] = v499[0];
            lazy protocol witness table accessor for type URL and conformance URL();
            AnyHashable.init<A>(_:)();
          }
          else
          {
            v501 = 0u;
            v502 = 0u;
            v503 = 0;
          }
          specialized Dictionary.subscript.setter((uint64_t)&v501, (uint64_t)v141, v143);
          v185 = v493;
          v490 = v493;
          swift_bridgeObjectRetain();
          v479 = v185;
          if (v83 == 102)
          {
LABEL_136:
            CocoaError.Code.init(fileErrno:reading:)(v83, 0);
            v478 = v489;
            if (*(_QWORD *)(v185 + 16))
            {
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
              v254 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
            }
            else
            {
              v254 = (_QWORD *)MEMORY[0x1E0DEE9E0];
            }
            v255 = *(_QWORD *)(v185 + 64);
            v482 = (char *)(v185 + 64);
            v256 = -1;
            v257 = -1 << *(_BYTE *)(v185 + 32);
            v477 = ~v257;
            if (-v257 < 64)
              v256 = ~(-1 << -(char)v257);
            v258 = v256 & v255;
            v483 = (unint64_t)(63 - v257) >> 6;
            v259 = &v502;
            v260 = (_OWORD *)((char *)v497 + 8);
            v261 = (_OWORD *)((char *)v499 + 8);
            v480 = (char *)(v254 + 8);
            swift_bridgeObjectRetain();
            v485 = 0;
            v484 = MEMORY[0x1E0DEE9B8] + 8;
            v481 = (char *)v499 + 8;
            if (v258)
              goto LABEL_144;
LABEL_145:
            v268 = v485 + 1;
            if (!__OFADD__(v485, 1))
            {
              if (v268 < v483)
              {
                v269 = *(_QWORD *)&v482[8 * v268];
                v270 = v485 + 1;
                if (v269)
                  goto LABEL_164;
                v270 = v485 + 2;
                if (v485 + 2 < v483)
                {
                  v269 = *(_QWORD *)&v482[8 * v270];
                  if (v269)
                    goto LABEL_164;
                  v270 = v485 + 3;
                  if (v485 + 3 < v483)
                  {
                    v269 = *(_QWORD *)&v482[8 * v270];
                    if (v269)
                      goto LABEL_164;
                    v270 = v485 + 4;
                    if (v485 + 4 < v483)
                    {
                      v269 = *(_QWORD *)&v482[8 * v270];
                      if (v269)
                        goto LABEL_164;
                      v270 = v485 + 5;
                      if (v485 + 5 < v483)
                      {
                        v269 = *(_QWORD *)&v482[8 * v270];
                        if (v269)
                          goto LABEL_164;
                        v270 = v485 + 6;
                        if (v485 + 6 < v483)
                        {
                          v269 = *(_QWORD *)&v482[8 * v270];
                          if (v269)
                            goto LABEL_164;
                          v271 = v485 + 7;
                          if (v485 + 7 < v483)
                          {
                            v269 = *(_QWORD *)&v482[8 * v271];
                            if (!v269)
                            {
                              while (1)
                              {
                                v270 = v271 + 1;
                                if (__OFADD__(v271, 1))
                                  goto LABEL_386;
                                if (v270 >= v483)
                                  goto LABEL_170;
                                v269 = *(_QWORD *)&v482[8 * v270];
                                ++v271;
                                if (v269)
                                  goto LABEL_164;
                              }
                            }
                            v270 = v485 + 7;
LABEL_164:
                            v485 = v270;
                            v486 = (v269 - 1) & v269;
                            for (i = __clz(__rbit64(v269)) + (v270 << 6); ; i = __clz(__rbit64(v258)) | (v485 << 6))
                            {
                              v272 = (void **)(*(_QWORD *)(v185 + 48) + 16 * i);
                              v274 = *v272;
                              v273 = v272[1];
                              outlined init with copy of AnyHashable(*(_QWORD *)(v185 + 56) + 40 * i, (uint64_t)v259);
                              *(_QWORD *)&v501 = v274;
                              *((_QWORD *)&v501 + 1) = v273;
                              v275 = v259[1];
                              v493 = *v259;
                              v494 = v275;
                              v495 = *((_QWORD *)v259 + 4);
                              v496 = (uint64_t)v274;
                              *(_QWORD *)&v497[0] = v273;
                              swift_bridgeObjectRetain();
                              swift_dynamicCast();
                              v277 = v496;
                              v276 = *(_QWORD *)&v497[0];
                              outlined init with take of Any(v260, v261);
                              outlined init with take of Any(v261, v500);
                              outlined init with take of Any(v500, &countAndFlagsBits);
                              v278 = specialized __RawDictionaryStorage.find<A>(_:)(v277, v276);
                              v279 = v278;
                              if ((v280 & 1) != 0)
                              {
                                v262 = v259;
                                v263 = v260;
                                v264 = v185;
                                v265 = (uint64_t *)(v254[6] + 16 * v278);
                                swift_bridgeObjectRelease();
                                *v265 = v277;
                                v265[1] = v276;
                                v185 = v264;
                                v260 = v263;
                                v259 = v262;
                                v261 = v481;
                                v266 = (_OWORD *)(v254[7] + 32 * v279);
                                __swift_destroy_boxed_opaque_existential_1((uint64_t)v266);
                                outlined init with take of Any(&countAndFlagsBits, v266);
                                v258 = v486;
                                if (!v486)
                                  goto LABEL_145;
                              }
                              else
                              {
                                if (v254[2] >= v254[3])
                                  goto LABEL_366;
                                *(_QWORD *)&v480[(v278 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v278;
                                v281 = (uint64_t *)(v254[6] + 16 * v278);
                                *v281 = v277;
                                v281[1] = v276;
                                outlined init with take of Any(&countAndFlagsBits, (_OWORD *)(v254[7] + 32 * v278));
                                v282 = v254[2];
                                v243 = __OFADD__(v282, 1);
                                v283 = v282 + 1;
                                if (v243)
                                  goto LABEL_368;
                                v254[2] = v283;
                                v258 = v486;
                                if (!v486)
                                  goto LABEL_145;
                              }
LABEL_144:
                              v486 = (v258 - 1) & v258;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
LABEL_170:
              outlined consume of Set<A1>.Iterator._Variant<A><A1>();
              swift_bridgeObjectRelease();
              v72 = CFSTR("NSCocoaErrorDomain");
              static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
              v284 = objc_allocWithZone((Class)NSError);
              v285 = String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              v286 = objc_msgSend(v284, sel_initWithDomain_code_userInfo_, v285, v478, _NativeDictionary.bridged()());
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              v287 = objc_msgSend(v286, sel_domain);
              v288 = static String._unconditionallyBridgeFromObjectiveC(_:)(v287);
              v290 = v289;

              if (v288 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"))
                || v290 != v291)
              {
                v72 = v291;
                v293 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if ((v293 & 1) != 0)
                  goto LABEL_221;
                __break(1u);
              }
              swift_bridgeObjectRelease();
LABEL_177:
              swift_bridgeObjectRelease_n();
              goto LABEL_221;
            }
LABEL_372:
            __break(1u);
LABEL_373:
            __break(1u);
LABEL_374:
            __break(1u);
LABEL_375:
            __break(1u);
LABEL_376:
            __break(1u);
LABEL_377:
            __break(1u);
LABEL_378:
            __break(1u);
LABEL_379:
            __break(1u);
LABEL_380:
            __break(1u);
LABEL_381:
            __break(1u);
            goto LABEL_382;
          }
          LODWORD(v14) = v83;
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
            goto LABEL_398;
          v72 = (const __CFString *)static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
          v187 = v186;
          static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
          v188 = (int)POSIXErrorCode.rawValue.getter();
          v189 = objc_allocWithZone((Class)NSError);
          v190 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v191 = objc_msgSend(v189, sel_initWithDomain_code_userInfo_, v190, v188, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v192 = objc_msgSend(v191, sel_domain);
          v193 = static String._unconditionallyBridgeFromObjectiveC(_:)(v192);
          v195 = v194;

          if (v193 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"))
            && v195 == v196)
          {
            swift_bridgeObjectRelease_n();
LABEL_135:
            countAndFlagsBits = (uint64_t)v191;
            lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
            AnyHashable.init<A>(_:)();
            specialized Dictionary.subscript.setter((uint64_t)&v501, (uint64_t)v72, v187);
            v185 = v490;
            v83 = v14;
            goto LABEL_136;
          }
LABEL_134:
          v253 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v253 & 1) == 0)
            goto LABEL_388;
          goto LABEL_135;
        }
        v496 = MEMORY[0x1E0DEE9E0];
        v84 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
        v86 = v85;
        v87 = v478;
        v88 = v479;
        countAndFlagsBits = (uint64_t)v478;
        *(_QWORD *)&v499[0] = v479;
        v89 = v477;
        *((_QWORD *)&v499[0] + 1) = v477;
        lazy protocol witness table accessor for type URL and conformance URL();
        v90 = v87;
        swift_retain_n();
        swift_retain_n();
        v91 = v90;
        AnyHashable.init<A>(_:)();
        specialized Dictionary.subscript.setter((uint64_t)&v501, (uint64_t)v84, v86);
        v92 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
        v94 = v93;
        *(_QWORD *)&v501 = v91;
        *((_QWORD *)&v501 + 1) = v88;
        *(_QWORD *)&v502 = v89;
        v95 = URL.path(percentEncoded:)(0);
        countAndFlagsBits = v95._countAndFlagsBits;
        *(_QWORD *)&v499[0] = v95._object;
        AnyHashable.init<A>(_:)();
        specialized Dictionary.subscript.setter((uint64_t)&v501, (uint64_t)v92, v94);
        v96 = v496;
        v490 = v496;
        swift_bridgeObjectRetain();
        v476 = v96;
        if (v83 != 102)
        {
          LODWORD(v14) = v83;
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
            goto LABEL_398;
          v97 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
          v99 = v98;
          static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
          v100 = (int)POSIXErrorCode.rawValue.getter();
          v101 = objc_allocWithZone((Class)NSError);
          v102 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v103 = objc_msgSend(v101, sel_initWithDomain_code_userInfo_, v102, v100, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v104 = objc_msgSend(v103, sel_domain);
          v105 = static String._unconditionallyBridgeFromObjectiveC(_:)(v104);
          v107 = v106;

          if (v105 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"))
            && v107 == v108)
          {
            swift_bridgeObjectRelease_n();
          }
          else
          {
            v214 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v214 & 1) == 0)
              goto LABEL_387;
          }
          countAndFlagsBits = (uint64_t)v103;
          lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
          AnyHashable.init<A>(_:)();
          specialized Dictionary.subscript.setter((uint64_t)&v501, (uint64_t)v97, v99);
          v96 = v490;
          v83 = v14;
        }
        CocoaError.Code.init(fileErrno:reading:)(v83, 0);
        v475 = v489;
        if (*(_QWORD *)(v96 + 16))
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
          v215 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
        }
        else
        {
          v215 = (_QWORD *)MEMORY[0x1E0DEE9E0];
        }
        v216 = *(_QWORD *)(v96 + 64);
        v482 = (char *)(v96 + 64);
        v217 = -1;
        v218 = -1 << *(_BYTE *)(v96 + 32);
        v474 = ~v218;
        if (-v218 < 64)
          v217 = ~(-1 << -(char)v218);
        v219 = v217 & v216;
        v483 = (unint64_t)(63 - v218) >> 6;
        v220 = &v502;
        v221 = (_OWORD *)((char *)v497 + 8);
        v222 = (_OWORD *)((char *)v499 + 8);
        v480 = (char *)(v215 + 8);
        swift_bridgeObjectRetain();
        v485 = 0;
        v484 = MEMORY[0x1E0DEE9B8] + 8;
        v481 = (char *)v499 + 8;
        if (v219)
          goto LABEL_102;
LABEL_103:
        v229 = v485 + 1;
        if (!__OFADD__(v485, 1))
        {
          if (v229 < v483)
          {
            v230 = *(_QWORD *)&v482[8 * v229];
            v231 = v485 + 1;
            if (v230)
              goto LABEL_122;
            v231 = v485 + 2;
            if (v485 + 2 < v483)
            {
              v230 = *(_QWORD *)&v482[8 * v231];
              if (v230)
                goto LABEL_122;
              v231 = v485 + 3;
              if (v485 + 3 < v483)
              {
                v230 = *(_QWORD *)&v482[8 * v231];
                if (v230)
                  goto LABEL_122;
                v231 = v485 + 4;
                if (v485 + 4 < v483)
                {
                  v230 = *(_QWORD *)&v482[8 * v231];
                  if (v230)
                    goto LABEL_122;
                  v231 = v485 + 5;
                  if (v485 + 5 < v483)
                  {
                    v230 = *(_QWORD *)&v482[8 * v231];
                    if (v230)
                      goto LABEL_122;
                    v231 = v485 + 6;
                    if (v485 + 6 < v483)
                    {
                      v230 = *(_QWORD *)&v482[8 * v231];
                      if (v230)
                        goto LABEL_122;
                      v232 = v485 + 7;
                      if (v485 + 7 < v483)
                      {
                        v230 = *(_QWORD *)&v482[8 * v232];
                        if (!v230)
                        {
                          while (1)
                          {
                            v231 = v232 + 1;
                            if (__OFADD__(v232, 1))
                              goto LABEL_385;
                            if (v231 >= v483)
                              goto LABEL_128;
                            v230 = *(_QWORD *)&v482[8 * v231];
                            ++v232;
                            if (v230)
                              goto LABEL_122;
                          }
                        }
                        v231 = v485 + 7;
LABEL_122:
                        v485 = v231;
                        v486 = (v230 - 1) & v230;
                        for (j = __clz(__rbit64(v230)) + (v231 << 6); ; j = __clz(__rbit64(v219)) | (v485 << 6))
                        {
                          v233 = (void **)(*(_QWORD *)(v96 + 48) + 16 * j);
                          v235 = *v233;
                          v234 = v233[1];
                          outlined init with copy of AnyHashable(*(_QWORD *)(v96 + 56) + 40 * j, (uint64_t)v220);
                          *(_QWORD *)&v501 = v235;
                          *((_QWORD *)&v501 + 1) = v234;
                          v236 = v220[1];
                          v493 = *v220;
                          v494 = v236;
                          v495 = *((_QWORD *)v220 + 4);
                          v496 = (uint64_t)v235;
                          *(_QWORD *)&v497[0] = v234;
                          swift_bridgeObjectRetain();
                          swift_dynamicCast();
                          v14 = v496;
                          v237 = *(_QWORD *)&v497[0];
                          outlined init with take of Any(v221, v222);
                          outlined init with take of Any(v222, v500);
                          outlined init with take of Any(v500, &countAndFlagsBits);
                          v238 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v237);
                          v239 = v238;
                          if ((v240 & 1) != 0)
                          {
                            v223 = v220;
                            v224 = v221;
                            v225 = v96;
                            v226 = (uint64_t *)(v215[6] + 16 * v238);
                            swift_bridgeObjectRelease();
                            *v226 = v14;
                            v226[1] = v237;
                            v96 = v225;
                            v221 = v224;
                            v220 = v223;
                            v222 = v481;
                            v227 = (_OWORD *)(v215[7] + 32 * v239);
                            __swift_destroy_boxed_opaque_existential_1((uint64_t)v227);
                            outlined init with take of Any(&countAndFlagsBits, v227);
                            v219 = v486;
                            if (!v486)
                              goto LABEL_103;
                          }
                          else
                          {
                            if (v215[2] >= v215[3])
                              goto LABEL_365;
                            *(_QWORD *)&v480[(v238 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v238;
                            v241 = (uint64_t *)(v215[6] + 16 * v238);
                            *v241 = v14;
                            v241[1] = v237;
                            outlined init with take of Any(&countAndFlagsBits, (_OWORD *)(v215[7] + 32 * v238));
                            v242 = v215[2];
                            v243 = __OFADD__(v242, 1);
                            v244 = v242 + 1;
                            if (v243)
                              goto LABEL_367;
                            v215[2] = v244;
                            v219 = v486;
                            if (!v486)
                              goto LABEL_103;
                          }
LABEL_102:
                          v486 = (v219 - 1) & v219;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_128:
          outlined consume of Set<A1>.Iterator._Variant<A><A1>();
          swift_bridgeObjectRelease();
          v72 = CFSTR("NSCocoaErrorDomain");
          static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
          v245 = objc_allocWithZone((Class)NSError);
          v246 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v247 = objc_msgSend(v245, sel_initWithDomain_code_userInfo_, v246, v475, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v191 = objc_msgSend(v247, sel_domain);
          v248 = static String._unconditionallyBridgeFromObjectiveC(_:)(v191);
          v250 = v249;

          if (v248 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"))
            && v250 == v251)
          {
            goto LABEL_220;
          }
          v72 = v251;
          v187 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of PathOrURL(v478, v479, v477, 1);
          if ((v187 & 1) != 0)
            goto LABEL_221;
          __break(1u);
          goto LABEL_134;
        }
LABEL_371:
        __break(1u);
        goto LABEL_372;
      }
      if (!mktemp(v34))
        goto LABEL_47;
      v36 = _NSOpenFileDescriptor_Protected(v34, 2562, a6, 438);
      if ((v36 & 0x80000000) == 0)
      {
        v72 = (const __CFString *)v36;
        String.init(cString:)();
        goto LABEL_77;
      }
      if (MEMORY[0x186DA4118]() != 17)
      {
        v109 = MEMORY[0x186DA4118]();
        if ((v14 & 1) == 0)
        {
          *(_QWORD *)&v493 = MEMORY[0x1E0DEE9E0];
          v144 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
          v146 = v145;
          v148 = (uint64_t)v478;
          v147 = v479;
          countAndFlagsBits = (uint64_t)v478;
          *(_QWORD *)&v499[0] = v479;
          swift_bridgeObjectRetain();
          AnyHashable.init<A>(_:)();
          specialized Dictionary.subscript.setter((uint64_t)&v501, (uint64_t)v144, v146);
          v72 = (const __CFString *)static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
          v150 = v149;
          URL.init(_fileManagerFailableFileURLWithPath:)(v148, v147, (uint64_t)&countAndFlagsBits);
          if (countAndFlagsBits)
          {
            v496 = countAndFlagsBits;
            v497[0] = v499[0];
            lazy protocol witness table accessor for type URL and conformance URL();
            AnyHashable.init<A>(_:)();
          }
          else
          {
            v501 = 0u;
            v502 = 0u;
            v503 = 0;
          }
          specialized Dictionary.subscript.setter((uint64_t)&v501, (uint64_t)v72, v150);
          static CocoaError._errorWithErrno(_:reading:variant:userInfo:)(v109, 0, 0, 0, v493, &v501);
          swift_bridgeObjectRelease();
          goto LABEL_221;
        }
        v496 = MEMORY[0x1E0DEE9E0];
        v110 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
        v112 = v111;
        v113 = v478;
        v114 = v479;
        countAndFlagsBits = (uint64_t)v478;
        *(_QWORD *)&v499[0] = v479;
        v115 = v477;
        *((_QWORD *)&v499[0] + 1) = v477;
        lazy protocol witness table accessor for type URL and conformance URL();
        v116 = v113;
        swift_retain_n();
        swift_retain_n();
        v117 = v116;
        AnyHashable.init<A>(_:)();
        specialized Dictionary.subscript.setter((uint64_t)&v501, (uint64_t)v110, v112);
        v118 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
        v120 = v119;
        *(_QWORD *)&v501 = v117;
        *((_QWORD *)&v501 + 1) = v114;
        *(_QWORD *)&v502 = v115;
        v121 = URL.path(percentEncoded:)(0);
        countAndFlagsBits = v121._countAndFlagsBits;
        *(_QWORD *)&v499[0] = v121._object;
        AnyHashable.init<A>(_:)();
        specialized Dictionary.subscript.setter((uint64_t)&v501, (uint64_t)v118, v120);
        v122 = v496;
        v490 = v496;
        swift_bridgeObjectRetain();
        v476 = v122;
        if (v109 == 102)
          goto LABEL_180;
        LODWORD(v14) = v109;
        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
          goto LABEL_398;
        v123 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
        v125 = v124;
        static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
        v126 = (int)POSIXErrorCode.rawValue.getter();
        v127 = objc_allocWithZone((Class)NSError);
        v128 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v129 = objc_msgSend(v127, sel_initWithDomain_code_userInfo_, v128, v126, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v130 = objc_msgSend(v129, sel_domain);
        v131 = static String._unconditionallyBridgeFromObjectiveC(_:)(v130);
        v133 = v132;

        if (v131 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain")) && v133 == v134)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_179;
        }
        v294 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v294 & 1) == 0)
          goto LABEL_390;
LABEL_179:
        countAndFlagsBits = (uint64_t)v129;
        lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
        AnyHashable.init<A>(_:)();
        specialized Dictionary.subscript.setter((uint64_t)&v501, (uint64_t)v123, v125);
        v122 = v490;
        v109 = v14;
LABEL_180:
        CocoaError.Code.init(fileErrno:reading:)(v109, 0);
        v475 = v489;
        if (*(_QWORD *)(v122 + 16))
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
          v295 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
        }
        else
        {
          v295 = (_QWORD *)MEMORY[0x1E0DEE9E0];
        }
        v296 = *(_QWORD *)(v122 + 64);
        v483 = v122 + 64;
        v297 = -1;
        v298 = -1 << *(_BYTE *)(v122 + 32);
        v474 = ~v298;
        if (-v298 < 64)
          v297 = ~(-1 << -(char)v298);
        v299 = v297 & v296;
        v482 = (char *)((unint64_t)(63 - v298) >> 6);
        v300 = &v502;
        v301 = (_OWORD *)((char *)v497 + 8);
        v302 = (_OWORD *)((char *)v499 + 8);
        v480 = (char *)(v295 + 8);
        swift_bridgeObjectRetain();
        v485 = 0;
        v484 = MEMORY[0x1E0DEE9B8] + 8;
        v481 = (char *)v499 + 8;
        if (v299)
          goto LABEL_188;
LABEL_189:
        v309 = v485 + 1;
        if (!__OFADD__(v485, 1))
        {
          if (v309 >= (uint64_t)v482)
            goto LABEL_214;
          v310 = *(_QWORD *)(v483 + 8 * v309);
          v311 = v485 + 1;
          if (v310)
            goto LABEL_208;
          v311 = v485 + 2;
          if (v485 + 2 >= (uint64_t)v482)
            goto LABEL_214;
          v310 = *(_QWORD *)(v483 + 8 * v311);
          if (v310)
            goto LABEL_208;
          v311 = v485 + 3;
          if (v485 + 3 >= (uint64_t)v482)
            goto LABEL_214;
          v310 = *(_QWORD *)(v483 + 8 * v311);
          if (v310)
            goto LABEL_208;
          v311 = v485 + 4;
          if (v485 + 4 >= (uint64_t)v482)
            goto LABEL_214;
          v310 = *(_QWORD *)(v483 + 8 * v311);
          if (v310)
            goto LABEL_208;
          v311 = v485 + 5;
          if (v485 + 5 >= (uint64_t)v482)
            goto LABEL_214;
          v310 = *(_QWORD *)(v483 + 8 * v311);
          if (v310)
            goto LABEL_208;
          v311 = v485 + 6;
          if (v485 + 6 >= (uint64_t)v482)
            goto LABEL_214;
          v310 = *(_QWORD *)(v483 + 8 * v311);
          if (v310)
          {
LABEL_208:
            v485 = v311;
            v486 = (v310 - 1) & v310;
            for (k = __clz(__rbit64(v310)) + (v311 << 6); ; k = __clz(__rbit64(v299)) | (v485 << 6))
            {
              v313 = (void **)(*(_QWORD *)(v122 + 48) + 16 * k);
              v315 = *v313;
              v314 = v313[1];
              outlined init with copy of AnyHashable(*(_QWORD *)(v122 + 56) + 40 * k, (uint64_t)v300);
              *(_QWORD *)&v501 = v315;
              *((_QWORD *)&v501 + 1) = v314;
              v316 = v300[1];
              v493 = *v300;
              v494 = v316;
              v495 = *((_QWORD *)v300 + 4);
              v496 = (uint64_t)v315;
              *(_QWORD *)&v497[0] = v314;
              swift_bridgeObjectRetain();
              swift_dynamicCast();
              v318 = v496;
              v317 = *(_QWORD *)&v497[0];
              outlined init with take of Any(v301, v302);
              outlined init with take of Any(v302, v500);
              outlined init with take of Any(v500, &countAndFlagsBits);
              v319 = specialized __RawDictionaryStorage.find<A>(_:)(v318, v317);
              v320 = v319;
              if ((v321 & 1) != 0)
              {
                v303 = v300;
                v304 = v301;
                v305 = v122;
                v306 = (uint64_t *)(v295[6] + 16 * v319);
                swift_bridgeObjectRelease();
                *v306 = v318;
                v306[1] = v317;
                v122 = v305;
                v301 = v304;
                v300 = v303;
                v302 = v481;
                v307 = (_OWORD *)(v295[7] + 32 * v320);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v307);
                outlined init with take of Any(&countAndFlagsBits, v307);
                v299 = v486;
                if (!v486)
                  goto LABEL_189;
              }
              else
              {
                if (v295[2] >= v295[3])
                  goto LABEL_369;
                *(_QWORD *)&v480[(v319 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v319;
                v322 = (uint64_t *)(v295[6] + 16 * v319);
                *v322 = v318;
                v322[1] = v317;
                outlined init with take of Any(&countAndFlagsBits, (_OWORD *)(v295[7] + 32 * v319));
                v323 = v295[2];
                v243 = __OFADD__(v323, 1);
                v324 = v323 + 1;
                if (v243)
                  goto LABEL_370;
                v295[2] = v324;
                v299 = v486;
                if (!v486)
                  goto LABEL_189;
              }
LABEL_188:
              v486 = (v299 - 1) & v299;
            }
          }
          v312 = v485 + 7;
          if (v485 + 7 < (uint64_t)v482)
          {
            v310 = *(_QWORD *)(v483 + 8 * v312);
            if (v310)
            {
              v311 = v485 + 7;
              goto LABEL_208;
            }
            while (1)
            {
              v311 = v312 + 1;
              if (__OFADD__(v312, 1))
                break;
              if (v311 >= (uint64_t)v482)
                goto LABEL_214;
              v310 = *(_QWORD *)(v483 + 8 * v311);
              ++v312;
              if (v310)
                goto LABEL_208;
            }
LABEL_389:
            __break(1u);
LABEL_390:
            __break(1u);
LABEL_391:
            __break(1u);
LABEL_392:
            __break(1u);
LABEL_393:
            __break(1u);
LABEL_394:
            __break(1u);
LABEL_395:
            __break(1u);
LABEL_396:
            __break(1u);
          }
LABEL_214:
          outlined consume of Set<A1>.Iterator._Variant<A><A1>();
          swift_bridgeObjectRelease();
          v72 = CFSTR("NSCocoaErrorDomain");
          static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
          v325 = objc_allocWithZone((Class)NSError);
          v326 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v327 = objc_msgSend(v325, sel_initWithDomain_code_userInfo_, v326, v475, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v328 = objc_msgSend(v327, sel_domain);
          v329 = static String._unconditionallyBridgeFromObjectiveC(_:)(v328);
          v331 = v330;

          if (v329 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"))
            || v331 != v332)
          {
            v72 = v332;
            v334 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            outlined consume of PathOrURL(v478, v479, v477, 1);
            if ((v334 & 1) == 0)
            {
              __break(1u);
              goto LABEL_220;
            }
LABEL_221:
            swift_willThrow();
            swift_willThrow();
LABEL_360:
            swift_bridgeObjectRelease();
LABEL_361:
            swift_bridgeObjectRelease();
            return (uint64_t)v72;
          }
LABEL_220:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          outlined consume of PathOrURL(v478, v479, v477, 1);
          goto LABEL_221;
        }
        goto LABEL_373;
      }
      if (!--v29)
      {
LABEL_38:
        swift_bridgeObjectRelease();
        static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
        v66 = objc_allocWithZone((Class)NSError);
        v67 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v68 = objc_msgSend(v66, sel_initWithDomain_code_userInfo_, v67, 512, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v69 = objc_msgSend(v68, sel_domain);
        v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
        v72 = v71;

        if (v70 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v72 == v73)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          v135 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v135 & 1) == 0)
            goto LABEL_383;
        }
        swift_willThrow();
        goto LABEL_361;
      }
    }
    v37 = (char *)swift_slowAlloc();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v37, v32, 1, v27, v488);
    if ((v38 & 1) != 0)
    {
      v151 = v37;
      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
      v152 = objc_allocWithZone((Class)NSError);
      v153 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v154 = objc_msgSend(v152, sel_initWithDomain_code_userInfo_, v153, 514, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v155 = objc_msgSend(v154, sel_domain);
      v156 = static String._unconditionallyBridgeFromObjectiveC(_:)(v155);
      v72 = v157;

      if (v156 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v72 == v158)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v197 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v197 & 1) == 0)
          goto LABEL_384;
      }
      swift_willThrow();
      v198 = v151;
      goto LABEL_359;
    }
    if (!mktemp(v37))
    {
      v480 = v37;
      v159 = MEMORY[0x186DA4118]();
      if ((v14 & 1) != 0)
      {
        v496 = MEMORY[0x1E0DEE9E0];
        v160 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
        v162 = v161;
        v163 = v478;
        v164 = v479;
        countAndFlagsBits = (uint64_t)v478;
        *(_QWORD *)&v499[0] = v479;
        v165 = v477;
        *((_QWORD *)&v499[0] + 1) = v477;
        lazy protocol witness table accessor for type URL and conformance URL();
        v166 = v163;
        swift_retain_n();
        swift_retain_n();
        v167 = v166;
        AnyHashable.init<A>(_:)();
        specialized Dictionary.subscript.setter((uint64_t)&v501, (uint64_t)v160, v162);
        v168 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
        v170 = v169;
        *(_QWORD *)&v501 = v167;
        *((_QWORD *)&v501 + 1) = v164;
        *(_QWORD *)&v502 = v165;
        v171 = URL.path(percentEncoded:)(0);
        countAndFlagsBits = v171._countAndFlagsBits;
        *(_QWORD *)&v499[0] = v171._object;
        AnyHashable.init<A>(_:)();
        specialized Dictionary.subscript.setter((uint64_t)&v501, (uint64_t)v168, v170);
        v172 = v496;
        v490 = v496;
        swift_bridgeObjectRetain();
        v476 = v172;
        if (v159 != 102)
        {
          LODWORD(v14) = v159;
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
            goto LABEL_398;
          v173 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
          v175 = v174;
          static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
          v176 = (int)POSIXErrorCode.rawValue.getter();
          v177 = objc_allocWithZone((Class)NSError);
          v178 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v179 = objc_msgSend(v177, sel_initWithDomain_code_userInfo_, v178, v176, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v180 = objc_msgSend(v179, sel_domain);
          v181 = static String._unconditionallyBridgeFromObjectiveC(_:)(v180);
          v183 = v182;

          if (v181 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"))
            && v183 == v184)
          {
            swift_bridgeObjectRelease_n();
          }
          else
          {
            v347 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v347 & 1) == 0)
              goto LABEL_393;
          }
          countAndFlagsBits = (uint64_t)v179;
          lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
          AnyHashable.init<A>(_:)();
          specialized Dictionary.subscript.setter((uint64_t)&v501, (uint64_t)v173, v175);
          v172 = v490;
          v159 = v14;
        }
        CocoaError.Code.init(fileErrno:reading:)(v159, 0);
        v348 = *(_QWORD *)(v172 + 16);
        v475 = v489;
        if (v348)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
          v349 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
        }
        else
        {
          v349 = (_QWORD *)MEMORY[0x1E0DEE9E0];
        }
        v350 = *(_QWORD *)(v172 + 64);
        v484 = v172 + 64;
        v351 = -1;
        v352 = -1 << *(_BYTE *)(v172 + 32);
        v474 = ~v352;
        if (-v352 < 64)
          v351 = ~(-1 << -(char)v352);
        v353 = v351 & v350;
        v483 = (unint64_t)(63 - v352) >> 6;
        v354 = &v502;
        v355 = (_OWORD *)((char *)v497 + 8);
        v356 = (_OWORD *)((char *)v499 + 8);
        v481 = (char *)(v349 + 8);
        swift_bridgeObjectRetain();
        v486 = 0;
        v485 = MEMORY[0x1E0DEE9B8] + 8;
        v482 = (char *)v499 + 8;
        if (v353)
          goto LABEL_240;
LABEL_241:
        v363 = v486 + 1;
        if (__OFADD__(v486, 1))
          goto LABEL_380;
        if (v363 < v483)
        {
          v364 = *(_QWORD *)(v484 + 8 * v363);
          v365 = v486 + 1;
          if (v364)
            goto LABEL_260;
          v365 = v486 + 2;
          if (v486 + 2 < v483)
          {
            v364 = *(_QWORD *)(v484 + 8 * v365);
            if (v364)
              goto LABEL_260;
            v365 = v486 + 3;
            if (v486 + 3 < v483)
            {
              v364 = *(_QWORD *)(v484 + 8 * v365);
              if (v364)
                goto LABEL_260;
              v365 = v486 + 4;
              if (v486 + 4 < v483)
              {
                v364 = *(_QWORD *)(v484 + 8 * v365);
                if (v364)
                  goto LABEL_260;
                v365 = v486 + 5;
                if (v486 + 5 < v483)
                {
                  v364 = *(_QWORD *)(v484 + 8 * v365);
                  if (v364)
                    goto LABEL_260;
                  v365 = v486 + 6;
                  if (v486 + 6 < v483)
                  {
                    v364 = *(_QWORD *)(v484 + 8 * v365);
                    if (v364)
                      goto LABEL_260;
                    v366 = v486 + 7;
                    if (v486 + 7 < v483)
                    {
                      v364 = *(_QWORD *)(v484 + 8 * v366);
                      if (!v364)
                      {
                        while (1)
                        {
                          v365 = v366 + 1;
                          if (__OFADD__(v366, 1))
                            goto LABEL_391;
                          if (v365 >= v483)
                            goto LABEL_266;
                          v364 = *(_QWORD *)(v484 + 8 * v365);
                          ++v366;
                          if (v364)
                            goto LABEL_260;
                        }
                      }
                      v365 = v486 + 7;
LABEL_260:
                      v486 = v365;
                      v487 = (uint64_t *)((v364 - 1) & v364);
                      for (m = __clz(__rbit64(v364)) + (v365 << 6); ; m = __clz(__rbit64(v353)) | (v486 << 6))
                      {
                        v367 = (void **)(*(_QWORD *)(v172 + 48) + 16 * m);
                        v369 = *v367;
                        v368 = v367[1];
                        outlined init with copy of AnyHashable(*(_QWORD *)(v172 + 56) + 40 * m, (uint64_t)v354);
                        *(_QWORD *)&v501 = v369;
                        *((_QWORD *)&v501 + 1) = v368;
                        v370 = v354[1];
                        v493 = *v354;
                        v494 = v370;
                        v495 = *((_QWORD *)v354 + 4);
                        v496 = (uint64_t)v369;
                        *(_QWORD *)&v497[0] = v368;
                        swift_bridgeObjectRetain();
                        swift_dynamicCast();
                        v371 = v496;
                        v14 = *(_QWORD *)&v497[0];
                        outlined init with take of Any(v355, v356);
                        outlined init with take of Any(v356, v500);
                        outlined init with take of Any(v500, &countAndFlagsBits);
                        v372 = specialized __RawDictionaryStorage.find<A>(_:)(v371, v14);
                        v373 = v372;
                        if ((v374 & 1) != 0)
                        {
                          v357 = v354;
                          v358 = v355;
                          v359 = v172;
                          v360 = (uint64_t *)(v349[6] + 16 * v372);
                          swift_bridgeObjectRelease();
                          *v360 = v371;
                          v360[1] = v14;
                          v172 = v359;
                          v355 = v358;
                          v354 = v357;
                          v356 = v482;
                          v361 = (_OWORD *)(v349[7] + 32 * v373);
                          __swift_destroy_boxed_opaque_existential_1((uint64_t)v361);
                          outlined init with take of Any(&countAndFlagsBits, v361);
                          v353 = (unint64_t)v487;
                          if (!v487)
                            goto LABEL_241;
                        }
                        else
                        {
                          if (v349[2] >= v349[3])
                            goto LABEL_374;
                          *(_QWORD *)&v481[(v372 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v372;
                          v375 = (uint64_t *)(v349[6] + 16 * v372);
                          *v375 = v371;
                          v375[1] = v14;
                          outlined init with take of Any(&countAndFlagsBits, (_OWORD *)(v349[7] + 32 * v372));
                          v376 = v349[2];
                          v243 = __OFADD__(v376, 1);
                          v377 = v376 + 1;
                          if (v243)
                            goto LABEL_376;
                          v349[2] = v377;
                          v353 = (unint64_t)v487;
                          if (!v487)
                            goto LABEL_241;
                        }
LABEL_240:
                        v487 = (uint64_t *)((v353 - 1) & v353);
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_266:
        outlined consume of Set<A1>.Iterator._Variant<A><A1>();
        swift_bridgeObjectRelease();
        v72 = CFSTR("NSCocoaErrorDomain");
        static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
        v378 = objc_allocWithZone((Class)NSError);
        v379 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v380 = objc_msgSend(v378, sel_initWithDomain_code_userInfo_, v379, v475, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v341 = objc_msgSend(v380, sel_domain);
        v381 = static String._unconditionallyBridgeFromObjectiveC(_:)(v341);
        v383 = v382;

        if (v381 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v383 == v384)
          goto LABEL_357;
        v72 = v384;
        v337 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of PathOrURL(v478, v479, v477, 1);
        if ((v337 & 1) != 0)
          goto LABEL_358;
        __break(1u);
      }
      else
      {
        *(_QWORD *)&v493 = MEMORY[0x1E0DEE9E0];
        v199 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
        v201 = v200;
        v203 = (uint64_t)v478;
        v202 = v479;
        countAndFlagsBits = (uint64_t)v478;
        *(_QWORD *)&v499[0] = v479;
        swift_bridgeObjectRetain();
        AnyHashable.init<A>(_:)();
        specialized Dictionary.subscript.setter((uint64_t)&v501, (uint64_t)v199, v201);
        v204 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
        v206 = v205;
        URL.init(_fileManagerFailableFileURLWithPath:)(v203, v202, (uint64_t)&countAndFlagsBits);
        if (countAndFlagsBits)
        {
          v496 = countAndFlagsBits;
          v497[0] = v499[0];
          lazy protocol witness table accessor for type URL and conformance URL();
          AnyHashable.init<A>(_:)();
        }
        else
        {
          v501 = 0u;
          v502 = 0u;
          v503 = 0;
        }
        specialized Dictionary.subscript.setter((uint64_t)&v501, (uint64_t)v204, v206);
        v490 = v493;
        v479 = swift_bridgeObjectRetain();
        v335 = v479;
        if (v159 == 102)
          goto LABEL_274;
        LODWORD(v14) = v159;
        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
          goto LABEL_398;
        v72 = (const __CFString *)static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
        v337 = v336;
        static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
        v338 = (int)POSIXErrorCode.rawValue.getter();
        v339 = objc_allocWithZone((Class)NSError);
        v340 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v341 = objc_msgSend(v339, sel_initWithDomain_code_userInfo_, v340, v338, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v342 = objc_msgSend(v341, sel_domain);
        v343 = static String._unconditionallyBridgeFromObjectiveC(_:)(v342);
        v345 = v344;

        if (v343 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain")) && v345 == v346)
        {
          swift_bridgeObjectRelease_n();
LABEL_273:
          countAndFlagsBits = (uint64_t)v341;
          lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
          AnyHashable.init<A>(_:)();
          specialized Dictionary.subscript.setter((uint64_t)&v501, (uint64_t)v72, v337);
          v335 = v490;
          v159 = v14;
LABEL_274:
          CocoaError.Code.init(fileErrno:reading:)(v159, 0);
          v387 = *(_QWORD *)(v335 + 16);
          v388 = v335;
          v478 = v489;
          if (v387)
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
            v389 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
          }
          else
          {
            v389 = (_QWORD *)MEMORY[0x1E0DEE9E0];
          }
          v390 = *(_QWORD *)(v335 + 64);
          v484 = v335 + 64;
          v391 = -1;
          v392 = -1 << *(_BYTE *)(v335 + 32);
          v477 = ~v392;
          if (-v392 < 64)
            v391 = ~(-1 << -(char)v392);
          v393 = v391 & v390;
          v483 = (unint64_t)(63 - v392) >> 6;
          v394 = &v502;
          v395 = (_OWORD *)((char *)v497 + 8);
          v396 = (_OWORD *)((char *)v499 + 8);
          v481 = (char *)(v389 + 8);
          swift_bridgeObjectRetain();
          v486 = 0;
          v485 = MEMORY[0x1E0DEE9B8] + 8;
          v482 = (char *)v499 + 8;
          if (v393)
            goto LABEL_282;
LABEL_283:
          v403 = v486 + 1;
          if (__OFADD__(v486, 1))
            goto LABEL_381;
          if (v403 < v483)
          {
            v404 = *(_QWORD *)(v484 + 8 * v403);
            v405 = v486 + 1;
            if (v404)
              goto LABEL_302;
            v405 = v486 + 2;
            if (v486 + 2 < v483)
            {
              v404 = *(_QWORD *)(v484 + 8 * v405);
              if (v404)
                goto LABEL_302;
              v405 = v486 + 3;
              if (v486 + 3 < v483)
              {
                v404 = *(_QWORD *)(v484 + 8 * v405);
                if (v404)
                  goto LABEL_302;
                v405 = v486 + 4;
                if (v486 + 4 < v483)
                {
                  v404 = *(_QWORD *)(v484 + 8 * v405);
                  if (v404)
                    goto LABEL_302;
                  v405 = v486 + 5;
                  if (v486 + 5 < v483)
                  {
                    v404 = *(_QWORD *)(v484 + 8 * v405);
                    if (v404)
                      goto LABEL_302;
                    v405 = v486 + 6;
                    if (v486 + 6 < v483)
                    {
                      v404 = *(_QWORD *)(v484 + 8 * v405);
                      if (v404)
                        goto LABEL_302;
                      v406 = v486 + 7;
                      if (v486 + 7 < v483)
                      {
                        v404 = *(_QWORD *)(v484 + 8 * v406);
                        if (!v404)
                        {
                          while (1)
                          {
                            v405 = v406 + 1;
                            if (__OFADD__(v406, 1))
                              goto LABEL_392;
                            if (v405 >= v483)
                              goto LABEL_308;
                            v404 = *(_QWORD *)(v484 + 8 * v405);
                            ++v406;
                            if (v404)
                              goto LABEL_302;
                          }
                        }
                        v405 = v486 + 7;
LABEL_302:
                        v486 = v405;
                        v487 = (uint64_t *)((v404 - 1) & v404);
                        for (n = __clz(__rbit64(v404)) + (v405 << 6); ; n = __clz(__rbit64(v393)) | (v486 << 6))
                        {
                          v407 = (void **)(*(_QWORD *)(v388 + 48) + 16 * n);
                          v409 = *v407;
                          v408 = v407[1];
                          outlined init with copy of AnyHashable(*(_QWORD *)(v388 + 56) + 40 * n, (uint64_t)v394);
                          *(_QWORD *)&v501 = v409;
                          *((_QWORD *)&v501 + 1) = v408;
                          v410 = v394[1];
                          v493 = *v394;
                          v494 = v410;
                          v495 = *((_QWORD *)v394 + 4);
                          v496 = (uint64_t)v409;
                          *(_QWORD *)&v497[0] = v408;
                          swift_bridgeObjectRetain();
                          swift_dynamicCast();
                          v411 = v496;
                          v412 = *(_QWORD *)&v497[0];
                          outlined init with take of Any(v395, v396);
                          outlined init with take of Any(v396, v500);
                          outlined init with take of Any(v500, &countAndFlagsBits);
                          v413 = specialized __RawDictionaryStorage.find<A>(_:)(v411, v412);
                          v414 = v413;
                          if ((v415 & 1) != 0)
                          {
                            v397 = v394;
                            v398 = v395;
                            v399 = v388;
                            v400 = (uint64_t *)(v389[6] + 16 * v413);
                            swift_bridgeObjectRelease();
                            *v400 = v411;
                            v400[1] = v412;
                            v388 = v399;
                            v395 = v398;
                            v394 = v397;
                            v396 = v482;
                            v401 = (_OWORD *)(v389[7] + 32 * v414);
                            __swift_destroy_boxed_opaque_existential_1((uint64_t)v401);
                            outlined init with take of Any(&countAndFlagsBits, v401);
                            v393 = (unint64_t)v487;
                            if (!v487)
                              goto LABEL_283;
                          }
                          else
                          {
                            if (v389[2] >= v389[3])
                              goto LABEL_375;
                            *(_QWORD *)&v481[(v413 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v413;
                            v416 = (uint64_t *)(v389[6] + 16 * v413);
                            *v416 = v411;
                            v416[1] = v412;
                            outlined init with take of Any(&countAndFlagsBits, (_OWORD *)(v389[7] + 32 * v413));
                            v417 = v389[2];
                            v243 = __OFADD__(v417, 1);
                            v418 = v417 + 1;
                            if (v243)
                              goto LABEL_377;
                            v389[2] = v418;
                            v393 = (unint64_t)v487;
                            if (!v487)
                              goto LABEL_283;
                          }
LABEL_282:
                          v487 = (uint64_t *)((v393 - 1) & v393);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_308:
          outlined consume of Set<A1>.Iterator._Variant<A><A1>();
          swift_bridgeObjectRelease();
          v72 = CFSTR("NSCocoaErrorDomain");
          static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
          v419 = objc_allocWithZone((Class)NSError);
          v420 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v421 = objc_msgSend(v419, sel_initWithDomain_code_userInfo_, v420, v478, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v422 = objc_msgSend(v421, sel_domain);
          v423 = static String._unconditionallyBridgeFromObjectiveC(_:)(v422);
          v425 = v424;

          if (v423 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"))
            || v425 != v426)
          {
            v72 = v426;
            v428 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v428 & 1) != 0)
              goto LABEL_358;
            __break(1u);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
LABEL_358:
          swift_willThrow();
          v198 = v480;
LABEL_359:
          MEMORY[0x186DA9E78](v198, -1, -1);
          goto LABEL_360;
        }
      }
      v386 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v386 & 1) == 0)
        goto LABEL_394;
      goto LABEL_273;
    }
    v39 = _NSOpenFileDescriptor_Protected(v37, 2562, a6, 438);
    if ((v39 & 0x80000000) == 0)
    {
      v72 = (const __CFString *)v39;
      String.init(cString:)();
      MEMORY[0x186DA9E78](v37, -1, -1);
LABEL_77:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v72;
    }
    if (MEMORY[0x186DA4118]() != 17)
      break;
    MEMORY[0x186DA9E78](v37, -1, -1);
    if (!--v29)
      goto LABEL_38;
  }
  v480 = v37;
  v40 = MEMORY[0x186DA4118]();
  if ((v14 & 1) == 0)
  {
    *(_QWORD *)&v493 = MEMORY[0x1E0DEE9E0];
    v207 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
    v209 = v208;
    v211 = (uint64_t)v478;
    v210 = v479;
    countAndFlagsBits = (uint64_t)v478;
    *(_QWORD *)&v499[0] = v479;
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v501, (uint64_t)v207, v209);
    v72 = (const __CFString *)static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
    v213 = v212;
    URL.init(_fileManagerFailableFileURLWithPath:)(v211, v210, (uint64_t)&countAndFlagsBits);
    if (countAndFlagsBits)
    {
      v496 = countAndFlagsBits;
      v497[0] = v499[0];
      lazy protocol witness table accessor for type URL and conformance URL();
      AnyHashable.init<A>(_:)();
    }
    else
    {
      v501 = 0u;
      v502 = 0u;
      v503 = 0;
    }
    specialized Dictionary.subscript.setter((uint64_t)&v501, (uint64_t)v72, v213);
    static CocoaError._errorWithErrno(_:reading:variant:userInfo:)(v40, 0, 0, 0, v493, &v501);
    swift_bridgeObjectRelease();
    goto LABEL_358;
  }
  v496 = MEMORY[0x1E0DEE9E0];
  v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
  v43 = v42;
  v44 = v478;
  v45 = v479;
  countAndFlagsBits = (uint64_t)v478;
  *(_QWORD *)&v499[0] = v479;
  v46 = v477;
  *((_QWORD *)&v499[0] + 1) = v477;
  lazy protocol witness table accessor for type URL and conformance URL();
  v47 = v44;
  swift_retain_n();
  swift_retain_n();
  v48 = v47;
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)&v501, (uint64_t)v41, v43);
  v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
  v51 = v50;
  *(_QWORD *)&v501 = v48;
  *((_QWORD *)&v501 + 1) = v45;
  *(_QWORD *)&v502 = v46;
  v52 = URL.path(percentEncoded:)(0);
  countAndFlagsBits = v52._countAndFlagsBits;
  *(_QWORD *)&v499[0] = v52._object;
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)&v501, (uint64_t)v49, v51);
  v53 = v496;
  v490 = v496;
  swift_bridgeObjectRetain();
  v476 = v53;
  if (v40 == 102)
    goto LABEL_317;
  LODWORD(v14) = v40;
  if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) == 0)
  {
    v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
    v56 = v55;
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
    v57 = (int)POSIXErrorCode.rawValue.getter();
    v58 = objc_allocWithZone((Class)NSError);
    v59 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v60 = objc_msgSend(v58, sel_initWithDomain_code_userInfo_, v59, v57, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v61 = objc_msgSend(v60, sel_domain);
    v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
    v64 = v63;

    if (v62 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain")) && v64 == v65)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v429 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v429 & 1) == 0)
        goto LABEL_396;
    }
    countAndFlagsBits = (uint64_t)v60;
    lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v501, (uint64_t)v54, v56);
    v53 = v490;
    v40 = v14;
LABEL_317:
    CocoaError.Code.init(fileErrno:reading:)(v40, 0);
    v430 = *(_QWORD *)(v53 + 16);
    v475 = v489;
    if (v430)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v431 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      v431 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    }
    v432 = *(_QWORD *)(v53 + 64);
    v483 = v53 + 64;
    v433 = -1;
    v434 = -1 << *(_BYTE *)(v53 + 32);
    v474 = ~v434;
    if (-v434 < 64)
      v433 = ~(-1 << -(char)v434);
    v435 = v433 & v432;
    v484 = (unint64_t)(63 - v434) >> 6;
    v436 = &v502;
    v437 = (_OWORD *)((char *)v497 + 8);
    v438 = (_OWORD *)((char *)v499 + 8);
    v481 = (char *)(v431 + 8);
    swift_bridgeObjectRetain();
    v486 = 0;
    v485 = MEMORY[0x1E0DEE9B8] + 8;
    v482 = (char *)v499 + 8;
    if (v435)
      goto LABEL_325;
LABEL_326:
    v445 = v486 + 1;
    if (!__OFADD__(v486, 1))
    {
      if (v445 < v484)
      {
        v446 = *(_QWORD *)(v483 + 8 * v445);
        v447 = v486 + 1;
        if (v446)
          goto LABEL_345;
        v447 = v486 + 2;
        if (v486 + 2 < v484)
        {
          v446 = *(_QWORD *)(v483 + 8 * v447);
          if (v446)
            goto LABEL_345;
          v447 = v486 + 3;
          if (v486 + 3 < v484)
          {
            v446 = *(_QWORD *)(v483 + 8 * v447);
            if (v446)
              goto LABEL_345;
            v447 = v486 + 4;
            if (v486 + 4 < v484)
            {
              v446 = *(_QWORD *)(v483 + 8 * v447);
              if (v446)
                goto LABEL_345;
              v447 = v486 + 5;
              if (v486 + 5 < v484)
              {
                v446 = *(_QWORD *)(v483 + 8 * v447);
                if (v446)
                  goto LABEL_345;
                v447 = v486 + 6;
                if (v486 + 6 < v484)
                {
                  v446 = *(_QWORD *)(v483 + 8 * v447);
                  if (v446)
                    goto LABEL_345;
                  v448 = v486 + 7;
                  if (v486 + 7 < v484)
                  {
                    v446 = *(_QWORD *)(v483 + 8 * v448);
                    if (!v446)
                    {
                      while (1)
                      {
                        v447 = v448 + 1;
                        if (__OFADD__(v448, 1))
                          goto LABEL_395;
                        if (v447 >= v484)
                          goto LABEL_351;
                        v446 = *(_QWORD *)(v483 + 8 * v447);
                        ++v448;
                        if (v446)
                          goto LABEL_345;
                      }
                    }
                    v447 = v486 + 7;
LABEL_345:
                    v486 = v447;
                    v487 = (uint64_t *)((v446 - 1) & v446);
                    for (ii = __clz(__rbit64(v446)) + (v447 << 6); ; ii = __clz(__rbit64(v435)) | (v486 << 6))
                    {
                      v449 = (void **)(*(_QWORD *)(v53 + 48) + 16 * ii);
                      v451 = *v449;
                      v450 = v449[1];
                      outlined init with copy of AnyHashable(*(_QWORD *)(v53 + 56) + 40 * ii, (uint64_t)v436);
                      *(_QWORD *)&v501 = v451;
                      *((_QWORD *)&v501 + 1) = v450;
                      v452 = v436[1];
                      v493 = *v436;
                      v494 = v452;
                      v495 = *((_QWORD *)v436 + 4);
                      v496 = (uint64_t)v451;
                      *(_QWORD *)&v497[0] = v450;
                      swift_bridgeObjectRetain();
                      swift_dynamicCast();
                      v453 = v496;
                      v454 = *(_QWORD *)&v497[0];
                      outlined init with take of Any(v437, v438);
                      outlined init with take of Any(v438, v500);
                      outlined init with take of Any(v500, &countAndFlagsBits);
                      v455 = specialized __RawDictionaryStorage.find<A>(_:)(v453, v454);
                      v456 = v455;
                      if ((v457 & 1) != 0)
                      {
                        v439 = v436;
                        v440 = v437;
                        v441 = v53;
                        v442 = (uint64_t *)(v431[6] + 16 * v455);
                        swift_bridgeObjectRelease();
                        *v442 = v453;
                        v442[1] = v454;
                        v53 = v441;
                        v437 = v440;
                        v436 = v439;
                        v438 = v482;
                        v443 = (_OWORD *)(v431[7] + 32 * v456);
                        __swift_destroy_boxed_opaque_existential_1((uint64_t)v443);
                        outlined init with take of Any(&countAndFlagsBits, v443);
                        v435 = (unint64_t)v487;
                        if (!v487)
                          goto LABEL_326;
                      }
                      else
                      {
                        if (v431[2] >= v431[3])
                          goto LABEL_378;
                        *(_QWORD *)&v481[(v455 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v455;
                        v458 = (uint64_t *)(v431[6] + 16 * v455);
                        *v458 = v453;
                        v458[1] = v454;
                        outlined init with take of Any(&countAndFlagsBits, (_OWORD *)(v431[7] + 32 * v455));
                        v459 = v431[2];
                        v243 = __OFADD__(v459, 1);
                        v460 = v459 + 1;
                        if (v243)
                          goto LABEL_379;
                        v431[2] = v460;
                        v435 = (unint64_t)v487;
                        if (!v487)
                          goto LABEL_326;
                      }
LABEL_325:
                      v487 = (uint64_t *)((v435 - 1) & v435);
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_351:
      outlined consume of Set<A1>.Iterator._Variant<A><A1>();
      swift_bridgeObjectRelease();
      v72 = CFSTR("NSCocoaErrorDomain");
      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
      v461 = objc_allocWithZone((Class)NSError);
      v462 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v463 = objc_msgSend(v461, sel_initWithDomain_code_userInfo_, v462, v475, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v464 = objc_msgSend(v463, sel_domain);
      v465 = static String._unconditionallyBridgeFromObjectiveC(_:)(v464);
      v467 = v466;

      if (v465 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) || v467 != v468)
      {
        v72 = v468;
        v470 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of PathOrURL(v478, v479, v477, 1);
        if ((v470 & 1) == 0)
        {
          __break(1u);
          goto LABEL_357;
        }
        goto LABEL_358;
      }
LABEL_357:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      outlined consume of PathOrURL(v478, v479, v477, 1);
      goto LABEL_358;
    }
LABEL_382:
    __break(1u);
LABEL_383:
    __break(1u);
LABEL_384:
    __break(1u);
LABEL_385:
    __break(1u);
LABEL_386:
    __break(1u);
LABEL_387:
    __break(1u);
LABEL_388:
    __break(1u);
    goto LABEL_389;
  }
LABEL_398:
  *(_QWORD *)&v501 = 0;
  *((_QWORD *)&v501 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v501 = 0xD000000000000014;
  *((_QWORD *)&v501 + 1) = 0x8000000182306980;
  LODWORD(countAndFlagsBits) = v14;
  v472._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v472);
  swift_bridgeObjectRelease();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t createProtectedTemporaryFile(at:inPath:options:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char **a3@<X2>, char *a4@<X3>, _DWORD *a5@<X8>)
{
  uint64_t v5;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  id v15;
  id v16;
  void *v17;
  __int128 v18;
  uint64_t v19;
  id v20;
  Swift::String v21;
  _QWORD *countAndFlagsBits;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _OWORD *object;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t isStackAllocationSafe;
  uint64_t Path;
  unint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char v43;
  char v44;
  int v45;
  int v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  id v50;
  id v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char v57;
  char v58;
  int v59;
  _QWORD *v60;
  id v61;
  char v62;
  int v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  id v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  Swift::String v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  id v79;
  id v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  id v100;
  id v101;
  id v102;
  uint64_t v103;
  uint64_t v104;
  Swift::String v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  uint64_t v114;
  char *v115;
  id v116;
  id v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  id v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  id v128;
  uint64_t v129;
  char *v130;
  id v131;
  id v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  _OWORD *v140;
  unint64_t v141;
  _OWORD *v142;
  _OWORD *v143;
  char *v144;
  uint64_t *v145;
  _OWORD *v146;
  unint64_t v147;
  int64_t v148;
  unint64_t v149;
  int64_t v150;
  int64_t v151;
  char **v152;
  char *v153;
  char *v154;
  __int128 v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  char v160;
  uint64_t *v161;
  uint64_t v162;
  BOOL v163;
  uint64_t v164;
  id v165;
  uint64_t v166;
  id v167;
  id v168;
  id v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  __int128 *v179;
  __int128 *v180;
  unint64_t v181;
  _OWORD *v182;
  char *v183;
  uint64_t *v184;
  _OWORD *v185;
  unint64_t v186;
  int64_t v187;
  unint64_t v188;
  int64_t v189;
  int64_t v190;
  char **v191;
  char *v192;
  char *v193;
  __int128 v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  char v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  id v203;
  uint64_t v204;
  id v205;
  id v206;
  id v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char v212;
  id v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  id v218;
  uint64_t v219;
  uint64_t v220;
  char v221;
  char v222;
  id v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  id v227;
  uint64_t v228;
  char *v229;
  id v230;
  id v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  _QWORD *v235;
  uint64_t v236;
  uint64_t v237;
  _QWORD *v238;
  id v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  id v243;
  uint64_t v244;
  char *v245;
  id v246;
  id v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  __int128 *v255;
  _OWORD *v256;
  _OWORD *v257;
  __int128 *v258;
  _OWORD *v259;
  _OWORD *v260;
  char *v261;
  uint64_t *v262;
  _OWORD *v263;
  unint64_t v264;
  int64_t v265;
  unint64_t v266;
  int64_t v267;
  int64_t v268;
  char **v269;
  char *v270;
  char *v271;
  __int128 v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  unint64_t v276;
  char v277;
  uint64_t *v278;
  uint64_t v279;
  uint64_t v280;
  id v281;
  uint64_t v282;
  id v283;
  id v284;
  id v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  char v290;
  char *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  unint64_t v295;
  __int128 *v296;
  _OWORD *v297;
  _OWORD *v298;
  __int128 *v299;
  _OWORD *v300;
  _OWORD *v301;
  char *v302;
  uint64_t *v303;
  _OWORD *v304;
  unint64_t v305;
  int64_t v306;
  unint64_t v307;
  int64_t v308;
  int64_t v309;
  char **v310;
  char *v311;
  char *v312;
  __int128 v313;
  uint64_t v314;
  uint64_t v315;
  unint64_t v316;
  unint64_t v317;
  char v318;
  uint64_t *v319;
  uint64_t v320;
  uint64_t v321;
  id v322;
  uint64_t v323;
  id v324;
  id v325;
  id v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  char v331;
  char v332;
  char v333;
  Swift::String v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  char *v338;
  unint64_t v339;
  uint64_t v340;
  char *v341;
  uint64_t v342;
  _QWORD *v343;
  char *v344;
  _OWORD *v345;
  int64_t v346;
  int64_t v347;
  __int128 v348;
  uint64_t v349;
  uint64_t v350;
  int64_t v351;
  _DWORD *v352;
  char *v353;
  __int128 v354;
  __int128 v355;
  uint64_t v356;
  char *v357;
  _OWORD v358[2];
  char *v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  uint64_t v364;
  uint64_t v365;

  v352 = a5;
  v365 = *MEMORY[0x1E0C80C00];
  v9 = *a3;
  v10 = (uint64_t)a3[1];
  v11 = (uint64_t)a3[2];
  v12 = *((unsigned __int8 *)a3 + 24);
  getpid();
  if (!_foundation_sandbox_check())
  {
    swift_bridgeObjectRetain();
    Path = String._deletingLastPathComponent()(a1, a2);
    v34 = v33;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v362 = v9;
    *((_QWORD *)&v362 + 1) = v10;
    *(_QWORD *)&v363 = v11;
    BYTE8(v363) = v12;
    v35 = createTemporaryFile(at:inPath:prefix:options:)(Path, v34, (uint64_t)&v362, 0x736F6E2E7461642ELL, (void *)0xEB00000000636E79, (int)a4);
    if (v5)
      return swift_bridgeObjectRelease();
    v46 = v35;
    v28 = v36;
    v30 = v37;
    result = swift_bridgeObjectRelease();
    countAndFlagsBits = 0;
    v47 = 0;
    goto LABEL_26;
  }
  v342 = v11;
  v344 = v9;
  URL.init(fileURLWithPath:isDirectory:)(a1, a2, 0, (uint64_t)&v362);
  v14 = v362;
  v13 = v362;
  v349 = v363;
  v15 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  *(_QWORD *)&v362 = 0;
  v348 = v14;
  v16 = objc_msgSend(v15, sel_URLForDirectory_inDomain_appropriateForURL_create_error_, 99, 1, v13, 1, &v362);

  v17 = (void *)v362;
  if (!v16)
  {
    if ((_QWORD)v362)
    {
      (id)v362;
      a4 = (char *)v348;
LABEL_29:
      swift_willThrow();

      swift_release();
      return swift_release();
    }
    a4 = (char *)v348;
    if (one-time initialization token for _nilObjCError == -1)
    {
LABEL_28:
      v61 = (id)_nilObjCError;
      goto LABEL_29;
    }
LABEL_281:
    swift_once();
    goto LABEL_28;
  }
  LODWORD(v351) = v12;
  v340 = v10;
  URL.init(reference:)(v16, &v362);
  v18 = v362;
  v19 = v363;
  v20 = v17;

  v362 = v18;
  *(_QWORD *)&v363 = v19;
  v21 = URL.path(percentEncoded:)(0);
  countAndFlagsBits = (_QWORD *)v21._countAndFlagsBits;

  swift_release();
  swift_release();
  swift_bridgeObjectRetain();
  v23 = String._lastPathComponent.getter(a1, a2);
  v25 = v24;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v26 = v23;
  object = v21._object;
  v28 = String._appendingPathComponent(_:)(v26, v25, v21._countAndFlagsBits, (unint64_t)v21._object);
  v30 = v29;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v30 & 0x1000000000000000) != 0)
    goto LABEL_272;
  if ((v30 & 0x2000000000000000) != 0)
    isStackAllocationSafe = HIBYTE(v30) & 0xF;
  else
    isStackAllocationSafe = v28 & 0xFFFFFFFFFFFFLL;
LABEL_11:
  v39 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
LABEL_274:
    __break(1u);
LABEL_275:
    __break(1u);
LABEL_276:
    __break(1u);
LABEL_277:
    __break(1u);
LABEL_278:
    __break(1u);
LABEL_279:
    __break(1u);
LABEL_280:
    __break(1u);
    goto LABEL_281;
  }
  v345 = object;
  if (v39 < -1)
    goto LABEL_278;
  v40 = v39 + 1;
  if (v39 >= 1024)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      v56 = (char *)swift_slowAlloc();
      swift_bridgeObjectRetain();
      String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v56, v40, 1, v28, v30);
      v58 = v57;
      swift_bridgeObjectRelease();
      if ((v58 & 1) == 0)
      {
        v59 = _NSOpenFileDescriptor_Protected(v56, 2562, (int)a4, 438);
        if (v59 < 0)
        {
          v341 = v56;
          v339 = v30;
          v63 = MEMORY[0x186DA4118]();
          cleanupTemporaryDirectory(at:)((uint64_t)countAndFlagsBits, (uint64_t)v345);
          if ((v351 & 1) == 0)
          {
            *(_QWORD *)&v354 = MEMORY[0x1E0DEE9E0];
            v213 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
            v215 = v214;
            v216 = (uint64_t)v344;
            v217 = v340;
            v359 = v344;
            *(_QWORD *)&v360 = v340;
            swift_bridgeObjectRetain();
            AnyHashable.init<A>(_:)();
            specialized Dictionary.subscript.setter((uint64_t)&v362, (uint64_t)v213, v215);
            v218 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
            v220 = v219;
            URL.init(_fileManagerFailableFileURLWithPath:)(v216, v217, (uint64_t)&v359);
            if (v359)
            {
              v357 = v359;
              v358[0] = v360;
              lazy protocol witness table accessor for type URL and conformance URL();
              AnyHashable.init<A>(_:)();
            }
            else
            {
              v362 = 0u;
              v363 = 0u;
              v364 = 0;
            }
            specialized Dictionary.subscript.setter((uint64_t)&v362, (uint64_t)v218, v220);
            v235 = (_QWORD *)v354;
            v353 = (char *)v354;
            swift_bridgeObjectRetain();
            if (v63 == 102)
            {
LABEL_155:
              v236 = 512;
            }
            else
            {
              if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
                goto LABEL_292;
              v239 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
              v241 = v240;
              static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
              v242 = (int)POSIXErrorCode.rawValue.getter();
              v243 = objc_allocWithZone((Class)NSError);
              v244 = String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              v245 = (char *)objc_msgSend(v243, sel_initWithDomain_code_userInfo_, v244, v242, _NativeDictionary.bridged()());
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              v246 = objc_msgSend(v245, sel_domain);
              v247 = static String._unconditionallyBridgeFromObjectiveC(_:)(v246);
              v249 = v248;

              if (v247 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"))
                && v249 == v250)
              {
                swift_bridgeObjectRelease_n();
              }
              else
              {
                v333 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if ((v333 & 1) == 0)
                  goto LABEL_291;
              }
              v359 = v245;
              lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
              AnyHashable.init<A>(_:)();
              specialized Dictionary.subscript.setter((uint64_t)&v362, (uint64_t)v239, v241);
              v236 = 4;
              switch(v63)
              {
                case 1:
                case 13:
                  v236 = 513;
                  break;
                case 2:
                  break;
                case 17:
                  v236 = 516;
                  break;
                case 28:
                case 69:
                  v236 = 640;
                  break;
                case 30:
                  v236 = 642;
                  break;
                case 63:
                  v236 = 514;
                  break;
                default:
                  goto LABEL_155;
              }
            }
            a4 = v353;
            v237 = *((_QWORD *)v353 + 2);
            v343 = v235;
            v342 = v236;
            if (v237)
            {
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
              v238 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
            }
            else
            {
              v238 = (_QWORD *)MEMORY[0x1E0DEE9E0];
            }
            v292 = *((_QWORD *)a4 + 8);
            v347 = (int64_t)(a4 + 64);
            v293 = -1;
            v294 = -1 << a4[32];
            v340 = ~v294;
            if (-v294 < 64)
              v293 = ~(-1 << -(char)v294);
            v295 = v293 & v292;
            v346 = (unint64_t)(63 - v294) >> 6;
            v296 = &v363;
            v297 = (_OWORD *)((char *)v358 + 8);
            v298 = (__int128 *)((char *)&v360 + 8);
            v344 = (char *)(v238 + 8);
            swift_bridgeObjectRetain();
            v351 = 0;
            v350 = MEMORY[0x1E0DEE9B8] + 8;
            while (1)
            {
              if (v295)
              {
                v352 = (_DWORD *)((v295 - 1) & v295);
                v305 = __clz(__rbit64(v295)) | (v351 << 6);
              }
              else
              {
                v306 = v351 + 1;
                if (__OFADD__(v351, 1))
                  goto LABEL_280;
                if (v306 >= v346)
                  goto LABEL_233;
                v307 = *(_QWORD *)(v347 + 8 * v306);
                v308 = v351 + 1;
                if (!v307)
                {
                  v308 = v351 + 2;
                  if (v351 + 2 >= v346)
                    goto LABEL_233;
                  v307 = *(_QWORD *)(v347 + 8 * v308);
                  if (!v307)
                  {
                    v308 = v351 + 3;
                    if (v351 + 3 >= v346)
                      goto LABEL_233;
                    v307 = *(_QWORD *)(v347 + 8 * v308);
                    if (!v307)
                    {
                      v308 = v351 + 4;
                      if (v351 + 4 >= v346)
                        goto LABEL_233;
                      v307 = *(_QWORD *)(v347 + 8 * v308);
                      if (!v307)
                      {
                        v308 = v351 + 5;
                        if (v351 + 5 >= v346)
                          goto LABEL_233;
                        v307 = *(_QWORD *)(v347 + 8 * v308);
                        if (!v307)
                        {
                          v308 = v351 + 6;
                          if (v351 + 6 >= v346)
                            goto LABEL_233;
                          v307 = *(_QWORD *)(v347 + 8 * v308);
                          if (!v307)
                          {
                            v309 = v351 + 7;
                            if (v351 + 7 >= v346)
                              goto LABEL_233;
                            v307 = *(_QWORD *)(v347 + 8 * v309);
                            if (!v307)
                            {
                              while (1)
                              {
                                v308 = v309 + 1;
                                if (__OFADD__(v309, 1))
                                  goto LABEL_289;
                                if (v308 >= v346)
                                  break;
                                v307 = *(_QWORD *)(v347 + 8 * v308);
                                ++v309;
                                if (v307)
                                  goto LABEL_228;
                              }
LABEL_233:
                              outlined consume of Set<A1>.Iterator._Variant<A><A1>();
                              swift_bridgeObjectRelease();
                              static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
                              v322 = objc_allocWithZone((Class)NSError);
                              v323 = String._bridgeToObjectiveCImpl()();
                              swift_bridgeObjectRelease();
                              v324 = objc_msgSend(v322, sel_initWithDomain_code_userInfo_, v323, v342, _NativeDictionary.bridged()());
                              swift_unknownObjectRelease();
                              swift_unknownObjectRelease();
                              v325 = objc_msgSend(v324, sel_domain);
                              v326 = static String._unconditionallyBridgeFromObjectiveC(_:)(v325);
                              v328 = v327;

                              if (v326 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"))
                                || v328 != v329)
                              {
                                v331 = _stringCompareWithSmolCheck(_:_:expecting:)();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                v291 = v341;
                                if ((v331 & 1) != 0)
                                  goto LABEL_241;
                                __break(1u);
                              }
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease_n();
LABEL_240:
                              v291 = v341;
                              goto LABEL_241;
                            }
                            v308 = v351 + 7;
                          }
                        }
                      }
                    }
                  }
                }
LABEL_228:
                v352 = (_DWORD *)((v307 - 1) & v307);
                v305 = __clz(__rbit64(v307)) + (v308 << 6);
                v351 = v308;
              }
              v310 = (char **)(*((_QWORD *)a4 + 6) + 16 * v305);
              v312 = *v310;
              v311 = v310[1];
              outlined init with copy of AnyHashable(*((_QWORD *)a4 + 7) + 40 * v305, (uint64_t)v296);
              *(_QWORD *)&v362 = v312;
              *((_QWORD *)&v362 + 1) = v311;
              v313 = v296[1];
              v354 = *v296;
              v355 = v313;
              v356 = *((_QWORD *)v296 + 4);
              v357 = v312;
              *(_QWORD *)&v358[0] = v311;
              swift_bridgeObjectRetain();
              swift_dynamicCast();
              v314 = (uint64_t)v357;
              v315 = *(_QWORD *)&v358[0];
              outlined init with take of Any(v297, v298);
              outlined init with take of Any(v298, &v361);
              outlined init with take of Any(&v361, &v359);
              v316 = specialized __RawDictionaryStorage.find<A>(_:)(v314, v315);
              v317 = v316;
              if ((v318 & 1) != 0)
              {
                v299 = v296;
                v300 = v298;
                v301 = v297;
                v302 = a4;
                v303 = (uint64_t *)(v238[6] + 16 * v316);
                swift_bridgeObjectRelease();
                *v303 = v314;
                v303[1] = v315;
                a4 = v302;
                v297 = v301;
                v298 = v300;
                v296 = v299;
                v304 = (_OWORD *)(v238[7] + 32 * v317);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v304);
                outlined init with take of Any(&v359, v304);
              }
              else
              {
                if (v238[2] >= v238[3])
                  goto LABEL_275;
                *(_QWORD *)&v344[(v316 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v316;
                v319 = (uint64_t *)(v238[6] + 16 * v316);
                *v319 = v314;
                v319[1] = v315;
                outlined init with take of Any(&v359, (_OWORD *)(v238[7] + 32 * v316));
                v320 = v238[2];
                v163 = __OFADD__(v320, 1);
                v321 = v320 + 1;
                if (v163)
                  goto LABEL_277;
                v238[2] = v321;
              }
              v295 = (unint64_t)v352;
            }
          }
          v357 = (char *)MEMORY[0x1E0DEE9E0];
          v94 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
          v96 = v95;
          v97 = v344;
          v98 = v340;
          v359 = v344;
          *(_QWORD *)&v360 = v340;
          v99 = v342;
          *((_QWORD *)&v360 + 1) = v342;
          lazy protocol witness table accessor for type URL and conformance URL();
          v100 = v97;
          swift_retain_n();
          swift_retain_n();
          v101 = v100;
          AnyHashable.init<A>(_:)();
          specialized Dictionary.subscript.setter((uint64_t)&v362, (uint64_t)v94, v96);
          v102 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
          v104 = v103;
          *(_QWORD *)&v362 = v101;
          *((_QWORD *)&v362 + 1) = v98;
          *(_QWORD *)&v363 = v99;
          v105 = URL.path(percentEncoded:)(0);
          v359 = (char *)v105._countAndFlagsBits;
          *(_QWORD *)&v360 = v105._object;
          AnyHashable.init<A>(_:)();
          specialized Dictionary.subscript.setter((uint64_t)&v362, (uint64_t)v102, v104);
          v353 = v357;
          v338 = v357;
          swift_bridgeObjectRetain();
          if (v63 == 102)
          {
LABEL_46:
            v106 = 512;
          }
          else
          {
            if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
              goto LABEL_292;
            v223 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
            v225 = v224;
            static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
            v226 = (int)POSIXErrorCode.rawValue.getter();
            v227 = objc_allocWithZone((Class)NSError);
            v228 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            v229 = (char *)objc_msgSend(v227, sel_initWithDomain_code_userInfo_, v228, v226, _NativeDictionary.bridged()());
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            v230 = objc_msgSend(v229, sel_domain);
            v231 = static String._unconditionallyBridgeFromObjectiveC(_:)(v230);
            v233 = v232;

            if (v231 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"))
              && v233 == v234)
            {
              swift_bridgeObjectRelease_n();
            }
            else
            {
              v332 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v332 & 1) == 0)
                goto LABEL_290;
            }
            v359 = v229;
            lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
            AnyHashable.init<A>(_:)();
            specialized Dictionary.subscript.setter((uint64_t)&v362, (uint64_t)v223, v225);
            v106 = 4;
            switch(v63)
            {
              case 1:
              case 13:
                v106 = 513;
                break;
              case 2:
                break;
              case 17:
                v106 = 516;
                break;
              case 28:
              case 69:
                v106 = 640;
                break;
              case 30:
                v106 = 642;
                break;
              case 63:
                v106 = 514;
                break;
              default:
                goto LABEL_46;
            }
          }
          a4 = v353;
          v107 = *((_QWORD *)v353 + 2);
          v337 = v106;
          if (v107)
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
            v108 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
          }
          else
          {
            v108 = (_QWORD *)MEMORY[0x1E0DEE9E0];
          }
          v251 = *((_QWORD *)a4 + 8);
          v347 = (int64_t)(a4 + 64);
          v252 = -1;
          v253 = -1 << a4[32];
          v336 = ~v253;
          if (-v253 < 64)
            v252 = ~(-1 << -(char)v253);
          v254 = v252 & v251;
          v346 = (unint64_t)(63 - v253) >> 6;
          v255 = &v363;
          v256 = (_OWORD *)((char *)v358 + 8);
          v257 = (__int128 *)((char *)&v360 + 8);
          v343 = v108 + 8;
          swift_bridgeObjectRetain();
          v351 = 0;
          v350 = MEMORY[0x1E0DEE9B8] + 8;
          while (1)
          {
            if (v254)
            {
              v352 = (_DWORD *)((v254 - 1) & v254);
              v264 = __clz(__rbit64(v254)) | (v351 << 6);
            }
            else
            {
              v265 = v351 + 1;
              if (__OFADD__(v351, 1))
                goto LABEL_279;
              if (v265 >= v346)
                goto LABEL_194;
              v266 = *(_QWORD *)(v347 + 8 * v265);
              v267 = v351 + 1;
              if (!v266)
              {
                v267 = v351 + 2;
                if (v351 + 2 >= v346)
                  goto LABEL_194;
                v266 = *(_QWORD *)(v347 + 8 * v267);
                if (!v266)
                {
                  v267 = v351 + 3;
                  if (v351 + 3 >= v346)
                    goto LABEL_194;
                  v266 = *(_QWORD *)(v347 + 8 * v267);
                  if (!v266)
                  {
                    v267 = v351 + 4;
                    if (v351 + 4 >= v346)
                      goto LABEL_194;
                    v266 = *(_QWORD *)(v347 + 8 * v267);
                    if (!v266)
                    {
                      v267 = v351 + 5;
                      if (v351 + 5 >= v346)
                        goto LABEL_194;
                      v266 = *(_QWORD *)(v347 + 8 * v267);
                      if (!v266)
                      {
                        v267 = v351 + 6;
                        if (v351 + 6 >= v346)
                          goto LABEL_194;
                        v266 = *(_QWORD *)(v347 + 8 * v267);
                        if (!v266)
                        {
                          v268 = v351 + 7;
                          if (v351 + 7 >= v346)
                            goto LABEL_194;
                          v266 = *(_QWORD *)(v347 + 8 * v268);
                          if (!v266)
                          {
                            while (1)
                            {
                              v267 = v268 + 1;
                              if (__OFADD__(v268, 1))
                                goto LABEL_288;
                              if (v267 >= v346)
                                break;
                              v266 = *(_QWORD *)(v347 + 8 * v267);
                              ++v268;
                              if (v266)
                                goto LABEL_189;
                            }
LABEL_194:
                            outlined consume of Set<A1>.Iterator._Variant<A><A1>();
                            swift_bridgeObjectRelease();
                            static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
                            v281 = objc_allocWithZone((Class)NSError);
                            v282 = String._bridgeToObjectiveCImpl()();
                            swift_bridgeObjectRelease();
                            v283 = objc_msgSend(v281, sel_initWithDomain_code_userInfo_, v282, v337, _NativeDictionary.bridged()());
                            swift_unknownObjectRelease();
                            swift_unknownObjectRelease();
                            v284 = objc_msgSend(v283, sel_domain);
                            v285 = static String._unconditionallyBridgeFromObjectiveC(_:)(v284);
                            v287 = v286;

                            if (v285 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"))
                              || v287 != v288)
                            {
                              v290 = _stringCompareWithSmolCheck(_:_:expecting:)();
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              outlined consume of PathOrURL(v344, v340, v342, 1);
                              v291 = v341;
                              if ((v290 & 1) == 0)
                              {
                                __break(1u);
                                goto LABEL_200;
                              }
LABEL_241:
                              swift_willThrow();
                              MEMORY[0x186DA9E78](v291, -1, -1);
                              goto LABEL_242;
                            }
LABEL_200:
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease_n();
                            outlined consume of PathOrURL(v344, v340, v342, 1);
                            goto LABEL_240;
                          }
                          v267 = v351 + 7;
                        }
                      }
                    }
                  }
                }
              }
LABEL_189:
              v352 = (_DWORD *)((v266 - 1) & v266);
              v264 = __clz(__rbit64(v266)) + (v267 << 6);
              v351 = v267;
            }
            v269 = (char **)(*((_QWORD *)a4 + 6) + 16 * v264);
            v271 = *v269;
            v270 = v269[1];
            outlined init with copy of AnyHashable(*((_QWORD *)a4 + 7) + 40 * v264, (uint64_t)v255);
            *(_QWORD *)&v362 = v271;
            *((_QWORD *)&v362 + 1) = v270;
            v272 = v255[1];
            v354 = *v255;
            v355 = v272;
            v356 = *((_QWORD *)v255 + 4);
            v357 = v271;
            *(_QWORD *)&v358[0] = v270;
            swift_bridgeObjectRetain();
            swift_dynamicCast();
            v273 = (uint64_t)v357;
            v274 = *(_QWORD *)&v358[0];
            outlined init with take of Any(v256, v257);
            outlined init with take of Any(v257, &v361);
            outlined init with take of Any(&v361, &v359);
            v275 = specialized __RawDictionaryStorage.find<A>(_:)(v273, v274);
            v276 = v275;
            if ((v277 & 1) != 0)
            {
              v258 = v255;
              v259 = v257;
              v260 = v256;
              v261 = a4;
              v262 = (uint64_t *)(v108[6] + 16 * v275);
              swift_bridgeObjectRelease();
              *v262 = v273;
              v262[1] = v274;
              a4 = v261;
              v256 = v260;
              v257 = v259;
              v255 = v258;
              v263 = (_OWORD *)(v108[7] + 32 * v276);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v263);
              outlined init with take of Any(&v359, v263);
            }
            else
            {
              if (v108[2] >= v108[3])
                goto LABEL_274;
              *(_QWORD *)((char *)v343 + ((v275 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v275;
              v278 = (uint64_t *)(v108[6] + 16 * v275);
              *v278 = v273;
              v278[1] = v274;
              outlined init with take of Any(&v359, (_OWORD *)(v108[7] + 32 * v275));
              v279 = v108[2];
              v163 = __OFADD__(v279, 1);
              v280 = v279 + 1;
              if (v163)
                goto LABEL_276;
              v108[2] = v280;
            }
            v254 = (unint64_t)v352;
          }
        }
        v46 = v59;
        v47 = (uint64_t)v345;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        MEMORY[0x186DA9E78](v56, -1, -1);
LABEL_25:
        swift_bridgeObjectRelease();

        swift_release();
        swift_release();
        result = swift_bridgeObjectRelease();
LABEL_26:
        v60 = v352;
        *v352 = v46;
        v60[1] = v28;
        v60[2] = v30;
        v60[3] = countAndFlagsBits;
        v60[4] = v47;
        return result;
      }
      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
      v77 = objc_allocWithZone((Class)NSError);
      v78 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v79 = objc_msgSend(v77, sel_initWithDomain_code_userInfo_, v78, 514, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v80 = objc_msgSend(v79, sel_domain);
      v81 = static String._unconditionallyBridgeFromObjectiveC(_:)(v80);
      v83 = v82;

      if (v81 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v83 == v84)
      {
        swift_bridgeObjectRelease_n();
LABEL_43:
        swift_willThrow();
        MEMORY[0x186DA9E78](v56, -1, -1);
        goto LABEL_242;
      }
      v93 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v93 & 1) != 0)
        goto LABEL_43;
LABEL_283:
      __break(1u);
      goto LABEL_284;
    }
  }
  v341 = (char *)&v335;
  MEMORY[0x1E0C80A78](isStackAllocationSafe);
  v42 = (char *)&v335 - v41;
  swift_bridgeObjectRetain();
  String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v42, v40, 1, v28, v30);
  v44 = v43;
  swift_bridgeObjectRelease();
  if ((v44 & 1) != 0)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v48 = objc_allocWithZone((Class)NSError);
    v49 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v50 = objc_msgSend(v48, sel_initWithDomain_code_userInfo_, v49, 514, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v51 = objc_msgSend(v50, sel_domain);
    v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
    v54 = v53;

    if (v52 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v54 == v55)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_31;
    }
    v62 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v62 & 1) != 0)
      goto LABEL_31;
    __break(1u);
    goto LABEL_283;
  }
  v45 = _NSOpenFileDescriptor_Protected(v42, 2562, (int)a4, 438);
  if ((v45 & 0x80000000) == 0)
  {
    v46 = v45;
    v47 = (uint64_t)v345;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_25;
  }
  v339 = v30;
  v63 = MEMORY[0x186DA4118]();
  cleanupTemporaryDirectory(at:)((uint64_t)countAndFlagsBits, (uint64_t)v345);
  if ((v351 & 1) != 0)
  {
    v357 = (char *)MEMORY[0x1E0DEE9E0];
    v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
    v66 = v65;
    v67 = v344;
    v68 = v340;
    v359 = v344;
    *(_QWORD *)&v360 = v340;
    v69 = v342;
    *((_QWORD *)&v360 + 1) = v342;
    lazy protocol witness table accessor for type URL and conformance URL();
    v70 = v67;
    swift_retain_n();
    swift_retain_n();
    v71 = v70;
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v362, (uint64_t)v64, v66);
    v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
    v74 = v73;
    *(_QWORD *)&v362 = v71;
    *((_QWORD *)&v362 + 1) = v68;
    *(_QWORD *)&v363 = v69;
    v75 = URL.path(percentEncoded:)(0);
    v359 = (char *)v75._countAndFlagsBits;
    *(_QWORD *)&v360 = v75._object;
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v362, (uint64_t)v72, v74);
    v353 = v357;
    v338 = v357;
    swift_bridgeObjectRetain();
    if (v63 == 102)
    {
LABEL_34:
      v76 = 512;
LABEL_35:
      v337 = v76;
      a4 = v353;
      if (*((_QWORD *)v353 + 2))
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
        countAndFlagsBits = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
      }
      else
      {
        countAndFlagsBits = (_QWORD *)MEMORY[0x1E0DEE9E0];
      }
      v136 = *((_QWORD *)a4 + 8);
      v346 = (int64_t)(a4 + 64);
      v137 = -1;
      v138 = -1 << a4[32];
      v336 = ~v138;
      if (-v138 < 64)
        v137 = ~(-1 << -(char)v138);
      v139 = v137 & v136;
      v347 = (unint64_t)(63 - v138) >> 6;
      v30 = (unint64_t)&v363;
      object = (_OWORD *)((char *)v358 + 8);
      v140 = (__int128 *)((char *)&v360 + 8);
      v343 = countAndFlagsBits + 8;
      swift_bridgeObjectRetain();
      v351 = 0;
      v28 = 40;
      v350 = MEMORY[0x1E0DEE9B8] + 8;
      while (1)
      {
        if (v139)
        {
          v352 = (_DWORD *)((v139 - 1) & v139);
          v147 = __clz(__rbit64(v139)) | (v351 << 6);
        }
        else
        {
          v148 = v351 + 1;
          if (__OFADD__(v351, 1))
            goto LABEL_270;
          if (v148 >= v347)
          {
LABEL_94:
            outlined consume of Set<A1>.Iterator._Variant<A><A1>();
            swift_bridgeObjectRelease();
            static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
            v165 = objc_allocWithZone((Class)NSError);
            v166 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            v167 = objc_msgSend(v165, sel_initWithDomain_code_userInfo_, v166, v337, _NativeDictionary.bridged()());
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            v168 = objc_msgSend(v167, sel_domain);
            v169 = static String._unconditionallyBridgeFromObjectiveC(_:)(v168);
            v171 = v170;

            if (v169 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"))
              && v171 == v172)
            {
LABEL_100:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease_n();
              outlined consume of PathOrURL(v344, v340, v342, 1);
            }
            else
            {
              v174 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              outlined consume of PathOrURL(v344, v340, v342, 1);
              if ((v174 & 1) == 0)
              {
                __break(1u);
                goto LABEL_100;
              }
            }
            goto LABEL_31;
          }
          v149 = *(_QWORD *)(v346 + 8 * v148);
          v150 = v351 + 1;
          if (!v149)
          {
            v150 = v351 + 2;
            if (v351 + 2 >= v347)
              goto LABEL_94;
            v149 = *(_QWORD *)(v346 + 8 * v150);
            if (!v149)
            {
              v150 = v351 + 3;
              if (v351 + 3 >= v347)
                goto LABEL_94;
              v149 = *(_QWORD *)(v346 + 8 * v150);
              if (!v149)
              {
                v150 = v351 + 4;
                if (v351 + 4 >= v347)
                  goto LABEL_94;
                v149 = *(_QWORD *)(v346 + 8 * v150);
                if (!v149)
                {
                  v150 = v351 + 5;
                  if (v351 + 5 >= v347)
                    goto LABEL_94;
                  v149 = *(_QWORD *)(v346 + 8 * v150);
                  if (!v149)
                  {
                    v150 = v351 + 6;
                    if (v351 + 6 >= v347)
                      goto LABEL_94;
                    v149 = *(_QWORD *)(v346 + 8 * v150);
                    if (!v149)
                    {
                      v151 = v351 + 7;
                      if (v351 + 7 >= v347)
                        goto LABEL_94;
                      v149 = *(_QWORD *)(v346 + 8 * v151);
                      if (!v149)
                      {
                        while (1)
                        {
                          v150 = v151 + 1;
                          if (__OFADD__(v151, 1))
                            break;
                          if (v150 >= v347)
                            goto LABEL_94;
                          v149 = *(_QWORD *)(v346 + 8 * v150);
                          ++v151;
                          if (v149)
                            goto LABEL_89;
                        }
LABEL_284:
                        __break(1u);
LABEL_285:
                        __break(1u);
LABEL_286:
                        __break(1u);
LABEL_287:
                        __break(1u);
LABEL_288:
                        __break(1u);
LABEL_289:
                        __break(1u);
LABEL_290:
                        __break(1u);
LABEL_291:
                        __break(1u);
                      }
                      v150 = v351 + 7;
                    }
                  }
                }
              }
            }
          }
LABEL_89:
          v352 = (_DWORD *)((v149 - 1) & v149);
          v147 = __clz(__rbit64(v149)) + (v150 << 6);
          v351 = v150;
        }
        v152 = (char **)(*((_QWORD *)a4 + 6) + 16 * v147);
        v154 = *v152;
        v153 = v152[1];
        outlined init with copy of AnyHashable(*((_QWORD *)a4 + 7) + 40 * v147, v30);
        *(_QWORD *)&v362 = v154;
        *((_QWORD *)&v362 + 1) = v153;
        v155 = *(_OWORD *)(v30 + 16);
        v354 = *(_OWORD *)v30;
        v355 = v155;
        v356 = *(_QWORD *)(v30 + 32);
        v357 = v154;
        *(_QWORD *)&v358[0] = v153;
        swift_bridgeObjectRetain();
        swift_dynamicCast();
        v156 = (uint64_t)v357;
        v157 = *(_QWORD *)&v358[0];
        outlined init with take of Any(object, v140);
        outlined init with take of Any(v140, &v361);
        outlined init with take of Any(&v361, &v359);
        v158 = specialized __RawDictionaryStorage.find<A>(_:)(v156, v157);
        v159 = v158;
        if ((v160 & 1) != 0)
        {
          v141 = v30;
          v142 = v140;
          v143 = object;
          v144 = a4;
          v145 = (uint64_t *)(countAndFlagsBits[6] + 16 * v158);
          swift_bridgeObjectRelease();
          *v145 = v156;
          v145[1] = v157;
          a4 = v144;
          object = v143;
          v140 = v142;
          v30 = v141;
          v28 = 40;
          v146 = (_OWORD *)(countAndFlagsBits[7] + 32 * v159);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v146);
          outlined init with take of Any(&v359, v146);
        }
        else
        {
          if (countAndFlagsBits[2] >= countAndFlagsBits[3])
          {
            __break(1u);
            goto LABEL_267;
          }
          *(_QWORD *)((char *)v343 + ((v158 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v158;
          v161 = (uint64_t *)(countAndFlagsBits[6] + 16 * v158);
          *v161 = v156;
          v161[1] = v157;
          outlined init with take of Any(&v359, (_OWORD *)(countAndFlagsBits[7] + 32 * v158));
          v162 = countAndFlagsBits[2];
          v163 = __OFADD__(v162, 1);
          v164 = v162 + 1;
          if (v163)
            goto LABEL_268;
          countAndFlagsBits[2] = v164;
        }
        v139 = (unint64_t)v352;
      }
    }
    if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) == 0)
    {
      v109 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
      v111 = v110;
      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
      v112 = (int)POSIXErrorCode.rawValue.getter();
      v113 = objc_allocWithZone((Class)NSError);
      v114 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v115 = (char *)objc_msgSend(v113, sel_initWithDomain_code_userInfo_, v114, v112, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v116 = objc_msgSend(v115, sel_domain);
      v117 = static String._unconditionallyBridgeFromObjectiveC(_:)(v116);
      v119 = v118;

      if (v117 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain")) && v119 == v120)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v221 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v221 & 1) == 0)
          goto LABEL_286;
      }
      v359 = v115;
      lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
      AnyHashable.init<A>(_:)();
      specialized Dictionary.subscript.setter((uint64_t)&v362, (uint64_t)v109, v111);
      v76 = 4;
      switch(v63)
      {
        case 1:
        case 13:
          v76 = 513;
          break;
        case 2:
          goto LABEL_35;
        case 17:
          v76 = 516;
          break;
        case 28:
        case 69:
          v76 = 640;
          break;
        case 30:
          v76 = 642;
          break;
        case 63:
          v76 = 514;
          break;
        default:
          goto LABEL_34;
      }
      goto LABEL_35;
    }
LABEL_292:
    *(_QWORD *)&v362 = 0;
    *((_QWORD *)&v362 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v362 = 0xD000000000000014;
    *((_QWORD *)&v362 + 1) = 0x8000000182306980;
    LODWORD(v359) = v63;
    v334._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v334);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x181D09610);
  }
  *(_QWORD *)&v354 = MEMORY[0x1E0DEE9E0];
  v85 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
  v87 = v86;
  v88 = (uint64_t)v344;
  v89 = v340;
  v359 = v344;
  *(_QWORD *)&v360 = v340;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)&v362, (uint64_t)v85, v87);
  v90 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
  v92 = v91;
  URL.init(_fileManagerFailableFileURLWithPath:)(v88, v89, (uint64_t)&v359);
  if (v359)
  {
    v357 = v359;
    v358[0] = v360;
    lazy protocol witness table accessor for type URL and conformance URL();
    AnyHashable.init<A>(_:)();
  }
  else
  {
    v362 = 0u;
    v363 = 0u;
    v364 = 0;
  }
  specialized Dictionary.subscript.setter((uint64_t)&v362, (uint64_t)v90, v92);
  v121 = (_QWORD *)v354;
  v353 = (char *)v354;
  swift_bridgeObjectRetain();
  if (v63 == 102)
  {
LABEL_55:
    v122 = 512;
  }
  else
  {
    if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
      goto LABEL_292;
    v124 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
    v126 = v125;
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
    v127 = (int)POSIXErrorCode.rawValue.getter();
    v128 = objc_allocWithZone((Class)NSError);
    v129 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v130 = (char *)objc_msgSend(v128, sel_initWithDomain_code_userInfo_, v129, v127, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v131 = objc_msgSend(v130, sel_domain);
    v132 = static String._unconditionallyBridgeFromObjectiveC(_:)(v131);
    v134 = v133;

    if (v132 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain")) && v134 == v135)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v222 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v222 & 1) == 0)
        goto LABEL_287;
    }
    v359 = v130;
    lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v362, (uint64_t)v124, v126);
    v122 = 4;
    switch(v63)
    {
      case 1:
      case 13:
        v122 = 513;
        break;
      case 2:
        break;
      case 17:
        v122 = 516;
        break;
      case 28:
      case 69:
        v122 = 640;
        break;
      case 30:
        v122 = 642;
        break;
      case 63:
        v122 = 514;
        break;
      default:
        goto LABEL_55;
    }
  }
  v342 = v122;
  a4 = v353;
  v123 = *((_QWORD *)v353 + 2);
  v343 = v121;
  if (v123)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    countAndFlagsBits = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    countAndFlagsBits = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  v175 = *((_QWORD *)a4 + 8);
  v346 = (int64_t)(a4 + 64);
  v176 = -1;
  v177 = -1 << a4[32];
  v340 = ~v177;
  if (-v177 < 64)
    v176 = ~(-1 << -(char)v177);
  v178 = v176 & v175;
  v347 = (unint64_t)(63 - v177) >> 6;
  v179 = &v363;
  object = (_OWORD *)((char *)v358 + 8);
  v30 = (unint64_t)&v360 + 8;
  v344 = (char *)(countAndFlagsBits + 8);
  swift_bridgeObjectRetain();
  v351 = 0;
  v28 = 40;
  v350 = MEMORY[0x1E0DEE9B8] + 8;
  while (1)
  {
    if (v178)
    {
      v352 = (_DWORD *)((v178 - 1) & v178);
      v186 = __clz(__rbit64(v178)) | (v351 << 6);
      goto LABEL_129;
    }
    v187 = v351 + 1;
    if (__OFADD__(v351, 1))
      goto LABEL_271;
    if (v187 >= v347)
      goto LABEL_133;
    v188 = *(_QWORD *)(v346 + 8 * v187);
    v189 = v351 + 1;
    if (!v188)
    {
      v189 = v351 + 2;
      if (v351 + 2 >= v347)
        goto LABEL_133;
      v188 = *(_QWORD *)(v346 + 8 * v189);
      if (!v188)
      {
        v189 = v351 + 3;
        if (v351 + 3 >= v347)
          goto LABEL_133;
        v188 = *(_QWORD *)(v346 + 8 * v189);
        if (!v188)
        {
          v189 = v351 + 4;
          if (v351 + 4 >= v347)
            goto LABEL_133;
          v188 = *(_QWORD *)(v346 + 8 * v189);
          if (!v188)
          {
            v189 = v351 + 5;
            if (v351 + 5 >= v347)
              goto LABEL_133;
            v188 = *(_QWORD *)(v346 + 8 * v189);
            if (!v188)
            {
              v189 = v351 + 6;
              if (v351 + 6 >= v347)
                goto LABEL_133;
              v188 = *(_QWORD *)(v346 + 8 * v189);
              if (!v188)
                break;
            }
          }
        }
      }
    }
LABEL_128:
    v352 = (_DWORD *)((v188 - 1) & v188);
    v186 = __clz(__rbit64(v188)) + (v189 << 6);
    v351 = v189;
LABEL_129:
    v191 = (char **)(*((_QWORD *)a4 + 6) + 16 * v186);
    v193 = *v191;
    v192 = v191[1];
    outlined init with copy of AnyHashable(*((_QWORD *)a4 + 7) + 40 * v186, (uint64_t)v179);
    *(_QWORD *)&v362 = v193;
    *((_QWORD *)&v362 + 1) = v192;
    v194 = v179[1];
    v354 = *v179;
    v355 = v194;
    v356 = *((_QWORD *)v179 + 4);
    v357 = v193;
    *(_QWORD *)&v358[0] = v192;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    v195 = (uint64_t)v357;
    v196 = *(_QWORD *)&v358[0];
    outlined init with take of Any(object, (_OWORD *)v30);
    outlined init with take of Any((_OWORD *)v30, &v361);
    outlined init with take of Any(&v361, &v359);
    v197 = specialized __RawDictionaryStorage.find<A>(_:)(v195, v196);
    v198 = v197;
    if ((v199 & 1) != 0)
    {
      v180 = v179;
      v181 = v30;
      v182 = object;
      v183 = a4;
      v184 = (uint64_t *)(countAndFlagsBits[6] + 16 * v197);
      swift_bridgeObjectRelease();
      *v184 = v195;
      v184[1] = v196;
      a4 = v183;
      object = v182;
      v30 = v181;
      v179 = v180;
      v28 = 40;
      v185 = (_OWORD *)(countAndFlagsBits[7] + 32 * v198);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v185);
      outlined init with take of Any(&v359, v185);
      goto LABEL_106;
    }
    if (countAndFlagsBits[2] >= countAndFlagsBits[3])
    {
LABEL_267:
      __break(1u);
LABEL_268:
      __break(1u);
LABEL_269:
      __break(1u);
LABEL_270:
      __break(1u);
LABEL_271:
      __break(1u);
LABEL_272:
      isStackAllocationSafe = String.UTF8View._foreignCount()();
      goto LABEL_11;
    }
    *(_QWORD *)&v344[(v197 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v197;
    v200 = (uint64_t *)(countAndFlagsBits[6] + 16 * v197);
    *v200 = v195;
    v200[1] = v196;
    outlined init with take of Any(&v359, (_OWORD *)(countAndFlagsBits[7] + 32 * v197));
    v201 = countAndFlagsBits[2];
    v163 = __OFADD__(v201, 1);
    v202 = v201 + 1;
    if (v163)
      goto LABEL_269;
    countAndFlagsBits[2] = v202;
LABEL_106:
    v178 = (unint64_t)v352;
  }
  v190 = v351 + 7;
  if (v351 + 7 >= v347)
    goto LABEL_133;
  v188 = *(_QWORD *)(v346 + 8 * v190);
  if (v188)
  {
    v189 = v351 + 7;
    goto LABEL_128;
  }
  while (1)
  {
    v189 = v190 + 1;
    if (__OFADD__(v190, 1))
      goto LABEL_285;
    if (v189 >= v347)
      break;
    v188 = *(_QWORD *)(v346 + 8 * v189);
    ++v190;
    if (v188)
      goto LABEL_128;
  }
LABEL_133:
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v203 = objc_allocWithZone((Class)NSError);
  v204 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v205 = objc_msgSend(v203, sel_initWithDomain_code_userInfo_, v204, v342, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v206 = objc_msgSend(v205, sel_domain);
  v207 = static String._unconditionallyBridgeFromObjectiveC(_:)(v206);
  v209 = v208;

  if (v207 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) || v209 != v210)
  {
    v212 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v212 & 1) != 0)
      goto LABEL_31;
    __break(1u);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
LABEL_31:
  swift_willThrow();
  swift_willThrow();
LABEL_242:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  return swift_release();
}

id write(buffer:toFileDescriptor:path:parentProgress:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, id a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  id v27;
  id v28;
  ssize_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  Swift::String v33;
  uint64_t v34;
  id v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  id v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  id v68;
  id v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  id v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v83;
  id v84;
  uint64_t v85;
  id v86;
  id v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  char v92;
  uint64_t v93;
  uint64_t v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  uint64_t v100;
  id v101;
  id v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  id v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  _OWORD *v111;
  _OWORD *v112;
  uint64_t v113;
  _OWORD *v114;
  _OWORD *v115;
  uint64_t v116;
  uint64_t *v117;
  _OWORD *v118;
  unint64_t v119;
  int64_t v120;
  unint64_t v121;
  int64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  char v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  id v134;
  uint64_t v135;
  id v136;
  id v137;
  id v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  __int128 *v147;
  _OWORD *v148;
  _OWORD *v149;
  __int128 *v150;
  _OWORD *v151;
  _OWORD *v152;
  uint64_t v153;
  uint64_t *v154;
  _OWORD *v155;
  unint64_t v156;
  int64_t v157;
  unint64_t v158;
  int64_t v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  char v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  id v171;
  uint64_t v172;
  id v173;
  id v174;
  id v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char v180;
  id v181;
  uint64_t v182;
  uint64_t v183;
  id v184;
  uint64_t v185;
  uint64_t v186;
  char v187;
  char v188;
  id v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  id v193;
  uint64_t v194;
  id v195;
  id v196;
  id v197;
  uint64_t v198;
  uint64_t v199;
  id v200;
  uint64_t v201;
  uint64_t v202;
  id v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  id v207;
  uint64_t v208;
  id v209;
  id v210;
  id v211;
  uint64_t v212;
  uint64_t v213;
  id v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  _OWORD *v219;
  _OWORD *v220;
  uint64_t v221;
  _OWORD *v222;
  _OWORD *v223;
  uint64_t v224;
  uint64_t *v225;
  _OWORD *v226;
  unint64_t v227;
  int64_t v228;
  unint64_t v229;
  int64_t v230;
  uint64_t v231;
  uint64_t *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  unint64_t v237;
  char v238;
  uint64_t *v239;
  uint64_t v240;
  uint64_t v241;
  id v242;
  uint64_t v243;
  id v244;
  id v245;
  id v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  char v251;
  char v252;
  char v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  __int128 *v257;
  _OWORD *v258;
  _OWORD *v259;
  __int128 *v260;
  _OWORD *v261;
  _OWORD *v262;
  uint64_t v263;
  uint64_t *v264;
  _OWORD *v265;
  unint64_t v266;
  int64_t v267;
  unint64_t v268;
  int64_t v269;
  uint64_t v270;
  uint64_t *v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  char v275;
  uint64_t *v276;
  uint64_t v277;
  uint64_t v278;
  id v279;
  uint64_t v280;
  id v281;
  id v282;
  id v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  char v288;
  Swift::String v289;
  int v290;
  uint64_t v291;
  void *v292;
  void *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  id v299;
  uint64_t v300;
  char v301;
  int64_t v302;
  int64_t v303;
  int64_t v304;
  int64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  int __fda[2];
  int __fdb[2];
  int __fdc[2];
  int __fdd[2];
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  _QWORD v323[4];
  Swift::String v324;
  _QWORD v325[4];
  _OWORD v326[2];
  __int128 v327;
  __int128 v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;

  v6 = v5;
  v7 = (uint64_t)a5;
  v8 = a2;
  v10 = *(void **)a4;
  v296 = *(_QWORD *)(a4 + 16);
  v297 = *(_QWORD *)(a4 + 8);
  v11 = *(_BYTE *)(a4 + 24);
  v12 = a2 - a1;
  if (a1)
    v13 = a2 - a1;
  else
    v13 = 0;
  if (a5)
    objc_msgSend(a5, sel_becomeCurrentWithPendingUnitCount_, v13);
  v299 = (id)v7;
  if (v13 < 1)
  {
LABEL_59:
    if (!a1 || v8 == a1 || (fsync(a3) & 0x80000000) == 0)
      return objc_msgSend(v299, sel_resignCurrent);
    LODWORD(v6) = MEMORY[0x186DA4118]();
    if ((v11 & 1) != 0)
    {
      v321 = MEMORY[0x1E0DEE9E0];
      v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
      v54 = v53;
      v325[0] = v296;
      lazy protocol witness table accessor for type URL and conformance URL();
      v293 = v10;
      v55 = v10;
      swift_retain_n();
      swift_retain_n();
      v56 = v55;
      AnyHashable.init<A>(_:)();
      specialized Dictionary.subscript.setter((uint64_t)&v327, (uint64_t)v52, v54);
      v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
      v59 = v58;
      *(_QWORD *)&v327 = v56;
      *((_QWORD *)&v327 + 1) = v297;
      *(_QWORD *)&v328 = v296;
      v324 = URL.path(percentEncoded:)(0);
      AnyHashable.init<A>(_:)();
      specialized Dictionary.subscript.setter((uint64_t)&v327, (uint64_t)v57, v59);
      v330 = v321;
      swift_bridgeObjectRetain();
      if ((_DWORD)v6 == 102)
      {
LABEL_72:
        v60 = 512;
      }
      else
      {
        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
          goto LABEL_331;
        v189 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
        v191 = v190;
        static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
        v192 = (int)POSIXErrorCode.rawValue.getter();
        v193 = objc_allocWithZone((Class)NSError);
        v194 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v195 = objc_msgSend(v193, sel_initWithDomain_code_userInfo_, v194, v192, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v196 = objc_msgSend(v195, sel_domain);
        v197 = static String._unconditionallyBridgeFromObjectiveC(_:)(v196);
        v199 = v198;

        v200 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
        v7 = v201;
        if (v197 == v200 && v199 == v201)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          v252 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v252 & 1) == 0)
            goto LABEL_326;
        }
        v324._countAndFlagsBits = (uint64_t)v195;
        lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
        AnyHashable.init<A>(_:)();
        specialized Dictionary.subscript.setter((uint64_t)&v327, (uint64_t)v189, v191);
        v60 = 4;
        switch((int)v6)
        {
          case 1:
          case 13:
            v60 = 513;
            break;
          case 2:
            break;
          case 17:
            v60 = 516;
            break;
          case 28:
          case 69:
            v60 = 640;
            break;
          case 30:
            v60 = 642;
            break;
          case 63:
            v60 = 514;
            break;
          default:
            goto LABEL_72;
        }
      }
      v61 = v330;
      v291 = v60;
      if (*(_QWORD *)(v330 + 16))
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
        v7 = static _DictionaryStorage.allocate(capacity:)();
      }
      else
      {
        v7 = MEMORY[0x1E0DEE9E0];
      }
      v309 = v61 + 64;
      v216 = -1;
      v217 = -1 << *(_BYTE *)(v61 + 32);
      if (-v217 < 64)
        v216 = ~(-1 << -(char)v217);
      v218 = v216 & *(_QWORD *)(v61 + 64);
      v6 = (uint64_t)&v328;
      v219 = v323;
      v220 = v325;
      v304 = (unint64_t)(63 - v217) >> 6;
      swift_bridgeObjectRetain();
      *(_QWORD *)__fdc = 0;
      if (v218)
        goto LABEL_206;
LABEL_207:
      v228 = *(_QWORD *)__fdc + 1;
      if (__OFADD__(*(_QWORD *)__fdc, 1))
        goto LABEL_315;
      if (v228 < v304)
      {
        v229 = *(_QWORD *)(v309 + 8 * v228);
        v230 = *(_QWORD *)__fdc + 1;
        if (v229)
          goto LABEL_226;
        v230 = *(_QWORD *)__fdc + 2;
        if (*(_QWORD *)__fdc + 2 < v304)
        {
          v229 = *(_QWORD *)(v309 + 8 * v230);
          if (v229)
            goto LABEL_226;
          v230 = *(_QWORD *)__fdc + 3;
          if (*(_QWORD *)__fdc + 3 < v304)
          {
            v229 = *(_QWORD *)(v309 + 8 * v230);
            if (v229)
              goto LABEL_226;
            v230 = *(_QWORD *)__fdc + 4;
            if (*(_QWORD *)__fdc + 4 < v304)
            {
              v229 = *(_QWORD *)(v309 + 8 * v230);
              if (v229)
                goto LABEL_226;
              v230 = *(_QWORD *)__fdc + 5;
              if (*(_QWORD *)__fdc + 5 < v304)
              {
                v229 = *(_QWORD *)(v309 + 8 * v230);
                if (v229)
                  goto LABEL_226;
                v230 = *(_QWORD *)__fdc + 6;
                if (*(_QWORD *)__fdc + 6 < v304)
                {
                  v229 = *(_QWORD *)(v309 + 8 * v230);
                  if (v229)
                    goto LABEL_226;
                  v231 = *(_QWORD *)__fdc + 7;
                  if (*(_QWORD *)__fdc + 7 < v304)
                  {
                    v229 = *(_QWORD *)(v309 + 8 * v231);
                    if (!v229)
                    {
                      while (1)
                      {
                        v230 = v231 + 1;
                        if (__OFADD__(v231, 1))
                          goto LABEL_324;
                        if (v230 >= v304)
                          goto LABEL_232;
                        v229 = *(_QWORD *)(v309 + 8 * v230);
                        ++v231;
                        if (v229)
                          goto LABEL_226;
                      }
                    }
                    v230 = *(_QWORD *)__fdc + 7;
LABEL_226:
                    v331 = (v229 - 1) & v229;
                    v227 = __clz(__rbit64(v229)) + (v230 << 6);
                    for (*(_QWORD *)__fdc = v230; ; v227 = __clz(__rbit64(v218)) | (*(_QWORD *)__fdc << 6))
                    {
                      v232 = (uint64_t *)(*(_QWORD *)(v61 + 48) + 16 * v227);
                      v234 = *v232;
                      v233 = v232[1];
                      outlined init with copy of AnyHashable(*(_QWORD *)(v61 + 56) + 40 * v227, v6);
                      *(_QWORD *)&v327 = v234;
                      *((_QWORD *)&v327 + 1) = v233;
                      v322 = v233;
                      swift_bridgeObjectRetain();
                      swift_dynamicCast();
                      v235 = v234;
                      outlined init with take of Any(v219, v220);
                      outlined init with take of Any(v220, v326);
                      outlined init with take of Any(v326, &v324);
                      v236 = specialized __RawDictionaryStorage.find<A>(_:)(v234, v322);
                      v237 = v236;
                      if ((v238 & 1) != 0)
                      {
                        v221 = v6;
                        v222 = v220;
                        v223 = v219;
                        v224 = v61;
                        v225 = (uint64_t *)(*(_QWORD *)(v7 + 48) + 16 * v236);
                        swift_bridgeObjectRelease();
                        *v225 = v235;
                        v225[1] = v322;
                        v61 = v224;
                        v219 = v223;
                        v220 = v222;
                        v6 = v221;
                        v226 = (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v237);
                        __swift_destroy_boxed_opaque_existential_1((uint64_t)v226);
                        outlined init with take of Any(&v324, v226);
                        v218 = v331;
                        if (!v331)
                          goto LABEL_207;
                      }
                      else
                      {
                        if (*(_QWORD *)(v7 + 16) >= *(_QWORD *)(v7 + 24))
                          goto LABEL_310;
                        *(_QWORD *)(v7 + 64 + ((v236 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v236;
                        v239 = (uint64_t *)(*(_QWORD *)(v7 + 48) + 16 * v236);
                        *v239 = v235;
                        v239[1] = v322;
                        outlined init with take of Any(&v324, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v236));
                        v240 = *(_QWORD *)(v7 + 16);
                        v30 = __OFADD__(v240, 1);
                        v241 = v240 + 1;
                        if (v30)
                          goto LABEL_312;
                        *(_QWORD *)(v7 + 16) = v241;
                        v218 = v331;
                        if (!v331)
                          goto LABEL_207;
                      }
LABEL_206:
                      v331 = (v218 - 1) & v218;
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_232:
      outlined consume of Set<A1>.Iterator._Variant<A><A1>();
      swift_bridgeObjectRelease();
      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
      v242 = objc_allocWithZone((Class)NSError);
      v243 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v244 = objc_msgSend(v242, sel_initWithDomain_code_userInfo_, v243, v291, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v245 = objc_msgSend(v244, sel_domain);
      v246 = static String._unconditionallyBridgeFromObjectiveC(_:)(v245);
      v248 = v247;

      if (v246 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) || v248 != v249)
      {
        v251 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of PathOrURL(v293, v297, v296, 1);
        v49 = v299;
        if ((v251 & 1) == 0)
        {
          __break(1u);
          goto LABEL_238;
        }
        goto LABEL_288;
      }
      goto LABEL_238;
    }
    v319 = MEMORY[0x1E0DEE9E0];
    v181 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
    v183 = v182;
    v324._countAndFlagsBits = (uint64_t)v10;
    v324._object = (void *)v297;
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v327, (uint64_t)v181, v183);
    v184 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
    v186 = v185;
    URL.init(_fileManagerFailableFileURLWithPath:)((uint64_t)v10, v297, (uint64_t)&v324);
    if (v324._countAndFlagsBits)
    {
      v323[0] = v325[0];
      lazy protocol witness table accessor for type URL and conformance URL();
      AnyHashable.init<A>(_:)();
    }
    else
    {
      v327 = 0u;
      v328 = 0u;
      v329 = 0;
    }
    specialized Dictionary.subscript.setter((uint64_t)&v327, (uint64_t)v184, v186);
    v330 = v319;
    swift_bridgeObjectRetain();
    v202 = v319;
    if ((_DWORD)v6 != 102)
    {
      if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
        goto LABEL_331;
      v203 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
      v205 = v204;
      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
      v206 = (int)POSIXErrorCode.rawValue.getter();
      v207 = objc_allocWithZone((Class)NSError);
      v208 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v209 = objc_msgSend(v207, sel_initWithDomain_code_userInfo_, v208, v206, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v210 = objc_msgSend(v209, sel_domain);
      v211 = static String._unconditionallyBridgeFromObjectiveC(_:)(v210);
      v213 = v212;

      v214 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
      v7 = v215;
      if (v211 == v214 && v213 == v215)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v253 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v253 & 1) == 0)
          goto LABEL_327;
      }
      v324._countAndFlagsBits = (uint64_t)v209;
      lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
      AnyHashable.init<A>(_:)();
      specialized Dictionary.subscript.setter((uint64_t)&v327, (uint64_t)v203, v205);
      v202 = v330;
    }
    CocoaError.Code.init(fileErrno:reading:)(v6, 0);
    if (*(_QWORD *)(v202 + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v7 = static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      v7 = MEMORY[0x1E0DEE9E0];
    }
    v310 = v202 + 64;
    v254 = -1;
    v255 = -1 << *(_BYTE *)(v202 + 32);
    if (-v255 < 64)
      v254 = ~(-1 << -(char)v255);
    v256 = v254 & *(_QWORD *)(v202 + 64);
    v257 = &v328;
    v258 = v323;
    v259 = v325;
    v305 = (unint64_t)(63 - v255) >> 6;
    swift_bridgeObjectRetain();
    *(_QWORD *)__fdd = 0;
    if (v256)
      goto LABEL_254;
LABEL_255:
    v267 = *(_QWORD *)__fdd + 1;
    if (__OFADD__(*(_QWORD *)__fdd, 1))
      goto LABEL_316;
    if (v267 < v305)
    {
      v268 = *(_QWORD *)(v310 + 8 * v267);
      v269 = *(_QWORD *)__fdd + 1;
      if (v268)
        goto LABEL_274;
      v269 = *(_QWORD *)__fdd + 2;
      if (*(_QWORD *)__fdd + 2 < v305)
      {
        v268 = *(_QWORD *)(v310 + 8 * v269);
        if (v268)
          goto LABEL_274;
        v269 = *(_QWORD *)__fdd + 3;
        if (*(_QWORD *)__fdd + 3 < v305)
        {
          v268 = *(_QWORD *)(v310 + 8 * v269);
          if (v268)
            goto LABEL_274;
          v269 = *(_QWORD *)__fdd + 4;
          if (*(_QWORD *)__fdd + 4 < v305)
          {
            v268 = *(_QWORD *)(v310 + 8 * v269);
            if (v268)
              goto LABEL_274;
            v269 = *(_QWORD *)__fdd + 5;
            if (*(_QWORD *)__fdd + 5 < v305)
            {
              v268 = *(_QWORD *)(v310 + 8 * v269);
              if (v268)
                goto LABEL_274;
              v269 = *(_QWORD *)__fdd + 6;
              if (*(_QWORD *)__fdd + 6 < v305)
              {
                v268 = *(_QWORD *)(v310 + 8 * v269);
                if (v268)
                  goto LABEL_274;
                v270 = *(_QWORD *)__fdd + 7;
                if (*(_QWORD *)__fdd + 7 < v305)
                {
                  v268 = *(_QWORD *)(v310 + 8 * v270);
                  if (!v268)
                  {
                    while (1)
                    {
                      v269 = v270 + 1;
                      if (__OFADD__(v270, 1))
                        goto LABEL_325;
                      if (v269 >= v305)
                        goto LABEL_280;
                      v268 = *(_QWORD *)(v310 + 8 * v269);
                      ++v270;
                      if (v268)
                        goto LABEL_274;
                    }
                  }
                  v269 = *(_QWORD *)__fdd + 7;
LABEL_274:
                  v331 = (v268 - 1) & v268;
                  v266 = __clz(__rbit64(v268)) + (v269 << 6);
                  for (*(_QWORD *)__fdd = v269; ; v266 = __clz(__rbit64(v256)) | (*(_QWORD *)__fdd << 6))
                  {
                    v271 = (uint64_t *)(*(_QWORD *)(v202 + 48) + 16 * v266);
                    v273 = *v271;
                    v272 = v271[1];
                    outlined init with copy of AnyHashable(*(_QWORD *)(v202 + 56) + 40 * v266, (uint64_t)v257);
                    *(_QWORD *)&v327 = v273;
                    *((_QWORD *)&v327 + 1) = v272;
                    swift_bridgeObjectRetain();
                    swift_dynamicCast();
                    outlined init with take of Any(v258, v259);
                    outlined init with take of Any(v259, v326);
                    outlined init with take of Any(v326, &v324);
                    v274 = specialized __RawDictionaryStorage.find<A>(_:)(v273, v272);
                    v6 = v274;
                    if ((v275 & 1) != 0)
                    {
                      v260 = v257;
                      v261 = v259;
                      v262 = v258;
                      v263 = v202;
                      v264 = (uint64_t *)(*(_QWORD *)(v7 + 48) + 16 * v274);
                      swift_bridgeObjectRelease();
                      *v264 = v273;
                      v264[1] = v272;
                      v202 = v263;
                      v258 = v262;
                      v259 = v261;
                      v257 = v260;
                      v265 = (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v6);
                      __swift_destroy_boxed_opaque_existential_1((uint64_t)v265);
                      outlined init with take of Any(&v324, v265);
                      v256 = v331;
                      if (!v331)
                        goto LABEL_255;
                    }
                    else
                    {
                      if (*(_QWORD *)(v7 + 16) >= *(_QWORD *)(v7 + 24))
                        goto LABEL_311;
                      *(_QWORD *)(v7 + 64 + ((v274 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v274;
                      v276 = (uint64_t *)(*(_QWORD *)(v7 + 48) + 16 * v274);
                      *v276 = v273;
                      v276[1] = v272;
                      outlined init with take of Any(&v324, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v274));
                      v277 = *(_QWORD *)(v7 + 16);
                      v30 = __OFADD__(v277, 1);
                      v278 = v277 + 1;
                      if (v30)
                        goto LABEL_313;
                      *(_QWORD *)(v7 + 16) = v278;
                      v256 = v331;
                      if (!v331)
                        goto LABEL_255;
                    }
LABEL_254:
                    v331 = (v256 - 1) & v256;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_280:
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v279 = objc_allocWithZone((Class)NSError);
    v280 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v281 = objc_msgSend(v279, sel_initWithDomain_code_userInfo_, v280, v317, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v282 = objc_msgSend(v281, sel_domain);
    v283 = static String._unconditionallyBridgeFromObjectiveC(_:)(v282);
    v285 = v284;

    if (v283 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) || v285 != v286)
    {
      v288 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v49 = v299;
      if ((v288 & 1) != 0)
        goto LABEL_288;
      __break(1u);
    }
    goto LABEL_286;
  }
  v301 = v11;
  v294 = v8;
  if (!a1)
  {
    v7 = v5;
    v6 = (uint64_t)v10;
    v14 = 0;
    v15 = 0;
    if (!v299)
      goto LABEL_54;
    goto LABEL_11;
  }
  if (v7)
  {
    v7 = v5;
    v6 = (uint64_t)v10;
    v14 = v12;
LABEL_11:
    v300 = v13;
    v16 = (void *)objc_opt_self();
    v17 = objc_msgSend(v16, sel_currentProgress);

    if (v17)
    {
      v18 = v14;
      v19 = v14 / 100;
      if (v14 / 100 <= 4096)
        v19 = 4096;
      v311 = v19;
      v15 = objc_msgSend(v16, sel_progressWithTotalUnitCount_, v14);
    }
    else
    {
      v15 = 0;
      v18 = v14;
      v311 = v14;
    }
    v10 = (void *)v6;
    v6 = v7;
    goto LABEL_18;
  }
  v300 = v13;
  v15 = 0;
  v311 = v12;
  v18 = v12;
LABEL_18:
  if (v18 < 0)
  {
LABEL_318:
    __break(1u);
LABEL_319:
    __break(1u);
    goto LABEL_320;
  }
  v20 = v18;
  v13 = v300;
  if (!v20)
    goto LABEL_53;
  v290 = v6;
  v292 = v10;
  v6 = 0;
  v21 = 0x7FFFFFFFLL;
  v10 = (void *)v311;
  if (v311 < 0x7FFFFFFF)
    v21 = v311;
  v331 = v21;
  v306 = v20;
  v22 = v20;
  while (1)
  {
    if (!v15)
      goto LABEL_27;
    v23 = v15;
    if (objc_msgSend(v23, sel_isCancelled))
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
      v75 = objc_allocWithZone((Class)NSError);
      v76 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v77 = objc_msgSend(v75, sel_initWithDomain_code_userInfo_, v76, 3072, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v27 = objc_msgSend(v77, sel_domain);
      v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      v80 = v79;

      if (v78 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v80 == v81)
      {
        v49 = v299;
      }
      else
      {
        v83 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v49 = v299;
        if ((v83 & 1) != 0)
          goto LABEL_189;
        __break(1u);
LABEL_85:
        static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
        v84 = objc_allocWithZone((Class)NSError);
        v85 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v86 = objc_msgSend(v84, sel_initWithDomain_code_userInfo_, v85, 3072, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v87 = objc_msgSend(v86, sel_domain);
        v88 = static String._unconditionallyBridgeFromObjectiveC(_:)(v87);
        v51 = v89;

        if (v88 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) || v51 != v90)
        {
          v92 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v49 = v299;
          v15 = v27;
          if ((v92 & 1) == 0)
          {
            __break(1u);
            goto LABEL_91;
          }
LABEL_189:
          swift_willThrow();

          return objc_msgSend(v49, sel_resignCurrent);
        }
        v49 = v299;
        v15 = v27;
      }
      swift_bridgeObjectRelease_n();
      goto LABEL_189;
    }

LABEL_27:
    v24 = v331;
    if (v22 < v331)
      v24 = v22;
    if ((uint64_t)v10 <= (uint64_t)0xFFFFFFFF7FFFFFFFLL)
      v24 = 0xFFFFFFFF80000000;
    v7 = v6 + v24;
    if (__OFADD__(v6, v24))
      goto LABEL_304;
    if (v7 < v6)
    {
LABEL_305:
      __break(1u);
LABEL_306:
      __break(1u);
LABEL_307:
      __break(1u);
LABEL_308:
      __break(1u);
LABEL_309:
      __break(1u);
LABEL_310:
      __break(1u);
LABEL_311:
      __break(1u);
LABEL_312:
      __break(1u);
LABEL_313:
      __break(1u);
LABEL_314:
      __break(1u);
LABEL_315:
      __break(1u);
LABEL_316:
      __break(1u);
LABEL_317:
      __break(1u);
      goto LABEL_318;
    }
    if (v15)
    {
      v25 = v15;
      v26 = v13;
      v27 = v25;
      v28 = v25;
      if (objc_msgSend(v28, sel_isCancelled))
        goto LABEL_85;

      v13 = v26;
      v15 = v27;
      v10 = (void *)v311;
    }
    if (v6 < 0 || v13 < v6)
      goto LABEL_306;
    if (!a1)
      goto LABEL_328;
    if (v12 < v6 || v12 < v7)
      goto LABEL_307;
    v29 = write(a3, (const void *)(a1 + v6), v7 - v6);
    if (v29 < (uint64_t)0xFFFFFFFF80000000)
      goto LABEL_55;
    v7 = 0x7FFFFFFFLL;
    if (v29 > 0x7FFFFFFF)
      goto LABEL_51;
    if ((v29 & 0x80000000) != 0)
    {
LABEL_55:
      v32 = MEMORY[0x186DA4118]();
      v33._countAndFlagsBits = 0x6574697277;
      v33._object = (void *)0xE500000000000000;
      logFileIOErrno(_:at:)(v32, v33);
      MEMORY[0x186DA4124](v32);

      v10 = v292;
      v11 = v301;
      goto LABEL_63;
    }
    v7 = v29;
    if ((_DWORD)v29)
    {
LABEL_51:
      v22 = (v22 - v7) & ~((v22 - v7) >> 63);
      if (v15)
      {
        if (__OFSUB__(v306, v22))
          goto LABEL_314;
        objc_msgSend(v15, sel_setCompletedUnitCount_, v306 - v22);
      }
      if ((uint64_t)v10 < (uint64_t)0xFFFFFFFF80000000 || (int)v7 >= (int)v331)
      {
        v30 = __OFADD__(v6, v7);
        v6 += v7;
        if (v30)
          goto LABEL_317;
        if (v12 < v6)
          break;
      }
    }
    if (v22 <= 0)
    {
      LODWORD(v6) = v290;
      v10 = v292;
      v31 = v306;
      goto LABEL_57;
    }
  }
  __break(1u);
LABEL_53:
  v7 = v6;
  v6 = (uint64_t)v10;
LABEL_54:
  v31 = 0;
  v22 = 0;
  v10 = (void *)v6;
  LODWORD(v6) = v7;
LABEL_57:

  v34 = v31 - v22;
  if (__OFSUB__(v31, v22))
    goto LABEL_319;
  v11 = v301;
  v8 = v294;
  if (v34 == v13)
    goto LABEL_59;
LABEL_63:
  LODWORD(v6) = MEMORY[0x186DA4118]();
  if ((v11 & 1) == 0)
  {
    v318 = MEMORY[0x1E0DEE9E0];
    v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
    v48 = v47;
    v324._countAndFlagsBits = (uint64_t)v10;
    v324._object = (void *)v297;
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v327, (uint64_t)v46, v48);
    v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
    v51 = v50;
    URL.init(_fileManagerFailableFileURLWithPath:)((uint64_t)v10, v297, (uint64_t)&v324);
    if (v324._countAndFlagsBits)
    {
      v323[0] = v325[0];
      lazy protocol witness table accessor for type URL and conformance URL();
      AnyHashable.init<A>(_:)();
LABEL_92:
      specialized Dictionary.subscript.setter((uint64_t)&v327, (uint64_t)v49, v51);
      v330 = v318;
      swift_bridgeObjectRetain();
      if ((_DWORD)v6 == 102)
      {
LABEL_93:
        v93 = 512;
      }
      else
      {
        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
          goto LABEL_331;
        v95 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
        v97 = v96;
        static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
        v98 = (int)POSIXErrorCode.rawValue.getter();
        v99 = objc_allocWithZone((Class)NSError);
        v100 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v101 = objc_msgSend(v99, sel_initWithDomain_code_userInfo_, v100, v98, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v102 = objc_msgSend(v101, sel_domain);
        v103 = static String._unconditionallyBridgeFromObjectiveC(_:)(v102);
        v105 = v104;

        v106 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
        v7 = v107;
        if (v103 == v106 && v105 == v107)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          v188 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v188 & 1) == 0)
            goto LABEL_323;
        }
        v324._countAndFlagsBits = (uint64_t)v101;
        lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
        AnyHashable.init<A>(_:)();
        specialized Dictionary.subscript.setter((uint64_t)&v327, (uint64_t)v95, v97);
        v93 = 4;
        switch((int)v6)
        {
          case 1:
          case 13:
            v93 = 513;
            break;
          case 2:
            break;
          case 17:
            v93 = 516;
            break;
          case 28:
          case 69:
            v93 = 640;
            break;
          case 30:
            v93 = 642;
            break;
          case 63:
            v93 = 514;
            break;
          default:
            goto LABEL_93;
        }
      }
      v298 = v93;
      v94 = v330;
      if (*(_QWORD *)(v330 + 16))
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
        v7 = static _DictionaryStorage.allocate(capacity:)();
      }
      else
      {
        v7 = MEMORY[0x1E0DEE9E0];
      }
      v308 = v94 + 64;
      v144 = -1;
      v145 = -1 << *(_BYTE *)(v94 + 32);
      if (-v145 < 64)
        v144 = ~(-1 << -(char)v145);
      v146 = v144 & *(_QWORD *)(v94 + 64);
      v147 = &v328;
      v148 = v323;
      v149 = v325;
      v303 = (unint64_t)(63 - v145) >> 6;
      swift_bridgeObjectRetain();
      *(_QWORD *)__fdb = 0;
      if (v146)
        goto LABEL_145;
LABEL_146:
      v157 = *(_QWORD *)__fdb + 1;
      if (__OFADD__(*(_QWORD *)__fdb, 1))
        goto LABEL_309;
      if (v157 < v303)
      {
        v158 = *(_QWORD *)(v308 + 8 * v157);
        v159 = *(_QWORD *)__fdb + 1;
        if (v158)
          goto LABEL_165;
        v159 = *(_QWORD *)__fdb + 2;
        if (*(_QWORD *)__fdb + 2 < v303)
        {
          v158 = *(_QWORD *)(v308 + 8 * v159);
          if (v158)
            goto LABEL_165;
          v159 = *(_QWORD *)__fdb + 3;
          if (*(_QWORD *)__fdb + 3 < v303)
          {
            v158 = *(_QWORD *)(v308 + 8 * v159);
            if (v158)
              goto LABEL_165;
            v159 = *(_QWORD *)__fdb + 4;
            if (*(_QWORD *)__fdb + 4 < v303)
            {
              v158 = *(_QWORD *)(v308 + 8 * v159);
              if (v158)
                goto LABEL_165;
              v159 = *(_QWORD *)__fdb + 5;
              if (*(_QWORD *)__fdb + 5 < v303)
              {
                v158 = *(_QWORD *)(v308 + 8 * v159);
                if (v158)
                  goto LABEL_165;
                v159 = *(_QWORD *)__fdb + 6;
                if (*(_QWORD *)__fdb + 6 < v303)
                {
                  v158 = *(_QWORD *)(v308 + 8 * v159);
                  if (v158)
                    goto LABEL_165;
                  v160 = *(_QWORD *)__fdb + 7;
                  if (*(_QWORD *)__fdb + 7 < v303)
                  {
                    v158 = *(_QWORD *)(v308 + 8 * v160);
                    if (!v158)
                    {
                      while (1)
                      {
                        v159 = v160 + 1;
                        if (__OFADD__(v160, 1))
                          goto LABEL_321;
                        if (v159 >= v303)
                          goto LABEL_171;
                        v158 = *(_QWORD *)(v308 + 8 * v159);
                        ++v160;
                        if (v158)
                          goto LABEL_165;
                      }
                    }
                    v159 = *(_QWORD *)__fdb + 7;
LABEL_165:
                    v331 = (v158 - 1) & v158;
                    v156 = __clz(__rbit64(v158)) + (v159 << 6);
                    for (*(_QWORD *)__fdb = v159; ; v156 = __clz(__rbit64(v146)) | (*(_QWORD *)__fdb << 6))
                    {
                      v161 = (uint64_t *)(*(_QWORD *)(v94 + 48) + 16 * v156);
                      v163 = *v161;
                      v162 = v161[1];
                      outlined init with copy of AnyHashable(*(_QWORD *)(v94 + 56) + 40 * v156, (uint64_t)v147);
                      *(_QWORD *)&v327 = v163;
                      *((_QWORD *)&v327 + 1) = v162;
                      swift_bridgeObjectRetain();
                      swift_dynamicCast();
                      v6 = v163;
                      v164 = v162;
                      outlined init with take of Any(v148, v149);
                      outlined init with take of Any(v149, v326);
                      outlined init with take of Any(v326, &v324);
                      v165 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v162);
                      v166 = v165;
                      if ((v167 & 1) != 0)
                      {
                        v150 = v147;
                        v151 = v149;
                        v152 = v148;
                        v153 = v94;
                        v154 = (uint64_t *)(*(_QWORD *)(v7 + 48) + 16 * v165);
                        swift_bridgeObjectRelease();
                        *v154 = v6;
                        v154[1] = v164;
                        v94 = v153;
                        v148 = v152;
                        v149 = v151;
                        v147 = v150;
                        v155 = (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v166);
                        __swift_destroy_boxed_opaque_existential_1((uint64_t)v155);
                        outlined init with take of Any(&v324, v155);
                        v146 = v331;
                        if (!v331)
                          goto LABEL_146;
                      }
                      else
                      {
                        if (*(_QWORD *)(v7 + 16) >= *(_QWORD *)(v7 + 24))
                        {
LABEL_301:
                          __break(1u);
LABEL_302:
                          __break(1u);
LABEL_303:
                          __break(1u);
LABEL_304:
                          __break(1u);
                          goto LABEL_305;
                        }
                        *(_QWORD *)(v7 + 64 + ((v165 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v165;
                        v168 = (uint64_t *)(*(_QWORD *)(v7 + 48) + 16 * v165);
                        *v168 = v6;
                        v168[1] = v164;
                        outlined init with take of Any(&v324, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v165));
                        v169 = *(_QWORD *)(v7 + 16);
                        v30 = __OFADD__(v169, 1);
                        v170 = v169 + 1;
                        if (v30)
                          goto LABEL_303;
                        *(_QWORD *)(v7 + 16) = v170;
                        v146 = v331;
                        if (!v331)
                          goto LABEL_146;
                      }
LABEL_145:
                      v331 = (v146 - 1) & v146;
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_171:
      outlined consume of Set<A1>.Iterator._Variant<A><A1>();
      swift_bridgeObjectRelease();
      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
      v171 = objc_allocWithZone((Class)NSError);
      v172 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v173 = objc_msgSend(v171, sel_initWithDomain_code_userInfo_, v172, v298, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v174 = objc_msgSend(v173, sel_domain);
      v175 = static String._unconditionallyBridgeFromObjectiveC(_:)(v174);
      v177 = v176;

      if (v175 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) || v177 != v178)
      {
        v180 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v49 = v299;
        if ((v180 & 1) != 0)
          goto LABEL_288;
        __break(1u);
      }
LABEL_286:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      goto LABEL_287;
    }
LABEL_91:
    v327 = 0u;
    v328 = 0u;
    v329 = 0;
    goto LABEL_92;
  }
  v320 = MEMORY[0x1E0DEE9E0];
  v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
  v38 = v37;
  v325[0] = v296;
  lazy protocol witness table accessor for type URL and conformance URL();
  v293 = v10;
  v39 = v10;
  swift_retain_n();
  swift_retain_n();
  v40 = v39;
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)&v327, (uint64_t)v36, v38);
  v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
  v43 = v42;
  *(_QWORD *)&v327 = v40;
  *((_QWORD *)&v327 + 1) = v297;
  *(_QWORD *)&v328 = v296;
  v324 = URL.path(percentEncoded:)(0);
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)&v327, (uint64_t)v41, v43);
  v330 = v320;
  swift_bridgeObjectRetain();
  if ((_DWORD)v6 == 102)
  {
LABEL_65:
    v44 = 512;
    goto LABEL_66;
  }
  if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
    goto LABEL_331;
  v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
  v64 = v63;
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
  v65 = (int)POSIXErrorCode.rawValue.getter();
  v66 = objc_allocWithZone((Class)NSError);
  v67 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v68 = objc_msgSend(v66, sel_initWithDomain_code_userInfo_, v67, v65, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v69 = objc_msgSend(v68, sel_domain);
  v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
  v72 = v71;

  v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
  v7 = v74;
  if (v70 == v73 && v72 == v74)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_181;
  }
  v187 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v187 & 1) == 0)
    goto LABEL_322;
LABEL_181:
  v324._countAndFlagsBits = (uint64_t)v68;
  lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)&v327, (uint64_t)v62, v64);
  v44 = 4;
  switch((int)v6)
  {
    case 1:
    case 13:
      v44 = 513;
      break;
    case 2:
      break;
    case 17:
      v44 = 516;
      break;
    case 28:
    case 69:
      v44 = 640;
      break;
    case 30:
      v44 = 642;
      break;
    case 63:
      v44 = 514;
      break;
    default:
      goto LABEL_65;
  }
LABEL_66:
  v295 = v44;
  v45 = v330;
  if (*(_QWORD *)(v330 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v7 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v7 = MEMORY[0x1E0DEE9E0];
  }
  v307 = v45 + 64;
  v108 = -1;
  v109 = -1 << *(_BYTE *)(v45 + 32);
  if (-v109 < 64)
    v108 = ~(-1 << -(char)v109);
  v110 = v108 & *(_QWORD *)(v45 + 64);
  v6 = (uint64_t)&v328;
  v111 = v323;
  v112 = v325;
  v302 = (unint64_t)(63 - v109) >> 6;
  swift_bridgeObjectRetain();
  *(_QWORD *)__fda = 0;
  if (v110)
    goto LABEL_106;
LABEL_107:
  v120 = *(_QWORD *)__fda + 1;
  if (__OFADD__(*(_QWORD *)__fda, 1))
    goto LABEL_308;
  if (v120 >= v302)
    goto LABEL_132;
  v121 = *(_QWORD *)(v307 + 8 * v120);
  v122 = *(_QWORD *)__fda + 1;
  if (v121)
    goto LABEL_126;
  v122 = *(_QWORD *)__fda + 2;
  if (*(_QWORD *)__fda + 2 >= v302)
    goto LABEL_132;
  v121 = *(_QWORD *)(v307 + 8 * v122);
  if (v121)
    goto LABEL_126;
  v122 = *(_QWORD *)__fda + 3;
  if (*(_QWORD *)__fda + 3 >= v302)
    goto LABEL_132;
  v121 = *(_QWORD *)(v307 + 8 * v122);
  if (v121)
    goto LABEL_126;
  v122 = *(_QWORD *)__fda + 4;
  if (*(_QWORD *)__fda + 4 >= v302)
    goto LABEL_132;
  v121 = *(_QWORD *)(v307 + 8 * v122);
  if (v121)
    goto LABEL_126;
  v122 = *(_QWORD *)__fda + 5;
  if (*(_QWORD *)__fda + 5 >= v302)
    goto LABEL_132;
  v121 = *(_QWORD *)(v307 + 8 * v122);
  if (v121)
    goto LABEL_126;
  v122 = *(_QWORD *)__fda + 6;
  if (*(_QWORD *)__fda + 6 >= v302)
    goto LABEL_132;
  v121 = *(_QWORD *)(v307 + 8 * v122);
  if (v121)
  {
LABEL_126:
    v331 = (v121 - 1) & v121;
    v119 = __clz(__rbit64(v121)) + (v122 << 6);
    for (*(_QWORD *)__fda = v122; ; v119 = __clz(__rbit64(v110)) | (*(_QWORD *)__fda << 6))
    {
      v124 = (uint64_t *)(*(_QWORD *)(v45 + 48) + 16 * v119);
      v126 = *v124;
      v125 = v124[1];
      outlined init with copy of AnyHashable(*(_QWORD *)(v45 + 56) + 40 * v119, v6);
      *(_QWORD *)&v327 = v126;
      *((_QWORD *)&v327 + 1) = v125;
      v322 = v125;
      swift_bridgeObjectRetain();
      swift_dynamicCast();
      v127 = v126;
      outlined init with take of Any(v111, v112);
      outlined init with take of Any(v112, v326);
      outlined init with take of Any(v326, &v324);
      v128 = specialized __RawDictionaryStorage.find<A>(_:)(v126, v322);
      v129 = v128;
      if ((v130 & 1) != 0)
      {
        v113 = v6;
        v114 = v112;
        v115 = v111;
        v116 = v45;
        v117 = (uint64_t *)(*(_QWORD *)(v7 + 48) + 16 * v128);
        swift_bridgeObjectRelease();
        *v117 = v127;
        v117[1] = v322;
        v45 = v116;
        v111 = v115;
        v112 = v114;
        v6 = v113;
        v118 = (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v129);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v118);
        outlined init with take of Any(&v324, v118);
        v110 = v331;
        if (!v331)
          goto LABEL_107;
      }
      else
      {
        if (*(_QWORD *)(v7 + 16) >= *(_QWORD *)(v7 + 24))
        {
          __break(1u);
          goto LABEL_301;
        }
        *(_QWORD *)(v7 + 64 + ((v128 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v128;
        v131 = (uint64_t *)(*(_QWORD *)(v7 + 48) + 16 * v128);
        *v131 = v127;
        v131[1] = v322;
        outlined init with take of Any(&v324, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v128));
        v132 = *(_QWORD *)(v7 + 16);
        v30 = __OFADD__(v132, 1);
        v133 = v132 + 1;
        if (v30)
          goto LABEL_302;
        *(_QWORD *)(v7 + 16) = v133;
        v110 = v331;
        if (!v331)
          goto LABEL_107;
      }
LABEL_106:
      v331 = (v110 - 1) & v110;
    }
  }
  v123 = *(_QWORD *)__fda + 7;
  if (*(_QWORD *)__fda + 7 < v302)
  {
    v121 = *(_QWORD *)(v307 + 8 * v123);
    if (v121)
    {
      v122 = *(_QWORD *)__fda + 7;
      goto LABEL_126;
    }
    while (1)
    {
      v122 = v123 + 1;
      if (__OFADD__(v123, 1))
        break;
      if (v122 >= v302)
        goto LABEL_132;
      v121 = *(_QWORD *)(v307 + 8 * v122);
      ++v123;
      if (v121)
        goto LABEL_126;
    }
LABEL_320:
    __break(1u);
LABEL_321:
    __break(1u);
LABEL_322:
    __break(1u);
LABEL_323:
    __break(1u);
LABEL_324:
    __break(1u);
LABEL_325:
    __break(1u);
LABEL_326:
    __break(1u);
LABEL_327:
    __break(1u);
LABEL_328:
    if (!v7)
      __break(1u);
    __break(1u);
LABEL_331:
    *(_QWORD *)&v327 = 0;
    *((_QWORD *)&v327 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v327 = 0xD000000000000014;
    *((_QWORD *)&v327 + 1) = 0x8000000182306980;
    LODWORD(v324._countAndFlagsBits) = v6;
    v289._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v289);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x181D0BFA4);
  }
LABEL_132:
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v134 = objc_allocWithZone((Class)NSError);
  v135 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v136 = objc_msgSend(v134, sel_initWithDomain_code_userInfo_, v135, v295, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v137 = objc_msgSend(v136, sel_domain);
  v138 = static String._unconditionallyBridgeFromObjectiveC(_:)(v137);
  v140 = v139;

  if (v138 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v140 == v141)
  {
LABEL_238:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    outlined consume of PathOrURL(v293, v297, v296, 1);
LABEL_287:
    v49 = v299;
    goto LABEL_288;
  }
  v143 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of PathOrURL(v293, v297, v296, 1);
  v49 = v299;
  if ((v143 & 1) == 0)
  {
    __break(1u);
    goto LABEL_238;
  }
LABEL_288:
  swift_willThrow();
  return objc_msgSend(v49, sel_resignCurrent);
}

uint64_t @objc static NSData._writeData(toPath:data:options:reportProgress:)(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, int a6)
{
  id v9;
  unint64_t v10;
  unint64_t v11;
  id v12;

  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v11 = v10;
  v12 = a4;
  specialized static NSData._writeData(toPath:data:options:reportProgress:)((uint64_t)v9, v11, v12, a5, a6);
  swift_bridgeObjectRelease();

  return 1;
}

uint64_t @objc static NSData._writeData(toPath:data:options:stringEncodingAttributeData:reportProgress:)(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void *a6, int a7)
{
  id v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  unint64_t v17;
  unint64_t v18;

  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v13 = v12;
  v14 = a4;
  v15 = a6;
  v16 = specialized Data.init(referencing:)(v15);
  v18 = v17;

  specialized static NSData._writeData(toPath:data:options:stringEncodingAttributeData:reportProgress:)(v11, v13, v14, a5, (uint64_t)v16, v18, a7);
  outlined consume of Data._Representation((uint64_t)v16, v18);
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t closure #1 in writeToFile(path:data:options:attributes:reportProgress:)(uint64_t a1, int64_t a2, void *a3, int64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  __CFString *v9;
  uint64_t v10;
  id v14;
  uint64_t *v16;
  Swift::String v17;
  uint64_t countAndFlagsBits;
  unint64_t object;
  uint64_t v20;
  unint64_t v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  Swift::String v32;
  Swift::String v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __CFString *v37;
  _QWORD *v38;
  unint64_t v39;
  Swift::Int v40;
  unint64_t v41;
  unint64_t v42;
  Swift::String v43;
  id v44;
  void *v45;
  unint64_t v46;
  uint64_t *v47;
  Swift::Int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t isStackAllocationSafe;
  uint64_t v52;
  const char *v53;
  char v54;
  char v55;
  __CFString *v56;
  id v57;
  uint64_t v58;
  id v59;
  id v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char v66;
  char v67;
  id v68;
  uint64_t v69;
  id v70;
  id v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  _QWORD v77[4];
  uint64_t v78;
  uint64_t *v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  __CFString *v84;
  int v85;
  uint64_t v86;
  unint64_t v87;
  char v88;
  Swift::String v89;
  uint64_t v90;
  BOOL v91;
  uint64_t v92;

  v10 = a8;
  v92 = *MEMORY[0x1E0C80C00];
  LODWORD(v14) = a6 & 1;
  if ((a7 & 1) == 0)
  {
    v89._countAndFlagsBits = (uint64_t)a3;
    v89._object = (void *)a4;
    v90 = a5;
    v91 = (_DWORD)v14 != 0;
    return writeToFileNoAux(path:buffer:options:attributes:reportProgress:)((void **)&v89, a1, a2, a7, a8, a9 & 1);
  }
  v80 = a9;
  v81 = a2;
  v82 = a1;
  v85 = a6 & 1;
  v83 = (char *)a7;
  v84 = v9;
  if ((a6 & 1) == 0)
  {
    outlined copy of PathOrURL(a3, a4, a5, 0);
    outlined copy of PathOrURL(a3, a4, a5, 0);
    swift_bridgeObjectRetain();
    v20 = (uint64_t)a3;
    v21 = a4;
    if ((a4 & 0x1000000000000000) == 0)
      goto LABEL_32;
    goto LABEL_58;
  }
  outlined copy of PathOrURL(a3, a4, a5, 1);
  swift_retain();
  v14 = a3;
  swift_retain();
  outlined copy of PathOrURL(a3, a4, a5, 1);
  outlined copy of PathOrURL(a3, a4, a5, 1);
  swift_bridgeObjectRetain();
  if ((_foundation_swift_url_feature_enabled() & 1) != 0)
  {
    v90 = a5;
    v16 = (uint64_t *)v14;
    swift_retain();
    swift_retain();
    v17 = URL.path(percentEncoded:)(1);
    countAndFlagsBits = v17._countAndFlagsBits;
    v89 = v17;
    swift_bridgeObjectRetain();
    v79 = v16;
    if (String.count.getter() <= 1)
    {
      object = (unint64_t)v17._object;
    }
    else
    {
      object = (unint64_t)v17._object;
      if ((specialized BidirectionalCollection.last.getter(v17._countAndFlagsBits, (unint64_t)v17._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        countAndFlagsBits = v89._countAndFlagsBits;
        object = (unint64_t)v89._object;
      }
    }
    v86 = Set.init(minimumCapacity:)();
    v34 = specialized Set._Variant.insert(_:)(&v88, 0x2FuLL);
    v35 = v86;
    v36 = HIBYTE(object) & 0xF;
    if ((object & 0x2000000000000000) == 0)
      v36 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (v36)
    {
      v78 = v10;
      v86 = countAndFlagsBits;
      v87 = object;
      MEMORY[0x1E0C80A78](v34);
      v77[2] = &v86;
      v77[3] = v35;
      swift_bridgeObjectRetain();
      v37 = v84;
      v38 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v77, countAndFlagsBits, object);
      v84 = v37;
      if (v39 == 1)
      {
        v40 = v86;
        v41 = v87;
        swift_bridgeObjectRetain();
        v20 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v40, v41, v35);
        v21 = v42;
        swift_bridgeObjectRelease();
      }
      else
      {
        v20 = (uint64_t)v38;
        v21 = v39;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v10 = v78;
      v47 = v79;
      if (!v21)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of PathOrURL(a3, a4, a5, 1);
        outlined consume of PathOrURL(a3, a4, a5, 1);
        swift_release();
        swift_release();

        v20 = 0;
        v21 = 0xE000000000000000;
LABEL_31:
        swift_release();
        swift_release();

        LOBYTE(v14) = v85;
        if ((v21 & 0x1000000000000000) == 0)
          goto LABEL_32;
LABEL_58:
        v48 = String.UTF8View._foreignCount()();
        goto LABEL_35;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      v20 = 0;
      v21 = 0xE000000000000000;
      v47 = v79;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of PathOrURL(a3, a4, a5, 1);
    outlined consume of PathOrURL(a3, a4, a5, 1);
    swift_release();
    swift_release();

    goto LABEL_31;
  }
  v22 = objc_msgSend(v14, sel__parameterString);
  if (v22)
  {
    v23 = v22;
    v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v26 = v25;

    if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
      && (v27 = objc_msgSend(v14, sel_path)) != 0)
    {
      v28 = v27;
      v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      v78 = v10;
      v31 = v30;

      v89._countAndFlagsBits = (uint64_t)v29;
      v89._object = v31;
      swift_bridgeObjectRetain();
      v32._countAndFlagsBits = 59;
      v32._object = (void *)0xE100000000000000;
      String.append(_:)(v32);
      v10 = v78;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v33._countAndFlagsBits = (uint64_t)v24;
      v33._object = v26;
      String.append(_:)(v33);
      swift_bridgeObjectRelease();
    }
    else
    {
      v89._countAndFlagsBits = 59;
      v89._object = (void *)0xE100000000000000;
      v43._countAndFlagsBits = (uint64_t)v24;
      v43._object = v26;
      String.append(_:)(v43);
    }
    swift_bridgeObjectRelease();
    outlined consume of PathOrURL(a3, a4, a5, 1);
    outlined consume of PathOrURL(a3, a4, a5, 1);
    swift_release();
    swift_release();

    v20 = v89._countAndFlagsBits;
    v21 = (unint64_t)v89._object;
    LOBYTE(v14) = v85;
    if (((uint64_t)v89._object & 0x1000000000000000) == 0)
      goto LABEL_32;
    goto LABEL_58;
  }
  v44 = objc_msgSend(v14, sel_path);
  if (v44)
  {
    v45 = v44;
    v20 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
    v21 = v46;

    outlined consume of PathOrURL(a3, a4, a5, 1);
    outlined consume of PathOrURL(a3, a4, a5, 1);
    swift_release();
    swift_release();

    LOBYTE(v14) = v85;
    if ((v21 & 0x1000000000000000) == 0)
      goto LABEL_32;
    goto LABEL_58;
  }
  outlined consume of PathOrURL(a3, a4, a5, 1);
  outlined consume of PathOrURL(a3, a4, a5, 1);
  swift_release();
  swift_release();

  v20 = 0;
  v21 = 0xE000000000000000;
  LOBYTE(v14) = v85;
LABEL_32:
  if ((v21 & 0x2000000000000000) != 0)
    v48 = HIBYTE(v21) & 0xF;
  else
    v48 = v20 & 0xFFFFFFFFFFFFLL;
LABEL_35:
  v49 = 3 * v48;
  if ((unsigned __int128)(v48 * (__int128)3) >> 64 != (3 * v48) >> 63)
  {
    __break(1u);
    goto LABEL_60;
  }
  if (v49 < -1)
  {
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
  }
  v50 = v49 + 1;
  outlined copy of PathOrURL(a3, a4, a5, (char)v14);
  isStackAllocationSafe = swift_bridgeObjectRetain();
  if (v49 >= 1024)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      v14 = (id)swift_slowAlloc();
      swift_bridgeObjectRetain();
      String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v14, v49 + 1, 1, v20, v21);
      v66 = v65;
      swift_bridgeObjectRelease();
      if ((v66 & 1) != 0)
      {
        v78 = v10;
        v84 = CFSTR("NSCocoaErrorDomain");
        static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
        v68 = objc_allocWithZone((Class)NSError);
        v69 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v70 = objc_msgSend(v68, sel_initWithDomain_code_userInfo_, v69, 514, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v71 = objc_msgSend(v70, sel_domain);
        v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(v71);
        v74 = v73;

        if (v72 == static String._unconditionallyBridgeFromObjectiveC(_:)(v84) && v74 == v75)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          v76 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v76 & 1) == 0)
            goto LABEL_62;
        }
        swift_willThrow();
      }
      else
      {
        closure #1 in writeToFileAux(path:buffer:options:attributes:reportProgress:)((const char *)v14, (char *)a3, (std::error_category *)a4, a5, v85, v83, v80 & 1, v82, v81, v10);
      }
      MEMORY[0x186DA9E78](v14, -1, -1);
      LOBYTE(v14) = v85;
      goto LABEL_56;
    }
  }
  v79 = &v78;
  MEMORY[0x1E0C80A78](isStackAllocationSafe);
  v53 = (char *)&v78 - v52;
  swift_bridgeObjectRetain();
  String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v53, v50, 1, v20, v21);
  v55 = v54;
  swift_bridgeObjectRelease();
  if ((v55 & 1) == 0)
  {
    v56 = v84;
    closure #1 in writeToFileAux(path:buffer:options:attributes:reportProgress:)(v53, (char *)a3, (std::error_category *)a4, a5, (char)v14, v83, v80 & 1, v82, v81, v10);
    if (!v56)
      goto LABEL_56;
    goto LABEL_49;
  }
  v78 = v10;
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v57 = objc_allocWithZone((Class)NSError);
  v58 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v59 = objc_msgSend(v57, sel_initWithDomain_code_userInfo_, v58, 514, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v60 = objc_msgSend(v59, sel_domain);
  v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
  v63 = v62;

  if (v61 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) || v63 != v64)
  {
    v67 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v67 & 1) != 0)
      goto LABEL_48;
    goto LABEL_61;
  }
  swift_bridgeObjectRelease_n();
LABEL_48:
  swift_willThrow();
  LOBYTE(v14) = v85;
LABEL_49:
  swift_willThrow();
LABEL_56:
  outlined consume of PathOrURL(a3, a4, a5, (char)v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of PathOrURL(a3, a4, a5, (char)v14);
  return swift_bridgeObjectRelease();
}

uint64_t writeToFileNoAux(path:buffer:options:attributes:reportProgress:)(void **a1, uint64_t a2, int64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v6;
  void *v7;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  char *v15;
  Swift::String v16;
  uint64_t countAndFlagsBits;
  void *v18;
  unint64_t object;
  uint64_t v20;
  unint64_t v21;
  Swift::Int isStackAllocationSafe;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char v27;
  char v28;
  int v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  uint64_t v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  void *v44;
  id v45;
  void *v46;
  void *v47;
  id v48;
  void *v49;
  void *v50;
  id v51;
  void *v52;
  void *v53;
  Swift::String v54;
  Swift::String v55;
  uint64_t v56;
  void *v57;
  char *v58;
  char v59;
  char v60;
  int v61;
  void *v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  id v72;
  void *v73;
  void *v74;
  id v75;
  uint64_t v76;
  id v77;
  id v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  Swift::Int32 v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  id v89;
  id v90;
  uint64_t v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  Swift::String v95;
  uint64_t v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  uint64_t v102;
  char *v103;
  id v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  unint64_t v113;
  void *v114;
  Swift::Int v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  id v120;
  uint64_t v121;
  id v122;
  id v123;
  id v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  id v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  uint64_t v132;
  id v133;
  id v134;
  id v135;
  uint64_t v136;
  uint64_t v137;
  Swift::String v138;
  uint64_t v139;
  Swift::Int32 v140;
  id v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  id v145;
  uint64_t v146;
  char *v147;
  id v148;
  id v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  Swift::String v153;
  id v154;
  void *v155;
  char v156;
  void *v157;
  unint64_t v158;
  void *v159;
  uint64_t v160;
  id v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  int64_t v166;
  int64_t v167;
  void *v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  unint64_t v173;
  BOOL v174;
  unint64_t v175;
  int64_t v176;
  void *v177;
  uint64_t v178;
  id v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  id v183;
  uint64_t v184;
  uint64_t v185;
  char v186;
  int64_t v187;
  id v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  id v193;
  uint64_t v194;
  uint64_t v195;
  Swift::Int32 v196;
  id v197;
  uint64_t v198;
  uint64_t v199;
  void *v200;
  uint64_t v201;
  id v202;
  id v203;
  uint64_t v204;
  id v205;
  uint64_t v206;
  uint64_t v207;
  Swift::String v208;
  uint64_t v209;
  id v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  id v214;
  uint64_t v215;
  char *v216;
  id v217;
  id v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  id v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  id v227;
  uint64_t v228;
  char *v229;
  id v230;
  id v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  id v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  id v239;
  uint64_t v240;
  uint64_t v241;
  char v242;
  id v243;
  char v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  __int128 *v249;
  _OWORD *v250;
  char *v251;
  uint64_t v252;
  __int128 *v253;
  _OWORD *v254;
  uint64_t v255;
  uint64_t *v256;
  _OWORD *v257;
  unint64_t j;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t *v262;
  void *v263;
  uint64_t v264;
  __int128 v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  unint64_t v269;
  char v270;
  uint64_t v271;
  uint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  id v275;
  uint64_t v276;
  id v277;
  id v278;
  id v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  char v284;
  char v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t v289;
  __int128 *v290;
  _OWORD *v291;
  _OWORD *v292;
  uint64_t v293;
  __int128 *v294;
  _OWORD *v295;
  char *v296;
  uint64_t *v297;
  _OWORD *v298;
  unint64_t k;
  uint64_t v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t *v303;
  void *v304;
  uint64_t v305;
  __int128 v306;
  uint64_t v307;
  uint64_t v308;
  unint64_t v309;
  unint64_t v310;
  char v311;
  uint64_t v312;
  uint64_t *v313;
  uint64_t v314;
  uint64_t v315;
  id v316;
  uint64_t v317;
  id v318;
  id v319;
  id v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  char v325;
  uint64_t v326;
  void *v327;
  id v328;
  void *v329;
  id v330;
  uint64_t v331;
  id v332;
  id v333;
  id v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t v338;
  uint64_t v339;
  id v340;
  uint64_t v341;
  uint64_t v342;
  void *v343;
  id v344;
  id v345;
  id v346;
  uint64_t v347;
  uint64_t v348;
  Swift::String v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  unint64_t v354;
  int64_t v355;
  int64_t v356;
  unint64_t v357;
  unint64_t v358;
  uint64_t *v359;
  uint64_t v360;
  unint64_t v361;
  void *v362;
  int64_t v363;
  unint64_t v364;
  int64_t v365;
  uint64_t result;
  id v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  id v371;
  uint64_t v372;
  uint64_t v373;
  char v374;
  _QWORD *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  unint64_t v379;
  __int128 *v380;
  _OWORD *v381;
  char *v382;
  __int128 *v383;
  _OWORD *v384;
  uint64_t v385;
  uint64_t *v386;
  _OWORD *v387;
  unint64_t v388;
  int64_t v389;
  unint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t *v393;
  void *v394;
  uint64_t v395;
  __int128 v396;
  uint64_t v397;
  uint64_t v398;
  unint64_t v399;
  unint64_t v400;
  char v401;
  uint64_t *v402;
  uint64_t v403;
  uint64_t v404;
  id v405;
  uint64_t v406;
  id v407;
  id v408;
  id v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  char v414;
  char *v415;
  id v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  id v420;
  uint64_t v421;
  char *v422;
  id v423;
  id v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  char v428;
  char v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  unint64_t v433;
  __int128 *v434;
  _OWORD *v435;
  char *v436;
  uint64_t v437;
  __int128 *v438;
  _OWORD *v439;
  uint64_t v440;
  uint64_t *v441;
  _OWORD *v442;
  unint64_t m;
  uint64_t v444;
  unint64_t v445;
  uint64_t v446;
  uint64_t *v447;
  void *v448;
  uint64_t v449;
  __int128 v450;
  uint64_t v451;
  uint64_t v452;
  unint64_t v453;
  unint64_t v454;
  char v455;
  uint64_t v456;
  uint64_t *v457;
  uint64_t v458;
  uint64_t v459;
  id v460;
  uint64_t v461;
  id v462;
  id v463;
  id v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  char v469;
  char v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  unint64_t v474;
  __int128 *v475;
  _OWORD *v476;
  char *v477;
  uint64_t v478;
  __int128 *v479;
  _OWORD *v480;
  char *v481;
  uint64_t *v482;
  _OWORD *v483;
  unint64_t n;
  uint64_t v485;
  unint64_t v486;
  uint64_t v487;
  uint64_t *v488;
  void *v489;
  uint64_t v490;
  __int128 v491;
  uint64_t v492;
  uint64_t v493;
  unint64_t v494;
  unint64_t v495;
  char v496;
  uint64_t v497;
  uint64_t *v498;
  uint64_t v499;
  uint64_t v500;
  id v501;
  uint64_t v502;
  id v503;
  id v504;
  id v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  char v510;
  Swift::String v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  id v518;
  id v519;
  unint64_t v520;
  unint64_t v521;
  uint64_t *v522;
  char *v523;
  char *v524;
  char *v525;
  _OWORD *v526;
  int64_t v527;
  int64_t v528;
  id v529;
  uint64_t i;
  uint64_t v531;
  uint64_t v532;
  char *v533;
  uint64_t v534;
  __int128 v535;
  __int128 v536;
  uint64_t v537;
  char *v538;
  _OWORD v539[2];
  char *v540;
  _OWORD v541[2];
  _OWORD v542[2];
  Swift::String v543;
  __int128 v544;
  uint64_t v545;
  uint64_t v546;

  v7 = v6;
  LODWORD(v529) = a6;
  v531 = a4;
  v532 = a5;
  i = a2;
  v546 = *MEMORY[0x1E0C80C00];
  v10 = *a1;
  v9 = (unint64_t)a1[1];
  v11 = (uint64_t)a1[2];
  LODWORD(v12) = *((unsigned __int8 *)a1 + 24);
  v525 = (char *)*a1;
  v526 = (_OWORD *)v11;
  if ((v12 & 1) != 0)
  {
    swift_retain_n();
    v13 = v10;
    swift_retain_n();
    v14 = v13;
    if ((_foundation_swift_url_feature_enabled() & 1) != 0)
    {
      LODWORD(v528) = (_DWORD)v12;
      *(_QWORD *)&v544 = v11;
      v15 = (char *)v14;
      v521 = v9;
      swift_retain();
      swift_retain();
      v16 = URL.path(percentEncoded:)(1);
      countAndFlagsBits = v16._countAndFlagsBits;
      v543 = v16;
      swift_bridgeObjectRetain();
      v527 = a3;
      v18 = v7;
      if (String.count.getter() <= 1)
      {
        object = (unint64_t)v16._object;
      }
      else
      {
        object = (unint64_t)v16._object;
        if ((specialized BidirectionalCollection.last.getter(v16._countAndFlagsBits, (unint64_t)v16._object) & 0x1FF) == 0x2F)
        {
          specialized RangeReplaceableCollection<>.popLast()();
          swift_bridgeObjectRelease();
          object = (unint64_t)v543._object;
          countAndFlagsBits = v543._countAndFlagsBits;
        }
      }
      v524 = v15;
      v540 = (char *)Set.init(minimumCapacity:)();
      v109 = specialized Set._Variant.insert(_:)(&v538, 0x2FuLL);
      v110 = (uint64_t)v540;
      v111 = HIBYTE(object) & 0xF;
      if ((object & 0x2000000000000000) == 0)
        v111 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      if (!v111)
      {
        swift_bridgeObjectRelease();
        v20 = 0;
        v119 = 0xE000000000000000;
        v114 = v18;
        goto LABEL_81;
      }
      v540 = (char *)countAndFlagsBits;
      *(_QWORD *)&v541[0] = object;
      MEMORY[0x1E0C80A78](v109);
      v513 = (uint64_t)&v540;
      v514 = v110;
      swift_bridgeObjectRetain();
      v112 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)&v512, countAndFlagsBits, object);
      v114 = v18;
      if (v113 == 1)
      {
        v115 = (Swift::Int)v540;
        v116 = *(_QWORD *)&v541[0];
        swift_bridgeObjectRetain();
        v20 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v115, v116, v110);
        v118 = v117;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v118)
        {
LABEL_64:
          v119 = v118;
LABEL_81:
          LOBYTE(v12) = v528;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v159 = v525;
          v160 = (uint64_t)v526;
          v9 = v521;
          outlined consume of PathOrURL(v525, v521, (uint64_t)v526, 1);
          outlined consume of PathOrURL(v159, v9, v160, 1);
          swift_release();
          swift_release();
          v161 = v524;

          v21 = v119;
          goto LABEL_106;
        }
      }
      else
      {
        v20 = (uint64_t)v112;
        v118 = v113;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v118)
          goto LABEL_64;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v177 = v525;
      v178 = (uint64_t)v526;
      v9 = v521;
      outlined consume of PathOrURL(v525, v521, (uint64_t)v526, 1);
      outlined consume of PathOrURL(v177, v9, v178, 1);
      swift_release();
      swift_release();
      v161 = v524;

      v20 = 0;
      v21 = 0xE000000000000000;
      LOBYTE(v12) = v528;
LABEL_106:
      swift_release();
      swift_release();

      v7 = v114;
      a3 = v527;
      if ((v21 & 0x1000000000000000) != 0)
        goto LABEL_107;
      goto LABEL_7;
    }
    v43 = objc_msgSend(v14, sel__parameterString);
    if (v43)
    {
      v44 = v43;
      v521 = v9;
      v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
      v47 = v46;

      if (!getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
        || (v48 = objc_msgSend(v14, sel_path)) == 0)
      {
        v543._countAndFlagsBits = 59;
        v543._object = (void *)0xE100000000000000;
        v153._countAndFlagsBits = (uint64_t)v45;
        v153._object = v47;
        String.append(_:)(v153);
        swift_bridgeObjectRelease();
        v9 = v521;
        outlined consume of PathOrURL(v10, v521, (uint64_t)v526, 1);
        outlined consume of PathOrURL(v10, v521, (uint64_t)v526, 1);
        v21 = 0xE100000000000000;
        v20 = 59;
        goto LABEL_78;
      }
      v49 = v48;
      v527 = a3;
      v50 = v10;
      v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
      LODWORD(v528) = (_DWORD)v12;
      v12 = v7;
      v53 = v52;

      v543._countAndFlagsBits = (uint64_t)v51;
      v543._object = v53;
      swift_bridgeObjectRetain();
      v54._countAndFlagsBits = 59;
      v54._object = (void *)0xE100000000000000;
      String.append(_:)(v54);
      v7 = v12;
      LOBYTE(v12) = v528;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v55._countAndFlagsBits = (uint64_t)v45;
      v55._object = v47;
      String.append(_:)(v55);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v9 = v521;
      v56 = (uint64_t)v526;
      outlined consume of PathOrURL(v50, v521, (uint64_t)v526, 1);
      v21 = (unint64_t)v543._object;
      v20 = v543._countAndFlagsBits;
      v57 = v50;
    }
    else
    {
      v154 = objc_msgSend(v14, sel_path);
      if (!v154)
      {
        outlined consume of PathOrURL(v10, v9, (uint64_t)v526, 1);
        outlined consume of PathOrURL(v10, v9, (uint64_t)v526, 1);
        swift_release();
        swift_release();

        v20 = 0;
        v21 = 0xE000000000000000;
        goto LABEL_7;
      }
      v155 = v154;
      v20 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v154);
      v527 = a3;
      v156 = (char)v12;
      v12 = v7;
      v157 = v10;
      v21 = v158;

      v56 = (uint64_t)v526;
      outlined consume of PathOrURL(v157, v9, (uint64_t)v526, 1);
      v57 = v157;
      v7 = v12;
      LOBYTE(v12) = v156;
    }
    a3 = v527;
    outlined consume of PathOrURL(v57, v9, v56, 1);
LABEL_78:
    swift_release();
    swift_release();

    if ((v21 & 0x1000000000000000) != 0)
      goto LABEL_107;
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  v20 = (uint64_t)v10;
  v21 = v9;
  if ((v9 & 0x1000000000000000) != 0)
  {
LABEL_107:
    isStackAllocationSafe = String.UTF8View._foreignCount()();
    goto LABEL_10;
  }
LABEL_7:
  if ((v21 & 0x2000000000000000) != 0)
    isStackAllocationSafe = HIBYTE(v21) & 0xF;
  else
    isStackAllocationSafe = v20 & 0xFFFFFFFFFFFFLL;
LABEL_10:
  v23 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
    goto LABEL_417;
  if (v23 < -1)
    goto LABEL_424;
  v24 = v23 + 1;
  if (v23 < 1024 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    v522 = &v515;
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v26 = (char *)&v515 - v25;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v26, v24, 1, v20, v21);
    v28 = v27;
    swift_bridgeObjectRelease();
    if ((v28 & 1) != 0)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
      v35 = objc_allocWithZone((Class)NSError);
      v36 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v37 = objc_msgSend(v35, sel_initWithDomain_code_userInfo_, v36, 514, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v38 = objc_msgSend(v37, sel_domain);
      v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
      v41 = v40;

      if (v39 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v41 == v42)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v67 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v67 & 1) == 0)
          goto LABEL_428;
      }
      goto LABEL_44;
    }
    if ((v531 & 2) != 0)
      v29 = 3585;
    else
      v29 = 1537;
    LODWORD(v531) = _NSOpenFileDescriptor_Protected(v26, v29, v531, 438);
    v520 = v21;
    if ((v531 & 0x80000000) == 0)
    {
      if ((v529 & 1) != 0
        && (v30 = (void *)objc_opt_self(),
            v31 = objc_msgSend(v30, sel_currentProgress),
            v31,
            v31))
      {
        v32 = a3;
        if (i)
          v33 = a3 - i;
        else
          v33 = 0;
        v34 = objc_msgSend(v30, sel_progressWithTotalUnitCount_, v33);
      }
      else
      {
        v32 = a3;
        v34 = 0;
      }
      v68 = (uint64_t)v526;
      v543._countAndFlagsBits = (uint64_t)v525;
      v543._object = (void *)v9;
      *(_QWORD *)&v544 = v526;
      BYTE8(v544) = (_BYTE)v12;
      v69 = v32;
      v70 = v34;
      v71 = v7;
      v72 = write(buffer:toFileDescriptor:path:parentProgress:)(i, v69, v531, (uint64_t)&v543, v34);
      v73 = v7;
      if (!v7)
      {
        v519 = v70;
        v162 = *(_QWORD *)(v532 + 64);
        i = v532 + 64;
        v163 = 1 << *(_BYTE *)(v532 + 32);
        v164 = -1;
        if (v163 < 64)
          v164 = ~(-1 << v163);
        v165 = v164 & v162;
        v166 = (unint64_t)(v163 + 63) >> 6;
        swift_bridgeObjectRetain();
        v167 = 0;
        while (1)
        {
          if (v165)
          {
            v168 = v73;
            v169 = __clz(__rbit64(v165));
            v165 &= v165 - 1;
            v170 = v169 | (v167 << 6);
          }
          else
          {
            v174 = __OFADD__(v167++, 1);
            if (v174)
              goto LABEL_412;
            if (v167 >= v166)
            {
LABEL_103:
              swift_release();

              close(v531);
              return swift_bridgeObjectRelease();
            }
            v175 = *(_QWORD *)(i + 8 * v167);
            if (!v175)
            {
              v176 = v167 + 1;
              if (v167 + 1 >= v166)
                goto LABEL_103;
              v175 = *(_QWORD *)(i + 8 * v176);
              if (!v175)
              {
                v176 = v167 + 2;
                if (v167 + 2 >= v166)
                  goto LABEL_103;
                v175 = *(_QWORD *)(i + 8 * v176);
                if (!v175)
                {
                  v176 = v167 + 3;
                  if (v167 + 3 >= v166)
                    goto LABEL_103;
                  v175 = *(_QWORD *)(i + 8 * v176);
                  if (!v175)
                  {
                    while (1)
                    {
                      v167 = v176 + 1;
                      if (__OFADD__(v176, 1))
                        break;
                      if (v167 >= v166)
                        goto LABEL_103;
                      v175 = *(_QWORD *)(i + 8 * v167);
                      ++v176;
                      if (v175)
                        goto LABEL_98;
                    }
LABEL_427:
                    __break(1u);
LABEL_428:
                    __break(1u);
LABEL_429:
                    __break(1u);
LABEL_430:
                    __break(1u);
LABEL_431:
                    __break(1u);
LABEL_432:
                    __break(1u);
LABEL_433:
                    __break(1u);
LABEL_434:
                    __break(1u);
LABEL_435:
                    __break(1u);
LABEL_436:
                    __break(1u);
LABEL_437:
                    __break(1u);
LABEL_438:
                    __break(1u);
LABEL_439:
                    __break(1u);
LABEL_440:
                    __break(1u);
LABEL_441:
                    __break(1u);
LABEL_442:
                    __break(1u);
                  }
                }
              }
              v167 = v176;
            }
LABEL_98:
            v168 = v73;
            v165 = (v175 - 1) & v175;
            v170 = __clz(__rbit64(v175)) + (v167 << 6);
          }
          v171 = (uint64_t *)(*(_QWORD *)(v532 + 56) + 16 * v170);
          v172 = *v171;
          v173 = v171[1];
          swift_bridgeObjectRetain_n();
          outlined copy of Data._Representation(v172, v173);
          specialized Data._Representation.withUnsafeBytes<A>(_:)(v172, v173);
          v73 = v168;
          outlined consume of Data._Representation(v172, v173);
          swift_bridgeObjectRelease();
        }
      }
      LODWORD(v532) = MEMORY[0x186DA4118](v72);
      if (v70)
      {
        v74 = v70;
        if (objc_msgSend(v70, sel_isCancelled))
        {
          unlink(v26);
          static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
          v75 = objc_allocWithZone((Class)NSError);
          v76 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v77 = objc_msgSend(v75, sel_initWithDomain_code_userInfo_, v76, 3072, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v78 = objc_msgSend(v77, sel_domain);
          v79 = static String._unconditionallyBridgeFromObjectiveC(_:)(v78);
          v81 = v80;

          if (v79 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v81 == v82)
          {
            swift_bridgeObjectRelease_n();
          }
          else
          {
            v242 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v242 & 1) == 0)
              goto LABEL_431;
          }
          swift_willThrow();

          v243 = v71;
          goto LABEL_302;
        }
      }
      v518 = v71;
      v519 = v70;
      v521 = v9;
      if ((v12 & 1) == 0)
      {
        *(_QWORD *)&v535 = MEMORY[0x1E0DEE9E0];
        v188 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
        v190 = v189;
        v191 = (uint64_t)v525;
        v192 = v521;
        v540 = v525;
        *(_QWORD *)&v541[0] = v521;
        swift_bridgeObjectRetain();
        AnyHashable.init<A>(_:)();
        specialized Dictionary.subscript.setter((uint64_t)&v543, (uint64_t)v188, v190);
        v193 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
        v195 = v194;
        URL.init(_fileManagerFailableFileURLWithPath:)(v191, v192, (uint64_t)&v540);
        v196 = v532;
        if (v540)
        {
          v538 = v540;
          v539[0] = v541[0];
          lazy protocol witness table accessor for type URL and conformance URL();
          AnyHashable.init<A>(_:)();
        }
        else
        {
          v543 = (Swift::String)0;
          v544 = 0u;
          v545 = 0;
        }
        specialized Dictionary.subscript.setter((uint64_t)&v543, (uint64_t)v193, v195);
        static CocoaError._errorWithErrno(_:reading:variant:userInfo:)(v196, 0, 0, 0, v535, &v543);
        swift_bridgeObjectRelease();
        goto LABEL_301;
      }
      v538 = (char *)MEMORY[0x1E0DEE9E0];
      v128 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
      v130 = v129;
      v131 = v525;
      v132 = v521;
      v540 = v525;
      *(_QWORD *)&v541[0] = v521;
      *((_QWORD *)&v541[0] + 1) = v68;
      lazy protocol witness table accessor for type URL and conformance URL();
      v133 = v131;
      swift_retain_n();
      swift_retain_n();
      v134 = v133;
      AnyHashable.init<A>(_:)();
      specialized Dictionary.subscript.setter((uint64_t)&v543, (uint64_t)v128, v130);
      v135 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
      v137 = v136;
      v543._countAndFlagsBits = (uint64_t)v134;
      v543._object = (void *)v132;
      *(_QWORD *)&v544 = v68;
      v138 = URL.path(percentEncoded:)(0);
      v540 = (char *)v138._countAndFlagsBits;
      *(_QWORD *)&v541[0] = v138._object;
      AnyHashable.init<A>(_:)();
      specialized Dictionary.subscript.setter((uint64_t)&v543, (uint64_t)v135, v137);
      v139 = (uint64_t)v538;
      v534 = (uint64_t)v538;
      swift_bridgeObjectRetain();
      v517 = v139;
      v140 = v532;
      if ((_DWORD)v532 == 102)
      {
LABEL_260:
        CocoaError.Code.init(fileErrno:reading:)(v140, 0);
        v516 = (uint64_t)v533;
        if (*(_QWORD *)(v139 + 16))
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
          v375 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
        }
        else
        {
          v375 = (_QWORD *)MEMORY[0x1E0DEE9E0];
        }
        v376 = *(_QWORD *)(v139 + 64);
        v528 = v139 + 64;
        v377 = -1;
        v378 = -1 << *(_BYTE *)(v139 + 32);
        v515 = ~v378;
        if (-v378 < 64)
          v377 = ~(-1 << -(char)v378);
        v379 = v377 & v376;
        v527 = (unint64_t)(63 - v378) >> 6;
        v380 = &v544;
        v381 = (_OWORD *)((char *)v539 + 8);
        v382 = (char *)v541 + 8;
        v523 = (char *)(v375 + 8);
        swift_bridgeObjectRetain();
        i = 0;
        v529 = (id)(MEMORY[0x1E0DEE9B8] + 8);
        v524 = (char *)v541 + 8;
        if (v379)
          goto LABEL_268;
LABEL_269:
        v389 = i + 1;
        if (__OFADD__(i, 1))
          goto LABEL_418;
        if (v389 < v527)
        {
          v390 = *(_QWORD *)(v528 + 8 * v389);
          v391 = i + 1;
          if (v390)
            goto LABEL_288;
          v391 = i + 2;
          if (i + 2 < v527)
          {
            v390 = *(_QWORD *)(v528 + 8 * v391);
            if (v390)
              goto LABEL_288;
            v391 = i + 3;
            if (i + 3 < v527)
            {
              v390 = *(_QWORD *)(v528 + 8 * v391);
              if (v390)
                goto LABEL_288;
              v391 = i + 4;
              if (i + 4 < v527)
              {
                v390 = *(_QWORD *)(v528 + 8 * v391);
                if (v390)
                  goto LABEL_288;
                v391 = i + 5;
                if (i + 5 < v527)
                {
                  v390 = *(_QWORD *)(v528 + 8 * v391);
                  if (v390)
                    goto LABEL_288;
                  v391 = i + 6;
                  if (i + 6 < v527)
                  {
                    v390 = *(_QWORD *)(v528 + 8 * v391);
                    if (v390)
                      goto LABEL_288;
                    v392 = i + 7;
                    if (i + 7 < v527)
                    {
                      v390 = *(_QWORD *)(v528 + 8 * v392);
                      if (!v390)
                      {
                        while (1)
                        {
                          v391 = v392 + 1;
                          if (__OFADD__(v392, 1))
                            goto LABEL_436;
                          if (v391 >= v527)
                            goto LABEL_294;
                          v390 = *(_QWORD *)(v528 + 8 * v391);
                          ++v392;
                          if (v390)
                            goto LABEL_288;
                        }
                      }
                      v391 = i + 7;
LABEL_288:
                      v532 = (v390 - 1) & v390;
                      v388 = __clz(__rbit64(v390)) + (v391 << 6);
                      for (i = v391; ; v388 = __clz(__rbit64(v379)) | (i << 6))
                      {
                        v393 = (uint64_t *)(*(_QWORD *)(v139 + 48) + 16 * v388);
                        v395 = *v393;
                        v394 = (void *)v393[1];
                        outlined init with copy of AnyHashable(*(_QWORD *)(v139 + 56) + 40 * v388, (uint64_t)v380);
                        v543._countAndFlagsBits = v395;
                        v543._object = v394;
                        v396 = v380[1];
                        v535 = *v380;
                        v536 = v396;
                        v537 = *((_QWORD *)v380 + 4);
                        v538 = (char *)v395;
                        *(_QWORD *)&v539[0] = v394;
                        swift_bridgeObjectRetain();
                        swift_dynamicCast();
                        v397 = (uint64_t)v538;
                        v398 = *(_QWORD *)&v539[0];
                        outlined init with take of Any(v381, v382);
                        outlined init with take of Any(v382, v542);
                        outlined init with take of Any(v542, &v540);
                        v399 = specialized __RawDictionaryStorage.find<A>(_:)(v397, v398);
                        v400 = v399;
                        if ((v401 & 1) != 0)
                        {
                          v383 = v380;
                          v384 = v381;
                          v385 = v139;
                          v386 = (uint64_t *)(v375[6] + 16 * v399);
                          swift_bridgeObjectRelease();
                          *v386 = v397;
                          v386[1] = v398;
                          v139 = v385;
                          v381 = v384;
                          v380 = v383;
                          v382 = v524;
                          v387 = (_OWORD *)(v375[7] + 32 * v400);
                          __swift_destroy_boxed_opaque_existential_1((uint64_t)v387);
                          outlined init with take of Any(&v540, v387);
                          v379 = v532;
                          if (!v532)
                            goto LABEL_269;
                        }
                        else
                        {
                          if (v375[2] >= v375[3])
                            goto LABEL_415;
                          *(_QWORD *)&v523[(v399 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v399;
                          v402 = (uint64_t *)(v375[6] + 16 * v399);
                          *v402 = v397;
                          v402[1] = v398;
                          outlined init with take of Any(&v540, (_OWORD *)(v375[7] + 32 * v399));
                          v403 = v375[2];
                          v174 = __OFADD__(v403, 1);
                          v404 = v403 + 1;
                          if (v174)
                            goto LABEL_416;
                          v375[2] = v404;
                          v379 = v532;
                          if (!v532)
                            goto LABEL_269;
                        }
LABEL_268:
                        v532 = (v379 - 1) & v379;
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_294:
        outlined consume of Set<A1>.Iterator._Variant<A><A1>();
        swift_bridgeObjectRelease();
        static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
        v405 = objc_allocWithZone((Class)NSError);
        v406 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v407 = objc_msgSend(v405, sel_initWithDomain_code_userInfo_, v406, v516, _NativeDictionary.bridged()(), v515);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v408 = objc_msgSend(v407, sel_domain);
        v409 = static String._unconditionallyBridgeFromObjectiveC(_:)(v408);
        v411 = v410;

        if (v409 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) || v411 != v412)
        {
          v414 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of PathOrURL(v525, v521, (uint64_t)v526, 1);
          if ((v414 & 1) != 0)
          {
LABEL_301:
            swift_willThrow();

            v243 = v518;
LABEL_302:

            close(v531);
            goto LABEL_303;
          }
          __break(1u);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        outlined consume of PathOrURL(v525, v521, (uint64_t)v526, 1);
        goto LABEL_301;
      }
      if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) == 0)
      {
        v141 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
        v143 = v142;
        static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
        v144 = (int)POSIXErrorCode.rawValue.getter();
        v145 = objc_allocWithZone((Class)NSError);
        v146 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v147 = (char *)objc_msgSend(v145, sel_initWithDomain_code_userInfo_, v146, v144, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v148 = objc_msgSend(v147, sel_domain);
        v149 = static String._unconditionallyBridgeFromObjectiveC(_:)(v148);
        v151 = v150;

        if (v149 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain")) && v151 == v152)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          v374 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v374 & 1) == 0)
            goto LABEL_437;
        }
        v540 = v147;
        lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
        AnyHashable.init<A>(_:)();
        specialized Dictionary.subscript.setter((uint64_t)&v543, (uint64_t)v141, v143);
        v139 = v534;
        goto LABEL_260;
      }
      v543._countAndFlagsBits = 0;
      v543._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      v543._countAndFlagsBits = 0xD000000000000014;
      v543._object = (void *)0x8000000182306980;
      LODWORD(v540) = v140;
LABEL_445:
      v511._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v511);
      swift_bridgeObjectRelease();
      LODWORD(v514) = 0;
      v513 = 99;
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    v519 = v7;
    v83 = MEMORY[0x186DA4118]();
    if ((v12 & 1) != 0)
    {
      v538 = (char *)MEMORY[0x1E0DEE9E0];
      v84 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
      v86 = v85;
      v87 = v525;
      v88 = (uint64_t)v526;
      v540 = v525;
      *(_QWORD *)&v541[0] = v9;
      *((_QWORD *)&v541[0] + 1) = v526;
      lazy protocol witness table accessor for type URL and conformance URL();
      v89 = v87;
      swift_retain_n();
      swift_retain_n();
      v90 = v89;
      v521 = v9;
      v91 = (uint64_t)v90;
      AnyHashable.init<A>(_:)();
      specialized Dictionary.subscript.setter((uint64_t)&v543, (uint64_t)v84, v86);
      v92 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
      v94 = v93;
      v543._countAndFlagsBits = v91;
      v543._object = (void *)v521;
      *(_QWORD *)&v544 = v88;
      v95 = URL.path(percentEncoded:)(0);
      v540 = (char *)v95._countAndFlagsBits;
      *(_QWORD *)&v541[0] = v95._object;
      AnyHashable.init<A>(_:)();
      specialized Dictionary.subscript.setter((uint64_t)&v543, (uint64_t)v92, v94);
      v96 = (uint64_t)v538;
      v534 = (uint64_t)v538;
      swift_bridgeObjectRetain();
      v518 = (id)v96;
      if (v83 == 102)
      {
LABEL_137:
        CocoaError.Code.init(fileErrno:reading:)(v83, 0);
        v517 = (uint64_t)v533;
        if (*(_QWORD *)(v96 + 16))
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
          v532 = static _DictionaryStorage.allocate(capacity:)();
        }
        else
        {
          v532 = MEMORY[0x1E0DEE9E0];
        }
        v245 = *(_QWORD *)(v96 + 64);
        v527 = v96 + 64;
        v246 = -1;
        v247 = -1 << *(_BYTE *)(v96 + 32);
        v516 = ~v247;
        if (-v247 < 64)
          v246 = ~(-1 << -(char)v247);
        v248 = v246 & v245;
        v528 = (unint64_t)(63 - v247) >> 6;
        v249 = &v544;
        v250 = (_OWORD *)((char *)v539 + 8);
        v251 = (char *)v541 + 8;
        v523 = (char *)(v532 + 64);
        swift_bridgeObjectRetain();
        i = 0;
        v529 = (id)(MEMORY[0x1E0DEE9B8] + 8);
        v524 = (char *)v541 + 8;
        if (v248)
          goto LABEL_145;
LABEL_146:
        v259 = i + 1;
        if (__OFADD__(i, 1))
          goto LABEL_413;
        if (v259 < v528)
        {
          v260 = *(_QWORD *)(v527 + 8 * v259);
          if (v260)
          {
LABEL_162:
            i = v259;
            v531 = (v260 - 1) & v260;
            for (j = __clz(__rbit64(v260)) + (v259 << 6); ; j = __clz(__rbit64(v248)) | (i << 6))
            {
              v262 = (uint64_t *)(*(_QWORD *)(v96 + 48) + 16 * j);
              v264 = *v262;
              v263 = (void *)v262[1];
              outlined init with copy of AnyHashable(*(_QWORD *)(v96 + 56) + 40 * j, (uint64_t)v249);
              v543._countAndFlagsBits = v264;
              v543._object = v263;
              v265 = v249[1];
              v535 = *v249;
              v536 = v265;
              v537 = *((_QWORD *)v249 + 4);
              v538 = (char *)v264;
              *(_QWORD *)&v539[0] = v263;
              swift_bridgeObjectRetain();
              swift_dynamicCast();
              v267 = (uint64_t)v538;
              v266 = *(_QWORD *)&v539[0];
              outlined init with take of Any(v250, v251);
              outlined init with take of Any(v251, v542);
              outlined init with take of Any(v542, &v540);
              v268 = specialized __RawDictionaryStorage.find<A>(_:)(v267, v266);
              v269 = v268;
              if ((v270 & 1) != 0)
              {
                v252 = v532;
                v253 = v249;
                v254 = v250;
                v255 = v96;
                v256 = (uint64_t *)(*(_QWORD *)(v532 + 48) + 16 * v268);
                swift_bridgeObjectRelease();
                *v256 = v267;
                v256[1] = v266;
                v96 = v255;
                v250 = v254;
                v249 = v253;
                v251 = v524;
                v257 = (_OWORD *)(*(_QWORD *)(v252 + 56) + 32 * v269);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v257);
                outlined init with take of Any(&v540, v257);
                v248 = v531;
                if (!v531)
                  goto LABEL_146;
              }
              else
              {
                if (*(_QWORD *)(v532 + 16) >= *(_QWORD *)(v532 + 24))
                {
                  __break(1u);
                  goto LABEL_409;
                }
                *(_QWORD *)&v523[(v268 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v268;
                v271 = v532;
                v272 = (uint64_t *)(*(_QWORD *)(v532 + 48) + 16 * v268);
                *v272 = v267;
                v272[1] = v266;
                outlined init with take of Any(&v540, (_OWORD *)(*(_QWORD *)(v271 + 56) + 32 * v268));
                v273 = *(_QWORD *)(v271 + 16);
                v174 = __OFADD__(v273, 1);
                v274 = v273 + 1;
                if (v174)
                  goto LABEL_410;
                v248 = v531;
                *(_QWORD *)(v532 + 16) = v274;
                if (!v248)
                  goto LABEL_146;
              }
LABEL_145:
              v531 = (v248 - 1) & v248;
            }
          }
          v261 = i + 2;
          if (i + 2 < v528)
          {
            v260 = *(_QWORD *)(v527 + 8 * v261);
            if (v260)
              goto LABEL_161;
            v261 = i + 3;
            if (i + 3 >= v528)
              goto LABEL_172;
            v260 = *(_QWORD *)(v527 + 8 * v261);
            if (v260)
              goto LABEL_161;
            v261 = i + 4;
            if (i + 4 >= v528)
              goto LABEL_172;
            v260 = *(_QWORD *)(v527 + 8 * v261);
            if (v260)
              goto LABEL_161;
            v261 = i + 5;
            if (i + 5 >= v528)
              goto LABEL_172;
            v260 = *(_QWORD *)(v527 + 8 * v261);
            if (v260)
              goto LABEL_161;
            v261 = i + 6;
            if (i + 6 >= v528)
              goto LABEL_172;
            v260 = *(_QWORD *)(v527 + 8 * v261);
            if (v260)
            {
LABEL_161:
              v259 = v261;
              goto LABEL_162;
            }
            v261 = i + 7;
            if (i + 7 < v528)
            {
              v260 = *(_QWORD *)(v527 + 8 * v261);
              if (v260)
                goto LABEL_161;
              while (1)
              {
                v259 = v261 + 1;
                if (__OFADD__(v261, 1))
                  goto LABEL_432;
                if (v259 >= v528)
                  break;
                v260 = *(_QWORD *)(v527 + 8 * v259);
                ++v261;
                if (v260)
                  goto LABEL_162;
              }
            }
          }
        }
LABEL_172:
        outlined consume of Set<A1>.Iterator._Variant<A><A1>();
        swift_bridgeObjectRelease();
        static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
        v275 = objc_allocWithZone((Class)NSError);
        v276 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v277 = objc_msgSend(v275, sel_initWithDomain_code_userInfo_, v276, v517, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v278 = objc_msgSend(v277, sel_domain);
        v279 = static String._unconditionallyBridgeFromObjectiveC(_:)(v278);
        v281 = v280;

        if (v279 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) || v281 != v282)
        {
          v284 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of PathOrURL(v525, v521, (uint64_t)v526, 1);
          if ((v284 & 1) != 0)
            goto LABEL_44;
          __break(1u);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        outlined consume of PathOrURL(v525, v521, (uint64_t)v526, 1);
LABEL_44:
        swift_willThrow();
LABEL_303:
        swift_willThrow();
        return swift_bridgeObjectRelease();
      }
      if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) == 0)
      {
        v97 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
        v99 = v98;
        static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
        v100 = (int)POSIXErrorCode.rawValue.getter();
        v101 = objc_allocWithZone((Class)NSError);
        v102 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v103 = (char *)objc_msgSend(v101, sel_initWithDomain_code_userInfo_, v102, v100, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v104 = objc_msgSend(v103, sel_domain);
        v105 = static String._unconditionallyBridgeFromObjectiveC(_:)(v104);
        v107 = v106;

        if (v105 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain")) && v107 == v108)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          v244 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v244 & 1) == 0)
            goto LABEL_434;
        }
        v540 = v103;
        lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
        AnyHashable.init<A>(_:)();
        specialized Dictionary.subscript.setter((uint64_t)&v543, (uint64_t)v97, v99);
        v96 = v534;
        goto LABEL_137;
      }
LABEL_443:
      v543._countAndFlagsBits = 0;
      v543._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      v543._countAndFlagsBits = 0xD000000000000014;
      v543._object = (void *)0x8000000182306980;
      LODWORD(v540) = v83;
      goto LABEL_445;
    }
    *(_QWORD *)&v535 = MEMORY[0x1E0DEE9E0];
    v179 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
    v181 = v180;
    v182 = (uint64_t)v525;
    v540 = v525;
    *(_QWORD *)&v541[0] = v9;
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v543, (uint64_t)v179, v181);
    v183 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
    v185 = v184;
    URL.init(_fileManagerFailableFileURLWithPath:)(v182, v9, (uint64_t)&v540);
    if (v540)
    {
      v538 = v540;
      v539[0] = v541[0];
      lazy protocol witness table accessor for type URL and conformance URL();
      AnyHashable.init<A>(_:)();
    }
    else
    {
      v543 = (Swift::String)0;
      v544 = 0u;
      v545 = 0;
    }
    specialized Dictionary.subscript.setter((uint64_t)&v543, (uint64_t)v183, v185);
    v222 = (char *)v535;
    v534 = v535;
    swift_bridgeObjectRetain();
    v524 = v222;
    if (v83 != 102)
    {
      if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
        goto LABEL_443;
      v223 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
      v225 = v224;
      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
      v226 = (int)POSIXErrorCode.rawValue.getter();
      v227 = objc_allocWithZone((Class)NSError);
      v228 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v229 = (char *)objc_msgSend(v227, sel_initWithDomain_code_userInfo_, v228, v226, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v230 = objc_msgSend(v229, sel_domain);
      v231 = static String._unconditionallyBridgeFromObjectiveC(_:)(v230);
      v233 = v232;

      if (v231 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain")) && v233 == v234)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v285 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v285 & 1) == 0)
          goto LABEL_435;
      }
      v540 = v229;
      lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
      AnyHashable.init<A>(_:)();
      specialized Dictionary.subscript.setter((uint64_t)&v543, (uint64_t)v223, v225);
      v222 = (char *)v534;
    }
    CocoaError.Code.init(fileErrno:reading:)(v83, 0);
    v523 = v533;
    if (*((_QWORD *)v222 + 2))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v532 = static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      v532 = MEMORY[0x1E0DEE9E0];
    }
    v286 = *((_QWORD *)v222 + 8);
    v527 = (int64_t)(v222 + 64);
    v287 = -1;
    v288 = -1 << v222[32];
    v521 = ~v288;
    if (-v288 < 64)
      v287 = ~(-1 << -(char)v288);
    v289 = v287 & v286;
    v528 = (unint64_t)(63 - v288) >> 6;
    v290 = &v544;
    v291 = (_OWORD *)((char *)v539 + 8);
    v292 = (_OWORD *)((char *)v541 + 8);
    v525 = (char *)(v532 + 64);
    swift_bridgeObjectRetain();
    i = 0;
    v529 = (id)(MEMORY[0x1E0DEE9B8] + 8);
    v526 = (_OWORD *)((char *)v541 + 8);
    if (v289)
      goto LABEL_189;
LABEL_190:
    v300 = i + 1;
    if (__OFADD__(i, 1))
      goto LABEL_414;
    if (v300 < v528)
    {
      v301 = *(_QWORD *)(v527 + 8 * v300);
      if (v301)
      {
LABEL_206:
        i = v300;
        v531 = (v301 - 1) & v301;
        for (k = __clz(__rbit64(v301)) + (v300 << 6); ; k = __clz(__rbit64(v289)) | (i << 6))
        {
          v303 = (uint64_t *)(*((_QWORD *)v222 + 6) + 16 * k);
          v305 = *v303;
          v304 = (void *)v303[1];
          outlined init with copy of AnyHashable(*((_QWORD *)v222 + 7) + 40 * k, (uint64_t)v290);
          v543._countAndFlagsBits = v305;
          v543._object = v304;
          v306 = v290[1];
          v535 = *v290;
          v536 = v306;
          v537 = *((_QWORD *)v290 + 4);
          v538 = (char *)v305;
          *(_QWORD *)&v539[0] = v304;
          swift_bridgeObjectRetain();
          swift_dynamicCast();
          v308 = (uint64_t)v538;
          v307 = *(_QWORD *)&v539[0];
          outlined init with take of Any(v291, v292);
          outlined init with take of Any(v292, v542);
          outlined init with take of Any(v542, &v540);
          v309 = specialized __RawDictionaryStorage.find<A>(_:)(v308, v307);
          v310 = v309;
          if ((v311 & 1) != 0)
          {
            v293 = v532;
            v294 = v290;
            v295 = v291;
            v296 = v222;
            v297 = (uint64_t *)(*(_QWORD *)(v532 + 48) + 16 * v309);
            swift_bridgeObjectRelease();
            *v297 = v308;
            v297[1] = v307;
            v222 = v296;
            v291 = v295;
            v290 = v294;
            v292 = v526;
            v298 = (_OWORD *)(*(_QWORD *)(v293 + 56) + 32 * v310);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v298);
            outlined init with take of Any(&v540, v298);
            v289 = v531;
            if (!v531)
              goto LABEL_190;
          }
          else
          {
            if (*(_QWORD *)(v532 + 16) >= *(_QWORD *)(v532 + 24))
            {
LABEL_409:
              __break(1u);
LABEL_410:
              __break(1u);
LABEL_411:
              __break(1u);
LABEL_412:
              __break(1u);
LABEL_413:
              __break(1u);
LABEL_414:
              __break(1u);
LABEL_415:
              __break(1u);
LABEL_416:
              __break(1u);
LABEL_417:
              __break(1u);
LABEL_418:
              __break(1u);
LABEL_419:
              __break(1u);
LABEL_420:
              __break(1u);
LABEL_421:
              __break(1u);
LABEL_422:
              __break(1u);
LABEL_423:
              __break(1u);
LABEL_424:
              __break(1u);
LABEL_425:
              __break(1u);
LABEL_426:
              __break(1u);
              goto LABEL_427;
            }
            *(_QWORD *)&v525[(v309 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v309;
            v312 = v532;
            v313 = (uint64_t *)(*(_QWORD *)(v532 + 48) + 16 * v309);
            *v313 = v308;
            v313[1] = v307;
            outlined init with take of Any(&v540, (_OWORD *)(*(_QWORD *)(v312 + 56) + 32 * v309));
            v314 = *(_QWORD *)(v312 + 16);
            v174 = __OFADD__(v314, 1);
            v315 = v314 + 1;
            if (v174)
              goto LABEL_411;
            v289 = v531;
            *(_QWORD *)(v532 + 16) = v315;
            if (!v289)
              goto LABEL_190;
          }
LABEL_189:
          v531 = (v289 - 1) & v289;
        }
      }
      v302 = i + 2;
      if (i + 2 < v528)
      {
        v301 = *(_QWORD *)(v527 + 8 * v302);
        if (v301)
          goto LABEL_205;
        v302 = i + 3;
        if (i + 3 >= v528)
          goto LABEL_216;
        v301 = *(_QWORD *)(v527 + 8 * v302);
        if (v301)
          goto LABEL_205;
        v302 = i + 4;
        if (i + 4 >= v528)
          goto LABEL_216;
        v301 = *(_QWORD *)(v527 + 8 * v302);
        if (v301)
          goto LABEL_205;
        v302 = i + 5;
        if (i + 5 >= v528)
          goto LABEL_216;
        v301 = *(_QWORD *)(v527 + 8 * v302);
        if (v301)
          goto LABEL_205;
        v302 = i + 6;
        if (i + 6 >= v528)
          goto LABEL_216;
        v301 = *(_QWORD *)(v527 + 8 * v302);
        if (v301)
        {
LABEL_205:
          v300 = v302;
          goto LABEL_206;
        }
        v302 = i + 7;
        if (i + 7 < v528)
        {
          v301 = *(_QWORD *)(v527 + 8 * v302);
          if (v301)
            goto LABEL_205;
          while (1)
          {
            v300 = v302 + 1;
            if (__OFADD__(v302, 1))
              goto LABEL_433;
            if (v300 >= v528)
              break;
            v301 = *(_QWORD *)(v527 + 8 * v300);
            ++v302;
            if (v301)
              goto LABEL_206;
          }
        }
      }
    }
LABEL_216:
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v316 = objc_allocWithZone((Class)NSError);
    v317 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v318 = objc_msgSend(v316, sel_initWithDomain_code_userInfo_, v317, v523, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v319 = objc_msgSend(v318, sel_domain);
    v320 = static String._unconditionallyBridgeFromObjectiveC(_:)(v319);
    v322 = v321;

    if (v320 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) || v322 != v323)
    {
      v325 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v325 & 1) != 0)
        goto LABEL_44;
      __break(1u);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    goto LABEL_44;
  }
  v58 = (char *)swift_slowAlloc();
  swift_bridgeObjectRetain();
  String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v58, v24, 1, v20, v21);
  v60 = v59;
  swift_bridgeObjectRelease();
  v528 = (int64_t)v58;
  if ((v60 & 1) != 0)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v120 = objc_allocWithZone((Class)NSError);
    v121 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v122 = objc_msgSend(v120, sel_initWithDomain_code_userInfo_, v121, 514, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v123 = objc_msgSend(v122, sel_domain);
    v124 = static String._unconditionallyBridgeFromObjectiveC(_:)(v123);
    v126 = v125;

    if (v124 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v126 == v127)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v186 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v186 & 1) == 0)
        goto LABEL_430;
    }
    swift_willThrow();
LABEL_112:
    v187 = v528;
LABEL_406:
    MEMORY[0x186DA9E78](v187, -1, -1);
    return swift_bridgeObjectRelease();
  }
  if ((v531 & 2) != 0)
    v61 = 3585;
  else
    v61 = 1537;
  LODWORD(v531) = _NSOpenFileDescriptor_Protected(v58, v61, v531, 438);
  if ((v531 & 0x80000000) != 0)
  {
    v519 = v7;
    v520 = v21;
    v83 = MEMORY[0x186DA4118]();
    if ((v12 & 1) != 0)
    {
      v538 = (char *)MEMORY[0x1E0DEE9E0];
      v197 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
      v199 = v198;
      v200 = v525;
      v201 = (uint64_t)v526;
      v540 = v525;
      *(_QWORD *)&v541[0] = v9;
      *((_QWORD *)&v541[0] + 1) = v526;
      lazy protocol witness table accessor for type URL and conformance URL();
      v202 = v200;
      swift_retain_n();
      swift_retain_n();
      v203 = v202;
      v521 = v9;
      v204 = (uint64_t)v203;
      AnyHashable.init<A>(_:)();
      specialized Dictionary.subscript.setter((uint64_t)&v543, (uint64_t)v197, v199);
      v205 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
      v207 = v206;
      v543._countAndFlagsBits = v204;
      v543._object = (void *)v521;
      *(_QWORD *)&v544 = v201;
      v208 = URL.path(percentEncoded:)(0);
      v540 = (char *)v208._countAndFlagsBits;
      *(_QWORD *)&v541[0] = v208._object;
      AnyHashable.init<A>(_:)();
      specialized Dictionary.subscript.setter((uint64_t)&v543, (uint64_t)v205, v207);
      v209 = (uint64_t)v538;
      v534 = (uint64_t)v538;
      swift_bridgeObjectRetain();
      v518 = (id)v209;
      if (v83 != 102)
      {
        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
          goto LABEL_443;
        v210 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
        v212 = v211;
        static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
        v213 = (int)POSIXErrorCode.rawValue.getter();
        v214 = objc_allocWithZone((Class)NSError);
        v215 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v216 = (char *)objc_msgSend(v214, sel_initWithDomain_code_userInfo_, v215, v213, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v217 = objc_msgSend(v216, sel_domain);
        v218 = static String._unconditionallyBridgeFromObjectiveC(_:)(v217);
        v220 = v219;

        if (v218 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain")) && v220 == v221)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          v429 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v429 & 1) == 0)
            goto LABEL_441;
        }
        v540 = v216;
        lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
        AnyHashable.init<A>(_:)();
        specialized Dictionary.subscript.setter((uint64_t)&v543, (uint64_t)v210, v212);
        v209 = v534;
      }
      CocoaError.Code.init(fileErrno:reading:)(v83, 0);
      v517 = (uint64_t)v533;
      if (*(_QWORD *)(v209 + 16))
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
        v532 = static _DictionaryStorage.allocate(capacity:)();
      }
      else
      {
        v532 = MEMORY[0x1E0DEE9E0];
      }
      v430 = *(_QWORD *)(v209 + 64);
      v524 = (char *)(v209 + 64);
      v431 = -1;
      v432 = -1 << *(_BYTE *)(v209 + 32);
      v516 = ~v432;
      if (-v432 < 64)
        v431 = ~(-1 << -(char)v432);
      v433 = v431 & v430;
      v527 = (unint64_t)(63 - v432) >> 6;
      v434 = &v544;
      v435 = (_OWORD *)((char *)v539 + 8);
      v436 = (char *)v541 + 8;
      v522 = (uint64_t *)(v532 + 64);
      swift_bridgeObjectRetain();
      i = 0;
      v529 = (id)(MEMORY[0x1E0DEE9B8] + 8);
      v523 = (char *)v541 + 8;
      if (v433)
        goto LABEL_325;
LABEL_326:
      v444 = i + 1;
      if (__OFADD__(i, 1))
        goto LABEL_425;
      if (v444 < v527)
      {
        v445 = *(_QWORD *)&v524[8 * v444];
        if (v445)
        {
LABEL_342:
          i = v444;
          v531 = (v445 - 1) & v445;
          for (m = __clz(__rbit64(v445)) + (v444 << 6); ; m = __clz(__rbit64(v433)) | (i << 6))
          {
            v447 = (uint64_t *)(*(_QWORD *)(v209 + 48) + 16 * m);
            v449 = *v447;
            v448 = (void *)v447[1];
            outlined init with copy of AnyHashable(*(_QWORD *)(v209 + 56) + 40 * m, (uint64_t)v434);
            v543._countAndFlagsBits = v449;
            v543._object = v448;
            v450 = v434[1];
            v535 = *v434;
            v536 = v450;
            v537 = *((_QWORD *)v434 + 4);
            v538 = (char *)v449;
            *(_QWORD *)&v539[0] = v448;
            swift_bridgeObjectRetain();
            swift_dynamicCast();
            v452 = (uint64_t)v538;
            v451 = *(_QWORD *)&v539[0];
            outlined init with take of Any(v435, v436);
            outlined init with take of Any(v436, v542);
            outlined init with take of Any(v542, &v540);
            v453 = specialized __RawDictionaryStorage.find<A>(_:)(v452, v451);
            v454 = v453;
            if ((v455 & 1) != 0)
            {
              v437 = v532;
              v438 = v434;
              v439 = v435;
              v440 = v209;
              v441 = (uint64_t *)(*(_QWORD *)(v532 + 48) + 16 * v453);
              swift_bridgeObjectRelease();
              *v441 = v452;
              v441[1] = v451;
              v209 = v440;
              v435 = v439;
              v434 = v438;
              v436 = v523;
              v442 = (_OWORD *)(*(_QWORD *)(v437 + 56) + 32 * v454);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v442);
              outlined init with take of Any(&v540, v442);
              v433 = v531;
              if (!v531)
                goto LABEL_326;
            }
            else
            {
              if (*(_QWORD *)(v532 + 16) >= *(_QWORD *)(v532 + 24))
                goto LABEL_419;
              *(uint64_t *)((char *)v522 + ((v453 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v453;
              v456 = v532;
              v457 = (uint64_t *)(*(_QWORD *)(v532 + 48) + 16 * v453);
              *v457 = v452;
              v457[1] = v451;
              outlined init with take of Any(&v540, (_OWORD *)(*(_QWORD *)(v456 + 56) + 32 * v453));
              v458 = *(_QWORD *)(v456 + 16);
              v174 = __OFADD__(v458, 1);
              v459 = v458 + 1;
              if (v174)
                goto LABEL_421;
              v433 = v531;
              *(_QWORD *)(v532 + 16) = v459;
              if (!v433)
                goto LABEL_326;
            }
LABEL_325:
            v531 = (v433 - 1) & v433;
          }
        }
        v446 = i + 2;
        if (i + 2 < v527)
        {
          v445 = *(_QWORD *)&v524[8 * v446];
          if (v445)
            goto LABEL_341;
          v446 = i + 3;
          if (i + 3 < v527)
          {
            v445 = *(_QWORD *)&v524[8 * v446];
            if (v445)
              goto LABEL_341;
            v446 = i + 4;
            if (i + 4 < v527)
            {
              v445 = *(_QWORD *)&v524[8 * v446];
              if (v445)
                goto LABEL_341;
              v446 = i + 5;
              if (i + 5 < v527)
              {
                v445 = *(_QWORD *)&v524[8 * v446];
                if (v445)
                  goto LABEL_341;
                v446 = i + 6;
                if (i + 6 < v527)
                {
                  v445 = *(_QWORD *)&v524[8 * v446];
                  if (!v445)
                  {
                    v446 = i + 7;
                    if (i + 7 < v527)
                    {
                      v445 = *(_QWORD *)&v524[8 * v446];
                      if (v445)
                        goto LABEL_341;
                      while (1)
                      {
                        v444 = v446 + 1;
                        if (__OFADD__(v446, 1))
                          goto LABEL_439;
                        if (v444 >= v527)
                          break;
                        v445 = *(_QWORD *)&v524[8 * v444];
                        ++v446;
                        if (v445)
                          goto LABEL_342;
                      }
                    }
                    goto LABEL_352;
                  }
LABEL_341:
                  v444 = v446;
                  goto LABEL_342;
                }
              }
            }
          }
        }
      }
LABEL_352:
      outlined consume of Set<A1>.Iterator._Variant<A><A1>();
      swift_bridgeObjectRelease();
      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
      v460 = objc_allocWithZone((Class)NSError);
      v461 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v462 = objc_msgSend(v460, sel_initWithDomain_code_userInfo_, v461, v517, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v463 = objc_msgSend(v462, sel_domain);
      v464 = static String._unconditionallyBridgeFromObjectiveC(_:)(v463);
      v466 = v465;

      if (v464 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v466 == v467)
        goto LABEL_358;
      v469 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of PathOrURL(v525, v521, (uint64_t)v526, 1);
      v58 = (char *)v528;
      if ((v469 & 1) == 0)
      {
        __break(1u);
LABEL_358:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        outlined consume of PathOrURL(v525, v521, (uint64_t)v526, 1);
LABEL_403:
        v58 = (char *)v528;
      }
LABEL_404:
      swift_willThrow();
      goto LABEL_405;
    }
    *(_QWORD *)&v535 = MEMORY[0x1E0DEE9E0];
    v235 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
    v237 = v236;
    v238 = (uint64_t)v525;
    v540 = v525;
    *(_QWORD *)&v541[0] = v9;
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v543, (uint64_t)v235, v237);
    v239 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
    v241 = v240;
    URL.init(_fileManagerFailableFileURLWithPath:)(v238, v9, (uint64_t)&v540);
    if (v540)
    {
      v538 = v540;
      v539[0] = v541[0];
      lazy protocol witness table accessor for type URL and conformance URL();
      AnyHashable.init<A>(_:)();
    }
    else
    {
      v543 = (Swift::String)0;
      v544 = 0u;
      v545 = 0;
    }
    specialized Dictionary.subscript.setter((uint64_t)&v543, (uint64_t)v239, v241);
    v415 = (char *)v535;
    v534 = v535;
    swift_bridgeObjectRetain();
    v523 = v415;
    if (v83 != 102)
    {
      if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
        goto LABEL_443;
      v416 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
      v418 = v417;
      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
      v419 = (int)POSIXErrorCode.rawValue.getter();
      v420 = objc_allocWithZone((Class)NSError);
      v421 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v422 = (char *)objc_msgSend(v420, sel_initWithDomain_code_userInfo_, v421, v419, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v423 = objc_msgSend(v422, sel_domain);
      v424 = static String._unconditionallyBridgeFromObjectiveC(_:)(v423);
      v426 = v425;

      if (v424 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain")) && v426 == v427)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v470 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v470 & 1) == 0)
          goto LABEL_442;
      }
      v540 = v422;
      lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
      AnyHashable.init<A>(_:)();
      specialized Dictionary.subscript.setter((uint64_t)&v543, (uint64_t)v416, v418);
      v415 = (char *)v534;
    }
    CocoaError.Code.init(fileErrno:reading:)(v83, 0);
    v522 = (uint64_t *)v533;
    if (*((_QWORD *)v415 + 2))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v532 = static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      v532 = MEMORY[0x1E0DEE9E0];
    }
    v471 = *((_QWORD *)v415 + 8);
    v526 = v415 + 64;
    v472 = -1;
    v473 = -1 << v415[32];
    v521 = ~v473;
    if (-v473 < 64)
      v472 = ~(-1 << -(char)v473);
    v474 = v472 & v471;
    v527 = (unint64_t)(63 - v473) >> 6;
    v475 = &v544;
    v476 = (_OWORD *)((char *)v539 + 8);
    v477 = (char *)v541 + 8;
    v524 = (char *)(v532 + 64);
    swift_bridgeObjectRetain();
    i = 0;
    v529 = (id)(MEMORY[0x1E0DEE9B8] + 8);
    v525 = (char *)v541 + 8;
    if (v474)
      goto LABEL_369;
LABEL_370:
    v485 = i + 1;
    if (__OFADD__(i, 1))
      goto LABEL_426;
    if (v485 < v527)
    {
      v486 = *((_QWORD *)v526 + v485);
      if (v486)
      {
LABEL_386:
        i = v485;
        v531 = (v486 - 1) & v486;
        for (n = __clz(__rbit64(v486)) + (v485 << 6); ; n = __clz(__rbit64(v474)) | (i << 6))
        {
          v488 = (uint64_t *)(*((_QWORD *)v415 + 6) + 16 * n);
          v490 = *v488;
          v489 = (void *)v488[1];
          outlined init with copy of AnyHashable(*((_QWORD *)v415 + 7) + 40 * n, (uint64_t)v475);
          v543._countAndFlagsBits = v490;
          v543._object = v489;
          v491 = v475[1];
          v535 = *v475;
          v536 = v491;
          v537 = *((_QWORD *)v475 + 4);
          v538 = (char *)v490;
          *(_QWORD *)&v539[0] = v489;
          swift_bridgeObjectRetain();
          swift_dynamicCast();
          v493 = (uint64_t)v538;
          v492 = *(_QWORD *)&v539[0];
          outlined init with take of Any(v476, v477);
          outlined init with take of Any(v477, v542);
          outlined init with take of Any(v542, &v540);
          v494 = specialized __RawDictionaryStorage.find<A>(_:)(v493, v492);
          v495 = v494;
          if ((v496 & 1) != 0)
          {
            v478 = v532;
            v479 = v475;
            v480 = v476;
            v481 = v415;
            v482 = (uint64_t *)(*(_QWORD *)(v532 + 48) + 16 * v494);
            swift_bridgeObjectRelease();
            *v482 = v493;
            v482[1] = v492;
            v415 = v481;
            v476 = v480;
            v475 = v479;
            v477 = v525;
            v483 = (_OWORD *)(*(_QWORD *)(v478 + 56) + 32 * v495);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v483);
            outlined init with take of Any(&v540, v483);
            v474 = v531;
            if (!v531)
              goto LABEL_370;
          }
          else
          {
            if (*(_QWORD *)(v532 + 16) >= *(_QWORD *)(v532 + 24))
              goto LABEL_420;
            *(_QWORD *)&v524[(v494 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v494;
            v497 = v532;
            v498 = (uint64_t *)(*(_QWORD *)(v532 + 48) + 16 * v494);
            *v498 = v493;
            v498[1] = v492;
            outlined init with take of Any(&v540, (_OWORD *)(*(_QWORD *)(v497 + 56) + 32 * v494));
            v499 = *(_QWORD *)(v497 + 16);
            v174 = __OFADD__(v499, 1);
            v500 = v499 + 1;
            if (v174)
              goto LABEL_422;
            v474 = v531;
            *(_QWORD *)(v532 + 16) = v500;
            if (!v474)
              goto LABEL_370;
          }
LABEL_369:
          v531 = (v474 - 1) & v474;
        }
      }
      v487 = i + 2;
      if (i + 2 < v527)
      {
        v486 = *((_QWORD *)v526 + v487);
        if (v486)
          goto LABEL_385;
        v487 = i + 3;
        if (i + 3 >= v527)
          goto LABEL_396;
        v486 = *((_QWORD *)v526 + v487);
        if (v486)
          goto LABEL_385;
        v487 = i + 4;
        if (i + 4 >= v527)
          goto LABEL_396;
        v486 = *((_QWORD *)v526 + v487);
        if (v486)
          goto LABEL_385;
        v487 = i + 5;
        if (i + 5 >= v527)
          goto LABEL_396;
        v486 = *((_QWORD *)v526 + v487);
        if (v486)
          goto LABEL_385;
        v487 = i + 6;
        if (i + 6 >= v527)
          goto LABEL_396;
        v486 = *((_QWORD *)v526 + v487);
        if (v486)
        {
LABEL_385:
          v485 = v487;
          goto LABEL_386;
        }
        v487 = i + 7;
        if (i + 7 < v527)
        {
          v486 = *((_QWORD *)v526 + v487);
          if (v486)
            goto LABEL_385;
          while (1)
          {
            v485 = v487 + 1;
            if (__OFADD__(v487, 1))
              goto LABEL_440;
            if (v485 >= v527)
              break;
            v486 = *((_QWORD *)v526 + v485);
            ++v487;
            if (v486)
              goto LABEL_386;
          }
        }
      }
    }
LABEL_396:
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v501 = objc_allocWithZone((Class)NSError);
    v502 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v503 = objc_msgSend(v501, sel_initWithDomain_code_userInfo_, v502, v522, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v504 = objc_msgSend(v503, sel_domain);
    v505 = static String._unconditionallyBridgeFromObjectiveC(_:)(v504);
    v507 = v506;

    if (v505 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) || v507 != v508)
    {
      v510 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v58 = (char *)v528;
      if ((v510 & 1) != 0)
        goto LABEL_404;
      __break(1u);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    goto LABEL_403;
  }
  if ((v529 & 1) != 0)
  {
    v62 = (void *)objc_opt_self();
    v63 = objc_msgSend(v62, sel_currentProgress);

    v64 = (uint64_t)v526;
    if (v63)
    {
      if (i)
        v65 = a3 - i;
      else
        v65 = 0;
      v66 = objc_msgSend(v62, sel_progressWithTotalUnitCount_, v65);
    }
    else
    {
      v66 = 0;
    }
    v58 = (char *)v528;
  }
  else
  {
    v66 = 0;
    v64 = (uint64_t)v526;
  }
  v543._countAndFlagsBits = (uint64_t)v525;
  v543._object = (void *)v9;
  *(_QWORD *)&v544 = v64;
  BYTE8(v544) = (_BYTE)v12;
  v326 = a3;
  v327 = v66;
  v328 = write(buffer:toFileDescriptor:path:parentProgress:)(i, v326, v531, (uint64_t)&v543, v66);
  v329 = v7;
  if (v7)
  {
    LODWORD(v532) = MEMORY[0x186DA4118](v328);
    if (v327 && objc_msgSend(v327, sel_isCancelled))
    {
      unlink(v58);
      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
      v330 = objc_allocWithZone((Class)NSError);
      v331 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v332 = objc_msgSend(v330, sel_initWithDomain_code_userInfo_, v331, 3072, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v333 = objc_msgSend(v332, sel_domain);
      v334 = static String._unconditionallyBridgeFromObjectiveC(_:)(v333);
      v336 = v335;

      if (v334 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v336 == v337)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v428 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v428 & 1) == 0)
          goto LABEL_438;
      }
      swift_willThrow();

      close(v531);
      goto LABEL_112;
    }
    v529 = v327;
    v518 = v7;
    v338 = v9;
    if ((v12 & 1) != 0)
    {
      v538 = (char *)MEMORY[0x1E0DEE9E0];
      v339 = v64;
      v340 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
      v342 = v341;
      v343 = v525;
      v540 = v525;
      *(_QWORD *)&v541[0] = v338;
      *((_QWORD *)&v541[0] + 1) = v339;
      lazy protocol witness table accessor for type URL and conformance URL();
      v344 = v343;
      swift_retain_n();
      swift_retain_n();
      v345 = v344;
      AnyHashable.init<A>(_:)();
      specialized Dictionary.subscript.setter((uint64_t)&v543, (uint64_t)v340, v342);
      v346 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
      v348 = v347;
      v543._countAndFlagsBits = (uint64_t)v345;
      v543._object = (void *)v338;
      *(_QWORD *)&v544 = v339;
      v349 = URL.path(percentEncoded:)(0);
      v540 = (char *)v349._countAndFlagsBits;
      *(_QWORD *)&v541[0] = v349._object;
      AnyHashable.init<A>(_:)();
      specialized Dictionary.subscript.setter((uint64_t)&v543, (uint64_t)v346, v348);
      static CocoaError._errorWithErrno(_:reading:variant:userInfo:)(v532, 0, 0, 0, (uint64_t)v538, &v543);
      swift_bridgeObjectRelease();
      v350 = v339;
      v58 = (char *)v528;
      outlined consume of PathOrURL(v343, v338, v350, 1);
    }
    else
    {
      *(_QWORD *)&v535 = MEMORY[0x1E0DEE9E0];
      v367 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
      v369 = v368;
      v370 = (uint64_t)v525;
      v540 = v525;
      *(_QWORD *)&v541[0] = v338;
      swift_bridgeObjectRetain();
      AnyHashable.init<A>(_:)();
      specialized Dictionary.subscript.setter((uint64_t)&v543, (uint64_t)v367, v369);
      v371 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
      v373 = v372;
      URL.init(_fileManagerFailableFileURLWithPath:)(v370, v338, (uint64_t)&v540);
      if (v540)
      {
        v538 = v540;
        v539[0] = v541[0];
        lazy protocol witness table accessor for type URL and conformance URL();
        AnyHashable.init<A>(_:)();
      }
      else
      {
        v543 = (Swift::String)0;
        v544 = 0u;
        v545 = 0;
      }
      specialized Dictionary.subscript.setter((uint64_t)&v543, (uint64_t)v371, v373);
      static CocoaError._errorWithErrno(_:reading:variant:userInfo:)(v532, 0, 0, 0, v535, &v543);
      swift_bridgeObjectRelease();
    }
    swift_willThrow();

    close(v531);
LABEL_405:
    v187 = (int64_t)v58;
    goto LABEL_406;
  }
  v520 = v21;
  v351 = *(_QWORD *)(v532 + 64);
  v529 = v327;
  i = v532 + 64;
  v352 = 1 << *(_BYTE *)(v532 + 32);
  v353 = -1;
  if (v352 < 64)
    v353 = ~(-1 << v352);
  v354 = v353 & v351;
  v355 = (unint64_t)(v352 + 63) >> 6;
  swift_bridgeObjectRetain();
  v356 = 0;
  while (1)
  {
    v362 = v329;
    if (v354)
    {
      v357 = __clz(__rbit64(v354));
      v354 &= v354 - 1;
      v358 = v357 | (v356 << 6);
      goto LABEL_238;
    }
    v174 = __OFADD__(v356++, 1);
    v363 = v528;
    if (v174)
      goto LABEL_423;
    if (v356 >= v355)
      goto LABEL_255;
    v364 = *(_QWORD *)(i + 8 * v356);
    if (!v364)
      break;
LABEL_250:
    v354 = (v364 - 1) & v364;
    v358 = __clz(__rbit64(v364)) + (v356 << 6);
LABEL_238:
    v359 = (uint64_t *)(*(_QWORD *)(v532 + 56) + 16 * v358);
    v360 = *v359;
    v361 = v359[1];
    swift_bridgeObjectRetain_n();
    outlined copy of Data._Representation(v360, v361);
    specialized Data._Representation.withUnsafeBytes<A>(_:)(v360, v361);
    v329 = v362;
    outlined consume of Data._Representation(v360, v361);
    swift_bridgeObjectRelease();
  }
  v365 = v356 + 1;
  if (v356 + 1 >= v355)
    goto LABEL_255;
  v364 = *(_QWORD *)(i + 8 * v365);
  if (v364)
    goto LABEL_249;
  v365 = v356 + 2;
  if (v356 + 2 >= v355)
    goto LABEL_255;
  v364 = *(_QWORD *)(i + 8 * v365);
  if (v364)
    goto LABEL_249;
  v365 = v356 + 3;
  if (v356 + 3 >= v355)
    goto LABEL_255;
  v364 = *(_QWORD *)(i + 8 * v365);
  if (v364)
  {
LABEL_249:
    v356 = v365;
    goto LABEL_250;
  }
  while (1)
  {
    v356 = v365 + 1;
    if (__OFADD__(v365, 1))
      goto LABEL_429;
    if (v356 >= v355)
      break;
    v364 = *(_QWORD *)(i + 8 * v356);
    ++v365;
    if (v364)
      goto LABEL_250;
  }
LABEL_255:
  swift_release();

  close(v531);
  MEMORY[0x186DA9E78](v363, -1, -1);
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in writeToFileAux(path:buffer:options:attributes:reportProgress:)(const char *a1, char *a2, std::error_category *a3, uint64_t a4, char a5, char *a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  int v11;
  void *v12;
  char *v15;
  const char *v16;
  char *v17;
  char *v18;
  char *v19;
  Swift::String v20;
  uint64_t countAndFlagsBits;
  unint64_t object;
  id v23;
  uint64_t v24;
  id v25;
  id v26;
  const char *v27;
  const char *v28;
  char v30;
  uint64_t v31;
  const std::error_category *v32;
  uint64_t result;
  uint64_t v34;
  id v35;
  void *v36;
  id v37;
  void *v38;
  void *v39;
  id v40;
  void *v41;
  id v42;
  std::error_category *v43;
  std::error_category *v44;
  Swift::String v45;
  Swift::String v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  const std::error_category *v53;
  __int128 v54;
  const std::error_category *v55;
  Swift::String v56;
  id v57;
  void *v58;
  const std::error_category *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  id v69;
  id v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  Swift::String v74;
  char *v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  id v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  const std::error_category *v87;
  BOOL v88;
  int v89;
  uint64_t v90;
  const std::error_category *cat;
  void *v92;
  id v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  id v98;
  uint64_t v99;
  id v100;
  uint64_t v101;
  char *v102;
  id v103;
  std::error_category *v104;
  std::error_category *v105;
  id v106;
  std::error_category *v107;
  int v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  std::error_category *v112;
  void *v113;
  id v114;
  uint64_t v115;
  id v116;
  char v117;
  uint64_t v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  id v124;
  id v125;
  id v126;
  uint64_t v127;
  uint64_t v128;
  Swift::String v129;
  char *v130;
  id v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  id v135;
  uint64_t v136;
  id v137;
  id v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  id v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  id v147;
  uint64_t v148;
  uint64_t v149;
  id v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  id v155;
  uint64_t v156;
  uint64_t v157;
  void *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  Swift::Int isStackAllocationSafe;
  std::error_category *v166;
  uint64_t v167;
  const char *v168;
  char v169;
  char v170;
  const char *v171;
  char v172;
  char v173;
  int v174;
  id v175;
  uint64_t v176;
  id v177;
  id v178;
  id v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  id v183;
  uint64_t v184;
  uint64_t v185;
  void *v186;
  uint64_t v187;
  id v188;
  id v189;
  id v190;
  uint64_t v191;
  uint64_t v192;
  Swift::String v193;
  uint64_t v194;
  id v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  id v199;
  uint64_t v200;
  id v201;
  id v202;
  id v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  id v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  id v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  id v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  id v219;
  uint64_t v220;
  id v221;
  id v222;
  id v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  id v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  id v232;
  uint64_t v233;
  id v234;
  id v235;
  id v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  __int128 *v244;
  _OWORD *v245;
  _OWORD *v246;
  __int128 *v247;
  _OWORD *v248;
  std::error_category *v249;
  uint64_t *v250;
  _OWORD *v251;
  unint64_t k;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  char **v256;
  char *v257;
  char *v258;
  __int128 v259;
  uint64_t v260;
  unint64_t v261;
  unint64_t v262;
  char v263;
  uint64_t *v264;
  uint64_t v265;
  BOOL v266;
  uint64_t v267;
  id v268;
  uint64_t v269;
  id v270;
  id v271;
  id v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  char v277;
  char v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  _OWORD *v283;
  char *v284;
  uint64_t v285;
  _OWORD *v286;
  char *v287;
  std::error_category **v288;
  _OWORD *v289;
  unint64_t m;
  int64_t v291;
  unint64_t v292;
  int64_t v293;
  char **v294;
  char *v295;
  char *v296;
  __int128 v297;
  uint64_t v298;
  unint64_t v299;
  unint64_t v300;
  char v301;
  std::error_category **v302;
  uint64_t v303;
  uint64_t v304;
  id v305;
  uint64_t v306;
  id v307;
  id v308;
  id v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  char v314;
  char v315;
  char *v316;
  id v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  id v321;
  uint64_t v322;
  id v323;
  id v324;
  id v325;
  std::error_category *v326;
  std::error_category *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  unint64_t v331;
  __int128 *v332;
  _OWORD *v333;
  __int128 *v334;
  std::error_category *v335;
  char *v336;
  uint64_t *v337;
  _OWORD *v338;
  unint64_t i;
  uint64_t v340;
  unint64_t v341;
  uint64_t v342;
  uint64_t v343;
  char **v344;
  char *v345;
  char *v346;
  __int128 v347;
  uint64_t v348;
  unint64_t v349;
  unint64_t v350;
  char v351;
  uint64_t *v352;
  uint64_t v353;
  uint64_t v354;
  id v355;
  uint64_t v356;
  id v357;
  id v358;
  id v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  char v364;
  char v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  unint64_t v369;
  _OWORD *v370;
  char *v371;
  uint64_t v372;
  _OWORD *v373;
  char *v374;
  std::error_category **v375;
  _OWORD *v376;
  unint64_t j;
  int64_t v378;
  unint64_t v379;
  int64_t v380;
  uint64_t v381;
  char **v382;
  char *v383;
  char *v384;
  __int128 v385;
  uint64_t v386;
  unint64_t v387;
  unint64_t v388;
  char v389;
  std::error_category **v390;
  uint64_t v391;
  uint64_t v392;
  id v393;
  uint64_t v394;
  id v395;
  id v396;
  id v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  char v402;
  char v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  unint64_t v407;
  __int128 *v408;
  _OWORD *v409;
  __int128 *v410;
  std::error_category *v411;
  uint64_t v412;
  uint64_t *v413;
  _OWORD *v414;
  unint64_t v415;
  int64_t v416;
  unint64_t v417;
  int64_t v418;
  uint64_t v419;
  char **v420;
  char *v421;
  char *v422;
  __int128 v423;
  uint64_t v424;
  unint64_t v425;
  unint64_t v426;
  char v427;
  uint64_t *v428;
  uint64_t v429;
  uint64_t v430;
  id v431;
  uint64_t v432;
  id v433;
  id v434;
  id v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  char v440;
  char v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  unint64_t v445;
  _OWORD *v446;
  char *v447;
  uint64_t v448;
  _OWORD *v449;
  char *v450;
  std::error_category **v451;
  _OWORD *v452;
  unint64_t v453;
  uint64_t v454;
  unint64_t v455;
  uint64_t v456;
  uint64_t v457;
  char **v458;
  char *v459;
  char *v460;
  __int128 v461;
  uint64_t v462;
  unint64_t v463;
  unint64_t v464;
  char v465;
  std::error_category **v466;
  uint64_t v467;
  uint64_t v468;
  id v469;
  uint64_t v470;
  id v471;
  id v472;
  id v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  char v478;
  uint64_t v479;
  Swift::String v480;
  _QWORD v481[2];
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  _QWORD *v485;
  uint64_t v486;
  uint64_t v487;
  id v488;
  uint64_t v489;
  uint64_t v490;
  _QWORD *v491;
  char *v492;
  char *v493;
  char *v494;
  int64_t v495;
  char *v496;
  char *v497;
  uint64_t v498;
  char *v499;
  _QWORD *v500;
  char *v501;
  int v502;
  __int128 v503;
  int v504;
  std::error_code v505;
  __int16 v506;
  char v507;
  __int128 v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  __int128 v512;
  __int128 v513;
  __int128 v514;
  __int128 v515;
  __int128 v516;
  __int128 v517;
  __int128 v518;
  __int128 v519;
  __int128 v520;
  __int128 v521;
  __int128 v522;
  __int128 v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  __int128 v527;
  __int128 v528;
  __int128 v529;
  __int128 v530;
  __int128 v531;
  __int128 v532;
  __int128 v533;
  __int128 v534;
  __int128 v535;
  __int128 v536;
  __int128 v537;
  __int128 v538;
  __int128 v539;
  __int128 v540;
  __int128 v541;
  __int128 v542;
  __int128 v543;
  __int128 v544;
  __int128 v545;
  __int128 v546;
  __int128 v547;
  __int128 v548;
  __int128 v549;
  __int128 v550;
  __int128 v551;
  __int128 v552;
  __int128 v553;
  __int128 v554;
  __int128 v555;
  __int128 v556;
  __int128 v557;
  __int128 v558;
  __int128 v559;
  __int128 v560;
  __int128 v561;
  __int128 v562;
  __int128 v563;
  __int128 v564;
  __int128 v565;
  __int128 v566;
  __int128 v567;
  __int128 v568;
  __int128 v569;
  __int128 v570;
  __int128 v571;
  __int128 v572;
  __int128 v573;
  uint64_t v574;
  char *v575;
  _OWORD v576[2];
  char *v577;
  __int128 v578;
  BOOL v579;
  _OWORD v580[2];
  Swift::String v581;
  uint64_t v582;
  __int128 v583;
  __int128 v584;
  __int128 v585;
  __int128 v586;
  __int128 v587;
  __int128 v588;
  __int128 v589;
  __int128 v590;
  __int128 v591;
  __int128 v592;
  __int128 v593;
  __int128 v594;
  __int128 v595;
  __int128 v596;
  __int128 v597;
  __int128 v598;
  __int128 v599;
  __int128 v600;
  __int128 v601;
  __int128 v602;
  __int128 v603;
  __int128 v604;
  __int128 v605;
  __int128 v606;
  __int128 v607;
  __int128 v608;
  __int128 v609;
  __int128 v610;
  __int128 v611;
  __int128 v612;
  __int128 v613;
  __int128 v614;
  __int128 v615;
  __int128 v616;
  __int128 v617;
  __int128 v618;
  __int128 v619;
  __int128 v620;
  __int128 v621;
  __int128 v622;
  __int128 v623;
  __int128 v624;
  __int128 v625;
  __int128 v626;
  __int128 v627;
  __int128 v628;
  __int128 v629;
  __int128 v630;
  __int128 v631;
  __int128 v632;
  __int128 v633;
  __int128 v634;
  __int128 v635;
  __int128 v636;
  __int128 v637;
  __int128 v638;
  __int128 v639;
  __int128 v640;
  __int128 v641;
  __int128 v642;
  __int128 v643;
  __int128 v644;
  __int128 v645;
  __int128 v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;

  v649 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v23 = objc_allocWithZone((Class)NSError);
    v24 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v25 = objc_msgSend(v23, sel_initWithDomain_code_userInfo_, v24, 514, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    a3 = (std::error_category *)objc_msgSend(v25, sel_domain);
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
    v16 = v27;

    if (v26 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v16 == v28)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v15 = (char *)v28;
      v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v30 & 1) == 0)
      {
        __break(1u);
        goto LABEL_13;
      }
    }
    return swift_willThrow();
  }
  v12 = v10;
  v15 = a2;
  v16 = a1;
  LODWORD(v495) = a7;
  v499 = a6;
  v506 = 0;
  v507 = 1;
  v647 = 0;
  v648 = 0;
  v11 = a5 & 1;
  v496 = (char *)a4;
  v497 = (char *)a8;
  v493 = a2;
  if ((a5 & 1) == 0)
  {
LABEL_13:
    swift_bridgeObjectRetain();
    v31 = (uint64_t)v15;
    v32 = a3;
    goto LABEL_37;
  }
  swift_retain_n();
  v17 = v15;
  swift_retain_n();
  v18 = v17;
  LODWORD(v498) = v11;
  if (_foundation_swift_url_feature_enabled())
  {
    v582 = a4;
    v19 = v18;
    v489 = (uint64_t)a3;
    swift_retain();
    swift_retain();
    v20 = URL.path(percentEncoded:)(1);
    countAndFlagsBits = v20._countAndFlagsBits;
    v581 = v20;
    swift_bridgeObjectRetain();
    v490 = (uint64_t)v12;
    if (String.count.getter() <= 1)
    {
      object = (unint64_t)v20._object;
    }
    else
    {
      object = (unint64_t)v20._object;
      if ((specialized BidirectionalCollection.last.getter(v20._countAndFlagsBits, (unint64_t)v20._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        countAndFlagsBits = v581._countAndFlagsBits;
        object = (unint64_t)v581._object;
      }
    }
    *(_QWORD *)&v508 = Set.init(minimumCapacity:)();
    v48 = specialized Set._Variant.insert(_:)(&v577, 0x2FuLL);
    v49 = v508;
    v50 = HIBYTE(object) & 0xF;
    if ((object & 0x2000000000000000) == 0)
      v50 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (v50)
    {
      v494 = v19;
      *(_QWORD *)&v508 = countAndFlagsBits;
      *((_QWORD *)&v508 + 1) = object;
      MEMORY[0x1E0C80A78](v48);
      v482 = (uint64_t)&v508;
      v483 = v49;
      swift_bridgeObjectRetain();
      v51 = v490;
      v52 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:), (uint64_t)v481, countAndFlagsBits, object);
      v490 = v51;
      if (v53 == (const std::error_category *)1)
      {
        v54 = v508;
        swift_bridgeObjectRetain();
        v31 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v54, *((unint64_t *)&v54 + 1), v49);
        v32 = v55;
        swift_bridgeObjectRelease();
      }
      else
      {
        v31 = (uint64_t)v52;
        v32 = v53;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v15 = v493;
      v19 = v494;
      v12 = (void *)v490;
      if (!v32)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        a3 = (std::error_category *)v489;
        v61 = (uint64_t)v496;
        outlined consume of PathOrURL(v15, v489, (uint64_t)v496, 1);
        outlined consume of PathOrURL(v15, (uint64_t)a3, v61, 1);
        swift_release();
        swift_release();

        v31 = 0;
        v32 = (const std::error_category *)0xE000000000000000;
        goto LABEL_35;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      v31 = 0;
      v32 = (const std::error_category *)0xE000000000000000;
      v15 = v493;
      v12 = (void *)v490;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a3 = (std::error_category *)v489;
    v60 = (uint64_t)v496;
    outlined consume of PathOrURL(v15, v489, (uint64_t)v496, 1);
    outlined consume of PathOrURL(v15, (uint64_t)a3, v60, 1);
    swift_release();
    swift_release();

LABEL_35:
    swift_release();
    swift_release();

    goto LABEL_36;
  }
  v34 = (uint64_t)a3;
  v35 = objc_msgSend(v18, sel__parameterString);
  if (v35)
  {
    v36 = v35;
    v490 = (uint64_t)v12;
    v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
    v39 = v38;

    if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
      && (v40 = objc_msgSend(v18, sel_path)) != 0)
    {
      v41 = v40;
      v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
      v44 = v43;

      v581._countAndFlagsBits = (uint64_t)v42;
      v581._object = v44;
      swift_bridgeObjectRetain();
      v45._countAndFlagsBits = 59;
      v45._object = (void *)0xE100000000000000;
      String.append(_:)(v45);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v46._countAndFlagsBits = (uint64_t)v37;
      v46._object = v39;
      String.append(_:)(v46);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v47 = v493;
      a3 = (std::error_category *)v34;
      outlined consume of PathOrURL(v493, v34, (uint64_t)v496, 1);
      v31 = v581._countAndFlagsBits;
      v32 = v44;
      outlined consume of PathOrURL(v493, v34, (uint64_t)v496, 1);
    }
    else
    {
      v581._countAndFlagsBits = 59;
      v581._object = (void *)0xE100000000000000;
      v56._countAndFlagsBits = (uint64_t)v37;
      v56._object = v39;
      String.append(_:)(v56);
      swift_bridgeObjectRelease();
      v47 = v493;
      a3 = (std::error_category *)v34;
      outlined consume of PathOrURL(v493, v34, (uint64_t)v496, 1);
      outlined consume of PathOrURL(v493, v34, (uint64_t)v496, 1);
      v31 = 59;
      v32 = (const std::error_category *)0xE100000000000000;
    }
    swift_release();
    swift_release();

    v15 = v47;
    v12 = (void *)v490;
    goto LABEL_36;
  }
  v57 = objc_msgSend(v18, sel_path);
  if (v57)
  {
    v58 = v57;
    v31 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
    v32 = v59;

    a3 = (std::error_category *)v34;
    outlined consume of PathOrURL(v493, v34, (uint64_t)v496, 1);
    outlined consume of PathOrURL(v493, v34, (uint64_t)v496, 1);
    swift_release();
    swift_release();

    v15 = v493;
LABEL_36:
    v11 = v498;
    goto LABEL_37;
  }
  outlined consume of PathOrURL(v493, (uint64_t)a3, (uint64_t)v496, 1);
  outlined consume of PathOrURL(v493, (uint64_t)a3, (uint64_t)v496, 1);
  swift_release();
  swift_release();

  v15 = v493;
  v31 = 0;
  v32 = (const std::error_category *)0xE000000000000000;
LABEL_37:
  *(_QWORD *)&v505.__val_ = v31;
  v505.__cat_ = v32;
  bzero(&v581, 0x418uLL);
  v502 = 5;
  v503 = xmmword_182150610;
  v504 = 0;
  if (!getattrlist(v16, &v502, &v581, 0x418uLL, 1u))
  {
    v63 = (uint64_t)v496;
    if (LODWORD(v581._object) >= 0x10000)
    {
      LODWORD(v482) = 0;
      v481[1] = 3455;
      LOBYTE(v481[0]) = 2;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      goto LABEL_421;
    }
    v506 = (__int16)v581._object;
    v507 = 0;
    if (HIDWORD(v581._countAndFlagsBits) == 1 && HIDWORD(v582) <= 1)
    {
      v508 = v583;
      v509 = v584;
      v510 = v585;
      v511 = v586;
      v512 = v587;
      v513 = v588;
      v514 = v589;
      v515 = v590;
      v516 = v591;
      v517 = v592;
      v518 = v593;
      v519 = v594;
      v520 = v595;
      v521 = v596;
      v522 = v597;
      v523 = v598;
      v524 = v599;
      v525 = v600;
      v526 = v601;
      v527 = v602;
      v528 = v603;
      v529 = v604;
      v530 = v605;
      v531 = v606;
      v532 = v607;
      v533 = v608;
      v534 = v609;
      v535 = v610;
      v536 = v611;
      v537 = v612;
      v538 = v613;
      v539 = v614;
      v540 = v615;
      v541 = v616;
      v542 = v617;
      v543 = v618;
      v544 = v619;
      v545 = v620;
      v546 = v621;
      v547 = v622;
      v548 = v623;
      v549 = v624;
      v550 = v625;
      v551 = v626;
      v552 = v627;
      v553 = v628;
      v554 = v629;
      v555 = v630;
      v556 = v631;
      v557 = v632;
      v558 = v633;
      v559 = v634;
      v560 = v635;
      v561 = v636;
      v562 = v637;
      v563 = v638;
      v564 = v639;
      v565 = v640;
      v566 = v641;
      v567 = v642;
      v568 = v643;
      v569 = v644;
      v570 = v645;
      v571 = v646;
      *(_QWORD *)&v505.__val_ = String.init(cString:)();
      v505.__cat_ = v87;
      swift_bridgeObjectRelease();
    }
LABEL_50:
    v88 = v11 != 0;
    v89 = v11;
    v90 = *(_QWORD *)&v505.__val_;
    cat = v505.__cat_;
    v577 = v15;
    *(_QWORD *)&v578 = a3;
    *((_QWORD *)&v578 + 1) = v63;
    v579 = v88;
    swift_bridgeObjectRetain();
    createProtectedTemporaryFile(at:inPath:options:)(v90, (unint64_t)cat, &v577, v499, &v508);
    v92 = v12;
    if (v12)
    {
      swift_bridgeObjectRelease();
      *(_QWORD *)&v508 = v12;
      v93 = v12;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      if ((swift_dynamicCast() & 1) == 0)
      {
        swift_willThrow();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      v94 = v577;
      v499 = (char *)objc_msgSend(v577, sel_code);
      v95 = v94;
      specialized _BridgedStoredNSError.errorUserInfo.getter(v95);
      v97 = v96;

      v577 = v97;
      v98 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUserStringVariant"));
      *((_QWORD *)&v509 + 1) = MEMORY[0x1E0DEA968];
      *(_QWORD *)&v508 = 0x7265646C6F46;
      *((_QWORD *)&v508 + 1) = 0xE600000000000000;
      specialized Dictionary.subscript.setter((uint64_t)&v508, (uint64_t)v98, v99);
      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
      v100 = objc_allocWithZone((Class)NSError);
      v101 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v102 = (char *)objc_msgSend(v100, sel_initWithDomain_code_userInfo_, v101, v499, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v68 = (uint64_t)objc_msgSend(v102, sel_domain);
      v103 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)v68);
      v105 = v104;

      v106 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
      a3 = v107;
      if (v103 == v106 && v105 == v107)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v117 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v117 & 1) == 0)
          goto LABEL_404;
      }
      swift_willThrow();

      goto LABEL_384;
    }
    LODWORD(v498) = v89;
    v108 = v508;
    v109 = v509;
    v494 = (char *)*((_QWORD *)&v508 + 1);
    v111 = *((_QWORD *)&v509 + 1);
    v110 = v510;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v647 = v111;
    v648 = v110;
    LODWORD(v490) = v108;
    if ((v108 & 0x80000000) == 0)
    {
      v491 = (_QWORD *)v109;
      v492 = (char *)v110;
      v486 = v111;
      if ((v495 & 1) != 0)
      {
        v112 = a3;
        v113 = (void *)objc_opt_self();
        v114 = objc_msgSend(v113, sel_currentProgress);

        if (v114)
        {
          if (v497)
            v115 = a9 - (_QWORD)v497;
          else
            v115 = 0;
          v116 = objc_msgSend(v113, sel_progressWithTotalUnitCount_, v115);
        }
        else
        {
          v116 = 0;
        }
        a3 = v112;
      }
      else
      {
        v116 = 0;
      }
      v158 = v493;
      *(_QWORD *)&v508 = v493;
      *((_QWORD *)&v508 + 1) = a3;
      v160 = (uint64_t)v496;
      v159 = v497;
      *(_QWORD *)&v509 = v496;
      BYTE8(v509) = (_DWORD)v498 != 0;
      v161 = v490;
      v488 = v116;
      write(buffer:toFileDescriptor:path:parentProgress:)((uint64_t)v497, a9, v490, (uint64_t)&v508, v116);
      v487 = 0;
      writeExtendedAttributes(fd:attributes:)(v161, a10);
      outlined copy of PathOrURL(v158, (uint64_t)a3, v160, v498);
      swift_bridgeObjectRetain();
      specialized String.withFileSystemRepresentation<A>(_:)((uint64_t)v494, (unint64_t)v491, &v505, v158, (unint64_t)a3, v160, v498, v499, &v647, v159, a9, a10, &v506, v161);
      swift_bridgeObjectRelease();

      close(v161);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    v489 = (uint64_t)a3;
    v118 = swift_bridgeObjectRelease();
    a3 = (std::error_category *)MEMORY[0x186DA4118](v118);
    swift_bridgeObjectRetain();
    cleanupTemporaryDirectory(at:)(v111, v110);
    swift_bridgeObjectRelease();
    if ((_DWORD)v498)
    {
      v575 = (char *)MEMORY[0x1E0DEE9E0];
      v119 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
      v121 = v120;
      v122 = v493;
      v577 = v493;
      v123 = v489;
      *(_QWORD *)&v578 = v489;
      v68 = (uint64_t)v496;
      *((_QWORD *)&v578 + 1) = v496;
      lazy protocol witness table accessor for type URL and conformance URL();
      v124 = v122;
      swift_retain_n();
      swift_retain_n();
      v125 = v124;
      AnyHashable.init<A>(_:)();
      specialized Dictionary.subscript.setter((uint64_t)&v508, (uint64_t)v119, v121);
      v126 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
      v128 = v127;
      *(_QWORD *)&v508 = v125;
      *((_QWORD *)&v508 + 1) = v123;
      *(_QWORD *)&v509 = v68;
      v129 = URL.path(percentEncoded:)(0);
      v577 = (char *)v129._countAndFlagsBits;
      *(_QWORD *)&v578 = v129._object;
      AnyHashable.init<A>(_:)();
      specialized Dictionary.subscript.setter((uint64_t)&v508, (uint64_t)v126, v128);
      v130 = v575;
      v501 = v575;
      swift_bridgeObjectRetain();
      v490 = (uint64_t)v130;
      if ((_DWORD)a3 != 102)
      {
        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
          goto LABEL_421;
        v131 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
        v133 = v132;
        static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
        v134 = (int)POSIXErrorCode.rawValue.getter();
        v135 = objc_allocWithZone((Class)NSError);
        v136 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v137 = objc_msgSend(v135, sel_initWithDomain_code_userInfo_, v136, v134, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v138 = objc_msgSend(v137, sel_domain);
        v68 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v138);
        v140 = v139;

        if ((id)v68 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"))
          && v140 == v141)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          LODWORD(v68) = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v68 & 1) == 0)
            goto LABEL_414;
        }
        v577 = (char *)v137;
        lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
        AnyHashable.init<A>(_:)();
        specialized Dictionary.subscript.setter((uint64_t)&v508, (uint64_t)v131, v133);
        v130 = v501;
      }
      CocoaError.Code.init(fileErrno:reading:)((Swift::Int32)a3, 0);
      v488 = v500;
      if (*((_QWORD *)v130 + 2))
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
        v102 = (char *)static _DictionaryStorage.allocate(capacity:)();
      }
      else
      {
        v102 = (char *)MEMORY[0x1E0DEE9E0];
      }
      v328 = *((_QWORD *)v130 + 8);
      v495 = (int64_t)(v130 + 64);
      v329 = -1;
      v330 = -1 << v130[32];
      v487 = ~v330;
      if (-v330 < 64)
        v329 = ~(-1 << -(char)v330);
      v331 = v329 & v328;
      v494 = (char *)((unint64_t)(63 - v330) >> 6);
      v332 = &v509;
      a3 = (std::error_category *)v576 + 1;
      v333 = (__int128 *)((char *)&v578 + 8);
      v491 = v102 + 64;
      swift_bridgeObjectRetain();
      v498 = 0;
      v497 = (char *)(MEMORY[0x1E0DEE9B8] + 8);
      v492 = (char *)&v578 + 8;
      if (v331)
        goto LABEL_220;
LABEL_221:
      v340 = v498 + 1;
      if (__OFADD__(v498, 1))
        goto LABEL_396;
      if (v340 < (uint64_t)v494)
      {
        v341 = *(_QWORD *)(v495 + 8 * v340);
        v342 = v498 + 1;
        if (v341)
          goto LABEL_240;
        v342 = v498 + 2;
        if (v498 + 2 >= (uint64_t)v494)
          goto LABEL_246;
        v341 = *(_QWORD *)(v495 + 8 * v342);
        if (v341)
          goto LABEL_240;
        v342 = v498 + 3;
        if (v498 + 3 >= (uint64_t)v494)
          goto LABEL_246;
        v341 = *(_QWORD *)(v495 + 8 * v342);
        if (v341)
          goto LABEL_240;
        v342 = v498 + 4;
        if (v498 + 4 >= (uint64_t)v494)
          goto LABEL_246;
        v341 = *(_QWORD *)(v495 + 8 * v342);
        if (v341)
          goto LABEL_240;
        v342 = v498 + 5;
        if (v498 + 5 >= (uint64_t)v494)
          goto LABEL_246;
        v341 = *(_QWORD *)(v495 + 8 * v342);
        if (v341)
          goto LABEL_240;
        v342 = v498 + 6;
        if (v498 + 6 >= (uint64_t)v494)
          goto LABEL_246;
        v341 = *(_QWORD *)(v495 + 8 * v342);
        if (v341)
        {
LABEL_240:
          v498 = v342;
          v499 = (char *)((v341 - 1) & v341);
          for (i = __clz(__rbit64(v341)) + (v342 << 6); ; i = __clz(__rbit64(v331)) | (v498 << 6))
          {
            v344 = (char **)(*((_QWORD *)v130 + 6) + 16 * i);
            v346 = *v344;
            v345 = v344[1];
            outlined init with copy of AnyHashable(*((_QWORD *)v130 + 7) + 40 * i, (uint64_t)v332);
            *(_QWORD *)&v508 = v346;
            *((_QWORD *)&v508 + 1) = v345;
            v347 = v332[1];
            v572 = *v332;
            v573 = v347;
            v574 = *((_QWORD *)v332 + 4);
            v575 = v346;
            *(_QWORD *)&v576[0] = v345;
            swift_bridgeObjectRetain();
            swift_dynamicCast();
            v348 = (uint64_t)v575;
            v68 = *(_QWORD *)&v576[0];
            v577 = v575;
            *(_QWORD *)&v578 = *(_QWORD *)&v576[0];
            outlined init with take of Any(a3, v333);
            outlined init with take of Any(v333, v580);
            outlined init with take of Any(v580, &v577);
            v349 = specialized __RawDictionaryStorage.find<A>(_:)(v348, v68);
            v350 = v349;
            if ((v351 & 1) != 0)
            {
              v334 = v332;
              v335 = a3;
              v336 = v130;
              v337 = (uint64_t *)(*((_QWORD *)v102 + 6) + 16 * v349);
              swift_bridgeObjectRelease();
              *v337 = v348;
              v337[1] = v68;
              v130 = v336;
              a3 = v335;
              v332 = v334;
              v333 = v492;
              v338 = (_OWORD *)(*((_QWORD *)v102 + 7) + 32 * v350);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v338);
              outlined init with take of Any(&v577, v338);
              v331 = (unint64_t)v499;
              if (!v499)
                goto LABEL_221;
            }
            else
            {
              if (*((_QWORD *)v102 + 2) >= *((_QWORD *)v102 + 3))
                goto LABEL_392;
              *(_QWORD *)((char *)v491 + ((v349 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v349;
              v352 = (uint64_t *)(*((_QWORD *)v102 + 6) + 16 * v349);
              *v352 = v348;
              v352[1] = v68;
              outlined init with take of Any(&v577, (_OWORD *)(*((_QWORD *)v102 + 7) + 32 * v349));
              v353 = *((_QWORD *)v102 + 2);
              v266 = __OFADD__(v353, 1);
              v354 = v353 + 1;
              if (v266)
                goto LABEL_394;
              *((_QWORD *)v102 + 2) = v354;
              v331 = (unint64_t)v499;
              if (!v499)
                goto LABEL_221;
            }
LABEL_220:
            v499 = (char *)((v331 - 1) & v331);
          }
        }
        v343 = v498 + 7;
        if (v498 + 7 < (uint64_t)v494)
        {
          v341 = *(_QWORD *)(v495 + 8 * v343);
          if (v341)
          {
            v342 = v498 + 7;
            goto LABEL_240;
          }
          while (1)
          {
            v342 = v343 + 1;
            if (__OFADD__(v343, 1))
              goto LABEL_412;
            if (v342 >= (uint64_t)v494)
              break;
            v341 = *(_QWORD *)(v495 + 8 * v342);
            ++v343;
            if (v341)
              goto LABEL_240;
          }
        }
      }
LABEL_246:
      outlined consume of Set<A1>.Iterator._Variant<A><A1>();
      swift_bridgeObjectRelease();
      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
      v355 = objc_allocWithZone((Class)NSError);
      v356 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v357 = objc_msgSend(v355, sel_initWithDomain_code_userInfo_, v356, v488, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v358 = objc_msgSend(v357, sel_domain);
      v359 = static String._unconditionallyBridgeFromObjectiveC(_:)(v358);
      v361 = v360;

      if (v359 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v361 == v362)
        goto LABEL_252;
      v364 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of PathOrURL(v493, v489, (uint64_t)v496, 1);
      if ((v364 & 1) == 0)
      {
        __break(1u);
LABEL_252:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        outlined consume of PathOrURL(v493, v489, (uint64_t)v496, 1);
      }
LABEL_296:
      swift_willThrow();
      goto LABEL_384;
    }
    *(_QWORD *)&v572 = MEMORY[0x1E0DEE9E0];
    v150 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
    v152 = v151;
    v153 = (uint64_t)v493;
    v577 = v493;
    v154 = v489;
    *(_QWORD *)&v578 = v489;
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v508, (uint64_t)v150, v152);
    v155 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
    v157 = v156;
    URL.init(_fileManagerFailableFileURLWithPath:)(v153, v154, (uint64_t)&v577);
    if (v577)
    {
      v575 = v577;
      v576[0] = v578;
      lazy protocol witness table accessor for type URL and conformance URL();
      AnyHashable.init<A>(_:)();
    }
    else
    {
      v508 = 0u;
      v509 = 0u;
      *(_QWORD *)&v510 = 0;
    }
    specialized Dictionary.subscript.setter((uint64_t)&v508, (uint64_t)v155, v157);
    v227 = (char *)v572;
    v501 = (char *)v572;
    swift_bridgeObjectRetain();
    v492 = v227;
    if ((_DWORD)a3 != 102)
    {
      if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
        goto LABEL_421;
      v228 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
      v230 = v229;
      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
      v231 = (int)POSIXErrorCode.rawValue.getter();
      v232 = objc_allocWithZone((Class)NSError);
      v233 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v234 = objc_msgSend(v232, sel_initWithDomain_code_userInfo_, v233, v231, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v235 = objc_msgSend(v234, sel_domain);
      v236 = static String._unconditionallyBridgeFromObjectiveC(_:)(v235);
      v238 = v237;

      if (v236 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain")) && v238 == v239)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v365 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v365 & 1) == 0)
          goto LABEL_415;
      }
      v577 = (char *)v234;
      lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
      AnyHashable.init<A>(_:)();
      specialized Dictionary.subscript.setter((uint64_t)&v508, (uint64_t)v228, v230);
      v227 = v501;
    }
    CocoaError.Code.init(fileErrno:reading:)((Swift::Int32)a3, 0);
    v491 = v500;
    if (*((_QWORD *)v227 + 2))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v102 = (char *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      v102 = (char *)MEMORY[0x1E0DEE9E0];
    }
    v366 = *((_QWORD *)v227 + 8);
    v496 = v227 + 64;
    v367 = -1;
    v368 = -1 << v227[32];
    v490 = ~v368;
    if (-v368 < 64)
      v367 = ~(-1 << -(char)v368);
    v369 = v367 & v366;
    v495 = (unint64_t)(63 - v368) >> 6;
    v68 = (uint64_t)&v509;
    v370 = (_OWORD *)((char *)v576 + 8);
    v371 = (char *)&v578 + 8;
    v493 = v102 + 64;
    swift_bridgeObjectRetain();
    v498 = 0;
    v497 = (char *)(MEMORY[0x1E0DEE9B8] + 8);
    v494 = (char *)&v578 + 8;
    if (v369)
      goto LABEL_263;
LABEL_264:
    v378 = v498 + 1;
    if (__OFADD__(v498, 1))
      goto LABEL_397;
    if (v378 < v495)
    {
      v379 = *(_QWORD *)&v496[8 * v378];
      v380 = v498 + 1;
      if (v379)
        goto LABEL_283;
      v380 = v498 + 2;
      if (v498 + 2 >= v495)
        goto LABEL_289;
      v379 = *(_QWORD *)&v496[8 * v380];
      if (v379)
        goto LABEL_283;
      v380 = v498 + 3;
      if (v498 + 3 >= v495)
        goto LABEL_289;
      v379 = *(_QWORD *)&v496[8 * v380];
      if (v379)
        goto LABEL_283;
      v380 = v498 + 4;
      if (v498 + 4 >= v495)
        goto LABEL_289;
      v379 = *(_QWORD *)&v496[8 * v380];
      if (v379)
        goto LABEL_283;
      v380 = v498 + 5;
      if (v498 + 5 >= v495)
        goto LABEL_289;
      v379 = *(_QWORD *)&v496[8 * v380];
      if (v379)
        goto LABEL_283;
      v380 = v498 + 6;
      if (v498 + 6 >= v495)
        goto LABEL_289;
      v379 = *(_QWORD *)&v496[8 * v380];
      if (v379)
      {
LABEL_283:
        v498 = v380;
        v499 = (char *)((v379 - 1) & v379);
        for (j = __clz(__rbit64(v379)) + (v380 << 6); ; j = __clz(__rbit64(v369)) | (v498 << 6))
        {
          v382 = (char **)(*((_QWORD *)v227 + 6) + 16 * j);
          v384 = *v382;
          v383 = v382[1];
          outlined init with copy of AnyHashable(*((_QWORD *)v227 + 7) + 40 * j, v68);
          *(_QWORD *)&v508 = v384;
          *((_QWORD *)&v508 + 1) = v383;
          v385 = *(_OWORD *)(v68 + 16);
          v572 = *(_OWORD *)v68;
          v573 = v385;
          v574 = *(_QWORD *)(v68 + 32);
          v575 = v384;
          *(_QWORD *)&v576[0] = v383;
          swift_bridgeObjectRetain();
          swift_dynamicCast();
          a3 = (std::error_category *)v575;
          v386 = *(_QWORD *)&v576[0];
          v577 = v575;
          *(_QWORD *)&v578 = *(_QWORD *)&v576[0];
          outlined init with take of Any(v370, v371);
          outlined init with take of Any(v371, v580);
          outlined init with take of Any(v580, &v577);
          v387 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a3, v386);
          v388 = v387;
          if ((v389 & 1) != 0)
          {
            v372 = v68;
            v373 = v370;
            v374 = v227;
            v375 = (std::error_category **)(*((_QWORD *)v102 + 6) + 16 * v387);
            swift_bridgeObjectRelease();
            *v375 = a3;
            v375[1] = (std::error_category *)v386;
            v227 = v374;
            v370 = v373;
            v68 = v372;
            v371 = v494;
            v376 = (_OWORD *)(*((_QWORD *)v102 + 7) + 32 * v388);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v376);
            outlined init with take of Any(&v577, v376);
            v369 = (unint64_t)v499;
            if (!v499)
              goto LABEL_264;
          }
          else
          {
            if (*((_QWORD *)v102 + 2) >= *((_QWORD *)v102 + 3))
              goto LABEL_393;
            *(_QWORD *)&v493[(v387 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v387;
            v390 = (std::error_category **)(*((_QWORD *)v102 + 6) + 16 * v387);
            *v390 = a3;
            v390[1] = (std::error_category *)v386;
            outlined init with take of Any(&v577, (_OWORD *)(*((_QWORD *)v102 + 7) + 32 * v387));
            v391 = *((_QWORD *)v102 + 2);
            v266 = __OFADD__(v391, 1);
            v392 = v391 + 1;
            if (v266)
              goto LABEL_395;
            *((_QWORD *)v102 + 2) = v392;
            v369 = (unint64_t)v499;
            if (!v499)
              goto LABEL_264;
          }
LABEL_263:
          v499 = (char *)((v369 - 1) & v369);
        }
      }
      v381 = v498 + 7;
      if (v498 + 7 < v495)
      {
        v379 = *(_QWORD *)&v496[8 * v381];
        if (v379)
        {
          v380 = v498 + 7;
          goto LABEL_283;
        }
        while (1)
        {
          v380 = v381 + 1;
          if (__OFADD__(v381, 1))
            goto LABEL_413;
          if (v380 >= v495)
            break;
          v379 = *(_QWORD *)&v496[8 * v380];
          ++v381;
          if (v379)
            goto LABEL_283;
        }
      }
    }
LABEL_289:
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v393 = objc_allocWithZone((Class)NSError);
    v394 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v395 = objc_msgSend(v393, sel_initWithDomain_code_userInfo_, v394, v491, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v396 = objc_msgSend(v395, sel_domain);
    v397 = static String._unconditionallyBridgeFromObjectiveC(_:)(v396);
    v399 = v398;

    if (v397 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) || v399 != v400)
    {
      v402 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v402 & 1) != 0)
        goto LABEL_296;
      __break(1u);
    }
LABEL_295:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    goto LABEL_296;
  }
  v62 = MEMORY[0x186DA4118]();
  v63 = (uint64_t)v496;
  if (v62 == 2 || MEMORY[0x186DA4118]() == 63)
    goto LABEL_50;
  v489 = (uint64_t)a3;
  v490 = (uint64_t)v12;
  a3 = (std::error_category *)MEMORY[0x186DA4118]();
  if (v11)
  {
    v575 = (char *)MEMORY[0x1E0DEE9E0];
    v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
    v66 = v65;
    v67 = v493;
    v577 = v493;
    v68 = v489;
    *(_QWORD *)&v578 = v489;
    *((_QWORD *)&v578 + 1) = v63;
    lazy protocol witness table accessor for type URL and conformance URL();
    v69 = v67;
    swift_retain_n();
    swift_retain_n();
    v70 = v69;
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v508, (uint64_t)v64, v66);
    v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
    v73 = v72;
    *(_QWORD *)&v508 = v70;
    *((_QWORD *)&v508 + 1) = v68;
    *(_QWORD *)&v509 = v63;
    v74 = URL.path(percentEncoded:)(0);
    v577 = (char *)v74._countAndFlagsBits;
    *(_QWORD *)&v578 = v74._object;
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v508, (uint64_t)v71, v73);
    v501 = v575;
    v488 = (id)swift_bridgeObjectRetain();
    v75 = (char *)v488;
    if ((_DWORD)a3 == 102)
      goto LABEL_117;
    if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) == 0)
    {
      v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
      v78 = v77;
      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
      v79 = (int)POSIXErrorCode.rawValue.getter();
      v80 = objc_allocWithZone((Class)NSError);
      v81 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v82 = objc_msgSend(v80, sel_initWithDomain_code_userInfo_, v81, v79, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v83 = objc_msgSend(v82, sel_domain);
      v68 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v83);
      v85 = v84;

      if ((id)v68 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain")) && v85 == v86)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        LODWORD(v68) = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v68 & 1) == 0)
        {
LABEL_409:
          __break(1u);
          goto LABEL_410;
        }
      }
      v577 = (char *)v82;
      lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
      AnyHashable.init<A>(_:)();
      specialized Dictionary.subscript.setter((uint64_t)&v508, (uint64_t)v76, v78);
      v75 = v501;
LABEL_117:
      CocoaError.Code.init(fileErrno:reading:)((Swift::Int32)a3, 0);
      v487 = (uint64_t)v500;
      a3 = (std::error_category *)v75;
      if (*((_QWORD *)v75 + 2))
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
        v102 = (char *)static _DictionaryStorage.allocate(capacity:)();
      }
      else
      {
        v102 = (char *)MEMORY[0x1E0DEE9E0];
      }
      v240 = *((_QWORD *)v75 + 8);
      v495 = (int64_t)(v75 + 64);
      v241 = -1;
      v242 = -1 << v75[32];
      v486 = ~v242;
      if (-v242 < 64)
        v241 = ~(-1 << -(char)v242);
      v243 = v241 & v240;
      v494 = (char *)((unint64_t)(63 - v242) >> 6);
      v244 = &v509;
      v245 = (_OWORD *)((char *)v576 + 8);
      v246 = (__int128 *)((char *)&v578 + 8);
      v491 = v102 + 64;
      swift_bridgeObjectRetain();
      v498 = 0;
      v497 = (char *)(MEMORY[0x1E0DEE9B8] + 8);
      v492 = (char *)&v578 + 8;
      if (v243)
        goto LABEL_125;
LABEL_126:
      v253 = v498 + 1;
      if (__OFADD__(v498, 1))
        goto LABEL_390;
      if (v253 < (uint64_t)v494)
      {
        v254 = *(_QWORD *)(v495 + 8 * v253);
        if (v254)
        {
LABEL_142:
          v498 = v253;
          v499 = (char *)((v254 - 1) & v254);
          for (k = __clz(__rbit64(v254)) + (v253 << 6); ; k = __clz(__rbit64(v243)) | (v498 << 6))
          {
            v256 = (char **)((char *)a3[6].__vftable + 16 * k);
            v258 = *v256;
            v257 = v256[1];
            outlined init with copy of AnyHashable((uint64_t)a3[7].__vftable + 40 * k, (uint64_t)v244);
            *(_QWORD *)&v508 = v258;
            *((_QWORD *)&v508 + 1) = v257;
            v259 = v244[1];
            v572 = *v244;
            v573 = v259;
            v574 = *((_QWORD *)v244 + 4);
            v575 = v258;
            *(_QWORD *)&v576[0] = v257;
            swift_bridgeObjectRetain();
            swift_dynamicCast();
            v68 = (uint64_t)v575;
            v260 = *(_QWORD *)&v576[0];
            v577 = v575;
            *(_QWORD *)&v578 = *(_QWORD *)&v576[0];
            outlined init with take of Any(v245, v246);
            outlined init with take of Any(v246, v580);
            outlined init with take of Any(v580, &v577);
            v261 = specialized __RawDictionaryStorage.find<A>(_:)(v68, v260);
            v262 = v261;
            if ((v263 & 1) != 0)
            {
              v247 = v244;
              v248 = v245;
              v249 = a3;
              v250 = (uint64_t *)(*((_QWORD *)v102 + 6) + 16 * v261);
              swift_bridgeObjectRelease();
              *v250 = v68;
              v250[1] = v260;
              a3 = v249;
              v245 = v248;
              v244 = v247;
              v246 = v492;
              v251 = (_OWORD *)(*((_QWORD *)v102 + 7) + 32 * v262);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v251);
              outlined init with take of Any(&v577, v251);
              v243 = (unint64_t)v499;
              if (!v499)
                goto LABEL_126;
            }
            else
            {
              if (*((_QWORD *)v102 + 2) >= *((_QWORD *)v102 + 3))
              {
                __break(1u);
                goto LABEL_387;
              }
              *(_QWORD *)((char *)v491 + ((v261 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v261;
              v264 = (uint64_t *)(*((_QWORD *)v102 + 6) + 16 * v261);
              *v264 = v68;
              v264[1] = v260;
              outlined init with take of Any(&v577, (_OWORD *)(*((_QWORD *)v102 + 7) + 32 * v261));
              v265 = *((_QWORD *)v102 + 2);
              v266 = __OFADD__(v265, 1);
              v267 = v265 + 1;
              if (v266)
                goto LABEL_388;
              *((_QWORD *)v102 + 2) = v267;
              v243 = (unint64_t)v499;
              if (!v499)
                goto LABEL_126;
            }
LABEL_125:
            v499 = (char *)((v243 - 1) & v243);
          }
        }
        v255 = v498 + 2;
        if (v498 + 2 < (uint64_t)v494)
        {
          v254 = *(_QWORD *)(v495 + 8 * v255);
          if (v254)
            goto LABEL_141;
          v255 = v498 + 3;
          if (v498 + 3 >= (uint64_t)v494)
            goto LABEL_152;
          v254 = *(_QWORD *)(v495 + 8 * v255);
          if (v254)
            goto LABEL_141;
          v255 = v498 + 4;
          if (v498 + 4 >= (uint64_t)v494)
            goto LABEL_152;
          v254 = *(_QWORD *)(v495 + 8 * v255);
          if (v254)
            goto LABEL_141;
          v255 = v498 + 5;
          if (v498 + 5 >= (uint64_t)v494)
            goto LABEL_152;
          v254 = *(_QWORD *)(v495 + 8 * v255);
          if (v254)
            goto LABEL_141;
          v255 = v498 + 6;
          if (v498 + 6 >= (uint64_t)v494)
            goto LABEL_152;
          v254 = *(_QWORD *)(v495 + 8 * v255);
          if (v254)
          {
LABEL_141:
            v253 = v255;
            goto LABEL_142;
          }
          v255 = v498 + 7;
          if (v498 + 7 < (uint64_t)v494)
          {
            v254 = *(_QWORD *)(v495 + 8 * v255);
            if (v254)
              goto LABEL_141;
            while (1)
            {
              v253 = v255 + 1;
              if (__OFADD__(v255, 1))
                goto LABEL_407;
              if (v253 >= (uint64_t)v494)
                break;
              v254 = *(_QWORD *)(v495 + 8 * v253);
              ++v255;
              if (v254)
                goto LABEL_142;
            }
          }
        }
      }
LABEL_152:
      outlined consume of Set<A1>.Iterator._Variant<A><A1>();
      swift_bridgeObjectRelease();
      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
      v268 = objc_allocWithZone((Class)NSError);
      v269 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v270 = objc_msgSend(v268, sel_initWithDomain_code_userInfo_, v269, v487, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v271 = objc_msgSend(v270, sel_domain);
      v272 = static String._unconditionallyBridgeFromObjectiveC(_:)(v271);
      v274 = v273;

      if (v272 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v274 == v275)
        goto LABEL_252;
      v277 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of PathOrURL(v493, v489, (uint64_t)v496, 1);
      if ((v277 & 1) == 0)
      {
        __break(1u);
        goto LABEL_252;
      }
      goto LABEL_296;
    }
LABEL_421:
    *(_QWORD *)&v508 = 0;
    *((_QWORD *)&v508 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v508 = 0xD000000000000014;
    *((_QWORD *)&v508 + 1) = 0x8000000182306980;
    LODWORD(v577) = (_DWORD)a3;
    goto LABEL_423;
  }
  *(_QWORD *)&v572 = MEMORY[0x1E0DEE9E0];
  v142 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
  v144 = v143;
  v145 = (uint64_t)v493;
  v577 = v493;
  v146 = v489;
  *(_QWORD *)&v578 = v489;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)&v508, (uint64_t)v142, v144);
  v147 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
  v149 = v148;
  URL.init(_fileManagerFailableFileURLWithPath:)(v145, v146, (uint64_t)&v577);
  if (v577)
  {
    v575 = v577;
    v576[0] = v578;
    lazy protocol witness table accessor for type URL and conformance URL();
    AnyHashable.init<A>(_:)();
  }
  else
  {
    v508 = 0u;
    v509 = 0u;
    *(_QWORD *)&v510 = 0;
  }
  specialized Dictionary.subscript.setter((uint64_t)&v508, (uint64_t)v147, v149);
  v214 = (char *)v572;
  v501 = (char *)v572;
  swift_bridgeObjectRetain();
  v492 = v214;
  if ((_DWORD)a3 != 102)
  {
    if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
      goto LABEL_421;
    v215 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
    v217 = v216;
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
    v218 = (int)POSIXErrorCode.rawValue.getter();
    v219 = objc_allocWithZone((Class)NSError);
    v220 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v221 = objc_msgSend(v219, sel_initWithDomain_code_userInfo_, v220, v218, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v222 = objc_msgSend(v221, sel_domain);
    v223 = static String._unconditionallyBridgeFromObjectiveC(_:)(v222);
    v225 = v224;

    if (v223 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain")) && v225 == v226)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v278 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v278 & 1) == 0)
      {
LABEL_410:
        __break(1u);
        goto LABEL_411;
      }
    }
    v577 = (char *)v221;
    lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v508, (uint64_t)v215, v217);
    v214 = v501;
  }
  CocoaError.Code.init(fileErrno:reading:)((Swift::Int32)a3, 0);
  v491 = v500;
  if (*((_QWORD *)v214 + 2))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v102 = (char *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v102 = (char *)MEMORY[0x1E0DEE9E0];
  }
  v279 = *((_QWORD *)v214 + 8);
  v496 = v214 + 64;
  v280 = -1;
  v281 = -1 << v214[32];
  v489 = ~v281;
  if (-v281 < 64)
    v280 = ~(-1 << -(char)v281);
  v282 = v280 & v279;
  v495 = (unint64_t)(63 - v281) >> 6;
  v68 = (uint64_t)&v509;
  v283 = (_OWORD *)((char *)v576 + 8);
  v284 = (char *)&v578 + 8;
  v493 = v102 + 64;
  swift_bridgeObjectRetain();
  v498 = 0;
  v497 = (char *)(MEMORY[0x1E0DEE9B8] + 8);
  v494 = (char *)&v578 + 8;
  if (v282)
    goto LABEL_169;
LABEL_170:
  v291 = v498 + 1;
  if (__OFADD__(v498, 1))
    goto LABEL_391;
  if (v291 >= v495)
    goto LABEL_196;
  v292 = *(_QWORD *)&v496[8 * v291];
  if (!v292)
  {
    v293 = v498 + 2;
    if (v498 + 2 < v495)
    {
      v292 = *(_QWORD *)&v496[8 * v293];
      if (v292)
        goto LABEL_185;
      v293 = v498 + 3;
      if (v498 + 3 < v495)
      {
        v292 = *(_QWORD *)&v496[8 * v293];
        if (v292)
          goto LABEL_185;
        v293 = v498 + 4;
        if (v498 + 4 < v495)
        {
          v292 = *(_QWORD *)&v496[8 * v293];
          if (v292)
            goto LABEL_185;
          v293 = v498 + 5;
          if (v498 + 5 < v495)
          {
            v292 = *(_QWORD *)&v496[8 * v293];
            if (v292)
              goto LABEL_185;
            v293 = v498 + 6;
            if (v498 + 6 < v495)
            {
              v292 = *(_QWORD *)&v496[8 * v293];
              if (!v292)
              {
                v293 = v498 + 7;
                if (v498 + 7 < v495)
                {
                  v292 = *(_QWORD *)&v496[8 * v293];
                  if (!v292)
                  {
                    while (1)
                    {
                      v291 = v293 + 1;
                      if (__OFADD__(v293, 1))
                        goto LABEL_408;
                      if (v291 >= v495)
                        goto LABEL_196;
                      v292 = *(_QWORD *)&v496[8 * v291];
                      ++v293;
                      if (v292)
                        goto LABEL_186;
                    }
                  }
                  goto LABEL_185;
                }
                goto LABEL_196;
              }
LABEL_185:
              v291 = v293;
              goto LABEL_186;
            }
          }
        }
      }
    }
LABEL_196:
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v305 = objc_allocWithZone((Class)NSError);
    v306 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v307 = objc_msgSend(v305, sel_initWithDomain_code_userInfo_, v306, v491, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v308 = objc_msgSend(v307, sel_domain);
    v309 = static String._unconditionallyBridgeFromObjectiveC(_:)(v308);
    v311 = v310;

    if (v309 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) || v311 != v312)
    {
      v314 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v314 & 1) == 0)
      {
        __break(1u);
        goto LABEL_202;
      }
      goto LABEL_296;
    }
    goto LABEL_295;
  }
LABEL_186:
  v498 = v291;
  v499 = (char *)((v292 - 1) & v292);
  for (m = __clz(__rbit64(v292)) + (v291 << 6); ; m = __clz(__rbit64(v282)) | (v498 << 6))
  {
    v294 = (char **)(*((_QWORD *)v214 + 6) + 16 * m);
    v296 = *v294;
    v295 = v294[1];
    outlined init with copy of AnyHashable(*((_QWORD *)v214 + 7) + 40 * m, v68);
    *(_QWORD *)&v508 = v296;
    *((_QWORD *)&v508 + 1) = v295;
    v297 = *(_OWORD *)(v68 + 16);
    v572 = *(_OWORD *)v68;
    v573 = v297;
    v574 = *(_QWORD *)(v68 + 32);
    v575 = v296;
    *(_QWORD *)&v576[0] = v295;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    a3 = (std::error_category *)v575;
    v298 = *(_QWORD *)&v576[0];
    v577 = v575;
    *(_QWORD *)&v578 = *(_QWORD *)&v576[0];
    outlined init with take of Any(v283, v284);
    outlined init with take of Any(v284, v580);
    outlined init with take of Any(v580, &v577);
    v299 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a3, v298);
    v300 = v299;
    if ((v301 & 1) != 0)
    {
      v285 = v68;
      v286 = v283;
      v287 = v214;
      v288 = (std::error_category **)(*((_QWORD *)v102 + 6) + 16 * v299);
      swift_bridgeObjectRelease();
      *v288 = a3;
      v288[1] = (std::error_category *)v298;
      v214 = v287;
      v283 = v286;
      v68 = v285;
      v284 = v494;
      v289 = (_OWORD *)(*((_QWORD *)v102 + 7) + 32 * v300);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v289);
      outlined init with take of Any(&v577, v289);
      v282 = (unint64_t)v499;
      if (!v499)
        goto LABEL_170;
      goto LABEL_169;
    }
    if (*((_QWORD *)v102 + 2) >= *((_QWORD *)v102 + 3))
      break;
    *(_QWORD *)&v493[(v299 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v299;
    v302 = (std::error_category **)(*((_QWORD *)v102 + 6) + 16 * v299);
    *v302 = a3;
    v302[1] = (std::error_category *)v298;
    outlined init with take of Any(&v577, (_OWORD *)(*((_QWORD *)v102 + 7) + 32 * v299));
    v303 = *((_QWORD *)v102 + 2);
    v266 = __OFADD__(v303, 1);
    v304 = v303 + 1;
    if (v266)
      goto LABEL_389;
    *((_QWORD *)v102 + 2) = v304;
    v282 = (unint64_t)v499;
    if (!v499)
      goto LABEL_170;
LABEL_169:
    v499 = (char *)((v282 - 1) & v282);
  }
LABEL_387:
  __break(1u);
LABEL_388:
  __break(1u);
LABEL_389:
  __break(1u);
LABEL_390:
  __break(1u);
LABEL_391:
  __break(1u);
LABEL_392:
  __break(1u);
LABEL_393:
  __break(1u);
LABEL_394:
  __break(1u);
LABEL_395:
  __break(1u);
LABEL_396:
  __break(1u);
LABEL_397:
  __break(1u);
LABEL_398:
  __break(1u);
LABEL_399:
  __break(1u);
LABEL_400:
  __break(1u);
LABEL_401:
  __break(1u);
  while (2)
  {
    __break(1u);
    while (2)
    {
      __break(1u);
LABEL_404:
      __break(1u);
      v479 = (uint64_t)v494;
      isStackAllocationSafe = String.UTF8View._foreignCount()();
      v162 = (uint64_t)v492;
      v163 = 3 * isStackAllocationSafe;
      if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
      {
        __break(1u);
LABEL_406:
        __break(1u);
LABEL_407:
        __break(1u);
LABEL_408:
        __break(1u);
        goto LABEL_409;
      }
      if (v163 < -1)
        goto LABEL_406;
      v164 = v163 + 1;
      if (v163 < 1024
        || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
      {
        v166 = a3;
        MEMORY[0x1E0C80A78](isStackAllocationSafe);
        v168 = (char *)&v484 - v167;
        swift_bridgeObjectRetain();
        String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v168, v164, 1, v479, (unint64_t)v102);
        v170 = v169;
        swift_bridgeObjectRelease();
        if ((v170 & 1) == 0)
          unlink(v168);
        a3 = v166;
      }
      else
      {
        v171 = (const char *)swift_slowAlloc();
        swift_bridgeObjectRetain();
        String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v171, v164, 1, v479, (unint64_t)v102);
        v173 = v172;
        swift_bridgeObjectRelease();
        if ((v173 & 1) == 0)
          unlink(v171);
        MEMORY[0x186DA9E78](v171, -1, -1);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      cleanupTemporaryDirectory(at:)(v486, v162);
      swift_bridgeObjectRelease();
      v174 = v498;
      if (v488 && (objc_msgSend(v488, sel_isCancelled) & 1) != 0)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
        v175 = objc_allocWithZone((Class)NSError);
        v176 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v177 = objc_msgSend(v175, sel_initWithDomain_code_userInfo_, v176, 3072, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v178 = objc_msgSend(v177, sel_domain);
        v179 = static String._unconditionallyBridgeFromObjectiveC(_:)(v178);
        v181 = v180;

        if (v179 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v181 == v182)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_203;
        }
LABEL_202:
        v315 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v315 & 1) != 0)
        {
LABEL_203:
          swift_willThrow();

          close(v490);
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
LABEL_411:
        __break(1u);
LABEL_412:
        __break(1u);
LABEL_413:
        __break(1u);
LABEL_414:
        __break(1u);
LABEL_415:
        __break(1u);
LABEL_416:
        __break(1u);
LABEL_417:
        __break(1u);
LABEL_418:
        __break(1u);
LABEL_419:
        __break(1u);
      }
      if (!v174)
      {
        *(_QWORD *)&v572 = MEMORY[0x1E0DEE9E0];
        v207 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
        v209 = v208;
        v210 = (uint64_t)v493;
        v577 = v493;
        *(_QWORD *)&v578 = a3;
        swift_bridgeObjectRetain();
        AnyHashable.init<A>(_:)();
        specialized Dictionary.subscript.setter((uint64_t)&v508, (uint64_t)v207, v209);
        v211 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
        v213 = v212;
        URL.init(_fileManagerFailableFileURLWithPath:)(v210, (unint64_t)a3, (uint64_t)&v577);
        if (v577)
        {
          v575 = v577;
          v576[0] = v578;
          lazy protocol witness table accessor for type URL and conformance URL();
          AnyHashable.init<A>(_:)();
        }
        else
        {
          v508 = 0u;
          v509 = 0u;
          *(_QWORD *)&v510 = 0;
        }
        specialized Dictionary.subscript.setter((uint64_t)&v508, (uint64_t)v211, v213);
        v316 = (char *)v572;
        v501 = (char *)v572;
        swift_bridgeObjectRetain();
        v492 = v316;
        if ((_DWORD)v68 != 102)
        {
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
            goto LABEL_422;
          v317 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
          v319 = v318;
          static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
          v320 = (int)POSIXErrorCode.rawValue.getter();
          v321 = objc_allocWithZone((Class)NSError);
          v322 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v323 = objc_msgSend(v321, sel_initWithDomain_code_userInfo_, v322, v320, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v324 = objc_msgSend(v323, sel_domain);
          v325 = static String._unconditionallyBridgeFromObjectiveC(_:)(v324);
          a3 = v326;

          if (v325 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain")) && a3 == v327)
          {
            swift_bridgeObjectRelease_n();
          }
          else
          {
            v441 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v441 & 1) == 0)
              goto LABEL_419;
          }
          v577 = (char *)v323;
          lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
          AnyHashable.init<A>(_:)();
          specialized Dictionary.subscript.setter((uint64_t)&v508, (uint64_t)v317, v319);
          v316 = v501;
        }
        CocoaError.Code.init(fileErrno:reading:)(v68, 0);
        v491 = v500;
        if (*((_QWORD *)v316 + 2))
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
          v102 = (char *)static _DictionaryStorage.allocate(capacity:)();
        }
        else
        {
          v102 = (char *)MEMORY[0x1E0DEE9E0];
        }
        v442 = *((_QWORD *)v316 + 8);
        v495 = (int64_t)(v316 + 64);
        v443 = -1;
        v444 = -1 << v316[32];
        v489 = ~v444;
        if (-v444 < 64)
          v443 = ~(-1 << -(char)v444);
        v445 = v443 & v442;
        v496 = (char *)((unint64_t)(63 - v444) >> 6);
        v68 = (uint64_t)&v509;
        v446 = (_OWORD *)((char *)v576 + 8);
        v447 = (char *)&v578 + 8;
        v493 = v102 + 64;
        swift_bridgeObjectRetain();
        v498 = 0;
        v497 = (char *)(MEMORY[0x1E0DEE9B8] + 8);
        v494 = (char *)&v578 + 8;
        if (v445)
        {
          do
          {
            while (1)
            {
              v499 = (char *)((v445 - 1) & v445);
              v453 = __clz(__rbit64(v445)) | (v498 << 6);
LABEL_371:
              v458 = (char **)(*((_QWORD *)v316 + 6) + 16 * v453);
              v460 = *v458;
              v459 = v458[1];
              outlined init with copy of AnyHashable(*((_QWORD *)v316 + 7) + 40 * v453, v68);
              *(_QWORD *)&v508 = v460;
              *((_QWORD *)&v508 + 1) = v459;
              v461 = *(_OWORD *)(v68 + 16);
              v572 = *(_OWORD *)v68;
              v573 = v461;
              v574 = *(_QWORD *)(v68 + 32);
              v575 = v460;
              *(_QWORD *)&v576[0] = v459;
              swift_bridgeObjectRetain();
              swift_dynamicCast();
              a3 = (std::error_category *)v575;
              v462 = *(_QWORD *)&v576[0];
              v577 = v575;
              *(_QWORD *)&v578 = *(_QWORD *)&v576[0];
              outlined init with take of Any(v446, v447);
              outlined init with take of Any(v447, v580);
              outlined init with take of Any(v580, &v577);
              v463 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a3, v462);
              v464 = v463;
              if ((v465 & 1) == 0)
                break;
              v448 = v68;
              v449 = v446;
              v450 = v316;
              v451 = (std::error_category **)(*((_QWORD *)v102 + 6) + 16 * v463);
              swift_bridgeObjectRelease();
              *v451 = a3;
              v451[1] = (std::error_category *)v462;
              v316 = v450;
              v446 = v449;
              v68 = v448;
              v447 = v494;
              v452 = (_OWORD *)(*((_QWORD *)v102 + 7) + 32 * v464);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v452);
              outlined init with take of Any(&v577, v452);
              v445 = (unint64_t)v499;
              if (!v499)
                goto LABEL_351;
            }
            if (*((_QWORD *)v102 + 2) >= *((_QWORD *)v102 + 3))
              goto LABEL_399;
            *(_QWORD *)&v493[(v463 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v463;
            v466 = (std::error_category **)(*((_QWORD *)v102 + 6) + 16 * v463);
            *v466 = a3;
            v466[1] = (std::error_category *)v462;
            outlined init with take of Any(&v577, (_OWORD *)(*((_QWORD *)v102 + 7) + 32 * v463));
            v467 = *((_QWORD *)v102 + 2);
            v266 = __OFADD__(v467, 1);
            v468 = v467 + 1;
            if (v266)
              goto LABEL_401;
            *((_QWORD *)v102 + 2) = v468;
            v445 = (unint64_t)v499;
          }
          while (v499);
        }
LABEL_351:
        v454 = v498 + 1;
        if (!__OFADD__(v498, 1))
        {
          if (v454 < (uint64_t)v496)
          {
            v455 = *(_QWORD *)(v495 + 8 * v454);
            v456 = v498 + 1;
            if (v455)
              goto LABEL_370;
            v456 = v498 + 2;
            if (v498 + 2 < (uint64_t)v496)
            {
              v455 = *(_QWORD *)(v495 + 8 * v456);
              if (v455)
                goto LABEL_370;
              v456 = v498 + 3;
              if (v498 + 3 < (uint64_t)v496)
              {
                v455 = *(_QWORD *)(v495 + 8 * v456);
                if (v455)
                  goto LABEL_370;
                v456 = v498 + 4;
                if (v498 + 4 < (uint64_t)v496)
                {
                  v455 = *(_QWORD *)(v495 + 8 * v456);
                  if (v455)
                    goto LABEL_370;
                  v456 = v498 + 5;
                  if (v498 + 5 < (uint64_t)v496)
                  {
                    v455 = *(_QWORD *)(v495 + 8 * v456);
                    if (v455)
                      goto LABEL_370;
                    v456 = v498 + 6;
                    if (v498 + 6 < (uint64_t)v496)
                    {
                      v455 = *(_QWORD *)(v495 + 8 * v456);
                      if (v455)
                        goto LABEL_370;
                      v457 = v498 + 7;
                      if (v498 + 7 < (uint64_t)v496)
                      {
                        v455 = *(_QWORD *)(v495 + 8 * v457);
                        if (!v455)
                        {
                          while (1)
                          {
                            v456 = v457 + 1;
                            if (__OFADD__(v457, 1))
                              goto LABEL_417;
                            if (v456 >= (uint64_t)v496)
                              goto LABEL_376;
                            v455 = *(_QWORD *)(v495 + 8 * v456);
                            ++v457;
                            if (v455)
                              goto LABEL_370;
                          }
                        }
                        v456 = v498 + 7;
LABEL_370:
                        v498 = v456;
                        v499 = (char *)((v455 - 1) & v455);
                        v453 = __clz(__rbit64(v455)) + (v456 << 6);
                        goto LABEL_371;
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_376:
          outlined consume of Set<A1>.Iterator._Variant<A><A1>();
          swift_bridgeObjectRelease();
          static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
          v469 = objc_allocWithZone((Class)NSError);
          v470 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v471 = objc_msgSend(v469, sel_initWithDomain_code_userInfo_, v470, v491, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v472 = objc_msgSend(v471, sel_domain);
          v473 = static String._unconditionallyBridgeFromObjectiveC(_:)(v472);
          v475 = v474;

          if (v473 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"))
            || v475 != v476)
          {
            v478 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v478 & 1) != 0)
              goto LABEL_383;
            __break(1u);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
LABEL_383:
          swift_willThrow();

          close(v490);
LABEL_384:
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
        continue;
      }
      break;
    }
    v575 = (char *)MEMORY[0x1E0DEE9E0];
    v183 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
    v185 = v184;
    v186 = v493;
    v577 = v493;
    *(_QWORD *)&v578 = a3;
    v187 = (uint64_t)v496;
    *((_QWORD *)&v578 + 1) = v496;
    lazy protocol witness table accessor for type URL and conformance URL();
    v188 = v186;
    swift_retain_n();
    swift_retain_n();
    v189 = v188;
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v508, (uint64_t)v183, v185);
    v190 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
    v192 = v191;
    *(_QWORD *)&v508 = v189;
    *((_QWORD *)&v508 + 1) = a3;
    *(_QWORD *)&v509 = v187;
    v193 = URL.path(percentEncoded:)(0);
    v577 = (char *)v193._countAndFlagsBits;
    *(_QWORD *)&v578 = v193._object;
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v508, (uint64_t)v190, v192);
    v194 = (uint64_t)v575;
    v501 = v575;
    swift_bridgeObjectRetain();
    v486 = v194;
    v489 = (uint64_t)a3;
    if ((_DWORD)v68 == 102)
      goto LABEL_299;
    if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) == 0)
    {
      v195 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
      v197 = v196;
      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
      v198 = (int)POSIXErrorCode.rawValue.getter();
      v199 = objc_allocWithZone((Class)NSError);
      v200 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v201 = objc_msgSend(v199, sel_initWithDomain_code_userInfo_, v200, v198, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v202 = objc_msgSend(v201, sel_domain);
      v203 = static String._unconditionallyBridgeFromObjectiveC(_:)(v202);
      v205 = v204;

      if (v203 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain")) && v205 == v206)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v403 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v403 & 1) == 0)
          goto LABEL_418;
      }
      v577 = (char *)v201;
      lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
      AnyHashable.init<A>(_:)();
      specialized Dictionary.subscript.setter((uint64_t)&v508, (uint64_t)v195, v197);
      v194 = (uint64_t)v501;
LABEL_299:
      CocoaError.Code.init(fileErrno:reading:)(v68, 0);
      v485 = v500;
      if (*(_QWORD *)(v194 + 16))
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
        v102 = (char *)static _DictionaryStorage.allocate(capacity:)();
      }
      else
      {
        v102 = (char *)MEMORY[0x1E0DEE9E0];
      }
      v404 = *(_QWORD *)(v194 + 64);
      v494 = (char *)(v194 + 64);
      v405 = -1;
      v406 = -1 << *(_BYTE *)(v194 + 32);
      v484 = ~v406;
      if (-v406 < 64)
        v405 = ~(-1 << -(char)v406);
      v407 = v405 & v404;
      v495 = (unint64_t)(63 - v406) >> 6;
      v408 = &v509;
      a3 = (std::error_category *)v576 + 1;
      v409 = (__int128 *)((char *)&v578 + 8);
      v491 = v102 + 64;
      swift_bridgeObjectRetain();
      v498 = 0;
      v497 = (char *)(MEMORY[0x1E0DEE9B8] + 8);
      v492 = (char *)&v578 + 8;
      if (v407)
      {
        do
        {
          while (1)
          {
            v499 = (char *)((v407 - 1) & v407);
            v415 = __clz(__rbit64(v407)) | (v498 << 6);
LABEL_328:
            v420 = (char **)(*(_QWORD *)(v194 + 48) + 16 * v415);
            v422 = *v420;
            v421 = v420[1];
            outlined init with copy of AnyHashable(*(_QWORD *)(v194 + 56) + 40 * v415, (uint64_t)v408);
            *(_QWORD *)&v508 = v422;
            *((_QWORD *)&v508 + 1) = v421;
            v423 = v408[1];
            v572 = *v408;
            v573 = v423;
            v574 = *((_QWORD *)v408 + 4);
            v575 = v422;
            *(_QWORD *)&v576[0] = v421;
            swift_bridgeObjectRetain();
            swift_dynamicCast();
            v424 = (uint64_t)v575;
            v68 = *(_QWORD *)&v576[0];
            v577 = v575;
            *(_QWORD *)&v578 = *(_QWORD *)&v576[0];
            outlined init with take of Any(a3, v409);
            outlined init with take of Any(v409, v580);
            outlined init with take of Any(v580, &v577);
            v425 = specialized __RawDictionaryStorage.find<A>(_:)(v424, v68);
            v426 = v425;
            if ((v427 & 1) == 0)
              break;
            v410 = v408;
            v411 = a3;
            v412 = v194;
            v413 = (uint64_t *)(*((_QWORD *)v102 + 6) + 16 * v425);
            swift_bridgeObjectRelease();
            *v413 = v424;
            v413[1] = v68;
            v194 = v412;
            a3 = v411;
            v408 = v410;
            v409 = v492;
            v414 = (_OWORD *)(*((_QWORD *)v102 + 7) + 32 * v426);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v414);
            outlined init with take of Any(&v577, v414);
            v407 = (unint64_t)v499;
            if (!v499)
              goto LABEL_308;
          }
          if (*((_QWORD *)v102 + 2) >= *((_QWORD *)v102 + 3))
            goto LABEL_398;
          *(_QWORD *)((char *)v491 + ((v425 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v425;
          v428 = (uint64_t *)(*((_QWORD *)v102 + 6) + 16 * v425);
          *v428 = v424;
          v428[1] = v68;
          outlined init with take of Any(&v577, (_OWORD *)(*((_QWORD *)v102 + 7) + 32 * v425));
          v429 = *((_QWORD *)v102 + 2);
          v266 = __OFADD__(v429, 1);
          v430 = v429 + 1;
          if (v266)
            goto LABEL_400;
          *((_QWORD *)v102 + 2) = v430;
          v407 = (unint64_t)v499;
        }
        while (v499);
      }
LABEL_308:
      v416 = v498 + 1;
      if (!__OFADD__(v498, 1))
      {
        if (v416 < v495)
        {
          v417 = *(_QWORD *)&v494[8 * v416];
          v418 = v498 + 1;
          if (v417)
            goto LABEL_327;
          v418 = v498 + 2;
          if (v498 + 2 < v495)
          {
            v417 = *(_QWORD *)&v494[8 * v418];
            if (v417)
              goto LABEL_327;
            v418 = v498 + 3;
            if (v498 + 3 < v495)
            {
              v417 = *(_QWORD *)&v494[8 * v418];
              if (v417)
                goto LABEL_327;
              v418 = v498 + 4;
              if (v498 + 4 < v495)
              {
                v417 = *(_QWORD *)&v494[8 * v418];
                if (v417)
                  goto LABEL_327;
                v418 = v498 + 5;
                if (v498 + 5 < v495)
                {
                  v417 = *(_QWORD *)&v494[8 * v418];
                  if (v417)
                    goto LABEL_327;
                  v418 = v498 + 6;
                  if (v498 + 6 < v495)
                  {
                    v417 = *(_QWORD *)&v494[8 * v418];
                    if (v417)
                      goto LABEL_327;
                    v419 = v498 + 7;
                    if (v498 + 7 < v495)
                    {
                      v417 = *(_QWORD *)&v494[8 * v419];
                      if (!v417)
                      {
                        while (1)
                        {
                          v418 = v419 + 1;
                          if (__OFADD__(v419, 1))
                            goto LABEL_416;
                          if (v418 >= v495)
                            goto LABEL_333;
                          v417 = *(_QWORD *)&v494[8 * v418];
                          ++v419;
                          if (v417)
                            goto LABEL_327;
                        }
                      }
                      v418 = v498 + 7;
LABEL_327:
                      v498 = v418;
                      v499 = (char *)((v417 - 1) & v417);
                      v415 = __clz(__rbit64(v417)) + (v418 << 6);
                      goto LABEL_328;
                    }
                  }
                }
              }
            }
          }
        }
LABEL_333:
        outlined consume of Set<A1>.Iterator._Variant<A><A1>();
        swift_bridgeObjectRelease();
        static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
        v431 = objc_allocWithZone((Class)NSError);
        v432 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v433 = objc_msgSend(v431, sel_initWithDomain_code_userInfo_, v432, v485, _NativeDictionary.bridged()(), v484);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v434 = objc_msgSend(v433, sel_domain);
        v435 = static String._unconditionallyBridgeFromObjectiveC(_:)(v434);
        v437 = v436;

        if (v435 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v437 == v438)
        {
LABEL_339:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          outlined consume of PathOrURL(v493, v489, (uint64_t)v496, 1);
        }
        else
        {
          v440 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of PathOrURL(v493, v489, (uint64_t)v496, 1);
          if ((v440 & 1) == 0)
          {
            __break(1u);
            goto LABEL_339;
          }
        }
        goto LABEL_383;
      }
      continue;
    }
    break;
  }
LABEL_422:
  *(_QWORD *)&v508 = 0;
  *((_QWORD *)&v508 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v508 = 0xD000000000000014;
  *((_QWORD *)&v508 + 1) = 0x8000000182306980;
  LODWORD(v577) = v68;
LABEL_423:
  v480._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v480);
  swift_bridgeObjectRelease();
  LODWORD(v483) = 0;
  v482 = 99;
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t writeExtendedAttributes(fd:attributes:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v11;
  int64_t v12;

  v11 = (_QWORD *)(a2 + 64);
  v3 = 1 << *(_BYTE *)(a2 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a2 + 64);
  v12 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  if (v5)
  {
    v6 = __clz(__rbit64(v5));
    goto LABEL_18;
  }
  if (v12 > 1)
  {
    v7 = v11[1];
    v8 = 1;
    if (v7)
      goto LABEL_17;
    v8 = 2;
    if (v12 <= 2)
      return swift_release();
    v7 = v11[2];
    if (v7)
      goto LABEL_17;
    v8 = 3;
    if (v12 <= 3)
      return swift_release();
    v7 = v11[3];
    if (v7)
    {
LABEL_17:
      v6 = __clz(__rbit64(v7)) + (v8 << 6);
LABEL_18:
      __asm { BR              X9 }
    }
    v9 = 4;
    if (v12 > 4)
    {
      v7 = v11[4];
      if (v7)
      {
        v8 = 4;
        goto LABEL_17;
      }
      while (1)
      {
        v8 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          JUMPOUT(0x181D14E24);
        }
        if (v8 >= v12)
          break;
        v7 = v11[v8];
        ++v9;
        if (v7)
          goto LABEL_17;
      }
    }
  }
  return swift_release();
}

void closure #1 in closure #3 in closure #1 in writeToFileAux(path:buffer:options:attributes:reportProgress:)(std::__fs::filesystem::path *__to, std::__fs::filesystem::path *__from, std::error_code *a3, void *a4, unint64_t a5, uint64_t a6, char a7, char *a8, uint64_t *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14)
{
  uint64_t *v14;
  uint64_t v15;
  uint64_t v19;
  std::__fs::filesystem::path *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t cat;
  int v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t isStackAllocationSafe;
  uint64_t v39;
  const std::__fs::filesystem::path *v40;
  char v41;
  char v42;
  uint64_t v43;
  const std::__fs::filesystem::path *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  id v48;
  id v49;
  uint64_t v50;
  id v51;
  id v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  id v67;
  _OWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  id v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _OWORD *v85;
  uint64_t v86;
  id v87;
  uint64_t v88;
  id v89;
  id v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  uint64_t v102;
  id v103;
  id v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  _BYTE *v113;
  _OWORD *v114;
  _BYTE *v115;
  _BYTE *v116;
  _OWORD *v117;
  uint64_t v118;
  uint64_t *v119;
  unint64_t i;
  uint64_t v121;
  unint64_t v122;
  uint64_t *v123;
  char *v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  __int128 v128;
  unint64_t v129;
  char v130;
  uint64_t *v131;
  uint64_t v132;
  BOOL v133;
  uint64_t v134;
  id v135;
  uint64_t v136;
  id v137;
  id v138;
  id v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  _BYTE *v149;
  _BYTE *v150;
  _BYTE *v151;
  _OWORD *v152;
  uint64_t v153;
  uint64_t *v154;
  unint64_t j;
  uint64_t v156;
  unint64_t v157;
  uint64_t *v158;
  char *v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  __int128 v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  char v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  id v171;
  uint64_t v172;
  id v173;
  id v174;
  id v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char v180;
  const std::__fs::filesystem::path *v181;
  char v182;
  char v183;
  const std::__fs::filesystem::path *v184;
  void *v185;
  id v186;
  uint64_t v187;
  unsigned int v188;
  id v189;
  id v190;
  mode_t v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  size_t v220;
  size_t v221;
  char v222;
  char v223;
  char v224;
  const std::__fs::filesystem::path *v225;
  id v226;
  uint64_t v227;
  id v228;
  id v229;
  id v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  char v234;
  Swift::String v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  void *v240;
  unint64_t v241;
  _QWORD *v242;
  _BYTE *v243;
  uint64_t v244;
  uint64_t v245;
  std::__fs::filesystem::path *v246;
  uint64_t *v247;
  uint64_t v248;
  uint64_t v249;
  _BYTE v250[32];
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  _BYTE v257[44];
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  uint64_t v322;
  uint64_t v323;
  _OWORD v324[2];
  _OWORD v325[2];
  uint64_t v326;

  v326 = *MEMORY[0x1E0C80C00];
  if (__to)
  {
    v19 = (uint64_t)__from;
    v20 = __to;
    v239 = a6;
    v240 = a4;
    v241 = a5;
    v21 = (uint64_t)v250;
    v14 = a9;
    rename(__from, __to, a3);
    if (!v22)
    {
LABEL_131:
      v35 = a13;
      if (v14[1])
      {
        v185 = (void *)objc_opt_self();
        swift_bridgeObjectRetain();
        v186 = objc_msgSend(v185, sel_defaultManager);
        v187 = String._bridgeToObjectiveCImpl()();
        *(_QWORD *)v257 = 0;
        v188 = objc_msgSend(v186, sel_removeItemAtPath_error_, v187, v257);

        swift_unknownObjectRelease();
        if (!v188)
        {
          if (*(_QWORD *)v257)
          {
            v190 = *(id *)v257;
            swift_willThrow();
            swift_bridgeObjectRelease();

            goto LABEL_140;
          }
          if (one-time initialization token for _nilObjCError != -1)
            goto LABEL_181;
          goto LABEL_139;
        }
        v189 = *(id *)v257;
        swift_bridgeObjectRelease();
      }
      if ((*(_BYTE *)(a13 + 2) & 1) == 0)
      {
        while (1)
        {
          v191 = *(_WORD *)v35;
          v324[0] = 0uLL;
          v323 = 0x800000000000005;
          bzero(v257, 0x40CuLL);
          if (fgetattrlist(a14, &v323, v257, 0x40CuLL, 1u))
            break;
          *(_OWORD *)v250 = *(_OWORD *)&v257[12];
          *(_OWORD *)&v250[16] = *(_OWORD *)&v257[28];
          v251 = v258;
          v252 = v259;
          v253 = v260;
          v254 = v261;
          v255 = v262;
          v256 = v263;
          v192 = v265;
          *(_OWORD *)(v21 + 128) = v264;
          *(_OWORD *)(v21 + 144) = v192;
          v193 = v267;
          *(_OWORD *)(v21 + 160) = v266;
          *(_OWORD *)(v21 + 176) = v193;
          v194 = v269;
          *(_OWORD *)(v21 + 192) = v268;
          *(_OWORD *)(v21 + 208) = v194;
          v195 = v271;
          *(_OWORD *)(v21 + 224) = v270;
          *(_OWORD *)(v21 + 240) = v195;
          v196 = v273;
          *(_OWORD *)(v21 + 256) = v272;
          *(_OWORD *)(v21 + 272) = v196;
          v197 = v275;
          *(_OWORD *)(v21 + 288) = v274;
          *(_OWORD *)(v21 + 304) = v197;
          v198 = v277;
          *(_OWORD *)(v21 + 320) = v276;
          *(_OWORD *)(v21 + 336) = v198;
          v199 = v279;
          *(_OWORD *)(v21 + 352) = v278;
          *(_OWORD *)(v21 + 368) = v199;
          v200 = v281;
          *(_OWORD *)(v21 + 384) = v280;
          *(_OWORD *)(v21 + 400) = v200;
          v201 = v283;
          *(_OWORD *)(v21 + 416) = v282;
          *(_OWORD *)(v21 + 432) = v201;
          v202 = v285;
          *(_OWORD *)(v21 + 448) = v284;
          *(_OWORD *)(v21 + 464) = v202;
          v203 = v287;
          *(_OWORD *)(v21 + 480) = v286;
          *(_OWORD *)(v21 + 496) = v203;
          v204 = v289;
          *(_OWORD *)(v21 + 512) = v288;
          *(_OWORD *)(v21 + 528) = v204;
          v205 = v291;
          *(_OWORD *)(v21 + 544) = v290;
          *(_OWORD *)(v21 + 560) = v205;
          v206 = v293;
          *(_OWORD *)(v21 + 576) = v292;
          *(_OWORD *)(v21 + 592) = v206;
          v207 = v295;
          *(_OWORD *)(v21 + 608) = v294;
          *(_OWORD *)(v21 + 624) = v207;
          v208 = v297;
          *(_OWORD *)(v21 + 640) = v296;
          *(_OWORD *)(v21 + 656) = v208;
          v209 = v299;
          *(_OWORD *)(v21 + 672) = v298;
          *(_OWORD *)(v21 + 688) = v209;
          v210 = v301;
          *(_OWORD *)(v21 + 704) = v300;
          *(_OWORD *)(v21 + 720) = v210;
          v211 = v303;
          *(_OWORD *)(v21 + 736) = v302;
          *(_OWORD *)(v21 + 752) = v211;
          v212 = v305;
          *(_OWORD *)(v21 + 768) = v304;
          *(_OWORD *)(v21 + 784) = v212;
          v213 = v307;
          *(_OWORD *)(v21 + 800) = v306;
          *(_OWORD *)(v21 + 816) = v213;
          v214 = v309;
          *(_OWORD *)(v21 + 832) = v308;
          *(_OWORD *)(v21 + 848) = v214;
          v215 = v311;
          *(_OWORD *)(v21 + 864) = v310;
          *(_OWORD *)(v21 + 880) = v215;
          v216 = v313;
          *(_OWORD *)(v21 + 896) = v312;
          *(_OWORD *)(v21 + 912) = v216;
          v217 = v315;
          *(_OWORD *)(v21 + 928) = v314;
          *(_OWORD *)(v21 + 944) = v217;
          v218 = v317;
          *(_OWORD *)(v21 + 960) = v316;
          *(_OWORD *)(v21 + 976) = v218;
          v219 = v319;
          *(_OWORD *)(v21 + 992) = v318;
          *(_OWORD *)(v21 + 1008) = v219;
          v220 = strlen((const char *)v20);
          v221 = v220 + 1;
          if (!__OFADD__(v220, 1))
          {
            if (v221 == *(unsigned int *)&v257[8] && !strncmp((const char *)v20, v250, v221))
              fchmod(a14, v191);
            return;
          }
LABEL_179:
          __break(1u);
LABEL_180:
          __break(1u);
LABEL_181:
          swift_once();
LABEL_139:
          swift_willThrow();
          swift_bridgeObjectRelease();
LABEL_140:
          v248 = 0;
          if ((*(_BYTE *)(v35 + 2) & 1) != 0)
            return;
        }
      }
      return;
    }
    v15 = a7 & 1;
    v23 = MEMORY[0x186DA4118]();
    if ((_DWORD)v23 == 22)
    {
      v246 = v20;
      v247 = a9;
      v24 = *(_QWORD *)&a3->__val_;
      cat = (unint64_t)a3->__cat_;
      *(_QWORD *)v250 = v240;
      *(_QWORD *)&v250[8] = v241;
      *(_QWORD *)&v250[16] = v239;
      v250[24] = (_DWORD)v15 != 0;
      swift_bridgeObjectRetain();
      createProtectedTemporaryFile(at:inPath:options:)(v24, cat, (char **)v250, a8, v257);
      v26 = *(_DWORD *)v257;
      v27 = *(_QWORD *)&v257[8];
      v28 = *(_QWORD *)&v257[16];
      v29 = *(_BYTE **)&v257[24];
      v30 = v15;
      v31 = *(_QWORD *)&v257[32];
      swift_bridgeObjectRelease();
      if (!v248)
      {
        v244 = v31;
        v245 = v27;
        v243 = v29;
        v248 = 0;
        v32 = v30;
        close(v26);
        v33 = (_OWORD *)v28;
        if ((v28 & 0x1000000000000000) != 0)
          goto LABEL_177;
        if ((v28 & 0x2000000000000000) != 0)
          v34 = HIBYTE(v28) & 0xF;
        else
          v34 = v245 & 0xFFFFFFFFFFFFLL;
        goto LABEL_9;
      }
      return;
    }
  }
  else
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v49 = objc_allocWithZone((Class)NSError);
    v50 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v51 = objc_msgSend(v49, sel_initWithDomain_code_userInfo_, v50, 514, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v52 = objc_msgSend(v51, sel_domain);
    v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
    v55 = v54;

    if (v53 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v55 == v56)
      goto LABEL_125;
    v19 = v56;
    v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v23 = swift_bridgeObjectRelease();
    if ((v58 & 1) != 0)
      goto LABEL_126;
    __break(1u);
  }
  if (MEMORY[0x186DA4118](v23) == 16)
  {
    unlink((const char *)v19);
    v59 = *v14;
    v60 = v14[1];
    swift_bridgeObjectRetain();
    cleanupTemporaryDirectory(at:)(v59, v60);
    swift_bridgeObjectRelease();
    *(_QWORD *)v257 = v240;
    *(_QWORD *)&v257[8] = v241;
    *(_QWORD *)&v257[16] = v239;
    v257[24] = (_DWORD)v15 != 0;
    writeToFileNoAux(path:buffer:options:attributes:reportProgress:)((void **)v257, a10, a11, 0, a12, 0);
    return;
  }
  v32 = MEMORY[0x186DA4118]();
  unlink((const char *)v19);
  v62 = *v14;
  v61 = v14[1];
  swift_bridgeObjectRetain();
  cleanupTemporaryDirectory(at:)(v62, v61);
  swift_bridgeObjectRelease();
  if ((_DWORD)v15)
  {
    v323 = MEMORY[0x1E0DEE9E0];
    v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
    v65 = v64;
    *(_QWORD *)v250 = v240;
    *(_QWORD *)&v250[8] = v241;
    *(_QWORD *)&v250[16] = v239;
    lazy protocol witness table accessor for type URL and conformance URL();
    v66 = v240;
    swift_retain_n();
    swift_retain_n();
    v67 = v66;
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)v257, (uint64_t)v63, v65);
    v19 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
    v33 = v68;
    *(_QWORD *)v257 = v67;
    *(_QWORD *)&v257[8] = v241;
    *(_QWORD *)&v257[16] = v239;
    *(Swift::String *)v250 = URL.path(percentEncoded:)(0);
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)v257, v19, (uint64_t)v33);
    v249 = v323;
    v238 = v323;
    swift_bridgeObjectRetain();
    if ((_DWORD)v32 == 102)
    {
LABEL_26:
      v69 = 512;
      goto LABEL_27;
    }
    if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) == 0)
    {
      v19 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
      v33 = v85;
      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
      v86 = (int)POSIXErrorCode.rawValue.getter();
      v87 = objc_allocWithZone((Class)NSError);
      v88 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v89 = objc_msgSend(v87, sel_initWithDomain_code_userInfo_, v88, v86, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v90 = objc_msgSend(v89, sel_domain);
      v91 = static String._unconditionallyBridgeFromObjectiveC(_:)(v90);
      v93 = v92;

      if (v91 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain")) && v93 == v94)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v223 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v223 & 1) == 0)
        {
LABEL_185:
          __break(1u);
          goto LABEL_186;
        }
      }
      *(_QWORD *)v250 = v89;
      lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
      AnyHashable.init<A>(_:)();
      specialized Dictionary.subscript.setter((uint64_t)v257, v19, (uint64_t)v33);
      v69 = 4;
      switch((int)v32)
      {
        case 1:
        case 13:
          v69 = 513;
          break;
        case 2:
          break;
        case 17:
          v69 = 516;
          break;
        case 28:
        case 69:
          v69 = 640;
          break;
        case 30:
          v69 = 642;
          break;
        case 63:
          v69 = 514;
          break;
        default:
          goto LABEL_26;
      }
LABEL_27:
      v70 = v249;
      v71 = *(_QWORD *)(v249 + 16);
      v237 = v69;
      if (v71)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
        v72 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
      }
      else
      {
        v72 = (_QWORD *)MEMORY[0x1E0DEE9E0];
      }
      v109 = *(_QWORD *)(v249 + 64);
      v245 = v249 + 64;
      v110 = -1;
      v111 = -1 << *(_BYTE *)(v249 + 32);
      v236 = ~v111;
      if (-v111 < 64)
        v110 = ~(-1 << -(char)v111);
      v112 = v110 & v109;
      v244 = (unint64_t)(63 - v111) >> 6;
      v113 = &v257[16];
      v114 = (_OWORD *)((char *)v324 + 8);
      v115 = &v250[16];
      v242 = v72 + 8;
      swift_bridgeObjectRetain();
      v247 = 0;
      v246 = (std::__fs::filesystem::path *)(MEMORY[0x1E0DEE9B8] + 8);
      v243 = &v250[16];
      if (v112)
        goto LABEL_53;
LABEL_54:
      v121 = (uint64_t)v247 + 1;
      if (__OFADD__(v247, 1))
        goto LABEL_175;
      if (v121 < v244)
      {
        v122 = *(_QWORD *)(v245 + 8 * v121);
        v123 = (uint64_t *)((char *)v247 + 1);
        if (v122)
          goto LABEL_73;
        v123 = (uint64_t *)((char *)v247 + 2);
        if ((uint64_t)v247 + 2 < v244)
        {
          v122 = *(_QWORD *)(v245 + 8 * (_QWORD)v123);
          if (v122)
            goto LABEL_73;
          v123 = (uint64_t *)((char *)v247 + 3);
          if ((uint64_t)v247 + 3 < v244)
          {
            v122 = *(_QWORD *)(v245 + 8 * (_QWORD)v123);
            if (v122)
              goto LABEL_73;
            v123 = (uint64_t *)((char *)v247 + 4);
            if ((uint64_t)v247 + 4 < v244)
            {
              v122 = *(_QWORD *)(v245 + 8 * (_QWORD)v123);
              if (v122)
                goto LABEL_73;
              v123 = (uint64_t *)((char *)v247 + 5);
              if ((uint64_t)v247 + 5 < v244)
              {
                v122 = *(_QWORD *)(v245 + 8 * (_QWORD)v123);
                if (v122)
                  goto LABEL_73;
                v123 = (uint64_t *)((char *)v247 + 6);
                if ((uint64_t)v247 + 6 < v244)
                {
                  v122 = *(_QWORD *)(v245 + 8 * (_QWORD)v123);
                  if (!v122)
                  {
                    v124 = (char *)v247 + 7;
                    if ((uint64_t)v247 + 7 < v244)
                    {
                      v122 = *(_QWORD *)(v245 + 8 * (_QWORD)v124);
                      if (v122)
                      {
                        v123 = (uint64_t *)((char *)v247 + 7);
                        goto LABEL_73;
                      }
                      while (1)
                      {
                        v123 = (uint64_t *)(v124 + 1);
                        if (__OFADD__(v124, 1))
                          goto LABEL_183;
                        if ((uint64_t)v123 >= v244)
                          goto LABEL_79;
                        v122 = *(_QWORD *)(v245 + 8 * (_QWORD)v123);
                        ++v124;
                        if (v122)
                          goto LABEL_73;
                      }
                    }
                    goto LABEL_79;
                  }
LABEL_73:
                  v247 = v123;
                  v248 = (v122 - 1) & v122;
                  for (i = __clz(__rbit64(v122)) + ((_QWORD)v123 << 6); ; i = __clz(__rbit64(v112)) | ((_QWORD)v247 << 6))
                  {
                    v125 = (uint64_t *)(*(_QWORD *)(v70 + 48) + 16 * i);
                    v127 = *v125;
                    v126 = v125[1];
                    outlined init with copy of AnyHashable(*(_QWORD *)(v70 + 56) + 40 * i, (uint64_t)v113);
                    *(_QWORD *)v257 = v127;
                    *(_QWORD *)&v257[8] = v126;
                    v128 = *((_OWORD *)v113 + 1);
                    v320 = *(_OWORD *)v113;
                    v321 = v128;
                    v322 = *((_QWORD *)v113 + 4);
                    v323 = v127;
                    *(_QWORD *)&v324[0] = v126;
                    swift_bridgeObjectRetain();
                    swift_dynamicCast();
                    v32 = v323;
                    v33 = *(_OWORD **)&v324[0];
                    outlined init with take of Any(v114, v115);
                    outlined init with take of Any(v115, v325);
                    outlined init with take of Any(v325, v250);
                    v129 = specialized __RawDictionaryStorage.find<A>(_:)(v32, (uint64_t)v33);
                    v19 = v129;
                    if ((v130 & 1) != 0)
                    {
                      v116 = v113;
                      v117 = v114;
                      v118 = v70;
                      v119 = (uint64_t *)(v72[6] + 16 * v129);
                      swift_bridgeObjectRelease();
                      *v119 = v32;
                      v119[1] = (uint64_t)v33;
                      v70 = v118;
                      v114 = v117;
                      v113 = v116;
                      v115 = v243;
                      v19 = v72[7] + 32 * v19;
                      __swift_destroy_boxed_opaque_existential_1(v19);
                      outlined init with take of Any(v250, (_OWORD *)v19);
                      v112 = v248;
                      if (!v248)
                        goto LABEL_54;
                    }
                    else
                    {
                      if (v72[2] >= v72[3])
                      {
                        __break(1u);
                        goto LABEL_172;
                      }
                      *(_QWORD *)((char *)v242 + ((v129 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v129;
                      v131 = (uint64_t *)(v72[6] + 16 * v129);
                      *v131 = v32;
                      v131[1] = (uint64_t)v33;
                      outlined init with take of Any(v250, (_OWORD *)(v72[7] + 32 * v129));
                      v132 = v72[2];
                      v133 = __OFADD__(v132, 1);
                      v134 = v132 + 1;
                      if (v133)
                        goto LABEL_173;
                      v72[2] = v134;
                      v112 = v248;
                      if (!v248)
                        goto LABEL_54;
                    }
LABEL_53:
                    v248 = (v112 - 1) & v112;
                  }
                }
              }
            }
          }
        }
      }
LABEL_79:
      outlined consume of Set<A1>.Iterator._Variant<A><A1>();
      swift_bridgeObjectRelease();
      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
      v135 = objc_allocWithZone((Class)NSError);
      v136 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v137 = objc_msgSend(v135, sel_initWithDomain_code_userInfo_, v136, v237, _NativeDictionary.bridged()(), v236);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v138 = objc_msgSend(v137, sel_domain);
      v139 = static String._unconditionallyBridgeFromObjectiveC(_:)(v138);
      v141 = v140;

      if (v139 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v141 == v142)
        goto LABEL_85;
      v144 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of PathOrURL(v240, v241, v239, 1);
      if ((v144 & 1) == 0)
      {
        __break(1u);
LABEL_85:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        outlined consume of PathOrURL(v240, v241, v239, 1);
      }
LABEL_126:
      swift_willThrow();
      return;
    }
LABEL_188:
    *(_QWORD *)v257 = 0;
    *(_QWORD *)&v257[8] = 0xE000000000000000;
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    *(_QWORD *)v257 = 0xD000000000000014;
    *(_QWORD *)&v257[8] = 0x8000000182306980;
    *(_DWORD *)v250 = v32;
    v235._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v235);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x181D1693CLL);
  }
  *(_QWORD *)&v320 = MEMORY[0x1E0DEE9E0];
  v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
  v75 = v74;
  *(_QWORD *)v250 = v240;
  *(_QWORD *)&v250[8] = v241;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)v257, (uint64_t)v73, v75);
  v19 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
  v77 = v76;
  URL.init(_fileManagerFailableFileURLWithPath:)((uint64_t)v240, v241, (uint64_t)v250);
  if (*(_QWORD *)v250)
  {
    v323 = *(_QWORD *)v250;
    v324[0] = *(_OWORD *)&v250[8];
    lazy protocol witness table accessor for type URL and conformance URL();
    AnyHashable.init<A>(_:)();
  }
  else
  {
    memset(v257, 0, 40);
  }
  specialized Dictionary.subscript.setter((uint64_t)v257, v19, v77);
  v249 = v320;
  v241 = v320;
  swift_bridgeObjectRetain();
  if ((_DWORD)v32 == 102)
  {
LABEL_40:
    v95 = 512;
  }
  else
  {
    if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
      goto LABEL_188;
    v19 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
    v99 = v98;
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
    v100 = (int)POSIXErrorCode.rawValue.getter();
    v101 = objc_allocWithZone((Class)NSError);
    v102 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v103 = objc_msgSend(v101, sel_initWithDomain_code_userInfo_, v102, v100, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v104 = objc_msgSend(v103, sel_domain);
    v105 = static String._unconditionallyBridgeFromObjectiveC(_:)(v104);
    v107 = v106;

    if (v105 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain")) && v107 == v108)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v224 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v224 & 1) == 0)
      {
LABEL_186:
        __break(1u);
LABEL_187:
        __break(1u);
      }
    }
    *(_QWORD *)v250 = v103;
    lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)v257, v19, v99);
    v95 = 4;
    switch((int)v32)
    {
      case 1:
      case 13:
        v95 = 513;
        break;
      case 2:
        break;
      case 17:
        v95 = 516;
        break;
      case 28:
      case 69:
        v95 = 640;
        break;
      case 30:
        v95 = 642;
        break;
      case 63:
        v95 = 514;
        break;
      default:
        goto LABEL_40;
    }
  }
  v32 = v249;
  v96 = *(_QWORD *)(v249 + 16);
  v240 = (void *)v95;
  if (v96)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v97 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v97 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  v145 = *(_QWORD *)(v249 + 64);
  v245 = v249 + 64;
  v146 = -1;
  v147 = -1 << *(_BYTE *)(v249 + 32);
  v239 = ~v147;
  if (-v147 < 64)
    v146 = ~(-1 << -(char)v147);
  v148 = v146 & v145;
  v244 = (unint64_t)(63 - v147) >> 6;
  v149 = &v257[16];
  v33 = (_OWORD *)((char *)v324 + 8);
  v150 = &v250[16];
  v242 = v97 + 8;
  swift_bridgeObjectRetain();
  v247 = 0;
  v246 = (std::__fs::filesystem::path *)(MEMORY[0x1E0DEE9B8] + 8);
  v243 = &v250[16];
  if (v148)
    goto LABEL_92;
LABEL_93:
  v156 = (uint64_t)v247 + 1;
  if (__OFADD__(v247, 1))
    goto LABEL_176;
  if (v156 >= v244)
    goto LABEL_118;
  v157 = *(_QWORD *)(v245 + 8 * v156);
  v158 = (uint64_t *)((char *)v247 + 1);
  if (v157)
    goto LABEL_112;
  v158 = (uint64_t *)((char *)v247 + 2);
  if ((uint64_t)v247 + 2 >= v244)
    goto LABEL_118;
  v157 = *(_QWORD *)(v245 + 8 * (_QWORD)v158);
  if (v157)
    goto LABEL_112;
  v158 = (uint64_t *)((char *)v247 + 3);
  if ((uint64_t)v247 + 3 >= v244)
    goto LABEL_118;
  v157 = *(_QWORD *)(v245 + 8 * (_QWORD)v158);
  if (v157)
    goto LABEL_112;
  v158 = (uint64_t *)((char *)v247 + 4);
  if ((uint64_t)v247 + 4 >= v244)
    goto LABEL_118;
  v157 = *(_QWORD *)(v245 + 8 * (_QWORD)v158);
  if (v157)
    goto LABEL_112;
  v158 = (uint64_t *)((char *)v247 + 5);
  if ((uint64_t)v247 + 5 >= v244)
    goto LABEL_118;
  v157 = *(_QWORD *)(v245 + 8 * (_QWORD)v158);
  if (v157)
    goto LABEL_112;
  v158 = (uint64_t *)((char *)v247 + 6);
  if ((uint64_t)v247 + 6 >= v244)
  {
LABEL_118:
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v171 = objc_allocWithZone((Class)NSError);
    v172 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v173 = objc_msgSend(v171, sel_initWithDomain_code_userInfo_, v172, v240, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v174 = objc_msgSend(v173, sel_domain);
    v175 = static String._unconditionallyBridgeFromObjectiveC(_:)(v174);
    v177 = v176;

    if (v175 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) || v177 != v178)
    {
      v180 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v180 & 1) != 0)
        goto LABEL_126;
      __break(1u);
    }
    swift_bridgeObjectRelease();
LABEL_125:
    swift_bridgeObjectRelease_n();
    goto LABEL_126;
  }
  v157 = *(_QWORD *)(v245 + 8 * (_QWORD)v158);
  if (!v157)
  {
    v159 = (char *)v247 + 7;
    if ((uint64_t)v247 + 7 < v244)
    {
      v157 = *(_QWORD *)(v245 + 8 * (_QWORD)v159);
      if (!v157)
      {
        while (1)
        {
          v158 = (uint64_t *)(v159 + 1);
          if (__OFADD__(v159, 1))
            goto LABEL_184;
          if ((uint64_t)v158 >= v244)
            goto LABEL_118;
          v157 = *(_QWORD *)(v245 + 8 * (_QWORD)v158);
          ++v159;
          if (v157)
            goto LABEL_112;
        }
      }
      v158 = (uint64_t *)((char *)v247 + 7);
      goto LABEL_112;
    }
    goto LABEL_118;
  }
LABEL_112:
  v247 = v158;
  v248 = (v157 - 1) & v157;
  for (j = __clz(__rbit64(v157)) + ((_QWORD)v158 << 6); ; j = __clz(__rbit64(v148)) | ((_QWORD)v247 << 6))
  {
    v160 = (uint64_t *)(*(_QWORD *)(v32 + 48) + 16 * j);
    v162 = *v160;
    v161 = v160[1];
    outlined init with copy of AnyHashable(*(_QWORD *)(v32 + 56) + 40 * j, (uint64_t)v149);
    *(_QWORD *)v257 = v162;
    *(_QWORD *)&v257[8] = v161;
    v163 = *((_OWORD *)v149 + 1);
    v320 = *(_OWORD *)v149;
    v321 = v163;
    v322 = *((_QWORD *)v149 + 4);
    v323 = v162;
    *(_QWORD *)&v324[0] = v161;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    v164 = v323;
    v19 = *(_QWORD *)&v324[0];
    outlined init with take of Any(v33, v150);
    outlined init with take of Any(v150, v325);
    outlined init with take of Any(v325, v250);
    v165 = specialized __RawDictionaryStorage.find<A>(_:)(v164, v19);
    v166 = v165;
    if ((v167 & 1) != 0)
    {
      v151 = v149;
      v152 = v33;
      v153 = v32;
      v154 = (uint64_t *)(v97[6] + 16 * v165);
      swift_bridgeObjectRelease();
      *v154 = v164;
      v154[1] = v19;
      v32 = v153;
      v33 = v152;
      v149 = v151;
      v150 = v243;
      v19 = v97[7] + 32 * v166;
      __swift_destroy_boxed_opaque_existential_1(v19);
      outlined init with take of Any(v250, (_OWORD *)v19);
      v148 = v248;
      if (!v248)
        goto LABEL_93;
      goto LABEL_92;
    }
    if (v97[2] >= v97[3])
      break;
    *(_QWORD *)((char *)v242 + ((v165 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v165;
    v168 = (uint64_t *)(v97[6] + 16 * v165);
    *v168 = v164;
    v168[1] = v19;
    outlined init with take of Any(v250, (_OWORD *)(v97[7] + 32 * v165));
    v169 = v97[2];
    v133 = __OFADD__(v169, 1);
    v170 = v169 + 1;
    if (v133)
      goto LABEL_174;
    v97[2] = v170;
    v148 = v248;
    if (!v248)
      goto LABEL_93;
LABEL_92:
    v248 = (v148 - 1) & v148;
  }
LABEL_172:
  __break(1u);
LABEL_173:
  __break(1u);
LABEL_174:
  __break(1u);
LABEL_175:
  __break(1u);
LABEL_176:
  __break(1u);
LABEL_177:
  v34 = String.UTF8View._foreignCount()();
LABEL_9:
  v35 = v32;
  v36 = v243;
  v20 = v246;
  v14 = v247;
  v21 = 3 * v34;
  if ((unsigned __int128)(v34 * (__int128)3) >> 64 != (3 * v34) >> 63)
  {
    __break(1u);
    goto LABEL_179;
  }
  if (v21 < -1)
    goto LABEL_180;
  v37 = v21 + 1;
  swift_bridgeObjectRetain();
  isStackAllocationSafe = outlined copy of PathOrURL(v240, v241, v239, v35);
  v242 = v33;
  if (v21 >= 1024)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      v181 = (const std::__fs::filesystem::path *)swift_slowAlloc();
      swift_bridgeObjectRetain();
      String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v181, v21 + 1, 1, v245, (unint64_t)v33);
      v183 = v182;
      swift_bridgeObjectRelease();
      if ((v183 & 1) != 0)
      {
        v225 = v181;
        static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
        v226 = objc_allocWithZone((Class)NSError);
        v227 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v228 = objc_msgSend(v226, sel_initWithDomain_code_userInfo_, v227, 514, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v248 = (uint64_t)v228;
        v229 = objc_msgSend(v228, sel_domain);
        v230 = static String._unconditionallyBridgeFromObjectiveC(_:)(v229);
        v232 = v231;

        if (v230 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v232 == v233)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          v234 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v234 & 1) == 0)
            goto LABEL_187;
        }
        swift_willThrow();
        v46 = v240;
        v45 = v241;
        v43 = v239;
        v181 = v225;
      }
      else
      {
        v43 = v239;
        v184 = (const std::__fs::filesystem::path *)v19;
        v46 = v240;
        v45 = v241;
        closure #1 in closure #1 in closure #3 in closure #1 in writeToFileAux(path:buffer:options:attributes:reportProgress:)(v181, v246, v184, v247, (uint64_t)v243, v244, v240, v241, v239, v35);
        if (!v248)
        {
          MEMORY[0x186DA9E78](v181, -1, -1);
LABEL_130:
          swift_bridgeObjectRelease();
          outlined consume of PathOrURL(v46, v45, v43, v35);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v21 = (uint64_t)v250;
          goto LABEL_131;
        }
      }
      MEMORY[0x186DA9E78](v181, -1, -1);
      goto LABEL_163;
    }
  }
  v247 = &v236;
  MEMORY[0x1E0C80A78](isStackAllocationSafe);
  v40 = (const std::__fs::filesystem::path *)((char *)&v236 - v39);
  swift_bridgeObjectRetain();
  String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v40, v37, 1, v245, (unint64_t)v33);
  v42 = v41;
  swift_bridgeObjectRelease();
  if ((v42 & 1) != 0)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v78 = objc_allocWithZone((Class)NSError);
    v79 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v48 = objc_msgSend(v78, sel_initWithDomain_code_userInfo_, v79, 514, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v80 = objc_msgSend(v48, sel_domain);
    v81 = static String._unconditionallyBridgeFromObjectiveC(_:)(v80);
    v83 = v82;

    if (v81 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v83 == v84)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v222 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v222 & 1) == 0)
      {
        __break(1u);
LABEL_183:
        __break(1u);
LABEL_184:
        __break(1u);
        goto LABEL_185;
      }
    }
    swift_willThrow();
    v46 = v240;
    v45 = v241;
    v43 = v239;
    goto LABEL_148;
  }
  v43 = v239;
  v44 = (const std::__fs::filesystem::path *)v19;
  v46 = v240;
  v45 = v241;
  v47 = (void *)v248;
  closure #1 in closure #1 in closure #3 in closure #1 in writeToFileAux(path:buffer:options:attributes:reportProgress:)(v40, v20, v44, v14, (uint64_t)v36, v244, v240, v241, v239, v35);
  v48 = v47;
  if (!v47)
  {
    v248 = 0;
    goto LABEL_130;
  }
LABEL_148:
  v248 = (uint64_t)v48;
  swift_willThrow();
LABEL_163:
  swift_bridgeObjectRelease();
  outlined consume of PathOrURL(v46, v45, v43, v35);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

void closure #1 in closure #1 in closure #3 in closure #1 in writeToFileAux(path:buffer:options:attributes:reportProgress:)(const std::__fs::filesystem::path *a1, const std::__fs::filesystem::path *a2, const std::__fs::filesystem::path *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, unint64_t a8, uint64_t a9, char a10)
{
  __int128 *v10;
  unint64_t v11;
  std::error_code *v18;
  std::error_code *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSErrorUserInfoKey *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  id v58;
  id v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  id v73;
  id v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  _OWORD *v82;
  _OWORD *v83;
  __int128 *v84;
  _OWORD *v85;
  _OWORD *v86;
  uint64_t v87;
  uint64_t *v88;
  _OWORD *v89;
  unint64_t j;
  int64_t v91;
  unint64_t v92;
  int64_t v93;
  int64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  char v101;
  uint64_t *v102;
  uint64_t v103;
  BOOL v104;
  uint64_t v105;
  id v106;
  uint64_t v107;
  id v108;
  id v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  __int128 *v119;
  _OWORD *v120;
  _OWORD *v121;
  _OWORD *v122;
  _OWORD *v123;
  uint64_t v124;
  uint64_t *v125;
  _OWORD *v126;
  unint64_t i;
  int64_t v128;
  unint64_t v129;
  int64_t v130;
  int64_t v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  char v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  id v142;
  uint64_t v143;
  id v144;
  id v145;
  id v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char v151;
  char v152;
  char v153;
  Swift::String v154;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  uint64_t v158;
  int64_t v159;
  int64_t v160;
  uint64_t v161;
  uint64_t v162;
  int64_t v163;
  int64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD v170[4];
  Swift::String v171;
  _QWORD v172[4];
  _OWORD v173[2];
  __int128 v174;
  __int128 v175;
  uint64_t v176;
  uint64_t v177;

  if (!a1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v33 = objc_allocWithZone((Class)NSError);
    v34 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v35 = objc_msgSend(v33, sel_initWithDomain_code_userInfo_, v34, 514, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v25 = (NSErrorUserInfoKey *)objc_msgSend(v35, sel_domain);
    v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    v38 = v37;

    if (v36 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v38 == v39)
      goto LABEL_108;
    v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v26 & 1) != 0)
      goto LABEL_109;
    __break(1u);
    goto LABEL_13;
  }
  v11 = a8;
  v157 = a7;
  unlink((const char *)a1);
  rename(a2, a1, v18);
  if (v20 || (rename(a3, a2, v19), v21))
  {
    LODWORD(v10) = MEMORY[0x186DA4118]();
    unlink((const char *)a1);
    unlink((const char *)a3);
    v22 = *a4;
    v23 = a4[1];
    swift_bridgeObjectRetain();
    cleanupTemporaryDirectory(at:)(v22, v23);
    swift_bridgeObjectRelease();
    cleanupTemporaryDirectory(at:)(a5, a6);
    v24 = MEMORY[0x1E0DEE9E0];
    v25 = (NSErrorUserInfoKey *)&NSFilePathErrorKey;
    v26 = (uint64_t)&NSURLErrorKey;
    if ((a10 & 1) == 0)
    {
      v167 = MEMORY[0x1E0DEE9E0];
      v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
      v29 = v28;
      v171._countAndFlagsBits = (uint64_t)v157;
      v171._object = (void *)v11;
      swift_bridgeObjectRetain();
      AnyHashable.init<A>(_:)();
      specialized Dictionary.subscript.setter((uint64_t)&v174, (uint64_t)v27, v29);
      v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
      v32 = v31;
      URL.init(_fileManagerFailableFileURLWithPath:)((uint64_t)v157, v11, (uint64_t)&v171);
      if (v171._countAndFlagsBits)
      {
        v170[0] = v172[0];
        lazy protocol witness table accessor for type URL and conformance URL();
        AnyHashable.init<A>(_:)();
      }
      else
      {
        v174 = 0u;
        v175 = 0u;
        v176 = 0;
      }
      specialized Dictionary.subscript.setter((uint64_t)&v174, (uint64_t)v30, v32);
      v177 = v167;
      swift_bridgeObjectRetain();
      if ((_DWORD)v10 == 102)
      {
LABEL_23:
        v64 = 512;
        goto LABEL_24;
      }
      if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) == 0)
      {
        v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
        v69 = v68;
        static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
        v70 = (int)POSIXErrorCode.rawValue.getter();
        v71 = objc_allocWithZone((Class)NSError);
        v72 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v73 = objc_msgSend(v71, sel_initWithDomain_code_userInfo_, v72, v70, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v74 = objc_msgSend(v73, sel_domain);
        v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(v74);
        v77 = v76;

        if (v75 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain")) && v77 == v78)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          v153 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v153 & 1) == 0)
          {
LABEL_134:
            __break(1u);
            goto LABEL_135;
          }
        }
        v171._countAndFlagsBits = (uint64_t)v73;
        lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
        AnyHashable.init<A>(_:)();
        specialized Dictionary.subscript.setter((uint64_t)&v174, (uint64_t)v67, v69);
        v64 = 4;
        switch((int)v10)
        {
          case 1:
          case 13:
            v64 = 513;
            break;
          case 2:
            break;
          case 17:
            v64 = 516;
            break;
          case 28:
          case 69:
            v64 = 640;
            break;
          case 30:
            v64 = 642;
            break;
          case 63:
            v64 = 514;
            break;
          default:
            goto LABEL_23;
        }
LABEL_24:
        v65 = v177;
        v158 = v64;
        if (*(_QWORD *)(v177 + 16))
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
          v66 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
        }
        else
        {
          v66 = (_QWORD *)MEMORY[0x1E0DEE9E0];
        }
        v162 = v65 + 64;
        v116 = -1;
        v117 = -1 << *(_BYTE *)(v65 + 32);
        if (-v117 < 64)
          v116 = ~(-1 << -(char)v117);
        v118 = v116 & *(_QWORD *)(v65 + 64);
        v119 = &v175;
        v120 = v170;
        v121 = v172;
        v160 = (unint64_t)(63 - v117) >> 6;
        swift_bridgeObjectRetain();
        v164 = 0;
        LODWORD(v10) = 40;
        if (v118)
          goto LABEL_75;
LABEL_76:
        v128 = v164 + 1;
        if (!__OFADD__(v164, 1))
        {
          if (v128 < v160)
          {
            v129 = *(_QWORD *)(v162 + 8 * v128);
            v130 = v164 + 1;
            if (v129)
              goto LABEL_95;
            v130 = v164 + 2;
            if (v164 + 2 < v160)
            {
              v129 = *(_QWORD *)(v162 + 8 * v130);
              if (v129)
                goto LABEL_95;
              v130 = v164 + 3;
              if (v164 + 3 < v160)
              {
                v129 = *(_QWORD *)(v162 + 8 * v130);
                if (v129)
                  goto LABEL_95;
                v130 = v164 + 4;
                if (v164 + 4 < v160)
                {
                  v129 = *(_QWORD *)(v162 + 8 * v130);
                  if (v129)
                    goto LABEL_95;
                  v130 = v164 + 5;
                  if (v164 + 5 < v160)
                  {
                    v129 = *(_QWORD *)(v162 + 8 * v130);
                    if (v129)
                      goto LABEL_95;
                    v130 = v164 + 6;
                    if (v164 + 6 < v160)
                    {
                      v129 = *(_QWORD *)(v162 + 8 * v130);
                      if (!v129)
                      {
                        v131 = v164 + 7;
                        if (v164 + 7 < v160)
                        {
                          v129 = *(_QWORD *)(v162 + 8 * v131);
                          if (v129)
                          {
                            v130 = v164 + 7;
                            goto LABEL_95;
                          }
                          while (1)
                          {
                            v130 = v131 + 1;
                            if (__OFADD__(v131, 1))
                              goto LABEL_132;
                            if (v130 >= v160)
                              goto LABEL_101;
                            v129 = *(_QWORD *)(v162 + 8 * v130);
                            ++v131;
                            if (v129)
                              goto LABEL_95;
                          }
                        }
                        goto LABEL_101;
                      }
LABEL_95:
                      v164 = v130;
                      v166 = (v129 - 1) & v129;
                      for (i = __clz(__rbit64(v129)) + (v130 << 6); ; i = __clz(__rbit64(v118)) | (v164 << 6))
                      {
                        v132 = (uint64_t *)(*(_QWORD *)(v65 + 48) + 16 * i);
                        v134 = *v132;
                        v133 = v132[1];
                        outlined init with copy of AnyHashable(*(_QWORD *)(v65 + 56) + 40 * i, (uint64_t)v119);
                        *(_QWORD *)&v174 = v134;
                        *((_QWORD *)&v174 + 1) = v133;
                        v169 = v133;
                        swift_bridgeObjectRetain();
                        swift_dynamicCast();
                        v135 = v134;
                        outlined init with take of Any(v120, v121);
                        outlined init with take of Any(v121, v173);
                        outlined init with take of Any(v173, &v171);
                        v136 = specialized __RawDictionaryStorage.find<A>(_:)(v134, v169);
                        v137 = v136;
                        if ((v138 & 1) != 0)
                        {
                          v10 = v119;
                          v122 = v121;
                          v123 = v120;
                          v124 = v65;
                          v125 = (uint64_t *)(v66[6] + 16 * v136);
                          swift_bridgeObjectRelease();
                          *v125 = v135;
                          v125[1] = v169;
                          v65 = v124;
                          v120 = v123;
                          v121 = v122;
                          v119 = v10;
                          LODWORD(v10) = 40;
                          v126 = (_OWORD *)(v66[7] + 32 * v137);
                          __swift_destroy_boxed_opaque_existential_1((uint64_t)v126);
                          outlined init with take of Any(&v171, v126);
                          v118 = v166;
                          if (!v166)
                            goto LABEL_76;
                        }
                        else
                        {
                          if (v66[2] >= v66[3])
                            goto LABEL_126;
                          *(_QWORD *)((char *)v66 + ((v136 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v136;
                          v139 = (uint64_t *)(v66[6] + 16 * v136);
                          *v139 = v135;
                          v139[1] = v169;
                          outlined init with take of Any(&v171, (_OWORD *)(v66[7] + 32 * v136));
                          v140 = v66[2];
                          v104 = __OFADD__(v140, 1);
                          v141 = v140 + 1;
                          if (v104)
                            goto LABEL_128;
                          v66[2] = v141;
                          v118 = v166;
                          if (!v166)
                            goto LABEL_76;
                        }
LABEL_75:
                        v166 = (v118 - 1) & v118;
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_101:
          outlined consume of Set<A1>.Iterator._Variant<A><A1>();
          swift_bridgeObjectRelease();
          static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
          v142 = objc_allocWithZone((Class)NSError);
          v143 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v144 = objc_msgSend(v142, sel_initWithDomain_code_userInfo_, v143, v158, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v145 = objc_msgSend(v144, sel_domain);
          v146 = static String._unconditionallyBridgeFromObjectiveC(_:)(v145);
          v148 = v147;

          if (v146 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"))
            && v148 == v149)
          {
            goto LABEL_107;
          }
          v151 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v151 & 1) == 0)
          {
            __break(1u);
LABEL_107:
            swift_bridgeObjectRelease();
LABEL_108:
            swift_bridgeObjectRelease_n();
          }
LABEL_109:
          swift_willThrow();
          return;
        }
        goto LABEL_130;
      }
LABEL_135:
      *(_QWORD *)&v174 = 0;
      *((_QWORD *)&v174 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v174 = 0xD000000000000014;
      *((_QWORD *)&v174 + 1) = 0x8000000182306980;
      LODWORD(v171._countAndFlagsBits) = (_DWORD)v10;
      v154._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v154);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x181D17D4CLL);
    }
LABEL_13:
    v168 = v24;
    v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)v26);
    v43 = v42;
    v171._countAndFlagsBits = (uint64_t)v157;
    v171._object = (void *)v11;
    v172[0] = a9;
    lazy protocol witness table accessor for type URL and conformance URL();
    v44 = v157;
    swift_retain_n();
    swift_retain_n();
    v45 = v44;
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v174, (uint64_t)v41, v43);
    v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v25);
    v48 = v47;
    *(_QWORD *)&v174 = v45;
    *((_QWORD *)&v174 + 1) = v11;
    *(_QWORD *)&v175 = a9;
    v171 = URL.path(percentEncoded:)(0);
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v174, (uint64_t)v46, v48);
    v177 = v168;
    swift_bridgeObjectRetain();
    if ((_DWORD)v10 == 102)
    {
LABEL_14:
      v49 = 512;
    }
    else
    {
      if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
        goto LABEL_135;
      v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
      v54 = v53;
      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
      v55 = (int)POSIXErrorCode.rawValue.getter();
      v56 = objc_allocWithZone((Class)NSError);
      v57 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v58 = objc_msgSend(v56, sel_initWithDomain_code_userInfo_, v57, v55, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v59 = objc_msgSend(v58, sel_domain);
      v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
      v62 = v61;

      if (v60 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain")) && v62 == v63)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v152 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v152 & 1) == 0)
        {
LABEL_133:
          __break(1u);
          goto LABEL_134;
        }
      }
      v171._countAndFlagsBits = (uint64_t)v58;
      lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
      AnyHashable.init<A>(_:)();
      specialized Dictionary.subscript.setter((uint64_t)&v174, (uint64_t)v52, v54);
      v49 = 4;
      switch((int)v10)
      {
        case 1:
        case 13:
          v49 = 513;
          break;
        case 2:
          break;
        case 17:
          v49 = 516;
          break;
        case 28:
        case 69:
          v49 = 640;
          break;
        case 30:
          v49 = 642;
          break;
        case 63:
          v49 = 514;
          break;
        default:
          goto LABEL_14;
      }
    }
    v50 = v177;
    v155 = v11;
    v156 = v49;
    if (*(_QWORD *)(v177 + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v51 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      v51 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    }
    v161 = v50 + 64;
    v79 = -1;
    v80 = -1 << *(_BYTE *)(v50 + 32);
    if (-v80 < 64)
      v79 = ~(-1 << -(char)v80);
    v81 = v79 & *(_QWORD *)(v50 + 64);
    v10 = &v175;
    v82 = v170;
    v83 = v172;
    v159 = (unint64_t)(63 - v80) >> 6;
    swift_bridgeObjectRetain();
    v163 = 0;
    if (v81)
      goto LABEL_36;
LABEL_37:
    v91 = v163 + 1;
    if (__OFADD__(v163, 1))
    {
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
      goto LABEL_133;
    }
    if (v91 < v159)
    {
      v92 = *(_QWORD *)(v161 + 8 * v91);
      v93 = v163 + 1;
      if (v92)
        goto LABEL_56;
      v93 = v163 + 2;
      if (v163 + 2 < v159)
      {
        v92 = *(_QWORD *)(v161 + 8 * v93);
        if (v92)
          goto LABEL_56;
        v93 = v163 + 3;
        if (v163 + 3 < v159)
        {
          v92 = *(_QWORD *)(v161 + 8 * v93);
          if (v92)
            goto LABEL_56;
          v93 = v163 + 4;
          if (v163 + 4 < v159)
          {
            v92 = *(_QWORD *)(v161 + 8 * v93);
            if (v92)
              goto LABEL_56;
            v93 = v163 + 5;
            if (v163 + 5 < v159)
            {
              v92 = *(_QWORD *)(v161 + 8 * v93);
              if (v92)
                goto LABEL_56;
              v93 = v163 + 6;
              if (v163 + 6 < v159)
              {
                v92 = *(_QWORD *)(v161 + 8 * v93);
                if (v92)
                  goto LABEL_56;
                v94 = v163 + 7;
                if (v163 + 7 < v159)
                {
                  v92 = *(_QWORD *)(v161 + 8 * v94);
                  if (!v92)
                  {
                    while (1)
                    {
                      v93 = v94 + 1;
                      if (__OFADD__(v94, 1))
                        goto LABEL_131;
                      if (v93 >= v159)
                        goto LABEL_62;
                      v92 = *(_QWORD *)(v161 + 8 * v93);
                      ++v94;
                      if (v92)
                        goto LABEL_56;
                    }
                  }
                  v93 = v163 + 7;
LABEL_56:
                  v163 = v93;
                  v165 = (v92 - 1) & v92;
                  for (j = __clz(__rbit64(v92)) + (v93 << 6); ; j = __clz(__rbit64(v81)) | (v163 << 6))
                  {
                    v95 = (uint64_t *)(*(_QWORD *)(v50 + 48) + 16 * j);
                    v97 = *v95;
                    v96 = v95[1];
                    outlined init with copy of AnyHashable(*(_QWORD *)(v50 + 56) + 40 * j, (uint64_t)v10);
                    *(_QWORD *)&v174 = v97;
                    *((_QWORD *)&v174 + 1) = v96;
                    v169 = v96;
                    swift_bridgeObjectRetain();
                    swift_dynamicCast();
                    v98 = v97;
                    outlined init with take of Any(v82, v83);
                    outlined init with take of Any(v83, v173);
                    outlined init with take of Any(v173, &v171);
                    v99 = specialized __RawDictionaryStorage.find<A>(_:)(v97, v169);
                    v100 = v99;
                    if ((v101 & 1) != 0)
                    {
                      v84 = v10;
                      v85 = v83;
                      v86 = v82;
                      v87 = v50;
                      v88 = (uint64_t *)(v51[6] + 16 * v99);
                      swift_bridgeObjectRelease();
                      *v88 = v98;
                      v88[1] = v169;
                      v50 = v87;
                      v82 = v86;
                      v83 = v85;
                      v10 = v84;
                      v89 = (_OWORD *)(v51[7] + 32 * v100);
                      __swift_destroy_boxed_opaque_existential_1((uint64_t)v89);
                      outlined init with take of Any(&v171, v89);
                      v81 = v165;
                      if (!v165)
                        goto LABEL_37;
                    }
                    else
                    {
                      if (v51[2] >= v51[3])
                      {
                        __break(1u);
LABEL_126:
                        __break(1u);
LABEL_127:
                        __break(1u);
LABEL_128:
                        __break(1u);
                        goto LABEL_129;
                      }
                      *(_QWORD *)((char *)v51 + ((v99 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v99;
                      v102 = (uint64_t *)(v51[6] + 16 * v99);
                      *v102 = v98;
                      v102[1] = v169;
                      outlined init with take of Any(&v171, (_OWORD *)(v51[7] + 32 * v99));
                      v103 = v51[2];
                      v104 = __OFADD__(v103, 1);
                      v105 = v103 + 1;
                      if (v104)
                        goto LABEL_127;
                      v51[2] = v105;
                      v81 = v165;
                      if (!v165)
                        goto LABEL_37;
                    }
LABEL_36:
                    v165 = (v81 - 1) & v81;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_62:
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v106 = objc_allocWithZone((Class)NSError);
    v107 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v108 = objc_msgSend(v106, sel_initWithDomain_code_userInfo_, v107, v156, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v109 = objc_msgSend(v108, sel_domain);
    v110 = static String._unconditionallyBridgeFromObjectiveC(_:)(v109);
    v112 = v111;

    if (v110 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) || v112 != v113)
    {
      v115 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of PathOrURL(v157, v155, a9, 1);
      if ((v115 & 1) != 0)
        goto LABEL_109;
      __break(1u);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    outlined consume of PathOrURL(v157, v155, a9, 1);
    goto LABEL_109;
  }
  unlink((const char *)a1);
  cleanupTemporaryDirectory(at:)(a5, a6);
}

uint64_t specialized RandomAccessCollection<>.distance(from:to:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = a4 - a3;
  if (!a3)
    v4 = 0;
  if (result < 0 || v4 < result)
  {
    __break(1u);
  }
  else if ((a2 & 0x8000000000000000) == 0 && v4 >= a2)
  {
    return a2 - result;
  }
  __break(1u);
  return result;
}

void specialized static NSData._writeData(toPath:data:options:reportProgress:)(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, int a5)
{
  _OWORD *v5;
  id v10;
  __int128 *v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char v22;
  char v23;
  int v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t isStackAllocationSafe;
  uint64_t v35;
  const char *v36;
  std::error_category *v37;
  char v38;
  char v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  id v43;
  id v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  id v51;
  id v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  char v59;
  char v60;
  int v61;
  uint64_t v62;
  void *v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  const char *v68;
  std::error_category *v69;
  char v70;
  char v71;
  char v72;
  char v73;
  Swift::Int32 v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  id v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  id v83;
  id v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  id v91;
  id v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  const char *v98;
  char v99;
  char *v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  id v104;
  uint64_t v105;
  id v106;
  id v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  id v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  id v119;
  id v120;
  uint64_t v121;
  id v122;
  id v123;
  id v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  id v129;
  uint64_t v130;
  uint64_t v131;
  id v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  id v144;
  uint64_t v145;
  id v146;
  id v147;
  id v148;
  __int128 *v149;
  __int128 *v150;
  char v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  _OWORD *v158;
  uint64_t v159;
  _OWORD *v160;
  __int128 *v161;
  uint64_t *v162;
  unint64_t v163;
  int64_t v164;
  unint64_t v165;
  int64_t v166;
  int64_t v167;
  __int128 **v168;
  __int128 *v169;
  __int128 *v170;
  __int128 v171;
  unint64_t v172;
  unint64_t v173;
  char v174;
  uint64_t *v175;
  uint64_t v176;
  BOOL v177;
  uint64_t v178;
  id v179;
  uint64_t v180;
  id v181;
  id v182;
  id v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char v188;
  char v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  _OWORD *v196;
  uint64_t v197;
  _OWORD *v198;
  uint64_t v199;
  __int128 **v200;
  unint64_t v201;
  int64_t v202;
  unint64_t v203;
  int64_t v204;
  int64_t v205;
  __int128 **v206;
  __int128 *v207;
  __int128 *v208;
  __int128 v209;
  unint64_t v210;
  char v211;
  __int128 **v212;
  uint64_t v213;
  uint64_t v214;
  id v215;
  uint64_t v216;
  id v217;
  id v218;
  id v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char v224;
  char v225;
  id v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  id v230;
  uint64_t v231;
  id v232;
  id v233;
  id v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  id v239;
  Swift::Int32 v240;
  const char *v241;
  id v242;
  uint64_t v243;
  id v244;
  id v245;
  id v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  void *v250;
  id v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  id v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  unint64_t v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  id v269;
  uint64_t v270;
  id v271;
  id v272;
  id v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  char v277;
  uint64_t v278;
  _QWORD *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  _OWORD *v284;
  __int128 *v285;
  _OWORD *v286;
  uint64_t v287;
  uint64_t *v288;
  _OWORD *v289;
  unint64_t v290;
  int64_t v291;
  unint64_t v292;
  int64_t v293;
  int64_t v294;
  __int128 **v295;
  __int128 *v296;
  __int128 *v297;
  __int128 v298;
  uint64_t v299;
  unint64_t v300;
  char v301;
  uint64_t *v302;
  uint64_t v303;
  uint64_t v304;
  id v305;
  uint64_t v306;
  id v307;
  id v308;
  id v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  char v314;
  char v315;
  uint64_t v316;
  _QWORD *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  unint64_t v321;
  __int128 *v322;
  _OWORD *v323;
  _OWORD *v324;
  __int128 *v325;
  _OWORD *v326;
  uint64_t v327;
  uint64_t *v328;
  _OWORD *v329;
  unint64_t i;
  int64_t v331;
  unint64_t v332;
  int64_t v333;
  int64_t v334;
  __int128 **v335;
  __int128 *v336;
  __int128 *v337;
  __int128 v338;
  uint64_t v339;
  uint64_t v340;
  unint64_t v341;
  unint64_t v342;
  char v343;
  uint64_t *v344;
  uint64_t v345;
  uint64_t v346;
  id v347;
  uint64_t v348;
  id v349;
  id v350;
  id v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  char v356;
  void *v357;
  char v358;
  Swift::String v359;
  uint64_t v360;
  _QWORD *v361;
  uint64_t v362;
  uint64_t v363;
  char *v364;
  _QWORD *v365;
  char *v366;
  int64_t v367;
  char *v368;
  void *v369;
  int64_t v370;
  int64_t v371;
  _OWORD *v372;
  unint64_t v373;
  int64_t v374;
  uint64_t v375;
  _QWORD *v376;
  uint64_t v377;
  __int128 v378;
  __int128 v379;
  uint64_t v380;
  __int128 *v381;
  _OWORD v382[2];
  __int128 *v383;
  _OWORD v384[2];
  _OWORD v385[2];
  __int128 v386;
  __int128 v387;
  uint64_t v388;
  uint64_t v389;

  v373 = a2;
  v389 = *MEMORY[0x1E0C80C00];
  v369 = (void *)MEMORY[0x186DA82AC]();
  v10 = objc_retainAutorelease(a3);
  v11 = (__int128 *)objc_msgSend(v10, sel_bytes);
  v12 = v10;
  v13 = (uint64_t)objc_msgSend(v12, sel_length);
  if (((unint64_t)objc_msgSend(v12, sel_length) & 0x8000000000000000) != 0)
    goto LABEL_350;
  v14 = objc_msgSend(v12, sel_length);

  if (v13 < 0 || (uint64_t)v14 < v13)
    goto LABEL_351;
  if (v11)
    v5 = (__int128 *)((char *)v11 + v13);
  else
    v5 = 0;
  LODWORD(v374) = a5;
  if ((a4 & 1) != 0)
  {
    if ((v373 & 0x1000000000000000) == 0)
    {
      if ((v373 & 0x2000000000000000) != 0)
        v31 = HIBYTE(v373) & 0xF;
      else
        v31 = a1 & 0xFFFFFFFFFFFFLL;
      goto LABEL_31;
    }
LABEL_357:
    v31 = String.UTF8View._foreignCount()();
LABEL_31:
    v32 = 3 * v31;
    if ((unsigned __int128)(v31 * (__int128)3) >> 64 != (3 * v31) >> 63)
    {
      __break(1u);
      JUMPOUT(0x181D1B0D8);
    }
    if (v32 < -1)
      goto LABEL_364;
    v372 = v11;
    v33 = v32 + 1;
    isStackAllocationSafe = swift_bridgeObjectRetain_n();
    if (v32 >= 1024)
    {
      isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
      if ((isStackAllocationSafe & 1) == 0)
      {
        v68 = (const char *)swift_slowAlloc();
        v69 = (std::error_category *)v373;
        swift_bridgeObjectRetain();
        String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v68, v32 + 1, 1, a1, (unint64_t)v69);
        v71 = v70;
        swift_bridgeObjectRelease();
        if ((v71 & 1) != 0)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
          v89 = objc_allocWithZone((Class)NSError);
          v90 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v91 = objc_msgSend(v89, sel_initWithDomain_code_userInfo_, v90, 514, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v92 = objc_msgSend(v91, sel_domain);
          v93 = static String._unconditionallyBridgeFromObjectiveC(_:)(v92);
          v95 = v94;

          if (v93 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v95 == v96)
          {
            swift_bridgeObjectRelease_n();
          }
          else
          {
            v99 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v99 & 1) == 0)
            {
LABEL_369:
              __break(1u);
              goto LABEL_370;
            }
          }
          swift_willThrow();
        }
        else
        {
          closure #1 in writeToFileAux(path:buffer:options:attributes:reportProgress:)(v68, (char *)a1, v69, 0, 0, (char *)a4, v374 & 1, (uint64_t)v372, (uint64_t)v5, MEMORY[0x1E0DEE9E0]);
        }
        goto LABEL_340;
      }
    }
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v36 = (char *)&v360 - v35;
    v37 = (std::error_category *)v373;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v36, v33, 1, a1, (unint64_t)v37);
    v39 = v38;
    swift_bridgeObjectRelease();
    if ((v39 & 1) == 0)
    {
      v40 = v375;
      closure #1 in writeToFileAux(path:buffer:options:attributes:reportProgress:)(v36, (char *)a1, v37, 0, 0, (char *)a4, v374 & 1, (uint64_t)v372, (uint64_t)v5, MEMORY[0x1E0DEE9E0]);
      if (!v40)
        goto LABEL_342;
      goto LABEL_210;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v49 = objc_allocWithZone((Class)NSError);
    v50 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v51 = objc_msgSend(v49, sel_initWithDomain_code_userInfo_, v50, 514, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v52 = objc_msgSend(v51, sel_domain);
    v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
    v55 = v54;

    if (v53 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v55 == v56)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_60;
    }
    goto LABEL_59;
  }
  if ((v373 & 0x1000000000000000) != 0)
    goto LABEL_355;
  if ((v373 & 0x2000000000000000) != 0)
    v15 = HIBYTE(v373) & 0xF;
  else
    v15 = a1 & 0xFFFFFFFFFFFFLL;
  while (1)
  {
    v16 = 3 * v15;
    if ((unsigned __int128)(v15 * (__int128)3) >> 64 != (3 * v15) >> 63)
    {
      __break(1u);
      goto LABEL_357;
    }
    if (v16 < -1)
      goto LABEL_363;
    v372 = v5;
    v17 = v16 + 1;
    v18 = swift_bridgeObjectRetain_n();
    if (v16 < 1024 || (v18 = swift_stdlib_isStackAllocationSafe(), (v18 & 1) != 0))
    {
      v364 = (char *)&v360;
      MEMORY[0x1E0C80A78](v18);
      v20 = (char *)&v360 - v19;
      v21 = v373;
      swift_bridgeObjectRetain();
      String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v20, v17, 1, a1, v21);
      v23 = v22;
      swift_bridgeObjectRelease();
      if ((v23 & 1) == 0)
      {
        if ((a4 & 2) != 0)
          v24 = 3585;
        else
          v24 = 1537;
        v25 = _NSOpenFileDescriptor_Protected(v20, v24, a4, 438);
        LODWORD(v370) = v25;
        if ((v25 & 0x80000000) == 0)
        {
          if ((v374 & 1) != 0)
          {
            v26 = (void *)objc_opt_self();
            v27 = objc_msgSend(v26, sel_currentProgress);

            v28 = (uint64_t)v372;
            if (v27)
            {
              if (v11)
                v29 = v13;
              else
                v29 = 0;
              v30 = objc_msgSend(v26, sel_progressWithTotalUnitCount_, v29, v360);
            }
            else
            {
              v30 = 0;
            }
          }
          else
          {
            v30 = 0;
            v28 = (uint64_t)v372;
          }
          *(_QWORD *)&v386 = a1;
          *((_QWORD *)&v386 + 1) = v373;
          *(_QWORD *)&v387 = 0;
          BYTE8(v387) = 0;
          v118 = v375;
          v119 = write(buffer:toFileDescriptor:path:parentProgress:)((uint64_t)v11, v28, v370, (uint64_t)&v386, v30);
          v372 = (_OWORD *)v118;
          if (v118)
          {
            a4 = MEMORY[0x186DA4118](v119);
            if (v30 && objc_msgSend(v30, sel_isCancelled))
            {
              unlink(v20);
              static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
              v120 = objc_allocWithZone((Class)NSError);
              v121 = String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              v122 = objc_msgSend(v120, sel_initWithDomain_code_userInfo_, v121, 3072, _NativeDictionary.bridged()());
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              v123 = objc_msgSend(v122, sel_domain);
              v124 = static String._unconditionallyBridgeFromObjectiveC(_:)(v123);
              v126 = v125;

              if (v124 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"))
                && v126 == v127)
              {
                swift_bridgeObjectRelease_n();
                v128 = v372;
LABEL_208:
                swift_willThrow();

                goto LABEL_209;
              }
              v225 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v128 = v372;
              if ((v225 & 1) != 0)
                goto LABEL_208;
LABEL_374:
              __break(1u);
              goto LABEL_375;
            }
            v363 = (uint64_t)v30;
            *(_QWORD *)&v378 = MEMORY[0x1E0DEE9E0];
            v129 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
            v131 = v130;
            v11 = (__int128 *)v373;
            v383 = (__int128 *)a1;
            *(_QWORD *)&v384[0] = v373;
            swift_bridgeObjectRetain();
            AnyHashable.init<A>(_:)();
            specialized Dictionary.subscript.setter((uint64_t)&v386, (uint64_t)v129, v131);
            v132 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
            v13 = v133;
            URL.init(_fileManagerFailableFileURLWithPath:)(a1, (unint64_t)v11, (uint64_t)&v383);
            if (v383)
            {
              v381 = v383;
              v382[0] = v384[0];
              lazy protocol witness table accessor for type URL and conformance URL();
              AnyHashable.init<A>(_:)();
            }
            else
            {
              v386 = 0u;
              v387 = 0u;
              v388 = 0;
            }
            specialized Dictionary.subscript.setter((uint64_t)&v386, (uint64_t)v132, v13);
            v141 = v378;
            v377 = v378;
            swift_bridgeObjectRetain();
            v362 = v141;
            if ((_DWORD)a4 != 102)
            {
              if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) == 0)
              {
                v375 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
                v13 = v142;
                static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
                v143 = (int)POSIXErrorCode.rawValue.getter();
                v144 = objc_allocWithZone((Class)NSError);
                v145 = String._bridgeToObjectiveCImpl()();
                swift_bridgeObjectRelease();
                v146 = objc_msgSend(v144, sel_initWithDomain_code_userInfo_, v145, v143, _NativeDictionary.bridged()());
                swift_unknownObjectRelease();
                swift_unknownObjectRelease();
                v147 = objc_msgSend(v146, sel_domain);
                v148 = static String._unconditionallyBridgeFromObjectiveC(_:)(v147);
                v11 = v149;

                if (v148 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"))
                  && v11 == v150)
                {
                  swift_bridgeObjectRelease_n();
                }
                else
                {
                  v189 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if ((v189 & 1) == 0)
                    goto LABEL_373;
                }
                v383 = (__int128 *)v146;
                lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
                AnyHashable.init<A>(_:)();
                specialized Dictionary.subscript.setter((uint64_t)&v386, v375, v13);
                v141 = v377;
                goto LABEL_165;
              }
              *(_QWORD *)&v386 = 0;
              *((_QWORD *)&v386 + 1) = 0xE000000000000000;
              _StringGuts.grow(_:)(22);
              swift_bridgeObjectRelease();
              *(_QWORD *)&v386 = 0xD000000000000014;
              *((_QWORD *)&v386 + 1) = 0x8000000182306980;
              LODWORD(v383) = a4;
LABEL_383:
              v359._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
              String.append(_:)(v359);
              swift_bridgeObjectRelease();
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
              JUMPOUT(0x181D1B2A0);
            }
LABEL_165:
            CocoaError.Code.init(fileErrno:reading:)(a4, 0);
            v190 = *(_QWORD *)(v141 + 16);
            v361 = v376;
            if (v190)
            {
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
              v191 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
            }
            else
            {
              v191 = (_QWORD *)MEMORY[0x1E0DEE9E0];
            }
            v192 = *(_QWORD *)(v141 + 64);
            v368 = (char *)(v141 + 64);
            v193 = -1;
            v194 = -1 << *(_BYTE *)(v141 + 32);
            v360 = ~v194;
            if (-v194 < 64)
              v193 = ~(-1 << -(char)v194);
            v195 = v193 & v192;
            v367 = (unint64_t)(63 - v194) >> 6;
            a1 = (uint64_t)&v387;
            v196 = (_OWORD *)((char *)v382 + 8);
            v5 = (_OWORD *)((char *)v384 + 8);
            v365 = v191 + 8;
            swift_bridgeObjectRetain();
            v374 = 0;
            v371 = MEMORY[0x1E0DEE9B8] + 8;
            v366 = (char *)v384 + 8;
            if (!v195)
            {
LABEL_174:
              v202 = v374 + 1;
              if (!__OFADD__(v374, 1))
              {
                if (v202 >= v367)
                  goto LABEL_199;
                v203 = *(_QWORD *)&v368[8 * v202];
                v204 = v374 + 1;
                if (!v203)
                {
                  v204 = v374 + 2;
                  if (v374 + 2 >= v367)
                    goto LABEL_199;
                  v203 = *(_QWORD *)&v368[8 * v204];
                  if (!v203)
                  {
                    v204 = v374 + 3;
                    if (v374 + 3 >= v367)
                      goto LABEL_199;
                    v203 = *(_QWORD *)&v368[8 * v204];
                    if (!v203)
                    {
                      v204 = v374 + 4;
                      if (v374 + 4 >= v367)
                        goto LABEL_199;
                      v203 = *(_QWORD *)&v368[8 * v204];
                      if (!v203)
                      {
                        v204 = v374 + 5;
                        if (v374 + 5 >= v367)
                          goto LABEL_199;
                        v203 = *(_QWORD *)&v368[8 * v204];
                        if (!v203)
                        {
                          v204 = v374 + 6;
                          if (v374 + 6 >= v367)
                            goto LABEL_199;
                          v203 = *(_QWORD *)&v368[8 * v204];
                          if (!v203)
                          {
                            v205 = v374 + 7;
                            if (v374 + 7 < v367)
                            {
                              v203 = *(_QWORD *)&v368[8 * v205];
                              if (v203)
                              {
                                v204 = v374 + 7;
                                goto LABEL_193;
                              }
                              while (1)
                              {
                                v204 = v205 + 1;
                                if (__OFADD__(v205, 1))
                                  break;
                                if (v204 >= v367)
                                  goto LABEL_199;
                                v203 = *(_QWORD *)&v368[8 * v204];
                                ++v205;
                                if (v203)
                                  goto LABEL_193;
                              }
LABEL_372:
                              __break(1u);
LABEL_373:
                              __break(1u);
                              goto LABEL_374;
                            }
LABEL_199:
                            outlined consume of Set<A1>.Iterator._Variant<A><A1>();
                            swift_bridgeObjectRelease();
                            static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
                            v215 = objc_allocWithZone((Class)NSError);
                            v216 = String._bridgeToObjectiveCImpl()();
                            swift_bridgeObjectRelease();
                            v217 = objc_msgSend(v215, sel_initWithDomain_code_userInfo_, v216, v361, _NativeDictionary.bridged()(), v360);
                            swift_unknownObjectRelease();
                            swift_unknownObjectRelease();
                            v218 = objc_msgSend(v217, sel_domain);
                            v219 = static String._unconditionallyBridgeFromObjectiveC(_:)(v218);
                            v221 = v220;

                            if (v219 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"))
                              || v221 != v222)
                            {
                              v224 = _stringCompareWithSmolCheck(_:_:expecting:)();
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              v128 = v372;
                              if ((v224 & 1) != 0)
                              {
LABEL_206:
                                swift_willThrow();

LABEL_209:
                                close(v370);
                                goto LABEL_210;
                              }
                              __break(1u);
                            }
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease_n();
                            v128 = v372;
                            goto LABEL_206;
                          }
                        }
                      }
                    }
                  }
                }
LABEL_193:
                v374 = v204;
                v375 = (v203 - 1) & v203;
                v201 = __clz(__rbit64(v203)) + (v204 << 6);
                goto LABEL_194;
              }
              goto LABEL_352;
            }
            while (1)
            {
              while (1)
              {
                v375 = (v195 - 1) & v195;
                v201 = __clz(__rbit64(v195)) | (v374 << 6);
LABEL_194:
                v206 = (__int128 **)(*(_QWORD *)(v141 + 48) + 16 * v201);
                v208 = *v206;
                v207 = v206[1];
                outlined init with copy of AnyHashable(*(_QWORD *)(v141 + 56) + 40 * v201, a1);
                *(_QWORD *)&v386 = v208;
                *((_QWORD *)&v386 + 1) = v207;
                v209 = *(_OWORD *)(a1 + 16);
                v378 = *(_OWORD *)a1;
                v379 = v209;
                v380 = *(_QWORD *)(a1 + 32);
                v381 = v208;
                *(_QWORD *)&v382[0] = v207;
                swift_bridgeObjectRetain();
                swift_dynamicCast();
                v11 = v381;
                v13 = *(_QWORD *)&v382[0];
                outlined init with take of Any(v196, v5);
                outlined init with take of Any(v5, v385);
                outlined init with take of Any(v385, &v383);
                v210 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v11, v13);
                a4 = v210;
                if ((v211 & 1) == 0)
                  break;
                v197 = a1;
                v198 = v196;
                v199 = v141;
                v200 = (__int128 **)(v191[6] + 16 * v210);
                swift_bridgeObjectRelease();
                *v200 = v11;
                v200[1] = (__int128 *)v13;
                v141 = v199;
                v196 = v198;
                a1 = v197;
                v5 = v366;
                v13 = v191[7] + 32 * a4;
                __swift_destroy_boxed_opaque_existential_1(v13);
                outlined init with take of Any(&v383, (_OWORD *)v13);
                v195 = v375;
                if (!v375)
                  goto LABEL_174;
              }
              if (v191[2] >= v191[3])
                break;
              *(_QWORD *)((char *)v365 + ((v210 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v210;
              v212 = (__int128 **)(v191[6] + 16 * v210);
              *v212 = v11;
              v212[1] = (__int128 *)v13;
              outlined init with take of Any(&v383, (_OWORD *)(v191[7] + 32 * v210));
              v213 = v191[2];
              v177 = __OFADD__(v213, 1);
              v214 = v213 + 1;
              if (v177)
                goto LABEL_349;
              v191[2] = v214;
              v195 = v375;
              if (!v375)
                goto LABEL_174;
            }
LABEL_348:
            __break(1u);
LABEL_349:
            __break(1u);
LABEL_350:
            __break(1u);
LABEL_351:
            __break(1u);
LABEL_352:
            __break(1u);
            __break(1u);
            goto LABEL_353;
          }
          v363 = (uint64_t)v30;
          v134 = 1 << *(_BYTE *)(MEMORY[0x1E0DEE9E0] + 32);
          v135 = -1;
          if (v134 < 64)
            v135 = ~(-1 << v134);
          v136 = v135 & *(_QWORD *)(MEMORY[0x1E0DEE9E0] + 64);
          v375 = (unint64_t)(v134 + 63) >> 6;
          if (v136)
          {
            v137 = __clz(__rbit64(v136));
            goto LABEL_105;
          }
          v138 = 1;
          if (v375 > 1)
          {
            v139 = *(_QWORD *)(MEMORY[0x1E0DEE9E0] + 72);
            if (v139)
            {
LABEL_104:
              v137 = __clz(__rbit64(v139)) + (v138 << 6);
LABEL_105:
              __asm { BR              X9 }
            }
            v140 = 2;
            if (v375 > 2)
            {
              v139 = *(_QWORD *)(MEMORY[0x1E0DEE9E0] + 80);
              if (v139)
                goto LABEL_103;
              v140 = 3;
              if (v375 <= 3)
                goto LABEL_110;
              v139 = *(_QWORD *)(MEMORY[0x1E0DEE9E0] + 88);
              if (v139)
              {
LABEL_103:
                v138 = v140;
                goto LABEL_104;
              }
              v140 = 4;
              if (v375 > 4)
              {
                v139 = *(_QWORD *)(MEMORY[0x1E0DEE9E0] + 96);
                if (v139)
                  goto LABEL_103;
                while (1)
                {
                  v138 = v140 + 1;
                  if (__OFADD__(v140, 1))
                    break;
                  if (v138 >= v375)
                    goto LABEL_110;
                  v139 = *(_QWORD *)(MEMORY[0x1E0DEE9E0] + 8 * v138 + 64);
                  ++v140;
                  if (v139)
                    goto LABEL_104;
                }
LABEL_365:
                __break(1u);
                JUMPOUT(0x181D1B0FCLL);
              }
            }
          }
LABEL_110:
          swift_release();

          close(v370);
          goto LABEL_342;
        }
        v74 = MEMORY[0x186DA4118](v25);
        *(_QWORD *)&v378 = MEMORY[0x1E0DEE9E0];
        v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
        v77 = v76;
        v78 = v373;
        v383 = (__int128 *)a1;
        *(_QWORD *)&v384[0] = v373;
        swift_bridgeObjectRetain();
        AnyHashable.init<A>(_:)();
        specialized Dictionary.subscript.setter((uint64_t)&v386, (uint64_t)v75, v77);
        v79 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
        v13 = v80;
        URL.init(_fileManagerFailableFileURLWithPath:)(a1, v78, (uint64_t)&v383);
        if (v383)
        {
          v381 = v383;
          v382[0] = v384[0];
          lazy protocol witness table accessor for type URL and conformance URL();
          AnyHashable.init<A>(_:)();
        }
        else
        {
          v386 = 0u;
          v387 = 0u;
          v388 = 0;
        }
        specialized Dictionary.subscript.setter((uint64_t)&v386, (uint64_t)v79, v13);
        v377 = v378;
        v366 = (char *)swift_bridgeObjectRetain();
        v100 = v366;
        if (v74 != 102)
        {
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
            goto LABEL_380;
          v101 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
          v13 = v102;
          static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
          v103 = (int)POSIXErrorCode.rawValue.getter();
          v104 = objc_allocWithZone((Class)NSError);
          v105 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v106 = objc_msgSend(v104, sel_initWithDomain_code_userInfo_, v105, v103, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v107 = objc_msgSend(v106, sel_domain);
          v108 = static String._unconditionallyBridgeFromObjectiveC(_:)(v107);
          a4 = v109;

          if (v108 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain")) && a4 == v110)
          {
            swift_bridgeObjectRelease_n();
          }
          else
          {
            v151 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v151 & 1) == 0)
              goto LABEL_371;
          }
          v383 = (__int128 *)v106;
          lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
          AnyHashable.init<A>(_:)();
          specialized Dictionary.subscript.setter((uint64_t)&v386, (uint64_t)v101, v13);
          v100 = (char *)v377;
        }
        CocoaError.Code.init(fileErrno:reading:)(v74, 0);
        v152 = *((_QWORD *)v100 + 2);
        v11 = (__int128 *)v100;
        v365 = v376;
        if (v152)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
          v153 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
        }
        else
        {
          v153 = (_QWORD *)MEMORY[0x1E0DEE9E0];
        }
        v154 = *((_QWORD *)v100 + 8);
        v370 = (int64_t)(v100 + 64);
        v155 = -1;
        v156 = -1 << v100[32];
        v363 = ~v156;
        if (-v156 < 64)
          v155 = ~(-1 << -(char)v156);
        v157 = v155 & v154;
        v371 = (unint64_t)(63 - v156) >> 6;
        a1 = (uint64_t)&v387;
        v158 = (_OWORD *)((char *)v382 + 8);
        v5 = (_OWORD *)((char *)v384 + 8);
        v367 = (int64_t)(v153 + 8);
        swift_bridgeObjectRetain();
        v374 = 0;
        v372 = (_OWORD *)(MEMORY[0x1E0DEE9B8] + 8);
        v368 = (char *)v384 + 8;
        if (v157)
        {
          while (1)
          {
            while (1)
            {
              v375 = (v157 - 1) & v157;
              v163 = __clz(__rbit64(v157)) | (v374 << 6);
LABEL_149:
              v168 = (__int128 **)(*((_QWORD *)v11 + 6) + 16 * v163);
              v170 = *v168;
              v169 = v168[1];
              outlined init with copy of AnyHashable(*((_QWORD *)v11 + 7) + 40 * v163, a1);
              *(_QWORD *)&v386 = v170;
              *((_QWORD *)&v386 + 1) = v169;
              v171 = *(_OWORD *)(a1 + 16);
              v378 = *(_OWORD *)a1;
              v379 = v171;
              v380 = *(_QWORD *)(a1 + 32);
              v381 = v170;
              *(_QWORD *)&v382[0] = v169;
              swift_bridgeObjectRetain();
              swift_dynamicCast();
              a4 = (uint64_t)v381;
              v13 = *(_QWORD *)&v382[0];
              outlined init with take of Any(v158, v5);
              outlined init with take of Any(v5, v385);
              outlined init with take of Any(v385, &v383);
              v172 = specialized __RawDictionaryStorage.find<A>(_:)(a4, v13);
              v173 = v172;
              if ((v174 & 1) == 0)
                break;
              v159 = a1;
              v160 = v158;
              v161 = v11;
              v162 = (uint64_t *)(v153[6] + 16 * v172);
              swift_bridgeObjectRelease();
              *v162 = a4;
              v162[1] = v13;
              v11 = v161;
              v158 = v160;
              a1 = v159;
              v5 = v368;
              v13 = v153[7] + 32 * v173;
              __swift_destroy_boxed_opaque_existential_1(v13);
              outlined init with take of Any(&v383, (_OWORD *)v13);
              v157 = v375;
              if (!v375)
                goto LABEL_129;
            }
            if (v153[2] >= v153[3])
              break;
            *(_QWORD *)(v367 + ((v172 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v172;
            v175 = (uint64_t *)(v153[6] + 16 * v172);
            *v175 = a4;
            v175[1] = v13;
            outlined init with take of Any(&v383, (_OWORD *)(v153[7] + 32 * v172));
            v176 = v153[2];
            v177 = __OFADD__(v176, 1);
            v178 = v176 + 1;
            if (v177)
              goto LABEL_346;
            v153[2] = v178;
            v157 = v375;
            if (!v375)
              goto LABEL_129;
          }
          __break(1u);
LABEL_346:
          __break(1u);
        }
        else
        {
LABEL_129:
          v164 = v374 + 1;
          if (!__OFADD__(v374, 1))
          {
            if (v164 < v371)
            {
              v165 = *(_QWORD *)(v370 + 8 * v164);
              v166 = v374 + 1;
              if (v165)
                goto LABEL_148;
              v166 = v374 + 2;
              if (v374 + 2 < v371)
              {
                v165 = *(_QWORD *)(v370 + 8 * v166);
                if (v165)
                  goto LABEL_148;
                v166 = v374 + 3;
                if (v374 + 3 < v371)
                {
                  v165 = *(_QWORD *)(v370 + 8 * v166);
                  if (v165)
                    goto LABEL_148;
                  v166 = v374 + 4;
                  if (v374 + 4 < v371)
                  {
                    v165 = *(_QWORD *)(v370 + 8 * v166);
                    if (v165)
                      goto LABEL_148;
                    v166 = v374 + 5;
                    if (v374 + 5 < v371)
                    {
                      v165 = *(_QWORD *)(v370 + 8 * v166);
                      if (v165)
                        goto LABEL_148;
                      v166 = v374 + 6;
                      if (v374 + 6 < v371)
                      {
                        v165 = *(_QWORD *)(v370 + 8 * v166);
                        if (!v165)
                        {
                          v167 = v374 + 7;
                          if (v374 + 7 < v371)
                          {
                            v165 = *(_QWORD *)(v370 + 8 * v167);
                            if (v165)
                            {
                              v166 = v374 + 7;
                              goto LABEL_148;
                            }
                            while (1)
                            {
                              v166 = v167 + 1;
                              if (__OFADD__(v167, 1))
                                break;
                              if (v166 >= v371)
                                goto LABEL_154;
                              v165 = *(_QWORD *)(v370 + 8 * v166);
                              ++v167;
                              if (v165)
                                goto LABEL_148;
                            }
LABEL_370:
                            __break(1u);
LABEL_371:
                            __break(1u);
                            goto LABEL_372;
                          }
                          goto LABEL_154;
                        }
LABEL_148:
                        v374 = v166;
                        v375 = (v165 - 1) & v165;
                        v163 = __clz(__rbit64(v165)) + (v166 << 6);
                        goto LABEL_149;
                      }
                    }
                  }
                }
              }
            }
LABEL_154:
            outlined consume of Set<A1>.Iterator._Variant<A><A1>();
            swift_bridgeObjectRelease();
            static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
            v179 = objc_allocWithZone((Class)NSError);
            v180 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            v181 = objc_msgSend(v179, sel_initWithDomain_code_userInfo_, v180, v365, _NativeDictionary.bridged()());
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            v182 = objc_msgSend(v181, sel_domain);
            v183 = static String._unconditionallyBridgeFromObjectiveC(_:)(v182);
            v185 = v184;

            if (v183 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"))
              && v185 == v186)
            {
              goto LABEL_160;
            }
            v188 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v188 & 1) == 0)
            {
              __break(1u);
LABEL_160:
              swift_bridgeObjectRelease();
LABEL_161:
              swift_bridgeObjectRelease_n();
            }
LABEL_60:
            swift_willThrow();
LABEL_210:
            swift_willThrow();
            goto LABEL_342;
          }
        }
        __break(1u);
        goto LABEL_348;
      }
      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
      v41 = objc_allocWithZone((Class)NSError);
      v42 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v43 = objc_msgSend(v41, sel_initWithDomain_code_userInfo_, v42, 514, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v44 = objc_msgSend(v43, sel_domain);
      v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
      v47 = v46;

      if (v45 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v47 == v48)
        goto LABEL_161;
      v72 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v72 & 1) != 0)
        goto LABEL_60;
      __break(1u);
LABEL_59:
      v73 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v73 & 1) != 0)
        goto LABEL_60;
      __break(1u);
      goto LABEL_367;
    }
    v57 = (char *)swift_slowAlloc();
    v58 = v373;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v57, v17, 1, a1, v58);
    v60 = v59;
    swift_bridgeObjectRelease();
    if ((v60 & 1) != 0)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
      v81 = objc_allocWithZone((Class)NSError);
      v82 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v83 = objc_msgSend(v81, sel_initWithDomain_code_userInfo_, v82, 514, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v84 = objc_msgSend(v83, sel_domain);
      v85 = static String._unconditionallyBridgeFromObjectiveC(_:)(v84);
      v87 = v86;

      if (v85 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v87 == v88)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v97 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v97 & 1) == 0)
        {
LABEL_368:
          __break(1u);
          goto LABEL_369;
        }
      }
      swift_willThrow();
      v98 = v57;
      goto LABEL_341;
    }
    if ((a4 & 2) != 0)
      v61 = 3585;
    else
      v61 = 1537;
    v364 = v57;
    v62 = _NSOpenFileDescriptor_Protected(v57, v61, a4, 438);
    LODWORD(v370) = v62;
    if ((v62 & 0x80000000) == 0)
    {
      if ((v374 & 1) != 0)
      {
        v63 = (void *)objc_opt_self();
        v64 = objc_msgSend(v63, sel_currentProgress);

        v65 = (uint64_t)v372;
        if (v64)
        {
          if (v11)
            v66 = v13;
          else
            v66 = 0;
          v67 = objc_msgSend(v63, sel_progressWithTotalUnitCount_, v66, v360);
        }
        else
        {
          v67 = 0;
        }
      }
      else
      {
        v67 = 0;
        v65 = (uint64_t)v372;
      }
      *(_QWORD *)&v386 = a1;
      *((_QWORD *)&v386 + 1) = v373;
      *(_QWORD *)&v387 = 0;
      BYTE8(v387) = 0;
      v238 = v375;
      v239 = write(buffer:toFileDescriptor:path:parentProgress:)((uint64_t)v11, v65, v370, (uint64_t)&v386, v67);
      v372 = (_OWORD *)v238;
      if (v238)
      {
        v240 = MEMORY[0x186DA4118](v239);
        if (v67 && objc_msgSend(v67, sel_isCancelled))
        {
          v241 = v364;
          unlink(v364);
          static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
          v242 = objc_allocWithZone((Class)NSError);
          v243 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v244 = objc_msgSend(v242, sel_initWithDomain_code_userInfo_, v243, 3072, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v245 = objc_msgSend(v244, sel_domain);
          v246 = static String._unconditionallyBridgeFromObjectiveC(_:)(v245);
          v248 = v247;

          if (v246 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"))
            && v248 == v249)
          {
            swift_bridgeObjectRelease_n();
            v250 = v372;
          }
          else
          {
            v358 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v250 = v372;
            if ((v358 & 1) == 0)
              goto LABEL_379;
          }
          swift_willThrow();

          close(v370);
          v98 = v241;
          goto LABEL_341;
        }
        v363 = (uint64_t)v67;
        *(_QWORD *)&v378 = MEMORY[0x1E0DEE9E0];
        v251 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
        v253 = v252;
        v254 = v373;
        v383 = (__int128 *)a1;
        *(_QWORD *)&v384[0] = v373;
        swift_bridgeObjectRetain();
        AnyHashable.init<A>(_:)();
        specialized Dictionary.subscript.setter((uint64_t)&v386, (uint64_t)v251, v253);
        v255 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
        v257 = v256;
        URL.init(_fileManagerFailableFileURLWithPath:)(a1, v254, (uint64_t)&v383);
        if (v383)
        {
          v381 = v383;
          v382[0] = v384[0];
          lazy protocol witness table accessor for type URL and conformance URL();
          AnyHashable.init<A>(_:)();
        }
        else
        {
          v386 = 0u;
          v387 = 0u;
          v388 = 0;
        }
        specialized Dictionary.subscript.setter((uint64_t)&v386, (uint64_t)v255, v257);
        v265 = v378;
        v377 = v378;
        swift_bridgeObjectRetain();
        v362 = v265;
        if (v240 != 102)
        {
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
          {
            *(_QWORD *)&v386 = 0;
            *((_QWORD *)&v386 + 1) = 0xE000000000000000;
            _StringGuts.grow(_:)(22);
            swift_bridgeObjectRelease();
            *(_QWORD *)&v386 = 0xD000000000000014;
            *((_QWORD *)&v386 + 1) = 0x8000000182306980;
            LODWORD(v383) = v240;
            goto LABEL_383;
          }
          v375 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
          v267 = v266;
          static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
          v268 = (int)POSIXErrorCode.rawValue.getter();
          v269 = objc_allocWithZone((Class)NSError);
          v270 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v271 = objc_msgSend(v269, sel_initWithDomain_code_userInfo_, v270, v268, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v272 = objc_msgSend(v271, sel_domain);
          v273 = static String._unconditionallyBridgeFromObjectiveC(_:)(v272);
          v275 = v274;

          if (v273 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"))
            && v275 == v276)
          {
            swift_bridgeObjectRelease_n();
          }
          else
          {
            v315 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v315 & 1) == 0)
              goto LABEL_378;
          }
          v383 = (__int128 *)v271;
          lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
          AnyHashable.init<A>(_:)();
          specialized Dictionary.subscript.setter((uint64_t)&v386, v375, v267);
          v265 = v377;
        }
        CocoaError.Code.init(fileErrno:reading:)(v240, 0);
        v316 = *(_QWORD *)(v265 + 16);
        v361 = v376;
        if (v316)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
          v317 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
        }
        else
        {
          v317 = (_QWORD *)MEMORY[0x1E0DEE9E0];
        }
        v318 = *(_QWORD *)(v265 + 64);
        v368 = (char *)(v265 + 64);
        v319 = -1;
        v320 = -1 << *(_BYTE *)(v265 + 32);
        v360 = ~v320;
        if (-v320 < 64)
          v319 = ~(-1 << -(char)v320);
        v321 = v319 & v318;
        v367 = (unint64_t)(63 - v320) >> 6;
        v322 = &v387;
        v323 = (_OWORD *)((char *)v382 + 8);
        v324 = (_OWORD *)((char *)v384 + 8);
        v365 = v317 + 8;
        swift_bridgeObjectRetain();
        v374 = 0;
        v371 = MEMORY[0x1E0DEE9B8] + 8;
        v366 = (char *)v384 + 8;
        if (v321)
          goto LABEL_306;
LABEL_307:
        v331 = v374 + 1;
        if (!__OFADD__(v374, 1))
        {
          if (v331 < v367)
          {
            v332 = *(_QWORD *)&v368[8 * v331];
            v333 = v374 + 1;
            if (v332)
              goto LABEL_326;
            v333 = v374 + 2;
            if (v374 + 2 < v367)
            {
              v332 = *(_QWORD *)&v368[8 * v333];
              if (v332)
                goto LABEL_326;
              v333 = v374 + 3;
              if (v374 + 3 < v367)
              {
                v332 = *(_QWORD *)&v368[8 * v333];
                if (v332)
                  goto LABEL_326;
                v333 = v374 + 4;
                if (v374 + 4 < v367)
                {
                  v332 = *(_QWORD *)&v368[8 * v333];
                  if (v332)
                    goto LABEL_326;
                  v333 = v374 + 5;
                  if (v374 + 5 < v367)
                  {
                    v332 = *(_QWORD *)&v368[8 * v333];
                    if (v332)
                      goto LABEL_326;
                    v333 = v374 + 6;
                    if (v374 + 6 < v367)
                    {
                      v332 = *(_QWORD *)&v368[8 * v333];
                      if (v332)
                        goto LABEL_326;
                      v334 = v374 + 7;
                      if (v374 + 7 < v367)
                      {
                        v332 = *(_QWORD *)&v368[8 * v334];
                        if (!v332)
                        {
                          while (1)
                          {
                            v333 = v334 + 1;
                            if (__OFADD__(v334, 1))
                              goto LABEL_377;
                            if (v333 >= v367)
                              goto LABEL_332;
                            v332 = *(_QWORD *)&v368[8 * v333];
                            ++v334;
                            if (v332)
                              goto LABEL_326;
                          }
                        }
                        v333 = v374 + 7;
LABEL_326:
                        v374 = v333;
                        v375 = (v332 - 1) & v332;
                        for (i = __clz(__rbit64(v332)) + (v333 << 6); ; i = __clz(__rbit64(v321)) | (v374 << 6))
                        {
                          v335 = (__int128 **)(*(_QWORD *)(v265 + 48) + 16 * i);
                          v337 = *v335;
                          v336 = v335[1];
                          outlined init with copy of AnyHashable(*(_QWORD *)(v265 + 56) + 40 * i, (uint64_t)v322);
                          *(_QWORD *)&v386 = v337;
                          *((_QWORD *)&v386 + 1) = v336;
                          v338 = v322[1];
                          v378 = *v322;
                          v379 = v338;
                          v380 = *((_QWORD *)v322 + 4);
                          v381 = v337;
                          *(_QWORD *)&v382[0] = v336;
                          swift_bridgeObjectRetain();
                          swift_dynamicCast();
                          v339 = (uint64_t)v381;
                          v340 = *(_QWORD *)&v382[0];
                          outlined init with take of Any(v323, v324);
                          outlined init with take of Any(v324, v385);
                          outlined init with take of Any(v385, &v383);
                          v341 = specialized __RawDictionaryStorage.find<A>(_:)(v339, v340);
                          v342 = v341;
                          if ((v343 & 1) != 0)
                          {
                            v325 = v322;
                            v326 = v323;
                            v327 = v265;
                            v328 = (uint64_t *)(v317[6] + 16 * v341);
                            swift_bridgeObjectRelease();
                            *v328 = v339;
                            v328[1] = v340;
                            v265 = v327;
                            v323 = v326;
                            v322 = v325;
                            v324 = v366;
                            v329 = (_OWORD *)(v317[7] + 32 * v342);
                            __swift_destroy_boxed_opaque_existential_1((uint64_t)v329);
                            outlined init with take of Any(&v383, v329);
                            v321 = v375;
                            if (!v375)
                              goto LABEL_307;
                          }
                          else
                          {
                            if (v317[2] >= v317[3])
                              goto LABEL_360;
                            *(_QWORD *)((char *)v365 + ((v341 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v341;
                            v344 = (uint64_t *)(v317[6] + 16 * v341);
                            *v344 = v339;
                            v344[1] = v340;
                            outlined init with take of Any(&v383, (_OWORD *)(v317[7] + 32 * v341));
                            v345 = v317[2];
                            v177 = __OFADD__(v345, 1);
                            v346 = v345 + 1;
                            if (v177)
                              goto LABEL_361;
                            v317[2] = v346;
                            v321 = v375;
                            if (!v375)
                              goto LABEL_307;
                          }
LABEL_306:
                          v375 = (v321 - 1) & v321;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_332:
          outlined consume of Set<A1>.Iterator._Variant<A><A1>();
          swift_bridgeObjectRelease();
          static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
          v347 = objc_allocWithZone((Class)NSError);
          v348 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v349 = objc_msgSend(v347, sel_initWithDomain_code_userInfo_, v348, v361, _NativeDictionary.bridged()(), v360);
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v350 = objc_msgSend(v349, sel_domain);
          v351 = static String._unconditionallyBridgeFromObjectiveC(_:)(v350);
          v353 = v352;

          if (v351 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"))
            && v353 == v354)
          {
LABEL_338:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            v357 = v372;
            v68 = v364;
          }
          else
          {
            v356 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v357 = v372;
            v68 = v364;
            if ((v356 & 1) == 0)
            {
              __break(1u);
              goto LABEL_338;
            }
          }
          swift_willThrow();

          close(v370);
LABEL_340:
          v98 = v68;
          goto LABEL_341;
        }
LABEL_362:
        __break(1u);
        __break(1u);
LABEL_363:
        __break(1u);
LABEL_364:
        __break(1u);
        goto LABEL_365;
      }
      v363 = (uint64_t)v67;
      v258 = 1 << *(_BYTE *)(MEMORY[0x1E0DEE9E0] + 32);
      v259 = -1;
      if (v258 < 64)
        v259 = ~(-1 << v258);
      v260 = v259 & *(_QWORD *)(MEMORY[0x1E0DEE9E0] + 64);
      v374 = (unint64_t)(v258 + 63) >> 6;
      if (v260)
      {
        v261 = __clz(__rbit64(v260));
        v375 = (v260 - 1) & v260;
        goto LABEL_240;
      }
      v262 = 1;
      if (v374 <= 1)
        goto LABEL_245;
      v263 = *(_QWORD *)(MEMORY[0x1E0DEE9E0] + 72);
      if (v263)
      {
LABEL_239:
        v375 = (v263 - 1) & v263;
        v261 = __clz(__rbit64(v263)) + (v262 << 6);
LABEL_240:
        __asm { BR              X9 }
      }
      v264 = 2;
      if (v374 <= 2)
        goto LABEL_245;
      v263 = *(_QWORD *)(MEMORY[0x1E0DEE9E0] + 80);
      if (v263)
        goto LABEL_238;
      v264 = 3;
      if (v374 <= 3)
        goto LABEL_245;
      v263 = *(_QWORD *)(MEMORY[0x1E0DEE9E0] + 88);
      if (v263)
        goto LABEL_238;
      v264 = 4;
      if (v374 <= 4)
      {
LABEL_245:
        swift_release();

        close(v370);
        v98 = v364;
        goto LABEL_341;
      }
      v263 = *(_QWORD *)(MEMORY[0x1E0DEE9E0] + 96);
      if (v263)
      {
LABEL_238:
        v262 = v264;
        goto LABEL_239;
      }
      while (1)
      {
        v262 = v264 + 1;
        if (__OFADD__(v264, 1))
          break;
        if (v262 >= v374)
          goto LABEL_245;
        v263 = *(_QWORD *)(MEMORY[0x1E0DEE9E0] + 8 * v262 + 64);
        ++v264;
        if (v263)
          goto LABEL_239;
      }
LABEL_367:
      __break(1u);
      goto LABEL_368;
    }
    v74 = MEMORY[0x186DA4118](v62);
    *(_QWORD *)&v378 = MEMORY[0x1E0DEE9E0];
    v111 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
    v113 = v112;
    v114 = v373;
    v383 = (__int128 *)a1;
    *(_QWORD *)&v384[0] = v373;
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v386, (uint64_t)v111, v113);
    v115 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
    v117 = v116;
    URL.init(_fileManagerFailableFileURLWithPath:)(a1, v114, (uint64_t)&v383);
    if (v383)
    {
      v381 = v383;
      v382[0] = v384[0];
      lazy protocol witness table accessor for type URL and conformance URL();
      AnyHashable.init<A>(_:)();
    }
    else
    {
      v386 = 0u;
      v387 = 0u;
      v388 = 0;
    }
    specialized Dictionary.subscript.setter((uint64_t)&v386, (uint64_t)v115, v117);
    a1 = v378;
    v377 = v378;
    swift_bridgeObjectRetain();
    v366 = (char *)a1;
    if (v74 != 102)
    {
      if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
      {
LABEL_380:
        *(_QWORD *)&v386 = 0;
        *((_QWORD *)&v386 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(22);
        swift_bridgeObjectRelease();
        *(_QWORD *)&v386 = 0xD000000000000014;
        *((_QWORD *)&v386 + 1) = 0x8000000182306980;
        LODWORD(v383) = v74;
        goto LABEL_383;
      }
      v226 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
      v228 = v227;
      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
      v229 = (int)POSIXErrorCode.rawValue.getter();
      v230 = objc_allocWithZone((Class)NSError);
      v231 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v232 = objc_msgSend(v230, sel_initWithDomain_code_userInfo_, v231, v229, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v233 = objc_msgSend(v232, sel_domain);
      v234 = static String._unconditionallyBridgeFromObjectiveC(_:)(v233);
      v236 = v235;

      if (v234 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain")) && v236 == v237)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v277 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v277 & 1) == 0)
          goto LABEL_376;
      }
      v383 = (__int128 *)v232;
      lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
      AnyHashable.init<A>(_:)();
      specialized Dictionary.subscript.setter((uint64_t)&v386, (uint64_t)v226, v228);
      a1 = v377;
    }
    CocoaError.Code.init(fileErrno:reading:)(v74, 0);
    v278 = *(_QWORD *)(a1 + 16);
    v365 = v376;
    if (v278)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v279 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      v279 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    }
    v280 = *(_QWORD *)(a1 + 64);
    v371 = a1 + 64;
    v281 = -1;
    v282 = -1 << *(_BYTE *)(a1 + 32);
    v363 = ~v282;
    if (-v282 < 64)
      v281 = ~(-1 << -(char)v282);
    v283 = v281 & v280;
    v370 = (unint64_t)(63 - v282) >> 6;
    v11 = &v387;
    v284 = (_OWORD *)((char *)v382 + 8);
    v5 = (_OWORD *)((char *)v384 + 8);
    v367 = (int64_t)(v279 + 8);
    swift_bridgeObjectRetain();
    v374 = 0;
    v372 = (_OWORD *)(MEMORY[0x1E0DEE9B8] + 8);
    v368 = (char *)v384 + 8;
    if (!v283)
      break;
    while (1)
    {
      while (1)
      {
        v375 = (v283 - 1) & v283;
        v290 = __clz(__rbit64(v283)) | (v374 << 6);
LABEL_283:
        v295 = (__int128 **)(*(_QWORD *)(a1 + 48) + 16 * v290);
        v297 = *v295;
        v296 = v295[1];
        outlined init with copy of AnyHashable(*(_QWORD *)(a1 + 56) + 40 * v290, (uint64_t)v11);
        *(_QWORD *)&v386 = v297;
        *((_QWORD *)&v386 + 1) = v296;
        v298 = v11[1];
        v378 = *v11;
        v379 = v298;
        v380 = *((_QWORD *)v11 + 4);
        v381 = v297;
        *(_QWORD *)&v382[0] = v296;
        swift_bridgeObjectRetain();
        swift_dynamicCast();
        v299 = (uint64_t)v381;
        a4 = *(_QWORD *)&v382[0];
        outlined init with take of Any(v284, v5);
        outlined init with take of Any(v5, v385);
        outlined init with take of Any(v385, &v383);
        v300 = specialized __RawDictionaryStorage.find<A>(_:)(v299, a4);
        v13 = v300;
        if ((v301 & 1) == 0)
          break;
        v285 = v11;
        v286 = v284;
        v287 = a1;
        v288 = (uint64_t *)(v279[6] + 16 * v300);
        swift_bridgeObjectRelease();
        *v288 = v299;
        v288[1] = a4;
        a1 = v287;
        v284 = v286;
        v11 = v285;
        v5 = v368;
        v289 = (_OWORD *)(v279[7] + 32 * v13);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v289);
        outlined init with take of Any(&v383, v289);
        v283 = v375;
        if (!v375)
          goto LABEL_263;
      }
      if (v279[2] >= v279[3])
        break;
      *(_QWORD *)(v367 + ((v300 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v300;
      v302 = (uint64_t *)(v279[6] + 16 * v300);
      *v302 = v299;
      v302[1] = a4;
      outlined init with take of Any(&v383, (_OWORD *)(v279[7] + 32 * v300));
      v303 = v279[2];
      v177 = __OFADD__(v303, 1);
      v304 = v303 + 1;
      if (v177)
        goto LABEL_354;
      v279[2] = v304;
      v283 = v375;
      if (!v375)
        goto LABEL_263;
    }
LABEL_353:
    __break(1u);
LABEL_354:
    __break(1u);
LABEL_355:
    v15 = String.UTF8View._foreignCount()();
  }
LABEL_263:
  v291 = v374 + 1;
  if (__OFADD__(v374, 1))
  {
    __break(1u);
LABEL_360:
    __break(1u);
LABEL_361:
    __break(1u);
    goto LABEL_362;
  }
  if (v291 >= v370)
    goto LABEL_288;
  v292 = *(_QWORD *)(v371 + 8 * v291);
  v293 = v374 + 1;
  if (v292)
    goto LABEL_282;
  v293 = v374 + 2;
  if (v374 + 2 >= v370)
    goto LABEL_288;
  v292 = *(_QWORD *)(v371 + 8 * v293);
  if (v292)
    goto LABEL_282;
  v293 = v374 + 3;
  if (v374 + 3 >= v370)
    goto LABEL_288;
  v292 = *(_QWORD *)(v371 + 8 * v293);
  if (v292)
    goto LABEL_282;
  v293 = v374 + 4;
  if (v374 + 4 >= v370)
    goto LABEL_288;
  v292 = *(_QWORD *)(v371 + 8 * v293);
  if (v292)
    goto LABEL_282;
  v293 = v374 + 5;
  if (v374 + 5 >= v370)
    goto LABEL_288;
  v292 = *(_QWORD *)(v371 + 8 * v293);
  if (v292)
    goto LABEL_282;
  v293 = v374 + 6;
  if (v374 + 6 >= v370)
    goto LABEL_288;
  v292 = *(_QWORD *)(v371 + 8 * v293);
  if (v292)
  {
LABEL_282:
    v374 = v293;
    v375 = (v292 - 1) & v292;
    v290 = __clz(__rbit64(v292)) + (v293 << 6);
    goto LABEL_283;
  }
  v294 = v374 + 7;
  if (v374 + 7 < v370)
  {
    v292 = *(_QWORD *)(v371 + 8 * v294);
    if (v292)
    {
      v293 = v374 + 7;
      goto LABEL_282;
    }
    while (1)
    {
      v293 = v294 + 1;
      if (__OFADD__(v294, 1))
        break;
      if (v293 >= v370)
        goto LABEL_288;
      v292 = *(_QWORD *)(v371 + 8 * v293);
      ++v294;
      if (v292)
        goto LABEL_282;
    }
LABEL_375:
    __break(1u);
LABEL_376:
    __break(1u);
LABEL_377:
    __break(1u);
LABEL_378:
    __break(1u);
LABEL_379:
    __break(1u);
  }
LABEL_288:
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v305 = objc_allocWithZone((Class)NSError);
  v306 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v307 = objc_msgSend(v305, sel_initWithDomain_code_userInfo_, v306, v365, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v308 = objc_msgSend(v307, sel_domain);
  v309 = static String._unconditionallyBridgeFromObjectiveC(_:)(v308);
  v311 = v310;

  if (v309 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v311 == v312)
  {
LABEL_294:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v314 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v314 & 1) == 0)
    {
      __break(1u);
      goto LABEL_294;
    }
  }
  swift_willThrow();
  v98 = v364;
LABEL_341:
  MEMORY[0x186DA9E78](v98, -1, -1);
LABEL_342:
  swift_bridgeObjectRelease_n();
  objc_autoreleasePoolPop(v369);
}

void specialized static NSData._writeData(toPath:data:options:stringEncodingAttributeData:reportProgress:)(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, unint64_t a6, int a7)
{
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  int64_t v16;
  id v17;
  int64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  char v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  _QWORD v32[5];
  char v33;
  uint64_t v34;
  char v35;
  id v36;
  int64_t v37;
  _QWORD *v38;
  void *v39;
  int v40;
  void *v41;
  void *v42[3];
  char v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;

  v40 = a7;
  v41 = a1;
  v12 = MEMORY[0x186DA82AC]();
  v13 = objc_retainAutorelease(a3);
  v14 = objc_msgSend(v13, sel_bytes);
  v15 = v13;
  v16 = (int64_t)objc_msgSend(v15, sel_length);
  if (((unint64_t)objc_msgSend(v15, sel_length) & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v17 = objc_msgSend(v15, sel_length);

  if (v16 < 0 || (uint64_t)v17 < v16)
    goto LABEL_14;
  v39 = (void *)v12;
  if (v14)
    v18 = (int64_t)v14 + v16;
  else
    v18 = 0;
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("com.apple.TextEncoding"));
  v21 = v20;
  v44 = v19;
  v45 = v20;
  v46 = a5;
  v47 = a6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
  v22 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(a5, a6);
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(a5, a6);
  v23 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v19, v21);
  if ((v24 & 1) != 0)
    goto LABEL_15;
  v22[(v23 >> 6) + 8] |= 1 << v23;
  v25 = (_QWORD *)(v22[6] + 16 * v23);
  *v25 = v19;
  v25[1] = v21;
  v26 = (uint64_t *)(v22[7] + 16 * v23);
  *v26 = a5;
  v26[1] = a6;
  v27 = v22[2];
  v28 = __OFADD__(v27, 1);
  v29 = v27 + 1;
  if (v28)
  {
LABEL_16:
    __break(1u);
    return;
  }
  v22[2] = v29;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Data));
  v30 = swift_arrayDestroy();
  if ((a4 & 1) != 0)
  {
    MEMORY[0x1E0C80A78](v30);
    v32[2] = v41;
    v32[3] = a2;
    v32[4] = 0;
    v33 = 0;
    v34 = a4;
    v35 = v40 & 1;
    v36 = v14;
    v37 = v18;
    v38 = v22;
    swift_bridgeObjectRetain();
    specialized String.withFileSystemRepresentation<A>(_:)((uint64_t (*)(char *))partial apply for closure #1 in writeToFileAux(path:buffer:options:attributes:reportProgress:), (uint64_t)v32, (uint64_t)v41, (unint64_t)a2);
    v31 = v39;
    swift_release();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v42[0] = v41;
    v42[1] = a2;
    v42[2] = 0;
    v43 = 0;
    writeToFileNoAux(path:buffer:options:attributes:reportProgress:)(v42, (uint64_t)v14, v18, a4, (uint64_t)v22, v40 & 1);
    v31 = v39;
    swift_release();
    swift_bridgeObjectRelease();
  }
  objc_autoreleasePoolPop(v31);
}

uint64_t partial apply for closure #1 in writeToFileAux(path:buffer:options:attributes:reportProgress:)(const char *a1)
{
  uint64_t v1;

  return closure #1 in writeToFileAux(path:buffer:options:attributes:reportProgress:)(a1, *(char **)(v1 + 16), *(std::error_category **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_BYTE *)(v1 + 40), *(char **)(v1 + 48), *(unsigned __int8 *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80));
}

uint64_t _foundation_sandbox_check()
{
  return sandbox_check();
}

void static URLError.Code.unknown.getter(_QWORD *a1@<X8>)
{
  *a1 = -1;
}

id URLError._nsError.getter()
{
  id *v0;

  return *v0;
}

void __swiftcall URLError.init(_nsError:)(Foundation::URLError *__return_ptr retstr, NSError *_nsError)
{
  NSString *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;

  v4 = -[NSError domain](_nsError, sel_domain);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  if (v5 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURLErrorDomain")) && v7 == v8)
    goto LABEL_7;
  v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_7:
    swift_bridgeObjectRelease_n();
  }
  retstr->_nsError.super.isa = (Class)_nsError;
}

id static URLError.errorDomain.getter()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURLErrorDomain"));
}

uint64_t URLError.hashValue.getter()
{
  return NSObject.hashValue.getter();
}

uint64_t URLError.Code.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

Foundation::URLError::Code __swiftcall URLError.Code.init(rawValue:)(Foundation::URLError::Code rawValue)
{
  Foundation::URLError::Code *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

id protocol witness for static CustomNSError.errorDomain.getter in conformance URLError()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURLErrorDomain"));
}

void static URLError.Code.cancelled.getter(_QWORD *a1@<X8>)
{
  *a1 = -999;
}

void static URLError.Code.badURL.getter(_QWORD *a1@<X8>)
{
  *a1 = -1000;
}

void static URLError.Code.timedOut.getter(_QWORD *a1@<X8>)
{
  *a1 = -1001;
}

Foundation::URLError::NetworkUnavailableReason_optional __swiftcall URLError.NetworkUnavailableReason.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 3;
  if ((unint64_t)rawValue < 3)
    v2 = rawValue;
  *v1 = v2;
  return (Foundation::URLError::NetworkUnavailableReason_optional)rawValue;
}

uint64_t URLError.NetworkUnavailableReason.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

Foundation::URLError::NetworkUnavailableReason_optional protocol witness for RawRepresentable.init(rawValue:) in conformance URLError.NetworkUnavailableReason(Swift::Int *a1)
{
  return URLError.NetworkUnavailableReason.init(rawValue:)(*a1);
}

uint64_t URLError.failingURL.getter@<X0>(_QWORD *a1@<X8>)
{
  id *v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  _OWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int64_t v45;
  unint64_t v46;
  int64_t v47;
  int64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char v55;
  unint64_t v56;
  BOOL v57;
  uint64_t v58;
  __CFString *v59;
  unint64_t v60;
  char v61;
  _QWORD *v62;
  id v64;
  uint64_t v65;
  int64_t v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  _OWORD v70[2];
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  _OWORD v74[2];
  _OWORD v75[3];
  _OWORD v76[2];
  __int128 v77;
  _OWORD v78[2];
  __int128 v79;
  __int128 v80;

  v2 = *v1;
  v3 = *v1;
  v64 = v2;
  v4 = objc_msgSend((id)_swift_stdlib_bridgeErrorToNSError(), sel_userInfo);
  swift_unknownObjectRelease();
  if (v4)
  {
    swift_unknownObjectRetain();
    v5 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (v5)
    {
      v6 = v5;
      goto LABEL_23;
    }
    v8 = objc_msgSend(v4, sel_count);
    if (v8)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v6 = static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      v6 = MEMORY[0x1E0DEE9E0];
    }
    v9 = *(_QWORD **)(v6 + 48);
    v10 = *(_QWORD *)(v6 + 56);
    swift_retain();
    result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v9, v10, v4, (uint64_t)v8);
    if (result < 0 || (uint64_t)v8 < result)
      goto LABEL_72;
    *(_QWORD *)(v6 + 16) = result;
    if (!result)
    {
LABEL_22:
      swift_release();
LABEL_23:

      if (*(_QWORD *)(v6 + 16))
        goto LABEL_24;
      goto LABEL_5;
    }
    v12 = result - 1;
    v13 = v6 + 64;
    while (1)
    {
      while (1)
      {
        if (((*(_QWORD *)(v13 + (((unint64_t)v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
          goto LABEL_14;
        v18 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v12);
        v19 = *v18;
        v20 = v18[1];
        swift_bridgeObjectRetain();
        v21 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v20);
        v23 = v22;
        swift_bridgeObjectRelease();
        if ((v23 & 1) == 0)
          break;
        swift_arrayDestroy();
        result = swift_arrayDestroy();
        v24 = *(_QWORD *)(v6 + 16);
        v25 = __OFSUB__(v24, 1);
        v26 = v24 - 1;
        if (v25)
        {
LABEL_71:
          __break(1u);
LABEL_72:
          __break(1u);
          return result;
        }
        *(_QWORD *)(v6 + 16) = v26;
LABEL_14:
        if (--v12 < 0)
          goto LABEL_22;
      }
      *(_QWORD *)(v13 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
      if (v12 < (uint64_t)v21)
      {
        *(_OWORD *)(*(_QWORD *)(v6 + 48) + 16 * v21) = *(_OWORD *)(*(_QWORD *)(v6 + 48) + 16 * v12);
        v14 = *(_QWORD *)(v6 + 56);
        v15 = (_OWORD *)(v14 + 32 * v12);
        v16 = v15[1];
        v17 = (_OWORD *)(v14 + 32 * v21);
        *v17 = *v15;
        v17[1] = v16;
        goto LABEL_14;
      }
      if (v21 == v12)
        goto LABEL_14;
      v27 = *(_QWORD *)(v6 + 48);
      v28 = (uint64_t *)(v27 + 16 * v21);
      v29 = (uint64_t *)(v27 + 16 * v12);
      v30 = *v28;
      v31 = v28[1];
      v32 = v29[1];
      *v28 = *v29;
      v28[1] = v32;
      *v29 = v30;
      v29[1] = v31;
      v33 = *(_QWORD *)(v6 + 56);
      v34 = (_OWORD *)(v33 + 32 * v21);
      v35 = (_OWORD *)(v33 + 32 * v12);
      outlined init with take of Any(v34, &v71);
      outlined init with take of Any(v35, v34);
      outlined init with take of Any(&v71, v35);
      if (v12 < 0)
        goto LABEL_22;
    }
  }
  v6 = MEMORY[0x1E0DEE9E0];
  if (*(_QWORD *)(MEMORY[0x1E0DEE9E0] + 16))
  {
LABEL_24:
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    v7 = static _DictionaryStorage.allocate(capacity:)();
    goto LABEL_25;
  }
LABEL_5:
  v7 = MEMORY[0x1E0DEE9E0];
LABEL_25:
  v65 = v6 + 64;
  v36 = -1 << *(_BYTE *)(v6 + 32);
  if (-v36 < 64)
    v37 = ~(-1 << -(char)v36);
  else
    v37 = -1;
  v38 = v37 & *(_QWORD *)(v6 + 64);
  v66 = (unint64_t)(63 - v36) >> 6;
  v39 = v7 + 64;
  swift_bridgeObjectRetain();
  result = swift_retain();
  v40 = 0;
  while (1)
  {
    if (v38)
    {
      v43 = __clz(__rbit64(v38));
      v38 &= v38 - 1;
      v44 = v43 | (v40 << 6);
      goto LABEL_49;
    }
    v45 = v40 + 1;
    if (__OFADD__(v40, 1))
    {
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
      goto LABEL_71;
    }
    if (v45 >= v66)
      goto LABEL_58;
    v46 = *(_QWORD *)(v65 + 8 * v45);
    v47 = v40 + 1;
    if (!v46)
    {
      v47 = v40 + 2;
      if (v40 + 2 >= v66)
        goto LABEL_58;
      v46 = *(_QWORD *)(v65 + 8 * v47);
      if (!v46)
      {
        v47 = v40 + 3;
        if (v40 + 3 >= v66)
          goto LABEL_58;
        v46 = *(_QWORD *)(v65 + 8 * v47);
        if (!v46)
        {
          v47 = v40 + 4;
          if (v40 + 4 >= v66)
            goto LABEL_58;
          v46 = *(_QWORD *)(v65 + 8 * v47);
          if (!v46)
            break;
        }
      }
    }
LABEL_48:
    v38 = (v46 - 1) & v46;
    v44 = __clz(__rbit64(v46)) + (v47 << 6);
    v40 = v47;
LABEL_49:
    v49 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v44);
    v51 = *v49;
    v50 = v49[1];
    outlined init with copy of Any(*(_QWORD *)(v6 + 56) + 32 * v44, (uint64_t)v78);
    *(_QWORD *)&v77 = v51;
    *((_QWORD *)&v77 + 1) = v50;
    v75[2] = v77;
    v76[0] = v78[0];
    v76[1] = v78[1];
    *(_QWORD *)&v75[0] = v51;
    *((_QWORD *)&v75[0] + 1) = v50;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    outlined init with take of Any(v76, v70);
    v71 = v67;
    v72 = v68;
    v73 = v69;
    outlined init with take of Any(v70, v74);
    v67 = v71;
    v68 = v72;
    v69 = v73;
    outlined init with take of Any(v74, v75);
    outlined init with take of Any(v75, &v71);
    result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v7 + 40));
    v52 = -1 << *(_BYTE *)(v7 + 32);
    v53 = result & ~v52;
    v54 = v53 >> 6;
    if (((-1 << v53) & ~*(_QWORD *)(v39 + 8 * (v53 >> 6))) != 0)
    {
      v41 = __clz(__rbit64((-1 << v53) & ~*(_QWORD *)(v39 + 8 * (v53 >> 6)))) | v53 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v55 = 0;
      v56 = (unint64_t)(63 - v52) >> 6;
      do
      {
        if (++v54 == v56 && (v55 & 1) != 0)
        {
          __break(1u);
          goto LABEL_69;
        }
        v57 = v54 == v56;
        if (v54 == v56)
          v54 = 0;
        v55 |= v57;
        v58 = *(_QWORD *)(v39 + 8 * v54);
      }
      while (v58 == -1);
      v41 = __clz(__rbit64(~v58)) + (v54 << 6);
    }
    *(_QWORD *)(v39 + ((v41 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v41;
    v42 = *(_QWORD *)(v7 + 48) + 40 * v41;
    *(_OWORD *)v42 = v67;
    *(_OWORD *)(v42 + 16) = v68;
    *(_QWORD *)(v42 + 32) = v69;
    result = (uint64_t)outlined init with take of Any(&v71, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v41));
    ++*(_QWORD *)(v7 + 16);
  }
  v48 = v40 + 5;
  if (v40 + 5 < v66)
  {
    v46 = *(_QWORD *)(v65 + 8 * v48);
    if (!v46)
    {
      while (1)
      {
        v47 = v48 + 1;
        if (__OFADD__(v48, 1))
          goto LABEL_70;
        if (v47 >= v66)
          goto LABEL_58;
        v46 = *(_QWORD *)(v65 + 8 * v47);
        ++v48;
        if (v46)
          goto LABEL_48;
      }
    }
    v47 = v40 + 5;
    goto LABEL_48;
  }
LABEL_58:
  swift_release();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();

  swift_bridgeObjectRelease();
  type metadata accessor for NSString();
  lazy protocol witness table accessor for type NSString and conformance NSObject();
  v59 = CFSTR("NSErrorFailingURLKey");
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(v7 + 16))
  {
    v60 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v71);
    if ((v61 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v7 + 56) + 32 * v60, (uint64_t)&v79);
    }
    else
    {
      v79 = 0u;
      v80 = 0u;
    }
    v62 = a1;
  }
  else
  {
    v79 = 0u;
    v80 = 0u;
    v62 = a1;
  }
  swift_release();
  outlined destroy of AnyHashable((uint64_t)&v71);
  if (*((_QWORD *)&v80 + 1))
  {
    result = swift_dynamicCast();
    if ((result & 1) != 0)
      return result;
  }
  else
  {
    result = outlined destroy of Any?((uint64_t)&v79);
  }
  *v62 = 0;
  v62[1] = 0;
  v62[2] = 0;
  return result;
}

uint64_t URLError.failureURLString.getter()
{
  id *v0;
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  __int128 v15;
  _OWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  _OWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int64_t v44;
  unint64_t v45;
  int64_t v46;
  int64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char v54;
  unint64_t v55;
  BOOL v56;
  uint64_t v57;
  __CFString *v58;
  unint64_t v59;
  char v60;
  id v61;
  uint64_t v62;
  int64_t v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  _OWORD v67[2];
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  _OWORD v71[2];
  _OWORD v72[3];
  _OWORD v73[2];
  __int128 v74;
  _OWORD v75[2];

  v1 = *v0;
  v2 = *v0;
  v61 = v1;
  v3 = objc_msgSend((id)_swift_stdlib_bridgeErrorToNSError(), sel_userInfo);
  swift_unknownObjectRelease();
  if (v3)
  {
    swift_unknownObjectRetain();
    v4 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (v4)
    {
      v5 = v4;
      goto LABEL_23;
    }
    v7 = objc_msgSend(v3, sel_count);
    if (v7)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v5 = static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      v5 = MEMORY[0x1E0DEE9E0];
    }
    v8 = *(_QWORD **)(v5 + 48);
    v9 = *(_QWORD *)(v5 + 56);
    swift_retain();
    result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v8, v9, v3, (uint64_t)v7);
    if (result < 0 || (uint64_t)v7 < result)
      goto LABEL_71;
    *(_QWORD *)(v5 + 16) = result;
    if (!result)
    {
LABEL_22:
      swift_release();
LABEL_23:

      if (*(_QWORD *)(v5 + 16))
        goto LABEL_24;
      goto LABEL_5;
    }
    v11 = result - 1;
    v12 = v5 + 64;
    while (1)
    {
      while (1)
      {
        if (((*(_QWORD *)(v12 + (((unint64_t)v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
          goto LABEL_14;
        v17 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v11);
        v18 = *v17;
        v19 = v17[1];
        swift_bridgeObjectRetain();
        v20 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19);
        v22 = v21;
        swift_bridgeObjectRelease();
        if ((v22 & 1) == 0)
          break;
        swift_arrayDestroy();
        result = swift_arrayDestroy();
        v23 = *(_QWORD *)(v5 + 16);
        v24 = __OFSUB__(v23, 1);
        v25 = v23 - 1;
        if (v24)
        {
LABEL_70:
          __break(1u);
LABEL_71:
          __break(1u);
          return result;
        }
        *(_QWORD *)(v5 + 16) = v25;
LABEL_14:
        if (--v11 < 0)
          goto LABEL_22;
      }
      *(_QWORD *)(v12 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      if (v11 < (uint64_t)v20)
      {
        *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v20) = *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v11);
        v13 = *(_QWORD *)(v5 + 56);
        v14 = (_OWORD *)(v13 + 32 * v11);
        v15 = v14[1];
        v16 = (_OWORD *)(v13 + 32 * v20);
        *v16 = *v14;
        v16[1] = v15;
        goto LABEL_14;
      }
      if (v20 == v11)
        goto LABEL_14;
      v26 = *(_QWORD *)(v5 + 48);
      v27 = (uint64_t *)(v26 + 16 * v20);
      v28 = (uint64_t *)(v26 + 16 * v11);
      v29 = *v27;
      v30 = v27[1];
      v31 = v28[1];
      *v27 = *v28;
      v27[1] = v31;
      *v28 = v29;
      v28[1] = v30;
      v32 = *(_QWORD *)(v5 + 56);
      v33 = (_OWORD *)(v32 + 32 * v20);
      v34 = (_OWORD *)(v32 + 32 * v11);
      outlined init with take of Any(v33, &v68);
      outlined init with take of Any(v34, v33);
      outlined init with take of Any(&v68, v34);
      if (v11 < 0)
        goto LABEL_22;
    }
  }
  v5 = MEMORY[0x1E0DEE9E0];
  if (*(_QWORD *)(MEMORY[0x1E0DEE9E0] + 16))
  {
LABEL_24:
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    v6 = static _DictionaryStorage.allocate(capacity:)();
    goto LABEL_25;
  }
LABEL_5:
  v6 = MEMORY[0x1E0DEE9E0];
LABEL_25:
  v62 = v5 + 64;
  v35 = -1 << *(_BYTE *)(v5 + 32);
  if (-v35 < 64)
    v36 = ~(-1 << -(char)v35);
  else
    v36 = -1;
  v37 = v36 & *(_QWORD *)(v5 + 64);
  v63 = (unint64_t)(63 - v35) >> 6;
  v38 = v6 + 64;
  swift_bridgeObjectRetain();
  result = swift_retain();
  v39 = 0;
  while (1)
  {
    if (v37)
    {
      v42 = __clz(__rbit64(v37));
      v37 &= v37 - 1;
      v43 = v42 | (v39 << 6);
      goto LABEL_49;
    }
    v44 = v39 + 1;
    if (__OFADD__(v39, 1))
    {
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
      goto LABEL_70;
    }
    if (v44 >= v63)
      goto LABEL_58;
    v45 = *(_QWORD *)(v62 + 8 * v44);
    v46 = v39 + 1;
    if (!v45)
    {
      v46 = v39 + 2;
      if (v39 + 2 >= v63)
        goto LABEL_58;
      v45 = *(_QWORD *)(v62 + 8 * v46);
      if (!v45)
      {
        v46 = v39 + 3;
        if (v39 + 3 >= v63)
          goto LABEL_58;
        v45 = *(_QWORD *)(v62 + 8 * v46);
        if (!v45)
        {
          v46 = v39 + 4;
          if (v39 + 4 >= v63)
            goto LABEL_58;
          v45 = *(_QWORD *)(v62 + 8 * v46);
          if (!v45)
            break;
        }
      }
    }
LABEL_48:
    v37 = (v45 - 1) & v45;
    v43 = __clz(__rbit64(v45)) + (v46 << 6);
    v39 = v46;
LABEL_49:
    v48 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v43);
    v50 = *v48;
    v49 = v48[1];
    outlined init with copy of Any(*(_QWORD *)(v5 + 56) + 32 * v43, (uint64_t)v75);
    *(_QWORD *)&v74 = v50;
    *((_QWORD *)&v74 + 1) = v49;
    v72[2] = v74;
    v73[0] = v75[0];
    v73[1] = v75[1];
    *(_QWORD *)&v72[0] = v50;
    *((_QWORD *)&v72[0] + 1) = v49;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    outlined init with take of Any(v73, v67);
    v68 = v64;
    v69 = v65;
    v70 = v66;
    outlined init with take of Any(v67, v71);
    v64 = v68;
    v65 = v69;
    v66 = v70;
    outlined init with take of Any(v71, v72);
    outlined init with take of Any(v72, &v68);
    result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v6 + 40));
    v51 = -1 << *(_BYTE *)(v6 + 32);
    v52 = result & ~v51;
    v53 = v52 >> 6;
    if (((-1 << v52) & ~*(_QWORD *)(v38 + 8 * (v52 >> 6))) != 0)
    {
      v40 = __clz(__rbit64((-1 << v52) & ~*(_QWORD *)(v38 + 8 * (v52 >> 6)))) | v52 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v54 = 0;
      v55 = (unint64_t)(63 - v51) >> 6;
      do
      {
        if (++v53 == v55 && (v54 & 1) != 0)
        {
          __break(1u);
          goto LABEL_68;
        }
        v56 = v53 == v55;
        if (v53 == v55)
          v53 = 0;
        v54 |= v56;
        v57 = *(_QWORD *)(v38 + 8 * v53);
      }
      while (v57 == -1);
      v40 = __clz(__rbit64(~v57)) + (v53 << 6);
    }
    *(_QWORD *)(v38 + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v40;
    v41 = *(_QWORD *)(v6 + 48) + 40 * v40;
    *(_OWORD *)v41 = v64;
    *(_OWORD *)(v41 + 16) = v65;
    *(_QWORD *)(v41 + 32) = v66;
    result = (uint64_t)outlined init with take of Any(&v68, (_OWORD *)(*(_QWORD *)(v6 + 56) + 32 * v40));
    ++*(_QWORD *)(v6 + 16);
  }
  v47 = v39 + 5;
  if (v39 + 5 < v63)
  {
    v45 = *(_QWORD *)(v62 + 8 * v47);
    if (!v45)
    {
      while (1)
      {
        v46 = v47 + 1;
        if (__OFADD__(v47, 1))
          goto LABEL_69;
        if (v46 >= v63)
          goto LABEL_58;
        v45 = *(_QWORD *)(v62 + 8 * v46);
        ++v47;
        if (v45)
          goto LABEL_48;
      }
    }
    v46 = v39 + 5;
    goto LABEL_48;
  }
LABEL_58:
  swift_release();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();

  swift_bridgeObjectRelease();
  *(_QWORD *)&v64 = CFSTR("NSErrorFailingURLStringKey");
  type metadata accessor for NSString();
  lazy protocol witness table accessor for type NSString and conformance NSObject();
  v58 = CFSTR("NSErrorFailingURLStringKey");
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(v6 + 16))
  {
    v59 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v68);
    if ((v60 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v6 + 56) + 32 * v59, (uint64_t)&v64);
    }
    else
    {
      v64 = 0u;
      v65 = 0u;
    }
  }
  else
  {
    v64 = 0u;
    v65 = 0u;
  }
  swift_release();
  outlined destroy of AnyHashable((uint64_t)&v68);
  if (*((_QWORD *)&v65 + 1))
  {
    if (swift_dynamicCast())
      return v74;
    else
      return 0;
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v64);
    return 0;
  }
}

uint64_t URLError.failureURLPeerTrust.getter()
{
  id *v0;
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  __int128 v15;
  _OWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  _OWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int64_t v44;
  unint64_t v45;
  int64_t v46;
  int64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char v54;
  unint64_t v55;
  BOOL v56;
  uint64_t v57;
  __CFString *v58;
  unint64_t v59;
  char v60;
  id v61;
  uint64_t v62;
  int64_t v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  _OWORD v67[2];
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  _OWORD v71[2];
  _OWORD v72[3];
  _OWORD v73[2];
  __int128 v74;
  _OWORD v75[3];

  v1 = *v0;
  v2 = *v0;
  v61 = v1;
  v3 = objc_msgSend((id)_swift_stdlib_bridgeErrorToNSError(), sel_userInfo);
  swift_unknownObjectRelease();
  if (v3)
  {
    swift_unknownObjectRetain();
    v4 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (v4)
    {
      v5 = v4;
      goto LABEL_23;
    }
    v7 = objc_msgSend(v3, sel_count);
    if (v7)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v5 = static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      v5 = MEMORY[0x1E0DEE9E0];
    }
    v8 = *(_QWORD **)(v5 + 48);
    v9 = *(_QWORD *)(v5 + 56);
    swift_retain();
    result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v8, v9, v3, (uint64_t)v7);
    if (result < 0 || (uint64_t)v7 < result)
      goto LABEL_69;
    *(_QWORD *)(v5 + 16) = result;
    if (!result)
    {
LABEL_22:
      swift_release();
LABEL_23:

      if (*(_QWORD *)(v5 + 16))
        goto LABEL_24;
      goto LABEL_5;
    }
    v11 = result - 1;
    v12 = v5 + 64;
    while (1)
    {
      while (1)
      {
        if (((*(_QWORD *)(v12 + (((unint64_t)v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
          goto LABEL_14;
        v17 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v11);
        v18 = *v17;
        v19 = v17[1];
        swift_bridgeObjectRetain();
        v20 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19);
        v22 = v21;
        swift_bridgeObjectRelease();
        if ((v22 & 1) == 0)
          break;
        swift_arrayDestroy();
        result = swift_arrayDestroy();
        v23 = *(_QWORD *)(v5 + 16);
        v24 = __OFSUB__(v23, 1);
        v25 = v23 - 1;
        if (v24)
        {
LABEL_68:
          __break(1u);
LABEL_69:
          __break(1u);
          return result;
        }
        *(_QWORD *)(v5 + 16) = v25;
LABEL_14:
        if (--v11 < 0)
          goto LABEL_22;
      }
      *(_QWORD *)(v12 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      if (v11 < (uint64_t)v20)
      {
        *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v20) = *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v11);
        v13 = *(_QWORD *)(v5 + 56);
        v14 = (_OWORD *)(v13 + 32 * v11);
        v15 = v14[1];
        v16 = (_OWORD *)(v13 + 32 * v20);
        *v16 = *v14;
        v16[1] = v15;
        goto LABEL_14;
      }
      if (v20 == v11)
        goto LABEL_14;
      v26 = *(_QWORD *)(v5 + 48);
      v27 = (uint64_t *)(v26 + 16 * v20);
      v28 = (uint64_t *)(v26 + 16 * v11);
      v29 = *v27;
      v30 = v27[1];
      v31 = v28[1];
      *v27 = *v28;
      v27[1] = v31;
      *v28 = v29;
      v28[1] = v30;
      v32 = *(_QWORD *)(v5 + 56);
      v33 = (_OWORD *)(v32 + 32 * v20);
      v34 = (_OWORD *)(v32 + 32 * v11);
      outlined init with take of Any(v33, &v68);
      outlined init with take of Any(v34, v33);
      outlined init with take of Any(&v68, v34);
      if (v11 < 0)
        goto LABEL_22;
    }
  }
  v5 = MEMORY[0x1E0DEE9E0];
  if (*(_QWORD *)(MEMORY[0x1E0DEE9E0] + 16))
  {
LABEL_24:
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    v6 = static _DictionaryStorage.allocate(capacity:)();
    goto LABEL_25;
  }
LABEL_5:
  v6 = MEMORY[0x1E0DEE9E0];
LABEL_25:
  v62 = v5 + 64;
  v35 = -1 << *(_BYTE *)(v5 + 32);
  if (-v35 < 64)
    v36 = ~(-1 << -(char)v35);
  else
    v36 = -1;
  v37 = v36 & *(_QWORD *)(v5 + 64);
  v63 = (unint64_t)(63 - v35) >> 6;
  v38 = v6 + 64;
  swift_bridgeObjectRetain();
  result = swift_retain();
  v39 = 0;
  while (1)
  {
    if (v37)
    {
      v42 = __clz(__rbit64(v37));
      v37 &= v37 - 1;
      v43 = v42 | (v39 << 6);
      goto LABEL_49;
    }
    v44 = v39 + 1;
    if (__OFADD__(v39, 1))
    {
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
      goto LABEL_68;
    }
    if (v44 >= v63)
      goto LABEL_58;
    v45 = *(_QWORD *)(v62 + 8 * v44);
    v46 = v39 + 1;
    if (!v45)
    {
      v46 = v39 + 2;
      if (v39 + 2 >= v63)
        goto LABEL_58;
      v45 = *(_QWORD *)(v62 + 8 * v46);
      if (!v45)
      {
        v46 = v39 + 3;
        if (v39 + 3 >= v63)
          goto LABEL_58;
        v45 = *(_QWORD *)(v62 + 8 * v46);
        if (!v45)
        {
          v46 = v39 + 4;
          if (v39 + 4 >= v63)
            goto LABEL_58;
          v45 = *(_QWORD *)(v62 + 8 * v46);
          if (!v45)
            break;
        }
      }
    }
LABEL_48:
    v37 = (v45 - 1) & v45;
    v43 = __clz(__rbit64(v45)) + (v46 << 6);
    v39 = v46;
LABEL_49:
    v48 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v43);
    v50 = *v48;
    v49 = v48[1];
    outlined init with copy of Any(*(_QWORD *)(v5 + 56) + 32 * v43, (uint64_t)v75);
    *(_QWORD *)&v74 = v50;
    *((_QWORD *)&v74 + 1) = v49;
    v72[2] = v74;
    v73[0] = v75[0];
    v73[1] = v75[1];
    *(_QWORD *)&v72[0] = v50;
    *((_QWORD *)&v72[0] + 1) = v49;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    outlined init with take of Any(v73, v67);
    v68 = v64;
    v69 = v65;
    v70 = v66;
    outlined init with take of Any(v67, v71);
    v64 = v68;
    v65 = v69;
    v66 = v70;
    outlined init with take of Any(v71, v72);
    outlined init with take of Any(v72, &v68);
    result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v6 + 40));
    v51 = -1 << *(_BYTE *)(v6 + 32);
    v52 = result & ~v51;
    v53 = v52 >> 6;
    if (((-1 << v52) & ~*(_QWORD *)(v38 + 8 * (v52 >> 6))) != 0)
    {
      v40 = __clz(__rbit64((-1 << v52) & ~*(_QWORD *)(v38 + 8 * (v52 >> 6)))) | v52 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v54 = 0;
      v55 = (unint64_t)(63 - v51) >> 6;
      do
      {
        if (++v53 == v55 && (v54 & 1) != 0)
        {
          __break(1u);
          goto LABEL_66;
        }
        v56 = v53 == v55;
        if (v53 == v55)
          v53 = 0;
        v54 |= v56;
        v57 = *(_QWORD *)(v38 + 8 * v53);
      }
      while (v57 == -1);
      v40 = __clz(__rbit64(~v57)) + (v53 << 6);
    }
    *(_QWORD *)(v38 + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v40;
    v41 = *(_QWORD *)(v6 + 48) + 40 * v40;
    *(_OWORD *)v41 = v64;
    *(_OWORD *)(v41 + 16) = v65;
    *(_QWORD *)(v41 + 32) = v66;
    result = (uint64_t)outlined init with take of Any(&v68, (_OWORD *)(*(_QWORD *)(v6 + 56) + 32 * v40));
    ++*(_QWORD *)(v6 + 16);
  }
  v47 = v39 + 5;
  if (v39 + 5 < v63)
  {
    v45 = *(_QWORD *)(v62 + 8 * v47);
    if (!v45)
    {
      while (1)
      {
        v46 = v47 + 1;
        if (__OFADD__(v47, 1))
          goto LABEL_67;
        if (v46 >= v63)
          goto LABEL_58;
        v45 = *(_QWORD *)(v62 + 8 * v46);
        ++v47;
        if (v45)
          goto LABEL_48;
      }
    }
    v46 = v39 + 5;
    goto LABEL_48;
  }
LABEL_58:
  swift_release();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();

  swift_bridgeObjectRelease();
  *(_QWORD *)&v64 = CFSTR("NSURLErrorFailingURLPeerTrustErrorKey");
  type metadata accessor for NSString();
  lazy protocol witness table accessor for type NSString and conformance NSObject();
  v58 = CFSTR("NSURLErrorFailingURLPeerTrustErrorKey");
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(v6 + 16))
  {
    v59 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v68);
    if ((v60 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v6 + 56) + 32 * v59, (uint64_t)&v74);
    }
    else
    {
      v74 = 0u;
      v75[0] = 0u;
    }
  }
  else
  {
    v74 = 0u;
    v75[0] = 0u;
  }
  swift_release();
  outlined destroy of AnyHashable((uint64_t)&v68);
  if (*((_QWORD *)&v75[0] + 1))
  {
    outlined init with take of Any(&v74, &v64);
    outlined init with take of Any(&v64, &v68);
    type metadata accessor for SecTrustRef(0);
    swift_dynamicCast();
    return v74;
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v74);
    return 0;
  }
}

uint64_t URLError.backgroundTaskCancelledReason.getter@<X0>(char *a1@<X8>)
{
  return URLError.backgroundTaskCancelledReason.getter((void **)&NSURLErrorBackgroundTaskCancelledReasonKey, a1);
}

uint64_t URLError.networkUnavailableReason.getter@<X0>(char *a1@<X8>)
{
  return URLError.backgroundTaskCancelledReason.getter((void **)&NSURLErrorNetworkUnavailableReasonKey, a1);
}

uint64_t URLError.backgroundTaskCancelledReason.getter@<X0>(void **a1@<X0>, char *a2@<X8>)
{
  id *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  __int128 v17;
  _OWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  _OWORD *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  int64_t v46;
  unint64_t v47;
  int64_t v48;
  int64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char v56;
  unint64_t v57;
  BOOL v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  char v62;
  char *v63;
  id v65;
  uint64_t v67;
  int64_t v68;
  __int128 v69;
  id v70;
  __int128 v71;
  uint64_t v72;
  _OWORD v73[2];
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  _OWORD v77[2];
  _OWORD v78[3];
  _OWORD v79[2];
  __int128 v80;
  _OWORD v81[2];
  __int128 v82;
  __int128 v83;

  v3 = *v2;
  v4 = *v2;
  v65 = v3;
  v5 = objc_msgSend((id)_swift_stdlib_bridgeErrorToNSError(), sel_userInfo);
  swift_unknownObjectRelease();
  if (v5)
  {
    swift_unknownObjectRetain();
    v6 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (v6)
    {
      v7 = v6;
      goto LABEL_23;
    }
    v9 = objc_msgSend(v5, sel_count);
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v7 = static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      v7 = MEMORY[0x1E0DEE9E0];
    }
    v10 = *(_QWORD **)(v7 + 48);
    v11 = *(_QWORD *)(v7 + 56);
    swift_retain();
    result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v10, v11, v5, (uint64_t)v9);
    if (result < 0 || (uint64_t)v9 < result)
      goto LABEL_74;
    *(_QWORD *)(v7 + 16) = result;
    if (!result)
    {
LABEL_22:
      swift_release();
LABEL_23:

      if (*(_QWORD *)(v7 + 16))
        goto LABEL_24;
      goto LABEL_5;
    }
    v13 = result - 1;
    v14 = v7 + 64;
    while (1)
    {
      if (((*(_QWORD *)(v14 + (((unint64_t)v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
        goto LABEL_14;
      v19 = (uint64_t *)(*(_QWORD *)(v7 + 48) + 16 * v13);
      v20 = *v19;
      v21 = v19[1];
      swift_bridgeObjectRetain();
      v22 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
      v24 = v23;
      swift_bridgeObjectRelease();
      if ((v24 & 1) != 0)
      {
        swift_arrayDestroy();
        result = swift_arrayDestroy();
        v25 = *(_QWORD *)(v7 + 16);
        v26 = __OFSUB__(v25, 1);
        v27 = v25 - 1;
        if (v26)
          goto LABEL_73;
        *(_QWORD *)(v7 + 16) = v27;
        goto LABEL_14;
      }
      *(_QWORD *)(v14 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
      if (v13 < (uint64_t)v22)
      {
        *(_OWORD *)(*(_QWORD *)(v7 + 48) + 16 * v22) = *(_OWORD *)(*(_QWORD *)(v7 + 48) + 16 * v13);
        v15 = *(_QWORD *)(v7 + 56);
        v16 = (_OWORD *)(v15 + 32 * v13);
        v17 = v16[1];
        v18 = (_OWORD *)(v15 + 32 * v22);
        *v18 = *v16;
        v18[1] = v17;
LABEL_14:
        if (--v13 < 0)
          goto LABEL_22;
      }
      else
      {
        if (v22 == v13)
          goto LABEL_14;
        v28 = *(_QWORD *)(v7 + 48);
        v29 = (uint64_t *)(v28 + 16 * v22);
        v30 = (uint64_t *)(v28 + 16 * v13);
        v31 = *v29;
        v32 = v29[1];
        v33 = v30[1];
        *v29 = *v30;
        v29[1] = v33;
        *v30 = v31;
        v30[1] = v32;
        v34 = *(_QWORD *)(v7 + 56);
        v35 = (_OWORD *)(v34 + 32 * v22);
        v36 = (_OWORD *)(v34 + 32 * v13);
        outlined init with take of Any(v35, &v74);
        outlined init with take of Any(v36, v35);
        outlined init with take of Any(&v74, v36);
        if (v13 < 0)
          goto LABEL_22;
      }
    }
  }
  v7 = MEMORY[0x1E0DEE9E0];
  if (*(_QWORD *)(MEMORY[0x1E0DEE9E0] + 16))
  {
LABEL_24:
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    v8 = static _DictionaryStorage.allocate(capacity:)();
    goto LABEL_25;
  }
LABEL_5:
  v8 = MEMORY[0x1E0DEE9E0];
LABEL_25:
  v67 = v7 + 64;
  v37 = -1 << *(_BYTE *)(v7 + 32);
  if (-v37 < 64)
    v38 = ~(-1 << -(char)v37);
  else
    v38 = -1;
  v39 = v38 & *(_QWORD *)(v7 + 64);
  v68 = (unint64_t)(63 - v37) >> 6;
  v40 = v8 + 64;
  swift_bridgeObjectRetain();
  result = swift_retain();
  v41 = 0;
  while (1)
  {
    if (v39)
    {
      v44 = __clz(__rbit64(v39));
      v39 &= v39 - 1;
      v45 = v44 | (v41 << 6);
      goto LABEL_49;
    }
    v46 = v41 + 1;
    if (__OFADD__(v41, 1))
    {
LABEL_71:
      __break(1u);
      goto LABEL_72;
    }
    if (v46 >= v68)
      goto LABEL_58;
    v47 = *(_QWORD *)(v67 + 8 * v46);
    v48 = v41 + 1;
    if (!v47)
    {
      v48 = v41 + 2;
      if (v41 + 2 >= v68)
        goto LABEL_58;
      v47 = *(_QWORD *)(v67 + 8 * v48);
      if (!v47)
      {
        v48 = v41 + 3;
        if (v41 + 3 >= v68)
          goto LABEL_58;
        v47 = *(_QWORD *)(v67 + 8 * v48);
        if (!v47)
        {
          v48 = v41 + 4;
          if (v41 + 4 >= v68)
            goto LABEL_58;
          v47 = *(_QWORD *)(v67 + 8 * v48);
          if (!v47)
            break;
        }
      }
    }
LABEL_48:
    v39 = (v47 - 1) & v47;
    v45 = __clz(__rbit64(v47)) + (v48 << 6);
    v41 = v48;
LABEL_49:
    v50 = (uint64_t *)(*(_QWORD *)(v7 + 48) + 16 * v45);
    v52 = *v50;
    v51 = v50[1];
    outlined init with copy of Any(*(_QWORD *)(v7 + 56) + 32 * v45, (uint64_t)v81);
    *(_QWORD *)&v80 = v52;
    *((_QWORD *)&v80 + 1) = v51;
    v78[2] = v80;
    v79[0] = v81[0];
    v79[1] = v81[1];
    *(_QWORD *)&v78[0] = v52;
    *((_QWORD *)&v78[0] + 1) = v51;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    outlined init with take of Any(v79, v73);
    v74 = v69;
    v75 = v71;
    v76 = v72;
    outlined init with take of Any(v73, v77);
    v69 = v74;
    v71 = v75;
    v72 = v76;
    outlined init with take of Any(v77, v78);
    outlined init with take of Any(v78, &v74);
    result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v53 = -1 << *(_BYTE *)(v8 + 32);
    v54 = result & ~v53;
    v55 = v54 >> 6;
    if (((-1 << v54) & ~*(_QWORD *)(v40 + 8 * (v54 >> 6))) != 0)
    {
      v42 = __clz(__rbit64((-1 << v54) & ~*(_QWORD *)(v40 + 8 * (v54 >> 6)))) | v54 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v56 = 0;
      v57 = (unint64_t)(63 - v53) >> 6;
      do
      {
        if (++v55 == v57 && (v56 & 1) != 0)
        {
          __break(1u);
          goto LABEL_71;
        }
        v58 = v55 == v57;
        if (v55 == v57)
          v55 = 0;
        v56 |= v58;
        v59 = *(_QWORD *)(v40 + 8 * v55);
      }
      while (v59 == -1);
      v42 = __clz(__rbit64(~v59)) + (v55 << 6);
    }
    *(_QWORD *)(v40 + ((v42 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v42;
    v43 = *(_QWORD *)(v8 + 48) + 40 * v42;
    *(_OWORD *)v43 = v69;
    *(_OWORD *)(v43 + 16) = v71;
    *(_QWORD *)(v43 + 32) = v72;
    result = (uint64_t)outlined init with take of Any(&v74, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v42));
    ++*(_QWORD *)(v8 + 16);
  }
  v49 = v41 + 5;
  if (v41 + 5 >= v68)
  {
LABEL_58:
    swift_release();
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();

    swift_bridgeObjectRelease();
    v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
    AnyHashable.init<A>(_:)();
    if (*(_QWORD *)(v8 + 16))
    {
      v60 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v74);
      if ((v61 & 1) != 0)
      {
        outlined init with copy of Any(*(_QWORD *)(v8 + 56) + 32 * v60, (uint64_t)&v82);
      }
      else
      {
        v82 = 0u;
        v83 = 0u;
      }
    }
    else
    {
      v82 = 0u;
      v83 = 0u;
    }
    swift_release();
    outlined destroy of AnyHashable((uint64_t)&v74);
    if (*((_QWORD *)&v83 + 1))
    {
      result = swift_dynamicCast();
      if ((result & 1) != 0)
      {
        v62 = (char)v70;
        if ((unint64_t)v70 >= 3)
          v62 = 3;
        v63 = a2;
        goto LABEL_70;
      }
    }
    else
    {
      result = outlined destroy of Any?((uint64_t)&v82);
    }
    v63 = a2;
    v62 = 3;
LABEL_70:
    *v63 = v62;
    return result;
  }
  v47 = *(_QWORD *)(v67 + 8 * v49);
  if (v47)
  {
    v48 = v41 + 5;
    goto LABEL_48;
  }
  while (1)
  {
    v48 = v49 + 1;
    if (__OFADD__(v49, 1))
      break;
    if (v48 >= v68)
      goto LABEL_58;
    v47 = *(_QWORD *)(v67 + 8 * v48);
    ++v49;
    if (v47)
      goto LABEL_48;
  }
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
  return result;
}

uint64_t URLError.downloadTaskResumeData.getter()
{
  return URLError.downloadTaskResumeData.getter(MEMORY[0x1E0C92BB8]);
}

uint64_t URLError.uploadTaskResumeData.getter()
{
  return URLError.downloadTaskResumeData.getter(MEMORY[0x1E0C92BE8]);
}

uint64_t URLError.downloadTaskResumeData.getter(void **a1)
{
  id *v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  _OWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int64_t v45;
  unint64_t v46;
  int64_t v47;
  int64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char v55;
  unint64_t v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  id v62;
  uint64_t v64;
  int64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  _OWORD v69[2];
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  _OWORD v73[2];
  _OWORD v74[3];
  _OWORD v75[2];
  __int128 v76;
  _OWORD v77[2];

  v2 = *v1;
  v3 = *v1;
  v62 = v2;
  v4 = objc_msgSend((id)_swift_stdlib_bridgeErrorToNSError(), sel_userInfo);
  swift_unknownObjectRelease();
  if (v4)
  {
    swift_unknownObjectRetain();
    v5 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (v5)
    {
      v6 = v5;
      goto LABEL_23;
    }
    v8 = objc_msgSend(v4, sel_count);
    if (v8)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v6 = static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      v6 = MEMORY[0x1E0DEE9E0];
    }
    v9 = *(_QWORD **)(v6 + 48);
    v10 = *(_QWORD *)(v6 + 56);
    swift_retain();
    result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v9, v10, v4, (uint64_t)v8);
    if (result < 0 || (uint64_t)v8 < result)
      goto LABEL_71;
    *(_QWORD *)(v6 + 16) = result;
    if (!result)
    {
LABEL_22:
      swift_release();
LABEL_23:

      if (*(_QWORD *)(v6 + 16))
        goto LABEL_24;
      goto LABEL_5;
    }
    v12 = result - 1;
    v13 = v6 + 64;
    while (1)
    {
      while (1)
      {
        if (((*(_QWORD *)(v13 + (((unint64_t)v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
          goto LABEL_14;
        v18 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v12);
        v19 = *v18;
        v20 = v18[1];
        swift_bridgeObjectRetain();
        v21 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v20);
        v23 = v22;
        swift_bridgeObjectRelease();
        if ((v23 & 1) == 0)
          break;
        swift_arrayDestroy();
        result = swift_arrayDestroy();
        v24 = *(_QWORD *)(v6 + 16);
        v25 = __OFSUB__(v24, 1);
        v26 = v24 - 1;
        if (v25)
        {
LABEL_70:
          __break(1u);
LABEL_71:
          __break(1u);
          return result;
        }
        *(_QWORD *)(v6 + 16) = v26;
LABEL_14:
        if (--v12 < 0)
          goto LABEL_22;
      }
      *(_QWORD *)(v13 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
      if (v12 < (uint64_t)v21)
      {
        *(_OWORD *)(*(_QWORD *)(v6 + 48) + 16 * v21) = *(_OWORD *)(*(_QWORD *)(v6 + 48) + 16 * v12);
        v14 = *(_QWORD *)(v6 + 56);
        v15 = (_OWORD *)(v14 + 32 * v12);
        v16 = v15[1];
        v17 = (_OWORD *)(v14 + 32 * v21);
        *v17 = *v15;
        v17[1] = v16;
        goto LABEL_14;
      }
      if (v21 == v12)
        goto LABEL_14;
      v27 = *(_QWORD *)(v6 + 48);
      v28 = (uint64_t *)(v27 + 16 * v21);
      v29 = (uint64_t *)(v27 + 16 * v12);
      v30 = *v28;
      v31 = v28[1];
      v32 = v29[1];
      *v28 = *v29;
      v28[1] = v32;
      *v29 = v30;
      v29[1] = v31;
      v33 = *(_QWORD *)(v6 + 56);
      v34 = (_OWORD *)(v33 + 32 * v21);
      v35 = (_OWORD *)(v33 + 32 * v12);
      outlined init with take of Any(v34, &v70);
      outlined init with take of Any(v35, v34);
      outlined init with take of Any(&v70, v35);
      if (v12 < 0)
        goto LABEL_22;
    }
  }
  v6 = MEMORY[0x1E0DEE9E0];
  if (*(_QWORD *)(MEMORY[0x1E0DEE9E0] + 16))
  {
LABEL_24:
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    v7 = static _DictionaryStorage.allocate(capacity:)();
    goto LABEL_25;
  }
LABEL_5:
  v7 = MEMORY[0x1E0DEE9E0];
LABEL_25:
  v64 = v6 + 64;
  v36 = -1 << *(_BYTE *)(v6 + 32);
  if (-v36 < 64)
    v37 = ~(-1 << -(char)v36);
  else
    v37 = -1;
  v38 = v37 & *(_QWORD *)(v6 + 64);
  v65 = (unint64_t)(63 - v36) >> 6;
  v39 = v7 + 64;
  swift_bridgeObjectRetain();
  result = swift_retain();
  v40 = 0;
  while (1)
  {
    if (v38)
    {
      v43 = __clz(__rbit64(v38));
      v38 &= v38 - 1;
      v44 = v43 | (v40 << 6);
      goto LABEL_49;
    }
    v45 = v40 + 1;
    if (__OFADD__(v40, 1))
    {
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
      goto LABEL_70;
    }
    if (v45 >= v65)
      goto LABEL_58;
    v46 = *(_QWORD *)(v64 + 8 * v45);
    v47 = v40 + 1;
    if (!v46)
    {
      v47 = v40 + 2;
      if (v40 + 2 >= v65)
        goto LABEL_58;
      v46 = *(_QWORD *)(v64 + 8 * v47);
      if (!v46)
      {
        v47 = v40 + 3;
        if (v40 + 3 >= v65)
          goto LABEL_58;
        v46 = *(_QWORD *)(v64 + 8 * v47);
        if (!v46)
        {
          v47 = v40 + 4;
          if (v40 + 4 >= v65)
            goto LABEL_58;
          v46 = *(_QWORD *)(v64 + 8 * v47);
          if (!v46)
            break;
        }
      }
    }
LABEL_48:
    v38 = (v46 - 1) & v46;
    v44 = __clz(__rbit64(v46)) + (v47 << 6);
    v40 = v47;
LABEL_49:
    v49 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v44);
    v51 = *v49;
    v50 = v49[1];
    outlined init with copy of Any(*(_QWORD *)(v6 + 56) + 32 * v44, (uint64_t)v77);
    *(_QWORD *)&v76 = v51;
    *((_QWORD *)&v76 + 1) = v50;
    v74[2] = v76;
    v75[0] = v77[0];
    v75[1] = v77[1];
    *(_QWORD *)&v74[0] = v51;
    *((_QWORD *)&v74[0] + 1) = v50;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    outlined init with take of Any(v75, v69);
    v70 = v66;
    v71 = v67;
    v72 = v68;
    outlined init with take of Any(v69, v73);
    v66 = v70;
    v67 = v71;
    v68 = v72;
    outlined init with take of Any(v73, v74);
    outlined init with take of Any(v74, &v70);
    result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v7 + 40));
    v52 = -1 << *(_BYTE *)(v7 + 32);
    v53 = result & ~v52;
    v54 = v53 >> 6;
    if (((-1 << v53) & ~*(_QWORD *)(v39 + 8 * (v53 >> 6))) != 0)
    {
      v41 = __clz(__rbit64((-1 << v53) & ~*(_QWORD *)(v39 + 8 * (v53 >> 6)))) | v53 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v55 = 0;
      v56 = (unint64_t)(63 - v52) >> 6;
      do
      {
        if (++v54 == v56 && (v55 & 1) != 0)
        {
          __break(1u);
          goto LABEL_68;
        }
        v57 = v54 == v56;
        if (v54 == v56)
          v54 = 0;
        v55 |= v57;
        v58 = *(_QWORD *)(v39 + 8 * v54);
      }
      while (v58 == -1);
      v41 = __clz(__rbit64(~v58)) + (v54 << 6);
    }
    *(_QWORD *)(v39 + ((v41 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v41;
    v42 = *(_QWORD *)(v7 + 48) + 40 * v41;
    *(_OWORD *)v42 = v66;
    *(_OWORD *)(v42 + 16) = v67;
    *(_QWORD *)(v42 + 32) = v68;
    result = (uint64_t)outlined init with take of Any(&v70, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v41));
    ++*(_QWORD *)(v7 + 16);
  }
  v48 = v40 + 5;
  if (v40 + 5 < v65)
  {
    v46 = *(_QWORD *)(v64 + 8 * v48);
    if (!v46)
    {
      while (1)
      {
        v47 = v48 + 1;
        if (__OFADD__(v48, 1))
          goto LABEL_69;
        if (v47 >= v65)
          goto LABEL_58;
        v46 = *(_QWORD *)(v64 + 8 * v47);
        ++v48;
        if (v46)
          goto LABEL_48;
      }
    }
    v47 = v40 + 5;
    goto LABEL_48;
  }
LABEL_58:
  swift_release();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();

  swift_bridgeObjectRelease();
  *(_QWORD *)&v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  *((_QWORD *)&v66 + 1) = v59;
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(v7 + 16))
  {
    v60 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v70);
    if ((v61 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v7 + 56) + 32 * v60, (uint64_t)&v66);
    }
    else
    {
      v66 = 0u;
      v67 = 0u;
    }
  }
  else
  {
    v66 = 0u;
    v67 = 0u;
  }
  swift_release();
  outlined destroy of AnyHashable((uint64_t)&v70);
  if (*((_QWORD *)&v67 + 1))
  {
    if (swift_dynamicCast())
      return v76;
    else
      return 0;
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v66);
    return 0;
  }
}

void static URLError.unsupportedURL.getter(_QWORD *a1@<X8>)
{
  *a1 = -1002;
}

void static URLError.cannotFindHost.getter(_QWORD *a1@<X8>)
{
  *a1 = -1003;
}

void static URLError.cannotConnectToHost.getter(_QWORD *a1@<X8>)
{
  *a1 = -1004;
}

void static URLError.networkConnectionLost.getter(_QWORD *a1@<X8>)
{
  *a1 = -1005;
}

void static URLError.dnsLookupFailed.getter(_QWORD *a1@<X8>)
{
  *a1 = -1006;
}

void static URLError.httpTooManyRedirects.getter(_QWORD *a1@<X8>)
{
  *a1 = -1007;
}

void static URLError.resourceUnavailable.getter(_QWORD *a1@<X8>)
{
  *a1 = -1008;
}

void static URLError.notConnectedToInternet.getter(_QWORD *a1@<X8>)
{
  *a1 = -1009;
}

void static URLError.redirectToNonExistentLocation.getter(_QWORD *a1@<X8>)
{
  *a1 = -1010;
}

void static URLError.badServerResponse.getter(_QWORD *a1@<X8>)
{
  *a1 = -1011;
}

void static URLError.userCancelledAuthentication.getter(_QWORD *a1@<X8>)
{
  *a1 = -1012;
}

void static URLError.userAuthenticationRequired.getter(_QWORD *a1@<X8>)
{
  *a1 = -1013;
}

void static URLError.zeroByteResource.getter(_QWORD *a1@<X8>)
{
  *a1 = -1014;
}

void static URLError.cannotDecodeRawData.getter(_QWORD *a1@<X8>)
{
  *a1 = -1015;
}

void static URLError.cannotDecodeContentData.getter(_QWORD *a1@<X8>)
{
  *a1 = -1016;
}

void static URLError.cannotParseResponse.getter(_QWORD *a1@<X8>)
{
  *a1 = -1017;
}

void static URLError.appTransportSecurityRequiresSecureConnection.getter(_QWORD *a1@<X8>)
{
  *a1 = -1022;
}

void static URLError.fileDoesNotExist.getter(_QWORD *a1@<X8>)
{
  *a1 = -1100;
}

void static URLError.fileIsDirectory.getter(_QWORD *a1@<X8>)
{
  *a1 = -1101;
}

void static URLError.noPermissionsToReadFile.getter(_QWORD *a1@<X8>)
{
  *a1 = -1102;
}

void static URLError.dataLengthExceedsMaximum.getter(_QWORD *a1@<X8>)
{
  *a1 = -1103;
}

void static URLError.secureConnectionFailed.getter(_QWORD *a1@<X8>)
{
  *a1 = -1200;
}

void static URLError.serverCertificateHasBadDate.getter(_QWORD *a1@<X8>)
{
  *a1 = -1201;
}

void static URLError.serverCertificateUntrusted.getter(_QWORD *a1@<X8>)
{
  *a1 = -1202;
}

void static URLError.serverCertificateHasUnknownRoot.getter(_QWORD *a1@<X8>)
{
  *a1 = -1203;
}

void static URLError.serverCertificateNotYetValid.getter(_QWORD *a1@<X8>)
{
  *a1 = -1204;
}

void static URLError.clientCertificateRejected.getter(_QWORD *a1@<X8>)
{
  *a1 = -1205;
}

void static URLError.clientCertificateRequired.getter(_QWORD *a1@<X8>)
{
  *a1 = -1206;
}

void static URLError.cannotLoadFromNetwork.getter(_QWORD *a1@<X8>)
{
  *a1 = -2000;
}

void static URLError.cannotCreateFile.getter(_QWORD *a1@<X8>)
{
  *a1 = -3000;
}

void static URLError.cannotOpenFile.getter(_QWORD *a1@<X8>)
{
  *a1 = -3001;
}

void static URLError.cannotCloseFile.getter(_QWORD *a1@<X8>)
{
  *a1 = -3002;
}

void static URLError.cannotWriteToFile.getter(_QWORD *a1@<X8>)
{
  *a1 = -3003;
}

void static URLError.cannotRemoveFile.getter(_QWORD *a1@<X8>)
{
  *a1 = -3004;
}

void static URLError.cannotMoveFile.getter(_QWORD *a1@<X8>)
{
  *a1 = -3005;
}

void static URLError.downloadDecodingFailedMidStream.getter(_QWORD *a1@<X8>)
{
  *a1 = -3006;
}

void static URLError.downloadDecodingFailedToComplete.getter(_QWORD *a1@<X8>)
{
  *a1 = -3007;
}

void static URLError.internationalRoamingOff.getter(_QWORD *a1@<X8>)
{
  *a1 = -1018;
}

void static URLError.callIsActive.getter(_QWORD *a1@<X8>)
{
  *a1 = -1019;
}

void static URLError.dataNotAllowed.getter(_QWORD *a1@<X8>)
{
  *a1 = -1020;
}

void static URLError.requestBodyStreamExhausted.getter(_QWORD *a1@<X8>)
{
  *a1 = -1021;
}

void static URLError.backgroundSessionRequiresSharedContainer.getter(_QWORD *a1@<X8>)
{
  *a1 = -995;
}

void static URLError.backgroundSessionInUseByAnotherProcess.getter(_QWORD *a1@<X8>)
{
  *a1 = -996;
}

void static URLError.backgroundSessionWasDisconnected.getter(_QWORD *a1@<X8>)
{
  *a1 = -997;
}

unint64_t lazy protocol witness table accessor for type URLError.Code and conformance URLError.Code()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URLError.Code and conformance URLError.Code;
  if (!lazy protocol witness table cache variable for type URLError.Code and conformance URLError.Code)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URLError.Code, &type metadata for URLError.Code);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLError.Code and conformance URLError.Code);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URLError.Code and conformance URLError.Code;
  if (!lazy protocol witness table cache variable for type URLError.Code and conformance URLError.Code)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URLError.Code, &type metadata for URLError.Code);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLError.Code and conformance URLError.Code);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URLError.Code and conformance URLError.Code;
  if (!lazy protocol witness table cache variable for type URLError.Code and conformance URLError.Code)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URLError.Code, &type metadata for URLError.Code);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLError.Code and conformance URLError.Code);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for URLError.Code(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type URLError.Code and conformance URLError.Code();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for URLError(_QWORD *a1)
{
  unint64_t result;

  a1[1] = lazy protocol witness table accessor for type URLError and conformance URLError();
  a1[2] = lazy protocol witness table accessor for type URLError and conformance URLError();
  result = lazy protocol witness table accessor for type URLError and conformance URLError();
  a1[3] = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type URLError.BackgroundTaskCancelledReason and conformance URLError.BackgroundTaskCancelledReason()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URLError.BackgroundTaskCancelledReason and conformance URLError.BackgroundTaskCancelledReason;
  if (!lazy protocol witness table cache variable for type URLError.BackgroundTaskCancelledReason and conformance URLError.BackgroundTaskCancelledReason)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URLError.BackgroundTaskCancelledReason, &type metadata for URLError.BackgroundTaskCancelledReason);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLError.BackgroundTaskCancelledReason and conformance URLError.BackgroundTaskCancelledReason);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type URLError.NetworkUnavailableReason and conformance URLError.NetworkUnavailableReason()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URLError.NetworkUnavailableReason and conformance URLError.NetworkUnavailableReason;
  if (!lazy protocol witness table cache variable for type URLError.NetworkUnavailableReason and conformance URLError.NetworkUnavailableReason)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URLError.NetworkUnavailableReason, &type metadata for URLError.NetworkUnavailableReason);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLError.NetworkUnavailableReason and conformance URLError.NetworkUnavailableReason);
  }
  return result;
}

ValueMetadata *type metadata accessor for URLError.BackgroundTaskCancelledReason()
{
  return &type metadata for URLError.BackgroundTaskCancelledReason;
}

uint64_t storeEnumTagSinglePayload for URLError.BackgroundTaskCancelledReason(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_181D1E06C + 4 * byte_182150625[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_181D1E0A0 + 4 * byte_182150620[v4]))();
}

uint64_t sub_181D1E0A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181D1E0A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181D1E0B0);
  return result;
}

uint64_t sub_181D1E0BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181D1E0C4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_181D1E0C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181D1E0D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for URLError.NetworkUnavailableReason()
{
  return &type metadata for URLError.NetworkUnavailableReason;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentV14CodableStorageOG_SSs5NeverOTg506_sSS10d3E17ef31V4fromACs7Decoder_p_tKcfcSSAC14gh3V14iJ54Ocfu_33_3c0eda9a63dc724d562b3e4a722c2209AISSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int64_t v6;
  char *v7;
  _QWORD v9[2];
  uint64_t v10;
  uint64_t v11;

  v10 = type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0);
  v3 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v5 = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    v9[1] = v1;
    v11 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    outlined init with copy of ICUNumberFormatter.Signature(a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), (uint64_t)v5, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
    v7 = (char *)&loc_181D1E2A0 + 4 * byte_1821509B0[swift_getEnumCaseMultiPayload()];
    __asm { BR              X9 }
  }
  return MEMORY[0x1E0DEE9D8];
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_s7CVarArg_p6vararg_AJ15_AttributeFixupOSg11attrStrInfots5NeverOTg5(void (*a1)(_OWORD *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t i;
  unint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v17[2];
  _OWORD v18[2];
  uint64_t v19;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x1E0DEE9D8];
  if (v5)
  {
    v19 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    v6 = v19;
    for (i = a3 + 32; ; i += 120)
    {
      a1(v17, i);
      if (v4)
        break;
      v4 = 0;
      v19 = v6;
      v11 = *(_QWORD *)(v6 + 16);
      v10 = *(_QWORD *)(v6 + 24);
      if (v11 >= v10 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
        v6 = v19;
      }
      *(_QWORD *)(v6 + 16) = v11 + 1;
      v12 = (_OWORD *)(v6 + (v11 << 6));
      v13 = v17[0];
      v14 = v17[1];
      v15 = v18[0];
      *(_OWORD *)((char *)v12 + 73) = *(_OWORD *)((char *)v18 + 9);
      v12[3] = v14;
      v12[4] = v15;
      v12[2] = v13;
      if (!--v5)
        return v6;
    }
    swift_release();
  }
  return v6;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_s7CVarArg_p6vararg_AJ15_AttributeFixupOSg11attrStrInfots5NeverOTg506_sSS10d3E17ef101V23_formatAttributedString_17preparedArguments7options5scope0D13Configuration6localeAA0eF0VSS_SayAC14gh51VGAK0B7OptionsVxmSo12NSDictionaryCSgAA6LocaleVtAA14l11ScopeRzlFs7ij17_p6vararg_AM01_R5m9OSg11attrO44InfotAMXEfU_AA0R6ScopesO0A10AttributesV_TGm5AF6LocaleVTf1cn_nTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5;

  v5 = a5();
  swift_unknownObjectRelease();
  return v5;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyADs5NeverO10Foundation23LocalizedStringResourceVIsgnrzr_xSayAJGAGSlRzAJRsd__AGRsd_0_r_0_lIetMgnozo_Tp5(void (*a1)(uint64_t *__return_ptr, char *), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  void (*v12)(_BYTE *, _QWORD);
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t *__return_ptr, char *);
  uint64_t v33;
  _BYTE v34[32];
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  v4 = v3;
  v32 = a1;
  v33 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v31 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v7 = (char *)&v27 - v6;
  v28 = swift_getAssociatedTypeWitness();
  v27 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28);
  v9 = (char *)&v27 - v8;
  v10 = dispatch thunk of Collection.count.getter();
  result = MEMORY[0x1E0DEE9D8];
  if (v10)
  {
    v44 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10 & ~(v10 >> 63), 0);
    result = dispatch thunk of Collection.startIndex.getter();
    if (v10 < 0)
    {
      __break(1u);
    }
    else
    {
      v30 = v2;
      v29 = AssociatedTypeWitness;
      while (1)
      {
        v12 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read();
        v13 = v31;
        (*(void (**)(char *))(v31 + 16))(v7);
        v12(v34, 0);
        v32(&v35, v7);
        if (v4)
          break;
        v4 = 0;
        (*(void (**)(char *, uint64_t))(v13 + 8))(v7, AssociatedTypeWitness);
        v14 = v44;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v14 + 16) + 1, 1);
          v14 = v44;
        }
        v16 = *(_QWORD *)(v14 + 16);
        v15 = *(_QWORD *)(v14 + 24);
        if (v16 >= v15 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
          v14 = v44;
        }
        v17 = v35;
        v18 = v37;
        v19 = v38;
        v20 = v41;
        v21 = v14 + 112 * v16;
        v22 = v36;
        v24 = v39;
        v23 = v40;
        v25 = v42;
        v26 = v43;
        *(_QWORD *)(v14 + 16) = v16 + 1;
        *(_QWORD *)(v21 + 32) = v17;
        *(_OWORD *)(v21 + 40) = v22;
        *(_QWORD *)(v21 + 56) = v18;
        *(_QWORD *)(v21 + 64) = v19;
        *(_OWORD *)(v21 + 72) = v24;
        *(_OWORD *)(v21 + 88) = v23;
        *(_QWORD *)(v21 + 104) = v20;
        *(_OWORD *)(v21 + 112) = v25;
        *(_OWORD *)(v21 + 128) = v26;
        dispatch thunk of Collection.formIndex(after:)();
        --v10;
        AssociatedTypeWitness = v29;
        if (!v10)
        {
          (*(void (**)(char *, uint64_t))(v27 + 8))(v9, v28);
          return v44;
        }
      }
      (*(void (**)(char *, uint64_t))(v13 + 8))(v7, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v27 + 8))(v9, v28);
      return swift_release();
    }
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSayyXlG_SnySS5IndexVGs5NeverOTg5(void (*a1)(__int128 *__return_ptr, uint64_t *), uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;

  v4 = v3;
  if (a3 >> 62)
    goto LABEL_18;
  v6 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v7 = MEMORY[0x1E0DEE9D8];
    if (!v6)
      return v7;
    v16 = MEMORY[0x1E0DEE9D8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6 & ~(v6 >> 63), 0);
    if (v6 < 0)
      break;
    v9 = 0;
    v7 = v16;
    while (v6 != v9)
    {
      if ((a3 & 0xC000000000000001) != 0)
      {
        v10 = MEMORY[0x186DA53A8](v9, a3);
      }
      else
      {
        v10 = *(_QWORD *)(a3 + 8 * v9 + 32);
        swift_unknownObjectRetain();
      }
      v14 = v10;
      a1(&v15, &v14);
      if (v4)
      {
        swift_release();
        swift_unknownObjectRelease();
        return v7;
      }
      v4 = 0;
      swift_unknownObjectRelease();
      v16 = v7;
      v12 = *(_QWORD *)(v7 + 16);
      v11 = *(_QWORD *)(v7 + 24);
      if (v12 >= v11 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
        v7 = v16;
      }
      ++v9;
      *(_QWORD *)(v7 + 16) = v12 + 1;
      *(_OWORD *)(v7 + 16 * v12 + 32) = v15;
      if (v6 == v9)
        return v7;
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int EnumCaseMultiPayload;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v40 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v39 - v18;
  v20 = type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle(0);
  MEMORY[0x1E0C80A78](v20);
  v22 = (uint64_t *)((char *)&v39 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of ICUNumberFormatter.Signature(a3, (uint64_t)v19, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v24 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency;
      outlined init with take of LocalePreferences?((uint64_t)v19, (uint64_t)v10, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v10, (uint64_t)v22, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      v25 = v40;
      *v22 = a1;
      v22[1] = v25;
      swift_storeEnumTagMultiPayload();
      v26 = (uint64_t)v10;
    }
    else
    {
      v24 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
      outlined init with take of LocalePreferences?((uint64_t)v19, (uint64_t)v7, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v7, (uint64_t)v22, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      v28 = v40;
      *v22 = a1;
      v22[1] = v28;
      swift_storeEnumTagMultiPayload();
      v26 = (uint64_t)v7;
    }
  }
  else
  {
    v24 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
    outlined init with take of LocalePreferences?((uint64_t)v19, (uint64_t)v13, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)v13, (uint64_t)v22, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    v27 = v40;
    *v22 = a1;
    v22[1] = v27;
    swift_storeEnumTagMultiPayload();
    v26 = (uint64_t)v13;
  }
  outlined destroy of Any?(v26, v24);
  outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v22, (uint64_t)v17, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
  v29 = swift_getEnumCaseMultiPayload();
  if (!v29)
  {
    v35 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
    outlined init with take of LocalePreferences?((uint64_t)v17, (uint64_t)v13, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    v30 = specialized FloatingPointFormatStyle.format(_:)();
    v32 = v36;
    v33 = (uint64_t)v13;
LABEL_11:
    v34 = v35;
    goto LABEL_12;
  }
  if (v29 != 1)
  {
    v35 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
    outlined init with take of LocalePreferences?((uint64_t)v17, (uint64_t)v7, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
    v30 = specialized FloatingPointFormatStyle.Percent.format(_:)();
    v32 = v37;
    v33 = (uint64_t)v7;
    goto LABEL_11;
  }
  outlined init with take of LocalePreferences?((uint64_t)v17, (uint64_t)v10, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
  v30 = specialized FloatingPointFormatStyle.Currency.format(_:)();
  v32 = v31;
  v33 = (uint64_t)v10;
  v34 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency;
LABEL_12:
  outlined destroy of Any?(v33, v34);
  v41 = v30;
  v42 = v32;
  outlined destroy of ICUNumberFormatter.Signature((uint64_t)v22, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle);
  return String.init<A>(_:)();
}

uint64_t specialized closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  int EnumCaseMultiPayload;
  uint64_t *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  _QWORD *v38;
  uint64_t v39;
  int v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v52;
  int *v53;
  _QWORD *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  os_unfair_lock_s *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t ObjectType;
  uint64_t (*v82)(uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  _BOOL8 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t isStackAllocationSafe;
  int v108;
  uint64_t v109;
  char *v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  char *v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  char *v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t result;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int *v169;
  char *v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  _QWORD v176[18];
  _QWORD *v177;
  _QWORD v178[18];
  _QWORD v179[20];

  v173 = a2;
  v174 = a4;
  v179[18] = *MEMORY[0x1E0C80C00];
  v166 = type metadata accessor for ICUPercentNumberFormatter.Signature(0);
  MEMORY[0x1E0C80A78](v166);
  v167 = (uint64_t)&v161 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v169 = (int *)type metadata accessor for ICUCurrencyNumberFormatter.Signature(0);
  v162 = *((_QWORD *)v169 - 1);
  v7 = MEMORY[0x1E0C80A78](v169);
  v163 = (uint64_t)&v161 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v171 = (uint64_t)&v161 - v9;
  v165 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
  v10 = MEMORY[0x1E0C80A78](v165);
  v170 = (char *)&v161 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v161 - v12;
  v164 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
  v14 = MEMORY[0x1E0C80A78](v164);
  v172 = (uint64_t *)((char *)&v161 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v161 - v16;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>);
  v19 = MEMORY[0x1E0C80A78](v18);
  v168 = (uint64_t)&v161 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v161 - v21;
  v23 = type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0);
  v24 = MEMORY[0x1E0C80A78](v23);
  v26 = (char *)&v161 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24);
  v28 = (char *)&v161 - v27;
  v29 = type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(0);
  MEMORY[0x1E0C80A78](v29);
  v175 = (uint64_t *)((char *)&v161 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of ICUNumberFormatter.Signature(a3, (uint64_t)v28, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v32 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency;
      outlined init with take of LocalePreferences?((uint64_t)v28, (uint64_t)v17, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
      v33 = v175;
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v17, (uint64_t)v175, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      v34 = v173;
      *v33 = a1;
      v33[1] = v34;
      swift_storeEnumTagMultiPayload();
      v35 = (uint64_t)v17;
    }
    else
    {
      v32 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
      outlined init with take of LocalePreferences?((uint64_t)v28, (uint64_t)v13, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
      v38 = v175;
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v13, (uint64_t)v175, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      v39 = v173;
      *v38 = a1;
      v38[1] = v39;
      swift_storeEnumTagMultiPayload();
      v35 = (uint64_t)v13;
      v33 = v38;
    }
    v37 = v32;
  }
  else
  {
    outlined init with take of LocalePreferences?((uint64_t)v28, (uint64_t)v22, &demangling cache variable for type metadata for IntegerFormatStyle<Int>);
    v33 = v175;
    outlined init with copy of (Hashable & Sendable)?((uint64_t)v22, (uint64_t)v175, &demangling cache variable for type metadata for IntegerFormatStyle<Int>);
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    v36 = v173;
    *v33 = a1;
    v33[1] = v36;
    swift_storeEnumTagMultiPayload();
    v35 = (uint64_t)v22;
    v37 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>;
  }
  outlined destroy of Any?(v35, v37);
  outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v33, (uint64_t)v26, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
  v40 = swift_getEnumCaseMultiPayload();
  if (!v40)
  {
    v69 = (uint64_t)v26;
    v70 = v168;
    outlined init with take of LocalePreferences?(v69, v168, &demangling cache variable for type metadata for IntegerFormatStyle<Int>);
    v71 = specialized static ICUNumberFormatter.create<A>(for:)(v70);
    v72 = v174;
    if (!v71)
    {
LABEL_17:
      v179[0] = v72;
      lazy protocol witness table accessor for type Int and conformance Int();
      v74 = String.init<A>(_:radix:uppercase:)();
      v76 = v75;
LABEL_18:
      v77 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>;
LABEL_71:
      v128 = v70;
LABEL_133:
      outlined destroy of Any?(v128, v77);
      v179[0] = v74;
      v179[1] = v76;
      outlined destroy of ICUNumberFormatter.Signature((uint64_t)v33, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle);
      return String.init<A>(_:)();
    }
    type metadata accessor for ICUNumberFormatterBase.FormatResult();
    swift_initStackObject();
    v73 = ICUNumberFormatterBase.FormatResult.init(formatter:value:)();
    MEMORY[0x1E0C80A78](v73);
    LODWORD(v179[0]) = 0;
    isStackAllocationSafe = unumf_resultToString();
    if (LODWORD(v179[0]) == 15)
    {
      v108 = isStackAllocationSafe + 1;
      if (__OFADD__((_DWORD)isStackAllocationSafe, 1))
      {
        __break(1u);
        goto LABEL_135;
      }
      if (v108 < 0)
      {
LABEL_137:
        __break(1u);
        goto LABEL_138;
      }
      if (v108 < 513
        || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
      {
        MEMORY[0x1E0C80A78](isStackAllocationSafe);
        v110 = (char *)&v161 - v109;
        LODWORD(v178[0]) = 0;
        v111 = unumf_resultToString();
        if (SLODWORD(v178[0]) <= 0 && v111 > 0)
        {
          v74 = specialized String.init(_utf16:)((uint64_t)v110, v111);
          v76 = v112;
          v33 = v175;
          goto LABEL_50;
        }
        swift_release();
        v33 = v175;
        goto LABEL_16;
      }
      v121 = swift_slowAlloc();
      LODWORD(v178[0]) = 0;
      v122 = unumf_resultToString();
      if (SLODWORD(v178[0]) <= 0 && v122 > 0)
      {
        v74 = specialized String.init(_utf16:)(v121, v122);
        v76 = v123;
        MEMORY[0x186DA9E78](v121, -1, -1);
LABEL_50:
        swift_release();
        swift_release();
        if (v76)
          goto LABEL_18;
        goto LABEL_17;
      }
      MEMORY[0x186DA9E78](v121, -1, -1);
    }
    else if (SLODWORD(v179[0]) <= 0 && (int)isStackAllocationSafe > 0)
    {
      v74 = specialized String.init(_utf16:)((uint64_t)(&v161 - 8), isStackAllocationSafe);
      v76 = v119;
      goto LABEL_50;
    }
    swift_release();
LABEL_16:
    swift_release();
    goto LABEL_17;
  }
  if (v40 != 1)
  {
    v78 = (uint64_t)v26;
    v70 = (uint64_t)v170;
    outlined init with take of LocalePreferences?(v78, (uint64_t)v170, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
    type metadata accessor for ICUPercentNumberFormatter();
    v79 = v70 + *(int *)(v165 + 36);
    v80 = *(_QWORD *)(v70 + 8);
    ObjectType = swift_getObjectType();
    v82 = *(uint64_t (**)(uint64_t, uint64_t))(v80 + 472);
    swift_unknownObjectRetain();
    v83 = v82(ObjectType, v80);
    v85 = v84;
    swift_unknownObjectRelease();
    v86 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v80 + 464);
    swift_unknownObjectRetain();
    v86(v178, ObjectType, v80);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v178, (uint64_t)v179, &demangling cache variable for type metadata for LocalePreferences?);
    v87 = v79;
    v88 = v167;
    outlined init with copy of ICUNumberFormatter.Signature(v87, v167, type metadata accessor for NumberFormatStyleConfiguration.Collection);
    v89 = v166;
    v90 = (uint64_t *)(v88 + *(int *)(v166 + 20));
    *v90 = v83;
    v90[1] = v85;
    outlined init with take of LocalePreferences?((uint64_t)v179, v88 + *(int *)(v89 + 24), &demangling cache variable for type metadata for LocalePreferences?);
    v91 = static ICUPercentNumberFormatter._create(with:)(v88);
    outlined destroy of ICUNumberFormatter.Signature(v88, type metadata accessor for ICUPercentNumberFormatter.Signature);
    v92 = v174;
    if (!v91)
      goto LABEL_69;
    type metadata accessor for ICUNumberFormatterBase.FormatResult();
    swift_initStackObject();
    v93 = ICUNumberFormatterBase.FormatResult.init(formatter:value:)();
    MEMORY[0x1E0C80A78](v93);
    LODWORD(v178[0]) = 0;
    v113 = unumf_resultToString();
    if (LODWORD(v178[0]) != 15)
    {
      if (SLODWORD(v178[0]) > 0 || (int)v113 <= 0)
        goto LABEL_68;
      v74 = specialized String.init(_utf16:)((uint64_t)(&v161 - 8), v113);
      v76 = v120;
      goto LABEL_55;
    }
    v114 = v113 + 1;
    if (!__OFADD__((_DWORD)v113, 1))
    {
      if (v114 < 0)
      {
LABEL_138:
        __break(1u);
        goto LABEL_139;
      }
      if (v114 < 513 || (v113 = swift_stdlib_isStackAllocationSafe(), (v113 & 1) != 0))
      {
        MEMORY[0x1E0C80A78](v113);
        v116 = (char *)&v161 - v115;
        LODWORD(v176[0]) = 0;
        v117 = unumf_resultToString();
        if (SLODWORD(v176[0]) <= 0 && v117 > 0)
        {
          v74 = specialized String.init(_utf16:)((uint64_t)v116, v117);
          v76 = v118;
          goto LABEL_55;
        }
LABEL_68:
        swift_release();
        swift_release();
        goto LABEL_69;
      }
      v124 = swift_slowAlloc();
      LODWORD(v176[0]) = 0;
      v125 = unumf_resultToString();
      if (SLODWORD(v176[0]) > 0 || v125 <= 0)
      {
        MEMORY[0x186DA9E78](v124, -1, -1);
        goto LABEL_68;
      }
      v74 = specialized String.init(_utf16:)(v124, v125);
      v76 = v126;
      MEMORY[0x186DA9E78](v124, -1, -1);
LABEL_55:
      swift_release();
      swift_release();
      if (v76)
      {
LABEL_70:
        v33 = v175;
        v77 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
        goto LABEL_71;
      }
LABEL_69:
      v178[0] = v92;
      lazy protocol witness table accessor for type Int and conformance Int();
      v74 = String.init<A>(_:radix:uppercase:)();
      v76 = v127;
      goto LABEL_70;
    }
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
    goto LABEL_137;
  }
  v41 = v172;
  outlined init with take of LocalePreferences?((uint64_t)v26, (uint64_t)v172, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
  v42 = (uint64_t)v41 + *(int *)(v164 + 40);
  v44 = v41[2];
  v43 = v41[3];
  v45 = v41[1];
  v46 = swift_getObjectType();
  v47 = *(uint64_t (**)(uint64_t, uint64_t))(v45 + 472);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  v48 = v47(v46, v45);
  v50 = v49;
  swift_unknownObjectRelease();
  v51 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v45 + 464);
  swift_unknownObjectRetain();
  v51(v178, v46, v45);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v178, (uint64_t)v179, &demangling cache variable for type metadata for LocalePreferences?);
  v52 = v171;
  outlined init with copy of ICUNumberFormatter.Signature(v42, v171, type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
  v53 = v169;
  v54 = (_QWORD *)(v52 + v169[5]);
  *v54 = v44;
  v54[1] = v43;
  v55 = (uint64_t *)(v52 + v53[6]);
  *v55 = v48;
  v55[1] = v50;
  v56 = v52;
  v57 = v52 + v53[7];
  outlined init with take of LocalePreferences?((uint64_t)v179, v57, &demangling cache variable for type metadata for LocalePreferences?);
  if (one-time initialization token for cache != -1)
    swift_once();
  v58 = *(_QWORD *)algn_1EDC41C48;
  v173 = static ICUCurrencyNumberFormatter.cache;
  v59 = *(_QWORD *)algn_1EDC41C48 + 16;
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(v58 + 24));
  v60 = 0;
  specialized closure #1 in FormatterCache.formatter(for:creator:)(v58 + 16, v56, (uint64_t *)&v177);
  os_unfair_lock_unlock((os_unfair_lock_t)(v58 + 24));
  swift_release();
  v61 = v177;
  if (v177 != (_QWORD *)1)
  {
    swift_release();
    v94 = v174;
    goto LABEL_108;
  }
  v170 = 0;
  v62 = specialized static ICUCurrencyNumberFormatter.skeleton(for:)(v56);
  v64 = v63;
  v65 = *v55;
  v66 = v55[1];
  outlined init with take of LocalePreferences?(v57, (uint64_t)v178, &demangling cache variable for type metadata for LocalePreferences?);
  type metadata accessor for ICUCurrencyNumberFormatter();
  swift_allocObject();
  outlined init with take of LocalePreferences?((uint64_t)v178, (uint64_t)v176, &demangling cache variable for type metadata for LocalePreferences?);
  swift_bridgeObjectRetain();
  outlined retain of LocalePreferences?((uint64_t)v178);
  v61 = ICUNumberFormatterBase.init(skeleton:localeIdentifier:preferences:)(v62, v64, v65, v66, (uint64_t)v176);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v58 + 24));
  v67 = *(_QWORD *)(*(_QWORD *)(v58 + 16) + 16);
  v68 = (os_unfair_lock_s *)(v58 + 24);
  v168 = *(_QWORD *)(v58 + 16);
  if (v173 >= v67)
    swift_bridgeObjectRetain();
  else
    *(_QWORD *)v59 = MEMORY[0x1E0DEE9E0];
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v176[0] = *(_QWORD *)v59;
  v96 = v176[0];
  *(_QWORD *)v59 = 0x8000000000000000;
  v56 = v171;
  v98 = specialized __RawDictionaryStorage.find<A>(_:)(v171);
  v99 = *(_QWORD *)(v96 + 16);
  v100 = (v97 & 1) == 0;
  v101 = v99 + v100;
  v94 = v174;
  if (__OFADD__(v99, v100))
  {
    __break(1u);
  }
  else
  {
    LODWORD(v59) = v97;
    if (*(_QWORD *)(v96 + 24) < v101)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v101, isUniquelyReferenced_nonNull_native);
      v102 = v176[0];
      v103 = specialized __RawDictionaryStorage.find<A>(_:)(v56);
      if ((v59 & 1) != (v104 & 1))
        goto LABEL_142;
      v98 = v103;
      if ((v59 & 1) == 0)
        goto LABEL_106;
LABEL_30:
      v105 = *(_QWORD *)(v102 + 56);
      v106 = 8 * v98;
      swift_release();
      *(_QWORD *)(v105 + v106) = v61;
LABEL_107:
      *(_QWORD *)(v58 + 16) = v102;
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v68);
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of ICUDateIntervalFormatter??((uint64_t)v177);
      swift_release();
      v60 = v170;
LABEL_108:
      outlined destroy of ICUNumberFormatter.Signature(v56, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
      if (!v61)
        goto LABEL_131;
      type metadata accessor for ICUNumberFormatterBase.FormatResult();
      swift_initStackObject();
      v148 = ICUNumberFormatterBase.FormatResult.init(formatter:value:)();
      if (v60)
      {

LABEL_130:
        swift_release();
        goto LABEL_131;
      }
      MEMORY[0x1E0C80A78](v148);
      LODWORD(v178[0]) = 0;
      v149 = unumf_resultToString();
      if (LODWORD(v178[0]) != 15)
      {
        if (SLODWORD(v178[0]) > 0 || (int)v149 <= 0)
          goto LABEL_129;
        v74 = specialized String.init(_utf16:)((uint64_t)(&v161 - 8), v149);
        v76 = v155;
        goto LABEL_122;
      }
      v150 = v149 + 1;
      if (!__OFADD__((_DWORD)v149, 1))
      {
        if ((v150 & 0x80000000) == 0)
        {
          if (v150 < 513 || (v149 = swift_stdlib_isStackAllocationSafe(), (v149 & 1) != 0))
          {
            MEMORY[0x1E0C80A78](v149);
            v152 = (char *)&v161 - v151;
            LODWORD(v176[0]) = 0;
            v153 = unumf_resultToString();
            if (SLODWORD(v176[0]) <= 0 && v153 > 0)
            {
              v74 = specialized String.init(_utf16:)((uint64_t)v152, v153);
              v76 = v154;
              goto LABEL_122;
            }
LABEL_129:
            swift_release();
            goto LABEL_130;
          }
          v156 = swift_slowAlloc();
          LODWORD(v176[0]) = 0;
          v157 = unumf_resultToString();
          if (SLODWORD(v176[0]) > 0 || v157 <= 0)
          {
            MEMORY[0x186DA9E78](v156, -1, -1);
            goto LABEL_129;
          }
          v74 = specialized String.init(_utf16:)(v156, v157);
          v76 = v158;
          MEMORY[0x186DA9E78](v156, -1, -1);
LABEL_122:
          swift_release();
          swift_release();
          if (v76)
          {
LABEL_132:
            v33 = v175;
            v77 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency;
            v128 = (uint64_t)v172;
            goto LABEL_133;
          }
LABEL_131:
          v178[0] = v94;
          lazy protocol witness table accessor for type Int and conformance Int();
          v74 = String.init<A>(_:radix:uppercase:)();
          v76 = v159;
          goto LABEL_132;
        }
LABEL_139:
        __break(1u);
      }
      goto LABEL_136;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v102 = v96;
      if ((v97 & 1) != 0)
        goto LABEL_30;
LABEL_106:
      v146 = v163;
      v147 = v98;
      outlined init with copy of ICUNumberFormatter.Signature(v56, v163, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
      specialized _NativeDictionary._insert(at:key:value:)(v147, v146, (uint64_t)v61, (_QWORD *)v102);
      goto LABEL_107;
    }
  }
  v164 = v98;
  LODWORD(v165) = v59;
  v166 = v58 + 24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUCurrencyNumberFormatter.Signature, ICUCurrencyNumberFormatter?>);
  v129 = static _DictionaryStorage.copy(original:)();
  v102 = v129;
  if (!*(_QWORD *)(v96 + 16))
  {
LABEL_105:
    swift_bridgeObjectRelease();
    v94 = v174;
    v56 = v171;
    v68 = (os_unfair_lock_s *)v166;
    v98 = v164;
    if ((v165 & 1) != 0)
      goto LABEL_30;
    goto LABEL_106;
  }
  v130 = (int *)(v129 + 64);
  v131 = 1 << *(_BYTE *)(v102 + 32);
  v169 = (int *)(v96 + 64);
  v132 = (unint64_t)(v131 + 63) >> 6;
  if (v102 != v96 || v130 >= &v169[2 * v132])
    memmove(v130, v169, 8 * v132);
  v173 = 0;
  *(_QWORD *)(v102 + 16) = *(_QWORD *)(v96 + 16);
  v133 = 1 << *(_BYTE *)(v96 + 32);
  v134 = -1;
  if (v133 < 64)
    v134 = ~(-1 << v133);
  v135 = v134 & *(_QWORD *)(v96 + 64);
  v167 = (unint64_t)(v133 + 63) >> 6;
  v136 = v163;
  while (1)
  {
    if (v135)
    {
      v137 = __clz(__rbit64(v135));
      v135 &= v135 - 1;
      v138 = v137 | (v173 << 6);
      goto LABEL_81;
    }
    v142 = v173 + 1;
    if (__OFADD__(v173, 1))
    {
      __break(1u);
      goto LABEL_141;
    }
    if (v142 >= v167)
      goto LABEL_105;
    v143 = *(_QWORD *)&v169[2 * v142];
    v144 = v173 + 1;
    if (!v143)
    {
      v144 = v173 + 2;
      if (v173 + 2 >= v167)
        goto LABEL_105;
      v143 = *(_QWORD *)&v169[2 * v144];
      if (!v143)
      {
        v144 = v173 + 3;
        if (v173 + 3 >= v167)
          goto LABEL_105;
        v143 = *(_QWORD *)&v169[2 * v144];
        if (!v143)
        {
          v144 = v173 + 4;
          if (v173 + 4 >= v167)
            goto LABEL_105;
          v143 = *(_QWORD *)&v169[2 * v144];
          if (!v143)
          {
            v144 = v173 + 5;
            if (v173 + 5 >= v167)
              goto LABEL_105;
            v143 = *(_QWORD *)&v169[2 * v144];
            if (!v143)
            {
              v144 = v173 + 6;
              if (v173 + 6 >= v167)
                goto LABEL_105;
              v143 = *(_QWORD *)&v169[2 * v144];
              if (!v143)
              {
                v144 = v173 + 7;
                if (v173 + 7 >= v167)
                  goto LABEL_105;
                v143 = *(_QWORD *)&v169[2 * v144];
                if (!v143)
                  break;
              }
            }
          }
        }
      }
    }
LABEL_104:
    v135 = (v143 - 1) & v143;
    v173 = v144;
    v138 = __clz(__rbit64(v143)) + (v144 << 6);
LABEL_81:
    v139 = *(_QWORD *)(v162 + 72) * v138;
    outlined init with copy of ICUNumberFormatter.Signature(*(_QWORD *)(v96 + 48) + v139, v136, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
    v140 = 8 * v138;
    v141 = *(_QWORD *)(*(_QWORD *)(v96 + 56) + 8 * v138);
    outlined init with take of ICUNumberFormatter.Signature(v136, *(_QWORD *)(v102 + 48) + v139, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
    *(_QWORD *)(*(_QWORD *)(v102 + 56) + v140) = v141;
    swift_retain();
  }
  v145 = v173 + 8;
  if (v173 + 8 >= v167)
    goto LABEL_105;
  v143 = *(_QWORD *)&v169[2 * v145];
  if (v143)
  {
    v144 = v173 + 8;
    goto LABEL_104;
  }
  while (1)
  {
    v144 = v145 + 1;
    if (__OFADD__(v145, 1))
      break;
    if (v144 >= v167)
      goto LABEL_105;
    v143 = *(_QWORD *)&v169[2 * v144];
    ++v145;
    if (v143)
      goto LABEL_104;
  }
LABEL_141:
  __break(1u);
LABEL_142:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t (*v24)(uint64_t, int64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  os_unfair_lock_s *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  UErrorCode v34;
  UErrorCode isUniquelyReferenced_nonNull_native;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  unint64_t v45;
  os_unfair_lock_s *v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  os_unfair_lock_s *v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  _BOOL8 v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  int64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  const void *v88;
  uint64_t v89;
  uint64_t v90;
  int64_t v91;
  unint64_t v92;
  int64_t v93;
  int64_t v94;
  uint64_t *v95;
  uint64_t isStackAllocationSafe;
  int v97;
  uint64_t v98;
  _BYTE *v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  id v108;
  id v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  Swift::String v113;
  id v114;
  id v115;
  id v116;
  void *v117;
  void *v118;
  Swift::String v119;
  uint64_t result;
  _BYTE v121[64];
  _QWORD v122[2];
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  os_unfair_lock_s *v165;
  uint64_t v166;
  uint64_t v167;
  os_unfair_lock_s *v168;
  uint64_t v169;
  int64_t v170;
  char *v171;
  uint64_t v172;
  os_unfair_lock_t v173;
  uint64_t v174;
  int64_t v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  __int128 v179;
  uint64_t v180;
  int v181;
  __int16 v182;
  uint64_t v183[49];
  _QWORD v184[49];
  uint64_t v185[44];
  uint64_t v186[49];
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int16 v190;
  char v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  __int16 v195;
  int v196;
  __int16 v197;
  uint64_t v198;
  __int16 v199;
  uint64_t v200[52];

  v200[49] = *MEMORY[0x1E0C80C00];
  v9 = *(_OWORD *)(a3 + 64);
  v187 = *(_OWORD *)(a3 + 48);
  v188 = v9;
  v189 = *(_OWORD *)(a3 + 80);
  v190 = *(_WORD *)(a3 + 96);
  v179 = *(_OWORD *)a3;
  v10 = *(_QWORD *)(a3 + 16);
  v175 = *(_QWORD *)(a3 + 24);
  v11 = *(_QWORD *)(a3 + 40);
  v176 = *(_QWORD *)(a3 + 32);
  v177 = v10;
  outlined retain of Date.IntervalFormatStyle(a3);
  swift_unknownObjectRetain();
  outlined release of Locale((uint64_t)&v179);
  v200[0] = a1;
  v200[1] = a2;
  Date.FormatStyle.DateFieldCollection.formatterTemplate(overridingDayPeriodWithLocale:)();
  v14 = HIBYTE(v13) & 0xF;
  if ((v13 & 0x2000000000000000) == 0)
    v14 = (unint64_t)v12 & 0xFFFFFFFFFFFFLL;
  if (!v14)
  {
    swift_bridgeObjectRelease();
    v191 = 3;
    v192 = 0;
    v193 = 50332931;
    v194 = 0;
    v195 = 1;
    v196 = 591363;
    v197 = 513;
    v198 = 0;
    v199 = 3327;
    v200[0] = a1;
    v200[1] = a2;
    Date.FormatStyle.DateFieldCollection.formatterTemplate(overridingDayPeriodWithLocale:)();
  }
  v15 = v12;
  v16 = v13;
  ObjectType = swift_getObjectType();
  v18 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 64);
  swift_unknownObjectRetain();
  v19 = v18(ObjectType, a2);
  Locale.Components.init(identifier:)(v19, v20, v200);
  v186[0] = a1;
  v186[1] = a2;
  Locale.Components.applyPreferencesOverride(_:)(v186);
  v174 = a1;
  swift_unknownObjectRelease();
  memcpy(v185, v200, sizeof(v185));
  v21 = swift_getObjectType();
  v22 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v11 + 24);
  outlined retain of Locale.Components(v185);
  swift_unknownObjectRetain();
  v22(v200, v21, v11);
  swift_unknownObjectRelease();
  LODWORD(v18) = LOBYTE(v200[0]);
  v23 = swift_getObjectType();
  v24 = *(uint64_t (**)(uint64_t, int64_t))(v175 + 32);
  swift_unknownObjectRetain();
  v25 = v24(v23, v175);
  v27 = v26;
  swift_unknownObjectRelease();
  memcpy(v186, v185, 0x160uLL);
  LODWORD(v175) = (_DWORD)v18;
  LOBYTE(v186[44]) = (_BYTE)v18;
  v186[45] = v25;
  v186[46] = v27;
  v186[47] = (uint64_t)v15;
  v186[48] = v16;
  v28 = one-time initialization token for cache;
  swift_bridgeObjectRetain();
  v29 = (uint64_t *)v16;
  if (v28 != -1)
    swift_once();
  v30 = (os_unfair_lock_s *)unk_1EDC47DB0;
  v167 = static ICUDateIntervalFormatter.cache;
  memcpy(v184, v186, sizeof(v184));
  swift_retain_n();
  os_unfair_lock_lock(v30 + 6);
  memcpy(v200, v184, 0x188uLL);
  v168 = v30 + 4;
  v173 = v30 + 6;
  v31 = specialized closure #1 in FormatterCache.formatter(for:creator:)((uint64_t)&v30[4], (unsigned __int8 *)v200);
  os_unfair_lock_unlock(v30 + 6);
  swift_release();
  if (v31 != 1)
    goto LABEL_77;
  v165 = v30;
  v122[1] = type metadata accessor for ICUDateIntervalFormatter();
  v163 = (uint64_t)v15;
  v164 = swift_allocObject();
  v166 = v16;
  v161 = v27;
  v162 = v25;
  v169 = v185[26];
  v170 = v185[27];
  v171 = (char *)v185[28];
  v172 = v185[29];
  v123 = v185[0];
  v124 = v185[1];
  v200[0] = v185[0];
  v200[1] = v185[1];
  v125 = v185[2];
  v126 = v185[3];
  v200[2] = v185[2];
  v200[3] = v185[3];
  v15 = &v191;
  v128 = v185[4];
  v129 = v185[5];
  v200[4] = v185[4];
  v200[5] = v185[5];
  v130 = v185[6];
  v131 = v185[7];
  v200[6] = v185[6];
  v200[7] = v185[7];
  v134 = v185[8];
  v135 = v185[9];
  v200[8] = v185[8];
  v200[9] = v185[9];
  v138 = v185[10];
  v139 = v185[11];
  v200[10] = v185[10];
  v200[11] = v185[11];
  LOBYTE(v200[12]) = v175;
  v142 = v185[14];
  v143 = v185[13];
  v200[13] = v185[13];
  v200[14] = v185[14];
  v149 = v185[15];
  v150 = v185[16];
  v200[15] = v185[15];
  v200[16] = v185[16];
  v151 = v185[17];
  v152 = v185[18];
  v200[17] = v185[17];
  v200[18] = v185[18];
  v153 = v185[19];
  v154 = v185[20];
  v200[19] = v185[19];
  v200[20] = v185[20];
  v155 = v185[21];
  v156 = v185[22];
  v200[21] = v185[21];
  v200[22] = v185[22];
  v157 = v185[23];
  v158 = v185[24];
  v200[23] = v185[23];
  v200[24] = v185[24];
  v159 = LOBYTE(v185[25]);
  LOWORD(v200[25]) = v185[25];
  v160 = BYTE1(v185[25]);
  v200[26] = v185[26];
  v200[27] = v185[27];
  v200[28] = v185[28];
  v200[29] = v185[29];
  v32 = v185[31];
  v127 = v185[30];
  v200[30] = v185[30];
  v200[31] = v185[31];
  v33 = v185[32];
  v200[32] = v185[32];
  v200[33] = v185[33];
  v132 = v185[33];
  v133 = v185[34];
  v200[34] = v185[34];
  v200[35] = v185[35];
  v136 = v185[35];
  v137 = v185[36];
  v200[36] = v185[36];
  v200[37] = v185[37];
  v140 = v185[37];
  v141 = v185[38];
  v200[38] = v185[38];
  v200[39] = v185[39];
  v144 = v185[39];
  v145 = v185[40];
  v146 = v185[41];
  v200[40] = v185[40];
  v200[41] = v185[41];
  v147 = v185[42];
  v148 = v185[43];
  v200[42] = v185[42];
  v200[43] = v185[43];
  outlined retain of Locale.Components(v185);
  outlined retain of ICUDateIntervalFormatter.Signature(v186);
  Locale.Components.icuIdentifier.getter();
  isUniquelyReferenced_nonNull_native = v34;
  swift_bridgeObjectRetain();
  v36 = specialized _copyCollectionToContiguousArray<A>(_:)(v162, v27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v37 = specialized _copyCollectionToContiguousArray<A>(_:)(v163, (unint64_t)v29);
  swift_bridgeObjectRelease();
  outlined release of ICUDateIntervalFormatter.Signature(v186);
  v178 = 0;
  if (v37[2] >> 31)
  {
    __break(1u);
    goto LABEL_36;
  }
  if (v36[2] >> 31)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v162 = v32;
  v163 = v33;
  String.utf8CString.getter();
  v29 = (uint64_t *)udtitvfmt_open();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  v31 = v164;
  v46 = v165;
  if (!v29)
    goto LABEL_23;
  *(_QWORD *)(v164 + 16) = v29;
  udtitvfmt_setAttribute();
  LODWORD(v27) = v178;
  if (v178 > 0)
  {
    if (one-time initialization token for logger != -1)
LABEL_101:
      swift_once();
    v47 = type metadata accessor for Logger();
    __swift_project_value_buffer(v47, (uint64_t)static ICUError.logger);
    v48 = Logger.logObject.getter();
    v49 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v48, v49))
    {
      v50 = swift_slowAlloc();
      v51 = swift_slowAlloc();
      *((_QWORD *)v15 + 7) = v51;
      *(_DWORD *)v50 = 136315394;
      v183[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ELL, 0x800000018230A700, v200);
      v29 = &v183[1];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v50 + 12) = 2080;
      v52 = ICUError.debugDescription.getter((UErrorCode)v27);
      v183[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v52, v53, v200);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1817D9000, v48, v49, "%s. Error: %s", (uint8_t *)v50, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x186DA9E78](v51, -1, -1);
      v54 = v50;
      v31 = v164;
      MEMORY[0x186DA9E78](v54, -1, -1);
    }

    v46 = v165;
  }
  v55 = v124;
  *((_QWORD *)v15 + 7) = v123;
  *((_QWORD *)v15 + 8) = v55;
  v56 = v126;
  *((_QWORD *)v15 + 9) = v125;
  *((_QWORD *)v15 + 10) = v56;
  v57 = v129;
  *((_QWORD *)v15 + 11) = v128;
  *((_QWORD *)v15 + 12) = v57;
  v58 = v131;
  *((_QWORD *)v15 + 13) = v130;
  *((_QWORD *)v15 + 14) = v58;
  v59 = v135;
  *((_QWORD *)v15 + 15) = v134;
  *((_QWORD *)v15 + 16) = v59;
  v60 = v139;
  *((_QWORD *)v15 + 17) = v138;
  *((_QWORD *)v15 + 18) = v60;
  LOBYTE(v200[12]) = v175;
  v61 = v142;
  *((_QWORD *)v15 + 20) = v143;
  *((_QWORD *)v15 + 21) = v61;
  v62 = v150;
  *((_QWORD *)v15 + 22) = v149;
  *((_QWORD *)v15 + 23) = v62;
  *(_DWORD *)(v15 + 153) = v180;
  HIDWORD(v200[12]) = *(_DWORD *)((char *)&v180 + 3);
  v63 = v152;
  *((_QWORD *)v15 + 24) = v151;
  *((_QWORD *)v15 + 25) = v63;
  v64 = v154;
  *((_QWORD *)v15 + 26) = v153;
  *((_QWORD *)v15 + 27) = v64;
  v65 = v156;
  *((_QWORD *)v15 + 28) = v155;
  *((_QWORD *)v15 + 29) = v65;
  v66 = v158;
  *((_QWORD *)v15 + 30) = v157;
  *((_QWORD *)v15 + 31) = v66;
  LOBYTE(v200[25]) = v159;
  BYTE1(v200[25]) = v160;
  HIWORD(v200[25]) = v182;
  *(_DWORD *)((char *)&v200[25] + 2) = v181;
  v200[26] = v169;
  v200[27] = v170;
  v200[28] = (uint64_t)v171;
  v200[29] = v172;
  v200[30] = v127;
  v200[31] = v162;
  v200[32] = v163;
  v200[33] = v132;
  v200[34] = v133;
  v200[35] = v136;
  v200[36] = v137;
  v200[37] = v140;
  v200[38] = v141;
  v200[39] = v144;
  v200[40] = v145;
  v200[41] = v146;
  v200[42] = v147;
  v200[43] = v148;
  outlined release of Locale.Components(v200);
  while (1)
  {
    swift_retain();
    os_unfair_lock_lock(v173);
    v15 = *(char **)&v46[4]._os_unfair_lock_opaque;
    memcpy(v200, v184, 0x188uLL);
    v67 = v168;
    if (v167 >= *((_QWORD *)v15 + 2))
      swift_bridgeObjectRetain();
    else
      *(_QWORD *)&v168->_os_unfair_lock_opaque = MEMORY[0x1E0DEE9E0];
    outlined retain of ICUDateIntervalFormatter.Signature(v200);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v180 = *(_QWORD *)&v67->_os_unfair_lock_opaque;
    v68 = v180;
    *(_QWORD *)&v67->_os_unfair_lock_opaque = 0x8000000000000000;
    v27 = specialized __RawDictionaryStorage.find<A>(_:)((unsigned __int8 *)v200);
    v70 = *(_QWORD *)(v68 + 16);
    v71 = (v69 & 1) == 0;
    v72 = v70 + v71;
    if (!__OFADD__(v70, v71))
      break;
LABEL_37:
    __break(1u);
    swift_once();
    v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)static ICUError.logger);
    v39 = Logger.logObject.getter();
    v40 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v39, v40))
    {

      v46 = v165;
      if (!v29)
        goto LABEL_23;
LABEL_22:
      udtitvfmt_close();
      goto LABEL_23;
    }
    v41 = swift_slowAlloc();
    v42 = swift_slowAlloc();
    *((_QWORD *)v15 + 7) = v42;
    v43 = v42;
    *(_DWORD *)v41 = 136315394;
    v183[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000016, 0x8000000182305220, v200);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v41 + 12) = 2080;
    v44 = ICUError.debugDescription.getter(isUniquelyReferenced_nonNull_native);
    v183[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v44, v45, v200);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1817D9000, v39, v40, "%s. Error: %s", (uint8_t *)v41, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x186DA9E78](v43, -1, -1);
    MEMORY[0x186DA9E78](v41, -1, -1);

    v46 = v165;
    if (v29)
      goto LABEL_22;
LABEL_23:
    v200[0] = v123;
    v200[1] = v124;
    v200[2] = v125;
    v200[3] = v126;
    v200[4] = v128;
    v200[5] = v129;
    v200[6] = v130;
    v200[7] = v131;
    v200[8] = v134;
    v200[9] = v135;
    v200[10] = v138;
    v200[11] = v139;
    LOBYTE(v200[12]) = v175;
    v200[13] = v143;
    v200[14] = v142;
    *(_DWORD *)((char *)&v200[12] + 1) = v180;
    HIDWORD(v200[12]) = *(_DWORD *)((char *)&v180 + 3);
    v200[15] = v149;
    v200[16] = v150;
    v200[17] = v151;
    v200[18] = v152;
    v200[19] = v153;
    v200[20] = v154;
    v200[21] = v155;
    v200[22] = v156;
    v200[23] = v157;
    v200[24] = v158;
    LOBYTE(v200[25]) = v159;
    BYTE1(v200[25]) = v160;
    HIWORD(v200[25]) = v182;
    *(_DWORD *)((char *)&v200[25] + 2) = v181;
    v200[26] = v169;
    v200[27] = v170;
    v200[28] = (uint64_t)v171;
    v200[29] = v172;
    v200[30] = v127;
    v200[31] = v162;
    v200[32] = v163;
    v200[33] = v132;
    v200[34] = v133;
    v200[35] = v136;
    v200[36] = v137;
    v200[37] = v140;
    v200[38] = v141;
    v200[39] = v144;
    v200[40] = v145;
    v200[41] = v146;
    v200[42] = v147;
    v200[43] = v148;
    outlined release of Locale.Components(v200);
    swift_deallocPartialClassInstance();
    v31 = 0;
  }
  v73 = v69;
  if (*(_QWORD *)(v68 + 24) < v72)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v72, isUniquelyReferenced_nonNull_native);
    v74 = v180;
    v75 = specialized __RawDictionaryStorage.find<A>(_:)((unsigned __int8 *)v200);
    if ((v73 & 1) != (v76 & 1))
      goto LABEL_104;
    v27 = v75;
    if ((v73 & 1) == 0)
    {
LABEL_75:
      specialized _NativeDictionary._insert(at:key:value:)(v27, v200, v31, (_QWORD *)v74);
      outlined retain of ICUDateIntervalFormatter.Signature(v200);
LABEL_76:
      *(_QWORD *)&v46[4]._os_unfair_lock_opaque = v74;
      swift_bridgeObjectRelease();
      outlined release of ICUDateIntervalFormatter.Signature(v200);
      os_unfair_lock_unlock(v173);
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of ICUDateIntervalFormatter??(1);
LABEL_77:
      outlined release of Locale.Components(v185);
      swift_release();
      swift_bridgeObjectRelease();
      v95 = outlined release of ICUDateIntervalFormatter.Signature(v186);
      if (!v31)
        goto LABEL_97;
      v29 = v122;
      MEMORY[0x1E0C80A78](v95);
      LODWORD(v184[0]) = 0;
      isStackAllocationSafe = udtitvfmt_format();
      if (LODWORD(v184[0]) == 15)
      {
        v97 = isStackAllocationSafe + 1;
        if (__OFADD__((_DWORD)isStackAllocationSafe, 1))
        {
          __break(1u);
LABEL_100:
          __break(1u);
          goto LABEL_101;
        }
        if (v97 < 0)
          goto LABEL_100;
        if (v97 < 513
          || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
        {
          MEMORY[0x1E0C80A78](isStackAllocationSafe);
          v99 = &v121[-v98];
          LODWORD(v183[0]) = 0;
          v100 = udtitvfmt_format();
          if (SLODWORD(v183[0]) <= 0 && v100 >= 1)
          {
            v101 = specialized String.init(_utf16:)((uint64_t)v99, v100);
            v103 = v102;
            goto LABEL_89;
          }
LABEL_96:
          swift_release();
LABEL_97:
          v108 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D68]), sel_initWithTimeIntervalSinceReferenceDate_, a4);
          v109 = objc_msgSend(v108, sel_description);

          v110 = static String._unconditionallyBridgeFromObjectiveC(_:)(v109);
          v112 = v111;

          v184[0] = v110;
          v184[1] = v112;
          v113._countAndFlagsBits = 2108704;
          v113._object = (void *)0xE300000000000000;
          String.append(_:)(v113);
          v114 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D68]), sel_initWithTimeIntervalSinceReferenceDate_, a5);
          v115 = objc_msgSend(v114, sel_description);

          v116 = static String._unconditionallyBridgeFromObjectiveC(_:)(v115);
          v118 = v117;

          v119._countAndFlagsBits = (uint64_t)v116;
          v119._object = v118;
          String.append(_:)(v119);
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          v101 = v184[0];
          v103 = v184[1];
LABEL_98:
          v184[0] = v101;
          v184[1] = v103;
          return String.init<A>(_:)();
        }
        v105 = swift_slowAlloc();
        LODWORD(v183[0]) = 0;
        v106 = udtitvfmt_format();
        if (SLODWORD(v183[0]) > 0 || v106 < 1)
        {
          MEMORY[0x186DA9E78](v105, -1, -1);
          goto LABEL_96;
        }
        v101 = specialized String.init(_utf16:)(v105, v106);
        v103 = v107;
        MEMORY[0x186DA9E78](v105, -1, -1);
      }
      else
      {
        if (SLODWORD(v184[0]) > 0 || (int)isStackAllocationSafe <= 0)
          goto LABEL_96;
        v101 = specialized String.init(_utf16:)((uint64_t)v121, isStackAllocationSafe);
        v103 = v104;
      }
LABEL_89:
      swift_release();
      if (!v103)
        goto LABEL_97;
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      goto LABEL_98;
    }
LABEL_34:
    v77 = *(_QWORD *)(v74 + 56);
    swift_release();
    *(_QWORD *)(v77 + 8 * v27) = v31;
    goto LABEL_76;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    v74 = v68;
    if ((v69 & 1) == 0)
      goto LABEL_75;
    goto LABEL_34;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUDateIntervalFormatter.Signature, ICUDateIntervalFormatter?>);
  v78 = static _DictionaryStorage.copy(original:)();
  v74 = v78;
  if (!*(_QWORD *)(v68 + 16))
  {
LABEL_74:
    swift_bridgeObjectRelease();
    if ((v73 & 1) == 0)
      goto LABEL_75;
    goto LABEL_34;
  }
  v164 = v31;
  v79 = (char *)(v78 + 64);
  v80 = 1 << *(_BYTE *)(v74 + 32);
  v171 = (char *)(v68 + 64);
  v81 = (unint64_t)(v80 + 63) >> 6;
  if (v74 != v68 || v79 >= &v171[8 * v81])
    memmove(v79, v171, 8 * v81);
  v82 = 0;
  *(_QWORD *)(v74 + 16) = *(_QWORD *)(v68 + 16);
  v83 = 1 << *(_BYTE *)(v68 + 32);
  v84 = -1;
  if (v83 < 64)
    v84 = ~(-1 << v83);
  v85 = v84 & *(_QWORD *)(v68 + 64);
  v170 = (unint64_t)(v83 + 63) >> 6;
  while (2)
  {
    v31 = v164;
    v46 = v165;
    if (v85)
    {
      v172 = (v85 - 1) & v85;
      v175 = v82;
      v86 = __clz(__rbit64(v85)) | (v82 << 6);
LABEL_46:
      v87 = 392 * v86;
      v88 = (const void *)(*(_QWORD *)(v68 + 48) + 392 * v86);
      memcpy(v183, v88, sizeof(v183));
      v89 = 8 * v86;
      v90 = *(_QWORD *)(*(_QWORD *)(v68 + 56) + 8 * v86);
      memmove((void *)(*(_QWORD *)(v74 + 48) + v87), v88, 0x188uLL);
      *(_QWORD *)(*(_QWORD *)(v74 + 56) + v89) = v90;
      outlined retain of ICUDateIntervalFormatter.Signature(v183);
      swift_retain();
      v82 = v175;
      v85 = v172;
      continue;
    }
    break;
  }
  v91 = v82 + 1;
  if (__OFADD__(v82, 1))
  {
    __break(1u);
    goto LABEL_103;
  }
  if (v91 >= v170)
    goto LABEL_74;
  v92 = *(_QWORD *)&v171[8 * v91];
  v93 = v82 + 1;
  if (v92)
    goto LABEL_73;
  v93 = v91 + 1;
  if (v91 + 1 >= v170)
    goto LABEL_74;
  v92 = *(_QWORD *)&v171[8 * v93];
  if (v92)
    goto LABEL_73;
  v93 = v91 + 2;
  if (v91 + 2 >= v170)
    goto LABEL_74;
  v92 = *(_QWORD *)&v171[8 * v93];
  if (v92)
    goto LABEL_73;
  v93 = v91 + 3;
  if (v91 + 3 >= v170)
    goto LABEL_74;
  v92 = *(_QWORD *)&v171[8 * v93];
  if (v92)
    goto LABEL_73;
  v93 = v91 + 4;
  if (v91 + 4 >= v170)
    goto LABEL_74;
  v92 = *(_QWORD *)&v171[8 * v93];
  if (v92)
    goto LABEL_73;
  v93 = v91 + 5;
  if (v91 + 5 >= v170)
    goto LABEL_74;
  v92 = *(_QWORD *)&v171[8 * v93];
  if (v92)
    goto LABEL_73;
  v93 = v91 + 6;
  if (v91 + 6 >= v170)
    goto LABEL_74;
  v92 = *(_QWORD *)&v171[8 * v93];
  if (v92)
    goto LABEL_73;
  v93 = v91 + 7;
  if (v91 + 7 >= v170)
    goto LABEL_74;
  v92 = *(_QWORD *)&v171[8 * v93];
  if (v92)
    goto LABEL_73;
  v93 = v91 + 8;
  if (v91 + 8 >= v170)
    goto LABEL_74;
  v92 = *(_QWORD *)&v171[8 * v93];
  if (v92)
  {
LABEL_73:
    v172 = (v92 - 1) & v92;
    v175 = v93;
    v86 = __clz(__rbit64(v92)) + (v93 << 6);
    goto LABEL_46;
  }
  v94 = v91 + 9;
  if (v94 >= v170)
    goto LABEL_74;
  v92 = *(_QWORD *)&v171[8 * v94];
  if (v92)
  {
    v93 = v94;
    goto LABEL_73;
  }
  while (1)
  {
    v93 = v94 + 1;
    if (__OFADD__(v94, 1))
      break;
    v31 = v164;
    v46 = v165;
    if (v93 >= v170)
      goto LABEL_74;
    v92 = *(_QWORD *)&v171[8 * v93];
    ++v94;
    if (v92)
      goto LABEL_73;
  }
LABEL_103:
  __break(1u);
LABEL_104:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  char *v6;
  __int128 v7[8];
  _OWORD v8[27];
  _OWORD v9[3];

  v3 = a3[5];
  v8[25] = a3[4];
  v8[26] = v3;
  v9[0] = a3[6];
  *(_OWORD *)((char *)v9 + 10) = *(__int128 *)((char *)a3 + 106);
  v4 = a3[1];
  v8[21] = *a3;
  v8[22] = v4;
  v5 = a3[3];
  v8[23] = a3[2];
  v8[24] = v5;
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(a3, v7);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v7, v8);
  v6 = (char *)sub_181D21524
     + 4
     * algn_1821509C7[_sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOg((uint64_t)v8)];
  __asm { BR              X10 }
}

uint64_t sub_181D21524()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  char v9;
  char v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  Swift::String v19;
  __int128 v21;
  __int128 v22;
  char v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27[2];
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  char v37;
  char v38;
  Swift::String v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v5 = _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_((uint64_t)&v40);
  v25 = *(_OWORD *)(v5 + 16);
  v26 = *(_OWORD *)v5;
  v6 = *(_QWORD *)(v5 + 40);
  v24 = *(_QWORD *)(v5 + 32);
  v7 = *(_WORD *)(v5 + 48);
  v8 = *(_QWORD *)(v5 + 56);
  v9 = *(_BYTE *)(v5 + 64);
  v4[33] = *(_OWORD *)(v5 + 65);
  *(_QWORD *)(v3 + 15) = *(_QWORD *)(v5 + 80);
  v23 = *(_BYTE *)(v5 + 120);
  v10 = *(_BYTE *)(v5 + 121) & 1;
  *(_OWORD *)(v3 + 64) = *(_OWORD *)(v3 + 7);
  v21 = *(_OWORD *)(v5 + 104);
  v22 = *(_OWORD *)(v5 + 88);
  outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle(v2, outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
  swift_unknownObjectRetain();
  outlined release of Locale((uint64_t)&v41);
  v27[0] = v26;
  v27[1] = v25;
  v28 = v24;
  v29 = v6;
  v30 = v7;
  v31 = v8;
  v32 = v9 & 1;
  v33 = v1;
  v34 = v0;
  v35 = v22;
  v36 = v21;
  v37 = v23;
  v38 = v10;
  _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi_((uint64_t)v27);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v27, &v39);
  v11 = v4[4];
  v12 = v4[5];
  v4[12] = v11;
  v4[13] = v12;
  v13 = v4[6];
  v4[14] = v13;
  v14 = *(__int128 *)((char *)v4 + 106);
  *(__int128 *)((char *)v4 + 234) = v14;
  v15 = *v4;
  v16 = v4[1];
  v4[8] = *v4;
  v4[9] = v16;
  v17 = v4[2];
  v18 = v4[3];
  v4[10] = v17;
  v4[11] = v18;
  *(_OWORD *)(v3 + 186) = v14;
  *(_OWORD *)(v3 + 160) = v12;
  *(_OWORD *)(v3 + 176) = v13;
  *(_OWORD *)(v3 + 128) = v18;
  *(_OWORD *)(v3 + 144) = v11;
  *(_OWORD *)(v3 + 96) = v16;
  *(_OWORD *)(v3 + 112) = v17;
  *(_OWORD *)(v3 + 80) = v15;
  v19 = String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.format(_:)((Foundation::Date)v11);
  outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)&v42, outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
  v39 = v19;
  return String.init<A>(_:)();
}

uint64_t specialized closure #2 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v26[4];
  _QWORD v27[2];
  int v28;
  uint64_t v29;

  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(0);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Any(a1 + 64, (uint64_t)v27);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Sendable);
  v17 = swift_dynamicCast();
  v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
  if (v17)
  {
    v18(v12, 0, 1, v13);
    outlined init with take of ICUNumberFormatter.Signature((uint64_t)v12, (uint64_t)v16, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle);
    v19 = specialized static String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.== infix(_:_:)(a2, (uint64_t)v16);
    outlined destroy of ICUNumberFormatter.Signature((uint64_t)v16, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle);
    v20 = 0;
    if ((v19 & 1) == 0)
      return v20 & 1;
  }
  else
  {
    v18(v12, 1, 1, v13);
    outlined destroy of Any?((uint64_t)v12, &demangling cache variable for type metadata for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle?);
  }
  type metadata accessor for NSDecimal(0);
  v29 = v21;
  v27[0] = a3;
  v27[1] = a4;
  v28 = a5;
  v22 = *(_QWORD *)(a1 + 56);
  v23 = __swift_project_boxed_opaque_existential_1((_QWORD *)(a1 + 32), v22);
  v26[3] = v22;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v26);
  (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(boxed_opaque_existential_1, v23, v22);
  v20 = specialized static String.LocalizationValue.FormatArgument.Storage._equalValues(_:_:)((uint64_t)v27, (uint64_t)v26);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  return v20 & 1;
}

uint64_t specialized closure #2 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int v13;
  void (*v14)(char *, uint64_t, uint64_t, uint64_t);
  char v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v22[4];
  _QWORD v23[4];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Any(a1 + 64, (uint64_t)v23);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Sendable);
  v13 = swift_dynamicCast();
  v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  if (v13)
  {
    v14(v8, 0, 1, v9);
    outlined init with take of ICUNumberFormatter.Signature((uint64_t)v8, (uint64_t)v12, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle);
    v15 = specialized static String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.== infix(_:_:)(a2, (uint64_t)v12);
    outlined destroy of ICUNumberFormatter.Signature((uint64_t)v12, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle);
    v16 = 0;
    if ((v15 & 1) == 0)
      return v16 & 1;
  }
  else
  {
    v14(v8, 1, 1, v9);
    outlined destroy of Any?((uint64_t)v8, &demangling cache variable for type metadata for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle?);
  }
  v23[3] = MEMORY[0x1E0DEB070];
  *(double *)v23 = a3;
  v17 = (_QWORD *)(a1 + 32);
  v18 = *(_QWORD *)(a1 + 56);
  v19 = __swift_project_boxed_opaque_existential_1(v17, v18);
  v22[3] = v18;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v22);
  (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(boxed_opaque_existential_1, v19, v18);
  v16 = specialized static String.LocalizationValue.FormatArgument.Storage._equalValues(_:_:)((uint64_t)v23, (uint64_t)v22);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  return v16 & 1;
}

uint64_t specialized closure #2 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int v13;
  void (*v14)(char *, uint64_t, uint64_t, uint64_t);
  char v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v22[4];
  _QWORD v23[4];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Any(a1 + 64, (uint64_t)v23);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Sendable);
  v13 = swift_dynamicCast();
  v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  if (v13)
  {
    v14(v8, 0, 1, v9);
    outlined init with take of ICUNumberFormatter.Signature((uint64_t)v8, (uint64_t)v12, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle);
    v15 = specialized static String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.== infix(_:_:)(a2, (uint64_t)v12);
    outlined destroy of ICUNumberFormatter.Signature((uint64_t)v12, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle);
    v16 = 0;
    if ((v15 & 1) == 0)
      return v16 & 1;
  }
  else
  {
    v14(v8, 1, 1, v9);
    outlined destroy of Any?((uint64_t)v8, &demangling cache variable for type metadata for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle?);
  }
  v23[3] = MEMORY[0x1E0DEB418];
  v23[0] = a3;
  v17 = (_QWORD *)(a1 + 32);
  v18 = *(_QWORD *)(a1 + 56);
  v19 = __swift_project_boxed_opaque_existential_1(v17, v18);
  v22[3] = v18;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v22);
  (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(boxed_opaque_existential_1, v19, v18);
  v16 = specialized static String.LocalizationValue.FormatArgument.Storage._equalValues(_:_:)((uint64_t)v23, (uint64_t)v22);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  return v16 & 1;
}

uint64_t specialized closure #2 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *boxed_opaque_existential_1;
  char v15;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  int v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  _BYTE v31[32];
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  __int16 v41;
  int v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  __int128 v46[6];
  __int16 v47;

  v7 = *(_OWORD *)(a2 + 80);
  v46[4] = *(_OWORD *)(a2 + 64);
  v46[5] = v7;
  v47 = *(_WORD *)(a2 + 96);
  v8 = *(_OWORD *)(a2 + 16);
  v46[0] = *(_OWORD *)a2;
  v46[1] = v8;
  v9 = *(_OWORD *)(a2 + 48);
  v46[2] = *(_OWORD *)(a2 + 32);
  v46[3] = v9;
  outlined init with copy of Any(a1 + 64, (uint64_t)v31);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Sendable);
  if (!swift_dynamicCast())
    goto LABEL_4;
  if (!(_QWORD)v17)
    goto LABEL_4;
  v32 = v17;
  v33 = v18;
  v34 = v19;
  v35 = v20;
  v36 = v21;
  v37 = v22;
  v38 = v23;
  v39 = v24;
  v40 = v25;
  v41 = v26 & 0x1FF;
  v42 = v27;
  v43 = v28;
  v44 = v29;
  v45 = v30;
  v10 = specialized static Date.IntervalFormatStyle.== infix(_:_:)(v46, &v32);
  outlined consume of Date.IntervalFormatStyle?(v17);
  if (!v10)
  {
    v15 = 0;
  }
  else
  {
LABEL_4:
    v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Date>);
    *(double *)&v32 = a3;
    *((double *)&v32 + 1) = a4;
    v11 = (_QWORD *)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 56);
    v13 = __swift_project_boxed_opaque_existential_1(v11, v12);
    v19 = v12;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v17);
    (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(boxed_opaque_existential_1, v13, v12);
    v15 = specialized static String.LocalizationValue.FormatArgument.Storage._equalValues(_:_:)((uint64_t)&v32, (uint64_t)&v17);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v32);
  }
  return v15 & 1;
}

uint64_t specialized closure #2 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(uint64_t a1, __int128 *a2, double a3)
{
  uint64_t v6;
  char v7;
  char v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *boxed_opaque_existential_1;
  char v13;
  __int128 v15[8];
  __int128 v16[8];
  __int128 v17[8];
  _BYTE v18[128];
  uint64_t v19[16];
  _QWORD v20[16];
  _BYTE v21[32];
  __int128 v22[8];

  outlined init with copy of Any(a1 + 64, (uint64_t)v21);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Sendable);
  if (!swift_dynamicCast())
    goto LABEL_4;
  destructiveProjectEnumData for PredicateCodableError(v20, v6);
  outlined init with take of LocalePreferences?((uint64_t)v20, (uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle?);
  outlined init with take of LocalePreferences?((uint64_t)v18, (uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle?);
  if (_sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleVSgWOg((uint64_t)v19) == 1
    || (outlined init with take of LocalePreferences?((uint64_t)v18, (uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle?), outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(a2, v22), outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v22, v16), outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v17, v15), specialized static String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.== infix(_:_:)(v16, v15), v8 = v7, outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v18, outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle?), (v8 & 1) != 0))
  {
LABEL_4:
    v20[3] = &type metadata for Date;
    *(double *)v20 = a3;
    v9 = (_QWORD *)(a1 + 32);
    v10 = *(_QWORD *)(a1 + 56);
    v11 = __swift_project_boxed_opaque_existential_1(v9, v10);
    v19[3] = v10;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v19);
    (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(boxed_opaque_existential_1, v11, v10);
    v13 = specialized static String.LocalizationValue.FormatArgument.Storage._equalValues(_:_:)((uint64_t)v20, (uint64_t)v19);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    v13 = 0;
  }
  return v13 & 1;
}

BOOL static String.LocalizationValue.Placeholder.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void specialized String.LocalizationValue.FormatArgument.resolve<A>(attributed:with:including:)()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v2[392];

  v1 = swift_allocObject();
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_BYTE *)(v1 + 32) = -2;
  outlined init with copy of String.LocalizationValue.FormatArgument.Storage(v0, (uint64_t)v2);
  __asm { BR              X10 }
}

uint64_t sub_181D221E0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  __int128 v5;
  uint64_t v6;

  outlined init with take of Any(&v5, (_OWORD *)(v3 - 240));
  outlined init with copy of Any(v3 - 240, (uint64_t)&v6);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Sendable);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg);
  swift_dynamicCast();
  getter of attributeFixup #1 in String.LocalizationValue.FormatArgument.resolve<A>(attributed:with:including:)(v0, v2 & 1, v1);
  __swift_destroy_boxed_opaque_existential_1(v3 - 240);
  return swift_release();
}

void sub_181D22D58()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  JUMPOUT(0x181D22DA4);
}

uint64_t AttributedString.init<A>(localized:including:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, void *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t result;
  __int128 v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v6 = a1[3];
  v7 = a1[4];
  v8 = a1[9];
  v19 = *a1;
  v20 = *(_OWORD *)(a1 + 1);
  v21 = v6;
  v22 = v7;
  v9 = *(_OWORD *)(a1 + 7);
  v23 = *(_OWORD *)(a1 + 5);
  v24 = v9;
  v25 = v8;
  v10 = *((_OWORD *)a1 + 6);
  v26 = *((_OWORD *)a1 + 5);
  v27 = v10;
  v12 = 0uLL;
  v13 = 1;
  v14 = 0;
  v15 = 256;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  result = AttributedString.init<A>(localized:options:including:)((__int128 *)&v19, &v12, a2, a3, a4, &v28);
  *a5 = v28;
  return result;
}

void *String.init(localized:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;

  v1 = a1[3];
  v2 = a1[4];
  v3 = a1[9];
  v11 = *a1;
  v12 = *(_OWORD *)(a1 + 1);
  v13 = v1;
  v14 = v2;
  v15 = *(_OWORD *)(a1 + 5);
  v16 = *(_OWORD *)(a1 + 7);
  v17 = v3;
  v4 = *((_OWORD *)a1 + 6);
  v18 = *((_OWORD *)a1 + 5);
  v19 = v4;
  v6 = 0uLL;
  v7 = 256;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  return specialized String.init(localized:options:)((__int128 *)&v11, &v6);
}

uint64_t *specialized PropertyListEncoder._encodeBPlist<A>(_:)(_OWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _OWORD *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  Swift::String v17;
  Swift::String v18;
  unint64_t v19;
  const char *v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _OWORD *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  Swift::String v29;
  Swift::String v30;
  unint64_t v31;
  const char *v32;
  unint64_t v33;
  BOOL v34;
  BOOL v35;
  _QWORD *v36;
  _OWORD *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  Swift::String v41;
  Swift::String v42;
  unint64_t v43;
  uint64_t v45;
  uint64_t *v46;
  _QWORD *v47;
  _OWORD *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  Swift::String v52;
  Swift::String v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;

  v4 = specialized PropertyListEncoder.encodeToTopLevelContainerBPlist<A>(_:)(a1);
  if (!v2)
  {
    v5 = (uint64_t)v4;
    v6 = *((unsigned __int8 *)v4 + 40);
    v7 = *((_QWORD *)v4 + 2);
    v8 = *((_QWORD *)v4 + 3);
    v9 = *((_QWORD *)v4 + 4);
    switch(v6 >> 4)
    {
      case 0u:
        goto LABEL_18;
      case 1u:
      case 2u:
      case 3u:
      case 4u:
        v10 = type metadata accessor for EncodingError();
        swift_allocError();
        v12 = v11;
        v59 = (char *)v11
            + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Any, EncodingError.Context))
                     + 48);
        v12[3] = &type metadata for LocalizedStringResource;
        v13 = (_OWORD *)swift_allocObject();
        *v12 = v13;
        v14 = a1[1];
        v13[1] = *a1;
        v13[2] = v14;
        v15 = a1[3];
        v13[3] = a1[2];
        v13[4] = v15;
        v16 = a1[5];
        v13[5] = a1[4];
        v13[6] = v16;
        v13[7] = a1[6];
        v54 = 0;
        v55 = 0xE000000000000000;
        outlined retain of LocalizedStringResource((uint64_t)a1);
        outlined copy of _BPlistEncodingFormat.Reference.Backing(v7, v8, v9, v6);
        _StringGuts.grow(_:)(54);
        v17._countAndFlagsBits = 0x6576656C2D706F54;
        v17._object = (void *)0xEA0000000000206CLL;
        String.append(_:)(v17);
        v18._object = (void *)0x8000000182151610;
        v18._countAndFlagsBits = 0xD000000000000017;
        String.append(_:)(v18);
        v19 = 0xD00000000000002ALL;
        v20 = " encoded as number property list fragment.";
        goto LABEL_4;
      case 7u:
        v22 = type metadata accessor for EncodingError();
        swift_allocError();
        v24 = v23;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Any, EncodingError.Context));
        v24[3] = &type metadata for LocalizedStringResource;
        v25 = (_OWORD *)swift_allocObject();
        *v24 = v25;
        v26 = a1[1];
        v25[1] = *a1;
        v25[2] = v26;
        v27 = a1[3];
        v25[3] = a1[2];
        v25[4] = v27;
        v28 = a1[5];
        v25[5] = a1[4];
        v25[6] = v28;
        v25[7] = a1[6];
        v54 = 0;
        v55 = 0xE000000000000000;
        outlined retain of LocalizedStringResource((uint64_t)a1);
        _StringGuts.grow(_:)(52);
        v29._countAndFlagsBits = 0x6576656C2D706F54;
        v29._object = (void *)0xEA0000000000206CLL;
        String.append(_:)(v29);
        v30._object = (void *)0x8000000182151610;
        v30._countAndFlagsBits = 0xD000000000000017;
        String.append(_:)(v30);
        v31 = 0xD000000000000028;
        v32 = " encoded as date property list fragment.";
        goto LABEL_19;
      case 9u:
        v33 = v9 | v8;
        if (!(v9 | v8 | v7) && v6 == 144
          || (v6 == 144 ? (v34 = v7 == 1) : (v34 = 0), v34 ? (v35 = v33 == 0) : (v35 = 0), v35))
        {
          v10 = type metadata accessor for EncodingError();
          swift_allocError();
          v12 = v47;
          v59 = (char *)v47
              + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Any, EncodingError.Context))
                       + 48);
          v12[3] = &type metadata for LocalizedStringResource;
          v48 = (_OWORD *)swift_allocObject();
          *v12 = v48;
          v49 = a1[1];
          v48[1] = *a1;
          v48[2] = v49;
          v50 = a1[3];
          v48[3] = a1[2];
          v48[4] = v50;
          v51 = a1[5];
          v48[5] = a1[4];
          v48[6] = v51;
          v48[7] = a1[6];
          v54 = 0;
          v55 = 0xE000000000000000;
          outlined retain of LocalizedStringResource((uint64_t)a1);
          outlined copy of _BPlistEncodingFormat.Reference.Backing(v7, v8, v9, v6);
          _StringGuts.grow(_:)(55);
          v52._countAndFlagsBits = 0x6576656C2D706F54;
          v52._object = (void *)0xEA0000000000206CLL;
          String.append(_:)(v52);
          v53._object = (void *)0x8000000182151610;
          v53._countAndFlagsBits = 0xD000000000000017;
          String.append(_:)(v53);
          v19 = 0xD00000000000002BLL;
          v20 = " encoded as BOOLean property list fragment.";
LABEL_4:
          v21 = (unint64_t)(v20 - 32) | 0x8000000000000000;
          v1 = &v54;
          String.append(_:)(*(Swift::String *)&v19);
          DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
          (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v12, *MEMORY[0x1E0DEC4B0], v10);
          goto LABEL_20;
        }
        if (v6 == 144 && v7 == 2 && !v33)
        {
LABEL_18:
          v22 = type metadata accessor for EncodingError();
          swift_allocError();
          v24 = v36;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Any, EncodingError.Context));
          v24[3] = &type metadata for LocalizedStringResource;
          v37 = (_OWORD *)swift_allocObject();
          *v24 = v37;
          v38 = a1[1];
          v37[1] = *a1;
          v37[2] = v38;
          v39 = a1[3];
          v37[3] = a1[2];
          v37[4] = v39;
          v40 = a1[5];
          v37[5] = a1[4];
          v37[6] = v40;
          v37[7] = a1[6];
          v54 = 0;
          v55 = 0xE000000000000000;
          outlined retain of LocalizedStringResource((uint64_t)a1);
          _StringGuts.grow(_:)(54);
          v41._countAndFlagsBits = 0x6576656C2D706F54;
          v41._object = (void *)0xEA0000000000206CLL;
          String.append(_:)(v41);
          v42._object = (void *)0x8000000182151610;
          v42._countAndFlagsBits = 0xD000000000000017;
          String.append(_:)(v42);
          v31 = 0xD00000000000002ALL;
          v32 = " encoded as string property list fragment.";
LABEL_19:
          v43 = (unint64_t)(v32 - 32) | 0x8000000000000000;
          v1 = &v54;
          String.append(_:)(*(Swift::String *)&v31);
          DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
          (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v24, *MEMORY[0x1E0DEC4B0], v22);
LABEL_20:
          swift_willThrow();
          swift_release();
          return v1;
        }
LABEL_22:
        v45 = swift_slowAlloc();
        v54 = MEMORY[0x1E0DEE9D8];
        LOBYTE(v55) = 0;
        v56 = v45;
        v57 = 0x2000;
        v58 = 0;
        _BPlistEncodingFormat.Writer.serializePlist(_:)(v5);
        v1 = v46;
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation(0, 0xC000000000000000);
        swift_release();
        break;
      default:
        goto LABEL_22;
    }
  }
  return v1;
}

_OWORD *specialized PropertyListEncoder.encodeToTopLevelContainerBPlist<A>(_:)(_OWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _QWORD v22[4];
  _OWORD v23[7];
  _OWORD v24[2];
  uint64_t v25;

  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  type metadata accessor for __PlistEncoderBPlist();
  v6 = swift_allocObject();
  v7 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v6 + 24) = v5;
  *(_QWORD *)(v6 + 32) = v4;
  *(_QWORD *)(v6 + 16) = v7;
  *(_OWORD *)(v6 + 40) = xmmword_182068780;
  specialized _BPlistEncodingFormat.init()((uint64_t *)v24);
  v8 = v24[1];
  *(_OWORD *)(v6 + 56) = v24[0];
  *(_OWORD *)(v6 + 72) = v8;
  *(_QWORD *)(v6 + 88) = v25;
  v9 = a1[5];
  v23[4] = a1[4];
  v23[5] = v9;
  v23[6] = a1[6];
  v10 = a1[1];
  v23[0] = *a1;
  v23[1] = v10;
  v11 = a1[3];
  v23[2] = a1[2];
  v23[3] = v11;
  v22[2] = v23;
  swift_bridgeObjectRetain();
  v12 = (_OWORD *)v6;
  v13 = specialized __PlistEncoderBPlist._wrapGeneric<A>(_:for:_:)((void (*)(_QWORD *))partial apply for specialized closure #1 in __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:), (uint64_t)v22, 0x8000000000000000, 0, 0, 0, 255);
  if (!v2)
  {
    v12 = (_OWORD *)v13;
    if (!v13)
    {
      v15 = type metadata accessor for EncodingError();
      swift_allocError();
      v17 = v16;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Any, EncodingError.Context));
      v17[3] = &type metadata for LocalizedStringResource;
      v18 = (_OWORD *)swift_allocObject();
      *v17 = v18;
      v19 = a1[1];
      v18[1] = *a1;
      v18[2] = v19;
      v20 = a1[3];
      v18[3] = a1[2];
      v18[4] = v20;
      v21 = a1[5];
      v18[5] = a1[4];
      v18[6] = v21;
      v18[7] = a1[6];
      *(_QWORD *)&v23[0] = 0;
      *((_QWORD *)&v23[0] + 1) = 0xE000000000000000;
      outlined retain of LocalizedStringResource((uint64_t)a1);
      v12 = v23;
      _StringGuts.grow(_:)(39);
      swift_bridgeObjectRelease();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v17, *MEMORY[0x1E0DEC4B0], v15);
      swift_willThrow();
    }
  }
  swift_release();
  return v12;
}

uint64_t specialized AttributedString.subscript.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v21;
  __int128 v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _BYTE v28[48];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _OWORD v37[4];

  v2 = v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v4 = *(_QWORD **)v1;
    v5 = *(_OWORD *)(*(_QWORD *)v1 + 16);
    v6 = *(_OWORD *)(*(_QWORD *)v1 + 48);
    v37[1] = *(_OWORD *)(*(_QWORD *)v1 + 32);
    v37[2] = v6;
    v37[0] = v5;
    v7 = v4[8];
    v8 = v4[9];
    v9 = v4[10];
    v10 = v4[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v37);
    swift_unknownObjectRetain();
    *(_QWORD *)v2 = AttributedString.Guts.init(string:runs:)(v37, v7, v8, v9, v10);
    swift_release();
  }
  if (a1)
  {
    v11 = *(_OWORD **)v2;
    v12 = v11[2];
    v34 = v11[1];
    v35 = v12;
    v36 = v11[3];
    *(_QWORD *)&v29 = BigString.startIndex.getter();
    *((_QWORD *)&v29 + 1) = v13;
    *(_QWORD *)&v30 = v14;
    *((_QWORD *)&v30 + 1) = v15;
    *(_QWORD *)&v31 = BigString.endIndex.getter();
    *((_QWORD *)&v31 + 1) = v16;
    v32 = v17;
    v33 = v18;
    v19 = swift_retain();
    specialized AttributedString.Guts.setAttributeValue<A>(_:forKey:in:)(v19);
    return swift_release_n();
  }
  else
  {
    v21 = *(_OWORD **)v2;
    v22 = *(_OWORD *)(*(_QWORD *)v2 + 32);
    v29 = *(_OWORD *)(*(_QWORD *)v2 + 16);
    v30 = v22;
    v31 = v21[3];
    BigString.startIndex.getter();
    BigString.endIndex.getter();
    BigString.unicodeScalars.getter();
    v23 = BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)&v27);
    v24 = v21[2];
    v34 = v21[1];
    v35 = v24;
    v36 = v21[3];
    BigString.unicodeScalars.getter();
    v25 = BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v28);
    v26 = (_QWORD *)swift_retain();
    specialized AttributedString._InternalRunsSlice.updateEach(with:)(v26, v23 >> 11, (_QWORD *)(v25 >> 11));
    return swift_release();
  }
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 v24;
  unint64_t v25;
  __int128 v26;
  unint64_t v27;
  _QWORD *v28;
  _OWORD *v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[48];
  _QWORD v55[8];
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  _BYTE v62[112];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  _OWORD v79[3];
  _OWORD v80[4];

  v2 = v1;
  outlined init with take of LocalePreferences?(a1, (uint64_t)v55, &demangling cache variable for type metadata for AttributedString.MarkdownSourcePosition?);
  v4 = v55[0];
  v5 = v55[1];
  v52 = v55[3];
  v53 = v55[2];
  v50 = v55[5];
  v51 = v55[4];
  v6 = v56;
  v48 = v55[7];
  v49 = v55[6];
  v7 = v57;
  v8 = v58;
  v9 = v59;
  v10 = v60;
  v11 = v61;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v12 = *(_QWORD **)v2;
    v13 = *(_OWORD *)(*(_QWORD *)v2 + 16);
    v14 = *(_OWORD *)(*(_QWORD *)v2 + 48);
    v80[1] = *(_OWORD *)(*(_QWORD *)v2 + 32);
    v80[2] = v14;
    v80[0] = v13;
    v46 = v10;
    v47 = v7;
    v44 = v9;
    v45 = v8;
    v15 = v12[8];
    v16 = v12[9];
    v17 = v12[10];
    v18 = v12[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v80);
    swift_unknownObjectRetain();
    v19 = v16;
    v20 = v17;
    v9 = v44;
    v8 = v45;
    v21 = v18;
    v10 = v46;
    v22 = AttributedString.Guts.init(string:runs:)(v80, v15, v19, v20, v21);
    v7 = v47;
    *(_QWORD *)v2 = v22;
    swift_release();
  }
  outlined init with take of LocalePreferences?(a1, (uint64_t)v62, &demangling cache variable for type metadata for AttributedString.MarkdownSourcePosition?);
  if ((v62[105] & 1) != 0)
  {
    v23 = *(_OWORD **)v2;
    v24 = v23[2];
    v63 = v23[1];
    v64 = v24;
    v65 = v23[3];
    BigString.startIndex.getter();
    BigString.endIndex.getter();
    BigString.unicodeScalars.getter();
    v25 = BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v54);
    v26 = v23[2];
    v74 = v23[1];
    v75 = v26;
    v76 = v23[3];
    BigString.unicodeScalars.getter();
    v27 = BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v79);
    v28 = (_QWORD *)swift_retain();
    specialized AttributedString._InternalRunsSlice.updateEach(with:)(v28, v25 >> 11, (_QWORD *)(v27 >> 11));
    return swift_release();
  }
  else
  {
    *(_QWORD *)&v63 = v4;
    *((_QWORD *)&v63 + 1) = v5;
    *(_QWORD *)&v64 = v53;
    *((_QWORD *)&v64 + 1) = v52;
    *(_QWORD *)&v65 = v51;
    *((_QWORD *)&v65 + 1) = v50;
    v66 = v49;
    v67 = v48;
    v68 = v6 & 1;
    v69 = v7;
    v70 = v8;
    v71 = v9;
    v72 = v10;
    v73 = v11 & 1;
    v30 = *(_OWORD **)v2;
    v31 = v30[1];
    v32 = v30[3];
    v79[1] = v30[2];
    v79[2] = v32;
    v79[0] = v31;
    v33 = BigString.startIndex.getter();
    v35 = v34;
    v37 = v36;
    v39 = v38;
    v40 = BigString.endIndex.getter();
    *(_QWORD *)&v74 = v33;
    *((_QWORD *)&v74 + 1) = v35;
    *(_QWORD *)&v75 = v37;
    *((_QWORD *)&v75 + 1) = v39;
    *(_QWORD *)&v76 = v40;
    *((_QWORD *)&v76 + 1) = v41;
    v77 = v42;
    v78 = v43;
    return specialized AttributedString.Guts.setAttributeValue<A>(_:forKey:in:)(&v63);
  }
}

uint64_t specialized AttributedString.subscript.setter(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  _QWORD *v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  _QWORD *v26;
  char v27[48];
  char v28[48];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _OWORD v37[4];

  v3 = v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v6 = (_QWORD *)*v2;
    v7 = *(_OWORD *)(*v2 + 16);
    v8 = *(_OWORD *)(*v2 + 48);
    v37[1] = *(_OWORD *)(*v2 + 32);
    v37[2] = v8;
    v37[0] = v7;
    v9 = v6[8];
    v10 = v6[9];
    v11 = v6[10];
    v12 = v6[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v37);
    swift_unknownObjectRetain();
    *v3 = AttributedString.Guts.init(string:runs:)(v37, v9, v10, v11, v12);
    swift_release();
  }
  v13 = (_OWORD *)*v3;
  v14 = v13 + 1;
  v15 = v13[2];
  if ((a2 & 1) != 0)
  {
    v29 = *v14;
    v30 = v15;
    v31 = v13[3];
    BigString.startIndex.getter();
    BigString.endIndex.getter();
    BigString.unicodeScalars.getter();
    v23 = BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v27);
    v24 = v13[2];
    v34 = *v14;
    v35 = v24;
    v36 = v13[3];
    BigString.unicodeScalars.getter();
    v25 = BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v28);
    v26 = (_QWORD *)swift_retain();
    specialized AttributedString._InternalRunsSlice.updateEach(with:)(v26, v23 >> 11, v25 >> 11);
    return swift_release();
  }
  else
  {
    v34 = *v14;
    v35 = v15;
    v36 = v13[3];
    *(_QWORD *)&v29 = BigString.startIndex.getter();
    *((_QWORD *)&v29 + 1) = v16;
    *(_QWORD *)&v30 = v17;
    *((_QWORD *)&v30 + 1) = v18;
    *(_QWORD *)&v31 = BigString.endIndex.getter();
    *((_QWORD *)&v31 + 1) = v19;
    v32 = v20;
    v33 = v21;
    return specialized AttributedString.Guts.setAttributeValue<A>(_:forKey:in:)(a1);
  }
}

uint64_t specialized AttributedString.subscript.setter(char a1)
{
  uint64_t *v1;
  uint64_t *v2;
  _QWORD *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 *v12;
  __int128 v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  _QWORD *v17;
  char v19[48];
  char v20[48];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _OWORD v27[4];

  v2 = v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v4 = (_QWORD *)*v1;
    v5 = *(_OWORD *)(*v1 + 16);
    v6 = *(_OWORD *)(*v1 + 48);
    v27[1] = *(_OWORD *)(*v1 + 32);
    v27[2] = v6;
    v27[0] = v5;
    v7 = v4[8];
    v8 = v4[9];
    v9 = v4[10];
    v10 = v4[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v27);
    swift_unknownObjectRetain();
    *v2 = AttributedString.Guts.init(string:runs:)(v27, v7, v8, v9, v10);
    swift_release();
  }
  v11 = (_OWORD *)*v2;
  v12 = v11 + 1;
  v13 = v11[2];
  if (a1 == 8)
  {
    v21 = *v12;
    v22 = v13;
    v23 = v11[3];
    BigString.startIndex.getter();
    BigString.endIndex.getter();
    BigString.unicodeScalars.getter();
    v14 = BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v19);
    v15 = v11[2];
    v24 = *v12;
    v25 = v15;
    v26 = v11[3];
    BigString.unicodeScalars.getter();
    v16 = BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v20);
    v17 = (_QWORD *)swift_retain();
    specialized AttributedString._InternalRunsSlice.updateEach(with:)(v17, v14 >> 11, v16 >> 11);
    return swift_release();
  }
  else
  {
    BigString.startIndex.getter();
    BigString.endIndex.getter();
    return specialized AttributedString.Guts.setAttributeValue<A>(_:forKey:in:)(a1);
  }
}

unint64_t specialized BufferView.subscript.getter(unint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 + a3 < result)
  {
    __break(1u);
    goto LABEL_6;
  }
  if ((uint64_t)(result - a2) < 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if ((uint64_t)(a2 + a3 - result) < 0)
LABEL_7:
    __break(1u);
  return result;
}

uint64_t specialized closure #1 in PropertyListDecoder.decode<A>(_:from:format:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(ValueMetadata *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v4;

  v1 = a1[3];
  v2 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v1);
  v3 = *(uint64_t (**)(ValueMetadata *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v2 + 8);
  v4 = lazy protocol witness table accessor for type LocalizedStringResource and conformance LocalizedStringResource();
  return v3(&type metadata for LocalizedStringResource, &type metadata for LocalizedStringResource, v4, v1, v2);
}

void specialized closure #1 in PropertyListDecoder._decode<A>(_:from:format:)(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t *__return_ptr, _QWORD *)@<X3>, _QWORD *a5@<X5>, uint64_t a6@<X8>)
{
  void *v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t inited;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t *v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  _QWORD v48[5];
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  id v58;

  v11 = specialized static BPlistScanner.scanBinaryPropertyList(from:)(a1, a2);
  if (!v6)
  {
    v12 = v11;
    v13 = *(_QWORD *)(a3 + 16);
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _PlistDecoder<_BPlistDecodingFormat>);
    swift_allocObject();
    swift_bridgeObjectRetain();
    v48[3] = v14;
    v48[4] = &protocol witness table for _PlistDecoder<A>;
    v48[0] = specialized _PlistDecoder.init(referencing:options:codingPathNode:)(v12, v13, 0x8000000000000000);
    swift_retain();
    a4(&v49, v48);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    swift_retain();
    specialized _PlistDecoder.takeOwnershipOfBackingDataIfNeeded(selfIsUniquelyReferenced:)(isUniquelyReferenced_nonNull_native);
    swift_release_n();
    *a5 = 200;
    v43 = v51;
    v44 = v52;
    v45 = v55;
    *(_QWORD *)a6 = v49;
    *(_OWORD *)(a6 + 8) = v50;
    *(_QWORD *)(a6 + 24) = v43;
    *(_QWORD *)(a6 + 32) = v44;
    *(_OWORD *)(a6 + 40) = v53;
    *(_OWORD *)(a6 + 56) = v54;
    *(_QWORD *)(a6 + 72) = v45;
    v46 = v57;
    *(_OWORD *)(a6 + 80) = v56;
    *(_OWORD *)(a6 + 96) = v46;
    return;
  }
  v58 = v6;
  v15 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (!swift_dynamicCast())
    goto LABEL_11;

  v17 = v48[0];
  v16 = (void *)v48[1];
  v18 = type metadata accessor for DecodingError();
  swift_allocError();
  v47 = v19;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18205C850;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
  *(_QWORD *)(inited + 40) = v21;
  v22 = BPlistError.debugDescription.getter(v17, v16);
  *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 48) = v22;
  *(_QWORD *)(inited + 56) = v23;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v24 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (Hashable & Sendable)?(inited + 32, (uint64_t)&v49, &demangling cache variable for type metadata for (String, Any));
  v25 = v49;
  v26 = v50;
  swift_retain();
  v27 = specialized __RawDictionaryStorage.find<A>(_:)(v25, v26);
  if ((v28 & 1) != 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  v24[(v27 >> 6) + 8] |= 1 << v27;
  v29 = (uint64_t *)(v24[6] + 16 * v27);
  *v29 = v25;
  v29[1] = v26;
  outlined init with take of Any((__int128 *)((char *)&v50 + 8), (_OWORD *)(v24[7] + 32 * v27));
  v30 = v24[2];
  v31 = __OFADD__(v30, 1);
  v32 = v30 + 1;
  if (v31)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v24[2] = v32;
  swift_release();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v33 = objc_allocWithZone((Class)NSError);
  v34 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v35 = objc_msgSend(v33, sel_initWithDomain_code_userInfo_, v34, 3840, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v36 = objc_msgSend(v35, sel_domain);
  v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
  v39 = v38;

  if (v37 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v39 == v40)
  {
    swift_bridgeObjectRelease_n();
    outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v17, (unint64_t)v16);
LABEL_10:
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v47, *MEMORY[0x1E0DEC458], v18);
    swift_willThrow();
LABEL_11:

    return;
  }
  v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v17, (unint64_t)v16);
  if ((v41 & 1) != 0)
    goto LABEL_10;
LABEL_14:
  __break(1u);
}

void specialized closure #2 in PropertyListDecoder._decode<A>(_:from:format:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t *__return_ptr, _QWORD *)@<X3>, _QWORD *a5@<X5>, uint64_t a6@<X8>)
{
  void *v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t inited;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  _QWORD v26[4];
  _UNKNOWN **v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  id v37;

  v28 = a1;
  *(_QWORD *)&v29 = a2;
  *((_QWORD *)&v29 + 1) = a1;
  v30 = a1;
  v31 = a1 + a2;
  v32 = MEMORY[0x1E0DEE9D8];
  XMLPlistScanner.scanXMLPropertyList()();
  if (v6)
  {
    swift_bridgeObjectRelease();
    v37 = v6;
    v15 = v6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if (swift_dynamicCast())
    {

      v16 = v27;
      type metadata accessor for DecodingError();
      swift_allocError();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
      *(_QWORD *)(inited + 40) = v18;
      __asm { BR              X11 }
    }

  }
  else
  {
    v12 = v11;
    swift_bridgeObjectRelease();
    v13 = *(_QWORD *)(a3 + 16);
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _PlistDecoder<_XMLPlistDecodingFormat>);
    swift_allocObject();
    swift_bridgeObjectRetain();
    specialized _PlistDecoder.init(referencing:options:codingPathNode:)(v12, v13, 0x8000000000000000);
    v20 = v19;
    swift_release();
    v26[3] = v14;
    v27 = &protocol witness table for _PlistDecoder<A>;
    v26[0] = v20;
    swift_retain();
    a4(&v28, v26);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    swift_retain();
    specialized _PlistDecoder.takeOwnershipOfBackingDataIfNeeded(selfIsUniquelyReferenced:)(isUniquelyReferenced_nonNull_native);
    swift_release_n();
    *a5 = 100;
    v22 = v30;
    v23 = v31;
    v24 = v34;
    *(_QWORD *)a6 = v28;
    *(_OWORD *)(a6 + 8) = v29;
    *(_QWORD *)(a6 + 24) = v22;
    *(_QWORD *)(a6 + 32) = v23;
    *(_OWORD *)(a6 + 40) = v32;
    *(_OWORD *)(a6 + 56) = v33;
    *(_QWORD *)(a6 + 72) = v24;
    v25 = v36;
    *(_OWORD *)(a6 + 80) = v35;
    *(_OWORD *)(a6 + 96) = v25;
  }
}

void specialized closure #3 in PropertyListDecoder._decode<A>(_:from:format:)(unint64_t a1, unint64_t a2, uint64_t a3, _QWORD *a4, void (*a5)(__int128 *))
{
  void *v5;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t inited;
  uint64_t v16;
  _QWORD *v17;
  __int128 v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  char v35;
  __int128 v36;
  __int128 v37;
  _UNKNOWN **v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD v41[2];
  id v42;

  __ParseOldStylePropertyList(utf16:)(a1, a2, (uint64_t)&v36);
  if (!v5)
  {
    outlined init with take of Any(&v36, v41);
    outlined init with copy of Any((uint64_t)v41, (uint64_t)&v36);
    v32 = *(_QWORD *)(a3 + 16);
    v33 = type metadata accessor for __PlistDictionaryDecoder();
    swift_allocObject();
    swift_bridgeObjectRetain();
    v34 = __PlistDictionaryDecoder.init(referencing:at:options:)((uint64_t)&v36, MEMORY[0x1E0DEE9D8], v32);
    *a4 = 1;
    *((_QWORD *)&v37 + 1) = v33;
    v38 = &protocol witness table for __PlistDictionaryDecoder;
    *(_QWORD *)&v36 = v34;
    swift_retain();
    a5(&v36);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
    return;
  }
  v42 = v5;
  v9 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_11;

  v10 = v39;
  v11 = v40;
  v12 = type metadata accessor for DecodingError();
  swift_allocError();
  v14 = v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18205C850;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
  *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 40) = v16;
  *(_QWORD *)(inited + 48) = v10;
  *(_QWORD *)(inited + 56) = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v17 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (Hashable & Sendable)?(inited + 32, (uint64_t)&v36, &demangling cache variable for type metadata for (String, Any));
  v18 = v36;
  swift_bridgeObjectRetain();
  swift_retain();
  v19 = specialized __RawDictionaryStorage.find<A>(_:)(v18, *((uint64_t *)&v18 + 1));
  if ((v20 & 1) != 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  v17[(v19 >> 6) + 8] |= 1 << v19;
  *(_OWORD *)(v17[6] + 16 * v19) = v18;
  outlined init with take of Any(&v37, (_OWORD *)(v17[7] + 32 * v19));
  v21 = v17[2];
  v22 = __OFADD__(v21, 1);
  v23 = v21 + 1;
  if (v22)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v17[2] = v23;
  swift_release();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v24 = objc_allocWithZone((Class)NSError);
  v25 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v26 = objc_msgSend(v24, sel_initWithDomain_code_userInfo_, v25, 3840, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v27 = objc_msgSend(v26, sel_domain);
  v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
  v30 = v29;

  if (v28 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v30 == v31)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
LABEL_10:
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v14, *MEMORY[0x1E0DEC458], v12);
    swift_willThrow();
LABEL_11:

    return;
  }
  v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v35 & 1) != 0)
    goto LABEL_10;
LABEL_14:
  __break(1u);
}

void specialized static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_181D252CC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4, uint64_t a5, _QWORD *(*a6)(_OWORD *__return_ptr, unsigned __int8 *, uint64_t))
{
  void (*v6)(id);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  __int16 v12;
  char v13;
  char v14;
  char v15;
  char v16;

  v11 = v7;
  v12 = v9;
  v13 = BYTE2(v9);
  v14 = BYTE3(v9);
  v15 = BYTE4(v9);
  v16 = BYTE5(v9);
  return _s10Foundation4DataV14withBufferViewyxxAA0dE0Vys5UInt8VGKXEKlFxSWKXEfU_AA23LocalizedStringResourceV_Tg50102_s10Foundation19PropertyListDecoderC30detectFormatAndConvertEncoding3for11binaryPlist3xml8openstepxAA4b7V_xAA10de4Vys5f45VGKXExAOKXExSS05UTF16Q0VKXEtKlFZxAOKXEfU_AA23ghI5V_Tg5AIxs5Error_pRi_zRi0_zlyAKIsgyrzo_AA0lmN0CXMTAIxsAM_pRi_zRi0_zlyAKIsgyrzo_SS05UTF16E0VxsAM_pRi_zRi0_zlyAKIsggrzo_AOXDXMTTf1nnc_n((uint64_t)&v11, (uint64_t)&v11 + BYTE6(v9), a3, a6, v6, v8);
}

uint64_t specialized closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t)@<X2>, _QWORD *(*a4)(_OWORD *__return_ptr, unsigned __int8 *, uint64_t)@<X5>, void (*a5)(id)@<X7>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  _OWORD v29[3];
  __int128 v30;
  __int128 v31;

  if (a2 >= 41 && *(_DWORD *)a1 == 1768714338 && *(_DWORD *)(a1 + 3) == 812938089)
    return a3(a1, a2);
  result = static PropertyListDecoder.detectEncoding(of:)((uint64_t *)&v27, (unsigned __int8 *)a1, a2);
  if (!v6)
  {
    if (result > a2)
    {
      __break(1u);
    }
    else
    {
      v14 = v27;
      v15 = (char *)(a1 + result);
      v30 = 0u;
      v31 = 0u;
      v16 = a2 - result;
      v28 = 0u;
      memset(v29, 0, sizeof(v29));
      v27 = 0u;
      result = (uint64_t)_s10Foundation19PropertyListDecoderC22withUTF8Representation2of14sourceEncoding_xAA10BufferViewVys5UInt8VG_SSAAE0J0VxAKKXEtKlFZyt_TBm5016_s10Foundation19bcd78C30detectFormatAndConvertEncoding3for11binaryPlist3xml8openstepxAA4DataV_xAA10kl4Vys5M82VGKXExAOKXExSS05UTF16Q0VKXEtKlFZxAOKXEfU_yAOKXEfU_AA23LocalizedStringResourceV_Tg5AA23LocalizedStringResourceVSgAKxs5Error_pRi_zRi0_zlyAPIsgyrzo_Tf1nnnc_n((unsigned __int8 *)(a1 + result), v16, v14, (uint64_t)&v27, a4);
      v17 = *((_QWORD *)&v27 + 1);
      if (*((_QWORD *)&v27 + 1))
      {
        v18 = *((_QWORD *)&v29[2] + 1);
        v19 = *(_QWORD *)&v29[0];
        v20 = v28;
        *(_QWORD *)a6 = v27;
        *(_QWORD *)(a6 + 8) = v17;
        *(_OWORD *)(a6 + 16) = v20;
        *(_QWORD *)(a6 + 32) = v19;
        *(_OWORD *)(a6 + 40) = *(_OWORD *)((char *)v29 + 8);
        *(_OWORD *)(a6 + 56) = *(_OWORD *)((char *)&v29[1] + 8);
        *(_QWORD *)(a6 + 72) = v18;
        v21 = v31;
        *(_OWORD *)(a6 + 80) = v30;
        *(_OWORD *)(a6 + 96) = v21;
      }
      else
      {
        v22 = specialized String.init<A>(bytes:encoding:)(v15, v16, v14);
        if (v23)
        {
          a5(v22);
          return swift_bridgeObjectRelease();
        }
        else
        {
          v24 = type metadata accessor for DecodingError();
          swift_allocError();
          v26 = v25;
          _CodingPathNode.path.getter(0x8000000000000000);
          DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
          (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v26, *MEMORY[0x1E0DEC458], v24);
          swift_willThrow();
          return outlined consume of LocalizedStringResource?(v27, 0, v28, *((uint64_t *)&v28 + 1), *(uint64_t *)&v29[0], *((uint64_t *)&v29[0] + 1), *(uint64_t *)&v29[1], *((uint64_t *)&v29[1] + 1), *(uint64_t *)&v29[2], *((void **)&v29[2] + 1));
        }
      }
    }
  }
  return result;
}

uint64_t String.LocalizationOptions.replacements.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t String.LocalizationOptions.replacements.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*String.LocalizationOptions.replacements.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationOptions._PluralizationNumber.CodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationOptions._PluralizationNumber.CodingKeys and conformance String.LocalizationOptions._PluralizationNumber.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationOptions._PluralizationNumber.CodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationOptions._PluralizationNumber.CodingKeys and conformance String.LocalizationOptions._PluralizationNumber.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t String.LocalizationOptions._PluralizationNumber.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys>);
  v17 = *(_QWORD *)(v4 - 8);
  v18 = v4;
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys>);
  v16 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationOptions._PluralizationNumber.CodingKeys>);
  v19 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *v2;
  v13 = *((_BYTE *)v2 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationOptions._PluralizationNumber.CodingKeys and conformance String.LocalizationOptions._PluralizationNumber.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((v13 & 1) != 0)
  {
    v21 = 1;
    lazy protocol witness table accessor for type String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v6, v18);
  }
  else
  {
    v20 = 0;
    lazy protocol witness table accessor for type String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v9, v7);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v12, v10);
}

uint64_t String.LocalizationOptions._PluralizationNumber.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  char *v29;
  _QWORD *v30;
  char v31;
  char v32;

  v28 = a2;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys>);
  v25 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27);
  v29 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys>);
  v4 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationOptions._PluralizationNumber.CodingKeys>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationOptions._PluralizationNumber.CodingKeys and conformance String.LocalizationOptions._PluralizationNumber.CodingKeys();
  v11 = v30;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v11)
    goto LABEL_7;
  v12 = v29;
  v23 = v4;
  v24 = v8;
  v30 = a1;
  v13 = KeyedDecodingContainer.allKeys.getter();
  if (*(_QWORD *)(v13 + 16) != 1)
  {
    v16 = type metadata accessor for DecodingError();
    swift_allocError();
    v18 = v17;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v18 = &type metadata for String.LocalizationOptions._PluralizationNumber;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v18, *MEMORY[0x1E0DEC450], v16);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v7);
    a1 = v30;
LABEL_7:
    v19 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v19);
  }
  v14 = *(_BYTE *)(v13 + 32);
  if ((v14 & 1) != 0)
  {
    v32 = 1;
    lazy protocol witness table accessor for type String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v12, v27);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v7);
    v15 = 0;
  }
  else
  {
    v31 = 0;
    lazy protocol witness table accessor for type String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v21 = v26;
    v15 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v6, v21);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v7);
  }
  v22 = v28;
  *v28 = v15;
  *((_BYTE *)v22 + 8) = v14;
  v19 = (uint64_t)v30;
  return __swift_destroy_boxed_opaque_existential_1(v19);
}

uint64_t protocol witness for Decodable.init(from:) in conformance String.LocalizationOptions._PluralizationNumber@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return String.LocalizationOptions._PluralizationNumber.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance String.LocalizationOptions._PluralizationNumber(_QWORD *a1)
{
  return String.LocalizationOptions._PluralizationNumber.encode(to:)(a1);
}

void String.LocalizationOptions._pluralizationNumber.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  char v3;

  v2 = *(_BYTE *)(v1 + 16);
  v3 = *(_BYTE *)(v1 + 17);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 8);
  *(_BYTE *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 9) = v3;
}

uint64_t String.LocalizationOptions._pluralizationNumber.setter(uint64_t result)
{
  uint64_t v1;
  char v2;
  char v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *(_BYTE *)(result + 9);
  *(_QWORD *)(v1 + 8) = *(_QWORD *)result;
  *(_BYTE *)(v1 + 16) = v2;
  *(_BYTE *)(v1 + 17) = v3;
  return result;
}

uint64_t (*String.LocalizationOptions._pluralizationNumber.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t String.LocalizationOptions._localization.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t String.LocalizationOptions._localization.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return result;
}

uint64_t (*String.LocalizationOptions._localization.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void String.LocalizationOptions.init()(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 256;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
}

void String.LocalizationValue.Placeholder.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance String.LocalizationValue.Placeholder.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181D25EEC + 4 * byte_1821509EE[*v0]))(7630441, 0xE300000000000000);
}

uint64_t sub_181D25EEC()
{
  return 1953393013;
}

uint64_t sub_181D25EFC()
{
  return 0x74616F6C66;
}

uint64_t sub_181D25F10()
{
  return 0x656C62756F64;
}

uint64_t sub_181D25F24()
{
  return 0x7463656A626FLL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance String.LocalizationValue.Placeholder.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized String.LocalizationValue.Placeholder.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.Placeholder.CodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.CodingKeys and conformance String.LocalizationValue.Placeholder.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.Placeholder.CodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.CodingKeys and conformance String.LocalizationValue.Placeholder.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.Placeholder.DoubleCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.DoubleCodingKeys and conformance String.LocalizationValue.Placeholder.DoubleCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.Placeholder.DoubleCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.DoubleCodingKeys and conformance String.LocalizationValue.Placeholder.DoubleCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.Placeholder.FloatCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.FloatCodingKeys and conformance String.LocalizationValue.Placeholder.FloatCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.Placeholder.FloatCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.FloatCodingKeys and conformance String.LocalizationValue.Placeholder.FloatCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.Placeholder.IntCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.IntCodingKeys and conformance String.LocalizationValue.Placeholder.IntCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.Placeholder.IntCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.IntCodingKeys and conformance String.LocalizationValue.Placeholder.IntCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.Placeholder.ObjectCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.ObjectCodingKeys and conformance String.LocalizationValue.Placeholder.ObjectCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.Placeholder.ObjectCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.ObjectCodingKeys and conformance String.LocalizationValue.Placeholder.ObjectCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.Placeholder.UintCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.UintCodingKeys and conformance String.LocalizationValue.Placeholder.UintCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.Placeholder.UintCodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.UintCodingKeys and conformance String.LocalizationValue.Placeholder.UintCodingKeys();
  return CodingKey.debugDescription.getter();
}

void String.LocalizationValue.Placeholder.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.Placeholder.ObjectCodingKeys>);
  v14[11] = *(_QWORD *)(v3 - 8);
  v14[12] = v3;
  MEMORY[0x1E0C80A78](v3);
  v14[10] = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.Placeholder.DoubleCodingKeys>);
  v14[8] = *(_QWORD *)(v5 - 8);
  v14[9] = v5;
  MEMORY[0x1E0C80A78](v5);
  v14[7] = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.Placeholder.FloatCodingKeys>);
  v14[5] = *(_QWORD *)(v7 - 8);
  v14[6] = v7;
  MEMORY[0x1E0C80A78](v7);
  v14[4] = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.Placeholder.UintCodingKeys>);
  v14[2] = *(_QWORD *)(v9 - 8);
  v14[3] = v9;
  MEMORY[0x1E0C80A78](v9);
  v14[1] = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.Placeholder.IntCodingKeys>);
  MEMORY[0x1E0C80A78](v11);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.Placeholder.CodingKeys>);
  v14[14] = *(_QWORD *)(v12 - 8);
  v14[15] = v12;
  MEMORY[0x1E0C80A78](v12);
  v13 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.CodingKeys and conformance String.LocalizationValue.Placeholder.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  __asm { BR              X9 }
}

uint64_t sub_181D26330()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v4 - 69) = 0;
  lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.IntCodingKeys and conformance String.LocalizationValue.Placeholder.IntCodingKeys();
  v5 = *(_QWORD *)(v4 - 88);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 96) + 8))(v1, v5);
}

Swift::Int String.LocalizationValue.Placeholder.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t String.LocalizationValue.Placeholder.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  _QWORD v27[4];
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;

  v42 = a2;
  v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.Placeholder.ObjectCodingKeys>);
  v34 = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41);
  v40 = (char *)v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.Placeholder.DoubleCodingKeys>);
  v35 = *(_QWORD *)(v4 - 8);
  v36 = v4;
  MEMORY[0x1E0C80A78](v4);
  v39 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.Placeholder.FloatCodingKeys>);
  v32 = *(_QWORD *)(v6 - 8);
  v33 = v6;
  MEMORY[0x1E0C80A78](v6);
  v38 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.Placeholder.UintCodingKeys>);
  v30 = *(_QWORD *)(v8 - 8);
  v31 = v8;
  MEMORY[0x1E0C80A78](v8);
  v37 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.Placeholder.IntCodingKeys>);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.Placeholder.CodingKeys>);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a1[3];
  v43 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v18);
  lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.CodingKeys and conformance String.LocalizationValue.Placeholder.CodingKeys();
  v19 = v44;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v19)
  {
    v27[2] = v10;
    v27[3] = v13;
    v27[1] = v11;
    v44 = v15;
    v28 = v17;
    v29 = v14;
    v20 = KeyedDecodingContainer.allKeys.getter();
    if (*(_QWORD *)(v20 + 16) == 1)
      __asm { BR              X9 }
    v21 = type metadata accessor for DecodingError();
    swift_allocError();
    v23 = v22;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v23 = &type metadata for String.LocalizationValue.Placeholder;
    v24 = v28;
    v25 = v29;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v23, *MEMORY[0x1E0DEC450], v21);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v24, v25);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
}

uint64_t protocol witness for Decodable.init(from:) in conformance String.LocalizationValue.Placeholder@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return String.LocalizationValue.Placeholder.init(from:)(a1, a2);
}

void protocol witness for Encodable.encode(to:) in conformance String.LocalizationValue.Placeholder(_QWORD *a1)
{
  String.LocalizationValue.Placeholder.encode(to:)(a1);
}

uint64_t String.LocalizationValue.init(key:arguments:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = a3;
  a4[1] = result;
  a4[2] = a2;
  return result;
}

__n128 String.LocalizationValue.init(stringInterpolation:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;
  unint64_t v3;

  result = *a1;
  v3 = a1[1].n128_u64[0];
  *a2 = *a1;
  a2[1].n128_u64[0] = v3;
  return result;
}

_QWORD *String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  BOOL v5;

  a3[1] = 0;
  a3[2] = 0xE000000000000000;
  if (a2 + 0x4000000000000000 < 0)
  {
    __break(1u);
  }
  else
  {
    v5 = __OFADD__(result, 2 * a2);
    result = (_QWORD *)((char *)result + 2 * a2);
    if (!v5)
    {
      MEMORY[0x186DA4670](result);
      result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a2 & ~(a2 >> 63), 0, MEMORY[0x1E0DEE9D8]);
      *a3 = result;
      return result;
    }
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall String.LocalizationValue.StringInterpolation.appendLiteral(_:)(Swift::String a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  Swift::String v8;

  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol._ephemeralString.getter();
  StringProtocol._ephemeralString.getter();
  StringProtocol._ephemeralString.getter();
  v1 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v2 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v3 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v4 = objc_msgSend(v1, sel_stringByReplacingOccurrencesOfString_withString_, v2, v3, a1._countAndFlagsBits, a1._object, 9509, 0xE200000000000000, 37, 0xE100000000000000);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  v8._countAndFlagsBits = (uint64_t)v5;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(Swift::String a1)
{
  _QWORD **v1;
  _QWORD **v2;
  void *object;
  uint64_t countAndFlagsBits;
  Swift::String v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  char v21;
  _QWORD v22[5];
  _OWORD v23[7];
  char v24;

  v2 = v1;
  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  v5._countAndFlagsBits = 16421;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  v6 = MEMORY[0x1E0DEA968];
  v22[3] = MEMORY[0x1E0DEA968];
  v22[4] = lazy protocol witness table accessor for type String and conformance String();
  v22[0] = countAndFlagsBits;
  v22[1] = object;
  v7 = __swift_project_boxed_opaque_existential_1(v22, v6);
  v20 = v6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v19);
  (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(boxed_opaque_existential_1, v7, v6);
  v21 = 0;
  outlined init with take of String.LocalizationValue.FormatArgument.Storage(&v19, (uint64_t)v23);
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  v9 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
  v11 = v9[2];
  v10 = v9[3];
  if (v11 >= v10 >> 1)
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v9);
  v9[2] = v11 + 1;
  v12 = &v9[15 * v11];
  v13 = v23[0];
  v14 = v23[1];
  v15 = v23[3];
  *((_OWORD *)v12 + 4) = v23[2];
  *((_OWORD *)v12 + 5) = v15;
  *((_OWORD *)v12 + 2) = v13;
  *((_OWORD *)v12 + 3) = v14;
  v16 = v23[4];
  v17 = v23[5];
  v18 = v23[6];
  *((_BYTE *)v12 + 144) = v24;
  *((_OWORD *)v12 + 7) = v17;
  *((_OWORD *)v12 + 8) = v18;
  *((_OWORD *)v12 + 6) = v16;
  *v2 = v9;
}

__n128 String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:)(void *a1, uint64_t a2)
{
  _QWORD **v2;
  _QWORD **v3;
  Swift::String v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __n128 result;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  char *v26[3];
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __n128 v32;
  __int128 v33;
  __int128 v34;
  char v35;

  v3 = v2;
  v6._countAndFlagsBits = 16421;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  *((_QWORD *)&v29 + 1) = a2;
  *(_QWORD *)&v30 = MEMORY[0x186DA9D64](MEMORY[0x1E0DEFD08], a2);
  *(_QWORD *)&v28 = a1;
  v7 = one-time initialization token for cache;
  v8 = a1;
  if (v7 != -1)
    swift_once();
  *(_QWORD *)&v23 = LocaleCache.current.getter();
  *((_QWORD *)&v23 + 1) = v9;
  _convertObjectToSendableArgument(_:locale:)((uint64_t)&v28, v26);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
  v10 = v27;
  v11 = __swift_project_boxed_opaque_existential_1(v26, v27);
  v24 = v10;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v23);
  (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(boxed_opaque_existential_1, v11, v10);
  v25 = 0;
  outlined init with take of String.LocalizationValue.FormatArgument.Storage(&v23, (uint64_t)&v28);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  v13 = *v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
  v15 = v13[2];
  v14 = v13[3];
  if (v15 >= v14 >> 1)
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, v13);
  v13[2] = v15 + 1;
  v16 = &v13[15 * v15];
  v17 = v28;
  v18 = v29;
  v19 = v31;
  *((_OWORD *)v16 + 4) = v30;
  *((_OWORD *)v16 + 5) = v19;
  *((_OWORD *)v16 + 2) = v17;
  *((_OWORD *)v16 + 3) = v18;
  result = v32;
  v21 = v33;
  v22 = v34;
  *((_BYTE *)v16 + 144) = v35;
  *((_OWORD *)v16 + 7) = v21;
  *((_OWORD *)v16 + 8) = v22;
  *((__n128 *)v16 + 6) = result;
  *v3 = v13;
  return result;
}

unint64_t _convertObjectToSendableArgument(_:locale:)@<X0>(uint64_t a1@<X0>, char **a2@<X8>)
{
  uint64_t v4;
  char *v5;
  unint64_t *v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  uint64_t inited;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  _BYTE v17[40];

  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v17);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg);
  v4 = type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if (swift_dynamicCast())
  {
    v5 = v16;
    a2[3] = (char *)v4;
    v6 = (unint64_t *)&lazy protocol witness table cache variable for type NSNumber and conformance NSObject;
    v7 = (unint64_t *)&lazy cache variable for type metadata for NSNumber;
  }
  else
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v17);
    v8 = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSDate);
    if (swift_dynamicCast())
    {
      v5 = v16;
      a2[3] = (char *)v8;
      v6 = (unint64_t *)&lazy protocol witness table cache variable for type NSDate and conformance NSObject;
      v7 = &lazy cache variable for type metadata for NSDate;
    }
    else
    {
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v17);
      v9 = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSURL);
      if (!swift_dynamicCast())
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_18205C850;
        v12 = outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, inited + 32);
        MEMORY[0x1E0C80A78](v12);
        swift_unknownObjectRetain();
        v13 = specialized withVaList<A>(_:_:)(inited, (void (*)(uint64_t *__return_ptr, uint64_t))partial apply for closure #1 in String.init(format:locale:arguments:));
        v15 = v14;
        swift_setDeallocating();
        swift_arrayDestroy();
        swift_unknownObjectRelease();
        a2[3] = (char *)MEMORY[0x1E0DEA968];
        result = lazy protocol witness table accessor for type String and conformance String();
        a2[4] = (char *)result;
        *a2 = v13;
        a2[1] = v15;
        return result;
      }
      v5 = v16;
      a2[3] = (char *)v9;
      v6 = (unint64_t *)&lazy protocol witness table cache variable for type NSURL and conformance NSObject;
      v7 = &lazy cache variable for type metadata for NSURL;
    }
  }
  result = lazy protocol witness table accessor for type NSNumber and conformance NSObject(v6, v7);
  a2[4] = (char *)result;
  *a2 = v5;
  return result;
}

uint64_t String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:)(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  Swift::String v9;

  v6 = 1684827173;
  if (swift_dynamicCastMetatype() || swift_dynamicCastMetatype())
    goto LABEL_3;
  if (swift_dynamicCastMetatype() || swift_dynamicCastMetatype() || swift_dynamicCastMetatype())
  {
    v7 = (void *)0xE200000000000000;
    v6 = 25637;
    goto LABEL_4;
  }
  v6 = 1970039845;
  if (swift_dynamicCastMetatype() || swift_dynamicCastMetatype())
  {
LABEL_3:
    v7 = (void *)0xE400000000000000;
  }
  else if (swift_dynamicCastMetatype() || swift_dynamicCastMetatype() || swift_dynamicCastMetatype())
  {
    v7 = (void *)0xE200000000000000;
    v6 = 29989;
  }
  else if (swift_dynamicCastMetatype())
  {
    v7 = (void *)0xE200000000000000;
    v6 = 26149;
  }
  else
  {
    v6 = 6712357;
    v7 = (void *)0xE300000000000000;
    if (!swift_dynamicCastMetatype() && !swift_dynamicCastMetatype())
    {
      v6 = 16421;
      v7 = (void *)0xE200000000000000;
    }
  }
LABEL_4:
  v9._countAndFlagsBits = v6;
  v9._object = v7;
  String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)(a1, v9, a2, a3);
  return swift_bridgeObjectRelease();
}

__n128 String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)(int a1, Swift::String a2, uint64_t a3, uint64_t a4)
{
  _QWORD **v4;
  _QWORD **v5;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  _QWORD *v10;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __n128 result;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  uint64_t v25[3];
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  _OWORD v28[7];
  char v29;

  v5 = v4;
  String.append(_:)(a2);
  v8 = *(void (**)(uint64_t, uint64_t))(a4 + 32);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  __swift_allocate_boxed_opaque_existential_1(v25);
  v8(a3, a4);
  v9 = AssociatedTypeWitness;
  v10 = __swift_project_boxed_opaque_existential_1(v25, AssociatedTypeWitness);
  v23 = v9;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v22);
  (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(boxed_opaque_existential_1, v10, v9);
  v24 = 0;
  outlined init with take of String.LocalizationValue.FormatArgument.Storage(&v22, (uint64_t)v28);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  v12 = *v5;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
  v14 = v12[2];
  v13 = v12[3];
  if (v14 >= v13 >> 1)
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, v12);
  v12[2] = v14 + 1;
  v15 = &v12[15 * v14];
  v16 = v28[0];
  v17 = v28[1];
  v18 = v28[3];
  *((_OWORD *)v15 + 4) = v28[2];
  *((_OWORD *)v15 + 5) = v18;
  *((_OWORD *)v15 + 2) = v16;
  *((_OWORD *)v15 + 3) = v17;
  result = (__n128)v28[4];
  v20 = v28[5];
  v21 = v28[6];
  *((_BYTE *)v15 + 144) = v29;
  *((_OWORD *)v15 + 7) = v20;
  *((_OWORD *)v15 + 8) = v21;
  *((__n128 *)v15 + 6) = result;
  *v5 = v12;
  return result;
}

uint64_t String.LocalizationValue.StringInterpolation.appendInterpolation(placeholder:)(char *a1)
{
  void *v1;
  Swift::String v2;

  v1 = (void *)0xE400000000000000;
  v2._countAndFlagsBits = 1684827173;
  switch(*a1)
  {
    case 0:
      break;
    case 1:
      v2._countAndFlagsBits = 1970039845;
      break;
    case 2:
      v1 = (void *)0xE200000000000000;
      v2._countAndFlagsBits = 26149;
      break;
    case 3:
      v1 = (void *)0xE300000000000000;
      v2._countAndFlagsBits = 6712357;
      break;
    default:
      v1 = (void *)0xE200000000000000;
      v2._countAndFlagsBits = 16421;
      break;
  }
  v2._object = v1;
  String.LocalizationValue.StringInterpolation.appendInterpolation(placeholder:specifier:)(a1, v2);
  return swift_bridgeObjectRelease();
}

__n128 String.LocalizationValue.StringInterpolation.appendInterpolation(placeholder:specifier:)(char *a1, Swift::String a2)
{
  _QWORD **v2;
  _QWORD *v3;
  char v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  __n128 result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __n128 v13;
  __int128 v14;
  _BYTE v15[31];

  v3 = v2;
  v4 = *a1;
  String.append(_:)(a2);
  v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
  v7 = v5[2];
  v6 = v5[3];
  if (v7 >= v6 >> 1)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v7 + 1, 1, v5);
  v5[2] = v7 + 1;
  v8 = &v5[15 * v7];
  *((_BYTE *)v8 + 32) = v4;
  *(_OWORD *)((char *)v8 + 65) = v12;
  *(_OWORD *)((char *)v8 + 49) = v11;
  *(_OWORD *)((char *)v8 + 33) = v10;
  result = v13;
  *((_OWORD *)v8 + 8) = *(_OWORD *)&v15[15];
  *(_OWORD *)((char *)v8 + 113) = *(_OWORD *)v15;
  *(_OWORD *)((char *)v8 + 97) = v14;
  *(__n128 *)((char *)v8 + 81) = v13;
  *((_BYTE *)v8 + 144) = 6;
  *v3 = v5;
  return result;
}

double String.LocalizationValue.StringInterpolation.appendInterpolation<A, B>(_:format:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double result;

  *(_QWORD *)&result = String.LocalizationValue.StringInterpolation.appendInterpolation<A, B>(_:format:)(a1, a2, a3, a4, a5, a6, (void (*)(__int128 *__return_ptr, char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:), 2).n128_u64[0];
  return result;
}

{
  double result;

  *(_QWORD *)&result = String.LocalizationValue.StringInterpolation.appendInterpolation<A, B>(_:format:)(a1, a2, a3, a4, a5, a6, (void (*)(__int128 *__return_ptr, char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper.init<A, B>(_:format:), 3).n128_u64[0];
  return result;
}

__n128 String.LocalizationValue.StringInterpolation.appendInterpolation<A, B>(_:format:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(__int128 *__return_ptr, char *, char *, uint64_t, uint64_t, uint64_t, uint64_t), int a8)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  Swift::String v25;
  void (*v26)(char *, uint64_t, uint64_t);
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  _QWORD **v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __n128 result;
  __int128 v38;
  __int128 v39;
  _QWORD v40[2];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(__int128 *__return_ptr, char *, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  int v45;
  __int128 v46[7];
  char v47;
  _OWORD v48[7];
  char v49;

  v45 = a8;
  v44 = a7;
  v43 = a6;
  v42 = a5;
  v41 = a2;
  v11 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v13 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)v40 - v15;
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v24 = (char *)v40 - v23;
  v25._countAndFlagsBits = 16421;
  v25._object = (void *)0xE200000000000000;
  String.append(_:)(v25);
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v26(v24, a1, a3);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v27(v16, v41, a4);
  v26(v21, (uint64_t)v24, a3);
  v27(v13, (uint64_t)v16, a4);
  v44(v46, v21, v13, a3, a4, v42, v43);
  v28 = a4;
  v29 = (_QWORD **)v40[1];
  (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v28);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v24, a3);
  v47 = v45;
  outlined init with take of String.LocalizationValue.FormatArgument.Storage(v46, (uint64_t)v48);
  v30 = *v29;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30[2] + 1, 1, v30);
  v32 = v30[2];
  v31 = v30[3];
  if (v32 >= v31 >> 1)
    v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v31 > 1), v32 + 1, 1, v30);
  v30[2] = v32 + 1;
  v33 = &v30[15 * v32];
  v34 = v48[0];
  v35 = v48[1];
  v36 = v48[3];
  *((_OWORD *)v33 + 4) = v48[2];
  *((_OWORD *)v33 + 5) = v36;
  *((_OWORD *)v33 + 2) = v34;
  *((_OWORD *)v33 + 3) = v35;
  result = (__n128)v48[4];
  v38 = v48[5];
  v39 = v48[6];
  *((_BYTE *)v33 + 144) = v49;
  *((_OWORD *)v33 + 7) = v38;
  *((_OWORD *)v33 + 8) = v39;
  *((__n128 *)v33 + 6) = result;
  *v29 = v30;
  return result;
}

__n128 String.LocalizationValue.StringInterpolation.appendInterpolation(_:options:)(uint64_t *a1, uint64_t *a2)
{
  _QWORD **v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  __n128 result;
  __int128 v12;
  __int128 v13;
  __n128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v3 = v2;
  v4 = *a1;
  v5 = *a2;
  v6._countAndFlagsBits = 16421;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  v7 = *v2;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
  v9 = v7[2];
  v8 = v7[3];
  if (v9 >= v8 >> 1)
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, v7);
  v7[2] = v9 + 1;
  v10 = &v7[15 * v9];
  v10[4] = v4;
  v10[5] = v5;
  *((_OWORD *)v10 + 3) = v12;
  *((_OWORD *)v10 + 4) = v13;
  result = v14;
  *((_OWORD *)v10 + 7) = v16;
  *((_OWORD *)v10 + 8) = v17;
  *((__n128 *)v10 + 5) = v14;
  *((_OWORD *)v10 + 6) = v15;
  *((_BYTE *)v10 + 144) = 1;
  *v3 = v7;
  return result;
}

__n128 String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD **v3;
  _QWORD *v4;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  __n128 result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v4 = v3;
  v7._countAndFlagsBits = 16421;
  v7._object = (void *)0xE200000000000000;
  String.append(_:)(v7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 8))(&v25, a2, a3);
  v8 = v27;
  v9 = v28;
  v10 = v29;
  v11 = v30;
  v23 = v31;
  v24 = v26;
  v12 = v32;
  v13 = v33;
  v21 = v34;
  v22 = v25;
  v19 = v36;
  v20 = v35;
  v14 = *v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
  v16 = v14[2];
  v15 = v14[3];
  if (v16 >= v15 >> 1)
    v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v14);
  v14[2] = v16 + 1;
  v17 = &v14[15 * v16];
  v17[4] = v22;
  *(_OWORD *)(v17 + 5) = v24;
  v17[7] = v8;
  v17[8] = v9;
  v17[9] = v10;
  v17[10] = v11;
  result = v23;
  *(__n128 *)(v17 + 11) = v23;
  v17[13] = v12;
  v17[14] = v13;
  v17[15] = v21;
  v17[16] = v20;
  v17[17] = v19;
  *((_BYTE *)v17 + 144) = 4;
  *v4 = v14;
  return result;
}

__n128 String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:format:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD **v5;
  _QWORD *v6;
  char v10;
  char v11;
  Swift::String v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  __int16 v18;
  __n128 result;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[16];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t KeyPath;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __n128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  int v36;
  __int16 v37;

  v6 = v5;
  v10 = *a2;
  v11 = a2[1];
  v22 = *(_OWORD *)(a2 + 8);
  v12._countAndFlagsBits = 16421;
  v12._object = (void *)0xE200000000000000;
  String.append(_:)(v12);
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v24 = a3;
  v25 = a4;
  v26 = a5;
  KeyPath = swift_getKeyPath();
  v13 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyADs5NeverO10Foundation23LocalizedStringResourceVIsgnrzr_xSayAJGAGSlRzAJRsd__AGRsd_0_r_0_lIetMgnozo_Tp5((void (*)(uint64_t *__return_ptr, char *))partial apply for implicit closure #1 in String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:format:), (uint64_t)v23);
  swift_release();
  v14 = *v5;
  swift_unknownObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
  v16 = v14[2];
  v15 = v14[3];
  if (v16 >= v15 >> 1)
    v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v14);
  v14[2] = v16 + 1;
  v17 = &v14[15 * v16];
  v17[4] = v13;
  *((_BYTE *)v17 + 40) = v10;
  *((_BYTE *)v17 + 41) = v11;
  v18 = v37;
  *(_DWORD *)((char *)v17 + 42) = v36;
  *((_WORD *)v17 + 23) = v18;
  *((_OWORD *)v17 + 3) = v22;
  *((_OWORD *)v17 + 4) = v31;
  result = v32;
  v20 = v33;
  v21 = v35;
  *((_OWORD *)v17 + 7) = v34;
  *((_OWORD *)v17 + 8) = v21;
  *((__n128 *)v17 + 5) = result;
  *((_OWORD *)v17 + 6) = v20;
  *((_BYTE *)v17 + 144) = 5;
  *v6 = v14;
  return result;
}

double key path getter for CustomLocalizedStringResourceConvertible.localizedStringResource : <A>A.Element@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  void (*v5)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;

  v4 = *(_QWORD *)(a2 + a1 - 8);
  v5 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5(&v12, AssociatedTypeWitness, v4);
  v7 = v14;
  v8 = v15;
  v9 = v18;
  *(_QWORD *)a3 = v12;
  *(_OWORD *)(a3 + 8) = v13;
  *(_QWORD *)(a3 + 24) = v7;
  *(_QWORD *)(a3 + 32) = v8;
  *(_OWORD *)(a3 + 40) = v16;
  *(_OWORD *)(a3 + 56) = v17;
  *(_QWORD *)(a3 + 72) = v9;
  result = *(double *)&v19;
  v11 = v20;
  *(_OWORD *)(a3 + 80) = v19;
  *(_OWORD *)(a3 + 96) = v11;
  return result;
}

_QWORD *protocol witness for StringInterpolationProtocol.init(literalCapacity:interpolationCount:) in conformance String.LocalizationValue.StringInterpolation@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  BOOL v5;

  a3[1] = 0;
  a3[2] = 0xE000000000000000;
  if (a2 + 0x4000000000000000 < 0)
  {
    __break(1u);
  }
  else
  {
    v5 = __OFADD__(result, 2 * a2);
    result = (_QWORD *)((char *)result + 2 * a2);
    if (!v5)
    {
      MEMORY[0x186DA4670](result);
      result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a2 & ~(a2 >> 63), 0, MEMORY[0x1E0DEE9D8]);
      *a3 = result;
      return result;
    }
  }
  __break(1u);
  return result;
}

void protocol witness for StringInterpolationProtocol.appendLiteral(_:) in conformance String.LocalizationValue.StringInterpolation(Swift::String *a1)
{
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(*a1);
}

uint64_t static String.LocalizationValue.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a2[1];
  v5 = a2[2];
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) == 0)
    return 0;
  if (v2 == v4 && v3 == v5)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance String.LocalizationValue(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a2[1];
  v5 = a2[2];
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) == 0)
    return 0;
  if (v2 == v4 && v3 == v5)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

__n128 protocol witness for ExpressibleByStringInterpolation.init(stringInterpolation:) in conformance String.LocalizationValue@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;
  unint64_t v3;

  result = *a1;
  v3 = a1[1].n128_u64[0];
  *a2 = *a1;
  a2[1].n128_u64[0] = v3;
  return result;
}

uint64_t *protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance String.LocalizationValue@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *result;
  v3 = result[1];
  *a2 = MEMORY[0x1E0DEE9D8];
  a2[1] = v2;
  a2[2] = v3;
  return result;
}

void *String.LocalizationValue.resolve(key:options:table:bundle:locale:performLocalization:)(void *a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t *a7, char a8)
{
  uint64_t v8;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  char v20;
  _OWORD *v21;
  __int128 v22;
  id v23;
  id v24;
  id v25;
  id v26;
  void *v27;
  uint64_t v28;
  __int128 v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  _BYTE v42[8];
  __int128 v43;
  _BYTE v44[25];
  _BYTE v45[16];
  _BYTE v46[16];
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  char v50;
  _BYTE v51[24];

  v12 = a3[1];
  v43 = *a3;
  *(_OWORD *)v44 = v12;
  *(_OWORD *)&v44[9] = *(__int128 *)((char *)a3 + 25);
  v13 = *a7;
  v14 = a7[1];
  v15 = a2;
  if (!a2)
  {
    a1 = *(void **)(v8 + 8);
    v15 = swift_bridgeObjectRetain();
  }
  if ((_QWORD)v43)
    v16 = v43;
  else
    v16 = MEMORY[0x1E0DEE9D8];
  v48 = v16;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v17 = swift_bridgeObjectRetain();
  v18 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_AJs5NeverOTg506_sSS10d3E17ef43V25argumentsWithReplacements_6localeSayAC14gH40VGSays7CVarArg_pGSg_AA6LocaleVtFA2GXEfU_s16IndexingIteratorVySays0tU0_pGGAF0X0VTf1cn_nTf4nng_n(v17, &v48, v13, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  if ((a8 & 1) != 0)
  {
    if (a6)
      v19 = a6;
    else
      v19 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
    outlined init with take of LocalePreferences?((uint64_t)&v44[8], (uint64_t)v46, &demangling cache variable for type metadata for String?);
    v20 = v44[24];
    outlined init with take of LocalePreferences?((uint64_t)v46, (uint64_t)&v47, &demangling cache variable for type metadata for String?);
    if (*((_QWORD *)&v47 + 1))
    {
      v48 = v47;
      if ((v20 & 1) != 0)
      {
        v25 = a6;
        outlined retain of String?((uint64_t)v46);
        v26 = objc_msgSend(v19, sel_localizations);
        if (!v26)
          v26 = (id)_ContiguousArrayBuffer._asCocoaArray()();
        v27 = (void *)objc_opt_self();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
        v28 = swift_allocObject();
        v29 = v48;
        *(_OWORD *)(v28 + 16) = xmmword_18205C850;
        *(_OWORD *)(v28 + 32) = v29;
        v30 = objc_msgSend(v27, sel_preferredLocalizationsFromArray_forPreferences_, v26, _ContiguousArrayBuffer._asCocoaArray()());

        swift_unknownObjectRelease();
        if (v30)
        {
          type metadata accessor for __SwiftDeferredNSArray();
          swift_unknownObjectRetain();
          if (swift_dynamicCastClass())
          {
            swift_retain();

          }
          v31 = swift_dynamicCastClass();
          if (v31)
          {
            v21 = (_OWORD *)v31;

          }
          else
          {
            swift_unknownObjectRelease();
            objc_msgSend(v30, sel_copy);
            v32 = _bridgeCocoaArray<A>(_:)();
            swift_unknownObjectRelease();
            v21 = (_OWORD *)specialized _arrayForceCast<A, B>(_:)(v32);

            swift_bridgeObjectRelease();
          }
        }
        else
        {
          v21 = (_OWORD *)MEMORY[0x1E0DEE9D8];
        }
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
        v21 = (_OWORD *)swift_allocObject();
        v22 = v47;
        v21[1] = xmmword_18205C850;
        v21[2] = v22;
        v23 = a6;
        outlined retain of String?((uint64_t)v46);
      }
    }
    else
    {
      v24 = a6;
      v21 = 0;
    }
    v33 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v34 = String._bridgeToObjectiveCImpl()();
    if (a5)
    {
      v35 = (void *)String._bridgeToObjectiveCImpl()();
      if (!v21)
      {
LABEL_26:
        v36 = objc_msgSend(v19, sel_localizedStringForKey_value_table_localizations_, v33, v34, v35, v21);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();

        a1 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
        v15 = v37;

        goto LABEL_27;
      }
    }
    else
    {
      v35 = 0;
      if (!v21)
        goto LABEL_26;
    }
    v21 = (_OWORD *)_ContiguousArrayBuffer._asCocoaArray()();
    goto LABEL_26;
  }
LABEL_27:
  if (!*(_QWORD *)(v18 + 16))
  {
    outlined init with take of LocalePreferences?((uint64_t)&v43 + 8, (uint64_t)v45, &demangling cache variable for type metadata for String.LocalizationOptions._PluralizationNumber?);
    outlined init with take of LocalePreferences?((uint64_t)v45, (uint64_t)&v49, &demangling cache variable for type metadata for String.LocalizationOptions._PluralizationNumber?);
    if ((v50 & 1) != 0
      || (outlined init with take of AttributedString.LocalizationOptions._PluralizationNumber(&v49, (uint64_t)v51),
          String._bridgeToObjectiveCImpl()(),
          v39 = (id)_CFStringGetFormatSpecifierConfiguration(),
          swift_unknownObjectRelease(),
          !v39))
    {
      swift_bridgeObjectRelease();
      return a1;
    }

  }
  swift_unknownObjectRetain();
  v38 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_s7CVarArg_p6vararg_AJ15_AttributeFixupOSg11attrStrInfots5NeverOTg506_sSS10d3E17ef101V23_formatAttributedString_17preparedArguments7options5scope0D13Configuration6localeAA0eF0VSS_SayAC14gh51VGAK0B7OptionsVxmSo12NSDictionaryCSgAA6LocaleVtAA14l11ScopeRzlFs7ij17_p6vararg_AM01_R5m9OSg11attrO44InfotAMXEfU_AA0R6ScopesO0A10AttributesV_TGm5AF6LocaleVTf1cn_nTm(v18, v13, v14, (uint64_t)v42, (uint64_t (*)(void))_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_s7CVarArg_ps5NeverOTg506_sSS10d3E17ef106V7resolve3key7options5table6bundle6locale07performB0S2SSg_SSAAE0B7OptionsVAKSo8NSBundleCSgAA6LocaleVSbtFs7ij6_pAC14gH6VXEfU_AF0Z0VTf1cn_nTf4ng_n);
  swift_bridgeObjectRelease();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  outlined retain of String.LocalizationOptions((uint64_t)&v43);
  a1 = specialized withVaList<A>(_:_:)(v38, (uint64_t)a1, v15, v13, v14);
  outlined release of String.LocalizationOptions((uint64_t)&v43);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_unknownObjectRelease();
  return a1;
}

void *String.init(localized:defaultValue:table:bundle:locale:comment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v25;
  id v26;
  _QWORD v27[4];
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  v10 = *a4;
  v12 = *a8;
  v11 = a8[1];
  StaticString.description.getter();
  v28 = 256;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v27[0] = MEMORY[0x1E0DEE9D8];
  memset(&v27[1], 0, 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  v25 = v11;
  v13 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_AJs5NeverOTg506_sSS10d3E17ef43V25argumentsWithReplacements_6localeSayAC14gH40VGSays7CVarArg_pGSg_AA6LocaleVtFA2GXEfU_s16IndexingIteratorVySays0tU0_pGGAF0X0VTf1cn_nTf4nng_n(v10, v27, v12, v11);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  if (a7)
    v14 = a7;
  else
    v14 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v15 = String._bridgeToObjectiveCImpl()();
  v26 = a7;
  swift_bridgeObjectRelease();
  v16 = String._bridgeToObjectiveCImpl()();
  if (a6)
    v17 = (void *)String._bridgeToObjectiveCImpl()();
  else
    v17 = 0;
  v18 = objc_msgSend(v14, sel_localizedStringForKey_value_table_localizations_, v15, v16, v17, 0, a5);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v21 = v20;

  if (*(_QWORD *)(v13 + 16))
  {
    swift_unknownObjectRetain();
    v22 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_s7CVarArg_ps5NeverOTg506_sSS10d3E17ef106V7resolve3key7options5table6bundle6locale07performB0S2SSg_SSAAE0B7OptionsVAKSo8NSBundleCSgAA6LocaleVSbtFs7ij6_pAC14gH6VXEfU_AF0Z0VTf1cn_nTf4ng_n(v13);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    v19 = specialized withVaList<A>(_:_:)(v22, (uint64_t)v19, v21, v12, v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  return v19;
}

void *String.init(localized:table:bundle:localization:locale:comment:)(uint64_t *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  id v26;
  uint64_t v27;
  _QWORD v28[4];
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  char v32;

  v11 = *a1;
  v12 = *a7;
  v13 = a7[1];
  v29 = 256;
  v30 = a5;
  v31 = a6;
  v32 = 0;
  v28[0] = MEMORY[0x1E0DEE9D8];
  memset(&v28[1], 0, 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  v25 = v13;
  v27 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_AJs5NeverOTg506_sSS10d3E17ef43V25argumentsWithReplacements_6localeSayAC14gH40VGSays7CVarArg_pGSg_AA6LocaleVtFA2GXEfU_s16IndexingIteratorVySays0tU0_pGGAF0X0VTf1cn_nTf4nng_n(v11, v28, v12, v13);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  if (a4)
  {
    v14 = a4;
    if (a6)
    {
LABEL_3:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      v15 = swift_allocObject();
      *(_OWORD *)(v15 + 16) = xmmword_18205C850;
      *(_QWORD *)(v15 + 32) = a5;
      *(_QWORD *)(v15 + 40) = a6;
      goto LABEL_6;
    }
  }
  else
  {
    v14 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
    if (a6)
      goto LABEL_3;
  }
  v15 = 0;
LABEL_6:
  v16 = String._bridgeToObjectiveCImpl()();
  v26 = a4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v17 = String._bridgeToObjectiveCImpl()();
  if (a3)
  {
    v18 = (void *)String._bridgeToObjectiveCImpl()();
    if (!v15)
      goto LABEL_9;
    goto LABEL_8;
  }
  v18 = 0;
  if (v15)
LABEL_8:
    v15 = _ContiguousArrayBuffer._asCocoaArray()();
LABEL_9:
  v19 = objc_msgSend(v14, sel_localizedStringForKey_value_table_localizations_, v16, v17, v18, v15);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v22 = v21;

  if (*(_QWORD *)(v27 + 16))
  {
    swift_unknownObjectRetain();
    v23 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_s7CVarArg_ps5NeverOTg506_sSS10d3E17ef106V7resolve3key7options5table6bundle6locale07performB0S2SSg_SSAAE0B7OptionsVAKSo8NSBundleCSgAA6LocaleVSbtFs7ij6_pAC14gH6VXEfU_AF0Z0VTf1cn_nTf4ng_n(v27);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v20 = specialized withVaList<A>(_:_:)(v23, (uint64_t)v20, v22, v12, v25);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {

  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  return v20;
}

void *String.init(localized:options:table:bundle:locale:comment:)(uint64_t *a1, __int128 *a2, uint64_t a3, void *a4, void *a5, uint64_t *a6)
{
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  char v14;
  _OWORD *v15;
  __int128 v16;
  id v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  uint64_t v22;
  __int128 v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  __int128 v40;
  _BYTE v41[25];
  _BYTE v42[16];
  _BYTE v43[16];
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  char v47;
  _BYTE v48[24];

  v8 = *a1;
  v9 = a2[1];
  v40 = *a2;
  *(_OWORD *)v41 = v9;
  *(_OWORD *)&v41[9] = *(__int128 *)((char *)a2 + 25);
  v11 = *a6;
  v10 = a6[1];
  if ((_QWORD)v40)
    v12 = v40;
  else
    v12 = MEMORY[0x1E0DEE9D8];
  v45 = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  v37 = v10;
  v38 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_AJs5NeverOTg506_sSS10d3E17ef43V25argumentsWithReplacements_6localeSayAC14gH40VGSays7CVarArg_pGSg_AA6LocaleVtFA2GXEfU_s16IndexingIteratorVySays0tU0_pGGAF0X0VTf1cn_nTf4nng_n(v8, &v45, v11, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  if (a5)
    v13 = a5;
  else
    v13 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  outlined init with take of LocalePreferences?((uint64_t)&v41[8], (uint64_t)v43, &demangling cache variable for type metadata for String?);
  v14 = v41[24];
  outlined init with take of LocalePreferences?((uint64_t)v43, (uint64_t)&v44, &demangling cache variable for type metadata for String?);
  v39 = a5;
  if (*((_QWORD *)&v44 + 1))
  {
    v45 = v44;
    if ((v14 & 1) != 0)
    {
      v36 = a4;
      v19 = a5;
      outlined retain of String?((uint64_t)v43);
      v20 = objc_msgSend(v13, sel_localizations);
      if (!v20)
        v20 = (id)_ContiguousArrayBuffer._asCocoaArray()();
      v21 = (void *)objc_opt_self();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      v22 = swift_allocObject();
      v23 = v45;
      *(_OWORD *)(v22 + 16) = xmmword_18205C850;
      *(_OWORD *)(v22 + 32) = v23;
      v24 = objc_msgSend(v21, sel_preferredLocalizationsFromArray_forPreferences_, v20, _ContiguousArrayBuffer._asCocoaArray()());

      swift_unknownObjectRelease();
      if (v24)
      {
        type metadata accessor for __SwiftDeferredNSArray();
        swift_unknownObjectRetain();
        if (swift_dynamicCastClass())
        {
          swift_retain();

        }
        v25 = swift_dynamicCastClass();
        if (v25)
        {
          v15 = (_OWORD *)v25;

        }
        else
        {
          swift_unknownObjectRelease();
          objc_msgSend(v24, sel_copy);
          v26 = _bridgeCocoaArray<A>(_:)();
          swift_unknownObjectRelease();
          v15 = (_OWORD *)specialized _arrayForceCast<A, B>(_:)(v26);

          swift_bridgeObjectRelease();
        }
      }
      else
      {
        v15 = (_OWORD *)MEMORY[0x1E0DEE9D8];
      }
      a4 = v36;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      v15 = (_OWORD *)swift_allocObject();
      v16 = v44;
      v15[1] = xmmword_18205C850;
      v15[2] = v16;
      v17 = a5;
      outlined retain of String?((uint64_t)v43);
    }
  }
  else
  {
    v18 = a5;
    v15 = 0;
  }
  v27 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v28 = String._bridgeToObjectiveCImpl()();
  if (a4)
  {
    a4 = (void *)String._bridgeToObjectiveCImpl()();
    if (!v15)
      goto LABEL_24;
    goto LABEL_23;
  }
  if (v15)
LABEL_23:
    v15 = (_OWORD *)_ContiguousArrayBuffer._asCocoaArray()();
LABEL_24:
  v29 = objc_msgSend(v13, sel_localizedStringForKey_value_table_localizations_, v27, v28, a4, v15);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
  v32 = v31;

  if (!*(_QWORD *)(v38 + 16))
  {
    outlined init with take of LocalePreferences?((uint64_t)&v40 + 8, (uint64_t)v42, &demangling cache variable for type metadata for String.LocalizationOptions._PluralizationNumber?);
    outlined init with take of LocalePreferences?((uint64_t)v42, (uint64_t)&v46, &demangling cache variable for type metadata for String.LocalizationOptions._PluralizationNumber?);
    if ((v47 & 1) != 0
      || (outlined init with take of AttributedString.LocalizationOptions._PluralizationNumber(&v46, (uint64_t)v48),
          String._bridgeToObjectiveCImpl()(),
          v34 = (id)_CFStringGetFormatSpecifierConfiguration(),
          swift_unknownObjectRelease(),
          !v34))
    {
      swift_bridgeObjectRelease();
      goto LABEL_32;
    }

  }
  swift_unknownObjectRetain();
  v33 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_s7CVarArg_ps5NeverOTg506_sSS10d3E17ef106V7resolve3key7options5table6bundle6locale07performB0S2SSg_SSAAE0B7OptionsVAKSo8NSBundleCSgAA6LocaleVSbtFs7ij6_pAC14gH6VXEfU_AF0Z0VTf1cn_nTf4ng_n(v38);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  outlined retain of String.LocalizationOptions((uint64_t)&v40);
  v30 = specialized withVaList<A>(_:_:)(v33, (uint64_t)v30, v32, v11, v37);
  outlined release of String.LocalizationOptions((uint64_t)&v40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_unknownObjectRelease();
LABEL_32:

  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  outlined release of String.LocalizationOptions((uint64_t)&v40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v30;
}

void *String.init(localized:defaultValue:options:table:bundle:locale:comment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, __int128 *a5, uint64_t a6, uint64_t a7, void *a8, uint64_t *a9)
{
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  char v17;
  _OWORD *v18;
  __int128 v19;
  id v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  uint64_t v25;
  __int128 v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  __int128 v43;
  _BYTE v44[25];
  _BYTE v45[16];
  _BYTE v46[16];
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  char v50;
  _BYTE v51[24];

  v11 = *a4;
  v12 = a5[1];
  v43 = *a5;
  *(_OWORD *)v44 = v12;
  *(_OWORD *)&v44[9] = *(__int128 *)((char *)a5 + 25);
  v14 = *a9;
  v13 = a9[1];
  StaticString.description.getter();
  if ((_QWORD)v43)
    v15 = v43;
  else
    v15 = MEMORY[0x1E0DEE9D8];
  v48 = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  v40 = v13;
  v41 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_AJs5NeverOTg506_sSS10d3E17ef43V25argumentsWithReplacements_6localeSayAC14gH40VGSays7CVarArg_pGSg_AA6LocaleVtFA2GXEfU_s16IndexingIteratorVySays0tU0_pGGAF0X0VTf1cn_nTf4nng_n(v11, &v48, v14, v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  if (a8)
    v16 = a8;
  else
    v16 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  outlined init with take of LocalePreferences?((uint64_t)&v44[8], (uint64_t)v46, &demangling cache variable for type metadata for String?);
  v17 = v44[24];
  outlined init with take of LocalePreferences?((uint64_t)v46, (uint64_t)&v47, &demangling cache variable for type metadata for String?);
  v42 = a8;
  if (*((_QWORD *)&v47 + 1))
  {
    v48 = v47;
    if ((v17 & 1) != 0)
    {
      v22 = a8;
      outlined retain of String?((uint64_t)v46);
      v23 = objc_msgSend(v16, sel_localizations);
      if (!v23)
        v23 = (id)_ContiguousArrayBuffer._asCocoaArray()();
      v24 = (void *)objc_opt_self();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      v25 = swift_allocObject();
      v26 = v48;
      *(_OWORD *)(v25 + 16) = xmmword_18205C850;
      *(_OWORD *)(v25 + 32) = v26;
      v27 = objc_msgSend(v24, sel_preferredLocalizationsFromArray_forPreferences_, v23, _ContiguousArrayBuffer._asCocoaArray()());

      swift_unknownObjectRelease();
      if (v27)
      {
        type metadata accessor for __SwiftDeferredNSArray();
        swift_unknownObjectRetain();
        if (swift_dynamicCastClass())
        {
          swift_retain();

        }
        v28 = swift_dynamicCastClass();
        if (v28)
        {
          v18 = (_OWORD *)v28;

        }
        else
        {
          swift_unknownObjectRelease();
          objc_msgSend(v27, sel_copy);
          v29 = _bridgeCocoaArray<A>(_:)();
          swift_unknownObjectRelease();
          v18 = (_OWORD *)specialized _arrayForceCast<A, B>(_:)(v29);

          swift_bridgeObjectRelease();
        }
      }
      else
      {
        v18 = (_OWORD *)MEMORY[0x1E0DEE9D8];
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      v18 = (_OWORD *)swift_allocObject();
      v19 = v47;
      v18[1] = xmmword_18205C850;
      v18[2] = v19;
      v20 = a8;
      outlined retain of String?((uint64_t)v46);
    }
  }
  else
  {
    v21 = a8;
    v18 = 0;
  }
  v30 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v31 = String._bridgeToObjectiveCImpl()();
  if (a7)
  {
    v32 = (void *)String._bridgeToObjectiveCImpl()();
    if (!v18)
      goto LABEL_24;
    goto LABEL_22;
  }
  v32 = 0;
  if (v18)
LABEL_22:
    v18 = (_OWORD *)_ContiguousArrayBuffer._asCocoaArray()();
LABEL_24:
  v33 = objc_msgSend(v16, sel_localizedStringForKey_value_table_localizations_, v30, v31, v32, v18);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
  v36 = v35;

  if (!*(_QWORD *)(v41 + 16))
  {
    outlined init with take of LocalePreferences?((uint64_t)&v43 + 8, (uint64_t)v45, &demangling cache variable for type metadata for String.LocalizationOptions._PluralizationNumber?);
    outlined init with take of LocalePreferences?((uint64_t)v45, (uint64_t)&v49, &demangling cache variable for type metadata for String.LocalizationOptions._PluralizationNumber?);
    if ((v50 & 1) != 0
      || (outlined init with take of AttributedString.LocalizationOptions._PluralizationNumber(&v49, (uint64_t)v51),
          String._bridgeToObjectiveCImpl()(),
          v38 = (id)_CFStringGetFormatSpecifierConfiguration(),
          swift_unknownObjectRelease(),
          !v38))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_30;
    }

  }
  swift_unknownObjectRetain();
  v37 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_s7CVarArg_ps5NeverOTg506_sSS10d3E17ef106V7resolve3key7options5table6bundle6locale07performB0S2SSg_SSAAE0B7OptionsVAKSo8NSBundleCSgAA6LocaleVSbtFs7ij6_pAC14gH6VXEfU_AF0Z0VTf1cn_nTf4ng_n(v41);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  outlined retain of String.LocalizationOptions((uint64_t)&v43);
  v34 = specialized withVaList<A>(_:_:)(v37, (uint64_t)v34, v36, v14, v40);
  outlined release of String.LocalizationOptions((uint64_t)&v43);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_unknownObjectRelease();
LABEL_30:

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  outlined release of String.LocalizationOptions((uint64_t)&v43);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v34;
}

void *String.init(localized:options:table:bundle:localization:locale:comment:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  _QWORD v46[4];
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  char v51;

  v8 = *a1;
  v9 = *a2;
  v10 = a2[1];
  v11 = *((_BYTE *)a2 + 16);
  v42 = *((_BYTE *)a2 + 17);
  v12 = a2[4];
  v13 = *((_BYTE *)a2 + 40);
  v14 = *a8;
  v43 = a8[1];
  if (a7)
  {
    v15 = a7;
  }
  else
  {
    a6 = a2[3];
    swift_bridgeObjectRetain();
    v15 = v12;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v46[2] = v9;
  v46[3] = v10;
  v47 = v11;
  v48 = v42;
  v49 = a6;
  v50 = v15;
  v51 = v13;
  if (v9)
    v17 = v9;
  else
    v17 = MEMORY[0x1E0DEE9D8];
  v46[0] = v17;
  v46[1] = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  v41 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_AJs5NeverOTg506_sSS10d3E17ef43V25argumentsWithReplacements_6localeSayAC14gH40VGSays7CVarArg_pGSg_AA6LocaleVtFA2GXEfU_s16IndexingIteratorVySays0tU0_pGGAF0X0VTf1cn_nTf4nng_n(v8, v46, v14, v43);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  if (a5)
  {
    v18 = a5;
    if (v15)
      goto LABEL_9;
LABEL_18:
    v26 = a5;
    v25 = 0;
    goto LABEL_22;
  }
  v18 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  if (!v15)
    goto LABEL_18;
LABEL_9:
  if ((v13 & 1) != 0)
  {
    v19 = a5;
    swift_bridgeObjectRetain();
    v20 = objc_msgSend(v18, sel_localizations);
    if (!v20)
      v20 = (id)_ContiguousArrayBuffer._asCocoaArray()();
    v21 = (void *)objc_opt_self();
    v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_18205C850;
    *(_QWORD *)(v22 + 32) = a6;
    *(_QWORD *)(v22 + 40) = v15;
    v23 = objc_msgSend(v21, sel_preferredLocalizationsFromArray_forPreferences_, v20, _ContiguousArrayBuffer._asCocoaArray()());

    swift_unknownObjectRelease();
    if (v23)
    {
      type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      if (swift_dynamicCastClass())
      {
        swift_retain();

      }
      v24 = swift_dynamicCastClass();
      if (v24)
      {
        v25 = v24;

      }
      else
      {
        swift_unknownObjectRelease();
        objc_msgSend(v23, sel_copy);
        v28 = _bridgeCocoaArray<A>(_:)();
        swift_unknownObjectRelease();
        v25 = specialized _arrayForceCast<A, B>(_:)(v28);

        swift_bridgeObjectRelease();
      }
    }
    else
    {
      v25 = MEMORY[0x1E0DEE9D8];
    }
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_18205C850;
    *(_QWORD *)(v25 + 32) = a6;
    *(_QWORD *)(v25 + 40) = v15;
    v27 = a5;
    swift_bridgeObjectRetain();
  }
LABEL_22:
  v29 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v30 = String._bridgeToObjectiveCImpl()();
  if (a4)
  {
    v31 = (void *)String._bridgeToObjectiveCImpl()();
    v32 = v18;
    if (!v25)
      goto LABEL_26;
    goto LABEL_24;
  }
  v31 = 0;
  v32 = v18;
  if (v25)
LABEL_24:
    v25 = _ContiguousArrayBuffer._asCocoaArray()();
LABEL_26:
  v33 = objc_msgSend(v32, sel_localizedStringForKey_value_table_localizations_, v29, v30, v31, v25, v40);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
  v36 = v35;

  if (!*(_QWORD *)(v41 + 16))
  {
    if ((v42 & 1) != 0
      || (String._bridgeToObjectiveCImpl()(),
          v38 = (id)_CFStringGetFormatSpecifierConfiguration(),
          swift_unknownObjectRelease(),
          !v38))
    {
      swift_bridgeObjectRelease();
      goto LABEL_32;
    }

  }
  swift_unknownObjectRetain();
  v37 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_s7CVarArg_ps5NeverOTg506_sSS10d3E17ef106V7resolve3key7options5table6bundle6locale07performB0S2SSg_SSAAE0B7OptionsVAKSo8NSBundleCSgAA6LocaleVSbtFs7ij6_pAC14gH6VXEfU_AF0Z0VTf1cn_nTf4ng_n(v41);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  v34 = specialized withVaList<A>(_:_:)(v37, (uint64_t)v34, v36, v14, v43);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_32:
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  return v34;
}

void InflectionConcept.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)v1;
  if ((*(_BYTE *)(v1 + 16) & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    specialized Array<A>.hash(into:)(a1, v3);
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance InflectionConcept.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x657A696C61636F6CLL;
  else
    return 0x41664F736D726574;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance InflectionConcept.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized InflectionConcept.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance InflectionConcept.CodingKeys()
{
  lazy protocol witness table accessor for type InflectionConcept.CodingKeys and conformance InflectionConcept.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance InflectionConcept.CodingKeys()
{
  lazy protocol witness table accessor for type InflectionConcept.CodingKeys and conformance InflectionConcept.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance InflectionConcept.LocalizedPhraseCodingKeys()
{
  lazy protocol witness table accessor for type InflectionConcept.LocalizedPhraseCodingKeys and conformance InflectionConcept.LocalizedPhraseCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance InflectionConcept.LocalizedPhraseCodingKeys()
{
  lazy protocol witness table accessor for type InflectionConcept.LocalizedPhraseCodingKeys and conformance InflectionConcept.LocalizedPhraseCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance InflectionConcept.TermsOfAddressCodingKeys()
{
  lazy protocol witness table accessor for type InflectionConcept.TermsOfAddressCodingKeys and conformance InflectionConcept.TermsOfAddressCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance InflectionConcept.TermsOfAddressCodingKeys()
{
  lazy protocol witness table accessor for type InflectionConcept.TermsOfAddressCodingKeys and conformance InflectionConcept.TermsOfAddressCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t InflectionConcept.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;

  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<InflectionConcept.LocalizedPhraseCodingKeys>);
  v15 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<InflectionConcept.TermsOfAddressCodingKeys>);
  v16 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<InflectionConcept.CodingKeys>);
  v20 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *v1;
  v14[1] = v1[1];
  v10 = *((_BYTE *)v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type InflectionConcept.CodingKeys and conformance InflectionConcept.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((v10 & 1) != 0)
  {
    v23 = 1;
    lazy protocol witness table accessor for type InflectionConcept.LocalizedPhraseCodingKeys and conformance InflectionConcept.LocalizedPhraseCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v11 = v17;
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v4, v11);
  }
  else
  {
    v22 = 0;
    lazy protocol witness table accessor for type InflectionConcept.TermsOfAddressCodingKeys and conformance InflectionConcept.TermsOfAddressCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v21 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [TermOfAddress]);
    lazy protocol witness table accessor for type [TermOfAddress] and conformance <A> [A](&lazy protocol witness table cache variable for type [TermOfAddress] and conformance <A> [A], (uint64_t (*)(void))lazy protocol witness table accessor for type TermOfAddress and conformance TermOfAddress, MEMORY[0x1E0DEAF10]);
    v12 = v18;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v6, v12);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v9, v7);
}

Swift::Int InflectionConcept.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  _BYTE v4[72];

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 16);
  Hasher.init(_seed:)();
  if ((v2 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    specialized Array<A>.hash(into:)((uint64_t)v4, v1);
  }
  return Hasher._finalize()();
}

uint64_t InflectionConcept.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;

  v40 = a2;
  v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<InflectionConcept.LocalizedPhraseCodingKeys>);
  v43 = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41);
  v42 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<InflectionConcept.TermsOfAddressCodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<InflectionConcept.CodingKeys>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v44 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v12);
  lazy protocol witness table accessor for type InflectionConcept.CodingKeys and conformance InflectionConcept.CodingKeys();
  v13 = v45;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v13)
  {
    v38 = v5;
    v39 = v4;
    v14 = v42;
    v15 = v43;
    v45 = v9;
    v16 = v11;
    v17 = KeyedDecodingContainer.allKeys.getter();
    v18 = v17;
    v19 = v8;
    if (*(_QWORD *)(v17 + 16) == 1)
    {
      v20 = *(_BYTE *)(v17 + 32);
      if ((v20 & 1) != 0)
      {
        v48 = 1;
        lazy protocol witness table accessor for type InflectionConcept.LocalizedPhraseCodingKeys and conformance InflectionConcept.LocalizedPhraseCodingKeys();
        v21 = v14;
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        v39 = v18;
        v22 = v41;
        v23 = KeyedDecodingContainer.decode(_:forKey:)();
        v24 = v45;
        v31 = v23;
        v32 = *(void (**)(char *, uint64_t))(v15 + 8);
        v34 = v33;
        v32(v21, v22);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v24 + 8))(v16, v19);
        v35 = v34;
      }
      else
      {
        v47 = 0;
        lazy protocol witness table accessor for type InflectionConcept.TermsOfAddressCodingKeys and conformance InflectionConcept.TermsOfAddressCodingKeys();
        v29 = v16;
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [TermOfAddress]);
        lazy protocol witness table accessor for type [TermOfAddress] and conformance <A> [A](&lazy protocol witness table cache variable for type [TermOfAddress] and conformance <A> [A], (uint64_t (*)(void))lazy protocol witness table accessor for type TermOfAddress and conformance TermOfAddress, MEMORY[0x1E0DEAF40]);
        v30 = v39;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        (*(void (**)(char *, uint64_t))(v38 + 8))(v7, v30);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v45 + 8))(v29, v19);
        v35 = 0;
        v31 = v46;
      }
      v36 = v40;
      *v40 = v31;
      v36[1] = v35;
      *((_BYTE *)v36 + 16) = v20;
    }
    else
    {
      v25 = type metadata accessor for DecodingError();
      swift_allocError();
      v27 = v26;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *v27 = &type metadata for InflectionConcept;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v27, *MEMORY[0x1E0DEC450], v25);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v16, v8);
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance InflectionConcept()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  _BYTE v4[72];

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 16);
  Hasher.init(_seed:)();
  if ((v2 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    specialized Array<A>.hash(into:)((uint64_t)v4, v1);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance InflectionConcept(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)v1;
  if ((*(_BYTE *)(v1 + 16) & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    specialized Array<A>.hash(into:)(a1, v3);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance InflectionConcept()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  _BYTE v4[72];

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 16);
  Hasher.init(_seed:)();
  if ((v2 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    specialized Array<A>.hash(into:)((uint64_t)v4, v1);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance InflectionConcept@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return InflectionConcept.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InflectionConcept(_QWORD *a1)
{
  return InflectionConcept.encode(to:)(a1);
}

uint64_t AttributedString.LocalizationOptions.replacements.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AttributedString.LocalizationOptions.replacements.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*AttributedString.LocalizationOptions.replacements.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t AttributedString.LocalizationOptions.concepts.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AttributedString.LocalizationOptions.concepts.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*AttributedString.LocalizationOptions.concepts.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t AttributedString.LocalizationOptions.inflect.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t AttributedString.LocalizationOptions.inflect.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = result;
  return result;
}

uint64_t (*AttributedString.LocalizationOptions.inflect.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t AttributedString.LocalizationOptions.applyReplacementIndexAttribute.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t AttributedString.LocalizationOptions.applyReplacementIndexAttribute.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 17) = result;
  return result;
}

uint64_t (*AttributedString.LocalizationOptions.applyReplacementIndexAttribute.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void String.LocalizationOptions._PluralizationNumber.hash(into:)()
{
  uint64_t v0;
  Swift::UInt v1;

  if ((*(_BYTE *)(v0 + 8) & 1) != 0)
  {
    v1 = 1;
  }
  else
  {
    v1 = *(_QWORD *)v0;
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v1);
}

BOOL static String.LocalizationOptions._PluralizationNumber.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
    return (*(_BYTE *)(a2 + 8) & 1) != 0;
  if ((*(_BYTE *)(a2 + 8) & 1) != 0)
    return 0;
  return *(_QWORD *)a1 == *(_QWORD *)a2;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x6E776F6E6B6E75;
  else
    return 0x6369666963657073;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized String.LocalizationOptions._PluralizationNumber.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys()
{
  lazy protocol witness table accessor for type AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys()
{
  lazy protocol witness table accessor for type AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys()
{
  lazy protocol witness table accessor for type AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys()
{
  lazy protocol witness table accessor for type AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys()
{
  lazy protocol witness table accessor for type AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys()
{
  lazy protocol witness table accessor for type AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t AttributedString.LocalizationOptions._PluralizationNumber.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys>);
  v17 = *(_QWORD *)(v4 - 8);
  v18 = v4;
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys>);
  v16 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys>);
  v19 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *v2;
  v13 = *((_BYTE *)v2 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((v13 & 1) != 0)
  {
    v21 = 1;
    lazy protocol witness table accessor for type AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v6, v18);
  }
  else
  {
    v20 = 0;
    lazy protocol witness table accessor for type AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v9, v7);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v12, v10);
}

Swift::Int String.LocalizationOptions._PluralizationNumber.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt v1;
  char v2;

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)();
  if ((v2 & 1) != 0)
    v1 = 1;
  else
    Hasher._combine(_:)(0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t AttributedString.LocalizationOptions._PluralizationNumber.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  char *v29;
  _QWORD *v30;
  char v31;
  char v32;

  v28 = a2;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys>);
  v25 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27);
  v29 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys>);
  v4 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys();
  v11 = v30;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v11)
    goto LABEL_7;
  v12 = v29;
  v23 = v4;
  v24 = v8;
  v30 = a1;
  v13 = KeyedDecodingContainer.allKeys.getter();
  if (*(_QWORD *)(v13 + 16) != 1)
  {
    v16 = type metadata accessor for DecodingError();
    swift_allocError();
    v18 = v17;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v18 = &type metadata for AttributedString.LocalizationOptions._PluralizationNumber;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v18, *MEMORY[0x1E0DEC450], v16);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v7);
    a1 = v30;
LABEL_7:
    v19 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v19);
  }
  v14 = *(_BYTE *)(v13 + 32);
  if ((v14 & 1) != 0)
  {
    v32 = 1;
    lazy protocol witness table accessor for type AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v12, v27);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v7);
    v15 = 0;
  }
  else
  {
    v31 = 0;
    lazy protocol witness table accessor for type AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v21 = v26;
    v15 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v6, v21);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v7);
  }
  v22 = v28;
  *v28 = v15;
  *((_BYTE *)v22 + 8) = v14;
  v19 = (uint64_t)v30;
  return __swift_destroy_boxed_opaque_existential_1(v19);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance String.LocalizationOptions._PluralizationNumber()
{
  uint64_t v0;
  Swift::UInt v1;
  char v2;

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)();
  if ((v2 & 1) != 0)
    v1 = 1;
  else
    Hasher._combine(_:)(0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance AttributedString.LocalizationOptions._PluralizationNumber@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return AttributedString.LocalizationOptions._PluralizationNumber.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AttributedString.LocalizationOptions._PluralizationNumber(_QWORD *a1)
{
  return AttributedString.LocalizationOptions._PluralizationNumber.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance String.LocalizationOptions._PluralizationNumber(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t result;

  v3 = *(_BYTE *)(a1 + 8);
  result = *(unsigned __int8 *)(a2 + 8);
  if ((v3 & 1) == 0)
    return (*(_QWORD *)a1 == *(_QWORD *)a2) & ~(_DWORD)result;
  return result;
}

void AttributedString.LocalizationOptions._pluralizationNumber.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  char v3;

  v2 = *(_BYTE *)(v1 + 32);
  v3 = *(_BYTE *)(v1 + 33);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 24);
  *(_BYTE *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 9) = v3;
}

uint64_t AttributedString.LocalizationOptions._pluralizationNumber.setter(uint64_t result)
{
  uint64_t v1;
  char v2;
  char v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *(_BYTE *)(result + 9);
  *(_QWORD *)(v1 + 24) = *(_QWORD *)result;
  *(_BYTE *)(v1 + 32) = v2;
  *(_BYTE *)(v1 + 33) = v3;
  return result;
}

uint64_t (*AttributedString.LocalizationOptions._pluralizationNumber.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t AttributedString.LocalizationOptions._localization.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AttributedString.LocalizationOptions._localization.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  return result;
}

uint64_t (*AttributedString.LocalizationOptions._localization.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void AttributedString.LocalizationOptions.init()(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 256;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 0;
}

uint64_t static AttributedString.LocalizationOptions.termsOfAddressConcept(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  *(_QWORD *)a2 = 0;
  *(_WORD *)(a2 + 16) = 1;
  *(_QWORD *)(a2 + 24) = 0;
  *(_WORD *)(a2 + 32) = 256;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 56) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InflectionConcept>);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18205C850;
  *(_QWORD *)(v4 + 32) = a1;
  *(_QWORD *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 48) = 0;
  *(_QWORD *)(a2 + 8) = v4;
  return swift_bridgeObjectRetain();
}

uint64_t static AttributedString.LocalizationOptions.localizedPhraseConcept(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;

  *(_QWORD *)a3 = 0;
  *(_WORD *)(a3 + 16) = 1;
  *(_QWORD *)(a3 + 24) = 0;
  *(_WORD *)(a3 + 32) = 256;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 56) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InflectionConcept>);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_18205C850;
  *(_QWORD *)(v6 + 32) = a1;
  *(_QWORD *)(v6 + 40) = a2;
  *(_BYTE *)(v6 + 48) = 1;
  *(_QWORD *)(a3 + 8) = v6;
  return swift_bridgeObjectRetain();
}

uint64_t AttributedString.LocalizationOptions._nsOptions.getter()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t result;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;

  v1 = *(unsigned __int8 *)(v0 + 17);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_BYTE *)(v0 + 32);
  v4 = *(_BYTE *)(v0 + 33);
  result = (uint64_t)objc_msgSend(objc_allocWithZone((Class)_NSStringFormattingOptions), sel_init);
  if (result)
  {
    v6 = (void *)result;
    if ((v4 & 1) != 0)
    {
      objc_msgSend((id)result, sel_setPluralizationNumber_, 0);
    }
    else
    {
      v7 = objc_allocWithZone((Class)NSNumber);
      if ((v3 & 1) != 0)
        v8 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v8 = v2;
      v9 = objc_msgSend(v7, sel_initWithInteger_, v8);
      objc_msgSend(v6, sel_setPluralizationNumber_, v9);

    }
    if (v1)
      return 2;
    else
      return 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t AttributedString.FormattingOptions.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t AttributedString.FormattingOptions.init(rawValue:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static AttributedString.FormattingOptions.applyReplacementIndexAttribute.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

uint64_t AttributedString.InterpolationOptions.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

void AttributedString.init(localized:options:table:bundle:locale:comment:)(uint64_t *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v11;
  void *v12;
  void *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];
  char v20;
  char v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v11 = *a1;
  v12 = (void *)a1[1];
  v13 = (void *)a1[2];
  v14 = *a2;
  v16 = *a6;
  v15 = a6[1];
  v19[0] = 0;
  v19[1] = 0;
  v20 = 1;
  v21 = v14 & 1;
  v22 = 0;
  v23 = 256;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  if (!v16)
  {
    if (one-time initialization token for cache != -1)
      swift_once();
    v18 = static LocaleCache.cache;
    v16 = LocaleCache.current.getter();
    v15 = v17;
  }
  specialized String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)(0, 0, (uint64_t)v19, a3, a4, (uint64_t)a5, v16, v15, 1u, v11, v12, v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  *a7 = v18;
}

uint64_t AttributedString.init<A>(localized:options:table:bundle:locale:comment:including:)@<X0>(__int128 *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, __int128 *a6@<X5>, _QWORD *a7@<X8>, uint64_t a8, uint64_t a9, _OWORD *a10, void *a11)
{
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  __int128 v19;
  uint64_t result;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  char v24;
  char v25;
  uint64_t v26;
  char v27;
  char v28;
  __int128 v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;

  v12 = *((_QWORD *)a1 + 2);
  v13 = *((_BYTE *)a2 + 16);
  v14 = *((_BYTE *)a2 + 17);
  v15 = *((_QWORD *)a2 + 3);
  v16 = *((_BYTE *)a2 + 32);
  v17 = *((_BYTE *)a2 + 33);
  v18 = *((_BYTE *)a2 + 56);
  v31 = *a1;
  v32 = v12;
  v19 = *a2;
  v24 = v13;
  v25 = v14;
  v26 = v15;
  v27 = v16;
  v28 = v17;
  v29 = *(__int128 *)((char *)a2 + 40);
  v30 = v18;
  v22 = *a6;
  v23 = v19;
  AttributedString.init<A>(localized:options:table:bundle:locale:comment:including:)((uint64_t *)&v31, (uint64_t *)&v23, a3, a4, a5, (uint64_t *)&v22, &v33, v21, (uint64_t)a10, a10, a11);
  result = swift_release();
  *a7 = v33;
  return result;
}

void AttributedString.init(localized:defaultValue:options:table:bundle:locale:comment:)(uint64_t *a1@<X3>, char *a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, void *a5@<X7>, uint64_t *a6@<X8>, uint64_t *a7)
{
  void *v10;
  uint64_t v11;
  void *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  _QWORD v22[2];
  char v23;
  char v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;
  char v29;

  v11 = *a1;
  v10 = (void *)a1[1];
  v12 = (void *)a1[2];
  v13 = *a2;
  v14 = *a7;
  v15 = a7[1];
  v22[0] = 0;
  v22[1] = 0;
  v23 = 1;
  v24 = v13 & 1;
  v25 = 0;
  v26 = 256;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v16 = StaticString.description.getter();
  v18 = v17;
  if (!v14)
  {
    if (one-time initialization token for cache != -1)
      swift_once();
    v21 = static LocaleCache.cache;
    v14 = LocaleCache.current.getter();
    v15 = v19;
  }
  specialized String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)(v16, v18, (uint64_t)v22, a3, a4, (uint64_t)a5, v14, v15, 1u, v11, v10, v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  *a6 = v21;
}

uint64_t AttributedString.init<A>(localized:defaultValue:options:table:bundle:locale:comment:including:)@<X0>(__int128 *a1@<X3>, __int128 *a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, void *a5@<X7>, _QWORD *a6@<X8>, __int128 *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _OWORD *a12, void *a13)
{
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  __int128 v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  char v28;
  char v29;
  uint64_t v30;
  char v31;
  char v32;
  __int128 v33;
  char v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;

  v14 = *((_QWORD *)a1 + 2);
  v15 = *((_BYTE *)a2 + 16);
  v16 = *((_BYTE *)a2 + 17);
  v17 = *((_QWORD *)a2 + 3);
  v18 = *((_BYTE *)a2 + 32);
  v19 = *((_BYTE *)a2 + 33);
  v20 = *((_BYTE *)a2 + 56);
  v35 = *a1;
  v36 = v14;
  v21 = *a2;
  v28 = v15;
  v29 = v16;
  v30 = v17;
  v31 = v18;
  v32 = v19;
  v33 = *(__int128 *)((char *)a2 + 40);
  v34 = v20;
  v26 = *a7;
  v27 = v21;
  AttributedString.init<A>(localized:defaultValue:options:table:bundle:locale:comment:including:)((uint64_t *)&v35, (uint64_t *)&v27, a3, a4, a5, &v37, (uint64_t *)&v26, v23, v24, v25, (uint64_t)a12, a12, a13);
  result = swift_release();
  *a6 = v37;
  return result;
}

uint64_t AttributedString.init(localized:options:table:bundle:locale:comment:)@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v11;
  void *v12;
  void *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  _OWORD v20[2];
  _OWORD v21[2];

  v11 = *a1;
  v12 = (void *)a1[1];
  v13 = (void *)a1[2];
  v14 = a2[1];
  v20[0] = *a2;
  v20[1] = v14;
  v21[0] = a2[2];
  *(_OWORD *)((char *)v21 + 9) = *(_OWORD *)((char *)a2 + 41);
  v15 = *a6;
  if (*a6)
  {
    v16 = a6[1];
  }
  else
  {
    if (one-time initialization token for cache != -1)
      swift_once();
    v19 = static LocaleCache.cache;
    v15 = LocaleCache.current.getter();
    v16 = v17;
  }
  specialized String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)(0, 0, (uint64_t)v20, a3, a4, (uint64_t)a5, v15, v16, 1u, v11, v12, v13);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  outlined release of AttributedString.LocalizationOptions((uint64_t)v20);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a7 = v19;
  return result;
}

uint64_t AttributedString.init<A>(localized:options:table:bundle:locale:comment:including:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t *a6@<X5>, _QWORD *a7@<X8>, uint64_t a8, uint64_t a9, _OWORD *a10, void *a11)
{
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  _QWORD v33[2];
  _QWORD v34[2];
  char v35;
  char v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v13 = a3;
  v14 = a10;
  v15 = a9;
  v16 = a1[1];
  v17 = a1[2];
  v19 = *a2;
  v18 = a2[1];
  v20 = *((_BYTE *)a2 + 16);
  v21 = *((_BYTE *)a2 + 17);
  v22 = a2[3];
  v23 = *((_BYTE *)a2 + 32);
  v24 = *((_BYTE *)a2 + 33);
  v25 = a2[5];
  v26 = a2[6];
  v27 = *((_BYTE *)a2 + 56);
  v29 = *a6;
  v28 = a6[1];
  v43 = *a1;
  v44 = v16;
  v45 = v17;
  v34[0] = v19;
  v34[1] = v18;
  v35 = v20;
  v36 = v21;
  v37 = v22;
  v38 = v23;
  v39 = v24;
  v40 = v25;
  v41 = v26;
  v42 = v27;
  if (!v29)
  {
    if (one-time initialization token for cache != -1)
      swift_once();
    v33[0] = static LocaleCache.cache;
    v29 = LocaleCache.current.getter();
    v15 = a9;
    v13 = a3;
    v14 = a10;
  }
  v33[0] = v29;
  v33[1] = v28;
  String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)(0, 0, (uint64_t)v34, v13, a4, (uint64_t)a5, (uint64_t)v33, v15, 1u, v14, a11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a7 = v46;
  return result;
}

uint64_t AttributedString.init(localized:defaultValue:options:table:bundle:locale:comment:)@<X0>(uint64_t *a1@<X3>, _OWORD *a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, void *a5@<X7>, uint64_t *a6@<X8>, uint64_t *a7)
{
  void *v10;
  uint64_t v11;
  void *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v22;
  _OWORD v23[2];
  _OWORD v24[2];

  v11 = *a1;
  v10 = (void *)a1[1];
  v12 = (void *)a1[2];
  v13 = a2[1];
  v23[0] = *a2;
  v23[1] = v13;
  v24[0] = a2[2];
  *(_OWORD *)((char *)v24 + 9) = *(_OWORD *)((char *)a2 + 41);
  v14 = *a7;
  v15 = a7[1];
  v16 = StaticString.description.getter();
  v18 = v17;
  if (!v14)
  {
    if (one-time initialization token for cache != -1)
      swift_once();
    v22 = static LocaleCache.cache;
    v14 = LocaleCache.current.getter();
    v15 = v19;
  }
  specialized String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)(v16, v18, (uint64_t)v23, a3, a4, (uint64_t)a5, v14, v15, 1u, v11, v10, v12);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  outlined release of AttributedString.LocalizationOptions((uint64_t)v23);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a6 = v22;
  return result;
}

uint64_t AttributedString.init<A>(localized:defaultValue:options:table:bundle:locale:comment:including:)@<X0>(uint64_t *a1@<X3>, uint64_t *a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, void *a5@<X7>, _QWORD *a6@<X8>, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _OWORD *a12, void *a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  char v33;
  _QWORD v38[2];
  _QWORD v39[2];
  char v40;
  char v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v13 = a1[1];
  v14 = a1[2];
  v15 = *a2;
  v16 = a2[1];
  v17 = *((_BYTE *)a2 + 16);
  v33 = *((_BYTE *)a2 + 17);
  v18 = a2[3];
  v19 = *((_BYTE *)a2 + 32);
  v20 = *((_BYTE *)a2 + 33);
  v22 = a2[5];
  v21 = a2[6];
  v23 = *((_BYTE *)a2 + 56);
  v24 = *a7;
  v32 = a7[1];
  v48 = *a1;
  v49 = v13;
  v50 = v14;
  v25 = StaticString.description.getter();
  v39[0] = v15;
  v39[1] = v16;
  v40 = v17;
  v41 = v33;
  v42 = v18;
  v43 = v19;
  v44 = v20;
  v45 = v22;
  v46 = v21;
  v47 = v23;
  if (v24)
  {
    v27 = v32;
  }
  else
  {
    v28 = v25;
    v29 = v26;
    if (one-time initialization token for cache != -1)
      swift_once();
    v38[0] = static LocaleCache.cache;
    v24 = LocaleCache.current.getter();
    v27 = v30;
    v26 = v29;
    v25 = v28;
  }
  v38[0] = v24;
  v38[1] = v27;
  String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)(v25, v26, (uint64_t)v39, a3, a4, (uint64_t)a5, (uint64_t)v38, a11, 1u, a12, a13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a6 = v51;
  return result;
}

uint64_t AttributedString.init<A>(localized:options:table:bundle:locale:comment:including:)@<X0>(__int128 *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, __int128 *a6@<X5>, _QWORD *a7@<X8>, uint64_t a8, uint64_t a9, _OWORD *a10, void *a11)
{
  uint64_t v12;
  char v13;
  uint64_t result;
  uint64_t v15;
  __int128 v16;
  uint64_t v17[2];
  char v18;
  char v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v12 = *((_QWORD *)a1 + 2);
  v13 = *a2;
  v25 = *a1;
  v26 = v12;
  v17[0] = 0;
  v17[1] = 0;
  v18 = 1;
  v19 = v13 & 1;
  v20 = 0;
  v21 = 256;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v16 = *a6;
  AttributedString.init<A>(localized:options:table:bundle:locale:comment:including:)((uint64_t *)&v25, v17, a3, a4, a5, (uint64_t *)&v16, &v27, v15, (uint64_t)a10, a10, a11);
  result = swift_release();
  *a7 = v27;
  return result;
}

uint64_t AttributedString.init<A>(localized:defaultValue:options:table:bundle:locale:comment:including:)@<X0>(__int128 *a1@<X3>, char *a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, void *a5@<X7>, _QWORD *a6@<X8>, __int128 *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _OWORD *a12, void *a13)
{
  uint64_t v14;
  char v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21[2];
  char v22;
  char v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  v14 = *((_QWORD *)a1 + 2);
  v15 = *a2;
  v29 = *a1;
  v30 = v14;
  v21[0] = 0;
  v21[1] = 0;
  v22 = 1;
  v23 = v15 & 1;
  v24 = 0;
  v25 = 256;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v20 = *a7;
  AttributedString.init<A>(localized:defaultValue:options:table:bundle:locale:comment:including:)((uint64_t *)&v29, v21, a3, a4, a5, &v31, (uint64_t *)&v20, v17, v18, v19, (uint64_t)a12, a12, a13);
  result = swift_release();
  *a6 = v31;
  return result;
}

void AttributedString.init<A>(localized:options:table:bundle:locale:comment:including:)(uint64_t *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t *a6@<X5>, _QWORD *a7@<X8>, uint64_t a8, uint64_t a9, _OWORD *a10, void *a11)
{
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];
  _QWORD v21[2];
  char v22;
  char v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v14 = a1[1];
  v15 = a1[2];
  v16 = *a2;
  v18 = *a6;
  v17 = a6[1];
  v29 = *a1;
  v30 = v14;
  v31 = v15;
  v21[0] = 0;
  v21[1] = 0;
  v22 = 1;
  v23 = v16 & 1;
  v24 = 0;
  v25 = 256;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  if (!v18)
  {
    if (one-time initialization token for cache != -1)
      swift_once();
    v20[0] = static LocaleCache.cache;
    v18 = LocaleCache.current.getter();
  }
  v20[0] = v18;
  v20[1] = v17;
  String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)(0, 0, (uint64_t)v21, a3, a4, (uint64_t)a5, (uint64_t)v20, a9, 1u, a10, a11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  *a7 = v32;
}

void specialized String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10, id a11, void *a12)
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  void *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  id v44;
  _QWORD *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  id v56;
  void *v57;
  _OWORD *v58;
  id v59;
  id v60;
  void *v61;
  void *v62;
  _QWORD *v63;
  id v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  id v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  _OWORD *v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  void *v78;
  void *v79;
  uint64_t ObjectType;
  uint64_t (*v81)(uint64_t, uint64_t);
  void *v82;
  int64_t v83;
  uint64_t v84;
  uint64_t v85;
  int64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  id v92;
  id v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  void *v110;
  id v111;
  Swift::String v112;
  _BOOL4 v113;
  unint64_t v114;
  uint64_t v115;
  os_unfair_lock_s *v116;
  _OWORD *v117;
  char v118;
  int v119;
  int v120;
  NSError *v121;
  NSError *v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  Swift::String v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  NSError *v135;
  NSError *v136;
  int v137;
  id v138;
  char v139;
  id v140;
  void *v141;
  uint64_t v142;
  _QWORD *v143;
  __int128 v144;
  int v145;
  int v146;
  void *v147;
  int v148;
  int v149;
  int v150;
  void *v151;
  int v152;
  int v153;
  uint64_t v154;
  uint64_t *v155;
  os_unfair_lock_s *v156;
  __int128 v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _OWORD *v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  unint64_t v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 *v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 *v194;
  id v195;
  const void *v196;
  const void *v197;
  unint64_t v198;
  uint64_t v199;
  unint64_t v200;
  const void *v201;
  __int128 v202;
  __int128 *v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  uint64_t v207;
  void *v208;
  uint64_t v209;
  unint64_t v210;
  _QWORD *v211;
  void *v212;
  uint64_t v213;
  uint64_t v214;
  _OWORD *v215;
  unint64_t v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  char v221;
  unsigned __int16 v222;
  unint64_t v223;
  __int128 v224;
  int64_t v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  __int128 v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  _OWORD *v245;
  _OWORD *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  _OWORD *v251;
  uint64_t v252;
  uint64_t v253;
  _OWORD *v254;
  _OWORD *v255;
  uint64_t v256;
  uint64_t v257;
  __int128 v258;
  unint64_t v259;
  unint64_t v260;
  __int128 v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  __int128 v274;
  unint64_t v275;
  unint64_t v276;
  _OWORD *v277;
  __int128 v278;
  uint64_t v279;
  void *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  _OWORD *v289;
  __int128 *v290;
  __int128 v291;
  unint64_t v292;
  _OWORD *v293;
  unint64_t v294;
  unint64_t v295;
  unint64_t v296;
  unint64_t v297;
  __int128 *v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  unint64_t v302;
  unint64_t v303;
  unint64_t v304;
  void *v305;
  __int128 v306;
  int v307;
  __int128 v308;
  void *v309;
  _OWORD *v310;
  uint64_t v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  uint64_t v319;
  _OWORD *v320;
  _OWORD *v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  unint64_t v326;
  const void *v327;
  id v328;
  uint64_t v329;
  void *v330;
  __int128 v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  unint64_t v335;
  unint64_t v336;
  uint64_t v337;
  unint64_t v338;
  unint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  __int128 v343;
  _OWORD *v344;
  __int128 v345;
  uint64_t v346;
  unint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  __int128 v356;
  _OWORD *v357;
  _OWORD *v358;
  uint64_t v359;
  uint64_t v360;
  void *v361;
  unint64_t v362;
  __int128 v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  __int128 v369;
  _OWORD *v370;
  __int128 v371;
  __int128 *v372;
  __int128 v373;
  uint64_t *v374;
  os_unfair_lock_s *v375;
  void *v376;
  void *v377;
  __int128 v378;
  uint64_t v379;
  uint64_t v380;
  __int128 v381;
  uint64_t v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  unint64_t v389;
  void *v390;
  _OWORD *v391;
  __int128 v392;
  __int128 *v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  unint64_t v397;
  unint64_t v398;
  unint64_t v399;
  unint64_t v400;
  _QWORD *v401;
  uint64_t v402;
  __n128 v403;
  uint64_t v404;
  char *v405;
  uint64_t v406;
  unint64_t v407;
  unint64_t v408;
  id v409;
  uint64_t v410;
  unint64_t v411;
  __int128 v412;
  __int128 v413;
  __int128 v414;
  uint64_t *v415;
  __int128 v416;
  __int128 v417;
  __int128 v418;
  __int128 v419;
  __int128 v420;
  __int128 v421;
  __int128 v422;
  __int128 v423;
  __int128 v424;
  __int128 *v425;
  const void *v426;
  void *v427;
  const void *v428;
  uint64_t v429;
  void *v430;
  unint64_t v431;
  void *v432;
  __int128 v433;
  __int128 *v434;
  __int128 v435;
  __int128 v436;
  __int128 v437;
  uint64_t v438;
  uint64_t v439;
  unint64_t v440;
  char v441;
  char v442;
  unint64_t v443;
  __int128 v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  unint64_t v456;
  __int128 *v457;
  __int128 v458;
  __int128 v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  __int128 v471;
  uint64_t v472;
  _OWORD *v473;
  __int128 v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  unint64_t v486;
  unint64_t v487;
  __int128 *v488;
  __int128 v489;
  unint64_t v490;
  uint64_t v491;
  unint64_t v492;
  unint64_t v493;
  unint64_t v494;
  __int128 v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  unint64_t v507;
  unint64_t v508;
  __int128 v509;
  unint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  _OWORD *v515;
  _OWORD *v516;
  unint64_t v517;
  unint64_t v518;
  uint64_t v519;
  __int128 *v520;
  __int128 v521;
  _OWORD *v522;
  uint64_t v523;
  unint64_t v524;
  unint64_t v525;
  __int128 v526;
  unint64_t v527;
  __int128 v528;
  __int128 v529;
  unint64_t v530;
  unsigned int v531;
  uint64_t v532;
  __int128 *v533;
  __int128 v534;
  __int128 v535;
  __int128 v536;
  __int128 v537;
  __int128 v538;
  uint64_t v539;
  uint64_t v540;
  _QWORD *v541;
  _OWORD *v542;
  uint64_t v543;
  _QWORD *v544;
  uint64_t v545;
  uint64_t v546;
  __int128 v547;
  id v548;
  uint64_t v549;
  id v550;
  uint64_t v551;
  uint64_t v552;
  _BYTE *v553;
  id v554;
  uint64_t v555;
  uint64_t *v556;
  os_unfair_lock_s *v557;
  id v558;
  uint64_t v559;
  uint64_t v560;
  unint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  void *v578;
  id v579;
  uint64_t v580;
  uint64_t v581;
  void *v582;
  void *v583;
  uint64_t v584;
  uint64_t v585;
  void *v586;
  const void *v587;
  const void *v588;
  const void *v589;
  id v590;
  char isEscapingClosureAtFileLocation;
  char v592;
  char v593;
  unint64_t v594;
  _QWORD *v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  _OWORD *v601;
  unint64_t v602;
  _OWORD *v603;
  unint64_t v604;
  unint64_t v605;
  unint64_t v606;
  _OWORD *v607;
  unint64_t v608;
  __int128 *v609;
  uint64_t *v610;
  char *v611;
  char *v612;
  uint64_t *v613;
  __int128 *v614;
  unint64_t v615;
  uint64_t *v616;
  uint64_t v617;
  uint64_t *v618;
  __int128 *v619;
  _OWORD *v620;
  void *v621;
  unint64_t v622;
  uint64_t v623;
  uint64_t v624;
  void *v625;
  const void *v626;
  unint64_t v627;
  const void *v628;
  uint64_t v629;
  _OWORD *v630;
  uint64_t v631;
  id v632;
  unint64_t v633;
  unint64_t v634;
  uint64_t v635;
  unint64_t v636;
  _OWORD *v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  unint64_t *v641;
  _OWORD *v642;
  void *v643;
  void *v644;
  _OWORD *v645;
  uint64_t v646;
  uint64_t v647;
  id v648;
  unint64_t v649;
  _QWORD *v650;
  __int128 *v651;
  uint64_t v652;
  __int128 *v653;
  __int128 v654;
  uint64_t v655;
  const void *v656;
  const void *v657;
  const void *v658;
  id v659;
  __int128 *v660;
  void *v661;
  unint64_t v662;
  _OWORD *v663;
  void *v664;
  unint64_t v665;
  id v666;
  void *v667;
  unint64_t v668;
  _OWORD *v669;
  _OWORD *v670;
  void *v671;
  id v672;
  _QWORD *v673;
  id v674;
  void *v675;
  uint64_t v676;
  _OWORD *v677;
  uint64_t v678;
  unint64_t v679;
  uint64_t v680;
  uint64_t v681;
  const void *v682;
  unint64_t v683;
  unint64_t v684;
  void *v685;
  const void *v686;
  void *v687;
  uint64_t v688;
  void *v689;
  unint64_t v690[4];
  unint64_t v691;
  __int128 v692;
  __int128 v693;
  __int128 v694;
  __int128 v695;
  uint64_t v696;
  const void *v697;
  unint64_t v698;
  unint64_t v699;
  void *v700;
  const void *v701;
  void *v702;
  uint64_t v703;
  void *v704;
  unint64_t v705;
  unint64_t v706;
  uint64_t v707;
  _OWORD *v708;
  void *v709;
  __int128 v710;
  void *v711;
  void *v712;
  uint64_t (*v713)();
  uint64_t v714;
  const void *v715;
  unint64_t v716;
  unint64_t v717;
  id v718;
  const void *v719;
  uint64_t v720;
  _OWORD *v721;
  id v722;
  void *v723;
  uint64_t v724;
  void *v725;
  _QWORD v726[16];
  unint64_t v727;
  unint64_t v728;
  unint64_t v729;
  unint64_t v730;
  unint64_t v731;
  void *v732;
  uint64_t v733;
  void *v734;
  __int128 v735;
  __int128 v736;
  __int128 v737;
  __int128 v738;
  __int128 v739;
  __int128 v740;
  __int128 v741;
  __int128 v742;
  __int128 v743[17];
  __int128 v744[17];
  __int128 v745;
  __int128 v746;
  __int128 v747;
  __int128 v748;
  __int128 v749;
  __int128 v750;
  __int128 v751;
  __int128 v752;
  __int128 v753;
  __int128 v754;
  __int128 v755;
  __int128 v756;
  __int128 v757;
  __int128 v758;
  __int128 v759;
  __int128 v760;
  __int128 v761;
  __int128 v762;
  __int128 v763;
  __int128 v764;
  __int128 v765;
  __int128 v766;
  __int128 v767;
  __int128 v768;
  __int128 v769;
  __int128 v770;
  __int128 v771;
  __int128 v772;
  __int128 v773;
  __int128 v774;
  __int128 v775;
  __int128 v776;
  __int128 v777;
  __int128 v778;
  __int128 v779;
  __int128 v780;
  __int128 v781;
  __int128 v782;
  __int128 v783;
  __int128 v784;
  __int128 v785;
  __int128 v786;
  __int128 v787;
  __int128 v788;
  __int128 v789;
  __int128 v790;
  __int128 v791;
  __int128 v792;
  __int128 v793;
  __int128 v794;
  __int128 v795;
  __int128 v796;
  __int128 v797;
  __int128 v798;
  _BYTE v799[176];
  _OWORD v800[4];
  char v801;
  __int128 v802;
  __int128 v803;
  char v804;
  char v805;
  unint64_t v806;
  _OWORD *v807;
  void *v808;
  id v809;
  unint64_t v810;
  uint64_t v811;
  unint64_t v812;
  unint64_t v813;
  _QWORD v814[20];
  unsigned __int128 v815;
  _OWORD v816[12];
  _OWORD *v817;
  __int128 v818;
  __int128 v819;
  __int128 v820;
  __int128 v821;
  __int128 v822;
  __int128 v823;
  __int128 v824;
  __int128 v825;
  _OWORD v826[8];
  __int128 v827;
  __int128 v828;
  __int128 v829;
  __int128 v830;
  _OWORD *v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  _QWORD v839[14];
  uint64_t v840;
  uint64_t v841;
  _BYTE v842[64];
  uint64_t v843;
  _QWORD v844[14];
  uint64_t v845;
  uint64_t v846;
  _BYTE v847[64];
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  unint64_t v857;
  unint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  unint64_t v862;
  unint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  _OWORD v867[7];
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  unint64_t v873;
  unint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  unint64_t v878;
  unint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  unint64_t v883;
  unint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  unint64_t v888;
  unint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  _OWORD v899[7];
  __int128 v900[7];
  _OWORD v901[12];
  _QWORD v902[10];
  __int128 v903;
  __int128 v904;
  __int128 v905;
  _OWORD v906[6];
  uint64_t v907;
  unint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  __int128 v915;
  __int128 v916;
  __int128 v917;
  __int128 v918;
  __int128 v919;
  __int128 v920;
  uint64_t v921;
  uint64_t v922;
  unint64_t v923;
  unint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  __int128 v929;
  __int128 v930;
  __int128 v931;
  _OWORD v932[3];
  _OWORD *v933;
  uint64_t v934;
  unint64_t v935;
  unint64_t v936;
  unint64_t v937;
  uint64_t v938;
  uint64_t v939;
  _OWORD *v940;
  __int128 v941;
  __int128 v942;
  __int128 v943;
  __int128 v944;
  __int128 v945;
  __int128 v946;
  _OWORD v947[6];
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  __int128 v956;
  __int128 v957;
  __int128 v958;
  __int128 v959;
  __int128 v960;
  __int128 v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  __int128 v970;
  __int128 v971;
  __int128 v972;
  __int128 v973;
  __int128 v974;
  __int128 v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  __int128 v984;
  __int128 v985;
  __int128 v986;
  __int128 v987;
  __int128 v988;
  __int128 v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  __int128 v998;
  __int128 v999;
  __int128 v1000;
  unint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  unint64_t v1005;
  _OWORD *v1006;
  uint64_t v1007;
  uint64_t v1008;
  __int128 v1009;
  __int128 v1010;
  __int128 v1011;
  __int128 v1012;
  __int128 v1013;
  __int128 v1014;
  __int128 v1015;
  __int128 v1016;
  __int128 v1017;
  __int128 v1018;
  __int128 v1019;
  __int128 v1020;
  __int128 v1021;
  __int128 v1022;
  __int128 v1023;
  __int128 v1024;
  __int128 v1025;
  __int128 v1026;
  unint64_t v1027;
  _OWORD *v1028;
  void *v1029;
  id v1030;
  unint64_t v1031;
  uint64_t v1032;
  unint64_t v1033;
  unint64_t v1034;
  __int128 v1035;
  __int128 v1036;
  __int128 v1037;
  uint64_t v1038;
  id v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  __int128 v1046;
  __int128 v1047;
  __int128 v1048;
  __int128 v1049;
  __int128 v1050;
  __int128 v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  unint64_t v1055;
  uint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  __int128 v1060;
  __int128 v1061;
  __int128 v1062;
  __int128 v1063;
  __int128 v1064;
  __int128 v1065;
  __int128 v1066;
  __int128 v1067;
  __int128 v1068;
  _OWORD v1069[3];
  _OWORD v1070[4];
  char v1071;
  __int128 v1072;
  __int128 v1073;
  char v1074;
  unint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  unint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  _OWORD v1083[3];
  _OWORD v1084[2];
  __int128 v1085;
  uint64_t v1086;
  char v1087;
  uint64_t v1088;
  __int128 v1089[3];
  _BYTE v1090[40];
  __int128 v1091[3];
  _BYTE v1092[40];
  uint64_t v1093;

  MEMORY[0x1E0C80A78](a1);
  v14 = v13;
  v16 = v15;
  v18 = v17;
  v20 = v19;
  v22 = v21;
  v674 = (id)v23;
  v641 = v24;
  v1093 = *MEMORY[0x1E0C80C00];
  v675 = v26;
  v650 = v12;
  if (!v26)
  {
    a12 = (void *)swift_bridgeObjectRetain();
    v12 = v650;
    v674 = a11;
    v675 = a12;
  }
  v669 = a11;
  v671 = a12;
  if (*v12)
    v27 = *v12;
  else
    v27 = MEMORY[0x1E0DEE9D8];
  v744[0] = v27;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v640 = v14;
  v673 = (_QWORD *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_AJs5NeverOTg506_sSS10d3E17ef43V25argumentsWithReplacements_6localeSayAC14gH40VGSays7CVarArg_pGSg_AA6LocaleVtFA2GXEfU_s16IndexingIteratorVySays0tU0_pGGAF0X0VTf1cn_nTf4nng_n(a10, v744, v16, v14);
  v28 = 0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v639 = v16;
  swift_unknownObjectRelease();
  if (v18)
    v648 = v18;
  else
    v648 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v29 = v20;
  v30 = v22;
  v31 = v18;
  swift_bridgeObjectRetain();
  v32 = String.count.getter();
  swift_bridgeObjectRelease();
  if (v32 < 1)
  {
    v29 = 0xEB00000000656C62;
    v30 = 0x617A696C61636F4CLL;
  }
  else
  {
    if (!v29)
    {
      __break(1u);
LABEL_343:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x181D30F0CLL);
    }
    swift_bridgeObjectRetain();
  }
  LODWORD(v672) = a9;
  v33 = v650[6];
  if (v33)
  {
    v34 = v650[5];
    if ((v650[7] & 1) != 0)
    {
      swift_bridgeObjectRetain();
      v36 = objc_msgSend(v648, sel_localizations);
      if (!v36)
        v36 = (id)_ContiguousArrayBuffer._asCocoaArray()();
      v37 = (void *)objc_opt_self();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      v38 = swift_allocObject();
      *(_OWORD *)(v38 + 16) = xmmword_18205C850;
      *(_QWORD *)(v38 + 32) = v34;
      *(_QWORD *)(v38 + 40) = v33;
      v39 = objc_msgSend(v37, sel_preferredLocalizationsFromArray_forPreferences_, v36, _ContiguousArrayBuffer._asCocoaArray()());

      swift_unknownObjectRelease();
      if (v39)
      {
        type metadata accessor for __SwiftDeferredNSArray();
        swift_unknownObjectRetain();
        if (swift_dynamicCastClass())
        {
          swift_retain();

        }
        v40 = swift_dynamicCastClass();
        v28 = 0;
        if (v40)
        {
          v41 = v40;

          v35 = v41;
        }
        else
        {
          swift_unknownObjectRelease();
          objc_msgSend(v39, sel_copy);
          v42 = _bridgeCocoaArray<A>(_:)();
          swift_unknownObjectRelease();
          v43 = specialized _arrayForceCast<A, B>(_:)(v42);

          v35 = v43;
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        v35 = MEMORY[0x1E0DEE9D8];
        v28 = 0;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      v35 = swift_allocObject();
      *(_OWORD *)(v35 + 16) = xmmword_18205C850;
      *(_QWORD *)(v35 + 32) = v34;
      *(_QWORD *)(v35 + 40) = v33;
      swift_bridgeObjectRetain();
    }
  }
  else
  {
    v35 = 0;
  }
  swift_bridgeObjectRetain();
  v44 = objc_msgSend(v648, sel_preferredLocalizations);
  v45 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v670 = (_OWORD *)v29;
  if (v44)
  {
    v46 = v44;
    v47 = v35;
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();

    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v48 = swift_dynamicCastClass();
    if (!v48)
    {
      swift_unknownObjectRelease();
      objc_msgSend(v46, sel_copy);
      v49 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      v45 = (_QWORD *)specialized _arrayForceCast<A, B>(_:)(v49);

      swift_bridgeObjectRelease();
      v35 = v47;
      if (!v47)
      {
        swift_bridgeObjectRelease();
        v28 = 0;
        goto LABEL_38;
      }
      v28 = 0;
LABEL_35:
      v50 = specialized static Array<A>.== infix(_:_:)((_QWORD *)v35, v45);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v50 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v35 = 0;
      }
      goto LABEL_38;
    }
    v45 = (_QWORD *)v48;

    v28 = 0;
  }
  if (v35)
    goto LABEL_35;
  swift_bridgeObjectRelease();
LABEL_38:
  v647 = v35;
  v667 = (void *)v30;
  if ((v672 & 1) != 0)
  {
    v51 = String._bridgeToObjectiveCImpl()();
    v52 = String._bridgeToObjectiveCImpl()();
    v53 = v35;
    v54 = String._bridgeToObjectiveCImpl()();
    if (v53)
    {
      swift_bridgeObjectRetain();
      v55 = (void *)_ContiguousArrayBuffer._asCocoaArray()();
    }
    else
    {
      v55 = 0;
    }
    *(_QWORD *)&v744[0] = 0;
    *(_QWORD *)&v743[0] = 0;
    v56 = objc_msgSend(v648, sel__localizedStringNoCacheNoMarkdownParsingForKey_value_table_localizations_actualTableURL_formatSpecifierConfiguration_, v51, v52, v54, v55, v744, v743);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    v57 = *(void **)&v744[0];
    if (!v56)
    {
      v64 = *(id *)&v743[0];
      v65 = v57;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      BigString.init(_:)();
      AttributedString.init(_:attributes:)(v744, MEMORY[0x1E0DEE9E0], MEMORY[0x1E0DEE9E8], (uint64_t *)v743);

      swift_bridgeObjectRelease();
      *v641 = *(_QWORD *)&v743[0];
      return;
    }
    v58 = *(_OWORD **)&v743[0];
    v59 = *(id *)&v743[0];
    v643 = v57;
    v60 = v57;
    swift_bridgeObjectRelease();
    objc_opt_self();
    v61 = (void *)swift_dynamicCastObjCClassUnconditional();
    v674 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
    v675 = v62;

    v35 = v647;
    if (v673[2])
    {
      *(_QWORD *)&v826[0] = MEMORY[0x1E0DEE9E0];
      LODWORD(v671) = 1;
      v28 = 0;
      if (!v59)
      {
        v669 = 0;
        goto LABEL_56;
      }
LABEL_54:
      v66 = one-time initialization token for formatSpecifierConfiguration;
      v67 = v58;
      if (v66 != -1)
        goto LABEL_325;
      goto LABEL_55;
    }
    v63 = v650;
    v28 = 0;
LABEL_51:
    outlined init with take of LocalePreferences?((uint64_t)(v63 + 3), (uint64_t)v902, &demangling cache variable for type metadata for AttributedString.LocalizationOptions._PluralizationNumber?);
    outlined init with take of LocalePreferences?((uint64_t)v902, (uint64_t)&v1086, &demangling cache variable for type metadata for AttributedString.LocalizationOptions._PluralizationNumber?);
    if ((v1087 & 1) != 0
      || (outlined init with take of AttributedString.LocalizationOptions._PluralizationNumber(&v1086, (uint64_t)&v1088),
          !v58))
    {
      BigString.init(_:)();
      AttributedString.init(_:attributes:)(v900, MEMORY[0x1E0DEE9E0], MEMORY[0x1E0DEE9E8], (uint64_t *)v744);
      LODWORD(v671) = 0;
      v97 = *(_QWORD *)&v744[0];
      goto LABEL_77;
    }
    LODWORD(v671) = 0;
    *(_QWORD *)&v826[0] = MEMORY[0x1E0DEE9E0];
    goto LABEL_54;
  }
  if (!v673[2])
  {
    v58 = 0;
    v643 = 0;
    v63 = v650;
    goto LABEL_51;
  }
  v669 = 0;
  v643 = 0;
  *(_QWORD *)&v826[0] = MEMORY[0x1E0DEE9E0];
  LODWORD(v671) = 1;
  while (1)
  {
LABEL_56:
    v69 = objc_allocWithZone((Class)NSAttributedString);
    v70 = String._bridgeToObjectiveCImpl()();
    type metadata accessor for NSAttributedStringKey(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
    swift_bridgeObjectRetain();
    v71 = objc_msgSend(v69, sel_initWithString_attributes_, v70, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v72 = v639;
    swift_unknownObjectRetain();
    v73 = v640;
    v74 = (_OWORD *)v28;
    v75 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_s7CVarArg_p6vararg_AJ15_AttributeFixupOSg11attrStrInfots5NeverOTg506_sSS10d3E17ef101V23_formatAttributedString_17preparedArguments7options5scope0D13Configuration6localeAA0eF0VSS_SayAC14gh51VGAK0B7OptionsVxmSo12NSDictionaryCSgAA6LocaleVtAA14l11ScopeRzlFs7ij17_p6vararg_AM01_R5m9OSg11attrO44InfotAMXEfU_AA0R6ScopesO0A10AttributesV_TGm5AF6LocaleVTf1cn_nTm((uint64_t)v673, v72, v640, (uint64_t)&v678, (uint64_t (*)(void))_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_s7CVarArg_p6vararg_AJ15_AttributeFixupOSg11attrStrInfots5NeverOTg506_sSS10d3E17ef101V23_formatAttributedString_17preparedArguments7options5scope0D13Configuration6localeAA0eF0VSS_SayAC14gh51VGAK0B7OptionsVxmSo12NSDictionaryCSgAA6LocaleVtAA14l11ScopeRzlFs7ij17_p6vararg_AM01_R5m9OSg11attrO44InfotAMXEfU_AA0R6ScopesO0A10AttributesV_TGm5AF6LocaleVTf1cn_nTf4ng_n);
    v76 = *((_OWORD *)v650 + 1);
    v744[0] = *(_OWORD *)v650;
    v744[1] = v76;
    v744[2] = *((_OWORD *)v650 + 2);
    *(__int128 *)((char *)&v744[2] + 9) = *(_OWORD *)((char *)v650 + 41);
    v77 = AttributedString.LocalizationOptions._nsOptions.getter();
    v79 = v78;
    v665 = v77 | 2;
    ObjectType = swift_getObjectType();
    v81 = *(uint64_t (**)(uint64_t, uint64_t))(v73 + 496);
    v666 = v79;
    v82 = (void *)v81(ObjectType, v73);
    v83 = *(_QWORD *)(v75 + 16);
    v668 = v75;
    if (v83)
    {
      v663 = v74;
      v664 = v71;
      *(_QWORD *)&v816[0] = MEMORY[0x1E0DEE9D8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v83, 0);
      v84 = v75 + 32;
      v85 = *(_QWORD *)&v816[0];
      v86 = v83;
      do
      {
        outlined init with copy of (Hashable & Sendable)?(v84, (uint64_t)v744, &demangling cache variable for type metadata for (vararg: CVarArg, attrStrInfo: String.LocalizationValue.FormatArgument._AttributeFixup?));
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v744, (uint64_t)v743);
        outlined init with take of any PredicateExpression<Self.Output == B1>(v743, (uint64_t)&v710);
        outlined destroy of Any?((uint64_t)v744, &demangling cache variable for type metadata for (vararg: CVarArg, attrStrInfo: String.LocalizationValue.FormatArgument._AttributeFixup?));
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v85 + 16) + 1, 1);
          v85 = *(_QWORD *)&v816[0];
        }
        v88 = *(_QWORD *)(v85 + 16);
        v87 = *(_QWORD *)(v85 + 24);
        if (v88 >= v87 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v87 > 1, v88 + 1, 1);
          v85 = *(_QWORD *)&v816[0];
        }
        *(_QWORD *)(v85 + 16) = v88 + 1;
        outlined init with take of any PredicateExpression<Self.Output == B1>(&v710, v85 + 40 * v88 + 32);
        v84 += 64;
        --v86;
      }
      while (v86);
      v71 = v664;
      v74 = v663;
    }
    v89 = objc_opt_self();
    v90 = getVaList(_:)();
    swift_bridgeObjectRelease();
    v91 = (void *)v89;
    v92 = v666;
    v93 = objc_msgSend(v91, sel__attributedStringWithFormat_attributeOptions_formattingOptions_locale_arguments_, v71, v665, v666, v82, v90);

    v94 = v93;
    specialized static AttributeScope.scopeDescription.getter();
    v96 = v95;
    swift_bridgeObjectRelease();
    AttributedString.init(_:attributeTable:options:)(v94, v96, 0, v744);
    v28 = (unint64_t)v74;
    if (v74)
    {
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      BigString.init(_:)();
      AttributedString.init(_:attributes:)(v900, MEMORY[0x1E0DEE9E0], MEMORY[0x1E0DEE9E8], (uint64_t *)v744);
      swift_bridgeObjectRelease();

      v58 = v669;
      v28 = 0;
      v97 = *(_QWORD *)&v744[0];
    }
    else
    {
      *(_QWORD *)&v710 = *(_QWORD *)&v744[0];
      v98 = MEMORY[0x1E0DEE9D8];
      if (v83)
      {
        v674 = v94;
        v664 = v71;
        v644 = 0;
        *(_QWORD *)&v816[0] = MEMORY[0x1E0DEE9D8];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v83, 0);
        v99 = v668 + 32;
        v98 = *(_QWORD *)&v816[0];
        do
        {
          outlined init with copy of (Hashable & Sendable)?(v99, (uint64_t)v744, &demangling cache variable for type metadata for (vararg: CVarArg, attrStrInfo: String.LocalizationValue.FormatArgument._AttributeFixup?));
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v744, (uint64_t)v743);
          v100 = *((_QWORD *)&v744[2] + 1);
          v101 = *(_QWORD *)&v744[3];
          v102 = BYTE8(v744[3]);
          *((_QWORD *)&v743[2] + 1) = *((_QWORD *)&v744[2] + 1);
          *(_QWORD *)&v743[3] = *(_QWORD *)&v744[3];
          BYTE8(v743[3]) = BYTE8(v744[3]);
          outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup?(*((uint64_t *)&v744[2] + 1), *(uint64_t *)&v744[3], BYTE8(v744[3]));
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v743);
          outlined destroy of Any?((uint64_t)v744, &demangling cache variable for type metadata for (vararg: CVarArg, attrStrInfo: String.LocalizationValue.FormatArgument._AttributeFixup?));
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v98 + 16) + 1, 1);
            v98 = *(_QWORD *)&v816[0];
          }
          v104 = *(_QWORD *)(v98 + 16);
          v103 = *(_QWORD *)(v98 + 24);
          if (v104 >= v103 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v103 > 1, v104 + 1, 1);
            v98 = *(_QWORD *)&v816[0];
          }
          *(_QWORD *)(v98 + 16) = v104 + 1;
          v105 = v98 + 24 * v104;
          *(_QWORD *)(v105 + 32) = v100;
          *(_QWORD *)(v105 + 40) = v101;
          *(_BYTE *)(v105 + 48) = v102;
          v99 += 64;
          --v83;
        }
        while (v83);
        v28 = (unint64_t)v644;
        v71 = v664;
        v92 = v666;
        v94 = v674;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      String.LocalizationValue.restoreAttributedStringArguments(_:in:)(v98);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      v58 = v669;
      v97 = v710;
    }
    v35 = v647;
LABEL_77:
    v106 = *(_OWORD *)(v97 + 16);
    v107 = *(_OWORD *)(v97 + 32);
    v1085 = *(_OWORD *)(v97 + 48);
    v1084[1] = v107;
    v1084[0] = v106;
    v108 = *(_OWORD *)(v97 + 16);
    v109 = *(_OWORD *)(v97 + 32);
    v1089[2] = v1085;
    v1089[1] = v109;
    v1089[0] = v108;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v1089, (uint64_t)v1090);
    outlined retain of Locale((uint64_t)v1090);
    v664 = (void *)MEMORY[0x186DA46F4](v1084);
    v111 = v110;
    if (v643)
    {
      URL.init(reference:)(v643, v744);
      v674 = (id)*((_QWORD *)&v744[0] + 1);
      v675 = *(void **)&v744[0];
      v668 = *(_QWORD *)&v744[1];
    }
    else
    {
      v675 = 0;
      v674 = 0;
      v668 = 0;
    }
    v645 = v58;
    v112._countAndFlagsBits = 0x65686361636F6E2ELL;
    v112._object = (void *)0xE800000000000000;
    v113 = String.hasSuffix(_:)(v112);
    swift_bridgeObjectRelease();
    LODWORD(v114) = (v113 || v35 != 0) | v672 ^ 1;
    v661 = v111;
    v662 = v97;
    if ((v113 || v35 != 0) | (v672 ^ 1) & 1)
      goto LABEL_84;
    if (one-time initialization token for attributedStringsCacheLock != -1)
LABEL_292:
      swift_once();
    v115 = static String.LocalizationValue.attributedStringsCacheLock + 16;
    v116 = (os_unfair_lock_s *)(static String.LocalizationValue.attributedStringsCacheLock + 24);
    swift_retain();
    os_unfair_lock_lock(v116);
    specialized closure #1 in String.LocalizationValue._parseLocalizedMarkdown<A>(_:bundlePreferredLocalization:tableURL:formatConfiguration:scope:appliesSourcePositionAttribute:ignoreCache:)(v115, (uint64_t)v664, (uint64_t)v111, (int)v671, (uint64_t)v744);
    os_unfair_lock_unlock(v116);
    swift_release();
    v117 = *(_OWORD **)&v744[0];
    if (!*(_QWORD *)&v744[0])
    {
LABEL_84:
      LODWORD(v670) = v114;
      v669 = v58;
      v644 = (void *)v28;
      if (one-time initialization token for localizedAttributedString != -1)
LABEL_286:
        swift_once();
      v119 = static AttributedString.MarkdownParsingOptions.localizedAttributedString;
      v120 = byte_1EDC47D01;
      LODWORD(v667) = byte_1EDC47D02;
      v122 = (NSError *)qword_1EDC47D08;
      v121 = (NSError *)unk_1EDC47D10;
      if (v675)
      {
        *(_QWORD *)&v744[0] = v675;
        *((_QWORD *)&v744[0] + 1) = v674;
        *(_QWORD *)&v744[1] = v668;
        swift_bridgeObjectRetain();
        v123 = URL.pathComponents.getter();
        v124 = v123;
        v125 = *(_QWORD *)(v123 + 16);
        if (v125)
        {
          v126 = v123 + 16 * v125 + 24;
          while (v125 <= *(_QWORD *)(v124 + 16))
          {
            swift_bridgeObjectRetain();
            v127._countAndFlagsBits = 0x6A6F72706C2ELL;
            v127._object = (void *)0xE600000000000000;
            if (String.hasSuffix(_:)(v127) && String.count.getter() >= 7)
            {
              swift_bridgeObjectRelease();
              String.index(_:offsetBy:)();
              v128 = String.subscript.getter();
              v130 = v129;
              v132 = v131;
              v134 = v133;
              swift_bridgeObjectRelease();
              v122 = (NSError *)MEMORY[0x186DA4634](v128, v130, v132, v134);
              v136 = v135;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v121 = v136;
              v111 = v661;
              v97 = v662;
              goto LABEL_93;
            }
            --v125;
            swift_bridgeObjectRelease();
            v126 -= 16;
            if (!v125)
              goto LABEL_280;
          }
          __break(1u);
LABEL_280:
          swift_bridgeObjectRelease();
          v111 = v661;
          v97 = v662;
        }
        else
        {
          swift_bridgeObjectRelease();
          v111 = v661;
        }
      }
      else
      {
        swift_bridgeObjectRetain();
      }
      if (v121 || (v672 & 1) == 0)
      {
LABEL_93:
        v137 = v119 | (v120 << 8);
        if (v669)
        {
          *(_QWORD *)&v743[0] = 0xD000000000000022;
          *((_QWORD *)&v743[0] + 1) = 0x800000018230C3A0;
          v138 = objc_msgSend(v645, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
          swift_unknownObjectRelease();
          v139 = (char)v670;
          if (v138)
          {
            _bridgeAnyObjectToAny(_:)();
            swift_unknownObjectRelease();
          }
          else
          {
            memset(v743, 0, 32);
          }
          outlined init with take of LocalePreferences?((uint64_t)v743, (uint64_t)v744, &demangling cache variable for type metadata for Any?);
          if (*((_QWORD *)&v744[1] + 1))
          {
            if (swift_dynamicCast())
            {
              v144 = v743[0];
              if ((_DWORD)v667)
                v145 = 0x10000;
              else
                v145 = 0;
              v146 = v137 | v145;
              swift_bridgeObjectRetain();
              v147 = v644;
              v148 = specialized static AttributedString.parseMarkdown<A>(_:including:options:baseURL:)(v743, v144, *((unint64_t *)&v144 + 1), v146, v122, v121, (int)v671, 0);
              if (v147)
              {
                swift_bridgeObjectRelease();

                swift_bridgeObjectRelease();
                if ((v139 & 1) == 0)
                {
LABEL_262:
                  if (one-time initialization token for attributedStringsCacheLock != -1)
LABEL_334:
                    swift_once();
                  v556 = (uint64_t *)(static String.LocalizationValue.attributedStringsCacheLock + 16);
                  v557 = (os_unfair_lock_s *)(static String.LocalizationValue.attributedStringsCacheLock + 24);
                  swift_retain();
                  os_unfair_lock_lock(v557);
                  specialized closure #3 in String.LocalizationValue._parseLocalizedMarkdown<A>(_:bundlePreferredLocalization:tableURL:formatConfiguration:scope:appliesSourcePositionAttribute:ignoreCache:)(v556, (uint64_t)v664, (uint64_t)v111, (char)v671);
                  os_unfair_lock_unlock(v557);
                  swift_release();
                }
LABEL_264:
                v558 = v645;

                swift_bridgeObjectRelease();
                outlined consume of URL?(v675);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();

                swift_bridgeObjectRelease();
                *v641 = v97;

                goto LABEL_313;
              }
              v153 = v148;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              *(_QWORD *)&v744[0] = *(_QWORD *)&v743[0];
              swift_bridgeObjectRetain();
              specialized static AttributedString.parseMarkdown<A>(_:including:options:baseURL:)(v743, (uint64_t)v664, (unint64_t)v111, 512, 0, 0, 0, 0);
              v28 = 0;
              swift_bridgeObjectRelease();
              specialized AttributedString.subscript.setter(*(uint64_t *)&v743[0]);
              v117 = *(_OWORD **)&v744[0];
              if ((v139 & 1) == 0)
              {
LABEL_124:
                if (v117)
                {
                  LODWORD(v635) = v153;
                  v154 = one-time initialization token for attributedStringsCacheLock;
                  swift_retain_n();
                  if (v154 != -1)
                    goto LABEL_331;
                  goto LABEL_126;
                }
                goto LABEL_262;
              }
LABEL_121:
              if (v117)
              {
                LODWORD(v635) = v153;
                goto LABEL_127;
              }
              goto LABEL_264;
            }
LABEL_116:
            if ((_DWORD)v667)
              v149 = 0x10000;
            else
              v149 = 0;
            v150 = v137 | v149;
            swift_bridgeObjectRetain();
            v151 = v644;
            v152 = specialized static AttributedString.parseMarkdown<A>(_:including:options:baseURL:)(v744, (uint64_t)v664, (unint64_t)v111, v150, v122, v121, (int)v671, 0);
            v28 = (unint64_t)v151;
            if (v151)
            {

              swift_bridgeObjectRelease();
              v28 = 0;
              v153 = 0;
              v117 = 0;
              if ((v139 & 1) == 0)
                goto LABEL_124;
            }
            else
            {
              v153 = v152;
              swift_bridgeObjectRelease();
              v117 = *(_OWORD **)&v744[0];
              if ((v139 & 1) == 0)
                goto LABEL_124;
            }
            goto LABEL_121;
          }
        }
        else
        {
          memset(v744, 0, 32);
          v139 = (char)v670;
        }
        outlined destroy of Any?((uint64_t)v744, &demangling cache variable for type metadata for Any?);
        goto LABEL_116;
      }
      v140 = objc_msgSend(v648, sel_preferredLocalizations);
      if (v140)
      {
        v141 = v140;
        type metadata accessor for __SwiftDeferredNSArray();
        swift_unknownObjectRetain();
        if (swift_dynamicCastClass())
        {
          swift_retain();

        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
        v142 = swift_dynamicCastClass();
        if (v142)
        {
          v143 = (_QWORD *)v142;

          if (!v143[2])
            goto LABEL_276;
LABEL_273:
          v122 = (NSError *)v143[4];
          v121 = (NSError *)v143[5];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          goto LABEL_93;
        }
        swift_unknownObjectRelease();
        objc_msgSend(v141, sel_copy);
        v561 = _bridgeCocoaArray<A>(_:)();
        swift_unknownObjectRelease();
        v143 = (_QWORD *)specialized _arrayForceCast<A, B>(_:)(v561);

        swift_bridgeObjectRelease();
        if (v143[2])
          goto LABEL_273;
      }
      else
      {
        v143 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        if (*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
          goto LABEL_273;
      }
LABEL_276:
      swift_bridgeObjectRelease();
      v121 = 0;
      goto LABEL_93;
    }
    v118 = BYTE8(v744[0]);

    outlined consume of URL?(v675);
    LODWORD(v635) = v118 & 1;
    while (1)
    {
      v677 = v117;
      v676 = MEMORY[0x1E0DEE9D8];
      swift_bridgeObjectRelease();
      if ((v671 & 1) == 0)
        break;
      v644 = (void *)v28;
      v157 = v117[2];
      v1083[0] = v117[1];
      v1083[1] = v157;
      v1083[2] = v117[3];
      v158 = BigString.startIndex.getter();
      v160 = v159;
      v162 = v161;
      v164 = v163;
      v165 = v1083;
      v166 = BigString.endIndex.getter();
      if (v166 >> 10 < v158 >> 10)
      {
        __break(1u);
LABEL_295:
        swift_once();
        goto LABEL_131;
      }
      v165 = v826;
      v1075 = v158;
      v1076 = v160;
      v1077 = v162;
      v1078 = v164;
      v1079 = v166;
      v1080 = v167;
      v1081 = v168;
      v1082 = v169;
      v170 = swift_retain();
      AttributedString.Runs.init(_:in:)(v170, v816);
      v829 = v816[10];
      v830 = v816[11];
      v831 = v817;
      v826[6] = v816[6];
      v826[7] = v816[7];
      v828 = v816[9];
      v827 = v816[8];
      v826[2] = v816[2];
      v826[3] = v816[3];
      v826[5] = v816[5];
      v826[4] = v816[4];
      v826[1] = v816[1];
      v826[0] = v816[0];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      v158 = swift_allocObject();
      *(_OWORD *)(v158 + 16) = xmmword_18205C850;
      outlined retain of AttributedString.Runs((uint64_t)v826);
      if (one-time initialization token for name != -1)
        goto LABEL_295;
LABEL_131:
      v171 = qword_1EDC3E500;
      v663 = (_OWORD *)(v97 + 16);
      *(_QWORD *)(v158 + 32) = static AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute.name;
      *(_QWORD *)(v158 + 40) = v171;
      swift_bridgeObjectRetain();
      outlined release of AttributedString.Runs((uint64_t)v826);
      v658 = (const void *)*((_QWORD *)&v829 + 1);
      v172 = *((_QWORD *)&v829 + 1) >> 10;
      v660 = (__int128 *)((char *)v743 + 8);
      v651 = (__int128 *)((char *)v744 + 8);
      v173 = *(_OWORD *)((char *)v165 + 72);
      v653 = (__int128 *)((char *)&v710 + 8);
      v174 = *(_OWORD *)((char *)v165 + 88);
      v612 = (char *)&v743[4] + 8;
      v613 = &v854;
      v822 = v173;
      v823 = v174;
      v175 = *(_OWORD *)((char *)v165 + 104);
      v610 = &v870;
      v611 = (char *)&v744[4] + 8;
      v176 = *(_OWORD *)((char *)v165 + 120);
      v609 = (__int128 *)v726;
      v619 = &v692;
      v620 = v867;
      v824 = v175;
      v825 = v176;
      v618 = &v680;
      v177 = *(_OWORD *)((char *)v165 + 8);
      v616 = &v895;
      v178 = *(_OWORD *)((char *)v165 + 24);
      v614 = (__int128 *)&v898;
      v818 = v177;
      v819 = v178;
      v179 = *(_OWORD *)((char *)v165 + 56);
      v820 = *(_OWORD *)((char *)v165 + 40);
      v821 = v179;
      v656 = *(const void **)&v826[0];
      v617 = 0x8000000182303D10;
      v670 = (_OWORD *)*((_QWORD *)&v830 + 1);
      v655 = v830;
      v669 = v831;
      v657 = (const void *)*((_QWORD *)&v827 + 1);
      v180 = *((_QWORD *)&v827 + 1);
      v654 = v828;
      v673 = (_QWORD *)*((_QWORD *)&v828 + 1);
      v674 = (id)v828;
      v659 = (id)v829;
      v672 = (id)v829;
      v671 = (void *)v158;
      v652 = *((_QWORD *)&v829 + 1) >> 10;
      while (1)
      {
        while (1)
        {
          while (1)
          {
            while (1)
            {
              while (1)
              {
LABEL_136:
                if (v180 >> 10 == v172)
                {
                  _s10Foundation16AttributedStringV22MarkdownSourcePositionVSg_SnyAC5IndexVGtSgWOi0_((uint64_t)v744);
                  outlined init with take of LocalePreferences?((uint64_t)v744, (uint64_t)v814, (uint64_t *)&demangling cache variable for type metadata for (AttributedString.MarkdownSourcePosition?, Range<AttributedString.Index>)?);
                }
                else
                {
                  v181 = v822;
                  v182 = v823;
                  v183 = v823;
                  v668 = v180 >> 10;
                  v184 = v653;
                  v653[4] = v822;
                  v184[5] = v182;
                  v185 = v824;
                  v186 = v825;
                  v187 = v825;
                  v184[6] = v824;
                  v184[7] = v186;
                  v188 = v818;
                  v189 = v819;
                  v190 = v819;
                  *v184 = v818;
                  v184[1] = v189;
                  v191 = v820;
                  v192 = v821;
                  v193 = v821;
                  v184[2] = v820;
                  v184[3] = v192;
                  v195 = v659;
                  v194 = v660;
                  v660[4] = v181;
                  v194[5] = v183;
                  v194[6] = v185;
                  v194[7] = v187;
                  *v194 = v188;
                  v194[1] = v190;
                  v194[2] = v191;
                  v194[3] = v193;
                  v196 = v656;
                  v197 = v657;
                  *(_QWORD *)&v743[0] = v656;
                  *((_QWORD *)&v743[8] + 1) = v657;
                  v198 = v654;
                  v743[9] = v654;
                  v675 = (void *)v180;
                  v200 = *((_QWORD *)&v654 + 1);
                  v199 = v655;
                  *(_QWORD *)&v743[10] = v195;
                  v201 = v658;
                  *((_QWORD *)&v743[10] + 1) = v658;
                  *(_QWORD *)&v743[11] = v655;
                  *((_QWORD *)&v743[11] + 1) = v670;
                  *(_QWORD *)&v743[12] = v669;
                  v691 = (unint64_t)v675;
                  *(_QWORD *)&v692 = v674;
                  *((_QWORD *)&v692 + 1) = v673;
                  *(_QWORD *)&v693 = v672;
                  AttributedString.Runs.subscript.getter(&v691, &v725);
                  v667 = v725;
                  v666 = (id)v726[0];
                  v665 = v726[9];
                  v202 = v823;
                  v203 = v651;
                  v651[4] = v822;
                  v203[5] = v202;
                  v204 = v825;
                  v203[6] = v824;
                  v203[7] = v204;
                  v205 = v819;
                  *v203 = v818;
                  v203[1] = v205;
                  v206 = v821;
                  v203[2] = v820;
                  v203[3] = v206;
                  *(_QWORD *)&v744[0] = v196;
                  *((_QWORD *)&v744[8] + 1) = v197;
                  *(_QWORD *)&v744[9] = v198;
                  *((_QWORD *)&v744[9] + 1) = v200;
                  *(_QWORD *)&v744[10] = v195;
                  *((_QWORD *)&v744[10] + 1) = v201;
                  *(_QWORD *)&v744[11] = v199;
                  *((_QWORD *)&v744[11] + 1) = v670;
                  *(_QWORD *)&v744[12] = v669;
                  *((_QWORD *)&v744[12] + 1) = v158;
                  v207 = MEMORY[0x1E0DEE9D8];
                  *(_QWORD *)&v744[13] = MEMORY[0x1E0DEE9D8];
                  *(_QWORD *)&v710 = v196;
                  v715 = v197;
                  v716 = v198;
                  v717 = v200;
                  v208 = v675;
                  v718 = v195;
                  v97 = (unint64_t)v672;
                  v719 = v201;
                  v111 = v673;
                  v209 = (uint64_t)v674;
                  v720 = v199;
                  v721 = v670;
                  v722 = v669;
                  v725 = v675;
                  v726[0] = v674;
                  v726[1] = v673;
                  v726[2] = v672;
                  outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)v744);
                  swift_retain();
                  AttributedString.Runs._slicedRunBoundary(after:attributeNames:constraints:)((unint64_t *)&v725, (uint64_t)v671, v207, (uint64_t *)v743);
                  swift_release();
                  outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v744);
                  v210 = *(_QWORD *)&v743[0];
                  if (v668 > *(_QWORD *)&v743[0] >> 10)
                  {
                    __break(1u);
LABEL_282:
                    __break(1u);
LABEL_283:
                    __break(1u);
LABEL_284:
                    __break(1u);
LABEL_285:
                    __break(1u);
                    goto LABEL_286;
                  }
                  v668 = *((_QWORD *)&v743[0] + 1);
                  v212 = (void *)*((_QWORD *)&v743[1] + 1);
                  v211 = *(_QWORD **)&v743[1];
                  specialized AttributedString._AttributeStorage.subscript.getter((uint64_t)v667, (uint64_t)v814);
                  swift_release();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v814[14] = v208;
                  v814[15] = v209;
                  v814[16] = v111;
                  v814[17] = v97;
                  v814[18] = v210;
                  v213 = v668;
                  v814[19] = v668;
                  v815 = __PAIR128__((unint64_t)v212, (unint64_t)v211);
                  destructiveProjectEnumData for PredicateCodableError(v814, v214);
                  v180 = v210;
                  v674 = (id)v213;
                  v673 = v211;
                  v672 = v212;
                  v158 = (unint64_t)v671;
                  v172 = v652;
                }
                outlined init with take of LocalePreferences?((uint64_t)v814, (uint64_t)v799, (uint64_t *)&demangling cache variable for type metadata for (AttributedString.MarkdownSourcePosition?, Range<AttributedString.Index>)?);
                outlined init with take of LocalePreferences?((uint64_t)v799, (uint64_t)v800, (uint64_t *)&demangling cache variable for type metadata for (AttributedString.MarkdownSourcePosition?, Range<AttributedString.Index>)?);
                if (_s10Foundation16AttributedStringV22MarkdownSourcePositionVSg_SnyAC5IndexVGtSgWOg((uint64_t)v800) == 1)
                {
                  *(__int128 *)((char *)&v744[4] + 8) = v822;
                  *(__int128 *)((char *)&v744[5] + 8) = v823;
                  *(__int128 *)((char *)&v744[6] + 8) = v824;
                  *(__int128 *)((char *)&v744[7] + 8) = v825;
                  *(__int128 *)((char *)v744 + 8) = v818;
                  *(__int128 *)((char *)&v744[1] + 8) = v819;
                  *(__int128 *)((char *)&v744[2] + 8) = v820;
                  *(__int128 *)((char *)&v744[3] + 8) = v821;
                  *(_QWORD *)&v744[0] = v656;
                  *((_QWORD *)&v744[8] + 1) = v657;
                  v744[9] = v654;
                  *(_QWORD *)&v744[10] = v659;
                  *((_QWORD *)&v744[10] + 1) = v658;
                  *(_QWORD *)&v744[11] = v655;
                  *((_QWORD *)&v744[11] + 1) = v670;
                  *(_QWORD *)&v744[12] = v669;
                  *((_QWORD *)&v744[12] + 1) = v158;
                  *(_QWORD *)&v744[13] = MEMORY[0x1E0DEE9D8];
                  *((_QWORD *)&v744[13] + 1) = v180;
                  *(_QWORD *)&v744[14] = v674;
                  *((_QWORD *)&v744[14] + 1) = v673;
                  *(_QWORD *)&v744[15] = v672;
                  outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v744);
                  swift_bridgeObjectRelease();
                  memset(v743, 0, 105);
                  BYTE9(v743[6]) = 1;
                  specialized AttributedString.subscript.setter((uint64_t)v743);
                  goto LABEL_251;
                }
                if ((v805 & 1) == 0)
                {
                  v668 = v806;
                  v215 = v807;
                  v667 = v808;
                  v666 = v809;
                  v216 = v810;
                  v217 = v811;
                  v665 = v812;
                  v649 = v813;
                  v1070[0] = v800[0];
                  v1070[1] = v800[1];
                  v1070[2] = v800[2];
                  v1070[3] = v800[3];
                  v1071 = v801 & 1;
                  v1072 = v802;
                  v1073 = v803;
                  v1074 = v804 & 1;
                  v218 = (unint64_t)v661;
                  swift_bridgeObjectRetain();
                  v219 = specialized Range<>.init<A>(_:in:)((uint64_t)v1070, (unint64_t)v664, v218);
                  if ((v221 & 1) == 0)
                    break;
                }
              }
              v222 = v219;
              v223 = v220;
              v646 = v217;
              v642 = v215;
              v675 = (void *)v180;
              v224 = v663[1];
              v1069[0] = *v663;
              v1069[1] = v224;
              v1069[2] = v663[2];
              v225 = v219 >> 16;
              if ((v219 & 0xC) == 8)
                break;
              v227 = BigString.Index.init(_utf8Offset:utf16TrailingSurrogate:)();
              v229 = v228;
              v231 = v230;
              v638 = v232;
              if ((unint64_t)BigString.endIndex.getter() >> 10 >= v227 >> 10)
              {
                v629 = v231;
                swift_retain();
                goto LABEL_152;
              }
LABEL_135:
              v180 = (unint64_t)v675;
              v158 = (unint64_t)v671;
            }
            BigString.utf16.getter();
            v226 = BigString.UTF16View.count.getter();
            swift_retain();
            outlined retain of Locale((uint64_t)v1069);
            outlined release of Locale((uint64_t)&v832);
            if (v226 >= v225)
              break;
            outlined release of Locale((uint64_t)v1069);
            swift_release();
            v180 = (unint64_t)v675;
          }
          v636 = v216;
          BigString.utf16.getter();
          BigString.startIndex.getter();
          v227 = BigString.UTF16View.index(_:offsetBy:)();
          v229 = v233;
          v235 = v234;
          v237 = v236;
          outlined release of Locale((uint64_t)&v833);
          if (v222 >> 14)
          {
            BigString.utf8.getter();
            v227 = BigString.UTF8View.index(_:offsetBy:)();
            v229 = v238;
            v629 = v239;
            v638 = v240;
            outlined release of Locale((uint64_t)&v834);
          }
          else
          {
            v638 = v237;
            v629 = v235;
          }
          outlined release of Locale((uint64_t)v1069);
          v216 = v636;
LABEL_152:
          v241 = v663[1];
          v1066 = *v663;
          v1067 = v241;
          v1068 = v663[2];
          if ((v223 & 0xC) != 8)
          {
            v623 = v229;
            v244 = BigString.Index.init(_utf8Offset:utf16TrailingSurrogate:)();
            v255 = v254;
            v248 = v256;
            v250 = v257;
            if ((unint64_t)BigString.endIndex.getter() >> 10 >= v244 >> 10)
            {
              v636 = v216;
              v637 = v255;
              goto LABEL_160;
            }
            goto LABEL_134;
          }
          BigString.utf16.getter();
          v242 = BigString.UTF16View.count.getter();
          v1091[0] = v1066;
          v1091[1] = v1067;
          v1091[2] = v1068;
          outlined init with take of any PredicateExpression<Self.Output == B1>(v1091, (uint64_t)v1092);
          outlined retain of Locale((uint64_t)v1092);
          outlined release of Locale((uint64_t)&v835);
          if (v242 < (uint64_t)(v223 >> 16))
          {
            outlined release of Locale((uint64_t)&v1066);
LABEL_134:
            swift_release();
            goto LABEL_135;
          }
          v622 = v227;
          v623 = v229;
          v243 = (unsigned __int16)v223 >> 14;
          BigString.utf16.getter();
          BigString.startIndex.getter();
          v244 = BigString.UTF16View.index(_:offsetBy:)();
          v246 = v245;
          v248 = v247;
          v250 = v249;
          outlined release of Locale((uint64_t)&v836);
          if (v243)
          {
            BigString.utf8.getter();
            v244 = BigString.UTF8View.index(_:offsetBy:)();
            v637 = v251;
            v248 = v252;
            v250 = v253;
            outlined release of Locale((uint64_t)&v837);
          }
          else
          {
            v637 = v246;
          }
          v227 = v622;
          v636 = v216;
          outlined release of Locale((uint64_t)&v1066);
LABEL_160:
          v180 = (unint64_t)v675;
          v258 = v663[1];
          v1063 = *v663;
          v1064 = v258;
          v1065 = v663[2];
          v259 = v227 >> 10;
          if (v227 >> 10 >= (unint64_t)BigString.startIndex.getter() >> 10)
            break;
          swift_release();
          v158 = (unint64_t)v671;
        }
        v260 = BigString.endIndex.getter();
        swift_release();
        v111 = (id)(v244 >> 10);
        if (v244 >> 10 <= v260 >> 10)
          break;
        v158 = (unint64_t)v671;
      }
      v261 = v663[1];
      v1060 = *v663;
      v1061 = v261;
      v1062 = v663[2];
      v262 = BigString.startIndex.getter();
      v622 = v227;
      v263 = v262;
      v615 = v259;
      v265 = v264;
      v267 = v266;
      v97 = v268;
      v269 = BigString.endIndex.getter();
      v1052 = v263;
      v1053 = v265;
      v1054 = v267;
      v1055 = v97;
      v270 = v662;
      v1056 = v269;
      v1057 = v271;
      v1058 = v272;
      v1059 = v273;
      BigString.unicodeScalars.getter();
      swift_retain_n();
      BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)&v838);
      outlined release of Locale((uint64_t)v839);
      swift_release();
      v1001 = v622;
      v1002 = v623;
      v1003 = v629;
      v1004 = v638;
      v1005 = v244;
      v1006 = v637;
      v1007 = v248;
      v1008 = v250;
      if (v615 < v839[6] >> 10 || v839[10] >> 10 < (unint64_t)v111)
      {
        __break(1u);
LABEL_333:
        __break(1u);
        goto LABEL_334;
      }
      v274 = v663[1];
      v1049 = *v663;
      v1050 = v274;
      v1051 = v663[2];
      BigString.unicodeScalars.getter();
      swift_retain();
      BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)&v840);
      outlined release of Locale((uint64_t)&v841);
      swift_release();
      v275 = *(_QWORD *)&v842[32];
      v781 = *(_OWORD *)v842;
      v782 = *(_OWORD *)&v842[16];
      v783 = *(_OWORD *)&v842[32];
      v784 = *(_OWORD *)&v842[48];
      *(_QWORD *)&v785 = v270;
      v276 = *(_QWORD *)v842;
      *((_QWORD *)&v785 + 1) = *(_QWORD *)v842;
      v633 = *(_QWORD *)&v842[16];
      v634 = *(_QWORD *)&v842[8];
      v786 = *(_OWORD *)&v842[8];
      v632 = *(id *)&v842[24];
      v787 = *(_OWORD *)&v842[24];
      v788 = *(_OWORD *)&v842[40];
      v789 = *(unint64_t *)&v842[56];
      v277 = v677;
      v278 = v677[2];
      v1046 = v677[1];
      v1047 = v278;
      v1048 = v677[3];
      v279 = BigString.startIndex.getter();
      v111 = v280;
      v282 = v281;
      v284 = v283;
      v285 = BigString.endIndex.getter();
      v1038 = v279;
      v1039 = v111;
      v1040 = v282;
      v1041 = v284;
      v1042 = v285;
      v1043 = v286;
      v1044 = v287;
      v1045 = v288;
      BigString.unicodeScalars.getter();
      swift_retain_n();
      BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)&v843);
      outlined release of Locale((uint64_t)v844);
      v637 = v277;
      swift_release();
      v1027 = v668;
      v1028 = v642;
      v1029 = v667;
      v1030 = v666;
      v1031 = v636;
      v1032 = v646;
      v1033 = v665;
      v1034 = v649;
      v608 = v668 >> 10;
      if (v668 >> 10 < v844[6] >> 10 || v844[10] >> 10 < v636 >> 10)
        goto LABEL_333;
      v289 = v637;
      v290 = v637 + 1;
      v291 = v637[2];
      v1035 = v637[1];
      v1036 = v291;
      v1037 = v637[3];
      BigString.unicodeScalars.getter();
      swift_retain();
      BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)&v845);
      outlined release of Locale((uint64_t)&v846);
      swift_release();
      v97 = *(_QWORD *)v847;
      v111 = *(id *)&v847[16];
      v790 = *(_OWORD *)v847;
      v791 = *(_OWORD *)&v847[16];
      v792 = *(_OWORD *)&v847[32];
      v793 = *(_OWORD *)&v847[48];
      *(_QWORD *)&v794 = v289;
      *((_QWORD *)&v794 + 1) = *(_QWORD *)v847;
      v795 = *(_OWORD *)&v847[8];
      v796 = *(_OWORD *)&v847[24];
      v797 = *(_OWORD *)&v847[40];
      v798 = *(unint64_t *)&v847[56];
      v292 = v275 >> 10;
      v293 = *(_OWORD **)&v847[24];
      v665 = *(_QWORD *)&v847[32] >> 10;
      v771 = v789;
      v770 = v788;
      v769 = v787;
      v768 = v786;
      v767 = v785;
      v766 = v784;
      v765 = v783;
      v763 = v781;
      v764 = v782;
      v778 = *(_OWORD *)&v847[24];
      v779 = *(_OWORD *)&v847[40];
      v780 = *(unint64_t *)&v847[56];
      v774 = *(_OWORD *)&v847[32];
      v775 = *(_OWORD *)&v847[48];
      v777 = *(_OWORD *)&v847[8];
      v776 = v794;
      v628 = (const void *)(v276 >> 10);
      v636 = *(_QWORD *)v847 >> 10;
      v773 = *(_OWORD *)&v847[16];
      v772 = *(_OWORD *)v847;
      swift_retain();
      v294 = v292;
      swift_retain();
      v627 = v292;
      while (2)
      {
        v295 = v276 >> 10;
        v649 = v276 >> 10;
        if (v276 >> 10 != v294)
        {
          if (v295 < (unint64_t)v628 || v295 >= v294)
            goto LABEL_284;
          v630 = v293;
          v631 = (uint64_t)v111;
          v298 = v663;
          v299 = v663[1];
          v1024 = *v663;
          v1025 = v299;
          v1026 = v663[2];
          BigString.unicodeScalars.getter();
          v111 = v632;
          LODWORD(v646) = BigString.UnicodeScalarView.subscript.getter();
          outlined release of Locale((uint64_t)&v848);
          v300 = *v298;
          v301 = v298[1];
          v1023 = v298[2];
          v1022 = v301;
          v1021 = v300;
          BigString.unicodeScalars.getter();
          outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v781);
          v302 = BigString.UnicodeScalarView.index(after:)();
          v633 = v304;
          v634 = v303;
          v632 = v305;
          outlined release of Locale((uint64_t)&v849);
          swift_release();
          if (v627 < v302 >> 10)
            goto LABEL_285;
          v760 = v787;
          v761 = v788;
          v762 = v789;
          v756 = v783;
          v757 = v784;
          v759 = v786;
          v758 = v785;
          v296 = v97 >> 10;
          v755 = v782;
          v754 = v781;
          v297 = v665;
          v111 = (id)v631;
          if (v97 >> 10 == v665)
          {
            v751 = v778;
            v752 = v779;
            v753 = v780;
            v747 = v774;
            v748 = v775;
            v750 = v777;
            v749 = v776;
            v746 = v773;
            v745 = v772;
LABEL_207:
            outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v745);
            outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v754);
            swift_release();
            swift_release();
            v158 = (unint64_t)v671;
            v172 = v652;
            v180 = (unint64_t)v675;
            goto LABEL_136;
          }
          v276 = v302;
          v294 = v627;
          goto LABEL_177;
        }
        v760 = v769;
        v761 = v770;
        v762 = v771;
        v756 = v765;
        v757 = v766;
        v759 = v768;
        v758 = v767;
        v296 = v97 >> 10;
        v755 = v764;
        v754 = v763;
        v297 = v665;
        if (v97 >> 10 != v665)
        {
          LODWORD(v646) = 0;
LABEL_177:
          if (v296 < v636 || v296 >= v297)
            goto LABEL_282;
          v306 = v290[1];
          v1018 = *v290;
          v1019 = v306;
          v1020 = v290[2];
          BigString.unicodeScalars.getter();
          v307 = BigString.UnicodeScalarView.subscript.getter();
          outlined release of Locale((uint64_t)&v850);
          v308 = v290[1];
          v1015 = *v290;
          v1016 = v308;
          v1017 = v290[2];
          BigString.unicodeScalars.getter();
          outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v790);
          v97 = BigString.UnicodeScalarView.index(after:)();
          v111 = v309;
          v293 = v310;
          outlined release of Locale((uint64_t)&v851);
          swift_release();
          if (v665 < v97 >> 10)
            goto LABEL_283;
          v751 = v796;
          v752 = v797;
          v753 = v798;
          v747 = v792;
          v748 = v793;
          v750 = v795;
          v749 = v794;
          v746 = v791;
          v745 = v790;
          if (v649 == v294 || (_DWORD)v646 != v307)
            goto LABEL_207;
          v769 = v760;
          v770 = v761;
          v771 = v762;
          v765 = v756;
          v766 = v757;
          v768 = v759;
          v767 = v758;
          v764 = v755;
          v763 = v754;
          v778 = v796;
          v779 = v797;
          v780 = v798;
          v774 = v792;
          v775 = v793;
          v777 = v795;
          v776 = v794;
          v773 = v791;
          v772 = v790;
          continue;
        }
        break;
      }
      v751 = v778;
      v752 = v779;
      v753 = v780;
      v747 = v774;
      v748 = v775;
      v750 = v777;
      v749 = v776;
      v746 = v773;
      v745 = v772;
      outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v745);
      outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v754);
      v311 = v662;
      swift_release();
      swift_release();
      v312 = v663[1];
      v1012 = *v663;
      v1013 = v312;
      v1014 = v663[2];
      BigString.startIndex.getter();
      BigString.endIndex.getter();
      BigString.unicodeScalars.getter();
      swift_retain();
      BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)&v852);
      outlined release of Locale((uint64_t)&v853);
      v313 = *((_OWORD *)v613 + 1);
      v901[8] = *(_OWORD *)v613;
      v901[9] = v313;
      v314 = *((_OWORD *)v613 + 3);
      v901[10] = *((_OWORD *)v613 + 2);
      v901[11] = v314;
      AttributedString.Runs.init(_:in:)(v311, v743);
      v315 = v743[0];
      v316 = v743[1];
      v317 = v743[2];
      v318 = v743[3];
      v319 = *(_QWORD *)&v743[4];
      v320 = v611;
      v321 = v612;
      v322 = *((_OWORD *)v612 + 5);
      *((_OWORD *)v611 + 4) = *((_OWORD *)v612 + 4);
      v320[5] = v322;
      v323 = v321[7];
      v320[6] = v321[6];
      v320[7] = v323;
      v324 = v321[1];
      *v320 = *v321;
      v320[1] = v324;
      v325 = v321[3];
      v320[2] = v321[2];
      v320[3] = v325;
      v744[0] = v315;
      v744[1] = v316;
      v744[2] = v317;
      v744[3] = v318;
      *(_QWORD *)&v744[4] = v319;
      *((_QWORD *)&v744[12] + 1) = *((_QWORD *)&v315 + 1);
      v744[13] = v316;
      v744[14] = v317;
      v744[15] = v318;
      *(_QWORD *)&v744[16] = v319;
      specialized IndexingIterator.next()((uint64_t)v743);
      v665 = *(_QWORD *)&v743[0];
      if (*(_QWORD *)&v743[0])
      {
        v628 = (const void *)*((_QWORD *)&v743[0] + 1);
        v649 = *((_QWORD *)&v743[1] + 1);
        v326 = *(_QWORD *)&v743[1];
        v646 = *(_QWORD *)&v743[2];
        v636 = *((_QWORD *)&v743[3] + 1);
        v327 = *(const void **)&v743[3];
        v637 = (_OWORD *)*((_QWORD *)&v743[2] + 1);
        v328 = v666;
        v329 = (uint64_t)v667;
        v58 = v642;
        v97 = v668;
        v633 = *((_QWORD *)&v743[4] + 1);
        v634 = *(_QWORD *)&v743[4];
        v330 = *(void **)&v743[5];
        while (2)
        {
          v631 = v329;
          v632 = v328;
          v630 = v58;
          v28 = v97;
          while (1)
          {
            v621 = v330;
            v626 = v327;
            v627 = v326;
            v331 = v663[1];
            v929 = *v663;
            v930 = v331;
            v931 = v663[2];
            v332 = BigString.startIndex.getter();
            v334 = v333;
            v114 = v335;
            v97 = v336;
            v337 = BigString.endIndex.getter();
            v921 = v332;
            v922 = v334;
            v339 = (unint64_t)v626;
            v338 = v627;
            v923 = v114;
            v924 = v97;
            v925 = v337;
            v926 = v340;
            v927 = v341;
            v928 = v342;
            BigString.unicodeScalars.getter();
            swift_retain_n();
            BigString.UnicodeScalarView.subscript.getter();
            outlined release of Locale((uint64_t)&v855);
            outlined release of Locale((uint64_t)&v856);
            swift_release();
            if (v858 >> 10 < v339 >> 10
              || v339 >> 10 < v857 >> 10
              || v338 >> 10 < v857 >> 10
              || v858 >> 10 < v338 >> 10)
            {
              __break(1u);
LABEL_288:
              __break(1u);
LABEL_289:
              __break(1u);
LABEL_290:
              __break(1u);
LABEL_291:
              __break(1u);
              goto LABEL_292;
            }
            v343 = v663[1];
            v918 = *v663;
            v919 = v343;
            v920 = v663[2];
            BigString.unicodeScalars.getter();
            BigString.UnicodeScalarView.distance(from:to:)();
            outlined release of Locale((uint64_t)&v859);
            swift_release();
            v344 = v677;
            v345 = v677[2];
            v915 = v677[1];
            v916 = v345;
            v917 = v677[3];
            v346 = BigString.startIndex.getter();
            v97 = v347;
            v349 = v348;
            v351 = v350;
            v352 = BigString.endIndex.getter();
            v907 = v346;
            v908 = v97;
            v909 = v349;
            v910 = v351;
            v911 = v352;
            v912 = v353;
            v913 = v354;
            v914 = v355;
            BigString.unicodeScalars.getter();
            swift_retain_n();
            BigString.UnicodeScalarView.subscript.getter();
            outlined release of Locale((uint64_t)&v860);
            outlined release of Locale((uint64_t)&v861);
            swift_release();
            v114 = v28 >> 10;
            v58 = (_OWORD *)(v862 >> 10);
            if (v28 >> 10 < v862 >> 10)
              goto LABEL_288;
            v111 = (id)(v863 >> 10);
            if (v863 >> 10 < v114)
              goto LABEL_288;
            v356 = v344[2];
            v906[3] = v344[1];
            v906[4] = v356;
            v906[5] = v344[3];
            BigString.unicodeScalars.getter();
            v97 = BigString.UnicodeScalarView.index(_:offsetBy:)();
            v358 = v357;
            v360 = v359;
            v625 = v361;
            outlined release of Locale((uint64_t)&v864);
            swift_release_n();
            v362 = v97 >> 10;
            if (v97 >> 10 < (unint64_t)v58 || (unint64_t)v111 < v362)
              goto LABEL_289;
            if (v362 < v114)
              goto LABEL_290;
            v624 = v360;
            *(_QWORD *)&v710 = v665;
            *((_QWORD *)&v710 + 1) = v628;
            LOBYTE(v691) = 1;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              v363 = v344[2];
              v906[0] = v344[1];
              v906[1] = v363;
              v906[2] = v344[3];
              v364 = *((_QWORD *)v344 + 8);
              v365 = *((_QWORD *)v344 + 9);
              v367 = *((_QWORD *)v344 + 10);
              v366 = *((_QWORD *)v344 + 11);
              type metadata accessor for AttributedString.Guts();
              swift_allocObject();
              outlined retain of Locale((uint64_t)v906);
              swift_unknownObjectRetain();
              v368 = AttributedString.Guts.init(string:runs:)(v906, v364, v365, v367, v366);
              v677 = (_OWORD *)v368;
              swift_release();
              v344 = (_OWORD *)v368;
            }
            v111 = &demangling cache variable for type metadata for (AttributedString.MarkdownSourcePosition?, Range<AttributedString.Index>)?;
            v369 = v344[2];
            v903 = v344[1];
            v904 = v369;
            v905 = v344[3];
            BigString.startIndex.getter();
            BigString.endIndex.getter();
            v902[2] = v28;
            v902[3] = v630;
            v902[4] = v631;
            v902[5] = v632;
            v902[6] = v97;
            v58 = v358;
            v902[7] = v358;
            v902[8] = v624;
            v902[9] = v625;
            BigString.unicodeScalars.getter();
            swift_retain_n();
            BigString.UnicodeScalarView.subscript.getter();
            swift_release();
            outlined release of Locale((uint64_t)&v865);
            outlined release of Locale((uint64_t)&v866);
            v370 = v620;
            v371 = v620[1];
            v372 = v660;
            *v660 = *v620;
            v372[1] = v371;
            v373 = v370[3];
            v372[2] = v370[2];
            v372[3] = v373;
            *(_QWORD *)&v743[0] = v344;
            if (one-time initialization token for currentIdentity != -1)
              swift_once();
            v374 = (uint64_t *)(static AttributedString.currentIdentity + 16);
            v375 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
            swift_retain();
            os_unfair_lock_lock(v375);
            v376 = v644;
            closure #1 in static AttributedString._nextModifyIdentity.getter(v374, (uint64_t *)&v725);
            os_unfair_lock_unlock(v375);
            swift_release();
            v377 = v725;
            *((_QWORD *)&v743[4] + 1) = v725;
            BigString.init()();
            v725 = 0;
            MEMORY[0x186DA9E90](&v725, 8);
            v114 = (unint64_t)v725;
            type metadata accessor for AttributedString.Guts();
            v28 = swift_allocObject();
            if ((BigString.isEmpty.getter() & 1) == 0)
              goto LABEL_291;
            v378 = v867[5];
            *(_OWORD *)(v28 + 16) = v867[4];
            *(_OWORD *)(v28 + 32) = v378;
            *(_OWORD *)(v28 + 48) = v867[6];
            *(_QWORD *)(v28 + 64) = 0;
            *(_QWORD *)(v28 + 72) = 0;
            *(_QWORD *)(v28 + 80) = 0;
            *(_QWORD *)(v28 + 88) = v114;
            swift_release();
            AttributedSubstring.mergeAttributes(_:mergePolicy:)((uint64_t *)&v710, (char *)&v691);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (*((void **)&v743[4] + 1) != v377)
              goto LABEL_343;
            v644 = v376;
            v677 = *(_OWORD **)&v743[0];
            swift_release();
            if (!(((v650[2] & 1) == 0) | v635 & 1))
              break;
            outlined consume of AttributedString.Runs.Run?(v665);
            specialized IndexingIterator.next()((uint64_t)v743);
            v628 = (const void *)*((_QWORD *)&v743[0] + 1);
            v649 = *((_QWORD *)&v743[1] + 1);
            v326 = *(_QWORD *)&v743[1];
            v637 = (_OWORD *)*((_QWORD *)&v743[2] + 1);
            v646 = *(_QWORD *)&v743[2];
            v636 = *((_QWORD *)&v743[3] + 1);
            v327 = *(const void **)&v743[3];
            v632 = v625;
            v633 = *((_QWORD *)&v743[4] + 1);
            v634 = *(_QWORD *)&v743[4];
            v630 = v58;
            v631 = v624;
            v28 = v97;
            v330 = *(void **)&v743[5];
            v665 = *(_QWORD *)&v743[0];
            if (!*(_QWORD *)&v743[0])
            {
              v158 = (unint64_t)v671;
              goto LABEL_209;
            }
          }
          v379 = v665;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          specialized AttributedString._AttributeStorage.subscript.getter(v379, (uint64_t)v743);
          outlined consume of AttributedString.Runs.Run?(v379);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v380 = *((_QWORD *)&v743[0] + 1);
          outlined consume of AttributedString.AttributeRunBoundaries?(*(uint64_t *)&v743[0], *((uint64_t *)&v743[0] + 1));
          LODWORD(v635) = v380 != 1;
          specialized IndexingIterator.next()((uint64_t)v743);
          v628 = (const void *)*((_QWORD *)&v743[0] + 1);
          v649 = *((_QWORD *)&v743[1] + 1);
          v326 = *(_QWORD *)&v743[1];
          v637 = (_OWORD *)*((_QWORD *)&v743[2] + 1);
          v646 = *(_QWORD *)&v743[2];
          v636 = *((_QWORD *)&v743[3] + 1);
          v327 = *(const void **)&v743[3];
          v633 = *((_QWORD *)&v743[4] + 1);
          v634 = *(_QWORD *)&v743[4];
          v330 = *(void **)&v743[5];
          v158 = (unint64_t)v671;
          v665 = *(_QWORD *)&v743[0];
          v329 = v624;
          v328 = v625;
          if (*(_QWORD *)&v743[0])
            continue;
          break;
        }
      }
      else
      {
        v158 = (unint64_t)v671;
      }
LABEL_209:
      memcpy(v743, v744, 0x108uLL);
      outlined release of AttributedString.Runs((uint64_t)v743);
      if ((v650[2] & 1) == 0)
      {
LABEL_212:
        v172 = v652;
        v180 = (unint64_t)v675;
        goto LABEL_136;
      }
      v381 = v663[1];
      v1009 = *v663;
      v1010 = v381;
      v1011 = v663[2];
      BigString.startIndex.getter();
      BigString.endIndex.getter();
      BigString.unicodeScalars.getter();
      v382 = v662;
      swift_retain();
      BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)&v868);
      outlined release of Locale((uint64_t)&v869);
      v383 = *((_OWORD *)v610 + 1);
      v901[4] = *(_OWORD *)v610;
      v901[5] = v383;
      v384 = *((_OWORD *)v610 + 3);
      v901[6] = *((_OWORD *)v610 + 2);
      v901[7] = v384;
      AttributedString.Runs.init(_:in:)(v382, &v725);
      v385 = v609[5];
      v739 = v609[4];
      v740 = v385;
      v386 = v609[7];
      v741 = v609[6];
      v742 = v386;
      v387 = v609[1];
      v735 = *v609;
      v736 = v387;
      v388 = v609[3];
      v737 = v609[2];
      v738 = v388;
      v627 = (unint64_t)v725;
      v389 = v728;
      v97 = v729;
      v390 = (void *)v730;
      v625 = v732;
      v626 = (const void *)v731;
      v624 = v733;
      v391 = (_OWORD *)(v727 >> 10);
      v621 = v734;
      v607 = (_OWORD *)(v731 >> 10);
      v628 = (const void *)v727;
      if (v727 >> 10 == v731 >> 10)
      {
LABEL_211:
        v392 = v740;
        v393 = v653;
        v653[4] = v739;
        v393[5] = v392;
        v394 = v742;
        v393[6] = v741;
        v393[7] = v394;
        v395 = v736;
        *v393 = v735;
        v393[1] = v395;
        v396 = v738;
        v393[2] = v737;
        v393[3] = v396;
        *(_QWORD *)&v710 = v627;
        v715 = v628;
        v716 = v389;
        v717 = v97;
        v718 = v390;
        v719 = v626;
        v720 = (uint64_t)v625;
        v721 = (_OWORD *)v624;
        v722 = v621;
        v723 = &outlined read-only object #0 of specialized String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:);
        v724 = MEMORY[0x1E0DEE9D8];
        outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v710);
        v158 = (unint64_t)v671;
        goto LABEL_212;
      }
      v397 = v728;
      v398 = v729;
      v399 = v730;
      v400 = v727;
      v605 = v730;
      v606 = v728;
      v636 = v729;
      while (1)
      {
        v665 = v400;
        v649 = v397;
        v646 = v398;
        v637 = (_OWORD *)v399;
        v634 = (unint64_t)v391;
        v412 = v739;
        v413 = v740;
        v414 = v740;
        v415 = v618;
        *((_OWORD *)v618 + 4) = v739;
        *((_OWORD *)v415 + 5) = v413;
        v416 = v741;
        v417 = v742;
        v418 = v742;
        *((_OWORD *)v415 + 6) = v741;
        *((_OWORD *)v415 + 7) = v417;
        v419 = v735;
        v420 = v736;
        v421 = v736;
        *(_OWORD *)v415 = v735;
        *((_OWORD *)v415 + 1) = v420;
        v422 = v737;
        v423 = v738;
        v424 = v738;
        *((_OWORD *)v415 + 2) = v737;
        *((_OWORD *)v415 + 3) = v423;
        v425 = v619;
        v619[4] = v412;
        v425[5] = v414;
        v425[6] = v416;
        v425[7] = v418;
        *v425 = v419;
        v425[1] = v421;
        v425[2] = v422;
        v425[3] = v424;
        v28 = v627;
        v426 = v628;
        v691 = v627;
        v697 = v628;
        v698 = v389;
        v699 = v97;
        v700 = v390;
        v427 = v625;
        v428 = v626;
        v701 = v626;
        v702 = v625;
        v703 = v624;
        v429 = v624;
        v704 = v621;
        v430 = v621;
        v690[0] = v400;
        v690[1] = v397;
        v690[2] = v398;
        v690[3] = v399;
        v431 = v389;
        v432 = v390;
        AttributedString.Runs.subscript.getter(v690, &v705);
        v633 = v706;
        v631 = v705;
        v632 = v709;
        v433 = v740;
        v434 = v653;
        v653[4] = v739;
        v434[5] = v433;
        v435 = v742;
        v434[6] = v741;
        v434[7] = v435;
        v436 = v736;
        *v434 = v735;
        v434[1] = v436;
        v437 = v738;
        v434[2] = v737;
        v434[3] = v437;
        *(_QWORD *)&v710 = v28;
        v715 = v426;
        v716 = v431;
        v717 = v636;
        v718 = v432;
        v719 = v428;
        v720 = (uint64_t)v427;
        v438 = v429;
        v721 = (_OWORD *)v429;
        v722 = v430;
        v723 = &outlined read-only object #0 of specialized String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:);
        v111 = (id)MEMORY[0x1E0DEE9D8];
        v724 = MEMORY[0x1E0DEE9D8];
        v679 = v28;
        v682 = v426;
        v683 = v431;
        v97 = v636;
        v684 = v636;
        v685 = v432;
        v686 = v428;
        v687 = v427;
        v688 = v438;
        v689 = v430;
        v705 = v665;
        v706 = v649;
        v707 = v646;
        v708 = v637;
        swift_retain();
        outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)&v710);
        AttributedString.Runs._slicedRunBoundary(after:attributeNames:constraints:)(&v705, (uint64_t)&outlined read-only object #0 of specialized String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:), (uint64_t)v111, (uint64_t *)&v691);
        swift_release();
        outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v710);
        v407 = v691;
        v117 = (_OWORD *)(v691 >> 10);
        if (v691 >> 10 < v634)
          break;
        v411 = *((_QWORD *)&v692 + 1);
        v634 = v692;
        v399 = v693;
        v439 = v631;
        if (*(_QWORD *)(v631 + 16)
          && (v440 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000012, v617), (v441 & 1) != 0))
        {
          outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v439 + 56) + 72 * v440, (uint64_t)&v691);
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v691, (uint64_t)&v679);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
          swift_dynamicCast();
          outlined destroy of AttributedString._AttributeValue((uint64_t)&v691);
          v442 = 0;
          LOBYTE(v706) = 0;
          v443 = v705;
        }
        else
        {
          v443 = 0;
          v705 = 0;
          v442 = 1;
          LOBYTE(v706) = 1;
        }
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v408 = v634;
        if ((v442 & 1) == 0)
        {
          v604 = v443;
          v632 = (id)v399;
          v633 = v411;
          v444 = v663[1];
          v998 = *v663;
          v999 = v444;
          v1000 = v663[2];
          v445 = BigString.startIndex.getter();
          v447 = v446;
          v449 = v448;
          v451 = v450;
          v452 = BigString.endIndex.getter();
          v990 = v445;
          v991 = v447;
          v992 = v449;
          v993 = v451;
          v994 = v452;
          v995 = v453;
          v996 = v454;
          v997 = v455;
          BigString.unicodeScalars.getter();
          swift_retain_n();
          BigString.UnicodeScalarView.subscript.getter();
          outlined release of Locale((uint64_t)&v871);
          outlined release of Locale((uint64_t)&v872);
          swift_release();
          v456 = v665 >> 10;
          if (v874 >> 10 < v665 >> 10 || v456 < v873 >> 10 || v615 < v873 >> 10 || v874 >> 10 < v615)
          {
            __break(1u);
LABEL_336:
            __break(1u);
LABEL_337:
            __break(1u);
LABEL_338:
            __break(1u);
LABEL_339:
            __break(1u);
LABEL_340:
            __break(1u);
LABEL_341:
            __break(1u);
          }
          v457 = v663;
          v458 = v663[1];
          v987 = *v663;
          v988 = v458;
          v989 = v663[2];
          BigString.unicodeScalars.getter();
          v631 = BigString.UnicodeScalarView.distance(from:to:)();
          outlined release of Locale((uint64_t)&v875);
          swift_release();
          v459 = v457[1];
          v984 = *v457;
          v985 = v459;
          v986 = v457[2];
          v460 = BigString.startIndex.getter();
          v462 = v461;
          v464 = v463;
          v466 = v465;
          v467 = BigString.endIndex.getter();
          v976 = v460;
          v977 = v462;
          v978 = v464;
          v979 = v466;
          v980 = v467;
          v981 = v468;
          v982 = v469;
          v983 = v470;
          BigString.unicodeScalars.getter();
          swift_retain_n();
          BigString.UnicodeScalarView.subscript.getter();
          outlined release of Locale((uint64_t)&v876);
          outlined release of Locale((uint64_t)&v877);
          swift_release();
          if (v879 >> 10 < (unint64_t)v117
            || (unint64_t)v117 < v878 >> 10
            || v456 < v878 >> 10
            || v879 >> 10 < v456)
          {
            goto LABEL_336;
          }
          v603 = (_OWORD *)(v407 >> 10);
          v471 = v663[1];
          v973 = *v663;
          v974 = v471;
          v975 = v663[2];
          BigString.unicodeScalars.getter();
          v602 = v407;
          v472 = BigString.UnicodeScalarView.distance(from:to:)();
          outlined release of Locale((uint64_t)&v880);
          swift_release();
          v473 = v677;
          v474 = v677[2];
          v970 = v677[1];
          v971 = v474;
          v972 = v677[3];
          v475 = BigString.startIndex.getter();
          v477 = v476;
          v479 = v478;
          v481 = v480;
          v482 = BigString.endIndex.getter();
          v962 = v475;
          v963 = v477;
          v964 = v479;
          v965 = v481;
          v966 = v482;
          v967 = v483;
          v968 = v484;
          v969 = v485;
          BigString.unicodeScalars.getter();
          swift_retain_n();
          BigString.UnicodeScalarView.subscript.getter();
          outlined release of Locale((uint64_t)&v881);
          outlined release of Locale((uint64_t)&v882);
          swift_release();
          v486 = v883 >> 10;
          if (v608 < v883 >> 10)
            goto LABEL_337;
          v487 = v884 >> 10;
          if (v884 >> 10 < v608)
            goto LABEL_337;
          v630 = (_OWORD *)v472;
          v488 = v473 + 1;
          v489 = v473[2];
          v959 = v473[1];
          v960 = v489;
          v961 = v473[3];
          BigString.unicodeScalars.getter();
          v490 = BigString.UnicodeScalarView.index(_:offsetBy:)();
          v646 = v491;
          v665 = v492;
          v649 = v493;
          outlined release of Locale((uint64_t)&v885);
          swift_release_n();
          v637 = (_OWORD *)v490;
          v494 = v490 >> 10;
          if (v490 >> 10 < v486 || v487 < v494)
            goto LABEL_338;
          v495 = v473[2];
          v956 = *v488;
          v957 = v495;
          v958 = v473[3];
          v496 = BigString.startIndex.getter();
          v498 = v497;
          v500 = v499;
          v502 = v501;
          v503 = BigString.endIndex.getter();
          v948 = v496;
          v949 = v498;
          v950 = v500;
          v951 = v502;
          v952 = v503;
          v953 = v504;
          v954 = v505;
          v955 = v506;
          BigString.unicodeScalars.getter();
          swift_retain_n();
          BigString.UnicodeScalarView.subscript.getter();
          outlined release of Locale((uint64_t)&v886);
          outlined release of Locale((uint64_t)&v887);
          swift_release();
          v507 = v888 >> 10;
          if (v494 < v888 >> 10)
            goto LABEL_339;
          v508 = v889 >> 10;
          if (v889 >> 10 < v494)
            goto LABEL_339;
          v509 = v473[2];
          v947[3] = *v488;
          v947[4] = v509;
          v631 = (uint64_t)(v473 + 1);
          v947[5] = v473[3];
          BigString.unicodeScalars.getter();
          v510 = BigString.UnicodeScalarView.index(_:offsetBy:)();
          v512 = v511;
          v514 = v513;
          v516 = v515;
          outlined release of Locale((uint64_t)&v890);
          v601 = v473;
          swift_release_n();
          v517 = v510 >> 10;
          if (v510 >> 10 < v507 || v508 < v517)
            goto LABEL_340;
          v630 = v516;
          if (v517 < v494)
            goto LABEL_341;
          v518 = v510;
          v519 = v512;
          v520 = (__int128 *)v631;
          v521 = *(_OWORD *)(v631 + 16);
          v947[0] = *(_OWORD *)v631;
          v947[1] = v521;
          v947[2] = *(_OWORD *)(v631 + 32);
          BigString.startIndex.getter();
          BigString.endIndex.getter();
          BigString.utf16.getter();
          outlined retain of Locale((uint64_t)v947);
          v522 = v637;
          v523 = v646;
          v524 = v665;
          v525 = v649;
          v600 = BigString.UTF16View.distance(from:to:)();
          outlined release of Locale((uint64_t)&v891);
          BigString.utf16.getter();
          v599 = BigString.UTF16View.distance(from:to:)();
          outlined release of Locale((uint64_t)v947);
          outlined release of Locale((uint64_t)&v892);
          v526 = v520[1];
          v944 = *v520;
          v945 = v526;
          v946 = v520[2];
          BigString.startIndex.getter();
          BigString.endIndex.getter();
          v933 = v522;
          v934 = v523;
          v935 = v524;
          v936 = v525;
          v937 = v518;
          v938 = v519;
          v939 = v514;
          v940 = v630;
          BigString.unicodeScalars.getter();
          v527 = (unint64_t)v601;
          swift_retain();
          BigString.UnicodeScalarView.subscript.getter();
          outlined release of Locale((uint64_t)&v893);
          outlined release of Locale((uint64_t)&v894);
          v528 = *((_OWORD *)v616 + 1);
          v901[0] = *(_OWORD *)v616;
          v901[1] = v528;
          v529 = *((_OWORD *)v616 + 3);
          v901[2] = *((_OWORD *)v616 + 2);
          v901[3] = v529;
          swift_retain();
          specialized AttributedString.Guts.getUniformValue<A>(in:key:)(v901, (uint64_t)&v691);
          if ((_QWORD)v693)
          {
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v691, (uint64_t)&v679);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
            swift_dynamicCast();
            outlined destroy of AttributedString._AttributeValue((uint64_t)&v691);
          }
          else
          {
            outlined destroy of Any?((uint64_t)&v691, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
            v706 = 0;
            v705 = 0;
            LODWORD(v707) = 0;
            BYTE4(v707) = -1;
          }
          v97 = v636;
          v530 = v604;
          swift_release();
          v531 = BYTE4(v707);
          v532 = v707;
          swift_release();
          v533 = (__int128 *)v631;
          if (v531 <= 0xFEuLL)
            __asm { BR              X9 }
          v534 = *(_OWORD *)(v631 + 16);
          v941 = *(_OWORD *)v631;
          v942 = v534;
          v943 = *(_OWORD *)(v631 + 32);
          BigString.startIndex.getter();
          BigString.endIndex.getter();
          BigString.unicodeScalars.getter();
          swift_retain();
          BigString.UnicodeScalarView.subscript.getter();
          outlined release of Locale((uint64_t)&v896);
          outlined release of Locale((uint64_t)&v897);
          v535 = v614[1];
          v900[3] = *v614;
          v900[4] = v535;
          v536 = v614[3];
          v900[5] = v614[2];
          v900[6] = v536;
          v537 = *v533;
          v538 = v533[1];
          v932[2] = v533[2];
          v932[1] = v538;
          v932[0] = v537;
          swift_retain();
          outlined retain of Locale((uint64_t)v932);
          BigString.subscript.getter();
          outlined release of Locale((uint64_t)v932);
          outlined release of Locale((uint64_t)v899);
          swift_release();
          v692 = v899[3];
          v693 = v899[4];
          v694 = v899[5];
          v695 = v899[6];
          v691 = v527;
          v696 = 0;
          lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
          String.init<A>(_:)();
          v539 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v693 = type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
          v691 = v539;
          outlined init with copy of (Hashable & Sendable)?((uint64_t)&v691, (uint64_t)&v679, &demangling cache variable for type metadata for Any?);
          v540 = v681;
          if (v681)
          {
            v401 = __swift_project_boxed_opaque_existential_1(&v679, v681);
            v402 = *(_QWORD *)(v540 - 8);
            v403 = MEMORY[0x1E0C80A78](v401);
            v405 = (char *)&v599 - ((v404 + 15) & 0xFFFFFFFFFFFFFFF0);
            (*(void (**)(char *, __n128))(v402 + 16))(v405, v403);
            v406 = _bridgeAnythingToObjectiveC<A>(_:)();
            (*(void (**)(char *, uint64_t))(v402 + 8))(v405, v540);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v679);
          }
          else
          {
            v406 = 0;
          }
          v407 = v602;
          v117 = v603;
          v408 = v634;
          v409 = objc_allocWithZone((Class)_NSAttributedStringReplacement);
          objc_msgSend(v409, sel_initWithIndex_specifierRangeInFormatString_replacementRangeInResult_replacementKind_argument_, v530, 0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFFFFFFLL, v600, v599, 0, v406);
          v410 = swift_unknownObjectRelease();
          MEMORY[0x186DA4AFC](v410);
          if (*(_QWORD *)((v676 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v676 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          outlined destroy of Any?((uint64_t)&v691, &demangling cache variable for type metadata for Any?);
          v399 = (unint64_t)v632;
          v411 = v633;
        }
        v397 = v408;
        v398 = v411;
        v400 = v407;
        v391 = v117;
        v389 = v606;
        v390 = (void *)v605;
        if (v117 == v607)
          goto LABEL_211;
      }
      __break(1u);
LABEL_331:
      swift_once();
LABEL_126:
      v155 = (uint64_t *)(static String.LocalizationValue.attributedStringsCacheLock + 16);
      v156 = (os_unfair_lock_s *)(static String.LocalizationValue.attributedStringsCacheLock + 24);
      swift_retain();
      os_unfair_lock_lock(v156);
      specialized closure #2 in String.LocalizationValue._parseLocalizedMarkdown<A>(_:bundlePreferredLocalization:tableURL:formatConfiguration:scope:appliesSourcePositionAttribute:ignoreCache:)(v155, (uint64_t)v664, (uint64_t)v111, (uint64_t)v117, v635 & 1, (char)v671);
      os_unfair_lock_unlock(v156);
      swift_release();
      swift_release_n();
LABEL_127:

      swift_bridgeObjectRelease();
      outlined consume of URL?(v675);
    }
    swift_bridgeObjectRelease();
LABEL_251:
    v541 = v650;
    if ((*((_BYTE *)v650 + 17) & 1) == 0)
    {
      specialized AttributedString.subscript.setter(0, 1);
      v541 = v650;
    }
    if (((_BYTE)v541[2] & v635 & 1) == 0)
    {
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *v641 = (unint64_t)v677;
      goto LABEL_312;
    }
    v542 = v677;
    v543 = v676;
    v544 = (_QWORD *)v541[1];
    v545 = swift_allocObject();
    *(_QWORD *)(v545 + 16) = v542;
    v546 = v545 + 16;
    v547 = v542[2];
    v744[0] = v542[1];
    v744[1] = v547;
    v744[2] = v542[3];
    v670 = v542;
    swift_retain_n();
    outlined retain of Locale((uint64_t)v744);
    MEMORY[0x186DA46F4](v744);
    v548 = objc_allocWithZone((Class)NSMutableString);
    v549 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v550 = objc_msgSend(v548, sel_initWithString_, v549);
    swift_unknownObjectRelease();
    v669 = (_OWORD *)v543;
    v668 = v545;
    if (v544)
    {
      v675 = v550;
      v551 = v544[2];
      v552 = MEMORY[0x1E0DEE9D8];
      if (v551)
      {
        v674 = (id)(v545 + 16);
        *(_QWORD *)&v710 = MEMORY[0x1E0DEE9D8];
        swift_bridgeObjectRetain();
        specialized ContiguousArray.reserveCapacity(_:)();
        v673 = v544;
        v553 = v544 + 6;
        do
        {
          if (*v553 == 1)
          {
            v554 = objc_allocWithZone((Class)NSString);
            v555 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRetain();
            objc_msgSend(v554, sel_initWithString_, v555);
            swift_unknownObjectRelease();
            outlined consume of InflectionConcept();
          }
          else
          {
            swift_bridgeObjectRetain();
            _ContiguousArrayBuffer._asCocoaArray()();
          }
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          v553 += 24;
          --v551;
        }
        while (v551);
        v552 = v710;
        swift_bridgeObjectRelease();
        v543 = (uint64_t)v669;
        v545 = v668;
        v546 = (uint64_t)v674;
      }
      v559 = v640;
      v550 = v675;
    }
    else
    {
      v552 = 0;
      v559 = v640;
    }
    v560 = swift_getObjectType();
    v675 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v559 + 496))(v560, v559);
    if ((unint64_t)v543 >> 62)
    {
      v562 = v543 & 0xFFFFFFFFFFFFFF8;
      if (v543 < 0)
        v562 = v543;
      v674 = (id)v562;
      swift_bridgeObjectRetain();
      if (!v552)
        goto LABEL_299;
LABEL_270:
      if ((unint64_t)v552 >> 62)
      {
        if (v552 >= 0)
          v595 = (_QWORD *)(v552 & 0xFFFFFFFFFFFFFF8);
        else
          v595 = (_QWORD *)v552;
        v673 = v595;
      }
      else
      {
        type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
        v673 = (_QWORD *)_ContiguousArrayBuffer._asCocoaArray()();
      }
    }
    else
    {
      type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for _NSAttributedStringReplacement);
      swift_bridgeObjectRetain();
      v674 = (id)_ContiguousArrayBuffer._asCocoaArray()();
      if (v552)
        goto LABEL_270;
LABEL_299:
      v673 = 0;
    }
    v672 = objc_msgSend((id)objc_opt_self(), sel_currentUser);
    v713 = partial apply for closure #3 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
    v714 = v545;
    v563 = MEMORY[0x1E0C809B0];
    *(_QWORD *)&v710 = MEMORY[0x1E0C809B0];
    *((_QWORD *)&v710 + 1) = 1107296256;
    v711 = thunk for @escaping @callee_guaranteed () -> (@unowned Int);
    v712 = &block_descriptor_146;
    v671 = _Block_copy(&v710);
    swift_retain();
    swift_release();
    v564 = swift_allocObject();
    *(_QWORD *)(v564 + 16) = partial apply for closure #4 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
    *(_QWORD *)(v564 + 24) = v545;
    v713 = thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()partial apply;
    v714 = v564;
    *(_QWORD *)&v710 = v563;
    *((_QWORD *)&v710 + 1) = 1107296256;
    v711 = thunk for @escaping @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
    v712 = &block_descriptor_154;
    v667 = _Block_copy(&v710);
    swift_retain();
    v646 = v564;
    swift_retain();
    swift_release();
    v565 = swift_allocObject();
    *(_QWORD *)(v565 + 16) = partial apply for closure #5 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
    *(_QWORD *)(v565 + 24) = v545;
    v713 = thunk for @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()partial apply;
    v714 = v565;
    *(_QWORD *)&v710 = v563;
    *((_QWORD *)&v710 + 1) = 1107296256;
    v711 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
    v712 = &block_descriptor_162;
    v666 = _Block_copy(&v710);
    swift_retain();
    v649 = v565;
    swift_retain();
    swift_release();
    v566 = swift_allocObject();
    *(_QWORD *)(v566 + 16) = v546;
    v567 = swift_allocObject();
    *(_QWORD *)(v567 + 16) = closure #6 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)partial apply;
    *(_QWORD *)(v567 + 24) = v566;
    v644 = (void *)v566;
    v713 = thunk for @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()partial apply;
    v714 = v567;
    *(_QWORD *)&v710 = v563;
    *((_QWORD *)&v710 + 1) = 1107296256;
    v711 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@guaranteed NSLocalizedNumberFormatRule, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
    v712 = &block_descriptor_173;
    v665 = (unint64_t)_Block_copy(&v710);
    v650 = (_QWORD *)v567;
    swift_retain();
    swift_release();
    v568 = swift_allocObject();
    *(_QWORD *)(v568 + 16) = v546;
    v569 = swift_allocObject();
    *(_QWORD *)(v569 + 16) = closure #7 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)partial apply;
    *(_QWORD *)(v569 + 24) = v568;
    v642 = (_OWORD *)v568;
    v713 = thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> (@out Any?)partial apply;
    v714 = v569;
    *(_QWORD *)&v710 = v563;
    *((_QWORD *)&v710 + 1) = 1107296256;
    v711 = thunk for @escaping @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> ();
    v712 = &block_descriptor_184;
    v664 = _Block_copy(&v710);
    v651 = (__int128 *)v569;
    swift_retain();
    swift_release();
    v570 = swift_allocObject();
    *(_QWORD *)(v570 + 16) = v546;
    v571 = swift_allocObject();
    *(_QWORD *)(v571 + 16) = closure #8 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)partial apply;
    *(_QWORD *)(v571 + 24) = v570;
    v640 = v570;
    v713 = thunk for @callee_guaranteed (@unowned _NSRange) -> (@unowned Bool)partial apply;
    v714 = v571;
    *(_QWORD *)&v710 = v563;
    *((_QWORD *)&v710 + 1) = 1107296256;
    v711 = thunk for @escaping @callee_guaranteed (@unowned Int, @unowned UnsafeMutablePointer<ObjCBool>) -> (@unowned Bool);
    v712 = &block_descriptor_195;
    v663 = _Block_copy(&v710);
    v652 = v571;
    swift_retain();
    swift_release();
    v572 = swift_allocObject();
    *(_QWORD *)(v572 + 16) = v546;
    v573 = swift_allocObject();
    *(_QWORD *)(v573 + 16) = closure #9 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)partial apply;
    *(_QWORD *)(v573 + 24) = v572;
    v639 = v572;
    v713 = thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> (@out Any?)partial apply;
    v714 = v573;
    *(_QWORD *)&v710 = v563;
    *((_QWORD *)&v710 + 1) = 1107296256;
    v711 = thunk for @escaping @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> (@out Any?);
    v712 = &block_descriptor_206;
    v661 = _Block_copy(&v710);
    v653 = (__int128 *)v573;
    swift_retain();
    swift_release();
    v574 = swift_allocObject();
    *(_QWORD *)(v574 + 16) = v546;
    v575 = swift_allocObject();
    *(_QWORD *)(v575 + 16) = closure #10 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)partial apply;
    *(_QWORD *)(v575 + 24) = v574;
    v638 = v574;
    v713 = thunk for @callee_guaranteed (@unowned _NSRange) -> (@owned String)partial apply;
    v714 = v575;
    *(_QWORD *)&v710 = v563;
    *((_QWORD *)&v710 + 1) = 1107296256;
    v711 = thunk for @escaping @callee_guaranteed (@unowned _NSRange) -> (@owned String);
    v712 = &block_descriptor_217;
    v660 = (__int128 *)_Block_copy(&v710);
    *(_QWORD *)&v654 = v575;
    swift_retain();
    swift_release();
    v576 = swift_allocObject();
    *(_QWORD *)(v576 + 16) = v550;
    v577 = swift_allocObject();
    *(_QWORD *)(v577 + 16) = closure #11 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)partial apply;
    *(_QWORD *)(v577 + 24) = v576;
    v637 = (_OWORD *)v576;
    v713 = thunk for @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()partial apply;
    v714 = v577;
    *(_QWORD *)&v710 = v563;
    *((_QWORD *)&v710 + 1) = 1107296256;
    v711 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@guaranteed String?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
    v712 = &block_descriptor_228;
    v578 = _Block_copy(&v710);
    v579 = v550;
    *((_QWORD *)&v654 + 1) = v577;
    swift_retain();
    swift_release();
    v580 = swift_allocObject();
    *(_QWORD *)(v580 + 16) = v546;
    *(_QWORD *)(v580 + 24) = v579;
    v581 = swift_allocObject();
    *(_QWORD *)(v581 + 16) = closure #12 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)partial apply;
    *(_QWORD *)(v581 + 24) = v580;
    v636 = v580;
    v713 = thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> (@out Any?)partial apply;
    v714 = v581;
    *(_QWORD *)&v710 = v563;
    *((_QWORD *)&v710 + 1) = 1107296256;
    v711 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @in_guaranteed Any) -> ();
    v712 = &block_descriptor_239;
    v582 = _Block_copy(&v710);
    v657 = v582;
    v659 = v579;
    v655 = v581;
    swift_retain();
    swift_release();
    v713 = (uint64_t (*)())destructiveProjectEnumData for PredicateCodableError;
    v714 = 0;
    *(_QWORD *)&v710 = v563;
    *((_QWORD *)&v710 + 1) = 1107296256;
    v711 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed NSAttributedStringKey, @in_guaranteed Any) -> ();
    v712 = &block_descriptor_242;
    v583 = _Block_copy(&v710);
    v656 = v583;
    swift_release();
    v584 = swift_allocObject();
    *(_QWORD *)(v584 + 16) = v670;
    *(_QWORD *)(v584 + 24) = v543;
    v585 = swift_allocObject();
    *(_QWORD *)(v585 + 16) = closure #14 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)partial apply;
    *(_QWORD *)(v585 + 24) = v584;
    v635 = v584;
    v713 = thunk for @callee_guaranteed (@in_guaranteed Any) -> (@out Any?)partial apply;
    v714 = v585;
    *(_QWORD *)&v710 = v563;
    *((_QWORD *)&v710 + 1) = 1107296256;
    v711 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any) -> (@out Any?);
    v712 = &block_descriptor_253;
    v586 = _Block_copy(&v710);
    v658 = v586;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    v597 = (uint64_t)v583;
    v598 = (uint64_t)v586;
    v596 = (uint64_t)v582;
    v28 = (unint64_t)v660;
    v587 = v661;
    v58 = v663;
    v588 = v664;
    v589 = (const void *)v665;
    v67 = (uint64_t)v667;
    v590 = v666;
    _NSInflect((uint64_t)v675, (uint64_t)v674, (uint64_t)v673, (uint64_t)v672, (uint64_t)v671, 0, (uint64_t)v667, (uint64_t)v666, v665, (uint64_t)v664, (uint64_t)v663, (uint64_t)v661, (uint64_t)v660, (uint64_t)v578, v596, v597, v598);

    _Block_release(v656);
    _Block_release(v657);
    _Block_release(v578);
    _Block_release((const void *)v28);
    _Block_release(v587);
    _Block_release(v58);
    _Block_release(v588);
    _Block_release(v589);
    _Block_release(v590);
    _Block_release((const void *)v67);
    _Block_release(v671);

    swift_unknownObjectRelease();
    _Block_release(v658);
    LOBYTE(v587) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v587 & 1) != 0)
    {
      __break(1u);
LABEL_315:
      __break(1u);
LABEL_316:
      __break(1u);
LABEL_317:
      __break(1u);
LABEL_318:
      __break(1u);
LABEL_319:
      __break(1u);
LABEL_320:
      __break(1u);
LABEL_321:
      __break(1u);
LABEL_322:
      __break(1u);
      goto LABEL_323;
    }
    if ((swift_isEscapingClosureAtFileLocation() & 1) != 0)
      goto LABEL_315;
    v67 = v655;
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
      goto LABEL_316;
    v67 = *((_QWORD *)&v654 + 1);
    v592 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v592 & 1) != 0)
      goto LABEL_317;
    v67 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v67 & 1) != 0)
      goto LABEL_318;
    v67 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v67 & 1) != 0)
      goto LABEL_319;
    v67 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v67 & 1) != 0)
      goto LABEL_320;
    v67 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v67 & 1) != 0)
      goto LABEL_321;
    v67 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v67 & 1) != 0)
      goto LABEL_322;
    v67 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v67 & 1) == 0)
      break;
LABEL_323:
    __break(1u);
LABEL_324:
    __break(1u);
LABEL_325:
    swift_once();
LABEL_55:
    v669 = v58;
    v68 = (void *)static NSAttributedStringKey.formatSpecifierConfiguration;
    *((_QWORD *)&v744[1] + 1) = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSDictionary);
    *(_QWORD *)&v744[0] = v67;
    specialized Dictionary.subscript.setter((uint64_t)v744, v68);
  }
  v67 = v646;
  v593 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v593 & 1) != 0)
    goto LABEL_324;
  v594 = *(_QWORD *)(v668 + 16);
  swift_retain();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release_n();
  *v641 = v594;
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();
LABEL_312:

LABEL_313:
}

void String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, _OWORD *a10, void *a11)
{
  uint64_t *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _OWORD *v29;
  id v30;
  id v31;
  uint64_t v32;
  id v33;
  id v34;
  void *v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  id v42;
  _QWORD *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  id v55;
  void *v56;
  id v57;
  id v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  _OWORD *v63;
  id v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const void *v73;
  char *v74;
  uint64_t v75;
  void *v76;
  void *v77;
  uint64_t v78;
  uint64_t (*v79)(uint64_t, uint64_t);
  _OWORD *v80;
  void *v81;
  int64_t v82;
  uint64_t v83;
  uint64_t v84;
  int64_t v85;
  unint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  void *v90;
  id v91;
  uint64_t v92;
  Swift::UInt v93;
  id v94;
  void *v95;
  void *v96;
  uint64_t v97;
  id v98;
  id v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  _OWORD *v112;
  unint64_t v113;
  void *v114;
  id v115;
  Swift::String v116;
  _BOOL4 v117;
  char v118;
  uint64_t v119;
  os_unfair_lock_s *v120;
  uint64_t v121;
  const void *v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  Swift::String v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  id v141;
  id v142;
  void *v143;
  uint64_t v144;
  _QWORD *v145;
  unint64_t v146;
  id v147;
  __int128 v148;
  void *v149;
  int v150;
  void *v151;
  int v152;
  int v153;
  uint64_t v154;
  char v155;
  uint64_t v156;
  os_unfair_lock_s *v157;
  uint64_t *v158;
  const void *v159;
  __int128 v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _OWORD *v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  unint64_t v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 *v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 *v196;
  const void *v197;
  __int128 v198;
  char *v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  __int128 v203;
  __int128 *v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  id v212;
  uint64_t v213;
  unint64_t v214;
  __int128 v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  char v221;
  unsigned __int16 v222;
  unint64_t v223;
  __int128 v224;
  int64_t v225;
  __int128 *v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  __int128 v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  __int128 v261;
  unint64_t v262;
  __int128 v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  id v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  __int128 v276;
  unint64_t v277;
  unint64_t v278;
  _OWORD *v279;
  __int128 v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  _OWORD *v291;
  __int128 *v292;
  __int128 v293;
  unint64_t v294;
  unint64_t v295;
  unint64_t v296;
  unint64_t v297;
  unint64_t v298;
  __int128 *v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  unint64_t v303;
  uint64_t v304;
  _OWORD *v305;
  unint64_t v306;
  __int128 v307;
  int v308;
  __int128 v309;
  void *v310;
  void *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  uint64_t v322;
  _OWORD *v323;
  _OWORD *v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  _QWORD *v329;
  unint64_t v330;
  _OWORD *v331;
  unint64_t v332;
  uint64_t v333;
  unint64_t v334;
  uint64_t v335;
  int v336;
  __int128 v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  void *v343;
  uint64_t v344;
  unint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  unint64_t v349;
  __int128 v350;
  _OWORD *v351;
  __int128 v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  unint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  unint64_t v363;
  __int128 v364;
  uint64_t v365;
  uint64_t v366;
  unint64_t v367;
  _OWORD *v368;
  unint64_t v369;
  __int128 v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  _OWORD *v376;
  __int128 v377;
  _OWORD *v378;
  __int128 v379;
  __int128 *v380;
  __int128 v381;
  uint64_t *v382;
  os_unfair_lock_s *v383;
  const void *v384;
  uint64_t v385;
  uint64_t v386;
  __int128 v387;
  uint64_t v388;
  __int128 v389;
  uint64_t v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  uint64_t v397;
  uint64_t v398;
  char *v399;
  _OWORD *v400;
  __int128 v401;
  __int128 *v402;
  __int128 v403;
  __int128 v404;
  __int128 v405;
  unint64_t v406;
  unint64_t v407;
  unint64_t v408;
  unint64_t v409;
  _QWORD *v410;
  uint64_t v411;
  __n128 v412;
  uint64_t v413;
  char *v414;
  uint64_t v415;
  unint64_t v416;
  unint64_t v417;
  unint64_t v418;
  id v419;
  uint64_t v420;
  __int128 v421;
  __int128 v422;
  __int128 v423;
  uint64_t *v424;
  __int128 v425;
  __int128 v426;
  __int128 v427;
  __int128 v428;
  __int128 v429;
  __int128 v430;
  __int128 v431;
  __int128 v432;
  __int128 v433;
  __int128 *v434;
  unint64_t v435;
  _QWORD *v436;
  const void *v437;
  void *v438;
  uint64_t v439;
  uint64_t v440;
  __int128 v441;
  __int128 *v442;
  __int128 v443;
  __int128 v444;
  __int128 v445;
  void *v446;
  uint64_t v447;
  _QWORD *v448;
  uint64_t v449;
  unint64_t v450;
  unint64_t v451;
  char v452;
  char v453;
  unint64_t v454;
  __int128 v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  unint64_t v467;
  __int128 *v468;
  __int128 v469;
  __int128 v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  __int128 v482;
  uint64_t v483;
  _OWORD *v484;
  __int128 v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  unint64_t v497;
  unint64_t v498;
  __int128 *v499;
  __int128 v500;
  unint64_t v501;
  unint64_t v502;
  uint64_t v503;
  unint64_t v504;
  unint64_t v505;
  __int128 v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  unint64_t v518;
  unint64_t v519;
  __int128 v520;
  unint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  unint64_t v526;
  unint64_t v527;
  unint64_t v528;
  unint64_t v529;
  uint64_t v530;
  __int128 *v531;
  __int128 v532;
  unint64_t v533;
  unint64_t v534;
  unint64_t v535;
  uint64_t v536;
  __int128 v537;
  unint64_t v538;
  __int128 v539;
  __int128 v540;
  unsigned int v541;
  uint64_t v542;
  __int128 *v543;
  __int128 v544;
  __int128 v545;
  __int128 v546;
  __int128 v547;
  __int128 v548;
  uint64_t v549;
  unint64_t v550;
  uint64_t v551;
  _OWORD *v552;
  uint64_t v553;
  __int128 v554;
  id v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  _BYTE *v559;
  id v560;
  uint64_t v561;
  char v562;
  uint64_t *v563;
  os_unfair_lock_s *v564;
  id v565;
  uint64_t v566;
  uint64_t ObjectType;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  _QWORD *v585;
  uint64_t v586;
  uint64_t v587;
  _OWORD *v588;
  void *v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  char *v593;
  const void *v594;
  _OWORD *v595;
  id v596;
  const void *v597;
  char isEscapingClosureAtFileLocation;
  char v599;
  char v600;
  uint64_t v601;
  unint64_t v602;
  void *v603;
  _QWORD v604[4];
  _OWORD *v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  _OWORD *v612;
  unint64_t v613;
  unint64_t v614;
  unint64_t v615;
  unint64_t v616;
  unint64_t v617;
  __int128 *v618;
  uint64_t *v619;
  int v620;
  char *v621;
  char *v622;
  uint64_t *v623;
  uint64_t *v624;
  unint64_t v625;
  uint64_t *v626;
  uint64_t v627;
  unint64_t v628;
  uint64_t *v629;
  __int128 *v630;
  unint64_t v631;
  _OWORD *v632;
  unint64_t v633;
  uint64_t v634;
  int v635;
  void *v636;
  uint64_t v637;
  _OWORD *v638;
  _QWORD *v639;
  unint64_t v640;
  uint64_t v641;
  uint64_t v642;
  void *v643;
  uint64_t v644;
  unint64_t v645;
  _OWORD *v646;
  uint64_t v647;
  int v648;
  _QWORD *v649;
  _OWORD *v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  id v654;
  uint64_t v655;
  unint64_t v656;
  uint64_t v657;
  id v658;
  id v659;
  const void *v660;
  unint64_t v661;
  unint64_t v662;
  uint64_t v663;
  unint64_t v664;
  __int128 *v665;
  __int128 *v666;
  __int128 v667;
  uint64_t v668;
  uint64_t v669;
  void *v670;
  const void *v671;
  id v672;
  char *v673;
  _QWORD *v674;
  __int128 *v675;
  void *v676;
  _OWORD *v677;
  _OWORD *v678;
  _OWORD *v679;
  void *v680;
  id v681;
  _QWORD *v682;
  unint64_t v683;
  id v684;
  _OWORD *v685;
  id v686;
  _QWORD *v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  _OWORD *v691;
  unint64_t v692;
  uint64_t v693;
  uint64_t v694;
  const void *v695;
  uint64_t v696;
  uint64_t v697;
  char *v698;
  _QWORD *v699;
  unint64_t v700;
  void *v701;
  uint64_t v702;
  unint64_t v703[4];
  unint64_t v704;
  __int128 v705;
  __int128 v706;
  __int128 v707;
  __int128 v708;
  uint64_t v709;
  void *v710;
  uint64_t v711;
  uint64_t v712;
  char *v713;
  _QWORD *v714;
  unint64_t v715;
  _OWORD *v716;
  uint64_t v717;
  unint64_t v718;
  uint64_t v719;
  unint64_t v720;
  unint64_t v721;
  _OWORD *v722;
  __int128 v723;
  void *v724;
  void *v725;
  void *v726;
  unint64_t v727;
  const void *v728;
  __int128 v729;
  char *v730;
  _QWORD *v731;
  unint64_t v732;
  void *v733;
  uint64_t v734;
  void *v735;
  uint64_t v736;
  _QWORD *v737;
  _QWORD v738[16];
  unint64_t v739;
  unint64_t v740;
  unint64_t v741;
  unint64_t v742;
  unint64_t v743;
  unint64_t v744;
  _OWORD *v745;
  uint64_t v746;
  __int128 v747;
  __int128 v748;
  __int128 v749;
  __int128 v750;
  __int128 v751;
  __int128 v752;
  __int128 v753;
  __int128 v754;
  __int128 v755[17];
  __int128 v756[17];
  __int128 v757;
  __int128 v758;
  __int128 v759;
  __int128 v760;
  __int128 v761;
  __int128 v762;
  __int128 v763;
  __int128 v764;
  __int128 v765;
  __int128 v766;
  __int128 v767;
  __int128 v768;
  __int128 v769;
  __int128 v770;
  __int128 v771;
  __int128 v772;
  __int128 v773;
  __int128 v774;
  __int128 v775;
  __int128 v776;
  __int128 v777;
  __int128 v778;
  __int128 v779;
  __int128 v780;
  __int128 v781;
  __int128 v782;
  __int128 v783;
  __int128 v784;
  __int128 v785;
  __int128 v786;
  __int128 v787;
  __int128 v788;
  __int128 v789;
  __int128 v790;
  __int128 v791;
  __int128 v792;
  __int128 v793;
  __int128 v794;
  __int128 v795;
  __int128 v796;
  __int128 v797;
  __int128 v798;
  __int128 v799;
  __int128 v800;
  __int128 v801;
  __int128 v802;
  __int128 v803;
  __int128 v804;
  __int128 v805;
  __int128 v806;
  __int128 v807;
  __int128 v808;
  __int128 v809;
  __int128 v810;
  _BYTE v811[176];
  _OWORD v812[4];
  char v813;
  __int128 v814;
  __int128 v815;
  char v816;
  char v817;
  unint64_t v818;
  uint64_t v819;
  void *v820;
  void *v821;
  unint64_t v822;
  uint64_t v823;
  unint64_t v824;
  unint64_t v825;
  _QWORD v826[20];
  __int128 v827;
  _OWORD v828[12];
  uint64_t v829;
  __int128 v830;
  __int128 v831;
  __int128 v832;
  __int128 v833;
  __int128 v834;
  __int128 v835;
  __int128 v836;
  __int128 v837;
  _OWORD v838[8];
  __int128 v839;
  __int128 v840;
  __int128 v841;
  __int128 v842;
  uint64_t v843;
  __int128 v844[3];
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  _QWORD v852[14];
  uint64_t v853;
  uint64_t v854;
  _BYTE v855[64];
  uint64_t v856;
  _QWORD v857[14];
  uint64_t v858;
  uint64_t v859;
  _BYTE v860[64];
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  unint64_t v870;
  unint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  unint64_t v875;
  unint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  _OWORD v880[7];
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  unint64_t v886;
  unint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  unint64_t v891;
  unint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  unint64_t v896;
  unint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  unint64_t v901;
  unint64_t v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  _OWORD v912[11];
  _OWORD v913[12];
  unint64_t v914;
  void *v915;
  unint64_t v916;
  _OWORD *v917;
  unint64_t v918;
  uint64_t v919;
  void *v920;
  _OWORD *v921;
  __int128 v922;
  __int128 v923;
  __int128 v924;
  _OWORD v925[6];
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  unint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  __int128 v934;
  __int128 v935;
  __int128 v936;
  __int128 v937;
  __int128 v938;
  __int128 v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  void *v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  __int128 v948;
  __int128 v949;
  __int128 v950;
  _OWORD v951[3];
  unint64_t v952;
  unint64_t v953;
  unint64_t v954;
  uint64_t v955;
  unint64_t v956;
  uint64_t v957;
  uint64_t v958;
  unint64_t v959;
  __int128 v960;
  __int128 v961;
  __int128 v962;
  __int128 v963;
  __int128 v964;
  __int128 v965;
  _OWORD v966[6];
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  __int128 v975;
  __int128 v976;
  __int128 v977;
  __int128 v978;
  __int128 v979;
  __int128 v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  __int128 v989;
  __int128 v990;
  __int128 v991;
  __int128 v992;
  __int128 v993;
  __int128 v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  __int128 v1003;
  __int128 v1004;
  __int128 v1005;
  __int128 v1006;
  __int128 v1007;
  __int128 v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  __int128 v1017;
  __int128 v1018;
  __int128 v1019;
  unint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  uint64_t v1023;
  unint64_t v1024;
  unint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  __int128 v1028;
  __int128 v1029;
  __int128 v1030;
  __int128 v1031;
  __int128 v1032;
  __int128 v1033;
  __int128 v1034;
  __int128 v1035;
  __int128 v1036;
  __int128 v1037;
  __int128 v1038;
  __int128 v1039;
  __int128 v1040;
  __int128 v1041;
  __int128 v1042;
  __int128 v1043;
  __int128 v1044;
  __int128 v1045;
  unint64_t v1046;
  uint64_t v1047;
  id v1048;
  void *v1049;
  unint64_t v1050;
  uint64_t v1051;
  unint64_t v1052;
  unint64_t v1053;
  __int128 v1054;
  __int128 v1055;
  __int128 v1056;
  uint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  uint64_t v1064;
  __int128 v1065;
  __int128 v1066;
  __int128 v1067;
  __int128 v1068;
  __int128 v1069;
  __int128 v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  unint64_t v1074;
  uint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  __int128 v1079;
  __int128 v1080;
  __int128 v1081;
  __int128 v1082;
  __int128 v1083;
  __int128 v1084;
  __int128 v1085;
  __int128 v1086;
  __int128 v1087;
  _OWORD v1088[3];
  _OWORD v1089[4];
  char v1090;
  __int128 v1091;
  __int128 v1092;
  char v1093;
  unint64_t v1094;
  uint64_t v1095;
  uint64_t v1096;
  uint64_t v1097;
  unint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  _OWORD v1102[3];
  _OWORD v1103[2];
  __int128 v1104;
  __int128 v1105[3];
  _BYTE v1106[40];
  __int128 v1107[3];
  _BYTE v1108[40];
  uint64_t v1109;

  MEMORY[0x1E0C80A78](a1);
  v682 = (_QWORD *)v12;
  v14 = v13;
  v16 = v15;
  v688 = v17;
  v19 = v18;
  v649 = v20;
  v1109 = *MEMORY[0x1E0C80C00];
  v22 = *(void **)v21;
  v644 = *(_QWORD *)(v21 + 8);
  LODWORD(v653) = *(unsigned __int8 *)(v21 + 16);
  v648 = *(unsigned __int8 *)(v21 + 17);
  v675 = *(__int128 **)(v21 + 24);
  LODWORD(v674) = *(unsigned __int8 *)(v21 + 32);
  LODWORD(v677) = *(unsigned __int8 *)(v21 + 33);
  v686 = *(id *)(v21 + 40);
  v679 = *(_OWORD **)(v21 + 48);
  LODWORD(v678) = *(unsigned __int8 *)(v21 + 56);
  v25 = *v23;
  v24 = v23[1];
  v26 = *v11;
  v685 = (_OWORD *)v11[1];
  v689 = v27;
  v684 = (id)v11[2];
  if (!v27)
  {
    v19 = v685;
    v689 = swift_bridgeObjectRetain();
  }
  if (v22)
    v28 = (unint64_t)v22;
  else
    v28 = MEMORY[0x1E0DEE9D8];
  v756[0] = v28;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  v676 = v22;
  swift_bridgeObjectRetain();
  v642 = v24;
  v687 = (_QWORD *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_AJs5NeverOTg506_sSS10d3E17ef43V25argumentsWithReplacements_6localeSayAC14gH40VGSays7CVarArg_pGSg_AA6LocaleVtFA2GXEfU_s16IndexingIteratorVySays0tU0_pGGAF0X0VTf1cn_nTf4nng_n(v26, v756, v25, v24);
  v660 = 0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v641 = v25;
  swift_unknownObjectRelease();
  if (v14)
    v659 = v14;
  else
    v659 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v29 = v19;
  v30 = v686;
  v31 = v14;
  swift_bridgeObjectRetain();
  v32 = String.count.getter();
  swift_bridgeObjectRelease();
  LOBYTE(v19) = (_BYTE)v677;
  if (v32 < 1)
  {
    v16 = (void *)0xEB00000000656C62;
    v688 = 0x617A696C61636F4CLL;
    v33 = v679;
  }
  else
  {
    v33 = v679;
    if (!v16)
    {
      __break(1u);
LABEL_330:
      LODWORD(v608) = 0;
      v607 = 347;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x181D3625CLL);
    }
    swift_bridgeObjectRetain();
  }
  LODWORD(v686) = a9;
  v680 = v16;
  if (v33)
  {
    if ((_DWORD)v678)
    {
      swift_bridgeObjectRetain();
      v34 = objc_msgSend(v659, sel_localizations);
      if (!v34)
        v34 = (id)_ContiguousArrayBuffer._asCocoaArray()();
      v35 = (void *)objc_opt_self();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      v36 = swift_allocObject();
      *(_OWORD *)(v36 + 16) = xmmword_18205C850;
      *(_QWORD *)(v36 + 32) = v30;
      *(_QWORD *)(v36 + 40) = v33;
      v37 = objc_msgSend(v35, sel_preferredLocalizationsFromArray_forPreferences_, v34, _ContiguousArrayBuffer._asCocoaArray()());

      swift_unknownObjectRelease();
      if (v37)
      {
        type metadata accessor for __SwiftDeferredNSArray();
        swift_unknownObjectRetain();
        if (swift_dynamicCastClass())
        {
          swift_retain();

        }
        v38 = swift_dynamicCastClass();
        if (v38)
        {
          v39 = v38;

          v40 = v39;
        }
        else
        {
          swift_unknownObjectRelease();
          objc_msgSend(v37, sel_copy);
          v41 = _bridgeCocoaArray<A>(_:)();
          swift_unknownObjectRelease();
          v40 = specialized _arrayForceCast<A, B>(_:)(v41);

          swift_bridgeObjectRelease();
        }
      }
      else
      {
        v40 = MEMORY[0x1E0DEE9D8];
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      v40 = swift_allocObject();
      *(_OWORD *)(v40 + 16) = xmmword_18205C850;
      *(_QWORD *)(v40 + 32) = v30;
      *(_QWORD *)(v40 + 40) = v33;
      swift_bridgeObjectRetain();
    }
  }
  else
  {
    v40 = 0;
  }
  swift_bridgeObjectRetain();
  v42 = objc_msgSend(v659, sel_preferredLocalizations);
  v43 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (!v42)
  {
LABEL_31:
    if (v40)
      goto LABEL_32;
    goto LABEL_35;
  }
  v44 = v42;
  v45 = v40;
  type metadata accessor for __SwiftDeferredNSArray();
  swift_unknownObjectRetain();
  if (swift_dynamicCastClass())
  {
    swift_retain();

  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v46 = swift_dynamicCastClass();
  if (v46)
  {
    v43 = (_QWORD *)v46;

    goto LABEL_31;
  }
  swift_unknownObjectRelease();
  objc_msgSend(v44, sel_copy);
  v48 = _bridgeCocoaArray<A>(_:)();
  swift_unknownObjectRelease();
  v43 = (_QWORD *)specialized _arrayForceCast<A, B>(_:)(v48);

  swift_bridgeObjectRelease();
  v40 = v45;
  if (v45)
  {
LABEL_32:
    v47 = specialized static Array<A>.== infix(_:_:)((_QWORD *)v40, v43);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v47 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v40 = 0;
    }
    goto LABEL_36;
  }
LABEL_35:
  swift_bridgeObjectRelease();
LABEL_36:
  v657 = v40;
  if ((v686 & 1) != 0)
  {
    v49 = String._bridgeToObjectiveCImpl()();
    v50 = String._bridgeToObjectiveCImpl()();
    v51 = v40;
    v52 = String._bridgeToObjectiveCImpl()();
    if (v51)
    {
      swift_bridgeObjectRetain();
      v53 = (void *)_ContiguousArrayBuffer._asCocoaArray()();
    }
    else
    {
      v53 = 0;
    }
    *(_QWORD *)&v756[0] = 0;
    *(_QWORD *)&v755[0] = 0;
    v55 = objc_msgSend(v659, sel__localizedStringNoCacheNoMarkdownParsingForKey_value_table_localizations_actualTableURL_formatSpecifierConfiguration_, v49, v50, v52, v53, v756, v755);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    v54 = *(void **)&v755[0];
    v56 = *(void **)&v756[0];
    if (!v55)
    {
      v98 = *(id *)&v755[0];
      v99 = v56;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      BigString.init(_:)();
      AttributedString.init(_:attributes:)(v756, MEMORY[0x1E0DEE9E0], MEMORY[0x1E0DEE9E8], (uint64_t *)v755);

      swift_bridgeObjectRelease();
      *v649 = *(_QWORD *)&v755[0];
      return;
    }
    v57 = *(id *)&v755[0];
    v658 = v56;
    v58 = v56;
    swift_bridgeObjectRelease();
    objc_opt_self();
    v59 = (void *)swift_dynamicCastObjCClassUnconditional();
    v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
    v689 = v60;

    v40 = v657;
  }
  else
  {
    v658 = 0;
    v54 = 0;
  }
  v684 = a11;
  v685 = a10;
  v61 = v687[2];
  if (v54)
    v62 = (char)v19;
  else
    v62 = 1;
  v683 = v687[2];
  v681 = v54;
  if (v61 || (v62 & 1) == 0)
  {
    *(_QWORD *)&v838[0] = MEMORY[0x1E0DEE9E0];
    if (!v54)
      goto LABEL_52;
    v66 = one-time initialization token for formatSpecifierConfiguration;
    v67 = v54;
    if (v66 == -1)
      goto LABEL_51;
    goto LABEL_313;
  }
  BigString.init(_:)();
  AttributedString.init(_:attributes:)(v844, MEMORY[0x1E0DEE9E0], MEMORY[0x1E0DEE9E8], (uint64_t *)v756);
  v63 = *(_OWORD **)&v756[0];
  v64 = v658;
  v65 = (unint64_t)v682;
  while (1)
  {
    v679 = v63;
    v108 = v63[1];
    v109 = v63[2];
    v1104 = v63[3];
    v1103[1] = v109;
    v1103[0] = v108;
    v110 = v63[1];
    v111 = v63[2];
    v1105[2] = v1104;
    v1105[1] = v111;
    v1105[0] = v110;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v1105, (uint64_t)v1106);
    outlined retain of Locale((uint64_t)v1106);
    v676 = (void *)MEMORY[0x186DA46F4](v1103);
    v678 = v112;
    if (v64)
    {
      v113 = (unint64_t)v64;
      URL.init(reference:)(v64, v756);
      v115 = (id)*((_QWORD *)&v756[0] + 1);
      v114 = *(void **)&v756[0];
      v689 = *(_QWORD *)&v756[1];
    }
    else
    {
      v113 = 0;
      v114 = 0;
      v115 = 0;
      v689 = 0;
    }
    v654 = v681;
    v116._countAndFlagsBits = 0x65686361636F6E2ELL;
    v116._object = (void *)0xE800000000000000;
    v117 = String.hasSuffix(_:)(v116);
    swift_bridgeObjectRelease();
    LODWORD(v688) = (v117 || v40 != 0) | v686 ^ 1;
    if ((v117 || v40 != 0) | (v686 ^ 1) & 1)
      goto LABEL_80;
    if (one-time initialization token for attributedStringsCacheLock != -1)
LABEL_294:
      swift_once();
    v118 = v683 != 0;
    v119 = static String.LocalizationValue.attributedStringsCacheLock + 16;
    v120 = (os_unfair_lock_s *)(static String.LocalizationValue.attributedStringsCacheLock + 24);
    swift_retain();
    os_unfair_lock_lock(v120);
    v121 = v119;
    v122 = v660;
    closure #1 in String.LocalizationValue._parseLocalizedMarkdown<A>(_:bundlePreferredLocalization:tableURL:formatConfiguration:scope:appliesSourcePositionAttribute:ignoreCache:)(v121, (uint64_t)v676, (uint64_t)v678, v65, v118, (uint64_t)v756);
    v660 = v122;
    os_unfair_lock_unlock(v120);
    swift_release();
    v123 = *(_QWORD *)&v756[0];
    if (!*(_QWORD *)&v756[0])
    {
LABEL_80:
      if (one-time initialization token for localizedAttributedString != -1)
        goto LABEL_288;
      goto LABEL_81;
    }
    v124 = BYTE8(v756[0]);

    outlined consume of URL?(v114);
    v635 = v124 & 1;
LABEL_126:
    v691 = (_OWORD *)v123;
    v690 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRelease();
    if (v683)
      break;
    swift_bridgeObjectRelease();
LABEL_246:
    if ((v648 & 1) == 0)
      specialized AttributedString.subscript.setter(0, 1);
    if ((v653 & v635) != 1)
    {
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *v649 = v691;

      goto LABEL_261;
    }
    v552 = v691;
    v553 = v690;
    v417 = swift_allocObject();
    *(_QWORD *)(v417 + 16) = v552;
    v447 = v417 + 16;
    v554 = v552[2];
    v756[0] = v552[1];
    v756[1] = v554;
    v756[2] = v552[3];
    v683 = (unint64_t)v552;
    swift_retain_n();
    outlined retain of Locale((uint64_t)v756);
    MEMORY[0x186DA46F4](v756);
    v555 = objc_allocWithZone((Class)NSMutableString);
    v556 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v436 = objc_msgSend(v555, sel_initWithString_, v556);
    swift_unknownObjectRelease();
    v689 = v553;
    v682 = (_QWORD *)v417;
    if (v644)
    {
      v557 = *(_QWORD *)(v644 + 16);
      v398 = MEMORY[0x1E0DEE9D8];
      if (v557)
      {
        v687 = v436;
        v688 = v417 + 16;
        *(_QWORD *)&v723 = MEMORY[0x1E0DEE9D8];
        v558 = v644;
        swift_bridgeObjectRetain();
        specialized ContiguousArray.reserveCapacity(_:)();
        v559 = (_BYTE *)(v558 + 48);
        do
        {
          if (*v559 == 1)
          {
            v560 = objc_allocWithZone((Class)NSString);
            v561 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRetain();
            objc_msgSend(v560, sel_initWithString_, v561);
            swift_unknownObjectRelease();
            outlined consume of InflectionConcept();
          }
          else
          {
            swift_bridgeObjectRetain();
            _ContiguousArrayBuffer._asCocoaArray()();
          }
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          v559 += 24;
          --v557;
        }
        while (v557);
        v398 = v723;
        swift_bridgeObjectRelease();
        v553 = v689;
        v417 = (unint64_t)v682;
        v447 = v688;
        v436 = v687;
      }
    }
    else
    {
      v398 = 0;
    }
    v566 = v642;
    ObjectType = swift_getObjectType();
    v568 = (*(uint64_t (**)(uint64_t, uint64_t))(v566 + 496))(ObjectType, v566);
    if ((unint64_t)v553 >> 62)
    {
      if (v553 < 0)
        v569 = v553;
      else
        v569 = v553 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
    }
    else
    {
      type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for _NSAttributedStringReplacement);
      swift_bridgeObjectRetain();
      v569 = _ContiguousArrayBuffer._asCocoaArray()();
    }
    v688 = v568;
    v687 = (_QWORD *)v569;
    if (v398)
    {
      v448 = (_QWORD *)(v398 & 0xFFFFFFFFFFFFFF8);
      if ((unint64_t)v398 >> 62)
      {
LABEL_315:
        if (v398 >= 0)
          v603 = v448;
        else
          v603 = (void *)v398;
        v686 = v603;
      }
      else
      {
        type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
        v686 = (id)_ContiguousArrayBuffer._asCocoaArray()();
      }
    }
    else
    {
      v686 = 0;
    }
    v684 = objc_msgSend((id)objc_opt_self(), sel_currentUser);
    v726 = partial apply for closure #3 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
    v727 = v417;
    v570 = MEMORY[0x1E0C809B0];
    *(_QWORD *)&v723 = MEMORY[0x1E0C809B0];
    *((_QWORD *)&v723 + 1) = 1107296256;
    v724 = thunk for @escaping @callee_guaranteed () -> (@unowned Int);
    v725 = &block_descriptor_17;
    v685 = _Block_copy(&v723);
    swift_retain();
    swift_release();
    v571 = swift_allocObject();
    *(_QWORD *)(v571 + 16) = partial apply for closure #4 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
    *(_QWORD *)(v571 + 24) = v417;
    v726 = partial apply for thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
    v727 = v571;
    *(_QWORD *)&v723 = v570;
    *((_QWORD *)&v723 + 1) = 1107296256;
    v724 = thunk for @escaping @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
    v725 = &block_descriptor_58;
    v681 = _Block_copy(&v723);
    swift_retain();
    v663 = v571;
    swift_retain();
    swift_release();
    v572 = swift_allocObject();
    *(_QWORD *)(v572 + 16) = partial apply for closure #5 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
    *(_QWORD *)(v572 + 24) = v417;
    v726 = partial apply for thunk for @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
    v727 = v572;
    *(_QWORD *)&v723 = v570;
    *((_QWORD *)&v723 + 1) = 1107296256;
    v724 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
    v725 = &block_descriptor_64;
    v680 = _Block_copy(&v723);
    swift_retain();
    v664 = v572;
    swift_retain();
    swift_release();
    v573 = swift_allocObject();
    *(_QWORD *)(v573 + 16) = v447;
    v574 = swift_allocObject();
    *(_QWORD *)(v574 + 16) = partial apply for closure #6 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
    *(_QWORD *)(v574 + 24) = v573;
    v662 = v573;
    v726 = partial apply for thunk for @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
    v727 = v574;
    *(_QWORD *)&v723 = v570;
    *((_QWORD *)&v723 + 1) = 1107296256;
    v724 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@guaranteed NSLocalizedNumberFormatRule, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
    v725 = &block_descriptor_73;
    v678 = _Block_copy(&v723);
    v665 = (__int128 *)v574;
    swift_retain();
    swift_release();
    v575 = swift_allocObject();
    *(_QWORD *)(v575 + 16) = v447;
    v576 = swift_allocObject();
    *(_QWORD *)(v576 + 16) = partial apply for closure #7 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
    *(_QWORD *)(v576 + 24) = v575;
    v661 = v575;
    v726 = partial apply for thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> ();
    v727 = v576;
    *(_QWORD *)&v723 = v570;
    *((_QWORD *)&v723 + 1) = 1107296256;
    v724 = thunk for @escaping @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> ();
    v725 = &block_descriptor_82;
    v677 = _Block_copy(&v723);
    v666 = (__int128 *)v576;
    swift_retain();
    swift_release();
    v577 = swift_allocObject();
    *(_QWORD *)(v577 + 16) = v447;
    v578 = swift_allocObject();
    *(_QWORD *)(v578 + 16) = partial apply for closure #8 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
    *(_QWORD *)(v578 + 24) = v577;
    v660 = (const void *)v577;
    v726 = partial apply for thunk for @callee_guaranteed (@unowned _NSRange) -> (@unowned Bool);
    v727 = v578;
    *(_QWORD *)&v723 = v570;
    *((_QWORD *)&v723 + 1) = 1107296256;
    v724 = thunk for @escaping @callee_guaranteed (@unowned Int, @unowned UnsafeMutablePointer<ObjCBool>) -> (@unowned Bool);
    v725 = &block_descriptor_91;
    v676 = _Block_copy(&v723);
    *(_QWORD *)&v667 = v578;
    swift_retain();
    swift_release();
    v579 = swift_allocObject();
    *(_QWORD *)(v579 + 16) = v447;
    v580 = swift_allocObject();
    *(_QWORD *)(v580 + 16) = partial apply for closure #9 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
    *(_QWORD *)(v580 + 24) = v579;
    v656 = v579;
    v726 = partial apply for thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> ();
    v727 = v580;
    *(_QWORD *)&v723 = v570;
    *((_QWORD *)&v723 + 1) = 1107296256;
    v724 = thunk for @escaping @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> (@out Any?);
    v725 = &block_descriptor_100;
    v675 = (__int128 *)_Block_copy(&v723);
    *((_QWORD *)&v667 + 1) = v580;
    swift_retain();
    swift_release();
    v581 = swift_allocObject();
    *(_QWORD *)(v581 + 16) = v447;
    v582 = swift_allocObject();
    *(_QWORD *)(v582 + 16) = partial apply for closure #10 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
    *(_QWORD *)(v582 + 24) = v581;
    v655 = v581;
    v726 = partial apply for thunk for @callee_guaranteed (@in_guaranteed Any, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
    v727 = v582;
    *(_QWORD *)&v723 = v570;
    *((_QWORD *)&v723 + 1) = 1107296256;
    v724 = thunk for @escaping @callee_guaranteed (@unowned _NSRange) -> (@owned String);
    v725 = &block_descriptor_109;
    v19 = _Block_copy(&v723);
    v668 = v582;
    swift_retain();
    swift_release();
    v583 = swift_allocObject();
    *(_QWORD *)(v583 + 16) = v436;
    v584 = swift_allocObject();
    *(_QWORD *)(v584 + 16) = partial apply for closure #11 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
    *(_QWORD *)(v584 + 24) = v583;
    v652 = v583;
    v726 = partial apply for thunk for @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
    v727 = v584;
    *(_QWORD *)&v723 = v570;
    *((_QWORD *)&v723 + 1) = 1107296256;
    v724 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@guaranteed String?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
    v725 = &block_descriptor_118;
    v30 = _Block_copy(&v723);
    v585 = v436;
    v669 = v584;
    swift_retain();
    swift_release();
    v586 = swift_allocObject();
    *(_QWORD *)(v586 + 16) = v447;
    *(_QWORD *)(v586 + 24) = v585;
    v587 = swift_allocObject();
    *(_QWORD *)(v587 + 16) = partial apply for closure #12 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
    *(_QWORD *)(v587 + 24) = v586;
    v653 = v586;
    v726 = partial apply for thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> ();
    v727 = v587;
    *(_QWORD *)&v723 = v570;
    *((_QWORD *)&v723 + 1) = 1107296256;
    v724 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @in_guaranteed Any) -> ();
    v725 = &block_descriptor_127;
    v588 = _Block_copy(&v723);
    v672 = v588;
    v674 = v585;
    v670 = (void *)v587;
    swift_retain();
    swift_release();
    v726 = destructiveProjectEnumData for PredicateCodableError;
    v727 = 0;
    *(_QWORD *)&v723 = v570;
    *((_QWORD *)&v723 + 1) = 1107296256;
    v724 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed NSAttributedStringKey, @in_guaranteed Any) -> ();
    v725 = &block_descriptor_130;
    v589 = _Block_copy(&v723);
    v671 = v589;
    swift_release();
    v590 = swift_allocObject();
    v591 = v689;
    *(_QWORD *)(v590 + 16) = v683;
    *(_QWORD *)(v590 + 24) = v591;
    v592 = swift_allocObject();
    *(_QWORD *)(v592 + 16) = partial apply for closure #14 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
    *(_QWORD *)(v592 + 24) = v590;
    v651 = v590;
    v726 = partial apply for thunk for @callee_guaranteed (@in_guaranteed Any) -> (@out Any?);
    v727 = v592;
    *(_QWORD *)&v723 = v570;
    *((_QWORD *)&v723 + 1) = 1107296256;
    v724 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any) -> (@out Any?);
    v725 = &block_descriptor_139;
    v593 = (char *)_Block_copy(&v723);
    v673 = v593;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    v606 = (uint64_t)v589;
    v607 = (uint64_t)v593;
    v605 = v588;
    v67 = (uint64_t)v675;
    v594 = v676;
    v595 = v677;
    v29 = v678;
    v596 = v681;
    v597 = v680;
    _NSInflect(v688, (uint64_t)v687, (uint64_t)v686, (uint64_t)v684, (uint64_t)v685, 0, (uint64_t)v681, (uint64_t)v680, (uint64_t)v678, (uint64_t)v677, (uint64_t)v676, (uint64_t)v675, (uint64_t)v19, (uint64_t)v30, (uint64_t)v605, v606, v607);

    _Block_release(v671);
    _Block_release(v672);
    _Block_release(v30);
    _Block_release(v19);
    _Block_release((const void *)v67);
    _Block_release(v594);
    _Block_release(v595);
    _Block_release(v29);
    _Block_release(v597);
    _Block_release(v596);
    _Block_release(v685);

    swift_unknownObjectRelease();
    _Block_release(v673);
    LOBYTE(v596) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v596 & 1) != 0)
    {
      __break(1u);
LABEL_303:
      __break(1u);
LABEL_304:
      __break(1u);
LABEL_305:
      __break(1u);
LABEL_306:
      __break(1u);
LABEL_307:
      __break(1u);
LABEL_308:
      __break(1u);
LABEL_309:
      __break(1u);
LABEL_310:
      __break(1u);
      goto LABEL_311;
    }
    if ((swift_isEscapingClosureAtFileLocation() & 1) != 0)
      goto LABEL_303;
    v67 = (uint64_t)v670;
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
      goto LABEL_304;
    v67 = v669;
    v599 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v599 & 1) != 0)
      goto LABEL_305;
    v67 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v67 & 1) != 0)
      goto LABEL_306;
    v67 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v67 & 1) != 0)
      goto LABEL_307;
    v67 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v67 & 1) != 0)
      goto LABEL_308;
    v67 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v67 & 1) != 0)
      goto LABEL_309;
    v67 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v67 & 1) != 0)
      goto LABEL_310;
    v67 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v67 & 1) == 0)
    {
      v67 = v663;
      v600 = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if ((v600 & 1) == 0)
      {
        v601 = v682[2];
        swift_retain();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release_n();
        *v649 = v601;
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();

        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();

        return;
      }
      goto LABEL_312;
    }
LABEL_311:
    __break(1u);
LABEL_312:
    __break(1u);
LABEL_313:
    swift_once();
LABEL_51:
    v68 = (void *)static NSAttributedStringKey.formatSpecifierConfiguration;
    *((_QWORD *)&v756[1] + 1) = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSDictionary);
    *(_QWORD *)&v756[0] = v67;
    specialized Dictionary.subscript.setter((uint64_t)v756, v68);
LABEL_52:
    v69 = objc_allocWithZone((Class)NSAttributedString);
    v70 = String._bridgeToObjectiveCImpl()();
    type metadata accessor for NSAttributedStringKey(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
    swift_bridgeObjectRetain();
    v672 = objc_msgSend(v69, sel_initWithString_attributes_, v70, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    v71 = swift_unknownObjectRelease();
    MEMORY[0x1E0C80A78](v71);
    v604[2] = v685;
    v604[3] = v684;
    v72 = v642;
    v605 = (_OWORD *)v641;
    v606 = v642;
    v607 = (uint64_t)v682;
    v73 = v660;
    v74 = (char *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_s7CVarArg_p6vararg_AJ15_AttributeFixupOSg11attrStrInfots5NeverOTg5((void (*)(_OWORD *__return_ptr, uint64_t))partial apply for closure #1 in String.LocalizationValue._formatAttributedString<A>(_:preparedArguments:options:scope:formatConfiguration:locale:), (uint64_t)v604, (uint64_t)v687);
    v671 = v73;
    *(_QWORD *)&v756[0] = v676;
    *((_QWORD *)&v756[0] + 1) = v644;
    LOBYTE(v756[1]) = v653;
    BYTE1(v756[1]) = v648;
    *((_QWORD *)&v756[1] + 1) = v675;
    LOBYTE(v756[2]) = (_BYTE)v674;
    BYTE1(v756[2]) = (_BYTE)v19;
    *((_QWORD *)&v756[2] + 1) = v30;
    *(_QWORD *)&v756[3] = v679;
    BYTE8(v756[3]) = (_BYTE)v678;
    v75 = AttributedString.LocalizationOptions._nsOptions.getter();
    v77 = v76;
    v679 = (_OWORD *)(v75 | 2);
    v78 = swift_getObjectType();
    v79 = *(uint64_t (**)(uint64_t, uint64_t))(v72 + 496);
    v80 = v77;
    v81 = (void *)v79(v78, v72);
    v82 = *((_QWORD *)v74 + 2);
    v673 = v74;
    if (v82)
    {
      v678 = v80;
      v677 = v29;
      *(_QWORD *)&v828[0] = MEMORY[0x1E0DEE9D8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v82, 0);
      v83 = (uint64_t)(v74 + 32);
      v84 = *(_QWORD *)&v828[0];
      v85 = v82;
      do
      {
        outlined init with copy of (Hashable & Sendable)?(v83, (uint64_t)v756, &demangling cache variable for type metadata for (vararg: CVarArg, attrStrInfo: String.LocalizationValue.FormatArgument._AttributeFixup?));
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v756, (uint64_t)v755);
        outlined init with take of any PredicateExpression<Self.Output == B1>(v755, (uint64_t)&v723);
        outlined destroy of Any?((uint64_t)v756, &demangling cache variable for type metadata for (vararg: CVarArg, attrStrInfo: String.LocalizationValue.FormatArgument._AttributeFixup?));
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v84 + 16) + 1, 1);
          v84 = *(_QWORD *)&v828[0];
        }
        v87 = *(_QWORD *)(v84 + 16);
        v86 = *(_QWORD *)(v84 + 24);
        if (v87 >= v86 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v86 > 1, v87 + 1, 1);
          v84 = *(_QWORD *)&v828[0];
        }
        *(_QWORD *)(v84 + 16) = v87 + 1;
        outlined init with take of any PredicateExpression<Self.Output == B1>(&v723, v84 + 40 * v87 + 32);
        v83 += 64;
        --v85;
      }
      while (v85);
      v80 = v678;
    }
    v88 = (void *)objc_opt_self();
    v89 = getVaList(_:)();
    swift_bridgeObjectRelease();
    v90 = v672;
    v91 = objc_msgSend(v88, sel__attributedStringWithFormat_attributeOptions_formattingOptions_locale_arguments_, v672, v679, v80, v81, v89);

    v93 = type metadata accessor for _FoundationPlusScope(0, (uint64_t)v685, (uint64_t)v684, v92);
    v94 = v91;
    v95 = static AttributeScope.scopeDescription.getter(v93, (unint64_t)&protocol witness table for _FoundationPlusScope<A>);
    swift_bridgeObjectRelease();
    v96 = (void *)v671;
    AttributedString.init(_:attributeTable:options:)(v94, (uint64_t)v95, 0, v756);
    v64 = v658;
    v97 = (uint64_t)v682;
    if (v96)
    {
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      BigString.init(_:)();
      AttributedString.init(_:attributes:)(v844, MEMORY[0x1E0DEE9E0], MEMORY[0x1E0DEE9E8], (uint64_t *)v756);
      swift_bridgeObjectRelease();

      v660 = 0;
      v63 = *(_OWORD **)&v756[0];
      v40 = v657;
      v65 = v97;
    }
    else
    {
      *(_QWORD *)&v723 = *(_QWORD *)&v756[0];
      v100 = MEMORY[0x1E0DEE9D8];
      v660 = 0;
      v679 = v94;
      if (v82)
      {
        v678 = v80;
        *(_QWORD *)&v828[0] = MEMORY[0x1E0DEE9D8];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v82, 0);
        v101 = v673 + 32;
        v100 = *(_QWORD *)&v828[0];
        do
        {
          outlined init with copy of (Hashable & Sendable)?((uint64_t)v101, (uint64_t)v756, &demangling cache variable for type metadata for (vararg: CVarArg, attrStrInfo: String.LocalizationValue.FormatArgument._AttributeFixup?));
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v756, (uint64_t)v755);
          v102 = *((_QWORD *)&v756[2] + 1);
          v103 = *(_QWORD *)&v756[3];
          v104 = BYTE8(v756[3]);
          *((_QWORD *)&v755[2] + 1) = *((_QWORD *)&v756[2] + 1);
          *(_QWORD *)&v755[3] = *(_QWORD *)&v756[3];
          BYTE8(v755[3]) = BYTE8(v756[3]);
          outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup?(*((uint64_t *)&v756[2] + 1), *(uint64_t *)&v756[3], BYTE8(v756[3]));
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v755);
          outlined destroy of Any?((uint64_t)v756, &demangling cache variable for type metadata for (vararg: CVarArg, attrStrInfo: String.LocalizationValue.FormatArgument._AttributeFixup?));
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v100 + 16) + 1, 1);
            v100 = *(_QWORD *)&v828[0];
          }
          v106 = *(_QWORD *)(v100 + 16);
          v105 = *(_QWORD *)(v100 + 24);
          if (v106 >= v105 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v105 > 1, v106 + 1, 1);
            v100 = *(_QWORD *)&v828[0];
          }
          *(_QWORD *)(v100 + 16) = v106 + 1;
          v107 = v100 + 24 * v106;
          *(_QWORD *)(v107 + 32) = v102;
          *(_QWORD *)(v107 + 40) = v103;
          *(_BYTE *)(v107 + 48) = v104;
          v101 += 64;
          --v82;
        }
        while (v82);
        v40 = v657;
        v64 = v658;
        v65 = (unint64_t)v682;
        v90 = v672;
        v80 = v678;
      }
      else
      {
        v40 = v657;
        v65 = (unint64_t)v682;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      String.LocalizationValue.restoreAttributedStringArguments(_:in:)(v100);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      v63 = (_OWORD *)v723;
    }
  }
  v160 = *(_OWORD *)(v123 + 32);
  v1102[0] = *(_OWORD *)(v123 + 16);
  v1102[1] = v160;
  v1102[2] = *(_OWORD *)(v123 + 48);
  v161 = BigString.startIndex.getter();
  v163 = v162;
  v165 = v164;
  v167 = v166;
  v168 = v1102;
  v169 = BigString.endIndex.getter();
  if (v169 >> 10 < v161 >> 10)
  {
    __break(1u);
  }
  else
  {
    v658 = (id)v113;
    v168 = v838;
    v1094 = v161;
    v1095 = v163;
    v1096 = v165;
    v1097 = v167;
    v1098 = v169;
    v1099 = v170;
    v1100 = v171;
    v1101 = v172;
    v173 = swift_retain();
    AttributedString.Runs.init(_:in:)(v173, v828);
    v841 = v828[10];
    v842 = v828[11];
    v843 = v829;
    v838[6] = v828[6];
    v838[7] = v828[7];
    v840 = v828[9];
    v839 = v828[8];
    v838[2] = v828[2];
    v838[3] = v828[3];
    v838[5] = v828[5];
    v838[4] = v828[4];
    v838[1] = v828[1];
    v838[0] = v828[0];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v123 = swift_allocObject();
    *(_OWORD *)(v123 + 16) = xmmword_18205C850;
    outlined retain of AttributedString.Runs((uint64_t)v838);
    if (one-time initialization token for name == -1)
      goto LABEL_129;
  }
  swift_once();
LABEL_129:
  v174 = qword_1EDC3E500;
  v677 = v679 + 1;
  *(_QWORD *)(v123 + 32) = static AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute.name;
  *(_QWORD *)(v123 + 40) = v174;
  swift_bridgeObjectRetain();
  outlined release of AttributedString.Runs((uint64_t)v838);
  v672 = (id)*((_QWORD *)&v841 + 1);
  v684 = (id)(*((_QWORD *)&v841 + 1) >> 10);
  v675 = (__int128 *)((char *)v755 + 8);
  v665 = (__int128 *)((char *)v756 + 8);
  v175 = *(_OWORD *)((char *)v168 + 72);
  v666 = (__int128 *)((char *)&v723 + 8);
  v176 = *(_OWORD *)((char *)v168 + 88);
  v622 = (char *)&v755[4] + 8;
  v623 = &v867;
  v621 = (char *)&v756[4] + 8;
  v834 = v175;
  v835 = v176;
  v632 = v880;
  v177 = *(_OWORD *)((char *)v168 + 104);
  v178 = *(_OWORD *)((char *)v168 + 120);
  v618 = (__int128 *)v738;
  v619 = &v883;
  v836 = v177;
  v837 = v178;
  v629 = &v693;
  v630 = &v705;
  v179 = *(_OWORD *)((char *)v168 + 8);
  v626 = &v908;
  v180 = *(_OWORD *)((char *)v168 + 24);
  v624 = &v911;
  v620 = v653 ^ 1;
  v830 = v179;
  v831 = v180;
  v181 = *(_OWORD *)((char *)v168 + 56);
  v832 = *(_OWORD *)((char *)v168 + 40);
  v833 = v181;
  v670 = *(void **)&v838[0];
  v627 = 0x8000000182303D10;
  v685 = (_OWORD *)*((_QWORD *)&v842 + 1);
  v668 = v842;
  v669 = v843;
  v671 = (const void *)*((_QWORD *)&v839 + 1);
  v65 = *((_QWORD *)&v839 + 1);
  v667 = v840;
  v687 = (_QWORD *)*((_QWORD *)&v840 + 1);
  v688 = v840;
  v673 = (char *)v841;
  v686 = (id)v841;
  v674 = (_QWORD *)v123;
LABEL_132:
  while (2)
  {
    v182 = v65 >> 10;
    if ((id)(v65 >> 10) == v684)
    {
      _s10Foundation16AttributedStringV22MarkdownSourcePositionVSg_SnyAC5IndexVGtSgWOi0_((uint64_t)v756);
      outlined init with take of LocalePreferences?((uint64_t)v756, (uint64_t)v826, (uint64_t *)&demangling cache variable for type metadata for (AttributedString.MarkdownSourcePosition?, Range<AttributedString.Index>)?);
      goto LABEL_136;
    }
    v183 = v834;
    v184 = v835;
    v185 = v835;
    v186 = v666;
    v666[4] = v834;
    v186[5] = v184;
    v187 = v836;
    v188 = v837;
    v189 = v837;
    v186[6] = v836;
    v186[7] = v188;
    v190 = v830;
    v191 = v831;
    v192 = v831;
    *v186 = v830;
    v186[1] = v191;
    v193 = v832;
    v194 = v833;
    v195 = v833;
    v186[2] = v832;
    v186[3] = v194;
    v196 = v675;
    v675[4] = v183;
    v196[5] = v185;
    v196[6] = v187;
    v196[7] = v189;
    *v196 = v190;
    v196[1] = v192;
    v196[2] = v193;
    v196[3] = v195;
    v114 = v670;
    v197 = v671;
    *(_QWORD *)&v755[0] = v670;
    *((_QWORD *)&v755[8] + 1) = v671;
    v198 = v667;
    v755[9] = v667;
    v199 = v673;
    *(_QWORD *)&v755[10] = v673;
    v689 = v65;
    v200 = v672;
    *((_QWORD *)&v755[10] + 1) = v672;
    v201 = v669;
    *(_QWORD *)&v755[11] = v668;
    v202 = v668;
    *((_QWORD *)&v755[11] + 1) = v685;
    *(_QWORD *)&v755[12] = v669;
    v704 = v689;
    *(_QWORD *)&v705 = v688;
    *((_QWORD *)&v705 + 1) = v687;
    *(_QWORD *)&v706 = v686;
    v683 = v182;
    AttributedString.Runs.subscript.getter(&v704, &v737);
    v682 = v737;
    v681 = (id)v738[0];
    v680 = (void *)v738[9];
    v203 = v835;
    v204 = v665;
    v665[4] = v834;
    v204[5] = v203;
    v205 = v837;
    v204[6] = v836;
    v204[7] = v205;
    v206 = v831;
    *v204 = v830;
    v204[1] = v206;
    v207 = v833;
    v204[2] = v832;
    v204[3] = v207;
    *(_QWORD *)&v756[0] = v114;
    *((_QWORD *)&v756[8] + 1) = v197;
    v756[9] = v198;
    *(_QWORD *)&v756[10] = v199;
    *((_QWORD *)&v756[10] + 1) = v200;
    v208 = v202;
    *(_QWORD *)&v756[11] = v202;
    *((_QWORD *)&v756[11] + 1) = v685;
    v209 = v201;
    *(_QWORD *)&v756[12] = v201;
    v115 = v674;
    *((_QWORD *)&v756[12] + 1) = v674;
    v210 = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)&v756[13] = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)&v723 = v114;
    v728 = v197;
    v729 = v198;
    v730 = v199;
    v113 = (unint64_t)v687;
    v211 = v688;
    v731 = v200;
    v212 = v686;
    v213 = v689;
    v732 = v208;
    v733 = v685;
    v734 = v209;
    v737 = (_QWORD *)v689;
    v738[0] = v688;
    v738[1] = v687;
    v738[2] = v686;
    outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)v756);
    swift_retain();
    AttributedString.Runs._slicedRunBoundary(after:attributeNames:constraints:)((unint64_t *)&v737, (uint64_t)v115, v210, (uint64_t *)v755);
    swift_release();
    outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v756);
    v214 = *(_QWORD *)&v755[0];
    if (v683 <= *(_QWORD *)&v755[0] >> 10)
    {
      v683 = *((_QWORD *)&v755[0] + 1);
      v215 = v755[1];
      specialized AttributedString._AttributeStorage.subscript.getter((uint64_t)v682, (uint64_t)v826);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v826[14] = v213;
      v826[15] = v211;
      v826[16] = v113;
      v826[17] = v212;
      v826[18] = v214;
      v216 = v683;
      v826[19] = v683;
      v827 = v215;
      destructiveProjectEnumData for PredicateCodableError(v826, v217);
      v65 = v214;
      v688 = v216;
      v686 = (id)*((_QWORD *)&v215 + 1);
      v687 = (_QWORD *)v215;
LABEL_136:
      outlined init with take of LocalePreferences?((uint64_t)v826, (uint64_t)v811, (uint64_t *)&demangling cache variable for type metadata for (AttributedString.MarkdownSourcePosition?, Range<AttributedString.Index>)?);
      outlined init with take of LocalePreferences?((uint64_t)v811, (uint64_t)v812, (uint64_t *)&demangling cache variable for type metadata for (AttributedString.MarkdownSourcePosition?, Range<AttributedString.Index>)?);
      if (_s10Foundation16AttributedStringV22MarkdownSourcePositionVSg_SnyAC5IndexVGtSgWOg((uint64_t)v812) == 1)
      {
        *(__int128 *)((char *)&v756[4] + 8) = v834;
        *(__int128 *)((char *)&v756[5] + 8) = v835;
        *(__int128 *)((char *)&v756[6] + 8) = v836;
        *(__int128 *)((char *)&v756[7] + 8) = v837;
        *(__int128 *)((char *)v756 + 8) = v830;
        *(__int128 *)((char *)&v756[1] + 8) = v831;
        *(__int128 *)((char *)&v756[2] + 8) = v832;
        *(__int128 *)((char *)&v756[3] + 8) = v833;
        *(_QWORD *)&v756[0] = v670;
        *((_QWORD *)&v756[8] + 1) = v671;
        v756[9] = v667;
        *(_QWORD *)&v756[10] = v673;
        *((_QWORD *)&v756[10] + 1) = v672;
        *(_QWORD *)&v756[11] = v668;
        *((_QWORD *)&v756[11] + 1) = v685;
        *(_QWORD *)&v756[12] = v669;
        *((_QWORD *)&v756[12] + 1) = v674;
        *(_QWORD *)&v756[13] = MEMORY[0x1E0DEE9D8];
        *((_QWORD *)&v756[13] + 1) = v65;
        *(_QWORD *)&v756[14] = v688;
        *((_QWORD *)&v756[14] + 1) = v687;
        *(_QWORD *)&v756[15] = v686;
        outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v756);
        swift_bridgeObjectRelease();
        memset(v755, 0, 105);
        BYTE9(v755[6]) = 1;
        specialized AttributedString.subscript.setter((uint64_t)v755);
        v113 = (unint64_t)v658;
        goto LABEL_246;
      }
      if ((v817 & 1) != 0)
        continue;
      v683 = v818;
      v682 = (_QWORD *)v819;
      v681 = v820;
      v680 = v821;
      v663 = v823;
      v664 = v822;
      v661 = v825;
      v662 = v824;
      v1089[0] = v812[0];
      v1089[1] = v812[1];
      v1089[2] = v812[2];
      v1089[3] = v812[3];
      v1090 = v813 & 1;
      v1091 = v814;
      v1092 = v815;
      v1093 = v816 & 1;
      v218 = (unint64_t)v678;
      swift_bridgeObjectRetain();
      v219 = specialized Range<>.init<A>(_:in:)((uint64_t)v1089, (unint64_t)v676, v218);
      if ((v221 & 1) != 0)
        continue;
      v222 = v219;
      v223 = v220;
      v224 = v677[1];
      v1088[0] = *v677;
      v1088[1] = v224;
      v1088[2] = v677[2];
      v225 = v219 >> 16;
      if ((v219 & 0xC) == 8)
      {
        v226 = v1088;
        BigString.utf16.getter();
        v227 = BigString.UTF16View.count.getter();
        swift_retain();
        outlined retain of Locale((uint64_t)v1088);
        outlined release of Locale((uint64_t)&v845);
        if (v227 >= v225)
        {
          v228 = v222 >> 14;
          BigString.utf16.getter();
          BigString.startIndex.getter();
          v229 = BigString.UTF16View.index(_:offsetBy:)();
          v231 = v230;
          v233 = v232;
          v235 = v234;
          outlined release of Locale((uint64_t)&v846);
          if (v228)
          {
            BigString.utf8.getter();
            v229 = BigString.UTF8View.index(_:offsetBy:)();
            v655 = v236;
            v651 = v238;
            v652 = v237;
            outlined release of Locale((uint64_t)&v847);
          }
          else
          {
            v651 = v235;
            v652 = v233;
            v655 = v231;
          }
          outlined release of Locale((uint64_t)v1088);
          goto LABEL_147;
        }
LABEL_130:
        outlined release of Locale((uint64_t)v226);
      }
      else
      {
        v229 = BigString.Index.init(_utf8Offset:utf16TrailingSurrogate:)();
        v240 = v239;
        v651 = v242;
        v652 = v241;
        if ((unint64_t)BigString.endIndex.getter() >> 10 < v229 >> 10)
          continue;
        v655 = v240;
        swift_retain();
LABEL_147:
        v243 = v677[1];
        v1085 = *v677;
        v1086 = v243;
        v1087 = v677[2];
        if ((v223 & 0xC) == 8)
        {
          v226 = &v1085;
          BigString.utf16.getter();
          v244 = BigString.UTF16View.count.getter();
          v1107[0] = v1085;
          v1107[1] = v1086;
          v1107[2] = v1087;
          outlined init with take of any PredicateExpression<Self.Output == B1>(v1107, (uint64_t)v1108);
          outlined retain of Locale((uint64_t)v1108);
          outlined release of Locale((uint64_t)&v848);
          if (v244 < (uint64_t)(v223 >> 16))
            goto LABEL_130;
          v245 = v229;
          v246 = (unsigned __int16)v223 >> 14;
          BigString.utf16.getter();
          BigString.startIndex.getter();
          v247 = BigString.UTF16View.index(_:offsetBy:)();
          v249 = v248;
          v251 = v250;
          v123 = v252;
          outlined release of Locale((uint64_t)&v849);
          if (v246)
          {
            BigString.utf8.getter();
            v247 = BigString.UTF8View.index(_:offsetBy:)();
            v656 = v253;
            v251 = v254;
            v123 = v255;
            outlined release of Locale((uint64_t)&v850);
          }
          else
          {
            v656 = v249;
          }
          v229 = v245;
          v260 = v655;
          outlined release of Locale((uint64_t)&v1085);
        }
        else
        {
          v247 = BigString.Index.init(_utf8Offset:utf16TrailingSurrogate:)();
          v656 = v256;
          v251 = v257;
          v123 = v258;
          v259 = BigString.endIndex.getter();
          v260 = v655;
          if (v259 >> 10 < v247 >> 10)
            goto LABEL_131;
        }
        v261 = v677[1];
        v1082 = *v677;
        v1083 = v261;
        v1084 = v677[2];
        if (v229 >> 10 >= (unint64_t)BigString.startIndex.getter() >> 10)
        {
          v631 = v229 >> 10;
          v262 = BigString.endIndex.getter();
          swift_release();
          if (v247 >> 10 > v262 >> 10)
            continue;
          v689 = v65;
          v263 = v677[1];
          v1079 = *v677;
          v1080 = v263;
          v1081 = v677[2];
          v264 = BigString.startIndex.getter();
          v625 = v229;
          v265 = v264;
          v655 = v260;
          v267 = v266;
          v269 = v268;
          v65 = v270;
          v271 = BigString.endIndex.getter();
          v1071 = v265;
          v1072 = v267;
          v1073 = v269;
          v1074 = v65;
          v272 = v679;
          v1075 = v271;
          v1076 = v273;
          v1077 = v274;
          v1078 = v275;
          BigString.unicodeScalars.getter();
          swift_retain_n();
          BigString.UnicodeScalarView.subscript.getter();
          outlined release of Locale((uint64_t)&v851);
          outlined release of Locale((uint64_t)v852);
          swift_release();
          v1020 = v625;
          v1021 = v655;
          v1022 = v652;
          v1023 = v651;
          v1024 = v247;
          v1025 = v656;
          v1026 = v251;
          v1027 = v123;
          if (v631 < v852[6] >> 10 || v852[10] >> 10 < v247 >> 10)
          {
            __break(1u);
LABEL_320:
            __break(1u);
            goto LABEL_321;
          }
          v276 = v677[1];
          v1068 = *v677;
          v1069 = v276;
          v1070 = v677[2];
          BigString.unicodeScalars.getter();
          swift_retain();
          BigString.UnicodeScalarView.subscript.getter();
          outlined release of Locale((uint64_t)&v853);
          outlined release of Locale((uint64_t)&v854);
          swift_release();
          v65 = *(_QWORD *)&v855[24];
          v277 = *(_QWORD *)&v855[32];
          v793 = *(_OWORD *)v855;
          v794 = *(_OWORD *)&v855[16];
          v795 = *(_OWORD *)&v855[32];
          v796 = *(_OWORD *)&v855[48];
          *(_QWORD *)&v797 = v272;
          v278 = *(_QWORD *)v855;
          *((_QWORD *)&v797 + 1) = *(_QWORD *)v855;
          v646 = *(_OWORD **)&v855[16];
          v647 = *(_QWORD *)&v855[8];
          v798 = *(_OWORD *)&v855[8];
          v799 = *(_OWORD *)&v855[24];
          v800 = *(_OWORD *)&v855[40];
          v801 = *(unint64_t *)&v855[56];
          v279 = v691;
          v280 = v691[2];
          v1065 = v691[1];
          v1066 = v280;
          v1067 = v691[3];
          v281 = BigString.startIndex.getter();
          v283 = v282;
          v123 = v284;
          v286 = v285;
          v287 = BigString.endIndex.getter();
          v1057 = v281;
          v1058 = v283;
          v1059 = v123;
          v1060 = v286;
          v1061 = v287;
          v1062 = v288;
          v1063 = v289;
          v1064 = v290;
          BigString.unicodeScalars.getter();
          swift_retain_n();
          BigString.UnicodeScalarView.subscript.getter();
          outlined release of Locale((uint64_t)&v856);
          outlined release of Locale((uint64_t)v857);
          v650 = v279;
          swift_release();
          v1046 = v683;
          v1047 = (uint64_t)v682;
          v1048 = v681;
          v1049 = v680;
          v1050 = v664;
          v1051 = v663;
          v1052 = v662;
          v1053 = v661;
          v617 = v683 >> 10;
          if (v683 >> 10 < v857[6] >> 10 || v857[10] >> 10 < v664 >> 10)
            goto LABEL_320;
          v291 = v650;
          v292 = v650 + 1;
          v293 = v650[2];
          v1054 = v650[1];
          v1055 = v293;
          v1056 = v650[3];
          BigString.unicodeScalars.getter();
          swift_retain();
          BigString.UnicodeScalarView.subscript.getter();
          outlined release of Locale((uint64_t)&v858);
          outlined release of Locale((uint64_t)&v859);
          swift_release();
          v115 = *(id *)&v860[8];
          v113 = *(_QWORD *)v860;
          v802 = *(_OWORD *)v860;
          v803 = *(_OWORD *)&v860[16];
          v804 = *(_OWORD *)&v860[32];
          v805 = *(_OWORD *)&v860[48];
          *(_QWORD *)&v806 = v291;
          *((_QWORD *)&v806 + 1) = *(_QWORD *)v860;
          v807 = *(_OWORD *)&v860[8];
          v808 = *(_OWORD *)&v860[24];
          v809 = *(_OWORD *)&v860[40];
          v810 = *(unint64_t *)&v860[56];
          v294 = v277 >> 10;
          v663 = *(_QWORD *)&v860[24];
          v114 = *(void **)&v860[16];
          v664 = *(_QWORD *)&v860[32] >> 10;
          v783 = v801;
          v782 = v800;
          v781 = v799;
          v780 = v798;
          v779 = v797;
          v778 = v796;
          v777 = v795;
          v775 = v793;
          v776 = v794;
          v790 = *(_OWORD *)&v860[24];
          v791 = *(_OWORD *)&v860[40];
          v792 = *(unint64_t *)&v860[56];
          v786 = *(_OWORD *)&v860[32];
          v787 = *(_OWORD *)&v860[48];
          v789 = *(_OWORD *)&v860[8];
          v788 = v806;
          v640 = v278 >> 10;
          v645 = *(_QWORD *)v860 >> 10;
          v785 = *(_OWORD *)&v860[16];
          v784 = *(_OWORD *)v860;
          swift_retain();
          swift_retain();
          v295 = v294;
          v656 = v294;
          while (1)
          {
            v296 = v278 >> 10;
            v662 = v278 >> 10;
            if (v278 >> 10 == v295)
            {
              v772 = v781;
              v773 = v782;
              v774 = v783;
              v768 = v777;
              v769 = v778;
              v771 = v780;
              v770 = v779;
              v297 = v113 >> 10;
              v767 = v776;
              v766 = v775;
              v298 = v664;
              if (v113 >> 10 == v664)
              {
                v763 = v790;
                v764 = v791;
                v765 = v792;
                v759 = v786;
                v760 = v787;
                v762 = v789;
                v761 = v788;
                v758 = v785;
                v757 = v784;
                outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v757);
                outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v766);
                v314 = (uint64_t)v679;
                swift_release();
                swift_release();
                v315 = v677[1];
                v1031 = *v677;
                v1032 = v315;
                v1033 = v677[2];
                BigString.startIndex.getter();
                BigString.endIndex.getter();
                BigString.unicodeScalars.getter();
                swift_retain();
                BigString.UnicodeScalarView.subscript.getter();
                outlined release of Locale((uint64_t)&v865);
                outlined release of Locale((uint64_t)&v866);
                v316 = *((_OWORD *)v623 + 1);
                v913[8] = *(_OWORD *)v623;
                v913[9] = v316;
                v317 = *((_OWORD *)v623 + 3);
                v913[10] = *((_OWORD *)v623 + 2);
                v913[11] = v317;
                AttributedString.Runs.init(_:in:)(v314, v755);
                v318 = v755[0];
                v319 = v755[1];
                v320 = v755[2];
                v321 = v755[3];
                v322 = *(_QWORD *)&v755[4];
                v323 = v621;
                v324 = v622;
                v325 = *((_OWORD *)v622 + 5);
                *((_OWORD *)v621 + 4) = *((_OWORD *)v622 + 4);
                v323[5] = v325;
                v326 = v324[7];
                v323[6] = v324[6];
                v323[7] = v326;
                v327 = v324[1];
                *v323 = *v324;
                v323[1] = v327;
                v328 = v324[3];
                v323[2] = v324[2];
                v323[3] = v328;
                v756[0] = v318;
                v756[1] = v319;
                v756[2] = v320;
                v756[3] = v321;
                *(_QWORD *)&v756[4] = v322;
                *((_QWORD *)&v756[12] + 1) = *((_QWORD *)&v318 + 1);
                v756[13] = v319;
                v756[14] = v320;
                v756[15] = v321;
                *(_QWORD *)&v756[16] = v322;
                specialized IndexingIterator.next()((uint64_t)v755);
                v115 = *(id *)&v755[0];
                if (*(_QWORD *)&v755[0])
                {
                  v113 = *((_QWORD *)&v755[0] + 1);
                  v329 = *(_QWORD **)&v755[1];
                  v662 = *(_QWORD *)&v755[2];
                  v663 = *((_QWORD *)&v755[1] + 1);
                  v661 = *((_QWORD *)&v755[2] + 1);
                  v656 = *((_QWORD *)&v755[3] + 1);
                  v330 = *(_QWORD *)&v755[3];
                  v650 = *(_OWORD **)&v755[4];
                  v331 = v680;
                  v332 = (unint64_t)v681;
                  v333 = (uint64_t)v682;
                  v334 = v683;
                  v647 = *((_QWORD *)&v755[4] + 1);
                  v335 = *(_QWORD *)&v755[5];
                  v336 = v635;
                  while (2)
                  {
                    v635 = v336;
                    LODWORD(v628) = v620 | v336;
                    v645 = v332;
                    v646 = v331;
                    v643 = (void *)v333;
                    v664 = v334;
                    while (2)
                    {
                      v634 = v335;
                      v639 = v329;
                      v640 = v330;
                      v337 = v677[1];
                      v948 = *v677;
                      v949 = v337;
                      v950 = v677[2];
                      v338 = BigString.startIndex.getter();
                      v340 = v339;
                      v342 = v341;
                      v114 = v343;
                      v344 = BigString.endIndex.getter();
                      v940 = v338;
                      v941 = v340;
                      v942 = v342;
                      v943 = v114;
                      v345 = v640;
                      v944 = v344;
                      v945 = v346;
                      v946 = v347;
                      v947 = v348;
                      BigString.unicodeScalars.getter();
                      swift_retain_n();
                      BigString.UnicodeScalarView.subscript.getter();
                      outlined release of Locale((uint64_t)&v868);
                      outlined release of Locale((uint64_t)&v869);
                      v349 = (unint64_t)v639;
                      swift_release();
                      if (v871 >> 10 < v345 >> 10
                        || v345 >> 10 < v870 >> 10
                        || v349 >> 10 < v870 >> 10
                        || v871 >> 10 < v349 >> 10)
                      {
                        __break(1u);
LABEL_290:
                        __break(1u);
LABEL_291:
                        __break(1u);
LABEL_292:
                        __break(1u);
LABEL_293:
                        __break(1u);
                        goto LABEL_294;
                      }
                      v633 = v113;
                      v113 = (unint64_t)v115;
                      v350 = v677[1];
                      v937 = *v677;
                      v938 = v350;
                      v939 = v677[2];
                      BigString.unicodeScalars.getter();
                      BigString.UnicodeScalarView.distance(from:to:)();
                      outlined release of Locale((uint64_t)&v872);
                      swift_release();
                      v351 = v691;
                      v352 = v691[2];
                      v934 = v691[1];
                      v935 = v352;
                      v936 = v691[3];
                      v353 = BigString.startIndex.getter();
                      v355 = v354;
                      v357 = v356;
                      v65 = v358;
                      v359 = BigString.endIndex.getter();
                      v926 = v353;
                      v927 = v355;
                      v928 = v357;
                      v929 = v65;
                      v930 = v359;
                      v931 = v360;
                      v932 = v361;
                      v933 = v362;
                      BigString.unicodeScalars.getter();
                      swift_retain_n();
                      BigString.UnicodeScalarView.subscript.getter();
                      outlined release of Locale((uint64_t)&v873);
                      outlined release of Locale((uint64_t)&v874);
                      swift_release();
                      v114 = (void *)(v664 >> 10);
                      v363 = v875 >> 10;
                      if (v664 >> 10 < v875 >> 10)
                        goto LABEL_290;
                      v115 = (id)(v876 >> 10);
                      if (v876 >> 10 < (unint64_t)v114)
                        goto LABEL_290;
                      v364 = v351[2];
                      v925[3] = v351[1];
                      v925[4] = v364;
                      v925[5] = v351[3];
                      BigString.unicodeScalars.getter();
                      v334 = BigString.UnicodeScalarView.index(_:offsetBy:)();
                      v366 = v365;
                      v65 = v367;
                      v638 = v368;
                      outlined release of Locale((uint64_t)&v877);
                      swift_release_n();
                      v369 = v334 >> 10;
                      if (v334 >> 10 < v363 || (unint64_t)v115 < v369)
                        goto LABEL_291;
                      if (v369 < (unint64_t)v114)
                        goto LABEL_292;
                      v636 = (void *)v65;
                      v637 = v366;
                      v115 = (id)v113;
                      *(_QWORD *)&v723 = v113;
                      v113 = v633;
                      *((_QWORD *)&v723 + 1) = v633;
                      LOBYTE(v704) = 1;
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                      {
                        v370 = v351[2];
                        v925[0] = v351[1];
                        v925[1] = v370;
                        v925[2] = v351[3];
                        v371 = *((_QWORD *)v351 + 8);
                        v372 = *((_QWORD *)v351 + 9);
                        v373 = *((_QWORD *)v351 + 10);
                        v374 = *((_QWORD *)v351 + 11);
                        type metadata accessor for AttributedString.Guts();
                        swift_allocObject();
                        outlined retain of Locale((uint64_t)v925);
                        swift_unknownObjectRetain();
                        v375 = AttributedString.Guts.init(string:runs:)(v925, v371, v372, v373, v374);
                        v691 = (_OWORD *)v375;
                        swift_release();
                        v351 = (_OWORD *)v375;
                      }
                      v65 = v689;
                      v376 = v638;
                      v377 = v351[2];
                      v922 = v351[1];
                      v923 = v377;
                      v924 = v351[3];
                      BigString.startIndex.getter();
                      BigString.endIndex.getter();
                      v914 = v664;
                      v915 = v643;
                      v916 = v645;
                      v917 = v646;
                      v918 = v334;
                      v919 = v637;
                      v920 = v636;
                      v921 = v376;
                      BigString.unicodeScalars.getter();
                      swift_retain_n();
                      BigString.UnicodeScalarView.subscript.getter();
                      swift_release();
                      outlined release of Locale((uint64_t)&v878);
                      outlined release of Locale((uint64_t)&v879);
                      v378 = v632;
                      v379 = v632[1];
                      v380 = v675;
                      *v675 = *v632;
                      v380[1] = v379;
                      v381 = v378[3];
                      v380[2] = v378[2];
                      v380[3] = v381;
                      *(_QWORD *)&v755[0] = v351;
                      if (one-time initialization token for currentIdentity != -1)
                        swift_once();
                      v382 = (uint64_t *)(static AttributedString.currentIdentity + 16);
                      v383 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
                      swift_retain();
                      os_unfair_lock_lock(v383);
                      v384 = v660;
                      closure #1 in static AttributedString._nextModifyIdentity.getter(v382, (uint64_t *)&v737);
                      v660 = v384;
                      os_unfair_lock_unlock(v383);
                      swift_release();
                      v114 = v737;
                      *((_QWORD *)&v755[4] + 1) = v737;
                      BigString.init()();
                      v737 = 0;
                      MEMORY[0x186DA9E90](&v737, 8);
                      v385 = (uint64_t)v737;
                      type metadata accessor for AttributedString.Guts();
                      v386 = swift_allocObject();
                      if ((BigString.isEmpty.getter() & 1) == 0)
                        goto LABEL_293;
                      v387 = v880[5];
                      *(_OWORD *)(v386 + 16) = v880[4];
                      *(_OWORD *)(v386 + 32) = v387;
                      *(_OWORD *)(v386 + 48) = v880[6];
                      *(_QWORD *)(v386 + 64) = 0;
                      *(_QWORD *)(v386 + 72) = 0;
                      *(_QWORD *)(v386 + 80) = 0;
                      *(_QWORD *)(v386 + 88) = v385;
                      swift_release();
                      AttributedSubstring.mergeAttributes(_:mergePolicy:)((uint64_t *)&v723, (char *)&v704);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      if (*((void **)&v755[4] + 1) != v114)
                        goto LABEL_330;
                      v691 = *(_OWORD **)&v755[0];
                      swift_release();
                      if ((v628 & 1) != 0)
                      {
                        v607 = v634;
                        v606 = v647;
                        v605 = v650;
                        outlined consume of AttributedString.Runs.Run?((uint64_t)v115);
LABEL_180:
                        specialized IndexingIterator.next()((uint64_t)v755);
                        v113 = *((_QWORD *)&v755[0] + 1);
                        v115 = *(id *)&v755[0];
                        v329 = *(_QWORD **)&v755[1];
                        v662 = *(_QWORD *)&v755[2];
                        v663 = *((_QWORD *)&v755[1] + 1);
                        v661 = *((_QWORD *)&v755[2] + 1);
                        v656 = *((_QWORD *)&v755[3] + 1);
                        v330 = *(_QWORD *)&v755[3];
                        v650 = *(_OWORD **)&v755[4];
                        v646 = v638;
                        v647 = *((_QWORD *)&v755[4] + 1);
                        v645 = (unint64_t)v636;
                        v643 = (void *)v637;
                        v664 = v334;
                        v335 = *(_QWORD *)&v755[5];
                        if (!*(_QWORD *)&v755[0])
                          goto LABEL_204;
                        continue;
                      }
                      break;
                    }
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    specialized AttributedString._AttributeStorage.subscript.getter((uint64_t)v115, (uint64_t)v755);
                    v607 = v634;
                    v606 = v647;
                    v605 = v650;
                    outlined consume of AttributedString.Runs.Run?((uint64_t)v115);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    v388 = *((_QWORD *)&v755[0] + 1);
                    outlined consume of AttributedString.AttributeRunBoundaries?(*(uint64_t *)&v755[0], *((uint64_t *)&v755[0] + 1));
                    if (v388 == 1)
                      goto LABEL_180;
                    specialized IndexingIterator.next()((uint64_t)v755);
                    v113 = *((_QWORD *)&v755[0] + 1);
                    v115 = *(id *)&v755[0];
                    v329 = *(_QWORD **)&v755[1];
                    v662 = *(_QWORD *)&v755[2];
                    v663 = *((_QWORD *)&v755[1] + 1);
                    v661 = *((_QWORD *)&v755[2] + 1);
                    v656 = *((_QWORD *)&v755[3] + 1);
                    v330 = *(_QWORD *)&v755[3];
                    v647 = *((_QWORD *)&v755[4] + 1);
                    v650 = *(_OWORD **)&v755[4];
                    v336 = 1;
                    v335 = *(_QWORD *)&v755[5];
                    v332 = (unint64_t)v636;
                    v333 = v637;
                    v331 = v638;
                    if (*(_QWORD *)&v755[0])
                      continue;
                    break;
                  }
                  memcpy(v755, v756, 0x108uLL);
                  outlined release of AttributedString.Runs((uint64_t)v755);
                  v635 = 1;
LABEL_205:
                  v389 = v677[1];
                  v1028 = *v677;
                  v1029 = v389;
                  v1030 = v677[2];
                  BigString.startIndex.getter();
                  BigString.endIndex.getter();
                  BigString.unicodeScalars.getter();
                  v390 = (uint64_t)v679;
                  swift_retain();
                  BigString.UnicodeScalarView.subscript.getter();
                  outlined release of Locale((uint64_t)&v881);
                  outlined release of Locale((uint64_t)&v882);
                  v391 = *((_OWORD *)v619 + 1);
                  v913[4] = *(_OWORD *)v619;
                  v913[5] = v391;
                  v392 = *((_OWORD *)v619 + 3);
                  v913[6] = *((_OWORD *)v619 + 2);
                  v913[7] = v392;
                  AttributedString.Runs.init(_:in:)(v390, &v737);
                  v393 = v618[5];
                  v751 = v618[4];
                  v752 = v393;
                  v394 = v618[7];
                  v753 = v618[6];
                  v754 = v394;
                  v395 = v618[1];
                  v747 = *v618;
                  v748 = v395;
                  v396 = v618[3];
                  v749 = v618[2];
                  v750 = v396;
                  v397 = v740;
                  v398 = v741;
                  v399 = (char *)v742;
                  v656 = v744;
                  v400 = (_OWORD *)(v739 >> 10);
                  v639 = (_QWORD *)v743;
                  v640 = (unint64_t)v737;
                  v637 = v746;
                  v638 = v745;
                  v636 = (void *)(v743 >> 10);
                  v643 = (void *)v739;
                  if (v739 >> 10 != v743 >> 10)
                  {
                    v406 = v740;
                    v407 = v741;
                    v408 = v742;
                    v409 = v739;
                    v633 = v741;
                    v634 = v740;
                    v628 = v742;
                    while (1)
                    {
                      v663 = v406;
                      v664 = v409;
                      v661 = v408;
                      v662 = v407;
                      v650 = v400;
                      v421 = v751;
                      v422 = v752;
                      v423 = v752;
                      v424 = v629;
                      *((_OWORD *)v629 + 4) = v751;
                      *((_OWORD *)v424 + 5) = v422;
                      v425 = v753;
                      v426 = v754;
                      v427 = v754;
                      *((_OWORD *)v424 + 6) = v753;
                      *((_OWORD *)v424 + 7) = v426;
                      v428 = v747;
                      v429 = v748;
                      v430 = v748;
                      *(_OWORD *)v424 = v747;
                      *((_OWORD *)v424 + 1) = v429;
                      v431 = v749;
                      v432 = v750;
                      v433 = v750;
                      *((_OWORD *)v424 + 2) = v749;
                      *((_OWORD *)v424 + 3) = v432;
                      v434 = v630;
                      v630[4] = v421;
                      v434[5] = v423;
                      v434[6] = v425;
                      v434[7] = v427;
                      *v434 = v428;
                      v434[1] = v430;
                      v434[2] = v431;
                      v434[3] = v433;
                      v436 = v639;
                      v435 = v640;
                      v704 = v640;
                      v437 = v643;
                      v710 = v643;
                      v711 = v397;
                      v712 = v398;
                      v713 = v399;
                      v714 = v639;
                      v715 = v656;
                      v716 = v638;
                      v438 = v638;
                      v717 = v637;
                      v439 = v637;
                      v703[0] = v409;
                      v703[1] = v406;
                      v703[2] = v407;
                      v703[3] = v408;
                      v440 = v397;
                      AttributedString.Runs.subscript.getter(v703, &v718);
                      v647 = v719;
                      v645 = v718;
                      v646 = v722;
                      v441 = v752;
                      v442 = v666;
                      v666[4] = v751;
                      v442[5] = v441;
                      v443 = v754;
                      v442[6] = v753;
                      v442[7] = v443;
                      v444 = v748;
                      *v442 = v747;
                      v442[1] = v444;
                      v445 = v750;
                      v442[2] = v749;
                      v442[3] = v445;
                      *(_QWORD *)&v723 = v435;
                      v728 = v437;
                      *(_QWORD *)&v729 = v440;
                      *((_QWORD *)&v729 + 1) = v398;
                      v730 = v399;
                      v731 = v436;
                      v732 = v656;
                      v446 = v438;
                      v733 = v438;
                      v734 = v439;
                      v735 = &outlined read-only object #0 of String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:);
                      v447 = MEMORY[0x1E0DEE9D8];
                      v736 = MEMORY[0x1E0DEE9D8];
                      v692 = v435;
                      v695 = v437;
                      v696 = v440;
                      v697 = v398;
                      v698 = v399;
                      v699 = v436;
                      v700 = v656;
                      v701 = v446;
                      v702 = v439;
                      v718 = v664;
                      v719 = v663;
                      v720 = v662;
                      v721 = v661;
                      swift_retain();
                      outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)&v723);
                      v448 = &v692;
                      AttributedString.Runs._slicedRunBoundary(after:attributeNames:constraints:)(&v718, (uint64_t)&outlined read-only object #0 of String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:), v447, (uint64_t *)&v704);
                      swift_release();
                      outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v723);
                      v417 = v704;
                      v416 = v704 >> 10;
                      if (v704 >> 10 < (unint64_t)v650)
                        break;
                      v407 = *((_QWORD *)&v705 + 1);
                      v418 = v705;
                      v449 = v706;
                      v450 = v645;
                      if (*(_QWORD *)(v645 + 16)
                        && (v451 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000012, v627),
                            (v452 & 1) != 0))
                      {
                        outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v450 + 56) + 72 * v451, (uint64_t)&v704);
                        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v704, (uint64_t)&v692);
                        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                        swift_dynamicCast();
                        outlined destroy of AttributedString._AttributeValue((uint64_t)&v704);
                        v453 = 0;
                        LOBYTE(v719) = 0;
                        v454 = v718;
                      }
                      else
                      {
                        v454 = 0;
                        v718 = 0;
                        v453 = 1;
                        LOBYTE(v719) = 1;
                      }
                      swift_release();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      if ((v453 & 1) == 0)
                      {
                        v616 = v454;
                        v647 = v449;
                        v650 = (_OWORD *)v407;
                        v455 = v677[1];
                        v1017 = *v677;
                        v1018 = v455;
                        v1019 = v677[2];
                        v456 = BigString.startIndex.getter();
                        v458 = v457;
                        v460 = v459;
                        v462 = v461;
                        v463 = BigString.endIndex.getter();
                        v1009 = v456;
                        v1010 = v458;
                        v1011 = v460;
                        v1012 = v462;
                        v1013 = v463;
                        v1014 = v464;
                        v1015 = v465;
                        v1016 = v466;
                        BigString.unicodeScalars.getter();
                        swift_retain_n();
                        BigString.UnicodeScalarView.subscript.getter();
                        outlined release of Locale((uint64_t)&v884);
                        outlined release of Locale((uint64_t)&v885);
                        swift_release();
                        v467 = v664 >> 10;
                        if (v887 >> 10 < v664 >> 10 || v467 < v886 >> 10 || v631 < v886 >> 10 || v887 >> 10 < v631)
                        {
                          __break(1u);
LABEL_323:
                          __break(1u);
LABEL_324:
                          __break(1u);
LABEL_325:
                          __break(1u);
LABEL_326:
                          __break(1u);
LABEL_327:
                          __break(1u);
LABEL_328:
                          __break(1u);
                        }
                        v468 = v677;
                        v469 = v677[1];
                        v1006 = *v677;
                        v1007 = v469;
                        v1008 = v677[2];
                        BigString.unicodeScalars.getter();
                        v646 = (_OWORD *)BigString.UnicodeScalarView.distance(from:to:)();
                        outlined release of Locale((uint64_t)&v888);
                        swift_release();
                        v470 = v468[1];
                        v1003 = *v468;
                        v1004 = v470;
                        v1005 = v468[2];
                        v471 = BigString.startIndex.getter();
                        v473 = v472;
                        v475 = v474;
                        v477 = v476;
                        v478 = BigString.endIndex.getter();
                        v995 = v471;
                        v996 = v473;
                        v997 = v475;
                        v998 = v477;
                        v999 = v478;
                        v1000 = v479;
                        v1001 = v480;
                        v1002 = v481;
                        BigString.unicodeScalars.getter();
                        swift_retain_n();
                        BigString.UnicodeScalarView.subscript.getter();
                        outlined release of Locale((uint64_t)&v889);
                        outlined release of Locale((uint64_t)&v890);
                        swift_release();
                        if (v892 >> 10 < v416 || v416 < v891 >> 10 || v467 < v891 >> 10 || v892 >> 10 < v467)
                          goto LABEL_323;
                        v615 = v417 >> 10;
                        v482 = v677[1];
                        v992 = *v677;
                        v993 = v482;
                        v994 = v677[2];
                        BigString.unicodeScalars.getter();
                        v613 = v418;
                        v614 = v417;
                        v483 = BigString.UnicodeScalarView.distance(from:to:)();
                        outlined release of Locale((uint64_t)&v893);
                        swift_release();
                        v484 = v691;
                        v485 = v691[2];
                        v989 = v691[1];
                        v990 = v485;
                        v991 = v691[3];
                        v486 = BigString.startIndex.getter();
                        v488 = v487;
                        v490 = v489;
                        v492 = v491;
                        v493 = BigString.endIndex.getter();
                        v981 = v486;
                        v982 = v488;
                        v983 = v490;
                        v984 = v492;
                        v985 = v493;
                        v986 = v494;
                        v987 = v495;
                        v988 = v496;
                        BigString.unicodeScalars.getter();
                        swift_retain_n();
                        BigString.UnicodeScalarView.subscript.getter();
                        outlined release of Locale((uint64_t)&v894);
                        outlined release of Locale((uint64_t)&v895);
                        swift_release();
                        v497 = v896 >> 10;
                        if (v617 < v896 >> 10)
                          goto LABEL_324;
                        v498 = v897 >> 10;
                        if (v897 >> 10 < v617)
                          goto LABEL_324;
                        v645 = v483;
                        v499 = v484 + 1;
                        v500 = v484[2];
                        v978 = v484[1];
                        v979 = v500;
                        v980 = v484[3];
                        BigString.unicodeScalars.getter();
                        v501 = BigString.UnicodeScalarView.index(_:offsetBy:)();
                        v662 = v502;
                        v663 = v503;
                        v664 = v504;
                        outlined release of Locale((uint64_t)&v898);
                        swift_release_n();
                        v661 = v501;
                        v505 = v501 >> 10;
                        if (v501 >> 10 < v497 || v498 < v505)
                          goto LABEL_325;
                        v506 = v484[2];
                        v975 = *v499;
                        v976 = v506;
                        v977 = v484[3];
                        v507 = BigString.startIndex.getter();
                        v509 = v508;
                        v511 = v510;
                        v513 = v512;
                        v514 = BigString.endIndex.getter();
                        v967 = v507;
                        v968 = v509;
                        v969 = v511;
                        v970 = v513;
                        v971 = v514;
                        v972 = v515;
                        v973 = v516;
                        v974 = v517;
                        BigString.unicodeScalars.getter();
                        swift_retain_n();
                        BigString.UnicodeScalarView.subscript.getter();
                        outlined release of Locale((uint64_t)&v899);
                        outlined release of Locale((uint64_t)&v900);
                        swift_release();
                        v518 = v901 >> 10;
                        if (v505 < v901 >> 10)
                          goto LABEL_326;
                        v519 = v902 >> 10;
                        if (v902 >> 10 < v505)
                          goto LABEL_326;
                        v520 = v484[2];
                        v966[3] = *v499;
                        v966[4] = v520;
                        v646 = v484 + 1;
                        v966[5] = v484[3];
                        BigString.unicodeScalars.getter();
                        v521 = BigString.UnicodeScalarView.index(_:offsetBy:)();
                        v523 = v522;
                        v525 = v524;
                        v527 = v526;
                        outlined release of Locale((uint64_t)&v903);
                        v612 = v484;
                        swift_release_n();
                        v528 = v521 >> 10;
                        if (v521 >> 10 < v518 || v519 < v528)
                          goto LABEL_327;
                        v645 = v527;
                        if (v528 < v505)
                          goto LABEL_328;
                        v529 = v521;
                        v530 = v523;
                        v531 = v646;
                        v532 = v646[1];
                        v966[0] = *v646;
                        v966[1] = v532;
                        v966[2] = v646[2];
                        BigString.startIndex.getter();
                        BigString.endIndex.getter();
                        BigString.utf16.getter();
                        outlined retain of Locale((uint64_t)v966);
                        v534 = v661;
                        v533 = v662;
                        v536 = v663;
                        v535 = v664;
                        v611 = BigString.UTF16View.distance(from:to:)();
                        outlined release of Locale((uint64_t)&v904);
                        BigString.utf16.getter();
                        v610 = BigString.UTF16View.distance(from:to:)();
                        outlined release of Locale((uint64_t)v966);
                        outlined release of Locale((uint64_t)&v905);
                        v537 = v531[1];
                        v963 = *v531;
                        v964 = v537;
                        v965 = v531[2];
                        BigString.startIndex.getter();
                        BigString.endIndex.getter();
                        v952 = v534;
                        v953 = v533;
                        v954 = v535;
                        v955 = v536;
                        v956 = v529;
                        v957 = v530;
                        v958 = v525;
                        v959 = v645;
                        BigString.unicodeScalars.getter();
                        v538 = (unint64_t)v612;
                        swift_retain();
                        BigString.UnicodeScalarView.subscript.getter();
                        outlined release of Locale((uint64_t)&v906);
                        outlined release of Locale((uint64_t)&v907);
                        v539 = *((_OWORD *)v626 + 1);
                        v913[0] = *(_OWORD *)v626;
                        v913[1] = v539;
                        v540 = *((_OWORD *)v626 + 3);
                        v913[2] = *((_OWORD *)v626 + 2);
                        v913[3] = v540;
                        swift_retain();
                        specialized AttributedString.Guts.getUniformValue<A>(in:key:)(v913, (uint64_t)&v704);
                        if ((_QWORD)v706)
                        {
                          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v704, (uint64_t)&v692);
                          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                          swift_dynamicCast();
                          outlined destroy of AttributedString._AttributeValue((uint64_t)&v704);
                        }
                        else
                        {
                          outlined destroy of Any?((uint64_t)&v704, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                          v719 = 0;
                          v718 = 0;
                          LODWORD(v720) = 0;
                          BYTE4(v720) = -1;
                        }
                        v407 = (unint64_t)v650;
                        v449 = v647;
                        swift_release();
                        v541 = BYTE4(v720);
                        v542 = v720;
                        swift_release();
                        v543 = v646;
                        if (v541 <= 0xFEuLL)
                          __asm { BR              X9 }
                        v544 = v646[1];
                        v960 = *v646;
                        v961 = v544;
                        v962 = v646[2];
                        BigString.startIndex.getter();
                        BigString.endIndex.getter();
                        BigString.unicodeScalars.getter();
                        swift_retain();
                        BigString.UnicodeScalarView.subscript.getter();
                        outlined release of Locale((uint64_t)&v909);
                        outlined release of Locale((uint64_t)&v910);
                        v545 = *((_OWORD *)v624 + 1);
                        v912[7] = *(_OWORD *)v624;
                        v912[8] = v545;
                        v546 = *((_OWORD *)v624 + 3);
                        v912[9] = *((_OWORD *)v624 + 2);
                        v912[10] = v546;
                        v547 = *v543;
                        v548 = v543[1];
                        v951[2] = v543[2];
                        v951[1] = v548;
                        v951[0] = v547;
                        swift_retain();
                        outlined retain of Locale((uint64_t)v951);
                        BigString.subscript.getter();
                        outlined release of Locale((uint64_t)v951);
                        outlined release of Locale((uint64_t)v912);
                        swift_release();
                        v705 = v912[3];
                        v706 = v912[4];
                        v707 = v912[5];
                        v708 = v912[6];
                        v704 = v538;
                        v709 = 0;
                        lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
                        String.init<A>(_:)();
                        v549 = String._bridgeToObjectiveCImpl()();
                        swift_bridgeObjectRelease();
                        *(_QWORD *)&v706 = type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
                        v704 = v549;
                        v550 = v616;
                        outlined init with copy of (Hashable & Sendable)?((uint64_t)&v704, (uint64_t)&v692, &demangling cache variable for type metadata for Any?);
                        v551 = v694;
                        if (v694)
                        {
                          v410 = __swift_project_boxed_opaque_existential_1(&v692, v694);
                          v411 = *(_QWORD *)(v551 - 8);
                          v412 = MEMORY[0x1E0C80A78](v410);
                          v414 = (char *)&v609 - ((v413 + 15) & 0xFFFFFFFFFFFFFFF0);
                          (*(void (**)(char *, __n128))(v411 + 16))(v414, v412);
                          v415 = _bridgeAnythingToObjectiveC<A>(_:)();
                          (*(void (**)(char *, uint64_t))(v411 + 8))(v414, v551);
                          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v692);
                        }
                        else
                        {
                          v415 = 0;
                        }
                        v417 = v614;
                        v416 = v615;
                        v418 = v613;
                        v419 = objc_allocWithZone((Class)_NSAttributedStringReplacement);
                        objc_msgSend(v419, sel_initWithIndex_specifierRangeInFormatString_replacementRangeInResult_replacementKind_argument_, v550, 0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFFFFFFLL, v611, v610, 0, v415);
                        v420 = swift_unknownObjectRelease();
                        MEMORY[0x186DA4AFC](v420);
                        if (*(_QWORD *)((v690 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v690 & 0xFFFFFFFFFFFFFF8)
                                                                                           + 0x18) >> 1)
                          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                        specialized Array._endMutation()();
                        outlined destroy of Any?((uint64_t)&v704, &demangling cache variable for type metadata for Any?);
                      }
                      v406 = v418;
                      v408 = v449;
                      v409 = v417;
                      v400 = (_OWORD *)v416;
                      v398 = v633;
                      v397 = v634;
                      v399 = (char *)v628;
                      if ((void *)v416 == v636)
                        goto LABEL_206;
                    }
                    __break(1u);
                    goto LABEL_315;
                  }
LABEL_206:
                  v401 = v752;
                  v402 = v666;
                  v666[4] = v751;
                  v402[5] = v401;
                  v403 = v754;
                  v402[6] = v753;
                  v402[7] = v403;
                  v404 = v748;
                  *v402 = v747;
                  v402[1] = v404;
                  v405 = v750;
                  v402[2] = v749;
                  v402[3] = v405;
                  *(_QWORD *)&v723 = v640;
                  v728 = v643;
                  *(_QWORD *)&v729 = v397;
                  *((_QWORD *)&v729 + 1) = v398;
                  v730 = v399;
                  v731 = v639;
                  v732 = v656;
                  v733 = v638;
                  v734 = v637;
                  v735 = &outlined read-only object #0 of String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:);
                  v736 = MEMORY[0x1E0DEE9D8];
                  outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v723);
LABEL_202:
                  v65 = v689;
                }
                else
                {
                  v65 = v689;
LABEL_204:
                  memcpy(v755, v756, 0x108uLL);
                  outlined release of AttributedString.Runs((uint64_t)v755);
                  if ((_DWORD)v653)
                    goto LABEL_205;
                }
                goto LABEL_132;
              }
              LODWORD(v661) = 0;
            }
            else
            {
              if (v296 < v640 || v296 >= v295)
                goto LABEL_286;
              v643 = v114;
              v114 = v115;
              v299 = v677;
              v300 = v677[1];
              v1043 = *v677;
              v1044 = v300;
              v1045 = v677[2];
              BigString.unicodeScalars.getter();
              v115 = (id)v65;
              LODWORD(v661) = BigString.UnicodeScalarView.subscript.getter();
              outlined release of Locale((uint64_t)&v861);
              v301 = *v299;
              v302 = v299[1];
              v1042 = v299[2];
              v1041 = v302;
              v1040 = v301;
              BigString.unicodeScalars.getter();
              outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v793);
              v303 = BigString.UnicodeScalarView.index(after:)();
              v646 = v305;
              v647 = v304;
              v65 = v306;
              outlined release of Locale((uint64_t)&v862);
              swift_release();
              if (v656 < v303 >> 10)
                goto LABEL_287;
              v772 = v799;
              v773 = v800;
              v774 = v801;
              v768 = v795;
              v769 = v796;
              v771 = v798;
              v770 = v797;
              v297 = v113 >> 10;
              v767 = v794;
              v766 = v793;
              v298 = v664;
              if (v113 >> 10 == v664)
              {
                v763 = v790;
                v764 = v791;
                v765 = v792;
                v759 = v786;
                v760 = v787;
                v762 = v789;
                v761 = v788;
                v758 = v785;
                v757 = v784;
LABEL_201:
                outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v757);
                outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v766);
                swift_release();
                swift_release();
                goto LABEL_202;
              }
              v278 = v303;
              v115 = v114;
              v114 = v643;
            }
            if (v297 < v645 || v297 >= v298)
              goto LABEL_284;
            v307 = v292[1];
            v1037 = *v292;
            v1038 = v307;
            v1039 = v292[2];
            BigString.unicodeScalars.getter();
            v308 = BigString.UnicodeScalarView.subscript.getter();
            outlined release of Locale((uint64_t)&v863);
            v309 = v292[1];
            v1034 = *v292;
            v1035 = v309;
            v1036 = v292[2];
            BigString.unicodeScalars.getter();
            outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)&v802);
            v113 = BigString.UnicodeScalarView.index(after:)();
            v115 = v310;
            v114 = v311;
            v313 = v312;
            outlined release of Locale((uint64_t)&v864);
            swift_release();
            if (v664 < v113 >> 10)
              goto LABEL_285;
            v763 = v808;
            v764 = v809;
            v765 = v810;
            v759 = v804;
            v760 = v805;
            v762 = v807;
            v761 = v806;
            v758 = v803;
            v757 = v802;
            v295 = v656;
            if (v662 == v656 || (_DWORD)v661 != v308)
              goto LABEL_201;
            v663 = v313;
            v781 = v772;
            v782 = v773;
            v783 = v774;
            v777 = v768;
            v778 = v769;
            v780 = v771;
            v779 = v770;
            v776 = v767;
            v775 = v766;
            v790 = v808;
            v791 = v809;
            v792 = v810;
            v786 = v804;
            v787 = v805;
            v789 = v807;
            v788 = v806;
            v785 = v803;
            v784 = v802;
          }
        }
      }
LABEL_131:
      swift_release();
      continue;
    }
    break;
  }
  __break(1u);
LABEL_284:
  __break(1u);
LABEL_285:
  __break(1u);
LABEL_286:
  __break(1u);
LABEL_287:
  __break(1u);
LABEL_288:
  swift_once();
LABEL_81:
  LODWORD(v680) = v683 != 0;
  LODWORD(v674) = static AttributedString.MarkdownParsingOptions.localizedAttributedString;
  LODWORD(v675) = byte_1EDC47D01;
  LODWORD(v677) = byte_1EDC47D02;
  v126 = qword_1EDC47D08;
  v125 = unk_1EDC47D10;
  if (!v114)
  {
    swift_bridgeObjectRetain();
    v141 = v659;
    if (v125)
      goto LABEL_104;
LABEL_90:
    if ((v686 & 1) == 0)
      goto LABEL_104;
    v142 = objc_msgSend(v141, sel_preferredLocalizations);
    if (v142)
    {
      v143 = v142;
      type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      if (swift_dynamicCastClass())
      {
        swift_retain();

      }
      v65 = (unint64_t)v114;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      v144 = swift_dynamicCastClass();
      if (v144)
      {
        v145 = (_QWORD *)v144;

        if (!v145[2])
          goto LABEL_100;
LABEL_98:
        v126 = v145[4];
        v125 = v145[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_105;
      }
      swift_unknownObjectRelease();
      objc_msgSend(v143, sel_copy);
      v146 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      v145 = (_QWORD *)specialized _arrayForceCast<A, B>(_:)(v146);

      swift_bridgeObjectRelease();
      if (v145[2])
        goto LABEL_98;
    }
    else
    {
      v65 = (unint64_t)v114;
      v145 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      if (*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
        goto LABEL_98;
    }
LABEL_100:
    swift_bridgeObjectRelease();
    v125 = 0;
    goto LABEL_105;
  }
  v65 = (unint64_t)v114;
  *(_QWORD *)&v756[0] = v114;
  *((_QWORD *)&v756[0] + 1) = v115;
  *(_QWORD *)&v756[1] = v689;
  swift_bridgeObjectRetain();
  v127 = URL.pathComponents.getter();
  v128 = v127;
  v129 = *(_QWORD *)(v127 + 16);
  if (v129)
  {
    v130 = v127 + 16 * v129 + 24;
    while (v129 <= *(_QWORD *)(v128 + 16))
    {
      swift_bridgeObjectRetain();
      v131._countAndFlagsBits = 0x6A6F72706C2ELL;
      v131._object = (void *)0xE600000000000000;
      if (String.hasSuffix(_:)(v131) && String.count.getter() >= 7)
      {
        swift_bridgeObjectRelease();
        String.index(_:offsetBy:)();
        v132 = String.subscript.getter();
        v134 = v133;
        v136 = v135;
        v138 = v137;
        swift_bridgeObjectRelease();
        v126 = MEMORY[0x186DA4634](v132, v134, v136, v138);
        v140 = v139;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v125 = v140;
        v113 = (unint64_t)v658;
        goto LABEL_105;
      }
      --v129;
      swift_bridgeObjectRelease();
      v130 -= 16;
      if (!v129)
        goto LABEL_102;
    }
    __break(1u);
LABEL_102:
    swift_bridgeObjectRelease();
    v113 = (unint64_t)v658;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v141 = v659;
  if (!v125)
    goto LABEL_90;
LABEL_104:
  v65 = (unint64_t)v114;
LABEL_105:
  if (!v681)
  {
    memset(v756, 0, 32);
LABEL_115:
    outlined destroy of Any?((uint64_t)v756, &demangling cache variable for type metadata for Any?);
LABEL_116:
    LOBYTE(v756[0]) = (_BYTE)v674;
    BYTE1(v756[0]) = (_BYTE)v675;
    BYTE2(v756[0]) = (_BYTE)v677;
    *((_QWORD *)&v756[0] + 1) = v126;
    *(_QWORD *)&v756[1] = v125;
    BYTE8(v756[1]) = (_BYTE)v680;
    memset(v755, 0, 24);
    swift_bridgeObjectRetain();
    v151 = (void *)v660;
    v152 = static AttributedString.parseMarkdown<A>(_:including:options:baseURL:)(&v723, (uint64_t)v676, (unint64_t)v678, (uint64_t)v685, (char *)v756, (uint64_t)v755, (uint64_t)v685, (uint64_t)v684);
    if (v151)
    {

      swift_bridgeObjectRelease();
      v660 = 0;
      v153 = 0;
      v123 = 0;
      if ((v688 & 1) == 0)
      {
LABEL_122:
        if (!v123)
        {
LABEL_257:
          if (one-time initialization token for attributedStringsCacheLock != -1)
            swift_once();
          v562 = v683 != 0;
          v563 = (uint64_t *)(static String.LocalizationValue.attributedStringsCacheLock + 16);
          v564 = (os_unfair_lock_s *)(static String.LocalizationValue.attributedStringsCacheLock + 24);
          swift_retain();
          os_unfair_lock_lock(v564);
          closure #3 in String.LocalizationValue._parseLocalizedMarkdown<A>(_:bundlePreferredLocalization:tableURL:formatConfiguration:scope:appliesSourcePositionAttribute:ignoreCache:)(v563, (uint64_t)v676, (uint64_t)v678, (uint64_t)v682, v562);
          os_unfair_lock_unlock(v564);
          swift_release();
          goto LABEL_260;
        }
        v635 = v153;
        v154 = one-time initialization token for attributedStringsCacheLock;
        swift_retain_n();
        if (v154 != -1)
LABEL_321:
          swift_once();
        v155 = v683 != 0;
        v156 = static String.LocalizationValue.attributedStringsCacheLock + 16;
        v157 = (os_unfair_lock_s *)(static String.LocalizationValue.attributedStringsCacheLock + 24);
        swift_retain();
        os_unfair_lock_lock(v157);
        v607 = (uint64_t)v684;
        v158 = (uint64_t *)v156;
        v159 = v660;
        closure #2 in String.LocalizationValue._parseLocalizedMarkdown<A>(_:bundlePreferredLocalization:tableURL:formatConfiguration:scope:appliesSourcePositionAttribute:ignoreCache:)(v158, (uint64_t)v676, (uint64_t)v678, v123, v635 & 1, (uint64_t)v682, v155);
        v660 = v159;
        os_unfair_lock_unlock(v157);
        swift_release();
        swift_release_n();
        v113 = (unint64_t)v658;
        goto LABEL_125;
      }
LABEL_118:
      if (!v123)
        goto LABEL_260;
      v635 = v153;
LABEL_125:

      swift_bridgeObjectRelease();
      outlined consume of URL?((void *)v65);
      goto LABEL_126;
    }
    v660 = 0;
    v153 = v152;
    swift_bridgeObjectRelease();
LABEL_121:
    v123 = v723;
    if ((v688 & 1) == 0)
      goto LABEL_122;
    goto LABEL_118;
  }
  *(_QWORD *)&v755[0] = 0xD000000000000022;
  *((_QWORD *)&v755[0] + 1) = 0x800000018230C3A0;
  v147 = objc_msgSend(v654, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();
  if (v147)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v755, 0, 32);
  }
  outlined init with take of LocalePreferences?((uint64_t)v755, (uint64_t)v756, &demangling cache variable for type metadata for Any?);
  if (!*((_QWORD *)&v756[1] + 1))
    goto LABEL_115;
  if (!swift_dynamicCast())
    goto LABEL_116;
  v148 = v755[0];
  LOBYTE(v756[0]) = (_BYTE)v674;
  BYTE1(v756[0]) = (_BYTE)v675;
  BYTE2(v756[0]) = (_BYTE)v677;
  *((_QWORD *)&v756[0] + 1) = v126;
  *(_QWORD *)&v756[1] = v125;
  BYTE8(v756[1]) = (_BYTE)v680;
  memset(v755, 0, 24);
  swift_bridgeObjectRetain();
  v149 = (void *)v660;
  v150 = static AttributedString.parseMarkdown<A>(_:including:options:baseURL:)(v838, v148, *((unint64_t *)&v148 + 1), (uint64_t)v685, (char *)v756, (uint64_t)v755, (uint64_t)v685, (uint64_t)v684);
  if (!v149)
  {
    v153 = v150;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v723 = *(_QWORD *)&v838[0];
    v602 = (unint64_t)v678;
    swift_bridgeObjectRetain();
    v607 = 0;
    v608 = 0;
    specialized static AttributedString.parseMarkdown<A>(_:including:options:baseURL:)(v756, (uint64_t)v676, v602, 512, 0, 0, 0, 0);
    v660 = 0;
    swift_bridgeObjectRelease();
    specialized AttributedString.subscript.setter(*(uint64_t *)&v756[0]);
    goto LABEL_121;
  }
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  if ((v688 & 1) == 0)
  {
    v660 = 0;
    goto LABEL_257;
  }
LABEL_260:
  v565 = v654;

  swift_bridgeObjectRelease();
  outlined consume of URL?((void *)v65);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  *v649 = v679;

LABEL_261:
}

void AttributedString.init<A>(localized:defaultValue:options:table:bundle:locale:comment:including:)(uint64_t *a1@<X3>, char *a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, void *a5@<X7>, _QWORD *a6@<X8>, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _OWORD *a12, void *a13)
{
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v26[2];
  _QWORD v27[2];
  char v28;
  char v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v15 = a1[1];
  v16 = a1[2];
  v17 = *a2;
  v19 = *a7;
  v18 = a7[1];
  v35 = *a1;
  v36 = v15;
  v37 = v16;
  v20 = StaticString.description.getter();
  v22 = v21;
  v27[0] = 0;
  v27[1] = 0;
  v28 = 1;
  v29 = v17 & 1;
  v30 = 0;
  v31 = 256;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  if (!v19)
  {
    if (one-time initialization token for cache != -1)
      swift_once();
    v26[0] = static LocaleCache.cache;
    v19 = LocaleCache.current.getter();
    v18 = v23;
  }
  v26[0] = v19;
  v26[1] = v18;
  String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)(v20, v22, (uint64_t)v27, a3, a4, (uint64_t)a5, (uint64_t)v26, a11, 1u, a12, a13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  *a6 = v38;
}

void AttributedString.init(localized:options:table:bundle:localization:locale:comment:)(uint64_t *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v13;
  void *v14;
  void *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  char v23;
  char v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;
  char v29;

  v13 = *a1;
  v14 = (void *)a1[1];
  v15 = (void *)a1[2];
  v16 = *a2;
  v17 = *a8;
  v18 = a8[1];
  v22[0] = 0;
  v22[1] = 0;
  v23 = 1;
  v24 = v16 & 1;
  v25 = 0;
  v26 = 256;
  v27 = a6;
  v28 = a7;
  v29 = 0;
  if (v17)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    v19 = one-time initialization token for cache;
    swift_bridgeObjectRetain();
    if (v19 != -1)
      swift_once();
    v21 = static LocaleCache.cache;
    v17 = LocaleCache.current.getter();
    v18 = v20;
  }
  specialized String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)(0, 0, (uint64_t)v22, a3, a4, (uint64_t)a5, v17, v18, 1u, v13, v14, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  *a9 = v21;
}

uint64_t AttributedString.init<A>(localized:options:table:bundle:localization:locale:comment:including:)@<X0>(__int128 *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, __int128 *a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _OWORD *a14, void *a15)
{
  uint64_t v19;
  char v20;
  uint64_t result;
  uint64_t v22;
  __int128 v23;
  uint64_t v24[2];
  char v25;
  char v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;

  v19 = *((_QWORD *)a1 + 2);
  v20 = *a2;
  v32 = *a1;
  v33 = v19;
  v24[0] = 0;
  v24[1] = 0;
  v25 = 1;
  v26 = v20 & 1;
  v27 = 0;
  v28 = 256;
  v29 = a6;
  v30 = a7;
  v31 = 0;
  v23 = *a8;
  swift_bridgeObjectRetain();
  AttributedString.init<A>(localized:options:table:bundle:locale:comment:including:)((uint64_t *)&v32, v24, a3, a4, a5, (uint64_t *)&v23, &v34, v22, (uint64_t)a14, a14, a15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  result = swift_release();
  *a9 = v34;
  return result;
}

void AttributedString.init<A>(localized:options:table:bundle:localization:locale:comment:including:)(uint64_t *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _OWORD *a14, void *a15)
{
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v26[2];
  _QWORD v27[2];
  char v28;
  char v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v17 = a1[1];
  v18 = a1[2];
  v19 = *a2;
  v21 = *a8;
  v20 = a8[1];
  v35 = *a1;
  v36 = v17;
  v37 = v18;
  v27[0] = 0;
  v27[1] = 0;
  v28 = 1;
  v29 = v19 & 1;
  v30 = 0;
  v31 = 256;
  v32 = a6;
  v33 = a7;
  v34 = 0;
  if (v21)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    v22 = one-time initialization token for cache;
    swift_bridgeObjectRetain();
    if (v22 != -1)
      swift_once();
    v26[0] = static LocaleCache.cache;
    v21 = LocaleCache.current.getter();
    v20 = v23;
  }
  v26[0] = v21;
  v26[1] = v20;
  String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)(0, 0, (uint64_t)v27, a3, a4, (uint64_t)a5, (uint64_t)v26, a13, 1u, a14, a15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  *a9 = v38;
}

void AttributedString.init(localized:options:table:bundle:localization:locale:comment:)(uint64_t *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X7>, _QWORD *a9@<X8>)
{
  uint64_t v12;
  void *v13;
  void *v14;
  __int128 v15;
  uint64_t v16;
  _OWORD v17[2];
  _OWORD v18[2];

  v12 = *a1;
  v13 = (void *)a1[1];
  v14 = (void *)a1[2];
  v15 = a2[1];
  v17[0] = *a2;
  v17[1] = v15;
  v18[0] = a2[2];
  *(_OWORD *)((char *)v18 + 9) = *(_OWORD *)((char *)a2 + 41);
  specialized AttributedString.init<A>(localized:options:table:bundle:localization:locale:comment:including:)(v12, v13, v14, (uint64_t *)v17, a3, a4, a5, a6, &v16, a7, *a8, a8[1]);
  *a9 = v16;
}

void specialized AttributedString.init<A>(localized:options:table:bundle:localization:locale:comment:including:)(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v34;
  _QWORD v35[2];
  char v36;
  char v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  char v43;

  v13 = a10;
  v14 = a4[6];
  if (!a10)
  {
    a8 = a4[5];
    swift_bridgeObjectRetain();
    v13 = v14;
  }
  v16 = *a4;
  v15 = a4[1];
  v17 = *((_BYTE *)a4 + 16);
  v18 = *((_BYTE *)a4 + 17);
  v19 = a4[3];
  v20 = *((_BYTE *)a4 + 32);
  v21 = *((_BYTE *)a4 + 33);
  v22 = *((_BYTE *)a4 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v35[0] = v16;
  v35[1] = v15;
  v36 = v17;
  v37 = v18;
  v38 = v19;
  v39 = v20;
  v40 = v21;
  v41 = a8;
  v42 = v13;
  v43 = v22;
  v23 = a11;
  if (!a11)
  {
    if (one-time initialization token for cache != -1)
      swift_once();
    v34 = static LocaleCache.cache;
    v23 = LocaleCache.current.getter();
    a12 = v25;
  }
  specialized String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)(0, 0, (uint64_t)v35, a5, a6, (uint64_t)a7, v23, a12, 1u, a1, a2, a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  *a9 = v34;
}

void AttributedString.init<A>(localized:options:table:bundle:localization:locale:comment:including:)(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _OWORD *a14, void *a15)
{
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  _QWORD v37[2];
  char v38;
  char v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v15 = *a1;
  v28 = a1[1];
  v35 = *a2;
  v33 = a1[2];
  v34 = a2[1];
  v27 = *((_BYTE *)a2 + 16);
  v16 = *((_BYTE *)a2 + 17);
  v26 = a2[3];
  v17 = *((_BYTE *)a2 + 32);
  v25 = *((_BYTE *)a2 + 33);
  v18 = a2[6];
  v19 = *((_BYTE *)a2 + 56);
  v20 = *a8;
  v24 = a8[1];
  if (a7)
  {
    v21 = a7;
  }
  else
  {
    a6 = a2[5];
    swift_bridgeObjectRetain();
    v21 = v18;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v46 = v15;
  v47 = v28;
  v48 = v33;
  v37[0] = v35;
  v37[1] = v34;
  v38 = v27;
  v39 = v16;
  v40 = v26;
  v41 = v17;
  v42 = v25;
  v43 = a6;
  v44 = v21;
  v45 = v19;
  if (v20)
  {
    v23 = v24;
  }
  else
  {
    if (one-time initialization token for cache != -1)
      swift_once();
    v36[0] = static LocaleCache.cache;
    v20 = LocaleCache.current.getter();
  }
  v36[0] = v20;
  v36[1] = v23;
  String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)(0, 0, (uint64_t)v37, a3, a4, (uint64_t)a5, (uint64_t)v36, a13, 1u, a14, a15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  *a9 = v49;
}

uint64_t AttributedString.init<A>(localized:options:table:bundle:localization:locale:comment:including:)@<X0>(__int128 *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, __int128 *a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _OWORD *a14, void *a15)
{
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  __int128 v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  char v30;
  char v31;
  uint64_t v32;
  char v33;
  char v34;
  __int128 v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;

  v16 = *((_QWORD *)a1 + 2);
  v17 = *((_BYTE *)a2 + 16);
  v18 = *((_BYTE *)a2 + 17);
  v19 = *((_QWORD *)a2 + 3);
  v20 = *((_BYTE *)a2 + 32);
  v21 = *((_BYTE *)a2 + 33);
  v22 = *((_BYTE *)a2 + 56);
  v37 = *a1;
  v38 = v16;
  v23 = *a2;
  v30 = v17;
  v31 = v18;
  v32 = v19;
  v33 = v20;
  v34 = v21;
  v35 = *(__int128 *)((char *)a2 + 40);
  v36 = v22;
  v28 = *a8;
  v29 = v23;
  AttributedString.init<A>(localized:options:table:bundle:localization:locale:comment:including:)((uint64_t *)&v37, (uint64_t *)&v29, a3, a4, a5, a6, a7, (uint64_t *)&v28, &v39, v25, v26, v27, (uint64_t)a14, a14, a15);
  result = swift_release();
  *a9 = v39;
  return result;
}

uint64_t one-time initialization function for formatSpecifierConfiguration()
{
  uint64_t result;

  result = String._bridgeToObjectiveCImpl()();
  static NSAttributedStringKey.formatSpecifierConfiguration = result;
  return result;
}

uint64_t closure #1 in String.LocalizationValue.argumentsWithReplacements(_:locale:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *boxed_opaque_existential_1;
  unint64_t v23;
  _QWORD v24[3];
  uint64_t v25;
  unint64_t v26;
  _BYTE v27[40];
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  char v31;

  outlined init with copy of String.LocalizationValue.FormatArgument.Storage(a1, (uint64_t)&v29);
  if (v31 == 6)
  {
    v10 = v29;
    v11 = a2[1];
    v12 = *(_QWORD *)(*a2 + 16);
    if (v11 == v12)
      __asm { BR              X9 }
    if (v11 >= v12)
    {
      __break(1u);
      JUMPOUT(0x181D3707CLL);
    }
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(*a2 + 40 * v11 + 32, (uint64_t)&v29);
    a2[1] = v11 + 1;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v29, (uint64_t)&v28);
    *(_QWORD *)&v29 = a3;
    *((_QWORD *)&v29 + 1) = a4;
    v14 = processPlaceholderReplacement(_:locale:)((uint64_t)v27, (uint64_t)&v28, &v29);
    v16 = v15;
    v17 = 0xE400000000000000;
    v18 = 1684827173;
    switch(v10)
    {
      case 0:
        goto LABEL_12;
      case 1:
        if (v14 != 1970039845)
          goto LABEL_16;
        goto LABEL_13;
      case 2:
        v17 = 0xE200000000000000;
        v18 = 26149;
LABEL_12:
        if (v14 == v18)
          goto LABEL_13;
        goto LABEL_16;
      case 3:
        v17 = 0xE300000000000000;
        if (v14 != 6712357)
          goto LABEL_16;
        goto LABEL_13;
      default:
        while (2)
        {
          v17 = 0xE200000000000000;
          if (v14 != 16421)
            goto LABEL_16;
LABEL_13:
          if (v16 == v17)
          {
            swift_bridgeObjectRelease_n();
LABEL_17:
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v27, (uint64_t)v24);
            v20 = v25;
            break;
          }
LABEL_16:
          v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          v14 = swift_bridgeObjectRelease();
          if ((v19 & 1) != 0)
            goto LABEL_17;
          switch(v10)
          {
            case 0:
              v20 = MEMORY[0x1E0DEDC60];
              v23 = MEMORY[0x1E0DEDCD8];
              goto LABEL_25;
            case 1:
              v20 = MEMORY[0x1E0DEE190];
              v23 = MEMORY[0x1E0DEE1F0];
              goto LABEL_25;
            case 2:
              v20 = MEMORY[0x1E0DEB188];
              v25 = MEMORY[0x1E0DEB188];
              v26 = MEMORY[0x1E0DEB1E8];
              LODWORD(v24[0]) = 0;
              break;
            case 3:
              v20 = MEMORY[0x1E0DEB070];
              v23 = MEMORY[0x1E0DEB100];
LABEL_25:
              v25 = v20;
              v26 = v23;
              v24[0] = 0;
              break;
            case 4:
              v20 = MEMORY[0x1E0DEA968];
              v25 = MEMORY[0x1E0DEA968];
              v26 = lazy protocol witness table accessor for type String and conformance String();
              v24[0] = 0x296C6C756E28;
              v24[1] = 0xE600000000000000;
              break;
            default:
              continue;
          }
          break;
        }
        v21 = __swift_project_boxed_opaque_existential_1(v24, v20);
        v30 = v20;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v29);
        (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(boxed_opaque_existential_1, v21, v20);
        v31 = 0;
        outlined init with take of String.LocalizationValue.FormatArgument.Storage(&v29, a5);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
        result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
        break;
    }
  }
  else
  {
    outlined destroy of String.LocalizationValue.FormatArgument.Storage((uint64_t)&v29);
    return outlined init with copy of String.LocalizationValue.FormatArgument(a1, a5);
  }
  return result;
}

uint64_t processPlaceholderReplacement(_:locale:)(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  __int128 v22;
  _BYTE v23[40];
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t AssociatedConformanceWitness;
  _OWORD v30[3];

  v22 = *a3;
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a2, (uint64_t)v23);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _FormatSpecifiable);
  if (!swift_dynamicCast())
  {
    v26 = 0;
    v24 = 0u;
    v25 = 0u;
    outlined destroy of Any?((uint64_t)&v24, &demangling cache variable for type metadata for _FormatSpecifiable?);
    v27 = 0u;
    v28 = 0u;
    AssociatedConformanceWitness = 0;
    goto LABEL_6;
  }
  v5 = *((_QWORD *)&v25 + 1);
  v6 = v26;
  __swift_project_boxed_opaque_existential_1(&v24, *((uint64_t *)&v25 + 1));
  v7 = *(void (**)(uint64_t, uint64_t))(v6 + 32);
  *((_QWORD *)&v28 + 1) = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v27);
  v7(v5, v6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
  if (!*((_QWORD *)&v28 + 1))
  {
LABEL_6:
    outlined destroy of Any?((uint64_t)&v27, &demangling cache variable for type metadata for (CVarArg & Sendable)?);
    v30[0] = v22;
    _convertObjectToSendableArgument(_:locale:)(a2, (char **)a1);
    return 16421;
  }
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v27, (uint64_t)v30);
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v30, (uint64_t)&v27);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg & Sendable);
  v8 = MEMORY[0x1E0DEDC60];
  if (swift_dynamicCast())
  {
    v9 = 1684827173;
    v10 = v24;
LABEL_9:
    v11 = MEMORY[0x1E0DEDCD8];
LABEL_10:
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = v11;
    *(_QWORD *)a1 = v10;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    return v9;
  }
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v30, (uint64_t)&v27);
  if (swift_dynamicCast())
  {
    v9 = 1684827173;
    v10 = (int)v24;
    goto LABEL_9;
  }
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v30, (uint64_t)&v27);
  v8 = MEMORY[0x1E0DEE190];
  if (swift_dynamicCast())
  {
    v9 = 1970039845;
    v10 = v24;
LABEL_16:
    v11 = MEMORY[0x1E0DEE1F0];
    goto LABEL_10;
  }
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v30, (uint64_t)&v27);
  if (swift_dynamicCast())
  {
    v9 = 1970039845;
    v10 = v24;
    goto LABEL_16;
  }
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v30, (uint64_t)&v27);
  v13 = MEMORY[0x1E0DEB188];
  if (swift_dynamicCast())
  {
    v14 = v24;
    v15 = MEMORY[0x1E0DEB1E8];
    *(_QWORD *)(a1 + 24) = v13;
    *(_QWORD *)(a1 + 32) = v15;
    *(_DWORD *)a1 = v14;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    return 26149;
  }
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v30, (uint64_t)&v27);
  v16 = MEMORY[0x1E0DEB070];
  if (swift_dynamicCast())
  {
    v9 = 6712357;
    v17 = v24;
    v18 = MEMORY[0x1E0DEB100];
    *(_QWORD *)(a1 + 24) = v16;
    *(_QWORD *)(a1 + 32) = v18;
    *(_QWORD *)a1 = v17;
LABEL_23:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    return v9;
  }
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v30, (uint64_t)&v27);
  v19 = MEMORY[0x1E0DEF040];
  if (swift_dynamicCast())
  {
    v9 = 6712357;
    v20 = v24;
    *(_QWORD *)(a1 + 24) = v19;
    *(_QWORD *)(a1 + 32) = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    *(_QWORD *)a1 = v20;
    goto LABEL_23;
  }
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v30, (uint64_t)&v27);
  *(_QWORD *)&v24 = 0;
  *((_QWORD *)&v24 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v24 = 0xD000000000000027;
  *((_QWORD *)&v24 + 1) = 0x800000018230C3F0;
  __swift_project_boxed_opaque_existential_1(&v27, *((uint64_t *)&v28 + 1));
  swift_getDynamicType();
  v21._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t one-time initialization function for attributedStringsCacheLock()
{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<String.LocalizationValue.AttributedStringCache>._Buffer);
  result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 16) = MEMORY[0x1E0DEE9E0];
  static String.LocalizationValue.attributedStringsCacheLock = result;
  return result;
}

uint64_t specialized closure #1 in String.LocalizationValue._parseLocalizedMarkdown<A>(_:bundlePreferredLocalization:tableURL:formatConfiguration:scope:appliesSourcePositionAttribute:ignoreCache:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  ValueMetadata *v15;
  int v16;

  v6 = *(_QWORD *)result;
  if (!*(_QWORD *)(*(_QWORD *)result + 16))
    goto LABEL_7;
  swift_bridgeObjectRetain();
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v11 & 1) == 0)
  {
    result = swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  v12 = *(_QWORD *)(v6 + 56) + 32 * v10;
  v13 = *(_QWORD *)v12;
  v14 = *(_BYTE *)(v12 + 8);
  v15 = *(ValueMetadata **)(v12 + 16);
  v16 = *(unsigned __int8 *)(v12 + 24);
  swift_retain();
  result = swift_bridgeObjectRelease();
  if (v15 != &type metadata for AttributeScopes.FoundationAttributes || ((v16 ^ a4) & 1) != 0)
  {
    result = swift_release();
LABEL_7:
    v13 = 0;
    v14 = 0;
  }
  *(_QWORD *)a5 = v13;
  *(_BYTE *)(a5 + 8) = v14;
  return result;
}

uint64_t closure #1 in String.LocalizationValue._parseLocalizedMarkdown<A>(_:bundlePreferredLocalization:tableURL:formatConfiguration:scope:appliesSourcePositionAttribute:ignoreCache:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  int v18;

  v7 = *(_QWORD *)result;
  if (!*(_QWORD *)(*(_QWORD *)result + 16))
    goto LABEL_7;
  swift_bridgeObjectRetain();
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v13 & 1) == 0)
  {
    result = swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  v14 = *(_QWORD *)(v7 + 56) + 32 * v12;
  v15 = *(_QWORD *)v14;
  v16 = *(_BYTE *)(v14 + 8);
  v17 = *(_QWORD *)(v14 + 16);
  v18 = *(unsigned __int8 *)(v14 + 24);
  swift_retain();
  result = swift_bridgeObjectRelease();
  if (v17 != a4 || v18 != (a5 & 1))
  {
    result = swift_release();
LABEL_7:
    v15 = 0;
    v16 = 0;
  }
  *(_QWORD *)a6 = v15;
  *(_BYTE *)(a6 + 8) = v16;
  return result;
}

uint64_t specialized closure #2 in String.LocalizationValue._parseLocalizedMarkdown<A>(_:bundlePreferredLocalization:tableURL:formatConfiguration:scope:appliesSourcePositionAttribute:ignoreCache:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  char v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  void *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  int64_t v43;
  unint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  int64_t v49;
  uint64_t v52;

  swift_bridgeObjectRetain();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v52 = *a1;
  v12 = *a1;
  *a1 = 0x8000000000000000;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v6 = v13;
    if (*(_QWORD *)(v12 + 24) < v17)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, isUniquelyReferenced_nonNull_native);
      v18 = v52;
      v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
      if ((v6 & 1) != (v20 & 1))
        goto LABEL_47;
      v14 = v19;
      goto LABEL_7;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v18 = v12;
LABEL_7:
      if ((v6 & 1) != 0)
      {
        v21 = *(_QWORD *)(v18 + 56) + 32 * v14;
        swift_release();
        *(_QWORD *)v21 = a4;
        *(_BYTE *)(v21 + 8) = a5 & 1;
        *(_QWORD *)(v21 + 16) = &type metadata for AttributeScopes.FoundationAttributes;
        *(_BYTE *)(v21 + 24) = a6 & 1;
      }
      else
      {
        specialized _NativeDictionary._insert(at:key:value:)(v14, a2, a3, a4, a5 & 1, (uint64_t)&type metadata for AttributeScopes.FoundationAttributes, a6 & 1, (_QWORD *)v18);
        swift_bridgeObjectRetain();
      }
      *a1 = v18;
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (str: (parsed: AttributedString, hasInflectionAttributes: Bool)?, scopeType: Any.Type, hasSourcePositions: Bool)>);
  v23 = static _DictionaryStorage.copy(original:)();
  v18 = v23;
  if (!*(_QWORD *)(v12 + 16))
  {
LABEL_44:
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  v24 = (void *)(v23 + 64);
  v25 = (unint64_t)((1 << *(_BYTE *)(v18 + 32)) + 63) >> 6;
  if (v18 != v12 || (unint64_t)v24 >= v12 + 64 + 8 * v25)
    memmove(v24, (const void *)(v12 + 64), 8 * v25);
  v47 = v12 + 64;
  v26 = 0;
  *(_QWORD *)(v18 + 16) = *(_QWORD *)(v12 + 16);
  v27 = 1 << *(_BYTE *)(v12 + 32);
  v28 = -1;
  if (v27 < 64)
    v28 = ~(-1 << v27);
  v29 = v28 & *(_QWORD *)(v12 + 64);
  v48 = (unint64_t)(v27 + 63) >> 6;
  while (1)
  {
    if (v29)
    {
      v30 = __clz(__rbit64(v29));
      v29 &= v29 - 1;
      v49 = v26;
      v31 = v30 | (v26 << 6);
      goto LABEL_20;
    }
    v43 = v26 + 1;
    if (__OFADD__(v26, 1))
    {
      __break(1u);
      goto LABEL_46;
    }
    if (v43 >= v48)
      goto LABEL_44;
    v44 = *(_QWORD *)(v47 + 8 * v43);
    v45 = v26 + 1;
    if (!v44)
    {
      v45 = v26 + 2;
      if (v26 + 2 >= v48)
        goto LABEL_44;
      v44 = *(_QWORD *)(v47 + 8 * v45);
      if (!v44)
      {
        v45 = v26 + 3;
        if (v26 + 3 >= v48)
          goto LABEL_44;
        v44 = *(_QWORD *)(v47 + 8 * v45);
        if (!v44)
        {
          v45 = v26 + 4;
          if (v26 + 4 >= v48)
            goto LABEL_44;
          v44 = *(_QWORD *)(v47 + 8 * v45);
          if (!v44)
          {
            v45 = v26 + 5;
            if (v26 + 5 >= v48)
              goto LABEL_44;
            v44 = *(_QWORD *)(v47 + 8 * v45);
            if (!v44)
            {
              v45 = v26 + 6;
              if (v26 + 6 >= v48)
                goto LABEL_44;
              v44 = *(_QWORD *)(v47 + 8 * v45);
              if (!v44)
              {
                v45 = v26 + 7;
                if (v26 + 7 >= v48)
                  goto LABEL_44;
                v44 = *(_QWORD *)(v47 + 8 * v45);
                if (!v44)
                  break;
              }
            }
          }
        }
      }
    }
LABEL_43:
    v29 = (v44 - 1) & v44;
    v49 = v45;
    v31 = __clz(__rbit64(v44)) + (v45 << 6);
LABEL_20:
    v32 = 16 * v31;
    v33 = (uint64_t *)(*(_QWORD *)(v12 + 48) + 16 * v31);
    v34 = *v33;
    v35 = v33[1];
    v36 = 32 * v31;
    v37 = *(_QWORD *)(v12 + 56) + v36;
    v38 = *(_QWORD *)v37;
    v39 = *(_BYTE *)(v37 + 8);
    v40 = *(_QWORD *)(v37 + 16);
    LOBYTE(v37) = *(_BYTE *)(v37 + 24);
    v41 = (_QWORD *)(*(_QWORD *)(v18 + 48) + v32);
    *v41 = v34;
    v41[1] = v35;
    v42 = *(_QWORD *)(v18 + 56) + v36;
    *(_QWORD *)v42 = v38;
    *(_BYTE *)(v42 + 8) = v39;
    *(_QWORD *)(v42 + 16) = v40;
    *(_BYTE *)(v42 + 24) = v37;
    swift_retain();
    swift_bridgeObjectRetain();
    v26 = v49;
  }
  v46 = v26 + 8;
  if (v26 + 8 >= v48)
    goto LABEL_44;
  v44 = *(_QWORD *)(v47 + 8 * v46);
  if (v44)
  {
    v45 = v26 + 8;
    goto LABEL_43;
  }
  while (1)
  {
    v45 = v46 + 1;
    if (__OFADD__(v46, 1))
      break;
    if (v45 >= v48)
      goto LABEL_44;
    v44 = *(_QWORD *)(v47 + 8 * v45);
    ++v46;
    if (v44)
      goto LABEL_43;
  }
LABEL_46:
  __break(1u);
LABEL_47:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t closure #2 in String.LocalizationValue._parseLocalizedMarkdown<A>(_:bundlePreferredLocalization:tableURL:formatConfiguration:scope:appliesSourcePositionAttribute:ignoreCache:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, char a7)
{
  char v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  void *v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  int64_t v44;
  unint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  int64_t v50;
  uint64_t v54;

  swift_bridgeObjectRetain();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v54 = *a1;
  v13 = *a1;
  *a1 = 0x8000000000000000;
  v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v16 = *(_QWORD *)(v13 + 16);
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
  }
  else
  {
    v7 = v14;
    if (*(_QWORD *)(v13 + 24) < v18)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, isUniquelyReferenced_nonNull_native);
      v19 = v54;
      v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
      if ((v7 & 1) != (v21 & 1))
        goto LABEL_47;
      v15 = v20;
      goto LABEL_7;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v19 = v13;
LABEL_7:
      if ((v7 & 1) != 0)
      {
        v22 = *(_QWORD *)(v19 + 56) + 32 * v15;
        swift_release();
        *(_QWORD *)v22 = a4;
        *(_BYTE *)(v22 + 8) = a5 & 1;
        *(_QWORD *)(v22 + 16) = a6;
        *(_BYTE *)(v22 + 24) = a7 & 1;
      }
      else
      {
        specialized _NativeDictionary._insert(at:key:value:)(v15, a2, a3, a4, a5 & 1, a6, a7 & 1, (_QWORD *)v19);
        swift_bridgeObjectRetain();
      }
      *a1 = v19;
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (str: (parsed: AttributedString, hasInflectionAttributes: Bool)?, scopeType: Any.Type, hasSourcePositions: Bool)>);
  v24 = static _DictionaryStorage.copy(original:)();
  v19 = v24;
  if (!*(_QWORD *)(v13 + 16))
  {
LABEL_44:
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  v25 = (void *)(v24 + 64);
  v26 = (unint64_t)((1 << *(_BYTE *)(v19 + 32)) + 63) >> 6;
  if (v19 != v13 || (unint64_t)v25 >= v13 + 64 + 8 * v26)
    memmove(v25, (const void *)(v13 + 64), 8 * v26);
  v48 = v13 + 64;
  v27 = 0;
  *(_QWORD *)(v19 + 16) = *(_QWORD *)(v13 + 16);
  v28 = 1 << *(_BYTE *)(v13 + 32);
  v29 = -1;
  if (v28 < 64)
    v29 = ~(-1 << v28);
  v30 = v29 & *(_QWORD *)(v13 + 64);
  v49 = (unint64_t)(v28 + 63) >> 6;
  while (1)
  {
    if (v30)
    {
      v31 = __clz(__rbit64(v30));
      v30 &= v30 - 1;
      v50 = v27;
      v32 = v31 | (v27 << 6);
      goto LABEL_20;
    }
    v44 = v27 + 1;
    if (__OFADD__(v27, 1))
    {
      __break(1u);
      goto LABEL_46;
    }
    if (v44 >= v49)
      goto LABEL_44;
    v45 = *(_QWORD *)(v48 + 8 * v44);
    v46 = v27 + 1;
    if (!v45)
    {
      v46 = v27 + 2;
      if (v27 + 2 >= v49)
        goto LABEL_44;
      v45 = *(_QWORD *)(v48 + 8 * v46);
      if (!v45)
      {
        v46 = v27 + 3;
        if (v27 + 3 >= v49)
          goto LABEL_44;
        v45 = *(_QWORD *)(v48 + 8 * v46);
        if (!v45)
        {
          v46 = v27 + 4;
          if (v27 + 4 >= v49)
            goto LABEL_44;
          v45 = *(_QWORD *)(v48 + 8 * v46);
          if (!v45)
          {
            v46 = v27 + 5;
            if (v27 + 5 >= v49)
              goto LABEL_44;
            v45 = *(_QWORD *)(v48 + 8 * v46);
            if (!v45)
            {
              v46 = v27 + 6;
              if (v27 + 6 >= v49)
                goto LABEL_44;
              v45 = *(_QWORD *)(v48 + 8 * v46);
              if (!v45)
              {
                v46 = v27 + 7;
                if (v27 + 7 >= v49)
                  goto LABEL_44;
                v45 = *(_QWORD *)(v48 + 8 * v46);
                if (!v45)
                  break;
              }
            }
          }
        }
      }
    }
LABEL_43:
    v30 = (v45 - 1) & v45;
    v50 = v46;
    v32 = __clz(__rbit64(v45)) + (v46 << 6);
LABEL_20:
    v33 = 16 * v32;
    v34 = (uint64_t *)(*(_QWORD *)(v13 + 48) + 16 * v32);
    v35 = *v34;
    v36 = v34[1];
    v37 = 32 * v32;
    v38 = *(_QWORD *)(v13 + 56) + v37;
    v39 = *(_QWORD *)v38;
    v40 = *(_BYTE *)(v38 + 8);
    v41 = *(_QWORD *)(v38 + 16);
    LOBYTE(v38) = *(_BYTE *)(v38 + 24);
    v42 = (_QWORD *)(*(_QWORD *)(v19 + 48) + v33);
    *v42 = v35;
    v42[1] = v36;
    v43 = *(_QWORD *)(v19 + 56) + v37;
    *(_QWORD *)v43 = v39;
    *(_BYTE *)(v43 + 8) = v40;
    *(_QWORD *)(v43 + 16) = v41;
    *(_BYTE *)(v43 + 24) = v38;
    swift_retain();
    swift_bridgeObjectRetain();
    v27 = v50;
  }
  v47 = v27 + 8;
  if (v27 + 8 >= v49)
    goto LABEL_44;
  v45 = *(_QWORD *)(v48 + 8 * v47);
  if (v45)
  {
    v46 = v27 + 8;
    goto LABEL_43;
  }
  while (1)
  {
    v46 = v47 + 1;
    if (__OFADD__(v47, 1))
      break;
    if (v46 >= v49)
      goto LABEL_44;
    v45 = *(_QWORD *)(v48 + 8 * v46);
    ++v47;
    if (v45)
      goto LABEL_43;
  }
LABEL_46:
  __break(1u);
LABEL_47:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized closure #3 in String.LocalizationValue._parseLocalizedMarkdown<A>(_:bundlePreferredLocalization:tableURL:formatConfiguration:scope:appliesSourcePositionAttribute:ignoreCache:)(uint64_t *a1, uint64_t a2, uint64_t a3, char a4)
{
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  int64_t v45;
  int64_t v46;
  uint64_t v48;

  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v48 = *a1;
  v9 = *a1;
  *a1 = 0x8000000000000000;
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    v4 = v10;
    if (*(_QWORD *)(v9 + 24) < v14)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, isUniquelyReferenced_nonNull_native);
      v15 = v48;
      v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
      if ((v4 & 1) != (v17 & 1))
        goto LABEL_47;
      v11 = v16;
      if ((v4 & 1) == 0)
        goto LABEL_43;
LABEL_8:
      v18 = *(_QWORD *)(v15 + 56) + 32 * v11;
      swift_release();
      *(_QWORD *)v18 = 0;
      *(_BYTE *)(v18 + 8) = 0;
      *(_QWORD *)(v18 + 16) = &type metadata for AttributeScopes.FoundationAttributes;
      *(_BYTE *)(v18 + 24) = a4 & 1;
LABEL_44:
      *a1 = v15;
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v15 = v9;
      if ((v10 & 1) != 0)
        goto LABEL_8;
LABEL_43:
      specialized _NativeDictionary._insert(at:key:value:)(v11, a2, a3, 0, 0, (uint64_t)&type metadata for AttributeScopes.FoundationAttributes, a4 & 1, (_QWORD *)v15);
      swift_bridgeObjectRetain();
      goto LABEL_44;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (str: (parsed: AttributedString, hasInflectionAttributes: Bool)?, scopeType: Any.Type, hasSourcePositions: Bool)>);
  v19 = static _DictionaryStorage.copy(original:)();
  v15 = v19;
  if (!*(_QWORD *)(v9 + 16))
  {
LABEL_42:
    swift_bridgeObjectRelease();
    if ((v4 & 1) != 0)
      goto LABEL_8;
    goto LABEL_43;
  }
  v20 = (void *)(v19 + 64);
  v21 = (unint64_t)((1 << *(_BYTE *)(v15 + 32)) + 63) >> 6;
  if (v15 != v9 || (unint64_t)v20 >= v9 + 64 + 8 * v21)
    memmove(v20, (const void *)(v9 + 64), 8 * v21);
  v44 = v9 + 64;
  v22 = 0;
  *(_QWORD *)(v15 + 16) = *(_QWORD *)(v9 + 16);
  v23 = 1 << *(_BYTE *)(v9 + 32);
  v24 = -1;
  if (v23 < 64)
    v24 = ~(-1 << v23);
  v25 = v24 & *(_QWORD *)(v9 + 64);
  v45 = (unint64_t)(v23 + 63) >> 6;
  while (1)
  {
    if (v25)
    {
      v26 = __clz(__rbit64(v25));
      v25 &= v25 - 1;
      v46 = v22;
      v27 = v26 | (v22 << 6);
      goto LABEL_18;
    }
    v39 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_46;
    }
    if (v39 >= v45)
      goto LABEL_42;
    v40 = *(_QWORD *)(v44 + 8 * v39);
    v41 = v22 + 1;
    if (!v40)
    {
      v41 = v22 + 2;
      if (v22 + 2 >= v45)
        goto LABEL_42;
      v40 = *(_QWORD *)(v44 + 8 * v41);
      if (!v40)
      {
        v41 = v22 + 3;
        if (v22 + 3 >= v45)
          goto LABEL_42;
        v40 = *(_QWORD *)(v44 + 8 * v41);
        if (!v40)
        {
          v41 = v22 + 4;
          if (v22 + 4 >= v45)
            goto LABEL_42;
          v40 = *(_QWORD *)(v44 + 8 * v41);
          if (!v40)
          {
            v41 = v22 + 5;
            if (v22 + 5 >= v45)
              goto LABEL_42;
            v40 = *(_QWORD *)(v44 + 8 * v41);
            if (!v40)
            {
              v41 = v22 + 6;
              if (v22 + 6 >= v45)
                goto LABEL_42;
              v40 = *(_QWORD *)(v44 + 8 * v41);
              if (!v40)
              {
                v41 = v22 + 7;
                if (v22 + 7 >= v45)
                  goto LABEL_42;
                v40 = *(_QWORD *)(v44 + 8 * v41);
                if (!v40)
                  break;
              }
            }
          }
        }
      }
    }
LABEL_41:
    v25 = (v40 - 1) & v40;
    v46 = v41;
    v27 = __clz(__rbit64(v40)) + (v41 << 6);
LABEL_18:
    v28 = 16 * v27;
    v29 = (uint64_t *)(*(_QWORD *)(v9 + 48) + 16 * v27);
    v30 = *v29;
    v31 = v29[1];
    v32 = 32 * v27;
    v33 = *(_QWORD *)(v9 + 56) + v32;
    v34 = *(_QWORD *)v33;
    v35 = *(_BYTE *)(v33 + 8);
    v36 = *(_QWORD *)(v33 + 16);
    LOBYTE(v33) = *(_BYTE *)(v33 + 24);
    v37 = (_QWORD *)(*(_QWORD *)(v15 + 48) + v28);
    *v37 = v30;
    v37[1] = v31;
    v38 = *(_QWORD *)(v15 + 56) + v32;
    *(_QWORD *)v38 = v34;
    *(_BYTE *)(v38 + 8) = v35;
    *(_QWORD *)(v38 + 16) = v36;
    *(_BYTE *)(v38 + 24) = v33;
    swift_retain();
    swift_bridgeObjectRetain();
    v22 = v46;
  }
  v42 = v22 + 8;
  if (v22 + 8 >= v45)
    goto LABEL_42;
  v40 = *(_QWORD *)(v44 + 8 * v42);
  if (v40)
  {
    v41 = v22 + 8;
    goto LABEL_41;
  }
  while (1)
  {
    v41 = v42 + 1;
    if (__OFADD__(v42, 1))
      break;
    if (v41 >= v45)
      goto LABEL_42;
    v40 = *(_QWORD *)(v44 + 8 * v41);
    ++v42;
    if (v40)
      goto LABEL_41;
  }
LABEL_46:
  __break(1u);
LABEL_47:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t closure #3 in String.LocalizationValue._parseLocalizedMarkdown<A>(_:bundlePreferredLocalization:tableURL:formatConfiguration:scope:appliesSourcePositionAttribute:ignoreCache:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  char v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  int64_t v41;
  unint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t result;
  uint64_t v46;
  int64_t v47;
  int64_t v48;
  uint64_t v50;

  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v50 = *a1;
  v11 = *a1;
  *a1 = 0x8000000000000000;
  v13 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v14 = *(_QWORD *)(v11 + 16);
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    v5 = v12;
    if (*(_QWORD *)(v11 + 24) < v16)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, isUniquelyReferenced_nonNull_native);
      v17 = v50;
      v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
      if ((v5 & 1) != (v19 & 1))
        goto LABEL_47;
      v13 = v18;
      if ((v5 & 1) == 0)
        goto LABEL_43;
LABEL_8:
      v20 = *(_QWORD *)(v17 + 56) + 32 * v13;
      swift_release();
      *(_QWORD *)v20 = 0;
      *(_BYTE *)(v20 + 8) = 0;
      *(_QWORD *)(v20 + 16) = a4;
      *(_BYTE *)(v20 + 24) = a5 & 1;
LABEL_44:
      *a1 = v17;
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v17 = v11;
      if ((v12 & 1) != 0)
        goto LABEL_8;
LABEL_43:
      specialized _NativeDictionary._insert(at:key:value:)(v13, a2, a3, 0, 0, a4, a5 & 1, (_QWORD *)v17);
      swift_bridgeObjectRetain();
      goto LABEL_44;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (str: (parsed: AttributedString, hasInflectionAttributes: Bool)?, scopeType: Any.Type, hasSourcePositions: Bool)>);
  v21 = static _DictionaryStorage.copy(original:)();
  v17 = v21;
  if (!*(_QWORD *)(v11 + 16))
  {
LABEL_42:
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      goto LABEL_8;
    goto LABEL_43;
  }
  v22 = (void *)(v21 + 64);
  v23 = (unint64_t)((1 << *(_BYTE *)(v17 + 32)) + 63) >> 6;
  if (v17 != v11 || (unint64_t)v22 >= v11 + 64 + 8 * v23)
    memmove(v22, (const void *)(v11 + 64), 8 * v23);
  v46 = v11 + 64;
  v24 = 0;
  *(_QWORD *)(v17 + 16) = *(_QWORD *)(v11 + 16);
  v25 = 1 << *(_BYTE *)(v11 + 32);
  v26 = -1;
  if (v25 < 64)
    v26 = ~(-1 << v25);
  v27 = v26 & *(_QWORD *)(v11 + 64);
  v47 = (unint64_t)(v25 + 63) >> 6;
  while (1)
  {
    if (v27)
    {
      v28 = __clz(__rbit64(v27));
      v27 &= v27 - 1;
      v48 = v24;
      v29 = v28 | (v24 << 6);
      goto LABEL_18;
    }
    v41 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
      __break(1u);
      goto LABEL_46;
    }
    if (v41 >= v47)
      goto LABEL_42;
    v42 = *(_QWORD *)(v46 + 8 * v41);
    v43 = v24 + 1;
    if (!v42)
    {
      v43 = v24 + 2;
      if (v24 + 2 >= v47)
        goto LABEL_42;
      v42 = *(_QWORD *)(v46 + 8 * v43);
      if (!v42)
      {
        v43 = v24 + 3;
        if (v24 + 3 >= v47)
          goto LABEL_42;
        v42 = *(_QWORD *)(v46 + 8 * v43);
        if (!v42)
        {
          v43 = v24 + 4;
          if (v24 + 4 >= v47)
            goto LABEL_42;
          v42 = *(_QWORD *)(v46 + 8 * v43);
          if (!v42)
          {
            v43 = v24 + 5;
            if (v24 + 5 >= v47)
              goto LABEL_42;
            v42 = *(_QWORD *)(v46 + 8 * v43);
            if (!v42)
            {
              v43 = v24 + 6;
              if (v24 + 6 >= v47)
                goto LABEL_42;
              v42 = *(_QWORD *)(v46 + 8 * v43);
              if (!v42)
              {
                v43 = v24 + 7;
                if (v24 + 7 >= v47)
                  goto LABEL_42;
                v42 = *(_QWORD *)(v46 + 8 * v43);
                if (!v42)
                  break;
              }
            }
          }
        }
      }
    }
LABEL_41:
    v27 = (v42 - 1) & v42;
    v48 = v43;
    v29 = __clz(__rbit64(v42)) + (v43 << 6);
LABEL_18:
    v30 = 16 * v29;
    v31 = (uint64_t *)(*(_QWORD *)(v11 + 48) + 16 * v29);
    v32 = *v31;
    v33 = v31[1];
    v34 = 32 * v29;
    v35 = *(_QWORD *)(v11 + 56) + v34;
    v36 = *(_QWORD *)v35;
    v37 = *(_BYTE *)(v35 + 8);
    v38 = *(_QWORD *)(v35 + 16);
    LOBYTE(v35) = *(_BYTE *)(v35 + 24);
    v39 = (_QWORD *)(*(_QWORD *)(v17 + 48) + v30);
    *v39 = v32;
    v39[1] = v33;
    v40 = *(_QWORD *)(v17 + 56) + v34;
    *(_QWORD *)v40 = v36;
    *(_BYTE *)(v40 + 8) = v37;
    *(_QWORD *)(v40 + 16) = v38;
    *(_BYTE *)(v40 + 24) = v35;
    swift_retain();
    swift_bridgeObjectRetain();
    v24 = v48;
  }
  v44 = v24 + 8;
  if (v24 + 8 >= v47)
    goto LABEL_42;
  v42 = *(_QWORD *)(v46 + 8 * v44);
  if (v42)
  {
    v43 = v24 + 8;
    goto LABEL_41;
  }
  while (1)
  {
    v43 = v44 + 1;
    if (__OFADD__(v44, 1))
      break;
    if (v43 >= v47)
      goto LABEL_42;
    v42 = *(_QWORD *)(v46 + 8 * v43);
    ++v44;
    if (v42)
      goto LABEL_41;
  }
LABEL_46:
  __break(1u);
LABEL_47:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t String.LocalizationValue.restoreAttributedStringArguments(_:in:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  __int128 v3;
  __int128 v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  _OWORD *v32;
  __int128 v33;
  uint64_t v34;
  _OWORD *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  __int128 v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  unint64_t v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  __int128 v110;
  char *v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  __int128 v128;
  _OWORD *v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  __int128 v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  _QWORD *v157;
  __int128 v158;
  __int128 v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _OWORD *v165;
  __int128 v166;
  uint64_t *v167;
  os_unfair_lock_s *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  __int128 v172;
  __int128 v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  __int128 v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  int64_t v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  __int128 *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  __int128 *v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  __int128 v217;
  unint64_t v218;
  uint64_t v219;
  unsigned __int8 v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  _QWORD *v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  __int128 v240;
  unint64_t v241;
  __int128 v242[4];
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  uint64_t v255;
  _QWORD v256[10];
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  uint64_t v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  uint64_t v282;
  _BYTE v283[144];
  __int128 v284;
  __int128 v285;
  __int128 v286;
  uint64_t v287;
  _BYTE v288[144];
  __int128 v289;
  __int128 v290;
  __int128 v291;
  uint64_t v292;
  uint64_t v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  unint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  unint64_t v306;
  __int128 v307;
  uint64_t v308;
  void *v309;
  uint64_t v310;
  uint64_t v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  unint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t v324;
  __int128 v325;
  uint64_t v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  char v335[48];
  char v336[48];
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  char v341[48];
  char v342[48];
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  char v347[48];
  char v348[48];
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  char v353[48];
  char v354;
  char v355;
  char v356[48];
  char v357[48];
  unint64_t v358;
  unint64_t v359;
  char v360[48];
  char v361[48];
  char v362[48];
  unint64_t v363;
  unint64_t v364;
  char v365[48];
  char v366[48];
  char v367[48];
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  __int128 v394;
  __int128 v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  __int128 v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  __int128 v410;
  __int128 v411;
  __int128 v412;
  __int128 v413;
  __int128 v414;
  __int128 v415;
  unint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  unint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  __int128 v424;
  __int128 v425;
  __int128 v426;
  unint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  unint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  __int128 v435;
  __int128 v436;
  __int128 v437;
  unint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  unint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  __int128 v446;
  __int128 v447;
  __int128 v448;
  _OWORD *v449;
  __int128 v450;
  __int128 v451;
  __int128 v452;
  __int128 v453;
  uint64_t v454;
  _OWORD *v455;
  __int128 v456;
  __int128 v457;
  __int128 v458;
  __int128 v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  __int128 v469;
  __int128 v470;
  __int128 v471;
  __int128 v472;
  __int128 v473;
  __int128 v474;
  unint64_t v475;
  uint64_t v476;
  __int128 v477;
  unint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  __int128 v482;
  __int128 v483;
  __int128 v484;
  __int128 v485;
  __int128 v486;
  __int128 v487;
  unint64_t v488;
  uint64_t v489;
  __int128 v490;
  unint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  __int128 v495;
  __int128 v496;
  __int128 v497;
  _OWORD v498[3];
  unint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  unint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  __int128 v507;
  __int128 v508;
  __int128 v509;

  MEMORY[0x1E0C80A78](a1);
  v208 = v1;
  v231 = v2;
  v3 = *(_OWORD *)(*v2 + 16);
  v4 = *(_OWORD *)(*v2 + 48);
  v508 = *(_OWORD *)(*v2 + 32);
  v509 = v4;
  v507 = v3;
  v5 = BigString.startIndex.getter();
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v12 = BigString.endIndex.getter();
  if (v12 >> 10 < v5 >> 10)
    goto LABEL_181;
  v499 = v5;
  v500 = v7;
  v501 = v9;
  v502 = v11;
  v503 = v12;
  v504 = v13;
  v505 = v14;
  v506 = v15;
  v16 = swift_retain();
  AttributedString.Runs.init(_:in:)(v16, &v311);
  v331 = v316;
  v332 = v317;
  v333 = v318;
  v334 = v319;
  v327 = v312;
  v328 = v313;
  v329 = v314;
  v330 = v315;
  v225 = v322;
  v226 = v321;
  v224 = v323;
  v227 = v320;
  v17 = v320 >> 10;
  v217 = v325;
  v218 = v324;
  v219 = v311;
  v216 = v326;
  v214 = v324 >> 10;
  if (v320 >> 10 == v324 >> 10)
  {
LABEL_3:
    v298 = v331;
    v299 = v332;
    v300 = v333;
    v301 = v334;
    v294 = v327;
    v295 = v328;
    v296 = v329;
    v297 = v330;
    v293 = v219;
    v302 = v227;
    v303 = v226;
    v304 = v225;
    v305 = v224;
    v306 = v218;
    v307 = v217;
    v308 = v216;
    v309 = &outlined read-only object #0 of String.LocalizationValue.restoreAttributedStringArguments(_:in:);
    v310 = MEMORY[0x1E0DEE9D8];
    return outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v293);
  }
  v20 = v322;
  v19 = v321;
  v21 = v323;
  v22 = v320;
  while (1)
  {
    *(_OWORD *)&v283[72] = v331;
    *(_OWORD *)&v283[88] = v332;
    *(_OWORD *)&v283[104] = v333;
    *(_OWORD *)&v283[120] = v334;
    *(_OWORD *)&v283[8] = v327;
    *(_OWORD *)&v283[24] = v328;
    *(_OWORD *)&v283[40] = v329;
    *(_OWORD *)&v283[56] = v330;
    *(_OWORD *)&v288[72] = v331;
    *(_OWORD *)&v288[88] = v332;
    *(_OWORD *)&v288[104] = v333;
    *(_OWORD *)&v288[120] = v334;
    *(_OWORD *)&v288[8] = v327;
    *(_OWORD *)&v288[24] = v328;
    v237 = v17;
    v239 = v19;
    *((_QWORD *)&v240 + 1) = v21;
    v241 = v22;
    *(_QWORD *)&v240 = v20;
    *(_OWORD *)&v288[40] = v329;
    *(_OWORD *)&v288[56] = v330;
    *(_QWORD *)v288 = v219;
    *(_QWORD *)&v288[136] = v227;
    *(_QWORD *)&v289 = v226;
    *((_QWORD *)&v289 + 1) = v225;
    *(_QWORD *)&v290 = v224;
    *((_QWORD *)&v290 + 1) = v218;
    v291 = v217;
    v292 = v216;
    *(_QWORD *)&v257 = v22;
    *((_QWORD *)&v257 + 1) = v19;
    *(_QWORD *)&v258 = v20;
    *((_QWORD *)&v258 + 1) = v21;
    AttributedString.Runs.subscript.getter((unint64_t *)&v257, &v270);
    v233 = v270;
    v298 = v331;
    v299 = v332;
    v300 = v333;
    v301 = v334;
    v294 = v327;
    v295 = v328;
    v296 = v329;
    v297 = v330;
    v293 = v219;
    v302 = v227;
    v303 = v226;
    v304 = v225;
    v305 = v224;
    v306 = v218;
    v307 = v217;
    v308 = v216;
    v309 = &outlined read-only object #0 of String.LocalizationValue.restoreAttributedStringArguments(_:in:);
    v23 = MEMORY[0x1E0DEE9D8];
    v310 = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)v283 = v219;
    *(_QWORD *)&v283[136] = v227;
    *(_QWORD *)&v284 = v226;
    *((_QWORD *)&v284 + 1) = v225;
    *(_QWORD *)&v285 = v224;
    *((_QWORD *)&v285 + 1) = v218;
    v286 = v217;
    v287 = v216;
    *(_QWORD *)&v270 = v22;
    *((_QWORD *)&v270 + 1) = v19;
    v271 = v240;
    swift_retain();
    outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)&v293);
    AttributedString.Runs._slicedRunBoundary(after:attributeNames:constraints:)((unint64_t *)&v270, (uint64_t)&outlined read-only object #0 of String.LocalizationValue.restoreAttributedStringArguments(_:in:), v23, (uint64_t *)v288);
    swift_release();
    outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v293);
    v22 = *(_QWORD *)v288;
    v17 = *(_QWORD *)v288 >> 10;
    if (*(_QWORD *)v288 >> 10 < v237)
    {
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
LABEL_162:
      __break(1u);
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
LABEL_167:
      __break(1u);
LABEL_168:
      __break(1u);
LABEL_169:
      __break(1u);
LABEL_170:
      __break(1u);
      goto LABEL_171;
    }
    v19 = *(_QWORD *)&v288[8];
    v21 = *(_QWORD *)&v288[24];
    v20 = *(_QWORD *)&v288[16];
    if (*(_QWORD *)(v233 + 16)
      && (v24 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000012, 0x8000000182303D10),
          (v25 & 1) != 0))
    {
      outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v233 + 56) + 72 * v24, (uint64_t)v288);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v288, (uint64_t)v283);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
      swift_dynamicCast();
      outlined destroy of AttributedString._AttributeValue((uint64_t)v288);
      v26 = 0;
      BYTE8(v270) = 0;
      v27 = v270;
    }
    else
    {
      v27 = 0;
      *(_QWORD *)&v270 = 0;
      v26 = 1;
      BYTE8(v270) = 1;
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v26 & 1) == 0)
      break;
LABEL_6:
    if (v17 == v214)
      goto LABEL_3;
  }
  v28 = v27 - 1;
  if (__OFSUB__(v27, 1))
    goto LABEL_156;
  if ((v28 & 0x8000000000000000) != 0)
    goto LABEL_157;
  if (v28 >= *(_QWORD *)(v208 + 16))
    goto LABEL_158;
  v29 = v208 + 32 + 24 * v28;
  v30 = *(unsigned __int8 *)(v29 + 16);
  if (v30 == 255)
    goto LABEL_6;
  v32 = *(_OWORD **)v29;
  v31 = *(_QWORD *)(v29 + 8);
  v209 = v21;
  v220 = *(_BYTE *)(v29 + 16);
  v213 = *(_QWORD *)v29;
  if ((v30 & 1) != 0)
  {
    *(_QWORD *)v283 = *(_QWORD *)v29;
    *(_QWORD *)&v283[8] = v31;
    outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup((uint64_t)v32, v31, 1);
    v154 = (uint64_t)v32;
    v155 = v31;
    outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup(v154, v31, 1);
    v156 = v231;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v157 = (_QWORD *)*v231;
      v158 = *(_OWORD *)(*v231 + 16);
      v159 = *(_OWORD *)(*v231 + 48);
      v498[1] = *(_OWORD *)(*v231 + 32);
      v498[2] = v159;
      v498[0] = v158;
      v160 = v157[8];
      v161 = v157[9];
      v162 = v157[10];
      v163 = v157[11];
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)v498);
      swift_unknownObjectRetain();
      v164 = v160;
      v156 = v231;
      *v231 = AttributedString.Guts.init(string:runs:)(v498, v164, v161, v162, v163);
      swift_release();
    }
    v165 = (_OWORD *)*v156;
    v166 = v165[2];
    v495 = v165[1];
    v496 = v166;
    v497 = v165[3];
    BigString.startIndex.getter();
    BigString.endIndex.getter();
    v488 = v241;
    v489 = v239;
    v490 = v240;
    v491 = v22;
    v492 = v19;
    v493 = v20;
    v494 = v21;
    BigString.unicodeScalars.getter();
    swift_retain_n();
    BigString.UnicodeScalarView.subscript.getter();
    swift_release();
    outlined release of Locale((uint64_t)v366);
    outlined release of Locale((uint64_t)v367);
    *(_OWORD *)&v288[8] = v368;
    *(_OWORD *)&v288[24] = v369;
    *(_OWORD *)&v288[40] = v370;
    *(_OWORD *)&v288[56] = v371;
    *(_QWORD *)v288 = v165;
    if (one-time initialization token for currentIdentity != -1)
      swift_once();
    v167 = (uint64_t *)(static AttributedString.currentIdentity + 16);
    v168 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
    swift_retain();
    os_unfair_lock_lock(v168);
    closure #1 in static AttributedString._nextModifyIdentity.getter(v167, (uint64_t *)&v270);
    os_unfair_lock_unlock(v168);
    swift_release();
    v169 = v270;
    *(_QWORD *)&v288[72] = v270;
    BigString.init()();
    *(_QWORD *)&v270 = 0;
    MEMORY[0x186DA9E90](&v270, 8);
    v170 = v270;
    type metadata accessor for AttributedString.Guts();
    v171 = swift_allocObject();
    if ((BigString.isEmpty.getter() & 1) == 0)
      goto LABEL_178;
    v172 = v373;
    *(_OWORD *)(v171 + 16) = v372;
    *(_OWORD *)(v171 + 32) = v172;
    *(_OWORD *)(v171 + 48) = v374;
    *(_QWORD *)(v171 + 64) = 0;
    *(_QWORD *)(v171 + 72) = 0;
    *(_QWORD *)(v171 + 80) = 0;
    *(_QWORD *)(v171 + 88) = v170;
    *v231 = v171;
    swift_release();
    LOBYTE(v270) = 0;
    AttributedSubstring.mergeAttributes(_:mergePolicy:)((uint64_t *)v283, (char *)&v270);
    if (*(_QWORD *)&v288[72] != v169)
      goto LABEL_194;
    *v231 = *(_QWORD *)v288;
    swift_release();
    outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup?(v213, v155, v220);
    outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup?(v213, v155, v220);
    goto LABEL_6;
  }
  v33 = v32[2];
  v485 = v32[1];
  v486 = v33;
  v487 = v32[3];
  v34 = BigString.startIndex.getter();
  if ((BigString.endIndex.getter() ^ (unint64_t)v34) < 0x400)
    goto LABEL_6;
  v35 = (_OWORD *)*v231;
  v36 = *(_OWORD *)(*v231 + 32);
  v482 = *(_OWORD *)(*v231 + 16);
  v483 = v36;
  v484 = v35[3];
  BigString.startIndex.getter();
  BigString.endIndex.getter();
  v475 = v241;
  v476 = v239;
  v477 = v240;
  v478 = v22;
  v205 = v20;
  v206 = v19;
  v479 = v19;
  v480 = v20;
  v481 = v21;
  BigString.unicodeScalars.getter();
  v215 = v31;
  outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup?((uint64_t)v32, v31, v220);
  outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup?((uint64_t)v32, v31, v220);
  swift_retain();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v335);
  outlined release of Locale((uint64_t)v336);
  v375 = v337;
  v376 = v338;
  v377 = v339;
  v378 = v340;
  v37 = v35[2];
  v472 = v35[1];
  v473 = v37;
  v474 = v35[3];
  BigString.unicodeScalars.getter();
  swift_retain();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v341);
  outlined release of Locale((uint64_t)v342);
  swift_release();
  v456 = v343;
  v457 = v344;
  v458 = v345;
  v459 = v346;
  v455 = v35;
  v460 = 0;
  v38 = v32[2];
  v469 = v32[1];
  v470 = v38;
  v207 = v32 + 1;
  v471 = v32[3];
  v39 = BigString.startIndex.getter();
  v41 = v40;
  v43 = v42;
  v45 = v44;
  v46 = BigString.endIndex.getter();
  v461 = v39;
  v462 = v41;
  v463 = v43;
  v464 = v45;
  v465 = v46;
  v466 = v47;
  v467 = v48;
  v468 = v49;
  BigString.unicodeScalars.getter();
  outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup((uint64_t)v32, v215, 0);
  swift_retain();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v347);
  outlined release of Locale((uint64_t)v348);
  outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup?((uint64_t)v32, v215, v220);
  v450 = v349;
  v451 = v350;
  v452 = v351;
  v453 = v352;
  v449 = v32;
  v454 = 0;
  LOBYTE(v39) = specialized Sequence<>.elementsEqual<A>(_:)(&v449);
  outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup?((uint64_t)v32, v215, v220);
  swift_release();
  if ((v39 & 1) == 0)
  {
    v173 = v32[2];
    v446 = *v207;
    v447 = v173;
    v448 = v32[3];
    v174 = BigString.startIndex.getter();
    v176 = v175;
    v178 = v177;
    v180 = v179;
    v181 = BigString.endIndex.getter();
    if (v181 >> 10 < v174 >> 10)
      goto LABEL_185;
    v438 = v174;
    v439 = v176;
    v440 = v178;
    v441 = v180;
    v442 = v181;
    v443 = v182;
    v444 = v183;
    v445 = v184;
    outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup((uint64_t)v32, v215, 0);
    AttributedString.Runs.init(_:in:)((uint64_t)v32, &v270);
    v285 = v280;
    v286 = v281;
    v287 = v282;
    *(_OWORD *)&v283[96] = v276;
    *(_OWORD *)&v283[112] = v277;
    v284 = v279;
    *(_OWORD *)&v283[128] = v278;
    *(_OWORD *)&v283[32] = v272;
    *(_OWORD *)&v283[48] = v273;
    *(_OWORD *)&v283[80] = v275;
    *(_OWORD *)&v283[64] = v274;
    *(_OWORD *)&v283[16] = v271;
    *(_OWORD *)v283 = v270;
    v185 = v32[2];
    v435 = *v207;
    v436 = v185;
    v437 = v32[3];
    v186 = BigString.startIndex.getter();
    v188 = v187;
    v190 = v189;
    v192 = v191;
    v193 = BigString.endIndex.getter();
    if (v193 >> 10 < v186 >> 10)
      goto LABEL_187;
    v427 = v186;
    v428 = v188;
    v429 = v190;
    v430 = v192;
    v431 = v193;
    v432 = v194;
    v433 = v195;
    v434 = v196;
    outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup((uint64_t)v32, v215, 0);
    AttributedString.Runs.init(_:in:)((uint64_t)v32, &v257);
    v290 = v267;
    v291 = v268;
    v292 = v269;
    *(_OWORD *)&v288[96] = v263;
    *(_OWORD *)&v288[112] = v264;
    v289 = v266;
    *(_OWORD *)&v288[128] = v265;
    *(_OWORD *)&v288[32] = v259;
    *(_OWORD *)&v288[48] = v260;
    *(_OWORD *)&v288[80] = v262;
    *(_OWORD *)&v288[64] = v261;
    *(_OWORD *)&v288[16] = v258;
    *(_OWORD *)v288 = v257;
    outlined release of AttributedString.Runs((uint64_t)v288);
    v253 = v285;
    v254 = v286;
    v255 = v287;
    v249 = *(_OWORD *)&v283[96];
    v250 = *(_OWORD *)&v283[112];
    v251 = *(_OWORD *)&v283[128];
    v252 = v284;
    v245 = *(_OWORD *)&v283[32];
    v246 = *(_OWORD *)&v283[48];
    v247 = *(_OWORD *)&v283[64];
    v248 = *(_OWORD *)&v283[80];
    v243 = *(_OWORD *)v283;
    v244 = *(_OWORD *)&v283[16];
    v242[0] = *(_OWORD *)&v288[8];
    v242[1] = *(_OWORD *)&v288[24];
    v242[2] = *(_OWORD *)&v288[40];
    v242[3] = *(_OWORD *)&v288[56];
    AttributedString.Runs.subscript.getter(v242, v256);
    outlined release of AttributedString.Runs((uint64_t)v283);
    v197 = v256[0];
    v198 = v256[1];
    swift_release();
    *(_QWORD *)&v242[0] = v197;
    *((_QWORD *)&v242[0] + 1) = v198;
    *(_QWORD *)&v243 = v241;
    *((_QWORD *)&v243 + 1) = v239;
    v244 = v240;
    *(_QWORD *)&v245 = v22;
    v20 = v205;
    *((_QWORD *)&v245 + 1) = v19;
    *(_QWORD *)&v246 = v205;
    v21 = v209;
    *((_QWORD *)&v246 + 1) = v209;
    closure #1 in String.LocalizationValue.restoreAttributedStringArguments(_:in:)((uint64_t *)v242, v231, (uint64_t *)&v243, v215);
    outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup?((uint64_t)v32, v215, v220);
    outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup?((uint64_t)v32, v215, v220);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  v50 = v32[2];
  v424 = *v207;
  v425 = v50;
  v426 = v32[3];
  v51 = BigString.startIndex.getter();
  v53 = v52;
  v55 = v54;
  v57 = v56;
  v58 = BigString.endIndex.getter();
  if (v58 >> 10 < v51 >> 10)
    goto LABEL_186;
  v416 = v51;
  v417 = v53;
  v418 = v55;
  v419 = v57;
  v420 = v58;
  v421 = v59;
  v422 = v60;
  v423 = v61;
  outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup((uint64_t)v32, v215, 0);
  AttributedString.Runs.init(_:in:)((uint64_t)v32, v283);
  v290 = v285;
  v291 = v286;
  v292 = v287;
  *(_OWORD *)&v288[96] = *(_OWORD *)&v283[96];
  *(_OWORD *)&v288[112] = *(_OWORD *)&v283[112];
  v289 = v284;
  *(_OWORD *)&v288[128] = *(_OWORD *)&v283[128];
  *(_OWORD *)&v288[32] = *(_OWORD *)&v283[32];
  *(_OWORD *)&v288[48] = *(_OWORD *)&v283[48];
  *(_OWORD *)&v288[80] = *(_OWORD *)&v283[80];
  *(_OWORD *)&v288[64] = *(_OWORD *)&v283[64];
  *(_OWORD *)&v288[16] = *(_OWORD *)&v283[16];
  *(_OWORD *)v288 = *(_OWORD *)v283;
  v62 = *(_QWORD *)&v283[8];
  v63 = *(_QWORD *)&v283[72];
  if (*(_QWORD *)&v283[8] == *(_QWORD *)&v283[72])
  {
    outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup?((uint64_t)v32, v215, v220);
    outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup?((uint64_t)v32, v215, v220);
    outlined release of AttributedString.Runs((uint64_t)v288);
    v20 = v205;
    v21 = v209;
    goto LABEL_6;
  }
  v228 = *(_QWORD *)&v288[40];
  v64 = *(_QWORD *)&v288[32];
  v222 = *(_QWORD *)&v288[48];
  v223 = *(_QWORD *)&v288[24];
  v221 = *(_QWORD *)&v288[56];
  v238 = *(_QWORD *)&v288[64];
  v204 = *(_QWORD *)&v288[136];
  v65 = *(_QWORD *)&v288[16];
  v201 = v17;
  v202 = *((_QWORD *)&v290 + 1) >> 11;
  v236 = *(_QWORD **)v288;
  v212 = (__int128 *)(*(_QWORD *)v288 + 16);
  v203 = *(_QWORD *)&v288[136] >> 10;
  v199 = *(_QWORD *)&v283[72];
  v200 = v22;
  while (2)
  {
    if (v62 >= v63)
      goto LABEL_159;
    v285 = v290;
    v286 = v291;
    v287 = v292;
    *(_OWORD *)&v283[96] = *(_OWORD *)&v288[96];
    *(_OWORD *)&v283[112] = *(_OWORD *)&v288[112];
    v284 = v289;
    *(_OWORD *)&v283[128] = *(_OWORD *)&v288[128];
    *(_OWORD *)&v283[32] = *(_OWORD *)&v288[32];
    *(_OWORD *)&v283[48] = *(_OWORD *)&v288[48];
    *(_OWORD *)&v283[80] = *(_OWORD *)&v288[80];
    *(_OWORD *)&v283[64] = *(_OWORD *)&v288[64];
    *(_OWORD *)&v283[16] = *(_OWORD *)&v288[16];
    *(_OWORD *)v283 = *(_OWORD *)v288;
    *(_QWORD *)&v257 = v62;
    v66 = v65;
    *((_QWORD *)&v257 + 1) = v65;
    *(_QWORD *)&v258 = v223;
    *((_QWORD *)&v258 + 1) = v64;
    *(_QWORD *)&v259 = v228;
    *((_QWORD *)&v259 + 1) = v222;
    *(_QWORD *)&v260 = v221;
    *((_QWORD *)&v260 + 1) = v238;
    AttributedString.Runs._resolve(_:)((uint64_t *)&v257, (uint64_t *)&v270);
    if ((_QWORD)v270 != v236[11])
      goto LABEL_160;
    v67 = *((_QWORD *)&v270 + 1);
    v68 = *((_QWORD *)&v272 + 1);
    if ((_QWORD)v271)
    {
      v69 = (_QWORD *)(v271 + 24 * ((*((_QWORD *)&v270 + 1) >> ((4 * *(_BYTE *)(v271 + 18) + 8) & 0x3C)) & 0xFLL));
      v70 = v69[3];
      v71 = v69[4];
      v72 = v69[5];
      outlined retain of AttributedString.Runs((uint64_t)v288);
      v211 = v71;
      swift_bridgeObjectRetain();
      v210 = v72;
      swift_bridgeObjectRetain();
    }
    else
    {
      v73 = v236[8];
      outlined retain of AttributedString.Runs((uint64_t)v288);
      swift_unknownObjectRetain();
      v70 = specialized Rope._Node.subscript.getter(v67, v73);
      v210 = v75;
      v211 = v74;
      swift_unknownObjectRelease();
    }
    if (v203 >= v68 >> 10)
      v76 = v204;
    else
      v76 = v68;
    if (__OFADD__(v70, v68 >> 11))
      goto LABEL_161;
    if (v202 >= (uint64_t)(v70 + (v68 >> 11)))
      v77 = v70 + (v68 >> 11);
    else
      v77 = v202;
    v78 = v212[1];
    v413 = *v212;
    v414 = v78;
    v415 = v212[2];
    BigString.utf8.getter();
    if (__OFSUB__(v77, v76 >> 11))
      goto LABEL_162;
    v79 = BigString.UTF8View.index(_:offsetBy:)();
    outlined release of Locale((uint64_t)v353);
    v80 = v79 >> 10;
    v81 = v76 >> 10;
    if (v79 >> 10 < v76 >> 10)
      goto LABEL_163;
    v82 = v236[8];
    v83 = v236[9];
    v232 = v236[10];
    v234 = v236[11];
    if (v64 != 1 && v66 == v236[11])
    {
      if (v238 == 2)
      {
        v84 = v223;
        if (v82)
        {
          outlined retain of AttributedString.Runs((uint64_t)v288);
          swift_unknownObjectRetain();
          v85 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v66, v223, v64, v82, v83, v232);
        }
        else
        {
          swift_retain();
          v85 = 0;
        }
      }
      else
      {
        v85 = v228 >> 11;
        outlined retain of AttributedString.Runs((uint64_t)v288);
        swift_unknownObjectRetain();
        v84 = v223;
      }
LABEL_121:
      *(_QWORD *)v283 = v66;
      *(_QWORD *)&v283[8] = v84;
      *(_QWORD *)&v283[16] = v64;
      v92 = __OFADD__(v62, 1);
      v106 = v62 + 1;
      if (v92)
        goto LABEL_164;
      if (v66 != v234)
        goto LABEL_165;
      v230 = v106;
      if (v64)
      {
        v107 = v83;
        v108 = *(_QWORD *)(v64 + 24 * ((v84 >> ((4 * *(_BYTE *)(v64 + 18) + 8) & 0x3C)) & 0xF) + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        swift_unknownObjectRetain();
        v107 = v83;
        v108 = specialized Rope._Node.subscript.getter(v84, v82);
        swift_unknownObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v92 = __OFADD__(v85, v108);
      v109 = v85 + v108;
      if (v92)
        goto LABEL_166;
      swift_unknownObjectRetain();
      specialized Rope.formIndex(after:)(v283, v82, v107, v232, v234);
      swift_unknownObjectRelease_n();
      v223 = *(_QWORD *)&v283[8];
      v235 = *(_QWORD *)v283;
      v64 = *(_QWORD *)&v283[16];
      if (v238 == 2)
      {
        v110 = v212[1];
        v410 = *v212;
        v411 = v110;
        v412 = v212[2];
        v111 = &v355;
        BigString.utf8.getter();
        BigString.startIndex.getter();
      }
      else
      {
        v112 = v212[1];
        v407 = *v212;
        v408 = v112;
        v409 = v212[2];
        BigString.utf8.getter();
        if (__OFSUB__(v109, v228 >> 11))
          goto LABEL_177;
        v111 = &v354;
      }
      v228 = BigString.UTF8View.index(_:offsetBy:)();
      v221 = v114;
      v222 = v113;
      v238 = v115;
      outlined release of Locale((uint64_t)v111);
      outlined release of AttributedString.Runs((uint64_t)v288);
      v116 = v207[1];
      v404 = *v207;
      v405 = v116;
      v406 = v207[2];
      v117 = BigString.startIndex.getter();
      v119 = v118;
      v121 = v120;
      v123 = v122;
      v124 = BigString.endIndex.getter();
      v396 = v117;
      v397 = v119;
      v398 = v121;
      v399 = v123;
      v400 = v124;
      v401 = v125;
      v402 = v126;
      v403 = v127;
      BigString.unicodeScalars.getter();
      outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup?(v213, v215, v220);
      swift_retain();
      BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)v356);
      outlined release of Locale((uint64_t)v357);
      outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup?(v213, v215, v220);
      if (v359 >> 10 < v80 || v80 < v358 >> 10 || v81 < v358 >> 10 || v359 >> 10 < v81)
        goto LABEL_167;
      v128 = v207[1];
      v393 = *v207;
      v394 = v128;
      v395 = v207[2];
      BigString.unicodeScalars.getter();
      BigString.UnicodeScalarView.distance(from:to:)();
      outlined release of Locale((uint64_t)v360);
      outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup?(v213, v215, v220);
      v129 = (_OWORD *)*v231;
      v130 = *(_OWORD *)(*v231 + 32);
      v390 = *(_OWORD *)(*v231 + 16);
      v391 = v130;
      v392 = v129[3];
      v131 = BigString.startIndex.getter();
      v133 = v132;
      v135 = v134;
      v137 = v136;
      v138 = BigString.endIndex.getter();
      v382 = v131;
      v383 = v133;
      v384 = v135;
      v385 = v137;
      v386 = v138;
      v387 = v139;
      v388 = v140;
      v389 = v141;
      BigString.unicodeScalars.getter();
      swift_retain_n();
      BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)v361);
      outlined release of Locale((uint64_t)v362);
      swift_release();
      v142 = v241 >> 10;
      v143 = v363 >> 10;
      if (v241 >> 10 < v363 >> 10)
        goto LABEL_168;
      v144 = v364 >> 10;
      if (v364 >> 10 < v142)
        goto LABEL_168;
      v145 = v129[2];
      v379 = v129[1];
      v380 = v145;
      v381 = v129[3];
      BigString.unicodeScalars.getter();
      v146 = BigString.UnicodeScalarView.index(_:offsetBy:)();
      v148 = v147;
      v150 = v149;
      v152 = v151;
      outlined release of Locale((uint64_t)v365);
      swift_release();
      v153 = v146 >> 10;
      if (v146 >> 10 < v143 || v144 < v153)
        goto LABEL_169;
      if (v153 < v142)
        goto LABEL_170;
      *(_QWORD *)&v270 = v211;
      *((_QWORD *)&v270 + 1) = v210;
      *(_QWORD *)v283 = v241;
      *(_QWORD *)&v283[8] = v239;
      *(_OWORD *)&v283[16] = v240;
      *(_QWORD *)&v283[32] = v146;
      *(_QWORD *)&v283[40] = v148;
      *(_QWORD *)&v283[48] = v150;
      *(_QWORD *)&v283[56] = v152;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      closure #1 in String.LocalizationValue.restoreAttributedStringArguments(_:in:)((uint64_t *)&v270, v231, (uint64_t *)v283, v215);
      swift_release();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      *((_QWORD *)&v240 + 1) = v152;
      v241 = v146;
      v239 = v148;
      *(_QWORD *)&v240 = v150;
      v62 = v230;
      v63 = v199;
      v22 = v200;
      v17 = v201;
      v20 = v205;
      v19 = v206;
      v21 = v209;
      v65 = v235;
      if (v230 == v199)
      {
        outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup?(v213, v215, v220);
        outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup?(v213, v215, v220);
        outlined release of AttributedString.Runs((uint64_t)v288);
        goto LABEL_6;
      }
      continue;
    }
    break;
  }
  if (v82)
    v86 = v236[9];
  else
    v86 = 0;
  if (v62 < 0 || v86 < v62)
    goto LABEL_176;
  if (!v82 || v62 >= v83 || !*(_WORD *)(v82 + 16))
  {
    swift_unknownObjectRetain_n();
    outlined retain of AttributedString.Runs((uint64_t)v288);
    v99 = swift_unknownObjectRetain();
    v84 = specialized Rope._endPath.getter(v99);
    swift_unknownObjectRelease();
    v64 = 0;
    if (!v82)
    {
      v85 = 0;
      v66 = v234;
      goto LABEL_121;
    }
    goto LABEL_82;
  }
  v87 = *(unsigned __int8 *)(v82 + 18);
  v229 = v62;
  if (*(_BYTE *)(v82 + 18))
  {
    swift_unknownObjectRetain_n();
    outlined retain of AttributedString.Runs((uint64_t)v288);
    swift_unknownObjectRetain();
    v88 = v82;
    while (1)
    {
      v90 = *(unsigned __int16 *)(v88 + 16);
      if (!*(_WORD *)(v88 + 16))
        goto LABEL_53;
      v91 = *(_QWORD *)(v88 + 32);
      v92 = __OFSUB__(v62, v91);
      v93 = v62 - v91;
      if (v92)
        goto LABEL_154;
      if (__OFADD__(v93, 1))
        goto LABEL_155;
      if (v93 + 1 <= 0)
      {
        v90 = 0;
      }
      else
      {
        if ((_DWORD)v90 == 1)
          goto LABEL_52;
        v94 = *(_QWORD *)(v88 + 56);
        v62 = v93 - v94;
        if (__OFSUB__(v93, v94))
          goto LABEL_174;
        if (__OFADD__(v62, 1))
          goto LABEL_175;
        if (v62 + 1 < 1)
        {
          v90 = 1;
          v62 = v93;
        }
        else
        {
          if ((_DWORD)v90 == 2)
            goto LABEL_53;
          v95 = *(_QWORD *)(v88 + 80);
          v92 = __OFSUB__(v62, v95);
          v93 = v62 - v95;
          if (v92)
            goto LABEL_179;
          if (__OFADD__(v93, 1))
            goto LABEL_180;
          if (v93 + 1 >= 1)
          {
            if ((_DWORD)v90 != 3)
            {
              v96 = 3;
              if (v90 > 3)
                v96 = *(unsigned __int16 *)(v88 + 16);
              v97 = (_QWORD *)(v88 + 104);
              v98 = 3;
              while (v96 != v98)
              {
                v62 = v93 - *v97;
                if (__OFSUB__(v93, *v97))
                  goto LABEL_172;
                if (__OFADD__(v62, 1))
                  goto LABEL_173;
                if (v62 + 1 < 1)
                {
                  v90 = v98;
                  v62 = v93;
                  goto LABEL_54;
                }
                ++v98;
                v97 += 3;
                v93 = v62;
                if (v90 == v98)
                  goto LABEL_53;
              }
LABEL_171:
              __break(1u);
LABEL_172:
              __break(1u);
LABEL_173:
              __break(1u);
LABEL_174:
              __break(1u);
LABEL_175:
              __break(1u);
LABEL_176:
              __break(1u);
LABEL_177:
              __break(1u);
LABEL_178:
              __break(1u);
LABEL_179:
              __break(1u);
LABEL_180:
              __break(1u);
LABEL_181:
              __break(1u);
LABEL_182:
              __break(1u);
LABEL_183:
              __break(1u);
              goto LABEL_184;
            }
LABEL_52:
            v62 = v93;
LABEL_53:
            if (v62)
              goto LABEL_153;
            goto LABEL_54;
          }
          v90 = 2;
        }
      }
LABEL_54:
      v89 = (4 * *(_BYTE *)(v88 + 18) + 8) & 0x3C;
      v87 = ((-15 << v89) - 1) & v87 | (v90 << v89);
      v64 = *(_QWORD *)(v88 + 24 + 24 * v90);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      v88 = v64;
      if (!*(_BYTE *)(v64 + 18))
        goto LABEL_86;
    }
  }
  swift_unknownObjectRetain_n();
  outlined retain of AttributedString.Runs((uint64_t)v288);
  swift_unknownObjectRetain();
  v64 = v82;
LABEL_86:
  v100 = *(unsigned __int16 *)(v64 + 16);
  if (!*(_WORD *)(v64 + 16))
    goto LABEL_100;
  v101 = v62 - 1;
  if (__OFSUB__(v62, 1))
    goto LABEL_183;
  if (!__OFADD__(v101, 1))
  {
    if (v62 <= 0)
    {
      v100 = 0;
    }
    else
    {
      if ((_DWORD)v100 == 1)
        goto LABEL_99;
      v92 = __OFSUB__(v101, 1);
      v101 = v62 - 2;
      if (v92)
        goto LABEL_190;
      if (__OFADD__(v101, 1))
        goto LABEL_191;
      if (v62 - 1 < 1)
      {
        v100 = 1;
      }
      else
      {
        if ((_DWORD)v100 == 2)
          goto LABEL_99;
        v92 = __OFSUB__(v101, 1);
        v101 = v62 - 3;
        if (v92)
          goto LABEL_192;
        if (__OFADD__(v101, 1))
          goto LABEL_193;
        if (v62 - 2 < 1)
        {
          v100 = 2;
        }
        else
        {
          if ((_DWORD)v100 != 3)
          {
            v102 = 0;
            v103 = 3;
            if (v100 > 3)
              v103 = *(unsigned __int16 *)(v64 + 16);
            v104 = v103 - 3;
            if (v101 >= v100 - 4)
              v105 = v100 - 4;
            else
              v105 = v62 - 3;
            if (v105 >= v62 + 0x7FFFFFFFFFFFFFFDLL)
              v105 = v62 + 0x7FFFFFFFFFFFFFFDLL;
            while (v104 > v105)
            {
              if (v62 + 0x7FFFFFFFFFFFFFFDLL == v102)
                goto LABEL_189;
              if (v101 == v102)
              {
                v100 = v62;
                goto LABEL_119;
              }
              if (v100 - 3 == ++v102)
              {
                if (v101 == v102)
                  goto LABEL_119;
                goto LABEL_182;
              }
            }
            goto LABEL_188;
          }
LABEL_99:
          v62 = v101;
LABEL_100:
          if (v62)
            goto LABEL_182;
        }
      }
    }
LABEL_119:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v84 = v87 & 0xFFFFFFFFFFFFF0FFLL | (v100 << 8);
    v62 = v229;
LABEL_82:
    swift_unknownObjectRetain();
    v66 = v234;
    v85 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v234, v84, v64, v82, v83, v232);
    swift_unknownObjectRelease_n();
    goto LABEL_121;
  }
LABEL_184:
  __break(1u);
LABEL_185:
  __break(1u);
LABEL_186:
  __break(1u);
LABEL_187:
  __break(1u);
LABEL_188:
  __break(1u);
LABEL_189:
  __break(1u);
LABEL_190:
  __break(1u);
LABEL_191:
  __break(1u);
LABEL_192:
  __break(1u);
LABEL_193:
  __break(1u);
LABEL_194:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Range<>.init<A>(_:in:)(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE v14[72];
  unint64_t v15[4];
  uint64_t v16;
  char v17;
  _BYTE v18[40];
  _BYTE v19[40];
  unint64_t v20[4];
  char v21;
  _QWORD v22[4];
  char v23;

  outlined init with take of LocalePreferences?(a1 + 32, (uint64_t)v19, &demangling cache variable for type metadata for AttributedString.MarkdownSourcePosition.Offsets?);
  outlined init with take of LocalePreferences?((uint64_t)v19, (uint64_t)v20, &demangling cache variable for type metadata for AttributedString.MarkdownSourcePosition.Offsets?);
  if ((v21 & 1) == 0)
  {
    v6 = v20[0];
    outlined init with take of LocalePreferences?(a1 + 72, (uint64_t)v18, &demangling cache variable for type metadata for AttributedString.MarkdownSourcePosition.Offsets?);
    result = outlined init with take of LocalePreferences?((uint64_t)v18, (uint64_t)v22, &demangling cache variable for type metadata for AttributedString.MarkdownSourcePosition.Offsets?);
    if ((v23 & 1) == 0)
      goto LABEL_17;
  }
  specialized AttributedString.MarkdownSourcePosition.calculateOffsets<A>(within:)((uint64_t)v14);
  outlined init with take of LocalePreferences?((uint64_t)v14, (uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for (start: AttributedString.MarkdownSourcePosition.Offsets, end: AttributedString.MarkdownSourcePosition.Offsets)?);
  if ((v17 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  v6 = v15[0];
  v8 = v16;
  if ((a3 & 0x1000000000000000) != 0)
  {
    v13 = MEMORY[0x186DA485C](15, v15[0], a2, a3);
    if (!__OFADD__(v8, 1))
    {
      v6 = v13;
      a2 = MEMORY[0x186DA485C](15, v8 + 1, a2, a3);
      result = swift_bridgeObjectRelease();
      goto LABEL_15;
    }
    goto LABEL_34;
  }
  if ((v15[0] & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if ((a3 & 0x2000000000000000) != 0)
    v9 = HIBYTE(a3) & 0xF;
  else
    v9 = a2 & 0xFFFFFFFFFFFFLL;
  if (v9 < v15[0])
    goto LABEL_32;
  a2 = v16 + 1;
  if (__OFADD__(v16, 1))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  result = swift_bridgeObjectRelease();
  if ((a2 & 0x8000000000000000) != 0)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (v9 < a2)
  {
LABEL_35:
    __break(1u);
LABEL_36:
    result = MEMORY[0x186DA485C](15, v6, a2, a3);
    if (!__OFADD__(v8, 1))
    {
      v6 = result;
      v12 = MEMORY[0x186DA485C](15, v8 + 1, a2, a3);
      result = swift_bridgeObjectRelease();
LABEL_27:
      if (v12 >> 14 >= v6 >> 14)
        return v6;
      goto LABEL_42;
    }
    goto LABEL_43;
  }
  v6 = (v6 << 16) | 4;
  a2 = (a2 << 16) | 4;
LABEL_15:
  if (a2 >> 14 >= v6 >> 14)
    return v6;
  __break(1u);
LABEL_17:
  v8 = v22[0];
  if ((a3 & 0x1000000000000000) != 0)
    goto LABEL_36;
  if ((v6 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if ((a3 & 0x2000000000000000) != 0)
    v10 = HIBYTE(a3) & 0xF;
  else
    v10 = a2 & 0xFFFFFFFFFFFFLL;
  if (v10 < v6)
    goto LABEL_39;
  v11 = v22[0] + 1;
  if (!__OFADD__(v22[0], 1))
  {
    result = swift_bridgeObjectRelease();
    if ((v11 & 0x8000000000000000) == 0)
    {
      if (v10 >= v11)
      {
        v6 = (v6 << 16) | 4;
        v12 = (v11 << 16) | 4;
        goto LABEL_27;
      }
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
LABEL_43:
  __break(1u);
  return result;
}

uint64_t closure #1 in String.LocalizationValue.restoreAttributedStringArguments(_:in:)(uint64_t *a1, uint64_t *a2, uint64_t *a3, char a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t *v22;
  os_unfair_lock_s *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  _QWORD *v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t *v33;
  os_unfair_lock_s *v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t result;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  char v55[16];
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62[6];
  _OWORD v63[3];
  _BYTE v64[48];
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;

  v5 = a1[1];
  v6 = *a3;
  v7 = a3[1];
  v9 = a3[2];
  v8 = a3[3];
  v10 = a3[4];
  v11 = a3[5];
  v12 = a3[6];
  v13 = a3[7];
  if ((a4 & 1) != 0)
  {
    v52 = a1[1];
    v54 = a3[5];
    v51 = *a1;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v28 = (_QWORD *)*a2;
      v29 = *(_OWORD *)(*a2 + 16);
      v30 = *(_OWORD *)(*a2 + 48);
      v80 = *(_OWORD *)(*a2 + 32);
      v81 = v30;
      v79 = v29;
      v31 = v28[8];
      v50 = v28[9];
      v48 = v28[10];
      v46 = v28[11];
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)&v79);
      swift_unknownObjectRetain();
      *a2 = AttributedString.Guts.init(string:runs:)(&v79, v31, v50, v48, v46);
      swift_release();
    }
    v11 = *a2;
    v32 = *(_OWORD *)(*a2 + 32);
    v76 = *(_OWORD *)(*a2 + 16);
    v77 = v32;
    v78 = *(_OWORD *)(v11 + 48);
    BigString.startIndex.getter();
    BigString.endIndex.getter();
    v56 = v6;
    *(_QWORD *)&v57 = v7;
    *((_QWORD *)&v57 + 1) = v9;
    *(_QWORD *)&v58 = v8;
    *((_QWORD *)&v58 + 1) = v10;
    *(_QWORD *)&v59 = v54;
    *((_QWORD *)&v59 + 1) = v12;
    *(_QWORD *)&v60 = v13;
    BigString.unicodeScalars.getter();
    swift_retain_n();
    BigString.UnicodeScalarView.subscript.getter();
    swift_release();
    outlined release of Locale((uint64_t)v62);
    outlined release of Locale((uint64_t)v64);
    v53 = v65;
    v47 = v67;
    v49 = v66;
    v45 = v68;
    if (one-time initialization token for currentIdentity == -1)
      goto LABEL_12;
  }
  else
  {
    *(_QWORD *)&v53 = a3[6];
    v62[0] = *a1;
    v62[1] = v5;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v14 = (_QWORD *)*a2;
      v15 = *(_OWORD *)(*a2 + 16);
      v16 = *(_OWORD *)(*a2 + 48);
      v80 = *(_OWORD *)(*a2 + 32);
      v81 = v16;
      v79 = v15;
      v17 = v14[8];
      v51 = v14[9];
      v52 = v13;
      v18 = v14[11];
      *(_QWORD *)&v49 = v14[10];
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)&v79);
      swift_unknownObjectRetain();
      v19 = v18;
      v13 = v52;
      *a2 = AttributedString.Guts.init(string:runs:)(&v79, v17, v51, v49, v19);
      swift_release();
    }
    v20 = *a2;
    v21 = *(_OWORD *)(*a2 + 32);
    v76 = *(_OWORD *)(*a2 + 16);
    v77 = v21;
    v78 = *(_OWORD *)(v20 + 48);
    BigString.startIndex.getter();
    BigString.endIndex.getter();
    *(_QWORD *)&v72 = v6;
    *((_QWORD *)&v72 + 1) = v7;
    *(_QWORD *)&v73 = v9;
    *((_QWORD *)&v73 + 1) = v8;
    *(_QWORD *)&v74 = v10;
    *((_QWORD *)&v74 + 1) = v11;
    *(_QWORD *)&v75 = v53;
    *((_QWORD *)&v75 + 1) = v13;
    BigString.unicodeScalars.getter();
    swift_retain_n();
    BigString.UnicodeScalarView.subscript.getter();
    swift_release();
    outlined release of Locale((uint64_t)v63);
    outlined release of Locale((uint64_t)v64);
    v57 = v65;
    v58 = v66;
    v59 = v67;
    v60 = v68;
    v56 = v20;
    if (one-time initialization token for currentIdentity != -1)
      swift_once();
    v22 = (uint64_t *)(static AttributedString.currentIdentity + 16);
    v23 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
    swift_retain();
    os_unfair_lock_lock(v23);
    closure #1 in static AttributedString._nextModifyIdentity.getter(v22, (uint64_t *)&v69);
    os_unfair_lock_unlock(v23);
    swift_release();
    v24 = v69;
    v61 = v69;
    BigString.init()();
    *(_QWORD *)v55 = 0;
    MEMORY[0x186DA9E90](v55, 8);
    v25 = *(_QWORD *)v55;
    type metadata accessor for AttributedString.Guts();
    v26 = swift_allocObject();
    if ((BigString.isEmpty.getter() & 1) != 0)
    {
      v27 = v70;
      *(_OWORD *)(v26 + 16) = v69;
      *(_OWORD *)(v26 + 32) = v27;
      *(_OWORD *)(v26 + 48) = v71;
      *(_QWORD *)(v26 + 64) = 0;
      *(_QWORD *)(v26 + 72) = 0;
      *(_QWORD *)(v26 + 80) = 0;
      *(_QWORD *)(v26 + 88) = v25;
      *a2 = v26;
      swift_release();
      v55[0] = 0;
      AttributedSubstring.mergeAttributes(_:mergePolicy:)(v62, v55);
      if (v61 == v24)
      {
        *a2 = v56;
        return swift_release();
      }
      goto LABEL_20;
    }
    __break(1u);
  }
  swift_once();
LABEL_12:
  v33 = (uint64_t *)(static AttributedString.currentIdentity + 16);
  v34 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
  swift_retain();
  os_unfair_lock_lock(v34);
  closure #1 in static AttributedString._nextModifyIdentity.getter(v33, (uint64_t *)&v72);
  os_unfair_lock_unlock(v34);
  swift_release();
  BigString.init()();
  *(_QWORD *)&v72 = 0;
  MEMORY[0x186DA9E90](&v72, 8);
  v35 = v72;
  type metadata accessor for AttributedString.Guts();
  v36 = swift_allocObject();
  if ((BigString.isEmpty.getter() & 1) != 0)
  {
    v37 = v63[1];
    *(_OWORD *)(v36 + 16) = v63[0];
    *(_OWORD *)(v36 + 32) = v37;
    *(_OWORD *)(v36 + 48) = v63[2];
    *(_QWORD *)(v36 + 64) = 0;
    *(_QWORD *)(v36 + 72) = 0;
    *(_QWORD *)(v36 + 80) = 0;
    *(_QWORD *)(v36 + 88) = v35;
    *a2 = v36;
    swift_release();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v38 = *(_OWORD *)(v11 + 32);
      v69 = *(_OWORD *)(v11 + 16);
      v70 = v38;
      v71 = *(_OWORD *)(v11 + 48);
      v39 = *(_QWORD *)(v11 + 64);
      v40 = *(_QWORD *)(v11 + 72);
      v41 = *(_QWORD *)(v11 + 80);
      v42 = *(_QWORD *)(v11 + 88);
      swift_allocObject();
      outlined retain of Locale((uint64_t)&v69);
      swift_unknownObjectRetain();
      v43 = AttributedString.Guts.init(string:runs:)(&v69, v39, v40, v41, v42);
      swift_release();
      v11 = v43;
    }
    v72 = v53;
    v73 = v49;
    v74 = v47;
    v75 = v45;
    AttributedString.Guts.setAttributes(_:in:)(v51, v52);
    *a2 = v11;
    return swift_release();
  }
  __break(1u);
LABEL_20:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance String.LocalizationValue.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized String.LocalizationValue.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.CodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.CodingKeys and conformance String.LocalizationValue.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.CodingKeys()
{
  lazy protocol witness table accessor for type String.LocalizationValue.CodingKeys and conformance String.LocalizationValue.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void _assertValidDecodedFormat(_:validFormatSpecifiers:codingPath:)()
{
  String._bridgeToObjectiveCImpl()();
  String._bridgeToObjectiveCImpl()();
  _CFStringValidateFormat();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
}

uint64_t Int8._arg.getter(char a1)
{
  return a1;
}

void protocol witness for _FormatSpecifiable._arg.getter in conformance Int8(_DWORD *a1@<X8>)
{
  char *v1;

  *a1 = *v1;
}

uint64_t Int16._arg.getter(__int16 a1)
{
  return a1;
}

void protocol witness for _FormatSpecifiable._arg.getter in conformance Int16(_DWORD *a1@<X8>)
{
  __int16 *v1;

  *a1 = *v1;
}

uint64_t UInt8._arg.getter(uint64_t result)
{
  return result;
}

void protocol witness for _FormatSpecifiable._arg.getter in conformance UInt8(_DWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

uint64_t UInt16._arg.getter(uint64_t result)
{
  return (unsigned __int16)result;
}

void protocol witness for _FormatSpecifiable._arg.getter in conformance UInt16(_DWORD *a1@<X8>)
{
  unsigned __int16 *v1;

  *a1 = *v1;
}

float protocol witness for _FormatSpecifiable._arg.getter in conformance Float@<S0>(_DWORD *a1@<X8>)
{
  float *v1;
  float result;

  result = *v1;
  *a1 = *(_DWORD *)v1;
  return result;
}

uint64_t LocalizedStringResource.key.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t LocalizedStringResource.defaultValue.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1[3];
  v3 = v1[4];
  *a1 = v1[2];
  a1[1] = v2;
  a1[2] = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t LocalizedStringResource.table.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t LocalizedStringResource.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_OWORD *)(v1 + 56);
  return swift_unknownObjectRetain();
}

__n128 LocalizedStringResource.locale.setter(__n128 *a1)
{
  uint64_t v1;
  __n128 result;

  swift_unknownObjectRelease();
  result = *a1;
  *(__n128 *)(v1 + 56) = *a1;
  return result;
}

uint64_t (*LocalizedStringResource.locale.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t LocalizedStringResource.bundle.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;

  v3 = (void *)v1[9];
  v2 = v1[10];
  v4 = v1[11];
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = 1;
  swift_retain();
  v5 = v3;
  return swift_retain();
}

void LocalizedStringResource.init(key:defaultValue:table:locale:bundleURL:sandboxExtensionToken:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, __int128 *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  Swift::String v21;
  unsigned __int8 v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v30;

  v15 = a11;
  v30 = *a7;
  v16 = *(void **)a8;
  v17 = *(_QWORD *)(a8 + 8);
  v18 = *(_QWORD *)(a8 + 16);
  swift_retain();
  v19 = v16;
  swift_retain();
  if (!_foundation_swift_url_feature_enabled())
  {
    v22 = objc_msgSend(v19, sel_isFileURL);
    swift_release();
    swift_release();

    if ((v22 & 1) != 0)
      goto LABEL_9;
LABEL_14:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  URL.scheme.getter();
  if (!v20)
  {
    swift_release();
    swift_release();

    goto LABEL_14;
  }
  v21 = String.lowercased()();
  swift_bridgeObjectRelease();
  if (v21._countAndFlagsBits != 1701603686 || v21._object != (void *)0xE400000000000000)
  {
    v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    v15 = a11;
    if ((v23 & 1) != 0)
      goto LABEL_9;
    goto LABEL_14;
  }
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  v15 = a11;
LABEL_9:
  if (a4)
  {
    v24 = a5;
    v26 = a3;
    v25 = a1;
  }
  else
  {
    swift_bridgeObjectRetain();
    v25 = a1;
    v26 = a1;
    a4 = a2;
    v24 = a5;
  }
  v27 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)a9 = v25;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = v27;
  *(_QWORD *)(a9 + 24) = v26;
  *(_QWORD *)(a9 + 32) = a4;
  *(_QWORD *)(a9 + 40) = v24;
  *(_QWORD *)(a9 + 48) = a6;
  *(_OWORD *)(a9 + 56) = v30;
  *(_QWORD *)(a9 + 72) = v19;
  *(_QWORD *)(a9 + 80) = v17;
  *(_QWORD *)(a9 + 88) = v18;
  *(_QWORD *)(a9 + 96) = a10;
  *(_QWORD *)(a9 + 104) = v15;
}

void LocalizedStringResource.init(_:defaultValue:table:locale:bundle:comment:)(uint64_t *a1@<X3>, uint64_t a2@<X4>, uint64_t a3@<X5>, __int128 *a4@<X6>, uint64_t a5@<X7>, uint64_t a6@<X8>)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  Swift::String v21;
  unsigned __int8 v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  _QWORD v28[4];

  v25 = a1[1];
  v26 = *a1;
  v24 = a1[2];
  v27 = *a4;
  v9 = *(void **)a5;
  v10 = *(_QWORD *)(a5 + 8);
  v11 = *(_QWORD *)(a5 + 16);
  v12 = *(_BYTE *)(a5 + 24);
  v13 = StaticString.description.getter();
  v15 = v14;
  LocalizedStringResource.BundleDescription.resolvedURL.getter(v28);
  outlined consume of LocalizedStringResource.BundleDescription(v9, v10, v11, v12);
  v16 = (void *)v28[0];
  v17 = v28[1];
  v18 = v28[2];
  swift_retain();
  v19 = v16;
  swift_retain();
  if (_foundation_swift_url_feature_enabled())
  {
    URL.scheme.getter();
    if (v20)
    {
      v21 = String.lowercased()();
      swift_bridgeObjectRelease();
      if (v21._countAndFlagsBits == 1701603686 && v21._object == (void *)0xE400000000000000)
      {
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
LABEL_9:
        *(_QWORD *)a6 = v13;
        *(_QWORD *)(a6 + 8) = v15;
        *(_QWORD *)(a6 + 16) = v26;
        *(_QWORD *)(a6 + 24) = v25;
        *(_QWORD *)(a6 + 32) = v24;
        *(_QWORD *)(a6 + 40) = a2;
        *(_QWORD *)(a6 + 48) = a3;
        *(_OWORD *)(a6 + 56) = v27;
        *(_QWORD *)(a6 + 72) = v19;
        *(_QWORD *)(a6 + 80) = v17;
        *(_QWORD *)(a6 + 96) = 0;
        *(_QWORD *)(a6 + 104) = 0;
        *(_QWORD *)(a6 + 88) = v18;
        return;
      }
      v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      if ((v23 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      swift_release();
      swift_release();

    }
  }
  else
  {
    v22 = objc_msgSend(v19, sel_isFileURL);
    swift_release();
    swift_release();

    if ((v22 & 1) != 0)
      goto LABEL_9;
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

__n128 LocalizedStringResource.init(stringInterpolation:)@<Q0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;

  v3 = *((_QWORD *)a1 + 2);
  v16 = *a1;
  v17 = v3;
  if (one-time initialization token for cache != -1)
    swift_once();
  v18 = static LocaleCache.cache;
  *(_QWORD *)&v15 = LocaleCache.current.getter();
  *((_QWORD *)&v15 + 1) = v4;
  memset(v13, 0, sizeof(v13));
  v14 = 2;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)((uint64_t *)&v16, 0, 0, &v15, (uint64_t)v13, (uint64_t)&v18);
  v5 = v20;
  v6 = v21;
  v7 = v24;
  result = v19;
  v9 = v23;
  v10 = v22;
  v11 = v25;
  v12 = v26;
  *(_QWORD *)a2 = v18;
  *(__n128 *)(a2 + 8) = result;
  *(_QWORD *)(a2 + 24) = v5;
  *(_QWORD *)(a2 + 32) = v6;
  *(_OWORD *)(a2 + 40) = v10;
  *(_OWORD *)(a2 + 56) = v9;
  *(_QWORD *)(a2 + 72) = v7;
  *(_OWORD *)(a2 + 80) = v11;
  *(_OWORD *)(a2 + 96) = v12;
  return result;
}

uint64_t LocalizedStringResource.localizedStringResource.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;

  v2 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 40);
  v7 = *(_QWORD *)(v1 + 48);
  v9 = *(void **)(v1 + 72);
  v8 = *(_QWORD *)(v1 + 80);
  v10 = *(_QWORD *)(v1 + 104);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(v1 + 56);
  *(_QWORD *)(a1 + 72) = v9;
  *(_QWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(v1 + 88);
  *(_QWORD *)(a1 + 104) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  v11 = v9;
  swift_retain();
  return swift_retain();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance LocalizedStringResource.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized LocalizedStringResource.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance LocalizedStringResource.CodingKeys()
{
  lazy protocol witness table accessor for type LocalizedStringResource.CodingKeys and conformance LocalizedStringResource.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance LocalizedStringResource.CodingKeys()
{
  lazy protocol witness table accessor for type LocalizedStringResource.CodingKeys and conformance LocalizedStringResource.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t specialized LocalizedStringResource._withExtensionForBundle<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, NSObject **a4@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v8;
  _QWORD *v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t countAndFlagsBits;
  Swift::String v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  Swift::String v18;
  void (*v19)(char *, _QWORD);
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  const char *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  NSObject *v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t ObjectType;
  uint64_t (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  NSObject *v50;
  int v51;
  uint64_t v52;
  char v53;
  Swift::String v54;
  uint64_t v55;
  uint64_t v56;
  Swift::String v57;
  uint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  _QWORD *v61;
  Swift::String v62;
  unint64_t v63;
  unint64_t object;
  unint64_t v65;
  uint64_t v66;
  void *v67;
  char v68;
  char v69;
  uint64_t v70;
  char v71;
  char v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  void *v80;
  id v81;
  void *v82;
  NSObject **v83;
  id v84;
  void *v85;
  void *v86;
  id v87;
  void *v88;
  id v89;
  void *v90;
  void *v91;
  Swift::String v92;
  Swift::String v93;
  Swift::String v94;
  uint64_t v95;
  id v96;
  void *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101[8];
  Swift::String *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  id v108;
  NSObject *v109;
  uint64_t v110;
  uint64_t v111;
  NSObject **v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  __int128 v116;
  Swift::String v117;
  uint64_t v118;
  Swift::String v119;
  uint64_t v120;
  _BYTE v121[16];
  Swift::String v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  _QWORD v130[2];
  NSObject *v131;

  v5 = v4;
  v8 = a1;
  outlined init with take of LocalePreferences?(a1 + 96, (uint64_t)v121, &demangling cache variable for type metadata for String?);
  outlined init with take of LocalePreferences?((uint64_t)v121, (uint64_t)v130, &demangling cache variable for type metadata for String?);
  v115 = a2;
  v113 = a3;
  v112 = a4;
  if (!v130[1])
  {
    if (one-time initialization token for localizedStringLogger != -1)
      swift_once();
    v114 = v4;
    v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)localizedStringLogger);
    v23 = Logger.logObject.getter();
    v24 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v23, v24))
      goto LABEL_33;
    v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v25 = 0;
    v26 = "LocalizedStringResource did not contain a sandbox extension token. Proceeding to lookup localized string witho"
          "ut consuming a sandbox extension.";
    goto LABEL_32;
  }
  v10 = (_QWORD *)v130[0];
  v119 = *(Swift::String *)(v8 + 72);
  v120 = *(_QWORD *)(v8 + 88);
  outlined retain of URL((void **)&v119);
  if ((_foundation_swift_url_feature_enabled() & 1) != 0)
  {
    v114 = v10;
    v122 = v119;
    v123 = v120;
    outlined retain of URL((void **)&v119);
    v11 = URL.path(percentEncoded:)(1);
    v122 = v11;
    swift_bridgeObjectRetain();
    if (String.count.getter() > 1
      && (specialized BidirectionalCollection.last.getter(v11._countAndFlagsBits, (unint64_t)v11._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }
    v117._countAndFlagsBits = Set.init(minimumCapacity:)();
    v12 = specialized Set._Variant.insert(_:)(&v116, 0x2FuLL);
    countAndFlagsBits = v117._countAndFlagsBits;
    v14 = v122;
    v15 = ((unint64_t)v122._object >> 56) & 0xF;
    if (((uint64_t)v122._object & 0x2000000000000000) == 0)
      v15 = v122._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (v15)
    {
      v111 = v8;
      v117 = v122;
      MEMORY[0x1E0C80A78](v12);
      v102 = &v117;
      v103 = countAndFlagsBits;
      swift_bridgeObjectRetain();
      v16 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v101, v14._countAndFlagsBits, (unint64_t)v14._object);
      if (v17 == 1)
      {
        v18 = v117;
        swift_bridgeObjectRetain();
        v19 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v18._countAndFlagsBits, (unint64_t)v18._object, countAndFlagsBits);
        v21 = v20;
        swift_bridgeObjectRelease();
      }
      else
      {
        v19 = (void (*)(char *, _QWORD))v16;
        v21 = v17;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a2 = v115;
      v5 = v4;
      if (!v21)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined release of URL((id *)&v119);
        v19 = 0;
        v21 = 0xE000000000000000;
        v8 = v111;
        goto LABEL_24;
      }
      v8 = v111;
    }
    else
    {
      swift_bridgeObjectRelease();
      v19 = 0;
      v21 = 0xE000000000000000;
      a2 = v115;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined release of URL((id *)&v119);
LABEL_24:
    v27 = specialized String.withFileSystemRepresentation<A>(_:)((uint64_t)v19, v21);
    swift_bridgeObjectRelease();
    a3 = v113;
    a4 = v112;
    goto LABEL_25;
  }
  if (!objc_msgSend(objc_retainAutorelease((id)v119._countAndFlagsBits), sel_fileSystemRepresentation))
  {
    outlined release of URL((id *)&v119);
    goto LABEL_26;
  }
  v27 = foundation_sandbox_check_path();
LABEL_25:
  outlined release of URL((id *)&v119);
  if (!v27)
  {
    if (one-time initialization token for localizedStringLogger != -1)
      swift_once();
    v114 = v5;
    v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)localizedStringLogger);
    v23 = Logger.logObject.getter();
    v24 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v23, v24))
      goto LABEL_33;
    v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v25 = 0;
    v26 = "LocalizedStringResource contained a sandbox extension token but sandbox check passed without consuming the tok"
          "en. Proceeding to lookup localized string without consuming a sandbox extension.";
LABEL_32:
    _os_log_impl(&dword_1817D9000, v23, v24, v26, v25, 2u);
    MEMORY[0x186DA9E78](v25, -1, -1);
LABEL_33:

LABEL_34:
    v28 = 0;
    v29 = 1;
    goto LABEL_35;
  }
LABEL_26:
  String.utf8CString.getter();
  v28 = sandbox_extension_consume();
  swift_release();
  v114 = v5;
  if (v28 != -1)
  {
    v29 = 0;
    goto LABEL_35;
  }
  if (one-time initialization token for localizedStringLogger != -1)
    swift_once();
  v49 = type metadata accessor for Logger();
  __swift_project_value_buffer(v49, (uint64_t)localizedStringLogger);
  outlined retain of LocalizedStringResource(v8);
  outlined retain of LocalizedStringResource(v8);
  v50 = Logger.logObject.getter();
  v51 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v50, (os_log_type_t)v51))
  {
    outlined release of LocalizedStringResource(v8);
    outlined release of LocalizedStringResource(v8);

    goto LABEL_34;
  }
  v52 = swift_slowAlloc();
  v110 = swift_slowAlloc();
  *(_QWORD *)&v116 = v110;
  *(_DWORD *)v52 = 136315394;
  outlined retain of URL((void **)&v119);
  v53 = _foundation_swift_url_feature_enabled();
  LODWORD(v111) = v51;
  if ((v53 & 1) != 0)
  {
    v109 = v50;
    v122 = v119;
    v123 = v120;
    outlined retain of URL((void **)&v119);
    v54 = URL.path(percentEncoded:)(1);
    v122 = v54;
    swift_bridgeObjectRetain();
    if (String.count.getter() > 1
      && (specialized BidirectionalCollection.last.getter(v54._countAndFlagsBits, (unint64_t)v54._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }
    v117._countAndFlagsBits = Set.init(minimumCapacity:)();
    v55 = specialized Set._Variant.insert(_:)(&v131, 0x2FuLL);
    v56 = v117._countAndFlagsBits;
    v57 = v122;
    v58 = ((unint64_t)v122._object >> 56) & 0xF;
    if (((uint64_t)v122._object & 0x2000000000000000) == 0)
      v58 = v122._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (v58)
    {
      v117 = v122;
      MEMORY[0x1E0C80A78](v55);
      v102 = &v117;
      v103 = v56;
      swift_bridgeObjectRetain();
      v59 = v114;
      v114 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v101, v57._countAndFlagsBits, (unint64_t)v57._object);
      v61 = v59;
      if (v60 == 1)
      {
        v62 = v117;
        swift_bridgeObjectRetain();
        v114 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v62._countAndFlagsBits, (unint64_t)v62._object, v56);
        object = v63;
        swift_bridgeObjectRelease();
      }
      else
      {
        object = v60;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a4 = v112;
      if (!object)
      {
        v114 = v59;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined release of URL((id *)&v119);
        v95 = 0;
        object = 0xE000000000000000;
        goto LABEL_82;
      }
      v95 = (uint64_t)v114;
    }
    else
    {
      swift_bridgeObjectRelease();
      v95 = 0;
      object = 0xE000000000000000;
      v61 = v114;
    }
    v114 = v61;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined release of URL((id *)&v119);
LABEL_82:
    outlined release of URL((id *)&v119);
    a3 = v113;
    goto LABEL_83;
  }
  v80 = (void *)v119._countAndFlagsBits;
  v81 = objc_msgSend((id)v119._countAndFlagsBits, sel__parameterString);
  if (!v81)
  {
    v96 = objc_msgSend(v80, sel_path);
    if (v96)
    {
      v97 = v96;
      v95 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v96);
      object = v98;

      outlined release of URL((id *)&v119);
    }
    else
    {
      outlined release of URL((id *)&v119);
      v95 = 0;
      object = 0xE000000000000000;
    }
    goto LABEL_84;
  }
  v82 = v81;
  v109 = v50;
  v83 = a4;
  v84 = static String._unconditionallyBridgeFromObjectiveC(_:)(v81);
  v86 = v85;

  if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
    && (v87 = objc_msgSend(v80, sel_path)) != 0)
  {
    v88 = v87;
    v89 = static String._unconditionallyBridgeFromObjectiveC(_:)(v87);
    v91 = v90;

    v122._countAndFlagsBits = (uint64_t)v89;
    v122._object = v91;
    swift_bridgeObjectRetain();
    v92._countAndFlagsBits = 59;
    v92._object = (void *)0xE100000000000000;
    String.append(_:)(v92);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v93._countAndFlagsBits = (uint64_t)v84;
    v93._object = v86;
    String.append(_:)(v93);
    swift_bridgeObjectRelease();
  }
  else
  {
    v122._countAndFlagsBits = 59;
    v122._object = (void *)0xE100000000000000;
    v94._countAndFlagsBits = (uint64_t)v84;
    v94._object = v86;
    String.append(_:)(v94);
  }
  swift_bridgeObjectRelease();
  outlined release of URL((id *)&v119);
  object = (unint64_t)v122._object;
  v95 = v122._countAndFlagsBits;
  a4 = v83;
LABEL_83:
  v50 = v109;
LABEL_84:
  v99 = v110;
  v122._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v95, object, (uint64_t *)&v116);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  outlined release of LocalizedStringResource(v8);
  v100 = outlined release of LocalizedStringResource(v8);
  *(_WORD *)(v52 + 12) = 1026;
  LODWORD(v122._countAndFlagsBits) = MEMORY[0x186DA4118](v100);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  _os_log_impl(&dword_1817D9000, v50, (os_log_type_t)v111, "Unable to consume sandbox extension for path '%s' (errno: %{public}d)", (uint8_t *)v52, 0x12u);
  v29 = 1;
  swift_arrayDestroy();
  MEMORY[0x186DA9E78](v99, -1, -1);
  MEMORY[0x186DA9E78](v52, -1, -1);

  v28 = 0;
  a2 = v115;
LABEL_35:
  v117 = *(Swift::String *)(v8 + 72);
  v118 = *(_QWORD *)(v8 + 88);
  v31 = objc_allocWithZone((Class)NSBundle);
  v32 = v117._countAndFlagsBits;
  outlined retain of URL((void **)&v117);
  v33 = objc_msgSend(v31, sel_initWithURL_, v32);
  v34 = v33;
  if (!v33)
  {
    outlined release of URL((id *)&v117);
    if ((v29 & 1) != 0)
      goto LABEL_67;
    goto LABEL_66;
  }
  v111 = v29;
  v35 = *(_QWORD *)(a2 + 48);
  v110 = v28;
  v109 = v33;
  if (v35)
  {
    v36 = *(_QWORD *)(a2 + 40);
    outlined retain of AttributedString.LocalizationOptions(a2);
    goto LABEL_65;
  }
  outlined retain of AttributedString.LocalizationOptions(a2);
  v37 = -[NSObject localizations](v34, sel_localizations);
  if (!v37)
    v37 = (id)_ContiguousArrayBuffer._asCocoaArray()();
  v38 = (void *)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v39 = swift_allocObject();
  *(_OWORD *)(v39 + 16) = xmmword_18205C850;
  v116 = *(_OWORD *)(a3 + 56);
  v40 = *((_QWORD *)&v116 + 1);
  ObjectType = swift_getObjectType();
  v42 = *(uint64_t (**)(uint64_t, uint64_t))(v40 + 64);
  outlined retain of Locale((uint64_t)&v116);
  v43 = v42(ObjectType, v40);
  v45 = v44;
  outlined release of Locale((uint64_t)&v116);
  *(_QWORD *)(v39 + 32) = v43;
  *(_QWORD *)(v39 + 40) = v45;
  v46 = objc_msgSend(v38, sel_preferredLocalizationsFromArray_forPreferences_, v37, _ContiguousArrayBuffer._asCocoaArray()());

  swift_unknownObjectRelease();
  if (v46)
  {
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();

    }
    v47 = swift_dynamicCastClass();
    if (!v47)
    {
      swift_unknownObjectRelease();
      objc_msgSend(v46, sel_copy);
      v65 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      v48 = (_QWORD *)specialized _arrayForceCast<A, B>(_:)(v65);

      swift_bridgeObjectRelease();
      a2 = v115;
      if (v48[2])
        goto LABEL_61;
      goto LABEL_64;
    }
    v48 = (_QWORD *)v47;

  }
  else
  {
    v48 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  a2 = v115;
  if (v48[2])
  {
LABEL_61:
    v36 = v48[4];
    v35 = v48[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_65;
  }
LABEL_64:
  swift_bridgeObjectRelease();
  v36 = 0;
  v35 = 0;
LABEL_65:
  v66 = *(_QWORD *)a2;
  v67 = *(void **)(a2 + 8);
  v68 = *(_BYTE *)(a2 + 16);
  v69 = *(_BYTE *)(a2 + 17);
  v70 = *(_QWORD *)(a2 + 24);
  v71 = *(_BYTE *)(a2 + 32);
  v72 = *(_BYTE *)(a2 + 33);
  v73 = *(_QWORD *)(a3 + 16);
  v108 = *(id *)(a3 + 24);
  v107 = *(_QWORD *)a3;
  v106 = *(_QWORD *)(a3 + 8);
  v122._countAndFlagsBits = v66;
  v122._object = v67;
  LOBYTE(v123) = v68;
  BYTE1(v123) = v69;
  v124 = v70;
  v125 = v71;
  v126 = v72;
  v127 = v36;
  v128 = v35;
  v129 = 1;
  v74 = *(void **)(a3 + 32);
  v105 = *(_QWORD *)(a3 + 40);
  v75 = *(_QWORD *)(a3 + 56);
  v104 = *(_QWORD *)(a3 + 48);
  v76 = *(_QWORD *)(a3 + 64);
  swift_bridgeObjectRetain();
  v77 = (uint64_t)v109;
  v78 = v109;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)(v107, v106, (uint64_t)&v122, v105, v104, v77, v75, v76, 1u, v73, v108, v74);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  a2 = v115;
  swift_unknownObjectRelease();

  a3 = v113;
  outlined release of URL((id *)&v117);
  v34 = v131;
  a4 = v112;
  if ((v111 & 1) == 0)
LABEL_66:
    sandbox_extension_release();
LABEL_67:
  outlined release of AttributedString.LocalizationOptions(a2);
  *a4 = v34;
  return outlined release of LocalizedStringResource(a3);
}

uint64_t specialized LocalizedStringResource._withExtensionForBundle<A>(_:)@<X0>(void (*a1)(_QWORD *__return_ptr, _QWORD)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t countAndFlagsBits;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  Swift::String v19;
  void (*v20)(char *, _QWORD);
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  const char *v27;
  int v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  Swift::String v37;
  uint64_t v38;
  uint64_t v39;
  Swift::String v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  Swift::Int v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t object;
  uint64_t result;
  void *v52;
  id v53;
  void *v54;
  id v55;
  void *v56;
  void *v57;
  id v58;
  void *v59;
  id v60;
  void *v61;
  void *v62;
  Swift::String v63;
  Swift::String v64;
  Swift::String v65;
  id v66;
  void *v67;
  unint64_t v68;
  uint64_t v69;
  os_log_t v70;
  uint64_t v71;
  _BYTE v72[16];
  Swift::String *v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t *v77;
  void (*v78)(_QWORD *__return_ptr, _QWORD);
  os_log_t v79;
  uint64_t v80;
  uint64_t v81;
  Swift::String v82;
  char v83;
  Swift::String v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  Swift::String v88;
  uint64_t v89;
  _BYTE v90[16];
  _QWORD v91[3];
  uint64_t v92;

  v5 = v4;
  v6 = v3;
  outlined init with take of LocalePreferences?(v3 + 96, (uint64_t)v90, &demangling cache variable for type metadata for String?);
  outlined init with take of LocalePreferences?((uint64_t)v90, (uint64_t)v91, &demangling cache variable for type metadata for String?);
  if (!v91[1])
  {
    if (one-time initialization token for localizedStringLogger != -1)
      swift_once();
    v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)localizedStringLogger);
    v24 = Logger.logObject.getter();
    v25 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v24, v25))
      goto LABEL_46;
    v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v26 = 0;
    v27 = "LocalizedStringResource did not contain a sandbox extension token. Proceeding to lookup localized string witho"
          "ut consuming a sandbox extension.";
LABEL_32:
    _os_log_impl(&dword_1817D9000, v24, v25, v27, v26, 2u);
    MEMORY[0x186DA9E78](v26, -1, -1);
LABEL_46:

    v30 = 1;
    goto LABEL_47;
  }
  v10 = v91[0];
  v88 = *(Swift::String *)(v3 + 72);
  v89 = *(_QWORD *)(v3 + 88);
  outlined retain of URL((void **)&v88);
  if ((_foundation_swift_url_feature_enabled() & 1) != 0)
  {
    v79 = v10;
    v80 = a2;
    v81 = v4;
    v85 = v89;
    outlined retain of URL((void **)&v88);
    v11 = URL.path(percentEncoded:)(1);
    v84 = v11;
    swift_bridgeObjectRetain();
    if (String.count.getter() > 1
      && (specialized BidirectionalCollection.last.getter(v11._countAndFlagsBits, (unint64_t)v11._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }
    v82._countAndFlagsBits = Set.init(minimumCapacity:)();
    v12 = specialized Set._Variant.insert(_:)(&v92, 0x2FuLL);
    countAndFlagsBits = v82._countAndFlagsBits;
    v14 = v84;
    v15 = ((unint64_t)v84._object >> 56) & 0xF;
    if (((uint64_t)v84._object & 0x2000000000000000) == 0)
      v15 = v84._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (v15)
    {
      v78 = a1;
      v77 = a3;
      v82 = v84;
      MEMORY[0x1E0C80A78](v12);
      v73 = &v82;
      v74 = countAndFlagsBits;
      swift_bridgeObjectRetain();
      v16 = v81;
      v17 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v72, v14._countAndFlagsBits, (unint64_t)v14._object);
      if (v18 == 1)
      {
        v19 = v82;
        swift_bridgeObjectRetain();
        v20 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v19._countAndFlagsBits, (unint64_t)v19._object, countAndFlagsBits);
        v22 = v21;
        swift_bridgeObjectRelease();
      }
      else
      {
        v20 = (void (*)(char *, _QWORD))v17;
        v22 = v18;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a3 = v77;
      v5 = v16;
      if (!v22)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined release of URL((id *)&v88);
        v20 = 0;
        v22 = 0xE000000000000000;
        a1 = v78;
        goto LABEL_24;
      }
      a1 = v78;
    }
    else
    {
      swift_bridgeObjectRelease();
      v20 = 0;
      v22 = 0xE000000000000000;
      v5 = v81;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined release of URL((id *)&v88);
LABEL_24:
    v28 = specialized String.withFileSystemRepresentation<A>(_:)((uint64_t)v20, v22);
    swift_bridgeObjectRelease();
    a2 = v80;
    goto LABEL_25;
  }
  if (!objc_msgSend(objc_retainAutorelease((id)v88._countAndFlagsBits), sel_fileSystemRepresentation))
  {
    outlined release of URL((id *)&v88);
    goto LABEL_26;
  }
  v28 = foundation_sandbox_check_path();
LABEL_25:
  outlined release of URL((id *)&v88);
  if (!v28)
  {
    if (one-time initialization token for localizedStringLogger != -1)
      swift_once();
    v31 = type metadata accessor for Logger();
    __swift_project_value_buffer(v31, (uint64_t)localizedStringLogger);
    v24 = Logger.logObject.getter();
    v25 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v24, v25))
      goto LABEL_46;
    v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v26 = 0;
    v27 = "LocalizedStringResource contained a sandbox extension token but sandbox check passed without consuming the tok"
          "en. Proceeding to lookup localized string without consuming a sandbox extension.";
    goto LABEL_32;
  }
LABEL_26:
  String.utf8CString.getter();
  v29 = sandbox_extension_consume();
  swift_release();
  if (v29 != -1)
  {
    v30 = 0;
    goto LABEL_47;
  }
  if (one-time initialization token for localizedStringLogger != -1)
    swift_once();
  v32 = type metadata accessor for Logger();
  __swift_project_value_buffer(v32, (uint64_t)localizedStringLogger);
  outlined retain of LocalizedStringResource(v6);
  outlined retain of LocalizedStringResource(v6);
  v24 = Logger.logObject.getter();
  v33 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v24, (os_log_type_t)v33))
  {
    outlined release of LocalizedStringResource(v6);
    outlined release of LocalizedStringResource(v6);
    goto LABEL_46;
  }
  v78 = a1;
  v34 = swift_slowAlloc();
  v35 = swift_slowAlloc();
  v92 = v35;
  *(_DWORD *)v34 = 136315394;
  outlined retain of URL((void **)&v88);
  v36 = _foundation_swift_url_feature_enabled();
  v81 = v5;
  v79 = v24;
  v76 = v33;
  v75 = v35;
  if (!v36)
  {
    v52 = (void *)v88._countAndFlagsBits;
    v53 = objc_msgSend((id)v88._countAndFlagsBits, sel__parameterString);
    if (v53)
    {
      v54 = v53;
      v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
      v57 = v56;

      if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
        && (v58 = objc_msgSend(v52, sel_path)) != 0)
      {
        v59 = v58;
        v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
        v62 = v61;

        v84._countAndFlagsBits = (uint64_t)v60;
        v84._object = v62;
        swift_bridgeObjectRetain();
        v63._countAndFlagsBits = 59;
        v63._object = (void *)0xE100000000000000;
        String.append(_:)(v63);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v64._countAndFlagsBits = (uint64_t)v55;
        v64._object = v57;
        String.append(_:)(v64);
        swift_bridgeObjectRelease();
      }
      else
      {
        v84._countAndFlagsBits = 59;
        v84._object = (void *)0xE100000000000000;
        v65._countAndFlagsBits = (uint64_t)v55;
        v65._object = v57;
        String.append(_:)(v65);
      }
      swift_bridgeObjectRelease();
      outlined release of URL((id *)&v88);
      object = (unint64_t)v84._object;
      v48 = v84._countAndFlagsBits;
      v5 = v81;
    }
    else
    {
      v66 = objc_msgSend(v52, sel_path);
      v5 = v81;
      if (v66)
      {
        v67 = v66;
        v48 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
        object = v68;

        outlined release of URL((id *)&v88);
      }
      else
      {
        outlined release of URL((id *)&v88);
        v48 = 0;
        object = 0xE000000000000000;
      }
    }
    goto LABEL_66;
  }
  v80 = a2;
  v84 = v88;
  v85 = v89;
  outlined retain of URL((void **)&v88);
  v37 = URL.path(percentEncoded:)(1);
  v84 = v37;
  swift_bridgeObjectRetain();
  if (String.count.getter() > 1
    && (specialized BidirectionalCollection.last.getter(v37._countAndFlagsBits, (unint64_t)v37._object) & 0x1FF) == 0x2F)
  {
    specialized RangeReplaceableCollection<>.popLast()();
    swift_bridgeObjectRelease();
  }
  v82._countAndFlagsBits = Set.init(minimumCapacity:)();
  v38 = specialized Set._Variant.insert(_:)(&v83, 0x2FuLL);
  v39 = v82._countAndFlagsBits;
  v40 = v84;
  v41 = ((unint64_t)v84._object >> 56) & 0xF;
  if (((uint64_t)v84._object & 0x2000000000000000) == 0)
    v41 = v84._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (v41)
  {
    v77 = a3;
    v82 = v84;
    MEMORY[0x1E0C80A78](v38);
    v73 = &v82;
    v74 = v39;
    swift_bridgeObjectRetain();
    v42 = v81;
    v43 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v72, v40._countAndFlagsBits, (unint64_t)v40._object);
    v5 = v42;
    if (v44 == 1)
    {
      v45 = v42;
      v47 = (unint64_t)v82._object;
      v46 = v82._countAndFlagsBits;
      swift_bridgeObjectRetain();
      v48 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v46, v47, v39);
      object = v49;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v5 = v45;
    }
    else
    {
      v48 = (uint64_t)v43;
      object = v44;
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    a3 = v77;
    if (!object)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined release of URL((id *)&v88);
      v48 = 0;
      object = 0xE000000000000000;
      goto LABEL_65;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    v48 = 0;
    object = 0xE000000000000000;
    v5 = v81;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined release of URL((id *)&v88);
LABEL_65:
  outlined release of URL((id *)&v88);
LABEL_66:
  v84._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, object, &v92);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  outlined release of LocalizedStringResource(v6);
  v69 = outlined release of LocalizedStringResource(v6);
  *(_WORD *)(v34 + 12) = 1026;
  LODWORD(v84._countAndFlagsBits) = MEMORY[0x186DA4118](v69);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  v70 = v79;
  _os_log_impl(&dword_1817D9000, v79, (os_log_type_t)v76, "Unable to consume sandbox extension for path '%s' (errno: %{public}d)", (uint8_t *)v34, 0x12u);
  v30 = 1;
  v71 = v75;
  swift_arrayDestroy();
  MEMORY[0x186DA9E78](v71, -1, -1);
  MEMORY[0x186DA9E78](v34, -1, -1);

  a1 = v78;
LABEL_47:
  v86 = *(_OWORD *)(v6 + 72);
  v87 = *(_QWORD *)(v6 + 88);
  v84 = *(Swift::String *)(v6 + 72);
  v85 = *(_QWORD *)(v6 + 88);
  outlined retain of URL((void **)&v86);
  a1(&v82, &v84);
  result = (uint64_t)outlined release of URL((id *)&v86);
  if (!v5)
  {
    if ((v30 & 1) == 0)
      result = sandbox_extension_release();
    *a3 = v82._countAndFlagsBits;
  }
  return result;
}

uint64_t protocol witness for CustomLocalizedStringResourceConvertible.localizedStringResource.getter in conformance LocalizedStringResource@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;

  v2 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 40);
  v7 = *(_QWORD *)(v1 + 48);
  v9 = *(void **)(v1 + 72);
  v8 = *(_QWORD *)(v1 + 80);
  v10 = *(_QWORD *)(v1 + 104);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(v1 + 56);
  *(_QWORD *)(a1 + 72) = v9;
  *(_QWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(v1 + 88);
  *(_QWORD *)(a1 + 104) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  v11 = v9;
  swift_retain();
  return swift_retain();
}

double protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance LocalizedStringResource@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)&result = LocalizedStringResource.init(stringLiteral:)(*a1, a1[1], a2).n128_u64[0];
  return result;
}

uint64_t _NSLocalizedStringResourceSwiftWrapper.isEqual(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _QWORD v27[7];
  __int128 v28;
  void *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  void *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  _OWORD v44[2];

  swift_getObjectType();
  outlined init with copy of (Hashable & Sendable)?(a1, (uint64_t)&v33, &demangling cache variable for type metadata for Any?);
  if (!v35)
  {
    outlined destroy of Any?((uint64_t)&v33, &demangling cache variable for type metadata for Any?);
LABEL_6:
    v18 = 0;
    return v18 & 1;
  }
  outlined init with take of Any(&v33, v44);
  outlined init with copy of Any((uint64_t)v44, (uint64_t)&v33);
  if ((swift_dynamicCast() & 1) == 0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
    goto LABEL_6;
  }
  v26 = (void *)v27[0];
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 8);
  v5 = *(_QWORD *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 16);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 24);
  v7 = *(_QWORD *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 32);
  v6 = *(_QWORD *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 40);
  v8 = *(_QWORD *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 48);
  v10 = *(void **)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 72);
  v9 = *(_QWORD *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 80);
  v11 = *(_QWORD *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 104);
  *(_QWORD *)&v33 = *(_QWORD *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped);
  *((_QWORD *)&v33 + 1) = v3;
  v34 = v5;
  v35 = v4;
  v36 = v7;
  v37 = v6;
  v39 = *(_OWORD *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 56);
  v38 = v8;
  v40 = v10;
  v41 = v9;
  v42 = *(_OWORD *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 88);
  v43 = v11;
  v12 = v27[0] + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped;
  v13 = *(_QWORD *)(v27[0] + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 24);
  v20 = *(_QWORD *)(v27[0] + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 16);
  v15 = *(_QWORD *)(v27[0] + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 32);
  v14 = *(_QWORD *)(v27[0] + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 40);
  v21 = *(_QWORD *)(v27[0] + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 48);
  v16 = *(void **)(v27[0] + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 72);
  v24 = *(_QWORD *)(v27[0] + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 80);
  v25 = *(_QWORD *)(v27[0] + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 8);
  v17 = *(_QWORD *)(v27[0] + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 104);
  v27[0] = *(_QWORD *)(v27[0] + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped);
  v27[1] = v25;
  v27[2] = v20;
  v27[3] = v13;
  v27[4] = v15;
  v27[5] = v14;
  v27[6] = v21;
  v28 = *(_OWORD *)(v12 + 56);
  v29 = v16;
  v30 = v24;
  v31 = *(_OWORD *)(v12 + 88);
  v32 = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  v23 = v10;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  v22 = v16;
  swift_retain();
  swift_retain();
  v18 = specialized static LocalizedStringResource.== infix(_:_:)((uint64_t)&v33, (uint64_t)v27);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
  return v18 & 1;
}

uint64_t AttributedString.init(localized:)@<X0>(__int128 *a1@<X0>, NSObject **a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  NSObject *v6;
  uint64_t result;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  _QWORD v14[2];
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a1[5];
  v25 = a1[4];
  v26 = v3;
  v27 = a1[6];
  v4 = a1[1];
  v21 = *a1;
  v22 = v4;
  v5 = a1[3];
  v23 = a1[2];
  v24 = v5;
  v14[0] = 0;
  v14[1] = 0;
  v15 = 1;
  v16 = 0;
  v17 = 256;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  outlined retain of LocalizedStringResource((uint64_t)&v21);
  specialized LocalizedStringResource._withExtensionForBundle<A>(_:)((uint64_t)&v21, (uint64_t)v14, (uint64_t)&v21, &v13);
  v6 = v13;
  if (v13)
  {
    result = outlined release of LocalizedStringResource((uint64_t)&v21);
  }
  else
  {
    v9 = (void *)*((_QWORD *)&v22 + 1);
    v8 = v22;
    v10 = (void *)v23;
    v11 = *((_QWORD *)&v24 + 1);
    v12 = v25;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    specialized String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)(0, 0, (uint64_t)v14, 0, 0, 0, v11, v12, 0, v8, v9, v10);
    outlined release of LocalizedStringResource((uint64_t)&v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_unknownObjectRelease();
    v6 = v13;
  }
  *a2 = v6;
  return result;
}

uint64_t AttributedString.init<A>(localized:including:)@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X2>, void *a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t result;
  __int128 v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[9];
  v18 = *a1;
  v19 = *(_OWORD *)(a1 + 1);
  v20 = v5;
  v21 = v6;
  v8 = *(_OWORD *)(a1 + 7);
  v22 = *(_OWORD *)(a1 + 5);
  v23 = v8;
  v24 = v7;
  v9 = *((_OWORD *)a1 + 6);
  v25 = *((_OWORD *)a1 + 5);
  v26 = v9;
  v11 = 0uLL;
  v12 = 1;
  v13 = 0;
  v14 = 256;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  AttributedString.init<A>(localized:options:including:)((__int128 *)&v18, &v11, (uint64_t)a2, a2, a3, &v27);
  result = swift_release();
  *a4 = v27;
  return result;
}

uint64_t AttributedString.init<A>(localized:options:including:)@<X0>(__int128 *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X3>, void *a5@<X4>, _QWORD *a6@<X8>)
{
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t result;
  _BYTE v18[16];
  _OWORD *v19;
  void *v20;
  __int128 *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  _OWORD v25[2];
  _OWORD v26[3];
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[32];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _OWORD v37[2];
  __int128 v38;
  uint64_t v39;
  __int128 v40;

  v10 = a1[5];
  *(_OWORD *)&v32[16] = a1[4];
  v33 = v10;
  v34 = a1[6];
  v11 = a1[1];
  v29 = *a1;
  v30 = v11;
  v12 = a1[3];
  v31 = a1[2];
  *(_OWORD *)v32 = v12;
  v13 = *a2;
  v14 = a2[1];
  v15 = a2[2];
  *(_OWORD *)((char *)v37 + 9) = *(__int128 *)((char *)a2 + 41);
  v36 = v14;
  v37[0] = v15;
  v35 = v13;
  v19 = a4;
  v20 = a5;
  v21 = &v35;
  v22 = &v29;
  v23 = a3;
  specialized LocalizedStringResource._withExtensionForBundle<A>(_:)((void (*)(_QWORD *__return_ptr, _QWORD))partial apply for closure #1 in AttributedString.init<A>(localized:options:including:), (uint64_t)v18, (uint64_t *)v25);
  v16 = *(_QWORD *)&v25[0];
  if (*(_QWORD *)&v25[0])
  {
    outlined release of AttributedString.LocalizationOptions((uint64_t)&v35);
    result = outlined release of LocalizedStringResource((uint64_t)&v29);
  }
  else
  {
    v38 = v30;
    v39 = v31;
    v26[2] = v30;
    v27 = v31;
    v25[0] = v35;
    v25[1] = v36;
    v26[0] = v37[0];
    *(_OWORD *)((char *)v26 + 9) = *(_OWORD *)((char *)v37 + 9);
    v40 = *(_OWORD *)&v32[8];
    v24 = *(_OWORD *)&v32[8];
    outlined retain of String.LocalizationValue((uint64_t)&v38);
    outlined retain of Locale((uint64_t)&v40);
    String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)(0, 0, (uint64_t)v25, 0, 0, 0, (uint64_t)&v24, a3, 0, a4, a5);
    outlined release of LocalizedStringResource((uint64_t)&v29);
    outlined release of Locale((uint64_t)&v40);
    outlined release of String.LocalizationValue((uint64_t)&v38);
    result = outlined release of AttributedString.LocalizationOptions((uint64_t)&v35);
    v16 = v28;
  }
  *a6 = v16;
  return result;
}

uint64_t AttributedString.init(localized:options:)@<X0>(__int128 *a1@<X0>, __int128 *a2@<X1>, NSObject **a3@<X8>)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  NSObject *v10;
  uint64_t result;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  _OWORD v18[2];
  _BYTE v19[25];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v4 = a1[5];
  v24 = a1[4];
  v25 = v4;
  v26 = a1[6];
  v5 = a1[1];
  v20 = *a1;
  v21 = v5;
  v6 = a1[3];
  v22 = a1[2];
  v23 = v6;
  v7 = *a2;
  v8 = a2[1];
  v9 = a2[2];
  *(_OWORD *)&v19[9] = *(__int128 *)((char *)a2 + 41);
  v18[1] = v8;
  *(_OWORD *)v19 = v9;
  v18[0] = v7;
  outlined retain of AttributedString.LocalizationOptions((uint64_t)v18);
  outlined retain of LocalizedStringResource((uint64_t)&v20);
  specialized LocalizedStringResource._withExtensionForBundle<A>(_:)((uint64_t)&v20, (uint64_t)v18, (uint64_t)&v20, &v17);
  v10 = v17;
  if (v17)
  {
    outlined release of AttributedString.LocalizationOptions((uint64_t)v18);
    result = outlined release of LocalizedStringResource((uint64_t)&v20);
  }
  else
  {
    v13 = (void *)*((_QWORD *)&v21 + 1);
    v12 = v21;
    v14 = (void *)v22;
    v15 = *((_QWORD *)&v23 + 1);
    v16 = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    specialized String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)(0, 0, (uint64_t)v18, 0, 0, 0, v15, v16, 0, v12, v13, v14);
    outlined release of LocalizedStringResource((uint64_t)&v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    result = outlined release of AttributedString.LocalizationOptions((uint64_t)v18);
    v10 = v17;
  }
  *a3 = v10;
  return result;
}

uint64_t AttributedString.init<A>(localized:options:including:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X3>, void *a4@<X4>, _QWORD *a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  __int128 v15;
  uint64_t result;
  __int128 v17;
  char v18;
  char v19;
  uint64_t v20;
  char v21;
  char v22;
  __int128 v23;
  char v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v6 = a1[3];
  v7 = a1[4];
  v8 = a1[9];
  v9 = *(_BYTE *)(a2 + 16);
  v10 = *(_BYTE *)(a2 + 17);
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(_BYTE *)(a2 + 32);
  v13 = *(_BYTE *)(a2 + 33);
  v14 = *(_BYTE *)(a2 + 56);
  v25 = *a1;
  v26 = *(_OWORD *)(a1 + 1);
  v27 = v6;
  v28 = v7;
  v29 = *(_OWORD *)(a1 + 5);
  v30 = *(_OWORD *)(a1 + 7);
  v31 = v8;
  v15 = *((_OWORD *)a1 + 6);
  v32 = *((_OWORD *)a1 + 5);
  v33 = v15;
  v17 = *(_OWORD *)a2;
  v18 = v9;
  v19 = v10;
  v20 = v11;
  v21 = v12;
  v22 = v13;
  v23 = *(_OWORD *)(a2 + 40);
  v24 = v14;
  AttributedString.init<A>(localized:options:including:)((__int128 *)&v25, &v17, (uint64_t)a3, a3, a4, &v34);
  result = swift_release();
  *a5 = v34;
  return result;
}

id closure #1 in AttributedString.init<A>(localized:options:including:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X4>, void *a6@<X5>, _QWORD *a7@<X8>)
{
  id result;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t ObjectType;
  uint64_t (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  void *v43;
  void *v44;
  _OWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD v48[2];
  char v49;
  char v50;
  uint64_t v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  _OWORD v60[2];
  uint64_t v61;

  result = objc_msgSend(objc_allocWithZone((Class)NSBundle), sel_initWithURL_, *a1);
  if (!result)
  {
    *a7 = 0;
    return result;
  }
  v14 = result;
  v46 = a4;
  v47 = a7;
  v15 = *(_QWORD *)(a2 + 48);
  v44 = a6;
  v45 = a5;
  v43 = result;
  if (!v15)
  {
    outlined retain of AttributedString.LocalizationOptions(a2);
    v17 = objc_msgSend(v14, sel_localizations);
    if (!v17)
      v17 = (id)_ContiguousArrayBuffer._asCocoaArray()();
    v18 = (void *)objc_opt_self();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_18205C850;
    v60[0] = *(_OWORD *)(a3 + 56);
    v20 = *((_QWORD *)&v60[0] + 1);
    ObjectType = swift_getObjectType();
    v22 = *(uint64_t (**)(uint64_t, uint64_t))(*((_QWORD *)&v60[0] + 1) + 64);
    outlined retain of Locale((uint64_t)v60);
    v23 = v22(ObjectType, v20);
    v25 = v24;
    outlined release of Locale((uint64_t)v60);
    *(_QWORD *)(v19 + 32) = v23;
    *(_QWORD *)(v19 + 40) = v25;
    v26 = objc_msgSend(v18, sel_preferredLocalizationsFromArray_forPreferences_, v17, _ContiguousArrayBuffer._asCocoaArray()());

    swift_unknownObjectRelease();
    if (v26)
    {
      type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      if (swift_dynamicCastClass())
      {
        swift_retain();

      }
      v27 = swift_dynamicCastClass();
      if (v27)
      {
        v28 = (_QWORD *)v27;

        if (!v28[2])
          goto LABEL_14;
LABEL_16:
        v16 = v28[4];
        v15 = v28[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_17;
      }
      swift_unknownObjectRelease();
      objc_msgSend(v26, sel_copy);
      v29 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      v28 = (_QWORD *)specialized _arrayForceCast<A, B>(_:)(v29);

      swift_bridgeObjectRelease();
      if (v28[2])
        goto LABEL_16;
    }
    else
    {
      v28 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      if (*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
        goto LABEL_16;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    v16 = 0;
    v15 = 0;
    goto LABEL_17;
  }
  v16 = *(_QWORD *)(a2 + 40);
  outlined retain of AttributedString.LocalizationOptions(a2);
LABEL_17:
  v30 = *(_QWORD *)a2;
  v31 = *(_QWORD *)(a2 + 8);
  v32 = *(_BYTE *)(a2 + 16);
  v33 = *(_BYTE *)(a2 + 17);
  v34 = *(_QWORD *)(a2 + 24);
  v35 = *(_BYTE *)(a2 + 32);
  v36 = *(_BYTE *)(a2 + 33);
  v58 = *(_OWORD *)(a3 + 16);
  v42 = *(_QWORD *)(a3 + 40);
  v59 = *(_QWORD *)(a3 + 32);
  v49 = v32;
  v37 = *(_QWORD *)a3;
  v38 = *(_QWORD *)(a3 + 8);
  v48[0] = v30;
  v48[1] = v31;
  v50 = v33;
  v51 = v34;
  v52 = v35;
  v53 = v36;
  v54 = v16;
  v55 = v15;
  v56 = 1;
  v39 = *(_QWORD *)(a3 + 48);
  v40 = a3 + 56;
  v57 = *(_OWORD *)(a3 + 56);
  outlined retain of String.LocalizationValue((uint64_t)&v58);
  swift_bridgeObjectRetain();
  v41 = v43;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined retain of Locale((uint64_t)&v57);
  String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)(v37, v38, (uint64_t)v48, v42, v39, (uint64_t)v43, v40, v46, 1u, v45, v44);

  outlined release of Locale((uint64_t)&v57);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined release of String.LocalizationValue((uint64_t)&v58);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = (id)swift_bridgeObjectRelease();
  *v47 = v61;
  return result;
}

_QWORD *specialized _PlistDecoder.init(referencing:options:codingPathNode:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;

  v5 = v3;
  v3[3] = a1;
  v3[2] = MEMORY[0x1E0DEE9D8];
  v8 = *(_QWORD *)(a1 + 48);
  swift_retain();
  v9 = BPlistMap.loadValue(at:)(v8);
  if (v4)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _PlistDecoder<_BPlistDecodingFormat>);
    swift_deallocPartialClassInstance();
  }
  else
  {
    v10 = v9;
    v11 = (_QWORD *)v5[2];
    outlined copy of BPlistMap.Value(v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v5[2] = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
      v5[2] = v11;
    }
    v14 = v11[2];
    v13 = v11[3];
    if (v14 >= v13 >> 1)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, v11);
    v11[2] = v14 + 1;
    v11[v14 + 4] = v10;
    v5[2] = v11;
    outlined consume of BPlistMap.Value(v10);
    swift_release();
    v5[4] = a2;
    v5[5] = a3;
  }
  return v5;
}

uint64_t specialized _PlistDecoder.takeOwnershipOfBackingDataIfNeeded(selfIsUniquelyReferenced:)(char a1)
{
  uint64_t v1;
  uint64_t result;
  os_unfair_lock_s *v3;

  if ((a1 & 1) == 0 || (result = swift_isUniquelyReferenced_nonNull_native(), !(_DWORD)result))
  {
    v3 = *(os_unfair_lock_s **)(*(_QWORD *)(v1 + 24) + 64);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock(v3 + 10);
    closure #1 in XMLPlistMap.copyInBuffer()((uint64_t)&v3[4]);
    os_unfair_lock_unlock(v3 + 10);
    swift_release();
    return swift_release();
  }
  return result;
}

{
  uint64_t v1;
  uint64_t result;
  os_unfair_lock_s *v3;

  if ((a1 & 1) == 0 || (result = swift_isUniquelyReferenced_nonNull_native(), !(_DWORD)result))
  {
    v3 = *(os_unfair_lock_s **)(*(_QWORD *)(v1 + 24) + 24);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock(v3 + 10);
    closure #1 in XMLPlistMap.copyInBuffer()((uint64_t)&v3[4]);
    os_unfair_lock_unlock(v3 + 10);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t specialized AttributedString.MarkdownSourcePosition.calculateOffsets<A>(within:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  BOOL v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  _BYTE v30[32];

  v3 = *v1;
  v4 = v1[1];
  v5 = String.utf8CString.getter();
  v6 = v5 + 32;
  v7 = *(_QWORD *)(v5 + 16);
  v8 = (void *)objc_opt_self();
  v29 = 0u;
  *(_OWORD *)v30 = 0u;
  v24 = 1;
  *(int64x2_t *)&v30[16] = vdupq_n_s64(1uLL);
  objc_msgSend(v8, sel_calculateOffsetsForLine_column_inString_size_withExistingOffsets_, v3, v4, v6, v7, &v29);
  v9 = 0;
  if ((_QWORD)v25 == 0x7FFFFFFFFFFFFFFFLL
    || *((_QWORD *)&v25 + 1) == 0x7FFFFFFFFFFFFFFFLL
    || v26 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
  }
  else
  {
    v10 = v7;
    v11 = v6;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    if ((_QWORD)v27 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v19 = v1[2];
      v20 = v1[3];
      v29 = v25;
      *(_QWORD *)v30 = v26;
      *(_OWORD *)&v30[8] = v27;
      *(_QWORD *)&v30[24] = v28;
      objc_msgSend(v8, (SEL)&classRef_NSKeyPathExpression + 1, v19, v20, v11, v10, &v29);
      v24 = (_QWORD)v27 == 0x7FFFFFFFFFFFFFFFLL;
      v12 = *((_QWORD *)&v25 + 1);
      v9 = v25;
      v13 = v26;
      v14 = v27;
      v16 = *((_QWORD *)&v25 + 1);
      v15 = v25;
      v17 = v26;
      v18 = v27;
    }
  }
  v21 = v12;
  v22 = v13;
  result = swift_release();
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v21;
  *(_QWORD *)(a1 + 16) = v22;
  *(_QWORD *)(a1 + 24) = v14;
  *(_QWORD *)(a1 + 32) = v15;
  *(_QWORD *)(a1 + 40) = v16;
  *(_QWORD *)(a1 + 48) = v17;
  *(_QWORD *)(a1 + 56) = v18;
  *(_BYTE *)(a1 + 64) = v24;
  return result;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x1E0DEC2B8];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(Swift::String *a1, uint64_t a2, NSDecimal **a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  NSDecimal *v8;
  Swift::String v10;

  v5 = type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a3;
  v10 = *a1;
  String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.locale(_:)(&v10._countAndFlagsBits, (uint64_t)v7);
  v10 = String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.format(_:)(v8);
  outlined destroy of ICUNumberFormatter.Signature((uint64_t)v7, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle);
  return String.init<A>(_:)();
}

uint64_t specialized closure #1 in FormatterCache.formatter(for:creator:)@<X0>(uint64_t a1@<X0>, const void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;
  unsigned __int8 __dst[392];

  memcpy(__dst, a2, sizeof(__dst));
  result = specialized closure #1 in FormatterCache.formatter(for:creator:)(a1, __dst);
  if (!v3)
    *a3 = result;
  return result;
}

uint64_t specialized closure #1 in __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  _QWORD v8[6];
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;

  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 72);
  v8[5] = *(_QWORD *)a2;
  v9 = *(_OWORD *)(a2 + 8);
  v10 = v3;
  v11 = v4;
  v12 = *(_OWORD *)(a2 + 40);
  v13 = *(_OWORD *)(a2 + 56);
  v14 = v5;
  v6 = *(_OWORD *)(a2 + 96);
  v15 = *(_OWORD *)(a2 + 80);
  v16 = v6;
  v8[3] = type metadata accessor for __PlistEncoderBPlist();
  v8[4] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type __PlistEncoderBPlist and conformance __PlistEncoderBPlist, (uint64_t (*)(uint64_t))type metadata accessor for __PlistEncoderBPlist, (uint64_t)&protocol conformance descriptor for __PlistEncoderBPlist);
  v8[0] = a1;
  swift_retain();
  LocalizedStringResource.encode(to:)(v8);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
}

uint64_t specialized static InflectionConcept.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)a2;
  if ((*(_BYTE *)(a1 + 16) & 1) == 0)
  {
    if ((*(_BYTE *)(a2 + 16) & 1) == 0)
    {
      outlined copy of InflectionConcept();
      outlined copy of InflectionConcept();
      v5 = specialized static Array<A>.== infix(_:_:)(v2, v3);
      goto LABEL_13;
    }
    goto LABEL_9;
  }
  if ((*(_BYTE *)(a2 + 16) & 1) == 0)
  {
LABEL_9:
    outlined copy of InflectionConcept();
    outlined copy of InflectionConcept();
    v5 = 0;
    goto LABEL_13;
  }
  if (v2 == v3 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8))
    v5 = 1;
  else
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  outlined copy of InflectionConcept();
  outlined copy of InflectionConcept();
LABEL_13:
  outlined consume of InflectionConcept();
  outlined consume of InflectionConcept();
  return v5 & 1;
}

uint64_t specialized static LocalizedStringResource.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unsigned __int8 v13;
  char v15;
  char v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23[4];
  _BYTE v24[24];

  v2 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 72);
  v20 = *(_OWORD *)(a1 + 80);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 48);
  v21 = *(_OWORD *)(a2 + 56);
  v22 = *(_OWORD *)(a1 + 56);
  v17 = *(_QWORD *)(a2 + 72);
  v18 = *(_OWORD *)(a2 + 80);
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
    || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(), v13 = 0, (v12 & 1) != 0))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((specialized static Array<A>.== infix(_:_:)(v2, v7) & 1) != 0)
    {
      if (v4 == v8 && v3 == v10)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
      }
      else
      {
        v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v13 = 0;
        if ((v15 & 1) == 0)
          return v13 & 1;
      }
      if (v5)
      {
        if (v11)
        {
          if (v6 != v9 || v5 != v11)
          {
            v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
            v13 = 0;
            if ((v16 & 1) == 0)
              return v13 & 1;
          }
          goto LABEL_19;
        }
      }
      else if (!v11)
      {
LABEL_19:
        *(_OWORD *)v24 = v22;
        *(_OWORD *)v23 = v21;
        if ((specialized static Locale.== infix(_:_:)((uint64_t)v24, (uint64_t)v23) & 1) != 0)
        {
          *(_QWORD *)v24 = v19;
          *(_OWORD *)&v24[8] = v20;
          v23[0] = v17;
          *(_OWORD *)&v23[1] = v18;
          v13 = specialized static URL.== infix(_:_:)((uint64_t)v24, v23);
          return v13 & 1;
        }
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    v13 = 0;
  }
  return v13 & 1;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_AJs5NeverOTg506_sSS10d3E17ef43V25argumentsWithReplacements_6localeSayAC14gH40VGSays7CVarArg_pGSg_AA6LocaleVtFA2GXEfU_s16IndexingIteratorVySays0tU0_pGGAF0X0VTf1cn_nTf4nng_n(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t i;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v23[7];
  char v24;
  uint64_t v25;

  v5 = v4;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = MEMORY[0x1E0DEE9D8];
  if (v6)
  {
    v25 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    v7 = v25;
    for (i = a1 + 32; ; i += 120)
    {
      closure #1 in String.LocalizationValue.argumentsWithReplacements(_:locale:)(i, a2, a3, a4, (uint64_t)v23);
      if (v5)
        break;
      v5 = 0;
      v25 = v7;
      v14 = *(_QWORD *)(v7 + 16);
      v13 = *(_QWORD *)(v7 + 24);
      if (v14 >= v13 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        v7 = v25;
      }
      *(_QWORD *)(v7 + 16) = v14 + 1;
      v15 = v7 + 120 * v14;
      v16 = v23[0];
      v17 = v23[1];
      v18 = v23[3];
      *(_OWORD *)(v15 + 64) = v23[2];
      *(_OWORD *)(v15 + 80) = v18;
      *(_OWORD *)(v15 + 32) = v16;
      *(_OWORD *)(v15 + 48) = v17;
      v19 = v23[4];
      v20 = v23[5];
      v21 = v23[6];
      *(_BYTE *)(v15 + 144) = v24;
      *(_OWORD *)(v15 + 112) = v20;
      *(_OWORD *)(v15 + 128) = v21;
      *(_OWORD *)(v15 + 96) = v19;
      if (!--v6)
        return v7;
    }
    swift_release();
  }
  return v7;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_s7CVarArg_ps5NeverOTg506_sSS10d3E17ef106V7resolve3key7options5table6bundle6locale07performB0S2SSg_SSAAE0B7OptionsVAKSo8NSBundleCSgAA6LocaleVSbtFs7ij6_pAC14gH6VXEfU_AF0Z0VTf1cn_nTf4ng_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  __int128 v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v12 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v12;
    v4 = a1 + 32;
    do
    {
      specialized String.LocalizationValue.FormatArgument.resolve<A>(attributed:with:including:)();
      outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup?(v8, v9, v10);
      v12 = v2;
      v6 = *(_QWORD *)(v2 + 16);
      v5 = *(_QWORD *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1);
        v2 = v12;
      }
      *(_QWORD *)(v2 + 16) = v6 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v11, v2 + 40 * v6 + 32);
      v4 += 120;
      --v1;
    }
    while (v1);
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationOptions._PluralizationNumber.CodingKeys and conformance String.LocalizationOptions._PluralizationNumber.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.CodingKeys and conformance String.LocalizationOptions._PluralizationNumber.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.CodingKeys and conformance String.LocalizationOptions._PluralizationNumber.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationOptions._PluralizationNumber.CodingKeys, &unk_1E0F34B78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.CodingKeys and conformance String.LocalizationOptions._PluralizationNumber.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.CodingKeys and conformance String.LocalizationOptions._PluralizationNumber.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.CodingKeys and conformance String.LocalizationOptions._PluralizationNumber.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationOptions._PluralizationNumber.CodingKeys, &unk_1E0F34B78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.CodingKeys and conformance String.LocalizationOptions._PluralizationNumber.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.CodingKeys and conformance String.LocalizationOptions._PluralizationNumber.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.CodingKeys and conformance String.LocalizationOptions._PluralizationNumber.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationOptions._PluralizationNumber.CodingKeys, &unk_1E0F34B78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.CodingKeys and conformance String.LocalizationOptions._PluralizationNumber.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.CodingKeys and conformance String.LocalizationOptions._PluralizationNumber.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.CodingKeys and conformance String.LocalizationOptions._PluralizationNumber.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationOptions._PluralizationNumber.CodingKeys, &unk_1E0F34B78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.CodingKeys and conformance String.LocalizationOptions._PluralizationNumber.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys, &unk_1E0F34C08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys, &unk_1E0F34C08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys, &unk_1E0F34C08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys, &unk_1E0F34C28);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys, &unk_1E0F34C28);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys, &unk_1E0F34C28);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys, &unk_1E0F34C28);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.CodingKeys and conformance String.LocalizationValue.Placeholder.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.CodingKeys and conformance String.LocalizationValue.Placeholder.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.CodingKeys and conformance String.LocalizationValue.Placeholder.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.Placeholder.CodingKeys, &unk_1E0F32B58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.CodingKeys and conformance String.LocalizationValue.Placeholder.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.CodingKeys and conformance String.LocalizationValue.Placeholder.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.CodingKeys and conformance String.LocalizationValue.Placeholder.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.Placeholder.CodingKeys, &unk_1E0F32B58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.CodingKeys and conformance String.LocalizationValue.Placeholder.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.CodingKeys and conformance String.LocalizationValue.Placeholder.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.CodingKeys and conformance String.LocalizationValue.Placeholder.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.Placeholder.CodingKeys, &unk_1E0F32B58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.CodingKeys and conformance String.LocalizationValue.Placeholder.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.CodingKeys and conformance String.LocalizationValue.Placeholder.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.CodingKeys and conformance String.LocalizationValue.Placeholder.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.Placeholder.CodingKeys, &unk_1E0F32B58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.CodingKeys and conformance String.LocalizationValue.Placeholder.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.ObjectCodingKeys and conformance String.LocalizationValue.Placeholder.ObjectCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.ObjectCodingKeys and conformance String.LocalizationValue.Placeholder.ObjectCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.ObjectCodingKeys and conformance String.LocalizationValue.Placeholder.ObjectCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.Placeholder.ObjectCodingKeys, &unk_1E0F32C68);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.ObjectCodingKeys and conformance String.LocalizationValue.Placeholder.ObjectCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.ObjectCodingKeys and conformance String.LocalizationValue.Placeholder.ObjectCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.ObjectCodingKeys and conformance String.LocalizationValue.Placeholder.ObjectCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.Placeholder.ObjectCodingKeys, &unk_1E0F32C68);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.ObjectCodingKeys and conformance String.LocalizationValue.Placeholder.ObjectCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.ObjectCodingKeys and conformance String.LocalizationValue.Placeholder.ObjectCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.ObjectCodingKeys and conformance String.LocalizationValue.Placeholder.ObjectCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.Placeholder.ObjectCodingKeys, &unk_1E0F32C68);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.ObjectCodingKeys and conformance String.LocalizationValue.Placeholder.ObjectCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.DoubleCodingKeys and conformance String.LocalizationValue.Placeholder.DoubleCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.DoubleCodingKeys and conformance String.LocalizationValue.Placeholder.DoubleCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.DoubleCodingKeys and conformance String.LocalizationValue.Placeholder.DoubleCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.Placeholder.DoubleCodingKeys, &unk_1E0F32C48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.DoubleCodingKeys and conformance String.LocalizationValue.Placeholder.DoubleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.DoubleCodingKeys and conformance String.LocalizationValue.Placeholder.DoubleCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.DoubleCodingKeys and conformance String.LocalizationValue.Placeholder.DoubleCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.Placeholder.DoubleCodingKeys, &unk_1E0F32C48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.DoubleCodingKeys and conformance String.LocalizationValue.Placeholder.DoubleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.DoubleCodingKeys and conformance String.LocalizationValue.Placeholder.DoubleCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.DoubleCodingKeys and conformance String.LocalizationValue.Placeholder.DoubleCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.Placeholder.DoubleCodingKeys, &unk_1E0F32C48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.DoubleCodingKeys and conformance String.LocalizationValue.Placeholder.DoubleCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.FloatCodingKeys and conformance String.LocalizationValue.Placeholder.FloatCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.FloatCodingKeys and conformance String.LocalizationValue.Placeholder.FloatCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.FloatCodingKeys and conformance String.LocalizationValue.Placeholder.FloatCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.Placeholder.FloatCodingKeys, &unk_1E0F32C28);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.FloatCodingKeys and conformance String.LocalizationValue.Placeholder.FloatCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.FloatCodingKeys and conformance String.LocalizationValue.Placeholder.FloatCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.FloatCodingKeys and conformance String.LocalizationValue.Placeholder.FloatCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.Placeholder.FloatCodingKeys, &unk_1E0F32C28);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.FloatCodingKeys and conformance String.LocalizationValue.Placeholder.FloatCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.FloatCodingKeys and conformance String.LocalizationValue.Placeholder.FloatCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.FloatCodingKeys and conformance String.LocalizationValue.Placeholder.FloatCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.Placeholder.FloatCodingKeys, &unk_1E0F32C28);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.FloatCodingKeys and conformance String.LocalizationValue.Placeholder.FloatCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.UintCodingKeys and conformance String.LocalizationValue.Placeholder.UintCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.UintCodingKeys and conformance String.LocalizationValue.Placeholder.UintCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.UintCodingKeys and conformance String.LocalizationValue.Placeholder.UintCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.Placeholder.UintCodingKeys, &unk_1E0F32C08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.UintCodingKeys and conformance String.LocalizationValue.Placeholder.UintCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.UintCodingKeys and conformance String.LocalizationValue.Placeholder.UintCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.UintCodingKeys and conformance String.LocalizationValue.Placeholder.UintCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.Placeholder.UintCodingKeys, &unk_1E0F32C08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.UintCodingKeys and conformance String.LocalizationValue.Placeholder.UintCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.UintCodingKeys and conformance String.LocalizationValue.Placeholder.UintCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.UintCodingKeys and conformance String.LocalizationValue.Placeholder.UintCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.Placeholder.UintCodingKeys, &unk_1E0F32C08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.UintCodingKeys and conformance String.LocalizationValue.Placeholder.UintCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.IntCodingKeys and conformance String.LocalizationValue.Placeholder.IntCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.IntCodingKeys and conformance String.LocalizationValue.Placeholder.IntCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.IntCodingKeys and conformance String.LocalizationValue.Placeholder.IntCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.Placeholder.IntCodingKeys, &unk_1E0F32BE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.IntCodingKeys and conformance String.LocalizationValue.Placeholder.IntCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.IntCodingKeys and conformance String.LocalizationValue.Placeholder.IntCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.IntCodingKeys and conformance String.LocalizationValue.Placeholder.IntCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.Placeholder.IntCodingKeys, &unk_1E0F32BE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.IntCodingKeys and conformance String.LocalizationValue.Placeholder.IntCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.IntCodingKeys and conformance String.LocalizationValue.Placeholder.IntCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.IntCodingKeys and conformance String.LocalizationValue.Placeholder.IntCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.Placeholder.IntCodingKeys, &unk_1E0F32BE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.IntCodingKeys and conformance String.LocalizationValue.Placeholder.IntCodingKeys);
  }
  return result;
}

uint64_t sub_181D3EE40()
{
  return 24;
}

__n128 sub_181D3EE4C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t partial apply for implicit closure #1 in String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:format:)()
{
  return swift_getAtKeyPath();
}

unint64_t lazy protocol witness table accessor for type InflectionConcept.CodingKeys and conformance InflectionConcept.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InflectionConcept.CodingKeys and conformance InflectionConcept.CodingKeys;
  if (!lazy protocol witness table cache variable for type InflectionConcept.CodingKeys and conformance InflectionConcept.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for InflectionConcept.CodingKeys, &unk_1E0F1F520);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InflectionConcept.CodingKeys and conformance InflectionConcept.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InflectionConcept.CodingKeys and conformance InflectionConcept.CodingKeys;
  if (!lazy protocol witness table cache variable for type InflectionConcept.CodingKeys and conformance InflectionConcept.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for InflectionConcept.CodingKeys, &unk_1E0F1F520);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InflectionConcept.CodingKeys and conformance InflectionConcept.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InflectionConcept.CodingKeys and conformance InflectionConcept.CodingKeys;
  if (!lazy protocol witness table cache variable for type InflectionConcept.CodingKeys and conformance InflectionConcept.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for InflectionConcept.CodingKeys, &unk_1E0F1F520);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InflectionConcept.CodingKeys and conformance InflectionConcept.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InflectionConcept.CodingKeys and conformance InflectionConcept.CodingKeys;
  if (!lazy protocol witness table cache variable for type InflectionConcept.CodingKeys and conformance InflectionConcept.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for InflectionConcept.CodingKeys, &unk_1E0F1F520);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InflectionConcept.CodingKeys and conformance InflectionConcept.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InflectionConcept.LocalizedPhraseCodingKeys and conformance InflectionConcept.LocalizedPhraseCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InflectionConcept.LocalizedPhraseCodingKeys and conformance InflectionConcept.LocalizedPhraseCodingKeys;
  if (!lazy protocol witness table cache variable for type InflectionConcept.LocalizedPhraseCodingKeys and conformance InflectionConcept.LocalizedPhraseCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for InflectionConcept.LocalizedPhraseCodingKeys, &unk_1E0F1F640);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InflectionConcept.LocalizedPhraseCodingKeys and conformance InflectionConcept.LocalizedPhraseCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InflectionConcept.LocalizedPhraseCodingKeys and conformance InflectionConcept.LocalizedPhraseCodingKeys;
  if (!lazy protocol witness table cache variable for type InflectionConcept.LocalizedPhraseCodingKeys and conformance InflectionConcept.LocalizedPhraseCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for InflectionConcept.LocalizedPhraseCodingKeys, &unk_1E0F1F640);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InflectionConcept.LocalizedPhraseCodingKeys and conformance InflectionConcept.LocalizedPhraseCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InflectionConcept.LocalizedPhraseCodingKeys and conformance InflectionConcept.LocalizedPhraseCodingKeys;
  if (!lazy protocol witness table cache variable for type InflectionConcept.LocalizedPhraseCodingKeys and conformance InflectionConcept.LocalizedPhraseCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for InflectionConcept.LocalizedPhraseCodingKeys, &unk_1E0F1F640);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InflectionConcept.LocalizedPhraseCodingKeys and conformance InflectionConcept.LocalizedPhraseCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InflectionConcept.LocalizedPhraseCodingKeys and conformance InflectionConcept.LocalizedPhraseCodingKeys;
  if (!lazy protocol witness table cache variable for type InflectionConcept.LocalizedPhraseCodingKeys and conformance InflectionConcept.LocalizedPhraseCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for InflectionConcept.LocalizedPhraseCodingKeys, &unk_1E0F1F640);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InflectionConcept.LocalizedPhraseCodingKeys and conformance InflectionConcept.LocalizedPhraseCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InflectionConcept.TermsOfAddressCodingKeys and conformance InflectionConcept.TermsOfAddressCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InflectionConcept.TermsOfAddressCodingKeys and conformance InflectionConcept.TermsOfAddressCodingKeys;
  if (!lazy protocol witness table cache variable for type InflectionConcept.TermsOfAddressCodingKeys and conformance InflectionConcept.TermsOfAddressCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for InflectionConcept.TermsOfAddressCodingKeys, &unk_1E0F1F5B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InflectionConcept.TermsOfAddressCodingKeys and conformance InflectionConcept.TermsOfAddressCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InflectionConcept.TermsOfAddressCodingKeys and conformance InflectionConcept.TermsOfAddressCodingKeys;
  if (!lazy protocol witness table cache variable for type InflectionConcept.TermsOfAddressCodingKeys and conformance InflectionConcept.TermsOfAddressCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for InflectionConcept.TermsOfAddressCodingKeys, &unk_1E0F1F5B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InflectionConcept.TermsOfAddressCodingKeys and conformance InflectionConcept.TermsOfAddressCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InflectionConcept.TermsOfAddressCodingKeys and conformance InflectionConcept.TermsOfAddressCodingKeys;
  if (!lazy protocol witness table cache variable for type InflectionConcept.TermsOfAddressCodingKeys and conformance InflectionConcept.TermsOfAddressCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for InflectionConcept.TermsOfAddressCodingKeys, &unk_1E0F1F5B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InflectionConcept.TermsOfAddressCodingKeys and conformance InflectionConcept.TermsOfAddressCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InflectionConcept.TermsOfAddressCodingKeys and conformance InflectionConcept.TermsOfAddressCodingKeys;
  if (!lazy protocol witness table cache variable for type InflectionConcept.TermsOfAddressCodingKeys and conformance InflectionConcept.TermsOfAddressCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for InflectionConcept.TermsOfAddressCodingKeys, &unk_1E0F1F5B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InflectionConcept.TermsOfAddressCodingKeys and conformance InflectionConcept.TermsOfAddressCodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [TermOfAddress] and conformance <A> [A](unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [TermOfAddress]);
    v8 = a2();
    result = MEMORY[0x186DA9D64](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys, &unk_1E0F1CE00);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys, &unk_1E0F1CE00);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys, &unk_1E0F1CE00);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys, &unk_1E0F1CE00);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys, &unk_1E0F1CE90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys, &unk_1E0F1CE90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys, &unk_1E0F1CE90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys, &unk_1E0F1CEB0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys, &unk_1E0F1CEB0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys, &unk_1E0F1CEB0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys, &unk_1E0F1CEB0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys);
  }
  return result;
}

uint64_t outlined release of AttributedString.LocalizationOptions(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_s7CVarArg_p6vararg_AJ15_AttributeFixupOSg11attrStrInfots5NeverOTg506_sSS10d3E17ef101V23_formatAttributedString_17preparedArguments7options5scope0D13Configuration6localeAA0eF0VSS_SayAC14gh51VGAK0B7OptionsVxmSo12NSDictionaryCSgAA6LocaleVtAA14l11ScopeRzlFs7ij17_p6vararg_AM01_R5m9OSg11attrO44InfotAMXEfU_AA0R6ScopesO0A10AttributesV_TGm5AF6LocaleVTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD v16[2];
  _OWORD v17[2];
  uint64_t v18;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v18 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    v4 = v18;
    v8 = a1 + 32;
    do
    {
      specialized String.LocalizationValue.FormatArgument.resolve<A>(attributed:with:including:)(v16, (char *)v17 + 8, 1, a2, a3);
      v18 = v4;
      v10 = *(_QWORD *)(v4 + 16);
      v9 = *(_QWORD *)(v4 + 24);
      if (v10 >= v9 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
        v4 = v18;
      }
      *(_QWORD *)(v4 + 16) = v10 + 1;
      v11 = (_OWORD *)(v4 + (v10 << 6));
      v12 = v16[0];
      v13 = v16[1];
      v14 = v17[0];
      *(_OWORD *)((char *)v11 + 73) = *(_OWORD *)((char *)v17 + 9);
      v11[3] = v13;
      v11[4] = v14;
      v11[2] = v12;
      v8 += 120;
      --v3;
    }
    while (v3);
  }
  return v4;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_AJ14CodableStorageOs5NeverOTg506_sSS10d3E17ef90V6encode33_6BD3BCCACE0AF34AB8D7E61AF16B4164LL2to14fallbackLocaleys7Encoder_p_AA0O0VtKFAC14gh3V14iJ8OALXEfU_AF6LocaleVTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  _QWORD v18[2];
  _BYTE v19[120];
  uint64_t v20;

  v7 = type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (_DWORD *)((char *)&v18[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(_QWORD *)(a1 + 16);
  v12 = MEMORY[0x1E0DEE9D8];
  if (v11)
  {
    v17 = v3;
    v20 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
    v12 = v20;
    v13 = a1 + 32;
    do
    {
      outlined init with copy of String.LocalizationValue.FormatArgument.Storage(v13, (uint64_t)v19);
      v18[0] = a2;
      v18[1] = a3;
      swift_unknownObjectRetain();
      String.LocalizationValue.FormatArgument.CodableStorage.init(_:fallbackLocale:)((uint64_t)v19, v18, v10);
      v20 = v12;
      v15 = *(_QWORD *)(v12 + 16);
      v14 = *(_QWORD *)(v12 + 24);
      if (v15 >= v14 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
        v12 = v20;
      }
      *(_QWORD *)(v12 + 16) = v15 + 1;
      outlined init with take of ICUNumberFormatter.Signature((uint64_t)v10, v12+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v15, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
      v13 += 120;
      --v11;
    }
    while (v11);
  }
  return v12;
}

uint64_t partial apply for specialized closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(Swift::String *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return specialized closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(a1, v1 + v4, (NSDecimal **)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL)));
}

uint64_t objectdestroyTm_0()
{
  uint64_t v0;
  uint64_t v1;
  int EnumCaseMultiPayload;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(0)
                                      - 8)
                          + 80);
  type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    swift_unknownObjectRelease();
    v3 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
LABEL_6:
    v4 = *(int *)(v3 + 20);
    v5 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    goto LABEL_8;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (EnumCaseMultiPayload)
      return swift_deallocObject();
    swift_unknownObjectRelease();
    v3 = type metadata accessor for NSDecimal.FormatStyle(0);
    goto LABEL_6;
  }
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  v4 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
  v5 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
LABEL_8:
  v6 = v0 + ((v1 + 16) & ~v1) + v4 + *(int *)(v5 + 36);
  v7 = type metadata accessor for FloatingPointRoundingRule();
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #2 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v1 + ((*(_QWORD *)(v3 + 64) + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  return specialized closure #2 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(a1, v1 + v4, *(_QWORD *)v5, *(_QWORD *)(v5 + 8), *(_DWORD *)(v5 + 16));
}

{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle(0)
                 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return specialized closure #2 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(a1, v1 + v4, *(double *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)));
}

{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return specialized closure #2 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(a1, v1 + v4, *(_QWORD *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)));
}

{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[6];
  __int16 v7;

  v2 = *(_OWORD *)(v1 + 96);
  v6[4] = *(_OWORD *)(v1 + 80);
  v6[5] = v2;
  v7 = *(_WORD *)(v1 + 112);
  v3 = *(_OWORD *)(v1 + 32);
  v6[0] = *(_OWORD *)(v1 + 16);
  v6[1] = v3;
  v4 = *(_OWORD *)(v1 + 64);
  v6[2] = *(_OWORD *)(v1 + 48);
  v6[3] = v4;
  return specialized closure #2 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(a1, (uint64_t)v6, *(double *)(v1 + 120), *(double *)(v1 + 128)) & 1;
}

{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v6[6];
  _OWORD v7[2];

  v2 = *(_OWORD *)(v1 + 96);
  v6[4] = *(_OWORD *)(v1 + 80);
  v6[5] = v2;
  v7[0] = *(_OWORD *)(v1 + 112);
  *(_OWORD *)((char *)v7 + 10) = *(_OWORD *)(v1 + 122);
  v3 = *(_OWORD *)(v1 + 32);
  v6[0] = *(_OWORD *)(v1 + 16);
  v6[1] = v3;
  v4 = *(_OWORD *)(v1 + 64);
  v6[2] = *(_OWORD *)(v1 + 48);
  v6[3] = v4;
  return specialized closure #2 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(a1, v6, *(double *)(v1 + 144)) & 1;
}

uint64_t partial apply for specialized closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle(0)
                                      - 8)
                          + 80);
  return specialized closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(*a1, a1[1], v1 + ((v3 + 16) & ~v3));
}

{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return specialized closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(*a1, a1[1], v1 + v4, *(_QWORD *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)));
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[6];
  __int16 v9;

  v3 = *a1;
  v2 = a1[1];
  v4 = *(_OWORD *)(v1 + 96);
  v8[4] = *(_OWORD *)(v1 + 80);
  v8[5] = v4;
  v9 = *(_WORD *)(v1 + 112);
  v5 = *(_OWORD *)(v1 + 32);
  v8[0] = *(_OWORD *)(v1 + 16);
  v8[1] = v5;
  v6 = *(_OWORD *)(v1 + 64);
  v8[2] = *(_OWORD *)(v1 + 48);
  v8[3] = v6;
  return specialized closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(v3, v2, (uint64_t)v8, *(double *)(v1 + 120), *(double *)(v1 + 128));
}

uint64_t objectdestroy_5Tm()
{
  uint64_t v0;
  uint64_t v1;
  int EnumCaseMultiPayload;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle(0)
                                      - 8)
                          + 80);
  type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    swift_unknownObjectRelease();
    v3 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
LABEL_6:
    v4 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v3) + 36);
    v5 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    goto LABEL_8;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (EnumCaseMultiPayload)
      return swift_deallocObject();
    swift_unknownObjectRelease();
    v3 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
    goto LABEL_6;
  }
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  v4 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency)
              + 40);
  v5 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
LABEL_8:
  v6 = v0 + ((v1 + 16) & ~v1) + v4 + *(int *)(v5 + 36);
  v7 = type metadata accessor for FloatingPointRoundingRule();
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  return swift_deallocObject();
}

uint64_t objectdestroy_14Tm()
{
  uint64_t v0;
  uint64_t v1;
  int EnumCaseMultiPayload;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(0)
                                      - 8)
                          + 80);
  type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    swift_unknownObjectRelease();
    v3 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
LABEL_6:
    v4 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v3) + 36);
    v5 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    goto LABEL_8;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (EnumCaseMultiPayload)
      return swift_deallocObject();
    swift_unknownObjectRelease();
    v3 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>;
    goto LABEL_6;
  }
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  v4 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency)
              + 40);
  v5 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
LABEL_8:
  v6 = v0 + ((v1 + 16) & ~v1) + v4 + *(int *)(v5 + 36);
  v7 = type metadata accessor for FloatingPointRoundingRule();
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  return swift_deallocObject();
}

uint64_t sub_181D3F958()
{
  return objectdestroy_17Tm();
}

uint64_t sub_181D3F9AC()
{
  return objectdestroy_17Tm();
}

uint64_t sub_181D3F9FC()
{
  return objectdestroy_17Tm();
}

uint64_t objectdestroy_17Tm()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_181D3FA44()
{
  return objectdestroy_26Tm();
}

void partial apply for specialized closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(uint64_t *a1)
{
  _OWORD *v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7[6];
  _OWORD v8[2];

  v3 = *a1;
  v2 = a1[1];
  v4 = v1[6];
  v7[4] = v1[5];
  v7[5] = v4;
  v8[0] = v1[7];
  *(_OWORD *)((char *)v8 + 10) = *(_OWORD *)((char *)v1 + 122);
  v5 = v1[2];
  v7[0] = v1[1];
  v7[1] = v5;
  v6 = v1[4];
  v7[2] = v1[3];
  v7[3] = v6;
  specialized closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(v3, v2, v7);
}

uint64_t sub_181D3FAA0()
{
  return objectdestroy_26Tm();
}

uint64_t sub_181D3FAF8()
{
  return objectdestroy_26Tm();
}

uint64_t objectdestroy_26Tm()
{
  uint64_t v0;

  outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_WORD *)(v0 + 136));
  return swift_deallocObject();
}

uint64_t lazy protocol witness table accessor for type NSNumber and conformance NSObject(unint64_t *a1, unint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = type metadata accessor for NSMorphologyPronoun(255, a2);
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEFD08], v4);
    atomic_store(result, a1);
  }
  return result;
}

id partial apply for closure #1 in AttributedString.init<A>(localized:options:including:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in AttributedString.init<A>(localized:options:including:)(a1, *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_OWORD **)(v2 + 16), *(void **)(v2 + 24), a2);
}

uint64_t outlined retain of AttributedString.LocalizationOptions(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationOptions._PluralizationNumber and conformance String.LocalizationOptions._PluralizationNumber()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber and conformance String.LocalizationOptions._PluralizationNumber;
  if (!lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber and conformance String.LocalizationOptions._PluralizationNumber)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationOptions._PluralizationNumber, &type metadata for String.LocalizationOptions._PluralizationNumber);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber and conformance String.LocalizationOptions._PluralizationNumber);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.StringInterpolation and conformance String.LocalizationValue.StringInterpolation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.StringInterpolation and conformance String.LocalizationValue.StringInterpolation;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.StringInterpolation and conformance String.LocalizationValue.StringInterpolation)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.StringInterpolation, &type metadata for String.LocalizationValue.StringInterpolation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.StringInterpolation and conformance String.LocalizationValue.StringInterpolation);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InflectionConcept and conformance InflectionConcept()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InflectionConcept and conformance InflectionConcept;
  if (!lazy protocol witness table cache variable for type InflectionConcept and conformance InflectionConcept)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for InflectionConcept, &type metadata for InflectionConcept);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InflectionConcept and conformance InflectionConcept);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString.LocalizationOptions._PluralizationNumber and conformance AttributedString.LocalizationOptions._PluralizationNumber()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber and conformance AttributedString.LocalizationOptions._PluralizationNumber;
  if (!lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber and conformance AttributedString.LocalizationOptions._PluralizationNumber)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.LocalizationOptions._PluralizationNumber, &type metadata for AttributedString.LocalizationOptions._PluralizationNumber);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber and conformance AttributedString.LocalizationOptions._PluralizationNumber);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString.FormattingOptions and conformance AttributedString.FormattingOptions()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.FormattingOptions and conformance AttributedString.FormattingOptions;
  if (!lazy protocol witness table cache variable for type AttributedString.FormattingOptions and conformance AttributedString.FormattingOptions)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.FormattingOptions, &type metadata for AttributedString.FormattingOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.FormattingOptions and conformance AttributedString.FormattingOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.FormattingOptions and conformance AttributedString.FormattingOptions;
  if (!lazy protocol witness table cache variable for type AttributedString.FormattingOptions and conformance AttributedString.FormattingOptions)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.FormattingOptions, &type metadata for AttributedString.FormattingOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.FormattingOptions and conformance AttributedString.FormattingOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.FormattingOptions and conformance AttributedString.FormattingOptions;
  if (!lazy protocol witness table cache variable for type AttributedString.FormattingOptions and conformance AttributedString.FormattingOptions)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.FormattingOptions, &type metadata for AttributedString.FormattingOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.FormattingOptions and conformance AttributedString.FormattingOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.FormattingOptions and conformance AttributedString.FormattingOptions;
  if (!lazy protocol witness table cache variable for type AttributedString.FormattingOptions and conformance AttributedString.FormattingOptions)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.FormattingOptions, &type metadata for AttributedString.FormattingOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.FormattingOptions and conformance AttributedString.FormattingOptions);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions;
  if (!lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.InterpolationOptions, &type metadata for AttributedString.InterpolationOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions;
  if (!lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.InterpolationOptions, &type metadata for AttributedString.InterpolationOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions;
  if (!lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.InterpolationOptions, &type metadata for AttributedString.InterpolationOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions;
  if (!lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.InterpolationOptions, &type metadata for AttributedString.InterpolationOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions);
  }
  return result;
}

uint64_t associated type witness table accessor for _FormatSpecifiable._Arg : CVarArg in Int()
{
  return MEMORY[0x1E0DEDCD8];
}

uint64_t associated type witness table accessor for _FormatSpecifiable._Arg : CVarArg in Int8()
{
  return MEMORY[0x1E0DEDC38];
}

uint64_t associated type witness table accessor for _FormatSpecifiable._Arg : CVarArg in UInt()
{
  return MEMORY[0x1E0DEE1F0];
}

uint64_t associated type witness table accessor for _FormatSpecifiable._Arg : CVarArg in UInt8()
{
  return MEMORY[0x1E0DEE168];
}

uint64_t associated type witness table accessor for _FormatSpecifiable._Arg : CVarArg in Float()
{
  return MEMORY[0x1E0DEB1E8];
}

uint64_t associated type witness table accessor for _FormatSpecifiable._Arg : CVarArg in Double()
{
  return MEMORY[0x1E0DEB100];
}

unint64_t instantiation function for generic protocol witness table for CGFloat(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t destroy for String.LocalizationOptions()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for String.LocalizationOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for String.LocalizationOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for String.LocalizationOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for String.LocalizationOptions(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 41))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for String.LocalizationOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for String.LocalizationOptions()
{
  return &type metadata for String.LocalizationOptions;
}

ValueMetadata *type metadata accessor for String.LocalizationOptions._PluralizationNumber()
{
  return &type metadata for String.LocalizationOptions._PluralizationNumber;
}

ValueMetadata *type metadata accessor for String.LocalizationValue.Placeholder()
{
  return &type metadata for String.LocalizationValue.Placeholder;
}

_QWORD *assignWithCopy for String.LocalizationValue(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for String.LocalizationValue(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined copy of InflectionConcept()
{
  return swift_bridgeObjectRetain();
}

uint64_t destroy for InflectionConcept()
{
  return outlined consume of InflectionConcept();
}

uint64_t outlined consume of InflectionConcept()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeBufferWithCopyOfBuffer for InflectionConcept(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  outlined copy of InflectionConcept();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for InflectionConcept(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  outlined copy of InflectionConcept();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of InflectionConcept();
  return a1;
}

uint64_t assignWithTake for InflectionConcept(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of InflectionConcept();
  return a1;
}

ValueMetadata *type metadata accessor for InflectionConcept()
{
  return &type metadata for InflectionConcept;
}

uint64_t destroy for AttributedString.LocalizationOptions()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AttributedString.LocalizationOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AttributedString.LocalizationOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  v4 = *(_QWORD *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for AttributedString.LocalizationOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttributedString.LocalizationOptions(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 57))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributedString.LocalizationOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 57) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AttributedString.LocalizationOptions()
{
  return &type metadata for AttributedString.LocalizationOptions;
}

uint64_t getEnumTagSinglePayload for AttributedString.LocalizationOptions._PluralizationNumber(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AttributedString.LocalizationOptions._PluralizationNumber(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t getEnumTag for AttributedString.LocalizationOptions._PluralizationNumber(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t destructiveInjectEnumTag for AttributedString.LocalizationOptions._PluralizationNumber(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for AttributedString.LocalizationOptions._PluralizationNumber()
{
  return &type metadata for AttributedString.LocalizationOptions._PluralizationNumber;
}

ValueMetadata *type metadata accessor for AttributedString.FormattingOptions()
{
  return &type metadata for AttributedString.FormattingOptions;
}

ValueMetadata *type metadata accessor for AttributedString.InterpolationOptions()
{
  return &type metadata for AttributedString.InterpolationOptions;
}

uint64_t dispatch thunk of _FormatSpecifiable._arg.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

_QWORD *assignWithCopy for LocalizedStringResource(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a2[8];
  a1[7] = a2[7];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[8] = v4;
  v5 = (void *)a2[9];
  v6 = (void *)a1[9];
  a1[9] = v5;
  v7 = v5;

  a1[10] = a2[10];
  swift_retain();
  swift_release();
  a1[11] = a2[11];
  swift_retain();
  swift_release();
  a1[12] = a2[12];
  a1[13] = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for LocalizedStringResource(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_unknownObjectRelease();
  v5 = *(void **)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);

  swift_release();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_release();
  v6 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined copy of LocalizedStringResource.BundleDescription(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  void *v4;
  id v5;

  if (a4 == 1)
  {
    v4 = (void *)result;
    swift_retain();
    v5 = v4;
    return swift_retain();
  }
  return result;
}

void *destroy for LocalizedStringResource.BundleDescription(uint64_t a1)
{
  return outlined consume of LocalizedStringResource.BundleDescription(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t initializeWithCopy for LocalizedStringResource.BundleDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  outlined copy of LocalizedStringResource.BundleDescription(*(_QWORD *)a2, v4, v5, v6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for LocalizedStringResource.BundleDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  outlined copy of LocalizedStringResource.BundleDescription(*(_QWORD *)a2, v4, v5, v6);
  v7 = *(void **)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v10 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  outlined consume of LocalizedStringResource.BundleDescription(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for LocalizedStringResource.BundleDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(void **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  outlined consume of LocalizedStringResource.BundleDescription(v5, v7, v6, v8);
  return a1;
}

uint64_t dispatch thunk of CustomLocalizedStringResourceConvertible.localizedStringResource.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

void *type metadata accessor for AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys()
{
  return &unk_1E0F1CE00;
}

void *type metadata accessor for AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys()
{
  return &unk_1E0F1CEB0;
}

void *type metadata accessor for AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys()
{
  return &unk_1E0F1CE90;
}

void *type metadata accessor for InflectionConcept.CodingKeys()
{
  return &unk_1E0F1F520;
}

void *type metadata accessor for InflectionConcept.TermsOfAddressCodingKeys()
{
  return &unk_1E0F1F5B0;
}

void *type metadata accessor for InflectionConcept.LocalizedPhraseCodingKeys()
{
  return &unk_1E0F1F640;
}

uint64_t storeEnumTagSinglePayload for String.LocalizationValue.Placeholder(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_181D40D98 + 4 * byte_182150A43[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_181D40DCC + 4 * byte_182150A3E[v4]))();
}

uint64_t sub_181D40DCC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181D40DD4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181D40DDCLL);
  return result;
}

uint64_t sub_181D40DE8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181D40DF0);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_181D40DF4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181D40DFC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for String.LocalizationValue.Placeholder.CodingKeys()
{
  return &unk_1E0F32B58;
}

void *type metadata accessor for String.LocalizationValue.Placeholder.IntCodingKeys()
{
  return &unk_1E0F32BE8;
}

void *type metadata accessor for String.LocalizationValue.Placeholder.UintCodingKeys()
{
  return &unk_1E0F32C08;
}

void *type metadata accessor for String.LocalizationValue.Placeholder.FloatCodingKeys()
{
  return &unk_1E0F32C28;
}

void *type metadata accessor for String.LocalizationValue.Placeholder.DoubleCodingKeys()
{
  return &unk_1E0F32C48;
}

void *type metadata accessor for String.LocalizationValue.Placeholder.ObjectCodingKeys()
{
  return &unk_1E0F32C68;
}

void *type metadata accessor for String.LocalizationOptions._PluralizationNumber.CodingKeys()
{
  return &unk_1E0F34B78;
}

uint64_t storeEnumTagSinglePayload for AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_181D40EB8 + 4 * byte_182150A52[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_181D40ED8 + 4 * byte_182150A57[v4]))();
}

_BYTE *sub_181D40EB8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_181D40ED8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181D40EE0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181D40EE8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181D40EF0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181D40EF8(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys()
{
  return &unk_1E0F34C28;
}

void *type metadata accessor for String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys()
{
  return &unk_1E0F34C08;
}

void specialized _PlistDecoder.init(referencing:options:codingPathNode:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v11;
  unint64_t v12;

  v4 = v3;
  v3[3] = a1;
  v3[2] = MEMORY[0x1E0DEE9D8];
  swift_retain();
  XMLPlistMap.loadValue(at:)(0);
  if ((~v7 & 0xF000000000000007) != 0)
  {
    v8 = v7;
    v9 = (_QWORD *)v4[2];
    outlined copy of XMLPlistMap.Value(v7);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v4[2] = v9;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      v4[2] = v9;
    }
    v12 = v9[2];
    v11 = v9[3];
    if (v12 >= v11 >> 1)
      v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v9);
    v9[2] = v12 + 1;
    v9[v12 + 4] = v8;
    v4[2] = v9;
    outlined consume of XMLPlistMap.Value?(v8);
    v4[4] = a2;
    v4[5] = a3;
  }
  else
  {
    __break(1u);
  }
}

uint64_t specialized String.LocalizationValue.Placeholder.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 7630441 && a2 == 0xE300000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1953393013 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x74616F6C66 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656C62756F64 && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x7463656A626FLL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t specialized InflectionConcept.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x41664F736D726574 && a2 == 0xEE00737365726464;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x657A696C61636F6CLL && a2 == 0xEF65736172685064)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized String.LocalizationOptions._PluralizationNumber.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6369666963657073 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E776F6E6B6E75 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized String.LocalizationValue.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 7955819 && a2 == 0xE300000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E656D75677261 && a2 == 0xE900000000000073)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized LocalizedStringResource.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 7955819 && a2 == 0xE300000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x56746C7561666564 && a2 == 0xEC00000065756C61
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C626174 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x5255656C646E7562 && a2 == 0xE90000000000004CLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000018230BF50)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_181D422E0()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for specialized closure #1 in PropertyListDecoder._decode<A>(_:from:format:)(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  specialized closure #1 in PropertyListDecoder._decode<A>(_:from:format:)(a1, a2, *(_QWORD *)(v3 + 16), *(void (**)(uint64_t *__return_ptr, _QWORD *))(v3 + 24), *(_QWORD **)(v3 + 40), a3);
}

void partial apply for specialized closure #2 in PropertyListDecoder._decode<A>(_:from:format:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  specialized closure #2 in PropertyListDecoder._decode<A>(_:from:format:)(a1, a2, *(_QWORD *)(v3 + 16), *(void (**)(uint64_t *__return_ptr, _QWORD *))(v3 + 24), *(_QWORD **)(v3 + 40), a3);
}

void partial apply for specialized closure #3 in PropertyListDecoder._decode<A>(_:from:format:)(unint64_t a1, unint64_t a2)
{
  uint64_t v2;

  specialized closure #3 in PropertyListDecoder._decode<A>(_:from:format:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD **)(v2 + 24), *(void (**)(__int128 *))(v2 + 32));
}

uint64_t partial apply for specialized closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return specialized closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)(a1, a2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 16), *(_QWORD *(**)(_OWORD *__return_ptr, unsigned __int8 *, uint64_t))(v3 + 40), *(void (**)(id))(v3 + 56), a3);
}

unint64_t outlined consume of XMLPlistMap.Value?(unint64_t result)
{
  if ((~result & 0xF000000000000007) != 0)
    return outlined consume of XMLPlistMap.Value(result);
  return result;
}

uint64_t _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleVSgWOg(uint64_t a1)
{
  if ((*(_QWORD *)(a1 + 64) >> 1) > 0x80000000)
    return -(*(_QWORD *)(a1 + 64) >> 1);
  else
    return 0;
}

void outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, __int16 a16)
{
  if ((a16 & 0xFEF8) != 0
    || (a9 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFELL
    || ((a13 | a11 | a15) & 0xF000000000000007) != 0)
  {
    outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
  }
}

uint64_t outlined consume of Date.IntervalFormatStyle?(uint64_t result)
{
  if (result)
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t outlined retain of Date.IntervalFormatStyle(uint64_t a1)
{
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t outlined release of (Date, String.LocalizationValue.FormatArgument.DateArgumentFormatStyle)(uint64_t a1)
{
  outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_WORD *)(a1 + 128));
  return a1;
}

void partial apply for closure #1 in String.LocalizationValue._formatAttributedString<A>(_:preparedArguments:options:scope:formatConfiguration:locale:)()
{
  String.LocalizationValue.FormatArgument.resolve<A>(attributed:with:including:)();
}

uint64_t type metadata accessor for _FoundationPlusScope(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _FoundationPlusScope);
}

uint64_t _s10Foundation16AttributedStringV22MarkdownSourcePositionVSg_SnyAC5IndexVGtSgWOg(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 136);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return ((_DWORD)v1 - 1) & ~(((int)v1 - 1) >> 31);
}

uint64_t sub_181D425D4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)()
{
  uint64_t v0;

  return closure #3 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(v0);
}

uint64_t partial apply for closure #4 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(void *a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *, uint64_t, uint64_t, char *), uint64_t a5)
{
  uint64_t v5;

  return closure #4 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(a1, a2, a3, a4, a5, v5);
}

uint64_t sub_181D42608()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()(a1, a2, a3, a4, a5, *(uint64_t (**)(void))(v5 + 16));
}

uint64_t partial apply for closure #5 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(uint64_t a1, uint64_t a2, void (*a3)(_BYTE *, uint64_t, uint64_t, char *), uint64_t a4)
{
  uint64_t v4;

  return closure #5 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(a1, a2, a3, a4, v4);
}

uint64_t sub_181D42628()
{
  return swift_deallocObject();
}

uint64_t sub_181D42638()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #6 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(uint64_t a1, uint64_t a2, void (*a3)(id, uint64_t, uint64_t, char *), uint64_t a4)
{
  uint64_t v4;

  return closure #6 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(a1, a2, a3, a4, *(uint64_t **)(v4 + 16));
}

uint64_t sub_181D42650()
{
  return swift_deallocObject();
}

uint64_t sub_181D42660()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #7 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #7 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(a1, a2, a3, *(uint64_t **)(v3 + 16));
}

uint64_t sub_181D42678()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> ()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> ()(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_181D42690()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #8 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #8 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(a1, a2, *(_QWORD **)(v2 + 16));
}

uint64_t sub_181D426A8()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned _NSRange) -> (@unowned Bool)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return thunk for @callee_guaranteed (@unowned _NSRange) -> (@unowned Bool)(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t sub_181D426C0()
{
  return swift_deallocObject();
}

double partial apply for closure #9 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)@<D0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;

  return closure #9 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(a1, a2, a3, *(_QWORD **)(v4 + 16), a4);
}

uint64_t sub_181D426D8()
{
  return swift_deallocObject();
}

uint64_t sub_181D426E8()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #10 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #10 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(a1, a2, *(uint64_t **)(v2 + 16));
}

uint64_t sub_181D42700()
{
  return swift_deallocObject();
}

uint64_t sub_181D42710()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #11 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  closure #11 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(a1, a2, a3, a4, *(void **)(v4 + 16));
}

uint64_t sub_181D4273C()
{
  return swift_deallocObject();
}

uint64_t sub_181D4274C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #12 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v3;

  return closure #12 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(a1, a2, a3, *(uint64_t **)(v3 + 16), *(void **)(v3 + 24));
}

uint64_t sub_181D42778()
{
  return swift_deallocObject();
}

double partial apply for closure #14 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #14 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_181D42794()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed Any) -> (@out Any?)(uint64_t a1)
{
  uint64_t v1;

  return thunk for @callee_guaranteed (@in_guaranteed Any) -> (@out Any?)(a1, *(uint64_t (**)(void))(v1 + 16));
}

double _s10Foundation16AttributedStringV22MarkdownSourcePositionVSg_SnyAC5IndexVGtSgWOi0_(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 2;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  return result;
}

uint64_t sub_181D427D0()
{
  return swift_deallocObject();
}

uint64_t sub_181D427E0()
{
  return swift_deallocObject();
}

uint64_t sub_181D427F0()
{
  return swift_deallocObject();
}

uint64_t sub_181D42800()
{
  return swift_deallocObject();
}

uint64_t sub_181D42810()
{
  return swift_deallocObject();
}

uint64_t sub_181D42820()
{
  return swift_deallocObject();
}

uint64_t sub_181D42830()
{
  return swift_deallocObject();
}

uint64_t sub_181D42840()
{
  return swift_deallocObject();
}

uint64_t sub_181D42850()
{
  return swift_deallocObject();
}

uint64_t sub_181D42860()
{
  return swift_deallocObject();
}

uint64_t sub_181D42870()
{
  return swift_deallocObject();
}

uint64_t sub_181D42880()
{
  return swift_deallocObject();
}

uint64_t sub_181D42890()
{
  return swift_deallocObject();
}

uint64_t sub_181D428A0()
{
  return swift_deallocObject();
}

uint64_t objectdestroy_132Tm()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_181D428E0()
{
  return swift_deallocObject();
}

uint64_t outlined init with take of AttributedString.LocalizationOptions._PluralizationNumber(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  *(_BYTE *)(a2 + 8) = *((_BYTE *)a1 + 8);
  *(_QWORD *)a2 = v2;
  return a2;
}

uint64_t sub_181D42908()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + 32);
  if (v1 <= 0xFD)
    outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), v1 & 1);
  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for String.LocalizationValue.AttributedStringCache()
{
  return &type metadata for String.LocalizationValue.AttributedStringCache;
}

uint64_t type metadata completion function for _FoundationPlusScope()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _FoundationPlusScope(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = ~v5;
  if (v5 > 7 || (*(_DWORD *)(v4 + 80) & 0x100000) != 0 || *(_QWORD *)(v4 + 64) > 0x18uLL)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v5 + 16) & v6));
    swift_retain();
  }
  else
  {
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + v5) & v6, ((unint64_t)a2 + v5) & v6);
  }
  return v3;
}

uint64_t destroy for _FoundationPlusScope(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t initializeWithCopy for _FoundationPlusScope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 16))((*(unsigned __int8 *)(v4 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t assignWithCopy for _FoundationPlusScope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 24))((*(unsigned __int8 *)(v4 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t initializeWithTake for _FoundationPlusScope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))((*(unsigned __int8 *)(v4 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t assignWithTake for _FoundationPlusScope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 40))((*(unsigned __int8 *)(v4 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for _FoundationPlusScope(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((*(unsigned __int8 *)(v4 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_181D42C28 + 4 * byte_182150A67[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for _FoundationPlusScope(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t TermOfAddress.isSupportedInLanguage(_:)(__int128 *a1)
{
  uint64_t *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  char v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String v32;
  Swift::String v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  Swift::String v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60[13];

  v2 = a1[3];
  v56 = a1[2];
  v57 = v2;
  v3 = a1[5];
  v58 = a1[4];
  v59 = v3;
  v4 = a1[1];
  v54 = *a1;
  v55 = v4;
  v5 = v1[12];
  if ((unint64_t)(v5 - 1) < 3)
    goto LABEL_2;
  if (!v5)
  {
    v7 = v54;
    v8 = v55;
    outlined retain of Locale.Language((uint64_t *)&v54, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
    v10 = *((_QWORD *)&v7 + 1);
    v9 = v7;
    object = (void *)*((_QWORD *)&v8 + 1);
    countAndFlagsBits = v8;
    if (!*((_QWORD *)&v7 + 1))
    {
      v13 = specialized _withFixedCharBuffer(size:_:)(257, (uint64_t *)&v54);
      v10 = v14;
      if (v14)
      {
        v9 = v13;
        v15 = String.lowercased()();
        countAndFlagsBits = v15._countAndFlagsBits;
        object = v15._object;
      }
      else
      {
        v9 = 0;
        countAndFlagsBits = 0;
        object = 0;
      }
    }
    outlined copy of Locale.LanguageCode?(v7, *((uint64_t *)&v7 + 1));
    outlined retain of Locale.Language((uint64_t *)&v54, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
    v33 = String.lowercased()();
    if (v10)
    {
      if (countAndFlagsBits == v33._countAndFlagsBits && object == v33._object)
        v6 = 1;
      else
        v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Locale.LanguageCode?(v9, v10);
      return v6 & 1;
    }
    outlined consume of Locale.LanguageCode?(v9, 0);
    v34 = 28261;
    v35 = 0xE200000000000000;
LABEL_31:
    outlined consume of Locale.LanguageCode?(v34, v35);
    v6 = 0;
    return v6 & 1;
  }
  v47 = v1[1];
  v48 = *v1;
  v16 = v1[2];
  v17 = v1[3];
  v18 = v1[4];
  v19 = v1[5];
  v21 = v1[6];
  v20 = v1[7];
  v23 = v1[8];
  v22 = v1[9];
  v25 = v1[10];
  v24 = v1[11];
  v60[0] = v48;
  v60[1] = v47;
  v60[2] = v16;
  v60[3] = v17;
  v60[4] = v18;
  v60[5] = v19;
  v60[6] = v21;
  v60[7] = v20;
  v60[8] = v23;
  v60[9] = v22;
  v60[10] = v25;
  v60[11] = v24;
  outlined copy of Locale.LanguageCode?(v48, v47);
  v49 = v19;
  v50 = v18;
  v26 = v19;
  v27 = v16;
  outlined copy of Locale.LanguageCode?(v18, v26);
  v28 = v47;
  v29 = v48;
  outlined copy of Locale.LanguageCode?(v23, v22);
  v30 = v48;
  v53 = v47;
  v46 = v27;
  v51 = (void *)v17;
  if (!v47)
  {
    outlined copy of Locale.LanguageCode?(v48, 0);
    outlined copy of Locale.LanguageCode?(v50, v49);
    outlined copy of Locale.LanguageCode?(v23, v22);
    v52 = specialized _withFixedCharBuffer(size:_:)(257, v60);
    v53 = v31;
    outlined consume of Locale.LanguageCode?(v48, 0);
    outlined consume of Locale.LanguageCode?(v50, v49);
    outlined consume of Locale.LanguageCode?(v23, v22);
    if (v53)
    {
      v30 = v52;
      v32 = String.lowercased()();
      v46 = v32._countAndFlagsBits;
      v51 = v32._object;
    }
    else
    {
      v30 = 0;
      v53 = 0;
      v46 = 0;
      v51 = 0;
    }
    v28 = 0;
    v29 = v48;
  }
  outlined copy of Locale.LanguageCode?(v29, v28);
  outlined consume of Locale.LanguageCode?(v29, v28);
  outlined consume of Locale.LanguageCode?(v50, v49);
  outlined consume of Locale.LanguageCode?(v23, v22);
  v36 = v54;
  v37 = v55;
  outlined retain of Locale.Language((uint64_t *)&v54, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
  v39 = *((_QWORD *)&v36 + 1);
  v38 = v36;
  v41 = (void *)*((_QWORD *)&v37 + 1);
  v40 = v37;
  if (!*((_QWORD *)&v36 + 1))
  {
    v42 = specialized _withFixedCharBuffer(size:_:)(257, (uint64_t *)&v54);
    v39 = v43;
    if (v43)
    {
      v38 = v42;
      v44 = String.lowercased()();
      v40 = v44._countAndFlagsBits;
      v41 = v44._object;
    }
    else
    {
      v38 = 0;
      v40 = 0;
      v41 = 0;
    }
  }
  outlined copy of Locale.LanguageCode?(v36, *((uint64_t *)&v36 + 1));
  outlined retain of Locale.Language((uint64_t *)&v54, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
  if (!v53)
  {
    if (!v39)
    {
LABEL_2:
      v6 = 1;
      return v6 & 1;
    }
    goto LABEL_30;
  }
  if (!v39)
  {
LABEL_30:
    outlined consume of Locale.LanguageCode?(v30, v53);
    v34 = v38;
    v35 = v39;
    goto LABEL_31;
  }
  if (v46 == v40 && v51 == v41)
    v6 = 1;
  else
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
  outlined copy of Locale.LanguageCode?(v30, v53);
  outlined consume of Locale.LanguageCode?(v38, v39);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Locale.LanguageCode?(v30, v53);
  return v6 & 1;
}

void TermOfAddress.morphology(for:)(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v28;
  uint64_t v29;
  Swift::String v30;
  id v31;
  void *v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  int8x16_t v36;
  uint64x2_t v37;
  int16x8_t v38;
  Swift::String v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  Swift::String v44;
  Swift::Bool v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  _QWORD v61[3];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;

  v4 = a1[3];
  v64 = a1[2];
  v65 = v4;
  v5 = a1[5];
  v66 = a1[4];
  v67 = v5;
  v6 = a1[1];
  v62 = *a1;
  v63 = v6;
  v8 = *v2;
  v7 = v2[1];
  v9 = v2[2];
  v10 = v2[3];
  v11 = v2[4];
  v12 = v2[5];
  v13 = v2[6];
  v14 = v2[7];
  v15 = v2[8];
  v16 = v2[9];
  v17 = v2[10];
  v18 = v2[11];
  v19 = v2[12];
  v20 = 1;
  v21 = 3586;
  switch(v19)
  {
    case 0uLL:
      goto LABEL_5;
    case 1uLL:
      v21 = 3584;
      goto LABEL_5;
    case 2uLL:
      v21 = 3585;
      goto LABEL_5;
    case 3uLL:
      objc_opt_self();
      v31 = +[NSMorphology _userMorphologyWithOverrides]();
      if (v31)
      {
        v32 = v31;
        memset(v61, 0, 21);
        specialized static Morphology._conditionallyBridgeFromObjectiveC(_:result:)(v31, (uint64_t)v61);

        v34 = BYTE2(v61[0]);
        v33 = v61[1];
        v35 = LODWORD(v61[2]) | ((unint64_t)BYTE4(v61[2]) << 32);
        if (v61[1])
        {
          v36.i64[0] = 0xFFFFFFFFFFLL;
          v36.i64[1] = 0xFFFFFFFFFFLL;
          v37 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v35), v36);
          v38 = (int16x8_t)vshlq_u64(v37, (uint64x2_t)xmmword_182064D90);
          *(_WORD *)a2 = v61[0];
          *(_BYTE *)(a2 + 2) = v34;
          *(_QWORD *)(a2 + 8) = v33;
          *(_BYTE *)(a2 + 16) = v35;
          *(int32x2_t *)v37.i8 = vmovn_s64((int64x2_t)vshlq_u64(v37, (uint64x2_t)xmmword_182064D80));
          *(int32x2_t *)v38.i8 = vmovn_s64((int64x2_t)v38);
          v38.i16[1] = v38.i16[2];
          v38.i16[2] = v37.i16[0];
          v38.i16[3] = v37.i16[2];
          *(_DWORD *)(a2 + 17) = vmovn_s16(v38).u32[0];
        }
        else
        {
          *(_QWORD *)a2 = v61[0];
          *(_QWORD *)(a2 + 8) = 0;
          *(_DWORD *)(a2 + 16) = v35;
          *(_BYTE *)(a2 + 20) = BYTE4(v35);
        }
      }
      else
      {
        *(_QWORD *)a2 = 0;
        *(_QWORD *)(a2 + 8) = 0;
        *(_QWORD *)(a2 + 13) = 0;
      }
      return;
    default:
      v20 = 0;
      v21 = 3587;
LABEL_5:
      v58 = v20;
      v47 = v10;
      v48 = v9;
      v49 = v7;
      v50 = v14;
      v59 = v21;
      v51 = v13;
      v52 = v12;
      v53 = v11;
      v54 = v15;
      v55 = v18;
      v56 = v17;
      v57 = v16;
      v22 = v62;
      v23 = v63;
      outlined retain of Locale.Language((uint64_t *)&v62, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
      v25 = *((_QWORD *)&v22 + 1);
      v24 = v22;
      object = (void *)*((_QWORD *)&v23 + 1);
      countAndFlagsBits = v23;
      if (!*((_QWORD *)&v22 + 1))
      {
        v28 = specialized _withFixedCharBuffer(size:_:)(257, (uint64_t *)&v62);
        v25 = v29;
        if (v29)
        {
          v24 = v28;
          v30 = String.lowercased()();
          countAndFlagsBits = v30._countAndFlagsBits;
          object = v30._object;
        }
        else
        {
          v24 = 0;
          countAndFlagsBits = 0;
          object = 0;
        }
      }
      outlined copy of Locale.LanguageCode?(v22, *((uint64_t *)&v22 + 1));
      outlined retain of Locale.Language((uint64_t *)&v62, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
      v39 = String.lowercased()();
      if (!v25)
      {
        outlined consume of Locale.LanguageCode?(v24, 0);
        outlined consume of Locale.LanguageCode?(28261, 0xE200000000000000);
        goto LABEL_20;
      }
      if (countAndFlagsBits != v39._countAndFlagsBits || object != v39._object)
      {
        v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of Locale.LanguageCode?(v24, v25);
        if ((v40 & 1) != 0)
          goto LABEL_18;
LABEL_20:
        if ((v58 & 1) == 0)
        {
          *(_QWORD *)a2 = 0;
          *(_QWORD *)(a2 + 8) = 0;
          *(_QWORD *)(a2 + 13) = 0;
          return;
        }
        v41 = 393216;
        goto LABEL_33;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Locale.LanguageCode?(v24, v25);
LABEL_18:
      if (v19 < 3)
      {
        v41 = qword_1821526F8[v19];
        goto LABEL_33;
      }
      outlined copy of TermOfAddress._TermOfAddress(v8, v49, v48, v47, v53, v52, v51, v50, v54, v57, v56, v55, v19);
      outlined consume of Locale.LanguageCode?(v8, v49);
      outlined consume of Locale.LanguageCode?(v53, v52);
      outlined consume of Locale.LanguageCode?(v54, v57);
      v42 = *(_QWORD *)(v19 + 16);
      if (v42)
      {
        swift_bridgeObjectRetain();
        v43 = v19 + 40;
        do
        {
          if (!*(_BYTE *)(v43 + 24))
          {
            String.lowercased()();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v44._countAndFlagsBits = 31077;
            v44._object = (void *)0xE200000000000000;
            v45 = String.hasSuffix(_:)(v44);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v45)
            {
              swift_bridgeObjectRelease_n();
              v41 = 0x20000;
              goto LABEL_33;
            }
          }
          v43 += 64;
          --v42;
        }
        while (v42);
        swift_bridgeObjectRelease_n();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v41 = 0;
LABEL_33:
      v46 = MEMORY[0x1E0DEE9E0];
      *(_QWORD *)a2 = v41 | v59;
      *(_QWORD *)(a2 + 8) = v46;
      *(_BYTE *)(a2 + 20) = 2;
      *(_DWORD *)(a2 + 16) = 33751822;
      return;
  }
}

Swift::Bool __swiftcall NSTermOfAddress.isSupportedInLanguage(_:)(Swift::String a1)
{
  void *v1;
  int Language;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int Script;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int Country;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  uint64_t v19;
  Swift::String v20;
  void *v21;
  id v22;
  id v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  char v44;
  void *v45;
  id v46;
  char v47;
  void *v48;
  id v49;
  char v50;
  void *v51;
  id v52;
  void *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  _QWORD *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  Swift::String v65;
  Swift::String v66;
  Swift::String v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  _BYTE v83[224];
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  void *v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  void *v100;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _BYTE v107[258];
  __int128 v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;

  v132 = *MEMORY[0x1E0C80C00];
  swift_bridgeObjectRetain();
  LODWORD(v119) = 0;
  String.utf8CString.getter();
  Language = uloc_getLanguage();
  v3 = swift_release();
  v4 = 0;
  v5 = 0;
  if (Language > 0)
  {
    v107[Language] = 0;
    v3 = MEMORY[0x186DA4658](v107, 0);
    v4 = v3;
  }
  v104 = v5;
  MEMORY[0x1E0C80A78](v3);
  LODWORD(v119) = 0;
  String.utf8CString.getter();
  Script = uloc_getScript();
  v7 = swift_release();
  v8 = 0;
  v9 = 0;
  if ((int)v119 <= 0 && Script > 0)
  {
    v83[Script] = 0;
    v7 = MEMORY[0x186DA4658](v83, 0);
    v8 = v7;
  }
  v105 = v9;
  MEMORY[0x1E0C80A78](v7);
  LODWORD(v119) = 0;
  String.utf8CString.getter();
  Country = uloc_getCountry();
  swift_release();
  v11 = 0;
  if ((int)v119 > 0)
  {
    v106 = 0;
    v12 = v104;
  }
  else
  {
    v106 = 0;
    v12 = v104;
    if (Country > 0)
    {
      v83[Country] = 0;
      v11 = MEMORY[0x186DA4658](v83);
      v106 = v13;
    }
  }
  swift_bridgeObjectRelease();
  if (v12)
  {
    v14 = v4;
    v15 = String.lowercased()();
    object = v15._object;
    countAndFlagsBits = v15._countAndFlagsBits;
  }
  else
  {
    v14 = 0;
    object = 0;
    countAndFlagsBits = 0;
  }
  v16 = v8;
  v17 = v106;
  if (v105)
  {
    v119 = v8;
    v120 = v105;
    swift_bridgeObjectRetain_n();
    String.init<A>(_:)();
    v18 = String._capitalized()();
    v19 = v18._countAndFlagsBits;
    v100 = v18._object;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v17)
    {
LABEL_15:
      v20 = String.uppercased()();
      v98 = v20._object;
      v99 = v20._countAndFlagsBits;
      goto LABEL_18;
    }
  }
  else
  {
    v16 = 0;
    v19 = 0;
    v100 = 0;
    if (v106)
      goto LABEL_15;
  }
  v11 = 0;
  v98 = 0;
  v99 = 0;
LABEL_18:
  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSTermOfAddress);
  v21 = (void *)objc_opt_self();
  v22 = v1;
  v23 = objc_msgSend(v21, sel_neutral);
  v24 = static NSObject.== infix(_:_:)();

  v103 = v16;
  v92 = v14;
  if ((v24 & 1) != 0)
  {
    v25 = v19;
    v26 = v11;
    v27 = v14;
    v28 = v22;
    v29 = v104;

    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = 0;
    goto LABEL_57;
  }
  v43 = objc_msgSend(v21, sel_feminine);
  v44 = static NSObject.== infix(_:_:)();

  if ((v44 & 1) != 0)
  {
    v25 = v19;
    v26 = v11;
    v27 = v14;
    v45 = v22;
    v29 = v104;

    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = 1;
    goto LABEL_57;
  }
  v46 = objc_msgSend(v21, sel_masculine);
  v47 = static NSObject.== infix(_:_:)();

  if ((v47 & 1) != 0)
  {
    v25 = v19;
    v26 = v11;
    v27 = v14;
    v48 = v22;
    v29 = v104;

    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = 2;
    goto LABEL_57;
  }
  v49 = objc_msgSend(v21, sel_currentUser);
  v50 = static NSObject.== infix(_:_:)();

  if ((v50 & 1) != 0)
  {
    v25 = v19;
    v26 = v11;
    v27 = v14;
    v51 = v22;
    v29 = v104;

    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = 3;
    goto LABEL_57;
  }
  v52 = objc_msgSend(v22, sel_languageIdentifier);
  v89 = v22;
  if (v52)
  {
    v53 = v52;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v52);

    MEMORY[0x1E0C80A78](v54);
    LODWORD(v119) = 0;
    String.utf8CString.getter();
    v55 = uloc_getLanguage();
    swift_release();
    v56 = 0;
    if ((int)v119 > 0)
    {
      v95 = 0;
    }
    else
    {
      v95 = 0;
      if (v55 > 0)
      {
        v83[v55] = 0;
        v56 = MEMORY[0x186DA4658](v83);
        v95 = v57;
      }
    }
    v93 = v56;
    MEMORY[0x1E0C80A78](v56);
    LODWORD(v119) = 0;
    String.utf8CString.getter();
    v58 = uloc_getScript();
    v59 = swift_release();
    v94 = 0;
    if ((int)v119 > 0)
    {
      v29 = v104;
      v97 = 0;
    }
    else
    {
      v29 = v104;
      v97 = 0;
      if (v58 > 0)
      {
        v83[v58] = 0;
        v59 = MEMORY[0x186DA4658](v83);
        v94 = v59;
        v97 = v60;
      }
    }
    MEMORY[0x1E0C80A78](v59);
    LODWORD(v119) = 0;
    String.utf8CString.getter();
    v61 = uloc_getCountry();
    swift_release();
    v62 = 0;
    v30 = v93;
    v63 = 0;
    if ((int)v119 <= 0 && v61 > 0)
    {
      v83[v61] = 0;
      v62 = MEMORY[0x186DA4658](v83, 0);
    }
    v87 = v62;
    v88 = v63;
    v25 = v19;
    swift_bridgeObjectRelease();
    v31 = (uint64_t)v95;
    v26 = v11;
    if (v95)
    {
      v65 = String.lowercased()();
      v64 = v65._object;
      v86 = v65._countAndFlagsBits;
    }
    else
    {
      v30 = 0;
      v86 = 0;
      v64 = 0;
    }
    v27 = v92;
    v34 = v94;
    v94 = (uint64_t)v64;
    if (v97)
    {
      v119 = v34;
      v120 = v97;
      swift_bridgeObjectRetain_n();
      String.init<A>(_:)();
      v66 = String._capitalized()();
      v93 = v66._countAndFlagsBits;
      v96 = v66._object;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v88)
      {
LABEL_44:
        v67 = String.uppercased()();
        v84 = v67._object;
        v85 = v67._countAndFlagsBits;
        goto LABEL_47;
      }
    }
    else
    {
      v34 = 0;
      v93 = 0;
      v96 = 0;
      if (v88)
        goto LABEL_44;
    }
    v87 = 0;
    v88 = 0;
    v84 = 0;
    v85 = 0;
    goto LABEL_47;
  }
  v25 = v19;
  v26 = v11;
  v27 = v14;
  v29 = v104;
  v30 = 0;
  v86 = 0;
  v87 = 0;
  v93 = 0;
  v94 = 0;
  v34 = 0;
  v96 = 0;
  v97 = 0;
  v88 = 0;
  v84 = 0;
  v85 = 0;
  v31 = 1;
LABEL_47:
  v68 = objc_msgSend(v89, sel_pronouns, v84, v85);
  if (v68)
  {
    v69 = v68;
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    v70 = swift_dynamicCastClass();
    v71 = v69;
    if (v70)
    {
      v71 = *(_QWORD **)(v70 + 24);
      swift_retain();

    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSMorphologyPronoun>);
    v95 = v71;
    v72 = swift_dynamicCastClass();
    if (v72)
    {
      v73 = v72;

    }
    else
    {
      swift_unknownObjectRelease();
      v95 = objc_msgSend(v69, sel_copy);
      type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMorphologyPronoun);
      v73 = _bridgeCocoaArray<A>(_:)();

      swift_unknownObjectRelease();
    }
    v95 = specialized Sequence.compactMap<A>(_:)(v73);
    LOBYTE(v68) = swift_bridgeObjectRelease();
  }
  else
  {
    v95 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v35 = v97;
  if (v31 == 1)
  {
    __break(1u);
    return (char)v68;
  }

  v32 = v86;
  v38 = v87;
  v36 = v93;
  v33 = v94;
  v39 = v88;
  v42 = (uint64_t)v95;
  v37 = v96;
  v41 = (uint64_t)v84;
  v40 = v85;
LABEL_57:
  v95 = (_QWORD *)v31;
  v96 = v37;
  v93 = v30;
  v94 = v34;
  v97 = v35;
  v119 = v30;
  v120 = v31;
  v121 = v32;
  v122 = v33;
  v123 = v34;
  v124 = v35;
  v125 = v36;
  v126 = v37;
  v127 = v38;
  v128 = v39;
  v129 = v40;
  v130 = v41;
  v131 = v42;
  *(_QWORD *)&v108 = v27;
  *((_QWORD *)&v108 + 1) = v29;
  v109 = countAndFlagsBits;
  v110 = object;
  v111 = v103;
  v112 = v105;
  v90 = v25;
  v91 = v26;
  v113 = v25;
  v114 = v100;
  v115 = v26;
  v116 = v106;
  v117 = v99;
  v118 = v98;
  v74 = v38;
  v75 = v40;
  v76 = v42;
  v77 = v32;
  v78 = v33;
  v79 = v39;
  v80 = v41;
  v81 = TermOfAddress.isSupportedInLanguage(_:)(&v108);
  outlined consume of TermOfAddress._TermOfAddress(v93, (uint64_t)v95, v77, v78, v94, v97, v36, (uint64_t)v96, v74, v79, v75, v80, v76);
  outlined consume of Locale.LanguageCode?(v92, v104);
  outlined consume of Locale.LanguageCode?(v103, v105);
  outlined consume of Locale.LanguageCode?(v91, v106);
  LOBYTE(v68) = v81 & 1;
  return (char)v68;
}

Foundation::Morphology_optional __swiftcall NSTermOfAddress.morphologyForLanguage(_:)(Swift::String a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  int Language;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int Script;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int Country;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  uint64_t v17;
  Swift::String v18;
  Swift::String v19;
  void *v20;
  id v21;
  id v22;
  char v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  char v38;
  id v39;
  char v40;
  id v41;
  char v42;
  id v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  _QWORD *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  Swift::String v55;
  Swift::String v56;
  Swift::String v57;
  _QWORD *v58;
  void *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE v71[224];
  void *v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  _QWORD *v83;
  void *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _BYTE v95[258];
  __int128 v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  Foundation::Morphology_optional result;

  v3 = v1;
  v120 = *MEMORY[0x1E0C80C00];
  swift_bridgeObjectRetain();
  LODWORD(v107) = 0;
  String.utf8CString.getter();
  Language = uloc_getLanguage();
  v5 = swift_release();
  v94 = 0;
  v6 = 0;
  if (Language > 0)
  {
    v95[Language] = 0;
    v5 = MEMORY[0x186DA4658](v95);
    v94 = v5;
    v6 = v7;
  }
  MEMORY[0x1E0C80A78](v5);
  LODWORD(v107) = 0;
  String.utf8CString.getter();
  Script = uloc_getScript();
  swift_release();
  v9 = 0;
  v80 = v3;
  v10 = 0;
  if ((int)v107 <= 0 && Script > 0)
  {
    v71[Script] = 0;
    v9 = MEMORY[0x186DA4658](v71, 0);
  }
  v93 = v10;
  v11 = v9;
  MEMORY[0x1E0C80A78](v9);
  LODWORD(v107) = 0;
  String.utf8CString.getter();
  Country = uloc_getCountry();
  swift_release();
  v13 = 0;
  v14 = 0;
  if ((int)v107 <= 0 && Country > 0)
  {
    v71[Country] = 0;
    v13 = MEMORY[0x186DA4658](v71);
    v14 = v15;
  }
  swift_bridgeObjectRelease();
  if (v6)
  {
    v16 = String.lowercased()();
    object = v16._object;
    countAndFlagsBits = v16._countAndFlagsBits;
  }
  else
  {
    v94 = 0;
    object = 0;
    countAndFlagsBits = 0;
  }
  v17 = v11;
  if (v93)
  {
    v107 = v11;
    v108 = v93;
    swift_bridgeObjectRetain_n();
    String.init<A>(_:)();
    v18 = String._capitalized()();
    v88 = v18._object;
    v89 = v18._countAndFlagsBits;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v14)
    {
LABEL_14:
      v19 = String.uppercased()();
      v85 = v19._object;
      v86 = v19._countAndFlagsBits;
      goto LABEL_17;
    }
  }
  else
  {
    v17 = 0;
    v88 = 0;
    v89 = 0;
    if (v14)
      goto LABEL_14;
  }
  v13 = 0;
  v85 = 0;
  v86 = 0;
LABEL_17:
  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSTermOfAddress);
  v20 = (void *)objc_opt_self();
  v21 = v2;
  v22 = objc_msgSend(v20, sel_neutral);
  v23 = static NSObject.== infix(_:_:)();

  v92 = v13;
  v87 = v14;
  if ((v23 & 1) != 0)
  {

    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = 0;
    goto LABEL_55;
  }
  v37 = objc_msgSend(v20, sel_feminine);
  v38 = static NSObject.== infix(_:_:)();

  if ((v38 & 1) != 0)
  {

    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = 1;
    goto LABEL_55;
  }
  v39 = objc_msgSend(v20, sel_masculine);
  v40 = static NSObject.== infix(_:_:)();

  if ((v40 & 1) != 0)
  {

    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = 2;
    goto LABEL_55;
  }
  v41 = objc_msgSend(v20, sel_currentUser);
  v42 = static NSObject.== infix(_:_:)();

  if ((v42 & 1) != 0)
  {

    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = 3;
    goto LABEL_55;
  }
  v43 = objc_msgSend(v21, sel_languageIdentifier);
  v24 = v43;
  if (v43)
  {
    v84 = v21;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v43);

    MEMORY[0x1E0C80A78](v44);
    LODWORD(v107) = 0;
    String.utf8CString.getter();
    v45 = uloc_getLanguage();
    swift_release();
    v46 = 0;
    v47 = 0;
    if ((int)v107 <= 0 && v45 > 0)
    {
      v71[v45] = 0;
      v46 = MEMORY[0x186DA4658](v71, 0);
    }
    v83 = v47;
    v81 = (void *)v46;
    MEMORY[0x1E0C80A78](v46);
    LODWORD(v107) = 0;
    String.utf8CString.getter();
    v48 = uloc_getScript();
    v49 = swift_release();
    v50 = 0;
    v51 = 0;
    if ((int)v107 <= 0 && v48 > 0)
    {
      v71[v48] = 0;
      v49 = MEMORY[0x186DA4658](v71, 0);
      v50 = v49;
    }
    v82 = v51;
    MEMORY[0x1E0C80A78](v49);
    LODWORD(v107) = 0;
    String.utf8CString.getter();
    v52 = uloc_getCountry();
    swift_release();
    v53 = 0;
    if ((int)v107 > 0)
    {
      v76 = 0;
      v21 = v84;
    }
    else
    {
      v76 = 0;
      v21 = v84;
      if (v52 > 0)
      {
        v71[v52] = 0;
        v53 = MEMORY[0x186DA4658](v71);
        v76 = v54;
      }
    }
    v77 = v53;
    swift_bridgeObjectRelease();
    v25 = (uint64_t)v83;
    if (v83)
    {
      v24 = v81;
      v55 = String.lowercased()();
      v75 = v55._countAndFlagsBits;
      v84 = v55._object;
    }
    else
    {
      v24 = 0;
      v75 = 0;
      v84 = 0;
    }
    v28 = v50;
    v29 = v82;
    if (v82)
    {
      v107 = v28;
      v108 = v82;
      swift_bridgeObjectRetain_n();
      String.init<A>(_:)();
      v56 = String._capitalized()();
      v81 = (void *)v56._countAndFlagsBits;
      v74 = v56._object;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v33 = v76;
      if (v76)
      {
LABEL_42:
        v57 = String.uppercased()();
        v72 = v57._object;
        v73 = v57._countAndFlagsBits;
        goto LABEL_45;
      }
    }
    else
    {
      v28 = 0;
      v81 = 0;
      v74 = 0;
      v33 = v76;
      if (v76)
        goto LABEL_42;
    }
    v77 = 0;
    v72 = 0;
    v73 = 0;
    goto LABEL_45;
  }
  v74 = 0;
  v75 = 0;
  v84 = 0;
  v28 = 0;
  v29 = 0;
  v81 = 0;
  v77 = 0;
  v33 = 0;
  v72 = 0;
  v73 = 0;
  v25 = 1;
LABEL_45:
  v58 = objc_msgSend(v21, sel_pronouns, v72, v73);
  if (v58)
  {
    v61 = v58;
    v76 = v33;
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    v62 = swift_dynamicCastClass();
    v63 = v61;
    if (v62)
    {
      v63 = *(_QWORD **)(v62 + 24);
      swift_retain();

    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSMorphologyPronoun>);
    v83 = v63;
    v64 = swift_dynamicCastClass();
    if (v64)
    {
      v65 = v64;

    }
    else
    {
      swift_unknownObjectRelease();
      v83 = objc_msgSend(v61, sel_copy);
      type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMorphologyPronoun);
      v65 = _bridgeCocoaArray<A>(_:)();

      swift_unknownObjectRelease();
    }
    v83 = specialized Sequence.compactMap<A>(_:)(v65);
    v58 = (_QWORD *)swift_bridgeObjectRelease();
    v33 = v76;
  }
  else
  {
    v83 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if (v25 == 1)
  {
    __break(1u);
    goto LABEL_57;
  }

  v32 = v77;
  v31 = (uint64_t)v74;
  v26 = v75;
  v36 = (uint64_t)v83;
  v27 = v84;
  v30 = (uint64_t)v81;
  v35 = (uint64_t)v72;
  v34 = v73;
LABEL_55:
  v81 = v24;
  v82 = v29;
  v83 = (_QWORD *)v25;
  v84 = v27;
  v77 = v28;
  v78 = v6;
  v107 = (uint64_t)v24;
  v108 = v25;
  v109 = v26;
  v110 = v27;
  v111 = v28;
  v112 = v29;
  v113 = v30;
  v114 = v31;
  v115 = v32;
  v116 = v33;
  v117 = v34;
  v118 = v35;
  v119 = v36;
  *(_QWORD *)&v96 = v94;
  *((_QWORD *)&v96 + 1) = v6;
  v97 = countAndFlagsBits;
  v98 = object;
  v99 = v17;
  v79 = v17;
  v100 = v93;
  v101 = v89;
  v102 = v88;
  v103 = v92;
  v104 = v87;
  v105 = v86;
  v106 = v85;
  v66 = v32;
  v67 = v34;
  v68 = v36;
  v69 = v26;
  v70 = v30;
  TermOfAddress.morphology(for:)(&v96, v80);
  outlined consume of TermOfAddress._TermOfAddress((uint64_t)v81, (uint64_t)v83, v69, (uint64_t)v84, v77, v82, v70, v31, v66, v33, v67, v35, v68);
  outlined consume of Locale.LanguageCode?(v94, v78);
  outlined consume of Locale.LanguageCode?(v79, v93);
  v58 = (_QWORD *)outlined consume of Locale.LanguageCode?(v92, v87);
LABEL_57:
  *(_DWORD *)&result.value.grammaticalCase.value = v60;
  result.value.definiteness.value = BYTE4(v60);
  result.value.customPronouns._rawValue = v59;
  *(_QWORD *)&result.value.grammaticalGender.value = v58;
  return result;
}

uint64_t PredicateExpressions.UnaryMinus.wrapped.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t PredicateExpressions.UnaryMinus.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t PredicateExpressions.UnaryMinus.evaluate(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  _QWORD v13[2];
  uint64_t v14;

  v13[1] = a3;
  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)v13 - v10;
  v14 = *a1;
  result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, __n128))(v5 + 16))(&v14, v6, v5, v9);
  if (!v3)
  {
    dispatch thunk of RawRepresentable.init(rawValue:)();
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, AssociatedTypeWitness);
  }
  return result;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.UnaryMinus<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.UnaryMinus.evaluate(_:)(a1, a2, a3);
}

uint64_t static PredicateExpressions.build_UnaryMinus<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
}

uint64_t PredicateExpressions.UnaryMinus.description.getter()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(23);
  v0._object = (void *)0x800000018230C420;
  v0._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 41;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t PredicateExpressions.UnaryMinus<>.encode(to:)(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t PredicateExpressions.UnaryMinus<>.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[4];
  char *v27;

  v23 = a4;
  v24 = *(_QWORD *)(a2 - 8);
  v25 = a3;
  MEMORY[0x1E0C80A78](a1);
  v27 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PredicateExpressions.UnaryMinus(0, v8, v9, v10);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v19 - v13;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v4)
  {
    v20 = v14;
    v21 = v12;
    v22 = v11;
    v15 = v24;
    __swift_project_boxed_opaque_existential_1(v26, v26[3]);
    v16 = v27;
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    v17 = v20;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v20, v16, a2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
    (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(v23, v17, v22);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.UnaryMinus<A>(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];
  _QWORD v10[2];

  v5 = *a3;
  a1[1] = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.UnaryMinus<A>);
  v7 = *(_QWORD *)(v5 + 16);
  v6 = *(_QWORD *)(v5 + 24);
  v10[0] = v7;
  v10[1] = v6;
  a1[2] = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> PredicateExpressions.UnaryMinus<A>, a2, v10);
  v9[0] = v7;
  v9[1] = v6;
  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> PredicateExpressions.UnaryMinus<A>, a2, v9);
  a1[3] = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.UnaryMinus<A>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return PredicateExpressions.UnaryMinus<>.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8), a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.UnaryMinus<A>(_QWORD *a1)
{
  return PredicateExpressions.UnaryMinus<>.encode(to:)(a1);
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.UnaryMinus(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_181D453BC + 4 * byte_182152710[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for PredicateExpressions.UnaryMinus(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

void __ParseOldStylePropertyList(utf16:)(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int16 v6;
  uint64_t v7;
  unint64_t v8;
  ValueMetadata *v9;
  _QWORD *v10;
  unint64_t *v11;
  uint64_t v12;
  const char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  id v24;
  unint64_t v25;
  Swift::String v26;
  __int128 v27;
  uint64_t v28;
  _OWORD *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int16 v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  Swift::String v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  id v47;
  uint64_t v48;
  Swift::String v49;
  Swift::String v50;
  Swift::String v51;
  _OWORD *v52;
  unint64_t v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  unint64_t v60;
  unint64_t v61;
  __int128 v62;
  uint64_t v63;

  if (String.UTF16View.count.getter() < 1)
  {
    lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
    swift_allocError();
    *v10 = 0xD000000000000031;
    v10[1] = 0x800000018230C440;
    swift_willThrow();
    return;
  }
  v60 = a1;
  v61 = a2;
  v62 = xmmword_182152840;
  swift_bridgeObjectRetain();
  if ((advanceToNonSpace(_:)(&v60) & 1) == 0)
  {
    *(_QWORD *)(a3 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    swift_bridgeObjectRelease();
    *(_QWORD *)a3 = MEMORY[0x1E0DEE9E0];
    return;
  }
  if ((advanceToNonSpace(_:)(&v60) & 1) != 0)
  {
    v6 = specialized _ParseInfo.currChar.getter(a1, a2, v62);
    _ParseInfo.advance()();
    switch(v6)
    {
      case '"':
      case '\'':
        v7 = parseQuotedPlistString(_:quote:)((uint64_t)&v60, v6);
        if (!v8)
          goto LABEL_12;
        goto LABEL_6;
      case '#':
      case '$':
      case '%':
      case '&':
      case ')':
      case '*':
      case '+':
      case ',':
      case '-':
      case '.':
      case '/':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case ':':
      case ';':
        goto LABEL_24;
      case '(':
        v35 = parsePlistArray(_:depth:)((uint64_t)&v60, 0);
        if (!v35)
          goto LABEL_12;
        v19 = v35;
        v20 = &demangling cache variable for type metadata for [Any];
        goto LABEL_41;
      case '<':
        v7 = parsePlistData(_:)((uint64_t)&v60);
        if (v8 >> 60 == 15)
          goto LABEL_12;
        v9 = &type metadata for Data;
        goto LABEL_44;
      default:
        if (v6 != 123)
        {
LABEL_24:
          if ((unsigned __int16)(v6 - 58) > 0xFFF5u
            || (unsigned __int16)((v6 & 0xFFDF) - 91) > 0xFFE5u
            || v6 - 36 <= 0x3B && ((1 << (v6 - 36)) & 0x800000000400E01) != 0)
          {
            _ParseInfo.retreat()();
            v30 = v62;
            v31 = HIBYTE(a2) & 0xF;
            if ((a2 & 0x2000000000000000) == 0)
              v31 = a1 & 0xFFFFFFFFFFFFLL;
            v32 = 4 * v31;
            v33 = (unint64_t)v62 >> 14;
            if ((unint64_t)v62 >> 14 >= 4 * v31)
              goto LABEL_38;
            v53 = (unint64_t)v62 >> 14;
            v63 = v62;
            do
            {
              v34 = specialized _ParseInfo.currChar.getter(a1, a2, v30);
              if ((unsigned __int16)(v34 - 58) <= 0xFFF5u
                && (unsigned __int16)((v34 & 0xFFDF) - 91) <= 0xFFE5u
                && (v34 - 36 > 0x3B || ((1 << (v34 - 36)) & 0x800000000400E01) == 0))
              {
                break;
              }
              _ParseInfo.advance()();
              v30 = v62;
              v33 = (unint64_t)v62 >> 14;
            }
            while ((unint64_t)v62 >> 14 < v32);
            if (v33 == v53)
            {
LABEL_38:
              lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
              v12 = swift_allocError();
              v13 = "Unexpected EOF while parsing string";
              v14 = 0xD000000000000023;
              goto LABEL_10;
            }
            if (v33 < v53)
            {
              __break(1u);
              JUMPOUT(0x181D45D84);
            }
            v48 = MEMORY[0x186DA48F8](v63, v30, a1, a2);
            v7 = MEMORY[0x186DA494C](v48);
            if (v8)
            {
LABEL_6:
              v9 = (ValueMetadata *)MEMORY[0x1E0DEA968];
LABEL_44:
              *((_QWORD *)&v59 + 1) = v9;
              *(_QWORD *)&v58 = v7;
              *((_QWORD *)&v58 + 1) = v8;
              break;
            }
            __break(1u);
          }
          _ParseInfo.retreat()();
          _StringGuts.grow(_:)(38);
          swift_bridgeObjectRelease();
          *(_QWORD *)&v56 = 0xD000000000000018;
          *((_QWORD *)&v56 + 1) = 0x800000018230C510;
          lazy protocol witness table accessor for type UInt16 and conformance UInt16();
          v49._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
          String.append(_:)(v49);
          swift_bridgeObjectRelease();
          v50._countAndFlagsBits = 0x6E696C2074612027;
          v50._object = (void *)0xEA00000000002065;
          String.append(_:)(v50);
          *(_QWORD *)&v54 = specialized lineNumberStrings(_:)(a1, a2, v62);
          v51._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v51);
          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
          v12 = swift_allocError();
          *v52 = v56;
          goto LABEL_11;
        }
        v18 = parsePlistDict(_:depth:)((uint64_t)&v60);
        if (!v18)
          goto LABEL_12;
        v19 = v18;
        v20 = &demangling cache variable for type metadata for [String : Any];
LABEL_41:
        *((_QWORD *)&v59 + 1) = __swift_instantiateConcreteTypeFromMangledName(v20);
        *(_QWORD *)&v58 = v19;
        break;
    }
  }
  else
  {
    lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
    v12 = swift_allocError();
    v13 = "Unexpected EOF while parsing plist";
    v14 = 0xD000000000000022;
LABEL_10:
    *v11 = v14;
    v11[1] = (unint64_t)(v13 - 32) | 0x8000000000000000;
LABEL_11:

    *((_QWORD *)&v62 + 1) = v12;
LABEL_12:
    v58 = 0u;
    v59 = 0u;
  }
  outlined init with copy of Any?((uint64_t)&v58, (uint64_t)&v56);
  v15 = *((_QWORD *)&v57 + 1);
  outlined destroy of Any?((uint64_t)&v56);
  if (!v15 || (advanceToNonSpace(_:)(&v60) & 1) == 0)
    goto LABEL_47;
  outlined init with copy of Any?((uint64_t)&v58, (uint64_t)&v56);
  if (!*((_QWORD *)&v57 + 1))
  {
    outlined destroy of Any?((uint64_t)&v56);
    goto LABEL_23;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_23:
    *(_QWORD *)&v56 = 0;
    *((_QWORD *)&v56 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(27);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v56 = 0xD000000000000019;
    *((_QWORD *)&v56 + 1) = 0x800000018230C4F0;
    v21 = v60;
    v22 = v61;
    v23 = v62;
    swift_bridgeObjectRetain();
    v24 = *((id *)&v23 + 1);
    v25 = specialized lineNumberStrings(_:)(v21, v22, v23);
    swift_bridgeObjectRelease();

    *(_QWORD *)&v54 = v25;
    v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v27 = v56;
    lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
    v28 = swift_allocError();
    *v29 = v27;
    outlined destroy of Any?((uint64_t)&v58);

    *((_QWORD *)&v62 + 1) = v28;
    v58 = 0u;
    v59 = 0u;
    goto LABEL_47;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();

  v60 = a1;
  v61 = a2;
  v62 = xmmword_182152840;
  v16 = parsePlistDictContent(_:depth:)((uint64_t)&v60, 0);
  if (v16)
  {
    v17 = v16;
    *((_QWORD *)&v57 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    *(_QWORD *)&v56 = v17;
    outlined destroy of Any?((uint64_t)&v58);
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v58);
    v56 = 0u;
    v57 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v56, (uint64_t)&v58);
LABEL_47:
  outlined init with copy of Any?((uint64_t)&v58, (uint64_t)&v54);
  if (v55)
  {
    outlined destroy of Any?((uint64_t)&v58);
    outlined init with take of Any(&v54, &v56);
    outlined init with take of Any(&v56, (_OWORD *)a3);
    swift_bridgeObjectRelease();
    v36 = (void *)*((_QWORD *)&v62 + 1);
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v54);
    v37 = (void *)*((_QWORD *)&v62 + 1);
    if (*((_QWORD *)&v62 + 1))
    {
      v38 = (void *)*((_QWORD *)&v62 + 1);
    }
    else
    {
      *(_QWORD *)&v56 = 0;
      *((_QWORD *)&v56 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v56 = 0xD000000000000030;
      *((_QWORD *)&v56 + 1) = 0x800000018230C4B0;
      v40 = v60;
      v39 = v61;
      v41 = v62;
      swift_bridgeObjectRetain();
      v42 = specialized lineNumberStrings(_:)(v40, v39, v41);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v54 = v42;
      v43._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v43);
      swift_bridgeObjectRelease();
      v45 = *((_QWORD *)&v56 + 1);
      v44 = v56;
      lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
      swift_allocError();
      v38 = 0;
      *v46 = v44;
      v46[1] = v45;
      v37 = (void *)*((_QWORD *)&v62 + 1);
    }
    v47 = v38;
    swift_willThrow();
    outlined destroy of Any?((uint64_t)&v58);
    swift_bridgeObjectRelease();
    v36 = v37;
  }

}

unint64_t _ParseInfo.advance()()
{
  uint64_t *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t result;
  uint64_t v9;
  unsigned __int16 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD v14[2];

  v2 = *v0;
  v1 = v0[1];
  v3 = v0[2];
  v4 = ((unint64_t)*v0 >> 59) & 1;
  if ((v1 & 0x1000000000000000) == 0)
    LOBYTE(v4) = 1;
  if ((v0[2] & 0xC) == 4 << v4)
    v3 = _StringGuts._slowEnsureMatchingEncoding(_:)(v3, *v0, v0[1]);
  v5 = HIBYTE(v1) & 0xF;
  if ((v1 & 0x2000000000000000) == 0)
    v5 = v2 & 0xFFFFFFFFFFFFLL;
  v6 = v3 >> 16;
  if (v3 >> 16 >= v5)
  {
    __break(1u);
    goto LABEL_23;
  }
  if ((v1 & 0x1000000000000000) != 0)
  {
LABEL_23:
    result = MEMORY[0x186DA488C]();
    goto LABEL_29;
  }
  v7 = (v1 >> 62) & 1;
  if ((v1 & 0x2000000000000000) == 0)
    LOBYTE(v7) = v2 < 0;
  if ((v7 & 1) == 0)
  {
    if ((v3 & 0xC001) != 0)
    {
      if ((v1 & 0x2000000000000000) == 0)
      {
LABEL_15:
        if ((v2 & 0x1000000000000000) != 0)
        {
          LODWORD(v9) = *(unsigned __int8 *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 32 + v6);
          if ((v9 & 0x80) != 0)
            goto LABEL_17;
LABEL_26:
          v9 = 1;
          goto LABEL_27;
        }
        v13 = v3;
        v12 = v6;
        v9 = _StringObject.sharedUTF8.getter();
        v3 = v13;
        LODWORD(v9) = *(unsigned __int8 *)(v9 + v12);
        if ((v9 & 0x80) == 0)
          goto LABEL_26;
LABEL_17:
        LODWORD(v9) = __clz(v9 ^ 0xFF) - 24;
        if ((_DWORD)v9 == 4)
        {
          if ((v3 & 0xC000) == 0)
          {
            v10 = 16388;
LABEL_28:
            result = v3 & 0xFFFFFFFFFFFF0000 | v10;
            goto LABEL_29;
          }
          v9 = 4;
        }
        else
        {
          v9 = v9;
        }
LABEL_27:
        v3 += v9 << 16;
        v10 = 5;
        goto LABEL_28;
      }
    }
    else
    {
      v11 = _StringGuts.scalarAlignSlow(_:)(v3, v2, v1);
      v3 = v11 & 0xFFFFFFFFFFFFFFF2 | 1;
      v6 = v11 >> 16;
      if ((v1 & 0x2000000000000000) == 0)
        goto LABEL_15;
    }
    v14[0] = v2;
    v14[1] = v1 & 0xFFFFFFFFFFFFFFLL;
    LODWORD(v9) = *((unsigned __int8 *)v14 + v6);
    if ((v9 & 0x80) == 0)
      goto LABEL_26;
    goto LABEL_17;
  }
  result = (v3 & 0xFFFFFFFFFFFF0000) + 65549;
LABEL_29:
  v0[2] = result;
  return result;
}

void _ParseInfo.retreat()()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  Swift::Int v8;

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = (*(_QWORD *)v0 >> 59) & 1;
  if ((v2 & 0x1000000000000000) == 0)
    LOBYTE(v4) = 1;
  if ((*(_QWORD *)(v0 + 16) & 0xCLL) != 4 << v4)
  {
    if (v3 >= 0x4000)
      goto LABEL_5;
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v3 = _StringGuts._slowEnsureMatchingEncoding(_:)(*(_QWORD *)(v0 + 16), *(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  if (v3 < 0x4000)
    goto LABEL_23;
LABEL_5:
  v5 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v5 = v1 & 0xFFFFFFFFFFFFLL;
  if (4 * v5 < v3 >> 14)
    goto LABEL_24;
  if ((v2 & 0x1000000000000000) != 0)
  {
LABEL_25:
    v7 = MEMORY[0x186DA4898](v3, v1, v2);
    goto LABEL_21;
  }
  v6 = (v2 >> 62) & 1;
  if ((v2 & 0x2000000000000000) == 0)
    LOBYTE(v6) = v1 < 0;
  if ((v6 & 1) != 0)
  {
    v7 = (v3 & 0xFFFFFFFFFFFF0000) - 65523;
LABEL_21:
    *(_QWORD *)(v0 + 16) = v7;
    return;
  }
  if ((v3 & 0xC000) != 0)
  {
    v7 = v3 & 0xFFFFFFFFFFFF0000 | 5;
    goto LABEL_21;
  }
  if ((v3 & 1) == 0)
    v3 = _StringGuts.scalarAlignSlow(_:)(v3, v1, v2) & 0xFFFFFFFFFFFFFFF2 | 1;
  v8 = _StringGuts.fastUTF8ScalarLength(endingAt:)(v3 >> 16);
  if (v8 == 4)
  {
    v7 = (v3 & 0xFFFFFFFFFFFF0000) - 245756;
    goto LABEL_21;
  }
  if (!__OFSUB__(0, v8))
  {
    v7 = (((v3 >> 16) - v8) << 16) | 5;
    goto LABEL_21;
  }
  __break(1u);
}

uint64_t advanceToNonSpace(_:)(unint64_t *a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unsigned __int16 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  int v28;
  uint64_t v29;
  unint64_t v31;
  uint64_t v32;

  v1 = *a1;
  v2 = a1[1];
  v3 = a1[2];
  v4 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v4 = *a1 & 0xFFFFFFFFFFFFLL;
  v5 = 4 * v4;
  if (4 * v4 <= v3 >> 14)
    return 0;
  while (1)
  {
    v8 = specialized _ParseInfo.currChar.getter(v1, v2, v3);
    _ParseInfo.advance()();
    if (v8 <= 0x1Fu)
    {
      if (v8 - 9 >= 5)
        goto LABEL_86;
      goto LABEL_6;
    }
    if (v8 - 8232 >= 2 && v8 != 32)
      break;
LABEL_6:
    v1 = *a1;
    v2 = a1[1];
    v3 = a1[2];
    v7 = HIBYTE(v2) & 0xF;
    if ((v2 & 0x2000000000000000) == 0)
      v7 = *a1 & 0xFFFFFFFFFFFFLL;
    v5 = 4 * v7;
    if (4 * v7 <= v3 >> 14)
      return 0;
  }
  if (v8 != 47)
    goto LABEL_86;
  v9 = a1[2];
  if (v5 <= v9 >> 14)
    goto LABEL_86;
  if ((unsigned __int16)specialized _ParseInfo.currChar.getter(v1, v2, a1[2]) == 47)
  {
    _ParseInfo.advance()();
    v11 = *a1;
    v10 = a1[1];
    v12 = a1[2];
    v13 = (v10 & 0x2000000000000000) == 0;
    if ((v10 & 0x2000000000000000) != 0)
      v14 = HIBYTE(v10) & 0xF;
    else
      v14 = v11 & 0xFFFFFFFFFFFFLL;
    if (v12 >> 14 < 4 * v14)
    {
      while (1)
      {
        v15 = (v11 >> 59) & 1;
        if ((v10 & 0x1000000000000000) == 0)
          LOBYTE(v15) = 1;
        if ((v12 & 0xC) == 4 << v15)
          v12 = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, v11, v10);
        v16 = v12 >> 16;
        if (v12 >> 16 >= v14)
        {
          __break(1u);
LABEL_88:
          __break(1u);
LABEL_89:
          __break(1u);
LABEL_90:
          __break(1u);
LABEL_91:
          __break(1u);
          JUMPOUT(0x181D46600);
        }
        if ((v10 & 0x1000000000000000) == 0)
          break;
        LOWORD(v19) = String.UTF16View._foreignSubscript(position:)();
LABEL_39:
        v20 = 1;
        if ((unsigned __int16)v19 - 8232 >= 2
          && (unsigned __int16)v19 != 10
          && (unsigned __int16)v19 != 13)
        {
          _ParseInfo.advance()();
          v20 = 0;
        }
        v11 = *a1;
        v10 = a1[1];
        v13 = (v10 & 0x2000000000000000) == 0;
        if ((v10 & 0x2000000000000000) != 0)
          v14 = HIBYTE(v10) & 0xF;
        else
          v14 = v11 & 0xFFFFFFFFFFFFLL;
        if ((v20 & 1) == 0)
        {
          v12 = a1[2];
          if (v12 >> 14 < 4 * v14)
            continue;
        }
        goto LABEL_6;
      }
      if ((v12 & 1) != 0)
      {
        if (v13)
          goto LABEL_27;
      }
      else
      {
        v16 = _StringGuts.scalarAlignSlow(_:)(v12, v11, v10) >> 16;
        if (v13)
        {
LABEL_27:
          if ((v11 & 0x1000000000000000) != 0)
            v17 = (v10 & 0xFFFFFFFFFFFFFFFLL) + 32;
          else
            v17 = _StringObject.sharedUTF8.getter();
          v18 = *(unsigned __int8 *)(v17 + v16);
          if (*(char *)(v17 + v16) < 0)
            __asm { BR              X10 }
LABEL_35:
          if ((v12 & 0xC000) == 0x4000)
            goto LABEL_89;
          if (HIWORD(v18))
            v19 = ((v18 + 67043328) >> 10) - 10240;
          else
            LOWORD(v19) = v18;
          goto LABEL_39;
        }
      }
      v31 = v11;
      v32 = v10 & 0xFFFFFFFFFFFFFFLL;
      v18 = *((unsigned __int8 *)&v31 + v16);
      if (*((char *)&v31 + v16) < 0)
        __asm { BR              X10 }
      goto LABEL_35;
    }
    goto LABEL_6;
  }
  if ((unsigned __int16)specialized _ParseInfo.currChar.getter(v1, v2, v9) == 42)
  {
    _ParseInfo.advance()();
LABEL_53:
    v21 = *a1;
    v22 = a1[1];
    v23 = a1[2];
    while (1)
    {
      if ((v22 & 0x2000000000000000) != 0)
        v24 = HIBYTE(v22) & 0xF;
      else
        v24 = v21 & 0xFFFFFFFFFFFFLL;
      if (v23 >> 14 >= 4 * v24)
        goto LABEL_6;
      v25 = (v21 >> 59) & 1;
      if ((v22 & 0x1000000000000000) == 0)
        LOBYTE(v25) = 1;
      if ((v23 & 0xC) == 4 << v25)
        v23 = _StringGuts._slowEnsureMatchingEncoding(_:)(v23, v21, v22);
      if (v23 >> 16 >= v24)
        goto LABEL_88;
      if ((v22 & 0x1000000000000000) != 0)
      {
        LOWORD(v26) = String.UTF16View._foreignSubscript(position:)();
        goto LABEL_78;
      }
      if ((v23 & 1) != 0)
      {
        if ((v22 & 0x2000000000000000) == 0)
          goto LABEL_66;
      }
      else
      {
        _StringGuts.scalarAlignSlow(_:)(v23, v21, v22);
        if ((v22 & 0x2000000000000000) == 0)
        {
LABEL_66:
          if ((v21 & 0x1000000000000000) == 0)
            _StringObject.sharedUTF8.getter();
          goto LABEL_72;
        }
      }
      v31 = v21;
      v32 = v22 & 0xFFFFFFFFFFFFFFLL;
LABEL_72:
      v26 = _decodeScalar(_:startingAt:)();
      if ((v23 & 0xC000) == 0x4000)
      {
        if (v26 < 0x10000)
          goto LABEL_90;
        LOWORD(v27) = v26 & 0x3FF | 0xDC00;
        goto LABEL_79;
      }
      if (HIWORD(v26))
      {
        v27 = (unsigned __int16)((v26 + 67043328) >> 10) + 55296;
        if ((v27 & 0x10000) != 0)
          goto LABEL_91;
        goto LABEL_79;
      }
LABEL_78:
      LOWORD(v27) = v26;
LABEL_79:
      _ParseInfo.advance()();
      v28 = (unsigned __int16)v27;
      v21 = *a1;
      v22 = a1[1];
      v23 = a1[2];
      if (v28 == 42)
      {
        v29 = HIBYTE(v22) & 0xF;
        if ((v22 & 0x2000000000000000) == 0)
          v29 = v21 & 0xFFFFFFFFFFFFLL;
        if (v23 >> 14 < 4 * v29)
        {
          if ((unsigned __int16)specialized _ParseInfo.currChar.getter(*a1, a1[1], a1[2]) != 47)
            goto LABEL_53;
          _ParseInfo.advance()();
          goto LABEL_6;
        }
      }
    }
  }
LABEL_86:
  _ParseInfo.retreat()();
  return 1;
}

void parsePlistObject(_:requireObject:depth:)(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  Swift::String v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v14;
  unint64_t v15;
  unsigned __int16 v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  ValueMetadata *v23;
  uint64_t v24;
  Swift::String v25;
  Swift::String v26;
  unint64_t v27;
  unint64_t v28;

  if (a3 >= 0x201)
  {
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease();
    v27 = 0xD00000000000002FLL;
    v28 = 0x800000018230C730;
    v6 = *(_QWORD *)a1;
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
LABEL_3:
    specialized lineNumberStrings(_:)(v6, v7, v8);
    v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
    v10 = swift_allocError();
    *v11 = v27;
    v11[1] = v28;
    goto LABEL_4;
  }
  if ((advanceToNonSpace(_:)((unint64_t *)a1) & 1) != 0)
  {
    v14 = *(_QWORD *)a1;
    v15 = *(_QWORD *)(a1 + 8);
    v16 = specialized _ParseInfo.currChar.getter(*(_QWORD *)a1, v15, *(_QWORD *)(a1 + 16));
    _ParseInfo.advance()();
    switch(v16)
    {
      case '"':
      case '\'':
        v17 = parseQuotedPlistString(_:quote:)(a1, v16);
        if (!v18)
          goto LABEL_5;
        goto LABEL_20;
      case '#':
      case '$':
      case '%':
      case '&':
      case ')':
      case '*':
      case '+':
      case ',':
      case '-':
      case '.':
      case '/':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case ':':
      case ';':
        goto LABEL_15;
      case '(':
        v24 = parsePlistArray(_:depth:)(a1, a3);
        if (!v24)
          goto LABEL_5;
        v21 = v24;
        v22 = &demangling cache variable for type metadata for [Any];
        goto LABEL_23;
      case '<':
        v17 = parsePlistData(_:)(a1);
        if (v18 >> 60 == 15)
          goto LABEL_5;
        v23 = &type metadata for Data;
        goto LABEL_26;
      default:
        if (v16 == 123)
        {
          v20 = parsePlistDict(_:depth:)(a1);
          if (!v20)
            goto LABEL_5;
          v21 = v20;
          v22 = &demangling cache variable for type metadata for [String : Any];
LABEL_23:
          *(_QWORD *)(a4 + 24) = __swift_instantiateConcreteTypeFromMangledName(v22);
          *(_QWORD *)a4 = v21;
          return;
        }
LABEL_15:
        if ((unsigned __int16)(v16 - 58) > 0xFFF5u
          || (unsigned __int16)((v16 & 0xFFDF) - 91) > 0xFFE5u
          || v16 - 36 <= 0x3B && ((1 << (v16 - 36)) & 0x800000000400E01) != 0)
        {
          _ParseInfo.retreat()();
          v17 = parseUnquotedPlistString(_:)(a1);
          if (!v18)
            goto LABEL_5;
LABEL_20:
          v23 = (ValueMetadata *)MEMORY[0x1E0DEA968];
LABEL_26:
          *(_QWORD *)(a4 + 24) = v23;
          *(_QWORD *)a4 = v17;
          *(_QWORD *)(a4 + 8) = v18;
          return;
        }
        _ParseInfo.retreat()();
        if ((a2 & 1) == 0)
          goto LABEL_5;
        _StringGuts.grow(_:)(38);
        swift_bridgeObjectRelease();
        v27 = 0xD000000000000018;
        v28 = 0x800000018230C510;
        lazy protocol witness table accessor for type UInt16 and conformance UInt16();
        v25._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
        String.append(_:)(v25);
        swift_bridgeObjectRelease();
        v26._countAndFlagsBits = 0x6E696C2074612027;
        v26._object = (void *)0xEA00000000002065;
        String.append(_:)(v26);
        v8 = *(_QWORD *)(a1 + 16);
        v6 = v14;
        v7 = v15;
        break;
    }
    goto LABEL_3;
  }
  if ((a2 & 1) == 0)
    goto LABEL_5;
  lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
  v10 = swift_allocError();
  *v19 = 0xD000000000000022;
  v19[1] = 0x800000018230C480;
LABEL_4:

  *(_QWORD *)(a1 + 24) = v10;
LABEL_5:
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
}

uint64_t parsePlistDictContent(_:depth:)(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  unsigned __int16 v8;
  unsigned __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int16 v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  __int128 v25;
  uint64_t v26;
  _OWORD *v27;
  Swift::String v28;
  __int128 v29;
  _OWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  Swift::String v38;
  unint64_t *v39;
  Swift::String v40;
  Swift::String v41;
  unint64_t v42;
  unint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;

  v4 = MEMORY[0x1E0DEE9E0];
  v48 = MEMORY[0x1E0DEE9E0];
  if ((advanceToNonSpace(_:)((unint64_t *)a1) & 1) == 0)
  {
LABEL_43:

    *(_QWORD *)(a1 + 24) = 0;
    return v4;
  }
  v5 = (a2 + 1);
  v6 = a2 == -1;
  v7 = MEMORY[0x1E0DEA968];
  while (1)
  {
    v8 = specialized _ParseInfo.currChar.getter(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
    v9 = v8;
    if (v8 == 39 || v8 == 34)
    {
      _ParseInfo.advance()();
      v10 = parseQuotedPlistString(_:quote:)(a1, v9);
    }
    else
    {
      if ((unsigned __int16)(v8 - 58) <= 0xFFF5u
        && (unsigned __int16)((v8 & 0xFFDF) - 91) <= 0xFFE5u
        && (v8 - 36 > 0x3B || ((1 << (v8 - 36)) & 0x800000000400E01) == 0))
      {
LABEL_42:
        v4 = v48;
        goto LABEL_43;
      }
      v10 = parseUnquotedPlistString(_:)(a1);
    }
    v12 = v10;
    v13 = v11;
    if (!v11)
      goto LABEL_42;
    if ((advanceToNonSpace(_:)((unint64_t *)a1) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v46 = 0;
      *((_QWORD *)&v46 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v46 = 0xD000000000000014;
      *((_QWORD *)&v46 + 1) = 0x800000018230C6F0;
      *(_QWORD *)&v44 = specialized lineNumberStrings(_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
      v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v28);
      swift_bridgeObjectRelease();
      v29 = v46;
      lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
      v26 = swift_allocError();
      *v30 = v29;
      goto LABEL_47;
    }
    v14 = *(_QWORD *)a1;
    v15 = *(_QWORD *)(a1 + 8);
    v16 = *(_QWORD *)(a1 + 16);
    if ((unsigned __int16)specialized _ParseInfo.currChar.getter(*(_QWORD *)a1, v15, v16) == 59)
    {
      v47 = v7;
      *(_QWORD *)&v46 = v12;
      *((_QWORD *)&v46 + 1) = v13;
      swift_bridgeObjectRetain();
      goto LABEL_39;
    }
    if ((unsigned __int16)specialized _ParseInfo.currChar.getter(v14, v15, v16) != 61)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
      v26 = swift_allocError();
      *v31 = 0xD000000000000014;
      v31[1] = 0x800000018230C710;
      goto LABEL_47;
    }
    _ParseInfo.advance()();
    if (v6)
      break;
    if (!depthIsValid(_:depth:)(a1, v5))
      goto LABEL_50;
    if ((advanceToNonSpace(_:)((unint64_t *)a1) & 1) == 0)
    {
      lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
      v32 = swift_allocError();
      *v33 = 0xD000000000000022;
      v33[1] = 0x800000018230C480;
      goto LABEL_49;
    }
    v17 = specialized _ParseInfo.currChar.getter(v14, v15, *(_QWORD *)(a1 + 16));
    _ParseInfo.advance()();
    switch(v17)
    {
      case '"':
      case '\'':
        v18 = parseQuotedPlistString(_:quote:)(a1, v17);
        if (!v19)
          goto LABEL_50;
        goto LABEL_32;
      case '#':
      case '$':
      case '%':
      case '&':
      case ')':
      case '*':
      case '+':
      case ',':
      case '-':
      case '.':
      case '/':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case ':':
      case ';':
        goto LABEL_27;
      case '(':
        v22 = parsePlistArray(_:depth:)(a1, v5);
        if (!v22)
          goto LABEL_50;
        v23 = v22;
        *((_QWORD *)&v45 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
        *(_QWORD *)&v44 = v23;
        goto LABEL_38;
      case '<':
        v18 = parsePlistData(_:)(a1);
        if (v19 >> 60 == 15)
          goto LABEL_50;
        *((_QWORD *)&v45 + 1) = &type metadata for Data;
        goto LABEL_37;
      default:
        if (v17 == 123)
        {
          v20 = parsePlistDictContent(_:depth:)(a1, v5);
          if (!v20)
            goto LABEL_50;
          v21 = v20;
          if ((advanceToNonSpace(_:)((unint64_t *)a1) & 1) == 0
            || (unsigned __int16)specialized _ParseInfo.currChar.getter(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16)) != 125)
          {
            swift_bridgeObjectRelease();
            _StringGuts.grow(_:)(50);
            swift_bridgeObjectRelease();
            v42 = 0xD000000000000030;
            v43 = 0x800000018230C560;
            v35 = *(_QWORD *)a1;
            v36 = *(_QWORD *)(a1 + 8);
            v37 = *(_QWORD *)(a1 + 16);
            goto LABEL_53;
          }
          _ParseInfo.advance()();
          *((_QWORD *)&v45 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
          *(_QWORD *)&v44 = v21;
        }
        else
        {
LABEL_27:
          if ((unsigned __int16)(v17 - 58) <= 0xFFF5u
            && (unsigned __int16)((v17 & 0xFFDF) - 91) <= 0xFFE5u
            && (v17 - 36 > 0x3B || ((1 << (v17 - 36)) & 0x800000000400E01) == 0))
          {
            goto LABEL_55;
          }
          _ParseInfo.retreat()();
          v18 = parseUnquotedPlistString(_:)(a1);
          if (!v19)
            goto LABEL_50;
LABEL_32:
          *((_QWORD *)&v45 + 1) = v7;
LABEL_37:
          *(_QWORD *)&v44 = v18;
          *((_QWORD *)&v44 + 1) = v19;
        }
LABEL_38:
        outlined init with take of Any(&v44, &v46);
        break;
    }
LABEL_39:
    outlined init with copy of Any((uint64_t)&v46, (uint64_t)&v44);
    specialized Dictionary.subscript.setter((uint64_t)&v44, v12, v13);
    if ((advanceToNonSpace(_:)((unint64_t *)a1) & 1) == 0
      || (unsigned __int16)specialized _ParseInfo.currChar.getter(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16)) != 59)
    {
      swift_bridgeObjectRelease();
      *(_QWORD *)&v44 = 0;
      *((_QWORD *)&v44 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v44 = 0xD000000000000014;
      *((_QWORD *)&v44 + 1) = 0x800000018230C6F0;
      specialized lineNumberStrings(_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
      v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      v25 = v44;
      lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
      v26 = swift_allocError();
      *v27 = v25;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v46);
LABEL_47:

      v4 = 0;
      *(_QWORD *)(a1 + 24) = v26;
      return v4;
    }
    _ParseInfo.advance()();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v46);
    if ((advanceToNonSpace(_:)((unint64_t *)a1) & 1) == 0)
      goto LABEL_42;
  }
  __break(1u);
LABEL_55:
  _ParseInfo.retreat()();
  _StringGuts.grow(_:)(38);
  swift_bridgeObjectRelease();
  v42 = 0xD000000000000018;
  v43 = 0x800000018230C510;
  lazy protocol witness table accessor for type UInt16 and conformance UInt16();
  v40._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
  String.append(_:)(v40);
  swift_bridgeObjectRelease();
  v41._countAndFlagsBits = 0x6E696C2074612027;
  v41._object = (void *)0xEA00000000002065;
  String.append(_:)(v41);
  v37 = *(_QWORD *)(a1 + 16);
  v35 = v14;
  v36 = v15;
LABEL_53:
  specialized lineNumberStrings(_:)(v35, v36, v37);
  v38._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v38);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
  v32 = swift_allocError();
  *v39 = v42;
  v39[1] = v43;
LABEL_49:

  *(_QWORD *)(a1 + 24) = v32;
LABEL_50:
  v44 = 0u;
  v45 = 0u;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of Any?((uint64_t)&v44);
  return 0;
}

BOOL depthIsValid(_:depth:)(uint64_t a1, unsigned int a2)
{
  Swift::String v4;
  uint64_t v5;
  _QWORD *v6;

  if (a2 >= 0x201)
  {
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease();
    specialized lineNumberStrings(_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
    v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
    v5 = swift_allocError();
    *v6 = 0xD00000000000002FLL;
    v6[1] = 0x800000018230C730;

    *(_QWORD *)(a1 + 24) = v5;
  }
  return a2 < 0x201;
}

uint64_t parsePlistDict(_:depth:)(uint64_t a1)
{
  uint64_t v2;
  Swift::String v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = parsePlistDictContent(_:depth:)();
  if (v2)
  {
    if ((advanceToNonSpace(_:)((unint64_t *)a1) & 1) != 0
      && (unsigned __int16)specialized _ParseInfo.currChar.getter(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16)) == 125)
    {
      _ParseInfo.advance()();
    }
    else
    {
      swift_bridgeObjectRelease();
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      specialized lineNumberStrings(_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
      v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v3);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
      v4 = swift_allocError();
      *v5 = 0xD000000000000030;
      v5[1] = 0x800000018230C560;

      v2 = 0;
      *(_QWORD *)(a1 + 24) = v4;
    }
  }
  return v2;
}

uint64_t parsePlistArray(_:depth:)(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  Swift::String v7;
  __int128 v8;
  uint64_t v9;
  _OWORD *v10;
  void *v11;
  Swift::String v12;
  __int128 v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  _OWORD v17[2];

  v2 = (a2 + 1);
  if (a2 == -1)
  {
    __break(1u);
  }
  else
  {
    v3 = result;
    parsePlistObject(_:requireObject:depth:)(result, 0, v2, (uint64_t)&v15);
    if (v16)
    {
      v4 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      while (1)
      {
        outlined init with take of Any(&v15, v17);
        outlined init with copy of Any((uint64_t)v17, (uint64_t)&v15);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
        v6 = v4[2];
        v5 = v4[3];
        if (v6 >= v5 >> 1)
          v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v5 > 1), v6 + 1, 1, v4);
        v4[2] = v6 + 1;
        outlined init with take of Any(&v15, &v4[4 * v6 + 4]);
        if ((advanceToNonSpace(_:)((unint64_t *)v3) & 1) == 0)
        {
          swift_bridgeObjectRelease();
          *(_QWORD *)&v15 = 0;
          *((_QWORD *)&v15 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(33);
          swift_bridgeObjectRelease();
          *(_QWORD *)&v15 = 0xD00000000000001FLL;
          *((_QWORD *)&v15 + 1) = 0x800000018230C5D0;
          specialized lineNumberStrings(_:)(*(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16));
          v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v7);
          swift_bridgeObjectRelease();
          v8 = v15;
          lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
          v9 = swift_allocError();
          *v10 = v8;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
          goto LABEL_20;
        }
        if ((unsigned __int16)specialized _ParseInfo.currChar.getter(*(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16)) != 44)break;
        _ParseInfo.advance()();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
        parsePlistObject(_:requireObject:depth:)(v3, 0, v2, (uint64_t)&v15);
        if (!v16)
          goto LABEL_13;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    }
    else
    {
      v4 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_13:
      outlined destroy of Any?((uint64_t)&v15);
    }
    if ((advanceToNonSpace(_:)((unint64_t *)v3) & 1) != 0
      && (v11 = *(void **)(v3 + 24),
          (unsigned __int16)specialized _ParseInfo.currChar.getter(*(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16)) == 41))
    {

      *(_QWORD *)(v3 + 24) = 0;
      _ParseInfo.advance()();
    }
    else
    {
      swift_bridgeObjectRelease();
      *(_QWORD *)&v17[0] = 0;
      *((_QWORD *)&v17[0] + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(45);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v17[0] = 0xD00000000000002BLL;
      *((_QWORD *)&v17[0] + 1) = 0x800000018230C5A0;
      *(_QWORD *)&v15 = specialized lineNumberStrings(_:)(*(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16));
      v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      v13 = v17[0];
      lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
      v9 = swift_allocError();
      *v14 = v13;
LABEL_20:

      v4 = 0;
      *(_QWORD *)(v3 + 24) = v9;
    }
    return (uint64_t)v4;
  }
  return result;
}

uint64_t parsePlistData(_:)(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::String v14;
  Swift::String v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  _BYTE v20[408];
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _BYTE v24[400];
  __int128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v25 = xmmword_18206AAC0;
  v2 = getDataBytes(_:bytes:)((unint64_t *)a1, (uint64_t)v24, 400);
  if (v2 >= 1)
  {
    v3 = v24;
    do
    {
      v4 = specialized Data.append<A>(contentsOf:)(0, v2, (uint64_t)v3, 400);
      MEMORY[0x1E0C80A78](v4);
      v3 = v20;
      v2 = getDataBytes(_:bytes:)((unint64_t *)a1, (uint64_t)v20, 400);
    }
    while (v2 > 0);
  }
  if (v2 == -2)
  {
    v22 = 0;
    v23 = 0xE000000000000000;
    _StringGuts.grow(_:)(52);
    v5._object = (void *)0x800000018230C620;
    v5._countAndFlagsBits = 0xD000000000000023;
    String.append(_:)(v5);
    v21 = specialized lineNumberStrings(_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
    v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7 = 0x6E6576656E75203BLL;
    v8 = 0xEF6874676E656C20;
LABEL_14:
    String.append(_:)(*(Swift::String *)&v7);
    goto LABEL_15;
  }
  if (v2 < 0)
  {
    v22 = 0;
    v23 = 0xE000000000000000;
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    v22 = 0xD000000000000023;
    v23 = 0x800000018230C620;
    v21 = specialized lineNumberStrings(_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
    v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v7 = 0x696C61766E69203BLL;
    v8 = 0xED00007865682064;
    goto LABEL_14;
  }

  *(_QWORD *)(a1 + 24) = 0;
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = HIBYTE(v10) & 0xF;
  if ((v10 & 0x2000000000000000) == 0)
    v12 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFLL;
  if (v11 >> 14 < 4 * v12
    && (unsigned __int16)specialized _ParseInfo.currChar.getter(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16)) == 62)
  {
    _ParseInfo.advance()();
    return v25;
  }
  v22 = 0;
  v23 = 0xE000000000000000;
  _StringGuts.grow(_:)(45);
  swift_bridgeObjectRelease();
  v22 = 0xD00000000000002BLL;
  v23 = 0x800000018230C5F0;
  v21 = specialized lineNumberStrings(_:)(v9, v10, v11);
  v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
LABEL_15:
  v16 = v22;
  v17 = v23;
  lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
  v18 = swift_allocError();
  *v19 = v16;
  v19[1] = v17;

  *(_QWORD *)(a1 + 24) = v18;
  outlined consume of Data._Representation(v25, *((unint64_t *)&v25 + 1));
  return 0;
}

uint64_t parseQuotedPlistString(_:quote:)(uint64_t a1, unsigned __int16 a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned __int16 v19;
  unsigned __int16 v20;
  uint64_t v21;
  void *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  Swift::String v30;
  uint64_t v31;
  _OWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v37;
  __int128 v38;
  __int128 v39;

  v39 = 0uLL;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)a1;
  v6 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0)
    v6 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFLL;
  v7 = 4 * v6;
  v8 = v4 >> 14;
  if (v4 >> 14 >= 4 * v6)
    goto LABEL_34;
  v10 = 0;
  v11 = 0;
  v37 = *(_QWORD *)(a1 + 16);
  do
  {
    v12 = v4;
    while (1)
    {
      v13 = (unsigned __int16)specialized _ParseInfo.currChar.getter(v5, v3, v12);
      if (v13 == a2)
        goto LABEL_27;
      if (v13 == 92)
        break;
      _ParseInfo.advance()();
      v5 = *(_QWORD *)a1;
      v3 = *(_QWORD *)(a1 + 8);
      v12 = *(_QWORD *)(a1 + 16);
      v14 = HIBYTE(v3) & 0xF;
      if ((v3 & 0x2000000000000000) == 0)
        v14 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFLL;
      v7 = 4 * v14;
      v8 = v12 >> 14;
      if (v12 >> 14 >= 4 * v14)
        goto LABEL_27;
    }
    if (!v10)
      v39 = xmmword_182060F30;
    if (v8 < v4 >> 14)
    {
      __break(1u);
      goto LABEL_43;
    }
    v15 = MEMORY[0x186DA48F8](v4, v12, v5, v3);
    v16 = MEMORY[0x186DA494C](v15);
    if (!v17)
      goto LABEL_46;
    String.append(_:)(*(Swift::String *)&v16);
    swift_bridgeObjectRelease();
    _ParseInfo.advance()();
    v18 = *(_QWORD *)(a1 + 16);
    if (v7 <= v18 >> 14)
    {
      _StringGuts.grow(_:)(42);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v38 = 0xD000000000000028;
      *((_QWORD *)&v38 + 1) = 0x800000018230C680;
      v27 = v5;
      v28 = v3;
      v29 = v18;
      goto LABEL_35;
    }
    v19 = specialized _ParseInfo.currChar.getter(v5, v3, *(_QWORD *)(a1 + 16));
    _ParseInfo.advance()();
    if ((unsigned __int16)(v19 - 56) <= 0xFFF7u)
    {
      switch(v19)
      {
        case 'U':
          v20 = parseU16Scalar(_:)((unint64_t *)a1);
          goto LABEL_21;
        case 'a':
        case 'b':
        case 'f':
        case 'n':
        case 'r':
        case 't':
        case 'v':
          goto LABEL_23;
        default:
          goto LABEL_22;
      }
    }
    v20 = parseOctal(startingWith:_:)(v19, a1);
LABEL_21:
    v19 = v20;
LABEL_22:
    if (v19 >> 11 == 27)
      goto LABEL_45;
LABEL_23:
    if (!*((_QWORD *)&v39 + 1))
      goto LABEL_47;
    String.UnicodeScalarView.append(_:)();
    v10 = *((_QWORD *)&v39 + 1);
    v11 = v39;
    v3 = *(_QWORD *)(a1 + 8);
    v4 = *(_QWORD *)(a1 + 16);
    v5 = *(_QWORD *)a1;
    v21 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0)
      v21 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFLL;
    v7 = 4 * v21;
    v8 = v4 >> 14;
    v12 = *(_QWORD *)(a1 + 16);
  }
  while (v4 >> 14 < 4 * v21);
LABEL_27:
  if (v8 >= v7)
  {
    v4 = v37;
LABEL_34:
    *(_QWORD *)(a1 + 16) = v4;
    _StringGuts.grow(_:)(46);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v38 = 0xD00000000000002CLL;
    *((_QWORD *)&v38 + 1) = 0x800000018230C650;
    v27 = v5;
    v28 = v3;
    v29 = v4;
LABEL_35:
    specialized lineNumberStrings(_:)(v27, v28, v29);
    v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
    v31 = swift_allocError();
    *v32 = v38;

    *(_QWORD *)(a1 + 24) = v31;
    swift_bridgeObjectRelease();
    return 0;
  }
  v22 = *(void **)(a1 + 24);
  v23 = v4 >> 14;
  if (v10)
  {
    if (v23 == v8)
      goto LABEL_39;
    if (v8 >= v23)
    {
      v24 = MEMORY[0x186DA48F8](v4, v12, v5, v3);
      v25 = MEMORY[0x186DA494C](v24);
      if (v26)
      {
        String.append(_:)(*(Swift::String *)&v25);
        swift_bridgeObjectRelease();
        v11 = v39;
        goto LABEL_39;
      }
LABEL_49:
      __break(1u);
      JUMPOUT(0x181D47D7CLL);
    }
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  if (v8 < v23)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  v33 = MEMORY[0x186DA48F8](v4, v12, v5, v3);
  v34 = MEMORY[0x186DA494C](v33);
  if (!v35)
    goto LABEL_48;
  v11 = v34;
LABEL_39:
  _ParseInfo.advance()();

  *(_QWORD *)(a1 + 24) = 0;
  return v11;
}

uint64_t parseUnquotedPlistString(_:)(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int16 v8;
  uint64_t result;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v5 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFLL;
  v6 = 4 * v5;
  v7 = v3 >> 14;
  if (v3 >> 14 >= 4 * v5)
    goto LABEL_11;
  v14 = v3 >> 14;
  v15 = *(_QWORD *)(a1 + 16);
  do
  {
    v8 = specialized _ParseInfo.currChar.getter(v4, v2, v3);
    if ((unsigned __int16)(v8 - 58) <= 0xFFF5u
      && (unsigned __int16)((v8 & 0xFFDF) - 91) <= 0xFFE5u
      && (v8 - 36 > 0x3B || ((1 << (v8 - 36)) & 0x800000000400E01) == 0))
    {
      break;
    }
    _ParseInfo.advance()();
    v3 = *(_QWORD *)(a1 + 16);
    v7 = v3 >> 14;
  }
  while (v3 >> 14 < v6);
  result = v15;
  if (v7 == v14)
  {
LABEL_11:
    lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
    v10 = swift_allocError();
    *v11 = 0xD000000000000023;
    v11[1] = 0x800000018230C530;

    result = 0;
    *(_QWORD *)(a1 + 24) = v10;
    return result;
  }
  if (v7 >= v14)
  {
    v12 = MEMORY[0x186DA48F8](v15, v3, v4, v2);
    result = MEMORY[0x186DA494C](v12);
    if (v13)
      return result;
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OpenStepPlistError and conformance OpenStepPlistError;
  if (!lazy protocol witness table cache variable for type OpenStepPlistError and conformance OpenStepPlistError)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for OpenStepPlistError, &type metadata for OpenStepPlistError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenStepPlistError and conformance OpenStepPlistError);
  }
  return result;
}

uint64_t parseOctal(startingWith:_:)(__int16 a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int16 v9;
  unint64_t v10;
  __int16 v11;
  uint64_t inited;
  id v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t result;
  uint64_t v18;
  _QWORD *v19;

  v2 = a1 - 48;
  if ((unsigned __int16)(a1 - 48) >= 0x100u)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v4 = *(_QWORD *)a2;
    v5 = *(_QWORD *)(a2 + 8);
    v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0)
      v6 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFLL;
    v7 = 4 * v6;
    v8 = *(_QWORD *)(a2 + 16);
    if (4 * v6 > v8 >> 14)
    {
      v9 = specialized _ParseInfo.currChar.getter(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), v8);
      if ((unsigned __int16)(v9 - 56) >= 0xFFF8u)
      {
        v2 = v9 + 8 * v2 - 48;
        _ParseInfo.advance()();
        v10 = *(_QWORD *)(a2 + 16);
        if (v7 > v10 >> 14)
        {
          v11 = specialized _ParseInfo.currChar.getter(v4, v5, v10);
          if ((unsigned __int16)(v11 - 56) >= 0xFFF8u)
          {
            v2 = v11 + 8 * v2 - 48;
            _ParseInfo.advance()();
          }
        }
      }
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18205C850;
    *(_BYTE *)(inited + 32) = v2;
    v13 = specialized String.init<A>(bytes:encoding:)(inited, 2);
    v15 = v14;
    swift_setDeallocating();
    if (v15)
    {
      v16 = specialized Collection.first.getter((uint64_t)v13, v15);
      swift_bridgeObjectRelease();
      if ((v16 & 0x10000) != 0)
        return 0;
      else
        return v16;
    }
    else
    {
      lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
      v18 = swift_allocError();
      *v19 = 0xD000000000000032;
      v19[1] = 0x800000018230C6B0;

      result = 0;
      *(_QWORD *)(a2 + 24) = v18;
    }
  }
  return result;
}

uint64_t parseU16Scalar(_:)(unint64_t *a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  int v14;
  unint64_t v15;

  v1 = *a1;
  v2 = a1[1];
  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = *a1 & 0xFFFFFFFFFFFFLL;
  v4 = 4 * v3;
  v5 = a1[2];
  if (4 * v3 <= v5 >> 14)
    return 0;
  v7 = specialized _ParseInfo.currChar.getter(*a1, v2, v5);
  if ((unsigned __int16)v7 <= 0x7Fu && isxdigit((unsigned __int16)v7))
  {
    _ParseInfo.advance()();
    v8 = v7 - 87;
    if ((unsigned __int16)v7 <= 0x46u)
      v8 = v7 - 55;
    if ((unsigned __int16)v7 <= 0x39u)
      v9 = (v7 - 48);
    else
      v9 = v8;
  }
  else
  {
    v9 = 0;
  }
  v10 = a1[2];
  if (v4 > v10 >> 14)
  {
    v11 = specialized _ParseInfo.currChar.getter(v1, v2, v10);
    if ((unsigned __int16)v11 <= 0x7Fu && isxdigit((unsigned __int16)v11))
    {
      _ParseInfo.advance()();
      if ((unsigned __int16)v11 <= 0x39u)
      {
        v12 = (unsigned __int16)(16 * v9);
        v9 = v12 + (unsigned __int16)(v11 - 48);
        if ((v9 & 0x10000) != 0)
          goto LABEL_41;
      }
      else if ((unsigned __int16)v11 <= 0x46u)
      {
        v9 = (16 * v9 + v11 - 55);
      }
      else
      {
        v12 = (unsigned __int16)(16 * v9);
        v9 = v12 + (unsigned __int16)(v11 - 87);
        if ((v9 & 0x10000) != 0)
          goto LABEL_39;
      }
    }
    v13 = a1[2];
    if (v4 <= v13 >> 14)
      return v9;
    v14 = specialized _ParseInfo.currChar.getter(v1, v2, v13);
    if ((unsigned __int16)v14 <= 0x7Fu && isxdigit((unsigned __int16)v14))
    {
      _ParseInfo.advance()();
      if ((unsigned __int16)v14 <= 0x39u)
      {
        v12 = (unsigned __int16)(16 * v9);
        v9 = v12 + (unsigned __int16)(v14 - 48);
        if ((v9 & 0x10000) != 0)
          goto LABEL_41;
      }
      else if ((unsigned __int16)v14 <= 0x46u)
      {
        v9 = (16 * v9 + v14 - 55);
      }
      else
      {
        v12 = (unsigned __int16)(16 * v9);
        v9 = v12 + (unsigned __int16)(v14 - 87);
        if ((v9 & 0x10000) != 0)
          goto LABEL_39;
      }
    }
    v15 = a1[2];
    if (v4 <= v15 >> 14)
      return v9;
    LODWORD(v1) = specialized _ParseInfo.currChar.getter(v1, v2, v15);
    if ((unsigned __int16)v1 > 0x7Fu || !isxdigit((unsigned __int16)v1))
      return v9;
    _ParseInfo.advance()();
    v12 = 16 * v9;
    if ((unsigned __int16)v1 <= 0x39u)
      goto LABEL_40;
    if ((unsigned __int16)v1 <= 0x46u)
      return (v12 + v1 - 55);
    v12 = (unsigned __int16)(16 * v9);
    v9 = v12 + (unsigned __int16)(v1 - 87);
    if ((v9 & 0x10000) == 0)
      return v9;
LABEL_39:
    __break(1u);
LABEL_40:
    v12 = (unsigned __int16)v12;
    v9 = (unsigned __int16)v12 + (unsigned __int16)(v1 - 48);
    if ((v9 & 0x10000) != 0)
    {
LABEL_41:
      __break(1u);
      return (v12 + v1 - 55);
    }
  }
  return v9;
}

uint64_t getDataBytes(_:bytes:)(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v12;
  unsigned __int16 v13;
  char v14;
  unsigned int v15;
  char v16;
  unint64_t v17;
  unsigned __int16 v18;
  char v19;
  unsigned int v20;

  v4 = *a1;
  v5 = a1[1];
  v6 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0)
    v6 = *a1 & 0xFFFFFFFFFFFFLL;
  v7 = 4 * v6;
  v8 = a1[2];
  if (4 * v6 <= v8 >> 14 || a3 < 1)
    return 0;
  v12 = 0;
  while (1)
  {
    while (1)
    {
      v13 = specialized _ParseInfo.currChar.getter(v4, v5, v8);
      if (v13 == 62)
        return v12;
      if (v13 >= 0x100u)
        goto LABEL_37;
      v14 = v13;
      if ((v13 & 0xFEu) - 58 > 0xFFFFFFF5)
      {
        v16 = -48;
        goto LABEL_21;
      }
      if ((v13 - 103) > 0xF9u)
      {
        v16 = -87;
        goto LABEL_21;
      }
      if ((v13 - 71) >= 0xFAu)
        break;
      v15 = v13;
      result = -1;
      if (v15 > 0x20 || ((1 << v14) & 0x100002400) == 0)
        return result;
      _ParseInfo.advance()();
      v8 = a1[2];
      if (v7 <= v8 >> 14)
        return v12;
    }
    v16 = -55;
LABEL_21:
    _ParseInfo.advance()();
    v17 = a1[2];
    if (v7 <= v17 >> 14)
      return -2;
    v18 = specialized _ParseInfo.currChar.getter(v4, v5, v17);
    if (v18 >= 0x100u)
      goto LABEL_37;
    if ((v18 & 0xFEu) - 58 > 0xFFFFFFF5)
    {
      v19 = -48;
    }
    else if ((v18 - 103) > 0xF9u)
    {
      v19 = -87;
    }
    else
    {
      if ((v18 - 71) < 0xFAu)
        return -2;
      v19 = -55;
    }
    v20 = 16 * ((v16 + v14) & 0xF) + (v19 + v18);
    if (((v20 >> 8) & 1) != 0)
      break;
    *(_BYTE *)(a2 + v12++) = v20;
    _ParseInfo.advance()();
    v8 = a1[2];
    if (v7 <= v8 >> 14)
      return v12;
    result = v12;
    if (v12 >= a3)
      return result;
  }
  __break(1u);
LABEL_37:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Data.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD v11[5];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Slice<UnsafeMutableBufferPointer<UInt8>>);
  v11[3] = v8;
  v11[4] = lazy protocol witness table accessor for type Slice<UnsafeMutableBufferPointer<UInt8>> and conformance <> Slice<A>();
  v9 = (_QWORD *)swift_allocObject();
  v11[0] = v9;
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  v9[5] = a4;
  __swift_project_boxed_opaque_existential_1(v11, v8);
  Data._Representation.append(contentsOf:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
}

uint64_t specialized _ParseInfo.currChar.getter(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;

  v3 = a3;
  v6 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000) == 0)
    LOBYTE(v6) = 1;
  if ((a3 & 0xC) == 4 << v6)
    v3 = _StringGuts._slowEnsureMatchingEncoding(_:)(a3, a1, a2);
  v7 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v7 = a1 & 0xFFFFFFFFFFFFLL;
  if (v3 >> 16 >= v7)
  {
    __break(1u);
    return String.UTF16View._foreignSubscript(position:)();
  }
  if ((a2 & 0x1000000000000000) != 0)
    return String.UTF16View._foreignSubscript(position:)();
  if ((v3 & 1) == 0)
    _StringGuts.scalarAlignSlow(_:)(v3, a1, a2);
  result = _StringGuts.fastUTF8Scalar(startingAt:)();
  if ((v3 & 0xC000) != 0x4000)
  {
    if (WORD1(result))
    {
      v9 = (unsigned __int16)((result + 67043328) >> 10) + 55296;
      if ((v9 & 0x10000) == 0)
        return v9;
      __break(1u);
    }
    return result;
  }
  if (result >= 0x10000)
    return result & 0x3FF | 0xFFFFDC00;
  __break(1u);
  return result;
}

unint64_t specialized lineNumberStrings(_:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned __int16 v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;

  if ((a2 & 0x2000000000000000) != 0)
    v3 = HIBYTE(a2) & 0xF;
  else
    v3 = result & 0xFFFFFFFFFFFFLL;
  if (v3)
  {
    v5 = result;
    v6 = 0;
    v7 = (result >> 59) & 1;
    if ((a2 & 0x1000000000000000) == 0)
      LOBYTE(v7) = 1;
    v8 = 4 << v7;
    v27 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    v28 = a2 & 0xFFFFFFFFFFFFFFLL;
    v9 = (a2 >> 62) & 1;
    if ((a2 & 0x2000000000000000) == 0)
      LOBYTE(v9) = (result & 0x8000000000000000) != 0;
    v30 = v9;
    v29 = a3 >> 14;
    if (4 * v3 >= a3 >> 14)
      v10 = a3 >> 14;
    else
      v10 = 4 * v3;
    v26 = v10;
    v11 = 1;
    v12 = 15;
    while (1)
    {
      if (v6 >= v29)
        return v11;
      v13 = v12 & 0xC;
      v14 = v12;
      if (v13 == v8)
      {
        result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, v5, a2);
        v14 = result;
      }
      if (v14 >> 16 >= v3)
      {
        __break(1u);
LABEL_124:
        __break(1u);
LABEL_125:
        __break(1u);
LABEL_126:
        __break(1u);
LABEL_127:
        __break(1u);
LABEL_128:
        __break(1u);
LABEL_129:
        __break(1u);
LABEL_130:
        __break(1u);
LABEL_131:
        __break(1u);
LABEL_132:
        __break(1u);
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
LABEL_135:
        __break(1u);
        return result;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        result = String.UTF16View._foreignSubscript(position:)();
        goto LABEL_32;
      }
      if ((v14 & 1) != 0)
      {
        if ((a2 & 0x2000000000000000) == 0)
          goto LABEL_22;
      }
      else
      {
        _StringGuts.scalarAlignSlow(_:)(v14, v5, a2);
        if ((a2 & 0x2000000000000000) == 0)
        {
LABEL_22:
          if ((v5 & 0x1000000000000000) == 0)
            _StringObject.sharedUTF8.getter();
          goto LABEL_27;
        }
      }
      v31 = v5;
      v32 = v28;
LABEL_27:
      result = _decodeScalar(_:startingAt:)();
      if ((v14 & 0xC000) == 0x4000)
      {
        if (result < 0x10000)
          goto LABEL_126;
        goto LABEL_40;
      }
      if (WORD1(result))
      {
        result = (unsigned __int16)((result + 67043328) >> 10) + 55296;
        if ((result & 0x10000) != 0)
          goto LABEL_128;
      }
LABEL_32:
      if ((unsigned __int16)result == 13)
      {
        v15 = __OFADD__(v11++, 1);
        if (v15)
          goto LABEL_129;
        v16 = v12;
        if (v13 == v8)
        {
          result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, v5, a2);
          v16 = result;
        }
        v17 = v16 >> 16;
        if (v16 >> 16 >= v3)
          goto LABEL_130;
        if ((a2 & 0x1000000000000000) != 0)
        {
          result = MEMORY[0x186DA488C](v16, v5, a2);
          v18 = result;
        }
        else
        {
          if ((v30 & 1) != 0)
          {
            v18 = (v16 & 0xFFFFFFFFFFFF0000) + 65549;
            goto LABEL_75;
          }
          if ((v16 & 0xC001) != 0)
          {
            if ((a2 & 0x2000000000000000) == 0)
              goto LABEL_51;
LABEL_71:
            v31 = v5;
            v32 = v28;
            LODWORD(v20) = *((unsigned __int8 *)&v31 + v17);
            if ((v20 & 0x80) == 0)
            {
LABEL_72:
              v20 = 1;
LABEL_73:
              v16 += v20 << 16;
              v21 = 5;
              goto LABEL_74;
            }
          }
          else
          {
            result = _StringGuts.scalarAlignSlow(_:)(v16, v5, a2);
            v16 = result & 0xFFFFFFFFFFFFFFF2 | 1;
            v17 = result >> 16;
            if ((a2 & 0x2000000000000000) != 0)
              goto LABEL_71;
LABEL_51:
            result = v27;
            if ((v5 & 0x1000000000000000) != 0)
            {
              LODWORD(v20) = *(unsigned __int8 *)(v27 + v17);
              if ((v20 & 0x80) == 0)
                goto LABEL_72;
            }
            else
            {
              result = _StringObject.sharedUTF8.getter();
              LODWORD(v20) = *(unsigned __int8 *)(result + v17);
              if ((v20 & 0x80) == 0)
                goto LABEL_72;
            }
          }
          LODWORD(v20) = __clz(v20 ^ 0xFF) - 24;
          if ((_DWORD)v20 != 4)
          {
            v20 = v20;
            goto LABEL_73;
          }
          if ((v16 & 0xC000) != 0)
          {
            v20 = 4;
            goto LABEL_73;
          }
          v21 = 16388;
LABEL_74:
          v18 = v16 & 0xFFFFFFFFFFFF0000 | v21;
        }
LABEL_75:
        if (v26 <= v18 >> 14)
          goto LABEL_100;
        v22 = v18;
        if ((v18 & 0xC) == v8)
        {
          result = _StringGuts._slowEnsureMatchingEncoding(_:)(v18, v5, a2);
          v22 = result;
        }
        if (v22 >> 16 >= v3)
          goto LABEL_132;
        if ((a2 & 0x1000000000000000) != 0)
        {
          LOWORD(v23) = String.UTF16View._foreignSubscript(position:)();
        }
        else
        {
          if ((v22 & 1) != 0)
          {
            if ((a2 & 0x2000000000000000) == 0)
            {
LABEL_82:
              if ((v5 & 0x1000000000000000) == 0)
                _StringObject.sharedUTF8.getter();
              goto LABEL_89;
            }
          }
          else
          {
            _StringGuts.scalarAlignSlow(_:)(v22, v5, a2);
            if ((a2 & 0x2000000000000000) == 0)
              goto LABEL_82;
          }
          v31 = v5;
          v32 = v28;
LABEL_89:
          result = _decodeScalar(_:startingAt:)();
          if ((v22 & 0xC000) == 0x4000)
          {
            if (result < 0x10000)
              goto LABEL_134;
            LOWORD(v23) = result & 0x3FF | 0xDC00;
          }
          else if (WORD1(result))
          {
            v23 = (unsigned __int16)((result + 67043328) >> 10) + 55296;
            if ((v23 & 0x10000) != 0)
              goto LABEL_135;
          }
          else
          {
            LOWORD(v23) = result;
          }
        }
        result = specialized FixedWidthInteger.init(_:)(10, 0xE100000000000000);
        if ((result & 0x10000) == 0)
        {
          if ((unsigned __int16)v23 == (unsigned __int16)result)
            v12 = v18;
          v13 = v12 & 0xC;
        }
        goto LABEL_100;
      }
LABEL_40:
      v19 = v12;
      if (v13 == v8)
      {
        result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, v5, a2);
        v19 = result;
      }
      if (v19 >> 16 >= v3)
        goto LABEL_125;
      if ((a2 & 0x1000000000000000) != 0)
      {
        result = String.UTF16View._foreignSubscript(position:)();
        goto LABEL_65;
      }
      if ((v19 & 1) != 0)
      {
        if ((a2 & 0x2000000000000000) == 0)
          goto LABEL_46;
      }
      else
      {
        _StringGuts.scalarAlignSlow(_:)(v19, v5, a2);
        if ((a2 & 0x2000000000000000) == 0)
        {
LABEL_46:
          if ((v5 & 0x1000000000000000) == 0)
            _StringObject.sharedUTF8.getter();
          goto LABEL_60;
        }
      }
      v31 = v5;
      v32 = v28;
LABEL_60:
      result = _decodeScalar(_:startingAt:)();
      if ((v19 & 0xC000) == 0x4000)
      {
        if (result < 0x10000)
          goto LABEL_131;
        goto LABEL_100;
      }
      if (WORD1(result))
      {
        result = (unsigned __int16)((result + 67043328) >> 10) + 55296;
        if ((result & 0x10000) != 0)
          goto LABEL_133;
      }
LABEL_65:
      if ((unsigned __int16)result == 10)
      {
        v15 = __OFADD__(v11++, 1);
        if (v15)
          goto LABEL_127;
      }
LABEL_100:
      if (v13 == v8)
      {
        result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, v5, a2);
        v12 = result;
      }
      v24 = v12 >> 16;
      if (v12 >> 16 >= v3)
        goto LABEL_124;
      if ((a2 & 0x1000000000000000) != 0)
      {
        result = MEMORY[0x186DA488C](v12, v5, a2);
        v12 = result;
        goto LABEL_14;
      }
      if ((v30 & 1) != 0)
      {
        v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65549;
        goto LABEL_14;
      }
      if ((v12 & 0xC001) != 0)
      {
        if ((a2 & 0x2000000000000000) == 0)
          goto LABEL_107;
      }
      else
      {
        result = _StringGuts.scalarAlignSlow(_:)(v12, v5, a2);
        v12 = result & 0xFFFFFFFFFFFFFFF2 | 1;
        v24 = result >> 16;
        if ((a2 & 0x2000000000000000) == 0)
        {
LABEL_107:
          result = v27;
          if ((v5 & 0x1000000000000000) != 0)
          {
            LODWORD(v25) = *(unsigned __int8 *)(v27 + v24);
            if ((v25 & 0x80) == 0)
              goto LABEL_117;
          }
          else
          {
            result = _StringObject.sharedUTF8.getter();
            LODWORD(v25) = *(unsigned __int8 *)(result + v24);
            if ((v25 & 0x80) == 0)
            {
LABEL_117:
              v25 = 1;
              goto LABEL_118;
            }
          }
          goto LABEL_109;
        }
      }
      v31 = v5;
      v32 = v28;
      LODWORD(v25) = *((unsigned __int8 *)&v31 + v24);
      if ((v25 & 0x80) == 0)
        goto LABEL_117;
LABEL_109:
      LODWORD(v25) = __clz(v25 ^ 0xFF) - 24;
      if ((_DWORD)v25 != 4)
      {
        v25 = v25;
        goto LABEL_118;
      }
      if ((v12 & 0xC000) != 0)
      {
        v25 = 4;
LABEL_118:
        v12 = (v12 + (v25 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
        goto LABEL_14;
      }
      v12 = v12 & 0xFFFFFFFFFFFF0000 | 0x4004;
LABEL_14:
      v6 = v12 >> 14;
      if (v12 >> 14 >= 4 * v3)
        return v11;
    }
  }
  return 1;
}

unint64_t lazy protocol witness table accessor for type Slice<UnsafeMutableBufferPointer<UInt8>> and conformance <> Slice<A>()
{
  unint64_t result;
  uint64_t v1;
  _UNKNOWN **v2;

  result = lazy protocol witness table cache variable for type Slice<UnsafeMutableBufferPointer<UInt8>> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<UnsafeMutableBufferPointer<UInt8>> and conformance <> Slice<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Slice<UnsafeMutableBufferPointer<UInt8>>);
    v2 = &protocol witness table for <A> UnsafeMutableBufferPointer<A>;
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> Slice<A>, v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<UnsafeMutableBufferPointer<UInt8>> and conformance <> Slice<A>);
  }
  return result;
}

uint64_t sub_181D48E40()
{
  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for OpenStepPlistError()
{
  return &type metadata for OpenStepPlistError;
}

uint64_t specialized ICULegacyNumberFormatter.parseAsInt<A>(_:upperBound:)(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  int v16[6];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v10 = String.UTF16View.distance(from:to:)();
  if (v10)
  {
    v11 = v10;
    v12 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v10, 0);
    v13 = specialized Sequence._copySequenceContents(initializing:)((unint64_t)v16, (uint64_t)(v12 + 4), v11, a1, a2, a3, a4);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRelease();
    if (v13 != v11)
      goto LABEL_11;
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v16[0] = 0;
  if (v12[2] >> 31)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  v14 = unum_parseInt64();
  swift_release();
  if (v16[0] > 0)
    return 0;
  *a5 = 0;
  return v14;
}

uint64_t IntegerParseStrategy.init<A>(format:lenient:)@<X0>(_OWORD *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return IntegerParseStrategy.init<A>(format:lenient:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for IntegerFormatStyle, (uint64_t)&protocol conformance descriptor for IntegerFormatStyle<A>, a5);
}

{
  return IntegerParseStrategy.init<A>(format:lenient:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for IntegerFormatStyle.Percent, (uint64_t)&protocol conformance descriptor for IntegerFormatStyle<A>.Percent, a5);
}

uint64_t type metadata accessor for IntegerParseStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IntegerParseStrategy);
}

uint64_t IntegerParseStrategy.init<A>(format:lenient:)@<X0>(__int128 *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  void (*v19)(__int128 *, uint64_t);
  __int128 v21;

  v10 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for IntegerFormatStyle.Currency(0, a3, a4, v13);
  v15 = *(_QWORD *)(v14 - 8);
  (*(void (**)(uint64_t, __int128 *, uint64_t))(v15 + 16))(a5, a1, v14);
  v16 = MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerFormatStyle<A>.Currency, v14);
  v17 = (int *)type metadata accessor for IntegerParseStrategy(0, v14, v16, a4);
  *(_BYTE *)(a5 + v17[11]) = a2;
  v18 = v17[13];
  v21 = *a1;
  *(_OWORD *)(a5 + v18) = v21;
  outlined init with copy of ICUNumberFormatter.Signature((uint64_t)a1 + *(int *)(v14 + 40), (uint64_t)v12, type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
  v19 = *(void (**)(__int128 *, uint64_t))(v15 + 8);
  swift_unknownObjectRetain();
  v19(a1, v14);
  swift_storeEnumTagMultiPayload();
  return outlined init with take of ICUNumberFormatter.Signature((uint64_t)v12, a5 + v17[12], type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
}

uint64_t IntegerParseStrategy.init<A>(format:lenient:)@<X0>(_OWORD *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(_QWORD, uint64_t, uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  int *v14;

  v12 = a5(0, a3, a4);
  (*(void (**)(uint64_t, _OWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a7, a1, v12);
  v13 = MEMORY[0x186DA9D64](a6, v12);
  v14 = (int *)type metadata accessor for IntegerParseStrategy(0, v12, v13, a4);
  *(_BYTE *)(a7 + v14[11]) = a2;
  *(_OWORD *)(a7 + v14[13]) = *a1;
  outlined init with take of ICUNumberFormatter.Signature((uint64_t)a1 + *(int *)(v12 + 36), a7 + v14[12], type metadata accessor for NumberFormatStyleConfiguration.Collection);
  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t IntegerParseStrategy.parse(_:startingAt:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X4>, int *a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v6;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t ObjectType;
  uint64_t (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t TupleTypeMetadata2;
  uint64_t result;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v59;
  int v60;
  unint64_t v61;
  uint64_t v62;
  _BOOL8 v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int64_t v85;
  unint64_t v86;
  int64_t v87;
  int64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  int v92;
  int64_t v93;
  char *v94;
  int64_t v95;
  unint64_t v96;
  uint64_t v97;
  os_unfair_lock_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  _QWORD v112[3];

  v13 = type metadata accessor for ICULegacyNumberFormatter.Signature(0);
  MEMORY[0x1E0C80A78](v13);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v91 - v15;
  v107 = a3;
  if (a3 >> 14 >= a4 >> 14)
  {
    swift_getAssociatedTypeWitness();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 56))(a6, 1, 1, TupleTypeMetadata2);
  }
  v105 = v17;
  v106 = v16;
  v99 = a1;
  v100 = a4;
  v101 = a2;
  v103 = a6;
  v19 = (uint64_t *)(v6 + a5[13]);
  v21 = *v19;
  v20 = v19[1];
  v22 = *(_BYTE *)(v6 + a5[11]);
  outlined init with copy of ICUNumberFormatter.Signature(v6 + a5[12], (uint64_t)&v91 - v15, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  ObjectType = swift_getObjectType();
  v24 = *(uint64_t (**)(uint64_t, uint64_t))(v20 + 64);
  swift_unknownObjectRetain_n();
  v25 = v24(ObjectType, v20);
  v27 = v26;
  v104 = v21;
  swift_unknownObjectRelease();
  v28 = (uint64_t *)&v18[*(int *)(v13 + 20)];
  *v28 = v25;
  v28[1] = v27;
  v18[*(int *)(v13 + 24)] = v22;
  if (one-time initialization token for cache != -1)
    swift_once();
  v30 = static ICULegacyNumberFormatter.cache;
  v29 = unk_1EDC3B320;
  v31 = v106;
  outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v18, v106, type metadata accessor for ICULegacyNumberFormatter.Signature);
  v32 = (*(unsigned __int8 *)(v105 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v105 + 80);
  v102 = swift_allocObject();
  outlined init with take of ICUNumberFormatter.Signature(v31, v102 + v32, type metadata accessor for ICULegacyNumberFormatter.Signature);
  v33 = (_QWORD *)(v29 + 16);
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(v29 + 24));
  specialized closure #1 in FormatterCache.formatter(for:creator:)(v29 + 16, (uint64_t)v18, (uint64_t *)&v108);
  os_unfair_lock_unlock((os_unfair_lock_t)(v29 + 24));
  swift_release();
  if (v108)
  {
    swift_release();
    goto LABEL_6;
  }
  implicit closure #2 in implicit closure #1 in static ICULegacyNumberFormatter.formatter(for:locale:lenient:)();
  v55 = v54;
  swift_retain();
  v98 = (os_unfair_lock_t)(v29 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v29 + 24));
  v56 = *(_QWORD *)(*(_QWORD *)(v29 + 16) + 16);
  v97 = *(_QWORD *)(v29 + 16);
  if (v30 >= v56)
    swift_bridgeObjectRetain();
  else
    *v33 = MEMORY[0x1E0DEE9E0];
  v57 = v55;
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v112[0] = *v33;
  v59 = v112[0];
  *v33 = 0x8000000000000000;
  v61 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v18);
  v62 = *(_QWORD *)(v59 + 16);
  v63 = (v60 & 1) == 0;
  v64 = v62 + v63;
  if (__OFADD__(v62, v63))
  {
    __break(1u);
  }
  else
  {
    if (*(_QWORD *)(v59 + 24) < v64)
    {
      v65 = v60;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v64, isUniquelyReferenced_nonNull_native);
      v66 = v112[0];
      v67 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v18);
      if ((v65 & 1) != (v68 & 1))
        goto LABEL_65;
      v61 = v67;
      LOBYTE(v60) = v65;
LABEL_23:
      if ((v60 & 1) != 0)
      {
LABEL_24:
        v69 = *(_QWORD *)(v66 + 56);
        v70 = 8 * v61;
        swift_release();
        *(_QWORD *)(v69 + v70) = v57;
LABEL_62:
        *(_QWORD *)(v29 + 16) = v66;
        swift_bridgeObjectRelease();
        os_unfair_lock_unlock(v98);
        swift_release_n();
        swift_bridgeObjectRelease();
LABEL_6:
        outlined destroy of ICUNumberFormatter.Signature((uint64_t)v18, type metadata accessor for ICULegacyNumberFormatter.Signature);
        swift_unknownObjectRelease();
        swift_release();
        v34 = String.subscript.getter();
        v36 = v35;
        v38 = v37;
        v40 = v39;
        v112[0] = 0;
        v41 = specialized ICULegacyNumberFormatter.parseAsInt<A>(_:upperBound:)(v34, v35, v37, v39, v112);
        if ((v42 & 1) != 0)
        {
          v49 = specialized ICULegacyNumberFormatter.parseAsInt<A>(_:upperBound:)(v34, v36, v38, v40, v112);
          if ((v50 & 1) != 0)
          {
            swift_bridgeObjectRelease();
            swift_release();
            swift_getAssociatedTypeWitness();
            v53 = swift_getTupleTypeMetadata2();
            return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v103, 1, 1, v53);
          }
          v51 = v49;
          v108 = v34;
          v109 = v36;
          v110 = v38;
          v111 = v40;
          lazy protocol witness table accessor for type Substring and conformance Substring();
          v52 = String.Index.init<A>(utf16Offset:in:)();
          swift_getAssociatedTypeWitness();
          v45 = swift_getTupleTypeMetadata2();
          v46 = v103;
          *v103 = v52;
          v108 = v51;
          lazy protocol witness table accessor for type Int64 and conformance Int64();
          dispatch thunk of BinaryInteger.init<A>(clamping:)();
        }
        else
        {
          v43 = v41;
          v108 = v34;
          v109 = v36;
          v110 = v38;
          v111 = v40;
          lazy protocol witness table accessor for type Substring and conformance Substring();
          v44 = String.Index.init<A>(utf16Offset:in:)();
          swift_getAssociatedTypeWitness();
          v45 = swift_getTupleTypeMetadata2();
          v46 = v103;
          *v103 = v44;
          v108 = v43;
          lazy protocol witness table accessor for type Int64 and conformance Int64();
          dispatch thunk of BinaryFloatingPoint.init<A>(exactly:)();
        }
        swift_release();
        return (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v46, 0, 1, v45);
      }
LABEL_61:
      v89 = v106;
      v90 = v61;
      outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v18, v106, type metadata accessor for ICULegacyNumberFormatter.Signature);
      specialized _NativeDictionary._insert(at:key:value:)(v90, v89, v57, (_QWORD *)v66);
      goto LABEL_62;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v66 = v59;
      goto LABEL_23;
    }
  }
  v91 = v61;
  v92 = v60;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICULegacyNumberFormatter.Signature, ICULegacyNumberFormatter>);
  v71 = static _DictionaryStorage.copy(original:)();
  v66 = v71;
  if (!*(_QWORD *)(v59 + 16))
  {
LABEL_60:
    swift_bridgeObjectRelease();
    v57 = v55;
    v61 = v91;
    if ((v92 & 1) != 0)
      goto LABEL_24;
    goto LABEL_61;
  }
  v72 = (char *)(v71 + 64);
  v73 = 1 << *(_BYTE *)(v66 + 32);
  v94 = (char *)(v59 + 64);
  v74 = (unint64_t)(v73 + 63) >> 6;
  if (v66 != v59 || v72 >= &v94[8 * v74])
    memmove(v72, v94, 8 * v74);
  *(_QWORD *)(v66 + 16) = *(_QWORD *)(v59 + 16);
  v75 = 1 << *(_BYTE *)(v59 + 32);
  v76 = -1;
  if (v75 < 64)
    v76 = ~(-1 << v75);
  v77 = v76 & *(_QWORD *)(v59 + 64);
  v95 = 0;
  v96 = v77;
  v93 = (unint64_t)(v75 + 63) >> 6;
  v78 = v106;
  while (1)
  {
    if (v96)
    {
      v79 = __clz(__rbit64(v96));
      v96 &= v96 - 1;
      v80 = v79 | (v95 << 6);
      v81 = v105;
      goto LABEL_34;
    }
    v85 = v95 + 1;
    v81 = v105;
    if (__OFADD__(v95, 1))
    {
      __break(1u);
      goto LABEL_64;
    }
    if (v85 >= v93)
      goto LABEL_60;
    v86 = *(_QWORD *)&v94[8 * v85];
    v87 = v95 + 1;
    if (!v86)
    {
      v87 = v95 + 2;
      if (v95 + 2 >= v93)
        goto LABEL_60;
      v86 = *(_QWORD *)&v94[8 * v87];
      if (!v86)
      {
        v87 = v95 + 3;
        if (v95 + 3 >= v93)
          goto LABEL_60;
        v86 = *(_QWORD *)&v94[8 * v87];
        if (!v86)
        {
          v87 = v95 + 4;
          if (v95 + 4 >= v93)
            goto LABEL_60;
          v86 = *(_QWORD *)&v94[8 * v87];
          if (!v86)
          {
            v87 = v95 + 5;
            if (v95 + 5 >= v93)
              goto LABEL_60;
            v86 = *(_QWORD *)&v94[8 * v87];
            if (!v86)
            {
              v87 = v95 + 6;
              if (v95 + 6 >= v93)
                goto LABEL_60;
              v86 = *(_QWORD *)&v94[8 * v87];
              if (!v86)
              {
                v87 = v95 + 7;
                if (v95 + 7 >= v93)
                  goto LABEL_60;
                v86 = *(_QWORD *)&v94[8 * v87];
                if (!v86)
                {
                  v87 = v95 + 8;
                  if (v95 + 8 >= v93)
                    goto LABEL_60;
                  v86 = *(_QWORD *)&v94[8 * v87];
                  if (!v86)
                    break;
                }
              }
            }
          }
        }
      }
    }
LABEL_59:
    v95 = v87;
    v96 = (v86 - 1) & v86;
    v80 = __clz(__rbit64(v86)) + (v87 << 6);
LABEL_34:
    v82 = *(_QWORD *)(v81 + 72) * v80;
    outlined init with copy of ICUNumberFormatter.Signature(*(_QWORD *)(v59 + 48) + v82, v78, type metadata accessor for ICULegacyNumberFormatter.Signature);
    v83 = 8 * v80;
    v84 = *(_QWORD *)(*(_QWORD *)(v59 + 56) + 8 * v80);
    outlined init with take of ICUNumberFormatter.Signature(v78, *(_QWORD *)(v66 + 48) + v82, type metadata accessor for ICULegacyNumberFormatter.Signature);
    *(_QWORD *)(*(_QWORD *)(v66 + 56) + v83) = v84;
    swift_retain();
  }
  v88 = v95 + 9;
  if (v95 + 9 >= v93)
    goto LABEL_60;
  v86 = *(_QWORD *)&v94[8 * v88];
  if (v86)
  {
    v87 = v95 + 9;
    v81 = v105;
    goto LABEL_59;
  }
  while (1)
  {
    v87 = v88 + 1;
    if (__OFADD__(v88, 1))
      break;
    v81 = v105;
    if (v87 >= v93)
      goto LABEL_60;
    v86 = *(_QWORD *)&v94[8 * v87];
    ++v88;
    if (v86)
      goto LABEL_59;
  }
LABEL_64:
  __break(1u);
LABEL_65:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t IntegerParseStrategy.parse(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  double v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t ObjectType;
  uint64_t (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  os_unfair_lock_s *v38;
  void *v39;
  uint64_t v40;
  id object;
  uint64_t countAndFlagsBits;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  unint64_t v48;
  _QWORD *v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t AssociatedConformanceWitness;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  Swift::String v57;
  Swift::String v58;
  Swift::String v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  id v70;
  id v71;
  unint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t inited;
  uint64_t v77;
  Swift::String v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  id v87;
  id v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  Swift::String v96;
  Swift::String v97;
  Swift::String v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  id v105;
  uint64_t v106;
  id v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  Swift::String v115;
  Swift::String v116;
  Swift::String v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  id v128;
  uint64_t v129;
  id v130;
  id v131;
  id v132;
  uint64_t v133;
  id v134;
  uint64_t v135;
  uint64_t result;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  Swift::String v140;
  Swift::String v141;
  Swift::String v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  id v149;
  uint64_t v150;
  id v151;
  id v152;
  id v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v158;
  _BOOL8 v159;
  uint64_t v160;
  uint64_t v161;
  char v162;
  unint64_t v163;
  char v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char v168;
  _QWORD *v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  unint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  _QWORD *v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  int64_t v185;
  unint64_t v186;
  int64_t v187;
  uint64_t v188;
  unint64_t v189;
  _QWORD v190[2];
  unint64_t v191;
  int v192;
  uint64_t v193;
  int64_t v194;
  char *v195;
  _QWORD *v196;
  os_unfair_lock_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  os_unfair_lock_s *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  Swift::String v220;
  uint64_t v221;
  uint64_t v222;
  void *v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226[2];
  _OWORD v227[2];
  uint64_t v228;

  v220._countAndFlagsBits = a1;
  v220._object = a2;
  v205 = a4;
  v228 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(a3 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v218 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v212 = (char *)v190 - v10;
  v201 = *(_QWORD *)(a3 + 32);
  v207 = *(_QWORD *)(v201 + 24);
  v211 = *(_QWORD *)(v207 + 16);
  v210 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v210);
  v209 = (char *)v190 - v11;
  v213 = v8;
  v214 = v7;
  v216 = swift_getAssociatedTypeWitness();
  v208 = *(_QWORD *)(v216 - 8);
  MEMORY[0x1E0C80A78](v216);
  v217 = (char *)v190 - v12;
  v219 = AssociatedTypeWitness;
  v13 = type metadata accessor for Optional();
  v203 = *(_QWORD *)(v13 - 8);
  v204 = v13;
  MEMORY[0x1E0C80A78](v13);
  v200 = (char *)v190 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v206 = (char *)v190 - v16;
  v17 = type metadata accessor for ICULegacyNumberFormatter.Signature(0);
  v224 = *(_QWORD *)(v17 - 8);
  v18 = *(_QWORD *)(v224 + 64);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)v190 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v22 = (uint64_t)v190 - v21;
  v23 = *(int *)(a3 + 44);
  v24 = v4 + *(int *)(a3 + 48);
  v25 = (uint64_t *)(v4 + *(int *)(a3 + 52));
  v27 = *v25;
  v26 = v25[1];
  v215 = v4;
  LODWORD(v222) = *(unsigned __int8 *)(v4 + v23);
  outlined init with copy of ICUNumberFormatter.Signature(v24, (uint64_t)v190 - v21, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  ObjectType = swift_getObjectType();
  v29 = *(uint64_t (**)(uint64_t, uint64_t))(v26 + 64);
  swift_unknownObjectRetain_n();
  v30 = v29(ObjectType, v26);
  v32 = v31;
  v221 = v27;
  swift_unknownObjectRelease();
  v33 = (uint64_t *)(v22 + *(int *)(v17 + 20));
  *v33 = v30;
  v33[1] = v32;
  v199 = v17;
  *(_BYTE *)(v22 + *(int *)(v17 + 24)) = v222;
  if (one-time initialization token for cache != -1)
    swift_once();
  v35 = static ICULegacyNumberFormatter.cache;
  v34 = (char *)unk_1EDC3B320;
  outlined init with copy of ICUNumberFormatter.Signature(v22, (uint64_t)v19, type metadata accessor for ICULegacyNumberFormatter.Signature);
  v36 = (*(unsigned __int8 *)(v224 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v224 + 80);
  v222 = swift_allocObject();
  v202 = (os_unfair_lock_s *)((char *)v190 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with take of ICUNumberFormatter.Signature((uint64_t)v19, v222 + v36, type metadata accessor for ICULegacyNumberFormatter.Signature);
  v37 = (unint64_t *)(v34 + 16);
  v38 = (os_unfair_lock_s *)(v34 + 24);
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)v34 + 6);
  v39 = v223;
  specialized closure #1 in FormatterCache.formatter(for:creator:)((uint64_t)(v34 + 16), v22, v226);
  v223 = v39;
  if (v39)
  {
LABEL_112:
    os_unfair_lock_unlock(v38);
    __break(1u);
    goto LABEL_113;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)v34 + 6);
  swift_release();
  v40 = v226[0];
  if (!v226[0])
  {
    v74 = v223;
    implicit closure #2 in implicit closure #1 in static ICULegacyNumberFormatter.formatter(for:locale:lenient:)();
    if (v74)
    {

      swift_release();
      outlined destroy of ICUNumberFormatter.Signature(v22, type metadata accessor for ICULegacyNumberFormatter.Signature);
      swift_unknownObjectRelease();
      swift_release();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18205C850;
      *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
      *(_QWORD *)(inited + 40) = v77;
      v226[0] = 0;
      v226[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(41);
      swift_bridgeObjectRelease();
      strcpy((char *)v226, "Cannot parse ");
      HIWORD(v226[1]) = -4864;
      String.append(_:)(v220);
      v78._countAndFlagsBits = 0xD00000000000001ALL;
      v78._object = (void *)0x800000018230C760;
      String.append(_:)(v78);
      v79 = v226[0];
      v80 = v226[1];
      *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
      *(_QWORD *)(inited + 48) = v79;
      *(_QWORD *)(inited + 56) = v80;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v46 = static _DictionaryStorage.allocate(capacity:)();
      outlined init with copy of (Hashable & Sendable)?(inited + 32, (uint64_t)v226, &demangling cache variable for type metadata for (String, Any));
      v22 = v226[0];
      v34 = (char *)v226[1];
      swift_retain();
      v81 = specialized __RawDictionaryStorage.find<A>(_:)(v22, (uint64_t)v34);
      if ((v47 & 1) == 0)
      {
        *(_QWORD *)(v46 + 8 * (v81 >> 6) + 64) |= 1 << v81;
        v82 = (uint64_t *)(*(_QWORD *)(v46 + 48) + 16 * v81);
        *v82 = v22;
        v82[1] = (uint64_t)v34;
        outlined init with take of Any(v227, (_OWORD *)(*(_QWORD *)(v46 + 56) + 32 * v81));
        v83 = *(_QWORD *)(v46 + 16);
        v66 = __OFADD__(v83, 1);
        v84 = v83 + 1;
        if (!v66)
        {
          *(_QWORD *)(v46 + 16) = v84;
          swift_release();
          swift_bridgeObjectRelease();
          static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
          v85 = objc_allocWithZone((Class)NSError);
          v86 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v87 = objc_msgSend(v85, sel_initWithDomain_code_userInfo_, v86, 2048, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v34 = (char *)objc_msgSend(v87, sel_domain);
          v88 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
          v46 = v89;

          if (v88 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v46 == v90)
          {
            swift_bridgeObjectRelease_n();
          }
          else
          {
            v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v22 & 1) == 0)
              goto LABEL_68;
          }
          return swift_willThrow();
        }
        goto LABEL_63;
      }
      goto LABEL_62;
    }
    v198 = v75;
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)v34 + 6);
    v40 = *((_QWORD *)v34 + 2);
    v137 = *(_QWORD *)(v40 + 16);
    v223 = 0;
    if (v35 >= v137)
      swift_bridgeObjectRetain();
    else
      *v37 = MEMORY[0x1E0DEE9E0];
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v225 = *v37;
    v46 = v225;
    *v37 = 0x8000000000000000;
    v48 = specialized __RawDictionaryStorage.find<A>(_:)(v22);
    v158 = *(_QWORD *)(v46 + 16);
    v159 = (v47 & 1) == 0;
    v160 = v158 + v159;
    if (__OFADD__(v158, v159))
      goto LABEL_67;
    v161 = *(_QWORD *)(v46 + 24);
    v197 = (os_unfair_lock_t)(v34 + 24);
    if (v161 >= v160)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        goto LABEL_71;
    }
    else
    {
      v162 = v47;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v160, isUniquelyReferenced_nonNull_native);
      v46 = v225;
      v163 = specialized __RawDictionaryStorage.find<A>(_:)(v22);
      if ((v162 & 1) != (v164 & 1))
        goto LABEL_114;
      v48 = v163;
      LOBYTE(v47) = v162;
    }
    v165 = (uint64_t)v202;
    if ((v47 & 1) == 0)
      goto LABEL_106;
    goto LABEL_55;
  }
  swift_release();
  countAndFlagsBits = v220._countAndFlagsBits;
  object = v220._object;
  while (1)
  {
    outlined destroy of ICUNumberFormatter.Signature(v22, type metadata accessor for ICULegacyNumberFormatter.Signature);
    swift_unknownObjectRelease();
    swift_release();
    swift_bridgeObjectRetain();
    specialized BidirectionalCollection._trimmingCharacters(while:)(countAndFlagsBits, (unint64_t)object);
    v34 = v43;
    swift_bridgeObjectRelease();
    v44 = String.init(_:)();
    v46 = v45;
    swift_bridgeObjectRetain();
    v22 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v44, v46);
    swift_bridgeObjectRelease();
    LODWORD(v226[0]) = 0;
    if (*(_QWORD *)(v22 + 16) >> 31)
    {
      __break(1u);
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }
    v34 = (char *)unum_parseInt64();
    swift_release();
    if (SLODWORD(v226[0]) <= 0)
    {
      swift_bridgeObjectRelease();
      v226[0] = (uint64_t)v34;
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      v91 = (uint64_t)v206;
      v92 = v219;
      dispatch thunk of Numeric.init<A>(exactly:)();
      v93 = v218;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v218 + 48))(v91, 1, v92) != 1)
        goto LABEL_36;
      (*(void (**)(uint64_t, uint64_t))(v203 + 8))(v91, v204);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      v94 = swift_initStackObject();
      *(_OWORD *)(v94 + 16) = xmmword_18205C850;
      *(_QWORD *)(v94 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
      *(_QWORD *)(v94 + 40) = v95;
      v226[0] = 0;
      v226[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(94);
      v96._countAndFlagsBits = 0x7020746F6E6E6143;
      v96._object = (void *)0xED00002065737261;
      String.append(_:)(v96);
      v97._countAndFlagsBits = countAndFlagsBits;
      v97._object = object;
      String.append(_:)(v97);
      v98._object = (void *)0x800000018230C780;
      v98._countAndFlagsBits = 0xD00000000000004FLL;
      String.append(_:)(v98);
      v99 = v226[0];
      v100 = v226[1];
      *(_QWORD *)(v94 + 72) = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v94 + 48) = v99;
      *(_QWORD *)(v94 + 56) = v100;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v46 = static _DictionaryStorage.allocate(capacity:)();
      outlined init with copy of (Hashable & Sendable)?(v94 + 32, (uint64_t)v226, &demangling cache variable for type metadata for (String, Any));
      v22 = v226[0];
      v34 = (char *)v226[1];
      swift_retain();
      v101 = specialized __RawDictionaryStorage.find<A>(_:)(v22, (uint64_t)v34);
      if ((v47 & 1) != 0)
        goto LABEL_65;
      *(_QWORD *)(v46 + 8 * (v101 >> 6) + 64) |= 1 << v101;
      v102 = (uint64_t *)(*(_QWORD *)(v46 + 48) + 16 * v101);
      *v102 = v22;
      v102[1] = (uint64_t)v34;
      outlined init with take of Any(v227, (_OWORD *)(*(_QWORD *)(v46 + 56) + 32 * v101));
      v103 = *(_QWORD *)(v46 + 16);
      v66 = __OFADD__(v103, 1);
      v104 = v103 + 1;
      if (v66)
        goto LABEL_66;
      *(_QWORD *)(v46 + 16) = v104;
      swift_release();
      swift_bridgeObjectRelease();
      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
      v105 = objc_allocWithZone((Class)NSError);
      v106 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      object = objc_msgSend(v105, sel_initWithDomain_code_userInfo_, v106, 2048, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v107 = objc_msgSend(object, sel_domain);
      v108 = static String._unconditionallyBridgeFromObjectiveC(_:)(v107);
      v110 = v109;

      if (v108 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v110 == v111)
        goto LABEL_47;
      v112 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v112 & 1) != 0)
        goto LABEL_57;
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRetain();
      v49 = specialized _copyCollectionToContiguousArray<A>(_:)(v44, v46);
      swift_bridgeObjectRelease();
      LODWORD(v226[0]) = 0;
      if (v49[2] >> 31)
        goto LABEL_59;
      unum_parseDouble();
      v5 = v50;
      swift_bridgeObjectRelease();
      swift_release();
      if (SLODWORD(v226[0]) > 0)
      {
        v51 = v210;
        v52 = v219;
        AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        MEMORY[0x186DA5E34](&unk_182152BC0, 2048, v51, AssociatedConformanceWitness);
        v54 = v212;
        dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
        (*(void (**)(char *, uint64_t))(v214 + 48))(v54, v213);
        (*(void (**)(char *, uint64_t))(v218 + 8))(v54, v52);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
        v55 = swift_initStackObject();
        *(_OWORD *)(v55 + 16) = xmmword_18205C850;
        *(_QWORD *)(v55 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
        *(_QWORD *)(v55 + 40) = v56;
        v226[0] = 0;
        v226[1] = 0xE000000000000000;
        _StringGuts.grow(_:)(73);
        v57._countAndFlagsBits = 0x7020746F6E6E6143;
        v57._object = (void *)0xED00002065737261;
        String.append(_:)(v57);
        v58._countAndFlagsBits = countAndFlagsBits;
        v58._object = object;
        String.append(_:)(v58);
        v59._countAndFlagsBits = 0xD000000000000038;
        v59._object = (void *)0x8000000182306040;
        String.append(_:)(v59);
        v60 = v216;
        _print_unlocked<A, B>(_:_:)();
        v61 = v226[0];
        v62 = v226[1];
        *(_QWORD *)(v55 + 72) = MEMORY[0x1E0DEA968];
        *(_QWORD *)(v55 + 48) = v61;
        *(_QWORD *)(v55 + 56) = v62;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
        v46 = static _DictionaryStorage.allocate(capacity:)();
        outlined init with copy of (Hashable & Sendable)?(v55 + 32, (uint64_t)v226, &demangling cache variable for type metadata for (String, Any));
        v22 = v226[0];
        v34 = (char *)v226[1];
        swift_retain();
        v63 = specialized __RawDictionaryStorage.find<A>(_:)(v22, (uint64_t)v34);
        if ((v47 & 1) == 0)
        {
          *(_QWORD *)(v46 + 8 * (v63 >> 6) + 64) |= 1 << v63;
          v64 = (uint64_t *)(*(_QWORD *)(v46 + 48) + 16 * v63);
          *v64 = v22;
          v64[1] = (uint64_t)v34;
          outlined init with take of Any(v227, (_OWORD *)(*(_QWORD *)(v46 + 56) + 32 * v63));
          v65 = *(_QWORD *)(v46 + 16);
          v66 = __OFADD__(v65, 1);
          v67 = v65 + 1;
          if (!v66)
          {
            *(_QWORD *)(v46 + 16) = v67;
            swift_release();
            swift_bridgeObjectRelease();
            static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
            v68 = objc_allocWithZone((Class)NSError);
            v69 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            v70 = objc_msgSend(v68, sel_initWithDomain_code_userInfo_, v69, 2048, _NativeDictionary.bridged()());
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            v34 = (char *)objc_msgSend(v70, sel_domain);
            v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
            v46 = v72;

            if (v71 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"))
              && v46 == v73)
            {
              swift_bridgeObjectRelease_n();
LABEL_38:
              swift_willThrow();
              swift_release();
              return (*(uint64_t (**)(char *, uint64_t))(v208 + 8))(v217, v60);
            }
            v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v22 & 1) != 0)
              goto LABEL_38;
            goto LABEL_64;
          }
LABEL_61:
          __break(1u);
LABEL_62:
          __break(1u);
LABEL_63:
          __break(1u);
LABEL_64:
          __break(1u);
LABEL_65:
          __break(1u);
LABEL_66:
          __break(1u);
LABEL_67:
          __break(1u);
LABEL_68:
          __break(1u);
LABEL_69:
          __break(1u);
          goto LABEL_70;
        }
LABEL_60:
        __break(1u);
        goto LABEL_61;
      }
    }
    v92 = v219;
    if (fabs(v5) < 9.00719925e15)
    {
      *(double *)v226 = v5;
      lazy protocol witness table accessor for type Double and conformance Double();
      v91 = (uint64_t)v200;
      dispatch thunk of FloatingPoint.init<A>(_:)();
      v93 = v218;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v218 + 48))(v91, 1, v92) != 1)
        goto LABEL_36;
      (*(void (**)(uint64_t, uint64_t))(v203 + 8))(v91, v204);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      v113 = swift_initStackObject();
      *(_OWORD *)(v113 + 16) = xmmword_18205C850;
      *(_QWORD *)(v113 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
      *(_QWORD *)(v113 + 40) = v114;
      v226[0] = 0;
      v226[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(94);
      v115._countAndFlagsBits = 0x7020746F6E6E6143;
      v115._object = (void *)0xED00002065737261;
      String.append(_:)(v115);
      v116._countAndFlagsBits = countAndFlagsBits;
      v116._object = object;
      String.append(_:)(v116);
      v117._object = (void *)0x800000018230C780;
      v117._countAndFlagsBits = 0xD00000000000004FLL;
      String.append(_:)(v117);
      v118 = v226[0];
      v119 = v226[1];
      *(_QWORD *)(v113 + 72) = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v113 + 48) = v118;
      *(_QWORD *)(v113 + 56) = v119;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v120 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
      outlined init with copy of (Hashable & Sendable)?(v113 + 32, (uint64_t)v226, &demangling cache variable for type metadata for (String, Any));
      v121 = v226[0];
      v122 = v226[1];
      swift_retain();
      v123 = specialized __RawDictionaryStorage.find<A>(_:)(v121, v122);
      if ((v124 & 1) != 0)
      {
        __break(1u);
      }
      else
      {
        v120[(v123 >> 6) + 8] |= 1 << v123;
        v125 = (uint64_t *)(v120[6] + 16 * v123);
        *v125 = v121;
        v125[1] = v122;
        outlined init with take of Any(v227, (_OWORD *)(v120[7] + 32 * v123));
        v126 = v120[2];
        v66 = __OFADD__(v126, 1);
        v127 = v126 + 1;
        if (!v66)
        {
          v120[2] = v127;
          swift_release();
          swift_bridgeObjectRelease();
          static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
          v128 = objc_allocWithZone((Class)NSError);
          v129 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v130 = objc_msgSend(v128, sel_initWithDomain_code_userInfo_, v129, 2048, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v131 = objc_msgSend(v130, sel_domain);
          v132 = static String._unconditionallyBridgeFromObjectiveC(_:)(v131);
          v92 = v133;

          v134 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
          v93 = v135;
          if (v132 == v134 && v92 == v135)
            goto LABEL_47;
          v91 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v91 & 1) != 0)
          {
LABEL_57:
            swift_willThrow();
            return swift_release();
          }
          __break(1u);
LABEL_36:
          swift_release();
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v93 + 32))(v205, v91, v92);
        }
      }
      __break(1u);
      goto LABEL_110;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    v138 = swift_initStackObject();
    *(_OWORD *)(v138 + 16) = xmmword_18205C850;
    *(_QWORD *)(v138 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
    *(_QWORD *)(v138 + 40) = v139;
    v226[0] = 0;
    v226[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(82);
    v140._countAndFlagsBits = 0x7020746F6E6E6143;
    v140._object = (void *)0xED00002065737261;
    String.append(_:)(v140);
    v141._countAndFlagsBits = countAndFlagsBits;
    v141._object = object;
    String.append(_:)(v141);
    v142._countAndFlagsBits = 0xD000000000000043;
    v142._object = (void *)0x800000018230C7D0;
    String.append(_:)(v142);
    v143 = v226[0];
    v144 = v226[1];
    *(_QWORD *)(v138 + 72) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v138 + 48) = v143;
    *(_QWORD *)(v138 + 56) = v144;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v46 = static _DictionaryStorage.allocate(capacity:)();
    outlined init with copy of (Hashable & Sendable)?(v138 + 32, (uint64_t)v226, &demangling cache variable for type metadata for (String, Any));
    v22 = v226[0];
    v34 = (char *)v226[1];
    swift_retain();
    v145 = specialized __RawDictionaryStorage.find<A>(_:)(v22, (uint64_t)v34);
    if ((v47 & 1) != 0)
      goto LABEL_69;
    *(_QWORD *)(v46 + 8 * (v145 >> 6) + 64) |= 1 << v145;
    v146 = (uint64_t *)(*(_QWORD *)(v46 + 48) + 16 * v145);
    *v146 = v22;
    v146[1] = (uint64_t)v34;
    outlined init with take of Any(v227, (_OWORD *)(*(_QWORD *)(v46 + 56) + 32 * v145));
    v147 = *(_QWORD *)(v46 + 16);
    v66 = __OFADD__(v147, 1);
    v148 = v147 + 1;
    if (!v66)
    {
      *(_QWORD *)(v46 + 16) = v148;
      swift_release();
      swift_bridgeObjectRelease();
      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
      v149 = objc_allocWithZone((Class)NSError);
      v150 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v151 = objc_msgSend(v149, sel_initWithDomain_code_userInfo_, v150, 2048, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v152 = objc_msgSend(v151, sel_domain);
      v153 = static String._unconditionallyBridgeFromObjectiveC(_:)(v152);
      v155 = v154;

      if (v153 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v155 == v156)
      {
LABEL_47:
        swift_bridgeObjectRelease_n();
        goto LABEL_57;
      }
      v168 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v168 & 1) != 0)
        goto LABEL_57;
LABEL_110:
      __break(1u);
    }
LABEL_70:
    __break(1u);
LABEL_71:
    v190[1] = v40;
    v191 = v48;
    v192 = v47;
    v169 = (_QWORD *)v46;
    v193 = v22;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICULegacyNumberFormatter.Signature, ICULegacyNumberFormatter>);
    v170 = static _DictionaryStorage.copy(original:)();
    v46 = v170;
    v196 = v169;
    if (v169[2])
      break;
LABEL_105:
    swift_bridgeObjectRelease();
    v165 = (uint64_t)v202;
    v22 = v193;
    v48 = v191;
    if ((v192 & 1) != 0)
    {
LABEL_55:
      v166 = *(_QWORD *)(v46 + 56);
      v167 = 8 * v48;
      swift_release();
      v40 = v198;
      *(_QWORD *)(v166 + v167) = v198;
    }
    else
    {
LABEL_106:
      v189 = v48;
      outlined init with copy of ICUNumberFormatter.Signature(v22, v165, type metadata accessor for ICULegacyNumberFormatter.Signature);
      v40 = v198;
      specialized _NativeDictionary._insert(at:key:value:)(v189, v165, v198, (_QWORD *)v46);
    }
    countAndFlagsBits = v220._countAndFlagsBits;
    object = v220._object;
    *((_QWORD *)v34 + 2) = v46;
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(v197);
    swift_release_n();
    swift_bridgeObjectRelease();
  }
  v171 = (char *)(v170 + 64);
  v172 = 1 << *(_BYTE *)(v46 + 32);
  v195 = (char *)(v196 + 8);
  v173 = (unint64_t)(v172 + 63) >> 6;
  if ((_QWORD *)v46 != v196 || v171 >= &v195[8 * v173])
    memmove(v171, v195, 8 * v173);
  v199 = 0;
  v174 = v196;
  *(_QWORD *)(v46 + 16) = v196[2];
  v175 = 1 << *((_BYTE *)v174 + 32);
  v176 = -1;
  if (v175 < 64)
    v176 = ~(-1 << v175);
  v177 = v176 & v174[8];
  v194 = (unint64_t)(v175 + 63) >> 6;
  v38 = v202;
  while (2)
  {
    if (v177)
    {
      v178 = __clz(__rbit64(v177));
      v177 &= v177 - 1;
      v179 = v178 | (v199 << 6);
LABEL_79:
      v180 = v196;
      v181 = *(_QWORD *)(v224 + 72) * v179;
      outlined init with copy of ICUNumberFormatter.Signature(v196[6] + v181, (uint64_t)v38, type metadata accessor for ICULegacyNumberFormatter.Signature);
      v182 = v180[7];
      v183 = 8 * v179;
      v184 = *(_QWORD *)(v182 + 8 * v179);
      outlined init with take of ICUNumberFormatter.Signature((uint64_t)v38, *(_QWORD *)(v46 + 48) + v181, type metadata accessor for ICULegacyNumberFormatter.Signature);
      *(_QWORD *)(*(_QWORD *)(v46 + 56) + v183) = v184;
      swift_retain();
      continue;
    }
    break;
  }
  v185 = v199 + 1;
  if (__OFADD__(v199, 1))
  {
    __break(1u);
    goto LABEL_112;
  }
  if (v185 >= v194)
    goto LABEL_105;
  v186 = *(_QWORD *)&v195[8 * v185];
  v187 = v199 + 1;
  if (v186)
    goto LABEL_104;
  v187 = v199 + 2;
  if (v199 + 2 >= v194)
    goto LABEL_105;
  v186 = *(_QWORD *)&v195[8 * v187];
  if (v186)
    goto LABEL_104;
  v187 = v199 + 3;
  if (v199 + 3 >= v194)
    goto LABEL_105;
  v186 = *(_QWORD *)&v195[8 * v187];
  if (v186)
    goto LABEL_104;
  v187 = v199 + 4;
  if (v199 + 4 >= v194)
    goto LABEL_105;
  v186 = *(_QWORD *)&v195[8 * v187];
  if (v186)
    goto LABEL_104;
  v187 = v199 + 5;
  if (v199 + 5 >= v194)
    goto LABEL_105;
  v186 = *(_QWORD *)&v195[8 * v187];
  if (v186)
    goto LABEL_104;
  v187 = v199 + 6;
  if (v199 + 6 >= v194)
    goto LABEL_105;
  v186 = *(_QWORD *)&v195[8 * v187];
  if (v186)
    goto LABEL_104;
  v187 = v199 + 7;
  if (v199 + 7 >= v194)
    goto LABEL_105;
  v186 = *(_QWORD *)&v195[8 * v187];
  if (v186)
    goto LABEL_104;
  v187 = v199 + 8;
  if (v199 + 8 >= v194)
    goto LABEL_105;
  v186 = *(_QWORD *)&v195[8 * v187];
  if (v186)
  {
LABEL_104:
    v177 = (v186 - 1) & v186;
    v199 = v187;
    v179 = __clz(__rbit64(v186)) + (v187 << 6);
    goto LABEL_79;
  }
  v188 = v199 + 9;
  if (v199 + 9 >= v194)
    goto LABEL_105;
  v186 = *(_QWORD *)&v195[8 * v188];
  if (v186)
  {
    v187 = v199 + 9;
    goto LABEL_104;
  }
  while (1)
  {
    v187 = v188 + 1;
    if (__OFADD__(v188, 1))
      break;
    if (v187 >= v194)
      goto LABEL_105;
    v186 = *(_QWORD *)&v195[8 * v187];
    ++v188;
    if (v186)
      goto LABEL_104;
  }
LABEL_113:
  __break(1u);
LABEL_114:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t IntegerParseStrategy.formatStyle.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t IntegerParseStrategy.formatStyle.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*IntegerParseStrategy.formatStyle.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t IntegerParseStrategy.lenient.getter(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 44));
}

uint64_t IntegerParseStrategy.lenient.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + *(int *)(a2 + 44)) = result;
  return result;
}

uint64_t (*IntegerParseStrategy.lenient.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void IntegerParseStrategy.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  _QWORD v18[3];
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = type metadata accessor for FloatingPointRoundingRule();
  v23 = *(_QWORD *)(v4 - 8);
  v24 = v4;
  MEMORY[0x1E0C80A78](v4);
  v21 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1E0C80A78](v6);
  v18[2] = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v18[1] = (char *)v18 - v9;
  MEMORY[0x1E0C80A78](v10);
  v18[0] = (char *)v18 - v11;
  v19 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  MEMORY[0x1E0C80A78](v19);
  v20 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  MEMORY[0x1E0C80A78](v22);
  MEMORY[0x1E0C80A78](v13);
  v14 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)v18 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(_BYTE *)(v2 + *(int *)(a2 + 44)));
  v25 = v2;
  v26 = a2;
  outlined init with copy of ICUNumberFormatter.Signature(v2 + *(int *)(a2 + 48), (uint64_t)v16, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  v17 = (char *)sub_181D4B664 + 4 * byte_1821528F0[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_181D4B664()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  uint64_t v7;
  int *v8;
  int v9;
  Swift::UInt v10;
  int v11;
  unsigned int v12;
  int v13;
  Swift::UInt v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  Swift::UInt v20;
  Swift::UInt64 v21;
  uint64_t v22;
  Swift::UInt v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t ObjectType;
  uint64_t (*v27)(uint64_t, uint64_t);
  Swift::UInt8 v28;
  void (*v29)(uint64_t, uint64_t);
  int v30;
  Swift::UInt8 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  Swift::UInt v59;
  int v60;
  Swift::UInt v61;
  int v62;
  Swift::UInt8 v63;
  int v64;
  Swift::UInt8 v65;
  Swift::UInt8 v66;

  outlined init with take of ICUNumberFormatter.Signature(v3, v2, type metadata accessor for NumberFormatStyleConfiguration.Collection);
  Hasher._combine(_:)(0);
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v5 = *(_QWORD *)v2;
    Hasher._combine(_:)(1u);
    if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v6 = v5;
    else
      v6 = 0;
    Hasher._combine(_:)(v6);
  }
  v8 = *(int **)(v0 + 48);
  v7 = *(_QWORD *)(v0 + 56);
  outlined init with take of LocalePreferences?(v2 + 16, v4 - 152, &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  specialized Optional<A>.hash(into:)();
  v9 = *(unsigned __int8 *)(v2 + 73);
  if (v9 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v10 = v9 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v10);
  }
  v11 = *(unsigned __int16 *)(v2 + 74);
  v12 = v11 | (*(unsigned __int8 *)(v2 + 76) << 16);
  if (v11 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v12 & 1);
    Hasher._combine(_:)((v12 >> 8) & 1);
    Hasher._combine(_:)(HIWORD(v12) & 1);
  }
  v13 = *(unsigned __int8 *)(v2 + 77);
  if (v13 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v14 = v13 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v14);
  }
  v15 = *(_QWORD *)(v0 + 64);
  v16 = *(_QWORD *)v0;
  outlined init with copy of (Hashable & Sendable)?(v2 + v8[9], *(_QWORD *)v0, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v16, 1, v15) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v17 = *(_QWORD *)(v0 + 40);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v17, v16, v15);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v17, v15);
  }
  v18 = v2 + v8[10];
  v19 = *(unsigned __int8 *)(v18 + 8);
  if (v19 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v20 = *(_QWORD *)v18;
    Hasher._combine(_:)(1u);
    if ((v19 & 1) != 0)
    {
      Hasher._combine(_:)(1uLL);
      if ((v20 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v21 = v20;
      else
        v21 = 0;
      Hasher._combine(_:)(v21);
    }
    else
    {
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v20);
    }
  }
  v22 = *(_QWORD *)(v0 + 80);
  v23 = *(unsigned __int8 *)(v2 + v8[11]);
  if (v23 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v23);
  }
  v24 = *(_QWORD *)(v0 + 72);
  outlined destroy of ICUNumberFormatter.Signature(v2, type metadata accessor for NumberFormatStyleConfiguration.Collection);
  v25 = *(_QWORD *)(v24 + *(int *)(v22 + 52) + 8);
  ObjectType = swift_getObjectType();
  v27 = *(uint64_t (**)(uint64_t, uint64_t))(v25 + 48);
  swift_unknownObjectRetain();
  if ((v27(ObjectType, v25) & 1) != 0)
  {
    v28 = 1;
LABEL_34:
    Hasher._combine(_:)(v28);
    return swift_unknownObjectRelease();
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v25 + 64))(ObjectType, v25);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v29 = *(void (**)(uint64_t, uint64_t))(v25 + 464);
  swift_unknownObjectRetain();
  v29(ObjectType, v25);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?(v0 + 376, v0 + 520, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?(v0 + 520, v0 + 664, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg(v0 + 664) == 1)
  {
    v28 = 0;
    goto LABEL_34;
  }
  outlined init with take of LocalePreferences?(v0 + 520, v0 + 232, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  v30 = *(unsigned __int8 *)(v0 + 232);
  if (v30 == 2)
  {
    v31 = 0;
  }
  else
  {
    v31 = v30 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v31);
  v32 = *(_QWORD *)(v0 + 240);
  if (!v32)
  {
    Hasher._combine(_:)(0);
    v37 = (_QWORD *)(v0 + 232);
    goto LABEL_49;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v32 + 16));
  v33 = *(_QWORD *)(v32 + 16);
  if (!v33)
  {
    outlined init with take of LocalePreferences?(v0 + 520, v0 + 88, &demangling cache variable for type metadata for LocalePreferences?);
    v37 = (_QWORD *)(v0 + 88);
LABEL_49:
    outlined retain of LocalePreferences(v37);
    if (!*(_QWORD *)(v0 + 256))
      goto LABEL_43;
    goto LABEL_50;
  }
  outlined retain of LocalePreferences?(v0 + 520, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v34 = v32 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v34 += 16;
    --v33;
  }
  while (v33);
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v0 + 256))
  {
LABEL_43:
    Hasher._combine(_:)(0);
    if (!*(_QWORD *)(v0 + 272))
      goto LABEL_44;
    goto LABEL_51;
  }
LABEL_50:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v0 + 272))
  {
LABEL_44:
    Hasher._combine(_:)(0);
    v35 = *(_QWORD *)(v0 + 280);
    if (!v35)
      goto LABEL_45;
LABEL_52:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(v1, v35);
    swift_bridgeObjectRelease();
    v36 = *(_QWORD *)(v0 + 288);
    if (!v36)
      goto LABEL_46;
    goto LABEL_53;
  }
LABEL_51:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v35 = *(_QWORD *)(v0 + 280);
  if (v35)
    goto LABEL_52;
LABEL_45:
  Hasher._combine(_:)(0);
  v36 = *(_QWORD *)(v0 + 288);
  if (!v36)
  {
LABEL_46:
    Hasher._combine(_:)(0);
    goto LABEL_54;
  }
LABEL_53:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(v1, v36);
  swift_bridgeObjectRelease();
LABEL_54:
  v38 = *(void **)(v0 + 296);
  v39 = *(void **)(v0 + 304);
  v41 = *(void **)(v0 + 312);
  v40 = *(void **)(v0 + 320);
  v42 = *(void **)(v0 + 328);
  if (v38)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v43 = v39;
    v44 = v41;
    v45 = v40;
    v46 = v42;
    v47 = v38;
    _CFObject.hash(into:)();
    *(_QWORD *)(v0 + 80) = v38;
    if (v39)
      goto LABEL_56;
  }
  else
  {
    Hasher._combine(_:)(0);
    v52 = v42;
    v53 = v39;
    v54 = v41;
    v55 = v40;
    *(_QWORD *)(v0 + 80) = 0;
    if (v39)
    {
LABEL_56:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v48 = v39;
      _CFObject.hash(into:)();

      if (v41)
        goto LABEL_57;
      goto LABEL_62;
    }
  }
  Hasher._combine(_:)(0);
  if (v41)
  {
LABEL_57:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v49 = v41;
    _CFObject.hash(into:)();

    if (v40)
      goto LABEL_58;
LABEL_63:
    Hasher._combine(_:)(0);
    if (v42)
      goto LABEL_59;
    goto LABEL_64;
  }
LABEL_62:
  Hasher._combine(_:)(0);
  if (!v40)
    goto LABEL_63;
LABEL_58:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v50 = v40;
  _CFObject.hash(into:)();

  if (v42)
  {
LABEL_59:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v51 = v42;
    _CFObject.hash(into:)();

    goto LABEL_65;
  }
LABEL_64:
  Hasher._combine(_:)(0);
  v51 = 0;
LABEL_65:

  v56 = *(_QWORD *)(v0 + 336);
  if (v56)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(v1, v56);
    swift_bridgeObjectRelease();
    v57 = *(_QWORD *)(v0 + 344);
    if (v57)
      goto LABEL_67;
LABEL_70:
    Hasher._combine(_:)(0);
    if (*(_QWORD *)(v0 + 360))
      goto LABEL_68;
LABEL_71:
    Hasher._combine(_:)(0);
    goto LABEL_72;
  }
  Hasher._combine(_:)(0);
  v57 = *(_QWORD *)(v0 + 344);
  if (!v57)
    goto LABEL_70;
LABEL_67:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(v1, v57);
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v0 + 360))
    goto LABEL_71;
LABEL_68:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_72:
  v58 = *(unsigned __int8 *)(v0 + 368);
  if (v58 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v59 = v58 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v59);
  }
  v60 = *(unsigned __int8 *)(v0 + 369);
  if (v60 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v61 = v60 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v61);
  }
  v62 = *(unsigned __int8 *)(v0 + 370);
  if (v62 == 2)
  {
    v63 = 0;
  }
  else
  {
    v63 = v62 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v63);
  v64 = *(unsigned __int8 *)(v0 + 371);
  if (v64 == 2)
  {
    v65 = 0;
  }
  else
  {
    v66 = v64 & 1;
    Hasher._combine(_:)(1u);
    v65 = v66;
  }
  Hasher._combine(_:)(v65);
  outlined retain of LocalePreferences?(v0 + 520, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?(v0 + 520, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  return swift_unknownObjectRelease();
}

uint64_t static IntegerParseStrategy.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  char v15;
  __int128 v17;
  __int128 v18;

  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0
    && (v10 = type metadata accessor for IntegerParseStrategy(0, a3, a4, a5),
        *(unsigned __int8 *)(a1 + *(int *)(v10 + 44)) == *(unsigned __int8 *)(a2 + *(int *)(v10 + 44)))
    && (v11 = v10,
        specialized static ICULegacyNumberFormatter.NumberFormatType.== infix(_:_:)(a1 + *(int *)(v10 + 48), a2 + *(int *)(v10 + 48)), (v12 & 1) != 0))
  {
    v13 = *(int *)(v11 + 52);
    v14 = *(_OWORD *)(a1 + v13);
    v17 = *(_OWORD *)(a2 + v13);
    v18 = v14;
    v15 = specialized static Locale.== infix(_:_:)((uint64_t)&v18, (uint64_t)&v17);
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

uint64_t IntegerParseStrategy.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181D4C68C + 4 * byte_1821528F4[a1]))(0x745374616D726F66, 0xEB00000000656C79);
}

uint64_t sub_181D4C68C()
{
  return 0x746E65696E656CLL;
}

unint64_t sub_181D4C6A4()
{
  return 0xD000000000000010;
}

uint64_t sub_181D4C6C0()
{
  return 0x656C61636F6CLL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance IntegerParseStrategy<A>.CodingKeys()
{
  unsigned __int8 *v0;

  return IntegerParseStrategy.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance IntegerParseStrategy<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerParseStrategy<A>.CodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance IntegerParseStrategy<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerParseStrategy<A>.CodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t IntegerParseStrategy.encode(to:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[4];
  __int128 v16;
  char v17;

  v3 = a2[2];
  v4 = a2[3];
  v15[0] = a2;
  v15[1] = v3;
  v5 = type metadata accessor for IntegerParseStrategy.CodingKeys(255, v3, v4, a2[4]);
  MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerParseStrategy<A>.CodingKeys, v5);
  v6 = type metadata accessor for KeyedEncodingContainer();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v15 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v16) = 0;
  v10 = v15[2];
  v11 = v15[3];
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v11)
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v13 = v7;
  v14 = v15[0];
  LOBYTE(v16) = 1;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v16) = 2;
  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType and conformance ICULegacyNumberFormatter.NumberFormatType, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType, (uint64_t)&protocol conformance descriptor for ICULegacyNumberFormatter.NumberFormatType);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v16 = *(_OWORD *)(v10 + *(int *)(v14 + 52));
  v17 = 3;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v9, v6);
}

Swift::Int IntegerParseStrategy.hashValue.getter(uint64_t a1)
{
  _BYTE v3[72];

  Hasher.init(_seed:)();
  IntegerParseStrategy.hash(into:)((uint64_t)v3, a1);
  return Hasher._finalize()();
}

uint64_t IntegerParseStrategy.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  _QWORD *v40;
  uint64_t v41;
  __int128 v42;
  char v43;

  v30 = a5;
  v31 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  MEMORY[0x1E0C80A78](v31);
  v34 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v10);
  v38 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for IntegerParseStrategy.CodingKeys(255, a2, a3, a4);
  MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerParseStrategy<A>.CodingKeys, v12);
  v37 = type metadata accessor for KeyedDecodingContainer();
  v32 = *(_QWORD *)(v37 - 8);
  MEMORY[0x1E0C80A78](v37);
  v14 = (char *)&v30 - v13;
  v35 = a3;
  v36 = a2;
  v15 = type metadata accessor for IntegerParseStrategy(0, a2, a3, a4);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v30 - v17;
  v19 = a1[3];
  v40 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v19);
  v39 = v14;
  v20 = v41;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v20)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
  v41 = v16;
  v22 = v33;
  v21 = (uint64_t)v34;
  v23 = v32;
  LOBYTE(v42) = 0;
  v24 = v36;
  v25 = v37;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v18, v38, v24);
  LOBYTE(v42) = 1;
  v26 = KeyedDecodingContainer.decode(_:forKey:)();
  v38 = (char *)v15;
  v18[*(int *)(v15 + 44)] = v26 & 1;
  LOBYTE(v42) = 2;
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType and conformance ICULegacyNumberFormatter.NumberFormatType, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType, (uint64_t)&protocol conformance descriptor for ICULegacyNumberFormatter.NumberFormatType);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  outlined init with take of ICUNumberFormatter.Signature(v21, (uint64_t)&v18[*((int *)v38 + 12)], type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  v43 = 3;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v39, v25);
  v27 = v38;
  *(_OWORD *)&v18[*((int *)v38 + 13)] = v42;
  v28 = v41;
  (*(void (**)(uint64_t, char *, char *))(v41 + 16))(v30, v18, v27);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
  return (*(uint64_t (**)(char *, char *))(v28 + 8))(v18, v27);
}

uint64_t protocol witness for Decodable.init(from:) in conformance IntegerParseStrategy<A>@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return IntegerParseStrategy.init(from:)(a1, a2[2], a2[3], a2[4], a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance IntegerParseStrategy<A>(_QWORD *a1, _QWORD *a2)
{
  return IntegerParseStrategy.encode(to:)(a1, a2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerParseStrategy<A>(uint64_t a1, uint64_t a2)
{
  _BYTE v4[72];

  Hasher.init(_seed:)();
  IntegerParseStrategy.hash(into:)((uint64_t)v4, a2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance IntegerParseStrategy<A>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return static IntegerParseStrategy.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4]);
}

uint64_t protocol witness for ParseStrategy.parse(_:) in conformance IntegerParseStrategy<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return IntegerParseStrategy.parse(_:)(*(_QWORD *)a1, *(void **)(a1 + 8), a2, a3);
}

uint64_t type metadata accessor for IntegerParseStrategy.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IntegerParseStrategy.CodingKeys);
}

void base witness table accessor for Equatable in IntegerParseStrategy<A>()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t instantiation function for generic protocol witness table for IntegerParseStrategy<A>(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  a1[1] = MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerParseStrategy<A>);
  a1[2] = MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerParseStrategy<A>, a2);
  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerParseStrategy<A>, a2);
  a1[3] = result;
  return result;
}

uint64_t type metadata completion function for IntegerParseStrategy()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for IntegerParseStrategy(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  void *v27;
  const void *v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  void *v33;
  const void *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  void *v39;
  const void *v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *result;
  uint64_t v52;
  size_t __n;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = type metadata accessor for FloatingPointRoundingRule();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v10 | 7;
  if (*(_DWORD *)(v9 + 84))
    v12 = *(_QWORD *)(v9 + 64);
  else
    v12 = *(_QWORD *)(v9 + 64) + 1;
  if (((v12 + 7 + ((v10 + 79) & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 11 <= ((v12 + 7 + ((v10 + 78) & ~v10)) & 0xFFFFFFFFFFFFFFF8)
                                                                      + 10)
    v13 = ((v12 + 7 + ((v10 + 78) & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 10;
  else
    v13 = ((v12 + 7 + ((v10 + 79) & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 11;
  v14 = v10 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (v14 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || ((v13 + (((v10 | 7) + v7 + 1) & ~(v10 | 7)) + 8) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v17 = *a2;
    *a1 = *a2;
    v18 = (_QWORD *)(v17 + (((v14 | 7) + 16) & ~(unint64_t)(v14 | 7)));
    swift_retain();
  }
  else
  {
    v52 = v10 + 79;
    __n = v12;
    v54 = v10 + 78;
    v55 = v8;
    v56 = v12 + 7;
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(a1, a2, v5);
    *((_BYTE *)a1 + v7) = *((_BYTE *)a2 + v7);
    v19 = ((unint64_t)a1 + v7 + v11 + 1) & ~v11;
    v20 = ((unint64_t)a2 + v7 + v11 + 1) & ~v11;
    v22 = ~v10;
    v18 = a1;
    switch(*(_BYTE *)(v20 + v13))
    {
      case 0:
        v23 = *(_QWORD *)v20;
        *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
        *(_QWORD *)v19 = v23;
        v24 = *(_OWORD *)(v20 + 16);
        v25 = *(_OWORD *)(v20 + 32);
        v26 = *(_OWORD *)(v20 + 48);
        *(_OWORD *)(v19 + 57) = *(_OWORD *)(v20 + 57);
        *(_OWORD *)(v19 + 32) = v25;
        *(_OWORD *)(v19 + 48) = v26;
        *(_OWORD *)(v19 + 16) = v24;
        *(_BYTE *)(v19 + 73) = *(_BYTE *)(v20 + 73);
        LOWORD(v23) = *(_WORD *)(v20 + 74);
        *(_BYTE *)(v19 + 76) = *(_BYTE *)(v20 + 76);
        *(_WORD *)(v19 + 74) = v23;
        *(_BYTE *)(v19 + 77) = *(_BYTE *)(v20 + 77);
        v27 = (void *)((v54 + v19) & v22);
        v28 = (const void *)((v54 + v20) & v22);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v28, 1, v55))
        {
          memcpy(v27, v28, __n);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v27, v28, v55);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v27, 0, 1, v55);
        }
        v41 = 0;
        v42 = ((unint64_t)v27 + v56) & 0xFFFFFFFFFFFFFFF8;
        v43 = ((unint64_t)v28 + v56) & 0xFFFFFFFFFFFFFFF8;
        v44 = *(_QWORD *)v43;
        *(_BYTE *)(v42 + 8) = *(_BYTE *)(v43 + 8);
        *(_QWORD *)v42 = v44;
        *(_BYTE *)(v42 + 9) = *(_BYTE *)(v43 + 9);
        break;
      case 1:
        v29 = *(_QWORD *)v20;
        *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
        *(_QWORD *)v19 = v29;
        v30 = *(_OWORD *)(v20 + 16);
        v31 = *(_OWORD *)(v20 + 32);
        v32 = *(_OWORD *)(v20 + 48);
        *(_OWORD *)(v19 + 57) = *(_OWORD *)(v20 + 57);
        *(_OWORD *)(v19 + 32) = v31;
        *(_OWORD *)(v19 + 48) = v32;
        *(_OWORD *)(v19 + 16) = v30;
        *(_BYTE *)(v19 + 73) = *(_BYTE *)(v20 + 73);
        LOWORD(v29) = *(_WORD *)(v20 + 74);
        *(_BYTE *)(v19 + 76) = *(_BYTE *)(v20 + 76);
        *(_WORD *)(v19 + 74) = v29;
        *(_BYTE *)(v19 + 77) = *(_BYTE *)(v20 + 77);
        v33 = (void *)((v54 + v19) & v22);
        v34 = (const void *)((v54 + v20) & v22);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v34, 1, v55))
        {
          memcpy(v33, v34, __n);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v33, v34, v55);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v33, 0, 1, v55);
        }
        v45 = ((unint64_t)v33 + v56) & 0xFFFFFFFFFFFFFFF8;
        v46 = ((unint64_t)v34 + v56) & 0xFFFFFFFFFFFFFFF8;
        v47 = *(_QWORD *)v46;
        *(_BYTE *)(v45 + 8) = *(_BYTE *)(v46 + 8);
        *(_QWORD *)v45 = v47;
        *(_BYTE *)(v45 + 9) = *(_BYTE *)(v46 + 9);
        v41 = 1;
        break;
      case 2:
        v35 = *(_QWORD *)v20;
        *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
        *(_QWORD *)v19 = v35;
        v36 = *(_OWORD *)(v20 + 16);
        v37 = *(_OWORD *)(v20 + 32);
        v38 = *(_OWORD *)(v20 + 48);
        *(_OWORD *)(v19 + 57) = *(_OWORD *)(v20 + 57);
        *(_OWORD *)(v19 + 32) = v37;
        *(_OWORD *)(v19 + 48) = v38;
        *(_OWORD *)(v19 + 16) = v36;
        *(_BYTE *)(v19 + 73) = *(_BYTE *)(v20 + 73);
        *(_DWORD *)(v19 + 74) = *(_DWORD *)(v20 + 74);
        *(_BYTE *)(v19 + 78) = *(_BYTE *)(v20 + 78);
        v39 = (void *)((v52 + v19) & v22);
        v40 = (const void *)((v52 + v20) & v22);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v40, 1, v55))
        {
          memcpy(v39, v40, __n);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v39, v40, v55);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v39, 0, 1, v55);
        }
        v48 = ((unint64_t)v39 + v56) & 0xFFFFFFFFFFFFFFF8;
        v49 = ((unint64_t)v40 + v56) & 0xFFFFFFFFFFFFFFF8;
        v50 = *(_QWORD *)v49;
        *(_BYTE *)(v48 + 8) = *(_BYTE *)(v49 + 8);
        *(_QWORD *)v48 = v50;
        *(_BYTE *)(v48 + 9) = *(_BYTE *)(v49 + 9);
        *(_BYTE *)(v48 + 10) = *(_BYTE *)(v49 + 10);
        v41 = 2;
        break;
      case 3:
        *(_WORD *)v19 = *(_WORD *)v20;
        v41 = 3;
        break;
      default:
        if (v13 <= 3)
          v21 = v13;
        else
          v21 = 4;
        __asm { BR              X11 }
        return result;
    }
    *(_BYTE *)(v19 + v13) = v41;
    *(_OWORD *)(((v19 | 7) + v13 + 1) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((v20 | 7) + v13 + 1) & 0xFFFFFFFFFFFFF8);
    swift_unknownObjectRetain();
  }
  return v18;
}

uint64_t destroy for IntegerParseStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = *(_QWORD *)(v3 + 64);
  v5 = type metadata accessor for FloatingPointRoundingRule();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (a1 + (v7 | 7) + v4 + 1) & ~(v7 | 7);
  v9 = (v7 + 78) & ~v7;
  if (*(_DWORD *)(v6 + 84))
    v11 = *(_QWORD *)(v6 + 64);
  else
    v11 = *(_QWORD *)(v6 + 64) + 1;
  v12 = ((v11 + 7 + v9) & 0xFFFFFFFFFFFFFFF8) + 10;
  if (((v11 + 7 + ((v7 + 79) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 11 <= v12)
    v13 = ((v11 + 7 + v9) & 0xFFFFFFFFFFFFFFF8) + 10;
  else
    v13 = ((v11 + 7 + ((v7 + 79) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 11;
  v14 = *(unsigned __int8 *)(v8 + v13);
  v16 = ~v7;
  switch(v14)
  {
    case 0:
    case 1:
      v17 = v7 + 78 + v8;
      goto LABEL_15;
    case 2:
      v17 = v8 + v7 + 79;
LABEL_15:
      v18 = v17 & v16;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v17 & v16, 1, v5))
        (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v18, v5);
      break;
    case 3:
      return swift_unknownObjectRelease();
    default:
      if (v16 <= 3)
        v15 = ~(_DWORD)v7;
      else
        v15 = 4;
      __asm { BR              X14 }
      return result;
  }
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for IntegerParseStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  size_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  void *v26;
  const void *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  void *v32;
  const void *v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  void *v38;
  const void *v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t result;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  *(_BYTE *)(v6 + a1) = *(_BYTE *)(v6 + a2);
  v9 = type metadata accessor for FloatingPointRoundingRule();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v11 | 7) + 1;
  v13 = (v12 + v7) & ~(v11 | 7);
  v14 = (v12 + v8) & ~(v11 | 7);
  v15 = v11 + 78;
  if (*(_DWORD *)(v10 + 84))
    v16 = *(_QWORD *)(v10 + 64);
  else
    v16 = *(_QWORD *)(v10 + 64) + 1;
  v17 = v16 + 7;
  v18 = v11 + 79;
  if (((v16 + 7 + ((v11 + 79) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 11 <= ((v16 + 7 + ((v11 + 78) & ~v11)) & 0xFFFFFFFFFFFFFFF8)
                                                                      + 10)
    v19 = ((v16 + 7 + ((v11 + 78) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 10;
  else
    v19 = ((v16 + 7 + ((v11 + 79) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 11;
  v21 = ~v11;
  switch(*(_BYTE *)(v14 + v19))
  {
    case 0:
      v22 = *(_QWORD *)v14;
      *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
      *(_QWORD *)v13 = v22;
      v23 = *(_OWORD *)(v14 + 16);
      v24 = *(_OWORD *)(v14 + 32);
      v25 = *(_OWORD *)(v14 + 48);
      *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
      *(_OWORD *)(v13 + 32) = v24;
      *(_OWORD *)(v13 + 48) = v25;
      *(_OWORD *)(v13 + 16) = v23;
      *(_BYTE *)(v13 + 73) = *(_BYTE *)(v14 + 73);
      LOWORD(v22) = *(_WORD *)(v14 + 74);
      *(_BYTE *)(v13 + 76) = *(_BYTE *)(v14 + 76);
      *(_WORD *)(v13 + 74) = v22;
      *(_BYTE *)(v13 + 77) = *(_BYTE *)(v14 + 77);
      v26 = (void *)((v15 + v13) & v21);
      v27 = (const void *)((v15 + v14) & v21);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v27, 1, v9))
      {
        memcpy(v26, v27, v16);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v26, v27, v9);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v26, 0, 1, v9);
      }
      v40 = 0;
      v41 = ((unint64_t)v26 + v17) & 0xFFFFFFFFFFFFFFF8;
      v42 = ((unint64_t)v27 + v17) & 0xFFFFFFFFFFFFFFF8;
      v43 = *(_QWORD *)v42;
      *(_BYTE *)(v41 + 8) = *(_BYTE *)(v42 + 8);
      *(_QWORD *)v41 = v43;
      *(_BYTE *)(v41 + 9) = *(_BYTE *)(v42 + 9);
      break;
    case 1:
      v28 = *(_QWORD *)v14;
      *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
      *(_QWORD *)v13 = v28;
      v29 = *(_OWORD *)(v14 + 16);
      v30 = *(_OWORD *)(v14 + 32);
      v31 = *(_OWORD *)(v14 + 48);
      *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
      *(_OWORD *)(v13 + 32) = v30;
      *(_OWORD *)(v13 + 48) = v31;
      *(_OWORD *)(v13 + 16) = v29;
      *(_BYTE *)(v13 + 73) = *(_BYTE *)(v14 + 73);
      LOWORD(v28) = *(_WORD *)(v14 + 74);
      *(_BYTE *)(v13 + 76) = *(_BYTE *)(v14 + 76);
      *(_WORD *)(v13 + 74) = v28;
      *(_BYTE *)(v13 + 77) = *(_BYTE *)(v14 + 77);
      v32 = (void *)((v15 + v13) & v21);
      v33 = (const void *)((v15 + v14) & v21);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v33, 1, v9))
      {
        memcpy(v32, v33, v16);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v32, v33, v9);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v32, 0, 1, v9);
      }
      v44 = ((unint64_t)v32 + v17) & 0xFFFFFFFFFFFFFFF8;
      v45 = ((unint64_t)v33 + v17) & 0xFFFFFFFFFFFFFFF8;
      v46 = *(_QWORD *)v45;
      *(_BYTE *)(v44 + 8) = *(_BYTE *)(v45 + 8);
      *(_QWORD *)v44 = v46;
      *(_BYTE *)(v44 + 9) = *(_BYTE *)(v45 + 9);
      v40 = 1;
      break;
    case 2:
      v34 = *(_QWORD *)v14;
      *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
      *(_QWORD *)v13 = v34;
      v35 = *(_OWORD *)(v14 + 16);
      v36 = *(_OWORD *)(v14 + 32);
      v37 = *(_OWORD *)(v14 + 48);
      *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
      *(_OWORD *)(v13 + 32) = v36;
      *(_OWORD *)(v13 + 48) = v37;
      *(_OWORD *)(v13 + 16) = v35;
      *(_BYTE *)(v13 + 73) = *(_BYTE *)(v14 + 73);
      *(_DWORD *)(v13 + 74) = *(_DWORD *)(v14 + 74);
      *(_BYTE *)(v13 + 78) = *(_BYTE *)(v14 + 78);
      v38 = (void *)((v18 + v13) & v21);
      v39 = (const void *)((v18 + v14) & v21);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v39, 1, v9))
      {
        memcpy(v38, v39, v16);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v38, v39, v9);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v38, 0, 1, v9);
      }
      v47 = ((unint64_t)v38 + v17) & 0xFFFFFFFFFFFFFFF8;
      v48 = ((unint64_t)v39 + v17) & 0xFFFFFFFFFFFFFFF8;
      v49 = *(_QWORD *)v48;
      *(_BYTE *)(v47 + 8) = *(_BYTE *)(v48 + 8);
      *(_QWORD *)v47 = v49;
      *(_BYTE *)(v47 + 9) = *(_BYTE *)(v48 + 9);
      *(_BYTE *)(v47 + 10) = *(_BYTE *)(v48 + 10);
      v40 = 2;
      break;
    case 3:
      *(_WORD *)v13 = *(_WORD *)v14;
      v40 = 3;
      break;
    default:
      if (v19 <= 3)
        v20 = v19;
      else
        v20 = 4;
      __asm { BR              X14 }
      return result;
  }
  *(_BYTE *)(v13 + v19) = v40;
  *(_OWORD *)(((v13 | 7) + v19 + 1) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((v14 | 7) + v19 + 1) & 0xFFFFFFFFFFFFF8);
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for IntegerParseStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  void *v37;
  const void *v38;
  size_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  void *v44;
  const void *v45;
  size_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  const void *v51;
  size_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  size_t v62;
  size_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t result;
  uint64_t v71;
  uint64_t v72;
  size_t __n;
  size_t v74;
  int v75;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = (_BYTE *)(v6 + a2);
  *(_BYTE *)(v6 + a1) = *v8;
  v9 = type metadata accessor for FloatingPointRoundingRule();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v11 | 7) + 1;
  v13 = (v12 + v7) & ~(v11 | 7);
  v14 = (unint64_t)&v8[v12] & ~(v11 | 7);
  if (v13 == v14)
  {
    v24 = *(_DWORD *)(v10 + 84);
    v25 = *(_QWORD *)(v10 + 64);
    v26 = (v11 + 79) & ~v11;
    v17 = (v11 + 78) & ~v11;
  }
  else
  {
    v15 = v9;
    v72 = a1;
    v16 = v11 + 78;
    v17 = (v11 + 78) & ~v11;
    if (*(_DWORD *)(v10 + 84))
      v18 = *(_QWORD *)(v10 + 64);
    else
      v18 = *(_QWORD *)(v10 + 64) + 1;
    v19 = ((v18 + 7 + v17) & 0xFFFFFFFFFFFFFFF8) + 10;
    v20 = (v18 + 7 + ((v11 + 79) & ~v11)) & 0xFFFFFFFFFFFFFFF8;
    v21 = v20 + 11;
    if (v20 + 11 <= v19)
      v22 = ((v18 + 7 + v17) & 0xFFFFFFFFFFFFFFF8) + 10;
    else
      v22 = v20 + 11;
    __n = v18;
    v27 = ~v11;
    v75 = *(_DWORD *)(v10 + 84);
    v74 = *(_QWORD *)(v10 + 64);
    switch(*(_BYTE *)(v13 + v22))
    {
      case 0:
      case 1:
        v71 = v11 + 78;
        v28 = v16 + v13;
        goto LABEL_16;
      case 2:
        v71 = v11 + 78;
        v28 = v13 + v11 + 79;
LABEL_16:
        v29 = v28 & v27;
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v28 & v27, 1, v15))
          (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v29, v15);
        v17 = (v11 + 78) & ~v11;
        v30 = v74;
        v16 = v71;
        if (!v75)
          goto LABEL_19;
        goto LABEL_20;
      case 3:
LABEL_19:
        v30 = __n;
LABEL_20:
        v31 = ((v17 + v30 + 7) & 0xFFFFFFFFFFFFFFF8) + 10;
        if (v19 > v31)
          v31 = v19;
        if (v21 > v31)
          v31 = v21;
        switch(*(_BYTE *)(v14 + v31))
        {
          case 0:
            v33 = *(_QWORD *)v14;
            *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
            *(_QWORD *)v13 = v33;
            v34 = *(_OWORD *)(v14 + 16);
            v35 = *(_OWORD *)(v14 + 32);
            v36 = *(_OWORD *)(v14 + 48);
            *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
            *(_OWORD *)(v13 + 32) = v35;
            *(_OWORD *)(v13 + 48) = v36;
            *(_OWORD *)(v13 + 16) = v34;
            *(_BYTE *)(v13 + 73) = *(_BYTE *)(v14 + 73);
            LOWORD(v33) = *(_WORD *)(v14 + 74);
            *(_BYTE *)(v13 + 76) = *(_BYTE *)(v14 + 76);
            *(_WORD *)(v13 + 74) = v33;
            *(_BYTE *)(v13 + 77) = *(_BYTE *)(v14 + 77);
            v37 = (void *)((v16 + v13) & v27);
            v38 = (const void *)((v16 + v14) & v27);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v38, 1, v15))
            {
              v39 = __n;
              memcpy(v37, v38, __n);
              v24 = v75;
              v17 = (v11 + 78) & ~v11;
              v25 = v74;
              v26 = (v11 + 79) & ~v11;
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v37, v38, v15);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v37, 0, 1, v15);
              v24 = v75;
              v17 = (v11 + 78) & ~v11;
              v25 = v74;
              v26 = (v11 + 79) & ~v11;
              v39 = __n;
            }
            v56 = ((unint64_t)v37 + v39 + 7) & 0xFFFFFFFFFFFFFFF8;
            v57 = ((unint64_t)v38 + v39 + 7) & 0xFFFFFFFFFFFFFFF8;
            v58 = *(_QWORD *)v57;
            *(_BYTE *)(v56 + 8) = *(_BYTE *)(v57 + 8);
            *(_QWORD *)v56 = v58;
            *(_BYTE *)(v56 + 9) = *(_BYTE *)(v57 + 9);
            *(_BYTE *)(v13 + v22) = 0;
            goto LABEL_43;
          case 1:
            v40 = *(_QWORD *)v14;
            *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
            *(_QWORD *)v13 = v40;
            v41 = *(_OWORD *)(v14 + 16);
            v42 = *(_OWORD *)(v14 + 32);
            v43 = *(_OWORD *)(v14 + 48);
            *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
            *(_OWORD *)(v13 + 32) = v42;
            *(_OWORD *)(v13 + 48) = v43;
            *(_OWORD *)(v13 + 16) = v41;
            *(_BYTE *)(v13 + 73) = *(_BYTE *)(v14 + 73);
            LOWORD(v40) = *(_WORD *)(v14 + 74);
            *(_BYTE *)(v13 + 76) = *(_BYTE *)(v14 + 76);
            *(_WORD *)(v13 + 74) = v40;
            *(_BYTE *)(v13 + 77) = *(_BYTE *)(v14 + 77);
            v44 = (void *)((v16 + v13) & v27);
            v45 = (const void *)((v16 + v14) & v27);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v45, 1, v15))
            {
              v46 = __n;
              memcpy(v44, v45, __n);
              v24 = v75;
              v17 = (v11 + 78) & ~v11;
              v25 = v74;
              v26 = (v11 + 79) & ~v11;
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v44, v45, v15);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v44, 0, 1, v15);
              v24 = v75;
              v17 = (v11 + 78) & ~v11;
              v25 = v74;
              v26 = (v11 + 79) & ~v11;
              v46 = __n;
            }
            v59 = ((unint64_t)v44 + v46 + 7) & 0xFFFFFFFFFFFFFFF8;
            v60 = ((unint64_t)v45 + v46 + 7) & 0xFFFFFFFFFFFFFFF8;
            v61 = *(_QWORD *)v60;
            *(_BYTE *)(v59 + 8) = *(_BYTE *)(v60 + 8);
            *(_QWORD *)v59 = v61;
            *(_BYTE *)(v59 + 9) = *(_BYTE *)(v60 + 9);
            *(_BYTE *)(v13 + v22) = 1;
LABEL_43:
            a1 = v72;
            break;
          case 2:
            v47 = *(_QWORD *)v14;
            *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
            *(_QWORD *)v13 = v47;
            v48 = *(_OWORD *)(v14 + 16);
            v49 = *(_OWORD *)(v14 + 32);
            v50 = *(_OWORD *)(v14 + 48);
            *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
            *(_OWORD *)(v13 + 32) = v49;
            *(_OWORD *)(v13 + 48) = v50;
            *(_OWORD *)(v13 + 16) = v48;
            *(_BYTE *)(v13 + 73) = *(_BYTE *)(v14 + 73);
            *(_DWORD *)(v13 + 74) = *(_DWORD *)(v14 + 74);
            *(_BYTE *)(v13 + 78) = *(_BYTE *)(v14 + 78);
            v51 = (const void *)((v11 + 79 + v14) & v27);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v51, 1, v15))
            {
              v52 = __n;
              memcpy((void *)((v13 + v11 + 79) & v27), v51, __n);
              v26 = (v11 + 79) & ~v11;
            }
            else
            {
              (*(void (**)(uint64_t, const void *, uint64_t))(v10 + 16))((v13 + v11 + 79) & v27, v51, v15);
              (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))((v13 + v11 + 79) & v27, 0, 1, v15);
              v26 = (v11 + 79) & ~v11;
              v52 = __n;
            }
            v53 = (((v13 + v11 + 79) & v27) + v52 + 7) & 0xFFFFFFFFFFFFFFF8;
            v54 = ((unint64_t)v51 + v52 + 7) & 0xFFFFFFFFFFFFFFF8;
            v55 = *(_QWORD *)v54;
            *(_BYTE *)(v53 + 8) = *(_BYTE *)(v54 + 8);
            *(_QWORD *)v53 = v55;
            *(_BYTE *)(v53 + 9) = *(_BYTE *)(v54 + 9);
            *(_BYTE *)(v53 + 10) = *(_BYTE *)(v54 + 10);
            *(_BYTE *)(v13 + v22) = 2;
            a1 = v72;
            v24 = v75;
            v17 = (v11 + 78) & ~v11;
            v25 = v74;
            break;
          case 3:
            *(_WORD *)v13 = *(_WORD *)v14;
            *(_BYTE *)(v13 + v22) = 3;
            v26 = (v11 + 79) & ~v11;
            a1 = v72;
            v24 = v75;
            v25 = v74;
            break;
          default:
            if (v22 <= 3)
              v32 = v22;
            else
              v32 = 4;
            __asm { BR              X11 }
            return result;
        }
        return result;
      default:
        if (v22 <= 3)
          v23 = v22;
        else
          v23 = 4;
        __asm { BR              X11 }
        return result;
    }
  }
  if (v24)
    v62 = v25;
  else
    v62 = v25 + 1;
  v63 = v62 + 7;
  v64 = ((v63 + v17) & 0xFFFFFFFFFFFFFFF8) + 10;
  v65 = ((v63 + v26) & 0xFFFFFFFFFFFFFFF8) + 11;
  if (v65 <= v64)
    v65 = v64;
  v66 = v65 + 1;
  v67 = (_QWORD *)(((v13 | 7) + v66) & 0xFFFFFFFFFFFFFFF8);
  v68 = (_QWORD *)(((v14 | 7) + v66) & 0xFFFFFFFFFFFFFFF8);
  v69 = v68[1];
  *v67 = *v68;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v67[1] = v69;
  return a1;
}

uint64_t initializeWithTake for IntegerParseStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  size_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  void *v26;
  const void *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  void *v32;
  const void *v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  void *v38;
  const void *v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t result;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  *(_BYTE *)(v6 + a1) = *(_BYTE *)(v6 + a2);
  v9 = type metadata accessor for FloatingPointRoundingRule();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v11 | 7) + 1;
  v13 = (v12 + v7) & ~(v11 | 7);
  v14 = (v12 + v8) & ~(v11 | 7);
  v15 = v11 + 78;
  if (*(_DWORD *)(v10 + 84))
    v16 = *(_QWORD *)(v10 + 64);
  else
    v16 = *(_QWORD *)(v10 + 64) + 1;
  v17 = v16 + 7;
  v18 = v11 + 79;
  if (((v16 + 7 + ((v11 + 79) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 11 <= ((v16 + 7 + ((v11 + 78) & ~v11)) & 0xFFFFFFFFFFFFFFF8)
                                                                      + 10)
    v19 = ((v16 + 7 + ((v11 + 78) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 10;
  else
    v19 = ((v16 + 7 + ((v11 + 79) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 11;
  v21 = ~v11;
  switch(*(_BYTE *)(v14 + v19))
  {
    case 0:
      v22 = *(_QWORD *)v14;
      *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
      *(_QWORD *)v13 = v22;
      v23 = *(_OWORD *)(v14 + 16);
      v24 = *(_OWORD *)(v14 + 32);
      v25 = *(_OWORD *)(v14 + 48);
      *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
      *(_OWORD *)(v13 + 32) = v24;
      *(_OWORD *)(v13 + 48) = v25;
      *(_OWORD *)(v13 + 16) = v23;
      *(_BYTE *)(v13 + 73) = *(_BYTE *)(v14 + 73);
      LOWORD(v22) = *(_WORD *)(v14 + 74);
      *(_BYTE *)(v13 + 76) = *(_BYTE *)(v14 + 76);
      *(_WORD *)(v13 + 74) = v22;
      *(_BYTE *)(v13 + 77) = *(_BYTE *)(v14 + 77);
      v26 = (void *)((v15 + v13) & v21);
      v27 = (const void *)((v15 + v14) & v21);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v27, 1, v9))
      {
        memcpy(v26, v27, v16);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v26, v27, v9);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v26, 0, 1, v9);
      }
      v40 = 0;
      v41 = ((unint64_t)v26 + v17) & 0xFFFFFFFFFFFFFFF8;
      v42 = ((unint64_t)v27 + v17) & 0xFFFFFFFFFFFFFFF8;
      v43 = *(_QWORD *)v42;
      *(_BYTE *)(v41 + 8) = *(_BYTE *)(v42 + 8);
      *(_QWORD *)v41 = v43;
      *(_BYTE *)(v41 + 9) = *(_BYTE *)(v42 + 9);
      break;
    case 1:
      v28 = *(_QWORD *)v14;
      *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
      *(_QWORD *)v13 = v28;
      v29 = *(_OWORD *)(v14 + 16);
      v30 = *(_OWORD *)(v14 + 32);
      v31 = *(_OWORD *)(v14 + 48);
      *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
      *(_OWORD *)(v13 + 32) = v30;
      *(_OWORD *)(v13 + 48) = v31;
      *(_OWORD *)(v13 + 16) = v29;
      *(_BYTE *)(v13 + 73) = *(_BYTE *)(v14 + 73);
      LOWORD(v28) = *(_WORD *)(v14 + 74);
      *(_BYTE *)(v13 + 76) = *(_BYTE *)(v14 + 76);
      *(_WORD *)(v13 + 74) = v28;
      *(_BYTE *)(v13 + 77) = *(_BYTE *)(v14 + 77);
      v32 = (void *)((v15 + v13) & v21);
      v33 = (const void *)((v15 + v14) & v21);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v33, 1, v9))
      {
        memcpy(v32, v33, v16);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v32, v33, v9);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v32, 0, 1, v9);
      }
      v44 = ((unint64_t)v32 + v17) & 0xFFFFFFFFFFFFFFF8;
      v45 = ((unint64_t)v33 + v17) & 0xFFFFFFFFFFFFFFF8;
      v46 = *(_QWORD *)v45;
      *(_BYTE *)(v44 + 8) = *(_BYTE *)(v45 + 8);
      *(_QWORD *)v44 = v46;
      *(_BYTE *)(v44 + 9) = *(_BYTE *)(v45 + 9);
      v40 = 1;
      break;
    case 2:
      v34 = *(_QWORD *)v14;
      *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
      *(_QWORD *)v13 = v34;
      v35 = *(_OWORD *)(v14 + 16);
      v36 = *(_OWORD *)(v14 + 32);
      v37 = *(_OWORD *)(v14 + 48);
      *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
      *(_OWORD *)(v13 + 32) = v36;
      *(_OWORD *)(v13 + 48) = v37;
      *(_OWORD *)(v13 + 16) = v35;
      *(_BYTE *)(v13 + 73) = *(_BYTE *)(v14 + 73);
      *(_DWORD *)(v13 + 74) = *(_DWORD *)(v14 + 74);
      *(_BYTE *)(v13 + 78) = *(_BYTE *)(v14 + 78);
      v38 = (void *)((v18 + v13) & v21);
      v39 = (const void *)((v18 + v14) & v21);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v39, 1, v9))
      {
        memcpy(v38, v39, v16);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v38, v39, v9);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v38, 0, 1, v9);
      }
      v47 = ((unint64_t)v38 + v17) & 0xFFFFFFFFFFFFFFF8;
      v48 = ((unint64_t)v39 + v17) & 0xFFFFFFFFFFFFFFF8;
      v49 = *(_QWORD *)v48;
      *(_BYTE *)(v47 + 8) = *(_BYTE *)(v48 + 8);
      *(_QWORD *)v47 = v49;
      *(_BYTE *)(v47 + 9) = *(_BYTE *)(v48 + 9);
      *(_BYTE *)(v47 + 10) = *(_BYTE *)(v48 + 10);
      v40 = 2;
      break;
    case 3:
      *(_WORD *)v13 = *(_WORD *)v14;
      v40 = 3;
      break;
    default:
      if (v19 <= 3)
        v20 = v19;
      else
        v20 = 4;
      __asm { BR              X14 }
      return result;
  }
  *(_BYTE *)(v13 + v19) = v40;
  *(_OWORD *)(((v13 | 7) + v19 + 1) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((v14 | 7) + v19 + 1) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for IntegerParseStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  void *v37;
  const void *v38;
  size_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  void *v44;
  const void *v45;
  size_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  const void *v51;
  size_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  size_t v62;
  size_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t result;
  uint64_t v71;
  uint64_t v72;
  size_t __n;
  size_t v74;
  int v75;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = (_BYTE *)(v6 + a2);
  *(_BYTE *)(v6 + a1) = *v8;
  v9 = type metadata accessor for FloatingPointRoundingRule();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v11 | 7) + 1;
  v13 = (v12 + v7) & ~(v11 | 7);
  v14 = (unint64_t)&v8[v12] & ~(v11 | 7);
  if (v13 == v14)
  {
    v24 = *(_DWORD *)(v10 + 84);
    v25 = *(_QWORD *)(v10 + 64);
    v26 = (v11 + 79) & ~v11;
    v17 = (v11 + 78) & ~v11;
  }
  else
  {
    v15 = v9;
    v72 = a1;
    v16 = v11 + 78;
    v17 = (v11 + 78) & ~v11;
    if (*(_DWORD *)(v10 + 84))
      v18 = *(_QWORD *)(v10 + 64);
    else
      v18 = *(_QWORD *)(v10 + 64) + 1;
    v19 = ((v18 + 7 + v17) & 0xFFFFFFFFFFFFFFF8) + 10;
    v20 = (v18 + 7 + ((v11 + 79) & ~v11)) & 0xFFFFFFFFFFFFFFF8;
    v21 = v20 + 11;
    if (v20 + 11 <= v19)
      v22 = ((v18 + 7 + v17) & 0xFFFFFFFFFFFFFFF8) + 10;
    else
      v22 = v20 + 11;
    __n = v18;
    v27 = ~v11;
    v75 = *(_DWORD *)(v10 + 84);
    v74 = *(_QWORD *)(v10 + 64);
    switch(*(_BYTE *)(v13 + v22))
    {
      case 0:
      case 1:
        v71 = v11 + 78;
        v28 = v16 + v13;
        goto LABEL_16;
      case 2:
        v71 = v11 + 78;
        v28 = v13 + v11 + 79;
LABEL_16:
        v29 = v28 & v27;
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v28 & v27, 1, v15))
          (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v29, v15);
        v17 = (v11 + 78) & ~v11;
        v30 = v74;
        v16 = v71;
        if (!v75)
          goto LABEL_19;
        goto LABEL_20;
      case 3:
LABEL_19:
        v30 = __n;
LABEL_20:
        v31 = ((v17 + v30 + 7) & 0xFFFFFFFFFFFFFFF8) + 10;
        if (v19 > v31)
          v31 = v19;
        if (v21 > v31)
          v31 = v21;
        switch(*(_BYTE *)(v14 + v31))
        {
          case 0:
            v33 = *(_QWORD *)v14;
            *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
            *(_QWORD *)v13 = v33;
            v34 = *(_OWORD *)(v14 + 16);
            v35 = *(_OWORD *)(v14 + 32);
            v36 = *(_OWORD *)(v14 + 48);
            *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
            *(_OWORD *)(v13 + 32) = v35;
            *(_OWORD *)(v13 + 48) = v36;
            *(_OWORD *)(v13 + 16) = v34;
            *(_BYTE *)(v13 + 73) = *(_BYTE *)(v14 + 73);
            LOWORD(v33) = *(_WORD *)(v14 + 74);
            *(_BYTE *)(v13 + 76) = *(_BYTE *)(v14 + 76);
            *(_WORD *)(v13 + 74) = v33;
            *(_BYTE *)(v13 + 77) = *(_BYTE *)(v14 + 77);
            v37 = (void *)((v16 + v13) & v27);
            v38 = (const void *)((v16 + v14) & v27);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v38, 1, v15))
            {
              v39 = __n;
              memcpy(v37, v38, __n);
              v24 = v75;
              v17 = (v11 + 78) & ~v11;
              v25 = v74;
              v26 = (v11 + 79) & ~v11;
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v37, v38, v15);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v37, 0, 1, v15);
              v24 = v75;
              v17 = (v11 + 78) & ~v11;
              v25 = v74;
              v26 = (v11 + 79) & ~v11;
              v39 = __n;
            }
            v56 = ((unint64_t)v37 + v39 + 7) & 0xFFFFFFFFFFFFFFF8;
            v57 = ((unint64_t)v38 + v39 + 7) & 0xFFFFFFFFFFFFFFF8;
            v58 = *(_QWORD *)v57;
            *(_BYTE *)(v56 + 8) = *(_BYTE *)(v57 + 8);
            *(_QWORD *)v56 = v58;
            *(_BYTE *)(v56 + 9) = *(_BYTE *)(v57 + 9);
            *(_BYTE *)(v13 + v22) = 0;
            goto LABEL_43;
          case 1:
            v40 = *(_QWORD *)v14;
            *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
            *(_QWORD *)v13 = v40;
            v41 = *(_OWORD *)(v14 + 16);
            v42 = *(_OWORD *)(v14 + 32);
            v43 = *(_OWORD *)(v14 + 48);
            *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
            *(_OWORD *)(v13 + 32) = v42;
            *(_OWORD *)(v13 + 48) = v43;
            *(_OWORD *)(v13 + 16) = v41;
            *(_BYTE *)(v13 + 73) = *(_BYTE *)(v14 + 73);
            LOWORD(v40) = *(_WORD *)(v14 + 74);
            *(_BYTE *)(v13 + 76) = *(_BYTE *)(v14 + 76);
            *(_WORD *)(v13 + 74) = v40;
            *(_BYTE *)(v13 + 77) = *(_BYTE *)(v14 + 77);
            v44 = (void *)((v16 + v13) & v27);
            v45 = (const void *)((v16 + v14) & v27);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v45, 1, v15))
            {
              v46 = __n;
              memcpy(v44, v45, __n);
              v24 = v75;
              v17 = (v11 + 78) & ~v11;
              v25 = v74;
              v26 = (v11 + 79) & ~v11;
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v44, v45, v15);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v44, 0, 1, v15);
              v24 = v75;
              v17 = (v11 + 78) & ~v11;
              v25 = v74;
              v26 = (v11 + 79) & ~v11;
              v46 = __n;
            }
            v59 = ((unint64_t)v44 + v46 + 7) & 0xFFFFFFFFFFFFFFF8;
            v60 = ((unint64_t)v45 + v46 + 7) & 0xFFFFFFFFFFFFFFF8;
            v61 = *(_QWORD *)v60;
            *(_BYTE *)(v59 + 8) = *(_BYTE *)(v60 + 8);
            *(_QWORD *)v59 = v61;
            *(_BYTE *)(v59 + 9) = *(_BYTE *)(v60 + 9);
            *(_BYTE *)(v13 + v22) = 1;
LABEL_43:
            a1 = v72;
            break;
          case 2:
            v47 = *(_QWORD *)v14;
            *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
            *(_QWORD *)v13 = v47;
            v48 = *(_OWORD *)(v14 + 16);
            v49 = *(_OWORD *)(v14 + 32);
            v50 = *(_OWORD *)(v14 + 48);
            *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
            *(_OWORD *)(v13 + 32) = v49;
            *(_OWORD *)(v13 + 48) = v50;
            *(_OWORD *)(v13 + 16) = v48;
            *(_BYTE *)(v13 + 73) = *(_BYTE *)(v14 + 73);
            *(_DWORD *)(v13 + 74) = *(_DWORD *)(v14 + 74);
            *(_BYTE *)(v13 + 78) = *(_BYTE *)(v14 + 78);
            v51 = (const void *)((v11 + 79 + v14) & v27);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v51, 1, v15))
            {
              v52 = __n;
              memcpy((void *)((v13 + v11 + 79) & v27), v51, __n);
              v26 = (v11 + 79) & ~v11;
            }
            else
            {
              (*(void (**)(uint64_t, const void *, uint64_t))(v10 + 32))((v13 + v11 + 79) & v27, v51, v15);
              (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))((v13 + v11 + 79) & v27, 0, 1, v15);
              v26 = (v11 + 79) & ~v11;
              v52 = __n;
            }
            v53 = (((v13 + v11 + 79) & v27) + v52 + 7) & 0xFFFFFFFFFFFFFFF8;
            v54 = ((unint64_t)v51 + v52 + 7) & 0xFFFFFFFFFFFFFFF8;
            v55 = *(_QWORD *)v54;
            *(_BYTE *)(v53 + 8) = *(_BYTE *)(v54 + 8);
            *(_QWORD *)v53 = v55;
            *(_BYTE *)(v53 + 9) = *(_BYTE *)(v54 + 9);
            *(_BYTE *)(v53 + 10) = *(_BYTE *)(v54 + 10);
            *(_BYTE *)(v13 + v22) = 2;
            a1 = v72;
            v24 = v75;
            v17 = (v11 + 78) & ~v11;
            v25 = v74;
            break;
          case 3:
            *(_WORD *)v13 = *(_WORD *)v14;
            *(_BYTE *)(v13 + v22) = 3;
            v26 = (v11 + 79) & ~v11;
            a1 = v72;
            v24 = v75;
            v25 = v74;
            break;
          default:
            if (v22 <= 3)
              v32 = v22;
            else
              v32 = 4;
            __asm { BR              X11 }
            return result;
        }
        return result;
      default:
        if (v22 <= 3)
          v23 = v22;
        else
          v23 = 4;
        __asm { BR              X11 }
        return result;
    }
  }
  if (v24)
    v62 = v25;
  else
    v62 = v25 + 1;
  v63 = v62 + 7;
  v64 = ((v63 + v17) & 0xFFFFFFFFFFFFFFF8) + 10;
  v65 = ((v63 + v26) & 0xFFFFFFFFFFFFFFF8) + 11;
  if (v65 <= v64)
    v65 = v64;
  v66 = v65 + 1;
  v67 = (_QWORD *)(((v13 | 7) + v66) & 0xFFFFFFFFFFFFFFF8);
  v68 = (_QWORD *)(((v14 | 7) + v66) & 0xFFFFFFFFFFFFFFF8);
  v69 = v68[1];
  *v67 = *v68;
  swift_unknownObjectRelease();
  v67[1] = v69;
  return a1;
}

uint64_t getEnumTagSinglePayload for IntegerParseStrategy(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v21;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = *(_QWORD *)(type metadata accessor for FloatingPointRoundingRule() - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_DWORD *)(v8 + 84);
  v11 = *(_QWORD *)(v8 + 64);
  if (v7 <= 0x7FFFFFFF)
    v12 = 0x7FFFFFFF;
  else
    v12 = v7;
  if (!v10)
    ++v11;
  v13 = v11 + 7;
  v14 = ((v13 + ((v9 + 78) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 10;
  if (((v13 + ((v9 + 79) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 11 > v14)
    v14 = ((v13 + ((v9 + 79) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 11;
  if (!a2)
    return 0;
  v15 = *(_QWORD *)(v6 + 64);
  v16 = v9 | 7;
  if (v12 < a2)
  {
    if (((((v14 + ((v15 + v16 + 1) & ~v16) + 8) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v17 = 2;
    else
      v17 = a2 - v12 + 1;
    if (v17 >= 0x10000)
      v18 = 4;
    else
      v18 = 2;
    if (v17 < 0x100)
      v18 = 1;
    if (v17 >= 2)
      v19 = v18;
    else
      v19 = 0;
    __asm { BR              X16 }
  }
  if (v7 >= 0x7FFFFFFF)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, v7, v5);
  v21 = *(_QWORD *)((((a1 + v15 + v16 + 1) & ~v16 | 7) + v14 + 1) & 0xFFFFFFFFFFFFF8);
  if (v21 >= 0xFFFFFFFF)
    LODWORD(v21) = -1;
  return (v21 + 1);
}

void storeEnumTagSinglePayload for IntegerParseStrategy(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(type metadata accessor for FloatingPointRoundingRule() - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v10 + 78) & ~v10;
  v12 = *(_QWORD *)(v9 + 64);
  if (v8 <= 0x7FFFFFFF)
    v13 = 0x7FFFFFFF;
  else
    v13 = v8;
  v14 = (v10 + 79) & ~v10;
  v15 = v10 | 7;
  if (!*(_DWORD *)(v9 + 84))
    ++v12;
  v16 = v12 + 7;
  v17 = ((v16 + v11) & 0xFFFFFFFFFFFFFFF8) + 10;
  v18 = ((v16 + v14) & 0xFFFFFFFFFFFFFFF8) + 11;
  if (v18 > v17)
    v17 = v18;
  if (v13 >= a3)
  {
    v21 = 0u;
    if (a2 <= v13)
      goto LABEL_21;
  }
  else
  {
    if ((((_DWORD)v17 + ((*(_DWORD *)(v7 + 64) + (_DWORD)v15 + 1) & ~(_DWORD)v15) + 8) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v19 = a3 - v13 + 1;
    else
      v19 = 2;
    if (v19 >= 0x10000)
      v20 = 4;
    else
      v20 = 2;
    if (v19 < 0x100)
      v20 = 1;
    if (v19 >= 2)
      v21 = v20;
    else
      v21 = 0;
    if (a2 <= v13)
LABEL_21:
      __asm { BR              X14 }
  }
  if ((((_DWORD)v17 + ((*(_DWORD *)(v7 + 64) + (_DWORD)v15 + 1) & ~(_DWORD)v15) + 8) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v22 = ~v13 + a2;
    bzero(a1, ((v17 + ((*(_QWORD *)(v7 + 64) + v15 + 1) & ~v15) + 8) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v22;
  }
  __asm { BR              X10 }
}

void sub_181D4EE64()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
  JUMPOUT(0x181D4EEFCLL);
}

void sub_181D4EE6C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x181D4EE74);
  JUMPOUT(0x181D4EEFCLL);
}

void sub_181D4EED4()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
  JUMPOUT(0x181D4EEFCLL);
}

void sub_181D4EEDC()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = v1;
  JUMPOUT(0x181D4EEFCLL);
}

uint64_t sub_181D4EEE4()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v1 + v5) = 0;
  if (!(_DWORD)v2)
    JUMPOUT(0x181D4EEFCLL);
  if (v4 < 0x7FFFFFFF)
  {
    if ((v2 & 0x80000000) == 0)
      JUMPOUT(0x181D4EEF8);
    JUMPOUT(0x181D4EEF0);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v1, v2, v4, v3);
}

uint64_t storeEnumTagSinglePayload for IntegerParseStrategy.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_181D4EF64 + 4 * byte_18215294C[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_181D4EF98 + 4 * byte_182152947[v4]))();
}

uint64_t sub_181D4EF98(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181D4EFA0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181D4EFA8);
  return result;
}

uint64_t sub_181D4EFB4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181D4EFBCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_181D4EFC0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181D4EFC8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void base witness table accessor for Equatable in IntegerParseStrategy<A>.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomDebugStringConvertible in IntegerParseStrategy<A>.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomStringConvertible in IntegerParseStrategy<A>.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void encodingFromDataForExtendedAttribute(_:)(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const __CFString *v38;
  CFStringEncoding v39;
  unint64_t v40;
  char v41;
  char v42;
  char v43;

  specialized Data.withContiguousStorageIfAvailable<A>(_:)(a1, a2);
  if (v7 == 1)
  {
    outlined copy of Data._Representation(a1, a2);
    specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
    v9 = (unsigned __int8 *)(v8 + 32);
    v10 = *(_QWORD *)(v8 + 16);
    v11 = static String._tryFromUTF8(_:)();
    if (v12)
    {
      v13 = v11;
      v14 = v12;
      swift_release();
      outlined consume of Data._Representation(a1, a2);
    }
    else
    {
      v13 = (uint64_t)specialized String.init<A, B>(_validating:as:)(v9, v10);
      v14 = v15;
      swift_release();
      outlined consume of Data._Representation(a1, a2);
      if (!v14)
        goto LABEL_18;
    }
  }
  else
  {
    v13 = v6;
    v14 = v7;
    if (!v7)
      goto LABEL_18;
  }
  specialized Collection<>.firstIndex(of:)(59, 0xE100000000000000, v13, v14);
  if ((v16 & 1) != 0)
    goto LABEL_14;
  v17 = String.index(after:)();
  v18 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000) == 0)
    v18 = v13 & 0xFFFFFFFFFFFFLL;
  if (v17 >> 14 >= 4 * v18)
  {
LABEL_14:
    v31 = String.subscript.getter();
    v33 = v32;
    v35 = v34;
    v37 = v36;
    swift_bridgeObjectRelease();
    if ((v31 ^ v33) >= 0x4000)
    {
      MEMORY[0x186DA4634](v31, v33, v35, v37);
      swift_bridgeObjectRelease();
      v38 = (const __CFString *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v39 = CFStringConvertIANACharSetNameToEncoding(v38);
      swift_unknownObjectRelease();
      if (v39 != -1)
      {
        v40 = CFStringConvertEncodingToNSStringEncoding(v39);
        v41 = 0;
LABEL_19:
        *(_QWORD *)a3 = v40;
        *(_BYTE *)(a3 + 8) = v41;
        return;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
LABEL_18:
    v40 = 0;
    v41 = 1;
    goto LABEL_19;
  }
  v19 = String.subscript.getter();
  v23 = v22;
  if (!((v19 ^ v20) >> 14))
  {
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  v24 = v19;
  v25 = v20;
  v26 = v21;
  v27 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SuSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Su_SsTG5SiTf1cn_n(v19, v20, v21, v22, 10);
  if ((v28 & 0x100) != 0)
  {
    v29 = specialized _parseInteger<A, B>(ascii:radix:)(v24, v25, v26, v23, 10);
    v43 = v42;
    swift_bridgeObjectRelease();
    if ((v43 & 1) != 0)
      goto LABEL_14;
  }
  else
  {
    v29 = v27;
    v30 = v28;
    swift_bridgeObjectRelease();
    if ((v30 & 1) != 0)
      goto LABEL_14;
  }
  if (!HIDWORD(v29))
  {
    if (CFStringIsEncodingAvailable(v29))
    {
      v40 = CFStringConvertEncodingToNSStringEncoding(v29);
      swift_bridgeObjectRelease();
      v41 = 0;
      goto LABEL_19;
    }
    goto LABEL_14;
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized UTF16EndianAdaptor.Iterator.next()()
{
  uint64_t v0;
  Swift::UInt8_optional v1;
  Swift::UInt8 value;
  int v3;
  int v4;
  Swift::UInt8_optional v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  BOOL v11;
  int v13;

  if ((*(_BYTE *)(v0 + 65) & 1) != 0)
  {
LABEL_2:
    v1 = Data.Iterator.next()();
    if ((*(_WORD *)&v1 & 0x100) != 0)
      goto LABEL_20;
    value = v1.value;
    LOWORD(v3) = Data.Iterator.next()();
    if ((v3 & 0x100) != 0)
      goto LABEL_20;
    goto LABEL_14;
  }
  v4 = 1;
  *(_BYTE *)(v0 + 65) = 1;
  v5 = Data.Iterator.next()();
  if ((*(_WORD *)&v5 & 0x100) != 0)
  {
    LOWORD(v8) = 0;
    return (unsigned __int16)v8 | (v4 << 16);
  }
  value = v5.value;
  v6 = v5.value;
  LOWORD(v3) = Data.Iterator.next()();
  if (v6 < 0xFE)
  {
    if ((v3 & 0x100) == 0)
      goto LABEL_14;
LABEL_20:
    LOWORD(v8) = 0;
    v4 = 1;
    return (unsigned __int16)v8 | (v4 << 16);
  }
  if ((v3 & 0x100) != 0)
    goto LABEL_20;
  if (v6 == 255 && v3 == 254)
  {
    v7 = *(unsigned __int8 *)(v0 + 64);
    if (v7 != 2)
    {
      v4 = 0;
      if ((v7 & 1) != 0)
        LOWORD(v8) = -2;
      else
        LOWORD(v8) = -257;
      return (unsigned __int16)v8 | (v4 << 16);
    }
    *(_BYTE *)(v0 + 64) = 0;
    goto LABEL_2;
  }
  if (v6 == 254 && v3 == 255)
  {
    v13 = *(unsigned __int8 *)(v0 + 64);
    if (v13 != 2)
    {
      v4 = 0;
      if ((v13 & 1) != 0)
        LOWORD(v8) = -257;
      else
        LOWORD(v8) = -2;
      return (unsigned __int16)v8 | (v4 << 16);
    }
    *(_BYTE *)(v0 + 64) = 1;
    goto LABEL_2;
  }
LABEL_14:
  v4 = 0;
  v9 = value | (v3 << 8);
  v10 = *(unsigned __int8 *)(v0 + 64);
  v11 = (v10 & 1) != 0 || v10 == 2;
  v8 = bswap32(v9) >> 16;
  if (!v11)
    LOWORD(v8) = v9;
  return (unsigned __int16)v8 | (v4 << 16);
}

{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  unint64_t v16;
  int v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  uint64_t result;
  int v22;
  int v23;

  if (*((_BYTE *)v0 + 17) == 1)
  {
    v1 = *v0;
    v2 = v0[1];
LABEL_3:
    v3 = *(_QWORD *)(v1 + 16);
    if (v2 == v3)
    {
LABEL_6:
      LOWORD(v6) = 0;
      v7 = 1;
      return (unsigned __int16)v6 | (v7 << 16);
    }
    if (v2 < v3)
    {
      v4 = v1 + 32;
      v5 = *(unsigned __int8 *)(v1 + 32 + v2);
      v0[1] = v2 + 1;
      if (v2 + 1 == v3)
        goto LABEL_6;
      if (v2 + 1 < v3)
      {
        v7 = 0;
        v15 = *(unsigned __int8 *)(v4 + v2 + 1);
        v0[1] = v2 + 2;
        v6 = v5 | (v15 << 8);
LABEL_22:
        v18 = *((unsigned __int8 *)v0 + 16);
        v19 = (v18 & 1) != 0 || v18 == 2;
        v20 = bswap32(v6) >> 16;
LABEL_26:
        if (v19)
          LOWORD(v6) = v20;
        return (unsigned __int16)v6 | (v7 << 16);
      }
      goto LABEL_46;
    }
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  v7 = 1;
  *((_BYTE *)v0 + 17) = 1;
  v1 = *v0;
  v8 = v0[1];
  v9 = *(_QWORD *)(*v0 + 16);
  if (v8 == v9)
  {
LABEL_8:
    LOWORD(v6) = 0;
    return (unsigned __int16)v6 | (v7 << 16);
  }
  if (v8 >= v9)
    goto LABEL_45;
  v10 = v1 + 32;
  v11 = *(unsigned __int8 *)(v1 + 32 + v8);
  v12 = v8 + 1;
  v0[1] = v8 + 1;
  if (v11 > 0xFD)
  {
    if (v12 != v9)
    {
      if (v12 >= v9)
      {
LABEL_47:
        __break(1u);
        goto LABEL_48;
      }
      v13 = *(unsigned __int8 *)(v10 + v12);
      v2 = v8 + 2;
      v0[1] = v2;
      if (v11 == 255 && v13 == 254)
      {
        v14 = *((unsigned __int8 *)v0 + 16);
        if (v14 != 2)
        {
          v7 = 0;
          if ((v14 & 1) != 0)
            LOWORD(v6) = -2;
          else
            LOWORD(v6) = -257;
          return (unsigned __int16)v6 | (v7 << 16);
        }
        *((_BYTE *)v0 + 16) = 0;
      }
      else
      {
        if (v11 != 254 || v13 != 255)
        {
          v7 = 0;
          v6 = v11 | (v13 << 8);
          v23 = *((unsigned __int8 *)v0 + 16);
          v19 = (v23 & 1) != 0 || v23 == 2;
          LOWORD(v20) = __rev16(v6);
          goto LABEL_26;
        }
        v22 = *((unsigned __int8 *)v0 + 16);
        if (v22 != 2)
        {
          v7 = 0;
          if ((v22 & 1) != 0)
            LOWORD(v6) = -257;
          else
            LOWORD(v6) = -2;
          return (unsigned __int16)v6 | (v7 << 16);
        }
        *((_BYTE *)v0 + 16) = 1;
      }
      goto LABEL_3;
    }
    goto LABEL_8;
  }
  if (v12 == v9)
    goto LABEL_8;
  if (v12 < v9)
  {
    v7 = 0;
    v16 = v8 + 2;
    v17 = *(unsigned __int8 *)(v10 + v12);
    v0[1] = v16;
    v6 = v11 | (v17 << 8);
    goto LABEL_22;
  }
LABEL_48:
  __break(1u);
  return result;
}

{
  unsigned __int8 **v0;
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  int v3;
  unsigned int v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  int v14;
  int v15;

  v1 = *v0;
  if ((*((_BYTE *)v0 + 17) & 1) != 0)
  {
    if (!v1)
    {
LABEL_24:
      v3 = 1;
      return (unsigned __int16)v1 | (v3 << 16);
    }
  }
  else
  {
    v3 = 1;
    *((_BYTE *)v0 + 17) = 1;
    if (!v1)
      return (unsigned __int16)v1 | (v3 << 16);
    v5 = v0[1];
    if (v1 == v5)
      goto LABEL_23;
    v6 = v1 + 1;
    *v0 = v1 + 1;
    v4 = *v1;
    if (v4 <= 0xFD)
    {
      if (v6 != v5)
      {
        v3 = 0;
        goto LABEL_16;
      }
      goto LABEL_23;
    }
    if (v6 == v5)
    {
LABEL_23:
      LOWORD(v1) = 0;
      goto LABEL_24;
    }
    v7 = v1 + 2;
    *v0 = v1 + 2;
    v8 = v1[1];
    if (v4 == 255 && v8 == 254)
    {
      v9 = *((unsigned __int8 *)v0 + 16);
      if (v9 != 2)
      {
        v3 = 0;
        if ((v9 & 1) != 0)
          LOWORD(v1) = -2;
        else
          LOWORD(v1) = -257;
        return (unsigned __int16)v1 | (v3 << 16);
      }
      *((_BYTE *)v0 + 16) = 0;
    }
    else
    {
      if (v4 != 254 || v8 != 255)
      {
        v3 = 0;
        LODWORD(v1) = v4 | (v8 << 8);
        v15 = *((unsigned __int8 *)v0 + 16);
        v11 = (v15 & 1) != 0 || v15 == 2;
        LOWORD(v12) = __rev16(v1);
        goto LABEL_20;
      }
      v14 = *((unsigned __int8 *)v0 + 16);
      if (v14 != 2)
      {
        v3 = 0;
        if ((v14 & 1) != 0)
          LOWORD(v1) = -257;
        else
          LOWORD(v1) = -2;
        return (unsigned __int16)v1 | (v3 << 16);
      }
      *((_BYTE *)v0 + 16) = 1;
    }
    v1 = v7;
  }
  v2 = v0[1];
  if (v1 == v2)
    goto LABEL_23;
  *v0 = v1 + 1;
  if (v1 + 1 == v2)
    goto LABEL_23;
  v3 = 0;
  v4 = *v1;
LABEL_16:
  *v0 = v1 + 2;
  LODWORD(v1) = v4 | (v1[1] << 8);
  v10 = *((unsigned __int8 *)v0 + 16);
  v11 = (v10 & 1) != 0 || v10 == 2;
  v12 = bswap32(v1) >> 16;
LABEL_20:
  if (v11)
    LOWORD(v1) = v12;
  return (unsigned __int16)v1 | (v3 << 16);
}

{
  unsigned __int8 **v0;
  unsigned __int8 *v1;
  unsigned int v2;
  int v3;
  int v4;
  unsigned __int8 *v5;
  int v6;
  unsigned int v7;
  int v8;
  BOOL v9;
  unsigned int v10;
  int v12;

  if ((*((_BYTE *)v0 + 17) & 1) != 0)
  {
LABEL_2:
    v1 = *v0;
    if (*v0 >= v0[1])
      goto LABEL_20;
    v2 = *v1;
    *v0 = v1 + 1;
    v3 = specialized BufferViewIterator.next()();
    if ((v3 & 0x100) != 0)
      goto LABEL_20;
    goto LABEL_14;
  }
  v4 = 1;
  *((_BYTE *)v0 + 17) = 1;
  v5 = *v0;
  if (*v0 >= v0[1])
  {
    LOWORD(v7) = 0;
    return (unsigned __int16)v7 | (v4 << 16);
  }
  v2 = *v5;
  *v0 = v5 + 1;
  v3 = specialized BufferViewIterator.next()();
  if (v2 <= 0xFD)
  {
    if ((v3 & 0x100) == 0)
      goto LABEL_14;
LABEL_20:
    LOWORD(v7) = 0;
    v4 = 1;
    return (unsigned __int16)v7 | (v4 << 16);
  }
  if ((v3 & 0x100) != 0)
    goto LABEL_20;
  if (v2 == 255 && v3 == 254)
  {
    v6 = *((unsigned __int8 *)v0 + 16);
    if (v6 != 2)
    {
      v4 = 0;
      if ((v6 & 1) != 0)
        LOWORD(v7) = -2;
      else
        LOWORD(v7) = -257;
      return (unsigned __int16)v7 | (v4 << 16);
    }
    *((_BYTE *)v0 + 16) = 0;
    goto LABEL_2;
  }
  if (v2 == 254 && v3 == 255)
  {
    v12 = *((unsigned __int8 *)v0 + 16);
    if (v12 != 2)
    {
      v4 = 0;
      if ((v12 & 1) != 0)
        LOWORD(v7) = -257;
      else
        LOWORD(v7) = -2;
      return (unsigned __int16)v7 | (v4 << 16);
    }
    *((_BYTE *)v0 + 16) = 1;
    goto LABEL_2;
  }
LABEL_14:
  v4 = 0;
  v7 = v2 | (v3 << 8);
  v8 = *((unsigned __int8 *)v0 + 16);
  v9 = (v8 & 1) != 0 || v8 == 2;
  v10 = bswap32(v7) >> 16;
  if (v9)
    LOWORD(v7) = v10;
  return (unsigned __int16)v7 | (v4 << 16);
}

unint64_t specialized UTF32EndianAdaptor.Iterator.next()()
{
  uint64_t v0;
  Swift::UInt8_optional v1;
  Swift::UInt8 value;
  unsigned __int8 v3;
  Swift::UInt8_optional v4;
  int v5;
  Swift::UInt8_optional v6;
  Swift::UInt8_optional v7;
  Swift::UInt8_optional v8;
  Swift::UInt8 v9;
  int v10;
  int v11;
  Swift::UInt8_optional v12;
  Swift::UInt8_optional v13;
  unsigned int v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  int v19;

  if ((*(_BYTE *)(v0 + 65) & 1) != 0)
  {
LABEL_2:
    v1 = Data.Iterator.next()();
    if ((*(_WORD *)&v1 & 0x100) != 0)
      goto LABEL_24;
    value = v1.value;
LABEL_15:
    v12 = Data.Iterator.next()();
    if ((*(_WORD *)&v12 & 0x100) == 0)
    {
      v7 = v12;
      v13 = Data.Iterator.next()();
      if ((*(_WORD *)&v13 & 0x100) == 0)
      {
        v9 = v13.value;
        LOWORD(v10) = Data.Iterator.next()();
        if ((v10 & 0x100) == 0)
          goto LABEL_18;
      }
    }
LABEL_24:
    v14 = 0;
    v3 = 1;
    return v14 | ((unint64_t)v3 << 32);
  }
  v3 = 1;
  *(_BYTE *)(v0 + 65) = 1;
  v4 = Data.Iterator.next()();
  if ((*(_WORD *)&v4 & 0x100) != 0)
  {
    v14 = 0;
    return v14 | ((unint64_t)v3 << 32);
  }
  value = v4.value;
  v5 = v4.value;
  if (v4.value != 255 && v4.value)
    goto LABEL_15;
  v6 = Data.Iterator.next()();
  if ((*(_WORD *)&v6 & 0x100) != 0)
    goto LABEL_24;
  v7 = v6;
  v8 = Data.Iterator.next()();
  if ((*(_WORD *)&v8 & 0x100) != 0)
    goto LABEL_24;
  v9 = v8.value;
  LOWORD(v10) = Data.Iterator.next()();
  if ((v10 & 0x100) != 0)
    goto LABEL_24;
  if (v5 == 255 && v7.value == 254 && !(v9 | v10))
  {
    v11 = *(unsigned __int8 *)(v0 + 64);
    if (v11 != 2)
    {
      v3 = 0;
      if ((v11 & 1) != 0)
        v14 = -131072;
      else
        v14 = 65279;
      return v14 | ((unint64_t)v3 << 32);
    }
    *(_BYTE *)(v0 + 64) = 0;
    goto LABEL_2;
  }
  if (!(v5 | v7.value) && v9 == 254 && v10 == 255)
  {
    v19 = *(unsigned __int8 *)(v0 + 64);
    if (v19 != 2)
    {
      v3 = 0;
      if ((v19 & 1) != 0)
        v14 = 65279;
      else
        v14 = -131072;
      return v14 | ((unint64_t)v3 << 32);
    }
    *(_BYTE *)(v0 + 64) = 1;
    goto LABEL_2;
  }
LABEL_18:
  v3 = 0;
  v14 = (unsigned __int16)(value | (unsigned __int16)(*(_WORD *)&v7 << 8)) | (v9 << 16) | (v10 << 24);
  v15 = *(unsigned __int8 *)(v0 + 64);
  v16 = (v15 & 1) != 0 || v15 == 2;
  v17 = bswap32(v14);
  if (v16)
    v14 = v17;
  return v14 | ((unint64_t)v3 << 32);
}

{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  unsigned __int8 v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unint64_t result;
  int v23;
  int v24;
  int v25;
  BOOL v26;
  unsigned int v27;

  if (*((_BYTE *)v0 + 17) == 1)
  {
    v1 = *v0;
    v2 = v0[1];
LABEL_3:
    v3 = *(_QWORD *)(v1 + 16);
    if (v2 == v3)
      goto LABEL_34;
    if (v2 < v3)
    {
      v4 = v1 + 32;
      v5 = *(unsigned __int8 *)(v1 + 32 + v2);
      v0[1] = v2 + 1;
      if (v2 + 1 == v3)
        goto LABEL_34;
      if (v2 + 1 < v3)
      {
        v6 = *(unsigned __int8 *)(v4 + v2 + 1);
        v0[1] = v2 + 2;
        if (v2 + 2 != v3)
        {
          if (v2 + 2 < v3)
          {
            v7 = *(unsigned __int8 *)(v4 + v2 + 2);
            v0[1] = v2 + 3;
            if (v2 + 3 != v3)
            {
              if (v2 + 3 < v3)
              {
                v8 = 0;
                v9 = *(unsigned __int8 *)(v4 + v2 + 3);
                v0[1] = v2 + 4;
                v10 = v5 | (v6 << 8) | (v7 << 16) | (v9 << 24);
LABEL_49:
                v25 = *((unsigned __int8 *)v0 + 16);
                v26 = (v25 & 1) != 0 || v25 == 2;
                v27 = bswap32(v10);
                if (v26)
                  v10 = v27;
                return v10 | ((unint64_t)v8 << 32);
              }
              goto LABEL_65;
            }
            goto LABEL_34;
          }
          goto LABEL_62;
        }
LABEL_34:
        v10 = 0;
        v8 = 1;
        return v10 | ((unint64_t)v8 << 32);
      }
      goto LABEL_60;
    }
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  v8 = 1;
  *((_BYTE *)v0 + 17) = 1;
  v1 = *v0;
  v11 = v0[1];
  v12 = *(_QWORD *)(*v0 + 16);
  if (v11 == v12)
  {
    v10 = 0;
    return v10 | ((unint64_t)v8 << 32);
  }
  if (v11 >= v12)
    goto LABEL_59;
  v13 = v1 + 32;
  v14 = *(unsigned __int8 *)(v1 + 32 + v11);
  v15 = v11 + 1;
  v0[1] = v11 + 1;
  if (!v14 || v14 == 255)
  {
    if (v15 == v12)
      goto LABEL_34;
    if (v15 >= v12)
    {
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
      goto LABEL_63;
    }
    v16 = *(unsigned __int8 *)(v13 + v15);
    v0[1] = v11 + 2;
    if (v11 + 2 == v12)
      goto LABEL_34;
    if (v11 + 2 >= v12)
    {
LABEL_63:
      __break(1u);
      goto LABEL_64;
    }
    v17 = *(unsigned __int8 *)(v13 + v11 + 2);
    v0[1] = v11 + 3;
    if (v11 + 3 == v12)
      goto LABEL_34;
    if (v11 + 3 >= v12)
    {
LABEL_66:
      __break(1u);
      goto LABEL_67;
    }
    v18 = *(unsigned __int8 *)(v13 + v11 + 3);
    v2 = v11 + 4;
    v0[1] = v2;
    if (v14 == 255 && v16 == 254 && !v17 && !v18)
    {
      v19 = *((unsigned __int8 *)v0 + 16);
      if (v19 != 2)
      {
        v8 = 0;
        if ((v19 & 1) != 0)
          v10 = -131072;
        else
          v10 = 65279;
        return v10 | ((unint64_t)v8 << 32);
      }
      *((_BYTE *)v0 + 16) = 0;
      goto LABEL_3;
    }
    if (!v14 && !v16 && v17 == 254 && v18 == 255)
    {
      v24 = *((unsigned __int8 *)v0 + 16);
      if (v24 != 2)
      {
        v8 = 0;
        if ((v24 & 1) != 0)
          v10 = 65279;
        else
          v10 = -131072;
        return v10 | ((unint64_t)v8 << 32);
      }
      *((_BYTE *)v0 + 16) = 1;
      goto LABEL_3;
    }
    v8 = 0;
    v23 = v14 | (v16 << 8) | (v17 << 16);
LABEL_48:
    v10 = v23 | (v18 << 24);
    goto LABEL_49;
  }
  if (v15 == v12)
    goto LABEL_34;
  if (v15 >= v12)
  {
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  v20 = *(unsigned __int8 *)(v13 + v15);
  v0[1] = v11 + 2;
  if (v11 + 2 == v12)
    goto LABEL_34;
  if (v11 + 2 >= v12)
  {
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  v21 = *(unsigned __int8 *)(v13 + v11 + 2);
  v0[1] = v11 + 3;
  if (v11 + 3 == v12)
    goto LABEL_34;
  if (v11 + 3 < v12)
  {
    v8 = 0;
    v18 = *(unsigned __int8 *)(v13 + v11 + 3);
    v0[1] = v11 + 4;
    v23 = v14 | (v20 << 8) | (v21 << 16);
    goto LABEL_48;
  }
LABEL_68:
  __break(1u);
  return result;
}

{
  unsigned __int8 **v0;
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  int v3;
  unsigned __int8 v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  int v18;

  v1 = *v0;
  if ((*((_BYTE *)v0 + 17) & 1) != 0)
  {
    if (!v1)
    {
LABEL_30:
      v4 = 1;
      return v1 | ((unint64_t)v4 << 32);
    }
LABEL_3:
    v2 = v0[1];
    if (v1 == v2)
      goto LABEL_29;
    *v0 = v1 + 1;
    if (v1 + 1 == v2)
      goto LABEL_29;
    v3 = *v1;
    goto LABEL_20;
  }
  v4 = 1;
  *((_BYTE *)v0 + 17) = 1;
  if (!v1)
    return v1 | ((unint64_t)v4 << 32);
  v2 = v0[1];
  if (v1 == v2)
    goto LABEL_29;
  v5 = v1 + 1;
  *v0 = v1 + 1;
  v3 = *v1;
  if (!*v1 || v3 == 255)
  {
    if (v5 == v2)
      goto LABEL_29;
    *v0 = v1 + 2;
    if (v1 + 2 == v2)
      goto LABEL_29;
    v6 = v1[1];
    *v0 = v1 + 3;
    if (v1 + 3 == v2)
      goto LABEL_29;
    v7 = v1[2];
    v8 = v1 + 4;
    *v0 = v1 + 4;
    v9 = v1[3];
    if (v3 != 255 || v6 != 254 || v7 || v9)
    {
      if (v3 || v6 || v7 != 254 || v9 != 255)
      {
        v4 = 0;
        v13 = v3 | (v6 << 8) | (v7 << 16);
        goto LABEL_23;
      }
      v18 = *((unsigned __int8 *)v0 + 16);
      if (v18 != 2)
      {
        v4 = 0;
        if ((v18 & 1) != 0)
          LODWORD(v1) = 65279;
        else
          LODWORD(v1) = -131072;
        return v1 | ((unint64_t)v4 << 32);
      }
      *((_BYTE *)v0 + 16) = 1;
    }
    else
    {
      v10 = *((unsigned __int8 *)v0 + 16);
      if (v10 != 2)
      {
        v4 = 0;
        if ((v10 & 1) != 0)
          LODWORD(v1) = -131072;
        else
          LODWORD(v1) = 65279;
        return v1 | ((unint64_t)v4 << 32);
      }
      *((_BYTE *)v0 + 16) = 0;
    }
    v1 = v8;
    goto LABEL_3;
  }
  if (v5 == v2)
  {
LABEL_29:
    LODWORD(v1) = 0;
    goto LABEL_30;
  }
LABEL_20:
  *v0 = v1 + 2;
  if (v1 + 2 == v2)
    goto LABEL_29;
  v11 = v1[1];
  *v0 = v1 + 3;
  if (v1 + 3 == v2)
    goto LABEL_29;
  v4 = 0;
  v12 = v1[2];
  *v0 = v1 + 4;
  v13 = v3 | (v11 << 8) | (v12 << 16);
  v9 = v1[3];
LABEL_23:
  LODWORD(v1) = v13 | (v9 << 24);
  v14 = *((unsigned __int8 *)v0 + 16);
  v15 = (v14 & 1) != 0 || v14 == 2;
  v16 = bswap32(v1);
  if (v15)
    LODWORD(v1) = v16;
  return v1 | ((unint64_t)v4 << 32);
}

{
  unsigned __int8 **v0;
  unsigned __int8 *v1;
  int v2;
  __int16 v3;
  unsigned __int8 v4;
  __int16 v5;
  unsigned __int8 v6;
  int v7;
  unsigned __int8 v8;
  unsigned int v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  __int16 v13;
  __int16 v14;
  __int16 v15;
  unsigned __int8 v16;
  int v17;
  int v18;
  __int16 v19;
  __int16 v20;
  int v22;
  int v23;
  BOOL v24;
  unsigned int v25;

  if ((*((_BYTE *)v0 + 17) & 1) != 0)
    goto LABEL_2;
  v8 = 1;
  *((_BYTE *)v0 + 17) = 1;
  v10 = *v0;
  if (*v0 >= v0[1])
  {
    v9 = 0;
    return v9 | ((unint64_t)v8 << 32);
  }
  v12 = *v10;
  v11 = v12;
  *v0 = v10 + 1;
  if (v12 && v11 != 255)
  {
    v19 = specialized BufferViewIterator.next()();
    if ((v19 & 0x100) != 0)
      goto LABEL_22;
    v14 = v19;
    v20 = specialized BufferViewIterator.next()();
    if ((v20 & 0x100) != 0)
      goto LABEL_22;
    v16 = v20;
    v17 = specialized BufferViewIterator.next()();
    if ((v17 & 0x100) != 0)
      goto LABEL_22;
    goto LABEL_29;
  }
  v13 = specialized BufferViewIterator.next()();
  if ((v13 & 0x100) != 0)
    goto LABEL_22;
  v14 = v13;
  v15 = specialized BufferViewIterator.next()();
  if ((v15 & 0x100) != 0)
    goto LABEL_22;
  v16 = v15;
  v17 = specialized BufferViewIterator.next()();
  if ((v17 & 0x100) != 0)
    goto LABEL_22;
  if (v11 == 255 && v14 == 254 && !(v16 | v17))
  {
    v18 = *((unsigned __int8 *)v0 + 16);
    if (v18 != 2)
    {
      v8 = 0;
      if ((v18 & 1) != 0)
        v9 = -131072;
      else
        v9 = 65279;
      return v9 | ((unint64_t)v8 << 32);
    }
    *((_BYTE *)v0 + 16) = 0;
    goto LABEL_2;
  }
  if (v11 | v14 || v16 != 254 || v17 != 255)
  {
LABEL_29:
    v8 = 0;
    v9 = (unsigned __int16)(v11 | (v14 << 8)) | (v16 << 16) | (v17 << 24);
    goto LABEL_30;
  }
  v22 = *((unsigned __int8 *)v0 + 16);
  if (v22 != 2)
  {
    v8 = 0;
    if ((v22 & 1) != 0)
      v9 = 65279;
    else
      v9 = -131072;
    return v9 | ((unint64_t)v8 << 32);
  }
  *((_BYTE *)v0 + 16) = 1;
LABEL_2:
  v1 = *v0;
  if (*v0 >= v0[1]
    || (v2 = *v1, *v0 = v1 + 1, v3 = specialized BufferViewIterator.next()(), (v3 & 0x100) != 0)
    || (v4 = v3, v5 = specialized BufferViewIterator.next()(), (v5 & 0x100) != 0)
    || (v6 = v5, v7 = specialized BufferViewIterator.next()(), (v7 & 0x100) != 0))
  {
LABEL_22:
    v9 = 0;
    v8 = 1;
    return v9 | ((unint64_t)v8 << 32);
  }
  v8 = 0;
  v9 = v2 & 0xFF0000FF | (unsigned __int16)(v4 << 8) | (v6 << 16) | (v7 << 24);
LABEL_30:
  v23 = *((unsigned __int8 *)v0 + 16);
  v24 = (v23 & 1) != 0 || v23 == 2;
  v25 = bswap32(v9);
  if (v24)
    v9 = v25;
  return v9 | ((unint64_t)v8 << 32);
}

uint64_t specialized String.init<A>(bytes:encoding:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;

  if (a3 > 2415919359)
  {
    if (a3 > 2550137087)
    {
      if (a3 != 2550137088 && a3 != 2617245952)
        goto LABEL_28;
      goto LABEL_24;
    }
    if (a3 != 2415919360 && a3 != 2483028224)
      goto LABEL_28;
LABEL_21:
    specialized Data.withContiguousStorageIfAvailable<A>(_:)(a1, a2);
    if (v20 < 2)
    {
      outlined copy of Data._Representation(a1, a2);
      specialized String.init<A, B>(_validating:as:)(a1, a2);
      if (!v22)
        return 0;
      return v21;
    }
    return v19;
  }
  if (a3 > 9)
  {
    if (a3 != 10)
    {
      if (a3 != 2348810496)
      {
LABEL_28:
        specialized Data.withContiguousStorageIfAvailable<A>(_:)(a1, a2);
        v13 = v26;
        if (!v26)
          return v13;
        if (v26 != 1)
          return v25;
        outlined copy of Data._Representation(a1, a2);
        specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
        v28 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithBytes_length_encoding_, v27 + 32, *(_QWORD *)(v27 + 16), a3);
        if (v28)
        {
          v29 = v28;
          v13 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
          swift_release();

          goto LABEL_32;
        }
        swift_release();
        outlined consume of Data._Representation(a1, a2);
        return 0;
      }
LABEL_24:
      specialized Data.withContiguousStorageIfAvailable<A>(_:)(a1, a2);
      if (v23 < 2)
      {
        outlined copy of Data._Representation(a1, a2);
        specialized String.init<A, B>(_validating:as:)(a1, a2);
        if (!v24)
          return 0;
        return v21;
      }
      return v19;
    }
    goto LABEL_21;
  }
  if (a3 != 1)
  {
    if (a3 == 4)
    {
      specialized Data.withContiguousStorageIfAvailable<A>(_:)(a1, a2);
      if (v7 == 1)
      {
        outlined copy of Data._Representation(a1, a2);
        specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
        v9 = (unsigned __int8 *)(v8 + 32);
        v10 = *(_QWORD *)(v8 + 16);
        v11 = static String._tryFromUTF8(_:)();
        if (v12)
        {
          v13 = v11;
          swift_release();
LABEL_32:
          outlined consume of Data._Representation(a1, a2);
          return v13;
        }
        v13 = (uint64_t)specialized String.init<A, B>(_validating:as:)(v9, v10);
        v35 = v34;
        swift_release();
        outlined consume of Data._Representation(a1, a2);
        if (v35)
          return v13;
      }
      else
      {
        v13 = v6;
        if (v7)
          return v13;
      }
      return 0;
    }
    goto LABEL_28;
  }
  specialized Data.withContiguousStorageIfAvailable<A>(_:)(a1, a2);
  if (v15 != 1)
  {
    v13 = v14;
    if (v15)
      return v13;
    goto LABEL_36;
  }
  outlined copy of Data._Representation(a1, a2);
  specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  v13 = specialized String.init<A, B>(_validating:as:)((char *)(v16 + 32), *(_QWORD *)(v16 + 16));
  v18 = v17;
  swift_release();
  outlined consume of Data._Representation(a1, a2);
  if (!v18)
  {
LABEL_36:
    if (one-time initialization token for compatibility1 != -1)
      swift_once();
    if ((static String.compatibility1 & 1) != 0)
    {
      outlined copy of Data._Representation(a1, a2);
      specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
      v31 = v30;
      outlined consume of Data._Representation(a1, a2);
      v32 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithBytes_length_encoding_, v31 + 32, *(_QWORD *)(v31 + 16), 1);
      if (v32)
      {
        v33 = v32;
        v13 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
        swift_release();

        return v13;
      }
      swift_release();
    }
    return 0;
  }
  return v13;
}

id specialized String.init<A>(bytes:encoding:)(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v16;
  void *v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  __int128 v22;

  if (a2 > 2415919359)
  {
    if (a2 > 2550137087)
    {
      if (a2 == 2550137088)
      {
        v9 = 1;
      }
      else
      {
        if (a2 != 2617245952)
          goto LABEL_30;
        v9 = 0;
      }
      goto LABEL_25;
    }
    if (a2 == 2415919360)
    {
      v9 = 1;
    }
    else
    {
      if (a2 != 2483028224)
        goto LABEL_30;
      v9 = 0;
    }
LABEL_21:
    closure #2 in String.init<A>(bytes:encoding:)(a1 + 32, *(_QWORD *)(a1 + 16), v9, (void (*)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in closure #2 in String.init<A>(bytes:encoding:), &v22);
    if (*((_QWORD *)&v22 + 1) < 2uLL)
    {
      v12 = swift_bridgeObjectRetain();
      v7 = specialized String.init<A, B>(_validating:as:)(v12, v9);
      if (v13)
        return (id)v7;
      return 0;
    }
    return (id)v22;
  }
  if (a2 > 9)
  {
    v9 = 2;
    if (a2 != 10)
    {
      if (a2 != 2348810496)
        goto LABEL_30;
LABEL_25:
      closure #2 in String.init<A>(bytes:encoding:)(a1 + 32, *(_QWORD *)(a1 + 16), v9, (void (*)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in closure #3 in String.init<A>(bytes:encoding:), &v22);
      if (*((_QWORD *)&v22 + 1) < 2uLL)
      {
        swift_bridgeObjectRetain();
        v7 = specialized String.init<A, B>(_validating:as:)();
        if (v14)
          return (id)v7;
        return 0;
      }
      return (id)v22;
    }
    goto LABEL_21;
  }
  if (a2 == 1)
  {
    v5 = specialized String.init<A, B>(_validating:as:)((char *)(a1 + 32), *(_QWORD *)(a1 + 16));
    if (v10)
      return (id)v5;
    if (one-time initialization token for compatibility1 != -1)
      swift_once();
    if ((static String.compatibility1 & 1) != 0)
    {
      v18 = *(_QWORD *)(a1 + 16);
      v19 = objc_allocWithZone((Class)NSString);
      swift_bridgeObjectRetain();
      v20 = objc_msgSend(v19, sel_initWithBytes_length_encoding_, a1 + 32, v18, 1);
      if (v20)
      {
        v21 = v20;
        v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
        swift_bridgeObjectRelease();

        return v11;
      }
      swift_bridgeObjectRelease();
    }
    return 0;
  }
  if (a2 != 4)
  {
LABEL_30:
    v16 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithBytes_length_encoding_, a1 + 32, *(_QWORD *)(a1 + 16), a2);
    if (v16)
    {
      v17 = v16;
      v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);

      return v11;
    }
    return 0;
  }
  v3 = (unsigned __int8 *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = static String._tryFromUTF8(_:)();
  if (!v6)
  {
    v7 = (unint64_t)specialized String.init<A, B>(_validating:as:)(v3, v4);
    if (!v8)
      return 0;
    return (id)v7;
  }
  return (id)v5;
}

id specialized String.init<A>(bytes:encoding:)(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  id v17;
  void *v18;
  __int128 v20;

  if (a3 > 2415919359)
  {
    if (a3 > 2550137087)
    {
      if (a3 == 2550137088)
      {
        v9 = 1;
      }
      else
      {
        if (a3 != 2617245952)
          goto LABEL_29;
        v9 = 0;
      }
LABEL_25:
      closure #2 in String.init<A>(bytes:encoding:)((uint64_t)a1, a2, v9, (void (*)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in closure #3 in String.init<A>(bytes:encoding:), &v20);
      if (*((_QWORD *)&v20 + 1))
        return (id)v20;
      v7 = specialized String.init<A, B>(_validating:as:)();
      if (v13)
        return (id)v7;
      return 0;
    }
    if (a3 == 2415919360)
    {
      v9 = 1;
    }
    else
    {
      if (a3 != 2483028224)
        goto LABEL_29;
      v9 = 0;
    }
LABEL_21:
    closure #2 in String.init<A>(bytes:encoding:)((uint64_t)a1, a2, v9, (void (*)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in closure #2 in String.init<A>(bytes:encoding:), &v20);
    if (*((_QWORD *)&v20 + 1))
      return (id)v20;
    v7 = specialized String.init<A, B>(_validating:as:)((uint64_t)a1, a2, v9);
    if (v12)
      return (id)v7;
    return 0;
  }
  if (a3 > 9)
  {
    v9 = 2;
    if (a3 != 10)
    {
      if (a3 != 2348810496)
        goto LABEL_29;
      goto LABEL_25;
    }
    goto LABEL_21;
  }
  if (a3 == 1)
  {
    v5 = specialized String.init<A, B>(_validating:as:)(a1, a2);
    if (v10)
      return (id)v5;
    if (one-time initialization token for compatibility1 != -1)
      swift_once();
    if ((static String.compatibility1 & 1) != 0)
    {
      v16 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
      v17 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithBytes_length_encoding_, v16 + 32, *(_QWORD *)(v16 + 16), 1);
      if (v17)
      {
        v18 = v17;
        v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
        swift_release();

        return v11;
      }
      swift_release();
    }
    return 0;
  }
  if (a3 != 4)
  {
LABEL_29:
    v14 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithBytes_length_encoding_, a1, a2, a3);
    if (v14)
    {
      v15 = v14;
      v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);

      return v11;
    }
    return 0;
  }
  v5 = static String._tryFromUTF8(_:)();
  if (!v6)
  {
    v7 = (unint64_t)specialized String.init<A, B>(_validating:as:)((unsigned __int8 *)a1, a2);
    if (!v8)
      return 0;
    return (id)v7;
  }
  return (id)v5;
}

{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v15;
  void *v16;
  _BYTE *v17;
  id v18;
  void *v19;
  __int128 v20;

  if (a3 > 2415919359)
  {
    if (a3 > 2550137087)
    {
      if (a3 == 2550137088)
      {
        v9 = 1;
      }
      else
      {
        if (a3 != 2617245952)
          goto LABEL_30;
        v9 = 0;
      }
      goto LABEL_25;
    }
    if (a3 == 2415919360)
    {
      v9 = 1;
    }
    else
    {
      if (a3 != 2483028224)
        goto LABEL_30;
      v9 = 0;
    }
LABEL_21:
    closure #2 in String.init<A>(bytes:encoding:)((uint64_t)a1, a2, v9, (void (*)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in closure #2 in String.init<A>(bytes:encoding:), &v20);
    if (*((_QWORD *)&v20 + 1) < 2uLL)
    {
      v7 = specialized String.init<A, B>(_validating:as:)((uint64_t)a1, a2, v9);
      if (v12)
        return (id)v7;
      return 0;
    }
    return (id)v20;
  }
  if (a3 > 9)
  {
    v9 = 2;
    if (a3 != 10)
    {
      if (a3 != 2348810496)
        goto LABEL_30;
LABEL_25:
      closure #2 in String.init<A>(bytes:encoding:)((uint64_t)a1, a2, v9, (void (*)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in closure #3 in String.init<A>(bytes:encoding:), &v20);
      if (*((_QWORD *)&v20 + 1) < 2uLL)
      {
        v7 = specialized String.init<A, B>(_validating:as:)();
        if (v13)
          return (id)v7;
        return 0;
      }
      return (id)v20;
    }
    goto LABEL_21;
  }
  if (a3 == 1)
  {
    v5 = specialized String.init<A, B>(_validating:as:)(a1, a2);
    if (v10)
      return (id)v5;
    if (one-time initialization token for compatibility1 != -1)
      swift_once();
    if ((static String.compatibility1 & 1) != 0)
    {
      v17 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
      v18 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithBytes_length_encoding_, v17 + 32, *((_QWORD *)v17 + 2), 1);
      if (v18)
      {
        v19 = v18;
        v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
        swift_release();

        return v11;
      }
      swift_release();
    }
    return 0;
  }
  if (a3 != 4)
  {
LABEL_30:
    v15 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithBytes_length_encoding_, a1, a2, a3);
    if (v15)
    {
      v16 = v15;
      v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);

      return v11;
    }
    return 0;
  }
  v5 = static String._tryFromUTF8(_:)();
  if (!v6)
  {
    v7 = (unint64_t)specialized String.init<A, B>(_validating:as:)((unsigned __int8 *)a1, a2);
    if (!v8)
      return 0;
    return (id)v7;
  }
  return (id)v5;
}

void specialized String.init<A, B>(_validating:as:)(uint64_t a1, uint64_t a2)
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0, MEMORY[0x1E0DEE9D8]);
  __asm { BR              X10 }
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0, MEMORY[0x1E0DEE9D8]);
  __asm { BR              X10 }
}

uint64_t sub_181D50D18()
{
  unint64_t v0;
  char v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned __int8 v7;
  Swift::UInt8_optional v8;
  Swift::UInt8 value;
  int v10;
  Swift::UInt8_optional v11;
  unsigned int v12;
  char v13;
  unsigned int v14;
  BOOL v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  BOOL v19;
  char v20;
  char v21;
  void (*v22)(uint64_t *, _QWORD);
  int v23;
  unint64_t v24;
  unsigned int i;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unsigned int v44;
  unsigned __int8 v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  char v50;

  outlined copy of Data._Representation(v2, v0);
  outlined copy of Data._Representation(v2, v0);
  outlined copy of Data._Representation(v2, v0);
  Data.Iterator.init(_:at:)(v2, v0);
  outlined consume of Data._Representation(v2, v0);
  v42 = v2;
  v43 = v0;
  outlined consume of Data._Representation(v2, v0);
  v49 = v1;
  v50 = 0;
  v44 = 0;
  v45 = 0;
  v40 = v48;
  v41 = v47;
  outlined copy of Data._Representation(v47, v48);
  v4 = 1;
LABEL_2:
  v5 = specialized UTF16EndianAdaptor.Iterator.next()();
  if ((v5 & 0x10000) != 0)
  {
LABEL_73:
    outlined consume of Data._Representation(v47, v48);
    outlined consume of Data._Representation(v41, v40);
    swift_bridgeObjectRetain();
    v36 = static String._tryFromUTF8(_:)();
    v38 = v37;
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v42, v43);
    swift_bridgeObjectRelease();
    if (v38)
      return v36;
    else
      return 0;
  }
  LOWORD(v6) = v5;
  if ((v5 & 0xF800) == 0xD800)
  {
    v6 = (unsigned __int16)v5 | (HIWORD(v44) << 16);
    v7 = 16;
    goto LABEL_5;
  }
  while (1)
  {
    v6 = (unsigned __int16)v6;
    v21 = 1;
LABEL_48:
    if ((unsigned __int16)v6 >= 0x80u)
    {
      v29 = (v6 & 0x3F) << 8;
      if ((unsigned __int16)v6 >= 0x800u)
      {
        if ((v6 & 0xF800) == 0xD800)
        {
          if ((v21 & 1) != 0)
          {
            v32 = (v6 & 0x3F) << 8;
            v33 = (v32 | ((unsigned __int16)v6 >> 6)) + 33217;
            v34 = (((unsigned __int16)v6 >> 12) | ((v32 | ((unsigned __int16)v6 >> 6) & 0x3F) << 8)) + 8487393;
            if ((unsigned __int16)v6 >= 0x800u)
              v33 = v34;
            if ((unsigned __int16)v6 <= 0x7Fu)
              v23 = (unsigned __int16)v6 + 1;
            else
              v23 = v33;
            goto LABEL_50;
          }
          v35 = ((v6 & 0x3FF) << 10) | HIWORD(v6) & 0x3FF;
          v30 = ((v35 + 0x10000) >> 4) & 0x3F00 | ((v35 + 0x10000) >> 18) | (((v35 >> 6) & 0x3F | (((v35 + 0x10000) & 0x3F) << 8)) << 16);
          v31 = -2122219023;
        }
        else
        {
          v30 = ((v29 | ((unsigned __int16)v6 >> 6) & 0x3F) << 8) | ((unsigned __int16)v6 >> 12);
          v31 = 8487393;
        }
      }
      else
      {
        v30 = v29 | ((unsigned __int16)v6 >> 6);
        v31 = 33217;
      }
      v23 = v30 + v31;
      goto LABEL_50;
    }
    v23 = (v6 + 1);
    if ((_BYTE)v6 == 0xFF)
    {
LABEL_58:
      v28 = v4;
      goto LABEL_59;
    }
LABEL_50:
    v24 = *((_QWORD *)v3 + 2);
    for (i = v23; ; i >>= 8)
    {
      while (1)
      {
        v26 = *((_QWORD *)v3 + 3);
        if (v24 >= v26 >> 1)
          v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v26 > 1), v24 + 1, 1, v3);
        *((_QWORD *)v3 + 2) = v24 + 1;
        v3[v24 + 32] = i - 1;
        if ((v4 & ((char)(i - 1) < 0)) == 1)
          break;
        ++v24;
        v27 = i >= 0x100;
        i >>= 8;
        if (!v27)
          goto LABEL_58;
      }
      v28 = 0;
      v4 = 0;
      ++v24;
      if (i < 0x100)
        break;
    }
LABEL_59:
    v7 = v45;
    v4 = v28;
    if (!v45)
      goto LABEL_2;
    v6 = v44;
    if ((v44 & 0xF800) == 0xD800)
      break;
    lazy protocol witness table accessor for type Unicode.UTF16.ForwardParser and conformance Unicode.UTF16.ForwardParser();
    v22 = (void (*)(uint64_t *, _QWORD))Locale.Language.components.modify();
    specialized RangeReplaceableCollection.remove(at:)(0);
    v22(&v46, 0);
  }
LABEL_5:
  while ((v50 & 1) == 0)
  {
    v50 = 1;
    v11 = Data.Iterator.next()();
    if ((*(_WORD *)&v11 & 0x100) != 0)
      goto LABEL_35;
    value = v11.value;
    v12 = v11.value;
    LOWORD(v10) = Data.Iterator.next()();
    if (v12 < 0xFE)
    {
      if ((v10 & 0x100) != 0)
        goto LABEL_35;
LABEL_17:
      v14 = value | (v10 << 8);
      v15 = (v49 & 1) != 0 || v49 == 2;
      v16 = bswap32(v14) >> 16;
      if (!v15)
        LOWORD(v16) = v14;
      goto LABEL_22;
    }
    if ((v10 & 0x100) != 0)
      goto LABEL_35;
    if (v12 == 255 && v10 == 254)
    {
      if (v49 == 2)
      {
        v13 = 0;
LABEL_28:
        v49 = v13;
        break;
      }
      if ((v49 & 1) != 0)
        LOWORD(v16) = -2;
      else
        LOWORD(v16) = -257;
    }
    else
    {
      if (v12 != 254 || v10 != 255)
        goto LABEL_17;
      if (v49 == 2)
      {
        v13 = 1;
        goto LABEL_28;
      }
      if ((v49 & 1) != 0)
        LOWORD(v16) = -257;
      else
        LOWORD(v16) = -2;
    }
LABEL_22:
    v6 = ((-65535 << v7) - 1) & v6 | ((unsigned __int16)v16 << v7);
    v7 += 16;
    if (v7 >= 0x20u)
      goto LABEL_36;
  }
  v8 = Data.Iterator.next()();
  if ((*(_WORD *)&v8 & 0x100) == 0)
  {
    value = v8.value;
    LOWORD(v10) = Data.Iterator.next()();
    if ((v10 & 0x100) == 0)
      goto LABEL_17;
  }
LABEL_35:
  if (!v7)
    goto LABEL_73;
LABEL_36:
  v17 = v6 & 0xFC00FC00;
  if ((v6 & 0xFC00FC00) == 0xDC00D800)
    v18 = 32;
  else
    v18 = 16;
  v45 = v7 - v18;
  v19 = v17 == -603924480;
  if (v17 == -603924480)
    v20 = 32;
  else
    v20 = 16;
  v44 = (unint64_t)v6 >> v20;
  if (v19)
  {
    v21 = 0;
    goto LABEL_48;
  }
  outlined consume of Data._Representation(v47, v48);
  outlined consume of Data._Representation(v41, v40);
  outlined consume of Data._Representation(v42, v43);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized String.init<A, B>(_validating:as:)(uint64_t a1, char a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  char v14;
  BOOL v15;
  char v16;
  char v17;
  void (*v18)(_BYTE *, _QWORD);
  int v19;
  unint64_t v20;
  unsigned int i;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v36[32];
  unsigned int v37;
  unsigned __int8 v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;

  v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0, MEMORY[0x1E0DEE9D8]);
  v39 = a1;
  v40 = 0;
  v41 = a2;
  v42 = 0;
  v37 = 0;
  v38 = 0;
  swift_bridgeObjectRetain_n();
  v5 = 1;
LABEL_2:
  v6 = specialized UTF16EndianAdaptor.Iterator.next()();
  if ((v6 & 0x10000) != 0)
    goto LABEL_50;
  LOWORD(v7) = v6;
  if ((v6 & 0xF800) != 0xD800)
  {
    while (1)
    {
      v7 = (unsigned __int16)v7;
      v17 = 1;
LABEL_25:
      if ((unsigned __int16)v7 >= 0x80u)
      {
        v25 = (v7 & 0x3F) << 8;
        if ((unsigned __int16)v7 < 0x800u)
        {
          v26 = v25 | ((unsigned __int16)v7 >> 6);
          v27 = 33217;
LABEL_40:
          v19 = v26 + v27;
          goto LABEL_27;
        }
        if ((v7 & 0xF800) != 0xD800)
        {
          v26 = ((v25 | ((unsigned __int16)v7 >> 6) & 0x3F) << 8) | ((unsigned __int16)v7 >> 12);
          v27 = 8487393;
          goto LABEL_40;
        }
        if ((v17 & 1) == 0)
        {
          v31 = ((v7 & 0x3FF) << 10) | HIWORD(v7) & 0x3FF;
          v26 = ((v31 + 0x10000) >> 4) & 0x3F00 | ((v31 + 0x10000) >> 18) | (((v31 >> 6) & 0x3F | (((v31 + 0x10000) & 0x3F) << 8)) << 16);
          v27 = -2122219023;
          goto LABEL_40;
        }
        v28 = (v7 & 0x3F) << 8;
        v29 = (v28 | ((unsigned __int16)v7 >> 6)) + 33217;
        v30 = (((unsigned __int16)v7 >> 12) | ((v28 | ((unsigned __int16)v7 >> 6) & 0x3F) << 8)) + 8487393;
        if ((unsigned __int16)v7 >= 0x800u)
          v29 = v30;
        if ((unsigned __int16)v7 <= 0x7Fu)
          v19 = (unsigned __int16)v7 + 1;
        else
          v19 = v29;
      }
      else
      {
        v19 = (v7 + 1);
        if ((_BYTE)v7 == 0xFF)
        {
LABEL_35:
          v24 = v5;
          goto LABEL_36;
        }
      }
LABEL_27:
      v20 = *((_QWORD *)v4 + 2);
      for (i = v19; ; i >>= 8)
      {
        while (1)
        {
          v22 = *((_QWORD *)v4 + 3);
          if (v20 >= v22 >> 1)
            v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v22 > 1), v20 + 1, 1, v4);
          *((_QWORD *)v4 + 2) = v20 + 1;
          v4[v20 + 32] = i - 1;
          if ((v5 & ((char)(i - 1) < 0)) == 1)
            break;
          ++v20;
          v23 = i >= 0x100;
          i >>= 8;
          if (!v23)
            goto LABEL_35;
        }
        v24 = 0;
        v5 = 0;
        ++v20;
        if (i < 0x100)
          break;
      }
LABEL_36:
      v8 = v38;
      v5 = v24;
      if (!v38)
        goto LABEL_2;
      v7 = v37;
      if ((v37 & 0xF800) == 0xD800)
        goto LABEL_5;
      lazy protocol witness table accessor for type Unicode.UTF16.ForwardParser and conformance Unicode.UTF16.ForwardParser();
      v18 = (void (*)(_BYTE *, _QWORD))Locale.Language.components.modify();
      specialized RangeReplaceableCollection.remove(at:)(0);
      v18(v36, 0);
    }
  }
  v7 = (unsigned __int16)v6 | (HIWORD(v37) << 16);
  v8 = 16;
LABEL_5:
  v9 = specialized UTF16EndianAdaptor.Iterator.next()();
  if ((v9 & 0x10000) != 0)
  {
    v10 = v8;
    goto LABEL_12;
  }
  v7 = ((-65535 << v8) - 1) & v7 | ((unsigned __int16)v9 << v8);
  v10 = v8 + 16;
  if ((v8 + 16) > 0x1Fu)
    goto LABEL_13;
  v11 = specialized UTF16EndianAdaptor.Iterator.next()();
  if ((v11 & 0x10000) != 0)
  {
LABEL_12:
    if (v10)
      goto LABEL_13;
LABEL_50:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v32 = static String._tryFromUTF8(_:)();
    v34 = v33;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    if (v34)
      return v32;
    else
      return 0;
  }
  v7 = ((-65535 << v10) - 1) & v7 | ((unsigned __int16)v11 << v10);
  v10 = v8 + 32;
  if (v8 >= 0xE0u)
  {
    v12 = specialized UTF16EndianAdaptor.Iterator.next()();
    if ((v12 & 0x10000) == 0)
    {
      v7 = ((-65535 << v8) - 1) & v7 | ((unsigned __int16)v12 << v8);
      v10 = v8 + 48;
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_13:
  v13 = v7 & 0xFC00FC00;
  if ((v7 & 0xFC00FC00) == 0xDC00D800)
    v14 = 32;
  else
    v14 = 16;
  v38 = v10 - v14;
  v15 = v13 == -603924480;
  if (v13 == -603924480)
    v16 = 32;
  else
    v16 = 16;
  v37 = (unint64_t)v7 >> v16;
  if (v15)
  {
    v17 = 0;
    goto LABEL_25;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized String.init<A, B>(_validating:as:)(uint64_t a1, uint64_t a2, char a3)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned __int8 v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  char v17;
  BOOL v18;
  char v19;
  char v20;
  void (*v21)(uint64_t *, _QWORD);
  int v22;
  unint64_t v23;
  unsigned int i;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  unsigned int v40;
  unsigned __int8 v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;

  v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0, MEMORY[0x1E0DEE9D8]);
  v7 = a1 + a2;
  if (!a1)
    v7 = 0;
  v42 = a1;
  v43 = v7;
  v44 = a3;
  v45 = 0;
  v40 = 0;
  v41 = 0;
  v8 = 1;
LABEL_4:
  v9 = specialized UTF16EndianAdaptor.Iterator.next()();
  if ((v9 & 0x10000) != 0)
    goto LABEL_52;
  LOWORD(v10) = v9;
  if ((v9 & 0xF800) != 0xD800)
  {
    while (1)
    {
      v10 = (unsigned __int16)v10;
      v20 = 1;
LABEL_27:
      if ((unsigned __int16)v10 >= 0x80u)
      {
        v28 = (v10 & 0x3F) << 8;
        if ((unsigned __int16)v10 < 0x800u)
        {
          v29 = v28 | ((unsigned __int16)v10 >> 6);
          v30 = 33217;
LABEL_42:
          v22 = v29 + v30;
          goto LABEL_29;
        }
        if ((v10 & 0xF800) != 0xD800)
        {
          v29 = ((v28 | ((unsigned __int16)v10 >> 6) & 0x3F) << 8) | ((unsigned __int16)v10 >> 12);
          v30 = 8487393;
          goto LABEL_42;
        }
        if ((v20 & 1) == 0)
        {
          v34 = ((v10 & 0x3FF) << 10) | HIWORD(v10) & 0x3FF;
          v29 = ((v34 + 0x10000) >> 4) & 0x3F00 | ((v34 + 0x10000) >> 18) | (((v34 >> 6) & 0x3F | (((v34 + 0x10000) & 0x3F) << 8)) << 16);
          v30 = -2122219023;
          goto LABEL_42;
        }
        v31 = (v10 & 0x3F) << 8;
        v32 = (v31 | ((unsigned __int16)v10 >> 6)) + 33217;
        v33 = (((unsigned __int16)v10 >> 12) | ((v31 | ((unsigned __int16)v10 >> 6) & 0x3F) << 8)) + 8487393;
        if ((unsigned __int16)v10 >= 0x800u)
          v32 = v33;
        if ((unsigned __int16)v10 <= 0x7Fu)
          v22 = (unsigned __int16)v10 + 1;
        else
          v22 = v32;
      }
      else
      {
        v22 = (v10 + 1);
        if ((_BYTE)v10 == 0xFF)
        {
LABEL_37:
          v27 = v8;
          goto LABEL_38;
        }
      }
LABEL_29:
      v23 = *((_QWORD *)v6 + 2);
      for (i = v22; ; i >>= 8)
      {
        while (1)
        {
          v25 = *((_QWORD *)v6 + 3);
          if (v23 >= v25 >> 1)
            v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v25 > 1), v23 + 1, 1, v6);
          *((_QWORD *)v6 + 2) = v23 + 1;
          v6[v23 + 32] = i - 1;
          if ((v8 & ((char)(i - 1) < 0)) == 1)
            break;
          ++v23;
          v26 = i >= 0x100;
          i >>= 8;
          if (!v26)
            goto LABEL_37;
        }
        v27 = 0;
        v8 = 0;
        ++v23;
        if (i < 0x100)
          break;
      }
LABEL_38:
      v11 = v41;
      v8 = v27;
      if (!v41)
        goto LABEL_4;
      v10 = v40;
      if ((v40 & 0xF800) == 0xD800)
        goto LABEL_7;
      lazy protocol witness table accessor for type Unicode.UTF16.ForwardParser and conformance Unicode.UTF16.ForwardParser();
      v21 = (void (*)(uint64_t *, _QWORD))Locale.Language.components.modify();
      specialized RangeReplaceableCollection.remove(at:)(0);
      v21(&v39, 0);
    }
  }
  v10 = (unsigned __int16)v9 | (HIWORD(v40) << 16);
  v11 = 16;
LABEL_7:
  v12 = specialized UTF16EndianAdaptor.Iterator.next()();
  if ((v12 & 0x10000) != 0)
  {
    v13 = v11;
    goto LABEL_14;
  }
  v10 = ((-65535 << v11) - 1) & v10 | ((unsigned __int16)v12 << v11);
  v13 = v11 + 16;
  if ((v11 + 16) > 0x1Fu)
    goto LABEL_15;
  v14 = specialized UTF16EndianAdaptor.Iterator.next()();
  if ((v14 & 0x10000) != 0)
  {
LABEL_14:
    if (v13)
      goto LABEL_15;
LABEL_52:
    swift_bridgeObjectRetain();
    v35 = static String._tryFromUTF8(_:)();
    v37 = v36;
    swift_bridgeObjectRelease_n();
    if (v37)
      return v35;
    else
      return 0;
  }
  v10 = ((-65535 << v13) - 1) & v10 | ((unsigned __int16)v14 << v13);
  v13 = v11 + 32;
  if (v11 >= 0xE0u)
  {
    v15 = specialized UTF16EndianAdaptor.Iterator.next()();
    if ((v15 & 0x10000) == 0)
    {
      v10 = ((-65535 << v11) - 1) & v10 | ((unsigned __int16)v15 << v11);
      v13 = v11 + 48;
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_15:
  v16 = v10 & 0xFC00FC00;
  if ((v10 & 0xFC00FC00) == 0xDC00D800)
    v17 = 32;
  else
    v17 = 16;
  v41 = v13 - v17;
  v18 = v16 == -603924480;
  if (v16 == -603924480)
    v19 = 32;
  else
    v19 = 16;
  v40 = (unint64_t)v10 >> v19;
  if (v18)
  {
    v20 = 0;
    goto LABEL_27;
  }
  swift_bridgeObjectRelease();
  return 0;
}

{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  char v16;
  BOOL v17;
  char v18;
  char v19;
  void (*v20)(uint64_t *, _QWORD);
  int v21;
  unint64_t v22;
  unsigned int i;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  unsigned int v39;
  unsigned __int8 v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;

  v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0, MEMORY[0x1E0DEE9D8]);
  v41 = a1;
  v42 = a1 + a2;
  v43 = a3;
  v44 = 0;
  v7 = 1;
  v39 = 0;
  v40 = 0;
LABEL_2:
  v8 = specialized UTF16EndianAdaptor.Iterator.next()();
  if ((v8 & 0x10000) != 0)
    goto LABEL_50;
  LOWORD(v9) = v8;
  if ((v8 & 0xF800) != 0xD800)
  {
    while (1)
    {
      v9 = (unsigned __int16)v9;
      v19 = 1;
LABEL_25:
      if ((unsigned __int16)v9 >= 0x80u)
      {
        v27 = (v9 & 0x3F) << 8;
        if ((unsigned __int16)v9 < 0x800u)
        {
          v28 = v27 | ((unsigned __int16)v9 >> 6);
          v29 = 33217;
LABEL_40:
          v21 = v28 + v29;
          goto LABEL_27;
        }
        if ((v9 & 0xF800) != 0xD800)
        {
          v28 = ((v27 | ((unsigned __int16)v9 >> 6) & 0x3F) << 8) | ((unsigned __int16)v9 >> 12);
          v29 = 8487393;
          goto LABEL_40;
        }
        if ((v19 & 1) == 0)
        {
          v33 = ((v9 & 0x3FF) << 10) | HIWORD(v9) & 0x3FF;
          v28 = ((v33 + 0x10000) >> 4) & 0x3F00 | ((v33 + 0x10000) >> 18) | (((v33 >> 6) & 0x3F | (((v33 + 0x10000) & 0x3F) << 8)) << 16);
          v29 = -2122219023;
          goto LABEL_40;
        }
        v30 = (v9 & 0x3F) << 8;
        v31 = (v30 | ((unsigned __int16)v9 >> 6)) + 33217;
        v32 = (((unsigned __int16)v9 >> 12) | ((v30 | ((unsigned __int16)v9 >> 6) & 0x3F) << 8)) + 8487393;
        if ((unsigned __int16)v9 >= 0x800u)
          v31 = v32;
        if ((unsigned __int16)v9 <= 0x7Fu)
          v21 = (unsigned __int16)v9 + 1;
        else
          v21 = v31;
      }
      else
      {
        v21 = (v9 + 1);
        if ((_BYTE)v9 == 0xFF)
        {
LABEL_35:
          v26 = v7;
          goto LABEL_36;
        }
      }
LABEL_27:
      v22 = *((_QWORD *)v6 + 2);
      for (i = v21; ; i >>= 8)
      {
        while (1)
        {
          v24 = *((_QWORD *)v6 + 3);
          if (v22 >= v24 >> 1)
            v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v24 > 1), v22 + 1, 1, v6);
          *((_QWORD *)v6 + 2) = v22 + 1;
          v6[v22 + 32] = i - 1;
          if ((v7 & ((char)(i - 1) < 0)) == 1)
            break;
          ++v22;
          v25 = i >= 0x100;
          i >>= 8;
          if (!v25)
            goto LABEL_35;
        }
        v26 = 0;
        v7 = 0;
        ++v22;
        if (i < 0x100)
          break;
      }
LABEL_36:
      v10 = v40;
      v7 = v26;
      if (!v40)
        goto LABEL_2;
      v9 = v39;
      if ((v39 & 0xF800) == 0xD800)
        goto LABEL_5;
      lazy protocol witness table accessor for type Unicode.UTF16.ForwardParser and conformance Unicode.UTF16.ForwardParser();
      v20 = (void (*)(uint64_t *, _QWORD))Locale.Language.components.modify();
      specialized RangeReplaceableCollection.remove(at:)(0);
      v20(&v38, 0);
    }
  }
  v9 = (unsigned __int16)v8 | (HIWORD(v39) << 16);
  v10 = 16;
LABEL_5:
  v11 = specialized UTF16EndianAdaptor.Iterator.next()();
  if ((v11 & 0x10000) != 0)
  {
    v12 = v10;
    goto LABEL_12;
  }
  v9 = ((-65535 << v10) - 1) & v9 | ((unsigned __int16)v11 << v10);
  v12 = v10 + 16;
  if ((v10 + 16) > 0x1Fu)
    goto LABEL_13;
  v13 = specialized UTF16EndianAdaptor.Iterator.next()();
  if ((v13 & 0x10000) != 0)
  {
LABEL_12:
    if (v12)
      goto LABEL_13;
LABEL_50:
    swift_bridgeObjectRetain();
    v34 = static String._tryFromUTF8(_:)();
    v36 = v35;
    swift_bridgeObjectRelease_n();
    if (v36)
      return v34;
    else
      return 0;
  }
  v9 = ((-65535 << v12) - 1) & v9 | ((unsigned __int16)v13 << v12);
  v12 = v10 + 32;
  if (v10 >= 0xE0u)
  {
    v14 = specialized UTF16EndianAdaptor.Iterator.next()();
    if ((v14 & 0x10000) == 0)
    {
      v9 = ((-65535 << v10) - 1) & v9 | ((unsigned __int16)v14 << v10);
      v12 = v10 + 48;
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_13:
  v15 = v9 & 0xFC00FC00;
  if ((v9 & 0xFC00FC00) == 0xDC00D800)
    v16 = 32;
  else
    v16 = 16;
  v40 = v12 - v16;
  v17 = v15 == -603924480;
  if (v15 == -603924480)
    v18 = 32;
  else
    v18 = 16;
  v39 = (unint64_t)v9 >> v18;
  if (v17)
  {
    v19 = 0;
    goto LABEL_25;
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized String.init<A, B>(_validating:as:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned __int8 v18;
  unsigned int v19;
  char v20;
  char v21;
  int v22;
  void (*v23)(unsigned __int16 *, _QWORD);
  int v24;
  unint64_t v25;
  unsigned int i;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int16 v48;
  char v49;
  unsigned int v50;
  unsigned __int8 v51;

  v4 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v43 - v12;
  v14 = dispatch thunk of Sequence.underestimatedCount.getter();
  v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14 & ~(v14 >> 63), 0, MEMORY[0x1E0DEE9D8]);
  v46 = v4;
  v47 = a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, a2);
  dispatch thunk of Sequence.makeIterator()();
  v44 = v13;
  v45 = v8;
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v13, AssociatedTypeWitness);
  v50 = 0;
  v51 = 0;
  v16 = 1;
LABEL_2:
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  if ((v49 & 1) != 0)
  {
LABEL_48:
    v37 = *(void (**)(char *, uint64_t))(v45 + 8);
    v37(v10, AssociatedTypeWitness);
    v37(v44, AssociatedTypeWitness);
    swift_bridgeObjectRetain();
    v38 = static String._tryFromUTF8(_:)();
    v40 = v39;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v47, a2);
    swift_bridgeObjectRelease();
    if (v40)
      return v38;
    else
      return 0;
  }
  v17 = v48;
  if ((v48 & 0xF800) == 0xD800)
  {
    v50 = ((-65535 << v51) - 1) & v50 | (v48 << v51);
    v51 += 16;
    goto LABEL_5;
  }
  while (1)
  {
    v22 = 1;
LABEL_23:
    if ((unsigned __int16)v17 >= 0x80u)
    {
      v30 = (v17 & 0x3F) << 8;
      if ((unsigned __int16)v17 >= 0x800u)
      {
        if ((v17 & 0xF800) == 0xD800)
        {
          if (v22)
          {
            v33 = (v17 & 0x3F) << 8;
            v34 = (v33 | ((unsigned __int16)v17 >> 6)) + 33217;
            v35 = (((unsigned __int16)v17 >> 12) | ((v33 | ((unsigned __int16)v17 >> 6) & 0x3F) << 8)) + 8487393;
            if ((unsigned __int16)v17 >= 0x800u)
              v34 = v35;
            if ((unsigned __int16)v17 <= 0x7Fu)
              v24 = (unsigned __int16)v17 + 1;
            else
              v24 = v34;
            goto LABEL_25;
          }
          v36 = ((v17 & 0x3FF) << 10) | HIWORD(v17) & 0x3FF;
          v31 = ((v36 + 0x10000) >> 4) & 0x3F00 | ((v36 + 0x10000) >> 18) | (((v36 >> 6) & 0x3F | (((v36 + 0x10000) & 0x3F) << 8)) << 16);
          v32 = -2122219023;
        }
        else
        {
          v31 = ((v30 | ((unsigned __int16)v17 >> 6) & 0x3F) << 8) | ((unsigned __int16)v17 >> 12);
          v32 = 8487393;
        }
      }
      else
      {
        v31 = v30 | ((unsigned __int16)v17 >> 6);
        v32 = 33217;
      }
      v24 = v31 + v32;
      goto LABEL_25;
    }
    v24 = (v17 + 1);
    if ((_BYTE)v17 == 0xFF)
    {
LABEL_33:
      v29 = v16;
      goto LABEL_34;
    }
LABEL_25:
    v25 = *((_QWORD *)v15 + 2);
    for (i = v24; ; i >>= 8)
    {
      while (1)
      {
        v27 = *((_QWORD *)v15 + 3);
        if (v25 >= v27 >> 1)
          v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v25 + 1, 1, v15);
        *((_QWORD *)v15 + 2) = v25 + 1;
        v15[v25 + 32] = i - 1;
        if ((v16 & ((char)(i - 1) < 0)) == 1)
          break;
        ++v25;
        v28 = i >= 0x100;
        i >>= 8;
        if (!v28)
          goto LABEL_33;
      }
      v29 = 0;
      v16 = 0;
      ++v25;
      if (i < 0x100)
        break;
    }
LABEL_34:
    v16 = v29;
    if (!v51)
      goto LABEL_2;
    if ((v50 & 0xF800) == 0xD800)
      break;
    v17 = (unsigned __int16)v50;
    lazy protocol witness table accessor for type Unicode.UTF16.ForwardParser and conformance Unicode.UTF16.ForwardParser();
    v23 = (void (*)(unsigned __int16 *, _QWORD))Locale.Language.components.modify();
    specialized RangeReplaceableCollection.remove(at:)(0);
    v23(&v48, 0);
  }
  swift_getAssociatedConformanceWitness();
LABEL_5:
  while (1)
  {
    dispatch thunk of IteratorProtocol.next()();
    if ((v49 & 1) != 0)
      break;
    v17 = ((-65535 << v51) - 1) & v50 | (v48 << v51);
    v50 = v17;
    v18 = v51 + 16;
    v51 += 16;
    if (v51 >= 0x20u)
      goto LABEL_10;
  }
  v18 = v51;
  if (!v51)
    goto LABEL_48;
  v17 = v50;
LABEL_10:
  v19 = v17 & 0xFC00FC00;
  if ((v17 & 0xFC00FC00) == 0xDC00D800)
    v20 = 32;
  else
    v20 = 16;
  v51 = v18 - v20;
  if (v19 == -603924480)
    v21 = 32;
  else
    v21 = 16;
  v50 = (unint64_t)v17 >> v21;
  if (v19 == -603924480)
  {
    v22 = 0;
    goto LABEL_23;
  }
  v41 = *(void (**)(char *, uint64_t))(v45 + 8);
  v41(v10, AssociatedTypeWitness);
  v41(v44, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v47, a2);
  swift_bridgeObjectRelease();
  return 0;
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t AssociatedConformanceWitness;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  int v36;
  int v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  char v45;

  v4 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v39 - v12;
  v14 = dispatch thunk of Sequence.underestimatedCount.getter();
  v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14 & ~(v14 >> 63), 0, MEMORY[0x1E0DEE9D8]);
  v43 = v4;
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v17 = AssociatedTypeWitness;
  v18 = a1;
  v16(v6, a1, a2);
  dispatch thunk of Sequence.makeIterator()();
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v13, v17);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  if ((v45 & 1) != 0)
  {
LABEL_2:
    v20 = *(void (**)(char *, uint64_t))(v8 + 8);
    v20(v10, v17);
    v20(v13, v17);
    swift_bridgeObjectRetain();
    v21 = static String._tryFromUTF8(_:)();
    v23 = v22;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v18, a2);
    swift_bridgeObjectRelease();
    if (v23)
      return v21;
    else
      return 0;
  }
  else
  {
    v25 = 1;
    v26 = v44;
    while (1)
    {
      v27 = HIWORD(v26);
      if (HIWORD(v26) > 0x10u || (v26 & 0xFFFFF800) == 0xD800)
        break;
      v41 = v8;
      v42 = v18;
      v40 = AssociatedConformanceWitness;
      if (v26 > 0x7F)
      {
        v34 = (v26 & 0x3F) << 8;
        if (v26 > 0x7FF)
        {
          v35 = v26 >> 12;
          v36 = (v34 | (v26 >> 6) & 0x3F) << 8;
          v28 = (((v36 | (v26 >> 12) & 0x3F) << 8) | (v26 >> 18)) - 2122219023;
          v37 = (v36 | v35) + 8487393;
          if (!v27)
            v28 = v37;
        }
        else
        {
          v28 = (v34 | (v26 >> 6)) + 33217;
        }
      }
      else
      {
        v28 = v26 + 1;
      }
      v29 = *((_QWORD *)v15 + 2);
      v30 = v28;
      do
      {
        while (1)
        {
          v31 = *((_QWORD *)v15 + 3);
          if (v29 >= v31 >> 1)
            v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v31 > 1), v29 + 1, 1, v15);
          *((_QWORD *)v15 + 2) = v29 + 1;
          v15[v29 + 32] = v30 - 1;
          if ((v25 & ((char)(v30 - 1) < 0)) != 1)
            break;
          v33 = 0;
          v25 = 0;
          ++v29;
          if (v30 < 0x100)
            goto LABEL_18;
          v30 >>= 8;
        }
        ++v29;
        v32 = v30 >= 0x100;
        v30 >>= 8;
      }
      while (v32);
      v33 = v25;
LABEL_18:
      AssociatedConformanceWitness = v40;
      dispatch thunk of IteratorProtocol.next()();
      v26 = v44;
      v25 = v33;
      v8 = v41;
      v18 = v42;
      if ((v45 & 1) != 0)
        goto LABEL_2;
    }
    v38 = *(void (**)(char *, uint64_t))(v8 + 8);
    v38(v10, v17);
    v38(v13, v17);
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v18, a2);
    swift_bridgeObjectRelease();
    return 0;
  }
}

uint64_t sub_181D52380()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unsigned int i;
  unint64_t v8;
  BOOL v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  unint64_t v20;

  outlined copy of Data._Representation(v1, v0);
  outlined copy of Data._Representation(v1, v0);
  outlined copy of Data._Representation(v1, v0);
  Data.Iterator.init(_:at:)(v1, v0);
  outlined consume of Data._Representation(v1, v0);
  outlined consume of Data._Representation(v1, v0);
  outlined copy of Data._Representation(v19, v20);
  v3 = specialized UTF32EndianAdaptor.Iterator.next()();
  if ((v3 & 0x100000000) == 0)
  {
    v4 = 1;
    while (1)
    {
      if (WORD1(v3) > 0x10u || (v3 & 0xFFFFF800) == 0xD800)
      {
        outlined consume of Data._Representation(v19, v20);
        outlined consume of Data._Representation(v19, v20);
        outlined consume of Data._Representation(v1, v0);
        swift_bridgeObjectRelease();
        return 0;
      }
      if ((v3 & 0xFFFFFF80) != 0)
        break;
      if (v3 > 0xFF)
        __break(1u);
      v5 = (v3 + 1);
      if ((_BYTE)v3 != 0xFF)
        goto LABEL_8;
LABEL_16:
      v10 = v4;
LABEL_17:
      v3 = specialized UTF32EndianAdaptor.Iterator.next()();
      v4 = v10;
      if ((v3 & 0x100000000) != 0)
        goto LABEL_24;
    }
    v11 = (v3 & 0x3F) << 8;
    v12 = (v11 | (v3 >> 6) & 0x3F) << 8;
    v13 = (((v12 | (v3 >> 12) & 0x3F) << 8) | (v3 >> 18)) - 2122219023;
    v14 = (v12 | (v3 >> 12)) + 8487393;
    if (WORD1(v3))
      v14 = v13;
    v5 = (v11 | (v3 >> 6)) + 33217;
    if (v3 > 0x7FF)
      v5 = v14;
LABEL_8:
    v6 = *((_QWORD *)v2 + 2);
    for (i = v5; ; i >>= 8)
    {
      while (1)
      {
        v8 = *((_QWORD *)v2 + 3);
        if (v6 >= v8 >> 1)
          v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v6 + 1, 1, v2);
        *((_QWORD *)v2 + 2) = v6 + 1;
        v2[v6 + 32] = i - 1;
        if ((v4 & ((char)(i - 1) < 0)) == 1)
          break;
        ++v6;
        v9 = i >= 0x100;
        i >>= 8;
        if (!v9)
          goto LABEL_16;
      }
      v10 = 0;
      v4 = 0;
      ++v6;
      if (i < 0x100)
        break;
    }
    goto LABEL_17;
  }
LABEL_24:
  outlined consume of Data._Representation(v19, v20);
  outlined consume of Data._Representation(v19, v20);
  swift_bridgeObjectRetain();
  v15 = static String._tryFromUTF8(_:)();
  v17 = v16;
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v1, v0);
  swift_bridgeObjectRelease();
  if (v17)
    return v15;
  else
    return 0;
}

unint64_t specialized String.init<A, B>(_validating:as:)()
{
  char *v0;
  unint64_t result;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unsigned int i;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0, MEMORY[0x1E0DEE9D8]);
  swift_bridgeObjectRetain_n();
  result = specialized UTF32EndianAdaptor.Iterator.next()();
  if ((result & 0x100000000) == 0)
  {
    v2 = 1;
    while (1)
    {
      if (WORD1(result) > 0x10u || (result & 0xFFFFF800) == 0xD800)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 0;
      }
      if ((result & 0xFFFFFF80) != 0)
        break;
      if (result > 0xFF)
      {
        __break(1u);
        return result;
      }
      v3 = (result + 1);
      if ((_BYTE)result != 0xFF)
        goto LABEL_8;
LABEL_16:
      v8 = v2;
LABEL_17:
      result = specialized UTF32EndianAdaptor.Iterator.next()();
      v2 = v8;
      if ((result & 0x100000000) != 0)
        goto LABEL_24;
    }
    v9 = (result & 0x3F) << 8;
    v10 = (v9 | (result >> 6) & 0x3F) << 8;
    v11 = (((v10 | (result >> 12) & 0x3F) << 8) | (result >> 18)) - 2122219023;
    v12 = (v10 | (result >> 12)) + 8487393;
    if (WORD1(result))
      v12 = v11;
    v3 = (v9 | (result >> 6)) + 33217;
    if (result > 0x7FF)
      v3 = v12;
LABEL_8:
    v4 = *((_QWORD *)v0 + 2);
    for (i = v3; ; i >>= 8)
    {
      while (1)
      {
        v6 = *((_QWORD *)v0 + 3);
        if (v4 >= v6 >> 1)
          v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v4 + 1, 1, v0);
        *((_QWORD *)v0 + 2) = v4 + 1;
        v0[v4 + 32] = i - 1;
        if ((v2 & ((char)(i - 1) < 0)) == 1)
          break;
        ++v4;
        v7 = i >= 0x100;
        i >>= 8;
        if (!v7)
          goto LABEL_16;
      }
      v8 = 0;
      v2 = 0;
      ++v4;
      if (i < 0x100)
        break;
    }
    goto LABEL_17;
  }
LABEL_24:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v13 = static String._tryFromUTF8(_:)();
  v15 = v14;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  if (v15)
    return v13;
  else
    return 0;
}

{
  char *v0;
  unint64_t result;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unsigned int i;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0, MEMORY[0x1E0DEE9D8]);
  result = specialized UTF32EndianAdaptor.Iterator.next()();
  if ((result & 0x100000000) == 0)
  {
    v2 = 1;
    while (1)
    {
      if (result >> 11 == 27 || WORD1(result) > 0x10u)
      {
        swift_bridgeObjectRelease();
        return 0;
      }
      if ((result & 0xFFFFFF80) != 0)
        break;
      if (result > 0xFF)
      {
        __break(1u);
        return result;
      }
      v3 = (result + 1);
      if ((_BYTE)result != 0xFF)
        goto LABEL_8;
LABEL_16:
      v8 = v2;
LABEL_17:
      result = specialized UTF32EndianAdaptor.Iterator.next()();
      v2 = v8;
      if ((result & 0x100000000) != 0)
        goto LABEL_24;
    }
    v9 = (result & 0x3F) << 8;
    v10 = (v9 | (result >> 6) & 0x3F) << 8;
    v11 = (((v10 | (result >> 12) & 0x3F) << 8) | (result >> 18)) - 2122219023;
    v12 = (v10 | (result >> 12)) + 8487393;
    if (WORD1(result))
      v3 = v11;
    else
      v3 = v12;
    if (result <= 0x7FF)
      v3 = (v9 | (result >> 6)) + 33217;
LABEL_8:
    v4 = *((_QWORD *)v0 + 2);
    for (i = v3; ; i >>= 8)
    {
      while (1)
      {
        v6 = *((_QWORD *)v0 + 3);
        if (v4 >= v6 >> 1)
          v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v4 + 1, 1, v0);
        *((_QWORD *)v0 + 2) = v4 + 1;
        v0[v4 + 32] = i - 1;
        if ((v2 & ((char)(i - 1) < 0)) == 1)
          break;
        ++v4;
        v7 = i >= 0x100;
        i >>= 8;
        if (!v7)
          goto LABEL_16;
      }
      v8 = 0;
      v2 = 0;
      ++v4;
      if (i < 0x100)
        break;
    }
    goto LABEL_17;
  }
LABEL_24:
  swift_bridgeObjectRetain();
  v13 = static String._tryFromUTF8(_:)();
  v15 = v14;
  swift_bridgeObjectRelease_n();
  if (v15)
    return v13;
  else
    return 0;
}

{
  char *v0;
  unint64_t result;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unsigned int i;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0, MEMORY[0x1E0DEE9D8]);
  result = specialized UTF32EndianAdaptor.Iterator.next()();
  if ((result & 0x100000000) == 0)
  {
    v2 = 1;
    while (1)
    {
      if (result >> 11 == 27 || WORD1(result) > 0x10u)
      {
        swift_bridgeObjectRelease();
        return 0;
      }
      if ((result & 0xFFFFFF80) != 0)
        break;
      if (result > 0xFF)
      {
        __break(1u);
        return result;
      }
      v3 = (result + 1);
      if ((_BYTE)result != 0xFF)
        goto LABEL_8;
LABEL_16:
      v8 = v2;
LABEL_17:
      result = specialized UTF32EndianAdaptor.Iterator.next()();
      v2 = v8;
      if ((result & 0x100000000) != 0)
        goto LABEL_24;
    }
    v9 = (result & 0x3F) << 8;
    v10 = (v9 | (result >> 6) & 0x3F) << 8;
    v11 = (((v10 | (result >> 12) & 0x3F) << 8) | (result >> 18)) - 2122219023;
    v12 = (v10 | (result >> 12)) + 8487393;
    if (WORD1(result))
      v3 = v11;
    else
      v3 = v12;
    if (result <= 0x7FF)
      v3 = (v9 | (result >> 6)) + 33217;
LABEL_8:
    v4 = *((_QWORD *)v0 + 2);
    for (i = v3; ; i >>= 8)
    {
      while (1)
      {
        v6 = *((_QWORD *)v0 + 3);
        if (v4 >= v6 >> 1)
          v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v4 + 1, 1, v0);
        *((_QWORD *)v0 + 2) = v4 + 1;
        v0[v4 + 32] = i - 1;
        if ((v2 & ((char)(i - 1) < 0)) == 1)
          break;
        ++v4;
        v7 = i >= 0x100;
        i >>= 8;
        if (!v7)
          goto LABEL_16;
      }
      v8 = 0;
      v2 = 0;
      ++v4;
      if (i < 0x100)
        break;
    }
    goto LABEL_17;
  }
LABEL_24:
  swift_bridgeObjectRetain();
  v13 = static String._tryFromUTF8(_:)();
  v15 = v14;
  swift_bridgeObjectRelease_n();
  if (v15)
    return v13;
  else
    return 0;
}

uint64_t specialized String.init<A, B>(_validating:as:)(char *a1, uint64_t a2)
{
  char *v4;
  char *v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a2 & ~(a2 >> 63), 0, MEMORY[0x1E0DEE9D8]);
  v5 = v4;
  if (a1 && a2)
  {
    v6 = *a1;
    if (v6 < 0)
    {
LABEL_13:
      swift_bridgeObjectRelease();
      return 0;
    }
    v7 = *((_QWORD *)v4 + 2);
    v8 = a2 - 1;
    v9 = a1 + 1;
    while (1)
    {
      v10 = *((_QWORD *)v5 + 3);
      if (v7 >= v10 >> 1)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v7 + 1, 1, v5);
      *((_QWORD *)v5 + 2) = v7 + 1;
      v5[v7 + 32] = v6;
      if (!v8)
        break;
      v11 = *v9++;
      LOBYTE(v6) = v11;
      --v8;
      ++v7;
      if (v11 < 0)
        goto LABEL_13;
    }
  }
  swift_bridgeObjectRetain();
  v12 = static String._tryFromUTF8(_:)();
  v14 = v13;
  swift_bridgeObjectRelease_n();
  if (v14)
    return v12;
  else
    return 0;
}

void (*specialized String.init<A, B>(_validating:as:)(unsigned __int8 *a1, uint64_t a2))(_BYTE *, _QWORD)
{
  char *v4;
  unsigned int v5;
  unsigned __int8 v6;
  char *v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned __int8 *v11;
  int v12;
  unsigned int i;
  unint64_t v14;
  unsigned __int8 v15;
  unsigned int v16;
  int v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  char *v21;
  void (*result)(_BYTE *, _QWORD);
  uint64_t v23;
  char v24;
  Swift::UInt8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[32];
  unsigned int v30;
  unsigned __int8 v31;

  v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a2 & ~(a2 >> 63), 0, MEMORY[0x1E0DEE9D8]);
  v5 = 0;
  v6 = 0;
  if (a1)
    v7 = (char *)&a1[a2];
  else
    v7 = 0;
  v30 = 0;
  v31 = 0;
  v8 = MEMORY[0x1E0DEE458];
  v9 = 1;
  while (v6)
  {
    if ((v5 & 0x80) != 0)
    {
      if (!a1)
        goto LABEL_25;
      v11 = a1;
      if (a1 == (unsigned __int8 *)v7)
        goto LABEL_25;
LABEL_12:
      a1 = v11 + 1;
      v5 = ((-255 << v6) - 1) & v5 | (*v11 << v6);
      v15 = v6 + 8;
      if ((v6 + 8) >= 0x20u)
        goto LABEL_24;
      if (a1 != (unsigned __int8 *)v7)
      {
        a1 = v11 + 2;
        v5 = ((-255 << v15) - 1) & v5 | (v11[1] << v15);
        v15 = v6 + 16;
        if ((v6 + 16) > 0x1Fu)
          goto LABEL_24;
        if (a1 != (unsigned __int8 *)v7)
        {
          a1 = v11 + 3;
          v5 = ((-255 << v15) - 1) & v5 | (v11[2] << v15);
          v15 = v6 + 24;
          if ((v6 + 24) > 0x1Fu)
            goto LABEL_24;
          if (a1 != (unsigned __int8 *)v7)
          {
            a1 = v11 + 4;
            v5 = ((-255 << v15) - 1) & v5 | (v11[3] << v15);
            v15 = v6 + 32;
            if (v6 >= 0xE0u)
            {
              if (a1 == (unsigned __int8 *)v7)
                goto LABEL_21;
              v5 = ((-255 << v6) - 1) & v5 | (v11[4] << v6);
              v15 = v6 + 40;
              if ((v6 + 40) < 0x20u)
                goto LABEL_21;
              a1 = v11 + 5;
            }
LABEL_24:
            v6 = v15;
            goto LABEL_25;
          }
        }
      }
LABEL_21:
      v6 = v15;
      a1 = (unsigned __int8 *)v7;
      if (!v15)
        goto LABEL_53;
LABEL_25:
      if ((v5 & 0xC0E0) == 0x80C0)
      {
        if ((v5 & 0x1E) == 0)
          goto LABEL_52;
        v16 = 16;
      }
      else if ((v5 & 0xC0C0F0) == 0x8080E0)
      {
        if ((v5 & 0x200F) == 0 || (v5 & 0x200F) == 0x200D)
          goto LABEL_52;
        v16 = 24;
      }
      else
      {
        if ((v5 & 0xC0C0C0F8) != 0x808080F0 || (v5 & 0x3007) == 0 || __rev16(v5 & 0x3007) > 0x400)
        {
LABEL_52:
          v25 = Unicode.UTF8.ForwardParser._invalidLength()();
          v30 = (unint64_t)v5 >> ((8 * v25) & 0x38);
          v31 = v6 - 8 * v25;
          swift_bridgeObjectRelease();
          return 0;
        }
        v16 = 32;
      }
      v30 = (unint64_t)v5 >> v16;
      v31 = v6 - v16;
      v17 = ((1 << (v16 >> 1) << (v16 >> 1)) - 1) & (v5 + 16843009);
      if (v17)
        goto LABEL_37;
      goto LABEL_5;
    }
    lazy protocol witness table accessor for type Unicode.UTF8.ForwardParser and conformance Unicode.UTF8.ForwardParser();
    result = (void (*)(_BYTE *, _QWORD))Locale.Language.components.modify();
    v24 = *(_BYTE *)(v23 + 4);
    if (!v24)
    {
      __break(1u);
      return result;
    }
    *(_DWORD *)v23 >>= 8;
    *(_BYTE *)(v23 + 4) = v24 - 8;
    result(v29, 0);
    v17 = (v5 + 1);
    v8 = MEMORY[0x1E0DEE458];
    if ((_BYTE)v5 != 0xFF)
    {
LABEL_37:
      v14 = *((_QWORD *)v4 + 2);
      for (i = v17; ; i >>= 8)
      {
        while (1)
        {
LABEL_38:
          v18 = *((_QWORD *)v4 + 3);
          if (v14 >= v18 >> 1)
          {
            v20 = v8;
            v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v18 > 1), v14 + 1, 1, v4);
            v8 = v20;
            v4 = v21;
          }
          *((_QWORD *)v4 + 2) = v14 + 1;
          v4[v14 + 32] = i - 1;
          if ((v9 & ((char)(i - 1) < 0)) == 1)
            break;
          ++v14;
          v19 = i >= 0x100;
          i >>= 8;
          if (!v19)
            goto LABEL_5;
        }
        v9 = 0;
        ++v14;
        if (i < 0x100)
          break;
      }
    }
LABEL_5:
    v6 = v31;
    v5 = v30;
  }
  if (a1 && a1 != (unsigned __int8 *)v7)
  {
    v10 = (char)*a1++;
    v11 = a1;
    v12 = v10;
    if ((v10 & 0x80000000) == 0)
    {
      i = v12 + 1;
      v14 = *((_QWORD *)v4 + 2);
      goto LABEL_38;
    }
    v5 = v5 & 0xFFFFFF00 | v12;
    v6 = 8;
    if (a1 != (unsigned __int8 *)v7)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_53:
  swift_bridgeObjectRetain();
  v26 = static String._tryFromUTF8(_:)();
  v28 = v27;
  swift_bridgeObjectRelease_n();
  if (v28)
    return (void (*)(_BYTE *, _QWORD))v26;
  else
    return 0;
}

uint64_t specialized thunk for @callee_guaranteed (@unowned UnsafeBufferPointer<UInt8>) -> (@owned String?, @error @owned Error)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;

  result = static String._tryFromUTF8(_:)();
  if (!v7)
    result = (uint64_t)specialized String.init<A, B>(_validating:as:)(a1, a2);
  *a3 = result;
  a3[1] = v7;
  return result;
}

uint64_t specialized thunk for @callee_guaranteed (@unowned UnsafeBufferPointer<UInt8>) -> (@owned String?, @error @owned Error)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = specialized String.init<A, B>(_validating:as:)(a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

id makeNSString #1 <A>(bytes:) in String.init<A>(bytes:encoding:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v3;
  void *v4;
  id v5;

  v3 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithBytes_length_encoding_, a1, a2, a3);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

  return v5;
}

id partial apply for makeNSString #1 <A>(bytes:) in String.init<A>(bytes:encoding:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return makeNSString #1 <A>(bytes:) in String.init<A>(bytes:encoding:)(a1, a2, *(_QWORD *)(v2 + 16));
}

_QWORD *closure #2 in String.init<A>(bytes:encoding:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  return closure #2 in String.init<A>(bytes:encoding:)(a1, a2, a3, (void (*)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in closure #2 in String.init<A>(bytes:encoding:), a4);
}

uint64_t closure #1 in closure #2 in String.init<A>(bytes:encoding:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, char a4@<W4>, uint64_t *a5@<X8>)
{
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unsigned int v10;
  unsigned __int8 v11;
  unsigned int v12;
  char v13;
  BOOL v14;
  char v15;
  char v16;
  uint64_t (*v17)(char *, _QWORD);
  unsigned int v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  char v26[32];
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  unsigned __int8 i;

  v6 = 0;
  v7 = 0;
  v8 = a2 + a3;
  if (!a2)
    v8 = 0;
  v27 = a2;
  v28 = v8;
  v29 = a4;
  v30 = 0;
  v31 = 0;
  for (i = 0; ; v6 = i)
  {
    if (v6)
    {
      v10 = v31;
      if ((v31 & 0xF800) != 0xD800)
      {
        lazy protocol witness table accessor for type Unicode.UTF16.ForwardParser and conformance Unicode.UTF16.ForwardParser();
        v17 = (uint64_t (*)(char *, _QWORD))Locale.Language.components.modify();
        specialized RangeReplaceableCollection.remove(at:)(0);
        result = v17(v26, 0);
LABEL_28:
        v10 = (unsigned __int16)v10;
        v16 = 1;
        goto LABEL_29;
      }
    }
    else
    {
      result = specialized UTF16EndianAdaptor.Iterator.next()();
      if ((result & 0x10000) != 0)
        goto LABEL_45;
      LOWORD(v10) = result;
      if ((result & 0xF800) != 0xD800)
        goto LABEL_28;
      v10 = (unsigned __int16)result | (HIWORD(v31) << 16);
      v6 = 16;
    }
    result = specialized UTF16EndianAdaptor.Iterator.next()();
    if ((result & 0x10000) != 0)
      break;
    v10 = ((-65535 << v6) - 1) & v10 | ((unsigned __int16)result << v6);
    v11 = v6 + 16;
    if ((v6 + 16) <= 0x1Fu)
    {
      result = specialized UTF16EndianAdaptor.Iterator.next()();
      if ((result & 0x10000) != 0)
        goto LABEL_16;
      v10 = ((-65535 << v11) - 1) & v10 | ((unsigned __int16)result << v11);
      v11 = v6 + 32;
      if (v6 >= 0xE0u)
      {
        result = specialized UTF16EndianAdaptor.Iterator.next()();
        if ((result & 0x10000) != 0)
          goto LABEL_16;
        v10 = ((-65535 << v6) - 1) & v10 | ((unsigned __int16)result << v6);
        v11 = v6 + 48;
      }
    }
LABEL_17:
    v12 = v10 & 0xFC00FC00;
    if ((v10 & 0xFC00FC00) == 0xDC00D800)
      v13 = 32;
    else
      v13 = 16;
    i = v11 - v13;
    v14 = v12 == -603924480;
    if (v12 == -603924480)
      v15 = 32;
    else
      v15 = 16;
    v31 = (unint64_t)v10 >> v15;
    if (!v14)
      goto LABEL_48;
    v16 = 0;
LABEL_29:
    if ((unsigned __int16)v10 >= 0x80u)
    {
      v21 = (v10 & 0x3F) << 8;
      if ((unsigned __int16)v10 >= 0x800u)
      {
        if ((v10 & 0xF800) == 0xD800)
        {
          if ((v16 & 1) != 0)
          {
            if ((unsigned __int16)v10 > 0x7Fu)
            {
              v23 = (v10 & 0x3F) << 8;
              v18 = (((unsigned __int16)v10 >> 12) | ((v23 | ((unsigned __int16)v10 >> 6) & 0x3F) << 8)) + 8487393;
              if ((unsigned __int16)v10 < 0x800u)
                v18 = (v23 | ((unsigned __int16)v10 >> 6)) + 33217;
            }
            else
            {
              v18 = (unsigned __int16)v10 + 1;
            }
          }
          else
          {
            v22 = ((v10 & 0x3FF) << 10) | HIWORD(v10) & 0x3FF;
            v18 = (((v22 + 0x10000) >> 4) & 0x3F00 | ((v22 + 0x10000) >> 18) | (((v22 >> 6) & 0x3F | (((v22 + 0x10000) & 0x3F) << 8)) << 16))
                - 2122219023;
          }
        }
        else
        {
          v18 = (((v21 | ((unsigned __int16)v10 >> 6) & 0x3F) << 8) | ((unsigned __int16)v10 >> 12)) + 8487393;
        }
      }
      else
      {
        v18 = (v21 | ((unsigned __int16)v10 >> 6)) + 33217;
      }
LABEL_31:
      while (1)
      {
        *(_BYTE *)(a1 + v7) = v18 - 1;
        v19 = v7 + 1;
        if (__OFADD__(v7, 1))
          break;
        ++v7;
        v20 = v18 >= 0x100;
        v18 >>= 8;
        if (!v20)
        {
          v7 = v19;
          goto LABEL_4;
        }
      }
      __break(1u);
LABEL_48:
      *a5 = 0;
      a5[1] = 0;
      return result;
    }
    v18 = (v10 + 1);
    if ((_BYTE)v10 != 0xFF)
      goto LABEL_31;
LABEL_4:
    ;
  }
  v11 = v6;
LABEL_16:
  if (v11)
    goto LABEL_17;
LABEL_45:
  if (v7 < 0)
  {
    __break(1u);
  }
  else
  {
    result = static String._tryFromUTF8(_:)();
    *a5 = result;
    a5[1] = v24;
  }
  return result;
}

_QWORD *closure #3 in String.init<A>(bytes:encoding:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  return closure #2 in String.init<A>(bytes:encoding:)(a1, a2, a3, (void (*)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in closure #3 in String.init<A>(bytes:encoding:), a4);
}

_QWORD *closure #2 in String.init<A>(bytes:encoding:)@<X0>(uint64_t isStackAllocationSafe@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t)@<X3>, _OWORD *a5@<X8>)
{
  void *v5;
  uint64_t v7;
  uint64_t v11;
  __int128 *v12;
  __n128 v13;
  _QWORD *result;
  void *v15;
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v7 = 3 * a2;
  if ((unsigned __int128)(a2 * (__int128)3) >> 64 != (3 * a2) >> 63)
  {
    __break(1u);
LABEL_10:
    __break(1u);
  }
  if (v7 < 0)
    goto LABEL_10;
  v11 = isStackAllocationSafe;
  if (v7 <= 1024 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
  {
    v12 = &v16;
    v13 = MEMORY[0x1E0C80A78](isStackAllocationSafe);
    result = ((_QWORD *(*)(__int128 *__return_ptr, __n128))a4)(&v16, v13);
    v15 = v5;
    if (!v5)
    {
      *a5 = v16;
      return result;
    }
    swift_willThrow();

    __break(1u);
  }
  else
  {
    v12 = (__int128 *)swift_slowAlloc();
    a4(v12, v7, v11, a2, a3);
    v15 = v5;
    if (!v5)
      return (_QWORD *)MEMORY[0x186DA9E78](v12, -1, -1);
  }

  result = (_QWORD *)MEMORY[0x186DA9E78](v12, -1, -1);
  __break(1u);
  return result;
}

_QWORD *partial apply for closure #3 in String.init<A>(bytes:encoding:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3;

  return closure #2 in String.init<A>(bytes:encoding:)(a1, a2, *(unsigned __int8 *)(v3 + 16), (void (*)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in closure #3 in String.init<A>(bytes:encoding:), a3);
}

_QWORD *partial apply for closure #2 in String.init<A>(bytes:encoding:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3;

  return closure #2 in String.init<A>(bytes:encoding:)(a1, a2, *(unsigned __int8 *)(v3 + 16), (void (*)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in closure #2 in String.init<A>(bytes:encoding:), a3);
}

unint64_t closure #1 in closure #3 in String.init<A>(bytes:encoding:)@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v4;
  unint64_t result;
  unsigned int v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;

  v4 = 0;
LABEL_2:
  while (1)
  {
    result = specialized UTF32EndianAdaptor.Iterator.next()();
    if ((result & 0x100000000) != 0)
      break;
    if (WORD1(result) > 0x10u || (result & 0xFFFFF800) == 55296)
    {
      *a2 = 0;
      a2[1] = 0;
      return result;
    }
    if ((result & 0xFFFFFF80) != 0)
    {
      v10 = (result & 0x3F) << 8;
      v11 = (v10 | (result >> 6) & 0x3F) << 8;
      v12 = (((v11 | (result >> 12) & 0x3F) << 8) | (result >> 18)) - 2122219023;
      v13 = (v11 | (result >> 12)) + 8487393;
      if (WORD1(result))
        v7 = v12;
      else
        v7 = v13;
      if (result <= 0x7FF)
        v7 = (v10 | (result >> 6)) + 33217;
LABEL_10:
      v8 = v4;
      while (1)
      {
        *(_BYTE *)(a1 + v8) = v7 - 1;
        v4 = v8 + 1;
        if (__OFADD__(v8, 1))
          break;
        ++v8;
        v9 = v7 >= 0x100;
        v7 >>= 8;
        if (!v9)
          goto LABEL_2;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    if (result > 0xFF)
    {
      __break(1u);
      goto LABEL_23;
    }
    v7 = (result + 1);
    if ((_BYTE)result != 0xFF)
      goto LABEL_10;
  }
  if ((v4 & 0x8000000000000000) == 0)
  {
    result = static String._tryFromUTF8(_:)();
    *a2 = result;
    a2[1] = v14;
    return result;
  }
LABEL_24:
  __break(1u);
  return result;
}

const __CFString *String.init(contentsOfFile:encoding:)(uint64_t a1, uint64_t a2, const __CFString **a3)
{
  uint64_t v3;
  const __CFString *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  const __CFString *v16;
  const __CFString *v17;
  const __CFString *v18;
  char v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = *a3;
  v24 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)&v21 = a1;
  *((_QWORD *)&v21 + 1) = a2;
  v22 = 0;
  LOBYTE(v23) = 0;
  swift_bridgeObjectRetain();
  v5 = readDataFromFile(path:reportProgress:maxLength:options:attributesToRead:attributes:)(&v21, 1, 0, 1, 0, MEMORY[0x1E0DEE9D8], &v24);
  v7 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v3)
  {
    v8 = specialized String.init<A>(bytes:encoding:)(v5, v7, (uint64_t)v4);
    if (v9)
    {
      v4 = (const __CFString *)v8;
      outlined consume of Data._Representation(v5, v7);
      return v4;
    }
    v4 = CFSTR("NSCocoaErrorDomain");
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v11 = objc_allocWithZone((Class)NSError);
    v12 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v13 = objc_msgSend(v11, sel_initWithDomain_code_userInfo_, v12, 259, _NativeDictionary.bridged()(), (_QWORD)v21, *((_QWORD *)&v21 + 1), v22, v23);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v14 = objc_msgSend(v13, sel_domain);
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v17 = v16;

    if (v15 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) || v17 != v18)
    {
      v4 = v18;
      v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v20 & 1) != 0)
      {
LABEL_12:
        swift_willThrow();
        outlined consume of Data._Representation(v5, v7);
        return v4;
      }
      __break(1u);
    }
    swift_bridgeObjectRelease_n();
    goto LABEL_12;
  }
  return v4;
}

const __CFString *String.init(contentsOf:encoding:)(uint64_t *a1, const __CFString **a2)
{
  uint64_t v2;
  const __CFString *v3;
  id v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  const __CFString *v16;
  const __CFString *v17;
  const __CFString *v18;
  char v20;
  uint64_t v21;
  __int128 v22;

  v3 = *a2;
  v21 = *a1;
  v22 = *(_OWORD *)(a1 + 1);
  v4 = specialized Data.init(contentsOf:options:)((uint64_t)&v21, 0);
  if (!v2)
  {
    v6 = (uint64_t)v4;
    v7 = v5;
    v8 = specialized String.init<A>(bytes:encoding:)((uint64_t)v4, v5, (uint64_t)v3);
    if (v9)
    {
      v3 = (const __CFString *)v8;
      outlined consume of Data._Representation(v6, v7);
      return v3;
    }
    v3 = CFSTR("NSCocoaErrorDomain");
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v11 = objc_allocWithZone((Class)NSError);
    v12 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v13 = objc_msgSend(v11, sel_initWithDomain_code_userInfo_, v12, 259, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v14 = objc_msgSend(v13, sel_domain);
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v17 = v16;

    if (v15 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) || v17 != v18)
    {
      v3 = v18;
      v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v20 & 1) != 0)
      {
LABEL_12:
        swift_willThrow();
        outlined consume of Data._Representation(v6, v7);
        return v3;
      }
      __break(1u);
    }
    swift_bridgeObjectRelease_n();
    goto LABEL_12;
  }
  return v3;
}

uint64_t String.init(contentsOfFile:usedEncoding:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  id v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t result;
  id v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  id v32;
  id v33;
  id v34;
  void *v35;
  id v36;
  char v37;
  unint64_t v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  uint64_t v42;

  v42 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)&v39 = a1;
  *((_QWORD *)&v39 + 1) = a2;
  v40 = 0;
  v41 = 0;
  swift_bridgeObjectRetain();
  v6 = readDataFromFile(path:reportProgress:maxLength:options:attributesToRead:attributes:)(&v39, 0, 0, 1, 0, &outlined read-only object #0 of String.init(contentsOfFile:usedEncoding:), &v42);
  v8 = v7;
  swift_arrayDestroy();
  swift_bridgeObjectRelease();
  v9 = v42;
  if (v3)
    goto LABEL_2;
  if (!*(_QWORD *)(v42 + 16)
    || (v10 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000016, 0x8000000182304550), (v11 & 1) == 0))
  {
LABEL_7:
    outlined copy of Data._Representation(v6, v8);
    specialized String.init(dataOfUnknownEncoding:usedEncoding:)(v6, v8);
    if (v16)
    {
      v4 = v15;
      outlined consume of Data._Representation(v6, v8);
      swift_bridgeObjectRelease();
      return (uint64_t)v4;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v18 = objc_allocWithZone((Class)NSError);
    v19 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v20 = objc_msgSend(v18, sel_initWithDomain_code_userInfo_, v19, 259, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v4 = objc_msgSend(v20, sel_domain);
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v23 = v22;

    if (v21 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) || v23 != v24)
    {
      v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v26 & 1) != 0)
      {
LABEL_17:
        swift_willThrow();
LABEL_18:
        outlined consume of Data._Representation(v6, v8);
LABEL_2:
        swift_bridgeObjectRelease();
        return (uint64_t)v4;
      }
      __break(1u);
    }
    swift_bridgeObjectRelease_n();
    goto LABEL_17;
  }
  v12 = (uint64_t *)(*(_QWORD *)(v9 + 56) + 16 * v10);
  v14 = *v12;
  v13 = v12[1];
  outlined copy of Data._Representation(*v12, v13);
  encodingFromDataForExtendedAttribute(_:)(v14, v13, (uint64_t)&v39);
  if ((BYTE8(v39) & 1) != 0)
  {
    outlined consume of Data._Representation(v14, v13);
    goto LABEL_7;
  }
  v38 = v13;
  v27 = v39;
  v28 = specialized String.init<A>(bytes:encoding:)(v6, v8, v39);
  if (v29)
  {
    v4 = (id)v28;
    outlined consume of Data._Representation(v14, v38);
    outlined consume of Data._Representation(v6, v8);
    swift_bridgeObjectRelease();
    *a3 = v27;
    return (uint64_t)v4;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v30 = objc_allocWithZone((Class)NSError);
  v31 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v32 = objc_msgSend(v30, sel_initWithDomain_code_userInfo_, v31, 259, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v33 = objc_msgSend(v32, sel_domain);
  v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
  v4 = v35;

  if (v34 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v4 == v36)
  {
    swift_bridgeObjectRelease_n();
LABEL_25:
    swift_willThrow();
    outlined consume of Data._Representation(v14, v38);
    goto LABEL_18;
  }
  v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v37 & 1) != 0)
    goto LABEL_25;
  __break(1u);
  return result;
}

uint64_t String.init(contentsOf:usedEncoding:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t result;
  id v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  id v36;
  id v37;
  id v38;
  __int128 *v39;
  __int128 *v40;
  char v41;
  unint64_t v42;
  __int128 v43;
  uint64_t v44;
  char v45;
  uint64_t v46;

  v3 = v2;
  v6 = *(void **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v46 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)&v43 = v6;
  *((_QWORD *)&v43 + 1) = v5;
  v44 = v7;
  v45 = 1;
  swift_retain();
  v8 = v6;
  swift_retain();
  v9 = &outlined read-only object #0 of String.init(contentsOf:usedEncoding:);
  v10 = v3;
  v11 = readDataFromFile(path:reportProgress:maxLength:options:attributesToRead:attributes:)(&v43, 0, 0, 1, 0, &outlined read-only object #0 of String.init(contentsOf:usedEncoding:), &v46);
  v13 = v12;
  swift_arrayDestroy();
  swift_release();
  swift_release();

  v14 = v46;
  if (v10)
    goto LABEL_2;
  if (*(_QWORD *)(v46 + 16))
  {
    v15 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000016, 0x8000000182304550);
    if ((v16 & 1) != 0)
    {
      v17 = (uint64_t *)(*(_QWORD *)(v14 + 56) + 16 * v15);
      v19 = *v17;
      v18 = v17[1];
      outlined copy of Data._Representation(*v17, v18);
      encodingFromDataForExtendedAttribute(_:)(v19, v18, (uint64_t)&v43);
      if ((BYTE8(v43) & 1) == 0)
      {
        v42 = v18;
        v31 = v43;
        v32 = specialized String.init<A>(bytes:encoding:)(v11, v13, v43);
        if (v33)
        {
          v9 = (__int128 *)v32;
          outlined consume of Data._Representation(v19, v42);
          outlined consume of Data._Representation(v11, v13);
          swift_bridgeObjectRelease();
          *a2 = v31;
          return (uint64_t)v9;
        }
        static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
        v34 = objc_allocWithZone((Class)NSError);
        v35 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v36 = objc_msgSend(v34, sel_initWithDomain_code_userInfo_, v35, 259, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v37 = objc_msgSend(v36, sel_domain);
        v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
        v9 = v39;

        if (v38 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v9 == v40)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          result = swift_bridgeObjectRelease();
          if ((v41 & 1) == 0)
            goto LABEL_24;
        }
        swift_willThrow();
        outlined consume of Data._Representation(v19, v42);
        goto LABEL_15;
      }
      outlined consume of Data._Representation(v19, v18);
    }
  }
  outlined copy of Data._Representation(v11, v13);
  specialized String.init(dataOfUnknownEncoding:usedEncoding:)(v11, v13);
  if (v21)
  {
    v9 = v20;
    outlined consume of Data._Representation(v11, v13);
    swift_bridgeObjectRelease();
    return (uint64_t)v9;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v23 = objc_allocWithZone((Class)NSError);
  v24 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v25 = objc_msgSend(v23, sel_initWithDomain_code_userInfo_, v24, 259, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v9 = (__int128 *)objc_msgSend(v25, sel_domain);
  v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v28 = v27;

  if (v26 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v28 == v29)
  {
    swift_bridgeObjectRelease_n();
LABEL_14:
    swift_willThrow();
LABEL_15:
    outlined consume of Data._Representation(v11, v13);
LABEL_2:
    swift_bridgeObjectRelease();
    return (uint64_t)v9;
  }
  v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v30 & 1) != 0)
    goto LABEL_14;
  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

unint64_t extendedAttributeData(for:)(unint64_t *a1)
{
  CFStringEncoding v1;
  const __CFString *v2;
  __CFString *v3;
  __CFString *v4;
  Swift::String v5;
  Swift::String v6;
  unint64_t v7;
  Swift::String v8;
  uint64_t v10;
  unint64_t v11;

  v1 = CFStringConvertNSStringEncodingToEncoding(*a1);
  if (v1 == -1)
    return 0;
  v2 = (id)CFStringConvertEncodingToIANACharSetName(v1);
  if (v2)
  {
    v3 = (__CFString *)v2;
    v11 = 0xE000000000000000;
    type metadata accessor for CFStringRef(0);
    v4 = v3;
    _print_unlocked<A, B>(_:_:)();
    v5._countAndFlagsBits = 59;
    v5._object = (void *)0xE100000000000000;
    String.append(_:)(v5);
    v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v10 = 4;
    v7 = String.data(using:allowLossyConversion:)(&v10, 0, 0, 0xE000000000000000);
    swift_bridgeObjectRelease();

  }
  else
  {
    v11 = 0xE100000000000000;
    v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v10 = 4;
    v7 = String.data(using:allowLossyConversion:)(&v10, 0, 0x3BuLL, 0xE100000000000000);
    swift_bridgeObjectRelease();
  }
  return v7;
}

unint64_t StringProtocol.write(to:atomically:encoding:)(uint64_t a1, uint64_t a2, id *a3)
{
  uint64_t v3;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t result;
  uint64_t v25;
  unint64_t v26;
  uint64_t inited;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t *v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  _QWORD v43[5];
  char v44;
  uint64_t v45;
  _QWORD *v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  id v55;

  v6 = *(void **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *a3;
  v55 = *a3;
  v9 = StringProtocol.data(using:allowLossyConversion:)((uint64_t *)&v55, 0);
  if (v10 >> 60 == 15)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v11 = objc_allocWithZone((Class)NSError);
    v12 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v13 = objc_msgSend(v11, sel_initWithDomain_code_userInfo_, v12, 517, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v8 = objc_msgSend(v13, sel_domain);
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v16 = v15;

    if (v14 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v16 == v17)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v5 = v17;
      v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v9 = swift_bridgeObjectRelease();
      if ((v7 & 1) == 0)
      {
        __break(1u);
        goto LABEL_8;
      }
    }
    return swift_willThrow();
  }
LABEL_8:
  v19 = v9;
  v20 = v10;
  v52 = a2;
  v53 = v6;
  v54 = v3;
  v55 = v8;
  v21 = extendedAttributeData(for:)((unint64_t *)&v55);
  if (v22 >> 60 == 15)
  {
    v23 = (_QWORD *)MEMORY[0x1E0DEE9E0];
LABEL_15:
    MEMORY[0x1E0C80A78](v21);
    v43[2] = v53;
    v43[3] = v5;
    v43[4] = v7;
    v44 = 1;
    v45 = v41;
    v46 = v23;
    v47 = 0;
    swift_retain();
    v42 = v53;
    swift_retain();
    specialized Data._Representation.withUnsafeBytes<A>(_:)((uint64_t)_s10Foundation11writeToFile4path4data7options10attributes14reportProgressyAA9PathOrURLO_AA4DataVSo20NSDataWritingOptionsVSDySSAKGSbtKFySWKXEfU_TA_0, (uint64_t)v43, v19, v20);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();

    return outlined consume of Data?(v19, v20);
  }
  v25 = v21;
  v26 = v22;
  v49 = v19;
  v50 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Data)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18205C850;
  *(_QWORD *)(inited + 32) = 0xD000000000000016;
  *(_QWORD *)(inited + 40) = 0x8000000182304550;
  *(_QWORD *)(inited + 48) = v25;
  *(_QWORD *)(inited + 56) = v26;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
  v23 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v28 = *(_QWORD *)(inited + 32);
  v29 = *(_QWORD *)(inited + 40);
  v30 = *(_QWORD *)(inited + 48);
  v31 = *(_QWORD *)(inited + 56);
  v48 = v25;
  v32 = v25;
  v33 = v30;
  outlined copy of Data?(v32, v26);
  swift_retain();
  swift_bridgeObjectRetain();
  v51 = v31;
  outlined copy of Data._Representation(v33, v31);
  result = specialized __RawDictionaryStorage.find<A>(_:)(v28, v29);
  if ((v34 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v23[(result >> 6) + 8] |= 1 << result;
    v35 = (uint64_t *)(v23[6] + 16 * result);
    *v35 = v28;
    v35[1] = v29;
    v36 = (uint64_t *)(v23[7] + 16 * result);
    v5 = v50;
    v37 = v51;
    *v36 = v33;
    v36[1] = v37;
    v38 = v23[2];
    v39 = __OFADD__(v38, 1);
    v40 = v38 + 1;
    if (!v39)
    {
      v23[2] = v40;
      swift_release();
      swift_bridgeObjectRelease();
      v21 = outlined consume of Data?(v48, v26);
      v19 = v49;
      goto LABEL_15;
    }
  }
  __break(1u);
  return result;
}

uint64_t _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SuSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Su_SsTG5SiTf1cn_n(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, int64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t result;
  char v13;
  _QWORD v14[2];
  char v15;

  if ((a4 & 0x1000000000000000) != 0)
  {
    result = 0;
    goto LABEL_8;
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    v11 = v14;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    v11 = (_QWORD *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v11 = (_QWORD *)_StringObject.sharedUTF8.getter();
  }
  result = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5SuSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5H15VGXEfU_Su_SsTG5SiTf1nnc_nTf4xnn_n((uint64_t)v11, a1, a2, a3, a4, a5);
  if (!v5)
  {
    v15 = v13 & 1;
LABEL_8:
    LOBYTE(v14[0]) = (a4 & 0x1000000000000000) != 0;
  }
  return result;
}

void (*specialized String.init<A, B>(_validating:as:)(uint64_t a1, uint64_t a2, uint64_t a3))(char *, _QWORD)
{
  uint64_t v5;
  char *v6;
  unsigned int v7;
  unsigned __int8 v8;
  uint64_t v9;
  char v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned __int8 v14;
  uint64_t v15;
  char v16;
  int v17;
  unsigned __int8 v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t v25;
  BOOL v26;
  char *v27;
  uint64_t v28;
  char *v29;
  void (*result)(char *, _QWORD);
  uint64_t v31;
  char v32;
  Swift::UInt8 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37[32];
  unsigned int v38;
  unsigned __int8 v39;

  v5 = a1;
  v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (a2 - a1) & ~((a2 - a1) >> 63), 0, MEMORY[0x1E0DEE9D8]);
  v7 = 0;
  v8 = 0;
  v38 = 0;
  v39 = 0;
  v9 = MEMORY[0x1E0DEE458];
  v10 = 1;
  while (v8)
  {
    if ((v7 & 0x80) != 0)
      goto LABEL_8;
    lazy protocol witness table accessor for type Unicode.UTF8.ForwardParser and conformance Unicode.UTF8.ForwardParser();
    result = (void (*)(char *, _QWORD))Locale.Language.components.modify();
    v32 = *(_BYTE *)(v31 + 4);
    if (!v32)
    {
      __break(1u);
      return result;
    }
    *(_DWORD *)v31 >>= 8;
    *(_BYTE *)(v31 + 4) = v32 - 8;
    result(v37, 0);
    v13 = (v7 + 1);
    v9 = MEMORY[0x1E0DEE458];
    if ((_BYTE)v7 != 0xFF)
      goto LABEL_36;
LABEL_2:
    v8 = v39;
    v7 = v38;
  }
  if (v5 == a2)
    goto LABEL_50;
  v11 = *(char *)(a3 + v5);
  v12 = *(unsigned __int8 *)(a3 + v5++);
  if ((v11 & 0x80000000) == 0)
  {
    v13 = v12 + 1;
LABEL_36:
    v23 = *((_QWORD *)v6 + 2);
    do
    {
      v24 = v13;
      while (1)
      {
        v25 = *((_QWORD *)v6 + 3);
        if (v23 >= v25 >> 1)
        {
          v27 = v6;
          v28 = v9;
          v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v25 > 1), v23 + 1, 1, v27);
          v9 = v28;
          v6 = v29;
        }
        v13 = v24 >> 8;
        *((_QWORD *)v6 + 2) = v23 + 1;
        v6[v23 + 32] = v24 - 1;
        if ((v10 & ((char)(v24 - 1) < 0)) == 1)
          break;
        ++v23;
        v26 = v24 >= 0x100;
        v24 >>= 8;
        if (!v26)
          goto LABEL_2;
      }
      v10 = 0;
      ++v23;
    }
    while (v24 >= 0x100);
    goto LABEL_2;
  }
  v7 = v7 & 0xFFFFFF00 | v12;
  v8 = 8;
LABEL_8:
  if (v5 == a2)
  {
    v14 = v8;
    v5 = a2;
    goto LABEL_24;
  }
  v15 = v5 + 1;
  v7 = (*(unsigned __int8 *)(a3 + v5) << v8) | ((-255 << v8) - 1) & v7;
  v14 = v8 + 8;
  if ((v8 + 8) > 0x1Fu)
    goto LABEL_23;
  if (v15 != a2)
  {
    v16 = v8 + 8;
    v17 = *(unsigned __int8 *)(a3 + v15);
    v15 = v5 + 2;
    v7 = ((-255 << v14) - 1) & v7 | (v17 << v14);
    v18 = v8 + 16;
    if ((v8 + 8) < 0x18u)
    {
      if (v15 == a2)
      {
LABEL_16:
        v14 = v18;
        v5 = a2;
        goto LABEL_24;
      }
      v19 = *(unsigned __int8 *)(a3 + v15);
      v15 = v5 + 3;
      v7 = ((-65280 << v16) - 1) & v7 | (v19 << v18);
      v18 = v8 + 24;
      if ((v8 + 8) <= 0xFu)
      {
        if (v15 == a2)
          goto LABEL_16;
        v20 = *(unsigned __int8 *)(a3 + v15);
        v15 = v5 + 4;
        v7 = ((-16711680 << v16) - 1) & v7 | (v20 << v18);
        v18 = v8 + 32;
        if (v8 >= 0xF8u)
        {
          if (v15 == a2)
            goto LABEL_16;
          v21 = *(unsigned __int8 *)(a3 + v15);
          v15 = v5 + 5;
          v7 = ((0x1000000 << v16) - 1) & v7 | (v21 << v18);
          v18 = v16 + 32;
        }
      }
    }
    v14 = v18;
LABEL_23:
    v5 = v15;
LABEL_24:
    if ((v7 & 0xC0E0) == 0x80C0)
    {
      if ((v7 & 0x1E) == 0)
        goto LABEL_49;
      v22 = 16;
    }
    else if ((v7 & 0xC0C0F0) == 0x8080E0)
    {
      if ((v7 & 0x200F) == 0 || (v7 & 0x200F) == 0x200D)
        goto LABEL_49;
      v22 = 24;
    }
    else
    {
      if ((v7 & 0xC0C0C0F8) != 0x808080F0 || (v7 & 0x3007) == 0 || __rev16(v7 & 0x3007) > 0x400)
      {
LABEL_49:
        v33 = Unicode.UTF8.ForwardParser._invalidLength()();
        v38 = (unint64_t)v7 >> ((8 * v33) & 0x38);
        v39 = v14 - 8 * v33;
        swift_bridgeObjectRelease();
        return 0;
      }
      v22 = 32;
    }
    v38 = (unint64_t)v7 >> v22;
    v39 = v14 - v22;
    v13 = ((1 << (v22 >> 1) << (v22 >> 1)) - 1) & (v7 + 16843009);
    if (v13)
      goto LABEL_36;
    goto LABEL_2;
  }
  v5 = a2;
  if (v8 != 0xF8)
    goto LABEL_24;
LABEL_50:
  swift_bridgeObjectRetain();
  v34 = static String._tryFromUTF8(_:)();
  v36 = v35;
  swift_bridgeObjectRelease_n();
  if (v36)
    return (void (*)(char *, _QWORD))v34;
  else
    return 0;
}

uint64_t _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5SuSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5H15VGXEfU_Su_SsTG5SiTf1nnc_nTf4xnn_n(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, int64_t a6)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  unsigned __int8 v31;
  BOOL v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  unsigned __int8 *v36;
  uint64_t v37;
  unsigned int v38;
  char v39;
  unint64_t v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  unsigned int v45;
  char v46;
  unint64_t v47;
  unsigned __int8 v48;

  v10 = a2;
  v11 = result;
  v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0)
    LOBYTE(v12) = 1;
  v13 = 4 << v12;
  v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      v15 = a2 >> 16;
      if (v14 != v13)
        goto LABEL_6;
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0)
    v16 = HIBYTE(a5) & 0xF;
  if (v16 < a2 >> 16)
    goto LABEL_96;
  result = String.UTF8View._foreignDistance(from:to:)();
  v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, a4, a5);
    v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0)
      goto LABEL_8;
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0)
    v17 = a4 & 0xFFFFFFFFFFFFLL;
  if (v17 < v10 >> 16)
    goto LABEL_92;
  if (v17 < a3 >> 16)
  {
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  result = String.UTF8View._foreignDistance(from:to:)();
LABEL_21:
  v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_91;
  }
  if (v18 < v15)
  {
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11)
    v19 = 0;
  v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        v33 = a6 + 48;
        v34 = a6 + 55;
        v35 = a6 + 87;
        if (a6 > 10)
        {
          v33 = 58;
        }
        else
        {
          v35 = 97;
          v34 = 65;
        }
        if (v19)
        {
          v24 = 0;
          v36 = v19 + 1;
          v37 = result - 1;
          do
          {
            v38 = *v36;
            if (v38 < 0x30 || v38 >= v33)
            {
              if (v38 < 0x41 || v38 >= v34)
              {
                v29 = 0;
                if (v38 < 0x61 || v38 >= v35)
                  return v29;
                v39 = -87;
              }
              else
              {
                v39 = -55;
              }
            }
            else
            {
              v39 = -48;
            }
            if (!is_mul_ok(v24, a6))
              return 0;
            v40 = v24 * a6;
            v41 = v38 + v39;
            v32 = __CFADD__(v40, v41);
            v24 = v40 + v41;
            if (v32)
              return 0;
            ++v36;
            --v37;
          }
          while (v37);
          return v24;
        }
        return 0;
      }
      return 0;
    }
    goto LABEL_95;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      v42 = a6 + 48;
      v43 = a6 + 55;
      v44 = a6 + 87;
      if (a6 > 10)
      {
        v42 = 58;
      }
      else
      {
        v44 = 97;
        v43 = 65;
      }
      if (v19)
      {
        v24 = 0;
        while (1)
        {
          v45 = *v19;
          if (v45 < 0x30 || v45 >= v42)
          {
            if (v45 < 0x41 || v45 >= v43)
            {
              v29 = 0;
              if (v45 < 0x61 || v45 >= v44)
                return v29;
              v46 = -87;
            }
            else
            {
              v46 = -55;
            }
          }
          else
          {
            v46 = -48;
          }
          if (!is_mul_ok(v24, a6))
            return 0;
          v47 = v24 * a6;
          v48 = v45 + v46;
          v32 = __CFADD__(v47, v48);
          v24 = v47 + v48;
          if (v32)
            return 0;
          ++v19;
          if (!--result)
            return v24;
        }
      }
      return 0;
    }
    return 0;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      v21 = a6 + 48;
      v22 = a6 + 55;
      v23 = a6 + 87;
      if (a6 > 10)
      {
        v21 = 58;
      }
      else
      {
        v23 = 97;
        v22 = 65;
      }
      if (v19)
      {
        v24 = 0;
        v25 = v19 + 1;
        v26 = result - 1;
        while (1)
        {
          v27 = *v25;
          if (v27 < 0x30 || v27 >= v21)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              v29 = 0;
              if (v27 < 0x61 || v27 >= v23)
                return v29;
              v28 = -87;
            }
            else
            {
              v28 = -55;
            }
          }
          else
          {
            v28 = -48;
          }
          if (!is_mul_ok(v24, a6))
            return 0;
          v30 = v24 * a6;
          v31 = v27 + v28;
          v32 = v30 >= v31;
          v24 = v30 - v31;
          if (!v32)
            return 0;
          ++v25;
          if (!--v26)
            return v24;
        }
      }
      return 0;
    }
    return 0;
  }
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
  return result;
}

void specialized String.init(dataOfUnknownEncoding:usedEncoding:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_181D55B04()
{
  uint64_t *v0;
  unint64_t v1;
  uint64_t v2;
  char v3;
  unsigned __int8 v4;
  char v5;
  char v6;
  char v7;
  char v8;
  unsigned __int8 v9;
  char v10;
  unsigned __int8 v11;
  char v12;
  char v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (BYTE6(v1) < 4uLL)
  {
    if (BYTE6(v1) < 2uLL)
    {
LABEL_18:
      v15 = 4;
      goto LABEL_19;
    }
LABEL_12:
    if ((v1 & 0x1000000000000) == 0)
    {
      if ((Data.subscript.getter(0, v2, v1), v11 == 254) && (Data.subscript.getter(1, v2, v1), v12 == -1)
        || (Data.subscript.getter(0, v2, v1), v13 == -1) && (Data.subscript.getter(1, v2, v1), v14 == 254))
      {
        v15 = 10;
        goto LABEL_19;
      }
    }
    goto LABEL_18;
  }
  Data.subscript.getter(0, v2, v1);
  if (v3 != -1
    || (Data.subscript.getter(1, v2, v1), v4 != 254)
    || (Data.subscript.getter(2, v2, v1), v5)
    || (Data.subscript.getter(3, v2, v1), v6))
  {
    Data.subscript.getter(0, v2, v1);
    if (v7)
      goto LABEL_12;
    Data.subscript.getter(1, v2, v1);
    if (v8)
      goto LABEL_12;
    Data.subscript.getter(3, v2, v1);
    if (v9 != 254)
      goto LABEL_12;
    Data.subscript.getter(4, v2, v1);
    if (v10 != -1)
      goto LABEL_12;
  }
  v15 = 2348810496;
LABEL_19:
  v16 = specialized String.init<A>(bytes:encoding:)(v2, v1, v15);
  v18 = v17;
  outlined consume of Data._Representation(v2, v1);
  if (v18)
    *v0 = v15;
  return v16;
}

uint64_t _s10Foundation11writeToFile4path4data7options10attributes14reportProgressyAA9PathOrURLO_AA4DataVSo20NSDataWritingOptionsVSDySSAKGSbtKFySWKXEfU_TA_0(uint64_t a1, int64_t a2)
{
  return partial apply for closure #1 in writeToFile(path:data:options:attributes:reportProgress:)(a1, a2);
}

void closure #1 in TimeZoneCache.reset()(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  a1[7] = -1;
  swift_unknownObjectRetain();
  TimeZoneCache.State.check()();
  *a2 = v3;
  a2[1] = v4;
}

uint64_t closure #1 in TimeZoneCache.setTimeZoneAbbreviations(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = a2;
  return result;
}

ValueMetadata *type metadata accessor for TimeZoneCache()
{
  return &type metadata for TimeZoneCache;
}

uint64_t destroy for TimeZoneCache.State(id *a1)
{
  swift_unknownObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TimeZoneCache.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v3;
  v4 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v4;
  v5 = *(void **)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v5;
  v7 = *(void **)(a2 + 88);
  v6 = *(void **)(a2 + 96);
  *(_QWORD *)(a1 + 88) = v7;
  *(_QWORD *)(a1 + 96) = v6;
  v8 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v8;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_unknownObjectRetain();
  swift_retain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = v5;
  v10 = v7;
  v11 = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for TimeZoneCache.State(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;

  v4 = a2[1];
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = v4;
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  v5 = a2[4];
  a1[3] = a2[3];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[4] = v5;
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = (void *)a1[10];
  v7 = (void *)a2[10];
  a1[10] = v7;
  v8 = v7;

  v9 = (void *)a1[11];
  v10 = (void *)a2[11];
  a1[11] = v10;
  v11 = v10;

  v12 = (void *)a1[12];
  v13 = (void *)a2[12];
  a1[12] = v13;
  v14 = v13;

  a1[13] = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[14] = a2[14];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[15] = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for TimeZoneCache.State(uint64_t a1, uint64_t a2)
{
  void *v4;

  swift_unknownObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease();

  v4 = *(void **)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);

  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TimeZoneCache.State(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 128))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TimeZoneCache.State(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 128) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 128) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t Predicate.variable.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD **a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t TupleTypeMetadata;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t result;
  int *v22;
  uint64_t v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;

  v7 = *(_QWORD *)(a1 + 16);
  if (v7 == 1)
  {
    TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable(0, *(_QWORD *)(*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFELL), a2, a3);
    v9 = TupleTypeMetadata;
  }
  else
  {
    MEMORY[0x1E0C80A78](a1);
    if (v7)
    {
      v13 = (uint64_t *)(*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL);
      v14 = (uint64_t *)((char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
      v15 = v7;
      do
      {
        v16 = *v13++;
        *v14++ = type metadata accessor for PredicateExpressions.Variable(255, v16, v10, v11);
        --v15;
      }
      while (v15);
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    v9 = TupleTypeMetadata;
  }
  v17 = MEMORY[0x1E0C80A78](TupleTypeMetadata);
  v19 = (char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v20 + 16))(v19, v4 + *(int *)(a1 + 36), v9, v17);
  if (v7)
  {
    v22 = (int *)(v9 + 32);
    v23 = v7;
    do
    {
      if (v7 == 1)
        v24 = 0;
      else
        v24 = *v22;
      v25 = *a4++;
      *v25 = *(_QWORD *)&v19[v24];
      v22 += 4;
      --v23;
    }
    while (v23);
  }
  return result;
}

unint64_t static Predicate.true.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v8;
  uint64_t TupleTypeMetadata;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t result;
  uint64_t v27;

  v8 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFFELL);
  if (a1 == 1)
  {
    TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable(0, *v8, a3, a4);
    v10 = *(_QWORD *)(TupleTypeMetadata - 8);
    MEMORY[0x1E0C80A78](TupleTypeMetadata);
    v13 = (char *)&v27 - v12;
LABEL_7:
    if (one-time initialization token for nextID != -1)
      swift_once();
    v22 = 0;
    do
    {
      if (a1 == 1)
        v23 = 0;
      else
        v23 = *(_DWORD *)(TupleTypeMetadata + 16 * v22 + 32);
      do
        v24 = __ldxr((unint64_t *)&static PredicateExpressions.VariableID.nextID);
      while (__stxr(v24 + 1, (unint64_t *)&static PredicateExpressions.VariableID.nextID));
      *(_QWORD *)&v13[v23] = v24;
      ++v22;
    }
    while (v22 != a1);
    goto LABEL_15;
  }
  MEMORY[0x1E0C80A78](a1);
  v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0;
  if (a1)
  {
    v18 = (uint64_t *)((char *)&v27 - v17);
    v19 = a1;
    do
    {
      v20 = *v8++;
      *v18++ = type metadata accessor for PredicateExpressions.Variable(255, v20, v14, v15);
      --v19;
    }
    while (v19);
  }
  TupleTypeMetadata = swift_getTupleTypeMetadata();
  v10 = *(_QWORD *)(TupleTypeMetadata - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata);
  v13 = (char *)&v27 - v21;
  if (a1)
    goto LABEL_7;
LABEL_15:
  v25 = type metadata accessor for Predicate(0, a1, a2, v11);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a5 + *(int *)(v25 + 36), v13, TupleTypeMetadata);
  *(_QWORD *)(a5 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Value<Bool>);
  result = lazy protocol witness table accessor for type PredicateExpressions.Value<Bool> and conformance <A> PredicateExpressions.Value<A>();
  *(_QWORD *)(a5 + 32) = result;
  *(_BYTE *)a5 = 1;
  return result;
}

unint64_t lazy protocol witness table accessor for type PredicateExpressions.Value<Bool> and conformance <A> PredicateExpressions.Value<A>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type PredicateExpressions.Value<Bool> and conformance <A> PredicateExpressions.Value<A>;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.Value<Bool> and conformance <A> PredicateExpressions.Value<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PredicateExpressions.Value<Bool>);
    v2[0] = MEMORY[0x1E0DEAFC0];
    v2[1] = MEMORY[0x1E0DEAFA8];
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for <A> PredicateExpressions.Value<A>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.Value<Bool> and conformance <A> PredicateExpressions.Value<A>);
  }
  return result;
}

unint64_t static Predicate.false.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v8;
  uint64_t TupleTypeMetadata;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t result;
  uint64_t v27;

  v8 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFFELL);
  if (a1 == 1)
  {
    TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable(0, *v8, a3, a4);
    v10 = *(_QWORD *)(TupleTypeMetadata - 8);
    MEMORY[0x1E0C80A78](TupleTypeMetadata);
    v13 = (char *)&v27 - v12;
LABEL_7:
    if (one-time initialization token for nextID != -1)
      swift_once();
    v22 = 0;
    do
    {
      if (a1 == 1)
        v23 = 0;
      else
        v23 = *(_DWORD *)(TupleTypeMetadata + 16 * v22 + 32);
      do
        v24 = __ldxr((unint64_t *)&static PredicateExpressions.VariableID.nextID);
      while (__stxr(v24 + 1, (unint64_t *)&static PredicateExpressions.VariableID.nextID));
      *(_QWORD *)&v13[v23] = v24;
      ++v22;
    }
    while (v22 != a1);
    goto LABEL_15;
  }
  MEMORY[0x1E0C80A78](a1);
  v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0;
  if (a1)
  {
    v18 = (uint64_t *)((char *)&v27 - v17);
    v19 = a1;
    do
    {
      v20 = *v8++;
      *v18++ = type metadata accessor for PredicateExpressions.Variable(255, v20, v14, v15);
      --v19;
    }
    while (v19);
  }
  TupleTypeMetadata = swift_getTupleTypeMetadata();
  v10 = *(_QWORD *)(TupleTypeMetadata - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata);
  v13 = (char *)&v27 - v21;
  if (a1)
    goto LABEL_7;
LABEL_15:
  v25 = type metadata accessor for Predicate(0, a1, a2, v11);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a5 + *(int *)(v25 + 36), v13, TupleTypeMetadata);
  *(_QWORD *)(a5 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Value<Bool>);
  result = lazy protocol witness table accessor for type PredicateExpressions.Value<Bool> and conformance <A> PredicateExpressions.Value<A>();
  *(_QWORD *)(a5 + 32) = result;
  *(_BYTE *)a5 = 0;
  return result;
}

uint64_t Sequence.filter(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[16];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v7 = MEMORY[0x1E0C80A78](a1);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v9 + 16))(&v11[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)], v3, a2, v7);
  v12 = a2;
  v13 = a3;
  v14 = a1;
  return Sequence.filter(_:)();
}

uint64_t closure #1 in Sequence.filter(_:)(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v13;
  char *v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v6 = (char *)&v13 - v5;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16))((char *)&v13 - v5, a1, AssociatedTypeWitness, v4);
  v13 = AssociatedTypeWitness;
  v14 = v6;
  v8 = type metadata accessor for Predicate(0, 1, (uint64_t)&v13, v7);
  v11 = Predicate.evaluate(_:)((uint64_t *)&v14, v8, v9, v10);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, AssociatedTypeWitness);
  return v11 & 1;
}

uint64_t partial apply for closure #1 in Sequence.filter(_:)(uint64_t a1)
{
  return closure #1 in Sequence.filter(_:)(a1) & 1;
}

_QWORD *initializeBufferWithCopyOfBuffer for Predicate(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t TupleTypeMetadata;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    v8 = (**(uint64_t (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    v11 = *(int *)(a3 + 36);
    v12 = (char *)v4 + v11;
    v13 = (uint64_t)a2 + v11;
    v14 = *(_QWORD *)(a3 + 16);
    if (v14 == 1)
    {
      TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable(0, *(_QWORD *)(*(_QWORD *)(a3 + 24) & 0xFFFFFFFFFFFFFELL), v9, v10);
    }
    else
    {
      MEMORY[0x1E0C80A78](v8);
      if (v14)
      {
        v20 = (uint64_t *)(*(_QWORD *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL);
        v21 = (uint64_t *)((char *)&v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
        v22 = v14;
        do
        {
          v23 = *v20++;
          *v21++ = type metadata accessor for PredicateExpressions.Variable(255, v23, v17, v18);
          --v22;
        }
        while (v22);
      }
      TupleTypeMetadata = swift_getTupleTypeMetadata();
    }
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(TupleTypeMetadata - 8) + 16))(v12, v13);
  }
  return v4;
}

uint64_t initializeWithCopy for Predicate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t TupleTypeMetadata;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  v7 = (**(uint64_t (***)(void))(v6 - 8))();
  v10 = *(int *)(a3 + 36);
  v11 = *(_QWORD *)(a3 + 16);
  if (v11 == 1)
  {
    TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable(0, *(_QWORD *)(*(_QWORD *)(a3 + 24) & 0xFFFFFFFFFFFFFELL), v8, v9);
  }
  else
  {
    MEMORY[0x1E0C80A78](v7);
    if (v11)
    {
      v16 = (uint64_t *)(*(_QWORD *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL);
      v17 = (uint64_t *)((char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
      v18 = v11;
      do
      {
        v19 = *v16++;
        *v17++ = type metadata accessor for PredicateExpressions.Variable(255, v19, v13, v14);
        --v18;
      }
      while (v18);
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata - 8) + 16))(a1 + v10, a2 + v10);
  return a1;
}

uint64_t *assignWithCopy for Predicate(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t TupleTypeMetadata;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v6 = __swift_assign_boxed_opaque_existential_1(a1, a2);
  v9 = *(int *)(a3 + 36);
  v10 = *(_QWORD *)(a3 + 16);
  if (v10 == 1)
  {
    TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable(0, *(_QWORD *)(*(_QWORD *)(a3 + 24) & 0xFFFFFFFFFFFFFELL), v7, v8);
  }
  else
  {
    MEMORY[0x1E0C80A78](v6);
    if (v10)
    {
      v15 = (uint64_t *)(*(_QWORD *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL);
      v16 = (uint64_t *)((char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
      v17 = v10;
      do
      {
        v18 = *v15++;
        *v16++ = type metadata accessor for PredicateExpressions.Variable(255, v18, v12, v13);
        --v17;
      }
      while (v17);
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  (*(void (**)(char *, char *))(*(_QWORD *)(TupleTypeMetadata - 8) + 24))((char *)a1 + v9, (char *)a2 + v9);
  return a1;
}

uint64_t initializeWithTake for Predicate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t TupleTypeMetadata;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = *(int *)(a3 + 36);
  v8 = *(_QWORD *)(a3 + 16);
  if (v8 == 1)
  {
    TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable(0, *(_QWORD *)(*(_QWORD *)(a3 + 24) & 0xFFFFFFFFFFFFFELL), a3, a4);
  }
  else
  {
    MEMORY[0x1E0C80A78](a1);
    if (v8)
    {
      v13 = (uint64_t *)(*(_QWORD *)(v10 + 24) & 0xFFFFFFFFFFFFFFFELL);
      v14 = (uint64_t *)((char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
      v15 = v8;
      do
      {
        v16 = *v13++;
        *v14++ = type metadata accessor for PredicateExpressions.Variable(255, v16, v10, v11);
        --v15;
      }
      while (v15);
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata - 8) + 32))(a1 + v7, a2 + v7);
  return a1;
}

uint64_t assignWithTake for Predicate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t TupleTypeMetadata;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v6 = __swift_destroy_boxed_opaque_existential_1(a1);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v10 = *(int *)(a3 + 36);
  v11 = *(_QWORD *)(a3 + 16);
  if (v11 == 1)
  {
    TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable(0, *(_QWORD *)(*(_QWORD *)(a3 + 24) & 0xFFFFFFFFFFFFFELL), v7, v8);
  }
  else
  {
    MEMORY[0x1E0C80A78](v6);
    if (v11)
    {
      v16 = (uint64_t *)(*(_QWORD *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL);
      v17 = (uint64_t *)((char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
      v18 = v11;
      do
      {
        v19 = *v16++;
        *v17++ = type metadata accessor for PredicateExpressions.Variable(255, v19, v13, v14);
        --v18;
      }
      while (v18);
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata - 8) + 40))(a1 + v10, a2 + v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for Predicate()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_181D56EF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v9;
  uint64_t TupleTypeMetadata;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v5 = *(_QWORD *)(a1 + 24);
    if (v5 >= 0xFFFFFFFF)
      LODWORD(v5) = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = *(_QWORD *)(a3 + 16);
    if (v9 == 1)
    {
      TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable(0, *(_QWORD *)(*(_QWORD *)(a3 + 24) & 0xFFFFFFFFFFFFFELL), a3, a4);
    }
    else
    {
      MEMORY[0x1E0C80A78](a1);
      if (v9)
      {
        v14 = (uint64_t *)(*(_QWORD *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL);
        v15 = (uint64_t *)((char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
        v16 = v9;
        do
        {
          v17 = *v14++;
          *v15++ = type metadata accessor for PredicateExpressions.Variable(255, v17, v11, v12);
          --v16;
        }
        while (v16);
      }
      TupleTypeMetadata = swift_getTupleTypeMetadata();
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata - 8) + 48))(a1 + *(int *)(a3 + 36), a2);
  }
}

uint64_t sub_181D57014(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t TupleTypeMetadata;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = result;
  if ((_DWORD)a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = *(_QWORD *)(a4 + 16);
    if (v7 == 1)
    {
      TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable(0, *(_QWORD *)(*(_QWORD *)(a4 + 24) & 0xFFFFFFFFFFFFFELL), a3, a4);
    }
    else
    {
      MEMORY[0x1E0C80A78](result);
      if (v7)
      {
        v12 = (uint64_t *)(*(_QWORD *)(a4 + 24) & 0xFFFFFFFFFFFFFFFELL);
        v13 = (uint64_t *)((char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
        v14 = v7;
        do
        {
          v15 = *v12++;
          *v13++ = type metadata accessor for PredicateExpressions.Variable(255, v15, v9, v10);
          --v14;
        }
        while (v14);
      }
      TupleTypeMetadata = swift_getTupleTypeMetadata();
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata - 8) + 56))(v5 + *(int *)(a4 + 36), a2, a2);
  }
  return result;
}

ValueMetadata *type metadata accessor for PredicateExpressions()
{
  return &type metadata for PredicateExpressions;
}

uint64_t one-time initialization function for IDNScriptAllowedList()
{
  uint64_t result;

  result = closure #1 in variable initialization expression of static URL.UnicodeLookalikeTable.IDNScriptAllowedList();
  static URL.UnicodeLookalikeTable.IDNScriptAllowedList = result;
  return result;
}

uint64_t closure #1 in variable initialization expression of static URL.UnicodeLookalikeTable.IDNScriptAllowedList()
{
  unsigned int v0;
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  __int128 *v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  __int128 *v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  __int128 v23;
  uint64_t v24;

  v24 = MEMORY[0x1E0DEE9E8];
  v23 = xmmword_182152C60;
  v0 = MEMORY[0x186DAA07C](4106, &v23);
  if (v0 < 0xC8)
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v0);
  v23 = xmmword_182152C70;
  v1 = MEMORY[0x186DAA07C](4106, &v23);
  if (v1 < 0xC8)
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v1);
  v23 = xmmword_182152C80;
  v2 = MEMORY[0x186DAA07C](4106, &v23);
  if (v2 < 0xC8)
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v2);
  v23 = xmmword_182152C90;
  v3 = MEMORY[0x186DAA07C](4106, &v23);
  if (v3 < 0xC8)
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v3);
  v23 = xmmword_182152CA0;
  v4 = MEMORY[0x186DAA07C](4106, &v23);
  if (v4 < 0xC8)
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v4);
  if (((unint64_t)"n3URL21UnicodeLookalikeTable" & 0x1000000000000000) != 0)
  {
    _StringGuts._slowWithCString<A>(_:)();
    v6 = v23;
    if ((unint64_t)v23 < 0xC8)
LABEL_16:
      specialized Set._Variant.insert(_:)((unint64_t *)&v23, v6);
  }
  else
  {
    if (((unint64_t)"n3URL21UnicodeLookalikeTable" & 0x2000000000000000) != 0)
    {
      *(_QWORD *)&v23 = 0xD000000000000013;
      *((_QWORD *)&v23 + 1) = (unint64_t)"n3URL21UnicodeLookalikeTable" & 0xFFFFFFFFFFFFFFLL;
      v5 = &v23;
    }
    else
    {
      v5 = (__int128 *)(((unint64_t)"n3URL21UnicodeLookalikeTable" & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    v6 = (int)MEMORY[0x186DAA07C](4106, v5);
    if (v6 < 0xC8)
      goto LABEL_16;
  }
  v23 = xmmword_182152CB0;
  v7 = MEMORY[0x186DAA07C](4106, &v23);
  if (v7 < 0xC8)
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v7);
  v23 = xmmword_182152CC0;
  v8 = MEMORY[0x186DAA07C](4106, &v23);
  if (v8 < 0xC8)
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v8);
  v23 = xmmword_182152CD0;
  v9 = MEMORY[0x186DAA07C](4106, &v23);
  if (v9 < 0xC8)
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v9);
  v23 = xmmword_182152CE0;
  v10 = MEMORY[0x186DAA07C](4106, &v23);
  if (v10 < 0xC8)
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v10);
  v23 = xmmword_182152CF0;
  v11 = MEMORY[0x186DAA07C](4106, &v23);
  if (v11 < 0xC8)
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v11);
  v23 = xmmword_182152D00;
  v12 = MEMORY[0x186DAA07C](4106, &v23);
  if (v12 < 0xC8)
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v12);
  v23 = xmmword_182152D10;
  v13 = MEMORY[0x186DAA07C](4106, &v23);
  if (v13 < 0xC8)
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v13);
  v23 = xmmword_182152D20;
  v14 = MEMORY[0x186DAA07C](4106, &v23);
  if (v14 < 0xC8)
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v14);
  if (((unint64_t)"Canadian_Aboriginal" & 0x1000000000000000) != 0)
  {
    _StringGuts._slowWithCString<A>(_:)();
    v16 = v23;
    if ((unint64_t)v23 < 0xC8)
LABEL_38:
      specialized Set._Variant.insert(_:)((unint64_t *)&v23, v16);
  }
  else
  {
    if (((unint64_t)"Canadian_Aboriginal" & 0x2000000000000000) != 0)
    {
      *(_QWORD *)&v23 = 0xD000000000000014;
      *((_QWORD *)&v23 + 1) = (unint64_t)"Canadian_Aboriginal" & 0xFFFFFFFFFFFFFFLL;
      v15 = &v23;
    }
    else
    {
      v15 = (__int128 *)(((unint64_t)"Canadian_Aboriginal" & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    v16 = (int)MEMORY[0x186DAA07C](4106, v15);
    if (v16 < 0xC8)
      goto LABEL_38;
  }
  v23 = xmmword_182152D30;
  v17 = MEMORY[0x186DAA07C](4106, &v23);
  if (v17 < 0xC8)
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v17);
  v23 = xmmword_182152D40;
  v18 = MEMORY[0x186DAA07C](4106, &v23);
  if (v18 < 0xC8)
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v18);
  v23 = xmmword_182152D50;
  v19 = MEMORY[0x186DAA07C](4106, &v23);
  if (v19 < 0xC8)
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v19);
  v23 = xmmword_182152D60;
  v20 = MEMORY[0x186DAA07C](4106, &v23);
  if (v20 < 0xC8)
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v20);
  v23 = xmmword_182152D70;
  v21 = MEMORY[0x186DAA07C](4106, &v23);
  if (v21 < 0xC8)
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v21);
  return v24;
}

uint64_t closure #1 in allowIDNScript #1 (_:to:) in closure #1 in variable initialization expression of static URL.UnicodeLookalikeTable.IDNScriptAllowedList@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = MEMORY[0x186DAA07C](4106, a1);
  *a2 = (int)result;
  return result;
}

uint64_t type metadata accessor for URL.UnicodeLookalikeTable()
{
  return objc_opt_self();
}

uint64_t Unicode.Scalar.isLookalikeScalarOfScriptType(_:)(int a1, int a2)
{
  uint64_t result;

  result = 0;
  switch(a1)
  {
    case 3:
      if ((a2 - 1352) >= 0x3E)
        result = 0;
      else
        result = (0x2221000000002221uLL >> (a2 - 72)) & 1;
      break;
    case 35:
      result = a2 == 3046;
      break;
    case 38:
      result = a2 == 3585;
      break;
    case 40:
      result = 1;
      if (a2 <= 5550)
      {
        if (((a2 - 5229) > 0x3D || ((1 << (a2 - 109)) & 0x2000000000000025) == 0)
          && a2 != 5500
          && a2 != 5511)
        {
LABEL_16:
          result = 0;
        }
      }
      else
      {
        switch(a2)
        {
          case 5551:
          case 5556:
          case 5573:
          case 5598:
          case 5609:
          case 5617:
          case 5620:
            return result;
          case 5552:
          case 5553:
          case 5554:
          case 5555:
          case 5557:
          case 5558:
          case 5559:
          case 5560:
          case 5561:
          case 5562:
          case 5563:
          case 5564:
          case 5565:
          case 5566:
          case 5567:
          case 5568:
          case 5569:
          case 5570:
          case 5571:
          case 5572:
          case 5574:
          case 5575:
          case 5576:
          case 5577:
          case 5578:
          case 5579:
          case 5580:
          case 5581:
          case 5582:
          case 5583:
          case 5584:
          case 5585:
          case 5586:
          case 5587:
          case 5588:
          case 5589:
          case 5590:
          case 5591:
          case 5592:
          case 5593:
          case 5594:
          case 5595:
          case 5596:
          case 5597:
          case 5599:
          case 5600:
          case 5601:
          case 5602:
          case 5603:
          case 5604:
          case 5605:
          case 5606:
          case 5607:
          case 5608:
          case 5610:
          case 5611:
          case 5612:
          case 5613:
          case 5614:
          case 5615:
          case 5616:
          case 5618:
          case 5619:
            goto LABEL_16;
          default:
            if ((a2 - 5741) >= 2)
              goto LABEL_16;
            break;
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

unint64_t String.UnicodeScalarView.hasSuffix(_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t result;
  char v16;

  v8 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v8 = a1;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v9 = 11;
  else
    v9 = 7;
  v10 = v9 | (v8 << 16);
  v11 = String.UnicodeScalarView.distance(from:to:)(0xFuLL, v10, a1, a2);
  if ((a4 & 0x2000000000000000) != 0)
    v12 = HIBYTE(a4) & 0xF;
  else
    v12 = a3 & 0xFFFFFFFFFFFFLL;
  if (((a4 >> 60) & ((a3 & 0x800000000000000) == 0)) != 0)
    v13 = 11;
  else
    v13 = 7;
  v14 = v13 | (v12 << 16);
  if (v11 >= (uint64_t)String.UnicodeScalarView.distance(from:to:)(0xFuLL, v14, a3, a4))
  {
    v16 = 0;
    return v16 & 1;
  }
  result = String.UnicodeScalarView.distance(from:to:)(0xFuLL, v10, a1, a2);
  if (__OFSUB__(0, result))
  {
    __break(1u);
  }
  else
  {
    result = String.UnicodeScalarView.index(_:offsetBy:)(v14, -(uint64_t)result, a3, a4);
    if (4 * v12 >= result >> 14)
    {
      String.UnicodeScalarView.subscript.getter();
      lazy protocol witness table accessor for type Substring.UnicodeScalarView and conformance Substring.UnicodeScalarView();
      String.UnicodeScalarView.append<A>(contentsOf:)();
      v16 = specialized Sequence<>.elementsEqual<A>(_:)(a1, a2, 0, 0xE000000000000000);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v16 & 1;
    }
  }
  __break(1u);
  return result;
}

unint64_t String.UnicodeScalarView.index(_:offsetBy:limitedBy:)(unint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  unint64_t v7;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t result;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;

  v7 = a3;
  v10 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0)
    LOBYTE(v10) = 1;
  v11 = 4 << v10;
  if ((a3 & 0xC) == 4 << v10)
LABEL_55:
    v7 = _StringGuts._slowEnsureMatchingEncoding(_:)(v7, a4, a5);
  v12 = a1;
  if ((a1 & 0xC) == v11)
    v12 = _StringGuts._slowEnsureMatchingEncoding(_:)(a1, a4, a5);
  result = _StringGuts.validateInclusiveScalarIndex(_:)(a1, a4, a5);
  v7 >>= 14;
  if (a2 < 0)
  {
    v11 = 0;
    a1 = v12 >> 14;
    v20 = (char *)&v28 + 6;
    while (a1 < v7 || v7 < result >> 14)
    {
      if (result < 0x10000)
      {
LABEL_54:
        __break(1u);
        goto LABEL_55;
      }
      if ((a5 & 0x1000000000000000) != 0)
      {
        v27 = v20;
        result = String.UnicodeScalarView._foreignIndex(before:)();
        v20 = v27;
      }
      else
      {
        v21 = result >> 16;
        if ((a5 & 0x2000000000000000) != 0)
        {
          v29 = a4;
          v30 = a5 & 0xFFFFFFFFFFFFFFLL;
          if ((*((_BYTE *)&v29 + v21 - 1) & 0xC0) == 0x80)
          {
            v24 = 0;
            do
              v25 = v20[v21 + v24--] & 0xC0;
            while (v25 == 128);
            v26 = 1 - v24;
          }
          else
          {
            v26 = 1;
          }
          v21 -= v26;
        }
        else
        {
          v22 = (a5 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a4 & 0x1000000000000000) == 0)
          {
            v28 = v20;
            v22 = _StringObject.sharedUTF8.getter();
            v20 = v28;
          }
          do
            v23 = *(_BYTE *)(v22 - 1 + v21--) & 0xC0;
          while (v23 == 128);
        }
        result = (v21 << 16) | 5;
      }
      if (--v11 <= a2)
      {
        if (a1 < v7 || result >> 14 >= v7)
          return result;
        return 0;
      }
    }
    return 0;
  }
  a1 = v12 >> 14;
  if (a2)
  {
    if ((a5 & 0x2000000000000000) != 0)
      v14 = HIBYTE(a5) & 0xF;
    else
      v14 = a4 & 0xFFFFFFFFFFFFLL;
    v11 = a5 & 0xFFFFFFFFFFFFFFLL;
    while (v7 < a1 || result >> 14 < v7)
    {
      v15 = result >> 16;
      if (result >> 16 >= v14)
      {
        __break(1u);
        goto LABEL_54;
      }
      if ((a5 & 0x1000000000000000) != 0)
      {
        result = String.UnicodeScalarView._foreignIndex(after:)();
        if (!--a2)
          goto LABEL_26;
      }
      else
      {
        if ((a5 & 0x2000000000000000) != 0)
        {
          v29 = a4;
          v30 = a5 & 0xFFFFFFFFFFFFFFLL;
          v17 = *((unsigned __int8 *)&v29 + v15);
        }
        else
        {
          v16 = (a5 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a4 & 0x1000000000000000) == 0)
            v16 = _StringObject.sharedUTF8.getter();
          v17 = *(unsigned __int8 *)(v16 + v15);
        }
        v18 = (char)v17;
        v19 = __clz(v17 ^ 0xFF) - 24;
        if (v18 >= 0)
          LOBYTE(v19) = 1;
        result = ((v15 + v19) << 16) | 5;
        if (!--a2)
          goto LABEL_26;
      }
    }
    return 0;
  }
LABEL_26:
  if (v7 >= a1 && v7 < result >> 14)
    return 0;
  return result;
}

unint64_t specialized URL.UnicodeLookalikeTable.isLookalikeSequence(withScalar:previousScalar:ofScriptType:)(int a1, uint64_t c, int a3)
{
  int v3;
  unint64_t result;

  v3 = c;
  result = 0;
  if ((_DWORD)c != 47 && (c & 0x100000000) == 0)
  {
    if (a3 == 2)
    {
      if ((a1 - 1632) >= 0xFFFFFFEB)
      {
        if ((c & 0x80000000) == 0)
          return ublock_getCode(c) != UBLOCK_ARABIC;
        __break(1u);
        goto LABEL_28;
      }
      return 0;
    }
    if ((Unicode.Scalar.isLookalikeScalarOfScriptType(_:)(a3, a1) & 1) != 0)
    {
      if (v3 < 0)
      {
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
      }
      if (uscript_getScript() != a3)
      {
        if ((v3 - 65) > 0xFFFFFFDF)
        {
          if ((v3 - 35) < 0x1E && ((0x30801005u >> (v3 - 35)) & 1) != 0)
            return 1;
        }
        else
        {
          result = 1;
          if ((v3 - 94) > 0x20 || ((1 << (v3 - 94)) & 0x1E0000007) == 0)
            return result;
        }
      }
    }
    if ((Unicode.Scalar.isLookalikeScalarOfScriptType(_:)(a3, v3) & 1) == 0)
      return 0;
    if (a1 < 0)
      goto LABEL_29;
    if (uscript_getScript() == a3)
      return 0;
    if ((a1 - 65) > 0xFFFFFFDF)
    {
      if ((a1 - 35) < 0x1E)
        return (0x30801005u >> (a1 - 35)) & 1;
      return 0;
    }
    if ((a1 - 94) < 0x21)
      return (0x1FFFFFF8uLL >> (a1 - 94)) & 1;
    return 1;
  }
  return result;
}

uint64_t specialized URL.UnicodeLookalikeTable.isLookalikeScalar(_:withPreviousScalar:)(UChar32 a1, unint64_t a2)
{
  unint64_t v2;
  UChar32 v3;
  UBlockCode Code;
  int v6;
  int v7;
  uint64_t v8;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_46;
  }
  v2 = a2;
  v3 = a1;
  if (!u_isprint(a1) || u_isUWhiteSpace(v3) || u_hasBinaryProperty(v3, UCHAR_DEFAULT_IGNORABLE_CODE_POINT))
    goto LABEL_5;
  Code = ublock_getCode(v3);
  LOBYTE(a1) = 1;
  if (Code == UBLOCK_IPA_EXTENSIONS || Code == UBLOCK_DESERET)
    return a1 & 1;
  if (v3 > 5940)
  {
    if (v3 > 8530)
    {
      if ((v3 - 8531) < 0xB)
        return a1 & 1;
    }
    else
    {
      if (v3 > 7933)
      {
        switch(v3)
        {
          case 8208:
          case 8209:
          case 8228:
          case 8231:
          case 8249:
          case 8250:
          case 8257:
          case 8260:
          case 8274:
            return a1 & 1;
          case 8210:
          case 8211:
          case 8212:
          case 8213:
          case 8214:
          case 8215:
          case 8216:
          case 8217:
          case 8218:
          case 8219:
          case 8220:
          case 8221:
          case 8222:
          case 8223:
          case 8224:
          case 8225:
          case 8226:
          case 8227:
          case 8229:
          case 8230:
          case 8232:
          case 8233:
          case 8234:
          case 8235:
          case 8236:
          case 8237:
          case 8238:
          case 8239:
          case 8240:
          case 8241:
          case 8242:
          case 8243:
          case 8244:
          case 8245:
          case 8246:
          case 8247:
          case 8248:
          case 8251:
          case 8252:
          case 8253:
          case 8254:
          case 8255:
          case 8256:
          case 8258:
          case 8259:
          case 8261:
          case 8262:
          case 8263:
          case 8264:
          case 8265:
          case 8266:
          case 8267:
          case 8268:
          case 8269:
          case 8270:
          case 8271:
          case 8272:
          case 8273:
            goto LABEL_42;
          default:
            if ((v3 - 7934) >= 2)
              goto LABEL_42;
            break;
        }
        return a1 & 1;
      }
      if ((v3 - 7428) <= 0x1E && ((1 << (v3 - 4)) & 0x71000801) != 0
        || (v3 - 7836) < 2
        || v3 == 5941)
      {
        return a1 & 1;
      }
    }
  }
  else
  {
    if (v3 > 1459)
    {
      switch(v3)
      {
        case 1460:
        case 1465:
        case 1466:
        case 1468:
        case 1473:
        case 1474:
        case 1475:
        case 1476:
        case 1524:
        case 1545:
        case 1546:
          return a1 & 1;
        case 1461:
        case 1462:
        case 1463:
        case 1464:
        case 1467:
        case 1469:
        case 1470:
        case 1471:
        case 1472:
        case 1477:
        case 1478:
        case 1479:
        case 1480:
        case 1481:
        case 1482:
        case 1483:
        case 1484:
        case 1485:
        case 1486:
        case 1487:
        case 1488:
        case 1489:
        case 1490:
        case 1491:
        case 1492:
        case 1493:
        case 1494:
        case 1495:
        case 1496:
        case 1497:
        case 1498:
        case 1499:
        case 1500:
        case 1501:
        case 1502:
        case 1503:
        case 1504:
        case 1505:
        case 1506:
        case 1507:
        case 1508:
        case 1509:
        case 1510:
        case 1511:
        case 1512:
        case 1513:
        case 1514:
        case 1515:
        case 1516:
        case 1517:
        case 1518:
        case 1519:
        case 1520:
        case 1521:
        case 1522:
        case 1523:
        case 1525:
        case 1526:
        case 1527:
        case 1528:
        case 1529:
        case 1530:
        case 1531:
        case 1532:
        case 1533:
        case 1534:
        case 1535:
        case 1536:
        case 1537:
        case 1538:
        case 1539:
        case 1540:
        case 1541:
        case 1542:
        case 1543:
        case 1544:
          goto LABEL_42;
        default:
          if (((v3 - 1748) > 0x30 || ((1 << (v3 + 44)) & 0x1E00010000001) == 0)
            && ((v3 - 1616) > 0x1A || ((1 << (v3 - 80)) & 0x4010001) == 0))
          {
            goto LABEL_42;
          }
          break;
      }
      return a1 & 1;
    }
    if (v3 <= 566)
    {
      if ((v3 - 188) < 3 || v3 == 448 || v3 == 451)
        return a1 & 1;
    }
    else if (v3 > 820)
    {
      if ((v3 - 821) <= 3 && v3 != 822 || v3 == 1417)
        return a1 & 1;
    }
    else if ((v3 - 567) <= 0x2A && ((1 << (v3 - 55)) & 0x40004000001) != 0
           || v3 == 720)
    {
      return a1 & 1;
    }
  }
LABEL_42:
  if (v3 > 12828)
  {
LABEL_46:
    if (v3 <= 65086)
    {
      if (v3 > 42800)
      {
        if (v3 <= 65043)
        {
          if (v3 == 42801 || v3 == 42865)
            return a1 & 1;
          v7 = 42889;
          goto LABEL_88;
        }
        v6 = -65044;
      }
      else
      {
        if ((v3 - 13230) <= 0x31 && ((1 << (v3 + 82)) & 0x2000001000003) != 0)
          return a1 & 1;
        v6 = -12829;
      }
    }
    else
    {
      if (v3 <= 65531)
      {
        if ((v3 - 65087) <= 0x1F && ((1 << (v3 - 63)) & 0xC0000001) != 0
          || (v3 - 65294) < 2)
        {
          return a1 & 1;
        }
        v7 = 65377;
        goto LABEL_88;
      }
      if ((v3 - 128271) < 5)
        return a1 & 1;
      v6 = -65532;
    }
    if ((v3 + v6) < 2)
      return a1 & 1;
    goto LABEL_89;
  }
  if (v3 > 11002)
  {
    switch(v3)
    {
      case 12272:
      case 12273:
      case 12274:
      case 12275:
      case 12276:
      case 12277:
      case 12278:
      case 12279:
      case 12280:
      case 12281:
      case 12282:
      case 12283:
      case 12290:
      case 12296:
      case 12308:
      case 12309:
      case 12339:
      case 12341:
        return a1 & 1;
      case 12284:
      case 12285:
      case 12286:
      case 12287:
      case 12288:
      case 12289:
      case 12291:
      case 12292:
      case 12293:
      case 12294:
      case 12295:
      case 12297:
      case 12298:
      case 12299:
      case 12300:
      case 12301:
      case 12302:
      case 12303:
      case 12304:
      case 12305:
      case 12306:
      case 12307:
      case 12310:
      case 12311:
      case 12312:
      case 12313:
      case 12314:
      case 12315:
      case 12316:
      case 12317:
      case 12318:
      case 12319:
      case 12320:
      case 12321:
      case 12322:
      case 12323:
      case 12324:
      case 12325:
      case 12326:
      case 12327:
      case 12328:
      case 12329:
      case 12330:
      case 12331:
      case 12332:
      case 12333:
      case 12334:
      case 12335:
      case 12336:
      case 12337:
      case 12338:
      case 12340:
        goto LABEL_89;
      default:
        if (v3 == 11003)
          return a1 & 1;
        v7 = 11005;
        break;
    }
LABEL_88:
    if (v3 == v7)
      return a1 & 1;
    goto LABEL_89;
  }
  if (v3 > 9022)
  {
    if (v3 <= 9584)
    {
      if (v3 == 9023 || v3 == 9134)
        return a1 & 1;
      v7 = 9290;
    }
    else
    {
      if ((v3 - 9585) < 2 || v3 == 10742)
        return a1 & 1;
      v7 = 10744;
    }
    goto LABEL_88;
  }
  if (v3 > 8721)
  {
    if ((v3 - 8722) <= 0x24 && ((1 << (v3 - 18)) & 0x1000000019) != 0)
      return a1 & 1;
    goto LABEL_89;
  }
  if ((v3 - 8542) < 2)
    return a1 & 1;
  if (v3 == 46)
  {
LABEL_59:
    LOBYTE(a1) = 0;
    return a1 & 1;
  }
  if (v3 == 775)
  {
    if ((v2 & 0x100000000) == 0 && ((_DWORD)v2 == 305 || (_DWORD)v2 == 567 || (_DWORD)v2 == 1493))
      return a1 & 1;
    goto LABEL_59;
  }
LABEL_89:
  v8 = HIDWORD(v2) & 1;
  if ((specialized URL.UnicodeLookalikeTable.isLookalikeSequence(withScalar:previousScalar:ofScriptType:)(v3, v2 | (unint64_t)(v8 << 32), 3) & 1) != 0|| (specialized URL.UnicodeLookalikeTable.isLookalikeSequence(withScalar:previousScalar:ofScriptType:)(v3, v2 | (unint64_t)(v8 << 32), 35) & 1) != 0|| (specialized URL.UnicodeLookalikeTable.isLookalikeSequence(withScalar:previousScalar:ofScriptType:)(v3, v2 | (unint64_t)(v8 << 32), 40) & 1) != 0)
  {
LABEL_5:
    LOBYTE(a1) = 1;
    return a1 & 1;
  }
  LOBYTE(a1) = specialized URL.UnicodeLookalikeTable.isLookalikeSequence(withScalar:previousScalar:ofScriptType:)(v3, v2 | (unint64_t)(v8 << 32), 38);
  if ((a1 & 1) == 0 && (v2 & 0x100000000) == 0)
  {
    LOBYTE(a1) = 0;
    if ((v3 - 1632) >= 0xFFFFFFEB && (_DWORD)v2 != 47)
    {
      if ((v2 & 0x80000000) != 0)
      {
        __break(1u);
        JUMPOUT(0x181D58290);
      }
      LOBYTE(a1) = ublock_getCode(v2) != UBLOCK_ARABIC;
    }
  }
  return a1 & 1;
}

uint64_t specialized URL.UnicodeLookalikeTable.allCharactersInIDNScriptAllowList(in:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unsigned int v5;
  uint64_t v6;
  char v7;
  UChar32 v8;
  uint64_t v9;
  UChar32 v10;
  uint64_t v11;
  int Script;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    swift_bridgeObjectRetain();
    v5 = 0;
    v6 = 0;
    v7 = 1;
    while (1)
    {
      if ((a2 & 0x1000000000000000) != 0)
      {
        v8 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0)
          _StringObject.sharedUTF8.getter();
        v8 = _decodeScalar(_:startingAt:)();
      }
      v10 = v8;
      v11 = v9;
      if (v8 < 0)
        break;
      Script = uscript_getScript();
      if (one-time initialization token for IDNScriptAllowedList != -1)
        swift_once();
      v13 = static URL.UnicodeLookalikeTable.IDNScriptAllowedList;
      if (!*(_QWORD *)(static URL.UnicodeLookalikeTable.IDNScriptAllowedList + 16))
        goto LABEL_24;
      v14 = static Hasher._hash(seed:_:)();
      v15 = -1 << *(_BYTE *)(v13 + 32);
      v16 = v14 & ~v15;
      if (((*(_QWORD *)(v13 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
        goto LABEL_24;
      v17 = *(_QWORD *)(v13 + 48);
      if (*(_QWORD *)(v17 + 8 * v16) != Script)
      {
        v18 = ~v15;
        while (1)
        {
          v16 = (v16 + 1) & v18;
          if (((*(_QWORD *)(v13 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
            break;
          if (*(_QWORD *)(v17 + 8 * v16) == Script)
            goto LABEL_21;
        }
LABEL_24:
        swift_bridgeObjectRelease();
        return 0;
      }
LABEL_21:
      if ((specialized URL.UnicodeLookalikeTable.isLookalikeScalar(_:withPreviousScalar:)(v10, v5 | ((unint64_t)(v7 & 1) << 32)) & 1) != 0)goto LABEL_24;
      v7 = 0;
      v6 += v11;
      v5 = v10;
      if (v6 >= v2)
        goto LABEL_26;
    }
    __break(1u);
LABEL_26:
    swift_bridgeObjectRelease();
  }
  return 1;
}

uint64_t specialized BidirectionalCollection.dropLast(_:)(uint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0)
      v3 = a2;
    v4 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v4 = 11;
    String.UnicodeScalarView.index(_:offsetBy:limitedBy:)(v4 | (v3 << 16), -result, 0xFuLL, a2, a3);
    return String.UnicodeScalarView.subscript.getter();
  }
  return result;
}

uint64_t specialized String.UnicodeScalarView.init<A>(_:)(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  v8 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
  if (v2)
  {
    result = swift_bridgeObjectRetain();
    v4 = 0;
    while (1)
    {
      v5 = *(_DWORD *)(a1 + 4 * v4 + 32);
      if (v5 >> 11 == 27)
        break;
      if (HIWORD(v5) > 0x10u)
      {
        __break(1u);
        break;
      }
      v7 = *(_QWORD *)(v8 + 16);
      v6 = *(_QWORD *)(v8 + 24);
      if (v7 >= v6 >> 1)
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
      ++v4;
      *(_QWORD *)(v8 + 16) = v7 + 1;
      *(_DWORD *)(v8 + 4 * v7 + 32) = v5;
      if (v2 == v4)
      {
        swift_bridgeObjectRelease();
        goto LABEL_9;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_9:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Unicode.Scalar]);
    lazy protocol witness table accessor for type [Unicode.Scalar] and conformance [A]();
    String.UnicodeScalarView.append<A>(contentsOf:)();
    swift_release();
    return 0;
  }
  return result;
}

BOOL specialized URL.UnicodeLookalikeTable.secondLevelDomain(_:allowedBy:)(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  int v9;
  int v10;

  v4 = a1 >> 14;
  if (a1 >> 14 != a2 >> 14)
  {
    swift_bridgeObjectRetain();
    do
    {
      Substring.UnicodeScalarView.formIndex(before:)();
      _StringGuts.validateScalarIndex(_:in:)(a2, a1, a2, a3, a4);
      if ((a4 & 0x1000000000000000) != 0)
      {
        v9 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((a4 & 0x2000000000000000) == 0 && (a3 & 0x1000000000000000) == 0)
          _StringObject.sharedUTF8.getter();
        v9 = _decodeScalar(_:startingAt:)();
      }
      v10 = v9;
      if (v9 != 1105 && (v9 - 1072) >= 0x20 && v9 != 45 && (v9 - 48) > 9)
      {
        swift_bridgeObjectRelease();
        return v10 == 46;
      }
    }
    while (v4 != a2 >> 14);
    swift_bridgeObjectRelease();
  }
  return 1;
}

{
  unint64_t v4;
  uint64_t v5;
  int v10;
  int v11;
  BOOL v12;

  v4 = a1 >> 14;
  v5 = 1;
  if (a1 >> 14 != a2 >> 14)
  {
    swift_bridgeObjectRetain();
    do
    {
      Substring.UnicodeScalarView.formIndex(before:)();
      _StringGuts.validateScalarIndex(_:in:)(a2, a1, a2, a3, a4);
      if ((a4 & 0x1000000000000000) != 0)
      {
        v10 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((a4 & 0x2000000000000000) == 0 && (a3 & 0x1000000000000000) == 0)
          _StringObject.sharedUTF8.getter();
        v10 = _decodeScalar(_:startingAt:)();
      }
      v11 = v10;
      if ((v10 - 1104) <= 0xFFFFFFDF)
      {
        v12 = (v10 - 1105) > 0xD || ((1 << (v10 - 81)) & 0x2021) == 0;
        if (v12 && v10 != 8217 && v10 != 45 && (v10 - 48) > 9)
        {
          swift_bridgeObjectRelease();
          return v11 == 46;
        }
      }
    }
    while (v4 != a2 >> 14);
    swift_bridgeObjectRelease();
    return 1;
  }
  return v5;
}

{
  unint64_t v4;
  int v9;
  int v10;
  BOOL v11;

  v4 = a1 >> 14;
  if (a1 >> 14 == a2 >> 14)
    return 1;
  swift_bridgeObjectRetain();
  do
  {
    Substring.UnicodeScalarView.formIndex(before:)();
    _StringGuts.validateScalarIndex(_:in:)(a2, a1, a2, a3, a4);
    if ((a4 & 0x1000000000000000) != 0)
    {
      v9 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((a4 & 0x2000000000000000) == 0 && (a3 & 0x1000000000000000) == 0)
        _StringObject.sharedUTF8.getter();
      v9 = _decodeScalar(_:startingAt:)();
    }
    v10 = v9;
    if ((v9 - 1104) <= 0xFFFFFFDF)
    {
      if (v9 <= 1170)
      {
        if (v9 == 1105 || v9 == 1110)
          continue;
      }
      else
      {
        v11 = (v9 - 1171) > 0x28 || ((1 << (v9 + 109)) & 0x10050010101) == 0;
        if (!v11 || v9 == 1241 || v9 == 1257)
          continue;
      }
      if (v9 != 45 && (v9 - 48) > 9)
      {
        swift_bridgeObjectRelease();
        return v10 == 46;
      }
    }
  }
  while (v4 != a2 >> 14);
  swift_bridgeObjectRelease();
  return 1;
}

{
  unint64_t v4;
  int v9;
  int v10;
  BOOL v11;

  v4 = a1 >> 14;
  if (a1 >> 14 != a2 >> 14)
  {
    swift_bridgeObjectRetain();
    do
    {
      Substring.UnicodeScalarView.formIndex(before:)();
      _StringGuts.validateScalarIndex(_:in:)(a2, a1, a2, a3, a4);
      if ((a4 & 0x1000000000000000) != 0)
      {
        v9 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((a4 & 0x2000000000000000) == 0 && (a3 & 0x1000000000000000) == 0)
          _StringObject.sharedUTF8.getter();
        v9 = _decodeScalar(_:startingAt:)();
      }
      v10 = v9;
      if ((v9 - 1104) <= 0xFFFFFFDF)
      {
        v11 = (v9 - 1110) > 0x3B || ((1 << (v9 - 86)) & 0x800000000000003) == 0;
        if (v11 && v9 != 1028 && v9 != 1105 && v9 != 45 && (v9 - 48) > 9)
        {
          swift_bridgeObjectRelease();
          return v10 == 46;
        }
      }
    }
    while (v4 != a2 >> 14);
    swift_bridgeObjectRelease();
  }
  return 1;
}

{
  unint64_t v4;
  uint64_t v5;
  int v10;
  int v11;

  v4 = a1 >> 14;
  v5 = 1;
  if (a1 >> 14 != a2 >> 14)
  {
    swift_bridgeObjectRetain();
    do
    {
      Substring.UnicodeScalarView.formIndex(before:)();
      _StringGuts.validateScalarIndex(_:in:)(a2, a1, a2, a3, a4);
      if ((a4 & 0x1000000000000000) != 0)
      {
        v10 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((a4 & 0x2000000000000000) == 0 && (a3 & 0x1000000000000000) == 0)
          _StringObject.sharedUTF8.getter();
        v10 = _decodeScalar(_:startingAt:)();
      }
      v11 = v10;
      if ((v10 - 1081) <= 0xFFFFFFF6
        && (v10 - 1097) <= 0xFFFFFFF0
        && ((v10 - 1106) > 0xD || ((1 << (v10 - 82)) & 0x23C1) == 0)
        && v10 != 45
        && (v10 - 48) > 9)
      {
        swift_bridgeObjectRelease();
        return v11 == 46;
      }
    }
    while (v4 != a2 >> 14);
    swift_bridgeObjectRelease();
    return 1;
  }
  return v5;
}

{
  unint64_t v4;
  uint64_t v5;
  int v10;
  int v11;

  v4 = a1 >> 14;
  v5 = 1;
  if (a1 >> 14 != a2 >> 14)
  {
    swift_bridgeObjectRetain();
    do
    {
      Substring.UnicodeScalarView.formIndex(before:)();
      _StringGuts.validateScalarIndex(_:in:)(a2, a1, a2, a3, a4);
      if ((a4 & 0x1000000000000000) != 0)
      {
        v10 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((a4 & 0x2000000000000000) == 0 && (a3 & 0x1000000000000000) == 0)
          _StringObject.sharedUTF8.getter();
        v10 = _decodeScalar(_:startingAt:)();
      }
      v11 = v10;
      if ((v10 - 1081) <= 0xFFFFFFF6
        && (v10 - 1097) <= 0xFFFFFFF0
        && ((v10 - 1107) > 0xC || ((1 << (v10 - 83)) & 0x12E5) == 0)
        && v10 != 45
        && (v10 - 48) > 9)
      {
        swift_bridgeObjectRelease();
        return v11 == 46;
      }
    }
    while (v4 != a2 >> 14);
    swift_bridgeObjectRelease();
    return 1;
  }
  return v5;
}

{
  unint64_t v4;
  int v9;
  int v10;

  v4 = a1 >> 14;
  if (a1 >> 14 != a2 >> 14)
  {
    swift_bridgeObjectRetain();
    do
    {
      Substring.UnicodeScalarView.formIndex(before:)();
      _StringGuts.validateScalarIndex(_:in:)(a2, a1, a2, a3, a4);
      if ((a4 & 0x1000000000000000) != 0)
      {
        v9 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((a4 & 0x2000000000000000) == 0 && (a3 & 0x1000000000000000) == 0)
          _StringObject.sharedUTF8.getter();
        v9 = _decodeScalar(_:startingAt:)();
      }
      v10 = v9;
      if ((v9 - 1104) <= 0xFFFFFFDF
        && v9 != 1105
        && v9 != 1199
        && v9 != 1257
        && v9 != 45
        && (v9 - 48) > 9)
      {
        swift_bridgeObjectRelease();
        return v10 == 46;
      }
    }
    while (v4 != a2 >> 14);
    swift_bridgeObjectRelease();
  }
  return 1;
}

{
  unint64_t v4;
  uint64_t v5;
  int v10;
  int v11;

  v4 = a1 >> 14;
  v5 = 1;
  if (a1 >> 14 != a2 >> 14)
  {
    swift_bridgeObjectRetain();
    do
    {
      Substring.UnicodeScalarView.formIndex(before:)();
      _StringGuts.validateScalarIndex(_:in:)(a2, a1, a2, a3, a4);
      if ((a4 & 0x1000000000000000) != 0)
      {
        v10 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((a4 & 0x2000000000000000) == 0 && (a3 & 0x1000000000000000) == 0)
          _StringObject.sharedUTF8.getter();
        v10 = _decodeScalar(_:startingAt:)();
      }
      v11 = v10;
      if (v10 != 1100
        && (v10 - 1072) >= 0x1B
        && ((v10 - 1102) > 0xF || ((1 << (v10 - 78)) & 0x8007) == 0)
        && v10 != 45
        && (v10 - 48) > 9)
      {
        swift_bridgeObjectRelease();
        return v11 == 46;
      }
    }
    while (v4 != a2 >> 14);
    swift_bridgeObjectRelease();
    return 1;
  }
  return v5;
}

BOOL specialized URL.UnicodeLookalikeTable.allCharactersAllowedByTLDRules(in:)(unint64_t a1, unint64_t a2)
{
  Swift::String v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  int v27;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  int v56;
  int v57;
  uint64_t i;
  unsigned int v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  int64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  int v78;
  int v79;
  BOOL v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  int64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  char v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t inited;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  char v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  char v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _OWORD *v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  char v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _OWORD *v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  char v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  _OWORD *v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  char v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  _OWORD *v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  uint64_t v200;
  char v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  _OWORD *v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  uint64_t v217;
  char v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  _OWORD *v229;
  uint64_t v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  uint64_t v234;
  char v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  _OWORD *v246;
  uint64_t v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  uint64_t v251;
  char v252;
  unint64_t v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  unint64_t v266;
  unint64_t v267;
  uint64_t v268;
  char v269;
  unint64_t v270;
  unint64_t v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;

  swift_bridgeObjectRetain();
  v2._countAndFlagsBits = 46;
  v2._object = (void *)0xE100000000000000;
  if (String.hasSuffix(_:)(v2))
    specialized RangeReplaceableCollection<>.removeLast(_:)(1uLL);
  v279 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 3, 0);
  v3 = v279;
  v5 = *(_QWORD *)(v279 + 16);
  v4 = *(_QWORD *)(v279 + 24);
  v6 = v4 >> 1;
  v7 = v5 + 1;
  if (v4 >> 1 <= v5)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v4 > 1, v5 + 1, 1);
    v3 = v279;
    v4 = *(_QWORD *)(v279 + 24);
    v6 = v4 >> 1;
  }
  *(_QWORD *)(v3 + 16) = v7;
  *(_DWORD *)(v3 + 4 * v5 + 32) = 46;
  v8 = v5 + 2;
  if (v6 < v8)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v4 > 1, v8, 1);
    v3 = v279;
  }
  *(_QWORD *)(v3 + 16) = v8;
  *(_DWORD *)(v3 + 4 * v7 + 32) = 1088;
  v10 = *(_QWORD *)(v3 + 16);
  v9 = *(_QWORD *)(v3 + 24);
  if (v10 >= v9 >> 1)
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
  *(_QWORD *)(v279 + 16) = v10 + 1;
  *(_DWORD *)(v279 + 4 * v10 + 32) = 1092;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Unicode.Scalar]);
  lazy protocol witness table accessor for type [Unicode.Scalar] and conformance [A]();
  String.UnicodeScalarView.append<A>(contentsOf:)();
  swift_release();
  swift_bridgeObjectRetain();
  v11 = String.count.getter();
  swift_bridgeObjectRelease();
  if ((uint64_t)String.UnicodeScalarView.distance(from:to:)(0xFuLL, 7uLL, 0, 0xE000000000000000) >= v11)
    goto LABEL_36;
  v12 = String.UnicodeScalarView.distance(from:to:)(0xFuLL, 7uLL, 0, 0xE000000000000000);
  if ((a2 & 0x2000000000000000) != 0)
    v13 = HIBYTE(a2) & 0xF;
  else
    v13 = a1 & 0xFFFFFFFFFFFFLL;
  v14 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v14 = 11;
  v15 = v14 | (v13 << 16);
  if (v12 >= (uint64_t)String.UnicodeScalarView.distance(from:to:)(0xFuLL, v15, a1, a2))
    goto LABEL_36;
  v16 = String.UnicodeScalarView.distance(from:to:)(0xFuLL, 7uLL, 0, 0xE000000000000000);
  if (__OFSUB__(0, v16))
  {
    __break(1u);
    goto LABEL_175;
  }
  if (4 * v13 < String.UnicodeScalarView.index(_:offsetBy:)(v15, -(uint64_t)v16, a1, a2) >> 14)
  {
LABEL_175:
    __break(1u);
LABEL_176:
    __break(1u);
LABEL_177:
    __break(1u);
LABEL_178:
    __break(1u);
    goto LABEL_179;
  }
  swift_bridgeObjectRetain();
  String.UnicodeScalarView.subscript.getter();
  lazy protocol witness table accessor for type Substring.UnicodeScalarView and conformance Substring.UnicodeScalarView();
  String.UnicodeScalarView.append<A>(contentsOf:)();
  v17 = specialized Sequence<>.elementsEqual<A>(_:)(0, 0xE000000000000000, 0, 0xE000000000000000);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v17 & 1) != 0)
  {
    v18 = String.UnicodeScalarView.distance(from:to:)(0xFuLL, 7uLL, 0, 0xE000000000000000);
    swift_bridgeObjectRetain();
    v19 = specialized BidirectionalCollection.dropLast(_:)(v18, a1, a2);
    v21 = v20;
    v23 = v22;
    v25 = v24;
    swift_bridgeObjectRelease();
    if (v19 >> 14 != v21 >> 14)
    {
      while (1)
      {
        Substring.UnicodeScalarView.formIndex(before:)();
        _StringGuts.validateScalarIndex(_:in:)(v21, v19, v21, v23, v25);
        if ((v25 & 0x1000000000000000) != 0)
        {
          v26 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        }
        else
        {
          if ((v25 & 0x2000000000000000) == 0 && (v23 & 0x1000000000000000) == 0)
            _StringObject.sharedUTF8.getter();
          v26 = _decodeScalar(_:startingAt:)();
        }
        v27 = v26;
        if (v26 != 1105 && (v26 - 1072) >= 0x20 && v26 != 45 && (v26 - 48) > 9)
          break;
        if (v19 >> 14 == v21 >> 14)
          goto LABEL_173;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v29 = v27 == 46;
      goto LABEL_104;
    }
    goto LABEL_173;
  }
LABEL_36:
  v280 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 4, 0);
  v30 = v280;
  v32 = *(_QWORD *)(v280 + 16);
  v31 = *(_QWORD *)(v280 + 24);
  v33 = v32 + 1;
  if (v32 >= v31 >> 1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
    v30 = v280;
  }
  *(_QWORD *)(v30 + 16) = v33;
  *(_DWORD *)(v30 + 4 * v32 + 32) = 46;
  v34 = *(_QWORD *)(v30 + 24);
  v35 = v32 + 2;
  if (v33 >= v34 >> 1)
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35, 1);
  *(_QWORD *)(v30 + 16) = v35;
  *(_DWORD *)(v30 + 4 * v33 + 32) = 1088;
  v37 = *(_QWORD *)(v30 + 16);
  v36 = *(_QWORD *)(v30 + 24);
  v38 = v37 + 1;
  if (v37 >= v36 >> 1)
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1);
  *(_QWORD *)(v30 + 16) = v38;
  *(_DWORD *)(v30 + 4 * v37 + 32) = 1091;
  v39 = *(_QWORD *)(v30 + 24);
  v40 = v37 + 2;
  if (v38 >= v39 >> 1)
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40, 1);
  *(_QWORD *)(v30 + 16) = v40;
  *(_DWORD *)(v30 + 4 * v38 + 32) = 1089;
  String.UnicodeScalarView.append<A>(contentsOf:)();
  swift_release();
  swift_bridgeObjectRetain();
  v41 = String.count.getter();
  swift_bridgeObjectRelease();
  if ((uint64_t)String.UnicodeScalarView.distance(from:to:)(0xFuLL, 7uLL, 0, 0xE000000000000000) >= v41)
    goto LABEL_71;
  v42 = String.UnicodeScalarView.distance(from:to:)(0xFuLL, 7uLL, 0, 0xE000000000000000);
  if ((a2 & 0x2000000000000000) != 0)
    v43 = HIBYTE(a2) & 0xF;
  else
    v43 = a1 & 0xFFFFFFFFFFFFLL;
  v44 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v44 = 11;
  v45 = v44 | (v43 << 16);
  if (v42 >= (uint64_t)String.UnicodeScalarView.distance(from:to:)(0xFuLL, v45, a1, a2))
    goto LABEL_71;
  v46 = String.UnicodeScalarView.distance(from:to:)(0xFuLL, 7uLL, 0, 0xE000000000000000);
  if (__OFSUB__(0, v46))
    goto LABEL_176;
  if (4 * v43 < String.UnicodeScalarView.index(_:offsetBy:)(v45, -(uint64_t)v46, a1, a2) >> 14)
    goto LABEL_177;
  swift_bridgeObjectRetain();
  String.UnicodeScalarView.subscript.getter();
  lazy protocol witness table accessor for type Substring.UnicodeScalarView and conformance Substring.UnicodeScalarView();
  String.UnicodeScalarView.append<A>(contentsOf:)();
  v47 = specialized Sequence<>.elementsEqual<A>(_:)(0, 0xE000000000000000, 0, 0xE000000000000000);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v47 & 1) != 0)
  {
    v48 = String.UnicodeScalarView.distance(from:to:)(0xFuLL, 7uLL, 0, 0xE000000000000000);
    swift_bridgeObjectRetain();
    v49 = specialized BidirectionalCollection.dropLast(_:)(v48, a1, a2);
    v51 = v50;
    v53 = v52;
    v55 = v54;
    swift_bridgeObjectRelease();
    if (v49 >> 14 != v51 >> 14)
    {
      while (1)
      {
        Substring.UnicodeScalarView.formIndex(before:)();
        _StringGuts.validateScalarIndex(_:in:)(v51, v49, v51, v53, v55);
        if ((v55 & 0x1000000000000000) != 0)
        {
          v56 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        }
        else
        {
          if ((v55 & 0x2000000000000000) == 0 && (v53 & 0x1000000000000000) == 0)
            _StringObject.sharedUTF8.getter();
          v56 = _decodeScalar(_:startingAt:)();
        }
        v57 = v56;
        if (v56 != 1105 && (v56 - 1072) >= 0x20 && v56 != 45 && (v56 - 48) > 9)
          break;
        if (v49 >> 14 == v51 >> 14)
          goto LABEL_172;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v29 = v57 == 46;
      goto LABEL_104;
    }
    goto LABEL_172;
  }
LABEL_71:
  v281 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 7, 0);
  for (i = 0; i != 28; i += 4)
  {
    v60 = *(_DWORD *)((char *)&outlined read-only object #1 of URL.UnicodeLookalikeTable.allCharactersAllowedByTLDRules(in:)
                    + i
                    + 32);
    if (v60 >> 11 == 27)
      goto LABEL_168;
    if (v60 > 0x10FFFF)
    {
      __break(1u);
LABEL_168:
      __break(1u);
      goto LABEL_173;
    }
    v62 = *(_QWORD *)(v281 + 16);
    v61 = *(_QWORD *)(v281 + 24);
    if (v62 >= v61 >> 1)
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v61 > 1, v62 + 1, 1);
    *(_QWORD *)(v281 + 16) = v62 + 1;
    *(_DWORD *)(v281 + 4 * v62 + 32) = v60;
  }
  String.UnicodeScalarView.append<A>(contentsOf:)();
  swift_release();
  swift_bridgeObjectRetain();
  v63 = String.count.getter();
  swift_bridgeObjectRelease();
  if ((uint64_t)String.UnicodeScalarView.distance(from:to:)(0xFuLL, 7uLL, 0, 0xE000000000000000) >= v63)
    goto LABEL_107;
  v64 = String.UnicodeScalarView.distance(from:to:)(0xFuLL, 7uLL, 0, 0xE000000000000000);
  if ((a2 & 0x2000000000000000) != 0)
    v65 = HIBYTE(a2) & 0xF;
  else
    v65 = a1 & 0xFFFFFFFFFFFFLL;
  v66 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v66 = 11;
  v67 = v66 | (v65 << 16);
  if (v64 >= (uint64_t)String.UnicodeScalarView.distance(from:to:)(0xFuLL, v67, a1, a2))
    goto LABEL_107;
  v68 = String.UnicodeScalarView.distance(from:to:)(0xFuLL, 7uLL, 0, 0xE000000000000000);
  if (__OFSUB__(0, v68))
    goto LABEL_178;
  if (4 * v65 < String.UnicodeScalarView.index(_:offsetBy:)(v67, -(uint64_t)v68, a1, a2) >> 14)
  {
LABEL_179:
    __break(1u);
LABEL_180:
    __break(1u);
    goto LABEL_181;
  }
  swift_bridgeObjectRetain();
  String.UnicodeScalarView.subscript.getter();
  lazy protocol witness table accessor for type Substring.UnicodeScalarView and conformance Substring.UnicodeScalarView();
  String.UnicodeScalarView.append<A>(contentsOf:)();
  v69 = specialized Sequence<>.elementsEqual<A>(_:)(0, 0xE000000000000000, 0, 0xE000000000000000);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v69 & 1) == 0)
  {
LABEL_107:
    v282 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 5, 0);
    v82 = v282;
    v84 = *(_QWORD *)(v282 + 16);
    v83 = *(_QWORD *)(v282 + 24);
    v85 = v84 + 1;
    if (v84 >= v83 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v83 > 1, v84 + 1, 1);
      v82 = v282;
    }
    *(_QWORD *)(v82 + 16) = v85;
    *(_DWORD *)(v82 + 4 * v84 + 32) = 46;
    v86 = *(_QWORD *)(v82 + 24);
    if (v85 >= v86 >> 1)
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v86 > 1, v84 + 2, 1);
    *(_QWORD *)(v82 + 16) = v84 + 2;
    *(_DWORD *)(v82 + 4 * v85 + 32) = 1076;
    v88 = *(_QWORD *)(v82 + 16);
    v87 = *(_QWORD *)(v82 + 24);
    v89 = v88 + 1;
    if (v88 >= v87 >> 1)
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v87 > 1, v88 + 1, 1);
    *(_QWORD *)(v82 + 16) = v89;
    *(_DWORD *)(v82 + 4 * v88 + 32) = 1077;
    v90 = *(_QWORD *)(v82 + 24);
    if (v89 >= v90 >> 1)
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v90 > 1, v88 + 2, 1);
    *(_QWORD *)(v82 + 16) = v88 + 2;
    *(_DWORD *)(v82 + 4 * v89 + 32) = 1090;
    v92 = *(_QWORD *)(v82 + 16);
    v91 = *(_QWORD *)(v82 + 24);
    if (v92 >= v91 >> 1)
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v91 > 1, v92 + 1, 1);
    *(_QWORD *)(v82 + 16) = v92 + 1;
    *(_DWORD *)(v82 + 4 * v92 + 32) = 1080;
    String.UnicodeScalarView.append<A>(contentsOf:)();
    swift_release();
    swift_bridgeObjectRetain();
    v93 = String.count.getter();
    swift_bridgeObjectRelease();
    if ((uint64_t)String.UnicodeScalarView.distance(from:to:)(0xFuLL, 7uLL, 0, 0xE000000000000000) >= v93)
      goto LABEL_128;
    v94 = String.UnicodeScalarView.distance(from:to:)(0xFuLL, 7uLL, 0, 0xE000000000000000);
    if ((a2 & 0x2000000000000000) != 0)
      v95 = HIBYTE(a2) & 0xF;
    else
      v95 = a1 & 0xFFFFFFFFFFFFLL;
    v96 = 7;
    if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
      v96 = 11;
    v97 = v96 | (v95 << 16);
    if (v94 >= (uint64_t)String.UnicodeScalarView.distance(from:to:)(0xFuLL, v97, a1, a2))
      goto LABEL_128;
    v98 = String.UnicodeScalarView.distance(from:to:)(0xFuLL, 7uLL, 0, 0xE000000000000000);
    if (__OFSUB__(0, v98))
      goto LABEL_180;
    if (4 * v95 >= String.UnicodeScalarView.index(_:offsetBy:)(v97, -(uint64_t)v98, a1, a2) >> 14)
    {
      swift_bridgeObjectRetain();
      String.UnicodeScalarView.subscript.getter();
      lazy protocol witness table accessor for type Substring.UnicodeScalarView and conformance Substring.UnicodeScalarView();
      String.UnicodeScalarView.append<A>(contentsOf:)();
      v99 = specialized Sequence<>.elementsEqual<A>(_:)(0, 0xE000000000000000, 0, 0xE000000000000000);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v99 & 1) != 0)
      {
        v100 = specialized Collection.count.getter(0, 0xE000000000000000);
        swift_bridgeObjectRetain();
        v101 = specialized BidirectionalCollection.dropLast(_:)(v100, a1, a2);
        v103 = v102;
        v105 = v104;
        v107 = v106;
        swift_bridgeObjectRelease();
        v81 = specialized URL.UnicodeLookalikeTable.secondLevelDomain(_:allowedBy:)(v101, v103, v105, v107);
        swift_bridgeObjectRelease();
LABEL_164:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_165;
      }
LABEL_128:
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt32>);
      inited = swift_initStackObject();
      v109 = specialized static Array._adoptStorage(_:count:)(inited, 7);
      *(_OWORD *)v110 = xmmword_182152D80;
      *(_QWORD *)(v110 + 16) = 0x43900000430;
      *(_DWORD *)(v110 + 24) = 1085;
      v111 = destructiveProjectEnumData for PredicateCodableError(v109, v110);
      v112 = specialized String.UnicodeScalarView.init<A>(_:)(v111);
      v114 = v113;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v115 = String.count.getter();
      swift_bridgeObjectRelease();
      if ((uint64_t)specialized Collection.count.getter(v112, v114) < v115)
      {
        swift_bridgeObjectRetain();
        v116 = String.UnicodeScalarView.hasSuffix(_:)(v112, v114, a1, a2);
        swift_bridgeObjectRelease();
        if ((v116 & 1) != 0)
        {
          v117 = specialized Collection.count.getter(v112, v114);
          swift_bridgeObjectRetain();
          v118 = specialized BidirectionalCollection.dropLast(_:)(v117, a1, a2);
          v120 = v119;
          v122 = v121;
          v124 = v123;
          swift_bridgeObjectRelease();
          v81 = specialized URL.UnicodeLookalikeTable.secondLevelDomain(_:allowedBy:)(v118, v120, v122, v124);
          swift_bridgeObjectRelease();
LABEL_163:
          swift_bridgeObjectRelease();
          goto LABEL_164;
        }
      }
      v125 = swift_initStackObject();
      v126 = specialized static Array._adoptStorage(_:count:)(v125, 5);
      *(_OWORD *)v127 = xmmword_182152D90;
      *(_DWORD *)(v127 + 16) = 1090;
      v128 = destructiveProjectEnumData for PredicateCodableError(v126, v127);
      v129 = specialized String.UnicodeScalarView.init<A>(_:)(v128);
      v131 = v130;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v132 = String.count.getter();
      swift_bridgeObjectRelease();
      if ((uint64_t)specialized Collection.count.getter(v129, v131) < v132)
      {
        swift_bridgeObjectRetain();
        v133 = String.UnicodeScalarView.hasSuffix(_:)(v129, v131, a1, a2);
        swift_bridgeObjectRelease();
        if ((v133 & 1) != 0)
        {
          v134 = specialized Collection.count.getter(v129, v131);
          swift_bridgeObjectRetain();
          v135 = specialized BidirectionalCollection.dropLast(_:)(v134, a1, a2);
          v137 = v136;
          v139 = v138;
          v141 = v140;
          swift_bridgeObjectRelease();
          v81 = specialized URL.UnicodeLookalikeTable.secondLevelDomain(_:allowedBy:)(v135, v137, v139, v141);
          swift_bridgeObjectRelease();
LABEL_162:
          swift_bridgeObjectRelease();
          goto LABEL_163;
        }
      }
      v142 = swift_initStackObject();
      v143 = specialized static Array._adoptStorage(_:count:)(v142, 4);
      *v144 = xmmword_182152DA0;
      v145 = destructiveProjectEnumData for PredicateCodableError(v143, v144);
      v146 = specialized String.UnicodeScalarView.init<A>(_:)(v145);
      v148 = v147;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v149 = String.count.getter();
      swift_bridgeObjectRelease();
      if ((uint64_t)specialized Collection.count.getter(v146, v148) < v149)
      {
        swift_bridgeObjectRetain();
        v150 = String.UnicodeScalarView.hasSuffix(_:)(v146, v148, a1, a2);
        swift_bridgeObjectRelease();
        if ((v150 & 1) != 0)
        {
          v151 = specialized Collection.count.getter(v146, v148);
          swift_bridgeObjectRetain();
          v152 = specialized BidirectionalCollection.dropLast(_:)(v151, a1, a2);
          v154 = v153;
          v156 = v155;
          v158 = v157;
          swift_bridgeObjectRelease();
          v81 = specialized URL.UnicodeLookalikeTable.secondLevelDomain(_:allowedBy:)(v152, v154, v156, v158);
          swift_bridgeObjectRelease();
          goto LABEL_161;
        }
      }
      v159 = swift_initStackObject();
      v160 = specialized static Array._adoptStorage(_:count:)(v159, 4);
      *v161 = xmmword_182152DB0;
      v162 = destructiveProjectEnumData for PredicateCodableError(v160, v161);
      v163 = specialized String.UnicodeScalarView.init<A>(_:)(v162);
      v165 = v164;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v166 = String.count.getter();
      swift_bridgeObjectRelease();
      if ((uint64_t)specialized Collection.count.getter(v163, v165) < v166)
      {
        swift_bridgeObjectRetain();
        v167 = String.UnicodeScalarView.hasSuffix(_:)(v163, v165, a1, a2);
        swift_bridgeObjectRelease();
        if ((v167 & 1) != 0)
        {
          v168 = specialized Collection.count.getter(v163, v165);
          swift_bridgeObjectRetain();
          v169 = specialized BidirectionalCollection.dropLast(_:)(v168, a1, a2);
          v171 = v170;
          v173 = v172;
          v175 = v174;
          swift_bridgeObjectRelease();
          v81 = specialized URL.UnicodeLookalikeTable.secondLevelDomain(_:allowedBy:)(v169, v171, v173, v175);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_161;
        }
      }
      v176 = swift_initStackObject();
      v177 = specialized static Array._adoptStorage(_:count:)(v176, 4);
      *v178 = xmmword_182152DC0;
      v179 = destructiveProjectEnumData for PredicateCodableError(v177, v178);
      v180 = specialized String.UnicodeScalarView.init<A>(_:)(v179);
      v182 = v181;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v183 = String.count.getter();
      swift_bridgeObjectRelease();
      if ((uint64_t)specialized Collection.count.getter(v180, v182) < v183
        && (swift_bridgeObjectRetain(),
            v184 = String.UnicodeScalarView.hasSuffix(_:)(v180, v182, a1, a2),
            swift_bridgeObjectRelease(),
            (v184 & 1) != 0))
      {
        v185 = specialized Collection.count.getter(v180, v182);
        swift_bridgeObjectRetain();
        v186 = specialized BidirectionalCollection.dropLast(_:)(v185, a1, a2);
        v188 = v187;
        v190 = v189;
        v192 = v191;
        swift_bridgeObjectRelease();
        v81 = specialized URL.UnicodeLookalikeTable.secondLevelDomain(_:allowedBy:)(v186, v188, v190, v192);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        v193 = swift_initStackObject();
        v194 = specialized static Array._adoptStorage(_:count:)(v193, 4);
        *v195 = xmmword_182152DD0;
        v196 = destructiveProjectEnumData for PredicateCodableError(v194, v195);
        v197 = specialized String.UnicodeScalarView.init<A>(_:)(v196);
        v199 = v198;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v200 = String.count.getter();
        swift_bridgeObjectRelease();
        if ((uint64_t)specialized Collection.count.getter(v197, v199) >= v200
          || (swift_bridgeObjectRetain(),
              v201 = String.UnicodeScalarView.hasSuffix(_:)(v197, v199, a1, a2),
              swift_bridgeObjectRelease(),
              (v201 & 1) == 0))
        {
          v210 = swift_initStackObject();
          v211 = specialized static Array._adoptStorage(_:count:)(v210, 4);
          *v212 = xmmword_182152DE0;
          v213 = destructiveProjectEnumData for PredicateCodableError(v211, v212);
          v214 = specialized String.UnicodeScalarView.init<A>(_:)(v213);
          v216 = v215;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v217 = String.count.getter();
          swift_bridgeObjectRelease();
          if ((uint64_t)specialized Collection.count.getter(v214, v216) < v217
            && (swift_bridgeObjectRetain(),
                v218 = String.UnicodeScalarView.hasSuffix(_:)(v214, v216, a1, a2),
                swift_bridgeObjectRelease(),
                (v218 & 1) != 0))
          {
            v219 = specialized Collection.count.getter(v214, v216);
            swift_bridgeObjectRetain();
            v220 = specialized BidirectionalCollection.dropLast(_:)(v219, a1, a2);
            v222 = v221;
            v224 = v223;
            v226 = v225;
            swift_bridgeObjectRelease();
            v81 = specialized URL.UnicodeLookalikeTable.secondLevelDomain(_:allowedBy:)(v220, v222, v224, v226);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {
            v227 = swift_initStackObject();
            v228 = specialized static Array._adoptStorage(_:count:)(v227, 4);
            *v229 = xmmword_182152DF0;
            v230 = destructiveProjectEnumData for PredicateCodableError(v228, v229);
            v231 = specialized String.UnicodeScalarView.init<A>(_:)(v230);
            v233 = v232;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            v234 = String.count.getter();
            swift_bridgeObjectRelease();
            if ((uint64_t)specialized Collection.count.getter(v231, v233) >= v234
              || (swift_bridgeObjectRetain(),
                  v235 = String.UnicodeScalarView.hasSuffix(_:)(v231, v233, a1, a2),
                  swift_bridgeObjectRelease(),
                  (v235 & 1) == 0))
            {
              v244 = swift_initStackObject();
              v245 = specialized static Array._adoptStorage(_:count:)(v244, 4);
              *v246 = xmmword_182152E00;
              v247 = destructiveProjectEnumData for PredicateCodableError(v245, v246);
              v248 = specialized String.UnicodeScalarView.init<A>(_:)(v247);
              v250 = v249;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              v251 = String.count.getter();
              swift_bridgeObjectRelease();
              if ((uint64_t)specialized Collection.count.getter(v248, v250) < v251
                && (swift_bridgeObjectRetain(),
                    v252 = String.UnicodeScalarView.hasSuffix(_:)(v248, v250, a1, a2),
                    swift_bridgeObjectRelease(),
                    (v252 & 1) != 0))
              {
                v253 = specialized Collection.count.getter(v248, v250);
                swift_bridgeObjectRetain();
                v254 = specialized BidirectionalCollection.dropLast(_:)(v253, a1, a2);
                v256 = v255;
                v258 = v257;
                v260 = v259;
                swift_bridgeObjectRelease();
                v81 = specialized URL.UnicodeLookalikeTable.secondLevelDomain(_:allowedBy:)(v254, v256, v258, v260);
              }
              else
              {
                v261 = swift_initStackObject();
                v262 = specialized static Array._adoptStorage(_:count:)(v261, 3);
                *(_QWORD *)v263 = 0x4310000002ELL;
                *(_DWORD *)(v263 + 8) = 1075;
                v264 = destructiveProjectEnumData for PredicateCodableError(v262, v263);
                v265 = specialized String.UnicodeScalarView.init<A>(_:)(v264);
                v267 = v266;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRetain();
                v268 = String.count.getter();
                swift_bridgeObjectRelease();
                if ((uint64_t)specialized Collection.count.getter(v265, v267) >= v268
                  || (swift_bridgeObjectRetain(),
                      v269 = String.UnicodeScalarView.hasSuffix(_:)(v265, v267, a1, a2),
                      swift_bridgeObjectRelease(),
                      (v269 & 1) == 0))
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v81 = 0;
                  goto LABEL_165;
                }
                v270 = specialized Collection.count.getter(v265, v267);
                swift_bridgeObjectRetain();
                v271 = specialized BidirectionalCollection.dropLast(_:)(v270, a1, a2);
                v278 = v272;
                v274 = v273;
                v276 = v275;
                swift_bridgeObjectRelease();
                v81 = specialized URL.UnicodeLookalikeTable.secondLevelDomain(_:allowedBy:)(v271, v278, v274, v276);
                swift_bridgeObjectRelease();
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_161;
            }
            v236 = specialized Collection.count.getter(v231, v233);
            swift_bridgeObjectRetain();
            v237 = specialized BidirectionalCollection.dropLast(_:)(v236, a1, a2);
            v239 = v238;
            v241 = v240;
            v243 = v242;
            swift_bridgeObjectRelease();
            v81 = specialized URL.UnicodeLookalikeTable.secondLevelDomain(_:allowedBy:)(v237, v239, v241, v243);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_161:
          swift_bridgeObjectRelease();
          goto LABEL_162;
        }
        v202 = specialized Collection.count.getter(v197, v199);
        swift_bridgeObjectRetain();
        v203 = specialized BidirectionalCollection.dropLast(_:)(v202, a1, a2);
        v205 = v204;
        v207 = v206;
        v209 = v208;
        swift_bridgeObjectRelease();
        v81 = specialized URL.UnicodeLookalikeTable.secondLevelDomain(_:allowedBy:)(v203, v205, v207, v209);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      goto LABEL_161;
    }
LABEL_181:
    __break(1u);
    goto LABEL_173;
  }
  v70 = specialized Collection.count.getter(0, 0xE000000000000000);
  swift_bridgeObjectRetain();
  v71 = specialized BidirectionalCollection.dropLast(_:)(v70, a1, a2);
  v73 = v72;
  v75 = v74;
  v77 = v76;
  swift_bridgeObjectRelease();
  if (v71 >> 14 == v73 >> 14)
  {
LABEL_171:
    swift_bridgeObjectRelease();
LABEL_172:
    swift_bridgeObjectRelease();
LABEL_173:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v81 = 1;
    goto LABEL_165;
  }
  while (1)
  {
    Substring.UnicodeScalarView.formIndex(before:)();
    _StringGuts.validateScalarIndex(_:in:)(v73, v71, v73, v75, v77);
    if ((v77 & 0x1000000000000000) != 0)
    {
      v78 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((v77 & 0x2000000000000000) == 0 && (v75 & 0x1000000000000000) == 0)
        _StringObject.sharedUTF8.getter();
      v78 = _decodeScalar(_:startingAt:)();
    }
    v79 = v78;
    if (v78 != 1105 && (v78 - 1072) >= 0x20 && v78 != 45 && (v78 - 48) > 9)
      break;
    if (v71 >> 14 == v73 >> 14)
      goto LABEL_171;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v29 = v79 == 46;
LABEL_104:
  v81 = v29;
LABEL_165:
  swift_bridgeObjectRelease();
  return v81;
}

unint64_t lazy protocol witness table accessor for type [Unicode.Scalar] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [Unicode.Scalar] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Unicode.Scalar] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Unicode.Scalar]);
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Unicode.Scalar] and conformance [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Substring.UnicodeScalarView and conformance Substring.UnicodeScalarView()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Substring.UnicodeScalarView and conformance Substring.UnicodeScalarView;
  if (!lazy protocol witness table cache variable for type Substring.UnicodeScalarView and conformance Substring.UnicodeScalarView)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEBA58], MEMORY[0x1E0DEBA48]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring.UnicodeScalarView and conformance Substring.UnicodeScalarView);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Substring.UnicodeScalarView and conformance Substring.UnicodeScalarView;
  if (!lazy protocol witness table cache variable for type Substring.UnicodeScalarView and conformance Substring.UnicodeScalarView)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEBA50], MEMORY[0x1E0DEBA48]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring.UnicodeScalarView and conformance Substring.UnicodeScalarView);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Substring.UnicodeScalarView and conformance Substring.UnicodeScalarView;
  if (!lazy protocol witness table cache variable for type Substring.UnicodeScalarView and conformance Substring.UnicodeScalarView)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEBA60], MEMORY[0x1E0DEBA48]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring.UnicodeScalarView and conformance Substring.UnicodeScalarView);
  }
  return result;
}

uint64_t PredicateExpressions.Equal.lhs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t PredicateExpressions.Equal.rhs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 60));
}

void PredicateExpressions.Equal.init(lhs:rhs:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
  type metadata accessor for PredicateExpressions.Equal();
}

uint64_t sub_181D5B408(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v3 + *(int *)(a1 + 60), v2, v1);
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.Equal(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_181D5B51C + 4 * byte_182152EA8[v17 - 1]))();
}

void storeEnumTagSinglePayload for PredicateExpressions.Equal(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

void Substring._enumerateComponents(separatedBy:options:withBlock:)(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, void (*a6)(uint64_t), uint64_t a7, unint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t, uint64_t, uint64_t);
  void (*v47)(char *, uint64_t, uint64_t, uint64_t);
  char *v48;
  uint64_t v49;
  os_unfair_lock_s *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  char *v59;
  char *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(uint64_t);
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;

  v99 = a5;
  v95 = a7;
  v96 = a6;
  v93 = a3;
  v94 = a4;
  v102 = a10;
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Regex<AnyRegexOutput>.Match?);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v74 - v18;
  v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>.Match);
  v80 = *(_QWORD *)(v81 - 8);
  MEMORY[0x1E0C80A78](v81);
  v78 = (char *)&v74 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v77 = (char *)&v74 - v22;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>?);
  MEMORY[0x1E0C80A78](v23);
  v82 = (char *)&v74 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  v26 = *(_QWORD *)(v25 - 8);
  v91 = v25;
  v92 = v26;
  MEMORY[0x1E0C80A78](v25);
  v90 = (char *)&v74 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = a9;
  v28 = a9 >> 14;
  v29 = a8 >> 14;
  if (a8 >> 14 < a9 >> 14)
  {
    v75 = v19;
    v76 = v16;
    v89 = a1;
    v79 = a2 ^ a1;
    v30 = a8;
    v86 = a11;
    v87 = a8;
    v85 = a2;
    v88 = a9 >> 14;
    while (1)
    {
      if (v28 < v29)
        goto LABEL_39;
      swift_bridgeObjectRetain();
      v31 = Substring.subscript.getter();
      v33 = v32;
      v35 = v34;
      v107 = v36;
      swift_bridgeObjectRelease();
      v37 = v99;
      v100 = v30;
      if ((v99 & 0x400) != 0)
      {
        v84 = v35;
        v83 = v31;
        v97 = v29;
        v43 = v89;
        if (one-time initialization token for cache != -1)
          swift_once();
        v44 = static RegexPatternCache.cache;
        swift_retain();
        v45 = MEMORY[0x186DA4634](v43, a2, v93, v94);
        v47 = v46;
        swift_retain();
        os_unfair_lock_lock((os_unfair_lock_t)(v44 + 24));
        v48 = v82;
        v49 = v98;
        closure #1 in RegexPatternCache.regex(for:caseInsensitive:)((uint64_t *)(v44 + 16), v45, (uint64_t)v47, v37 & 1, v45, v47, v37 & 1, v82);
        v98 = v49;
        v50 = (os_unfair_lock_s *)(v44 + 24);
        if (v49)
        {
          os_unfair_lock_unlock(v50);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release_n();
          return;
        }
        os_unfair_lock_unlock(v50);
        swift_bridgeObjectRelease();
        swift_release_n();
        v52 = v91;
        v51 = v92;
        v53 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v92 + 48))(v48, 1, v91);
        v54 = v84;
        if (v53 == 1)
        {
          outlined destroy of Any?((uint64_t)v48, &demangling cache variable for type metadata for Regex<AnyRegexOutput>?);
          goto LABEL_35;
        }
        (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v90, v48, v52);
        if ((v99 & 8) != 0)
        {
          v103 = v83;
          v104 = v33;
          v105 = v54;
          v106 = v107;
          lazy protocol witness table accessor for type Substring and conformance Substring();
          lazy protocol witness table accessor for type Regex<AnyRegexOutput> and conformance Regex<A>();
          v66 = (uint64_t)v75;
          BidirectionalCollection<>.prefixMatch<A>(of:)();
          v56 = v80;
          v57 = v81;
          v67 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v80 + 48))(v66, 1, v81);
          a2 = v85;
          if (v67 == 1)
          {
            (*(void (**)(char *, uint64_t))(v92 + 8))(v90, v52);
            v73 = v66;
            goto LABEL_34;
          }
          v60 = v77;
          (*(void (**)(char *, uint64_t, uint64_t))(v56 + 32))(v77, v66, v57);
        }
        else
        {
          v103 = v83;
          v104 = v33;
          v105 = v54;
          v106 = v107;
          type metadata accessor for AnyRegexOutput();
          lazy protocol witness table accessor for type Substring and conformance Substring();
          lazy protocol witness table accessor for type Regex<AnyRegexOutput> and conformance Regex<A>();
          v55 = (uint64_t)v76;
          BidirectionalCollection<>.firstMatch<A, B>(of:)();
          v56 = v80;
          v57 = v81;
          v58 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v80 + 48))(v55, 1, v81);
          a2 = v85;
          if (v58 == 1)
          {
            (*(void (**)(char *, uint64_t))(v92 + 8))(v90, v52);
            v73 = v55;
LABEL_34:
            outlined destroy of Any?(v73, (uint64_t *)&demangling cache variable for type metadata for Regex<AnyRegexOutput>.Match?);
LABEL_35:
            v29 = v97;
LABEL_36:
            swift_bridgeObjectRelease();
LABEL_37:
            if (v88 >= v29)
              goto LABEL_28;
            goto LABEL_38;
          }
          v59 = v78;
          (*(void (**)(char *, uint64_t, uint64_t))(v56 + 32))(v78, v55, v57);
          v60 = v59;
        }
        v68 = v56;
        v38 = Regex.Match.range.getter();
        v40 = v69;
        (*(void (**)(char *, uint64_t))(v68 + 8))(v60, v57);
        (*(void (**)(char *, uint64_t))(v92 + 8))(v90, v91);
        swift_bridgeObjectRelease();
        v29 = v97;
      }
      else
      {
        if ((v31 ^ v33) < 0x4000 || v79 < 0x4000)
          goto LABEL_36;
        if ((v99 & 2) != 0)
        {
          v61 = v35;
          v62 = v107;
          swift_bridgeObjectRetain();
          v97 = v29;
          v63 = v94;
          swift_bridgeObjectRetain();
          v38 = specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v89, v85, v93, v63, BYTE1(v37) & 1, (v37 & 0x80) != 0, v37 & 1, (v37 >> 3) & 1, (v37 & 4) != 0, v31, v33, v61, v62);
          v40 = v64;
          v42 = v65;
          swift_bridgeObjectRelease_n();
          v29 = v97;
          a2 = v85;
        }
        else
        {
          v38 = specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v89, a2, v93, v94, (v99 >> 8) & 1, (v99 >> 7) & 1, v99 & 1, (v99 >> 3) & 1, (v99 & 4) != 0, v31, v33, v35, v107);
          v40 = v39;
          v42 = v41;
        }
        swift_bridgeObjectRelease();
        if ((v42 & 1) != 0)
          goto LABEL_37;
      }
      v70 = v40 >> 14;
      if (v38 >> 14 == v40 >> 14)
        goto LABEL_37;
      if (v38 >> 14 < v29)
        goto LABEL_40;
      v71 = Substring.subscript.getter();
      v96(v71);
      swift_bridgeObjectRelease();
      v30 = v40;
      v29 = v40 >> 14;
      v28 = v88;
      if (v70 >= v88)
        goto LABEL_27;
    }
  }
  v70 = a8 >> 14;
LABEL_27:
  if (v28 < v70)
  {
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
  }
  else
  {
LABEL_28:
    v72 = Substring.subscript.getter();
    v96(v72);
    swift_bridgeObjectRelease();
  }
}

uint64_t UInt8._lowercased.getter(int a1)
{
  return ((0x3FFE000000000uLL >> ((a1 - 1) >> 1)) & 0x20) + a1;
}

uint64_t static UInt8.newline.getter()
{
  return 10;
}

uint64_t static UInt8.carriageReturn.getter()
{
  return 13;
}

uint64_t UInt8._numericValue.getter(char a1)
{
  if ((a1 - 58) >= 0xF6u)
    return (a1 - 48);
  else
    return 0;
}

uint64_t UInt8._uppercased.getter(int a1)
{
  return a1 - 32 * ((0x1FFF000000000000uLL >> ((a1 - 1) >> 1)) & 1);
}

Swift::String __swiftcall Character._transform(toHalfWidth:stripDiacritics:caseFolding:)(Swift::Bool toHalfWidth, Swift::Bool stripDiacritics, Swift::Bool caseFolding)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  void *v13;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  Swift::String result;
  _QWORD v38[2];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _BOOL4 v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;

  v5 = v4;
  v6 = v3;
  v45 = caseFolding;
  v50 = *MEMORY[0x1E0C80C00];
  v9 = type metadata accessor for Unicode.Scalar.Properties();
  v42 = *(_QWORD *)(v9 - 8);
  v43 = v9;
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v6 != 2573 || v5 != 0xE200000000000000) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    if ((Character._isSingleScalar.getter() & 1) != 0)
    {
      v12 = specialized Collection.first.getter(v6, v5);
      if ((v12 & 0x100000000) != 0)
      {
        __break(1u);
        goto LABEL_67;
      }
      if ((v12 & 0xFFFFFF80) == 0)
      {
        v12 = specialized Collection.first.getter(v6, v5);
        if ((v12 & 0x100000000) == 0)
        {
          if ((v12 & 0xFFFFFF00) != 0)
            __break(1u);
          goto LABEL_9;
        }
LABEL_67:
        __break(1u);
        goto LABEL_68;
      }
    }
    v17 = 0xE000000000000000;
    v48 = 0;
    v49 = 0xE000000000000000;
    v40 = v6 & 0xFFFFFFFFFFFFLL;
    v41 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) != 0)
      v18 = HIBYTE(v5) & 0xF;
    else
      v18 = v6 & 0xFFFFFFFFFFFFLL;
    if (!v18)
      goto LABEL_64;
    v38[1] = (v5 & 0xFFFFFFFFFFFFFFFLL) + 32;
    v39 = v5 & 0xFFFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain();
    v19 = 0;
    v44 = v6;
    while (1)
    {
      if ((v5 & 0x1000000000000000) != 0)
      {
        v25 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((v5 & 0x2000000000000000) != 0)
        {
          v46 = v6;
          v47 = v39;
        }
        else if ((v6 & 0x1000000000000000) == 0)
        {
          _StringObject.sharedUTF8.getter();
        }
        v25 = _decodeScalar(_:startingAt:)();
      }
      v27 = v25;
      v28 = v26;
      if (toHalfWidth)
      {
        if (v25 >> 8 < 0xFF || v25 > 0xFFEE)
        {
          v29 = v25;
          if (!stripDiacritics)
            goto LABEL_47;
        }
        else
        {
          LODWORD(v46) = v25;
          v25 = CFUniCharCompatibilityDecompose();
          v29 = v46;
          v17 = v46 >> 11;
          if ((_DWORD)v17 == 27)
            goto LABEL_63;
          v17 = WORD1(v46);
          if (v17 > 0x10)
          {
            __break(1u);
LABEL_63:
            __break(1u);
LABEL_64:
            v36 = 0;
LABEL_59:
            v46 = v36;
            v47 = v17;
            countAndFlagsBits = String.init<A>(_:)();
LABEL_60:
            v6 = countAndFlagsBits;
            v5 = (unint64_t)object;
            goto LABEL_61;
          }
          if (!stripDiacritics)
            goto LABEL_47;
        }
      }
      else
      {
        v29 = v25;
        if (!stripDiacritics)
          goto LABEL_47;
      }
      if (BYTE2(v27) <= 0xEu)
      {
        v30 = (uint64_t)*(&__CFUniCharGraphemeExtendCharacterSetBitmap_1 + BYTE2(v27));
        if (v30)
        {
          if (((*(unsigned __int8 *)(v30 + ((unsigned __int16)v27 >> 3)) >> (v27 & 7)) & 1) != 0)
            goto LABEL_19;
        }
      }
      if (BYTE2(v29) > 2u
        || (v31 = (uint64_t)*(&__CFUniCharCanonicalDecomposableCharacterSetBitmap_1 + BYTE2(v29))) == 0
        || ((*(unsigned __int8 *)(v31 + ((unsigned __int16)v29 >> 3)) >> (v29 & 7)) & 1) == 0)
      {
LABEL_47:
        if (!v45)
          goto LABEL_48;
        goto LABEL_17;
      }
      MEMORY[0x1E0C80A78](v25);
      if (CFUniCharDecomposeCharacter() >= 1 && LODWORD(v38[-32]) < 0x510)
        v29 = v38[-32];
      v6 = v44;
      if (!v45)
      {
LABEL_48:
        if (v29 > 0x7F)
        {
          v33 = (v29 & 0x3F) << 8;
          if (v29 >= 0x800)
          {
            v34 = (v33 | (v29 >> 6) & 0x3F) << 8;
            v35 = (((v34 | (v29 >> 12) & 0x3F) << 8) | (v29 >> 18)) - 2122219023;
            v32 = (v34 | (v29 >> 12)) + 8487393;
            if (HIWORD(v29))
              v32 = v35;
          }
          else
          {
            v32 = (v33 | (v29 >> 6)) + 33217;
          }
        }
        else
        {
          v32 = v29 + 1;
        }
        v46 = (v32 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v32) >> 3))));
        v23 = MEMORY[0x186DA46D0](&v46);
        goto LABEL_18;
      }
LABEL_17:
      Unicode.Scalar.properties.getter();
      v20 = Unicode.Scalar.Properties._caseFolded.getter();
      v22 = v21;
      (*(void (**)(char *, uint64_t))(v42 + 8))(v11, v43);
      v23 = v20;
      v6 = v44;
      v24 = v22;
LABEL_18:
      String.append(_:)(*(Swift::String *)&v23);
      swift_bridgeObjectRelease();
LABEL_19:
      v19 += v28;
      if (v19 >= v18)
      {
        swift_bridgeObjectRelease();
        v36 = v48;
        v17 = v49;
        goto LABEL_59;
      }
    }
  }
LABEL_9:
  if (v45)
  {
    v16 = String.lowercased()();
    object = v16._object;
    countAndFlagsBits = v16._countAndFlagsBits;
    goto LABEL_60;
  }
  swift_bridgeObjectRetain();
LABEL_61:
  v12 = v6;
  v13 = (void *)v5;
LABEL_68:
  result._object = v13;
  result._countAndFlagsBits = v12;
  return result;
}

unint64_t Character.isExtendCharacter.getter(unint64_t a1, unint64_t a2)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 == 2573 && a2 == 0xE200000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    return 0;
  if ((Character._isSingleScalar.getter() & 1) == 0)
    goto LABEL_10;
  result = specialized Collection.first.getter(a1, a2);
  if ((result & 0x100000000) != 0)
  {
    __break(1u);
    goto LABEL_32;
  }
  if ((result & 0xFFFFFF80) != 0)
  {
LABEL_10:
    if ((a2 & 0x2000000000000000) != 0)
      v6 = HIBYTE(a2) & 0xF;
    else
      v6 = a1 & 0xFFFFFFFFFFFFLL;
    if (!v6)
      return 1;
    swift_bridgeObjectRetain();
    v7 = 0;
    while (1)
    {
      if ((a2 & 0x1000000000000000) != 0)
      {
        v8 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0)
          _StringObject.sharedUTF8.getter();
        v8 = _decodeScalar(_:startingAt:)();
      }
      if (BYTE2(v8) > 0xEu)
        break;
      v10 = (uint64_t)*(&__CFUniCharGraphemeExtendCharacterSetBitmap_1 + BYTE2(v8));
      if (!v10 || ((*(unsigned __int8 *)(v10 + ((unsigned __int16)v8 >> 3)) >> (v8 & 7)) & 1) == 0)
        break;
      v7 += v9;
      if (v7 >= v6)
      {
        v5 = 1;
        goto LABEL_27;
      }
    }
    v5 = 0;
LABEL_27:
    swift_bridgeObjectRelease();
    return v5;
  }
  result = specialized Collection.first.getter(a1, a2);
  if ((result & 0x100000000) == 0)
  {
    if ((result & 0xFFFFFF00) != 0)
      __break(1u);
    return 0;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t Unicode.Scalar._transform(toHalfWidth:stripDiacritics:caseFolding:)(char a1, char a2, char a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v17;
  unsigned int v18;
  unsigned int v19;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  v8 = type metadata accessor for Unicode.Scalar.Properties();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) != 0 && a4 >> 8 >= 0xFF && a4 <= 0xFFEE)
  {
    LODWORD(v20[0]) = a4;
    CFUniCharCompatibilityDecompose();
    a4 = LODWORD(v20[0]);
    if (LODWORD(v20[0]) >> 11 == 27)
      __break(1u);
    if (HIWORD(LODWORD(v20[0])) > 0x10u)
    {
      __break(1u);
      goto LABEL_17;
    }
  }
  if ((a2 & 1) == 0)
  {
LABEL_10:
    if ((a3 & 1) != 0)
    {
      Unicode.Scalar.properties.getter();
      v14 = Unicode.Scalar.Properties._caseFolded.getter();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      return v14;
    }
    if (a4 <= 0x7F)
    {
      v15 = a4 + 1;
LABEL_14:
      v20[0] = (v15 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v15) >> 3))));
      return MEMORY[0x186DA46D0](v20, v10);
    }
LABEL_17:
    v17 = (a4 & 0x3F) << 8;
    if (a4 >= 0x800)
    {
      v18 = (v17 | (a4 >> 6) & 0x3F) << 8;
      v19 = (((v18 | (a4 >> 12) & 0x3F) << 8) | (a4 >> 18)) - 2122219023;
      v15 = (v18 | (a4 >> 12)) + 8487393;
      if (WORD1(a4))
        v15 = v19;
    }
    else
    {
      v15 = (v17 | (a4 >> 6)) + 33217;
    }
    goto LABEL_14;
  }
  v13 = BuiltInUnicodeScalarSet._bitmapPtrForPlane(_:)(BYTE2(a4), 5);
  if (!BuiltInUnicodeScalarSet._isMemberOfBitmap(_:_:)(a4, v13, 0x700030005))
  {
    LODWORD(a4) = Unicode.Scalar._stripDiacritics()(a4);
    goto LABEL_10;
  }
  return 0;
}

uint64_t Substring._unlocalizedCompare(other:options:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, unint64_t a8, unint64_t a9)
{
  uint64_t v17;
  BOOL v18;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;

  if (!a5)
  {
    if (a8 == a3)
    {
      v18 = a9 == a4 && a6 >> 16 == a1 >> 16;
      if (v18 && a7 >> 16 == a2 >> 16)
        return 0;
    }
    v17 = 1;
    if ((_stringCompareInternal(_:_:_:_:expecting:)() & 1) != 0)
      return -1;
    if ((_stringCompareInternal(_:_:_:_:expecting:)() & 1) == 0)
      return 0;
    return v17;
  }
  if ((a5 & 2) != 0)
  {
    v22 = (a5 >> 9) & 1;
    v25 = (a5 >> 6) & 1;
    v24 = a5 & 1;
    v23 = (a5 >> 8) & 1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17 = specialized _StringCompareOptionsIterable._compare<A>(_:toHalfWidth:diacriticsInsensitive:caseFold:numeric:forceOrdering:)(a1, a2, a3, a4, v23, (a5 >> 7) & 1, v24, v25, v22, a6, a7, a8, a9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((a5 & 0x200) == 0)
      return v17;
  }
  else
  {
    v17 = specialized _StringCompareOptionsIterable._compare<A>(_:toHalfWidth:diacriticsInsensitive:caseFold:numeric:forceOrdering:)(a1, a2, a3, a4, (a5 >> 8) & 1, (a5 >> 7) & 1, a5 & 1, (a5 >> 6) & 1, (a5 & 0x200) != 0, a6, a7, a8, a9);
    if ((a5 & 0x200) == 0)
      return v17;
  }
  if (!v17)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v21 = Substring.UnicodeScalarView._compare(_:)(a1, a2, a3, a4, a6, a7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v21;
  }
  return v17;
}

uint64_t Substring.UnicodeScalarView._compare(_:)(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v12;

  v7 = a6 >> 14;
  v8 = a5 >> 14;
  if (a5 >> 14 >= a6 >> 14 || (v12 = a2 >> 14, a2 >> 14 <= a1 >> 14))
  {
LABEL_6:
    if (v8 == v7)
    {
      if ((a1 ^ a2) >> 14)
        return -1;
      else
        return 0;
    }
    else
    {
      return 1;
    }
  }
  else
  {
    while (1)
    {
      v9 = Substring.UnicodeScalarView.subscript.getter();
      v10 = Substring.UnicodeScalarView.subscript.getter();
      if (v9 != v10)
        break;
      Substring.UnicodeScalarView.formIndex(after:)();
      Substring.UnicodeScalarView.formIndex(after:)();
      v8 = a5 >> 14;
      if (a5 >> 14 >= v7 || v12 <= a1 >> 14)
        goto LABEL_6;
    }
    if (v9 >= v10)
      return v10 < v9;
    else
      return -1;
  }
}

uint64_t _allASCII(_:)(char *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 v5;
  int v6;
  uint64_t v8;

  if (!a2)
    return 1;
  if ((a1 & 7) != 0)
  {
    if (a2 >= 1)
    {
      if (*a1 < 0)
        return 0;
      v2 = 1;
      v3 = 9;
      if (a2 >= 2 && (((_BYTE)a1 + 1) & 7) != 0)
      {
        if (a1[1] < 0)
          return 0;
        v2 = 2;
        v3 = 10;
        if (a2 >= 3 && (((_BYTE)a1 + 2) & 7) != 0)
        {
          if (a1[2] < 0)
            return 0;
          v2 = 3;
          v3 = 11;
          if (a2 >= 4 && (((_BYTE)a1 + 3) & 7) != 0)
          {
            if (a1[3] < 0)
              return 0;
            v2 = 4;
            v3 = 12;
            if (a2 >= 5 && (((_BYTE)a1 + 4) & 7) != 0)
            {
              if (a1[4] < 0)
                return 0;
              v2 = 5;
              v3 = 13;
              if (a2 >= 6 && (((_BYTE)a1 + 5) & 7) != 0)
              {
                if (a1[5] < 0)
                  return 0;
                v2 = 6;
                v3 = 14;
                if (a2 >= 7 && (((_BYTE)a1 + 6) & 7) != 0)
                {
                  if (a1[6] < 0)
                    return 0;
                  v2 = 7;
                  v3 = 15;
                  if (a2 >= 8 && (((_BYTE)a1 - 1) & 7) != 0)
                  {
                    if (a1[7] < 0)
                      return 0;
                    v2 = 8;
                    v3 = 16;
                    if (a2 >= 9 && (a1 & 7) != 0)
                      return 0;
                  }
                }
              }
            }
          }
        }
      }
      if (v3 <= a2)
        goto LABEL_40;
      if (v2 < a2)
      {
LABEL_30:
        if (a1[v2] < 0)
          return 0;
        goto LABEL_35;
      }
    }
    return 1;
  }
  if (a2 > 7)
  {
    v2 = 0;
    v3 = 8;
LABEL_40:
    while ((*(_QWORD *)&a1[v2] & 0x8080808080808080) == 0)
    {
      v8 = v3 + 8;
      v2 = v3;
      v3 = v8;
      if (v8 > a2)
      {
        v2 = v8 - 8;
        if (v8 - 8 < a2)
          goto LABEL_30;
        return 1;
      }
    }
    return 0;
  }
  if (a2 <= 0)
    return 1;
  v2 = 0;
  if (*a1 < 0)
    return 0;
LABEL_35:
  v4 = v2 + 1;
  do
  {
    v5 = v4 >= a2;
    if (v4 >= a2)
      break;
    v6 = a1[v4++];
  }
  while ((v6 & 0x80000000) == 0);
  return v5;
}

unint64_t lazy protocol witness table accessor for type Character and conformance Character()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Character and conformance Character;
  if (!lazy protocol witness table cache variable for type Character and conformance Character)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Character, MEMORY[0x1E0DEA2D0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Character and conformance Character);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for String(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type String and conformance String();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Substring(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Substring and conformance Substring();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type Unicode.Scalar and conformance Unicode.Scalar()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Unicode.Scalar and conformance Unicode.Scalar;
  if (!lazy protocol witness table cache variable for type Unicode.Scalar and conformance Unicode.Scalar)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Unicode.Scalar, MEMORY[0x1E0DEE720]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Unicode.Scalar and conformance Unicode.Scalar);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for String.UnicodeScalarView(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type String.UnicodeScalarView and conformance String.UnicodeScalarView();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type String.UnicodeScalarView and conformance String.UnicodeScalarView()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.UnicodeScalarView and conformance String.UnicodeScalarView;
  if (!lazy protocol witness table cache variable for type String.UnicodeScalarView and conformance String.UnicodeScalarView)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEA6D8], MEMORY[0x1E0DEA6D0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.UnicodeScalarView and conformance String.UnicodeScalarView);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.UnicodeScalarView and conformance String.UnicodeScalarView;
  if (!lazy protocol witness table cache variable for type String.UnicodeScalarView and conformance String.UnicodeScalarView)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.UnicodeScalarView, MEMORY[0x1E0DEA6D0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.UnicodeScalarView and conformance String.UnicodeScalarView);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.UnicodeScalarView and conformance String.UnicodeScalarView;
  if (!lazy protocol witness table cache variable for type String.UnicodeScalarView and conformance String.UnicodeScalarView)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEA6E0], MEMORY[0x1E0DEA6D0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.UnicodeScalarView and conformance String.UnicodeScalarView);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for Substring.UnicodeScalarView(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Substring.UnicodeScalarView and conformance Substring.UnicodeScalarView();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for String.UTF8View(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type String.UTF8View and conformance String.UTF8View();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type String.UTF8View and conformance String.UTF8View()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.UTF8View and conformance String.UTF8View;
  if (!lazy protocol witness table cache variable for type String.UTF8View and conformance String.UTF8View)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEA898], MEMORY[0x1E0DEA890]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.UTF8View and conformance String.UTF8View);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.UTF8View and conformance String.UTF8View;
  if (!lazy protocol witness table cache variable for type String.UTF8View and conformance String.UTF8View)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.UTF8View, MEMORY[0x1E0DEA890]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.UTF8View and conformance String.UTF8View);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for Substring.UTF8View(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Substring.UTF8View and conformance Substring.UTF8View();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type Substring.UTF8View and conformance Substring.UTF8View()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Substring.UTF8View and conformance Substring.UTF8View;
  if (!lazy protocol witness table cache variable for type Substring.UTF8View and conformance Substring.UTF8View)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEBAC8], MEMORY[0x1E0DEBAC0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring.UTF8View and conformance Substring.UTF8View);
  }
  return result;
}

unint64_t _StringGuts.validateScalarIndex(_:in:)(unint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  char v9;
  unint64_t v10;
  uint64_t v11;

  v9 = (a5 & 0x1000000000000000) == 0 || (a4 & 0x800000000000000) != 0;
  v10 = result & 0xC;
  v11 = 4 << v9;
  if ((result & 1) == 0 || v10 == v11)
  {
LABEL_9:
    if (v10 == v11)
      result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a4, a5);
    if (result >> 14 < a2 >> 14 || result >> 14 >= a3 >> 14)
    {
      __break(1u);
    }
    else if ((result & 1) != 0)
    {
      return result;
    }
    return result & 0xC | _StringGuts.scalarAlignSlow(_:)(result, a4, a5) & 0xFFFFFFFFFFFFFFF3 | 1;
  }
  v10 = result >> 14;
  if (result >> 14 < a2 >> 14 || (v11 = a3 >> 14, v10 >= a3 >> 14))
  {
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

unint64_t specialized Substring.UnicodeScalarView._rangeOfCharacter(anchored:backwards:matchingPredicate:)(unint64_t result, char a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  UTF32Char v19;
  unint64_t v20;
  uint64_t i;

  v7 = a3 >> 14;
  v8 = a4 >> 14;
  if (a3 >> 14 == a4 >> 14)
  {
    return 0;
  }
  else
  {
    v14 = result;
    if ((a2 & 1) != 0)
    {
      result = Substring.UnicodeScalarView.index(before:)();
      v9 = result;
      if ((v14 & 1) != 0)
        v15 = result;
      else
        v15 = a3;
    }
    else
    {
      if ((result & 1) != 0)
      {
        v15 = a3;
      }
      else
      {
        result = Substring.UnicodeScalarView.index(before:)();
        v15 = result;
      }
      v9 = a3;
    }
    v16 = (a5 >> 59) & 1;
    if ((a6 & 0x1000000000000000) == 0)
      LOBYTE(v16) = 1;
    v17 = 4 << v16;
    v20 = v15;
    for (i = 4 << v16; ; v17 = i)
    {
      if ((v9 & 0xC) == v17 || (v9 & 1) == 0)
      {
        result = v9;
        if ((v9 & 0xC) == v17)
          result = _StringGuts._slowEnsureMatchingEncoding(_:)(v9, a5, a6);
        if (result >> 14 < v7 || result >> 14 >= v8)
        {
          __break(1u);
LABEL_39:
          __break(1u);
          goto LABEL_40;
        }
        if ((result & 1) == 0)
          _StringGuts.scalarAlignSlow(_:)(result, a5, a6);
      }
      else
      {
        if (v9 >> 14 < v7)
          goto LABEL_39;
        result = v9;
        if (v9 >> 14 >= v8)
          goto LABEL_39;
      }
      if ((a6 & 0x1000000000000000) != 0)
      {
        v19 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((a6 & 0x2000000000000000) == 0 && (a5 & 0x1000000000000000) == 0)
          _StringObject.sharedUTF8.getter();
        v19 = _decodeScalar(_:startingAt:)();
        v15 = v20;
      }
      if (CFCharacterSetIsLongCharacterMember(*(CFCharacterSetRef *)(a7 + 16), v19))
        break;
      if ((v9 ^ v15) < 0x4000)
        return 0;
      result = Substring.UnicodeScalarView.index(_:offsetBy:)();
      v9 = result;
    }
    result = Substring.UnicodeScalarView.index(after:)();
    if (result >> 14 >= v9 >> 14)
      return v9;
LABEL_40:
    __break(1u);
  }
  return result;
}

id @objc static NSLocale._currentLocaleWithBundleLocalizations(_:allowsMixedLocalizations:)(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v5;
  id v6;

  v5 = specialized static Array._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v6 = specialized static NSLocale._currentLocaleWithBundleLocalizations(_:allowsMixedLocalizations:)(v5, a4);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t @objc static NSLocale._resetCurrent()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;

  if (one-time initialization token for cache != -1)
    swift_once();
  v0 = static LocaleCache.cache + 16;
  v1 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in LocaleCache.reset()(v0);
  os_unfair_lock_unlock(v1);
  return swift_release_n();
}

id @objc static NSLocale._availableLocaleIdentifiers.getter()
{
  specialized static Locale.availableIdentifiers.getter();
  return (id)_ContiguousArrayBuffer._asCocoaArray()();
}

id @objc static NSLocale._isoLanguageCodes.getter(uint64_t a1, uint64_t a2)
{
  return @objc static NSLocale._isoLanguageCodes.getter(a1, a2, &one-time initialization token for _isoLanguageCodeStrings);
}

uint64_t static Locale.isoLanguageCodes.getter()
{
  return static Locale.isoLanguageCodes.getter(&one-time initialization token for _isoLanguageCodeStrings);
}

uint64_t static Locale.isoRegionCodes.getter()
{
  return static Locale.isoLanguageCodes.getter(&one-time initialization token for isoCountries);
}

uint64_t static Locale.isoLanguageCodes.getter(_QWORD *a1)
{
  if (*a1 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

id @objc static NSLocale._isoCurrencyCodes.getter()
{
  specialized static Locale.isoCurrencyCodes.getter();
  return (id)_ContiguousArrayBuffer._asCocoaArray()();
}

id @objc static NSLocale._commonISOCurrencyCodes.getter()
{
  specialized static Locale.Currency.commonISOCurrencies.getter();
  return (id)_ContiguousArrayBuffer._asCocoaArray()();
}

uint64_t @objc static NSLocale._windowsLocaleCode(fromLocaleIdentifier:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;

  static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v3 = specialized static NSLocale._windowsLocaleCode(fromLocaleIdentifier:)();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t static Locale.lineDirection(forLanguage:)(uint64_t a1, uint64_t a2)
{
  return static Locale.characterDirection(forLanguage:)(a1, a2, Locale.Language.lineLayoutDirection.getter);
}

uint64_t @objc static NSLocale._lineDirection(forLanguage:)(uint64_t a1, uint64_t a2, void *a3)
{
  return @objc static NSLocale._characterDirection(forLanguage:)(a1, a2, a3, Locale.Language.lineLayoutDirection.getter);
}

id @objc static NSLocale._validNumberingSystems(forLocaleIdentifier:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  uint64_t v4;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  specialized static NSLocale._validNumberingSystems(forLocaleIdentifier:)((uint64_t)v3, v4);
  swift_bridgeObjectRelease();
  return (id)_ContiguousArrayBuffer._asCocoaArray()();
}

id @objc static NSLocale._localeIdentifierByReplacingLanguageCodeAndScriptCode(_:desiredComponents:)(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v7 = v6;
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a4);
  specialized static Locale.localeIdentifierByReplacingLanguageCodeAndScriptCode(localeIDWithDesiredLangCode:localeIDWithDesiredComponents:)((uint64_t)v5, v7, (uint64_t)v8, v9);
  v11 = v10;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v11)
  {
    v12 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = 0;
  }
  return v12;
}

id @objc NSLocale._localeWithNewCalendarIdentifier(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v3;

  if (a3)
    v3 = 0;
  else
    v3 = a1;
  return v3;
}

Swift::Bool __swiftcall NSLocale._doesNotRequireSpecialCaseHandling()()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t ObjectType;
  __int128 v10;

  v1 = objc_msgSend(v0, sel_localeIdentifier);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v4 = v3;

  if (one-time initialization token for cache != -1)
    swift_once();
  v5 = static LocaleCache.cache + 16;
  v6 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  closure #1 in LocaleCache.fixed(_:)(v5, (uint64_t)v2, v4, &v10);
  os_unfair_lock_unlock(v6);
  swift_bridgeObjectRelease();
  swift_release_n();
  v7 = *((_QWORD *)&v10 + 1);
  ObjectType = swift_getObjectType();
  LOBYTE(v7) = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 480))(ObjectType, v7);
  swift_unknownObjectRelease();
  return v7 & 1;
}

BOOL @objc NSLocale._doesNotRequireSpecialCaseHandling()(void *a1)
{
  id v1;
  Swift::Bool doesNotRequireSpecialCase;

  v1 = a1;
  doesNotRequireSpecialCase = NSLocale._doesNotRequireSpecialCaseHandling()();

  return doesNotRequireSpecialCase;
}

id _NSSwiftLocale.init(localeIdentifier:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  id v10;
  objc_super v12;
  __int128 v13;

  v5 = one-time initialization token for cache;
  v6 = v2;
  if (v5 != -1)
    swift_once();
  v7 = static LocaleCache.cache + 16;
  v8 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v8);
  closure #1 in LocaleCache.fixed(_:)(v7, a1, a2, &v13);
  os_unfair_lock_unlock(v8);
  swift_bridgeObjectRelease();
  swift_release_n();
  *(_OWORD *)&v6[OBJC_IVAR____NSSwiftLocale_locale] = v13;

  v9 = String._bridgeToObjectiveCImpl()();
  v12.receiver = v6;
  v12.super_class = (Class)type metadata accessor for _NSSwiftLocale();
  v10 = objc_msgSendSuper2(&v12, sel_initWithLocaleIdentifier_, v9);
  swift_unknownObjectRelease();
  return v10;
}

uint64_t _NSSwiftLocale.init(coder:)(void *a1)
{
  void *v1;
  _OWORD *v2;
  char *v4;
  id v5;
  uint64_t inited;
  uint64_t v7;
  _QWORD *v8;
  __int128 v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  os_unfair_lock_s *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  __int128 v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t result;
  objc_super v44;
  uint64_t v45;
  _QWORD *v46;
  _OWORD v47[2];
  __int128 v48;
  _OWORD v49[2];

  v4 = v1;
  if (!objc_msgSend(a1, sel_allowsKeyedCoding))
  {

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18205C850;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
    *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(inited + 40) = v7;
    *(_QWORD *)(inited + 48) = 0xD000000000000026;
    *(_QWORD *)(inited + 56) = 0x80000001823084C0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v8 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    outlined init with copy of (String, Any)(inited + 32, (uint64_t)&v48);
    v9 = v48;
    swift_retain();
    v10 = specialized __RawDictionaryStorage.find<A>(_:)(v9, *((uint64_t *)&v9 + 1));
    if ((v11 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      v8[(v10 >> 6) + 8] |= 1 << v10;
      *(_OWORD *)(v8[6] + 16 * v10) = v9;
      outlined init with take of Any(v49, (_OWORD *)(v8[7] + 32 * v10));
      v12 = v8[2];
      v13 = __OFADD__(v12, 1);
      v14 = v12 + 1;
      if (!v13)
      {
        v8[2] = v14;
        swift_release();
        swift_bridgeObjectRelease();
        static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
        v15 = objc_allocWithZone((Class)NSError);
        v16 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v17 = objc_msgSend(v15, sel_initWithDomain_code_userInfo_, v16, 4864, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v18 = objc_msgSend(v17, sel_domain);
        v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
        v21 = v20;

        if (v19 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v21 == v22)
          goto LABEL_21;
        v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v23 & 1) != 0)
        {
LABEL_23:
          objc_msgSend(a1, sel_failWithError_, _swift_stdlib_bridgeErrorToNSError());
          swift_unknownObjectRelease();

          type metadata accessor for _NSSwiftLocale();
          swift_deallocPartialClassInstance();
          return 0;
        }
        __break(1u);
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v2 = v47;
  v5 = objc_msgSend(a1, sel_decodeObjectForKey_, String._bridgeToObjectiveCImpl()());
  swift_unknownObjectRelease();
  if (v5)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    goto LABEL_11;
  }
LABEL_10:
  v2[1] = 0u;
  v47[0] = 0u;
LABEL_11:
  outlined init with take of LocalePreferences?((uint64_t)v47, (uint64_t)&v48, &demangling cache variable for type metadata for Any?);
  if (*((_QWORD *)&v49[0] + 1))
  {
    if ((swift_dynamicCast() & 1) != 0)
    {
      inited = v45;
      v8 = v46;
      if (one-time initialization token for cache == -1)
      {
LABEL_14:
        v24 = static LocaleCache.cache + 16;
        v25 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
        swift_retain_n();
        os_unfair_lock_lock(v25);
        closure #1 in LocaleCache.fixed(_:)(v24, inited, (uint64_t)v8, &v48);
        os_unfair_lock_unlock(v25);
        swift_bridgeObjectRelease();
        swift_release_n();
        *(_OWORD *)&v4[OBJC_IVAR____NSSwiftLocale_locale] = v2[2];

        v26 = String._bridgeToObjectiveCImpl()();
        v44.receiver = v4;
        v44.super_class = (Class)type metadata accessor for _NSSwiftLocale();
        v27 = objc_msgSendSuper2(&v44, sel_initWithLocaleIdentifier_, v26);
        swift_unknownObjectRelease();

        return (uint64_t)v27;
      }
LABEL_29:
      swift_once();
      goto LABEL_14;
    }

  }
  else
  {

    outlined destroy of Any?((uint64_t)&v48);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18205C850;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
  *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 40) = v28;
  *(_QWORD *)(inited + 48) = 0xD00000000000001DLL;
  *(_QWORD *)(inited + 56) = 0x80000001823084F0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v8 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (String, Any)(inited + 32, (uint64_t)&v48);
  v29 = v48;
  swift_retain();
  v30 = specialized __RawDictionaryStorage.find<A>(_:)(v29, *((uint64_t *)&v29 + 1));
  if ((v31 & 1) != 0)
    goto LABEL_27;
  v8[(v30 >> 6) + 8] |= 1 << v30;
  *(_OWORD *)(v8[6] + 16 * v30) = v29;
  outlined init with take of Any(v49, (_OWORD *)(v8[7] + 32 * v30));
  v32 = v8[2];
  v13 = __OFADD__(v32, 1);
  v33 = v32 + 1;
  if (v13)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v8[2] = v33;
  swift_release();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v34 = objc_allocWithZone((Class)NSError);
  v35 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v36 = objc_msgSend(v34, sel_initWithDomain_code_userInfo_, v35, 4864, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v37 = objc_msgSend(v36, sel_domain);
  v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
  v40 = v39;

  if (v38 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v40 == v41)
  {
LABEL_21:
    swift_bridgeObjectRelease_n();
    goto LABEL_23;
  }
  v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v42 & 1) != 0)
    goto LABEL_23;
  __break(1u);
  return result;
}

uint64_t _NSSwiftLocale.variantCode.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t (*v3)(uint64_t, uint64_t);
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____NSSwiftLocale_locale + 8);
  ObjectType = swift_getObjectType();
  v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 168);
  swift_unknownObjectRetain();
  v5 = v3(ObjectType, v1);
  if (v4)
  {
    if ((v4 & 0x2000000000000000) != 0)
      v6 = HIBYTE(v4) & 0xF;
    else
      v6 = v5 & 0xFFFFFFFFFFFFLL;
    swift_unknownObjectRelease();
    if (!v6)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  else
  {
    swift_unknownObjectRelease();
  }
  return v5;
}

uint64_t _NSSwiftLocale.exemplarCharacterSet.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t ObjectType;
  void (*v5)(CFAllocatorRef *__return_ptr, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v7;
  CFAllocatorRef alloc;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____NSSwiftLocale_locale + 8);
  ObjectType = swift_getObjectType();
  v5 = *(void (**)(CFAllocatorRef *__return_ptr, uint64_t, uint64_t))(v3 + 184);
  swift_unknownObjectRetain();
  v5(&alloc, ObjectType, v3);
  swift_unknownObjectRelease();
  result = (uint64_t)alloc;
  if (alloc)
    goto LABEL_4;
  result = (uint64_t)CFCharacterSetCreateMutable(0);
  if (result)
  {
    v7 = result;
    type metadata accessor for __CharacterSetStorage();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v7;
    *(_BYTE *)(result + 24) = 1;
LABEL_4:
    *a1 = result;
    return result;
  }
  __break(1u);
  return result;
}

Swift::String_optional __swiftcall _NSSwiftLocale.localizedString(forCalendarIdentifier:)(Swift::String forCalendarIdentifier)
{
  uint64_t v1;
  void *v2;
  char v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  void *v9;
  uint64_t v10;
  void *v11;
  Swift::String_optional result;
  char v13;
  char v14;

  v2 = (void *)String._bridgeToObjectiveCImpl()();
  static Calendar._fromNSCalendarIdentifier(_:)(v2, &v14);
  swift_unknownObjectRelease();
  v3 = v14;
  if (v14 == 16)
  {
    v4 = 0;
    v5 = 0;
  }
  else
  {
    v6 = *(_QWORD *)(v1 + OBJC_IVAR____NSSwiftLocale_locale + 8);
    ObjectType = swift_getObjectType();
    v13 = v3;
    v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 112);
    swift_unknownObjectRetain();
    v4 = v8(&v13, ObjectType, v6);
    v5 = v9;
    swift_unknownObjectRelease();
  }
  v10 = v4;
  v11 = v5;
  result.value._object = v11;
  result.value._countAndFlagsBits = v10;
  return result;
}

id _NSSwiftLocale.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for _NSSwiftLocale();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id static Locale._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id result;

  swift_unknownObjectRelease();
  type metadata accessor for _NSSwiftLocale();
  v4 = swift_dynamicCastClass();
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + OBJC_IVAR____NSSwiftLocale_locale);
    v6 = *(_QWORD *)(v4 + OBJC_IVAR____NSSwiftLocale_locale + 8);
    result = (id)swift_unknownObjectRetain();
  }
  else
  {
    type metadata accessor for _LocaleBridged();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = a1;
    v6 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type _LocaleBridged and conformance _LocaleBridged, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleBridged, (uint64_t)&protocol conformance descriptor for _LocaleBridged);
    result = a1;
  }
  *a2 = v5;
  a2[1] = v6;
  return result;
}

uint64_t static Locale._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  swift_unknownObjectRelease();
  type metadata accessor for _NSSwiftLocale();
  v4 = swift_dynamicCastClass();
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + OBJC_IVAR____NSSwiftLocale_locale);
    v6 = *(_QWORD *)(v4 + OBJC_IVAR____NSSwiftLocale_locale + 8);
    swift_unknownObjectRetain();
  }
  else
  {
    type metadata accessor for _LocaleBridged();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = a1;
    v6 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type _LocaleBridged and conformance _LocaleBridged, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleBridged, (uint64_t)&protocol conformance descriptor for _LocaleBridged);
    v7 = a1;
  }
  *a2 = v5;
  a2[1] = v6;
  return 1;
}

id protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance Locale(void *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id result;

  swift_unknownObjectRelease();
  type metadata accessor for _NSSwiftLocale();
  v4 = swift_dynamicCastClass();
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + OBJC_IVAR____NSSwiftLocale_locale);
    v6 = *(_QWORD *)(v4 + OBJC_IVAR____NSSwiftLocale_locale + 8);
    result = (id)swift_unknownObjectRetain();
  }
  else
  {
    type metadata accessor for _LocaleBridged();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = a1;
    v6 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type _LocaleBridged and conformance _LocaleBridged, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleBridged, (uint64_t)&protocol conformance descriptor for _LocaleBridged);
    result = a1;
  }
  *a2 = v5;
  a2[1] = v6;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Locale(void *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  swift_unknownObjectRelease();
  type metadata accessor for _NSSwiftLocale();
  v4 = swift_dynamicCastClass();
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + OBJC_IVAR____NSSwiftLocale_locale);
    v6 = *(_QWORD *)(v4 + OBJC_IVAR____NSSwiftLocale_locale + 8);
    swift_unknownObjectRetain();
  }
  else
  {
    type metadata accessor for _LocaleBridged();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = a1;
    v6 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type _LocaleBridged and conformance _LocaleBridged, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleBridged, (uint64_t)&protocol conformance descriptor for _LocaleBridged);
    v7 = a1;
  }
  *a2 = v5;
  a2[1] = v6;
  return 1;
}

id protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Locale@<X0>(id result@<X0>, uint64_t *a2@<X8>)
{
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v2 = result;
    type metadata accessor for _NSSwiftLocale();
    v4 = swift_dynamicCastClass();
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + OBJC_IVAR____NSSwiftLocale_locale);
      v6 = *(_QWORD *)(v4 + OBJC_IVAR____NSSwiftLocale_locale + 8);
      result = (id)swift_unknownObjectRetain();
    }
    else
    {
      type metadata accessor for _LocaleBridged();
      v5 = swift_allocObject();
      *(_QWORD *)(v5 + 16) = v2;
      v6 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type _LocaleBridged and conformance _LocaleBridged, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleBridged, (uint64_t)&protocol conformance descriptor for _LocaleBridged);
      result = v2;
    }
    *a2 = v5;
    a2[1] = v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t NSLocale._toCustomAnyHashable()()
{
  void *v0;
  id v1;

  type metadata accessor for _NSSwiftLocale();
  if (swift_dynamicCastClass())
  {
    swift_unknownObjectRetain();
  }
  else
  {
    type metadata accessor for _LocaleBridged();
    *(_QWORD *)(swift_allocObject() + 16) = v0;
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type _LocaleBridged and conformance _LocaleBridged, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleBridged, (uint64_t)&protocol conformance descriptor for _LocaleBridged);
    v1 = v0;
  }
  lazy protocol witness table accessor for type Locale and conformance Locale();
  return AnyHashable.init<A>(_:)();
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSLocale()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  type metadata accessor for _NSSwiftLocale();
  if (swift_dynamicCastClass())
  {
    swift_unknownObjectRetain();
  }
  else
  {
    type metadata accessor for _LocaleBridged();
    *(_QWORD *)(swift_allocObject() + 16) = v1;
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type _LocaleBridged and conformance _LocaleBridged, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleBridged, (uint64_t)&protocol conformance descriptor for _LocaleBridged);
    v2 = v1;
  }
  lazy protocol witness table accessor for type Locale and conformance Locale();
  AnyHashable.init<A>(_:)();

}

uint64_t one-time initialization function for languageIdentifier()
{
  uint64_t result;

  result = String._bridgeToObjectiveCImpl()();
  static NSLocaleKey.languageIdentifier = result;
  return result;
}

id specialized static NSLocale._currentLocaleWithBundleLocalizations(_:allowsMixedLocalizations:)(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  objc_class *v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  id v11;
  _QWORD *v12;
  const __CFString *v13;
  CFPropertyListRef v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const __CFAllocator *v18;
  uint64_t v19;
  _QWORD *v20;
  const __CFString *v21;
  __CFString *CanonicalLanguageIdentifierFromString;
  id v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  Swift::String v45;
  Swift::String v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  Swift::String v53;
  Swift::String v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  _OWORD v67[2];
  uint64_t v68;
  void *v69;
  objc_super v70;
  _OWORD v71[9];

  if (one-time initialization token for cache != -1)
    swift_once();
  if ((a2 & 1) == 0)
  {
    swift_retain();
    v12 = LocaleCache.preferredLanguages(forCurrentUser:)(0);
    v13 = (const __CFString *)String._bridgeToObjectiveCImpl()();
    v14 = CFPreferencesCopyAppValue(v13, (CFStringRef)*MEMORY[0x1E0C9B248]);
    swift_unknownObjectRelease();
    if (!v14 || (*(_QWORD *)&v71[0] = v14, (swift_dynamicCast() & 1) == 0))
    {
      swift_release();
LABEL_34:
      swift_bridgeObjectRelease();
      return 0;
    }
    v15 = *((_QWORD *)&v67[0] + 1);
    v16 = *(_QWORD *)&v67[0];
    v17 = *(_QWORD *)(a1 + 16);
    if (v17)
    {
      v64 = v67[0];
      v62 = v12;
      v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE30];
      swift_bridgeObjectRetain();
      v19 = a1 + 40;
      v20 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      do
      {
        v21 = (const __CFString *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRetain();
        CanonicalLanguageIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLanguageIdentifierFromString(v18, v21);
        swift_unknownObjectRelease();
        if (CanonicalLanguageIdentifierFromString)
        {
          v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLanguageIdentifierFromString);
          v25 = v24;
          swift_bridgeObjectRelease();

        }
        else
        {
          swift_bridgeObjectRelease();
          v23 = 0;
          v25 = 0xE000000000000000;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
        v27 = v20[2];
        v26 = v20[3];
        if (v27 >= v26 >> 1)
          v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v26 > 1), v27 + 1, 1, v20);
        v19 += 16;
        v20[2] = v27 + 1;
        v28 = &v20[2 * v27];
        v28[4] = v23;
        v28[5] = v25;
        --v17;
      }
      while (v17);
      swift_bridgeObjectRelease();
      v12 = v62;
      v15 = *((_QWORD *)&v64 + 1);
      v16 = v64;
      if (!v20[2])
        goto LABEL_32;
    }
    else if (!*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
    {
      goto LABEL_32;
    }
    if (v12[2])
    {
      v29 = HIBYTE(v15) & 0xF;
      if ((v15 & 0x2000000000000000) == 0)
        v29 = v16 & 0xFFFFFFFFFFFFLL;
      if (v29)
      {
        v66 = v15;
        specialized static Locale.canonicalizeLocalizations(_:)((uint64_t)v12);
        v30 = (void *)objc_opt_self();
        swift_bridgeObjectRetain();
        v31 = _ContiguousArrayBuffer._asCocoaArray()();
        v32 = objc_msgSend(v30, sel_preferredLocalizationsFromArray_forPreferences_, v31, _ContiguousArrayBuffer._asCocoaArray()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        if (v32)
        {
          type metadata accessor for __SwiftDeferredNSArray();
          swift_unknownObjectRetain();
          if (swift_dynamicCastClass())
          {
            swift_retain();

          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
          v33 = swift_dynamicCastClass();
          v34 = v66;
          if (v33)
          {
            v35 = (_QWORD *)v33;

          }
          else
          {
            swift_unknownObjectRelease();
            objc_msgSend(v32, sel_copy);
            v37 = _bridgeCocoaArray<A>(_:)();
            swift_unknownObjectRelease();
            v35 = (_QWORD *)specialized _arrayForceCast<A, B>(_:)(v37);

            swift_bridgeObjectRelease();
          }
        }
        else
        {
          v35 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          v34 = v66;
        }
        if (!v35[2])
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_33;
        }
        v38 = v35[4];
        v39 = v35[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v40 = specialized _withFixedCharBuffer(size:_:)(257, v16, v34);
        v42 = v41;
        swift_bridgeObjectRelease();
        if (v42)
        {
          Locale.Components.init(identifier:)(v40, v42, v67);
          if (*((_QWORD *)&v67[0] + 1))
          {
            v43 = v69;
            if (v69)
            {
              v65 = v16;
              v44 = v68;
              v71[0] = v67[0];
              outlined copy of Locale.LanguageCode?(v68, (uint64_t)v69);
              swift_bridgeObjectRetain();
              v45._countAndFlagsBits = 45;
              v45._object = (void *)0xE100000000000000;
              String.append(_:)(v45);
              swift_bridgeObjectRetain();
              outlined consume of Locale.LanguageCode?(v44, (uint64_t)v43);
              v46._countAndFlagsBits = v44;
              v16 = v65;
              v46._object = v43;
              String.append(_:)(v46);
              swift_bridgeObjectRelease();
              outlined release of Locale.Components((uint64_t *)v67);
              v47 = *((_QWORD *)&v71[0] + 1);
              v63 = *(_QWORD *)&v71[0];
              goto LABEL_48;
            }
          }
          outlined release of Locale.Components((uint64_t *)v67);
          v63 = 0;
        }
        else
        {
          v63 = v40;
        }
        v47 = 0;
LABEL_48:
        swift_bridgeObjectRetain();
        v48 = specialized _withFixedCharBuffer(size:_:)(257, v38, v39);
        v50 = v49;
        swift_bridgeObjectRelease();
        if (v50)
        {
          Locale.Components.init(identifier:)(v48, v50, v67);
          if (*((_QWORD *)&v67[0] + 1) && (v51 = v69) != 0)
          {
            v61 = v47;
            v52 = v68;
            v71[0] = v67[0];
            outlined copy of Locale.LanguageCode?(v68, (uint64_t)v69);
            swift_bridgeObjectRetain();
            v53._countAndFlagsBits = 45;
            v53._object = (void *)0xE100000000000000;
            String.append(_:)(v53);
            swift_bridgeObjectRetain();
            outlined consume of Locale.LanguageCode?(v52, (uint64_t)v51);
            v54._countAndFlagsBits = v52;
            v47 = v61;
            v54._object = v51;
            String.append(_:)(v54);
            swift_bridgeObjectRelease();
            outlined release of Locale.Components((uint64_t *)v67);
            v50 = *((_QWORD *)&v71[0] + 1);
            v48 = *(_QWORD *)&v71[0];
          }
          else
          {
            outlined release of Locale.Components((uint64_t *)v67);
            v48 = 0;
            v50 = 0;
          }
        }
        if (!v47 || !v50)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_33;
        }
        if (v63 == v48 && v47 == v50)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          v55 = v38;
          v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v56 & 1) == 0)
          {
            v16 = specialized static Locale.localeIdentifierByReplacingLanguageCodeAndScriptCode(localeIDWithDesiredLangCode:localeIDWithDesiredComponents:)(v55, v39, v16, v66);
            v60 = v59;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (!v60)
            {
              swift_release();
              return 0;
            }
            v57 = v60;
LABEL_63:
            LocaleCache.preferences()(v67);
            destructiveProjectEnumData for PredicateCodableError(v67, v58);
            outlined init with take of LocalePreferences?((uint64_t)v67, (uint64_t)v71, &demangling cache variable for type metadata for LocalePreferences?);
            type metadata accessor for _LocaleICU();
            swift_allocObject();
            v4 = _LocaleICU.init(identifier:prefs:)(v16, v57, (uint64_t)v71);
            goto LABEL_5;
          }
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        v57 = v66;
        swift_bridgeObjectRelease();
        goto LABEL_63;
      }
    }
LABEL_32:
    swift_bridgeObjectRelease();
LABEL_33:
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_34;
  }
  swift_retain();
  LocaleCache.preferences()(v67);
  type metadata accessor for _LocaleICU();
  swift_allocObject();
  v4 = _LocaleICU.init(name:prefs:disableBundleMatching:)(0, 0, (uint64_t *)v67, 1u);
LABEL_5:
  v5 = v4;
  swift_release();
  v6 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type _LocaleICU and conformance _LocaleICU, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleICU, (uint64_t)&protocol conformance descriptor for _LocaleICU);
  v7 = (objc_class *)type metadata accessor for _NSSwiftLocale();
  v8 = (char *)objc_allocWithZone(v7);
  v9 = (uint64_t *)&v8[OBJC_IVAR____NSSwiftLocale_locale];
  *v9 = v5;
  v9[1] = v6;
  v10 = String._bridgeToObjectiveCImpl()();
  v70.receiver = v8;
  v70.super_class = v7;
  swift_unknownObjectRetain();
  v11 = objc_msgSendSuper2(&v70, sel_initWithLocaleIdentifier_, v10);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v11;
}

uint64_t specialized static Locale.isoCurrencyCodes.getter()
{
  uint64_t v0;
  int64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v0 = specialized static Locale.Currency.isoCurrencies.getter();
  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    v10 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v10;
    v3 = (uint64_t *)(v0 + 40);
    do
    {
      v5 = *(v3 - 1);
      v4 = *v3;
      v6 = *(_QWORD *)(v10 + 16);
      v7 = *(_QWORD *)(v10 + 24);
      swift_bridgeObjectRetain();
      if (v6 >= v7 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v6 + 1, 1);
      v3 += 4;
      *(_QWORD *)(v10 + 16) = v6 + 1;
      v8 = v10 + 16 * v6;
      *(_QWORD *)(v8 + 32) = v5;
      *(_QWORD *)(v8 + 40) = v4;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  return v2;
}

uint64_t specialized static Locale.components(fromIdentifier:)()
{
  const __CFAllocator *v0;
  const __CFString *v1;
  CFDictionaryRef ComponentsFromLocaleIdentifier;
  CFDictionaryRef v3;
  uint64_t v4;
  uint64_t v6;

  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE30];
  v1 = (const __CFString *)String._bridgeToObjectiveCImpl()();
  ComponentsFromLocaleIdentifier = CFLocaleCreateComponentsFromLocaleIdentifier(v0, v1);
  swift_unknownObjectRelease();
  if (ComponentsFromLocaleIdentifier
    && (v6 = 0,
        v3 = ComponentsFromLocaleIdentifier,
        specialized static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)(v3, &v6),
        v3,
        (v4 = v6) != 0))
  {

  }
  else
  {

    return MEMORY[0x1E0DEE9E0];
  }
  return v4;
}

unint64_t instantiation function for generic protocol witness table for Locale(_QWORD *a1)
{
  unint64_t result;

  a1[1] = lazy protocol witness table accessor for type Locale and conformance Locale();
  a1[2] = lazy protocol witness table accessor for type Locale and conformance Locale();
  a1[3] = lazy protocol witness table accessor for type Locale and conformance Locale();
  result = lazy protocol witness table accessor for type Locale and conformance Locale();
  a1[4] = result;
  return result;
}

uint64_t specialized static NSLocale._windowsLocaleCode(fromLocaleIdentifier:)()
{
  uint64_t LCID;

  String.utf8CString.getter();
  LCID = uloc_getLCID();
  swift_release();
  return LCID;
}

uint64_t specialized static NSLocale._validNumberingSystems(forLocaleIdentifier:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  int64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = specialized static Locale.NumberingSystem.validNumberingSystems(for:)(a1, a2);
  v3 = v2[2];
  if (v3)
  {
    v12 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    v4 = v12;
    v5 = v2 + 5;
    do
    {
      v7 = *(v5 - 1);
      v6 = *v5;
      v8 = *(_QWORD *)(v12 + 16);
      v9 = *(_QWORD *)(v12 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v9 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v8 + 1, 1);
      v5 += 4;
      *(_QWORD *)(v12 + 16) = v8 + 1;
      v10 = v12 + 16 * v8;
      *(_QWORD *)(v10 + 32) = v7;
      *(_QWORD *)(v10 + 40) = v6;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  return v4;
}

uint64_t KeyedEncodingContainer.encode<A, B>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  char *v23;
  _QWORD v25[5];
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[40];

  v25[4] = a5;
  v25[1] = a2;
  v25[2] = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v26 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v27 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v14 = (char *)v25 - v13;
  v15 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Optional();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = MEMORY[0x1E0C80A78](v19);
  v23 = (char *)v25 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v20 + 16))((char *)v25 - v22, a1, v19, v21);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v23, 1, a4) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v23, v19);
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v23, a4);
  KeyedEncodingContainer.superEncoder(forKey:)();
  (*(void (**)(void))(a9 + 16))();
  (*(void (**)(_BYTE *, char *, uint64_t, uint64_t))(a7 + 16))(v28, v14, a4, a7);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v14, v27);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, a4);
}

void KeyedDecodingContainer.decode<A, B>(_:forKey:)()
{
  type metadata accessor for CodableConfiguration();
}

uint64_t sub_181D603E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v10 - v5;
  if ((KeyedDecodingContainer.contains(_:)() & 1) != 0)
  {
    MEMORY[0x186DA9D64](&protocol conformance descriptor for CodableConfiguration<A, B>, a1);
    result = KeyedDecodingContainer.decode<A>(_:forKey:)();
    if (v1)
      return result;
    v8 = *(_QWORD *)(v2 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v3, v6, v2);
    v9 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(v2 - 8);
    v9 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v3, v9, 1, v2);
}

void type metadata accessor for CodableConfiguration()
{
  JUMPOUT(0x186DA9CBCLL);
}

uint64_t CodableConfiguration.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t KeyedEncodingContainer.encode<A, B>(_:forKey:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD v17[3];
  _BYTE v18[40];

  v17[2] = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v15 = (char *)v17 - v14;
  KeyedEncodingContainer.superEncoder(forKey:)();
  (*(void (**)(uint64_t, uint64_t))(a8 + 16))(a6, a8);
  (*(void (**)(_BYTE *, char *, uint64_t, uint64_t))(a7 + 16))(v18, v15, a5, a7);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, AssociatedTypeWitness);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A, B>(_:forKey:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[40];

  v25 = a6;
  v26 = a8;
  v24[0] = a2;
  v24[1] = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v27 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v28 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)v24 - v12;
  v14 = type metadata accessor for Optional();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)v24 - v16;
  v18 = *(_QWORD *)(a5 - 8);
  v20 = MEMORY[0x1E0C80A78](v19);
  v22 = (char *)v24 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16))(v17, a1, v14, v20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1, a5) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v22, v17, a5);
  KeyedEncodingContainer.superEncoder(forKey:)();
  (*(void (**)(uint64_t, uint64_t))(v26 + 16))(v25, v26);
  (*(void (**)(_BYTE *, char *, uint64_t, uint64_t))(a7 + 16))(v29, v13, a5, a7);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v28);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v22, a5);
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BYTE v10[40];

  KeyedEncodingContainer.superEncoder(forKey:)();
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(a6 + 16))(v10, a3, a5, a6);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  _QWORD v19[2];
  _BYTE v20[40];
  uint64_t v21;

  v19[1] = a4;
  v21 = a3;
  v19[0] = a2;
  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v19 - v11;
  v13 = *(_QWORD *)(a5 - 8);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)v19 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))(v12, a1, v9, v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, a5) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v17, v12, a5);
  KeyedEncodingContainer.superEncoder(forKey:)();
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(a6 + 16))(v20, v21, a5, a6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v17, a5);
}

uint64_t KeyedDecodingContainer.decode<A, B>(_:forKey:configuration:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  char *v12;
  uint64_t result;
  _BYTE v15[40];
  uint64_t v16;

  v16 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = &v15[-v11 - 8];
  result = KeyedDecodingContainer.superDecoder(forKey:)();
  if (!v5)
  {
    (*(void (**)(uint64_t, uint64_t))(a4 + 16))(a2, a4);
    return (*(uint64_t (**)(_BYTE *, char *, uint64_t, uint64_t))(a3 + 16))(v15, v12, a1, a3);
  }
  return result;
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A, B>(_:forKey:configuration:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t result;
  _QWORD v15[2];
  uint64_t v16;
  _BYTE v17[40];
  uint64_t v18;

  v18 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)v15 - v11;
  if ((KeyedDecodingContainer.contains(_:)() & 1) == 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a5, 1, 1, a1);
  v15[1] = a2;
  v16 = a5;
  v13 = v18;
  result = KeyedDecodingContainer.superDecoder(forKey:)();
  if (!v5)
  {
    (*(void (**)(void))(v13 + 16))();
    (*(void (**)(_BYTE *, char *, uint64_t, uint64_t))(a3 + 16))(v17, v12, a1, a3);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(v16, 0, 1, a1);
  }
  return result;
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:configuration:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  _BYTE v13[40];
  uint64_t v14;

  v12 = a1;
  v14 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = &v13[-v9 - 8];
  result = KeyedDecodingContainer.superDecoder(forKey:)();
  if (!v4)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v12, AssociatedTypeWitness);
    return (*(uint64_t (**)(_BYTE *, char *, uint64_t, uint64_t))(a3 + 16))(v13, v10, a2, a3);
  }
  return result;
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:configuration:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[40];
  uint64_t v17;

  v15 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = (char *)&v13 - v9;
  if ((KeyedDecodingContainer.contains(_:)() & 1) == 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a4, 1, 1, a2);
  v14 = a4;
  v11 = v17;
  result = KeyedDecodingContainer.superDecoder(forKey:)();
  if (!v11)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v15, AssociatedTypeWitness);
    (*(void (**)(_BYTE *, char *, uint64_t, uint64_t))(a3 + 16))(v16, v10, a2, a3);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(v14, 0, 1, a2);
  }
  return result;
}

uint64_t UnkeyedEncodingContainer.encode<A, B>(_:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD v17[3];
  _BYTE v18[40];

  v17[1] = a6;
  v17[2] = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v15 = (char *)v17 - v14;
  dispatch thunk of UnkeyedEncodingContainer.superEncoder()();
  (*(void (**)(uint64_t, uint64_t))(a8 + 16))(a5, a8);
  (*(void (**)(_BYTE *, char *, uint64_t, uint64_t))(a7 + 16))(v18, v15, a4, a7);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, AssociatedTypeWitness);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
}

uint64_t UnkeyedEncodingContainer.encode<A>(_:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BYTE v10[40];

  dispatch thunk of UnkeyedEncodingContainer.superEncoder()();
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(a6 + 16))(v10, a2, a4, a6);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
}

uint64_t UnkeyedDecodingContainer.decode<A, B>(_:configuration:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X4>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  char *v12;
  uint64_t result;
  _BYTE v15[40];
  uint64_t v16;

  v16 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = &v15[-v11 - 8];
  result = dispatch thunk of UnkeyedDecodingContainer.superDecoder()();
  if (!v5)
  {
    (*(void (**)(uint64_t, uint64_t))(a4 + 16))(a2, a4);
    return (*(uint64_t (**)(_BYTE *, char *, uint64_t, uint64_t))(a3 + 16))(v15, v12, a1, a3);
  }
  return result;
}

uint64_t UnkeyedDecodingContainer.decodeIfPresent<A, B>(_:configuration:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X4>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[40];
  uint64_t v19;

  v19 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v15 - v11;
  result = dispatch thunk of UnkeyedDecodingContainer.decodeNil()();
  if (!v5)
  {
    v16 = a3;
    v17 = a5;
    v14 = v19;
    if ((result & 1) != 0)
    {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(v17, 1, 1, a1);
    }
    else
    {
      dispatch thunk of UnkeyedDecodingContainer.superDecoder()();
      (*(void (**)(uint64_t, uint64_t))(v14 + 16))(a2, v14);
      (*(void (**)(_BYTE *, char *, uint64_t))(v16 + 16))(v18, v12, a1);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(v17, 0, 1, a1);
    }
  }
  return result;
}

uint64_t UnkeyedDecodingContainer.decode<A>(_:configuration:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  _BYTE v13[40];
  uint64_t v14;

  v12 = a1;
  v14 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = &v13[-v9 - 8];
  result = dispatch thunk of UnkeyedDecodingContainer.superDecoder()();
  if (!v4)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v12, AssociatedTypeWitness);
    return (*(uint64_t (**)(_BYTE *, char *, uint64_t, uint64_t))(a3 + 16))(v13, v10, a2, a3);
  }
  return result;
}

uint64_t UnkeyedDecodingContainer.decodeIfPresent<A>(_:configuration:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  _BYTE v13[40];
  uint64_t v14;

  v12 = a1;
  v14 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = &v13[-v9 - 8];
  result = dispatch thunk of UnkeyedDecodingContainer.decodeNil()();
  if (!v4)
  {
    if ((result & 1) != 0)
    {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(v14, 1, 1, a2);
    }
    else
    {
      dispatch thunk of UnkeyedDecodingContainer.superDecoder()();
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v12, AssociatedTypeWitness);
      (*(void (**)(_BYTE *, char *, uint64_t, uint64_t))(a3 + 16))(v13, v10, a2, a3);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(v14, 0, 1, a2);
    }
  }
  return result;
}

uint64_t CodableConfiguration.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t CodableConfiguration.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*CodableConfiguration.wrappedValue.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t CodableConfiguration.init(wrappedValue:from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t CodableConfiguration.encode(to:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  v4 = a2[5];
  v5 = a2[2];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = (char *)&v12 - v9;
  (*(void (**)(__n128))(a2[7] + 16))(v8);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v4 + 16))(a1, v10, v5, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, AssociatedTypeWitness);
}

uint64_t CodableConfiguration.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t result;
  _BYTE v21[40];
  uint64_t v22;

  v22 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v14 = &v21[-v13 - 8];
  v15 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v16);
  v18 = &v21[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v21);
  (*(void (**)(uint64_t, uint64_t))(a5 + 16))(a3, a5);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t, uint64_t))(a4 + 16))(v21, v14, a2, a4);
  result = __swift_destroy_boxed_opaque_existential_1(a1);
  if (!v6)
    return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v15 + 32))(v22, v18, a2);
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance CodableConfiguration<A, B>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return CodableConfiguration.init(from:)(a1, a2[2], a2[3], a2[4], a2[6], a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableConfiguration<A, B>(uint64_t a1, _QWORD *a2)
{
  return CodableConfiguration.encode(to:)(a1, a2);
}

uint64_t static CodableConfiguration<>.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> CodableConfiguration<A, B>()
{
  return static CodableConfiguration<>.== infix(_:_:)() & 1;
}

uint64_t CodableConfiguration<>.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int CodableConfiguration<>.hashValue.getter()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance <> CodableConfiguration<A, B>()
{
  return CodableConfiguration<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance <> CodableConfiguration<A, B>()
{
  return CodableConfiguration<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <> CodableConfiguration<A, B>()
{
  Hasher.init(_seed:)();
  CodableConfiguration<>.hash(into:)();
  return Hasher._finalize()();
}

uint64_t Optional<A>.encode(to:configuration:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE v21[24];
  uint64_t v22;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v10 = &v21[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v12 = *(_QWORD *)(v11 + 16);
  v13 = *(_QWORD *)(v12 - 8);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = &v21[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(_BYTE *, uint64_t, __n128))(v8 + 16))(v10, v18, v15);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12) == 1)
  {
    (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, a3);
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    dispatch thunk of Encoder.singleValueContainer()();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v21, v22);
    dispatch thunk of SingleValueEncodingContainer.encodeNil()();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v13 + 32))(v17, v10, v12);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(a4 + 16))(a1, a2, v12, a4);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v13 + 8))(v17, v12);
  }
}

uint64_t protocol witness for EncodableWithConfiguration.encode(to:configuration:) in conformance <A> A?(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Optional<A>.encode(to:configuration:)(a1, a2, a3, *(_QWORD *)(a4 - 8));
}

uint64_t Optional<A>.init(from:configuration:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t AssociatedTypeWitness;
  uint64_t v39;
  _QWORD *v40;
  _BYTE v41[40];
  _QWORD v42[3];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v45 = a2;
  v36 = a4;
  v37 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v35 = (char *)&v31 - v8;
  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v31 - v14;
  v16 = a1[3];
  v40 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v16);
  v17 = v39;
  dispatch thunk of Decoder.singleValueContainer()();
  if (v17)
  {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v45, AssociatedTypeWitness);
    v18 = (uint64_t)v40;
    return __swift_destroy_boxed_opaque_existential_1(v18);
  }
  v32 = v12;
  v33 = v15;
  v39 = 0;
  v20 = AssociatedTypeWitness;
  v34 = v10;
  v21 = v43;
  v22 = v44;
  __swift_project_boxed_opaque_existential_1(v42, v43);
  if ((MEMORY[0x186DA5C24](v21, v22) & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v45, v20);
    v23 = v33;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(v33, 1, 1, a3);
    v24 = v37;
    v25 = v34;
    v18 = (uint64_t)v40;
  }
  else
  {
    v18 = (uint64_t)v40;
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v40, (uint64_t)v41);
    v26 = v35;
    v27 = v45;
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v35, v45, v20);
    v28 = v32;
    v29 = v39;
    (*(void (**)(_BYTE *, char *, uint64_t))(v36 + 16))(v41, v26, a3);
    v24 = v37;
    v39 = v29;
    if (v29)
    {
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v27, v20);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
      return __swift_destroy_boxed_opaque_existential_1(v18);
    }
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v27, v20);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(v28, 0, 1, a3);
    v30 = v28;
    v23 = v33;
    v25 = v34;
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v33, v30, v9);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
  (*(void (**)(uint64_t, char *, uint64_t))(v25 + 32))(v24, v23, v9);
  return __swift_destroy_boxed_opaque_existential_1(v18);
}

uint64_t protocol witness for DecodableWithConfiguration.init(from:configuration:) in conformance <A> A?@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Optional<A>.init(from:configuration:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8), a5);
}

uint64_t Array<A>.encode(to:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void (*v23)(_QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  _QWORD v28[5];
  _BYTE v29[24];
  uint64_t v30;
  char *v31;

  v7 = a4;
  v27 = a2;
  v9 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v26 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = v10;
  MEMORY[0x1E0C80A78](v11);
  v31 = (char *)&v20 - v12;
  __swift_project_boxed_opaque_existential_1(v13, v13[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  v14 = swift_bridgeObjectRetain();
  v25 = MEMORY[0x186DA4B68](v14, v7);
  if (!v25)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  }
  v15 = 0;
  v23 = *(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(a5 + 16);
  v24 = v7;
  v21 = a3 & 0xC000000000000001;
  v22 = a3;
  v16 = a5;
  v17 = v26;
  while (1)
  {
    if ((_swift_isClassOrObjCExistentialType() & 1) == 0 || !v21)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v31, a3+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v15, v7);
      v18 = v15 + 1;
      if (__OFADD__(v15, 1))
        goto LABEL_12;
      goto LABEL_6;
    }
    result = _ArrayBuffer._getElementSlowPath(_:)();
    if (v20 != 8)
      break;
    v28[0] = result;
    (*(void (**)(char *, _QWORD *, uint64_t))(v9 + 16))(v31, v28, v7);
    swift_unknownObjectRelease();
    v18 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
LABEL_6:
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v17, v31, v7);
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v29, v30);
    dispatch thunk of UnkeyedEncodingContainer.superEncoder()();
    v7 = v24;
    v23(v28, v27, v24, v16);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v17, v7);
    if (!v5)
    {
      ++v15;
      a3 = v22;
      if (v18 != v25)
        continue;
    }
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for EncodableWithConfiguration.encode(to:configuration:) in conformance <A> [A](uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return Array<A>.encode(to:configuration:)(a1, a2, *v4, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8));
}

char *Array<A>.init(from:configuration:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char isUniquelyReferenced_nonNull_bridgeObject;
  char isUniquelyReferenced_nonNull_native;
  char isClassOrObjCExistentialType;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  Swift::Bool v33;
  uint64_t v34;
  _QWORD *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char v42[40];
  _QWORD v43[3];
  uint64_t v44;
  char *v45;

  v40 = a2;
  v37 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v36 = (char *)&v34 - v8;
  v9 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = (char *)MEMORY[0x1E0DEE9D8];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v13 = v41;
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v13)
  {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v40, AssociatedTypeWitness);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return v12;
  }
  v41 = v12;
  v38 = v9;
  v14 = v37;
  v35 = a1;
  __swift_project_boxed_opaque_existential_1(v43, v44);
  v15 = dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter();
  v39 = AssociatedTypeWitness;
  if ((v15 & 1) == 0)
  {
    v18 = MEMORY[0x1E0DEE9D8];
    v16 = v7;
    v19 = v14;
    v20 = v36;
    while (1)
    {
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v43, v44);
      dispatch thunk of UnkeyedDecodingContainer.superDecoder()();
      (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v20, v40, v39);
      (*(void (**)(char *, char *, uint64_t, uint64_t))(v19 + 16))(v42, v20, a3, v19);
      if ((_swift_isClassOrObjCExistentialType() & 1) != 0)
      {
        isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
        v45 = (char *)v18;
        if ((isUniquelyReferenced_nonNull_bridgeObject & 1) == 0
          || (_swift_isClassOrObjCExistentialType() & 1) != 0 && (v18 < 0 || (v18 & 0x4000000000000000) != 0))
        {
LABEL_20:
          if ((_swift_isClassOrObjCExistentialType() & 1) != 0 && (v18 < 0 || (v18 & 0x4000000000000000) != 0))
          {
            specialized _ArrayBuffer._nonNative.getter(v18);
            swift_unknownObjectRetain();
            v27 = _CocoaArrayWrapper.endIndex.getter();
            swift_unknownObjectRelease();
          }
          else
          {
            isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
            v26 = v18 & 0xFFFFFFFFFFFFF8;
            if ((isClassOrObjCExistentialType & 1) == 0)
              v26 = v18;
            v27 = *(_QWORD *)(v26 + 16);
          }
          v18 = _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27 + 1, 1, v18, a3);
          v45 = (char *)v18;
        }
      }
      else
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v45 = (char *)v18;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          goto LABEL_20;
      }
      if ((_swift_isClassOrObjCExistentialType() & 1) != 0)
        v28 = v18 & 0xFFFFFFFFFFFFFF8;
      else
        v28 = v18;
      v29 = *(_QWORD *)(v28 + 16);
      if ((_swift_isClassOrObjCExistentialType() & 1) != 0)
        v30 = v18 & 0xFFFFFFFFFFFFFF8;
      else
        v30 = v18;
      v31 = *(_QWORD *)(v30 + 24);
      v32 = v29 + 1;
      if (v29 + 1 > (uint64_t)(v31 >> 1))
      {
        v33 = v31 > 1;
        type metadata accessor for Array();
        Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33, v29 + 1, 1);
        v18 = (uint64_t)v45;
      }
      if ((_swift_isClassOrObjCExistentialType() & 1) != 0)
      {
        v21 = v18 & 0xFFFFFFFFFFFFFF8;
        *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) = v32;
      }
      else
      {
        *(_QWORD *)(v18 + 16) = v32;
        v21 = v18 & 0xFFFFFFFFFFFFFF8;
      }
      if ((_swift_isClassOrObjCExistentialType() & 1) != 0)
        v22 = v21;
      else
        v22 = v18;
      (*(void (**)(unint64_t, char *, uint64_t))(v38 + 32))(v22+ ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80))+ *(_QWORD *)(v38 + 72) * v29, v41, a3);
      v45 = (char *)v18;
      __swift_project_boxed_opaque_existential_1(v43, v44);
      if ((dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter() & 1) != 0)
        goto LABEL_5;
    }
  }
  v16 = v7;
LABEL_5:
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v40, v39);
  v12 = v45;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
  return v12;
}

char *protocol witness for DecodableWithConfiguration.init(from:configuration:) in conformance <A> [A]@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char **a5@<X8>)
{
  uint64_t v5;
  char *result;

  result = Array<A>.init(from:configuration:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8));
  if (!v5)
    *a5 = result;
  return result;
}

uint64_t base witness table accessor for Equatable in <> CodableConfiguration<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 8);
  return MEMORY[0x186DA9D64](&protocol conformance descriptor for <> CodableConfiguration<A, B>, a1, &v4);
}

uint64_t dispatch thunk of EncodableWithConfiguration.encode(to:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of static DecodingConfigurationProviding.decodingConfiguration.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of DecodableWithConfiguration.init(from:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t type metadata completion function for CodableConfiguration()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CodableConfiguration(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_181D62520 + 4 * byte_18215F210[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for CodableConfiguration(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

void _CalendarGregorian.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)(uint64_t a1, uint64_t *a2, __int128 *a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  double v17;
  char v18;
  _OWORD *v19;
  uint64_t *v20;
  os_unfair_lock_s *v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v27;
  __int128 v28;
  uint64_t v29[2];

  v9 = v8;
  v10 = a7;
  v14 = *a2;
  v15 = a2[1];
  v16 = *a3;
  v17 = *(double *)a8;
  v18 = *(_BYTE *)(a8 + 8);
  *(_QWORD *)(v8 + 80) = 0;
  v19 = (_OWORD *)(v8 + 80);
  *(_OWORD *)(v8 + 16) = xmmword_18215F490;
  *(_OWORD *)(v8 + 32) = xmmword_18215F4A0;
  *(_QWORD *)(v8 + 72) = 0x4290000000000000;
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 88) = 0;
  *(_BYTE *)(v8 + 120) = 1;
  *(_QWORD *)(v8 + 128) = 0;
  *(_BYTE *)(v8 + 136) = 1;
  if (v14)
  {
    *(_QWORD *)(v8 + 96) = v14;
    *(_QWORD *)(v8 + 104) = v15;
    if ((v18 & 1) != 0)
    {
LABEL_3:
      *(_OWORD *)(v9 + 48) = xmmword_18215F4B0;
      *(_QWORD *)(v9 + 64) = 0xC208951B28000000;
      goto LABEL_16;
    }
  }
  else
  {
    v27 = v16;
    if (one-time initialization token for cache != -1)
      swift_once();
    v20 = (uint64_t *)(static TimeZoneCache.cache + 16);
    v21 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
    swift_retain_n();
    os_unfair_lock_lock(v21);
    closure #1 in TimeZoneCache.default.getter(v20, v29);
    os_unfair_lock_unlock(v21);
    swift_release_n();
    v22 = v29[1];
    v10 = a7;
    v16 = v27;
    *(_QWORD *)(v9 + 96) = v29[0];
    *(_QWORD *)(v9 + 104) = v22;
    if ((v18 & 1) != 0)
      goto LABEL_3;
  }
  *(double *)(v9 + 64) = v17;
  v23 = floor(v17 / 86400.0 + 2451910.5 + 0.5);
  v28 = v16;
  if (v23 <= 2130706430.0)
  {
    if (v23 < -2130706430.0)
    {
      v24 = -2130706432;
      goto LABEL_15;
    }
    if ((~*(_QWORD *)&v23 & 0x7FF0000000000000) != 0)
    {
      if (v23 > -9.22337204e18)
      {
        if (v23 < 9.22337204e18)
        {
          v24 = (uint64_t)v23;
          goto LABEL_15;
        }
LABEL_28:
        __break(1u);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_28;
  }
  v24 = 2130706432;
LABEL_15:
  *(_QWORD *)(v9 + 48) = v24;
  *(_QWORD *)(v9 + 56) = specialized static _CalendarGregorian.yearMonthDayFromJulianDay(_:useJulianRef:)(v24, 0);
  v16 = v28;
LABEL_16:
  *v19 = v16;
  swift_unknownObjectRelease();
  if ((a5 & 1) == 0 && (unint64_t)(a4 - 8) >= 0xFFFFFFFFFFFFFFF9)
  {
    *(_QWORD *)(v9 + 112) = a4;
    *(_BYTE *)(v9 + 120) = 0;
  }
  if ((v10 & 1) == 0)
  {
    v25 = 7;
    if (a6 < 7)
      v25 = a6;
    if (v25 <= 1)
      v25 = 1;
    *(_QWORD *)(v9 + 128) = v25;
    *(_BYTE *)(v9 + 136) = 0;
  }
}

uint64_t _CalendarGregorian.firstWeekday.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t ObjectType;
  void (*v3)(uint64_t *__return_ptr, uint64_t, uint64_t);
  char v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t result;
  uint64_t v9;

  if (*((_BYTE *)v0 + 120) != 1)
    return v0[14];
  if (!v0[10])
    return 1;
  v1 = v0[11];
  ObjectType = swift_getObjectType();
  v3 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v1 + 328);
  swift_unknownObjectRetain();
  v3(&v9, ObjectType, v1);
  v4 = v9;
  if (one-time initialization token for weekdays != -1)
    swift_once();
  v0 = static Locale.Weekday.weekdays;
  swift_bridgeObjectRetain();
  v5 = specialized Collection<>.firstIndex(of:)(v4, (uint64_t)v0);
  v7 = v6;
  result = swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
  {
    __break(1u);
    return result;
  }
  swift_unknownObjectRelease();
  result = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return v0[14];
  }
  return result;
}

uint64_t _CalendarGregorian.minimumDaysInFirstWeek.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;

  if (*(_BYTE *)(v0 + 136) != 1)
    return *(_QWORD *)(v0 + 128);
  if (!*(_QWORD *)(v0 + 80))
    return 1;
  v1 = *(_QWORD *)(v0 + 88);
  ObjectType = swift_getObjectType();
  v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 344);
  swift_unknownObjectRetain();
  v4 = v3(ObjectType, v1);
  swift_unknownObjectRelease();
  return v4;
}

uint64_t _CalendarGregorian.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:)(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4, uint64_t a5, char a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v22;
  char v23;
  __int128 v24;
  uint64_t v25[2];

  v10 = *a1;
  v11 = a1[1];
  if (*a2)
  {
    v12 = a2[1];
    v13 = *a2;
    v14 = *a1;
    if (v10)
      goto LABEL_3;
  }
  else
  {
    v13 = *(_QWORD *)(v6 + 96);
    v12 = *(_QWORD *)(v6 + 104);
    swift_unknownObjectRetain();
    v14 = v10;
    if (v10)
    {
LABEL_3:
      if ((a4 & 1) == 0)
        goto LABEL_4;
LABEL_8:
      a3 = *(_QWORD *)(v6 + 112);
      v15 = *(_BYTE *)(v6 + 120);
      if ((a6 & 1) != 0)
        goto LABEL_5;
LABEL_9:
      v17 = 0;
      v16 = a5;
      goto LABEL_10;
    }
  }
  v11 = *(_QWORD *)(v6 + 88);
  v14 = swift_unknownObjectRetain();
  if ((a4 & 1) != 0)
    goto LABEL_8;
LABEL_4:
  v15 = 0;
  if ((a6 & 1) == 0)
    goto LABEL_9;
LABEL_5:
  v16 = *(_QWORD *)(v6 + 128);
  v17 = *(_BYTE *)(v6 + 136);
LABEL_10:
  v25[0] = v13;
  v25[1] = v12;
  *(_QWORD *)&v24 = v14;
  *((_QWORD *)&v24 + 1) = v11;
  v22 = 0;
  v23 = 1;
  v18 = swift_allocObject();
  swift_unknownObjectRetain();
  v19 = swift_unknownObjectRetain();
  _CalendarGregorian.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)(v19, v25, &v24, a3, v15, v16, v17, (uint64_t)&v22);
  lazy protocol witness table accessor for type _CalendarGregorian and conformance _CalendarGregorian(&lazy protocol witness table cache variable for type _CalendarGregorian and conformance _CalendarGregorian, (uint64_t)&protocol conformance descriptor for _CalendarGregorian);
  return v18;
}

void _CalendarGregorian.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t ObjectType;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  Swift::UInt v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  Swift::UInt v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);

  Hasher._combine(_:)(0);
  v3 = *(_QWORD *)(v1 + 104);
  ObjectType = swift_getObjectType();
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 112);
  swift_unknownObjectRetain();
  v5(a1, ObjectType, v3);
  swift_unknownObjectRelease();
  v6 = _CalendarGregorian.firstWeekday.getter();
  Hasher._combine(_:)(v6);
  if (*(_BYTE *)(v1 + 136) == 1)
  {
    if (*(_QWORD *)(v1 + 80))
    {
      v7 = *(_QWORD *)(v1 + 88);
      v8 = swift_getObjectType();
      v9 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 344);
      swift_unknownObjectRetain();
      v10 = v9(v8, v7);
      swift_unknownObjectRelease();
    }
    else
    {
      v10 = 1;
    }
  }
  else
  {
    v10 = *(_QWORD *)(v1 + 128);
  }
  Hasher._combine(_:)(v10);
  if (*(_QWORD *)(v1 + 80))
  {
    v11 = *(_QWORD *)(v1 + 88);
    v12 = swift_getObjectType();
    v13 = *(void (**)(uint64_t, uint64_t))(v11 + 64);
    swift_unknownObjectRetain();
    v13(v12, v11);
    swift_unknownObjectRelease();
  }
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(0);
}

void _CalendarGregorian.maximumRange(of:)(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_181D62E64()
{
  return 0;
}

Swift::Int _CalendarGregorian._algorithmA(smaller:larger:at:)(char *a1, char *a2, _QWORD *a3)
{
  char v3;
  char v4;
  Foundation::Date v5;
  double v6;
  double v7;
  Swift::Int value;
  Swift::Double time;
  char v11;
  Foundation::Date v12;
  double v13;
  char v14;
  Swift::Int_optional v15;
  Swift::Int_optional v16;

  v3 = *a1;
  v4 = *a2;
  *(Foundation::Date *)&v5._time = (Foundation::Date)*a3;
  v11 = *a2;
  time = v5._time;
  _CalendarGregorian.dateInterval(of:for:)((Foundation::Calendar::Component)&v11, v5);
  if ((v14 & 1) != 0)
    goto LABEL_6;
  v7 = v12._time;
  v6 = v13;
  LOBYTE(time) = v3;
  v11 = v4;
  v12._time = v12._time + 0.1;
  v15 = _CalendarGregorian.ordinality(of:in:for:)((Foundation::Calendar::Component)&time, (Foundation::Calendar::Component)&v11, v12);
  if (v15.is_nil
    || (value = v15.value,
        LOBYTE(time) = v3,
        v11 = v4,
        v12._time = v6 + v7 + -0.1,
        v16 = _CalendarGregorian.ordinality(of:in:for:)((Foundation::Calendar::Component)&time, (Foundation::Calendar::Component)&v11, v12), v16.is_nil))
  {
LABEL_6:
    value = 0;
  }
  else if (v16.value >= value)
  {
    if (__OFADD__(v16.value, 1))
    {
      __break(1u);
    }
    else if (v16.value + 1 >= value)
    {
      goto LABEL_7;
    }
    __break(1u);
    return v16.value;
  }
LABEL_7:
  v16.value = value;
  return v16.value;
}

Foundation::DateInterval_optional __swiftcall _CalendarGregorian.dateInterval(of:for:)(Foundation::Calendar::Component of, Foundation::Date a2)
{
  Foundation::DateInterval_optional result;

  __asm { BR              X9 }
  return result;
}

uint64_t sub_181D63208(double a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t result;
  __int128 v23;
  double v24;
  __int128 v25[18];
  _OWORD v26[18];
  _OWORD v27[26];
  Foundation::Date_optional v28;

  LOBYTE(v25[0]) = 3;
  *(_QWORD *)&v26[0] = v5;
  v28 = _CalendarGregorian.firstInstant(of:at:)((Foundation::Calendar::Component)v25, *(Foundation::Date *)&a1);
  if ((BYTE8(v27[0]) & 1) != 0)
    goto LABEL_2;
  v6 = *(_QWORD *)&v27[0];
  v7 = *(double *)v27;
  LOBYTE(v23) = 3;
  *(_QWORD *)&v25[0] = *(_QWORD *)&v27[0];
  v27[0] = *(_OWORD *)(v2 + 96);
  swift_unknownObjectRetain();
  _CalendarGregorian.add(_:to:amount:inTimeZone:)((unsigned __int8 *)&v23, (double *)v25, 1, (long double *)v26);
  swift_unknownObjectRelease();
  v8 = *(double *)v26;
  *(_QWORD *)&v25[0] = 8447;
  *(_QWORD *)&v23 = *(_QWORD *)&v26[0];
  v26[0] = *(_OWORD *)(v2 + 96);
  swift_unknownObjectRetain();
  _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)v25, (double *)&v23, (uint64_t *)v26, v27);
  swift_unknownObjectRelease();
  LOBYTE(v25[0]) = 4;
  memcpy(v26, v27, 0x11AuLL);
  outlined retain of DateComponents((uint64_t)v27);
  _CalendarGregorian.minMaxRange(of:in:)((unsigned __int8 *)v25, v26);
  v11 = v10 & 1;
  if ((v10 & 1) != 0)
    v12 = 0;
  else
    v12 = v9;
  LOBYTE(v25[0]) = 5;
  memcpy(v26, v27, 0x11AuLL);
  _CalendarGregorian.minMaxRange(of:in:)((unsigned __int8 *)v25, v26);
  v15 = v14 & 1;
  if ((v14 & 1) != 0)
    v16 = 0;
  else
    v16 = v13;
  LOBYTE(v25[0]) = 6;
  memcpy(v26, v27, 0x11AuLL);
  _CalendarGregorian.minMaxRange(of:in:)((unsigned __int8 *)v25, v26);
  *(_QWORD *)&v26[2] = *(_QWORD *)&v27[2];
  BYTE8(v26[2]) = BYTE8(v27[2]);
  *(_QWORD *)&v26[3] = *(_QWORD *)&v27[3];
  BYTE8(v26[3]) = BYTE8(v27[3]);
  *(_QWORD *)&v26[4] = *(_QWORD *)&v27[4];
  BYTE8(v26[4]) = BYTE8(v27[4]);
  *(_QWORD *)&v26[5] = *(_QWORD *)&v27[5];
  BYTE8(v26[5]) = BYTE8(v27[5]);
  *(_QWORD *)&v26[6] = *(_QWORD *)&v27[6];
  BYTE8(v26[6]) = BYTE8(v27[6]);
  *(_QWORD *)&v26[7] = v12;
  BYTE8(v26[7]) = v11;
  *(_QWORD *)&v26[8] = v16;
  BYTE8(v26[8]) = v15;
  if ((v18 & 1) != 0)
    v19 = 0;
  else
    v19 = v17;
  *(_QWORD *)&v26[9] = v19;
  BYTE8(v26[9]) = v18 & 1;
  *(_QWORD *)&v26[11] = *(_QWORD *)&v27[11];
  BYTE8(v26[11]) = BYTE8(v27[11]);
  *(_QWORD *)&v26[12] = *(_QWORD *)&v27[12];
  BYTE8(v26[12]) = BYTE8(v27[12]);
  *(_QWORD *)&v26[13] = *(_QWORD *)&v27[13];
  BYTE8(v26[13]) = BYTE8(v27[13]);
  *(_QWORD *)&v26[14] = *(_QWORD *)&v27[14];
  BYTE8(v26[14]) = BYTE8(v27[14]);
  *(_QWORD *)&v26[15] = *(_QWORD *)&v27[15];
  BYTE8(v26[15]) = BYTE8(v27[15]);
  *v4 = *v3;
  v4[16] = v3[16];
  *(_QWORD *)&v26[16] = *(_QWORD *)&v27[16];
  *(_QWORD *)&v26[17] = *(_QWORD *)&v27[17];
  BYTE9(v26[17]) = BYTE9(v27[17]);
  v26[0] = v27[0];
  v26[1] = v27[1];
  *(_QWORD *)&v26[10] = 0;
  BYTE8(v26[10]) = 0;
  memcpy(v25, v26, 0x11AuLL);
  outlined retain of DateComponents((uint64_t)v26);
  _CalendarGregorian.date(from:)(v25, (uint64_t)&v23);
  outlined release of DateComponents((uint64_t)v26);
  if ((BYTE8(v23) & 1) != 0)
  {
LABEL_22:
    __break(1u);
    JUMPOUT(0x181D63734);
  }
  v20 = *(double *)&v23;
  *(_QWORD *)&v24 = v23;
  v23 = *(_OWORD *)(v2 + 96);
  swift_unknownObjectRetain();
  _CalendarGregorian.timeZoneTransitionInterval(at:timeZone:)(&v24, (uint64_t)&v23, (uint64_t)v25);
  outlined release of DateComponents((uint64_t)v27);
  swift_unknownObjectRelease();
  *(_QWORD *)&v28.is_nil = outlined release of DateComponents((uint64_t)v26);
  if ((v25[1] & 1) == 0)
  {
    if (v20 - *((double *)v25 + 1) >= v7)
    {
      v21 = v20 - *((double *)v25 + 1) - v7;
      goto LABEL_19;
    }
    __break(1u);
    goto LABEL_21;
  }
  if (v8 > v7)
  {
    if (v20 >= v7)
    {
      v21 = v20 - v7;
LABEL_19:
      *(_QWORD *)v1 = v6;
      *(double *)(v1 + 8) = v21;
      *(_BYTE *)(v1 + 16) = 0;
      goto LABEL_24;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
LABEL_2:
  *(_QWORD *)v1 = 0;
  *(_QWORD *)(v1 + 8) = 0;
  *(_BYTE *)(v1 + 16) = 1;
LABEL_24:
  LOBYTE(result) = v28.is_nil;
  return result;
}

Swift::Int_optional __swiftcall _CalendarGregorian.ordinality(of:in:for:)(Foundation::Calendar::Component of, Foundation::Calendar::Component in, Foundation::Date a3)
{
  uint64_t *v3;
  char v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22[4];
  char v23;
  id v24;
  Swift::Int_optional result;

  v4 = *(_BYTE *)in;
  v5 = *v3;
  LOBYTE(v24) = *(_BYTE *)of;
  LOBYTE(v22[0]) = v4;
  v22[1] = v5;
  result = _CalendarGregorian._ordinality(of:in:for:)((Foundation::Calendar::Component)&v24, (Foundation::Calendar::Component)v22, a3);
  if (!v6)
  {
    result.is_nil &= 1u;
    return result;
  }
  v24 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {
    if ((v23 & 1) != 0)
    {
      if (one-time initialization token for logger != -1)
        swift_once();
      v7 = type metadata accessor for Logger();
      __swift_project_value_buffer(v7, (uint64_t)static _CalendarGregorian.logger);
      v8 = Logger.logObject.getter();
      v9 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v8, v9))
        goto LABEL_14;
      v10 = swift_slowAlloc();
      v11 = swift_slowAlloc();
      v22[0] = v11;
      *(_DWORD *)v10 = 136446722;
      v12 = Calendar.Component.debugDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v10 + 12) = 2082;
      v14 = Calendar.Component.debugDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v10 + 22) = 2050;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v16 = "Not advancing in ordinality(of:in:for:). smaller: %{public}s, larger: %{public}s, date: %{public}f";
    }
    else
    {
      if (one-time initialization token for logger != -1)
        swift_once();
      v17 = type metadata accessor for Logger();
      __swift_project_value_buffer(v17, (uint64_t)static _CalendarGregorian.logger);
      v8 = Logger.logObject.getter();
      v9 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v8, v9))
        goto LABEL_14;
      v10 = swift_slowAlloc();
      v11 = swift_slowAlloc();
      v22[0] = v11;
      *(_DWORD *)v10 = 136446722;
      v18 = Calendar.Component.debugDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v10 + 12) = 2082;
      v20 = Calendar.Component.debugDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v10 + 22) = 2050;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v16 = "Overflowing in ordinality(of:in:for:). smaller: %{public}s, larger: %{public}s, date: %{public}f";
    }
    _os_log_impl(&dword_1817D9000, v8, v9, v16, (uint8_t *)v10, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x186DA9E78](v11, -1, -1);
    MEMORY[0x186DA9E78](v10, -1, -1);
LABEL_14:

    result.value = 0;
    result.is_nil = 1;
    return result;
  }

  __break(1u);
  return result;
}

void _CalendarGregorian._algorithmB(smaller:larger:at:)(char *a1, _BYTE *a2, void **a3)
{
  char v3;
  void *v4;
  double v5;
  double v6;
  unint64_t v7;
  double v8;
  double v9;
  void *v10;
  Foundation::Date v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  const char *v19;
  Swift::Int value;
  double v21;
  void *v22;
  uint64_t v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  Swift::Int v36;
  double v37;
  Foundation::Date v38;
  uint64_t v39;
  Swift::Int v40;
  unint64_t v41;
  double v42;
  double v43;
  Foundation::Date v44;
  Swift::Int v45;
  double v46;
  Swift::Int v47;
  BOOL v48;
  Swift::Int v49;
  BOOL v50;
  uint64_t v51;
  double v52;
  double v53;
  char v54;
  char v55;
  id v56;
  Swift::Int_optional v57;
  Swift::Int_optional v58;
  Swift::Int_optional v59;
  Swift::Int_optional v60;

  v3 = *a1;
  v4 = *a3;
  LOBYTE(v51) = *a2;
  v56 = v4;
  _CalendarGregorian.dateInterval(of:for:)((Foundation::Calendar::Component)&v51, (Foundation::Date)v4);
  if ((v54 & 1) != 0)
    return;
  v6 = v52;
  v5 = v53;
  LOBYTE(v51) = 2;
  *(double *)&v56 = v52 + 1.0;
  v7 = (unint64_t)_CalendarGregorian.dateInterval(of:for:)((Foundation::Calendar::Component)&v51, COERCE_FOUNDATION_DATE(v52 + 1.0));
  if ((v54 & 1) != 0)
    return;
  v9 = v52;
  v8 = v53;
  LOBYTE(v56) = v3;
  LOBYTE(v51) = 2;
  v52 = v52 + 0.1;
  v57 = _CalendarGregorian._ordinality(of:in:for:)((Foundation::Calendar::Component)&v56, (Foundation::Calendar::Component)&v51, (Foundation::Date)v7);
  if (*(double *)&v10 != 0.0)
  {
LABEL_6:
    v56 = v10;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if (swift_dynamicCast())
    {
      if ((v55 & 1) != 0)
      {
        if (one-time initialization token for logger != -1)
          swift_once();
        v12 = type metadata accessor for Logger();
        __swift_project_value_buffer(v12, (uint64_t)static _CalendarGregorian.logger);
        v13 = Logger.logObject.getter();
        v14 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v13, v14))
          goto LABEL_25;
        v15 = swift_slowAlloc();
        v16 = swift_slowAlloc();
        v51 = v16;
        *(_DWORD *)v15 = 136446722;
        v17 = Calendar.Component.debugDescription.getter();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v51);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v15 + 12) = 2082;
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x68746E6F6DLL, 0xE500000000000000, &v51);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v15 + 22) = 2050;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v19 = "Not advancing in ordinality(of:in:for:). smaller: %{public}s, larger: %{public}s, date: %{public}f";
      }
      else
      {
        if (one-time initialization token for logger != -1)
          swift_once();
        v30 = type metadata accessor for Logger();
        __swift_project_value_buffer(v30, (uint64_t)static _CalendarGregorian.logger);
        v13 = Logger.logObject.getter();
        v14 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v13, v14))
          goto LABEL_25;
        v15 = swift_slowAlloc();
        v16 = swift_slowAlloc();
        v51 = v16;
        *(_DWORD *)v15 = 136446722;
        v31 = Calendar.Component.debugDescription.getter();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v51);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v15 + 12) = 2082;
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x68746E6F6DLL, 0xE500000000000000, &v51);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v15 + 22) = 2050;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v19 = "Overflowing in ordinality(of:in:for:). smaller: %{public}s, larger: %{public}s, date: %{public}f";
      }
      _os_log_impl(&dword_1817D9000, v13, v14, v19, (uint8_t *)v15, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x186DA9E78](v16, -1, -1);
      MEMORY[0x186DA9E78](v15, -1, -1);
LABEL_25:

      return;
    }
    goto LABEL_68;
  }
  if (v57.is_nil)
    return;
  value = v57.value;
  v21 = v8 + v9;
  LOBYTE(v56) = v3;
  LOBYTE(v51) = 2;
  v52 = v21 + -0.1;
  v58 = _CalendarGregorian._ordinality(of:in:for:)((Foundation::Calendar::Component)&v56, (Foundation::Calendar::Component)&v51, v11);
  if (*(double *)&v22 != 0.0)
  {
LABEL_14:
    v56 = v22;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if (swift_dynamicCast())
    {
      if ((v55 & 1) != 0)
      {
        if (one-time initialization token for logger != -1)
          swift_once();
        v23 = type metadata accessor for Logger();
        __swift_project_value_buffer(v23, (uint64_t)static _CalendarGregorian.logger);
        v13 = Logger.logObject.getter();
        v24 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v13, v24))
          goto LABEL_25;
        v25 = swift_slowAlloc();
        v26 = swift_slowAlloc();
        v51 = v26;
        *(_DWORD *)v25 = 136446722;
        v27 = Calendar.Component.debugDescription.getter();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v51);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v25 + 12) = 2082;
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x68746E6F6DLL, 0xE500000000000000, &v51);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v25 + 22) = 2050;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v29 = "Not advancing in ordinality(of:in:for:). smaller: %{public}s, larger: %{public}s, date: %{public}f";
      }
      else
      {
        if (one-time initialization token for logger != -1)
          swift_once();
        v33 = type metadata accessor for Logger();
        __swift_project_value_buffer(v33, (uint64_t)static _CalendarGregorian.logger);
        v13 = Logger.logObject.getter();
        v24 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v13, v24))
          goto LABEL_25;
        v25 = swift_slowAlloc();
        v26 = swift_slowAlloc();
        v51 = v26;
        *(_DWORD *)v25 = 136446722;
        v34 = Calendar.Component.debugDescription.getter();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, &v51);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v25 + 12) = 2082;
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x68746E6F6DLL, 0xE500000000000000, &v51);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v25 + 22) = 2050;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v29 = "Overflowing in ordinality(of:in:for:). smaller: %{public}s, larger: %{public}s, date: %{public}f";
      }
      _os_log_impl(&dword_1817D9000, v13, v24, v29, (uint8_t *)v25, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x186DA9E78](v26, -1, -1);
      MEMORY[0x186DA9E78](v25, -1, -1);
      goto LABEL_25;
    }
LABEL_69:

    __break(1u);
    return;
  }
  if (v58.is_nil || v58.value < value)
    return;
  v36 = v58.value + 1;
  if (__OFADD__(v58.value, 1))
  {
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  if (v36 < value)
  {
LABEL_67:
    __break(1u);
LABEL_68:

    __break(1u);
    goto LABEL_69;
  }
  v37 = v5 + v6 + -1.0;
  v38._time = v21 + 1.0;
  if (v21 + 1.0 < v37)
  {
    v39 = -13;
    v40 = value;
    do
    {
      LOBYTE(v51) = 2;
      v56 = *(id *)&v38._time;
      v41 = (unint64_t)_CalendarGregorian.dateInterval(of:for:)((Foundation::Calendar::Component)&v51, v38);
      if ((v54 & 1) != 0)
        break;
      v43 = v52;
      v42 = v53;
      LOBYTE(v56) = v3;
      LOBYTE(v51) = 2;
      v52 = v52 + 0.1;
      v59 = _CalendarGregorian._ordinality(of:in:for:)((Foundation::Calendar::Component)&v56, (Foundation::Calendar::Component)&v51, (Foundation::Date)v41);
      if (*(double *)&v10 != 0.0)
        goto LABEL_6;
      if (v59.is_nil)
        break;
      v45 = v59.value;
      v46 = v42 + v43;
      LOBYTE(v56) = v3;
      LOBYTE(v51) = 2;
      v52 = v46 + -0.1;
      v60 = _CalendarGregorian._ordinality(of:in:for:)((Foundation::Calendar::Component)&v56, (Foundation::Calendar::Component)&v51, v44);
      if (*(double *)&v22 != 0.0)
        goto LABEL_14;
      if (v60.is_nil)
        break;
      if (v40 == v36)
      {
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
        goto LABEL_66;
      }
      if (v45 >= v40)
        v45 = v40;
      v47 = v36 - v40;
      if (__OFSUB__(v36, v40))
        goto LABEL_62;
      v48 = __OFADD__(v45, v47);
      v49 = v45 + v47;
      if (v48)
        goto LABEL_63;
      v36 = v49 + v60.value;
      if (__OFADD__(v49, v60.value))
        goto LABEL_64;
      if (v36 < v45)
        goto LABEL_65;
      v38._time = v46 + 1.0;
      v50 = v46 + 1.0 >= v37 || v39++ == 0;
      v40 = v45;
    }
    while (!v50);
  }
}

void _CalendarGregorian._algorithmC(smaller:larger:at:)(char *a1, _BYTE *a2, void **a3)
{
  char v3;
  void *v4;
  double v5;
  double v6;
  void *v7;
  BOOL v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  const char *v16;
  Swift::Int value;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  char v25;
  char v26;
  id v27;
  Swift::Int_optional v28;
  Swift::Int_optional v29;

  v3 = *a1;
  v4 = *a3;
  LOBYTE(v22) = *a2;
  v27 = v4;
  _CalendarGregorian.dateInterval(of:for:)((Foundation::Calendar::Component)&v22, (Foundation::Date)v4);
  if ((v25 & 1) == 0)
  {
    v6 = v23;
    v5 = v24;
    LOBYTE(v27) = v3;
    LOBYTE(v22) = 1;
    v23 = v23 + 0.1;
    v28 = _CalendarGregorian._ordinality(of:in:for:)((Foundation::Calendar::Component)&v27, (Foundation::Calendar::Component)&v22, (Foundation::Date)0x3FB999999999999ALL);
    if (v7)
    {
      v27 = v7;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      if (swift_dynamicCast())
      {
        v8 = one-time initialization token for logger == -1;
        if ((v26 & 1) != 0)
        {
          if (one-time initialization token for logger == -1)
          {
LABEL_6:
            v9 = type metadata accessor for Logger();
            __swift_project_value_buffer(v9, (uint64_t)static _CalendarGregorian.logger);
            v10 = Logger.logObject.getter();
            v11 = static os_log_type_t.error.getter();
            if (!os_log_type_enabled(v10, v11))
            {
LABEL_19:

              return;
            }
            v12 = swift_slowAlloc();
            v13 = swift_slowAlloc();
            v22 = v13;
            *(_DWORD *)v12 = 136446722;
            v14 = Calendar.Component.debugDescription.getter();
            getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v22);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v12 + 12) = 2082;
            getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(1918985593, 0xE400000000000000, &v22);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v12 + 22) = 2050;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            v16 = "Not advancing in ordinality(of:in:for:). smaller: %{public}s, larger: %{public}s, date: %{public}f";
LABEL_18:
            _os_log_impl(&dword_1817D9000, v10, v11, v16, (uint8_t *)v12, 0x20u);
            swift_arrayDestroy();
            MEMORY[0x186DA9E78](v13, -1, -1);
            MEMORY[0x186DA9E78](v12, -1, -1);
            goto LABEL_19;
          }
LABEL_13:
          swift_once();
          goto LABEL_6;
        }
        goto LABEL_14;
      }
      goto LABEL_29;
    }
    if (!v28.is_nil)
    {
      value = v28.value;
      LOBYTE(v27) = v3;
      LOBYTE(v22) = 1;
      v23 = v5 + v6 + -0.1;
      v29 = _CalendarGregorian._ordinality(of:in:for:)((Foundation::Calendar::Component)&v27, (Foundation::Calendar::Component)&v22, COERCE_FOUNDATION_DATE(v5 + v6));
      if (v18)
      {
        v27 = v18;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        if (swift_dynamicCast())
        {
          v8 = one-time initialization token for logger == -1;
          if ((v26 & 1) != 0)
          {
            if (one-time initialization token for logger == -1)
              goto LABEL_6;
            goto LABEL_13;
          }
LABEL_14:
          if (!v8)
            swift_once();
          v19 = type metadata accessor for Logger();
          __swift_project_value_buffer(v19, (uint64_t)static _CalendarGregorian.logger);
          v10 = Logger.logObject.getter();
          v11 = static os_log_type_t.error.getter();
          if (!os_log_type_enabled(v10, v11))
            goto LABEL_19;
          v12 = swift_slowAlloc();
          v13 = swift_slowAlloc();
          v22 = v13;
          *(_DWORD *)v12 = 136446722;
          v20 = Calendar.Component.debugDescription.getter();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v22);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v12 + 12) = 2082;
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(1918985593, 0xE400000000000000, &v22);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v12 + 22) = 2050;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v16 = "Overflowing in ordinality(of:in:for:). smaller: %{public}s, larger: %{public}s, date: %{public}f";
          goto LABEL_18;
        }
LABEL_30:

        __break(1u);
        return;
      }
      if (!v29.is_nil && v29.value >= value)
      {
        if (__OFADD__(v29.value, 1))
        {
          __break(1u);
        }
        else if (v29.value + 1 >= value)
        {
          return;
        }
        __break(1u);
LABEL_29:

        __break(1u);
        goto LABEL_30;
      }
    }
  }
}

void _CalendarGregorian._algorithmD(at:)(void **a1, double a2)
{
  void *v2;
  unint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  void *v8;
  BOOL v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  Swift::Int value;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  char v22;
  char v23;
  id v24;
  Swift::Int_optional v25;
  Swift::Int_optional v26;

  v2 = *a1;
  LOBYTE(v19) = 10;
  v24 = v2;
  v3 = (unint64_t)_CalendarGregorian.dateInterval(of:for:)((Foundation::Calendar::Component)&v19, *(Foundation::Date *)&a2);
  if ((v22 & 1) == 0)
  {
    v5 = v20;
    v4 = v21;
    LOBYTE(v19) = 2;
    v24 = v2;
    _CalendarGregorian.dateInterval(of:for:)((Foundation::Calendar::Component)&v19, (Foundation::Date)v3);
    if ((v22 & 1) == 0)
    {
      if (v5 >= v20)
        v6 = v5;
      else
        v6 = v20;
      if (v4 + v5 >= v21 + v20)
        v7 = v21 + v20;
      else
        v7 = v4 + v5;
      LOBYTE(v24) = 3;
      LOBYTE(v19) = 2;
      v20 = v6 + 0.1;
      v25 = _CalendarGregorian._ordinality(of:in:for:)((Foundation::Calendar::Component)&v24, (Foundation::Calendar::Component)&v19, (Foundation::Date)0x3FB999999999999ALL);
      if (v8)
      {
        v24 = v8;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        if (swift_dynamicCast())
        {
          v9 = one-time initialization token for logger == -1;
          if ((v23 & 1) != 0)
          {
            if (one-time initialization token for logger == -1)
            {
LABEL_13:
              v10 = type metadata accessor for Logger();
              __swift_project_value_buffer(v10, (uint64_t)static _CalendarGregorian.logger);
              v11 = Logger.logObject.getter();
              v12 = static os_log_type_t.error.getter();
              if (!os_log_type_enabled(v11, v12))
              {
LABEL_26:

                return;
              }
              v13 = swift_slowAlloc();
              v14 = swift_slowAlloc();
              v19 = v14;
              *(_DWORD *)v13 = 136446722;
              getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(7954788, 0xE300000000000000, &v19);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(_WORD *)(v13 + 12) = 2082;
              getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x68746E6F6DLL, 0xE500000000000000, &v19);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(_WORD *)(v13 + 22) = 2050;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              v15 = "Not advancing in ordinality(of:in:for:). smaller: %{public}s, larger: %{public}s, date: %{public}f";
LABEL_25:
              _os_log_impl(&dword_1817D9000, v11, v12, v15, (uint8_t *)v13, 0x20u);
              swift_arrayDestroy();
              MEMORY[0x186DA9E78](v14, -1, -1);
              MEMORY[0x186DA9E78](v13, -1, -1);
              goto LABEL_26;
            }
LABEL_20:
            swift_once();
            goto LABEL_13;
          }
          goto LABEL_21;
        }
        goto LABEL_35;
      }
      if (v25.is_nil)
        return;
      value = v25.value;
      LOBYTE(v24) = 3;
      LOBYTE(v19) = 2;
      v20 = v7 + -0.1;
      v26 = _CalendarGregorian._ordinality(of:in:for:)((Foundation::Calendar::Component)&v24, (Foundation::Calendar::Component)&v19, (Foundation::Date)0xBFB999999999999ALL);
      if (v17)
      {
        v24 = v17;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        if (swift_dynamicCast())
        {
          v9 = one-time initialization token for logger == -1;
          if ((v23 & 1) != 0)
          {
            if (one-time initialization token for logger == -1)
              goto LABEL_13;
            goto LABEL_20;
          }
LABEL_21:
          if (!v9)
            swift_once();
          v18 = type metadata accessor for Logger();
          __swift_project_value_buffer(v18, (uint64_t)static _CalendarGregorian.logger);
          v11 = Logger.logObject.getter();
          v12 = static os_log_type_t.error.getter();
          if (!os_log_type_enabled(v11, v12))
            goto LABEL_26;
          v13 = swift_slowAlloc();
          v14 = swift_slowAlloc();
          v19 = v14;
          *(_DWORD *)v13 = 136446722;
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(7954788, 0xE300000000000000, &v19);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v13 + 12) = 2082;
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x68746E6F6DLL, 0xE500000000000000, &v19);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v13 + 22) = 2050;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v15 = "Overflowing in ordinality(of:in:for:). smaller: %{public}s, larger: %{public}s, date: %{public}f";
          goto LABEL_25;
        }
LABEL_36:

        __break(1u);
        return;
      }
      if (!v26.is_nil && v26.value >= value)
      {
        if (__OFADD__(v26.value, 1))
        {
          __break(1u);
        }
        else if (v26.value + 1 >= value)
        {
          return;
        }
        __break(1u);
LABEL_35:

        __break(1u);
        goto LABEL_36;
      }
    }
  }
}

void _CalendarGregorian.range(of:in:for:)(_BYTE *a1, _BYTE *a2, void **a3)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v6;
  void *v7;
  char v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12[3];
  void *v13;
  uint64_t v14;
  void *v15[6];
  char v16;

  v4 = *a2;
  if (v4 > 0xF || ((1 << v4) & 0xE100) == 0)
  {
    v6 = *a1;
    v7 = *a3;
    switch(*a1)
    {
      case 4:
        if (v4 - 4 >= 3)
        {
          v8 = 4;
          goto LABEL_20;
        }
        break;
      case 5:
        if (v4 - 5 >= 2)
        {
          v8 = 5;
          goto LABEL_20;
        }
        break;
      case 6:
        if (v4 != 6)
        {
          v8 = 6;
          goto LABEL_20;
        }
        break;
      case 7:
        if (v4 - 3 >= 5)
        {
          v8 = 7;
          goto LABEL_20;
        }
        break;
      case 0xD:
        v8 = 13;
LABEL_20:
        LOBYTE(v15[0]) = v8;
LABEL_21:
        _CalendarGregorian.maximumRange(of:)((uint64_t)v15);
        break;
      default:
        switch(*a2)
        {
          case 0:
            if (v6 <= 0xB && ((1 << v6) & 0xE0E) != 0)
            {
              LOBYTE(v15[0]) = *a1;
              goto LABEL_21;
            }
            break;
          case 1:
            switch(*a1)
            {
              case 3:
              case 0x11:
                v14 = 2;
                v13 = v7;
                *(_OWORD *)v12 = *(_OWORD *)(v3 + 96);
                swift_unknownObjectRetain();
                _CalendarGregorian.dateComponents(_:from:in:)(&v14, (double *)&v13, v12, v15);
                swift_unknownObjectRelease();
                outlined release of DateComponents((uint64_t)v15);
                if ((v16 & 1) != 0)
                {
                  __break(1u);
                  JUMPOUT(0x181D65170);
                }
                return;
              case 8:
              case 0xA:
                LOBYTE(v12[0]) = *a1;
                v10 = 1;
                goto LABEL_40;
              case 9:
              case 0xB:
                LOBYTE(v12[0]) = *a1;
                v9 = 1;
                goto LABEL_42;
              default:
                return;
            }
          case 2:
            switch(*a1)
            {
              case 3:
              case 8:
              case 0xA:
                LOBYTE(v12[0]) = *a1;
                v9 = 2;
                goto LABEL_42;
              case 0xB:
                LOBYTE(v12[0]) = 11;
                v11 = 2;
                goto LABEL_44;
              default:
                return;
            }
          case 9:
            if (v6 <= 0xB)
            {
              if (((1 << v6) & 0x508) != 0)
              {
                LOBYTE(v12[0]) = *a1;
                v10 = 9;
                goto LABEL_40;
              }
              if (((1 << v6) & 0x804) != 0)
              {
                LOBYTE(v12[0]) = *a1;
                v11 = 9;
LABEL_44:
                LOBYTE(v14) = v11;
                v15[0] = v7;
                _CalendarGregorian._algorithmC(smaller:larger:at:)((char *)v12, &v14, v15);
              }
            }
            break;
          case 0xA:
            if (v6 == 3)
            {
              v15[0] = *a3;
              _CalendarGregorian._algorithmD(at:)(v15, *(double *)&v7);
            }
            break;
          case 0xC:
            if (v6 <= 0xB)
            {
              if (((1 << v6) & 0xA04) != 0)
              {
                LOBYTE(v12[0]) = *a1;
                v9 = 12;
LABEL_42:
                LOBYTE(v14) = v9;
                v15[0] = v7;
                _CalendarGregorian._algorithmA(smaller:larger:at:)((char *)v12, (char *)&v14, v15);
              }
              else if (((1 << v6) & 0x108) != 0)
              {
                LOBYTE(v12[0]) = *a1;
                v10 = 12;
LABEL_40:
                LOBYTE(v14) = v10;
                v15[0] = v7;
                _CalendarGregorian._algorithmB(smaller:larger:at:)((char *)v12, &v14, v15);
              }
            }
            break;
          default:
            return;
        }
        break;
    }
  }
}

Swift::Int __swiftcall _CalendarGregorian.dateComponent(_:from:)(Foundation::Calendar::Component _, Foundation::Date from)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  uint64_t v7[3];
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[296];

  v4 = *(unsigned __int8 *)_;
  v5 = *v2;
  v9 = qword_18215F690[(char)v4];
  v8 = v5;
  *(_OWORD *)v7 = *(_OWORD *)(v3 + 96);
  swift_unknownObjectRetain();
  _CalendarGregorian.dateComponents(_:from:in:)(&v9, (double *)&v8, v7, v10);
  swift_unknownObjectRelease();
  outlined release of DateComponents((uint64_t)v10);
  __asm { BR              X9 }
  return result;
}

uint64_t sub_181D652BC()
{
  uint64_t v1;
  char v2;

  if ((v2 & 1) != 0)
  {
    __break(1u);
    JUMPOUT(0x181D653C0);
  }
  return v1;
}

void _CalendarGregorian.minMaxRange(of:in:)(unsigned __int8 *a1, const void *a2)
{
  uint64_t v2;
  _BYTE __dst[282];

  v2 = *a1;
  memcpy(__dst, a2, sizeof(__dst));
  __asm { BR              X9 }
}

uint64_t sub_181D6552C()
{
  return 0;
}

uint64_t actualMax #1 (inRange:) in _CalendarGregorian.minMaxRange(of:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v16[2];
  long double v17;
  uint64_t v18;
  _QWORD __src[36];
  _QWORD __dst[37];

  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    JUMPOUT(0x181D65D28);
  }
  v6 = a2;
  if (a2 != a1)
  {
    _CalendarGregorian.date(from:)((__int128 *)a4, (uint64_t)__dst);
    if ((__dst[1] & 1) == 0)
    {
      v11 = __dst[0];
      if (*(_QWORD *)(a4 + 16))
      {
        v12 = *(_QWORD *)(a4 + 24);
        v13 = *(_QWORD *)(a4 + 16);
      }
      else
      {
        v13 = *(_QWORD *)(a3 + 96);
        v12 = *(_QWORD *)(a3 + 104);
        swift_unknownObjectRetain();
      }
      swift_unknownObjectRetain();
      if (!__OFADD__(a1, 1))
      {
        LOBYTE(v18) = a5;
        v16[0] = v11;
        __src[0] = v13;
        __src[1] = v12;
        _CalendarGregorian.add(_:to:amount:inTimeZone:)((unsigned __int8 *)&v18, (double *)v16, 1, &v17);
        v18 = a6;
        v16[0] = v13;
        v16[1] = v12;
        _CalendarGregorian.dateComponents(_:from:in:)(&v18, &v17, v16, __src);
        memcpy(__dst, __src, 0x11AuLL);
        outlined release of DateComponents((uint64_t)__dst);
        __asm { BR              X8 }
      }
      __break(1u);
      JUMPOUT(0x181D65CE0);
    }
    return 0;
  }
  return v6;
}

uint64_t _CalendarGregorian.date(from:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t result;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  _QWORD v31[2];
  __int128 __src;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _OWORD v49[3];

  __src = *a1;
  v5 = a1 + 2;
  *(_OWORD *)((char *)v49 + 10) = *(__int128 *)((char *)a1 + 266);
  v6 = a1[14];
  v7 = a1[16];
  v48 = a1[15];
  v49[0] = v7;
  v8 = a1[10];
  v9 = a1[12];
  v10 = a1[13];
  v44 = a1[11];
  v45 = v9;
  v46 = v10;
  v47 = v6;
  v11 = a1[6];
  v12 = a1[8];
  v13 = a1[9];
  v40 = a1[7];
  v41 = v12;
  v14 = *((_QWORD *)a1 + 2);
  v15 = *((_QWORD *)a1 + 3);
  v33 = v14;
  v34 = v15;
  v42 = v13;
  v43 = v8;
  v16 = a1[3];
  v35 = a1[2];
  v36 = v16;
  v17 = a1[5];
  v37 = a1[4];
  v38 = v17;
  v39 = v11;
  result = specialized static _CalendarGregorian.isComponentsInSupportedRange(_:)((uint64_t)&__src);
  if ((result & 1) != 0)
  {
    __src = *a1;
    *(_OWORD *)((char *)v49 + 10) = *(__int128 *)((char *)v5 + 234);
    v19 = v5[12];
    v20 = v5[14];
    v48 = v5[13];
    v49[0] = v20;
    v21 = v5[8];
    v22 = v5[10];
    v23 = v5[11];
    v44 = v5[9];
    v45 = v22;
    v46 = v23;
    v47 = v19;
    v24 = v5[4];
    v25 = v5[6];
    v26 = v5[7];
    v40 = v5[5];
    v41 = v25;
    v33 = v14;
    v34 = v15;
    v42 = v26;
    v43 = v21;
    v27 = v5[1];
    v35 = *v5;
    v36 = v27;
    v28 = v5[3];
    v37 = v5[2];
    v38 = v28;
    v39 = v24;
    if (v14)
    {
      v29 = v14;
    }
    else
    {
      v29 = *(_QWORD *)(v2 + 96);
      v15 = *(_QWORD *)(v2 + 104);
      swift_unknownObjectRetain();
    }
    v31[0] = v29;
    v31[1] = v15;
    v30 = 0;
    swift_unknownObjectRetain();
    _CalendarGregorian.date(from:inTimeZone:dstRepeatedTimePolicy:dstSkippedTimePolicy:)(&__src, (uint64_t)v31, &v30, a2);
    return swift_unknownObjectRelease();
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 1;
  }
  return result;
}

unsigned __int8 *_CalendarGregorian.add(_:to:amount:inTimeZone:)@<X0>(unsigned __int8 *result@<X0>, double *a2@<X1>, uint64_t a3@<X2>, long double *a4@<X8>)
{
  long double v4;
  uint64_t v5;

  v4 = *a2;
  if (a3)
  {
    v5 = *result;
    fmod(v4, 1.0);
    __asm { BR              X10 }
  }
  *a4 = v4;
  return result;
}

void sub_181D66800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,int a58,__int16 a59)
{
  uint64_t v59;
  _BYTE *v60;
  _BYTE *v61;
  unint64_t v62;
  unint64_t v63;
  char v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char v70;
  Swift::Int v71;
  char v72;
  Swift::Int v73;
  uint64_t v74;
  __int128 v75;
  char v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;

  STACK[0x3C0] = 14577;
  STACK[0x2A0] = v62;
  STACK[0x4E0] = a16;
  STACK[0x4E8] = a15;
  _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)&STACK[0x3C0], (double *)&STACK[0x2A0], (uint64_t *)&STACK[0x4E0], &STACK[0x600]);
  v63 = STACK[0x620];
  v64 = STACK[0x628];
  v65 = v59;
  if ((STACK[0x628] & 1) != 0 || (v65 = v59, v63) || (v65 = -v59, !__OFSUB__(0, v59)))
  {
    v66 = STACK[0x710];
    if (v61[16])
      v66 = 0;
    v67 = v66 + v65;
    if (!__OFADD__(v66, v65))
    {
      if (v67 == 0x7FFFFFFFFFFFFFFFLL)
        v68 = 0;
      else
        v68 = v66 + v65;
      v69 = STACK[0x650];
      v70 = STACK[0x658];
      v71 = STACK[0x640];
      v72 = LOBYTE(STACK[0x658]) ^ 1 | LOBYTE(STACK[0x648]);
      if ((STACK[0x658] & 1) == 0 && (STACK[0x648] & 1) == 0)
      {
        if ((STACK[0x638] & 1) != 0)
        {
          v72 = 0;
        }
        else
        {
          v79 = STACK[0x620];
          v80 = STACK[0x640];
          v78 = STACK[0x628];
          v77 = v68;
          v76 = STACK[0x658];
          v73 = _CalendarGregorian.numberOfDaysInMonth(_:year:)(v71, STACK[0x630]);
          v70 = v76;
          v68 = v77;
          v64 = v78;
          v63 = v79;
          v71 = v80;
          v72 = 0;
          if (v69 <= 1)
            v74 = 1;
          else
            v74 = v69;
          if (v73 >= v69)
            v69 = v74;
          else
            v69 = v73;
        }
      }
      *v60 = *v61;
      v60[16] = v67 == 0x7FFFFFFFFFFFFFFFLL;
      STACK[0x500] = v63;
      LOBYTE(STACK[0x508]) = v64;
      STACK[0x510] = STACK[0x630];
      LOBYTE(STACK[0x518]) = STACK[0x638];
      STACK[0x520] = v71;
      LOBYTE(STACK[0x528]) = v72;
      STACK[0x530] = v69;
      LOBYTE(STACK[0x538]) = v70;
      STACK[0x540] = STACK[0x660];
      LOBYTE(STACK[0x548]) = STACK[0x668];
      STACK[0x550] = STACK[0x670];
      LOBYTE(STACK[0x558]) = STACK[0x678];
      STACK[0x560] = STACK[0x680];
      LOBYTE(STACK[0x568]) = STACK[0x688];
      STACK[0x570] = STACK[0x690];
      LOBYTE(STACK[0x578]) = STACK[0x698];
      STACK[0x580] = STACK[0x6A0];
      LOBYTE(STACK[0x588]) = STACK[0x6A8];
      STACK[0x590] = STACK[0x6B0];
      LOBYTE(STACK[0x598]) = STACK[0x6B8];
      STACK[0x5A0] = STACK[0x6C0];
      LOBYTE(STACK[0x5A8]) = STACK[0x6C8];
      STACK[0x5B0] = STACK[0x6D0];
      LOBYTE(STACK[0x5B8]) = STACK[0x6D8];
      STACK[0x5C0] = STACK[0x6E0];
      LOBYTE(STACK[0x5C8]) = STACK[0x6E8];
      STACK[0x5D0] = STACK[0x6F0];
      LOBYTE(STACK[0x5D8]) = STACK[0x6F8];
      STACK[0x5E0] = STACK[0x700];
      STACK[0x5F0] = v68;
      LOBYTE(STACK[0x5F9]) = STACK[0x719];
      v75 = *(_OWORD *)&STACK[0x610];
      *(_OWORD *)&STACK[0x4E0] = *(_OWORD *)&STACK[0x600];
      *(_OWORD *)&STACK[0x4F0] = v75;
      memcpy(&STACK[0x3C0], &STACK[0x4E0], 0x11AuLL);
      STACK[0x2A0] = a16;
      STACK[0x2A8] = a15;
      a21 = 1;
      outlined retain of DateComponents((uint64_t)&STACK[0x4E0]);
      _CalendarGregorian.date(from:inTimeZone:dstRepeatedTimePolicy:dstSkippedTimePolicy:)(&STACK[0x3C0], (uint64_t)&STACK[0x2A0], &a21, (uint64_t)&a57);
      outlined release of DateComponents((uint64_t)&STACK[0x4E0]);
      if ((a59 & 1) == 0)
        JUMPOUT(0x181D66AACLL);
      __break(1u);
      JUMPOUT(0x181D66B5CLL);
    }
    __break(1u);
    JUMPOUT(0x181D66B44);
  }
  __break(1u);
  JUMPOUT(0x181D66B4CLL);
}

void *_CalendarGregorian.dateComponents(_:from:in:)@<X0>(uint64_t *a1@<X0>, double *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  char v17;
  double v18;
  double v19;
  uint64_t v20;
  Swift::Int v21;
  Swift::Int v22;
  Swift::Int v23;
  uint64_t v24;
  uint64_t (*v25)(_QWORD, _QWORD);
  BOOL v26;
  double v28;
  long double v29;
  Swift::Int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  Swift::Int v42;
  BOOL v43;
  Swift::Int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(_QWORD, _QWORD);
  uint64_t (*v50)(uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  Swift::Int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  BOOL v64;
  Swift::Int v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  void *result;
  uint64_t v70;
  os_unfair_lock_s *v71;
  __int128 v72;
  Swift::Int v73;
  Swift::Int v74;
  Swift::Int v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  BOOL v83;
  uint64_t v85;
  uint64_t v86;
  Swift::Int month;
  uint64_t v88;
  Swift::Int weekday;
  Swift::Int day;
  Swift::Int v91;
  __int128 v92;
  __int128 v93;
  _OWORD __src[18];

  v7 = v4;
  v8 = *a1;
  v9 = *a2;
  v10 = *a3;
  v11 = a3[1];
  ObjectType = swift_getObjectType();
  *(double *)__src = v9;
  v13 = v9 + (double)(*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v11 + 40))(__src, ObjectType, v11);
  v14 = floor(v13);
  v15 = floor(v14 / 86400.0 + 2451910.5 + 0.5);
  v85 = v10;
  if (v15 <= 2130706430.0)
  {
    if (v15 >= -2130706430.0)
    {
      if ((~*(_QWORD *)&v15 & 0x7FF0000000000000) == 0)
      {
LABEL_197:
        __break(1u);
        goto LABEL_198;
      }
      if (v15 <= -9.22337204e18)
      {
LABEL_198:
        __break(1u);
        goto LABEL_199;
      }
      if (v15 >= 9.22337204e18)
      {
LABEL_199:
        __break(1u);
LABEL_200:
        __break(1u);
        goto LABEL_201;
      }
      v16 = (uint64_t)v15;
    }
    else
    {
      v16 = -2130706432;
    }
  }
  else
  {
    v16 = 2130706432;
  }
  v17 = v14 < *(double *)(v7 + 64);
  v18 = remainder(v14, 86400.0);
  if (v18 >= 0.0)
    v19 = v18;
  else
    v19 = v18 + 86400.0;
  v20 = specialized static _CalendarGregorian.yearMonthDayFromJulianDay(_:useJulianRef:)(v16, v17);
  v21 = v20;
  month = v22;
  day = v23;
  v24 = *(_QWORD *)(v7 + 56);
  v25 = (uint64_t (*)(_QWORD, _QWORD))(v20 & 3);
  v26 = (v20 & 3) == 0 && v20 < v24;
  if (v20 >= v24 && v25 == 0)
  {
    v26 = __ROR8__(0x8F5C28F5C28F5C29 * v20 + 0x51EB851EB851EB0, 4) < 0xA3D70A3D70A3D7uLL;
    if (__ROR8__(0x8F5C28F5C28F5C29 * v20 + 0x51EB851EB851EB8, 2) > 0x28F5C28F5C28F5CuLL)
      v26 = 1;
  }
  v28 = v19 / 3600.0;
  if (v19 / 3600.0 <= -9.22337204e18)
  {
    __break(1u);
    goto LABEL_179;
  }
  if (v28 >= 9.22337204e18)
  {
LABEL_179:
    __break(1u);
    goto LABEL_180;
  }
  v83 = v26;
  v29 = fmod(v19, 3600.0);
  v6 = v29 / 60.0;
  if (v29 / 60.0 <= -9.22337204e18)
  {
LABEL_180:
    __break(1u);
    goto LABEL_181;
  }
  if (v6 >= 9.22337204e18)
  {
LABEL_181:
    __break(1u);
    goto LABEL_182;
  }
  v19 = fmod(v29, 60.0);
  if (v19 <= -9.22337204e18)
  {
LABEL_182:
    __break(1u);
    goto LABEL_183;
  }
  if (v19 >= 9.22337204e18)
  {
LABEL_183:
    __break(1u);
LABEL_184:
    __break(1u);
    goto LABEL_185;
  }
  v14 = (v13 - v14) * 1000000000.0;
  if ((~*(_QWORD *)&v14 & 0x7FF0000000000000) == 0
    || (*(_QWORD *)&v19 & 0x7FF0000000000000) == 0x7FF0000000000000)
  {
    goto LABEL_184;
  }
  if ((*(_QWORD *)&v28 & 0x7FF0000000000000) == 0x7FF0000000000000
    || (*(_QWORD *)&v6 & 0x7FF0000000000000) == 0x7FF0000000000000)
  {
    goto LABEL_184;
  }
  if (v14 <= -9.22337204e18)
  {
LABEL_185:
    __break(1u);
    goto LABEL_186;
  }
  if (v14 >= 9.22337204e18)
  {
LABEL_186:
    __break(1u);
    goto LABEL_187;
  }
  v32 = _CalendarGregorian.dayOfYear(fromYear:month:day:)(v21, month, day);
  if (__OFADD__(v16, 1))
  {
LABEL_187:
    __break(1u);
LABEL_188:
    __break(1u);
    goto LABEL_189;
  }
  v91 = v32;
  v33 = (v16 + 1) % 7;
  if (v33 >= 0)
    v34 = (v16 + 1) % 7;
  else
    v34 = v33 + 7;
  v35 = _CalendarGregorian.firstWeekday.getter();
  v36 = v34 + 8 - v35;
  if (__OFSUB__(v34 + 8, v35))
    goto LABEL_188;
  weekday = v34 + 1;
  v37 = v34 + 1 - v91;
  if (__OFSUB__(v34 + 1, v91))
  {
LABEL_189:
    __break(1u);
    goto LABEL_190;
  }
  v38 = v37 + 7001;
  if (__OFADD__(v37, 7001))
  {
LABEL_190:
    __break(1u);
    goto LABEL_191;
  }
  v39 = _CalendarGregorian.firstWeekday.getter();
  v40 = v38 - v39;
  if (__OFSUB__(v38, v39))
  {
LABEL_191:
    __break(1u);
    goto LABEL_192;
  }
  v41 = v91;
  v42 = v91 - 1;
  if (__OFSUB__(v91, 1))
  {
LABEL_192:
    __break(1u);
    goto LABEL_193;
  }
  v86 = v11;
  v11 = v40 % 7;
  v43 = __OFADD__(v42, v40 % 7);
  v44 = v42 + v40 % 7;
  if (v43)
  {
LABEL_193:
    __break(1u);
    goto LABEL_194;
  }
  v45 = v44 / 7;
  if (*(_BYTE *)(v7 + 136) != 1)
  {
    v53 = *(_QWORD *)(v7 + 128);
LABEL_52:
    if (7 - v11 < v53)
      goto LABEL_54;
    goto LABEL_53;
  }
  if (*(_QWORD *)(v7 + 80))
  {
    v46 = *(_QWORD *)(v7 + 88);
    v82 = v24;
    v88 = v44 / 7;
    v47 = swift_getObjectType();
    v48 = v36;
    v49 = v25;
    v50 = *(uint64_t (**)(uint64_t, uint64_t))(v46 + 344);
    swift_unknownObjectRetain();
    v51 = v47;
    v41 = v91;
    v52 = v50(v51, v46);
    v25 = v49;
    v36 = v48;
    v53 = v52;
    swift_unknownObjectRelease();
    v45 = v88;
    v24 = v82;
    goto LABEL_52;
  }
LABEL_53:
  ++v45;
LABEL_54:
  if (!v45)
  {
    v5 = v21 - 1;
    v11 = v86;
    if (!__OFSUB__(v21, 1))
    {
      if (v5 >= v24)
      {
        v24 = v85;
        if ((v5 & 3) != 0)
          goto LABEL_67;
        if (__ROR8__(0x8F5C28F5C28F5C29 * v5 + 0x51EB851EB851EB8, 2) >= 0x28F5C28F5C28F5DuLL)
          goto LABEL_83;
        v55 = 400;
      }
      else
      {
        v55 = 4;
        v24 = v85;
      }
      if (!(v5 % v55))
      {
LABEL_83:
        v56 = v41 + 366;
        if (!__OFADD__(v41, 366))
          goto LABEL_68;
        goto LABEL_85;
      }
LABEL_67:
      v56 = v41 + 365;
      if (!__OFADD__(v41, 365))
      {
LABEL_68:
        v88 = _CalendarGregorian.weekNumber(desiredDay:dayOfPeriod:weekday:)(v56, v56, weekday);
        goto LABEL_93;
      }
LABEL_85:
      __break(1u);
      goto LABEL_86;
    }
    __break(1u);
    goto LABEL_197;
  }
  v11 = v86;
  v88 = v45;
  if (v21 < v24)
  {
    v54 = 4;
    goto LABEL_57;
  }
  if (v25)
    goto LABEL_65;
  if (__ROR8__(0x8F5C28F5C28F5C29 * v21 + 0x51EB851EB851EB8, 2) < 0x28F5C28F5C28F5DuLL)
  {
    v54 = 400;
LABEL_57:
    if (!(v21 % v54))
      goto LABEL_70;
LABEL_65:
    v24 = 365;
    goto LABEL_71;
  }
LABEL_70:
  v24 = 366;
LABEL_71:
  if ((uint64_t)v41 < v24 - 5)
  {
    v5 = v21;
    v24 = v85;
    goto LABEL_93;
  }
  v36 %= 7;
  v57 = (uint64_t)(v36 - v41 + v24) % 7;
  if (v57 >= 0)
    v11 = (uint64_t)(v36 - v41 + v24) % 7;
  else
    v11 = v57 + 7;
  if (*(_BYTE *)(v7 + 136) == 1)
  {
    if (*(_QWORD *)(v7 + 80))
    {
      v58 = *(_QWORD *)(v7 + 88);
      v59 = swift_getObjectType();
      v25 = *(uint64_t (**)(_QWORD, _QWORD))(v58 + 344);
      swift_unknownObjectRetain();
      v60 = v58;
      v41 = v91;
      v61 = v25(v59, v60);
      swift_unknownObjectRelease();
      goto LABEL_80;
    }
LABEL_86:
    if (v11 > 5)
      goto LABEL_81;
    goto LABEL_87;
  }
  v61 = *(_QWORD *)(v7 + 128);
LABEL_80:
  if (6 - v11 < v61)
  {
LABEL_81:
    v5 = v21;
    v24 = v85;
    v11 = v86;
    goto LABEL_93;
  }
LABEL_87:
  v62 = v41 + 7;
  v11 = v86;
  if (__OFADD__(v41, 7))
  {
LABEL_201:
    __break(1u);
    goto LABEL_202;
  }
  v43 = __OFSUB__(v62, v36);
  v63 = v62 - v36;
  if (v43)
  {
LABEL_202:
    __break(1u);
    goto LABEL_203;
  }
  v5 = v21;
  v64 = v24 < v63;
  v24 = v85;
  if (v64)
  {
    v5 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_203:
      __break(1u);
      goto LABEL_204;
    }
    v88 = 1;
  }
LABEL_93:
  v65 = _CalendarGregorian.weekNumber(desiredDay:dayOfPeriod:weekday:)(day, day, weekday);
  v66 = day - 1;
  if (__OFSUB__(day, 1))
  {
LABEL_194:
    __break(1u);
LABEL_195:
    swift_once();
    goto LABEL_119;
  }
  v25 = (uint64_t (*)(_QWORD, _QWORD))v65;
  v93 = 0uLL;
  v92 = 0uLL;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(&v93, (uint64_t *)&v92, 0, 1, 0, 1, 0, 1, (uint64_t)__src, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1);
  if ((v8 & 0x4000) == 0)
  {
    if ((v8 & 0x8000) == 0)
      goto LABEL_96;
LABEL_122:
    *(_QWORD *)&__src[1] = v24;
    *((_QWORD *)&__src[1] + 1) = v11;
    swift_unknownObjectRetain_n();
    swift_unknownObjectRelease();
    if (*(_QWORD *)&__src[0])
    {
      *(_QWORD *)&v93 = v24;
      *((_QWORD *)&v93 + 1) = v11;
      Calendar.timeZone.setter((uint64_t *)&v93);
      v67 = v83;
      if ((v8 & 1) != 0)
        goto LABEL_124;
    }
    else
    {
      swift_unknownObjectRelease();
      v67 = v83;
      if ((v8 & 1) != 0)
        goto LABEL_124;
    }
LABEL_97:
    if ((v8 & 2) == 0)
      goto LABEL_98;
    goto LABEL_125;
  }
  v86 = v5;
  v5 = day - 1;
  if (one-time initialization token for cache != -1)
    goto LABEL_195;
LABEL_119:
  v70 = static CalendarCache.cache + 16;
  v71 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v71);
  closure #1 in CalendarCache.fixed(_:)(v70, 0, &v93);
  os_unfair_lock_unlock(v71);
  swift_release_n();
  *(_QWORD *)&v92 = v24;
  *((_QWORD *)&v92 + 1) = v11;
  swift_unknownObjectRetain();
  Calendar.timeZone.setter((uint64_t *)&v92);
  v72 = v93;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  __src[0] = v72;
  if (*(_QWORD *)&__src[1])
  {
    v92 = __src[1];
    swift_unknownObjectRetain();
    Calendar.timeZone.setter((uint64_t *)&v92);
  }
  swift_unknownObjectRelease();
  v41 = v91;
  v66 = v5;
  v5 = v86;
  if ((v8 & 0x8000) != 0)
    goto LABEL_122;
LABEL_96:
  v67 = v83;
  if ((v8 & 1) == 0)
    goto LABEL_97;
LABEL_124:
  *(_QWORD *)&__src[2] = v21 > 0;
  BYTE8(__src[2]) = 0;
  if ((v8 & 2) == 0)
  {
LABEL_98:
    if ((v8 & 4) == 0)
      goto LABEL_99;
    goto LABEL_131;
  }
LABEL_125:
  if (v21 <= 0)
  {
    v43 = __OFSUB__(1, v21);
    v21 = 1 - v21;
    if (v43)
      goto LABEL_200;
  }
  if (v21 == 0x7FFFFFFFFFFFFFFFLL)
    v73 = 0;
  else
    v73 = v21;
  *(_QWORD *)&__src[3] = v73;
  BYTE8(__src[3]) = v21 == 0x7FFFFFFFFFFFFFFFLL;
  if ((v8 & 4) == 0)
  {
LABEL_99:
    if ((v8 & 8) == 0)
      goto LABEL_100;
    goto LABEL_134;
  }
LABEL_131:
  v74 = month;
  if (month == 0x7FFFFFFFFFFFFFFFLL)
    v74 = 0;
  *(_QWORD *)&__src[4] = v74;
  BYTE8(__src[4]) = month == 0x7FFFFFFFFFFFFFFFLL;
  if ((v8 & 8) == 0)
  {
LABEL_100:
    if ((v8 & 0x40000) == 0)
      goto LABEL_101;
    goto LABEL_137;
  }
LABEL_134:
  v75 = day;
  if (day == 0x7FFFFFFFFFFFFFFFLL)
    v75 = 0;
  *(_QWORD *)&__src[5] = v75;
  BYTE8(__src[5]) = day == 0x7FFFFFFFFFFFFFFFLL;
  if ((v8 & 0x40000) == 0)
  {
LABEL_101:
    if ((v8 & 0x10) == 0)
      goto LABEL_102;
    goto LABEL_141;
  }
LABEL_137:
  if (v41 == 0x7FFFFFFFFFFFFFFFLL)
    v76 = 0;
  else
    v76 = v41;
  *(_QWORD *)&__src[6] = v76;
  BYTE8(__src[6]) = v41 == 0x7FFFFFFFFFFFFFFFLL;
  if ((v8 & 0x10) == 0)
  {
LABEL_102:
    if ((v8 & 0x20) == 0)
      goto LABEL_103;
    goto LABEL_144;
  }
LABEL_141:
  v77 = (uint64_t)v28;
  if ((uint64_t)v28 == 0x7FFFFFFFFFFFFFFFLL)
    v77 = 0;
  *(_QWORD *)&__src[7] = v77;
  BYTE8(__src[7]) = (uint64_t)v28 == 0x7FFFFFFFFFFFFFFFLL;
  if ((v8 & 0x20) == 0)
  {
LABEL_103:
    if ((v8 & 0x40) == 0)
      goto LABEL_104;
    goto LABEL_147;
  }
LABEL_144:
  v78 = (uint64_t)v6;
  if ((uint64_t)v6 == 0x7FFFFFFFFFFFFFFFLL)
    v78 = 0;
  *(_QWORD *)&__src[8] = v78;
  BYTE8(__src[8]) = (uint64_t)v6 == 0x7FFFFFFFFFFFFFFFLL;
  if ((v8 & 0x40) == 0)
  {
LABEL_104:
    if ((v8 & 0x80) == 0)
      goto LABEL_105;
    goto LABEL_150;
  }
LABEL_147:
  v79 = (uint64_t)v19;
  if ((uint64_t)v19 == 0x7FFFFFFFFFFFFFFFLL)
    v79 = 0;
  *(_QWORD *)&__src[9] = v79;
  BYTE8(__src[9]) = (uint64_t)v19 == 0x7FFFFFFFFFFFFFFFLL;
  if ((v8 & 0x80) == 0)
  {
LABEL_105:
    if ((v8 & 0x100) == 0)
      goto LABEL_106;
    goto LABEL_151;
  }
LABEL_150:
  *(_QWORD *)&__src[11] = weekday;
  BYTE8(__src[11]) = 0;
  if ((v8 & 0x100) == 0)
  {
LABEL_106:
    if ((v8 & 0x200) == 0)
      goto LABEL_107;
    goto LABEL_152;
  }
LABEL_151:
  *(_QWORD *)&__src[12] = v66 / 7 + 1;
  BYTE8(__src[12]) = 0;
  if ((v8 & 0x200) == 0)
  {
LABEL_107:
    if ((v8 & 0x400) == 0)
      goto LABEL_109;
    goto LABEL_108;
  }
LABEL_152:
  if (v67)
  {
    if ((uint64_t)v41 >= 91)
    {
      if (v41 >= 0xB6)
      {
        if (v41 >= 0x112)
        {
          if (v41 >= 0x16F)
            goto LABEL_204;
          goto LABEL_174;
        }
LABEL_171:
        v81 = 3;
        goto LABEL_175;
      }
LABEL_169:
      v81 = 2;
      goto LABEL_175;
    }
LABEL_165:
    v81 = 1;
    goto LABEL_175;
  }
  if ((uint64_t)v41 < 90)
    goto LABEL_165;
  if (v41 < 0xB5)
    goto LABEL_169;
  if (v41 < 0x111)
    goto LABEL_171;
  if (v41 >= 0x16E)
  {
LABEL_204:
    result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_174:
  v81 = 4;
LABEL_175:
  *(_QWORD *)&__src[13] = v81;
  BYTE8(__src[13]) = 0;
  if ((v8 & 0x400) != 0)
  {
LABEL_108:
    *(_QWORD *)&__src[15] = v25;
    BYTE8(__src[15]) = 0;
  }
LABEL_109:
  if ((v8 & 0x800) == 0)
  {
    if ((v8 & 0x1000) == 0)
      goto LABEL_111;
LABEL_159:
    if (v5 == 0x7FFFFFFFFFFFFFFFLL)
      v80 = 0;
    else
      v80 = v5;
    *(_QWORD *)&__src[17] = v80;
    BYTE8(__src[17]) = v5 == 0x7FFFFFFFFFFFFFFFLL;
    if ((v8 & 0x2000) != 0)
      goto LABEL_112;
    goto LABEL_115;
  }
  *(_QWORD *)&__src[16] = v88;
  BYTE8(__src[16]) = 0;
  if ((v8 & 0x1000) != 0)
    goto LABEL_159;
LABEL_111:
  if ((v8 & 0x2000) != 0)
  {
LABEL_112:
    v68 = (uint64_t)v14;
    if ((uint64_t)v14 == 0x7FFFFFFFFFFFFFFFLL)
      v68 = 0;
    *(_QWORD *)&__src[10] = v68;
    BYTE8(__src[10]) = (uint64_t)v14 == 0x7FFFFFFFFFFFFFFFLL;
  }
LABEL_115:
  if ((v8 & 0x10004) != 0)
    BYTE9(__src[17]) = 0;
  return memcpy(a4, __src, 0x11AuLL);
}

Swift::Int __swiftcall _CalendarGregorian.numberOfDaysInMonth(_:year:)(Swift::Int _, Swift::Int year)
{
  uint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  Swift::Int result;
  uint64_t v8;

  if (_ >= 13)
  {
    v3 = (_ - 1) / 0xCuLL;
    v4 = __OFADD__(year, v3);
    year += v3;
    if (!v4)
    {
      _ = (_ - 1) % 0xCuLL + 1;
      goto LABEL_8;
    }
    __break(1u);
    goto LABEL_25;
  }
  if (_ <= 0)
  {
    v5 = -_ / 0xCuLL;
    v6 = year + v5;
    if (__OFSUB__(year, -(uint64_t)v5))
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    year = v6 - 1;
    if (__OFSUB__(v6, 1))
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    _ += 12 * v5 + 12;
  }
LABEL_8:
  if ((unint64_t)_ > 0xC)
    goto LABEL_27;
  if (((1 << _) & 0x15AA) != 0)
    return 31;
  if (((1 << _) & 0xA50) == 0)
  {
    if (_ == 2)
    {
      if (year >= *(_QWORD *)(v2 + 56))
      {
        if ((year & 3) != 0)
          return 28;
        if (__ROR8__(0x8F5C28F5C28F5C29 * year + 0x51EB851EB851EB8, 2) >= 0x28F5C28F5C28F5DuLL)
          return 29;
        v8 = 400;
      }
      else
      {
        v8 = 4;
      }
      if (!(year % v8))
        return 29;
      return 28;
    }
LABEL_27:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  return 30;
}

Foundation::Date_optional __swiftcall _CalendarGregorian.firstInstant(of:at:)(Foundation::Calendar::Component of, Foundation::Date at)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  char v6;
  Foundation::Date v7;
  Foundation::Date v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20[4];
  char v21;
  id v22;
  Foundation::Date_optional result;

  v4 = v3;
  v5 = *v2;
  LOBYTE(v20[0]) = *(_BYTE *)of;
  v22 = v5;
  v8._time = _CalendarGregorian._firstInstant(of:at:)((Foundation::Calendar::Component)v20, at)._time;
  if (*(Foundation::Date *)&v7._time)
  {
    v22 = *(id *)&v7._time;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if (!swift_dynamicCast())
    {

      v6 = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      goto LABEL_16;
    }
    if ((v21 & 1) != 0)
    {
      if (one-time initialization token for logger != -1)
        swift_once();
      v9 = type metadata accessor for Logger();
      __swift_project_value_buffer(v9, (uint64_t)static _CalendarGregorian.logger);
      v10 = Logger.logObject.getter();
      v11 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v10, v11))
        goto LABEL_14;
      v12 = swift_slowAlloc();
      v13 = swift_slowAlloc();
      v20[0] = v13;
      *(_DWORD *)v12 = 136446466;
      v14 = Calendar.Component.debugDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2050;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v16 = "Not advancing in firstInstant(of:at:). unit: %{public}s, at: %{public}f";
    }
    else
    {
      if (one-time initialization token for logger != -1)
        swift_once();
      v17 = type metadata accessor for Logger();
      __swift_project_value_buffer(v17, (uint64_t)static _CalendarGregorian.logger);
      v10 = Logger.logObject.getter();
      v11 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v10, v11))
        goto LABEL_14;
      v12 = swift_slowAlloc();
      v13 = swift_slowAlloc();
      v20[0] = v13;
      *(_DWORD *)v12 = 136446466;
      v18 = Calendar.Component.debugDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2050;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v16 = "Overflowing in firstInstant(of:at:). unit: %{public}s, at: %{public}f";
    }
    _os_log_impl(&dword_1817D9000, v10, v11, v16, (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x186DA9E78](v13, -1, -1);
    MEMORY[0x186DA9E78](v12, -1, -1);
LABEL_14:

    *(_QWORD *)v4 = 0;
    *(_BYTE *)(v4 + 8) = 1;

    goto LABEL_16;
  }
  *(_QWORD *)v4 = v20[1];
  *(_BYTE *)(v4 + 8) = 0;
LABEL_16:
  result.value = v8;
  result.is_nil = v6;
  return result;
}

Foundation::Date __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _CalendarGregorian._firstInstant(of:at:)(Foundation::Calendar::Component of, Foundation::Date at)
{
  uint64_t *v2;
  double *v3;
  uint64_t v4;
  uint64_t v5;
  double *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t ObjectType;
  void (*v28)(_OWORD *__return_ptr, uint64_t, uint64_t);
  char v29;
  void *v30;
  uint64_t v31;
  char v32;
  char v33;
  double v34;
  uint64_t v35;
  long double *v36;
  unint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  BOOL v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  char v61;
  uint64_t v62;
  double v63;
  uint64_t v64;
  double v65;
  uint64_t v66;
  Foundation::Date result;
  long double v68;
  uint64_t v69;
  char v70;
  long double v71[3];
  uint64_t v72;
  long double v73[36];
  _OWORD v74[18];
  uint64_t v75[36];
  uint64_t __dst[36];
  __int128 __src[19];
  uint64_t v78;

  v5 = v4;
  v6 = v3;
  v7 = *v2;
  v8 = *(unsigned __int8 *)of;
  if (v8 - 10 >= 3)
    v9 = 8319;
  else
    v9 = 14577;
  v78 = v9;
  v75[0] = v9;
  *(_QWORD *)&v74[0] = v7;
  *(_OWORD *)__dst = *(_OWORD *)(v4 + 96);
  swift_unknownObjectRetain();
  _CalendarGregorian.dateComponents(_:from:in:)(v75, (double *)v74, __dst, __src);
  swift_unknownObjectRelease();
  switch(v8)
  {
    case 0u:
      LOBYTE(v75[0]) = 1;
      memcpy(__dst, __src, 0x11AuLL);
      outlined retain of DateComponents((uint64_t)__dst);
      _CalendarGregorian.minMaxRange(of:in:)((unsigned __int8 *)v75, __src);
      v11 = v10;
      v13 = v12;
      outlined release of DateComponents((uint64_t)__dst);
      if ((v13 & 1) != 0)
        v14 = 0;
      else
        v14 = v11;
      *(_QWORD *)&__src[3] = v14;
      BYTE8(__src[3]) = v13 & 1;
      goto LABEL_9;
    case 1u:
LABEL_9:
      LOBYTE(v75[0]) = 2;
      memcpy(__dst, __src, 0x11AuLL);
      outlined retain of DateComponents((uint64_t)__dst);
      _CalendarGregorian.minMaxRange(of:in:)((unsigned __int8 *)v75, __src);
      v16 = v15;
      v18 = v17;
      outlined release of DateComponents((uint64_t)__dst);
      if ((v18 & 1) != 0)
        v19 = 0;
      else
        v19 = v16;
      *(_QWORD *)&__src[4] = v19;
      BYTE8(__src[4]) = v18 & 1;
      BYTE9(__src[17]) = 0;
      goto LABEL_45;
    case 2u:
      goto LABEL_45;
    case 3u:
    case 7u:
    case 8u:
    case 0x11u:
      goto LABEL_49;
    case 4u:
      goto LABEL_53;
    case 5u:
      goto LABEL_57;
    case 6u:
      goto LABEL_61;
    case 9u:
      if ((BYTE8(__src[4]) & 1) != 0)
        goto LABEL_87;
      v37 = *(_QWORD *)&__src[4] - 1;
      if (__OFSUB__(*(_QWORD *)&__src[4], 1))
        goto LABEL_76;
      if (v37 > 0xC)
        goto LABEL_77;
      v38 = outlined read-only object #2 of _CalendarGregorian._firstInstant(of:at:)[v37 + 4];
      v39 = __OFADD__(v38, 1);
      v40 = v38 + 1;
      if (v39)
        goto LABEL_78;
      v41 = v40 == 0x7FFFFFFFFFFFFFFFLL;
      if (v40 == 0x7FFFFFFFFFFFFFFFLL)
        v40 = 0;
      *(_QWORD *)&__src[4] = v40;
      v42 = v41;
      BYTE8(__src[4]) = v42;
      BYTE9(__src[17]) = 0;
      v8 = 2;
LABEL_45:
      LOBYTE(v75[0]) = 3;
      memcpy(__dst, __src, 0x11AuLL);
      outlined retain of DateComponents((uint64_t)__dst);
      _CalendarGregorian.minMaxRange(of:in:)((unsigned __int8 *)v75, __src);
      v44 = v43;
      v46 = v45;
      outlined release of DateComponents((uint64_t)__dst);
      if ((v46 & 1) != 0)
        v47 = 0;
      else
        v47 = v44;
      *(_QWORD *)&__src[5] = v47;
      BYTE8(__src[5]) = v46 & 1;
      goto LABEL_49;
    case 0xAu:
    case 0xBu:
      goto LABEL_15;
    case 0xCu:
      LOBYTE(v75[0]) = 1;
      memcpy(__dst, __src, 0x11AuLL);
      outlined retain of DateComponents((uint64_t)__dst);
      _CalendarGregorian.minMaxRange(of:in:)((unsigned __int8 *)v75, __src);
      v21 = v20;
      v23 = v22;
      outlined release of DateComponents((uint64_t)__dst);
      if ((v23 & 1) != 0)
        goto LABEL_86;
      *(_QWORD *)&__src[16] = v21;
      BYTE8(__src[16]) = 0;
LABEL_15:
      memcpy(__dst, __src, 0x11AuLL);
      outlined retain of DateComponents((uint64_t)__dst);
      _CalendarGregorian.date(from:)(__src, (uint64_t)&v69);
      outlined release of DateComponents((uint64_t)__dst);
      if ((v70 & 1) != 0)
        goto LABEL_84;
      v24 = *(double *)&v69;
      *(_QWORD *)&v71[0] = 128;
      v72 = v69;
      *(_OWORD *)v73 = *(_OWORD *)(v5 + 96);
      swift_unknownObjectRetain();
      _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)v71, (double *)&v72, (uint64_t *)v73, v74);
      swift_unknownObjectRelease();
      memcpy(v75, v74, 0x11AuLL);
      outlined release of DateComponents((uint64_t)v75);
      if ((v75[23] & 1) != 0)
        goto LABEL_85;
      v25 = v75[22];
      break;
    default:
      goto LABEL_62;
  }
  while (1)
  {
    if (*(_BYTE *)(v5 + 120) != 1)
    {
      if (v25 == *(_QWORD *)(v5 + 112))
        goto LABEL_33;
      goto LABEL_29;
    }
    if (!*(_QWORD *)(v5 + 80))
      break;
    v26 = *(_QWORD *)(v5 + 88);
    ObjectType = swift_getObjectType();
    v28 = *(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v26 + 328);
    swift_unknownObjectRetain();
    v28(v74, ObjectType, v26);
    v29 = v74[0];
    if (one-time initialization token for weekdays != -1)
      swift_once();
    v30 = static Locale.Weekday.weekdays;
    swift_bridgeObjectRetain();
    v31 = specialized Collection<>.firstIndex(of:)(v29, (uint64_t)v30);
    v33 = v32;
    swift_bridgeObjectRelease();
    if ((v33 & 1) != 0)
      goto LABEL_81;
    swift_unknownObjectRelease();
    if (__OFADD__(v31, 1))
    {
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      __break(1u);
      JUMPOUT(0x181D68650);
    }
    if (v25 == v31 + 1)
      goto LABEL_33;
LABEL_29:
    LOBYTE(v68) = 3;
    v71[0] = v24;
    *(_OWORD *)v73 = *(_OWORD *)(v5 + 96);
    swift_unknownObjectRetain();
    _CalendarGregorian.add(_:to:amount:inTimeZone:)((unsigned __int8 *)&v68, v71, -3, (long double *)&v72);
    swift_unknownObjectRelease();
    LOBYTE(v68) = 3;
    *(_OWORD *)v73 = *(_OWORD *)(v5 + 96);
    swift_unknownObjectRetain();
    _CalendarGregorian.add(_:to:amount:inTimeZone:)((unsigned __int8 *)&v68, (double *)&v72, 2, v71);
    swift_unknownObjectRelease();
    v34 = v71[0];
    v72 = 128;
    v68 = v71[0];
    *(_OWORD *)v71 = *(_OWORD *)(v5 + 96);
    swift_unknownObjectRetain();
    _CalendarGregorian.dateComponents(_:from:in:)(&v72, &v68, (uint64_t *)v71, v73);
    swift_unknownObjectRelease();
    memcpy(v74, v73, 0x11AuLL);
    outlined release of DateComponents((uint64_t)v74);
    if ((BYTE8(v74[11]) & 1) != 0)
      goto LABEL_80;
    if (v24 == v34 || v25 == *(_QWORD *)&v74[11])
    {
      lazy protocol witness table accessor for type GregorianCalendarError and conformance GregorianCalendarError();
      swift_allocError();
      *(double *)v35 = v34;
      *(double *)(v35 + 8) = v24;
      *(_QWORD *)(v35 + 16) = 0;
      *(_BYTE *)(v35 + 24) = 1;
      swift_willThrow();
      memcpy(v73, __src, 0x11AuLL);
      v36 = v73;
LABEL_72:
      outlined release of DateComponents((uint64_t)v36);
      return result;
    }
    v24 = v34;
    v25 = *(_QWORD *)&v74[11];
  }
  if (v25 != 1)
    goto LABEL_29;
LABEL_33:
  *(_QWORD *)&v73[0] = v78;
  v71[0] = v24;
  v74[0] = *(_OWORD *)(v5 + 96);
  swift_unknownObjectRetain();
  _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)v73, v71, (uint64_t *)v74, __src);
  swift_unknownObjectRelease();
  outlined release of DateComponents((uint64_t)__dst);
  v8 = 3;
LABEL_49:
  LOBYTE(v75[0]) = 4;
  memcpy(__dst, __src, 0x11AuLL);
  outlined retain of DateComponents((uint64_t)__dst);
  _CalendarGregorian.minMaxRange(of:in:)((unsigned __int8 *)v75, __src);
  v49 = v48;
  v51 = v50;
  outlined release of DateComponents((uint64_t)__dst);
  if ((v51 & 1) != 0)
    v52 = 0;
  else
    v52 = v49;
  *(_QWORD *)&__src[7] = v52;
  BYTE8(__src[7]) = v51 & 1;
LABEL_53:
  LOBYTE(v75[0]) = 5;
  memcpy(__dst, __src, 0x11AuLL);
  outlined retain of DateComponents((uint64_t)__dst);
  _CalendarGregorian.minMaxRange(of:in:)((unsigned __int8 *)v75, __src);
  v54 = v53;
  v56 = v55;
  outlined release of DateComponents((uint64_t)__dst);
  if ((v56 & 1) != 0)
    v57 = 0;
  else
    v57 = v54;
  *(_QWORD *)&__src[8] = v57;
  BYTE8(__src[8]) = v56 & 1;
LABEL_57:
  LOBYTE(v75[0]) = 6;
  memcpy(__dst, __src, 0x11AuLL);
  outlined retain of DateComponents((uint64_t)__dst);
  _CalendarGregorian.minMaxRange(of:in:)((unsigned __int8 *)v75, __src);
  v59 = v58;
  v61 = v60;
  outlined release of DateComponents((uint64_t)__dst);
  if ((v61 & 1) != 0)
    v62 = 0;
  else
    v62 = v59;
  *(_QWORD *)&__src[9] = v62;
  BYTE8(__src[9]) = v61 & 1;
LABEL_61:
  *(_QWORD *)&__src[10] = 0;
  BYTE8(__src[10]) = 0;
LABEL_62:
  memcpy(__dst, __src, 0x11AuLL);
  outlined retain of DateComponents((uint64_t)__dst);
  _CalendarGregorian.date(from:)(__src, (uint64_t)v75);
  outlined release of DateComponents((uint64_t)__dst);
  if ((v75[1] & 1) != 0)
    goto LABEL_82;
  v63 = *(double *)v75;
  if (v8 <= 8 && ((1 << v8) & 0x188) != 0)
  {
    *(_QWORD *)&v71[0] = 8;
    v69 = v75[0];
    *(_OWORD *)v73 = *(_OWORD *)(v5 + 96);
    swift_unknownObjectRetain();
    _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)v71, (double *)&v69, (uint64_t *)v73, v74);
    swift_unknownObjectRelease();
    memcpy(v75, v74, 0x11AuLL);
    outlined release of DateComponents((uint64_t)v75);
    if ((v75[11] & 1) != 0)
      goto LABEL_83;
    v64 = v75[10];
    while (1)
    {
      LOBYTE(v69) = 6;
      v71[0] = v63;
      v74[0] = *(_OWORD *)(v5 + 96);
      swift_unknownObjectRetain();
      _CalendarGregorian.add(_:to:amount:inTimeZone:)((unsigned __int8 *)&v69, v71, -1, v73);
      swift_unknownObjectRelease();
      v65 = v73[0];
      if (v73[0] >= v63)
        break;
      v69 = 8;
      v72 = *(_QWORD *)&v73[0];
      *(_OWORD *)v71 = *(_OWORD *)(v5 + 96);
      swift_unknownObjectRetain();
      _CalendarGregorian.dateComponents(_:from:in:)(&v69, (double *)&v72, (uint64_t *)v71, v73);
      swift_unknownObjectRelease();
      memcpy(v74, v73, 0x11AuLL);
      outlined release of DateComponents((uint64_t)v74);
      if ((BYTE8(v74[5]) & 1) != 0)
        goto LABEL_79;
      if (v64 != *(_QWORD *)&v74[5])
        goto LABEL_73;
      v63 = v65;
    }
    lazy protocol witness table accessor for type GregorianCalendarError and conformance GregorianCalendarError();
    swift_allocError();
    *(double *)v66 = v65;
    *(double *)(v66 + 8) = v63;
    *(_QWORD *)(v66 + 16) = 0;
    *(_BYTE *)(v66 + 24) = 1;
    swift_willThrow();
    memcpy(v74, __src, 0x11AuLL);
    v36 = (long double *)v74;
    goto LABEL_72;
  }
LABEL_73:
  outlined release of DateComponents((uint64_t)__dst);
  *v6 = v63;
  return result;
}

Foundation::Date_optional __swiftcall _CalendarGregorian.start(of:at:)(Foundation::Calendar::Component of, Foundation::Date at)
{
  Foundation::Date_optional result;

  __asm { BR              X9 }
  return result;
}

void sub_181D686DC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, double a9, uint64_t a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, id a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  char v32;
  void *v33;
  void *v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46[4];
  char v47;
  id v48;

  LOBYTE(v46[0]) = v32;
  v48 = v33;
  _CalendarGregorian._firstInstant(of:at:)((Foundation::Calendar::Component)v46, *(Foundation::Date *)&a9);
  if (!v34)
  {
    *(_QWORD *)v31 = v46[1];
    *(_BYTE *)(v31 + 8) = 0;
    return;
  }
  v48 = v34;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {
    if ((v47 & 1) != 0)
    {
      if (one-time initialization token for logger != -1)
        swift_once();
      v35 = type metadata accessor for Logger();
      __swift_project_value_buffer(v35, (uint64_t)static _CalendarGregorian.logger);
      v36 = Logger.logObject.getter();
      v37 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v36, v37))
        goto LABEL_14;
      v38 = swift_slowAlloc();
      v39 = swift_slowAlloc();
      v46[0] = v39;
      *(_DWORD *)v38 = 136446466;
      v40 = Calendar.Component.debugDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v38 + 12) = 2050;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v42 = "Not advancing in firstInstant(of:at:). unit: %{public}s, at: %{public}f";
    }
    else
    {
      if (one-time initialization token for logger != -1)
        swift_once();
      v43 = type metadata accessor for Logger();
      __swift_project_value_buffer(v43, (uint64_t)static _CalendarGregorian.logger);
      v36 = Logger.logObject.getter();
      v37 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v36, v37))
        goto LABEL_14;
      v38 = swift_slowAlloc();
      v39 = swift_slowAlloc();
      v46[0] = v39;
      *(_DWORD *)v38 = 136446466;
      v44 = Calendar.Component.debugDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v38 + 12) = 2050;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v42 = "Overflowing in firstInstant(of:at:). unit: %{public}s, at: %{public}f";
    }
    _os_log_impl(&dword_1817D9000, v36, v37, v42, (uint8_t *)v38, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x186DA9E78](v39, -1, -1);
    MEMORY[0x186DA9E78](v38, -1, -1);
LABEL_14:

    *(_QWORD *)v31 = 0;
    *(_BYTE *)(v31 + 8) = 1;

    return;
  }

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::tuple_Foundation_Date_daysAdded_Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _CalendarGregorian.dateAfterDateWithTargetDoW(_:_:)(Foundation::Date a1, Swift::Int a2)
{
  double *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  Swift::Int v8;
  Swift::Double v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t ObjectType;
  uint64_t (*v34)(_OWORD *, uint64_t, _QWORD);
  uint64_t v35;
  double v36;
  uint64_t v37;
  double v38;
  uint64_t (*v39)(_OWORD *, uint64_t, _QWORD);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  Swift::Int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  Swift::tuple_Foundation_Date_daysAdded_Int result;
  uint64_t v55;
  double v56[3];
  double v57;
  uint64_t v58[36];
  _OWORD v59[18];
  uint64_t v60[36];
  double v61[36];
  uint64_t __dst[36];
  uint64_t __src[37];
  _BYTE v64[176];
  uint64_t v65;
  char v66;
  double v67;

  v5 = v4;
  v6 = v3;
  v7 = *v2;
  __dst[0] = 128;
  v61[0] = v7;
  *(_OWORD *)__src = *(_OWORD *)(v4 + 96);
  swift_unknownObjectRetain();
  _CalendarGregorian.dateComponents(_:from:in:)(__dst, v61, __src, v64);
  swift_unknownObjectRelease();
  v8 = outlined release of DateComponents((uint64_t)v64);
  if ((v66 & 1) != 0)
    goto LABEL_74;
  if (v65 == v6)
  {
    v8 = 0;
LABEL_53:
    *(double *)a2 = v7;
    goto LABEL_75;
  }
  v10 = 0;
  v55 = v6;
  while (1)
  {
    v11 = *(double *)(v5 + 96);
    v12 = *(double *)(v5 + 104);
    v13 = fmod(v7, 1.0);
    v14 = v13 >= 0.0 ? v7 - v13 : v7 - v13 + -1.0;
    v15 = v13 >= 0.0 ? v13 : v13 + 1.0;
    v60[0] = 112;
    *(double *)v59 = v7;
    v61[0] = v11;
    v61[1] = v12;
    swift_unknownObjectRetain_n();
    _CalendarGregorian.dateComponents(_:from:in:)(v60, (double *)v59, (uint64_t *)v61, __src);
    swift_unknownObjectRelease();
    v8 = (Swift::Int)memcpy(__dst, __src, 0x11AuLL);
    if ((__dst[15] & 1) != 0 || (__dst[17] & 1) != 0 || (__dst[19] & 1) != 0)
      break;
    v16 = __dst[14];
    v17 = __dst[16];
    v18 = __dst[18];
    v8 = outlined release of DateComponents((uint64_t)__dst);
    v19 = 3600 * v16;
    if ((unsigned __int128)(v16 * (__int128)3600) >> 64 != (3600 * v16) >> 63)
    {
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
      break;
    }
    v20 = 60 * v17;
    if ((unsigned __int128)(v17 * (__int128)60) >> 64 != (60 * v17) >> 63)
      goto LABEL_56;
    v21 = __OFADD__(v19, v20);
    v22 = v19 + v20;
    if (v21)
      goto LABEL_57;
    v23 = v22 + v18;
    if (__OFADD__(v22, v18))
      goto LABEL_58;
    v24 = v14 + 86400.0;
    v58[0] = 112;
    v56[0] = v14 + 86400.0;
    v59[0] = *(_OWORD *)(v5 + 96);
    swift_unknownObjectRetain();
    _CalendarGregorian.dateComponents(_:from:in:)(v58, v56, (uint64_t *)v59, v61);
    swift_unknownObjectRelease();
    v8 = (Swift::Int)memcpy(v60, v61, 0x11AuLL);
    if ((v60[15] & 1) != 0 || (v60[17] & 1) != 0 || (v60[19] & 1) != 0)
      goto LABEL_71;
    v25 = v60[14];
    v26 = v60[16];
    v27 = v60[18];
    v8 = outlined release of DateComponents((uint64_t)v60);
    v28 = 3600 * v25;
    if ((unsigned __int128)(v25 * (__int128)3600) >> 64 != (3600 * v25) >> 63)
      goto LABEL_59;
    v29 = 60 * v26;
    if ((unsigned __int128)(v26 * (__int128)60) >> 64 != (60 * v26) >> 63)
      goto LABEL_60;
    v21 = __OFADD__(v28, v29);
    v30 = v28 + v29;
    if (v21)
      goto LABEL_61;
    v21 = __OFADD__(v30, v27);
    v31 = v30 + v27;
    if (v21)
      goto LABEL_62;
    v32 = (double)v23;
    if ((double)v23 == (double)v31
      || (ObjectType = swift_getObjectType(),
          *(double *)v59 = v24,
          v34 = *(uint64_t (**)(_OWORD *, uint64_t, _QWORD))(*(_QWORD *)&v12 + 40),
          v35 = v34(v59, ObjectType, *(_QWORD *)&v12),
          *(double *)v59 = v7,
          v8 = v34(v59, ObjectType, *(_QWORD *)&v12),
          v35 == v8))
    {
      v36 = v24;
      if (v24 < -3187299600.0)
        goto LABEL_47;
    }
    else
    {
      v43 = v8;
      if (__OFSUB__(v8, v35))
        goto LABEL_64;
      v36 = v24 + (double)(v8 - v35);
      *(_QWORD *)&v67 = 112;
      v57 = v36;
      *(_OWORD *)v56 = *(_OWORD *)(v5 + 96);
      swift_unknownObjectRetain();
      _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)&v67, &v57, (uint64_t *)v56, v59);
      swift_unknownObjectRelease();
      v8 = (Swift::Int)memcpy(v58, v59, 0x11AuLL);
      if ((v58[15] & 1) != 0 || (v58[17] & 1) != 0 || (v58[19] & 1) != 0)
        goto LABEL_73;
      v44 = v58[14];
      v45 = v58[16];
      v46 = v58[18];
      v8 = outlined release of DateComponents((uint64_t)v58);
      v47 = 3600 * v44;
      if ((unsigned __int128)(v44 * (__int128)3600) >> 64 != (3600 * v44) >> 63)
        goto LABEL_65;
      v48 = 60 * v45;
      if ((unsigned __int128)(v45 * (__int128)60) >> 64 != (60 * v45) >> 63)
        goto LABEL_66;
      v21 = __OFADD__(v47, v48);
      v49 = v47 + v48;
      if (v21)
        goto LABEL_67;
      v21 = __OFADD__(v49, v46);
      v50 = v49 + v46;
      if (v21)
        goto LABEL_68;
      if ((double)v50 != v32 && v43 < v35)
        v36 = v24;
      v6 = v55;
      if (v36 < -3187299600.0)
      {
LABEL_47:
        swift_unknownObjectRelease();
        goto LABEL_48;
      }
    }
    v37 = swift_getObjectType();
    *(double *)v58 = v36 + -172800.0;
    (*(void (**)(_OWORD *__return_ptr, uint64_t *, uint64_t, double))(*(_QWORD *)&v12 + 80))(v59, v58, v37, COERCE_DOUBLE(*(_QWORD *)&v12));
    if ((BYTE8(v59[0]) & 1) != 0)
      goto LABEL_47;
    v38 = *(double *)v59;
    if (*(double *)v59 >= v36 + -172800.0 + 345600000.0 || v36 < *(double *)v59)
      goto LABEL_47;
    *(double *)v59 = *(double *)v59 + -1.0;
    v39 = *(uint64_t (**)(_OWORD *, uint64_t, _QWORD))(*(_QWORD *)&v12 + 40);
    v40 = v39(v59, v37, *(_QWORD *)&v12);
    *(double *)v59 = v38 + 1.0;
    v41 = v39(v59, v37, *(_QWORD *)&v12);
    v8 = swift_unknownObjectRelease();
    v42 = v40 - v41;
    if (__OFSUB__(v40, v41))
      goto LABEL_69;
    v6 = v55;
    if (v42 >= 1 && v36 < v38 + (double)v42)
      v36 = v36 - (double)v42;
LABEL_48:
    v51 = v15 + v36 + 0.0;
    if (v7 >= v51)
    {
      lazy protocol witness table accessor for type GregorianCalendarError and conformance GregorianCalendarError();
      swift_allocError();
      *(double *)v52 = v51;
      *(double *)(v52 + 8) = v7;
      *(_QWORD *)(v52 + 16) = 0;
      *(_BYTE *)(v52 + 24) = 1;
      v8 = swift_willThrow();
      goto LABEL_75;
    }
    *(_QWORD *)&v56[0] = 128;
    v67 = v15 + v36 + 0.0;
    v59[0] = *(_OWORD *)(v5 + 96);
    swift_unknownObjectRetain();
    _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)v56, &v67, (uint64_t *)v59, v58);
    swift_unknownObjectRelease();
    memcpy(v59, v58, 0x11AuLL);
    v8 = outlined release of DateComponents((uint64_t)v59);
    if ((BYTE8(v59[11]) & 1) != 0)
      goto LABEL_72;
    v8 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_63;
    ++v10;
    v7 = v15 + v36 + 0.0;
    if (*(_QWORD *)&v59[11] == v6)
    {
      v7 = v15 + v36 + 0.0;
      goto LABEL_53;
    }
  }
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  result._0 = *(Foundation::Date *)&v9;
  result.daysAdded = v8;
  return result;
}

Swift::Int_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _CalendarGregorian._ordinality(of:in:for:)(Foundation::Calendar::Component of, Foundation::Calendar::Component in, Foundation::Date a3)
{
  double *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  double v9;
  Swift::Int v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  double v16;
  Foundation::Date v17;
  uint64_t v18;
  double v19;
  Swift::Double v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  double v30;
  char v31;
  Foundation::Date v32;
  uint64_t v33;
  char v34;
  Swift::Int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  Foundation::Date v39;
  uint64_t v40;
  char v41;
  Swift::Int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  Foundation::Date v50;
  uint64_t v51;
  char v52;
  Swift::Int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  Foundation::Date v59;
  uint64_t v60;
  char v61;
  Swift::Int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  Foundation::Date v66;
  uint64_t v67;
  char v68;
  Swift::Int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  char v76;
  Foundation::Date v77;
  uint64_t v78;
  char v79;
  Swift::Int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  Swift::Double v85;
  Foundation::Date v86;
  uint64_t v87;
  char v88;
  Foundation::Date v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  unint64_t v94;
  Swift::Double v95;
  Foundation::Date v96;
  uint64_t v97;
  char v98;
  Foundation::Date v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  unint64_t v104;
  Swift::Double v105;
  Foundation::Date v106;
  Foundation::Date v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  Foundation::Date v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  Foundation::Date v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  double v123;
  Foundation::Date v124;
  uint64_t v125;
  uint64_t v126;
  double v127;
  uint64_t v128;
  uint64_t ObjectType;
  uint64_t (*v130)(uint64_t, uint64_t);
  uint64_t v131;
  char v132;
  Foundation::Date v133;
  uint64_t v134;
  char v135;
  Swift::Int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  Foundation::Date v141;
  uint64_t v142;
  char v143;
  Swift::Int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  Foundation::Date v148;
  uint64_t v149;
  char v150;
  Swift::Int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char v156;
  Foundation::Date v157;
  uint64_t v158;
  char v159;
  uint64_t v160;
  Swift::Int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  Foundation::Date v166;
  uint64_t v167;
  char v168;
  uint64_t v169;
  Swift::Int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  Foundation::Date v174;
  uint64_t v175;
  char v176;
  uint64_t v177;
  Swift::Int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char v183;
  Foundation::Date v184;
  uint64_t v185;
  char v186;
  Swift::Int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  Foundation::Date v192;
  uint64_t v193;
  char v194;
  Swift::Int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  Foundation::Date v199;
  uint64_t v200;
  char v201;
  Swift::Int v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  Swift::Int v206;
  unint64_t v207;
  char v208;
  _QWORD *v209;
  Swift::Int v210;
  Foundation::Date v211;
  Swift::Int v212;
  Swift::Int v213;
  Swift::Int v214;
  uint64_t v215;
  Swift::Int v216;
  uint64_t v217;
  Swift::Int v218;
  uint64_t v219;
  Swift::Int v220;
  uint64_t v221;
  Swift::Int v222;
  char v223;
  uint64_t v224;
  char v225;
  Swift::Int v226;
  char v227;
  Foundation::Date v228;
  uint64_t v229;
  char v230;
  Swift::Int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  Foundation::Date v236;
  uint64_t v237;
  char v238;
  Swift::Int v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  Foundation::Date v243;
  uint64_t v244;
  char v245;
  Swift::Int v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  char v251;
  Swift::Double time;
  double v253;
  uint64_t v254;
  char v255;
  char v256;
  Foundation::Date v257;
  uint64_t v258;
  char v259;
  uint64_t v260;
  Swift::Int v261;
  uint64_t v262;
  uint64_t v263;
  Foundation::Date v264;
  uint64_t v265;
  char v266;
  uint64_t v267;
  Swift::Int v268;
  uint64_t v269;
  uint64_t v270;
  Foundation::Date v271;
  uint64_t v272;
  char v273;
  uint64_t v274;
  Swift::Int v275;
  uint64_t v276;
  uint64_t v277;
  char v278;
  Foundation::Date v279;
  uint64_t v280;
  char v281;
  char v282;
  char v283;
  uint64_t v284;
  char v285;
  uint64_t v286;
  char v287;
  double v288;
  char v289;
  double v290;
  uint64_t v291;
  char v292;
  uint64_t v293;
  char v294;
  Swift::Int v295;
  __int128 __dst[18];
  Foundation::Date from;
  char v298;
  _OWORD __src[18];
  Foundation::Date fora[2];
  __int128 v301;
  uint64_t v302;
  char v303;
  Swift::Int fromYear;
  char v305;
  Swift::Int month;
  char v307;
  Swift::Int day;
  char v309;
  uint64_t v310;
  char v311;
  uint64_t v312;
  char v313;
  uint64_t v314;
  char v315;
  uint64_t v316;
  char v317;
  uint64_t v318;
  char v319;
  uint64_t v320;
  char v321;
  uint64_t v322;
  char v323;
  uint64_t v324;
  char v325;
  uint64_t v326;
  char v327;
  uint64_t v328;
  char v329;
  uint64_t v330;
  char v331;
  uint64_t v332;
  __int16 v333;
  int v334;
  int v335;
  Swift::Int_optional result;

  v5 = 0;
  v6 = *(unsigned __int8 *)in;
  v7 = 1;
  LODWORD(v8) = *(unsigned __int8 *)of;
  v9 = *v3;
  switch(v6)
  {
    case 0:
      switch(*(_BYTE *)of)
      {
        case 1:
          goto LABEL_350;
        case 2:
          LOBYTE(__dst[0]) = 0;
          *(double *)__src = v9;
          _CalendarGregorian.start(of:at:)((Foundation::Calendar::Component)__dst, a3);
          if ((LOBYTE(fora[1]._time) & 1) != 0)
            goto LABEL_364;
          time = fora[0]._time;
          v253 = floor((v9 - fora[0]._time) / 86400.0 * 0.03125 * 0.96875);
          if ((~*(_QWORD *)&v253 & 0x7FF0000000000000) == 0)
            goto LABEL_483;
          if (v253 <= -9.22337204e18)
            goto LABEL_485;
          if (v253 >= 9.22337204e18)
            goto LABEL_487;
          if ((uint64_t)v253 <= 10)
            v254 = 0;
          else
            v254 = (uint64_t)v253 - 10;
          v22 = fora[0]._time;
          while (1)
          {
            v5 = v254 + 1;
            if (__OFADD__(v254, 1))
              break;
            LOBYTE(from._time) = 2;
            *(Swift::Double *)__dst = time;
            *(_OWORD *)&fora[0]._time = *(_OWORD *)(v4 + 96);
            swift_unknownObjectRetain();
            _CalendarGregorian.add(_:to:amount:inTimeZone:)((unsigned __int8 *)&from, (double *)__dst, v254 + 1, (long double *)__src);
            swift_unknownObjectRelease();
            v23 = *(_QWORD *)&__src[0];
            if (v22 >= *(double *)__src)
              goto LABEL_423;
            v255 = 0;
            ++v254;
            v22 = *(double *)__src;
            if (v9 < *(double *)__src)
              goto LABEL_424;
          }
          __break(1u);
LABEL_429:
          __break(1u);
LABEL_430:
          __break(1u);
          goto LABEL_431;
        case 3:
          LOBYTE(__dst[0]) = 0;
          *(double *)__src = v9;
          _CalendarGregorian.start(of:at:)((Foundation::Calendar::Component)__dst, a3);
          if ((LOBYTE(fora[1]._time) & 1) != 0)
            goto LABEL_364;
          v288 = floor((v9 - fora[0]._time) / 86400.0);
          if ((~*(_QWORD *)&v288 & 0x7FF0000000000000) == 0)
            goto LABEL_484;
          if (v288 <= -9.22337204e18)
            goto LABEL_486;
          if (v288 >= 9.22337204e18)
            goto LABEL_488;
          v5 = (uint64_t)v288 + 1;
          if (!__OFADD__((uint64_t)v288, 1))
            goto LABEL_408;
          goto LABEL_489;
        case 4:
          LOBYTE(__src[0]) = 3;
          LOBYTE(__dst[0]) = 0;
          fora[0] = *(Foundation::Date *)&v9;
          *(Swift::Int_optional *)&of = _CalendarGregorian._ordinality(of:in:for:)((Foundation::Calendar::Component)__src, (Foundation::Calendar::Component)__dst, a3);
          if (v258)
            goto LABEL_424;
          v5 = of;
          if ((v259 & 1) != 0)
            goto LABEL_392;
          v260 = of - 1;
          if (__OFSUB__(of, 1))
            goto LABEL_535;
          if (v260 > 0x555555555555554)
            goto LABEL_364;
          LOBYTE(__src[0]) = 4;
          fora[0] = *(Foundation::Date *)&v9;
          v261 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)__src, v257);
          v262 = 24 * v260;
          if ((unsigned __int128)(v260 * (__int128)24) >> 64 != (24 * v260) >> 63)
            goto LABEL_547;
          v57 = __OFADD__(v262, v261);
          v263 = v262 + v261;
          if (v57)
            goto LABEL_548;
          v5 = v263 + 1;
          if (!__OFADD__(v263, 1))
            goto LABEL_408;
          __break(1u);
LABEL_374:
          LOBYTE(__src[0]) = 4;
          LOBYTE(__dst[0]) = 0;
          fora[0] = *(Foundation::Date *)&v9;
          *(Swift::Int_optional *)&of = _CalendarGregorian._ordinality(of:in:for:)((Foundation::Calendar::Component)__src, (Foundation::Calendar::Component)__dst, a3);
          if (v265)
            goto LABEL_424;
          v5 = of;
          if ((v266 & 1) != 0)
            goto LABEL_392;
          v267 = of - 1;
          if (__OFSUB__(of, 1))
            goto LABEL_536;
          if (v267 > 0x222222222222221)
            goto LABEL_364;
          LOBYTE(__src[0]) = 5;
          fora[0] = *(Foundation::Date *)&v9;
          v268 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)__src, v264);
          v269 = 60 * v267;
          if ((unsigned __int128)(v267 * (__int128)60) >> 64 != (60 * v267) >> 63)
            goto LABEL_549;
          v57 = __OFADD__(v269, v268);
          v270 = v269 + v268;
          if (v57)
            goto LABEL_550;
          v5 = v270 + 1;
          if (!__OFADD__(v270, 1))
            goto LABEL_408;
          __break(1u);
LABEL_383:
          LOBYTE(__src[0]) = 5;
          LOBYTE(__dst[0]) = 0;
          fora[0] = *(Foundation::Date *)&v9;
          *(Swift::Int_optional *)&of = _CalendarGregorian._ordinality(of:in:for:)((Foundation::Calendar::Component)__src, (Foundation::Calendar::Component)__dst, a3);
          if (v272)
            goto LABEL_424;
          v5 = of;
          if ((v273 & 1) != 0)
            goto LABEL_392;
          v274 = of - 1;
          if (__OFSUB__(of, 1))
            goto LABEL_537;
          if (v274 > 0x222222222222221)
            goto LABEL_364;
          LOBYTE(__src[0]) = 6;
          fora[0] = *(Foundation::Date *)&v9;
          v275 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)__src, v271);
          v276 = 60 * v274;
          if ((unsigned __int128)(v274 * (__int128)60) >> 64 != (60 * v274) >> 63)
            goto LABEL_551;
          v57 = __OFADD__(v276, v275);
          v277 = v276 + v275;
          if (v57)
            goto LABEL_552;
          v5 = v277 + 1;
          if (!__OFADD__(v277, 1))
            goto LABEL_408;
          __break(1u);
          goto LABEL_392;
        case 5:
          goto LABEL_374;
        case 6:
          goto LABEL_383;
        case 7:
        case 8:
          LOBYTE(__dst[0]) = 0;
          *(double *)__src = v9;
          v15 = (unint64_t)_CalendarGregorian.start(of:at:)((Foundation::Calendar::Component)__dst, a3);
          if ((LOBYTE(fora[1]._time) & 1) != 0)
            goto LABEL_364;
          v16 = fora[0]._time;
          LOBYTE(__src[0]) = 7;
          fora[0] = *(Foundation::Date *)&v9;
          _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)__src, (Foundation::Date)v15);
          *(double *)__src = v16;
          _CalendarGregorian.dateAfterDateWithTargetDoW(_:_:)(v17, (Swift::Int)fora);
          if (v18)
            goto LABEL_424;
          v19 = floor((v9 - v16) / 86400.0 / 7.0);
          if ((~*(_QWORD *)&v19 & 0x7FF0000000000000) == 0)
            goto LABEL_490;
          if (v19 <= -9.22337204e18)
            goto LABEL_492;
          if (v19 >= 9.22337204e18)
            goto LABEL_494;
          v20 = fora[0]._time;
          if ((uint64_t)v19 <= 10)
            v21 = 0;
          else
            v21 = (uint64_t)v19 - 10;
          v22 = fora[0]._time;
          break;
        case 9:
          LOBYTE(__src[0]) = 1;
          LOBYTE(__dst[0]) = 0;
          fora[0] = *(Foundation::Date *)&v9;
          *(Swift::Int_optional *)&of = _CalendarGregorian._ordinality(of:in:for:)((Foundation::Calendar::Component)__src, (Foundation::Calendar::Component)__dst, a3);
          if (v280)
            goto LABEL_424;
          v5 = of;
          v282 = v281;
          v283 = 1;
          if ((v282 & 1) != 0)
            goto LABEL_424;
          LOBYTE(__src[0]) = 9;
          LOBYTE(__dst[0]) = 1;
          fora[0] = *(Foundation::Date *)&v9;
          *(Swift::Int_optional *)&of = _CalendarGregorian._ordinality(of:in:for:)((Foundation::Calendar::Component)__src, (Foundation::Calendar::Component)__dst, v279);
          if (v284)
            goto LABEL_424;
          if ((v285 & 1) != 0)
            goto LABEL_425;
          v286 = v5 - 1;
          if (__OFSUB__(v5, 1))
            goto LABEL_554;
          if ((unint64_t)(v5 - 0x2000000000000001) >> 62 != 3)
            goto LABEL_555;
          v5 = of + 4 * v286;
          if (!__OFADD__(of, 4 * v286))
            goto LABEL_408;
          __break(1u);
LABEL_402:
          v132 = 12;
          goto LABEL_403;
        case 0xA:
        case 0xB:
          goto LABEL_191;
        case 0xC:
          goto LABEL_402;
        default:
          goto LABEL_52;
      }
      while (1)
      {
        v5 = v21 + 1;
        if (__OFADD__(v21, 1))
          goto LABEL_434;
        LOBYTE(from._time) = 11;
        *(Swift::Double *)__dst = v20;
        *(_OWORD *)&fora[0]._time = *(_OWORD *)(v4 + 96);
        swift_unknownObjectRetain();
        _CalendarGregorian.add(_:to:amount:inTimeZone:)((unsigned __int8 *)&from, (double *)__dst, v21 + 1, (long double *)__src);
        swift_unknownObjectRelease();
        v23 = *(_QWORD *)&__src[0];
        if (v22 >= *(double *)__src)
          goto LABEL_423;
        v24 = 0;
        ++v21;
        v22 = *(double *)__src;
        if (*(double *)__src >= v9)
          goto LABEL_424;
      }
    case 1:
      v5 = 0;
      switch(*(_BYTE *)of)
      {
        case 2:
          goto LABEL_266;
        case 3:
        case 0x11:
          *(_QWORD *)&__dst[0] = 14;
          from._time = v9;
          __src[0] = *(_OWORD *)(v4 + 96);
          swift_unknownObjectRetain();
          _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)__dst, &from._time, (uint64_t *)__src, fora);
          swift_unknownObjectRelease();
          if ((v305 & 1) != 0)
            goto LABEL_560;
          if ((v307 & 1) != 0)
            goto LABEL_561;
          if ((v309 & 1) != 0)
            goto LABEL_562;
          v5 = _CalendarGregorian.dayOfYear(fromYear:month:day:)(fromYear, month, day);
          outlined release of DateComponents((uint64_t)fora);
          v25 = 0;
          goto LABEL_424;
        case 4:
          LOBYTE(__src[0]) = 3;
          LOBYTE(__dst[0]) = 1;
          fora[0] = *(Foundation::Date *)&v9;
          *(Swift::Int_optional *)&of = _CalendarGregorian._ordinality(of:in:for:)((Foundation::Calendar::Component)__src, (Foundation::Calendar::Component)__dst, a3);
          if (v185)
            goto LABEL_424;
          v5 = of;
          if ((v186 & 1) != 0)
            goto LABEL_392;
          LOBYTE(__src[0]) = 4;
          fora[0] = *(Foundation::Date *)&v9;
          v187 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)__src, v184);
          v188 = v5 - 1;
          if (__OFSUB__(v5, 1))
            goto LABEL_511;
          v189 = (unsigned __int128)(v188 * (__int128)24) >> 64;
          v190 = 24 * v188;
          if (v189 != v190 >> 63)
            goto LABEL_519;
          v57 = __OFADD__(v190, v187);
          v191 = v190 + v187;
          if (v57)
            goto LABEL_520;
          v5 = v191 + 1;
          if (!__OFADD__(v191, 1))
            goto LABEL_408;
          __break(1u);
LABEL_275:
          LOBYTE(__src[0]) = 4;
          LOBYTE(__dst[0]) = 1;
          fora[0] = *(Foundation::Date *)&v9;
          *(Swift::Int_optional *)&of = _CalendarGregorian._ordinality(of:in:for:)((Foundation::Calendar::Component)__src, (Foundation::Calendar::Component)__dst, a3);
          if (v193)
            goto LABEL_424;
          v5 = of;
          if ((v194 & 1) != 0)
            goto LABEL_392;
          LOBYTE(__src[0]) = 5;
          fora[0] = *(Foundation::Date *)&v9;
          v195 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)__src, v192);
          v196 = v5 - 1;
          if (__OFSUB__(v5, 1))
            goto LABEL_512;
          v197 = 60 * v196;
          if ((unsigned __int128)(v196 * (__int128)60) >> 64 != (60 * v196) >> 63)
            goto LABEL_521;
          v198 = v197 + v195;
          if (__OFADD__(v197, v195))
            goto LABEL_522;
          v5 = v198 + 1;
          if (!__OFADD__(v198, 1))
            goto LABEL_408;
          __break(1u);
LABEL_283:
          LOBYTE(__src[0]) = 5;
          LOBYTE(__dst[0]) = 1;
          fora[0] = *(Foundation::Date *)&v9;
          *(Swift::Int_optional *)&of = _CalendarGregorian._ordinality(of:in:for:)((Foundation::Calendar::Component)__src, (Foundation::Calendar::Component)__dst, a3);
          if (v200)
            goto LABEL_424;
          v5 = of;
          if ((v201 & 1) != 0)
            goto LABEL_392;
          LOBYTE(__src[0]) = 6;
          fora[0] = *(Foundation::Date *)&v9;
          v202 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)__src, v199);
          v203 = v5 - 1;
          if (__OFSUB__(v5, 1))
            goto LABEL_513;
          v204 = 60 * v203;
          if ((unsigned __int128)(v203 * (__int128)60) >> 64 != (60 * v203) >> 63)
            goto LABEL_523;
          v205 = v204 + v202;
          if (__OFADD__(v204, v202))
            goto LABEL_524;
          v5 = v205 + 1;
          if (!__OFADD__(v205, 1))
            goto LABEL_408;
          __break(1u);
LABEL_291:
          LOBYTE(__src[0]) = 2;
          fora[0] = *(Foundation::Date *)&v9;
          v206 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)__src, a3);
          v207 = v206 - 1;
          if (__OFSUB__(v206, 1))
            goto LABEL_449;
          if (v207 > 0xC)
            goto LABEL_453;
          v208 = 0;
          v209 = &outlined read-only object #0 of _CalendarGregorian._ordinality(of:in:for:);
          break;
        case 5:
          goto LABEL_275;
        case 6:
          goto LABEL_283;
        case 7:
        case 8:
          goto LABEL_159;
        case 9:
          goto LABEL_291;
        case 0xB:
          *(_QWORD *)&__dst[0] = 14;
          from._time = v9;
          __src[0] = *(_OWORD *)(v4 + 96);
          swift_unknownObjectRetain();
          _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)__dst, &from._time, (uint64_t *)__src, fora);
          swift_unknownObjectRelease();
          if ((v305 & 1) != 0)
            goto LABEL_563;
          if ((v307 & 1) != 0)
            goto LABEL_564;
          if ((v309 & 1) != 0)
            goto LABEL_565;
          v210 = fromYear;
          v295 = _CalendarGregorian.dayOfYear(fromYear:month:day:)(fromYear, month, day);
          v334 = v333;
          v335 = HIBYTE(v333);
          __src[0] = *(_OWORD *)&fora[0]._time;
          __src[1] = v301;
          *(_QWORD *)&__src[2] = v302;
          BYTE8(__src[2]) = v303;
          *(_QWORD *)&__src[3] = v210;
          BYTE8(__src[3]) = 0;
          *(_QWORD *)&__src[4] = 1;
          BYTE8(__src[4]) = 0;
          *(_QWORD *)&__src[5] = 1;
          BYTE8(__src[5]) = 0;
          *(_QWORD *)&__src[6] = v310;
          BYTE8(__src[6]) = v311;
          *(_QWORD *)&__src[7] = v312;
          BYTE8(__src[7]) = v313;
          *(_QWORD *)&__src[8] = v314;
          BYTE8(__src[8]) = v315;
          *(_QWORD *)&__src[9] = v316;
          BYTE8(__src[9]) = v317;
          *(_QWORD *)&__src[10] = v318;
          BYTE8(__src[10]) = v319;
          *(_QWORD *)&__src[11] = v320;
          BYTE8(__src[11]) = v321;
          *(_QWORD *)&__src[12] = v322;
          BYTE8(__src[12]) = v323;
          *(_QWORD *)&__src[13] = v324;
          BYTE8(__src[13]) = v325;
          *(_QWORD *)&__src[14] = v326;
          BYTE8(__src[14]) = v327;
          *(_QWORD *)&__src[15] = v328;
          BYTE8(__src[15]) = v329;
          BYTE8(__src[16]) = v331;
          *(_QWORD *)&__src[16] = v330;
          *(_QWORD *)&__src[17] = v332;
          WORD4(__src[17]) = v333;
          memcpy(__dst, __src, 0x11AuLL);
          outlined retain of DateComponents((uint64_t)fora);
          outlined retain of DateComponents((uint64_t)__src);
          _CalendarGregorian.date(from:)(__dst, (uint64_t)&from);
          outlined release of DateComponents((uint64_t)__src);
          if ((v298 & 1) != 0)
            goto LABEL_566;
          v211._time = from._time;
          LOBYTE(from._time) = 7;
          *(Foundation::Date *)&__dst[0] = v211;
          v212 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)&from, v211);
          v213 = v295 + 7;
          if (__OFADD__(v295, 7))
            goto LABEL_450;
          v214 = v212;
          v215 = _CalendarGregorian.minimumDaysInFirstWeek.getter();
          v57 = __OFSUB__(v213, v215);
          v216 = v213 - v215;
          if (v57)
            goto LABEL_454;
          v217 = _CalendarGregorian.minimumDaysInFirstWeek.getter();
          v57 = __OFADD__(v214, v217);
          v218 = v214 + v217;
          if (v57)
            goto LABEL_457;
          v219 = _CalendarGregorian.firstWeekday.getter();
          outlined release of DateComponents((uint64_t)fora);
          outlined release of DateComponents((uint64_t)__src);
          v220 = v218 - v219;
          if (__OFSUB__(v218, v219))
            goto LABEL_458;
          if (__OFADD__(v220, 6))
            goto LABEL_459;
          v221 = (v220 + 6) % 7;
          v57 = __OFADD__(v216, v221);
          v222 = v216 + v221;
          if (v57)
            goto LABEL_460;
          v223 = 0;
          v29 = (unsigned __int128)(v222 * (__int128)0x4924924924924925) >> 64;
          goto LABEL_305;
        case 0xD:
          LOBYTE(__src[0]) = 6;
          LOBYTE(__dst[0]) = 1;
          fora[0] = *(Foundation::Date *)&v9;
          *(Swift::Int_optional *)&of = _CalendarGregorian._ordinality(of:in:for:)((Foundation::Calendar::Component)__src, (Foundation::Calendar::Component)__dst, a3);
          if (v224)
            goto LABEL_424;
          v5 = of;
          if ((v225 & 1) != 0)
            goto LABEL_392;
          a3._time = (v9 - floor(v9) + (double)of + -1.0) * 1000000000.0;
          if ((~*(_QWORD *)&a3._time & 0x7FF0000000000000) == 0)
            goto LABEL_514;
          if (a3._time <= -9.22337204e18)
            goto LABEL_525;
          if (a3._time >= 9.22337204e18)
            goto LABEL_526;
          v5 = (uint64_t)a3._time + 1;
          if (!__OFADD__((uint64_t)a3._time, 1))
            goto LABEL_408;
          __break(1u);
          goto LABEL_314;
        default:
          goto LABEL_424;
      }
LABEL_317:
      v5 = v209[v207 + 4];
      goto LABEL_424;
    case 2:
      v5 = 0;
      switch(*(_BYTE *)of)
      {
        case 3:
          v132 = 3;
          goto LABEL_403;
        case 4:
          LOBYTE(__src[0]) = 3;
          LOBYTE(__dst[0]) = 2;
          fora[0] = *(Foundation::Date *)&v9;
          *(Swift::Int_optional *)&of = _CalendarGregorian._ordinality(of:in:for:)((Foundation::Calendar::Component)__src, (Foundation::Calendar::Component)__dst, a3);
          if (v134)
            goto LABEL_424;
          v5 = of;
          if ((v135 & 1) != 0)
            goto LABEL_392;
          LOBYTE(__src[0]) = 4;
          fora[0] = *(Foundation::Date *)&v9;
          v136 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)__src, v133);
          v137 = v5 - 1;
          if (__OFSUB__(v5, 1))
            goto LABEL_496;
          v138 = (unsigned __int128)(v137 * (__int128)24) >> 64;
          v139 = 24 * v137;
          if (v138 != v139 >> 63)
            goto LABEL_500;
          v57 = __OFADD__(v139, v136);
          v140 = v139 + v136;
          if (v57)
            goto LABEL_501;
          v5 = v140 + 1;
          if (!__OFADD__(v140, 1))
            goto LABEL_408;
          __break(1u);
LABEL_205:
          LOBYTE(__src[0]) = 4;
          LOBYTE(__dst[0]) = 2;
          fora[0] = *(Foundation::Date *)&v9;
          *(Swift::Int_optional *)&of = _CalendarGregorian._ordinality(of:in:for:)((Foundation::Calendar::Component)__src, (Foundation::Calendar::Component)__dst, a3);
          if (v142)
            goto LABEL_424;
          v5 = of;
          if ((v143 & 1) != 0)
            goto LABEL_392;
          LOBYTE(__src[0]) = 5;
          fora[0] = *(Foundation::Date *)&v9;
          v144 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)__src, v141);
          v145 = v5 - 1;
          if (__OFSUB__(v5, 1))
            goto LABEL_497;
          v146 = 60 * v145;
          if ((unsigned __int128)(v145 * (__int128)60) >> 64 != (60 * v145) >> 63)
            goto LABEL_502;
          v147 = v146 + v144;
          if (__OFADD__(v146, v144))
            goto LABEL_503;
          v5 = v147 + 1;
          if (!__OFADD__(v147, 1))
            goto LABEL_408;
          __break(1u);
LABEL_213:
          LOBYTE(__src[0]) = 5;
          LOBYTE(__dst[0]) = 2;
          fora[0] = *(Foundation::Date *)&v9;
          *(Swift::Int_optional *)&of = _CalendarGregorian._ordinality(of:in:for:)((Foundation::Calendar::Component)__src, (Foundation::Calendar::Component)__dst, a3);
          if (v149)
            goto LABEL_424;
          v5 = of;
          if ((v150 & 1) != 0)
            goto LABEL_392;
          LOBYTE(__src[0]) = 6;
          fora[0] = *(Foundation::Date *)&v9;
          v151 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)__src, v148);
          v152 = v5 - 1;
          if (__OFSUB__(v5, 1))
            goto LABEL_498;
          v153 = 60 * v152;
          if ((unsigned __int128)(v152 * (__int128)60) >> 64 != (60 * v152) >> 63)
            goto LABEL_504;
          v154 = v153 + v151;
          if (__OFADD__(v153, v151))
            goto LABEL_505;
          v5 = v154 + 1;
          if (!__OFADD__(v154, 1))
            goto LABEL_408;
          __break(1u);
LABEL_221:
          v132 = 10;
          break;
        case 5:
          goto LABEL_205;
        case 6:
          goto LABEL_213;
        case 7:
        case 8:
          LOBYTE(__src[0]) = 3;
          LOBYTE(__dst[0]) = 2;
          fora[0] = *(Foundation::Date *)&v9;
          *(Swift::Int_optional *)&of = _CalendarGregorian._ordinality(of:in:for:)((Foundation::Calendar::Component)__src, (Foundation::Calendar::Component)__dst, a3);
          if (v26)
            goto LABEL_424;
          v5 = of;
          if ((v27 & 1) != 0)
            goto LABEL_392;
          if (__OFADD__(of, 6))
            goto LABEL_482;
          v28 = 0;
          v29 = (unsigned __int128)((of + 6) * (__int128)0x4924924924924925) >> 64;
LABEL_305:
          v5 = (v29 >> 1) + ((unint64_t)v29 >> 63);
          goto LABEL_424;
        case 0xA:
          goto LABEL_221;
        case 0xD:
          LOBYTE(__src[0]) = 6;
          LOBYTE(__dst[0]) = 2;
          fora[0] = *(Foundation::Date *)&v9;
          *(Swift::Int_optional *)&of = _CalendarGregorian._ordinality(of:in:for:)((Foundation::Calendar::Component)__src, (Foundation::Calendar::Component)__dst, a3);
          if (v155)
            goto LABEL_424;
          v5 = of;
          if ((v156 & 1) != 0)
            goto LABEL_392;
          a3._time = (v9 - floor(v9) + (double)of + -1.0) * 1000000000.0;
          if ((~*(_QWORD *)&a3._time & 0x7FF0000000000000) == 0)
            goto LABEL_499;
          if (a3._time <= -9.22337204e18)
            goto LABEL_506;
          if (a3._time >= 9.22337204e18)
            goto LABEL_507;
          v5 = (uint64_t)a3._time + 1;
          if (!__OFADD__((uint64_t)a3._time, 1))
            goto LABEL_408;
          __break(1u);
          goto LABEL_230;
        default:
          goto LABEL_424;
      }
      goto LABEL_403;
    case 3:
    case 7:
    case 17:
      v5 = 0;
      switch(*(_BYTE *)of)
      {
        case 4:
          LOBYTE(__src[0]) = 4;
          fora[0] = *(Foundation::Date *)&v9;
          *(_QWORD *)&of = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)__src, a3);
          v5 = of + 1;
          if (!__OFADD__(of, 1))
            goto LABEL_408;
          __break(1u);
          break;
        case 5:
          goto LABEL_69;
        case 6:
          goto LABEL_77;
        case 0xD:
          goto LABEL_85;
        default:
          goto LABEL_424;
      }
      goto LABEL_6;
    case 4:
      if ((_DWORD)v8 == 13)
        goto LABEL_133;
      if ((_DWORD)v8 == 6)
        goto LABEL_141;
      if ((_DWORD)v8 != 5)
        goto LABEL_52;
      LOBYTE(__src[0]) = 5;
      fora[0] = *(Foundation::Date *)&v9;
      *(_QWORD *)&of = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)__src, a3);
      v5 = of + 1;
      if (!__OFADD__(of, 1))
        goto LABEL_408;
      __break(1u);
LABEL_42:
      if ((_DWORD)v8 != 13)
      {
        if ((_DWORD)v8 != 6)
          goto LABEL_52;
        LOBYTE(__src[0]) = 6;
        fora[0] = *(Foundation::Date *)&v9;
        *(_QWORD *)&of = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)__src, a3);
        v5 = of + 1;
        if (!__OFADD__(of, 1))
        {
LABEL_408:
          v289 = 0;
          goto LABEL_424;
        }
        __break(1u);
LABEL_47:
        if ((_DWORD)v8 != 13)
        {
LABEL_52:
          v5 = 0;
          goto LABEL_424;
        }
        v30 = (v9 - floor(v9)) * 1000000000.0 + 1.0;
        if ((~*(_QWORD *)&v30 & 0x7FF0000000000000) != 0)
        {
          if (v30 > -9.22337204e18)
          {
            if (v30 < 9.22337204e18)
            {
              v31 = 0;
              v5 = (uint64_t)v30;
              goto LABEL_424;
            }
            goto LABEL_433;
          }
        }
        else
        {
LABEL_431:
          __break(1u);
        }
        __break(1u);
LABEL_433:
        __break(1u);
LABEL_434:
        __break(1u);
LABEL_435:
        __break(1u);
LABEL_436:
        __break(1u);
LABEL_437:
        __break(1u);
LABEL_438:
        __break(1u);
LABEL_439:
        __break(1u);
LABEL_440:
        __break(1u);
LABEL_441:
        __break(1u);
LABEL_442:
        __break(1u);
LABEL_443:
        __break(1u);
LABEL_444:
        __break(1u);
LABEL_445:
        __break(1u);
LABEL_446:
        __break(1u);
LABEL_447:
        __break(1u);
LABEL_448:
        __break(1u);
LABEL_449:
        __break(1u);
LABEL_450:
        __break(1u);
LABEL_451:
        __break(1u);
LABEL_452:
        __break(1u);
LABEL_453:
        __break(1u);
LABEL_454:
        __break(1u);
LABEL_455:
        __break(1u);
LABEL_456:
        __break(1u);
LABEL_457:
        __break(1u);
LABEL_458:
        __break(1u);
LABEL_459:
        __break(1u);
LABEL_460:
        __break(1u);
        goto LABEL_461;
      }
LABEL_93:
      LOBYTE(__src[0]) = 6;
      LOBYTE(__dst[0]) = 5;
      fora[0] = *(Foundation::Date *)&v9;
      *(Swift::Int_optional *)&of = _CalendarGregorian._ordinality(of:in:for:)((Foundation::Calendar::Component)__src, (Foundation::Calendar::Component)__dst, a3);
      if (v48)
        goto LABEL_424;
      v5 = of;
      if ((v49 & 1) != 0)
        goto LABEL_392;
      a3._time = (v9 - floor(v9) + (double)of + -1.0) * 1000000000.0;
      if ((~*(_QWORD *)&a3._time & 0x7FF0000000000000) == 0)
      {
LABEL_461:
        __break(1u);
        goto LABEL_462;
      }
      if (a3._time <= -9.22337204e18)
      {
LABEL_462:
        __break(1u);
        goto LABEL_463;
      }
      if (a3._time >= 9.22337204e18)
      {
LABEL_463:
        __break(1u);
        goto LABEL_464;
      }
      v5 = (uint64_t)a3._time + 1;
      if (!__OFADD__((uint64_t)a3._time, 1))
        goto LABEL_408;
      __break(1u);
LABEL_101:
      LOBYTE(__src[0]) = 3;
      LOBYTE(__dst[0]) = 11;
      fora[0] = *(Foundation::Date *)&v9;
      *(Swift::Int_optional *)&of = _CalendarGregorian._ordinality(of:in:for:)((Foundation::Calendar::Component)__src, (Foundation::Calendar::Component)__dst, a3);
      if (v51)
        goto LABEL_424;
      v5 = of;
      if ((v52 & 1) != 0)
        goto LABEL_392;
      LOBYTE(__src[0]) = 4;
      fora[0] = *(Foundation::Date *)&v9;
      v53 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)__src, v50);
      v54 = v5 - 1;
      if (__OFSUB__(v5, 1))
      {
LABEL_464:
        __break(1u);
        goto LABEL_465;
      }
      v55 = (unsigned __int128)(v54 * (__int128)24) >> 64;
      v56 = 24 * v54;
      if (v55 != v56 >> 63)
      {
LABEL_468:
        __break(1u);
        goto LABEL_469;
      }
      v57 = __OFADD__(v56, v53);
      v58 = v56 + v53;
      if (v57)
      {
LABEL_472:
        __break(1u);
        goto LABEL_473;
      }
      v5 = v58 + 1;
      if (!__OFADD__(v58, 1))
        goto LABEL_408;
      __break(1u);
LABEL_109:
      LOBYTE(__src[0]) = 4;
      LOBYTE(__dst[0]) = 11;
      fora[0] = *(Foundation::Date *)&v9;
      *(Swift::Int_optional *)&of = _CalendarGregorian._ordinality(of:in:for:)((Foundation::Calendar::Component)__src, (Foundation::Calendar::Component)__dst, a3);
      if (v60)
        goto LABEL_424;
      v5 = of;
      if ((v61 & 1) != 0)
        goto LABEL_392;
      LOBYTE(__src[0]) = 5;
      fora[0] = *(Foundation::Date *)&v9;
      v62 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)__src, v59);
      v63 = v5 - 1;
      if (__OFSUB__(v5, 1))
      {
LABEL_465:
        __break(1u);
        goto LABEL_466;
      }
      v64 = 60 * v63;
      if ((unsigned __int128)(v63 * (__int128)60) >> 64 != (60 * v63) >> 63)
      {
LABEL_469:
        __break(1u);
        goto LABEL_470;
      }
      v65 = v64 + v62;
      if (__OFADD__(v64, v62))
      {
LABEL_473:
        __break(1u);
        goto LABEL_474;
      }
      v5 = v65 + 1;
      if (!__OFADD__(v65, 1))
        goto LABEL_408;
      __break(1u);
LABEL_117:
      LOBYTE(__src[0]) = 5;
      LOBYTE(__dst[0]) = 11;
      fora[0] = *(Foundation::Date *)&v9;
      *(Swift::Int_optional *)&of = _CalendarGregorian._ordinality(of:in:for:)((Foundation::Calendar::Component)__src, (Foundation::Calendar::Component)__dst, a3);
      if (v67)
        goto LABEL_424;
      v5 = of;
      if ((v68 & 1) != 0)
        goto LABEL_392;
      LOBYTE(__src[0]) = 6;
      fora[0] = *(Foundation::Date *)&v9;
      v69 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)__src, v66);
      v70 = v5 - 1;
      if (__OFSUB__(v5, 1))
      {
LABEL_466:
        __break(1u);
        goto LABEL_467;
      }
      v71 = 60 * v70;
      if ((unsigned __int128)(v70 * (__int128)60) >> 64 != (60 * v70) >> 63)
      {
LABEL_470:
        __break(1u);
        goto LABEL_471;
      }
      v72 = v71 + v69;
      if (__OFADD__(v71, v69))
      {
LABEL_474:
        __break(1u);
        goto LABEL_475;
      }
      v5 = v72 + 1;
      if (!__OFADD__(v72, 1))
        goto LABEL_408;
      __break(1u);
LABEL_125:
      LOBYTE(__src[0]) = 6;
      LOBYTE(__dst[0]) = 11;
      fora[0] = *(Foundation::Date *)&v9;
      *(Swift::Int_optional *)&of = _CalendarGregorian._ordinality(of:in:for:)((Foundation::Calendar::Component)__src, (Foundation::Calendar::Component)__dst, a3);
      if (v73)
        goto LABEL_424;
      v5 = of;
      if ((v74 & 1) != 0)
        goto LABEL_392;
      a3._time = (v9 - floor(v9) + (double)of + -1.0) * 1000000000.0;
      if ((~*(_QWORD *)&a3._time & 0x7FF0000000000000) == 0)
      {
LABEL_467:
        __break(1u);
        goto LABEL_468;
      }
      if (a3._time <= -9.22337204e18)
      {
LABEL_471:
        __break(1u);
        goto LABEL_472;
      }
      if (a3._time >= 9.22337204e18)
      {
LABEL_475:
        __break(1u);
        goto LABEL_476;
      }
      v5 = (uint64_t)a3._time + 1;
      if (!__OFADD__((uint64_t)a3._time, 1))
        goto LABEL_408;
      __break(1u);
LABEL_133:
      LOBYTE(__src[0]) = 6;
      LOBYTE(__dst[0]) = 4;
      fora[0] = *(Foundation::Date *)&v9;
      *(Swift::Int_optional *)&of = _CalendarGregorian._ordinality(of:in:for:)((Foundation::Calendar::Component)__src, (Foundation::Calendar::Component)__dst, a3);
      if (v75)
        goto LABEL_424;
      v5 = of;
      if ((v76 & 1) != 0)
        goto LABEL_392;
      a3._time = (v9 - floor(v9) + (double)of + -1.0) * 1000000000.0;
      if ((~*(_QWORD *)&a3._time & 0x7FF0000000000000) == 0)
      {
LABEL_476:
        __break(1u);
        goto LABEL_477;
      }
      if (a3._time <= -9.22337204e18)
      {
LABEL_478:
        __break(1u);
        goto LABEL_479;
      }
      if (a3._time >= 9.22337204e18)
      {
LABEL_480:
        __break(1u);
LABEL_481:
        __break(1u);
LABEL_482:
        __break(1u);
LABEL_483:
        __break(1u);
LABEL_484:
        __break(1u);
LABEL_485:
        __break(1u);
LABEL_486:
        __break(1u);
LABEL_487:
        __break(1u);
LABEL_488:
        __break(1u);
LABEL_489:
        __break(1u);
LABEL_490:
        __break(1u);
        goto LABEL_491;
      }
      v5 = (uint64_t)a3._time + 1;
      if (!__OFADD__((uint64_t)a3._time, 1))
        goto LABEL_408;
      __break(1u);
LABEL_141:
      LOBYTE(__src[0]) = 5;
      LOBYTE(__dst[0]) = 4;
      fora[0] = *(Foundation::Date *)&v9;
      *(Swift::Int_optional *)&of = _CalendarGregorian._ordinality(of:in:for:)((Foundation::Calendar::Component)__src, (Foundation::Calendar::Component)__dst, a3);
      if (v78)
        goto LABEL_424;
      v5 = of;
      if ((v79 & 1) != 0)
        goto LABEL_392;
      LOBYTE(__src[0]) = 6;
      fora[0] = *(Foundation::Date *)&v9;
      v80 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)__src, v77);
      v81 = v5 - 1;
      if (__OFSUB__(v5, 1))
      {
LABEL_477:
        __break(1u);
        goto LABEL_478;
      }
      v82 = 60 * v81;
      if ((unsigned __int128)(v81 * (__int128)60) >> 64 != (60 * v81) >> 63)
      {
LABEL_479:
        __break(1u);
        goto LABEL_480;
      }
      v83 = v82 + v80;
      if (__OFADD__(v82, v80))
        goto LABEL_481;
      v5 = v83 + 1;
      if (!__OFADD__(v83, 1))
        goto LABEL_408;
      __break(1u);
LABEL_149:
      v5 = 12;
      LOBYTE(__dst[0]) = 12;
      *(double *)__src = v9;
      v84 = (unint64_t)_CalendarGregorian.start(of:at:)((Foundation::Calendar::Component)__dst, a3);
      if ((LOBYTE(fora[1]._time) & 1) != 0)
        goto LABEL_364;
      v85 = fora[0]._time;
      LOBYTE(__src[0]) = 11;
      LOBYTE(__dst[0]) = 12;
      fora[0] = *(Foundation::Date *)&v9;
      *(Swift::Int_optional *)&of = _CalendarGregorian._ordinality(of:in:for:)((Foundation::Calendar::Component)__src, (Foundation::Calendar::Component)__dst, (Foundation::Date)v84);
      if (v87)
        goto LABEL_424;
      v5 = of;
      if ((v88 & 1) != 0)
        goto LABEL_392;
      LOBYTE(__src[0]) = 7;
      fora[0] = *(Foundation::Date *)&v85;
      _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)__src, v86);
      *(Swift::Double *)__src = v85;
      _CalendarGregorian.dateAfterDateWithTargetDoW(_:_:)(v89, (Swift::Int)fora);
      if (v90)
        goto LABEL_424;
      LOBYTE(__src[0]) = 11;
      LOBYTE(__dst[0]) = 12;
      *(Swift::Int_optional *)&of = _CalendarGregorian._ordinality(of:in:for:)((Foundation::Calendar::Component)__src, (Foundation::Calendar::Component)__dst, fora[0]);
      if (v91)
        goto LABEL_424;
      if ((v92 & 1) != 0)
        goto LABEL_425;
      v93 = v5 - of;
      if (__OFSUB__(v5, of))
      {
LABEL_556:
        __break(1u);
        goto LABEL_557;
      }
      v5 = v93 + 1;
      if (!__OFADD__(v93, 1))
        goto LABEL_408;
      __break(1u);
LABEL_159:
      v5 = 1;
      LOBYTE(__dst[0]) = 1;
      *(double *)__src = v9;
      v94 = (unint64_t)_CalendarGregorian.start(of:at:)((Foundation::Calendar::Component)__dst, a3);
      if ((LOBYTE(fora[1]._time) & 1) != 0)
        goto LABEL_364;
      v95 = fora[0]._time;
      LOBYTE(__src[0]) = 11;
      LOBYTE(__dst[0]) = 1;
      fora[0] = *(Foundation::Date *)&v9;
      *(Swift::Int_optional *)&of = _CalendarGregorian._ordinality(of:in:for:)((Foundation::Calendar::Component)__src, (Foundation::Calendar::Component)__dst, (Foundation::Date)v94);
      if (v97)
        goto LABEL_424;
      v5 = of;
      if ((v98 & 1) != 0)
        goto LABEL_392;
      LOBYTE(__src[0]) = 7;
      fora[0] = *(Foundation::Date *)&v9;
      _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)__src, v96);
      *(Swift::Double *)__src = v95;
      _CalendarGregorian.dateAfterDateWithTargetDoW(_:_:)(v99, (Swift::Int)fora);
      if (v100)
        goto LABEL_424;
      LOBYTE(__src[0]) = 11;
      LOBYTE(__dst[0]) = 1;
      *(Swift::Int_optional *)&of = _CalendarGregorian._ordinality(of:in:for:)((Foundation::Calendar::Component)__src, (Foundation::Calendar::Component)__dst, fora[0]);
      if (v101)
        goto LABEL_424;
      if ((v102 & 1) != 0)
        goto LABEL_425;
      v103 = v5 - of;
      if (__OFSUB__(v5, of))
      {
LABEL_557:
        __break(1u);
        goto LABEL_558;
      }
      v5 = v103 + 1;
      if (!__OFADD__(v103, 1))
        goto LABEL_408;
      __break(1u);
LABEL_169:
      LOBYTE(__dst[0]) = 9;
      *(double *)__src = v9;
      v104 = (unint64_t)_CalendarGregorian.start(of:at:)((Foundation::Calendar::Component)__dst, a3);
      if ((LOBYTE(fora[1]._time) & 1) != 0)
        goto LABEL_364;
      v105 = fora[0]._time;
      LOBYTE(__src[0]) = 7;
      fora[0] = *(Foundation::Date *)&v9;
      _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)__src, (Foundation::Date)v104);
      LOBYTE(__src[0]) = 11;
      LOBYTE(__dst[0]) = 1;
      fora[0] = *(Foundation::Date *)&v9;
      *(Swift::Int_optional *)&of = _CalendarGregorian._ordinality(of:in:for:)((Foundation::Calendar::Component)__src, (Foundation::Calendar::Component)__dst, v106);
      if (v108)
        goto LABEL_424;
      v5 = of;
      if ((v109 & 1) != 0)
        goto LABEL_392;
      *(Swift::Double *)__src = v105;
      _CalendarGregorian.dateAfterDateWithTargetDoW(_:_:)(v107, (Swift::Int)fora);
      if (v110)
        goto LABEL_424;
      LOBYTE(__src[0]) = 11;
      LOBYTE(__dst[0]) = 1;
      *(Swift::Int_optional *)&of = _CalendarGregorian._ordinality(of:in:for:)((Foundation::Calendar::Component)__src, (Foundation::Calendar::Component)__dst, fora[0]);
      if (v111)
        goto LABEL_424;
      if ((v112 & 1) != 0)
        goto LABEL_425;
      v113 = v5 - of;
      if (__OFSUB__(v5, of))
      {
LABEL_558:
        __break(1u);
LABEL_559:
        __break(1u);
LABEL_560:
        __break(1u);
LABEL_561:
        __break(1u);
LABEL_562:
        __break(1u);
LABEL_563:
        __break(1u);
LABEL_564:
        __break(1u);
LABEL_565:
        __break(1u);
LABEL_566:
        __break(1u);
        JUMPOUT(0x181D6B6E8);
      }
      v5 = v113 + 1;
      if (!__OFADD__(v113, 1))
        goto LABEL_408;
      __break(1u);
LABEL_179:
      LOBYTE(__dst[0]) = 9;
      *(double *)__src = v9;
      _CalendarGregorian.start(of:at:)((Foundation::Calendar::Component)__dst, a3);
      if ((LOBYTE(fora[1]._time) & 1) != 0)
        goto LABEL_364;
      *(Foundation::Date *)&__src[0] = fora[0];
      _CalendarGregorian.firstWeekday.getter();
      *(_QWORD *)&of = *(_OWORD *)&_CalendarGregorian.dateAfterDateWithTargetDoW(_:_:)(v114, (Swift::Int)fora);
      if (v115)
        goto LABEL_424;
      v116 = of;
      LOBYTE(__src[0]) = 11;
      LOBYTE(__dst[0]) = 1;
      *(Swift::Int_optional *)&of = _CalendarGregorian._ordinality(of:in:for:)((Foundation::Calendar::Component)__src, (Foundation::Calendar::Component)__dst, fora[0]);
      if (v117)
        goto LABEL_424;
      v5 = of;
      if ((v118 & 1) != 0)
      {
LABEL_392:
        v278 = 1;
        goto LABEL_424;
      }
      if (v116 >= _CalendarGregorian.minimumDaysInFirstWeek.getter())
      {
        v57 = __OFSUB__(v5--, 1);
        if (v57)
        {
LABEL_553:
          __break(1u);
LABEL_554:
          __break(1u);
LABEL_555:
          __break(1u);
          goto LABEL_556;
        }
      }
      LOBYTE(__src[0]) = 11;
      LOBYTE(__dst[0]) = 1;
      fora[0] = *(Foundation::Date *)&v9;
      *(Swift::Int_optional *)&of = _CalendarGregorian._ordinality(of:in:for:)((Foundation::Calendar::Component)__src, (Foundation::Calendar::Component)__dst, v119);
      if (v120)
        goto LABEL_424;
      if ((v121 & 1) != 0)
      {
LABEL_425:
        v294 = 1;
        v5 = of;
        goto LABEL_424;
      }
      v122 = of - v5;
      if (__OFSUB__(of, v5))
        goto LABEL_559;
      v5 = v122 + 1;
      if (!__OFADD__(v122, 1))
        goto LABEL_408;
      __break(1u);
LABEL_191:
      LOBYTE(__dst[0]) = 0;
      *(double *)__src = v9;
      _CalendarGregorian.start(of:at:)((Foundation::Calendar::Component)__dst, a3);
      if ((LOBYTE(fora[1]._time) & 1) != 0)
      {
LABEL_364:
        v5 = 0;
        v256 = 1;
        goto LABEL_424;
      }
      v123 = fora[0]._time;
      *(Foundation::Date *)&__src[0] = fora[0];
      _CalendarGregorian.firstWeekday.getter();
      *(_QWORD *)&of = *(_OWORD *)&_CalendarGregorian.dateAfterDateWithTargetDoW(_:_:)(v124, (Swift::Int)fora);
      if (v125)
        goto LABEL_424;
      v126 = of;
      v127 = v123 + (double)of * 86400.0;
      if (*(_BYTE *)(v4 + 136) != 1)
      {
        v131 = *(_QWORD *)(v4 + 128);
LABEL_410:
        if (v126 < v131)
          goto LABEL_412;
        goto LABEL_411;
      }
      if (*(_QWORD *)(v4 + 80))
      {
        v128 = *(_QWORD *)(v4 + 88);
        ObjectType = swift_getObjectType();
        v130 = *(uint64_t (**)(uint64_t, uint64_t))(v128 + 344);
        swift_unknownObjectRetain();
        v131 = v130(ObjectType, v128);
        swift_unknownObjectRelease();
        goto LABEL_410;
      }
      if (of >= Foundation_Calendar_Component_year)
LABEL_411:
        v127 = v127 + -604800.0;
LABEL_412:
      v290 = floor((v9 - v127) / 86400.0 / 7.0);
      if ((~*(_QWORD *)&v290 & 0x7FF0000000000000) == 0)
      {
LABEL_491:
        __break(1u);
LABEL_492:
        __break(1u);
LABEL_493:
        __break(1u);
LABEL_494:
        __break(1u);
        goto LABEL_495;
      }
      if (v290 <= -9.22337204e18)
        goto LABEL_493;
      if (v290 >= 9.22337204e18)
      {
LABEL_495:
        __break(1u);
LABEL_496:
        __break(1u);
LABEL_497:
        __break(1u);
LABEL_498:
        __break(1u);
LABEL_499:
        __break(1u);
LABEL_500:
        __break(1u);
LABEL_501:
        __break(1u);
LABEL_502:
        __break(1u);
LABEL_503:
        __break(1u);
LABEL_504:
        __break(1u);
LABEL_505:
        __break(1u);
LABEL_506:
        __break(1u);
LABEL_507:
        __break(1u);
LABEL_508:
        __break(1u);
LABEL_509:
        __break(1u);
LABEL_510:
        __break(1u);
LABEL_511:
        __break(1u);
LABEL_512:
        __break(1u);
LABEL_513:
        __break(1u);
LABEL_514:
        __break(1u);
LABEL_515:
        __break(1u);
LABEL_516:
        __break(1u);
LABEL_517:
        __break(1u);
LABEL_518:
        __break(1u);
LABEL_519:
        __break(1u);
LABEL_520:
        __break(1u);
LABEL_521:
        __break(1u);
LABEL_522:
        __break(1u);
LABEL_523:
        __break(1u);
LABEL_524:
        __break(1u);
LABEL_525:
        __break(1u);
LABEL_526:
        __break(1u);
LABEL_527:
        __break(1u);
LABEL_528:
        __break(1u);
LABEL_529:
        __break(1u);
LABEL_530:
        __break(1u);
LABEL_531:
        __break(1u);
LABEL_532:
        __break(1u);
LABEL_533:
        __break(1u);
LABEL_534:
        __break(1u);
LABEL_535:
        __break(1u);
LABEL_536:
        __break(1u);
LABEL_537:
        __break(1u);
LABEL_538:
        __break(1u);
LABEL_539:
        __break(1u);
LABEL_540:
        __break(1u);
LABEL_541:
        __break(1u);
LABEL_542:
        __break(1u);
LABEL_543:
        __break(1u);
LABEL_544:
        __break(1u);
LABEL_545:
        __break(1u);
LABEL_546:
        __break(1u);
LABEL_547:
        __break(1u);
LABEL_548:
        __break(1u);
LABEL_549:
        __break(1u);
LABEL_550:
        __break(1u);
LABEL_551:
        __break(1u);
LABEL_552:
        __break(1u);
        goto LABEL_553;
      }
      if ((uint64_t)v290 <= 10)
        v291 = 0;
      else
        v291 = (uint64_t)v290 - 109;
      v22 = v127;
      while (1)
      {
        v5 = v291 + 1;
        if (__OFADD__(v291, 1))
          goto LABEL_435;
        LOBYTE(from._time) = 11;
        *(double *)__dst = v127;
        *(_OWORD *)&fora[0]._time = *(_OWORD *)(v4 + 96);
        swift_unknownObjectRetain();
        _CalendarGregorian.add(_:to:amount:inTimeZone:)((unsigned __int8 *)&from, (double *)__dst, v291 + 1, (long double *)__src);
        swift_unknownObjectRelease();
        v23 = *(_QWORD *)&__src[0];
        if (v22 >= *(double *)__src)
          break;
        v292 = 0;
        ++v291;
        v22 = *(double *)__src;
        if (v9 < *(double *)__src)
          goto LABEL_424;
      }
LABEL_423:
      lazy protocol witness table accessor for type GregorianCalendarError and conformance GregorianCalendarError();
      swift_allocError();
      *(_QWORD *)v293 = v23;
      *(double *)(v293 + 8) = v22;
      *(_QWORD *)(v293 + 16) = 0;
      *(_BYTE *)(v293 + 24) = 1;
      swift_willThrow();
LABEL_424:
      *(_QWORD *)&of = v5;
      LOBYTE(result.value) = of;
      return result;
    case 5:
      goto LABEL_42;
    case 6:
      goto LABEL_47;
    case 9:
      v5 = 0;
      switch(*(_BYTE *)of)
      {
        case 2:
LABEL_314:
          LOBYTE(__src[0]) = 2;
          fora[0] = *(Foundation::Date *)&v9;
          v226 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)__src, a3);
          v207 = v226 - 1;
          if (__OFSUB__(v226, 1))
            goto LABEL_451;
          if (v207 > 0xC)
            goto LABEL_455;
          v227 = 0;
          v209 = &outlined read-only object #3 of _CalendarGregorian._ordinality(of:in:for:);
          goto LABEL_317;
        case 3:
        case 0x11:
          LOBYTE(__dst[0]) = 9;
          *(double *)__src = v9;
          _CalendarGregorian.start(of:at:)((Foundation::Calendar::Component)__dst, a3);
          if ((LOBYTE(fora[1]._time) & 1) != 0)
            goto LABEL_364;
          a3._time = floor((v9 - fora[0]._time) / 86400.0);
          if ((~*(_QWORD *)&a3._time & 0x7FF0000000000000) == 0)
            goto LABEL_448;
          if (a3._time <= -9.22337204e18)
            goto LABEL_452;
          if (a3._time >= 9.22337204e18)
            goto LABEL_456;
          v8 = (uint64_t)a3._time;
          v5 = (uint64_t)a3._time + 1;
          if (!__OFADD__((uint64_t)a3._time, 1))
            goto LABEL_408;
          __break(1u);
          goto LABEL_61;
        case 4:
          LOBYTE(__src[0]) = 3;
          LOBYTE(__dst[0]) = 9;
          fora[0] = *(Foundation::Date *)&v9;
          *(Swift::Int_optional *)&of = _CalendarGregorian._ordinality(of:in:for:)((Foundation::Calendar::Component)__src, (Foundation::Calendar::Component)__dst, a3);
          if (v229)
            goto LABEL_424;
          v5 = of;
          if ((v230 & 1) != 0)
            goto LABEL_392;
          LOBYTE(__src[0]) = 4;
          fora[0] = *(Foundation::Date *)&v9;
          v231 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)__src, v228);
          v232 = v5 - 1;
          if (__OFSUB__(v5, 1))
            goto LABEL_515;
          v233 = (unsigned __int128)(v232 * (__int128)24) >> 64;
          v234 = 24 * v232;
          if (v233 != v234 >> 63)
            goto LABEL_527;
          v57 = __OFADD__(v234, v231);
          v235 = v234 + v231;
          if (v57)
            goto LABEL_528;
          v5 = v235 + 1;
          if (!__OFADD__(v235, 1))
            goto LABEL_408;
          __break(1u);
LABEL_326:
          LOBYTE(__src[0]) = 4;
          LOBYTE(__dst[0]) = 9;
          fora[0] = *(Foundation::Date *)&v9;
          *(Swift::Int_optional *)&of = _CalendarGregorian._ordinality(of:in:for:)((Foundation::Calendar::Component)__src, (Foundation::Calendar::Component)__dst, a3);
          if (v237)
            goto LABEL_424;
          v5 = of;
          if ((v238 & 1) != 0)
            goto LABEL_392;
          LOBYTE(__src[0]) = 5;
          fora[0] = *(Foundation::Date *)&v9;
          v239 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)__src, v236);
          v240 = v5 - 1;
          if (__OFSUB__(v5, 1))
            goto LABEL_516;
          v241 = 60 * v240;
          if ((unsigned __int128)(v240 * (__int128)60) >> 64 != (60 * v240) >> 63)
            goto LABEL_529;
          v242 = v241 + v239;
          if (__OFADD__(v241, v239))
            goto LABEL_530;
          v5 = v242 + 1;
          if (!__OFADD__(v242, 1))
            goto LABEL_408;
          __break(1u);
LABEL_334:
          LOBYTE(__src[0]) = 5;
          LOBYTE(__dst[0]) = 9;
          fora[0] = *(Foundation::Date *)&v9;
          *(Swift::Int_optional *)&of = _CalendarGregorian._ordinality(of:in:for:)((Foundation::Calendar::Component)__src, (Foundation::Calendar::Component)__dst, a3);
          if (v244)
            goto LABEL_424;
          v5 = of;
          if ((v245 & 1) != 0)
            goto LABEL_392;
          LOBYTE(__src[0]) = 6;
          fora[0] = *(Foundation::Date *)&v9;
          v246 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)__src, v243);
          v247 = v5 - 1;
          if (__OFSUB__(v5, 1))
            goto LABEL_517;
          v248 = 60 * v247;
          if ((unsigned __int128)(v247 * (__int128)60) >> 64 != (60 * v247) >> 63)
            goto LABEL_531;
          v249 = v248 + v246;
          if (__OFADD__(v248, v246))
            goto LABEL_532;
          v5 = v249 + 1;
          if (!__OFADD__(v249, 1))
            goto LABEL_408;
          __break(1u);
LABEL_342:
          LOBYTE(__src[0]) = 6;
          LOBYTE(__dst[0]) = 9;
          fora[0] = *(Foundation::Date *)&v9;
          *(Swift::Int_optional *)&of = _CalendarGregorian._ordinality(of:in:for:)((Foundation::Calendar::Component)__src, (Foundation::Calendar::Component)__dst, a3);
          if (v250)
            goto LABEL_424;
          v5 = of;
          if ((v251 & 1) != 0)
            goto LABEL_392;
          a3._time = (v9 - floor(v9) + (double)of + -1.0) * 1000000000.0;
          if ((~*(_QWORD *)&a3._time & 0x7FF0000000000000) == 0)
            goto LABEL_518;
          if (a3._time <= -9.22337204e18)
            goto LABEL_533;
          if (a3._time >= 9.22337204e18)
            goto LABEL_534;
          v5 = (uint64_t)a3._time + 1;
          if (!__OFADD__((uint64_t)a3._time, 1))
            goto LABEL_408;
          __break(1u);
LABEL_350:
          v132 = 1;
          break;
        case 5:
          goto LABEL_326;
        case 6:
          goto LABEL_334;
        case 7:
        case 8:
          goto LABEL_169;
        case 0xA:
        case 0xB:
          goto LABEL_179;
        case 0xD:
          goto LABEL_342;
        default:
          goto LABEL_424;
      }
LABEL_403:
      LOBYTE(__src[0]) = v132;
      fora[0] = *(Foundation::Date *)&v9;
      v5 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)__src, a3);
      v287 = 0;
      goto LABEL_424;
    case 10:
    case 11:
LABEL_6:
      v5 = 0;
      switch((int)v8)
      {
        case 3:
        case 7:
          LOBYTE(__src[0]) = 7;
          fora[0] = *(Foundation::Date *)&v9;
          v10 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)__src, a3);
          v11 = v10 + 1;
          if (__OFADD__(v10, 1))
            goto LABEL_429;
          v12 = _CalendarGregorian.firstWeekday.getter();
          v13 = v11 - v12;
          if (__OFSUB__(v11, v12))
            goto LABEL_430;
          v14 = 0;
          if (v13 <= 0)
            v5 = v13 + 7;
          else
            v5 = v11 - v12;
          break;
        case 4:
          goto LABEL_101;
        case 5:
          goto LABEL_109;
        case 6:
          goto LABEL_117;
        case 13:
          goto LABEL_125;
        default:
          goto LABEL_424;
      }
      goto LABEL_424;
    case 12:
LABEL_61:
      v5 = 0;
      switch((int)v8)
      {
        case 3:
        case 17:
          LOBYTE(__dst[0]) = 12;
          *(double *)__src = v9;
          _CalendarGregorian.start(of:at:)((Foundation::Calendar::Component)__dst, a3);
          if ((LOBYTE(fora[1]._time) & 1) != 0)
            goto LABEL_364;
          a3._time = floor((v9 - fora[0]._time) / 86400.0);
          if ((~*(_QWORD *)&a3._time & 0x7FF0000000000000) == 0)
            goto LABEL_445;
          if (a3._time <= -9.22337204e18)
            goto LABEL_446;
          if (a3._time >= 9.22337204e18)
            goto LABEL_447;
          v5 = (uint64_t)a3._time + 1;
          if (!__OFADD__((uint64_t)a3._time, 1))
            goto LABEL_408;
          __break(1u);
LABEL_69:
          LOBYTE(__src[0]) = 4;
          LOBYTE(__dst[0]) = 3;
          fora[0] = *(Foundation::Date *)&v9;
          *(Swift::Int_optional *)&of = _CalendarGregorian._ordinality(of:in:for:)((Foundation::Calendar::Component)__src, (Foundation::Calendar::Component)__dst, a3);
          if (v33)
            goto LABEL_424;
          v5 = of;
          if ((v34 & 1) != 0)
            goto LABEL_392;
          LOBYTE(__src[0]) = 5;
          fora[0] = *(Foundation::Date *)&v9;
          v35 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)__src, v32);
          v36 = v5 - 1;
          if (__OFSUB__(v5, 1))
            goto LABEL_436;
          v37 = 60 * v36;
          if ((unsigned __int128)(v36 * (__int128)60) >> 64 != (60 * v36) >> 63)
            goto LABEL_439;
          v38 = v37 + v35;
          if (__OFADD__(v37, v35))
            goto LABEL_442;
          v5 = v38 + 1;
          if (!__OFADD__(v38, 1))
            goto LABEL_408;
          __break(1u);
LABEL_77:
          LOBYTE(__src[0]) = 5;
          LOBYTE(__dst[0]) = 3;
          fora[0] = *(Foundation::Date *)&v9;
          *(Swift::Int_optional *)&of = _CalendarGregorian._ordinality(of:in:for:)((Foundation::Calendar::Component)__src, (Foundation::Calendar::Component)__dst, a3);
          if (v40)
            goto LABEL_424;
          v5 = of;
          if ((v41 & 1) != 0)
            goto LABEL_392;
          LOBYTE(__src[0]) = 6;
          fora[0] = *(Foundation::Date *)&v9;
          v42 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)__src, v39);
          v43 = v5 - 1;
          if (__OFSUB__(v5, 1))
            goto LABEL_437;
          v44 = 60 * v43;
          if ((unsigned __int128)(v43 * (__int128)60) >> 64 != (60 * v43) >> 63)
            goto LABEL_440;
          v45 = v44 + v42;
          if (__OFADD__(v44, v42))
            goto LABEL_443;
          v5 = v45 + 1;
          if (!__OFADD__(v45, 1))
            goto LABEL_408;
          __break(1u);
LABEL_85:
          LOBYTE(__src[0]) = 6;
          LOBYTE(__dst[0]) = 3;
          fora[0] = *(Foundation::Date *)&v9;
          *(Swift::Int_optional *)&of = _CalendarGregorian._ordinality(of:in:for:)((Foundation::Calendar::Component)__src, (Foundation::Calendar::Component)__dst, a3);
          if (v46)
            goto LABEL_424;
          v5 = of;
          if ((v47 & 1) != 0)
            goto LABEL_392;
          a3._time = (v9 - floor(v9) + (double)of + -1.0) * 1000000000.0;
          if ((~*(_QWORD *)&a3._time & 0x7FF0000000000000) == 0)
            goto LABEL_438;
          if (a3._time <= -9.22337204e18)
            goto LABEL_441;
          if (a3._time >= 9.22337204e18)
            goto LABEL_444;
          v5 = (uint64_t)a3._time + 1;
          if (!__OFADD__((uint64_t)a3._time, 1))
            goto LABEL_408;
          __break(1u);
          break;
        case 4:
LABEL_230:
          LOBYTE(__src[0]) = 3;
          LOBYTE(__dst[0]) = 12;
          fora[0] = *(Foundation::Date *)&v9;
          *(Swift::Int_optional *)&of = _CalendarGregorian._ordinality(of:in:for:)((Foundation::Calendar::Component)__src, (Foundation::Calendar::Component)__dst, a3);
          if (v158)
            goto LABEL_424;
          if ((v159 & 1) != 0)
            goto LABEL_364;
          v160 = of;
          LOBYTE(__dst[0]) = 12;
          *(double *)__src = v9;
          _CalendarGregorian.start(of:at:)((Foundation::Calendar::Component)__dst, v157);
          if ((LOBYTE(fora[1]._time) & 1) != 0)
            goto LABEL_364;
          LOBYTE(__src[0]) = 4;
          v161 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)__src, fora[0]);
          v162 = v160 - 1;
          if (__OFSUB__(v160, 1))
            goto LABEL_538;
          v163 = (unsigned __int128)(v162 * (__int128)24) >> 64;
          v164 = 24 * v162;
          if (v163 != v164 >> 63)
            goto LABEL_539;
          v57 = __OFADD__(v164, v161);
          v165 = v164 + v161;
          if (v57)
            goto LABEL_540;
          v5 = v165 + 1;
          if (!__OFADD__(v165, 1))
            goto LABEL_408;
          __break(1u);
LABEL_239:
          LOBYTE(__src[0]) = 4;
          LOBYTE(__dst[0]) = 12;
          fora[0] = *(Foundation::Date *)&v9;
          *(Swift::Int_optional *)&of = _CalendarGregorian._ordinality(of:in:for:)((Foundation::Calendar::Component)__src, (Foundation::Calendar::Component)__dst, a3);
          if (v167)
            goto LABEL_424;
          if ((v168 & 1) != 0)
            goto LABEL_364;
          v169 = of;
          LOBYTE(__dst[0]) = 12;
          *(double *)__src = v9;
          _CalendarGregorian.start(of:at:)((Foundation::Calendar::Component)__dst, v166);
          if ((LOBYTE(fora[1]._time) & 1) != 0)
            goto LABEL_364;
          LOBYTE(__src[0]) = 5;
          v170 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)__src, fora[0]);
          v171 = v169 - 1;
          if (__OFSUB__(v169, 1))
            goto LABEL_541;
          v172 = 60 * v171;
          if ((unsigned __int128)(v171 * (__int128)60) >> 64 != (60 * v171) >> 63)
            goto LABEL_542;
          v173 = v172 + v170;
          if (__OFADD__(v172, v170))
            goto LABEL_543;
          v5 = v173 + 1;
          if (!__OFADD__(v173, 1))
            goto LABEL_408;
          __break(1u);
LABEL_248:
          LOBYTE(__src[0]) = 5;
          LOBYTE(__dst[0]) = 12;
          fora[0] = *(Foundation::Date *)&v9;
          *(Swift::Int_optional *)&of = _CalendarGregorian._ordinality(of:in:for:)((Foundation::Calendar::Component)__src, (Foundation::Calendar::Component)__dst, a3);
          if (v175)
            goto LABEL_424;
          if ((v176 & 1) != 0)
            goto LABEL_364;
          v177 = of;
          LOBYTE(__dst[0]) = 12;
          *(double *)__src = v9;
          _CalendarGregorian.start(of:at:)((Foundation::Calendar::Component)__dst, v174);
          if ((LOBYTE(fora[1]._time) & 1) != 0)
            goto LABEL_364;
          LOBYTE(__src[0]) = 6;
          v178 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)__src, fora[0]);
          v179 = v177 - 1;
          if (__OFSUB__(v177, 1))
            goto LABEL_544;
          v180 = 60 * v179;
          if ((unsigned __int128)(v179 * (__int128)60) >> 64 != (60 * v179) >> 63)
            goto LABEL_545;
          v181 = v180 + v178;
          if (__OFADD__(v180, v178))
            goto LABEL_546;
          v5 = v181 + 1;
          if (!__OFADD__(v181, 1))
            goto LABEL_408;
          __break(1u);
LABEL_257:
          v132 = 11;
          goto LABEL_403;
        case 5:
          goto LABEL_239;
        case 6:
          goto LABEL_248;
        case 7:
        case 8:
          goto LABEL_149;
        case 11:
          goto LABEL_257;
        case 13:
          LOBYTE(__src[0]) = 6;
          LOBYTE(__dst[0]) = 12;
          fora[0] = *(Foundation::Date *)&v9;
          *(Swift::Int_optional *)&of = _CalendarGregorian._ordinality(of:in:for:)((Foundation::Calendar::Component)__src, (Foundation::Calendar::Component)__dst, a3);
          if (v182)
            goto LABEL_424;
          v5 = of;
          if ((v183 & 1) != 0)
            goto LABEL_392;
          a3._time = (v9 - floor(v9) + (double)of + -1.0) * 1000000000.0;
          if ((~*(_QWORD *)&a3._time & 0x7FF0000000000000) == 0)
            goto LABEL_508;
          if (a3._time <= -9.22337204e18)
            goto LABEL_509;
          if (a3._time >= 9.22337204e18)
            goto LABEL_510;
          v5 = (uint64_t)a3._time + 1;
          if (!__OFADD__((uint64_t)a3._time, 1))
            goto LABEL_408;
          __break(1u);
LABEL_266:
          v132 = 2;
          goto LABEL_403;
        default:
          goto LABEL_424;
      }
      goto LABEL_93;
    default:
      goto LABEL_424;
  }
}

Swift::Int __swiftcall _CalendarGregorian.dayOfYear(fromYear:month:day:)(Swift::Int fromYear, Swift::Int month, Swift::Int day)
{
  uint64_t v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t i;
  Swift::Int result;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;

  v7 = specialized static _CalendarGregorian.julianDay(ofDay:month:year:useJulianReference:)(day, month, fromYear, 0);
  v8 = *(_QWORD *)(v3 + 56);
  if (v8 <= fromYear)
  {
    if ((fromYear & 3) != 0)
    {
      result = (Swift::Int)&outlined read-only object #0 of _CalendarGregorian.dayOfYear(fromYear:month:day:);
      v11 = month - 1;
      if (__OFSUB__(month, 1))
        goto LABEL_22;
    }
    else
    {
      if (__ROR8__(0x8F5C28F5C28F5C29 * fromYear + 0x51EB851EB851EB8, 2) < 0x28F5C28F5C28F5DuLL)
        goto LABEL_23;
      result = (Swift::Int)&outlined read-only object #1 of _CalendarGregorian.dayOfYear(fromYear:month:day:);
      v11 = month - 1;
      if (__OFSUB__(month, 1))
        goto LABEL_22;
    }
  }
  else
  {
    for (i = 4; ; i = 400)
    {
      result = (Swift::Int)(fromYear % i
                          ? &outlined read-only object #0 of _CalendarGregorian.dayOfYear(fromYear:month:day:)
                          : &outlined read-only object #1 of _CalendarGregorian.dayOfYear(fromYear:month:day:));
      v11 = month - 1;
      if (!__OFSUB__(month, 1))
        break;
LABEL_22:
      __break(1u);
LABEL_23:
      ;
    }
  }
  if ((v11 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  if (v11 >= *(_QWORD *)(result + 16))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v12 = *(_QWORD *)(v3 + 48);
  v13 = *(_QWORD *)(result + 8 * v11 + 32);
  swift_bridgeObjectRelease();
  result = v13 + day;
  if (__OFADD__(v13, day))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v7 >= v12 && v8 == fromYear)
  {
    v14 = fromYear - 1;
    if (!__OFSUB__(fromYear, 1))
    {
      v15 = ((unsigned __int128)(v14 * (__int128)0x5C28F5C28F5C28F5) >> 64) - v14;
      v16 = v14 / 400 + (v15 >> 6) + ((unint64_t)v15 >> 63) + 2;
      v17 = __OFADD__(result, v16);
      result += v16;
      if (!v17)
        return result;
LABEL_28:
      __break(1u);
      return result;
    }
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  return result;
}

double *_CalendarGregorian.timeZoneTransitionInterval(at:timeZone:)@<X0>(double *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v4;
  uint64_t v5;
  uint64_t ObjectType;
  double v7;
  double v8;
  uint64_t (*v9)(double *, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  char v14;

  v4 = *result;
  if (*result < -3187299600.0
    || (v5 = *(_QWORD *)(a2 + 8),
        ObjectType = swift_getObjectType(),
        v12 = v4 + -172800.0,
        result = (double *)(*(_QWORD *(**)(double *__return_ptr, double *, uint64_t, uint64_t))(v5 + 80))(&v13, &v12, ObjectType, v5), (v14 & 1) != 0)|| (v7 = v13, v8 = v13, v4 + -172800.0 + 345600000.0 <= v13)|| v4 < v13)
  {
LABEL_9:
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
    return result;
  }
  v13 = v13 + -1.0;
  v9 = *(uint64_t (**)(double *, uint64_t, uint64_t))(v5 + 40);
  v10 = v9(&v13, ObjectType, v5);
  v13 = v8 + 1.0;
  result = (double *)v9(&v13, ObjectType, v5);
  v11 = v10 - (_QWORD)result;
  if (!__OFSUB__(v10, result))
  {
    if (v11 >= 1 && v4 < v8 + (double)v11)
    {
      *(double *)a3 = v7;
      *(double *)(a3 + 8) = (double)v11;
      *(_BYTE *)(a3 + 16) = 0;
      return result;
    }
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

Swift::Double __swiftcall _CalendarGregorian.timeInDay(for:)(Foundation::Date a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  Swift::Double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[112];
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;

  v3 = *v1;
  v15 = 112;
  v14 = v3;
  v13 = *(_OWORD *)(v2 + 96);
  swift_unknownObjectRetain();
  _CalendarGregorian.dateComponents(_:from:in:)(&v15, (double *)&v14, (uint64_t *)&v13, v16);
  swift_unknownObjectRelease();
  if ((v18 & 1) != 0 || (v20 & 1) != 0 || (v22 & 1) != 0)
    goto LABEL_13;
  v5 = v17;
  v6 = v19;
  v7 = v21;
  outlined release of DateComponents((uint64_t)v16);
  v8 = 3600 * v5;
  if ((unsigned __int128)(v5 * (__int128)3600) >> 64 != (3600 * v5) >> 63)
  {
    __break(1u);
    goto LABEL_10;
  }
  v9 = 60 * v6;
  if ((unsigned __int128)(v6 * (__int128)60) >> 64 != (60 * v6) >> 63)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v10 = __OFADD__(v8, v9);
  v11 = v8 + v9;
  if (!v10)
  {
    v10 = __OFADD__(v11, v7);
    v12 = v11 + v7;
    if (!v10)
      return (double)v12;
    goto LABEL_12;
  }
LABEL_11:
  __break(1u);
LABEL_12:
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

Swift::Double __swiftcall _CalendarGregorian.timeInDay(inSmallComponent:for:)(Foundation::Calendar::Component inSmallComponent, Foundation::Date a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  Swift::Double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[128];
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;

  v4 = *(unsigned __int8 *)inSmallComponent;
  v5 = *v2;
  v12 = 8288;
  v11 = v5;
  v10 = *(_OWORD *)(v3 + 96);
  swift_unknownObjectRetain();
  _CalendarGregorian.dateComponents(_:from:in:)(&v12, (double *)&v11, (uint64_t *)&v10, v13);
  swift_unknownObjectRelease();
  if ((v15 & 1) != 0 || (v17 & 1) != 0 || (v19 & 1) != 0)
    goto LABEL_11;
  v7 = v14;
  v8 = v16;
  v9 = v18;
  outlined release of DateComponents((uint64_t)v13);
  result = 0.0;
  if (v4 != 13)
  {
    result = (double)v9 / 1000000000.0 + 0.0;
    if (v4 != 6)
    {
      result = result + (double)v8;
      if (v4 != 5)
      {
        if ((unsigned __int128)(v7 * (__int128)60) >> 64 == (60 * v7) >> 63)
          return result + (double)(60 * v7);
        __break(1u);
LABEL_11:
        __break(1u);
      }
    }
  }
  return result;
}

Swift::Bool __swiftcall _CalendarGregorian.isDateInWeekend(_:)(Foundation::Date a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t ObjectType;
  void (*v7)(_BYTE *__return_ptr, uint64_t, uint64_t);
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  _BYTE weekendRange[56];
  char v14;

  v3 = *v1;
  v4 = xmmword_1820609A0;
  if (*(_QWORD *)(v2 + 80))
  {
    v5 = *(_QWORD *)(v2 + 88);
    ObjectType = swift_getObjectType();
    v7 = *(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(v5 + 336);
    swift_unknownObjectRetain();
    v7(&weekendRange[8], ObjectType, v5);
    swift_unknownObjectRelease();
    if ((v14 & 1) != 0)
    {
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0x40F5180000000000;
      v4 = xmmword_1820609A0;
    }
    else
    {
      v8 = *(_QWORD *)&weekendRange[8];
      v11 = *(_QWORD *)&weekendRange[24];
      v4 = *(_OWORD *)&weekendRange[40];
      v9 = weekendRange[16] & 1;
      v10 = weekendRange[32] & 1;
    }
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0x40F5180000000000;
  }
  *(_QWORD *)weekendRange = v3;
  *(_QWORD *)&weekendRange[8] = v8;
  weekendRange[16] = v9;
  *(_QWORD *)&weekendRange[24] = v11;
  weekendRange[32] = v10;
  *(_OWORD *)&weekendRange[40] = v4;
  return _CalendarGregorian.isDateInWeekend(_:weekendRange:)((Foundation::Date)v4, (Foundation::WeekendRange *)weekendRange);
}

Swift::Bool __swiftcall _CalendarGregorian.isDateInWeekend(_:weekendRange:)(Foundation::Date _, Foundation::WeekendRange *weekendRange)
{
  uint64_t v2;
  uint64_t v3;
  Swift::Double value;
  double v5;
  char v6;
  double v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Bool result;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Double v29;
  _OWORD __dst[18];
  uint64_t __src[37];
  uint64_t v32;
  _BYTE v33[176];
  uint64_t v34;
  char v35;

  value = weekendRange->onsetTime.value;
  v5 = *(double *)v2;
  v6 = *(_BYTE *)(v2 + 8);
  v7 = *(double *)(v2 + 16);
  v8 = *(_BYTE *)(v2 + 24);
  v10 = *(_QWORD *)(v2 + 32);
  v9 = *(_QWORD *)(v2 + 40);
  *(_QWORD *)&__dst[0] = 128;
  v32 = *(_QWORD *)&value;
  *(_OWORD *)__src = *(_OWORD *)(v3 + 96);
  swift_unknownObjectRetain();
  _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)__dst, (double *)&v32, __src, v33);
  swift_unknownObjectRelease();
  result = outlined release of DateComponents((uint64_t)v33);
  if ((v35 & 1) != 0)
    goto LABEL_47;
  if (v10 == v9 && v34 != v10)
    return 0;
  if (v10 >= v9 || (result = 0, v34 >= v10) && v9 >= v34)
  {
    if (v9 < v10 && v9 < v34 && v34 < v10)
      return 0;
    if (v34 == v10)
    {
      if (v5 == 0.0)
        v12 = 1;
      else
        v12 = v6;
      if ((v12 & 1) != 0)
        return 1;
      v32 = 112;
      v29 = value;
      __dst[0] = *(_OWORD *)(v3 + 96);
      swift_unknownObjectRetain();
      _CalendarGregorian.dateComponents(_:from:in:)(&v32, &v29, (uint64_t *)__dst, __src);
      swift_unknownObjectRelease();
      result = memcpy(__dst, __src, 0x11AuLL);
      if ((BYTE8(__dst[7]) & 1) != 0 || (BYTE8(__dst[8]) & 1) != 0 || (BYTE8(__dst[9]) & 1) != 0)
        goto LABEL_48;
      v22 = *(_QWORD *)&__dst[7];
      v23 = *(_QWORD *)&__dst[8];
      v24 = *(_QWORD *)&__dst[9];
      result = outlined release of DateComponents((uint64_t)__dst);
      v25 = 3600 * v22;
      if ((unsigned __int128)(v22 * (__int128)3600) >> 64 == (3600 * v22) >> 63)
      {
        v26 = 60 * v23;
        if ((unsigned __int128)(v23 * (__int128)60) >> 64 == (60 * v23) >> 63)
        {
          v19 = __OFADD__(v25, v26);
          v27 = v25 + v26;
          if (!v19)
          {
            v19 = __OFADD__(v27, v24);
            v28 = v27 + v24;
            if (!v19)
              return v5 <= (double)v28;
            goto LABEL_46;
          }
          goto LABEL_44;
        }
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
        return result;
      }
      goto LABEL_40;
    }
    if (v34 == v9)
      v13 = v8;
    else
      v13 = 1;
    result = 1;
    if ((v13 & 1) == 0 && v7 < 86400.0)
    {
      v32 = 112;
      v29 = value;
      __dst[0] = *(_OWORD *)(v3 + 96);
      swift_unknownObjectRetain();
      _CalendarGregorian.dateComponents(_:from:in:)(&v32, &v29, (uint64_t *)__dst, __src);
      swift_unknownObjectRelease();
      result = memcpy(__dst, __src, 0x11AuLL);
      if ((BYTE8(__dst[7]) & 1) != 0 || (BYTE8(__dst[8]) & 1) != 0 || (BYTE8(__dst[9]) & 1) != 0)
        goto LABEL_49;
      v14 = *(_QWORD *)&__dst[7];
      v15 = *(_QWORD *)&__dst[8];
      v16 = *(_QWORD *)&__dst[9];
      result = outlined release of DateComponents((uint64_t)__dst);
      v17 = 3600 * v14;
      if ((unsigned __int128)(v14 * (__int128)3600) >> 64 == (3600 * v14) >> 63)
      {
        v18 = 60 * v15;
        if ((unsigned __int128)(v15 * (__int128)60) >> 64 == (60 * v15) >> 63)
        {
          v19 = __OFADD__(v17, v18);
          v20 = v17 + v18;
          if (!v19)
          {
            v19 = __OFADD__(v20, v16);
            v21 = v20 + v16;
            if (!v19)
              return v7 > (double)v21;
            goto LABEL_45;
          }
          goto LABEL_42;
        }
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
  }
  return result;
}

double _CalendarGregorian.date(from:inTimeZone:dstRepeatedTimePolicy:dstSkippedTimePolicy:)@<D0>(void *__src@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  char v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t ObjectType;
  uint64_t v22;
  double v23;
  double result;
  char v25;
  char v26;
  double v27;
  _OWORD __srca[18];
  __int128 v29[3];
  _QWORD __dst[36];

  memcpy(__dst, __src, 0x11AuLL);
  v9 = *(_QWORD *)(a2 + 8);
  v10 = *a3;
  memcpy(__srca, __src, 0x11AuLL);
  outlined retain of DateComponents((uint64_t)__dst);
  specialized ResolvedDateComponents.init(dateComponents:)(__srca, (uint64_t)v29);
  outlined init with take of ResolvedDateComponents(v29, __srca);
  v11 = BYTE8(__srca[2]) & 0xE0;
  BYTE8(__srca[2]) &= 0x1Fu;
  if (v11 == 96)
  {
    v12 = *(_QWORD *)&__srca[0];
    v13 = *(_QWORD *)(v4 + 56);
    _CalendarGregorian.julianDay(usingJulianReference:resolvedComponents:)(*(_QWORD *)&__srca[0] == v13, v29);
    if (v12 == v13)
      goto LABEL_7;
  }
  else
  {
    _CalendarGregorian.julianDay(usingJulianReference:resolvedComponents:)(0, v29);
  }
  if (v14 < *(_QWORD *)(v4 + 48))
    _CalendarGregorian.julianDay(usingJulianReference:resolvedComponents:)(1, v29);
LABEL_7:
  v15 = (double)__dst[14] * 3600.0 + 0.0;
  if (LOBYTE(__dst[15]))
    v15 = 0.0;
  v16 = (double)__dst[16] * 60.0;
  if (LOBYTE(__dst[17]))
    v16 = -0.0;
  v17 = v15 + v16;
  v18 = (double)__dst[18];
  if (LOBYTE(__dst[19]))
    v18 = -0.0;
  v19 = v17 + v18;
  if ((__dst[21] & 1) == 0)
    v19 = v19 + (double)__dst[20] / 1000000000.0;
  v20 = ((double)v14 + -2451910.5) * 86400.0 + -43200.0 + v19;
  ObjectType = swift_getObjectType();
  v27 = v20;
  v26 = v10;
  v25 = 0;
  v22 = (*(uint64_t (**)(double *, char *, char *, uint64_t, uint64_t))(v9 + 48))(&v27, &v26, &v25, ObjectType, v9);
  result = v20 - (double)v22 - v23;
  *(double *)a4 = result;
  *(_BYTE *)(a4 + 8) = 0;
  return result;
}

Swift::Int __swiftcall _CalendarGregorian.relativeWeekday(fromJulianDay:)(Swift::Int fromJulianDay)
{
  uint64_t v1;
  void *v2;
  Swift::Int v3;
  uint64_t ObjectType;
  void (*v5)(uint64_t *__return_ptr, uint64_t, uint64_t);
  char v6;
  char v7;
  Swift::Int result;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;

  v3 = fromJulianDay + 1;
  if (__OFADD__(fromJulianDay, 1))
  {
    __break(1u);
    goto LABEL_14;
  }
  if (*((_BYTE *)v2 + 120) != 1)
    goto LABEL_9;
  if (!*((_QWORD *)v2 + 10))
  {
    v9 = 1;
    goto LABEL_11;
  }
  v1 = *((_QWORD *)v2 + 11);
  ObjectType = swift_getObjectType();
  v5 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v1 + 328);
  swift_unknownObjectRetain();
  v5(&v13, ObjectType, v1);
  LOBYTE(v1) = v13;
  if (one-time initialization token for weekdays != -1)
    goto LABEL_15;
  while (1)
  {
    v2 = static Locale.Weekday.weekdays;
    swift_bridgeObjectRetain();
    v1 = specialized Collection<>.firstIndex(of:)(v1, (uint64_t)v2);
    v7 = v6;
    result = swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      break;
    swift_unknownObjectRelease();
    v9 = v1 + 1;
    if (__OFADD__(v1, 1))
    {
      __break(1u);
LABEL_9:
      v9 = *((_QWORD *)v2 + 14);
    }
LABEL_11:
    v10 = v3 % 7 + 8;
    v11 = __OFSUB__(v10, v9);
    v12 = v10 - v9;
    if (!v11)
      return v12 % 7;
LABEL_14:
    __break(1u);
LABEL_15:
    swift_once();
  }
  __break(1u);
  return result;
}

Swift::Int __swiftcall _CalendarGregorian.wrapAroundRelativeWeekday(_:)(Swift::Int a1)
{
  void *v1;
  uint64_t v2;
  uint64_t ObjectType;
  void (*v5)(uint64_t *__return_ptr, uint64_t, uint64_t);
  char v6;
  char v7;
  Swift::Int result;
  uint64_t v9;
  BOOL v10;
  Swift::Int v11;
  Swift::Int v12;
  uint64_t v13;

  if (*((_BYTE *)v1 + 120) != 1)
    goto LABEL_8;
  if (*((_QWORD *)v1 + 10))
  {
    v2 = *((_QWORD *)v1 + 11);
    ObjectType = swift_getObjectType();
    v5 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v2 + 328);
    swift_unknownObjectRetain();
    v5(&v13, ObjectType, v2);
    LOBYTE(v2) = v13;
    if (one-time initialization token for weekdays != -1)
      goto LABEL_16;
    while (1)
    {
      v1 = static Locale.Weekday.weekdays;
      swift_bridgeObjectRetain();
      v2 = specialized Collection<>.firstIndex(of:)(v2, (uint64_t)v1);
      v7 = v6;
      result = swift_bridgeObjectRelease();
      if ((v7 & 1) != 0)
        break;
      swift_unknownObjectRelease();
      v9 = v2 + 1;
      if (__OFADD__(v2, 1))
      {
        __break(1u);
LABEL_8:
        v9 = *((_QWORD *)v1 + 14);
      }
      v10 = __OFSUB__(a1, v9);
      v11 = a1 - v9;
      if (!v10)
        goto LABEL_10;
LABEL_15:
      __break(1u);
LABEL_16:
      swift_once();
    }
    __break(1u);
  }
  else
  {
    v11 = a1 - 1;
    if (__OFSUB__(a1, 1))
      goto LABEL_15;
LABEL_10:
    v12 = v11 % 7;
    if (v12 >= 0)
      return v12;
    else
      return v12 + 7;
  }
  return result;
}

void _CalendarGregorian.julianDay(usingJulianReference:resolvedComponents:)(uint64_t a1, __int128 *a2)
{
  __int128 v2;

  outlined init with take of ResolvedDateComponents(a2, &v2);
  __asm { BR              X11 }
}

void sub_181D6C6E4(char a1@<W8>, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, Swift::Int a7, char a8, int a9, __int16 a10, char a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  char v30;
  __int128 *v31;
  uint64_t v32;
  BOOL v33;
  Swift::Int v34;
  __int128 v35;
  uint64_t v37;
  uint64_t v38;
  char v39;

  v39 = a1 & 0x1F;
  v32 = specialized static _CalendarGregorian.julianDay(ofDay:month:year:useJulianReference:)(0, v38, v37, v30 & 1);
  v33 = __OFADD__(v32, 1);
  v34 = v32 + 1;
  if (!v33)
  {
    _CalendarGregorian.relativeWeekday(fromJulianDay:)(v34);
    outlined init with take of ResolvedDateComponents(v31, &v35);
    __asm { BR              X11 }
  }
  __break(1u);
  JUMPOUT(0x181D6CA1CLL);
}

Swift::Int __swiftcall _CalendarGregorian.weekNumber(desiredDay:dayOfPeriod:weekday:)(Swift::Int desiredDay, Swift::Int dayOfPeriod, Swift::Int weekday)
{
  uint64_t v3;
  Swift::Int result;
  Swift::Int v8;
  BOOL v9;
  Swift::Int v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  Swift::Int v15;
  Swift::Int v16;
  uint64_t v17;
  uint64_t ObjectType;
  uint64_t (*v19)(uint64_t, uint64_t);
  uint64_t v20;

  result = _CalendarGregorian.firstWeekday.getter();
  v8 = weekday - result;
  if (__OFSUB__(weekday, result))
  {
    __break(1u);
    goto LABEL_17;
  }
  v9 = __OFSUB__(v8, dayOfPeriod);
  v10 = v8 - dayOfPeriod;
  if (v9)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v9 = __OFADD__(v10, 1);
  v11 = v10 + 1;
  if (v9)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v12 = v11 % 7;
  if (v12 >= 0)
    v13 = v12;
  else
    v13 = v12 + 7;
  v14 = desiredDay + v13;
  if (__OFADD__(desiredDay, v13))
    goto LABEL_19;
  v9 = __OFSUB__(v14, 1);
  v15 = v14 - 1;
  if (!v9)
  {
    v16 = v15 / 7;
    if (*(_BYTE *)(v3 + 136) == 1)
    {
      if (!*(_QWORD *)(v3 + 80))
        return ++v16;
      v17 = *(_QWORD *)(v3 + 88);
      ObjectType = swift_getObjectType();
      v19 = *(uint64_t (**)(uint64_t, uint64_t))(v17 + 344);
      swift_unknownObjectRetain();
      v20 = v19(ObjectType, v17);
      swift_unknownObjectRelease();
    }
    else
    {
      v20 = *(_QWORD *)(v3 + 128);
    }
    if (7 - v13 < v20)
      return v16;
    return ++v16;
  }
LABEL_20:
  __break(1u);
  return result;
}

Swift::Int __swiftcall _CalendarGregorian.relativeWeekdayForLastDayOfPeriod(periodLength:referenceDayOfPeriod:referenceDayWeekday:)(Swift::Int periodLength, Swift::Int referenceDayOfPeriod, Swift::Int referenceDayWeekday)
{
  uint64_t v3;
  void *v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t ObjectType;
  void (*v8)(uint64_t *__return_ptr, uint64_t, uint64_t);
  char v9;
  char v10;
  Swift::Int result;
  uint64_t v12;
  BOOL v13;
  Swift::Int v14;
  uint64_t v15;

  v6 = periodLength - referenceDayOfPeriod;
  if (__OFSUB__(periodLength, referenceDayOfPeriod))
    goto LABEL_16;
  v5 = v6 + referenceDayWeekday;
  if (__OFADD__(v6, referenceDayWeekday))
    goto LABEL_17;
  if (*((_BYTE *)v4 + 120) != 1)
    goto LABEL_10;
  if (*((_QWORD *)v4 + 10))
  {
    v3 = *((_QWORD *)v4 + 11);
    ObjectType = swift_getObjectType();
    v8 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v3 + 328);
    swift_unknownObjectRetain();
    v8(&v15, ObjectType, v3);
    LOBYTE(v3) = v15;
    if (one-time initialization token for weekdays != -1)
      goto LABEL_18;
    while (1)
    {
      v4 = static Locale.Weekday.weekdays;
      swift_bridgeObjectRetain();
      v3 = specialized Collection<>.firstIndex(of:)(v3, (uint64_t)v4);
      v10 = v9;
      result = swift_bridgeObjectRelease();
      if ((v10 & 1) != 0)
        break;
      swift_unknownObjectRelease();
      v12 = v3 + 1;
      if (__OFADD__(v3, 1))
      {
        __break(1u);
LABEL_10:
        v12 = *((_QWORD *)v4 + 14);
      }
      v13 = __OFSUB__(v5, v12);
      v14 = v5 - v12;
      if (!v13)
        return v14 % 7;
LABEL_15:
      __break(1u);
LABEL_16:
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      swift_once();
    }
    __break(1u);
  }
  else
  {
    v14 = v5 - 1;
    if (__OFSUB__(v5, 1))
      goto LABEL_15;
    return v14 % 7;
  }
  return result;
}

uint64_t _CalendarGregorian.dayOfMonthConsideringGregorianCutover(_:inTimeZone:)(double *a1, double *a2, __int128 *a3)
{
  uint64_t v3;
  double v5;
  uint64_t result;
  Swift::Int v7;
  uint64_t v8;
  Swift::Int v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  __int128 v15;
  double v16;
  uint64_t v17;
  _BYTE v18[48];
  Swift::Int year;
  char v20;
  Swift::Int _;
  char v22;
  uint64_t v23;
  char v24;

  v5 = *a2;
  v17 = 14;
  v16 = v5;
  v15 = *a3;
  result = (uint64_t)_CalendarGregorian.dateComponents(_:from:in:)(&v17, &v16, (uint64_t *)&v15, v18);
  if ((v20 & 1) != 0 || (v22 & 1) != 0 || (v24 & 1) != 0)
    goto LABEL_21;
  v7 = year;
  v8 = v23;
  v9 = _CalendarGregorian.numberOfDaysInMonth(_:year:)(_, year);
  result = outlined release of DateComponents((uint64_t)v18);
  if (v7 == *(_QWORD *)(v3 + 56))
  {
    v10 = *(double *)(v3 + 64);
    v11 = v8;
    if (v5 >= v10)
    {
      v11 = v8 - 10;
      if (__OFSUB__(v8, 10))
        goto LABEL_20;
    }
    v12 = v11 - 1;
    if (__OFSUB__(v11, 1))
    {
      __break(1u);
    }
    else if ((unsigned __int128)(v12 * (__int128)86400) >> 64 == (86400 * v12) >> 63)
    {
      v13 = v5 - (double)(86400 * v12);
      *a1 = v13;
      if (v13 < v10 && v13 + (double)(86400 * (v9 - 10)) >= v10)
        return v11;
      return v8;
    }
    __break(1u);
  }
  else
  {
    v14 = v8 - 1;
    if (!__OFSUB__(v8, 1))
    {
      if ((unsigned __int128)(v14 * (__int128)86400) >> 64 == (86400 * v14) >> 63)
      {
        *a1 = v5 - (double)(86400 * v14);
        return v8;
      }
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
  return result;
}

uint64_t _CalendarGregorian.addAndWrap(_:to:amount:inTimeZone:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  if (a3)
    __asm { BR              X10 }
  *a4 = *a2;
  return result;
}

uint64_t _CalendarGregorian.date(byAddingAndWrapping:to:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  int v37;
  uint64_t v39;
  char v40;
  _QWORD v41[2];

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(unsigned __int8 *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_BYTE *)(a1 + 56);
  v29 = *(_BYTE *)(a1 + 72);
  v31 = *(_BYTE *)(a1 + 88);
  v32 = *(_BYTE *)(a1 + 104);
  v34 = *(_BYTE *)(a1 + 120);
  v35 = *(_BYTE *)(a1 + 136);
  v36 = *(_BYTE *)(a1 + 152);
  v37 = *(unsigned __int8 *)(a1 + 168);
  v33 = *(_BYTE *)(a1 + 184);
  v30 = *(_BYTE *)(a1 + 200);
  v7 = *a2;
  v8 = *(_BYTE *)(a1 + 280);
  v9 = *(_BYTE *)(a1 + 248);
  v27 = *(_BYTE *)(a1 + 216);
  v28 = *(_BYTE *)(a1 + 264);
  v25 = *(_QWORD *)(a1 + 144);
  v26 = *(_QWORD *)(a1 + 160);
  v23 = *(_QWORD *)(a1 + 112);
  v24 = *(_QWORD *)(a1 + 128);
  v21 = *(_QWORD *)(a1 + 96);
  v22 = *(_QWORD *)(a1 + 176);
  v19 = *(_QWORD *)(a1 + 192);
  v20 = *(_QWORD *)(a1 + 80);
  v17 = *(_QWORD *)(a1 + 64);
  v18 = *(_QWORD *)(a1 + 240);
  v12 = *(_QWORD *)(a1 + 224);
  v13 = *(_QWORD *)(a1 + 272);
  v16 = *(_QWORD *)(a1 + 256);
  v15 = *(_BYTE *)(a1 + 232);
  v14 = *(_QWORD *)(a1 + 208);
  if (*(_QWORD *)(a1 + 16))
  {
    if (*(_BYTE *)(a1 + 40))
      goto LABEL_3;
LABEL_6:
    v40 = 0;
    v39 = v7;
    swift_unknownObjectRetain();
    _CalendarGregorian.addAndWrap(_:to:amount:inTimeZone:)((uint64_t)&v40, &v39, v3, v41);
    v7 = v41[0];
    if ((v6 & 1) != 0)
      goto LABEL_8;
    goto LABEL_7;
  }
  swift_unknownObjectRetain();
  if (!v4)
    goto LABEL_6;
LABEL_3:
  swift_unknownObjectRetain();
  if ((v6 & 1) == 0)
  {
LABEL_7:
    v40 = 1;
    v39 = v7;
    _CalendarGregorian.addAndWrap(_:to:amount:inTimeZone:)((uint64_t)&v40, &v39, v5, v41);
    v7 = v41[0];
  }
LABEL_8:
  if ((v8 & 1) != 0)
  {
    if ((v27 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    v40 = 12;
    v39 = v7;
    _CalendarGregorian.addAndWrap(_:to:amount:inTimeZone:)((uint64_t)&v40, &v39, v13, v41);
    v7 = v41[0];
    if ((v27 & 1) != 0)
    {
LABEL_10:
      if ((v29 & 1) != 0)
        goto LABEL_11;
LABEL_25:
      v40 = 2;
      v39 = v7;
      _CalendarGregorian.addAndWrap(_:to:amount:inTimeZone:)((uint64_t)&v40, &v39, v17, v41);
      v7 = v41[0];
      if ((v28 & 1) != 0)
        goto LABEL_12;
LABEL_26:
      v40 = 11;
      v39 = v7;
      v11 = v16;
      goto LABEL_28;
    }
  }
  v40 = 9;
  v39 = v7;
  _CalendarGregorian.addAndWrap(_:to:amount:inTimeZone:)((uint64_t)&v40, &v39, v14, v41);
  v7 = v41[0];
  if ((v29 & 1) == 0)
    goto LABEL_25;
LABEL_11:
  if ((v28 & 1) == 0)
    goto LABEL_26;
LABEL_12:
  if ((v15 & 1) != 0)
  {
    if ((v9 & 1) != 0)
      goto LABEL_14;
    goto LABEL_29;
  }
  v40 = 11;
  v39 = v7;
  v11 = v12;
LABEL_28:
  _CalendarGregorian.addAndWrap(_:to:amount:inTimeZone:)((uint64_t)&v40, &v39, v11, v41);
  v7 = v41[0];
  if ((v9 & 1) != 0)
  {
LABEL_14:
    if ((v30 & 1) != 0)
      goto LABEL_15;
    goto LABEL_30;
  }
LABEL_29:
  v40 = 10;
  v39 = v7;
  _CalendarGregorian.addAndWrap(_:to:amount:inTimeZone:)((uint64_t)&v40, &v39, v18, v41);
  v7 = v41[0];
  if ((v30 & 1) != 0)
  {
LABEL_15:
    if ((v31 & 1) != 0)
      goto LABEL_16;
    goto LABEL_31;
  }
LABEL_30:
  v40 = 8;
  v39 = v7;
  _CalendarGregorian.addAndWrap(_:to:amount:inTimeZone:)((uint64_t)&v40, &v39, v19, v41);
  v7 = v41[0];
  if ((v31 & 1) != 0)
  {
LABEL_16:
    if ((v32 & 1) != 0)
      goto LABEL_17;
    goto LABEL_32;
  }
LABEL_31:
  v40 = 3;
  v39 = v7;
  _CalendarGregorian.addAndWrap(_:to:amount:inTimeZone:)((uint64_t)&v40, &v39, v20, v41);
  v7 = v41[0];
  if ((v32 & 1) != 0)
  {
LABEL_17:
    if ((v33 & 1) != 0)
      goto LABEL_18;
    goto LABEL_33;
  }
LABEL_32:
  v40 = 17;
  v39 = v7;
  _CalendarGregorian.addAndWrap(_:to:amount:inTimeZone:)((uint64_t)&v40, &v39, v21, v41);
  v7 = v41[0];
  if ((v33 & 1) != 0)
  {
LABEL_18:
    if ((v34 & 1) != 0)
      goto LABEL_19;
    goto LABEL_34;
  }
LABEL_33:
  v40 = 7;
  v39 = v7;
  _CalendarGregorian.addAndWrap(_:to:amount:inTimeZone:)((uint64_t)&v40, &v39, v22, v41);
  v7 = v41[0];
  if ((v34 & 1) != 0)
  {
LABEL_19:
    if ((v35 & 1) != 0)
      goto LABEL_20;
    goto LABEL_35;
  }
LABEL_34:
  v40 = 4;
  v39 = v7;
  _CalendarGregorian.addAndWrap(_:to:amount:inTimeZone:)((uint64_t)&v40, &v39, v23, v41);
  v7 = v41[0];
  if ((v35 & 1) != 0)
  {
LABEL_20:
    if ((v36 & 1) != 0)
      goto LABEL_21;
LABEL_36:
    v40 = 6;
    v39 = v7;
    _CalendarGregorian.addAndWrap(_:to:amount:inTimeZone:)((uint64_t)&v40, &v39, v25, v41);
    v7 = v41[0];
    if (v37)
      goto LABEL_22;
LABEL_37:
    v40 = 13;
    v39 = v7;
    _CalendarGregorian.addAndWrap(_:to:amount:inTimeZone:)((uint64_t)&v40, &v39, v26, v41);
    result = swift_unknownObjectRelease();
    v7 = v41[0];
    goto LABEL_38;
  }
LABEL_35:
  v40 = 5;
  v39 = v7;
  _CalendarGregorian.addAndWrap(_:to:amount:inTimeZone:)((uint64_t)&v40, &v39, v24, v41);
  v7 = v41[0];
  if ((v36 & 1) == 0)
    goto LABEL_36;
LABEL_21:
  if (!v37)
    goto LABEL_37;
LABEL_22:
  result = swift_unknownObjectRelease();
LABEL_38:
  *(_QWORD *)a3 = v7;
  *(_BYTE *)(a3 + 8) = 0;
  return result;
}

uint64_t _CalendarGregorian.date(byAddingAndCarryingOverComponents:to:)@<X0>(uint64_t a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  char v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  double v16;
  double v17;
  double v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t ObjectType;
  uint64_t (*v38)(uint64_t *, uint64_t, _QWORD);
  uint64_t v39;
  char v40;
  double v41;
  double v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t *, uint64_t, _QWORD);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  char v69;
  double v70;
  double v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  double v88;
  uint64_t v89;
  uint64_t (*v90)(uint64_t *, uint64_t, _QWORD);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  double v94;
  double v95;
  double v96;
  double v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  double v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  double v113;
  uint64_t v114;
  uint64_t (*v115)(uint64_t *, uint64_t, _QWORD);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  double v119;
  char v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  Foundation::Date v126;
  uint64_t v127;
  uint64_t (*v128)(double *, uint64_t, _QWORD);
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  double v132;
  char v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  Foundation::Date v139;
  uint64_t v140;
  uint64_t (*v141)(double *, uint64_t, _QWORD);
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  double v145;
  char v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  Foundation::Date v152;
  uint64_t v153;
  uint64_t (*v154)(double *, uint64_t, _QWORD);
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  double v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char v165;
  char v166;
  char v167;
  int v168;
  char v170;
  char v171;
  char v172;
  int v173;
  char v174;
  char v175;
  char v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  double v183;
  double v184;
  double v185;
  uint64_t v186;
  double v187;
  char v188;
  _OWORD v189[18];
  double v190[36];
  _OWORD __dst[18];
  double __src[37];

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(unsigned __int8 *)(a1 + 56);
  v164 = *(_QWORD *)(a1 + 64);
  v176 = *(_BYTE *)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 80);
  v7 = *(_QWORD *)(a1 + 96);
  v171 = *(_BYTE *)(a1 + 104);
  v172 = *(_BYTE *)(a1 + 88);
  v159 = *(_QWORD *)(a1 + 112);
  v160 = *(_QWORD *)(a1 + 128);
  v165 = *(_BYTE *)(a1 + 120);
  v166 = *(_BYTE *)(a1 + 136);
  v161 = *(_QWORD *)(a1 + 144);
  v162 = *(_QWORD *)(a1 + 160);
  v167 = *(_BYTE *)(a1 + 152);
  v168 = *(unsigned __int8 *)(a1 + 168);
  v177 = *(_QWORD *)(a1 + 176);
  v170 = *(_BYTE *)(a1 + 184);
  v179 = *(_QWORD *)(a1 + 224);
  v180 = *(_QWORD *)(a1 + 192);
  v173 = *(unsigned __int8 *)(a1 + 232);
  v174 = *(_BYTE *)(a1 + 200);
  v181 = *(_QWORD *)(a1 + 240);
  v175 = *(_BYTE *)(a1 + 248);
  v8 = *(_QWORD *)(a1 + 256);
  v9 = *a2;
  v182 = *(unsigned __int8 *)(a1 + 264);
  v10 = *(_BYTE *)(a1 + 280);
  v163 = *(_QWORD *)(a1 + 272);
  if (*(_QWORD *)(a1 + 16))
  {
    v11 = *(double *)(a1 + 24);
    v12 = *(double *)(a1 + 16);
    if (*(_BYTE *)(a1 + 56))
      goto LABEL_3;
LABEL_6:
    LOBYTE(v189[0]) = 1;
    v190[0] = v9;
    __src[0] = v12;
    __src[1] = v11;
    swift_unknownObjectRetain();
    v13 = v178;
    _CalendarGregorian.add(_:to:amount:inTimeZone:)((unsigned __int8 *)v189, v190, v4, (long double *)__dst);
    v9 = *(double *)__dst;
    if ((v10 & 1) != 0)
      goto LABEL_8;
    goto LABEL_7;
  }
  v11 = *(double *)(v3 + 104);
  v12 = *(double *)(v3 + 96);
  swift_unknownObjectRetain();
  if (!v5)
    goto LABEL_6;
LABEL_3:
  swift_unknownObjectRetain();
  v13 = v178;
  if ((v10 & 1) == 0)
  {
LABEL_7:
    LOBYTE(v189[0]) = 12;
    v190[0] = v9;
    __src[0] = v12;
    __src[1] = v11;
    _CalendarGregorian.add(_:to:amount:inTimeZone:)((unsigned __int8 *)v189, v190, v163, (long double *)__dst);
    v9 = *(double *)__dst;
  }
LABEL_8:
  v14 = v8;
  if ((v176 & 1) == 0)
  {
    LOBYTE(v189[0]) = 2;
    v190[0] = v9;
    __src[0] = v12;
    __src[1] = v11;
    _CalendarGregorian.add(_:to:amount:inTimeZone:)((unsigned __int8 *)v189, v190, v164, (long double *)__dst);
    v9 = *(double *)__dst;
  }
  v15 = v182;
  if (!v8)
    v15 = 1;
  if ((v15 & 1) == 0)
  {
    v16 = fmod(v9, 1.0);
    if (v16 >= 0.0)
      v17 = v9 - v16;
    else
      v17 = v9 - v16 + -1.0;
    if (v16 >= 0.0)
      v18 = v16;
    else
      v18 = v16 + 1.0;
    *(_QWORD *)&v190[0] = 112;
    *(double *)v189 = v9;
    __dst[0] = *(_OWORD *)(v13 + 96);
    swift_unknownObjectRetain();
    _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)v190, (double *)v189, (uint64_t *)__dst, __src);
    swift_unknownObjectRelease();
    result = (uint64_t)memcpy(__dst, __src, 0x11AuLL);
    if ((BYTE8(__dst[7]) & 1) != 0 || (BYTE8(__dst[8]) & 1) != 0 || (BYTE8(__dst[9]) & 1) != 0)
      goto LABEL_260;
    v20 = *(_QWORD *)&__dst[7];
    v21 = *(_QWORD *)&__dst[8];
    v22 = *(_QWORD *)&__dst[9];
    result = outlined release of DateComponents((uint64_t)__dst);
    v23 = 3600 * v20;
    if ((unsigned __int128)(v20 * (__int128)3600) >> 64 == (3600 * v20) >> 63)
    {
      v24 = 60 * v21;
      if ((unsigned __int128)(v21 * (__int128)60) >> 64 == (60 * v21) >> 63)
      {
        v25 = __OFADD__(v23, v24);
        v26 = v23 + v24;
        if (!v25)
        {
          v27 = v26 + v22;
          if (!__OFADD__(v26, v22))
          {
            v28 = (double)v14 * 604800.0 + v17;
            v186 = 112;
            v183 = v28;
            v189[0] = *(_OWORD *)(v13 + 96);
            swift_unknownObjectRetain();
            _CalendarGregorian.dateComponents(_:from:in:)(&v186, &v183, (uint64_t *)v189, v190);
            swift_unknownObjectRelease();
            result = (uint64_t)memcpy(v189, v190, 0x11AuLL);
            if ((BYTE8(v189[7]) & 1) != 0 || (BYTE8(v189[8]) & 1) != 0 || (BYTE8(v189[9]) & 1) != 0)
              goto LABEL_261;
            v29 = *(_QWORD *)&v189[7];
            v30 = *(_QWORD *)&v189[8];
            v31 = *(_QWORD *)&v189[9];
            result = outlined release of DateComponents((uint64_t)v189);
            v32 = 3600 * v29;
            if ((unsigned __int128)(v29 * (__int128)3600) >> 64 == (3600 * v29) >> 63)
            {
              v33 = 60 * v30;
              if ((unsigned __int128)(v30 * (__int128)60) >> 64 == (60 * v30) >> 63)
              {
                v25 = __OFADD__(v32, v33);
                v34 = v32 + v33;
                if (v25)
                {
LABEL_229:
                  __break(1u);
                  goto LABEL_230;
                }
                v25 = __OFADD__(v34, v31);
                v35 = v34 + v31;
                if (v25)
                {
LABEL_231:
                  __break(1u);
                  goto LABEL_232;
                }
                v36 = (double)v27;
                if ((double)v27 == (double)v35
                  || (ObjectType = swift_getObjectType(),
                      *(double *)&v186 = v28,
                      v38 = *(uint64_t (**)(uint64_t *, uint64_t, _QWORD))(*(_QWORD *)&v11 + 40),
                      v39 = v38(&v186, ObjectType, *(_QWORD *)&v11),
                      *(double *)&v186 = v9,
                      result = v38(&v186, ObjectType, *(_QWORD *)&v11),
                      v39 == result))
                {
                  v13 = v178;
                  if (v14 >= 1)
                    goto LABEL_36;
                }
                else
                {
                  v66 = result;
                  v67 = result - v39;
                  v13 = v178;
                  if (__OFSUB__(result, v39))
                  {
LABEL_253:
                    __break(1u);
                    goto LABEL_254;
                  }
                  v68 = v28 + (double)v67;
                  *(double *)&v186 = v68;
                  if (_CalendarGregorian.timeInDay(for:)(COERCE_FOUNDATION_DATE((double)v67)) != v36)
                  {
                    if (v66 >= v39)
                      v28 = v68;
                    if (v14 < 1)
                      goto LABEL_38;
                    goto LABEL_36;
                  }
                  v28 = v68;
                  if (v14 >= 1)
                  {
LABEL_36:
                    v185 = v28;
                    v183 = v12;
                    v184 = v11;
                    _CalendarGregorian.timeZoneTransitionInterval(at:timeZone:)(&v185, (uint64_t)&v183, (uint64_t)&v186);
                    if ((v188 & 1) == 0)
                      v28 = v28 - v187;
                  }
                }
LABEL_38:
                v9 = v18 + v28 + 0.0;
                goto LABEL_39;
              }
LABEL_226:
              __break(1u);
LABEL_227:
              __break(1u);
              goto LABEL_228;
            }
LABEL_225:
            __break(1u);
            goto LABEL_226;
          }
LABEL_224:
          __break(1u);
          goto LABEL_225;
        }
LABEL_223:
        __break(1u);
        goto LABEL_224;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_223;
  }
LABEL_39:
  v40 = v175;
  if (!v181)
    v40 = 1;
  if ((v40 & 1) != 0)
    goto LABEL_81;
  v41 = fmod(v9, 1.0);
  if (v41 >= 0.0)
    v42 = v9 - v41;
  else
    v42 = v9 - v41 + -1.0;
  if (v41 >= 0.0)
    v43 = v41;
  else
    v43 = v41 + 1.0;
  *(_QWORD *)&v190[0] = 112;
  *(double *)v189 = v9;
  __dst[0] = *(_OWORD *)(v13 + 96);
  swift_unknownObjectRetain();
  _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)v190, (double *)v189, (uint64_t *)__dst, __src);
  swift_unknownObjectRelease();
  result = (uint64_t)memcpy(__dst, __src, 0x11AuLL);
  if ((BYTE8(__dst[7]) & 1) != 0 || (BYTE8(__dst[8]) & 1) != 0 || (BYTE8(__dst[9]) & 1) != 0)
    goto LABEL_262;
  v44 = *(_QWORD *)&__dst[7];
  v45 = *(_QWORD *)&__dst[8];
  v46 = *(_QWORD *)&__dst[9];
  result = outlined release of DateComponents((uint64_t)__dst);
  v47 = 3600 * v44;
  if ((unsigned __int128)(v44 * (__int128)3600) >> 64 != (3600 * v44) >> 63)
    goto LABEL_227;
  v48 = 60 * v45;
  if ((unsigned __int128)(v45 * (__int128)60) >> 64 != (60 * v45) >> 63)
  {
LABEL_228:
    __break(1u);
    goto LABEL_229;
  }
  v25 = __OFADD__(v47, v48);
  v49 = v47 + v48;
  if (v25)
  {
LABEL_230:
    __break(1u);
    goto LABEL_231;
  }
  v25 = __OFADD__(v49, v46);
  v50 = v49 + v46;
  if (v25)
  {
LABEL_232:
    __break(1u);
LABEL_233:
    __break(1u);
LABEL_234:
    __break(1u);
    goto LABEL_235;
  }
  v51 = (double)v181 * 604800.0 + v42;
  v186 = 112;
  v183 = v51;
  v189[0] = *(_OWORD *)(v13 + 96);
  swift_unknownObjectRetain();
  _CalendarGregorian.dateComponents(_:from:in:)(&v186, &v183, (uint64_t *)v189, v190);
  swift_unknownObjectRelease();
  result = (uint64_t)memcpy(v189, v190, 0x11AuLL);
  if ((BYTE8(v189[7]) & 1) != 0 || (BYTE8(v189[8]) & 1) != 0 || (BYTE8(v189[9]) & 1) != 0)
    goto LABEL_263;
  v52 = *(_QWORD *)&v189[7];
  v53 = *(_QWORD *)&v189[8];
  v54 = *(_QWORD *)&v189[9];
  result = outlined release of DateComponents((uint64_t)v189);
  v55 = 3600 * v52;
  if ((unsigned __int128)(v52 * (__int128)3600) >> 64 != (3600 * v52) >> 63)
    goto LABEL_233;
  v56 = 60 * v53;
  if ((unsigned __int128)(v53 * (__int128)60) >> 64 != (60 * v53) >> 63)
  {
LABEL_235:
    __break(1u);
    goto LABEL_236;
  }
  v25 = __OFADD__(v55, v56);
  v57 = v55 + v56;
  if (v25)
  {
LABEL_237:
    __break(1u);
    goto LABEL_238;
  }
  v25 = __OFADD__(v57, v54);
  v58 = v57 + v54;
  if (v25)
  {
LABEL_238:
    __break(1u);
    goto LABEL_239;
  }
  v59 = (double)v50;
  if ((double)v50 != (double)v58)
  {
    v60 = swift_getObjectType();
    *(double *)&v186 = v51;
    v61 = *(uint64_t (**)(uint64_t *, uint64_t, _QWORD))(*(_QWORD *)&v11 + 40);
    v62 = v61(&v186, v60, *(_QWORD *)&v11);
    *(double *)&v186 = v9;
    result = v61(&v186, v60, *(_QWORD *)&v11);
    if (v62 != result)
    {
      v63 = result;
      v64 = result - v62;
      if (__OFSUB__(result, v62))
      {
LABEL_254:
        __break(1u);
        goto LABEL_255;
      }
      v65 = v51 + (double)v64;
      *(double *)&v186 = v65;
      if (_CalendarGregorian.timeInDay(for:)(COERCE_FOUNDATION_DATE((double)v64)) == v59)
      {
        v51 = v65;
      }
      else if (v63 >= v62)
      {
        v51 = v65;
      }
    }
  }
  if (v181 >= 1)
  {
    v185 = v51;
    v183 = v12;
    v184 = v11;
    _CalendarGregorian.timeZoneTransitionInterval(at:timeZone:)(&v185, (uint64_t)&v183, (uint64_t)&v186);
    if ((v188 & 1) == 0)
      v51 = v51 - v187;
  }
  v9 = v43 + v51 + 0.0;
LABEL_81:
  v69 = v174;
  if (!v180)
    v69 = 1;
  if ((v69 & 1) != 0)
    goto LABEL_115;
  v70 = fmod(v9, 1.0);
  if (v70 >= 0.0)
    v71 = v9 - v70;
  else
    v71 = v9 - v70 + -1.0;
  if (v70 >= 0.0)
    v72 = v70;
  else
    v72 = v70 + 1.0;
  *(_QWORD *)&v190[0] = 112;
  *(double *)v189 = v9;
  __dst[0] = *(_OWORD *)(v13 + 96);
  swift_unknownObjectRetain();
  _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)v190, (double *)v189, (uint64_t *)__dst, __src);
  swift_unknownObjectRelease();
  result = (uint64_t)memcpy(__dst, __src, 0x11AuLL);
  if ((BYTE8(__dst[7]) & 1) != 0 || (BYTE8(__dst[8]) & 1) != 0 || (BYTE8(__dst[9]) & 1) != 0)
    goto LABEL_264;
  v73 = *(_QWORD *)&__dst[7];
  v74 = *(_QWORD *)&__dst[8];
  v75 = *(_QWORD *)&__dst[9];
  result = outlined release of DateComponents((uint64_t)__dst);
  v76 = 3600 * v73;
  if ((unsigned __int128)(v73 * (__int128)3600) >> 64 != (3600 * v73) >> 63)
    goto LABEL_234;
  v77 = 60 * v74;
  if ((unsigned __int128)(v74 * (__int128)60) >> 64 != (60 * v74) >> 63)
  {
LABEL_236:
    __break(1u);
    goto LABEL_237;
  }
  v25 = __OFADD__(v76, v77);
  v78 = v76 + v77;
  if (v25)
  {
LABEL_239:
    __break(1u);
    goto LABEL_240;
  }
  v25 = __OFADD__(v78, v75);
  v79 = v78 + v75;
  if (v25)
  {
LABEL_240:
    __break(1u);
LABEL_241:
    __break(1u);
LABEL_242:
    __break(1u);
    goto LABEL_243;
  }
  v80 = (double)v180 * 604800.0 + v71;
  v186 = 112;
  v183 = v80;
  v189[0] = *(_OWORD *)(v13 + 96);
  swift_unknownObjectRetain();
  _CalendarGregorian.dateComponents(_:from:in:)(&v186, &v183, (uint64_t *)v189, v190);
  swift_unknownObjectRelease();
  result = (uint64_t)memcpy(v189, v190, 0x11AuLL);
  if ((BYTE8(v189[7]) & 1) != 0 || (BYTE8(v189[8]) & 1) != 0 || (BYTE8(v189[9]) & 1) != 0)
    goto LABEL_265;
  v81 = *(_QWORD *)&v189[7];
  v82 = *(_QWORD *)&v189[8];
  v83 = *(_QWORD *)&v189[9];
  result = outlined release of DateComponents((uint64_t)v189);
  v84 = 3600 * v81;
  if ((unsigned __int128)(v81 * (__int128)3600) >> 64 != (3600 * v81) >> 63)
    goto LABEL_241;
  v85 = 60 * v82;
  if ((unsigned __int128)(v82 * (__int128)60) >> 64 != (60 * v82) >> 63)
  {
LABEL_243:
    __break(1u);
    goto LABEL_244;
  }
  v25 = __OFADD__(v84, v85);
  v86 = v84 + v85;
  if (v25)
  {
LABEL_245:
    __break(1u);
    goto LABEL_246;
  }
  v25 = __OFADD__(v86, v83);
  v87 = v86 + v83;
  if (v25)
  {
LABEL_246:
    __break(1u);
    goto LABEL_247;
  }
  v88 = (double)v79;
  if ((double)v79 != (double)v87)
  {
    v89 = swift_getObjectType();
    *(double *)&v186 = v80;
    v90 = *(uint64_t (**)(uint64_t *, uint64_t, _QWORD))(*(_QWORD *)&v11 + 40);
    v91 = v90(&v186, v89, *(_QWORD *)&v11);
    *(double *)&v186 = v9;
    result = v90(&v186, v89, *(_QWORD *)&v11);
    if (v91 != result)
    {
      v92 = result;
      v93 = result - v91;
      if (__OFSUB__(result, v91))
      {
LABEL_255:
        __break(1u);
LABEL_256:
        __break(1u);
        goto LABEL_257;
      }
      v94 = v80 + (double)v93;
      *(double *)&v186 = v94;
      if (_CalendarGregorian.timeInDay(for:)(COERCE_FOUNDATION_DATE((double)v93)) == v88)
      {
        v80 = v94;
      }
      else if (v92 >= v91)
      {
        v80 = v94;
      }
    }
  }
  if (v180 >= 1)
  {
    v185 = v80;
    v183 = v12;
    v184 = v11;
    _CalendarGregorian.timeZoneTransitionInterval(at:timeZone:)(&v185, (uint64_t)&v183, (uint64_t)&v186);
    if ((v188 & 1) == 0)
      v80 = v80 - v187;
  }
  v9 = v72 + v80 + 0.0;
LABEL_115:
  if ((v182 & ~v173) != 1 || !v179)
    goto LABEL_148;
  v95 = fmod(v9, 1.0);
  if (v95 >= 0.0)
    v96 = v9 - v95;
  else
    v96 = v9 - v95 + -1.0;
  if (v95 >= 0.0)
    v97 = v95;
  else
    v97 = v95 + 1.0;
  *(_QWORD *)&v190[0] = 112;
  *(double *)v189 = v9;
  __dst[0] = *(_OWORD *)(v13 + 96);
  swift_unknownObjectRetain();
  _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)v190, (double *)v189, (uint64_t *)__dst, __src);
  swift_unknownObjectRelease();
  result = (uint64_t)memcpy(__dst, __src, 0x11AuLL);
  if ((BYTE8(__dst[7]) & 1) != 0 || (BYTE8(__dst[8]) & 1) != 0 || (BYTE8(__dst[9]) & 1) != 0)
    goto LABEL_266;
  v98 = *(_QWORD *)&__dst[7];
  v99 = *(_QWORD *)&__dst[8];
  v100 = *(_QWORD *)&__dst[9];
  result = outlined release of DateComponents((uint64_t)__dst);
  v101 = 3600 * v98;
  if ((unsigned __int128)(v98 * (__int128)3600) >> 64 != (3600 * v98) >> 63)
    goto LABEL_242;
  v102 = 60 * v99;
  if ((unsigned __int128)(v99 * (__int128)60) >> 64 != (60 * v99) >> 63)
  {
LABEL_244:
    __break(1u);
    goto LABEL_245;
  }
  v25 = __OFADD__(v101, v102);
  v103 = v101 + v102;
  if (v25)
  {
LABEL_247:
    __break(1u);
    goto LABEL_248;
  }
  v25 = __OFADD__(v103, v100);
  v104 = v103 + v100;
  if (v25)
  {
LABEL_248:
    __break(1u);
LABEL_249:
    __break(1u);
    goto LABEL_250;
  }
  v105 = (double)v179 * 604800.0 + v96;
  v186 = 112;
  v183 = v105;
  v189[0] = *(_OWORD *)(v13 + 96);
  swift_unknownObjectRetain();
  _CalendarGregorian.dateComponents(_:from:in:)(&v186, &v183, (uint64_t *)v189, v190);
  swift_unknownObjectRelease();
  result = (uint64_t)memcpy(v189, v190, 0x11AuLL);
  if ((BYTE8(v189[7]) & 1) != 0 || (BYTE8(v189[8]) & 1) != 0 || (BYTE8(v189[9]) & 1) != 0)
    goto LABEL_267;
  v106 = *(_QWORD *)&v189[7];
  v107 = *(_QWORD *)&v189[8];
  v108 = *(_QWORD *)&v189[9];
  result = outlined release of DateComponents((uint64_t)v189);
  v109 = 3600 * v106;
  if ((unsigned __int128)(v106 * (__int128)3600) >> 64 != (3600 * v106) >> 63)
    goto LABEL_249;
  v110 = 60 * v107;
  if ((unsigned __int128)(v107 * (__int128)60) >> 64 != (60 * v107) >> 63)
  {
LABEL_250:
    __break(1u);
    goto LABEL_251;
  }
  v25 = __OFADD__(v109, v110);
  v111 = v109 + v110;
  if (v25)
  {
LABEL_251:
    __break(1u);
    goto LABEL_252;
  }
  v25 = __OFADD__(v111, v108);
  v112 = v111 + v108;
  if (v25)
  {
LABEL_252:
    __break(1u);
    goto LABEL_253;
  }
  v113 = (double)v104;
  if ((double)v104 != (double)v112)
  {
    v114 = swift_getObjectType();
    *(double *)&v186 = v105;
    v115 = *(uint64_t (**)(uint64_t *, uint64_t, _QWORD))(*(_QWORD *)&v11 + 40);
    v116 = v115(&v186, v114, *(_QWORD *)&v11);
    *(double *)&v186 = v9;
    result = v115(&v186, v114, *(_QWORD *)&v11);
    if (v116 != result)
    {
      v117 = result;
      v118 = result - v116;
      if (__OFSUB__(result, v116))
      {
LABEL_257:
        __break(1u);
        goto LABEL_258;
      }
      v119 = v105 + (double)v118;
      *(double *)&v186 = v119;
      if (_CalendarGregorian.timeInDay(for:)(COERCE_FOUNDATION_DATE((double)v118)) == v113)
      {
        v105 = v119;
      }
      else if (v117 >= v116)
      {
        v105 = v119;
      }
    }
  }
  if (v179 >= 1)
  {
    v185 = v105;
    v183 = v12;
    v184 = v11;
    _CalendarGregorian.timeZoneTransitionInterval(at:timeZone:)(&v185, (uint64_t)&v183, (uint64_t)&v186);
    if ((v188 & 1) == 0)
      v105 = v105 - v187;
  }
  v9 = v97 + v105 + 0.0;
LABEL_148:
  v120 = v172;
  if (!v6)
    v120 = 1;
  if ((v120 & 1) != 0)
    goto LABEL_165;
  v121 = fmod(v9, 1.0);
  v122 = v9 - v121;
  if (v121 < 0.0)
    v122 = v9 - v121 + -1.0;
  v123 = (double)v6;
  if (v121 >= 0.0)
    v124 = v121;
  else
    v124 = v121 + 1.0;
  v125 = v123 * 86400.0 + v122;
  __src[0] = v9;
  v126._time = _CalendarGregorian.timeInDay(for:)(COERCE_FOUNDATION_DATE(v123 * 86400.0));
  __src[0] = v125;
  if (v126._time == _CalendarGregorian.timeInDay(for:)(v126))
    goto LABEL_161;
  v127 = swift_getObjectType();
  __src[0] = v125;
  v128 = *(uint64_t (**)(double *, uint64_t, _QWORD))(*(_QWORD *)&v11 + 40);
  v129 = v128(__src, v127, *(_QWORD *)&v11);
  __src[0] = v9;
  result = v128(__src, v127, *(_QWORD *)&v11);
  if (v129 == result)
    goto LABEL_161;
  v130 = result;
  v131 = result - v129;
  if (__OFSUB__(result, v129))
    goto LABEL_256;
  v132 = v125 + (double)v131;
  __src[0] = v132;
  if (_CalendarGregorian.timeInDay(for:)(COERCE_FOUNDATION_DATE((double)v131)) != v126._time)
  {
    if (v130 >= v129)
      v125 = v132;
    if (v6 < 1)
      goto LABEL_164;
    goto LABEL_162;
  }
  v125 = v132;
LABEL_161:
  if (v6 >= 1)
  {
LABEL_162:
    v190[0] = v125;
    *(double *)__dst = v12;
    *((double *)__dst + 1) = v11;
    _CalendarGregorian.timeZoneTransitionInterval(at:timeZone:)(v190, (uint64_t)__dst, (uint64_t)__src);
    if ((LOBYTE(__src[2]) & 1) == 0)
      v125 = v125 - __src[1];
  }
LABEL_164:
  v9 = v124 + v125 + 0.0;
LABEL_165:
  v133 = v171;
  if (!v7)
    v133 = 1;
  if ((v133 & 1) != 0)
    goto LABEL_182;
  v134 = fmod(v9, 1.0);
  v135 = v9 - v134;
  if (v134 < 0.0)
    v135 = v9 - v134 + -1.0;
  v136 = (double)v7;
  if (v134 >= 0.0)
    v137 = v134;
  else
    v137 = v134 + 1.0;
  v138 = v136 * 86400.0 + v135;
  __src[0] = v9;
  v139._time = _CalendarGregorian.timeInDay(for:)(COERCE_FOUNDATION_DATE(v136 * 86400.0));
  __src[0] = v138;
  if (v139._time == _CalendarGregorian.timeInDay(for:)(v139))
    goto LABEL_178;
  v140 = swift_getObjectType();
  __src[0] = v138;
  v141 = *(uint64_t (**)(double *, uint64_t, _QWORD))(*(_QWORD *)&v11 + 40);
  v142 = v141(__src, v140, *(_QWORD *)&v11);
  __src[0] = v9;
  result = v141(__src, v140, *(_QWORD *)&v11);
  if (v142 == result)
    goto LABEL_178;
  v143 = result;
  v144 = result - v142;
  if (!__OFSUB__(result, v142))
  {
    v145 = v138 + (double)v144;
    __src[0] = v145;
    if (_CalendarGregorian.timeInDay(for:)(COERCE_FOUNDATION_DATE((double)v144)) != v139._time)
    {
      if (v143 >= v142)
        v138 = v145;
      if (v7 < 1)
        goto LABEL_181;
      goto LABEL_179;
    }
    v138 = v145;
LABEL_178:
    if (v7 < 1)
    {
LABEL_181:
      v9 = v137 + v138 + 0.0;
LABEL_182:
      v146 = v170;
      if (!v177)
        v146 = 1;
      if ((v146 & 1) != 0)
      {
LABEL_199:
        if ((v165 & 1) != 0)
        {
          if ((v166 & 1) != 0)
            goto LABEL_201;
        }
        else
        {
          LOBYTE(v189[0]) = 4;
          v190[0] = v9;
          __src[0] = v12;
          __src[1] = v11;
          _CalendarGregorian.add(_:to:amount:inTimeZone:)((unsigned __int8 *)v189, v190, v159, (long double *)__dst);
          v9 = *(double *)__dst;
          if ((v166 & 1) != 0)
          {
LABEL_201:
            if ((v167 & 1) != 0)
              goto LABEL_202;
            goto LABEL_206;
          }
        }
        LOBYTE(v189[0]) = 5;
        v190[0] = v9;
        __src[0] = v12;
        __src[1] = v11;
        _CalendarGregorian.add(_:to:amount:inTimeZone:)((unsigned __int8 *)v189, v190, v160, (long double *)__dst);
        v9 = *(double *)__dst;
        if ((v167 & 1) != 0)
        {
LABEL_202:
          if (v168)
          {
LABEL_203:
            result = swift_unknownObjectRelease();
LABEL_208:
            *(double *)a3 = v9;
            *(_BYTE *)(a3 + 8) = 0;
            return result;
          }
LABEL_207:
          LOBYTE(v189[0]) = 13;
          v190[0] = v9;
          __src[0] = v12;
          __src[1] = v11;
          _CalendarGregorian.add(_:to:amount:inTimeZone:)((unsigned __int8 *)v189, v190, v162, (long double *)__dst);
          result = swift_unknownObjectRelease();
          v9 = *(double *)__dst;
          goto LABEL_208;
        }
LABEL_206:
        LOBYTE(v189[0]) = 6;
        v190[0] = v9;
        __src[0] = v12;
        __src[1] = v11;
        _CalendarGregorian.add(_:to:amount:inTimeZone:)((unsigned __int8 *)v189, v190, v161, (long double *)__dst);
        v9 = *(double *)__dst;
        if (v168)
          goto LABEL_203;
        goto LABEL_207;
      }
      v147 = fmod(v9, 1.0);
      v148 = v9 - v147;
      if (v147 < 0.0)
        v148 = v9 - v147 + -1.0;
      v149 = (double)v177;
      if (v147 >= 0.0)
        v150 = v147;
      else
        v150 = v147 + 1.0;
      v151 = v149 * 86400.0 + v148;
      __src[0] = v9;
      v152._time = _CalendarGregorian.timeInDay(for:)(COERCE_FOUNDATION_DATE(v149 * 86400.0));
      __src[0] = v151;
      if (v152._time == _CalendarGregorian.timeInDay(for:)(v152))
        goto LABEL_195;
      v153 = swift_getObjectType();
      __src[0] = v151;
      v154 = *(uint64_t (**)(double *, uint64_t, _QWORD))(*(_QWORD *)&v11 + 40);
      v155 = v154(__src, v153, *(_QWORD *)&v11);
      __src[0] = v9;
      result = v154(__src, v153, *(_QWORD *)&v11);
      if (v155 == result)
        goto LABEL_195;
      v156 = result;
      v157 = result - v155;
      if (!__OFSUB__(result, v155))
      {
        v158 = v151 + (double)v157;
        __src[0] = v158;
        if (_CalendarGregorian.timeInDay(for:)(COERCE_FOUNDATION_DATE((double)v157)) != v152._time)
        {
          if (v156 >= v155)
            v151 = v158;
          if (v177 < 1)
            goto LABEL_198;
          goto LABEL_196;
        }
        v151 = v158;
LABEL_195:
        if (v177 < 1)
        {
LABEL_198:
          v9 = v150 + v151 + 0.0;
          goto LABEL_199;
        }
LABEL_196:
        v190[0] = v151;
        *(double *)__dst = v12;
        *((double *)__dst + 1) = v11;
        _CalendarGregorian.timeZoneTransitionInterval(at:timeZone:)(v190, (uint64_t)__dst, (uint64_t)__src);
        if ((LOBYTE(__src[2]) & 1) == 0)
          v151 = v151 - __src[1];
        goto LABEL_198;
      }
      goto LABEL_259;
    }
LABEL_179:
    v190[0] = v138;
    *(double *)__dst = v12;
    *((double *)__dst + 1) = v11;
    _CalendarGregorian.timeZoneTransitionInterval(at:timeZone:)(v190, (uint64_t)__dst, (uint64_t)__src);
    if ((LOBYTE(__src[2]) & 1) == 0)
      v138 = v138 - __src[1];
    goto LABEL_181;
  }
LABEL_258:
  __break(1u);
LABEL_259:
  __break(1u);
LABEL_260:
  __break(1u);
LABEL_261:
  __break(1u);
LABEL_262:
  __break(1u);
LABEL_263:
  __break(1u);
LABEL_264:
  __break(1u);
LABEL_265:
  __break(1u);
LABEL_266:
  __break(1u);
LABEL_267:
  __break(1u);
  return result;
}

uint64_t _CalendarGregorian.date(byAdding:to:wrappingComponents:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5;

  v5 = *a2;
  if ((a3 & 1) != 0)
    return _CalendarGregorian.date(byAddingAndWrapping:to:)(a1, &v5, a4);
  else
    return _CalendarGregorian.date(byAddingAndCarryingOverComponents:to:)(a1, (double *)&v5, a4);
}

Swift::tuple_difference_Int_newStart_Foundation_Date __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _CalendarGregorian.difference(inComponent:from:to:)(Foundation::Calendar::Component inComponent, Foundation::Date from, Foundation::Date to)
{
  unsigned __int8 *v3;
  double *v4;
  double *v5;
  double *v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  Swift::tuple_difference_Int_newStart_Foundation_Date result;
  double v21;
  unsigned __int8 v22;
  double v23;

  v6 = (double *)inComponent;
  v7 = *v4;
  v8 = *v5;
  if (*v5 == *v4)
  {
    v9 = 0;
    *(double *)inComponent = v7;
  }
  else
  {
    v10 = *v3;
    if ((v10 - 1) >= 0xC)
      __asm { BR              X10 }
    v11 = 0;
    v12 = -1;
    if (v7 < v8)
      v12 = 1;
    while (1)
    {
      while (1)
      {
        v9 = v12;
        v22 = v10;
        v21 = v7;
        swift_unknownObjectRetain();
        _CalendarGregorian.add(_:to:amount:inTimeZone:)(&v22, &v21, v9, &v23);
        swift_unknownObjectRelease();
        v13 = v23;
        if (v7 >= v8)
          v14 = v23 < v7;
        else
          v14 = v7 < v23;
        if (!v14)
        {
          lazy protocol witness table accessor for type GregorianCalendarError and conformance GregorianCalendarError();
          swift_allocError();
          *(double *)v15 = v7;
          *(double *)(v15 + 8) = v13;
          *(_QWORD *)(v15 + 16) = 0;
          goto LABEL_19;
        }
        if (v23 == v8)
        {
          *v6 = v23;
          goto LABEL_39;
        }
        if (v7 >= v8)
          break;
        if (v8 < v23)
          goto LABEL_21;
        v12 = 2 * v9;
        v11 = v9;
        if (2 * v9 < 0)
        {
LABEL_17:
          lazy protocol witness table accessor for type GregorianCalendarError and conformance GregorianCalendarError();
          swift_allocError();
          *(_QWORD *)v15 = v10;
          *(double *)(v15 + 8) = v7;
          *(double *)(v15 + 16) = v8;
LABEL_19:
          *(_BYTE *)(v15 + 24) = !v14;
          swift_willThrow();
          goto LABEL_39;
        }
      }
      if (v23 < v8)
        break;
      v12 = 2 * v9;
      v11 = v9;
      if (((2 * v9) & 0x8000000000000000) == 0)
        goto LABEL_17;
    }
LABEL_21:
    v16 = v9;
    v9 = v11;
LABEL_22:
    v17 = v16;
    v16 = v9;
    while (1)
    {
      v9 = v16;
      if (v7 >= v8)
      {
        if (__OFSUB__(v16, v17))
          goto LABEL_43;
        if (v16 - v17 < 2)
        {
LABEL_37:
          v22 = v10;
          v21 = v7;
          swift_unknownObjectRetain();
          _CalendarGregorian.add(_:to:amount:inTimeZone:)(&v22, &v21, v16, &v23);
          swift_unknownObjectRelease();
          from._time = v23;
          *v6 = v23;
          goto LABEL_39;
        }
        v18 = v17 - v16;
        if (__OFSUB__(v17, v16))
        {
          __break(1u);
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          JUMPOUT(0x181D709B0);
        }
      }
      else
      {
        v18 = v17 - v16;
        if (__OFSUB__(v17, v16))
          goto LABEL_42;
        if (v18 <= 1)
          goto LABEL_37;
      }
      v16 += v18 / 2;
      if (__OFADD__(v9, v18 / 2))
        goto LABEL_41;
      v22 = v10;
      v21 = v7;
      swift_unknownObjectRetain();
      _CalendarGregorian.add(_:to:amount:inTimeZone:)(&v22, &v21, v16, &v23);
      swift_unknownObjectRelease();
      from._time = v23;
      if (v23 == v8)
        break;
      if (v7 >= v8)
      {
        if (v23 < v8)
          goto LABEL_22;
      }
      else if (v8 < v23)
      {
        goto LABEL_22;
      }
    }
    *v6 = v23;
    v9 = v16;
  }
LABEL_39:
  v19 = v9;
  result.newStart = from;
  result.difference = v19;
  return result;
}

void *_CalendarGregorian.dateComponents(_:from:to:)@<X0>(uint64_t *a1@<X0>, double *a2@<X1>, double *a3@<X2>, void *a4@<X8>)
{
  double *v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double *v11;
  BOOL v12;
  char *v13;
  Foundation::Date v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  Foundation::Date v18;
  uint64_t v19;
  Swift::Int_optional v20;
  void *v21;
  Swift::tuple_difference_Int_newStart_Foundation_Date v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  double v27;
  _BOOL4 v28;
  _BOOL4 v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  Swift::Int difference;
  uint64_t v36;
  os_log_type_t v37;
  uint64_t v38;
  BOOL v39;
  void *__dst;
  double *v42;
  Swift::Int _;
  __int128 __8;
  char v45;
  uint64_t v46;
  char v47;
  id v48[2];
  double __src[37];
  Swift::Int_optional v50;

  v5 = 0;
  v6 = *a1;
  v7 = *a2;
  v8 = *a3;
  v9 = *a3;
  v10 = *a2;
  if ((*a1 & 0x2000) != 0)
  {
    __src[0] = *a2;
    *(double *)&__8 = v8;
    v11 = specialized static Date.subsecondsOffsetInNanoScale(_:_:)(__src, (double *)&__8);
    v5 = v11;
    if ((uint64_t)v11 >= 1000000000)
    {
      v5 = v11 - 125000000;
      if (v7 != v8)
      {
        if (v7 < v8)
        {
LABEL_5:
          v10 = floor(v7);
          v12 = v8 < v7;
          if (v8 != v7)
            goto LABEL_6;
LABEL_11:
          v9 = v8;
          goto LABEL_12;
        }
        goto LABEL_60;
      }
    }
    else if (v7 != v8)
    {
      if (v7 >= v8)
        goto LABEL_5;
LABEL_60:
      v10 = ceil(v7);
      v12 = v8 < v7;
      if (v8 == v7)
        goto LABEL_11;
      goto LABEL_6;
    }
    v10 = v7;
    v12 = v8 < v7;
    if (v8 == v7)
      goto LABEL_11;
LABEL_6:
    if (v12)
      v9 = ceil(v8);
    else
      v9 = floor(v8);
  }
LABEL_12:
  __8 = 0uLL;
  v48[0] = 0;
  v48[1] = 0;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(&__8, (uint64_t *)v48, 0, 1, 0, 1, 0, 1, (uint64_t)__src, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1);
  *(_QWORD *)&__8 = v6;
  v13 = orderedComponents #1 (_:) in _CalendarGregorian.dateComponents(_:from:to:)((uint64_t *)&__8);
  v15 = *((_QWORD *)v13 + 2);
  if (v15)
  {
    v42 = v5;
    __dst = a4;
    v16 = 0;
    v17 = 0x7FFFFFFFLL;
    if (v7 >= v8)
      v17 = 0xFFFFFFFF80000000;
    _ = v17;
    *(Foundation::Date *)&v18._time = (Foundation::Date)134349570;
    do
    {
      v19 = v13[v16++ + 32];
      if (((1 << v19) & 0x23DFF) != 0)
      {
        v47 = v19;
        v48[0] = *(id *)&v10;
        v46 = *(_QWORD *)&v9;
        v22 = _CalendarGregorian.difference(inComponent:from:to:)((Foundation::Calendar::Component)&__8, v18, v14);
        *(Foundation::Date *)&v18._time = v22.newStart;
        v20.value = v22.difference;
        if (v21)
        {
          v48[0] = v21;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
          if (!swift_dynamicCast())
          {

            __break(1u);
            JUMPOUT(0x181D713FCLL);
          }
          if ((v45 & 1) != 0)
          {
            if (one-time initialization token for logger != -1)
              swift_once();
            v23 = type metadata accessor for Logger();
            __swift_project_value_buffer(v23, (uint64_t)static _CalendarGregorian.logger);
            v24 = Logger.logObject.getter();
            v25 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v24, v25))
            {
              v26 = swift_slowAlloc();
              v46 = swift_slowAlloc();
              *(_DWORD *)v26 = 134349570;
              *(double *)(v26 + 4) = v10;
              *(_WORD *)(v26 + 12) = 2050;
              *(double *)(v26 + 14) = v8;
              *(_WORD *)(v26 + 22) = 2082;
              __asm { BR              X8 }
            }
          }
          else
          {
            if (one-time initialization token for logger != -1)
              swift_once();
            v36 = type metadata accessor for Logger();
            __swift_project_value_buffer(v36, (uint64_t)static _CalendarGregorian.logger);
            v24 = Logger.logObject.getter();
            v37 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v24, v37))
            {
              v38 = swift_slowAlloc();
              v46 = swift_slowAlloc();
              *(_DWORD *)v38 = 134349570;
              *(double *)(v38 + 4) = v10;
              *(_WORD *)(v38 + 12) = 2050;
              *(double *)(v38 + 14) = v8;
              *(_WORD *)(v38 + 22) = 2082;
              __asm { BR              X8 }
            }
          }

          LOBYTE(v46) = v19;
          v50.value = _;
          v50.is_nil = 0;
          DateComponents.setValue(_:for:)(v50, (Foundation::Calendar::Component)&v46);

        }
        else
        {
          v10 = *(double *)&__8;
          if ((_DWORD)v19 == 13)
          {
            *(_QWORD *)&v27 = (char *)v42 + v22.difference;
            v28 = __OFADD__(v22.difference, v42);
            v29 = __OFSUB__(v22.difference, v42);
            if (v8 < v7)
              v28 = v29;
            if (v28)
            {
              if (one-time initialization token for logger != -1)
                swift_once();
              v30 = type metadata accessor for Logger();
              __swift_project_value_buffer(v30, (uint64_t)static _CalendarGregorian.logger);
              v31 = Logger.logObject.getter();
              v32 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v31, v32))
              {
                v33 = swift_slowAlloc();
                v34 = swift_slowAlloc();
                *(_QWORD *)&__8 = v34;
                *(_DWORD *)v33 = 134349570;
                *(double *)(v33 + 4) = v7;
                *(_WORD *)(v33 + 12) = 2050;
                *(double *)(v33 + 14) = v8;
                *(_WORD *)(v33 + 22) = 2082;
                *(_QWORD *)(v33 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x6F6365736F6E616ELL, 0xEA0000000000646ELL, (uint64_t *)&__8);
                swift_bridgeObjectRelease();
                _os_log_impl(&dword_1817D9000, v31, v32, "Overflowing in dateComponents(from:start:end:). start: %{public}f. end: %{public}f. component: %{public}s", (uint8_t *)v33, 0x20u);
                swift_arrayDestroy();
                MEMORY[0x186DA9E78](v34, -1, -1);
                MEMORY[0x186DA9E78](v33, -1, -1);
              }

              if (v22.difference == 0x7FFFFFFFFFFFFFFFLL)
                difference = 0;
              else
                difference = v22.difference;
              *(_QWORD *)&__src[20] = difference;
              LOBYTE(__src[21]) = v22.difference == 0x7FFFFFFFFFFFFFFFLL;
            }
            else
            {
              if (v8 < v7)
                *(_QWORD *)&v27 = v22.difference - (_QWORD)v42;
              v39 = *(_QWORD *)&v27 == 0x7FFFFFFFFFFFFFFFLL;
              if (v27 == NAN)
                v27 = 0.0;
              __src[20] = v27;
              LOBYTE(__src[21]) = v39;
            }
          }
          else
          {
            LOBYTE(__8) = v19;
            v20.is_nil = 0;
            DateComponents.setValue(_:for:)(v20, (Foundation::Calendar::Component)&__8);
          }
        }
      }
      else if (((1 << v19) & 0x1C000) == 0)
      {
        __src[26] = 0.0;
        LOBYTE(__src[27]) = 0;
      }
    }
    while (v15 != v16);
    swift_bridgeObjectRelease();
    a4 = __dst;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return memcpy(a4, __src, 0x11AuLL);
}

char *orderedComponents #1 (_:) in _CalendarGregorian.dateComponents(_:from:to:)(uint64_t *a1)
{
  uint64_t v1;
  char *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;

  v1 = *a1;
  if ((*a1 & 1) == 0)
  {
    v2 = (char *)MEMORY[0x1E0DEE9D8];
    if ((v1 & 2) == 0)
      goto LABEL_12;
    goto LABEL_7;
  }
  v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v4 = *((_QWORD *)v2 + 2);
  v3 = *((_QWORD *)v2 + 3);
  if (v4 >= v3 >> 1)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v4 + 1, 1, v2);
  *((_QWORD *)v2 + 2) = v4 + 1;
  v2[v4 + 32] = 0;
  if ((v1 & 2) != 0)
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
    v6 = *((_QWORD *)v2 + 2);
    v5 = *((_QWORD *)v2 + 3);
    if (v6 >= v5 >> 1)
      v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v5 > 1), v6 + 1, 1, v2);
    *((_QWORD *)v2 + 2) = v6 + 1;
    v2[v6 + 32] = 1;
  }
LABEL_12:
  if ((v1 & 0x1000) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
    v8 = *((_QWORD *)v2 + 2);
    v7 = *((_QWORD *)v2 + 3);
    if (v8 >= v7 >> 1)
      v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1, v2);
    *((_QWORD *)v2 + 2) = v8 + 1;
    v2[v8 + 32] = 12;
    if ((v1 & 0x200) == 0)
    {
LABEL_14:
      if ((v1 & 4) == 0)
        goto LABEL_15;
      goto LABEL_36;
    }
  }
  else if ((v1 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
  v10 = *((_QWORD *)v2 + 2);
  v9 = *((_QWORD *)v2 + 3);
  if (v10 >= v9 >> 1)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10 + 1, 1, v2);
  *((_QWORD *)v2 + 2) = v10 + 1;
  v2[v10 + 32] = 9;
  if ((v1 & 4) == 0)
  {
LABEL_15:
    if ((v1 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_41;
  }
LABEL_36:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
  v12 = *((_QWORD *)v2 + 2);
  v11 = *((_QWORD *)v2 + 3);
  if (v12 >= v11 >> 1)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1, v2);
  *((_QWORD *)v2 + 2) = v12 + 1;
  v2[v12 + 32] = 2;
  if ((v1 & 0x800) == 0)
  {
LABEL_16:
    if ((v1 & 0x400) == 0)
      goto LABEL_17;
    goto LABEL_46;
  }
LABEL_41:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
  v14 = *((_QWORD *)v2 + 2);
  v13 = *((_QWORD *)v2 + 3);
  if (v14 >= v13 >> 1)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, v2);
  *((_QWORD *)v2 + 2) = v14 + 1;
  v2[v14 + 32] = 11;
  if ((v1 & 0x400) == 0)
  {
LABEL_17:
    if ((v1 & 8) == 0)
      goto LABEL_18;
    goto LABEL_51;
  }
LABEL_46:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
  v16 = *((_QWORD *)v2 + 2);
  v15 = *((_QWORD *)v2 + 3);
  if (v16 >= v15 >> 1)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), v16 + 1, 1, v2);
  *((_QWORD *)v2 + 2) = v16 + 1;
  v2[v16 + 32] = 10;
  if ((v1 & 8) == 0)
  {
LABEL_18:
    if ((v1 & 0x40000) == 0)
      goto LABEL_19;
    goto LABEL_56;
  }
LABEL_51:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
  v18 = *((_QWORD *)v2 + 2);
  v17 = *((_QWORD *)v2 + 3);
  if (v18 >= v17 >> 1)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v17 > 1), v18 + 1, 1, v2);
  *((_QWORD *)v2 + 2) = v18 + 1;
  v2[v18 + 32] = 3;
  if ((v1 & 0x40000) == 0)
  {
LABEL_19:
    if ((v1 & 0x80) == 0)
      goto LABEL_20;
    goto LABEL_61;
  }
LABEL_56:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
  v20 = *((_QWORD *)v2 + 2);
  v19 = *((_QWORD *)v2 + 3);
  if (v20 >= v19 >> 1)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v19 > 1), v20 + 1, 1, v2);
  *((_QWORD *)v2 + 2) = v20 + 1;
  v2[v20 + 32] = 17;
  if ((v1 & 0x80) == 0)
  {
LABEL_20:
    if ((v1 & 0x100) == 0)
      goto LABEL_21;
    goto LABEL_66;
  }
LABEL_61:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
  v22 = *((_QWORD *)v2 + 2);
  v21 = *((_QWORD *)v2 + 3);
  if (v22 >= v21 >> 1)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v22 + 1, 1, v2);
  *((_QWORD *)v2 + 2) = v22 + 1;
  v2[v22 + 32] = 7;
  if ((v1 & 0x100) == 0)
  {
LABEL_21:
    if ((v1 & 0x10) == 0)
      goto LABEL_22;
    goto LABEL_71;
  }
LABEL_66:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
  v24 = *((_QWORD *)v2 + 2);
  v23 = *((_QWORD *)v2 + 3);
  if (v24 >= v23 >> 1)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v23 > 1), v24 + 1, 1, v2);
  *((_QWORD *)v2 + 2) = v24 + 1;
  v2[v24 + 32] = 8;
  if ((v1 & 0x10) == 0)
  {
LABEL_22:
    if ((v1 & 0x20) == 0)
      goto LABEL_23;
    goto LABEL_76;
  }
LABEL_71:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
  v26 = *((_QWORD *)v2 + 2);
  v25 = *((_QWORD *)v2 + 3);
  if (v26 >= v25 >> 1)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v25 > 1), v26 + 1, 1, v2);
  *((_QWORD *)v2 + 2) = v26 + 1;
  v2[v26 + 32] = 4;
  if ((v1 & 0x20) == 0)
  {
LABEL_23:
    if ((v1 & 0x40) == 0)
      goto LABEL_24;
    goto LABEL_81;
  }
LABEL_76:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
  v28 = *((_QWORD *)v2 + 2);
  v27 = *((_QWORD *)v2 + 3);
  if (v28 >= v27 >> 1)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v28 + 1, 1, v2);
  *((_QWORD *)v2 + 2) = v28 + 1;
  v2[v28 + 32] = 5;
  if ((v1 & 0x40) == 0)
  {
LABEL_24:
    if ((v1 & 0x2000) == 0)
      return v2;
    goto LABEL_86;
  }
LABEL_81:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
  v30 = *((_QWORD *)v2 + 2);
  v29 = *((_QWORD *)v2 + 3);
  if (v30 >= v29 >> 1)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v29 > 1), v30 + 1, 1, v2);
  *((_QWORD *)v2 + 2) = v30 + 1;
  v2[v30 + 32] = 6;
  if ((v1 & 0x2000) != 0)
  {
LABEL_86:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
    v32 = *((_QWORD *)v2 + 2);
    v31 = *((_QWORD *)v2 + 3);
    if (v32 >= v31 >> 1)
      v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v31 > 1), v32 + 1, 1, v2);
    *((_QWORD *)v2 + 2) = v32 + 1;
    v2[v32 + 32] = 13;
  }
  return v2;
}

NSCalendar __swiftcall _CalendarGregorian.bridgeToNSCalendar()()
{
  uint64_t v0;
  uint64_t v1;
  objc_class *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  NSCalendar result;
  objc_super v7;

  v1 = lazy protocol witness table accessor for type _CalendarGregorian and conformance _CalendarGregorian(&lazy protocol witness table cache variable for type _CalendarGregorian and conformance _CalendarGregorian, (uint64_t)&protocol conformance descriptor for _CalendarGregorian);
  v2 = (objc_class *)type metadata accessor for _NSSwiftCalendar();
  v3 = (char *)objc_allocWithZone(v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<Calendar, os_unfair_lock_s>);
  v4 = swift_allocObject();
  *(_DWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 16) = v0;
  *(_QWORD *)(v4 + 24) = v1;
  *(_QWORD *)&v3[OBJC_IVAR____NSSwiftCalendar__lock] = v4;
  v5 = *MEMORY[0x1E0C996C8];
  v7.receiver = v3;
  v7.super_class = v2;
  swift_retain();
  result.super.isa = (Class)objc_msgSendSuper2(&v7, sel_initWithCheckedCalendarIdentifier_, v5);
  if (!result.super.isa)
    __break(1u);
  return result;
}

uint64_t _CalendarGregorian.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for _CalendarGregorian()
{
  return objc_opt_self();
}

uint64_t protocol witness for _CalendarProtocol.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:) in conformance _CalendarGregorian(uint64_t a1, uint64_t *a2, __int128 *a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t *a8)
{
  char v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v17;
  char v18;

  v12 = *((_BYTE *)a8 + 8);
  v13 = a5 & 1;
  v14 = a7 & 1;
  v17 = *a8;
  v18 = v12;
  v15 = swift_allocObject();
  _CalendarGregorian.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)(v15, a2, a3, a4, v13, a6, v14, (uint64_t)&v17);
  return v15;
}

uint64_t protocol witness for _CalendarProtocol.locale.getter in conformance _CalendarGregorian@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_OWORD *)(v1 + 80);
  return swift_unknownObjectRetain();
}

uint64_t protocol witness for _CalendarProtocol.timeZone.getter in conformance _CalendarGregorian@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_OWORD *)(v1 + 96);
  return swift_unknownObjectRetain();
}

uint64_t protocol witness for _CalendarProtocol.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:) in conformance _CalendarGregorian(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4, uint64_t a5, char a6)
{
  return _CalendarGregorian.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:)(a1, a2, a3, a4 & 1, a5, a6 & 1);
}

uint64_t protocol witness for _CalendarProtocol.minimumRange(of:) in conformance _CalendarGregorian(unsigned __int8 *a1)
{
  return specialized _CalendarGregorian.minimumRange(of:)(a1);
}

void protocol witness for _CalendarProtocol.maximumRange(of:) in conformance _CalendarGregorian(uint64_t a1)
{
  _CalendarGregorian.maximumRange(of:)(a1);
}

void protocol witness for _CalendarProtocol.range(of:in:for:) in conformance _CalendarGregorian(_BYTE *a1, _BYTE *a2, void **a3)
{
  _CalendarGregorian.range(of:in:for:)(a1, a2, a3);
}

unint64_t protocol witness for _CalendarProtocol.ordinality(of:in:for:) in conformance _CalendarGregorian(Foundation::Calendar::Component a1, Foundation::Calendar::Component a2, double a3)
{
  return (unint64_t)_CalendarGregorian.ordinality(of:in:for:)(a1, a2, *(Foundation::Date *)&a3);
}

uint64_t protocol witness for _CalendarProtocol.dateComponents(_:from:) in conformance _CalendarGregorian@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a2;
  v9 = *a1;
  v8 = v5;
  v7 = *(_OWORD *)(v3 + 96);
  swift_unknownObjectRetain();
  _CalendarGregorian.dateComponents(_:from:in:)(&v9, (double *)&v8, (uint64_t *)&v7, a3);
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _CalendarGregorian()
{
  _print_unlocked<A, B>(_:_:)();
  return 0;
}

uint64_t instantiation function for generic protocol witness table for _CalendarGregorian(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type _CalendarGregorian and conformance _CalendarGregorian(&lazy protocol witness table cache variable for type _CalendarGregorian and conformance _CalendarGregorian, (uint64_t)&protocol conformance descriptor for _CalendarGregorian);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type _CalendarGregorian and conformance _CalendarGregorian(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for _CalendarGregorian();
    result = MEMORY[0x186DA9D64](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized static _CalendarGregorian.yearMonthDayFromJulianDay(_:useJulianRef:)(uint64_t result, char a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;

  v2 = result + 1401;
  if (__OFADD__(result, 1401))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if ((a2 & 1) != 0)
    goto LABEL_7;
  if ((unint64_t)(result - 0x2000000000000000) >> 62 != 3)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (__OFADD__(274277, 4 * result))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v3 = __OFADD__(v2, 3 * ((4 * result + 274277) / 146097) / 4);
  v4 = v2 + 3 * ((4 * result + 274277) / 146097) / 4;
  if (v3)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v3 = __OFSUB__(v4, 38);
  v2 = v4 - 38;
  if (!v3)
  {
LABEL_7:
    if ((unint64_t)(v2 - 0x2000000000000000) >> 62 == 3)
    {
      v5 = (4 * v2) | 3;
      v6 = 5 * ((v5 % 1461 + (v5 % 1461 < 0 ? 0x5B5uLL : 0)) >> 2);
      if ((uint64_t)(v6 + 2) < 0)
      {
        v7 = ~((-3 - v6) / 0x99);
        if ((v2 & 0x8000000000000000) == 0)
          goto LABEL_10;
      }
      else
      {
        v7 = (v6 + 2) / 0x99;
        if ((v2 & 0x8000000000000000) == 0)
        {
LABEL_10:
          v8 = v5 / 0x5B5uLL;
LABEL_13:
          v9 = v7 + 2;
          v10 = (unsigned __int128)((uint64_t)(v7 + 2) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
          return (13 - (v9 - 12 * ((v10 >> 1) + (v10 < 0)))) / 0xCu + v8 - 4716;
        }
      }
      v8 = ~((-4 - 4 * v2) / 0x5B5uLL);
      goto LABEL_13;
    }
    goto LABEL_15;
  }
LABEL_19:
  __break(1u);
  return result;
}

uint64_t specialized _CalendarGregorian.minimumRange(of:)(unsigned __int8 *a1)
{
  return ((uint64_t (*)(_QWORD, uint64_t, _QWORD))((char *)sub_181D72108 + 4 * byte_18215F532[*a1]))(0, 2, 0);
}

uint64_t sub_181D72108()
{
  return 1;
}

uint64_t sub_181D72118()
{
  return 0;
}

uint64_t sub_181D72128()
{
  return 0;
}

uint64_t sub_181D72138()
{
  return 1;
}

uint64_t sub_181D7214C()
{
  return 1;
}

uint64_t sub_181D7215C()
{
  return 1;
}

uint64_t sub_181D7216C()
{
  return 0;
}

uint64_t sub_181D7217C()
{
  return 1;
}

uint64_t sub_181D7218C()
{
  return 140742;
}

uint64_t sub_181D721A0()
{
  return 0;
}

uint64_t sub_181D721B4()
{
  return 1;
}

uint64_t sub_181D721C4()
{
  return 1;
}

uint64_t specialized static _CalendarGregorian.julianDay(ofDay:month:year:useJulianReference:)(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a2 - 2;
  if (__OFSUB__(a2, 2))
  {
    __break(1u);
    goto LABEL_17;
  }
  v5 = a3 + 4716;
  if (__OFADD__(a3, 4716))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (__OFSUB__(12, v4))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v6 = (14 - a2) / 12;
  v7 = __OFSUB__(v5, v6);
  v8 = v5 - v6;
  if (v7)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (__OFSUB__(v4, 1))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (__OFADD__(a2 - 3, 12))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if ((unsigned __int128)(v8 * (__int128)1461) >> 64 != (1461 * v8) >> 63)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = result + 1461 * v8 / 4;
  if (__OFADD__(result, 1461 * v8 / 4))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v7 = __OFSUB__(v9, 1);
  v10 = v9 - 1;
  if (v7)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v7 = __OFSUB__(v10, 1401);
  v11 = v10 - 1401;
  if (v7)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v12 = 26215 * (__int16)(153 * ((__int16)(a2 + 9) % 12) + 2);
  v13 = (v12 >> 17) + (v12 >> 31);
  result = v11 + v13;
  if (__OFADD__(v11, v13))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if ((a4 & 1) != 0)
    return result;
  v14 = 3 * ((v8 + 184) / 100);
  v15 = result - v14 / 4;
  if (__OFSUB__(result, v14 / 4))
    goto LABEL_27;
  result = v15 + 38;
  if (__OFADD__(v15, 38))
LABEL_28:
    __break(1u);
  return result;
}

uint64_t specialized static _CalendarGregorian.isComponentsInSupportedRange(_:)(uint64_t a1)
{
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;

  v1 = *(unsigned __int8 *)(a1 + 56);
  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(unsigned __int8 *)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(unsigned __int8 *)(a1 + 88);
  v6 = *(_QWORD *)(a1 + 96);
  v7 = *(unsigned __int8 *)(a1 + 104);
  v8 = *(_QWORD *)(a1 + 112);
  v9 = *(unsigned __int8 *)(a1 + 120);
  v10 = *(_QWORD *)(a1 + 128);
  v11 = *(unsigned __int8 *)(a1 + 136);
  v12 = *(_QWORD *)(a1 + 144);
  v13 = *(unsigned __int8 *)(a1 + 152);
  v14 = *(_QWORD *)(a1 + 176);
  v15 = *(unsigned __int8 *)(a1 + 184);
  v16 = *(_QWORD *)(a1 + 192);
  v17 = *(unsigned __int8 *)(a1 + 200);
  v18 = *(unsigned __int8 *)(a1 + 248);
  v19 = *(unsigned __int8 *)(a1 + 264);
  if ((*(_BYTE *)(a1 + 40) & 1) == 0 && (unint64_t)(*(_QWORD *)(a1 + 32) - 11) < 0xFFFFFFFFFFFFFFEBLL)
    return 0;
  if ((unint64_t)(*(_QWORD *)(a1 + 48) + 4714) < 0x7CDC5)
    v1 = 1;
  if (v1 != 1)
    return 0;
  v20 = (unint64_t)(*(_QWORD *)(a1 + 208) + 18856) < 0x1F3711 ? 1 : *(unsigned __int8 *)(a1 + 216);
  if (v20 != 1)
    return 0;
  if ((unint64_t)(*(_QWORD *)(a1 + 256) + 245128) < 0x195CBD1)
    v19 = 1;
  if (v19 != 1)
    return 0;
  if ((unint64_t)(*(_QWORD *)(a1 + 240) + 245128) < 0x195CBD1)
    v18 = 1;
  if (v18 != 1)
    return 0;
  v21 = (unint64_t)(*(_QWORD *)(a1 + 272) + 4714) < 0x7CDC5 ? 1 : *(unsigned __int8 *)(a1 + 280);
  if (v21 != 1)
    return 0;
  v22 = (unint64_t)(v14 + 1715896) < 0xB1892B1 ? 1 : v15;
  if (v22 != 1)
    return 0;
  v23 = (unint64_t)(v16 + 245128) < 0x195CBD1 ? 1 : v17;
  if (v23 != 1)
    return 0;
  v24 = (unint64_t)(v2 + 56568) < 0x5DA531 ? 1 : v3;
  if (v24 != 1)
    return 0;
  if ((unint64_t)(v6 + 1720610) < 0xB206075)
    v7 = 1;
  if (v7 != 1)
    return 0;
  if ((unint64_t)(v4 + 1753608) < 0xB5700D1)
    v5 = 1;
  if (v5 != 1)
    return 0;
  if ((unint64_t)(v8 + 41294640) < 0x82761B30)
    v9 = 1;
  if (v9 != 1)
    return 0;
  v25 = v10 == (int)v10 ? 1 : v11;
  if (v25 != 1)
    return 0;
  if (v12 == (int)v12)
    return 1;
  return v13;
}

uint64_t specialized static ResolvedDateComponents.yearOrYearForWOYAdjustingEra(from:)(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t result;
  char v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v1 = (_BYTE *)(a1 + 264);
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_BYTE *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(_BYTE *)(a1 + 72);
  if ((*(_BYTE *)(a1 + 280) & 1) != 0)
  {
    if (*(_BYTE *)(a1 + 56))
      result = 1;
    else
      result = *(_QWORD *)(a1 + 48);
  }
  else
  {
    result = *(_QWORD *)(a1 + 272);
    if ((*v1 & 1) == 0)
      goto LABEL_11;
  }
  if (v2)
    v7 = 1;
  else
    v7 = v3;
  if ((v7 & 1) == 0)
  {
    v8 = __OFSUB__(1, result);
    result = 1 - result;
    if (v8)
    {
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
  }
LABEL_11:
  if ((v5 & 1) != 0)
    return result;
  if (v4 >= 13)
  {
    v9 = (v4 - 1) / 0xCuLL;
    v8 = __OFADD__(result, v9);
    result += v9;
    if (!v8)
      return result;
    goto LABEL_20;
  }
  if (v4 > 0)
    return result;
  v10 = -v4 / 0xCuLL;
  v11 = result - v10;
  if (__OFADD__(result, -(uint64_t)v10))
    goto LABEL_21;
  result = v11 - 1;
  if (__OFSUB__(v11, 1))
LABEL_22:
    __break(1u);
  return result;
}

uint64_t specialized ResolvedDateComponents.init(dateComponents:)@<X0>(void *__src@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  BOOL v13;
  _BYTE v14[288];
  _QWORD __dst[36];

  memcpy(__dst, __src, 0x11AuLL);
  memcpy(v14, __src, 0x11AuLL);
  v4 = specialized static ResolvedDateComponents.yearOrYearForWOYAdjustingEra(from:)((uint64_t)v14);
  v6 = v5;
  result = outlined release of DateComponents((uint64_t)__dst);
  v8 = __dst[10];
  if (LOBYTE(__dst[11]) == 1)
  {
    if ((__dst[25] & 1) != 0 || (__dst[23] & 1) != 0)
    {
      v9 = __dst[32];
      if ((__dst[33] & 1) != 0 || (__dst[23] & 1) != 0)
      {
        if ((__dst[31] & 1) != 0 || (__dst[23] & 1) != 0)
        {
          if (LOBYTE(__dst[13]) == 1)
          {
            if ((__dst[35] & 1) != 0)
            {
              if ((__dst[7] & 1) != 0)
              {
                if (LOBYTE(__dst[33]))
                {
                  if ((__dst[31] & 1) != 0)
                  {
                    if ((__dst[25] & 1) != 0)
                    {
                      if ((__dst[23] & 1) != 0)
                      {
                        v10 = 33;
                        v11 = 1;
                      }
                      else
                      {
                        v9 = 0;
                        v10 = 64;
                        v11 = __dst[22];
                        v8 = 1;
                      }
                    }
                    else
                    {
                      v11 = __dst[22];
                      v9 = LOBYTE(__dst[23]);
                      v10 = 64;
                      v8 = __dst[24];
                    }
                  }
                  else
                  {
                    v11 = __dst[22];
                    v9 = LOBYTE(__dst[23]);
                    v10 = 0x80;
                    v8 = __dst[30];
                  }
                }
                else
                {
                  v8 = 0;
                  v11 = __dst[22];
                  v6 = __dst[32];
                  v9 = LOBYTE(__dst[23]);
                  v10 = 96;
                }
              }
              else
              {
                v10 = LOBYTE(__dst[33]) | 0x20;
                v11 = 1;
              }
            }
            else
            {
              v11 = __dst[22];
              v6 = __dst[32];
              v9 = LOBYTE(__dst[23]);
              v10 = 96;
              v8 = LOBYTE(__dst[33]);
            }
          }
          else
          {
            v8 = 0;
            v11 = 0;
            v9 = 0;
            v10 = 0;
            v6 = __dst[12];
          }
        }
        else
        {
          v9 = 0;
          v10 = 0x80;
          v11 = __dst[22];
          v8 = __dst[30];
        }
      }
      else
      {
        v8 = 0;
        v10 = 96;
        v11 = __dst[22];
        v6 = __dst[32];
        v9 = 0;
      }
    }
    else
    {
      v9 = 0;
      v10 = 64;
      v11 = __dst[22];
      v8 = __dst[24];
    }
    goto LABEL_38;
  }
  v9 = __dst[32];
  v12 = LOBYTE(__dst[35]) ^ 1 | LOBYTE(__dst[33]);
  if ((__dst[35] & 1) != 0 || (__dst[33] & 1) != 0)
  {
LABEL_23:
    v11 = 0;
    v10 = v12 | 0x20;
LABEL_38:
    *(_QWORD *)a2 = v4;
    *(_QWORD *)(a2 + 8) = v6;
    *(_QWORD *)(a2 + 16) = v8;
    *(_QWORD *)(a2 + 24) = v11;
    *(_QWORD *)(a2 + 32) = v9;
    *(_BYTE *)(a2 + 40) = v10;
    return result;
  }
  if ((__dst[9] & 1) != 0)
  {
LABEL_22:
    v12 = 0;
    goto LABEL_23;
  }
  if (__dst[8] == 1 && __dst[32] >= 52)
  {
    v13 = __OFADD__(v4++, 1);
    if (!v13)
      goto LABEL_22;
    __break(1u);
  }
  else
  {
    v12 = 0;
    if (__dst[8] < 2 || __dst[32] != 1)
      goto LABEL_23;
    v13 = __OFSUB__(v4--, 1);
    if (!v13)
    {
      v12 = 0;
      v9 = 1;
      goto LABEL_23;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized _CalendarGregorian.add(amount:to:wrappingTo:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  if (!result)
    return a2;
  v4 = a2 + result;
  if (__OFADD__(a2, result))
  {
    __break(1u);
    goto LABEL_13;
  }
  v5 = v4 - a3;
  if (__OFSUB__(v4, a3))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v6 = a4 - a3;
  if (__OFSUB__(a4, a3))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (!v6)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v5 == 0x8000000000000000 && v6 == -1)
    goto LABEL_17;
  v7 = v5 % v6;
  if (v7 < 0)
  {
    v8 = __OFADD__(v7, v6);
    v7 += v6;
    if (v8)
      goto LABEL_18;
  }
  a2 = v7 + a3;
  if (!__OFADD__(v7, a3))
    return a2;
LABEL_16:
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

double *specialized static Date.subsecondsOffsetInNanoScale(_:_:)(double *result, double *a2)
{
  double v2;
  double v3;
  double v4;

  v2 = *result;
  if (*result == *a2)
    return 0;
  if (*result >= *a2)
    v3 = *result;
  else
    v3 = *a2;
  if (*result >= *a2)
    v2 = *a2;
  v4 = round((ceil(v2) - v2 + v3 - floor(v3)) * 1000000000.0);
  if ((~*(_QWORD *)&v4 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (v4 <= -9.22337204e18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v4 < 9.22337204e18)
    return (double *)(uint64_t)v4;
LABEL_14:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type GregorianCalendarError and conformance GregorianCalendarError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GregorianCalendarError and conformance GregorianCalendarError;
  if (!lazy protocol witness table cache variable for type GregorianCalendarError and conformance GregorianCalendarError)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for GregorianCalendarError, &type metadata for GregorianCalendarError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GregorianCalendarError and conformance GregorianCalendarError);
  }
  return result;
}

_OWORD *outlined init with take of ResolvedDateComponents(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_OWORD *)((char *)a2 + 25) = *(__int128 *)((char *)a1 + 25);
  *a2 = v2;
  a2[1] = v3;
  return a2;
}

uint64_t outlined init with take of Int?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Int?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for ResolvedDateComponents(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7C && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 124);
  v3 = ((*(unsigned __int8 *)(a1 + 40) >> 5) & 0xFFFFFF87 | (8 * ((*(unsigned __int8 *)(a1 + 40) >> 1) & 0xF))) ^ 0x7F;
  if (v3 >= 0x7B)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ResolvedDateComponents(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7B)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 124;
    if (a3 >= 0x7C)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0x7C)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
    {
      *(_QWORD *)(result + 32) = 0;
      *(_OWORD *)result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_BYTE *)(result + 40) = 2 * (((-a2 >> 3) & 0xF) - 16 * a2);
    }
  }
  return result;
}

uint64_t getEnumTag for ResolvedDateComponents(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40) >> 5;
}

uint64_t destructiveProjectEnumData for ResolvedDateComponents(uint64_t result)
{
  *(_BYTE *)(result + 40) &= 0x1Fu;
  return result;
}

uint64_t destructiveInjectEnumTag for ResolvedDateComponents(uint64_t result, char a2)
{
  *(_BYTE *)(result + 40) = *(_BYTE *)(result + 40) & 1 | (32 * a2);
  return result;
}

ValueMetadata *type metadata accessor for ResolvedDateComponents()
{
  return &type metadata for ResolvedDateComponents;
}

ValueMetadata *type metadata accessor for GregorianCalendarError()
{
  return &type metadata for GregorianCalendarError;
}

uint64_t PredicateExpressions.Filter.sequence.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t PredicateExpressions.Filter.filter.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 60));
}

uint64_t PredicateExpressions.Filter.variable.getter@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = *(_QWORD *)(v2 + *(int *)(result + 64));
  return result;
}

void PredicateExpressions.Filter.init(_:_:)(uint64_t a1)
{
  unint64_t v1;

  MEMORY[0x1E0C80A78](a1);
  if (one-time initialization token for nextID != -1)
    swift_once();
  do
    v1 = __ldxr((unint64_t *)&static PredicateExpressions.VariableID.nextID);
  while (__stxr(v1 + 1, (unint64_t *)&static PredicateExpressions.VariableID.nextID));
  type metadata accessor for PredicateExpressions.Filter();
}

uint64_t PredicateExpressions.Filter.evaluate(_:)(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t (*v9)(uint64_t *, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = a2[4];
  v7 = a2[2];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v17 = *a1;
  v16 = v17;
  v9 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v6 + 16);
  swift_bridgeObjectRetain();
  v10 = v9(&v16, v7, v6);
  if (v3)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    MEMORY[0x1E0C80A78](v10);
    v11 = a2[3];
    *(&v15 - 8) = v7;
    *(&v15 - 7) = v11;
    v13 = a2[5];
    v12 = a2[6];
    *(&v15 - 6) = v6;
    *(&v15 - 5) = v13;
    *(&v15 - 4) = v12;
    *(&v15 - 3) = (uint64_t)&v17;
    *(&v15 - 2) = v2;
    v2 = Sequence.filter(_:)();
    swift_bridgeObjectRelease();
  }
  return v2;
}

void closure #1 in PredicateExpressions.Filter.evaluate(_:)()
{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  v0 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v0);
  type metadata accessor for PredicateExpressions.Filter();
}

uint64_t sub_181D72EF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v8 = *(_QWORD *)(v4 + *(int *)(a1 + 64));
  v9 = *(_QWORD *)(v2 - 8);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v9 + 16))(v5, *(_QWORD *)(v7 - 136), v2);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(v5, 0, 1, v2);
  *(_QWORD *)(v7 - 120) = v8;
  PredicateBindings.subscript.setter(v5, (uint64_t *)(v7 - 120), v2);
  *(_QWORD *)(v7 - 120) = *v3;
  v10 = *(_QWORD *)(v7 - 128);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v7 - 120, v6, v1);
  if (!v10)
    v11 = *(_BYTE *)(v7 - 65);
  return v11 & 1;
}

void partial apply for closure #1 in PredicateExpressions.Filter.evaluate(_:)()
{
  closure #1 in PredicateExpressions.Filter.evaluate(_:)();
}

uint64_t sub_181D72FBC(char a1)
{
  return a1 & 1;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.Filter<A, B>@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = PredicateExpressions.Filter.evaluate(_:)(a1, a2);
  if (!v3)
    *a3 = result;
  return result;
}

void static PredicateExpressions.build_filter<A, B>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v18 = a7;
  v19 = a8;
  v20 = a3;
  v21 = a2;
  MEMORY[0x1E0C80A78](a1);
  v12 = *(_QWORD *)(v11 - 8);
  v14 = MEMORY[0x1E0C80A78](v13);
  (*(void (**)(char *, __n128))(v12 + 16))((char *)&v17 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v14);
  if (one-time initialization token for nextID != -1)
    swift_once();
  do
    v16 = __ldxr((unint64_t *)&static PredicateExpressions.VariableID.nextID);
  while (__stxr(v16 + 1, (unint64_t *)&static PredicateExpressions.VariableID.nextID));
  v22 = a4;
  v23 = a5;
  v24 = a6;
  v25 = v18;
  v26 = v19;
  type metadata accessor for PredicateExpressions.Filter();
}

uint64_t PredicateExpressions.Filter.description.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;

  _StringGuts.grow(_:)(46);
  v0._object = (void *)0x800000018230CE80;
  v0._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0x626169726176202CLL;
  v1._object = (void *)0xEC000000203A656CLL;
  String.append(_:)(v1);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 41;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  v4._countAndFlagsBits = 0x656C626169726156;
  v4._object = (void *)0xE900000000000028;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x7265746C6966202CLL;
  v5._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v5);
  _print_unlocked<A, B>(_:_:)();
  v6._countAndFlagsBits = 41;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return 0;
}

uint64_t PredicateExpressions.Filter<>.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[24];
  uint64_t v11;
  uint64_t v12;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v10, v11);
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v3)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v10, v11);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    v12 = *(_QWORD *)(v2 + *(int *)(a2 + 64));
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v10, v11);
    swift_getAssociatedTypeWitness();
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v8 = type metadata accessor for PredicateExpressions.Variable(0, AssociatedTypeWitness, v6, v7);
    MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.Variable<A>, v8);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
}

void PredicateExpressions.Filter<>.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[18];

  v14[11] = a3;
  v14[6] = a4;
  v14[3] = a5;
  v14[8] = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v14[7] = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[9] = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v7);
  v14[10] = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[13] = v9;
  v14[14] = v10;
  v14[4] = v11;
  v14[5] = v12;
  v14[15] = v11;
  v14[16] = v13;
  v14[17] = v12;
  type metadata accessor for PredicateExpressions.Filter();
}

uint64_t sub_181D73560(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v6 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v19 - v7;
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  v9 = *(_QWORD *)(v4 - 128);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v9)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  *(_QWORD *)(v4 - 216) = v6;
  *(_QWORD *)(v4 - 208) = v8;
  *(_QWORD *)(v4 - 128) = v3;
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 120, *(_QWORD *)(v4 - 96));
  v10 = *(_QWORD *)(v4 - 144);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  v11 = *(_QWORD *)(v4 - 208);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 152) + 32))(v11, v10, v1);
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 120, *(_QWORD *)(v4 - 96));
  v12 = *(_QWORD *)(v4 - 168);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 160) + 32))(v11 + *(int *)(a1 + 60), v12, v2);
  swift_getAssociatedTypeWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = type metadata accessor for PredicateExpressions.Variable(0, AssociatedTypeWitness, v14, v15);
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 120, *(_QWORD *)(v4 - 96));
  MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.Variable<A>, v16);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  *(_QWORD *)(v11 + *(int *)(a1 + 64)) = *(_QWORD *)(v4 - 72);
  __swift_destroy_boxed_opaque_existential_1(v4 - 120);
  v17 = *(_QWORD *)(v4 - 216);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v17 + 16))(*(_QWORD *)(v4 - 200), v11, a1);
  __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v4 - 128));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v11, a1);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.Filter<A, B>(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _QWORD v12[4];
  _QWORD v13[4];

  v5 = *a3;
  v6 = a3[1];
  a1[1] = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.Filter<A, B>);
  v8 = *(_QWORD *)(v5 + 16);
  v7 = *(_QWORD *)(v5 + 24);
  v10 = *(_QWORD *)(v6 + 16);
  v9 = *(_QWORD *)(v6 + 24);
  v13[0] = v8;
  v13[1] = v7;
  v13[2] = v10;
  v13[3] = v9;
  a1[2] = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> PredicateExpressions.Filter<A, B>, a2, v13);
  v12[0] = v8;
  v12[1] = v7;
  v12[2] = v10;
  v12[3] = v9;
  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> PredicateExpressions.Filter<A, B>, a2, v12);
  a1[3] = result;
  return result;
}

void protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.Filter<A, B>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  PredicateExpressions.Filter<>.init(from:)(a1, *(_QWORD *)(a2 + 24), *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 24), a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.Filter<A, B>(_QWORD *a1, uint64_t a2)
{
  return PredicateExpressions.Filter<>.encode(to:)(a1, a2);
}

uint64_t *initializeBufferWithCopyOfBuffer for PredicateExpressions.Filter(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = *(_QWORD *)(v7 + 64) + 7;
  v11 = v8 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (v11 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || ((v10 + (v9 & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + (((v11 | 7) + 16) & ~(unint64_t)(v11 | 7)));
    swift_retain();
  }
  else
  {
    v15 = ~v8;
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    v16 = ((unint64_t)a2 + v9) & v15;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(((unint64_t)v4 + v9) & v15, v16, v5);
    *(_QWORD *)((v10 + (((unint64_t)v4 + v9) & v15)) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v10 + v16) & 0xFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t initializeWithCopy for PredicateExpressions.Filter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v11, v12);
  *(_QWORD *)((*(_QWORD *)(v8 + 64) + 7 + v11) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v8 + 64) + 7 + v12) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithCopy for PredicateExpressions.Filter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v11, v12);
  *(_QWORD *)((*(_QWORD *)(v8 + 64) + 7 + v11) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v8 + 64) + 7 + v12) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for PredicateExpressions.Filter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v11, v12);
  *(_QWORD *)((*(_QWORD *)(v8 + 64) + 7 + v11) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v8 + 64) + 7 + v12) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for PredicateExpressions.Filter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v11, v12);
  *(_QWORD *)((*(_QWORD *)(v8 + 64) + 7 + v11) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v8 + 64) + 7 + v12) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.Filter(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  if (v8 >= a2)
  {
    if (v8)
    {
      if (v5 >= v7)
        return (*(uint64_t (**)(uint64_t, _QWORD))(v4 + 48))(a1, *(unsigned int *)(v4 + 84));
      else
        return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
    }
    return 0;
  }
  if (((((*(_QWORD *)(v6 + 64) + (v10 & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
    v11 = 2;
  else
    v11 = a2 - v8 + 1;
  if (v11 >= 0x10000)
    v12 = 4;
  else
    v12 = 2;
  if (v11 < 0x100)
    v12 = 1;
  if (v11 >= 2)
    v13 = v12;
  else
    v13 = 0;
  return ((uint64_t (*)(void))((char *)&loc_181D73CD8 + 4 * byte_18215F720[v13]))();
}

void storeEnumTagSinglePayload for PredicateExpressions.Filter(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  if (v7 >= a3)
  {
    v11 = 0u;
    if (a2 <= v7)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v6 + 64) + ((*(_DWORD *)(v5 + 64) + (_DWORD)v8) & ~(_DWORD)v8) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v9 = a3 - v7 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_17:
      __asm { BR              X16 }
  }
  if (((*(_DWORD *)(v6 + 64) + ((*(_DWORD *)(v5 + 64) + (_DWORD)v8) & ~(_DWORD)v8) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64) + ((*(_QWORD *)(v5 + 64) + v8) & ~v8) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_181D73E74()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_181D73E7C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x181D73E84);
}

void sub_181D73EC0()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_181D73EC8()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_181D73ED0(uint64_t a1, int a2, unsigned int a3)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_WORD *)(v9 + v10) = 0;
  if (!a2)
    JUMPOUT(0x181D73ED8);
  if (v4 >= a3)
    return (*(uint64_t (**)(uint64_t))(v7 + 56))(v9);
  else
    return (*(uint64_t (**)(uint64_t))(v6 + 56))((v8 + v9) & v5);
}

uint64_t BinaryFloatingPoint.formatted<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  _QWORD v19[4];

  v19[2] = a5;
  v19[3] = a1;
  v19[1] = a6;
  v10 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v15 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v17 = (char *)v19 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))(v12, v6, a2, v15);
  dispatch thunk of BinaryFloatingPoint.init<A>(_:)();
  (*(void (**)(char *, uint64_t, uint64_t))(a4 + 48))(v17, a3, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, AssociatedTypeWitness);
}

uint64_t BinaryFloatingPoint.init<A>(_:strategy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  void (*v21)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v22;
  uint64_t v24;
  _QWORD v25[4];
  uint64_t v26;

  v25[2] = a7;
  v25[3] = a5;
  v25[0] = a8;
  v25[1] = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v16 = (char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v17);
  v20 = (char *)v25 - v19;
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(a6 + 48);
  v26 = a1;
  v21(a1, a4, a6, v18);
  if (v8)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(a2, a4);
    v22 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v26, v22);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v16, v20, AssociatedTypeWitness);
    dispatch thunk of BinaryFloatingPoint.init<A>(_:)();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(a2, a4);
    v24 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v26, v24);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v20, AssociatedTypeWitness);
  }
}

uint64_t BinaryFloatingPoint.init<A>(_:strategy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t AssociatedTypeWitness;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(a6 + 48))(a1, a4, a6);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(a2, a4);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

uint64_t BinaryFloatingPoint.init(_:format:lenient:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return BinaryFloatingPoint.init(_:format:lenient:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for FloatingPointFormatStyle, (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>, a7, 0);
}

{
  return BinaryFloatingPoint.init(_:format:lenient:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for FloatingPointFormatStyle.Percent, (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>.Percent, a7, 1);
}

uint64_t BinaryFloatingPoint.init(_:format:lenient:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(_QWORD, uint64_t, uint64_t)@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, int a10)
{
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  void (*v30)(_OWORD *, uint64_t, uint64_t, __n128);
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v35;
  _QWORD v36[3];
  void *v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v41 = a1;
  v38 = a4;
  v37 = a2;
  v36[1] = a9;
  v40 = a10;
  v14 = a7(0, a5, a6);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (_OWORD *)((char *)v36 - v17);
  v19 = MEMORY[0x186DA9D64](a8, v14, v16);
  v36[2] = a6;
  v20 = (int *)type metadata accessor for FloatingPointParseStrategy(0, v14, v19, a6);
  v39 = *((_QWORD *)v20 - 1);
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)v36 - v21;
  v36[0] = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](v23);
  v25 = (char *)v36 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v26);
  v29 = (char *)v36 - v28;
  v43 = v15;
  v30 = *(void (**)(_OWORD *, uint64_t, uint64_t, __n128))(v15 + 16);
  v44 = a3;
  v31 = a3;
  v32 = v37;
  v30(v18, v31, v14, v27);
  ((void (*)(char *, _OWORD *, uint64_t))v30)(v22, v18, v14);
  v22[v20[11]] = v38;
  *(_OWORD *)&v22[v20[13]] = *v18;
  outlined init with take of ICUNumberFormatter.Signature((uint64_t)v18 + *(int *)(v14 + 36), (uint64_t)&v22[v20[12]], type metadata accessor for NumberFormatStyleConfiguration.Collection);
  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  swift_storeEnumTagMultiPayload();
  v33 = v42;
  FloatingPointParseStrategy.parse(_:)(v41, v32, (uint64_t)v20, (uint64_t)v29);
  if (v33)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v44, v14);
    return (*(uint64_t (**)(char *, int *))(v39 + 8))(v22, v20);
  }
  else
  {
    (*(void (**)(char *, int *))(v39 + 8))(v22, v20);
    swift_bridgeObjectRelease();
    v35 = v36[0];
    (*(void (**)(char *, char *, uint64_t))(v36[0] + 16))(v25, v29, a5);
    dispatch thunk of BinaryFloatingPoint.init<A>(_:)();
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v44, v14);
    return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v29, a5);
  }
}

uint64_t BinaryFloatingPoint.init(_:format:lenient:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, __int128 *a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  __int128 *v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  void (*v30)(__int128 *, uint64_t, uint64_t, __n128);
  void *v31;
  uint64_t v32;
  void (*v33)(__int128 *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 *v52;

  v50 = a1;
  LODWORD(v48) = a4;
  v52 = a3;
  v47 = a2;
  v43 = a7;
  v49 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  MEMORY[0x1E0C80A78](v49);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for FloatingPointFormatStyle.Currency(0, a5, a6, v11);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (__int128 *)((char *)&v40 - v15);
  v17 = MEMORY[0x186DA9D64](&protocol conformance descriptor for FloatingPointFormatStyle<A>.Currency, v12, v14);
  v44 = a6;
  v18 = (int *)type metadata accessor for FloatingPointParseStrategy(0, v12, v17, a6);
  v46 = *((_QWORD *)v18 - 1);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v40 - v22;
  v45 = a5;
  v42 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](v24);
  v41 = (char *)&v40 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v26);
  v29 = (char *)&v40 - v28;
  v30 = *(void (**)(__int128 *, uint64_t, uint64_t, __n128))(v13 + 16);
  v30(v16, (uint64_t)v52, v12, v27);
  ((void (*)(char *, __int128 *, uint64_t))v30)(v20, v16, v12);
  v31 = v47;
  v20[v18[11]] = v48;
  v32 = v18[13];
  v48 = *v16;
  *(_OWORD *)&v20[v32] = v48;
  outlined init with copy of CurrencyFormatStyleConfiguration.Collection((uint64_t)v16 + *(int *)(v12 + 40), (uint64_t)v10);
  v33 = *(void (**)(__int128 *, uint64_t))(v13 + 8);
  swift_unknownObjectRetain();
  v33(v16, v12);
  swift_storeEnumTagMultiPayload();
  v34 = (uint64_t)v10;
  v35 = v46;
  outlined init with take of ICUNumberFormatter.Signature(v34, (uint64_t)&v20[v18[12]], type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  (*(void (**)(char *, char *, int *))(v35 + 32))(v23, v20, v18);
  v36 = v51;
  FloatingPointParseStrategy.parse(_:)(v50, v31, (uint64_t)v18, (uint64_t)v29);
  if (v36)
  {
    swift_bridgeObjectRelease();
    v33(v52, v12);
    return (*(uint64_t (**)(char *, int *))(v35 + 8))(v23, v18);
  }
  else
  {
    (*(void (**)(char *, int *))(v35 + 8))(v23, v18);
    swift_bridgeObjectRelease();
    v38 = v42;
    v39 = v45;
    (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v41, v29, v45);
    dispatch thunk of BinaryFloatingPoint.init<A>(_:)();
    v33(v52, v12);
    return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v29, v39);
  }
}

Foundation::Date_optional __swiftcall _TimeZoneBridged.nextDaylightSavingTimeTransition(after:)(Foundation::Date after)
{
  double *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  Swift::Bool v8;
  Swift::Double v9;
  uint64_t v10;
  uint64_t v11;
  Foundation::Date_optional result;

  v4 = v2;
  v5 = *(void **)(v3 + 16);
  v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D68]), sel_initWithTimeIntervalSinceReferenceDate_, *v1);
  v7 = objc_msgSend(v5, sel_nextDaylightSavingTimeTransitionAfterDate_, v6);

  if (v7)
  {
    objc_msgSend(v7, sel_timeIntervalSinceReferenceDate);
    v11 = v10;

  }
  else
  {
    v11 = 0;
  }
  *(_QWORD *)v4 = v11;
  *(_BYTE *)(v4 + 8) = v7 == 0;
  result.value = *(Foundation::Date *)&v9;
  result.is_nil = v8;
  return result;
}

id _TimeZoneBridged.localizedName(for:locale:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  void *v4;
  uint64_t v5;
  uint64_t ObjectType;
  void *v7;
  id v8;
  id v9;

  v4 = *(void **)(v2 + 16);
  if (*a2)
  {
    v5 = a2[1];
    ObjectType = swift_getObjectType();
    v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 496))(ObjectType, v5);
  }
  else
  {
    v7 = 0;
  }
  v8 = objc_msgSend(v4, sel_localizedName_locale_, a1, v7);

  if (!v8)
    return 0;
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);

  return v9;
}

uint64_t type metadata accessor for _TimeZoneBridged()
{
  return objc_opt_self();
}

void protocol witness for _TimeZoneProtocol.init(secondsFromGMT:) in conformance _TimeZoneBridged()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for _TimeZoneProtocol.init(identifier:) in conformance _TimeZoneBridged()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id protocol witness for _TimeZoneProtocol.identifier.getter in conformance _TimeZoneBridged()
{
  uint64_t v0;
  id v1;
  id v2;

  v1 = objc_msgSend(*(id *)(v0 + 16), sel_name);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

id protocol witness for _TimeZoneProtocol.secondsFromGMT(for:) in conformance _TimeZoneBridged(double *a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  id v4;

  v2 = *(void **)(v1 + 16);
  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D68]), sel_initWithTimeIntervalSinceReferenceDate_, *a1);
  v4 = objc_msgSend(v2, sel_secondsFromGMTForDate_, v3);

  return v4;
}

double protocol witness for _TimeZoneProtocol.rawAndDaylightSavingTimeOffset(for:repeatedTimePolicy:skippedTimePolicy:) in conformance _TimeZoneBridged(double *a1)
{
  uint64_t v1;
  double v2;
  void *v3;
  id v4;
  id v5;
  double v6;
  double v7;

  v2 = *a1;
  v3 = *(void **)(v1 + 16);
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D68]), sel_initWithTimeIntervalSinceReferenceDate_, *a1);
  objc_msgSend(v3, sel_secondsFromGMTForDate_, v4);

  v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D68]), sel_initWithTimeIntervalSinceReferenceDate_, v2);
  objc_msgSend(v3, sel_daylightSavingTimeOffsetForDate_, v5);
  v7 = v6;

  return v7;
}

id protocol witness for _TimeZoneProtocol.abbreviation(for:) in conformance _TimeZoneBridged(double *a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  id v5;

  v2 = *(void **)(v1 + 16);
  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D68]), sel_initWithTimeIntervalSinceReferenceDate_, *a1);
  v4 = objc_msgSend(v2, sel_abbreviationForDate_, v3);

  if (!v4)
    return 0;
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);

  return v5;
}

id protocol witness for _TimeZoneProtocol.isDaylightSavingTime(for:) in conformance _TimeZoneBridged(double *a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  id v4;

  v2 = *(void **)(v1 + 16);
  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D68]), sel_initWithTimeIntervalSinceReferenceDate_, *a1);
  v4 = objc_msgSend(v2, sel_isDaylightSavingTimeForDate_, v3);

  return v4;
}

double protocol witness for _TimeZoneProtocol.daylightSavingTimeOffset(for:) in conformance _TimeZoneBridged(double *a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  double v4;
  double v5;

  v2 = *(void **)(v1 + 16);
  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D68]), sel_initWithTimeIntervalSinceReferenceDate_, *a1);
  objc_msgSend(v2, sel_daylightSavingTimeOffsetForDate_, v3);
  v5 = v4;

  return v5;
}

uint64_t protocol witness for _TimeZoneProtocol.bridgeToNSTimeZone() in conformance _TimeZoneBridged()
{
  uint64_t v0;
  uint64_t v2;

  objc_msgSend(*(id *)(v0 + 16), sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSTimeZone();
  swift_dynamicCast();
  return v2;
}

id protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _TimeZoneBridged()
{
  uint64_t v0;
  id v1;
  id v2;

  v1 = objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), sel_name);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

unint64_t instantiation function for generic protocol witness table for _TimeZoneBridged(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _TimeZoneBridged and conformance _TimeZoneBridged();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _TimeZoneBridged and conformance _TimeZoneBridged()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _TimeZoneBridged and conformance _TimeZoneBridged;
  if (!lazy protocol witness table cache variable for type _TimeZoneBridged and conformance _TimeZoneBridged)
  {
    v1 = type metadata accessor for _TimeZoneBridged();
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for _TimeZoneBridged, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TimeZoneBridged and conformance _TimeZoneBridged);
  }
  return result;
}

unint64_t type metadata accessor for NSTimeZone()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSTimeZone;
  if (!lazy cache variable for type metadata for NSTimeZone)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSTimeZone);
  }
  return result;
}

unint64_t BinaryInteger.numericStringRepresentation.getter()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char v4;
  uint64_t AssociatedConformanceWitness;
  unint64_t v6;
  uint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v1 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v3 = (char *)&v8 - v2;
  dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter();
  v4 = dispatch thunk of static BinaryInteger.isSigned.getter();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v6 = numericStringRepresentationForBinaryInteger<A>(words:isSigned:)((uint64_t)v3, v4 & 1, AssociatedTypeWitness, *(_QWORD *)(*(_QWORD *)(AssociatedConformanceWitness + 8) + 8));
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, AssociatedTypeWitness);
  return v6;
}

unint64_t numericStringRepresentationForBinaryInteger<A>(words:isSigned:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t isStackAllocationSafe;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x1E0C80C00];
  isStackAllocationSafe = dispatch thunk of Collection.count.getter();
  if (isStackAllocationSafe < 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v9 = isStackAllocationSafe;
  if ((unint64_t)(isStackAllocationSafe + 0x1000000000000000) >> 61)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
  }
  if (8 * isStackAllocationSafe <= 1024
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v11 = (_QWORD *)((char *)v17 - v10);
    v12 = specialized UnsafeMutableBufferPointer.initialize<A>(fromContentsOf:)(a1, (uint64_t)v17 - v10, v9, a3, a4);
    if ((v12 & 0x8000000000000000) == 0)
      return numericStringRepresentationForMutableBinaryInteger(words:isSigned:)(v11, v12, a2 & 1);
    __break(1u);
    goto LABEL_11;
  }
  v14 = (_QWORD *)swift_slowAlloc();
  v15 = specialized UnsafeMutableBufferPointer.initialize<A>(fromContentsOf:)(a1, (uint64_t)v14, v9, a3, a4);
  if (v15 < 0)
    goto LABEL_13;
  v16 = numericStringRepresentationForMutableBinaryInteger(words:isSigned:)(v14, v15, a2 & 1);
  MEMORY[0x186DA9E78](v14, -1, -1);
  return v16;
}

unint64_t numericStringRepresentationForMutableBinaryInteger(words:isSigned:)(_QWORD *a1, uint64_t a2, char a3)
{
  unsigned int v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t isStackAllocationSafe;
  int64_t v11;
  uint64_t v12;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD v17[3];

  v3 = 0;
  v17[2] = *MEMORY[0x1E0C80C00];
  v17[0] = a1;
  v17[1] = a2;
  if ((a3 & 1) != 0 && a2)
  {
    if ((a1[a2 - 1] & 0x8000000000000000) != 0)
    {
      if (a2 < 0)
        goto LABEL_23;
      v4 = 1;
      v5 = a2;
      do
      {
        v6 = v4 & 1;
        v7 = ~*a1;
        v8 = __CFADD__(v7, v6);
        v9 = v7 + v6;
        v4 = v8;
        *a1++ = v9;
        --v5;
      }
      while (v5);
      v3 = 1;
    }
    else
    {
      v3 = 0;
    }
  }
  if ((unint64_t)(a2 - 0x200000000000000) >> 58 != 63)
  {
    __break(1u);
    goto LABEL_21;
  }
  isStackAllocationSafe = maxDecimalDigitCountForUnsignedInteger(bitWidth:)(a2 << 6);
  v11 = isStackAllocationSafe + v3;
  if (__OFADD__(isStackAllocationSafe, v3))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v11 < 0)
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
  }
  if (v11 <= 1024 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    closure #1 in numericStringRepresentationForMutableBinaryInteger(words:isSigned:)((unint64_t)&v15 - v12, v11, (uint64_t)v17, v3, &v16);
    return v16;
  }
  else
  {
    v14 = swift_slowAlloc();
    closure #1 in numericStringRepresentationForMutableBinaryInteger(words:isSigned:)(v14, v11, (uint64_t)v17, v3, &v16);
    MEMORY[0x186DA9E78](v14, -1, -1);
    return v16;
  }
}

uint64_t maxDecimalDigitCountForUnsignedInteger(bitWidth:)(uint64_t a1)
{
  double v1;
  char v2;
  double v3;
  uint64_t result;

  if (a1 < 0)
    goto LABEL_13;
  v1 = COERCE_DOUBLE(specialized Double.init<A>(exactly:)(a1));
  if ((v2 & 1) != 0)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v3 = v1 * 0.301029996;
  if ((~COERCE__INT64(v1 * 0.301029996) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v3 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v3 >= 9.22337204e18)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  result = (uint64_t)v3 + 1;
  if (__OFADD__((uint64_t)v3, 1))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  return result;
}

unint64_t closure #1 in numericStringRepresentationForMutableBinaryInteger(words:isSigned:)@<X0>(unint64_t __b@<X0>, int64_t __len@<X2>, uint64_t a3@<X3>, char a4@<W4>, unint64_t *a5@<X8>)
{
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v8 = __b;
  if (__b && __len)
  {
    if (__len < 1)
      goto LABEL_31;
    memset((void *)__b, 48, __len);
  }
  __b = formQuotientWithRemainderForUnsignedInteger(words:dividingBy:)(*(_QWORD *)a3, *(_QWORD *)(a3 + 8), 0x8AC7230489E80000);
  v11 = *(_QWORD *)(a3 + 8);
  if ((v11 & 0x8000000000000000) == 0)
  {
    v12 = __len;
    do
    {
      if (v11 && !*(_QWORD *)(*(_QWORD *)a3 + 8 * (v11 - 1)))
      {
        if (v11 == 1)
        {
          v11 = 0;
        }
        else
        {
          v13 = v11;
          while (!*(_QWORD *)(*(_QWORD *)a3 - 16 + 8 * v13))
          {
            if (--v13 == 1)
            {
              v14 = 0;
              goto LABEL_16;
            }
          }
          v14 = v13 - 1;
LABEL_16:
          v15 = v11 < v14;
          v11 = v14;
          if (v15)
          {
LABEL_29:
            __break(1u);
LABEL_30:
            __break(1u);
LABEL_31:
            __break(1u);
LABEL_32:
            __break(1u);
            return __b;
          }
        }
      }
      *(_QWORD *)(a3 + 8) = v11;
      v16 = v12;
      do
      {
        v10 = v16 - 1;
        if (v16 < 1)
        {
          __break(1u);
          goto LABEL_29;
        }
        *(_BYTE *)(v8 - 1 + v16--) = (__b % 0xA) | 0x30;
        v15 = __b > 9;
        __b /= 0xAuLL;
      }
      while (v15);
      if (!v11)
        goto LABEL_23;
      v12 -= 19;
      __b = formQuotientWithRemainderForUnsignedInteger(words:dividingBy:)(*(_QWORD *)a3, *(_QWORD *)(a3 + 8), 0x8AC7230489E80000);
      v11 = *(_QWORD *)(a3 + 8);
    }
    while ((v11 & 0x8000000000000000) == 0);
  }
  __break(1u);
LABEL_23:
  if ((a4 & 1) != 0)
  {
    if (!v10)
      goto LABEL_32;
    v17 = v8 + v10--;
    *(_BYTE *)(v17 - 1) = 45;
  }
  __b = __len - v10;
  if (__len < v10)
    goto LABEL_30;
  MEMORY[0x1E0C80A78](__b);
  __b = String.init(unsafeUninitializedCapacity:initializingUTF8With:)();
  *a5 = __b;
  a5[1] = v18;
  return __b;
}

uint64_t formQuotientWithRemainderForUnsignedInteger(words:dividingBy:)(uint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!a2)
    return a2;
  if (a3)
  {
    v4 = a2;
    a2 = 0;
    v5 = result - 8;
    while (1)
    {
      v6 = v4 - 1;
      if (v4 < 1)
        break;
      if (a2 >= a3)
        goto LABEL_9;
      v7 = 8 * v4;
      v8 = *(_QWORD *)(v5 + 8 * v4);
      result = __udivti3();
      a2 = v8 - result * a3;
      *(_QWORD *)(v5 + v7) = result;
      v4 = v6;
      if (!v6)
        return a2;
    }
    __break(1u);
LABEL_9:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t closure #2 in closure #1 in numericStringRepresentationForMutableBinaryInteger(words:isSigned:)(char *a1, int64_t a2, char *__src, int64_t __n)
{
  uint64_t result;

  if (!__src || !__n)
    return __n;
  if (a2 < __n)
  {
    __break(1u);
  }
  else
  {
    if (!a1)
      return __n;
    if ((__n & 0x8000000000000000) == 0 && (&a1[__n] <= __src || &__src[__n] <= a1))
    {
      memcpy(a1, __src, __n);
      return __n;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t partial apply for closure #2 in closure #1 in numericStringRepresentationForMutableBinaryInteger(words:isSigned:)(char *a1, int64_t a2)
{
  uint64_t v2;

  return closure #2 in closure #1 in numericStringRepresentationForMutableBinaryInteger(words:isSigned:)(a1, a2, *(char **)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t specialized static Comparable.>= infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  char v6;
  uint64_t result;

  if (a3 || a6)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (a1 == a4 && a2 == a5)
      v6 = 1;
    else
      v6 = _stringCompareWithSmolCheck(_:_:expecting:)() ^ 1;
    return v6 & 1;
  }
  return result;
}

BOOL specialized static Comparable.>= infix(_:_:)(double a1, double a2, double a3, double a4)
{
  _BOOL4 v4;

  v4 = a1 < a3;
  if (a3 >= a1 && a3 <= a1)
    v4 = a2 < a4;
  return !v4;
}

uint64_t specialized static Comparable.<= infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  char v6;
  uint64_t result;

  if (a6 || a3)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (a4 == a1 && a5 == a2)
      v6 = 1;
    else
      v6 = _stringCompareWithSmolCheck(_:_:expecting:)() ^ 1;
    return v6 & 1;
  }
  return result;
}

BOOL specialized static Comparable.<= infix(_:_:)(double a1, double a2, double a3, double a4)
{
  _BOOL4 v4;

  v4 = a3 < a1;
  if (a1 >= a3 && a1 <= a3)
    v4 = a4 < a2;
  return !v4;
}

BOOL specialized static Comparable.<= infix(_:_:)(unint64_t a1, unint64_t a2)
{
  return a2 >= a1;
}

uint64_t specialized __PlistEncoderXML.wrapGeneric<A, B>(_:for:_:)@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, unint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  uint64_t v9;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, unint64_t);
  unint64_t v27;
  char v28;
  char v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void (*v40)(char *, unint64_t, unint64_t);
  char v41;
  unsigned __int8 v42;
  char v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;

  v53 = a8;
  v54 = a5;
  LODWORD(v55) = a6;
  v58 = a9;
  v15 = *(_QWORD *)(a7 - 8);
  MEMORY[0x1E0C80A78](a1);
  v17 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (swift_dynamicCastMetatype())
  {
    v18 = v17;
    v56 = a7;
    v57 = v17;
    v19 = a1;
    v20 = *(_QWORD *)(v9 + 56);
    v21 = *(_QWORD *)(v9 + 64);
    v23 = *(_QWORD *)(v9 + 80);
    v22 = *(_QWORD *)(v9 + 88);
    v25 = *(_QWORD *)(v9 + 104);
    v24 = *(_QWORD *)(v9 + 112);
    v26 = *(void (**)(char *, unint64_t, unint64_t))(v15 + 16);
    v27 = a7;
    v28 = *(_BYTE *)(v9 + 72);
    v29 = *(_BYTE *)(v9 + 96);
    v30 = *(_BYTE *)(v9 + 120);
    v26(v18, v19, v27);
    outlined copy of _XMLPlistEncodingFormat.Reference(v20, v21, v28);
    outlined copy of _XMLPlistEncodingFormat.Reference(v23, v22, v29);
    outlined copy of _XMLPlistEncodingFormat.Reference(v25, v24, v30);
    swift_dynamicCast();
    v31 = v28;
    v32 = v59;
    outlined consume of _XMLPlistEncodingFormat.Reference(v20, v21, v31);
    outlined consume of _XMLPlistEncodingFormat.Reference(v23, v22, v29);
    result = outlined consume of _XMLPlistEncodingFormat.Reference(v25, v24, v30);
    v34 = 0;
    v35 = 4;
  }
  else
  {
    v49 = a2;
    v50 = a3;
    v51 = a4;
    v52 = a1;
    if (!swift_dynamicCastMetatype())
    {
      MEMORY[0x1E0C80A78](0);
      v47 = v53;
      v46 = v54;
      *(&v49 - 4) = a7;
      *(&v49 - 3) = v47;
      v48 = v51;
      *(&v49 - 2) = v52;
      return specialized __PlistEncoderXML._wrapGeneric<A>(_:for:_:)((void (*)(_QWORD *))partial apply for specialized closure #1 in __PlistEncoderXML.wrapGeneric<A, B>(_:for:_:), v49, v50, v48, v46, v55, (uint64_t)v58);
    }
    v37 = *(_QWORD *)(v9 + 56);
    v36 = *(_QWORD *)(v9 + 64);
    v38 = *(_QWORD *)(v9 + 80);
    v39 = *(_QWORD *)(v9 + 88);
    v53 = *(_QWORD *)(v9 + 104);
    v55 = *(_QWORD *)(v9 + 112);
    v40 = *(void (**)(char *, unint64_t, unint64_t))(v15 + 16);
    v41 = *(_BYTE *)(v9 + 72);
    v42 = *(_BYTE *)(v9 + 96);
    LODWORD(v54) = v42;
    v43 = *(_BYTE *)(v9 + 120);
    v40(v17, v52, a7);
    outlined copy of _XMLPlistEncodingFormat.Reference(v37, v36, v41);
    outlined copy of _XMLPlistEncodingFormat.Reference(v38, v39, v42);
    v44 = v53;
    outlined copy of _XMLPlistEncodingFormat.Reference(v53, v55, v43);
    swift_dynamicCast();
    v32 = v59;
    v34 = v60;
    outlined consume of _XMLPlistEncodingFormat.Reference(v37, v36, v41);
    outlined consume of _XMLPlistEncodingFormat.Reference(v38, v39, v54);
    result = outlined consume of _XMLPlistEncodingFormat.Reference(v44, v55, v43);
    v35 = 5;
  }
  v45 = v58;
  *v58 = v32;
  v45[1] = v34;
  *((_BYTE *)v45 + 16) = v35;
  return result;
}

uint64_t __PlistEncoderXML.wrapGeneric<A, B>(_:for:_:)@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, unint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v8;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void (*v25)(char *, unint64_t, unint64_t);
  unint64_t v26;
  char v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void (*v40)(char *, unint64_t, unint64_t);
  char v41;
  unsigned __int8 v42;
  char v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;

  v53 = a7;
  v54 = a8;
  v50 = a6;
  v14 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (swift_dynamicCastMetatype())
  {
    v17 = v16;
    v51 = a4;
    v52 = v16;
    v18 = a1;
    v19 = *(_QWORD *)(v8 + 56);
    v20 = *(_QWORD *)(v8 + 64);
    v22 = *(_QWORD *)(v8 + 80);
    v21 = *(_QWORD *)(v8 + 88);
    v24 = *(_QWORD *)(v8 + 104);
    v23 = *(_QWORD *)(v8 + 112);
    v25 = *(void (**)(char *, unint64_t, unint64_t))(v14 + 16);
    v26 = a4;
    v27 = *(_BYTE *)(v8 + 72);
    v28 = *(_BYTE *)(v8 + 96);
    v29 = *(_BYTE *)(v8 + 120);
    v25(v17, v18, v26);
    outlined copy of _XMLPlistEncodingFormat.Reference(v19, v20, v27);
    outlined copy of _XMLPlistEncodingFormat.Reference(v22, v21, v28);
    outlined copy of _XMLPlistEncodingFormat.Reference(v24, v23, v29);
    swift_dynamicCast();
    v30 = v27;
    v31 = v55;
    outlined consume of _XMLPlistEncodingFormat.Reference(v19, v20, v30);
    outlined consume of _XMLPlistEncodingFormat.Reference(v22, v21, v28);
    result = outlined consume of _XMLPlistEncodingFormat.Reference(v24, v23, v29);
    v33 = 0;
    v34 = 4;
  }
  else
  {
    v47 = a2;
    v48 = a3;
    v35 = v53;
    v49 = a1;
    if (!swift_dynamicCastMetatype())
    {
      MEMORY[0x1E0C80A78](0);
      *(&v47 - 6) = a4;
      *(&v47 - 5) = a5;
      *(&v47 - 4) = v50;
      *(&v47 - 3) = v35;
      v46 = v48;
      *(&v47 - 2) = v49;
      return __PlistEncoderXML._wrapGeneric<A>(_:for:_:)((void (*)(_QWORD *))partial apply for closure #1 in __PlistEncoderXML.wrapGeneric<A, B>(_:for:_:), (uint64_t)(&v47 - 8), v47, v46, a5, v35, v54);
    }
    v37 = *(_QWORD *)(v8 + 56);
    v36 = *(_QWORD *)(v8 + 64);
    v38 = *(_QWORD *)(v8 + 80);
    v39 = *(_QWORD *)(v8 + 88);
    v48 = *(_QWORD *)(v8 + 104);
    v53 = *(_QWORD *)(v8 + 112);
    v40 = *(void (**)(char *, unint64_t, unint64_t))(v14 + 16);
    v41 = *(_BYTE *)(v8 + 72);
    v42 = *(_BYTE *)(v8 + 96);
    LODWORD(v50) = v42;
    v43 = *(_BYTE *)(v8 + 120);
    v40(v16, v49, a4);
    outlined copy of _XMLPlistEncodingFormat.Reference(v37, v36, v41);
    outlined copy of _XMLPlistEncodingFormat.Reference(v38, v39, v42);
    v44 = v48;
    outlined copy of _XMLPlistEncodingFormat.Reference(v48, v53, v43);
    swift_dynamicCast();
    v31 = v55;
    v33 = v56;
    outlined consume of _XMLPlistEncodingFormat.Reference(v37, v36, v41);
    outlined consume of _XMLPlistEncodingFormat.Reference(v38, v39, v50);
    result = outlined consume of _XMLPlistEncodingFormat.Reference(v44, v53, v43);
    v34 = 5;
  }
  v45 = v54;
  *v54 = v31;
  v45[1] = v33;
  *((_BYTE *)v45 + 16) = v34;
  return result;
}

void specialized String.withUTF8<A>(_:)(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  v3 = *a1;
  v4 = a1[1];
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v6 = HIBYTE(v4) & 0xF;
    v10[0] = v3;
    v10[1] = v4 & 0xFFFFFFFFFFFFFFLL;
    v5 = (char *)v10;
    goto LABEL_7;
  }
  v3 = static String._copying(_:)();
  v9 = v8;
  swift_bridgeObjectRelease();
  *a1 = v3;
  a1[1] = v9;
  v4 = v9;
  if ((v9 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v3 & 0x1000000000000000) != 0)
  {
    v5 = (char *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v6 = v3 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v5 = (char *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  closure #1 in _XMLPlistEncodingFormat.Writer.appendEscaped(_:)(v5, v6, a2);
}

uint64_t __PlistEncoderXML.container<A>(keyedBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = v3 + 2;
  result = (*(uint64_t (**)(void))(*v3 + 240))();
  if ((result & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _XMLPlistEncodingFormat.Reference.Box<[_XMLPlistEncodingFormat.Reference : _XMLPlistEncodingFormat.Reference]>);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = MEMORY[0x1E0DEE9E0];
    v9 = *v6;
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v6 = v9;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v9 + 16) + 1, 1);
      v9 = *v6;
    }
    v13 = *(_QWORD *)(v9 + 16);
    v12 = *(_QWORD *)(v9 + 24);
    if (v13 >= v12 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
      v9 = *v6;
    }
    *(_QWORD *)(v9 + 16) = v13 + 1;
    v14 = v9 + 24 * v13;
    *(_QWORD *)(v14 + 32) = v8;
    *(_QWORD *)(v14 + 40) = 0;
    *(_BYTE *)(v14 + 48) = 7;
    *v6 = v9;
    goto LABEL_10;
  }
  v15 = *(_QWORD *)(*v6 + 16);
  if (v15)
  {
    if (*(_BYTE *)(*v6 + 24 * v15 + 24) == 7)
    {
      swift_retain();
LABEL_10:
      v16 = type metadata accessor for _PlistKeyedEncodingContainerXML(0, a2, a3, v11);
      swift_retain();
      swift_retain();
      MEMORY[0x186DA9D64](&protocol conformance descriptor for _PlistKeyedEncodingContainerXML<A>, v16);
      return KeyedEncodingContainer.init<A>(_:)();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t __PlistEncoderXML.unkeyedContainer()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = v1;
  v4 = v1 + 2;
  result = (*(uint64_t (**)(void))(*v1 + 240))();
  if ((result & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _XMLPlistEncodingFormat.Reference.Box<ContiguousArray<_XMLPlistEncodingFormat.Reference>>);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = MEMORY[0x1E0DEE9D8];
    v7 = *v4;
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v4 = v7;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v7 + 16) + 1, 1);
      v7 = *v4;
    }
    v10 = *(_QWORD *)(v7 + 16);
    v9 = *(_QWORD *)(v7 + 24);
    if (v10 >= v9 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
      v7 = *v4;
    }
    v11 = 0;
    *(_QWORD *)(v7 + 16) = v10 + 1;
    v12 = v7 + 24 * v10;
    *(_QWORD *)(v12 + 32) = v6;
    *(_QWORD *)(v12 + 40) = 0;
    *(_BYTE *)(v12 + 48) = 6;
    *v4 = v7;
    goto LABEL_10;
  }
  v13 = *(_QWORD *)(*v4 + 16);
  if (v13)
  {
    v14 = *v4 + 24 * v13;
    if (*(_BYTE *)(v14 + 24) == 6)
    {
      v6 = *(_QWORD *)(v14 + 8);
      v11 = *(_QWORD *)(v14 + 16);
      swift_retain();
LABEL_10:
      v15 = v2[5];
      a1[3] = (uint64_t)&unk_1E0F28EF0;
      a1[4] = lazy protocol witness table accessor for type _PlistUnkeyedEncodingContainerXML and conformance _PlistUnkeyedEncodingContainerXML();
      v16 = swift_allocObject();
      *a1 = v16;
      *(_QWORD *)(v16 + 16) = v2;
      *(_QWORD *)(v16 + 24) = v6;
      *(_QWORD *)(v16 + 32) = v11;
      *(_BYTE *)(v16 + 40) = 6;
      *(_QWORD *)(v16 + 48) = v15;
      swift_retain();
      return swift_retain();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t __PlistEncoderXML.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  char v6;

  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 112);
  v5 = *(_BYTE *)(v0 + 96);
  v6 = *(_BYTE *)(v0 + 120);
  outlined consume of _XMLPlistEncodingFormat.Reference(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_BYTE *)(v0 + 72));
  outlined consume of _XMLPlistEncodingFormat.Reference(v1, v2, v5);
  outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, v6);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __PlistEncoderXML()
{
  return objc_opt_self();
}

uint64_t protocol witness for Encoder.container<A>(keyedBy:) in conformance __PlistEncoderXML(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __PlistEncoderXML.container<A>(keyedBy:)(a1, a2, a3);
}

uint64_t protocol witness for Encoder.unkeyedContainer() in conformance __PlistEncoderXML@<X0>(uint64_t *a1@<X8>)
{
  return __PlistEncoderXML.unkeyedContainer()(a1);
}

uint64_t protocol witness for Encoder.singleValueContainer() in conformance __PlistEncoderXML@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  a1[3] = type metadata accessor for __PlistEncoderXML();
  a1[4] = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged(&lazy protocol witness table cache variable for type __PlistEncoderXML and conformance __PlistEncoderXML, v4, (uint64_t (*)(uint64_t))type metadata accessor for __PlistEncoderXML, (uint64_t)&protocol conformance descriptor for __PlistEncoderXML);
  *a1 = v3;
  return swift_retain();
}

uint64_t _PlistKeyedEncodingContainerXML.codingPath.getter()
{
  uint64_t v0;

  return _CodingPathNode.path.getter(*(_QWORD *)(v0 + 32));
}

uint64_t _PlistKeyedEncodingContainerXML.encodeNil(forKey:)()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  int64_t v41;
  unint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t result;
  unint64_t v46;
  char v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int64_t v53;
  uint64_t v54;
  uint64_t v55;

  v2 = *(_QWORD *)(v0 + 8);
  v1 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 64);
  v5 = *(_BYTE *)(*(_QWORD *)v0 + 72);
  v6 = *(unsigned __int8 *)(v0 + 24);
  outlined copy of _XMLPlistEncodingFormat.Reference(v2, v1, *(_BYTE *)(v0 + 24));
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, v5);
  v7 = dispatch thunk of CodingKey.stringValue.getter();
  if (v6 != 7)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v9 = v7;
  v10 = v8;
  outlined copy of _XMLPlistEncodingFormat.Reference(v2, v1, 7);
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, v5);
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v55 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0x8000000000000000;
  v54 = v9;
  v13 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v10, 0);
  v14 = *(_QWORD *)(v55 + 16);
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    if (*(_QWORD *)(v55 + 24) < v16)
    {
      v17 = v12;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, isUniquelyReferenced_nonNull_native);
      v18 = v55;
      v19 = specialized __RawDictionaryStorage.find<A>(_:)(v54, v10, 0);
      if ((v17 & 1) != (v20 & 1))
        goto LABEL_51;
      v13 = v19;
      if ((v17 & 1) == 0)
        goto LABEL_46;
LABEL_9:
      v21 = *(_QWORD *)(v18 + 56) + 24 * v13;
      outlined consume of _XMLPlistEncodingFormat.Reference(*(_QWORD *)v21, *(_QWORD *)(v21 + 8), *(_BYTE *)(v21 + 16));
      *(_QWORD *)v21 = v3;
      *(_QWORD *)(v21 + 8) = v4;
      *(_BYTE *)(v21 + 16) = v5;
LABEL_47:
      *(_QWORD *)(v2 + 16) = v18;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v2, v1, 7);
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, v5);
      return outlined consume of _XMLPlistEncodingFormat.Reference(v2, v1, 7);
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v18 = v55;
      if ((v12 & 1) != 0)
        goto LABEL_9;
LABEL_46:
      specialized _NativeDictionary._insert(at:key:value:)(v13, v54, v10, 0, v3, v4, v5, (_QWORD *)v18);
      swift_bridgeObjectRetain();
      goto LABEL_47;
    }
  }
  v46 = v13;
  v47 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  v22 = static _DictionaryStorage.copy(original:)();
  v18 = v22;
  if (!*(_QWORD *)(v55 + 16))
  {
LABEL_45:
    swift_bridgeObjectRelease();
    v13 = v46;
    if ((v47 & 1) != 0)
      goto LABEL_9;
    goto LABEL_46;
  }
  v23 = (char *)(v22 + 64);
  v24 = (char *)(v55 + 64);
  v25 = (unint64_t)((1 << *(_BYTE *)(v18 + 32)) + 63) >> 6;
  v48 = v55 + 64;
  if (v18 != v55 || v23 >= &v24[8 * v25])
    memmove(v23, v24, 8 * v25);
  v26 = 0;
  *(_QWORD *)(v18 + 16) = *(_QWORD *)(v55 + 16);
  v27 = 1 << *(_BYTE *)(v55 + 32);
  v28 = -1;
  if (v27 < 64)
    v28 = ~(-1 << v27);
  v29 = v28 & *(_QWORD *)(v55 + 64);
  v49 = (unint64_t)(v27 + 63) >> 6;
  while (1)
  {
    if (v29)
    {
      v52 = (v29 - 1) & v29;
      v53 = v26;
      v30 = __clz(__rbit64(v29)) | (v26 << 6);
      goto LABEL_19;
    }
    v41 = v26 + 1;
    if (__OFADD__(v26, 1))
    {
      __break(1u);
      goto LABEL_49;
    }
    if (v41 >= v49)
      goto LABEL_45;
    v42 = *(_QWORD *)(v48 + 8 * v41);
    v43 = v26 + 1;
    if (!v42)
    {
      v43 = v26 + 2;
      if (v26 + 2 >= v49)
        goto LABEL_45;
      v42 = *(_QWORD *)(v48 + 8 * v43);
      if (!v42)
      {
        v43 = v26 + 3;
        if (v26 + 3 >= v49)
          goto LABEL_45;
        v42 = *(_QWORD *)(v48 + 8 * v43);
        if (!v42)
        {
          v43 = v26 + 4;
          if (v26 + 4 >= v49)
            goto LABEL_45;
          v42 = *(_QWORD *)(v48 + 8 * v43);
          if (!v42)
          {
            v43 = v26 + 5;
            if (v26 + 5 >= v49)
              goto LABEL_45;
            v42 = *(_QWORD *)(v48 + 8 * v43);
            if (!v42)
            {
              v43 = v26 + 6;
              if (v26 + 6 >= v49)
                goto LABEL_45;
              v42 = *(_QWORD *)(v48 + 8 * v43);
              if (!v42)
              {
                v43 = v26 + 7;
                if (v26 + 7 >= v49)
                  goto LABEL_45;
                v42 = *(_QWORD *)(v48 + 8 * v43);
                if (!v42)
                {
                  v43 = v26 + 8;
                  if (v26 + 8 >= v49)
                    goto LABEL_45;
                  v42 = *(_QWORD *)(v48 + 8 * v43);
                  if (!v42)
                    break;
                }
              }
            }
          }
        }
      }
    }
LABEL_44:
    v52 = (v42 - 1) & v42;
    v53 = v43;
    v30 = __clz(__rbit64(v42)) + (v43 << 6);
LABEL_19:
    v31 = 24 * v30;
    v32 = *(_QWORD *)(v55 + 48) + v31;
    v33 = *(_QWORD *)v32;
    v34 = *(_QWORD *)(v32 + 8);
    v35 = *(_QWORD *)(v55 + 56) + v31;
    v50 = *(_QWORD *)v35;
    v36 = *(_QWORD *)v35;
    v51 = *(_QWORD *)(v35 + 8);
    v37 = *(_QWORD *)(v18 + 48) + v31;
    v38 = *(_BYTE *)(v32 + 16);
    v39 = *(_BYTE *)(v35 + 16);
    *(_QWORD *)v37 = *(_QWORD *)v32;
    *(_QWORD *)(v37 + 8) = v34;
    *(_BYTE *)(v37 + 16) = v38;
    v40 = *(_QWORD *)(v18 + 56) + v31;
    *(_QWORD *)v40 = v36;
    *(_QWORD *)(v40 + 8) = v51;
    *(_BYTE *)(v40 + 16) = v39;
    outlined copy of _XMLPlistEncodingFormat.Reference(v33, v34, v38);
    outlined copy of _XMLPlistEncodingFormat.Reference(v50, v51, v39);
    v29 = v52;
    v26 = v53;
  }
  v44 = v26 + 9;
  if (v26 + 9 >= v49)
    goto LABEL_45;
  v42 = *(_QWORD *)(v48 + 8 * v44);
  if (v42)
  {
    v43 = v26 + 9;
    goto LABEL_44;
  }
  while (1)
  {
    v43 = v44 + 1;
    if (__OFADD__(v44, 1))
      break;
    if (v43 >= v49)
      goto LABEL_45;
    v42 = *(_QWORD *)(v48 + 8 * v43);
    ++v44;
    if (v42)
      goto LABEL_44;
  }
LABEL_50:
  __break(1u);
LABEL_51:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t _PlistKeyedEncodingContainerXML.encode(_:forKey:)(char a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t result;
  unint64_t v50;
  char v51;
  uint64_t v52;
  int64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;

  v3 = *(_QWORD *)(v1 + 8);
  v2 = *(_QWORD *)(v1 + 16);
  v4 = (uint64_t *)(*(_QWORD *)v1 + 80);
  v5 = (char *)(*(_QWORD *)v1 + 120);
  if ((a1 & 1) == 0)
    v4 = (uint64_t *)(*(_QWORD *)v1 + 104);
  v6 = *v4;
  if ((a1 & 1) != 0)
    v7 = (unint64_t *)(*(_QWORD *)v1 + 88);
  else
    v7 = (unint64_t *)(*(_QWORD *)v1 + 112);
  v8 = *v7;
  if ((a1 & 1) != 0)
    v5 = (char *)(*(_QWORD *)v1 + 96);
  v9 = *v5;
  v10 = *(unsigned __int8 *)(v1 + 24);
  outlined copy of _XMLPlistEncodingFormat.Reference(*(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24));
  outlined copy of _XMLPlistEncodingFormat.Reference(v6, v8, v9);
  v11 = dispatch thunk of CodingKey.stringValue.getter();
  if (v10 != 7)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  v13 = v11;
  v14 = v12;
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v2, 7);
  outlined copy of _XMLPlistEncodingFormat.Reference(v6, v8, v9);
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v59 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = 0x8000000000000000;
  v58 = v13;
  v17 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v14, 0);
  v18 = *(_QWORD *)(v59 + 16);
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
  }
  else
  {
    if (*(_QWORD *)(v59 + 24) < v20)
    {
      v21 = v16;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v20, isUniquelyReferenced_nonNull_native);
      v22 = v59;
      v23 = specialized __RawDictionaryStorage.find<A>(_:)(v58, v14, 0);
      if ((v21 & 1) != (v24 & 1))
        goto LABEL_58;
      v17 = v23;
      if ((v21 & 1) == 0)
        goto LABEL_53;
LABEL_16:
      v25 = *(_QWORD *)(v22 + 56) + 24 * v17;
      outlined consume of _XMLPlistEncodingFormat.Reference(*(_QWORD *)v25, *(_QWORD *)(v25 + 8), *(_BYTE *)(v25 + 16));
      *(_QWORD *)v25 = v6;
      *(_QWORD *)(v25 + 8) = v8;
      *(_BYTE *)(v25 + 16) = v9;
LABEL_54:
      *(_QWORD *)(v3 + 16) = v22;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v3, v2, 7);
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v6, v8, v9);
      return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v2, 7);
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v22 = v59;
      if ((v16 & 1) != 0)
        goto LABEL_16;
LABEL_53:
      specialized _NativeDictionary._insert(at:key:value:)(v17, v58, v14, 0, v6, v8, v9, (_QWORD *)v22);
      swift_bridgeObjectRetain();
      goto LABEL_54;
    }
  }
  v50 = v17;
  v51 = v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  v26 = static _DictionaryStorage.copy(original:)();
  v22 = v26;
  if (!*(_QWORD *)(v59 + 16))
  {
LABEL_52:
    swift_bridgeObjectRelease();
    v17 = v50;
    if ((v51 & 1) != 0)
      goto LABEL_16;
    goto LABEL_53;
  }
  v27 = (char *)(v26 + 64);
  v28 = (char *)(v59 + 64);
  v29 = (unint64_t)((1 << *(_BYTE *)(v22 + 32)) + 63) >> 6;
  v52 = v59 + 64;
  if (v22 != v59 || v27 >= &v28[8 * v29])
    memmove(v27, v28, 8 * v29);
  v30 = 0;
  *(_QWORD *)(v22 + 16) = *(_QWORD *)(v59 + 16);
  v31 = 1 << *(_BYTE *)(v59 + 32);
  v32 = -1;
  if (v31 < 64)
    v32 = ~(-1 << v31);
  v33 = v32 & *(_QWORD *)(v59 + 64);
  v53 = (unint64_t)(v31 + 63) >> 6;
  while (1)
  {
    if (v33)
    {
      v56 = (v33 - 1) & v33;
      v57 = v30;
      v34 = __clz(__rbit64(v33)) | (v30 << 6);
      goto LABEL_26;
    }
    v45 = v30 + 1;
    if (__OFADD__(v30, 1))
    {
      __break(1u);
      goto LABEL_56;
    }
    if (v45 >= v53)
      goto LABEL_52;
    v46 = *(_QWORD *)(v52 + 8 * v45);
    v47 = v30 + 1;
    if (!v46)
    {
      v47 = v30 + 2;
      if (v30 + 2 >= v53)
        goto LABEL_52;
      v46 = *(_QWORD *)(v52 + 8 * v47);
      if (!v46)
      {
        v47 = v30 + 3;
        if (v30 + 3 >= v53)
          goto LABEL_52;
        v46 = *(_QWORD *)(v52 + 8 * v47);
        if (!v46)
        {
          v47 = v30 + 4;
          if (v30 + 4 >= v53)
            goto LABEL_52;
          v46 = *(_QWORD *)(v52 + 8 * v47);
          if (!v46)
          {
            v47 = v30 + 5;
            if (v30 + 5 >= v53)
              goto LABEL_52;
            v46 = *(_QWORD *)(v52 + 8 * v47);
            if (!v46)
            {
              v47 = v30 + 6;
              if (v30 + 6 >= v53)
                goto LABEL_52;
              v46 = *(_QWORD *)(v52 + 8 * v47);
              if (!v46)
              {
                v47 = v30 + 7;
                if (v30 + 7 >= v53)
                  goto LABEL_52;
                v46 = *(_QWORD *)(v52 + 8 * v47);
                if (!v46)
                {
                  v47 = v30 + 8;
                  if (v30 + 8 >= v53)
                    goto LABEL_52;
                  v46 = *(_QWORD *)(v52 + 8 * v47);
                  if (!v46)
                    break;
                }
              }
            }
          }
        }
      }
    }
LABEL_51:
    v56 = (v46 - 1) & v46;
    v57 = v47;
    v34 = __clz(__rbit64(v46)) + (v47 << 6);
LABEL_26:
    v35 = 24 * v34;
    v36 = *(_QWORD *)(v59 + 48) + v35;
    v37 = *(_QWORD *)v36;
    v38 = *(_QWORD *)(v36 + 8);
    v39 = *(_QWORD *)(v59 + 56) + v35;
    v54 = *(_QWORD *)v39;
    v40 = *(_QWORD *)v39;
    v55 = *(_QWORD *)(v39 + 8);
    v41 = *(_QWORD *)(v22 + 48) + v35;
    v42 = *(_BYTE *)(v36 + 16);
    v43 = *(_BYTE *)(v39 + 16);
    *(_QWORD *)v41 = *(_QWORD *)v36;
    *(_QWORD *)(v41 + 8) = v38;
    *(_BYTE *)(v41 + 16) = v42;
    v44 = *(_QWORD *)(v22 + 56) + v35;
    *(_QWORD *)v44 = v40;
    *(_QWORD *)(v44 + 8) = v55;
    *(_BYTE *)(v44 + 16) = v43;
    outlined copy of _XMLPlistEncodingFormat.Reference(v37, v38, v42);
    outlined copy of _XMLPlistEncodingFormat.Reference(v54, v55, v43);
    v33 = v56;
    v30 = v57;
  }
  v48 = v30 + 9;
  if (v30 + 9 >= v53)
    goto LABEL_52;
  v46 = *(_QWORD *)(v52 + 8 * v48);
  if (v46)
  {
    v47 = v30 + 9;
    goto LABEL_51;
  }
  while (1)
  {
    v47 = v48 + 1;
    if (__OFADD__(v48, 1))
      break;
    if (v47 >= v53)
      goto LABEL_52;
    v46 = *(_QWORD *)(v52 + 8 * v47);
    ++v48;
    if (v46)
      goto LABEL_51;
  }
LABEL_57:
  __break(1u);
LABEL_58:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  char v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v51;

  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(unsigned __int8 *)(v1 + 24);
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, *(_BYTE *)(v1 + 24));
  v6 = dispatch thunk of CodingKey.stringValue.getter();
  if (v5 != 7)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v8 = v6;
  v9 = v7;
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v51 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = 0x8000000000000000;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
  v13 = *(_QWORD *)(v51 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v2 = v11;
    if (*(_QWORD *)(v51 + 24) < v15)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, isUniquelyReferenced_nonNull_native);
      v16 = v51;
      v17 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
      if ((v2 & 1) != (v18 & 1))
        goto LABEL_51;
      v12 = v17;
      goto LABEL_8;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v16 = v51;
LABEL_8:
      if ((v2 & 1) != 0)
      {
        v19 = *(_QWORD *)(v16 + 56) + 24 * v12;
        outlined consume of _XMLPlistEncodingFormat.Reference(*(_QWORD *)v19, *(_QWORD *)(v19 + 8), *(_BYTE *)(v19 + 16));
        *(_QWORD *)v19 = a1;
        *(_QWORD *)(v19 + 8) = 0;
        *(_BYTE *)(v19 + 16) = 2;
      }
      else
      {
        specialized _NativeDictionary._insert(at:key:value:)(v12, v8, v9, 0, a1, 0, 2, (_QWORD *)v16);
        swift_bridgeObjectRetain();
      }
      *(_QWORD *)(v3 + 16) = v16;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
      swift_bridgeObjectRelease();
      return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  v21 = static _DictionaryStorage.copy(original:)();
  v16 = v21;
  if (!*(_QWORD *)(v51 + 16))
  {
LABEL_47:
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  v22 = (char *)(v21 + 64);
  v23 = (char *)(v51 + 64);
  v24 = (unint64_t)((1 << *(_BYTE *)(v16 + 32)) + 63) >> 6;
  v44 = v51 + 64;
  if (v16 != v51 || v22 >= &v23[8 * v24])
    memmove(v22, v23, 8 * v24);
  v25 = 0;
  *(_QWORD *)(v16 + 16) = *(_QWORD *)(v51 + 16);
  v26 = 1 << *(_BYTE *)(v51 + 32);
  v27 = -1;
  if (v26 < 64)
    v27 = ~(-1 << v26);
  v28 = v27 & *(_QWORD *)(v51 + 64);
  v45 = (unint64_t)(v26 + 63) >> 6;
  while (1)
  {
    if (v28)
    {
      v48 = (v28 - 1) & v28;
      v49 = v25;
      v29 = __clz(__rbit64(v28)) | (v25 << 6);
      goto LABEL_21;
    }
    v40 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
      __break(1u);
      goto LABEL_49;
    }
    if (v40 >= v45)
      goto LABEL_47;
    v41 = *(_QWORD *)(v44 + 8 * v40);
    v42 = v25 + 1;
    if (!v41)
    {
      v42 = v25 + 2;
      if (v25 + 2 >= v45)
        goto LABEL_47;
      v41 = *(_QWORD *)(v44 + 8 * v42);
      if (!v41)
      {
        v42 = v25 + 3;
        if (v25 + 3 >= v45)
          goto LABEL_47;
        v41 = *(_QWORD *)(v44 + 8 * v42);
        if (!v41)
        {
          v42 = v25 + 4;
          if (v25 + 4 >= v45)
            goto LABEL_47;
          v41 = *(_QWORD *)(v44 + 8 * v42);
          if (!v41)
          {
            v42 = v25 + 5;
            if (v25 + 5 >= v45)
              goto LABEL_47;
            v41 = *(_QWORD *)(v44 + 8 * v42);
            if (!v41)
            {
              v42 = v25 + 6;
              if (v25 + 6 >= v45)
                goto LABEL_47;
              v41 = *(_QWORD *)(v44 + 8 * v42);
              if (!v41)
              {
                v42 = v25 + 7;
                if (v25 + 7 >= v45)
                  goto LABEL_47;
                v41 = *(_QWORD *)(v44 + 8 * v42);
                if (!v41)
                {
                  v42 = v25 + 8;
                  if (v25 + 8 >= v45)
                    goto LABEL_47;
                  v41 = *(_QWORD *)(v44 + 8 * v42);
                  if (!v41)
                    break;
                }
              }
            }
          }
        }
      }
    }
LABEL_46:
    v48 = (v41 - 1) & v41;
    v49 = v42;
    v29 = __clz(__rbit64(v41)) + (v42 << 6);
LABEL_21:
    v30 = 24 * v29;
    v31 = *(_QWORD *)(v51 + 48) + v30;
    v32 = *(_QWORD *)v31;
    v33 = *(_QWORD *)(v31 + 8);
    v34 = *(_QWORD *)(v51 + 56) + v30;
    v46 = *(_QWORD *)v34;
    v35 = *(_QWORD *)v34;
    v47 = *(_QWORD *)(v34 + 8);
    v36 = *(_QWORD *)(v16 + 48) + v30;
    v37 = *(_BYTE *)(v31 + 16);
    v38 = *(_BYTE *)(v34 + 16);
    *(_QWORD *)v36 = *(_QWORD *)v31;
    *(_QWORD *)(v36 + 8) = v33;
    *(_BYTE *)(v36 + 16) = v37;
    v39 = *(_QWORD *)(v16 + 56) + v30;
    *(_QWORD *)v39 = v35;
    *(_QWORD *)(v39 + 8) = v47;
    *(_BYTE *)(v39 + 16) = v38;
    outlined copy of _XMLPlistEncodingFormat.Reference(v32, v33, v37);
    outlined copy of _XMLPlistEncodingFormat.Reference(v46, v47, v38);
    v28 = v48;
    v25 = v49;
  }
  v43 = v25 + 9;
  if (v25 + 9 >= v45)
    goto LABEL_47;
  v41 = *(_QWORD *)(v44 + 8 * v43);
  if (v41)
  {
    v42 = v25 + 9;
    goto LABEL_46;
  }
  while (1)
  {
    v42 = v43 + 1;
    if (__OFADD__(v43, 1))
      break;
    if (v42 >= v45)
      goto LABEL_47;
    v41 = *(_QWORD *)(v44 + 8 * v42);
    ++v43;
    if (v41)
      goto LABEL_46;
  }
LABEL_50:
  __break(1u);
LABEL_51:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t _PlistKeyedEncodingContainerXML.encode(_:forKey:)(__int16 a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v51;

  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(unsigned __int8 *)(v1 + 24);
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, *(_BYTE *)(v1 + 24));
  v6 = dispatch thunk of CodingKey.stringValue.getter();
  if (v5 != 7)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v8 = v6;
  v9 = v7;
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v51 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = 0x8000000000000000;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
  v13 = *(_QWORD *)(v51 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v2 = v11;
    if (*(_QWORD *)(v51 + 24) < v15)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, isUniquelyReferenced_nonNull_native);
      v16 = v51;
      v17 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
      if ((v2 & 1) != (v18 & 1))
        goto LABEL_51;
      v12 = v17;
      goto LABEL_8;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v16 = v51;
LABEL_8:
      if ((v2 & 1) != 0)
      {
        v19 = *(_QWORD *)(v16 + 56) + 24 * v12;
        outlined consume of _XMLPlistEncodingFormat.Reference(*(_QWORD *)v19, *(_QWORD *)(v19 + 8), *(_BYTE *)(v19 + 16));
        *(_QWORD *)v19 = a1;
        *(_QWORD *)(v19 + 8) = 0;
        *(_BYTE *)(v19 + 16) = 2;
      }
      else
      {
        specialized _NativeDictionary._insert(at:key:value:)(v12, v8, v9, 0, a1, 0, 2, (_QWORD *)v16);
        swift_bridgeObjectRetain();
      }
      *(_QWORD *)(v3 + 16) = v16;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
      swift_bridgeObjectRelease();
      return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  v21 = static _DictionaryStorage.copy(original:)();
  v16 = v21;
  if (!*(_QWORD *)(v51 + 16))
  {
LABEL_47:
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  v22 = (char *)(v21 + 64);
  v23 = (char *)(v51 + 64);
  v24 = (unint64_t)((1 << *(_BYTE *)(v16 + 32)) + 63) >> 6;
  v44 = v51 + 64;
  if (v16 != v51 || v22 >= &v23[8 * v24])
    memmove(v22, v23, 8 * v24);
  v25 = 0;
  *(_QWORD *)(v16 + 16) = *(_QWORD *)(v51 + 16);
  v26 = 1 << *(_BYTE *)(v51 + 32);
  v27 = -1;
  if (v26 < 64)
    v27 = ~(-1 << v26);
  v28 = v27 & *(_QWORD *)(v51 + 64);
  v45 = (unint64_t)(v26 + 63) >> 6;
  while (1)
  {
    if (v28)
    {
      v48 = (v28 - 1) & v28;
      v49 = v25;
      v29 = __clz(__rbit64(v28)) | (v25 << 6);
      goto LABEL_21;
    }
    v40 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
      __break(1u);
      goto LABEL_49;
    }
    if (v40 >= v45)
      goto LABEL_47;
    v41 = *(_QWORD *)(v44 + 8 * v40);
    v42 = v25 + 1;
    if (!v41)
    {
      v42 = v25 + 2;
      if (v25 + 2 >= v45)
        goto LABEL_47;
      v41 = *(_QWORD *)(v44 + 8 * v42);
      if (!v41)
      {
        v42 = v25 + 3;
        if (v25 + 3 >= v45)
          goto LABEL_47;
        v41 = *(_QWORD *)(v44 + 8 * v42);
        if (!v41)
        {
          v42 = v25 + 4;
          if (v25 + 4 >= v45)
            goto LABEL_47;
          v41 = *(_QWORD *)(v44 + 8 * v42);
          if (!v41)
          {
            v42 = v25 + 5;
            if (v25 + 5 >= v45)
              goto LABEL_47;
            v41 = *(_QWORD *)(v44 + 8 * v42);
            if (!v41)
            {
              v42 = v25 + 6;
              if (v25 + 6 >= v45)
                goto LABEL_47;
              v41 = *(_QWORD *)(v44 + 8 * v42);
              if (!v41)
              {
                v42 = v25 + 7;
                if (v25 + 7 >= v45)
                  goto LABEL_47;
                v41 = *(_QWORD *)(v44 + 8 * v42);
                if (!v41)
                {
                  v42 = v25 + 8;
                  if (v25 + 8 >= v45)
                    goto LABEL_47;
                  v41 = *(_QWORD *)(v44 + 8 * v42);
                  if (!v41)
                    break;
                }
              }
            }
          }
        }
      }
    }
LABEL_46:
    v48 = (v41 - 1) & v41;
    v49 = v42;
    v29 = __clz(__rbit64(v41)) + (v42 << 6);
LABEL_21:
    v30 = 24 * v29;
    v31 = *(_QWORD *)(v51 + 48) + v30;
    v32 = *(_QWORD *)v31;
    v33 = *(_QWORD *)(v31 + 8);
    v34 = *(_QWORD *)(v51 + 56) + v30;
    v46 = *(_QWORD *)v34;
    v35 = *(_QWORD *)v34;
    v47 = *(_QWORD *)(v34 + 8);
    v36 = *(_QWORD *)(v16 + 48) + v30;
    v37 = *(_BYTE *)(v31 + 16);
    v38 = *(_BYTE *)(v34 + 16);
    *(_QWORD *)v36 = *(_QWORD *)v31;
    *(_QWORD *)(v36 + 8) = v33;
    *(_BYTE *)(v36 + 16) = v37;
    v39 = *(_QWORD *)(v16 + 56) + v30;
    *(_QWORD *)v39 = v35;
    *(_QWORD *)(v39 + 8) = v47;
    *(_BYTE *)(v39 + 16) = v38;
    outlined copy of _XMLPlistEncodingFormat.Reference(v32, v33, v37);
    outlined copy of _XMLPlistEncodingFormat.Reference(v46, v47, v38);
    v28 = v48;
    v25 = v49;
  }
  v43 = v25 + 9;
  if (v25 + 9 >= v45)
    goto LABEL_47;
  v41 = *(_QWORD *)(v44 + 8 * v43);
  if (v41)
  {
    v42 = v25 + 9;
    goto LABEL_46;
  }
  while (1)
  {
    v42 = v43 + 1;
    if (__OFADD__(v43, 1))
      break;
    if (v42 >= v45)
      goto LABEL_47;
    v41 = *(_QWORD *)(v44 + 8 * v42);
    ++v43;
    if (v41)
      goto LABEL_46;
  }
LABEL_50:
  __break(1u);
LABEL_51:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t _PlistKeyedEncodingContainerXML.encode(_:forKey:)(int a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v51;

  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(unsigned __int8 *)(v1 + 24);
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, *(_BYTE *)(v1 + 24));
  v6 = dispatch thunk of CodingKey.stringValue.getter();
  if (v5 != 7)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v8 = v6;
  v9 = v7;
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v51 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = 0x8000000000000000;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
  v13 = *(_QWORD *)(v51 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v2 = v11;
    if (*(_QWORD *)(v51 + 24) < v15)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, isUniquelyReferenced_nonNull_native);
      v16 = v51;
      v17 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
      if ((v2 & 1) != (v18 & 1))
        goto LABEL_51;
      v12 = v17;
      goto LABEL_8;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v16 = v51;
LABEL_8:
      if ((v2 & 1) != 0)
      {
        v19 = *(_QWORD *)(v16 + 56) + 24 * v12;
        outlined consume of _XMLPlistEncodingFormat.Reference(*(_QWORD *)v19, *(_QWORD *)(v19 + 8), *(_BYTE *)(v19 + 16));
        *(_QWORD *)v19 = a1;
        *(_QWORD *)(v19 + 8) = 0;
        *(_BYTE *)(v19 + 16) = 2;
      }
      else
      {
        specialized _NativeDictionary._insert(at:key:value:)(v12, v8, v9, 0, a1, 0, 2, (_QWORD *)v16);
        swift_bridgeObjectRetain();
      }
      *(_QWORD *)(v3 + 16) = v16;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
      swift_bridgeObjectRelease();
      return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  v21 = static _DictionaryStorage.copy(original:)();
  v16 = v21;
  if (!*(_QWORD *)(v51 + 16))
  {
LABEL_47:
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  v22 = (char *)(v21 + 64);
  v23 = (char *)(v51 + 64);
  v24 = (unint64_t)((1 << *(_BYTE *)(v16 + 32)) + 63) >> 6;
  v44 = v51 + 64;
  if (v16 != v51 || v22 >= &v23[8 * v24])
    memmove(v22, v23, 8 * v24);
  v25 = 0;
  *(_QWORD *)(v16 + 16) = *(_QWORD *)(v51 + 16);
  v26 = 1 << *(_BYTE *)(v51 + 32);
  v27 = -1;
  if (v26 < 64)
    v27 = ~(-1 << v26);
  v28 = v27 & *(_QWORD *)(v51 + 64);
  v45 = (unint64_t)(v26 + 63) >> 6;
  while (1)
  {
    if (v28)
    {
      v48 = (v28 - 1) & v28;
      v49 = v25;
      v29 = __clz(__rbit64(v28)) | (v25 << 6);
      goto LABEL_21;
    }
    v40 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
      __break(1u);
      goto LABEL_49;
    }
    if (v40 >= v45)
      goto LABEL_47;
    v41 = *(_QWORD *)(v44 + 8 * v40);
    v42 = v25 + 1;
    if (!v41)
    {
      v42 = v25 + 2;
      if (v25 + 2 >= v45)
        goto LABEL_47;
      v41 = *(_QWORD *)(v44 + 8 * v42);
      if (!v41)
      {
        v42 = v25 + 3;
        if (v25 + 3 >= v45)
          goto LABEL_47;
        v41 = *(_QWORD *)(v44 + 8 * v42);
        if (!v41)
        {
          v42 = v25 + 4;
          if (v25 + 4 >= v45)
            goto LABEL_47;
          v41 = *(_QWORD *)(v44 + 8 * v42);
          if (!v41)
          {
            v42 = v25 + 5;
            if (v25 + 5 >= v45)
              goto LABEL_47;
            v41 = *(_QWORD *)(v44 + 8 * v42);
            if (!v41)
            {
              v42 = v25 + 6;
              if (v25 + 6 >= v45)
                goto LABEL_47;
              v41 = *(_QWORD *)(v44 + 8 * v42);
              if (!v41)
              {
                v42 = v25 + 7;
                if (v25 + 7 >= v45)
                  goto LABEL_47;
                v41 = *(_QWORD *)(v44 + 8 * v42);
                if (!v41)
                {
                  v42 = v25 + 8;
                  if (v25 + 8 >= v45)
                    goto LABEL_47;
                  v41 = *(_QWORD *)(v44 + 8 * v42);
                  if (!v41)
                    break;
                }
              }
            }
          }
        }
      }
    }
LABEL_46:
    v48 = (v41 - 1) & v41;
    v49 = v42;
    v29 = __clz(__rbit64(v41)) + (v42 << 6);
LABEL_21:
    v30 = 24 * v29;
    v31 = *(_QWORD *)(v51 + 48) + v30;
    v32 = *(_QWORD *)v31;
    v33 = *(_QWORD *)(v31 + 8);
    v34 = *(_QWORD *)(v51 + 56) + v30;
    v46 = *(_QWORD *)v34;
    v35 = *(_QWORD *)v34;
    v47 = *(_QWORD *)(v34 + 8);
    v36 = *(_QWORD *)(v16 + 48) + v30;
    v37 = *(_BYTE *)(v31 + 16);
    v38 = *(_BYTE *)(v34 + 16);
    *(_QWORD *)v36 = *(_QWORD *)v31;
    *(_QWORD *)(v36 + 8) = v33;
    *(_BYTE *)(v36 + 16) = v37;
    v39 = *(_QWORD *)(v16 + 56) + v30;
    *(_QWORD *)v39 = v35;
    *(_QWORD *)(v39 + 8) = v47;
    *(_BYTE *)(v39 + 16) = v38;
    outlined copy of _XMLPlistEncodingFormat.Reference(v32, v33, v37);
    outlined copy of _XMLPlistEncodingFormat.Reference(v46, v47, v38);
    v28 = v48;
    v25 = v49;
  }
  v43 = v25 + 9;
  if (v25 + 9 >= v45)
    goto LABEL_47;
  v41 = *(_QWORD *)(v44 + 8 * v43);
  if (v41)
  {
    v42 = v25 + 9;
    goto LABEL_46;
  }
  while (1)
  {
    v42 = v43 + 1;
    if (__OFADD__(v43, 1))
      break;
    if (v42 >= v45)
      goto LABEL_47;
    v41 = *(_QWORD *)(v44 + 8 * v42);
    ++v43;
    if (v41)
      goto LABEL_46;
  }
LABEL_50:
  __break(1u);
LABEL_51:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t _PlistKeyedEncodingContainerXML.encode(_:forKey:)(uint64_t a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v51;

  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(unsigned __int8 *)(v1 + 24);
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, *(_BYTE *)(v1 + 24));
  v6 = dispatch thunk of CodingKey.stringValue.getter();
  if (v5 != 7)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v8 = v6;
  v9 = v7;
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v51 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = 0x8000000000000000;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
  v13 = *(_QWORD *)(v51 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v2 = v11;
    if (*(_QWORD *)(v51 + 24) < v15)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, isUniquelyReferenced_nonNull_native);
      v16 = v51;
      v17 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
      if ((v2 & 1) != (v18 & 1))
        goto LABEL_51;
      v12 = v17;
      if ((v2 & 1) == 0)
        goto LABEL_46;
LABEL_9:
      v19 = *(_QWORD *)(v16 + 56) + 24 * v12;
      outlined consume of _XMLPlistEncodingFormat.Reference(*(_QWORD *)v19, *(_QWORD *)(v19 + 8), *(_BYTE *)(v19 + 16));
      *(_QWORD *)v19 = a1;
      *(_QWORD *)(v19 + 8) = 0;
      *(_BYTE *)(v19 + 16) = 2;
LABEL_47:
      *(_QWORD *)(v3 + 16) = v16;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
      swift_bridgeObjectRelease();
      return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v16 = v51;
      if ((v11 & 1) != 0)
        goto LABEL_9;
LABEL_46:
      specialized _NativeDictionary._insert(at:key:value:)(v12, v8, v9, 0, a1, 0, 2, (_QWORD *)v16);
      swift_bridgeObjectRetain();
      goto LABEL_47;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  v20 = static _DictionaryStorage.copy(original:)();
  v16 = v20;
  if (!*(_QWORD *)(v51 + 16))
  {
LABEL_45:
    swift_bridgeObjectRelease();
    if ((v2 & 1) != 0)
      goto LABEL_9;
    goto LABEL_46;
  }
  v21 = (char *)(v20 + 64);
  v22 = (char *)(v51 + 64);
  v23 = (unint64_t)((1 << *(_BYTE *)(v16 + 32)) + 63) >> 6;
  v44 = v51 + 64;
  if (v16 != v51 || v21 >= &v22[8 * v23])
    memmove(v21, v22, 8 * v23);
  v24 = 0;
  *(_QWORD *)(v16 + 16) = *(_QWORD *)(v51 + 16);
  v25 = 1 << *(_BYTE *)(v51 + 32);
  v26 = -1;
  if (v25 < 64)
    v26 = ~(-1 << v25);
  v27 = v26 & *(_QWORD *)(v51 + 64);
  v45 = (unint64_t)(v25 + 63) >> 6;
  while (1)
  {
    if (v27)
    {
      v48 = (v27 - 1) & v27;
      v49 = v24;
      v28 = __clz(__rbit64(v27)) | (v24 << 6);
      goto LABEL_19;
    }
    v39 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
      __break(1u);
      goto LABEL_49;
    }
    if (v39 >= v45)
      goto LABEL_45;
    v40 = *(_QWORD *)(v44 + 8 * v39);
    v41 = v24 + 1;
    if (!v40)
    {
      v41 = v24 + 2;
      if (v24 + 2 >= v45)
        goto LABEL_45;
      v40 = *(_QWORD *)(v44 + 8 * v41);
      if (!v40)
      {
        v41 = v24 + 3;
        if (v24 + 3 >= v45)
          goto LABEL_45;
        v40 = *(_QWORD *)(v44 + 8 * v41);
        if (!v40)
        {
          v41 = v24 + 4;
          if (v24 + 4 >= v45)
            goto LABEL_45;
          v40 = *(_QWORD *)(v44 + 8 * v41);
          if (!v40)
          {
            v41 = v24 + 5;
            if (v24 + 5 >= v45)
              goto LABEL_45;
            v40 = *(_QWORD *)(v44 + 8 * v41);
            if (!v40)
            {
              v41 = v24 + 6;
              if (v24 + 6 >= v45)
                goto LABEL_45;
              v40 = *(_QWORD *)(v44 + 8 * v41);
              if (!v40)
              {
                v41 = v24 + 7;
                if (v24 + 7 >= v45)
                  goto LABEL_45;
                v40 = *(_QWORD *)(v44 + 8 * v41);
                if (!v40)
                {
                  v41 = v24 + 8;
                  if (v24 + 8 >= v45)
                    goto LABEL_45;
                  v40 = *(_QWORD *)(v44 + 8 * v41);
                  if (!v40)
                    break;
                }
              }
            }
          }
        }
      }
    }
LABEL_44:
    v48 = (v40 - 1) & v40;
    v49 = v41;
    v28 = __clz(__rbit64(v40)) + (v41 << 6);
LABEL_19:
    v29 = 24 * v28;
    v30 = *(_QWORD *)(v51 + 48) + v29;
    v31 = *(_QWORD *)v30;
    v32 = *(_QWORD *)(v30 + 8);
    v33 = *(_QWORD *)(v51 + 56) + v29;
    v46 = *(_QWORD *)v33;
    v34 = *(_QWORD *)v33;
    v47 = *(_QWORD *)(v33 + 8);
    v35 = *(_QWORD *)(v16 + 48) + v29;
    v36 = *(_BYTE *)(v30 + 16);
    v37 = *(_BYTE *)(v33 + 16);
    *(_QWORD *)v35 = *(_QWORD *)v30;
    *(_QWORD *)(v35 + 8) = v32;
    *(_BYTE *)(v35 + 16) = v36;
    v38 = *(_QWORD *)(v16 + 56) + v29;
    *(_QWORD *)v38 = v34;
    *(_QWORD *)(v38 + 8) = v47;
    *(_BYTE *)(v38 + 16) = v37;
    outlined copy of _XMLPlistEncodingFormat.Reference(v31, v32, v36);
    outlined copy of _XMLPlistEncodingFormat.Reference(v46, v47, v37);
    v27 = v48;
    v24 = v49;
  }
  v42 = v24 + 9;
  if (v24 + 9 >= v45)
    goto LABEL_45;
  v40 = *(_QWORD *)(v44 + 8 * v42);
  if (v40)
  {
    v41 = v24 + 9;
    goto LABEL_44;
  }
  while (1)
  {
    v41 = v42 + 1;
    if (__OFADD__(v42, 1))
      break;
    if (v41 >= v45)
      goto LABEL_45;
    v40 = *(_QWORD *)(v44 + 8 * v41);
    ++v42;
    if (v40)
      goto LABEL_44;
  }
LABEL_50:
  __break(1u);
LABEL_51:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  char v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v51;

  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(unsigned __int8 *)(v1 + 24);
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, *(_BYTE *)(v1 + 24));
  v6 = dispatch thunk of CodingKey.stringValue.getter();
  if (v5 != 7)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v8 = v6;
  v9 = v7;
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v51 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = 0x8000000000000000;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
  v13 = *(_QWORD *)(v51 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v2 = v11;
    if (*(_QWORD *)(v51 + 24) < v15)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, isUniquelyReferenced_nonNull_native);
      v16 = v51;
      v17 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
      if ((v2 & 1) != (v18 & 1))
        goto LABEL_51;
      v12 = v17;
      if ((v2 & 1) == 0)
        goto LABEL_46;
LABEL_9:
      v19 = *(_QWORD *)(v16 + 56) + 24 * v12;
      outlined consume of _XMLPlistEncodingFormat.Reference(*(_QWORD *)v19, *(_QWORD *)(v19 + 8), *(_BYTE *)(v19 + 16));
      *(_QWORD *)v19 = a1;
      *(_QWORD *)(v19 + 8) = 0;
      *(_BYTE *)(v19 + 16) = 1;
LABEL_47:
      *(_QWORD *)(v3 + 16) = v16;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
      swift_bridgeObjectRelease();
      return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v16 = v51;
      if ((v11 & 1) != 0)
        goto LABEL_9;
LABEL_46:
      specialized _NativeDictionary._insert(at:key:value:)(v12, v8, v9, 0, a1, 0, 1, (_QWORD *)v16);
      swift_bridgeObjectRetain();
      goto LABEL_47;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  v20 = static _DictionaryStorage.copy(original:)();
  v16 = v20;
  if (!*(_QWORD *)(v51 + 16))
  {
LABEL_45:
    swift_bridgeObjectRelease();
    if ((v2 & 1) != 0)
      goto LABEL_9;
    goto LABEL_46;
  }
  v21 = (char *)(v20 + 64);
  v22 = (char *)(v51 + 64);
  v23 = (unint64_t)((1 << *(_BYTE *)(v16 + 32)) + 63) >> 6;
  v44 = v51 + 64;
  if (v16 != v51 || v21 >= &v22[8 * v23])
    memmove(v21, v22, 8 * v23);
  v24 = 0;
  *(_QWORD *)(v16 + 16) = *(_QWORD *)(v51 + 16);
  v25 = 1 << *(_BYTE *)(v51 + 32);
  v26 = -1;
  if (v25 < 64)
    v26 = ~(-1 << v25);
  v27 = v26 & *(_QWORD *)(v51 + 64);
  v45 = (unint64_t)(v25 + 63) >> 6;
  while (1)
  {
    if (v27)
    {
      v48 = (v27 - 1) & v27;
      v49 = v24;
      v28 = __clz(__rbit64(v27)) | (v24 << 6);
      goto LABEL_19;
    }
    v39 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
      __break(1u);
      goto LABEL_49;
    }
    if (v39 >= v45)
      goto LABEL_45;
    v40 = *(_QWORD *)(v44 + 8 * v39);
    v41 = v24 + 1;
    if (!v40)
    {
      v41 = v24 + 2;
      if (v24 + 2 >= v45)
        goto LABEL_45;
      v40 = *(_QWORD *)(v44 + 8 * v41);
      if (!v40)
      {
        v41 = v24 + 3;
        if (v24 + 3 >= v45)
          goto LABEL_45;
        v40 = *(_QWORD *)(v44 + 8 * v41);
        if (!v40)
        {
          v41 = v24 + 4;
          if (v24 + 4 >= v45)
            goto LABEL_45;
          v40 = *(_QWORD *)(v44 + 8 * v41);
          if (!v40)
          {
            v41 = v24 + 5;
            if (v24 + 5 >= v45)
              goto LABEL_45;
            v40 = *(_QWORD *)(v44 + 8 * v41);
            if (!v40)
            {
              v41 = v24 + 6;
              if (v24 + 6 >= v45)
                goto LABEL_45;
              v40 = *(_QWORD *)(v44 + 8 * v41);
              if (!v40)
              {
                v41 = v24 + 7;
                if (v24 + 7 >= v45)
                  goto LABEL_45;
                v40 = *(_QWORD *)(v44 + 8 * v41);
                if (!v40)
                {
                  v41 = v24 + 8;
                  if (v24 + 8 >= v45)
                    goto LABEL_45;
                  v40 = *(_QWORD *)(v44 + 8 * v41);
                  if (!v40)
                    break;
                }
              }
            }
          }
        }
      }
    }
LABEL_44:
    v48 = (v40 - 1) & v40;
    v49 = v41;
    v28 = __clz(__rbit64(v40)) + (v41 << 6);
LABEL_19:
    v29 = 24 * v28;
    v30 = *(_QWORD *)(v51 + 48) + v29;
    v31 = *(_QWORD *)v30;
    v32 = *(_QWORD *)(v30 + 8);
    v33 = *(_QWORD *)(v51 + 56) + v29;
    v46 = *(_QWORD *)v33;
    v34 = *(_QWORD *)v33;
    v47 = *(_QWORD *)(v33 + 8);
    v35 = *(_QWORD *)(v16 + 48) + v29;
    v36 = *(_BYTE *)(v30 + 16);
    v37 = *(_BYTE *)(v33 + 16);
    *(_QWORD *)v35 = *(_QWORD *)v30;
    *(_QWORD *)(v35 + 8) = v32;
    *(_BYTE *)(v35 + 16) = v36;
    v38 = *(_QWORD *)(v16 + 56) + v29;
    *(_QWORD *)v38 = v34;
    *(_QWORD *)(v38 + 8) = v47;
    *(_BYTE *)(v38 + 16) = v37;
    outlined copy of _XMLPlistEncodingFormat.Reference(v31, v32, v36);
    outlined copy of _XMLPlistEncodingFormat.Reference(v46, v47, v37);
    v27 = v48;
    v24 = v49;
  }
  v42 = v24 + 9;
  if (v24 + 9 >= v45)
    goto LABEL_45;
  v40 = *(_QWORD *)(v44 + 8 * v42);
  if (v40)
  {
    v41 = v24 + 9;
    goto LABEL_44;
  }
  while (1)
  {
    v41 = v42 + 1;
    if (__OFADD__(v42, 1))
      break;
    if (v41 >= v45)
      goto LABEL_45;
    v40 = *(_QWORD *)(v44 + 8 * v41);
    ++v42;
    if (v40)
      goto LABEL_44;
  }
LABEL_50:
  __break(1u);
LABEL_51:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t _PlistKeyedEncodingContainerXML.encode(_:forKey:)(unsigned __int8 a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v51;

  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(unsigned __int8 *)(v1 + 24);
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, *(_BYTE *)(v1 + 24));
  v6 = dispatch thunk of CodingKey.stringValue.getter();
  if (v5 != 7)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v8 = v6;
  v9 = v7;
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v51 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = 0x8000000000000000;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
  v13 = *(_QWORD *)(v51 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v2 = v11;
    if (*(_QWORD *)(v51 + 24) < v15)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, isUniquelyReferenced_nonNull_native);
      v16 = v51;
      v17 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
      if ((v2 & 1) != (v18 & 1))
        goto LABEL_51;
      v12 = v17;
      goto LABEL_8;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v16 = v51;
LABEL_8:
      if ((v2 & 1) != 0)
      {
        v19 = *(_QWORD *)(v16 + 56) + 24 * v12;
        outlined consume of _XMLPlistEncodingFormat.Reference(*(_QWORD *)v19, *(_QWORD *)(v19 + 8), *(_BYTE *)(v19 + 16));
        *(_QWORD *)v19 = a1;
        *(_QWORD *)(v19 + 8) = 0;
        *(_BYTE *)(v19 + 16) = 1;
      }
      else
      {
        specialized _NativeDictionary._insert(at:key:value:)(v12, v8, v9, 0, a1, 0, 1, (_QWORD *)v16);
        swift_bridgeObjectRetain();
      }
      *(_QWORD *)(v3 + 16) = v16;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
      swift_bridgeObjectRelease();
      return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  v21 = static _DictionaryStorage.copy(original:)();
  v16 = v21;
  if (!*(_QWORD *)(v51 + 16))
  {
LABEL_47:
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  v22 = (char *)(v21 + 64);
  v23 = (char *)(v51 + 64);
  v24 = (unint64_t)((1 << *(_BYTE *)(v16 + 32)) + 63) >> 6;
  v44 = v51 + 64;
  if (v16 != v51 || v22 >= &v23[8 * v24])
    memmove(v22, v23, 8 * v24);
  v25 = 0;
  *(_QWORD *)(v16 + 16) = *(_QWORD *)(v51 + 16);
  v26 = 1 << *(_BYTE *)(v51 + 32);
  v27 = -1;
  if (v26 < 64)
    v27 = ~(-1 << v26);
  v28 = v27 & *(_QWORD *)(v51 + 64);
  v45 = (unint64_t)(v26 + 63) >> 6;
  while (1)
  {
    if (v28)
    {
      v48 = (v28 - 1) & v28;
      v49 = v25;
      v29 = __clz(__rbit64(v28)) | (v25 << 6);
      goto LABEL_21;
    }
    v40 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
      __break(1u);
      goto LABEL_49;
    }
    if (v40 >= v45)
      goto LABEL_47;
    v41 = *(_QWORD *)(v44 + 8 * v40);
    v42 = v25 + 1;
    if (!v41)
    {
      v42 = v25 + 2;
      if (v25 + 2 >= v45)
        goto LABEL_47;
      v41 = *(_QWORD *)(v44 + 8 * v42);
      if (!v41)
      {
        v42 = v25 + 3;
        if (v25 + 3 >= v45)
          goto LABEL_47;
        v41 = *(_QWORD *)(v44 + 8 * v42);
        if (!v41)
        {
          v42 = v25 + 4;
          if (v25 + 4 >= v45)
            goto LABEL_47;
          v41 = *(_QWORD *)(v44 + 8 * v42);
          if (!v41)
          {
            v42 = v25 + 5;
            if (v25 + 5 >= v45)
              goto LABEL_47;
            v41 = *(_QWORD *)(v44 + 8 * v42);
            if (!v41)
            {
              v42 = v25 + 6;
              if (v25 + 6 >= v45)
                goto LABEL_47;
              v41 = *(_QWORD *)(v44 + 8 * v42);
              if (!v41)
              {
                v42 = v25 + 7;
                if (v25 + 7 >= v45)
                  goto LABEL_47;
                v41 = *(_QWORD *)(v44 + 8 * v42);
                if (!v41)
                {
                  v42 = v25 + 8;
                  if (v25 + 8 >= v45)
                    goto LABEL_47;
                  v41 = *(_QWORD *)(v44 + 8 * v42);
                  if (!v41)
                    break;
                }
              }
            }
          }
        }
      }
    }
LABEL_46:
    v48 = (v41 - 1) & v41;
    v49 = v42;
    v29 = __clz(__rbit64(v41)) + (v42 << 6);
LABEL_21:
    v30 = 24 * v29;
    v31 = *(_QWORD *)(v51 + 48) + v30;
    v32 = *(_QWORD *)v31;
    v33 = *(_QWORD *)(v31 + 8);
    v34 = *(_QWORD *)(v51 + 56) + v30;
    v46 = *(_QWORD *)v34;
    v35 = *(_QWORD *)v34;
    v47 = *(_QWORD *)(v34 + 8);
    v36 = *(_QWORD *)(v16 + 48) + v30;
    v37 = *(_BYTE *)(v31 + 16);
    v38 = *(_BYTE *)(v34 + 16);
    *(_QWORD *)v36 = *(_QWORD *)v31;
    *(_QWORD *)(v36 + 8) = v33;
    *(_BYTE *)(v36 + 16) = v37;
    v39 = *(_QWORD *)(v16 + 56) + v30;
    *(_QWORD *)v39 = v35;
    *(_QWORD *)(v39 + 8) = v47;
    *(_BYTE *)(v39 + 16) = v38;
    outlined copy of _XMLPlistEncodingFormat.Reference(v32, v33, v37);
    outlined copy of _XMLPlistEncodingFormat.Reference(v46, v47, v38);
    v28 = v48;
    v25 = v49;
  }
  v43 = v25 + 9;
  if (v25 + 9 >= v45)
    goto LABEL_47;
  v41 = *(_QWORD *)(v44 + 8 * v43);
  if (v41)
  {
    v42 = v25 + 9;
    goto LABEL_46;
  }
  while (1)
  {
    v42 = v43 + 1;
    if (__OFADD__(v43, 1))
      break;
    if (v42 >= v45)
      goto LABEL_47;
    v41 = *(_QWORD *)(v44 + 8 * v42);
    ++v43;
    if (v41)
      goto LABEL_46;
  }
LABEL_50:
  __break(1u);
LABEL_51:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t _PlistKeyedEncodingContainerXML.encode(_:forKey:)(unsigned __int16 a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v51;

  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(unsigned __int8 *)(v1 + 24);
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, *(_BYTE *)(v1 + 24));
  v6 = dispatch thunk of CodingKey.stringValue.getter();
  if (v5 != 7)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v8 = v6;
  v9 = v7;
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v51 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = 0x8000000000000000;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
  v13 = *(_QWORD *)(v51 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v2 = v11;
    if (*(_QWORD *)(v51 + 24) < v15)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, isUniquelyReferenced_nonNull_native);
      v16 = v51;
      v17 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
      if ((v2 & 1) != (v18 & 1))
        goto LABEL_51;
      v12 = v17;
      goto LABEL_8;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v16 = v51;
LABEL_8:
      if ((v2 & 1) != 0)
      {
        v19 = *(_QWORD *)(v16 + 56) + 24 * v12;
        outlined consume of _XMLPlistEncodingFormat.Reference(*(_QWORD *)v19, *(_QWORD *)(v19 + 8), *(_BYTE *)(v19 + 16));
        *(_QWORD *)v19 = a1;
        *(_QWORD *)(v19 + 8) = 0;
        *(_BYTE *)(v19 + 16) = 1;
      }
      else
      {
        specialized _NativeDictionary._insert(at:key:value:)(v12, v8, v9, 0, a1, 0, 1, (_QWORD *)v16);
        swift_bridgeObjectRetain();
      }
      *(_QWORD *)(v3 + 16) = v16;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
      swift_bridgeObjectRelease();
      return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  v21 = static _DictionaryStorage.copy(original:)();
  v16 = v21;
  if (!*(_QWORD *)(v51 + 16))
  {
LABEL_47:
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  v22 = (char *)(v21 + 64);
  v23 = (char *)(v51 + 64);
  v24 = (unint64_t)((1 << *(_BYTE *)(v16 + 32)) + 63) >> 6;
  v44 = v51 + 64;
  if (v16 != v51 || v22 >= &v23[8 * v24])
    memmove(v22, v23, 8 * v24);
  v25 = 0;
  *(_QWORD *)(v16 + 16) = *(_QWORD *)(v51 + 16);
  v26 = 1 << *(_BYTE *)(v51 + 32);
  v27 = -1;
  if (v26 < 64)
    v27 = ~(-1 << v26);
  v28 = v27 & *(_QWORD *)(v51 + 64);
  v45 = (unint64_t)(v26 + 63) >> 6;
  while (1)
  {
    if (v28)
    {
      v48 = (v28 - 1) & v28;
      v49 = v25;
      v29 = __clz(__rbit64(v28)) | (v25 << 6);
      goto LABEL_21;
    }
    v40 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
      __break(1u);
      goto LABEL_49;
    }
    if (v40 >= v45)
      goto LABEL_47;
    v41 = *(_QWORD *)(v44 + 8 * v40);
    v42 = v25 + 1;
    if (!v41)
    {
      v42 = v25 + 2;
      if (v25 + 2 >= v45)
        goto LABEL_47;
      v41 = *(_QWORD *)(v44 + 8 * v42);
      if (!v41)
      {
        v42 = v25 + 3;
        if (v25 + 3 >= v45)
          goto LABEL_47;
        v41 = *(_QWORD *)(v44 + 8 * v42);
        if (!v41)
        {
          v42 = v25 + 4;
          if (v25 + 4 >= v45)
            goto LABEL_47;
          v41 = *(_QWORD *)(v44 + 8 * v42);
          if (!v41)
          {
            v42 = v25 + 5;
            if (v25 + 5 >= v45)
              goto LABEL_47;
            v41 = *(_QWORD *)(v44 + 8 * v42);
            if (!v41)
            {
              v42 = v25 + 6;
              if (v25 + 6 >= v45)
                goto LABEL_47;
              v41 = *(_QWORD *)(v44 + 8 * v42);
              if (!v41)
              {
                v42 = v25 + 7;
                if (v25 + 7 >= v45)
                  goto LABEL_47;
                v41 = *(_QWORD *)(v44 + 8 * v42);
                if (!v41)
                {
                  v42 = v25 + 8;
                  if (v25 + 8 >= v45)
                    goto LABEL_47;
                  v41 = *(_QWORD *)(v44 + 8 * v42);
                  if (!v41)
                    break;
                }
              }
            }
          }
        }
      }
    }
LABEL_46:
    v48 = (v41 - 1) & v41;
    v49 = v42;
    v29 = __clz(__rbit64(v41)) + (v42 << 6);
LABEL_21:
    v30 = 24 * v29;
    v31 = *(_QWORD *)(v51 + 48) + v30;
    v32 = *(_QWORD *)v31;
    v33 = *(_QWORD *)(v31 + 8);
    v34 = *(_QWORD *)(v51 + 56) + v30;
    v46 = *(_QWORD *)v34;
    v35 = *(_QWORD *)v34;
    v47 = *(_QWORD *)(v34 + 8);
    v36 = *(_QWORD *)(v16 + 48) + v30;
    v37 = *(_BYTE *)(v31 + 16);
    v38 = *(_BYTE *)(v34 + 16);
    *(_QWORD *)v36 = *(_QWORD *)v31;
    *(_QWORD *)(v36 + 8) = v33;
    *(_BYTE *)(v36 + 16) = v37;
    v39 = *(_QWORD *)(v16 + 56) + v30;
    *(_QWORD *)v39 = v35;
    *(_QWORD *)(v39 + 8) = v47;
    *(_BYTE *)(v39 + 16) = v38;
    outlined copy of _XMLPlistEncodingFormat.Reference(v32, v33, v37);
    outlined copy of _XMLPlistEncodingFormat.Reference(v46, v47, v38);
    v28 = v48;
    v25 = v49;
  }
  v43 = v25 + 9;
  if (v25 + 9 >= v45)
    goto LABEL_47;
  v41 = *(_QWORD *)(v44 + 8 * v43);
  if (v41)
  {
    v42 = v25 + 9;
    goto LABEL_46;
  }
  while (1)
  {
    v42 = v43 + 1;
    if (__OFADD__(v43, 1))
      break;
    if (v42 >= v45)
      goto LABEL_47;
    v41 = *(_QWORD *)(v44 + 8 * v42);
    ++v43;
    if (v41)
      goto LABEL_46;
  }
LABEL_50:
  __break(1u);
LABEL_51:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t _PlistKeyedEncodingContainerXML.encode(_:forKey:)(unsigned int a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v51;

  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(unsigned __int8 *)(v1 + 24);
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, *(_BYTE *)(v1 + 24));
  v6 = dispatch thunk of CodingKey.stringValue.getter();
  if (v5 != 7)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v8 = v6;
  v9 = v7;
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v51 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = 0x8000000000000000;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
  v13 = *(_QWORD *)(v51 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v2 = v11;
    if (*(_QWORD *)(v51 + 24) < v15)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, isUniquelyReferenced_nonNull_native);
      v16 = v51;
      v17 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
      if ((v2 & 1) != (v18 & 1))
        goto LABEL_51;
      v12 = v17;
      goto LABEL_8;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v16 = v51;
LABEL_8:
      if ((v2 & 1) != 0)
      {
        v19 = *(_QWORD *)(v16 + 56) + 24 * v12;
        outlined consume of _XMLPlistEncodingFormat.Reference(*(_QWORD *)v19, *(_QWORD *)(v19 + 8), *(_BYTE *)(v19 + 16));
        *(_QWORD *)v19 = a1;
        *(_QWORD *)(v19 + 8) = 0;
        *(_BYTE *)(v19 + 16) = 1;
      }
      else
      {
        specialized _NativeDictionary._insert(at:key:value:)(v12, v8, v9, 0, a1, 0, 1, (_QWORD *)v16);
        swift_bridgeObjectRetain();
      }
      *(_QWORD *)(v3 + 16) = v16;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
      swift_bridgeObjectRelease();
      return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  v21 = static _DictionaryStorage.copy(original:)();
  v16 = v21;
  if (!*(_QWORD *)(v51 + 16))
  {
LABEL_47:
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  v22 = (char *)(v21 + 64);
  v23 = (char *)(v51 + 64);
  v24 = (unint64_t)((1 << *(_BYTE *)(v16 + 32)) + 63) >> 6;
  v44 = v51 + 64;
  if (v16 != v51 || v22 >= &v23[8 * v24])
    memmove(v22, v23, 8 * v24);
  v25 = 0;
  *(_QWORD *)(v16 + 16) = *(_QWORD *)(v51 + 16);
  v26 = 1 << *(_BYTE *)(v51 + 32);
  v27 = -1;
  if (v26 < 64)
    v27 = ~(-1 << v26);
  v28 = v27 & *(_QWORD *)(v51 + 64);
  v45 = (unint64_t)(v26 + 63) >> 6;
  while (1)
  {
    if (v28)
    {
      v48 = (v28 - 1) & v28;
      v49 = v25;
      v29 = __clz(__rbit64(v28)) | (v25 << 6);
      goto LABEL_21;
    }
    v40 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
      __break(1u);
      goto LABEL_49;
    }
    if (v40 >= v45)
      goto LABEL_47;
    v41 = *(_QWORD *)(v44 + 8 * v40);
    v42 = v25 + 1;
    if (!v41)
    {
      v42 = v25 + 2;
      if (v25 + 2 >= v45)
        goto LABEL_47;
      v41 = *(_QWORD *)(v44 + 8 * v42);
      if (!v41)
      {
        v42 = v25 + 3;
        if (v25 + 3 >= v45)
          goto LABEL_47;
        v41 = *(_QWORD *)(v44 + 8 * v42);
        if (!v41)
        {
          v42 = v25 + 4;
          if (v25 + 4 >= v45)
            goto LABEL_47;
          v41 = *(_QWORD *)(v44 + 8 * v42);
          if (!v41)
          {
            v42 = v25 + 5;
            if (v25 + 5 >= v45)
              goto LABEL_47;
            v41 = *(_QWORD *)(v44 + 8 * v42);
            if (!v41)
            {
              v42 = v25 + 6;
              if (v25 + 6 >= v45)
                goto LABEL_47;
              v41 = *(_QWORD *)(v44 + 8 * v42);
              if (!v41)
              {
                v42 = v25 + 7;
                if (v25 + 7 >= v45)
                  goto LABEL_47;
                v41 = *(_QWORD *)(v44 + 8 * v42);
                if (!v41)
                {
                  v42 = v25 + 8;
                  if (v25 + 8 >= v45)
                    goto LABEL_47;
                  v41 = *(_QWORD *)(v44 + 8 * v42);
                  if (!v41)
                    break;
                }
              }
            }
          }
        }
      }
    }
LABEL_46:
    v48 = (v41 - 1) & v41;
    v49 = v42;
    v29 = __clz(__rbit64(v41)) + (v42 << 6);
LABEL_21:
    v30 = 24 * v29;
    v31 = *(_QWORD *)(v51 + 48) + v30;
    v32 = *(_QWORD *)v31;
    v33 = *(_QWORD *)(v31 + 8);
    v34 = *(_QWORD *)(v51 + 56) + v30;
    v46 = *(_QWORD *)v34;
    v35 = *(_QWORD *)v34;
    v47 = *(_QWORD *)(v34 + 8);
    v36 = *(_QWORD *)(v16 + 48) + v30;
    v37 = *(_BYTE *)(v31 + 16);
    v38 = *(_BYTE *)(v34 + 16);
    *(_QWORD *)v36 = *(_QWORD *)v31;
    *(_QWORD *)(v36 + 8) = v33;
    *(_BYTE *)(v36 + 16) = v37;
    v39 = *(_QWORD *)(v16 + 56) + v30;
    *(_QWORD *)v39 = v35;
    *(_QWORD *)(v39 + 8) = v47;
    *(_BYTE *)(v39 + 16) = v38;
    outlined copy of _XMLPlistEncodingFormat.Reference(v32, v33, v37);
    outlined copy of _XMLPlistEncodingFormat.Reference(v46, v47, v38);
    v28 = v48;
    v25 = v49;
  }
  v43 = v25 + 9;
  if (v25 + 9 >= v45)
    goto LABEL_47;
  v41 = *(_QWORD *)(v44 + 8 * v43);
  if (v41)
  {
    v42 = v25 + 9;
    goto LABEL_46;
  }
  while (1)
  {
    v42 = v43 + 1;
    if (__OFADD__(v43, 1))
      break;
    if (v42 >= v45)
      goto LABEL_47;
    v41 = *(_QWORD *)(v44 + 8 * v42);
    ++v43;
    if (v41)
      goto LABEL_46;
  }
LABEL_50:
  __break(1u);
LABEL_51:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t _PlistKeyedEncodingContainerXML.encode(_:forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  int64_t v41;
  unint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t result;
  unint64_t v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int64_t v52;
  uint64_t v54;

  v5 = *(_QWORD *)(v2 + 8);
  v6 = *(_QWORD *)(v2 + 16);
  v7 = *(unsigned __int8 *)(v2 + 24);
  swift_bridgeObjectRetain();
  outlined copy of _XMLPlistEncodingFormat.Reference(v5, v6, v7);
  v8 = dispatch thunk of CodingKey.stringValue.getter();
  if (v7 != 7)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v10 = v8;
  v11 = v9;
  swift_bridgeObjectRetain();
  outlined copy of _XMLPlistEncodingFormat.Reference(v5, v6, 7);
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v54 = *(_QWORD *)(v5 + 16);
  *(_QWORD *)(v5 + 16) = 0x8000000000000000;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11, 0);
  v15 = *(_QWORD *)(v54 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v3 = v13;
    if (*(_QWORD *)(v54 + 24) < v17)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, isUniquelyReferenced_nonNull_native);
      v18 = v54;
      v19 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11, 0);
      if ((v3 & 1) != (v20 & 1))
        goto LABEL_51;
      v14 = v19;
      if ((v3 & 1) == 0)
        goto LABEL_46;
LABEL_9:
      v21 = *(_QWORD *)(v18 + 56) + 24 * v14;
      outlined consume of _XMLPlistEncodingFormat.Reference(*(_QWORD *)v21, *(_QWORD *)(v21 + 8), *(_BYTE *)(v21 + 16));
      *(_QWORD *)v21 = a1;
      *(_QWORD *)(v21 + 8) = a2;
      *(_BYTE *)(v21 + 16) = 0;
LABEL_47:
      *(_QWORD *)(v5 + 16) = v18;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v5, v6, 7);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return outlined consume of _XMLPlistEncodingFormat.Reference(v5, v6, 7);
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v18 = v54;
      if ((v13 & 1) != 0)
        goto LABEL_9;
LABEL_46:
      specialized _NativeDictionary._insert(at:key:value:)(v14, v10, v11, 0, a1, a2, 0, (_QWORD *)v18);
      swift_bridgeObjectRetain();
      goto LABEL_47;
    }
  }
  v46 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  v22 = static _DictionaryStorage.copy(original:)();
  v18 = v22;
  if (!*(_QWORD *)(v54 + 16))
  {
LABEL_45:
    swift_bridgeObjectRelease();
    v14 = v46;
    if ((v3 & 1) != 0)
      goto LABEL_9;
    goto LABEL_46;
  }
  v23 = (char *)(v22 + 64);
  v24 = (char *)(v54 + 64);
  v25 = (unint64_t)((1 << *(_BYTE *)(v18 + 32)) + 63) >> 6;
  v47 = v54 + 64;
  if (v18 != v54 || v23 >= &v24[8 * v25])
    memmove(v23, v24, 8 * v25);
  v26 = 0;
  *(_QWORD *)(v18 + 16) = *(_QWORD *)(v54 + 16);
  v27 = 1 << *(_BYTE *)(v54 + 32);
  v28 = -1;
  if (v27 < 64)
    v28 = ~(-1 << v27);
  v29 = v28 & *(_QWORD *)(v54 + 64);
  v48 = (unint64_t)(v27 + 63) >> 6;
  while (1)
  {
    if (v29)
    {
      v51 = (v29 - 1) & v29;
      v52 = v26;
      v30 = __clz(__rbit64(v29)) | (v26 << 6);
      goto LABEL_19;
    }
    v41 = v26 + 1;
    if (__OFADD__(v26, 1))
    {
      __break(1u);
      goto LABEL_49;
    }
    if (v41 >= v48)
      goto LABEL_45;
    v42 = *(_QWORD *)(v47 + 8 * v41);
    v43 = v26 + 1;
    if (!v42)
    {
      v43 = v26 + 2;
      if (v26 + 2 >= v48)
        goto LABEL_45;
      v42 = *(_QWORD *)(v47 + 8 * v43);
      if (!v42)
      {
        v43 = v26 + 3;
        if (v26 + 3 >= v48)
          goto LABEL_45;
        v42 = *(_QWORD *)(v47 + 8 * v43);
        if (!v42)
        {
          v43 = v26 + 4;
          if (v26 + 4 >= v48)
            goto LABEL_45;
          v42 = *(_QWORD *)(v47 + 8 * v43);
          if (!v42)
          {
            v43 = v26 + 5;
            if (v26 + 5 >= v48)
              goto LABEL_45;
            v42 = *(_QWORD *)(v47 + 8 * v43);
            if (!v42)
            {
              v43 = v26 + 6;
              if (v26 + 6 >= v48)
                goto LABEL_45;
              v42 = *(_QWORD *)(v47 + 8 * v43);
              if (!v42)
              {
                v43 = v26 + 7;
                if (v26 + 7 >= v48)
                  goto LABEL_45;
                v42 = *(_QWORD *)(v47 + 8 * v43);
                if (!v42)
                {
                  v43 = v26 + 8;
                  if (v26 + 8 >= v48)
                    goto LABEL_45;
                  v42 = *(_QWORD *)(v47 + 8 * v43);
                  if (!v42)
                    break;
                }
              }
            }
          }
        }
      }
    }
LABEL_44:
    v51 = (v42 - 1) & v42;
    v52 = v43;
    v30 = __clz(__rbit64(v42)) + (v43 << 6);
LABEL_19:
    v31 = 24 * v30;
    v32 = *(_QWORD *)(v54 + 48) + v31;
    v33 = *(_QWORD *)v32;
    v34 = *(_QWORD *)(v32 + 8);
    v35 = *(_QWORD *)(v54 + 56) + v31;
    v49 = *(_QWORD *)v35;
    v36 = *(_QWORD *)v35;
    v50 = *(_QWORD *)(v35 + 8);
    v37 = *(_QWORD *)(v18 + 48) + v31;
    v38 = *(_BYTE *)(v32 + 16);
    v39 = *(_BYTE *)(v35 + 16);
    *(_QWORD *)v37 = *(_QWORD *)v32;
    *(_QWORD *)(v37 + 8) = v34;
    *(_BYTE *)(v37 + 16) = v38;
    v40 = *(_QWORD *)(v18 + 56) + v31;
    *(_QWORD *)v40 = v36;
    *(_QWORD *)(v40 + 8) = v50;
    *(_BYTE *)(v40 + 16) = v39;
    outlined copy of _XMLPlistEncodingFormat.Reference(v33, v34, v38);
    outlined copy of _XMLPlistEncodingFormat.Reference(v49, v50, v39);
    v29 = v51;
    v26 = v52;
  }
  v44 = v26 + 9;
  if (v26 + 9 >= v48)
    goto LABEL_45;
  v42 = *(_QWORD *)(v47 + 8 * v44);
  if (v42)
  {
    v43 = v26 + 9;
    goto LABEL_44;
  }
  while (1)
  {
    v43 = v44 + 1;
    if (__OFADD__(v44, 1))
      break;
    if (v43 >= v48)
      goto LABEL_45;
    v42 = *(_QWORD *)(v47 + 8 * v43);
    ++v44;
    if (v42)
      goto LABEL_44;
  }
LABEL_50:
  __break(1u);
LABEL_51:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t _PlistKeyedEncodingContainerXML.encode(_:forKey:)(float a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t result;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;

  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(unsigned __int8 *)(v1 + 24);
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, *(_BYTE *)(v1 + 24));
  v6 = dispatch thunk of CodingKey.stringValue.getter();
  if (v5 != 7)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v8 = v6;
  v9 = v7;
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v51 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = 0x8000000000000000;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
  v13 = *(_QWORD *)(v51 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v5) = v11;
    if (*(_QWORD *)(v51 + 24) < v15)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, isUniquelyReferenced_nonNull_native);
      v16 = v51;
      v17 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
      if ((v5 & 1) != (v18 & 1))
        goto LABEL_51;
      v12 = v17;
      v19 = a1;
      if ((v5 & 1) == 0)
        goto LABEL_46;
LABEL_9:
      v20 = *(_QWORD *)(v16 + 56) + 24 * v12;
      outlined consume of _XMLPlistEncodingFormat.Reference(*(_QWORD *)v20, *(_QWORD *)(v20 + 8), *(_BYTE *)(v20 + 16));
      *(double *)v20 = v19;
      *(_QWORD *)(v20 + 8) = 0;
      *(_BYTE *)(v20 + 16) = 3;
LABEL_47:
      *(_QWORD *)(v3 + 16) = v16;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
      swift_bridgeObjectRelease();
      return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v16 = v51;
      v19 = a1;
      if ((v11 & 1) != 0)
        goto LABEL_9;
LABEL_46:
      specialized _NativeDictionary._insert(at:key:value:)(v12, v8, v9, 0, *(uint64_t *)&v19, 0, 3, (_QWORD *)v16);
      swift_bridgeObjectRetain();
      goto LABEL_47;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  v21 = static _DictionaryStorage.copy(original:)();
  v16 = v21;
  if (!*(_QWORD *)(v51 + 16))
  {
LABEL_45:
    swift_bridgeObjectRelease();
    v19 = a1;
    if ((v5 & 1) != 0)
      goto LABEL_9;
    goto LABEL_46;
  }
  v22 = (char *)(v21 + 64);
  v23 = (char *)(v51 + 64);
  v24 = (unint64_t)((1 << *(_BYTE *)(v16 + 32)) + 63) >> 6;
  v45 = v51 + 64;
  if (v16 != v51 || v22 >= &v23[8 * v24])
    memmove(v22, v23, 8 * v24);
  v25 = 0;
  *(_QWORD *)(v16 + 16) = *(_QWORD *)(v51 + 16);
  v26 = 1 << *(_BYTE *)(v51 + 32);
  v27 = -1;
  if (v26 < 64)
    v27 = ~(-1 << v26);
  v28 = v27 & *(_QWORD *)(v51 + 64);
  v46 = (unint64_t)(v26 + 63) >> 6;
  while (1)
  {
    if (v28)
    {
      v49 = (v28 - 1) & v28;
      v50 = v25;
      v29 = __clz(__rbit64(v28)) | (v25 << 6);
      goto LABEL_19;
    }
    v40 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
      __break(1u);
      goto LABEL_49;
    }
    if (v40 >= v46)
      goto LABEL_45;
    v41 = *(_QWORD *)(v45 + 8 * v40);
    v42 = v25 + 1;
    if (!v41)
    {
      v42 = v25 + 2;
      if (v25 + 2 >= v46)
        goto LABEL_45;
      v41 = *(_QWORD *)(v45 + 8 * v42);
      if (!v41)
      {
        v42 = v25 + 3;
        if (v25 + 3 >= v46)
          goto LABEL_45;
        v41 = *(_QWORD *)(v45 + 8 * v42);
        if (!v41)
        {
          v42 = v25 + 4;
          if (v25 + 4 >= v46)
            goto LABEL_45;
          v41 = *(_QWORD *)(v45 + 8 * v42);
          if (!v41)
          {
            v42 = v25 + 5;
            if (v25 + 5 >= v46)
              goto LABEL_45;
            v41 = *(_QWORD *)(v45 + 8 * v42);
            if (!v41)
            {
              v42 = v25 + 6;
              if (v25 + 6 >= v46)
                goto LABEL_45;
              v41 = *(_QWORD *)(v45 + 8 * v42);
              if (!v41)
              {
                v42 = v25 + 7;
                if (v25 + 7 >= v46)
                  goto LABEL_45;
                v41 = *(_QWORD *)(v45 + 8 * v42);
                if (!v41)
                {
                  v42 = v25 + 8;
                  if (v25 + 8 >= v46)
                    goto LABEL_45;
                  v41 = *(_QWORD *)(v45 + 8 * v42);
                  if (!v41)
                    break;
                }
              }
            }
          }
        }
      }
    }
LABEL_44:
    v49 = (v41 - 1) & v41;
    v50 = v42;
    v29 = __clz(__rbit64(v41)) + (v42 << 6);
LABEL_19:
    v30 = 24 * v29;
    v31 = *(_QWORD *)(v51 + 48) + v30;
    v32 = *(_QWORD *)v31;
    v33 = *(_QWORD *)(v31 + 8);
    v34 = *(_QWORD *)(v51 + 56) + v30;
    v47 = *(_QWORD *)v34;
    v35 = *(_QWORD *)v34;
    v48 = *(_QWORD *)(v34 + 8);
    v36 = *(_QWORD *)(v16 + 48) + v30;
    v37 = *(_BYTE *)(v31 + 16);
    v38 = *(_BYTE *)(v34 + 16);
    *(_QWORD *)v36 = *(_QWORD *)v31;
    *(_QWORD *)(v36 + 8) = v33;
    *(_BYTE *)(v36 + 16) = v37;
    v39 = *(_QWORD *)(v16 + 56) + v30;
    *(_QWORD *)v39 = v35;
    *(_QWORD *)(v39 + 8) = v48;
    *(_BYTE *)(v39 + 16) = v38;
    outlined copy of _XMLPlistEncodingFormat.Reference(v32, v33, v37);
    outlined copy of _XMLPlistEncodingFormat.Reference(v47, v48, v38);
    v28 = v49;
    v25 = v50;
  }
  v43 = v25 + 9;
  if (v25 + 9 >= v46)
    goto LABEL_45;
  v41 = *(_QWORD *)(v45 + 8 * v43);
  if (v41)
  {
    v42 = v25 + 9;
    goto LABEL_44;
  }
  while (1)
  {
    v42 = v43 + 1;
    if (__OFADD__(v43, 1))
      break;
    if (v42 >= v46)
      goto LABEL_45;
    v41 = *(_QWORD *)(v45 + 8 * v42);
    ++v43;
    if (v41)
      goto LABEL_44;
  }
LABEL_50:
  __break(1u);
LABEL_51:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

